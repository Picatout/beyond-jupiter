ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ BCHAR, NBASE+4   // display base character flag 
  81              	  .equ TMP, BCHAR+4   // temporary variable
  82              	  .equ CSPAN, TMP+4  // character count received by expect  
  83              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  84              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  85              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  86              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  87              	  .equ VHOLD, EVAL+4   // hold pointer 
  88              	  .equ CTXT, VHOLD+4  // context pointer 
  89              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  90              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  91              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  92              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  93              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  94              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  95              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  96              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  97              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  98              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  99              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 100              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 101              	  .equ KBD_QUEUE_SIZE, 16 
 102              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 103              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 104              	  .equ KBD_QTAIL,KBD_QHEAD+4
 105              	  .equ ROW,KBD_QTAIL+4 
 106              	  .equ COL,ROW+4 
 107              	  .equ BK_COLOR,COL+4 
ARM GAS  forth.s 			page 10


 108              	  .equ PEN_COLOR,BK_COLOR+4
 109              	  .equ VFPSW, PEN_COLOR+4 
 110              	  .equ VFBASE, VFPSW+4 
 111              	  .equ TONE_DTMR, VFBASE+4 // tone duration timer 
 112              	
 113              	/***********************************************
 114              	* MACROS
 115              	*	Assemble inline direct threaded code ending.
 116              	***********************************************/
 117              		.macro _CALL fn /* low level routine call */ 
 118              	 	PUSH {LR}
 119              		BL \fn  
 120              		POP {LR}
 121              		.endm
 122              		
 123              		.macro _RET /* exit sub-routine */ 
 124              		BX LR 
 125              		.endm 
 126              	
 127              		// dictionary header  
 128              		.macro _HEADER  label, nlen, name
 129              			.word LINK 
 130              			.equ LINK , . 
 131              		_\label: .byte \nlen    // name field
 132              			.ascii "\name"
 133              			.p2align 2 
 134              		\label:   // code field 
 135              		.endm 
 136              		
 137              	
 138              	// local function header 
 139              		.macro _FUNC label 
 140              		.section .text, "ax", %progbits 
 141              		.p2align 2 
 142              		.type \label, %function  
 143              		\label:
 144              		.endm 
 145              	
 146              	// global function header 
 147              		.macro _GBL_FUNC label 
 148              		.global \label 
 149              		_FUNC \label 
 150              		.endm 
 151              	
 152              	
 153              	// load large constant to register 
 154              		.macro _MOV32 r, value 
 155              		mov \r,#(\value&0xffff)
 156              		movt \r,#(\value>>16)
 157              		.endm 
 158              	
 159              		.macro _NEXT /* direct jump INEXT */ 
 160              		B INEXT   
 161              		.endm 
 162              	
 163              	 	.macro	_NEST /*start high level word */
 164              		BX INX  
ARM GAS  forth.s 			page 11


 165              		NOP.N 
 166              		.endm
 167              	
 168              		.macro _ADR label 
 169              		.word 1+\label  
 170              		.endm 
 171              	
 172              	 	.macro	_UNNEST	/*end high level word */
 173              		_ADR UNNEST 
 174              		.endm
 175              	
 176              	 	.macro	_DOLIT u /*long literals */
 177              		_ADR	DOLIT
 178              		.word	\u 
 179              		.endm
 180              	
 181              		.macro _DOTQP len, text 
 182              		_ADR DOTQP 
 183              		.byte \len 
 184              		.ascii "\text" 
 185              		.p2align 2 
 186              		.endm
 187              	
 188              		.macro _COMPI name 
 189              		_DOLIT \name 
 190              		_ADR CALLC 
 191              		.endm 
 192              	
 193              		.macro _ABORQ len,name 
 194              		_ADR ABORQ 
 195              		.byte \len 
 196              		.ascii "\name"
 197              		.p2align 2 
 198              		.endm
 199              	
 200              		.macro _BRAN label 
 201              		_ADR BRAN 
 202              		.word \label 
 203              		.endm 
 204              	
 205              		.macro _QBRAN label 
 206              		_ADR QBRAN 
 207              		.word \label
 208              		.endm 
 209              	
 210              		.macro _DONXT label 
 211              		_ADR DONXT
 212              		.word \label 
 213              		.endm 
 214              	
 215              	 	.macro	_PUSH	/*push TOS on data stack*/
 216              		STR	TOS,[DSP,#-4]!
 217              		.endm
 218              	
 219              	 	.macro	_POP /*pop data stack to TOS */
 220              		LDR	TOS,[DSP],#4
 221              		.endm
ARM GAS  forth.s 			page 12


 222              	
 223              		// calling a colon word 
 224              		// from a code word   
 225              		.macro _CALL_COLWORD target 
 226              	    ldr WP,=\target 
 227              		orr WP,#1
 228              		b \target  
 229              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
ARM GAS  forth.s 			page 13


  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
ARM GAS  forth.s 			page 14


 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF810C9 	  ldr IP,=dh
 159 000e 02F05FBD 	  b INEXT  
 160              	dh:
 161 0012 F1480000 	  _ADR PRESE
 162 0016 F53E0000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 212B0000 	  _ADR CFSR 
 164 0038 7D2E0000 	  _ADR DUPP
 165 003c F92D0000 	  _ADR TOR 
 166 0040 032D0000 	  _DOLIT 16 
 166      10000000 
 167 0048 85330000 	  _ADR BASE 
 168 004c 752D0000 	  _ADR STORE 
 169 0050 F13F0000 	  _ADR UDOT 
 170 0054 F53E0000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 B52D0000 	  _ADR RFROM
 172 0068 032D0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 C12E0000 	  _ADR ANDD
 174 0074 432D0000 	  _QBRAN 1f
 174      94000000 
 175 007c 452B0000 	  _ADR BFAR
 176 0080 032D0000 	  _DOLIT ','
 176      2C000000 
ARM GAS  forth.s 			page 15


 177 0088 A12B0000 	  _ADR EMIT 
 178 008c 053E0000 	  _ADR SPACE 
 179 0090 F13F0000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 F53E0000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 21200000 	  _ADR FPSCR
 184 00a8 F13F0000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF85CC8 	  ldr IP,=fpu_except
 202 00c4 02F004BD 	  b INEXT 
 203              	fpu_except:  
 204 00c8 8D3E0000 	  _ADR CR 
 205 00cc 85330000 	  _ADR BASE 
 206 00d0 892D0000 	  _ADR AT 
 207 00d4 F92D0000 	  _ADR TOR  
 208 00d8 032D0000 	  _DOLIT 16 
 208      10000000 
 209 00e0 85330000 	  _ADR BASE 
 210 00e4 752D0000 	  _ADR STORE
 211 00e8 032D0000 	  _DOLIT 4 
 211      04000000 
 212 00f0 512F0000 	  _ADR SUBB  
 213 00f4 F53E0000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 25400000 	  _ADR DOT 
 215 0104 F53E0000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 21200000 	  _ADR FPSCR 
 217 0124 7D2E0000 	  _ADR DUPP 
 218 0128 25400000 	  _ADR DOT
 219 012c 51300000 	  _ADR QDUP 
 220 0130 432D0000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 032D0000 	  _DOLIT ',' 
ARM GAS  forth.s 			page 16


 221      2C000000 
 222 0140 A12B0000 	  _ADR EMIT 
 223 0144 032D0000 	  _DOLIT ' ' 
 223      20000000 
 224 014c A12B0000 	  _ADR EMIT
 225 0150 7D2E0000 	  _ADR DUPP 
 226 0154 032D0000 	  _DOLIT 0x10 
 226      10000000 
 227 015c C12E0000 	  _ADR ANDD
 228 0160 51300000 	  _ADR QDUP  
 229 0164 432D0000 	  _QBRAN 1f 
 229      84010000 
 230 016c 032D0000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 412F0000 	  _ADR PLUS 
 232 0178 892D0000 	  _ADR AT 
 233 017c D1320000 	  _ADR COUNT 
 234 0180 593E0000 	  _ADR TYPEE
 235 0184 032D0000 	1: _DOLIT 15 
 235      0F000000 
 236 018c C12E0000 	  _ADR ANDD
 237 0190 85310000 	  _ADR CLZ 
 238 0194 032D0000 	  _DOLIT 31 
 238      1F000000 
 239 019c 8D2E0000 	  _ADR SWAP 
 240 01a0 512F0000 	  _ADR SUBB 
 241 01a4 032D0000 	  _DOLIT 2 
 241      02000000 
 242 01ac 312F0000 	  _ADR LSHIFT 
 243 01b0 032D0000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 412F0000 	  _ADR PLUS 
 245 01bc 892D0000 	  _ADR AT 
 246 01c0 D1320000 	  _ADR COUNT 
 247 01c4 593E0000 	  _ADR TYPEE 
 248 01c8 8D3E0000 	2: _ADR CR 
 249 01cc 032D0000 	  _DOLIT 0
 249      00000000 
 250 01d4 41200000 	  _ADR CLR_FPSCR 
 251 01d8 B52D0000 	  _ADR RFROM  
 252 01dc 85330000 	  _ADR BASE 
 253 01e0 752D0000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF838C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
ARM GAS  forth.s 			page 17


 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C0C6 	  ldr IP,=nmi_hl 
 306 0268 02F032BC 	  b  INEXT
 307              	nmi_hl:
ARM GAS  forth.s 			page 18


 308 026c F1480000 	  _ADR PRESE 
 309 0270 8D3E0000 	  _ADR CR 
 310 0274 F53E0000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 8D3E0000 	  _ADR CR 
 312 0298 69470000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF884C6 	  ldr IP,=hardfault_hl 
 326 02aa 02F011BC 	  b INEXT
 327              	hardfault_hl:
 328 02ae F1480000 	  _ADR PRESE
 329 02b2 8D3E0000 	  _ADR CR  
 330 02b6 F53E0000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 8D3E0000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF84CC6 	  ldr IP,=memfault_hl 
 345 02e6 02F0F3BB 	  b INEXT 
 346              	memfault_hl: 
 347 02ea F1480000 	  _ADR PRESE
 348 02ee 8D3E0000 	  _ADR CR  
 349 02f2 F53E0000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 032D0000 	  _DOLIT 16 
ARM GAS  forth.s 			page 19


 350      10000000 
 351 0320 85330000 	  _ADR BASE 
 352 0324 752D0000 	  _ADR STORE   
 353 0328 212B0000 	  _ADR CFSR
 354 032c 032D0000 	  _DOLIT 255 
 354      FF000000 
 355 0334 C12E0000 	  _ADR ANDD 
 356 0338 F13F0000 	  _ADR UDOT 
 357 033c 8D3E0000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8E4C5 	  ldr IP,=busfault_hl 
 372 0352 02F0BDBB 	  b INEXT 
 373              	busfault_hl:
 374 0356 F1480000 	  _ADR PRESE
 375 035a 032D0000 	  _DOLIT 1 
 375      01000000 
 376 0362 6D2C0000 	  _ADR ULED 
 377 0366 032D0000 	  _DOLIT  100 
 377      64000000 
 378 036e 3D330000 	  _ADR MSEC 
 379 0372 452B0000 	  _ADR BFAR 
 380 0376 212B0000 	  _ADR CFSR 
 381 037a 8D3E0000 	  _ADR CR  
 382 037e F53E0000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 032D0000 	  _DOLIT 16 
 383      10000000 
 384 03a8 85330000 	  _ADR BASE 
 385 03ac 752D0000 	  _ADR STORE   
 386 03b0 032D0000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 C12E0000 	  _ADR ANDD   
 388 03bc F13F0000 	  _ADR UDOT 
 389 03c0 F53E0000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc F13F0000 	  _ADR UDOT 
 391 03d0 8D3E0000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
ARM GAS  forth.s 			page 20


 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF854C5 	  ldr IP,=usagefault_hl
 405 03e6 02F073BB 	  b INEXT 
 406              	usagefault_hl:
 407 03ea F1480000 	  _ADR PRESE
 408 03ee 8D3E0000 	  _ADR CR  
 409 03f2 F53E0000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 032D0000 	  _DOLIT 16 
 410      10000000 
 411 0418 85330000 	  _ADR BASE 
 412 041c 752D0000 	  _ADR STORE   
 413 0420 212B0000 	  _ADR CFSR
 414 0424 032D0000 	  _DOLIT 16 
 414      10000000 
 415 042c 192F0000 	  _ADR RSHIFT 
 416 0430 F13F0000 	  _ADR UDOT 
 417 0434 8D3E0000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8AC00 	    ldr r0,[r3,#TONE_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
ARM GAS  forth.s 			page 21


 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8AC00 	  ldr r0,[r3,#TONE_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8AC00 	  str r0,[r3,#TONE_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF898C4 	  ldr IP,=ur
 474 04a4 02F014BB 	  b INEXT  
 475              	ur:
 476 04a8 F1480000 	  _ADR PRESE
 477 04ac 8D3E0000 	  _ADR CR   
 478 04b0 032D0000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 D1320000 		_ADR COUNT 
 480 04bc 593E0000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
ARM GAS  forth.s 			page 22


 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F063FD 	  bl  fpu_init 
 518 0524 00F027FA 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F020FB 	  bl  flash_spi_init   
 522 0534 05F022B9 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF68067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF47F48 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8ECA3 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
ARM GAS  forth.s 			page 23


 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
ARM GAS  forth.s 			page 24


 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
ARM GAS  forth.s 			page 25


 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A449     		ldr r1,=UZERO 
 674 06b2 4FF0B802 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
ARM GAS  forth.s 			page 26


 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
ARM GAS  forth.s 			page 27


 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
ARM GAS  forth.s 			page 28


 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
ARM GAS  forth.s 			page 29


 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 8C560000 		.word HI_BOTH  /*'BOOT */
 874 0878 5C180000 		.word PS2_QKEY /* query for character */
 875 087c 24110000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 80FE0120 		.word TIBB	/*TIBU */
 883 089c C8470000 		.word INTER	/*'EVAL */
 884 08a0 00000000 		.word 0			/*HLD */
 885 08a4 74570000 		.word _LASTN	/*CONTEXT */
 886 08a8 E0570000 		.word CTOP  	/* FCP end of system dictionnary */
 887 08ac 7C4F0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 888 08b0 74570000 		.word _LASTN	/*LAST word in dictionary */
 889 08b4 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 889      00000000 
 889      00000000 
 889      00000000 
 890 08c4 00000000 		.word 0  /* RX_HEAD */
 891 08c8 00000000 		.word 0  /* RX_TAIL */ 
 892 08cc 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 893 08d0 00000000 		.word 0  /* VID_STATE, video state */  
 894 08d4 00000000 	    .word 0  /* VID_FIELD, field */
 895 08d8 80800120 		.word VID_BUFF /* video_buffer address */ 
 896 08dc 00000000 	    .word 0 /* kbd struct */
 897 08e0 00000000 		.space KBD_QUEUE_SIZE,0  
 897      00000000 
 897      00000000 
 897      00000000 
 898 08f0 00000000 		.word 0  /* kbd queue head */
 899 08f4 00000000 		.word 0 /* kbd queue tail */ 
 900 08f8 00000000 	    .word 0 /* tv cursor row */
 901 08fc 00000000 	    .word 0 /* tv cursor column */ 
 902 0900 00000000 	    .word 0 /* tv back color */
 903 0904 07000000 	    .word 7 /* tv font color */
 904 0908 00000000 	    .word 0 /* FPSW */
ARM GAS  forth.s 			page 30


 905 090c 00000000 	    .word 0 /* FBASE */ 
 906 0910 00000000 	    .word 0 /* TONE_DTMR */ 
 907 0914 00000000 	    .word 0,0 
 907      00000000 
 908              	ULAST:
 909              	
 910              	// used by _HEADER macro 
 911              	// to link names field
 912              	// in dictionary  
 913 091c 12000000 	    .equ LINK, 0 
 913      C8000000 
 913      10490000 
 913      6C020000 
 913      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0948 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0950 1868     		ldr r0,[r3,#USART_SR]
  38 0952 5968     		ldr r1,[r3,#USART_DR]
  39 0954 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0958 0CD0     		beq 2f // no char received 
  41 095a B1F1030F 		cmp r1,#VK_CTRL_C 
  42 095e 3FF49AAD 		beq user_reboot // received CTRL-C then reboot MCU 
ARM GAS  forth.s 			page 31


  43 0962 04F15000 		add r0,UP,#RX_QUEUE
  44 0966 626E     		ldr r2,[UP,#RX_TAIL]
  45 0968 8154     		strb r1,[r0,r2]
  46 096a 02F10102 		add r2,#1 
  47 096e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0972 6266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0974 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0976 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 097e 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0980 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0984 01EA0201 	  and r1,r1,r2
  62 0988 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 098c 41EA0201 	  orr r1,r1,r2 
  64 0990 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0992 4FF4EE61 	  mov r1,#0x77<<4 
  67 0996 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0998 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 09a0 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 09a4 8160     	  str r1,[r0,#USART_BRR]
  73 09a6 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 09aa C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 09ac 4FF02500 	  mov r0,#USART1_IRQ 
  77 09b0 4FF00701 	  mov r1,#7
  78 09b4 00B5FFF7 	  _CALL nvic_set_priority
  78      97FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 09be 4FF02500 	  mov r0,#USART1_IRQ 
  81 09c2 00B5FFF7 	  _CALL nvic_enable_irq  
  81      A9FE5DF8 
  81      04EB
  82 09cc 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 09ce 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
ARM GAS  forth.s 			page 32


  91 09dc 47F8046D 		_PUSH
  92 09e0 606E     		ldr T0,[UP,#RX_TAIL] 
  93 09e2 216E     		ldr T1,[UP,#RX_HEAD]
  94 09e4 90EA0106 		eors TOS,T0,T1 
  95 09e8 0CD0     		beq 1f
  96 09ea 04F15000 		add T0,UP,#RX_QUEUE 
  97 09ee 0844     		add T0,T1 
  98 09f0 0678     		ldrb TOS,[T0]
  99 09f2 01F10101 		add T1,#1 
 100 09f6 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 09fa 2166     		str T1,[UP,#RX_HEAD]
 102 09fc 47F8046D 		_PUSH 
 103 0a00 4FF0FF36 		mov TOS,#-1
 104 0a04 02F064B8 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0a08 D2090000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0a18 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0a20 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0a22 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0a26 FBD0     		beq 1b 
 115 0a28 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0a2a 57F8046B 		_POP
 117 0a2e 02F04FB8 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0a32 0C0A0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0a3c 47F8046D 	        _PUSH 
 126 0a40 4FF00006 	        mov TOS,#0
 127 0a44 02F044B8 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0a48 360A0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0a54 47F8046D 	        _PUSH 
 135 0a58 4FF00106 	        mov TOS,#1
 136 0a5c 02F038B8 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
ARM GAS  forth.s 			page 33


 140              	    select active user interface 
 141              	****************************************/
 142 0a60 4C0A0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0a6c 3046     	        mov T0,TOS
 144 0a6e 57F8046B 	        _POP 
 145 0a72 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0a74 4B48     	        ldr T0,=SER_QKEY 
 148 0a76 6061     	        str T0,[UP,#STDIN]
 149 0a78 4B48     	        ldr T0,=SER_EMIT
 150 0a7a A061     	        str T0,[UP,#STDOUT]
 151 0a7c 02F028B8 	        _NEXT 
 152              	4: // local console 
 153 0a80 4A48     	        ldr T0,=PS2_QKEY
 154 0a82 6061     	        str T0,[UP,#STDIN]
 155 0a84 4A48     	        ldr T0,=TV_EMIT
 156 0a86 A061     	        str T0,[UP,#STDOUT]
 157 0a88 02F022B8 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0a8c 640A0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0a9c 504700BF 	      _NEST 
 166 0aa0 032D0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0aa8 9D2F0000 	1:    _ADR ONEP  // c+1
 168 0aac F92D0000 	      _ADR TOR   
 169 0ab0 032D0000 	      _DOLIT 10 
 169      0A000000 
 170 0ab8 CD360000 	      _ADR SLMOD // r q  
 171 0abc 51300000 	      _ADR QDUP  // r q q | r 0  
 172 0ac0 432D0000 	      _QBRAN 2f  // r 0 
 172      D40A0000 
 173 0ac8 B52D0000 	      _ADR RFROM // r q c 
 174 0acc 572D0000 	      _BRAN 1b
 174      A80A0000 
 175 0ad4 032D0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0adc 412F0000 	      _ADR PLUS 
 177 0ae0 A12B0000 	      _ADR EMIT 
 178 0ae4 B52D0000 	      _ADR RFROM 
 179 0ae8 51300000 	      _ADR QDUP 
 180 0aec 432D0000 	      _QBRAN 3f
 180      040B0000 
 181 0af4 AD2F0000 	      _ADR ONEM 
 182 0af8 F92D0000 	      _ADR TOR 
 183 0afc 572D0000 	      _BRAN 2b 
 183      D40A0000 
 184              	3:    
ARM GAS  forth.s 			page 34


 185 0b04 D72A0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0b08 900A0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0b14 504700BF 	      _NEST 
 193 0b18 032D0000 	      _DOLIT 27 
 193      1B000000 
 194 0b20 A12B0000 	      _ADR EMIT 
 195 0b24 032D0000 	      _DOLIT '['
 195      5B000000 
 196 0b2c A12B0000 	      _ADR EMIT 
 197 0b30 D72A0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0b34 0C0B0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0b40 504700BF 	      _NEST
 205 0b44 150B0000 	      _ADR ANSI_ESC
 206 0b48 8D2E0000 	      _ADR SWAP 
 207 0b4c 9D0A0000 	      _ADR ANSI_PARAM 
 208 0b50 032D0000 	      _DOLIT ';'
 208      3B000000 
 209 0b58 A12B0000 	      _ADR EMIT
 210 0b5c 9D0A0000 	      _ADR ANSI_PARAM
 211 0b60 032D0000 	      _DOLIT 'H'
 211      48000000 
 212 0b68 A12B0000 	      _ADR EMIT 
 213 0b6c D72A0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0b70 380B0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0b7c 504700BF 	    _NEST
 221 0b80 032D0000 	    _DOLIT 1 
 221      01000000 
 222 0b88 7D2E0000 	    _ADR DUPP 
 223 0b8c 410B0000 	    _ADR SER_AT  
 224 0b90 150B0000 	    _ADR ANSI_ESC
 225 0b94 032D0000 	    _DOLIT 'J'
 225      4A000000 
 226 0b9c A12B0000 	    _ADR EMIT 
 227 0ba0 D72A0000 	    _UNNEST 
 228 0ba4 DC090000 	
 228      180A0000 
ARM GAS  forth.s 			page 35


 228      5C180000 
 228      24110000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
ARM GAS  forth.s 			page 36


  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0bb4 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0bbc 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0bbe 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0bc6 41EA0201 	  orr r1,r2
  82 0bca 0160     	  str r1,[r0,#GPIO_MODER]
ARM GAS  forth.s 			page 37


  83 0bcc 81EA0101 	  eor r1,r1 
  84 0bd0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0bd2 4FF00101 	  mov r1,#1 // pin 1 
  88 0bd6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0bda 00B5FFF7 	  _CALL gpio_config 
  89      E0FD5DF8 
  89      04EB
  90 0be4 4FF00101 	  mov r1,#1 
  91 0be8 4FF00202 	  mov r2,#2
  92 0bec 00B5FFF7 	  _CALL gpio_speed 
  92      16FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0bf6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0bf8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0bfc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0bfe 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0c06 4FF00200 	  mov r0,#2 
 100 0c0a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0c0c 41EA0001 	  orr r1,r0 
 102 0c10 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0c12 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0c1a 41F2D470 	  mov r0,#HPER
 106 0c1e D062     	  str r0,[r2,#TIM_ARR]
 107 0c20 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0c24 D063     	  str r0,[r2,#TIM_CCR3]
 109 0c26 4FF4E170 	  mov r0,#HPULSE 
 110 0c2a 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0c2c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0c30 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0c32 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0c36 1062     	  str r0,[r2,#TIM_CCER]
 115 0c38 4FF00100 	  mov r0,#1 
 116 0c3c D060     	  str r0,[r2,#TIM_DIER]
 117 0c3e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0c40 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0c44 4FF00201 	  mov r1,#2
 121 0c48 00B5FFF7 	  _CALL nvic_set_priority
 121      4DFD5DF8 
 121      04EB
 122 0c52 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0c56 00B5FFF7 	  _CALL nvic_enable_irq
 123      5FFD5DF8 
 123      04EB
 124 0c60 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
ARM GAS  forth.s 			page 38


 130              	*************************************/
 131 0c62 00BF     	  _GBL_FUNC tv_out_isr
 132 0c64 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0c6c 81EA0101 	  eor T1,T1
 134 0c70 0161     	  str T1,[T0,#TIM_SR]
 135 0c72 A16E     	  ldr T1,[UP,#VID_CNTR]
 136 0c74 01F10101 	  add T1,#1 
 137 0c78 A166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0c7a E26E     	  ldr T2,[UP,#VID_STATE]
 140 0c7c 002A     	  cmp T2,#ST_VSYNC 
 141 0c7e 07D0     	  beq state_vsync
 142 0c80 012A     	  cmp T2,#ST_PREVID 
 143 0c82 2FD0     	  beq state_pre_video 
 144 0c84 022A     	  cmp T2,#ST_VIDEO 
 145 0c86 36D0     	  beq state_video_out 
 146 0c88 032A     	  cmp T2,#ST_POSTVID 
 147 0c8a 63D0     	  beq state_post_video
 148 0c8c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0c90 0129     	  cmp T1,#1
 152 0c92 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0c94 4FF0DB01 	  mov T1,#SERRATION
 155 0c98 0164     	  str T1,[T0,#TIM_CCR4]
 156 0c9a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0c9e C162     	  str T1,[T0,#TIM_ARR]
 158 0ca0 6BE0     	  b tv_isr_exit 
 159 0ca2 0729     	1: cmp T1,#7
 160 0ca4 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0ca6 40F62821 	  mov T1,#VSYNC_PULSE
 163 0caa 0164     	  str T1,[T0,#TIM_CCR4]
 164 0cac 65E0     	  b tv_isr_exit
 165 0cae 0D29     	2: cmp T1,#13
 166 0cb0 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0cb2 4FF0DB01 	   mov T1,#SERRATION 
 169 0cb6 0164     	   str T1,[T0,#TIM_CCR4]
 170 0cb8 5FE0     	   b tv_isr_exit   
 171 0cba 1229     	3: cmp T1,#18
 172 0cbc 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0cbe 216F     	   ldr T1,[UP,#VID_FIELD]
 175 0cc0 0029     	   cmp T1,#ODD_FIELD  
 176 0cc2 5AD0     	   beq tv_isr_exit 
 177 0cc4 01E0     	   b sync_end 
 178 0cc6 1329     	4: cmp T1,#19 
 179 0cc8 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0cca 4FF00901 	   mov T1,#9
 182 0cce A166     	   str T1,[UP,#VID_CNTR]
 183 0cd0 4FF4E171 	   mov T1,#HPULSE 
 184 0cd4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0cd6 41F2D471 	   mov T1,#HPER 
ARM GAS  forth.s 			page 39


 186 0cda C162     	   str T1,[T0,#TIM_ARR] 
 187 0cdc 4FF00101 	   mov T1,#ST_PREVID 
 188 0ce0 E166     	   str T1,[UP,#VID_STATE]
 189 0ce2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ce4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ce6 48D4     	   bmi tv_isr_exit 
 194 0ce8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0cec E166     	   str T1,[UP,#VID_STATE]
 196 0cee 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0cf2 C160     	   str T1,[T0,#TIM_DIER]
 198 0cf4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0cf6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0cf8 06D9     	   bls 1f 
 205 0cfa 4FF00301 	   mov T1,#ST_POSTVID 
 206 0cfe E166     	   str T1,[UP,#VID_STATE]
 207 0d00 4FF00101 	   mov T1,#1 
 208 0d04 C160     	   str T1,[T0,#TIM_DIER]
 209 0d06 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0d08 606F     	   ldr T0,[UP,#VID_BUFFER]
 212 0d0a A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0d0e 4FF0A003 	   mov T3,#160
 214 0d12 03FB01F1 	   mul T1,T3 
 215 0d16 0844     	   add T0,T1  
 216 0d18 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0d20 10F8012B 	2: ldrb T2,[T0],#1 
 222 0d24 4FEA0222 	   lsl T2,#8 
 223 0d28 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0d2a AFF30080 	   nop.w 
 225 0d2e AFF30080 	   nop.w
 226 0d32 AFF30080 	   nop.w 
 227 0d36 AFF30080 	   nop.w 
 228 0d3a 4FEA0212 	   lsl T2,#4  
 229 0d3e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0d40 AFF30080 	   nop.w
 231 0d44 AFF30080 	   nop.w  
 232 0d48 013B     	   subs T3,#1
 233 0d4a E9D1     	   bne 2b  
 234 0d4c 4FF47022 	   mov T2,#(15<<16) 
 235 0d50 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0d52 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0d54 4FF48372 	   mov T2,#262
 239 0d58 9142     	   cmp T1,T2
 240 0d5a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
ARM GAS  forth.s 			page 40


 242 0d5c 216F     	   ldr T1,[UP,VID_FIELD]
 243 0d5e 11B9     	   cbnz T1, frame_end 
 244 0d60 40F6E931 	   mov T1,#SYNC_LINE
 245 0d64 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0d66 4FF00001 	   mov T1,#ST_VSYNC 
 248 0d6a E166     	   str T1,[UP,#VID_STATE]
 249 0d6c 81EA0101 	   eor T1,T1 
 250 0d70 A166     	   str T1,[UP,#VID_CNTR]
 251 0d72 216F     	   ldr T1,[UP,#VID_FIELD]
 252 0d74 6FEA0101 	   mvn T1,T1  
 253 0d78 2167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0d7a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0d7c 740B0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0d8c 47F8046D 		_PUSH 
 266 0d90 04F19C06 		ADD TOS,UP,#BK_COLOR
 267 0d94 01F09CBE 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0d98 800D0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0da8 47F8046D 		_PUSH 
 273 0dac 04F1A006 		ADD TOS,UP,#PEN_COLOR
 274 0db0 01F08EBE 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0db4 9C0D0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0dc0 47F8046D 	  _PUSH 
 280 0dc4 04F19806 	  ADD TOS,UP,#COL 
 281 0dc8 01F082BE 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0dcc B80D0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0dd4 47F8046D 	  _PUSH 
 287 0dd8 04F19406 	  ADD TOS,UP,#ROW 
 288 0ddc 01F078BE 	  _NEXT 
 289              	
ARM GAS  forth.s 			page 41


 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0de0 D00D0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0dec 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0df0 00FB06F6 	  mul TOS,T0 
 295 0df4 01F06CBE 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0df8 E40D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0e04 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0e08 00FB06F6 	  mul TOS,T0 
 302 0e0c 01F060BE 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0e10 FC0D0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0e1c 47F8046D 	  _PUSH 
 308 0e20 DFF88C65 	  ldr TOS,=font_6x8 
 309 0e24 01F054BE 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0e28 140E0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0e34 47F8046D 	  _PUSH 
 315 0e38 666F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0e3a 01F049BE 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0e3e 2C0E0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0e48 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0e4a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0e4e 02FB00F0 	    mul T0,T2 
 330 0e52 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0e56 1044     	    add T0,T2 
 332 0e58 636F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0e5a 0344     	    add T3,T0 // T3 -> byte address 
 334 0e5c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0e5e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0e62 11F0010F 	    tst T1,#1 
ARM GAS  forth.s 			page 42


 337 0e66 01D0     	    beq 1f 
 338 0e68 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0e6c DFF84405 	1:  ldr T0,=plot_op 
 340 0e70 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0e74 05EA0205 	    and WP,T2 // mask out nibble 
 343 0e78 94F89C00 	    ldrb T0,[UP,#BK_COLOR]
 344 0e7c 11F0010F 	    tst T1,#1 
 345 0e80 01D1     	    bne 1f 
 346 0e82 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0e86 45EA0005 	1:  orr WP,T0  
 348 0e8a 1D70     	    strb WP,[T3]
 349 0e8c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0e8e 05EA0205 	    and WP,T2 
 352 0e92 94F8A000 	    ldrb T0,[UP,#PEN_COLOR]
 353 0e96 11F0010F 	    tst T1,#1
 354 0e9a 01D1     	    bne 1f 
 355 0e9c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0ea0 45EA0005 	1:	orr WP,T0 
 357 0ea4 1D70     	    strb WP,[T3]
 358 0ea6 0DE0     	    b 9f 
 359              	op_invert:
 360 0ea8 85EA0205 	    eor WP,T2 
 361 0eac 1D70     	    strb WP,[T3]
 362 0eae 09E0     	    b 9f 
 363              	op_xor:
 364 0eb0 D4F8A000 	    ldr T0,[UP,#PEN_COLOR]
 365 0eb4 11F0010F 	    tst T1,#1 
 366 0eb8 01D1     	    bne 1f 
 367 0eba 4FEA0010 	    lsl T0,#4 
 368 0ebe 85EA0005 	1:  eor WP,T0 
 369 0ec2 1D70     	    strb WP,[T3]
 370 0ec4 57F8046B 	9:  _POP 
 371 0ec8 01F002BE 	    _NEXT 
 372              	
 373 0ecc 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ed0 420E0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0edc A06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0ede 0028     	    cmp T0,#0
 381 0ee0 FCD1     	    bne 1b
 382 0ee2 01F0F5BD 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0ee6 D40E0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0ef0 80EA0000 	    eor T0,T0 
 388 0ef4 94F89C10 	    ldrb T1,[UP,#BK_COLOR]
 389 0ef8 40EA0100 	    orr T0,T1 
ARM GAS  forth.s 			page 43


 390 0efc 4FEA0111 	    lsl T1,#4 
 391 0f00 40EA0100 	    orr T0,T1 
 392 0f04 4FEA0021 	    lsl T1,T0,#8 
 393 0f08 40EA0100 	    orr T0,T1 
 394 0f0c 4FEA0041 	    lsl T1,T0,#16
 395 0f10 40EA0100 	    orr T0,T1 
 396 0f14 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0f18 626F     	    ldr T2,[UP,#VID_BUFFER]
 398 0f1a 5050     	1:	str T0,[T2,T1]
 399 0f1c 0439     	    subs T1,#4
 400 0f1e FCD1     	    bne 1b
 401 0f20 1060     	    str T0,[T2]
 402 0f22 80EA0000 	    eor T0,T0 
 403 0f26 C4F89400 	    str T0,[UP,#ROW]
 404 0f2a C4F89800 	    str T0,[UP,#COL]
 405 0f2e 01F0CFBD 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0f32 EA0E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0f40 504700BF 	  _NEST
 412 0f44 032D0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0f4c 7D2E0000 	  _ADR DUPP  
 414 0f50 F92D0000 	  _ADR TOR 
 415 0f54 612F0000 	  _ADR STAR
 416 0f58 350E0000 	  _ADR VIDBUFF
 417 0f5c 412F0000 	  _ADR PLUS
 418 0f60 B52D0000 	  _ADR RFROM   
 419 0f64 032D0000 	  _DOLIT 0 
 419      00000000 
 420 0f6c 01390000 	  _ADR FILL 
 421 0f70 D72A0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0f74 360F0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0f84 504700BF 	    _NEST 
 429 0f88 350E0000 	    _ADR VIDBUFF 
 430 0f8c 7D2E0000 	    _ADR DUPP 
 431 0f90 032D0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0f98 7D2E0000 	    _ADR DUPP 
 433 0f9c F92D0000 	    _ADR TOR 
 434 0fa0 412F0000 	    _ADR PLUS 
 435 0fa4 8D2E0000 	    _ADR SWAP 
 436 0fa8 032D0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
ARM GAS  forth.s 			page 44


 437 0fb0 B52D0000 	    _ADR RFROM  
 438 0fb4 512F0000 	    _ADR SUBB 
 439 0fb8 B9380000 	    _ADR MOVE
 440 0fbc 032D0000 	    _DOLIT 24 
 440      18000000 
 441 0fc4 410F0000 	    _ADR CLRLINE 
 442 0fc8 D72A0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0fcc 780F0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0fdc 504700BF 	    _NEST 
 450 0fe0 350E0000 	    _ADR VIDBUFF
 451 0fe4 7D2E0000 	    _ADR DUPP 
 452 0fe8 032D0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0ff0 412F0000 	    _ADR PLUS 
 454 0ff4 032D0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0ffc 032D0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 1004 512F0000 	    _ADR SUBB  
 457 1008 B9380000 	    _ADR MOVE
 458 100c 032D0000 	    _DOLIT 0 
 458      00000000 
 459 1014 410F0000 	    _ADR CLRLINE
 460 1018 D72A0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 101c D00F0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 1028 E34D     	    ldr WP,=SCROLLUP 
 469 102a 45F00105 	    orr WP,#1
 470 102e 80EA0000 	    eor T0,T0 
 471 1032 C4F89800 	    str T0,[UP,#COL]
 472 1036 D4F89400 	    ldr T0,[UP,#ROW]
 473 103a 1828     	    cmp T0,#24 
 474 103c A2D0     	    beq SCROLLUP  
 475 103e 00F10100 	    add T0,#1 
 476 1042 C4F89400 	    str T0,[UP,#ROW]
 477 1046 01F043BD 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 104a 20100000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
ARM GAS  forth.s 			page 45


 482      4854
 483 1054 D4F89800 	  ldr T0,[UP,#COL]
 484 1058 00F10100 	  add T0,#1
 485 105c 3528     	  cmp T0,#53
 486 105e E3D5     	  bpl TV_CRLF  
 487 1060 C4F89800 	  str T0,[UP,#COL]
 488 1064 01F034BD 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 1068 4E100000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1074 D4F89800 	    ldr T0,[UP,#COL]
 497 1078 28B1     	    cbz T0,1f 
 498 107a A0F10100 	    sub T0,#1 
 499 107e C4F89800 	    str T0,[UP,#COL]
 500 1082 01F025BD 	    _NEXT 
 501 1086 D4F89400 	1:  ldr T0,[UP,#ROW]
 502 108a 38B1     	    cbz T0,9f
 503 108c A0F10100 	    sub T0,#1
 504 1090 C4F89400 	    str T0,[UP,#ROW]
 505 1094 4FF03400 	    mov T0,#52 
 506 1098 C4F89800 	    str T0,[UP,#COL]
 507 109c 01F018BD 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 10a0 4FF08000 	    mov T0,#128 
 513 10a4 06EA0006 	    and TOS,T0 
 514 10a8 4FEAD616 	    lsr TOS,#7
 515 10ac 01F010BD 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 10b0 3868     	  ldr T0,[DSP]
 520 10b2 00F10100 	  add T0,#1 
 521 10b6 3860     	  str T0,[DSP]
 522 10b8 01F00ABD 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 10bc 4FEA4606 	    lsl TOS,#1
 527 10c0 01F006BD 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 10c4 504700BF 	    _NEST 
 536 10c8 032D0000 	    _DOLIT 5 
ARM GAS  forth.s 			page 46


 536      05000000 
 537 10d0 F92D0000 	    _ADR TOR 
 538 10d4 F92D0000 	1:  _ADR TOR 
 539 10d8 B5300000 	    _ADR DDUP 
 540 10dc E52D0000 	    _ADR RAT
 541 10e0 A1100000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 10e4 490E0000 	    _ADR PLOT 
 543 10e8 B1100000 	    _ADR INCR_X 
 544 10ec B52D0000 	    _ADR RFROM 
 545 10f0 BD100000 	    _ADR NEXT_PIXEL
 546 10f4 252D0000 	    _DONXT 1b
 546      D4100000 
 547 10fc A1300000 	    _ADR TDROP 
 548 1100 D72A0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 1104 A6F12006 	   sub TOS,#32
 553 1108 4FF00800 	   mov T0,#8 
 554 110c 00FB06F6 	   mul TOS,T0 
 555 1110 A748     	   ldr T0,=font_6x8
 556 1112 0644     	   add TOS,T0 
 557 1114 01F0DCBC 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 1118 6C100000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 1124 504700BF 	    _NEST
 565 1128 7D2E0000 	    _ADR DUPP 
 566 112c 032D0000 	    _DOLIT 32 
 566      20000000 
 567 1134 01320000 	    _ADR ULESS
 568 1138 432D0000 	    _QBRAN 1f
 568      48110000 
 569 1140 572D0000 	    _BRAN CTRL_KEY
 569      AC110000 
 570 1148 05110000 	1:  _ADR CHAR_FONT 
 571 114c C10D0000 	    _ADR CURSOR_COL 
 572 1150 892D0000 	    _ADR AT
 573 1154 050E0000 	    _ADR COLX  // x coord 
 574 1158 D50D0000 	    _ADR CURSOR_ROW 
 575 115c 892D0000 	    _ADR AT    
 576 1160 ED0D0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1164 65300000 	    _ADR ROT  // TEST 
 578 1168 032D0000 	    _DOLIT 7   
 578      07000000 
 579 1170 F92D0000 	    _ADR TOR  
 580 1174 F92D0000 	1:  _ADR TOR  // { x y }
 581 1178 B5300000 	    _ADR DDUP  // { x y x y }
 582 117c E52D0000 	    _ADR RAT 
 583 1180 A92D0000 	    _ADR CAT   // { x y x y r }
 584 1184 C5100000 	    _ADR CHAR_ROW 
 585 1188 9D2F0000 	    _ADR ONEP // {x y' }
ARM GAS  forth.s 			page 47


 586 118c B52D0000 	    _ADR RFROM 
 587 1190 9D2F0000 	    _ADR ONEP // {x y' c-adr' }
 588 1194 252D0000 	    _DONXT 1b
 588      74110000 
 589 119c A1300000 	    _ADR TDROP  
 590 11a0 55100000 	    _ADR RIGHT
 591 11a4 95120000 	9:  _ADR SHOW_CURSOR 
 592 11a8 D72A0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 11ac 1D130000 	    _ADR HIDE_CURSOR
 595 11b0 7D2E0000 	    _ADR DUPP 
 596 11b4 032D0000 	    _DOLIT BKSPP  
 596      08000000 
 597 11bc C9310000 	    _ADR EQUAL 
 598 11c0 432D0000 	    _QBRAN 1f 
 598      D8110000 
 599 11c8 75120000 	    _ADR BACK_SPACE 
 600 11cc 6D2E0000 	8:  _ADR DROP 
 601 11d0 572D0000 	    _BRAN 9b 
 601      A4110000 
 602 11d8 7D2E0000 	1:  _ADR DUPP 
 603 11dc 032D0000 	    _DOLIT CRR 
 603      0D000000 
 604 11e4 C9310000 	    _ADR EQUAL 
 605 11e8 432D0000 	    _QBRAN 1f 
 605      FC110000 
 606 11f0 1D120000 	    _ADR CAR_RET
 607 11f4 572D0000 	    _BRAN 8b
 607      CC110000 
 608 11fc 032D0000 	1:  _DOLIT LF 
 608      0A000000 
 609 1204 C9310000 	    _ADR EQUAL 
 610 1208 432D0000 	    _QBRAN 9b 
 610      A4110000 
 611 1210 35120000 	    _ADR LN_FEED
 612 1214 572D0000 	    _BRAN 9b  
 612      A4110000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 121c 504700BF 	   _NEST
 620 1220 032D0000 	   _DOLIT 0 
 620      00000000 
 621 1228 C10D0000 	   _ADR CURSOR_COL 
 622 122c 752D0000 	   _ADR STORE 
 623 1230 D72A0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1234 504700BF 	    _NEST 
 631 1238 D50D0000 	    _ADR CURSOR_ROW 
ARM GAS  forth.s 			page 48


 632 123c 892D0000 	    _ADR AT 
 633 1240 7D2E0000 	    _ADR DUPP 
 634 1244 032D0000 	    _DOLIT 24 
 634      18000000 
 635 124c E92E0000 	    _ADR XORR 
 636 1250 432D0000 	    _QBRAN 1f
 636      68120000 
 637 1258 9D2F0000 	    _ADR ONEP 
 638 125c D50D0000 	    _ADR CURSOR_ROW 
 639 1260 752D0000 	    _ADR STORE 
 640 1264 D72A0000 	    _UNNEST    
 641 1268 6D2E0000 	1:  _ADR DROP 
 642 126c 850F0000 	    _ADR SCROLLUP 
 643 1270 D72A0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1274 504700BF 	  _NEST 
 652 1278 75100000 	  _ADR LEFT 
 653 127c 95120000 	  _ADR SHOW_CURSOR
 654 1280 D72A0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1284 1C110000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1294 504700BF 	    _NEST 
 663 1298 032D0000 	    _DOLIT 0xFF
 663      FF000000 
 664 12a0 D50D0000 	0:  _ADR CURSOR_ROW
 665 12a4 892D0000 	    _ADR AT  
 666 12a8 9D2F0000 	    _ADR ONEP 
 667 12ac ED0D0000 	    _ADR ROWY 
 668 12b0 032D0000 	    _DOLIT BPR
 668      A0000000 
 669 12b8 612F0000 	    _ADR STAR
 670 12bc 032D0000 	    _DOLIT BPR  
 670      A0000000 
 671 12c4 512F0000 	    _ADR SUBB 
 672 12c8 C10D0000 	    _ADR CURSOR_COL
 673 12cc 892D0000 	    _ADR AT 
 674 12d0 050E0000 	    _ADR COLX 
 675 12d4 41300000 	    _ADR TWOSL  
 676 12d8 412F0000 	    _ADR PLUS
 677 12dc 350E0000 	    _ADR VIDBUFF
 678 12e0 412F0000 	    _ADR PLUS
 679 12e4 032D0000 	    _DOLIT 2
 679      02000000 
ARM GAS  forth.s 			page 49


 680 12ec F92D0000 	    _ADR TOR  
 681 12f0 B5300000 	1:  _ADR DDUP 
 682 12f4 952D0000 	    _ADR CSTOR 
 683 12f8 9D2F0000 	    _ADR ONEP 
 684 12fc 252D0000 	    _DONXT 1b
 684      F0120000 
 685 1304 8D300000 	2:  _ADR DDROP // drop 3 elements 
 686 1308 D72A0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 130c 88120000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 131c 504700BF 	    _NEST 
 694 1320 8D0D0000 	    _ADR BACKCOLOR 
 695 1324 892D0000 	    _ADR AT 
 696 1328 7D2E0000 	    _ADR DUPP  
 697 132c 032D0000 	    _DOLIT 4 
 697      04000000 
 698 1334 312F0000 	    _ADR LSHIFT 
 699 1338 D52E0000 	    _ADR ORR 
 700 133c 572D0000 	    _BRAN 0b
 700      A0120000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1344 10130000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1350 352E     	    cmp TOS,#53
 706 1352 01D4     	    bmi 1f 
 707 1354 4FF03406 	    mov TOS,#52
 708 1358 C4F89860 	1:  str TOS,[UP,#COL]
 709 135c 57F8046B 	    _POP
 710 1360 192E     	    cmp TOS,#25
 711 1362 01D4     	    bmi 1f 
 712 1364 4FF01806 	    mov TOS,#24 
 713 1368 C4F89460 	1:  str TOS,[UP,#ROW]
 714 136c 57F8046B 	    _POP 
 715 1370 01F0AEBB 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1374 48130000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1380 504700BF 	    _NEST 
 721 1384 31380000 	    _ADR PAD 
 722 1388 7D2E0000 	    _ADR DUPP 
 723 138c 9D2F0000 	    _ADR ONEP 
 724 1390 032D0000 	    _DOLIT 53
 724      35000000 
 725 1398 B5460000 	    _ADR ACCEP
ARM GAS  forth.s 			page 50


 726 139c 8D2E0000 	    _ADR SWAP 
 727 13a0 6D2E0000 	    _ADR DROP 
 728 13a4 A12E0000 	    _ADR OVER 
 729 13a8 952D0000 	    _ADR CSTOR  
 730 13ac D72A0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
ARM GAS  forth.s 			page 51


 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
ARM GAS  forth.s 			page 52


 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
ARM GAS  forth.s 			page 53


 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
ARM GAS  forth.s 			page 54


  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
ARM GAS  forth.s 			page 55


  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
ARM GAS  forth.s 			page 56


  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
ARM GAS  forth.s 			page 57


 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 13bc 1C61     	   .byte 0x1c,'a' 
   9 13be 3262     	   .byte 0x32,'b'
  10 13c0 2163     	   .byte 0x21,'c'
  11 13c2 2364     	   .byte 0x23,'d'
  12 13c4 2465     	   .byte 0x24,'e'
  13 13c6 2B66     	   .byte 0x2b,'f'
  14 13c8 3467     	   .byte 0x34,'g'
  15 13ca 3368     	   .byte 0x33,'h'
  16 13cc 4369     	   .byte 0x43,'i'
  17 13ce 3B6A     	   .byte 0x3B,'j'
  18 13d0 426B     	   .byte 0x42,'k'
  19 13d2 4B6C     	   .byte 0x4b,'l'
  20 13d4 3A6D     	   .byte 0x3a,'m'
  21 13d6 316E     	   .byte 0x31,'n'
  22 13d8 446F     	   .byte 0x44,'o'
  23 13da 4D70     	   .byte 0x4d,'p'
  24 13dc 1571     	   .byte 0x15,'q'
  25 13de 2D72     	   .byte 0x2d,'r'
  26 13e0 1B73     	   .byte 0x1b,'s'
  27 13e2 2C74     	   .byte 0x2c,'t'
  28 13e4 3C75     	   .byte 0x3c,'u'
  29 13e6 2A76     	   .byte 0x2a,'v'
  30 13e8 1D77     	   .byte 0x1d,'w'
  31 13ea 2278     	   .byte 0x22,'x'
  32 13ec 3579     	   .byte 0x35,'y'
  33 13ee 1A7A     	   .byte 0x1a,'z'
  34 13f0 4530     	   .byte 0x45,'0'
  35 13f2 1631     	   .byte 0x16,'1'
  36 13f4 1E32     	   .byte 0x1e,'2'
  37 13f6 2633     	   .byte 0x26,'3'
  38 13f8 2534     	   .byte 0x25,'4'
  39 13fa 2E35     	   .byte 0x2e,'5'
  40 13fc 3636     	   .byte 0x36,'6'
  41 13fe 3D37     	   .byte 0x3d,'7'
  42 1400 3E38     	   .byte 0x3e,'8'
  43 1402 4639     	   .byte 0x46,'9'
  44 1404 0E60     	   .byte 0x0e,'`'
  45 1406 4E2D     	   .byte 0x4e,'-'
  46 1408 553D     	   .byte 0x55,'='
  47 140a 5D5C     	   .byte 0x5d,'\\'
  48 140c 545B     	   .byte 0x54,'['
  49 140e 5B5D     	   .byte 0x5b,']'
  50 1410 4C3B     	   .byte 0x4c,';'
  51 1412 5227     	   .byte 0x52,'\''
  52 1414 412C     	   .byte 0x41,','
ARM GAS  forth.s 			page 58


  53 1416 492E     	   .byte 0x49,'.'
  54 1418 7C2A     	   .byte 0x7c,'*'
  55 141a 792B     	   .byte 0x79,'+'
  56 141c 2920     	   .byte 0x29,' '
  57 141e 5A0D     	   .byte SC_ENTER,CRR 
  58 1420 6608     	   .byte SC_BKSP,BKSPP 
  59 1422 0D09     	   .byte SC_TAB,9
  60 1424 761B     	   .byte SC_ESC,27
  61 1426 119E     	   .byte SC_LALT,VK_LALT 
  62 1428 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 142a 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 142c 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 142e 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1430 5800     	   .byte SC_CAPS,0
  67 1432 0580     	   .byte SC_F1,VK_F1
  68 1434 0681     	   .byte SC_F2,VK_F2
  69 1436 0482     	   .byte SC_F3,VK_F3
  70 1438 0C83     	   .byte SC_F4,VK_F4
  71 143a 0384     	   .byte SC_F5,VK_F5
  72 143c 0B85     	   .byte SC_F6,VK_F6
  73 143e 8386     	   .byte SC_F7,VK_F7
  74 1440 0A87     	   .byte SC_F8,VK_F8
  75 1442 0188     	   .byte SC_F9,VK_F9
  76 1444 098A     	   .byte SC_F10,VK_F10
  77 1446 788B     	   .byte SC_F11,VK_F11
  78 1448 078C     	   .byte SC_F12,VK_F12
  79 144a 7030     	   .byte SC_KP0,'0'
  80 144c 6931     	   .byte SC_KP1,'1'
  81 144e 7232     	   .byte SC_KP2,'2'
  82 1450 7A33     	   .byte SC_KP3,'3'
  83 1452 6B34     	   .byte SC_KP4,'4'
  84 1454 7335     	   .byte SC_KP5,'5'
  85 1456 7436     	   .byte SC_KP6,'6'
  86 1458 6C37     	   .byte SC_KP7,'7'
  87 145a 7538     	   .byte SC_KP8,'8'
  88 145c 7D39     	   .byte SC_KP9,'9'
  89 145e 7C2A     	   .byte SC_KPMUL,'*'
  90 1460 4A2F     	   .byte SC_KPDIV,'/'
  91 1462 792B     	   .byte SC_KPPLUS,'+'
  92 1464 7B2D     	   .byte SC_KPMINUS,'-'
  93 1466 712E     	   .byte SC_KPDOT,'.'
  94 1468 5A0D     	   .byte SC_KPENTER,'\r'
  95 146a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 146c AAAA     	   .byte BAT_OK,BAT_OK  
  97 146e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1470 6141     	   .byte 'a','A'
 102 1472 6242     	   .byte 'b','B'
 103 1474 6343     	   .byte 'c','C'
 104 1476 6444     	   .byte 'd','D'
 105 1478 6545     	   .byte 'e','E'
 106 147a 6646     	   .byte 'f','F'
 107 147c 6747     	   .byte 'g','G'
 108 147e 6848     	   .byte 'h','H'
 109 1480 6949     	   .byte 'i','I'
ARM GAS  forth.s 			page 59


 110 1482 6A4A     	   .byte 'j','J'
 111 1484 6B4B     	   .byte 'k','K'
 112 1486 6C4C     	   .byte 'l','L'
 113 1488 6D4D     	   .byte 'm','M'
 114 148a 6E4E     	   .byte 'n','N'
 115 148c 6F4F     	   .byte 'o','O'
 116 148e 7050     	   .byte 'p','P'
 117 1490 7151     	   .byte 'q','Q'
 118 1492 7252     	   .byte 'r','R'
 119 1494 7353     	   .byte 's','S'
 120 1496 7454     	   .byte 't','T'
 121 1498 7555     	   .byte 'u','U'
 122 149a 7656     	   .byte 'v','V'
 123 149c 7757     	   .byte 'w','W'
 124 149e 7858     	   .byte 'x','X'
 125 14a0 7959     	   .byte 'y','Y'
 126 14a2 7A5A     	   .byte 'z','Z'
 127 14a4 3121     	   .byte '1','!'
 128 14a6 3240     	   .byte '2','@'
 129 14a8 3323     	   .byte '3','#'
 130 14aa 3424     	   .byte '4','$'
 131 14ac 3525     	   .byte '5','%'
 132 14ae 365E     	   .byte '6','^'
 133 14b0 3726     	   .byte '7','&'
 134 14b2 382A     	   .byte '8','*'
 135 14b4 3928     	   .byte '9','('
 136 14b6 3029     	   .byte '0',')'
 137 14b8 2D5F     	   .byte '-','_'
 138 14ba 3D2B     	   .byte '=','+'
 139 14bc 607E     	   .byte '`','~'
 140 14be 2722     	   .byte '\'','"'
 141 14c0 2C3C     	   .byte ',','<'
 142 14c2 2E3E     	   .byte '.','>'
 143 14c4 2F3F     	   .byte '/','?'
 144 14c6 5C7C     	   .byte '\\','|'
 145 14c8 3B3A     	   .byte ';',':'
 146 14ca 5B7B     	   .byte '[','{'
 147 14cc 5D7D     	   .byte ']','}'
 148 14ce 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 14d0 315C     	   .byte '1','\\'
 153 14d2 3240     	   .byte '2','@'
 154 14d4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 14d6 363F     	   .byte '6','?'
 158 14d8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 14da 397B     	   .byte '9','{'
 161 14dc 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 14de 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
ARM GAS  forth.s 			page 60


 167              	extended:
 168 14e0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 14e2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 14e4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 14e6 11A3     	    .byte SC_RALT,VK_RALT
 172 14e8 2F97     	    .byte SC_APPS,VK_APPS
 173 14ea 758D     	    .byte SC_UP,VK_UP
 174 14ec 728E     	    .byte SC_DOWN,VK_DOWN
 175 14ee 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 14f0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 14f2 7095     	    .byte SC_INSERT,VK_INSERT
 178 14f4 6C91     	    .byte SC_HOME,VK_HOME
 179 14f6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 14f8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 14fa 717F     	    .byte SC_DEL,VK_DELETE
 182 14fc 6992     	    .byte SC_END,VK_END
 183 14fe 4A2F     	    .byte SC_KPDIV,'/'
 184 1500 5A0D     	    .byte SC_KPENTER,'\r'
 185 1502 1200     	    .byte 0x12,0
 186 1504 7C00     	    .byte 0x7c,0
 187 1506 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1508 6303     	   .byte 'c', VK_CTRL_C 
 193 150a 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 150c 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 150e 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1510 11A3     	   .byte SC_RALT,VK_RALT
 197 1512 2F97     	   .byte SC_APPS,VK_APPS
 198 1514 7095     	   .byte SC_INSERT,VK_INSERT
 199 1516 6C91     	   .byte SC_HOME,VK_HOME
 200 1518 7D93     	   .byte SC_PGUP,VK_PGUP
 201 151a 717F     	   .byte SC_DEL,VK_DELETE
 202 151c 6992     	   .byte SC_END,VK_END
 203 151e 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1520 758D     	   .byte SC_UP,VK_UP
 205 1522 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1524 728E     	   .byte SC_DOWN,VK_DOWN
 207 1526 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1528 4A2F     	   .byte SC_KPDIV,'/'
 209 152a 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 152c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 152e 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1530 119E     	   .byte SC_LALT,VK_LALT
 213 1532 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1534 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1536 761B     	   .byte SC_ESC,VK_ESC
 216 1538 779A     	   .byte SC_NUM,VK_NLOCK
 217 153a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 153c 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
ARM GAS  forth.s 			page 61


  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 153e 00BF     	    _GBL_FUNC kbd_isr 
  79 1540 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1548 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 154c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 154e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1556 D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
  84 155a 10F0020F 	    tst r0,#KBD_TX 
  85 155e 40F08480 	    bne send_bit  
  86 1562 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1564 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1568 01F10102 	    add r2,r1,#1
  89 156c 84F87820 	    strb r2,[UP,#KBD_BITCNTR]
  90 1570 0029     	    cmp r1,#0
  91 1572 15D0     	    beq start_bit 
  92 1574 0929     	    cmp r1,#9 
  93 1576 25D0     	    beq parity_bit 
  94 1578 0A29     	    cmp r1,#10 
  95 157a 2DD0     	    beq stop_bit 
ARM GAS  forth.s 			page 62


  96              	    // data bit 
  97 157c 94F87920 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1580 4FEA5202 	    lsr r2,#1 
  99 1584 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1588 07D0     	    beq 1f 
 101 158a 42F08002 	    orr r2,#(1<<7)
 102 158e 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1592 00F10100 	    add r0,#1 
 104 1596 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 105 159a 84F87920 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 159e 63E0     	    b 9f         
 107              	start_bit:
 108 15a0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 15a4 60D1     	    bne 9f // not a start bit 
 110 15a6 80EA0000 	    eor r0,r0 
 111 15aa 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 112 15ae 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 113 15b2 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 15b6 6FF00101 	    mvn r1,#1
 115 15ba 00EA0100 	    and r0,r1 // clear error flag 
 116 15be 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 117 15c2 51E0     	    b 9f 
 118              	parity_bit:
 119 15c4 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 120 15c8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 15cc 4CD0     	    beq 9f  
 122 15ce 01F10101 	    add r1,#1 
 123 15d2 84F87B10 	    strb r1,[UP,#KBD_PARITY]  
 124 15d6 47E0     	    b 9f      
 125              	stop_bit:
 126 15d8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 15dc 40D0     	    beq 8f // error stop bit expected 
 128 15de 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 129 15e2 11F0010F 	    tst r1,#1 
 130 15e6 3BD0     	    beq 8f // error parity
 131 15e8 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 15ec 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 15f0 E028     	    cmp r0,#XT_KEY
 134 15f2 04D1     	    bne 1f
 135 15f4 41F04001 	    orr r1,#KBD_F_XT
 136 15f8 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 137 15fc 30E0     	    b 8f  
 138 15fe 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1602 14D0     	    beq store_code
 140 1604 5828     	    cmp r0,#SC_CAPS
 141 1606 04D1     	    bne 1f
 142 1608 81F00401 	    eor r1,#KBD_F_CAPS
 143 160c 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1610 06E0     	    b 2f 
 145 1612 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 161c 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1620 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1624 01EA0201 	    and r1,r2
 149 1628 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 150 162c 18E0     	    b 8f
ARM GAS  forth.s 			page 63


 151              	// store code in queue 
 152              	store_code:
 153 162e F028     	    cmp r0,#KEY_REL
 154 1630 04D1     	    bne 1f
 155              	// set release flags 
 156 1632 41F08001 	    orr r1,#KBD_F_REL 
 157 1636 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 158 163a 11E0     	    b 8f     
 159 163c 0146     	1:  mov r1,r0 
 160 163e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1648 0AD1     	    bne 8f // was async key 
 162 164a D4F89000 	    ldr r0,[UP,#KBD_QTAIL]
 163 164e 04F17C02 	    add r2,UP,#KBD_QUEUE
 164 1652 1154     	    strb r1,[r2,r0]
 165 1654 00F10100 	    add r0,#1
 166 1658 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 165c 84F89000 	    strb r0,[UP,#KBD_QTAIL]
 168 1660 80EA0000 	8:  eor r0,r0 
 169 1664 A4F87800 	    strh r0,[UP,#KBD_BITCNTR]
 170 1668 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 166a 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 166e 01F10100 	    add r0,r1,#1
 182 1672 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 183 1676 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 167a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 167e 0829     	1:  cmp r1,#8 
 187 1680 15D0     	    beq send_parity 
 188 1682 0929     	    cmp r1,#9 
 189 1684 1CD0     	    beq send_stop
 190 1686 0A29     	    cmp r1,#10
 191 1688 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 168a 10F0010F 	    tst r0,#1
 194 168e 4FEA5000 	    lsr r0,#1
 195 1692 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 196 1696 02D1     	    bne 1f 
 197 1698 4FEA0242 	    lsl r2,#16
 198 169c 05E0     	    b 2f  
 199 169e 94F87B00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 16a2 00F10100 	    add r0,#1 
 201 16a6 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 202 16aa 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 16ac 1CE0     	    b 9f 
 204              	send_parity:
 205 16ae 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
ARM GAS  forth.s 			page 64


 206 16b2 10F0010F 	    tst r0,#1
 207 16b6 01D0     	    beq 1f 
 208 16b8 4FEA0242 	    lsl r2,#16
 209 16bc 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 16be 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 16c0 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 16c2 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 16c6 1960     	    str r1,[r3,#GPIO_MODER]
 217 16c8 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 16ca 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 16ce 6FF00201 	    mvn r1,#KBD_TX 
 221 16d2 00EA0100 	    and r0,r1 
 222 16d6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 16d8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 16dc 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 225 16e0 80EA0000 	    eor r0,r0 
 226 16e4 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 227 16e8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 16ea 02B4     	    push {r1}
 238 16ec DFF86414 	    ldr r1,=async_keys
 239 16f0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 16fa 02BC     	    pop {r1}
 241 16fc 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 16fe 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1708 FF28     	    cmp r0,#255
 256 170a 01D1     	    bne set_async_key 
 257 170c 0020     	    movs r0,#0 
 258 170e 7047     	    _RET  
ARM GAS  forth.s 			page 65


 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1710 06B4     	    push {r1,r2}
 262 1712 94F87A20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1716 DFF84014 	    ldr r1,=async_jump 
 264 171a D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 171e 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1722 04E0     	    b set_reset
 268              	ctrl_key:
 269 1724 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1728 01E0     	    b set_reset 
 271              	alt_key:
 272 172a 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 172e 12F0800F 	    tst r2,#KBD_F_REL 
 275 1732 04D0     	    beq 1f 
 276 1734 6FEA0000 	    mvn r0,r0
 277 1738 02EA0002 	    and r2,r0
 278 173c 01E0     	    b 2f
 279 173e 42EA0002 	1:  orr r2,r0 
 280 1742 84F87A20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1746 5FF0FF30 	    movs r0,#-1
 282 174a 06BC     	9:  pop {r1,r2}
 283 174c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 174e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1750 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1752 1401     	    .byte SC_LCTRL,1  // left control 
 290 1754 1401     	    .byte SC_RCTRL,1  // right control 
 291 1756 1102     	    .byte SC_LALT,2  // left alt 
 292 1758 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 175a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 175c 00       	    .byte 0 // shift  key 
 297 175d 03       	    .byte (ctrl_key-shift_key)/2
 298 175e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 175f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1760 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1768 1846     	    mov r0,r3 
 311 176a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 176e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1772 00B5FFF7 	    _CALL gpio_config
 313      14F85DF8 
ARM GAS  forth.s 			page 66


 313      04EB
 314 177c 1846     	    mov r0,r3 
 315 177e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1782 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1786 00B5FFF7 	    _CALL gpio_config
 317      0AF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1790 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1798 4FF40050 	    mov r0,#(2<<12)
 321 179c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 179e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 17a6 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 17aa 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 17ac D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 17ae 80EA0000 	   eor r0,r0 
 328 17b2 C4F88C00 	   str r0,[UP,#KBD_QHEAD]
 329 17b6 C4F89000 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 17ba 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 17be 4FF00101 	   mov r1,#1 
 333 17c2 00B5FEF7 	   _CALL nvic_set_priority
 333      90FF5DF8 
 333      04EB
 334 17cc 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 17d0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      A2FF5DF8 
 335      04EB
 336 17da 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 17dc 78130000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 17ec 47F8046D 	    _PUSH 
 342 17f0 94F87A60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 17f4 06F0FC06 	    and TOS,#0xFC  
 344 17f8 01F06AB9 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 17fc 0EB4     	    push {T1,T2,T3}
 352 17fe 80EA0000 	    eor T0,T0  
 353 1802 04F17C03 	    add T3,UP,#KBD_QUEUE
 354 1806 D4F88C10 	    ldr T1,[UP,#KBD_QHEAD]
 355 180a D4F89020 	    ldr T2,[UP,#KBD_QTAIL]
 356 180e 9142     	    cmp T1,T2 
 357 1810 06D0     	    beq 2f  
 358 1812 585C     	    ldrb T0,[T3,T1]
ARM GAS  forth.s 			page 67


 359 1814 01F10101 	    add T1,#1 
 360 1818 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 181c C4F88C10 	    str T1,[UP,#KBD_QHEAD]
 362 1820 0EBC     	2:  pop {T1,T2,T3}
 363 1822 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1824 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 182e 0000     	    movs T0,T0
 368 1830 F8D0     	    beq wait_code  
 369 1832 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1834 04B4     	    push {T2}
 380 1836 11F8012B 	1:  ldrb T2,[T1],#1
 381 183a 22B1     	    cbz T2,2f 
 382 183c 8242     	    cmp T2,T0
 383 183e 02D0     	    beq 2f 
 384 1840 01F10101 	    add T1,#1 
 385 1844 F7E7     	    b 1b 
 386 1846 0878     	2:  ldrb T0,[T1]
 387 1848 0000     	    movs T0,T0 // set/reset zero flag 
 388 184a 04BC     	9:  pop {T2}
 389 184c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 184e E0170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 185c 47F8046D 	    _PUSH 
 398 1860 86EA0606 	    eor TOS,TOS 
 399 1864 BD49     	    ldr T1,=sc_ascii // translation table
 400 1866 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 186a 4FF04002 	    mov T2,#KBD_F_XT 
 402 186e 1042     	    tst T0,T2
 403 1870 00D0     	    beq 1f
 404 1872 BB49     	    ldr T1,=extended // extended code translation
 405 1874 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 187e 98B1     	    cbz T0,inkey_exit
 407 1880 E128     	    cmp T0,#XT2_KEY // pause 
 408 1882 13D0     	    beq pause_key
ARM GAS  forth.s 			page 68


 409 1884 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 188e 0646     	    mov TOS,T0
 411 1890 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 189a 032E     	    cmp TOS,#VK_CTRL_C 
 413 189c 3EF4FBAD 	    beq user_reboot 
 414 18a0 47F8046D 	    _PUSH 
 415 18a4 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 18a8 01F012B9 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 18ac 4FF00701 	    mov T1,#7 
 420 18b0 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 18ba 0139     	    subs T1,#1
 422 18bc F8D1     	    bne 1b 
 423 18be 01F007B9 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 18c2 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 18c6 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 18ca 06D1     	    bne shift_down 
 431 18cc 10F0200F 	    tst T0,#KBD_F_ALT  
 432 18d0 06D1     	    bne altchar_down 
 433 18d2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 18d6 06D1     	    bne ctrl_down 
 435 18d8 0DE0     	    b 9f 
 436              	shift_down:
 437 18da 3046     	    mov T0,TOS 
 438 18dc A149     	    ldr T1,=shifted 
 439 18de 04E0     	    b 8f 
 440              	altchar_down:
 441 18e0 3046     	    mov T0,TOS 
 442 18e2 A149     	    ldr T1,=altchar
 443 18e4 01E0     	    b 8f
 444              	ctrl_down:
 445 18e6 3046     	    mov T0,TOS 
 446 18e8 A049     	    ldr T1,=controls 
 447 18ea 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 18f4 0646     	    mov TOS,T0
 449 18f6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1900 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1902 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1906 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 190a 0BD0     	    beq 9f 
ARM GAS  forth.s 			page 69


 456 190c 412E     	    cmp TOS,#'A'
 457 190e 09D4     	    bmi 9f 
 458 1910 5B2E     	    cmp TOS,#'Z'+1 
 459 1912 03D4     	    bmi 3f 
 460 1914 612E     	    cmp TOS,#'a'
 461 1916 05D4     	    bmi 9f 
 462 1918 7B2E     	    cmp TOS,#'z'+1
 463 191a 03D5     	    bpl 9f 
 464 191c 4FF02000 	3:  mov T0,#(1<<5)
 465 1920 86EA0006 	    eor TOS,T0 
 466 1924 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1926 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1928 E06E     	1:  ldr r0,[UP,#VID_STATE]
 483 192a 0128     	    cmp r0,ST_PREVID 
 484 192c FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 192e 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1932 00B5FEF7 	    _CALL nvic_disable_irq
 487      06FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 193c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1944 1846     	    mov r0,r3 
 491 1946 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 194a 4FF01102 	    mov r2,#OUTPUT_OD
 493 194e 00B5FEF7 	    _CALL gpio_config 
 493      26FF5DF8 
 493      04EB
 494 1958 1846     	    mov r0,r3 
 495 195a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 195e 82EA0202 	    eor r2,r2 
 497 1962 00B5FEF7 	    _CALL gpio_out 
 497      72FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 196c 4FF4E150 	    mov r0,#150*48
 500 1970 0138     	1:  subs r0,#1 
 501 1972 FDD1     	    bne 1b
 502 1974 01BC     	    pop {r0}
 503 1976 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 504 197a D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
 505 197e 40F00200 	    orr r0,#KBD_TX 
ARM GAS  forth.s 			page 70


 506 1982 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 507 1986 80EA0000 	    eor r0,r0 
 508 198a 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 509 198e 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1992 1846     	    mov r0,r3 
 513 1994 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1998 4FF01102 	    mov r2,#OUTPUT_OD 
 515 199c 00B5FEF7 	    _CALL gpio_config 
 515      FFFE5DF8 
 515      04EB
 516 19a6 1846     	    mov r0,r3 
 517 19a8 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 19ac 82EA0202 	    eor r2,r2 
 519 19b0 00B5FEF7 	    _CALL gpio_out
 519      4BFF5DF8 
 519      04EB
 520              	// release clock line 
 521 19ba 1846     	    mov r0,r3 
 522 19bc 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 19c0 4FF00002 	    mov r2,#INPUT_FLOAT
 524 19c4 00B5FEF7 	    _CALL gpio_config
 524      EBFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 19ce 4FF00A00 	    mov r0,#10
 528 19d2 E060     	    str r0,[UP,#CD_TIMER]
 529 19d4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 19d6 20B1     	    cbz r0, 4f 
 531 19d8 94F87A00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 19dc 10F0020F 	    tst r0,#KBD_TX
 533 19e0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 19e2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 19e6 00B5FEF7 	    _CALL nvic_enable_irq
 536      97FE5DF8 
 536      04EB
 537 19f0 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 19f4 20F00201 	    bic r1,r0,#KBD_TX
 539 19f8 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 540 19fc 00F00200 	    and r0,#KBD_TX
 541 1a00 48B1     	    cbz r0, 5f
 542 1a02 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1a04 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1a08 1960     	    str r1,[r3,#GPIO_MODER]
 545 1a0a 80EA0000 	    eor r0,r0 
 546 1a0e 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1a12 6FEA0000 	    mvn r0,r0   
 548 1a16 0EBC     	5:  pop {r1,r2,r3}
 549 1a18 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1a1a 80EA0000 	    eor T0,T0 
ARM GAS  forth.s 			page 71


 555 1a1e C4F88C00 	    str T0,[UP,#KBD_QHEAD]
 556 1a22 C4F89000 	    str T0,[UP,#KBD_QTAIL]
 557 1a26 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1a2a 6FF00301 	    mvn T1,#3
 559 1a2e 00EA0100 	    and T0,T1 
 560 1a32 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 561 1a36 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1a38 52180000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1a44 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1a48 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1a52 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1a54 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1a5e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1a68 FE28     	    cmp r0,KBD_CMD_RESEND
 574 1a6a EBD0     	    beq 1b 
 575 1a6c 4FF4FA70 	    mov T0,#500 
 576 1a70 E060     	    str T0,[UP,#CD_TIMER]
 577 1a72 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1a7c 10B9     	    cbnz T0,3f
 579 1a7e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1a80 0028     	    cmp T0,#0 
 581 1a82 F6D1     	    bne 2b 
 582 1a84 47F8046D 	3:  _PUSH 
 583 1a88 0646     	    mov TOS,T0  
 584 1a8a 01F021B8 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1a8e 3C1A0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1a9c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1aa6 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1aaa 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
ARM GAS  forth.s 			page 72


 595 1ab4 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1abe FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1ac0 ECD0     	    beq 1b
 598 1ac2 FA28     	    cmp T0,#KBD_ACK  
 599 1ac4 F6D1     	    bne 2b 
 600 1ac6 3046     	2:  mov T0,TOS 
 601 1ac8 00F00700 	    and T0,#7 
 602 1acc 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1ad6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ae0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ae2 F0D0     	    beq 2b
 606 1ae4 FA28     	    cmp T0,#KBD_ACK 
 607 1ae6 F6D1     	    bne 3b  
 608 1ae8 57F8046B 	    _POP 
 609 1aec 00F0F0BF 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1af0 921A0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1b00 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1b04 10F0010F 	    tst T0,#1
 619 1b08 01D1     	    bne 1f 
 620 1b0a 00F0E1BF 	    _NEXT 
 621 1b0e 47F8046D 	1: _PUSH 
 622 1b12 6FF00101 	    mvn T1,#1 
 623 1b16 00EA0100 	    and T0,T1 
 624 1b1a 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 625 1b1e 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1b22 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1b2a F41A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1b38 504700BF 	    _NEST
 635 1b3c 011B0000 	1:  _ADR CAPS_LED  
 636 1b40 5D180000 	    _ADR PS2_QKEY 
 637 1b44 51300000 	    _ADR QDUP 
 638 1b48 432D0000 	    _QBRAN 1b  
ARM GAS  forth.s 			page 73


 638      3C1B0000 
 639 1b50 D72A0000 	    _UNNEST 
 640 1b54 4E170000 	
 640      5C170000 
 640      BC130000 
 640      E0140000 
 640      70140000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1b74 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1b7c 0346     	    mov r3,r0 
  44 1b7e 4FF00401 	    mov r1,#PIN_F_SC 
  45 1b82 4FF00102 	    mov r2,#OUTPUT_PP
  46 1b86 00B5FEF7 	    _CALL gpio_config 
  46      0AFE5DF8 
  46      04EB
  47 1b90 1846     	    mov r0,r3 
ARM GAS  forth.s 			page 74


  48 1b92 4FF00401 	    mov r1,#PIN_F_SC  
  49 1b96 4FF00102 	    MOV r2,#1
  50 1b9a 00B5FEF7 	    _CALL gpio_out 
  50      56FE5DF8 
  50      04EB
  51 1ba4 1846     	    mov r0,r3 
  52 1ba6 4FF00501 	    mov r1,#PIN_SCK  
  53 1baa 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1bae 00B5FEF7 	    _CALL gpio_config 
  54      F6FD5DF8 
  54      04EB
  55 1bb8 1846     	    mov r0,r3 
  56 1bba 4FF00701 	    mov r1,#PIN_MOSI 
  57 1bbe 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1bc2 00B5FEF7 	    _CALL gpio_config 
  58      ECFD5DF8 
  58      04EB
  59 1bcc 1846     	    mov r0,r3
  60 1bce 4FF00601 	    mov r1,#PIN_MISO
  61 1bd2 4FF00202 	    mov r2,#INPUT_AFO  
  62 1bd6 00B5FEF7 	    _CALL gpio_config
  62      E2FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1be0 4CF6AA40 	    mov r0,#0xCCAA
  65 1be4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1be6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1bee 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1bf0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1bf4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1bf6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1bfe 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1c02 0180     	    strh r1,[r0,#SPI_CR1]
  73 1c04 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1c06 80EA0000 	    eor r0,r0 
  75 1c0a C5F25050 	    movt r0,#0x5550 
  76 1c0e 40EA0100 	    orr r0,r1 
  77 1c12 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1c14 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1c16 2E1B0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1c24 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1c2c 4FF00401 	    mov r1,#PIN_F_SC 
  88 1c30 4FF00002 	    mov r2,#0 
  89 1c34 00B5FEF7 	    _CALL gpio_out 
  89      09FE5DF8 
ARM GAS  forth.s 			page 75


  89      04EB
  90 1c3e 00F047BF 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1c42 1A1C0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1c50 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1c58 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1c5a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1c5e FBD1     	    bne 1b 
 102 1c60 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1c68 4FF00401 	    mov r1,#PIN_F_SC 
 104 1c6c 4FF00102 	    mov r2,#1 
 105 1c70 00B5FEF7 	    _CALL gpio_out 
 105      EBFD5DF8 
 105      04EB
 106 1c7a 00F029BF 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1c7e 461C0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1c8c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1c94 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1c96 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1c9a FBD0     	    beq 0b 
 118 1c9c 6FF00001 	    mvn T1,#0 
 119 1ca0 0173     	    strb T1,[T0,#SPI_DR]
 120 1ca2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1ca4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1ca8 FBD0     	    beq 1b     
 123              	2:  
 124 1caa 47F8046D 	    _PUSH 
 125 1cae 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1cb0 00F00EBF 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1cb4 821C0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
ARM GAS  forth.s 			page 76


 133      42595445 
 134 1cc0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1cc8 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1cca 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1cce FBD0     	    beq 0b 
 138 1cd0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1cd2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1cd4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1cd8 FBD0     	    beq 1b 
 142 1cda 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1cdc 57F8046B 	    _POP 
 144 1ce0 00F0F6BE 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ce4 B81C0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1cf0 504700BF 	    _NEST 
 153 1cf4 251C0000 	    _ADR CHIP_SEL 
 154 1cf8 032D0000 	    _DOLIT 4
 154      04000000 
 155 1d00 C11C0000 	    _ADR WR_BYTE
 156 1d04 511C0000 	    _ADR CHIP_DSEL
 157 1d08 D72A0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1d0c E81C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1d18 504700BF 	    _NEST 
 165 1d1c 251C0000 	    _ADR CHIP_SEL 
 166 1d20 032D0000 	    _DOLIT 6 
 166      06000000 
 167 1d28 C11C0000 	    _ADR WR_BYTE 
 168 1d2c 511C0000 	    _ADR CHIP_DSEL 
 169 1d30 D72A0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1d34 101D0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1d40 504700BF 	    _NEST
 177 1d44 251C0000 	    _ADR CHIP_SEL  
 178 1d48 032D0000 	    _DOLIT sr_cmd 
 178      681D0000 
 179 1d50 412F0000 	    _ADR PLUS 
ARM GAS  forth.s 			page 77


 180 1d54 A92D0000 	    _ADR CAT
 181 1d58 C11C0000 	    _ADR WR_BYTE
 182 1d5c 8D1C0000 	    _ADR RD_BYTE
 183 1d60 511C0000 	    _ADR CHIP_DSEL  
 184 1d64 D72A0000 	    _UNNEST 
 185 1d68 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1d6b 381D0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1d78 504700BF 	    _NEST 
 193 1d7c 7D2E0000 	    _ADR DUPP 
 194 1d80 032D0000 	    _DOLIT 16
 194      10000000 
 195 1d88 192F0000 	    _ADR RSHIFT 
 196 1d8c C11C0000 	    _ADR WR_BYTE 
 197 1d90 7D2E0000 	    _ADR DUPP
 198 1d94 032D0000 	    _DOLIT 8 
 198      08000000 
 199 1d9c 192F0000 	    _ADR RSHIFT 
 200 1da0 C11C0000 	    _ADR WR_BYTE 
 201 1da4 C11C0000 	    _ADR WR_BYTE 
 202 1da8 D72A0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1dac 6F1D0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1dbc 504700BF 	    _NEST 
 210 1dc0 032D0000 	1:  _DOLIT 0 
 210      00000000 
 211 1dc8 411D0000 	    _ADR RD_SR 
 212 1dcc 032D0000 	    _DOLIT 3 
 212      03000000 
 213 1dd4 C12E0000 	    _ADR ANDD 
 214 1dd8 432D0000 	    _QBRAN 2f
 214      E81D0000 
 215 1de0 572D0000 	    _BRAN 1b
 215      C01D0000 
 216 1de8 D72A0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1dec B01D0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
ARM GAS  forth.s 			page 78


 223      53452D42 
 223      4C4B00BF 
 224 1dfc 504700BF 	    _NEST 
 225 1e00 191D0000 	    _ADR WR_ENBL
 226 1e04 251C0000 	    _ADR CHIP_SEL 
 227 1e08 032D0000 	    _DOLIT 0x20 
 227      20000000 
 228 1e10 C11C0000 	    _ADR WR_BYTE 
 229 1e14 791D0000 	    _ADR SEND_ADR
 230 1e18 511C0000 	    _ADR CHIP_DSEL 
 231 1e1c BD1D0000 	    _ADR WAIT_DONE 
 232 1e20 D72A0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1e24 F01D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1e34 504700BF 	    _NEST 
 240 1e38 191D0000 	    _ADR WR_ENBL 
 241 1e3c 251C0000 	    _ADR CHIP_SEL
 242 1e40 032D0000 	    _DOLIT 0x60
 242      60000000 
 243 1e48 032D0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1e50 C11C0000 	    _ADR WR_BYTE 
 245 1e54 C11C0000 	    _ADR WR_BYTE 
 246 1e58 511C0000 	    _ADR CHIP_DSEL 
 247 1e5c BD1D0000 	    _ADR WAIT_DONE
 248 1e60 D72A0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1e64 281E0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1e70 504700BF 	    _NEST
 258 1e74 251C0000 	    _ADR CHIP_SEL 
 259 1e78 032D0000 	    _DOLIT 3 
 259      03000000 
 260 1e80 C11C0000 	    _ADR WR_BYTE 
 261 1e84 791D0000 	    _ADR SEND_ADR
 262 1e88 F92D0000 	    _ADR TOR   
 263 1e8c 572D0000 	    _BRAN 2f
 263      A41E0000 
 264 1e94 8D1C0000 	1:  _ADR RD_BYTE
 265 1e98 A12E0000 	    _ADR OVER 
 266 1e9c 952D0000 	    _ADR CSTOR
 267 1ea0 9D2F0000 	    _ADR ONEP 
 268 1ea4 252D0000 	2:  _DONXT 1b
ARM GAS  forth.s 			page 79


 268      941E0000 
 269 1eac 6D2E0000 	    _ADR DROP 
 270 1eb0 511C0000 	    _ADR CHIP_DSEL 
 271 1eb4 D72A0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1eb8 681E0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1ec4 504700BF 	    _NEST 
 280 1ec8 191D0000 	    _ADR WR_ENBL
 281 1ecc 251C0000 	    _ADR CHIP_SEL
 282 1ed0 032D0000 	    _DOLIT 2 
 282      02000000 
 283 1ed8 C11C0000 	    _ADR WR_BYTE 
 284 1edc 791D0000 	    _ADR SEND_ADR
 285 1ee0 F92D0000 	    _ADR TOR
 286 1ee4 572D0000 	    _BRAN 2f 
 286      041F0000 
 287 1eec 7D2E0000 	1:  _ADR DUPP 
 288 1ef0 A92D0000 	    _ADR CAT 
 289 1ef4 7D2E0000 	    _ADR DUPP 
 290 1ef8 CD400000 	    _ADR HDOT
 291 1efc C11C0000 	    _ADR WR_BYTE 
 292 1f00 9D2F0000 	    _ADR ONEP
 293 1f04 252D0000 	2:  _DONXT 1b 
 293      EC1E0000 
 294 1f0c 6D2E0000 	    _ADR DROP
 295 1f10 511C0000 	    _ADR CHIP_DSEL
 296 1f14 BD1D0000 	    _ADR WAIT_DONE 
 297 1f18 D72A0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1f1c BC1E0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
ARM GAS  forth.s 			page 80


 317 1f2c 504700BF 	    _NEST 
 318              	    
 319 1f30 D72A0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1f34 201F0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1f44 504700BF 	    _NEST 
 327              	
 328 1f48 D72A0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1f4c 381F0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1f54 504700BF 	    _NEST 
 336              	
 337 1f58 D72A0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1f5c 501F0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1f68 504700BF 	    _NEST 
 345              	
 346 1f6c D72A0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1f70 601F0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1f7c 504700BF 	    _NEST 
 354              	
 355 1f80 D72A0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
ARM GAS  forth.s 			page 81


   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1f84 5F708930 	     .word  0x3089705F // 1e-9
  34 1f88 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1f8c 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1f90 BD378635 	     .word  0x358637BD // 1e-6 
  37 1f94 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1f98 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1f9c 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1fa0 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1fa4 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1fa8 0000803F 	     .word  0x3F800000 // 1.0 
  44 1fac 00002041 	     .word  0x41200000 // 1e1 
  45 1fb0 0000C842 	     .word  0x42C80000 // 1e2 
  46 1fb4 00007A44 	     .word  0x447A0000 // 1e3 
  47 1fb8 00401C46 	     .word  0x461C4000 // 1e4 
  48 1fbc 0050C347 	     .word  0x47C35000 // 1e5 
  49 1fc0 00247449 	     .word  0x49742400 // 1e6 
  50 1fc4 8096184B 	     .word  0x4B189680 // 1e7
  51 1fc8 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1fcc 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10 
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1fd0 741F0000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 1fdc 4FEA8606 	    lsl TOS,#2  
  61 1fe0 E648     	    ldr t0, =p10 
  62 1fe2 0644     	    add TOS,TOS,T0
ARM GAS  forth.s 			page 82


  63 1fe4 3668     	    ldr TOS,[TOS]  
  64 1fe6 00F073BD 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1fea DFF89403 	   ldr.w r0,=CPACR 
  73 1fee 0168     	   ldr R1,[R0]
  74 1ff0 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1ff4 0160     	   str r1,[r0]
  76 1ff6 BFF34F8F 	   dsb 
  77 1ffa E248     	   ldr r0,=FPC_BASE_ADR
  78 1ffc 81EA0101 	   eor r1,r1 
  79 2000 0160     	   str r1,[r0,FPCCR]
  80 2002 BFF34F8F 	   dsb
  81 2006 4FF05100 	   mov r0,#FPU_IRQ 
  82 200a 00B5FEF7 	   _CALL nvic_enable_irq
  82      85FB5DF8 
  82      04EB
  83 2014 7047     	   _RET
  84              	
  85              	/***************************
  86              	   FPSCR ( -- u )
  87              	   stack fpu SCR register 
  88              	***************************/
  89 2016 D41F0000 	   _HEADER FPSCR,5,"FPSCR"
  89      05465053 
  89      4352
  90 2020 47F8046D 	   _PUSH 
  91 2024 F1EE106A 	   vmrs TOS,FPSCR
  92 2028 BFF34F8F 	   dsb  
  93 202c 00F050BD 	   _NEXT 
  94              	
  95              	
  96              	/**************************
  97              	   CLR_FPSCR ( mask -- )
  98              	   clear FPSCR bits 
  99              	input:
 100              	    mask  and mask 
 101              	************************/
 102 2030 1A200000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
 102      09434C52 
 102      5F465053 
 102      435200BF 
 103 2040 F1EE100A 	   vmrs T0,FPSCR 
 104 2044 BFF34F8F 	   dsb 
 105 2048 06EA0006 	   and TOS,T0  
 106 204c E1EE106A 	   vmsr FPSCR,TOS 
 107 2050 BFF34F8F 	   dsb 
 108 2054 00F03CBD 	   _NEXT 
 109              	
 110              	
 111              	/*******************************
 112              	    >S0 variable ( f# --  )
ARM GAS  forth.s 			page 83


 113              	    send float to fpu S0 
 114              	**********************************/
 115 2058 34200000 	    _HEADER TOS0,3,">S0"
 115      033E5330 
 116 2060 00EE106A 	    vmov.f32 S0,TOS 
 117 2064 57F8046B 	    _POP 
 118 2068 00F032BD 	    _NEXT  
 119              	
 120              	/*******************************
 121              	    >S1 variable ( f# --  )
 122              	    send float to fpu S1 
 123              	**********************************/
 124 206c 5C200000 	    _HEADER TOS1,3,">S1"
 124      033E5331 
 125 2074 00EE906A 	    vmov.f32 S1,TOS 
 126 2078 57F8046B 	    _POP 
 127 207c 00F028BD 	    _NEXT  
 128              	
 129              	/*******************************
 130              	    >S2 variable ( f# --  )
 131              	    send float to fpu S2 
 132              	**********************************/
 133 2080 70200000 	    _HEADER TOS2,3,">S2"
 133      033E5332 
 134 2088 01EE106A 	    vmov.f32 S2,TOS 
 135 208c 57F8046B 	    _POP 
 136 2090 00F01EBD 	    _NEXT  
 137              	
 138              	/*******************************
 139              	    S0>  ( -- f )
 140              	    push fpu S0 
 141              	*******************************/
 142 2094 84200000 	    _HEADER S0FROM,3,"S0>"
 142      0353303E 
 143 209c 47F8046D 	    _PUSH 
 144 20a0 10EE106A 	    vmov.f32 TOS,S0 
 145 20a4 00F014BD 	    _NEXT 
 146              	
 147              	/*******************************
 148              	    S1>  ( -- f )
 149              	    push fpu S1 
 150              	*******************************/
 151 20a8 98200000 	    _HEADER S1FROM,3,"S1>"
 151      0353313E 
 152 20b0 47F8046D 	    _PUSH 
 153 20b4 10EE906A 	    vmov.f32 TOS,S1 
 154 20b8 00F00ABD 	    _NEXT 
 155              	
 156              	/*******************************
 157              	    S2>  ( -- f )
 158              	    push fpu S2 
 159              	*******************************/
 160 20bc AC200000 	    _HEADER S2FROM,3,"S2>"
 160      0353323E 
 161 20c4 47F8046D 	    _PUSH 
 162 20c8 11EE106A 	    vmov.f32 TOS,S2 
 163 20cc 00F000BD 	    _NEXT 
ARM GAS  forth.s 			page 84


 164              	
 165              	
 166              	/*******************************
 167              	    F>S ( f -- n )
 168              	    convert float to integer 
 169              	    round to nearest integer 
 170              	*******************************/
 171 20d0 C0200000 	    _HEADER FTOS,3,"F>S"
 171      03463E53 
 172 20d8 00EE106A 	    vmov.f32 S0,TOS
 173 20dc BDEE400A 	    vcvtr.s32.f32 s0,s0 
 174 20e0 10EE106A 	    vmov.f32 TOS,s0 
 175 20e4 00F0F4BC 	    _NEXT 
 176              	    
 177              	/*******************************
 178              	    TRUNC (f - n )
 179              	    truncate float to integer 
 180              	*******************************/
 181 20e8 D4200000 	    _HEADER TRUNC,5,"TRUNC"
 181      05545255 
 181      4E4300BF 
 182 20f4 00EE106A 	    vmov.f32 S0,TOS 
 183 20f8 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 184 20fc 10EE106A 	    vmov.f32 TOS,S0 
 185 2100 00F0E6BC 	    _NEXT 
 186              	
 187              	/*******************************
 188              	    S>F ( s -- f )
 189              	    convert integer to float 
 190              	*******************************/
 191 2104 EC200000 	    _HEADER STOF,3,"S>F" 
 191      03533E46 
 192 210c 00EE106A 	    vmov.f32 S0,TOS
 193 2110 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 194 2114 10EE106A 	    vmov.f32 TOS,s0 
 195 2118 00F0DABC 	   _NEXT 
 196              	
 197              	/*******************************
 198              	    F+ ( f1 f2 -- f1+f2 )
 199              	    add 2 floats 
 200              	*******************************/
 201 211c 08210000 	    _HEADER FPLUS,2,"F+"
 201      02462B00 
 202 2124 00EE106A 	   vmov.f32 s0,TOS 
 203 2128 57F8046B 	   _POP 
 204 212c 00EE906A 	   vmov.f32 s1,TOS 
 205 2130 30EE200A 	   vadd.f32 s0,s0,s1 
 206 2134 10EE106A 	   vmov.f32 TOS,s0
 207 2138 00F0CABC 	   _NEXT 
 208              	
 209              	   
 210              	/*******************************
 211              	    F- ( f1 f2 -- f1-f2 )
 212              	    substract 2 float 
 213              	*******************************/
 214 213c 20210000 	    _HEADER FSUBB,2,"F-"
 214      02462D00 
ARM GAS  forth.s 			page 85


 215 2144 00EE106A 	   vmov.f32 s0,TOS 
 216 2148 57F8046B 	   _POP 
 217 214c 00EE906A 	   vmov.f32 s1,TOS 
 218 2150 30EEC00A 	   vsub.f32 s0,s1,s0 
 219 2154 10EE106A 	   vmov.f32 TOS,s0
 220 2158 00F0BABC 	   _NEXT 
 221              	
 222              	
 223              	
 224              	/*******************************
 225              	    F* ( f1 f2 -- f1*f2 )
 226              	    multiply 2 float 
 227              	******************************/
 228 215c 40210000 	   _HEADER FSTAR,2,"F*"
 228      02462A00 
 229 2164 00EE106A 	   vmov.f32 s0,TOS 
 230 2168 57F8046B 	   _POP 
 231 216c 00EE906A 	   vmov.f32 s1,TOS 
 232 2170 20EE800A 	   vmul.f32 s0,s1,s0 
 233 2174 10EE106A 	   vmov.f32 TOS,s0
 234 2178 00F0AABC 	   _NEXT 
 235              	
 236              	
 237              	/*******************************
 238              	    F/ ( f1 f2 -- f1/f2 )
 239              	    divide f1 by f2 
 240              	*******************************/
 241 217c 60210000 	    _HEADER FSLH,2,"F/"
 241      02462F00 
 242 2184 00EE106A 	   vmov.f32 s0,TOS 
 243 2188 57F8046B 	   _POP 
 244 218c 00EE906A 	   vmov.f32 s1,TOS 
 245 2190 80EE800A 	   vdiv.f32 s0,s1,s0 
 246 2194 10EE106A 	   vmov.f32 TOS,s0
 247 2198 00F09ABC 	   _NEXT 
 248              	
 249              	
 250              	/********************************
 251              	    FNEGATE ( f -- -f )
 252              	    negate floating point 
 253              	********************************/
 254 219c 80210000 	    _HEADER FNEG,7,"FNEGATE"
 254      07464E45 
 254      47415445 
 255 21a8 00EE106A 	    vmov.f32 s0,TOS 
 256 21ac B1EE400A 	    vneg.f32 S0,S0 
 257 21b0 10EE106A 	    vmov.f32 TOS,S0    
 258 21b4 00F08CBC 	    _NEXT 
 259              	
 260              	/**********************************
 261              	    FABS ( f -- f )
 262              	    return absolute value 
 263              	******************************/
 264 21b8 A0210000 	    _HEADER FABS,4,"FABS"
 264      04464142 
 264      530000BF 
 265 21c4 80EA0000 	    eor T0,T0 
ARM GAS  forth.s 			page 86


 266 21c8 6FEA0000 	    mvn T0,T0 
 267 21cc 4FEA5000 	    lsr T0,#1 
 268 21d0 06EA0006 	    and TOS,T0 
 269 21d4 00F07CBC 	    _NEXT 
 270              	
 271              	
 272              	/*****************************
 273              	     SQRT  ( f -- f )
 274              	     compute square root 
 275              	*****************************/
 276 21d8 BC210000 	     _HEADER SQRT,4,"SQRT"
 276      04535152 
 276      540000BF 
 277 21e4 00EE106A 	     vmov.f32 s0,TOS 
 278 21e8 B1EEC00A 	     vsqrt.f32 s0,s0 
 279 21ec 10EE106A 	     vmov.f32 TOS,s0 
 280 21f0 00F06EBC 	     _NEXT 
 281              	
 282              	
 283              	/*****************************
 284              	   F0<   ( f -- flag )
 285              	*****************************/
 286 21f4 DC210000 	    _HEADER FZLESS,3,"F0<"
 286      0346303C 
 287 21fc 00EE106A 	    vmov.f32 s0,TOS 
 288 2200 B5EE400A 	    vcmp.f32 s0, #0.0 
 289 2204 F1EE106A 	    vmrs TOS,FPSCR
 290 2208 BFF34F8F 	    dsb  
 291 220c 4FEAE676 	    asr TOS,#31   
 292 2210 00F05EBC 	    _NEXT 
 293              	
 294              	/*****************************
 295              	    F> ( f#1 f#2 -- flag )
 296              	    f#1>f#2 ? 
 297              	*****************************/
 298 2214 F8210000 	    _HEADER FGREAT,2,"F>"
 298      02463E00 
 299 221c 504700BF 	    _NEST 
 300 2220 45210000 	    _ADR FSUBB
 301 2224 FD210000 	    _ADR FZLESS
 302 2228 4D310000 	    _ADR INVER     
 303 222c D72A0000 	    _UNNEST 
 304              	
 305              	/*****************************
 306              	    F< ( f#1 f#2 -- flag )
 307              	    f#1<f#2 ? 
 308              	*****************************/
 309 2230 18220000 	    _HEADER FLESS,2,"F<"
 309      02463C00 
 310 2238 504700BF 	    _NEST 
 311 223c 45210000 	    _ADR FSUBB 
 312 2240 FD210000 	    _ADR FZLESS
 313 2244 D72A0000 	    _UNNEST 
 314              	
 315              	
 316              	/*******************************
 317              	    FMIN ( f#1 f#2 -- smallest )
ARM GAS  forth.s 			page 87


 318              	********************************/
 319 2248 34220000 	    _HEADER FMIN,4,"FMIN"
 319      04464D49 
 319      4E0000BF 
 320 2254 504700BF 	    _NEST 
 321 2258 A12E0000 	   _ADR OVER 
 322 225c A12E0000 	   _ADR OVER 
 323 2260 1D220000 	   _ADR FGREAT 
 324 2264 432D0000 	   _QBRAN 1f 
 324      70220000 
 325 226c 8D2E0000 	   _ADR SWAP  
 326 2270 6D2E0000 	1: _ADR DROP 
 327 2274 D72A0000 	    _UNNEST 
 328              	
 329              	/*******************************
 330              	    FMAX (f#1 f#2 -- largest )
 331              	*******************************/
 332 2278 4C220000 	    _HEADER FMAX,4,"FMAX"
 332      04464D41 
 332      580000BF 
 333 2284 504700BF 	    _NEST 
 334 2288 A12E0000 	    _ADR OVER 
 335 228c A12E0000 	    _ADR OVER 
 336 2290 39220000 	    _ADR FLESS 
 337 2294 432D0000 	    _QBRAN 1f
 337      A0220000 
 338 229c 8D2E0000 	    _ADR SWAP   
 339 22a0 6D2E0000 	1:  _ADR DROP 
 340 22a4 D72A0000 	    _UNNEST 
 341              	
 342              	
 343              	/*******************************
 344              	    FSIGN ( f -- n )
 345              	    return float sign 
 346              	*******************************/
 347 22a8 7C220000 	    _HEADER FSIGN,5,"FSIGN"
 347      05465349 
 347      474E00BF 
 348 22b4 80EA0000 	    eor T0,T0 
 349 22b8 C8F20000 	    movt T0,#0X8000
 350 22bc 06EA0006 	    and TOS,T0
 351 22c0 4FEAE676 	    asr TOS,#31  
 352 22c4 00F004BC 	    _NEXT 
 353              	
 354              	/*******************************
 355              	    FEXP ( f --  n )
 356              	    return binary exponent of f 
 357              	*******************************/
 358 22c8 AC220000 	    _HEADER FEXP,4,"FEXP"
 358      04464558 
 358      500000BF 
 359 22d4 4FF00000 	    _MOV32 T0,0X7F800000
 359      C7F68070 
 360 22dc 06EA0006 	    and TOS,T0 
 361 22e0 4FEAD656 	    lsr TOS,#23
 362 22e4 A6F17F06 	    sub TOS,#127 
 363 22e8 F2E3     	    _NEXT  
ARM GAS  forth.s 			page 88


 364              	
 365              	/*******************************
 366              	   FMANT ( f -- n )
 367              	   return float mantisssa 
 368              	********************************/
 369 22ea CC220000 	    _HEADER FMANT,5,"FMANT"
 369      05464D41 
 369      4E54
 370 22f4 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 370      C0F27F00 
 371 22fc 06EA0006 	    AND TOS,T0 
 372 2300 80EA0000 	    EOR T0,T0 
 373 2304 C0F28000 	    MOVT T0,0x80
 374 2308 46EA0006 	    ORR TOS,T0 
 375 230c E0E3     	    _NEXT 
 376              	
 377              	
 378              	/*******************************
 379              	    PI  ( -- f )
 380              	    return 3.14159265
 381              	*******************************/
 382 230e EE220000 	    _HEADER PI,2,"PI"
 382      02504900 
 382      00BF
 383 2318 47F8046D 	    _PUSH 
 384 231c 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 384      C4F24906 
 385 2324 D4E3     	    _NEXT
 386              	 
 387              	/********************************
 388              	    LOG2 ( -- f)
 389              	    return log10(2)
 390              	*******************************/
 391 2326 12230000 	    _HEADER LOG2,4,"LOG2"
 391      044C4F47 
 391      3200
 392 2330 47F8046D 	    _PUSH 
 393 2334 42F29A06 	    _MOV32 TOS,0x3E9A209A
 393      C3F69A66 
 394 233c C8E3     	    _NEXT 
 395              	
 396              	/********************************
 397              	    LOG2>10 ( f -- exp )
 398              	    convert float base2 exponent 
 399              	    to base10
 400              	********************************/
 401 233e 2A230000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 401      074C4F47 
 401      323E3130 
 401      00BF
 402 234c 504700BF 	    _NEST
 403 2350 D5220000 	    _ADR FEXP 
 404 2354 0D210000 	    _ADR STOF 
 405 2358 31230000 	    _ADR LOG2
 406 235c 65210000 	    _ADR FSTAR 
 407 2360 F5200000 	    _ADR TRUNC  
 408 2364 7D2E0000 	    _ADR DUPP 
ARM GAS  forth.s 			page 89


 409 2368 B12E0000 	    _ADR ZLESS 
 410 236c 432D0000 	    _QBRAN 1f 
 410      78230000 
 411 2374 AD2F0000 	    _ADR ONEM
 412 2378 D72A0000 	1:  _UNNEST 
 413 237c A81F0000 	
 413      88ED00E0 
 413      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 2388 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 238c 0000C842 	            .word  0x42C80000  // 100.0
  31 2390 00401C46 	            .word  0x461C4000  // 10000.0 
  32 2394 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 2398 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 239c AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 23a0 504700BF 	    _NEST 
  45 23a4 032D0000 	    _DOLIT 2 
  45      02000000 
  46 23ac 312F0000 	    _ADR LSHIFT 
  47 23b0 032D0000 	    _DOLIT p10p2n 
  47      88230000 
ARM GAS  forth.s 			page 90


  48 23b8 412F0000 	    _ADR PLUS 
  49 23bc 892D0000 	    _ADR AT 
  50 23c0 D72A0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 23c4 504700BF 	    _NEST 
  59 23c8 032D0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 23d0 032D0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 23d8 F1370000 	    _ADR PICK  // idx f e 1 idx 
  62 23dc 312F0000 	    _ADR LSHIFT // idx f e bit_mask 
  63 23e0 C12E0000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 23e4 D72A0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 23e8 504700BF 	    _NEST 
  78 23ec F92D0000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 23f0 E52D0000 	    _ADR RAT   // idx f e R: e 
  81 23f4 C5230000 	    _ADR bit_state // idx f state 
  82 23f8 432D0000 	    _QBRAN 1f   // bit reset 
  82      0C240000 
  83 2400 A12E0000 	    _ADR OVER 
  84 2404 A1230000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2408 85210000 	    _ADR FSLH  // idx f R: e 
  86 240c 8D2E0000 	1:  _ADR SWAP  // f idx R: e 
  87 2410 9D2F0000 	    _ADR ONEP   // F idx++ R: e 
  88 2414 8D2E0000 	    _ADR SWAP   // idx f  
  89 2418 A12E0000 	    _ADR OVER   // idx f idx 
  90 241c 032D0000 	    _DOLIT 5 
  90      05000000 
  91 2424 49320000 	    _ADR GREAT  // idx > 5
  92 2428 432D0000 	    _QBRAN div_loop 
  92      F0230000 
  93 2430 B52D0000 	    _ADR RFROM 
  94 2434 6D2E0000 	    _ADR DROP 
  95 2438 D72A0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
ARM GAS  forth.s 			page 91


 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 243c 504700BF 	    _NEST 
 109 2440 F92D0000 	    _ADR TOR 
 110              	mult_loop:
 111 2444 E52D0000 	    _ADR RAT   // idx f e R: e 
 112 2448 C5230000 	    _ADR bit_state // idx f state 
 113 244c 432D0000 	    _QBRAN 1f   // bit reset 
 113      60240000 
 114 2454 A12E0000 	    _ADR OVER  
 115 2458 A1230000 	    _ADR p10p2at // idx f pwr10 R: e
 116 245c 65210000 	    _ADR FSTAR  // idx f R: e 
 117 2460 8D2E0000 	1:  _ADR SWAP  // f idx R: e 
 118 2464 9D2F0000 	    _ADR ONEP   // F idx++ R: e 
 119 2468 8D2E0000 	    _ADR SWAP   // idx f  
 120 246c A12E0000 	    _ADR OVER   // idx f idx 
 121 2470 032D0000 	    _DOLIT 5 
 121      05000000 
 122 2478 49320000 	    _ADR GREAT  // idx > 5
 123 247c 432D0000 	    _QBRAN mult_loop 
 123      44240000 
 124 2484 B52D0000 	    _ADR RFROM 
 125 2488 6D2E0000 	    _ADR DROP 
 126 248c D72A0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 2490 504700BF 	    _NEST 
 136 2494 A12E0000 	    _ADR OVER  // e f e 
 137 2498 432D0000 	    _QBRAN 3f // exp==0,  done 
 137      D4240000 
 138 24a0 032D0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 24a8 79300000 	    _ADR NROT // idx e f
 140 24ac 8D2E0000 	    _ADR SWAP // idx f e   
 141 24b0 7D2E0000 	    _ADR DUPP  // idx f e e 
 142 24b4 B12E0000 	    _ADR ZLESS
 143 24b8 432D0000 	    _QBRAN pos_exp 
 143      D0240000 
 144              	// negative exponent 
 145 24c0 71310000 	    _ADR ABSS 
 146 24c4 E9230000 	    _ADR mant_div 
 147 24c8 572D0000 	    _BRAN 3f 
 147      D4240000 
 148              	pos_exp: // positive exponent 
 149 24d0 3D240000 	    _ADR mant_mult 
ARM GAS  forth.s 			page 92


 150              	// adjustment done 
 151 24d4 8D2E0000 	3:  _ADR SWAP 
 152 24d8 6D2E0000 	    _ADR DROP 
 153 24dc D72A0000 	    _UNNEST 
 154              	
 155              	
 156              	/*****************************
 157              	   decimals ( a -- a+ fdec | a 0.0 )
 158              	   parse digits after '.' 
 159              	   convert to float 
 160              	*****************************/
 161              	decimals:
 162 24e0 504700BF 	    _NEST 
 163 24e4 032D0000 	    _DOLIT 0
 163      00000000 
 164 24ec 7D2E0000 	    _ADR DUPP
 165 24f0 65300000 	    _ADR ROT
 166 24f4 C13B0000 	    _ADR PARSE_DIGITS // d n a+ 
 167 24f8 79300000 	    _ADR NROT  // a d n 
 168 24fc 0D210000 	    _ADR STOF  // convert integer n to float 
 169 2500 8D2E0000 	    _ADR SWAP
 170 2504 032D0000 	    _DOLIT 9 
 170      09000000 
 171 250c 75320000 	    _ADR MIN 
 172 2510 DD1F0000 	    _ADR PWR10 
 173 2514 85210000 	    _ADR FSLH 
 174 2518 D72A0000 	    _UNNEST 
 175              	
 176              	
 177              	/************************************
 178              	   exponent ( a -- exp a+ )
 179              	   parse float exponent 
 180              	************************************/
 181              	exponent: 
 182 251c 504700BF 	    _NEST 
 183 2520 7B3C0000 	    _ADR NEGQ 
 184 2524 F92D0000 	    _ADR TOR 
 185 2528 032D0000 	    _DOLIT 0 
 185      00000000 
 186 2530 7D2E0000 	    _ADR DUPP 
 187 2534 65300000 	    _ADR ROT 
 188 2538 C13B0000 	    _ADR PARSE_DIGITS // d n a  
 189 253c 79300000 	    _ADR NROT 
 190 2540 8D2E0000 	    _ADR SWAP 
 191 2544 6D2E0000 	    _ADR DROP 
 192 2548 B52D0000 	    _ADR RFROM 
 193 254c 432D0000 	    _QBRAN 1f 
 193      58250000 
 194 2554 61310000 	    _ADR NEGAT 
 195 2558 8D2E0000 	1:  _ADR SWAP 
 196 255c D72A0000 	    _UNNEST  // -- exp a+  
 197              	
 198              	
 199              	/**********************************
 200              	    FLOAT? ( a -- f# -2 | a 0 )
 201              	    parse float number 
 202              	    return a 0 if not float 
ARM GAS  forth.s 			page 93


 203              	**********************************/
 204 2560 42230000 	    _HEADER FLOATQ,6,"FLOAT?"
 204      06464C4F 
 204      41543F00 
 205 256c 504700BF 	    _NEST
 206              	    // always use base 10 
 207              	    // hexadecimal float not accepted 
 208 2570 85330000 	    _ADR BASE 
 209 2574 892D0000 	    _ADR AT 
 210 2578 F92D0000 	    _ADR TOR 
 211              	    // use decimal base  
 212 257c 413B0000 	    _ADR DECIM 
 213 2580 032D0000 		_DOLIT	0      // failed flag   
 213      00000000 
 214 2588 A12E0000 		_ADR	OVER   // a 0 a     R: base
 215 258c D1320000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 216 2590 6D2E0000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 217              	// check for '-'|'+' save sign on R: 
 218 2594 7B3C0000 	    _ADR NEGQ 
 219 2598 F92D0000 	    _ADR   TOR // -- ... a  R: base sign 
 220              	// if next char is digit parse integer part 
 221 259c 7D2E0000 	    _ADR DUPP 
 222 25a0 A92D0000 	    _ADR CAT 
 223 25a4 032D0000 	    _DOLIT 10 
 223      0A000000 
 224 25ac 653B0000 	    _ADR DIGTQ // u t|f 
 225 25b0 8D2E0000 	    _ADR SWAP 
 226 25b4 6D2E0000 	    _ADR DROP  // drop u 
 227 25b8 432D0000 	    _QBRAN must_be_dot 
 227      0C260000 
 228              	// get integer part     
 229 25c0 032D0000 	    _DOLIT 0 
 229      00000000 
 230 25c8 7D2E0000 	    _ADR DUPP
 231 25cc 65300000 	    _ADR ROT // a 0 0 0 a  
 232 25d0 C13B0000 	    _ADR PARSE_DIGITS // a 0 d n a 
 233 25d4 79300000 	    _ADR NROT // ... a d n 
 234 25d8 0D210000 	    _ADR STOF  // convert n to float 
 235 25dc F92D0000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 236 25e0 6D2E0000 	    _ADR DROP // d not needed
 237              	// if next char is 'E' get exponent 
 238 25e4 032D0000 	    _DOLIT 'E' 
 238      45000000 
 239 25ec 613C0000 	    _ADR CHARQ 
 240 25f0 432D0000 	    _QBRAN 1f // next is decimal fraction  
 240      18260000 
 241 25f8 032D0000 	    _DOLIT fzero // no fraction 
 241      00000000 
 242 2600 F92D0000 	    _ADR TOR  // R: base sign fint 0.0
 243 2604 572D0000 	    _BRAN 3f // get exponent   
 243      74260000 
 244              	// no integer part, next character must be '.' 
 245              	must_be_dot: 
 246 260c 032D0000 	    _DOLIT fzero // integer part 0.0 
 246      00000000 
 247 2614 F92D0000 	    _ADR TOR  // R: base sign fint 
 248 2618 032D0000 	1:  _DOLIT '.' 
ARM GAS  forth.s 			page 94


 248      2E000000 
 249 2620 613C0000 	    _ADR CHARQ 
 250 2624 432D0000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 250      E4260000 
 251 262c E1240000 	    _ADR decimals // -- a 0 a fdec 
 252 2630 F92D0000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 253              	// if next char == 'E' there is an exponent 
 254              	// else no exponent, float completed 
 255 2634 032D0000 	    _DOLIT 'E' 
 255      45000000 
 256 263c 613C0000 	    _ADR CHARQ 
 257 2640 432D0000 	    _QBRAN 1f
 257      50260000 
 258 2648 572D0000 	    _BRAN 3f 
 258      74260000 
 259              	// no exponent, must be end of string 
 260 2650 A92D0000 	1:   _ADR CAT 
 261 2654 432D0000 	    _QBRAN 1f 
 261      64260000 
 262 265c 572D0000 	    _BRAN error2 // error not end of string 
 262      F8260000 
 263 2664 F92D0000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 264 2668 6D2E0000 	    _ADR DROP 
 265 266c 572D0000 	    _BRAN build_float 
 265      AC260000 
 266              	3: // get exponent 
 267 2674 1D250000 	    _ADR exponent // a 0 exp a+ 
 268              	// must be end of string 
 269 2678 A92D0000 	    _ADR CAT 
 270 267c 432D0000 	    _QBRAN 4f
 270      8C260000 
 271 2684 572D0000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 271      F8260000 
 272 268c F92D0000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 273 2690 8D300000 	    _ADR DDROP 
 274 2694 572D0000 	    _BRAN build_float     
 274      AC260000 
 275              	5: // no exponent 
 276 269c 032D0000 	    _DOLIT 0 
 276      00000000 
 277 26a4 F92D0000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 278 26a8 6D2E0000 	    _ADR DROP 
 279              	build_float: // a 0 R: base sign fint fdec exp 
 280 26ac B52D0000 	    _ADR RFROM 
 281 26b0 C92D0000 	    _ADR DRFROM 
 282 26b4 25210000 	    _ADR FPLUS 
 283 26b8 91240000 	    _ADR exp_adjust
 284 26bc B52D0000 	    _ADR RFROM 
 285 26c0 432D0000 	    _QBRAN 1f 
 285      D4260000 
 286 26c8 032D0000 	    _DOLIT fminus1
 286      000080BF 
 287 26d0 65210000 	    _ADR FSTAR 
 288 26d4 032D0000 	1:  _DOLIT -2 
 288      FEFFFFFF 
 289 26dc 572D0000 	    _BRAN restore_base  
 289      08270000 
ARM GAS  forth.s 			page 95


 290              	error1: // a 0 a R: base sign fint 
 291 26e4 C92D0000 	    _ADR DRFROM 
 292 26e8 8D300000 	    _ADR DDROP
 293 26ec 6D2E0000 	    _ADR DROP  
 294 26f0 572D0000 	    _BRAN restore_base  
 294      08270000 
 295              	error2: // a 0 a R: base sign fint fdec  
 296 26f8 C92D0000 	    _ADR DRFROM 
 297 26fc 8D300000 	    _ADR DDROP  // a 0 a R: base sign
 298 2700 B52D0000 	    _ADR RFROM  // a 0 a sign R: base  
 299 2704 8D300000 	    _ADR DDROP  
 300              	restore_base: 
 301 2708 B52D0000 	    _ADR RFROM 
 302 270c 85330000 	    _ADR BASE 
 303 2710 752D0000 	    _ADR STORE 
 304 2714 D72A0000 	    _UNNEST 
 305              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 2718 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 271c CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2720 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2724 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2728 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 272c ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2730 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2734 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2738 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
ARM GAS  forth.s 			page 96


  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 273c 64250000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 2748 504700BF 	    _NEST
  50 274c 032D0000 	    _DOLIT 1  
  50      01000000 
  51 2754 61320000 	    _ADR MAX  
  52 2758 032D0000 	    _DOLIT 8
  52      08000000 
  53 2760 75320000 	    _ADR MIN 
  54 2764 032D0000 	    _DOLIT 2 
  54      02000000 
  55 276c 312F0000 	    _ADR LSHIFT 
  56 2770 032D0000 	    _DOLIT rounding 
  56      18270000 
  57 2778 412F0000 	    _ADR PLUS 
  58 277c 892D0000 	    _ADR AT   
  59 2780 25210000 	    _ADR FPLUS 
  60 2784 D72A0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 2788 40270000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 2790 57F8040B 	    ldr T0,[DSP],#4
  69 2794 3070     	    strb T0,[TOS]  
  70 2796 06F10106 	    add TOS,#1
  71 279a 99E1     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 279c 504700BF 	    _NEST 
  81 27a0 F92D0000 	    _ADR TOR  // >R ( i r: b )
  82 27a4 A5350000 	    _ADR STOD // ( dbl r: b )
  83 27a8 7D2E0000 	    _ADR DUPP // ( dbl i r: b )
  84 27ac F92D0000 	    _ADR TOR  // ( dbl r: b sign )
  85 27b0 E9300000 	    _ADR DABS 
  86 27b4 E1390000 	    _ADR BDIGS 
  87 27b8 4D3A0000 	    _ADR DIGS 
  88 27bc B52D0000 	    _ADR RFROM 
  89 27c0 813A0000 	    _ADR SIGN 
  90 27c4 A93A0000 	    _ADR EDIGS // ( -- p u )
ARM GAS  forth.s 			page 97


  91 27c8 7D2E0000 	    _ADR DUPP  
  92 27cc 79300000 	    _ADR NROT // -rot ( -- u p u )
  93 27d0 E52D0000 	    _ADR RAT  // r@ ( -- u p u b )
  94 27d4 8D2E0000 	    _ADR SWAP // ( -- u p b u )
  95 27d8 89380000 	    _ADR CMOVE // ( -- u ) 
  96 27dc 7D2E0000 	    _ADR DUPP  // ( -- u u )
  97 27e0 B52D0000 	    _ADR RFROM // ( -- u u b )
  98 27e4 412F0000 	    _ADR PLUS  // ( -- u b+ )
  99 27e8 8D2E0000 	    _ADR SWAP  // ( -- b+ u )
 100 27ec D72A0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	\ SCALEUP ( f1 -- m f2 ) 
 105              	\ multiply fraction until 
 106              	\ f1 >= 0.1
 107              	\ input: 
 108              	\   f1  float
 109              	\ output:
 110              	\   m  log10 exponent 
 111              	\   f2  >= 0.1 
 112              	*************************/
 113              	//    _HEADER SCALEUP,7,"SCALEUP" 
 114              	SCALEUP:
 115 27f0 504700BF 	    _NEST 
 116 27f4 032D0000 	    _DOLIT 0   // m 
 116      00000000 
 117 27fc 8D2E0000 	    _ADR SWAP  // m f1 
 118 2800 7D2E0000 	1:  _ADR DUPP 
 119 2804 032D0000 	    _DOLIT onetenth 
 119      CDCCCC3D 
 120 280c 39220000 	    _ADR FLESS
 121 2810 432D0000 	    _QBRAN 2f
 121      38280000 
 122 2818 032D0000 	    _DOLIT ten 
 122      00002041 
 123 2820 65210000 	    _ADR FSTAR
 124              	    // decrement m   
 125 2824 8D2E0000 	    _ADR SWAP
 126 2828 AD2F0000 	    _ADR ONEM 
 127 282c 8D2E0000 	    _ADR SWAP 
 128 2830 572D0000 	    _BRAN 1b
 128      00280000 
 129 2838 D72A0000 	2:  _UNNEST 
 130              	
 131              	/******************************
 132              	\ SCALEDOWN ( d f1 -- m d f2 )
 133              	\ divide by 10.0 until 
 134              	\ f < 10^d 
 135              	******************************/
 136              	//    _HEADER SCALEDOWN,9,"SCALEDOWN"
 137              	SCALEDOWN: // ( d f1 -- m d f2 )
 138 283c 504700BF 	    _NEST 
 139 2840 A12E0000 	    _ADR OVER 
 140 2844 DD1F0000 	    _ADR PWR10
 141 2848 032D0000 	    _DOLIT 0x31ABCC77 // 0.5e-8
 141      77CCAB31 
ARM GAS  forth.s 			page 98


 142 2850 45210000 	    _ADR FSUBB 
 143 2854 F92D0000 	    _ADR TOR
 144 2858 032D0000 	    _DOLIT 0 
 144      00000000 
 145 2860 8D2E0000 	    _ADR SWAP // d 0 f1 r: pwr10  
 146 2864 7D2E0000 	1:  _ADR DUPP
 147 2868 E52D0000 	    _ADR RAT 
 148 286c 1D220000 	    _ADR FGREAT 
 149 2870 432D0000 	    _QBRAN 2f
 149      98280000 
 150 2878 032D0000 	    _DOLIT ten 
 150      00002041 
 151 2880 85210000 	    _ADR FSLH 
 152              	    // increment m 
 153 2884 8D2E0000 	    _ADR SWAP 
 154 2888 9D2F0000 	    _ADR ONEP 
 155 288c 8D2E0000 	    _ADR SWAP 
 156 2890 572D0000 	    _BRAN 1b   
 156      64280000 
 157 2898 B52D0000 	2:  _ADR RFROM 
 158 289c 6D2E0000 	    _ADR DROP
 159 28a0 8D2E0000 	    _ADR SWAP // ( -- d f m ) 
 160 28a4 79300000 	    _ADR NROT // ( -- m d f )
 161 28a8 D72A0000 	    _UNNEST 
 162              	
 163              	
 164              	/***************************
 165              	convert exponant of float 
 166              	    EPART ( m b -- b+ )
 167              	input: 
 168              	    m   decimal exponent 
 169              	    b   string buffer 
 170              	output:
 171              	    b+   adjusted pointer 
 172              	****************************/
 173              	//    _HEADER EPART,5,"EPART"
 174              	EPART:
 175 28ac 504700BF 	    _NEST
 176 28b0 8D2E0000 	    _ADR SWAP
 177 28b4 51300000 	    _ADR QDUP    
 178 28b8 432D0000 	    _QBRAN 2f 
 178      DC280000 
 179 28c0 8D2E0000 	    _ADR SWAP 
 180 28c4 032D0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 180      45000000 
 181 28cc 8D2E0000 	    _ADR SWAP  
 182 28d0 91270000 	    _ADR CSTOP // c!+ ( -- m b ) 
 183 28d4 9D270000 	    _ADR ITOA // ( i b -- b u )
 184 28d8 6D2E0000 	    _ADR DROP // ( -- b+ )     
 185 28dc D72A0000 	2:  _UNNEST 
 186              	
 187              	
 188              	/***************************
 189              	conver fraction part of float 
 190              	    FPART ( d f b -- b+ )
 191              	input:
 192              	    d   digit left to display 
ARM GAS  forth.s 			page 99


 193              	    f   float to convert
 194              	    b   string* buffer  
 195              	output:
 196              	    b+  updated string* 
 197              	****************************/
 198              	//    _HEADER FPART,5,"FPART"
 199              	FPART:
 200 28e0 504700BF 	    _NEST
 201 28e4 032D0000 	    _DOLIT '.' 
 201      2E000000 
 202 28ec 8D2E0000 	    _ADR SWAP 
 203 28f0 91270000 	    _ADR CSTOP 
 204 28f4 F92D0000 	    _ADR TOR // >r ( d f r: b ) 
 205              	    // round to next digit 
 206 28f8 A12E0000 	    _ADR OVER 
 207 28fc 49270000 	    _ADR ROUND 
 208 2900 8D2E0000 	1:  _ADR SWAP  
 209 2904 51300000 	    _ADR QDUP 
 210 2908 432D0000 	    _QBRAN 2f
 210      58290000 
 211 2910 AD2F0000 	    _ADR ONEM // 1- ( -- f d- r: b )
 212 2914 8D2E0000 	    _ADR SWAP // swap ( -- d f r: b )
 213 2918 032D0000 	    _DOLIT ten // ( d f 10.0 ) 
 213      00002041 
 214 2920 65210000 	    _ADR FSTAR // f*
 215 2924 7D2E0000 	    _ADR DUPP  
 216 2928 F5200000 	    _ADR TRUNC // d f i
 217 292c 7D2E0000 	    _ADR DUPP  // d f i i  
 218 2930 032D0000 	    _DOLIT '0' 
 218      30000000 
 219 2938 412F0000 	    _ADR PLUS 
 220 293c B52D0000 	    _ADR RFROM // R> ( d f c b )
 221 2940 91270000 	    _ADR CSTOP // ( d f i b+ )
 222 2944 F92D0000 	    _ADR TOR  // >r ( -- d f i r: b )
 223 2948 0D210000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 224 294c 45210000 	    _ADR FSUBB 
 225 2950 572D0000 	    _BRAN 1b 
 225      00290000 
 226 2958 6D2E0000 	2:  _ADR DROP 
 227 295c B52D0000 	    _ADR RFROM 
 228 2960 D72A0000 	    _UNNEST 
 229              	
 230              	/***************************
 231              	 convert integer part of float 
 232              	    IPART ( d f b -- m d f b )
 233              	input:
 234              	    d   digit# to display 
 235              	    f   float to convert 
 236              	    b   string* buffer 
 237              	output:
 238              	    m   decimal exponent 
 239              	    d   digit# to display left 
 240              	    f   float fraction 
 241              	    b   update str* 
 242              	****************************/
 243              	//    _HEADER IPART,5,"IPART"
 244              	IPART: 
ARM GAS  forth.s 			page 100


 245 2964 504700BF 	    _NEST 
 246 2968 F92D0000 	    _ADR TOR // ( -- d f r: b )
 247 296c 7D2E0000 	    _ADR DUPP 
 248 2970 032D0000 	    _DOLIT fone 
 248      0000803F 
 249 2978 39220000 	    _ADR FLESS 
 250 297c 432D0000 	    _QBRAN 1f 
 250      B8290000 
 251 2984 032D0000 	    _DOLIT '0' 
 251      30000000 
 252 298c B52D0000 	    _ADR RFROM 
 253 2990 91270000 	    _ADR CSTOP 
 254 2994 F92D0000 	    _ADR TOR 
 255 2998 F1270000 	    _ADR SCALEUP 
 256 299c 8D2E0000 	    _ADR SWAP 
 257 29a0 79300000 	    _ADR NROT 
 258              	    // decrement d 
 259 29a4 8D2E0000 	    _ADR SWAP 
 260 29a8 AD2F0000 	    _ADR ONEM 
 261 29ac 8D2E0000 	    _ADR SWAP 
 262 29b0 B52D0000 	    _ADR RFROM // r> ( -- m d f b )  
 263 29b4 D72A0000 	    _UNNEST 
 264 29b8 3D280000 	1:  _ADR SCALEDOWN // ( -- m d f r: b)
 265 29bc 7D2E0000 	    _ADR DUPP  // ( -- m d f f r: b )
 266 29c0 F5200000 	    _ADR TRUNC // ( -- m d f i r: b )
 267 29c4 7D2E0000 	    _ADR DUPP  // ( -- m d f i i r: b )
 268 29c8 F92D0000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 269 29cc 0D210000 	    _ADR STOF  // ( -- m d f f )
 270 29d0 45210000 	    _ADR FSUBB // ( -- m d f r: b i )
 271 29d4 B52D0000 	    _ADR RFROM // ( -- m d f i r: b )
 272 29d8 B52D0000 	    _ADR RFROM  // ( -- m d f i b )  
 273 29dc 9D270000 	    _ADR ITOA // -- m d f b u )
 274 29e0 F92D0000 	    _ADR TOR  // >r ( -- m d f b r: u )
 275 29e4 65300000 	    _ADR ROT
 276 29e8 B52D0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 277 29ec 512F0000 	    _ADR SUBB // ( -- m f b d- )
 278 29f0 79300000 	    _ADR NROT // ( -- m d f b )
 279 29f4 D72A0000 	    _UNNEST
 280              	
 281              	
 282              	/***************************************
 283              	\  f>a ( d f b -- b u )
 284              	\ convert float to string
 285              	\ input: 
 286              	\   b  output buffer  
 287              	\   d n# of digits [1..7] to convert 
 288              	\   f float to convert 
 289              	\  output: 
 290              	\   b output buffer 
 291              	\    u length of string 
 292              	****************************************/
 293 29f8 8C270000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 293      03463E41 
 294 2a00 504700BF 	    _NEST 
 295 2a04 7D2E0000 	    _ADR DUPP // dup ( -- d f b b )
 296 2a08 F92D0000 	    _ADR TOR // >r   ( d f b r: b )  
 297              	    // store space first buffer char. 
ARM GAS  forth.s 			page 101


 298 2a0c FD2F0000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 299 2a10 8D2E0000 	    _ADR SWAP 
 300 2a14 91270000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 301              	    // check float sign 
 302 2a18 A12E0000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 303 2a1c B5220000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 304 2a20 432D0000 	    _QBRAN 1f  // 0branch 1f 
 304      382A0000 
 305              	    // negative number add '-' to buffer 
 306 2a28 032D0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 306      2D000000 
 307 2a30 8D2E0000 	    _ADR SWAP 
 308 2a34 91270000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 309 2a38 65290000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 310 2a3c E1280000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 311 2a40 AD280000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 312 2a44 E52D0000 	    _ADR RAT 
 313 2a48 512F0000 	    _ADR SUBB 
 314 2a4c B52D0000 	    _ADR RFROM 
 315 2a50 8D2E0000 	    _ADR SWAP 
 316 2a54 D72A0000 	    _UNNEST 
 317              	
 318              	
 319              	/***********************************
 320              	    F. (  f d -- )
 321              	    print float32 number  
 322              	    f -> float to print 
 323              	    d -> string digits# 
 324              	***********************************/
 325 2a58 FC290000 	    _HEADER FDOT,2,"F."
 325      02462E00 
 326 2a60 504700BF 	    _NEST 
 327              	    // limit digits range [1..7]
 328 2a64 032D0000 	    _DOLIT 1 
 328      01000000 
 329 2a6c 61320000 	    _ADR MAX 
 330 2a70 032D0000 	    _DOLIT 7 
 330      07000000 
 331 2a78 75320000 	    _ADR MIN
 332 2a7c 8D2E0000 	    _ADR SWAP // ( -- d f )
 333              	    // allocate convertion buffer 
 334 2a80 19380000 	    _ADR HERE
 335 2a84 F92D0000 	    _ADR TOR  
 336 2a88 032D0000 	    _DOLIT 16 
 336      10000000 
 337 2a90 B9490000 	    _ADR ALLOT 
 338              	    // fill it with zero's 
 339 2a94 E52D0000 	    _ADR RAT 
 340 2a98 032D0000 	    _DOLIT 16 
 340      10000000 
 341 2aa0 032D0000 	    _DOLIT 0 
 341      00000000 
 342 2aa8 01390000 	    _ADR FILL 
 343 2aac B52D0000 	    _ADR RFROM // ( d f b )
 344 2ab0 012A0000 	    _ADR FTOA 
 345 2ab4 593E0000 	    _ADR TYPEE 
 346              	    // free buffer 
ARM GAS  forth.s 			page 102


 347 2ab8 032D0000 	    _DOLIT -16 
 347      F0FFFFFF 
 348 2ac0 B9490000 	    _ADR ALLOT
 349 2ac4 D72A0000 	    _UNNEST 
 350              	
 351              	
 352              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
ARM GAS  forth.s 			page 103


  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2ac8 48F804CD 		STMFD	RSP!,{IP}
  85 2acc 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2ad0 5CF8045B 		LDR WP,[IP],#4 
  89 2ad4 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2ad6 58F804CB 		LDMFD RSP!,{IP}
  92 2ada 5CF8045B 		LDR WP,[IP],#4 
  93 2ade 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2ae0 04F14801 		add T1,UP,#USER_CTOP 
 105 2ae4 0968     		ldr T1,[T1]
 106 2ae6 44F25072 		mov T2,#0x4700+(10<<3)
 107 2aea 21F8022B 		strh T2,[T1],#2
ARM GAS  forth.s 			page 104


 108 2aee 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 2af2 21F8022B 		strh T2,[T1],#2 
 110 2af6 04F14802 		add T2,UP,#USER_CTOP 
 111 2afa 1160     		str T1,[T2]
 112 2afc E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 2afe 47F8046D 		_PUSH 
 118 2b02 04F11406 		ADD TOS,UP,#STDIN 
 119 2b06 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2b08 47F8046D 		_PUSH 
 125 2b0c 04F11806 		ADD TOS,UP,#STDOUT
 126 2b10 DEE7     		_NEXT 
 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 2b12 5C2A0000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 2b20 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 2b28 47F8046D 	    _PUSH 
 135 2b2c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 2b2e 81EA0101 	    eor T1,T1 
 137 2b32 8162     	    str T1,[T0,#SCB_CFSR]
 138 2b34 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 2b36 162B0000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 2b44 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 2b4c 47F8046D 		_PUSH 
 147 2b50 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 2b52 81EA0101 	    eor T1,T1 
 149 2b56 8163     	    str T1,[T0,#SCB_BFAR]
 150 2b58 BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 2b5a 3A2B0000 		_HEADER QKEY,4,"KEY?" 
ARM GAS  forth.s 			page 105


 156      044B4559 
 156      3F00
 157 2b64 504700BF 		_NEST 
 158 2b68 FF2A0000 		_ADR TSTDIN // ' STDIN 
 159 2b6c 69380000 		_ADR ATEXE
 160 2b70 D72A0000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 2b74 5E2B0000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 2b7c 504700BF 		_NEST
 168              	KEY1:
 169 2b80 011B0000 		_ADR CAPS_LED 
 170 2b84 652B0000 		_ADR	QKEY 
 171 2b88 432D0000 		_QBRAN	KEY1
 171      802B0000 
 172 2b90 D72A0000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 2b94 782B0000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 2ba0 504700BF 		_NEST 
 180 2ba4 092B0000 		_ADR TSTDOUT 
 181 2ba8 69380000 		_ADR ATEXE 
 182 2bac D72A0000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
ARM GAS  forth.s 			page 106


 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 2bb0 982B0000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 2bbc 504700BF 		_NEST
 216 2bc0 71310000 		_ADR ABSS   
 217 2bc4 25330000 		_ADR SEED 
 218 2bc8 892D0000 		_ADR AT 
 219 2bcc 7D2E0000 		_ADR DUPP 
 220 2bd0 032D0000 		_DOLIT 13
 220      0D000000 
 221 2bd8 312F0000 		_ADR LSHIFT 
 222 2bdc E92E0000 		_ADR XORR  
 223 2be0 7D2E0000 		_ADR DUPP 
 224 2be4 032D0000 		_DOLIT 17 
 224      11000000 
 225 2bec 192F0000 		_ADR RSHIFT 
 226 2bf0 E92E0000 		_ADR XORR 
 227 2bf4 7D2E0000 		_ADR DUPP
 228 2bf8 032D0000 		_DOLIT 5 
 228      05000000 
 229 2c00 312F0000 		_ADR LSHIFT 
 230 2c04 E92E0000 		_ADR XORR  
 231 2c08 7D2E0000 		_ADR DUPP 
 232 2c0c 25330000 		_ADR SEED 
 233 2c10 752D0000 		_ADR STORE 
 234 2c14 032D0000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 2c1c C12E0000 		_ADR ANDD 
 236 2c20 8D2E0000 		_ADR SWAP 
 237 2c24 ED360000 		_ADR MODD 
 238 2c28 D72A0000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 2c2c B42B0000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 2c38 504700BF 		_NEST 
 247 2c3c 55330000 		_ADR TIMER 
 248 2c40 752D0000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2c44 55330000 		_ADR TIMER 
 251 2c48 892D0000 		_ADR AT 
 252 2c4c 432D0000 		_QBRAN PAUSE_EXIT 
 252      5C2C0000 
 253 2c54 572D0000 		_BRAN PAUSE_LOOP 
 253      442C0000 
 254              	PAUSE_EXIT: 		
ARM GAS  forth.s 			page 107


 255 2c5c D72A0000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2c60 302C0000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 2c6c 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2c70 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 2c78 3600     		movs TOS,TOS 
 265 2c7a 57F8046B 		_POP
 266 2c7e 03D0     		beq ULED_OFF
 267 2c80 4FEA0040 		lsl T0,#16 
 268 2c84 8861     		str T0,[T1,#GPIO_BSRR]
 269 2c86 23E7     		_NEXT 
 270              	ULED_OFF:
 271 2c88 8861     		str T0,[T1,#GPIO_BSRR]
 272 2c8a 21E7     		_NEXT    
 273              	
 274              	/**************************
 275              	   JOYSTK  ( -- u )
 276              	   read joystick port 
 277              	**************************/
 278 2c8c 642C0000 		_HEADER JOYSTK,6,"JOYSTK"
 278      064A4F59 
 278      53544B00 
 279 2c98 504700BF 		_NEST 
 280 2c9c 032D0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 280      10000240 
 281 2ca4 892D0000 		_ADR AT 
 282 2ca8 032D0000 		_DOLIT 0x100f 
 282      0F100000 
 283 2cb0 C12E0000 		_ADR ANDD 
 284 2cb4 D72A0000 		_UNNEST 
 285              	
 286              	/****************************
 287              		TONE ( msec freq -- )
 288              	input:
 289              		freq  frequence hertz 
 290              		msec  durration in msec 
 291              	*****************************/
 292 2cb8 902C0000 		_HEADER TONE,4,"TONE"
 292      04544F4E 
 292      450000BF 
 293 2cc4 48F68050 		_MOV32 r0,6000000 // Fclk 
 293      C0F25B00 
 294 2ccc B0FBF6F0 		udiv r0,r0,TOS
 295 2cd0 57F8046B 		_POP  
 296 2cd4 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 296      C4F20001 
 297 2cdc C862     		str r0,[r1,#TIM_ARR]
 298 2cde 4FEA5000 		lsr r0,#1
 299 2ce2 4863     		str r0,[r1,#TIM_CCR1]
 300 2ce4 4FF00100 		mov r0,#1 
ARM GAS  forth.s 			page 108


 301 2ce8 0862     		str r0,[r1,#TIM_CCER]
 302 2cea 0860     		str r0,[r1,#TIM_CR1]
 303 2cec C868     		ldr r0,[r1,#TIM_DIER]
 304 2cee C4F8AC60 		str TOS,[UP,#TONE_DTMR]
 305              	//	orr r0,#2
 306              	//	str r0,[r1,#TIM_DIER]
 307 2cf2 57F8046B 		_POP
 308 2cf6 EBE6     		_NEXT 
 309              	
 310              	/***************
 311              	//  The kernel
 312              	***************/
 313              	
 314              	/********************
 315              	    NOP	( -- )
 316              	 	do nothing.
 317              	*********************/
 318 2cf8 BC2C0000 		_HEADER NOP,3,"NOP"
 318      034E4F50 
 319 2d00 E6E6     		_NEXT 
 320              	 
 321              	/********************
 322              	    doLIT	( -- w )
 323              	 	Push an inline literal.
 324              	hidden word used by compiler 
 325              	*********************/
 326              	DOLIT:
 327 2d02 47F8046D 		_PUSH				//  store TOS on data stack
 328 2d06 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 329 2d0a E1E6     		_NEXT 
 330              	
 331              	/*******************************
 332              	    EXECUTE	( ca -- )
 333              	 	Execute the word at ca.
 334              	*******************************/
 335 2d0c FC2C0000 		_HEADER EXECU,7,"EXECUTE"
 335      07455845 
 335      43555445 
 336 2d18 46F00105 		ORR	WP,TOS,#1 
 337 2d1c 57F8046B 		_POP
 338 2d20 2847     		BX WP 
 339 2d22 D5E6     		_NEXT 
 340              	
 341              	/**********************************************************
 342              	    donext	( -- ) counter on R:
 343              	 	Run time code for the single index loop.
 344              	 	: next ( -- ) \ hilevel model
 345              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 346              	hidden word used by compiler 	  
 347              	*********************************************************/
 348              	DONXT:
 349 2d24 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 350 2d28 22B9     		CBNZ T2,NEXT1 
 351              		/* loop done */
 352 2d2a 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 353 2d2e 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 354 2d32 CDE6     		_NEXT
ARM GAS  forth.s 			page 109


 355              	NEXT1:
 356              		/* decrement loop counter */
 357 2d34 A2F10102 		SUB	T2,T2,#1
 358 2d38 C8F80020 		STR	T2,[RSP]
 359 2d3c DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 360 2d40 C6E6     		_NEXT 
 361              	
 362              	/**************************************
 363              	    ?branch	( f -- )
 364              	 	Branch if flag is zero.
 365              	hiddend word used by compiler
 366              	**************************************/
 367              	QBRAN:
 368 2d42 3600     		MOVS	TOS,TOS
 369 2d44 57F8046B 		_POP
 370 2d48 02D1     		BNE	QBRAN1
 371 2d4a DCF800C0 		LDR	IP,[IP]
 372 2d4e BFE6     		_NEXT
 373              	QBRAN1:
 374 2d50 0CF1040C 	 	ADD	IP,IP,#4
 375 2d54 BCE6     		_NEXT
 376              	
 377              	/***********************************
 378              	    branch	( -- )
 379              	 	Branch to an inline address.
 380              	hidden word used by compiler 
 381              	***********************************/
 382              	BRAN:
 383 2d56 DCF800C0 		LDR	IP,[IP]
 384 2d5a B9E6     		_NEXT
 385              	
 386              	/******************************************
 387              	    EXIT	(  -- )
 388              	 	Exit the currently executing command.
 389              	******************************************/
 390 2d5c 102D0000 		_HEADER EXIT,4,"EXIT"
 390      04455849 
 390      540000BF 
 391 2d68 D72A0000 		_UNNEST
 392              	
 393              	/***********************************
 394              	    !	   ( w a -- )
 395              	 	Pop the data stack to memory.
 396              	************************************/
 397 2d6c 602D0000 		_HEADER STORE,1,"!"
 397      012100BF 
 398 2d74 57F8045B 		LDR	WP,[DSP],#4
 399 2d78 3560     		STR	WP,[TOS]
 400 2d7a 57F8046B 		_POP
 401 2d7e A7E6     		_NEXT 
 402              	
 403              	/********************************************
 404              	    @	   ( a -- w )
 405              	 	Push memory location to the data stack.
 406              	*********************************************/
 407 2d80 702D0000 		_HEADER AT,1,"@"
 407      014000BF 
ARM GAS  forth.s 			page 110


 408 2d88 3668     		LDR	TOS,[TOS]
 409 2d8a A1E6     		_NEXT 
 410              	
 411              	/*******************************************
 412              	    C!	  ( c b -- )
 413              	 	Pop the data stack to byte memory.
 414              	*******************************************/
 415 2d8c 842D0000 		_HEADER CSTOR,2,"C!"
 415      02432100 
 416 2d94 57F8045B 		LDR	WP,[DSP],#4
 417 2d98 3570     		STRB WP,[TOS]
 418 2d9a 57F8046B 		_POP
 419 2d9e 97E6     		_NEXT
 420              	
 421              	/*********************************************
 422              	    C@	  ( b -- c )
 423              	 	Push byte memory location to the data stack.
 424              	**********************************************/
 425 2da0 902D0000 		_HEADER CAT,2,"C@"
 425      02434000 
 426 2da8 3678     		LDRB	TOS,[TOS]
 427 2daa 91E6     		_NEXT 
 428              	
 429              	
 430              	/*********************************************
 431              	    R>	  ( -- w  R: w -- ) 
 432              	 	push from rstack.
 433              	**********************************************/
 434 2dac A42D0000 		_HEADER RFROM,2,"R>"
 434      02523E00 
 435 2db4 47F8046D 		_PUSH
 436 2db8 58F8046B 		LDR	TOS,[RSP],#4
 437 2dbc 88E6     		_NEXT 
 438              	
 439              	/***********************************************
 440              		2R> (  -- D ) R: D --  
 441              	    push a double from rstack 
 442              	***********************************************/
 443 2dbe B02D0000 		_HEADER DRFROM,3,"2R>"
 443      0332523E 
 443      00BF
 444 2dc8 47F8046D 		_PUSH 
 445 2dcc 58F8046B 		LDR TOS,[RSP],#4 
 446 2dd0 47F8046D 		_PUSH 
 447 2dd4 58F8046B 		LDR TOS,[RSP],#4
 448 2dd8 7AE6     		_NEXT 
 449              	
 450              	/************************************************
 451              	    R@	  ( -- w )
 452              	 	Copy top of return stack to the data stack.
 453              	************************************************/
 454 2dda C22D0000 		_HEADER RAT,2,"R@"
 454      02524000 
 454      00BF
 455 2de4 47F8046D 		_PUSH
 456 2de8 D8F80060 		LDR	TOS,[RSP]
 457 2dec 70E6     		_NEXT 
ARM GAS  forth.s 			page 111


 458              	
 459              	/***********************************************
 460              	    >R	  ( w -- ) R: -- w 
 461              	 	pop to rstack.
 462              	************************************************/
 463 2dee DE2D0000 		_HEADER TOR,2,">R"
 463      023E5200 
 463      00BF
 464 2df8 48F8046D 		STR	TOS,[RSP,#-4]!
 465 2dfc 57F8046B 		_POP
 466 2e00 66E6     		_NEXT
 467              	
 468              	/*********************************************
 469              		2>R ( d -- ) R: -- d 
 470              		pop a double to rstack 
 471              	*********************************************/
 472 2e02 F22D0000 		_HEADER DTOR,3,"2>R"
 472      03323E52 
 472      00BF
 473 2e0c 48F8046D 		STR TOS,[RSP,#-4]!
 474 2e10 57F8046B 	    _POP 
 475 2e14 48F8046D 		STR TOS,[RSP,#-4]!
 476 2e18 57F8046B 		_POP  
 477 2e1c 58E6     		_NEXT 	
 478              	
 479              	
 480              	/*******************************
 481              	//	RP! ( u -- )
 482              	// initialize RPP with u 
 483              	*******************************/
 484 2e1e 062E0000 		_HEADER RPSTOR,3,"RP!"
 484      03525021 
 484      00BF
 485 2e28 B046     		MOV RSP,TOS 
 486 2e2a 57F8046B 		_POP  
 487 2e2e 4FE6     		_NEXT 
 488              	
 489              	/********************************
 490              		SP! ( u -- )
 491              	 initialize SPP with u 
 492              	********************************/
 493 2e30 222E0000 		_HEADER SPSTOR,3,"SP!"
 493      03535021 
 494 2e38 3746     		MOV DSP,TOS 
 495 2e3a 86EA0606 		EOR TOS,TOS,TOS 
 496 2e3e 47E6     		_NEXT 
 497              	
 498              	/**************************************
 499              	    SP@	 ( -- a )
 500              	 	Push the current data stack pointer.
 501              	***************************************/
 502 2e40 342E0000 		_HEADER SPAT,3,"SP@"
 502      03535040 
 503 2e48 47F8046D 		_PUSH
 504 2e4c 3E46     		MOV	TOS,DSP
 505 2e4e 3FE6     		_NEXT
 506              	
ARM GAS  forth.s 			page 112


 507              	/**************************************
 508              	   RP@ ( -- a )
 509              	   push current rstack pointer 
 510              	**************************************/
 511 2e50 442E0000 		_HEADER RPAT,3,"RP@"
 511      03525040 
 512 2e58 47F8046D 		_PUSH 
 513 2e5c 4646     		MOV TOS,RSP 
 514 2e5e 37E6     		_NEXT 
 515              	
 516              	/********************************
 517              	    DROP	( w -- )
 518              	 	Discard top stack item.
 519              	********************************/
 520 2e60 542E0000 		_HEADER DROP,4,"DROP"
 520      0444524F 
 520      500000BF 
 521 2e6c 57F8046B 		_POP
 522 2e70 2EE6     		_NEXT 
 523              	
 524              	/*********************************
 525              	    DUP	 ( w -- w w )
 526              	 	Duplicate the top stack item.
 527              	*********************************/
 528 2e72 642E0000 		_HEADER DUPP,3,"DUP"
 528      03445550 
 528      00BF
 529 2e7c 47F8046D 		_PUSH
 530 2e80 26E6     		_NEXT 
 531              	
 532              	/**********************************
 533              	    SWAP	( w1 w2 -- w2 w1 )
 534              	 	Exchange top two stack items.
 535              	**********************************/
 536 2e82 762E0000 		_HEADER SWAP,4,"SWAP"
 536      04535741 
 536      5000
 537 2e8c 3D68     		LDR	WP,[DSP]
 538 2e8e 3E60     		STR	TOS,[DSP]
 539 2e90 2E46     		MOV	TOS,WP
 540 2e92 1DE6     		_NEXT 
 541              	
 542              	/***********************************
 543              	    OVER	( w1 w2 -- w1 w2 w1 )
 544              	 	Copy second stack item to top.
 545              	***********************************/
 546 2e94 862E0000 		_HEADER OVER,4,"OVER"
 546      044F5645 
 546      520000BF 
 547 2ea0 47F8046D 		_PUSH
 548 2ea4 7E68     		LDR	TOS,[DSP,#4]
 549 2ea6 13E6     		_NEXT 
 550              	
 551              	/***********************************
 552              	    0<	  ( n -- t )
 553              	 	Return true if n is negative.
 554              	***********************************/
ARM GAS  forth.s 			page 113


 555 2ea8 982E0000 		_HEADER ZLESS,2,"0<"
 555      02303C00 
 556 2eb0 4FEAE676 		ASR TOS,#31
 557 2eb4 0CE6     		_NEXT 
 558              	
 559              	/********************************
 560              	    AND	 ( w w -- w )
 561              	 	Bitwise AND.
 562              	********************************/
 563 2eb6 AC2E0000 		_HEADER ANDD,3,"AND"
 563      03414E44 
 563      00BF
 564 2ec0 57F8045B 		LDR	WP,[DSP],#4
 565 2ec4 06EA0506 		AND	TOS,TOS,WP
 566 2ec8 02E6     		_NEXT 
 567              	
 568              	/******************************
 569              	    OR	  ( w w -- w )
 570              	 	Bitwise inclusive OR.
 571              	******************************/
 572 2eca BA2E0000 		_HEADER ORR,2,"OR"
 572      024F5200 
 572      00BF
 573 2ed4 57F8045B 		LDR	WP,[DSP],#4
 574 2ed8 46EA0506 		ORR	TOS,TOS,WP
 575 2edc F8E5     		_NEXT 
 576              	
 577              	/*****************************
 578              	    XOR	 ( w w -- w )
 579              	 	Bitwise exclusive OR.
 580              	*****************************/
 581 2ede CE2E0000 		_HEADER XORR,3,"XOR"
 581      03584F52 
 581      00BF
 582 2ee8 57F8045B 		LDR	WP,[DSP],#4
 583 2eec 86EA0506 		EOR	TOS,TOS,WP
 584 2ef0 EEE5     		_NEXT 
 585              	
 586              	/**************************************************
 587              	    UM+	 ( w w -- w cy )
 588              	 	Add two numbers, return the sum and carry flag.
 589              	***************************************************/
 590 2ef2 E22E0000 		_HEADER UPLUS,3,"UM+"
 590      03554D2B 
 590      00BF
 591 2efc 3D68     		LDR	WP,[DSP]
 592 2efe AD19     		ADDS	WP,WP,TOS
 593 2f00 4FF00006 		MOV	TOS,#0
 594 2f04 46F10006 		ADC	TOS,TOS,#0
 595 2f08 3D60     		STR	WP,[DSP]
 596 2f0a E1E5     		_NEXT 
 597              	
 598              	/*********************************
 599              	    RSHIFT	 ( w # -- w )
 600              	 	arithmetic Right shift # bits.
 601              	**********************************/
 602 2f0c F62E0000 		_HEADER RSHIFT,6,"RSHIFT"
ARM GAS  forth.s 			page 114


 602      06525348 
 602      49465400 
 603 2f18 57F8045B 		LDR	WP,[DSP],#4
 604 2f1c 45FA06F6 		MOV	TOS,WP,ASR TOS
 605 2f20 D6E5     		_NEXT 
 606              	
 607              	/****************************
 608              	    LSHIFT	 ( w # -- w )
 609              	 	Right shift # bits.
 610              	****************************/
 611 2f22 102F0000 		_HEADER LSHIFT,6,"LSHIFT"
 611      064C5348 
 611      49465400 
 611      00BF
 612 2f30 57F8045B 		LDR	WP,[DSP],#4
 613 2f34 05FA06F6 		MOV	TOS,WP,LSL TOS
 614 2f38 CAE5     		_NEXT
 615              	
 616              	/*************************
 617              	    +	 ( w w -- w )
 618              	 	Add.
 619              	*************************/
 620 2f3a 262F0000 		_HEADER PLUS,1,"+"
 620      012B
 621 2f40 57F8045B 		LDR	WP,[DSP],#4
 622 2f44 2E44     		ADD	TOS,TOS,WP
 623 2f46 C3E5     		_NEXT 
 624              	
 625              	/************************
 626              	    -	 ( w w -- w )
 627              	 	Subtract.
 628              	************************/
 629 2f48 3E2F0000 		_HEADER SUBB,1,"-"
 629      012D00BF 
 630 2f50 57F8045B 		LDR	WP,[DSP],#4
 631 2f54 C6EB0506 		RSB	TOS,TOS,WP
 632 2f58 BAE5     		_NEXT 
 633              	
 634              	/************************
 635              	    *	 ( w w -- w )
 636              	 	Multiply.
 637              	***********************/
 638 2f5a 4C2F0000 		_HEADER STAR,1,"*"
 638      012A
 639 2f60 57F8045B 		LDR	WP,[DSP],#4
 640 2f64 05FB06F6 		MUL	TOS,WP,TOS
 641 2f68 B2E5     		_NEXT 
 642              	
 643              	/***************************
 644              	    UM*	 ( w w -- ud )
 645              	 	Unsigned multiply.
 646              	****************************/
 647 2f6a 5E2F0000 		_HEADER UMSTA,3,"UM*"
 647      03554D2A 
 647      00BF
 648 2f74 3D68     		LDR	WP,[DSP]
 649 2f76 A6FB0523 		UMULL	T2,T3,TOS,WP
ARM GAS  forth.s 			page 115


 650 2f7a 3A60     		STR	T2,[DSP]
 651 2f7c 1E46     		MOV	TOS,T3
 652 2f7e A7E5     		_NEXT 
 653              	
 654              	/***************************
 655              	    M*	 ( w w -- d )
 656              	 	signed multiply.
 657              		hold double result
 658              	***************************/
 659 2f80 6E2F0000 		_HEADER MSTAR,2,"M*"
 659      024D2A00 
 660 2f88 3D68     		LDR	WP,[DSP]
 661 2f8a 86FB0523 		SMULL	T2,T3,TOS,WP
 662 2f8e 3A60     		STR	T2,[DSP]
 663 2f90 1E46     		MOV	TOS,T3
 664 2f92 9DE5     		_NEXT 
 665              	
 666              	/***************************
 667              	    1+	 ( w -- w+1 )
 668              	 	Add 1.
 669              	***************************/
 670 2f94 842F0000 		_HEADER ONEP,2,"1+"
 670      02312B00 
 671 2f9c 06F10106 		ADD	TOS,TOS,#1
 672 2fa0 96E5     		_NEXT 
 673              	
 674              	/***************************
 675              	    1-	 ( w -- w-1 )
 676              	 	Subtract 1.
 677              	***************************/
 678 2fa2 982F0000 		_HEADER ONEM,2,"1-"
 678      02312D00 
 678      00BF
 679 2fac A6F10106 		SUB	TOS,TOS,#1
 680 2fb0 8EE5     		_NEXT 
 681              	
 682              	/***************************
 683              	    2+	 ( w -- w+2 )
 684              	 	Add 2.
 685              	**************************/
 686 2fb2 A62F0000 		_HEADER TWOP,2,"2+"
 686      02322B00 
 686      00BF
 687 2fbc 06F10206 		ADD	TOS,TOS,#2
 688 2fc0 86E5     		_NEXT
 689              	
 690              	/**************************
 691              	    2-	 ( w -- w-2 )
 692              	 	Subtract 2.
 693              	**************************/
 694 2fc2 B62F0000 		_HEADER TWOM,2,"2-"
 694      02322D00 
 694      00BF
 695 2fcc A6F10206 		SUB	TOS,TOS,#2
 696 2fd0 7EE5     		_NEXT
 697              	
 698              	/***************************
ARM GAS  forth.s 			page 116


 699              	    CELL+	( w -- w+4 )
 700              	 	Add CELLL.
 701              	***************************/
 702 2fd2 C62F0000 		_HEADER CELLP,5,"CELL+"
 702      0543454C 
 702      4C2B
 703 2fdc 06F10406 		ADD	TOS,TOS,#CELLL
 704 2fe0 76E5     		_NEXT
 705              	
 706              	/***************************
 707              	    CELL-	( w -- w-4 )
 708              	 	Subtract CELLL.
 709              	**************************/
 710 2fe2 D62F0000 		_HEADER CELLM,5,"CELL-"
 710      0543454C 
 710      4C2D
 711 2fec A6F10406 		SUB	TOS,TOS,#CELLL
 712 2ff0 6EE5     		_NEXT
 713              	
 714              	/**************************** 
 715              	    BL	( -- 32 )
 716              	 	Blank (ASCII space).
 717              	*****************************/
 718 2ff2 E62F0000 		_HEADER BLANK,2,"BL"
 718      02424C00 
 718      00BF
 719 2ffc 47F8046D 		_PUSH
 720 3000 4FF02006 		MOV	TOS,#32
 721 3004 64E5     		_NEXT 
 722              	
 723              	/**************************
 724              	    CELLS	( w -- w*4 )
 725              	 	Multiply CELLL 
 726              	***************************/
 727 3006 F62F0000 		_HEADER CELLS,5,"CELLS"
 727      0543454C 
 727      4C53
 728 3010 4FEA8606 		LSL TOS,#2
 729 3014 5CE5     		_NEXT
 730              	
 731              	/***************************
 732              	    CELL/	( w -- w/4 )
 733              	 	Divide by CELLL.
 734              	***************************/
 735 3016 0A300000 		_HEADER CELLSL,5,"CELL/"
 735      0543454C 
 735      4C2F
 736 3020 4FEAA606 		ASR TOS,#2
 737 3024 54E5     		_NEXT
 738              	
 739              	/*************************
 740              	    2*	( w -- w*2 )
 741              	 	Multiply 2.
 742              	*************************/
 743 3026 1A300000 		_HEADER TWOST,2,"2*"
 743      02322A00 
 743      00BF
ARM GAS  forth.s 			page 117


 744 3030 4FEA4606 		MOV	TOS,TOS,LSL#1
 745 3034 4CE5     		_NEXT
 746              	
 747              	/*************************
 748              	    2/	( w -- w/2 )
 749              	 	Divide by 2.
 750              	***********************/
 751 3036 2A300000 		_HEADER TWOSL,2,"2/"
 751      02322F00 
 751      00BF
 752 3040 4FEA6606 		MOV	TOS,TOS,ASR#1
 753 3044 44E5     		_NEXT
 754              	
 755              	/****************************
 756              	    ?DUP	( w -- w w | 0 )
 757              	 	Conditional duplicate.
 758              	*****************************/
 759 3046 3A300000 		_HEADER QDUP,4,"?DUP"
 759      043F4455 
 759      5000
 760 3050 3500     		MOVS	WP,TOS
 761 3052 18BF     		IT NE 
 762 3054 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 763 3058 3AE5     		_NEXT
 764              	
 765              	/***********************************
 766              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 767              	 	Rotate top 3 items.
 768              	*************************************/
 769 305a 4A300000 		_HEADER ROT,3,"ROT"
 769      03524F54 
 769      00BF
 770 3064 3868     		LDR	T0,[DSP]  // w2 
 771 3066 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 772 3068 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 773 306a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 774 306c 30E5     		_NEXT
 775              	
 776              	/*********************************
 777              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 778              	 left rotate top 3 elements 
 779              	********************************/
 780 306e 5E300000 		_HEADER NROT,4,"-ROT"
 780      042D524F 
 780      5400
 781 3078 7868     		LDR T0,[DSP,#4]
 782 307a 7E60     		STR TOS,[DSP,#4]	
 783 307c 3E68     		LDR TOS,[DSP]
 784 307e 3860     		STR T0,[DSP]
 785 3080 26E5     		_NEXT 
 786              	
 787              	/*********************************
 788              	    2DROP	( w1 w2 -- )
 789              	 	Drop top 2 items.
 790              	*********************************/
 791 3082 72300000 		_HEADER DDROP,5,"2DROP"
 791      05324452 
ARM GAS  forth.s 			page 118


 791      4F50
 792 308c 57F8046B 		_POP
 793 3090 57F8046B 		_POP
 794 3094 1CE5     		_NEXT 
 795              	
 796              	/********************************
 797              		3DROP ( w1 w2 w3 -- )
 798              		drop top 3 items 
 799              	********************************/
 800 3096 86300000 		_HEADER TDROP,5,"3DROP"
 800      05334452 
 800      4F50
 801 30a0 07F10807 	    add DSP,#8 
 802 30a4 57F8046B 	    _POP 
 803 30a8 12E5     	    _NEXT 
 804              	
 805              	/***********************************
 806              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 807              	 	Duplicate top 2 items.
 808              	************************************/
 809 30aa 9A300000 		_HEADER DDUP,4,"2DUP"
 809      04324455 
 809      5000
 810 30b4 3868     		LDR	T0,[DSP] // w1
 811 30b6 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 812 30ba 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 813 30be 07E5     		_NEXT
 814              	
 815              	/******************************
 816              	    D+	( d1 d2 -- d3 )
 817              	 	Add top 2 double numbers.
 818              	******************************/
 819 30c0 AE300000 		_HEADER DPLUS,2,"D+"
 819      02442B00 
 820 30c8 57F8045B 		LDR	WP,[DSP],#4
 821 30cc 57F8042B 		LDR	T2,[DSP],#4
 822 30d0 3B68     		LDR	T3,[DSP]
 823 30d2 ED18     		ADDS	WP,WP,T3
 824 30d4 3D60     		STR	WP,[DSP]
 825 30d6 46EB0206 		ADC	TOS,TOS,T2
 826 30da F9E4     		_NEXT
 827              	
 828              	/******************************
 829              		DABS ( d -- ud )
 830              		absolute value double 
 831              	*****************************/
 832 30dc C4300000 		_HEADER DABS,4,"DABS"
 832      04444142 
 832      530000BF 
 833 30e8 16F0004F 		tst TOS,#(1<<31)
 834 30ec 09D0     		beq 9f 
 835 30ee 6FEA0606 		mvn TOS,TOS 
 836 30f2 3D68     		ldr WP,[DSP]
 837 30f4 6FEA0505 		mvn WP,WP 
 838 30f8 0135     		adds WP,#1
 839 30fa 3D60     		str WP,[DSP]
 840 30fc 01D3     		bcc 9f 
ARM GAS  forth.s 			page 119


 841 30fe 06F10106 		add TOS,#1 
 842 3102 E5E4     	9:	_NEXT 
 843              	
 844              	/*****************************
 845              	  UD> ( d1 d2 -- f )
 846              	  unsigned compare double d1 > d2 
 847              	******************************/
 848 3104 E0300000 		_HEADER UDGREAT,3,"UD>"
 848      0355443E 
 849 310c 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 850 3110 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 851 3112 B042     		cmp T0,TOS 
 852 3114 02D8     		bhi 1f
 853 3116 04D4     		bmi 2f  
 854 3118 A942     		cmp T1,WP 
 855 311a 02D9     		bls 2f 
 856 311c 4FF0FF36 	1:	mov TOS,#-1 
 857 3120 D6E4     		_NEXT 
 858 3122 4FF00006 	2:  mov TOS,#0 
 859 3126 D3E4     		_NEXT 
 860              	
 861              	/******************************
 862              		D0= ( d -- f )
 863              		double 0= 
 864              	*****************************/
 865 3128 08310000 		_HEADER DZEQUAL,3,"D0="
 865      0344303D 
 866 3130 3046     		mov T0,TOS
 867 3132 57F8046B 		_POP 
 868 3136 46EA0006 		orr TOS,T0 
 869 313a 01D0     		beq 9f
 870 313c 6FF00006 		mvn TOS,#0 
 871 3140 C6E4     	9:	_NEXT 
 872              	
 873              	/*****************************
 874              	    NOT	 ( w -- !w )
 875              	 	1"s complement.
 876              	*****************************/
 877 3142 2C310000 		_HEADER INVER,3,"NOT"
 877      034E4F54 
 877      00BF
 878 314c 6FEA0606 		MVN	TOS,TOS
 879 3150 BEE4     		_NEXT
 880              	
 881              	/*****************************
 882              	    NEGATE	( w -- -w )
 883              	 	2's complement.
 884              	***************************/
 885 3152 46310000 		_HEADER NEGAT,6,"NEGATE"
 885      064E4547 
 885      41544500 
 885      00BF
 886 3160 C6F10006 		RSB	TOS,TOS,#0
 887 3164 B4E4     		_NEXT
 888              	
 889              	/***************************
 890              	    ABS	 ( w -- |w| )
ARM GAS  forth.s 			page 120


 891              	 	Absolute.
 892              	**************************/
 893 3166 56310000 		_HEADER ABSS,3,"ABS"
 893      03414253 
 893      00BF
 894 3170 16F0004F 		TST	TOS,#0x80000000
 895 3174 18BF     		IT NE
 896 3176 7642     	    RSBNE   TOS,TOS,#0
 897 3178 AAE4     		_NEXT
 898              	
 899              	/**************************
 900              		CLZ ( n - n )
 901              		count leading zeros 
 902              	**************************/
 903 317a 6A310000 		_HEADER CLZ,3,"CLZ"
 903      03434C5A 
 903      00BF
 904 3184 B6FA86F6 		clz TOS,TOS 
 905 3188 A2E4     		_NEXT 
 906              	
 907              	/*************************
 908              		CTZ ( n -- n )
 909              		count trailing zeros 
 910              	************************/
 911 318a 7E310000 		_HEADER CTZ,3,"CTZ"
 911      0343545A 
 911      00BF
 912 3194 80EA0000 		eor T0,T0 
 913 3198 16F0010F 	1:  tst TOS,#1 
 914 319c 04D1     		bne 2f 
 915 319e 4FEA5606 		lsr TOS,#1 
 916 31a2 00F10100 		add T0,#1 
 917 31a6 F7E7     		b 1b 
 918 31a8 0646     	2:  mov TOS,T0 
 919 31aa 91E4     		_NEXT 
 920              	
 921              	
 922              	/*******************
 923              	  0= ( w -- f )
 924              	 TOS==0?
 925              	*******************/
 926 31ac 8E310000 		_HEADER ZEQUAL,2,"0="
 926      02303D00 
 927 31b4 16B9     		cbnz TOS,1f
 928 31b6 4FF0FF36 		mov TOS,#-1
 929 31ba 89E4     		_NEXT 
 930 31bc 86EA0606 	1:  eor TOS,TOS,TOS  
 931 31c0 86E4     		_NEXT 	
 932              	
 933              	/*********************
 934              	    =	 ( w w -- t )
 935              	 	Equal?
 936              	*********************/
 937 31c2 B0310000 		_HEADER EQUAL,1,"="
 937      013D
 938 31c8 57F8045B 		LDR	WP,[DSP],#4
 939 31cc AE42     		CMP	TOS,WP
ARM GAS  forth.s 			page 121


 940 31ce 0CBF     		ITE EQ 
 941 31d0 6FF00006 	    MVNEQ	TOS,#0
 942 31d4 0026     		MOVNE	TOS,#0
 943 31d6 7BE4     		_NEXT
 944              	
 945              	/************************
 946              		<> ( w w -- f )
 947              		different?
 948              	************************/
 949 31d8 C6310000 		_HEADER DIFF,2,"<>"
 949      023C3E00 
 950 31e0 3046     		mov T0,TOS 
 951 31e2 57F8046B 		_POP 
 952 31e6 86EA0006 		eor TOS,T0
 953 31ea B6FA86F0 		clz T0,TOS 
 954 31ee 06FA00F6 		lsl TOS,T0 
 955 31f2 4FEAE676 		asr TOS,#31 
 956 31f6 6BE4     		_NEXT 
 957              	
 958              	/************************
 959              	    U<	 ( w w -- t )
 960              	 	Unsigned less?
 961              	*************************/
 962 31f8 DC310000 		_HEADER ULESS,2,"U<"
 962      02553C00 
 963 3200 57F8045B 		LDR	WP,[DSP],#4
 964 3204 B542     		CMP	WP,TOS
 965 3206 34BF     		ITE CC 
 966 3208 6FF00006 		MVNCC	TOS,#0
 967 320c 0026     		MOVCS	TOS,#0
 968 320e 5FE4     		_NEXT
 969              	
 970              	/**********************
 971              	    <	( w w -- t )
 972              	 	Less?
 973              	**********************/
 974 3210 FC310000 		_HEADER LESS,1,"<"
 974      013C00BF 
 975 3218 57F8045B 		LDR	WP,[DSP],#4
 976 321c B542     		CMP	WP,TOS
 977 321e B4BF     	    ITE LT
 978 3220 6FF00006 		MVNLT	TOS,#0
 979 3224 0026     		MOVGE	TOS,#0
 980 3226 53E4     		_NEXT 
 981              	
 982              	/**********************
 983              		U> ( u u -- t|f )
 984              	    unsigned greater 
 985              	**********************/
 986 3228 14320000 		_HEADER UGREAT,2,"U>"
 986      02553E00 
 987 3230 57F8045B 		LDR WP,[DSP],#4 
 988 3234 AE42     		CMP TOS,WP 
 989 3236 34BF     		ITE CC  
 990 3238 6FF00006 		MVNCC TOS,#0 
 991 323c 0026     		MOVCS TOS,#0
 992 323e 47E4     		_NEXT 
ARM GAS  forth.s 			page 122


 993              	
 994              	/***********************
 995              	    >	( w w -- t )
 996              	 	greater?
 997              	***********************/
 998 3240 2C320000 		_HEADER GREAT,1,">"
 998      013E00BF 
 999 3248 57F8045B 		LDR	WP,[DSP],#4
 1000 324c B542     		CMP	WP,TOS
 1001 324e CCBF     		ITE GT
 1002 3250 6FF00006 	    MVNGT	TOS,#0
 1003 3254 0026     		MOVLE	TOS,#0
 1004 3256 3BE4     		_NEXT
 1005              	
 1006              	/***************************
 1007              	    MAX	 ( w w -- max )
 1008              	 	Leave maximum.
 1009              	***************************/
 1010 3258 44320000 		_HEADER MAX,3,"MAX"
 1010      034D4158 
 1011 3260 57F8045B 		LDR	WP,[DSP],#4
 1012 3264 B542     		CMP	WP,TOS
 1013 3266 C8BF     		IT GT 
 1014 3268 2E46     		MOVGT	TOS,WP
 1015 326a 31E4     		_NEXT 
 1016              	
 1017              	/**************************
 1018              	    MIN	 ( w w -- min )
 1019              	 	Leave minimum.
 1020              	**************************/
 1021 326c 5C320000 		_HEADER MIN,3,"MIN"
 1021      034D494E 
 1022 3274 57F8045B 		LDR	WP,[DSP],#4
 1023 3278 B542     		CMP	WP,TOS
 1024 327a B8BF     		IT LT
 1025 327c 2E46     		MOVLT	TOS,WP
 1026 327e 27E4     		_NEXT
 1027              	
 1028              	/***********************
 1029              	    +!	 ( w a -- )
 1030              	 	Add to memory.
 1031              	***********************/
 1032 3280 70320000 		_HEADER PSTOR,2,"+!"
 1032      022B2100 
 1033 3288 57F8045B 		LDR	WP,[DSP],#4
 1034 328c 3268     		LDR	T2,[TOS]
 1035 328e 2A44     		ADD	T2,T2,WP
 1036 3290 3260     		STR	T2,[TOS]
 1037 3292 57F8046B 		_POP
 1038 3296 1BE4     		_NEXT
 1039              	
 1040              	/************************
 1041              	    2!	 ( d a -- )
 1042              	 	Store double number.
 1043              	*************************/
 1044 3298 84320000 		_HEADER DSTOR,2,"2!"
 1044      02322100 
ARM GAS  forth.s 			page 123


 1045 32a0 57F8045B 		LDR	WP,[DSP],#4
 1046 32a4 57F8042B 		LDR	T2,[DSP],#4
 1047 32a8 46F8045B 		STR	WP,[TOS],#4
 1048 32ac 3260     		STR	T2,[TOS]
 1049 32ae 57F8046B 		_POP
 1050 32b2 0DE4     		_NEXT
 1051              	
 1052              	/************************
 1053              	    2@	 ( a -- d )
 1054              	 	Fetch double number.
 1055              	************************/
 1056 32b4 9C320000 		_HEADER DAT,2,"D@"
 1056      02444000 
 1057 32bc 7568     		LDR	WP,[TOS,#4]
 1058 32be 47F8045D 		STR	WP,[DSP,#-4]!
 1059 32c2 3668     		LDR	TOS,[TOS]
 1060 32c4 04E4     		_NEXT
 1061              	
 1062              	/***************************
 1063              	    COUNT	( b -- b+1 c )
 1064              	 	Fetch length of string.
 1065              	****************************/
 1066 32c6 B8320000 		_HEADER COUNT,5,"COUNT"
 1066      05434F55 
 1066      4E54
 1067 32d0 16F8015B 		LDRB	WP,[TOS],#1
 1068 32d4 47F8046D 		_PUSH
 1069 32d8 2E46     		MOV	TOS,WP
 1070 32da FFF7F9BB 		_NEXT
 1071              	
 1072              	/******************************
 1073              	    DNEGATE	( d -- -d )
 1074              	 	Negate double number.
 1075              	**************************/
 1076 32de CA320000 		_HEADER DNEGA,7,"DNEGATE"
 1076      07444E45 
 1076      47415445 
 1076      00BF
 1077 32ec 3D68     		LDR	WP,[DSP]
 1078 32ee A2EB0202 		SUB	T2,T2,T2
 1079 32f2 551B     		SUBS WP,T2,WP
 1080 32f4 62EB0606 		SBC	TOS,T2,TOS
 1081 32f8 3D60     		STR	WP,[DSP]
 1082 32fa FFF7E9BB 		_NEXT
 1083              	
 1084              	/******************************
 1085              	  System and user variables
 1086              	******************************/
 1087              	
 1088              	/*******************************
 1089              	  doVAR	( -- a )
 1090              	  Run time routine for VARIABLE and CREATE.
 1091              	hidden word used by compiler
 1092              	********************************/
 1093              	DOVAR:
 1094 32fe 47F8046D 		_PUSH
 1095 3302 6646     		MOV TOS,IP
ARM GAS  forth.s 			page 124


 1096 3304 0CF1040C 		ADD IP,IP,#4 
 1097 3308 FFF7E5BB 		B UNNEST 
 1098              	
 1099              	/**********************************
 1100              	    doCON	( -- a ) 
 1101              	 	Run time routine for CONSTANT.
 1102              	hidden word used by compiler 
 1103              	***********************************/
 1104              	DOCON:
 1105 330c 47F8046D 		_PUSH
 1106 3310 5CF8046B 		LDR.W TOS,[IP],#4 
 1107 3314 FFF7DFBB 		B UNNEST 
 1108              	
 1109              	/***********************
 1110              	  system variables 
 1111              	***********************/
 1112              	
 1113              	/**************************
 1114              	 SEED ( -- a)
 1115              	 return PRNG seed address 
 1116              	**************************/
 1117 3318 E2320000 		_HEADER SEED,4,"SEED"
 1117      04534545 
 1117      440000BF 
 1118 3324 47F8046D 		_PUSH 
 1119 3328 04F10406 		ADD TOS,UP,#RNDSEED
 1120 332c FFF7D0BB 		_NEXT 	
 1121              	
 1122              	/****************************************
 1123              	  MSEC ( -- a)
 1124              	 return address of milliseconds counter
 1125              	****************************************/
 1126 3330 1C330000 		_HEADER MSEC,4,"MSEC"
 1126      044D5345 
 1126      430000BF 
 1127 333c 47F8046D 	    _PUSH
 1128 3340 04F10806 	    ADD TOS,UP,#TICKS
 1129 3344 FFF7C4BB 	    _NEXT 
 1130              	
 1131              	/*************************
 1132              	 TIMER ( -- a )
 1133              	 count down timer 
 1134              	**********************/
 1135 3348 34330000 		_HEADER TIMER,5,"TIMER"
 1135      0554494D 
 1135      455200BF 
 1136 3354 47F8046D 		 _PUSH 
 1137 3358 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1138 335c FFF7B8BB 	    _NEXT
 1139              	
 1140              	/*****************************
 1141              	    'BOOT	 ( -- a )
 1142              	 	boot up application vector 
 1143              	*****************************/
 1144 3360 4C330000 		_HEADER TBOOT,5,"'BOOT"
 1144      0527424F 
 1144      4F5400BF 
ARM GAS  forth.s 			page 125


 1145 336c 47F8046D 		_PUSH
 1146 3370 04F11006 		ADD	TOS,UP,#BOOT 
 1147 3374 FFF7ACBB 		_NEXT
 1148              		
 1149              	/********************************************	
 1150              	    BASE	( -- a )
 1151              	 	Storage of the radix base for numeric I/O.
 1152              	**********************************************/
 1153 3378 64330000 		_HEADER BASE,4,"BASE"
 1153      04424153 
 1153      450000BF 
 1154 3384 47F8046D 		_PUSH
 1155 3388 04F11C06 		ADD	TOS,UP,#NBASE
 1156 338c FFF7A0BB 		_NEXT
 1157              	
 1158              	/***********************************************
 1159              		BCHAR ( -- flag )
 1160              		indicate if the base character must be output
 1161              		with numeric conversion 
 1162              	************************************************/
 1163 3390 7C330000 			_HEADER BCHR,5,"BCHAR"
 1163      05424348 
 1163      415200BF 
 1164 339c 47F8046D 			_PUSH 
 1165 33a0 04F12006 			ADD TOS,UP,#BCHAR 
 1166 33a4 FFF794BB 			_NEXT 
 1167              	
 1168              	/*****************************************************
 1169              	    temp	 ( -- a )
 1170              	 	A temporary storage location used in parse and find.
 1171              	hidden word for internal use
 1172              	********************************************************/
 1173              	TEMP:
 1174 33a8 47F8046D 		_PUSH
 1175 33ac 04F12406 		ADD	TOS,UP,#TMP
 1176 33b0 FFF78EBB 		_NEXT
 1177              	
 1178              	/*******************************************
 1179              	    SPAN	( -- a )
 1180              	 	Hold character count received by EXPECT.
 1181              	********************************************/
 1182 33b4 94330000 		_HEADER SPAN,4,"SPAN"
 1182      04535041 
 1182      4E0000BF 
 1183 33c0 47F8046D 		_PUSH
 1184 33c4 04F12806 		ADD	TOS,UP,#CSPAN
 1185 33c8 FFF782BB 		_NEXT
 1186              	
 1187              	/***********************************************************
 1188              	    >IN	 ( -- a )
 1189              	 	Hold the character pointer while parsing input stream.
 1190              	***********************************************************/
 1191 33cc B8330000 		_HEADER INN,3,">IN"
 1191      033E494E 
 1192 33d4 47F8046D 		_PUSH
 1193 33d8 04F12C06 		ADD	TOS,UP,#TOIN
 1194 33dc FFF778BB 		_NEXT
ARM GAS  forth.s 			page 126


 1195              	
 1196              	/**************************************
 1197              	    #TIB	( -- a )
 1198              	 	Hold the current count and address 
 1199              		of the terminal input buffer.
 1200              	**************************************/
 1201 33e0 D0330000 		_HEADER NTIB,4,"#TIB"
 1201      04235449 
 1201      420000BF 
 1202 33ec 47F8046D 		_PUSH
 1203 33f0 04F13006 		ADD	TOS,UP,#NTIBB
 1204 33f4 FFF76CBB 		_NEXT
 1205              	
 1206              	/******************************
 1207              	    'EVAL	( -- a )
 1208              	 	Execution vector of EVAL.
 1209              	*******************************/
 1210 33f8 E4330000 		_HEADER TEVAL,5,"'EVAL"
 1210      05274556 
 1210      414C00BF 
 1211 3404 47F8046D 		_PUSH
 1212 3408 04F13806 		ADD	TOS,UP,#EVAL
 1213 340c FFF760BB 		_NEXT
 1214              	
 1215              	/*********************************
 1216              	    HLD	 ( -- a )
 1217              	 	Hold a pointer in building a 
 1218              		numeric output string.
 1219              	*********************************/
 1220 3410 FC330000 		_HEADER HLD,3,"HLD"
 1220      03484C44 
 1221 3418 47F8046D 		_PUSH
 1222 341c 04F13C06 		ADD	TOS,UP,#VHOLD
 1223 3420 FFF756BB 		_NEXT
 1224              	
 1225              	/**********************************
 1226              	    CONTEXT	( -- a )
 1227              	 	A area to specify vocabulary 
 1228              		search order.
 1229              	**********************************/
 1230 3424 14340000 		_HEADER CNTXT,7,"CONTEXT"
 1230      07434F4E 
 1230      54455854 
 1231              	CRRNT:
 1232 3430 47F8046D 		_PUSH
 1233 3434 04F14006 		ADD	TOS,UP,#CTXT
 1234 3438 FFF74ABB 		_NEXT
 1235              	
 1236              	/******************************
 1237              	    CP	( -- a )
 1238              	 	Point to top name in RAM 
 1239              		vocabulary.
 1240              	******************************/
 1241 343c 28340000 		_HEADER CPP,2,"CP"
 1241      02435000 
 1242 3444 47F8046D 		_PUSH
 1243 3448 04F14806 		ADD	TOS,UP,#USER_CTOP
ARM GAS  forth.s 			page 127


 1244 344c FFF740BB 		_NEXT
 1245              	
 1246              	/****************************
 1247              	   FCP ( -- a )
 1248              	  Point ot top of Forth 
 1249              	  system dictionary
 1250              	****************************/
 1251 3450 40340000 		_HEADER FCP,3,"FCP"
 1251      03464350 
 1252 3458 47F8046D 		_PUSH 
 1253 345c 04F14406 		ADD TOS,UP,#FORTH_CTOP 
 1254 3460 FFF736BB 		_NEXT 
 1255              	
 1256              	/***************************
 1257              	    LAST	( -- a )
 1258              	 	Point to the last name 
 1259              		in the name dictionary.
 1260              	***************************/
 1261 3464 54340000 		_HEADER LAST,4,"LAST"
 1261      044C4153 
 1261      540000BF 
 1262 3470 47F8046D 		_PUSH
 1263 3474 04F14C06 		ADD	TOS,UP,#LASTN
 1264 3478 FFF72ABB 		_NEXT
 1265              	
 1266              	
 1267              	/***********************
 1268              		system constants 
 1269              	***********************/
 1270              	
 1271              	/********************************
 1272              		USER-BEGIN ( -- a )
 1273              	  where user area begin in RAM
 1274              	********************************/
 1275 347c 68340000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1275      0A555345 
 1275      522D4245 
 1275      47494E00 
 1276 348c 47F8046D 		_PUSH 
 1277 3490 DFF80460 		ldr TOS,USR_BGN_ADR 
 1278 3494 FFF71CBB 		_NEXT 
 1279              	USR_BGN_ADR:
 1280 3498 12050020 	.word  DTOP 
 1281              	
 1282              	/*********************************
 1283              	  USER_END ( -- a )
 1284              	  where user area end in RAM 
 1285              	******************************/
 1286 349c 80340000 		_HEADER USER_END,8,"USER-END"
 1286      08555345 
 1286      522D454E 
 1286      440000BF 
 1287 34ac 47F8046D 		_PUSH 
 1288 34b0 DFF80460 		ldr TOS,USER_END_ADR 
 1289 34b4 FFF70CBB 		_NEXT 
 1290              	USER_END_ADR:
 1291 34b8 7C800120 		.word DEND 
ARM GAS  forth.s 			page 128


 1292              	
 1293              	
 1294              	/* *********************
 1295              	  Common functions
 1296              	***********************/
 1297              	
 1298              	/********************************
 1299              	    WITHIN	( u ul uh -- t )
 1300              	 	Return true if u is within 
 1301              		the range of ul and uh.
 1302              	********************************/
 1303 34bc A0340000 		_HEADER WITHI,6,"WITHIN"
 1303      06574954 
 1303      48494E00 
 1304 34c8 504700BF 		_NEST
 1305 34cc A12E0000 		_ADR	OVER
 1306 34d0 512F0000 		_ADR	SUBB
 1307 34d4 F92D0000 		_ADR	TOR
 1308 34d8 512F0000 		_ADR	SUBB
 1309 34dc B52D0000 		_ADR	RFROM
 1310 34e0 01320000 		_ADR	ULESS
 1311 34e4 D72A0000 		_UNNEST
 1312              	
 1313              	//  Divide
 1314              	
 1315              	/*************************************
 1316              	    UM/MOD	( udl udh u -- ur uq )
 1317              	 	Unsigned divide of a double by a 
 1318              		single. Return mod and quotient.
 1319              	**************************************/
 1320 34e8 C0340000 		_HEADER UMMOD,6,"UM/MOD"
 1320      06554D2F 
 1320      4D4F4400 
 1321 34f4 4FF00103 		MOV	T3,#1
 1322 34f8 57F8045B 		LDR	WP,[DSP],#4
 1323 34fc 3A68     		LDR	T2,[DSP]
 1324              	UMMOD0:
 1325 34fe 9218     		ADDS	T2,T2,T2
 1326 3500 6D41     		ADCS	WP,WP,WP
 1327 3502 04D3     		BCC	UMMOD1
 1328 3504 A5EB0605 		SUB	WP,WP,TOS
 1329 3508 02F10102 		ADD	T2,T2,#1
 1330 350c 04E0     		B UMMOD2
 1331              	UMMOD1:
 1332 350e AD1B     		SUBS	WP,WP,TOS 
 1333 3510 28BF     		IT CS 
 1334 3512 0132     		ADDCS	T2,T2,#1
 1335 3514 00D2     		BCS	UMMOD2
 1336 3516 3544     		ADD	WP,WP,TOS
 1337              	UMMOD2:
 1338 3518 DB18     		ADDS	T3,T3,T3
 1339 351a F0D3     		BCC	UMMOD0
 1340 351c 1646     		MOV	TOS,T2
 1341 351e 3D60     		STR	WP,[DSP]
 1342 3520 FFF7D6BA 		_NEXT
 1343              	
 1344              	/****************************
ARM GAS  forth.s 			page 129


 1345              	    M/MOD	( d n -- r q )
 1346              	 	Signed floored divide 
 1347              		of double by single. 
 1348              		Return mod and quotient.
 1349              	****************************/
 1350 3524 EC340000 		_HEADER MSMOD,5,"M/MOD"
 1350      054D2F4D 
 1350      4F4400BF 
 1351 3530 504700BF 		_NEST
 1352 3534 7D2E0000 		_ADR	DUPP
 1353 3538 B12E0000 		_ADR	ZLESS
 1354 353c 7D2E0000 		_ADR	DUPP
 1355 3540 F92D0000 		_ADR	TOR
 1356 3544 432D0000 		_QBRAN MMOD1
 1356      5C350000 
 1357 354c 61310000 		_ADR	NEGAT
 1358 3550 F92D0000 		_ADR	TOR
 1359 3554 ED320000 		_ADR	DNEGA
 1360 3558 B52D0000 		_ADR	RFROM
 1361              	MMOD1:
 1362 355c F92D0000 		_ADR	TOR
 1363 3560 7D2E0000 		_ADR	DUPP
 1364 3564 B12E0000 		_ADR	ZLESS
 1365 3568 432D0000 		_QBRAN MMOD2
 1365      78350000 
 1366 3570 E52D0000 		_ADR	RAT
 1367 3574 412F0000 		_ADR	PLUS
 1368              	MMOD2:
 1369 3578 B52D0000 		_ADR	RFROM
 1370 357c F5340000 		_ADR	UMMOD
 1371 3580 B52D0000 		_ADR	RFROM
 1372 3584 432D0000 		_QBRAN	MMOD3
 1372      98350000 
 1373 358c 8D2E0000 		_ADR	SWAP
 1374 3590 61310000 		_ADR	NEGAT
 1375 3594 8D2E0000 		_ADR	SWAP
 1376              	MMOD3:   
 1377 3598 D72A0000 		_UNNEST
 1378              	
 1379              	/****************************
 1380              		S>D ( n -- d )
 1381              		convert single to double 
 1382              	*****************************/
 1383 359c 28350000 		_HEADER STOD,3,"S>D"
 1383      03533E44 
 1384 35a4 47F8046D 		_PUSH 
 1385 35a8 4FEAE676 		ASR TOS,#31
 1386 35ac FFF790BA 		_NEXT 
 1387              	
 1388              	/****************************
 1389              		D2* ( d -- d<<1 )
 1390              		double * 2 
 1391              	***************************/
 1392 35b0 A0350000 		_HEADER D2STAR,3,"D2*"
 1392      0344322A 
 1393 35b8 3868     		ldr T0,[DSP]
 1394 35ba 4000     		lsls T0,#1
ARM GAS  forth.s 			page 130


 1395 35bc 3860     		str T0,[DSP]
 1396 35be 4FEA4606 		lsl TOS,#1
 1397 35c2 46F10006 		adc TOS,#0
 1398 35c6 FFF783BA 		_NEXT 
 1399              	
 1400              	/****************************
 1401              		D2/  ( d -- d>>1 )
 1402              		double signed divide by 2 
 1403              	*****************************/
 1404 35ca B4350000 		_HEADER D2SL,3,"D2/"
 1404      0344322F 
 1404      00BF
 1405 35d4 3868     		ldr T0,[DSP]
 1406 35d6 7610     		asrs TOS,#1
 1407 35d8 4FEA3000 		rrx T0,T0 
 1408 35dc 3860     		str T0,[DSP]
 1409 35de FFF777BA 		_NEXT 
 1410              	
 1411              	/***************************
 1412              		D/MOD  ( d+ n+ - r+ qd+ )
 1413              		unsigned double division
 1414              		and modulo 
 1415              		output:
 1416              			qd+ = d+ / n+
 1417              			r+ = qd+ - (d+ * n+ )
 1418              	***************************/
 1419 35e2 CE350000 		_HEADER DSLMOD,5,"D/MOD"
 1419      05442F4D 
 1419      4F44
 1420 35ec 3D68     		ldr WP,[DSP]  // d+ high 
 1421 35ee 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1422 35f0 4FF02002 		mov T2,#32 // shift counter  
 1423 35f4 81EA0101 		eor T1,T1 // quotient T0:T1  
 1424 35f8 25B9     		cbnz WP,1f    
 1425 35fa 82EA0202 		eor T2,T2 // nos shifting required 
 1426 35fe 0546     		mov WP,T0 
 1427 3600 80EA0000 		eor T0,T0 
 1428 3604 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1429 3606 15F0004F 	    tst WP,#(1<<31) 
 1430 360a 06D1     		bne 2f
 1431 360c 4918     		adds T1,T1,T1 
 1432 360e 4041     		adcs T0,T0,T0 
 1433 3610 45EB0505 		adc WP,WP,WP 
 1434 3614 A2F10102 		sub T2,#1 
 1435 3618 F4E7     		b 1b 
 1436 361a B5FBF6F3 	2:  udiv T3,WP,TOS
 1437 361e 41EA0301 		orr T1,T3   // append partial quotient 
 1438 3622 06FB03F3 		mul T3,TOS
 1439 3626 A5EB0305 		sub WP,T3 //remainder 
 1440 362a 02B1     		cbz T2,8f 
 1441 362c EAE7     		b 1b 
 1442 362e 7D60     	8:	str WP,[DSP,#4] // remainder 
 1443 3630 3960     		str T1,[DSP]  // q lo 
 1444 3632 0646     		mov TOS,T0  // q hi 		
 1445 3634 FFF74CBA 		_NEXT 
 1446              	
 1447              	
ARM GAS  forth.s 			page 131


 1448              	/****************************
 1449              		D/  ( ud u -- udq )
 1450              		divide unsigned double 
 1451              		by unsigned single 
 1452              		return double quotient
 1453              		rounded to nearest integer 
 1454              	****************************/
 1455 3638 E6350000 		_HEADER DSLASH,2,"D/"
 1455      02442F00 
 1456 3640 504700BF 		_NEST 
 1457 3644 7D2E0000 		_ADR DUPP 
 1458 3648 032D0000 		_DOLIT 1 
 1458      01000000 
 1459 3650 192F0000 		_ADR RSHIFT 
 1460 3654 F92D0000 		_ADR TOR 
 1461 3658 ED350000 		_ADR DSLMOD 
 1462 365c 65300000 		_ADR ROT 
 1463 3660 B52D0000 		_ADR RFROM 
 1464 3664 49320000 		_ADR GREAT 
 1465 3668 432D0000 		_QBRAN 9f
 1465      80360000 
 1466 3670 032D0000 		_DOLIT 1 
 1466      01000000 
 1467 3678 A5350000 		_ADR STOD 
 1468 367c C9300000 		_ADR DPLUS 
 1469 3680 D72A0000 	9:	_UNNEST 
 1470              	
 1471              	
 1472              	/****************************
 1473              		D* ( d s -- d )
 1474              	    multiply a double 
 1475              		by a single 
 1476              	****************************/
 1477 3684 3C360000 		_HEADER DSTAR,2,"D*"
 1477      02442A00 
 1478              	/*
 1479              		_NEST 
 1480              		_ADR NROT 
 1481              		_ADR DUPP 
 1482              		_ADR TOR 
 1483              		_ADR DABS
 1484              		_ADR SWAP  
 1485              		_ADR ROT   
 1486              		_ADR DUPP
 1487              		_ADR TOR
 1488              		_ADR MSTAR
 1489              		_ADR ROT
 1490              		_ADR RFROM 
 1491              		_ADR STAR 
 1492              		_ADR PLUS
 1493              		_ADR RFROM 
 1494              		_ADR ZLESS 
 1495              		_QBRAN 9f
 1496              		_ADR DNEGA   
 1497              	9:	_UNNEST 
 1498              	*/
 1499 368c 57F8040B 		ldr T0,[DSP],#4
ARM GAS  forth.s 			page 132


 1500 3690 3968     		ldr T1,[DSP]
 1501 3692 3860     		str T0,[DSP] 
 1502 3694 83EA0303 		eor T3,T3 
 1503 3698 10F0004F 		tst T0,#(1<<31)
 1504 369c 02D0     		beq 1f 
 1505              		// DNEGATE 
 1506 369e 591A     		subs T1,T3,T1  
 1507 36a0 63EB0000 		sbc T0,T3,T0 
 1508 36a4 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1509 36a8 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1510 36ac 0E44     		add TOS,T1  // TOS:T2 product  
 1511 36ae 3868     		ldr r0,[DSP]
 1512 36b0 10F0004F 		tst T0,#(1<<31)
 1513 36b4 02D0     		beq 2f 
 1514              		// DNEGATE product 
 1515 36b6 9A1A     		subs T2,T3,T2  
 1516 36b8 63EB0606 		sbc TOS,T3,TOS 
 1517 36bc 3A60     	2:  str T2,[DSP]
 1518 36be FFF707BA 		_NEXT 
 1519              	
 1520              	
 1521              	/****************************
 1522              	   /MOD	( n n -- r q )
 1523              		Signed divide. Return
 1524              		mod and quotient.
 1525              	****************************/
 1526 36c2 88360000 		_HEADER SLMOD,4,"/MOD"
 1526      042F4D4F 
 1526      4400
 1527 36cc 504700BF 		_NEST
 1528 36d0 A12E0000 		_ADR	OVER
 1529 36d4 B12E0000 		_ADR	ZLESS
 1530 36d8 8D2E0000 		_ADR	SWAP
 1531 36dc 31350000 		_ADR	MSMOD
 1532 36e0 D72A0000 		_UNNEST
 1533              	
 1534              	/**************************
 1535              	    MOD	 ( n n -- r )
 1536              	 	Signed divide. Return
 1537              		mod only.
 1538              	**************************/
 1539 36e4 C6360000 		_HEADER MODD,3,"MOD"
 1539      034D4F44 
 1540 36ec 504700BF 		_NEST
 1541 36f0 CD360000 		_ADR	SLMOD
 1542 36f4 6D2E0000 		_ADR	DROP
 1543 36f8 D72A0000 		_UNNEST
 1544              	
 1545              	/*************************
 1546              	    /	   ( n n -- q )
 1547              	 	Signed divide. Return
 1548              		quotient only.
 1549              	**************************/
 1550 36fc E8360000 		_HEADER SLASH,1,"/"
 1550      012F00BF 
 1551 3704 504700BF 		_NEST
 1552 3708 CD360000 		_ADR	SLMOD
ARM GAS  forth.s 			page 133


 1553 370c 8D2E0000 		_ADR	SWAP
 1554 3710 6D2E0000 		_ADR	DROP
 1555 3714 D72A0000 		_UNNEST
 1556              	
 1557              	//******************************
 1558              	//  */MOD	( n1 n2 n3 -- r q )
 1559              	/* 	Multiply n1 and n2, then 
 1560              		divide by n3. Return 
 1561              		mod and quotient.
 1562              	******************************/
 1563 3718 00370000 		_HEADER SSMOD,5,"*/MOD"
 1563      052A2F4D 
 1563      4F4400BF 
 1564 3724 504700BF 		_NEST
 1565 3728 F92D0000 		_ADR	TOR
 1566 372c 892F0000 		_ADR	MSTAR
 1567 3730 B52D0000 		_ADR	RFROM
 1568 3734 31350000 		_ADR	MSMOD
 1569 3738 D72A0000 		_UNNEST
 1570              	
 1571              	//*******************************
 1572              	//  */ ( n1 n2 n3 -- q )
 1573              	/* 	Multiply n1 by n2, then 
 1574              		divide by n3. Return quotient
 1575              		only.
 1576              	*******************************/
 1577 373c 1C370000 		_HEADER STASL,2,"*/"
 1577      022A2F00 
 1578 3744 504700BF 		_NEST
 1579 3748 25370000 		_ADR	SSMOD
 1580 374c 8D2E0000 		_ADR	SWAP
 1581 3750 6D2E0000 		_ADR	DROP
 1582 3754 D72A0000 		_UNNEST
 1583              	
 1584              	/*******************
 1585              	  Miscellaneous
 1586              	*******************/
 1587              	
 1588              	/*************************
 1589              	    ALIGNED	( b -- a )
 1590              	 	Align address to the 
 1591              		cell boundary.
 1592              	**************************/
 1593 3758 40370000 		_HEADER ALGND,7,"ALIGNED"
 1593      07414C49 
 1593      474E4544 
 1594 3764 06F10306 		ADD	TOS,TOS,#3
 1595 3768 6FF00305 		MVN	WP,#3
 1596 376c 06EA0506 		AND	TOS,TOS,WP
 1597 3770 FFF7AEB9 		_NEXT
 1598              	
 1599              	/****************************
 1600              	    >CHAR	( c -- c )
 1601              	 	Filter non-printing 
 1602              		characters.
 1603              	****************************/
 1604 3774 5C370000 		_HEADER TCHAR,5,">CHAR"
ARM GAS  forth.s 			page 134


 1604      053E4348 
 1604      415200BF 
 1605 3780 504700BF 		_NEST
 1606 3784 032D0000 		_DOLIT  0x7F
 1606      7F000000 
 1607 378c C12E0000 		_ADR	ANDD
 1608 3790 7D2E0000 		_ADR	DUPP	// mask msb
 1609 3794 FD2F0000 		_ADR	BLANK
 1610 3798 032D0000 		_DOLIT 	127
 1610      7F000000 
 1611 37a0 C9340000 		_ADR	WITHI	// check for printable
 1612 37a4 4D310000 		_ADR	INVER
 1613 37a8 432D0000 		_QBRAN	TCHA1
 1613      BC370000 
 1614 37b0 6D2E0000 		_ADR	DROP
 1615 37b4 032D0000 		_DOLIT 	'_'	// replace non-printables
 1615      5F000000 
 1616              	TCHA1:
 1617 37bc D72A0000 		  _UNNEST
 1618              	
 1619              	/************************
 1620              	    DEPTH	( -- n )
 1621              	 	Return the depth of
 1622              		the data stack.
 1623              	***********************/
 1624 37c0 78370000 		_HEADER DEPTH,5,"DEPTH"
 1624      05444550 
 1624      544800BF 
 1625 37cc 4FF68062 		_MOV32 T2,SPP 
 1625      C2F20102 
 1626 37d4 A2EB0702 		SUB	T2,T2,DSP
 1627 37d8 47F8046D 		_PUSH
 1628 37dc 4FEAA206 		ASR	TOS,T2,#2
 1629 37e0 FFF776B9 		_NEXT
 1630              	
 1631              	/*****************************
 1632              	    PICK	( ... +n -- ... w )
 1633              	 	Copy the nth stack item 
 1634              		to tos.
 1635              	******************************/
 1636 37e4 C4370000 		_HEADER PICK,4,"PICK"
 1636      04504943 
 1636      4B0000BF 
 1637 37f0 504700BF 		_NEST
 1638 37f4 9D2F0000 		_ADR	ONEP
 1639 37f8 11300000 		_ADR	CELLS
 1640 37fc 492E0000 		_ADR	SPAT
 1641 3800 412F0000 		_ADR	PLUS
 1642 3804 892D0000 		_ADR	AT
 1643 3808 D72A0000 		_UNNEST
 1644              	
 1645              	/*********************
 1646              	  Memory access
 1647              	*********************/
 1648              	
 1649              	/*************************
 1650              	    HERE	( -- a )
ARM GAS  forth.s 			page 135


 1651              	 	Return the top of
 1652              		the code dictionary.
 1653              	*************************/
 1654 380c E8370000 		_HEADER HERE,4,"HERE"
 1654      04484552 
 1654      450000BF 
 1655 3818 504700BF 		_NEST
 1656 381c 45340000 		_ADR	CPP
 1657 3820 892D0000 		_ADR	AT
 1658 3824 D72A0000 		_UNNEST
 1659              	
 1660              	/***************************	
 1661              	    PAD	 ( -- a )
 1662              	 	Return the address of 
 1663              		a temporary buffer.
 1664              	***************************/
 1665 3828 10380000 		_HEADER PAD,3,"PAD"
 1665      03504144 
 1666 3830 504700BF 		_NEST
 1667 3834 19380000 		_ADR	HERE
 1668 3838 032D0000 		_DOLIT 80
 1668      50000000 
 1669 3840 412F0000 		_ADR PLUS 
 1670 3844 D72A0000 		_UNNEST
 1671              	
 1672              	/***********************
 1673              	    TIB	 ( -- a )
 1674              	 	Return the address 
 1675              		of the terminal 
 1676              		input buffer.
 1677              	************************/
 1678 3848 2C380000 		_HEADER TIB,3,"TIB"
 1678      03544942 
 1679 3850 47F8046D 		_PUSH
 1680 3854 666B     		ldr TOS,[UP,#TIBUF]
 1681 3856 FFF73BB9 		_NEXT
 1682              	
 1683              	/*************************
 1684              	    @EXECUTE	( a -- )
 1685              	 	Execute vector stored
 1686              		in address a.
 1687              	*************************/
 1688 385a 4C380000 		_HEADER ATEXE,8,"@EXECUTE"
 1688      08404558 
 1688      45435554 
 1688      4500
 1689 3868 3500     		MOVS	WP,TOS
 1690 386a 57F8046B 		_POP
 1691 386e 2D68     		LDR	WP,[WP]
 1692 3870 45F00105 		ORR	WP,WP,#1
 1693 3874 18BF     	    IT NE 
 1694 3876 2847     		BXNE	WP
 1695 3878 FFF72AB9 		_NEXT
 1696              	
 1697              	/*******************************
 1698              	    CMOVE	( b1 b2 u -- )
 1699              	 	Copy u bytes from b1 to b2.
ARM GAS  forth.s 			page 136


 1700              	********************************/
 1701 387c 5E380000 		_HEADER CMOVE,5,"CMOVE"
 1701      05434D4F 
 1701      564500BF 
 1702 3888 57F8042B 		LDR	T2,[DSP],#4
 1703 388c 57F8043B 		LDR	T3,[DSP],#4
 1704 3890 03E0     		B CMOV1
 1705              	CMOV0:
 1706 3892 13F8015B 		LDRB	WP,[T3],#1
 1707 3896 02F8015B 		STRB	WP,[T2],#1
 1708              	CMOV1:
 1709 389a 3600     		MOVS	TOS,TOS
 1710 389c 02D0     		BEQ	CMOV2
 1711 389e A6F10106 		SUB	TOS,TOS,#1
 1712 38a2 F6E7     		B CMOV0
 1713              	CMOV2:
 1714 38a4 57F8046B 		_POP
 1715 38a8 FFF712B9 		_NEXT
 1716              	
 1717              	/***************************
 1718              	    MOVE	( a1 a2 u -- )
 1719              	 	Copy u words from a1 to a2.
 1720              	*******************************/
 1721 38ac 80380000 		_HEADER MOVE,4,"MOVE"
 1721      044D4F56 
 1721      450000BF 
 1722 38b8 4FF00400 		MOV T0,#4 
 1723 38bc 06F10306 		ADD TOS,#3 
 1724 38c0 26F00306 		BIC TOS,#3
 1725 38c4 57F8041B 		LDR	T1,[DSP],#4 // dest
 1726 38c8 57F8042B 		LDR	T2,[DSP],#4 // src 
 1727 38cc 8A42     		CMP T2,T1 
 1728 38ce 08D5     		BPL MOVE1
 1729 38d0 6FF00300 		MOV T0,#-4 
 1730 38d4 3144     		ADD T1,TOS
 1731 38d6 3244     		ADD T2,TOS 
 1732 38d8 01E0     		B MOVE3
 1733              	MOVE0:
 1734 38da 1568     		LDR	WP,[T2]
 1735 38dc 0D60     		STR	WP,[T1]
 1736              	MOVE3: 
 1737 38de 0144     		ADD T1,T0 
 1738 38e0 0244     		ADD T2,T0 
 1739              	MOVE1:
 1740 38e2 3600     		MOVS TOS,TOS
 1741 38e4 02D0     		BEQ	MOVE2
 1742 38e6 A6F10406 		SUB	TOS,TOS,#4
 1743 38ea F6E7     		B MOVE0
 1744              	MOVE2:
 1745 38ec 57F8046B 		_POP
 1746 38f0 FFF7EEB8 		_NEXT
 1747              	
 1748              	/**************************
 1749              	    FILL	( b u c -- )
 1750              	 	Fill u bytes of character
 1751              		c to area beginning at b.
 1752              	******************************/
ARM GAS  forth.s 			page 137


 1753 38f4 B0380000 		_HEADER FILL,4,"FILL"
 1753      0446494C 
 1753      4C0000BF 
 1754 3900 03CF     		LDMFD DSP!,{T0,T1} 
 1755 3902 0000     		MOVS T0,T0 
 1756 3904 03D0     		BEQ FILL2
 1757              	FILL1:
 1758 3906 01F8016B 		STRB	TOS,[T1],#1
 1759 390a 0138     		SUBS	T0,T0,#1
 1760 390c FBD1     		BNE FILL1
 1761              	FILL2:
 1762 390e 57F8046B 		_POP
 1763 3912 FFF7DDB8 		_NEXT
 1764              	
 1765              	/*****************************
 1766              	    PACK$	( b u a -- a )
 1767              	 	Build a counted word with
 1768              		u characters from b. 
 1769              		Null fill.
 1770              	*****************************/
 1771 3916 F8380000 		_HEADER PACKS,5,"PACK$"
 1771      05504143 
 1771      4B24
 1772 3920 504700BF 		_NEST
 1773 3924 65370000 		_ADR	ALGND
 1774 3928 7D2E0000 		_ADR	DUPP
 1775 392c F92D0000 		_ADR	TOR		// strings only on cell boundary
 1776 3930 A12E0000 		_ADR	OVER
 1777 3934 412F0000 		_ADR	PLUS
 1778 3938 9D2F0000 		_ADR	ONEP 
 1779 393c 032D0000 		_DOLIT 	0xFFFFFFFC
 1779      FCFFFFFF 
 1780 3944 C12E0000 		_ADR	ANDD			// count mod cell
 1781 3948 032D0000 		_DOLIT 	0
 1781      00000000 
 1782 3950 8D2E0000 		_ADR	SWAP
 1783 3954 752D0000 		_ADR	STORE			// null fill cell
 1784 3958 E52D0000 		_ADR	RAT
 1785 395c B5300000 		_ADR	DDUP
 1786 3960 952D0000 		_ADR	CSTOR
 1787 3964 9D2F0000 		_ADR	ONEP			// save count
 1788 3968 8D2E0000 		_ADR	SWAP
 1789 396c 89380000 		_ADR	CMOVE
 1790 3970 B52D0000 		_ADR	RFROM
 1791 3974 D72A0000 		_UNNEST   			// move string
 1792              	
 1793              	/***********************************
 1794              	  Numeric output, single precision
 1795              	***********************************/
 1796              	
 1797              	/**************************
 1798              	    DIGIT	( u -- c )
 1799              	 	Convert digit u to 
 1800              		a character.
 1801              	***************************/
 1802 3978 1A390000 		_HEADER DIGIT,5,"DIGIT"
 1802      05444947 
ARM GAS  forth.s 			page 138


 1802      495400BF 
 1803 3984 504700BF 		_NEST
 1804 3988 032D0000 		_DOLIT 9
 1804      09000000 
 1805 3990 A12E0000 		_ADR	OVER
 1806 3994 19320000 		_ADR	LESS
 1807 3998 032D0000 		_DOLIT	7
 1807      07000000 
 1808 39a0 C12E0000 		_ADR	ANDD
 1809 39a4 412F0000 		_ADR	PLUS
 1810 39a8 032D0000 		_DOLIT	'0'
 1810      30000000 
 1811 39b0 412F0000 		_ADR	PLUS 
 1812 39b4 D72A0000 		_UNNEST
 1813              	
 1814              	/*********************************
 1815              	    EXTRACT	( ud base -- ud c )
 1816              	 	Extract the least significant
 1817              		digit from positive double.
 1818              	**********************************/
 1819 39b8 7C390000 		_HEADER EXTRC,7,"EXTRACT"
 1819      07455854 
 1819      52414354 
 1820 39c4 504700BF 		_NEST
 1821 39c8 ED350000 		_ADR	DSLMOD
 1822 39cc 65300000 		_ADR	ROT
 1823 39d0 85390000 		_ADR	DIGIT
 1824 39d4 D72A0000 		_UNNEST
 1825              	
 1826              	/***************************
 1827              	    <#	  ( -- )
 1828              	 	Initiate the numeric
 1829              		output process.
 1830              	****************************/
 1831 39d8 BC390000 		_HEADER BDIGS,2,"<#"
 1831      023C2300 
 1832 39e0 504700BF 		_NEST
 1833 39e4 31380000 		_ADR	PAD
 1834 39e8 19340000 		_ADR	HLD
 1835 39ec 752D0000 		_ADR	STORE
 1836 39f0 D72A0000 		_UNNEST
 1837              	
 1838              	/*********************************
 1839              	    HOLD	( c -- )
 1840              	 	Insert a character into the 
 1841              		numeric output string.
 1842              	**********************************/
 1843 39f4 DC390000 		_HEADER HOLD,4,"HOLD"
 1843      04484F4C 
 1843      440000BF 
 1844 3a00 504700BF 		_NEST
 1845 3a04 19340000 		_ADR	HLD
 1846 3a08 892D0000 		_ADR	AT
 1847 3a0c AD2F0000 		_ADR	ONEM
 1848 3a10 7D2E0000 		_ADR	DUPP
 1849 3a14 19340000 		_ADR	HLD
 1850 3a18 752D0000 		_ADR	STORE
ARM GAS  forth.s 			page 139


 1851 3a1c 952D0000 		_ADR	CSTOR
 1852 3a20 D72A0000 		_UNNEST
 1853              	
 1854              	/***********************
 1855              	    #	   ( ud -- ud )
 1856              	 	Extract one digit 
 1857              		from ud and append 
 1858              		the digit to output 
 1859              		string.
 1860              	*************************/
 1861 3a24 F8390000 		_HEADER DIG,1,"#"
 1861      012300BF 
 1862 3a2c 504700BF 		_NEST
 1863 3a30 85330000 		_ADR	BASE
 1864 3a34 892D0000 		_ADR	AT
 1865 3a38 C5390000 		_ADR	EXTRC
 1866 3a3c 013A0000 		_ADR	HOLD
 1867 3a40 D72A0000 		_UNNEST
 1868              	
 1869              	/***************************
 1870              	    #S	  ( ud -- 0 )
 1871              	 	Convert ud until all 
 1872              		digits are added to 
 1873              		the output string.
 1874              	***************************/
 1875 3a44 283A0000 		_HEADER DIGS,2,"#S"
 1875      02235300 
 1876 3a4c 504700BF 		_NEST
 1877              	DIGS1:
 1878 3a50 2D3A0000 	    _ADR	DIG
 1879 3a54 B5300000 		_ADR	DDUP
 1880 3a58 D52E0000 		_ADR    ORR 
 1881 3a5c 432D0000 		_QBRAN 	DIGS2
 1881      6C3A0000 
 1882 3a64 572D0000 		_BRAN	DIGS1
 1882      503A0000 
 1883              	DIGS2:
 1884 3a6c 6D2E0000 		 _ADR DROP 
 1885 3a70 D72A0000 		 _UNNEST
 1886              	
 1887              	/*********************
 1888              	    SIGN	( n -- )
 1889              	 	Add a minus sign
 1890              		to the numeric
 1891              		output string.
 1892              	*********************/
 1893 3a74 483A0000 		_HEADER SIGN,4,"SIGN"
 1893      04534947 
 1893      4E0000BF 
 1894 3a80 504700BF 		_NEST
 1895 3a84 B12E0000 		_ADR	ZLESS
 1896 3a88 432D0000 		_QBRAN	SIGN1
 1896      9C3A0000 
 1897 3a90 032D0000 		_DOLIT '-'
 1897      2D000000 
 1898 3a98 013A0000 		_ADR	HOLD
 1899              	SIGN1:
ARM GAS  forth.s 			page 140


 1900 3a9c D72A0000 		  _UNNEST
 1901              	
 1902              	/*************************
 1903              	    #>  ( w -- b u )
 1904              	 	Prepare the output 
 1905              		word to be TYPE'd.
 1906              	************************/
 1907 3aa0 783A0000 		_HEADER EDIGS,2,"#>"
 1907      02233E00 
 1908 3aa8 504700BF 		_NEST
 1909 3aac 6D2E0000 		_ADR	DROP
 1910 3ab0 19340000 		_ADR	HLD
 1911 3ab4 892D0000 		_ADR	AT
 1912 3ab8 31380000 		_ADR	PAD
 1913 3abc A12E0000 		_ADR	OVER
 1914 3ac0 512F0000 		_ADR	SUBB
 1915 3ac4 D72A0000 		_UNNEST
 1916              	
 1917              	/**************************
 1918              	    str	 ( n -- b u )
 1919              	 	Convert a signed 
 1920              		integer to a numeric 
 1921              		string.
 1922              	hidden word used by compiler
 1923              	***************************/
 1924              	STRR:
 1925 3ac8 504700BF 		_NEST
 1926 3acc A5350000 		_ADR 	STOD 
 1927 3ad0 7D2E0000 		_ADR	DUPP
 1928 3ad4 F92D0000 		_ADR	TOR
 1929 3ad8 E9300000 		_ADR	DABS
 1930 3adc E1390000 		_ADR	BDIGS
 1931 3ae0 4D3A0000 		_ADR	DIGS
 1932 3ae4 B52D0000 		_ADR	RFROM
 1933 3ae8 813A0000 		_ADR	SIGN
 1934 3aec A93A0000 		_ADR	EDIGS
 1935 3af0 D72A0000 		_UNNEST
 1936              	
 1937              	/*************************
 1938              	    HEX	 ( -- )
 1939              	 	Use radix 16 as 
 1940              		base for numeric 
 1941              		conversions.
 1942              	*************************/
 1943 3af4 A43A0000 		_HEADER HEX,3,"HEX"
 1943      03484558 
 1944 3afc 504700BF 		_NEST
 1945 3b00 032D0000 		_DOLIT 16
 1945      10000000 
 1946 3b08 85330000 		_ADR	BASE
 1947 3b0c 752D0000 		_ADR	STORE
 1948 3b10 D72A0000 		_UNNEST
 1949              	
 1950              	/**************************
 1951              		BIN ( -- )
 1952              		Use radix 2 as 
 1953              		base for numeric 
ARM GAS  forth.s 			page 141


 1954              		conversion 
 1955              	**************************/
 1956 3b14 F83A0000 		_HEADER BIN,3,"BIN"
 1956      0342494E 
 1957 3b1c 504700BF 		_NEST 
 1958 3b20 032D0000 		_DOLIT 2 
 1958      02000000 
 1959 3b28 85330000 		_ADR BASE 
 1960 3b2c 752D0000 		_ADR STORE
 1961 3b30 D72A0000 		_UNNEST 
 1962              	
 1963              	/************************
 1964              	    DECIMAL	( -- )
 1965              	 	Use radix 10 as base
 1966              		for numeric conversions.
 1967              	*************************/
 1968 3b34 183B0000 		_HEADER DECIM,7,"DECIMAL"
 1968      07444543 
 1968      494D414C 
 1969 3b40 504700BF 		_NEST
 1970 3b44 032D0000 		_DOLIT 10
 1970      0A000000 
 1971 3b4c 85330000 		_ADR	BASE
 1972 3b50 752D0000 		_ADR	STORE
 1973 3b54 D72A0000 		_UNNEST
 1974              	
 1975              	/************************************
 1976              	  Numeric input, single precision
 1977              	***********************************/
 1978              	
 1979              	/***********************************
 1980              	    DIGIT?	( c base -- u t )
 1981              	 	Convert a character to its 
 1982              		numeric value. A flag 
 1983              		indicates success.
 1984              	**********************************/
 1985 3b58 383B0000 		_HEADER DIGTQ,6,"DIGIT?"
 1985      06444947 
 1985      49543F00 
 1986 3b64 504700BF 		_NEST
 1987 3b68 F92D0000 		_ADR	TOR
 1988 3b6c 032D0000 		_DOLIT 	'0'
 1988      30000000 
 1989 3b74 512F0000 		_ADR	SUBB
 1990 3b78 032D0000 		_DOLIT 9
 1990      09000000 
 1991 3b80 A12E0000 		_ADR	OVER
 1992 3b84 19320000 		_ADR	LESS
 1993 3b88 432D0000 		_QBRAN	DGTQ1
 1993      B03B0000 
 1994 3b90 032D0000 		_DOLIT 7
 1994      07000000 
 1995 3b98 512F0000 		_ADR	SUBB
 1996 3b9c 7D2E0000 		_ADR	DUPP
 1997 3ba0 032D0000 		_DOLIT	10
 1997      0A000000 
 1998 3ba8 19320000 		_ADR	LESS
ARM GAS  forth.s 			page 142


 1999 3bac D52E0000 		_ADR	ORR
 2000              	DGTQ1:
 2001 3bb0 7D2E0000 		_ADR	DUPP
 2002 3bb4 B52D0000 		_ADR	RFROM
 2003 3bb8 01320000 		_ADR	ULESS
 2004 3bbc D72A0000 		_UNNEST
 2005              	
 2006              	/***********************************
 2007              	 parse digits of positive integer 
 2008              	  d digits count 
 2009              	  n parsed integer
 2010              	  a+ updated pointer  
 2011              	************************************/
 2012              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 2013 3bc0 504700BF 	    _NEST
 2014 3bc4 85330000 	    _ADR BASE 
 2015 3bc8 892D0000 	    _ADR AT 
 2016 3bcc F92D0000 	    _ADR TOR
 2017 3bd0 D1320000 	1:  _ADR COUNT 
 2018 3bd4 E52D0000 	    _ADR RAT 
 2019 3bd8 653B0000 	    _ADR DIGTQ // d n a c f 
 2020 3bdc 432D0000 	    _QBRAN 4f
 2020      4C3C0000 
 2021 3be4 65300000 	    _ADR ROT 
 2022 3be8 E52D0000 		_ADR RAT 
 2023 3bec 752F0000 	    _ADR UMSTA 
 2024 3bf0 432D0000 		_QBRAN 2f // overflow control
 2024      003C0000 
 2025 3bf8 572D0000 		_BRAN 3f 
 2025      343C0000 
 2026 3c00 7D2E0000 	2:	_ADR DUPP 
 2027 3c04 B12E0000 		_ADR ZLESS // if 0< is overflow 
 2028 3c08 432D0000 		_QBRAN 2f 
 2028      183C0000 
 2029 3c10 572D0000 		_BRAN 3f 
 2029      343C0000 
 2030 3c18 412F0000 	2:  _ADR PLUS // d a n 
 2031 3c1c 8D2E0000 	    _ADR SWAP // d n a  
 2032 3c20 65300000 	    _ADR ROT 
 2033 3c24 9D2F0000 	    _ADR ONEP 
 2034 3c28 79300000 	    _ADR NROT
 2035 3c2c 572D0000 	    _BRAN 1b 
 2035      D03B0000 
 2036 3c34 95470000 	3:  _ABORQ 16, " number too big "
 2036      10206E75 
 2036      6D626572 
 2036      20746F6F 
 2036      20626967 
 2037 3c4c 6D2E0000 	4:  _ADR DROP 
 2038 3c50 AD2F0000 	    _ADR ONEM  // decrement a 
 2039 3c54 B52D0000 	    _ADR RFROM 
 2040 3c58 6D2E0000 	    _ADR DROP 
 2041 3c5c D72A0000 	    _UNNEST 
 2042              	
 2043              	/**************************
 2044              	 CHAR? 
 2045              	 check for charcter c 
ARM GAS  forth.s 			page 143


 2046              	 move pointer if *a==c  
 2047              	**************************/
 2048              	CHARQ: // ( a c -- a+ t | a f )
 2049 3c60 3868     	    ldr T0,[DSP]
 2050 3c62 10F8011B 	    ldrb T1,[T0],#1 
 2051 3c66 3246     	    mov T2,TOS 
 2052 3c68 86EA0606 	    eor TOS,TOS
 2053 3c6c 9142     	    cmp T1,T2
 2054 3c6e 02D1     	    bne 1f 
 2055 3c70 3860     	    str T0,[DSP]
 2056 3c72 6FEA0606 	    mvn TOS,TOS  
 2057 3c76 FEF72BBF 	1:  _NEXT
 2058              	
 2059              	/*********************************
 2060              	   NEG? ( a -- a|a+  f|t )
 2061              	   skip '-'|'+' return -1 if '-' 
 2062              	   else return 0 
 2063              	*********************************/
 2064              	NEGQ: 
 2065 3c7a 504700BF 	    _NEST 
 2066 3c7e 032D0000 	    _DOLIT '-' 
 2066      2D000000 
 2067 3c86 613C0000 	    _ADR CHARQ
 2068 3c8a 7D2E0000 	    _ADR DUPP  
 2069 3c8e 432D0000 	    _QBRAN 1f
 2069      9E3C0000 
 2070 3c96 572D0000 	    _BRAN 2f
 2070      B63C0000 
 2071 3c9e 8D2E0000 	1:  _ADR SWAP 
 2072 3ca2 032D0000 	    _DOLIT '+'
 2072      2B000000 
 2073 3caa 613C0000 	    _ADR CHARQ
 2074 3cae 6D2E0000 	    _ADR DROP  
 2075 3cb2 8D2E0000 		_ADR SWAP 
 2076 3cb6 D72A0000 	2:  _UNNEST 
 2077              	
 2078              	
 2079              	/**********************************
 2080              	    INT?	( a -- n T | a F )
 2081              	 	parse string  at 'a' for 
 2082              		integer. Push a flag on TOS.
 2083              		integer form:
 2084              			[-]hex_digit+  | 
 2085              			$[-]hex_digit+ |
 2086              			%[-]bin_digit+ | 
 2087              			[-]dec_digit+ 
 2088              	**********************************/
 2089 3cba 5C3B0000 		_HEADER INTQ,4,"INT?"
 2089      04494E54 
 2089      3F00
 2090 3cc4 504700BF 		_NEST
 2091              	// save BASE 	
 2092 3cc8 85330000 		_ADR	BASE
 2093 3ccc 892D0000 		_ADR	AT
 2094 3cd0 F92D0000 		_ADR	TOR
 2095 3cd4 032D0000 		_DOLIT	0      // a 0 
 2095      00000000 
ARM GAS  forth.s 			page 144


 2096 3cdc A12E0000 		_ADR	OVER   // a 0 a 
 2097 3ce0 D1320000 		_ADR	COUNT  // a 0 a+ cnt 
 2098 3ce4 8D2E0000 		_ADR    SWAP   
 2099 3ce8 032D0000 		_DOLIT  '$' 
 2099      24000000 
 2100 3cf0 613C0000 		_ADR    CHARQ 
 2101 3cf4 432D0000 		_QBRAN  0f 
 2101      083D0000 
 2102              	// hexadecimal number 
 2103 3cfc FD3A0000 		_ADR    HEX
 2104 3d00 572D0000 		_BRAN   1f 
 2104      203D0000 
 2105 3d08 032D0000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2105      25000000 
 2106 3d10 613C0000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2107 3d14 432D0000 		_QBRAN  2f
 2107      2C3D0000 
 2108 3d1c 1D3B0000 		_ADR	BIN 
 2109              	1:	// decrement cnt 
 2110 3d20 8D2E0000 	    _ADR	SWAP 
 2111 3d24 AD2F0000 		_ADR	ONEM 
 2112 3d28 8D2E0000 		_ADR	SWAP  // -- a 0 cnt- a  
 2113              	2: // check if negative number 
 2114 3d2c 7D2E0000 		_ADR    DUPP 
 2115 3d30 7B3C0000 		_ADR    NEGQ 
 2116 3d34 F92D0000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2117 3d38 7D2E0000 		_ADR    DUPP 
 2118 3d3c 65300000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2119 3d40 512F0000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2120 3d44 432D0000 		_QBRAN  2f  
 2120      583D0000 
 2121 3d4c 8D2E0000 		_ADR    SWAP  // -- a 0 a cnt 
 2122 3d50 AD2F0000 		_ADR    ONEM  // -- a 0 a cnt--
 2123 3d54 8D2E0000 		_ADR    SWAP   
 2124 3d58 8D2E0000 	2:  _ADR    SWAP 
 2125 3d5c F92D0000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2126 3d60 032D0000 		_DOLIT  0
 2126      00000000 
 2127 3d68 7D2E0000 		_ADR	DUPP 
 2128 3d6c 65300000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2129 3d70 C13B0000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2130 3d74 6D2E0000 		_ADR	DROP // a 0 d n 
 2131 3d78 8D2E0000 		_ADR	SWAP  // a 0 n d 
 2132 3d7c B52D0000 		_ADR	RFROM // a 0 n d cnt  
 2133 3d80 C9310000 		_ADR	EQUAL // d == cnt ? 
 2134 3d84 432D0000 		_QBRAN  5f // digits left, not an integer 
 2134      B43D0000 
 2135 3d8c B52D0000 	2:	_ADR	RFROM  // sign 
 2136 3d90 432D0000 		_QBRAN  3f   // positive integer 
 2136      9C3D0000 
 2137 3d98 61310000 		_ADR	NEGAT
 2138              	3:	
 2139 3d9c 79300000 		_ADR	NROT  // n a 0 
 2140 3da0 8D300000 		_ADR	DDROP // n  
 2141 3da4 032D0000 		_DOLIT  -1    // n -1 
 2141      FFFFFFFF 
 2142 3dac 572D0000 		_BRAN   7f  
ARM GAS  forth.s 			page 145


 2142      BC3D0000 
 2143 3db4 B52D0000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2144 3db8 8D300000 	    _ADR	DDROP 
 2145              	7: // restore BASE 
 2146 3dbc B52D0000 		_ADR	RFROM
 2147 3dc0 85330000 		_ADR	BASE
 2148 3dc4 752D0000 		_ADR	STORE
 2149 3dc8 D72A0000 		_UNNEST
 2150              	
 2151              	/********************************
 2152              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 2153              	    parse number, integer or float 
 2154              	    if not a number return ( a 0 ) 
 2155              	    if integer return ( int -1 ) 
 2156              	    if float return ( float -2 )
 2157              	**********************************/
 2158 3dcc BE3C0000 	    _HEADER NUMBER,6,"NUMBER"
 2158      064E554D 
 2158      42455200 
 2159 3dd8 504700BF 	    _NEST 
 2160 3ddc C53C0000 	    _ADR INTQ
 2161 3de0 51300000 	    _ADR QDUP 
 2162 3de4 432D0000 	    _QBRAN 2f 
 2162      F03D0000 
 2163 3dec D72A0000 	    _UNNEST 
 2164 3df0 6D250000 	2:  _ADR FLOATQ
 2165 3df4 D72A0000 	    _UNNEST 
 2166              	
 2167              	
 2168              	/********************
 2169              	  console I/O
 2170              	********************/
 2171              	
 2172              	/**********************
 2173              	    SPACE	( -- )
 2174              	 	Send the blank 
 2175              		character to 
 2176              		the output device.
 2177              	************************/
 2178 3df8 D03D0000 		_HEADER SPACE,5,"SPACE"
 2178      05535041 
 2178      434500BF 
 2179 3e04 504700BF 		_NEST
 2180 3e08 FD2F0000 		_ADR	BLANK
 2181 3e0c A12B0000 		_ADR	EMIT
 2182 3e10 D72A0000 		_UNNEST
 2183              	
 2184              	/***************************
 2185              	    SPACES	( +n -- )
 2186              	 	Send n spaces to the 
 2187              		output device.
 2188              	****************************/
 2189 3e14 FC3D0000 		_HEADER SPACS,6,"SPACES"
 2189      06535041 
 2189      43455300 
 2190 3e20 504700BF 		_NEST
 2191 3e24 032D0000 		_DOLIT	0
ARM GAS  forth.s 			page 146


 2191      00000000 
 2192 3e2c 61320000 		_ADR	MAX
 2193 3e30 F92D0000 		_ADR	TOR
 2194 3e34 572D0000 		_BRAN	CHAR2
 2194      403E0000 
 2195              	CHAR1:
 2196 3e3c 053E0000 		_ADR	SPACE
 2197              	CHAR2:
 2198 3e40 252D0000 		_DONXT	CHAR1
 2198      3C3E0000 
 2199 3e48 D72A0000 		_UNNEST
 2200              	
 2201              	/***********************
 2202              	    TYPE	( b u -- )
 2203              	 	Output u characters 
 2204              		from b.
 2205              	************************/
 2206 3e4c 183E0000 		_HEADER TYPEE,4,"TYPE"
 2206      04545950 
 2206      450000BF 
 2207 3e58 504700BF 		_NEST
 2208 3e5c F92D0000 		_ADR  TOR   // ( a+1 -- R: u )
 2209 3e60 572D0000 		_BRAN	TYPE2
 2209      743E0000 
 2210              	TYPE1:  
 2211 3e68 D1320000 		_ADR  COUNT
 2212 3e6c 81370000 		_ADR TCHAR
 2213 3e70 A12B0000 		_ADR EMIT
 2214              	TYPE2:  
 2215 3e74 252D0000 		_DONXT	TYPE1
 2215      683E0000 
 2216 3e7c 6D2E0000 		_ADR	DROP
 2217 3e80 D72A0000 		_UNNEST
 2218              	
 2219              	/***************************
 2220              	    CR	  ( -- )
 2221              	 	Output a carriage return
 2222              		and a line feed.
 2223              	****************************/
 2224 3e84 503E0000 		_HEADER CR,2,"CR"
 2224      02435200 
 2225 3e8c 504700BF 		_NEST
 2226 3e90 032D0000 		_DOLIT	CRR
 2226      0D000000 
 2227 3e98 A12B0000 		_ADR	EMIT
 2228 3e9c 032D0000 		_DOLIT	LF
 2228      0A000000 
 2229 3ea4 A12B0000 		_ADR	EMIT
 2230 3ea8 D72A0000 		_UNNEST
 2231              	
 2232              	/******************************************
 2233              	  do_$	( -- a )
 2234              	  Return the address of a compiled string.
 2235              	  adjust return address to skip over it.
 2236              	hidden word used by compiler. 
 2237              	******************************************/
 2238              	DOSTR:
ARM GAS  forth.s 			page 147


 2239 3eac 504700BF 		_NEST     
 2240              	/* compiled string address is 2 levels deep */
 2241 3eb0 B52D0000 		_ADR	RFROM	// { -- a1 }
 2242 3eb4 B52D0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2243 3eb8 7D2E0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2244 3ebc D1320000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2245 3ec0 412F0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2246 3ec4 65370000 		_ADR	ALGND	//  end of string
 2247              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2248 3ec8 F92D0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2249 3ecc 8D2E0000 		_ADR	SWAP	//  count tugged
 2250 3ed0 F92D0000 		_ADR	TOR     //  ( -- a2) is string address
 2251 3ed4 D72A0000 		_UNNEST
 2252              	
 2253              	/******************************************
 2254              	    $"|	( -- a )
 2255              	 	Run time routine compiled by _". 
 2256              		Return address of a compiled string.
 2257              	hidden word used by compiler
 2258              	*****************************************/
 2259              	STRQP:
 2260 3ed8 504700BF 		_NEST
 2261 3edc AD3E0000 		_ADR	DOSTR
 2262 3ee0 D72A0000 		_UNNEST			// force a call to dostr
 2263              	
 2264              	/*******************************
 2265              	    .$	( a -- )
 2266              	 	Run time routine of ." 
 2267              		Output a compiled string.
 2268              	hidden word used by compiler
 2269              	*******************************/
 2270              	DOTST:
 2271 3ee4 504700BF 		_NEST
 2272 3ee8 D1320000 		_ADR	COUNT // ( -- a+1 c )
 2273 3eec 593E0000 		_ADR	TYPEE
 2274 3ef0 D72A0000 		_UNNEST
 2275              	
 2276              	/**********************
 2277              	    ."|	( -- )
 2278              	 	Run time routine of ." 
 2279              		Output a compiled string.
 2280              	hidden word used by compiler
 2281              	*****************************/
 2282              	DOTQP:
 2283 3ef4 504700BF 		_NEST
 2284 3ef8 AD3E0000 		_ADR	DOSTR
 2285 3efc E53E0000 		_ADR	DOTST
 2286 3f00 D72A0000 		_UNNEST
 2287              	
 2288              	/*************************
 2289              		LPAD  ( n+ -- )
 2290              		emit n spaceS + 
 2291              		base character  
 2292              		16 -> $
 2293              		 2 -> %
 2294              		 other -> none 
 2295              	*************************/
ARM GAS  forth.s 			page 148


 2296              	LPAD:
 2297 3f04 504700BF 		_NEST 
 2298 3f08 9D330000 		_ADR BCHR 
 2299 3f0c 892D0000 		_ADR  AT 
 2300 3f10 432D0000 		_QBRAN 3f 
 2300      7C3F0000 
 2301 3f18 85330000 		_ADR BASE 
 2302 3f1c 892D0000 		_ADR AT 
 2303 3f20 7D2E0000 		_ADR DUPP 
 2304 3f24 032D0000 		_DOLIT 16
 2304      10000000 
 2305 3f2c C9310000 		_ADR EQUAL 
 2306 3f30 432D0000 		_QBRAN 1f
 2306      583F0000 
 2307 3f38 6D2E0000 		_ADR DROP 
 2308 3f3c 032D0000 		_DOLIT '$'
 2308      24000000 
 2309 3f44 8D2E0000 	0:	_ADR  SWAP 
 2310 3f48 AD2F0000 		_ADR  ONEM 
 2311 3f4c 213E0000 		_ADR  SPACS 
 2312 3f50 A12B0000 		_ADR  EMIT 
 2313 3f54 D72A0000 		_UNNEST 
 2314 3f58 032D0000 	1:  _DOLIT 2 
 2314      02000000 
 2315 3f60 C9310000 		_ADR EQUAL 
 2316 3f64 432D0000 		_QBRAN 3f
 2316      7C3F0000 
 2317 3f6c 032D0000 		_DOLIT '%'
 2317      25000000 
 2318 3f74 572D0000 		_BRAN 0b   	
 2318      443F0000 
 2319 3f7c 213E0000 	3:	_ADR  SPACS 
 2320 3f80 D72A0000 		_UNNEST 
 2321              	
 2322              	
 2323              	/******************************
 2324              	    .R	  ( n +n -- )
 2325              	 	Display an integer in a 
 2326              		field of n columns, 
 2327              		right justified.
 2328              	*******************************/
 2329 3f84 883E0000 		_HEADER DOTR,2,".R"
 2329      022E5200 
 2330 3f8c 504700BF 		_NEST
 2331 3f90 F92D0000 		_ADR	TOR
 2332 3f94 A5350000 		_ADR    STOD 
 2333 3f98 75400000 		_ADR	DTOA 
 2334 3f9c B52D0000 		_ADR	RFROM
 2335 3fa0 A12E0000 		_ADR	OVER
 2336 3fa4 512F0000 		_ADR	SUBB
 2337 3fa8 053F0000 		_ADR    LPAD  
 2338 3fac 593E0000 		_ADR	TYPEE
 2339 3fb0 D72A0000 		_UNNEST
 2340              	
 2341              	
 2342              	/*************************
 2343              	    U.R	 ( u +n -- )
ARM GAS  forth.s 			page 149


 2344              	 	Display an unsigned 
 2345              		integer in n column, 
 2346              		right justified.
 2347              	***************************/
 2348 3fb4 883F0000 		_HEADER UDOTR,3,"U.R"
 2348      03552E52 
 2349 3fbc 504700BF 		_NEST
 2350 3fc0 F92D0000 		_ADR    TOR 
 2351 3fc4 032D0000 		_DOLIT  0
 2351      00000000 
 2352 3fcc 75400000 		_ADR    DTOA 
 2353 3fd0 B52D0000 		_ADR	RFROM
 2354 3fd4 A12E0000 		_ADR	OVER
 2355 3fd8 512F0000 		_ADR	SUBB
 2356 3fdc 053F0000 		_ADR    LPAD  
 2357 3fe0 593E0000 		_ADR	TYPEE
 2358 3fe4 D72A0000 		_UNNEST
 2359              	
 2360              	
 2361              	/************************
 2362              	    U.	  ( u -- )
 2363              	 	Display an unsigned 
 2364              		integer in free format.
 2365              	***************************/
 2366 3fe8 B83F0000 		_HEADER UDOT,2,"U."
 2366      02552E00 
 2367 3ff0 504700BF 		_NEST
 2368 3ff4 032D0000 		_DOLIT  0 
 2368      00000000 
 2369 3ffc E1390000 		_ADR	BDIGS
 2370 4000 4D3A0000 		_ADR	DIGS
 2371 4004 A93A0000 		_ADR	EDIGS
 2372 4008 032D0000 		_DOLIT  1 
 2372      01000000 
 2373 4010 053F0000 		_ADR	LPAD  
 2374 4014 593E0000 		_ADR	TYPEE
 2375 4018 D72A0000 		_UNNEST
 2376              	
 2377              	
 2378              	/************************
 2379              	    .	   ( w -- )
 2380              	 	Display an integer 
 2381              		in free format, 
 2382              		preceeded by a space.
 2383              	**************************/
 2384 401c EC3F0000 		_HEADER DOT,1,"."
 2384      012E00BF 
 2385 4024 504700BF 		_NEST
 2386 4028 053E0000 		_ADR    SPACE 
 2387 402c 85330000 		_ADR	BASE
 2388 4030 892D0000 		_ADR	AT
 2389 4034 032D0000 	1:	_DOLIT  10
 2389      0A000000 
 2390 403c E92E0000 		_ADR	XORR	// decimal base?
 2391 4040 432D0000 		_QBRAN	DOT1
 2391      50400000 
 2392 4048 F13F0000 		_ADR	UDOT    // no,display unsigned
ARM GAS  forth.s 			page 150


 2393 404c D72A0000 		_UNNEST			
 2394              	DOT1:
 2395 4050 A5350000 		_ADR    STOD 
 2396 4054 75400000 	    _ADR	DTOA
 2397 4058 032D0000 		_DOLIT  1 
 2397      01000000 
 2398 4060 053F0000 		_ADR	LPAD  
 2399 4064 593E0000 	1:	_ADR	TYPEE
 2400 4068 D72A0000 		_UNNEST			// yes, display signed
 2401              	
 2402              	
 2403              	/*************************
 2404              	  D>A ( d -- p u )
 2405              	  convert double integer to 
 2406              	  ASCII string in pad  
 2407              	input:
 2408              		d    int64 to convert 
 2409              	output:
 2410              		p     pointer to string  
 2411              		u     string length 
 2412              	**************************/
 2413 406c 20400000 		_HEADER DTOA,3,"D>A" 
 2413      03443E41 
 2414 4074 504700BF 		_NEST
 2415 4078 7D2E0000 	    _ADR DUPP 
 2416 407c F92D0000 		_ADR TOR 
 2417 4080 E9300000 		_ADR DABS 
 2418 4084 E1390000 		_ADR BDIGS
 2419 4088 4D3A0000 		_ADR DIGS 
 2420 408c B52D0000 		_ADR RFROM 
 2421 4090 813A0000 		_ADR SIGN  
 2422 4094 A93A0000 		_ADR EDIGS 
 2423 4098 D72A0000 		_UNNEST 
 2424              	
 2425              	
 2426              	/*************************
 2427              	   D. ( d -- )
 2428              	   display double integer 
 2429              	**************************/
 2430 409c 70400000 		_HEADER DDOT,2,"D."
 2430      02442E00 
 2431 40a4 504700BF 		_NEST
 2432 40a8 053E0000 		_ADR SPACE 
 2433 40ac 75400000 		_ADR DTOA 
 2434 40b0 032D0000 		_DOLIT 1
 2434      01000000 
 2435 40b8 053F0000 		_ADR LPAD 
 2436 40bc 593E0000 		_ADR TYPEE
 2437 40c0 D72A0000 		_UNNEST 
 2438              	
 2439              	
 2440              	
 2441              	/***********************
 2442              		H. ( w -- )
 2443              		display integer 
 2444              		in hexadecimal 
 2445              	*********************/
ARM GAS  forth.s 			page 151


 2446 40c4 A0400000 		_HEADER HDOT,2,"H."
 2446      02482E00 
 2447 40cc 504700BF 		_NEST 
 2448 40d0 85330000 		_ADR BASE
 2449 40d4 892D0000 		_ADR AT 
 2450 40d8 8D2E0000 		_ADR SWAP
 2451 40dc FD3A0000 		_ADR HEX
 2452 40e0 032D0000 		_DOLIT 0 
 2452      00000000 
 2453 40e8 E1390000 		_ADR BDIGS
 2454 40ec 4D3A0000 		_ADR DIGS
 2455 40f0 A93A0000 		_ADR EDIGS
 2456 40f4 053E0000 		_ADR SPACE
 2457 40f8 032D0000 		_DOLIT '$'
 2457      24000000 
 2458 4100 A12B0000 		_ADR EMIT 
 2459 4104 593E0000 		_ADR TYPEE
 2460 4108 85330000 		_ADR BASE
 2461 410c 752D0000 		_ADR STORE  
 2462 4110 D72A0000 		_UNNEST 
 2463              	
 2464              	
 2465              	/***********************
 2466              	    ?	   ( a -- )
 2467              	 	Display the contents
 2468              		in a memory cell.
 2469              	*************************/
 2470 4114 C8400000 		_HEADER QUEST,1,"?"
 2470      013F00BF 
 2471 411c 504700BF 		_NEST
 2472 4120 892D0000 		_ADR	AT
 2473 4124 25400000 		_ADR	DOT
 2474 4128 D72A0000 		_UNNEST
 2475              	
 2476              	/**************
 2477              	  Parsing
 2478              	***************/
 2479              	
 2480              	/*********************************************
 2481              	    parse	( b u c -- b u delta //  string> )
 2482              	 	Scan word delimited by c. 
 2483              		Return found string and its offset.
 2484              	hidden word used by PARSE
 2485              	**********************************************/
 2486              	PARS:
 2487 412c 504700BF 		_NEST
 2488 4130 A9330000 		_ADR	TEMP
 2489 4134 752D0000 		_ADR	STORE
 2490 4138 A12E0000 		_ADR	OVER
 2491 413c F92D0000 		_ADR	TOR
 2492 4140 7D2E0000 		_ADR	DUPP
 2493 4144 432D0000 		_QBRAN	PARS8
 2493      40420000 
 2494 414c AD2F0000 		_ADR	ONEM
 2495 4150 A9330000 		_ADR	TEMP
 2496 4154 892D0000 		_ADR	AT
 2497 4158 FD2F0000 		_ADR	BLANK
ARM GAS  forth.s 			page 152


 2498 415c C9310000 		_ADR	EQUAL
 2499 4160 432D0000 		_QBRAN	PARS3
 2499      B4410000 
 2500 4168 F92D0000 		_ADR	TOR
 2501              	PARS1:
 2502 416c FD2F0000 		_ADR	BLANK
 2503 4170 A12E0000 		_ADR	OVER
 2504 4174 A92D0000 		_ADR	CAT	 // skip leading blanks 
 2505 4178 512F0000 		_ADR	SUBB
 2506 417c B12E0000 		_ADR	ZLESS
 2507 4180 4D310000 		_ADR	INVER
 2508 4184 432D0000 		_QBRAN	PARS2
 2508      B0410000 
 2509 418c 9D2F0000 		_ADR	ONEP
 2510 4190 252D0000 		_DONXT	PARS1
 2510      6C410000 
 2511 4198 B52D0000 		_ADR	RFROM
 2512 419c 6D2E0000 		_ADR	DROP
 2513 41a0 032D0000 		_DOLIT	0
 2513      00000000 
 2514 41a8 7D2E0000 		_ADR	DUPP
 2515 41ac D72A0000 		_UNNEST
 2516              	PARS2:
 2517 41b0 B52D0000 		_ADR	RFROM
 2518              	PARS3:
 2519 41b4 A12E0000 		_ADR	OVER
 2520 41b8 8D2E0000 		_ADR	SWAP
 2521 41bc F92D0000 		_ADR	TOR
 2522              	PARS4:
 2523 41c0 A9330000 		_ADR	TEMP
 2524 41c4 892D0000 		_ADR	AT
 2525 41c8 A12E0000 		_ADR	OVER
 2526 41cc A92D0000 		_ADR	CAT
 2527 41d0 512F0000 		_ADR	SUBB // scan for delimiter
 2528 41d4 A9330000 		_ADR	TEMP
 2529 41d8 892D0000 		_ADR	AT
 2530 41dc FD2F0000 		_ADR	BLANK
 2531 41e0 C9310000 		_ADR	EQUAL
 2532 41e4 432D0000 		_QBRAN	PARS5
 2532      F0410000 
 2533 41ec B12E0000 		_ADR	ZLESS
 2534              	PARS5:
 2535 41f0 432D0000 		_QBRAN	PARS6
 2535      14420000 
 2536 41f8 9D2F0000 		_ADR	ONEP
 2537 41fc 252D0000 		_DONXT	PARS4
 2537      C0410000 
 2538 4204 7D2E0000 		_ADR	DUPP
 2539 4208 F92D0000 		_ADR	TOR
 2540 420c 572D0000 		_BRAN	PARS7
 2540      28420000 
 2541              	PARS6:
 2542 4214 B52D0000 		_ADR	RFROM
 2543 4218 6D2E0000 		_ADR	DROP
 2544 421c 7D2E0000 		_ADR	DUPP
 2545 4220 9D2F0000 		_ADR	ONEP
 2546 4224 F92D0000 		_ADR	TOR
ARM GAS  forth.s 			page 153


 2547              	PARS7:
 2548 4228 A12E0000 		_ADR	OVER
 2549 422c 512F0000 		_ADR	SUBB
 2550 4230 B52D0000 		_ADR	RFROM
 2551 4234 B52D0000 		_ADR	RFROM
 2552 4238 512F0000 		_ADR	SUBB
 2553 423c D72A0000 		_UNNEST
 2554              	PARS8:
 2555 4240 A12E0000 		_ADR	OVER
 2556 4244 B52D0000 		_ADR	RFROM
 2557 4248 512F0000 		_ADR	SUBB
 2558 424c D72A0000 		_UNNEST
 2559              	
 2560              	/************************************
 2561              	    PARSE	( c -- b u //  string> )
 2562              	 	Scan input stream and return 
 2563              		counted string delimited by c.
 2564              	************************************/
 2565 4250 18410000 		_HEADER PARSE,5,"PARSE"
 2565      05504152 
 2565      534500BF 
 2566 425c 504700BF 		_NEST
 2567 4260 F92D0000 		_ADR	TOR
 2568 4264 51380000 		_ADR	TIB
 2569 4268 D5330000 		_ADR	INN
 2570 426c 892D0000 		_ADR	AT
 2571 4270 412F0000 		_ADR	PLUS			// current input buffer pointer
 2572 4274 ED330000 		_ADR	NTIB
 2573 4278 892D0000 		_ADR	AT
 2574 427c D5330000 		_ADR	INN
 2575 4280 892D0000 		_ADR	AT
 2576 4284 512F0000 		_ADR	SUBB			// remaining count
 2577 4288 B52D0000 		_ADR	RFROM
 2578 428c 2D410000 		_ADR	PARS
 2579 4290 D5330000 		_ADR	INN
 2580 4294 89320000 		_ADR	PSTOR
 2581 4298 D72A0000 		_UNNEST
 2582              	
 2583              	/*******************************
 2584              	    .(	  ( -- )
 2585              	 	Output following string 
 2586              		up to next ) .
 2587              	******************************/
 2588 429c 54420000 		_HEADER DOTPR,2,".("
 2588      022E2800 
 2589 42a4 504700BF 		_NEST
 2590 42a8 032D0000 		_DOLIT	')'
 2590      29000000 
 2591 42b0 5D420000 		_ADR	PARSE
 2592 42b4 593E0000 		_ADR	TYPEE
 2593 42b8 D72A0000 		_UNNEST
 2594              	
 2595              	/************************
 2596              	    (	   ( -- )
 2597              	 	Ignore following 
 2598              		string up to next )
 2599              		A comment.
ARM GAS  forth.s 			page 154


 2600              	************************/
 2601 42bc A0420000 		_HEADER PAREN,IMEDD+1,"("
 2601      812800BF 
 2602 42c4 504700BF 		_NEST
 2603 42c8 032D0000 		_DOLIT	')'
 2603      29000000 
 2604 42d0 5D420000 		_ADR	PARSE
 2605 42d4 8D300000 		_ADR	DDROP
 2606 42d8 D72A0000 		_UNNEST
 2607              	
 2608              	/*******************
 2609              	    \	   ( -- )
 2610              	 	Ignore following 
 2611              		text till the 
 2612              		end of line.
 2613              	********************/
 2614 42dc C0420000 		_HEADER BKSLA,IMEDD+1,"\\"
 2614      815C00BF 
 2615 42e4 504700BF 		_NEST
 2616 42e8 ED330000 		_ADR	NTIB
 2617 42ec 892D0000 		_ADR	AT
 2618 42f0 D5330000 		_ADR	INN
 2619 42f4 752D0000 		_ADR	STORE
 2620 42f8 D72A0000 		_UNNEST
 2621              	
 2622              	/******************************
 2623              	    CHAR	( -- c )
 2624              	 	Parse next word and
 2625              		return its first character.
 2626              	*******************************/
 2627 42fc E0420000 		_HEADER CHAR,4,"CHAR"
 2627      04434841 
 2627      520000BF 
 2628 4308 504700BF 		_NEST
 2629 430c FD2F0000 		_ADR	BLANK
 2630 4310 5D420000 		_ADR	PARSE
 2631 4314 6D2E0000 		_ADR	DROP
 2632 4318 A92D0000 		_ADR	CAT
 2633 431c D72A0000 		_UNNEST
 2634              	
 2635              	/**********************************
 2636              		[CHAR] ( -- c )
 2637              		immediate version of CHAR 
 2638              	**********************************/
 2639 4320 00430000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2639      C65B4348 
 2639      41525D00 
 2640 432c 504700BF 		_NEST 
 2641 4330 09430000 		_ADR CHAR
 2642 4334 554A0000 		_ADR LITER 
 2643 4338 D72A0000 		_UNNEST 
 2644              	
 2645              	/**********************************
 2646              	    WORD	( c -- a //  string> )
 2647              	 	Parse a word from input stream
 2648              		and copy it to code dictionary.
 2649              	***********************************/
ARM GAS  forth.s 			page 155


 2650 433c 24430000 		_HEADER WORDD,4,"WORD"
 2650      04574F52 
 2650      440000BF 
 2651 4348 504700BF 		_NEST
 2652 434c 5D420000 		_ADR	PARSE
 2653 4350 19380000 		_ADR	HERE
 2654 4354 DD2F0000 		_ADR	CELLP
 2655 4358 21390000 		_ADR	PACKS
 2656 435c D72A0000 		_UNNEST
 2657              	
 2658              	/********************************
 2659              	    TOKEN	( -- a //  string> )
 2660              	 	Parse a word from input 
 2661              		stream and copy it to 
 2662              		name dictionary.
 2663              	*********************************/
 2664 4360 40430000 		_HEADER TOKEN,5,"TOKEN"
 2664      05544F4B 
 2664      454E00BF 
 2665 436c 504700BF 		_NEST
 2666 4370 FD2F0000 		_ADR	BLANK
 2667 4374 49430000 		_ADR	WORDD
 2668 4378 61450000 		_ADR	UPPER 
 2669 437c D72A0000 		_UNNEST
 2670              	
 2671              	/**********************
 2672              	  Dictionary search
 2673              	***********************/
 2674              	
 2675              	/*************************
 2676              	    NAME>	( na -- ca )
 2677              	 	Return a code address
 2678              		given a name address.
 2679              	**************************/
 2680 4380 64430000 		_HEADER NAMET,5,"NAME>"
 2680      054E414D 
 2680      453E00BF 
 2681 438c 504700BF 		_NEST
 2682 4390 D1320000 		_ADR	COUNT
 2683 4394 032D0000 		_DOLIT	0x1F
 2683      1F000000 
 2684 439c C12E0000 		_ADR	ANDD
 2685 43a0 412F0000 		_ADR	PLUS
 2686 43a4 65370000 		_ADR	ALGND
 2687 43a8 D72A0000 		_UNNEST
 2688              	
 2689              	/***************************************
 2690              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2691              	 	Compare u bytes in two strings. 
 2692              		Return 0 if identical.
 2693              	
 2694              	  Picatout 2020-12-01, 
 2695              	    Because of problem with .align 
 2696              		directive that doesn't fill 
 2697              		with zero's I had to change 
 2698              		the "SAME?" and "FIND" 
 2699              	 	words  to do a byte by byte comparison. 
ARM GAS  forth.s 			page 156


 2700              	****************************************/
 2701 43ac 84430000 		_HEADER SAMEQ,5,"SAME?"
 2701      0553414D 
 2701      453F00BF 
 2702 43b8 504700BF 		_NEST
 2703 43bc F92D0000 		_ADR	TOR
 2704 43c0 572D0000 		_BRAN	SAME2
 2704      04440000 
 2705              	SAME1:
 2706 43c8 A12E0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2707 43cc E52D0000 		_ADR	RAT   // a1 a2 a1 u 
 2708 43d0 412F0000 		_ADR	PLUS  // a1 a2 a1+u 
 2709 43d4 A92D0000 		_ADR	CAT	   // a1 a2 c1    		
 2710 43d8 A12E0000 		_ADR	OVER  // a1 a2 c1 a2 
 2711 43dc E52D0000 		_ADR	RAT    
 2712 43e0 412F0000 		_ADR	PLUS    
 2713 43e4 A92D0000 		_ADR	CAT	  // a1 a2 c1 c2
 2714 43e8 512F0000 		_ADR	SUBB  
 2715 43ec 51300000 		_ADR	QDUP
 2716 43f0 432D0000 		_QBRAN	SAME2
 2716      04440000 
 2717 43f8 B52D0000 		_ADR	RFROM
 2718 43fc 6D2E0000 		_ADR	DROP
 2719 4400 D72A0000 		_UNNEST	// strings not equal
 2720              	SAME2:
 2721 4404 252D0000 		_DONXT	SAME1
 2721      C8430000 
 2722 440c 032D0000 		_DOLIT	0
 2722      00000000 
 2723 4414 D72A0000 		_UNNEST	// strings equal
 2724              	
 2725              	/***********************************
 2726              	    FIND	( a na -- ca na | a F )
 2727              	 	Search a vocabulary for a string.
 2728              		Return ca and na if succeeded.
 2729              	hidden word used by NAME?
 2730              	
 2731              	  Picatout 2020-12-01,  
 2732              		 Modified from original. 
 2733              	   See comment for word "SAME?" 
 2734              	************************************/
 2735              	FIND:
 2736 4418 504700BF 		_NEST
 2737 441c 8D2E0000 		_ADR	SWAP			// na a	
 2738 4420 D1320000 		_ADR	COUNT			// na a+1 count
 2739 4424 7D2E0000 		_ADR	DUPP 
 2740 4428 A9330000 		_ADR	TEMP
 2741 442c 752D0000 		_ADR	STORE			// na a+1 count 
 2742 4430 F92D0000 		_ADR  TOR		// na a+1  R: count  
 2743 4434 8D2E0000 		_ADR	SWAP			// a+1 na
 2744              	FIND1:
 2745 4438 7D2E0000 		_ADR	DUPP			// a+1 na na
 2746 443c 432D0000 		_QBRAN	FIND6	// end of vocabulary
 2746      90440000 
 2747 4444 7D2E0000 		_ADR	DUPP			// a+1 na na
 2748 4448 A92D0000 		_ADR	CAT			// a+1 na name1
 2749 444c 032D0000 		_DOLIT	MASKK
ARM GAS  forth.s 			page 157


 2749      1FFFFFFF 
 2750 4454 C12E0000 		_ADR	ANDD
 2751 4458 E52D0000 		_ADR	RAT			// a+1 na name1 count 
 2752 445c E92E0000 		_ADR	XORR			// a+1 na,  same length?
 2753 4460 432D0000 		_QBRAN	FIND2
 2753      78440000 
 2754 4468 ED2F0000 		_ADR	CELLM			// a+1 la
 2755 446c 892D0000 		_ADR	AT			// a+1 next_na
 2756 4470 572D0000 		_BRAN	FIND1			// try next word
 2756      38440000 
 2757              	FIND2:   
 2758 4478 9D2F0000 		_ADR	ONEP			// a+1 na+1
 2759 447c A9330000 		_ADR	TEMP
 2760 4480 892D0000 		_ADR	AT			// a+1 na+1 count
 2761 4484 B9430000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2762              	FIND3:	
 2763 4488 572D0000 		_BRAN	FIND4
 2763      A8440000 
 2764              	FIND6:	
 2765 4490 B52D0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2766 4494 6D2E0000 		_ADR	DROP			// a+1 0
 2767 4498 8D2E0000 		_ADR	SWAP			// 0 a+1
 2768 449c AD2F0000 		_ADR	ONEM			// 0 a
 2769 44a0 8D2E0000 		_ADR	SWAP			// a 0 
 2770 44a4 D72A0000 		_UNNEST			// return without a match
 2771              	FIND4:	
 2772 44a8 432D0000 		_QBRAN	FIND5			// a+1 na+1
 2772      C4440000 
 2773 44b0 AD2F0000 		_ADR	ONEM			// a+1 na
 2774 44b4 ED2F0000 		_ADR	CELLM			// a+4 la
 2775 44b8 892D0000 		_ADR	AT			// a+1 next_na
 2776 44bc 572D0000 		_BRAN	FIND1			// compare next name
 2776      38440000 
 2777              	FIND5:	
 2778 44c4 B52D0000 		_ADR	RFROM			// a+1 na+1 count
 2779 44c8 6D2E0000 		_ADR	DROP			// a+1 na+1
 2780 44cc 8D2E0000 		_ADR	SWAP			// na+1 a+1
 2781 44d0 6D2E0000 		_ADR	DROP			// na+1
 2782 44d4 AD2F0000 		_ADR	ONEM			// na
 2783 44d8 7D2E0000 		_ADR	DUPP			// na na
 2784 44dc 8D430000 		_ADR	NAMET			// na ca
 2785 44e0 8D2E0000 		_ADR	SWAP			// ca na
 2786 44e4 D72A0000 		_UNNEST			//  return with a match
 2787              	
 2788              	/********************************
 2789              	    NAME?	( a -- ca na | a F )
 2790              	 	Search all context vocabularies 
 2791              		for a string.
 2792              	***********************************/
 2793 44e8 B0430000 		_HEADER NAMEQ,5,"NAME?"
 2793      054E414D 
 2793      453F00BF 
 2794 44f4 504700BF 		_NEST
 2795 44f8 31340000 		_ADR	CNTXT
 2796 44fc 892D0000 		_ADR	AT
 2797 4500 19440000 		_ADR	FIND
 2798 4504 D72A0000 		_UNNEST
ARM GAS  forth.s 			page 158


 2799              	
 2800              	/********************
 2801              	  console input
 2802              	********************/
 2803              	
 2804              	/****************************
 2805              		ASCIZ ( a -- a+ )
 2806              		convert counted string to 
 2807              		null terminated string 
 2808              		in pad.
 2809              	*****************************/
 2810 4508 EC440000 		_HEADER ASCIZ,5,"ASCIZ" 
 2810      05415343 
 2810      495A00BF 
 2811 4514 504700BF 		_NEST 
 2812 4518 D1320000 		_ADR COUNT
 2813 451c 7D2E0000 		_ADR DUPP
 2814 4520 F92D0000 		_ADR TOR 
 2815 4524 31380000 		_ADR PAD 
 2816 4528 8D2E0000 		_ADR SWAP
 2817 452c B9380000 		_ADR MOVE  
 2818 4530 31380000 		_ADR PAD 
 2819 4534 B52D0000 		_ADR RFROM
 2820 4538 412F0000 		_ADR PLUS 
 2821 453c 032D0000 		_DOLIT 0 
 2821      00000000 
 2822 4544 8D2E0000 		_ADR SWAP  
 2823 4548 952D0000 		_ADR CSTOR
 2824 454c 31380000 		_ADR PAD   
 2825 4550 D72A0000 		_UNNEST 
 2826              	
 2827              	/***********************
 2828              		UPPER (cstring -- cstring )
 2829              		convert to upper case in situ
 2830              	*******************************/
 2831 4554 0C450000 		_HEADER UPPER,5,"UPPER"
 2831      05555050 
 2831      455200BF 
 2832 4560 504700BF 		_NEST 
 2833 4564 7D2E0000 		_ADR DUPP 
 2834 4568 F92D0000 		_ADR TOR 
 2835 456c D1320000 		_ADR COUNT
 2836 4570 032D0000 		_DOLIT 0x1f
 2836      1F000000 
 2837 4578 C12E0000 		_ADR ANDD
 2838 457c F92D0000 		_ADR TOR 
 2839 4580 572D0000 		_BRAN 3f
 2839      D4450000 
 2840 4588 7D2E0000 	1:  _ADR DUPP 
 2841 458c D1320000 		_ADR COUNT 
 2842 4590 7D2E0000 		_ADR DUPP 
 2843 4594 032D0000 		_DOLIT 'a'-1
 2843      60000000 
 2844 459c 49320000 		_ADR GREAT
 2845 45a0 432D0000 		_QBRAN 2f 
 2845      CC450000 
 2846 45a8 7D2E0000 		_ADR DUPP 
ARM GAS  forth.s 			page 159


 2847 45ac 032D0000 		_DOLIT 'z'+1 
 2847      7B000000 
 2848 45b4 19320000 		_ADR LESS 
 2849 45b8 432D0000 		_QBRAN 2f 
 2849      CC450000 
 2850 45c0 032D0000 		_DOLIT 0x5f  
 2850      5F000000 
 2851 45c8 C12E0000 		_ADR ANDD
 2852 45cc 65300000 	2:	_ADR ROT
 2853 45d0 952D0000 		_ADR CSTOR
 2854 45d4 252D0000 	3:  _DONXT 1b
 2854      88450000 
 2855 45dc 6D2E0000 		_ADR DROP 
 2856 45e0 B52D0000 		_ADR RFROM
 2857 45e4 D72A0000 		_UNNEST 
 2858              	
 2859              	/**************************************
 2860              	   BKSP  ( bot eot cur -- bot eot cur )
 2861              	   Move cursor left by one character.
 2862              	hidden word used by KTAP
 2863              	***************************************/
 2864              	BKSP:
 2865 45e8 504700BF 		_NEST
 2866 45ec F92D0000 		_ADR	TOR
 2867 45f0 A12E0000 		_ADR	OVER
 2868 45f4 B52D0000 		_ADR	RFROM
 2869 45f8 8D2E0000 		_ADR	SWAP
 2870 45fc A12E0000 		_ADR	OVER
 2871 4600 E92E0000 		_ADR	XORR
 2872 4604 432D0000 		_QBRAN	BACK1
 2872      30460000 
 2873 460c 032D0000 		_DOLIT	BKSPP
 2873      08000000 
 2874 4614 A12B0000 		_ADR	EMIT
 2875 4618 AD2F0000 		_ADR	ONEM
 2876 461c FD2F0000 		_ADR	BLANK
 2877 4620 A12B0000 		_ADR	EMIT
 2878 4624 032D0000 		_DOLIT	BKSPP
 2878      08000000 
 2879 462c A12B0000 		_ADR	EMIT
 2880              	BACK1:
 2881 4630 D72A0000 		  _UNNEST
 2882              	
 2883              	/****************************************
 2884              	   TAP	 ( bot eot cur c -- bot eot cur )
 2885              	   Accept and echo the key stroke 
 2886              	   and bump the cursor.
 2887              	hidden word used by KTAP 
 2888              	****************************************/
 2889              	TAP:
 2890 4634 504700BF 		_NEST
 2891 4638 7D2E0000 		_ADR	DUPP
 2892 463c A12B0000 		_ADR	EMIT
 2893 4640 A12E0000 		_ADR	OVER
 2894 4644 952D0000 		_ADR	CSTOR
 2895 4648 9D2F0000 		_ADR	ONEP
 2896 464c D72A0000 		_UNNEST
ARM GAS  forth.s 			page 160


 2897              	
 2898              	
 2899              	/*******************************************
 2900              	    kTAP	( bot eot cur c -- bot eot cur )
 2901              	 	Process a key stroke, CR or backspace.
 2902              	hidden word used by ACCEPT 
 2903              	*******************************************/
 2904              	KTAP:
 2905              	TTAP:
 2906 4650 504700BF 		_NEST
 2907 4654 7D2E0000 		_ADR	DUPP
 2908 4658 032D0000 		_DOLIT	CRR
 2908      0D000000 
 2909 4660 E92E0000 		_ADR	XORR
 2910 4664 432D0000 		_QBRAN  KTAP2
 2910      94460000 
 2911 466c 032D0000 		_DOLIT	BKSPP
 2911      08000000 
 2912 4674 E92E0000 		_ADR	XORR
 2913 4678 432D0000 		_QBRAN	KTAP1
 2913      8C460000 
 2914 4680 FD2F0000 		_ADR	BLANK
 2915 4684 35460000 		_ADR	TAP
 2916 4688 D72A0000 		_UNNEST
 2917              	//	.word	0			// patch
 2918              	KTAP1:
 2919 468c E9450000 		_ADR	BKSP
 2920 4690 D72A0000 		_UNNEST
 2921              	KTAP2:
 2922 4694 6D2E0000 		_ADR	DROP
 2923 4698 8D2E0000 		_ADR	SWAP
 2924 469c 6D2E0000 		_ADR	DROP
 2925 46a0 7D2E0000 		_ADR	DUPP
 2926 46a4 D72A0000 		_UNNEST
 2927              	
 2928              	/************************************
 2929              	    ACCEPT	( b u -- b u )
 2930              	 	Accept characters to input 
 2931              		buffer. Return with actual count.
 2932              	*************************************/
 2933 46a8 58450000 		_HEADER ACCEP,6,"ACCEPT"
 2933      06414343 
 2933      45505400 
 2934 46b4 504700BF 		_NEST
 2935 46b8 A12E0000 		_ADR	OVER
 2936 46bc 412F0000 		_ADR	PLUS
 2937 46c0 A12E0000 		_ADR	OVER
 2938              	ACCP1:
 2939 46c4 B5300000 		_ADR	DDUP
 2940 46c8 E92E0000 		_ADR	XORR
 2941 46cc 432D0000 		_QBRAN	ACCP4
 2941      0C470000 
 2942 46d4 7D2B0000 		_ADR	KEY
 2943 46d8 7D2E0000 		_ADR	DUPP
 2944 46dc FD2F0000 		_ADR	BLANK
 2945 46e0 032D0000 		_DOLIT 127
 2945      7F000000 
ARM GAS  forth.s 			page 161


 2946 46e8 C9340000 		_ADR	WITHI
 2947 46ec 432D0000 		_QBRAN	ACCP2
 2947      00470000 
 2948 46f4 35460000 		_ADR	TAP
 2949 46f8 572D0000 		_BRAN	ACCP3
 2949      04470000 
 2950              	ACCP2:
 2951 4700 51460000 		_ADR	KTAP
 2952              	ACCP3:	  
 2953 4704 572D0000 		_BRAN	ACCP1
 2953      C4460000 
 2954              	ACCP4:
 2955 470c 6D2E0000 		_ADR	DROP
 2956 4710 A12E0000 		_ADR	OVER
 2957 4714 512F0000 		_ADR	SUBB
 2958 4718 D72A0000 		_UNNEST
 2959              	
 2960              	/*****************************
 2961              	    QUERY	( -- )
 2962              	 	Accept input stream 
 2963              		to terminal input buffer.
 2964              	******************************/
 2965 471c AC460000 		_HEADER QUERY,5,"QUERY"
 2965      05515545 
 2965      525900BF 
 2966 4728 504700BF 		_NEST
 2967 472c 51380000 		_ADR	TIB
 2968 4730 032D0000 		_DOLIT 80
 2968      50000000 
 2969 4738 B5460000 		_ADR	ACCEP
 2970 473c ED330000 		_ADR	NTIB
 2971 4740 752D0000 		_ADR	STORE
 2972 4744 6D2E0000 		_ADR	DROP
 2973 4748 032D0000 		_DOLIT	0
 2973      00000000 
 2974 4750 D5330000 		_ADR	INN
 2975 4754 752D0000 		_ADR	STORE
 2976 4758 D72A0000 		_UNNEST
 2977              	
 2978              	/********************
 2979              	  Error handling
 2980              	********************/
 2981              	
 2982              	/*********************
 2983              	    ABORT	( a -- )
 2984              	 	Reset data stack 
 2985              		and jump to QUIT.
 2986              	**********************/
 2987 475c 20470000 		_HEADER ABORT,5,"ABORT"
 2987      0541424F 
 2987      525400BF 
 2988 4768 504700BF 		_NEST
 2989              	ABORT1:
 2990 476c 053E0000 		_ADR	SPACE
 2991 4770 D1320000 		_ADR	COUNT
 2992 4774 593E0000 		_ADR	TYPEE
 2993 4778 032D0000 		_DOLIT	0X3F
ARM GAS  forth.s 			page 162


 2993      3F000000 
 2994 4780 A12B0000 		_ADR	EMIT
 2995 4784 8D3E0000 		_ADR	CR
 2996 4788 F1480000 		_ADR	PRESE
 2997 478c 572D0000 		_BRAN	QUIT
 2997      10490000 
 2998              	
 2999              	/*******************************
 3000              	    _abort"	( f -- )
 3001              	 	Run time routine of ABORT"
 3002              		Abort with a message.
 3003              	hidden used by compiler 
 3004              	********************************/
 3005              	ABORQ:
 3006 4794 504700BF 		_NEST
 3007 4798 AD3E0000 		_ADR	DOSTR
 3008 479c 8D2E0000 		_ADR	SWAP 
 3009 47a0 432D0000 		_QBRAN	1f	// text flag
 3009      B0470000 
 3010 47a8 572D0000 		_BRAN	ABORT1
 3010      6C470000 
 3011              	1:
 3012 47b0 6D2E0000 		_ADR	DROP
 3013 47b4 D72A0000 		_UNNEST			// drop error
 3014              	
 3015              	/************************
 3016              	  The text interpreter
 3017              	************************/
 3018              	
 3019              	/***************************
 3020              	    $INTERPRET  ( a -- )
 3021              	 	Interpret a word. 
 3022              		If failed, try to 
 3023              		convert it to an integer.
 3024              	******************************/
 3025 47b8 60470000 		_HEADER INTER,10,"$INTERPRET"
 3025      0A24494E 
 3025      54455250 
 3025      52455400 
 3026 47c8 504700BF 		_NEST
 3027 47cc F5440000 		_ADR	NAMEQ
 3028 47d0 51300000 		_ADR	QDUP	// ?defined
 3029 47d4 432D0000 		_QBRAN	INTE1
 3029      08480000 
 3030 47dc 892D0000 		_ADR	AT
 3031 47e0 032D0000 		_DOLIT	COMPO
 3031      40000000 
 3032 47e8 C12E0000 		_ADR	ANDD	// ?compile only lexicon bits
 3033 47ec 95470000 		_ABORQ	13," compile only"
 3033      0D20636F 
 3033      6D70696C 
 3033      65206F6E 
 3033      6C7900BF 
 3034 4800 192D0000 		_ADR	EXECU
 3035 4804 D72A0000 		_UNNEST			// execute defined word
 3036              	INTE1:
 3037 4808 D93D0000 		_ADR	NUMBER 
ARM GAS  forth.s 			page 163


 3038 480c 432D0000 		_QBRAN	INTE2
 3038      18480000 
 3039 4814 D72A0000 		_UNNEST
 3040              	INTE2:
 3041 4818 69470000 		_ADR	ABORT	// error
 3042              	
 3043              	/******************************
 3044              	    [	   ( -- )
 3045              	 	Start the text interpreter.
 3046              	*******************************/
 3047 481c BC470000 		_HEADER LBRAC,IMEDD+1,"["
 3047      815B00BF 
 3048 4824 504700BF 		_NEST
 3049 4828 032D0000 		_DOLIT	INTER
 3049      C8470000 
 3050 4830 05340000 		_ADR	TEVAL
 3051 4834 752D0000 		_ADR	STORE
 3052 4838 D72A0000 		_UNNEST
 3053              	
 3054              	/**********************
 3055              	    .OK	 ( -- )
 3056              	 	Display "ok" only 
 3057              		while interpreting.
 3058              	************************/
 3059 483c 20480000 		_HEADER DOTOK,3,".OK"
 3059      032E4F4B 
 3060 4844 504700BF 		_NEST
 3061 4848 032D0000 		_DOLIT	INTER
 3061      C8470000 
 3062 4850 05340000 		_ADR	TEVAL
 3063 4854 892D0000 		_ADR	AT
 3064 4858 C9310000 		_ADR	EQUAL
 3065 485c 432D0000 		_QBRAN	DOTO1
 3065      6C480000 
 3066 4864 F53E0000 		_DOTQP	3," ok"
 3066      03206F6B 
 3067              	DOTO1:
 3068 486c 8D3E0000 		_ADR	CR
 3069 4870 D72A0000 		_UNNEST
 3070              	
 3071              	/*************************
 3072              	    ?STACK	( -- )
 3073              	 	Abort if the data 
 3074              		stack underflows.
 3075              	************************/
 3076 4874 40480000 		_HEADER QSTAC,6,"?STACK"
 3076      063F5354 
 3076      41434B00 
 3077 4880 504700BF 		_NEST
 3078 4884 CD370000 		_ADR	DEPTH
 3079 4888 B12E0000 		_ADR	ZLESS	// check only for underflow
 3080 488c 95470000 		_ABORQ	9,"underflow"
 3080      09756E64 
 3080      6572666C 
 3080      6F7700BF 
 3081 489c D72A0000 		_UNNEST
 3082              	
ARM GAS  forth.s 			page 164


 3083              	/*******************
 3084              	    EVAL	( -- )
 3085              	 	Interpret the 
 3086              		input stream.
 3087              	*******************/
 3088 48a0 78480000 		_HEADER EVAL,4,"EVAL"
 3088      04455641 
 3088      4C0000BF 
 3089 48ac 504700BF 		_NEST
 3090              	EVAL1:
 3091 48b0 6D430000 	    _ADR	TOKEN
 3092 48b4 7D2E0000 		_ADR	DUPP
 3093 48b8 A92D0000 		_ADR	CAT	// ?input stream empty
 3094 48bc 432D0000 		_QBRAN	EVAL2
 3094      D8480000 
 3095 48c4 05340000 		_ADR	TEVAL
 3096 48c8 69380000 		_ADR	ATEXE
 3097 48cc 81480000 		_ADR	QSTAC	// evaluate input, check stack
 3098 48d0 572D0000 		_BRAN	EVAL1
 3098      B0480000 
 3099              	EVAL2:
 3100 48d8 6D2E0000 		_ADR	DROP
 3101 48dc 45480000 		_ADR	DOTOK
 3102 48e0 D72A0000 		_UNNEST	// prompt
 3103              	
 3104              	/**********************************
 3105              	    PRESET	( -- )
 3106              	 	Reset data stack pointer 
 3107              		and the terminal input buffer.
 3108              	**********************************/
 3109 48e4 A4480000 		_HEADER PRESE,6,"PRESET"
 3109      06505245 
 3109      53455400 
 3110 48f0 504700BF 		_NEST 
 3111 48f4 032D0000 		_DOLIT SPP 
 3111      80FE0120 
 3112 48fc 392E0000 		_ADR SPSTOR 
 3113 4900 D72A0000 		_UNNEST 
 3114              	
 3115              	/*********************
 3116              	    QUIT	( -- )
 3117              	 	Reset return stack 
 3118              		pointer and start 
 3119              		text interpreter.
 3120              	***********************/
 3121 4904 E8480000 		_HEADER QUIT,4,"QUIT"
 3121      04515549 
 3121      540000BF 
 3122 4910 032D0000 		_DOLIT RPP 
 3122      00FF0120 
 3123 4918 292E0000 		_ADR RPSTOR 
 3124              	QUIT1:
 3125 491c 25480000 		_ADR	LBRAC			// start interpretation
 3126              	QUIT2:
 3127 4920 29470000 		_ADR	QUERY			// get input
 3128 4924 AD480000 		_ADR	EVAL
 3129 4928 572D0000 		_BRAN	QUIT2	// continue till error
ARM GAS  forth.s 			page 165


 3129      20490000 
 3130              	
 3131              	/***************************
 3132              		FORGET ( <string> -- )
 3133              		forget all definition 
 3134              		starting at <string>
 3135              	****************************/
 3136 4930 08490000 		_HEADER FORGET,6,"FORGET"
 3136      06464F52 
 3136      47455400 
 3137 493c 504700BF 		_NEST 
 3138 4940 6D430000 		_ADR TOKEN 
 3139 4944 7D2E0000 		_ADR DUPP 
 3140 4948 432D0000 		_QBRAN 9f 
 3140      84490000 
 3141 4950 F5440000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3142 4954 51300000 		_ADR QDUP 
 3143 4958 432D0000 		_QBRAN 8f
 3143      80490000 
 3144 4960 ED2F0000 		_ADR CELLM // ( ca la )
 3145 4964 7D2E0000 		_ADR DUPP 
 3146 4968 45340000 		_ADR CPP   
 3147 496c 752D0000 		_ADR STORE
 3148 4970 892D0000 		_ADR AT 
 3149 4974 71340000 		_ADR LAST 
 3150 4978 752D0000 		_ADR STORE
 3151 497c DD4E0000 		_ADR OVERT 
 3152 4980 6D2E0000 	8:  _ADR DROP 
 3153 4984 D72A0000 	9:	_UNNEST 
 3154              	
 3155              		.p2align 2 
 3156              	
 3157              	/*****************
 3158              	  The compiler
 3159              	******************/
 3160              	
 3161              	/**************************************
 3162              	    '	   ( -- ca )
 3163              	 	Search context vocabularies 
 3164              		for the next word in input stream.
 3165              	***************************************/
 3166 4988 34490000 		_HEADER TICK,1,"'"
 3166      012700BF 
 3167 4990 504700BF 		_NEST
 3168 4994 6D430000 		_ADR	TOKEN
 3169 4998 F5440000 		_ADR	NAMEQ	// ?defined
 3170 499c 432D0000 		_QBRAN	TICK1
 3170      A8490000 
 3171 49a4 D72A0000 		_UNNEST	// yes, push code address
 3172              	TICK1:	
 3173 49a8 69470000 		_ADR ABORT	// no, error
 3174              	
 3175              	/***********************
 3176              	    ALLOT	( n -- )
 3177              	 	Allocate n bytes to 
 3178              		the ram area.
 3179              	************************/
ARM GAS  forth.s 			page 166


 3180 49ac 8C490000 		_HEADER ALLOT,5,"ALLOT"
 3180      05414C4C 
 3180      4F5400BF 
 3181 49b8 504700BF 		_NEST
 3182 49bc 45340000 		_ADR	CPP
 3183 49c0 89320000 		_ADR	PSTOR
 3184 49c4 D72A0000 		_UNNEST			// adjust code pointer
 3185              	
 3186              	/******************************
 3187              	    ,	   ( w -- )
 3188              	 	Compile an integer 
 3189              		into the code dictionary.
 3190              	******************************/
 3191 49c8 B0490000 		_HEADER COMMA,1,","
 3191      012C00BF 
 3192 49d0 504700BF 		_NEST
 3193 49d4 19380000 		_ADR	HERE
 3194 49d8 7D2E0000 		_ADR	DUPP
 3195 49dc DD2F0000 		_ADR	CELLP	// cell boundary
 3196 49e0 45340000 		_ADR	CPP
 3197 49e4 752D0000 		_ADR	STORE
 3198 49e8 752D0000 		_ADR	STORE
 3199 49ec D72A0000 		_UNNEST	// adjust code pointer, compile
 3200              		.p2align 2 
 3201              	
 3202              	/************************************
 3203              	    [COMPILE]   ( -- //  string> )
 3204              	 	Compile the next immediate word 
 3205              		into code dictionary.
 3206              	*************************************/
 3207 49f0 CC490000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3207      895B434F 
 3207      4D50494C 
 3207      455D00BF 
 3208 4a00 504700BF 		_NEST
 3209 4a04 91490000 		_ADR	TICK
 3210 4a08 D1490000 		_ADR	COMMA
 3211 4a0c D72A0000 		_UNNEST
 3212              	
 3213              	/****************************
 3214              	    COMPILE	( -- )
 3215              	 	Compile the next address 
 3216              		in colon list to code 
 3217              		dictionary.
 3218              	*******************************/
 3219 4a10 F4490000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3219      47434F4D 
 3219      50494C45 
 3220 4a1c 504700BF 		_NEST
 3221 4a20 B52D0000 		_ADR	RFROM
 3222 4a24 7D2E0000 		_ADR	DUPP 
 3223 4a28 892D0000 		_ADR	AT
 3224 4a2c 032D0000 		_DOLIT 1 
 3224      01000000 
 3225 4a34 D52E0000 		_ADR	ORR 
 3226 4a38 D1490000 		_ADR	COMMA 
 3227 4a3c DD2F0000 		_ADR	CELLP 
ARM GAS  forth.s 			page 167


 3228 4a40 F92D0000 		_ADR	TOR 
 3229 4a44 D72A0000 		_UNNEST	// adjust return address
 3230              	
 3231              	/*************************
 3232              	    LITERAL	( w -- )
 3233              	 	Compile tos to code 
 3234              		dictionary as an 
 3235              		integer literal.
 3236              	***************************/
 3237 4a48 144A0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3237      874C4954 
 3237      4552414C 
 3238 4a54 504700BF 		_NEST
 3239 4a58 032D0000 		_COMPI	DOLIT
 3239      022D0000 
 3239      394F0000 
 3240 4a64 D1490000 		_ADR	COMMA
 3241 4a68 D72A0000 		_UNNEST
 3242              	
 3243              	/********************
 3244              	    $,"	( -- )
 3245              	 	Compile a literal 
 3246              		string up to next " .
 3247              	hidden word 
 3248              	************************/
 3249              	STRCQ:
 3250 4a6c 504700BF 		_NEST
 3251 4a70 032D0000 		_DOLIT -4
 3251      FCFFFFFF 
 3252 4a78 45340000 		_ADR	CPP
 3253 4a7c 89320000 		_ADR	PSTOR
 3254 4a80 032D0000 		_DOLIT	'\"'
 3254      22000000 
 3255 4a88 49430000 		_ADR	WORDD			// move word to code dictionary
 3256 4a8c D1320000 		_ADR	COUNT
 3257 4a90 412F0000 		_ADR	PLUS
 3258 4a94 65370000 		_ADR	ALGND			// calculate aligned end of string
 3259 4a98 45340000 		_ADR	CPP
 3260 4a9c 752D0000 		_ADR	STORE
 3261 4aa0 D72A0000 		_UNNEST 			// adjust the code pointer
 3262              	
 3263              	/*******************
 3264              	   Structures
 3265              	*******************/
 3266              	
 3267              	/*************************
 3268              	    FOR	 ( -- a )
 3269              	 	Start a FOR-NEXT loop 
 3270              		structure in a colon 
 3271              		definition.
 3272              	**************************/
 3273 4aa4 4C4A0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3273      C3464F52 
 3274 4aac 504700BF 		_NEST
 3275 4ab0 032D0000 		_COMPI	TOR
 3275      F82D0000 
 3275      394F0000 
ARM GAS  forth.s 			page 168


 3276 4abc 19380000 		_ADR	HERE
 3277 4ac0 D72A0000 		_UNNEST
 3278              	
 3279              	/********************************
 3280              		DO ( limit start -- )
 3281              		initialise a DO...LOOP 
 3282              		or DO...+LOOP 
 3283              	********************************/
 3284 4ac4 A84A0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3284      C2444F00 
 3285 4acc 504700BF 		_NEST
 3286 4ad0 032D0000 		_COMPI SWAP
 3286      8C2E0000 
 3286      394F0000 
 3287 4adc 032D0000 		_COMPI TOR 
 3287      F82D0000 
 3287      394F0000 
 3288 4ae8 032D0000 		_COMPI TOR 
 3288      F82D0000 
 3288      394F0000 
 3289 4af4 19380000 		_ADR HERE 
 3290 4af8 D72A0000 		_UNNEST 
 3291              	
 3292              	DOPLOOP: // ( n -- R: counter limit )
 3293 4afc B8E80300 		ldmfd RSP!,{T0,T1}
 3294 4b00 3044     		add T0,TOS 
 3295 4b02 28E90300 		stmfd RSP!,{T0,T1}
 3296 4b06 8842     		cmp T0,T1 
 3297 4b08 05D4     		bmi 9f 
 3298 4b0a 08F10808 		add RSP,#8
 3299 4b0e 0CF1040C 		add IP,#4
 3300 4b12 FDF7DDBF 		_NEXT 
 3301 4b16 DCF800C0 	9:  ldr IP,[IP]
 3302 4b1a FDF7D9BF 		_NEXT 
 3303              		
 3304              	/***************************
 3305              		+LOOP ( a -- )
 3306              		increment counter 
 3307              		end loop if countr>limit
 3308              	****************************/
 3309 4b1e C84A0000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3309      C52B4C4F 
 3309      4F50
 3310 4b28 504700BF 		_NEST 
 3311 4b2c 032D0000 		_COMPI DOPLOOP 
 3311      FC4A0000 
 3311      394F0000 
 3312 4b38 D1490000 		_ADR COMMA
 3313 4b3c D72A0000 		_UNNEST 
 3314              	
 3315              	DOLOOP: // ( -- R: counter limit )
 3316 4b40 D8F80000 		ldr T0,[RSP]
 3317 4b44 00F10100 		add T0,#1
 3318 4b48 C8F80000 		str T0,[RSP]
 3319 4b4c D8F80410 		ldr T1,[RSP,#4]
 3320 4b50 8842     		cmp T0,T1 
 3321 4b52 05D4     		bmi 9f
ARM GAS  forth.s 			page 169


 3322 4b54 08F10808 		add RSP,#8  // counter and limit  
 3323 4b58 0CF1040C 		add IP,IP,#4 // skip loop address 
 3324 4b5c FDF7B8BF 		_NEXT 
 3325 4b60 DCF800C0 	9:  ldr IP,[IP]
 3326 4b64 FDF7B4BF 		_NEXT 
 3327              	
 3328              	
 3329              	/********************************
 3330              		LOOP ( a -- )
 3331              		increment counter 
 3332              		end loop if >= limit 
 3333              	*********************************/
 3334 4b68 224B0000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3334      C44C4F4F 
 3334      500000BF 
 3335 4b74 504700BF 		_NEST 
 3336 4b78 032D0000 		_COMPI DOLOOP
 3336      404B0000 
 3336      394F0000 
 3337 4b84 D1490000 		_ADR COMMA 
 3338 4b88 D72A0000 		_UNNEST 
 3339              	
 3340              	
 3341              	/**********************
 3342              	    BEGIN	( -- a )
 3343              	 	Start an infinite 
 3344              		or indefinite 
 3345              		loop structure.
 3346              	************************/
 3347 4b8c 6C4B0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3347      C5424547 
 3347      494E00BF 
 3348 4b98 504700BF 		_NEST
 3349 4b9c 19380000 		_ADR	HERE
 3350 4ba0 D72A0000 		_UNNEST
 3351              		.p2align 2 
 3352              	
 3353              	/********************
 3354              	    NEXT	( a -- )
 3355              	 	Terminate a FOR-NEXT
 3356              		loop structure.
 3357              	**************************/
 3358 4ba4 904B0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3358      C44E4558 
 3358      540000BF 
 3359 4bb0 504700BF 		_NEST
 3360 4bb4 032D0000 		_COMPI	DONXT
 3360      242D0000 
 3360      394F0000 
 3361 4bc0 D1490000 		_ADR	COMMA
 3362 4bc4 D72A0000 		_UNNEST
 3363              	
 3364              	/***************************
 3365              		I ( -- n )
 3366              		stack for loop counter 
 3367              	***************************/
 3368 4bc8 A84B0000 		_HEADER I,1+COMPO,"I"
ARM GAS  forth.s 			page 170


 3368      414900BF 
 3369 4bd0 47F8046D 		_PUSH 
 3370 4bd4 D8F80060 		ldr TOS,[RSP]
 3371 4bd8 FDF77ABF 		_NEXT 
 3372              	
 3373              	/****************************
 3374              		J ( -- n )
 3375              		stack outer loop counter 
 3376              	****************************/
 3377 4bdc CC4B0000 		_HEADER J,1,"J"
 3377      014A00BF 
 3378 4be4 47F8046D 		_PUSH 
 3379 4be8 D8F80460 		ldr TOS,[RSP,#4]
 3380 4bec FDF770BF 		_NEXT 
 3381              	
 3382              	/**********************
 3383              	    UNTIL	( a -- )
 3384              	 	Terminate a BEGIN-UNTIL
 3385              		indefinite loop structure.
 3386              	******************************/
 3387 4bf0 E04B0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3387      C5554E54 
 3387      494C00BF 
 3388 4bfc 504700BF 		_NEST
 3389 4c00 032D0000 		_COMPI	QBRAN
 3389      422D0000 
 3389      394F0000 
 3390 4c0c D1490000 		_ADR	COMMA
 3391 4c10 D72A0000 		_UNNEST
 3392              	
 3393              	/**********************
 3394              	    AGAIN	( a -- )
 3395              	 	Terminate a BEGIN-AGAIN
 3396              		infinite loop structure.
 3397              	*****************************/
 3398 4c14 F44B0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3398      C5414741 
 3398      494E00BF 
 3399 4c20 504700BF 		_NEST
 3400 4c24 032D0000 		_COMPI	BRAN
 3400      562D0000 
 3400      394F0000 
 3401 4c30 D1490000 		_ADR	COMMA
 3402 4c34 D72A0000 		_UNNEST
 3403              	
 3404              	/************************
 3405              	    IF	  ( -- A )
 3406              	 	Begin a conditional
 3407              		branch structure.
 3408              	**************************/
 3409 4c38 184C0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3409      C2494600 
 3410 4c40 504700BF 		_NEST
 3411 4c44 032D0000 		_COMPI	QBRAN
 3411      422D0000 
 3411      394F0000 
 3412 4c50 19380000 		_ADR	HERE
ARM GAS  forth.s 			page 171


 3413 4c54 032D0000 		_DOLIT	4
 3413      04000000 
 3414 4c5c 45340000 		_ADR	CPP
 3415 4c60 89320000 		_ADR	PSTOR
 3416 4c64 D72A0000 		_UNNEST
 3417              	
 3418              	/*************************
 3419              	    AHEAD	( -- A )
 3420              	 	Compile a forward 
 3421              		branch instruction.
 3422              	*************************/
 3423 4c68 3C4C0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3423      C5414845 
 3423      414400BF 
 3424 4c74 504700BF 		_NEST
 3425 4c78 032D0000 		_COMPI	BRAN
 3425      562D0000 
 3425      394F0000 
 3426 4c84 19380000 		_ADR	HERE
 3427 4c88 032D0000 		_DOLIT	4
 3427      04000000 
 3428 4c90 45340000 		_ADR	CPP
 3429 4c94 89320000 		_ADR	PSTOR
 3430 4c98 D72A0000 		_UNNEST
 3431              	
 3432              	/**************************
 3433              	    REPEAT	( A a -- )
 3434              	 	Terminate a BEGIN-WHILE-REPEAT
 3435              		indefinite loop.
 3436              	**********************************/
 3437 4c9c 6C4C0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3437      C6524550 
 3437      45415400 
 3438 4ca8 504700BF 		_NEST
 3439 4cac 214C0000 		_ADR	AGAIN
 3440 4cb0 19380000 		_ADR	HERE
 3441 4cb4 8D2E0000 		_ADR	SWAP
 3442 4cb8 752D0000 		_ADR	STORE
 3443 4cbc D72A0000 		_UNNEST
 3444              	
 3445              	/*********************
 3446              	    THEN	( A -- )
 3447              	 	Terminate a conditional
 3448              		branch structure.
 3449              	*****************************/
 3450 4cc0 A04C0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3450      C4544845 
 3450      4E0000BF 
 3451 4ccc 504700BF 		_NEST
 3452 4cd0 19380000 		_ADR	HERE
 3453 4cd4 8D2E0000 		_ADR	SWAP
 3454 4cd8 752D0000 		_ADR	STORE
 3455 4cdc D72A0000 		_UNNEST
 3456              	
 3457              	/***************************
 3458              	    AFT	 ( a -- a A )
 3459              	 	Jump to THEN in a 
ARM GAS  forth.s 			page 172


 3460              		FOR-AFT-THEN-NEXT loop 
 3461              		the first time through.
 3462              	*****************************/
 3463 4ce0 C44C0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3463      C3414654 
 3464 4ce8 504700BF 		_NEST
 3465 4cec 6D2E0000 		_ADR	DROP
 3466 4cf0 754C0000 		_ADR	AHEAD
 3467 4cf4 994B0000 		_ADR	BEGIN
 3468 4cf8 8D2E0000 		_ADR	SWAP
 3469 4cfc D72A0000 		_UNNEST
 3470              	
 3471              	/**********************
 3472              	    ELSE	( A -- A )
 3473              	 	Start the false 
 3474              		clause in an 
 3475              		IF-ELSE-THEN structure.
 3476              	****************************/
 3477 4d00 E44C0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3477      C4454C53 
 3477      450000BF 
 3478 4d0c 504700BF 		_NEST
 3479 4d10 754C0000 		_ADR	AHEAD
 3480 4d14 8D2E0000 		_ADR	SWAP
 3481 4d18 CD4C0000 		_ADR	THENN
 3482 4d1c D72A0000 		_UNNEST
 3483              	
 3484              	/**************************
 3485              	    WHILE	( a -- A a )
 3486              	 	Conditional branch out 
 3487              		of a BEGIN-WHILE-REPEAT loop.
 3488              	*********************************/
 3489 4d20 044D0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3489      C5574849 
 3489      4C4500BF 
 3490 4d2c 504700BF 		_NEST
 3491 4d30 414C0000 		_ADR	IFF
 3492 4d34 8D2E0000 		_ADR	SWAP
 3493 4d38 D72A0000 		_UNNEST
 3494              	
 3495              	/***********************************
 3496              	    ABORT"	( -- //  string> )
 3497              	 	Conditional abort with an 
 3498              		error message.
 3499              	***********************************/
 3500 4d3c 244D0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3500      8641424F 
 3500      52542200 
 3501 4d48 504700BF 		_NEST
 3502 4d4c 032D0000 		_COMPI	ABORQ
 3502      94470000 
 3502      394F0000 
 3503 4d58 6D4A0000 		_ADR	STRCQ
 3504 4d5c D72A0000 		_UNNEST
 3505              	
 3506              	/******************************
 3507              	    $"	( -- //  string> )
ARM GAS  forth.s 			page 173


 3508              	 	Compile an inline 
 3509              		word literal.
 3510              	*****************************/
 3511 4d60 404D0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3511      C2242200 
 3512 4d68 504700BF 		_NEST
 3513 4d6c 032D0000 		_COMPI	STRQP
 3513      D83E0000 
 3513      394F0000 
 3514 4d78 6D4A0000 		_ADR	STRCQ
 3515 4d7c D72A0000 		_UNNEST
 3516              	
 3517              	/******************************
 3518              	    ."	( -- //  string> )
 3519              	 	Compile an inline word
 3520              		literal to be typed out 
 3521              		at run time.
 3522              	*******************************/
 3523 4d80 644D0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3523      C22E2200 
 3524 4d88 504700BF 		_NEST
 3525 4d8c 032D0000 		_COMPI	DOTQP
 3525      F43E0000 
 3525      394F0000 
 3526 4d98 6D4A0000 		_ADR	STRCQ
 3527 4d9c D72A0000 		_UNNEST
 3528              	
 3529              	/*********************
 3530              	  Name compiler
 3531              	***********************/
 3532              	
 3533              	/**************************
 3534              	    ?UNIQUE	( a -- a )
 3535              	 	Display a warning 
 3536              		message if the word 
 3537              		already exists.
 3538              	**************************/
 3539 4da0 844D0000 		_HEADER UNIQU,7,"?UNIQUE"
 3539      073F554E 
 3539      49515545 
 3540 4dac 504700BF 		_NEST
 3541 4db0 7D2E0000 		_ADR	DUPP
 3542 4db4 F5440000 		_ADR	NAMEQ			// ?name exists
 3543 4db8 432D0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3543      D84D0000 
 3544 4dc0 F53E0000 		_DOTQP	7," reDef "		// but warn the user
 3544      07207265 
 3544      44656620 
 3545 4dcc A12E0000 		_ADR	OVER
 3546 4dd0 D1320000 		_ADR	COUNT
 3547 4dd4 593E0000 		_ADR	TYPEE			// just in case its not planned
 3548              	UNIQ1:
 3549 4dd8 6D2E0000 		_ADR	DROP
 3550 4ddc D72A0000 		_UNNEST
 3551              	
 3552              	/***********************
 3553              	    $,n	 ( na -- )
ARM GAS  forth.s 			page 174


 3554              	 	Build a new dictionary 
 3555              		name using the data at na.
 3556              	hidden word 
 3557              	*******************************/
 3558              	SNAME:
 3559 4de0 504700BF 		_NEST
 3560 4de4 7D2E0000 		_ADR	DUPP			//  na na
 3561 4de8 A92D0000 		_ADR	CAT			//  ?null input
 3562 4dec 432D0000 		_QBRAN	SNAM1
 3562      284E0000 
 3563 4df4 AD4D0000 		_ADR	UNIQU			//  na
 3564 4df8 71340000 		_ADR	LAST			//  na last
 3565 4dfc 892D0000 		_ADR	AT			//  na la
 3566 4e00 D1490000 		_ADR	COMMA			//  na
 3567 4e04 7D2E0000 		_ADR	DUPP			//  na na
 3568 4e08 71340000 		_ADR	LAST			//  na na last
 3569 4e0c 752D0000 		_ADR	STORE			//  na , save na for vocabulary link
 3570 4e10 D1320000 		_ADR	COUNT			//  na+1 count
 3571 4e14 412F0000 		_ADR	PLUS			//  na+1+count
 3572 4e18 65370000 		_ADR	ALGND			//  word boundary
 3573 4e1c 45340000 		_ADR	CPP
 3574 4e20 752D0000 		_ADR	STORE			//  top of dictionary now
 3575 4e24 D72A0000 		_UNNEST
 3576              	SNAM1:
 3577 4e28 D93E0000 		_ADR	STRQP
 3578 4e2c 07       		.byte	7
 3579 4e2d 206E616D 		.ascii " name? "
 3579      653F20
 3580 4e34 69470000 		_ADR	ABORT
 3581              	
 3582              	/************************
 3583              	    $COMPILE	( a -- )
 3584              	 	Compile next word to 
 3585              		code dictionary as 
 3586              		a token or literal.
 3587              	**************************/
 3588 4e38 A44D0000 		_HEADER SCOMP,8,"$COMPILE"
 3588      0824434F 
 3588      4D50494C 
 3588      450000BF 
 3589 4e48 504700BF 		_NEST
 3590 4e4c F5440000 		_ADR	NAMEQ
 3591 4e50 51300000 		_ADR	QDUP	// defined?
 3592 4e54 432D0000 		_QBRAN	SCOM2
 3592      844E0000 
 3593 4e5c 892D0000 		_ADR	AT
 3594 4e60 032D0000 		_DOLIT	IMEDD
 3594      80000000 
 3595 4e68 C12E0000 		_ADR	ANDD	// immediate?
 3596 4e6c 432D0000 		_QBRAN	SCOM1
 3596      7C4E0000 
 3597 4e74 192D0000 		_ADR	EXECU
 3598 4e78 D72A0000 		_UNNEST			// it's immediate, execute
 3599              	SCOM1:
 3600 4e7c 394F0000 		_ADR	CALLC			// it's not immediate, compile
 3601 4e80 D72A0000 		_UNNEST	
 3602              	SCOM2:
ARM GAS  forth.s 			page 175


 3603 4e84 D93D0000 		_ADR	NUMBER 
 3604 4e88 432D0000 		_QBRAN	SCOM3
 3604      984E0000 
 3605 4e90 554A0000 		_ADR	LITER
 3606 4e94 D72A0000 		_UNNEST			// compile number as integer
 3607              	SCOM3: // compilation abort 
 3608 4e98 A14E0000 		_ADR COLON_ABORT 
 3609 4e9c 69470000 		_ADR	ABORT			// error
 3610              	
 3611              	/********************************
 3612              	 before aborting a compilation 
 3613              	 reset HERE and LAST
 3614              	 to previous values. 
 3615              	*******************************/
 3616              	COLON_ABORT:
 3617 4ea0 504700BF 		_NEST 
 3618 4ea4 71340000 		_ADR LAST 
 3619 4ea8 892D0000 		_ADR AT 
 3620 4eac ED2F0000 		_ADR CELLM 
 3621 4eb0 7D2E0000 		_ADR DUPP 
 3622 4eb4 45340000 		_ADR CPP  
 3623 4eb8 752D0000 		_ADR STORE 
 3624 4ebc 892D0000 		_ADR AT 
 3625 4ec0 71340000 		_ADR LAST 
 3626 4ec4 752D0000 		_ADR STORE 
 3627 4ec8 DD4E0000 		_ADR OVERT 
 3628 4ecc D72A0000 		_UNNEST 
 3629              	
 3630              	/*********************
 3631              	    OVERT	( -- )
 3632              	 	Link a new word 
 3633              		into the current 
 3634              		vocabulary.
 3635              	**********************/
 3636 4ed0 3C4E0000 		_HEADER OVERT,5,"OVERT"
 3636      054F5645 
 3636      525400BF 
 3637 4edc 504700BF 		_NEST
 3638 4ee0 71340000 		_ADR	LAST
 3639 4ee4 892D0000 		_ADR	AT
 3640 4ee8 31340000 		_ADR	CNTXT
 3641 4eec 752D0000 		_ADR	STORE
 3642 4ef0 D72A0000 		_UNNEST
 3643              	
 3644              	/**********************
 3645              	    ;  ( -- )
 3646              	 	Terminate a colon
 3647              		definition.
 3648              	***********************/
 3649 4ef4 D44E0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3649      C13B00BF 
 3650 4efc 504700BF 		_NEST
 3651 4f00 032D0000 		_DOLIT	UNNEST
 3651      D62A0000 
 3652 4f08 394F0000 		_ADR	CALLC
 3653 4f0c 25480000 		_ADR	LBRAC
 3654 4f10 DD4E0000 		_ADR	OVERT
ARM GAS  forth.s 			page 176


 3655 4f14 D72A0000 		_UNNEST
 3656              	
 3657              	/******************
 3658              	    ]	   ( -- )
 3659              	 	Start compiling 
 3660              		the words in 
 3661              		the input stream.
 3662              	*********************/
 3663 4f18 F84E0000 		_HEADER RBRAC,1,"]"
 3663      015D00BF 
 3664 4f20 504700BF 		_NEST
 3665 4f24 032D0000 		_DOLIT	SCOMP
 3665      484E0000 
 3666 4f2c 05340000 		_ADR	TEVAL
 3667 4f30 752D0000 		_ADR	STORE
 3668 4f34 D72A0000 		_UNNEST
 3669              	
 3670              	/*********************
 3671              	    BL.W	( ca -- )
 3672              	 	compile ca.
 3673              	hidden word used by compiler
 3674              	*****************************/
 3675              	CALLC:
 3676 4f38 504700BF 		_NEST
 3677 4f3c 032D0000 		_DOLIT 1 
 3677      01000000 
 3678 4f44 D52E0000 		_ADR ORR 
 3679 4f48 D1490000 		_ADR COMMA  
 3680 4f4c D72A0000 		_UNNEST 
 3681              	
 3682              	
 3683              	/*************************
 3684              	 	:	( -- //  string> )
 3685              	 	Start a new colon 
 3686              		definition using 
 3687              		next word as its name.
 3688              	**************************/
 3689 4f50 1C4F0000 		_HEADER COLON,1,":"
 3689      013A00BF 
 3690 4f58 504700BF 		_NEST
 3691 4f5c 6D430000 		_ADR	TOKEN
 3692 4f60 E14D0000 		_ADR	SNAME
 3693 4f64 DD4E0000 		_ADR    OVERT 
 3694 4f68 E12A0000 		_ADR	COMPI_NEST 
 3695 4f6c 214F0000 		_ADR	RBRAC
 3696 4f70 D72A0000 		_UNNEST
 3697              	
 3698              	/*************************
 3699              	    IMMEDIATE   ( -- )
 3700              	 	Make the last compiled 
 3701              		word an immediate word.
 3702              	***************************/
 3703 4f74 544F0000 		_HEADER IMMED,9,"IMMEDIATE"
 3703      09494D4D 
 3703      45444941 
 3703      544500BF 
 3704 4f84 504700BF 		_NEST
ARM GAS  forth.s 			page 177


 3705 4f88 032D0000 		_DOLIT	IMEDD
 3705      80000000 
 3706 4f90 71340000 		_ADR	LAST
 3707 4f94 892D0000 		_ADR	AT
 3708 4f98 892D0000 		_ADR	AT
 3709 4f9c D52E0000 		_ADR	ORR
 3710 4fa0 71340000 		_ADR	LAST
 3711 4fa4 892D0000 		_ADR	AT
 3712 4fa8 752D0000 		_ADR	STORE
 3713 4fac D72A0000 		_UNNEST
 3714              	
 3715              	/******************
 3716              	  Defining words
 3717              	******************/
 3718              	
 3719              	/***********************************
 3720              	    CONSTANT	( u -- //  string> )
 3721              	 	Compile a new constant.
 3722              	************************************/
 3723 4fb0 784F0000 		_HEADER CONST,8,"CONSTANT"
 3723      08434F4E 
 3723      5354414E 
 3723      540000BF 
 3724 4fc0 504700BF 		_NEST 
 3725 4fc4 6D430000 		_ADR	TOKEN
 3726 4fc8 E14D0000 		_ADR	SNAME
 3727 4fcc DD4E0000 		_ADR	OVERT
 3728 4fd0 E12A0000 		_ADR	COMPI_NEST
 3729 4fd4 032D0000 		_DOLIT	DOCON
 3729      0C330000 
 3730 4fdc 394F0000 		_ADR	CALLC
 3731 4fe0 D1490000 		_ADR	COMMA
 3732 4fe4 032D0000 		_DOLIT	UNNEST 
 3732      D62A0000 
 3733 4fec 394F0000 		_ADR	CALLC  
 3734 4ff0 D72A0000 		_UNNEST
 3735              	
 3736              		.p2align 2 
 3737              	/****************************************
 3738              	 doDOES> ( -- a )
 3739              	 runtime action of 		 
 3740              	 leave parameter field address on stack 
 3741              	hidden word used by compiler 
 3742              	***************************************/
 3743              	DODOES:
 3744 4ff4 504700BF 		_NEST 
 3745 4ff8 B52D0000 		_ADR	RFROM
 3746 4ffc DD2F0000 		_ADR	CELLP 
 3747 5000 9D2F0000 		_ADR	ONEP  
 3748 5004 71340000 		_ADR LAST 
 3749 5008 892D0000 		_ADR AT
 3750 500c 8D430000 		_ADR NAMET 
 3751 5010 DD2F0000 		_ADR CELLP 
 3752 5014 752D0000 		_ADR STORE  
 3753 5018 D72A0000 		_UNNEST 
 3754              	
 3755              		.p2align 2
ARM GAS  forth.s 			page 178


 3756              	/**********************
 3757              	  DOES> ( -- )
 3758              	  compile time action
 3759              	*************************/
 3760 501c B44F0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3760      C5444F45 
 3760      533E00BF 
 3761 5028 504700BF 		_NEST 
 3762 502c 032D0000 		_DOLIT DODOES 
 3762      F44F0000 
 3763 5034 394F0000 		_ADR CALLC 
 3764 5038 032D0000 		_DOLIT	UNNEST
 3764      D62A0000 
 3765 5040 394F0000 		_ADR	CALLC 
 3766 5044 E12A0000 		_ADR COMPI_NEST
 3767 5048 032D0000 		_DOLIT RFROM 
 3767      B42D0000 
 3768 5050 394F0000 		_ADR	CALLC
 3769 5054 D72A0000 		_UNNEST 
 3770              	
 3771              	
 3772              	/****************************
 3773              	  DEFER@ ( "name" -- a )
 3774              	  return value of code field 
 3775              	  of defered function. 
 3776              	******************************/
 3777 5058 20500000 		_HEADER DEFERAT,6,"DEFER@"
 3777      06444546 
 3777      45524000 
 3778 5064 504700BF 		_NEST 
 3779 5068 91490000 		_ADR TICK
 3780 506c DD2F0000 		_ADR CELLP 
 3781 5070 892D0000 		_ADR AT 
 3782 5074 AD2F0000 		_ADR ONEM 
 3783 5078 D72A0000 		_UNNEST 
 3784              	
 3785              	/*********************************
 3786              	 DEFER! ( "name1" "name2" -- )
 3787              	 assign an action to a defered word 
 3788              	************************************/
 3789 507c 5C500000 		_HEADER DEFERSTO,6,"DEFER!"
 3789      06444546 
 3789      45522100 
 3790 5088 504700BF 		_NEST 
 3791 508c 91490000 		_ADR TICK 
 3792 5090 9D2F0000 		_ADR ONEP 
 3793 5094 91490000 		_ADR TICK 
 3794 5098 DD2F0000 		_ADR CELLP 
 3795 509c 752D0000 		_ADR STORE 
 3796 50a0 D72A0000 		_UNNEST
 3797              	
 3798              	/****************************
 3799              	  DEFER ( "name" -- )
 3800              	  create a defered definition
 3801              	*****************************/
 3802 50a4 80500000 		_HEADER DEFER,5,"DEFER"
 3802      05444546 
ARM GAS  forth.s 			page 179


 3802      455200BF 
 3803 50b0 504700BF 		_NEST 
 3804 50b4 01510000 		_ADR CREAT 
 3805 50b8 032D0000 		_DOLIT UNNEST 
 3805      D62A0000 
 3806 50c0 394F0000 		_ADR CALLC 
 3807 50c4 032D0000 		_DOLIT DEFER_NOP
 3807      E8500000 
 3808 50cc 9D2F0000 		_ADR ONEP 
 3809 50d0 71340000 		_ADR LAST 
 3810 50d4 892D0000 		_ADR AT 
 3811 50d8 8D430000 		_ADR NAMET 
 3812 50dc DD2F0000 		_ADR CELLP 
 3813 50e0 752D0000 		_ADR STORE 
 3814 50e4 D72A0000 		_UNNEST 
 3815              	DEFER_NOP:
 3816 50e8 504700BF 		_NEST  
 3817 50ec 012D0000 		_ADR NOP 
 3818 50f0 D72A0000 		_UNNEST 
 3819              	
 3820              	/******************************
 3821              	    CREATE	( -- //  string> )
 3822              	 	Compile a new array entry 
 3823              		without allocating code space.
 3824              	***********************************/
 3825 50f4 A8500000 		_HEADER CREAT,6,"CREATE"
 3825      06435245 
 3825      41544500 
 3826 5100 504700BF 		_NEST 
 3827 5104 6D430000 		_ADR	TOKEN
 3828 5108 E14D0000 		_ADR	SNAME
 3829 510c DD4E0000 		_ADR	OVERT
 3830 5110 E12A0000 		_ADR	COMPI_NEST 
 3831 5114 032D0000 		_DOLIT	DOVAR
 3831      FE320000 
 3832 511c 394F0000 		_ADR	CALLC
 3833 5120 D72A0000 		_UNNEST
 3834              	
 3835              	/*******************************
 3836              	    VARIABLE	( -- //  string> )
 3837              	 	Compile a new variable 
 3838              		initialized to 0.
 3839              	***********************************/
 3840 5124 F8500000 		_HEADER VARIA,8,"VARIABLE"
 3840      08564152 
 3840      4941424C 
 3840      450000BF 
 3841 5134 504700BF 		_NEST
 3842 5138 01510000 		_ADR	CREAT
 3843 513c 032D0000 		_DOLIT	0
 3843      00000000 
 3844 5144 D1490000 		_ADR	COMMA
 3845 5148 032D0000 		_DOLIT UNNEST
 3845      D62A0000 
 3846 5150 394F0000 		_ADR	CALLC  
 3847 5154 D72A0000 		_UNNEST
 3848              	
ARM GAS  forth.s 			page 180


 3849              	
 3850              	/***********
 3851              	  Tools
 3852              	***********/
 3853              	
 3854              	/*************************
 3855              	    dm+	 ( a u -- a )
 3856              	 	Dump u bytes from a , 
 3857              		leaving a+u on the stack.
 3858              		hidden word used by DUMP 
 3859              	****************************/
 3860              	DMP:
 3861 5158 504700BF 		_NEST
 3862 515c A12E0000 		_ADR	OVER
 3863 5160 032D0000 		_DOLIT	4
 3863      04000000 
 3864 5168 BD3F0000 		_ADR	UDOTR			// display address
 3865 516c 032D0000 		_DOLIT  0         // don't show base char 
 3865      00000000 
 3866 5174 9D330000 		_ADR    BCHR
 3867 5178 7D2E0000 		_ADR    DUPP
 3868 517c 892D0000 		_ADR    AT 
 3869 5180 F92D0000 		_ADR    TOR      // save original value of BCHAR 
 3870 5184 752D0000 		_ADR    STORE 
 3871 5188 053E0000 		_ADR	SPACE
 3872 518c F92D0000 		_ADR	TOR			// start count down loop
 3873 5190 572D0000 		_BRAN	PDUM2			// skip first pass
 3873      B0510000 
 3874              	PDUM1:
 3875 5198 7D2E0000 	    _ADR	DUPP
 3876 519c A92D0000 		_ADR	CAT
 3877 51a0 032D0000 		_DOLIT	3
 3877      03000000 
 3878 51a8 BD3F0000 		_ADR	UDOTR			// display numeric data
 3879 51ac 9D2F0000 		_ADR	ONEP			// increment address
 3880              	PDUM2:
 3881 51b0 252D0000 	    _ADR	DONXT
 3882 51b4 98510000 		.word	PDUM1	// loop till done
 3883 51b8 B52D0000 		_ADR    RFROM   // restore BCHAR value 
 3884 51bc 9D330000 		_ADR    BCHR 
 3885 51c0 752D0000 		_ADR    STORE 
 3886 51c4 D72A0000 		_UNNEST
 3887              		.p2align 2 
 3888              	//    DUMP	( a u -- )
 3889              	// 	Dump u bytes from a, in a formatted manner.
 3890              	
 3891              	/**********************
 3892              		DUMP ( a n -- )
 3893              		hex dump memory 
 3894              	*********************/
 3895 51c8 28510000 		_HEADER DUMP,4,"DUMP"
 3895      0444554D 
 3895      500000BF 
 3896 51d4 504700BF 		_NEST
 3897 51d8 032D0000 		_DOLIT  15 
 3897      0F000000 
 3898 51e0 412F0000 		_ADR    PLUS 
ARM GAS  forth.s 			page 181


 3899 51e4 032D0000 		_DOLIT  0xFFFFFFF0 
 3899      F0FFFFFF 
 3900 51ec C12E0000 		_ADR    ANDD 
 3901 51f0 8D2E0000 		_ADR    SWAP 
 3902 51f4 032D0000 		_DOLIT  0xFFFFFFFC
 3902      FCFFFFFF 
 3903 51fc C12E0000 		_ADR    ANDD 
 3904 5200 8D2E0000 		_ADR    SWAP 
 3905 5204 85330000 		_ADR	BASE
 3906 5208 892D0000 		_ADR	AT
 3907 520c F92D0000 		_ADR	TOR
 3908 5210 FD3A0000 		_ADR	HEX			// save radix,set hex
 3909 5214 032D0000 		_DOLIT	16
 3909      10000000 
 3910 521c 05370000 		_ADR	SLASH			// change count to lines
 3911 5220 F92D0000 		_ADR	TOR
 3912 5224 572D0000 		_BRAN	DUMP4			// start count down loop
 3912      54520000 
 3913              	DUMP1:
 3914 522c 8D3E0000 	    _ADR	CR
 3915 5230 032D0000 		_DOLIT	16
 3915      10000000 
 3916 5238 B5300000 		_ADR	DDUP
 3917 523c 59510000 		_ADR	DMP			// display numeric
 3918 5240 65300000 		_ADR	ROT
 3919 5244 65300000 		_ADR	ROT
 3920 5248 053E0000 		_ADR	SPACE
 3921 524c 053E0000 		_ADR	SPACE
 3922 5250 593E0000 		_ADR	TYPEE			// display printable characters
 3923              	DUMP4:
 3924 5254 252D0000 	  _DONXT	DUMP1	// loop till done
 3924      2C520000 
 3925              	DUMP3:
 3926 525c 6D2E0000 		_ADR	DROP
 3927 5260 B52D0000 		_ADR	RFROM
 3928 5264 85330000 		_ADR	BASE
 3929 5268 752D0000 		_ADR	STORE			// restore radix
 3930 526c D72A0000 		_UNNEST
 3931              	
 3932              	/*******************************
 3933              	   TRACE. display in hexadecimal
 3934              	   TRACE. use a different buffer 
 3935              	   than DOT  to avoid current 
 3936              	   display overwrite.
 3937              	*******************************/ 
 3938              	TDOT: // ( u -- )
 3939 5270 504700BF 		_NEST 
 3940 5274 85330000 		_ADR BASE 
 3941 5278 892D0000 		_ADR AT 
 3942 527c F92D0000 		_ADR TOR
 3943 5280 FD3A0000 		_ADR HEX  
 3944 5284 19340000 		_ADR HLD 
 3945 5288 892D0000 		_ADR AT 
 3946 528c F92D0000 		_ADR TOR   // R: base *hold 
 3947 5290 19380000 		_ADR HERE 
 3948 5294 032D0000 		_DOLIT 160 
 3948      A0000000 
ARM GAS  forth.s 			page 182


 3949 529c 412F0000 		_ADR PLUS
 3950 52a0 7D2E0000 		_ADR DUPP 
 3951 52a4 F92D0000 		_ADR TOR  
 3952 52a8 19340000 		_ADR HLD 
 3953 52ac 752D0000 		_ADR STORE
 3954 52b0 032D0000 		_DOLIT 0  
 3954      00000000 
 3955 52b8 4D3A0000 		_ADR DIGS  
 3956 52bc 6D2E0000 		_ADR DROP
 3957 52c0 032D0000 		_DOLIT '$'
 3957      24000000 
 3958 52c8 013A0000 		_ADR HOLD 
 3959 52cc 19340000 		_ADR HLD 
 3960 52d0 892D0000 		_ADR AT
 3961 52d4 B52D0000 		_ADR RFROM   
 3962 52d8 A12E0000 		_ADR OVER 
 3963 52dc 512F0000 		_ADR SUBB 
 3964 52e0 053E0000 		_ADR SPACE 
 3965 52e4 593E0000 		_ADR TYPEE 
 3966 52e8 B52D0000 		_ADR RFROM 
 3967 52ec 19340000 		_ADR HLD 
 3968 52f0 752D0000 		_ADR STORE 
 3969 52f4 B52D0000 		_ADR RFROM 
 3970 52f8 85330000 		_ADR BASE 
 3971 52fc 752D0000 		_ADR STORE 
 3972 5300 D72A0000 		_UNNEST 
 3973              	
 3974              	/**********************
 3975              	   .S	  ( ... -- ... )
 3976              	 	Display the contents 
 3977              		of the data stack.
 3978              	*************************/
 3979 5304 CC510000 		_HEADER DOTS,2,".S"
 3979      022E5300 
 3980 530c 504700BF 		_NEST
 3981 5310 CD370000 		_ADR	DEPTH	// stack depth
 3982 5314 F92D0000 		_ADR	TOR		// start count down loop
 3983 5318 572D0000 		_BRAN	DOTS2  // skip first pass
 3983      2C530000 
 3984              	DOTS1:
 3985 5320 E52D0000 		_ADR	RAT
 3986 5324 F1370000 		_ADR	PICK
 3987 5328 71520000 		_ADR	TDOT // index stack, display contents
 3988              	DOTS2:
 3989 532c 252D0000 		_DONXT	DOTS1 // loop till done
 3989      20530000 
 3990 5334 8D3E0000 		_ADR	CR 
 3991 5338 D72A0000 		_UNNEST
 3992              	
 3993              	RBASE: 
 3994 533c 47F8046D 		_PUSH 
 3995 5340 4FF47F46 		_MOV32 TOS,RPP 
 3995      C2F20106 
 3996 5348 FDF7C2BB 		_NEXT 
 3997              	
 3998              	
 3999              	/**************************
ARM GAS  forth.s 			page 183


 4000              	  R.  display return stack 
 4001              	**************************/
 4002              	RDOT: 
 4003 534c 504700BF 		_NEST 
 4004 5350 3D530000 		_ADR RBASE
 4005 5354 592E0000 		_ADR RPAT 
 4006 5358 512F0000 		_ADR SUBB
 4007 535c 21300000 		_ADR CELLSL   
 4008 5360 032D0000 		_DOLIT 2
 4008      02000000 
 4009 5368 512F0000 		_ADR SUBB 
 4010 536c F92D0000 		_ADR TOR
 4011 5370 3D530000 		_ADR RBASE 
 4012 5374 ED2F0000 	1:	_ADR CELLM 
 4013 5378 7D2E0000 		_ADR DUPP 
 4014 537c 892D0000 		_ADR AT 
 4015 5380 71520000 		_ADR TDOT 
 4016 5384 B52D0000 		_ADR RFROM   
 4017 5388 AD2F0000 		_ADR ONEM 
 4018 538c 7D2E0000 		_ADR DUPP
 4019 5390 F92D0000 		_ADR TOR 
 4020 5394 B5310000 		_ADR ZEQUAL   
 4021 5398 432D0000 		_QBRAN 1b
 4021      74530000 
 4022 53a0 B52D0000 		_ADR RFROM  
 4023 53a4 8D300000 		_ADR DDROP
 4024 53a8 8D3E0000 		_ADR CR   
 4025 53ac D72A0000 		_UNNEST 
 4026              	
 4027              	/**************************
 4028              		TRACE ( -- )
 4029              		display stacks content 
 4030              	**************************/
 4031 53b0 08530000 		_HEADER TRACE,5,"TRACE"
 4031      05545241 
 4031      434500BF 
 4032 53bc 504700BF 		_NEST
 4033 53c0 8D3E0000 		_ADR CR 
 4034 53c4 032D0000 		_DOLIT '>' 
 4034      3E000000 
 4035 53cc 032D0000 		_DOLIT 'S'
 4035      53000000 
 4036 53d4 A12B0000 		_ADR EMIT 
 4037 53d8 A12B0000 		_ADR EMIT  
 4038 53dc 0D530000 		_ADR DOTS
 4039 53e0 032D0000 		_DOLIT '>'
 4039      3E000000 
 4040 53e8 032D0000 		_DOLIT 'R'
 4040      52000000 
 4041 53f0 A12B0000 		_ADR EMIT 
 4042 53f4 A12B0000 		_ADR EMIT 
 4043 53f8 4D530000 		_ADR RDOT 
 4044 53fc D72A0000 		_UNNEST 
 4045              	
 4046              	
 4047              	/*****************************
 4048              	    >NAME	( ca -- na | F )
ARM GAS  forth.s 			page 184


 4049              	 	Convert code address 
 4050              		to a name address.
 4051              	*****************************/
 4052 5400 B4530000 		_HEADER TNAME,5,">NAME"
 4052      053E4E41 
 4052      4D4500BF 
 4053 540c 504700BF 		_NEST
 4054 5410 F92D0000 		_ADR	TOR			//  
 4055 5414 31340000 		_ADR	CNTXT			//  va
 4056 5418 892D0000 		_ADR	AT			//  na
 4057              	TNAM1:
 4058 541c 7D2E0000 		_ADR	DUPP			//  na na
 4059 5420 432D0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4059      50540000 
 4060 5428 7D2E0000 		_ADR	DUPP			//  na na
 4061 542c 8D430000 		_ADR	NAMET			//  na ca
 4062 5430 E52D0000 		_ADR	RAT			//  na ca code
 4063 5434 E92E0000 		_ADR	XORR			//  na f --
 4064 5438 432D0000 		_QBRAN	TNAM2
 4064      50540000 
 4065 5440 ED2F0000 		_ADR	CELLM			//  la 
 4066 5444 892D0000 		_ADR	AT			//  next_na
 4067 5448 572D0000 		_BRAN	TNAM1
 4067      1C540000 
 4068              	TNAM2:	
 4069 5450 B52D0000 		_ADR	RFROM
 4070 5454 6D2E0000 		_ADR	DROP			//  0|na --
 4071 5458 D72A0000 		_UNNEST			// 0
 4072              	
 4073              	/********************************
 4074              	    .ID	 ( na -- )
 4075              	 	Display the name at address.
 4076              	********************************/
 4077 545c 04540000 		_HEADER DOTID,3,".ID"
 4077      032E4944 
 4078 5464 504700BF 		_NEST
 4079 5468 51300000 		_ADR	QDUP			// if zero no name
 4080 546c 432D0000 		_QBRAN	DOTI1
 4080      8C540000 
 4081 5474 D1320000 		_ADR	COUNT
 4082 5478 032D0000 		_DOLIT	0x1F
 4082      1F000000 
 4083 5480 C12E0000 		_ADR	ANDD			// mask lexicon bits
 4084 5484 593E0000 		_ADR	TYPEE
 4085 5488 D72A0000 		_UNNEST			// display name string
 4086              	DOTI1:
 4087 548c F53E0000 		_DOTQP	9," {noName}"
 4087      09207B6E 
 4087      6F4E616D 
 4087      657D00BF 
 4088 549c D72A0000 		_UNNEST
 4089              	
 4090              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4091              	.if WANT_SEE 
 4092              	/*******************************
 4093              	    SEE	 ( -- //  string> )
 4094              	 	A simple decompiler.
ARM GAS  forth.s 			page 185


 4095              	*******************************/
 4096              		_HEADER SEE,3,"SEE"
 4097              		_NEST
 4098              		_ADR	TICK	//  ca --, starting address
 4099              		_ADR	CR	
 4100              		_DOLIT	20
 4101              		_ADR	TOR
 4102              	SEE1:
 4103              		_ADR	CELLP			//  a
 4104              		_ADR	DUPP			//  a a
 4105              		_ADR	DECOMP		//  a
 4106              		_DONXT	SEE1
 4107              		_ADR	DROP
 4108              		_UNNEST
 4109              	
 4110              	/*************************
 4111              	 	DECOMPILE ( a -- )
 4112              	 	Convert code in a.  
 4113              		Display name of command or as data.
 4114              	*************************************/
 4115              		_HEADER DECOMP,9,"DECOMPILE"
 4116              		_NEST
 4117              		_ADR	DUPP			//  a a
 4118              	// 	_ADR	TOR			//  a
 4119              		_ADR	AT			//  a code
 4120              		_ADR	DUPP			//  a code code
 4121              		_DOLIT	0xF800D000 //0xF800F800
 4122              		_ADR	ANDD
 4123              		_DOLIT	0xF000D000 //0xF800F000
 4124              		_ADR	EQUAL			//  a code ?
 4125              		_ADR	INVER 
 4126              		_QBRAN	DECOM2	//  not a command
 4127              		//  a valid_code --, extract address and display name
 4128              		MOVW	IP,#0xFFE
 4129              		MOV	WP,TOS
 4130              		LSL	TOS,TOS,#21		//  get bits 22-12
 4131              		ASR	TOS,TOS,#9		//  with sign extension
 4132              		LSR	WP,WP,#15		//  get bits 11-1
 4133              		AND	WP,WP,IP		//  retain only bits 11-1
 4134              		ORR	TOS,TOS,WP		//  get bits 22-1
 4135              		NOP
 4136              		_ADR	OVER			//  a offset a
 4137              		_ADR	PLUS			//  a target-4
 4138              		_ADR	CELLP			//  a target
 4139              		_ADR	TNAME			//  a na/0 --, is it a name?
 4140              		_ADR	QDUP			//  name address or zero
 4141              		_QBRAN	DECOM1
 4142              		_ADR	SPACE			//  a na
 4143              		_ADR	DOTID			//  a --, display name
 4144              	// 	_ADR	RFROM			//  a
 4145              		_ADR	DROP
 4146              		_UNNEST
 4147              	DECOM1:	// _ADR	RFROM		//  a
 4148              		_ADR	AT			//  data
 4149              		_ADR	UDOT			//  display data
 4150              		_UNNEST
 4151              	DECOM2:
ARM GAS  forth.s 			page 186


 4152              		_ADR	UDOT
 4153              	// 	_ADR	RFROM
 4154              		_ADR	DROP
 4155              		_UNNEST
 4156              	.endif 
 4157              	
 4158              	/**********************
 4159              		VLIST ( -- )
 4160              		WORDS alias 
 4161              		+ display words count 
 4162              	**********************/
 4163 54a0 60540000 		_HEADER VLIST,5,"VLIST"
 4163      05564C49 
 4163      535400BF 
 4164 54ac 504700BF 		_NEST 
 4165 54b0 D1540000 		_ADR WORDS
 4166 54b4 8D3E0000 		_ADR CR 
 4167 54b8 15550000 		_ADR WC
 4168 54bc 25400000 		_ADR DOT    
 4169 54c0 D72A0000 		_UNNEST 
 4170              	
 4171              	/*********************
 4172              	    WORDS	( -- )
 4173              	 	Display the names 
 4174              		in the context vocabulary.
 4175              	*******************************/
 4176 54c4 A4540000 		_HEADER WORDS,5,"WORDS"
 4176      05574F52 
 4176      445300BF 
 4177 54d0 504700BF 		_NEST
 4178 54d4 8D3E0000 		_ADR	CR
 4179 54d8 31340000 		_ADR	CNTXT
 4180 54dc 892D0000 		_ADR	AT			// only in context
 4181              	WORS1:
 4182 54e0 51300000 		_ADR	QDUP			// ?at end of list
 4183 54e4 432D0000 		_QBRAN	WORS2
 4183      08550000 
 4184 54ec 7D2E0000 		_ADR	DUPP
 4185 54f0 053E0000 		_ADR	SPACE
 4186 54f4 65540000 		_ADR	DOTID			// display a name
 4187 54f8 ED2F0000 		_ADR	CELLM
 4188 54fc 892D0000 		_ADR	AT
 4189 5500 572D0000 		_BRAN	WORS1
 4189      E0540000 
 4190              	WORS2:
 4191 5508 D72A0000 		_UNNEST
 4192              	
 4193              	/*****************************
 4194              		WC ( - n )
 4195              		count words in dictionary 
 4196              	******************************/
 4197 550c C8540000 		_HEADER WC,2,"WC"
 4197      02574300 
 4198 5514 504700BF 		_NEST 
 4199 5518 032D0000 		_DOLIT 0 
 4199      00000000 
 4200 5520 71340000 		_ADR LAST
ARM GAS  forth.s 			page 187


 4201 5524 892D0000 	1:	_ADR AT
 4202 5528 51300000 		_ADR QDUP
 4203 552c 432D0000 		_QBRAN 9f
 4203      4C550000 
 4204 5534 8D2E0000 		_ADR SWAP
 4205 5538 9D2F0000 		_ADR ONEP
 4206 553c 8D2E0000 		_ADR SWAP
 4207 5540 ED2F0000 		_ADR CELLM
 4208 5544 572D0000 		_BRAN 1b
 4208      24550000 
 4209 554c D72A0000 	9:	_UNNEST 
 4210              	
 4211              	/*************************
 4212              		MARK <string> ( -- )
 4213              	    create forget point 
 4214              		in dictionary 
 4215              	*************************/	
 4216 5550 10550000 		_HEADER MARK,4,"MARK"
 4216      044D4152 
 4216      4B0000BF 
 4217 555c 504700BF 		_NEST
 4218 5560 01510000 		_ADR CREAT 
 4219 5564 F54F0000 		_ADR DODOES 
 4220 5568 D72A0000 		_UNNEST
 4221 556c 504700BF 		_NEST  
 4222 5570 B52D0000 		_ADR RFROM 
 4223 5574 032D0000 		_DOLIT 8
 4223      08000000 
 4224 557c 512F0000 		_ADR SUBB
 4225 5580 0D540000 		_ADR TNAME
 4226 5584 ED2F0000 		_ADR CELLM
 4227 5588 892D0000 		_ADR AT  
 4228 558c 71340000 		_ADR LAST 
 4229 5590 752D0000 		_ADR STORE 
 4230 5594 DD4E0000 		_ADR OVERT
 4231 5598 D72A0000 		_UNNEST 
 4232              	
 4233              	/*********************************
 4234              		ARRAY "name" ( n -- )
 4235              	    create an array of n elements 
 4236              	*********************************/
 4237 559c 54550000 		_HEADER ARRAY,5,"ARRAY"
 4237      05415252 
 4237      415900BF 
 4238 55a8 504700BF 		_NEST 
 4239 55ac 6D430000 		_ADR	TOKEN
 4240 55b0 E14D0000 		_ADR	SNAME
 4241 55b4 DD4E0000 		_ADR	OVERT
 4242 55b8 E12A0000 		_ADR	COMPI_NEST
 4243 55bc 032D0000 		_DOLIT	DO_ARRAY
 4243      E8550000 
 4244 55c4 394F0000 		_ADR	CALLC
 4245 55c8 032D0000 		_DOLIT	UNNEST 
 4245      D62A0000 
 4246 55d0 394F0000 		_ADR	CALLC  
 4247 55d4 032D0000 		_DOLIT  4 
 4247      04000000 
ARM GAS  forth.s 			page 188


 4248 55dc 612F0000 		_ADR    STAR 
 4249 55e0 B9490000 		_ADR    ALLOT 
 4250 55e4 D72A0000 		_UNNEST 	
 4251              	
 4252              	// does> du array
 4253              	DO_ARRAY:
 4254 55e8 504700BF 		_NEST  
 4255 55ec 032D0000 		_DOLIT 4 
 4255      04000000 
 4256 55f4 612F0000 		_ADR STAR  
 4257 55f8 E52D0000 		_ADR RAT  
 4258 55fc DD2F0000 		_ADR CELLP 
 4259 5600 412F0000 		_ADR PLUS  
 4260 5604 D72A0000 		_UNNEST 
 4261              	
 4262              	
 4263              	/****************
 4264              	  cold start
 4265              	*****************/
 4266              	
 4267              	/**********************************
 4268              	    VER	 ( -- n )
 4269              	 	Return the version 
 4270              		number of this implementation.
 4271              	hidden word used by COLD
 4272              	**********************************/
 4273              	VERSN:
 4274 5608 504700BF 		_NEST
 4275 560c 032D0000 		_DOLIT	VER*256+EXT
 4275      00010000 
 4276 5614 D72A0000 		_UNNEST
 4277              	
 4278              	/*********************
 4279              	    hi	  ( -- )
 4280              	 	Display the sign-on 
 4281              		message.
 4282              	***********************/
 4283 5618 A0550000 		_HEADER HI,2,"HI"
 4283      02484900 
 4284 5620 504700BF 		_NEST
 4285 5624 8D3E0000 		_ADR	CR	// initialize I/O
 4286 5628 F53E0000 		_DOTQP	17, "beyond Jupiter, v" 
 4286      11626579 
 4286      6F6E6420 
 4286      4A757069 
 4286      7465722C 
 4287 5640 85330000 		_ADR	BASE
 4288 5644 892D0000 		_ADR	AT
 4289 5648 FD3A0000 		_ADR	HEX	// save radix
 4290 564c 09560000 		_ADR	VERSN
 4291 5650 E1390000 		_ADR	BDIGS
 4292 5654 032D0000 		_DOLIT  0 
 4292      00000000 
 4293 565c 2D3A0000 		_ADR	DIG
 4294 5660 2D3A0000 		_ADR	DIG
 4295 5664 032D0000 		_DOLIT	'.'
 4295      2E000000 
ARM GAS  forth.s 			page 189


 4296 566c 013A0000 		_ADR	HOLD
 4297 5670 4D3A0000 		_ADR	DIGS
 4298 5674 A93A0000 		_ADR	EDIGS
 4299 5678 593E0000 		_ADR	TYPEE	// format version number
 4300 567c 85330000 		_ADR	BASE
 4301 5680 752D0000 		_ADR	STORE
 4302 5684 8D3E0000 		_ADR	CR
 4303 5688 D72A0000 		_UNNEST			// restore radix
 4304              	
 4305              	/***********************
 4306              	   HI_BOTH ( -- )
 4307              	   display sign-on 
 4308              	   on both CONSOLE
 4309              	***********************/
 4310              	HI_BOTH:
 4311 568c 504700BF 	    _NEST 
 4312 5690 3D0A0000 		_ADR LOCAL 
 4313 5694 6D0A0000 		_ADR CONSOLE 
 4314 5698 21560000 		_ADR HI 
 4315 569c 550A0000 		_ADR SERIAL 
 4316 56a0 6D0A0000 		_ADR CONSOLE 
 4317 56a4 21560000 		_ADR HI
 4318 56a8 D72A0000 		_UNNEST 
 4319              	
 4320              	/**********************
 4321              	 check if PS2 keyboard 
 4322              	 present.
 4323              	**********************/
 4324              	PS2_QUERY: 
 4325 56ac 504700BF 		_NEST 
 4326 56b0 032D0000 		_DOLIT 400 
 4326      90010000 
 4327 56b8 392C0000 		_ADR PAUSE
 4328 56bc 5D180000 		_ADR PS2_QKEY
 4329 56c0 432D0000 		_QBRAN 1f
 4329      DC560000 
 4330 56c8 032D0000 		_DOLIT BAT_OK 
 4330      AA000000 
 4331 56d0 E92E0000 		_ADR XORR 
 4332 56d4 432D0000 		_QBRAN 9f 
 4332      20570000 
 4333 56dc 451A0000 	1:	_ADR KBD_RST
 4334 56e0 032D0000 		_DOLIT BAT_OK 
 4334      AA000000 
 4335 56e8 E92E0000 		_ADR XORR  
 4336 56ec 432D0000 		_QBRAN 9f  
 4336      20570000 
 4337              	// no ps2 keyboard 
 4338              	// swith to serial console
 4339 56f4 8D3E0000 		_ADR CR 
 4340 56f8 F53E0000 		_DOTQP 25,"no PS2 keyboard detected."
 4340      196E6F20 
 4340      50533220 
 4340      6B657962 
 4340      6F617264 
 4341 5718 550A0000 		_ADR SERIAL 
 4342 571c 6D0A0000 		_ADR CONSOLE 
ARM GAS  forth.s 			page 190


 4343 5720 D72A0000 	9:	_UNNEST 
 4344              	
 4345              	/*************************
 4346              	   check PA8 to 
 4347              	   select console 
 4348              	   PA8 -> low  LOCAL 
 4349              	   PA8 -> high SERIAL 
 4350              	*************************/
 4351              	IF_SENSE:
 4352 5724 504700BF 		_NEST 
 4353 5728 3D0A0000 		_ADR LOCAL 
 4354 572c 032D0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4354      10000240 
 4355 5734 892D0000 		_ADR AT 
 4356 5738 032D0000 		_DOLIT (1<<8)
 4356      00010000 
 4357 5740 C12E0000 		_ADR ANDD 
 4358 5744 432D0000 		_QBRAN 9f 
 4358      50570000 
 4359 574c 9D2F0000 		_ADR ONEP 
 4360 5750 6D0A0000 	9:  _ADR CONSOLE 
 4361 5754 D72A0000 		_UNNEST 
 4362              	
 4363              	/****************************
 4364              	   display READY on active
 4365              	   console
 4366              	***************************/
 4367              	READY:
 4368 5758 504700BF 	    _NEST 
 4369 575c F53E0000 		_DOTQP 5,"READY"
 4369      05524541 
 4369      445900BF 
 4370 5768 8D3E0000 		_ADR  CR 
 4371 576c D72A0000 	    _UNNEST 
 4372              	
 4373              	/********************
 4374              	    COLD	( -- )
 4375              	 	The high level cold 
 4376              		start sequence.
 4377              	**************************/
 4378 5770 1C560000 		.word	LINK 
 4379              		LINK = . 
 4380 5774 04       	_LASTN:	.byte  4
 4381 5775 434F4C44 		.ascii "COLD"
 4382 5779 0000BF   		.p2align 2	
 4383              	COLD:
 4384 577c 00B5FAF7 		_CALL forth_init 
 4384      DBFE5DF8 
 4384      04EB
 4385 5786 DFF85CC0 		ldr IP,=COLD1 
 4386 578a FDF7A1B9 		_NEXT
 4387 578e 00BF     		.p2align 2 
 4388              	COLD1:
 4389 5790 032D0000 		_DOLIT  0 
 4389      00000000 
 4390 5798 6D2C0000 		_ADR ULED // turn off user LED 
 4391 579c 032D0000 		_DOLIT	UZERO
ARM GAS  forth.s 			page 191


 4391      64080000 
 4392 57a4 032D0000 		_DOLIT	UPP
 4392      00000020 
 4393 57ac 032D0000 		_DOLIT	ULAST-UZERO
 4393      B8000000 
 4394 57b4 B9380000 		_ADR	MOVE 			// initialize user area
 4395 57b8 F1480000 		_ADR	PRESE			// initialize stack and TIB
 4396 57bc F11C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4397 57c0 AD560000 		_ADR 	PS2_QUERY  
 4398 57c4 6D330000 		_ADR	TBOOT
 4399 57c8 69380000 		_ADR	ATEXE			// application boot
 4400 57cc DD4E0000 		_ADR	OVERT
 4401 57d0 25570000 		_ADR	IF_SENSE
 4402 57d4 59570000 		_ADR    READY 
 4403 57d8 572D0000 		_BRAN	QUIT			// start interpretation
 4403      10490000 
 4404              	COLD2:
 4405              		.p2align 2 	
 4406              	CTOP:
 4407 57e0 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4408              	
 4409              	
 4410 57e4 90570000 	  .end 
ARM GAS  forth.s 			page 192


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 193


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 194


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 195


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 196


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 197


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 BCHAR
          macros.inc:81     *ABS*:0000000000000024 TMP
          macros.inc:82     *ABS*:0000000000000028 CSPAN
          macros.inc:83     *ABS*:000000000000002c TOIN
ARM GAS  forth.s 			page 198


          macros.inc:84     *ABS*:0000000000000030 NTIBB
          macros.inc:85     *ABS*:0000000000000034 TIBUF
             forth.s:3088   .text:00000000000048ac EVAL
          macros.inc:87     *ABS*:000000000000003c VHOLD
          macros.inc:88     *ABS*:0000000000000040 CTXT
          macros.inc:89     *ABS*:0000000000000044 FORTH_CTOP
          macros.inc:90     *ABS*:0000000000000048 USER_CTOP
          macros.inc:91     *ABS*:000000000000004c LASTN
          macros.inc:92     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:93     *ABS*:0000000000000050 RX_QUEUE
          macros.inc:94     *ABS*:0000000000000060 RX_HEAD
          macros.inc:95     *ABS*:0000000000000064 RX_TAIL
          macros.inc:96     *ABS*:0000000000000068 VID_CNTR
          macros.inc:97     *ABS*:000000000000006c VID_STATE
          macros.inc:98     *ABS*:0000000000000070 VID_FIELD
          macros.inc:99     *ABS*:0000000000000074 VID_BUFFER
          macros.inc:100    *ABS*:0000000000000078 KBD_STRUCT
          macros.inc:101    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:102    *ABS*:000000000000007c KBD_QUEUE
          macros.inc:103    *ABS*:000000000000008c KBD_QHEAD
          macros.inc:104    *ABS*:0000000000000090 KBD_QTAIL
          macros.inc:105    *ABS*:0000000000000094 ROW
          macros.inc:106    *ABS*:0000000000000098 COL
          macros.inc:107    *ABS*:000000000000009c BK_COLOR
          macros.inc:108    *ABS*:00000000000000a0 PEN_COLOR
          macros.inc:109    *ABS*:00000000000000a4 VFPSW
          macros.inc:110    *ABS*:00000000000000a8 VFBASE
          macros.inc:111    *ABS*:00000000000000ac TONE_DTMR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000c64 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000948 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001540 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002ad0 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3109   .text:00000000000048f0 PRESE
             forth.s:2282   .text:0000000000003ef4 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:0000000000002b20 CFSR
             forth.s:528    .text:0000000000002e7c DUPP
             forth.s:463    .text:0000000000002df8 TOR
ARM GAS  forth.s 			page 199


             forth.s:326    .text:0000000000002d02 DOLIT
             forth.s:1153   .text:0000000000003384 BASE
             forth.s:397    .text:0000000000002d74 STORE
             forth.s:2366   .text:0000000000003ff0 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:434    .text:0000000000002db4 RFROM
             forth.s:563    .text:0000000000002ec0 ANDD
             forth.s:367    .text:0000000000002d42 QBRAN
             forth.s:144    .text:0000000000002b44 BFAR
             forth.s:178    .text:0000000000002ba0 EMIT
             forth.s:2178   .text:0000000000003e04 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:89     .text:0000000000002020 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2224   .text:0000000000003e8c CR
             forth.s:407    .text:0000000000002d88 AT
             forth.s:629    .text:0000000000002f50 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2384   .text:0000000000004024 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:759    .text:0000000000003050 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:620    .text:0000000000002f40 PLUS
             forth.s:1066   .text:00000000000032d0 COUNT
             forth.s:2206   .text:0000000000003e58 TYPEE
             forth.s:903    .text:0000000000003184 CLZ
             forth.s:536    .text:0000000000002e8c SWAP
             forth.s:611    .text:0000000000002f30 LSHIFT
               fpu.s:102    .text:0000000000002040 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3121   .text:0000000000004910 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:2987   .text:0000000000004768 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
ARM GAS  forth.s 			page 200


              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:261    .text:0000000000002c6c ULED
             forth.s:1126   .text:000000000000333c MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:602    .text:0000000000002f18 RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:0000000000001fea fpu_init
          ser-term.s:56     .text:0000000000000976 ser_init
             tvout.s:74     .text:0000000000000bb4 tv_init
           ps2_kbd.s:307    .text:0000000000001760 kbd_init
         spi-flash.s:41     .text:0000000000001b74 flash_spi_init
             forth.s:4383   .text:000000000000577c COLD
             forth.s:83     .text:0000000000002ac8 NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:908    .text:000000000000091c ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:4310   .text:000000000000568c HI_BOTH
           ps2_kbd.s:396    .text:000000000000185c PS2_QKEY
             tvout.s:563    .text:0000000000001124 TV_EMIT
             forth.s:3025   .text:00000000000047c8 INTER
             forth.s:4380   .text:0000000000005774 _LASTN
             forth.s:4406   .text:00000000000057e0 CTOP
             forth.s:4379   .text:0000000000005774 LINK
ARM GAS  forth.s 			page 201


              init.s:913    .text:000000000000091c $d
          ser-term.s:33     .text:0000000000000948 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:00000000000009ce $d
          ser-term.s:90     .text:00000000000009d2 _SER_QKEY
          ser-term.s:90     .text:00000000000009dc SER_QKEY
          ser-term.s:110    .text:0000000000000a08 $d
          ser-term.s:110    .text:0000000000000a0c _SER_EMIT
          ser-term.s:110    .text:0000000000000a18 SER_EMIT
          ser-term.s:124    .text:0000000000000a32 $d
          ser-term.s:124    .text:0000000000000a36 _LOCAL
          ser-term.s:124    .text:0000000000000a3c $t
          ser-term.s:124    .text:0000000000000a3c LOCAL
          ser-term.s:133    .text:0000000000000a48 $d
          ser-term.s:133    .text:0000000000000a4c _SERIAL
          ser-term.s:133    .text:0000000000000a54 SERIAL
          ser-term.s:142    .text:0000000000000a60 $d
          ser-term.s:142    .text:0000000000000a64 _CONSOLE
          ser-term.s:142    .text:0000000000000a6c $t
          ser-term.s:142    .text:0000000000000a6c CONSOLE
          ser-term.s:164    .text:0000000000000a8c $d
          ser-term.s:164    .text:0000000000000a90 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000a9c ANSI_PARAM
          ser-term.s:166    .text:0000000000000aa0 $d
             forth.s:670    .text:0000000000002f9c ONEP
             forth.s:1526   .text:00000000000036cc SLMOD
             forth.s:382    .text:0000000000002d56 BRAN
             forth.s:678    .text:0000000000002fac ONEM
             forth.s:90     .text:0000000000002ad6 UNNEST
          ser-term.s:191    .text:0000000000000b0c _ANSI_ESC
          ser-term.s:191    .text:0000000000000b14 ANSI_ESC
          ser-term.s:193    .text:0000000000000b18 $d
          ser-term.s:203    .text:0000000000000b38 _SER_AT
          ser-term.s:203    .text:0000000000000b40 SER_AT
          ser-term.s:205    .text:0000000000000b44 $d
          ser-term.s:219    .text:0000000000000b74 _SER_CLS
          ser-term.s:219    .text:0000000000000b7c $t
          ser-term.s:219    .text:0000000000000b7c SER_CLS
          ser-term.s:221    .text:0000000000000b80 $d
          ser-term.s:228    .text:0000000000000ba4 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
ARM GAS  forth.s 			page 202


             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000bb4 $t
             tvout.s:150    .text:0000000000000c90 state_vsync
             tvout.s:191    .text:0000000000000ce4 state_pre_video
             tvout.s:202    .text:0000000000000cf6 state_video_out
             tvout.s:237    .text:0000000000000d54 state_post_video
             tvout.s:254    .text:0000000000000d7a tv_isr_exit
             tvout.s:180    .text:0000000000000cca sync_end
             tvout.s:246    .text:0000000000000d66 frame_end
             tvout.s:264    .text:0000000000000d7c $d
             tvout.s:264    .text:0000000000000d80 _BACKCOLOR
             tvout.s:264    .text:0000000000000d8c BACKCOLOR
             tvout.s:271    .text:0000000000000d98 $d
             tvout.s:271    .text:0000000000000d9c _PENCOLOR
             tvout.s:271    .text:0000000000000da6 $t
             tvout.s:271    .text:0000000000000da8 PENCOLOR
             tvout.s:278    .text:0000000000000db4 $d
             tvout.s:278    .text:0000000000000db8 _CURSOR_COL
             tvout.s:278    .text:0000000000000dc0 CURSOR_COL
             tvout.s:285    .text:0000000000000dcc $d
             tvout.s:285    .text:0000000000000dd0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000dd4 $t
             tvout.s:285    .text:0000000000000dd4 CURSOR_ROW
             tvout.s:292    .text:0000000000000de0 $d
             tvout.s:292    .text:0000000000000de4 _ROWY
             tvout.s:292    .text:0000000000000dea $t
             tvout.s:292    .text:0000000000000dec ROWY
             tvout.s:299    .text:0000000000000df8 $d
             tvout.s:299    .text:0000000000000dfc _COLX
             tvout.s:299    .text:0000000000000e02 $t
             tvout.s:299    .text:0000000000000e04 COLX
             tvout.s:306    .text:0000000000000e10 $d
             tvout.s:306    .text:0000000000000e14 _FONT
             tvout.s:306    .text:0000000000000e1c FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000e28 $d
             tvout.s:313    .text:0000000000000e2c _VIDBUFF
             tvout.s:313    .text:0000000000000e34 $t
             tvout.s:313    .text:0000000000000e34 VIDBUFF
             tvout.s:325    .text:0000000000000e3e $d
             tvout.s:325    .text:0000000000000e42 _PLOT
             tvout.s:325    .text:0000000000000e48 PLOT
             tvout.s:373    .text:0000000000000ecc plot_op
             tvout.s:341    .text:0000000000000e74 op_back
             tvout.s:350    .text:0000000000000e8e op_pen
ARM GAS  forth.s 			page 203


             tvout.s:359    .text:0000000000000ea8 op_invert
             tvout.s:363    .text:0000000000000eb0 op_xor
             tvout.s:373    .text:0000000000000ecc $d
             tvout.s:378    .text:0000000000000ed4 _VSYNC
             tvout.s:378    .text:0000000000000eda $t
             tvout.s:378    .text:0000000000000edc VSYNC
             tvout.s:386    .text:0000000000000ee6 $d
             tvout.s:386    .text:0000000000000eea _CLS
             tvout.s:386    .text:0000000000000eee $t
             tvout.s:386    .text:0000000000000ef0 CLS
             tvout.s:410    .text:0000000000000f32 $d
             tvout.s:410    .text:0000000000000f36 _CLRLINE
             tvout.s:410    .text:0000000000000f3e $t
             tvout.s:410    .text:0000000000000f40 CLRLINE
             tvout.s:412    .text:0000000000000f44 $d
             forth.s:638    .text:0000000000002f60 STAR
             forth.s:1753   .text:0000000000003900 FILL
             tvout.s:427    .text:0000000000000f78 _SCROLLUP
             tvout.s:427    .text:0000000000000f84 SCROLLUP
             tvout.s:429    .text:0000000000000f88 $d
             forth.s:1721   .text:00000000000038b8 MOVE
             tvout.s:448    .text:0000000000000fd0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000fdc SCROLLDOWN
             tvout.s:450    .text:0000000000000fe0 $d
             tvout.s:467    .text:0000000000001020 _TV_CRLF
             tvout.s:467    .text:0000000000001028 $t
             tvout.s:467    .text:0000000000001028 TV_CRLF
             tvout.s:482    .text:000000000000104a $d
             tvout.s:482    .text:000000000000104e _RIGHT
             tvout.s:482    .text:0000000000001054 $t
             tvout.s:482    .text:0000000000001054 RIGHT
             tvout.s:495    .text:0000000000001068 $d
             tvout.s:495    .text:000000000000106c _LEFT
             tvout.s:495    .text:0000000000001074 LEFT
             tvout.s:511    .text:00000000000010a0 FONT_PIXEL
             tvout.s:518    .text:00000000000010b0 INCR_X
             tvout.s:525    .text:00000000000010bc NEXT_PIXEL
             tvout.s:534    .text:00000000000010c4 CHAR_ROW
             tvout.s:536    .text:00000000000010c8 $d
             forth.s:809    .text:00000000000030b4 DDUP
             forth.s:454    .text:0000000000002de4 RAT
             forth.s:348    .text:0000000000002d24 DONXT
             forth.s:800    .text:00000000000030a0 TDROP
             tvout.s:551    .text:0000000000001104 CHAR_FONT
             tvout.s:552    .text:0000000000001104 $t
             tvout.s:563    .text:0000000000001118 $d
             tvout.s:563    .text:000000000000111c _TV_EMIT
             tvout.s:563    .text:0000000000001124 $t
             tvout.s:565    .text:0000000000001128 $d
             forth.s:962    .text:0000000000003200 ULESS
             tvout.s:593    .text:00000000000011ac CTRL_KEY
             forth.s:769    .text:0000000000003064 ROT
             forth.s:425    .text:0000000000002da8 CAT
             tvout.s:660    .text:0000000000001294 SHOW_CURSOR
             tvout.s:691    .text:000000000000131c HIDE_CURSOR
             forth.s:937    .text:00000000000031c8 EQUAL
             tvout.s:650    .text:0000000000001274 BACK_SPACE
ARM GAS  forth.s 			page 204


             forth.s:520    .text:0000000000002e6c DROP
             tvout.s:618    .text:000000000000121c CAR_RET
             tvout.s:629    .text:0000000000001234 LN_FEED
             tvout.s:619    .text:000000000000121c $t
             tvout.s:620    .text:0000000000001220 $d
             tvout.s:630    .text:0000000000001234 $t
             tvout.s:631    .text:0000000000001238 $d
             forth.s:581    .text:0000000000002ee8 XORR
             tvout.s:651    .text:0000000000001274 $t
             tvout.s:652    .text:0000000000001278 $d
             tvout.s:660    .text:0000000000001288 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001294 $t
             tvout.s:663    .text:0000000000001298 $d
             forth.s:751    .text:0000000000003040 TWOSL
             forth.s:415    .text:0000000000002d94 CSTOR
             forth.s:791    .text:000000000000308c DDROP
             tvout.s:691    .text:0000000000001310 _HIDE_CURSOR
             tvout.s:691    .text:000000000000131c $t
             tvout.s:694    .text:0000000000001320 $d
             forth.s:572    .text:0000000000002ed4 ORR
             tvout.s:704    .text:0000000000001348 _TV_AT
             tvout.s:704    .text:000000000000134e $t
             tvout.s:704    .text:0000000000001350 TV_AT
             tvout.s:719    .text:0000000000001374 $d
             tvout.s:719    .text:0000000000001378 _INPUT
             tvout.s:719    .text:000000000000137e $t
             tvout.s:719    .text:0000000000001380 INPUT
             tvout.s:721    .text:0000000000001384 $d
             forth.s:1665   .text:0000000000003830 PAD
             forth.s:2933   .text:00000000000046b4 ACCEP
             forth.s:546    .text:0000000000002ea0 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:00000000000013b0 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
ARM GAS  forth.s 			page 205


       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
ARM GAS  forth.s 			page 206


       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:00000000000013bc sc_ascii
         mcSaite.inc:100    .text:0000000000001470 shifted
         mcSaite.inc:151    .text:00000000000014d0 altchar
         mcSaite.inc:167    .text:00000000000014e0 extended
ARM GAS  forth.s 			page 207


         mcSaite.inc:191    .text:0000000000001508 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007a KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000079 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000078 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007b KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000153e $t
           ps2_kbd.s:179    .text:000000000000166a send_bit
           ps2_kbd.s:107    .text:00000000000015a0 start_bit
           ps2_kbd.s:118    .text:00000000000015c4 parity_bit
           ps2_kbd.s:125    .text:00000000000015d8 stop_bit
           ps2_kbd.s:152    .text:000000000000162e store_code
           ps2_kbd.s:253    .text:00000000000016fe do_async_key
           ps2_kbd.s:204    .text:00000000000016ae send_parity
           ps2_kbd.s:211    .text:00000000000016c0 send_stop
           ps2_kbd.s:218    .text:00000000000016ca rx_ack_bit
           ps2_kbd.s:236    .text:00000000000016ea is_async_key
           ps2_kbd.s:286    .text:000000000000174e async_keys
           ps2_kbd.s:378    .text:0000000000001834 table_scan
           ps2_kbd.s:260    .text:0000000000001710 set_async_key
           ps2_kbd.s:295    .text:000000000000175c async_jump
           ps2_kbd.s:265    .text:000000000000171e shift_key
           ps2_kbd.s:273    .text:000000000000172e set_reset
           ps2_kbd.s:268    .text:0000000000001724 ctrl_key
           ps2_kbd.s:271    .text:000000000000172a alt_key
           ps2_kbd.s:287    .text:000000000000174e $d
           ps2_kbd.s:340    .text:00000000000017dc $d
           ps2_kbd.s:340    .text:00000000000017e0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000017ea $t
           ps2_kbd.s:340    .text:00000000000017ec KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000017fc keycode
           ps2_kbd.s:365    .text:0000000000001824 wait_code
           ps2_kbd.s:396    .text:000000000000184e $d
           ps2_kbd.s:396    .text:0000000000001852 _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000018a8 inkey_exit
           ps2_kbd.s:418    .text:00000000000018ac pause_key
           ps2_kbd.s:427    .text:00000000000018c2 do_modifiers
           ps2_kbd.s:436    .text:00000000000018da shift_down
           ps2_kbd.s:440    .text:00000000000018e0 altchar_down
           ps2_kbd.s:444    .text:00000000000018e6 ctrl_down
           ps2_kbd.s:452    .text:0000000000001902 do_capslock
           ps2_kbd.s:478    .text:0000000000001926 kbd_send
           ps2_kbd.s:553    .text:0000000000001a1a kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001a38 $d
           ps2_kbd.s:567    .text:0000000000001a3c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001a44 $t
           ps2_kbd.s:567    .text:0000000000001a44 KBD_RST
ARM GAS  forth.s 			page 208


           ps2_kbd.s:591    .text:0000000000001a8e $d
           ps2_kbd.s:591    .text:0000000000001a92 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001a9a $t
           ps2_kbd.s:591    .text:0000000000001a9c KBD_LED
           ps2_kbd.s:616    .text:0000000000001af0 $d
           ps2_kbd.s:616    .text:0000000000001af4 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001b00 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001b2a $d
           ps2_kbd.s:633    .text:0000000000001b2e _WKEY
           ps2_kbd.s:633    .text:0000000000001b38 WKEY
           ps2_kbd.s:635    .text:0000000000001b3c $d
           ps2_kbd.s:640    .text:0000000000001b54 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001b74 $t
         spi-flash.s:85     .text:0000000000001c16 $d
         spi-flash.s:85     .text:0000000000001c1a _CHIP_SEL
         spi-flash.s:85     .text:0000000000001c24 CHIP_SEL
         spi-flash.s:97     .text:0000000000001c42 $d
         spi-flash.s:97     .text:0000000000001c46 _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001c50 $t
         spi-flash.s:97     .text:0000000000001c50 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001c7e $d
         spi-flash.s:113    .text:0000000000001c82 _RD_BYTE
         spi-flash.s:113    .text:0000000000001c8a $t
         spi-flash.s:113    .text:0000000000001c8c RD_BYTE
         spi-flash.s:133    .text:0000000000001cb4 $d
         spi-flash.s:133    .text:0000000000001cb8 _WR_BYTE
         spi-flash.s:133    .text:0000000000001cc0 $t
         spi-flash.s:133    .text:0000000000001cc0 WR_BYTE
         spi-flash.s:151    .text:0000000000001ce4 $d
         spi-flash.s:151    .text:0000000000001ce8 _WR_DIS
         spi-flash.s:151    .text:0000000000001cf0 WR_DIS
         spi-flash.s:153    .text:0000000000001cf4 $d
         spi-flash.s:163    .text:0000000000001d10 _WR_ENBL
         spi-flash.s:163    .text:0000000000001d18 $t
         spi-flash.s:163    .text:0000000000001d18 WR_ENBL
         spi-flash.s:165    .text:0000000000001d1c $d
         spi-flash.s:175    .text:0000000000001d38 _RD_SR
         spi-flash.s:175    .text:0000000000001d3e $t
         spi-flash.s:175    .text:0000000000001d40 RD_SR
         spi-flash.s:177    .text:0000000000001d44 $d
         spi-flash.s:185    .text:0000000000001d68 sr_cmd
         spi-flash.s:191    .text:0000000000001d6f _SEND_ADR
         spi-flash.s:191    .text:0000000000001d78 $t
         spi-flash.s:191    .text:0000000000001d78 SEND_ADR
         spi-flash.s:193    .text:0000000000001d7c $d
         spi-flash.s:208    .text:0000000000001db0 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001dba $t
         spi-flash.s:208    .text:0000000000001dbc WAIT_DONE
         spi-flash.s:210    .text:0000000000001dc0 $d
         spi-flash.s:223    .text:0000000000001df0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001dfa $t
         spi-flash.s:223    .text:0000000000001dfc ERASE_BLK
         spi-flash.s:225    .text:0000000000001e00 $d
ARM GAS  forth.s 			page 209


         spi-flash.s:238    .text:0000000000001e28 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001e34 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001e38 $d
         spi-flash.s:256    .text:0000000000001e68 _RD_BLK
         spi-flash.s:256    .text:0000000000001e70 RD_BLK
         spi-flash.s:258    .text:0000000000001e74 $d
         spi-flash.s:278    .text:0000000000001ebc _WR_BLK
         spi-flash.s:278    .text:0000000000001ec4 WR_BLK
         spi-flash.s:280    .text:0000000000001ec8 $d
             forth.s:2446   .text:00000000000040cc HDOT
         spi-flash.s:316    .text:0000000000001f20 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001f2c $t
         spi-flash.s:316    .text:0000000000001f2c SEARCH_FILE
         spi-flash.s:319    .text:0000000000001f30 $d
         spi-flash.s:325    .text:0000000000001f38 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001f44 ERASE_FILE
         spi-flash.s:328    .text:0000000000001f48 $d
         spi-flash.s:334    .text:0000000000001f50 _DIR
         spi-flash.s:334    .text:0000000000001f54 $t
         spi-flash.s:334    .text:0000000000001f54 DIR
         spi-flash.s:337    .text:0000000000001f58 $d
         spi-flash.s:343    .text:0000000000001f60 _SAVE
         spi-flash.s:343    .text:0000000000001f68 SAVE
         spi-flash.s:346    .text:0000000000001f6c $d
         spi-flash.s:352    .text:0000000000001f74 _LOAD
         spi-flash.s:352    .text:0000000000001f7c LOAD
         spi-flash.s:355    .text:0000000000001f80 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001fa8 p10
               fpu.s:59     .text:0000000000001fd4 _PWR10
               fpu.s:59     .text:0000000000001fda $t
               fpu.s:59     .text:0000000000001fdc PWR10
               fpu.s:89     .text:0000000000002016 $d
               fpu.s:89     .text:000000000000201a _FPSCR
               fpu.s:89     .text:0000000000002020 $t
               fpu.s:102    .text:0000000000002030 $d
               fpu.s:102    .text:0000000000002034 _CLR_FPSCR
               fpu.s:102    .text:000000000000203e $t
               fpu.s:115    .text:0000000000002058 $d
               fpu.s:115    .text:000000000000205c _TOS0
               fpu.s:115    .text:0000000000002060 $t
               fpu.s:115    .text:0000000000002060 TOS0
               fpu.s:124    .text:000000000000206c $d
               fpu.s:124    .text:0000000000002070 _TOS1
               fpu.s:124    .text:0000000000002074 $t
               fpu.s:124    .text:0000000000002074 TOS1
               fpu.s:133    .text:0000000000002080 $d
               fpu.s:133    .text:0000000000002084 _TOS2
               fpu.s:133    .text:0000000000002088 $t
               fpu.s:133    .text:0000000000002088 TOS2
               fpu.s:142    .text:0000000000002094 $d
               fpu.s:142    .text:0000000000002098 _S0FROM
               fpu.s:142    .text:000000000000209c $t
               fpu.s:142    .text:000000000000209c S0FROM
ARM GAS  forth.s 			page 210


               fpu.s:151    .text:00000000000020a8 $d
               fpu.s:151    .text:00000000000020ac _S1FROM
               fpu.s:151    .text:00000000000020b0 $t
               fpu.s:151    .text:00000000000020b0 S1FROM
               fpu.s:160    .text:00000000000020bc $d
               fpu.s:160    .text:00000000000020c0 _S2FROM
               fpu.s:160    .text:00000000000020c4 $t
               fpu.s:160    .text:00000000000020c4 S2FROM
               fpu.s:171    .text:00000000000020d0 $d
               fpu.s:171    .text:00000000000020d4 _FTOS
               fpu.s:171    .text:00000000000020d8 $t
               fpu.s:171    .text:00000000000020d8 FTOS
               fpu.s:181    .text:00000000000020e8 $d
               fpu.s:181    .text:00000000000020ec _TRUNC
               fpu.s:181    .text:00000000000020f2 $t
               fpu.s:181    .text:00000000000020f4 TRUNC
               fpu.s:191    .text:0000000000002104 $d
               fpu.s:191    .text:0000000000002108 _STOF
               fpu.s:191    .text:000000000000210c $t
               fpu.s:191    .text:000000000000210c STOF
               fpu.s:201    .text:000000000000211c $d
               fpu.s:201    .text:0000000000002120 _FPLUS
               fpu.s:201    .text:0000000000002124 FPLUS
               fpu.s:214    .text:000000000000213c $d
               fpu.s:214    .text:0000000000002140 _FSUBB
               fpu.s:214    .text:0000000000002144 FSUBB
               fpu.s:228    .text:000000000000215c $d
               fpu.s:228    .text:0000000000002160 _FSTAR
               fpu.s:228    .text:0000000000002164 FSTAR
               fpu.s:241    .text:000000000000217c $d
               fpu.s:241    .text:0000000000002180 _FSLH
               fpu.s:241    .text:0000000000002184 FSLH
               fpu.s:254    .text:000000000000219c $d
               fpu.s:254    .text:00000000000021a0 _FNEG
               fpu.s:254    .text:00000000000021a8 $t
               fpu.s:254    .text:00000000000021a8 FNEG
               fpu.s:264    .text:00000000000021b8 $d
               fpu.s:264    .text:00000000000021bc _FABS
               fpu.s:264    .text:00000000000021c4 FABS
               fpu.s:276    .text:00000000000021d8 $d
               fpu.s:276    .text:00000000000021dc _SQRT
               fpu.s:276    .text:00000000000021e4 SQRT
               fpu.s:286    .text:00000000000021f4 $d
               fpu.s:286    .text:00000000000021f8 _FZLESS
               fpu.s:286    .text:00000000000021fc $t
               fpu.s:286    .text:00000000000021fc FZLESS
               fpu.s:298    .text:0000000000002214 $d
               fpu.s:298    .text:0000000000002218 _FGREAT
               fpu.s:298    .text:000000000000221c FGREAT
               fpu.s:300    .text:0000000000002220 $d
             forth.s:877    .text:000000000000314c INVER
               fpu.s:309    .text:0000000000002234 _FLESS
               fpu.s:309    .text:0000000000002238 FLESS
               fpu.s:311    .text:000000000000223c $d
               fpu.s:319    .text:000000000000224c _FMIN
               fpu.s:319    .text:0000000000002254 FMIN
               fpu.s:321    .text:0000000000002258 $d
ARM GAS  forth.s 			page 211


               fpu.s:332    .text:000000000000227c _FMAX
               fpu.s:332    .text:0000000000002284 FMAX
               fpu.s:334    .text:0000000000002288 $d
               fpu.s:347    .text:00000000000022ac _FSIGN
               fpu.s:347    .text:00000000000022b2 $t
               fpu.s:347    .text:00000000000022b4 FSIGN
               fpu.s:358    .text:00000000000022c8 $d
               fpu.s:358    .text:00000000000022cc _FEXP
               fpu.s:358    .text:00000000000022d4 FEXP
               fpu.s:369    .text:00000000000022ea $d
               fpu.s:369    .text:00000000000022ee _FMANT
               fpu.s:369    .text:00000000000022f4 $t
               fpu.s:369    .text:00000000000022f4 FMANT
               fpu.s:382    .text:000000000000230e $d
               fpu.s:382    .text:0000000000002312 _PI
               fpu.s:382    .text:0000000000002318 PI
               fpu.s:391    .text:0000000000002326 $d
               fpu.s:391    .text:000000000000232a _LOG2
               fpu.s:391    .text:0000000000002330 LOG2
               fpu.s:401    .text:000000000000233e $d
               fpu.s:401    .text:0000000000002342 _LOG2TO10
               fpu.s:401    .text:000000000000234a $t
               fpu.s:401    .text:000000000000234c LOG2TO10
               fpu.s:403    .text:0000000000002350 $d
             forth.s:555    .text:0000000000002eb0 ZLESS
               fpu.s:413    .text:000000000000237c $d
            strtof.s:29     .text:0000000000002388 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000023a0 p10p2at
            strtof.s:44     .text:00000000000023a0 $t
            strtof.s:45     .text:00000000000023a4 $d
            strtof.s:57     .text:00000000000023c4 bit_state
            strtof.s:58     .text:00000000000023c4 $t
            strtof.s:59     .text:00000000000023c8 $d
             forth.s:1636   .text:00000000000037f0 PICK
            strtof.s:76     .text:00000000000023e8 mant_div
            strtof.s:77     .text:00000000000023e8 $t
            strtof.s:78     .text:00000000000023ec $d
            strtof.s:79     .text:00000000000023f0 div_loop
             forth.s:998    .text:0000000000003248 GREAT
            strtof.s:107    .text:000000000000243c mant_mult
            strtof.s:108    .text:000000000000243c $t
            strtof.s:109    .text:0000000000002440 $d
            strtof.s:110    .text:0000000000002444 mult_loop
            strtof.s:134    .text:0000000000002490 exp_adjust
            strtof.s:135    .text:0000000000002490 $t
            strtof.s:136    .text:0000000000002494 $d
             forth.s:780    .text:0000000000003078 NROT
            strtof.s:148    .text:00000000000024d0 pos_exp
             forth.s:893    .text:0000000000003170 ABSS
            strtof.s:161    .text:00000000000024e0 decimals
            strtof.s:162    .text:00000000000024e0 $t
            strtof.s:163    .text:00000000000024e4 $d
             forth.s:2012   .text:0000000000003bc0 PARSE_DIGITS
ARM GAS  forth.s 			page 212


             forth.s:1021   .text:0000000000003274 MIN
            strtof.s:181    .text:000000000000251c exponent
            strtof.s:182    .text:000000000000251c $t
            strtof.s:183    .text:0000000000002520 $d
             forth.s:2064   .text:0000000000003c7a NEGQ
             forth.s:885    .text:0000000000003160 NEGAT
            strtof.s:204    .text:0000000000002564 _FLOATQ
            strtof.s:204    .text:000000000000256c FLOATQ
            strtof.s:208    .text:0000000000002570 $d
             forth.s:1968   .text:0000000000003b40 DECIM
             forth.s:1985   .text:0000000000003b64 DIGTQ
            strtof.s:245    .text:000000000000260c must_be_dot
             forth.s:2048   .text:0000000000003c60 CHARQ
            strtof.s:290    .text:00000000000026e4 error1
            strtof.s:295    .text:00000000000026f8 error2
            strtof.s:279    .text:00000000000026ac build_float
             forth.s:443    .text:0000000000002dc8 DRFROM
            strtof.s:300    .text:0000000000002708 restore_base
              ftoa.s:28     .text:0000000000002718 rounding
              ftoa.s:48     .text:0000000000002740 _ROUND
              ftoa.s:48     .text:0000000000002746 $t
              ftoa.s:48     .text:0000000000002748 ROUND
              ftoa.s:50     .text:000000000000274c $d
             forth.s:1010   .text:0000000000003260 MAX
              ftoa.s:67     .text:000000000000278c _CSTOP
              ftoa.s:67     .text:0000000000002790 $t
              ftoa.s:67     .text:0000000000002790 CSTOP
              ftoa.s:79     .text:000000000000279c ITOA
              ftoa.s:81     .text:00000000000027a0 $d
             forth.s:1383   .text:00000000000035a4 STOD
             forth.s:832    .text:00000000000030e8 DABS
             forth.s:1831   .text:00000000000039e0 BDIGS
             forth.s:1875   .text:0000000000003a4c DIGS
             forth.s:1893   .text:0000000000003a80 SIGN
             forth.s:1907   .text:0000000000003aa8 EDIGS
             forth.s:1701   .text:0000000000003888 CMOVE
              ftoa.s:114    .text:00000000000027f0 SCALEUP
              ftoa.s:115    .text:00000000000027f0 $t
              ftoa.s:116    .text:00000000000027f4 $d
              ftoa.s:137    .text:000000000000283c SCALEDOWN
              ftoa.s:138    .text:000000000000283c $t
              ftoa.s:139    .text:0000000000002840 $d
              ftoa.s:174    .text:00000000000028ac EPART
              ftoa.s:175    .text:00000000000028ac $t
              ftoa.s:176    .text:00000000000028b0 $d
              ftoa.s:199    .text:00000000000028e0 FPART
              ftoa.s:200    .text:00000000000028e0 $t
              ftoa.s:201    .text:00000000000028e4 $d
              ftoa.s:244    .text:0000000000002964 IPART
              ftoa.s:245    .text:0000000000002964 $t
              ftoa.s:246    .text:0000000000002968 $d
              ftoa.s:293    .text:00000000000029fc _FTOA
              ftoa.s:293    .text:0000000000002a00 $t
              ftoa.s:293    .text:0000000000002a00 FTOA
              ftoa.s:295    .text:0000000000002a04 $d
             forth.s:718    .text:0000000000002ffc BLANK
              ftoa.s:325    .text:0000000000002a5c _FDOT
ARM GAS  forth.s 			page 213


              ftoa.s:325    .text:0000000000002a60 FDOT
              ftoa.s:328    .text:0000000000002a64 $d
             forth.s:1654   .text:0000000000003818 HERE
             forth.s:3180   .text:00000000000049b8 ALLOT
             forth.s:80     .text:0000000000002ac8 $t
             forth.s:103    .text:0000000000002ae0 COMPI_NEST
             forth.s:116    .text:0000000000002afe TSTDIN
             forth.s:123    .text:0000000000002b08 TSTDOUT
             forth.s:132    .text:0000000000002b12 $d
             forth.s:132    .text:0000000000002b16 _CFSR
             forth.s:144    .text:0000000000002b36 $d
             forth.s:144    .text:0000000000002b3a _BFAR
             forth.s:156    .text:0000000000002b5a $d
             forth.s:156    .text:0000000000002b5e _QKEY
             forth.s:156    .text:0000000000002b64 QKEY
             forth.s:158    .text:0000000000002b68 $d
             forth.s:1688   .text:0000000000003868 ATEXE
             forth.s:166    .text:0000000000002b78 _KEY
             forth.s:166    .text:0000000000002b7c $t
             forth.s:166    .text:0000000000002b7c KEY
             forth.s:168    .text:0000000000002b80 KEY1
             forth.s:169    .text:0000000000002b80 $d
             forth.s:178    .text:0000000000002b98 _EMIT
             forth.s:180    .text:0000000000002ba4 $d
             forth.s:214    .text:0000000000002bb4 _RAND
             forth.s:214    .text:0000000000002bbc RAND
             forth.s:216    .text:0000000000002bc0 $d
             forth.s:1117   .text:0000000000003324 SEED
             forth.s:1539   .text:00000000000036ec MODD
             forth.s:245    .text:0000000000002c30 _PAUSE
             forth.s:245    .text:0000000000002c36 $t
             forth.s:245    .text:0000000000002c38 PAUSE
             forth.s:247    .text:0000000000002c3c $d
             forth.s:1135   .text:0000000000003354 TIMER
             forth.s:249    .text:0000000000002c44 PAUSE_LOOP
             forth.s:254    .text:0000000000002c5c PAUSE_EXIT
             forth.s:261    .text:0000000000002c64 _ULED
             forth.s:270    .text:0000000000002c88 ULED_OFF
             forth.s:278    .text:0000000000002c8c $d
             forth.s:278    .text:0000000000002c90 _JOYSTK
             forth.s:278    .text:0000000000002c98 JOYSTK
             forth.s:280    .text:0000000000002c9c $d
             forth.s:292    .text:0000000000002cbc _TONE
             forth.s:292    .text:0000000000002cc4 TONE
             forth.s:318    .text:0000000000002cf8 $d
             forth.s:318    .text:0000000000002cfc _NOP
             forth.s:318    .text:0000000000002d00 $t
             forth.s:318    .text:0000000000002d00 NOP
             forth.s:335    .text:0000000000002d0c $d
             forth.s:335    .text:0000000000002d10 _EXECU
             forth.s:335    .text:0000000000002d18 $t
             forth.s:335    .text:0000000000002d18 EXECU
             forth.s:355    .text:0000000000002d34 NEXT1
             forth.s:373    .text:0000000000002d50 QBRAN1
             forth.s:390    .text:0000000000002d5c $d
             forth.s:390    .text:0000000000002d60 _EXIT
             forth.s:390    .text:0000000000002d68 EXIT
ARM GAS  forth.s 			page 214


             forth.s:391    .text:0000000000002d68 $d
             forth.s:397    .text:0000000000002d70 _STORE
             forth.s:397    .text:0000000000002d72 $t
             forth.s:407    .text:0000000000002d80 $d
             forth.s:407    .text:0000000000002d84 _AT
             forth.s:407    .text:0000000000002d86 $t
             forth.s:415    .text:0000000000002d8c $d
             forth.s:415    .text:0000000000002d90 _CSTOR
             forth.s:425    .text:0000000000002da0 $d
             forth.s:425    .text:0000000000002da4 _CAT
             forth.s:434    .text:0000000000002dac $d
             forth.s:434    .text:0000000000002db0 _RFROM
             forth.s:443    .text:0000000000002dbe $d
             forth.s:443    .text:0000000000002dc2 _DRFROM
             forth.s:443    .text:0000000000002dc6 $t
             forth.s:454    .text:0000000000002dda $d
             forth.s:454    .text:0000000000002dde _RAT
             forth.s:463    .text:0000000000002dee $d
             forth.s:463    .text:0000000000002df2 _TOR
             forth.s:472    .text:0000000000002e02 $d
             forth.s:472    .text:0000000000002e06 _DTOR
             forth.s:472    .text:0000000000002e0a $t
             forth.s:472    .text:0000000000002e0c DTOR
             forth.s:484    .text:0000000000002e1e $d
             forth.s:484    .text:0000000000002e22 _RPSTOR
             forth.s:484    .text:0000000000002e26 $t
             forth.s:484    .text:0000000000002e28 RPSTOR
             forth.s:493    .text:0000000000002e30 $d
             forth.s:493    .text:0000000000002e34 _SPSTOR
             forth.s:493    .text:0000000000002e38 $t
             forth.s:493    .text:0000000000002e38 SPSTOR
             forth.s:502    .text:0000000000002e40 $d
             forth.s:502    .text:0000000000002e44 _SPAT
             forth.s:502    .text:0000000000002e48 $t
             forth.s:502    .text:0000000000002e48 SPAT
             forth.s:511    .text:0000000000002e50 $d
             forth.s:511    .text:0000000000002e54 _RPAT
             forth.s:511    .text:0000000000002e58 $t
             forth.s:511    .text:0000000000002e58 RPAT
             forth.s:520    .text:0000000000002e60 $d
             forth.s:520    .text:0000000000002e64 _DROP
             forth.s:528    .text:0000000000002e72 $d
             forth.s:528    .text:0000000000002e76 _DUPP
             forth.s:528    .text:0000000000002e7a $t
             forth.s:536    .text:0000000000002e82 $d
             forth.s:536    .text:0000000000002e86 _SWAP
             forth.s:546    .text:0000000000002e94 $d
             forth.s:546    .text:0000000000002e98 _OVER
             forth.s:555    .text:0000000000002ea8 $d
             forth.s:555    .text:0000000000002eac _ZLESS
             forth.s:563    .text:0000000000002eb6 $d
             forth.s:563    .text:0000000000002eba _ANDD
             forth.s:563    .text:0000000000002ebe $t
             forth.s:572    .text:0000000000002eca $d
             forth.s:572    .text:0000000000002ece _ORR
             forth.s:581    .text:0000000000002ede $d
             forth.s:581    .text:0000000000002ee2 _XORR
ARM GAS  forth.s 			page 215


             forth.s:581    .text:0000000000002ee6 $t
             forth.s:590    .text:0000000000002ef2 $d
             forth.s:590    .text:0000000000002ef6 _UPLUS
             forth.s:590    .text:0000000000002efa $t
             forth.s:590    .text:0000000000002efc UPLUS
             forth.s:602    .text:0000000000002f0c $d
             forth.s:602    .text:0000000000002f10 _RSHIFT
             forth.s:611    .text:0000000000002f22 $d
             forth.s:611    .text:0000000000002f26 _LSHIFT
             forth.s:620    .text:0000000000002f3a $d
             forth.s:620    .text:0000000000002f3e _PLUS
             forth.s:620    .text:0000000000002f40 $t
             forth.s:629    .text:0000000000002f48 $d
             forth.s:629    .text:0000000000002f4c _SUBB
             forth.s:629    .text:0000000000002f4e $t
             forth.s:638    .text:0000000000002f5a $d
             forth.s:638    .text:0000000000002f5e _STAR
             forth.s:638    .text:0000000000002f60 $t
             forth.s:647    .text:0000000000002f6a $d
             forth.s:647    .text:0000000000002f6e _UMSTA
             forth.s:647    .text:0000000000002f72 $t
             forth.s:647    .text:0000000000002f74 UMSTA
             forth.s:659    .text:0000000000002f80 $d
             forth.s:659    .text:0000000000002f84 _MSTAR
             forth.s:659    .text:0000000000002f88 MSTAR
             forth.s:670    .text:0000000000002f94 $d
             forth.s:670    .text:0000000000002f98 _ONEP
             forth.s:678    .text:0000000000002fa2 $d
             forth.s:678    .text:0000000000002fa6 _ONEM
             forth.s:686    .text:0000000000002fb2 $d
             forth.s:686    .text:0000000000002fb6 _TWOP
             forth.s:686    .text:0000000000002fbc TWOP
             forth.s:694    .text:0000000000002fc2 $d
             forth.s:694    .text:0000000000002fc6 _TWOM
             forth.s:694    .text:0000000000002fcc TWOM
             forth.s:702    .text:0000000000002fd2 $d
             forth.s:702    .text:0000000000002fd6 _CELLP
             forth.s:702    .text:0000000000002fdc $t
             forth.s:702    .text:0000000000002fdc CELLP
             forth.s:710    .text:0000000000002fe2 $d
             forth.s:710    .text:0000000000002fe6 _CELLM
             forth.s:710    .text:0000000000002fec $t
             forth.s:710    .text:0000000000002fec CELLM
             forth.s:718    .text:0000000000002ff2 $d
             forth.s:718    .text:0000000000002ff6 _BLANK
             forth.s:727    .text:0000000000003006 $d
             forth.s:727    .text:000000000000300a _CELLS
             forth.s:727    .text:0000000000003010 $t
             forth.s:727    .text:0000000000003010 CELLS
             forth.s:735    .text:0000000000003016 $d
             forth.s:735    .text:000000000000301a _CELLSL
             forth.s:735    .text:0000000000003020 $t
             forth.s:735    .text:0000000000003020 CELLSL
             forth.s:743    .text:0000000000003026 $d
             forth.s:743    .text:000000000000302a _TWOST
             forth.s:743    .text:0000000000003030 TWOST
             forth.s:751    .text:0000000000003036 $d
ARM GAS  forth.s 			page 216


             forth.s:751    .text:000000000000303a _TWOSL
             forth.s:759    .text:0000000000003046 $d
             forth.s:759    .text:000000000000304a _QDUP
             forth.s:769    .text:000000000000305a $d
             forth.s:769    .text:000000000000305e _ROT
             forth.s:769    .text:0000000000003062 $t
             forth.s:780    .text:000000000000306e $d
             forth.s:780    .text:0000000000003072 _NROT
             forth.s:791    .text:0000000000003082 $d
             forth.s:791    .text:0000000000003086 _DDROP
             forth.s:791    .text:000000000000308c $t
             forth.s:800    .text:0000000000003096 $d
             forth.s:800    .text:000000000000309a _TDROP
             forth.s:800    .text:00000000000030a0 $t
             forth.s:809    .text:00000000000030aa $d
             forth.s:809    .text:00000000000030ae _DDUP
             forth.s:819    .text:00000000000030c0 $d
             forth.s:819    .text:00000000000030c4 _DPLUS
             forth.s:819    .text:00000000000030c8 DPLUS
             forth.s:832    .text:00000000000030dc $d
             forth.s:832    .text:00000000000030e0 _DABS
             forth.s:848    .text:0000000000003104 $d
             forth.s:848    .text:0000000000003108 _UDGREAT
             forth.s:848    .text:000000000000310c $t
             forth.s:848    .text:000000000000310c UDGREAT
             forth.s:865    .text:0000000000003128 $d
             forth.s:865    .text:000000000000312c _DZEQUAL
             forth.s:865    .text:0000000000003130 $t
             forth.s:865    .text:0000000000003130 DZEQUAL
             forth.s:877    .text:0000000000003142 $d
             forth.s:877    .text:0000000000003146 _INVER
             forth.s:877    .text:000000000000314a $t
             forth.s:885    .text:0000000000003152 $d
             forth.s:885    .text:0000000000003156 _NEGAT
             forth.s:893    .text:0000000000003166 $d
             forth.s:893    .text:000000000000316a _ABSS
             forth.s:893    .text:000000000000316e $t
             forth.s:903    .text:000000000000317a $d
             forth.s:903    .text:000000000000317e _CLZ
             forth.s:903    .text:0000000000003182 $t
             forth.s:911    .text:000000000000318a $d
             forth.s:911    .text:000000000000318e _CTZ
             forth.s:911    .text:0000000000003192 $t
             forth.s:911    .text:0000000000003194 CTZ
             forth.s:926    .text:00000000000031ac $d
             forth.s:926    .text:00000000000031b0 _ZEQUAL
             forth.s:926    .text:00000000000031b4 ZEQUAL
             forth.s:937    .text:00000000000031c2 $d
             forth.s:937    .text:00000000000031c6 _EQUAL
             forth.s:937    .text:00000000000031c8 $t
             forth.s:949    .text:00000000000031d8 $d
             forth.s:949    .text:00000000000031dc _DIFF
             forth.s:949    .text:00000000000031e0 DIFF
             forth.s:962    .text:00000000000031f8 $d
             forth.s:962    .text:00000000000031fc _ULESS
             forth.s:974    .text:0000000000003210 $d
             forth.s:974    .text:0000000000003214 _LESS
ARM GAS  forth.s 			page 217


             forth.s:974    .text:0000000000003216 $t
             forth.s:974    .text:0000000000003218 LESS
             forth.s:986    .text:0000000000003228 $d
             forth.s:986    .text:000000000000322c _UGREAT
             forth.s:986    .text:0000000000003230 UGREAT
             forth.s:998    .text:0000000000003240 $d
             forth.s:998    .text:0000000000003244 _GREAT
             forth.s:998    .text:0000000000003246 $t
             forth.s:1010   .text:0000000000003258 $d
             forth.s:1010   .text:000000000000325c _MAX
             forth.s:1010   .text:0000000000003260 $t
             forth.s:1021   .text:000000000000326c $d
             forth.s:1021   .text:0000000000003270 _MIN
             forth.s:1021   .text:0000000000003274 $t
             forth.s:1032   .text:0000000000003280 $d
             forth.s:1032   .text:0000000000003284 _PSTOR
             forth.s:1032   .text:0000000000003288 PSTOR
             forth.s:1044   .text:0000000000003298 $d
             forth.s:1044   .text:000000000000329c _DSTOR
             forth.s:1044   .text:00000000000032a0 DSTOR
             forth.s:1056   .text:00000000000032b4 $d
             forth.s:1056   .text:00000000000032b8 _DAT
             forth.s:1056   .text:00000000000032bc DAT
             forth.s:1066   .text:00000000000032c6 $d
             forth.s:1066   .text:00000000000032ca _COUNT
             forth.s:1066   .text:00000000000032d0 $t
             forth.s:1076   .text:00000000000032de $d
             forth.s:1076   .text:00000000000032e2 _DNEGA
             forth.s:1076   .text:00000000000032ea $t
             forth.s:1076   .text:00000000000032ec DNEGA
             forth.s:1093   .text:00000000000032fe DOVAR
             forth.s:1104   .text:000000000000330c DOCON
             forth.s:1117   .text:0000000000003318 $d
             forth.s:1117   .text:000000000000331c _SEED
             forth.s:1126   .text:0000000000003330 $d
             forth.s:1126   .text:0000000000003334 _MSEC
             forth.s:1135   .text:0000000000003348 $d
             forth.s:1135   .text:000000000000334c _TIMER
             forth.s:1135   .text:0000000000003352 $t
             forth.s:1144   .text:0000000000003360 $d
             forth.s:1144   .text:0000000000003364 _TBOOT
             forth.s:1144   .text:000000000000336a $t
             forth.s:1144   .text:000000000000336c TBOOT
             forth.s:1153   .text:0000000000003378 $d
             forth.s:1153   .text:000000000000337c _BASE
             forth.s:1163   .text:0000000000003390 $d
             forth.s:1163   .text:0000000000003394 _BCHR
             forth.s:1163   .text:000000000000339a $t
             forth.s:1163   .text:000000000000339c BCHR
             forth.s:1173   .text:00000000000033a8 TEMP
             forth.s:1182   .text:00000000000033b4 $d
             forth.s:1182   .text:00000000000033b8 _SPAN
             forth.s:1182   .text:00000000000033c0 SPAN
             forth.s:1191   .text:00000000000033cc $d
             forth.s:1191   .text:00000000000033d0 _INN
             forth.s:1191   .text:00000000000033d4 $t
             forth.s:1191   .text:00000000000033d4 INN
ARM GAS  forth.s 			page 218


             forth.s:1201   .text:00000000000033e0 $d
             forth.s:1201   .text:00000000000033e4 _NTIB
             forth.s:1201   .text:00000000000033ec NTIB
             forth.s:1210   .text:00000000000033f8 $d
             forth.s:1210   .text:00000000000033fc _TEVAL
             forth.s:1210   .text:0000000000003402 $t
             forth.s:1210   .text:0000000000003404 TEVAL
             forth.s:1220   .text:0000000000003410 $d
             forth.s:1220   .text:0000000000003414 _HLD
             forth.s:1220   .text:0000000000003418 $t
             forth.s:1220   .text:0000000000003418 HLD
             forth.s:1230   .text:0000000000003424 $d
             forth.s:1230   .text:0000000000003428 _CNTXT
             forth.s:1230   .text:0000000000003430 $t
             forth.s:1230   .text:0000000000003430 CNTXT
             forth.s:1231   .text:0000000000003430 CRRNT
             forth.s:1241   .text:000000000000343c $d
             forth.s:1241   .text:0000000000003440 _CPP
             forth.s:1241   .text:0000000000003444 CPP
             forth.s:1251   .text:0000000000003450 $d
             forth.s:1251   .text:0000000000003454 _FCP
             forth.s:1251   .text:0000000000003458 $t
             forth.s:1251   .text:0000000000003458 FCP
             forth.s:1261   .text:0000000000003464 $d
             forth.s:1261   .text:0000000000003468 _LAST
             forth.s:1261   .text:0000000000003470 LAST
             forth.s:1275   .text:000000000000347c $d
             forth.s:1275   .text:0000000000003480 _USER_BEGIN
             forth.s:1275   .text:000000000000348c USER_BEGIN
             forth.s:1279   .text:0000000000003498 USR_BGN_ADR
             forth.s:1280   .text:0000000000003498 $d
             forth.s:1286   .text:00000000000034a0 _USER_END
             forth.s:1286   .text:00000000000034ac USER_END
             forth.s:1290   .text:00000000000034b8 USER_END_ADR
             forth.s:1291   .text:00000000000034b8 $d
             forth.s:1303   .text:00000000000034c0 _WITHI
             forth.s:1303   .text:00000000000034c8 WITHI
             forth.s:1305   .text:00000000000034cc $d
             forth.s:1320   .text:00000000000034ec _UMMOD
             forth.s:1320   .text:00000000000034f4 UMMOD
             forth.s:1324   .text:00000000000034fe UMMOD0
             forth.s:1331   .text:000000000000350e UMMOD1
             forth.s:1337   .text:0000000000003518 UMMOD2
             forth.s:1350   .text:0000000000003524 $d
             forth.s:1350   .text:0000000000003528 _MSMOD
             forth.s:1350   .text:000000000000352e $t
             forth.s:1350   .text:0000000000003530 MSMOD
             forth.s:1352   .text:0000000000003534 $d
             forth.s:1361   .text:000000000000355c MMOD1
             forth.s:1368   .text:0000000000003578 MMOD2
             forth.s:1376   .text:0000000000003598 MMOD3
             forth.s:1383   .text:00000000000035a0 _STOD
             forth.s:1383   .text:00000000000035a4 $t
             forth.s:1392   .text:00000000000035b0 $d
             forth.s:1392   .text:00000000000035b4 _D2STAR
             forth.s:1392   .text:00000000000035b8 $t
             forth.s:1392   .text:00000000000035b8 D2STAR
ARM GAS  forth.s 			page 219


             forth.s:1404   .text:00000000000035ca $d
             forth.s:1404   .text:00000000000035ce _D2SL
             forth.s:1404   .text:00000000000035d2 $t
             forth.s:1404   .text:00000000000035d4 D2SL
             forth.s:1419   .text:00000000000035e2 $d
             forth.s:1419   .text:00000000000035e6 _DSLMOD
             forth.s:1419   .text:00000000000035ec $t
             forth.s:1419   .text:00000000000035ec DSLMOD
             forth.s:1455   .text:0000000000003638 $d
             forth.s:1455   .text:000000000000363c _DSLASH
             forth.s:1455   .text:0000000000003640 DSLASH
             forth.s:1457   .text:0000000000003644 $d
             forth.s:1477   .text:0000000000003688 _DSTAR
             forth.s:1477   .text:000000000000368c DSTAR
             forth.s:1526   .text:00000000000036c2 $d
             forth.s:1526   .text:00000000000036c6 _SLMOD
             forth.s:1528   .text:00000000000036d0 $d
             forth.s:1539   .text:00000000000036e8 _MODD
             forth.s:1539   .text:00000000000036ec $t
             forth.s:1541   .text:00000000000036f0 $d
             forth.s:1550   .text:0000000000003700 _SLASH
             forth.s:1550   .text:0000000000003702 $t
             forth.s:1550   .text:0000000000003704 SLASH
             forth.s:1552   .text:0000000000003708 $d
             forth.s:1563   .text:000000000000371c _SSMOD
             forth.s:1563   .text:0000000000003722 $t
             forth.s:1563   .text:0000000000003724 SSMOD
             forth.s:1565   .text:0000000000003728 $d
             forth.s:1577   .text:0000000000003740 _STASL
             forth.s:1577   .text:0000000000003744 STASL
             forth.s:1579   .text:0000000000003748 $d
             forth.s:1593   .text:000000000000375c _ALGND
             forth.s:1593   .text:0000000000003764 $t
             forth.s:1593   .text:0000000000003764 ALGND
             forth.s:1604   .text:0000000000003774 $d
             forth.s:1604   .text:0000000000003778 _TCHAR
             forth.s:1604   .text:000000000000377e $t
             forth.s:1604   .text:0000000000003780 TCHAR
             forth.s:1606   .text:0000000000003784 $d
             forth.s:1616   .text:00000000000037bc TCHA1
             forth.s:1624   .text:00000000000037c4 _DEPTH
             forth.s:1624   .text:00000000000037ca $t
             forth.s:1624   .text:00000000000037cc DEPTH
             forth.s:1636   .text:00000000000037e4 $d
             forth.s:1636   .text:00000000000037e8 _PICK
             forth.s:1638   .text:00000000000037f4 $d
             forth.s:1654   .text:0000000000003810 _HERE
             forth.s:1656   .text:000000000000381c $d
             forth.s:1665   .text:000000000000382c _PAD
             forth.s:1665   .text:0000000000003830 $t
             forth.s:1667   .text:0000000000003834 $d
             forth.s:1678   .text:000000000000384c _TIB
             forth.s:1678   .text:0000000000003850 $t
             forth.s:1678   .text:0000000000003850 TIB
             forth.s:1688   .text:000000000000385a $d
             forth.s:1688   .text:000000000000385e _ATEXE
             forth.s:1701   .text:000000000000387c $d
ARM GAS  forth.s 			page 220


             forth.s:1701   .text:0000000000003880 _CMOVE
             forth.s:1701   .text:0000000000003886 $t
             forth.s:1708   .text:000000000000389a CMOV1
             forth.s:1705   .text:0000000000003892 CMOV0
             forth.s:1713   .text:00000000000038a4 CMOV2
             forth.s:1721   .text:00000000000038ac $d
             forth.s:1721   .text:00000000000038b0 _MOVE
             forth.s:1739   .text:00000000000038e2 MOVE1
             forth.s:1736   .text:00000000000038de MOVE3
             forth.s:1733   .text:00000000000038da MOVE0
             forth.s:1744   .text:00000000000038ec MOVE2
             forth.s:1753   .text:00000000000038f4 $d
             forth.s:1753   .text:00000000000038f8 _FILL
             forth.s:1761   .text:000000000000390e FILL2
             forth.s:1757   .text:0000000000003906 FILL1
             forth.s:1771   .text:0000000000003916 $d
             forth.s:1771   .text:000000000000391a _PACKS
             forth.s:1771   .text:0000000000003920 $t
             forth.s:1771   .text:0000000000003920 PACKS
             forth.s:1773   .text:0000000000003924 $d
             forth.s:1802   .text:000000000000397c _DIGIT
             forth.s:1802   .text:0000000000003982 $t
             forth.s:1802   .text:0000000000003984 DIGIT
             forth.s:1804   .text:0000000000003988 $d
             forth.s:1819   .text:00000000000039bc _EXTRC
             forth.s:1819   .text:00000000000039c4 $t
             forth.s:1819   .text:00000000000039c4 EXTRC
             forth.s:1821   .text:00000000000039c8 $d
             forth.s:1831   .text:00000000000039dc _BDIGS
             forth.s:1833   .text:00000000000039e4 $d
             forth.s:1843   .text:00000000000039f8 _HOLD
             forth.s:1843   .text:0000000000003a00 HOLD
             forth.s:1845   .text:0000000000003a04 $d
             forth.s:1861   .text:0000000000003a28 _DIG
             forth.s:1861   .text:0000000000003a2a $t
             forth.s:1861   .text:0000000000003a2c DIG
             forth.s:1863   .text:0000000000003a30 $d
             forth.s:1875   .text:0000000000003a48 _DIGS
             forth.s:1877   .text:0000000000003a50 DIGS1
             forth.s:1878   .text:0000000000003a50 $d
             forth.s:1883   .text:0000000000003a6c DIGS2
             forth.s:1893   .text:0000000000003a78 _SIGN
             forth.s:1895   .text:0000000000003a84 $d
             forth.s:1899   .text:0000000000003a9c SIGN1
             forth.s:1907   .text:0000000000003aa4 _EDIGS
             forth.s:1909   .text:0000000000003aac $d
             forth.s:1924   .text:0000000000003ac8 STRR
             forth.s:1925   .text:0000000000003ac8 $t
             forth.s:1926   .text:0000000000003acc $d
             forth.s:1943   .text:0000000000003af8 _HEX
             forth.s:1943   .text:0000000000003afc $t
             forth.s:1943   .text:0000000000003afc HEX
             forth.s:1945   .text:0000000000003b00 $d
             forth.s:1956   .text:0000000000003b18 _BIN
             forth.s:1956   .text:0000000000003b1c $t
             forth.s:1956   .text:0000000000003b1c BIN
             forth.s:1958   .text:0000000000003b20 $d
ARM GAS  forth.s 			page 221


             forth.s:1968   .text:0000000000003b38 _DECIM
             forth.s:1968   .text:0000000000003b40 $t
             forth.s:1970   .text:0000000000003b44 $d
             forth.s:1985   .text:0000000000003b5c _DIGTQ
             forth.s:1987   .text:0000000000003b68 $d
             forth.s:2000   .text:0000000000003bb0 DGTQ1
             forth.s:2013   .text:0000000000003bc0 $t
             forth.s:2014   .text:0000000000003bc4 $d
             forth.s:3005   .text:0000000000004794 ABORQ
             forth.s:2037   .text:0000000000003c4c $d
             forth.s:2049   .text:0000000000003c60 $t
             forth.s:2066   .text:0000000000003c7e $d
             forth.s:2089   .text:0000000000003cbe _INTQ
             forth.s:2089   .text:0000000000003cc4 INTQ
             forth.s:2092   .text:0000000000003cc8 $d
             forth.s:2158   .text:0000000000003dd0 _NUMBER
             forth.s:2158   .text:0000000000003dd8 NUMBER
             forth.s:2160   .text:0000000000003ddc $d
             forth.s:2178   .text:0000000000003dfc _SPACE
             forth.s:2178   .text:0000000000003e02 $t
             forth.s:2180   .text:0000000000003e08 $d
             forth.s:2189   .text:0000000000003e18 _SPACS
             forth.s:2189   .text:0000000000003e20 SPACS
             forth.s:2191   .text:0000000000003e24 $d
             forth.s:2197   .text:0000000000003e40 CHAR2
             forth.s:2195   .text:0000000000003e3c CHAR1
             forth.s:2206   .text:0000000000003e50 _TYPEE
             forth.s:2208   .text:0000000000003e5c $d
             forth.s:2214   .text:0000000000003e74 TYPE2
             forth.s:2210   .text:0000000000003e68 TYPE1
             forth.s:2224   .text:0000000000003e88 _CR
             forth.s:2226   .text:0000000000003e90 $d
             forth.s:2238   .text:0000000000003eac DOSTR
             forth.s:2239   .text:0000000000003eac $t
             forth.s:2241   .text:0000000000003eb0 $d
             forth.s:2259   .text:0000000000003ed8 STRQP
             forth.s:2260   .text:0000000000003ed8 $t
             forth.s:2261   .text:0000000000003edc $d
             forth.s:2270   .text:0000000000003ee4 DOTST
             forth.s:2271   .text:0000000000003ee4 $t
             forth.s:2272   .text:0000000000003ee8 $d
             forth.s:2283   .text:0000000000003ef4 $t
             forth.s:2284   .text:0000000000003ef8 $d
             forth.s:2296   .text:0000000000003f04 LPAD
             forth.s:2297   .text:0000000000003f04 $t
             forth.s:2298   .text:0000000000003f08 $d
             forth.s:2329   .text:0000000000003f88 _DOTR
             forth.s:2329   .text:0000000000003f8c DOTR
             forth.s:2331   .text:0000000000003f90 $d
             forth.s:2413   .text:0000000000004074 DTOA
             forth.s:2348   .text:0000000000003fb8 _UDOTR
             forth.s:2348   .text:0000000000003fbc $t
             forth.s:2348   .text:0000000000003fbc UDOTR
             forth.s:2350   .text:0000000000003fc0 $d
             forth.s:2366   .text:0000000000003fec _UDOT
             forth.s:2368   .text:0000000000003ff4 $d
             forth.s:2384   .text:0000000000004020 _DOT
ARM GAS  forth.s 			page 222


             forth.s:2384   .text:0000000000004022 $t
             forth.s:2386   .text:0000000000004028 $d
             forth.s:2394   .text:0000000000004050 DOT1
             forth.s:2413   .text:0000000000004070 _DTOA
             forth.s:2413   .text:0000000000004074 $t
             forth.s:2415   .text:0000000000004078 $d
             forth.s:2430   .text:00000000000040a0 _DDOT
             forth.s:2430   .text:00000000000040a4 DDOT
             forth.s:2432   .text:00000000000040a8 $d
             forth.s:2446   .text:00000000000040c8 _HDOT
             forth.s:2448   .text:00000000000040d0 $d
             forth.s:2470   .text:0000000000004118 _QUEST
             forth.s:2470   .text:000000000000411a $t
             forth.s:2470   .text:000000000000411c QUEST
             forth.s:2472   .text:0000000000004120 $d
             forth.s:2486   .text:000000000000412c PARS
             forth.s:2487   .text:000000000000412c $t
             forth.s:2488   .text:0000000000004130 $d
             forth.s:2554   .text:0000000000004240 PARS8
             forth.s:2518   .text:00000000000041b4 PARS3
             forth.s:2501   .text:000000000000416c PARS1
             forth.s:2516   .text:00000000000041b0 PARS2
             forth.s:2522   .text:00000000000041c0 PARS4
             forth.s:2534   .text:00000000000041f0 PARS5
             forth.s:2541   .text:0000000000004214 PARS6
             forth.s:2547   .text:0000000000004228 PARS7
             forth.s:2565   .text:0000000000004254 _PARSE
             forth.s:2565   .text:000000000000425a $t
             forth.s:2565   .text:000000000000425c PARSE
             forth.s:2567   .text:0000000000004260 $d
             forth.s:2588   .text:00000000000042a0 _DOTPR
             forth.s:2588   .text:00000000000042a4 DOTPR
             forth.s:2590   .text:00000000000042a8 $d
             forth.s:2601   .text:00000000000042c0 _PAREN
             forth.s:2601   .text:00000000000042c2 $t
             forth.s:2601   .text:00000000000042c4 PAREN
             forth.s:2603   .text:00000000000042c8 $d
             forth.s:2614   .text:00000000000042e0 _BKSLA
             forth.s:2614   .text:00000000000042e2 $t
             forth.s:2614   .text:00000000000042e4 BKSLA
             forth.s:2616   .text:00000000000042e8 $d
             forth.s:2627   .text:0000000000004300 _CHAR
             forth.s:2627   .text:0000000000004308 CHAR
             forth.s:2629   .text:000000000000430c $d
             forth.s:2639   .text:0000000000004324 _IMCHAR
             forth.s:2639   .text:000000000000432c IMCHAR
             forth.s:2641   .text:0000000000004330 $d
             forth.s:3237   .text:0000000000004a54 LITER
             forth.s:2650   .text:0000000000004340 _WORDD
             forth.s:2650   .text:0000000000004348 WORDD
             forth.s:2652   .text:000000000000434c $d
             forth.s:2664   .text:0000000000004364 _TOKEN
             forth.s:2664   .text:000000000000436a $t
             forth.s:2664   .text:000000000000436c TOKEN
             forth.s:2666   .text:0000000000004370 $d
             forth.s:2831   .text:0000000000004560 UPPER
             forth.s:2680   .text:0000000000004384 _NAMET
ARM GAS  forth.s 			page 223


             forth.s:2680   .text:000000000000438a $t
             forth.s:2680   .text:000000000000438c NAMET
             forth.s:2682   .text:0000000000004390 $d
             forth.s:2701   .text:00000000000043b0 _SAMEQ
             forth.s:2701   .text:00000000000043b6 $t
             forth.s:2701   .text:00000000000043b8 SAMEQ
             forth.s:2703   .text:00000000000043bc $d
             forth.s:2720   .text:0000000000004404 SAME2
             forth.s:2705   .text:00000000000043c8 SAME1
             forth.s:2735   .text:0000000000004418 FIND
             forth.s:2736   .text:0000000000004418 $t
             forth.s:2737   .text:000000000000441c $d
             forth.s:2744   .text:0000000000004438 FIND1
             forth.s:2764   .text:0000000000004490 FIND6
             forth.s:2757   .text:0000000000004478 FIND2
             forth.s:2762   .text:0000000000004488 FIND3
             forth.s:2771   .text:00000000000044a8 FIND4
             forth.s:2777   .text:00000000000044c4 FIND5
             forth.s:2793   .text:00000000000044ec _NAMEQ
             forth.s:2793   .text:00000000000044f2 $t
             forth.s:2793   .text:00000000000044f4 NAMEQ
             forth.s:2795   .text:00000000000044f8 $d
             forth.s:2810   .text:000000000000450c _ASCIZ
             forth.s:2810   .text:0000000000004512 $t
             forth.s:2810   .text:0000000000004514 ASCIZ
             forth.s:2812   .text:0000000000004518 $d
             forth.s:2831   .text:0000000000004558 _UPPER
             forth.s:2831   .text:000000000000455e $t
             forth.s:2833   .text:0000000000004564 $d
             forth.s:2864   .text:00000000000045e8 BKSP
             forth.s:2865   .text:00000000000045e8 $t
             forth.s:2866   .text:00000000000045ec $d
             forth.s:2880   .text:0000000000004630 BACK1
             forth.s:2889   .text:0000000000004634 TAP
             forth.s:2890   .text:0000000000004634 $t
             forth.s:2891   .text:0000000000004638 $d
             forth.s:2904   .text:0000000000004650 KTAP
             forth.s:2905   .text:0000000000004650 TTAP
             forth.s:2906   .text:0000000000004650 $t
             forth.s:2907   .text:0000000000004654 $d
             forth.s:2921   .text:0000000000004694 KTAP2
             forth.s:2918   .text:000000000000468c KTAP1
             forth.s:2933   .text:00000000000046ac _ACCEP
             forth.s:2935   .text:00000000000046b8 $d
             forth.s:2938   .text:00000000000046c4 ACCP1
             forth.s:2954   .text:000000000000470c ACCP4
             forth.s:2950   .text:0000000000004700 ACCP2
             forth.s:2952   .text:0000000000004704 ACCP3
             forth.s:2965   .text:0000000000004720 _QUERY
             forth.s:2965   .text:0000000000004726 $t
             forth.s:2965   .text:0000000000004728 QUERY
             forth.s:2967   .text:000000000000472c $d
             forth.s:2987   .text:0000000000004760 _ABORT
             forth.s:2987   .text:0000000000004766 $t
             forth.s:2989   .text:000000000000476c ABORT1
             forth.s:2990   .text:000000000000476c $d
             forth.s:3006   .text:0000000000004794 $t
ARM GAS  forth.s 			page 224


             forth.s:3007   .text:0000000000004798 $d
             forth.s:3025   .text:00000000000047bc _INTER
             forth.s:3027   .text:00000000000047cc $d
             forth.s:3036   .text:0000000000004808 INTE1
             forth.s:3033   .text:00000000000047fe $t
             forth.s:3034   .text:0000000000004800 $d
             forth.s:3040   .text:0000000000004818 INTE2
             forth.s:3047   .text:0000000000004820 _LBRAC
             forth.s:3047   .text:0000000000004822 $t
             forth.s:3047   .text:0000000000004824 LBRAC
             forth.s:3049   .text:0000000000004828 $d
             forth.s:3059   .text:0000000000004840 _DOTOK
             forth.s:3059   .text:0000000000004844 $t
             forth.s:3059   .text:0000000000004844 DOTOK
             forth.s:3061   .text:0000000000004848 $d
             forth.s:3067   .text:000000000000486c DOTO1
             forth.s:3068   .text:000000000000486c $d
             forth.s:3076   .text:0000000000004878 _QSTAC
             forth.s:3076   .text:0000000000004880 QSTAC
             forth.s:3078   .text:0000000000004884 $d
             forth.s:3080   .text:000000000000489a $t
             forth.s:3081   .text:000000000000489c $d
             forth.s:3088   .text:00000000000048a4 _EVAL
             forth.s:3090   .text:00000000000048b0 EVAL1
             forth.s:3091   .text:00000000000048b0 $d
             forth.s:3099   .text:00000000000048d8 EVAL2
             forth.s:3109   .text:00000000000048e8 _PRESE
             forth.s:3111   .text:00000000000048f4 $d
             forth.s:3121   .text:0000000000004908 _QUIT
             forth.s:3122   .text:0000000000004910 $d
             forth.s:3124   .text:000000000000491c QUIT1
             forth.s:3126   .text:0000000000004920 QUIT2
             forth.s:3136   .text:0000000000004934 _FORGET
             forth.s:3136   .text:000000000000493c FORGET
             forth.s:3138   .text:0000000000004940 $d
             forth.s:3636   .text:0000000000004edc OVERT
             forth.s:3166   .text:0000000000004988 $d
             forth.s:3166   .text:000000000000498c _TICK
             forth.s:3166   .text:000000000000498e $t
             forth.s:3166   .text:0000000000004990 TICK
             forth.s:3168   .text:0000000000004994 $d
             forth.s:3172   .text:00000000000049a8 TICK1
             forth.s:3180   .text:00000000000049b0 _ALLOT
             forth.s:3180   .text:00000000000049b6 $t
             forth.s:3182   .text:00000000000049bc $d
             forth.s:3191   .text:00000000000049cc _COMMA
             forth.s:3191   .text:00000000000049ce $t
             forth.s:3191   .text:00000000000049d0 COMMA
             forth.s:3193   .text:00000000000049d4 $d
             forth.s:3207   .text:00000000000049f0 $d
             forth.s:3207   .text:00000000000049f4 _BCOMP
             forth.s:3207   .text:00000000000049fe $t
             forth.s:3207   .text:0000000000004a00 BCOMP
             forth.s:3209   .text:0000000000004a04 $d
             forth.s:3219   .text:0000000000004a14 _COMPI
             forth.s:3219   .text:0000000000004a1c $t
             forth.s:3219   .text:0000000000004a1c COMPI
ARM GAS  forth.s 			page 225


             forth.s:3221   .text:0000000000004a20 $d
             forth.s:3237   .text:0000000000004a4c _LITER
             forth.s:3237   .text:0000000000004a54 $t
             forth.s:3239   .text:0000000000004a58 $d
             forth.s:3675   .text:0000000000004f38 CALLC
             forth.s:3249   .text:0000000000004a6c STRCQ
             forth.s:3250   .text:0000000000004a6c $t
             forth.s:3251   .text:0000000000004a70 $d
             forth.s:3273   .text:0000000000004aa8 _FOR
             forth.s:3273   .text:0000000000004aac $t
             forth.s:3273   .text:0000000000004aac FOR
             forth.s:3275   .text:0000000000004ab0 $d
             forth.s:3284   .text:0000000000004ac8 _DO
             forth.s:3284   .text:0000000000004acc DO
             forth.s:3286   .text:0000000000004ad0 $d
             forth.s:3292   .text:0000000000004afc DOPLOOP
             forth.s:3293   .text:0000000000004afc $t
             forth.s:3309   .text:0000000000004b1e $d
             forth.s:3309   .text:0000000000004b22 _PLOOP
             forth.s:3309   .text:0000000000004b28 $t
             forth.s:3309   .text:0000000000004b28 PLOOP
             forth.s:3311   .text:0000000000004b2c $d
             forth.s:3315   .text:0000000000004b40 DOLOOP
             forth.s:3316   .text:0000000000004b40 $t
             forth.s:3334   .text:0000000000004b68 $d
             forth.s:3334   .text:0000000000004b6c _LOOP
             forth.s:3334   .text:0000000000004b74 LOOP
             forth.s:3336   .text:0000000000004b78 $d
             forth.s:3347   .text:0000000000004b90 _BEGIN
             forth.s:3347   .text:0000000000004b96 $t
             forth.s:3347   .text:0000000000004b98 BEGIN
             forth.s:3349   .text:0000000000004b9c $d
             forth.s:3358   .text:0000000000004ba4 $d
             forth.s:3358   .text:0000000000004ba8 _FNEXT
             forth.s:3358   .text:0000000000004bb0 FNEXT
             forth.s:3360   .text:0000000000004bb4 $d
             forth.s:3368   .text:0000000000004bcc _I
             forth.s:3368   .text:0000000000004bce $t
             forth.s:3368   .text:0000000000004bd0 I
             forth.s:3377   .text:0000000000004bdc $d
             forth.s:3377   .text:0000000000004be0 _J
             forth.s:3377   .text:0000000000004be2 $t
             forth.s:3377   .text:0000000000004be4 J
             forth.s:3387   .text:0000000000004bf0 $d
             forth.s:3387   .text:0000000000004bf4 _UNTIL
             forth.s:3387   .text:0000000000004bfa $t
             forth.s:3387   .text:0000000000004bfc UNTIL
             forth.s:3389   .text:0000000000004c00 $d
             forth.s:3398   .text:0000000000004c18 _AGAIN
             forth.s:3398   .text:0000000000004c1e $t
             forth.s:3398   .text:0000000000004c20 AGAIN
             forth.s:3400   .text:0000000000004c24 $d
             forth.s:3409   .text:0000000000004c3c _IFF
             forth.s:3409   .text:0000000000004c40 IFF
             forth.s:3411   .text:0000000000004c44 $d
             forth.s:3423   .text:0000000000004c6c _AHEAD
             forth.s:3423   .text:0000000000004c72 $t
ARM GAS  forth.s 			page 226


             forth.s:3423   .text:0000000000004c74 AHEAD
             forth.s:3425   .text:0000000000004c78 $d
             forth.s:3437   .text:0000000000004ca0 _REPEA
             forth.s:3437   .text:0000000000004ca8 REPEA
             forth.s:3439   .text:0000000000004cac $d
             forth.s:3450   .text:0000000000004cc4 _THENN
             forth.s:3450   .text:0000000000004ccc THENN
             forth.s:3452   .text:0000000000004cd0 $d
             forth.s:3463   .text:0000000000004ce4 _AFT
             forth.s:3463   .text:0000000000004ce8 $t
             forth.s:3463   .text:0000000000004ce8 AFT
             forth.s:3465   .text:0000000000004cec $d
             forth.s:3477   .text:0000000000004d04 _ELSEE
             forth.s:3477   .text:0000000000004d0c ELSEE
             forth.s:3479   .text:0000000000004d10 $d
             forth.s:3489   .text:0000000000004d24 _WHILE
             forth.s:3489   .text:0000000000004d2a $t
             forth.s:3489   .text:0000000000004d2c WHILE
             forth.s:3491   .text:0000000000004d30 $d
             forth.s:3500   .text:0000000000004d40 _ABRTQ
             forth.s:3500   .text:0000000000004d48 ABRTQ
             forth.s:3502   .text:0000000000004d4c $d
             forth.s:3511   .text:0000000000004d64 _STRQ
             forth.s:3511   .text:0000000000004d68 STRQ
             forth.s:3513   .text:0000000000004d6c $d
             forth.s:3523   .text:0000000000004d84 _DOTQ
             forth.s:3523   .text:0000000000004d88 DOTQ
             forth.s:3525   .text:0000000000004d8c $d
             forth.s:3539   .text:0000000000004da4 _UNIQU
             forth.s:3539   .text:0000000000004dac $t
             forth.s:3539   .text:0000000000004dac UNIQU
             forth.s:3541   .text:0000000000004db0 $d
             forth.s:3548   .text:0000000000004dd8 UNIQ1
             forth.s:3545   .text:0000000000004dcc $d
             forth.s:3558   .text:0000000000004de0 SNAME
             forth.s:3559   .text:0000000000004de0 $t
             forth.s:3560   .text:0000000000004de4 $d
             forth.s:3576   .text:0000000000004e28 SNAM1
             forth.s:3588   .text:0000000000004e3c _SCOMP
             forth.s:3588   .text:0000000000004e48 SCOMP
             forth.s:3590   .text:0000000000004e4c $d
             forth.s:3602   .text:0000000000004e84 SCOM2
             forth.s:3599   .text:0000000000004e7c SCOM1
             forth.s:3607   .text:0000000000004e98 SCOM3
             forth.s:3616   .text:0000000000004ea0 COLON_ABORT
             forth.s:3617   .text:0000000000004ea0 $t
             forth.s:3618   .text:0000000000004ea4 $d
             forth.s:3636   .text:0000000000004ed4 _OVERT
             forth.s:3636   .text:0000000000004eda $t
             forth.s:3638   .text:0000000000004ee0 $d
             forth.s:3649   .text:0000000000004ef8 _SEMIS
             forth.s:3649   .text:0000000000004efa $t
             forth.s:3649   .text:0000000000004efc SEMIS
             forth.s:3651   .text:0000000000004f00 $d
             forth.s:3663   .text:0000000000004f1c _RBRAC
             forth.s:3663   .text:0000000000004f1e $t
             forth.s:3663   .text:0000000000004f20 RBRAC
ARM GAS  forth.s 			page 227


             forth.s:3665   .text:0000000000004f24 $d
             forth.s:3676   .text:0000000000004f38 $t
             forth.s:3677   .text:0000000000004f3c $d
             forth.s:3689   .text:0000000000004f54 _COLON
             forth.s:3689   .text:0000000000004f56 $t
             forth.s:3689   .text:0000000000004f58 COLON
             forth.s:3691   .text:0000000000004f5c $d
             forth.s:3703   .text:0000000000004f78 _IMMED
             forth.s:3703   .text:0000000000004f82 $t
             forth.s:3703   .text:0000000000004f84 IMMED
             forth.s:3705   .text:0000000000004f88 $d
             forth.s:3723   .text:0000000000004fb4 _CONST
             forth.s:3723   .text:0000000000004fc0 CONST
             forth.s:3725   .text:0000000000004fc4 $d
             forth.s:3736   .text:0000000000004ff4 $t
             forth.s:3743   .text:0000000000004ff4 DODOES
             forth.s:3745   .text:0000000000004ff8 $d
             forth.s:3760   .text:000000000000501c $d
             forth.s:3760   .text:0000000000005020 _DOES
             forth.s:3760   .text:0000000000005026 $t
             forth.s:3760   .text:0000000000005028 DOES
             forth.s:3762   .text:000000000000502c $d
             forth.s:3777   .text:000000000000505c _DEFERAT
             forth.s:3777   .text:0000000000005064 DEFERAT
             forth.s:3779   .text:0000000000005068 $d
             forth.s:3789   .text:0000000000005080 _DEFERSTO
             forth.s:3789   .text:0000000000005088 DEFERSTO
             forth.s:3791   .text:000000000000508c $d
             forth.s:3802   .text:00000000000050a8 _DEFER
             forth.s:3802   .text:00000000000050ae $t
             forth.s:3802   .text:00000000000050b0 DEFER
             forth.s:3804   .text:00000000000050b4 $d
             forth.s:3825   .text:0000000000005100 CREAT
             forth.s:3815   .text:00000000000050e8 DEFER_NOP
             forth.s:3816   .text:00000000000050e8 $t
             forth.s:3817   .text:00000000000050ec $d
             forth.s:3825   .text:00000000000050f8 _CREAT
             forth.s:3827   .text:0000000000005104 $d
             forth.s:3840   .text:0000000000005128 _VARIA
             forth.s:3840   .text:0000000000005134 VARIA
             forth.s:3842   .text:0000000000005138 $d
             forth.s:3860   .text:0000000000005158 DMP
             forth.s:3861   .text:0000000000005158 $t
             forth.s:3862   .text:000000000000515c $d
             forth.s:3880   .text:00000000000051b0 PDUM2
             forth.s:3874   .text:0000000000005198 PDUM1
             forth.s:3895   .text:00000000000051c8 $d
             forth.s:3895   .text:00000000000051cc _DUMP
             forth.s:3895   .text:00000000000051d4 DUMP
             forth.s:3897   .text:00000000000051d8 $d
             forth.s:3923   .text:0000000000005254 DUMP4
             forth.s:3913   .text:000000000000522c DUMP1
             forth.s:3925   .text:000000000000525c DUMP3
             forth.s:3938   .text:0000000000005270 TDOT
             forth.s:3939   .text:0000000000005270 $t
             forth.s:3940   .text:0000000000005274 $d
             forth.s:3979   .text:0000000000005308 _DOTS
ARM GAS  forth.s 			page 228


             forth.s:3979   .text:000000000000530c DOTS
             forth.s:3981   .text:0000000000005310 $d
             forth.s:3988   .text:000000000000532c DOTS2
             forth.s:3984   .text:0000000000005320 DOTS1
             forth.s:3993   .text:000000000000533c RBASE
             forth.s:3994   .text:000000000000533c $t
             forth.s:4002   .text:000000000000534c RDOT
             forth.s:4004   .text:0000000000005350 $d
             forth.s:4031   .text:00000000000053b4 _TRACE
             forth.s:4031   .text:00000000000053ba $t
             forth.s:4031   .text:00000000000053bc TRACE
             forth.s:4033   .text:00000000000053c0 $d
             forth.s:4052   .text:0000000000005404 _TNAME
             forth.s:4052   .text:000000000000540a $t
             forth.s:4052   .text:000000000000540c TNAME
             forth.s:4054   .text:0000000000005410 $d
             forth.s:4057   .text:000000000000541c TNAM1
             forth.s:4068   .text:0000000000005450 TNAM2
             forth.s:4077   .text:0000000000005460 _DOTID
             forth.s:4077   .text:0000000000005464 $t
             forth.s:4077   .text:0000000000005464 DOTID
             forth.s:4079   .text:0000000000005468 $d
             forth.s:4086   .text:000000000000548c DOTI1
             forth.s:4087   .text:000000000000549a $t
             forth.s:4088   .text:000000000000549c $d
             forth.s:4090   *ABS*:0000000000000000 WANT_SEE
             forth.s:4163   .text:00000000000054a4 _VLIST
             forth.s:4163   .text:00000000000054aa $t
             forth.s:4163   .text:00000000000054ac VLIST
             forth.s:4165   .text:00000000000054b0 $d
             forth.s:4176   .text:00000000000054d0 WORDS
             forth.s:4197   .text:0000000000005514 WC
             forth.s:4176   .text:00000000000054c8 _WORDS
             forth.s:4176   .text:00000000000054ce $t
             forth.s:4178   .text:00000000000054d4 $d
             forth.s:4181   .text:00000000000054e0 WORS1
             forth.s:4190   .text:0000000000005508 WORS2
             forth.s:4197   .text:0000000000005510 _WC
             forth.s:4199   .text:0000000000005518 $d
             forth.s:4216   .text:0000000000005554 _MARK
             forth.s:4216   .text:000000000000555c MARK
             forth.s:4218   .text:0000000000005560 $d
             forth.s:4221   .text:000000000000556c $t
             forth.s:4222   .text:0000000000005570 $d
             forth.s:4237   .text:00000000000055a0 _ARRAY
             forth.s:4237   .text:00000000000055a6 $t
             forth.s:4237   .text:00000000000055a8 ARRAY
             forth.s:4239   .text:00000000000055ac $d
             forth.s:4253   .text:00000000000055e8 DO_ARRAY
             forth.s:4254   .text:00000000000055e8 $t
             forth.s:4255   .text:00000000000055ec $d
             forth.s:4273   .text:0000000000005608 VERSN
             forth.s:4274   .text:0000000000005608 $t
             forth.s:4275   .text:000000000000560c $d
             forth.s:4283   .text:000000000000561c _HI
             forth.s:4283   .text:0000000000005620 HI
             forth.s:4285   .text:0000000000005624 $d
ARM GAS  forth.s 			page 229


             forth.s:4286   .text:000000000000563e $t
             forth.s:4287   .text:0000000000005640 $d
             forth.s:4311   .text:000000000000568c $t
             forth.s:4312   .text:0000000000005690 $d
             forth.s:4324   .text:00000000000056ac PS2_QUERY
             forth.s:4325   .text:00000000000056ac $t
             forth.s:4326   .text:00000000000056b0 $d
             forth.s:4340   .text:0000000000005716 $t
             forth.s:4341   .text:0000000000005718 $d
             forth.s:4351   .text:0000000000005724 IF_SENSE
             forth.s:4352   .text:0000000000005724 $t
             forth.s:4353   .text:0000000000005728 $d
             forth.s:4367   .text:0000000000005758 READY
             forth.s:4368   .text:0000000000005758 $t
             forth.s:4369   .text:000000000000575c $d
             forth.s:4369   .text:0000000000005766 $t
             forth.s:4370   .text:0000000000005768 $d
             forth.s:4388   .text:0000000000005790 COLD1
             forth.s:4389   .text:0000000000005790 $d
             forth.s:4404   .text:00000000000057e0 COLD2
             forth.s:4407   .text:00000000000057e0 $d
             forth.s:4410   .text:00000000000057e4 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
          ser-term.s:90     .text:00000000000009db $d
          ser-term.s:90     .text:00000000000009dc $t
          ser-term.s:110    .text:0000000000000a15 $d
          ser-term.s:110    .text:0000000000000a16 $t
          ser-term.s:133    .text:0000000000000a53 $d
          ser-term.s:133    .text:0000000000000a54 $t
          ser-term.s:164    .text:0000000000000a9b $d
          ser-term.s:164    .text:0000000000000a9c $t
          ser-term.s:191    .text:0000000000000b11 $d
          ser-term.s:191    .text:0000000000000b12 $t
          ser-term.s:203    .text:0000000000000b3f $d
          ser-term.s:203    .text:0000000000000b40 $t
             tvout.s:264    .text:0000000000000d8b $d
             tvout.s:264    .text:0000000000000d8c $t
             tvout.s:278    .text:0000000000000dbf $d
             tvout.s:278    .text:0000000000000dc0 $t
             tvout.s:306    .text:0000000000000e19 $d
             tvout.s:306    .text:0000000000000e1a $t
             tvout.s:325    .text:0000000000000e47 $d
             tvout.s:325    .text:0000000000000e48 $t
             tvout.s:427    .text:0000000000000f81 $d
             tvout.s:427    .text:0000000000000f82 $t
             tvout.s:448    .text:0000000000000fdb $d
ARM GAS  forth.s 			page 230


             tvout.s:448    .text:0000000000000fdc $t
             tvout.s:495    .text:0000000000001071 $d
             tvout.s:495    .text:0000000000001072 $t
           ps2_kbd.s:307    .text:000000000000175f $d
           ps2_kbd.s:307    .text:0000000000001760 $t
           ps2_kbd.s:396    .text:000000000000185b $d
           ps2_kbd.s:396    .text:000000000000185c $t
           ps2_kbd.s:616    .text:0000000000001afd $d
           ps2_kbd.s:616    .text:0000000000001afe $t
           ps2_kbd.s:633    .text:0000000000001b37 $d
           ps2_kbd.s:633    .text:0000000000001b38 $t
         spi-flash.s:85     .text:0000000000001c23 $d
         spi-flash.s:85     .text:0000000000001c24 $t
         spi-flash.s:151    .text:0000000000001cef $d
         spi-flash.s:151    .text:0000000000001cf0 $t
         spi-flash.s:238    .text:0000000000001e33 $d
         spi-flash.s:238    .text:0000000000001e34 $t
         spi-flash.s:256    .text:0000000000001e6f $d
         spi-flash.s:256    .text:0000000000001e70 $t
         spi-flash.s:278    .text:0000000000001ec3 $d
         spi-flash.s:278    .text:0000000000001ec4 $t
         spi-flash.s:325    .text:0000000000001f43 $d
         spi-flash.s:325    .text:0000000000001f44 $t
         spi-flash.s:343    .text:0000000000001f65 $d
         spi-flash.s:343    .text:0000000000001f66 $t
         spi-flash.s:352    .text:0000000000001f79 $d
         spi-flash.s:352    .text:0000000000001f7a $t
               fpu.s:201    .text:0000000000002123 $d
               fpu.s:201    .text:0000000000002124 $t
               fpu.s:214    .text:0000000000002143 $d
               fpu.s:214    .text:0000000000002144 $t
               fpu.s:228    .text:0000000000002163 $d
               fpu.s:228    .text:0000000000002164 $t
               fpu.s:241    .text:0000000000002183 $d
               fpu.s:241    .text:0000000000002184 $t
               fpu.s:264    .text:00000000000021c1 $d
               fpu.s:264    .text:00000000000021c2 $t
               fpu.s:276    .text:00000000000021e1 $d
               fpu.s:276    .text:00000000000021e2 $t
               fpu.s:298    .text:000000000000221b $d
               fpu.s:298    .text:000000000000221c $t
               fpu.s:309    .text:0000000000002237 $d
               fpu.s:309    .text:0000000000002238 $t
               fpu.s:319    .text:0000000000002251 $d
               fpu.s:319    .text:0000000000002252 $t
               fpu.s:332    .text:0000000000002281 $d
               fpu.s:332    .text:0000000000002282 $t
               fpu.s:358    .text:00000000000022d1 $d
               fpu.s:358    .text:00000000000022d2 $t
               fpu.s:382    .text:0000000000002315 $d
               fpu.s:382    .text:0000000000002316 $t
               fpu.s:391    .text:000000000000232f $d
               fpu.s:391    .text:0000000000002330 $t
            strtof.s:204    .text:000000000000256b $d
            strtof.s:204    .text:000000000000256c $t
              ftoa.s:325    .text:0000000000002a5f $d
              ftoa.s:325    .text:0000000000002a60 $t
ARM GAS  forth.s 			page 231


             forth.s:132    .text:0000000000002b1d $d
             forth.s:132    .text:0000000000002b1e $t
             forth.s:144    .text:0000000000002b41 $d
             forth.s:144    .text:0000000000002b42 $t
             forth.s:156    .text:0000000000002b63 $d
             forth.s:156    .text:0000000000002b64 $t
             forth.s:178    .text:0000000000002b9d $d
             forth.s:178    .text:0000000000002b9e $t
             forth.s:214    .text:0000000000002bbb $d
             forth.s:214    .text:0000000000002bbc $t
             forth.s:261    .text:0000000000002c69 $d
             forth.s:261    .text:0000000000002c6a $t
             forth.s:278    .text:0000000000002c97 $d
             forth.s:278    .text:0000000000002c98 $t
             forth.s:292    .text:0000000000002cc1 $d
             forth.s:292    .text:0000000000002cc2 $t
             forth.s:390    .text:0000000000002d65 $d
             forth.s:390    .text:0000000000002d66 $t
             forth.s:415    .text:0000000000002d93 $d
             forth.s:415    .text:0000000000002d94 $t
             forth.s:425    .text:0000000000002da7 $d
             forth.s:425    .text:0000000000002da8 $t
             forth.s:434    .text:0000000000002db3 $d
             forth.s:434    .text:0000000000002db4 $t
             forth.s:454    .text:0000000000002de1 $d
             forth.s:454    .text:0000000000002de2 $t
             forth.s:463    .text:0000000000002df5 $d
             forth.s:463    .text:0000000000002df6 $t
             forth.s:520    .text:0000000000002e69 $d
             forth.s:520    .text:0000000000002e6a $t
             forth.s:536    .text:0000000000002e8b $d
             forth.s:536    .text:0000000000002e8c $t
             forth.s:546    .text:0000000000002e9d $d
             forth.s:546    .text:0000000000002e9e $t
             forth.s:555    .text:0000000000002eaf $d
             forth.s:555    .text:0000000000002eb0 $t
             forth.s:572    .text:0000000000002ed1 $d
             forth.s:572    .text:0000000000002ed2 $t
             forth.s:602    .text:0000000000002f17 $d
             forth.s:602    .text:0000000000002f18 $t
             forth.s:611    .text:0000000000002f2d $d
             forth.s:611    .text:0000000000002f2e $t
             forth.s:659    .text:0000000000002f87 $d
             forth.s:659    .text:0000000000002f88 $t
             forth.s:670    .text:0000000000002f9b $d
             forth.s:670    .text:0000000000002f9c $t
             forth.s:678    .text:0000000000002fa9 $d
             forth.s:678    .text:0000000000002faa $t
             forth.s:686    .text:0000000000002fb9 $d
             forth.s:686    .text:0000000000002fba $t
             forth.s:694    .text:0000000000002fc9 $d
             forth.s:694    .text:0000000000002fca $t
             forth.s:718    .text:0000000000002ff9 $d
             forth.s:718    .text:0000000000002ffa $t
             forth.s:743    .text:000000000000302d $d
             forth.s:743    .text:000000000000302e $t
             forth.s:751    .text:000000000000303d $d
ARM GAS  forth.s 			page 232


             forth.s:751    .text:000000000000303e $t
             forth.s:759    .text:000000000000304f $d
             forth.s:759    .text:0000000000003050 $t
             forth.s:780    .text:0000000000003077 $d
             forth.s:780    .text:0000000000003078 $t
             forth.s:809    .text:00000000000030b3 $d
             forth.s:809    .text:00000000000030b4 $t
             forth.s:819    .text:00000000000030c7 $d
             forth.s:819    .text:00000000000030c8 $t
             forth.s:832    .text:00000000000030e5 $d
             forth.s:832    .text:00000000000030e6 $t
             forth.s:885    .text:000000000000315d $d
             forth.s:885    .text:000000000000315e $t
             forth.s:926    .text:00000000000031b3 $d
             forth.s:926    .text:00000000000031b4 $t
             forth.s:949    .text:00000000000031df $d
             forth.s:949    .text:00000000000031e0 $t
             forth.s:962    .text:00000000000031ff $d
             forth.s:962    .text:0000000000003200 $t
             forth.s:986    .text:000000000000322f $d
             forth.s:986    .text:0000000000003230 $t
             forth.s:1032   .text:0000000000003287 $d
             forth.s:1032   .text:0000000000003288 $t
             forth.s:1044   .text:000000000000329f $d
             forth.s:1044   .text:00000000000032a0 $t
             forth.s:1056   .text:00000000000032bb $d
             forth.s:1056   .text:00000000000032bc $t
             forth.s:1117   .text:0000000000003321 $d
             forth.s:1117   .text:0000000000003322 $t
             forth.s:1126   .text:0000000000003339 $d
             forth.s:1126   .text:000000000000333a $t
             forth.s:1153   .text:0000000000003381 $d
             forth.s:1153   .text:0000000000003382 $t
             forth.s:1182   .text:00000000000033bd $d
             forth.s:1182   .text:00000000000033be $t
             forth.s:1201   .text:00000000000033e9 $d
             forth.s:1201   .text:00000000000033ea $t
             forth.s:1241   .text:0000000000003443 $d
             forth.s:1241   .text:0000000000003444 $t
             forth.s:1261   .text:000000000000346d $d
             forth.s:1261   .text:000000000000346e $t
             forth.s:1275   .text:000000000000348b $d
             forth.s:1275   .text:000000000000348c $t
             forth.s:1286   .text:00000000000034a9 $d
             forth.s:1286   .text:00000000000034aa $t
             forth.s:1303   .text:00000000000034c7 $d
             forth.s:1303   .text:00000000000034c8 $t
             forth.s:1320   .text:00000000000034f3 $d
             forth.s:1320   .text:00000000000034f4 $t
             forth.s:1455   .text:000000000000363f $d
             forth.s:1455   .text:0000000000003640 $t
             forth.s:1477   .text:000000000000368b $d
             forth.s:1477   .text:000000000000368c $t
             forth.s:1526   .text:00000000000036cb $d
             forth.s:1526   .text:00000000000036cc $t
             forth.s:1577   .text:0000000000003743 $d
             forth.s:1577   .text:0000000000003744 $t
ARM GAS  forth.s 			page 233


             forth.s:1636   .text:00000000000037ed $d
             forth.s:1636   .text:00000000000037ee $t
             forth.s:1654   .text:0000000000003815 $d
             forth.s:1654   .text:0000000000003816 $t
             forth.s:1688   .text:0000000000003867 $d
             forth.s:1688   .text:0000000000003868 $t
             forth.s:1721   .text:00000000000038b5 $d
             forth.s:1721   .text:00000000000038b6 $t
             forth.s:1753   .text:00000000000038fd $d
             forth.s:1753   .text:00000000000038fe $t
             forth.s:1831   .text:00000000000039df $d
             forth.s:1831   .text:00000000000039e0 $t
             forth.s:1843   .text:00000000000039fd $d
             forth.s:1843   .text:00000000000039fe $t
             forth.s:1875   .text:0000000000003a4b $d
             forth.s:1875   .text:0000000000003a4c $t
             forth.s:1893   .text:0000000000003a7d $d
             forth.s:1893   .text:0000000000003a7e $t
             forth.s:1907   .text:0000000000003aa7 $d
             forth.s:1907   .text:0000000000003aa8 $t
             forth.s:1985   .text:0000000000003b63 $d
             forth.s:1985   .text:0000000000003b64 $t
             forth.s:2036   .text:0000000000003c49 $d
             forth.s:2036   .text:0000000000003c4a $t
             forth.s:2089   .text:0000000000003cc3 $d
             forth.s:2089   .text:0000000000003cc4 $t
             forth.s:2158   .text:0000000000003dd7 $d
             forth.s:2158   .text:0000000000003dd8 $t
             forth.s:2189   .text:0000000000003e1f $d
             forth.s:2189   .text:0000000000003e20 $t
             forth.s:2206   .text:0000000000003e55 $d
             forth.s:2206   .text:0000000000003e56 $t
             forth.s:2224   .text:0000000000003e8b $d
             forth.s:2224   .text:0000000000003e8c $t
             forth.s:2329   .text:0000000000003f8b $d
             forth.s:2329   .text:0000000000003f8c $t
             forth.s:2366   .text:0000000000003fef $d
             forth.s:2366   .text:0000000000003ff0 $t
             forth.s:2430   .text:00000000000040a3 $d
             forth.s:2430   .text:00000000000040a4 $t
             forth.s:2446   .text:00000000000040cb $d
             forth.s:2446   .text:00000000000040cc $t
             forth.s:2588   .text:00000000000042a3 $d
             forth.s:2588   .text:00000000000042a4 $t
             forth.s:2627   .text:0000000000004305 $d
             forth.s:2627   .text:0000000000004306 $t
             forth.s:2639   .text:000000000000432b $d
             forth.s:2639   .text:000000000000432c $t
             forth.s:2650   .text:0000000000004345 $d
             forth.s:2650   .text:0000000000004346 $t
             forth.s:2933   .text:00000000000046b3 $d
             forth.s:2933   .text:00000000000046b4 $t
             forth.s:3025   .text:00000000000047c7 $d
             forth.s:3025   .text:00000000000047c8 $t
             forth.s:3076   .text:000000000000487f $d
             forth.s:3076   .text:0000000000004880 $t
             forth.s:3088   .text:00000000000048a9 $d
ARM GAS  forth.s 			page 234


             forth.s:3088   .text:00000000000048aa $t
             forth.s:3109   .text:00000000000048ef $d
             forth.s:3109   .text:00000000000048f0 $t
             forth.s:3121   .text:000000000000490d $d
             forth.s:3121   .text:000000000000490e $t
             forth.s:3136   .text:000000000000493b $d
             forth.s:3136   .text:000000000000493c $t
             forth.s:3284   .text:0000000000004acb $d
             forth.s:3284   .text:0000000000004acc $t
             forth.s:3334   .text:0000000000004b71 $d
             forth.s:3334   .text:0000000000004b72 $t
             forth.s:3358   .text:0000000000004bad $d
             forth.s:3358   .text:0000000000004bae $t
             forth.s:3409   .text:0000000000004c3f $d
             forth.s:3409   .text:0000000000004c40 $t
             forth.s:3437   .text:0000000000004ca7 $d
             forth.s:3437   .text:0000000000004ca8 $t
             forth.s:3450   .text:0000000000004cc9 $d
             forth.s:3450   .text:0000000000004cca $t
             forth.s:3477   .text:0000000000004d09 $d
             forth.s:3477   .text:0000000000004d0a $t
             forth.s:3500   .text:0000000000004d47 $d
             forth.s:3500   .text:0000000000004d48 $t
             forth.s:3511   .text:0000000000004d67 $d
             forth.s:3511   .text:0000000000004d68 $t
             forth.s:3523   .text:0000000000004d87 $d
             forth.s:3523   .text:0000000000004d88 $t
             forth.s:3588   .text:0000000000004e45 $d
             forth.s:3588   .text:0000000000004e46 $t
             forth.s:3723   .text:0000000000004fbd $d
             forth.s:3723   .text:0000000000004fbe $t
             forth.s:3777   .text:0000000000005063 $d
             forth.s:3777   .text:0000000000005064 $t
             forth.s:3789   .text:0000000000005087 $d
             forth.s:3789   .text:0000000000005088 $t
             forth.s:3825   .text:00000000000050ff $d
             forth.s:3825   .text:0000000000005100 $t
             forth.s:3840   .text:0000000000005131 $d
             forth.s:3840   .text:0000000000005132 $t
             forth.s:3895   .text:00000000000051d1 $d
             forth.s:3895   .text:00000000000051d2 $t
             forth.s:3979   .text:000000000000530b $d
             forth.s:3979   .text:000000000000530c $t
             forth.s:4197   .text:0000000000005513 $d
             forth.s:4197   .text:0000000000005514 $t
             forth.s:4216   .text:0000000000005559 $d
             forth.s:4216   .text:000000000000555a $t
             forth.s:4283   .text:000000000000561f $d
             forth.s:4283   .text:0000000000005620 $t
             forth.s:4382   .text:0000000000005779 $d
             forth.s:4382   .text:000000000000577a $t

UNDEFINED SYMBOLS
_mstack
