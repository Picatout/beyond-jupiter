ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ BCHAR, NBASE+4   // display base character flag 
  81              	  .equ TMP, BCHAR+4   // temporary variable
  82              	  .equ CSPAN, TMP+4  // character count received by expect  
  83              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  84              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  85              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  86              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  87              	  .equ VHOLD, EVAL+4   // hold pointer 
  88              	  .equ CTXT, VHOLD+4  // context pointer 
  89              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  90              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  91              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  92              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  93              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  94              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  95              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  96              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  97              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  98              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  99              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 100              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 101              	  .equ KBD_QUEUE_SIZE, 16 
 102              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 103              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 104              	  .equ KBD_QTAIL,KBD_QHEAD+4
 105              	  .equ ROW,KBD_QTAIL+4 
 106              	  .equ COL,ROW+4 
 107              	  .equ BK_COLOR,COL+4 
ARM GAS  forth.s 			page 10


 108              	  .equ PEN_COLOR,BK_COLOR+4
 109              	  .equ VFPSW, PEN_COLOR+4 
 110              	  .equ VFBASE, VFPSW+4 
 111              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 112              	
 113              	/***********************************************
 114              	* MACROS
 115              	*	Assemble inline direct threaded code ending.
 116              	***********************************************/
 117              		.macro _CALL fn /* low level routine call */ 
 118              	 	PUSH {LR}
 119              		BL \fn  
 120              		POP {LR}
 121              		.endm
 122              		
 123              		.macro _RET /* exit sub-routine */ 
 124              		BX LR 
 125              		.endm 
 126              	
 127              		// dictionary header  
 128              		.macro _HEADER  label, nlen, name
 129              			.word LINK 
 130              			.equ LINK , . 
 131              		_\label: .byte \nlen    // name field
 132              			.ascii "\name"
 133              			.p2align 2 
 134              		\label:   // code field 
 135              		.endm 
 136              		
 137              	
 138              	// local function header 
 139              		.macro _FUNC label 
 140              		.section .text, "ax", %progbits 
 141              		.p2align 2 
 142              		.type \label, %function  
 143              		\label:
 144              		.endm 
 145              	
 146              	// global function header 
 147              		.macro _GBL_FUNC label 
 148              		.global \label 
 149              		_FUNC \label 
 150              		.endm 
 151              	
 152              	
 153              	// load large constant to register 
 154              		.macro _MOV32 r, value 
 155              		mov \r,#(\value&0xffff)
 156              		movt \r,#(\value>>16)
 157              		.endm 
 158              	
 159              		.macro _NEXT /* direct jump INEXT */ 
 160              		B INEXT   
 161              		.endm 
 162              	
 163              	 	.macro	_NEST /*start high level word */
 164              		BX INX  
ARM GAS  forth.s 			page 11


 165              		NOP.N 
 166              		.endm
 167              	
 168              		.macro _ADR label 
 169              		.word 1+\label  
 170              		.endm 
 171              	
 172              	 	.macro	_UNNEST	/*end high level word */
 173              		_ADR UNNEST 
 174              		.endm
 175              	
 176              	 	.macro	_DOLIT u /*long literals */
 177              		_ADR	DOLIT
 178              		.word	\u 
 179              		.endm
 180              	
 181              		.macro _DOTQP len, text 
 182              		_ADR DOTQP 
 183              		.byte \len 
 184              		.ascii "\text" 
 185              		.p2align 2 
 186              		.endm
 187              	
 188              		.macro _COMPI name 
 189              		_DOLIT \name 
 190              		_ADR CALLC 
 191              		.endm 
 192              	
 193              		.macro _ABORQ len,name 
 194              		_ADR ABORQ 
 195              		.byte \len 
 196              		.ascii "\name"
 197              		.p2align 2 
 198              		.endm
 199              	
 200              		.macro _BRAN label 
 201              		_ADR BRAN 
 202              		.word \label 
 203              		.endm 
 204              	
 205              		.macro _QBRAN label 
 206              		_ADR QBRAN 
 207              		.word \label
 208              		.endm 
 209              	
 210              		.macro _TBRAN label 
 211              		_ADR TBRAN 
 212              		.word \label 
 213              		.endm 
 214              	
 215              		.macro _DONXT label 
 216              		_ADR DONXT
 217              		.word \label 
 218              		.endm 
 219              	
 220              	 	.macro	_PUSH	/*push TOS on data stack*/
 221              		STR	TOS,[DSP,#-4]!
ARM GAS  forth.s 			page 12


 222              		.endm
 223              	
 224              	 	.macro	_POP /*pop data stack to TOS */
 225              		LDR	TOS,[DSP],#4
 226              		.endm
 227              	
 228              		// calling a colon word 
 229              		// from a code word   
 230              		.macro _CALL_COLWORD target 
 231              	    ldr WP,=\target 
 232              		orr WP,#1
 233              		b \target  
 234              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
ARM GAS  forth.s 			page 13


  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
ARM GAS  forth.s 			page 14


 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF810C9 	  ldr IP,=dh
 159 000e 02F061BE 	  b INEXT  
 160              	dh:
 161 0012 054B0000 	  _ADR PRESE
 162 0016 09410000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 212D0000 	  _ADR CFSR 
 164 0038 8D300000 	  _ADR DUPP
 165 003c 09300000 	  _ADR TOR 
 166 0040 FF2E0000 	  _DOLIT 16 
 166      10000000 
 167 0048 99350000 	  _ADR BASE 
 168 004c 852F0000 	  _ADR STORE 
 169 0050 05420000 	  _ADR UDOT 
 170 0054 09410000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 C52F0000 	  _ADR RFROM
 172 0068 FF2E0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 D1300000 	  _ADR ANDD
ARM GAS  forth.s 			page 15


 174 0074 3F2F0000 	  _QBRAN 1f
 174      94000000 
 175 007c 412D0000 	  _ADR BFAR
 176 0080 FF2E0000 	  _DOLIT ','
 176      2C000000 
 177 0088 9D2D0000 	  _ADR EMIT 
 178 008c 19400000 	  _ADR SPACE 
 179 0090 05420000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 09410000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 49200000 	  _ADR FPSCR
 184 00a8 05420000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF85CC8 	  ldr IP,=fpu_except
 202 00c4 02F006BE 	  b INEXT 
 203              	fpu_except:  
 204 00c8 A1400000 	  _ADR CR 
 205 00cc 99350000 	  _ADR BASE 
 206 00d0 992F0000 	  _ADR AT 
 207 00d4 09300000 	  _ADR TOR  
 208 00d8 FF2E0000 	  _DOLIT 16 
 208      10000000 
 209 00e0 99350000 	  _ADR BASE 
 210 00e4 852F0000 	  _ADR STORE
 211 00e8 FF2E0000 	  _DOLIT 4 
 211      04000000 
 212 00f0 61310000 	  _ADR SUBB  
 213 00f4 09410000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 39420000 	  _ADR DOT 
 215 0104 09410000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 49200000 	  _ADR FPSCR 
 217 0124 8D300000 	  _ADR DUPP 
ARM GAS  forth.s 			page 16


 218 0128 39420000 	  _ADR DOT
 219 012c 61320000 	  _ADR QDUP 
 220 0130 3F2F0000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 FF2E0000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 9D2D0000 	  _ADR EMIT 
 223 0144 FF2E0000 	  _DOLIT ' ' 
 223      20000000 
 224 014c 9D2D0000 	  _ADR EMIT
 225 0150 8D300000 	  _ADR DUPP 
 226 0154 FF2E0000 	  _DOLIT 0x10 
 226      10000000 
 227 015c D1300000 	  _ADR ANDD
 228 0160 61320000 	  _ADR QDUP  
 229 0164 3F2F0000 	  _QBRAN 1f 
 229      84010000 
 230 016c FF2E0000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 51310000 	  _ADR PLUS 
 232 0178 992F0000 	  _ADR AT 
 233 017c E5340000 	  _ADR COUNT 
 234 0180 6D400000 	  _ADR TYPEE
 235 0184 FF2E0000 	1: _DOLIT 15 
 235      0F000000 
 236 018c D1300000 	  _ADR ANDD
 237 0190 95330000 	  _ADR CLZ 
 238 0194 FF2E0000 	  _DOLIT 31 
 238      1F000000 
 239 019c 9D300000 	  _ADR SWAP 
 240 01a0 61310000 	  _ADR SUBB 
 241 01a4 FF2E0000 	  _DOLIT 2 
 241      02000000 
 242 01ac 41310000 	  _ADR LSHIFT 
 243 01b0 FF2E0000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 51310000 	  _ADR PLUS 
 245 01bc 992F0000 	  _ADR AT 
 246 01c0 E5340000 	  _ADR COUNT 
 247 01c4 6D400000 	  _ADR TYPEE 
 248 01c8 A1400000 	2: _ADR CR 
 249 01cc FF2E0000 	  _DOLIT 0
 249      00000000 
 250 01d4 69200000 	  _ADR CLR_FPSCR 
 251 01d8 C52F0000 	  _ADR RFROM  
 252 01dc 99350000 	  _ADR BASE 
 253 01e0 852F0000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF838C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
ARM GAS  forth.s 			page 17


 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
ARM GAS  forth.s 			page 18


 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C0C6 	  ldr IP,=nmi_hl 
 306 0268 02F034BD 	  b  INEXT
 307              	nmi_hl:
 308 026c 054B0000 	  _ADR PRESE 
 309 0270 A1400000 	  _ADR CR 
 310 0274 09410000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 A1400000 	  _ADR CR 
 312 0298 7D490000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF884C6 	  ldr IP,=hardfault_hl 
 326 02aa 02F013BD 	  b INEXT
 327              	hardfault_hl:
 328 02ae 054B0000 	  _ADR PRESE
 329 02b2 A1400000 	  _ADR CR  
 330 02b6 09410000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 A1400000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF84CC6 	  ldr IP,=memfault_hl 
 345 02e6 02F0F5BC 	  b INEXT 
 346              	memfault_hl: 
 347 02ea 054B0000 	  _ADR PRESE
 348 02ee A1400000 	  _ADR CR  
 349 02f2 09410000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
ARM GAS  forth.s 			page 19


 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 FF2E0000 	  _DOLIT 16 
 350      10000000 
 351 0320 99350000 	  _ADR BASE 
 352 0324 852F0000 	  _ADR STORE   
 353 0328 212D0000 	  _ADR CFSR
 354 032c FF2E0000 	  _DOLIT 255 
 354      FF000000 
 355 0334 D1300000 	  _ADR ANDD 
 356 0338 05420000 	  _ADR UDOT 
 357 033c A1400000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8E4C5 	  ldr IP,=busfault_hl 
 372 0352 02F0BFBC 	  b INEXT 
 373              	busfault_hl:
 374 0356 054B0000 	  _ADR PRESE
 375 035a FF2E0000 	  _DOLIT 1 
 375      01000000 
 376 0362 692E0000 	  _ADR ULED 
 377 0366 FF2E0000 	  _DOLIT  100 
 377      64000000 
 378 036e 51350000 	  _ADR MSEC 
 379 0372 412D0000 	  _ADR BFAR 
 380 0376 212D0000 	  _ADR CFSR 
 381 037a A1400000 	  _ADR CR  
 382 037e 09410000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 FF2E0000 	  _DOLIT 16 
 383      10000000 
 384 03a8 99350000 	  _ADR BASE 
 385 03ac 852F0000 	  _ADR STORE   
 386 03b0 FF2E0000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 D1300000 	  _ADR ANDD   
 388 03bc 05420000 	  _ADR UDOT 
 389 03c0 09410000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
ARM GAS  forth.s 			page 20


 390 03cc 05420000 	  _ADR UDOT 
 391 03d0 A1400000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF854C5 	  ldr IP,=usagefault_hl
 405 03e6 02F075BC 	  b INEXT 
 406              	usagefault_hl:
 407 03ea 054B0000 	  _ADR PRESE
 408 03ee A1400000 	  _ADR CR  
 409 03f2 09410000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 FF2E0000 	  _DOLIT 16 
 410      10000000 
 411 0418 99350000 	  _ADR BASE 
 412 041c 852F0000 	  _ADR STORE   
 413 0420 212D0000 	  _ADR CFSR
 414 0424 FF2E0000 	  _DOLIT 16 
 414      10000000 
 415 042c 29310000 	  _ADR RSHIFT 
 416 0430 05420000 	  _ADR UDOT 
 417 0434 A1400000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8AC00 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
ARM GAS  forth.s 			page 21


 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8AC00 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8AC00 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF898C4 	  ldr IP,=ur
 474 04a4 02F016BC 	  b INEXT  
 475              	ur:
 476 04a8 054B0000 	  _ADR PRESE
 477 04ac A1400000 	  _ADR CR   
 478 04b0 FF2E0000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 E5340000 		_ADR COUNT 
 480 04bc 6D400000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
ARM GAS  forth.s 			page 22


 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F063FD 	  bl  fpu_init 
 518 0524 00F027FA 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F020FB 	  bl  flash_spi_init   
 522 0534 05F0FCB9 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF68067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF47F48 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8ECA3 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
ARM GAS  forth.s 			page 23


 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
ARM GAS  forth.s 			page 24


 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
ARM GAS  forth.s 			page 25


 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A449     		ldr r1,=UZERO 
 674 06b2 4FF0B802 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
ARM GAS  forth.s 			page 26


 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
ARM GAS  forth.s 			page 27


 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
ARM GAS  forth.s 			page 28


 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
ARM GAS  forth.s 			page 29


 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 40580000 		.word HI_BOTH  /*'BOOT */
 874 0878 5C180000 		.word PS2_QKEY /* query for character */
 875 087c 24110000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 80FE0120 		.word TIBB	/*TIBU */
 883 089c DC490000 		.word INTER	/*'EVAL */
 884 08a0 00000000 		.word 0			/*HLD */
 885 08a4 28590000 		.word _LASTN	/*CONTEXT */
 886 08a8 94590000 		.word CTOP  	/* FCP end of system dictionnary */
 887 08ac 30510020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 888 08b0 28590000 		.word _LASTN	/*LAST word in dictionary */
 889 08b4 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 889      00000000 
 889      00000000 
 889      00000000 
 890 08c4 00000000 		.word 0  /* RX_HEAD */
 891 08c8 00000000 		.word 0  /* RX_TAIL */ 
 892 08cc 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 893 08d0 00000000 		.word 0  /* VID_STATE, video state */  
 894 08d4 00000000 	    .word 0  /* VID_FIELD, field */
 895 08d8 80800120 		.word VID_BUFF /* video_buffer address */ 
 896 08dc 00000000 	    .word 0 /* kbd struct */
 897 08e0 00000000 		.space KBD_QUEUE_SIZE,0  
 897      00000000 
 897      00000000 
 897      00000000 
 898 08f0 00000000 		.word 0  /* kbd queue head */
 899 08f4 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 30


 900 08f8 00000000 	    .word 0 /* tv cursor row */
 901 08fc 00000000 	    .word 0 /* tv cursor column */ 
 902 0900 00000000 	    .word 0 /* tv back color */
 903 0904 07000000 	    .word 7 /* tv font color */
 904 0908 00000000 	    .word 0 /* FPSW */
 905 090c 00000000 	    .word 0 /* FBASE */ 
 906 0910 00000000 	    .word 0 /* BEEP_DTMR */ 
 907 0914 00000000 	    .word 0,0 
 907      00000000 
 908              	ULAST:
 909              	
 910              	// used by _HEADER macro 
 911              	// to link names field
 912              	// in dictionary  
 913 091c 12000000 	    .equ LINK, 0 
 913      C8000000 
 913      244B0000 
 913      6C020000 
 913      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0948 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0950 1868     		ldr r0,[r3,#USART_SR]
ARM GAS  forth.s 			page 31


  38 0952 5968     		ldr r1,[r3,#USART_DR]
  39 0954 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0958 0CD0     		beq 2f // no char received 
  41 095a B1F1030F 		cmp r1,#VK_CTRL_C 
  42 095e 3FF49AAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0962 04F15000 		add r0,UP,#RX_QUEUE
  44 0966 626E     		ldr r2,[UP,#RX_TAIL]
  45 0968 8154     		strb r1,[r0,r2]
  46 096a 02F10102 		add r2,#1 
  47 096e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0972 6266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0974 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0976 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 097e 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0980 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0984 01EA0201 	  and r1,r1,r2
  62 0988 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 098c 41EA0201 	  orr r1,r1,r2 
  64 0990 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0992 4FF4EE61 	  mov r1,#0x77<<4 
  67 0996 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0998 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 09a0 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 09a4 8160     	  str r1,[r0,#USART_BRR]
  73 09a6 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 09aa C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 09ac 4FF02500 	  mov r0,#USART1_IRQ 
  77 09b0 4FF00701 	  mov r1,#7
  78 09b4 00B5FFF7 	  _CALL nvic_set_priority
  78      97FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 09be 4FF02500 	  mov r0,#USART1_IRQ 
  81 09c2 00B5FFF7 	  _CALL nvic_enable_irq  
  81      A9FE5DF8 
  81      04EB
  82 09cc 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
ARM GAS  forth.s 			page 32


  89              	************************************************************/
  90 09ce 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 09dc 47F8046D 		_PUSH
  92 09e0 606E     		ldr T0,[UP,#RX_TAIL] 
  93 09e2 216E     		ldr T1,[UP,#RX_HEAD]
  94 09e4 90EA0106 		eors TOS,T0,T1 
  95 09e8 0CD0     		beq 1f
  96 09ea 04F15000 		add T0,UP,#RX_QUEUE 
  97 09ee 0844     		add T0,T1 
  98 09f0 0678     		ldrb TOS,[T0]
  99 09f2 01F10101 		add T1,#1 
 100 09f6 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 09fa 2166     		str T1,[UP,#RX_HEAD]
 102 09fc 47F8046D 		_PUSH 
 103 0a00 4FF0FF36 		mov TOS,#-1
 104 0a04 02F066B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0a08 D2090000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0a18 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0a20 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0a22 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0a26 FBD0     		beq 1b 
 115 0a28 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0a2a 57F8046B 		_POP
 117 0a2e 02F051B9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0a32 0C0A0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0a3c 47F8046D 	        _PUSH 
 126 0a40 4FF00006 	        mov TOS,#0
 127 0a44 02F046B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0a48 360A0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0a54 47F8046D 	        _PUSH 
ARM GAS  forth.s 			page 33


 135 0a58 4FF00106 	        mov TOS,#1
 136 0a5c 02F03AB9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0a60 4C0A0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0a6c 3046     	        mov T0,TOS
 144 0a6e 57F8046B 	        _POP 
 145 0a72 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0a74 4B48     	        ldr T0,=SER_QKEY 
 148 0a76 6061     	        str T0,[UP,#STDIN]
 149 0a78 4B48     	        ldr T0,=SER_EMIT
 150 0a7a A061     	        str T0,[UP,#STDOUT]
 151 0a7c 02F02AB9 	        _NEXT 
 152              	4: // local console 
 153 0a80 4A48     	        ldr T0,=PS2_QKEY
 154 0a82 6061     	        str T0,[UP,#STDIN]
 155 0a84 4A48     	        ldr T0,=TV_EMIT
 156 0a86 A061     	        str T0,[UP,#STDOUT]
 157 0a88 02F024B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0a8c 640A0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0a9c 504700BF 	      _NEST 
 166 0aa0 FF2E0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0aa8 AD310000 	1:    _ADR ONEP  // c+1
 168 0aac 09300000 	      _ADR TOR   
 169 0ab0 FF2E0000 	      _DOLIT 10 
 169      0A000000 
 170 0ab8 E1380000 	      _ADR SLMOD // r q  
 171 0abc 61320000 	      _ADR QDUP  // r q q | r 0  
 172 0ac0 3F2F0000 	      _QBRAN 2f  // r 0 
 172      D40A0000 
 173 0ac8 C52F0000 	      _ADR RFROM // r q c 
 174 0acc 672F0000 	      _BRAN 1b
 174      A80A0000 
 175 0ad4 FF2E0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0adc 51310000 	      _ADR PLUS 
 177 0ae0 9D2D0000 	      _ADR EMIT 
 178 0ae4 C52F0000 	      _ADR RFROM 
 179 0ae8 61320000 	      _ADR QDUP 
 180 0aec 3F2F0000 	      _QBRAN 3f
 180      040B0000 
ARM GAS  forth.s 			page 34


 181 0af4 BD310000 	      _ADR ONEM 
 182 0af8 09300000 	      _ADR TOR 
 183 0afc 672F0000 	      _BRAN 2b 
 183      D40A0000 
 184              	3:    
 185 0b04 DB2C0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0b08 900A0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0b14 504700BF 	      _NEST 
 193 0b18 FF2E0000 	      _DOLIT 27 
 193      1B000000 
 194 0b20 9D2D0000 	      _ADR EMIT 
 195 0b24 FF2E0000 	      _DOLIT '['
 195      5B000000 
 196 0b2c 9D2D0000 	      _ADR EMIT 
 197 0b30 DB2C0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0b34 0C0B0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0b40 504700BF 	      _NEST
 205 0b44 150B0000 	      _ADR ANSI_ESC
 206 0b48 9D300000 	      _ADR SWAP 
 207 0b4c 9D0A0000 	      _ADR ANSI_PARAM 
 208 0b50 FF2E0000 	      _DOLIT ';'
 208      3B000000 
 209 0b58 9D2D0000 	      _ADR EMIT
 210 0b5c 9D0A0000 	      _ADR ANSI_PARAM
 211 0b60 FF2E0000 	      _DOLIT 'H'
 211      48000000 
 212 0b68 9D2D0000 	      _ADR EMIT 
 213 0b6c DB2C0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0b70 380B0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0b7c 504700BF 	    _NEST
 221 0b80 FF2E0000 	    _DOLIT 1 
 221      01000000 
 222 0b88 8D300000 	    _ADR DUPP 
 223 0b8c 410B0000 	    _ADR SER_AT  
 224 0b90 150B0000 	    _ADR ANSI_ESC
 225 0b94 FF2E0000 	    _DOLIT 'J'
ARM GAS  forth.s 			page 35


 225      4A000000 
 226 0b9c 9D2D0000 	    _ADR EMIT 
 227 0ba0 DB2C0000 	    _UNNEST 
 228 0ba4 DC090000 	
 228      180A0000 
 228      5C180000 
 228      24110000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
ARM GAS  forth.s 			page 36


  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0bb4 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0bbc 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0bbe 4FF00002 	  _MOV32 r2,0x55000000
ARM GAS  forth.s 			page 37


  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0bc6 41EA0201 	  orr r1,r2
  82 0bca 0160     	  str r1,[r0,#GPIO_MODER]
  83 0bcc 81EA0101 	  eor r1,r1 
  84 0bd0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0bd2 4FF00101 	  mov r1,#1 // pin 1 
  88 0bd6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0bda 00B5FFF7 	  _CALL gpio_config 
  89      E0FD5DF8 
  89      04EB
  90 0be4 4FF00101 	  mov r1,#1 
  91 0be8 4FF00202 	  mov r2,#2
  92 0bec 00B5FFF7 	  _CALL gpio_speed 
  92      16FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0bf6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0bf8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0bfc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0bfe 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0c06 4FF00200 	  mov r0,#2 
 100 0c0a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0c0c 41EA0001 	  orr r1,r0 
 102 0c10 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0c12 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0c1a 41F2D470 	  mov r0,#HPER
 106 0c1e D062     	  str r0,[r2,#TIM_ARR]
 107 0c20 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0c24 D063     	  str r0,[r2,#TIM_CCR3]
 109 0c26 4FF4E170 	  mov r0,#HPULSE 
 110 0c2a 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0c2c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0c30 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0c32 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0c36 1062     	  str r0,[r2,#TIM_CCER]
 115 0c38 4FF00100 	  mov r0,#1 
 116 0c3c D060     	  str r0,[r2,#TIM_DIER]
 117 0c3e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0c40 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0c44 4FF00201 	  mov r1,#2
 121 0c48 00B5FFF7 	  _CALL nvic_set_priority
 121      4DFD5DF8 
 121      04EB
 122 0c52 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0c56 00B5FFF7 	  _CALL nvic_enable_irq
 123      5FFD5DF8 
 123      04EB
 124 0c60 7047     	  _RET
ARM GAS  forth.s 			page 38


 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0c62 00BF     	  _GBL_FUNC tv_out_isr
 132 0c64 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0c6c 81EA0101 	  eor T1,T1
 134 0c70 0161     	  str T1,[T0,#TIM_SR]
 135 0c72 A16E     	  ldr T1,[UP,#VID_CNTR]
 136 0c74 01F10101 	  add T1,#1 
 137 0c78 A166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0c7a E26E     	  ldr T2,[UP,#VID_STATE]
 140 0c7c 002A     	  cmp T2,#ST_VSYNC 
 141 0c7e 07D0     	  beq state_vsync
 142 0c80 012A     	  cmp T2,#ST_PREVID 
 143 0c82 2FD0     	  beq state_pre_video 
 144 0c84 022A     	  cmp T2,#ST_VIDEO 
 145 0c86 36D0     	  beq state_video_out 
 146 0c88 032A     	  cmp T2,#ST_POSTVID 
 147 0c8a 63D0     	  beq state_post_video
 148 0c8c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0c90 0129     	  cmp T1,#1
 152 0c92 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0c94 4FF0DB01 	  mov T1,#SERRATION
 155 0c98 0164     	  str T1,[T0,#TIM_CCR4]
 156 0c9a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0c9e C162     	  str T1,[T0,#TIM_ARR]
 158 0ca0 6BE0     	  b tv_isr_exit 
 159 0ca2 0729     	1: cmp T1,#7
 160 0ca4 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0ca6 40F62821 	  mov T1,#VSYNC_PULSE
 163 0caa 0164     	  str T1,[T0,#TIM_CCR4]
 164 0cac 65E0     	  b tv_isr_exit
 165 0cae 0D29     	2: cmp T1,#13
 166 0cb0 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0cb2 4FF0DB01 	   mov T1,#SERRATION 
 169 0cb6 0164     	   str T1,[T0,#TIM_CCR4]
 170 0cb8 5FE0     	   b tv_isr_exit   
 171 0cba 1229     	3: cmp T1,#18
 172 0cbc 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0cbe 216F     	   ldr T1,[UP,#VID_FIELD]
 175 0cc0 0029     	   cmp T1,#ODD_FIELD  
 176 0cc2 5AD0     	   beq tv_isr_exit 
 177 0cc4 01E0     	   b sync_end 
 178 0cc6 1329     	4: cmp T1,#19 
 179 0cc8 57D1     	   bne tv_isr_exit
 180              	sync_end: 
ARM GAS  forth.s 			page 39


 181 0cca 4FF00901 	   mov T1,#9
 182 0cce A166     	   str T1,[UP,#VID_CNTR]
 183 0cd0 4FF4E171 	   mov T1,#HPULSE 
 184 0cd4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0cd6 41F2D471 	   mov T1,#HPER 
 186 0cda C162     	   str T1,[T0,#TIM_ARR] 
 187 0cdc 4FF00101 	   mov T1,#ST_PREVID 
 188 0ce0 E166     	   str T1,[UP,#VID_STATE]
 189 0ce2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ce4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ce6 48D4     	   bmi tv_isr_exit 
 194 0ce8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0cec E166     	   str T1,[UP,#VID_STATE]
 196 0cee 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0cf2 C160     	   str T1,[T0,#TIM_DIER]
 198 0cf4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0cf6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0cf8 06D9     	   bls 1f 
 205 0cfa 4FF00301 	   mov T1,#ST_POSTVID 
 206 0cfe E166     	   str T1,[UP,#VID_STATE]
 207 0d00 4FF00101 	   mov T1,#1 
 208 0d04 C160     	   str T1,[T0,#TIM_DIER]
 209 0d06 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0d08 606F     	   ldr T0,[UP,#VID_BUFFER]
 212 0d0a A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0d0e 4FF0A003 	   mov T3,#160
 214 0d12 03FB01F1 	   mul T1,T3 
 215 0d16 0844     	   add T0,T1  
 216 0d18 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0d20 10F8012B 	2: ldrb T2,[T0],#1 
 222 0d24 4FEA0222 	   lsl T2,#8 
 223 0d28 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0d2a AFF30080 	   nop.w 
 225 0d2e AFF30080 	   nop.w
 226 0d32 AFF30080 	   nop.w 
 227 0d36 AFF30080 	   nop.w 
 228 0d3a 4FEA0212 	   lsl T2,#4  
 229 0d3e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0d40 AFF30080 	   nop.w
 231 0d44 AFF30080 	   nop.w  
 232 0d48 013B     	   subs T3,#1
 233 0d4a E9D1     	   bne 2b  
 234 0d4c 4FF47022 	   mov T2,#(15<<16) 
 235 0d50 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0d52 12E0     	   b tv_isr_exit 
ARM GAS  forth.s 			page 40


 237              	state_post_video:
 238 0d54 4FF48372 	   mov T2,#262
 239 0d58 9142     	   cmp T1,T2
 240 0d5a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0d5c 216F     	   ldr T1,[UP,VID_FIELD]
 243 0d5e 11B9     	   cbnz T1, frame_end 
 244 0d60 40F6E931 	   mov T1,#SYNC_LINE
 245 0d64 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0d66 4FF00001 	   mov T1,#ST_VSYNC 
 248 0d6a E166     	   str T1,[UP,#VID_STATE]
 249 0d6c 81EA0101 	   eor T1,T1 
 250 0d70 A166     	   str T1,[UP,#VID_CNTR]
 251 0d72 216F     	   ldr T1,[UP,#VID_FIELD]
 252 0d74 6FEA0101 	   mvn T1,T1  
 253 0d78 2167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0d7a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0d7c 740B0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0d8c 47F8046D 		_PUSH 
 266 0d90 04F19C06 		ADD TOS,UP,#BK_COLOR
 267 0d94 01F09EBF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0d98 800D0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0da8 47F8046D 		_PUSH 
 273 0dac 04F1A006 		ADD TOS,UP,#PEN_COLOR
 274 0db0 01F090BF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0db4 9C0D0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0dc0 47F8046D 	  _PUSH 
 280 0dc4 04F19806 	  ADD TOS,UP,#COL 
 281 0dc8 01F084BF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0dcc B80D0000 	  _HEADER CURSOR_ROW,3,"ROW"
ARM GAS  forth.s 			page 41


 285      03524F57 
 286 0dd4 47F8046D 	  _PUSH 
 287 0dd8 04F19406 	  ADD TOS,UP,#ROW 
 288 0ddc 01F07ABF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0de0 D00D0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0dec 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0df0 00FB06F6 	  mul TOS,T0 
 295 0df4 01F06EBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0df8 E40D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0e04 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0e08 00FB06F6 	  mul TOS,T0 
 302 0e0c 01F062BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0e10 FC0D0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0e1c 47F8046D 	  _PUSH 
 308 0e20 DFF88C65 	  ldr TOS,=font_6x8 
 309 0e24 01F056BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0e28 140E0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0e34 47F8046D 	  _PUSH 
 315 0e38 666F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0e3a 01F04BBF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0e3e 2C0E0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0e48 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0e4a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0e4e 02FB00F0 	    mul T0,T2 
 330 0e52 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0e56 1044     	    add T0,T2 
ARM GAS  forth.s 			page 42


 332 0e58 636F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0e5a 0344     	    add T3,T0 // T3 -> byte address 
 334 0e5c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0e5e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0e62 11F0010F 	    tst T1,#1 
 337 0e66 01D0     	    beq 1f 
 338 0e68 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0e6c DFF84405 	1:  ldr T0,=plot_op 
 340 0e70 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0e74 05EA0205 	    and WP,T2 // mask out nibble 
 343 0e78 94F89C00 	    ldrb T0,[UP,#BK_COLOR]
 344 0e7c 11F0010F 	    tst T1,#1 
 345 0e80 01D1     	    bne 1f 
 346 0e82 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0e86 45EA0005 	1:  orr WP,T0  
 348 0e8a 1D70     	    strb WP,[T3]
 349 0e8c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0e8e 05EA0205 	    and WP,T2 
 352 0e92 94F8A000 	    ldrb T0,[UP,#PEN_COLOR]
 353 0e96 11F0010F 	    tst T1,#1
 354 0e9a 01D1     	    bne 1f 
 355 0e9c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0ea0 45EA0005 	1:	orr WP,T0 
 357 0ea4 1D70     	    strb WP,[T3]
 358 0ea6 0DE0     	    b 9f 
 359              	op_invert:
 360 0ea8 85EA0205 	    eor WP,T2 
 361 0eac 1D70     	    strb WP,[T3]
 362 0eae 09E0     	    b 9f 
 363              	op_xor:
 364 0eb0 D4F8A000 	    ldr T0,[UP,#PEN_COLOR]
 365 0eb4 11F0010F 	    tst T1,#1 
 366 0eb8 01D1     	    bne 1f 
 367 0eba 4FEA0010 	    lsl T0,#4 
 368 0ebe 85EA0005 	1:  eor WP,T0 
 369 0ec2 1D70     	    strb WP,[T3]
 370 0ec4 57F8046B 	9:  _POP 
 371 0ec8 01F004BF 	    _NEXT 
 372              	
 373 0ecc 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ed0 420E0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0edc A06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0ede 0028     	    cmp T0,#0
 381 0ee0 FCD1     	    bne 1b
 382 0ee2 01F0F7BE 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0ee6 D40E0000 	    _HEADER CLS,3,"CLS"
ARM GAS  forth.s 			page 43


 386      03434C53 
 386      00BF
 387 0ef0 80EA0000 	    eor T0,T0 
 388 0ef4 94F89C10 	    ldrb T1,[UP,#BK_COLOR]
 389 0ef8 40EA0100 	    orr T0,T1 
 390 0efc 4FEA0111 	    lsl T1,#4 
 391 0f00 40EA0100 	    orr T0,T1 
 392 0f04 4FEA0021 	    lsl T1,T0,#8 
 393 0f08 40EA0100 	    orr T0,T1 
 394 0f0c 4FEA0041 	    lsl T1,T0,#16
 395 0f10 40EA0100 	    orr T0,T1 
 396 0f14 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0f18 626F     	    ldr T2,[UP,#VID_BUFFER]
 398 0f1a 5050     	1:	str T0,[T2,T1]
 399 0f1c 0439     	    subs T1,#4
 400 0f1e FCD1     	    bne 1b
 401 0f20 1060     	    str T0,[T2]
 402 0f22 80EA0000 	    eor T0,T0 
 403 0f26 C4F89400 	    str T0,[UP,#ROW]
 404 0f2a C4F89800 	    str T0,[UP,#COL]
 405 0f2e 01F0D1BE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0f32 EA0E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0f40 504700BF 	  _NEST
 412 0f44 FF2E0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0f4c 8D300000 	  _ADR DUPP  
 414 0f50 09300000 	  _ADR TOR 
 415 0f54 71310000 	  _ADR STAR
 416 0f58 350E0000 	  _ADR VIDBUFF
 417 0f5c 51310000 	  _ADR PLUS
 418 0f60 C52F0000 	  _ADR RFROM   
 419 0f64 FF2E0000 	  _DOLIT 0 
 419      00000000 
 420 0f6c 153B0000 	  _ADR FILL 
 421 0f70 DB2C0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0f74 360F0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0f84 504700BF 	    _NEST 
 429 0f88 350E0000 	    _ADR VIDBUFF 
 430 0f8c 8D300000 	    _ADR DUPP 
 431 0f90 FF2E0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0f98 8D300000 	    _ADR DUPP 
ARM GAS  forth.s 			page 44


 433 0f9c 09300000 	    _ADR TOR 
 434 0fa0 51310000 	    _ADR PLUS 
 435 0fa4 9D300000 	    _ADR SWAP 
 436 0fa8 FF2E0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0fb0 C52F0000 	    _ADR RFROM  
 438 0fb4 61310000 	    _ADR SUBB 
 439 0fb8 CD3A0000 	    _ADR MOVE
 440 0fbc FF2E0000 	    _DOLIT 24 
 440      18000000 
 441 0fc4 410F0000 	    _ADR CLRLINE 
 442 0fc8 DB2C0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0fcc 780F0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0fdc 504700BF 	    _NEST 
 450 0fe0 350E0000 	    _ADR VIDBUFF
 451 0fe4 8D300000 	    _ADR DUPP 
 452 0fe8 FF2E0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0ff0 51310000 	    _ADR PLUS 
 454 0ff4 FF2E0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0ffc FF2E0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 1004 61310000 	    _ADR SUBB  
 457 1008 CD3A0000 	    _ADR MOVE
 458 100c FF2E0000 	    _DOLIT 0 
 458      00000000 
 459 1014 410F0000 	    _ADR CLRLINE
 460 1018 DB2C0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 101c D00F0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 1028 E34D     	    ldr WP,=SCROLLUP 
 469 102a 45F00105 	    orr WP,#1
 470 102e 80EA0000 	    eor T0,T0 
 471 1032 C4F89800 	    str T0,[UP,#COL]
 472 1036 D4F89400 	    ldr T0,[UP,#ROW]
 473 103a 1828     	    cmp T0,#24 
 474 103c A2D0     	    beq SCROLLUP  
 475 103e 00F10100 	    add T0,#1 
 476 1042 C4F89400 	    str T0,[UP,#ROW]
 477 1046 01F045BE 	    _NEXT 
 478              	
ARM GAS  forth.s 			page 45


 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 104a 20100000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 1054 D4F89800 	  ldr T0,[UP,#COL]
 484 1058 00F10100 	  add T0,#1
 485 105c 3528     	  cmp T0,#53
 486 105e E3D5     	  bpl TV_CRLF  
 487 1060 C4F89800 	  str T0,[UP,#COL]
 488 1064 01F036BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 1068 4E100000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1074 D4F89800 	    ldr T0,[UP,#COL]
 497 1078 28B1     	    cbz T0,1f 
 498 107a A0F10100 	    sub T0,#1 
 499 107e C4F89800 	    str T0,[UP,#COL]
 500 1082 01F027BE 	    _NEXT 
 501 1086 D4F89400 	1:  ldr T0,[UP,#ROW]
 502 108a 38B1     	    cbz T0,9f
 503 108c A0F10100 	    sub T0,#1
 504 1090 C4F89400 	    str T0,[UP,#ROW]
 505 1094 4FF03400 	    mov T0,#52 
 506 1098 C4F89800 	    str T0,[UP,#COL]
 507 109c 01F01ABE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 10a0 4FF08000 	    mov T0,#128 
 513 10a4 06EA0006 	    and TOS,T0 
 514 10a8 4FEAD616 	    lsr TOS,#7
 515 10ac 01F012BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 10b0 3868     	  ldr T0,[DSP]
 520 10b2 00F10100 	  add T0,#1 
 521 10b6 3860     	  str T0,[DSP]
 522 10b8 01F00CBE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 10bc 4FEA4606 	    lsl TOS,#1
 527 10c0 01F008BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
ARM GAS  forth.s 			page 46


 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 10c4 504700BF 	    _NEST 
 536 10c8 FF2E0000 	    _DOLIT 5 
 536      05000000 
 537 10d0 09300000 	    _ADR TOR 
 538 10d4 09300000 	1:  _ADR TOR 
 539 10d8 C5320000 	    _ADR DDUP 
 540 10dc F52F0000 	    _ADR RAT
 541 10e0 A1100000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 10e4 490E0000 	    _ADR PLOT 
 543 10e8 B1100000 	    _ADR INCR_X 
 544 10ec C52F0000 	    _ADR RFROM 
 545 10f0 BD100000 	    _ADR NEXT_PIXEL
 546 10f4 212F0000 	    _DONXT 1b
 546      D4100000 
 547 10fc B1320000 	    _ADR TDROP 
 548 1100 DB2C0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 1104 A6F12006 	   sub TOS,#32
 553 1108 4FF00800 	   mov T0,#8 
 554 110c 00FB06F6 	   mul TOS,T0 
 555 1110 A748     	   ldr T0,=font_6x8
 556 1112 0644     	   add TOS,T0 
 557 1114 01F0DEBD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 1118 6C100000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 1124 504700BF 	    _NEST
 565 1128 8D300000 	    _ADR DUPP 
 566 112c FF2E0000 	    _DOLIT 32 
 566      20000000 
 567 1134 11340000 	    _ADR ULESS
 568 1138 3F2F0000 	    _QBRAN 1f
 568      48110000 
 569 1140 672F0000 	    _BRAN CTRL_KEY
 569      AC110000 
 570 1148 05110000 	1:  _ADR CHAR_FONT 
 571 114c C10D0000 	    _ADR CURSOR_COL 
 572 1150 992F0000 	    _ADR AT
 573 1154 050E0000 	    _ADR COLX  // x coord 
 574 1158 D50D0000 	    _ADR CURSOR_ROW 
 575 115c 992F0000 	    _ADR AT    
 576 1160 ED0D0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1164 75320000 	    _ADR ROT  // TEST 
 578 1168 FF2E0000 	    _DOLIT 7   
 578      07000000 
 579 1170 09300000 	    _ADR TOR  
 580 1174 09300000 	1:  _ADR TOR  // { x y }
ARM GAS  forth.s 			page 47


 581 1178 C5320000 	    _ADR DDUP  // { x y x y }
 582 117c F52F0000 	    _ADR RAT 
 583 1180 B92F0000 	    _ADR CAT   // { x y x y r }
 584 1184 C5100000 	    _ADR CHAR_ROW 
 585 1188 AD310000 	    _ADR ONEP // {x y' }
 586 118c C52F0000 	    _ADR RFROM 
 587 1190 AD310000 	    _ADR ONEP // {x y' c-adr' }
 588 1194 212F0000 	    _DONXT 1b
 588      74110000 
 589 119c B1320000 	    _ADR TDROP  
 590 11a0 55100000 	    _ADR RIGHT
 591 11a4 95120000 	9:  _ADR SHOW_CURSOR 
 592 11a8 DB2C0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 11ac 1D130000 	    _ADR HIDE_CURSOR
 595 11b0 8D300000 	    _ADR DUPP 
 596 11b4 FF2E0000 	    _DOLIT BKSPP  
 596      08000000 
 597 11bc D9330000 	    _ADR EQUAL 
 598 11c0 3F2F0000 	    _QBRAN 1f 
 598      D8110000 
 599 11c8 75120000 	    _ADR BACK_SPACE 
 600 11cc 7D300000 	8:  _ADR DROP 
 601 11d0 672F0000 	    _BRAN 9b 
 601      A4110000 
 602 11d8 8D300000 	1:  _ADR DUPP 
 603 11dc FF2E0000 	    _DOLIT CRR 
 603      0D000000 
 604 11e4 D9330000 	    _ADR EQUAL 
 605 11e8 3F2F0000 	    _QBRAN 1f 
 605      FC110000 
 606 11f0 1D120000 	    _ADR CAR_RET
 607 11f4 672F0000 	    _BRAN 8b
 607      CC110000 
 608 11fc FF2E0000 	1:  _DOLIT LF 
 608      0A000000 
 609 1204 D9330000 	    _ADR EQUAL 
 610 1208 3F2F0000 	    _QBRAN 9b 
 610      A4110000 
 611 1210 35120000 	    _ADR LN_FEED
 612 1214 672F0000 	    _BRAN 9b  
 612      A4110000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 121c 504700BF 	   _NEST
 620 1220 FF2E0000 	   _DOLIT 0 
 620      00000000 
 621 1228 C10D0000 	   _ADR CURSOR_COL 
 622 122c 852F0000 	   _ADR STORE 
 623 1230 DB2C0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
ARM GAS  forth.s 			page 48


 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1234 504700BF 	    _NEST 
 631 1238 D50D0000 	    _ADR CURSOR_ROW 
 632 123c 992F0000 	    _ADR AT 
 633 1240 8D300000 	    _ADR DUPP 
 634 1244 FF2E0000 	    _DOLIT 24 
 634      18000000 
 635 124c F9300000 	    _ADR XORR 
 636 1250 3F2F0000 	    _QBRAN 1f
 636      68120000 
 637 1258 AD310000 	    _ADR ONEP 
 638 125c D50D0000 	    _ADR CURSOR_ROW 
 639 1260 852F0000 	    _ADR STORE 
 640 1264 DB2C0000 	    _UNNEST    
 641 1268 7D300000 	1:  _ADR DROP 
 642 126c 850F0000 	    _ADR SCROLLUP 
 643 1270 DB2C0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1274 504700BF 	  _NEST 
 652 1278 75100000 	  _ADR LEFT 
 653 127c 95120000 	  _ADR SHOW_CURSOR
 654 1280 DB2C0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1284 1C110000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1294 504700BF 	    _NEST 
 663 1298 FF2E0000 	    _DOLIT 0xFF
 663      FF000000 
 664 12a0 D50D0000 	0:  _ADR CURSOR_ROW
 665 12a4 992F0000 	    _ADR AT  
 666 12a8 AD310000 	    _ADR ONEP 
 667 12ac ED0D0000 	    _ADR ROWY 
 668 12b0 FF2E0000 	    _DOLIT BPR
 668      A0000000 
 669 12b8 71310000 	    _ADR STAR
 670 12bc FF2E0000 	    _DOLIT BPR  
 670      A0000000 
 671 12c4 61310000 	    _ADR SUBB 
 672 12c8 C10D0000 	    _ADR CURSOR_COL
 673 12cc 992F0000 	    _ADR AT 
 674 12d0 050E0000 	    _ADR COLX 
 675 12d4 51320000 	    _ADR TWOSL  
ARM GAS  forth.s 			page 49


 676 12d8 51310000 	    _ADR PLUS
 677 12dc 350E0000 	    _ADR VIDBUFF
 678 12e0 51310000 	    _ADR PLUS
 679 12e4 FF2E0000 	    _DOLIT 2
 679      02000000 
 680 12ec 09300000 	    _ADR TOR  
 681 12f0 C5320000 	1:  _ADR DDUP 
 682 12f4 A52F0000 	    _ADR CSTOR 
 683 12f8 AD310000 	    _ADR ONEP 
 684 12fc 212F0000 	    _DONXT 1b
 684      F0120000 
 685 1304 9D320000 	2:  _ADR DDROP // drop 3 elements 
 686 1308 DB2C0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 130c 88120000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 131c 504700BF 	    _NEST 
 694 1320 8D0D0000 	    _ADR BACKCOLOR 
 695 1324 992F0000 	    _ADR AT 
 696 1328 8D300000 	    _ADR DUPP  
 697 132c FF2E0000 	    _DOLIT 4 
 697      04000000 
 698 1334 41310000 	    _ADR LSHIFT 
 699 1338 E5300000 	    _ADR ORR 
 700 133c 672F0000 	    _BRAN 0b
 700      A0120000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1344 10130000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1350 352E     	    cmp TOS,#53
 706 1352 01D4     	    bmi 1f 
 707 1354 4FF03406 	    mov TOS,#52
 708 1358 C4F89860 	1:  str TOS,[UP,#COL]
 709 135c 57F8046B 	    _POP
 710 1360 192E     	    cmp TOS,#25
 711 1362 01D4     	    bmi 1f 
 712 1364 4FF01806 	    mov TOS,#24 
 713 1368 C4F89460 	1:  str TOS,[UP,#ROW]
 714 136c 57F8046B 	    _POP 
 715 1370 01F0B0BC 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1374 48130000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1380 504700BF 	    _NEST 
 721 1384 453A0000 	    _ADR PAD 
ARM GAS  forth.s 			page 50


 722 1388 8D300000 	    _ADR DUPP 
 723 138c AD310000 	    _ADR ONEP 
 724 1390 FF2E0000 	    _DOLIT 53
 724      35000000 
 725 1398 C9480000 	    _ADR ACCEP
 726 139c 9D300000 	    _ADR SWAP 
 727 13a0 7D300000 	    _ADR DROP 
 728 13a4 B1300000 	    _ADR OVER 
 729 13a8 A52F0000 	    _ADR CSTOR  
 730 13ac DB2C0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
ARM GAS  forth.s 			page 51


 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
ARM GAS  forth.s 			page 52


 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
ARM GAS  forth.s 			page 53


 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
ARM GAS  forth.s 			page 54


   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
ARM GAS  forth.s 			page 55


  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
ARM GAS  forth.s 			page 56


  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
ARM GAS  forth.s 			page 57


 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 13bc 1C61     	   .byte 0x1c,'a' 
   9 13be 3262     	   .byte 0x32,'b'
  10 13c0 2163     	   .byte 0x21,'c'
  11 13c2 2364     	   .byte 0x23,'d'
  12 13c4 2465     	   .byte 0x24,'e'
  13 13c6 2B66     	   .byte 0x2b,'f'
  14 13c8 3467     	   .byte 0x34,'g'
  15 13ca 3368     	   .byte 0x33,'h'
  16 13cc 4369     	   .byte 0x43,'i'
  17 13ce 3B6A     	   .byte 0x3B,'j'
  18 13d0 426B     	   .byte 0x42,'k'
  19 13d2 4B6C     	   .byte 0x4b,'l'
  20 13d4 3A6D     	   .byte 0x3a,'m'
  21 13d6 316E     	   .byte 0x31,'n'
  22 13d8 446F     	   .byte 0x44,'o'
  23 13da 4D70     	   .byte 0x4d,'p'
  24 13dc 1571     	   .byte 0x15,'q'
  25 13de 2D72     	   .byte 0x2d,'r'
  26 13e0 1B73     	   .byte 0x1b,'s'
  27 13e2 2C74     	   .byte 0x2c,'t'
  28 13e4 3C75     	   .byte 0x3c,'u'
  29 13e6 2A76     	   .byte 0x2a,'v'
  30 13e8 1D77     	   .byte 0x1d,'w'
  31 13ea 2278     	   .byte 0x22,'x'
  32 13ec 3579     	   .byte 0x35,'y'
  33 13ee 1A7A     	   .byte 0x1a,'z'
  34 13f0 4530     	   .byte 0x45,'0'
  35 13f2 1631     	   .byte 0x16,'1'
  36 13f4 1E32     	   .byte 0x1e,'2'
  37 13f6 2633     	   .byte 0x26,'3'
  38 13f8 2534     	   .byte 0x25,'4'
  39 13fa 2E35     	   .byte 0x2e,'5'
  40 13fc 3636     	   .byte 0x36,'6'
  41 13fe 3D37     	   .byte 0x3d,'7'
  42 1400 3E38     	   .byte 0x3e,'8'
  43 1402 4639     	   .byte 0x46,'9'
  44 1404 0E60     	   .byte 0x0e,'`'
  45 1406 4E2D     	   .byte 0x4e,'-'
  46 1408 553D     	   .byte 0x55,'='
  47 140a 5D5C     	   .byte 0x5d,'\\'
ARM GAS  forth.s 			page 58


  48 140c 545B     	   .byte 0x54,'['
  49 140e 5B5D     	   .byte 0x5b,']'
  50 1410 4C3B     	   .byte 0x4c,';'
  51 1412 5227     	   .byte 0x52,'\''
  52 1414 412C     	   .byte 0x41,','
  53 1416 492E     	   .byte 0x49,'.'
  54 1418 7C2A     	   .byte 0x7c,'*'
  55 141a 792B     	   .byte 0x79,'+'
  56 141c 2920     	   .byte 0x29,' '
  57 141e 5A0D     	   .byte SC_ENTER,CRR 
  58 1420 6608     	   .byte SC_BKSP,BKSPP 
  59 1422 0D09     	   .byte SC_TAB,9
  60 1424 761B     	   .byte SC_ESC,27
  61 1426 119E     	   .byte SC_LALT,VK_LALT 
  62 1428 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 142a 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 142c 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 142e 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1430 5800     	   .byte SC_CAPS,0
  67 1432 0580     	   .byte SC_F1,VK_F1
  68 1434 0681     	   .byte SC_F2,VK_F2
  69 1436 0482     	   .byte SC_F3,VK_F3
  70 1438 0C83     	   .byte SC_F4,VK_F4
  71 143a 0384     	   .byte SC_F5,VK_F5
  72 143c 0B85     	   .byte SC_F6,VK_F6
  73 143e 8386     	   .byte SC_F7,VK_F7
  74 1440 0A87     	   .byte SC_F8,VK_F8
  75 1442 0188     	   .byte SC_F9,VK_F9
  76 1444 098A     	   .byte SC_F10,VK_F10
  77 1446 788B     	   .byte SC_F11,VK_F11
  78 1448 078C     	   .byte SC_F12,VK_F12
  79 144a 7030     	   .byte SC_KP0,'0'
  80 144c 6931     	   .byte SC_KP1,'1'
  81 144e 7232     	   .byte SC_KP2,'2'
  82 1450 7A33     	   .byte SC_KP3,'3'
  83 1452 6B34     	   .byte SC_KP4,'4'
  84 1454 7335     	   .byte SC_KP5,'5'
  85 1456 7436     	   .byte SC_KP6,'6'
  86 1458 6C37     	   .byte SC_KP7,'7'
  87 145a 7538     	   .byte SC_KP8,'8'
  88 145c 7D39     	   .byte SC_KP9,'9'
  89 145e 7C2A     	   .byte SC_KPMUL,'*'
  90 1460 4A2F     	   .byte SC_KPDIV,'/'
  91 1462 792B     	   .byte SC_KPPLUS,'+'
  92 1464 7B2D     	   .byte SC_KPMINUS,'-'
  93 1466 712E     	   .byte SC_KPDOT,'.'
  94 1468 5A0D     	   .byte SC_KPENTER,'\r'
  95 146a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 146c AAAA     	   .byte BAT_OK,BAT_OK  
  97 146e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1470 6141     	   .byte 'a','A'
 102 1472 6242     	   .byte 'b','B'
 103 1474 6343     	   .byte 'c','C'
 104 1476 6444     	   .byte 'd','D'
ARM GAS  forth.s 			page 59


 105 1478 6545     	   .byte 'e','E'
 106 147a 6646     	   .byte 'f','F'
 107 147c 6747     	   .byte 'g','G'
 108 147e 6848     	   .byte 'h','H'
 109 1480 6949     	   .byte 'i','I'
 110 1482 6A4A     	   .byte 'j','J'
 111 1484 6B4B     	   .byte 'k','K'
 112 1486 6C4C     	   .byte 'l','L'
 113 1488 6D4D     	   .byte 'm','M'
 114 148a 6E4E     	   .byte 'n','N'
 115 148c 6F4F     	   .byte 'o','O'
 116 148e 7050     	   .byte 'p','P'
 117 1490 7151     	   .byte 'q','Q'
 118 1492 7252     	   .byte 'r','R'
 119 1494 7353     	   .byte 's','S'
 120 1496 7454     	   .byte 't','T'
 121 1498 7555     	   .byte 'u','U'
 122 149a 7656     	   .byte 'v','V'
 123 149c 7757     	   .byte 'w','W'
 124 149e 7858     	   .byte 'x','X'
 125 14a0 7959     	   .byte 'y','Y'
 126 14a2 7A5A     	   .byte 'z','Z'
 127 14a4 3121     	   .byte '1','!'
 128 14a6 3240     	   .byte '2','@'
 129 14a8 3323     	   .byte '3','#'
 130 14aa 3424     	   .byte '4','$'
 131 14ac 3525     	   .byte '5','%'
 132 14ae 365E     	   .byte '6','^'
 133 14b0 3726     	   .byte '7','&'
 134 14b2 382A     	   .byte '8','*'
 135 14b4 3928     	   .byte '9','('
 136 14b6 3029     	   .byte '0',')'
 137 14b8 2D5F     	   .byte '-','_'
 138 14ba 3D2B     	   .byte '=','+'
 139 14bc 607E     	   .byte '`','~'
 140 14be 2722     	   .byte '\'','"'
 141 14c0 2C3C     	   .byte ',','<'
 142 14c2 2E3E     	   .byte '.','>'
 143 14c4 2F3F     	   .byte '/','?'
 144 14c6 5C7C     	   .byte '\\','|'
 145 14c8 3B3A     	   .byte ';',':'
 146 14ca 5B7B     	   .byte '[','{'
 147 14cc 5D7D     	   .byte ']','}'
 148 14ce 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 14d0 315C     	   .byte '1','\\'
 153 14d2 3240     	   .byte '2','@'
 154 14d4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 14d6 363F     	   .byte '6','?'
 158 14d8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 14da 397B     	   .byte '9','{'
 161 14dc 307D     	   .byte '0','}'
ARM GAS  forth.s 			page 60


 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 14de 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 14e0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 14e2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 14e4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 14e6 11A3     	    .byte SC_RALT,VK_RALT
 172 14e8 2F97     	    .byte SC_APPS,VK_APPS
 173 14ea 758D     	    .byte SC_UP,VK_UP
 174 14ec 728E     	    .byte SC_DOWN,VK_DOWN
 175 14ee 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 14f0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 14f2 7095     	    .byte SC_INSERT,VK_INSERT
 178 14f4 6C91     	    .byte SC_HOME,VK_HOME
 179 14f6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 14f8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 14fa 717F     	    .byte SC_DEL,VK_DELETE
 182 14fc 6992     	    .byte SC_END,VK_END
 183 14fe 4A2F     	    .byte SC_KPDIV,'/'
 184 1500 5A0D     	    .byte SC_KPENTER,'\r'
 185 1502 1200     	    .byte 0x12,0
 186 1504 7C00     	    .byte 0x7c,0
 187 1506 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1508 6303     	   .byte 'c', VK_CTRL_C 
 193 150a 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 150c 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 150e 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1510 11A3     	   .byte SC_RALT,VK_RALT
 197 1512 2F97     	   .byte SC_APPS,VK_APPS
 198 1514 7095     	   .byte SC_INSERT,VK_INSERT
 199 1516 6C91     	   .byte SC_HOME,VK_HOME
 200 1518 7D93     	   .byte SC_PGUP,VK_PGUP
 201 151a 717F     	   .byte SC_DEL,VK_DELETE
 202 151c 6992     	   .byte SC_END,VK_END
 203 151e 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1520 758D     	   .byte SC_UP,VK_UP
 205 1522 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1524 728E     	   .byte SC_DOWN,VK_DOWN
 207 1526 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1528 4A2F     	   .byte SC_KPDIV,'/'
 209 152a 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 152c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 152e 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1530 119E     	   .byte SC_LALT,VK_LALT
 213 1532 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1534 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1536 761B     	   .byte SC_ESC,VK_ESC
 216 1538 779A     	   .byte SC_NUM,VK_NLOCK
 217 153a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 153c 0000     	   .byte 0,0
ARM GAS  forth.s 			page 61


 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 153e 00BF     	    _GBL_FUNC kbd_isr 
  79 1540 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1548 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 154c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 154e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1556 D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
  84 155a 10F0020F 	    tst r0,#KBD_TX 
  85 155e 40F08480 	    bne send_bit  
  86 1562 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1564 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1568 01F10102 	    add r2,r1,#1
  89 156c 84F87820 	    strb r2,[UP,#KBD_BITCNTR]
  90 1570 0029     	    cmp r1,#0
ARM GAS  forth.s 			page 62


  91 1572 15D0     	    beq start_bit 
  92 1574 0929     	    cmp r1,#9 
  93 1576 25D0     	    beq parity_bit 
  94 1578 0A29     	    cmp r1,#10 
  95 157a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 157c 94F87920 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1580 4FEA5202 	    lsr r2,#1 
  99 1584 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1588 07D0     	    beq 1f 
 101 158a 42F08002 	    orr r2,#(1<<7)
 102 158e 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1592 00F10100 	    add r0,#1 
 104 1596 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 105 159a 84F87920 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 159e 63E0     	    b 9f         
 107              	start_bit:
 108 15a0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 15a4 60D1     	    bne 9f // not a start bit 
 110 15a6 80EA0000 	    eor r0,r0 
 111 15aa 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 112 15ae 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 113 15b2 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 15b6 6FF00101 	    mvn r1,#1
 115 15ba 00EA0100 	    and r0,r1 // clear error flag 
 116 15be 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 117 15c2 51E0     	    b 9f 
 118              	parity_bit:
 119 15c4 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 120 15c8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 15cc 4CD0     	    beq 9f  
 122 15ce 01F10101 	    add r1,#1 
 123 15d2 84F87B10 	    strb r1,[UP,#KBD_PARITY]  
 124 15d6 47E0     	    b 9f      
 125              	stop_bit:
 126 15d8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 15dc 40D0     	    beq 8f // error stop bit expected 
 128 15de 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 129 15e2 11F0010F 	    tst r1,#1 
 130 15e6 3BD0     	    beq 8f // error parity
 131 15e8 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 15ec 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 15f0 E028     	    cmp r0,#XT_KEY
 134 15f2 04D1     	    bne 1f
 135 15f4 41F04001 	    orr r1,#KBD_F_XT
 136 15f8 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 137 15fc 30E0     	    b 8f  
 138 15fe 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1602 14D0     	    beq store_code
 140 1604 5828     	    cmp r0,#SC_CAPS
 141 1606 04D1     	    bne 1f
 142 1608 81F00401 	    eor r1,#KBD_F_CAPS
 143 160c 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1610 06E0     	    b 2f 
 145 1612 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
ARM GAS  forth.s 			page 63


 146 161c 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1620 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1624 01EA0201 	    and r1,r2
 149 1628 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 150 162c 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 162e F028     	    cmp r0,#KEY_REL
 154 1630 04D1     	    bne 1f
 155              	// set release flags 
 156 1632 41F08001 	    orr r1,#KBD_F_REL 
 157 1636 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 158 163a 11E0     	    b 8f     
 159 163c 0146     	1:  mov r1,r0 
 160 163e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1648 0AD1     	    bne 8f // was async key 
 162 164a D4F89000 	    ldr r0,[UP,#KBD_QTAIL]
 163 164e 04F17C02 	    add r2,UP,#KBD_QUEUE
 164 1652 1154     	    strb r1,[r2,r0]
 165 1654 00F10100 	    add r0,#1
 166 1658 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 165c 84F89000 	    strb r0,[UP,#KBD_QTAIL]
 168 1660 80EA0000 	8:  eor r0,r0 
 169 1664 A4F87800 	    strh r0,[UP,#KBD_BITCNTR]
 170 1668 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 166a 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 166e 01F10100 	    add r0,r1,#1
 182 1672 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 183 1676 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 167a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 167e 0829     	1:  cmp r1,#8 
 187 1680 15D0     	    beq send_parity 
 188 1682 0929     	    cmp r1,#9 
 189 1684 1CD0     	    beq send_stop
 190 1686 0A29     	    cmp r1,#10
 191 1688 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 168a 10F0010F 	    tst r0,#1
 194 168e 4FEA5000 	    lsr r0,#1
 195 1692 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 196 1696 02D1     	    bne 1f 
 197 1698 4FEA0242 	    lsl r2,#16
 198 169c 05E0     	    b 2f  
 199 169e 94F87B00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 16a2 00F10100 	    add r0,#1 
ARM GAS  forth.s 			page 64


 201 16a6 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 202 16aa 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 16ac 1CE0     	    b 9f 
 204              	send_parity:
 205 16ae 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 206 16b2 10F0010F 	    tst r0,#1
 207 16b6 01D0     	    beq 1f 
 208 16b8 4FEA0242 	    lsl r2,#16
 209 16bc 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 16be 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 16c0 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 16c2 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 16c6 1960     	    str r1,[r3,#GPIO_MODER]
 217 16c8 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 16ca 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 16ce 6FF00201 	    mvn r1,#KBD_TX 
 221 16d2 00EA0100 	    and r0,r1 
 222 16d6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 16d8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 16dc 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 225 16e0 80EA0000 	    eor r0,r0 
 226 16e4 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 227 16e8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 16ea 02B4     	    push {r1}
 238 16ec DFF86414 	    ldr r1,=async_keys
 239 16f0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 16fa 02BC     	    pop {r1}
 241 16fc 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 16fe 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
ARM GAS  forth.s 			page 65


 254      04EB
 255 1708 FF28     	    cmp r0,#255
 256 170a 01D1     	    bne set_async_key 
 257 170c 0020     	    movs r0,#0 
 258 170e 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1710 06B4     	    push {r1,r2}
 262 1712 94F87A20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1716 DFF84014 	    ldr r1,=async_jump 
 264 171a D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 171e 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1722 04E0     	    b set_reset
 268              	ctrl_key:
 269 1724 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1728 01E0     	    b set_reset 
 271              	alt_key:
 272 172a 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 172e 12F0800F 	    tst r2,#KBD_F_REL 
 275 1732 04D0     	    beq 1f 
 276 1734 6FEA0000 	    mvn r0,r0
 277 1738 02EA0002 	    and r2,r0
 278 173c 01E0     	    b 2f
 279 173e 42EA0002 	1:  orr r2,r0 
 280 1742 84F87A20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1746 5FF0FF30 	    movs r0,#-1
 282 174a 06BC     	9:  pop {r1,r2}
 283 174c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 174e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1750 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1752 1401     	    .byte SC_LCTRL,1  // left control 
 290 1754 1401     	    .byte SC_RCTRL,1  // right control 
 291 1756 1102     	    .byte SC_LALT,2  // left alt 
 292 1758 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 175a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 175c 00       	    .byte 0 // shift  key 
 297 175d 03       	    .byte (ctrl_key-shift_key)/2
 298 175e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 175f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1760 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
ARM GAS  forth.s 			page 66


 310 1768 1846     	    mov r0,r3 
 311 176a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 176e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1772 00B5FFF7 	    _CALL gpio_config
 313      14F85DF8 
 313      04EB
 314 177c 1846     	    mov r0,r3 
 315 177e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1782 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1786 00B5FFF7 	    _CALL gpio_config
 317      0AF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1790 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1798 4FF40050 	    mov r0,#(2<<12)
 321 179c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 179e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 17a6 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 17aa 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 17ac D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 17ae 80EA0000 	   eor r0,r0 
 328 17b2 C4F88C00 	   str r0,[UP,#KBD_QHEAD]
 329 17b6 C4F89000 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 17ba 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 17be 4FF00101 	   mov r1,#1 
 333 17c2 00B5FEF7 	   _CALL nvic_set_priority
 333      90FF5DF8 
 333      04EB
 334 17cc 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 17d0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      A2FF5DF8 
 335      04EB
 336 17da 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 17dc 78130000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 17ec 47F8046D 	    _PUSH 
 342 17f0 94F87A60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 17f4 06F0FC06 	    and TOS,#0xFC  
 344 17f8 01F06CBA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 17fc 0EB4     	    push {T1,T2,T3}
 352 17fe 80EA0000 	    eor T0,T0  
 353 1802 04F17C03 	    add T3,UP,#KBD_QUEUE
ARM GAS  forth.s 			page 67


 354 1806 D4F88C10 	    ldr T1,[UP,#KBD_QHEAD]
 355 180a D4F89020 	    ldr T2,[UP,#KBD_QTAIL]
 356 180e 9142     	    cmp T1,T2 
 357 1810 06D0     	    beq 2f  
 358 1812 585C     	    ldrb T0,[T3,T1]
 359 1814 01F10101 	    add T1,#1 
 360 1818 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 181c C4F88C10 	    str T1,[UP,#KBD_QHEAD]
 362 1820 0EBC     	2:  pop {T1,T2,T3}
 363 1822 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1824 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 182e 0000     	    movs T0,T0
 368 1830 F8D0     	    beq wait_code  
 369 1832 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1834 04B4     	    push {T2}
 380 1836 11F8012B 	1:  ldrb T2,[T1],#1
 381 183a 22B1     	    cbz T2,2f 
 382 183c 8242     	    cmp T2,T0
 383 183e 02D0     	    beq 2f 
 384 1840 01F10101 	    add T1,#1 
 385 1844 F7E7     	    b 1b 
 386 1846 0878     	2:  ldrb T0,[T1]
 387 1848 0000     	    movs T0,T0 // set/reset zero flag 
 388 184a 04BC     	9:  pop {T2}
 389 184c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 184e E0170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 185c 47F8046D 	    _PUSH 
 398 1860 86EA0606 	    eor TOS,TOS 
 399 1864 BD49     	    ldr T1,=sc_ascii // translation table
 400 1866 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 186a 4FF04002 	    mov T2,#KBD_F_XT 
 402 186e 1042     	    tst T0,T2
 403 1870 00D0     	    beq 1f
 404 1872 BB49     	    ldr T1,=extended // extended code translation
 405 1874 00B5FFF7 	1:  _CALL keycode
ARM GAS  forth.s 			page 68


 405      C1FF5DF8 
 405      04EB
 406 187e 98B1     	    cbz T0,inkey_exit
 407 1880 E128     	    cmp T0,#XT2_KEY // pause 
 408 1882 13D0     	    beq pause_key
 409 1884 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 188e 0646     	    mov TOS,T0
 411 1890 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 189a 032E     	    cmp TOS,#VK_CTRL_C 
 413 189c 3EF4FBAD 	    beq user_reboot 
 414 18a0 47F8046D 	    _PUSH 
 415 18a4 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 18a8 01F014BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 18ac 4FF00701 	    mov T1,#7 
 420 18b0 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 18ba 0139     	    subs T1,#1
 422 18bc F8D1     	    bne 1b 
 423 18be 01F009BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 18c2 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 18c6 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 18ca 06D1     	    bne shift_down 
 431 18cc 10F0200F 	    tst T0,#KBD_F_ALT  
 432 18d0 06D1     	    bne altchar_down 
 433 18d2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 18d6 06D1     	    bne ctrl_down 
 435 18d8 0DE0     	    b 9f 
 436              	shift_down:
 437 18da 3046     	    mov T0,TOS 
 438 18dc A149     	    ldr T1,=shifted 
 439 18de 04E0     	    b 8f 
 440              	altchar_down:
 441 18e0 3046     	    mov T0,TOS 
 442 18e2 A149     	    ldr T1,=altchar
 443 18e4 01E0     	    b 8f
 444              	ctrl_down:
 445 18e6 3046     	    mov T0,TOS 
 446 18e8 A049     	    ldr T1,=controls 
 447 18ea 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 18f4 0646     	    mov TOS,T0
 449 18f6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1900 7047     	    _RET 
ARM GAS  forth.s 			page 69


 451              	
 452              	do_capslock:
 453 1902 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1906 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 190a 0BD0     	    beq 9f 
 456 190c 412E     	    cmp TOS,#'A'
 457 190e 09D4     	    bmi 9f 
 458 1910 5B2E     	    cmp TOS,#'Z'+1 
 459 1912 03D4     	    bmi 3f 
 460 1914 612E     	    cmp TOS,#'a'
 461 1916 05D4     	    bmi 9f 
 462 1918 7B2E     	    cmp TOS,#'z'+1
 463 191a 03D5     	    bpl 9f 
 464 191c 4FF02000 	3:  mov T0,#(1<<5)
 465 1920 86EA0006 	    eor TOS,T0 
 466 1924 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1926 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1928 E06E     	1:  ldr r0,[UP,#VID_STATE]
 483 192a 0128     	    cmp r0,ST_PREVID 
 484 192c FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 192e 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1932 00B5FEF7 	    _CALL nvic_disable_irq
 487      06FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 193c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1944 1846     	    mov r0,r3 
 491 1946 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 194a 4FF01102 	    mov r2,#OUTPUT_OD
 493 194e 00B5FEF7 	    _CALL gpio_config 
 493      26FF5DF8 
 493      04EB
 494 1958 1846     	    mov r0,r3 
 495 195a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 195e 82EA0202 	    eor r2,r2 
 497 1962 00B5FEF7 	    _CALL gpio_out 
 497      72FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 196c 4FF4E150 	    mov r0,#150*48
 500 1970 0138     	1:  subs r0,#1 
ARM GAS  forth.s 			page 70


 501 1972 FDD1     	    bne 1b
 502 1974 01BC     	    pop {r0}
 503 1976 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 504 197a D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
 505 197e 40F00200 	    orr r0,#KBD_TX 
 506 1982 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 507 1986 80EA0000 	    eor r0,r0 
 508 198a 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 509 198e 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1992 1846     	    mov r0,r3 
 513 1994 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1998 4FF01102 	    mov r2,#OUTPUT_OD 
 515 199c 00B5FEF7 	    _CALL gpio_config 
 515      FFFE5DF8 
 515      04EB
 516 19a6 1846     	    mov r0,r3 
 517 19a8 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 19ac 82EA0202 	    eor r2,r2 
 519 19b0 00B5FEF7 	    _CALL gpio_out
 519      4BFF5DF8 
 519      04EB
 520              	// release clock line 
 521 19ba 1846     	    mov r0,r3 
 522 19bc 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 19c0 4FF00002 	    mov r2,#INPUT_FLOAT
 524 19c4 00B5FEF7 	    _CALL gpio_config
 524      EBFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 19ce 4FF00A00 	    mov r0,#10
 528 19d2 E060     	    str r0,[UP,#CD_TIMER]
 529 19d4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 19d6 20B1     	    cbz r0, 4f 
 531 19d8 94F87A00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 19dc 10F0020F 	    tst r0,#KBD_TX
 533 19e0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 19e2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 19e6 00B5FEF7 	    _CALL nvic_enable_irq
 536      97FE5DF8 
 536      04EB
 537 19f0 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 19f4 20F00201 	    bic r1,r0,#KBD_TX
 539 19f8 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 540 19fc 00F00200 	    and r0,#KBD_TX
 541 1a00 48B1     	    cbz r0, 5f
 542 1a02 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1a04 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1a08 1960     	    str r1,[r3,#GPIO_MODER]
 545 1a0a 80EA0000 	    eor r0,r0 
 546 1a0e 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1a12 6FEA0000 	    mvn r0,r0   
 548 1a16 0EBC     	5:  pop {r1,r2,r3}
 549 1a18 7047     	    _RET 
ARM GAS  forth.s 			page 71


 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1a1a 80EA0000 	    eor T0,T0 
 555 1a1e C4F88C00 	    str T0,[UP,#KBD_QHEAD]
 556 1a22 C4F89000 	    str T0,[UP,#KBD_QTAIL]
 557 1a26 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1a2a 6FF00301 	    mvn T1,#3
 559 1a2e 00EA0100 	    and T0,T1 
 560 1a32 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 561 1a36 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1a38 52180000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1a44 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1a48 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1a52 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1a54 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1a5e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1a68 FE28     	    cmp r0,KBD_CMD_RESEND
 574 1a6a EBD0     	    beq 1b 
 575 1a6c 4FF4FA70 	    mov T0,#500 
 576 1a70 E060     	    str T0,[UP,#CD_TIMER]
 577 1a72 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1a7c 10B9     	    cbnz T0,3f
 579 1a7e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1a80 0028     	    cmp T0,#0 
 581 1a82 F6D1     	    bne 2b 
 582 1a84 47F8046D 	3:  _PUSH 
 583 1a88 0646     	    mov TOS,T0  
 584 1a8a 01F023B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1a8e 3C1A0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1a9c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
ARM GAS  forth.s 			page 72


 592      04EB
 593 1aa6 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1aaa 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1ab4 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1abe FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1ac0 ECD0     	    beq 1b
 598 1ac2 FA28     	    cmp T0,#KBD_ACK  
 599 1ac4 F6D1     	    bne 2b 
 600 1ac6 3046     	2:  mov T0,TOS 
 601 1ac8 00F00700 	    and T0,#7 
 602 1acc 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1ad6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ae0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ae2 F0D0     	    beq 2b
 606 1ae4 FA28     	    cmp T0,#KBD_ACK 
 607 1ae6 F6D1     	    bne 3b  
 608 1ae8 57F8046B 	    _POP 
 609 1aec 01F0F2B8 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1af0 921A0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1b00 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1b04 10F0010F 	    tst T0,#1
 619 1b08 01D1     	    bne 1f 
 620 1b0a 01F0E3B8 	    _NEXT 
 621 1b0e 47F8046D 	1: _PUSH 
 622 1b12 6FF00101 	    mvn T1,#1 
 623 1b16 00EA0100 	    and T0,T1 
 624 1b1a 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 625 1b1e 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1b22 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1b2a F41A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
ARM GAS  forth.s 			page 73


 634 1b38 504700BF 	    _NEST
 635 1b3c 011B0000 	1:  _ADR CAPS_LED  
 636 1b40 5D180000 	    _ADR PS2_QKEY 
 637 1b44 61320000 	    _ADR QDUP 
 638 1b48 3F2F0000 	    _QBRAN 1b  
 638      3C1B0000 
 639 1b50 DB2C0000 	    _UNNEST 
 640 1b54 4E170000 	
 640      5C170000 
 640      BC130000 
 640      E0140000 
 640      70140000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1b74 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1b7c 0346     	    mov r3,r0 
  44 1b7e 4FF00401 	    mov r1,#PIN_F_SC 
ARM GAS  forth.s 			page 74


  45 1b82 4FF00102 	    mov r2,#OUTPUT_PP
  46 1b86 00B5FEF7 	    _CALL gpio_config 
  46      0AFE5DF8 
  46      04EB
  47 1b90 1846     	    mov r0,r3 
  48 1b92 4FF00401 	    mov r1,#PIN_F_SC  
  49 1b96 4FF00102 	    MOV r2,#1
  50 1b9a 00B5FEF7 	    _CALL gpio_out 
  50      56FE5DF8 
  50      04EB
  51 1ba4 1846     	    mov r0,r3 
  52 1ba6 4FF00501 	    mov r1,#PIN_SCK  
  53 1baa 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1bae 00B5FEF7 	    _CALL gpio_config 
  54      F6FD5DF8 
  54      04EB
  55 1bb8 1846     	    mov r0,r3 
  56 1bba 4FF00701 	    mov r1,#PIN_MOSI 
  57 1bbe 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1bc2 00B5FEF7 	    _CALL gpio_config 
  58      ECFD5DF8 
  58      04EB
  59 1bcc 1846     	    mov r0,r3
  60 1bce 4FF00601 	    mov r1,#PIN_MISO
  61 1bd2 4FF00202 	    mov r2,#INPUT_AFO  
  62 1bd6 00B5FEF7 	    _CALL gpio_config
  62      E2FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1be0 4CF6AA40 	    mov r0,#0xCCAA
  65 1be4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1be6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1bee 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1bf0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1bf4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1bf6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1bfe 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1c02 0180     	    strh r1,[r0,#SPI_CR1]
  73 1c04 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1c06 80EA0000 	    eor r0,r0 
  75 1c0a C5F25050 	    movt r0,#0x5550 
  76 1c0e 40EA0100 	    orr r0,r1 
  77 1c12 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1c14 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1c16 2E1B0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1c24 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
ARM GAS  forth.s 			page 75


  86      C4F20200 
  87 1c2c 4FF00401 	    mov r1,#PIN_F_SC 
  88 1c30 4FF00002 	    mov r2,#0 
  89 1c34 00B5FEF7 	    _CALL gpio_out 
  89      09FE5DF8 
  89      04EB
  90 1c3e 01F049B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1c42 1A1C0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1c50 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1c58 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1c5a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1c5e FBD1     	    bne 1b 
 102 1c60 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1c68 4FF00401 	    mov r1,#PIN_F_SC 
 104 1c6c 4FF00102 	    mov r2,#1 
 105 1c70 00B5FEF7 	    _CALL gpio_out 
 105      EBFD5DF8 
 105      04EB
 106 1c7a 01F02BB8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1c7e 461C0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1c8c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1c94 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1c96 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1c9a FBD0     	    beq 0b 
 118 1c9c 6FF00001 	    mvn T1,#0 
 119 1ca0 0173     	    strb T1,[T0,#SPI_DR]
 120 1ca2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1ca4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1ca8 FBD0     	    beq 1b     
 123              	2:  
 124 1caa 47F8046D 	    _PUSH 
 125 1cae 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1cb0 01F010B8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
ARM GAS  forth.s 			page 76


 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1cb4 821C0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1cc0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1cc8 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1cca 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1cce FBD0     	    beq 0b 
 138 1cd0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1cd2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1cd4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1cd8 FBD0     	    beq 1b 
 142 1cda 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1cdc 57F8046B 	    _POP 
 144 1ce0 00F0F8BF 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ce4 B81C0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1cf0 504700BF 	    _NEST 
 153 1cf4 251C0000 	    _ADR CHIP_SEL 
 154 1cf8 FF2E0000 	    _DOLIT 4
 154      04000000 
 155 1d00 C11C0000 	    _ADR WR_BYTE
 156 1d04 511C0000 	    _ADR CHIP_DSEL
 157 1d08 DB2C0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1d0c E81C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1d18 504700BF 	    _NEST 
 165 1d1c 251C0000 	    _ADR CHIP_SEL 
 166 1d20 FF2E0000 	    _DOLIT 6 
 166      06000000 
 167 1d28 C11C0000 	    _ADR WR_BYTE 
 168 1d2c 511C0000 	    _ADR CHIP_DSEL 
 169 1d30 DB2C0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1d34 101D0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
ARM GAS  forth.s 			page 77


 176 1d40 504700BF 	    _NEST
 177 1d44 251C0000 	    _ADR CHIP_SEL  
 178 1d48 FF2E0000 	    _DOLIT sr_cmd 
 178      681D0000 
 179 1d50 51310000 	    _ADR PLUS 
 180 1d54 B92F0000 	    _ADR CAT
 181 1d58 C11C0000 	    _ADR WR_BYTE
 182 1d5c 8D1C0000 	    _ADR RD_BYTE
 183 1d60 511C0000 	    _ADR CHIP_DSEL  
 184 1d64 DB2C0000 	    _UNNEST 
 185 1d68 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1d6b 381D0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1d78 504700BF 	    _NEST 
 193 1d7c 8D300000 	    _ADR DUPP 
 194 1d80 FF2E0000 	    _DOLIT 16
 194      10000000 
 195 1d88 29310000 	    _ADR RSHIFT 
 196 1d8c C11C0000 	    _ADR WR_BYTE 
 197 1d90 8D300000 	    _ADR DUPP
 198 1d94 FF2E0000 	    _DOLIT 8 
 198      08000000 
 199 1d9c 29310000 	    _ADR RSHIFT 
 200 1da0 C11C0000 	    _ADR WR_BYTE 
 201 1da4 C11C0000 	    _ADR WR_BYTE 
 202 1da8 DB2C0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1dac 6F1D0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1dbc 504700BF 	    _NEST 
 210 1dc0 FF2E0000 	1:  _DOLIT 0 
 210      00000000 
 211 1dc8 411D0000 	    _ADR RD_SR 
 212 1dcc FF2E0000 	    _DOLIT 3 
 212      03000000 
 213 1dd4 D1300000 	    _ADR ANDD 
 214 1dd8 3F2F0000 	    _QBRAN 2f
 214      E81D0000 
 215 1de0 672F0000 	    _BRAN 1b
 215      C01D0000 
 216 1de8 DB2C0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
ARM GAS  forth.s 			page 78


 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1dec B01D0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1dfc 504700BF 	    _NEST 
 225 1e00 191D0000 	    _ADR WR_ENBL
 226 1e04 251C0000 	    _ADR CHIP_SEL 
 227 1e08 FF2E0000 	    _DOLIT 0x20 
 227      20000000 
 228 1e10 C11C0000 	    _ADR WR_BYTE 
 229 1e14 791D0000 	    _ADR SEND_ADR
 230 1e18 511C0000 	    _ADR CHIP_DSEL 
 231 1e1c BD1D0000 	    _ADR WAIT_DONE 
 232 1e20 DB2C0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1e24 F01D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1e34 504700BF 	    _NEST 
 240 1e38 191D0000 	    _ADR WR_ENBL 
 241 1e3c 251C0000 	    _ADR CHIP_SEL
 242 1e40 FF2E0000 	    _DOLIT 0x60
 242      60000000 
 243 1e48 FF2E0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1e50 C11C0000 	    _ADR WR_BYTE 
 245 1e54 C11C0000 	    _ADR WR_BYTE 
 246 1e58 511C0000 	    _ADR CHIP_DSEL 
 247 1e5c BD1D0000 	    _ADR WAIT_DONE
 248 1e60 DB2C0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1e64 281E0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1e70 504700BF 	    _NEST
 258 1e74 251C0000 	    _ADR CHIP_SEL 
 259 1e78 FF2E0000 	    _DOLIT 3 
 259      03000000 
 260 1e80 C11C0000 	    _ADR WR_BYTE 
 261 1e84 791D0000 	    _ADR SEND_ADR
 262 1e88 09300000 	    _ADR TOR   
 263 1e8c 672F0000 	    _BRAN 2f
 263      A41E0000 
ARM GAS  forth.s 			page 79


 264 1e94 8D1C0000 	1:  _ADR RD_BYTE
 265 1e98 B1300000 	    _ADR OVER 
 266 1e9c A52F0000 	    _ADR CSTOR
 267 1ea0 AD310000 	    _ADR ONEP 
 268 1ea4 212F0000 	2:  _DONXT 1b
 268      941E0000 
 269 1eac 7D300000 	    _ADR DROP 
 270 1eb0 511C0000 	    _ADR CHIP_DSEL 
 271 1eb4 DB2C0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1eb8 681E0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1ec4 504700BF 	    _NEST 
 280 1ec8 191D0000 	    _ADR WR_ENBL
 281 1ecc 251C0000 	    _ADR CHIP_SEL
 282 1ed0 FF2E0000 	    _DOLIT 2 
 282      02000000 
 283 1ed8 C11C0000 	    _ADR WR_BYTE 
 284 1edc 791D0000 	    _ADR SEND_ADR
 285 1ee0 09300000 	    _ADR TOR
 286 1ee4 672F0000 	    _BRAN 2f 
 286      041F0000 
 287 1eec 8D300000 	1:  _ADR DUPP 
 288 1ef0 B92F0000 	    _ADR CAT 
 289 1ef4 8D300000 	    _ADR DUPP 
 290 1ef8 E1420000 	    _ADR HDOT
 291 1efc C11C0000 	    _ADR WR_BYTE 
 292 1f00 AD310000 	    _ADR ONEP
 293 1f04 212F0000 	2:  _DONXT 1b 
 293      EC1E0000 
 294 1f0c 7D300000 	    _ADR DROP
 295 1f10 511C0000 	    _ADR CHIP_DSEL
 296 1f14 BD1D0000 	    _ADR WAIT_DONE 
 297 1f18 DB2C0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
ARM GAS  forth.s 			page 80


 315              	********************************/
 316 1f1c BC1E0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1f2c 504700BF 	    _NEST 
 318              	    
 319 1f30 DB2C0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1f34 201F0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1f44 504700BF 	    _NEST 
 327              	
 328 1f48 DB2C0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1f4c 381F0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1f54 504700BF 	    _NEST 
 336              	
 337 1f58 DB2C0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1f5c 501F0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1f68 504700BF 	    _NEST 
 345              	
 346 1f6c DB2C0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1f70 601F0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1f7c 504700BF 	    _NEST 
 354              	
 355 1f80 DB2C0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
ARM GAS  forth.s 			page 81


   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1f84 5F708930 	     .word  0x3089705F // 1e-9
  34 1f88 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1f8c 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1f90 BD378635 	     .word  0x358637BD // 1e-6 
  37 1f94 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1f98 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1f9c 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1fa0 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1fa4 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1fa8 0000803F 	     .word  0x3F800000 // 1.0 
  44 1fac 00002041 	     .word  0x41200000 // 1e1 
  45 1fb0 0000C842 	     .word  0x42C80000 // 1e2 
  46 1fb4 00007A44 	     .word  0x447A0000 // 1e3 
  47 1fb8 00401C46 	     .word  0x461C4000 // 1e4 
  48 1fbc 0050C347 	     .word  0x47C35000 // 1e5 
  49 1fc0 00247449 	     .word  0x49742400 // 1e6 
  50 1fc4 8096184B 	     .word  0x4B189680 // 1e7
  51 1fc8 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1fcc 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1fd0 741F0000 	    _HEADER PWR10,5,"PWR10"
ARM GAS  forth.s 			page 82


  59      05505752 
  59      313000BF 
  60 1fdc 4FEA8606 	    lsl TOS,#2  
  61 1fe0 FF48     	    ldr t0, =p10 
  62 1fe2 0644     	    add TOS,TOS,T0
  63 1fe4 3668     	    ldr TOS,[TOS]  
  64 1fe6 00F075BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1fea DFF8F803 	   ldr.w r0,=CPACR 
  73 1fee 0168     	   ldr R1,[R0]
  74 1ff0 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1ff4 0160     	   str r1,[r0]
  76 1ff6 BFF34F8F 	   dsb 
  77 1ffa FB48     	   ldr r0,=FPC_BASE_ADR
  78 1ffc 81EA0101 	   eor r1,r1 
  79 2000 0160     	   str r1,[r0,FPCCR]
  80 2002 BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 2006 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 2008 D41F0000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 2010 4FF05100 	    mov r0,#FPU_IRQ 
  92 2014 00B5FEF7 	    _CALL nvic_disable_irq
  92      95FB5DF8 
  92      04EB
  93 201e 00F059BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 2022 0C200000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 202c 4FF05100 	    mov r0,#FPU_IRQ
 102 2030 00B5FEF7 	    _CALL nvic_enable_irq
 102      72FB5DF8 
 102      04EB
 103 203a 00F04BBE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
ARM GAS  forth.s 			page 83


 108              	   stack fpu SCR register 
 109              	***************************/
 110 203e 26200000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 2048 47F8046D 	   _PUSH 
 112 204c F1EE106A 	   vmrs TOS,FPSCR
 113 2050 BFF34F8F 	   dsb  
 114 2054 00F03EBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 2058 42200000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 2068 F1EE100A 	   vmrs T0,FPSCR 
 125 206c BFF34F8F 	   dsb 
 126 2070 06EA0006 	   and TOS,T0  
 127 2074 E1EE106A 	   vmsr FPSCR,TOS 
 128 2078 BFF34F8F 	   dsb 
 129 207c 00F02ABE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2080 5C200000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 2088 00EE106A 	    vmov.f32 S0,TOS 
 138 208c 57F8046B 	    _POP 
 139 2090 00F020BE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 2094 84200000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 209c 00EE906A 	    vmov.f32 S1,TOS 
 147 20a0 57F8046B 	    _POP 
 148 20a4 00F016BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 20a8 98200000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 20b0 01EE106A 	    vmov.f32 S2,TOS 
 156 20b4 57F8046B 	    _POP 
ARM GAS  forth.s 			page 84


 157 20b8 00F00CBE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
 163 20bc AC200000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 20c4 47F8046D 	    _PUSH 
 165 20c8 10EE106A 	    vmov.f32 TOS,S0 
 166 20cc 00F002BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 20d0 C0200000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 20d8 47F8046D 	    _PUSH 
 174 20dc 10EE906A 	    vmov.f32 TOS,S1 
 175 20e0 00F0F8BD 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 20e4 D4200000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 20ec 47F8046D 	    _PUSH 
 183 20f0 11EE106A 	    vmov.f32 TOS,S2 
 184 20f4 00F0EEBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 20f8 E8200000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 2100 00EE106A 	    vmov.f32 S0,TOS
 194 2104 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 2108 10EE106A 	    vmov.f32 TOS,s0 
 196 210c 00F0E2BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 2110 FC200000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 211c 00EE106A 	    vmov.f32 S0,TOS 
 204 2120 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 2124 10EE106A 	    vmov.f32 TOS,S0 
 206 2128 00F0D4BD 	    _NEXT 
 207              	
ARM GAS  forth.s 			page 85


 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 212c 14210000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 2134 00EE106A 	    vmov.f32 S0,TOS
 214 2138 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 213c 10EE106A 	    vmov.f32 TOS,s0 
 216 2140 00F0C8BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 2144 30210000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 214c 00EE106A 	   vmov.f32 s0,TOS 
 224 2150 57F8046B 	   _POP 
 225 2154 00EE906A 	   vmov.f32 s1,TOS 
 226 2158 30EE200A 	   vadd.f32 s0,s0,s1 
 227 215c 10EE106A 	   vmov.f32 TOS,s0
 228 2160 00F0B8BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 2164 48210000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 216c 00EE106A 	   vmov.f32 s0,TOS 
 237 2170 57F8046B 	   _POP 
 238 2174 00EE906A 	   vmov.f32 s1,TOS 
 239 2178 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 217c 10EE106A 	   vmov.f32 TOS,s0
 241 2180 00F0A8BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 2184 68210000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 218c 00EE106A 	   vmov.f32 s0,TOS 
 251 2190 57F8046B 	   _POP 
 252 2194 00EE906A 	   vmov.f32 s1,TOS 
 253 2198 20EE800A 	   vmul.f32 s0,s1,s0 
 254 219c 10EE106A 	   vmov.f32 TOS,s0
 255 21a0 00F098BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
ARM GAS  forth.s 			page 86


 261              	*******************************/
 262 21a4 88210000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 21ac 00EE106A 	   vmov.f32 s0,TOS 
 264 21b0 57F8046B 	   _POP 
 265 21b4 00EE906A 	   vmov.f32 s1,TOS 
 266 21b8 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 21bc 10EE106A 	   vmov.f32 TOS,s0
 268 21c0 00F088BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 21c4 A8210000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 21d0 00EE106A 	    vmov.f32 s0,TOS 
 277 21d4 B1EE400A 	    vneg.f32 S0,S0 
 278 21d8 10EE106A 	    vmov.f32 TOS,S0    
 279 21dc 00F07ABD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 21e0 C8210000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 21ec 80EA0000 	    eor T0,T0 
 287 21f0 6FEA0000 	    mvn T0,T0 
 288 21f4 4FEA5000 	    lsr T0,#1 
 289 21f8 06EA0006 	    and TOS,T0 
 290 21fc 00F06ABD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 2200 E4210000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 220c 00EE106A 	     vmov.f32 s0,TOS 
 299 2210 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 2214 10EE106A 	     vmov.f32 TOS,s0 
 301 2218 00F05CBD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 221c 04220000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 2224 00EE106A 	    vmov.f32 s0,TOS 
 309 2228 B5EE400A 	    vcmp.f32 s0, #0.0 
ARM GAS  forth.s 			page 87


 310 222c F1EE106A 	    vmrs TOS,FPSCR
 311 2230 BFF34F8F 	    dsb  
 312 2234 4FEAE676 	    asr TOS,#31   
 313 2238 00F04CBD 	    _NEXT 
 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 223c 20220000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 2244 504700BF 	    _NEST 
 321 2248 6D210000 	    _ADR FSUBB
 322 224c 25220000 	    _ADR FZLESS
 323 2250 5D330000 	    _ADR INVER     
 324 2254 DB2C0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 2258 40220000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2260 504700BF 	    _NEST 
 332 2264 6D210000 	    _ADR FSUBB 
 333 2268 25220000 	    _ADR FZLESS
 334 226c DB2C0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2270 5C220000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 227c 504700BF 	    _NEST 
 342 2280 B1300000 	   _ADR OVER 
 343 2284 B1300000 	   _ADR OVER 
 344 2288 45220000 	   _ADR FGREAT 
 345 228c 3F2F0000 	   _QBRAN 1f 
 345      98220000 
 346 2294 9D300000 	   _ADR SWAP  
 347 2298 7D300000 	1: _ADR DROP 
 348 229c DB2C0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 22a0 74220000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 22ac 504700BF 	    _NEST 
 355 22b0 B1300000 	    _ADR OVER 
 356 22b4 B1300000 	    _ADR OVER 
 357 22b8 61220000 	    _ADR FLESS 
 358 22bc 3F2F0000 	    _QBRAN 1f
 358      C8220000 
ARM GAS  forth.s 			page 88


 359 22c4 9D300000 	    _ADR SWAP   
 360 22c8 7D300000 	1:  _ADR DROP 
 361 22cc DB2C0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 22d0 A4220000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 22dc 80EA0000 	    eor T0,T0 
 370 22e0 C8F20000 	    movt T0,#0X8000
 371 22e4 06EA0006 	    and TOS,T0
 372 22e8 4FEAE676 	    asr TOS,#31  
 373 22ec 00F0F2BC 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 22f0 D4220000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 22fc 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 2304 06EA0006 	    and TOS,T0 
 382 2308 4FEAD656 	    lsr TOS,#23
 383 230c A6F17F06 	    sub TOS,#127 
 384 2310 00F0E0BC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 2314 F4220000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 2320 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 2328 06EA0006 	    AND TOS,T0 
 393 232c 80EA0000 	    EOR T0,T0 
 394 2330 C0F28000 	    MOVT T0,0x80
 395 2334 46EA0006 	    ORR TOS,T0 
 396 2338 00F0CCBC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 233c 18230000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 2344 47F8046D 	    _PUSH 
 405 2348 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
ARM GAS  forth.s 			page 89


 406 2350 00F0C0BC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
 412 2354 40230000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 235c 47F8046D 	    _PUSH 
 414 2360 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 2368 00F0B4BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 236c 58230000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 2378 47F8046D 	    _PUSH 
 423 237c 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 2384 00F0A6BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 2388 70230000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 2394 47F8046D 	    _PUSH 
 433 2398 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 23a0 00F098BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 23a4 8C230000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 23b0 504700BF 	    _NEST
 443 23b4 FD220000 	    _ADR FEXP 
 444 23b8 35210000 	    _ADR STOF 
 445 23bc 95230000 	    _ADR LOG2
 446 23c0 8D210000 	    _ADR FSTAR 
 447 23c4 1D210000 	    _ADR TRUNC  
 448 23c8 8D300000 	    _ADR DUPP 
 449 23cc C1300000 	    _ADR ZLESS 
 450 23d0 3F2F0000 	    _QBRAN 1f 
 450      DC230000 
 451 23d8 BD310000 	    _ADR ONEM
ARM GAS  forth.s 			page 90


 452 23dc DB2C0000 	1:  _UNNEST 
 453 23e0 A81F0000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 23ec 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 23f0 0000C842 	            .word  0x42C80000  // 100.0
  31 23f4 00401C46 	            .word  0x461C4000  // 10000.0 
  32 23f8 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 23fc CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 2400 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 2404 504700BF 	    _NEST 
  45 2408 FF2E0000 	    _DOLIT 2 
  45      02000000 
  46 2410 41310000 	    _ADR LSHIFT 
  47 2414 FF2E0000 	    _DOLIT p10p2n 
  47      EC230000 
  48 241c 51310000 	    _ADR PLUS 
  49 2420 992F0000 	    _ADR AT 
  50 2424 DB2C0000 	    _UNNEST 
  51              	
ARM GAS  forth.s 			page 91


  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 2428 504700BF 	    _NEST 
  59 242c FF2E0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 2434 FF2E0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 243c 053A0000 	    _ADR PICK  // idx f e 1 idx 
  62 2440 41310000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2444 D1300000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2448 DB2C0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 244c 504700BF 	    _NEST 
  78 2450 09300000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2454 F52F0000 	    _ADR RAT   // idx f e R: e 
  81 2458 29240000 	    _ADR bit_state // idx f state 
  82 245c 3F2F0000 	    _QBRAN 1f   // bit reset 
  82      70240000 
  83 2464 B1300000 	    _ADR OVER 
  84 2468 05240000 	    _ADR p10p2at // idx f pwr10 R: e
  85 246c AD210000 	    _ADR FSLH  // idx f R: e 
  86 2470 9D300000 	1:  _ADR SWAP  // f idx R: e 
  87 2474 AD310000 	    _ADR ONEP   // F idx++ R: e 
  88 2478 9D300000 	    _ADR SWAP   // idx f  
  89 247c B1300000 	    _ADR OVER   // idx f idx 
  90 2480 FF2E0000 	    _DOLIT 5 
  90      05000000 
  91 2488 59340000 	    _ADR GREAT  // idx > 5
  92 248c 3F2F0000 	    _QBRAN div_loop 
  92      54240000 
  93 2494 C52F0000 	    _ADR RFROM 
  94 2498 7D300000 	    _ADR DROP 
  95 249c DB2C0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
ARM GAS  forth.s 			page 92


 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 24a0 504700BF 	    _NEST 
 109 24a4 09300000 	    _ADR TOR 
 110              	mult_loop:
 111 24a8 F52F0000 	    _ADR RAT   // idx f e R: e 
 112 24ac 29240000 	    _ADR bit_state // idx f state 
 113 24b0 3F2F0000 	    _QBRAN 1f   // bit reset 
 113      C4240000 
 114 24b8 B1300000 	    _ADR OVER  
 115 24bc 05240000 	    _ADR p10p2at // idx f pwr10 R: e
 116 24c0 8D210000 	    _ADR FSTAR  // idx f R: e 
 117 24c4 9D300000 	1:  _ADR SWAP  // f idx R: e 
 118 24c8 AD310000 	    _ADR ONEP   // F idx++ R: e 
 119 24cc 9D300000 	    _ADR SWAP   // idx f  
 120 24d0 B1300000 	    _ADR OVER   // idx f idx 
 121 24d4 FF2E0000 	    _DOLIT 5 
 121      05000000 
 122 24dc 59340000 	    _ADR GREAT  // idx > 5
 123 24e0 3F2F0000 	    _QBRAN mult_loop 
 123      A8240000 
 124 24e8 C52F0000 	    _ADR RFROM 
 125 24ec 7D300000 	    _ADR DROP 
 126 24f0 DB2C0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 24f4 504700BF 	    _NEST 
 136 24f8 B1300000 	    _ADR OVER  // e f e 
 137 24fc 3F2F0000 	    _QBRAN 3f // exp==0,  done 
 137      38250000 
 138 2504 FF2E0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 250c 89320000 	    _ADR NROT // idx e f
 140 2510 9D300000 	    _ADR SWAP // idx f e   
 141 2514 8D300000 	    _ADR DUPP  // idx f e e 
 142 2518 C1300000 	    _ADR ZLESS
 143 251c 3F2F0000 	    _QBRAN pos_exp 
 143      34250000 
 144              	// negative exponent 
 145 2524 81330000 	    _ADR ABSS 
 146 2528 4D240000 	    _ADR mant_div 
 147 252c 672F0000 	    _BRAN 3f 
 147      38250000 
 148              	pos_exp: // positive exponent 
 149 2534 A1240000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2538 9D300000 	3:  _ADR SWAP 
 152 253c 7D300000 	    _ADR DROP 
 153 2540 DB2C0000 	    _UNNEST 
ARM GAS  forth.s 			page 93


 154              	
 155              	
 156              	/*****************************
 157              	   decimals ( a -- a+ fdec | a 0.0 )
 158              	   parse digits after '.' 
 159              	   convert to float 
 160              	*****************************/
 161              	decimals:
 162 2544 504700BF 	    _NEST 
 163 2548 FF2E0000 	    _DOLIT 0
 163      00000000 
 164 2550 8D300000 	    _ADR DUPP
 165 2554 75320000 	    _ADR ROT
 166 2558 D53D0000 	    _ADR PARSE_DIGITS // d n a+ 
 167 255c 89320000 	    _ADR NROT  // a d n 
 168 2560 35210000 	    _ADR STOF  // convert integer n to float 
 169 2564 9D300000 	    _ADR SWAP
 170 2568 FF2E0000 	    _DOLIT 9 
 170      09000000 
 171 2570 85340000 	    _ADR MIN 
 172 2574 DD1F0000 	    _ADR PWR10 
 173 2578 AD210000 	    _ADR FSLH 
 174 257c DB2C0000 	    _UNNEST 
 175              	
 176              	
 177              	/************************************
 178              	   exponent ( a -- exp a+ )
 179              	   parse float exponent 
 180              	************************************/
 181              	exponent: 
 182 2580 504700BF 	    _NEST 
 183 2584 8F3E0000 	    _ADR NEGQ 
 184 2588 09300000 	    _ADR TOR 
 185 258c FF2E0000 	    _DOLIT 0 
 185      00000000 
 186 2594 8D300000 	    _ADR DUPP 
 187 2598 75320000 	    _ADR ROT 
 188 259c D53D0000 	    _ADR PARSE_DIGITS // d n a  
 189 25a0 89320000 	    _ADR NROT 
 190 25a4 9D300000 	    _ADR SWAP 
 191 25a8 7D300000 	    _ADR DROP 
 192 25ac C52F0000 	    _ADR RFROM 
 193 25b0 3F2F0000 	    _QBRAN 1f 
 193      BC250000 
 194 25b8 71330000 	    _ADR NEGAT 
 195 25bc 9D300000 	1:  _ADR SWAP 
 196 25c0 DB2C0000 	    _UNNEST  // -- exp a+  
 197              	
 198              	
 199              	/**********************************
 200              	    FLOAT? ( a -- f# -2 | a 0 )
 201              	    parse float number 
 202              	    return a 0 if not float 
 203              	**********************************/
 204 25c4 A8230000 	    _HEADER FLOATQ,6,"FLOAT?"
 204      06464C4F 
 204      41543F00 
ARM GAS  forth.s 			page 94


 205 25d0 504700BF 	    _NEST
 206              	    // always use base 10 
 207              	    // hexadecimal float not accepted 
 208 25d4 99350000 	    _ADR BASE 
 209 25d8 992F0000 	    _ADR AT 
 210 25dc 09300000 	    _ADR TOR 
 211              	    // use decimal base  
 212 25e0 553D0000 	    _ADR DECIM 
 213 25e4 FF2E0000 		_DOLIT	0      // failed flag   
 213      00000000 
 214 25ec B1300000 		_ADR	OVER   // a 0 a     R: base
 215 25f0 E5340000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 216 25f4 7D300000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 217              	// check for '-'|'+' save sign on R: 
 218 25f8 8F3E0000 	    _ADR NEGQ 
 219 25fc 09300000 	    _ADR   TOR // -- ... a  R: base sign 
 220              	// if next char is digit parse integer part 
 221 2600 8D300000 	    _ADR DUPP 
 222 2604 B92F0000 	    _ADR CAT 
 223 2608 FF2E0000 	    _DOLIT 10 
 223      0A000000 
 224 2610 793D0000 	    _ADR DIGTQ // u t|f 
 225 2614 9D300000 	    _ADR SWAP 
 226 2618 7D300000 	    _ADR DROP  // drop u 
 227 261c 3F2F0000 	    _QBRAN must_be_dot 
 227      70260000 
 228              	// get integer part     
 229 2624 FF2E0000 	    _DOLIT 0 
 229      00000000 
 230 262c 8D300000 	    _ADR DUPP
 231 2630 75320000 	    _ADR ROT // a 0 0 0 a  
 232 2634 D53D0000 	    _ADR PARSE_DIGITS // a 0 d n a 
 233 2638 89320000 	    _ADR NROT // ... a d n 
 234 263c 35210000 	    _ADR STOF  // convert n to float 
 235 2640 09300000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 236 2644 7D300000 	    _ADR DROP // d not needed
 237              	// if next char is 'E' get exponent 
 238 2648 FF2E0000 	    _DOLIT 'E' 
 238      45000000 
 239 2650 753E0000 	    _ADR CHARQ 
 240 2654 3F2F0000 	    _QBRAN 1f // next is decimal fraction  
 240      7C260000 
 241 265c FF2E0000 	    _DOLIT fzero // no fraction 
 241      00000000 
 242 2664 09300000 	    _ADR TOR  // R: base sign fint 0.0
 243 2668 672F0000 	    _BRAN 3f // get exponent   
 243      D8260000 
 244              	// no integer part, next character must be '.' 
 245              	must_be_dot: 
 246 2670 FF2E0000 	    _DOLIT fzero // integer part 0.0 
 246      00000000 
 247 2678 09300000 	    _ADR TOR  // R: base sign fint 
 248 267c FF2E0000 	1:  _DOLIT '.' 
 248      2E000000 
 249 2684 753E0000 	    _ADR CHARQ 
 250 2688 3F2F0000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 250      48270000 
ARM GAS  forth.s 			page 95


 251 2690 45250000 	    _ADR decimals // -- a 0 a fdec 
 252 2694 09300000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 253              	// if next char == 'E' there is an exponent 
 254              	// else no exponent, float completed 
 255 2698 FF2E0000 	    _DOLIT 'E' 
 255      45000000 
 256 26a0 753E0000 	    _ADR CHARQ 
 257 26a4 3F2F0000 	    _QBRAN 1f
 257      B4260000 
 258 26ac 672F0000 	    _BRAN 3f 
 258      D8260000 
 259              	// no exponent, must be end of string 
 260 26b4 B92F0000 	1:   _ADR CAT 
 261 26b8 3F2F0000 	    _QBRAN 1f 
 261      C8260000 
 262 26c0 672F0000 	    _BRAN error2 // error not end of string 
 262      5C270000 
 263 26c8 09300000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 264 26cc 7D300000 	    _ADR DROP 
 265 26d0 672F0000 	    _BRAN build_float 
 265      10270000 
 266              	3: // get exponent 
 267 26d8 81250000 	    _ADR exponent // a 0 exp a+ 
 268              	// must be end of string 
 269 26dc B92F0000 	    _ADR CAT 
 270 26e0 3F2F0000 	    _QBRAN 4f
 270      F0260000 
 271 26e8 672F0000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 271      5C270000 
 272 26f0 09300000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 273 26f4 9D320000 	    _ADR DDROP 
 274 26f8 672F0000 	    _BRAN build_float     
 274      10270000 
 275              	5: // no exponent 
 276 2700 FF2E0000 	    _DOLIT 0 
 276      00000000 
 277 2708 09300000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 278 270c 7D300000 	    _ADR DROP 
 279              	build_float: // a 0 R: base sign fint fdec exp 
 280 2710 C52F0000 	    _ADR RFROM 
 281 2714 D92F0000 	    _ADR DRFROM 
 282 2718 4D210000 	    _ADR FPLUS 
 283 271c F5240000 	    _ADR exp_adjust
 284 2720 C52F0000 	    _ADR RFROM 
 285 2724 3F2F0000 	    _QBRAN 1f 
 285      38270000 
 286 272c FF2E0000 	    _DOLIT fminus1
 286      000080BF 
 287 2734 8D210000 	    _ADR FSTAR 
 288 2738 FF2E0000 	1:  _DOLIT -2 
 288      FEFFFFFF 
 289 2740 672F0000 	    _BRAN restore_base  
 289      6C270000 
 290              	error1: // a 0 a R: base sign fint 
 291 2748 D92F0000 	    _ADR DRFROM 
 292 274c 9D320000 	    _ADR DDROP
 293 2750 7D300000 	    _ADR DROP  
ARM GAS  forth.s 			page 96


 294 2754 672F0000 	    _BRAN restore_base  
 294      6C270000 
 295              	error2: // a 0 a R: base sign fint fdec  
 296 275c D92F0000 	    _ADR DRFROM 
 297 2760 9D320000 	    _ADR DDROP  // a 0 a R: base sign
 298 2764 C52F0000 	    _ADR RFROM  // a 0 a sign R: base  
 299 2768 9D320000 	    _ADR DDROP  
 300              	restore_base: 
 301 276c C52F0000 	    _ADR RFROM 
 302 2770 99350000 	    _ADR BASE 
 303 2774 852F0000 	    _ADR STORE 
 304 2778 DB2C0000 	    _UNNEST 
 305              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 277c 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2780 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2784 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2788 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 278c 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2790 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2794 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2798 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 279c 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
ARM GAS  forth.s 			page 97


  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 27a0 C8250000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 27ac 504700BF 	    _NEST
  50 27b0 FF2E0000 	    _DOLIT 1  
  50      01000000 
  51 27b8 71340000 	    _ADR MAX  
  52 27bc FF2E0000 	    _DOLIT 8
  52      08000000 
  53 27c4 85340000 	    _ADR MIN 
  54 27c8 FF2E0000 	    _DOLIT 2 
  54      02000000 
  55 27d0 41310000 	    _ADR LSHIFT 
  56 27d4 FF2E0000 	    _DOLIT rounding 
  56      7C270000 
  57 27dc 51310000 	    _ADR PLUS 
  58 27e0 992F0000 	    _ADR AT   
  59 27e4 4D210000 	    _ADR FPLUS 
  60 27e8 DB2C0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 27ec A4270000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 27f4 57F8040B 	    ldr T0,[DSP],#4
  69 27f8 3070     	    strb T0,[TOS]  
  70 27fa 06F10106 	    add TOS,#1
  71 27fe 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 2800 504700BF 	    _NEST 
  81 2804 09300000 	    _ADR TOR  // >R ( i r: b )
  82 2808 B9370000 	    _ADR STOD // ( dbl r: b )
  83 280c 8D300000 	    _ADR DUPP // ( dbl i r: b )
  84 2810 09300000 	    _ADR TOR  // ( dbl r: b sign )
  85 2814 F9320000 	    _ADR DABS 
  86 2818 F53B0000 	    _ADR BDIGS 
  87 281c 613C0000 	    _ADR DIGS 
  88 2820 C52F0000 	    _ADR RFROM 
  89 2824 953C0000 	    _ADR SIGN 
  90 2828 BD3C0000 	    _ADR EDIGS // ( -- p u )
  91 282c 8D300000 	    _ADR DUPP  
  92 2830 89320000 	    _ADR NROT // -rot ( -- u p u )
  93 2834 F52F0000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2838 9D300000 	    _ADR SWAP // ( -- u p b u )
ARM GAS  forth.s 			page 98


  95 283c 9D3A0000 	    _ADR CMOVE // ( -- u ) 
  96 2840 8D300000 	    _ADR DUPP  // ( -- u u )
  97 2844 C52F0000 	    _ADR RFROM // ( -- u u b )
  98 2848 51310000 	    _ADR PLUS  // ( -- u b+ )
  99 284c 9D300000 	    _ADR SWAP  // ( -- b+ u )
 100 2850 DB2C0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2854 F0270000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2860 504700BF 	    _NEST 
 116 2864 DD1F0000 	    _ADR PWR10 
 117 2868 09300000 	    _ADR TOR  // f2 r: f1 
 118 286c FF2E0000 	    _DOLIT 0   // m 
 118      00000000 
 119 2874 9D300000 	    _ADR SWAP  // m f2 
 120 2878 8D300000 	1:  _ADR DUPP 
 121 287c F52F0000 	    _ADR RAT 
 122 2880 61220000 	    _ADR FLESS
 123 2884 3F2F0000 	    _QBRAN 2f
 123      AC280000 
 124 288c FF2E0000 	    _DOLIT ten 
 124      00002041 
 125 2894 8D210000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2898 9D300000 	    _ADR SWAP
 128 289c BD310000 	    _ADR ONEM 
 129 28a0 9D300000 	    _ADR SWAP 
 130 28a4 672F0000 	    _BRAN 1b
 130      78280000 
 131 28ac C52F0000 	2:  _ADR RFROM 
 132 28b0 7D300000 	    _ADR DROP 
 133 28b4 9D300000 	    _ADR SWAP 
 134 28b8 DB2C0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
ARM GAS  forth.s 			page 99


 146              	    m    log10 reduction factor
 147              	******************************/
 148 28bc 58280000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 28cc 504700BF 	    _NEST 
 150 28d0 DD1F0000 	    _ADR PWR10
 151 28d4 09300000 	    _ADR TOR
 152 28d8 FF2E0000 	    _DOLIT 0 
 152      00000000 
 153 28e0 9D300000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 28e4 F52F0000 	1:  _ADR RAT   
 155 28e8 B1300000 	    _ADR OVER 
 156 28ec 45220000 	    _ADR FGREAT 
 157 28f0 532F0000 	    _TBRAN 2f 
 157      18290000 
 158 28f8 FF2E0000 	    _DOLIT ten 
 158      00002041 
 159 2900 AD210000 	    _ADR FSLH 
 160              	    // increment m 
 161 2904 9D300000 	    _ADR SWAP 
 162 2908 AD310000 	    _ADR ONEP 
 163 290c 9D300000 	    _ADR SWAP 
 164 2910 672F0000 	    _BRAN 1b   
 164      E4280000 
 165 2918 C52F0000 	2:  _ADR RFROM 
 166 291c 7D300000 	    _ADR DROP
 167 2920 9D300000 	    _ADR SWAP 
 168 2924 DB2C0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2928 504700BF 	    _NEST
 183 292c 9D300000 	    _ADR SWAP
 184 2930 61320000 	    _ADR QDUP    
 185 2934 3F2F0000 	    _QBRAN 2f 
 185      58290000 
 186 293c 9D300000 	    _ADR SWAP 
 187 2940 FF2E0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2948 9D300000 	    _ADR SWAP  
 189 294c F5270000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2950 01280000 	    _ADR ITOA // ( i b -- b u )
 191 2954 7D300000 	    _ADR DROP // ( -- b+ )     
 192 2958 DB2C0000 	2:  _UNNEST 
 193              	
ARM GAS  forth.s 			page 100


 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 295c 504700BF 	    _NEST
 208 2960 FF2E0000 	    _DOLIT 2 
 208      02000000 
 209 2968 053A0000 	    _ADR PICK 
 210 296c C1300000 	    _ADR ZLESS 
 211 2970 3F2F0000 	    _QBRAN 1f 
 211      88290000 
 212 2978 09300000 	    _ADR TOR 
 213 297c 7D300000 	    _ADR DROP 
 214 2980 672F0000 	    _BRAN 2f 
 214      F4290000 
 215 2988 FF2E0000 	1:   _DOLIT '.' 
 215      2E000000 
 216 2990 9D300000 	    _ADR SWAP 
 217 2994 F5270000 	    _ADR CSTOP 
 218 2998 09300000 	    _ADR TOR // >r ( d f r: b ) 
 219 299c 9D300000 	1:  _ADR SWAP  
 220 29a0 61320000 	    _ADR QDUP 
 221 29a4 3F2F0000 	    _QBRAN 2f
 221      F4290000 
 222 29ac BD310000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 29b0 9D300000 	    _ADR SWAP // swap ( -- d f r: b )
 224 29b4 FF2E0000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 29bc 8D210000 	    _ADR FSTAR // f*
 226 29c0 8D300000 	    _ADR DUPP  
 227 29c4 1D210000 	    _ADR TRUNC // d f i
 228 29c8 8D300000 	    _ADR DUPP  // d f i i  
 229 29cc FF2E0000 	    _DOLIT '0' 
 229      30000000 
 230 29d4 51310000 	    _ADR PLUS 
 231 29d8 C52F0000 	    _ADR RFROM // R> ( d f c b )
 232 29dc F5270000 	    _ADR CSTOP // ( d f i b+ )
 233 29e0 09300000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 29e4 35210000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 29e8 6D210000 	    _ADR FSUBB 
 236 29ec 672F0000 	    _BRAN 1b 
 236      9C290000 
 237 29f4 7D300000 	2:  _ADR DROP 
 238 29f8 C52F0000 	    _ADR RFROM 
 239 29fc DB2C0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
ARM GAS  forth.s 			page 101


 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2a00 504700BF 	    _NEST 
 257 2a04 09300000 	    _ADR TOR // ( -- d f r: b )
 258 2a08 8D300000 	    _ADR DUPP 
 259 2a0c FF2E0000 	    _DOLIT fone 
 259      0000803F 
 260 2a14 61220000 	    _ADR FLESS 
 261 2a18 3F2F0000 	    _QBRAN 1f
 261      782A0000 
 262 2a20 FF2E0000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2a28 61280000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2a2c 89320000 	    _ADR NROT
 265 2a30 B1300000 	    _ADR OVER 
 266 2a34 AD270000 	    _ADR ROUND
 267 2a38 8D300000 	    _ADR DUPP 
 268 2a3c FF2E0000 	    _DOLIT fone 
 268      0000803F 
 269 2a44 61220000 	    _ADR FLESS 
 270 2a48 3F2F0000 	    _QBRAN 2f 
 270      842A0000 
 271              	    // first digit '0' 
 272 2a50 FF2E0000 	    _DOLIT '0' 
 272      30000000 
 273 2a58 C52F0000 	    _ADR RFROM 
 274 2a5c F5270000 	    _ADR CSTOP 
 275 2a60 09300000 	    _ADR TOR 
 276              	    // decrement d 
 277 2a64 9D300000 	    _ADR SWAP 
 278 2a68 BD310000 	    _ADR ONEM 
 279 2a6c 9D300000 	    _ADR SWAP 
 280 2a70 C52F0000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2a74 DB2C0000 	    _UNNEST 
 282 2a78 B1300000 	1:  _ADR OVER 
 283 2a7c CD280000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2a80 89320000 	    _ADR NROT   // m d f r: b 
 285 2a84 8D300000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2a88 1D210000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2a8c 8D300000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2a90 09300000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2a94 35210000 	    _ADR STOF  // ( -- m d f f )
 290 2a98 6D210000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 2a9c C52F0000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2aa0 C52F0000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2aa4 01280000 	    _ADR ITOA // -- m d f b u )
ARM GAS  forth.s 			page 102


 294 2aa8 09300000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2aac 75320000 	    _ADR ROT
 296 2ab0 C52F0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2ab4 61310000 	    _ADR SUBB // ( -- m f b d- )
 298 2ab8 89320000 	    _ADR NROT // ( -- m d f b )
 299 2abc DB2C0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2ac0 C0280000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2ac8 504700BF 	    _NEST 
 315 2acc B1300000 	    _ADR OVER  
 316 2ad0 FD220000 	    _ADR FEXP 
 317 2ad4 FF2E0000 	    _DOLIT 128 
 317      80000000 
 318 2adc D9330000 	    _ADR EQUAL 
 319 2ae0 3F2F0000 	    _QBRAN 1f
 319      F02A0000 
 320 2ae8 672F0000 	    _BRAN nan 
 320      AC2B0000 
 321 2af0 8D300000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2af4 09300000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2af8 0D320000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2afc 9D300000 	    _ADR SWAP 
 326 2b00 F5270000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2b04 B1300000 	    _ADR OVER 
 328 2b08 3F2F0000 	    _QBRAN zdz // 0.0 
 328      5C2B0000 
 329              	    // check float sign 
 330 2b10 B1300000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2b14 DD220000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2b18 3F2F0000 	    _QBRAN 1f  // 0branch 1f 
 332      3C2B0000 
 333              	    // negative number add '-' to buffer 
 334 2b20 9D300000 	    _ADR SWAP 
 335 2b24 ED210000 	    _ADR FABS 
 336 2b28 9D300000 	    _ADR SWAP 
 337 2b2c FF2E0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2b34 9D300000 	    _ADR SWAP 
 339 2b38 F5270000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2b3c 012A0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 2b40 5D290000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2b44 29290000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2b48 F52F0000 	    _ADR RAT 
ARM GAS  forth.s 			page 103


 344 2b4c 61310000 	    _ADR SUBB 
 345 2b50 C52F0000 	    _ADR RFROM 
 346 2b54 9D300000 	    _ADR SWAP 
 347 2b58 DB2C0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2b5c 09300000 	     _ADR TOR 
 350 2b60 9D320000 	     _ADR DDROP
 351 2b64 C52F0000 	     _ADR RFROM
 352 2b68 FF2E0000 	     _DOLIT '0'
 352      30000000 
 353 2b70 9D300000 	     _ADR SWAP 
 354 2b74 F5270000 	     _ADR CSTOP 
 355 2b78 FF2E0000 	     _DOLIT '.'
 355      2E000000 
 356 2b80 9D300000 	     _ADR SWAP 
 357 2b84 F5270000 	     _ADR CSTOP 
 358 2b88 FF2E0000 	     _DOLIT '0'
 358      30000000 
 359 2b90 9D300000 	     _ADR SWAP 
 360 2b94 F5270000 	     _ADR CSTOP 
 361 2b98 7D300000 	     _ADR DROP  
 362 2b9c C52F0000 	     _ADR RFROM 
 363 2ba0 FF2E0000 	     _DOLIT 4 
 363      04000000 
 364 2ba8 DB2C0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2bac 09300000 	    _ADR TOR   // ( d f r: b )
 367 2bb0 9D300000 	    _ADR SWAP  // f d  
 368 2bb4 7D300000 	    _ADR DROP  // f 
 369 2bb8 0D320000 	    _ADR BLANK  // f c 
 370 2bbc F52F0000 	    _ADR RAT    // f c b 
 371 2bc0 F5270000 	    _ADR CSTOP  // f b+ 
 372 2bc4 9D300000 	    _ADR SWAP   // b+ f 
 373 2bc8 21230000 	    _ADR FMANT  // b+ mant
 374 2bcc FF2E0000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2bd4 D1300000 	    _ADR ANDD   
 376 2bd8 3F2F0000 	    _QBRAN infinity 
 376      182C0000 
 377 2be0 FF2E0000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2be8 9D300000 	    _ADR SWAP   // c b+
 379 2bec F5270000 	    _ADR CSTOP  // b+
 380 2bf0 FF2E0000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2bf8 9D300000 	    _ADR SWAP   // c b+ 
 382 2bfc F5270000 	    _ADR CSTOP  // b+
 383 2c00 FF2E0000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2c08 9D300000 	    _ADR SWAP   // c b+ 
 385 2c0c F5270000 	    _ADR CSTOP  // b+
 386 2c10 672F0000 	    _BRAN 1f 
 386      482C0000 
 387              	infinity:
 388 2c18 FF2E0000 	    _DOLIT 'I'
 388      49000000 
 389 2c20 9D300000 	    _ADR SWAP 
ARM GAS  forth.s 			page 104


 390 2c24 F5270000 	    _ADR CSTOP 
 391 2c28 FF2E0000 	    _DOLIT 'N'
 391      4E000000 
 392 2c30 9D300000 	    _ADR SWAP 
 393 2c34 F5270000 	    _ADR CSTOP 
 394 2c38 FF2E0000 	    _DOLIT 'F'
 394      46000000 
 395 2c40 9D300000 	    _ADR SWAP 
 396 2c44 F5270000 	    _ADR CSTOP 
 397              	1:
 398 2c48 7D300000 	    _ADR DROP 
 399 2c4c C52F0000 	    _ADR RFROM 
 400 2c50 FF2E0000 	    _DOLIT 4 
 400      04000000 
 401 2c58 DB2C0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2c5c C42A0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2c64 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2c68 FF2E0000 	    _DOLIT 1 
 415      01000000 
 416 2c70 71340000 	    _ADR MAX 
 417 2c74 FF2E0000 	    _DOLIT 7 
 417      07000000 
 418 2c7c 85340000 	    _ADR MIN
 419 2c80 9D300000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2c84 2D3A0000 	    _ADR HERE
 422 2c88 09300000 	    _ADR TOR  
 423 2c8c FF2E0000 	    _DOLIT 16 
 423      10000000 
 424 2c94 CD4B0000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2c98 F52F0000 	    _ADR RAT 
 427 2c9c FF2E0000 	    _DOLIT 16 
 427      10000000 
 428 2ca4 FF2E0000 	    _DOLIT 0 
 428      00000000 
 429 2cac 153B0000 	    _ADR FILL 
 430 2cb0 C52F0000 	    _ADR RFROM // ( d f b )
 431 2cb4 C92A0000 	    _ADR FTOA 
 432 2cb8 6D400000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 2cbc FF2E0000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 2cc4 CD4B0000 	    _ADR ALLOT
 436 2cc8 DB2C0000 	    _UNNEST
ARM GAS  forth.s 			page 105


 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
ARM GAS  forth.s 			page 106


  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2ccc 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2cd0 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2cd4 5CF8045B 		LDR WP,[IP],#4 
  89 2cd8 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2cda 58F804CB 		LDMFD RSP!,{IP}
  92 2cde 5CF8045B 		LDR WP,[IP],#4 
  93 2ce2 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2ce4 04F14801 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2ce8 0968     		ldr T1,[T1]     // address in here   
 107 2cea 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 2cee 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2cf2 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2cf6 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
ARM GAS  forth.s 			page 107


 111 2cfa 04F14802 		add T2,UP,#USER_CTOP 
 112 2cfe 1160     		str T1,[T2]  // save update HERE value 
 113 2d00 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2d02 47F8046D 		_PUSH 
 119 2d06 04F11406 		ADD TOS,UP,#STDIN 
 120 2d0a E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2d0c 47F8046D 		_PUSH 
 126 2d10 04F11806 		ADD TOS,UP,#STDOUT
 127 2d14 DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2d16 602C0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 2d20 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2d28 47F8046D 	    _PUSH 
 136 2d2c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2d2e 81EA0101 	    eor T1,T1 
 138 2d32 8162     	    str T1,[T0,#SCB_CFSR]
 139 2d34 CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2d36 1A2D0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2d40 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 2d48 47F8046D 		_PUSH 
 148 2d4c 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2d4e 81EA0101 	    eor T1,T1 
 150 2d52 8163     	    str T1,[T0,#SCB_BFAR]
 151 2d54 BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 2d56 3A2D0000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
 157      3F00
 158 2d60 504700BF 		_NEST 
 159 2d64 032D0000 		_ADR TSTDIN // ' STDIN 
ARM GAS  forth.s 			page 108


 160 2d68 7D3A0000 		_ADR ATEXE
 161 2d6c DB2C0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 2d70 5A2D0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 2d78 504700BF 		_NEST
 169              	KEY1:
 170 2d7c 011B0000 		_ADR CAPS_LED 
 171 2d80 612D0000 		_ADR	QKEY 
 172 2d84 3F2F0000 		_QBRAN	KEY1
 172      7C2D0000 
 173 2d8c DB2C0000 		_UNNEST
 174              	
 175              	/**********************************************
 176              		EMIT ( c -- )
 177              		transmit a character to console 
 178              	**********************************************/
 179 2d90 742D0000 		_HEADER EMIT,4,"EMIT"
 179      04454D49 
 179      540000BF 
 180 2d9c 504700BF 		_NEST 
 181 2da0 0D2D0000 		_ADR TSTDOUT 
 182 2da4 7D3A0000 		_ADR ATEXE 
 183 2da8 DB2C0000 		_UNNEST 
 184              	
 185              	
 186              	/************************************************
 187              	 GET-IP ( n - c )
 188              	 return interrupt priority of IRQn 
 189              	************************************************/
 190              	/*
 191              		_HEADER GETIP,6,"GET-IP" 
 192              		_NEST 
 193              		_ADR DUPP 
 194              		_ADR ZLESS
 195              		_QBRAN 1f 
 196              		_DOLIT 15
 197              		_ADR ANDD
 198              		_DOLIT 4
 199              		_ADR SUBB  
 200              		_DOLIT 0xE000ED18 
 201              		_BRAN 2f 
 202              	1:	_DOLIT 0xE000E400 
 203              	2:	_ADR PLUS 
 204              		_ADR CAT
 205              		_DOLIT 4 
 206              		_ADR RSHIFT 
 207              		_UNNEST 
 208              	*/
 209              	
 210              	/***********************************************
 211              	 RANDOM ( n+ -- {0..n+ - 1} )
 212              	 return pseudo random number 
ARM GAS  forth.s 			page 109


 213              	 REF: https://en.wikipedia.org/wiki/Xorshift
 214              	************************************************/
 215 2dac 942D0000 		_HEADER RAND,6,"RANDOM"
 215      0652414E 
 215      444F4D00 
 216 2db8 504700BF 		_NEST
 217 2dbc 81330000 		_ADR ABSS   
 218 2dc0 39350000 		_ADR SEED 
 219 2dc4 992F0000 		_ADR AT 
 220 2dc8 8D300000 		_ADR DUPP 
 221 2dcc FF2E0000 		_DOLIT 13
 221      0D000000 
 222 2dd4 41310000 		_ADR LSHIFT 
 223 2dd8 F9300000 		_ADR XORR  
 224 2ddc 8D300000 		_ADR DUPP 
 225 2de0 FF2E0000 		_DOLIT 17 
 225      11000000 
 226 2de8 29310000 		_ADR RSHIFT 
 227 2dec F9300000 		_ADR XORR 
 228 2df0 8D300000 		_ADR DUPP
 229 2df4 FF2E0000 		_DOLIT 5 
 229      05000000 
 230 2dfc 41310000 		_ADR LSHIFT 
 231 2e00 F9300000 		_ADR XORR  
 232 2e04 8D300000 		_ADR DUPP 
 233 2e08 39350000 		_ADR SEED 
 234 2e0c 852F0000 		_ADR STORE 
 235 2e10 FF2E0000 		_DOLIT 0x7FFFFFFF
 235      FFFFFF7F 
 236 2e18 D1300000 		_ADR ANDD 
 237 2e1c 9D300000 		_ADR SWAP 
 238 2e20 01390000 		_ADR MODD 
 239 2e24 DB2C0000 		_UNNEST 
 240              	
 241              	
 242              	/****************************************
 243              	 PAUSE ( u -- ) 
 244              	 suspend execution for u milliseconds
 245              	****************************************/
 246 2e28 B02D0000 		_HEADER PAUSE,5,"PAUSE"
 246      05504155 
 246      534500BF 
 247 2e34 504700BF 		_NEST 
 248 2e38 69350000 		_ADR TIMER 
 249 2e3c 852F0000 		_ADR STORE 
 250              	PAUSE_LOOP:
 251 2e40 69350000 		_ADR TIMER 
 252 2e44 992F0000 		_ADR AT 
 253 2e48 3F2F0000 		_QBRAN PAUSE_EXIT 
 253      582E0000 
 254 2e50 672F0000 		_BRAN PAUSE_LOOP 
 254      402E0000 
 255              	PAUSE_EXIT: 		
 256 2e58 DB2C0000 		_UNNEST 
 257              	
 258              	/******************************************
 259              	  ULED ( T|F -- )
ARM GAS  forth.s 			page 110


 260              	  control user LED, -1 ON, 0 OFF 
 261              	*******************************************/
 262 2e5c 2C2E0000 		_HEADER ULED,4,"ULED"
 262      04554C45 
 262      440000BF 
 263 2e68 4FF40050 		mov T0,#(1<<LED_PIN)
 264 2e6c 4FF40061 		_MOV32 T1,LED_GPIO 
 264      C4F20201 
 265 2e74 3600     		movs TOS,TOS 
 266 2e76 57F8046B 		_POP
 267 2e7a 03D0     		beq ULED_OFF
 268 2e7c 4FEA0040 		lsl T0,#16 
 269 2e80 8861     		str T0,[T1,#GPIO_BSRR]
 270 2e82 27E7     		_NEXT 
 271              	ULED_OFF:
 272 2e84 8861     		str T0,[T1,#GPIO_BSRR]
 273 2e86 25E7     		_NEXT    
 274              	
 275              	/**************************
 276              	   JOYSTK  ( -- u )
 277              	   read joystick port 
 278              	**************************/
 279 2e88 602E0000 		_HEADER JOYSTK,6,"JOYSTK"
 279      064A4F59 
 279      53544B00 
 280 2e94 504700BF 		_NEST 
 281 2e98 FF2E0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 281      10000240 
 282 2ea0 992F0000 		_ADR AT 
 283 2ea4 FF2E0000 		_DOLIT 0x100f 
 283      0F100000 
 284 2eac D1300000 		_ADR ANDD 
 285 2eb0 DB2C0000 		_UNNEST 
 286              	
 287              	/****************************
 288              		BEEP ( msec freq -- )
 289              	input:
 290              		freq  frequence hertz 
 291              		msec  durration in msec 
 292              	*****************************/
 293 2eb4 8C2E0000 		_HEADER BEEP,4,"BEEP"
 293      04424545 
 293      500000BF 
 294 2ec0 48F68050 		_MOV32 r0,6000000 // Fclk 
 294      C0F25B00 
 295 2ec8 B0FBF6F0 		udiv r0,r0,TOS
 296 2ecc 57F8046B 		_POP  
 297 2ed0 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 297      C4F20001 
 298 2ed8 C862     		str r0,[r1,#TIM_ARR]
 299 2eda 4FEA5000 		lsr r0,#1
 300 2ede 4863     		str r0,[r1,#TIM_CCR1]
 301 2ee0 4FF00100 		mov r0,#1 
 302 2ee4 0862     		str r0,[r1,#TIM_CCER]
 303 2ee6 0860     		str r0,[r1,#TIM_CR1]
 304 2ee8 C868     		ldr r0,[r1,#TIM_DIER]
 305 2eea C4F8AC60 		str TOS,[UP,#BEEP_DTMR]
ARM GAS  forth.s 			page 111


 306 2eee 57F8046B 		_POP
 307 2ef2 EFE6     		_NEXT 
 308              	
 309              	
 310              	/***************
 311              	//  The kernel
 312              	***************/
 313              	
 314              	/********************
 315              	    NOP	( -- )
 316              	 	do nothing.
 317              	*********************/
 318 2ef4 B82E0000 		_HEADER NOP,3,"NOP"
 318      034E4F50 
 319 2efc EAE6     		_NEXT 
 320              	 
 321              	/********************
 322              	    doLIT	( -- w )
 323              	 	Push an inline literal.
 324              	hidden word used by compiler 
 325              	*********************/
 326              	DOLIT:
 327 2efe 47F8046D 		_PUSH				//  store TOS on data stack
 328 2f02 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 329 2f06 E5E6     		_NEXT 
 330              	
 331              	/*******************************
 332              	    EXECUTE	( ca -- )
 333              	 	Execute the word at ca.
 334              	*******************************/
 335 2f08 F82E0000 		_HEADER EXECU,7,"EXECUTE"
 335      07455845 
 335      43555445 
 336 2f14 46F00105 		ORR	WP,TOS,#1 
 337 2f18 57F8046B 		_POP
 338 2f1c 2847     		BX WP 
 339 2f1e D9E6     		_NEXT 
 340              	
 341              	/**********************************************************
 342              	    donext	( -- ) counter on R:
 343              	 	Run time code for the single index loop.
 344              	 	: next ( -- ) \ hilevel model
 345              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 346              	hidden word used by compiler 	  
 347              	*********************************************************/
 348              	DONXT:
 349 2f20 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 350 2f24 22B9     		CBNZ T2,NEXT1 
 351              		/* loop done */
 352 2f26 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 353 2f2a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 354 2f2e D1E6     		_NEXT
 355              	NEXT1:
 356              		/* decrement loop counter */
 357 2f30 A2F10102 		SUB	T2,T2,#1
 358 2f34 C8F80020 		STR	T2,[RSP]
 359 2f38 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
ARM GAS  forth.s 			page 112


 360 2f3c CAE6     		_NEXT 
 361              	
 362              	/**************************************
 363              	    ?branch	( f -- )
 364              	 	Branch if flag is zero.
 365              	hiddend word used by compiler
 366              	**************************************/
 367              	QBRAN:
 368 2f3e 3600     		MOVS	TOS,TOS
 369 2f40 57F8046B 		_POP
 370 2f44 02D1     		BNE	QBRAN1
 371 2f46 DCF800C0 		LDR	IP,[IP]
 372 2f4a C3E6     		_NEXT
 373              	QBRAN1:
 374 2f4c 0CF1040C 	 	ADD	IP,IP,#4
 375 2f50 C0E6     		_NEXT
 376              	
 377              	/***********************************
 378              		tbranch ( f -- )
 379              	    branch if flag is true 
 380              	***********************************/
 381              	TBRAN:
 382 2f52 3600     		MOVS TOS,TOS 
 383 2f54 57F8046B 		_POP 
 384 2f58 02D0     		BEQ 1f 
 385 2f5a DCF800C0 		LDR IP,[IP]
 386 2f5e B9E6     		_NEXT 
 387 2f60 0CF1040C 	1:  ADD IP,IP,#4
 388 2f64 B6E6     		_NEXT 
 389              	
 390              	
 391              	/***********************************
 392              	    branch	( -- )
 393              	 	Branch to an inline address.
 394              	hidden word used by compiler 
 395              	***********************************/
 396              	BRAN:
 397 2f66 DCF800C0 		LDR	IP,[IP]
 398 2f6a B3E6     		_NEXT
 399              	
 400              	/******************************************
 401              	    EXIT	(  -- )
 402              	 	Exit the currently executing command.
 403              	******************************************/
 404 2f6c 0C2F0000 		_HEADER EXIT,4,"EXIT"
 404      04455849 
 404      540000BF 
 405 2f78 DB2C0000 		_UNNEST
 406              	
 407              	/***********************************
 408              	    !	   ( w a -- )
 409              	 	Pop the data stack to memory.
 410              	************************************/
 411 2f7c 702F0000 		_HEADER STORE,1,"!"
 411      012100BF 
 412 2f84 57F8045B 		LDR	WP,[DSP],#4
 413 2f88 3560     		STR	WP,[TOS]
ARM GAS  forth.s 			page 113


 414 2f8a 57F8046B 		_POP
 415 2f8e A1E6     		_NEXT 
 416              	
 417              	/********************************************
 418              	    @	   ( a -- w )
 419              	 	Push memory location to the data stack.
 420              	*********************************************/
 421 2f90 802F0000 		_HEADER AT,1,"@"
 421      014000BF 
 422 2f98 3668     		LDR	TOS,[TOS]
 423 2f9a 9BE6     		_NEXT 
 424              	
 425              	/*******************************************
 426              	    C!	  ( c b -- )
 427              	 	Pop the data stack to byte memory.
 428              	*******************************************/
 429 2f9c 942F0000 		_HEADER CSTOR,2,"C!"
 429      02432100 
 430 2fa4 57F8045B 		LDR	WP,[DSP],#4
 431 2fa8 3570     		STRB WP,[TOS]
 432 2faa 57F8046B 		_POP
 433 2fae 91E6     		_NEXT
 434              	
 435              	/*********************************************
 436              	    C@	  ( b -- c )
 437              	 	Push byte memory location to the data stack.
 438              	**********************************************/
 439 2fb0 A02F0000 		_HEADER CAT,2,"C@"
 439      02434000 
 440 2fb8 3678     		LDRB	TOS,[TOS]
 441 2fba 8BE6     		_NEXT 
 442              	
 443              	
 444              	/*********************************************
 445              	    R>	  ( -- w  R: w -- ) 
 446              	 	push from rstack.
 447              	**********************************************/
 448 2fbc B42F0000 		_HEADER RFROM,2,"R>"
 448      02523E00 
 449 2fc4 47F8046D 		_PUSH
 450 2fc8 58F8046B 		LDR	TOS,[RSP],#4
 451 2fcc 82E6     		_NEXT 
 452              	
 453              	/***********************************************
 454              		2R> (  -- D ) R: D --  
 455              	    push a double from rstack 
 456              	***********************************************/
 457 2fce C02F0000 		_HEADER DRFROM,3,"2R>"
 457      0332523E 
 457      00BF
 458 2fd8 47F8046D 		_PUSH 
 459 2fdc 58F8046B 		LDR TOS,[RSP],#4 
 460 2fe0 47F8046D 		_PUSH 
 461 2fe4 58F8046B 		LDR TOS,[RSP],#4
 462 2fe8 74E6     		_NEXT 
 463              	
 464              	/************************************************
ARM GAS  forth.s 			page 114


 465              	    R@	  ( -- w )
 466              	 	Copy top of return stack to the data stack.
 467              	************************************************/
 468 2fea D22F0000 		_HEADER RAT,2,"R@"
 468      02524000 
 468      00BF
 469 2ff4 47F8046D 		_PUSH
 470 2ff8 D8F80060 		LDR	TOS,[RSP]
 471 2ffc 6AE6     		_NEXT 
 472              	
 473              	/***********************************************
 474              	    >R	  ( w -- ) R: -- w 
 475              	 	pop to rstack.
 476              	************************************************/
 477 2ffe EE2F0000 		_HEADER TOR,2,">R"
 477      023E5200 
 477      00BF
 478 3008 48F8046D 		STR	TOS,[RSP,#-4]!
 479 300c 57F8046B 		_POP
 480 3010 60E6     		_NEXT
 481              	
 482              	/*********************************************
 483              		2>R ( d -- ) R: -- d 
 484              		pop a double to rstack 
 485              	*********************************************/
 486 3012 02300000 		_HEADER DTOR,3,"2>R"
 486      03323E52 
 486      00BF
 487 301c 48F8046D 		STR TOS,[RSP,#-4]!
 488 3020 57F8046B 	    _POP 
 489 3024 48F8046D 		STR TOS,[RSP,#-4]!
 490 3028 57F8046B 		_POP  
 491 302c 52E6     		_NEXT 	
 492              	
 493              	
 494              	/*******************************
 495              	//	RP! ( u -- )
 496              	// initialize RPP with u 
 497              	*******************************/
 498 302e 16300000 		_HEADER RPSTOR,3,"RP!"
 498      03525021 
 498      00BF
 499 3038 B046     		MOV RSP,TOS 
 500 303a 57F8046B 		_POP  
 501 303e 49E6     		_NEXT 
 502              	
 503              	/********************************
 504              		SP! ( u -- )
 505              	 initialize SPP with u 
 506              	********************************/
 507 3040 32300000 		_HEADER SPSTOR,3,"SP!"
 507      03535021 
 508 3048 3746     		MOV DSP,TOS 
 509 304a 86EA0606 		EOR TOS,TOS,TOS 
 510 304e 41E6     		_NEXT 
 511              	
 512              	/**************************************
ARM GAS  forth.s 			page 115


 513              	    SP@	 ( -- a )
 514              	 	Push the current data stack pointer.
 515              	***************************************/
 516 3050 44300000 		_HEADER SPAT,3,"SP@"
 516      03535040 
 517 3058 47F8046D 		_PUSH
 518 305c 3E46     		MOV	TOS,DSP
 519 305e 39E6     		_NEXT
 520              	
 521              	/**************************************
 522              	   RP@ ( -- a )
 523              	   push current rstack pointer 
 524              	**************************************/
 525 3060 54300000 		_HEADER RPAT,3,"RP@"
 525      03525040 
 526 3068 47F8046D 		_PUSH 
 527 306c 4646     		MOV TOS,RSP 
 528 306e 31E6     		_NEXT 
 529              	
 530              	/********************************
 531              	    DROP	( w -- )
 532              	 	Discard top stack item.
 533              	********************************/
 534 3070 64300000 		_HEADER DROP,4,"DROP"
 534      0444524F 
 534      500000BF 
 535 307c 57F8046B 		_POP
 536 3080 28E6     		_NEXT 
 537              	
 538              	/*********************************
 539              	    DUP	 ( w -- w w )
 540              	 	Duplicate the top stack item.
 541              	*********************************/
 542 3082 74300000 		_HEADER DUPP,3,"DUP"
 542      03445550 
 542      00BF
 543 308c 47F8046D 		_PUSH
 544 3090 20E6     		_NEXT 
 545              	
 546              	/**********************************
 547              	    SWAP	( w1 w2 -- w2 w1 )
 548              	 	Exchange top two stack items.
 549              	**********************************/
 550 3092 86300000 		_HEADER SWAP,4,"SWAP"
 550      04535741 
 550      5000
 551 309c 3D68     		LDR	WP,[DSP]
 552 309e 3E60     		STR	TOS,[DSP]
 553 30a0 2E46     		MOV	TOS,WP
 554 30a2 17E6     		_NEXT 
 555              	
 556              	/***********************************
 557              	    OVER	( w1 w2 -- w1 w2 w1 )
 558              	 	Copy second stack item to top.
 559              	***********************************/
 560 30a4 96300000 		_HEADER OVER,4,"OVER"
 560      044F5645 
ARM GAS  forth.s 			page 116


 560      520000BF 
 561 30b0 47F8046D 		_PUSH
 562 30b4 7E68     		LDR	TOS,[DSP,#4]
 563 30b6 0DE6     		_NEXT 
 564              	
 565              	/***********************************
 566              	    0<	  ( n -- t )
 567              	 	Return true if n is negative.
 568              	***********************************/
 569 30b8 A8300000 		_HEADER ZLESS,2,"0<"
 569      02303C00 
 570 30c0 4FEAE676 		ASR TOS,#31
 571 30c4 06E6     		_NEXT 
 572              	
 573              	/********************************
 574              	    AND	 ( w w -- w )
 575              	 	Bitwise AND.
 576              	********************************/
 577 30c6 BC300000 		_HEADER ANDD,3,"AND"
 577      03414E44 
 577      00BF
 578 30d0 57F8045B 		LDR	WP,[DSP],#4
 579 30d4 06EA0506 		AND	TOS,TOS,WP
 580 30d8 FCE5     		_NEXT 
 581              	
 582              	/******************************
 583              	    OR	  ( w w -- w )
 584              	 	Bitwise inclusive OR.
 585              	******************************/
 586 30da CA300000 		_HEADER ORR,2,"OR"
 586      024F5200 
 586      00BF
 587 30e4 57F8045B 		LDR	WP,[DSP],#4
 588 30e8 46EA0506 		ORR	TOS,TOS,WP
 589 30ec F2E5     		_NEXT 
 590              	
 591              	/*****************************
 592              	    XOR	 ( w w -- w )
 593              	 	Bitwise exclusive OR.
 594              	*****************************/
 595 30ee DE300000 		_HEADER XORR,3,"XOR"
 595      03584F52 
 595      00BF
 596 30f8 57F8045B 		LDR	WP,[DSP],#4
 597 30fc 86EA0506 		EOR	TOS,TOS,WP
 598 3100 E8E5     		_NEXT 
 599              	
 600              	/**************************************************
 601              	    UM+	 ( w w -- w cy )
 602              	 	Add two numbers, return the sum and carry flag.
 603              	***************************************************/
 604 3102 F2300000 		_HEADER UPLUS,3,"UM+"
 604      03554D2B 
 604      00BF
 605 310c 3D68     		LDR	WP,[DSP]
 606 310e AD19     		ADDS	WP,WP,TOS
 607 3110 4FF00006 		MOV	TOS,#0
ARM GAS  forth.s 			page 117


 608 3114 46F10006 		ADC	TOS,TOS,#0
 609 3118 3D60     		STR	WP,[DSP]
 610 311a DBE5     		_NEXT 
 611              	
 612              	/*********************************
 613              	    RSHIFT	 ( w # -- w )
 614              	 	arithmetic Right shift # bits.
 615              	**********************************/
 616 311c 06310000 		_HEADER RSHIFT,6,"RSHIFT"
 616      06525348 
 616      49465400 
 617 3128 57F8045B 		LDR	WP,[DSP],#4
 618 312c 45FA06F6 		MOV	TOS,WP,ASR TOS
 619 3130 D0E5     		_NEXT 
 620              	
 621              	/****************************
 622              	    LSHIFT	 ( w # -- w )
 623              	 	left shift # bits.
 624              	****************************/
 625 3132 20310000 		_HEADER LSHIFT,6,"LSHIFT"
 625      064C5348 
 625      49465400 
 625      00BF
 626 3140 57F8045B 		LDR	WP,[DSP],#4
 627 3144 05FA06F6 		MOV	TOS,WP,LSL TOS
 628 3148 C4E5     		_NEXT
 629              	
 630              	/*************************
 631              	    +	 ( w w -- w )
 632              	 	Add.
 633              	*************************/
 634 314a 36310000 		_HEADER PLUS,1,"+"
 634      012B
 635 3150 57F8045B 		LDR	WP,[DSP],#4
 636 3154 2E44     		ADD	TOS,TOS,WP
 637 3156 BDE5     		_NEXT 
 638              	
 639              	/************************
 640              	    -	 ( w w -- w )
 641              	 	Subtract.
 642              	************************/
 643 3158 4E310000 		_HEADER SUBB,1,"-"
 643      012D00BF 
 644 3160 57F8045B 		LDR	WP,[DSP],#4
 645 3164 C6EB0506 		RSB	TOS,TOS,WP
 646 3168 B4E5     		_NEXT 
 647              	
 648              	/************************
 649              	    *	 ( w w -- w )
 650              	 	Multiply.
 651              	***********************/
 652 316a 5C310000 		_HEADER STAR,1,"*"
 652      012A
 653 3170 57F8045B 		LDR	WP,[DSP],#4
 654 3174 05FB06F6 		MUL	TOS,WP,TOS
 655 3178 ACE5     		_NEXT 
 656              	
ARM GAS  forth.s 			page 118


 657              	/***************************
 658              	    UM*	 ( w w -- ud )
 659              	 	Unsigned multiply.
 660              	****************************/
 661 317a 6E310000 		_HEADER UMSTA,3,"UM*"
 661      03554D2A 
 661      00BF
 662 3184 3D68     		LDR	WP,[DSP]
 663 3186 A6FB0523 		UMULL	T2,T3,TOS,WP
 664 318a 3A60     		STR	T2,[DSP]
 665 318c 1E46     		MOV	TOS,T3
 666 318e A1E5     		_NEXT 
 667              	
 668              	/***************************
 669              	    M*	 ( w w -- d )
 670              	 	signed multiply.
 671              		hold double result
 672              	***************************/
 673 3190 7E310000 		_HEADER MSTAR,2,"M*"
 673      024D2A00 
 674 3198 3D68     		LDR	WP,[DSP]
 675 319a 86FB0523 		SMULL	T2,T3,TOS,WP
 676 319e 3A60     		STR	T2,[DSP]
 677 31a0 1E46     		MOV	TOS,T3
 678 31a2 97E5     		_NEXT 
 679              	
 680              	/***************************
 681              	    1+	 ( w -- w+1 )
 682              	 	Add 1.
 683              	***************************/
 684 31a4 94310000 		_HEADER ONEP,2,"1+"
 684      02312B00 
 685 31ac 06F10106 		ADD	TOS,TOS,#1
 686 31b0 90E5     		_NEXT 
 687              	
 688              	/***************************
 689              	    1-	 ( w -- w-1 )
 690              	 	Subtract 1.
 691              	***************************/
 692 31b2 A8310000 		_HEADER ONEM,2,"1-"
 692      02312D00 
 692      00BF
 693 31bc A6F10106 		SUB	TOS,TOS,#1
 694 31c0 88E5     		_NEXT 
 695              	
 696              	/***************************
 697              	    2+	 ( w -- w+2 )
 698              	 	Add 2.
 699              	**************************/
 700 31c2 B6310000 		_HEADER TWOP,2,"2+"
 700      02322B00 
 700      00BF
 701 31cc 06F10206 		ADD	TOS,TOS,#2
 702 31d0 80E5     		_NEXT
 703              	
 704              	/**************************
 705              	    2-	 ( w -- w-2 )
ARM GAS  forth.s 			page 119


 706              	 	Subtract 2.
 707              	**************************/
 708 31d2 C6310000 		_HEADER TWOM,2,"2-"
 708      02322D00 
 708      00BF
 709 31dc A6F10206 		SUB	TOS,TOS,#2
 710 31e0 78E5     		_NEXT
 711              	
 712              	/***************************
 713              	    CELL+	( w -- w+4 )
 714              	 	Add CELLL.
 715              	***************************/
 716 31e2 D6310000 		_HEADER CELLP,5,"CELL+"
 716      0543454C 
 716      4C2B
 717 31ec 06F10406 		ADD	TOS,TOS,#CELLL
 718 31f0 70E5     		_NEXT
 719              	
 720              	/***************************
 721              	    CELL-	( w -- w-4 )
 722              	 	Subtract CELLL.
 723              	**************************/
 724 31f2 E6310000 		_HEADER CELLM,5,"CELL-"
 724      0543454C 
 724      4C2D
 725 31fc A6F10406 		SUB	TOS,TOS,#CELLL
 726 3200 68E5     		_NEXT
 727              	
 728              	/**************************** 
 729              	    BL	( -- 32 )
 730              	 	Blank (ASCII space).
 731              	*****************************/
 732 3202 F6310000 		_HEADER BLANK,2,"BL"
 732      02424C00 
 732      00BF
 733 320c 47F8046D 		_PUSH
 734 3210 4FF02006 		MOV	TOS,#32
 735 3214 5EE5     		_NEXT 
 736              	
 737              	/**************************
 738              	    CELLS	( w -- w*4 )
 739              	 	Multiply CELLL 
 740              	***************************/
 741 3216 06320000 		_HEADER CELLS,5,"CELLS"
 741      0543454C 
 741      4C53
 742 3220 4FEA8606 		LSL TOS,#2
 743 3224 56E5     		_NEXT
 744              	
 745              	/***************************
 746              	    CELL/	( w -- w/4 )
 747              	 	Divide by CELLL.
 748              	***************************/
 749 3226 1A320000 		_HEADER CELLSL,5,"CELL/"
 749      0543454C 
 749      4C2F
 750 3230 4FEAA606 		ASR TOS,#2
ARM GAS  forth.s 			page 120


 751 3234 4EE5     		_NEXT
 752              	
 753              	/*************************
 754              	    2*	( w -- w*2 )
 755              	 	Multiply 2.
 756              	*************************/
 757 3236 2A320000 		_HEADER TWOST,2,"2*"
 757      02322A00 
 757      00BF
 758 3240 4FEA4606 		MOV	TOS,TOS,LSL#1
 759 3244 46E5     		_NEXT
 760              	
 761              	/*************************
 762              	    2/	( w -- w/2 )
 763              	 	Divide by 2.
 764              	***********************/
 765 3246 3A320000 		_HEADER TWOSL,2,"2/"
 765      02322F00 
 765      00BF
 766 3250 4FEA6606 		MOV	TOS,TOS,ASR#1
 767 3254 3EE5     		_NEXT
 768              	
 769              	/****************************
 770              	    ?DUP	( w -- w w | 0 )
 771              	 	Conditional duplicate.
 772              	*****************************/
 773 3256 4A320000 		_HEADER QDUP,4,"?DUP"
 773      043F4455 
 773      5000
 774 3260 3500     		MOVS	WP,TOS
 775 3262 18BF     		IT NE 
 776 3264 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 777 3268 34E5     		_NEXT
 778              	
 779              	/***********************************
 780              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 781              	 	Rotate top 3 items.
 782              	*************************************/
 783 326a 5A320000 		_HEADER ROT,3,"ROT"
 783      03524F54 
 783      00BF
 784 3274 3868     		LDR	T0,[DSP]  // w2 
 785 3276 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 786 3278 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 787 327a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 788 327c 2AE5     		_NEXT
 789              	
 790              	/*********************************
 791              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 792              	 left rotate top 3 elements 
 793              	********************************/
 794 327e 6E320000 		_HEADER NROT,4,"-ROT"
 794      042D524F 
 794      5400
 795 3288 7868     		LDR T0,[DSP,#4]
 796 328a 7E60     		STR TOS,[DSP,#4]	
 797 328c 3E68     		LDR TOS,[DSP]
ARM GAS  forth.s 			page 121


 798 328e 3860     		STR T0,[DSP]
 799 3290 20E5     		_NEXT 
 800              	
 801              	/*********************************
 802              	    2DROP	( w1 w2 -- )
 803              	 	Drop top 2 items.
 804              	*********************************/
 805 3292 82320000 		_HEADER DDROP,5,"2DROP"
 805      05324452 
 805      4F50
 806 329c 57F8046B 		_POP
 807 32a0 57F8046B 		_POP
 808 32a4 16E5     		_NEXT 
 809              	
 810              	/********************************
 811              		3DROP ( w1 w2 w3 -- )
 812              		drop top 3 items 
 813              	********************************/
 814 32a6 96320000 		_HEADER TDROP,5,"3DROP"
 814      05334452 
 814      4F50
 815 32b0 07F10807 	    add DSP,#8 
 816 32b4 57F8046B 	    _POP 
 817 32b8 0CE5     	    _NEXT 
 818              	
 819              	/***********************************
 820              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 821              	 	Duplicate top 2 items.
 822              	************************************/
 823 32ba AA320000 		_HEADER DDUP,4,"2DUP"
 823      04324455 
 823      5000
 824 32c4 3868     		LDR	T0,[DSP] // w1
 825 32c6 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 826 32ca 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 827 32ce 01E5     		_NEXT
 828              	
 829              	/******************************
 830              	    D+	( d1 d2 -- d3 )
 831              	 	Add top 2 double numbers.
 832              	******************************/
 833 32d0 BE320000 		_HEADER DPLUS,2,"D+"
 833      02442B00 
 834 32d8 57F8045B 		LDR	WP,[DSP],#4
 835 32dc 57F8042B 		LDR	T2,[DSP],#4
 836 32e0 3B68     		LDR	T3,[DSP]
 837 32e2 ED18     		ADDS	WP,WP,T3
 838 32e4 3D60     		STR	WP,[DSP]
 839 32e6 46EB0206 		ADC	TOS,TOS,T2
 840 32ea F3E4     		_NEXT
 841              	
 842              	/******************************
 843              		DABS ( d -- ud )
 844              		absolute value double 
 845              	*****************************/
 846 32ec D4320000 		_HEADER DABS,4,"DABS"
 846      04444142 
ARM GAS  forth.s 			page 122


 846      530000BF 
 847 32f8 16F0004F 		tst TOS,#(1<<31)
 848 32fc 09D0     		beq 9f 
 849 32fe 6FEA0606 		mvn TOS,TOS 
 850 3302 3D68     		ldr WP,[DSP]
 851 3304 6FEA0505 		mvn WP,WP 
 852 3308 0135     		adds WP,#1
 853 330a 3D60     		str WP,[DSP]
 854 330c 01D3     		bcc 9f 
 855 330e 06F10106 		add TOS,#1 
 856 3312 DFE4     	9:	_NEXT 
 857              	
 858              	/*****************************
 859              	  UD> ( d1 d2 -- f )
 860              	  unsigned compare double d1 > d2 
 861              	******************************/
 862 3314 F0320000 		_HEADER UDGREAT,3,"UD>"
 862      0355443E 
 863 331c 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 864 3320 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 865 3322 B042     		cmp T0,TOS 
 866 3324 02D8     		bhi 1f
 867 3326 04D4     		bmi 2f  
 868 3328 A942     		cmp T1,WP 
 869 332a 02D9     		bls 2f 
 870 332c 4FF0FF36 	1:	mov TOS,#-1 
 871 3330 D0E4     		_NEXT 
 872 3332 4FF00006 	2:  mov TOS,#0 
 873 3336 CDE4     		_NEXT 
 874              	
 875              	/******************************
 876              		D0= ( d -- f )
 877              		double 0= 
 878              	*****************************/
 879 3338 18330000 		_HEADER DZEQUAL,3,"D0="
 879      0344303D 
 880 3340 3046     		mov T0,TOS
 881 3342 57F8046B 		_POP 
 882 3346 46EA0006 		orr TOS,T0 
 883 334a 01D0     		beq 9f
 884 334c 6FF00006 		mvn TOS,#0 
 885 3350 C0E4     	9:	_NEXT 
 886              	
 887              	/*****************************
 888              	    NOT	 ( w -- !w )
 889              	 	1"s complement.
 890              	*****************************/
 891 3352 3C330000 		_HEADER INVER,3,"NOT"
 891      034E4F54 
 891      00BF
 892 335c 6FEA0606 		MVN	TOS,TOS
 893 3360 B8E4     		_NEXT
 894              	
 895              	/*****************************
 896              	    NEGATE	( w -- -w )
 897              	 	2's complement.
 898              	***************************/
ARM GAS  forth.s 			page 123


 899 3362 56330000 		_HEADER NEGAT,6,"NEGATE"
 899      064E4547 
 899      41544500 
 899      00BF
 900 3370 C6F10006 		RSB	TOS,TOS,#0
 901 3374 AEE4     		_NEXT
 902              	
 903              	/***************************
 904              	    ABS	 ( w -- |w| )
 905              	 	Absolute.
 906              	**************************/
 907 3376 66330000 		_HEADER ABSS,3,"ABS"
 907      03414253 
 907      00BF
 908 3380 16F0004F 		TST	TOS,#0x80000000
 909 3384 18BF     		IT NE
 910 3386 7642     	    RSBNE   TOS,TOS,#0
 911 3388 A4E4     		_NEXT
 912              	
 913              	/**************************
 914              		CLZ ( n - n )
 915              		count leading zeros 
 916              	**************************/
 917 338a 7A330000 		_HEADER CLZ,3,"CLZ"
 917      03434C5A 
 917      00BF
 918 3394 B6FA86F6 		clz TOS,TOS 
 919 3398 9CE4     		_NEXT 
 920              	
 921              	/*************************
 922              		CTZ ( n -- n )
 923              		count trailing zeros 
 924              	************************/
 925 339a 8E330000 		_HEADER CTZ,3,"CTZ"
 925      0343545A 
 925      00BF
 926 33a4 80EA0000 		eor T0,T0 
 927 33a8 16F0010F 	1:  tst TOS,#1 
 928 33ac 04D1     		bne 2f 
 929 33ae 4FEA5606 		lsr TOS,#1 
 930 33b2 00F10100 		add T0,#1 
 931 33b6 F7E7     		b 1b 
 932 33b8 0646     	2:  mov TOS,T0 
 933 33ba 8BE4     		_NEXT 
 934              	
 935              	
 936              	/*******************
 937              	  0= ( w -- f )
 938              	 TOS==0?
 939              	*******************/
 940 33bc 9E330000 		_HEADER ZEQUAL,2,"0="
 940      02303D00 
 941 33c4 16B9     		cbnz TOS,1f
 942 33c6 4FF0FF36 		mov TOS,#-1
 943 33ca 83E4     		_NEXT 
 944 33cc 86EA0606 	1:  eor TOS,TOS,TOS  
 945 33d0 80E4     		_NEXT 	
ARM GAS  forth.s 			page 124


 946              	
 947              	/*********************
 948              	    =	 ( w w -- t )
 949              	 	Equal?
 950              	*********************/
 951 33d2 C0330000 		_HEADER EQUAL,1,"="
 951      013D
 952 33d8 57F8045B 		LDR	WP,[DSP],#4
 953 33dc AE42     		CMP	TOS,WP
 954 33de 0CBF     		ITE EQ 
 955 33e0 6FF00006 	    MVNEQ	TOS,#0
 956 33e4 0026     		MOVNE	TOS,#0
 957 33e6 75E4     		_NEXT
 958              	
 959              	/************************
 960              		<> ( w w -- f )
 961              		different?
 962              	************************/
 963 33e8 D6330000 		_HEADER DIFF,2,"<>"
 963      023C3E00 
 964 33f0 3046     		mov T0,TOS 
 965 33f2 57F8046B 		_POP 
 966 33f6 86EA0006 		eor TOS,T0
 967 33fa B6FA86F0 		clz T0,TOS 
 968 33fe 06FA00F6 		lsl TOS,T0 
 969 3402 4FEAE676 		asr TOS,#31 
 970 3406 65E4     		_NEXT 
 971              	
 972              	/************************
 973              	    U<	 ( w w -- t )
 974              	 	Unsigned less?
 975              	*************************/
 976 3408 EC330000 		_HEADER ULESS,2,"U<"
 976      02553C00 
 977 3410 57F8045B 		LDR	WP,[DSP],#4
 978 3414 B542     		CMP	WP,TOS
 979 3416 34BF     		ITE CC 
 980 3418 6FF00006 		MVNCC	TOS,#0
 981 341c 0026     		MOVCS	TOS,#0
 982 341e 59E4     		_NEXT
 983              	
 984              	/**********************
 985              	    <	( w w -- t )
 986              	 	Less?
 987              	**********************/
 988 3420 0C340000 		_HEADER LESS,1,"<"
 988      013C00BF 
 989 3428 57F8045B 		LDR	WP,[DSP],#4
 990 342c B542     		CMP	WP,TOS
 991 342e B4BF     	    ITE LT
 992 3430 6FF00006 		MVNLT	TOS,#0
 993 3434 0026     		MOVGE	TOS,#0
 994 3436 4DE4     		_NEXT 
 995              	
 996              	/**********************
 997              		U> ( u u -- t|f )
 998              	    unsigned greater 
ARM GAS  forth.s 			page 125


 999              	**********************/
 1000 3438 24340000 		_HEADER UGREAT,2,"U>"
 1000      02553E00 
 1001 3440 57F8045B 		LDR WP,[DSP],#4 
 1002 3444 AE42     		CMP TOS,WP 
 1003 3446 34BF     		ITE CC  
 1004 3448 6FF00006 		MVNCC TOS,#0 
 1005 344c 0026     		MOVCS TOS,#0
 1006 344e 41E4     		_NEXT 
 1007              	
 1008              	/***********************
 1009              	    >	( w w -- t )
 1010              	 	greater?
 1011              	***********************/
 1012 3450 3C340000 		_HEADER GREAT,1,">"
 1012      013E00BF 
 1013 3458 57F8045B 		LDR	WP,[DSP],#4
 1014 345c B542     		CMP	WP,TOS
 1015 345e CCBF     		ITE GT
 1016 3460 6FF00006 	    MVNGT	TOS,#0
 1017 3464 0026     		MOVLE	TOS,#0
 1018 3466 35E4     		_NEXT
 1019              	
 1020              	/***************************
 1021              	    MAX	 ( w w -- max )
 1022              	 	Leave maximum.
 1023              	***************************/
 1024 3468 54340000 		_HEADER MAX,3,"MAX"
 1024      034D4158 
 1025 3470 57F8045B 		LDR	WP,[DSP],#4
 1026 3474 B542     		CMP	WP,TOS
 1027 3476 C8BF     		IT GT 
 1028 3478 2E46     		MOVGT	TOS,WP
 1029 347a 2BE4     		_NEXT 
 1030              	
 1031              	/**************************
 1032              	    MIN	 ( w w -- min )
 1033              	 	Leave minimum.
 1034              	**************************/
 1035 347c 6C340000 		_HEADER MIN,3,"MIN"
 1035      034D494E 
 1036 3484 57F8045B 		LDR	WP,[DSP],#4
 1037 3488 B542     		CMP	WP,TOS
 1038 348a B8BF     		IT LT
 1039 348c 2E46     		MOVLT	TOS,WP
 1040 348e 21E4     		_NEXT
 1041              	
 1042              	/***********************
 1043              	    +!	 ( w a -- )
 1044              	 	Add to memory.
 1045              	***********************/
 1046 3490 80340000 		_HEADER PSTOR,2,"+!"
 1046      022B2100 
 1047 3498 57F8045B 		LDR	WP,[DSP],#4
 1048 349c 3268     		LDR	T2,[TOS]
 1049 349e 2A44     		ADD	T2,T2,WP
 1050 34a0 3260     		STR	T2,[TOS]
ARM GAS  forth.s 			page 126


 1051 34a2 57F8046B 		_POP
 1052 34a6 15E4     		_NEXT
 1053              	
 1054              	/************************
 1055              	    2!	 ( d a -- )
 1056              	 	Store double number.
 1057              	*************************/
 1058 34a8 94340000 		_HEADER DSTOR,2,"2!"
 1058      02322100 
 1059 34b0 57F8045B 		LDR	WP,[DSP],#4
 1060 34b4 57F8042B 		LDR	T2,[DSP],#4
 1061 34b8 46F8045B 		STR	WP,[TOS],#4
 1062 34bc 3260     		STR	T2,[TOS]
 1063 34be 57F8046B 		_POP
 1064 34c2 07E4     		_NEXT
 1065              	
 1066              	/************************
 1067              	    2@	 ( a -- d )
 1068              	 	Fetch double number.
 1069              	************************/
 1070 34c4 AC340000 		_HEADER DAT,2,"D@"
 1070      02444000 
 1071 34cc 7568     		LDR	WP,[TOS,#4]
 1072 34ce 47F8045D 		STR	WP,[DSP,#-4]!
 1073 34d2 3668     		LDR	TOS,[TOS]
 1074 34d4 FFF7FEBB 		_NEXT
 1075              	
 1076              	/***************************
 1077              	    COUNT	( b -- b+1 c )
 1078              	 	Fetch length of string.
 1079              	****************************/
 1080 34d8 C8340000 		_HEADER COUNT,5,"COUNT"
 1080      05434F55 
 1080      4E5400BF 
 1081 34e4 16F8015B 		LDRB	WP,[TOS],#1
 1082 34e8 47F8046D 		_PUSH
 1083 34ec 2E46     		MOV	TOS,WP
 1084 34ee FFF7F1BB 		_NEXT
 1085              	
 1086              	/******************************
 1087              	    DNEGATE	( d -- -d )
 1088              	 	Negate double number.
 1089              	**************************/
 1090 34f2 DC340000 		_HEADER DNEGA,7,"DNEGATE"
 1090      07444E45 
 1090      47415445 
 1090      00BF
 1091 3500 3D68     		LDR	WP,[DSP]
 1092 3502 A2EB0202 		SUB	T2,T2,T2
 1093 3506 551B     		SUBS WP,T2,WP
 1094 3508 62EB0606 		SBC	TOS,T2,TOS
 1095 350c 3D60     		STR	WP,[DSP]
 1096 350e FFF7E1BB 		_NEXT
 1097              	
 1098              	/******************************
 1099              	  System and user variables
 1100              	******************************/
ARM GAS  forth.s 			page 127


 1101              	
 1102              	/*******************************
 1103              	  doVAR	( -- a )
 1104              	  Run time routine for VARIABLE and CREATE.
 1105              	hidden word used by compiler
 1106              	********************************/
 1107              	DOVAR:
 1108 3512 47F8046D 		_PUSH
 1109 3516 6646     		MOV TOS,IP
 1110 3518 0CF1040C 		ADD IP,IP,#4 
 1111 351c FFF7DDBB 		B UNNEST 
 1112              	
 1113              	/**********************************
 1114              	    doCON	( -- a ) 
 1115              	 	Run time routine for CONSTANT.
 1116              	hidden word used by compiler 
 1117              	***********************************/
 1118              	DOCON:
 1119 3520 47F8046D 		_PUSH
 1120 3524 5CF8046B 		LDR.W TOS,[IP],#4 
 1121 3528 FFF7D7BB 		B UNNEST 
 1122              	
 1123              	/***********************
 1124              	  system variables 
 1125              	***********************/
 1126              	
 1127              	/**************************
 1128              	 SEED ( -- a)
 1129              	 return PRNG seed address 
 1130              	**************************/
 1131 352c F6340000 		_HEADER SEED,4,"SEED"
 1131      04534545 
 1131      440000BF 
 1132 3538 47F8046D 		_PUSH 
 1133 353c 04F10406 		ADD TOS,UP,#RNDSEED
 1134 3540 FFF7C8BB 		_NEXT 	
 1135              	
 1136              	/****************************************
 1137              	  MSEC ( -- a)
 1138              	 return address of milliseconds counter
 1139              	****************************************/
 1140 3544 30350000 		_HEADER MSEC,4,"MSEC"
 1140      044D5345 
 1140      430000BF 
 1141 3550 47F8046D 	    _PUSH
 1142 3554 04F10806 	    ADD TOS,UP,#TICKS
 1143 3558 FFF7BCBB 	    _NEXT 
 1144              	
 1145              	/*************************
 1146              	 TIMER ( -- a )
 1147              	 count down timer 
 1148              	**********************/
 1149 355c 48350000 		_HEADER TIMER,5,"TIMER"
 1149      0554494D 
 1149      455200BF 
 1150 3568 47F8046D 		 _PUSH 
 1151 356c 04F10C06 	    ADD TOS,UP,#CD_TIMER
ARM GAS  forth.s 			page 128


 1152 3570 FFF7B0BB 	    _NEXT
 1153              	
 1154              	/*****************************
 1155              	    'BOOT	 ( -- a )
 1156              	 	boot up application vector 
 1157              	*****************************/
 1158 3574 60350000 		_HEADER TBOOT,5,"'BOOT"
 1158      0527424F 
 1158      4F5400BF 
 1159 3580 47F8046D 		_PUSH
 1160 3584 04F11006 		ADD	TOS,UP,#BOOT 
 1161 3588 FFF7A4BB 		_NEXT
 1162              		
 1163              	/********************************************	
 1164              	    BASE	( -- a )
 1165              	 	Storage of the radix base for numeric I/O.
 1166              	**********************************************/
 1167 358c 78350000 		_HEADER BASE,4,"BASE"
 1167      04424153 
 1167      450000BF 
 1168 3598 47F8046D 		_PUSH
 1169 359c 04F11C06 		ADD	TOS,UP,#NBASE
 1170 35a0 FFF798BB 		_NEXT
 1171              	
 1172              	/***********************************************
 1173              		BCHAR ( -- flag )
 1174              		boolean variable
 1175              		if set base char include in convertion 
 1176              		of integer to string.  
 1177              	************************************************/
 1178 35a4 90350000 			_HEADER BCHR,5,"BCHAR"
 1178      05424348 
 1178      415200BF 
 1179 35b0 47F8046D 			_PUSH 
 1180 35b4 04F12006 			ADD TOS,UP,#BCHAR 
 1181 35b8 FFF78CBB 			_NEXT 
 1182              	
 1183              	/*****************************************************
 1184              	    temp	 ( -- a )
 1185              	 	A temporary storage location used in parse and find.
 1186              	hidden word for internal use
 1187              	********************************************************/
 1188              	TEMP:
 1189 35bc 47F8046D 		_PUSH
 1190 35c0 04F12406 		ADD	TOS,UP,#TMP
 1191 35c4 FFF786BB 		_NEXT
 1192              	
 1193              	/*******************************************
 1194              	    SPAN	( -- a )
 1195              	 	Hold character count received by EXPECT.
 1196              	********************************************/
 1197 35c8 A8350000 		_HEADER SPAN,4,"SPAN"
 1197      04535041 
 1197      4E0000BF 
 1198 35d4 47F8046D 		_PUSH
 1199 35d8 04F12806 		ADD	TOS,UP,#CSPAN
 1200 35dc FFF77ABB 		_NEXT
ARM GAS  forth.s 			page 129


 1201              	
 1202              	/***********************************************************
 1203              	    >IN	 ( -- a )
 1204              	 	Hold the character pointer while parsing input stream.
 1205              	***********************************************************/
 1206 35e0 CC350000 		_HEADER INN,3,">IN"
 1206      033E494E 
 1207 35e8 47F8046D 		_PUSH
 1208 35ec 04F12C06 		ADD	TOS,UP,#TOIN
 1209 35f0 FFF770BB 		_NEXT
 1210              	
 1211              	/**************************************
 1212              	    #TIB	( -- a )
 1213              	 	Hold the current count and address 
 1214              		of the terminal input buffer.
 1215              	**************************************/
 1216 35f4 E4350000 		_HEADER NTIB,4,"#TIB"
 1216      04235449 
 1216      420000BF 
 1217 3600 47F8046D 		_PUSH
 1218 3604 04F13006 		ADD	TOS,UP,#NTIBB
 1219 3608 FFF764BB 		_NEXT
 1220              	
 1221              	/******************************
 1222              	    'EVAL	( -- a )
 1223              	 	Execution vector of EVAL.
 1224              	*******************************/
 1225 360c F8350000 		_HEADER TEVAL,5,"'EVAL"
 1225      05274556 
 1225      414C00BF 
 1226 3618 47F8046D 		_PUSH
 1227 361c 04F13806 		ADD	TOS,UP,#EVAL
 1228 3620 FFF758BB 		_NEXT
 1229              	
 1230              	/*********************************
 1231              	    HLD	 ( -- a )
 1232              	 	Hold a pointer in building a 
 1233              		numeric output string.
 1234              	*********************************/
 1235 3624 10360000 		_HEADER HLD,3,"HLD"
 1235      03484C44 
 1236 362c 47F8046D 		_PUSH
 1237 3630 04F13C06 		ADD	TOS,UP,#VHOLD
 1238 3634 FFF74EBB 		_NEXT
 1239              	
 1240              	/**********************************
 1241              	    CONTEXT	( -- a )
 1242              	 	A area to specify vocabulary 
 1243              		search order.
 1244              	**********************************/
 1245 3638 28360000 		_HEADER CNTXT,7,"CONTEXT"
 1245      07434F4E 
 1245      54455854 
 1246              	CRRNT:
 1247 3644 47F8046D 		_PUSH
 1248 3648 04F14006 		ADD	TOS,UP,#CTXT
 1249 364c FFF742BB 		_NEXT
ARM GAS  forth.s 			page 130


 1250              	
 1251              	/******************************
 1252              	    CP	( -- a )
 1253              	 	Point to top free area  
 1254              		in user RAM. 
 1255              	******************************/
 1256 3650 3C360000 		_HEADER CPP,2,"CP"
 1256      02435000 
 1257 3658 47F8046D 		_PUSH
 1258 365c 04F14806 		ADD	TOS,UP,#USER_CTOP
 1259 3660 FFF738BB 		_NEXT
 1260              	
 1261              	/****************************
 1262              	   FCP ( -- a )
 1263              	  Point ot top of Forth 
 1264              	  system dictionary
 1265              	****************************/
 1266 3664 54360000 		_HEADER FCP,3,"FCP"
 1266      03464350 
 1267 366c 47F8046D 		_PUSH 
 1268 3670 04F14406 		ADD TOS,UP,#FORTH_CTOP 
 1269 3674 FFF72EBB 		_NEXT 
 1270              	
 1271              	/***************************
 1272              	    LAST	( -- a )
 1273              	 	Point to the last name 
 1274              		in the dictionary.
 1275              	***************************/
 1276 3678 68360000 		_HEADER LAST,4,"LAST"
 1276      044C4153 
 1276      540000BF 
 1277 3684 47F8046D 		_PUSH
 1278 3688 04F14C06 		ADD	TOS,UP,#LASTN
 1279 368c FFF722BB 		_NEXT
 1280              	
 1281              	
 1282              	/***********************
 1283              		system constants 
 1284              	***********************/
 1285              	
 1286              	/********************************
 1287              		USER-BEGIN ( -- a )
 1288              	  where user area begin in RAM
 1289              	********************************/
 1290 3690 7C360000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1290      0A555345 
 1290      522D4245 
 1290      47494E00 
 1291 36a0 47F8046D 		_PUSH 
 1292 36a4 DFF80460 		ldr TOS,USR_BGN_ADR 
 1293 36a8 FFF714BB 		_NEXT 
 1294              	USR_BGN_ADR:
 1295 36ac 12050020 	.word  DTOP 
 1296              	
 1297              	/*********************************
 1298              	  USER_END ( -- a )
 1299              	  where user area end in RAM 
ARM GAS  forth.s 			page 131


 1300              	******************************/
 1301 36b0 94360000 		_HEADER USER_END,8,"USER-END"
 1301      08555345 
 1301      522D454E 
 1301      440000BF 
 1302 36c0 47F8046D 		_PUSH 
 1303 36c4 DFF80460 		ldr TOS,USER_END_ADR 
 1304 36c8 FFF704BB 		_NEXT 
 1305              	USER_END_ADR:
 1306 36cc 7C800120 		.word DEND 
 1307              	
 1308              	
 1309              	/* *********************
 1310              	  Common functions
 1311              	***********************/
 1312              	
 1313              	/********************************
 1314              	    WITHIN	( u ul uh -- t )
 1315              	 	Return true if u is within 
 1316              		the range of ul and uh.
 1317              	********************************/
 1318 36d0 B4360000 		_HEADER WITHI,6,"WITHIN"
 1318      06574954 
 1318      48494E00 
 1319 36dc 504700BF 		_NEST
 1320 36e0 B1300000 		_ADR	OVER
 1321 36e4 61310000 		_ADR	SUBB
 1322 36e8 09300000 		_ADR	TOR
 1323 36ec 61310000 		_ADR	SUBB
 1324 36f0 C52F0000 		_ADR	RFROM
 1325 36f4 11340000 		_ADR	ULESS
 1326 36f8 DB2C0000 		_UNNEST
 1327              	
 1328              	//  Divide
 1329              	
 1330              	/*************************************
 1331              	    UM/MOD	( udl udh u -- ur uq )
 1332              	 	Unsigned divide of a double by a 
 1333              		single. Return mod and quotient.
 1334              	**************************************/
 1335 36fc D4360000 		_HEADER UMMOD,6,"UM/MOD"
 1335      06554D2F 
 1335      4D4F4400 
 1336 3708 4FF00103 		MOV	T3,#1
 1337 370c 57F8045B 		LDR	WP,[DSP],#4
 1338 3710 3A68     		LDR	T2,[DSP]
 1339              	UMMOD0:
 1340 3712 9218     		ADDS	T2,T2,T2
 1341 3714 6D41     		ADCS	WP,WP,WP
 1342 3716 04D3     		BCC	UMMOD1
 1343 3718 A5EB0605 		SUB	WP,WP,TOS
 1344 371c 02F10102 		ADD	T2,T2,#1
 1345 3720 04E0     		B UMMOD2
 1346              	UMMOD1:
 1347 3722 AD1B     		SUBS	WP,WP,TOS 
 1348 3724 28BF     		IT CS 
 1349 3726 0132     		ADDCS	T2,T2,#1
ARM GAS  forth.s 			page 132


 1350 3728 00D2     		BCS	UMMOD2
 1351 372a 3544     		ADD	WP,WP,TOS
 1352              	UMMOD2:
 1353 372c DB18     		ADDS	T3,T3,T3
 1354 372e F0D3     		BCC	UMMOD0
 1355 3730 1646     		MOV	TOS,T2
 1356 3732 3D60     		STR	WP,[DSP]
 1357 3734 FFF7CEBA 		_NEXT
 1358              	
 1359              	/****************************
 1360              	    M/MOD	( d n -- r q )
 1361              	 	Signed floored divide 
 1362              		of double by single. 
 1363              		Return mod and quotient.
 1364              	****************************/
 1365 3738 00370000 		_HEADER MSMOD,5,"M/MOD"
 1365      054D2F4D 
 1365      4F4400BF 
 1366 3744 504700BF 		_NEST
 1367 3748 8D300000 		_ADR	DUPP
 1368 374c C1300000 		_ADR	ZLESS
 1369 3750 8D300000 		_ADR	DUPP
 1370 3754 09300000 		_ADR	TOR
 1371 3758 3F2F0000 		_QBRAN MMOD1
 1371      70370000 
 1372 3760 71330000 		_ADR	NEGAT
 1373 3764 09300000 		_ADR	TOR
 1374 3768 01350000 		_ADR	DNEGA
 1375 376c C52F0000 		_ADR	RFROM
 1376              	MMOD1:
 1377 3770 09300000 		_ADR	TOR
 1378 3774 8D300000 		_ADR	DUPP
 1379 3778 C1300000 		_ADR	ZLESS
 1380 377c 3F2F0000 		_QBRAN MMOD2
 1380      8C370000 
 1381 3784 F52F0000 		_ADR	RAT
 1382 3788 51310000 		_ADR	PLUS
 1383              	MMOD2:
 1384 378c C52F0000 		_ADR	RFROM
 1385 3790 09370000 		_ADR	UMMOD
 1386 3794 C52F0000 		_ADR	RFROM
 1387 3798 3F2F0000 		_QBRAN	MMOD3
 1387      AC370000 
 1388 37a0 9D300000 		_ADR	SWAP
 1389 37a4 71330000 		_ADR	NEGAT
 1390 37a8 9D300000 		_ADR	SWAP
 1391              	MMOD3:   
 1392 37ac DB2C0000 		_UNNEST
 1393              	
 1394              	/****************************
 1395              		S>D ( n -- d )
 1396              		convert single to double 
 1397              	*****************************/
 1398 37b0 3C370000 		_HEADER STOD,3,"S>D"
 1398      03533E44 
 1399 37b8 47F8046D 		_PUSH 
 1400 37bc 4FEAE676 		ASR TOS,#31
ARM GAS  forth.s 			page 133


 1401 37c0 FFF788BA 		_NEXT 
 1402              	
 1403              	/****************************
 1404              		D2* ( d -- d<<1 )
 1405              		double * 2 
 1406              	***************************/
 1407 37c4 B4370000 		_HEADER D2STAR,3,"D2*"
 1407      0344322A 
 1408 37cc 3868     		ldr T0,[DSP]
 1409 37ce 4000     		lsls T0,#1
 1410 37d0 3860     		str T0,[DSP]
 1411 37d2 4FEA4606 		lsl TOS,#1
 1412 37d6 46F10006 		adc TOS,#0
 1413 37da FFF77BBA 		_NEXT 
 1414              	
 1415              	/****************************
 1416              		D2/  ( d -- d>>1 )
 1417              		double signed divide by 2 
 1418              	*****************************/
 1419 37de C8370000 		_HEADER D2SL,3,"D2/"
 1419      0344322F 
 1419      00BF
 1420 37e8 3868     		ldr T0,[DSP]
 1421 37ea 7610     		asrs TOS,#1
 1422 37ec 4FEA3000 		rrx T0,T0 
 1423 37f0 3860     		str T0,[DSP]
 1424 37f2 FFF76FBA 		_NEXT 
 1425              	
 1426              	/***************************
 1427              		D/MOD  ( d+ n+ - r+ qd+ )
 1428              		unsigned double division
 1429              		and modulo 
 1430              		output:
 1431              			qd+ = d+ / n+
 1432              			r+ = qd+ - (d+ * n+ )
 1433              	***************************/
 1434 37f6 E2370000 		_HEADER DSLMOD,5,"D/MOD"
 1434      05442F4D 
 1434      4F44
 1435 3800 3D68     		ldr WP,[DSP]  // d+ high 
 1436 3802 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1437 3804 4FF02002 		mov T2,#32 // shift counter  
 1438 3808 81EA0101 		eor T1,T1 // quotient T0:T1  
 1439 380c 25B9     		cbnz WP,1f    
 1440 380e 82EA0202 		eor T2,T2 // nos shifting required 
 1441 3812 0546     		mov WP,T0 
 1442 3814 80EA0000 		eor T0,T0 
 1443 3818 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1444 381a 15F0004F 	    tst WP,#(1<<31) 
 1445 381e 06D1     		bne 2f
 1446 3820 4918     		adds T1,T1,T1 
 1447 3822 4041     		adcs T0,T0,T0 
 1448 3824 45EB0505 		adc WP,WP,WP 
 1449 3828 A2F10102 		sub T2,#1 
 1450 382c F4E7     		b 1b 
 1451 382e B5FBF6F3 	2:  udiv T3,WP,TOS
 1452 3832 41EA0301 		orr T1,T3   // append partial quotient 
ARM GAS  forth.s 			page 134


 1453 3836 06FB03F3 		mul T3,TOS
 1454 383a A5EB0305 		sub WP,T3 //remainder 
 1455 383e 02B1     		cbz T2,8f 
 1456 3840 EAE7     		b 1b 
 1457 3842 7D60     	8:	str WP,[DSP,#4] // remainder 
 1458 3844 3960     		str T1,[DSP]  // q lo 
 1459 3846 0646     		mov TOS,T0  // q hi 		
 1460 3848 FFF744BA 		_NEXT 
 1461              	
 1462              	
 1463              	/****************************
 1464              		D/  ( ud u -- udq )
 1465              		divide unsigned double 
 1466              		by unsigned single 
 1467              		return double quotient
 1468              		rounded to nearest integer 
 1469              	****************************/
 1470 384c FA370000 		_HEADER DSLASH,2,"D/"
 1470      02442F00 
 1471 3854 504700BF 		_NEST 
 1472 3858 8D300000 		_ADR DUPP 
 1473 385c FF2E0000 		_DOLIT 1 
 1473      01000000 
 1474 3864 29310000 		_ADR RSHIFT 
 1475 3868 09300000 		_ADR TOR 
 1476 386c 01380000 		_ADR DSLMOD 
 1477 3870 75320000 		_ADR ROT 
 1478 3874 C52F0000 		_ADR RFROM 
 1479 3878 59340000 		_ADR GREAT 
 1480 387c 3F2F0000 		_QBRAN 9f
 1480      94380000 
 1481 3884 FF2E0000 		_DOLIT 1 
 1481      01000000 
 1482 388c B9370000 		_ADR STOD 
 1483 3890 D9320000 		_ADR DPLUS 
 1484 3894 DB2C0000 	9:	_UNNEST 
 1485              	
 1486              	
 1487              	/****************************
 1488              		D* ( d s -- d )
 1489              	    multiply a double 
 1490              		by a single 
 1491              	****************************/
 1492 3898 50380000 		_HEADER DSTAR,2,"D*"
 1492      02442A00 
 1493              	/*
 1494              		_NEST 
 1495              		_ADR NROT 
 1496              		_ADR DUPP 
 1497              		_ADR TOR 
 1498              		_ADR DABS
 1499              		_ADR SWAP  
 1500              		_ADR ROT   
 1501              		_ADR DUPP
 1502              		_ADR TOR
 1503              		_ADR MSTAR
 1504              		_ADR ROT
ARM GAS  forth.s 			page 135


 1505              		_ADR RFROM 
 1506              		_ADR STAR 
 1507              		_ADR PLUS
 1508              		_ADR RFROM 
 1509              		_ADR ZLESS 
 1510              		_QBRAN 9f
 1511              		_ADR DNEGA   
 1512              	9:	_UNNEST 
 1513              	*/
 1514 38a0 57F8040B 		ldr T0,[DSP],#4
 1515 38a4 3968     		ldr T1,[DSP]
 1516 38a6 3860     		str T0,[DSP] 
 1517 38a8 83EA0303 		eor T3,T3 
 1518 38ac 10F0004F 		tst T0,#(1<<31)
 1519 38b0 02D0     		beq 1f 
 1520              		// DNEGATE 
 1521 38b2 591A     		subs T1,T3,T1  
 1522 38b4 63EB0000 		sbc T0,T3,T0 
 1523 38b8 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1524 38bc 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1525 38c0 0E44     		add TOS,T1  // TOS:T2 product  
 1526 38c2 3868     		ldr r0,[DSP]
 1527 38c4 10F0004F 		tst T0,#(1<<31)
 1528 38c8 02D0     		beq 2f 
 1529              		// DNEGATE product 
 1530 38ca 9A1A     		subs T2,T3,T2  
 1531 38cc 63EB0606 		sbc TOS,T3,TOS 
 1532 38d0 3A60     	2:  str T2,[DSP]
 1533 38d2 FFF7FFB9 		_NEXT 
 1534              	
 1535              	
 1536              	/****************************
 1537              	   /MOD	( n n -- r q )
 1538              		Signed divide. Return
 1539              		mod and quotient.
 1540              	****************************/
 1541 38d6 9C380000 		_HEADER SLMOD,4,"/MOD"
 1541      042F4D4F 
 1541      4400
 1542 38e0 504700BF 		_NEST
 1543 38e4 B1300000 		_ADR	OVER
 1544 38e8 C1300000 		_ADR	ZLESS
 1545 38ec 9D300000 		_ADR	SWAP
 1546 38f0 45370000 		_ADR	MSMOD
 1547 38f4 DB2C0000 		_UNNEST
 1548              	
 1549              	/**************************
 1550              	    MOD	 ( n n -- r )
 1551              	 	Signed divide. Return
 1552              		mod only.
 1553              	**************************/
 1554 38f8 DA380000 		_HEADER MODD,3,"MOD"
 1554      034D4F44 
 1555 3900 504700BF 		_NEST
 1556 3904 E1380000 		_ADR	SLMOD
 1557 3908 7D300000 		_ADR	DROP
 1558 390c DB2C0000 		_UNNEST
ARM GAS  forth.s 			page 136


 1559              	
 1560              	/*************************
 1561              	    /	   ( n n -- q )
 1562              	 	Signed divide. Return
 1563              		quotient only.
 1564              	**************************/
 1565 3910 FC380000 		_HEADER SLASH,1,"/"
 1565      012F00BF 
 1566 3918 504700BF 		_NEST
 1567 391c E1380000 		_ADR	SLMOD
 1568 3920 9D300000 		_ADR	SWAP
 1569 3924 7D300000 		_ADR	DROP
 1570 3928 DB2C0000 		_UNNEST
 1571              	
 1572              	//******************************
 1573              	//   */MOD	( n1 n2 n3 -- r q )
 1574              	/*   Multiply n1 and n2, then 
 1575              	   divide by n3. Return 
 1576              	   mod and quotient.
 1577              	******************************/
 1578 392c 14390000 		_HEADER SSMOD,5,"*/MOD"
 1578      052A2F4D 
 1578      4F4400BF 
 1579 3938 504700BF 		_NEST
 1580 393c 09300000 		_ADR	TOR
 1581 3940 99310000 		_ADR	MSTAR
 1582 3944 C52F0000 		_ADR	RFROM
 1583 3948 45370000 		_ADR	MSMOD
 1584 394c DB2C0000 		_UNNEST
 1585              	
 1586              	//*******************************
 1587              	//  */ ( n1 n2 n3 -- q )
 1588              	/* 	Multiply n1 by n2, then 
 1589              		divide by n3. Return quotient
 1590              		only.
 1591              	*******************************/
 1592 3950 30390000 		_HEADER STASL,2,"*/"
 1592      022A2F00 
 1593 3958 504700BF 		_NEST
 1594 395c 39390000 		_ADR	SSMOD
 1595 3960 9D300000 		_ADR	SWAP
 1596 3964 7D300000 		_ADR	DROP
 1597 3968 DB2C0000 		_UNNEST
 1598              	
 1599              	/*******************
 1600              	  Miscellaneous
 1601              	*******************/
 1602              	
 1603              	/*************************
 1604              	    ALIGNED	( b -- a )
 1605              	 	Align address to the 
 1606              		cell boundary.
 1607              	**************************/
 1608 396c 54390000 		_HEADER ALGND,7,"ALIGNED"
 1608      07414C49 
 1608      474E4544 
 1609 3978 06F10306 		ADD	TOS,TOS,#3
ARM GAS  forth.s 			page 137


 1610 397c 6FF00305 		MVN	WP,#3
 1611 3980 06EA0506 		AND	TOS,TOS,WP
 1612 3984 FFF7A6B9 		_NEXT
 1613              	
 1614              	/****************************
 1615              	    >CHAR	( c -- c )
 1616              	 	Filter non-printing 
 1617              		characters.
 1618              	****************************/
 1619 3988 70390000 		_HEADER TCHAR,5,">CHAR"
 1619      053E4348 
 1619      415200BF 
 1620 3994 504700BF 		_NEST
 1621 3998 FF2E0000 		_DOLIT  0x7F
 1621      7F000000 
 1622 39a0 D1300000 		_ADR	ANDD
 1623 39a4 8D300000 		_ADR	DUPP	// mask msb
 1624 39a8 0D320000 		_ADR	BLANK
 1625 39ac FF2E0000 		_DOLIT 	127
 1625      7F000000 
 1626 39b4 DD360000 		_ADR	WITHI	// check for printable
 1627 39b8 5D330000 		_ADR	INVER
 1628 39bc 3F2F0000 		_QBRAN	TCHA1
 1628      D0390000 
 1629 39c4 7D300000 		_ADR	DROP
 1630 39c8 FF2E0000 		_DOLIT 	'_'	// replace non-printables
 1630      5F000000 
 1631              	TCHA1:
 1632 39d0 DB2C0000 		  _UNNEST
 1633              	
 1634              	/************************
 1635              	    DEPTH	( -- n )
 1636              	 	Return the depth of
 1637              		the data stack.
 1638              	***********************/
 1639 39d4 8C390000 		_HEADER DEPTH,5,"DEPTH"
 1639      05444550 
 1639      544800BF 
 1640 39e0 4FF68062 		_MOV32 T2,SPP 
 1640      C2F20102 
 1641 39e8 A2EB0702 		SUB	T2,T2,DSP
 1642 39ec 47F8046D 		_PUSH
 1643 39f0 4FEAA206 		ASR	TOS,T2,#2
 1644 39f4 FFF76EB9 		_NEXT
 1645              	
 1646              	/*****************************
 1647              	    PICK	( ... +n -- ... w )
 1648              	 	Copy the nth stack item 
 1649              		to tos.
 1650              	******************************/
 1651 39f8 D8390000 		_HEADER PICK,4,"PICK"
 1651      04504943 
 1651      4B0000BF 
 1652 3a04 504700BF 		_NEST
 1653 3a08 AD310000 		_ADR	ONEP
 1654 3a0c 21320000 		_ADR	CELLS
 1655 3a10 59300000 		_ADR	SPAT
ARM GAS  forth.s 			page 138


 1656 3a14 51310000 		_ADR	PLUS
 1657 3a18 992F0000 		_ADR	AT
 1658 3a1c DB2C0000 		_UNNEST
 1659              	
 1660              	/*********************
 1661              	  Memory access
 1662              	*********************/
 1663              	
 1664              	/*************************
 1665              	    HERE	( -- a )
 1666              	 	Return the top of
 1667              		the code dictionary.
 1668              	*************************/
 1669 3a20 FC390000 		_HEADER HERE,4,"HERE"
 1669      04484552 
 1669      450000BF 
 1670 3a2c 504700BF 		_NEST
 1671 3a30 59360000 		_ADR	CPP
 1672 3a34 992F0000 		_ADR	AT
 1673 3a38 DB2C0000 		_UNNEST
 1674              	
 1675              	/***************************	
 1676              	    PAD	 ( -- a )
 1677              	 	Return the address of 
 1678              		a temporary buffer.
 1679              	***************************/
 1680 3a3c 243A0000 		_HEADER PAD,3,"PAD"
 1680      03504144 
 1681 3a44 504700BF 		_NEST
 1682 3a48 2D3A0000 		_ADR	HERE
 1683 3a4c FF2E0000 		_DOLIT 80
 1683      50000000 
 1684 3a54 51310000 		_ADR PLUS 
 1685 3a58 DB2C0000 		_UNNEST
 1686              	
 1687              	/***********************
 1688              	    TIB	 ( -- a )
 1689              	 	Return the address 
 1690              		of the terminal 
 1691              		input buffer.
 1692              	************************/
 1693 3a5c 403A0000 		_HEADER TIB,3,"TIB"
 1693      03544942 
 1694 3a64 47F8046D 		_PUSH
 1695 3a68 666B     		ldr TOS,[UP,#TIBUF]
 1696 3a6a FFF733B9 		_NEXT
 1697              	
 1698              	/*************************
 1699              	    @EXECUTE	( a -- )
 1700              	 	Execute vector stored
 1701              		in address a.
 1702              	*************************/
 1703 3a6e 603A0000 		_HEADER ATEXE,8,"@EXECUTE"
 1703      08404558 
 1703      45435554 
 1703      4500
 1704 3a7c 3500     		MOVS	WP,TOS
ARM GAS  forth.s 			page 139


 1705 3a7e 57F8046B 		_POP
 1706 3a82 2D68     		LDR	WP,[WP]
 1707 3a84 45F00105 		ORR	WP,WP,#1
 1708 3a88 18BF     	    IT NE 
 1709 3a8a 2847     		BXNE	WP
 1710 3a8c FFF722B9 		_NEXT
 1711              	
 1712              	/*******************************
 1713              	    CMOVE	( b1 b2 u -- )
 1714              	 	Copy u bytes from b1 to b2.
 1715              	********************************/
 1716 3a90 723A0000 		_HEADER CMOVE,5,"CMOVE"
 1716      05434D4F 
 1716      564500BF 
 1717 3a9c 57F8042B 		LDR	T2,[DSP],#4
 1718 3aa0 57F8043B 		LDR	T3,[DSP],#4
 1719 3aa4 03E0     		B CMOV1
 1720              	CMOV0:
 1721 3aa6 13F8015B 		LDRB	WP,[T3],#1
 1722 3aaa 02F8015B 		STRB	WP,[T2],#1
 1723              	CMOV1:
 1724 3aae 3600     		MOVS	TOS,TOS
 1725 3ab0 02D0     		BEQ	CMOV2
 1726 3ab2 A6F10106 		SUB	TOS,TOS,#1
 1727 3ab6 F6E7     		B CMOV0
 1728              	CMOV2:
 1729 3ab8 57F8046B 		_POP
 1730 3abc FFF70AB9 		_NEXT
 1731              	
 1732              	/***************************
 1733              	    MOVE	( a1 a2 u -- )
 1734              	 	Copy u words from a1 to a2.
 1735              	*******************************/
 1736 3ac0 943A0000 		_HEADER MOVE,4,"MOVE"
 1736      044D4F56 
 1736      450000BF 
 1737 3acc 4FF00400 		MOV T0,#4 
 1738 3ad0 06F10306 		ADD TOS,#3 
 1739 3ad4 26F00306 		BIC TOS,#3
 1740 3ad8 57F8041B 		LDR	T1,[DSP],#4 // dest
 1741 3adc 57F8042B 		LDR	T2,[DSP],#4 // src 
 1742 3ae0 8A42     		CMP T2,T1 
 1743 3ae2 08D5     		BPL MOVE1
 1744 3ae4 6FF00300 		MOV T0,#-4 
 1745 3ae8 3144     		ADD T1,TOS
 1746 3aea 3244     		ADD T2,TOS 
 1747 3aec 01E0     		B MOVE3
 1748              	MOVE0:
 1749 3aee 1568     		LDR	WP,[T2]
 1750 3af0 0D60     		STR	WP,[T1]
 1751              	MOVE3: 
 1752 3af2 0144     		ADD T1,T0 
 1753 3af4 0244     		ADD T2,T0 
 1754              	MOVE1:
 1755 3af6 3600     		MOVS TOS,TOS
 1756 3af8 02D0     		BEQ	MOVE2
 1757 3afa A6F10406 		SUB	TOS,TOS,#4
ARM GAS  forth.s 			page 140


 1758 3afe F6E7     		B MOVE0
 1759              	MOVE2:
 1760 3b00 57F8046B 		_POP
 1761 3b04 FFF7E6B8 		_NEXT
 1762              	
 1763              	/**************************
 1764              	    FILL	( b u c -- )
 1765              	 	Fill u bytes of character
 1766              		c to area beginning at b.
 1767              	******************************/
 1768 3b08 C43A0000 		_HEADER FILL,4,"FILL"
 1768      0446494C 
 1768      4C0000BF 
 1769 3b14 03CF     		LDMFD DSP!,{T0,T1} 
 1770 3b16 0000     		MOVS T0,T0 
 1771 3b18 03D0     		BEQ FILL2
 1772              	FILL1:
 1773 3b1a 01F8016B 		STRB	TOS,[T1],#1
 1774 3b1e 0138     		SUBS	T0,T0,#1
 1775 3b20 FBD1     		BNE FILL1
 1776              	FILL2:
 1777 3b22 57F8046B 		_POP
 1778 3b26 FFF7D5B8 		_NEXT
 1779              	
 1780              	/*****************************
 1781              	    PACK$	( b u a -- a )
 1782              	 	Build a counted word with
 1783              		u characters from b. 
 1784              		Null fill.
 1785              	*****************************/
 1786 3b2a 0C3B0000 		_HEADER PACKS,5,"PACK$"
 1786      05504143 
 1786      4B24
 1787 3b34 504700BF 		_NEST
 1788 3b38 79390000 		_ADR	ALGND
 1789 3b3c 8D300000 		_ADR	DUPP
 1790 3b40 09300000 		_ADR	TOR		// strings only on cell boundary
 1791 3b44 B1300000 		_ADR	OVER
 1792 3b48 51310000 		_ADR	PLUS
 1793 3b4c AD310000 		_ADR	ONEP 
 1794 3b50 FF2E0000 		_DOLIT 	0xFFFFFFFC
 1794      FCFFFFFF 
 1795 3b58 D1300000 		_ADR	ANDD			// count mod cell
 1796 3b5c FF2E0000 		_DOLIT 	0
 1796      00000000 
 1797 3b64 9D300000 		_ADR	SWAP
 1798 3b68 852F0000 		_ADR	STORE			// null fill cell
 1799 3b6c F52F0000 		_ADR	RAT
 1800 3b70 C5320000 		_ADR	DDUP
 1801 3b74 A52F0000 		_ADR	CSTOR
 1802 3b78 AD310000 		_ADR	ONEP			// save count
 1803 3b7c 9D300000 		_ADR	SWAP
 1804 3b80 9D3A0000 		_ADR	CMOVE
 1805 3b84 C52F0000 		_ADR	RFROM
 1806 3b88 DB2C0000 		_UNNEST   			// move string
 1807              	
 1808              	/***********************************
ARM GAS  forth.s 			page 141


 1809              	  Numeric output, single precision
 1810              	***********************************/
 1811              	
 1812              	/**************************
 1813              	    DIGIT	( u -- c )
 1814              	 	Convert digit u to 
 1815              		a character.
 1816              	***************************/
 1817 3b8c 2E3B0000 		_HEADER DIGIT,5,"DIGIT"
 1817      05444947 
 1817      495400BF 
 1818 3b98 504700BF 		_NEST
 1819 3b9c FF2E0000 		_DOLIT 9
 1819      09000000 
 1820 3ba4 B1300000 		_ADR	OVER
 1821 3ba8 29340000 		_ADR	LESS
 1822 3bac FF2E0000 		_DOLIT	7
 1822      07000000 
 1823 3bb4 D1300000 		_ADR	ANDD
 1824 3bb8 51310000 		_ADR	PLUS
 1825 3bbc FF2E0000 		_DOLIT	'0'
 1825      30000000 
 1826 3bc4 51310000 		_ADR	PLUS 
 1827 3bc8 DB2C0000 		_UNNEST
 1828              	
 1829              	/*********************************
 1830              	    EXTRACT	( ud base -- ud c )
 1831              	 	Extract the least significant
 1832              		digit from positive double.
 1833              	**********************************/
 1834 3bcc 903B0000 		_HEADER EXTRC,7,"EXTRACT"
 1834      07455854 
 1834      52414354 
 1835 3bd8 504700BF 		_NEST
 1836 3bdc 01380000 		_ADR	DSLMOD
 1837 3be0 75320000 		_ADR	ROT
 1838 3be4 993B0000 		_ADR	DIGIT
 1839 3be8 DB2C0000 		_UNNEST
 1840              	
 1841              	/***************************
 1842              	    <#	  ( -- )
 1843              	 	Initiate the numeric
 1844              		output process.
 1845              	****************************/
 1846 3bec D03B0000 		_HEADER BDIGS,2,"<#"
 1846      023C2300 
 1847 3bf4 504700BF 		_NEST
 1848 3bf8 453A0000 		_ADR	PAD
 1849 3bfc 2D360000 		_ADR	HLD
 1850 3c00 852F0000 		_ADR	STORE
 1851 3c04 DB2C0000 		_UNNEST
 1852              	
 1853              	/*********************************
 1854              	    HOLD	( c -- )
 1855              	 	Insert a character into the 
 1856              		numeric output string.
 1857              	**********************************/
ARM GAS  forth.s 			page 142


 1858 3c08 F03B0000 		_HEADER HOLD,4,"HOLD"
 1858      04484F4C 
 1858      440000BF 
 1859 3c14 504700BF 		_NEST
 1860 3c18 2D360000 		_ADR	HLD
 1861 3c1c 992F0000 		_ADR	AT
 1862 3c20 BD310000 		_ADR	ONEM
 1863 3c24 8D300000 		_ADR	DUPP
 1864 3c28 2D360000 		_ADR	HLD
 1865 3c2c 852F0000 		_ADR	STORE
 1866 3c30 A52F0000 		_ADR	CSTOR
 1867 3c34 DB2C0000 		_UNNEST
 1868              	
 1869              	/***********************
 1870              	    #	   ( ud -- ud )
 1871              	 	Extract one digit 
 1872              		from ud and append 
 1873              		the digit to output 
 1874              		string.
 1875              	*************************/
 1876 3c38 0C3C0000 		_HEADER DIG,1,"#"
 1876      012300BF 
 1877 3c40 504700BF 		_NEST
 1878 3c44 99350000 		_ADR	BASE
 1879 3c48 992F0000 		_ADR	AT
 1880 3c4c D93B0000 		_ADR	EXTRC
 1881 3c50 153C0000 		_ADR	HOLD
 1882 3c54 DB2C0000 		_UNNEST
 1883              	
 1884              	/***************************
 1885              	    #S	  ( ud -- 0 )
 1886              	 	Convert ud until all 
 1887              		digits are added to 
 1888              		the output string.
 1889              	***************************/
 1890 3c58 3C3C0000 		_HEADER DIGS,2,"#S"
 1890      02235300 
 1891 3c60 504700BF 		_NEST
 1892              	DIGS1:
 1893 3c64 413C0000 	    _ADR	DIG
 1894 3c68 C5320000 		_ADR	DDUP
 1895 3c6c E5300000 		_ADR    ORR 
 1896 3c70 3F2F0000 		_QBRAN 	DIGS2
 1896      803C0000 
 1897 3c78 672F0000 		_BRAN	DIGS1
 1897      643C0000 
 1898              	DIGS2:
 1899 3c80 7D300000 		 _ADR DROP 
 1900 3c84 DB2C0000 		 _UNNEST
 1901              	
 1902              	/*********************
 1903              	    SIGN	( n -- )
 1904              	 	Add a minus sign
 1905              		to the numeric
 1906              		output string.
 1907              	*********************/
 1908 3c88 5C3C0000 		_HEADER SIGN,4,"SIGN"
ARM GAS  forth.s 			page 143


 1908      04534947 
 1908      4E0000BF 
 1909 3c94 504700BF 		_NEST
 1910 3c98 C1300000 		_ADR	ZLESS
 1911 3c9c 3F2F0000 		_QBRAN	SIGN1
 1911      B03C0000 
 1912 3ca4 FF2E0000 		_DOLIT '-'
 1912      2D000000 
 1913 3cac 153C0000 		_ADR	HOLD
 1914              	SIGN1:
 1915 3cb0 DB2C0000 		  _UNNEST
 1916              	
 1917              	/*************************
 1918              	    #>  ( w -- b u )
 1919              	 	Prepare the output 
 1920              		word to be TYPE'd.
 1921              	************************/
 1922 3cb4 8C3C0000 		_HEADER EDIGS,2,"#>"
 1922      02233E00 
 1923 3cbc 504700BF 		_NEST
 1924 3cc0 7D300000 		_ADR	DROP
 1925 3cc4 2D360000 		_ADR	HLD
 1926 3cc8 992F0000 		_ADR	AT
 1927 3ccc 453A0000 		_ADR	PAD
 1928 3cd0 B1300000 		_ADR	OVER
 1929 3cd4 61310000 		_ADR	SUBB
 1930 3cd8 DB2C0000 		_UNNEST
 1931              	
 1932              	/**************************
 1933              	    str	 ( n -- b u )
 1934              	 	Convert a signed 
 1935              		integer to a numeric 
 1936              		string.
 1937              	hidden word used by compiler
 1938              	***************************/
 1939              	STRR:
 1940 3cdc 504700BF 		_NEST
 1941 3ce0 B9370000 		_ADR 	STOD 
 1942 3ce4 8D300000 		_ADR	DUPP
 1943 3ce8 09300000 		_ADR	TOR
 1944 3cec F9320000 		_ADR	DABS
 1945 3cf0 F53B0000 		_ADR	BDIGS
 1946 3cf4 613C0000 		_ADR	DIGS
 1947 3cf8 C52F0000 		_ADR	RFROM
 1948 3cfc 953C0000 		_ADR	SIGN
 1949 3d00 BD3C0000 		_ADR	EDIGS
 1950 3d04 DB2C0000 		_UNNEST
 1951              	
 1952              	/*************************
 1953              	    HEX	 ( -- )
 1954              	 	Use radix 16 as 
 1955              		base for numeric 
 1956              		conversions.
 1957              	*************************/
 1958 3d08 B83C0000 		_HEADER HEX,3,"HEX"
 1958      03484558 
 1959 3d10 504700BF 		_NEST
ARM GAS  forth.s 			page 144


 1960 3d14 FF2E0000 		_DOLIT 16
 1960      10000000 
 1961 3d1c 99350000 		_ADR	BASE
 1962 3d20 852F0000 		_ADR	STORE
 1963 3d24 DB2C0000 		_UNNEST
 1964              	
 1965              	/**************************
 1966              		BIN ( -- )
 1967              		Use radix 2 as 
 1968              		base for numeric 
 1969              		conversion 
 1970              	**************************/
 1971 3d28 0C3D0000 		_HEADER BIN,3,"BIN"
 1971      0342494E 
 1972 3d30 504700BF 		_NEST 
 1973 3d34 FF2E0000 		_DOLIT 2 
 1973      02000000 
 1974 3d3c 99350000 		_ADR BASE 
 1975 3d40 852F0000 		_ADR STORE
 1976 3d44 DB2C0000 		_UNNEST 
 1977              	
 1978              	/************************
 1979              	    DECIMAL	( -- )
 1980              	 	Use radix 10 as base
 1981              		for numeric conversions.
 1982              	*************************/
 1983 3d48 2C3D0000 		_HEADER DECIM,7,"DECIMAL"
 1983      07444543 
 1983      494D414C 
 1984 3d54 504700BF 		_NEST
 1985 3d58 FF2E0000 		_DOLIT 10
 1985      0A000000 
 1986 3d60 99350000 		_ADR	BASE
 1987 3d64 852F0000 		_ADR	STORE
 1988 3d68 DB2C0000 		_UNNEST
 1989              	
 1990              	/************************************
 1991              	  Numeric input, single precision
 1992              	***********************************/
 1993              	
 1994              	/***********************************
 1995              	    DIGIT?	( c base -- u t )
 1996              	 	Convert a character to its 
 1997              		numeric value. A flag 
 1998              		indicates success.
 1999              	**********************************/
 2000 3d6c 4C3D0000 		_HEADER DIGTQ,6,"DIGIT?"
 2000      06444947 
 2000      49543F00 
 2001 3d78 504700BF 		_NEST
 2002 3d7c 09300000 		_ADR	TOR
 2003 3d80 FF2E0000 		_DOLIT 	'0'
 2003      30000000 
 2004 3d88 61310000 		_ADR	SUBB
 2005 3d8c FF2E0000 		_DOLIT 9
 2005      09000000 
 2006 3d94 B1300000 		_ADR	OVER
ARM GAS  forth.s 			page 145


 2007 3d98 29340000 		_ADR	LESS
 2008 3d9c 3F2F0000 		_QBRAN	DGTQ1
 2008      C43D0000 
 2009 3da4 FF2E0000 		_DOLIT 7
 2009      07000000 
 2010 3dac 61310000 		_ADR	SUBB
 2011 3db0 8D300000 		_ADR	DUPP
 2012 3db4 FF2E0000 		_DOLIT	10
 2012      0A000000 
 2013 3dbc 29340000 		_ADR	LESS
 2014 3dc0 E5300000 		_ADR	ORR
 2015              	DGTQ1:
 2016 3dc4 8D300000 		_ADR	DUPP
 2017 3dc8 C52F0000 		_ADR	RFROM
 2018 3dcc 11340000 		_ADR	ULESS
 2019 3dd0 DB2C0000 		_UNNEST
 2020              	
 2021              	/***********************************
 2022              	 parse digits of positive integer 
 2023              	  d digits count 
 2024              	  n parsed integer
 2025              	  a+ updated pointer  
 2026              	************************************/
 2027              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 2028 3dd4 504700BF 	    _NEST
 2029 3dd8 99350000 	    _ADR BASE 
 2030 3ddc 992F0000 	    _ADR AT 
 2031 3de0 09300000 	    _ADR TOR
 2032 3de4 E5340000 	1:  _ADR COUNT 
 2033 3de8 F52F0000 	    _ADR RAT 
 2034 3dec 793D0000 	    _ADR DIGTQ // d n a c f 
 2035 3df0 3F2F0000 	    _QBRAN 4f
 2035      603E0000 
 2036 3df8 75320000 	    _ADR ROT 
 2037 3dfc F52F0000 		_ADR RAT 
 2038 3e00 85310000 	    _ADR UMSTA 
 2039 3e04 3F2F0000 		_QBRAN 2f // overflow control
 2039      143E0000 
 2040 3e0c 672F0000 		_BRAN 3f 
 2040      483E0000 
 2041 3e14 8D300000 	2:	_ADR DUPP 
 2042 3e18 C1300000 		_ADR ZLESS // if 0< is overflow 
 2043 3e1c 3F2F0000 		_QBRAN 2f 
 2043      2C3E0000 
 2044 3e24 672F0000 		_BRAN 3f 
 2044      483E0000 
 2045 3e2c 51310000 	2:  _ADR PLUS // d a n 
 2046 3e30 9D300000 	    _ADR SWAP // d n a  
 2047 3e34 75320000 	    _ADR ROT 
 2048 3e38 AD310000 	    _ADR ONEP 
 2049 3e3c 89320000 	    _ADR NROT
 2050 3e40 672F0000 	    _BRAN 1b 
 2050      E43D0000 
 2051 3e48 A9490000 	3:  _ABORQ 16, " number too big "
 2051      10206E75 
 2051      6D626572 
 2051      20746F6F 
ARM GAS  forth.s 			page 146


 2051      20626967 
 2052 3e60 7D300000 	4:  _ADR DROP 
 2053 3e64 BD310000 	    _ADR ONEM  // decrement a 
 2054 3e68 C52F0000 	    _ADR RFROM 
 2055 3e6c 7D300000 	    _ADR DROP 
 2056 3e70 DB2C0000 	    _UNNEST 
 2057              	
 2058              	/**************************
 2059              	 CHAR? 
 2060              	 check for charcter c 
 2061              	 move pointer if *a==c  
 2062              	**************************/
 2063              	CHARQ: // ( a c -- a+ t | a f )
 2064 3e74 3868     	    ldr T0,[DSP]
 2065 3e76 10F8011B 	    ldrb T1,[T0],#1 
 2066 3e7a 3246     	    mov T2,TOS 
 2067 3e7c 86EA0606 	    eor TOS,TOS
 2068 3e80 9142     	    cmp T1,T2
 2069 3e82 02D1     	    bne 1f 
 2070 3e84 3860     	    str T0,[DSP]
 2071 3e86 6FEA0606 	    mvn TOS,TOS  
 2072 3e8a FEF723BF 	1:  _NEXT
 2073              	
 2074              	/*********************************
 2075              	   NEG? ( a -- a|a+  f|t )
 2076              	   skip '-'|'+' return -1 if '-' 
 2077              	   else return 0 
 2078              	*********************************/
 2079              	NEGQ: 
 2080 3e8e 504700BF 	    _NEST 
 2081 3e92 FF2E0000 	    _DOLIT '-' 
 2081      2D000000 
 2082 3e9a 753E0000 	    _ADR CHARQ
 2083 3e9e 8D300000 	    _ADR DUPP  
 2084 3ea2 3F2F0000 	    _QBRAN 1f
 2084      B23E0000 
 2085 3eaa 672F0000 	    _BRAN 2f
 2085      CA3E0000 
 2086 3eb2 9D300000 	1:  _ADR SWAP 
 2087 3eb6 FF2E0000 	    _DOLIT '+'
 2087      2B000000 
 2088 3ebe 753E0000 	    _ADR CHARQ
 2089 3ec2 7D300000 	    _ADR DROP  
 2090 3ec6 9D300000 		_ADR SWAP 
 2091 3eca DB2C0000 	2:  _UNNEST 
 2092              	
 2093              	
 2094              	/**********************************
 2095              	    INT?	( a -- n T | a F )
 2096              	 	parse string  at 'a' for 
 2097              		integer. Push a flag on TOS.
 2098              		integer form:
 2099              			[-]hex_digit+  | 
 2100              			$[-]hex_digit+ |
 2101              			%[-]bin_digit+ | 
 2102              			[-]dec_digit+ 
 2103              	**********************************/
ARM GAS  forth.s 			page 147


 2104 3ece 703D0000 		_HEADER INTQ,4,"INT?"
 2104      04494E54 
 2104      3F00
 2105 3ed8 504700BF 		_NEST
 2106              	// save BASE 	
 2107 3edc 99350000 		_ADR	BASE
 2108 3ee0 992F0000 		_ADR	AT
 2109 3ee4 09300000 		_ADR	TOR
 2110 3ee8 FF2E0000 		_DOLIT	0      // a 0 
 2110      00000000 
 2111 3ef0 B1300000 		_ADR	OVER   // a 0 a 
 2112 3ef4 E5340000 		_ADR	COUNT  // a 0 a+ cnt 
 2113 3ef8 9D300000 		_ADR    SWAP   
 2114 3efc FF2E0000 		_DOLIT  '$' 
 2114      24000000 
 2115 3f04 753E0000 		_ADR    CHARQ 
 2116 3f08 3F2F0000 		_QBRAN  0f 
 2116      1C3F0000 
 2117              	// hexadecimal number 
 2118 3f10 113D0000 		_ADR    HEX
 2119 3f14 672F0000 		_BRAN   1f 
 2119      343F0000 
 2120 3f1c FF2E0000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2120      25000000 
 2121 3f24 753E0000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2122 3f28 3F2F0000 		_QBRAN  2f
 2122      403F0000 
 2123 3f30 313D0000 		_ADR	BIN 
 2124              	1:	// decrement cnt 
 2125 3f34 9D300000 	    _ADR	SWAP 
 2126 3f38 BD310000 		_ADR	ONEM 
 2127 3f3c 9D300000 		_ADR	SWAP  // -- a 0 cnt- a  
 2128              	2: // check if negative number 
 2129 3f40 8D300000 		_ADR    DUPP 
 2130 3f44 8F3E0000 		_ADR    NEGQ 
 2131 3f48 09300000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2132 3f4c 8D300000 		_ADR    DUPP 
 2133 3f50 75320000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2134 3f54 61310000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2135 3f58 3F2F0000 		_QBRAN  2f  
 2135      6C3F0000 
 2136 3f60 9D300000 		_ADR    SWAP  // -- a 0 a cnt 
 2137 3f64 BD310000 		_ADR    ONEM  // -- a 0 a cnt--
 2138 3f68 9D300000 		_ADR    SWAP   
 2139 3f6c 9D300000 	2:  _ADR    SWAP 
 2140 3f70 09300000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2141 3f74 FF2E0000 		_DOLIT  0
 2141      00000000 
 2142 3f7c 8D300000 		_ADR	DUPP 
 2143 3f80 75320000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2144 3f84 D53D0000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2145 3f88 7D300000 		_ADR	DROP // a 0 d n 
 2146 3f8c 9D300000 		_ADR	SWAP  // a 0 n d 
 2147 3f90 C52F0000 		_ADR	RFROM // a 0 n d cnt  
 2148 3f94 D9330000 		_ADR	EQUAL // d == cnt ? 
 2149 3f98 3F2F0000 		_QBRAN  5f // digits left, not an integer 
 2149      C83F0000 
ARM GAS  forth.s 			page 148


 2150 3fa0 C52F0000 	2:	_ADR	RFROM  // sign 
 2151 3fa4 3F2F0000 		_QBRAN  3f   // positive integer 
 2151      B03F0000 
 2152 3fac 71330000 		_ADR	NEGAT
 2153              	3:	
 2154 3fb0 89320000 		_ADR	NROT  // n a 0 
 2155 3fb4 9D320000 		_ADR	DDROP // n  
 2156 3fb8 FF2E0000 		_DOLIT  -1    // n -1 
 2156      FFFFFFFF 
 2157 3fc0 672F0000 		_BRAN   7f  
 2157      D03F0000 
 2158 3fc8 C52F0000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2159 3fcc 9D320000 	    _ADR	DDROP 
 2160              	7: // restore BASE 
 2161 3fd0 C52F0000 		_ADR	RFROM
 2162 3fd4 99350000 		_ADR	BASE
 2163 3fd8 852F0000 		_ADR	STORE
 2164 3fdc DB2C0000 		_UNNEST
 2165              	
 2166              	/********************************
 2167              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 2168              	    parse number, integer or float 
 2169              	    if not a number return ( a 0 ) 
 2170              	    if integer return ( int -1 ) 
 2171              	    if float return ( float -2 )
 2172              	**********************************/
 2173 3fe0 D23E0000 	    _HEADER NUMBER,6,"NUMBER"
 2173      064E554D 
 2173      42455200 
 2174 3fec 504700BF 	    _NEST 
 2175 3ff0 D93E0000 	    _ADR INTQ
 2176 3ff4 61320000 	    _ADR QDUP 
 2177 3ff8 3F2F0000 	    _QBRAN 2f 
 2177      04400000 
 2178 4000 DB2C0000 	    _UNNEST 
 2179 4004 D1250000 	2:  _ADR FLOATQ
 2180 4008 DB2C0000 	    _UNNEST 
 2181              	
 2182              	
 2183              	/********************
 2184              	  console I/O
 2185              	********************/
 2186              	
 2187              	/**********************
 2188              	    SPACE	( -- )
 2189              	 	Send the blank 
 2190              		character to 
 2191              		the output device.
 2192              	************************/
 2193 400c E43F0000 		_HEADER SPACE,5,"SPACE"
 2193      05535041 
 2193      434500BF 
 2194 4018 504700BF 		_NEST
 2195 401c 0D320000 		_ADR	BLANK
 2196 4020 9D2D0000 		_ADR	EMIT
 2197 4024 DB2C0000 		_UNNEST
 2198              	
ARM GAS  forth.s 			page 149


 2199              	/***************************
 2200              	    SPACES	( +n -- )
 2201              	 	Send n spaces to the 
 2202              		output device.
 2203              	****************************/
 2204 4028 10400000 		_HEADER SPACS,6,"SPACES"
 2204      06535041 
 2204      43455300 
 2205 4034 504700BF 		_NEST
 2206 4038 FF2E0000 		_DOLIT	0
 2206      00000000 
 2207 4040 71340000 		_ADR	MAX
 2208 4044 09300000 		_ADR	TOR
 2209 4048 672F0000 		_BRAN	CHAR2
 2209      54400000 
 2210              	CHAR1:
 2211 4050 19400000 		_ADR	SPACE
 2212              	CHAR2:
 2213 4054 212F0000 		_DONXT	CHAR1
 2213      50400000 
 2214 405c DB2C0000 		_UNNEST
 2215              	
 2216              	/***********************
 2217              	    TYPE	( b u -- )
 2218              	 	Output u characters 
 2219              		from b.
 2220              	************************/
 2221 4060 2C400000 		_HEADER TYPEE,4,"TYPE"
 2221      04545950 
 2221      450000BF 
 2222 406c 504700BF 		_NEST
 2223 4070 09300000 		_ADR  TOR   // ( a+1 -- R: u )
 2224 4074 672F0000 		_BRAN	TYPE2
 2224      88400000 
 2225              	TYPE1:  
 2226 407c E5340000 		_ADR  COUNT
 2227 4080 95390000 		_ADR TCHAR
 2228 4084 9D2D0000 		_ADR EMIT
 2229              	TYPE2:  
 2230 4088 212F0000 		_DONXT	TYPE1
 2230      7C400000 
 2231 4090 7D300000 		_ADR	DROP
 2232 4094 DB2C0000 		_UNNEST
 2233              	
 2234              	/***************************
 2235              	    CR	  ( -- )
 2236              	 	Output a carriage return
 2237              		and a line feed.
 2238              	****************************/
 2239 4098 64400000 		_HEADER CR,2,"CR"
 2239      02435200 
 2240 40a0 504700BF 		_NEST
 2241 40a4 FF2E0000 		_DOLIT	CRR
 2241      0D000000 
 2242 40ac 9D2D0000 		_ADR	EMIT
 2243 40b0 FF2E0000 		_DOLIT	LF
 2243      0A000000 
ARM GAS  forth.s 			page 150


 2244 40b8 9D2D0000 		_ADR	EMIT
 2245 40bc DB2C0000 		_UNNEST
 2246              	
 2247              	/******************************************
 2248              	  do_$	( -- a )
 2249              	  Return the address of a compiled string.
 2250              	  adjust return address to skip over it.
 2251              	hidden word used by compiler. 
 2252              	******************************************/
 2253              	DOSTR:
 2254 40c0 504700BF 		_NEST     
 2255              	/* compiled string address is 2 levels deep */
 2256 40c4 C52F0000 		_ADR	RFROM	// { -- a1 }
 2257 40c8 C52F0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2258 40cc 8D300000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2259 40d0 E5340000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2260 40d4 51310000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2261 40d8 79390000 		_ADR	ALGND	//  end of string
 2262              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2263 40dc 09300000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2264 40e0 9D300000 		_ADR	SWAP	//  count tugged
 2265 40e4 09300000 		_ADR	TOR     //  ( -- a2) is string address
 2266 40e8 DB2C0000 		_UNNEST
 2267              	
 2268              	/******************************************
 2269              	    $"|	( -- a )
 2270              	 	Run time routine compiled by _". 
 2271              		Return address of a compiled string.
 2272              	hidden word used by compiler
 2273              	*****************************************/
 2274              	STRQP:
 2275 40ec 504700BF 		_NEST
 2276 40f0 C1400000 		_ADR	DOSTR
 2277 40f4 DB2C0000 		_UNNEST			// force a call to dostr
 2278              	
 2279              	/*******************************
 2280              	    .$	( a -- )
 2281              	 	Run time routine of ." 
 2282              		Output a compiled string.
 2283              	hidden word used by compiler
 2284              	*******************************/
 2285              	DOTST:
 2286 40f8 504700BF 		_NEST
 2287 40fc E5340000 		_ADR	COUNT // ( -- a+1 c )
 2288 4100 6D400000 		_ADR	TYPEE
 2289 4104 DB2C0000 		_UNNEST
 2290              	
 2291              	/**********************
 2292              	    ."|	( -- )
 2293              	 	Run time routine of ." 
 2294              		Output a compiled string.
 2295              	hidden word used by compiler
 2296              	*****************************/
 2297              	DOTQP:
 2298 4108 504700BF 		_NEST
 2299 410c C1400000 		_ADR	DOSTR
 2300 4110 F9400000 		_ADR	DOTST
ARM GAS  forth.s 			page 151


 2301 4114 DB2C0000 		_UNNEST
 2302              	
 2303              	/*************************
 2304              		LPAD  ( n+ -- )
 2305              		emit n spaceS + 
 2306              		base character  
 2307              		16 -> $
 2308              		 2 -> %
 2309              		 other -> none 
 2310              	*************************/
 2311              	LPAD:
 2312 4118 504700BF 		_NEST 
 2313 411c B1350000 		_ADR BCHR 
 2314 4120 992F0000 		_ADR  AT 
 2315 4124 3F2F0000 		_QBRAN 3f 
 2315      90410000 
 2316 412c 99350000 		_ADR BASE 
 2317 4130 992F0000 		_ADR AT 
 2318 4134 8D300000 		_ADR DUPP 
 2319 4138 FF2E0000 		_DOLIT 16
 2319      10000000 
 2320 4140 D9330000 		_ADR EQUAL 
 2321 4144 3F2F0000 		_QBRAN 1f
 2321      6C410000 
 2322 414c 7D300000 		_ADR DROP 
 2323 4150 FF2E0000 		_DOLIT '$'
 2323      24000000 
 2324 4158 9D300000 	0:	_ADR  SWAP 
 2325 415c BD310000 		_ADR  ONEM 
 2326 4160 35400000 		_ADR  SPACS 
 2327 4164 9D2D0000 		_ADR  EMIT 
 2328 4168 DB2C0000 		_UNNEST 
 2329 416c FF2E0000 	1:  _DOLIT 2 
 2329      02000000 
 2330 4174 D9330000 		_ADR EQUAL 
 2331 4178 3F2F0000 		_QBRAN 3f
 2331      90410000 
 2332 4180 FF2E0000 		_DOLIT '%'
 2332      25000000 
 2333 4188 672F0000 		_BRAN 0b   	
 2333      58410000 
 2334 4190 35400000 	3:	_ADR  SPACS 
 2335 4194 DB2C0000 		_UNNEST 
 2336              	
 2337              	
 2338              	/******************************
 2339              	    .R	  ( n +n -- )
 2340              	 	Display an integer in a 
 2341              		field of n columns, 
 2342              		right justified.
 2343              	*******************************/
 2344 4198 9C400000 		_HEADER DOTR,2,".R"
 2344      022E5200 
 2345 41a0 504700BF 		_NEST
 2346 41a4 09300000 		_ADR	TOR
 2347 41a8 B9370000 		_ADR    STOD 
 2348 41ac 89420000 		_ADR	DTOA 
ARM GAS  forth.s 			page 152


 2349 41b0 C52F0000 		_ADR	RFROM
 2350 41b4 B1300000 		_ADR	OVER
 2351 41b8 61310000 		_ADR	SUBB
 2352 41bc 19410000 		_ADR    LPAD  
 2353 41c0 6D400000 		_ADR	TYPEE
 2354 41c4 DB2C0000 		_UNNEST
 2355              	
 2356              	
 2357              	/*************************
 2358              	    U.R	 ( u +n -- )
 2359              	 	Display an unsigned 
 2360              		integer in n column, 
 2361              		right justified.
 2362              	***************************/
 2363 41c8 9C410000 		_HEADER UDOTR,3,"U.R"
 2363      03552E52 
 2364 41d0 504700BF 		_NEST
 2365 41d4 09300000 		_ADR    TOR 
 2366 41d8 FF2E0000 		_DOLIT  0
 2366      00000000 
 2367 41e0 89420000 		_ADR    DTOA 
 2368 41e4 C52F0000 		_ADR	RFROM
 2369 41e8 B1300000 		_ADR	OVER
 2370 41ec 61310000 		_ADR	SUBB
 2371 41f0 19410000 		_ADR    LPAD  
 2372 41f4 6D400000 		_ADR	TYPEE
 2373 41f8 DB2C0000 		_UNNEST
 2374              	
 2375              	
 2376              	/************************
 2377              	    U.	  ( u -- )
 2378              	 	Display an unsigned 
 2379              		integer in free format.
 2380              	***************************/
 2381 41fc CC410000 		_HEADER UDOT,2,"U."
 2381      02552E00 
 2382 4204 504700BF 		_NEST
 2383 4208 FF2E0000 		_DOLIT  0 
 2383      00000000 
 2384 4210 F53B0000 		_ADR	BDIGS
 2385 4214 613C0000 		_ADR	DIGS
 2386 4218 BD3C0000 		_ADR	EDIGS
 2387 421c FF2E0000 		_DOLIT  1 
 2387      01000000 
 2388 4224 19410000 		_ADR	LPAD  
 2389 4228 6D400000 		_ADR	TYPEE
 2390 422c DB2C0000 		_UNNEST
 2391              	
 2392              	
 2393              	/************************
 2394              	    .	   ( w -- )
 2395              	 	Display an integer 
 2396              		in free format, 
 2397              		preceeded by a space.
 2398              	**************************/
 2399 4230 00420000 		_HEADER DOT,1,"."
 2399      012E00BF 
ARM GAS  forth.s 			page 153


 2400 4238 504700BF 		_NEST
 2401 423c 19400000 		_ADR    SPACE 
 2402 4240 99350000 		_ADR	BASE
 2403 4244 992F0000 		_ADR	AT
 2404 4248 FF2E0000 	1:	_DOLIT  10
 2404      0A000000 
 2405 4250 F9300000 		_ADR	XORR	// decimal base?
 2406 4254 3F2F0000 		_QBRAN	DOT1
 2406      64420000 
 2407 425c 05420000 		_ADR	UDOT    // no,display unsigned
 2408 4260 DB2C0000 		_UNNEST			
 2409              	DOT1:
 2410 4264 B9370000 		_ADR    STOD 
 2411 4268 89420000 	    _ADR	DTOA
 2412 426c FF2E0000 		_DOLIT  1 
 2412      01000000 
 2413 4274 19410000 		_ADR	LPAD  
 2414 4278 6D400000 	1:	_ADR	TYPEE
 2415 427c DB2C0000 		_UNNEST			// yes, display signed
 2416              	
 2417              	
 2418              	/*************************
 2419              	  D>A ( d -- p u )
 2420              	  convert double integer to 
 2421              	  ASCII string in pad  
 2422              	input:
 2423              		d    int64 to convert 
 2424              	output:
 2425              		p     pointer to string  
 2426              		u     string length 
 2427              	**************************/
 2428 4280 34420000 		_HEADER DTOA,3,"D>A" 
 2428      03443E41 
 2429 4288 504700BF 		_NEST
 2430 428c 8D300000 	    _ADR DUPP 
 2431 4290 09300000 		_ADR TOR 
 2432 4294 F9320000 		_ADR DABS 
 2433 4298 F53B0000 		_ADR BDIGS
 2434 429c 613C0000 		_ADR DIGS 
 2435 42a0 C52F0000 		_ADR RFROM 
 2436 42a4 953C0000 		_ADR SIGN  
 2437 42a8 BD3C0000 		_ADR EDIGS 
 2438 42ac DB2C0000 		_UNNEST 
 2439              	
 2440              	
 2441              	/*************************
 2442              	   D. ( d -- )
 2443              	   display double integer 
 2444              	**************************/
 2445 42b0 84420000 		_HEADER DDOT,2,"D."
 2445      02442E00 
 2446 42b8 504700BF 		_NEST
 2447 42bc 19400000 		_ADR SPACE 
 2448 42c0 89420000 		_ADR DTOA 
 2449 42c4 FF2E0000 		_DOLIT 1
 2449      01000000 
 2450 42cc 19410000 		_ADR LPAD 
ARM GAS  forth.s 			page 154


 2451 42d0 6D400000 		_ADR TYPEE
 2452 42d4 DB2C0000 		_UNNEST 
 2453              	
 2454              	
 2455              	
 2456              	/***********************
 2457              		H. ( w -- )
 2458              		display integer 
 2459              		in hexadecimal 
 2460              	*********************/
 2461 42d8 B4420000 		_HEADER HDOT,2,"H."
 2461      02482E00 
 2462 42e0 504700BF 		_NEST 
 2463 42e4 99350000 		_ADR BASE
 2464 42e8 992F0000 		_ADR AT 
 2465 42ec 9D300000 		_ADR SWAP
 2466 42f0 113D0000 		_ADR HEX
 2467 42f4 FF2E0000 		_DOLIT 0 
 2467      00000000 
 2468 42fc F53B0000 		_ADR BDIGS
 2469 4300 613C0000 		_ADR DIGS
 2470 4304 BD3C0000 		_ADR EDIGS
 2471 4308 19400000 		_ADR SPACE
 2472 430c FF2E0000 		_DOLIT '$'
 2472      24000000 
 2473 4314 9D2D0000 		_ADR EMIT 
 2474 4318 6D400000 		_ADR TYPEE
 2475 431c 99350000 		_ADR BASE
 2476 4320 852F0000 		_ADR STORE  
 2477 4324 DB2C0000 		_UNNEST 
 2478              	
 2479              	
 2480              	/***********************
 2481              	    ?	   ( a -- )
 2482              	 	Display the contents
 2483              		in a memory cell.
 2484              	*************************/
 2485 4328 DC420000 		_HEADER QUEST,1,"?"
 2485      013F00BF 
 2486 4330 504700BF 		_NEST
 2487 4334 992F0000 		_ADR	AT
 2488 4338 39420000 		_ADR	DOT
 2489 433c DB2C0000 		_UNNEST
 2490              	
 2491              	/**************
 2492              	  Parsing
 2493              	***************/
 2494              	
 2495              	/*********************************************
 2496              	    parse	( b u c -- b u delta //  string> )
 2497              	 	Scan word delimited by c. 
 2498              		Return found string and its offset.
 2499              	hidden word used by PARSE
 2500              	**********************************************/
 2501              	PARS:
 2502 4340 504700BF 		_NEST
 2503 4344 BD350000 		_ADR	TEMP
ARM GAS  forth.s 			page 155


 2504 4348 852F0000 		_ADR	STORE
 2505 434c B1300000 		_ADR	OVER
 2506 4350 09300000 		_ADR	TOR
 2507 4354 8D300000 		_ADR	DUPP
 2508 4358 3F2F0000 		_QBRAN	PARS8
 2508      54440000 
 2509 4360 BD310000 		_ADR	ONEM
 2510 4364 BD350000 		_ADR	TEMP
 2511 4368 992F0000 		_ADR	AT
 2512 436c 0D320000 		_ADR	BLANK
 2513 4370 D9330000 		_ADR	EQUAL
 2514 4374 3F2F0000 		_QBRAN	PARS3
 2514      C8430000 
 2515 437c 09300000 		_ADR	TOR
 2516              	PARS1:
 2517 4380 0D320000 		_ADR	BLANK
 2518 4384 B1300000 		_ADR	OVER
 2519 4388 B92F0000 		_ADR	CAT	 // skip leading blanks 
 2520 438c 61310000 		_ADR	SUBB
 2521 4390 C1300000 		_ADR	ZLESS
 2522 4394 5D330000 		_ADR	INVER
 2523 4398 3F2F0000 		_QBRAN	PARS2
 2523      C4430000 
 2524 43a0 AD310000 		_ADR	ONEP
 2525 43a4 212F0000 		_DONXT	PARS1
 2525      80430000 
 2526 43ac C52F0000 		_ADR	RFROM
 2527 43b0 7D300000 		_ADR	DROP
 2528 43b4 FF2E0000 		_DOLIT	0
 2528      00000000 
 2529 43bc 8D300000 		_ADR	DUPP
 2530 43c0 DB2C0000 		_UNNEST
 2531              	PARS2:
 2532 43c4 C52F0000 		_ADR	RFROM
 2533              	PARS3:
 2534 43c8 B1300000 		_ADR	OVER
 2535 43cc 9D300000 		_ADR	SWAP
 2536 43d0 09300000 		_ADR	TOR
 2537              	PARS4:
 2538 43d4 BD350000 		_ADR	TEMP
 2539 43d8 992F0000 		_ADR	AT
 2540 43dc B1300000 		_ADR	OVER
 2541 43e0 B92F0000 		_ADR	CAT
 2542 43e4 61310000 		_ADR	SUBB // scan for delimiter
 2543 43e8 BD350000 		_ADR	TEMP
 2544 43ec 992F0000 		_ADR	AT
 2545 43f0 0D320000 		_ADR	BLANK
 2546 43f4 D9330000 		_ADR	EQUAL
 2547 43f8 3F2F0000 		_QBRAN	PARS5
 2547      04440000 
 2548 4400 C1300000 		_ADR	ZLESS
 2549              	PARS5:
 2550 4404 3F2F0000 		_QBRAN	PARS6
 2550      28440000 
 2551 440c AD310000 		_ADR	ONEP
 2552 4410 212F0000 		_DONXT	PARS4
 2552      D4430000 
ARM GAS  forth.s 			page 156


 2553 4418 8D300000 		_ADR	DUPP
 2554 441c 09300000 		_ADR	TOR
 2555 4420 672F0000 		_BRAN	PARS7
 2555      3C440000 
 2556              	PARS6:
 2557 4428 C52F0000 		_ADR	RFROM
 2558 442c 7D300000 		_ADR	DROP
 2559 4430 8D300000 		_ADR	DUPP
 2560 4434 AD310000 		_ADR	ONEP
 2561 4438 09300000 		_ADR	TOR
 2562              	PARS7:
 2563 443c B1300000 		_ADR	OVER
 2564 4440 61310000 		_ADR	SUBB
 2565 4444 C52F0000 		_ADR	RFROM
 2566 4448 C52F0000 		_ADR	RFROM
 2567 444c 61310000 		_ADR	SUBB
 2568 4450 DB2C0000 		_UNNEST
 2569              	PARS8:
 2570 4454 B1300000 		_ADR	OVER
 2571 4458 C52F0000 		_ADR	RFROM
 2572 445c 61310000 		_ADR	SUBB
 2573 4460 DB2C0000 		_UNNEST
 2574              	
 2575              	/************************************
 2576              	    PARSE	( c -- b u //  string> )
 2577              	 	Scan input stream and return 
 2578              		counted string delimited by c.
 2579              	************************************/
 2580 4464 2C430000 		_HEADER PARSE,5,"PARSE"
 2580      05504152 
 2580      534500BF 
 2581 4470 504700BF 		_NEST
 2582 4474 09300000 		_ADR	TOR
 2583 4478 653A0000 		_ADR	TIB
 2584 447c E9350000 		_ADR	INN
 2585 4480 992F0000 		_ADR	AT
 2586 4484 51310000 		_ADR	PLUS			// current input buffer pointer
 2587 4488 01360000 		_ADR	NTIB
 2588 448c 992F0000 		_ADR	AT
 2589 4490 E9350000 		_ADR	INN
 2590 4494 992F0000 		_ADR	AT
 2591 4498 61310000 		_ADR	SUBB			// remaining count
 2592 449c C52F0000 		_ADR	RFROM
 2593 44a0 41430000 		_ADR	PARS
 2594 44a4 E9350000 		_ADR	INN
 2595 44a8 99340000 		_ADR	PSTOR
 2596 44ac DB2C0000 		_UNNEST
 2597              	
 2598              	/*******************************
 2599              	    .(	  ( -- )
 2600              	 	Output following string 
 2601              		up to next ) .
 2602              	******************************/
 2603 44b0 68440000 		_HEADER DOTPR,2,".("
 2603      022E2800 
 2604 44b8 504700BF 		_NEST
 2605 44bc FF2E0000 		_DOLIT	')'
ARM GAS  forth.s 			page 157


 2605      29000000 
 2606 44c4 71440000 		_ADR	PARSE
 2607 44c8 6D400000 		_ADR	TYPEE
 2608 44cc DB2C0000 		_UNNEST
 2609              	
 2610              	/************************
 2611              	    (	   ( -- )
 2612              	 	Ignore following 
 2613              		string up to next )
 2614              		A comment.
 2615              	************************/
 2616 44d0 B4440000 		_HEADER PAREN,IMEDD+1,"("
 2616      812800BF 
 2617 44d8 504700BF 		_NEST
 2618 44dc FF2E0000 		_DOLIT	')'
 2618      29000000 
 2619 44e4 71440000 		_ADR	PARSE
 2620 44e8 9D320000 		_ADR	DDROP
 2621 44ec DB2C0000 		_UNNEST
 2622              	
 2623              	/*******************
 2624              	    \	   ( -- )
 2625              	 	Ignore following 
 2626              		text till the 
 2627              		end of line.
 2628              	********************/
 2629 44f0 D4440000 		_HEADER BKSLA,IMEDD+1,"\\"
 2629      815C00BF 
 2630 44f8 504700BF 		_NEST
 2631 44fc 01360000 		_ADR	NTIB
 2632 4500 992F0000 		_ADR	AT
 2633 4504 E9350000 		_ADR	INN
 2634 4508 852F0000 		_ADR	STORE
 2635 450c DB2C0000 		_UNNEST
 2636              	
 2637              	/******************************
 2638              	    CHAR	( -- c )
 2639              	 	Parse next word and
 2640              		return its first character.
 2641              	*******************************/
 2642 4510 F4440000 		_HEADER CHAR,4,"CHAR"
 2642      04434841 
 2642      520000BF 
 2643 451c 504700BF 		_NEST
 2644 4520 0D320000 		_ADR	BLANK
 2645 4524 71440000 		_ADR	PARSE
 2646 4528 7D300000 		_ADR	DROP
 2647 452c B92F0000 		_ADR	CAT
 2648 4530 DB2C0000 		_UNNEST
 2649              	
 2650              	/**********************************
 2651              		[CHAR] ( -- c )
 2652              		immediate version of CHAR 
 2653              	**********************************/
 2654 4534 14450000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2654      C65B4348 
 2654      41525D00 
ARM GAS  forth.s 			page 158


 2655 4540 504700BF 		_NEST 
 2656 4544 1D450000 		_ADR CHAR
 2657 4548 694C0000 		_ADR LITER 
 2658 454c DB2C0000 		_UNNEST 
 2659              	
 2660              	/**********************************
 2661              	    WORD	( c -- a //  string> )
 2662              	 	Parse a word from input stream
 2663              		and copy it to code dictionary.
 2664              	***********************************/
 2665 4550 38450000 		_HEADER WORDD,4,"WORD"
 2665      04574F52 
 2665      440000BF 
 2666 455c 504700BF 		_NEST
 2667 4560 71440000 		_ADR	PARSE
 2668 4564 2D3A0000 		_ADR	HERE
 2669 4568 ED310000 		_ADR	CELLP
 2670 456c 353B0000 		_ADR	PACKS
 2671 4570 DB2C0000 		_UNNEST
 2672              	
 2673              	/********************************
 2674              	    TOKEN	( -- a //  string> )
 2675              	 	Parse a word from input 
 2676              		stream and copy it to 
 2677              		name dictionary.
 2678              	*********************************/
 2679 4574 54450000 		_HEADER TOKEN,5,"TOKEN"
 2679      05544F4B 
 2679      454E00BF 
 2680 4580 504700BF 		_NEST
 2681 4584 0D320000 		_ADR	BLANK
 2682 4588 5D450000 		_ADR	WORDD
 2683 458c 75470000 		_ADR	UPPER 
 2684 4590 DB2C0000 		_UNNEST
 2685              	
 2686              	/**********************
 2687              	  Dictionary search
 2688              	***********************/
 2689              	
 2690              	/*************************
 2691              	    NAME>	( na -- ca )
 2692              	 	Return a code address
 2693              		given a name address.
 2694              	**************************/
 2695 4594 78450000 		_HEADER NAMET,5,"NAME>"
 2695      054E414D 
 2695      453E00BF 
 2696 45a0 504700BF 		_NEST
 2697 45a4 E5340000 		_ADR	COUNT
 2698 45a8 FF2E0000 		_DOLIT	0x1F
 2698      1F000000 
 2699 45b0 D1300000 		_ADR	ANDD
 2700 45b4 51310000 		_ADR	PLUS
 2701 45b8 79390000 		_ADR	ALGND
 2702 45bc DB2C0000 		_UNNEST
 2703              	
 2704              	/***************************************
ARM GAS  forth.s 			page 159


 2705              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2706              	 	Compare u bytes in two strings. 
 2707              		Return 0 if identical.
 2708              	
 2709              	  Picatout 2020-12-01, 
 2710              	    Because of problem with .align 
 2711              		directive that doesn't fill 
 2712              		with zero's I had to change 
 2713              		the "SAME?" and "FIND" 
 2714              	 	words  to do a byte by byte comparison. 
 2715              	****************************************/
 2716 45c0 98450000 		_HEADER SAMEQ,5,"SAME?"
 2716      0553414D 
 2716      453F00BF 
 2717 45cc 504700BF 		_NEST
 2718 45d0 09300000 		_ADR	TOR
 2719 45d4 672F0000 		_BRAN	SAME2
 2719      18460000 
 2720              	SAME1:
 2721 45dc B1300000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2722 45e0 F52F0000 		_ADR	RAT   // a1 a2 a1 u 
 2723 45e4 51310000 		_ADR	PLUS  // a1 a2 a1+u 
 2724 45e8 B92F0000 		_ADR	CAT	   // a1 a2 c1    		
 2725 45ec B1300000 		_ADR	OVER  // a1 a2 c1 a2 
 2726 45f0 F52F0000 		_ADR	RAT    
 2727 45f4 51310000 		_ADR	PLUS    
 2728 45f8 B92F0000 		_ADR	CAT	  // a1 a2 c1 c2
 2729 45fc 61310000 		_ADR	SUBB  
 2730 4600 61320000 		_ADR	QDUP
 2731 4604 3F2F0000 		_QBRAN	SAME2
 2731      18460000 
 2732 460c C52F0000 		_ADR	RFROM
 2733 4610 7D300000 		_ADR	DROP
 2734 4614 DB2C0000 		_UNNEST	// strings not equal
 2735              	SAME2:
 2736 4618 212F0000 		_DONXT	SAME1
 2736      DC450000 
 2737 4620 FF2E0000 		_DOLIT	0
 2737      00000000 
 2738 4628 DB2C0000 		_UNNEST	// strings equal
 2739              	
 2740              	/***********************************
 2741              	    FIND	( a na -- ca na | a F )
 2742              	 	Search a vocabulary for a string.
 2743              		Return ca and na if succeeded.
 2744              	hidden word used by NAME?
 2745              	
 2746              	  Picatout 2020-12-01,  
 2747              		 Modified from original. 
 2748              	   See comment for word "SAME?" 
 2749              	************************************/
 2750              	FIND:
 2751 462c 504700BF 		_NEST
 2752 4630 9D300000 		_ADR	SWAP			// na a	
 2753 4634 E5340000 		_ADR	COUNT			// na a+1 count
 2754 4638 8D300000 		_ADR	DUPP 
 2755 463c BD350000 		_ADR	TEMP
ARM GAS  forth.s 			page 160


 2756 4640 852F0000 		_ADR	STORE			// na a+1 count 
 2757 4644 09300000 		_ADR  TOR		// na a+1  R: count  
 2758 4648 9D300000 		_ADR	SWAP			// a+1 na
 2759              	FIND1:
 2760 464c 8D300000 		_ADR	DUPP			// a+1 na na
 2761 4650 3F2F0000 		_QBRAN	FIND6	// end of vocabulary
 2761      A4460000 
 2762 4658 8D300000 		_ADR	DUPP			// a+1 na na
 2763 465c B92F0000 		_ADR	CAT			// a+1 na name1
 2764 4660 FF2E0000 		_DOLIT	MASKK
 2764      1FFFFFFF 
 2765 4668 D1300000 		_ADR	ANDD
 2766 466c F52F0000 		_ADR	RAT			// a+1 na name1 count 
 2767 4670 F9300000 		_ADR	XORR			// a+1 na,  same length?
 2768 4674 3F2F0000 		_QBRAN	FIND2
 2768      8C460000 
 2769 467c FD310000 		_ADR	CELLM			// a+1 la
 2770 4680 992F0000 		_ADR	AT			// a+1 next_na
 2771 4684 672F0000 		_BRAN	FIND1			// try next word
 2771      4C460000 
 2772              	FIND2:   
 2773 468c AD310000 		_ADR	ONEP			// a+1 na+1
 2774 4690 BD350000 		_ADR	TEMP
 2775 4694 992F0000 		_ADR	AT			// a+1 na+1 count
 2776 4698 CD450000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2777              	FIND3:	
 2778 469c 672F0000 		_BRAN	FIND4
 2778      BC460000 
 2779              	FIND6:	
 2780 46a4 C52F0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2781 46a8 7D300000 		_ADR	DROP			// a+1 0
 2782 46ac 9D300000 		_ADR	SWAP			// 0 a+1
 2783 46b0 BD310000 		_ADR	ONEM			// 0 a
 2784 46b4 9D300000 		_ADR	SWAP			// a 0 
 2785 46b8 DB2C0000 		_UNNEST			// return without a match
 2786              	FIND4:	
 2787 46bc 3F2F0000 		_QBRAN	FIND5			// a+1 na+1
 2787      D8460000 
 2788 46c4 BD310000 		_ADR	ONEM			// a+1 na
 2789 46c8 FD310000 		_ADR	CELLM			// a+4 la
 2790 46cc 992F0000 		_ADR	AT			// a+1 next_na
 2791 46d0 672F0000 		_BRAN	FIND1			// compare next name
 2791      4C460000 
 2792              	FIND5:	
 2793 46d8 C52F0000 		_ADR	RFROM			// a+1 na+1 count
 2794 46dc 7D300000 		_ADR	DROP			// a+1 na+1
 2795 46e0 9D300000 		_ADR	SWAP			// na+1 a+1
 2796 46e4 7D300000 		_ADR	DROP			// na+1
 2797 46e8 BD310000 		_ADR	ONEM			// na
 2798 46ec 8D300000 		_ADR	DUPP			// na na
 2799 46f0 A1450000 		_ADR	NAMET			// na ca
 2800 46f4 9D300000 		_ADR	SWAP			// ca na
 2801 46f8 DB2C0000 		_UNNEST			//  return with a match
 2802              	
 2803              	/********************************
 2804              	    NAME?	( a -- ca na | a F )
 2805              	 	Search all context vocabularies 
ARM GAS  forth.s 			page 161


 2806              		for a string.
 2807              	***********************************/
 2808 46fc C4450000 		_HEADER NAMEQ,5,"NAME?"
 2808      054E414D 
 2808      453F00BF 
 2809 4708 504700BF 		_NEST
 2810 470c 45360000 		_ADR	CNTXT
 2811 4710 992F0000 		_ADR	AT
 2812 4714 2D460000 		_ADR	FIND
 2813 4718 DB2C0000 		_UNNEST
 2814              	
 2815              	/********************
 2816              	  console input
 2817              	********************/
 2818              	
 2819              	/****************************
 2820              		ASCIZ ( a -- a+ )
 2821              		convert counted string to 
 2822              		null terminated string 
 2823              		in pad.
 2824              	*****************************/
 2825 471c 00470000 		_HEADER ASCIZ,5,"ASCIZ" 
 2825      05415343 
 2825      495A00BF 
 2826 4728 504700BF 		_NEST 
 2827 472c E5340000 		_ADR COUNT
 2828 4730 8D300000 		_ADR DUPP
 2829 4734 09300000 		_ADR TOR 
 2830 4738 453A0000 		_ADR PAD 
 2831 473c 9D300000 		_ADR SWAP
 2832 4740 CD3A0000 		_ADR MOVE  
 2833 4744 453A0000 		_ADR PAD 
 2834 4748 C52F0000 		_ADR RFROM
 2835 474c 51310000 		_ADR PLUS 
 2836 4750 FF2E0000 		_DOLIT 0 
 2836      00000000 
 2837 4758 9D300000 		_ADR SWAP  
 2838 475c A52F0000 		_ADR CSTOR
 2839 4760 453A0000 		_ADR PAD   
 2840 4764 DB2C0000 		_UNNEST 
 2841              	
 2842              	/***********************
 2843              		UPPER (cstring -- cstring )
 2844              		convert to upper case in situ
 2845              	*******************************/
 2846 4768 20470000 		_HEADER UPPER,5,"UPPER"
 2846      05555050 
 2846      455200BF 
 2847 4774 504700BF 		_NEST 
 2848 4778 8D300000 		_ADR DUPP 
 2849 477c 09300000 		_ADR TOR 
 2850 4780 E5340000 		_ADR COUNT
 2851 4784 FF2E0000 		_DOLIT 0x1f
 2851      1F000000 
 2852 478c D1300000 		_ADR ANDD
 2853 4790 09300000 		_ADR TOR 
 2854 4794 672F0000 		_BRAN 3f
ARM GAS  forth.s 			page 162


 2854      E8470000 
 2855 479c 8D300000 	1:  _ADR DUPP 
 2856 47a0 E5340000 		_ADR COUNT 
 2857 47a4 8D300000 		_ADR DUPP 
 2858 47a8 FF2E0000 		_DOLIT 'a'-1
 2858      60000000 
 2859 47b0 59340000 		_ADR GREAT
 2860 47b4 3F2F0000 		_QBRAN 2f 
 2860      E0470000 
 2861 47bc 8D300000 		_ADR DUPP 
 2862 47c0 FF2E0000 		_DOLIT 'z'+1 
 2862      7B000000 
 2863 47c8 29340000 		_ADR LESS 
 2864 47cc 3F2F0000 		_QBRAN 2f 
 2864      E0470000 
 2865 47d4 FF2E0000 		_DOLIT 0x5f  
 2865      5F000000 
 2866 47dc D1300000 		_ADR ANDD
 2867 47e0 75320000 	2:	_ADR ROT
 2868 47e4 A52F0000 		_ADR CSTOR
 2869 47e8 212F0000 	3:  _DONXT 1b
 2869      9C470000 
 2870 47f0 7D300000 		_ADR DROP 
 2871 47f4 C52F0000 		_ADR RFROM
 2872 47f8 DB2C0000 		_UNNEST 
 2873              	
 2874              	/**************************************
 2875              	   BKSP  ( bot eot cur -- bot eot cur )
 2876              	   Move cursor left by one character.
 2877              	hidden word used by KTAP
 2878              	***************************************/
 2879              	BKSP:
 2880 47fc 504700BF 		_NEST
 2881 4800 09300000 		_ADR	TOR
 2882 4804 B1300000 		_ADR	OVER
 2883 4808 C52F0000 		_ADR	RFROM
 2884 480c 9D300000 		_ADR	SWAP
 2885 4810 B1300000 		_ADR	OVER
 2886 4814 F9300000 		_ADR	XORR
 2887 4818 3F2F0000 		_QBRAN	BACK1
 2887      44480000 
 2888 4820 FF2E0000 		_DOLIT	BKSPP
 2888      08000000 
 2889 4828 9D2D0000 		_ADR	EMIT
 2890 482c BD310000 		_ADR	ONEM
 2891 4830 0D320000 		_ADR	BLANK
 2892 4834 9D2D0000 		_ADR	EMIT
 2893 4838 FF2E0000 		_DOLIT	BKSPP
 2893      08000000 
 2894 4840 9D2D0000 		_ADR	EMIT
 2895              	BACK1:
 2896 4844 DB2C0000 		  _UNNEST
 2897              	
 2898              	/****************************************
 2899              	   TAP	 ( bot eot cur c -- bot eot cur )
 2900              	   Accept and echo the key stroke 
 2901              	   and bump the cursor.
ARM GAS  forth.s 			page 163


 2902              	hidden word used by KTAP 
 2903              	****************************************/
 2904              	TAP:
 2905 4848 504700BF 		_NEST
 2906 484c 8D300000 		_ADR	DUPP
 2907 4850 9D2D0000 		_ADR	EMIT
 2908 4854 B1300000 		_ADR	OVER
 2909 4858 A52F0000 		_ADR	CSTOR
 2910 485c AD310000 		_ADR	ONEP
 2911 4860 DB2C0000 		_UNNEST
 2912              	
 2913              	
 2914              	/*******************************************
 2915              	    kTAP	( bot eot cur c -- bot eot cur )
 2916              	 	Process a key stroke, CR or backspace.
 2917              	hidden word used by ACCEPT 
 2918              	*******************************************/
 2919              	KTAP:
 2920              	TTAP:
 2921 4864 504700BF 		_NEST
 2922 4868 8D300000 		_ADR	DUPP
 2923 486c FF2E0000 		_DOLIT	CRR
 2923      0D000000 
 2924 4874 F9300000 		_ADR	XORR
 2925 4878 3F2F0000 		_QBRAN  KTAP2
 2925      A8480000 
 2926 4880 FF2E0000 		_DOLIT	BKSPP
 2926      08000000 
 2927 4888 F9300000 		_ADR	XORR
 2928 488c 3F2F0000 		_QBRAN	KTAP1
 2928      A0480000 
 2929 4894 0D320000 		_ADR	BLANK
 2930 4898 49480000 		_ADR	TAP
 2931 489c DB2C0000 		_UNNEST
 2932              	//	.word	0			// patch
 2933              	KTAP1:
 2934 48a0 FD470000 		_ADR	BKSP
 2935 48a4 DB2C0000 		_UNNEST
 2936              	KTAP2:
 2937 48a8 7D300000 		_ADR	DROP
 2938 48ac 9D300000 		_ADR	SWAP
 2939 48b0 7D300000 		_ADR	DROP
 2940 48b4 8D300000 		_ADR	DUPP
 2941 48b8 DB2C0000 		_UNNEST
 2942              	
 2943              	/************************************
 2944              	    ACCEPT	( b u -- b u )
 2945              	 	Accept characters to input 
 2946              		buffer. Return with actual count.
 2947              	*************************************/
 2948 48bc 6C470000 		_HEADER ACCEP,6,"ACCEPT"
 2948      06414343 
 2948      45505400 
 2949 48c8 504700BF 		_NEST
 2950 48cc B1300000 		_ADR	OVER
 2951 48d0 51310000 		_ADR	PLUS
 2952 48d4 B1300000 		_ADR	OVER
ARM GAS  forth.s 			page 164


 2953              	ACCP1:
 2954 48d8 C5320000 		_ADR	DDUP
 2955 48dc F9300000 		_ADR	XORR
 2956 48e0 3F2F0000 		_QBRAN	ACCP4
 2956      20490000 
 2957 48e8 792D0000 		_ADR	KEY
 2958 48ec 8D300000 		_ADR	DUPP
 2959 48f0 0D320000 		_ADR	BLANK
 2960 48f4 FF2E0000 		_DOLIT 127
 2960      7F000000 
 2961 48fc DD360000 		_ADR	WITHI
 2962 4900 3F2F0000 		_QBRAN	ACCP2
 2962      14490000 
 2963 4908 49480000 		_ADR	TAP
 2964 490c 672F0000 		_BRAN	ACCP3
 2964      18490000 
 2965              	ACCP2:
 2966 4914 65480000 		_ADR	KTAP
 2967              	ACCP3:	  
 2968 4918 672F0000 		_BRAN	ACCP1
 2968      D8480000 
 2969              	ACCP4:
 2970 4920 7D300000 		_ADR	DROP
 2971 4924 B1300000 		_ADR	OVER
 2972 4928 61310000 		_ADR	SUBB
 2973 492c DB2C0000 		_UNNEST
 2974              	
 2975              	/*****************************
 2976              	    QUERY	( -- )
 2977              	 	Accept input stream 
 2978              		to terminal input buffer.
 2979              	******************************/
 2980 4930 C0480000 		_HEADER QUERY,5,"QUERY"
 2980      05515545 
 2980      525900BF 
 2981 493c 504700BF 		_NEST
 2982 4940 653A0000 		_ADR	TIB
 2983 4944 FF2E0000 		_DOLIT 80
 2983      50000000 
 2984 494c C9480000 		_ADR	ACCEP
 2985 4950 01360000 		_ADR	NTIB
 2986 4954 852F0000 		_ADR	STORE
 2987 4958 7D300000 		_ADR	DROP
 2988 495c FF2E0000 		_DOLIT	0
 2988      00000000 
 2989 4964 E9350000 		_ADR	INN
 2990 4968 852F0000 		_ADR	STORE
 2991 496c DB2C0000 		_UNNEST
 2992              	
 2993              	/********************
 2994              	  Error handling
 2995              	********************/
 2996              	
 2997              	/*********************
 2998              	    ABORT	( a -- )
 2999              	 	Reset data stack 
 3000              		and jump to QUIT.
ARM GAS  forth.s 			page 165


 3001              	**********************/
 3002 4970 34490000 		_HEADER ABORT,5,"ABORT"
 3002      0541424F 
 3002      525400BF 
 3003 497c 504700BF 		_NEST
 3004              	ABORT1:
 3005 4980 19400000 		_ADR	SPACE
 3006 4984 E5340000 		_ADR	COUNT
 3007 4988 6D400000 		_ADR	TYPEE
 3008 498c FF2E0000 		_DOLIT	0X3F
 3008      3F000000 
 3009 4994 9D2D0000 		_ADR	EMIT
 3010 4998 A1400000 		_ADR	CR
 3011 499c 054B0000 		_ADR	PRESE
 3012 49a0 672F0000 		_BRAN	QUIT
 3012      244B0000 
 3013              	
 3014              	/*******************************
 3015              	    _abort"	( f -- )
 3016              	 	Run time routine of ABORT"
 3017              		Abort with a message.
 3018              	hidden used by compiler 
 3019              	********************************/
 3020              	ABORQ:
 3021 49a8 504700BF 		_NEST
 3022 49ac C1400000 		_ADR	DOSTR
 3023 49b0 9D300000 		_ADR	SWAP 
 3024 49b4 3F2F0000 		_QBRAN	1f	// text flag
 3024      C4490000 
 3025 49bc 672F0000 		_BRAN	ABORT1
 3025      80490000 
 3026              	1:
 3027 49c4 7D300000 		_ADR	DROP
 3028 49c8 DB2C0000 		_UNNEST			// drop error
 3029              	
 3030              	/************************
 3031              	  The text interpreter
 3032              	************************/
 3033              	
 3034              	/***************************
 3035              	    $INTERPRET  ( a -- )
 3036              	 	Interpret a word. 
 3037              		If failed, try to 
 3038              		convert it to an integer.
 3039              	******************************/
 3040 49cc 74490000 		_HEADER INTER,10,"$INTERPRET"
 3040      0A24494E 
 3040      54455250 
 3040      52455400 
 3041 49dc 504700BF 		_NEST
 3042 49e0 09470000 		_ADR	NAMEQ
 3043 49e4 61320000 		_ADR	QDUP	// ?defined
 3044 49e8 3F2F0000 		_QBRAN	INTE1
 3044      1C4A0000 
 3045 49f0 992F0000 		_ADR	AT
 3046 49f4 FF2E0000 		_DOLIT	COMPO
 3046      40000000 
ARM GAS  forth.s 			page 166


 3047 49fc D1300000 		_ADR	ANDD	// ?compile only lexicon bits
 3048 4a00 A9490000 		_ABORQ	13," compile only"
 3048      0D20636F 
 3048      6D70696C 
 3048      65206F6E 
 3048      6C7900BF 
 3049 4a14 152F0000 		_ADR	EXECU
 3050 4a18 DB2C0000 		_UNNEST			// execute defined word
 3051              	INTE1:
 3052 4a1c ED3F0000 		_ADR	NUMBER 
 3053 4a20 3F2F0000 		_QBRAN	INTE2
 3053      2C4A0000 
 3054 4a28 DB2C0000 		_UNNEST
 3055              	INTE2:
 3056 4a2c 7D490000 		_ADR	ABORT	// error
 3057              	
 3058              	/******************************
 3059              	    [	   ( -- )
 3060              	 	Start the text interpreter.
 3061              	*******************************/
 3062 4a30 D0490000 		_HEADER LBRAC,IMEDD+1,"["
 3062      815B00BF 
 3063 4a38 504700BF 		_NEST
 3064 4a3c FF2E0000 		_DOLIT	INTER
 3064      DC490000 
 3065 4a44 19360000 		_ADR	TEVAL
 3066 4a48 852F0000 		_ADR	STORE
 3067 4a4c DB2C0000 		_UNNEST
 3068              	
 3069              	/**********************
 3070              	    .OK	 ( -- )
 3071              	 	Display "ok" only 
 3072              		while interpreting.
 3073              	************************/
 3074 4a50 344A0000 		_HEADER DOTOK,3,".OK"
 3074      032E4F4B 
 3075 4a58 504700BF 		_NEST
 3076 4a5c FF2E0000 		_DOLIT	INTER
 3076      DC490000 
 3077 4a64 19360000 		_ADR	TEVAL
 3078 4a68 992F0000 		_ADR	AT
 3079 4a6c D9330000 		_ADR	EQUAL
 3080 4a70 3F2F0000 		_QBRAN	DOTO1
 3080      804A0000 
 3081 4a78 09410000 		_DOTQP	3," ok"
 3081      03206F6B 
 3082              	DOTO1:
 3083 4a80 A1400000 		_ADR	CR
 3084 4a84 DB2C0000 		_UNNEST
 3085              	
 3086              	/*************************
 3087              	    ?STACK	( -- )
 3088              	 	Abort if the data 
 3089              		stack underflows.
 3090              	************************/
 3091 4a88 544A0000 		_HEADER QSTAC,6,"?STACK"
 3091      063F5354 
ARM GAS  forth.s 			page 167


 3091      41434B00 
 3092 4a94 504700BF 		_NEST
 3093 4a98 E1390000 		_ADR	DEPTH
 3094 4a9c C1300000 		_ADR	ZLESS	// check only for underflow
 3095 4aa0 A9490000 		_ABORQ	9,"underflow"
 3095      09756E64 
 3095      6572666C 
 3095      6F7700BF 
 3096 4ab0 DB2C0000 		_UNNEST
 3097              	
 3098              	/*******************
 3099              	    EVAL	( -- )
 3100              	 	Interpret the 
 3101              		input stream.
 3102              	*******************/
 3103 4ab4 8C4A0000 		_HEADER EVAL,4,"EVAL"
 3103      04455641 
 3103      4C0000BF 
 3104 4ac0 504700BF 		_NEST
 3105              	EVAL1:
 3106 4ac4 81450000 	    _ADR	TOKEN
 3107 4ac8 8D300000 		_ADR	DUPP
 3108 4acc B92F0000 		_ADR	CAT	// ?input stream empty
 3109 4ad0 3F2F0000 		_QBRAN	EVAL2
 3109      EC4A0000 
 3110 4ad8 19360000 		_ADR	TEVAL
 3111 4adc 7D3A0000 		_ADR	ATEXE
 3112 4ae0 954A0000 		_ADR	QSTAC	// evaluate input, check stack
 3113 4ae4 672F0000 		_BRAN	EVAL1
 3113      C44A0000 
 3114              	EVAL2:
 3115 4aec 7D300000 		_ADR	DROP
 3116 4af0 594A0000 		_ADR	DOTOK
 3117 4af4 DB2C0000 		_UNNEST	// prompt
 3118              	
 3119              	/**********************************
 3120              	    PRESET	( -- )
 3121              	 	Reset data stack pointer 
 3122              		and the terminal input buffer.
 3123              	**********************************/
 3124 4af8 B84A0000 		_HEADER PRESE,6,"PRESET"
 3124      06505245 
 3124      53455400 
 3125 4b04 504700BF 		_NEST 
 3126 4b08 FF2E0000 		_DOLIT SPP 
 3126      80FE0120 
 3127 4b10 49300000 		_ADR SPSTOR 
 3128 4b14 DB2C0000 		_UNNEST 
 3129              	
 3130              	/*********************
 3131              	    QUIT	( -- )
 3132              	 	Reset return stack 
 3133              		pointer and start 
 3134              		text interpreter.
 3135              	***********************/
 3136 4b18 FC4A0000 		_HEADER QUIT,4,"QUIT"
 3136      04515549 
ARM GAS  forth.s 			page 168


 3136      540000BF 
 3137 4b24 FF2E0000 		_DOLIT RPP 
 3137      00FF0120 
 3138 4b2c 39300000 		_ADR RPSTOR 
 3139              	QUIT1:
 3140 4b30 394A0000 		_ADR	LBRAC			// start interpretation
 3141              	QUIT2:
 3142 4b34 3D490000 		_ADR	QUERY			// get input
 3143 4b38 C14A0000 		_ADR	EVAL
 3144 4b3c 672F0000 		_BRAN	QUIT2	// continue till error
 3144      344B0000 
 3145              	
 3146              	/***************************
 3147              		FORGET ( <string> -- )
 3148              		forget all definition 
 3149              		starting at <string>
 3150              	****************************/
 3151 4b44 1C4B0000 		_HEADER FORGET,6,"FORGET"
 3151      06464F52 
 3151      47455400 
 3152 4b50 504700BF 		_NEST 
 3153 4b54 81450000 		_ADR TOKEN 
 3154 4b58 8D300000 		_ADR DUPP 
 3155 4b5c 3F2F0000 		_QBRAN 9f 
 3155      984B0000 
 3156 4b64 09470000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3157 4b68 61320000 		_ADR QDUP 
 3158 4b6c 3F2F0000 		_QBRAN 8f
 3158      944B0000 
 3159 4b74 FD310000 		_ADR CELLM // ( ca la )
 3160 4b78 8D300000 		_ADR DUPP 
 3161 4b7c 59360000 		_ADR CPP   
 3162 4b80 852F0000 		_ADR STORE
 3163 4b84 992F0000 		_ADR AT 
 3164 4b88 85360000 		_ADR LAST 
 3165 4b8c 852F0000 		_ADR STORE
 3166 4b90 F9500000 		_ADR OVERT 
 3167 4b94 7D300000 	8:  _ADR DROP 
 3168 4b98 DB2C0000 	9:	_UNNEST 
 3169              	
 3170              		.p2align 2 
 3171              	
 3172              	/*****************
 3173              	  The compiler
 3174              	******************/
 3175              	
 3176              	/**************************************
 3177              	    '	   ( -- ca )
 3178              	 	Search context vocabularies 
 3179              		for the next word in input stream.
 3180              	***************************************/
 3181 4b9c 484B0000 		_HEADER TICK,1,"'"
 3181      012700BF 
 3182 4ba4 504700BF 		_NEST
 3183 4ba8 81450000 		_ADR	TOKEN
 3184 4bac 09470000 		_ADR	NAMEQ	// ?defined
 3185 4bb0 3F2F0000 		_QBRAN	TICK1
ARM GAS  forth.s 			page 169


 3185      BC4B0000 
 3186 4bb8 DB2C0000 		_UNNEST	// yes, push code address
 3187              	TICK1:	
 3188 4bbc 7D490000 		_ADR ABORT	// no, error
 3189              	
 3190              	/***********************
 3191              	    ALLOT	( n -- )
 3192              	 	Allocate n bytes to 
 3193              		the ram area.
 3194              	************************/
 3195 4bc0 A04B0000 		_HEADER ALLOT,5,"ALLOT"
 3195      05414C4C 
 3195      4F5400BF 
 3196 4bcc 504700BF 		_NEST
 3197 4bd0 59360000 		_ADR	CPP
 3198 4bd4 99340000 		_ADR	PSTOR
 3199 4bd8 DB2C0000 		_UNNEST			// adjust code pointer
 3200              	
 3201              	/******************************
 3202              	    ,	   ( w -- )
 3203              	 	Compile an integer 
 3204              		into the code dictionary.
 3205              	******************************/
 3206 4bdc C44B0000 		_HEADER COMMA,1,","
 3206      012C00BF 
 3207 4be4 504700BF 		_NEST
 3208 4be8 2D3A0000 		_ADR	HERE
 3209 4bec 8D300000 		_ADR	DUPP
 3210 4bf0 ED310000 		_ADR	CELLP	// cell boundary
 3211 4bf4 59360000 		_ADR	CPP
 3212 4bf8 852F0000 		_ADR	STORE
 3213 4bfc 852F0000 		_ADR	STORE
 3214 4c00 DB2C0000 		_UNNEST	// adjust code pointer, compile
 3215              		.p2align 2 
 3216              	
 3217              	/************************************
 3218              	    [COMPILE]   ( -- //  string> )
 3219              	 	Compile the next immediate word 
 3220              		into code dictionary.
 3221              	*************************************/
 3222 4c04 E04B0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3222      895B434F 
 3222      4D50494C 
 3222      455D00BF 
 3223 4c14 504700BF 		_NEST
 3224 4c18 A54B0000 		_ADR	TICK
 3225 4c1c E54B0000 		_ADR	COMMA
 3226 4c20 DB2C0000 		_UNNEST
 3227              	
 3228              	/****************************
 3229              	    COMPILE	( -- )
 3230              	 	Compile the next address 
 3231              		in colon list to code 
 3232              		dictionary.
 3233              	*******************************/
 3234 4c24 084C0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3234      47434F4D 
ARM GAS  forth.s 			page 170


 3234      50494C45 
 3235 4c30 504700BF 		_NEST
 3236 4c34 C52F0000 		_ADR	RFROM
 3237 4c38 8D300000 		_ADR	DUPP 
 3238 4c3c 992F0000 		_ADR	AT
 3239 4c40 FF2E0000 		_DOLIT 1 
 3239      01000000 
 3240 4c48 E5300000 		_ADR	ORR 
 3241 4c4c E54B0000 		_ADR	COMMA 
 3242 4c50 ED310000 		_ADR	CELLP 
 3243 4c54 09300000 		_ADR	TOR 
 3244 4c58 DB2C0000 		_UNNEST	// adjust return address
 3245              	
 3246              	/*************************
 3247              	    LITERAL	( w -- )
 3248              	 	Compile tos to code 
 3249              		dictionary as an 
 3250              		integer literal.
 3251              	***************************/
 3252 4c5c 284C0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3252      874C4954 
 3252      4552414C 
 3253 4c68 504700BF 		_NEST
 3254 4c6c FF2E0000 		_COMPI	DOLIT
 3254      FE2E0000 
 3254      55510000 
 3255 4c78 E54B0000 		_ADR	COMMA
 3256 4c7c DB2C0000 		_UNNEST
 3257              	
 3258              	/********************
 3259              	    $,"	( -- )
 3260              	 	Compile a literal 
 3261              		string up to next " .
 3262              	hidden word 
 3263              	************************/
 3264              	STRCQ:
 3265 4c80 504700BF 		_NEST
 3266 4c84 FF2E0000 		_DOLIT -4
 3266      FCFFFFFF 
 3267 4c8c 59360000 		_ADR	CPP
 3268 4c90 99340000 		_ADR	PSTOR
 3269 4c94 FF2E0000 		_DOLIT	'\"'
 3269      22000000 
 3270 4c9c 5D450000 		_ADR	WORDD			// move word to code dictionary
 3271 4ca0 E5340000 		_ADR	COUNT
 3272 4ca4 51310000 		_ADR	PLUS
 3273 4ca8 79390000 		_ADR	ALGND			// calculate aligned end of string
 3274 4cac 59360000 		_ADR	CPP
 3275 4cb0 852F0000 		_ADR	STORE
 3276 4cb4 DB2C0000 		_UNNEST 			// adjust the code pointer
 3277              	
 3278              	/*******************
 3279              	   Structures
 3280              	*******************/
 3281              	
 3282              	/*************************
 3283              	    FOR	 ( -- a )
ARM GAS  forth.s 			page 171


 3284              	 	Start a FOR-NEXT loop 
 3285              		structure in a colon 
 3286              		definition.
 3287              	**************************/
 3288 4cb8 604C0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3288      C3464F52 
 3289 4cc0 504700BF 		_NEST
 3290 4cc4 FF2E0000 		_COMPI	TOR
 3290      08300000 
 3290      55510000 
 3291 4cd0 2D3A0000 		_ADR	HERE
 3292 4cd4 DB2C0000 		_UNNEST
 3293              	
 3294              	/********************************
 3295              		DO ( limit start -- )
 3296              		initialise a DO...LOOP 
 3297              		or DO...+LOOP 
 3298              	********************************/
 3299 4cd8 BC4C0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3299      C2444F00 
 3300 4ce0 504700BF 		_NEST
 3301 4ce4 FF2E0000 		_COMPI SWAP
 3301      9C300000 
 3301      55510000 
 3302 4cf0 FF2E0000 		_COMPI TOR 
 3302      08300000 
 3302      55510000 
 3303 4cfc FF2E0000 		_COMPI TOR 
 3303      08300000 
 3303      55510000 
 3304 4d08 2D3A0000 		_ADR HERE 
 3305 4d0c DB2C0000 		_UNNEST 
 3306              	
 3307              	DOPLOOP: // ( n -- R: counter limit )
 3308 4d10 3246     		mov T2,TOS 
 3309 4d12 57F8046B 		_POP 
 3310 4d16 B8E80300 		ldmfd RSP!,{T0,T1}
 3311 4d1a 1044     		add T0,T2 
 3312 4d1c 28E90300 		stmfd RSP!,{T0,T1}
 3313 4d20 8842     		cmp T0,T1 
 3314 4d22 05D4     		bmi 9f 
 3315 4d24 08F10808 		add RSP,#8
 3316 4d28 0CF1040C 		add IP,#4
 3317 4d2c FDF7D2BF 		_NEXT 
 3318 4d30 DCF800C0 	9:  ldr IP,[IP]
 3319 4d34 FDF7CEBF 		_NEXT 
 3320              		
 3321              	/***************************
 3322              		+LOOP ( a -- )
 3323              		increment counter 
 3324              		end loop if countr>limit
 3325              	****************************/
 3326 4d38 DC4C0000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3326      C52B4C4F 
 3326      4F5000BF 
 3327 4d44 504700BF 		_NEST 
 3328 4d48 FF2E0000 		_COMPI DOPLOOP 
ARM GAS  forth.s 			page 172


 3328      104D0000 
 3328      55510000 
 3329 4d54 E54B0000 		_ADR COMMA
 3330 4d58 DB2C0000 		_UNNEST 
 3331              	
 3332              	DOLOOP: // ( -- R: counter limit )
 3333 4d5c D8F80000 		ldr T0,[RSP]
 3334 4d60 00F10100 		add T0,#1
 3335 4d64 C8F80000 		str T0,[RSP]
 3336 4d68 D8F80410 		ldr T1,[RSP,#4]
 3337 4d6c 8842     		cmp T0,T1 
 3338 4d6e 05D4     		bmi 9f
 3339 4d70 08F10808 		add RSP,#8  // counter and limit  
 3340 4d74 0CF1040C 		add IP,IP,#4 // skip loop address 
 3341 4d78 FDF7ACBF 		_NEXT 
 3342 4d7c DCF800C0 	9:  ldr IP,[IP]
 3343 4d80 FDF7A8BF 		_NEXT 
 3344              	
 3345              	
 3346              	/********************************
 3347              		LOOP ( a -- )
 3348              		increment counter 
 3349              		end loop if >= limit 
 3350              	*********************************/
 3351 4d84 3C4D0000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3351      C44C4F4F 
 3351      500000BF 
 3352 4d90 504700BF 		_NEST 
 3353 4d94 FF2E0000 		_COMPI DOLOOP
 3353      5C4D0000 
 3353      55510000 
 3354 4da0 E54B0000 		_ADR COMMA 
 3355 4da4 DB2C0000 		_UNNEST 
 3356              	
 3357              	
 3358              	/**********************
 3359              	    BEGIN	( -- a )
 3360              	 	Start an infinite 
 3361              		or indefinite 
 3362              		loop structure.
 3363              	************************/
 3364 4da8 884D0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3364      C5424547 
 3364      494E00BF 
 3365 4db4 504700BF 		_NEST
 3366 4db8 2D3A0000 		_ADR	HERE
 3367 4dbc DB2C0000 		_UNNEST
 3368              		.p2align 2 
 3369              	
 3370              	/********************
 3371              	    NEXT	( a -- )
 3372              	 	Terminate a FOR-NEXT
 3373              		loop structure.
 3374              	**************************/
 3375 4dc0 AC4D0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3375      C44E4558 
 3375      540000BF 
ARM GAS  forth.s 			page 173


 3376 4dcc 504700BF 		_NEST
 3377 4dd0 FF2E0000 		_COMPI	DONXT
 3377      202F0000 
 3377      55510000 
 3378 4ddc E54B0000 		_ADR	COMMA
 3379 4de0 DB2C0000 		_UNNEST
 3380              	
 3381              	/***************************
 3382              		I ( -- n )
 3383              		stack for loop counter 
 3384              	***************************/
 3385 4de4 C44D0000 		_HEADER I,1+COMPO,"I"
 3385      414900BF 
 3386 4dec 47F8046D 		_PUSH 
 3387 4df0 D8F80060 		ldr TOS,[RSP]
 3388 4df4 FDF76EBF 		_NEXT 
 3389              	
 3390              	/****************************
 3391              		J ( -- n )
 3392              		stack outer loop counter 
 3393              	****************************/
 3394 4df8 E84D0000 		_HEADER J,1,"J"
 3394      014A00BF 
 3395 4e00 47F8046D 		_PUSH 
 3396 4e04 D8F80460 		ldr TOS,[RSP,#4]
 3397 4e08 FDF764BF 		_NEXT 
 3398              	
 3399              	/**********************
 3400              	    UNTIL	( a -- )
 3401              	 	Terminate a BEGIN-UNTIL
 3402              		indefinite loop structure.
 3403              	******************************/
 3404 4e0c FC4D0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3404      C5554E54 
 3404      494C00BF 
 3405 4e18 504700BF 		_NEST
 3406 4e1c FF2E0000 		_COMPI	QBRAN
 3406      3E2F0000 
 3406      55510000 
 3407 4e28 E54B0000 		_ADR	COMMA
 3408 4e2c DB2C0000 		_UNNEST
 3409              	
 3410              	/**********************
 3411              	    AGAIN	( a -- )
 3412              	 	Terminate a BEGIN-AGAIN
 3413              		infinite loop structure.
 3414              	*****************************/
 3415 4e30 104E0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3415      C5414741 
 3415      494E00BF 
 3416 4e3c 504700BF 		_NEST
 3417 4e40 FF2E0000 		_COMPI	BRAN
 3417      662F0000 
 3417      55510000 
 3418 4e4c E54B0000 		_ADR	COMMA
 3419 4e50 DB2C0000 		_UNNEST
 3420              	
ARM GAS  forth.s 			page 174


 3421              	/************************
 3422              	    IF	  ( -- A )
 3423              	 	Begin a conditional
 3424              		branch structure.
 3425              	**************************/
 3426 4e54 344E0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3426      C2494600 
 3427 4e5c 504700BF 		_NEST
 3428 4e60 FF2E0000 		_COMPI	QBRAN
 3428      3E2F0000 
 3428      55510000 
 3429 4e6c 2D3A0000 		_ADR	HERE
 3430 4e70 FF2E0000 		_DOLIT	4
 3430      04000000 
 3431 4e78 59360000 		_ADR	CPP
 3432 4e7c 99340000 		_ADR	PSTOR
 3433 4e80 DB2C0000 		_UNNEST
 3434              	
 3435              	/*************************
 3436              	    AHEAD	( -- A )
 3437              	 	Compile a forward 
 3438              		branch instruction.
 3439              	*************************/
 3440 4e84 584E0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3440      C5414845 
 3440      414400BF 
 3441 4e90 504700BF 		_NEST
 3442 4e94 FF2E0000 		_COMPI	BRAN
 3442      662F0000 
 3442      55510000 
 3443 4ea0 2D3A0000 		_ADR	HERE
 3444 4ea4 FF2E0000 		_DOLIT	4
 3444      04000000 
 3445 4eac 59360000 		_ADR	CPP
 3446 4eb0 99340000 		_ADR	PSTOR
 3447 4eb4 DB2C0000 		_UNNEST
 3448              	
 3449              	/**************************
 3450              	    REPEAT	( A a -- )
 3451              	 	Terminate a BEGIN-WHILE-REPEAT
 3452              		indefinite loop.
 3453              	**********************************/
 3454 4eb8 884E0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3454      C6524550 
 3454      45415400 
 3455 4ec4 504700BF 		_NEST
 3456 4ec8 3D4E0000 		_ADR	AGAIN
 3457 4ecc 2D3A0000 		_ADR	HERE
 3458 4ed0 9D300000 		_ADR	SWAP
 3459 4ed4 852F0000 		_ADR	STORE
 3460 4ed8 DB2C0000 		_UNNEST
 3461              	
 3462              	/*********************
 3463              	    THEN	( A -- )
 3464              	 	Terminate a conditional
 3465              		branch structure.
 3466              	*****************************/
ARM GAS  forth.s 			page 175


 3467 4edc BC4E0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3467      C4544845 
 3467      4E0000BF 
 3468 4ee8 504700BF 		_NEST
 3469 4eec 2D3A0000 		_ADR	HERE
 3470 4ef0 9D300000 		_ADR	SWAP
 3471 4ef4 852F0000 		_ADR	STORE
 3472 4ef8 DB2C0000 		_UNNEST
 3473              	
 3474              	/***************************
 3475              	    AFT	 ( a -- a A )
 3476              	 	Jump to THEN in a 
 3477              		FOR-AFT-THEN-NEXT loop 
 3478              		the first time through.
 3479              	*****************************/
 3480 4efc E04E0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3480      C3414654 
 3481 4f04 504700BF 		_NEST
 3482 4f08 7D300000 		_ADR	DROP
 3483 4f0c 914E0000 		_ADR	AHEAD
 3484 4f10 B54D0000 		_ADR	BEGIN
 3485 4f14 9D300000 		_ADR	SWAP
 3486 4f18 DB2C0000 		_UNNEST
 3487              	
 3488              	/**********************
 3489              	    ELSE	( A -- A )
 3490              	 	Start the false 
 3491              		clause in an 
 3492              		IF-ELSE-THEN structure.
 3493              	****************************/
 3494 4f1c 004F0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3494      C4454C53 
 3494      450000BF 
 3495 4f28 504700BF 		_NEST
 3496 4f2c 914E0000 		_ADR	AHEAD
 3497 4f30 9D300000 		_ADR	SWAP
 3498 4f34 E94E0000 		_ADR	THENN
 3499 4f38 DB2C0000 		_UNNEST
 3500              	
 3501              	/**************************
 3502              	    WHILE	( a -- A a )
 3503              	 	Conditional branch out 
 3504              		of a BEGIN-WHILE-REPEAT loop.
 3505              	*********************************/
 3506 4f3c 204F0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3506      C5574849 
 3506      4C4500BF 
 3507 4f48 504700BF 		_NEST
 3508 4f4c 5D4E0000 		_ADR	IFF
 3509 4f50 9D300000 		_ADR	SWAP
 3510 4f54 DB2C0000 		_UNNEST
 3511              	
 3512              	/***********************************
 3513              	    ABORT"	( -- //  string> )
 3514              	 	Conditional abort with an 
 3515              		error message.
 3516              	***********************************/
ARM GAS  forth.s 			page 176


 3517 4f58 404F0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3517      8641424F 
 3517      52542200 
 3518 4f64 504700BF 		_NEST
 3519 4f68 FF2E0000 		_COMPI	ABORQ
 3519      A8490000 
 3519      55510000 
 3520 4f74 814C0000 		_ADR	STRCQ
 3521 4f78 DB2C0000 		_UNNEST
 3522              	
 3523              	/******************************
 3524              	    $"	( -- //  string> )
 3525              	 	Compile an inline 
 3526              		word literal.
 3527              	*****************************/
 3528 4f7c 5C4F0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3528      C2242200 
 3529 4f84 504700BF 		_NEST
 3530 4f88 FF2E0000 		_COMPI	STRQP
 3530      EC400000 
 3530      55510000 
 3531 4f94 814C0000 		_ADR	STRCQ
 3532 4f98 DB2C0000 		_UNNEST
 3533              	
 3534              	/******************************
 3535              	    ."	( -- //  string> )
 3536              	 	Compile an inline word
 3537              		literal to be typed out 
 3538              		at run time.
 3539              	*******************************/
 3540 4f9c 804F0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3540      C22E2200 
 3541 4fa4 504700BF 		_NEST
 3542 4fa8 FF2E0000 		_COMPI	DOTQP
 3542      08410000 
 3542      55510000 
 3543 4fb4 814C0000 		_ADR	STRCQ
 3544 4fb8 DB2C0000 		_UNNEST
 3545              	
 3546              	/*********************
 3547              	  Name compiler
 3548              	***********************/
 3549              	
 3550              	/**************************
 3551              	    ?UNIQUE	( a -- a )
 3552              	 	Display a warning 
 3553              		message if the word 
 3554              		already exists.
 3555              	**************************/
 3556 4fbc A04F0000 		_HEADER UNIQU,7,"?UNIQUE"
 3556      073F554E 
 3556      49515545 
 3557 4fc8 504700BF 		_NEST
 3558 4fcc 8D300000 		_ADR	DUPP
 3559 4fd0 09470000 		_ADR	NAMEQ			// ?name exists
 3560 4fd4 3F2F0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3560      F44F0000 
ARM GAS  forth.s 			page 177


 3561 4fdc 09410000 		_DOTQP	7," reDef "		// but warn the user
 3561      07207265 
 3561      44656620 
 3562 4fe8 B1300000 		_ADR	OVER
 3563 4fec E5340000 		_ADR	COUNT
 3564 4ff0 6D400000 		_ADR	TYPEE			// just in case its not planned
 3565              	UNIQ1:
 3566 4ff4 7D300000 		_ADR	DROP
 3567 4ff8 DB2C0000 		_UNNEST
 3568              	
 3569              	/***********************
 3570              	    $,n	 ( na -- )
 3571              	 	Build a new dictionary 
 3572              		name using the data at na.
 3573              	hidden word 
 3574              	*******************************/
 3575              	SNAME:
 3576 4ffc 504700BF 		_NEST
 3577 5000 8D300000 		_ADR	DUPP			//  na na
 3578 5004 B92F0000 		_ADR	CAT			//  ?null input
 3579 5008 3F2F0000 		_QBRAN	SNAM1
 3579      44500000 
 3580 5010 C94F0000 		_ADR	UNIQU			//  na
 3581 5014 85360000 		_ADR	LAST			//  na last
 3582 5018 992F0000 		_ADR	AT			//  na la
 3583 501c E54B0000 		_ADR	COMMA			//  na
 3584 5020 8D300000 		_ADR	DUPP			//  na na
 3585 5024 85360000 		_ADR	LAST			//  na na last
 3586 5028 852F0000 		_ADR	STORE			//  na , save na for vocabulary link
 3587 502c E5340000 		_ADR	COUNT			//  na+1 count
 3588 5030 51310000 		_ADR	PLUS			//  na+1+count
 3589 5034 79390000 		_ADR	ALGND			//  word boundary
 3590 5038 59360000 		_ADR	CPP
 3591 503c 852F0000 		_ADR	STORE			//  top of dictionary now
 3592 5040 DB2C0000 		_UNNEST
 3593              	SNAM1:
 3594 5044 ED400000 		_ADR	STRQP
 3595 5048 07       		.byte	7
 3596 5049 206E616D 		.ascii " name? "
 3596      653F20
 3597 5050 7D490000 		_ADR	ABORT
 3598              	
 3599              	/************************
 3600              	    $COMPILE	( a -- )
 3601              	 	Compile next word to 
 3602              		code dictionary as 
 3603              		a token or literal.
 3604              	**************************/
 3605 5054 C04F0000 		_HEADER SCOMP,8,"$COMPILE"
 3605      0824434F 
 3605      4D50494C 
 3605      450000BF 
 3606 5064 504700BF 		_NEST
 3607 5068 09470000 		_ADR	NAMEQ
 3608 506c 61320000 		_ADR	QDUP	// defined?
 3609 5070 3F2F0000 		_QBRAN	SCOM2
 3609      A0500000 
ARM GAS  forth.s 			page 178


 3610 5078 992F0000 		_ADR	AT
 3611 507c FF2E0000 		_DOLIT	IMEDD
 3611      80000000 
 3612 5084 D1300000 		_ADR	ANDD	// immediate?
 3613 5088 3F2F0000 		_QBRAN	SCOM1
 3613      98500000 
 3614 5090 152F0000 		_ADR	EXECU
 3615 5094 DB2C0000 		_UNNEST			// it's immediate, execute
 3616              	SCOM1:
 3617 5098 55510000 		_ADR	CALLC			// it's not immediate, compile
 3618 509c DB2C0000 		_UNNEST	
 3619              	SCOM2:
 3620 50a0 ED3F0000 		_ADR	NUMBER 
 3621 50a4 3F2F0000 		_QBRAN	SCOM3
 3621      B4500000 
 3622 50ac 694C0000 		_ADR	LITER
 3623 50b0 DB2C0000 		_UNNEST			// compile number as integer
 3624              	SCOM3: // compilation abort 
 3625 50b4 BD500000 		_ADR COLON_ABORT 
 3626 50b8 7D490000 		_ADR	ABORT			// error
 3627              	
 3628              	/********************************
 3629              	 before aborting a compilation 
 3630              	 reset HERE and LAST
 3631              	 to previous values. 
 3632              	*******************************/
 3633              	COLON_ABORT:
 3634 50bc 504700BF 		_NEST 
 3635 50c0 85360000 		_ADR LAST 
 3636 50c4 992F0000 		_ADR AT 
 3637 50c8 FD310000 		_ADR CELLM 
 3638 50cc 8D300000 		_ADR DUPP 
 3639 50d0 59360000 		_ADR CPP  
 3640 50d4 852F0000 		_ADR STORE 
 3641 50d8 992F0000 		_ADR AT 
 3642 50dc 85360000 		_ADR LAST 
 3643 50e0 852F0000 		_ADR STORE 
 3644 50e4 F9500000 		_ADR OVERT 
 3645 50e8 DB2C0000 		_UNNEST 
 3646              	
 3647              	/*********************
 3648              	    OVERT	( -- )
 3649              	 	Link a new word 
 3650              		into the current 
 3651              		vocabulary.
 3652              	**********************/
 3653 50ec 58500000 		_HEADER OVERT,5,"OVERT"
 3653      054F5645 
 3653      525400BF 
 3654 50f8 504700BF 		_NEST
 3655 50fc 85360000 		_ADR	LAST
 3656 5100 992F0000 		_ADR	AT
 3657 5104 45360000 		_ADR	CNTXT
 3658 5108 852F0000 		_ADR	STORE
 3659 510c DB2C0000 		_UNNEST
 3660              	
 3661              	/**********************
ARM GAS  forth.s 			page 179


 3662              	    ;  ( -- )
 3663              	 	Terminate a colon
 3664              		definition.
 3665              	***********************/
 3666 5110 F0500000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3666      C13B00BF 
 3667 5118 504700BF 		_NEST
 3668 511c FF2E0000 		_DOLIT	UNNEST
 3668      DA2C0000 
 3669 5124 55510000 		_ADR	CALLC
 3670 5128 394A0000 		_ADR	LBRAC
 3671 512c F9500000 		_ADR	OVERT
 3672 5130 DB2C0000 		_UNNEST
 3673              	
 3674              	/******************
 3675              	    ]	   ( -- )
 3676              	 	Start compiling 
 3677              		the words in 
 3678              		the input stream.
 3679              	*********************/
 3680 5134 14510000 		_HEADER RBRAC,1,"]"
 3680      015D00BF 
 3681 513c 504700BF 		_NEST
 3682 5140 FF2E0000 		_DOLIT	SCOMP
 3682      64500000 
 3683 5148 19360000 		_ADR	TEVAL
 3684 514c 852F0000 		_ADR	STORE
 3685 5150 DB2C0000 		_UNNEST
 3686              	
 3687              	/*********************
 3688              	    BL.W	( ca -- )
 3689              	 	compile ca.
 3690              	hidden word used by compiler
 3691              	*****************************/
 3692              	CALLC:
 3693 5154 504700BF 		_NEST
 3694 5158 FF2E0000 		_DOLIT 1 
 3694      01000000 
 3695 5160 E5300000 		_ADR ORR 
 3696 5164 E54B0000 		_ADR COMMA  
 3697 5168 DB2C0000 		_UNNEST 
 3698              	
 3699              	
 3700              	/*************************
 3701              	 	:	( -- //  string> )
 3702              	 	Start a new colon 
 3703              		definition using 
 3704              		next word as its name.
 3705              	**************************/
 3706 516c 38510000 		_HEADER COLON,1,":"
 3706      013A00BF 
 3707 5174 504700BF 		_NEST
 3708 5178 81450000 		_ADR	TOKEN
 3709 517c FD4F0000 		_ADR	SNAME
 3710 5180 F9500000 		_ADR    OVERT 
 3711 5184 E52C0000 		_ADR	COMPI_NEST 
 3712 5188 3D510000 		_ADR	RBRAC
ARM GAS  forth.s 			page 180


 3713 518c DB2C0000 		_UNNEST
 3714              	
 3715              	/*************************
 3716              	    IMMEDIATE   ( -- )
 3717              	 	Make the last compiled 
 3718              		word an immediate word.
 3719              	***************************/
 3720 5190 70510000 		_HEADER IMMED,9,"IMMEDIATE"
 3720      09494D4D 
 3720      45444941 
 3720      544500BF 
 3721 51a0 504700BF 		_NEST
 3722 51a4 FF2E0000 		_DOLIT	IMEDD
 3722      80000000 
 3723 51ac 85360000 		_ADR	LAST
 3724 51b0 992F0000 		_ADR	AT
 3725 51b4 992F0000 		_ADR	AT
 3726 51b8 E5300000 		_ADR	ORR
 3727 51bc 85360000 		_ADR	LAST
 3728 51c0 992F0000 		_ADR	AT
 3729 51c4 852F0000 		_ADR	STORE
 3730 51c8 DB2C0000 		_UNNEST
 3731              	
 3732              	/******************
 3733              	  Defining words
 3734              	******************/
 3735              	
 3736              	/***********************************
 3737              	    CONSTANT	( u -- //  string> )
 3738              	 	Compile a new constant.
 3739              	************************************/
 3740 51cc 94510000 		_HEADER CONST,8,"CONSTANT"
 3740      08434F4E 
 3740      5354414E 
 3740      540000BF 
 3741 51dc 504700BF 		_NEST 
 3742 51e0 81450000 		_ADR	TOKEN
 3743 51e4 FD4F0000 		_ADR	SNAME
 3744 51e8 F9500000 		_ADR	OVERT
 3745 51ec E52C0000 		_ADR	COMPI_NEST
 3746 51f0 FF2E0000 		_DOLIT	DOCON
 3746      20350000 
 3747 51f8 55510000 		_ADR	CALLC
 3748 51fc E54B0000 		_ADR	COMMA
 3749 5200 FF2E0000 		_DOLIT	UNNEST 
 3749      DA2C0000 
 3750 5208 55510000 		_ADR	CALLC  
 3751 520c DB2C0000 		_UNNEST
 3752              	
 3753              		.p2align 2 
 3754              	/****************************************
 3755              	 doDOES> ( -- a )
 3756              	 runtime action of 		 
 3757              	 leave parameter field address on stack 
 3758              	hidden word used by compiler 
 3759              	***************************************/
 3760              	DODOES:
ARM GAS  forth.s 			page 181


 3761 5210 504700BF 		_NEST 
 3762 5214 C52F0000 		_ADR	RFROM
 3763 5218 ED310000 		_ADR	CELLP 
 3764 521c AD310000 		_ADR	ONEP  
 3765 5220 85360000 		_ADR LAST 
 3766 5224 992F0000 		_ADR AT
 3767 5228 A1450000 		_ADR NAMET 
 3768 522c ED310000 		_ADR CELLP 
 3769 5230 852F0000 		_ADR STORE  
 3770 5234 DB2C0000 		_UNNEST 
 3771              	
 3772              		.p2align 2
 3773              	/**********************
 3774              	  DOES> ( -- )
 3775              	  compile time action
 3776              	*************************/
 3777 5238 D0510000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3777      C5444F45 
 3777      533E00BF 
 3778 5244 504700BF 		_NEST 
 3779 5248 FF2E0000 		_DOLIT DODOES 
 3779      10520000 
 3780 5250 55510000 		_ADR CALLC 
 3781 5254 FF2E0000 		_DOLIT	UNNEST
 3781      DA2C0000 
 3782 525c 55510000 		_ADR	CALLC 
 3783 5260 E52C0000 		_ADR COMPI_NEST
 3784 5264 FF2E0000 		_DOLIT RFROM 
 3784      C42F0000 
 3785 526c 55510000 		_ADR	CALLC
 3786 5270 DB2C0000 		_UNNEST 
 3787              	
 3788              	
 3789              	/****************************
 3790              	  DEFER@ ( "name" -- a )
 3791              	  return value of code field 
 3792              	  of defered function. 
 3793              	******************************/
 3794 5274 3C520000 		_HEADER DEFERAT,6,"DEFER@"
 3794      06444546 
 3794      45524000 
 3795 5280 504700BF 		_NEST 
 3796 5284 A54B0000 		_ADR TICK
 3797 5288 ED310000 		_ADR CELLP 
 3798 528c 992F0000 		_ADR AT 
 3799 5290 BD310000 		_ADR ONEM 
 3800 5294 DB2C0000 		_UNNEST 
 3801              	
 3802              	/*********************************
 3803              	 DEFER! ( "name1" "name2" -- )
 3804              	 assign an action to a defered word 
 3805              	************************************/
 3806 5298 78520000 		_HEADER DEFERSTO,6,"DEFER!"
 3806      06444546 
 3806      45522100 
 3807 52a4 504700BF 		_NEST 
 3808 52a8 A54B0000 		_ADR TICK 
ARM GAS  forth.s 			page 182


 3809 52ac AD310000 		_ADR ONEP 
 3810 52b0 A54B0000 		_ADR TICK 
 3811 52b4 ED310000 		_ADR CELLP 
 3812 52b8 852F0000 		_ADR STORE 
 3813 52bc DB2C0000 		_UNNEST
 3814              	
 3815              	/****************************
 3816              	  DEFER ( "name" -- )
 3817              	  create a defered definition
 3818              	*****************************/
 3819 52c0 9C520000 		_HEADER DEFER,5,"DEFER"
 3819      05444546 
 3819      455200BF 
 3820 52cc 504700BF 		_NEST 
 3821 52d0 1D530000 		_ADR CREAT 
 3822 52d4 FF2E0000 		_DOLIT UNNEST 
 3822      DA2C0000 
 3823 52dc 55510000 		_ADR CALLC 
 3824 52e0 FF2E0000 		_DOLIT DEFER_NOP
 3824      04530000 
 3825 52e8 AD310000 		_ADR ONEP 
 3826 52ec 85360000 		_ADR LAST 
 3827 52f0 992F0000 		_ADR AT 
 3828 52f4 A1450000 		_ADR NAMET 
 3829 52f8 ED310000 		_ADR CELLP 
 3830 52fc 852F0000 		_ADR STORE 
 3831 5300 DB2C0000 		_UNNEST 
 3832              	DEFER_NOP:
 3833 5304 504700BF 		_NEST  
 3834 5308 FD2E0000 		_ADR NOP 
 3835 530c DB2C0000 		_UNNEST 
 3836              	
 3837              	/******************************
 3838              	    CREATE	( -- //  string> )
 3839              	 	Compile a new array entry 
 3840              		without allocating code space.
 3841              	***********************************/
 3842 5310 C4520000 		_HEADER CREAT,6,"CREATE"
 3842      06435245 
 3842      41544500 
 3843 531c 504700BF 		_NEST 
 3844 5320 81450000 		_ADR	TOKEN
 3845 5324 FD4F0000 		_ADR	SNAME
 3846 5328 F9500000 		_ADR	OVERT
 3847 532c E52C0000 		_ADR	COMPI_NEST 
 3848 5330 FF2E0000 		_DOLIT	DOVAR
 3848      12350000 
 3849 5338 55510000 		_ADR	CALLC
 3850 533c DB2C0000 		_UNNEST
 3851              	
 3852              	/*******************************
 3853              	    VARIABLE	( -- //  string> )
 3854              	 	Compile a new variable 
 3855              		initialized to 0.
 3856              	***********************************/
 3857 5340 14530000 		_HEADER VARIA,8,"VARIABLE"
 3857      08564152 
ARM GAS  forth.s 			page 183


 3857      4941424C 
 3857      450000BF 
 3858 5350 504700BF 		_NEST
 3859 5354 1D530000 		_ADR	CREAT
 3860 5358 FF2E0000 		_DOLIT	0
 3860      00000000 
 3861 5360 E54B0000 		_ADR	COMMA
 3862 5364 FF2E0000 		_DOLIT UNNEST
 3862      DA2C0000 
 3863 536c 55510000 		_ADR	CALLC  
 3864 5370 DB2C0000 		_UNNEST
 3865              	
 3866              	
 3867              	/***********
 3868              	  Tools
 3869              	***********/
 3870              	
 3871              	/*************************
 3872              	    dm+	 ( a u -- a )
 3873              	 	Dump u bytes from a , 
 3874              		leaving a+u on the stack.
 3875              		hidden word used by DUMP 
 3876              	****************************/
 3877              	DMP:
 3878 5374 504700BF 		_NEST
 3879 5378 B1300000 		_ADR	OVER
 3880 537c FF2E0000 		_DOLIT	4
 3880      04000000 
 3881 5384 D1410000 		_ADR	UDOTR			// display address
 3882 5388 FF2E0000 		_DOLIT  0         // don't show base char 
 3882      00000000 
 3883 5390 B1350000 		_ADR    BCHR
 3884 5394 8D300000 		_ADR    DUPP
 3885 5398 992F0000 		_ADR    AT 
 3886 539c 09300000 		_ADR    TOR      // save original value of BCHAR 
 3887 53a0 852F0000 		_ADR    STORE 
 3888 53a4 19400000 		_ADR	SPACE
 3889 53a8 09300000 		_ADR	TOR			// start count down loop
 3890 53ac 672F0000 		_BRAN	PDUM2			// skip first pass
 3890      CC530000 
 3891              	PDUM1:
 3892 53b4 8D300000 	    _ADR	DUPP
 3893 53b8 B92F0000 		_ADR	CAT
 3894 53bc FF2E0000 		_DOLIT	3
 3894      03000000 
 3895 53c4 D1410000 		_ADR	UDOTR			// display numeric data
 3896 53c8 AD310000 		_ADR	ONEP			// increment address
 3897              	PDUM2:
 3898 53cc 212F0000 	    _ADR	DONXT
 3899 53d0 B4530000 		.word	PDUM1	// loop till done
 3900 53d4 C52F0000 		_ADR    RFROM   // restore BCHAR value 
 3901 53d8 B1350000 		_ADR    BCHR 
 3902 53dc 852F0000 		_ADR    STORE 
 3903 53e0 DB2C0000 		_UNNEST
 3904              		.p2align 2 
 3905              	//    DUMP	( a u -- )
 3906              	// 	Dump u bytes from a, in a formatted manner.
ARM GAS  forth.s 			page 184


 3907              	
 3908              	/**********************
 3909              		DUMP ( a n -- )
 3910              		hex dump memory 
 3911              	*********************/
 3912 53e4 44530000 		_HEADER DUMP,4,"DUMP"
 3912      0444554D 
 3912      500000BF 
 3913 53f0 504700BF 		_NEST
 3914 53f4 FF2E0000 		_DOLIT  15 
 3914      0F000000 
 3915 53fc 51310000 		_ADR    PLUS 
 3916 5400 FF2E0000 		_DOLIT  0xFFFFFFF0 
 3916      F0FFFFFF 
 3917 5408 D1300000 		_ADR    ANDD 
 3918 540c 9D300000 		_ADR    SWAP 
 3919 5410 FF2E0000 		_DOLIT  0xFFFFFFFC
 3919      FCFFFFFF 
 3920 5418 D1300000 		_ADR    ANDD 
 3921 541c 9D300000 		_ADR    SWAP 
 3922 5420 99350000 		_ADR	BASE
 3923 5424 992F0000 		_ADR	AT
 3924 5428 09300000 		_ADR	TOR
 3925 542c 113D0000 		_ADR	HEX			// save radix,set hex
 3926 5430 FF2E0000 		_DOLIT	16
 3926      10000000 
 3927 5438 19390000 		_ADR	SLASH			// change count to lines
 3928 543c 09300000 		_ADR	TOR
 3929 5440 672F0000 		_BRAN	DUMP4			// start count down loop
 3929      70540000 
 3930              	DUMP1:
 3931 5448 A1400000 	    _ADR	CR
 3932 544c FF2E0000 		_DOLIT	16
 3932      10000000 
 3933 5454 C5320000 		_ADR	DDUP
 3934 5458 75530000 		_ADR	DMP			// display numeric
 3935 545c 75320000 		_ADR	ROT
 3936 5460 75320000 		_ADR	ROT
 3937 5464 19400000 		_ADR	SPACE
 3938 5468 19400000 		_ADR	SPACE
 3939 546c 6D400000 		_ADR	TYPEE			// display printable characters
 3940              	DUMP4:
 3941 5470 212F0000 	  _DONXT	DUMP1	// loop till done
 3941      48540000 
 3942              	DUMP3:
 3943 5478 7D300000 		_ADR	DROP
 3944 547c C52F0000 		_ADR	RFROM
 3945 5480 99350000 		_ADR	BASE
 3946 5484 852F0000 		_ADR	STORE			// restore radix
 3947 5488 DB2C0000 		_UNNEST
 3948              	
 3949              	/*******************************
 3950              	   TRACE. display in hexadecimal
 3951              	   TRACE. use a different buffer 
 3952              	   than DOT  to avoid current 
 3953              	   display overwrite.
 3954              	*******************************/ 
ARM GAS  forth.s 			page 185


 3955              	TDOT: // ( u -- )
 3956 548c 504700BF 		_NEST 
 3957 5490 99350000 		_ADR BASE 
 3958 5494 992F0000 		_ADR AT 
 3959 5498 09300000 		_ADR TOR
 3960 549c 113D0000 		_ADR HEX  
 3961 54a0 2D360000 		_ADR HLD 
 3962 54a4 992F0000 		_ADR AT 
 3963 54a8 09300000 		_ADR TOR   // R: base *hold 
 3964 54ac 2D3A0000 		_ADR HERE 
 3965 54b0 FF2E0000 		_DOLIT 160 
 3965      A0000000 
 3966 54b8 51310000 		_ADR PLUS
 3967 54bc 8D300000 		_ADR DUPP 
 3968 54c0 09300000 		_ADR TOR  
 3969 54c4 2D360000 		_ADR HLD 
 3970 54c8 852F0000 		_ADR STORE
 3971 54cc FF2E0000 		_DOLIT 0  
 3971      00000000 
 3972 54d4 613C0000 		_ADR DIGS  
 3973 54d8 7D300000 		_ADR DROP
 3974 54dc FF2E0000 		_DOLIT '$'
 3974      24000000 
 3975 54e4 153C0000 		_ADR HOLD 
 3976 54e8 2D360000 		_ADR HLD 
 3977 54ec 992F0000 		_ADR AT
 3978 54f0 C52F0000 		_ADR RFROM   
 3979 54f4 B1300000 		_ADR OVER 
 3980 54f8 61310000 		_ADR SUBB 
 3981 54fc 19400000 		_ADR SPACE 
 3982 5500 6D400000 		_ADR TYPEE 
 3983 5504 C52F0000 		_ADR RFROM 
 3984 5508 2D360000 		_ADR HLD 
 3985 550c 852F0000 		_ADR STORE 
 3986 5510 C52F0000 		_ADR RFROM 
 3987 5514 99350000 		_ADR BASE 
 3988 5518 852F0000 		_ADR STORE 
 3989 551c DB2C0000 		_UNNEST 
 3990              	
 3991              	/**********************
 3992              	   .S	  ( ... -- ... )
 3993              	 	Display the contents 
 3994              		of the data stack.
 3995              	*************************/
 3996 5520 E8530000 		_HEADER DOTS,2,".S"
 3996      022E5300 
 3997 5528 504700BF 		_NEST
 3998 552c E1390000 		_ADR	DEPTH	// stack depth
 3999 5530 09300000 		_ADR	TOR		// start count down loop
 4000 5534 672F0000 		_BRAN	DOTS2  // skip first pass
 4000      48550000 
 4001              	DOTS1:
 4002 553c F52F0000 		_ADR	RAT
 4003 5540 053A0000 		_ADR	PICK
 4004 5544 8D540000 		_ADR	TDOT // index stack, display contents
 4005              	DOTS2:
 4006 5548 212F0000 		_DONXT	DOTS1 // loop till done
ARM GAS  forth.s 			page 186


 4006      3C550000 
 4007 5550 A1400000 		_ADR	CR 
 4008 5554 DB2C0000 		_UNNEST
 4009              	
 4010              	RBASE: 
 4011 5558 47F8046D 		_PUSH 
 4012 555c 4FF47F46 		_MOV32 TOS,RPP 
 4012      C2F20106 
 4013 5564 FDF7B6BB 		_NEXT 
 4014              	
 4015              	
 4016              	/**************************
 4017              	  R.  display return stack 
 4018              	**************************/
 4019              	RDOT: 
 4020 5568 504700BF 		_NEST 
 4021 556c 59550000 		_ADR RBASE
 4022 5570 69300000 		_ADR RPAT 
 4023 5574 61310000 		_ADR SUBB
 4024 5578 31320000 		_ADR CELLSL   
 4025 557c FF2E0000 		_DOLIT 2
 4025      02000000 
 4026 5584 61310000 		_ADR SUBB 
 4027 5588 09300000 		_ADR TOR
 4028 558c 59550000 		_ADR RBASE 
 4029 5590 FD310000 	1:	_ADR CELLM 
 4030 5594 8D300000 		_ADR DUPP 
 4031 5598 992F0000 		_ADR AT 
 4032 559c 8D540000 		_ADR TDOT 
 4033 55a0 C52F0000 		_ADR RFROM   
 4034 55a4 BD310000 		_ADR ONEM 
 4035 55a8 8D300000 		_ADR DUPP
 4036 55ac 09300000 		_ADR TOR 
 4037 55b0 C5330000 		_ADR ZEQUAL   
 4038 55b4 3F2F0000 		_QBRAN 1b
 4038      90550000 
 4039 55bc C52F0000 		_ADR RFROM  
 4040 55c0 9D320000 		_ADR DDROP
 4041 55c4 A1400000 		_ADR CR   
 4042 55c8 DB2C0000 		_UNNEST 
 4043              	
 4044              	/**************************
 4045              		TRACE ( -- )
 4046              		display stacks content 
 4047              	**************************/
 4048 55cc 24550000 		_HEADER TRACE,5,"TRACE"
 4048      05545241 
 4048      434500BF 
 4049 55d8 504700BF 		_NEST
 4050 55dc A1400000 		_ADR CR 
 4051 55e0 FF2E0000 		_DOLIT '>' 
 4051      3E000000 
 4052 55e8 FF2E0000 		_DOLIT 'S'
 4052      53000000 
 4053 55f0 9D2D0000 		_ADR EMIT 
 4054 55f4 9D2D0000 		_ADR EMIT  
 4055 55f8 29550000 		_ADR DOTS
ARM GAS  forth.s 			page 187


 4056 55fc FF2E0000 		_DOLIT '>'
 4056      3E000000 
 4057 5604 FF2E0000 		_DOLIT 'R'
 4057      52000000 
 4058 560c 9D2D0000 		_ADR EMIT 
 4059 5610 9D2D0000 		_ADR EMIT 
 4060 5614 69550000 		_ADR RDOT 
 4061 5618 DB2C0000 		_UNNEST 
 4062              	
 4063              	
 4064              	/*****************************
 4065              	    >NAME	( ca -- na | F )
 4066              	 	Convert code address 
 4067              		to a name address.
 4068              	*****************************/
 4069 561c D0550000 		_HEADER TNAME,5,">NAME"
 4069      053E4E41 
 4069      4D4500BF 
 4070 5628 504700BF 		_NEST
 4071 562c 09300000 		_ADR	TOR			//  
 4072 5630 45360000 		_ADR	CNTXT			//  va
 4073 5634 992F0000 		_ADR	AT			//  na
 4074              	TNAM1:
 4075 5638 8D300000 		_ADR	DUPP			//  na na
 4076 563c 3F2F0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4076      6C560000 
 4077 5644 8D300000 		_ADR	DUPP			//  na na
 4078 5648 A1450000 		_ADR	NAMET			//  na ca
 4079 564c F52F0000 		_ADR	RAT			//  na ca code
 4080 5650 F9300000 		_ADR	XORR			//  na f --
 4081 5654 3F2F0000 		_QBRAN	TNAM2
 4081      6C560000 
 4082 565c FD310000 		_ADR	CELLM			//  la 
 4083 5660 992F0000 		_ADR	AT			//  next_na
 4084 5664 672F0000 		_BRAN	TNAM1
 4084      38560000 
 4085              	TNAM2:	
 4086 566c C52F0000 		_ADR	RFROM
 4087 5670 7D300000 		_ADR	DROP			//  0|na --
 4088 5674 DB2C0000 		_UNNEST			// 0
 4089              	
 4090              	/********************************
 4091              	    .ID	 ( na -- )
 4092              	 	Display the name at address.
 4093              	********************************/
 4094 5678 20560000 		_HEADER DOTID,3,".ID"
 4094      032E4944 
 4095 5680 504700BF 		_NEST
 4096 5684 61320000 		_ADR	QDUP			// if zero no name
 4097 5688 3F2F0000 		_QBRAN	DOTI1
 4097      A8560000 
 4098 5690 E5340000 		_ADR	COUNT
 4099 5694 FF2E0000 		_DOLIT	0x1F
 4099      1F000000 
 4100 569c D1300000 		_ADR	ANDD			// mask lexicon bits
 4101 56a0 6D400000 		_ADR	TYPEE
 4102 56a4 DB2C0000 		_UNNEST			// display name string
ARM GAS  forth.s 			page 188


 4103              	DOTI1:
 4104 56a8 09410000 		_DOTQP	9," {noName}"
 4104      09207B6E 
 4104      6F4E616D 
 4104      657D00BF 
 4105 56b8 DB2C0000 		_UNNEST
 4106              	
 4107              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4108              	.if WANT_SEE 
 4109              	/*******************************
 4110              	    SEE	 ( -- //  string> )
 4111              	 	A simple decompiler.
 4112              	*******************************/
 4113              		_HEADER SEE,3,"SEE"
 4114              		_NEST
 4115              		_ADR	TICK	//  ca --, starting address
 4116              		_ADR	CR	
 4117              		_DOLIT	20
 4118              		_ADR	TOR
 4119              	SEE1:
 4120              		_ADR	CELLP			//  a
 4121              		_ADR	DUPP			//  a a
 4122              		_ADR	DECOMP		//  a
 4123              		_DONXT	SEE1
 4124              		_ADR	DROP
 4125              		_UNNEST
 4126              	
 4127              	/*************************
 4128              	 	DECOMPILE ( a -- )
 4129              	 	Convert code in a.  
 4130              		Display name of command or as data.
 4131              	*************************************/
 4132              		_HEADER DECOMP,9,"DECOMPILE"
 4133              		_NEST
 4134              		_ADR	DUPP			//  a a
 4135              	// 	_ADR	TOR			//  a
 4136              		_ADR	AT			//  a code
 4137              		_ADR	DUPP			//  a code code
 4138              		_DOLIT	0xF800D000 //0xF800F800
 4139              		_ADR	ANDD
 4140              		_DOLIT	0xF000D000 //0xF800F000
 4141              		_ADR	EQUAL			//  a code ?
 4142              		_ADR	INVER 
 4143              		_QBRAN	DECOM2	//  not a command
 4144              		//  a valid_code --, extract address and display name
 4145              		MOVW	IP,#0xFFE
 4146              		MOV	WP,TOS
 4147              		LSL	TOS,TOS,#21		//  get bits 22-12
 4148              		ASR	TOS,TOS,#9		//  with sign extension
 4149              		LSR	WP,WP,#15		//  get bits 11-1
 4150              		AND	WP,WP,IP		//  retain only bits 11-1
 4151              		ORR	TOS,TOS,WP		//  get bits 22-1
 4152              		NOP
 4153              		_ADR	OVER			//  a offset a
 4154              		_ADR	PLUS			//  a target-4
 4155              		_ADR	CELLP			//  a target
 4156              		_ADR	TNAME			//  a na/0 --, is it a name?
ARM GAS  forth.s 			page 189


 4157              		_ADR	QDUP			//  name address or zero
 4158              		_QBRAN	DECOM1
 4159              		_ADR	SPACE			//  a na
 4160              		_ADR	DOTID			//  a --, display name
 4161              	// 	_ADR	RFROM			//  a
 4162              		_ADR	DROP
 4163              		_UNNEST
 4164              	DECOM1:	// _ADR	RFROM		//  a
 4165              		_ADR	AT			//  data
 4166              		_ADR	UDOT			//  display data
 4167              		_UNNEST
 4168              	DECOM2:
 4169              		_ADR	UDOT
 4170              	// 	_ADR	RFROM
 4171              		_ADR	DROP
 4172              		_UNNEST
 4173              	.endif 
 4174              	
 4175              	
 4176              	/*********************
 4177              	    WORDS	( -- )
 4178              	 	Display the names 
 4179              		in the context vocabulary.
 4180              	*******************************/
 4181 56bc 7C560000 		_HEADER WORDS,5,"WORDS"
 4181      05574F52 
 4181      445300BF 
 4182 56c8 504700BF 		_NEST
 4183 56cc A1400000 		_ADR	CR
 4184 56d0 45360000 		_ADR	CNTXT
 4185 56d4 992F0000 		_ADR	AT			// only in context
 4186              	WORS1:
 4187 56d8 61320000 		_ADR	QDUP			// ?at end of list
 4188 56dc 3F2F0000 		_QBRAN	WORS2
 4188      00570000 
 4189 56e4 8D300000 		_ADR	DUPP
 4190 56e8 19400000 		_ADR	SPACE
 4191 56ec 81560000 		_ADR	DOTID			// display a name
 4192 56f0 FD310000 		_ADR	CELLM
 4193 56f4 992F0000 		_ADR	AT
 4194 56f8 672F0000 		_BRAN	WORS1
 4194      D8560000 
 4195              	WORS2:
 4196 5700 DB2C0000 		_UNNEST
 4197              	
 4198              	
 4199              	/*************************
 4200              		MARK <string> ( -- )
 4201              	    create forget point 
 4202              		in dictionary 
 4203              	*************************/	
 4204 5704 C0560000 		_HEADER MARK,4,"MARK"
 4204      044D4152 
 4204      4B0000BF 
 4205 5710 504700BF 		_NEST
 4206 5714 1D530000 		_ADR CREAT 
 4207 5718 11520000 		_ADR DODOES 
ARM GAS  forth.s 			page 190


 4208 571c DB2C0000 		_UNNEST
 4209 5720 504700BF 		_NEST  
 4210 5724 C52F0000 		_ADR RFROM 
 4211 5728 FF2E0000 		_DOLIT 8
 4211      08000000 
 4212 5730 61310000 		_ADR SUBB
 4213 5734 29560000 		_ADR TNAME
 4214 5738 FD310000 		_ADR CELLM
 4215 573c 992F0000 		_ADR AT  
 4216 5740 85360000 		_ADR LAST 
 4217 5744 852F0000 		_ADR STORE 
 4218 5748 F9500000 		_ADR OVERT
 4219 574c DB2C0000 		_UNNEST 
 4220              	
 4221              	/*********************************
 4222              		ARRAY "name" ( n -- )
 4223              	    create an array of n elements 
 4224              	*********************************/
 4225 5750 08570000 		_HEADER ARRAY,5,"ARRAY"
 4225      05415252 
 4225      415900BF 
 4226 575c 504700BF 		_NEST 
 4227 5760 81450000 		_ADR	TOKEN
 4228 5764 FD4F0000 		_ADR	SNAME
 4229 5768 F9500000 		_ADR	OVERT
 4230 576c E52C0000 		_ADR	COMPI_NEST
 4231 5770 FF2E0000 		_DOLIT	DO_ARRAY
 4231      9C570000 
 4232 5778 55510000 		_ADR	CALLC
 4233 577c FF2E0000 		_DOLIT	UNNEST 
 4233      DA2C0000 
 4234 5784 55510000 		_ADR	CALLC  
 4235 5788 FF2E0000 		_DOLIT  4 
 4235      04000000 
 4236 5790 71310000 		_ADR    STAR 
 4237 5794 CD4B0000 		_ADR    ALLOT 
 4238 5798 DB2C0000 		_UNNEST 	
 4239              	
 4240              	// does> du array
 4241              	DO_ARRAY:
 4242 579c 504700BF 		_NEST  
 4243 57a0 FF2E0000 		_DOLIT 4 
 4243      04000000 
 4244 57a8 71310000 		_ADR STAR  
 4245 57ac F52F0000 		_ADR RAT  
 4246 57b0 ED310000 		_ADR CELLP 
 4247 57b4 51310000 		_ADR PLUS  
 4248 57b8 DB2C0000 		_UNNEST 
 4249              	
 4250              	
 4251              	/****************
 4252              	  cold start
 4253              	*****************/
 4254              	
 4255              	/**********************************
 4256              	    VER	 ( -- n )
 4257              	 	Return the version 
ARM GAS  forth.s 			page 191


 4258              		number of this implementation.
 4259              	hidden word used by COLD
 4260              	**********************************/
 4261              	VERSN:
 4262 57bc 504700BF 		_NEST
 4263 57c0 FF2E0000 		_DOLIT	VER*256+EXT
 4263      00010000 
 4264 57c8 DB2C0000 		_UNNEST
 4265              	
 4266              	/*********************
 4267              	    hi	  ( -- )
 4268              	 	Display the sign-on 
 4269              		message.
 4270              	***********************/
 4271 57cc 54570000 		_HEADER HI,2,"HI"
 4271      02484900 
 4272 57d4 504700BF 		_NEST
 4273 57d8 A1400000 		_ADR	CR	// initialize I/O
 4274 57dc 09410000 		_DOTQP	17, "beyond Jupiter, v" 
 4274      11626579 
 4274      6F6E6420 
 4274      4A757069 
 4274      7465722C 
 4275 57f4 99350000 		_ADR	BASE
 4276 57f8 992F0000 		_ADR	AT
 4277 57fc 113D0000 		_ADR	HEX	// save radix
 4278 5800 BD570000 		_ADR	VERSN
 4279 5804 F53B0000 		_ADR	BDIGS
 4280 5808 FF2E0000 		_DOLIT  0 
 4280      00000000 
 4281 5810 413C0000 		_ADR	DIG
 4282 5814 413C0000 		_ADR	DIG
 4283 5818 FF2E0000 		_DOLIT	'.'
 4283      2E000000 
 4284 5820 153C0000 		_ADR	HOLD
 4285 5824 613C0000 		_ADR	DIGS
 4286 5828 BD3C0000 		_ADR	EDIGS
 4287 582c 6D400000 		_ADR	TYPEE	// format version number
 4288 5830 99350000 		_ADR	BASE
 4289 5834 852F0000 		_ADR	STORE
 4290 5838 A1400000 		_ADR	CR
 4291 583c DB2C0000 		_UNNEST			// restore radix
 4292              	
 4293              	/***********************
 4294              	   HI_BOTH ( -- )
 4295              	   display sign-on 
 4296              	   on both CONSOLE
 4297              	***********************/
 4298              	HI_BOTH:
 4299 5840 504700BF 	    _NEST 
 4300 5844 3D0A0000 		_ADR LOCAL 
 4301 5848 6D0A0000 		_ADR CONSOLE 
 4302 584c D5570000 		_ADR HI 
 4303 5850 550A0000 		_ADR SERIAL 
 4304 5854 6D0A0000 		_ADR CONSOLE 
 4305 5858 D5570000 		_ADR HI
 4306 585c DB2C0000 		_UNNEST 
ARM GAS  forth.s 			page 192


 4307              	
 4308              	/**********************
 4309              	 check if PS2 keyboard 
 4310              	 present.
 4311              	**********************/
 4312              	PS2_QUERY: 
 4313 5860 504700BF 		_NEST 
 4314 5864 FF2E0000 		_DOLIT 400 
 4314      90010000 
 4315 586c 352E0000 		_ADR PAUSE
 4316 5870 5D180000 		_ADR PS2_QKEY
 4317 5874 3F2F0000 		_QBRAN 1f
 4317      90580000 
 4318 587c FF2E0000 		_DOLIT BAT_OK 
 4318      AA000000 
 4319 5884 F9300000 		_ADR XORR 
 4320 5888 3F2F0000 		_QBRAN 9f 
 4320      D4580000 
 4321 5890 451A0000 	1:	_ADR KBD_RST
 4322 5894 FF2E0000 		_DOLIT BAT_OK 
 4322      AA000000 
 4323 589c F9300000 		_ADR XORR  
 4324 58a0 3F2F0000 		_QBRAN 9f  
 4324      D4580000 
 4325              	// no ps2 keyboard 
 4326              	// swith to serial console
 4327 58a8 A1400000 		_ADR CR 
 4328 58ac 09410000 		_DOTQP 25,"no PS2 keyboard detected."
 4328      196E6F20 
 4328      50533220 
 4328      6B657962 
 4328      6F617264 
 4329 58cc 550A0000 		_ADR SERIAL 
 4330 58d0 6D0A0000 		_ADR CONSOLE 
 4331 58d4 DB2C0000 	9:	_UNNEST 
 4332              	
 4333              	/*************************
 4334              	   check PA8 to 
 4335              	   select console 
 4336              	   PA8 -> low  LOCAL 
 4337              	   PA8 -> high SERIAL 
 4338              	*************************/
 4339              	IF_SENSE:
 4340 58d8 504700BF 		_NEST 
 4341 58dc 3D0A0000 		_ADR LOCAL 
 4342 58e0 FF2E0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4342      10000240 
 4343 58e8 992F0000 		_ADR AT 
 4344 58ec FF2E0000 		_DOLIT (1<<8)
 4344      00010000 
 4345 58f4 D1300000 		_ADR ANDD 
 4346 58f8 3F2F0000 		_QBRAN 9f 
 4346      04590000 
 4347 5900 AD310000 		_ADR ONEP 
 4348 5904 6D0A0000 	9:  _ADR CONSOLE 
 4349 5908 DB2C0000 		_UNNEST 
 4350              	
ARM GAS  forth.s 			page 193


 4351              	/****************************
 4352              	   display READY on active
 4353              	   console
 4354              	***************************/
 4355              	READY:
 4356 590c 504700BF 	    _NEST 
 4357 5910 09410000 		_DOTQP 5,"READY"
 4357      05524541 
 4357      445900BF 
 4358 591c A1400000 		_ADR  CR 
 4359 5920 DB2C0000 	    _UNNEST 
 4360              	
 4361              	/********************
 4362              	    COLD	( -- )
 4363              	 	The high level cold 
 4364              		start sequence.
 4365              	**************************/
 4366 5924 D0570000 		.word	LINK 
 4367              		LINK = . 
 4368 5928 04       	_LASTN:	.byte  4
 4369 5929 434F4C44 		.ascii "COLD"
 4370 592d 0000BF   		.p2align 2	
 4371              	COLD:
 4372 5930 00B5FAF7 		_CALL forth_init 
 4372      01FE5DF8 
 4372      04EB
 4373 593a DFF85CC0 		ldr IP,=COLD1 
 4374 593e FDF7C9B9 		_NEXT
 4375 5942 00BF     		.p2align 2 
 4376              	COLD1:
 4377 5944 FF2E0000 		_DOLIT  0 
 4377      00000000 
 4378 594c 692E0000 		_ADR ULED // turn off user LED 
 4379 5950 FF2E0000 		_DOLIT	UZERO
 4379      64080000 
 4380 5958 FF2E0000 		_DOLIT	UPP
 4380      00000020 
 4381 5960 FF2E0000 		_DOLIT	ULAST-UZERO
 4381      B8000000 
 4382 5968 CD3A0000 		_ADR	MOVE 			// initialize user area
 4383 596c 054B0000 		_ADR	PRESE			// initialize stack and TIB
 4384 5970 F11C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4385 5974 61580000 		_ADR 	PS2_QUERY  
 4386 5978 81350000 		_ADR	TBOOT
 4387 597c 7D3A0000 		_ADR	ATEXE			// application boot
 4388 5980 F9500000 		_ADR	OVERT
 4389 5984 D9580000 		_ADR	IF_SENSE
 4390 5988 0D590000 		_ADR    READY 
 4391 598c 672F0000 		_BRAN	QUIT			// start interpretation
 4391      244B0000 
 4392              	COLD2:
 4393              		.p2align 2 	
 4394              	CTOP:
 4395 5994 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4396              	
 4397              	
 4398 5998 44590000 	  .end 
ARM GAS  forth.s 			page 194


ARM GAS  forth.s 			page 195


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 196


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 197


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 198


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 199


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 200


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 BCHAR
          macros.inc:81     *ABS*:0000000000000024 TMP
          macros.inc:82     *ABS*:0000000000000028 CSPAN
          macros.inc:83     *ABS*:000000000000002c TOIN
ARM GAS  forth.s 			page 201


          macros.inc:84     *ABS*:0000000000000030 NTIBB
          macros.inc:85     *ABS*:0000000000000034 TIBUF
             forth.s:3103   .text:0000000000004ac0 EVAL
          macros.inc:87     *ABS*:000000000000003c VHOLD
          macros.inc:88     *ABS*:0000000000000040 CTXT
          macros.inc:89     *ABS*:0000000000000044 FORTH_CTOP
          macros.inc:90     *ABS*:0000000000000048 USER_CTOP
          macros.inc:91     *ABS*:000000000000004c LASTN
          macros.inc:92     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:93     *ABS*:0000000000000050 RX_QUEUE
          macros.inc:94     *ABS*:0000000000000060 RX_HEAD
          macros.inc:95     *ABS*:0000000000000064 RX_TAIL
          macros.inc:96     *ABS*:0000000000000068 VID_CNTR
          macros.inc:97     *ABS*:000000000000006c VID_STATE
          macros.inc:98     *ABS*:0000000000000070 VID_FIELD
          macros.inc:99     *ABS*:0000000000000074 VID_BUFFER
          macros.inc:100    *ABS*:0000000000000078 KBD_STRUCT
          macros.inc:101    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:102    *ABS*:000000000000007c KBD_QUEUE
          macros.inc:103    *ABS*:000000000000008c KBD_QHEAD
          macros.inc:104    *ABS*:0000000000000090 KBD_QTAIL
          macros.inc:105    *ABS*:0000000000000094 ROW
          macros.inc:106    *ABS*:0000000000000098 COL
          macros.inc:107    *ABS*:000000000000009c BK_COLOR
          macros.inc:108    *ABS*:00000000000000a0 PEN_COLOR
          macros.inc:109    *ABS*:00000000000000a4 VFPSW
          macros.inc:110    *ABS*:00000000000000a8 VFBASE
          macros.inc:111    *ABS*:00000000000000ac BEEP_DTMR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000c64 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000948 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001540 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002cd4 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3124   .text:0000000000004b04 PRESE
             forth.s:2297   .text:0000000000004108 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002d20 CFSR
             forth.s:542    .text:000000000000308c DUPP
             forth.s:477    .text:0000000000003008 TOR
ARM GAS  forth.s 			page 202


             forth.s:326    .text:0000000000002efe DOLIT
             forth.s:1167   .text:0000000000003598 BASE
             forth.s:411    .text:0000000000002f84 STORE
             forth.s:2381   .text:0000000000004204 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:448    .text:0000000000002fc4 RFROM
             forth.s:577    .text:00000000000030d0 ANDD
             forth.s:367    .text:0000000000002f3e QBRAN
             forth.s:145    .text:0000000000002d40 BFAR
             forth.s:179    .text:0000000000002d9c EMIT
             forth.s:2193   .text:0000000000004018 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:0000000000002048 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2239   .text:00000000000040a0 CR
             forth.s:421    .text:0000000000002f98 AT
             forth.s:643    .text:0000000000003160 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2399   .text:0000000000004238 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:773    .text:0000000000003260 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:634    .text:0000000000003150 PLUS
             forth.s:1080   .text:00000000000034e4 COUNT
             forth.s:2221   .text:000000000000406c TYPEE
             forth.s:917    .text:0000000000003394 CLZ
             forth.s:550    .text:000000000000309c SWAP
             forth.s:625    .text:0000000000003140 LSHIFT
               fpu.s:123    .text:0000000000002068 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3136   .text:0000000000004b24 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:3002   .text:000000000000497c ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
ARM GAS  forth.s 			page 203


              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:262    .text:0000000000002e68 ULED
             forth.s:1140   .text:0000000000003550 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:616    .text:0000000000003128 RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:0000000000001fea fpu_init
          ser-term.s:56     .text:0000000000000976 ser_init
             tvout.s:74     .text:0000000000000bb4 tv_init
           ps2_kbd.s:307    .text:0000000000001760 kbd_init
         spi-flash.s:41     .text:0000000000001b74 flash_spi_init
             forth.s:4371   .text:0000000000005930 COLD
             forth.s:83     .text:0000000000002ccc NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:908    .text:000000000000091c ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:4298   .text:0000000000005840 HI_BOTH
           ps2_kbd.s:396    .text:000000000000185c PS2_QKEY
             tvout.s:563    .text:0000000000001124 TV_EMIT
             forth.s:3040   .text:00000000000049dc INTER
             forth.s:4368   .text:0000000000005928 _LASTN
             forth.s:4394   .text:0000000000005994 CTOP
             forth.s:4367   .text:0000000000005928 LINK
ARM GAS  forth.s 			page 204


              init.s:913    .text:000000000000091c $d
          ser-term.s:33     .text:0000000000000948 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:00000000000009ce $d
          ser-term.s:90     .text:00000000000009d2 _SER_QKEY
          ser-term.s:90     .text:00000000000009dc SER_QKEY
          ser-term.s:110    .text:0000000000000a08 $d
          ser-term.s:110    .text:0000000000000a0c _SER_EMIT
          ser-term.s:110    .text:0000000000000a18 SER_EMIT
          ser-term.s:124    .text:0000000000000a32 $d
          ser-term.s:124    .text:0000000000000a36 _LOCAL
          ser-term.s:124    .text:0000000000000a3c $t
          ser-term.s:124    .text:0000000000000a3c LOCAL
          ser-term.s:133    .text:0000000000000a48 $d
          ser-term.s:133    .text:0000000000000a4c _SERIAL
          ser-term.s:133    .text:0000000000000a54 SERIAL
          ser-term.s:142    .text:0000000000000a60 $d
          ser-term.s:142    .text:0000000000000a64 _CONSOLE
          ser-term.s:142    .text:0000000000000a6c $t
          ser-term.s:142    .text:0000000000000a6c CONSOLE
          ser-term.s:164    .text:0000000000000a8c $d
          ser-term.s:164    .text:0000000000000a90 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000a9c ANSI_PARAM
          ser-term.s:166    .text:0000000000000aa0 $d
             forth.s:684    .text:00000000000031ac ONEP
             forth.s:1541   .text:00000000000038e0 SLMOD
             forth.s:396    .text:0000000000002f66 BRAN
             forth.s:692    .text:00000000000031bc ONEM
             forth.s:90     .text:0000000000002cda UNNEST
          ser-term.s:191    .text:0000000000000b0c _ANSI_ESC
          ser-term.s:191    .text:0000000000000b14 ANSI_ESC
          ser-term.s:193    .text:0000000000000b18 $d
          ser-term.s:203    .text:0000000000000b38 _SER_AT
          ser-term.s:203    .text:0000000000000b40 SER_AT
          ser-term.s:205    .text:0000000000000b44 $d
          ser-term.s:219    .text:0000000000000b74 _SER_CLS
          ser-term.s:219    .text:0000000000000b7c $t
          ser-term.s:219    .text:0000000000000b7c SER_CLS
          ser-term.s:221    .text:0000000000000b80 $d
          ser-term.s:228    .text:0000000000000ba4 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
ARM GAS  forth.s 			page 205


             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000bb4 $t
             tvout.s:150    .text:0000000000000c90 state_vsync
             tvout.s:191    .text:0000000000000ce4 state_pre_video
             tvout.s:202    .text:0000000000000cf6 state_video_out
             tvout.s:237    .text:0000000000000d54 state_post_video
             tvout.s:254    .text:0000000000000d7a tv_isr_exit
             tvout.s:180    .text:0000000000000cca sync_end
             tvout.s:246    .text:0000000000000d66 frame_end
             tvout.s:264    .text:0000000000000d7c $d
             tvout.s:264    .text:0000000000000d80 _BACKCOLOR
             tvout.s:264    .text:0000000000000d8c BACKCOLOR
             tvout.s:271    .text:0000000000000d98 $d
             tvout.s:271    .text:0000000000000d9c _PENCOLOR
             tvout.s:271    .text:0000000000000da6 $t
             tvout.s:271    .text:0000000000000da8 PENCOLOR
             tvout.s:278    .text:0000000000000db4 $d
             tvout.s:278    .text:0000000000000db8 _CURSOR_COL
             tvout.s:278    .text:0000000000000dc0 CURSOR_COL
             tvout.s:285    .text:0000000000000dcc $d
             tvout.s:285    .text:0000000000000dd0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000dd4 $t
             tvout.s:285    .text:0000000000000dd4 CURSOR_ROW
             tvout.s:292    .text:0000000000000de0 $d
             tvout.s:292    .text:0000000000000de4 _ROWY
             tvout.s:292    .text:0000000000000dea $t
             tvout.s:292    .text:0000000000000dec ROWY
             tvout.s:299    .text:0000000000000df8 $d
             tvout.s:299    .text:0000000000000dfc _COLX
             tvout.s:299    .text:0000000000000e02 $t
             tvout.s:299    .text:0000000000000e04 COLX
             tvout.s:306    .text:0000000000000e10 $d
             tvout.s:306    .text:0000000000000e14 _FONT
             tvout.s:306    .text:0000000000000e1c FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000e28 $d
             tvout.s:313    .text:0000000000000e2c _VIDBUFF
             tvout.s:313    .text:0000000000000e34 $t
             tvout.s:313    .text:0000000000000e34 VIDBUFF
             tvout.s:325    .text:0000000000000e3e $d
             tvout.s:325    .text:0000000000000e42 _PLOT
             tvout.s:325    .text:0000000000000e48 PLOT
             tvout.s:373    .text:0000000000000ecc plot_op
             tvout.s:341    .text:0000000000000e74 op_back
             tvout.s:350    .text:0000000000000e8e op_pen
ARM GAS  forth.s 			page 206


             tvout.s:359    .text:0000000000000ea8 op_invert
             tvout.s:363    .text:0000000000000eb0 op_xor
             tvout.s:373    .text:0000000000000ecc $d
             tvout.s:378    .text:0000000000000ed4 _VSYNC
             tvout.s:378    .text:0000000000000eda $t
             tvout.s:378    .text:0000000000000edc VSYNC
             tvout.s:386    .text:0000000000000ee6 $d
             tvout.s:386    .text:0000000000000eea _CLS
             tvout.s:386    .text:0000000000000eee $t
             tvout.s:386    .text:0000000000000ef0 CLS
             tvout.s:410    .text:0000000000000f32 $d
             tvout.s:410    .text:0000000000000f36 _CLRLINE
             tvout.s:410    .text:0000000000000f3e $t
             tvout.s:410    .text:0000000000000f40 CLRLINE
             tvout.s:412    .text:0000000000000f44 $d
             forth.s:652    .text:0000000000003170 STAR
             forth.s:1768   .text:0000000000003b14 FILL
             tvout.s:427    .text:0000000000000f78 _SCROLLUP
             tvout.s:427    .text:0000000000000f84 SCROLLUP
             tvout.s:429    .text:0000000000000f88 $d
             forth.s:1736   .text:0000000000003acc MOVE
             tvout.s:448    .text:0000000000000fd0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000fdc SCROLLDOWN
             tvout.s:450    .text:0000000000000fe0 $d
             tvout.s:467    .text:0000000000001020 _TV_CRLF
             tvout.s:467    .text:0000000000001028 $t
             tvout.s:467    .text:0000000000001028 TV_CRLF
             tvout.s:482    .text:000000000000104a $d
             tvout.s:482    .text:000000000000104e _RIGHT
             tvout.s:482    .text:0000000000001054 $t
             tvout.s:482    .text:0000000000001054 RIGHT
             tvout.s:495    .text:0000000000001068 $d
             tvout.s:495    .text:000000000000106c _LEFT
             tvout.s:495    .text:0000000000001074 LEFT
             tvout.s:511    .text:00000000000010a0 FONT_PIXEL
             tvout.s:518    .text:00000000000010b0 INCR_X
             tvout.s:525    .text:00000000000010bc NEXT_PIXEL
             tvout.s:534    .text:00000000000010c4 CHAR_ROW
             tvout.s:536    .text:00000000000010c8 $d
             forth.s:823    .text:00000000000032c4 DDUP
             forth.s:468    .text:0000000000002ff4 RAT
             forth.s:348    .text:0000000000002f20 DONXT
             forth.s:814    .text:00000000000032b0 TDROP
             tvout.s:551    .text:0000000000001104 CHAR_FONT
             tvout.s:552    .text:0000000000001104 $t
             tvout.s:563    .text:0000000000001118 $d
             tvout.s:563    .text:000000000000111c _TV_EMIT
             tvout.s:563    .text:0000000000001124 $t
             tvout.s:565    .text:0000000000001128 $d
             forth.s:976    .text:0000000000003410 ULESS
             tvout.s:593    .text:00000000000011ac CTRL_KEY
             forth.s:783    .text:0000000000003274 ROT
             forth.s:439    .text:0000000000002fb8 CAT
             tvout.s:660    .text:0000000000001294 SHOW_CURSOR
             tvout.s:691    .text:000000000000131c HIDE_CURSOR
             forth.s:951    .text:00000000000033d8 EQUAL
             tvout.s:650    .text:0000000000001274 BACK_SPACE
ARM GAS  forth.s 			page 207


             forth.s:534    .text:000000000000307c DROP
             tvout.s:618    .text:000000000000121c CAR_RET
             tvout.s:629    .text:0000000000001234 LN_FEED
             tvout.s:619    .text:000000000000121c $t
             tvout.s:620    .text:0000000000001220 $d
             tvout.s:630    .text:0000000000001234 $t
             tvout.s:631    .text:0000000000001238 $d
             forth.s:595    .text:00000000000030f8 XORR
             tvout.s:651    .text:0000000000001274 $t
             tvout.s:652    .text:0000000000001278 $d
             tvout.s:660    .text:0000000000001288 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001294 $t
             tvout.s:663    .text:0000000000001298 $d
             forth.s:765    .text:0000000000003250 TWOSL
             forth.s:429    .text:0000000000002fa4 CSTOR
             forth.s:805    .text:000000000000329c DDROP
             tvout.s:691    .text:0000000000001310 _HIDE_CURSOR
             tvout.s:691    .text:000000000000131c $t
             tvout.s:694    .text:0000000000001320 $d
             forth.s:586    .text:00000000000030e4 ORR
             tvout.s:704    .text:0000000000001348 _TV_AT
             tvout.s:704    .text:000000000000134e $t
             tvout.s:704    .text:0000000000001350 TV_AT
             tvout.s:719    .text:0000000000001374 $d
             tvout.s:719    .text:0000000000001378 _INPUT
             tvout.s:719    .text:000000000000137e $t
             tvout.s:719    .text:0000000000001380 INPUT
             tvout.s:721    .text:0000000000001384 $d
             forth.s:1680   .text:0000000000003a44 PAD
             forth.s:2948   .text:00000000000048c8 ACCEP
             forth.s:560    .text:00000000000030b0 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:00000000000013b0 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
ARM GAS  forth.s 			page 208


       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
ARM GAS  forth.s 			page 209


       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:00000000000013bc sc_ascii
         mcSaite.inc:100    .text:0000000000001470 shifted
         mcSaite.inc:151    .text:00000000000014d0 altchar
         mcSaite.inc:167    .text:00000000000014e0 extended
ARM GAS  forth.s 			page 210


         mcSaite.inc:191    .text:0000000000001508 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007a KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000079 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000078 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007b KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000153e $t
           ps2_kbd.s:179    .text:000000000000166a send_bit
           ps2_kbd.s:107    .text:00000000000015a0 start_bit
           ps2_kbd.s:118    .text:00000000000015c4 parity_bit
           ps2_kbd.s:125    .text:00000000000015d8 stop_bit
           ps2_kbd.s:152    .text:000000000000162e store_code
           ps2_kbd.s:253    .text:00000000000016fe do_async_key
           ps2_kbd.s:204    .text:00000000000016ae send_parity
           ps2_kbd.s:211    .text:00000000000016c0 send_stop
           ps2_kbd.s:218    .text:00000000000016ca rx_ack_bit
           ps2_kbd.s:236    .text:00000000000016ea is_async_key
           ps2_kbd.s:286    .text:000000000000174e async_keys
           ps2_kbd.s:378    .text:0000000000001834 table_scan
           ps2_kbd.s:260    .text:0000000000001710 set_async_key
           ps2_kbd.s:295    .text:000000000000175c async_jump
           ps2_kbd.s:265    .text:000000000000171e shift_key
           ps2_kbd.s:273    .text:000000000000172e set_reset
           ps2_kbd.s:268    .text:0000000000001724 ctrl_key
           ps2_kbd.s:271    .text:000000000000172a alt_key
           ps2_kbd.s:287    .text:000000000000174e $d
           ps2_kbd.s:340    .text:00000000000017dc $d
           ps2_kbd.s:340    .text:00000000000017e0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000017ea $t
           ps2_kbd.s:340    .text:00000000000017ec KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000017fc keycode
           ps2_kbd.s:365    .text:0000000000001824 wait_code
           ps2_kbd.s:396    .text:000000000000184e $d
           ps2_kbd.s:396    .text:0000000000001852 _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000018a8 inkey_exit
           ps2_kbd.s:418    .text:00000000000018ac pause_key
           ps2_kbd.s:427    .text:00000000000018c2 do_modifiers
           ps2_kbd.s:436    .text:00000000000018da shift_down
           ps2_kbd.s:440    .text:00000000000018e0 altchar_down
           ps2_kbd.s:444    .text:00000000000018e6 ctrl_down
           ps2_kbd.s:452    .text:0000000000001902 do_capslock
           ps2_kbd.s:478    .text:0000000000001926 kbd_send
           ps2_kbd.s:553    .text:0000000000001a1a kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001a38 $d
           ps2_kbd.s:567    .text:0000000000001a3c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001a44 $t
           ps2_kbd.s:567    .text:0000000000001a44 KBD_RST
ARM GAS  forth.s 			page 211


           ps2_kbd.s:591    .text:0000000000001a8e $d
           ps2_kbd.s:591    .text:0000000000001a92 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001a9a $t
           ps2_kbd.s:591    .text:0000000000001a9c KBD_LED
           ps2_kbd.s:616    .text:0000000000001af0 $d
           ps2_kbd.s:616    .text:0000000000001af4 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001b00 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001b2a $d
           ps2_kbd.s:633    .text:0000000000001b2e _WKEY
           ps2_kbd.s:633    .text:0000000000001b38 WKEY
           ps2_kbd.s:635    .text:0000000000001b3c $d
           ps2_kbd.s:640    .text:0000000000001b54 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001b74 $t
         spi-flash.s:85     .text:0000000000001c16 $d
         spi-flash.s:85     .text:0000000000001c1a _CHIP_SEL
         spi-flash.s:85     .text:0000000000001c24 CHIP_SEL
         spi-flash.s:97     .text:0000000000001c42 $d
         spi-flash.s:97     .text:0000000000001c46 _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001c50 $t
         spi-flash.s:97     .text:0000000000001c50 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001c7e $d
         spi-flash.s:113    .text:0000000000001c82 _RD_BYTE
         spi-flash.s:113    .text:0000000000001c8a $t
         spi-flash.s:113    .text:0000000000001c8c RD_BYTE
         spi-flash.s:133    .text:0000000000001cb4 $d
         spi-flash.s:133    .text:0000000000001cb8 _WR_BYTE
         spi-flash.s:133    .text:0000000000001cc0 $t
         spi-flash.s:133    .text:0000000000001cc0 WR_BYTE
         spi-flash.s:151    .text:0000000000001ce4 $d
         spi-flash.s:151    .text:0000000000001ce8 _WR_DIS
         spi-flash.s:151    .text:0000000000001cf0 WR_DIS
         spi-flash.s:153    .text:0000000000001cf4 $d
         spi-flash.s:163    .text:0000000000001d10 _WR_ENBL
         spi-flash.s:163    .text:0000000000001d18 $t
         spi-flash.s:163    .text:0000000000001d18 WR_ENBL
         spi-flash.s:165    .text:0000000000001d1c $d
         spi-flash.s:175    .text:0000000000001d38 _RD_SR
         spi-flash.s:175    .text:0000000000001d3e $t
         spi-flash.s:175    .text:0000000000001d40 RD_SR
         spi-flash.s:177    .text:0000000000001d44 $d
         spi-flash.s:185    .text:0000000000001d68 sr_cmd
         spi-flash.s:191    .text:0000000000001d6f _SEND_ADR
         spi-flash.s:191    .text:0000000000001d78 $t
         spi-flash.s:191    .text:0000000000001d78 SEND_ADR
         spi-flash.s:193    .text:0000000000001d7c $d
         spi-flash.s:208    .text:0000000000001db0 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001dba $t
         spi-flash.s:208    .text:0000000000001dbc WAIT_DONE
         spi-flash.s:210    .text:0000000000001dc0 $d
         spi-flash.s:223    .text:0000000000001df0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001dfa $t
         spi-flash.s:223    .text:0000000000001dfc ERASE_BLK
         spi-flash.s:225    .text:0000000000001e00 $d
ARM GAS  forth.s 			page 212


         spi-flash.s:238    .text:0000000000001e28 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001e34 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001e38 $d
         spi-flash.s:256    .text:0000000000001e68 _RD_BLK
         spi-flash.s:256    .text:0000000000001e70 RD_BLK
         spi-flash.s:258    .text:0000000000001e74 $d
         spi-flash.s:278    .text:0000000000001ebc _WR_BLK
         spi-flash.s:278    .text:0000000000001ec4 WR_BLK
         spi-flash.s:280    .text:0000000000001ec8 $d
             forth.s:2461   .text:00000000000042e0 HDOT
         spi-flash.s:316    .text:0000000000001f20 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001f2c $t
         spi-flash.s:316    .text:0000000000001f2c SEARCH_FILE
         spi-flash.s:319    .text:0000000000001f30 $d
         spi-flash.s:325    .text:0000000000001f38 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001f44 ERASE_FILE
         spi-flash.s:328    .text:0000000000001f48 $d
         spi-flash.s:334    .text:0000000000001f50 _DIR
         spi-flash.s:334    .text:0000000000001f54 $t
         spi-flash.s:334    .text:0000000000001f54 DIR
         spi-flash.s:337    .text:0000000000001f58 $d
         spi-flash.s:343    .text:0000000000001f60 _SAVE
         spi-flash.s:343    .text:0000000000001f68 SAVE
         spi-flash.s:346    .text:0000000000001f6c $d
         spi-flash.s:352    .text:0000000000001f74 _LOAD
         spi-flash.s:352    .text:0000000000001f7c LOAD
         spi-flash.s:355    .text:0000000000001f80 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001fa8 p10
               fpu.s:59     .text:0000000000001fd4 _PWR10
               fpu.s:59     .text:0000000000001fda $t
               fpu.s:59     .text:0000000000001fdc PWR10
               fpu.s:90     .text:0000000000002008 $d
               fpu.s:90     .text:000000000000200c _FDI
               fpu.s:90     .text:0000000000002010 $t
               fpu.s:90     .text:0000000000002010 FDI
               fpu.s:100    .text:0000000000002022 $d
               fpu.s:100    .text:0000000000002026 _FEI
               fpu.s:100    .text:000000000000202a $t
               fpu.s:100    .text:000000000000202c FEI
               fpu.s:110    .text:000000000000203e $d
               fpu.s:110    .text:0000000000002042 _FPSCR
               fpu.s:110    .text:0000000000002048 $t
               fpu.s:123    .text:0000000000002058 $d
               fpu.s:123    .text:000000000000205c _CLR_FPSCR
               fpu.s:123    .text:0000000000002066 $t
               fpu.s:136    .text:0000000000002080 $d
               fpu.s:136    .text:0000000000002084 _TOS0
               fpu.s:136    .text:0000000000002088 $t
               fpu.s:136    .text:0000000000002088 TOS0
               fpu.s:145    .text:0000000000002094 $d
               fpu.s:145    .text:0000000000002098 _TOS1
               fpu.s:145    .text:000000000000209c $t
               fpu.s:145    .text:000000000000209c TOS1
ARM GAS  forth.s 			page 213


               fpu.s:154    .text:00000000000020a8 $d
               fpu.s:154    .text:00000000000020ac _TOS2
               fpu.s:154    .text:00000000000020b0 $t
               fpu.s:154    .text:00000000000020b0 TOS2
               fpu.s:163    .text:00000000000020bc $d
               fpu.s:163    .text:00000000000020c0 _S0FROM
               fpu.s:163    .text:00000000000020c4 $t
               fpu.s:163    .text:00000000000020c4 S0FROM
               fpu.s:172    .text:00000000000020d0 $d
               fpu.s:172    .text:00000000000020d4 _S1FROM
               fpu.s:172    .text:00000000000020d8 $t
               fpu.s:172    .text:00000000000020d8 S1FROM
               fpu.s:181    .text:00000000000020e4 $d
               fpu.s:181    .text:00000000000020e8 _S2FROM
               fpu.s:181    .text:00000000000020ec $t
               fpu.s:181    .text:00000000000020ec S2FROM
               fpu.s:192    .text:00000000000020f8 $d
               fpu.s:192    .text:00000000000020fc _FTOS
               fpu.s:192    .text:0000000000002100 $t
               fpu.s:192    .text:0000000000002100 FTOS
               fpu.s:202    .text:0000000000002110 $d
               fpu.s:202    .text:0000000000002114 _TRUNC
               fpu.s:202    .text:000000000000211a $t
               fpu.s:202    .text:000000000000211c TRUNC
               fpu.s:212    .text:000000000000212c $d
               fpu.s:212    .text:0000000000002130 _STOF
               fpu.s:212    .text:0000000000002134 $t
               fpu.s:212    .text:0000000000002134 STOF
               fpu.s:222    .text:0000000000002144 $d
               fpu.s:222    .text:0000000000002148 _FPLUS
               fpu.s:222    .text:000000000000214c FPLUS
               fpu.s:235    .text:0000000000002164 $d
               fpu.s:235    .text:0000000000002168 _FSUBB
               fpu.s:235    .text:000000000000216c FSUBB
               fpu.s:249    .text:0000000000002184 $d
               fpu.s:249    .text:0000000000002188 _FSTAR
               fpu.s:249    .text:000000000000218c FSTAR
               fpu.s:262    .text:00000000000021a4 $d
               fpu.s:262    .text:00000000000021a8 _FSLH
               fpu.s:262    .text:00000000000021ac FSLH
               fpu.s:275    .text:00000000000021c4 $d
               fpu.s:275    .text:00000000000021c8 _FNEG
               fpu.s:275    .text:00000000000021d0 $t
               fpu.s:275    .text:00000000000021d0 FNEG
               fpu.s:285    .text:00000000000021e0 $d
               fpu.s:285    .text:00000000000021e4 _FABS
               fpu.s:285    .text:00000000000021ec FABS
               fpu.s:297    .text:0000000000002200 $d
               fpu.s:297    .text:0000000000002204 _SQRT
               fpu.s:297    .text:000000000000220c SQRT
               fpu.s:307    .text:000000000000221c $d
               fpu.s:307    .text:0000000000002220 _FZLESS
               fpu.s:307    .text:0000000000002224 $t
               fpu.s:307    .text:0000000000002224 FZLESS
               fpu.s:319    .text:000000000000223c $d
               fpu.s:319    .text:0000000000002240 _FGREAT
               fpu.s:319    .text:0000000000002244 FGREAT
ARM GAS  forth.s 			page 214


               fpu.s:321    .text:0000000000002248 $d
             forth.s:891    .text:000000000000335c INVER
               fpu.s:330    .text:000000000000225c _FLESS
               fpu.s:330    .text:0000000000002260 FLESS
               fpu.s:332    .text:0000000000002264 $d
               fpu.s:340    .text:0000000000002274 _FMIN
               fpu.s:340    .text:000000000000227c FMIN
               fpu.s:342    .text:0000000000002280 $d
               fpu.s:353    .text:00000000000022a4 _FMAX
               fpu.s:353    .text:00000000000022ac FMAX
               fpu.s:355    .text:00000000000022b0 $d
               fpu.s:368    .text:00000000000022d4 _FSIGN
               fpu.s:368    .text:00000000000022da $t
               fpu.s:368    .text:00000000000022dc FSIGN
               fpu.s:379    .text:00000000000022f0 $d
               fpu.s:379    .text:00000000000022f4 _FEXP
               fpu.s:379    .text:00000000000022fc FEXP
               fpu.s:390    .text:0000000000002314 $d
               fpu.s:390    .text:0000000000002318 _FMANT
               fpu.s:390    .text:000000000000231e $t
               fpu.s:390    .text:0000000000002320 FMANT
               fpu.s:403    .text:000000000000233c $d
               fpu.s:403    .text:0000000000002340 _PI
               fpu.s:403    .text:0000000000002344 PI
               fpu.s:412    .text:0000000000002354 $d
               fpu.s:412    .text:0000000000002358 _LN2
               fpu.s:412    .text:000000000000235c $t
               fpu.s:412    .text:000000000000235c LN2
               fpu.s:421    .text:000000000000236c $d
               fpu.s:421    .text:0000000000002370 _LN10
               fpu.s:421    .text:0000000000002378 LN10
               fpu.s:431    .text:0000000000002388 $d
               fpu.s:431    .text:000000000000238c _LOG2
               fpu.s:431    .text:0000000000002394 LOG2
               fpu.s:441    .text:00000000000023a4 $d
               fpu.s:441    .text:00000000000023a8 _LOG2TO10
               fpu.s:441    .text:00000000000023b0 $t
               fpu.s:441    .text:00000000000023b0 LOG2TO10
               fpu.s:443    .text:00000000000023b4 $d
             forth.s:569    .text:00000000000030c0 ZLESS
               fpu.s:453    .text:00000000000023e0 $d
            strtof.s:29     .text:00000000000023ec p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:0000000000002404 p10p2at
            strtof.s:44     .text:0000000000002404 $t
            strtof.s:45     .text:0000000000002408 $d
            strtof.s:57     .text:0000000000002428 bit_state
            strtof.s:58     .text:0000000000002428 $t
            strtof.s:59     .text:000000000000242c $d
             forth.s:1651   .text:0000000000003a04 PICK
            strtof.s:76     .text:000000000000244c mant_div
            strtof.s:77     .text:000000000000244c $t
            strtof.s:78     .text:0000000000002450 $d
            strtof.s:79     .text:0000000000002454 div_loop
ARM GAS  forth.s 			page 215


             forth.s:1012   .text:0000000000003458 GREAT
            strtof.s:107    .text:00000000000024a0 mant_mult
            strtof.s:108    .text:00000000000024a0 $t
            strtof.s:109    .text:00000000000024a4 $d
            strtof.s:110    .text:00000000000024a8 mult_loop
            strtof.s:134    .text:00000000000024f4 exp_adjust
            strtof.s:135    .text:00000000000024f4 $t
            strtof.s:136    .text:00000000000024f8 $d
             forth.s:794    .text:0000000000003288 NROT
            strtof.s:148    .text:0000000000002534 pos_exp
             forth.s:907    .text:0000000000003380 ABSS
            strtof.s:161    .text:0000000000002544 decimals
            strtof.s:162    .text:0000000000002544 $t
            strtof.s:163    .text:0000000000002548 $d
             forth.s:2027   .text:0000000000003dd4 PARSE_DIGITS
             forth.s:1035   .text:0000000000003484 MIN
            strtof.s:181    .text:0000000000002580 exponent
            strtof.s:182    .text:0000000000002580 $t
            strtof.s:183    .text:0000000000002584 $d
             forth.s:2079   .text:0000000000003e8e NEGQ
             forth.s:899    .text:0000000000003370 NEGAT
            strtof.s:204    .text:00000000000025c8 _FLOATQ
            strtof.s:204    .text:00000000000025d0 FLOATQ
            strtof.s:208    .text:00000000000025d4 $d
             forth.s:1983   .text:0000000000003d54 DECIM
             forth.s:2000   .text:0000000000003d78 DIGTQ
            strtof.s:245    .text:0000000000002670 must_be_dot
             forth.s:2063   .text:0000000000003e74 CHARQ
            strtof.s:290    .text:0000000000002748 error1
            strtof.s:295    .text:000000000000275c error2
            strtof.s:279    .text:0000000000002710 build_float
             forth.s:457    .text:0000000000002fd8 DRFROM
            strtof.s:300    .text:000000000000276c restore_base
              ftoa.s:28     .text:000000000000277c rounding
              ftoa.s:48     .text:00000000000027a4 _ROUND
              ftoa.s:48     .text:00000000000027aa $t
              ftoa.s:48     .text:00000000000027ac ROUND
              ftoa.s:50     .text:00000000000027b0 $d
             forth.s:1024   .text:0000000000003470 MAX
              ftoa.s:67     .text:00000000000027f0 _CSTOP
              ftoa.s:67     .text:00000000000027f4 $t
              ftoa.s:67     .text:00000000000027f4 CSTOP
              ftoa.s:79     .text:0000000000002800 ITOA
              ftoa.s:81     .text:0000000000002804 $d
             forth.s:1398   .text:00000000000037b8 STOD
             forth.s:846    .text:00000000000032f8 DABS
             forth.s:1846   .text:0000000000003bf4 BDIGS
             forth.s:1890   .text:0000000000003c60 DIGS
             forth.s:1908   .text:0000000000003c94 SIGN
             forth.s:1922   .text:0000000000003cbc EDIGS
             forth.s:1716   .text:0000000000003a9c CMOVE
              ftoa.s:114    .text:0000000000002858 _SCALEUP
              ftoa.s:114    .text:0000000000002860 $t
              ftoa.s:114    .text:0000000000002860 SCALEUP
              ftoa.s:116    .text:0000000000002864 $d
              ftoa.s:148    .text:00000000000028c0 _SCALEDOWN
              ftoa.s:148    .text:00000000000028ca $t
ARM GAS  forth.s 			page 216


              ftoa.s:148    .text:00000000000028cc SCALEDOWN
              ftoa.s:150    .text:00000000000028d0 $d
             forth.s:381    .text:0000000000002f52 TBRAN
              ftoa.s:181    .text:0000000000002928 EPART
              ftoa.s:182    .text:0000000000002928 $t
              ftoa.s:183    .text:000000000000292c $d
              ftoa.s:206    .text:000000000000295c FPART
              ftoa.s:207    .text:000000000000295c $t
              ftoa.s:208    .text:0000000000002960 $d
              ftoa.s:255    .text:0000000000002a00 IPART
              ftoa.s:256    .text:0000000000002a00 $t
              ftoa.s:257    .text:0000000000002a04 $d
              ftoa.s:313    .text:0000000000002ac4 _FTOA
              ftoa.s:313    .text:0000000000002ac8 $t
              ftoa.s:313    .text:0000000000002ac8 FTOA
              ftoa.s:315    .text:0000000000002acc $d
              ftoa.s:365    .text:0000000000002bac nan
             forth.s:732    .text:000000000000320c BLANK
              ftoa.s:348    .text:0000000000002b5c zdz
              ftoa.s:387    .text:0000000000002c18 infinity
              ftoa.s:412    .text:0000000000002c60 _FDOT
              ftoa.s:412    .text:0000000000002c64 FDOT
              ftoa.s:415    .text:0000000000002c68 $d
             forth.s:1669   .text:0000000000003a2c HERE
             forth.s:3195   .text:0000000000004bcc ALLOT
             forth.s:80     .text:0000000000002ccc $t
             forth.s:104    .text:0000000000002ce4 COMPI_NEST
             forth.s:117    .text:0000000000002d02 TSTDIN
             forth.s:124    .text:0000000000002d0c TSTDOUT
             forth.s:133    .text:0000000000002d16 $d
             forth.s:133    .text:0000000000002d1a _CFSR
             forth.s:145    .text:0000000000002d36 $d
             forth.s:145    .text:0000000000002d3a _BFAR
             forth.s:157    .text:0000000000002d56 $d
             forth.s:157    .text:0000000000002d5a _QKEY
             forth.s:157    .text:0000000000002d60 QKEY
             forth.s:159    .text:0000000000002d64 $d
             forth.s:1703   .text:0000000000003a7c ATEXE
             forth.s:167    .text:0000000000002d74 _KEY
             forth.s:167    .text:0000000000002d78 $t
             forth.s:167    .text:0000000000002d78 KEY
             forth.s:169    .text:0000000000002d7c KEY1
             forth.s:170    .text:0000000000002d7c $d
             forth.s:179    .text:0000000000002d94 _EMIT
             forth.s:181    .text:0000000000002da0 $d
             forth.s:215    .text:0000000000002db0 _RAND
             forth.s:215    .text:0000000000002db8 RAND
             forth.s:217    .text:0000000000002dbc $d
             forth.s:1131   .text:0000000000003538 SEED
             forth.s:1554   .text:0000000000003900 MODD
             forth.s:246    .text:0000000000002e2c _PAUSE
             forth.s:246    .text:0000000000002e32 $t
             forth.s:246    .text:0000000000002e34 PAUSE
             forth.s:248    .text:0000000000002e38 $d
             forth.s:1149   .text:0000000000003568 TIMER
             forth.s:250    .text:0000000000002e40 PAUSE_LOOP
             forth.s:255    .text:0000000000002e58 PAUSE_EXIT
ARM GAS  forth.s 			page 217


             forth.s:262    .text:0000000000002e60 _ULED
             forth.s:271    .text:0000000000002e84 ULED_OFF
             forth.s:279    .text:0000000000002e88 $d
             forth.s:279    .text:0000000000002e8c _JOYSTK
             forth.s:279    .text:0000000000002e94 JOYSTK
             forth.s:281    .text:0000000000002e98 $d
             forth.s:293    .text:0000000000002eb8 _BEEP
             forth.s:293    .text:0000000000002ec0 BEEP
             forth.s:318    .text:0000000000002ef4 $d
             forth.s:318    .text:0000000000002ef8 _NOP
             forth.s:318    .text:0000000000002efc $t
             forth.s:318    .text:0000000000002efc NOP
             forth.s:335    .text:0000000000002f08 $d
             forth.s:335    .text:0000000000002f0c _EXECU
             forth.s:335    .text:0000000000002f14 $t
             forth.s:335    .text:0000000000002f14 EXECU
             forth.s:355    .text:0000000000002f30 NEXT1
             forth.s:373    .text:0000000000002f4c QBRAN1
             forth.s:404    .text:0000000000002f6c $d
             forth.s:404    .text:0000000000002f70 _EXIT
             forth.s:404    .text:0000000000002f78 EXIT
             forth.s:405    .text:0000000000002f78 $d
             forth.s:411    .text:0000000000002f80 _STORE
             forth.s:411    .text:0000000000002f82 $t
             forth.s:421    .text:0000000000002f90 $d
             forth.s:421    .text:0000000000002f94 _AT
             forth.s:421    .text:0000000000002f96 $t
             forth.s:429    .text:0000000000002f9c $d
             forth.s:429    .text:0000000000002fa0 _CSTOR
             forth.s:439    .text:0000000000002fb0 $d
             forth.s:439    .text:0000000000002fb4 _CAT
             forth.s:448    .text:0000000000002fbc $d
             forth.s:448    .text:0000000000002fc0 _RFROM
             forth.s:457    .text:0000000000002fce $d
             forth.s:457    .text:0000000000002fd2 _DRFROM
             forth.s:457    .text:0000000000002fd6 $t
             forth.s:468    .text:0000000000002fea $d
             forth.s:468    .text:0000000000002fee _RAT
             forth.s:477    .text:0000000000002ffe $d
             forth.s:477    .text:0000000000003002 _TOR
             forth.s:486    .text:0000000000003012 $d
             forth.s:486    .text:0000000000003016 _DTOR
             forth.s:486    .text:000000000000301a $t
             forth.s:486    .text:000000000000301c DTOR
             forth.s:498    .text:000000000000302e $d
             forth.s:498    .text:0000000000003032 _RPSTOR
             forth.s:498    .text:0000000000003036 $t
             forth.s:498    .text:0000000000003038 RPSTOR
             forth.s:507    .text:0000000000003040 $d
             forth.s:507    .text:0000000000003044 _SPSTOR
             forth.s:507    .text:0000000000003048 $t
             forth.s:507    .text:0000000000003048 SPSTOR
             forth.s:516    .text:0000000000003050 $d
             forth.s:516    .text:0000000000003054 _SPAT
             forth.s:516    .text:0000000000003058 $t
             forth.s:516    .text:0000000000003058 SPAT
             forth.s:525    .text:0000000000003060 $d
ARM GAS  forth.s 			page 218


             forth.s:525    .text:0000000000003064 _RPAT
             forth.s:525    .text:0000000000003068 $t
             forth.s:525    .text:0000000000003068 RPAT
             forth.s:534    .text:0000000000003070 $d
             forth.s:534    .text:0000000000003074 _DROP
             forth.s:542    .text:0000000000003082 $d
             forth.s:542    .text:0000000000003086 _DUPP
             forth.s:542    .text:000000000000308a $t
             forth.s:550    .text:0000000000003092 $d
             forth.s:550    .text:0000000000003096 _SWAP
             forth.s:560    .text:00000000000030a4 $d
             forth.s:560    .text:00000000000030a8 _OVER
             forth.s:569    .text:00000000000030b8 $d
             forth.s:569    .text:00000000000030bc _ZLESS
             forth.s:577    .text:00000000000030c6 $d
             forth.s:577    .text:00000000000030ca _ANDD
             forth.s:577    .text:00000000000030ce $t
             forth.s:586    .text:00000000000030da $d
             forth.s:586    .text:00000000000030de _ORR
             forth.s:595    .text:00000000000030ee $d
             forth.s:595    .text:00000000000030f2 _XORR
             forth.s:595    .text:00000000000030f6 $t
             forth.s:604    .text:0000000000003102 $d
             forth.s:604    .text:0000000000003106 _UPLUS
             forth.s:604    .text:000000000000310a $t
             forth.s:604    .text:000000000000310c UPLUS
             forth.s:616    .text:000000000000311c $d
             forth.s:616    .text:0000000000003120 _RSHIFT
             forth.s:625    .text:0000000000003132 $d
             forth.s:625    .text:0000000000003136 _LSHIFT
             forth.s:634    .text:000000000000314a $d
             forth.s:634    .text:000000000000314e _PLUS
             forth.s:634    .text:0000000000003150 $t
             forth.s:643    .text:0000000000003158 $d
             forth.s:643    .text:000000000000315c _SUBB
             forth.s:643    .text:000000000000315e $t
             forth.s:652    .text:000000000000316a $d
             forth.s:652    .text:000000000000316e _STAR
             forth.s:652    .text:0000000000003170 $t
             forth.s:661    .text:000000000000317a $d
             forth.s:661    .text:000000000000317e _UMSTA
             forth.s:661    .text:0000000000003182 $t
             forth.s:661    .text:0000000000003184 UMSTA
             forth.s:673    .text:0000000000003190 $d
             forth.s:673    .text:0000000000003194 _MSTAR
             forth.s:673    .text:0000000000003198 MSTAR
             forth.s:684    .text:00000000000031a4 $d
             forth.s:684    .text:00000000000031a8 _ONEP
             forth.s:692    .text:00000000000031b2 $d
             forth.s:692    .text:00000000000031b6 _ONEM
             forth.s:700    .text:00000000000031c2 $d
             forth.s:700    .text:00000000000031c6 _TWOP
             forth.s:700    .text:00000000000031cc TWOP
             forth.s:708    .text:00000000000031d2 $d
             forth.s:708    .text:00000000000031d6 _TWOM
             forth.s:708    .text:00000000000031dc TWOM
             forth.s:716    .text:00000000000031e2 $d
ARM GAS  forth.s 			page 219


             forth.s:716    .text:00000000000031e6 _CELLP
             forth.s:716    .text:00000000000031ec $t
             forth.s:716    .text:00000000000031ec CELLP
             forth.s:724    .text:00000000000031f2 $d
             forth.s:724    .text:00000000000031f6 _CELLM
             forth.s:724    .text:00000000000031fc $t
             forth.s:724    .text:00000000000031fc CELLM
             forth.s:732    .text:0000000000003202 $d
             forth.s:732    .text:0000000000003206 _BLANK
             forth.s:741    .text:0000000000003216 $d
             forth.s:741    .text:000000000000321a _CELLS
             forth.s:741    .text:0000000000003220 $t
             forth.s:741    .text:0000000000003220 CELLS
             forth.s:749    .text:0000000000003226 $d
             forth.s:749    .text:000000000000322a _CELLSL
             forth.s:749    .text:0000000000003230 $t
             forth.s:749    .text:0000000000003230 CELLSL
             forth.s:757    .text:0000000000003236 $d
             forth.s:757    .text:000000000000323a _TWOST
             forth.s:757    .text:0000000000003240 TWOST
             forth.s:765    .text:0000000000003246 $d
             forth.s:765    .text:000000000000324a _TWOSL
             forth.s:773    .text:0000000000003256 $d
             forth.s:773    .text:000000000000325a _QDUP
             forth.s:783    .text:000000000000326a $d
             forth.s:783    .text:000000000000326e _ROT
             forth.s:783    .text:0000000000003272 $t
             forth.s:794    .text:000000000000327e $d
             forth.s:794    .text:0000000000003282 _NROT
             forth.s:805    .text:0000000000003292 $d
             forth.s:805    .text:0000000000003296 _DDROP
             forth.s:805    .text:000000000000329c $t
             forth.s:814    .text:00000000000032a6 $d
             forth.s:814    .text:00000000000032aa _TDROP
             forth.s:814    .text:00000000000032b0 $t
             forth.s:823    .text:00000000000032ba $d
             forth.s:823    .text:00000000000032be _DDUP
             forth.s:833    .text:00000000000032d0 $d
             forth.s:833    .text:00000000000032d4 _DPLUS
             forth.s:833    .text:00000000000032d8 DPLUS
             forth.s:846    .text:00000000000032ec $d
             forth.s:846    .text:00000000000032f0 _DABS
             forth.s:862    .text:0000000000003314 $d
             forth.s:862    .text:0000000000003318 _UDGREAT
             forth.s:862    .text:000000000000331c $t
             forth.s:862    .text:000000000000331c UDGREAT
             forth.s:879    .text:0000000000003338 $d
             forth.s:879    .text:000000000000333c _DZEQUAL
             forth.s:879    .text:0000000000003340 $t
             forth.s:879    .text:0000000000003340 DZEQUAL
             forth.s:891    .text:0000000000003352 $d
             forth.s:891    .text:0000000000003356 _INVER
             forth.s:891    .text:000000000000335a $t
             forth.s:899    .text:0000000000003362 $d
             forth.s:899    .text:0000000000003366 _NEGAT
             forth.s:907    .text:0000000000003376 $d
             forth.s:907    .text:000000000000337a _ABSS
ARM GAS  forth.s 			page 220


             forth.s:907    .text:000000000000337e $t
             forth.s:917    .text:000000000000338a $d
             forth.s:917    .text:000000000000338e _CLZ
             forth.s:917    .text:0000000000003392 $t
             forth.s:925    .text:000000000000339a $d
             forth.s:925    .text:000000000000339e _CTZ
             forth.s:925    .text:00000000000033a2 $t
             forth.s:925    .text:00000000000033a4 CTZ
             forth.s:940    .text:00000000000033bc $d
             forth.s:940    .text:00000000000033c0 _ZEQUAL
             forth.s:940    .text:00000000000033c4 ZEQUAL
             forth.s:951    .text:00000000000033d2 $d
             forth.s:951    .text:00000000000033d6 _EQUAL
             forth.s:951    .text:00000000000033d8 $t
             forth.s:963    .text:00000000000033e8 $d
             forth.s:963    .text:00000000000033ec _DIFF
             forth.s:963    .text:00000000000033f0 DIFF
             forth.s:976    .text:0000000000003408 $d
             forth.s:976    .text:000000000000340c _ULESS
             forth.s:988    .text:0000000000003420 $d
             forth.s:988    .text:0000000000003424 _LESS
             forth.s:988    .text:0000000000003426 $t
             forth.s:988    .text:0000000000003428 LESS
             forth.s:1000   .text:0000000000003438 $d
             forth.s:1000   .text:000000000000343c _UGREAT
             forth.s:1000   .text:0000000000003440 UGREAT
             forth.s:1012   .text:0000000000003450 $d
             forth.s:1012   .text:0000000000003454 _GREAT
             forth.s:1012   .text:0000000000003456 $t
             forth.s:1024   .text:0000000000003468 $d
             forth.s:1024   .text:000000000000346c _MAX
             forth.s:1024   .text:0000000000003470 $t
             forth.s:1035   .text:000000000000347c $d
             forth.s:1035   .text:0000000000003480 _MIN
             forth.s:1035   .text:0000000000003484 $t
             forth.s:1046   .text:0000000000003490 $d
             forth.s:1046   .text:0000000000003494 _PSTOR
             forth.s:1046   .text:0000000000003498 PSTOR
             forth.s:1058   .text:00000000000034a8 $d
             forth.s:1058   .text:00000000000034ac _DSTOR
             forth.s:1058   .text:00000000000034b0 DSTOR
             forth.s:1070   .text:00000000000034c4 $d
             forth.s:1070   .text:00000000000034c8 _DAT
             forth.s:1070   .text:00000000000034cc DAT
             forth.s:1080   .text:00000000000034d8 $d
             forth.s:1080   .text:00000000000034dc _COUNT
             forth.s:1080   .text:00000000000034e2 $t
             forth.s:1090   .text:00000000000034f2 $d
             forth.s:1090   .text:00000000000034f6 _DNEGA
             forth.s:1090   .text:00000000000034fe $t
             forth.s:1090   .text:0000000000003500 DNEGA
             forth.s:1107   .text:0000000000003512 DOVAR
             forth.s:1118   .text:0000000000003520 DOCON
             forth.s:1131   .text:000000000000352c $d
             forth.s:1131   .text:0000000000003530 _SEED
             forth.s:1140   .text:0000000000003544 $d
             forth.s:1140   .text:0000000000003548 _MSEC
ARM GAS  forth.s 			page 221


             forth.s:1149   .text:000000000000355c $d
             forth.s:1149   .text:0000000000003560 _TIMER
             forth.s:1149   .text:0000000000003566 $t
             forth.s:1158   .text:0000000000003574 $d
             forth.s:1158   .text:0000000000003578 _TBOOT
             forth.s:1158   .text:000000000000357e $t
             forth.s:1158   .text:0000000000003580 TBOOT
             forth.s:1167   .text:000000000000358c $d
             forth.s:1167   .text:0000000000003590 _BASE
             forth.s:1178   .text:00000000000035a4 $d
             forth.s:1178   .text:00000000000035a8 _BCHR
             forth.s:1178   .text:00000000000035ae $t
             forth.s:1178   .text:00000000000035b0 BCHR
             forth.s:1188   .text:00000000000035bc TEMP
             forth.s:1197   .text:00000000000035c8 $d
             forth.s:1197   .text:00000000000035cc _SPAN
             forth.s:1197   .text:00000000000035d4 SPAN
             forth.s:1206   .text:00000000000035e0 $d
             forth.s:1206   .text:00000000000035e4 _INN
             forth.s:1206   .text:00000000000035e8 $t
             forth.s:1206   .text:00000000000035e8 INN
             forth.s:1216   .text:00000000000035f4 $d
             forth.s:1216   .text:00000000000035f8 _NTIB
             forth.s:1216   .text:0000000000003600 NTIB
             forth.s:1225   .text:000000000000360c $d
             forth.s:1225   .text:0000000000003610 _TEVAL
             forth.s:1225   .text:0000000000003616 $t
             forth.s:1225   .text:0000000000003618 TEVAL
             forth.s:1235   .text:0000000000003624 $d
             forth.s:1235   .text:0000000000003628 _HLD
             forth.s:1235   .text:000000000000362c $t
             forth.s:1235   .text:000000000000362c HLD
             forth.s:1245   .text:0000000000003638 $d
             forth.s:1245   .text:000000000000363c _CNTXT
             forth.s:1245   .text:0000000000003644 $t
             forth.s:1245   .text:0000000000003644 CNTXT
             forth.s:1246   .text:0000000000003644 CRRNT
             forth.s:1256   .text:0000000000003650 $d
             forth.s:1256   .text:0000000000003654 _CPP
             forth.s:1256   .text:0000000000003658 CPP
             forth.s:1266   .text:0000000000003664 $d
             forth.s:1266   .text:0000000000003668 _FCP
             forth.s:1266   .text:000000000000366c $t
             forth.s:1266   .text:000000000000366c FCP
             forth.s:1276   .text:0000000000003678 $d
             forth.s:1276   .text:000000000000367c _LAST
             forth.s:1276   .text:0000000000003684 LAST
             forth.s:1290   .text:0000000000003690 $d
             forth.s:1290   .text:0000000000003694 _USER_BEGIN
             forth.s:1290   .text:00000000000036a0 USER_BEGIN
             forth.s:1294   .text:00000000000036ac USR_BGN_ADR
             forth.s:1295   .text:00000000000036ac $d
             forth.s:1301   .text:00000000000036b4 _USER_END
             forth.s:1301   .text:00000000000036c0 USER_END
             forth.s:1305   .text:00000000000036cc USER_END_ADR
             forth.s:1306   .text:00000000000036cc $d
             forth.s:1318   .text:00000000000036d4 _WITHI
ARM GAS  forth.s 			page 222


             forth.s:1318   .text:00000000000036dc WITHI
             forth.s:1320   .text:00000000000036e0 $d
             forth.s:1335   .text:0000000000003700 _UMMOD
             forth.s:1335   .text:0000000000003708 UMMOD
             forth.s:1339   .text:0000000000003712 UMMOD0
             forth.s:1346   .text:0000000000003722 UMMOD1
             forth.s:1352   .text:000000000000372c UMMOD2
             forth.s:1365   .text:0000000000003738 $d
             forth.s:1365   .text:000000000000373c _MSMOD
             forth.s:1365   .text:0000000000003742 $t
             forth.s:1365   .text:0000000000003744 MSMOD
             forth.s:1367   .text:0000000000003748 $d
             forth.s:1376   .text:0000000000003770 MMOD1
             forth.s:1383   .text:000000000000378c MMOD2
             forth.s:1391   .text:00000000000037ac MMOD3
             forth.s:1398   .text:00000000000037b4 _STOD
             forth.s:1398   .text:00000000000037b8 $t
             forth.s:1407   .text:00000000000037c4 $d
             forth.s:1407   .text:00000000000037c8 _D2STAR
             forth.s:1407   .text:00000000000037cc $t
             forth.s:1407   .text:00000000000037cc D2STAR
             forth.s:1419   .text:00000000000037de $d
             forth.s:1419   .text:00000000000037e2 _D2SL
             forth.s:1419   .text:00000000000037e6 $t
             forth.s:1419   .text:00000000000037e8 D2SL
             forth.s:1434   .text:00000000000037f6 $d
             forth.s:1434   .text:00000000000037fa _DSLMOD
             forth.s:1434   .text:0000000000003800 $t
             forth.s:1434   .text:0000000000003800 DSLMOD
             forth.s:1470   .text:000000000000384c $d
             forth.s:1470   .text:0000000000003850 _DSLASH
             forth.s:1470   .text:0000000000003854 DSLASH
             forth.s:1472   .text:0000000000003858 $d
             forth.s:1492   .text:000000000000389c _DSTAR
             forth.s:1492   .text:00000000000038a0 DSTAR
             forth.s:1541   .text:00000000000038d6 $d
             forth.s:1541   .text:00000000000038da _SLMOD
             forth.s:1543   .text:00000000000038e4 $d
             forth.s:1554   .text:00000000000038fc _MODD
             forth.s:1554   .text:0000000000003900 $t
             forth.s:1556   .text:0000000000003904 $d
             forth.s:1565   .text:0000000000003914 _SLASH
             forth.s:1565   .text:0000000000003916 $t
             forth.s:1565   .text:0000000000003918 SLASH
             forth.s:1567   .text:000000000000391c $d
             forth.s:1578   .text:0000000000003930 _SSMOD
             forth.s:1578   .text:0000000000003936 $t
             forth.s:1578   .text:0000000000003938 SSMOD
             forth.s:1580   .text:000000000000393c $d
             forth.s:1592   .text:0000000000003954 _STASL
             forth.s:1592   .text:0000000000003958 STASL
             forth.s:1594   .text:000000000000395c $d
             forth.s:1608   .text:0000000000003970 _ALGND
             forth.s:1608   .text:0000000000003978 $t
             forth.s:1608   .text:0000000000003978 ALGND
             forth.s:1619   .text:0000000000003988 $d
             forth.s:1619   .text:000000000000398c _TCHAR
ARM GAS  forth.s 			page 223


             forth.s:1619   .text:0000000000003992 $t
             forth.s:1619   .text:0000000000003994 TCHAR
             forth.s:1621   .text:0000000000003998 $d
             forth.s:1631   .text:00000000000039d0 TCHA1
             forth.s:1639   .text:00000000000039d8 _DEPTH
             forth.s:1639   .text:00000000000039de $t
             forth.s:1639   .text:00000000000039e0 DEPTH
             forth.s:1651   .text:00000000000039f8 $d
             forth.s:1651   .text:00000000000039fc _PICK
             forth.s:1653   .text:0000000000003a08 $d
             forth.s:1669   .text:0000000000003a24 _HERE
             forth.s:1671   .text:0000000000003a30 $d
             forth.s:1680   .text:0000000000003a40 _PAD
             forth.s:1680   .text:0000000000003a44 $t
             forth.s:1682   .text:0000000000003a48 $d
             forth.s:1693   .text:0000000000003a60 _TIB
             forth.s:1693   .text:0000000000003a64 $t
             forth.s:1693   .text:0000000000003a64 TIB
             forth.s:1703   .text:0000000000003a6e $d
             forth.s:1703   .text:0000000000003a72 _ATEXE
             forth.s:1716   .text:0000000000003a90 $d
             forth.s:1716   .text:0000000000003a94 _CMOVE
             forth.s:1716   .text:0000000000003a9a $t
             forth.s:1723   .text:0000000000003aae CMOV1
             forth.s:1720   .text:0000000000003aa6 CMOV0
             forth.s:1728   .text:0000000000003ab8 CMOV2
             forth.s:1736   .text:0000000000003ac0 $d
             forth.s:1736   .text:0000000000003ac4 _MOVE
             forth.s:1754   .text:0000000000003af6 MOVE1
             forth.s:1751   .text:0000000000003af2 MOVE3
             forth.s:1748   .text:0000000000003aee MOVE0
             forth.s:1759   .text:0000000000003b00 MOVE2
             forth.s:1768   .text:0000000000003b08 $d
             forth.s:1768   .text:0000000000003b0c _FILL
             forth.s:1776   .text:0000000000003b22 FILL2
             forth.s:1772   .text:0000000000003b1a FILL1
             forth.s:1786   .text:0000000000003b2a $d
             forth.s:1786   .text:0000000000003b2e _PACKS
             forth.s:1786   .text:0000000000003b34 $t
             forth.s:1786   .text:0000000000003b34 PACKS
             forth.s:1788   .text:0000000000003b38 $d
             forth.s:1817   .text:0000000000003b90 _DIGIT
             forth.s:1817   .text:0000000000003b96 $t
             forth.s:1817   .text:0000000000003b98 DIGIT
             forth.s:1819   .text:0000000000003b9c $d
             forth.s:1834   .text:0000000000003bd0 _EXTRC
             forth.s:1834   .text:0000000000003bd8 $t
             forth.s:1834   .text:0000000000003bd8 EXTRC
             forth.s:1836   .text:0000000000003bdc $d
             forth.s:1846   .text:0000000000003bf0 _BDIGS
             forth.s:1848   .text:0000000000003bf8 $d
             forth.s:1858   .text:0000000000003c0c _HOLD
             forth.s:1858   .text:0000000000003c14 HOLD
             forth.s:1860   .text:0000000000003c18 $d
             forth.s:1876   .text:0000000000003c3c _DIG
             forth.s:1876   .text:0000000000003c3e $t
             forth.s:1876   .text:0000000000003c40 DIG
ARM GAS  forth.s 			page 224


             forth.s:1878   .text:0000000000003c44 $d
             forth.s:1890   .text:0000000000003c5c _DIGS
             forth.s:1892   .text:0000000000003c64 DIGS1
             forth.s:1893   .text:0000000000003c64 $d
             forth.s:1898   .text:0000000000003c80 DIGS2
             forth.s:1908   .text:0000000000003c8c _SIGN
             forth.s:1910   .text:0000000000003c98 $d
             forth.s:1914   .text:0000000000003cb0 SIGN1
             forth.s:1922   .text:0000000000003cb8 _EDIGS
             forth.s:1924   .text:0000000000003cc0 $d
             forth.s:1939   .text:0000000000003cdc STRR
             forth.s:1940   .text:0000000000003cdc $t
             forth.s:1941   .text:0000000000003ce0 $d
             forth.s:1958   .text:0000000000003d0c _HEX
             forth.s:1958   .text:0000000000003d10 $t
             forth.s:1958   .text:0000000000003d10 HEX
             forth.s:1960   .text:0000000000003d14 $d
             forth.s:1971   .text:0000000000003d2c _BIN
             forth.s:1971   .text:0000000000003d30 $t
             forth.s:1971   .text:0000000000003d30 BIN
             forth.s:1973   .text:0000000000003d34 $d
             forth.s:1983   .text:0000000000003d4c _DECIM
             forth.s:1983   .text:0000000000003d54 $t
             forth.s:1985   .text:0000000000003d58 $d
             forth.s:2000   .text:0000000000003d70 _DIGTQ
             forth.s:2002   .text:0000000000003d7c $d
             forth.s:2015   .text:0000000000003dc4 DGTQ1
             forth.s:2028   .text:0000000000003dd4 $t
             forth.s:2029   .text:0000000000003dd8 $d
             forth.s:3020   .text:00000000000049a8 ABORQ
             forth.s:2052   .text:0000000000003e60 $d
             forth.s:2064   .text:0000000000003e74 $t
             forth.s:2081   .text:0000000000003e92 $d
             forth.s:2104   .text:0000000000003ed2 _INTQ
             forth.s:2104   .text:0000000000003ed8 INTQ
             forth.s:2107   .text:0000000000003edc $d
             forth.s:2173   .text:0000000000003fe4 _NUMBER
             forth.s:2173   .text:0000000000003fec NUMBER
             forth.s:2175   .text:0000000000003ff0 $d
             forth.s:2193   .text:0000000000004010 _SPACE
             forth.s:2193   .text:0000000000004016 $t
             forth.s:2195   .text:000000000000401c $d
             forth.s:2204   .text:000000000000402c _SPACS
             forth.s:2204   .text:0000000000004034 SPACS
             forth.s:2206   .text:0000000000004038 $d
             forth.s:2212   .text:0000000000004054 CHAR2
             forth.s:2210   .text:0000000000004050 CHAR1
             forth.s:2221   .text:0000000000004064 _TYPEE
             forth.s:2223   .text:0000000000004070 $d
             forth.s:2229   .text:0000000000004088 TYPE2
             forth.s:2225   .text:000000000000407c TYPE1
             forth.s:2239   .text:000000000000409c _CR
             forth.s:2241   .text:00000000000040a4 $d
             forth.s:2253   .text:00000000000040c0 DOSTR
             forth.s:2254   .text:00000000000040c0 $t
             forth.s:2256   .text:00000000000040c4 $d
             forth.s:2274   .text:00000000000040ec STRQP
ARM GAS  forth.s 			page 225


             forth.s:2275   .text:00000000000040ec $t
             forth.s:2276   .text:00000000000040f0 $d
             forth.s:2285   .text:00000000000040f8 DOTST
             forth.s:2286   .text:00000000000040f8 $t
             forth.s:2287   .text:00000000000040fc $d
             forth.s:2298   .text:0000000000004108 $t
             forth.s:2299   .text:000000000000410c $d
             forth.s:2311   .text:0000000000004118 LPAD
             forth.s:2312   .text:0000000000004118 $t
             forth.s:2313   .text:000000000000411c $d
             forth.s:2344   .text:000000000000419c _DOTR
             forth.s:2344   .text:00000000000041a0 DOTR
             forth.s:2346   .text:00000000000041a4 $d
             forth.s:2428   .text:0000000000004288 DTOA
             forth.s:2363   .text:00000000000041cc _UDOTR
             forth.s:2363   .text:00000000000041d0 $t
             forth.s:2363   .text:00000000000041d0 UDOTR
             forth.s:2365   .text:00000000000041d4 $d
             forth.s:2381   .text:0000000000004200 _UDOT
             forth.s:2383   .text:0000000000004208 $d
             forth.s:2399   .text:0000000000004234 _DOT
             forth.s:2399   .text:0000000000004236 $t
             forth.s:2401   .text:000000000000423c $d
             forth.s:2409   .text:0000000000004264 DOT1
             forth.s:2428   .text:0000000000004284 _DTOA
             forth.s:2428   .text:0000000000004288 $t
             forth.s:2430   .text:000000000000428c $d
             forth.s:2445   .text:00000000000042b4 _DDOT
             forth.s:2445   .text:00000000000042b8 DDOT
             forth.s:2447   .text:00000000000042bc $d
             forth.s:2461   .text:00000000000042dc _HDOT
             forth.s:2463   .text:00000000000042e4 $d
             forth.s:2485   .text:000000000000432c _QUEST
             forth.s:2485   .text:000000000000432e $t
             forth.s:2485   .text:0000000000004330 QUEST
             forth.s:2487   .text:0000000000004334 $d
             forth.s:2501   .text:0000000000004340 PARS
             forth.s:2502   .text:0000000000004340 $t
             forth.s:2503   .text:0000000000004344 $d
             forth.s:2569   .text:0000000000004454 PARS8
             forth.s:2533   .text:00000000000043c8 PARS3
             forth.s:2516   .text:0000000000004380 PARS1
             forth.s:2531   .text:00000000000043c4 PARS2
             forth.s:2537   .text:00000000000043d4 PARS4
             forth.s:2549   .text:0000000000004404 PARS5
             forth.s:2556   .text:0000000000004428 PARS6
             forth.s:2562   .text:000000000000443c PARS7
             forth.s:2580   .text:0000000000004468 _PARSE
             forth.s:2580   .text:000000000000446e $t
             forth.s:2580   .text:0000000000004470 PARSE
             forth.s:2582   .text:0000000000004474 $d
             forth.s:2603   .text:00000000000044b4 _DOTPR
             forth.s:2603   .text:00000000000044b8 DOTPR
             forth.s:2605   .text:00000000000044bc $d
             forth.s:2616   .text:00000000000044d4 _PAREN
             forth.s:2616   .text:00000000000044d6 $t
             forth.s:2616   .text:00000000000044d8 PAREN
ARM GAS  forth.s 			page 226


             forth.s:2618   .text:00000000000044dc $d
             forth.s:2629   .text:00000000000044f4 _BKSLA
             forth.s:2629   .text:00000000000044f6 $t
             forth.s:2629   .text:00000000000044f8 BKSLA
             forth.s:2631   .text:00000000000044fc $d
             forth.s:2642   .text:0000000000004514 _CHAR
             forth.s:2642   .text:000000000000451c CHAR
             forth.s:2644   .text:0000000000004520 $d
             forth.s:2654   .text:0000000000004538 _IMCHAR
             forth.s:2654   .text:0000000000004540 IMCHAR
             forth.s:2656   .text:0000000000004544 $d
             forth.s:3252   .text:0000000000004c68 LITER
             forth.s:2665   .text:0000000000004554 _WORDD
             forth.s:2665   .text:000000000000455c WORDD
             forth.s:2667   .text:0000000000004560 $d
             forth.s:2679   .text:0000000000004578 _TOKEN
             forth.s:2679   .text:000000000000457e $t
             forth.s:2679   .text:0000000000004580 TOKEN
             forth.s:2681   .text:0000000000004584 $d
             forth.s:2846   .text:0000000000004774 UPPER
             forth.s:2695   .text:0000000000004598 _NAMET
             forth.s:2695   .text:000000000000459e $t
             forth.s:2695   .text:00000000000045a0 NAMET
             forth.s:2697   .text:00000000000045a4 $d
             forth.s:2716   .text:00000000000045c4 _SAMEQ
             forth.s:2716   .text:00000000000045ca $t
             forth.s:2716   .text:00000000000045cc SAMEQ
             forth.s:2718   .text:00000000000045d0 $d
             forth.s:2735   .text:0000000000004618 SAME2
             forth.s:2720   .text:00000000000045dc SAME1
             forth.s:2750   .text:000000000000462c FIND
             forth.s:2751   .text:000000000000462c $t
             forth.s:2752   .text:0000000000004630 $d
             forth.s:2759   .text:000000000000464c FIND1
             forth.s:2779   .text:00000000000046a4 FIND6
             forth.s:2772   .text:000000000000468c FIND2
             forth.s:2777   .text:000000000000469c FIND3
             forth.s:2786   .text:00000000000046bc FIND4
             forth.s:2792   .text:00000000000046d8 FIND5
             forth.s:2808   .text:0000000000004700 _NAMEQ
             forth.s:2808   .text:0000000000004706 $t
             forth.s:2808   .text:0000000000004708 NAMEQ
             forth.s:2810   .text:000000000000470c $d
             forth.s:2825   .text:0000000000004720 _ASCIZ
             forth.s:2825   .text:0000000000004726 $t
             forth.s:2825   .text:0000000000004728 ASCIZ
             forth.s:2827   .text:000000000000472c $d
             forth.s:2846   .text:000000000000476c _UPPER
             forth.s:2846   .text:0000000000004772 $t
             forth.s:2848   .text:0000000000004778 $d
             forth.s:2879   .text:00000000000047fc BKSP
             forth.s:2880   .text:00000000000047fc $t
             forth.s:2881   .text:0000000000004800 $d
             forth.s:2895   .text:0000000000004844 BACK1
             forth.s:2904   .text:0000000000004848 TAP
             forth.s:2905   .text:0000000000004848 $t
             forth.s:2906   .text:000000000000484c $d
ARM GAS  forth.s 			page 227


             forth.s:2919   .text:0000000000004864 KTAP
             forth.s:2920   .text:0000000000004864 TTAP
             forth.s:2921   .text:0000000000004864 $t
             forth.s:2922   .text:0000000000004868 $d
             forth.s:2936   .text:00000000000048a8 KTAP2
             forth.s:2933   .text:00000000000048a0 KTAP1
             forth.s:2948   .text:00000000000048c0 _ACCEP
             forth.s:2950   .text:00000000000048cc $d
             forth.s:2953   .text:00000000000048d8 ACCP1
             forth.s:2969   .text:0000000000004920 ACCP4
             forth.s:2965   .text:0000000000004914 ACCP2
             forth.s:2967   .text:0000000000004918 ACCP3
             forth.s:2980   .text:0000000000004934 _QUERY
             forth.s:2980   .text:000000000000493a $t
             forth.s:2980   .text:000000000000493c QUERY
             forth.s:2982   .text:0000000000004940 $d
             forth.s:3002   .text:0000000000004974 _ABORT
             forth.s:3002   .text:000000000000497a $t
             forth.s:3004   .text:0000000000004980 ABORT1
             forth.s:3005   .text:0000000000004980 $d
             forth.s:3021   .text:00000000000049a8 $t
             forth.s:3022   .text:00000000000049ac $d
             forth.s:3040   .text:00000000000049d0 _INTER
             forth.s:3042   .text:00000000000049e0 $d
             forth.s:3051   .text:0000000000004a1c INTE1
             forth.s:3048   .text:0000000000004a12 $t
             forth.s:3049   .text:0000000000004a14 $d
             forth.s:3055   .text:0000000000004a2c INTE2
             forth.s:3062   .text:0000000000004a34 _LBRAC
             forth.s:3062   .text:0000000000004a36 $t
             forth.s:3062   .text:0000000000004a38 LBRAC
             forth.s:3064   .text:0000000000004a3c $d
             forth.s:3074   .text:0000000000004a54 _DOTOK
             forth.s:3074   .text:0000000000004a58 $t
             forth.s:3074   .text:0000000000004a58 DOTOK
             forth.s:3076   .text:0000000000004a5c $d
             forth.s:3082   .text:0000000000004a80 DOTO1
             forth.s:3083   .text:0000000000004a80 $d
             forth.s:3091   .text:0000000000004a8c _QSTAC
             forth.s:3091   .text:0000000000004a94 QSTAC
             forth.s:3093   .text:0000000000004a98 $d
             forth.s:3095   .text:0000000000004aae $t
             forth.s:3096   .text:0000000000004ab0 $d
             forth.s:3103   .text:0000000000004ab8 _EVAL
             forth.s:3105   .text:0000000000004ac4 EVAL1
             forth.s:3106   .text:0000000000004ac4 $d
             forth.s:3114   .text:0000000000004aec EVAL2
             forth.s:3124   .text:0000000000004afc _PRESE
             forth.s:3126   .text:0000000000004b08 $d
             forth.s:3136   .text:0000000000004b1c _QUIT
             forth.s:3137   .text:0000000000004b24 $d
             forth.s:3139   .text:0000000000004b30 QUIT1
             forth.s:3141   .text:0000000000004b34 QUIT2
             forth.s:3151   .text:0000000000004b48 _FORGET
             forth.s:3151   .text:0000000000004b50 FORGET
             forth.s:3153   .text:0000000000004b54 $d
             forth.s:3653   .text:00000000000050f8 OVERT
ARM GAS  forth.s 			page 228


             forth.s:3181   .text:0000000000004b9c $d
             forth.s:3181   .text:0000000000004ba0 _TICK
             forth.s:3181   .text:0000000000004ba2 $t
             forth.s:3181   .text:0000000000004ba4 TICK
             forth.s:3183   .text:0000000000004ba8 $d
             forth.s:3187   .text:0000000000004bbc TICK1
             forth.s:3195   .text:0000000000004bc4 _ALLOT
             forth.s:3195   .text:0000000000004bca $t
             forth.s:3197   .text:0000000000004bd0 $d
             forth.s:3206   .text:0000000000004be0 _COMMA
             forth.s:3206   .text:0000000000004be2 $t
             forth.s:3206   .text:0000000000004be4 COMMA
             forth.s:3208   .text:0000000000004be8 $d
             forth.s:3222   .text:0000000000004c04 $d
             forth.s:3222   .text:0000000000004c08 _BCOMP
             forth.s:3222   .text:0000000000004c12 $t
             forth.s:3222   .text:0000000000004c14 BCOMP
             forth.s:3224   .text:0000000000004c18 $d
             forth.s:3234   .text:0000000000004c28 _COMPI
             forth.s:3234   .text:0000000000004c30 $t
             forth.s:3234   .text:0000000000004c30 COMPI
             forth.s:3236   .text:0000000000004c34 $d
             forth.s:3252   .text:0000000000004c60 _LITER
             forth.s:3252   .text:0000000000004c68 $t
             forth.s:3254   .text:0000000000004c6c $d
             forth.s:3692   .text:0000000000005154 CALLC
             forth.s:3264   .text:0000000000004c80 STRCQ
             forth.s:3265   .text:0000000000004c80 $t
             forth.s:3266   .text:0000000000004c84 $d
             forth.s:3288   .text:0000000000004cbc _FOR
             forth.s:3288   .text:0000000000004cc0 $t
             forth.s:3288   .text:0000000000004cc0 FOR
             forth.s:3290   .text:0000000000004cc4 $d
             forth.s:3299   .text:0000000000004cdc _DO
             forth.s:3299   .text:0000000000004ce0 DO
             forth.s:3301   .text:0000000000004ce4 $d
             forth.s:3307   .text:0000000000004d10 DOPLOOP
             forth.s:3308   .text:0000000000004d10 $t
             forth.s:3326   .text:0000000000004d38 $d
             forth.s:3326   .text:0000000000004d3c _PLOOP
             forth.s:3326   .text:0000000000004d42 $t
             forth.s:3326   .text:0000000000004d44 PLOOP
             forth.s:3328   .text:0000000000004d48 $d
             forth.s:3332   .text:0000000000004d5c DOLOOP
             forth.s:3333   .text:0000000000004d5c $t
             forth.s:3351   .text:0000000000004d84 $d
             forth.s:3351   .text:0000000000004d88 _LOOP
             forth.s:3351   .text:0000000000004d90 LOOP
             forth.s:3353   .text:0000000000004d94 $d
             forth.s:3364   .text:0000000000004dac _BEGIN
             forth.s:3364   .text:0000000000004db2 $t
             forth.s:3364   .text:0000000000004db4 BEGIN
             forth.s:3366   .text:0000000000004db8 $d
             forth.s:3375   .text:0000000000004dc0 $d
             forth.s:3375   .text:0000000000004dc4 _FNEXT
             forth.s:3375   .text:0000000000004dcc FNEXT
             forth.s:3377   .text:0000000000004dd0 $d
ARM GAS  forth.s 			page 229


             forth.s:3385   .text:0000000000004de8 _I
             forth.s:3385   .text:0000000000004dea $t
             forth.s:3385   .text:0000000000004dec I
             forth.s:3394   .text:0000000000004df8 $d
             forth.s:3394   .text:0000000000004dfc _J
             forth.s:3394   .text:0000000000004dfe $t
             forth.s:3394   .text:0000000000004e00 J
             forth.s:3404   .text:0000000000004e0c $d
             forth.s:3404   .text:0000000000004e10 _UNTIL
             forth.s:3404   .text:0000000000004e16 $t
             forth.s:3404   .text:0000000000004e18 UNTIL
             forth.s:3406   .text:0000000000004e1c $d
             forth.s:3415   .text:0000000000004e34 _AGAIN
             forth.s:3415   .text:0000000000004e3a $t
             forth.s:3415   .text:0000000000004e3c AGAIN
             forth.s:3417   .text:0000000000004e40 $d
             forth.s:3426   .text:0000000000004e58 _IFF
             forth.s:3426   .text:0000000000004e5c IFF
             forth.s:3428   .text:0000000000004e60 $d
             forth.s:3440   .text:0000000000004e88 _AHEAD
             forth.s:3440   .text:0000000000004e8e $t
             forth.s:3440   .text:0000000000004e90 AHEAD
             forth.s:3442   .text:0000000000004e94 $d
             forth.s:3454   .text:0000000000004ebc _REPEA
             forth.s:3454   .text:0000000000004ec4 REPEA
             forth.s:3456   .text:0000000000004ec8 $d
             forth.s:3467   .text:0000000000004ee0 _THENN
             forth.s:3467   .text:0000000000004ee8 THENN
             forth.s:3469   .text:0000000000004eec $d
             forth.s:3480   .text:0000000000004f00 _AFT
             forth.s:3480   .text:0000000000004f04 $t
             forth.s:3480   .text:0000000000004f04 AFT
             forth.s:3482   .text:0000000000004f08 $d
             forth.s:3494   .text:0000000000004f20 _ELSEE
             forth.s:3494   .text:0000000000004f28 ELSEE
             forth.s:3496   .text:0000000000004f2c $d
             forth.s:3506   .text:0000000000004f40 _WHILE
             forth.s:3506   .text:0000000000004f46 $t
             forth.s:3506   .text:0000000000004f48 WHILE
             forth.s:3508   .text:0000000000004f4c $d
             forth.s:3517   .text:0000000000004f5c _ABRTQ
             forth.s:3517   .text:0000000000004f64 ABRTQ
             forth.s:3519   .text:0000000000004f68 $d
             forth.s:3528   .text:0000000000004f80 _STRQ
             forth.s:3528   .text:0000000000004f84 STRQ
             forth.s:3530   .text:0000000000004f88 $d
             forth.s:3540   .text:0000000000004fa0 _DOTQ
             forth.s:3540   .text:0000000000004fa4 DOTQ
             forth.s:3542   .text:0000000000004fa8 $d
             forth.s:3556   .text:0000000000004fc0 _UNIQU
             forth.s:3556   .text:0000000000004fc8 $t
             forth.s:3556   .text:0000000000004fc8 UNIQU
             forth.s:3558   .text:0000000000004fcc $d
             forth.s:3565   .text:0000000000004ff4 UNIQ1
             forth.s:3562   .text:0000000000004fe8 $d
             forth.s:3575   .text:0000000000004ffc SNAME
             forth.s:3576   .text:0000000000004ffc $t
ARM GAS  forth.s 			page 230


             forth.s:3577   .text:0000000000005000 $d
             forth.s:3593   .text:0000000000005044 SNAM1
             forth.s:3605   .text:0000000000005058 _SCOMP
             forth.s:3605   .text:0000000000005064 SCOMP
             forth.s:3607   .text:0000000000005068 $d
             forth.s:3619   .text:00000000000050a0 SCOM2
             forth.s:3616   .text:0000000000005098 SCOM1
             forth.s:3624   .text:00000000000050b4 SCOM3
             forth.s:3633   .text:00000000000050bc COLON_ABORT
             forth.s:3634   .text:00000000000050bc $t
             forth.s:3635   .text:00000000000050c0 $d
             forth.s:3653   .text:00000000000050f0 _OVERT
             forth.s:3653   .text:00000000000050f6 $t
             forth.s:3655   .text:00000000000050fc $d
             forth.s:3666   .text:0000000000005114 _SEMIS
             forth.s:3666   .text:0000000000005116 $t
             forth.s:3666   .text:0000000000005118 SEMIS
             forth.s:3668   .text:000000000000511c $d
             forth.s:3680   .text:0000000000005138 _RBRAC
             forth.s:3680   .text:000000000000513a $t
             forth.s:3680   .text:000000000000513c RBRAC
             forth.s:3682   .text:0000000000005140 $d
             forth.s:3693   .text:0000000000005154 $t
             forth.s:3694   .text:0000000000005158 $d
             forth.s:3706   .text:0000000000005170 _COLON
             forth.s:3706   .text:0000000000005172 $t
             forth.s:3706   .text:0000000000005174 COLON
             forth.s:3708   .text:0000000000005178 $d
             forth.s:3720   .text:0000000000005194 _IMMED
             forth.s:3720   .text:000000000000519e $t
             forth.s:3720   .text:00000000000051a0 IMMED
             forth.s:3722   .text:00000000000051a4 $d
             forth.s:3740   .text:00000000000051d0 _CONST
             forth.s:3740   .text:00000000000051dc CONST
             forth.s:3742   .text:00000000000051e0 $d
             forth.s:3753   .text:0000000000005210 $t
             forth.s:3760   .text:0000000000005210 DODOES
             forth.s:3762   .text:0000000000005214 $d
             forth.s:3777   .text:0000000000005238 $d
             forth.s:3777   .text:000000000000523c _DOES
             forth.s:3777   .text:0000000000005242 $t
             forth.s:3777   .text:0000000000005244 DOES
             forth.s:3779   .text:0000000000005248 $d
             forth.s:3794   .text:0000000000005278 _DEFERAT
             forth.s:3794   .text:0000000000005280 DEFERAT
             forth.s:3796   .text:0000000000005284 $d
             forth.s:3806   .text:000000000000529c _DEFERSTO
             forth.s:3806   .text:00000000000052a4 DEFERSTO
             forth.s:3808   .text:00000000000052a8 $d
             forth.s:3819   .text:00000000000052c4 _DEFER
             forth.s:3819   .text:00000000000052ca $t
             forth.s:3819   .text:00000000000052cc DEFER
             forth.s:3821   .text:00000000000052d0 $d
             forth.s:3842   .text:000000000000531c CREAT
             forth.s:3832   .text:0000000000005304 DEFER_NOP
             forth.s:3833   .text:0000000000005304 $t
             forth.s:3834   .text:0000000000005308 $d
ARM GAS  forth.s 			page 231


             forth.s:3842   .text:0000000000005314 _CREAT
             forth.s:3844   .text:0000000000005320 $d
             forth.s:3857   .text:0000000000005344 _VARIA
             forth.s:3857   .text:0000000000005350 VARIA
             forth.s:3859   .text:0000000000005354 $d
             forth.s:3877   .text:0000000000005374 DMP
             forth.s:3878   .text:0000000000005374 $t
             forth.s:3879   .text:0000000000005378 $d
             forth.s:3897   .text:00000000000053cc PDUM2
             forth.s:3891   .text:00000000000053b4 PDUM1
             forth.s:3912   .text:00000000000053e4 $d
             forth.s:3912   .text:00000000000053e8 _DUMP
             forth.s:3912   .text:00000000000053f0 DUMP
             forth.s:3914   .text:00000000000053f4 $d
             forth.s:3940   .text:0000000000005470 DUMP4
             forth.s:3930   .text:0000000000005448 DUMP1
             forth.s:3942   .text:0000000000005478 DUMP3
             forth.s:3955   .text:000000000000548c TDOT
             forth.s:3956   .text:000000000000548c $t
             forth.s:3957   .text:0000000000005490 $d
             forth.s:3996   .text:0000000000005524 _DOTS
             forth.s:3996   .text:0000000000005528 DOTS
             forth.s:3998   .text:000000000000552c $d
             forth.s:4005   .text:0000000000005548 DOTS2
             forth.s:4001   .text:000000000000553c DOTS1
             forth.s:4010   .text:0000000000005558 RBASE
             forth.s:4011   .text:0000000000005558 $t
             forth.s:4019   .text:0000000000005568 RDOT
             forth.s:4021   .text:000000000000556c $d
             forth.s:4048   .text:00000000000055d0 _TRACE
             forth.s:4048   .text:00000000000055d6 $t
             forth.s:4048   .text:00000000000055d8 TRACE
             forth.s:4050   .text:00000000000055dc $d
             forth.s:4069   .text:0000000000005620 _TNAME
             forth.s:4069   .text:0000000000005626 $t
             forth.s:4069   .text:0000000000005628 TNAME
             forth.s:4071   .text:000000000000562c $d
             forth.s:4074   .text:0000000000005638 TNAM1
             forth.s:4085   .text:000000000000566c TNAM2
             forth.s:4094   .text:000000000000567c _DOTID
             forth.s:4094   .text:0000000000005680 $t
             forth.s:4094   .text:0000000000005680 DOTID
             forth.s:4096   .text:0000000000005684 $d
             forth.s:4103   .text:00000000000056a8 DOTI1
             forth.s:4104   .text:00000000000056b6 $t
             forth.s:4105   .text:00000000000056b8 $d
             forth.s:4107   *ABS*:0000000000000000 WANT_SEE
             forth.s:4181   .text:00000000000056c0 _WORDS
             forth.s:4181   .text:00000000000056c6 $t
             forth.s:4181   .text:00000000000056c8 WORDS
             forth.s:4183   .text:00000000000056cc $d
             forth.s:4186   .text:00000000000056d8 WORS1
             forth.s:4195   .text:0000000000005700 WORS2
             forth.s:4204   .text:0000000000005708 _MARK
             forth.s:4204   .text:0000000000005710 MARK
             forth.s:4206   .text:0000000000005714 $d
             forth.s:4209   .text:0000000000005720 $t
ARM GAS  forth.s 			page 232


             forth.s:4210   .text:0000000000005724 $d
             forth.s:4225   .text:0000000000005754 _ARRAY
             forth.s:4225   .text:000000000000575a $t
             forth.s:4225   .text:000000000000575c ARRAY
             forth.s:4227   .text:0000000000005760 $d
             forth.s:4241   .text:000000000000579c DO_ARRAY
             forth.s:4242   .text:000000000000579c $t
             forth.s:4243   .text:00000000000057a0 $d
             forth.s:4261   .text:00000000000057bc VERSN
             forth.s:4262   .text:00000000000057bc $t
             forth.s:4263   .text:00000000000057c0 $d
             forth.s:4271   .text:00000000000057d0 _HI
             forth.s:4271   .text:00000000000057d4 HI
             forth.s:4273   .text:00000000000057d8 $d
             forth.s:4274   .text:00000000000057f2 $t
             forth.s:4275   .text:00000000000057f4 $d
             forth.s:4299   .text:0000000000005840 $t
             forth.s:4300   .text:0000000000005844 $d
             forth.s:4312   .text:0000000000005860 PS2_QUERY
             forth.s:4313   .text:0000000000005860 $t
             forth.s:4314   .text:0000000000005864 $d
             forth.s:4328   .text:00000000000058ca $t
             forth.s:4329   .text:00000000000058cc $d
             forth.s:4339   .text:00000000000058d8 IF_SENSE
             forth.s:4340   .text:00000000000058d8 $t
             forth.s:4341   .text:00000000000058dc $d
             forth.s:4355   .text:000000000000590c READY
             forth.s:4356   .text:000000000000590c $t
             forth.s:4357   .text:0000000000005910 $d
             forth.s:4357   .text:000000000000591a $t
             forth.s:4358   .text:000000000000591c $d
             forth.s:4376   .text:0000000000005944 COLD1
             forth.s:4377   .text:0000000000005944 $d
             forth.s:4392   .text:0000000000005994 COLD2
             forth.s:4395   .text:0000000000005994 $d
             forth.s:4398   .text:0000000000005998 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
          ser-term.s:90     .text:00000000000009db $d
          ser-term.s:90     .text:00000000000009dc $t
          ser-term.s:110    .text:0000000000000a15 $d
          ser-term.s:110    .text:0000000000000a16 $t
          ser-term.s:133    .text:0000000000000a53 $d
          ser-term.s:133    .text:0000000000000a54 $t
          ser-term.s:164    .text:0000000000000a9b $d
          ser-term.s:164    .text:0000000000000a9c $t
          ser-term.s:191    .text:0000000000000b11 $d
ARM GAS  forth.s 			page 233


          ser-term.s:191    .text:0000000000000b12 $t
          ser-term.s:203    .text:0000000000000b3f $d
          ser-term.s:203    .text:0000000000000b40 $t
             tvout.s:264    .text:0000000000000d8b $d
             tvout.s:264    .text:0000000000000d8c $t
             tvout.s:278    .text:0000000000000dbf $d
             tvout.s:278    .text:0000000000000dc0 $t
             tvout.s:306    .text:0000000000000e19 $d
             tvout.s:306    .text:0000000000000e1a $t
             tvout.s:325    .text:0000000000000e47 $d
             tvout.s:325    .text:0000000000000e48 $t
             tvout.s:427    .text:0000000000000f81 $d
             tvout.s:427    .text:0000000000000f82 $t
             tvout.s:448    .text:0000000000000fdb $d
             tvout.s:448    .text:0000000000000fdc $t
             tvout.s:495    .text:0000000000001071 $d
             tvout.s:495    .text:0000000000001072 $t
           ps2_kbd.s:307    .text:000000000000175f $d
           ps2_kbd.s:307    .text:0000000000001760 $t
           ps2_kbd.s:396    .text:000000000000185b $d
           ps2_kbd.s:396    .text:000000000000185c $t
           ps2_kbd.s:616    .text:0000000000001afd $d
           ps2_kbd.s:616    .text:0000000000001afe $t
           ps2_kbd.s:633    .text:0000000000001b37 $d
           ps2_kbd.s:633    .text:0000000000001b38 $t
         spi-flash.s:85     .text:0000000000001c23 $d
         spi-flash.s:85     .text:0000000000001c24 $t
         spi-flash.s:151    .text:0000000000001cef $d
         spi-flash.s:151    .text:0000000000001cf0 $t
         spi-flash.s:238    .text:0000000000001e33 $d
         spi-flash.s:238    .text:0000000000001e34 $t
         spi-flash.s:256    .text:0000000000001e6f $d
         spi-flash.s:256    .text:0000000000001e70 $t
         spi-flash.s:278    .text:0000000000001ec3 $d
         spi-flash.s:278    .text:0000000000001ec4 $t
         spi-flash.s:325    .text:0000000000001f43 $d
         spi-flash.s:325    .text:0000000000001f44 $t
         spi-flash.s:343    .text:0000000000001f65 $d
         spi-flash.s:343    .text:0000000000001f66 $t
         spi-flash.s:352    .text:0000000000001f79 $d
         spi-flash.s:352    .text:0000000000001f7a $t
               fpu.s:222    .text:000000000000214b $d
               fpu.s:222    .text:000000000000214c $t
               fpu.s:235    .text:000000000000216b $d
               fpu.s:235    .text:000000000000216c $t
               fpu.s:249    .text:000000000000218b $d
               fpu.s:249    .text:000000000000218c $t
               fpu.s:262    .text:00000000000021ab $d
               fpu.s:262    .text:00000000000021ac $t
               fpu.s:285    .text:00000000000021e9 $d
               fpu.s:285    .text:00000000000021ea $t
               fpu.s:297    .text:0000000000002209 $d
               fpu.s:297    .text:000000000000220a $t
               fpu.s:319    .text:0000000000002243 $d
               fpu.s:319    .text:0000000000002244 $t
               fpu.s:330    .text:000000000000225f $d
               fpu.s:330    .text:0000000000002260 $t
ARM GAS  forth.s 			page 234


               fpu.s:340    .text:0000000000002279 $d
               fpu.s:340    .text:000000000000227a $t
               fpu.s:353    .text:00000000000022a9 $d
               fpu.s:353    .text:00000000000022aa $t
               fpu.s:379    .text:00000000000022f9 $d
               fpu.s:379    .text:00000000000022fa $t
               fpu.s:403    .text:0000000000002343 $d
               fpu.s:403    .text:0000000000002344 $t
               fpu.s:421    .text:0000000000002375 $d
               fpu.s:421    .text:0000000000002376 $t
               fpu.s:431    .text:0000000000002391 $d
               fpu.s:431    .text:0000000000002392 $t
            strtof.s:204    .text:00000000000025cf $d
            strtof.s:204    .text:00000000000025d0 $t
              ftoa.s:412    .text:0000000000002c63 $d
              ftoa.s:412    .text:0000000000002c64 $t
             forth.s:133    .text:0000000000002d1f $d
             forth.s:133    .text:0000000000002d20 $t
             forth.s:145    .text:0000000000002d3f $d
             forth.s:145    .text:0000000000002d40 $t
             forth.s:157    .text:0000000000002d5f $d
             forth.s:157    .text:0000000000002d60 $t
             forth.s:179    .text:0000000000002d99 $d
             forth.s:179    .text:0000000000002d9a $t
             forth.s:215    .text:0000000000002db7 $d
             forth.s:215    .text:0000000000002db8 $t
             forth.s:262    .text:0000000000002e65 $d
             forth.s:262    .text:0000000000002e66 $t
             forth.s:279    .text:0000000000002e93 $d
             forth.s:279    .text:0000000000002e94 $t
             forth.s:293    .text:0000000000002ebd $d
             forth.s:293    .text:0000000000002ebe $t
             forth.s:404    .text:0000000000002f75 $d
             forth.s:404    .text:0000000000002f76 $t
             forth.s:429    .text:0000000000002fa3 $d
             forth.s:429    .text:0000000000002fa4 $t
             forth.s:439    .text:0000000000002fb7 $d
             forth.s:439    .text:0000000000002fb8 $t
             forth.s:448    .text:0000000000002fc3 $d
             forth.s:448    .text:0000000000002fc4 $t
             forth.s:468    .text:0000000000002ff1 $d
             forth.s:468    .text:0000000000002ff2 $t
             forth.s:477    .text:0000000000003005 $d
             forth.s:477    .text:0000000000003006 $t
             forth.s:534    .text:0000000000003079 $d
             forth.s:534    .text:000000000000307a $t
             forth.s:550    .text:000000000000309b $d
             forth.s:550    .text:000000000000309c $t
             forth.s:560    .text:00000000000030ad $d
             forth.s:560    .text:00000000000030ae $t
             forth.s:569    .text:00000000000030bf $d
             forth.s:569    .text:00000000000030c0 $t
             forth.s:586    .text:00000000000030e1 $d
             forth.s:586    .text:00000000000030e2 $t
             forth.s:616    .text:0000000000003127 $d
             forth.s:616    .text:0000000000003128 $t
             forth.s:625    .text:000000000000313d $d
ARM GAS  forth.s 			page 235


             forth.s:625    .text:000000000000313e $t
             forth.s:673    .text:0000000000003197 $d
             forth.s:673    .text:0000000000003198 $t
             forth.s:684    .text:00000000000031ab $d
             forth.s:684    .text:00000000000031ac $t
             forth.s:692    .text:00000000000031b9 $d
             forth.s:692    .text:00000000000031ba $t
             forth.s:700    .text:00000000000031c9 $d
             forth.s:700    .text:00000000000031ca $t
             forth.s:708    .text:00000000000031d9 $d
             forth.s:708    .text:00000000000031da $t
             forth.s:732    .text:0000000000003209 $d
             forth.s:732    .text:000000000000320a $t
             forth.s:757    .text:000000000000323d $d
             forth.s:757    .text:000000000000323e $t
             forth.s:765    .text:000000000000324d $d
             forth.s:765    .text:000000000000324e $t
             forth.s:773    .text:000000000000325f $d
             forth.s:773    .text:0000000000003260 $t
             forth.s:794    .text:0000000000003287 $d
             forth.s:794    .text:0000000000003288 $t
             forth.s:823    .text:00000000000032c3 $d
             forth.s:823    .text:00000000000032c4 $t
             forth.s:833    .text:00000000000032d7 $d
             forth.s:833    .text:00000000000032d8 $t
             forth.s:846    .text:00000000000032f5 $d
             forth.s:846    .text:00000000000032f6 $t
             forth.s:899    .text:000000000000336d $d
             forth.s:899    .text:000000000000336e $t
             forth.s:940    .text:00000000000033c3 $d
             forth.s:940    .text:00000000000033c4 $t
             forth.s:963    .text:00000000000033ef $d
             forth.s:963    .text:00000000000033f0 $t
             forth.s:976    .text:000000000000340f $d
             forth.s:976    .text:0000000000003410 $t
             forth.s:1000   .text:000000000000343f $d
             forth.s:1000   .text:0000000000003440 $t
             forth.s:1046   .text:0000000000003497 $d
             forth.s:1046   .text:0000000000003498 $t
             forth.s:1058   .text:00000000000034af $d
             forth.s:1058   .text:00000000000034b0 $t
             forth.s:1070   .text:00000000000034cb $d
             forth.s:1070   .text:00000000000034cc $t
             forth.s:1131   .text:0000000000003535 $d
             forth.s:1131   .text:0000000000003536 $t
             forth.s:1140   .text:000000000000354d $d
             forth.s:1140   .text:000000000000354e $t
             forth.s:1167   .text:0000000000003595 $d
             forth.s:1167   .text:0000000000003596 $t
             forth.s:1197   .text:00000000000035d1 $d
             forth.s:1197   .text:00000000000035d2 $t
             forth.s:1216   .text:00000000000035fd $d
             forth.s:1216   .text:00000000000035fe $t
             forth.s:1256   .text:0000000000003657 $d
             forth.s:1256   .text:0000000000003658 $t
             forth.s:1276   .text:0000000000003681 $d
             forth.s:1276   .text:0000000000003682 $t
ARM GAS  forth.s 			page 236


             forth.s:1290   .text:000000000000369f $d
             forth.s:1290   .text:00000000000036a0 $t
             forth.s:1301   .text:00000000000036bd $d
             forth.s:1301   .text:00000000000036be $t
             forth.s:1318   .text:00000000000036db $d
             forth.s:1318   .text:00000000000036dc $t
             forth.s:1335   .text:0000000000003707 $d
             forth.s:1335   .text:0000000000003708 $t
             forth.s:1470   .text:0000000000003853 $d
             forth.s:1470   .text:0000000000003854 $t
             forth.s:1492   .text:000000000000389f $d
             forth.s:1492   .text:00000000000038a0 $t
             forth.s:1541   .text:00000000000038df $d
             forth.s:1541   .text:00000000000038e0 $t
             forth.s:1592   .text:0000000000003957 $d
             forth.s:1592   .text:0000000000003958 $t
             forth.s:1651   .text:0000000000003a01 $d
             forth.s:1651   .text:0000000000003a02 $t
             forth.s:1669   .text:0000000000003a29 $d
             forth.s:1669   .text:0000000000003a2a $t
             forth.s:1703   .text:0000000000003a7b $d
             forth.s:1703   .text:0000000000003a7c $t
             forth.s:1736   .text:0000000000003ac9 $d
             forth.s:1736   .text:0000000000003aca $t
             forth.s:1768   .text:0000000000003b11 $d
             forth.s:1768   .text:0000000000003b12 $t
             forth.s:1846   .text:0000000000003bf3 $d
             forth.s:1846   .text:0000000000003bf4 $t
             forth.s:1858   .text:0000000000003c11 $d
             forth.s:1858   .text:0000000000003c12 $t
             forth.s:1890   .text:0000000000003c5f $d
             forth.s:1890   .text:0000000000003c60 $t
             forth.s:1908   .text:0000000000003c91 $d
             forth.s:1908   .text:0000000000003c92 $t
             forth.s:1922   .text:0000000000003cbb $d
             forth.s:1922   .text:0000000000003cbc $t
             forth.s:2000   .text:0000000000003d77 $d
             forth.s:2000   .text:0000000000003d78 $t
             forth.s:2051   .text:0000000000003e5d $d
             forth.s:2051   .text:0000000000003e5e $t
             forth.s:2104   .text:0000000000003ed7 $d
             forth.s:2104   .text:0000000000003ed8 $t
             forth.s:2173   .text:0000000000003feb $d
             forth.s:2173   .text:0000000000003fec $t
             forth.s:2204   .text:0000000000004033 $d
             forth.s:2204   .text:0000000000004034 $t
             forth.s:2221   .text:0000000000004069 $d
             forth.s:2221   .text:000000000000406a $t
             forth.s:2239   .text:000000000000409f $d
             forth.s:2239   .text:00000000000040a0 $t
             forth.s:2344   .text:000000000000419f $d
             forth.s:2344   .text:00000000000041a0 $t
             forth.s:2381   .text:0000000000004203 $d
             forth.s:2381   .text:0000000000004204 $t
             forth.s:2445   .text:00000000000042b7 $d
             forth.s:2445   .text:00000000000042b8 $t
             forth.s:2461   .text:00000000000042df $d
ARM GAS  forth.s 			page 237


             forth.s:2461   .text:00000000000042e0 $t
             forth.s:2603   .text:00000000000044b7 $d
             forth.s:2603   .text:00000000000044b8 $t
             forth.s:2642   .text:0000000000004519 $d
             forth.s:2642   .text:000000000000451a $t
             forth.s:2654   .text:000000000000453f $d
             forth.s:2654   .text:0000000000004540 $t
             forth.s:2665   .text:0000000000004559 $d
             forth.s:2665   .text:000000000000455a $t
             forth.s:2948   .text:00000000000048c7 $d
             forth.s:2948   .text:00000000000048c8 $t
             forth.s:3040   .text:00000000000049db $d
             forth.s:3040   .text:00000000000049dc $t
             forth.s:3091   .text:0000000000004a93 $d
             forth.s:3091   .text:0000000000004a94 $t
             forth.s:3103   .text:0000000000004abd $d
             forth.s:3103   .text:0000000000004abe $t
             forth.s:3124   .text:0000000000004b03 $d
             forth.s:3124   .text:0000000000004b04 $t
             forth.s:3136   .text:0000000000004b21 $d
             forth.s:3136   .text:0000000000004b22 $t
             forth.s:3151   .text:0000000000004b4f $d
             forth.s:3151   .text:0000000000004b50 $t
             forth.s:3299   .text:0000000000004cdf $d
             forth.s:3299   .text:0000000000004ce0 $t
             forth.s:3351   .text:0000000000004d8d $d
             forth.s:3351   .text:0000000000004d8e $t
             forth.s:3375   .text:0000000000004dc9 $d
             forth.s:3375   .text:0000000000004dca $t
             forth.s:3426   .text:0000000000004e5b $d
             forth.s:3426   .text:0000000000004e5c $t
             forth.s:3454   .text:0000000000004ec3 $d
             forth.s:3454   .text:0000000000004ec4 $t
             forth.s:3467   .text:0000000000004ee5 $d
             forth.s:3467   .text:0000000000004ee6 $t
             forth.s:3494   .text:0000000000004f25 $d
             forth.s:3494   .text:0000000000004f26 $t
             forth.s:3517   .text:0000000000004f63 $d
             forth.s:3517   .text:0000000000004f64 $t
             forth.s:3528   .text:0000000000004f83 $d
             forth.s:3528   .text:0000000000004f84 $t
             forth.s:3540   .text:0000000000004fa3 $d
             forth.s:3540   .text:0000000000004fa4 $t
             forth.s:3605   .text:0000000000005061 $d
             forth.s:3605   .text:0000000000005062 $t
             forth.s:3740   .text:00000000000051d9 $d
             forth.s:3740   .text:00000000000051da $t
             forth.s:3794   .text:000000000000527f $d
             forth.s:3794   .text:0000000000005280 $t
             forth.s:3806   .text:00000000000052a3 $d
             forth.s:3806   .text:00000000000052a4 $t
             forth.s:3842   .text:000000000000531b $d
             forth.s:3842   .text:000000000000531c $t
             forth.s:3857   .text:000000000000534d $d
             forth.s:3857   .text:000000000000534e $t
             forth.s:3912   .text:00000000000053ed $d
             forth.s:3912   .text:00000000000053ee $t
ARM GAS  forth.s 			page 238


             forth.s:3996   .text:0000000000005527 $d
             forth.s:3996   .text:0000000000005528 $t
             forth.s:4204   .text:000000000000570d $d
             forth.s:4204   .text:000000000000570e $t
             forth.s:4271   .text:00000000000057d3 $d
             forth.s:4271   .text:00000000000057d4 $t
             forth.s:4370   .text:000000000000592d $d
             forth.s:4370   .text:000000000000592e $t

UNDEFINED SYMBOLS
_mstack
