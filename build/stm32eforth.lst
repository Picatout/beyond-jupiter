ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
ARM GAS  forth.s 			page 9


  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	
ARM GAS  forth.s 			page 10


 109              	/***********************************************
 110              	* MACROS
 111              	*	Assemble inline direct threaded code ending.
 112              	***********************************************/
 113              		.macro _CALL fn /* low level routine call */ 
 114              	 	PUSH {LR}
 115              		BL \fn  
 116              		POP {LR}
 117              		.endm
 118              		
 119              		.macro _RET /* exit sub-routine */ 
 120              		BX LR 
 121              		.endm 
 122              	
 123              		// dictionary header  
 124              		.macro _HEADER  label, nlen, name
 125              			.word LINK 
 126              			.equ LINK , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		\label:   // code field 
 131              		.endm 
 132              		
 133              	
 134              	// local function header 
 135              		.macro _FUNC label 
 136              		.section .text, "ax", %progbits 
 137              		.p2align 2 
 138              		.type \label, %function  
 139              		\label:
 140              		.endm 
 141              	
 142              	// global function header 
 143              		.macro _GBL_FUNC label 
 144              		.global \label 
 145              		_FUNC \label 
 146              		.endm 
 147              	
 148              	
 149              	// load large constant to register 
 150              		.macro _MOV32 r, value 
 151              		mov \r,#(\value&0xffff)
 152              		movt \r,#(\value>>16)
 153              		.endm 
 154              	
 155              		.macro _NEXT /* direct jump INEXT */ 
 156              		B INEXT   
 157              		.endm 
 158              	
 159              	 	.macro	_NEST /*start high level word */
 160              		BX INX  
 161              		NOP.N 
 162              		.endm
 163              	
 164              		.macro _ADR label 
 165              		.word 1+\label  
ARM GAS  forth.s 			page 11


 166              		.endm 
 167              	
 168              	 	.macro	_UNNEST	/*end high level word */
 169              		_ADR UNNEST 
 170              		.endm
 171              	
 172              	 	.macro	_DOLIT u /*long literals */
 173              		_ADR	DOLIT
 174              		.word	\u 
 175              		.endm
 176              	
 177              		.macro _DOTQP len, text 
 178              		_ADR DOTQP 
 179              		.byte \len 
 180              		.ascii "\text" 
 181              		.p2align 2 
 182              		.endm
 183              	
 184              		.macro _COMPI name 
 185              		_DOLIT \name 
 186              		_ADR CALLC 
 187              		.endm 
 188              	
 189              		.macro _ABORQ len,name 
 190              		_ADR ABORQ 
 191              		.byte \len 
 192              		.ascii "\name"
 193              		.p2align 2 
 194              		.endm
 195              	
 196              		.macro _BRAN label 
 197              		_ADR BRAN 
 198              		.word \label 
 199              		.endm 
 200              	
 201              		.macro _QBRAN label 
 202              		_ADR QBRAN 
 203              		.word \label
 204              		.endm 
 205              	
 206              		.macro _DONXT label 
 207              		_ADR DONXT
 208              		.word \label 
 209              		.endm 
 210              	
 211              	 	.macro	_PUSH	/*push TOS on data stack*/
 212              		STR	TOS,[DSP,#-4]!
 213              		.endm
 214              	
 215              	 	.macro	_POP /*pop data stack to TOS */
 216              		LDR	TOS,[DSP],#4
 217              		.endm
 218              	
 219              		// calling a colon word 
 220              		// from a code word   
 221              		.macro _CALL_COLWORD target 
 222              	    ldr WP,=\target 
ARM GAS  forth.s 			page 12


 223              		orr WP,#1
 224              		b \target  
 225              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
ARM GAS  forth.s 			page 13


  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
ARM GAS  forth.s 			page 14


 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF890C4 	  ldr IP,=dh
 159 000e 01F033BD 	  b INEXT  
 160              	dh:
 161 0012 21320000 	  _ADR PRESE    
 162 0016 F71B0000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e AD200000 	  _ADR COUNT 
 164 0022 A9290000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a 291D0000 	  _ADR DUPP
 167 002e D11C0000 	  _ADR TOR 
 168 0032 F71B0000 	  _DOLIT 16 
 168      10000000 
 169 003a 45210000 	  _ADR BASE 
 170 003e 691C0000 	  _ADR STORE 
 171 0042 E12A0000 	  _ADR DOT 
 172 0046 A91C0000 	  _ADR RFROM
 173 004a F71B0000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 6D1D0000 	  _ADR ANDD
 175 0056 371C0000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 F71B0000 	  _DOLIT ','
 177      2C000000 
 178 006a 011B0000 	  _ADR EMIT 
 179 006e 55290000 	  _ADR SPACE 
 180 0072 E12A0000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
 186              	  stack CFSR register 
 187              	***************************/
ARM GAS  forth.s 			page 15


 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 01F0F6BC 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 01F0EDBC 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8C0C3 	  ldr IP,=ur
 232 00e2 01F0C9BC 	  b INEXT  
 233              	ur:
 234 00e6 21320000 	  _ADR PRESE
 235 00ea DD290000 	  _ADR CR   
ARM GAS  forth.s 			page 16


 236 00ee F71B0000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 AD200000 		_ADR COUNT 
 238 00fa A9290000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0C4F9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0B7FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 03F059BE 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
ARM GAS  forth.s 			page 17


 284      C2F20108 
 285 0180 DFF820A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
ARM GAS  forth.s 			page 18


 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	/* enable FPU coprocessors CP10,CP11 */
 347              	//  _MOV32 r0, CPACR 
 348              	//  mov r1,#15<<20
 349              	//  str r1,[r0]
 350              	
 351              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 352 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 353 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 354 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 355 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 356              	/* configure GPIOC:13 as output for user LED */
 357 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 357      C4F20200 
 358 0206 4FF00D01 	  mov r1,#LED_PIN
 359 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 360 020e 00B500F0 	  _CALL gpio_config 
 360      8FF85DF8 
 360      04EB
 361 0218 4FF00102 	  mov r2,#1
 362 021c 00B500F0 	  _CALL gpio_out 
 362      DEF85DF8 
 362      04EB
 363              	/* enable compensation CELL for fast I/O */
 364 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 364      C4F20101 
 365 022e 4FF00100 		mov r0,#1 
 366 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 367              	/* wait for ready bit */ 
 368 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 369 0236 10F4807F 	    tst r0,#(1<<8)
 370 023a FBD0     		beq 1b 	
 371              	
 372              	
 373              	/* configure systicks for 1msec ticks */
 374              	// set priority to 15 (lowest)
 375 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 376 0240 4FF00F01 	  mov r1,#15 
 377 0244 00B500F0 	  _CALL nvic_set_priority
 377      2FF85DF8 
 377      04EB
 378 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 378      CEF20000 
 379 0256 47F2FF61 	  _MOV32 r1,95999 
 379      C0F20101 
 380 025e 4160     	  str r1,[r0,#STK_LOAD]
 381 0260 4FF00701 	  mov r1,#7
 382 0264 0160     	  str r1,[r0,STK_CTL]
ARM GAS  forth.s 			page 19


 383 0266 7047     	  _RET  
 384              	
 385              	
 386              	/* copy system variables to RAM */ 
 387              		.type remap, %function 
 388              	    .global remap 
 389              	remap:
 390              	// copy system to RAM 	
 391 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 391      C2F20000 
 392 0270 8D49     		ldr r1,=UZERO 
 393 0272 4FF0A802 		mov r2,#ULAST-UZERO 
 394 0276 02F10302 		add r2,r2,#3
 395 027a 22F00302 		and r2,r2,#~3 
 396 027e 51F8043B 	1:	ldr r3,[r1],#4 
 397 0282 40F8043B 		str r3,[r0],#4 
 398 0286 043A     		subs R2,#4 
 399 0288 F9D1     		bne 1b
 400              	// zero end of RAM 
 401 028a 4FF00002 		_MOV32 r2,RAM_END 
 401      C2F20202 
 402 0292 83EA0303 		eor r3,r3,r3 
 403 0296 40F8043B 	2:  str r3,[r0],#4
 404 029a 9042     		cmp r0,r2 
 405 029c FBDB     		blt 2b 
 406 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 406      C2F20004 
 407 02a6 7047     		_RET 
 408              	
 409              	// set irq priority 
 410              	// 0 highest 
 411              	// 15 lowest
 412              	// input: r0 IRQn  
 413              	//        r1  ipr 
 414              	nvic_set_priority:
 415 02a8 08B4     	    push {r3}
 416 02aa 0028     	    cmp r0,#0 
 417 02ac 08D4     	    bmi negative_irq 
 418 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 418      CEF20003 
 419 02b6 4FEA0111 	    lsl r1,#4 
 420 02ba 1954     	    strb r1,[r3,r0]
 421 02bc 08BC     	    pop {r3}
 422 02be 7047     	    _RET 
 423              	negative_irq:
 424 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 424      CEF20003 
 425 02c8 00F00F00 	    and r0,#0XF 
 426 02cc A0F10400 	    sub r0,#4 
 427 02d0 4FEA0111 	    lsl r1,#4 
 428 02d4 1954     	    strb r1,[r3,r0]
 429 02d6 08BC     	    pop {r3}
 430 02d8 7047     	    _RET 
 431              	
 432              	
 433              	// enable interrupt in nvic 
 434              	// input: r0 = IRQn 
ARM GAS  forth.s 			page 20


 435              	nvic_enable_irq: 
 436 02da 0EB4     	    push {r1,r2,r3}
 437 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 437      CEF20003 
 438 02e4 0146     	    mov r1,r0 
 439 02e6 4FEA5111 	    lsr r1,#5  
 440 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 441 02ee 00F01F00 	    and r0,#31 // bit#
 442 02f2 4FF00102 	    mov r2,#1 
 443 02f6 02FA00F2 	    lsl r2,r0
 444 02fa 72B6     	    cpsid I
 445 02fc 5A50     	    str r2,[r3,r1]
 446 02fe 62B6     	    cpsie I 
 447 0300 0EBC     	    pop {r1,r2,r3}
 448 0302 7047     	    _RET 
 449              	
 450              	// disable interrupt in nvic
 451              	// input: r0 = IRQn
 452              	nvic_disable_irq:
 453 0304 0EB4     	    push {r1,r2,r3}
 454 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 454      CEF20003 
 455 030e 0146     	    mov r1,r0 
 456 0310 4FEA5111 	    lsr r1,#5  
 457 0314 4FEA8101 	    lsl r1,#2  // ISERn
 458 0318 00F01F00 	    and r0,#31 // bit#
 459 031c 4FF00102 	    mov r2,#1 
 460 0320 02FA00F2 	    lsl r2,r0
 461 0324 5A50     	    str r2,[r3,r1]
 462 0326 BFF34F8F 	    dsb 
 463 032a BFF36F8F 	    isb 
 464 032e 0EBC     	    pop {r1,r2,r3}
 465 0330 7047     	    _RET 
 466              	
 467              	/**********************************
 468              	  gpio_config 
 469              	  Configure gpio mode 
 470              	  input:
 471              	    r0   GPIOx 
 472              	    r1   pin 
 473              	    r2   mode 
 474              	  output:
 475              	    none 
 476              	  use:
 477              	    r3,r5,r11  
 478              	**********************************/
 479              	gpio_config:
 480 0332 2DE92808 	    push {r3,r5,r11}
 481              	//  clear registers field 
 482 0336 4FF00105 	    mov r5,#1
 483 033a 05FA01F5 	    lsl r5,r1
 484 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 485 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 486 0344 03EA0503 	    and r3,r5 
 487 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 488 034a 4FF00305 	    mov r5,#3 
 489 034e 4FF0020B 	    mov r11,#2 
ARM GAS  forth.s 			page 21


 490 0352 01FB0BFB 	    mul r11,r1 
 491 0356 05FA0BF5 	    lsl r5,r11 
 492 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 493 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 494 0360 03EA0503 	    and r3,r5 
 495 0364 0360     	    str r3,[r0,#GPIO_MODER]
 496 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 497 0368 03EA0503 	    and r3,r5 
 498 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 499              	// set mode register, r2 low nibble  
 500 036e 02F00305 	    and r5,r2,#3    
 501 0372 05FA0BF5 	    lsl r5,r11 // mode 
 502 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 503 0378 43EA0503 	    orr r3,r5 
 504 037c 0360     	    str r3,[r0,#GPIO_MODER]
 505 037e 032A     	    cmp r2,#3
 506 0380 13D0     	    beq 9f // analog input 
 507 0382 12F00305 	    ands r5,r2,#3 
 508 0386 08D0     	    beq input_pull 
 509              	output_type:
 510 0388 4FEA1212 	    lsr r2,#4 
 511 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 512 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 513 0392 43EA0203 	    orr r3,r2 
 514 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 515 0398 07E0     	    b 9f 
 516              	input_pull:
 517 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 518 039c 4FEA1212 	    lsr r2,#4 
 519 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 520 03a4 43EA0203 	    orr r3,r2 
 521 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 522 03aa BDE82808 	9:  pop {r3,r5,r11}
 523 03ae 7047     	    _RET 
 524              	
 525              	// configure gpio speed 
 526              	// input:
 527              	//    r0   GPIO_BASE_ADR 
 528              	//    r1   pin 
 529              	//    r2   speed
 530              	// use:
 531              	//  r3,r5,r11 
 532              	gpio_speed:
 533 03b0 2DE92808 	    push {r3,r5,r11}
 534 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 535 03b6 4FF00305 	    mov r5,#3
 536 03ba 4FF0020B 	    mov r11,#2 
 537 03be 01FB0BFB 	    mul r11,r1 
 538 03c2 05FA0BF5 	    lsl r5,r11
 539 03c6 6FEA0505 	    mvn r5,r5 
 540 03ca 03EA0503 	    and r3,r5   
 541 03ce 02FA0BF2 	    lsl r2,r11  
 542 03d2 43EA0203 	    orr r3,r2 
 543 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 544 03d8 BDE82808 	    pop {r3,r5,r11}
 545 03dc 7047     	    _RET
 546              	
ARM GAS  forth.s 			page 22


 547              	/**************************** 
 548              	  gpio_out port,pin,0|1
 549              	  input:
 550              	    r0   gpio_base_adr 
 551              	    r1   pin 
 552              	    r2   data 0|1 
 553              	**************************/
 554              	gpio_out:
 555 03de 08B4     	    push {r3}
 556 03e0 4FF00103 	    mov r3,#1 
 557 03e4 03FA01F3 	    lsl r3,r1 
 558 03e8 0AB9     	    cbnz r2, 1f 
 559 03ea 4FEA0343 	    lsl r3,#16 
 560 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 561 03f0 08BC     	    pop {r3}
 562 03f2 7047     	    _RET 
 563              	
 564              	/******************************************************
 565              	*  COLD start moves the following to USER variables.
 566              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 567              	******************************************************/
 568              		.p2align 2
 569              	UZERO:
 570 03f4 00000000 		.word 0  			/*Reserved */
 571 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 572 03fc 00000000 		.word 0      /* TICKS */
 573 0400 00000000 	    .word 0     /* CD_TIMER */
 574 0404 FC3C0000 		.word HI  /*'BOOT */
 575 0408 C0130000 		.word PS2_QKEY /* query for character */
 576 040c 880C0000 	  .word TV_EMIT  /* char output device */
 577 0410 0A000000 	  .word BASEE 	/*BASE */
 578 0414 00000000 		.word 0			/*tmp */
 579 0418 00000000 		.word 0			/*SPAN */
 580 041c 00000000 		.word 0			/*>IN */
 581 0420 00000000 		.word 0			/*#TIB */
 582 0424 00FF0120 		.word TIBB	/*TIBU */
 583 0428 F8300000 		.word INTER	/*'EVAL */
 584 042c 00000000 		.word 0			/*HLD */
 585 0430 103E0000 		.word _LASTN	/*CONTEXT */
 586 0434 783E0000 		.word CTOP  	/* FCP end of system dictionnary */
 587 0438 843A0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 588 043c 103E0000 		.word _LASTN	/*LAST word in dictionary */
 589 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 589      00000000 
 589      00000000 
 589      00000000 
 590 0450 00000000 		.word 0  /* RX_HEAD */
 591 0454 00000000 		.word 0  /* RX_TAIL */ 
 592 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 593 045c 00000000 		.word 0  /* VID_STATE, video state */  
 594 0460 00000000 	    .word 0  /* VID_FIELD, field */
 595 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 596 0468 00000000 	    .word 0 /* kbd struct */
 597 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 597      00000000 
 597      00000000 
 597      00000000 
ARM GAS  forth.s 			page 23


 598 047c 00000000 		.word 0  /* kbd queue head */
 599 0480 00000000 		.word 0 /* kbd queue tail */ 
 600 0484 00000000 	    .word 0 /* tv cursor row */
 601 0488 00000000 	    .word 0 /* tv cursor column */ 
 602 048c 00000000 	    .word 0 /* tv back color */
 603 0490 07000000 	    .word 7 /* tv font color */
 604 0494 00000000 	    .word 0,0 
 604      00000000 
 605              	ULAST:
 606              	
 607              	// used by _HEADER macro 
 608              	// to link names field
 609              	// in dictionary  
 610 049c 12000000 	    .equ LINK, 0 
 610      E6000000 
 610      701A0000 
 610      F4030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04ac 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 04b4 1868     		ldr r0,[r3,#USART_SR]
  38 04b6 5968     		ldr r1,[r3,#USART_DR]
  39 04b8 10F0200F 		tst r0,#(1<<5) // RXNE 
ARM GAS  forth.s 			page 24


  40 04bc 0CD0     		beq 2f // no char received 
  41 04be B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04c2 3FF407AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04c6 04F14C00 		add r0,UP,#RX_QUEUE
  44 04ca 226E     		ldr r2,[UP,#RX_TAIL]
  45 04cc 8154     		strb r1,[r0,r2]
  46 04ce 02F10102 		add r2,#1 
  47 04d2 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04d6 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04d8 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04da 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04e2 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04e4 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04e8 01EA0201 	  and r1,r1,r2
  62 04ec 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04f0 41EA0201 	  orr r1,r1,r2 
  64 04f4 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04f6 4FF4EE61 	  mov r1,#0x77<<4 
  67 04fa 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 04fc 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0504 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0508 8160     	  str r1,[r0,#USART_BRR]
  73 050a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 050e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0510 4FF02500 	  mov r0,#USART1_IRQ 
  77 0514 4FF00701 	  mov r1,#7
  78 0518 00B5FFF7 	  _CALL nvic_set_priority
  78      C5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0522 4FF02500 	  mov r0,#USART1_IRQ 
  81 0526 00B5FFF7 	  _CALL nvic_enable_irq  
  81      D7FE5DF8 
  81      04EB
  82 0530 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0532 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
ARM GAS  forth.s 			page 25


  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0540 47F8046D 		_PUSH
  92 0544 206E     		ldr T0,[UP,#RX_TAIL] 
  93 0546 E16D     		ldr T1,[UP,#RX_HEAD]
  94 0548 90EA0106 		eors TOS,T0,T1 
  95 054c 0CD0     		beq 1f
  96 054e 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0552 0844     		add T0,T1 
  98 0554 0678     		ldrb TOS,[T0]
  99 0556 01F10101 		add T1,#1 
 100 055a 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 055e E165     		str T1,[UP,#RX_HEAD]
 102 0560 47F8046D 		_PUSH 
 103 0564 4FF0FF36 		mov TOS,#-1
 104 0568 01F086BA 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 056c 36050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 057c 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0584 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0586 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 058a FBD0     		beq 1b 
 115 058c 2E71     		strb TOS,[WP,#USART_DR]	 
 116 058e 57F8046B 		_POP
 117 0592 01F071BA 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0596 70050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05a0 47F8046D 	        _PUSH 
 126 05a4 4FF00006 	        mov TOS,#0
 127 05a8 01F066BA 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05ac 9A050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 05b8 47F8046D 	        _PUSH 
 135 05bc 4FF00106 	        mov TOS,#1
 136 05c0 01F05ABA 	        _NEXT 
ARM GAS  forth.s 			page 26


 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05c4 B0050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05d0 3046     	        mov T0,TOS
 144 05d2 57F8046B 	        _POP 
 145 05d6 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05d8 4B48     	        ldr T0,=SER_QKEY 
 148 05da 6061     	        str T0,[UP,#STDIN]
 149 05dc 4B48     	        ldr T0,=SER_EMIT
 150 05de A061     	        str T0,[UP,#STDOUT]
 151 05e0 01F04ABA 	        _NEXT 
 152              	4: // local console 
 153 05e4 4A48     	        ldr T0,=PS2_QKEY
 154 05e6 6061     	        str T0,[UP,#STDIN]
 155 05e8 4A48     	        ldr T0,=TV_EMIT
 156 05ea A061     	        str T0,[UP,#STDOUT]
 157 05ec 01F044BA 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 05f0 C8050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0600 504700BF 	      _NEST 
 166 0604 F71B0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 060c 491E0000 	1:    _ADR ONEP  // c+1
 168 0610 D11C0000 	      _ADR TOR   
 169 0614 F71B0000 	      _DOLIT 10 
 169      0A000000 
 170 061c 39230000 	      _ADR SLMOD // r q  
 171 0620 FD1E0000 	      _ADR QDUP  // r q q | r 0  
 172 0624 371C0000 	      _QBRAN 2f  // r 0 
 172      38060000 
 173 062c A91C0000 	      _ADR RFROM // r q c 
 174 0630 4B1C0000 	      _BRAN 1b
 174      0C060000 
 175 0638 F71B0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0640 ED1D0000 	      _ADR PLUS 
 177 0644 011B0000 	      _ADR EMIT 
 178 0648 A91C0000 	      _ADR RFROM 
 179 064c FD1E0000 	      _ADR QDUP 
 180 0650 371C0000 	      _QBRAN 3f
 180      68060000 
 181 0658 591E0000 	      _ADR ONEM 
 182 065c D11C0000 	      _ADR TOR 
ARM GAS  forth.s 			page 27


 183 0660 4B1C0000 	      _BRAN 2b 
 183      38060000 
 184              	3:    
 185 0668 7F1A0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 066c F4050000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0678 504700BF 	      _NEST 
 193 067c F71B0000 	      _DOLIT 27 
 193      1B000000 
 194 0684 011B0000 	      _ADR EMIT 
 195 0688 F71B0000 	      _DOLIT '['
 195      5B000000 
 196 0690 011B0000 	      _ADR EMIT 
 197 0694 7F1A0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0698 70060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06a4 504700BF 	      _NEST
 205 06a8 79060000 	      _ADR ANSI_ESC
 206 06ac 391D0000 	      _ADR SWAP 
 207 06b0 01060000 	      _ADR ANSI_PARAM 
 208 06b4 F71B0000 	      _DOLIT ';'
 208      3B000000 
 209 06bc 011B0000 	      _ADR EMIT
 210 06c0 01060000 	      _ADR ANSI_PARAM
 211 06c4 F71B0000 	      _DOLIT 'H'
 211      48000000 
 212 06cc 011B0000 	      _ADR EMIT 
 213 06d0 7F1A0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06d4 9C060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06e0 504700BF 	    _NEST
 221 06e4 F71B0000 	    _DOLIT 1 
 221      01000000 
 222 06ec 291D0000 	    _ADR DUPP 
 223 06f0 A5060000 	    _ADR SER_AT  
 224 06f4 79060000 	    _ADR ANSI_ESC
 225 06f8 F71B0000 	    _DOLIT 'J'
 225      4A000000 
 226 0700 011B0000 	    _ADR EMIT 
ARM GAS  forth.s 			page 28


 227 0704 7F1A0000 	    _UNNEST 
 228 0708 40050000 	
 228      7C050000 
 228      C0130000 
 228      880C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
ARM GAS  forth.s 			page 29


  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0718 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0720 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0722 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
ARM GAS  forth.s 			page 30


  80              	//  movt r2,#0x55<<8 
  81 072a 41EA0201 	  orr r1,r2
  82 072e 0160     	  str r1,[r0,#GPIO_MODER]
  83 0730 81EA0101 	  eor r1,r1 
  84 0734 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0736 4FF00101 	  mov r1,#1 // pin 1 
  88 073a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 073e 00B5FFF7 	  _CALL gpio_config 
  89      F7FD5DF8 
  89      04EB
  90 0748 4FF00101 	  mov r1,#1 
  91 074c 4FF00202 	  mov r2,#2
  92 0750 00B5FFF7 	  _CALL gpio_speed 
  92      2DFE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 075a 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 075c 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0760 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0762 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 076a 4FF00200 	  mov r0,#2 
 100 076e 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0770 41EA0001 	  orr r1,r0 
 102 0774 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0776 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 077e 41F2D470 	  mov r0,#HPER
 106 0782 D062     	  str r0,[r2,#TIM_ARR]
 107 0784 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0788 D063     	  str r0,[r2,#TIM_CCR3]
 109 078a 4FF4E170 	  mov r0,#HPULSE 
 110 078e 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0790 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0794 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0796 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 079a 1062     	  str r0,[r2,#TIM_CCER]
 115 079c 4FF00100 	  mov r0,#1 
 116 07a0 D060     	  str r0,[r2,#TIM_DIER]
 117 07a2 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 07a4 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 07a8 4FF00201 	  mov r1,#2
 121 07ac 00B5FFF7 	  _CALL nvic_set_priority
 121      7BFD5DF8 
 121      04EB
 122 07b6 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 07ba 00B5FFF7 	  _CALL nvic_enable_irq
 123      8DFD5DF8 
 123      04EB
 124 07c4 7047     	  _RET
 125              	
 126              	/*************************************
ARM GAS  forth.s 			page 31


 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 07c6 00BF     	  _GBL_FUNC tv_out_isr
 132 07c8 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 07d0 81EA0101 	  eor T1,T1
 134 07d4 0161     	  str T1,[T0,#TIM_SR]
 135 07d6 616E     	  ldr T1,[UP,#VID_CNTR]
 136 07d8 01F10101 	  add T1,#1 
 137 07dc 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 07de A26E     	  ldr T2,[UP,#VID_STATE]
 140 07e0 002A     	  cmp T2,#ST_VSYNC 
 141 07e2 07D0     	  beq state_vsync
 142 07e4 012A     	  cmp T2,#ST_PREVID 
 143 07e6 2FD0     	  beq state_pre_video 
 144 07e8 022A     	  cmp T2,#ST_VIDEO 
 145 07ea 36D0     	  beq state_video_out 
 146 07ec 032A     	  cmp T2,#ST_POSTVID 
 147 07ee 63D0     	  beq state_post_video
 148 07f0 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 07f4 0129     	  cmp T1,#1
 152 07f6 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 07f8 4FF0DB01 	  mov T1,#SERRATION
 155 07fc 0164     	  str T1,[T0,#TIM_CCR4]
 156 07fe 40F6E931 	  mov T1,#SYNC_LINE 
 157 0802 C162     	  str T1,[T0,#TIM_ARR]
 158 0804 6BE0     	  b tv_isr_exit 
 159 0806 0729     	1: cmp T1,#7
 160 0808 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 080a 40F62821 	  mov T1,#VSYNC_PULSE
 163 080e 0164     	  str T1,[T0,#TIM_CCR4]
 164 0810 65E0     	  b tv_isr_exit
 165 0812 0D29     	2: cmp T1,#13
 166 0814 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0816 4FF0DB01 	   mov T1,#SERRATION 
 169 081a 0164     	   str T1,[T0,#TIM_CCR4]
 170 081c 5FE0     	   b tv_isr_exit   
 171 081e 1229     	3: cmp T1,#18
 172 0820 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0822 E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0824 0029     	   cmp T1,#ODD_FIELD  
 176 0826 5AD0     	   beq tv_isr_exit 
 177 0828 01E0     	   b sync_end 
 178 082a 1329     	4: cmp T1,#19 
 179 082c 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 082e 4FF00901 	   mov T1,#9
 182 0832 6166     	   str T1,[UP,#VID_CNTR]
ARM GAS  forth.s 			page 32


 183 0834 4FF4E171 	   mov T1,#HPULSE 
 184 0838 0164     	   str T1,[T0,#TIM_CCR4] 
 185 083a 41F2D471 	   mov T1,#HPER 
 186 083e C162     	   str T1,[T0,#TIM_ARR] 
 187 0840 4FF00101 	   mov T1,#ST_PREVID 
 188 0844 A166     	   str T1,[UP,#VID_STATE]
 189 0846 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0848 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 084a 48D4     	   bmi tv_isr_exit 
 194 084c 4FF00201 	   mov T1,#ST_VIDEO 
 195 0850 A166     	   str T1,[UP,#VID_STATE]
 196 0852 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0856 C160     	   str T1,[T0,#TIM_DIER]
 198 0858 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 085a F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 085c 06D9     	   bls 1f 
 205 085e 4FF00301 	   mov T1,#ST_POSTVID 
 206 0862 A166     	   str T1,[UP,#VID_STATE]
 207 0864 4FF00101 	   mov T1,#1 
 208 0868 C160     	   str T1,[T0,#TIM_DIER]
 209 086a 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 086c 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 086e A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0872 4FF0A003 	   mov T3,#160
 214 0876 03FB01F1 	   mul T1,T3 
 215 087a 0844     	   add T0,T1  
 216 087c 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0884 10F8012B 	2: ldrb T2,[T0],#1 
 222 0888 4FEA0222 	   lsl T2,#8 
 223 088c 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 088e AFF30080 	   nop.w 
 225 0892 AFF30080 	   nop.w
 226 0896 AFF30080 	   nop.w 
 227 089a AFF30080 	   nop.w 
 228 089e 4FEA0212 	   lsl T2,#4  
 229 08a2 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 08a4 AFF30080 	   nop.w
 231 08a8 AFF30080 	   nop.w  
 232 08ac 013B     	   subs T3,#1
 233 08ae E9D1     	   bne 2b  
 234 08b0 4FF47022 	   mov T2,#(15<<16) 
 235 08b4 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 08b6 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 08b8 4FF48372 	   mov T2,#262
ARM GAS  forth.s 			page 33


 239 08bc 9142     	   cmp T1,T2
 240 08be 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 08c0 E16E     	   ldr T1,[UP,VID_FIELD]
 243 08c2 11B9     	   cbnz T1, frame_end 
 244 08c4 40F6E931 	   mov T1,#SYNC_LINE
 245 08c8 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 08ca 4FF00001 	   mov T1,#ST_VSYNC 
 248 08ce A166     	   str T1,[UP,#VID_STATE]
 249 08d0 81EA0101 	   eor T1,T1 
 250 08d4 6166     	   str T1,[UP,#VID_CNTR]
 251 08d6 E16E     	   ldr T1,[UP,#VID_FIELD]
 252 08d8 6FEA0101 	   mvn T1,T1  
 253 08dc E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 08de 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 08e0 D8060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 08f0 47F8046D 		_PUSH 
 266 08f4 04F19806 		ADD TOS,UP,#BK_COLOR
 267 08f8 01F0BEB8 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 08fc E4080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 090c 47F8046D 		_PUSH 
 273 0910 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0914 01F0B0B8 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0918 00090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0924 47F8046D 	  _PUSH 
 280 0928 04F19406 	  ADD TOS,UP,#COL 
 281 092c 01F0A4B8 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0930 1C090000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0938 47F8046D 	  _PUSH 
ARM GAS  forth.s 			page 34


 287 093c 04F19006 	  ADD TOS,UP,#ROW 
 288 0940 01F09AB8 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0944 34090000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0950 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0954 00FB06F6 	  mul TOS,T0 
 295 0958 01F08EB8 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 095c 48090000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0968 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 096c 00FB06F6 	  mul TOS,T0 
 302 0970 01F082B8 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0974 60090000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0980 47F8046D 	  _PUSH 
 308 0984 DFF88C65 	  ldr TOS,=font_6x8 
 309 0988 01F076B8 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 098c 78090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0998 47F8046D 	  _PUSH 
 315 099c 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 099e 01F06BB8 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 09a2 90090000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 09ac 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 09ae 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 09b2 02FB00F0 	    mul T0,T2 
 330 09b6 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 09ba 1044     	    add T0,T2 
 332 09bc 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 09be 0344     	    add T3,T0 // T3 -> byte address 
ARM GAS  forth.s 			page 35


 334 09c0 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 09c2 4FF00F02 	    mov T2,#15 // AND mask 
 336 09c6 11F0010F 	    tst T1,#1 
 337 09ca 01D0     	    beq 1f 
 338 09cc 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 09d0 DFF84405 	1:  ldr T0,=plot_op 
 340 09d4 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 09d8 05EA0205 	    and WP,T2 // mask out nibble 
 343 09dc 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 09e0 11F0010F 	    tst T1,#1 
 345 09e4 01D1     	    bne 1f 
 346 09e6 4FEA0010 	    lsl T0,#4 // high nibble  
 347 09ea 45EA0005 	1:  orr WP,T0  
 348 09ee 1D70     	    strb WP,[T3]
 349 09f0 1AE0     	    b 9f 
 350              	op_pen: 
 351 09f2 05EA0205 	    and WP,T2 
 352 09f6 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 09fa 11F0010F 	    tst T1,#1
 354 09fe 01D1     	    bne 1f 
 355 0a00 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0a04 45EA0005 	1:	orr WP,T0 
 357 0a08 1D70     	    strb WP,[T3]
 358 0a0a 0DE0     	    b 9f 
 359              	op_invert:
 360 0a0c 85EA0205 	    eor WP,T2 
 361 0a10 1D70     	    strb WP,[T3]
 362 0a12 09E0     	    b 9f 
 363              	op_xor:
 364 0a14 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0a18 11F0010F 	    tst T1,#1 
 366 0a1c 01D1     	    bne 1f 
 367 0a1e 4FEA0010 	    lsl T0,#4 
 368 0a22 85EA0005 	1:  eor WP,T0 
 369 0a26 1D70     	    strb WP,[T3]
 370 0a28 57F8046B 	9:  _POP 
 371 0a2c 01F024B8 	    _NEXT 
 372              	
 373 0a30 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0a34 A6090000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0a40 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0a42 0028     	    cmp T0,#0
 381 0a44 FCD1     	    bne 1b
 382 0a46 01F017B8 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0a4a 380A0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
ARM GAS  forth.s 			page 36


 387 0a54 80EA0000 	    eor T0,T0 
 388 0a58 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0a5c 40EA0100 	    orr T0,T1 
 390 0a60 4FEA0111 	    lsl T1,#4 
 391 0a64 40EA0100 	    orr T0,T1 
 392 0a68 4FEA0021 	    lsl T1,T0,#8 
 393 0a6c 40EA0100 	    orr T0,T1 
 394 0a70 4FEA0041 	    lsl T1,T0,#16
 395 0a74 40EA0100 	    orr T0,T1 
 396 0a78 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0a7c 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0a7e 5050     	1:	str T0,[T2,T1]
 399 0a80 0439     	    subs T1,#4
 400 0a82 FCD1     	    bne 1b
 401 0a84 1060     	    str T0,[T2]
 402 0a86 80EA0000 	    eor T0,T0 
 403 0a8a C4F89000 	    str T0,[UP,#ROW]
 404 0a8e C4F89400 	    str T0,[UP,#COL]
 405 0a92 00F0F1BF 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0a96 4E0A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0aa4 504700BF 	  _NEST
 412 0aa8 F71B0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0ab0 291D0000 	  _ADR DUPP  
 414 0ab4 D11C0000 	  _ADR TOR 
 415 0ab8 0D1E0000 	  _ADR STAR
 416 0abc 99090000 	  _ADR VIDBUFF
 417 0ac0 ED1D0000 	  _ADR PLUS
 418 0ac4 A91C0000 	  _ADR RFROM   
 419 0ac8 F71B0000 	  _DOLIT 0 
 419      00000000 
 420 0ad0 6D250000 	  _ADR FILL 
 421 0ad4 7F1A0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0ad8 9A0A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0ae8 504700BF 	    _NEST 
 429 0aec 99090000 	    _ADR VIDBUFF 
 430 0af0 291D0000 	    _ADR DUPP 
 431 0af4 F71B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0afc 291D0000 	    _ADR DUPP 
 433 0b00 D11C0000 	    _ADR TOR 
 434 0b04 ED1D0000 	    _ADR PLUS 
ARM GAS  forth.s 			page 37


 435 0b08 391D0000 	    _ADR SWAP 
 436 0b0c F71B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0b14 A91C0000 	    _ADR RFROM  
 438 0b18 FD1D0000 	    _ADR SUBB 
 439 0b1c 25250000 	    _ADR MOVE
 440 0b20 F71B0000 	    _DOLIT 24 
 440      18000000 
 441 0b28 A50A0000 	    _ADR CLRLINE 
 442 0b2c 7F1A0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0b30 DC0A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0b40 504700BF 	    _NEST 
 450 0b44 99090000 	    _ADR VIDBUFF
 451 0b48 291D0000 	    _ADR DUPP 
 452 0b4c F71B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0b54 ED1D0000 	    _ADR PLUS 
 454 0b58 F71B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0b60 F71B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0b68 FD1D0000 	    _ADR SUBB  
 457 0b6c 25250000 	    _ADR MOVE
 458 0b70 F71B0000 	    _DOLIT 0 
 458      00000000 
 459 0b78 A50A0000 	    _ADR CLRLINE
 460 0b7c 7F1A0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0b80 340B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0b8c E34D     	    ldr WP,=SCROLLUP 
 469 0b8e 45F00105 	    orr WP,#1
 470 0b92 80EA0000 	    eor T0,T0 
 471 0b96 C4F89400 	    str T0,[UP,#COL]
 472 0b9a D4F89000 	    ldr T0,[UP,#ROW]
 473 0b9e 1828     	    cmp T0,#24 
 474 0ba0 A2D0     	    beq SCROLLUP  
 475 0ba2 00F10100 	    add T0,#1 
 476 0ba6 C4F89000 	    str T0,[UP,#ROW]
 477 0baa 00F065BF 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
ARM GAS  forth.s 			page 38


 481              	// move cursor 1 char. right 
 482 0bae 840B0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0bb8 D4F89400 	  ldr T0,[UP,#COL]
 484 0bbc 00F10100 	  add T0,#1
 485 0bc0 3528     	  cmp T0,#53
 486 0bc2 E3D5     	  bpl TV_CRLF  
 487 0bc4 C4F89400 	  str T0,[UP,#COL]
 488 0bc8 00F056BF 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0bcc B20B0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0bd8 D4F89400 	    ldr T0,[UP,#COL]
 497 0bdc 28B1     	    cbz T0,1f 
 498 0bde A0F10100 	    sub T0,#1 
 499 0be2 C4F89400 	    str T0,[UP,#COL]
 500 0be6 00F047BF 	    _NEXT 
 501 0bea D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0bee 38B1     	    cbz T0,9f
 503 0bf0 A0F10100 	    sub T0,#1
 504 0bf4 C4F89000 	    str T0,[UP,#ROW]
 505 0bf8 4FF03400 	    mov T0,#52 
 506 0bfc C4F89400 	    str T0,[UP,#COL]
 507 0c00 00F03ABF 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0c04 4FF08000 	    mov T0,#128 
 513 0c08 06EA0006 	    and TOS,T0 
 514 0c0c 4FEAD616 	    lsr TOS,#7
 515 0c10 00F032BF 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0c14 3868     	  ldr T0,[DSP]
 520 0c16 00F10100 	  add T0,#1 
 521 0c1a 3860     	  str T0,[DSP]
 522 0c1c 00F02CBF 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0c20 4FEA4606 	    lsl TOS,#1
 527 0c24 00F028BF 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
ARM GAS  forth.s 			page 39


 534              	CHAR_ROW:  
 535 0c28 504700BF 	    _NEST 
 536 0c2c F71B0000 	    _DOLIT 5 
 536      05000000 
 537 0c34 D11C0000 	    _ADR TOR 
 538 0c38 D11C0000 	1:  _ADR TOR 
 539 0c3c 611F0000 	    _ADR DDUP 
 540 0c40 BD1C0000 	    _ADR RAT
 541 0c44 050C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0c48 AD090000 	    _ADR PLOT 
 543 0c4c 150C0000 	    _ADR INCR_X 
 544 0c50 A91C0000 	    _ADR RFROM 
 545 0c54 210C0000 	    _ADR NEXT_PIXEL
 546              	    //_DOLIT 1 
 547              	    //_ADR LSHIFT 
 548 0c58 191C0000 	    _DONXT 1b
 548      380C0000 
 549 0c60 4D1F0000 	    _ADR TDROP 
 550 0c64 7F1A0000 	    _UNNEST 
 551              	
 552              	
 553              	CHAR_FONT: // ( c -- c-adr )
 554 0c68 A6F12006 	   sub TOS,#32
 555 0c6c 4FF00800 	   mov T0,#8 
 556 0c70 00FB06F6 	   mul TOS,T0 
 557 0c74 A748     	   ldr T0,=font_6x8
 558 0c76 0644     	   add TOS,T0 
 559 0c78 00F0FEBE 	   _NEXT 
 560              	
 561              	/**********************************
 562              	   TV-EMIT ( c -- )
 563              	   draw character in video buffer
 564              	**********************************/
 565 0c7c D00B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 565      0754562D 
 565      454D4954 
 566 0c88 504700BF 	    _NEST
 567 0c8c 291D0000 	    _ADR DUPP 
 568 0c90 F71B0000 	    _DOLIT 32 
 568      20000000 
 569 0c98 F51F0000 	    _ADR ULESS
 570 0c9c 371C0000 	    _QBRAN 1f
 570      AC0C0000 
 571 0ca4 4B1C0000 	    _BRAN CTRL_KEY
 571      100D0000 
 572 0cac 690C0000 	1:  _ADR CHAR_FONT 
 573 0cb0 25090000 	    _ADR CURSOR_COL 
 574 0cb4 7D1C0000 	    _ADR AT
 575 0cb8 69090000 	    _ADR COLX  // x coord 
 576 0cbc 39090000 	    _ADR CURSOR_ROW 
 577 0cc0 7D1C0000 	    _ADR AT    
 578 0cc4 51090000 	    _ADR ROWY  // {c-adr x y -- } 
 579 0cc8 111F0000 	    _ADR ROT  // TEST 
 580 0ccc F71B0000 	    _DOLIT 7   
 580      07000000 
 581 0cd4 D11C0000 	    _ADR TOR  
 582 0cd8 D11C0000 	1:  _ADR TOR  // { x y }
ARM GAS  forth.s 			page 40


 583 0cdc 611F0000 	    _ADR DDUP  // { x y x y }
 584 0ce0 BD1C0000 	    _ADR RAT 
 585 0ce4 9D1C0000 	    _ADR CAT   // { x y x y r }
 586 0ce8 290C0000 	    _ADR CHAR_ROW 
 587 0cec 491E0000 	    _ADR ONEP // {x y' }
 588 0cf0 A91C0000 	    _ADR RFROM 
 589 0cf4 491E0000 	    _ADR ONEP // {x y' c-adr' }
 590 0cf8 191C0000 	    _DONXT 1b
 590      D80C0000 
 591 0d00 4D1F0000 	    _ADR TDROP  
 592 0d04 B90B0000 	    _ADR RIGHT
 593 0d08 F90D0000 	9:  _ADR SHOW_CURSOR 
 594 0d0c 7F1A0000 	    _UNNEST  
 595              	CTRL_KEY:
 596 0d10 810E0000 	    _ADR HIDE_CURSOR
 597 0d14 291D0000 	    _ADR DUPP 
 598 0d18 F71B0000 	    _DOLIT BKSPP  
 598      08000000 
 599 0d20 DD1F0000 	    _ADR EQUAL 
 600 0d24 371C0000 	    _QBRAN 1f 
 600      3C0D0000 
 601 0d2c D90D0000 	    _ADR BACK_SPACE 
 602 0d30 191D0000 	8:  _ADR DROP 
 603 0d34 4B1C0000 	    _BRAN 9b 
 603      080D0000 
 604 0d3c 291D0000 	1:  _ADR DUPP 
 605 0d40 F71B0000 	    _DOLIT CRR 
 605      0D000000 
 606 0d48 DD1F0000 	    _ADR EQUAL 
 607 0d4c 371C0000 	    _QBRAN 1f 
 607      600D0000 
 608 0d54 810D0000 	    _ADR CAR_RET
 609 0d58 4B1C0000 	    _BRAN 8b
 609      300D0000 
 610 0d60 F71B0000 	1:  _DOLIT LF 
 610      0A000000 
 611 0d68 DD1F0000 	    _ADR EQUAL 
 612 0d6c 371C0000 	    _QBRAN 9b 
 612      080D0000 
 613 0d74 990D0000 	    _ADR LN_FEED
 614 0d78 4B1C0000 	    _BRAN 9b  
 614      080D0000 
 615              	
 616              	/*******************************
 617              	  CAR_RET 
 618              	  carriage return
 619              	*******************************/
 620              	CAR_RET:
 621 0d80 504700BF 	   _NEST
 622 0d84 F71B0000 	   _DOLIT 0 
 622      00000000 
 623 0d8c 25090000 	   _ADR CURSOR_COL 
 624 0d90 691C0000 	   _ADR STORE 
 625 0d94 7F1A0000 	   _UNNEST   
 626              	
 627              	/*************************
 628              	  LN_FEED 
ARM GAS  forth.s 			page 41


 629              	  send cursor to next line 
 630              	**************************/
 631              	LN_FEED:
 632 0d98 504700BF 	    _NEST 
 633 0d9c 39090000 	    _ADR CURSOR_ROW 
 634 0da0 7D1C0000 	    _ADR AT 
 635 0da4 291D0000 	    _ADR DUPP 
 636 0da8 F71B0000 	    _DOLIT 24 
 636      18000000 
 637 0db0 951D0000 	    _ADR XORR 
 638 0db4 371C0000 	    _QBRAN 1f
 638      CC0D0000 
 639 0dbc 491E0000 	    _ADR ONEP 
 640 0dc0 39090000 	    _ADR CURSOR_ROW 
 641 0dc4 691C0000 	    _ADR STORE 
 642 0dc8 7F1A0000 	    _UNNEST    
 643 0dcc 191D0000 	1:  _ADR DROP 
 644 0dd0 E90A0000 	    _ADR SCROLLUP 
 645 0dd4 7F1A0000 	    _UNNEST  
 646              	
 647              	
 648              	/*****************************
 649              	  BACK_SPACE  
 650              	  move cursor left 1 character
 651              	*****************************/
 652              	BACK_SPACE: 
 653 0dd8 504700BF 	  _NEST 
 654 0ddc D90B0000 	  _ADR LEFT 
 655 0de0 F90D0000 	  _ADR SHOW_CURSOR
 656 0de4 7F1A0000 	9: _UNNEST    
 657              	
 658              	
 659              	/*******************************
 660              	  SHOW_CURSOR ( -- )
 661              	********************************/
 662 0de8 800C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 662      0B53484F 
 662      572D4355 
 662      52534F52 
 663              	//SHOW_CURSOR:
 664 0df8 504700BF 	    _NEST 
 665 0dfc F71B0000 	    _DOLIT 0xFF
 665      FF000000 
 666 0e04 39090000 	0:  _ADR CURSOR_ROW
 667 0e08 7D1C0000 	    _ADR AT  
 668 0e0c 491E0000 	    _ADR ONEP 
 669 0e10 51090000 	    _ADR ROWY 
 670 0e14 F71B0000 	    _DOLIT BPR
 670      A0000000 
 671 0e1c 0D1E0000 	    _ADR STAR
 672 0e20 F71B0000 	    _DOLIT BPR  
 672      A0000000 
 673 0e28 FD1D0000 	    _ADR SUBB 
 674 0e2c 25090000 	    _ADR CURSOR_COL
 675 0e30 7D1C0000 	    _ADR AT 
 676 0e34 69090000 	    _ADR COLX 
 677 0e38 ED1E0000 	    _ADR TWOSL  
ARM GAS  forth.s 			page 42


 678 0e3c ED1D0000 	    _ADR PLUS
 679 0e40 99090000 	    _ADR VIDBUFF
 680 0e44 ED1D0000 	    _ADR PLUS
 681 0e48 F71B0000 	    _DOLIT 2
 681      02000000 
 682 0e50 D11C0000 	    _ADR TOR  
 683 0e54 611F0000 	1:  _ADR DDUP 
 684 0e58 891C0000 	    _ADR CSTOR 
 685 0e5c 491E0000 	    _ADR ONEP 
 686 0e60 191C0000 	    _DONXT 1b
 686      540E0000 
 687 0e68 391F0000 	2:  _ADR DDROP // drop 3 elements 
 688 0e6c 7F1A0000 	    _UNNEST  
 689              	
 690              	/*************************
 691              	    HIDE_CURSOR 
 692              	*************************/
 693 0e70 EC0D0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 693      0B484944 
 693      452D4355 
 693      52534F52 
 694              	//HIDE_CURSOR:
 695 0e80 504700BF 	    _NEST 
 696 0e84 F1080000 	    _ADR BACKCOLOR 
 697 0e88 7D1C0000 	    _ADR AT 
 698 0e8c 291D0000 	    _ADR DUPP  
 699 0e90 F71B0000 	    _DOLIT 4 
 699      04000000 
 700 0e98 DD1D0000 	    _ADR LSHIFT 
 701 0e9c 811D0000 	    _ADR ORR 
 702 0ea0 4B1C0000 	    _BRAN 0b
 702      040E0000 
 703              	
 704              	// TV-AT ( line col -- )
 705              	// set text cursor position 
 706 0ea8 740E0000 	    _HEADER TV_AT,5,"TV-AT"
 706      0554562D 
 706      415400BF 
 707 0eb4 352E     	    cmp TOS,#53
 708 0eb6 01D4     	    bmi 1f 
 709 0eb8 4FF03406 	    mov TOS,#52
 710 0ebc C4F89460 	1:  str TOS,[UP,#COL]
 711 0ec0 57F8046B 	    _POP
 712 0ec4 192E     	    cmp TOS,#25
 713 0ec6 01D4     	    bmi 1f 
 714 0ec8 4FF01806 	    mov TOS,#24 
 715 0ecc C4F89060 	1:  str TOS,[UP,#ROW]
 716 0ed0 57F8046B 	    _POP 
 717 0ed4 00F0D0BD 	    _NEXT 
 718              	
 719              	// INPUT ( -- c-adr )
 720              	// input a string in pad 
 721 0ed8 AC0E0000 	    _HEADER INPUT,5,"INPUT"
 721      05494E50 
 721      555400BF 
 722 0ee4 504700BF 	    _NEST 
 723 0ee8 9D240000 	    _ADR PAD 
ARM GAS  forth.s 			page 43


 724 0eec 291D0000 	    _ADR DUPP 
 725 0ef0 491E0000 	    _ADR ONEP 
 726 0ef4 F71B0000 	    _DOLIT 53
 726      35000000 
 727 0efc E52F0000 	    _ADR ACCEP
 728 0f00 391D0000 	    _ADR SWAP 
 729 0f04 191D0000 	    _ADR DROP 
 730 0f08 4D1D0000 	    _ADR OVER 
 731 0f0c 891C0000 	    _ADR CSTOR  
 732 0f10 7F1A0000 	    _UNNEST 
 733              	
 734              	
 735              		.section .rodata 
 736              		.p2align 2
 737              	/********************************************
 738              	    TV font  ASCII 6 pixels x 8 pixels 
 739              	********************************************/
 740              	font_6x8:
 741 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 741      00000000 
 742 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 742      20002000 
 743 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 743      00000000 
 744 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 744      F8505000 
 745 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 745      28F02000 
 746 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 746      40981800 
 747 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 747      A8906800 
 748 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 748      00000000 
 749 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 749      40201000 
 750 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 750      10204000 
 751 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 751      A8200000 
 752 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 752      20200000 
 753 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 753      60204000 
 754 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 754      00000000 
 755 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 755      00606000 
 756 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 756      40800000 
 757 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 757      C8887000 
 758 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 758      2020F800 
 759 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 759      4080F800 
 760 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
ARM GAS  forth.s 			page 44


 760      0808F000 
 761 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 761      F8101000 
 762 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 762      0808F000 
 763 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 763      88887000 
 764 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 764      40404000 
 765 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 765      88887000 
 766 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 766      08087000 
 767 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 767      60600000 
 768 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 768      60204000 
 769 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 769      40201000 
 770 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 770      F8000000 
 771 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 771      10204000 
 772 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 772      20002000 
 773 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 773      A8A87000 
 774 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 774      88888800 
 775 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 775      8888F000 
 776 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 776      80807800 
 777 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 777      8888F000 
 778 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 778      8080F800 
 779 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 779      80808000 
 780 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 780      88887000 
 781 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 781      88888800 
 782 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 782      20207000 
 783 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 783      08906000 
 784 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 784      A0908800 
 785 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 785      8080F800 
 786 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 786      88888800 
 787 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 787      98888800 
 788 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 788      88887000 
ARM GAS  forth.s 			page 45


 789 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 789      80808000 
 790 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 790      A8987800 
 791 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 791      A0908800 
 792 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 792      0808F000 
 793 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 793      20202000 
 794 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 794      88887000 
 795 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 795      88502000 
 796 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 796      A8D88800 
 797 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 797      50888800 
 798 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 798      20202000 
 799 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 799      8080F800 
 800 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 800      40406000 
 801 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 801      10080000 
 802 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 802      08081800 
 803 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 803      00000000 
 804 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 804      0000F800 
 805 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 805      00000000 
 806 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 806      78887800 
 807 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 807      C888F000 
 808 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 808      80887000 
 809 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 809      98887800 
 810 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 810      F8807000 
 811 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 811      40404000 
 812 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 812      88780870 
 813 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 813      88888800 
 814 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 814      20202000 
 815 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 815      10906000 
 816 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 816      C0A09000 
 817 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
ARM GAS  forth.s 			page 46


 817      20207000 
 818 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 818      A8888800 
 819 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 819      88888800 
 820 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 820      88887000 
 821 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 821      88F08080 
 822 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 822      90B05018 
 823 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 823      80808000 
 824 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 824      7008F000 
 825 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 825      40483000 
 826 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 826      88986800 
 827 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 827      88502000 
 828 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 828      A8A85000 
 829 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 829      20508800 
 830 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 830      88780870 
 831 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 831      2040F800 
 832 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 832      40402000 
 833 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 833      20202000 
 834 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 834      20204000 
 835 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 835      10000000 
 836 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 836      FCFCFCFC 
 837 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 837      10204000 
 838 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 838      40201000 
 839 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 839      20200000 
 840 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 840      A8702000 
 841 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 841      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
ARM GAS  forth.s 			page 47


   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
ARM GAS  forth.s 			page 48


  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
ARM GAS  forth.s 			page 49


  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
ARM GAS  forth.s 			page 50


 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f20 1C61     	   .byte 0x1c,'a' 
   9 0f22 3262     	   .byte 0x32,'b'
  10 0f24 2163     	   .byte 0x21,'c'
  11 0f26 2364     	   .byte 0x23,'d'
  12 0f28 2465     	   .byte 0x24,'e'
  13 0f2a 2B66     	   .byte 0x2b,'f'
  14 0f2c 3467     	   .byte 0x34,'g'
  15 0f2e 3368     	   .byte 0x33,'h'
  16 0f30 4369     	   .byte 0x43,'i'
  17 0f32 3B6A     	   .byte 0x3B,'j'
  18 0f34 426B     	   .byte 0x42,'k'
  19 0f36 4B6C     	   .byte 0x4b,'l'
  20 0f38 3A6D     	   .byte 0x3a,'m'
  21 0f3a 316E     	   .byte 0x31,'n'
  22 0f3c 446F     	   .byte 0x44,'o'
  23 0f3e 4D70     	   .byte 0x4d,'p'
  24 0f40 1571     	   .byte 0x15,'q'
  25 0f42 2D72     	   .byte 0x2d,'r'
  26 0f44 1B73     	   .byte 0x1b,'s'
  27 0f46 2C74     	   .byte 0x2c,'t'
  28 0f48 3C75     	   .byte 0x3c,'u'
  29 0f4a 2A76     	   .byte 0x2a,'v'
  30 0f4c 1D77     	   .byte 0x1d,'w'
  31 0f4e 2278     	   .byte 0x22,'x'
  32 0f50 3579     	   .byte 0x35,'y'
  33 0f52 1A7A     	   .byte 0x1a,'z'
  34 0f54 4530     	   .byte 0x45,'0'
  35 0f56 1631     	   .byte 0x16,'1'
  36 0f58 1E32     	   .byte 0x1e,'2'
  37 0f5a 2633     	   .byte 0x26,'3'
  38 0f5c 2534     	   .byte 0x25,'4'
  39 0f5e 2E35     	   .byte 0x2e,'5'
  40 0f60 3636     	   .byte 0x36,'6'
  41 0f62 3D37     	   .byte 0x3d,'7'
  42 0f64 3E38     	   .byte 0x3e,'8'
  43 0f66 4639     	   .byte 0x46,'9'
  44 0f68 0E60     	   .byte 0x0e,'`'
  45 0f6a 4E2D     	   .byte 0x4e,'-'
  46 0f6c 553D     	   .byte 0x55,'='
  47 0f6e 5D5C     	   .byte 0x5d,'\\'
ARM GAS  forth.s 			page 51


  48 0f70 545B     	   .byte 0x54,'['
  49 0f72 5B5D     	   .byte 0x5b,']'
  50 0f74 4C3B     	   .byte 0x4c,';'
  51 0f76 5227     	   .byte 0x52,'\''
  52 0f78 412C     	   .byte 0x41,','
  53 0f7a 492E     	   .byte 0x49,'.'
  54 0f7c 7C2A     	   .byte 0x7c,'*'
  55 0f7e 792B     	   .byte 0x79,'+'
  56 0f80 2920     	   .byte 0x29,' '
  57 0f82 5A0D     	   .byte SC_ENTER,CRR 
  58 0f84 6608     	   .byte SC_BKSP,BKSPP 
  59 0f86 0D09     	   .byte SC_TAB,9
  60 0f88 761B     	   .byte SC_ESC,27
  61 0f8a 119E     	   .byte SC_LALT,VK_LALT 
  62 0f8c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0f8e 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f90 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f92 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f94 5800     	   .byte SC_CAPS,0
  67 0f96 0580     	   .byte SC_F1,VK_F1
  68 0f98 0681     	   .byte SC_F2,VK_F2
  69 0f9a 0482     	   .byte SC_F3,VK_F3
  70 0f9c 0C83     	   .byte SC_F4,VK_F4
  71 0f9e 0384     	   .byte SC_F5,VK_F5
  72 0fa0 0B85     	   .byte SC_F6,VK_F6
  73 0fa2 8386     	   .byte SC_F7,VK_F7
  74 0fa4 0A87     	   .byte SC_F8,VK_F8
  75 0fa6 0188     	   .byte SC_F9,VK_F9
  76 0fa8 098A     	   .byte SC_F10,VK_F10
  77 0faa 788B     	   .byte SC_F11,VK_F11
  78 0fac 078C     	   .byte SC_F12,VK_F12
  79 0fae 7030     	   .byte SC_KP0,'0'
  80 0fb0 6931     	   .byte SC_KP1,'1'
  81 0fb2 7232     	   .byte SC_KP2,'2'
  82 0fb4 7A33     	   .byte SC_KP3,'3'
  83 0fb6 6B34     	   .byte SC_KP4,'4'
  84 0fb8 7335     	   .byte SC_KP5,'5'
  85 0fba 7436     	   .byte SC_KP6,'6'
  86 0fbc 6C37     	   .byte SC_KP7,'7'
  87 0fbe 7538     	   .byte SC_KP8,'8'
  88 0fc0 7D39     	   .byte SC_KP9,'9'
  89 0fc2 7C2A     	   .byte SC_KPMUL,'*'
  90 0fc4 4A2F     	   .byte SC_KPDIV,'/'
  91 0fc6 792B     	   .byte SC_KPPLUS,'+'
  92 0fc8 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fca 712E     	   .byte SC_KPDOT,'.'
  94 0fcc 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fce FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fd0 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fd2 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fd4 6141     	   .byte 'a','A'
 102 0fd6 6242     	   .byte 'b','B'
 103 0fd8 6343     	   .byte 'c','C'
 104 0fda 6444     	   .byte 'd','D'
ARM GAS  forth.s 			page 52


 105 0fdc 6545     	   .byte 'e','E'
 106 0fde 6646     	   .byte 'f','F'
 107 0fe0 6747     	   .byte 'g','G'
 108 0fe2 6848     	   .byte 'h','H'
 109 0fe4 6949     	   .byte 'i','I'
 110 0fe6 6A4A     	   .byte 'j','J'
 111 0fe8 6B4B     	   .byte 'k','K'
 112 0fea 6C4C     	   .byte 'l','L'
 113 0fec 6D4D     	   .byte 'm','M'
 114 0fee 6E4E     	   .byte 'n','N'
 115 0ff0 6F4F     	   .byte 'o','O'
 116 0ff2 7050     	   .byte 'p','P'
 117 0ff4 7151     	   .byte 'q','Q'
 118 0ff6 7252     	   .byte 'r','R'
 119 0ff8 7353     	   .byte 's','S'
 120 0ffa 7454     	   .byte 't','T'
 121 0ffc 7555     	   .byte 'u','U'
 122 0ffe 7656     	   .byte 'v','V'
 123 1000 7757     	   .byte 'w','W'
 124 1002 7858     	   .byte 'x','X'
 125 1004 7959     	   .byte 'y','Y'
 126 1006 7A5A     	   .byte 'z','Z'
 127 1008 3121     	   .byte '1','!'
 128 100a 3240     	   .byte '2','@'
 129 100c 3323     	   .byte '3','#'
 130 100e 3424     	   .byte '4','$'
 131 1010 3525     	   .byte '5','%'
 132 1012 365E     	   .byte '6','^'
 133 1014 3726     	   .byte '7','&'
 134 1016 382A     	   .byte '8','*'
 135 1018 3928     	   .byte '9','('
 136 101a 3029     	   .byte '0',')'
 137 101c 2D5F     	   .byte '-','_'
 138 101e 3D2B     	   .byte '=','+'
 139 1020 607E     	   .byte '`','~'
 140 1022 2722     	   .byte '\'','"'
 141 1024 2C3C     	   .byte ',','<'
 142 1026 2E3E     	   .byte '.','>'
 143 1028 2F3F     	   .byte '/','?'
 144 102a 5C7C     	   .byte '\\','|'
 145 102c 3B3A     	   .byte ';',':'
 146 102e 5B7B     	   .byte '[','{'
 147 1030 5D7D     	   .byte ']','}'
 148 1032 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1034 315C     	   .byte '1','\\'
 153 1036 3240     	   .byte '2','@'
 154 1038 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 103a 363F     	   .byte '6','?'
 158 103c 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 103e 397B     	   .byte '9','{'
 161 1040 307D     	   .byte '0','}'
ARM GAS  forth.s 			page 53


 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 1042 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 1044 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 1046 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1048 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 104a 11A3     	    .byte SC_RALT,VK_RALT
 172 104c 2F97     	    .byte SC_APPS,VK_APPS
 173 104e 758D     	    .byte SC_UP,VK_UP
 174 1050 728E     	    .byte SC_DOWN,VK_DOWN
 175 1052 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 1054 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 1056 7095     	    .byte SC_INSERT,VK_INSERT
 178 1058 6C91     	    .byte SC_HOME,VK_HOME
 179 105a 7D93     	    .byte SC_PGUP,VK_PGUP
 180 105c 7A94     	    .byte SC_PGDN,VK_PGDN
 181 105e 717F     	    .byte SC_DEL,VK_DELETE
 182 1060 6992     	    .byte SC_END,VK_END
 183 1062 4A2F     	    .byte SC_KPDIV,'/'
 184 1064 5A0D     	    .byte SC_KPENTER,'\r'
 185 1066 1200     	    .byte 0x12,0
 186 1068 7C00     	    .byte 0x7c,0
 187 106a 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 106c 6303     	   .byte 'c', VK_CTRL_C 
 193 106e 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1070 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1072 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1074 11A3     	   .byte SC_RALT,VK_RALT
 197 1076 2F97     	   .byte SC_APPS,VK_APPS
 198 1078 7095     	   .byte SC_INSERT,VK_INSERT
 199 107a 6C91     	   .byte SC_HOME,VK_HOME
 200 107c 7D93     	   .byte SC_PGUP,VK_PGUP
 201 107e 717F     	   .byte SC_DEL,VK_DELETE
 202 1080 6992     	   .byte SC_END,VK_END
 203 1082 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1084 758D     	   .byte SC_UP,VK_UP
 205 1086 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1088 728E     	   .byte SC_DOWN,VK_DOWN
 207 108a 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 108c 4A2F     	   .byte SC_KPDIV,'/'
 209 108e 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1090 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 1092 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1094 119E     	   .byte SC_LALT,VK_LALT
 213 1096 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1098 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 109a 761B     	   .byte SC_ESC,VK_ESC
 216 109c 779A     	   .byte SC_NUM,VK_NLOCK
 217 109e 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10a0 0000     	   .byte 0,0
ARM GAS  forth.s 			page 54


 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 10a2 00BF     	    _GBL_FUNC kbd_isr 
  79 10a4 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 10ac 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 10b0 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 10b2 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 10ba D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 10be 10F0020F 	    tst r0,#KBD_TX 
  85 10c2 40F08480 	    bne send_bit  
  86 10c6 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 10c8 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 10cc 01F10102 	    add r2,r1,#1
  89 10d0 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 10d4 0029     	    cmp r1,#0
ARM GAS  forth.s 			page 55


  91 10d6 15D0     	    beq start_bit 
  92 10d8 0929     	    cmp r1,#9 
  93 10da 25D0     	    beq parity_bit 
  94 10dc 0A29     	    cmp r1,#10 
  95 10de 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 10e0 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 10e4 4FEA5202 	    lsr r2,#1 
  99 10e8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 10ec 07D0     	    beq 1f 
 101 10ee 42F08002 	    orr r2,#(1<<7)
 102 10f2 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 10f6 00F10100 	    add r0,#1 
 104 10fa 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 10fe 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1102 63E0     	    b 9f         
 107              	start_bit:
 108 1104 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1108 60D1     	    bne 9f // not a start bit 
 110 110a 80EA0000 	    eor r0,r0 
 111 110e 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 1112 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 1116 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 111a 6FF00101 	    mvn r1,#1
 115 111e 00EA0100 	    and r0,r1 // clear error flag 
 116 1122 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 1126 51E0     	    b 9f 
 118              	parity_bit:
 119 1128 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 112c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1130 4CD0     	    beq 9f  
 122 1132 01F10101 	    add r1,#1 
 123 1136 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 113a 47E0     	    b 9f      
 125              	stop_bit:
 126 113c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1140 40D0     	    beq 8f // error stop bit expected 
 128 1142 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 1146 11F0010F 	    tst r1,#1 
 130 114a 3BD0     	    beq 8f // error parity
 131 114c 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 1150 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 1154 E028     	    cmp r0,#XT_KEY
 134 1156 04D1     	    bne 1f
 135 1158 41F04001 	    orr r1,#KBD_F_XT
 136 115c 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1160 30E0     	    b 8f  
 138 1162 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1166 14D0     	    beq store_code
 140 1168 5828     	    cmp r0,#SC_CAPS
 141 116a 04D1     	    bne 1f
 142 116c 81F00401 	    eor r1,#KBD_F_CAPS
 143 1170 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1174 06E0     	    b 2f 
 145 1176 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
ARM GAS  forth.s 			page 56


 146 1180 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1184 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1188 01EA0201 	    and r1,r2
 149 118c 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 1190 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 1192 F028     	    cmp r0,#KEY_REL
 154 1194 04D1     	    bne 1f
 155              	// set release flags 
 156 1196 41F08001 	    orr r1,#KBD_F_REL 
 157 119a 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 119e 11E0     	    b 8f     
 159 11a0 0146     	1:  mov r1,r0 
 160 11a2 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 11ac 0AD1     	    bne 8f // was async key 
 162 11ae D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 11b2 04F17802 	    add r2,UP,#KBD_QUEUE
 164 11b6 1154     	    strb r1,[r2,r0]
 165 11b8 00F10100 	    add r0,#1
 166 11bc 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 11c0 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 11c4 80EA0000 	8:  eor r0,r0 
 169 11c8 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 11cc 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 11ce 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 11d2 01F10100 	    add r0,r1,#1
 182 11d6 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 11da 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 11de 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 11e2 0829     	1:  cmp r1,#8 
 187 11e4 15D0     	    beq send_parity 
 188 11e6 0929     	    cmp r1,#9 
 189 11e8 1CD0     	    beq send_stop
 190 11ea 0A29     	    cmp r1,#10
 191 11ec 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 11ee 10F0010F 	    tst r0,#1
 194 11f2 4FEA5000 	    lsr r0,#1
 195 11f6 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 11fa 02D1     	    bne 1f 
 197 11fc 4FEA0242 	    lsl r2,#16
 198 1200 05E0     	    b 2f  
 199 1202 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1206 00F10100 	    add r0,#1 
ARM GAS  forth.s 			page 57


 201 120a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 120e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1210 1CE0     	    b 9f 
 204              	send_parity:
 205 1212 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 1216 10F0010F 	    tst r0,#1
 207 121a 01D0     	    beq 1f 
 208 121c 4FEA0242 	    lsl r2,#16
 209 1220 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1222 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1224 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1226 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 122a 1960     	    str r1,[r3,#GPIO_MODER]
 217 122c 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 122e 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1232 6FF00201 	    mvn r1,#KBD_TX 
 221 1236 00EA0100 	    and r0,r1 
 222 123a 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 123c 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1240 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 1244 80EA0000 	    eor r0,r0 
 226 1248 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 124c 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 124e 02B4     	    push {r1}
 238 1250 DFF85814 	    ldr r1,=async_keys
 239 1254 00B500F0 	    _CALL table_scan
 239      9EF85DF8 
 239      04EB
 240 125e 02BC     	    pop {r1}
 241 1260 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 1262 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
ARM GAS  forth.s 			page 58


 254      04EB
 255 126c FF28     	    cmp r0,#255
 256 126e 01D1     	    bne set_async_key 
 257 1270 0020     	    movs r0,#0 
 258 1272 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1274 06B4     	    push {r1,r2}
 262 1276 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 127a DFF83414 	    ldr r1,=async_jump 
 264 127e D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1282 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1286 04E0     	    b set_reset
 268              	ctrl_key:
 269 1288 4FF01000 	    mov r0,#KBD_F_CTRL
 270 128c 01E0     	    b set_reset 
 271              	alt_key:
 272 128e 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 1292 12F0800F 	    tst r2,#KBD_F_REL 
 275 1296 04D0     	    beq 1f 
 276 1298 6FEA0000 	    mvn r0,r0
 277 129c 02EA0002 	    and r2,r0
 278 12a0 01E0     	    b 2f
 279 12a2 42EA0002 	1:  orr r2,r0 
 280 12a6 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 12aa 5FF0FF30 	    movs r0,#-1
 282 12ae 06BC     	9:  pop {r1,r2}
 283 12b0 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 12b2 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 12b4 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 12b6 1401     	    .byte SC_LCTRL,1  // left control 
 290 12b8 1401     	    .byte SC_RCTRL,1  // right control 
 291 12ba 1102     	    .byte SC_LALT,2  // left alt 
 292 12bc 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 12be 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 12c0 00       	    .byte 0 // shift  key 
 297 12c1 03       	    .byte (ctrl_key-shift_key)/2
 298 12c2 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 12c3 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 12c4 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
ARM GAS  forth.s 			page 59


 310 12cc 1846     	    mov r0,r3 
 311 12ce 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 12d2 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 12d6 00B5FFF7 	    _CALL gpio_config
 313      2BF85DF8 
 313      04EB
 314 12e0 1846     	    mov r0,r3 
 315 12e2 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 12e6 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 12ea 00B5FFF7 	    _CALL gpio_config
 317      21F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 12f4 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 12fc 4FF40050 	    mov r0,#(2<<12)
 321 1300 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1302 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 130a 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 130e 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1310 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1312 80EA0000 	   eor r0,r0 
 328 1316 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 131a C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 131e 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1322 4FF00101 	   mov r1,#1 
 333 1326 00B5FEF7 	   _CALL nvic_set_priority
 333      BEFF5DF8 
 333      04EB
 334 1330 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1334 00B5FEF7 	   _CALL nvic_enable_irq 
 335      D0FF5DF8 
 335      04EB
 336 133e 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1340 DC0E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1350 47F8046D 	    _PUSH 
 342 1354 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 1358 06F0FC06 	    and TOS,#0xFC  
 344 135c 8CE3     	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 135e 0EB4     	    push {T1,T2,T3}
 352 1360 80EA0000 	    eor T0,T0  
 353 1364 04F17803 	    add T3,UP,#KBD_QUEUE
ARM GAS  forth.s 			page 60


 354 1368 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 136c D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 1370 9142     	    cmp T1,T2 
 357 1372 06D0     	    beq 2f  
 358 1374 585C     	    ldrb T0,[T3,T1]
 359 1376 01F10101 	    add T1,#1 
 360 137a 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 137e C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 1382 0EBC     	2:  pop {T1,T2,T3}
 363 1384 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1386 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 1390 0000     	    movs T0,T0
 368 1392 F8D0     	    beq wait_code  
 369 1394 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1396 04B4     	    push {T2}
 380 1398 11F8012B 	1:  ldrb T2,[T1],#1
 381 139c 22B1     	    cbz T2,2f 
 382 139e 8242     	    cmp T2,T0
 383 13a0 02D0     	    beq 2f 
 384 13a2 01F10101 	    add T1,#1 
 385 13a6 F7E7     	    b 1b 
 386 13a8 0878     	2:  ldrb T0,[T1]
 387 13aa 0000     	    movs T0,T0 // set/reset zero flag 
 388 13ac 04BC     	9:  pop {T2}
 389 13ae 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 13b0 44130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F0000BF 
 397 13c0 47F8046D 	    _PUSH 
 398 13c4 86EA0606 	    eor TOS,TOS 
 399 13c8 BA49     	    ldr T1,=sc_ascii // translation table
 400 13ca 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 13ce 4FF04002 	    mov T2,#KBD_F_XT 
 402 13d2 1042     	    tst T0,T2
 403 13d4 00D0     	    beq 1f
 404 13d6 B849     	    ldr T1,=extended // extended code translation
 405 13d8 00B5FFF7 	1:  _CALL keycode
ARM GAS  forth.s 			page 61


 405      C0FF5DF8 
 405      04EB
 406 13e2 98B1     	    cbz T0,inkey_exit
 407 13e4 E128     	    cmp T0,#XT2_KEY // pause 
 408 13e6 12D0     	    beq pause_key
 409 13e8 00B5FFF7 	    _CALL table_scan 
 409      D4FF5DF8 
 409      04EB
 410 13f2 0646     	    mov TOS,T0
 411 13f4 00B500F0 	    _CALL do_modifiers
 411      14F85DF8 
 411      04EB
 412 13fe 032E     	    cmp TOS,#VK_CTRL_C 
 413 1400 3EF468AE 	    beq user_reboot 
 414 1404 47F8046D 	    _PUSH 
 415 1408 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 140c 34E3     	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 140e 4FF00701 	    mov T1,#7 
 420 1412 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 141c 0139     	    subs T1,#1
 422 141e F8D1     	    bne 1b 
 423 1420 2AE3     	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1422 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1426 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 142a 06D1     	    bne shift_down 
 431 142c 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1430 06D1     	    bne altchar_down 
 433 1432 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1436 06D1     	    bne ctrl_down 
 435 1438 0DE0     	    b 9f 
 436              	shift_down:
 437 143a 3046     	    mov T0,TOS 
 438 143c 9F49     	    ldr T1,=shifted 
 439 143e 04E0     	    b 8f 
 440              	altchar_down:
 441 1440 3046     	    mov T0,TOS 
 442 1442 9F49     	    ldr T1,=altchar
 443 1444 01E0     	    b 8f
 444              	ctrl_down:
 445 1446 3046     	    mov T0,TOS 
 446 1448 9E49     	    ldr T1,=controls 
 447 144a 00B5FFF7 	8:  _CALL table_scan
 447      A3FF5DF8 
 447      04EB
 448 1454 0646     	    mov TOS,T0
 449 1456 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1460 7047     	    _RET 
ARM GAS  forth.s 			page 62


 451              	
 452              	do_capslock:
 453 1462 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1466 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 146a 0BD0     	    beq 9f 
 456 146c 412E     	    cmp TOS,#'A'
 457 146e 09D4     	    bmi 9f 
 458 1470 5B2E     	    cmp TOS,#'Z'+1 
 459 1472 03D4     	    bmi 3f 
 460 1474 612E     	    cmp TOS,#'a'
 461 1476 05D4     	    bmi 9f 
 462 1478 7B2E     	    cmp TOS,#'z'+1
 463 147a 03D5     	    bpl 9f 
 464 147c 4FF02000 	3:  mov T0,#(1<<5)
 465 1480 86EA0006 	    eor TOS,T0 
 466 1484 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1486 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1488 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 148a 0128     	    cmp r0,ST_PREVID 
 484 148c FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 148e 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1492 00B5FEF7 	    _CALL nvic_disable_irq
 487      36FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 149c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 14a4 1846     	    mov r0,r3 
 491 14a6 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 14aa 4FF01102 	    mov r2,#OUTPUT_OD
 493 14ae 00B5FEF7 	    _CALL gpio_config 
 493      3FFF5DF8 
 493      04EB
 494 14b8 1846     	    mov r0,r3 
 495 14ba 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 14be 82EA0202 	    eor r2,r2 
 497 14c2 00B5FEF7 	    _CALL gpio_out 
 497      8BFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 14cc 4FF4E150 	    mov r0,#150*48
 500 14d0 0138     	1:  subs r0,#1 
ARM GAS  forth.s 			page 63


 501 14d2 FDD1     	    bne 1b
 502 14d4 01BC     	    pop {r0}
 503 14d6 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 14da D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 14de 40F00200 	    orr r0,#KBD_TX 
 506 14e2 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 14e6 80EA0000 	    eor r0,r0 
 508 14ea 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 14ee 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 14f2 1846     	    mov r0,r3 
 513 14f4 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 14f8 4FF01102 	    mov r2,#OUTPUT_OD 
 515 14fc 00B5FEF7 	    _CALL gpio_config 
 515      18FF5DF8 
 515      04EB
 516 1506 1846     	    mov r0,r3 
 517 1508 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 150c 82EA0202 	    eor r2,r2 
 519 1510 00B5FEF7 	    _CALL gpio_out
 519      64FF5DF8 
 519      04EB
 520              	// release clock line 
 521 151a 1846     	    mov r0,r3 
 522 151c 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1520 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1524 00B5FEF7 	    _CALL gpio_config
 524      04FF5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 152e 4FF00A00 	    mov r0,#10
 528 1532 E060     	    str r0,[UP,#CD_TIMER]
 529 1534 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1536 20B1     	    cbz r0, 4f 
 531 1538 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 153c 10F0020F 	    tst r0,#KBD_TX
 533 1540 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1542 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1546 00B5FEF7 	    _CALL nvic_enable_irq
 536      C7FE5DF8 
 536      04EB
 537 1550 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1554 20F00201 	    bic r1,r0,#KBD_TX
 539 1558 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 155c 00F00200 	    and r0,#KBD_TX
 541 1560 48B1     	    cbz r0, 5f
 542 1562 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1564 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1568 1960     	    str r1,[r3,#GPIO_MODER]
 545 156a 80EA0000 	    eor r0,r0 
 546 156e 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1572 6FEA0000 	    mvn r0,r0   
 548 1576 0EBC     	5:  pop {r1,r2,r3}
 549 1578 7047     	    _RET 
ARM GAS  forth.s 			page 64


 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 157a 80EA0000 	    eor T0,T0 
 555 157e C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 1582 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 1586 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 158a 6FF00301 	    mvn T1,#3
 559 158e 00EA0100 	    and T0,T1 
 560 1592 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1596 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1598 B4130000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 15a4 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 15a8 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 15b2 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 15b4 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 15be 00B5FFF7 	    _CALL wait_code 
 572      E1FE5DF8 
 572      04EB
 573 15c8 FE28     	    cmp r0,KBD_CMD_RESEND
 574 15ca EBD0     	    beq 1b 
 575 15cc 4FF4FA70 	    mov T0,#500 
 576 15d0 E060     	    str T0,[UP,#CD_TIMER]
 577 15d2 00B5FFF7 	2:  _CALL keycode
 577      C3FE5DF8 
 577      04EB
 578 15dc 10B9     	    cbnz T0,3f
 579 15de E068     	    ldr T0,[UP,#CD_TIMER]
 580 15e0 0028     	    cmp T0,#0 
 581 15e2 F6D1     	    bne 2b 
 582 15e4 47F8046D 	3:  _PUSH 
 583 15e8 0646     	    mov TOS,T0  
 584 15ea 45E2     	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 15ec 9C150000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 592 15f8 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BEFF5DF8 
 592      04EB
ARM GAS  forth.s 			page 65


 593 1602 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1606 00B5FFF7 	    _CALL kbd_send 
 594      3DFF5DF8 
 594      04EB
 595 1610 00B5FFF7 	2:  _CALL wait_code 
 595      B8FE5DF8 
 595      04EB
 596 161a FE28     	    cmp T0,#KBD_CMD_RESEND
 597 161c ECD0     	    beq 1b
 598 161e FA28     	    cmp T0,#KBD_ACK  
 599 1620 F6D1     	    bne 2b 
 600 1622 3046     	2:  mov T0,TOS 
 601 1624 00F00700 	    and T0,#7 
 602 1628 00B5FFF7 	    _CALL kbd_send 
 602      2CFF5DF8 
 602      04EB
 603 1632 00B5FFF7 	3:  _CALL wait_code 
 603      A7FE5DF8 
 603      04EB
 604 163c FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 163e F0D0     	    beq 2b
 606 1640 FA28     	    cmp T0,#KBD_ACK 
 607 1642 F6D1     	    bne 3b  
 608 1644 57F8046B 	    _POP 
 609 1648 16E2     	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 164a F0150000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      4400
 617 1658 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 165c 10F0010F 	    tst T0,#1
 619 1660 00D1     	    bne 1f 
 620 1662 09E2     	    _NEXT 
 621 1664 47F8046D 	1: _PUSH 
 622 1668 6FF00101 	    mvn T1,#1 
 623 166c 00EA0100 	    and T0,T1 
 624 1670 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 1674 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1678 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105BBE7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1680 4E160000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      590000BF 
 634 1690 504700BF 	    _NEST
ARM GAS  forth.s 			page 66


 635 1694 59160000 	1:  _ADR CAPS_LED  
 636 1698 C1130000 	    _ADR PS2_QKEY 
 637 169c FD1E0000 	    _ADR QDUP 
 638 16a0 371C0000 	    _QBRAN 1b  
 638      94160000 
 639 16a8 7F1A0000 	    _UNNEST 
 640 16ac B2120000 	
 640      C0120000 
 640      200F0000 
 640      44100000 
 640      D40F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16cc 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 16d4 0346     	    mov r3,r0 
  42 16d6 4FF00401 	    mov r1,#PIN_F_SC 
  43 16da 4FF00102 	    mov r2,#OUTPUT_PP
  44 16de 00B5FEF7 	    _CALL gpio_config 
  44      27FE5DF8 
ARM GAS  forth.s 			page 67


  44      04EB
  45 16e8 1846     	    mov r0,r3 
  46 16ea 4FF00401 	    mov r1,#PIN_F_SC  
  47 16ee 4FF00102 	    MOV r2,#1
  48 16f2 00B5FEF7 	    _CALL gpio_out 
  48      73FE5DF8 
  48      04EB
  49 16fc 1846     	    mov r0,r3 
  50 16fe 4FF00501 	    mov r1,#PIN_SCK  
  51 1702 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 1706 00B5FEF7 	    _CALL gpio_config 
  52      13FE5DF8 
  52      04EB
  53 1710 1846     	    mov r0,r3 
  54 1712 4FF00701 	    mov r1,#PIN_MOSI 
  55 1716 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 171a 00B5FEF7 	    _CALL gpio_config 
  56      09FE5DF8 
  56      04EB
  57 1724 1846     	    mov r0,r3
  58 1726 4FF00601 	    mov r1,#PIN_MISO
  59 172a 4FF00202 	    mov r2,#INPUT_AFO  
  60 172e 00B5FEF7 	    _CALL gpio_config
  60      FFFD5DF8 
  60      04EB
  61              	// PA5:7 at max speed 
  62 1738 4CF6AA40 	    mov r0,#0xCCAA
  63 173c 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  64 173e 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  64      C4F20200 
  65 1746 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  66 1748 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  67 174c 4164     	    str r1,[r0,#RCC_APB2ENR]
  68 174e 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  68      C4F20100 
  69 1756 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  70 175a 0180     	    strh r1,[r0,#SPI_CR1]
  71 175c 196A     	    ldr r1,[r3,#GPIO_AFRL]
  72 175e 80EA0000 	    eor r0,r0 
  73 1762 C5F25050 	    movt r0,#0x5550 
  74 1766 40EA0100 	    orr r0,r1 
  75 176a 1862     	    str r0,[r3,#GPIO_AFRL]
  76 176c 7047     	    _RET 
  77              	
  78              	
  79              	/**********************
  80              	    CHIP-SEL ( -- )
  81              	    drive F_SC low 
  82              	*********************/
  83 176e 84160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  83      08434849 
  83      502D5345 
  83      4C00
  84 177c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  84      C4F20200 
  85 1784 4FF00401 	    mov r1,#PIN_F_SC 
  86 1788 4FF00002 	    mov r2,#0 
ARM GAS  forth.s 			page 68


  87 178c 00B5FEF7 	    _CALL gpio_out 
  87      26FE5DF8 
  87      04EB
  88 1796 6FE1     	    _NEXT 
  89              	
  90              	
  91              	/*********************
  92              	    CHIP-DSEL 
  93              	    drive F_SC high 
  94              	*********************/
  95 1798 72170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  95      09434849 
  95      502D4453 
  95      454C00BF 
  96 17a8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  96      C4F20100 
  97 17b0 0189     	1:  ldrh T1,[T0,#SPI_SR]
  98 17b2 11F0800F 	    tst T1,(1<<7) // BSY 
  99 17b6 FBD1     	    bne 1b 
 100 17b8 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 100      C4F20200 
 101 17c0 4FF00401 	    mov r1,#PIN_F_SC 
 102 17c4 4FF00102 	    mov r2,#1 
 103 17c8 00B5FEF7 	    _CALL gpio_out 
 103      08FE5DF8 
 103      04EB
 104 17d2 51E1     	    _NEXT 
 105              	
 106              	
 107              	/****************************
 108              	    RD-BYTE ( -- )
 109              	    read flash byte 
 110              	***************************/
 111 17d4 9C170000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 111      0752442D 
 111      42595445 
 112 17e0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 112      C4F20100 
 113 17e8 0189     	0:  ldrh T1,[T0,#SPI_SR]
 114 17ea 11F0020F 	    tst T1,#(1<<1) //TXE
 115 17ee FBD0     	    beq 0b 
 116 17f0 6FF00001 	    mvn T1,#0 
 117 17f4 0173     	    strb T1,[T0,#SPI_DR]
 118 17f6 0189     	1:  ldrh T1,[T0,#SPI_SR]
 119 17f8 11F0010F 	    tst T1,#(1<<0) // RXNE  
 120 17fc FBD0     	    beq 1b     
 121              	2:  
 122 17fe 47F8046D 	    _PUSH 
 123 1802 067B     	    ldrb TOS,[T0,#SPI_DR]
 124 1804 38E1     	    _NEXT 
 125              	
 126              	
 127              	/*********************************
 128              	    WR-BYTE  ( c -- )
 129              	    write flash byte 
 130              	*************************/
 131 1806 D8170000 	    _HEADER WR_BYTE,7,"WR-BYTE"
ARM GAS  forth.s 			page 69


 131      0757522D 
 131      42595445 
 131      00BF
 132 1814 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 132      C4F20100 
 133 181c 0189     	0:  ldrh T1,[T0,#SPI_SR]
 134 181e 11F0020F 	    tst T1,#(1<<1) //TXE
 135 1822 FBD0     	    beq 0b 
 136 1824 0673     	    strb TOS,[T0,#SPI_DR]
 137 1826 0189     	1:  ldrh T1,[T0,#SPI_SR]
 138 1828 11F0010F 	    tst T1,#(1<<0) // RXNE  
 139 182c FBD0     	    beq 1b 
 140 182e 8189     	    ldrh T1,[T0,#SPI_DR]
 141 1830 57F8046B 	    _POP 
 142 1834 20E1     	    _NEXT 
 143              	
 144              	/*************************
 145              	    WR-DIS ( -- )
 146              	    write disable 
 147              	    reset WEL bit 
 148              	*************************/
 149 1836 0A180000 	    _HEADER WR_DIS,6,"WR-DIS"
 149      0657522D 
 149      44495300 
 149      00BF
 150 1844 504700BF 	    _NEST 
 151 1848 7D170000 	    _ADR CHIP_SEL 
 152 184c F71B0000 	    _DOLIT 4
 152      04000000 
 153 1854 15180000 	    _ADR WR_BYTE
 154 1858 A9170000 	    _ADR CHIP_DSEL
 155 185c 7F1A0000 	    _UNNEST
 156              	
 157              	/*************************
 158              	    WR-ENBL ( -- )
 159              	    set WEL flag in SR0 
 160              	************************/
 161 1860 3A180000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 161      0757522D 
 161      454E424C 
 162 186c 504700BF 	    _NEST 
 163 1870 7D170000 	    _ADR CHIP_SEL 
 164 1874 F71B0000 	    _DOLIT 6 
 164      06000000 
 165 187c 15180000 	    _ADR WR_BYTE 
 166 1880 A9170000 	    _ADR CHIP_DSEL 
 167 1884 7F1A0000 	    _UNNEST 
 168              	
 169              	/********************************
 170              	    RD-SR ( n -- c )
 171              	    read status register  
 172              	********************************/
 173 1888 64180000 	    _HEADER RD_SR,5,"RD-SR"
 173      0552442D 
 173      535200BF 
 174 1894 504700BF 	    _NEST
 175 1898 7D170000 	    _ADR CHIP_SEL  
ARM GAS  forth.s 			page 70


 176 189c F71B0000 	    _DOLIT sr_cmd 
 176      BC180000 
 177 18a4 ED1D0000 	    _ADR PLUS 
 178 18a8 9D1C0000 	    _ADR CAT
 179 18ac 15180000 	    _ADR WR_BYTE
 180 18b0 E1170000 	    _ADR RD_BYTE
 181 18b4 A9170000 	    _ADR CHIP_DSEL  
 182 18b8 7F1A0000 	    _UNNEST 
 183 18bc 053515   	sr_cmd: .byte 5,0x35,0x15      
 184              	
 185              	/*********************************
 186              	    SEND-ADR ( a -- )
 187              	    send 24 bits address 
 188              	*******************************/
 189 18bf 8C180000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 189      0853454E 
 189      442D4144 
 189      52
 190 18cc 504700BF 	    _NEST 
 191 18d0 291D0000 	    _ADR DUPP 
 192 18d4 F71B0000 	    _DOLIT 16
 192      10000000 
 193 18dc C51D0000 	    _ADR RSHIFT 
 194 18e0 15180000 	    _ADR WR_BYTE 
 195 18e4 291D0000 	    _ADR DUPP
 196 18e8 F71B0000 	    _DOLIT 8 
 196      08000000 
 197 18f0 C51D0000 	    _ADR RSHIFT 
 198 18f4 15180000 	    _ADR WR_BYTE 
 199 18f8 15180000 	    _ADR WR_BYTE 
 200 18fc 7F1A0000 	    _UNNEST 
 201              	
 202              	/**********************************
 203              	    WAIT-DONE ( -- )
 204              	    wait write operation completed 
 205              	**********************************/
 206 1900 C3180000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 206      09574149 
 206      542D444F 
 206      4E4500BF 
 207 1910 504700BF 	    _NEST 
 208 1914 F71B0000 	1:  _DOLIT 0 
 208      00000000 
 209 191c 95180000 	    _ADR RD_SR 
 210 1920 F71B0000 	    _DOLIT 3 
 210      03000000 
 211 1928 6D1D0000 	    _ADR ANDD 
 212 192c 371C0000 	    _QBRAN 2f
 212      3C190000 
 213 1934 4B1C0000 	    _BRAN 1b
 213      14190000 
 214 193c 7F1A0000 	2:  _UNNEST 
 215              	
 216              	
 217              	/****************************
 218              	   ERASE-BLK ( a -- )
 219              	   erase 4Ko block  
ARM GAS  forth.s 			page 71


 220              	***************************/
 221 1940 04190000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 221      09455241 
 221      53452D42 
 221      4C4B00BF 
 222 1950 504700BF 	    _NEST 
 223 1954 6D180000 	    _ADR WR_ENBL
 224 1958 7D170000 	    _ADR CHIP_SEL 
 225 195c F71B0000 	    _DOLIT 0x20 
 225      20000000 
 226 1964 15180000 	    _ADR WR_BYTE 
 227 1968 CD180000 	    _ADR SEND_ADR
 228 196c A9170000 	    _ADR CHIP_DSEL 
 229 1970 11190000 	    _ADR WAIT_DONE 
 230 1974 7F1A0000 	    _UNNEST 
 231              	
 232              	/******************************
 233              	    ERASE-CHIP ( -- )
 234              	    erase all data 
 235              	******************************/
 236 1978 44190000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 236      0A455241 
 236      53452D43 
 236      48495000 
 237 1988 504700BF 	    _NEST 
 238 198c 6D180000 	    _ADR WR_ENBL 
 239 1990 7D170000 	    _ADR CHIP_SEL
 240 1994 F71B0000 	    _DOLIT 0x60
 240      60000000 
 241 199c F71B0000 	    _DOLIT 0xC7 
 241      C7000000 
 242 19a4 15180000 	    _ADR WR_BYTE 
 243 19a8 15180000 	    _ADR WR_BYTE 
 244 19ac A9170000 	    _ADR CHIP_DSEL 
 245 19b0 11190000 	    _ADR WAIT_DONE
 246 19b4 7F1A0000 	    _UNNEST 
 247              	
 248              	
 249              	/******************************
 250              	    RD-BLK ( buff n a --  )
 251              	    read n bytes in buff 
 252              	    starting at address a  
 253              	******************************/
 254 19b8 7C190000 	    _HEADER RD_BLK,6,"RD-BLK"
 254      0652442D 
 254      424C4B00 
 255 19c4 504700BF 	    _NEST
 256 19c8 7D170000 	    _ADR CHIP_SEL 
 257 19cc F71B0000 	    _DOLIT 3 
 257      03000000 
 258 19d4 15180000 	    _ADR WR_BYTE 
 259 19d8 CD180000 	    _ADR SEND_ADR
 260 19dc D11C0000 	    _ADR TOR   
 261 19e0 4B1C0000 	    _BRAN 2f
 261      F8190000 
 262 19e8 E1170000 	1:  _ADR RD_BYTE
 263 19ec 4D1D0000 	    _ADR OVER 
ARM GAS  forth.s 			page 72


 264 19f0 891C0000 	    _ADR CSTOR
 265 19f4 491E0000 	    _ADR ONEP 
 266 19f8 191C0000 	2:  _DONXT 1b
 266      E8190000 
 267 1a00 191D0000 	    _ADR DROP 
 268 1a04 A9170000 	    _ADR CHIP_DSEL 
 269 1a08 7F1A0000 	    _UNNEST 
 270              	
 271              	/*****************************
 272              	    WR-BLK ( buff n a -- )
 273              	    write up to 256 bytes 
 274              	    in erased flash
 275              	****************************/
 276 1a0c BC190000 	    _HEADER WR_BLK,6,"WR-BLK"
 276      0657522D 
 276      424C4B00 
 277 1a18 504700BF 	    _NEST 
 278 1a1c 6D180000 	    _ADR WR_ENBL
 279 1a20 7D170000 	    _ADR CHIP_SEL
 280 1a24 F71B0000 	    _DOLIT 2 
 280      02000000 
 281 1a2c 15180000 	    _ADR WR_BYTE 
 282 1a30 CD180000 	    _ADR SEND_ADR
 283 1a34 D11C0000 	    _ADR TOR
 284 1a38 4B1C0000 	    _BRAN 2f 
 284      581A0000 
 285 1a40 291D0000 	1:  _ADR DUPP 
 286 1a44 9D1C0000 	    _ADR CAT 
 287 1a48 291D0000 	    _ADR DUPP 
 288 1a4c 212B0000 	    _ADR DOTH
 289 1a50 15180000 	    _ADR WR_BYTE 
 290 1a54 491E0000 	    _ADR ONEP
 291 1a58 191C0000 	2:  _DONXT 1b 
 291      401A0000 
 292 1a60 191D0000 	    _ADR DROP
 293 1a64 A9170000 	    _ADR CHIP_DSEL
 294 1a68 11190000 	    _ADR WAIT_DONE 
 295 1a6c 7F1A0000 	    _UNNEST
 296              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
ARM GAS  forth.s 			page 73


  19              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
ARM GAS  forth.s 			page 74


  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84              		STMFD	RSP!,{IP}
  85              		ADD IP,WP,#3
  86 1a70 48F804CD 	// inner interprer
  87 1a74 05F1030C 	INEXT: 
  88              		LDR WP,[IP],#4 
  89              		BX WP  
  90 1a78 5CF8045B 	UNNEST: // exit hi level word 
  91 1a7c 2847     		LDMFD RSP!,{IP}
  92              		LDR WP,[IP],#4 
  93 1a7e 58F804CB 		BX WP  
  94 1a82 5CF8045B 	
  95 1a86 2847     		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104              		add T1,UP,#USER_CTOP 
 105              		ldr T1,[T1]
 106 1a88 04F14401 		mov T2,#0x4700+(10<<3)
 107 1a8c 0968     		strh T2,[T1],#2
 108 1a8e 44F25072 		mov T2,#0xbf00 // NOP.N   
 109 1a92 21F8022B 		strh T2,[T1],#2 
 110 1a96 4FF43F42 		add T2,UP,#USER_CTOP 
 111 1a9a 21F8022B 		str T1,[T2]
 112 1a9e 04F14402 		_NEXT  
 113 1aa2 1160     	
ARM GAS  forth.s 			page 75


 114 1aa4 E8E7     	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117              		_PUSH 
 118              		ADD TOS,UP,#STDIN 
 119 1aa6 47F8046D 		_NEXT 
 120 1aaa 04F11406 	
 121 1aae E3E7     	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124              		_PUSH 
 125              		ADD TOS,UP,#STDOUT
 126 1ab0 47F8046D 		_NEXT 
 127 1ab4 04F11806 		
 128 1ab8 DEE7     	/********************************************
 129              		KEY? ( -- c T | F )
 130              		check if available character 
 131              	********************************************/
 132              		_HEADER QKEY,4,"KEY?" 
 133              		_NEST 
 134 1aba 101A0000 		_ADR TSTDIN // ' STDIN 
 134      044B4559 
 134      3F00
 135 1ac4 504700BF 		_ADR ATEXE
 136 1ac8 A71A0000 		_UNNEST 
 137 1acc D5240000 	
 138 1ad0 7F1A0000 	/********************************************
 139              	    KEY	 ( -- c )
 140              	 	Wait for and return an input character.
 141              	********************************************/
 142              		_HEADER KEY,3,"KEY"
 143              		_NEST
 144 1ad4 BE1A0000 	KEY1:
 144      034B4559 
 145 1adc 504700BF 		_ADR CAPS_LED 
 146              		_ADR	QKEY 
 147 1ae0 59160000 		_QBRAN	KEY1
 148 1ae4 C51A0000 		_UNNEST
 149 1ae8 371C0000 	
 149      E01A0000 
 150 1af0 7F1A0000 	/**********************************************
 151              		EMIT ( c -- )
 152              		transmit a character to console 
 153              	**********************************************/
 154              		_HEADER EMIT,4,"EMIT"
 155              		_NEST 
 156 1af4 D81A0000 		_ADR TSTDOUT 
 156      04454D49 
 156      540000BF 
 157 1b00 504700BF 		_ADR ATEXE 
 158 1b04 B11A0000 		_UNNEST 
 159 1b08 D5240000 	
 160 1b0c 7F1A0000 	
 161              	/************************************************
 162              	 GET-IP ( n - c )
 163              	 return interrupt priority of IRQn 
 164              	************************************************/
ARM GAS  forth.s 			page 76


 165              	/*
 166              		_HEADER GETIP,6,"GET-IP" 
 167              		_NEST 
 168              		_ADR DUPP 
 169              		_ADR ZLESS
 170              		_QBRAN 1f 
 171              		_DOLIT 15
 172              		_ADR ANDD
 173              		_DOLIT 4
 174              		_ADR SUBB  
 175              		_DOLIT 0xE000ED18 
 176              		_BRAN 2f 
 177              	1:	_DOLIT 0xE000E400 
 178              	2:	_ADR PLUS 
 179              		_ADR CAT
 180              		_DOLIT 4 
 181              		_ADR RSHIFT 
 182              		_UNNEST 
 183              	*/
 184              	
 185              	/***********************************************
 186              	 RANDOM ( n+ -- {0..n+ - 1} )
 187              	 return pseudo random number 
 188              	 REF: https://en.wikipedia.org/wiki/Xorshift
 189              	************************************************/
 190              		_HEADER RAND,6,"RANDOM"
 191              		_NEST
 192 1b10 F81A0000 		_ADR ABSS   
 192      0652414E 
 192      444F4D00 
 193 1b1c 504700BF 		_ADR SEED 
 194 1b20 B51F0000 		_ADR AT 
 195 1b24 F5200000 		_ADR DUPP 
 196 1b28 7D1C0000 		_DOLIT 13
 197 1b2c 291D0000 		_ADR LSHIFT 
 198 1b30 F71B0000 		_ADR XORR  
 198      0D000000 
 199 1b38 DD1D0000 		_ADR DUPP 
 200 1b3c 951D0000 		_DOLIT 17 
 201 1b40 291D0000 		_ADR RSHIFT 
 202 1b44 F71B0000 		_ADR XORR 
 202      11000000 
 203 1b4c C51D0000 		_ADR DUPP
 204 1b50 951D0000 		_DOLIT 5 
 205 1b54 291D0000 		_ADR LSHIFT 
 206 1b58 F71B0000 		_ADR XORR  
 206      05000000 
 207 1b60 DD1D0000 		_ADR DUPP 
 208 1b64 951D0000 		_ADR SEED 
 209 1b68 291D0000 		_ADR STORE 
 210 1b6c F5200000 		_DOLIT 0x7FFFFFFF
 211 1b70 691C0000 		_ADR ANDD 
 212 1b74 F71B0000 		_ADR SWAP 
 212      FFFFFF7F 
 213 1b7c 6D1D0000 		_ADR MODD 
 214 1b80 391D0000 		_UNNEST 
 215 1b84 59230000 	
ARM GAS  forth.s 			page 77


 216 1b88 7F1A0000 	
 217              	/****************************************
 218              	 PAUSE ( u -- ) 
 219              	 suspend execution for u milliseconds
 220              	****************************************/
 221              		_HEADER PAUSE,5,"PAUSE"
 222              		_NEST 
 223 1b8c 141B0000 		_ADR TIMER 
 223      05504155 
 223      534500BF 
 224 1b98 504700BF 		_ADR STORE 
 225 1b9c 1D210000 	PAUSE_LOOP:
 226 1ba0 691C0000 		_ADR TIMER 
 227              		_ADR AT 
 228 1ba4 1D210000 		_QBRAN PAUSE_EXIT 
 229 1ba8 7D1C0000 		_BRAN PAUSE_LOOP 
 230 1bac 371C0000 	PAUSE_EXIT: 		
 230      BC1B0000 
 231 1bb4 4B1C0000 		_UNNEST 
 231      A41B0000 
 232              	
 233 1bbc 7F1A0000 	/******************************************
 234              	  ULED ( T|F -- )
 235              	  control user LED, -1 ON, 0 OFF 
 236              	*******************************************/
 237              		_HEADER ULED,4,"ULED"
 238              		mov T0,#(1<<LED_PIN)
 239 1bc0 901B0000 		_MOV32 T1,LED_GPIO 
 239      04554C45 
 239      440000BF 
 240 1bcc 4FF40050 		movs TOS,TOS 
 241 1bd0 4FF40061 		_POP
 241      C4F20201 
 242 1bd8 3600     		beq ULED_OFF
 243 1bda 57F8046B 		lsl T0,#16 
 244 1bde 03D0     		str T0,[T1,#GPIO_BSRR]
 245 1be0 4FEA0040 		_NEXT 
 246 1be4 8861     	ULED_OFF:
 247 1be6 47E7     		str T0,[T1,#GPIO_BSRR]
 248              		_NEXT    
 249 1be8 8861     	
 250 1bea 45E7     	
 251              		
 252              	/***************
 253              	//  The kernel
 254              	***************/
 255              	
 256              	/********************
 257              	    NOP	( -- )
 258              	 	do nothing.
 259              	*********************/
 260              		_HEADER NOP,3,"NOP"
 261              		_NEXT 
 262 1bec C41B0000 	 
 262      034E4F50 
 263 1bf4 40E7     	/********************
 264              	    doLIT	( -- w )
ARM GAS  forth.s 			page 78


 265              	 	Push an inline literal.
 266              	hidden word used by compiler 
 267              	*********************/
 268              	DOLIT:
 269              		_PUSH				//  store TOS on data stack
 270              		LDR	TOS,[IP],#4		//  get literal at word boundary
 271 1bf6 47F8046D 		_NEXT 
 272 1bfa 5CF8046B 	
 273 1bfe 3BE7     	/*******************************
 274              	    EXECUTE	( ca -- )
 275              	 	Execute the word at ca.
 276              	*******************************/
 277              		_HEADER EXECU,7,"EXECUTE"
 278              		ORR	WP,TOS,#1 
 279 1c00 F01B0000 		_POP
 279      07455845 
 279      43555445 
 280 1c0c 46F00105 		BX WP 
 281 1c10 57F8046B 		_NEXT 
 282 1c14 2847     	
 283 1c16 2FE7     	/**********************************************************
 284              	    donext	( -- ) counter on R:
 285              	 	Run time code for the single index loop.
 286              	 	: next ( -- ) \ hilevel model
 287              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 288              	hidden word used by compiler 	  
 289              	*********************************************************/
 290              	DONXT:
 291              		LDR	T2,[RSP]   // ( -- u )  
 292              		CBNZ T2,NEXT1 
 293 1c18 D8F80020 		/* loop done */
 294 1c1c 22B9     		ADD	RSP,RSP,#4 // drop counter 
 295              		ADD	IP,IP,#4 // skip after loop address 
 296 1c1e 08F10408 		_NEXT
 297 1c22 0CF1040C 	NEXT1:
 298 1c26 27E7     		/* decrement loop counter */
 299              		SUB	T2,T2,#1
 300              		STR	T2,[RSP]
 301 1c28 A2F10102 		LDR	IP,[IP]	// go begining of loop 
 302 1c2c C8F80020 		_NEXT 
 303 1c30 DCF800C0 	
 304 1c34 20E7     	/**************************************
 305              	    ?branch	( f -- )
 306              	 	Branch if flag is zero.
 307              	hiddend word used by compiler
 308              	**************************************/
 309              	QBRAN:
 310              		MOVS	TOS,TOS
 311              		_POP
 312 1c36 3600     		BNE	QBRAN1
 313 1c38 57F8046B 		LDR	IP,[IP]
 314 1c3c 02D1     		_NEXT
 315 1c3e DCF800C0 	QBRAN1:
 316 1c42 19E7     	 	ADD	IP,IP,#4
 317              		_NEXT
 318 1c44 0CF1040C 	
 319 1c48 16E7     	/***********************************
ARM GAS  forth.s 			page 79


 320              	    branch	( -- )
 321              	 	Branch to an inline address.
 322              	hidden word used by compiler 
 323              	***********************************/
 324              	BRAN:
 325              		LDR	IP,[IP]
 326              		_NEXT
 327 1c4a DCF800C0 	
 328 1c4e 13E7     	/******************************************
 329              	    EXIT	(  -- )
 330              	 	Exit the currently executing command.
 331              	******************************************/
 332              		_HEADER EXIT,4,"EXIT"
 333              		_UNNEST
 334 1c50 041C0000 	
 334      04455849 
 334      540000BF 
 335 1c5c 7F1A0000 	/***********************************
 336              	    !	   ( w a -- )
 337              	 	Pop the data stack to memory.
 338              	************************************/
 339              		_HEADER STORE,1,"!"
 340              		LDR	WP,[DSP],#4
 341 1c60 541C0000 		STR	WP,[TOS]
 341      012100BF 
 342 1c68 57F8045B 		_POP
 343 1c6c 3560     		_NEXT 
 344 1c6e 57F8046B 	
 345 1c72 01E7     	/********************************************
 346              	    @	   ( a -- w )
 347              	 	Push memory location to the data stack.
 348              	*********************************************/
 349              		_HEADER AT,1,"@"
 350              		LDR	TOS,[TOS]
 351 1c74 641C0000 		_NEXT 
 351      014000BF 
 352 1c7c 3668     	
 353 1c7e FBE6     	/*******************************************
 354              	    C!	  ( c b -- )
 355              	 	Pop the data stack to byte memory.
 356              	*******************************************/
 357              		_HEADER CSTOR,2,"C!"
 358              		LDR	WP,[DSP],#4
 359 1c80 781C0000 		STRB WP,[TOS]
 359      02432100 
 360 1c88 57F8045B 		_POP
 361 1c8c 3570     		_NEXT
 362 1c8e 57F8046B 	
 363 1c92 F1E6     	/*********************************************
 364              	    C@	  ( b -- c )
 365              	 	Push byte memory location to the data stack.
 366              	**********************************************/
 367              		_HEADER CAT,2,"C@"
 368              		LDRB	TOS,[TOS]
 369 1c94 841C0000 		_NEXT 
 369      02434000 
 370 1c9c 3678     	
ARM GAS  forth.s 			page 80


 371 1c9e EBE6     	/*********************************************
 372              	    R>	  ( -- w )
 373              	 	Pop the return stack to the data stack.
 374              	**********************************************/
 375              		_HEADER RFROM,2,"R>"
 376              		_PUSH
 377 1ca0 981C0000 		LDR	TOS,[RSP],#4
 377      02523E00 
 378 1ca8 47F8046D 		_NEXT 
 379 1cac 58F8046B 	
 380 1cb0 E2E6     	/************************************************
 381              	    R@	  ( -- w )
 382              	 	Copy top of return stack to the data stack.
 383              	************************************************/
 384              		_HEADER RAT,2,"R@"
 385              		_PUSH
 386 1cb2 A41C0000 		LDR	TOS,[RSP]
 386      02524000 
 386      00BF
 387 1cbc 47F8046D 		_NEXT 
 388 1cc0 D8F80060 	
 389 1cc4 D8E6     	/***********************************************
 390              	    >R	  ( w -- )
 391              	 	Push the data stack to the return stack.
 392              	************************************************/
 393              		_HEADER TOR,2,">R"
 394              		STR	TOS,[RSP,#-4]!
 395 1cc6 B61C0000 		_POP
 395      023E5200 
 395      00BF
 396 1cd0 48F8046D 		_NEXT
 397 1cd4 57F8046B 	
 398 1cd8 CEE6     	/*******************************
 399              	//	RP! ( u -- )
 400              	// initialize RPP with u 
 401              	*******************************/
 402              		_HEADER RPSTOR,3,"RP!"
 403              		MOV RSP,TOS 
 404 1cda CA1C0000 		_POP  
 404      03525021 
 404      00BF
 405 1ce4 B046     		_NEXT 
 406 1ce6 57F8046B 	
 407 1cea C5E6     	/********************************
 408              		SP! ( u -- )
 409              	 initialize SPP with u 
 410              	********************************/
 411              		_HEADER SPSTOR,3,"SP!"
 412              		MOV DSP,TOS 
 413 1cec DE1C0000 		EOR TOS,TOS,TOS 
 413      03535021 
 414 1cf4 3746     		_NEXT 
 415 1cf6 86EA0606 	
 416 1cfa BDE6     	/**************************************
 417              	    SP@	 ( -- a )
 418              	 	Push the current data stack pointer.
 419              	***************************************/
ARM GAS  forth.s 			page 81


 420              		_HEADER SPAT,3,"SP@"
 421              		_PUSH
 422 1cfc F01C0000 		MOV	TOS,DSP
 422      03535040 
 423 1d04 47F8046D 		_NEXT
 424 1d08 3E46     	
 425 1d0a B5E6     	/********************************
 426              	    DROP	( w -- )
 427              	 	Discard top stack item.
 428              	********************************/
 429              		_HEADER DROP,4,"DROP"
 430              		_POP
 431 1d0c 001D0000 		_NEXT 
 431      0444524F 
 431      500000BF 
 432 1d18 57F8046B 	
 433 1d1c ACE6     	/*********************************
 434              	    DUP	 ( w -- w w )
 435              	 	Duplicate the top stack item.
 436              	*********************************/
 437              		_HEADER DUPP,3,"DUP"
 438              		_PUSH
 439 1d1e 101D0000 		_NEXT 
 439      03445550 
 439      00BF
 440 1d28 47F8046D 	
 441 1d2c A4E6     	/**********************************
 442              	    SWAP	( w1 w2 -- w2 w1 )
 443              	 	Exchange top two stack items.
 444              	**********************************/
 445              		_HEADER SWAP,4,"SWAP"
 446              		LDR	WP,[DSP]
 447 1d2e 221D0000 		STR	TOS,[DSP]
 447      04535741 
 447      5000
 448 1d38 3D68     		MOV	TOS,WP
 449 1d3a 3E60     		_NEXT 
 450 1d3c 2E46     	
 451 1d3e 9BE6     	/***********************************
 452              	    OVER	( w1 w2 -- w1 w2 w1 )
 453              	 	Copy second stack item to top.
 454              	***********************************/
 455              		_HEADER OVER,4,"OVER"
 456              		_PUSH
 457 1d40 321D0000 		LDR	TOS,[DSP,#4]
 457      044F5645 
 457      520000BF 
 458 1d4c 47F8046D 		_NEXT 
 459 1d50 7E68     	
 460 1d52 91E6     	/***********************************
 461              	    0<	  ( n -- t )
 462              	 	Return true if n is negative.
 463              	***********************************/
 464              		_HEADER ZLESS,2,"0<"
 465              		ASR TOS,#31
 466 1d54 441D0000 		_NEXT 
 466      02303C00 
ARM GAS  forth.s 			page 82


 467 1d5c 4FEAE676 	
 468 1d60 8AE6     	/********************************
 469              	    AND	 ( w w -- w )
 470              	 	Bitwise AND.
 471              	********************************/
 472              		_HEADER ANDD,3,"AND"
 473              		LDR	WP,[DSP],#4
 474 1d62 581D0000 		AND	TOS,TOS,WP
 474      03414E44 
 474      00BF
 475 1d6c 57F8045B 		_NEXT 
 476 1d70 06EA0506 	
 477 1d74 80E6     	/******************************
 478              	    OR	  ( w w -- w )
 479              	 	Bitwise inclusive OR.
 480              	******************************/
 481              		_HEADER ORR,2,"OR"
 482              		LDR	WP,[DSP],#4
 483 1d76 661D0000 		ORR	TOS,TOS,WP
 483      024F5200 
 483      00BF
 484 1d80 57F8045B 		_NEXT 
 485 1d84 46EA0506 	
 486 1d88 76E6     	/*****************************
 487              	    XOR	 ( w w -- w )
 488              	 	Bitwise exclusive OR.
 489              	*****************************/
 490              		_HEADER XORR,3,"XOR"
 491              		LDR	WP,[DSP],#4
 492 1d8a 7A1D0000 		EOR	TOS,TOS,WP
 492      03584F52 
 492      00BF
 493 1d94 57F8045B 		_NEXT 
 494 1d98 86EA0506 	
 495 1d9c 6CE6     	/**************************************************
 496              	    UM+	 ( w w -- w cy )
 497              	 	Add two numbers, return the sum and carry flag.
 498              	***************************************************/
 499              		_HEADER UPLUS,3,"UM+"
 500              		LDR	WP,[DSP]
 501 1d9e 8E1D0000 		ADDS	WP,WP,TOS
 501      03554D2B 
 501      00BF
 502 1da8 3D68     		MOV	TOS,#0
 503 1daa AD19     		ADC	TOS,TOS,#0
 504 1dac 4FF00006 		STR	WP,[DSP]
 505 1db0 46F10006 		_NEXT 
 506 1db4 3D60     	
 507 1db6 5FE6     	/*********************************
 508              	    RSHIFT	 ( w # -- w )
 509              	 	arithmetic Right shift # bits.
 510              	**********************************/
 511              		_HEADER RSHIFT,6,"RSHIFT"
 512              		LDR	WP,[DSP],#4
 513 1db8 A21D0000 		MOV	TOS,WP,ASR TOS
 513      06525348 
 513      49465400 
ARM GAS  forth.s 			page 83


 514 1dc4 57F8045B 		_NEXT 
 515 1dc8 45FA06F6 	
 516 1dcc 54E6     	/****************************
 517              	    LSHIFT	 ( w # -- w )
 518              	 	Right shift # bits.
 519              	****************************/
 520              		_HEADER LSHIFT,6,"LSHIFT"
 521              		LDR	WP,[DSP],#4
 522 1dce BC1D0000 		MOV	TOS,WP,LSL TOS
 522      064C5348 
 522      49465400 
 522      00BF
 523 1ddc 57F8045B 		_NEXT
 524 1de0 05FA06F6 	
 525 1de4 48E6     	/*************************
 526              	    +	 ( w w -- w )
 527              	 	Add.
 528              	*************************/
 529              		_HEADER PLUS,1,"+"
 530              		LDR	WP,[DSP],#4
 531 1de6 D21D0000 		ADD	TOS,TOS,WP
 531      012B
 532 1dec 57F8045B 		_NEXT 
 533 1df0 2E44     	
 534 1df2 41E6     	/************************
 535              	    -	 ( w w -- w )
 536              	 	Subtract.
 537              	************************/
 538              		_HEADER SUBB,1,"-"
 539              		LDR	WP,[DSP],#4
 540 1df4 EA1D0000 		RSB	TOS,TOS,WP
 540      012D00BF 
 541 1dfc 57F8045B 		_NEXT 
 542 1e00 C6EB0506 	
 543 1e04 38E6     	/************************
 544              	    *	 ( w w -- w )
 545              	 	Multiply.
 546              	***********************/
 547              		_HEADER STAR,1,"*"
 548              		LDR	WP,[DSP],#4
 549 1e06 F81D0000 		MUL	TOS,WP,TOS
 549      012A
 550 1e0c 57F8045B 		_NEXT 
 551 1e10 05FB06F6 	
 552 1e14 30E6     	/***************************
 553              	    UM*	 ( w w -- ud )
 554              	 	Unsigned multiply.
 555              	****************************/
 556              		_HEADER UMSTA,3,"UM*"
 557              		LDR	WP,[DSP]
 558 1e16 0A1E0000 		UMULL	T2,T3,TOS,WP
 558      03554D2A 
 558      00BF
 559 1e20 3D68     		STR	T2,[DSP]
 560 1e22 A6FB0523 		MOV	TOS,T3
 561 1e26 3A60     		_NEXT 
 562 1e28 1E46     	
ARM GAS  forth.s 			page 84


 563 1e2a 25E6     	/***************************
 564              	    M*	 ( w w -- d )
 565              	 	signed multiply.
 566              	***************************/
 567              		_HEADER MSTAR,2,"M*"
 568              		LDR	WP,[DSP]
 569 1e2c 1A1E0000 		SMULL	T2,T3,TOS,WP
 569      024D2A00 
 570 1e34 3D68     		STR	T2,[DSP]
 571 1e36 86FB0523 		MOV	TOS,T3
 572 1e3a 3A60     		_NEXT 
 573 1e3c 1E46     	
 574 1e3e 1BE6     	/***************************
 575              	    1+	 ( w -- w+1 )
 576              	 	Add 1.
 577              	***************************/
 578              		_HEADER ONEP,2,"1+"
 579              		ADD	TOS,TOS,#1
 580 1e40 301E0000 		_NEXT 
 580      02312B00 
 581 1e48 06F10106 	
 582 1e4c 14E6     	/***************************
 583              	    1-	 ( w -- w-1 )
 584              	 	Subtract 1.
 585              	***************************/
 586              		_HEADER ONEM,2,"1-"
 587              		SUB	TOS,TOS,#1
 588 1e4e 441E0000 		_NEXT 
 588      02312D00 
 588      00BF
 589 1e58 A6F10106 	
 590 1e5c 0CE6     	/***************************
 591              	    2+	 ( w -- w+2 )
 592              	 	Add 2.
 593              	**************************/
 594              		_HEADER TWOP,2,"2+"
 595              		ADD	TOS,TOS,#2
 596 1e5e 521E0000 		_NEXT
 596      02322B00 
 596      00BF
 597 1e68 06F10206 	
 598 1e6c 04E6     	/**************************
 599              	    2-	 ( w -- w-2 )
 600              	 	Subtract 2.
 601              	**************************/
 602              		_HEADER TWOM,2,"2-"
 603              		SUB	TOS,TOS,#2
 604 1e6e 621E0000 		_NEXT
 604      02322D00 
 604      00BF
 605 1e78 A6F10206 	
 606 1e7c FCE5     	/***************************
 607              	    CELL+	( w -- w+4 )
 608              	 	Add CELLL.
 609              	***************************/
 610              		_HEADER CELLP,5,"CELL+"
 611              		ADD	TOS,TOS,#CELLL
ARM GAS  forth.s 			page 85


 612 1e7e 721E0000 		_NEXT
 612      0543454C 
 612      4C2B
 613 1e88 06F10406 	
 614 1e8c F4E5     	/***************************
 615              	    CELL-	( w -- w-4 )
 616              	 	Subtract CELLL.
 617              	**************************/
 618              		_HEADER CELLM,5,"CELL-"
 619              		SUB	TOS,TOS,#CELLL
 620 1e8e 821E0000 		_NEXT
 620      0543454C 
 620      4C2D
 621 1e98 A6F10406 	
 622 1e9c ECE5     	/**************************** 
 623              	    BL	( -- 32 )
 624              	 	Blank (ASCII space).
 625              	*****************************/
 626              		_HEADER BLANK,2,"BL"
 627              		_PUSH
 628 1e9e 921E0000 		MOV	TOS,#32
 628      02424C00 
 628      00BF
 629 1ea8 47F8046D 		_NEXT 
 630 1eac 4FF02006 	
 631 1eb0 E2E5     	/**************************
 632              	    CELLS	( w -- w*4 )
 633              	 	Multiply CELLL 
 634              	***************************/
 635              		_HEADER CELLS,5,"CELLS"
 636              		LSL TOS,#2
 637 1eb2 A21E0000 		_NEXT
 637      0543454C 
 637      4C53
 638 1ebc 4FEA8606 	
 639 1ec0 DAE5     	/***************************
 640              	    CELL/	( w -- w/4 )
 641              	 	Divide by CELLL.
 642              	***************************/
 643              		_HEADER CELLSL,5,"CELL/"
 644              		ASR TOS,#2
 645 1ec2 B61E0000 		_NEXT
 645      0543454C 
 645      4C2F
 646 1ecc 4FEAA606 	
 647 1ed0 D2E5     	/*************************
 648              	    2*	( w -- w*2 )
 649              	 	Multiply 2.
 650              	*************************/
 651              		_HEADER TWOST,2,"2*"
 652              		MOV	TOS,TOS,LSL#1
 653 1ed2 C61E0000 		_NEXT
 653      02322A00 
 653      00BF
 654 1edc 4FEA4606 	
 655 1ee0 CAE5     	/*************************
 656              	    2/	( w -- w/2 )
ARM GAS  forth.s 			page 86


 657              	 	Divide by 2.
 658              	***********************/
 659              		_HEADER TWOSL,2,"2/"
 660              		MOV	TOS,TOS,ASR#1
 661 1ee2 D61E0000 		_NEXT
 661      02322F00 
 661      00BF
 662 1eec 4FEA6606 	
 663 1ef0 C2E5     	/****************************
 664              	    ?DUP	( w -- w w | 0 )
 665              	 	Conditional duplicate.
 666              	*****************************/
 667              		_HEADER QDUP,4,"?DUP"
 668              		MOVS	WP,TOS
 669 1ef2 E61E0000 		IT NE 
 669      043F4455 
 669      5000
 670 1efc 3500     	    STRNE	TOS,[DSP,#-4]!
 671 1efe 18BF     		_NEXT
 672 1f00 47F8046D 	
 673 1f04 B8E5     	/***********************************
 674              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 675              	 	Rotate top 3 items.
 676              	*************************************/
 677              		_HEADER ROT,3,"ROT"
 678              		LDR	T0,[DSP]  // w2 
 679 1f06 F61E0000 		STR	TOS,[DSP]  // w3 replace w2 
 679      03524F54 
 679      00BF
 680 1f10 3868     		LDR	TOS,[DSP,#4] // w1 replace w3 
 681 1f12 3E60     		STR	T0,[DSP,#4] // w2 rpelace w1 
 682 1f14 7E68     		_NEXT
 683 1f16 7860     	
 684 1f18 AEE5     	/*********************************
 685              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 686              	 left rotate top 3 elements 
 687              	********************************/
 688              		_HEADER NROT,4,"-ROT"
 689              		LDR T0,[DSP,#4]
 690 1f1a 0A1F0000 		STR TOS,[DSP,#4]	
 690      042D524F 
 690      5400
 691 1f24 7868     		LDR TOS,[DSP]
 692 1f26 7E60     		STR T0,[DSP]
 693 1f28 3E68     		_NEXT 
 694 1f2a 3860     	
 695 1f2c A4E5     	/*********************************
 696              	    2DROP	( w1 w2 -- )
 697              	 	Drop top 2 items.
 698              	*********************************/
 699              		_HEADER DDROP,5,"2DROP"
 700              		_POP
 701 1f2e 1E1F0000 		_POP
 701      05324452 
 701      4F50
 702 1f38 57F8046B 		_NEXT 
 703 1f3c 57F8046B 	
ARM GAS  forth.s 			page 87


 704 1f40 9AE5     	/********************************
 705              		3DROP ( w1 w2 w3 -- )
 706              		drop top 3 items 
 707              	********************************/
 708              		_HEADER TDROP,5,"3DROP"
 709              	    add DSP,#8 
 710 1f42 321F0000 	    _POP 
 710      05334452 
 710      4F50
 711 1f4c 07F10807 	    _NEXT 
 712 1f50 57F8046B 	
 713 1f54 90E5     	/***********************************
 714              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 715              	 	Duplicate top 2 items.
 716              	************************************/
 717              		_HEADER DDUP,4,"2DUP"
 718              		LDR	T0,[DSP] // w1
 719 1f56 461F0000 		STR	TOS,[DSP,#-4]! // push w2  
 719      04324455 
 719      5000
 720 1f60 3868     		STR	T0,[DSP,#-4]! // push w1 
 721 1f62 47F8046D 		_NEXT
 722 1f66 47F8040D 	
 723 1f6a 85E5     	/******************************
 724              	    D+	( d1 d2 -- d3 )
 725              	 	Add top 2 double numbers.
 726              	******************************/
 727              		_HEADER DPLUS,2,"D+"
 728              		LDR	WP,[DSP],#4
 729 1f6c 5A1F0000 		LDR	T2,[DSP],#4
 729      02442B00 
 730 1f74 57F8045B 		LDR	T3,[DSP]
 731 1f78 57F8042B 		ADDS	WP,WP,T3
 732 1f7c 3B68     		STR	WP,[DSP]
 733 1f7e ED18     		ADC	TOS,TOS,T2
 734 1f80 3D60     		_NEXT
 735 1f82 46EB0206 	
 736 1f86 77E5     	/*****************************
 737              	    NOT	 ( w -- !w )
 738              	 	1"s complement.
 739              	*****************************/
 740              		_HEADER INVER,3,"NOT"
 741              		MVN	TOS,TOS
 742 1f88 701F0000 		_NEXT
 742      034E4F54 
 743 1f90 6FEA0606 	
 744 1f94 70E5     	/*****************************
 745              	    NEGATE	( w -- -w )
 746              	 	2's complement.
 747              	***************************/
 748              		_HEADER NEGAT,6,"NEGATE"
 749              		RSB	TOS,TOS,#0
 750 1f96 8C1F0000 		_NEXT
 750      064E4547 
 750      41544500 
 750      00BF
 751 1fa4 C6F10006 	
ARM GAS  forth.s 			page 88


 752 1fa8 66E5     	/***************************
 753              	    ABS	 ( w -- |w| )
 754              	 	Absolute.
 755              	**************************/
 756              		_HEADER ABSS,3,"ABS"
 757              		TST	TOS,#0x80000000
 758 1faa 9A1F0000 		IT NE
 758      03414253 
 758      00BF
 759 1fb4 16F0004F 	    RSBNE   TOS,TOS,#0
 760 1fb8 18BF     		_NEXT
 761 1fba 7642     	
 762 1fbc 5CE5     	/*******************
 763              	  0= ( w -- f )
 764              	 TOS==0?
 765              	*******************/
 766              		_HEADER ZEQUAL,2,"0="
 767              		cbnz TOS,1f
 768 1fbe AE1F0000 		mov TOS,#-1
 768      02303D00 
 768      00BF
 769 1fc8 16B9     		_NEXT 
 770 1fca 4FF0FF36 	1:  eor TOS,TOS,TOS  
 771 1fce 53E5     		_NEXT 	
 772 1fd0 86EA0606 	
 773 1fd4 50E5     	/*********************
 774              	    =	 ( w w -- t )
 775              	 	Equal?
 776              	*********************/
 777              		_HEADER EQUAL,1,"="
 778              		LDR	WP,[DSP],#4
 779 1fd6 C21F0000 		CMP	TOS,WP
 779      013D
 780 1fdc 57F8045B 		ITE EQ 
 781 1fe0 AE42     	    MVNEQ	TOS,#0
 782 1fe2 0CBF     		MOVNE	TOS,#0
 783 1fe4 6FF00006 		_NEXT
 784 1fe8 0026     	
 785 1fea 45E5     	/************************
 786              	    U<	 ( w w -- t )
 787              	 	Unsigned less?
 788              	*************************/
 789              		_HEADER ULESS,2,"U<"
 790              		LDR	WP,[DSP],#4
 791 1fec DA1F0000 		CMP	WP,TOS
 791      02553C00 
 792 1ff4 57F8045B 		ITE CC 
 793 1ff8 B542     		MVNCC	TOS,#0
 794 1ffa 34BF     		MOVCS	TOS,#0
 795 1ffc 6FF00006 		_NEXT
 796 2000 0026     	
 797 2002 39E5     	/**********************
 798              	    <	( w w -- t )
 799              	 	Less?
 800              	**********************/
 801              		_HEADER LESS,1,"<"
 802              		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 89


 803 2004 F01F0000 		CMP	WP,TOS
 803      013C00BF 
 804 200c 57F8045B 	    ITE LT
 805 2010 B542     		MVNLT	TOS,#0
 806 2012 B4BF     		MOVGE	TOS,#0
 807 2014 6FF00006 		_NEXT 
 808 2018 0026     	
 809 201a 2DE5     	/***********************
 810              	    >	( w w -- t )
 811              	 	greater?
 812              	***********************/
 813              		_HEADER GREAT,1,">"
 814              		LDR	WP,[DSP],#4
 815 201c 08200000 		CMP	WP,TOS
 815      013E00BF 
 816 2024 57F8045B 		ITE GT
 817 2028 B542     	    MVNGT	TOS,#0
 818 202a CCBF     		MOVLE	TOS,#0
 819 202c 6FF00006 		_NEXT
 820 2030 0026     	
 821 2032 21E5     	/***************************
 822              	    MAX	 ( w w -- max )
 823              	 	Leave maximum.
 824              	***************************/
 825              		_HEADER MAX,3,"MAX"
 826              		LDR	WP,[DSP],#4
 827 2034 20200000 		CMP	WP,TOS
 827      034D4158 
 828 203c 57F8045B 		IT GT 
 829 2040 B542     		MOVGT	TOS,WP
 830 2042 C8BF     		_NEXT 
 831 2044 2E46     	
 832 2046 17E5     	/**************************
 833              	    MIN	 ( w w -- min )
 834              	 	Leave minimum.
 835              	**************************/
 836              		_HEADER MIN,3,"MIN"
 837              		LDR	WP,[DSP],#4
 838 2048 38200000 		CMP	WP,TOS
 838      034D494E 
 839 2050 57F8045B 		IT LT
 840 2054 B542     		MOVLT	TOS,WP
 841 2056 B8BF     		_NEXT
 842 2058 2E46     	
 843 205a 0DE5     	/***********************
 844              	    +!	 ( w a -- )
 845              	 	Add to memory.
 846              	***********************/
 847              		_HEADER PSTOR,2,"+!"
 848              		LDR	WP,[DSP],#4
 849 205c 4C200000 		LDR	T2,[TOS]
 849      022B2100 
 850 2064 57F8045B 		ADD	T2,T2,WP
 851 2068 3268     		STR	T2,[TOS]
 852 206a 2A44     		_POP
 853 206c 3260     		_NEXT
 854 206e 57F8046B 	
ARM GAS  forth.s 			page 90


 855 2072 01E5     	/************************
 856              	    2!	 ( d a -- )
 857              	 	Store double number.
 858              	*************************/
 859              		_HEADER DSTOR,2,"2!"
 860              		LDR	WP,[DSP],#4
 861 2074 60200000 		LDR	T2,[DSP],#4
 861      02322100 
 862 207c 57F8045B 		STR	WP,[TOS],#4
 863 2080 57F8042B 		STR	T2,[TOS]
 864 2084 46F8045B 		_POP
 865 2088 3260     		_NEXT
 866 208a 57F8046B 	
 867 208e F3E4     	/************************
 868              	    2@	 ( a -- d )
 869              	 	Fetch double number.
 870              	************************/
 871              		_HEADER DAT,2,"D@"
 872              		LDR	WP,[TOS,#4]
 873 2090 78200000 		STR	WP,[DSP,#-4]!
 873      02444000 
 874 2098 7568     		LDR	TOS,[TOS]
 875 209a 47F8045D 		_NEXT
 876 209e 3668     	
 877 20a0 EAE4     	/***************************
 878              	    COUNT	( b -- b+1 c )
 879              	 	Fetch length of string.
 880              	****************************/
 881              		_HEADER COUNT,5,"COUNT"
 882              		LDRB	WP,[TOS],#1
 883 20a2 94200000 		_PUSH
 883      05434F55 
 883      4E54
 884 20ac 16F8015B 		MOV	TOS,WP
 885 20b0 47F8046D 		_NEXT
 886 20b4 2E46     	
 887 20b6 DFE4     	/******************************
 888              	    DNEGATE	( d -- -d )
 889              	 	Negate double number.
 890              	**************************/
 891              		_HEADER DNEGA,7,"DNEGATE"
 892              		LDR	WP,[DSP]
 893 20b8 A6200000 		SUB	T2,T2,T2
 893      07444E45 
 893      47415445 
 894 20c4 3D68     		SUBS WP,T2,WP
 895 20c6 A2EB0202 		SBC	TOS,T2,TOS
 896 20ca 551B     		STR	WP,[DSP]
 897 20cc 62EB0606 		_NEXT
 898 20d0 3D60     	
 899 20d2 D1E4     	/******************************
 900              	  System and user variables
 901              	******************************/
 902              	
 903              	/*******************************
 904              	  doVAR	( -- a )
 905              	  Run time routine for VARIABLE and CREATE.
ARM GAS  forth.s 			page 91


 906              	hidden word used by compiler
 907              	********************************/
 908              	DOVAR:
 909              		_PUSH
 910              		MOV TOS,IP
 911 20d4 47F8046D 		ADD IP,IP,#4 
 912 20d8 6646     		B UNNEST 
 913 20da 0CF1040C 	
 914 20de CEE4     	/**********************************
 915              	    doCON	( -- a ) 
 916              	 	Run time routine for CONSTANT.
 917              	hidden word used by compiler 
 918              	***********************************/
 919              	DOCON:
 920              		_PUSH
 921              		LDR.W TOS,[IP],#4 
 922 20e0 47F8046D 		B UNNEST 
 923 20e4 5CF8046B 	
 924 20e8 C9E4     	/***********************
 925              	  system variables 
 926              	***********************/
 927              	
 928              	/**************************
 929              	 SEED ( -- a)
 930              	 return PRNG seed address 
 931              	**************************/
 932              		_HEADER SEED,4,"SEED"
 933              		_PUSH 
 934 20ea BC200000 		ADD TOS,UP,#RNDSEED
 934      04534545 
 934      4400
 935 20f4 47F8046D 		_NEXT 	
 936 20f8 04F10406 	
 937 20fc BCE4     	/****************************************
 938              	  MSEC ( -- a)
 939              	 return address of milliseconds counter
 940              	****************************************/
 941              		_HEADER MSEC,4,"MSEC"
 942              	    _PUSH
 943 20fe EE200000 	    ADD TOS,UP,#TICKS
 943      044D5345 
 943      4300
 944 2108 47F8046D 	    _NEXT 
 945 210c 04F10806 	
 946 2110 B2E4     	/*************************
 947              	 TIMER ( -- a )
 948              	 count down timer 
 949              	**********************/
 950              		_HEADER TIMER,5,"TIMER"
 951              		 _PUSH 
 952 2112 02210000 	    ADD TOS,UP,#CD_TIMER
 952      0554494D 
 952      4552
 953 211c 47F8046D 	    _NEXT
 954 2120 04F10C06 	
 955 2124 A8E4     	/*****************************
 956              	    'BOOT	 ( -- a )
ARM GAS  forth.s 			page 92


 957              	 	boot up application vector 
 958              	*****************************/
 959              		_HEADER TBOOT,5,"'BOOT"
 960              		_PUSH
 961 2126 16210000 		ADD	TOS,UP,#BOOT 
 961      0527424F 
 961      4F54
 962 2130 47F8046D 		_NEXT
 963 2134 04F11006 		
 964 2138 9EE4     	/********************************************	
 965              	    BASE	( -- a )
 966              	 	Storage of the radix base for numeric I/O.
 967              	**********************************************/
 968              		_HEADER BASE,4,"BASE"
 969              		_PUSH
 970 213a 2A210000 		ADD	TOS,UP,#NBASE
 970      04424153 
 970      4500
 971 2144 47F8046D 		_NEXT
 972 2148 04F11C06 	
 973 214c 94E4     	/*****************************************************
 974              	    temp	 ( -- a )
 975              	 	A temporary storage location used in parse and find.
 976              	hidden word for internal use
 977              	********************************************************/
 978              	TEMP:
 979              		_PUSH
 980              		ADD	TOS,UP,#TMP
 981 214e 47F8046D 		_NEXT
 982 2152 04F12006 	
 983 2156 8FE4     	/*******************************************
 984              	    SPAN	( -- a )
 985              	 	Hold character count received by EXPECT.
 986              	********************************************/
 987              		_HEADER SPAN,4,"SPAN"
 988              		_PUSH
 989 2158 3E210000 		ADD	TOS,UP,#CSPAN
 989      04535041 
 989      4E0000BF 
 990 2164 47F8046D 		_NEXT
 991 2168 04F12406 	
 992 216c 84E4     	/***********************************************************
 993              	    >IN	 ( -- a )
 994              	 	Hold the character pointer while parsing input stream.
 995              	***********************************************************/
 996              		_HEADER INN,3,">IN"
 997              		_PUSH
 998 216e 5C210000 		ADD	TOS,UP,#TOIN
 998      033E494E 
 998      00BF
 999 2178 47F8046D 		_NEXT
 1000 217c 04F12806 	
 1001 2180 7AE4     	/**************************************
 1002              	    #TIB	( -- a )
 1003              	 	Hold the current count and address 
 1004              		of the terminal input buffer.
 1005              	**************************************/
ARM GAS  forth.s 			page 93


 1006              		_HEADER NTIB,4,"#TIB"
 1007              		_PUSH
 1008 2182 72210000 		ADD	TOS,UP,#NTIBB
 1008      04235449 
 1008      4200
 1009 218c 47F8046D 		_NEXT
 1010 2190 04F12C06 	
 1011 2194 70E4     	/******************************
 1012              	    'EVAL	( -- a )
 1013              	 	Execution vector of EVAL.
 1014              	*******************************/
 1015              		_HEADER TEVAL,5,"'EVAL"
 1016              		_PUSH
 1017 2196 86210000 		ADD	TOS,UP,#EVAL
 1017      05274556 
 1017      414C
 1018 21a0 47F8046D 		_NEXT
 1019 21a4 04F13406 	
 1020 21a8 66E4     	/*********************************
 1021              	    HLD	 ( -- a )
 1022              	 	Hold a pointer in building a 
 1023              		numeric output string.
 1024              	*********************************/
 1025              		_HEADER HLD,3,"HLD"
 1026              		_PUSH
 1027 21aa 9A210000 		ADD	TOS,UP,#HOLD
 1027      03484C44 
 1027      00BF
 1028 21b4 47F8046D 		_NEXT
 1029 21b8 04F13806 	
 1030 21bc 5CE4     	/**********************************
 1031              	    CONTEXT	( -- a )
 1032              	 	A area to specify vocabulary 
 1033              		search order.
 1034              	**********************************/
 1035              		_HEADER CNTXT,7,"CONTEXT"
 1036              	CRRNT:
 1037 21be AE210000 		_PUSH
 1037      07434F4E 
 1037      54455854 
 1037      00BF
 1038              		ADD	TOS,UP,#CTXT
 1039 21cc 47F8046D 		_NEXT
 1040 21d0 04F13C06 	
 1041 21d4 50E4     	/******************************
 1042              	    CP	( -- a )
 1043              	 	Point to top name in RAM 
 1044              		vocabulary.
 1045              	******************************/
 1046              		_HEADER CPP,2,"CP"
 1047              		_PUSH
 1048 21d6 C2210000 		ADD	TOS,UP,#USER_CTOP
 1048      02435000 
 1048      00BF
 1049 21e0 47F8046D 		_NEXT
 1050 21e4 04F14406 	
 1051 21e8 46E4     	/****************************
ARM GAS  forth.s 			page 94


 1052              	   FCP ( -- a )
 1053              	  Point ot top of Forth 
 1054              	  system dictionary
 1055              	****************************/
 1056              		_HEADER FCP,3,"FCP"
 1057              		_PUSH 
 1058 21ea DA210000 		ADD TOS,UP,#FORTH_CTOP 
 1058      03464350 
 1058      00BF
 1059 21f4 47F8046D 		_NEXT 
 1060 21f8 04F14006 	
 1061 21fc 3CE4     	/***************************
 1062              	    LAST	( -- a )
 1063              	 	Point to the last name 
 1064              		in the name dictionary.
 1065              	***************************/
 1066              		_HEADER LAST,4,"LAST"
 1067              		_PUSH
 1068 21fe EE210000 		ADD	TOS,UP,#LASTN
 1068      044C4153 
 1068      5400
 1069 2208 47F8046D 		_NEXT
 1070 220c 04F14806 	
 1071 2210 32E4     	
 1072              	/***********************
 1073              		system constants 
 1074              	***********************/
 1075              	
 1076              	/********************************
 1077              		USER-BEGIN ( -- a )
 1078              	  where user area begin in RAM
 1079              	********************************/
 1080              		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1081              		_PUSH 
 1082 2212 02220000 		ldr TOS,USR_BGN_ADR 
 1082      0A555345 
 1082      522D4245 
 1082      47494E00 
 1082      00BF
 1083 2224 47F8046D 		_NEXT 
 1084 2228 004E     	USR_BGN_ADR:
 1085 222a 25E4     	.word  DTOP 
 1086              	
 1087 222c 12050020 	/*********************************
 1088              	  USER_END ( -- a )
 1089              	  where user area end in RAM 
 1090              	******************************/
 1091              		_HEADER USER_END,8,"USER-END"
 1092              		_PUSH 
 1093 2230 16220000 		ldr TOS,USER_END_ADR 
 1093      08555345 
 1093      522D454E 
 1093      440000BF 
 1094 2240 47F8046D 		_NEXT 
 1095 2244 004E     	USER_END_ADR:
 1096 2246 17E4     		.word DEND 
 1097              	
ARM GAS  forth.s 			page 95


 1098 2248 FC800120 	
 1099              	/* *********************
 1100              	  Common functions
 1101              	***********************/
 1102              	
 1103              	/********************************
 1104              	    WITHIN	( u ul uh -- t )
 1105              	 	Return true if u is within 
 1106              		the range of ul and uh.
 1107              	********************************/
 1108              		_HEADER WITHI,6,"WITHIN"
 1109              		_NEST
 1110 224c 34220000 		_ADR	OVER
 1110      06574954 
 1110      48494E00 
 1111 2258 504700BF 		_ADR	SUBB
 1112 225c 4D1D0000 		_ADR	TOR
 1113 2260 FD1D0000 		_ADR	SUBB
 1114 2264 D11C0000 		_ADR	RFROM
 1115 2268 FD1D0000 		_ADR	ULESS
 1116 226c A91C0000 		_UNNEST
 1117 2270 F51F0000 	
 1118 2274 7F1A0000 	//  Divide
 1119              	
 1120              	/*************************************
 1121              	    UM/MOD	( udl udh u -- ur uq )
 1122              	 	Unsigned divide of a double by a 
 1123              		single. Return mod and quotient.
 1124              	**************************************/
 1125              		_HEADER UMMOD,6,"UM/MOD"
 1126              		MOV	T3,#1
 1127 2278 50220000 		LDR	WP,[DSP],#4
 1127      06554D2F 
 1127      4D4F4400 
 1128 2284 4FF00103 		LDR	T2,[DSP]
 1129 2288 57F8045B 	UMMOD0:
 1130 228c 3A68     		ADDS	T2,T2,T2
 1131              		ADCS	WP,WP,WP
 1132 228e 9218     		BCC	UMMOD1
 1133 2290 6D41     		SUB	WP,WP,TOS
 1134 2292 04D3     		ADD	T2,T2,#1
 1135 2294 A5EB0605 		B UMMOD2
 1136 2298 02F10102 	UMMOD1:
 1137 229c 04E0     		SUBS	WP,WP,TOS 
 1138              		IT CS 
 1139 229e AD1B     		ADDCS	T2,T2,#1
 1140 22a0 28BF     		BCS	UMMOD2
 1141 22a2 0132     		ADD	WP,WP,TOS
 1142 22a4 00D2     	UMMOD2:
 1143 22a6 3544     		ADDS	T3,T3,T3
 1144              		BCC	UMMOD0
 1145 22a8 DB18     		MOV	TOS,T2
 1146 22aa F0D3     		STR	WP,[DSP]
 1147 22ac 1646     		_NEXT
 1148 22ae 3D60     	
 1149 22b0 FFF7E2BB 	/****************************
 1150              	    M/MOD	( d n -- r q )
ARM GAS  forth.s 			page 96


 1151              	 	Signed floored divide 
 1152              		of double by single. 
 1153              		Return mod and quotient.
 1154              	****************************/
 1155              		_HEADER MSMOD,5,"M/MOD"
 1156              		_NEST
 1157 22b4 7C220000 		_ADR	DUPP
 1157      054D2F4D 
 1157      4F4400BF 
 1158 22c0 504700BF 		_ADR	ZLESS
 1159 22c4 291D0000 		_ADR	DUPP
 1160 22c8 5D1D0000 		_ADR	TOR
 1161 22cc 291D0000 		_QBRAN MMOD1
 1162 22d0 D11C0000 		_ADR	NEGAT
 1163 22d4 371C0000 		_ADR	TOR
 1163      EC220000 
 1164 22dc A51F0000 		_ADR	DNEGA
 1165 22e0 D11C0000 		_ADR	RFROM
 1166 22e4 C5200000 	MMOD1:
 1167 22e8 A91C0000 		_ADR	TOR
 1168              		_ADR	DUPP
 1169 22ec D11C0000 		_ADR	ZLESS
 1170 22f0 291D0000 		_QBRAN MMOD2
 1171 22f4 5D1D0000 		_ADR	RAT
 1172 22f8 371C0000 		_ADR	PLUS
 1172      08230000 
 1173 2300 BD1C0000 	MMOD2:
 1174 2304 ED1D0000 		_ADR	RFROM
 1175              		_ADR	UMMOD
 1176 2308 A91C0000 		_ADR	RFROM
 1177 230c 85220000 		_QBRAN	MMOD3
 1178 2310 A91C0000 		_ADR	SWAP
 1179 2314 371C0000 		_ADR	NEGAT
 1179      28230000 
 1180 231c 391D0000 		_ADR	SWAP
 1181 2320 A51F0000 	MMOD3:   
 1182 2324 391D0000 		_UNNEST
 1183              	
 1184 2328 7F1A0000 	/****************************
 1185              	   /MOD	( n n -- r q )
 1186              		Signed divide. Return
 1187              		mod and quotient.
 1188              	****************************/
 1189              		_HEADER SLMOD,4,"/MOD"
 1190              		_NEST
 1191 232c B8220000 		_ADR	OVER
 1191      042F4D4F 
 1191      440000BF 
 1192 2338 504700BF 		_ADR	ZLESS
 1193 233c 4D1D0000 		_ADR	SWAP
 1194 2340 5D1D0000 		_ADR	MSMOD
 1195 2344 391D0000 		_UNNEST
 1196 2348 C1220000 	
 1197 234c 7F1A0000 	/**************************
 1198              	    MOD	 ( n n -- r )
 1199              	 	Signed divide. Return
 1200              		mod only.
ARM GAS  forth.s 			page 97


 1201              	**************************/
 1202              		_HEADER MODD,3,"MOD"
 1203              		_NEST
 1204 2350 30230000 		_ADR	SLMOD
 1204      034D4F44 
 1205 2358 504700BF 		_ADR	DROP
 1206 235c 39230000 		_UNNEST
 1207 2360 191D0000 	
 1208 2364 7F1A0000 	/*************************
 1209              	    /	   ( n n -- q )
 1210              	 	Signed divide. Return
 1211              		quotient only.
 1212              	**************************/
 1213              		_HEADER SLASH,1,"/"
 1214              		_NEST
 1215 2368 54230000 		_ADR	SLMOD
 1215      012F00BF 
 1216 2370 504700BF 		_ADR	SWAP
 1217 2374 39230000 		_ADR	DROP
 1218 2378 391D0000 		_UNNEST
 1219 237c 191D0000 	
 1220 2380 7F1A0000 	//******************************
 1221              	//  */MOD	( n1 n2 n3 -- r q )
 1222              	/* 	Multiply n1 and n2, then 
 1223              		divide by n3. Return 
 1224              		mod and quotient.
 1225              	******************************/
 1226              		_HEADER SSMOD,5,"*/MOD"
 1227              		_NEST
 1228 2384 6C230000 		_ADR	TOR
 1228      052A2F4D 
 1228      4F4400BF 
 1229 2390 504700BF 		_ADR	MSTAR
 1230 2394 D11C0000 		_ADR	RFROM
 1231 2398 351E0000 		_ADR	MSMOD
 1232 239c A91C0000 		_UNNEST
 1233 23a0 C1220000 	
 1234 23a4 7F1A0000 	//*******************************
 1235              	//  */ ( n1 n2 n3 -- q )
 1236              	/* 	Multiply n1 by n2, then 
 1237              		divide by n3. Return quotient
 1238              		only.
 1239              	*******************************/
 1240              		_HEADER STASL,2,"*/"
 1241              		_NEST
 1242 23a8 88230000 		_ADR	SSMOD
 1242      022A2F00 
 1243 23b0 504700BF 		_ADR	SWAP
 1244 23b4 91230000 		_ADR	DROP
 1245 23b8 391D0000 		_UNNEST
 1246 23bc 191D0000 	
 1247 23c0 7F1A0000 	/*******************
 1248              	  Miscellaneous
 1249              	*******************/
 1250              	
 1251              	/*************************
 1252              	    ALIGNED	( b -- a )
ARM GAS  forth.s 			page 98


 1253              	 	Align address to the 
 1254              		cell boundary.
 1255              	**************************/
 1256              		_HEADER ALGND,7,"ALIGNED"
 1257              		ADD	TOS,TOS,#3
 1258 23c4 AC230000 		MVN	WP,#3
 1258      07414C49 
 1258      474E4544 
 1259 23d0 06F10306 		AND	TOS,TOS,WP
 1260 23d4 6FF00305 		_NEXT
 1261 23d8 06EA0506 	
 1262 23dc FFF74CBB 	/****************************
 1263              	    >CHAR	( c -- c )
 1264              	 	Filter non-printing 
 1265              		characters.
 1266              	****************************/
 1267              		_HEADER TCHAR,5,">CHAR"
 1268              		_NEST
 1269 23e0 C8230000 		_DOLIT  0x7F
 1269      053E4348 
 1269      415200BF 
 1270 23ec 504700BF 		_ADR	ANDD
 1271 23f0 F71B0000 		_ADR	DUPP	// mask msb
 1271      7F000000 
 1272 23f8 6D1D0000 		_ADR	BLANK
 1273 23fc 291D0000 		_DOLIT 	127
 1274 2400 A91E0000 		_ADR	WITHI	// check for printable
 1275 2404 F71B0000 		_ADR	INVER
 1275      7F000000 
 1276 240c 59220000 		_QBRAN	TCHA1
 1277 2410 911F0000 		_ADR	DROP
 1278 2414 371C0000 		_DOLIT 	'_'	// replace non-printables
 1278      28240000 
 1279 241c 191D0000 	TCHA1:
 1280 2420 F71B0000 		  _UNNEST
 1280      5F000000 
 1281              	
 1282 2428 7F1A0000 	/************************
 1283              	    DEPTH	( -- n )
 1284              	 	Return the depth of
 1285              		the data stack.
 1286              	***********************/
 1287              		_HEADER DEPTH,5,"DEPTH"
 1288              		_MOV32 T2,SPP 
 1289 242c E4230000 		SUB	T2,T2,DSP
 1289      05444550 
 1289      544800BF 
 1290 2438 4FF47F42 		_PUSH
 1290      C2F20102 
 1291 2440 A2EB0702 		ASR	TOS,T2,#2
 1292 2444 47F8046D 		_NEXT
 1293 2448 4FEAA206 	
 1294 244c FFF714BB 	/*****************************
 1295              	    PICK	( ... +n -- ... w )
 1296              	 	Copy the nth stack item 
 1297              		to tos.
 1298              	******************************/
ARM GAS  forth.s 			page 99


 1299              		_HEADER PICK,4,"PICK"
 1300              		_NEST
 1301 2450 30240000 		_ADR	ONEP
 1301      04504943 
 1301      4B0000BF 
 1302 245c 504700BF 		_ADR	CELLS
 1303 2460 491E0000 		_ADR	SPAT
 1304 2464 BD1E0000 		_ADR	PLUS
 1305 2468 051D0000 		_ADR	AT
 1306 246c ED1D0000 		_UNNEST
 1307 2470 7D1C0000 	
 1308 2474 7F1A0000 	/*********************
 1309              	  Memory access
 1310              	*********************/
 1311              	
 1312              	/*************************
 1313              	    HERE	( -- a )
 1314              	 	Return the top of
 1315              		the code dictionary.
 1316              	*************************/
 1317              		_HEADER HERE,4,"HERE"
 1318              		_NEST
 1319 2478 54240000 		_ADR	CPP
 1319      04484552 
 1319      450000BF 
 1320 2484 504700BF 		_ADR	AT
 1321 2488 E1210000 		_UNNEST
 1322 248c 7D1C0000 	
 1323 2490 7F1A0000 	/***************************	
 1324              	    PAD	 ( -- a )
 1325              	 	Return the address of 
 1326              		a temporary buffer.
 1327              	***************************/
 1328              		_HEADER PAD,3,"PAD"
 1329              		_NEST
 1330 2494 7C240000 		_ADR	HERE
 1330      03504144 
 1331 249c 504700BF 		_DOLIT 80
 1332 24a0 85240000 		_ADR PLUS 
 1333 24a4 F71B0000 		_UNNEST
 1333      50000000 
 1334 24ac ED1D0000 	
 1335 24b0 7F1A0000 	/***********************
 1336              	    TIB	 ( -- a )
 1337              	 	Return the address 
 1338              		of the terminal 
 1339              		input buffer.
 1340              	************************/
 1341              		_HEADER TIB,3,"TIB"
 1342              		_PUSH
 1343 24b4 98240000 		ldr TOS,[UP,#TIBUF]
 1343      03544942 
 1344 24bc 47F8046D 		_NEXT
 1345 24c0 266B     	
 1346 24c2 FFF7D9BA 	/*************************
 1347              	    @EXECUTE	( a -- )
 1348              	 	Execute vector stored
ARM GAS  forth.s 			page 100


 1349              		in address a.
 1350              	*************************/
 1351              		_HEADER ATEXE,8,"@EXECUTE"
 1352              		MOVS	WP,TOS
 1353 24c6 B8240000 		_POP
 1353      08404558 
 1353      45435554 
 1353      4500
 1354 24d4 3500     		LDR	WP,[WP]
 1355 24d6 57F8046B 		ORR	WP,WP,#1
 1356 24da 2D68     	    IT NE 
 1357 24dc 45F00105 		BXNE	WP
 1358 24e0 18BF     		_NEXT
 1359 24e2 2847     	
 1360 24e4 FFF7C8BA 	/*******************************
 1361              	    CMOVE	( b1 b2 u -- )
 1362              	 	Copy u bytes from b1 to b2.
 1363              	********************************/
 1364              		_HEADER CMOVE,5,"CMOVE"
 1365              		LDR	T2,[DSP],#4
 1366 24e8 CA240000 		LDR	T3,[DSP],#4
 1366      05434D4F 
 1366      564500BF 
 1367 24f4 57F8042B 		B CMOV1
 1368 24f8 57F8043B 	CMOV0:
 1369 24fc 03E0     		LDRB	WP,[T3],#1
 1370              		STRB	WP,[T2],#1
 1371 24fe 13F8015B 	CMOV1:
 1372 2502 02F8015B 		MOVS	TOS,TOS
 1373              		BEQ	CMOV2
 1374 2506 3600     		SUB	TOS,TOS,#1
 1375 2508 02D0     		B CMOV0
 1376 250a A6F10106 	CMOV2:
 1377 250e F6E7     		_POP
 1378              		_NEXT
 1379 2510 57F8046B 	
 1380 2514 FFF7B0BA 	/***************************
 1381              	    MOVE	( a1 a2 u -- )
 1382              	 	Copy u words from a1 to a2.
 1383              	*******************************/
 1384              		_HEADER MOVE,4,"MOVE"
 1385              		MOV T0,#4 
 1386 2518 EC240000 		ADD TOS,#3 
 1386      044D4F56 
 1386      450000BF 
 1387 2524 4FF00400 		BIC TOS,#3
 1388 2528 06F10306 		LDR	T1,[DSP],#4 // dest
 1389 252c 26F00306 		LDR	T2,[DSP],#4 // src 
 1390 2530 57F8041B 		CMP T2,T1 
 1391 2534 57F8042B 		BPL MOVE1
 1392 2538 8A42     		MOV T0,#-4 
 1393 253a 08D5     		ADD T1,TOS
 1394 253c 6FF00300 		ADD T2,TOS 
 1395 2540 3144     		B MOVE3
 1396 2542 3244     	MOVE0:
 1397 2544 01E0     		LDR	WP,[T2]
 1398              		STR	WP,[T1]
ARM GAS  forth.s 			page 101


 1399 2546 1568     	MOVE3: 
 1400 2548 0D60     		ADD T1,T0 
 1401              		ADD T2,T0 
 1402 254a 0144     	MOVE1:
 1403 254c 0244     		MOVS TOS,TOS
 1404              		BEQ	MOVE2
 1405 254e 3600     		SUB	TOS,TOS,#4
 1406 2550 02D0     		B MOVE0
 1407 2552 A6F10406 	MOVE2:
 1408 2556 F6E7     		_POP
 1409              		_NEXT
 1410 2558 57F8046B 	
 1411 255c FFF78CBA 	/**************************
 1412              	    FILL	( b u c -- )
 1413              	 	Fill u bytes of character
 1414              		c to area beginning at b.
 1415              	******************************/
 1416              		_HEADER FILL,4,"FILL"
 1417              		LDMFD DSP!,{T0,T1} 
 1418 2560 1C250000 		MOVS T0,T0 
 1418      0446494C 
 1418      4C0000BF 
 1419 256c 03CF     		BEQ FILL2
 1420 256e 0000     	FILL1:
 1421 2570 03D0     		STRB	TOS,[T1],#1
 1422              		SUBS	T0,T0,#1
 1423 2572 01F8016B 		BNE FILL1
 1424 2576 0138     	FILL2:
 1425 2578 FBD1     		_POP
 1426              		_NEXT
 1427 257a 57F8046B 	
 1428 257e FFF77BBA 	/*****************************
 1429              	    PACK$	( b u a -- a )
 1430              	 	Build a counted word with
 1431              		u characters from b. 
 1432              		Null fill.
 1433              	*****************************/
 1434              		_HEADER PACKS,5,"PACK$"
 1435              		_NEST
 1436 2582 64250000 		_ADR	ALGND
 1436      05504143 
 1436      4B24
 1437 258c 504700BF 		_ADR	DUPP
 1438 2590 D1230000 		_ADR	TOR			// strings only on cell boundary
 1439 2594 291D0000 		_ADR	OVER
 1440 2598 D11C0000 		_ADR	PLUS
 1441 259c 4D1D0000 		_ADR	ONEP
 1442 25a0 ED1D0000 		_DOLIT 	0xFFFFFFFC
 1443 25a4 491E0000 		_ADR	ANDD			// count mod cell
 1444 25a8 F71B0000 		_DOLIT 	0
 1444      FCFFFFFF 
 1445 25b0 6D1D0000 		_ADR	SWAP
 1446 25b4 F71B0000 		_ADR	STORE			// null fill cell
 1446      00000000 
 1447 25bc 391D0000 		_ADR	RAT
 1448 25c0 691C0000 		_ADR	DDUP
 1449 25c4 BD1C0000 		_ADR	CSTOR
ARM GAS  forth.s 			page 102


 1450 25c8 611F0000 		_ADR	ONEP			// save count
 1451 25cc 891C0000 		_ADR	SWAP
 1452 25d0 491E0000 		_ADR	CMOVE
 1453 25d4 391D0000 		_ADR	RFROM
 1454 25d8 F5240000 		_UNNEST   			// move string
 1455 25dc A91C0000 	
 1456 25e0 7F1A0000 	/***********************************
 1457              	  Numeric output, single precision
 1458              	***********************************/
 1459              	
 1460              	/**************************
 1461              	    DIGIT	( u -- c )
 1462              	 	Convert digit u to 
 1463              		a character.
 1464              	***************************/
 1465              		_HEADER DIGIT,5,"DIGIT"
 1466              		_NEST
 1467 25e4 86250000 		_DOLIT 9
 1467      05444947 
 1467      495400BF 
 1468 25f0 504700BF 		_ADR	OVER
 1469 25f4 F71B0000 		_ADR	LESS
 1469      09000000 
 1470 25fc 4D1D0000 		_DOLIT	7
 1471 2600 0D200000 		_ADR	ANDD
 1472 2604 F71B0000 		_ADR	PLUS
 1472      07000000 
 1473 260c 6D1D0000 		_DOLIT	'0'
 1474 2610 ED1D0000 		_ADR	PLUS 
 1475 2614 F71B0000 		_UNNEST
 1475      30000000 
 1476 261c ED1D0000 	
 1477 2620 7F1A0000 	/*********************************
 1478              	    EXTRACT	( n base -- n c )
 1479              	 	Extract the least significant
 1480              		digit from n.
 1481              	**********************************/
 1482              		_HEADER EXTRC,7,"EXTRACT"
 1483              		_NEST
 1484 2624 E8250000 		_DOLIT 0
 1484      07455854 
 1484      52414354 
 1485 2630 504700BF 		_ADR	SWAP
 1486 2634 F71B0000 		_ADR	UMMOD
 1486      00000000 
 1487 263c 391D0000 		_ADR	SWAP
 1488 2640 85220000 		_ADR	DIGIT
 1489 2644 391D0000 		_UNNEST
 1490 2648 F1250000 	
 1491 264c 7F1A0000 	/***************************
 1492              	    <#	  ( -- )
 1493              	 	Initiate the numeric
 1494              		output process.
 1495              	****************************/
 1496              		_HEADER BDIGS,2,"<#"
 1497              		_NEST
 1498 2650 28260000 		_ADR	PAD
ARM GAS  forth.s 			page 103


 1498      023C2300 
 1499 2658 504700BF 		_ADR	HLD
 1500 265c 9D240000 		_ADR	STORE
 1501 2660 B5210000 		_UNNEST
 1502 2664 691C0000 	
 1503 2668 7F1A0000 	/*********************************
 1504              	    HOLD	( c -- )
 1505              	 	Insert a character into the 
 1506              		numeric output string.
 1507              	**********************************/
 1508              		_HEADER HOLD,4,"HOLD"
 1509              		_NEST
 1510 266c 54260000 		_ADR	HLD
 1510      04484F4C 
 1510      440000BF 
 1511 2678 504700BF 		_ADR	AT
 1512 267c B5210000 		_ADR	ONEM
 1513 2680 7D1C0000 		_ADR	DUPP
 1514 2684 591E0000 		_ADR	HLD
 1515 2688 291D0000 		_ADR	STORE
 1516 268c B5210000 		_ADR	CSTOR
 1517 2690 691C0000 		_UNNEST
 1518 2694 891C0000 	
 1519 2698 7F1A0000 	/***********************
 1520              	    #	   ( u -- u )
 1521              	 	Extract one digit 
 1522              		from u and append 
 1523              		the digit to output 
 1524              		string.
 1525              	*************************/
 1526              		_HEADER DIG,1,"#"
 1527              		_NEST
 1528 269c 70260000 		_ADR	BASE
 1528      012300BF 
 1529 26a4 504700BF 		_ADR	AT
 1530 26a8 45210000 		_ADR	EXTRC
 1531 26ac 7D1C0000 		_ADR	HOLD
 1532 26b0 31260000 		_UNNEST
 1533 26b4 79260000 	
 1534 26b8 7F1A0000 	/***************************
 1535              	    #S	  ( u -- 0 )
 1536              	 	Convert u until all 
 1537              		digits are added to 
 1538              		the output string.
 1539              	***************************/
 1540              		_HEADER DIGS,2,"#S"
 1541              		_NEST
 1542 26bc A0260000 	DIGS1:
 1542      02235300 
 1543 26c4 504700BF 	    _ADR	DIG
 1544              		_ADR	DUPP
 1545 26c8 A5260000 		_QBRAN 	DIGS2
 1546 26cc 291D0000 		_BRAN	DIGS1
 1547 26d0 371C0000 	DIGS2:
 1547      E0260000 
 1548 26d8 4B1C0000 		  _UNNEST
 1548      C8260000 
ARM GAS  forth.s 			page 104


 1549              	
 1550 26e0 7F1A0000 	/*********************
 1551              	    SIGN	( n -- )
 1552              	 	Add a minus sign
 1553              		to the numeric
 1554              		output string.
 1555              	*********************/
 1556              		_HEADER SIGN,4,"SIGN"
 1557              		_NEST
 1558 26e4 C0260000 		_ADR	ZLESS
 1558      04534947 
 1558      4E0000BF 
 1559 26f0 504700BF 		_QBRAN	SIGN1
 1560 26f4 5D1D0000 		_DOLIT '-'
 1561 26f8 371C0000 		_ADR	HOLD
 1561      0C270000 
 1562 2700 F71B0000 	SIGN1:
 1562      2D000000 
 1563 2708 79260000 		  _UNNEST
 1564              	
 1565 270c 7F1A0000 	/*************************
 1566              	    #>  ( w -- b u )
 1567              	 	Prepare the output 
 1568              		word to be TYPE'd.
 1569              	************************/
 1570              		_HEADER EDIGS,2,"#>"
 1571              		_NEST
 1572 2710 E8260000 		_ADR	DROP
 1572      02233E00 
 1573 2718 504700BF 		_ADR	HLD
 1574 271c 191D0000 		_ADR	AT
 1575 2720 B5210000 		_ADR	PAD
 1576 2724 7D1C0000 		_ADR	OVER
 1577 2728 9D240000 		_ADR	SUBB
 1578 272c 4D1D0000 		_UNNEST
 1579 2730 FD1D0000 	
 1580 2734 7F1A0000 	/**************************
 1581              	    str	 ( n -- b u )
 1582              	 	Convert a signed 
 1583              		integer to a numeric 
 1584              		string.
 1585              	hidden word used by compiler
 1586              	***************************/
 1587              	STRR:
 1588              		_NEST
 1589              		_ADR	DUPP
 1590 2738 504700BF 		_ADR	TOR
 1591 273c 291D0000 		_ADR	ABSS
 1592 2740 D11C0000 		_ADR	BDIGS
 1593 2744 B51F0000 		_ADR	DIGS
 1594 2748 59260000 		_ADR	RFROM
 1595 274c C5260000 		_ADR	SIGN
 1596 2750 A91C0000 		_ADR	EDIGS
 1597 2754 F1260000 		_UNNEST
 1598 2758 19270000 	
 1599 275c 7F1A0000 	/*************************
 1600              	    HEX	 ( -- )
ARM GAS  forth.s 			page 105


 1601              	 	Use radix 16 as 
 1602              		base for numeric 
 1603              		conversions.
 1604              	*************************/
 1605              		_HEADER HEX,3,"HEX"
 1606              		_NEST
 1607 2760 14270000 		_DOLIT 16
 1607      03484558 
 1608 2768 504700BF 		_ADR	BASE
 1609 276c F71B0000 		_ADR	STORE
 1609      10000000 
 1610 2774 45210000 		_UNNEST
 1611 2778 691C0000 	
 1612 277c 7F1A0000 	/************************
 1613              	    DECIMAL	( -- )
 1614              	 	Use radix 10 as base
 1615              		for numeric conversions.
 1616              	*************************/
 1617              		_HEADER DECIM,7,"DECIMAL"
 1618              		_NEST
 1619 2780 64270000 		_DOLIT 10
 1619      07444543 
 1619      494D414C 
 1620 278c 504700BF 		_ADR	BASE
 1621 2790 F71B0000 		_ADR	STORE
 1621      0A000000 
 1622 2798 45210000 		_UNNEST
 1623 279c 691C0000 	
 1624 27a0 7F1A0000 	/************************************
 1625              	  Numeric input, single precision
 1626              	***********************************/
 1627              	
 1628              	/***********************************
 1629              	    DIGIT?	( c base -- u t )
 1630              	 	Convert a character to its 
 1631              		numeric value. A flag 
 1632              		indicates success.
 1633              	**********************************/
 1634              		_HEADER DIGTQ,6,"DIGIT?"
 1635              		_NEST
 1636 27a4 84270000 		_ADR	TOR
 1636      06444947 
 1636      49543F00 
 1637 27b0 504700BF 		_DOLIT 	'0'
 1638 27b4 D11C0000 		_ADR	SUBB
 1639 27b8 F71B0000 		_DOLIT 9
 1639      30000000 
 1640 27c0 FD1D0000 		_ADR	OVER
 1641 27c4 F71B0000 		_ADR	LESS
 1641      09000000 
 1642 27cc 4D1D0000 		_QBRAN	DGTQ1
 1643 27d0 0D200000 		_DOLIT 7
 1644 27d4 371C0000 		_ADR	SUBB
 1644      FC270000 
 1645 27dc F71B0000 		_ADR	DUPP
 1645      07000000 
 1646 27e4 FD1D0000 		_DOLIT	10
ARM GAS  forth.s 			page 106


 1647 27e8 291D0000 		_ADR	LESS
 1648 27ec F71B0000 		_ADR	ORR
 1648      0A000000 
 1649 27f4 0D200000 	DGTQ1:
 1650 27f8 811D0000 		_ADR	DUPP
 1651              		_ADR	RFROM
 1652 27fc 291D0000 		_ADR	ULESS
 1653 2800 A91C0000 		_UNNEST
 1654 2804 F51F0000 	
 1655 2808 7F1A0000 	/**********************************
 1656              	    NUMBER?	( a -- n T | a F )
 1657              	 	Convert a number word to 
 1658              		integer. Push a flag on tos.
 1659              	**********************************/
 1660              		_HEADER NUMBQ,7,"NUMBER?"
 1661              		_NEST
 1662 280c A8270000 		_ADR	BASE
 1662      074E554D 
 1662      4245523F 
 1663 2818 504700BF 		_ADR	AT
 1664 281c 45210000 		_ADR	TOR
 1665 2820 7D1C0000 		_DOLIT	0
 1666 2824 D11C0000 		_ADR	OVER
 1667 2828 F71B0000 		_ADR	COUNT
 1667      00000000 
 1668 2830 4D1D0000 		_ADR	OVER
 1669 2834 AD200000 		_ADR	CAT
 1670 2838 4D1D0000 		_DOLIT '$'
 1671 283c 9D1C0000 		_ADR	EQUAL
 1672 2840 F71B0000 		_QBRAN	NUMQ1
 1672      24000000 
 1673 2848 DD1F0000 		_ADR	HEX
 1674 284c 371C0000 		_ADR	SWAP
 1674      68280000 
 1675 2854 69270000 		_ADR	ONEP
 1676 2858 391D0000 		_ADR	SWAP
 1677 285c 491E0000 		_ADR	ONEM
 1678 2860 391D0000 	NUMQ1:
 1679 2864 591E0000 		_ADR	OVER
 1680              		_ADR	CAT
 1681 2868 4D1D0000 		_DOLIT	'-'
 1682 286c 9D1C0000 		_ADR	EQUAL
 1683 2870 F71B0000 		_ADR	TOR
 1683      2D000000 
 1684 2878 DD1F0000 		_ADR	SWAP
 1685 287c D11C0000 		_ADR	RAT
 1686 2880 391D0000 		_ADR	SUBB
 1687 2884 BD1C0000 		_ADR	SWAP
 1688 2888 FD1D0000 		_ADR	RAT
 1689 288c 391D0000 		_ADR	PLUS
 1690 2890 BD1C0000 		_ADR	QDUP
 1691 2894 ED1D0000 		_QBRAN	NUMQ6
 1692 2898 FD1E0000 		_ADR	ONEM
 1693 289c 371C0000 		_ADR	TOR
 1693      30290000 
 1694 28a4 591E0000 	NUMQ2:
 1695 28a8 D11C0000 		_ADR	DUPP
ARM GAS  forth.s 			page 107


 1696              		_ADR	TOR
 1697 28ac 291D0000 		_ADR	CAT
 1698 28b0 D11C0000 		_ADR	BASE
 1699 28b4 9D1C0000 		_ADR	AT
 1700 28b8 45210000 		_ADR	DIGTQ
 1701 28bc 7D1C0000 		_QBRAN	NUMQ4
 1702 28c0 B1270000 		_ADR	SWAP
 1703 28c4 371C0000 		_ADR	BASE
 1703      14290000 
 1704 28cc 391D0000 		_ADR	AT
 1705 28d0 45210000 		_ADR	STAR
 1706 28d4 7D1C0000 		_ADR	PLUS
 1707 28d8 0D1E0000 		_ADR	RFROM
 1708 28dc ED1D0000 		_ADR	ONEP
 1709 28e0 A91C0000 		_DONXT	NUMQ2
 1710 28e4 491E0000 		_ADR	RAT
 1711 28e8 191C0000 		_ADR	SWAP
 1711      AC280000 
 1712 28f0 BD1C0000 		_ADR	DROP
 1713 28f4 391D0000 		_QBRAN	NUMQ3
 1714 28f8 191D0000 		_ADR	NEGAT
 1715 28fc 371C0000 	NUMQ3:
 1715      08290000 
 1716 2904 A51F0000 		_ADR	SWAP
 1717              		_BRAN	NUMQ5
 1718 2908 391D0000 	NUMQ4:
 1719 290c 4B1C0000 		_ADR	RFROM
 1719      2C290000 
 1720              		_ADR	RFROM
 1721 2914 A91C0000 		_ADR	DDROP
 1722 2918 A91C0000 		_ADR	DDROP
 1723 291c 391F0000 		_DOLIT	0
 1724 2920 391F0000 	NUMQ5:
 1725 2924 F71B0000 		_ADR	DUPP
 1725      00000000 
 1726              	NUMQ6:
 1727 292c 291D0000 		_ADR	RFROM
 1728              		_ADR	DDROP
 1729 2930 A91C0000 		_ADR	RFROM
 1730 2934 391F0000 		_ADR	BASE
 1731 2938 A91C0000 		_ADR	STORE
 1732 293c 45210000 		_UNNEST
 1733 2940 691C0000 	
 1734 2944 7F1A0000 	/********************
 1735              	  console I/O
 1736              	********************/
 1737              	
 1738              	/**********************
 1739              	    SPACE	( -- )
 1740              	 	Send the blank 
 1741              		character to 
 1742              		the output device.
 1743              	************************/
 1744              		_HEADER SPACE,5,"SPACE"
 1745              		_NEST
 1746 2948 10280000 		_ADR	BLANK
 1746      05535041 
ARM GAS  forth.s 			page 108


 1746      434500BF 
 1747 2954 504700BF 		_ADR	EMIT
 1748 2958 A91E0000 		_UNNEST
 1749 295c 011B0000 	
 1750 2960 7F1A0000 	/***************************
 1751              	    SPACES	( +n -- )
 1752              	 	Send n spaces to the 
 1753              		output device.
 1754              	****************************/
 1755              		_HEADER SPACS,6,"SPACES"
 1756              		_NEST
 1757 2964 4C290000 		_DOLIT	0
 1757      06535041 
 1757      43455300 
 1758 2970 504700BF 		_ADR	MAX
 1759 2974 F71B0000 		_ADR	TOR
 1759      00000000 
 1760 297c 3D200000 		_BRAN	CHAR2
 1761 2980 D11C0000 	CHAR1:
 1762 2984 4B1C0000 		_ADR	SPACE
 1762      90290000 
 1763              	CHAR2:
 1764 298c 55290000 		_DONXT	CHAR1
 1765              		_UNNEST
 1766 2990 191C0000 	
 1766      8C290000 
 1767 2998 7F1A0000 	/***********************
 1768              	    TYPE	( b u -- )
 1769              	 	Output u characters 
 1770              		from b.
 1771              	************************/
 1772              		_HEADER TYPEE,4,"TYPE"
 1773              		_NEST
 1774 299c 68290000 		_ADR  TOR   // ( a+1 -- R: u )
 1774      04545950 
 1774      450000BF 
 1775 29a8 504700BF 		_BRAN	TYPE2
 1776 29ac D11C0000 	TYPE1:  
 1777 29b0 4B1C0000 		_ADR  COUNT
 1777      C4290000 
 1778              		_ADR TCHAR
 1779 29b8 AD200000 		_ADR EMIT
 1780 29bc ED230000 	TYPE2:  
 1781 29c0 011B0000 		_DONXT	TYPE1
 1782              		_ADR	DROP
 1783 29c4 191C0000 		_UNNEST
 1783      B8290000 
 1784 29cc 191D0000 	
 1785 29d0 7F1A0000 	/***************************
 1786              	    CR	  ( -- )
 1787              	 	Output a carriage return
 1788              		and a line feed.
 1789              	****************************/
 1790              		_HEADER CR,2,"CR"
 1791              		_NEST
 1792 29d4 A0290000 		_DOLIT	CRR
 1792      02435200 
ARM GAS  forth.s 			page 109


 1793 29dc 504700BF 		_ADR	EMIT
 1794 29e0 F71B0000 		_DOLIT	LF
 1794      0D000000 
 1795 29e8 011B0000 		_ADR	EMIT
 1796 29ec F71B0000 		_UNNEST
 1796      0A000000 
 1797 29f4 011B0000 	
 1798 29f8 7F1A0000 	/******************************************
 1799              	  do_$	( -- a )
 1800              	  Return the address of a compiled string.
 1801              	  adjust return address to skip over it.
 1802              	hidden word used by compiler. 
 1803              	******************************************/
 1804              	DOSTR:
 1805              		_NEST     
 1806              	/* compiled string address is 2 levels deep */
 1807 29fc 504700BF 		_ADR	RFROM	// { -- a1 }
 1808              		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1809 2a00 A91C0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1810 2a04 A91C0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1811 2a08 291D0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1812 2a0c AD200000 		_ADR	ALGND	//  end of string
 1813 2a10 ED1D0000 	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1814 2a14 D1230000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1815              		_ADR	SWAP	//  count tugged
 1816 2a18 D11C0000 		_ADR	TOR     //  ( -- a2) is string address
 1817 2a1c 391D0000 		_UNNEST
 1818 2a20 D11C0000 	
 1819 2a24 7F1A0000 	/******************************************
 1820              	    $"|	( -- a )
 1821              	 	Run time routine compiled by _". 
 1822              		Return address of a compiled string.
 1823              	hidden word used by compiler
 1824              	*****************************************/
 1825              	STRQP:
 1826              		_NEST
 1827              		_ADR	DOSTR
 1828 2a28 504700BF 		_UNNEST			// force a call to dostr
 1829 2a2c FD290000 	
 1830 2a30 7F1A0000 	/*******************************
 1831              	    .$	( a -- )
 1832              	 	Run time routine of ." 
 1833              		Output a compiled string.
 1834              	hidden word used by compiler
 1835              	*******************************/
 1836              	DOTST:
 1837              		_NEST
 1838              		_ADR	COUNT // ( -- a+1 c )
 1839 2a34 504700BF 		_ADR	TYPEE
 1840 2a38 AD200000 		_UNNEST
 1841 2a3c A9290000 	
 1842 2a40 7F1A0000 	/**********************
 1843              	    ."|	( -- )
 1844              	 	Run time routine of ." 
 1845              		Output a compiled string.
 1846              	hidden word used by compiler
 1847              	*****************************/
ARM GAS  forth.s 			page 110


 1848              	DOTQP:
 1849              		_NEST
 1850              		_ADR	DOSTR
 1851 2a44 504700BF 		_ADR	DOTST
 1852 2a48 FD290000 		_UNNEST
 1853 2a4c 352A0000 	
 1854 2a50 7F1A0000 	/******************************
 1855              	    .R	  ( n +n -- )
 1856              	 	Display an integer in a 
 1857              		field of n columns, 
 1858              		right justified.
 1859              	*******************************/
 1860              		_HEADER DOTR,2,".R"
 1861              		_NEST
 1862 2a54 D8290000 		_ADR	TOR
 1862      022E5200 
 1863 2a5c 504700BF 		_ADR	STRR
 1864 2a60 D11C0000 		_ADR	RFROM
 1865 2a64 39270000 		_ADR	OVER
 1866 2a68 A91C0000 		_ADR	SUBB
 1867 2a6c 4D1D0000 		_ADR	SPACS
 1868 2a70 FD1D0000 		_ADR	TYPEE
 1869 2a74 71290000 		_UNNEST
 1870 2a78 A9290000 	
 1871 2a7c 7F1A0000 	/*************************
 1872              	    U.R	 ( u +n -- )
 1873              	 	Display an unsigned 
 1874              		integer in n column, 
 1875              		right justified.
 1876              	***************************/
 1877              		_HEADER UDOTR,3,"U.R"
 1878              		_NEST
 1879 2a80 582A0000 		_ADR	TOR
 1879      03552E52 
 1880 2a88 504700BF 		_ADR	BDIGS
 1881 2a8c D11C0000 		_ADR	DIGS
 1882 2a90 59260000 		_ADR	EDIGS
 1883 2a94 C5260000 		_ADR	RFROM
 1884 2a98 19270000 		_ADR	OVER
 1885 2a9c A91C0000 		_ADR	SUBB
 1886 2aa0 4D1D0000 		_ADR	SPACS
 1887 2aa4 FD1D0000 		_ADR	TYPEE
 1888 2aa8 71290000 		_UNNEST
 1889 2aac A9290000 	
 1890 2ab0 7F1A0000 	/************************
 1891              	    U.	  ( u -- )
 1892              	 	Display an unsigned 
 1893              		integer in free format.
 1894              	***************************/
 1895              		_HEADER UDOT,2,"U."
 1896              		_NEST
 1897 2ab4 842A0000 		_ADR	BDIGS
 1897      02552E00 
 1898 2abc 504700BF 		_ADR	DIGS
 1899 2ac0 59260000 		_ADR	EDIGS
 1900 2ac4 C5260000 		_ADR	SPACE
 1901 2ac8 19270000 		_ADR	TYPEE
ARM GAS  forth.s 			page 111


 1902 2acc 55290000 		_UNNEST
 1903 2ad0 A9290000 	
 1904 2ad4 7F1A0000 	/************************
 1905              	    .	   ( w -- )
 1906              	 	Display an integer 
 1907              		in free format, 
 1908              		preceeded by a space.
 1909              	**************************/
 1910              		_HEADER DOT,1,"."
 1911              		_NEST
 1912 2ad8 B82A0000 		_ADR	BASE
 1912      012E00BF 
 1913 2ae0 504700BF 		_ADR	AT
 1914 2ae4 45210000 		_DOLIT 10
 1915 2ae8 7D1C0000 		_ADR	XORR			// ?decimal
 1916 2aec F71B0000 		_QBRAN	DOT1
 1916      0A000000 
 1917 2af4 951D0000 		_ADR	UDOT
 1918 2af8 371C0000 		_UNNEST			// no,display unsigned
 1918      082B0000 
 1919 2b00 BD2A0000 	DOT1:
 1920 2b04 7F1A0000 	    _ADR	STRR
 1921              		_ADR	SPACE
 1922 2b08 39270000 		_ADR	TYPEE
 1923 2b0c 55290000 		_UNNEST			// yes, display signed
 1924 2b10 A9290000 	
 1925 2b14 7F1A0000 	/***********************
 1926              		.H ( w -- )
 1927              		display integer 
 1928              		in hexadecimal 
 1929              	*********************/
 1930              		_HEADER DOTH,2,".H"
 1931              		_NEST 
 1932 2b18 DC2A0000 		_ADR BASE
 1932      022E4800 
 1933 2b20 504700BF 		_ADR AT 
 1934 2b24 45210000 		_ADR SWAP
 1935 2b28 7D1C0000 		_ADR HEX
 1936 2b2c 391D0000 		_ADR UDOT 
 1937 2b30 69270000 		_ADR BASE
 1938 2b34 BD2A0000 		_ADR STORE  
 1939 2b38 45210000 		_UNNEST 
 1940 2b3c 691C0000 	
 1941 2b40 7F1A0000 	
 1942              	/***********************
 1943              	    ?	   ( a -- )
 1944              	 	Display the contents
 1945              		in a memory cell.
 1946              	*************************/
 1947              		_HEADER QUEST,1,"?"
 1948              		_NEST
 1949 2b44 1C2B0000 		_ADR	AT
 1949      013F00BF 
 1950 2b4c 504700BF 		_ADR	DOT
 1951 2b50 7D1C0000 		_UNNEST
 1952 2b54 E12A0000 	
 1953 2b58 7F1A0000 	/**************
ARM GAS  forth.s 			page 112


 1954              	  Parsing
 1955              	***************/
 1956              	
 1957              	/*********************************************
 1958              	    parse	( b u c -- b u delta //  string> )
 1959              	 	Scan word delimited by c. 
 1960              		Return found string and its offset.
 1961              	hidden word used by PARSE
 1962              	**********************************************/
 1963              	PARS:
 1964              		_NEST
 1965              		_ADR	TEMP
 1966 2b5c 504700BF 		_ADR	STORE
 1967 2b60 4F210000 		_ADR	OVER
 1968 2b64 691C0000 		_ADR	TOR
 1969 2b68 4D1D0000 		_ADR	DUPP
 1970 2b6c D11C0000 		_QBRAN	PARS8
 1971 2b70 291D0000 		_ADR	ONEM
 1972 2b74 371C0000 		_ADR	TEMP
 1972      702C0000 
 1973 2b7c 591E0000 		_ADR	AT
 1974 2b80 4F210000 		_ADR	BLANK
 1975 2b84 7D1C0000 		_ADR	EQUAL
 1976 2b88 A91E0000 		_QBRAN	PARS3
 1977 2b8c DD1F0000 		_ADR	TOR
 1978 2b90 371C0000 	PARS1:
 1978      E42B0000 
 1979 2b98 D11C0000 		_ADR	BLANK
 1980              		_ADR	OVER
 1981 2b9c A91E0000 		_ADR	CAT			// skip leading blanks 
 1982 2ba0 4D1D0000 		_ADR	SUBB
 1983 2ba4 9D1C0000 		_ADR	ZLESS
 1984 2ba8 FD1D0000 		_ADR	INVER
 1985 2bac 5D1D0000 		_QBRAN	PARS2
 1986 2bb0 911F0000 		_ADR	ONEP
 1987 2bb4 371C0000 		_DONXT	PARS1
 1987      E02B0000 
 1988 2bbc 491E0000 		_ADR	RFROM
 1989 2bc0 191C0000 		_ADR	DROP
 1989      9C2B0000 
 1990 2bc8 A91C0000 		_DOLIT	0
 1991 2bcc 191D0000 		_ADR	DUPP
 1992 2bd0 F71B0000 		_UNNEST
 1992      00000000 
 1993 2bd8 291D0000 	PARS2:
 1994 2bdc 7F1A0000 		_ADR	RFROM
 1995              	PARS3:
 1996 2be0 A91C0000 		_ADR	OVER
 1997              		_ADR	SWAP
 1998 2be4 4D1D0000 		_ADR	TOR
 1999 2be8 391D0000 	PARS4:
 2000 2bec D11C0000 		_ADR	TEMP
 2001              		_ADR	AT
 2002 2bf0 4F210000 		_ADR	OVER
 2003 2bf4 7D1C0000 		_ADR	CAT
 2004 2bf8 4D1D0000 		_ADR	SUBB			// scan for delimiter
 2005 2bfc 9D1C0000 		_ADR	TEMP
ARM GAS  forth.s 			page 113


 2006 2c00 FD1D0000 		_ADR	AT
 2007 2c04 4F210000 		_ADR	BLANK
 2008 2c08 7D1C0000 		_ADR	EQUAL
 2009 2c0c A91E0000 		_QBRAN	PARS5
 2010 2c10 DD1F0000 		_ADR	ZLESS
 2011 2c14 371C0000 	PARS5:
 2011      202C0000 
 2012 2c1c 5D1D0000 		_QBRAN	PARS6
 2013              		_ADR	ONEP
 2014 2c20 371C0000 		_DONXT	PARS4
 2014      442C0000 
 2015 2c28 491E0000 		_ADR	DUPP
 2016 2c2c 191C0000 		_ADR	TOR
 2016      F02B0000 
 2017 2c34 291D0000 		_BRAN	PARS7
 2018 2c38 D11C0000 	PARS6:
 2019 2c3c 4B1C0000 		_ADR	RFROM
 2019      582C0000 
 2020              		_ADR	DROP
 2021 2c44 A91C0000 		_ADR	DUPP
 2022 2c48 191D0000 		_ADR	ONEP
 2023 2c4c 291D0000 		_ADR	TOR
 2024 2c50 491E0000 	PARS7:
 2025 2c54 D11C0000 		_ADR	OVER
 2026              		_ADR	SUBB
 2027 2c58 4D1D0000 		_ADR	RFROM
 2028 2c5c FD1D0000 		_ADR	RFROM
 2029 2c60 A91C0000 		_ADR	SUBB
 2030 2c64 A91C0000 		_UNNEST
 2031 2c68 FD1D0000 	PARS8:
 2032 2c6c 7F1A0000 		_ADR	OVER
 2033              		_ADR	RFROM
 2034 2c70 4D1D0000 		_ADR	SUBB
 2035 2c74 A91C0000 		_UNNEST
 2036 2c78 FD1D0000 	
 2037 2c7c 7F1A0000 	/************************************
 2038              	    PARSE	( c -- b u //  string> )
 2039              	 	Scan input stream and return 
 2040              		counted string delimited by c.
 2041              	************************************/
 2042              		_HEADER PARSE,5,"PARSE"
 2043              		_NEST
 2044 2c80 482B0000 		_ADR	TOR
 2044      05504152 
 2044      534500BF 
 2045 2c8c 504700BF 		_ADR	TIB
 2046 2c90 D11C0000 		_ADR	INN
 2047 2c94 BD240000 		_ADR	AT
 2048 2c98 79210000 		_ADR	PLUS			// current input buffer pointer
 2049 2c9c 7D1C0000 		_ADR	NTIB
 2050 2ca0 ED1D0000 		_ADR	AT
 2051 2ca4 8D210000 		_ADR	INN
 2052 2ca8 7D1C0000 		_ADR	AT
 2053 2cac 79210000 		_ADR	SUBB			// remaining count
 2054 2cb0 7D1C0000 		_ADR	RFROM
 2055 2cb4 FD1D0000 		_ADR	PARS
 2056 2cb8 A91C0000 		_ADR	INN
ARM GAS  forth.s 			page 114


 2057 2cbc 5D2B0000 		_ADR	PSTOR
 2058 2cc0 79210000 		_UNNEST
 2059 2cc4 65200000 	
 2060 2cc8 7F1A0000 	/*******************************
 2061              	    .(	  ( -- )
 2062              	 	Output following string 
 2063              		up to next ) .
 2064              	******************************/
 2065              		_HEADER DOTPR,2,".("
 2066              		_NEST
 2067 2ccc 842C0000 		_DOLIT	')'
 2067      022E2800 
 2068 2cd4 504700BF 		_ADR	PARSE
 2069 2cd8 F71B0000 		_ADR	TYPEE
 2069      29000000 
 2070 2ce0 8D2C0000 		_UNNEST
 2071 2ce4 A9290000 	
 2072 2ce8 7F1A0000 	/************************
 2073              	    (	   ( -- )
 2074              	 	Ignore following 
 2075              		string up to next )
 2076              		A comment.
 2077              	************************/
 2078              		_HEADER PAREN,1,"("
 2079              		_NEST
 2080 2cec D02C0000 		_DOLIT	')'
 2080      012800BF 
 2081 2cf4 504700BF 		_ADR	PARSE
 2082 2cf8 F71B0000 		_ADR	DDROP
 2082      29000000 
 2083 2d00 8D2C0000 		_UNNEST
 2084 2d04 391F0000 	
 2085 2d08 7F1A0000 	/*******************
 2086              	    \	   ( -- )
 2087              	 	Ignore following 
 2088              		text till the 
 2089              		end of line.
 2090              	********************/
 2091              		_HEADER BKSLA,1,"\\"
 2092              		_NEST
 2093 2d0c F02C0000 		_ADR	NTIB
 2093      015C00BF 
 2094 2d14 504700BF 		_ADR	AT
 2095 2d18 8D210000 		_ADR	INN
 2096 2d1c 7D1C0000 		_ADR	STORE
 2097 2d20 79210000 		_UNNEST
 2098 2d24 691C0000 	
 2099 2d28 7F1A0000 	/******************************
 2100              	    CHAR	( -- c )
 2101              	 	Parse next word and
 2102              		return its first character.
 2103              	*******************************/
 2104              		_HEADER CHAR,4,"CHAR"
 2105              		_NEST
 2106 2d2c 102D0000 		_ADR	BLANK
 2106      04434841 
 2106      520000BF 
ARM GAS  forth.s 			page 115


 2107 2d38 504700BF 		_ADR	PARSE
 2108 2d3c A91E0000 		_ADR	DROP
 2109 2d40 8D2C0000 		_ADR	CAT
 2110 2d44 191D0000 		_UNNEST
 2111 2d48 9D1C0000 	
 2112 2d4c 7F1A0000 	/**********************************
 2113              	    WORD	( c -- a //  string> )
 2114              	 	Parse a word from input stream
 2115              		and copy it to code dictionary.
 2116              	***********************************/
 2117              		_HEADER WORDD,4,"WORD"
 2118              		_NEST
 2119 2d50 302D0000 		_ADR	PARSE
 2119      04574F52 
 2119      440000BF 
 2120 2d5c 504700BF 		_ADR	HERE
 2121 2d60 8D2C0000 		_ADR	CELLP
 2122 2d64 85240000 		_ADR	PACKS
 2123 2d68 891E0000 		_UNNEST
 2124 2d6c 8D250000 	
 2125 2d70 7F1A0000 	/********************************
 2126              	    TOKEN	( -- a //  string> )
 2127              	 	Parse a word from input 
 2128              		stream and copy it to 
 2129              		name dictionary.
 2130              	*********************************/
 2131              		_HEADER TOKEN,5,"TOKEN"
 2132              		_NEST
 2133 2d74 542D0000 		_ADR	BLANK
 2133      05544F4B 
 2133      454E00BF 
 2134 2d80 504700BF 		_ADR	WORDD
 2135 2d84 A91E0000 		_UNNEST
 2136 2d88 5D2D0000 	
 2137 2d8c 7F1A0000 	/**********************
 2138              	  Dictionary search
 2139              	***********************/
 2140              	
 2141              	/*************************
 2142              	    NAME>	( na -- ca )
 2143              	 	Return a code address
 2144              		given a name address.
 2145              	**************************/
 2146              		_HEADER NAMET,5,"NAME>"
 2147              		_NEST
 2148 2d90 782D0000 		_ADR	COUNT
 2148      054E414D 
 2148      453E00BF 
 2149 2d9c 504700BF 		_DOLIT	0x1F
 2150 2da0 AD200000 		_ADR	ANDD
 2151 2da4 F71B0000 		_ADR	PLUS
 2151      1F000000 
 2152 2dac 6D1D0000 		_ADR	ALGND
 2153 2db0 ED1D0000 		_UNNEST
 2154 2db4 D1230000 	
 2155 2db8 7F1A0000 	/***************************************
 2156              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
ARM GAS  forth.s 			page 116


 2157              	 	Compare u bytes in two strings. 
 2158              		Return 0 if identical.
 2159              	
 2160              	  Picatout 2020-12-01, 
 2161              	    Because of problem with .align 
 2162              		directive that doesn't fill 
 2163              		with zero's I had to change 
 2164              		the "SAME?" and "FIND" 
 2165              	 	words  to do a byte by byte comparison. 
 2166              	****************************************/
 2167              		_HEADER SAMEQ,5,"SAME?"
 2168              		_NEST
 2169 2dbc 942D0000 		_ADR	TOR
 2169      0553414D 
 2169      453F00BF 
 2170 2dc8 504700BF 		_BRAN	SAME2
 2171 2dcc D11C0000 	SAME1:
 2172 2dd0 4B1C0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2172      142E0000 
 2173              		_ADR	RAT   // a1 a2 a1 u 
 2174 2dd8 4D1D0000 		_ADR	PLUS  // a1 a2 a1+u 
 2175 2ddc BD1C0000 		_ADR	CAT	   // a1 a2 c1    		
 2176 2de0 ED1D0000 		_ADR	OVER  // a1 a2 c1 a2 
 2177 2de4 9D1C0000 		_ADR	RAT    
 2178 2de8 4D1D0000 		_ADR	PLUS    
 2179 2dec BD1C0000 		_ADR	CAT	  // a1 a2 c1 c2
 2180 2df0 ED1D0000 		_ADR	SUBB  
 2181 2df4 9D1C0000 		_ADR	QDUP
 2182 2df8 FD1D0000 		_QBRAN	SAME2
 2183 2dfc FD1E0000 		_ADR	RFROM
 2184 2e00 371C0000 		_ADR	DROP
 2184      142E0000 
 2185 2e08 A91C0000 		_UNNEST	// strings not equal
 2186 2e0c 191D0000 	SAME2:
 2187 2e10 7F1A0000 		_DONXT	SAME1
 2188              		_DOLIT	0
 2189 2e14 191C0000 		_UNNEST	// strings equal
 2189      D82D0000 
 2190 2e1c F71B0000 	
 2190      00000000 
 2191 2e24 7F1A0000 	/***********************************
 2192              	    FIND	( a na -- ca na | a F )
 2193              	 	Search a vocabulary for a string.
 2194              		Return ca and na if succeeded.
 2195              	hidden word used by NAME?
 2196              	
 2197              	  Picatout 2020-12-01,  
 2198              		 Modified from original. 
 2199              	   See comment for word "SAME?" 
 2200              	************************************/
 2201              	FIND:
 2202              		_NEST
 2203              		_ADR	SWAP			// na a	
 2204 2e28 504700BF 		_ADR	COUNT			// na a+1 count
 2205 2e2c 391D0000 		_ADR	DUPP 
 2206 2e30 AD200000 		_ADR	TEMP
 2207 2e34 291D0000 		_ADR	STORE			// na a+1 count 
ARM GAS  forth.s 			page 117


 2208 2e38 4F210000 		_ADR  TOR		// na a+1  R: count  
 2209 2e3c 691C0000 		_ADR	SWAP			// a+1 na
 2210 2e40 D11C0000 	FIND1:
 2211 2e44 391D0000 		_ADR	DUPP			// a+1 na na
 2212              		_QBRAN	FIND6	// end of vocabulary
 2213 2e48 291D0000 		_ADR	DUPP			// a+1 na na
 2214 2e4c 371C0000 		_ADR	CAT			// a+1 na name1
 2214      A02E0000 
 2215 2e54 291D0000 		_DOLIT	MASKK
 2216 2e58 9D1C0000 		_ADR	ANDD
 2217 2e5c F71B0000 		_ADR	RAT			// a+1 na name1 count 
 2217      1FFFFFFF 
 2218 2e64 6D1D0000 		_ADR	XORR			// a+1 na,  same length?
 2219 2e68 BD1C0000 		_QBRAN	FIND2
 2220 2e6c 951D0000 		_ADR	CELLM			// a+1 la
 2221 2e70 371C0000 		_ADR	AT			// a+1 next_na
 2221      882E0000 
 2222 2e78 991E0000 		_BRAN	FIND1			// try next word
 2223 2e7c 7D1C0000 	FIND2:   
 2224 2e80 4B1C0000 		_ADR	ONEP			// a+1 na+1
 2224      482E0000 
 2225              		_ADR	TEMP
 2226 2e88 491E0000 		_ADR	AT			// a+1 na+1 count
 2227 2e8c 4F210000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2228 2e90 7D1C0000 	FIND3:	
 2229 2e94 C92D0000 		_BRAN	FIND4
 2230              	FIND6:	
 2231 2e98 4B1C0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2231      B82E0000 
 2232              		_ADR	DROP			// a+1 0
 2233 2ea0 A91C0000 		_ADR	SWAP			// 0 a+1
 2234 2ea4 191D0000 		_ADR	ONEM			// 0 a
 2235 2ea8 391D0000 		_ADR	SWAP			// a 0 
 2236 2eac 591E0000 		_UNNEST			// return without a match
 2237 2eb0 391D0000 	FIND4:	
 2238 2eb4 7F1A0000 		_QBRAN	FIND5			// a+1 na+1
 2239              		_ADR	ONEM			// a+1 na
 2240 2eb8 371C0000 		_ADR	CELLM			// a+4 la
 2240      D42E0000 
 2241 2ec0 591E0000 		_ADR	AT			// a+1 next_na
 2242 2ec4 991E0000 		_BRAN	FIND1			// compare next name
 2243 2ec8 7D1C0000 	FIND5:	
 2244 2ecc 4B1C0000 		_ADR	RFROM			// a+1 na+1 count
 2244      482E0000 
 2245              		_ADR	DROP			// a+1 na+1
 2246 2ed4 A91C0000 		_ADR	SWAP			// na+1 a+1
 2247 2ed8 191D0000 		_ADR	DROP			// na+1
 2248 2edc 391D0000 		_ADR	ONEM			// na
 2249 2ee0 191D0000 		_ADR	DUPP			// na na
 2250 2ee4 591E0000 		_ADR	NAMET			// na ca
 2251 2ee8 291D0000 		_ADR	SWAP			// ca na
 2252 2eec 9D2D0000 		_UNNEST			//  return with a match
 2253 2ef0 391D0000 	
 2254 2ef4 7F1A0000 	/********************************
 2255              	    NAME?	( a -- ca na | a F )
 2256              	 	Search all context vocabularies 
 2257              		for a string.
ARM GAS  forth.s 			page 118


 2258              	***********************************/
 2259              		_HEADER NAMEQ,5,"NAME?"
 2260              		_NEST
 2261 2ef8 C02D0000 		_ADR	CNTXT
 2261      054E414D 
 2261      453F00BF 
 2262 2f04 504700BF 		_ADR	AT
 2263 2f08 CD210000 		_ADR	FIND
 2264 2f0c 7D1C0000 		_UNNEST
 2265 2f10 292E0000 	
 2266 2f14 7F1A0000 	/********************
 2267              	  console input
 2268              	********************/
 2269              	
 2270              	/**************************************
 2271              	   BKSP  ( bot eot cur -- bot eot cur )
 2272              	   Move cursor left by one character.
 2273              	hidden word used by KTAP
 2274              	***************************************/
 2275              	BKSP:
 2276              		_NEST
 2277              		_ADR	TOR
 2278 2f18 504700BF 		_ADR	OVER
 2279 2f1c D11C0000 		_ADR	RFROM
 2280 2f20 4D1D0000 		_ADR	SWAP
 2281 2f24 A91C0000 		_ADR	OVER
 2282 2f28 391D0000 		_ADR	XORR
 2283 2f2c 4D1D0000 		_QBRAN	BACK1
 2284 2f30 951D0000 		_DOLIT	BKSPP
 2285 2f34 371C0000 		_ADR	EMIT
 2285      602F0000 
 2286 2f3c F71B0000 		_ADR	ONEM
 2286      08000000 
 2287 2f44 011B0000 		_ADR	BLANK
 2288 2f48 591E0000 		_ADR	EMIT
 2289 2f4c A91E0000 		_DOLIT	BKSPP
 2290 2f50 011B0000 		_ADR	EMIT
 2291 2f54 F71B0000 	BACK1:
 2291      08000000 
 2292 2f5c 011B0000 		  _UNNEST
 2293              	
 2294 2f60 7F1A0000 	/****************************************
 2295              	   TAP	 ( bot eot cur c -- bot eot cur )
 2296              	   Accept and echo the key stroke 
 2297              	   and bump the cursor.
 2298              	hidden word used by KTAP 
 2299              	****************************************/
 2300              	TAP:
 2301              		_NEST
 2302              		_ADR	DUPP
 2303 2f64 504700BF 		_ADR	EMIT
 2304 2f68 291D0000 		_ADR	OVER
 2305 2f6c 011B0000 		_ADR	CSTOR
 2306 2f70 4D1D0000 		_ADR	ONEP
 2307 2f74 891C0000 		_UNNEST
 2308 2f78 491E0000 	
 2309 2f7c 7F1A0000 	/*******************************************
ARM GAS  forth.s 			page 119


 2310              	    kTAP	( bot eot cur c -- bot eot cur )
 2311              	 	Process a key stroke, CR or backspace.
 2312              	hidden word used by ACCEPT 
 2313              	*******************************************/
 2314              	KTAP:
 2315              	TTAP:
 2316              		_NEST
 2317              		_ADR	DUPP
 2318 2f80 504700BF 		_DOLIT	CRR
 2319 2f84 291D0000 		_ADR	XORR
 2320 2f88 F71B0000 		_QBRAN  KTAP2
 2320      0D000000 
 2321 2f90 951D0000 		_DOLIT	BKSPP
 2322 2f94 371C0000 		_ADR	XORR
 2322      C42F0000 
 2323 2f9c F71B0000 		_QBRAN	KTAP1
 2323      08000000 
 2324 2fa4 951D0000 		_ADR	BLANK
 2325 2fa8 371C0000 		_ADR	TAP
 2325      BC2F0000 
 2326 2fb0 A91E0000 		_UNNEST
 2327 2fb4 652F0000 	//	.word	0			// patch
 2328 2fb8 7F1A0000 	KTAP1:
 2329              		_ADR	BKSP
 2330              		_UNNEST
 2331 2fbc 192F0000 	KTAP2:
 2332 2fc0 7F1A0000 		_ADR	DROP
 2333              		_ADR	SWAP
 2334 2fc4 191D0000 		_ADR	DROP
 2335 2fc8 391D0000 		_ADR	DUPP
 2336 2fcc 191D0000 		_UNNEST
 2337 2fd0 291D0000 	
 2338 2fd4 7F1A0000 	/************************************
 2339              	    ACCEPT	( b u -- b u )
 2340              	 	Accept characters to input 
 2341              		buffer. Return with actual count.
 2342              	*************************************/
 2343              		_HEADER ACCEP,6,"ACCEPT"
 2344              		_NEST
 2345 2fd8 FC2E0000 		_ADR	OVER
 2345      06414343 
 2345      45505400 
 2346 2fe4 504700BF 		_ADR	PLUS
 2347 2fe8 4D1D0000 		_ADR	OVER
 2348 2fec ED1D0000 	ACCP1:
 2349 2ff0 4D1D0000 		_ADR	DDUP
 2350              		_ADR	XORR
 2351 2ff4 611F0000 		_QBRAN	ACCP4
 2352 2ff8 951D0000 		_ADR	KEY
 2353 2ffc 371C0000 		_ADR	DUPP
 2353      3C300000 
 2354 3004 DD1A0000 		_ADR	BLANK
 2355 3008 291D0000 		_DOLIT 127
 2356 300c A91E0000 		_ADR	WITHI
 2357 3010 F71B0000 		_QBRAN	ACCP2
 2357      7F000000 
 2358 3018 59220000 		_ADR	TAP
ARM GAS  forth.s 			page 120


 2359 301c 371C0000 		_BRAN	ACCP3
 2359      30300000 
 2360 3024 652F0000 	ACCP2:
 2361 3028 4B1C0000 		_ADR	KTAP
 2361      34300000 
 2362              	ACCP3:	  
 2363 3030 812F0000 		_BRAN	ACCP1
 2364              	ACCP4:
 2365 3034 4B1C0000 		_ADR	DROP
 2365      F42F0000 
 2366              		_ADR	OVER
 2367 303c 191D0000 		_ADR	SUBB
 2368 3040 4D1D0000 		_UNNEST
 2369 3044 FD1D0000 	
 2370 3048 7F1A0000 	/*****************************
 2371              	    QUERY	( -- )
 2372              	 	Accept input stream 
 2373              		to terminal input buffer.
 2374              	******************************/
 2375              		_HEADER QUERY,5,"QUERY"
 2376              		_NEST
 2377 304c DC2F0000 		_ADR	TIB
 2377      05515545 
 2377      525900BF 
 2378 3058 504700BF 		_DOLIT 80
 2379 305c BD240000 		_ADR	ACCEP
 2380 3060 F71B0000 		_ADR	NTIB
 2380      50000000 
 2381 3068 E52F0000 		_ADR	STORE
 2382 306c 8D210000 		_ADR	DROP
 2383 3070 691C0000 		_DOLIT	0
 2384 3074 191D0000 		_ADR	INN
 2385 3078 F71B0000 		_ADR	STORE
 2385      00000000 
 2386 3080 79210000 		_UNNEST
 2387 3084 691C0000 	
 2388 3088 7F1A0000 	/********************
 2389              	  Error handling
 2390              	********************/
 2391              	
 2392              	/*********************
 2393              	    ABORT	( a -- )
 2394              	 	Reset data stack 
 2395              		and jump to QUIT.
 2396              	**********************/
 2397              		_HEADER ABORT,5,"ABORT"
 2398              		_NEST
 2399 308c 50300000 	ABORT1:
 2399      0541424F 
 2399      525400BF 
 2400 3098 504700BF 		_ADR	SPACE
 2401              		_ADR	COUNT
 2402 309c 55290000 		_ADR	TYPEE
 2403 30a0 AD200000 		_DOLIT	0X3F
 2404 30a4 A9290000 		_ADR	EMIT
 2405 30a8 F71B0000 		_ADR	CR
 2405      3F000000 
ARM GAS  forth.s 			page 121


 2406 30b0 011B0000 		_ADR	PRESE
 2407 30b4 DD290000 		_BRAN	QUIT
 2408 30b8 21320000 	
 2409 30bc 4B1C0000 	/*******************************
 2409      40320000 
 2410              	    _abort"	( f -- )
 2411              	 	Run time routine of ABORT"
 2412              		Abort with a message.
 2413              	hidden used by compiler 
 2414              	********************************/
 2415              	ABORQ:
 2416              		_NEST
 2417              		_ADR	DOSTR
 2418 30c4 504700BF 		_ADR	SWAP 
 2419 30c8 FD290000 		_QBRAN	1f	// text flag
 2420 30cc 391D0000 		_BRAN	ABORT1
 2421 30d0 371C0000 	1:
 2421      E0300000 
 2422 30d8 4B1C0000 		_ADR	DROP
 2422      9C300000 
 2423              		_UNNEST			// drop error
 2424 30e0 191D0000 	
 2425 30e4 7F1A0000 	/************************
 2426              	  The text interpreter
 2427              	************************/
 2428              	
 2429              	/***************************
 2430              	    $INTERPRET  ( a -- )
 2431              	 	Interpret a word. 
 2432              		If failed, try to 
 2433              		convert it to an integer.
 2434              	******************************/
 2435              		_HEADER INTER,10,"$INTERPRET"
 2436              		_NEST
 2437 30e8 90300000 		_ADR	NAMEQ
 2437      0A24494E 
 2437      54455250 
 2437      52455400 
 2438 30f8 504700BF 		_ADR	QDUP	// ?defined
 2439 30fc 052F0000 		_QBRAN	INTE1
 2440 3100 FD1E0000 		_ADR	AT
 2441 3104 371C0000 		_DOLIT	COMPO
 2441      38310000 
 2442 310c 7D1C0000 		_ADR	ANDD	// ?compile only lexicon bits
 2443 3110 F71B0000 		_ABORQ	13," compile only"
 2443      40000000 
 2444 3118 6D1D0000 		_ADR	EXECU
 2445 311c C5300000 		_UNNEST			// execute defined word
 2445      0D20636F 
 2445      6D70696C 
 2445      65206F6E 
 2445      6C7900BF 
 2446 3130 0D1C0000 	INTE1:
 2447 3134 7F1A0000 		_ADR	NUMBQ
 2448              		_QBRAN	INTE2
 2449 3138 19280000 		_UNNEST
 2450 313c 371C0000 	INTE2:
ARM GAS  forth.s 			page 122


 2450      48310000 
 2451 3144 7F1A0000 		_ADR	ABORT	// error
 2452              	
 2453 3148 99300000 	/******************************
 2454              	    [	   ( -- )
 2455              	 	Start the text interpreter.
 2456              	*******************************/
 2457              		_HEADER LBRAC,1,"["
 2458              		_NEST
 2459 314c EC300000 		_DOLIT	INTER
 2459      015B00BF 
 2460 3154 504700BF 		_ADR	TEVAL
 2461 3158 F71B0000 		_ADR	STORE
 2461      F8300000 
 2462 3160 A1210000 		_UNNEST
 2463 3164 691C0000 	
 2464 3168 7F1A0000 	/**********************
 2465              	    .OK	 ( -- )
 2466              	 	Display "ok" only 
 2467              		while interpreting.
 2468              	************************/
 2469              		_HEADER DOTOK,3,".OK"
 2470              		_NEST
 2471 316c 50310000 		_DOLIT	INTER
 2471      032E4F4B 
 2472 3174 504700BF 		_ADR	TEVAL
 2473 3178 F71B0000 		_ADR	AT
 2473      F8300000 
 2474 3180 A1210000 		_ADR	EQUAL
 2475 3184 7D1C0000 		_QBRAN	DOTO1
 2476 3188 DD1F0000 		_DOTQP	3," ok"
 2477 318c 371C0000 	DOTO1:
 2477      9C310000 
 2478 3194 452A0000 		_ADR	CR
 2478      03206F6B 
 2479              		_UNNEST
 2480 319c DD290000 	
 2481 31a0 7F1A0000 	/*************************
 2482              	    ?STACK	( -- )
 2483              	 	Abort if the data 
 2484              		stack underflows.
 2485              	************************/
 2486              		_HEADER QSTAC,6,"?STACK"
 2487              		_NEST
 2488 31a4 70310000 		_ADR	DEPTH
 2488      063F5354 
 2488      41434B00 
 2489 31b0 504700BF 		_ADR	ZLESS	// check only for underflow
 2490 31b4 39240000 		_ABORQ	9,"underflow"
 2491 31b8 5D1D0000 		_UNNEST
 2492 31bc C5300000 	
 2492      09756E64 
 2492      6572666C 
 2492      6F7700BF 
 2493 31cc 7F1A0000 	/*******************
 2494              	    EVAL	( -- )
 2495              	 	Interpret the 
ARM GAS  forth.s 			page 123


 2496              		input stream.
 2497              	*******************/
 2498              		_HEADER EVAL,4,"EVAL"
 2499              		_NEST
 2500 31d0 A8310000 	EVAL1:
 2500      04455641 
 2500      4C0000BF 
 2501 31dc 504700BF 	    _ADR	TOKEN
 2502              		_ADR	DUPP
 2503 31e0 812D0000 		_ADR	CAT	// ?input stream empty
 2504 31e4 291D0000 		_QBRAN	EVAL2
 2505 31e8 9D1C0000 		_ADR	TEVAL
 2506 31ec 371C0000 		_ADR	ATEXE
 2506      08320000 
 2507 31f4 A1210000 		_ADR	QSTAC	// evaluate input, check stack
 2508 31f8 D5240000 		_BRAN	EVAL1
 2509 31fc B1310000 	EVAL2:
 2510 3200 4B1C0000 		_ADR	DROP
 2510      E0310000 
 2511              		_ADR	DOTOK
 2512 3208 191D0000 		_UNNEST	// prompt
 2513 320c 75310000 	
 2514 3210 7F1A0000 	/**********************************
 2515              	    PRESET	( -- )
 2516              	 	Reset data stack pointer 
 2517              		and the terminal input buffer.
 2518              	**********************************/
 2519              		_HEADER PRESE,6,"PRESET"
 2520              		_NEST 
 2521 3214 D4310000 		_DOLIT SPP 
 2521      06505245 
 2521      53455400 
 2522 3220 504700BF 		_ADR SPSTOR 
 2523 3224 F71B0000 		_UNNEST 
 2523      00FF0120 
 2524 322c F51C0000 	
 2525 3230 7F1A0000 	/*********************
 2526              	    QUIT	( -- )
 2527              	 	Reset return stack 
 2528              		pointer and start 
 2529              		text interpreter.
 2530              	***********************/
 2531              		_HEADER QUIT,4,"QUIT"
 2532              		_DOLIT RPP 
 2533 3234 18320000 		_ADR RPSTOR 
 2533      04515549 
 2533      540000BF 
 2534 3240 F71B0000 	QUIT1:
 2534      80FF0120 
 2535 3248 E51C0000 		_ADR	LBRAC			// start interpretation
 2536              	QUIT2:
 2537 324c 55310000 		_ADR	QUERY			// get input
 2538              		_ADR	EVAL
 2539 3250 59300000 		_BRAN	QUIT2	// continue till error
 2540 3254 DD310000 	
 2541 3258 4B1C0000 	/***************************
 2541      50320000 
ARM GAS  forth.s 			page 124


 2542              		FORGET ( <string> -- )
 2543              		forget all definition 
 2544              		starting at <string>
 2545              	****************************/
 2546              		_HEADER FORGET,6,"FORGET"
 2547              		_NEST 
 2548 3260 38320000 		_ADR TOKEN 
 2548      06464F52 
 2548      47455400 
 2549 326c 504700BF 		_ADR DUPP 
 2550 3270 812D0000 		_QBRAN 9f 
 2551 3274 291D0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2552 3278 371C0000 		_ADR QDUP 
 2552      B4320000 
 2553 3280 052F0000 		_QBRAN 8f
 2554 3284 FD1E0000 		_ADR CELLM // ( ca la )
 2555 3288 371C0000 		_ADR DUPP 
 2555      B0320000 
 2556 3290 991E0000 		_ADR CPP   
 2557 3294 291D0000 		_ADR STORE
 2558 3298 E1210000 		_ADR AT 
 2559 329c 691C0000 		_ADR LAST 
 2560 32a0 7D1C0000 		_ADR STORE
 2561 32a4 09220000 		_ADR OVERT 
 2562 32a8 691C0000 	8:  _ADR DROP 
 2563 32ac F5370000 	9:	_UNNEST 
 2564 32b0 191D0000 	
 2565 32b4 7F1A0000 		.p2align 2 
 2566              	
 2567              	/*****************
 2568              	  The compiler
 2569              	******************/
 2570              	
 2571              	/**************************************
 2572              	    '	   ( -- ca )
 2573              	 	Search context vocabularies 
 2574              		for the next word in input stream.
 2575              	***************************************/
 2576              		_HEADER TICK,1,"'"
 2577              		_NEST
 2578 32b8 64320000 		_ADR	TOKEN
 2578      012700BF 
 2579 32c0 504700BF 		_ADR	NAMEQ	// ?defined
 2580 32c4 812D0000 		_QBRAN	TICK1
 2581 32c8 052F0000 		_UNNEST	// yes, push code address
 2582 32cc 371C0000 	TICK1:	
 2582      D8320000 
 2583 32d4 7F1A0000 		_ADR ABORT	// no, error
 2584              	
 2585 32d8 99300000 	/***********************
 2586              	    ALLOT	( n -- )
 2587              	 	Allocate n bytes to 
 2588              		the ram area.
 2589              	************************/
 2590              		_HEADER ALLOT,5,"ALLOT"
 2591              		_NEST
 2592 32dc BC320000 		_ADR	CPP
ARM GAS  forth.s 			page 125


 2592      05414C4C 
 2592      4F5400BF 
 2593 32e8 504700BF 		_ADR	PSTOR
 2594 32ec E1210000 		_UNNEST			// adjust code pointer
 2595 32f0 65200000 	
 2596 32f4 7F1A0000 	/******************************
 2597              	    ,	   ( w -- )
 2598              	 	Compile an integer 
 2599              		into the code dictionary.
 2600              	******************************/
 2601              		_HEADER COMMA,1,","
 2602              		_NEST
 2603 32f8 E0320000 		_ADR	HERE
 2603      012C00BF 
 2604 3300 504700BF 		_ADR	DUPP
 2605 3304 85240000 		_ADR	CELLP	// cell boundary
 2606 3308 291D0000 		_ADR	CPP
 2607 330c 891E0000 		_ADR	STORE
 2608 3310 E1210000 		_ADR	STORE
 2609 3314 691C0000 		_UNNEST	// adjust code pointer, compile
 2610 3318 691C0000 		.p2align 2 
 2611 331c 7F1A0000 	
 2612              	/************************************
 2613              	    [COMPILE]   ( -- //  string> )
 2614              	 	Compile the next immediate word 
 2615              		into code dictionary.
 2616              	*************************************/
 2617              		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2618              		_NEST
 2619 3320 FC320000 		_ADR	TICK
 2619      895B434F 
 2619      4D50494C 
 2619      455D00BF 
 2620 3330 504700BF 		_ADR	COMMA
 2621 3334 C1320000 		_UNNEST
 2622 3338 01330000 	
 2623 333c 7F1A0000 	/****************************
 2624              	    COMPILE	( -- )
 2625              	 	Compile the next address 
 2626              		in colon list to code 
 2627              		dictionary.
 2628              	*******************************/
 2629              		_HEADER COMPI,COMPO+7,"COMPILE"
 2630              		_NEST
 2631 3340 24330000 		_ADR	RFROM
 2631      47434F4D 
 2631      50494C45 
 2632 334c 504700BF 		_ADR	DUPP 
 2633 3350 A91C0000 		_ADR	AT
 2634 3354 291D0000 		_DOLIT 1 
 2635 3358 7D1C0000 		_ADR	ORR 
 2636 335c F71B0000 		_ADR	COMMA 
 2636      01000000 
 2637 3364 811D0000 		_ADR	CELLP 
 2638 3368 01330000 		_ADR	TOR 
 2639 336c 891E0000 		_UNNEST	// adjust return address
 2640 3370 D11C0000 	
ARM GAS  forth.s 			page 126


 2641 3374 7F1A0000 	/*************************
 2642              	    LITERAL	( w -- )
 2643              	 	Compile tos to code 
 2644              		dictionary as an 
 2645              		integer literal.
 2646              	***************************/
 2647              		_HEADER LITER,IMEDD+7,"LITERAL"
 2648              		_NEST
 2649 3378 44330000 		_COMPI	DOLIT
 2649      874C4954 
 2649      4552414C 
 2650 3384 504700BF 		_ADR	COMMA
 2651 3388 F71B0000 		_UNNEST
 2651      F61B0000 
 2651      51380000 
 2652 3394 01330000 	
 2653 3398 7F1A0000 	/********************
 2654              	    $,"	( -- )
 2655              	 	Compile a literal 
 2656              		string up to next " .
 2657              	hidden word 
 2658              	************************/
 2659              	STRCQ:
 2660              		_NEST
 2661              		_DOLIT -4
 2662 339c 504700BF 		_ADR	CPP
 2663 33a0 F71B0000 		_ADR	PSTOR
 2663      FCFFFFFF 
 2664 33a8 E1210000 		_DOLIT	'\"'
 2665 33ac 65200000 		_ADR	WORDD			// move word to code dictionary
 2666 33b0 F71B0000 		_ADR	COUNT
 2666      22000000 
 2667 33b8 5D2D0000 		_ADR	PLUS
 2668 33bc AD200000 		_ADR	ALGND			// calculate aligned end of string
 2669 33c0 ED1D0000 		_ADR	CPP
 2670 33c4 D1230000 		_ADR	STORE
 2671 33c8 E1210000 		_UNNEST 			// adjust the code pointer
 2672 33cc 691C0000 	
 2673 33d0 7F1A0000 	/*******************
 2674              	   Structures
 2675              	*******************/
 2676              	
 2677              	/*************************
 2678              	    FOR	 ( -- a )
 2679              	 	Start a FOR-NEXT loop 
 2680              		structure in a colon 
 2681              		definition.
 2682              	**************************/
 2683              		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2684              		_NEST
 2685 33d4 7C330000 		_COMPI	TOR
 2685      C3464F52 
 2686 33dc 504700BF 		_ADR	HERE
 2687 33e0 F71B0000 		_UNNEST
 2687      D01C0000 
 2687      51380000 
 2688 33ec 85240000 	
ARM GAS  forth.s 			page 127


 2689 33f0 7F1A0000 	/********************************
 2690              		DO ( limit start -- )
 2691              		initialise a DO...LOOP 
 2692              		or DO...+LOOP 
 2693              	********************************/
 2694              		_HEADER DO,COMPO+IMEDD+2,"DO"
 2695              		_NEST
 2696 33f4 D8330000 		_COMPI SWAP
 2696      C2444F00 
 2697 33fc 504700BF 		_COMPI TOR 
 2698 3400 F71B0000 		_COMPI TOR 
 2698      381D0000 
 2698      51380000 
 2699 340c F71B0000 		_ADR HERE 
 2699      D01C0000 
 2699      51380000 
 2700 3418 F71B0000 		_UNNEST 
 2700      D01C0000 
 2700      51380000 
 2701 3424 85240000 	
 2702 3428 7F1A0000 	DOPLOOP: // ( n -- R: counter limit )
 2703              		ldmfd RSP!,{T0,T1}
 2704              		add T0,TOS 
 2705 342c B8E80300 		stmfd RSP!,{T0,T1}
 2706 3430 3044     		cmp T0,T1 
 2707 3432 28E90300 		bmi 9f 
 2708 3436 8842     		add RSP,#8
 2709 3438 05D4     		add IP,#4
 2710 343a 08F10808 		_NEXT 
 2711 343e 0CF1040C 	9:  ldr IP,[IP]
 2712 3442 FEF719BB 		_NEXT 
 2713 3446 DCF800C0 		
 2714 344a FEF715BB 	/***************************
 2715              		+LOOP ( a -- )
 2716              		increment counter 
 2717              		end loop if countr>limit
 2718              	****************************/
 2719              		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 2720              		_NEST 
 2721 344e F8330000 		_COMPI DOPLOOP 
 2721      C52B4C4F 
 2721      4F50
 2722 3458 504700BF 		_ADR COMMA
 2723 345c F71B0000 		_UNNEST 
 2723      2C340000 
 2723      51380000 
 2724 3468 01330000 	
 2725 346c 7F1A0000 	DOLOOP: // ( -- R: counter limit )
 2726              		ldr T0,[RSP]
 2727              		add T0,#1
 2728 3470 D8F80000 		str T0,[RSP]
 2729 3474 00F10100 		ldr T1,[RSP,#4]
 2730 3478 C8F80000 		cmp T0,T1 
 2731 347c D8F80410 		bmi 9f
 2732 3480 8842     		add RSP,#8  // counter and limit  
 2733 3482 05D4     		add IP,IP,#4 // skip loop address 
 2734 3484 08F10808 		_NEXT 
ARM GAS  forth.s 			page 128


 2735 3488 0CF1040C 	9:  ldr IP,[IP]
 2736 348c FEF7F4BA 		_NEXT 
 2737 3490 DCF800C0 	
 2738 3494 FEF7F0BA 	
 2739              	/********************************
 2740              		LOOP ( a -- )
 2741              		increment counter 
 2742              		end loop if >= limit 
 2743              	*********************************/
 2744              		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 2745              		_NEST 
 2746 3498 52340000 		_COMPI DOLOOP
 2746      C44C4F4F 
 2746      500000BF 
 2747 34a4 504700BF 		_ADR COMMA 
 2748 34a8 F71B0000 		_UNNEST 
 2748      70340000 
 2748      51380000 
 2749 34b4 01330000 	
 2750 34b8 7F1A0000 	
 2751              	/**********************
 2752              	    BEGIN	( -- a )
 2753              	 	Start an infinite 
 2754              		or indefinite 
 2755              		loop structure.
 2756              	************************/
 2757              		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2758              		_NEST
 2759 34bc 9C340000 		_ADR	HERE
 2759      C5424547 
 2759      494E00BF 
 2760 34c8 504700BF 		_UNNEST
 2761 34cc 85240000 		.p2align 2 
 2762 34d0 7F1A0000 	
 2763              	/********************
 2764              	    NEXT	( a -- )
 2765              	 	Terminate a FOR-NEXT
 2766              		loop structure.
 2767              	**************************/
 2768              		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2769              		_NEST
 2770 34d4 C0340000 		_COMPI	DONXT
 2770      C44E4558 
 2770      540000BF 
 2771 34e0 504700BF 		_ADR	COMMA
 2772 34e4 F71B0000 		_UNNEST
 2772      181C0000 
 2772      51380000 
 2773 34f0 01330000 	
 2774 34f4 7F1A0000 	/***************************
 2775              		I ( -- n )
 2776              		stack for loop counter 
 2777              	***************************/
 2778              		_HEADER I,1+COMPO,"I"
 2779              		_PUSH 
 2780 34f8 D8340000 		ldr TOS,[RSP]
 2780      414900BF 
ARM GAS  forth.s 			page 129


 2781 3500 47F8046D 		_NEXT 
 2782 3504 D8F80060 	
 2783 3508 FEF7B6BA 	/**********************
 2784              	    UNTIL	( a -- )
 2785              	 	Terminate a BEGIN-UNTIL
 2786              		indefinite loop structure.
 2787              	******************************/
 2788              		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2789              		_NEST
 2790 350c FC340000 		_COMPI	QBRAN
 2790      C5554E54 
 2790      494C00BF 
 2791 3518 504700BF 		_ADR	COMMA
 2792 351c F71B0000 		_UNNEST
 2792      361C0000 
 2792      51380000 
 2793 3528 01330000 	
 2794 352c 7F1A0000 	/**********************
 2795              	    AGAIN	( a -- )
 2796              	 	Terminate a BEGIN-AGAIN
 2797              		infinite loop structure.
 2798              	*****************************/
 2799              		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2800              		_NEST
 2801 3530 10350000 		_COMPI	BRAN
 2801      C5414741 
 2801      494E00BF 
 2802 353c 504700BF 		_ADR	COMMA
 2803 3540 F71B0000 		_UNNEST
 2803      4A1C0000 
 2803      51380000 
 2804 354c 01330000 	
 2805 3550 7F1A0000 	/************************
 2806              	    IF	  ( -- A )
 2807              	 	Begin a conditional
 2808              		branch structure.
 2809              	**************************/
 2810              		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2811              		_NEST
 2812 3554 34350000 		_COMPI	QBRAN
 2812      C2494600 
 2813 355c 504700BF 		_ADR	HERE
 2814 3560 F71B0000 		_DOLIT	4
 2814      361C0000 
 2814      51380000 
 2815 356c 85240000 		_ADR	CPP
 2816 3570 F71B0000 		_ADR	PSTOR
 2816      04000000 
 2817 3578 E1210000 		_UNNEST
 2818 357c 65200000 	
 2819 3580 7F1A0000 	/*************************
 2820              	    AHEAD	( -- A )
 2821              	 	Compile a forward 
 2822              		branch instruction.
 2823              	*************************/
 2824              		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2825              		_NEST
ARM GAS  forth.s 			page 130


 2826 3584 58350000 		_COMPI	BRAN
 2826      C5414845 
 2826      414400BF 
 2827 3590 504700BF 		_ADR	HERE
 2828 3594 F71B0000 		_DOLIT	4
 2828      4A1C0000 
 2828      51380000 
 2829 35a0 85240000 		_ADR	CPP
 2830 35a4 F71B0000 		_ADR	PSTOR
 2830      04000000 
 2831 35ac E1210000 		_UNNEST
 2832 35b0 65200000 	
 2833 35b4 7F1A0000 	/**************************
 2834              	    REPEAT	( A a -- )
 2835              	 	Terminate a BEGIN-WHILE-REPEAT
 2836              		indefinite loop.
 2837              	**********************************/
 2838              		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2839              		_NEST
 2840 35b8 88350000 		_ADR	AGAIN
 2840      C6524550 
 2840      45415400 
 2841 35c4 504700BF 		_ADR	HERE
 2842 35c8 3D350000 		_ADR	SWAP
 2843 35cc 85240000 		_ADR	STORE
 2844 35d0 391D0000 		_UNNEST
 2845 35d4 691C0000 	
 2846 35d8 7F1A0000 	/*********************
 2847              	    THEN	( A -- )
 2848              	 	Terminate a conditional
 2849              		branch structure.
 2850              	*****************************/
 2851              		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2852              		_NEST
 2853 35dc BC350000 		_ADR	HERE
 2853      C4544845 
 2853      4E0000BF 
 2854 35e8 504700BF 		_ADR	SWAP
 2855 35ec 85240000 		_ADR	STORE
 2856 35f0 391D0000 		_UNNEST
 2857 35f4 691C0000 	
 2858 35f8 7F1A0000 	/***************************
 2859              	    AFT	 ( a -- a A )
 2860              	 	Jump to THEN in a 
 2861              		FOR-AFT-THEN-NEXT loop 
 2862              		the first time through.
 2863              	*****************************/
 2864              		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2865              		_NEST
 2866 35fc E0350000 		_ADR	DROP
 2866      C3414654 
 2867 3604 504700BF 		_ADR	AHEAD
 2868 3608 191D0000 		_ADR	BEGIN
 2869 360c 91350000 		_ADR	SWAP
 2870 3610 C9340000 		_UNNEST
 2871 3614 391D0000 	
 2872 3618 7F1A0000 	/**********************
ARM GAS  forth.s 			page 131


 2873              	    ELSE	( A -- A )
 2874              	 	Start the false 
 2875              		clause in an 
 2876              		IF-ELSE-THEN structure.
 2877              	****************************/
 2878              		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 2879              		_NEST
 2880 361c 00360000 		_ADR	AHEAD
 2880      C4454C53 
 2880      450000BF 
 2881 3628 504700BF 		_ADR	SWAP
 2882 362c 91350000 		_ADR	THENN
 2883 3630 391D0000 		_UNNEST
 2884 3634 E9350000 	
 2885 3638 7F1A0000 	/**************************
 2886              	    WHILE	( a -- A a )
 2887              	 	Conditional branch out 
 2888              		of a BEGIN-WHILE-REPEAT loop.
 2889              	*********************************/
 2890              		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 2891              		_NEST
 2892 363c 20360000 		_ADR	IFF
 2892      C5574849 
 2892      4C4500BF 
 2893 3648 504700BF 		_ADR	SWAP
 2894 364c 5D350000 		_UNNEST
 2895 3650 391D0000 	
 2896 3654 7F1A0000 	/***********************************
 2897              	    ABORT"	( -- //  string> )
 2898              	 	Conditional abort with an 
 2899              		error message.
 2900              	***********************************/
 2901              		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 2902              		_NEST
 2903 3658 40360000 		_COMPI	ABORQ
 2903      8641424F 
 2903      52542200 
 2904 3664 504700BF 		_ADR	STRCQ
 2905 3668 F71B0000 		_UNNEST
 2905      C4300000 
 2905      51380000 
 2906 3674 9D330000 	
 2907 3678 7F1A0000 	/******************************
 2908              	    $"	( -- //  string> )
 2909              	 	Compile an inline 
 2910              		word literal.
 2911              	*****************************/
 2912              		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 2913              		_NEST
 2914 367c 5C360000 		_COMPI	STRQP
 2914      C2242200 
 2915 3684 504700BF 		_ADR	STRCQ
 2916 3688 F71B0000 		_UNNEST
 2916      282A0000 
 2916      51380000 
 2917 3694 9D330000 	
 2918 3698 7F1A0000 	/******************************
ARM GAS  forth.s 			page 132


 2919              	    ."	( -- //  string> )
 2920              	 	Compile an inline word
 2921              		literal to be typed out 
 2922              		at run time.
 2923              	*******************************/
 2924              		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 2925              		_NEST
 2926 369c 80360000 		_COMPI	DOTQP
 2926      C22E2200 
 2927 36a4 504700BF 		_ADR	STRCQ
 2928 36a8 F71B0000 		_UNNEST
 2928      442A0000 
 2928      51380000 
 2929 36b4 9D330000 	
 2930 36b8 7F1A0000 	/*********************
 2931              	  Name compiler
 2932              	***********************/
 2933              	
 2934              	/**************************
 2935              	    ?UNIQUE	( a -- a )
 2936              	 	Display a warning 
 2937              		message if the word 
 2938              		already exists.
 2939              	**************************/
 2940              		_HEADER UNIQU,7,"?UNIQUE"
 2941              		_NEST
 2942 36bc A0360000 		_ADR	DUPP
 2942      073F554E 
 2942      49515545 
 2943 36c8 504700BF 		_ADR	NAMEQ			// ?name exists
 2944 36cc 291D0000 		_QBRAN	UNIQ1	// redefinitions are OK
 2945 36d0 052F0000 		_DOTQP	7," reDef "		// but warn the user
 2946 36d4 371C0000 		_ADR	OVER
 2946      F4360000 
 2947 36dc 452A0000 		_ADR	COUNT
 2947      07207265 
 2947      44656620 
 2948 36e8 4D1D0000 		_ADR	TYPEE			// just in case its not planned
 2949 36ec AD200000 	UNIQ1:
 2950 36f0 A9290000 		_ADR	DROP
 2951              		_UNNEST
 2952 36f4 191D0000 	
 2953 36f8 7F1A0000 	/***********************
 2954              	    $,n	 ( na -- )
 2955              	 	Build a new dictionary 
 2956              		name using the data at na.
 2957              	hidden word 
 2958              	*******************************/
 2959              	SNAME:
 2960              		_NEST
 2961              		_ADR	DUPP			//  na na
 2962 36fc 504700BF 		_ADR	CAT			//  ?null input
 2963 3700 291D0000 		_QBRAN	SNAM1
 2964 3704 9D1C0000 		_ADR	UNIQU			//  na
 2965 3708 371C0000 		_ADR	LAST			//  na last
 2965      44370000 
 2966 3710 C9360000 		_ADR	AT			//  na la
ARM GAS  forth.s 			page 133


 2967 3714 09220000 		_ADR	COMMA			//  na
 2968 3718 7D1C0000 		_ADR	DUPP			//  na na
 2969 371c 01330000 		_ADR	LAST			//  na na last
 2970 3720 291D0000 		_ADR	STORE			//  na , save na for vocabulary link
 2971 3724 09220000 		_ADR	COUNT			//  na+1 count
 2972 3728 691C0000 		_ADR	PLUS			//  na+1+count
 2973 372c AD200000 		_ADR	ALGND			//  word boundary
 2974 3730 ED1D0000 		_ADR	CPP
 2975 3734 D1230000 		_ADR	STORE			//  top of dictionary now
 2976 3738 E1210000 		_UNNEST
 2977 373c 691C0000 	SNAM1:
 2978 3740 7F1A0000 		_ADR	STRQP
 2979              		.byte	7
 2980 3744 292A0000 		.ascii " name? "
 2981 3748 07       		_ADR	ABORT
 2982 3749 206E616D 	
 2982      653F20
 2983 3750 99300000 	/************************
 2984              	    $COMPILE	( a -- )
 2985              	 	Compile next word to 
 2986              		code dictionary as 
 2987              		a token or literal.
 2988              	**************************/
 2989              		_HEADER SCOMP,8,"$COMPILE"
 2990              		_NEST
 2991 3754 C0360000 		_ADR	NAMEQ
 2991      0824434F 
 2991      4D50494C 
 2991      450000BF 
 2992 3764 504700BF 		_ADR	QDUP	// defined?
 2993 3768 052F0000 		_QBRAN	SCOM2
 2994 376c FD1E0000 		_ADR	AT
 2995 3770 371C0000 		_DOLIT	IMEDD
 2995      A0370000 
 2996 3778 7D1C0000 		_ADR	ANDD	// immediate?
 2997 377c F71B0000 		_QBRAN	SCOM1
 2997      80000000 
 2998 3784 6D1D0000 		_ADR	EXECU
 2999 3788 371C0000 		_UNNEST			// it's immediate, execute
 2999      98370000 
 3000 3790 0D1C0000 	SCOM1:
 3001 3794 7F1A0000 		_ADR	CALLC			// it's not immediate, compile
 3002              		_UNNEST	
 3003 3798 51380000 	SCOM2:
 3004 379c 7F1A0000 		_ADR	NUMBQ
 3005              		_QBRAN	SCOM3
 3006 37a0 19280000 		_ADR	LITER
 3007 37a4 371C0000 		_UNNEST			// compile number as integer
 3007      B4370000 
 3008 37ac 85330000 	SCOM3: // compilation abort 
 3009 37b0 7F1A0000 		_ADR COLON_ABORT 
 3010              		_ADR	ABORT			// error
 3011 37b4 BD370000 	
 3012 37b8 99300000 	/********************************
 3013              	 before aborting a compilation 
 3014              	 reset HERE and LAST
 3015              	 to previous values. 
ARM GAS  forth.s 			page 134


 3016              	*******************************/
 3017              	COLON_ABORT:
 3018              		_NEST 
 3019              		_ADR LAST 
 3020 37bc 504700BF 		_ADR AT 
 3021 37c0 09220000 		_ADR CELLM 
 3022 37c4 7D1C0000 		_ADR DUPP 
 3023 37c8 991E0000 		_ADR CPP  
 3024 37cc 291D0000 		_ADR STORE 
 3025 37d0 E1210000 		_ADR AT 
 3026 37d4 691C0000 		_ADR LAST 
 3027 37d8 7D1C0000 		_ADR STORE 
 3028 37dc 09220000 		_UNNEST 
 3029 37e0 691C0000 	
 3030 37e4 7F1A0000 	/*********************
 3031              	    OVERT	( -- )
 3032              	 	Link a new word 
 3033              		into the current 
 3034              		vocabulary.
 3035              	**********************/
 3036              		_HEADER OVERT,5,"OVERT"
 3037              		_NEST
 3038 37e8 58370000 		_ADR	LAST
 3038      054F5645 
 3038      525400BF 
 3039 37f4 504700BF 		_ADR	AT
 3040 37f8 09220000 		_ADR	CNTXT
 3041 37fc 7D1C0000 		_ADR	STORE
 3042 3800 CD210000 		_UNNEST
 3043 3804 691C0000 	
 3044 3808 7F1A0000 	/**********************
 3045              	    ;  ( -- )
 3046              	 	Terminate a colon
 3047              		definition.
 3048              	***********************/
 3049              		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3050              		_NEST
 3051 380c EC370000 		_DOLIT	UNNEST
 3051      C13B00BF 
 3052 3814 504700BF 		_ADR	CALLC
 3053 3818 F71B0000 		_ADR	LBRAC
 3053      7E1A0000 
 3054 3820 51380000 		_ADR	OVERT
 3055 3824 55310000 		_UNNEST
 3056 3828 F5370000 	
 3057 382c 7F1A0000 	/******************
 3058              	    ]	   ( -- )
 3059              	 	Start compiling 
 3060              		the words in 
 3061              		the input stream.
 3062              	*********************/
 3063              		_HEADER RBRAC,1,"]"
 3064              		_NEST
 3065 3830 10380000 		_DOLIT	SCOMP
 3065      015D00BF 
 3066 3838 504700BF 		_ADR	TEVAL
 3067 383c F71B0000 		_ADR	STORE
ARM GAS  forth.s 			page 135


 3067      64370000 
 3068 3844 A1210000 		_UNNEST
 3069 3848 691C0000 	
 3070 384c 7F1A0000 	/*********************
 3071              	    BL.W	( ca -- )
 3072              	 	compile ca.
 3073              	hidden word used by compiler
 3074              	*****************************/
 3075              	CALLC:
 3076              		_NEST
 3077              		_DOLIT 1 
 3078 3850 504700BF 		_ADR ORR 
 3079 3854 F71B0000 		_ADR COMMA  
 3079      01000000 
 3080 385c 811D0000 		_UNNEST 
 3081 3860 01330000 	
 3082 3864 7F1A0000 	
 3083              	/*************************
 3084              	 	:	( -- //  string> )
 3085              	 	Start a new colon 
 3086              		definition using 
 3087              		next word as its name.
 3088              	**************************/
 3089              		_HEADER COLON,1,":"
 3090              		_NEST
 3091 3868 34380000 		_ADR	TOKEN
 3091      013A00BF 
 3092 3870 504700BF 		_ADR	SNAME
 3093 3874 812D0000 		_ADR	COMPI_NEST 
 3094 3878 FD360000 		_ADR	RBRAC
 3095 387c 891A0000 		_UNNEST
 3096 3880 39380000 	
 3097 3884 7F1A0000 	/*************************
 3098              	    IMMEDIATE   ( -- )
 3099              	 	Make the last compiled 
 3100              		word an immediate word.
 3101              	***************************/
 3102              		_HEADER IMMED,9,"IMMEDIATE"
 3103              		_NEST
 3104 3888 6C380000 		_DOLIT	IMEDD
 3104      09494D4D 
 3104      45444941 
 3104      544500BF 
 3105 3898 504700BF 		_ADR	LAST
 3106 389c F71B0000 		_ADR	AT
 3106      80000000 
 3107 38a4 09220000 		_ADR	AT
 3108 38a8 7D1C0000 		_ADR	ORR
 3109 38ac 7D1C0000 		_ADR	LAST
 3110 38b0 811D0000 		_ADR	AT
 3111 38b4 09220000 		_ADR	STORE
 3112 38b8 7D1C0000 		_UNNEST
 3113 38bc 691C0000 	
 3114 38c0 7F1A0000 	/******************
 3115              	  Defining words
 3116              	******************/
 3117              	
ARM GAS  forth.s 			page 136


 3118              	/***********************************
 3119              	    CONSTANT	( u -- //  string> )
 3120              	 	Compile a new constant.
 3121              	************************************/
 3122              		_HEADER CONST,8,"CONSTANT"
 3123              		_NEST 
 3124 38c4 8C380000 		_ADR	TOKEN
 3124      08434F4E 
 3124      5354414E 
 3124      540000BF 
 3125 38d4 504700BF 		_ADR	SNAME
 3126 38d8 812D0000 		_ADR	OVERT
 3127 38dc FD360000 		_ADR	COMPI_NEST
 3128 38e0 F5370000 		_DOLIT	DOCON
 3129 38e4 891A0000 		_ADR	CALLC
 3130 38e8 F71B0000 		_ADR	COMMA
 3130      E0200000 
 3131 38f0 51380000 		_DOLIT	UNNEST 
 3132 38f4 01330000 		_ADR	CALLC  
 3133 38f8 F71B0000 		_UNNEST
 3133      7E1A0000 
 3134 3900 51380000 	
 3135 3904 7F1A0000 		.p2align 2 
 3136              	/****************************************
 3137              	 doDOES> ( -- a )
 3138              	 runtime action of DOES> 
 3139              	 leave parameter field address on stack 
 3140              	hidden word used by compiler 
 3141              	***************************************/
 3142              	DODOES:
 3143              		_NEST 
 3144              		_ADR	RFROM
 3145 3908 504700BF 		_ADR	CELLP 
 3146 390c A91C0000 		_ADR	ONEP  
 3147 3910 891E0000 		_ADR LAST 
 3148 3914 491E0000 		_ADR AT
 3149 3918 09220000 		_ADR NAMET 
 3150 391c 7D1C0000 		_ADR CELLP 
 3151 3920 9D2D0000 		_ADR STORE  
 3152 3924 891E0000 		_UNNEST 
 3153 3928 691C0000 	
 3154 392c 7F1A0000 		.p2align 2
 3155              	/**********************
 3156              	  DOES> ( -- )
 3157              	  compile time action
 3158              	*************************/
 3159              		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3160              		_NEST 
 3161 3930 C8380000 		_DOLIT DODOES 
 3161      C5444F45 
 3161      533E00BF 
 3162 393c 504700BF 		_ADR CALLC 
 3163 3940 F71B0000 		_DOLIT	UNNEST
 3163      08390000 
 3164 3948 51380000 		_ADR	CALLC 
 3165 394c F71B0000 		_ADR COMPI_NEST
 3165      7E1A0000 
ARM GAS  forth.s 			page 137


 3166 3954 51380000 		_DOLIT RFROM 
 3167 3958 891A0000 		_ADR	CALLC
 3168 395c F71B0000 		_UNNEST 
 3168      A81C0000 
 3169 3964 51380000 	
 3170 3968 7F1A0000 	
 3171              	/****************************
 3172              	  DEFER@ ( "name" -- a )
 3173              	  return value of code field 
 3174              	  of defered function. 
 3175              	******************************/
 3176              		_HEADER DEFERAT,6,"DEFER@"
 3177              		_NEST 
 3178 396c 34390000 		_ADR TICK
 3178      06444546 
 3178      45524000 
 3179 3978 504700BF 		_ADR CELLP 
 3180 397c C1320000 		_ADR AT 
 3181 3980 891E0000 		_ADR ONEM 
 3182 3984 7D1C0000 		_UNNEST 
 3183 3988 591E0000 	
 3184 398c 7F1A0000 	/*********************************
 3185              	 DEFER! ( "name1" "name2" -- )
 3186              	 assign an action to a defered word 
 3187              	************************************/
 3188              		_HEADER DEFERSTO,6,"DEFER!"
 3189              		_NEST 
 3190 3990 70390000 		_ADR TICK 
 3190      06444546 
 3190      45522100 
 3191 399c 504700BF 		_ADR ONEP 
 3192 39a0 C1320000 		_ADR TICK 
 3193 39a4 491E0000 		_ADR CELLP 
 3194 39a8 C1320000 		_ADR STORE 
 3195 39ac 891E0000 		_UNNEST
 3196 39b0 691C0000 	
 3197 39b4 7F1A0000 	/****************************
 3198              	  DEFER ( "name" -- )
 3199              	  create a defered definition
 3200              	*****************************/
 3201              		_HEADER DEFER,5,"DEFER"
 3202              		_NEST 
 3203 39b8 94390000 		_ADR CREAT 
 3203      05444546 
 3203      455200BF 
 3204 39c4 504700BF 		_DOLIT UNNEST 
 3205 39c8 153A0000 		_ADR CALLC 
 3206 39cc F71B0000 		_DOLIT DEFER_NOP
 3206      7E1A0000 
 3207 39d4 51380000 		_ADR ONEP 
 3208 39d8 F71B0000 		_ADR LAST 
 3208      FC390000 
 3209 39e0 491E0000 		_ADR AT 
 3210 39e4 09220000 		_ADR NAMET 
 3211 39e8 7D1C0000 		_ADR CELLP 
 3212 39ec 9D2D0000 		_ADR STORE 
 3213 39f0 891E0000 		_UNNEST 
ARM GAS  forth.s 			page 138


 3214 39f4 691C0000 	DEFER_NOP:
 3215 39f8 7F1A0000 		_NEST  
 3216              		_ADR NOP 
 3217 39fc 504700BF 		_UNNEST 
 3218 3a00 F51B0000 	
 3219 3a04 7F1A0000 	/******************************
 3220              	    CREATE	( -- //  string> )
 3221              	 	Compile a new array entry 
 3222              		without allocating code space.
 3223              	***********************************/
 3224              		_HEADER CREAT,6,"CREATE"
 3225              		_NEST 
 3226 3a08 BC390000 		_ADR	TOKEN
 3226      06435245 
 3226      41544500 
 3227 3a14 504700BF 		_ADR	SNAME
 3228 3a18 812D0000 		_ADR	OVERT
 3229 3a1c FD360000 		_ADR	COMPI_NEST 
 3230 3a20 F5370000 		_DOLIT	DOVAR
 3231 3a24 891A0000 		_ADR	CALLC
 3232 3a28 F71B0000 		_UNNEST
 3232      D4200000 
 3233 3a30 51380000 	
 3234 3a34 7F1A0000 	/*******************************
 3235              	    VARIABLE	( -- //  string> )
 3236              	 	Compile a new variable 
 3237              		initialized to 0.
 3238              	***********************************/
 3239              		_HEADER VARIA,8,"VARIABLE"
 3240              		_NEST
 3241 3a38 0C3A0000 		_ADR	CREAT
 3241      08564152 
 3241      4941424C 
 3241      450000BF 
 3242 3a48 504700BF 		_DOLIT	0
 3243 3a4c 153A0000 		_ADR	COMMA
 3244 3a50 F71B0000 		_DOLIT UNNEST
 3244      00000000 
 3245 3a58 01330000 		_ADR	CALLC  
 3246 3a5c F71B0000 		_UNNEST
 3246      7E1A0000 
 3247 3a64 51380000 	
 3248 3a68 7F1A0000 	/***********
 3249              	  Tools
 3250              	***********/
 3251              	
 3252              	/*************************
 3253              	    dm+	 ( a u -- a )
 3254              	 	Dump u bytes from , 
 3255              		leaving a+u on the stack.
 3256              	hidden word used by DUMP 
 3257              	****************************/
 3258              	DMP:
 3259              		_NEST
 3260              		_ADR	OVER
 3261 3a6c 504700BF 		_DOLIT	4
 3262 3a70 4D1D0000 		_ADR	UDOTR			// display address
ARM GAS  forth.s 			page 139


 3263 3a74 F71B0000 		_ADR	SPACE
 3263      04000000 
 3264 3a7c 892A0000 		_ADR	TOR			// start count down loop
 3265 3a80 55290000 		_BRAN	PDUM2			// skip first pass
 3266 3a84 D11C0000 	PDUM1:
 3267 3a88 4B1C0000 	  _ADR	DUPP
 3267      A83A0000 
 3268              		_ADR	CAT
 3269 3a90 291D0000 		_DOLIT	3
 3270 3a94 9D1C0000 		_ADR	UDOTR			// display numeric data
 3271 3a98 F71B0000 		_ADR	ONEP			// increment address
 3271      03000000 
 3272 3aa0 892A0000 	PDUM2:
 3273 3aa4 491E0000 	  _ADR	DONXT
 3274              		.word	PDUM1	// loop till done
 3275 3aa8 191C0000 		_UNNEST
 3276 3aac 903A0000 		.p2align 2 
 3277 3ab0 7F1A0000 	//    DUMP	( a u -- )
 3278              	// 	Dump u bytes from a, in a formatted manner.
 3279              	
 3280              	/**********************
 3281              		DUMP ( a n -- )
 3282              		hex dump memory 
 3283              	*********************/
 3284              		_HEADER DUMP,4,"DUMP"
 3285              		_NEST
 3286 3ab4 3C3A0000 		_ADR	BASE
 3286      0444554D 
 3286      500000BF 
 3287 3ac0 504700BF 		_ADR	AT
 3288 3ac4 45210000 		_ADR	TOR
 3289 3ac8 7D1C0000 		_ADR	HEX			// save radix,set hex
 3290 3acc D11C0000 		_DOLIT	16
 3291 3ad0 69270000 		_ADR	SLASH			// change count to lines
 3292 3ad4 F71B0000 		_ADR	TOR
 3292      10000000 
 3293 3adc 71230000 		_BRAN	DUMP4			// start count down loop
 3294 3ae0 D11C0000 	DUMP1:
 3295 3ae4 4B1C0000 	  _ADR	CR
 3295      143B0000 
 3296              		_DOLIT	16
 3297 3aec DD290000 		_ADR	DDUP
 3298 3af0 F71B0000 		_ADR	DMP			// display numeric
 3298      10000000 
 3299 3af8 611F0000 		_ADR	ROT
 3300 3afc 6D3A0000 		_ADR	ROT
 3301 3b00 111F0000 		_ADR	SPACE
 3302 3b04 111F0000 		_ADR	SPACE
 3303 3b08 55290000 		_ADR	TYPEE			// display printable characters
 3304 3b0c 55290000 	DUMP4:
 3305 3b10 A9290000 	  _DONXT	DUMP1	// loop till done
 3306              	DUMP3:
 3307 3b14 191C0000 		_ADR	DROP
 3307      EC3A0000 
 3308              		_ADR	RFROM
 3309 3b1c 191D0000 		_ADR	BASE
 3310 3b20 A91C0000 		_ADR	STORE			// restore radix
ARM GAS  forth.s 			page 140


 3311 3b24 45210000 		_UNNEST
 3312 3b28 691C0000 	
 3313 3b2c 7F1A0000 	/**********************
 3314              	   .S	  ( ... -- ... )
 3315              	 	Display the contents 
 3316              		of the data stack.
 3317              	*************************/
 3318              		_HEADER DOTS,2,".S"
 3319              		_NEST
 3320 3b30 B83A0000 		_ADR	SPACE
 3320      022E5300 
 3321 3b38 504700BF 		_ADR	DEPTH			// stack depth
 3322 3b3c 55290000 		_ADR	TOR			// start count down loop
 3323 3b40 39240000 		_BRAN	DOTS2			// skip first pass
 3324 3b44 D11C0000 	DOTS1:
 3325 3b48 4B1C0000 		_ADR	RAT
 3325      5C3B0000 
 3326              		_ADR	PICK
 3327 3b50 BD1C0000 		_ADR	DOT			// index stack, display contents
 3328 3b54 5D240000 	DOTS2:
 3329 3b58 E12A0000 		_DONXT	DOTS1	// loop till done
 3330              		_ADR	SPACE
 3331 3b5c 191C0000 		_UNNEST
 3331      503B0000 
 3332 3b64 55290000 	
 3333 3b68 7F1A0000 	/*****************************
 3334              	    >NAME	( ca -- na | F )
 3335              	 	Convert code address 
 3336              		to a name address.
 3337              	*****************************/
 3338              		_HEADER TNAME,5,">NAME"
 3339              		_NEST
 3340 3b6c 343B0000 		_ADR	TOR			//  
 3340      053E4E41 
 3340      4D4500BF 
 3341 3b78 504700BF 		_ADR	CNTXT			//  va
 3342 3b7c D11C0000 		_ADR	AT			//  na
 3343 3b80 CD210000 	TNAM1:
 3344 3b84 7D1C0000 		_ADR	DUPP			//  na na
 3345              		_QBRAN	TNAM2	//  vocabulary end, no match
 3346 3b88 291D0000 		_ADR	DUPP			//  na na
 3347 3b8c 371C0000 		_ADR	NAMET			//  na ca
 3347      BC3B0000 
 3348 3b94 291D0000 		_ADR	RAT			//  na ca code
 3349 3b98 9D2D0000 		_ADR	XORR			//  na f --
 3350 3b9c BD1C0000 		_QBRAN	TNAM2
 3351 3ba0 951D0000 		_ADR	CELLM			//  la 
 3352 3ba4 371C0000 		_ADR	AT			//  next_na
 3352      BC3B0000 
 3353 3bac 991E0000 		_BRAN	TNAM1
 3354 3bb0 7D1C0000 	TNAM2:	
 3355 3bb4 4B1C0000 		_ADR	RFROM
 3355      883B0000 
 3356              		_ADR	DROP			//  0|na --
 3357 3bbc A91C0000 		_UNNEST			// 0
 3358 3bc0 191D0000 	
 3359 3bc4 7F1A0000 	/********************************
ARM GAS  forth.s 			page 141


 3360              	    .ID	 ( na -- )
 3361              	 	Display the name at address.
 3362              	********************************/
 3363              		_HEADER DOTID,3,".ID"
 3364              		_NEST
 3365 3bc8 703B0000 		_ADR	QDUP			// if zero no name
 3365      032E4944 
 3366 3bd0 504700BF 		_QBRAN	DOTI1
 3367 3bd4 FD1E0000 		_ADR	COUNT
 3368 3bd8 371C0000 		_DOLIT	0x1F
 3368      F83B0000 
 3369 3be0 AD200000 		_ADR	ANDD			// mask lexicon bits
 3370 3be4 F71B0000 		_ADR	TYPEE
 3370      1F000000 
 3371 3bec 6D1D0000 		_UNNEST			// display name string
 3372 3bf0 A9290000 	DOTI1:
 3373 3bf4 7F1A0000 		_DOTQP	9," {noName}"
 3374              		_UNNEST
 3375 3bf8 452A0000 	
 3375      09207B6E 
 3375      6F4E616D 
 3375      657D00BF 
 3376 3c08 7F1A0000 		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3377              	.if WANT_SEE 
 3378              	/*******************************
 3379              	    SEE	 ( -- //  string> )
 3380              	 	A simple decompiler.
 3381              	*******************************/
 3382              		_HEADER SEE,3,"SEE"
 3383              		_NEST
 3384              		_ADR	TICK	//  ca --, starting address
 3385              		_ADR	CR	
 3386              		_DOLIT	20
 3387              		_ADR	TOR
 3388              	SEE1:
 3389              		_ADR	CELLP			//  a
 3390              		_ADR	DUPP			//  a a
 3391              		_ADR	DECOMP		//  a
 3392              		_DONXT	SEE1
 3393              		_ADR	DROP
 3394              		_UNNEST
 3395              	
 3396              	/*************************
 3397              	 	DECOMPILE ( a -- )
 3398              	 	Convert code in a.  
 3399              		Display name of command or as data.
 3400              	*************************************/
 3401              		_HEADER DECOMP,9,"DECOMPILE"
 3402              		_NEST
 3403              		_ADR	DUPP			//  a a
 3404              	// 	_ADR	TOR			//  a
 3405              		_ADR	AT			//  a code
 3406              		_ADR	DUPP			//  a code code
 3407              		_DOLIT	0xF800D000 //0xF800F800
 3408              		_ADR	ANDD
 3409              		_DOLIT	0xF000D000 //0xF800F000
 3410              		_ADR	EQUAL			//  a code ?
ARM GAS  forth.s 			page 142


 3411              		_ADR	INVER 
 3412              		_QBRAN	DECOM2	//  not a command
 3413              		//  a valid_code --, extract address and display name
 3414              		MOVW	IP,#0xFFE
 3415              		MOV	WP,TOS
 3416              		LSL	TOS,TOS,#21		//  get bits 22-12
 3417              		ASR	TOS,TOS,#9		//  with sign extension
 3418              		LSR	WP,WP,#15		//  get bits 11-1
 3419              		AND	WP,WP,IP		//  retain only bits 11-1
 3420              		ORR	TOS,TOS,WP		//  get bits 22-1
 3421              		NOP
 3422              		_ADR	OVER			//  a offset a
 3423              		_ADR	PLUS			//  a target-4
 3424              		_ADR	CELLP			//  a target
 3425              		_ADR	TNAME			//  a na/0 --, is it a name?
 3426              		_ADR	QDUP			//  name address or zero
 3427              		_QBRAN	DECOM1
 3428              		_ADR	SPACE			//  a na
 3429              		_ADR	DOTID			//  a --, display name
 3430              	// 	_ADR	RFROM			//  a
 3431              		_ADR	DROP
 3432              		_UNNEST
 3433              	DECOM1:	// _ADR	RFROM		//  a
 3434              		_ADR	AT			//  data
 3435              		_ADR	UDOT			//  display data
 3436              		_UNNEST
 3437              	DECOM2:
 3438              		_ADR	UDOT
 3439              	// 	_ADR	RFROM
 3440              		_ADR	DROP
 3441              		_UNNEST
 3442              	.endif 
 3443              	
 3444              	/*********************
 3445              	    WORDS	( -- )
 3446              	 	Display the names 
 3447              		in the context vocabulary.
 3448              	*******************************/
 3449              		_HEADER WORDS,5,"WORDS"
 3450              		_NEST
 3451 3c0c CC3B0000 		_ADR	CR
 3451      05574F52 
 3451      445300BF 
 3452 3c18 504700BF 		_ADR	CNTXT
 3453 3c1c DD290000 		_ADR	AT			// only in context
 3454 3c20 CD210000 	WORS1:
 3455 3c24 7D1C0000 		_ADR	QDUP			// ?at end of list
 3456              		_QBRAN	WORS2
 3457 3c28 FD1E0000 		_ADR	DUPP
 3458 3c2c 371C0000 		_ADR	SPACE
 3458      503C0000 
 3459 3c34 291D0000 		_ADR	DOTID			// display a name
 3460 3c38 55290000 		_ADR	CELLM
 3461 3c3c D13B0000 		_ADR	AT
 3462 3c40 991E0000 		_BRAN	WORS1
 3463 3c44 7D1C0000 	WORS2:
 3464 3c48 4B1C0000 		_UNNEST
ARM GAS  forth.s 			page 143


 3464      283C0000 
 3465              	
 3466 3c50 7F1A0000 	/*****************************
 3467              		WC ( - n )
 3468              		count words in dictionary 
 3469              	******************************/
 3470              		_HEADER WC,2,"WC"
 3471              		_NEST 
 3472 3c54 103C0000 		_DOLIT 0 
 3472      02574300 
 3473 3c5c 504700BF 		_ADR LAST
 3474 3c60 F71B0000 	1:	_ADR AT
 3474      00000000 
 3475 3c68 09220000 		_ADR QDUP
 3476 3c6c 7D1C0000 		_QBRAN 9f
 3477 3c70 FD1E0000 		_ADR SWAP
 3478 3c74 371C0000 		_ADR ONEP
 3478      943C0000 
 3479 3c7c 391D0000 		_ADR SWAP
 3480 3c80 491E0000 		_ADR CELLM
 3481 3c84 391D0000 		_BRAN 1b
 3482 3c88 991E0000 	9:	_UNNEST 
 3483 3c8c 4B1C0000 	
 3483      6C3C0000 
 3484 3c94 7F1A0000 	/*************************
 3485              		MARK <string> ( -- )
 3486              	    create forget point 
 3487              		in dictionary 
 3488              	*************************/	
 3489              		_HEADER MARK,4,"MARK"
 3490              		_NEST
 3491 3c98 583C0000 		_ADR CREAT 
 3491      044D4152 
 3491      4B0000BF 
 3492 3ca4 504700BF 		_ADR DODOES 
 3493 3ca8 153A0000 		_UNNEST
 3494 3cac 09390000 		_NEST  
 3495 3cb0 7F1A0000 		_ADR RFROM 
 3496 3cb4 504700BF 		_DOLIT 8
 3497 3cb8 A91C0000 		_ADR SUBB
 3498 3cbc F71B0000 		_ADR TNAME
 3498      08000000 
 3499 3cc4 FD1D0000 		_ADR CELLM
 3500 3cc8 793B0000 		_ADR AT  
 3501 3ccc 991E0000 		_ADR LAST 
 3502 3cd0 7D1C0000 		_ADR STORE 
 3503 3cd4 09220000 		_ADR OVERT
 3504 3cd8 691C0000 		_UNNEST 
 3505 3cdc F5370000 	
 3506 3ce0 7F1A0000 	/****************
 3507              	  cold start
 3508              	*****************/
 3509              	
 3510              	/**********************************
 3511              	    VER	 ( -- n )
 3512              	 	Return the version 
 3513              		number of this implementation.
ARM GAS  forth.s 			page 144


 3514              	hidden word used by COLD
 3515              	**********************************/
 3516              	VERSN:
 3517              		_NEST
 3518              		_DOLIT	VER*256+EXT
 3519 3ce4 504700BF 		_UNNEST
 3520 3ce8 F71B0000 	
 3520      00010000 
 3521 3cf0 7F1A0000 	/*********************
 3522              	    hi	  ( -- )
 3523              	 	Display the sign-on 
 3524              		message.
 3525              	***********************/
 3526              		_HEADER HI,2,"HI"
 3527              		_NEST
 3528 3cf4 9C3C0000 		_ADR	CR	// initialize I/O
 3528      02484900 
 3529 3cfc 504700BF 		_DOTQP	17, "beyond Jupiter, v" 
 3530 3d00 DD290000 		_ADR	BASE
 3531 3d04 452A0000 		_ADR	AT
 3531      11626579 
 3531      6F6E6420 
 3531      4A757069 
 3531      7465722C 
 3532 3d1c 45210000 		_ADR	HEX	// save radix
 3533 3d20 7D1C0000 		_ADR	VERSN
 3534 3d24 69270000 		_ADR	BDIGS
 3535 3d28 E53C0000 		_ADR	DIG
 3536 3d2c 59260000 		_ADR	DIG
 3537 3d30 A5260000 		_DOLIT	'.'
 3538 3d34 A5260000 		_ADR	HOLD
 3539 3d38 F71B0000 		_ADR	DIGS
 3539      2E000000 
 3540 3d40 79260000 		_ADR	EDIGS
 3541 3d44 C5260000 		_ADR	TYPEE	// format version number
 3542 3d48 19270000 		_ADR	BASE
 3543 3d4c A9290000 		_ADR	STORE
 3544 3d50 45210000 		_ADR	CR
 3545 3d54 691C0000 		_UNNEST			// restore radix
 3546 3d58 DD290000 	
 3547 3d5c 7F1A0000 	/**********************
 3548              	 check if PS2 keyboard 
 3549              	 present.
 3550              	**********************/
 3551              	PS2_QUERY: 
 3552              		_NEST 
 3553              		_DOLIT 400 
 3554 3d60 504700BF 		_ADR PAUSE
 3555 3d64 F71B0000 		_ADR PS2_QKEY
 3555      90010000 
 3556 3d6c 991B0000 		_QBRAN 1f
 3557 3d70 C1130000 		_DOLIT BAT_OK 
 3558 3d74 371C0000 		_ADR XORR 
 3558      903D0000 
 3559 3d7c F71B0000 		_QBRAN 9f 
 3559      AA000000 
 3560 3d84 951D0000 	1:	_ADR KBD_RST
ARM GAS  forth.s 			page 145


 3561 3d88 371C0000 		_DOLIT BAT_OK 
 3561      D43D0000 
 3562 3d90 A5150000 		_ADR XORR  
 3563 3d94 F71B0000 		_QBRAN 9f  
 3563      AA000000 
 3564 3d9c 951D0000 	// no ps2 keyboard 
 3565 3da0 371C0000 	// swith to serial console
 3565      D43D0000 
 3566              		_ADR CR 
 3567              		_DOTQP 25,"no PS2 keyboard detected."
 3568 3da8 DD290000 		_ADR SERIAL 
 3569 3dac 452A0000 		_ADR CONSOLE 
 3569      196E6F20 
 3569      50533220 
 3569      6B657962 
 3569      6F617264 
 3570 3dcc B9050000 	9:	_UNNEST 
 3571 3dd0 D1050000 	
 3572 3dd4 7F1A0000 	/*************************
 3573              	   check PA8 to 
 3574              	   select console 
 3575              	   PA8 -> low  LOCAL 
 3576              	   PA8 -> high SERIAL 
 3577              	*************************/
 3578              	IF_SENSE:
 3579              		_NEST 
 3580              		_ADR LOCAL 
 3581 3dd8 504700BF 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3582 3ddc A1050000 		_ADR AT 
 3583 3de0 F71B0000 		_DOLIT (1<<8)
 3583      10000240 
 3584 3de8 7D1C0000 		_ADR ANDD 
 3585 3dec F71B0000 		_QBRAN 9f 
 3585      00010000 
 3586 3df4 6D1D0000 		_ADR ONEP 
 3587 3df8 371C0000 	9:  _ADR CONSOLE 
 3587      043E0000 
 3588 3e00 491E0000 		_UNNEST 
 3589 3e04 D1050000 	
 3590 3e08 7F1A0000 	
 3591              	/********************
 3592              	    COLD	( -- )
 3593              	 	The high level cold 
 3594              		start sequence.
 3595              	**************************/
 3596              		.word	LINK 
 3597              		LINK = . 
 3598 3e0c F83C0000 	_LASTN:	.byte  4
 3599              		.ascii "COLD"
 3600 3e10 04       		.p2align 2	
 3601 3e11 434F4C44 	COLD:
 3602 3e15 0000BF   		_CALL forth_init 
 3603              		ldr IP,=COLD1 
 3604 3e18 00B5FCF7 		_NEXT
 3604      A5F95DF8 
 3604      04EB
 3605 3e22 DFF858C0 		.p2align 2 
ARM GAS  forth.s 			page 146


 3606 3e26 FDF727BE 	COLD1:
 3607 3e2a 00BF     		_DOLIT  0 
 3608              		_ADR ULED // turn off user LED 
 3609 3e2c F71B0000 		_DOLIT	UZERO
 3609      00000000 
 3610 3e34 CD1B0000 		_DOLIT	UPP
 3611 3e38 F71B0000 		_DOLIT	ULAST-UZERO
 3611      F4030000 
 3612 3e40 F71B0000 		_ADR	MOVE 			// initialize user area
 3612      00000020 
 3613 3e48 F71B0000 		_ADR	PRESE			// initialize stack and TIB
 3613      A8000000 
 3614 3e50 25250000 		_ADR	IF_SENSE
 3615 3e54 21320000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 3616 3e58 D93D0000 		_ADR 	PS2_QUERY  
 3617 3e5c 45180000 		_ADR	TBOOT
 3618 3e60 613D0000 		_ADR	ATEXE			// application boot
 3619 3e64 31210000 		_ADR	OVERT
 3620 3e68 D5240000 		_BRAN	QUIT			// start interpretation
 3621 3e6c F5370000 	COLD2:
 3622 3e70 4B1C0000 		.p2align 2 	
 3622      40320000 
 3623              	CTOP:
 3624              		.word	0XFFFFFFFF		//  keep CTOP even
 3625              	
 3626 3e78 FFFFFFFF 	
 3627              	  .end 
 3628              	
 3629 3e7c 2C3E0000 	...
ARM GAS  forth.s 			page 147


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 148


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 149


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 150


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 151


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 152


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 153


             forth.s:2500   .text:00000000000031dc EVAL
             forth.s:1510   .text:0000000000002678 HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:00000000000007c8 tv_out_isr
          ser-term.s:35     .text:00000000000004ac uart_rx_handler
           ps2_kbd.s:78     .text:00000000000010a4 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:89     .text:0000000000001a78 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2521   .text:0000000000003220 PRESE
             forth.s:270    .text:0000000000001bf6 DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:883    .text:00000000000020ac COUNT
             forth.s:1774   .text:00000000000029a8 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:439    .text:0000000000001d28 DUPP
             forth.s:395    .text:0000000000001cd0 TOR
             forth.s:970    .text:0000000000002144 BASE
             forth.s:341    .text:0000000000001c68 STORE
             forth.s:1912   .text:0000000000002ae0 DOT
             forth.s:377    .text:0000000000001ca8 RFROM
             forth.s:474    .text:0000000000001d6c ANDD
             forth.s:311    .text:0000000000001c36 QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:156    .text:0000000000001b00 EMIT
             forth.s:1746   .text:0000000000002954 SPACE
              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
ARM GAS  forth.s 			page 154


              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:1792   .text:00000000000029dc CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:389    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004da ser_init
             tvout.s:74     .text:0000000000000718 tv_init
           ps2_kbd.s:307    .text:00000000000012c4 kbd_init
         spi-flash.s:39     .text:00000000000016cc flash_spi_init
             forth.s:3603   .text:0000000000003e18 COLD
             forth.s:85     .text:0000000000001a70 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:479    .text:0000000000000332 gpio_config
              init.s:554    .text:00000000000003de gpio_out
              init.s:414    .text:00000000000002a8 nvic_set_priority
              init.s:569    .text:00000000000003f4 UZERO
              init.s:605    .text:000000000000049c ULAST
              init.s:423    .text:00000000000002c0 negative_irq
              init.s:435    .text:00000000000002da nvic_enable_irq
              init.s:452    .text:0000000000000304 nvic_disable_irq
              init.s:516    .text:000000000000039a input_pull
              init.s:509    .text:0000000000000388 output_type
              init.s:532    .text:00000000000003b0 gpio_speed
              init.s:570    .text:00000000000003f4 $d
             forth.s:3528   .text:0000000000003cfc HI
           ps2_kbd.s:396    .text:00000000000013c0 PS2_QKEY
             tvout.s:565    .text:0000000000000c88 TV_EMIT
             forth.s:2437   .text:00000000000030f8 INTER
             forth.s:3600   .text:0000000000003e10 _LASTN
             forth.s:3625   .text:0000000000003e78 CTOP
             forth.s:3599   .text:0000000000003e10 LINK
              init.s:610    .text:000000000000049c $d
          ser-term.s:33     .text:00000000000004ac $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000532 $d
          ser-term.s:90     .text:0000000000000536 _SER_QKEY
          ser-term.s:90     .text:0000000000000540 SER_QKEY
          ser-term.s:110    .text:000000000000056c $d
          ser-term.s:110    .text:0000000000000570 _SER_EMIT
          ser-term.s:110    .text:000000000000057c SER_EMIT
          ser-term.s:124    .text:0000000000000596 $d
          ser-term.s:124    .text:000000000000059a _LOCAL
          ser-term.s:124    .text:00000000000005a0 $t
          ser-term.s:124    .text:00000000000005a0 LOCAL
          ser-term.s:133    .text:00000000000005ac $d
          ser-term.s:133    .text:00000000000005b0 _SERIAL
          ser-term.s:133    .text:00000000000005b8 SERIAL
          ser-term.s:142    .text:00000000000005c4 $d
ARM GAS  forth.s 			page 155


          ser-term.s:142    .text:00000000000005c8 _CONSOLE
          ser-term.s:142    .text:00000000000005d0 $t
          ser-term.s:142    .text:00000000000005d0 CONSOLE
          ser-term.s:164    .text:00000000000005f0 $d
          ser-term.s:164    .text:00000000000005f4 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000600 ANSI_PARAM
          ser-term.s:166    .text:0000000000000604 $d
             forth.s:580    .text:0000000000001e48 ONEP
             forth.s:1191   .text:0000000000002338 SLMOD
             forth.s:669    .text:0000000000001efc QDUP
             forth.s:326    .text:0000000000001c4a BRAN
             forth.s:531    .text:0000000000001dec PLUS
             forth.s:588    .text:0000000000001e58 ONEM
             forth.s:92     .text:0000000000001a7e UNNEST
          ser-term.s:191    .text:0000000000000670 _ANSI_ESC
          ser-term.s:191    .text:0000000000000678 ANSI_ESC
          ser-term.s:193    .text:000000000000067c $d
          ser-term.s:203    .text:000000000000069c _SER_AT
          ser-term.s:203    .text:00000000000006a4 SER_AT
          ser-term.s:205    .text:00000000000006a8 $d
             forth.s:447    .text:0000000000001d38 SWAP
          ser-term.s:219    .text:00000000000006d8 _SER_CLS
          ser-term.s:219    .text:00000000000006e0 $t
          ser-term.s:219    .text:00000000000006e0 SER_CLS
          ser-term.s:221    .text:00000000000006e4 $d
          ser-term.s:228    .text:0000000000000708 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000718 $t
ARM GAS  forth.s 			page 156


             tvout.s:150    .text:00000000000007f4 state_vsync
             tvout.s:191    .text:0000000000000848 state_pre_video
             tvout.s:202    .text:000000000000085a state_video_out
             tvout.s:237    .text:00000000000008b8 state_post_video
             tvout.s:254    .text:00000000000008de tv_isr_exit
             tvout.s:180    .text:000000000000082e sync_end
             tvout.s:246    .text:00000000000008ca frame_end
             tvout.s:264    .text:00000000000008e0 $d
             tvout.s:264    .text:00000000000008e4 _BACKCOLOR
             tvout.s:264    .text:00000000000008f0 BACKCOLOR
             tvout.s:271    .text:00000000000008fc $d
             tvout.s:271    .text:0000000000000900 _PENCOLOR
             tvout.s:271    .text:000000000000090a $t
             tvout.s:271    .text:000000000000090c PENCOLOR
             tvout.s:278    .text:0000000000000918 $d
             tvout.s:278    .text:000000000000091c _CURSOR_COL
             tvout.s:278    .text:0000000000000924 CURSOR_COL
             tvout.s:285    .text:0000000000000930 $d
             tvout.s:285    .text:0000000000000934 _CURSOR_ROW
             tvout.s:285    .text:0000000000000938 $t
             tvout.s:285    .text:0000000000000938 CURSOR_ROW
             tvout.s:292    .text:0000000000000944 $d
             tvout.s:292    .text:0000000000000948 _ROWY
             tvout.s:292    .text:000000000000094e $t
             tvout.s:292    .text:0000000000000950 ROWY
             tvout.s:299    .text:000000000000095c $d
             tvout.s:299    .text:0000000000000960 _COLX
             tvout.s:299    .text:0000000000000966 $t
             tvout.s:299    .text:0000000000000968 COLX
             tvout.s:306    .text:0000000000000974 $d
             tvout.s:306    .text:0000000000000978 _FONT
             tvout.s:306    .text:0000000000000980 FONT
             tvout.s:740    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:000000000000098c $d
             tvout.s:313    .text:0000000000000990 _VIDBUFF
             tvout.s:313    .text:0000000000000998 $t
             tvout.s:313    .text:0000000000000998 VIDBUFF
             tvout.s:325    .text:00000000000009a2 $d
             tvout.s:325    .text:00000000000009a6 _PLOT
             tvout.s:325    .text:00000000000009ac PLOT
             tvout.s:373    .text:0000000000000a30 plot_op
             tvout.s:341    .text:00000000000009d8 op_back
             tvout.s:350    .text:00000000000009f2 op_pen
             tvout.s:359    .text:0000000000000a0c op_invert
             tvout.s:363    .text:0000000000000a14 op_xor
             tvout.s:373    .text:0000000000000a30 $d
             tvout.s:378    .text:0000000000000a38 _VSYNC
             tvout.s:378    .text:0000000000000a3e $t
             tvout.s:378    .text:0000000000000a40 VSYNC
             tvout.s:386    .text:0000000000000a4a $d
             tvout.s:386    .text:0000000000000a4e _CLS
             tvout.s:386    .text:0000000000000a52 $t
             tvout.s:386    .text:0000000000000a54 CLS
             tvout.s:410    .text:0000000000000a96 $d
             tvout.s:410    .text:0000000000000a9a _CLRLINE
             tvout.s:410    .text:0000000000000aa2 $t
             tvout.s:410    .text:0000000000000aa4 CLRLINE
ARM GAS  forth.s 			page 157


             tvout.s:412    .text:0000000000000aa8 $d
             forth.s:549    .text:0000000000001e0c STAR
             forth.s:1418   .text:000000000000256c FILL
             tvout.s:427    .text:0000000000000adc _SCROLLUP
             tvout.s:427    .text:0000000000000ae8 SCROLLUP
             tvout.s:429    .text:0000000000000aec $d
             forth.s:540    .text:0000000000001dfc SUBB
             forth.s:1386   .text:0000000000002524 MOVE
             tvout.s:448    .text:0000000000000b34 _SCROLLDOWN
             tvout.s:448    .text:0000000000000b40 SCROLLDOWN
             tvout.s:450    .text:0000000000000b44 $d
             tvout.s:467    .text:0000000000000b84 _TV_CRLF
             tvout.s:467    .text:0000000000000b8c $t
             tvout.s:467    .text:0000000000000b8c TV_CRLF
             tvout.s:482    .text:0000000000000bae $d
             tvout.s:482    .text:0000000000000bb2 _RIGHT
             tvout.s:482    .text:0000000000000bb8 $t
             tvout.s:482    .text:0000000000000bb8 RIGHT
             tvout.s:495    .text:0000000000000bcc $d
             tvout.s:495    .text:0000000000000bd0 _LEFT
             tvout.s:495    .text:0000000000000bd8 LEFT
             tvout.s:511    .text:0000000000000c04 FONT_PIXEL
             tvout.s:518    .text:0000000000000c14 INCR_X
             tvout.s:525    .text:0000000000000c20 NEXT_PIXEL
             tvout.s:534    .text:0000000000000c28 CHAR_ROW
             tvout.s:536    .text:0000000000000c2c $d
             forth.s:719    .text:0000000000001f60 DDUP
             forth.s:386    .text:0000000000001cbc RAT
             forth.s:292    .text:0000000000001c18 DONXT
             forth.s:710    .text:0000000000001f4c TDROP
             tvout.s:553    .text:0000000000000c68 CHAR_FONT
             tvout.s:554    .text:0000000000000c68 $t
             tvout.s:565    .text:0000000000000c7c $d
             tvout.s:565    .text:0000000000000c80 _TV_EMIT
             tvout.s:565    .text:0000000000000c88 $t
             tvout.s:567    .text:0000000000000c8c $d
             forth.s:791    .text:0000000000001ff4 ULESS
             tvout.s:595    .text:0000000000000d10 CTRL_KEY
             forth.s:351    .text:0000000000001c7c AT
             forth.s:679    .text:0000000000001f10 ROT
             forth.s:369    .text:0000000000001c9c CAT
             tvout.s:662    .text:0000000000000df8 SHOW_CURSOR
             tvout.s:693    .text:0000000000000e80 HIDE_CURSOR
             forth.s:779    .text:0000000000001fdc EQUAL
             tvout.s:652    .text:0000000000000dd8 BACK_SPACE
             forth.s:431    .text:0000000000001d18 DROP
             tvout.s:620    .text:0000000000000d80 CAR_RET
             tvout.s:631    .text:0000000000000d98 LN_FEED
             tvout.s:621    .text:0000000000000d80 $t
             tvout.s:622    .text:0000000000000d84 $d
             tvout.s:632    .text:0000000000000d98 $t
             tvout.s:633    .text:0000000000000d9c $d
             forth.s:492    .text:0000000000001d94 XORR
             tvout.s:653    .text:0000000000000dd8 $t
             tvout.s:654    .text:0000000000000ddc $d
             tvout.s:662    .text:0000000000000dec _SHOW_CURSOR
             tvout.s:662    .text:0000000000000df8 $t
ARM GAS  forth.s 			page 158


             tvout.s:665    .text:0000000000000dfc $d
             forth.s:661    .text:0000000000001eec TWOSL
             forth.s:359    .text:0000000000001c88 CSTOR
             forth.s:701    .text:0000000000001f38 DDROP
             tvout.s:693    .text:0000000000000e74 _HIDE_CURSOR
             tvout.s:693    .text:0000000000000e80 $t
             tvout.s:696    .text:0000000000000e84 $d
             forth.s:522    .text:0000000000001ddc LSHIFT
             forth.s:483    .text:0000000000001d80 ORR
             tvout.s:706    .text:0000000000000eac _TV_AT
             tvout.s:706    .text:0000000000000eb2 $t
             tvout.s:706    .text:0000000000000eb4 TV_AT
             tvout.s:721    .text:0000000000000ed8 $d
             tvout.s:721    .text:0000000000000edc _INPUT
             tvout.s:721    .text:0000000000000ee2 $t
             tvout.s:721    .text:0000000000000ee4 INPUT
             tvout.s:723    .text:0000000000000ee8 $d
             forth.s:1330   .text:000000000000249c PAD
             forth.s:2345   .text:0000000000002fe4 ACCEP
             forth.s:457    .text:0000000000001d4c OVER
             tvout.s:736    .rodata:0000000000000000 $d
             tvout.s:841    .text:0000000000000f14 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
ARM GAS  forth.s 			page 159


       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
ARM GAS  forth.s 			page 160


       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f20 sc_ascii
         mcSaite.inc:100    .text:0000000000000fd4 shifted
         mcSaite.inc:151    .text:0000000000001034 altchar
         mcSaite.inc:167    .text:0000000000001044 extended
         mcSaite.inc:191    .text:000000000000106c controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
ARM GAS  forth.s 			page 161


           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:00000000000010a2 $t
           ps2_kbd.s:179    .text:00000000000011ce send_bit
           ps2_kbd.s:107    .text:0000000000001104 start_bit
           ps2_kbd.s:118    .text:0000000000001128 parity_bit
           ps2_kbd.s:125    .text:000000000000113c stop_bit
           ps2_kbd.s:152    .text:0000000000001192 store_code
           ps2_kbd.s:253    .text:0000000000001262 do_async_key
           ps2_kbd.s:204    .text:0000000000001212 send_parity
           ps2_kbd.s:211    .text:0000000000001224 send_stop
           ps2_kbd.s:218    .text:000000000000122e rx_ack_bit
           ps2_kbd.s:236    .text:000000000000124e is_async_key
           ps2_kbd.s:286    .text:00000000000012b2 async_keys
           ps2_kbd.s:378    .text:0000000000001396 table_scan
           ps2_kbd.s:260    .text:0000000000001274 set_async_key
           ps2_kbd.s:295    .text:00000000000012c0 async_jump
           ps2_kbd.s:265    .text:0000000000001282 shift_key
           ps2_kbd.s:273    .text:0000000000001292 set_reset
           ps2_kbd.s:268    .text:0000000000001288 ctrl_key
           ps2_kbd.s:271    .text:000000000000128e alt_key
           ps2_kbd.s:287    .text:00000000000012b2 $d
           ps2_kbd.s:340    .text:0000000000001340 $d
           ps2_kbd.s:340    .text:0000000000001344 _KEY_ASYNC
           ps2_kbd.s:340    .text:000000000000134e $t
           ps2_kbd.s:340    .text:0000000000001350 KEY_ASYNC
           ps2_kbd.s:350    .text:000000000000135e keycode
           ps2_kbd.s:365    .text:0000000000001386 wait_code
           ps2_kbd.s:396    .text:00000000000013b0 $d
           ps2_kbd.s:396    .text:00000000000013b4 _PS2_QKEY
           ps2_kbd.s:416    .text:000000000000140c inkey_exit
           ps2_kbd.s:418    .text:000000000000140e pause_key
           ps2_kbd.s:427    .text:0000000000001422 do_modifiers
           ps2_kbd.s:436    .text:000000000000143a shift_down
           ps2_kbd.s:440    .text:0000000000001440 altchar_down
           ps2_kbd.s:444    .text:0000000000001446 ctrl_down
           ps2_kbd.s:452    .text:0000000000001462 do_capslock
           ps2_kbd.s:478    .text:0000000000001486 kbd_send
           ps2_kbd.s:553    .text:000000000000157a kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001598 $d
           ps2_kbd.s:567    .text:000000000000159c _KBD_RST
           ps2_kbd.s:567    .text:00000000000015a4 $t
           ps2_kbd.s:567    .text:00000000000015a4 KBD_RST
           ps2_kbd.s:591    .text:00000000000015ec $d
           ps2_kbd.s:591    .text:00000000000015f0 _KBD_LED
           ps2_kbd.s:591    .text:00000000000015f8 $t
           ps2_kbd.s:591    .text:00000000000015f8 KBD_LED
           ps2_kbd.s:616    .text:000000000000164a $d
           ps2_kbd.s:616    .text:000000000000164e _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001658 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001680 $d
           ps2_kbd.s:633    .text:0000000000001684 _WKEY
           ps2_kbd.s:633    .text:0000000000001690 WKEY
           ps2_kbd.s:635    .text:0000000000001694 $d
ARM GAS  forth.s 			page 162


           ps2_kbd.s:640    .text:00000000000016ac $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016cc $t
         spi-flash.s:83     .text:000000000000176e $d
         spi-flash.s:83     .text:0000000000001772 _CHIP_SEL
         spi-flash.s:83     .text:000000000000177c CHIP_SEL
         spi-flash.s:95     .text:0000000000001798 $d
         spi-flash.s:95     .text:000000000000179c _CHIP_DSEL
         spi-flash.s:95     .text:00000000000017a6 $t
         spi-flash.s:95     .text:00000000000017a8 CHIP_DSEL
         spi-flash.s:111    .text:00000000000017d4 $d
         spi-flash.s:111    .text:00000000000017d8 _RD_BYTE
         spi-flash.s:111    .text:00000000000017e0 $t
         spi-flash.s:111    .text:00000000000017e0 RD_BYTE
         spi-flash.s:131    .text:0000000000001806 $d
         spi-flash.s:131    .text:000000000000180a _WR_BYTE
         spi-flash.s:131    .text:0000000000001812 $t
         spi-flash.s:131    .text:0000000000001814 WR_BYTE
         spi-flash.s:149    .text:0000000000001836 $d
         spi-flash.s:149    .text:000000000000183a _WR_DIS
         spi-flash.s:149    .text:0000000000001844 WR_DIS
         spi-flash.s:151    .text:0000000000001848 $d
         spi-flash.s:161    .text:0000000000001864 _WR_ENBL
         spi-flash.s:161    .text:000000000000186c $t
         spi-flash.s:161    .text:000000000000186c WR_ENBL
         spi-flash.s:163    .text:0000000000001870 $d
         spi-flash.s:173    .text:000000000000188c _RD_SR
         spi-flash.s:173    .text:0000000000001892 $t
         spi-flash.s:173    .text:0000000000001894 RD_SR
         spi-flash.s:175    .text:0000000000001898 $d
         spi-flash.s:183    .text:00000000000018bc sr_cmd
         spi-flash.s:189    .text:00000000000018c3 _SEND_ADR
         spi-flash.s:189    .text:00000000000018cc $t
         spi-flash.s:189    .text:00000000000018cc SEND_ADR
         spi-flash.s:191    .text:00000000000018d0 $d
             forth.s:513    .text:0000000000001dc4 RSHIFT
         spi-flash.s:206    .text:0000000000001904 _WAIT_DONE
         spi-flash.s:206    .text:000000000000190e $t
         spi-flash.s:206    .text:0000000000001910 WAIT_DONE
         spi-flash.s:208    .text:0000000000001914 $d
         spi-flash.s:221    .text:0000000000001944 _ERASE_BLK
         spi-flash.s:221    .text:000000000000194e $t
         spi-flash.s:221    .text:0000000000001950 ERASE_BLK
         spi-flash.s:223    .text:0000000000001954 $d
         spi-flash.s:236    .text:000000000000197c _ERASE_CHIP
         spi-flash.s:236    .text:0000000000001988 ERASE_CHIP
         spi-flash.s:238    .text:000000000000198c $d
         spi-flash.s:254    .text:00000000000019bc _RD_BLK
         spi-flash.s:254    .text:00000000000019c4 RD_BLK
         spi-flash.s:256    .text:00000000000019c8 $d
         spi-flash.s:276    .text:0000000000001a10 _WR_BLK
         spi-flash.s:276    .text:0000000000001a18 WR_BLK
         spi-flash.s:278    .text:0000000000001a1c $d
             forth.s:1932   .text:0000000000002b20 DOTH
ARM GAS  forth.s 			page 163


             forth.s:82     .text:0000000000001a70 $t
             forth.s:105    .text:0000000000001a88 COMPI_NEST
             forth.s:118    .text:0000000000001aa6 TSTDIN
             forth.s:125    .text:0000000000001ab0 TSTDOUT
             forth.s:134    .text:0000000000001aba $d
             forth.s:134    .text:0000000000001abe _QKEY
             forth.s:134    .text:0000000000001ac4 QKEY
             forth.s:136    .text:0000000000001ac8 $d
             forth.s:1353   .text:00000000000024d4 ATEXE
             forth.s:144    .text:0000000000001ad8 _KEY
             forth.s:144    .text:0000000000001adc $t
             forth.s:144    .text:0000000000001adc KEY
             forth.s:146    .text:0000000000001ae0 KEY1
             forth.s:147    .text:0000000000001ae0 $d
             forth.s:156    .text:0000000000001af8 _EMIT
             forth.s:158    .text:0000000000001b04 $d
             forth.s:192    .text:0000000000001b14 _RAND
             forth.s:192    .text:0000000000001b1c RAND
             forth.s:194    .text:0000000000001b20 $d
             forth.s:758    .text:0000000000001fb4 ABSS
             forth.s:934    .text:00000000000020f4 SEED
             forth.s:1204   .text:0000000000002358 MODD
             forth.s:223    .text:0000000000001b90 _PAUSE
             forth.s:223    .text:0000000000001b96 $t
             forth.s:223    .text:0000000000001b98 PAUSE
             forth.s:225    .text:0000000000001b9c $d
             forth.s:952    .text:000000000000211c TIMER
             forth.s:227    .text:0000000000001ba4 PAUSE_LOOP
             forth.s:232    .text:0000000000001bbc PAUSE_EXIT
             forth.s:239    .text:0000000000001bc4 _ULED
             forth.s:239    .text:0000000000001bcc ULED
             forth.s:248    .text:0000000000001be8 ULED_OFF
             forth.s:262    .text:0000000000001bec $d
             forth.s:262    .text:0000000000001bf0 _NOP
             forth.s:262    .text:0000000000001bf4 $t
             forth.s:262    .text:0000000000001bf4 NOP
             forth.s:279    .text:0000000000001c00 $d
             forth.s:279    .text:0000000000001c04 _EXECU
             forth.s:279    .text:0000000000001c0c $t
             forth.s:279    .text:0000000000001c0c EXECU
             forth.s:299    .text:0000000000001c28 NEXT1
             forth.s:317    .text:0000000000001c44 QBRAN1
             forth.s:334    .text:0000000000001c50 $d
             forth.s:334    .text:0000000000001c54 _EXIT
             forth.s:334    .text:0000000000001c5c EXIT
             forth.s:335    .text:0000000000001c5c $d
             forth.s:341    .text:0000000000001c64 _STORE
             forth.s:341    .text:0000000000001c66 $t
             forth.s:351    .text:0000000000001c74 $d
             forth.s:351    .text:0000000000001c78 _AT
             forth.s:351    .text:0000000000001c7a $t
             forth.s:359    .text:0000000000001c80 $d
             forth.s:359    .text:0000000000001c84 _CSTOR
             forth.s:369    .text:0000000000001c94 $d
             forth.s:369    .text:0000000000001c98 _CAT
             forth.s:377    .text:0000000000001ca0 $d
             forth.s:377    .text:0000000000001ca4 _RFROM
ARM GAS  forth.s 			page 164


             forth.s:386    .text:0000000000001cb2 $d
             forth.s:386    .text:0000000000001cb6 _RAT
             forth.s:395    .text:0000000000001cc6 $d
             forth.s:395    .text:0000000000001cca _TOR
             forth.s:404    .text:0000000000001cda $d
             forth.s:404    .text:0000000000001cde _RPSTOR
             forth.s:404    .text:0000000000001ce2 $t
             forth.s:404    .text:0000000000001ce4 RPSTOR
             forth.s:413    .text:0000000000001cec $d
             forth.s:413    .text:0000000000001cf0 _SPSTOR
             forth.s:413    .text:0000000000001cf4 $t
             forth.s:413    .text:0000000000001cf4 SPSTOR
             forth.s:422    .text:0000000000001cfc $d
             forth.s:422    .text:0000000000001d00 _SPAT
             forth.s:422    .text:0000000000001d04 $t
             forth.s:422    .text:0000000000001d04 SPAT
             forth.s:431    .text:0000000000001d0c $d
             forth.s:431    .text:0000000000001d10 _DROP
             forth.s:439    .text:0000000000001d1e $d
             forth.s:439    .text:0000000000001d22 _DUPP
             forth.s:439    .text:0000000000001d26 $t
             forth.s:447    .text:0000000000001d2e $d
             forth.s:447    .text:0000000000001d32 _SWAP
             forth.s:457    .text:0000000000001d40 $d
             forth.s:457    .text:0000000000001d44 _OVER
             forth.s:466    .text:0000000000001d54 $d
             forth.s:466    .text:0000000000001d58 _ZLESS
             forth.s:466    .text:0000000000001d5c ZLESS
             forth.s:474    .text:0000000000001d62 $d
             forth.s:474    .text:0000000000001d66 _ANDD
             forth.s:474    .text:0000000000001d6a $t
             forth.s:483    .text:0000000000001d76 $d
             forth.s:483    .text:0000000000001d7a _ORR
             forth.s:492    .text:0000000000001d8a $d
             forth.s:492    .text:0000000000001d8e _XORR
             forth.s:492    .text:0000000000001d92 $t
             forth.s:501    .text:0000000000001d9e $d
             forth.s:501    .text:0000000000001da2 _UPLUS
             forth.s:501    .text:0000000000001da6 $t
             forth.s:501    .text:0000000000001da8 UPLUS
             forth.s:513    .text:0000000000001db8 $d
             forth.s:513    .text:0000000000001dbc _RSHIFT
             forth.s:522    .text:0000000000001dce $d
             forth.s:522    .text:0000000000001dd2 _LSHIFT
             forth.s:531    .text:0000000000001de6 $d
             forth.s:531    .text:0000000000001dea _PLUS
             forth.s:531    .text:0000000000001dec $t
             forth.s:540    .text:0000000000001df4 $d
             forth.s:540    .text:0000000000001df8 _SUBB
             forth.s:540    .text:0000000000001dfa $t
             forth.s:549    .text:0000000000001e06 $d
             forth.s:549    .text:0000000000001e0a _STAR
             forth.s:549    .text:0000000000001e0c $t
             forth.s:558    .text:0000000000001e16 $d
             forth.s:558    .text:0000000000001e1a _UMSTA
             forth.s:558    .text:0000000000001e1e $t
             forth.s:558    .text:0000000000001e20 UMSTA
ARM GAS  forth.s 			page 165


             forth.s:569    .text:0000000000001e2c $d
             forth.s:569    .text:0000000000001e30 _MSTAR
             forth.s:569    .text:0000000000001e34 MSTAR
             forth.s:580    .text:0000000000001e40 $d
             forth.s:580    .text:0000000000001e44 _ONEP
             forth.s:588    .text:0000000000001e4e $d
             forth.s:588    .text:0000000000001e52 _ONEM
             forth.s:596    .text:0000000000001e5e $d
             forth.s:596    .text:0000000000001e62 _TWOP
             forth.s:596    .text:0000000000001e68 TWOP
             forth.s:604    .text:0000000000001e6e $d
             forth.s:604    .text:0000000000001e72 _TWOM
             forth.s:604    .text:0000000000001e78 TWOM
             forth.s:612    .text:0000000000001e7e $d
             forth.s:612    .text:0000000000001e82 _CELLP
             forth.s:612    .text:0000000000001e88 $t
             forth.s:612    .text:0000000000001e88 CELLP
             forth.s:620    .text:0000000000001e8e $d
             forth.s:620    .text:0000000000001e92 _CELLM
             forth.s:620    .text:0000000000001e98 $t
             forth.s:620    .text:0000000000001e98 CELLM
             forth.s:628    .text:0000000000001e9e $d
             forth.s:628    .text:0000000000001ea2 _BLANK
             forth.s:628    .text:0000000000001ea8 BLANK
             forth.s:637    .text:0000000000001eb2 $d
             forth.s:637    .text:0000000000001eb6 _CELLS
             forth.s:637    .text:0000000000001ebc $t
             forth.s:637    .text:0000000000001ebc CELLS
             forth.s:645    .text:0000000000001ec2 $d
             forth.s:645    .text:0000000000001ec6 _CELLSL
             forth.s:645    .text:0000000000001ecc $t
             forth.s:645    .text:0000000000001ecc CELLSL
             forth.s:653    .text:0000000000001ed2 $d
             forth.s:653    .text:0000000000001ed6 _TWOST
             forth.s:653    .text:0000000000001edc TWOST
             forth.s:661    .text:0000000000001ee2 $d
             forth.s:661    .text:0000000000001ee6 _TWOSL
             forth.s:669    .text:0000000000001ef2 $d
             forth.s:669    .text:0000000000001ef6 _QDUP
             forth.s:679    .text:0000000000001f06 $d
             forth.s:679    .text:0000000000001f0a _ROT
             forth.s:679    .text:0000000000001f0e $t
             forth.s:690    .text:0000000000001f1a $d
             forth.s:690    .text:0000000000001f1e _NROT
             forth.s:690    .text:0000000000001f24 NROT
             forth.s:701    .text:0000000000001f2e $d
             forth.s:701    .text:0000000000001f32 _DDROP
             forth.s:701    .text:0000000000001f38 $t
             forth.s:710    .text:0000000000001f42 $d
             forth.s:710    .text:0000000000001f46 _TDROP
             forth.s:710    .text:0000000000001f4c $t
             forth.s:719    .text:0000000000001f56 $d
             forth.s:719    .text:0000000000001f5a _DDUP
             forth.s:729    .text:0000000000001f6c $d
             forth.s:729    .text:0000000000001f70 _DPLUS
             forth.s:729    .text:0000000000001f74 DPLUS
             forth.s:742    .text:0000000000001f88 $d
ARM GAS  forth.s 			page 166


             forth.s:742    .text:0000000000001f8c _INVER
             forth.s:742    .text:0000000000001f90 $t
             forth.s:742    .text:0000000000001f90 INVER
             forth.s:750    .text:0000000000001f96 $d
             forth.s:750    .text:0000000000001f9a _NEGAT
             forth.s:750    .text:0000000000001fa4 NEGAT
             forth.s:758    .text:0000000000001faa $d
             forth.s:758    .text:0000000000001fae _ABSS
             forth.s:758    .text:0000000000001fb2 $t
             forth.s:768    .text:0000000000001fbe $d
             forth.s:768    .text:0000000000001fc2 _ZEQUAL
             forth.s:768    .text:0000000000001fc8 ZEQUAL
             forth.s:779    .text:0000000000001fd6 $d
             forth.s:779    .text:0000000000001fda _EQUAL
             forth.s:779    .text:0000000000001fdc $t
             forth.s:791    .text:0000000000001fec $d
             forth.s:791    .text:0000000000001ff0 _ULESS
             forth.s:803    .text:0000000000002004 $d
             forth.s:803    .text:0000000000002008 _LESS
             forth.s:803    .text:000000000000200a $t
             forth.s:803    .text:000000000000200c LESS
             forth.s:815    .text:000000000000201c $d
             forth.s:815    .text:0000000000002020 _GREAT
             forth.s:815    .text:0000000000002022 $t
             forth.s:815    .text:0000000000002024 GREAT
             forth.s:827    .text:0000000000002034 $d
             forth.s:827    .text:0000000000002038 _MAX
             forth.s:827    .text:000000000000203c $t
             forth.s:827    .text:000000000000203c MAX
             forth.s:838    .text:0000000000002048 $d
             forth.s:838    .text:000000000000204c _MIN
             forth.s:838    .text:0000000000002050 $t
             forth.s:838    .text:0000000000002050 MIN
             forth.s:849    .text:000000000000205c $d
             forth.s:849    .text:0000000000002060 _PSTOR
             forth.s:849    .text:0000000000002064 PSTOR
             forth.s:861    .text:0000000000002074 $d
             forth.s:861    .text:0000000000002078 _DSTOR
             forth.s:861    .text:000000000000207c DSTOR
             forth.s:873    .text:0000000000002090 $d
             forth.s:873    .text:0000000000002094 _DAT
             forth.s:873    .text:0000000000002098 DAT
             forth.s:883    .text:00000000000020a2 $d
             forth.s:883    .text:00000000000020a6 _COUNT
             forth.s:883    .text:00000000000020ac $t
             forth.s:893    .text:00000000000020b8 $d
             forth.s:893    .text:00000000000020bc _DNEGA
             forth.s:893    .text:00000000000020c4 $t
             forth.s:893    .text:00000000000020c4 DNEGA
             forth.s:910    .text:00000000000020d4 DOVAR
             forth.s:921    .text:00000000000020e0 DOCON
             forth.s:934    .text:00000000000020ea $d
             forth.s:934    .text:00000000000020ee _SEED
             forth.s:943    .text:00000000000020fe $d
             forth.s:943    .text:0000000000002102 _MSEC
             forth.s:943    .text:0000000000002108 MSEC
             forth.s:952    .text:0000000000002112 $d
ARM GAS  forth.s 			page 167


             forth.s:952    .text:0000000000002116 _TIMER
             forth.s:952    .text:000000000000211c $t
             forth.s:961    .text:0000000000002126 $d
             forth.s:961    .text:000000000000212a _TBOOT
             forth.s:961    .text:0000000000002130 $t
             forth.s:961    .text:0000000000002130 TBOOT
             forth.s:970    .text:000000000000213a $d
             forth.s:970    .text:000000000000213e _BASE
             forth.s:980    .text:000000000000214e TEMP
             forth.s:989    .text:0000000000002158 $d
             forth.s:989    .text:000000000000215c _SPAN
             forth.s:989    .text:0000000000002164 SPAN
             forth.s:998    .text:000000000000216e $d
             forth.s:998    .text:0000000000002172 _INN
             forth.s:998    .text:0000000000002176 $t
             forth.s:998    .text:0000000000002178 INN
             forth.s:1008   .text:0000000000002182 $d
             forth.s:1008   .text:0000000000002186 _NTIB
             forth.s:1008   .text:000000000000218c NTIB
             forth.s:1017   .text:0000000000002196 $d
             forth.s:1017   .text:000000000000219a _TEVAL
             forth.s:1017   .text:00000000000021a0 $t
             forth.s:1017   .text:00000000000021a0 TEVAL
             forth.s:1027   .text:00000000000021aa $d
             forth.s:1027   .text:00000000000021ae _HLD
             forth.s:1027   .text:00000000000021b2 $t
             forth.s:1027   .text:00000000000021b4 HLD
             forth.s:1037   .text:00000000000021be $d
             forth.s:1037   .text:00000000000021c2 _CNTXT
             forth.s:1037   .text:00000000000021ca $t
             forth.s:1037   .text:00000000000021cc CNTXT
             forth.s:1038   .text:00000000000021cc CRRNT
             forth.s:1048   .text:00000000000021d6 $d
             forth.s:1048   .text:00000000000021da _CPP
             forth.s:1048   .text:00000000000021e0 CPP
             forth.s:1058   .text:00000000000021ea $d
             forth.s:1058   .text:00000000000021ee _FCP
             forth.s:1058   .text:00000000000021f2 $t
             forth.s:1058   .text:00000000000021f4 FCP
             forth.s:1068   .text:00000000000021fe $d
             forth.s:1068   .text:0000000000002202 _LAST
             forth.s:1068   .text:0000000000002208 LAST
             forth.s:1082   .text:0000000000002212 $d
             forth.s:1082   .text:0000000000002216 _USER_BEGIN
             forth.s:1082   .text:0000000000002224 USER_BEGIN
             forth.s:1086   .text:000000000000222c USR_BGN_ADR
             forth.s:1087   .text:000000000000222c $d
             forth.s:1093   .text:0000000000002234 _USER_END
             forth.s:1093   .text:0000000000002240 USER_END
             forth.s:1097   .text:0000000000002248 USER_END_ADR
             forth.s:1098   .text:0000000000002248 $d
             forth.s:1110   .text:0000000000002250 _WITHI
             forth.s:1110   .text:0000000000002258 WITHI
             forth.s:1112   .text:000000000000225c $d
             forth.s:1127   .text:000000000000227c _UMMOD
             forth.s:1127   .text:0000000000002284 UMMOD
             forth.s:1131   .text:000000000000228e UMMOD0
ARM GAS  forth.s 			page 168


             forth.s:1138   .text:000000000000229e UMMOD1
             forth.s:1144   .text:00000000000022a8 UMMOD2
             forth.s:1157   .text:00000000000022b4 $d
             forth.s:1157   .text:00000000000022b8 _MSMOD
             forth.s:1157   .text:00000000000022be $t
             forth.s:1157   .text:00000000000022c0 MSMOD
             forth.s:1159   .text:00000000000022c4 $d
             forth.s:1168   .text:00000000000022ec MMOD1
             forth.s:1175   .text:0000000000002308 MMOD2
             forth.s:1183   .text:0000000000002328 MMOD3
             forth.s:1191   .text:0000000000002330 _SLMOD
             forth.s:1193   .text:000000000000233c $d
             forth.s:1204   .text:0000000000002354 _MODD
             forth.s:1204   .text:0000000000002358 $t
             forth.s:1206   .text:000000000000235c $d
             forth.s:1215   .text:000000000000236c _SLASH
             forth.s:1215   .text:000000000000236e $t
             forth.s:1215   .text:0000000000002370 SLASH
             forth.s:1217   .text:0000000000002374 $d
             forth.s:1228   .text:0000000000002388 _SSMOD
             forth.s:1228   .text:000000000000238e $t
             forth.s:1228   .text:0000000000002390 SSMOD
             forth.s:1230   .text:0000000000002394 $d
             forth.s:1242   .text:00000000000023ac _STASL
             forth.s:1242   .text:00000000000023b0 STASL
             forth.s:1244   .text:00000000000023b4 $d
             forth.s:1258   .text:00000000000023c8 _ALGND
             forth.s:1258   .text:00000000000023d0 $t
             forth.s:1258   .text:00000000000023d0 ALGND
             forth.s:1269   .text:00000000000023e0 $d
             forth.s:1269   .text:00000000000023e4 _TCHAR
             forth.s:1269   .text:00000000000023ea $t
             forth.s:1269   .text:00000000000023ec TCHAR
             forth.s:1271   .text:00000000000023f0 $d
             forth.s:1281   .text:0000000000002428 TCHA1
             forth.s:1289   .text:0000000000002430 _DEPTH
             forth.s:1289   .text:0000000000002436 $t
             forth.s:1289   .text:0000000000002438 DEPTH
             forth.s:1301   .text:0000000000002450 $d
             forth.s:1301   .text:0000000000002454 _PICK
             forth.s:1301   .text:000000000000245c PICK
             forth.s:1303   .text:0000000000002460 $d
             forth.s:1319   .text:000000000000247c _HERE
             forth.s:1319   .text:0000000000002484 HERE
             forth.s:1321   .text:0000000000002488 $d
             forth.s:1330   .text:0000000000002498 _PAD
             forth.s:1330   .text:000000000000249c $t
             forth.s:1332   .text:00000000000024a0 $d
             forth.s:1343   .text:00000000000024b8 _TIB
             forth.s:1343   .text:00000000000024bc $t
             forth.s:1343   .text:00000000000024bc TIB
             forth.s:1353   .text:00000000000024c6 $d
             forth.s:1353   .text:00000000000024ca _ATEXE
             forth.s:1366   .text:00000000000024e8 $d
             forth.s:1366   .text:00000000000024ec _CMOVE
             forth.s:1366   .text:00000000000024f2 $t
             forth.s:1366   .text:00000000000024f4 CMOVE
ARM GAS  forth.s 			page 169


             forth.s:1373   .text:0000000000002506 CMOV1
             forth.s:1370   .text:00000000000024fe CMOV0
             forth.s:1378   .text:0000000000002510 CMOV2
             forth.s:1386   .text:0000000000002518 $d
             forth.s:1386   .text:000000000000251c _MOVE
             forth.s:1404   .text:000000000000254e MOVE1
             forth.s:1401   .text:000000000000254a MOVE3
             forth.s:1398   .text:0000000000002546 MOVE0
             forth.s:1409   .text:0000000000002558 MOVE2
             forth.s:1418   .text:0000000000002560 $d
             forth.s:1418   .text:0000000000002564 _FILL
             forth.s:1426   .text:000000000000257a FILL2
             forth.s:1422   .text:0000000000002572 FILL1
             forth.s:1436   .text:0000000000002582 $d
             forth.s:1436   .text:0000000000002586 _PACKS
             forth.s:1436   .text:000000000000258c $t
             forth.s:1436   .text:000000000000258c PACKS
             forth.s:1438   .text:0000000000002590 $d
             forth.s:1467   .text:00000000000025e8 _DIGIT
             forth.s:1467   .text:00000000000025ee $t
             forth.s:1467   .text:00000000000025f0 DIGIT
             forth.s:1469   .text:00000000000025f4 $d
             forth.s:1484   .text:0000000000002628 _EXTRC
             forth.s:1484   .text:0000000000002630 $t
             forth.s:1484   .text:0000000000002630 EXTRC
             forth.s:1486   .text:0000000000002634 $d
             forth.s:1498   .text:0000000000002654 _BDIGS
             forth.s:1498   .text:0000000000002658 BDIGS
             forth.s:1500   .text:000000000000265c $d
             forth.s:1510   .text:0000000000002670 _HOLD
             forth.s:1512   .text:000000000000267c $d
             forth.s:1528   .text:00000000000026a0 _DIG
             forth.s:1528   .text:00000000000026a2 $t
             forth.s:1528   .text:00000000000026a4 DIG
             forth.s:1530   .text:00000000000026a8 $d
             forth.s:1542   .text:00000000000026c0 _DIGS
             forth.s:1542   .text:00000000000026c4 DIGS
             forth.s:1544   .text:00000000000026c8 DIGS1
             forth.s:1545   .text:00000000000026c8 $d
             forth.s:1549   .text:00000000000026e0 DIGS2
             forth.s:1558   .text:00000000000026e8 _SIGN
             forth.s:1558   .text:00000000000026f0 SIGN
             forth.s:1560   .text:00000000000026f4 $d
             forth.s:1564   .text:000000000000270c SIGN1
             forth.s:1572   .text:0000000000002714 _EDIGS
             forth.s:1572   .text:0000000000002718 EDIGS
             forth.s:1574   .text:000000000000271c $d
             forth.s:1589   .text:0000000000002738 STRR
             forth.s:1590   .text:0000000000002738 $t
             forth.s:1591   .text:000000000000273c $d
             forth.s:1607   .text:0000000000002764 _HEX
             forth.s:1607   .text:0000000000002768 $t
             forth.s:1607   .text:0000000000002768 HEX
             forth.s:1609   .text:000000000000276c $d
             forth.s:1619   .text:0000000000002784 _DECIM
             forth.s:1619   .text:000000000000278c $t
             forth.s:1619   .text:000000000000278c DECIM
ARM GAS  forth.s 			page 170


             forth.s:1621   .text:0000000000002790 $d
             forth.s:1636   .text:00000000000027a8 _DIGTQ
             forth.s:1636   .text:00000000000027b0 DIGTQ
             forth.s:1638   .text:00000000000027b4 $d
             forth.s:1651   .text:00000000000027fc DGTQ1
             forth.s:1662   .text:0000000000002810 _NUMBQ
             forth.s:1662   .text:0000000000002818 $t
             forth.s:1662   .text:0000000000002818 NUMBQ
             forth.s:1664   .text:000000000000281c $d
             forth.s:1680   .text:0000000000002868 NUMQ1
             forth.s:1728   .text:0000000000002930 NUMQ6
             forth.s:1696   .text:00000000000028ac NUMQ2
             forth.s:1720   .text:0000000000002914 NUMQ4
             forth.s:1717   .text:0000000000002908 NUMQ3
             forth.s:1726   .text:000000000000292c NUMQ5
             forth.s:1746   .text:000000000000294c _SPACE
             forth.s:1746   .text:0000000000002952 $t
             forth.s:1748   .text:0000000000002958 $d
             forth.s:1757   .text:0000000000002968 _SPACS
             forth.s:1757   .text:0000000000002970 SPACS
             forth.s:1759   .text:0000000000002974 $d
             forth.s:1765   .text:0000000000002990 CHAR2
             forth.s:1763   .text:000000000000298c CHAR1
             forth.s:1774   .text:00000000000029a0 _TYPEE
             forth.s:1776   .text:00000000000029ac $d
             forth.s:1782   .text:00000000000029c4 TYPE2
             forth.s:1778   .text:00000000000029b8 TYPE1
             forth.s:1792   .text:00000000000029d8 _CR
             forth.s:1794   .text:00000000000029e0 $d
             forth.s:1806   .text:00000000000029fc DOSTR
             forth.s:1807   .text:00000000000029fc $t
             forth.s:1809   .text:0000000000002a00 $d
             forth.s:1827   .text:0000000000002a28 STRQP
             forth.s:1828   .text:0000000000002a28 $t
             forth.s:1829   .text:0000000000002a2c $d
             forth.s:1838   .text:0000000000002a34 DOTST
             forth.s:1839   .text:0000000000002a34 $t
             forth.s:1840   .text:0000000000002a38 $d
             forth.s:1850   .text:0000000000002a44 DOTQP
             forth.s:1851   .text:0000000000002a44 $t
             forth.s:1852   .text:0000000000002a48 $d
             forth.s:1862   .text:0000000000002a58 _DOTR
             forth.s:1862   .text:0000000000002a5c DOTR
             forth.s:1864   .text:0000000000002a60 $d
             forth.s:1879   .text:0000000000002a84 _UDOTR
             forth.s:1879   .text:0000000000002a88 $t
             forth.s:1879   .text:0000000000002a88 UDOTR
             forth.s:1881   .text:0000000000002a8c $d
             forth.s:1897   .text:0000000000002ab8 _UDOT
             forth.s:1897   .text:0000000000002abc UDOT
             forth.s:1899   .text:0000000000002ac0 $d
             forth.s:1912   .text:0000000000002adc _DOT
             forth.s:1912   .text:0000000000002ade $t
             forth.s:1914   .text:0000000000002ae4 $d
             forth.s:1921   .text:0000000000002b08 DOT1
             forth.s:1932   .text:0000000000002b1c _DOTH
             forth.s:1934   .text:0000000000002b24 $d
ARM GAS  forth.s 			page 171


             forth.s:1949   .text:0000000000002b48 _QUEST
             forth.s:1949   .text:0000000000002b4a $t
             forth.s:1949   .text:0000000000002b4c QUEST
             forth.s:1951   .text:0000000000002b50 $d
             forth.s:1965   .text:0000000000002b5c PARS
             forth.s:1966   .text:0000000000002b5c $t
             forth.s:1967   .text:0000000000002b60 $d
             forth.s:2033   .text:0000000000002c70 PARS8
             forth.s:1997   .text:0000000000002be4 PARS3
             forth.s:1980   .text:0000000000002b9c PARS1
             forth.s:1995   .text:0000000000002be0 PARS2
             forth.s:2001   .text:0000000000002bf0 PARS4
             forth.s:2013   .text:0000000000002c20 PARS5
             forth.s:2020   .text:0000000000002c44 PARS6
             forth.s:2026   .text:0000000000002c58 PARS7
             forth.s:2044   .text:0000000000002c84 _PARSE
             forth.s:2044   .text:0000000000002c8a $t
             forth.s:2044   .text:0000000000002c8c PARSE
             forth.s:2046   .text:0000000000002c90 $d
             forth.s:2067   .text:0000000000002cd0 _DOTPR
             forth.s:2067   .text:0000000000002cd4 DOTPR
             forth.s:2069   .text:0000000000002cd8 $d
             forth.s:2080   .text:0000000000002cf0 _PAREN
             forth.s:2080   .text:0000000000002cf2 $t
             forth.s:2080   .text:0000000000002cf4 PAREN
             forth.s:2082   .text:0000000000002cf8 $d
             forth.s:2093   .text:0000000000002d10 _BKSLA
             forth.s:2093   .text:0000000000002d12 $t
             forth.s:2093   .text:0000000000002d14 BKSLA
             forth.s:2095   .text:0000000000002d18 $d
             forth.s:2106   .text:0000000000002d30 _CHAR
             forth.s:2106   .text:0000000000002d38 CHAR
             forth.s:2108   .text:0000000000002d3c $d
             forth.s:2119   .text:0000000000002d54 _WORDD
             forth.s:2119   .text:0000000000002d5c WORDD
             forth.s:2121   .text:0000000000002d60 $d
             forth.s:2133   .text:0000000000002d78 _TOKEN
             forth.s:2133   .text:0000000000002d7e $t
             forth.s:2133   .text:0000000000002d80 TOKEN
             forth.s:2135   .text:0000000000002d84 $d
             forth.s:2148   .text:0000000000002d94 _NAMET
             forth.s:2148   .text:0000000000002d9a $t
             forth.s:2148   .text:0000000000002d9c NAMET
             forth.s:2150   .text:0000000000002da0 $d
             forth.s:2169   .text:0000000000002dc0 _SAMEQ
             forth.s:2169   .text:0000000000002dc6 $t
             forth.s:2169   .text:0000000000002dc8 SAMEQ
             forth.s:2171   .text:0000000000002dcc $d
             forth.s:2188   .text:0000000000002e14 SAME2
             forth.s:2173   .text:0000000000002dd8 SAME1
             forth.s:2203   .text:0000000000002e28 FIND
             forth.s:2204   .text:0000000000002e28 $t
             forth.s:2205   .text:0000000000002e2c $d
             forth.s:2212   .text:0000000000002e48 FIND1
             forth.s:2232   .text:0000000000002ea0 FIND6
             forth.s:2225   .text:0000000000002e88 FIND2
             forth.s:2230   .text:0000000000002e98 FIND3
ARM GAS  forth.s 			page 172


             forth.s:2239   .text:0000000000002eb8 FIND4
             forth.s:2245   .text:0000000000002ed4 FIND5
             forth.s:2261   .text:0000000000002efc _NAMEQ
             forth.s:2261   .text:0000000000002f02 $t
             forth.s:2261   .text:0000000000002f04 NAMEQ
             forth.s:2263   .text:0000000000002f08 $d
             forth.s:2277   .text:0000000000002f18 BKSP
             forth.s:2278   .text:0000000000002f18 $t
             forth.s:2279   .text:0000000000002f1c $d
             forth.s:2293   .text:0000000000002f60 BACK1
             forth.s:2302   .text:0000000000002f64 TAP
             forth.s:2303   .text:0000000000002f64 $t
             forth.s:2304   .text:0000000000002f68 $d
             forth.s:2316   .text:0000000000002f80 KTAP
             forth.s:2317   .text:0000000000002f80 TTAP
             forth.s:2318   .text:0000000000002f80 $t
             forth.s:2319   .text:0000000000002f84 $d
             forth.s:2333   .text:0000000000002fc4 KTAP2
             forth.s:2330   .text:0000000000002fbc KTAP1
             forth.s:2345   .text:0000000000002fdc _ACCEP
             forth.s:2347   .text:0000000000002fe8 $d
             forth.s:2350   .text:0000000000002ff4 ACCP1
             forth.s:2366   .text:000000000000303c ACCP4
             forth.s:2362   .text:0000000000003030 ACCP2
             forth.s:2364   .text:0000000000003034 ACCP3
             forth.s:2377   .text:0000000000003050 _QUERY
             forth.s:2377   .text:0000000000003056 $t
             forth.s:2377   .text:0000000000003058 QUERY
             forth.s:2379   .text:000000000000305c $d
             forth.s:2399   .text:0000000000003090 _ABORT
             forth.s:2399   .text:0000000000003096 $t
             forth.s:2399   .text:0000000000003098 ABORT
             forth.s:2401   .text:000000000000309c ABORT1
             forth.s:2402   .text:000000000000309c $d
             forth.s:2533   .text:0000000000003240 QUIT
             forth.s:2417   .text:00000000000030c4 ABORQ
             forth.s:2418   .text:00000000000030c4 $t
             forth.s:2419   .text:00000000000030c8 $d
             forth.s:2437   .text:00000000000030ec _INTER
             forth.s:2439   .text:00000000000030fc $d
             forth.s:2448   .text:0000000000003138 INTE1
             forth.s:2445   .text:000000000000312e $t
             forth.s:2446   .text:0000000000003130 $d
             forth.s:2452   .text:0000000000003148 INTE2
             forth.s:2459   .text:0000000000003150 _LBRAC
             forth.s:2459   .text:0000000000003152 $t
             forth.s:2459   .text:0000000000003154 LBRAC
             forth.s:2461   .text:0000000000003158 $d
             forth.s:2471   .text:0000000000003170 _DOTOK
             forth.s:2471   .text:0000000000003174 $t
             forth.s:2471   .text:0000000000003174 DOTOK
             forth.s:2473   .text:0000000000003178 $d
             forth.s:2479   .text:000000000000319c DOTO1
             forth.s:2480   .text:000000000000319c $d
             forth.s:2488   .text:00000000000031a8 _QSTAC
             forth.s:2488   .text:00000000000031b0 QSTAC
             forth.s:2490   .text:00000000000031b4 $d
ARM GAS  forth.s 			page 173


             forth.s:2492   .text:00000000000031ca $t
             forth.s:2493   .text:00000000000031cc $d
             forth.s:2500   .text:00000000000031d4 _EVAL
             forth.s:2502   .text:00000000000031e0 EVAL1
             forth.s:2503   .text:00000000000031e0 $d
             forth.s:2511   .text:0000000000003208 EVAL2
             forth.s:2521   .text:0000000000003218 _PRESE
             forth.s:2523   .text:0000000000003224 $d
             forth.s:2533   .text:0000000000003238 _QUIT
             forth.s:2534   .text:0000000000003240 $d
             forth.s:2536   .text:000000000000324c QUIT1
             forth.s:2538   .text:0000000000003250 QUIT2
             forth.s:2548   .text:0000000000003264 _FORGET
             forth.s:2548   .text:000000000000326c FORGET
             forth.s:2550   .text:0000000000003270 $d
             forth.s:3038   .text:00000000000037f4 OVERT
             forth.s:2578   .text:00000000000032b8 $d
             forth.s:2578   .text:00000000000032bc _TICK
             forth.s:2578   .text:00000000000032be $t
             forth.s:2578   .text:00000000000032c0 TICK
             forth.s:2580   .text:00000000000032c4 $d
             forth.s:2584   .text:00000000000032d8 TICK1
             forth.s:2592   .text:00000000000032e0 _ALLOT
             forth.s:2592   .text:00000000000032e6 $t
             forth.s:2592   .text:00000000000032e8 ALLOT
             forth.s:2594   .text:00000000000032ec $d
             forth.s:2603   .text:00000000000032fc _COMMA
             forth.s:2603   .text:00000000000032fe $t
             forth.s:2603   .text:0000000000003300 COMMA
             forth.s:2605   .text:0000000000003304 $d
             forth.s:2619   .text:0000000000003320 $d
             forth.s:2619   .text:0000000000003324 _BCOMP
             forth.s:2619   .text:000000000000332e $t
             forth.s:2619   .text:0000000000003330 BCOMP
             forth.s:2621   .text:0000000000003334 $d
             forth.s:2631   .text:0000000000003344 _COMPI
             forth.s:2631   .text:000000000000334c $t
             forth.s:2631   .text:000000000000334c COMPI
             forth.s:2633   .text:0000000000003350 $d
             forth.s:2649   .text:000000000000337c _LITER
             forth.s:2649   .text:0000000000003384 $t
             forth.s:2649   .text:0000000000003384 LITER
             forth.s:2651   .text:0000000000003388 $d
             forth.s:3077   .text:0000000000003850 CALLC
             forth.s:2661   .text:000000000000339c STRCQ
             forth.s:2662   .text:000000000000339c $t
             forth.s:2663   .text:00000000000033a0 $d
             forth.s:2685   .text:00000000000033d8 _FOR
             forth.s:2685   .text:00000000000033dc $t
             forth.s:2685   .text:00000000000033dc FOR
             forth.s:2687   .text:00000000000033e0 $d
             forth.s:2696   .text:00000000000033f8 _DO
             forth.s:2696   .text:00000000000033fc DO
             forth.s:2698   .text:0000000000003400 $d
             forth.s:2704   .text:000000000000342c DOPLOOP
             forth.s:2705   .text:000000000000342c $t
             forth.s:2721   .text:000000000000344e $d
ARM GAS  forth.s 			page 174


             forth.s:2721   .text:0000000000003452 _PLOOP
             forth.s:2721   .text:0000000000003458 $t
             forth.s:2721   .text:0000000000003458 PLOOP
             forth.s:2723   .text:000000000000345c $d
             forth.s:2727   .text:0000000000003470 DOLOOP
             forth.s:2728   .text:0000000000003470 $t
             forth.s:2746   .text:0000000000003498 $d
             forth.s:2746   .text:000000000000349c _LOOP
             forth.s:2746   .text:00000000000034a4 LOOP
             forth.s:2748   .text:00000000000034a8 $d
             forth.s:2759   .text:00000000000034c0 _BEGIN
             forth.s:2759   .text:00000000000034c6 $t
             forth.s:2759   .text:00000000000034c8 BEGIN
             forth.s:2761   .text:00000000000034cc $d
             forth.s:2770   .text:00000000000034d4 $d
             forth.s:2770   .text:00000000000034d8 _FNEXT
             forth.s:2770   .text:00000000000034e0 FNEXT
             forth.s:2772   .text:00000000000034e4 $d
             forth.s:2780   .text:00000000000034fc _I
             forth.s:2780   .text:00000000000034fe $t
             forth.s:2780   .text:0000000000003500 I
             forth.s:2790   .text:000000000000350c $d
             forth.s:2790   .text:0000000000003510 _UNTIL
             forth.s:2790   .text:0000000000003516 $t
             forth.s:2790   .text:0000000000003518 UNTIL
             forth.s:2792   .text:000000000000351c $d
             forth.s:2801   .text:0000000000003534 _AGAIN
             forth.s:2801   .text:000000000000353a $t
             forth.s:2801   .text:000000000000353c AGAIN
             forth.s:2803   .text:0000000000003540 $d
             forth.s:2812   .text:0000000000003558 _IFF
             forth.s:2812   .text:000000000000355c IFF
             forth.s:2814   .text:0000000000003560 $d
             forth.s:2826   .text:0000000000003588 _AHEAD
             forth.s:2826   .text:000000000000358e $t
             forth.s:2826   .text:0000000000003590 AHEAD
             forth.s:2828   .text:0000000000003594 $d
             forth.s:2840   .text:00000000000035bc _REPEA
             forth.s:2840   .text:00000000000035c4 REPEA
             forth.s:2842   .text:00000000000035c8 $d
             forth.s:2853   .text:00000000000035e0 _THENN
             forth.s:2853   .text:00000000000035e8 THENN
             forth.s:2855   .text:00000000000035ec $d
             forth.s:2866   .text:0000000000003600 _AFT
             forth.s:2866   .text:0000000000003604 $t
             forth.s:2866   .text:0000000000003604 AFT
             forth.s:2868   .text:0000000000003608 $d
             forth.s:2880   .text:0000000000003620 _ELSEE
             forth.s:2880   .text:0000000000003628 ELSEE
             forth.s:2882   .text:000000000000362c $d
             forth.s:2892   .text:0000000000003640 _WHILE
             forth.s:2892   .text:0000000000003646 $t
             forth.s:2892   .text:0000000000003648 WHILE
             forth.s:2894   .text:000000000000364c $d
             forth.s:2903   .text:000000000000365c _ABRTQ
             forth.s:2903   .text:0000000000003664 ABRTQ
             forth.s:2905   .text:0000000000003668 $d
ARM GAS  forth.s 			page 175


             forth.s:2914   .text:0000000000003680 _STRQ
             forth.s:2914   .text:0000000000003684 STRQ
             forth.s:2916   .text:0000000000003688 $d
             forth.s:2926   .text:00000000000036a0 _DOTQ
             forth.s:2926   .text:00000000000036a4 DOTQ
             forth.s:2928   .text:00000000000036a8 $d
             forth.s:2942   .text:00000000000036c0 _UNIQU
             forth.s:2942   .text:00000000000036c8 $t
             forth.s:2942   .text:00000000000036c8 UNIQU
             forth.s:2944   .text:00000000000036cc $d
             forth.s:2951   .text:00000000000036f4 UNIQ1
             forth.s:2948   .text:00000000000036e8 $d
             forth.s:2961   .text:00000000000036fc SNAME
             forth.s:2962   .text:00000000000036fc $t
             forth.s:2963   .text:0000000000003700 $d
             forth.s:2979   .text:0000000000003744 SNAM1
             forth.s:2991   .text:0000000000003758 _SCOMP
             forth.s:2991   .text:0000000000003764 SCOMP
             forth.s:2993   .text:0000000000003768 $d
             forth.s:3005   .text:00000000000037a0 SCOM2
             forth.s:3002   .text:0000000000003798 SCOM1
             forth.s:3010   .text:00000000000037b4 SCOM3
             forth.s:3019   .text:00000000000037bc COLON_ABORT
             forth.s:3020   .text:00000000000037bc $t
             forth.s:3021   .text:00000000000037c0 $d
             forth.s:3038   .text:00000000000037ec _OVERT
             forth.s:3038   .text:00000000000037f2 $t
             forth.s:3040   .text:00000000000037f8 $d
             forth.s:3051   .text:0000000000003810 _SEMIS
             forth.s:3051   .text:0000000000003812 $t
             forth.s:3051   .text:0000000000003814 SEMIS
             forth.s:3053   .text:0000000000003818 $d
             forth.s:3065   .text:0000000000003834 _RBRAC
             forth.s:3065   .text:0000000000003836 $t
             forth.s:3065   .text:0000000000003838 RBRAC
             forth.s:3067   .text:000000000000383c $d
             forth.s:3078   .text:0000000000003850 $t
             forth.s:3079   .text:0000000000003854 $d
             forth.s:3091   .text:000000000000386c _COLON
             forth.s:3091   .text:000000000000386e $t
             forth.s:3091   .text:0000000000003870 COLON
             forth.s:3093   .text:0000000000003874 $d
             forth.s:3104   .text:000000000000388c _IMMED
             forth.s:3104   .text:0000000000003896 $t
             forth.s:3104   .text:0000000000003898 IMMED
             forth.s:3106   .text:000000000000389c $d
             forth.s:3124   .text:00000000000038c8 _CONST
             forth.s:3124   .text:00000000000038d4 CONST
             forth.s:3126   .text:00000000000038d8 $d
             forth.s:3137   .text:0000000000003908 $t
             forth.s:3144   .text:0000000000003908 DODOES
             forth.s:3146   .text:000000000000390c $d
             forth.s:3161   .text:0000000000003930 $d
             forth.s:3161   .text:0000000000003934 _DOES
             forth.s:3161   .text:000000000000393a $t
             forth.s:3161   .text:000000000000393c DOES
             forth.s:3163   .text:0000000000003940 $d
ARM GAS  forth.s 			page 176


             forth.s:3178   .text:0000000000003970 _DEFERAT
             forth.s:3178   .text:0000000000003978 DEFERAT
             forth.s:3180   .text:000000000000397c $d
             forth.s:3190   .text:0000000000003994 _DEFERSTO
             forth.s:3190   .text:000000000000399c DEFERSTO
             forth.s:3192   .text:00000000000039a0 $d
             forth.s:3203   .text:00000000000039bc _DEFER
             forth.s:3203   .text:00000000000039c2 $t
             forth.s:3203   .text:00000000000039c4 DEFER
             forth.s:3205   .text:00000000000039c8 $d
             forth.s:3226   .text:0000000000003a14 CREAT
             forth.s:3216   .text:00000000000039fc DEFER_NOP
             forth.s:3217   .text:00000000000039fc $t
             forth.s:3218   .text:0000000000003a00 $d
             forth.s:3226   .text:0000000000003a0c _CREAT
             forth.s:3228   .text:0000000000003a18 $d
             forth.s:3241   .text:0000000000003a3c _VARIA
             forth.s:3241   .text:0000000000003a48 VARIA
             forth.s:3243   .text:0000000000003a4c $d
             forth.s:3260   .text:0000000000003a6c DMP
             forth.s:3261   .text:0000000000003a6c $t
             forth.s:3262   .text:0000000000003a70 $d
             forth.s:3274   .text:0000000000003aa8 PDUM2
             forth.s:3268   .text:0000000000003a90 PDUM1
             forth.s:3286   .text:0000000000003ab4 $d
             forth.s:3286   .text:0000000000003ab8 _DUMP
             forth.s:3286   .text:0000000000003ac0 DUMP
             forth.s:3288   .text:0000000000003ac4 $d
             forth.s:3306   .text:0000000000003b14 DUMP4
             forth.s:3296   .text:0000000000003aec DUMP1
             forth.s:3308   .text:0000000000003b1c DUMP3
             forth.s:3320   .text:0000000000003b34 _DOTS
             forth.s:3320   .text:0000000000003b38 DOTS
             forth.s:3322   .text:0000000000003b3c $d
             forth.s:3330   .text:0000000000003b5c DOTS2
             forth.s:3326   .text:0000000000003b50 DOTS1
             forth.s:3340   .text:0000000000003b70 _TNAME
             forth.s:3340   .text:0000000000003b76 $t
             forth.s:3340   .text:0000000000003b78 TNAME
             forth.s:3342   .text:0000000000003b7c $d
             forth.s:3345   .text:0000000000003b88 TNAM1
             forth.s:3356   .text:0000000000003bbc TNAM2
             forth.s:3365   .text:0000000000003bcc _DOTID
             forth.s:3365   .text:0000000000003bd0 $t
             forth.s:3365   .text:0000000000003bd0 DOTID
             forth.s:3367   .text:0000000000003bd4 $d
             forth.s:3374   .text:0000000000003bf8 DOTI1
             forth.s:3375   .text:0000000000003c06 $t
             forth.s:3376   .text:0000000000003c08 $d
             forth.s:3378   *ABS*:0000000000000000 WANT_SEE
             forth.s:3451   .text:0000000000003c10 _WORDS
             forth.s:3451   .text:0000000000003c16 $t
             forth.s:3451   .text:0000000000003c18 WORDS
             forth.s:3453   .text:0000000000003c1c $d
             forth.s:3456   .text:0000000000003c28 WORS1
             forth.s:3465   .text:0000000000003c50 WORS2
             forth.s:3472   .text:0000000000003c58 _WC
ARM GAS  forth.s 			page 177


             forth.s:3472   .text:0000000000003c5c WC
             forth.s:3474   .text:0000000000003c60 $d
             forth.s:3491   .text:0000000000003c9c _MARK
             forth.s:3491   .text:0000000000003ca4 MARK
             forth.s:3493   .text:0000000000003ca8 $d
             forth.s:3496   .text:0000000000003cb4 $t
             forth.s:3497   .text:0000000000003cb8 $d
             forth.s:3518   .text:0000000000003ce4 VERSN
             forth.s:3519   .text:0000000000003ce4 $t
             forth.s:3520   .text:0000000000003ce8 $d
             forth.s:3528   .text:0000000000003cf8 _HI
             forth.s:3530   .text:0000000000003d00 $d
             forth.s:3531   .text:0000000000003d1a $t
             forth.s:3532   .text:0000000000003d1c $d
             forth.s:3553   .text:0000000000003d60 PS2_QUERY
             forth.s:3554   .text:0000000000003d60 $t
             forth.s:3555   .text:0000000000003d64 $d
             forth.s:3569   .text:0000000000003dca $t
             forth.s:3570   .text:0000000000003dcc $d
             forth.s:3580   .text:0000000000003dd8 IF_SENSE
             forth.s:3581   .text:0000000000003dd8 $t
             forth.s:3582   .text:0000000000003ddc $d
             forth.s:3608   .text:0000000000003e2c COLD1
             forth.s:3609   .text:0000000000003e2c $d
             forth.s:3623   .text:0000000000003e78 COLD2
             forth.s:3626   .text:0000000000003e78 $d
             forth.s:3629   .text:0000000000003e7c $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:000000000000053f $d
          ser-term.s:90     .text:0000000000000540 $t
          ser-term.s:110    .text:0000000000000579 $d
          ser-term.s:110    .text:000000000000057a $t
          ser-term.s:133    .text:00000000000005b7 $d
          ser-term.s:133    .text:00000000000005b8 $t
          ser-term.s:164    .text:00000000000005ff $d
          ser-term.s:164    .text:0000000000000600 $t
          ser-term.s:191    .text:0000000000000675 $d
          ser-term.s:191    .text:0000000000000676 $t
          ser-term.s:203    .text:00000000000006a3 $d
          ser-term.s:203    .text:00000000000006a4 $t
             tvout.s:264    .text:00000000000008ef $d
             tvout.s:264    .text:00000000000008f0 $t
             tvout.s:278    .text:0000000000000923 $d
             tvout.s:278    .text:0000000000000924 $t
             tvout.s:306    .text:000000000000097d $d
             tvout.s:306    .text:000000000000097e $t
             tvout.s:325    .text:00000000000009ab $d
             tvout.s:325    .text:00000000000009ac $t
             tvout.s:427    .text:0000000000000ae5 $d
             tvout.s:427    .text:0000000000000ae6 $t
             tvout.s:448    .text:0000000000000b3f $d
             tvout.s:448    .text:0000000000000b40 $t
             tvout.s:495    .text:0000000000000bd5 $d
             tvout.s:495    .text:0000000000000bd6 $t
           ps2_kbd.s:307    .text:00000000000012c3 $d
           ps2_kbd.s:307    .text:00000000000012c4 $t
ARM GAS  forth.s 			page 178


           ps2_kbd.s:396    .text:00000000000013bd $d
           ps2_kbd.s:396    .text:00000000000013be $t
           ps2_kbd.s:616    .text:0000000000001657 $d
           ps2_kbd.s:616    .text:0000000000001658 $t
           ps2_kbd.s:633    .text:000000000000168d $d
           ps2_kbd.s:633    .text:000000000000168e $t
         spi-flash.s:83     .text:000000000000177b $d
         spi-flash.s:83     .text:000000000000177c $t
         spi-flash.s:149    .text:0000000000001841 $d
         spi-flash.s:149    .text:0000000000001842 $t
         spi-flash.s:236    .text:0000000000001987 $d
         spi-flash.s:236    .text:0000000000001988 $t
         spi-flash.s:254    .text:00000000000019c3 $d
         spi-flash.s:254    .text:00000000000019c4 $t
         spi-flash.s:276    .text:0000000000001a17 $d
         spi-flash.s:276    .text:0000000000001a18 $t
             forth.s:134    .text:0000000000001ac3 $d
             forth.s:134    .text:0000000000001ac4 $t
             forth.s:156    .text:0000000000001afd $d
             forth.s:156    .text:0000000000001afe $t
             forth.s:192    .text:0000000000001b1b $d
             forth.s:192    .text:0000000000001b1c $t
             forth.s:239    .text:0000000000001bc9 $d
             forth.s:239    .text:0000000000001bca $t
             forth.s:334    .text:0000000000001c59 $d
             forth.s:334    .text:0000000000001c5a $t
             forth.s:359    .text:0000000000001c87 $d
             forth.s:359    .text:0000000000001c88 $t
             forth.s:369    .text:0000000000001c9b $d
             forth.s:369    .text:0000000000001c9c $t
             forth.s:377    .text:0000000000001ca7 $d
             forth.s:377    .text:0000000000001ca8 $t
             forth.s:386    .text:0000000000001cb9 $d
             forth.s:386    .text:0000000000001cba $t
             forth.s:395    .text:0000000000001ccd $d
             forth.s:395    .text:0000000000001cce $t
             forth.s:431    .text:0000000000001d15 $d
             forth.s:431    .text:0000000000001d16 $t
             forth.s:447    .text:0000000000001d37 $d
             forth.s:447    .text:0000000000001d38 $t
             forth.s:457    .text:0000000000001d49 $d
             forth.s:457    .text:0000000000001d4a $t
             forth.s:466    .text:0000000000001d5b $d
             forth.s:466    .text:0000000000001d5c $t
             forth.s:483    .text:0000000000001d7d $d
             forth.s:483    .text:0000000000001d7e $t
             forth.s:513    .text:0000000000001dc3 $d
             forth.s:513    .text:0000000000001dc4 $t
             forth.s:522    .text:0000000000001dd9 $d
             forth.s:522    .text:0000000000001dda $t
             forth.s:569    .text:0000000000001e33 $d
             forth.s:569    .text:0000000000001e34 $t
             forth.s:580    .text:0000000000001e47 $d
             forth.s:580    .text:0000000000001e48 $t
             forth.s:588    .text:0000000000001e55 $d
             forth.s:588    .text:0000000000001e56 $t
             forth.s:596    .text:0000000000001e65 $d
ARM GAS  forth.s 			page 179


             forth.s:596    .text:0000000000001e66 $t
             forth.s:604    .text:0000000000001e75 $d
             forth.s:604    .text:0000000000001e76 $t
             forth.s:628    .text:0000000000001ea5 $d
             forth.s:628    .text:0000000000001ea6 $t
             forth.s:653    .text:0000000000001ed9 $d
             forth.s:653    .text:0000000000001eda $t
             forth.s:661    .text:0000000000001ee9 $d
             forth.s:661    .text:0000000000001eea $t
             forth.s:669    .text:0000000000001efb $d
             forth.s:669    .text:0000000000001efc $t
             forth.s:690    .text:0000000000001f23 $d
             forth.s:690    .text:0000000000001f24 $t
             forth.s:719    .text:0000000000001f5f $d
             forth.s:719    .text:0000000000001f60 $t
             forth.s:729    .text:0000000000001f73 $d
             forth.s:729    .text:0000000000001f74 $t
             forth.s:750    .text:0000000000001fa1 $d
             forth.s:750    .text:0000000000001fa2 $t
             forth.s:768    .text:0000000000001fc5 $d
             forth.s:768    .text:0000000000001fc6 $t
             forth.s:791    .text:0000000000001ff3 $d
             forth.s:791    .text:0000000000001ff4 $t
             forth.s:849    .text:0000000000002063 $d
             forth.s:849    .text:0000000000002064 $t
             forth.s:861    .text:000000000000207b $d
             forth.s:861    .text:000000000000207c $t
             forth.s:873    .text:0000000000002097 $d
             forth.s:873    .text:0000000000002098 $t
             forth.s:934    .text:00000000000020f3 $d
             forth.s:934    .text:00000000000020f4 $t
             forth.s:943    .text:0000000000002107 $d
             forth.s:943    .text:0000000000002108 $t
             forth.s:970    .text:0000000000002143 $d
             forth.s:970    .text:0000000000002144 $t
             forth.s:989    .text:0000000000002161 $d
             forth.s:989    .text:0000000000002162 $t
             forth.s:1008   .text:000000000000218b $d
             forth.s:1008   .text:000000000000218c $t
             forth.s:1048   .text:00000000000021dd $d
             forth.s:1048   .text:00000000000021de $t
             forth.s:1068   .text:0000000000002207 $d
             forth.s:1068   .text:0000000000002208 $t
             forth.s:1082   .text:0000000000002221 $d
             forth.s:1082   .text:0000000000002222 $t
             forth.s:1093   .text:000000000000223d $d
             forth.s:1093   .text:000000000000223e $t
             forth.s:1110   .text:0000000000002257 $d
             forth.s:1110   .text:0000000000002258 $t
             forth.s:1127   .text:0000000000002283 $d
             forth.s:1127   .text:0000000000002284 $t
             forth.s:1191   .text:0000000000002335 $d
             forth.s:1191   .text:0000000000002336 $t
             forth.s:1242   .text:00000000000023af $d
             forth.s:1242   .text:00000000000023b0 $t
             forth.s:1301   .text:0000000000002459 $d
             forth.s:1301   .text:000000000000245a $t
ARM GAS  forth.s 			page 180


             forth.s:1319   .text:0000000000002481 $d
             forth.s:1319   .text:0000000000002482 $t
             forth.s:1353   .text:00000000000024d3 $d
             forth.s:1353   .text:00000000000024d4 $t
             forth.s:1386   .text:0000000000002521 $d
             forth.s:1386   .text:0000000000002522 $t
             forth.s:1418   .text:0000000000002569 $d
             forth.s:1418   .text:000000000000256a $t
             forth.s:1498   .text:0000000000002657 $d
             forth.s:1498   .text:0000000000002658 $t
             forth.s:1510   .text:0000000000002675 $d
             forth.s:1510   .text:0000000000002676 $t
             forth.s:1542   .text:00000000000026c3 $d
             forth.s:1542   .text:00000000000026c4 $t
             forth.s:1558   .text:00000000000026ed $d
             forth.s:1558   .text:00000000000026ee $t
             forth.s:1572   .text:0000000000002717 $d
             forth.s:1572   .text:0000000000002718 $t
             forth.s:1636   .text:00000000000027af $d
             forth.s:1636   .text:00000000000027b0 $t
             forth.s:1757   .text:000000000000296f $d
             forth.s:1757   .text:0000000000002970 $t
             forth.s:1774   .text:00000000000029a5 $d
             forth.s:1774   .text:00000000000029a6 $t
             forth.s:1792   .text:00000000000029db $d
             forth.s:1792   .text:00000000000029dc $t
             forth.s:1862   .text:0000000000002a5b $d
             forth.s:1862   .text:0000000000002a5c $t
             forth.s:1897   .text:0000000000002abb $d
             forth.s:1897   .text:0000000000002abc $t
             forth.s:1932   .text:0000000000002b1f $d
             forth.s:1932   .text:0000000000002b20 $t
             forth.s:2067   .text:0000000000002cd3 $d
             forth.s:2067   .text:0000000000002cd4 $t
             forth.s:2106   .text:0000000000002d35 $d
             forth.s:2106   .text:0000000000002d36 $t
             forth.s:2119   .text:0000000000002d59 $d
             forth.s:2119   .text:0000000000002d5a $t
             forth.s:2345   .text:0000000000002fe3 $d
             forth.s:2345   .text:0000000000002fe4 $t
             forth.s:2437   .text:00000000000030f7 $d
             forth.s:2437   .text:00000000000030f8 $t
             forth.s:2488   .text:00000000000031af $d
             forth.s:2488   .text:00000000000031b0 $t
             forth.s:2500   .text:00000000000031d9 $d
             forth.s:2500   .text:00000000000031da $t
             forth.s:2521   .text:000000000000321f $d
             forth.s:2521   .text:0000000000003220 $t
             forth.s:2533   .text:000000000000323d $d
             forth.s:2533   .text:000000000000323e $t
             forth.s:2548   .text:000000000000326b $d
             forth.s:2548   .text:000000000000326c $t
             forth.s:2696   .text:00000000000033fb $d
             forth.s:2696   .text:00000000000033fc $t
             forth.s:2746   .text:00000000000034a1 $d
             forth.s:2746   .text:00000000000034a2 $t
             forth.s:2770   .text:00000000000034dd $d
ARM GAS  forth.s 			page 181


             forth.s:2770   .text:00000000000034de $t
             forth.s:2812   .text:000000000000355b $d
             forth.s:2812   .text:000000000000355c $t
             forth.s:2840   .text:00000000000035c3 $d
             forth.s:2840   .text:00000000000035c4 $t
             forth.s:2853   .text:00000000000035e5 $d
             forth.s:2853   .text:00000000000035e6 $t
             forth.s:2880   .text:0000000000003625 $d
             forth.s:2880   .text:0000000000003626 $t
             forth.s:2903   .text:0000000000003663 $d
             forth.s:2903   .text:0000000000003664 $t
             forth.s:2914   .text:0000000000003683 $d
             forth.s:2914   .text:0000000000003684 $t
             forth.s:2926   .text:00000000000036a3 $d
             forth.s:2926   .text:00000000000036a4 $t
             forth.s:2991   .text:0000000000003761 $d
             forth.s:2991   .text:0000000000003762 $t
             forth.s:3124   .text:00000000000038d1 $d
             forth.s:3124   .text:00000000000038d2 $t
             forth.s:3178   .text:0000000000003977 $d
             forth.s:3178   .text:0000000000003978 $t
             forth.s:3190   .text:000000000000399b $d
             forth.s:3190   .text:000000000000399c $t
             forth.s:3226   .text:0000000000003a13 $d
             forth.s:3226   .text:0000000000003a14 $t
             forth.s:3241   .text:0000000000003a45 $d
             forth.s:3241   .text:0000000000003a46 $t
             forth.s:3286   .text:0000000000003abd $d
             forth.s:3286   .text:0000000000003abe $t
             forth.s:3320   .text:0000000000003b37 $d
             forth.s:3320   .text:0000000000003b38 $t
             forth.s:3472   .text:0000000000003c5b $d
             forth.s:3472   .text:0000000000003c5c $t
             forth.s:3491   .text:0000000000003ca1 $d
             forth.s:3491   .text:0000000000003ca2 $t
             forth.s:3528   .text:0000000000003cfb $d
             forth.s:3528   .text:0000000000003cfc $t
             forth.s:3602   .text:0000000000003e15 $d
             forth.s:3602   .text:0000000000003e16 $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
