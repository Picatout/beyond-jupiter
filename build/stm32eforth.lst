ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
ARM GAS  forth.s 			page 9


  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	  .equ FP_WS, PEN_COLOR+4  // floating point work space 
ARM GAS  forth.s 			page 10


 109              	  .equ FP_WS_SIZE, 19  // 19 bytes for floating point work space 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
 165              	
ARM GAS  forth.s 			page 11


 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
 222              		// from a code word   
ARM GAS  forth.s 			page 12


 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
ARM GAS  forth.s 			page 13


  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
ARM GAS  forth.s 			page 14


 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF8A4C4 	  ldr IP,=dh
 159 000e 02F047B8 	  b INEXT  
 160              	dh:
 161 0012 713A0000 	  _ADR PRESE    
 162 0016 1F220000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e 55270000 	  _ADR COUNT 
 164 0022 29310000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a 51230000 	  _ADR DUPP
 167 002e F9220000 	  _ADR TOR 
 168 0032 1F220000 	  _DOLIT 16 
 168      10000000 
 169 003a ED270000 	  _ADR BASE 
 170 003e 91220000 	  _ADR STORE 
 171 0042 61320000 	  _ADR DOT 
 172 0046 D1220000 	  _ADR RFROM
 173 004a 1F220000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 95230000 	  _ADR ANDD
 175 0056 5F220000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 1F220000 	  _DOLIT ','
 177      2C000000 
 178 006a 29210000 	  _ADR EMIT 
 179 006e D5300000 	  _ADR SPACE 
 180 0072 61320000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
ARM GAS  forth.s 			page 15


 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 02F00AB8 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 02F001B8 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8D4C3 	  ldr IP,=ur
 232 00e2 01F0DDBF 	  b INEXT  
 233              	ur:
ARM GAS  forth.s 			page 16


 234 00e6 713A0000 	  _ADR PRESE
 235 00ea 5D310000 	  _ADR CR   
 236 00ee 1F220000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 55270000 		_ADR COUNT 
 238 00fa 29310000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0CEF9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0C7FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 04F0C7BA 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
ARM GAS  forth.s 			page 17


 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF834A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
ARM GAS  forth.s 			page 18


 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	
 347              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 348 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 349 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 350 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 351 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 352              	/* configure GPIOC:13 as output for user LED */
 353 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 353      C4F20200 
 354 0206 4FF00D01 	  mov r1,#LED_PIN
 355 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 356 020e 00B500F0 	  _CALL gpio_config 
 356      8FF85DF8 
 356      04EB
 357 0218 4FF00102 	  mov r2,#1
 358 021c 00B500F0 	  _CALL gpio_out 
 358      DEF85DF8 
 358      04EB
 359              	/* enable compensation CELL for fast I/O */
 360 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 360      C4F20101 
 361 022e 4FF00100 		mov r0,#1 
 362 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 363              	/* wait for ready bit */ 
 364 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 365 0236 10F4807F 	    tst r0,#(1<<8)
 366 023a FBD0     		beq 1b 	
 367              	
 368              	
 369              	/* configure systicks for 1msec ticks */
 370              	// set priority to 15 (lowest)
 371 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 372 0240 4FF00F01 	  mov r1,#15 
 373 0244 00B500F0 	  _CALL nvic_set_priority
 373      2FF85DF8 
 373      04EB
 374 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 374      CEF20000 
 375 0256 47F2FF61 	  _MOV32 r1,95999 
 375      C0F20101 
 376 025e 4160     	  str r1,[r0,#STK_LOAD]
 377 0260 4FF00701 	  mov r1,#7
 378 0264 0160     	  str r1,[r0,STK_CTL]
 379 0266 7047     	  _RET  
 380              	
ARM GAS  forth.s 			page 19


 381              	
 382              	/* copy system variables to RAM */ 
 383              		.type remap, %function 
 384              	    .global remap 
 385              	remap:
 386              	// copy system to RAM 	
 387 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 387      C2F20000 
 388 0270 9249     		ldr r1,=UZERO 
 389 0272 4FF0BB02 		mov r2,#ULAST-UZERO 
 390 0276 02F10302 		add r2,r2,#3
 391 027a 22F00302 		and r2,r2,#~3 
 392 027e 51F8043B 	1:	ldr r3,[r1],#4 
 393 0282 40F8043B 		str r3,[r0],#4 
 394 0286 043A     		subs R2,#4 
 395 0288 F9D1     		bne 1b
 396              	// zero end of RAM 
 397 028a 4FF00002 		_MOV32 r2,RAM_END 
 397      C2F20202 
 398 0292 83EA0303 		eor r3,r3,r3 
 399 0296 40F8043B 	2:  str r3,[r0],#4
 400 029a 9042     		cmp r0,r2 
 401 029c FBDB     		blt 2b 
 402 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 402      C2F20004 
 403 02a6 7047     		_RET 
 404              	
 405              	// set irq priority 
 406              	// 0 highest 
 407              	// 15 lowest
 408              	// input: r0 IRQn  
 409              	//        r1  ipr 
 410              	nvic_set_priority:
 411 02a8 08B4     	    push {r3}
 412 02aa 0028     	    cmp r0,#0 
 413 02ac 08D4     	    bmi negative_irq 
 414 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 414      CEF20003 
 415 02b6 4FEA0111 	    lsl r1,#4 
 416 02ba 1954     	    strb r1,[r3,r0]
 417 02bc 08BC     	    pop {r3}
 418 02be 7047     	    _RET 
 419              	negative_irq:
 420 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 420      CEF20003 
 421 02c8 00F00F00 	    and r0,#0XF 
 422 02cc A0F10400 	    sub r0,#4 
 423 02d0 4FEA0111 	    lsl r1,#4 
 424 02d4 1954     	    strb r1,[r3,r0]
 425 02d6 08BC     	    pop {r3}
 426 02d8 7047     	    _RET 
 427              	
 428              	
 429              	// enable interrupt in nvic 
 430              	// input: r0 = IRQn 
 431              	nvic_enable_irq: 
 432 02da 0EB4     	    push {r1,r2,r3}
ARM GAS  forth.s 			page 20


 433 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 433      CEF20003 
 434 02e4 0146     	    mov r1,r0 
 435 02e6 4FEA5111 	    lsr r1,#5  
 436 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 437 02ee 00F01F00 	    and r0,#31 // bit#
 438 02f2 4FF00102 	    mov r2,#1 
 439 02f6 02FA00F2 	    lsl r2,r0
 440 02fa 72B6     	    cpsid I
 441 02fc 5A50     	    str r2,[r3,r1]
 442 02fe 62B6     	    cpsie I 
 443 0300 0EBC     	    pop {r1,r2,r3}
 444 0302 7047     	    _RET 
 445              	
 446              	// disable interrupt in nvic
 447              	// input: r0 = IRQn
 448              	nvic_disable_irq:
 449 0304 0EB4     	    push {r1,r2,r3}
 450 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 450      CEF20003 
 451 030e 0146     	    mov r1,r0 
 452 0310 4FEA5111 	    lsr r1,#5  
 453 0314 4FEA8101 	    lsl r1,#2  // ISERn
 454 0318 00F01F00 	    and r0,#31 // bit#
 455 031c 4FF00102 	    mov r2,#1 
 456 0320 02FA00F2 	    lsl r2,r0
 457 0324 5A50     	    str r2,[r3,r1]
 458 0326 BFF34F8F 	    dsb 
 459 032a BFF36F8F 	    isb 
 460 032e 0EBC     	    pop {r1,r2,r3}
 461 0330 7047     	    _RET 
 462              	
 463              	/**********************************
 464              	  gpio_config 
 465              	  Configure gpio mode 
 466              	  input:
 467              	    r0   GPIOx 
 468              	    r1   pin 
 469              	    r2   mode 
 470              	  output:
 471              	    none 
 472              	  use:
 473              	    r3,r5,r11  
 474              	**********************************/
 475              	gpio_config:
 476 0332 2DE92808 	    push {r3,r5,r11}
 477              	//  clear registers field 
 478 0336 4FF00105 	    mov r5,#1
 479 033a 05FA01F5 	    lsl r5,r1
 480 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 481 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 482 0344 03EA0503 	    and r3,r5 
 483 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 484 034a 4FF00305 	    mov r5,#3 
 485 034e 4FF0020B 	    mov r11,#2 
 486 0352 01FB0BFB 	    mul r11,r1 
 487 0356 05FA0BF5 	    lsl r5,r11 
ARM GAS  forth.s 			page 21


 488 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 489 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 490 0360 03EA0503 	    and r3,r5 
 491 0364 0360     	    str r3,[r0,#GPIO_MODER]
 492 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 493 0368 03EA0503 	    and r3,r5 
 494 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 495              	// set mode register, r2 low nibble  
 496 036e 02F00305 	    and r5,r2,#3    
 497 0372 05FA0BF5 	    lsl r5,r11 // mode 
 498 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 499 0378 43EA0503 	    orr r3,r5 
 500 037c 0360     	    str r3,[r0,#GPIO_MODER]
 501 037e 032A     	    cmp r2,#3
 502 0380 13D0     	    beq 9f // analog input 
 503 0382 12F00305 	    ands r5,r2,#3 
 504 0386 08D0     	    beq input_pull 
 505              	output_type:
 506 0388 4FEA1212 	    lsr r2,#4 
 507 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 508 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 509 0392 43EA0203 	    orr r3,r2 
 510 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 511 0398 07E0     	    b 9f 
 512              	input_pull:
 513 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 514 039c 4FEA1212 	    lsr r2,#4 
 515 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 516 03a4 43EA0203 	    orr r3,r2 
 517 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 518 03aa BDE82808 	9:  pop {r3,r5,r11}
 519 03ae 7047     	    _RET 
 520              	
 521              	// configure gpio speed 
 522              	// input:
 523              	//    r0   GPIO_BASE_ADR 
 524              	//    r1   pin 
 525              	//    r2   speed
 526              	// use:
 527              	//  r3,r5,r11 
 528              	gpio_speed:
 529 03b0 2DE92808 	    push {r3,r5,r11}
 530 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 531 03b6 4FF00305 	    mov r5,#3
 532 03ba 4FF0020B 	    mov r11,#2 
 533 03be 01FB0BFB 	    mul r11,r1 
 534 03c2 05FA0BF5 	    lsl r5,r11
 535 03c6 6FEA0505 	    mvn r5,r5 
 536 03ca 03EA0503 	    and r3,r5   
 537 03ce 02FA0BF2 	    lsl r2,r11  
 538 03d2 43EA0203 	    orr r3,r2 
 539 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 540 03d8 BDE82808 	    pop {r3,r5,r11}
 541 03dc 7047     	    _RET
 542              	
 543              	/**************************** 
 544              	  gpio_out port,pin,0|1
ARM GAS  forth.s 			page 22


 545              	  input:
 546              	    r0   gpio_base_adr 
 547              	    r1   pin 
 548              	    r2   data 0|1 
 549              	**************************/
 550              	gpio_out:
 551 03de 08B4     	    push {r3}
 552 03e0 4FF00103 	    mov r3,#1 
 553 03e4 03FA01F3 	    lsl r3,r1 
 554 03e8 0AB9     	    cbnz r2, 1f 
 555 03ea 4FEA0343 	    lsl r3,#16 
 556 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 557 03f0 08BC     	    pop {r3}
 558 03f2 7047     	    _RET 
 559              	
 560              	/******************************************************
 561              	*  COLD start moves the following to USER variables.
 562              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 563              	******************************************************/
 564              		.p2align 2
 565              	UZERO:
 566 03f4 00000000 		.word 0  			/*Reserved */
 567 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 568 03fc 00000000 		.word 0      /* TICKS */
 569 0400 00000000 	    .word 0     /* CD_TIMER */
 570 0404 D8450000 		.word HI  /*'BOOT */
 571 0408 D4130000 		.word PS2_QKEY /* query for character */
 572 040c 9C0C0000 	  .word TV_EMIT  /* char output device */
 573 0410 0A000000 	  .word BASEE 	/*BASE */
 574 0414 00000000 		.word 0			/*tmp */
 575 0418 00000000 		.word 0			/*SPAN */
 576 041c 00000000 		.word 0			/*>IN */
 577 0420 00000000 		.word 0			/*#TIB */
 578 0424 00FF0120 		.word TIBB	/*TIBU */
 579 0428 48390000 		.word INTER	/*'EVAL */
 580 042c 00000000 		.word 0			/*HLD */
 581 0430 EC460000 		.word _LASTN	/*CONTEXT */
 582 0434 54470000 		.word CTOP  	/* FCP end of system dictionnary */
 583 0438 60430020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 584 043c EC460000 		.word _LASTN	/*LAST word in dictionary */
 585 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 585      00000000 
 585      00000000 
 585      00000000 
 586 0450 00000000 		.word 0  /* RX_HEAD */
 587 0454 00000000 		.word 0  /* RX_TAIL */ 
 588 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 589 045c 00000000 		.word 0  /* VID_STATE, video state */  
 590 0460 00000000 	    .word 0  /* VID_FIELD, field */
 591 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 592 0468 00000000 	    .word 0 /* kbd struct */
 593 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 593      00000000 
 593      00000000 
 593      00000000 
 594 047c 00000000 		.word 0  /* kbd queue head */
 595 0480 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 23


 596 0484 00000000 	    .word 0 /* tv cursor row */
 597 0488 00000000 	    .word 0 /* tv cursor column */ 
 598 048c 00000000 	    .word 0 /* tv back color */
 599 0490 07000000 	    .word 7 /* tv font color */
 600 0494 00000000 	    .space FP_WS_SIZE  /* floating point work space */ 
 600      00000000 
 600      00000000 
 600      00000000 
 600      000000
 601 04a7 00000000 	    .word 0,0 
 601      00000000 
 602              	ULAST:
 603              	
 604              	// used by _HEADER macro 
 605              	// to link names field
 606              	// in dictionary  
 607 04af 00120000 	    .equ LINK, 0 
 607      00E60000 
 607      00982000 
 607      00F40300 
 607      00
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04c0 4FF48053 		_MOV32 r3,UART 
ARM GAS  forth.s 			page 24


  36      C4F20103 
  37 04c8 1868     		ldr r0,[r3,#USART_SR]
  38 04ca 5968     		ldr r1,[r3,#USART_DR]
  39 04cc 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04d0 0CD0     		beq 2f // no char received 
  41 04d2 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04d6 3FF4FDAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04da 04F14C00 		add r0,UP,#RX_QUEUE
  44 04de 226E     		ldr r2,[UP,#RX_TAIL]
  45 04e0 8154     		strb r1,[r0,r2]
  46 04e2 02F10102 		add r2,#1 
  47 04e6 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04ea 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04ec 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04ee 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04f6 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04f8 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04fc 01EA0201 	  and r1,r1,r2
  62 0500 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0504 41EA0201 	  orr r1,r1,r2 
  64 0508 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 050a 4FF4EE61 	  mov r1,#0x77<<4 
  67 050e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0510 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0518 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 051c 8160     	  str r1,[r0,#USART_BRR]
  73 051e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0522 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0524 4FF02500 	  mov r0,#USART1_IRQ 
  77 0528 4FF00701 	  mov r1,#7
  78 052c 00B5FFF7 	  _CALL nvic_set_priority
  78      BBFE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0536 4FF02500 	  mov r0,#USART1_IRQ 
  81 053a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      CDFE5DF8 
  81      04EB
  82 0544 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
ARM GAS  forth.s 			page 25


  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0546 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0554 47F8046D 		_PUSH
  92 0558 206E     		ldr T0,[UP,#RX_TAIL] 
  93 055a E16D     		ldr T1,[UP,#RX_HEAD]
  94 055c 90EA0106 		eors TOS,T0,T1 
  95 0560 0CD0     		beq 1f
  96 0562 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0566 0844     		add T0,T1 
  98 0568 0678     		ldrb TOS,[T0]
  99 056a 01F10101 		add T1,#1 
 100 056e 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0572 E165     		str T1,[UP,#RX_HEAD]
 102 0574 47F8046D 		_PUSH 
 103 0578 4FF0FF36 		mov TOS,#-1
 104 057c 01F090BD 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0580 4A050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0590 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0598 2868     	1:  ldr T0,[WP,#USART_SR]
 113 059a 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 059e FBD0     		beq 1b 
 115 05a0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 05a2 57F8046B 		_POP
 117 05a6 01F07BBD 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 05aa 84050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05b4 47F8046D 	        _PUSH 
 126 05b8 4FF00006 	        mov TOS,#0
 127 05bc 01F070BD 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05c0 AE050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
ARM GAS  forth.s 			page 26


 133      49414C00 
 134 05cc 47F8046D 	        _PUSH 
 135 05d0 4FF00106 	        mov TOS,#1
 136 05d4 01F064BD 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05d8 C4050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05e4 3046     	        mov T0,TOS
 144 05e6 57F8046B 	        _POP 
 145 05ea 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05ec 4B48     	        ldr T0,=SER_QKEY 
 148 05ee 6061     	        str T0,[UP,#STDIN]
 149 05f0 4B48     	        ldr T0,=SER_EMIT
 150 05f2 A061     	        str T0,[UP,#STDOUT]
 151 05f4 01F054BD 	        _NEXT 
 152              	4: // local console 
 153 05f8 4A48     	        ldr T0,=PS2_QKEY
 154 05fa 6061     	        str T0,[UP,#STDIN]
 155 05fc 4A48     	        ldr T0,=TV_EMIT
 156 05fe A061     	        str T0,[UP,#STDOUT]
 157 0600 01F04EBD 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0604 DC050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0614 504700BF 	      _NEST 
 166 0618 1F220000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0620 71240000 	1:    _ADR ONEP  // c+1
 168 0624 F9220000 	      _ADR TOR   
 169 0628 1F220000 	      _DOLIT 10 
 169      0A000000 
 170 0630 5D2A0000 	      _ADR SLMOD // r q  
 171 0634 25250000 	      _ADR QDUP  // r q q | r 0  
 172 0638 5F220000 	      _QBRAN 2f  // r 0 
 172      4C060000 
 173 0640 D1220000 	      _ADR RFROM // r q c 
 174 0644 73220000 	      _BRAN 1b
 174      20060000 
 175 064c 1F220000 	2:    _DOLIT '0'  
 175      30000000 
 176 0654 15240000 	      _ADR PLUS 
 177 0658 29210000 	      _ADR EMIT 
 178 065c D1220000 	      _ADR RFROM 
 179 0660 25250000 	      _ADR QDUP 
ARM GAS  forth.s 			page 27


 180 0664 5F220000 	      _QBRAN 3f
 180      7C060000 
 181 066c 81240000 	      _ADR ONEM 
 182 0670 F9220000 	      _ADR TOR 
 183 0674 73220000 	      _BRAN 2b 
 183      4C060000 
 184              	3:    
 185 067c A7200000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0680 08060000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 068c 504700BF 	      _NEST 
 193 0690 1F220000 	      _DOLIT 27 
 193      1B000000 
 194 0698 29210000 	      _ADR EMIT 
 195 069c 1F220000 	      _DOLIT '['
 195      5B000000 
 196 06a4 29210000 	      _ADR EMIT 
 197 06a8 A7200000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 06ac 84060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06b8 504700BF 	      _NEST
 205 06bc 8D060000 	      _ADR ANSI_ESC
 206 06c0 61230000 	      _ADR SWAP 
 207 06c4 15060000 	      _ADR ANSI_PARAM 
 208 06c8 1F220000 	      _DOLIT ';'
 208      3B000000 
 209 06d0 29210000 	      _ADR EMIT
 210 06d4 15060000 	      _ADR ANSI_PARAM
 211 06d8 1F220000 	      _DOLIT 'H'
 211      48000000 
 212 06e0 29210000 	      _ADR EMIT 
 213 06e4 A7200000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06e8 B0060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06f4 504700BF 	    _NEST
 221 06f8 1F220000 	    _DOLIT 1 
 221      01000000 
 222 0700 51230000 	    _ADR DUPP 
 223 0704 B9060000 	    _ADR SER_AT  
ARM GAS  forth.s 			page 28


 224 0708 8D060000 	    _ADR ANSI_ESC
 225 070c 1F220000 	    _DOLIT 'J'
 225      4A000000 
 226 0714 29210000 	    _ADR EMIT 
 227 0718 A7200000 	    _UNNEST 
 228 071c 54050000 	
 228      90050000 
 228      D4130000 
 228      9C0C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
ARM GAS  forth.s 			page 29


  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 072c 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
ARM GAS  forth.s 			page 30


  77 0734 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0736 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 073e 41EA0201 	  orr r1,r2
  82 0742 0160     	  str r1,[r0,#GPIO_MODER]
  83 0744 81EA0101 	  eor r1,r1 
  84 0748 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 074a 4FF00101 	  mov r1,#1 // pin 1 
  88 074e 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0752 00B5FFF7 	  _CALL gpio_config 
  89      EDFD5DF8 
  89      04EB
  90 075c 4FF00101 	  mov r1,#1 
  91 0760 4FF00202 	  mov r2,#2
  92 0764 00B5FFF7 	  _CALL gpio_speed 
  92      23FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 076e 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0770 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0774 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0776 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 077e 4FF00200 	  mov r0,#2 
 100 0782 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0784 41EA0001 	  orr r1,r0 
 102 0788 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 078a 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0792 41F2D470 	  mov r0,#HPER
 106 0796 D062     	  str r0,[r2,#TIM_ARR]
 107 0798 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 079c D063     	  str r0,[r2,#TIM_CCR3]
 109 079e 4FF4E170 	  mov r0,#HPULSE 
 110 07a2 1064     	  str r0,[r2,#TIM_CCR4]  
 111 07a4 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 07a8 D061     	  str r0,[r2,#TIM_CCMR2]
 113 07aa 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 07ae 1062     	  str r0,[r2,#TIM_CCER]
 115 07b0 4FF00100 	  mov r0,#1 
 116 07b4 D060     	  str r0,[r2,#TIM_DIER]
 117 07b6 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 07b8 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 07bc 4FF00201 	  mov r1,#2
 121 07c0 00B5FFF7 	  _CALL nvic_set_priority
 121      71FD5DF8 
 121      04EB
 122 07ca 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 07ce 00B5FFF7 	  _CALL nvic_enable_irq
 123      83FD5DF8 
ARM GAS  forth.s 			page 31


 123      04EB
 124 07d8 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 07da 00BF     	  _GBL_FUNC tv_out_isr
 132 07dc 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 07e4 81EA0101 	  eor T1,T1
 134 07e8 0161     	  str T1,[T0,#TIM_SR]
 135 07ea 616E     	  ldr T1,[UP,#VID_CNTR]
 136 07ec 01F10101 	  add T1,#1 
 137 07f0 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 07f2 A26E     	  ldr T2,[UP,#VID_STATE]
 140 07f4 002A     	  cmp T2,#ST_VSYNC 
 141 07f6 07D0     	  beq state_vsync
 142 07f8 012A     	  cmp T2,#ST_PREVID 
 143 07fa 2FD0     	  beq state_pre_video 
 144 07fc 022A     	  cmp T2,#ST_VIDEO 
 145 07fe 36D0     	  beq state_video_out 
 146 0800 032A     	  cmp T2,#ST_POSTVID 
 147 0802 63D0     	  beq state_post_video
 148 0804 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0808 0129     	  cmp T1,#1
 152 080a 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 080c 4FF0DB01 	  mov T1,#SERRATION
 155 0810 0164     	  str T1,[T0,#TIM_CCR4]
 156 0812 40F6E931 	  mov T1,#SYNC_LINE 
 157 0816 C162     	  str T1,[T0,#TIM_ARR]
 158 0818 6BE0     	  b tv_isr_exit 
 159 081a 0729     	1: cmp T1,#7
 160 081c 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 081e 40F62821 	  mov T1,#VSYNC_PULSE
 163 0822 0164     	  str T1,[T0,#TIM_CCR4]
 164 0824 65E0     	  b tv_isr_exit
 165 0826 0D29     	2: cmp T1,#13
 166 0828 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 082a 4FF0DB01 	   mov T1,#SERRATION 
 169 082e 0164     	   str T1,[T0,#TIM_CCR4]
 170 0830 5FE0     	   b tv_isr_exit   
 171 0832 1229     	3: cmp T1,#18
 172 0834 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0836 E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0838 0029     	   cmp T1,#ODD_FIELD  
 176 083a 5AD0     	   beq tv_isr_exit 
 177 083c 01E0     	   b sync_end 
 178 083e 1329     	4: cmp T1,#19 
ARM GAS  forth.s 			page 32


 179 0840 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0842 4FF00901 	   mov T1,#9
 182 0846 6166     	   str T1,[UP,#VID_CNTR]
 183 0848 4FF4E171 	   mov T1,#HPULSE 
 184 084c 0164     	   str T1,[T0,#TIM_CCR4] 
 185 084e 41F2D471 	   mov T1,#HPER 
 186 0852 C162     	   str T1,[T0,#TIM_ARR] 
 187 0854 4FF00101 	   mov T1,#ST_PREVID 
 188 0858 A166     	   str T1,[UP,#VID_STATE]
 189 085a 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 085c 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 085e 48D4     	   bmi tv_isr_exit 
 194 0860 4FF00201 	   mov T1,#ST_VIDEO 
 195 0864 A166     	   str T1,[UP,#VID_STATE]
 196 0866 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 086a C160     	   str T1,[T0,#TIM_DIER]
 198 086c 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 086e F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0870 06D9     	   bls 1f 
 205 0872 4FF00301 	   mov T1,#ST_POSTVID 
 206 0876 A166     	   str T1,[UP,#VID_STATE]
 207 0878 4FF00101 	   mov T1,#1 
 208 087c C160     	   str T1,[T0,#TIM_DIER]
 209 087e 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0880 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0882 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0886 4FF0A003 	   mov T3,#160
 214 088a 03FB01F1 	   mul T1,T3 
 215 088e 0844     	   add T0,T1  
 216 0890 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0898 10F8012B 	2: ldrb T2,[T0],#1 
 222 089c 4FEA0222 	   lsl T2,#8 
 223 08a0 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 08a2 AFF30080 	   nop.w 
 225 08a6 AFF30080 	   nop.w
 226 08aa AFF30080 	   nop.w 
 227 08ae AFF30080 	   nop.w 
 228 08b2 4FEA0212 	   lsl T2,#4  
 229 08b6 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 08b8 AFF30080 	   nop.w
 231 08bc AFF30080 	   nop.w  
 232 08c0 013B     	   subs T3,#1
 233 08c2 E9D1     	   bne 2b  
 234 08c4 4FF47022 	   mov T2,#(15<<16) 
ARM GAS  forth.s 			page 33


 235 08c8 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 08ca 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 08cc 4FF48372 	   mov T2,#262
 239 08d0 9142     	   cmp T1,T2
 240 08d2 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 08d4 E16E     	   ldr T1,[UP,VID_FIELD]
 243 08d6 11B9     	   cbnz T1, frame_end 
 244 08d8 40F6E931 	   mov T1,#SYNC_LINE
 245 08dc C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 08de 4FF00001 	   mov T1,#ST_VSYNC 
 248 08e2 A166     	   str T1,[UP,#VID_STATE]
 249 08e4 81EA0101 	   eor T1,T1 
 250 08e8 6166     	   str T1,[UP,#VID_CNTR]
 251 08ea E16E     	   ldr T1,[UP,#VID_FIELD]
 252 08ec 6FEA0101 	   mvn T1,T1  
 253 08f0 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 08f2 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 08f4 EC060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0904 47F8046D 		_PUSH 
 266 0908 04F19806 		ADD TOS,UP,#BK_COLOR
 267 090c 01F0C8BB 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0910 F8080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0920 47F8046D 		_PUSH 
 273 0924 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0928 01F0BABB 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 092c 14090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0938 47F8046D 	  _PUSH 
 280 093c 04F19406 	  ADD TOS,UP,#COL 
 281 0940 01F0AEBB 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
ARM GAS  forth.s 			page 34


 284              	// cursor row 
 285 0944 30090000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 094c 47F8046D 	  _PUSH 
 287 0950 04F19006 	  ADD TOS,UP,#ROW 
 288 0954 01F0A4BB 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0958 48090000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0964 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0968 00FB06F6 	  mul TOS,T0 
 295 096c 01F098BB 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0970 5C090000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 097c 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0980 00FB06F6 	  mul TOS,T0 
 302 0984 01F08CBB 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0988 74090000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0994 47F8046D 	  _PUSH 
 308 0998 DFF88C65 	  ldr TOS,=font_6x8 
 309 099c 01F080BB 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 09a0 8C090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 09ac 47F8046D 	  _PUSH 
 315 09b0 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 09b2 01F075BB 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 09b6 A4090000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 09c0 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 09c2 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 09c6 02FB00F0 	    mul T0,T2 
ARM GAS  forth.s 			page 35


 330 09ca 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 09ce 1044     	    add T0,T2 
 332 09d0 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 09d2 0344     	    add T3,T0 // T3 -> byte address 
 334 09d4 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 09d6 4FF00F02 	    mov T2,#15 // AND mask 
 336 09da 11F0010F 	    tst T1,#1 
 337 09de 01D0     	    beq 1f 
 338 09e0 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 09e4 DFF84405 	1:  ldr T0,=plot_op 
 340 09e8 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 09ec 05EA0205 	    and WP,T2 // mask out nibble 
 343 09f0 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 09f4 11F0010F 	    tst T1,#1 
 345 09f8 01D1     	    bne 1f 
 346 09fa 4FEA0010 	    lsl T0,#4 // high nibble  
 347 09fe 45EA0005 	1:  orr WP,T0  
 348 0a02 1D70     	    strb WP,[T3]
 349 0a04 1AE0     	    b 9f 
 350              	op_pen: 
 351 0a06 05EA0205 	    and WP,T2 
 352 0a0a 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0a0e 11F0010F 	    tst T1,#1
 354 0a12 01D1     	    bne 1f 
 355 0a14 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0a18 45EA0005 	1:	orr WP,T0 
 357 0a1c 1D70     	    strb WP,[T3]
 358 0a1e 0DE0     	    b 9f 
 359              	op_invert:
 360 0a20 85EA0205 	    eor WP,T2 
 361 0a24 1D70     	    strb WP,[T3]
 362 0a26 09E0     	    b 9f 
 363              	op_xor:
 364 0a28 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0a2c 11F0010F 	    tst T1,#1 
 366 0a30 01D1     	    bne 1f 
 367 0a32 4FEA0010 	    lsl T0,#4 
 368 0a36 85EA0005 	1:  eor WP,T0 
 369 0a3a 1D70     	    strb WP,[T3]
 370 0a3c 57F8046B 	9:  _POP 
 371 0a40 01F02EBB 	    _NEXT 
 372              	
 373 0a44 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0a48 BA090000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0a54 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0a56 0028     	    cmp T0,#0
 381 0a58 FCD1     	    bne 1b
 382 0a5a 01F021BB 	    _NEXT 
 383              	
 384              	// CLS ( -- )
ARM GAS  forth.s 			page 36


 385              	// clear TV screen 
 386 0a5e 4C0A0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0a68 80EA0000 	    eor T0,T0 
 388 0a6c 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0a70 40EA0100 	    orr T0,T1 
 390 0a74 4FEA0111 	    lsl T1,#4 
 391 0a78 40EA0100 	    orr T0,T1 
 392 0a7c 4FEA0021 	    lsl T1,T0,#8 
 393 0a80 40EA0100 	    orr T0,T1 
 394 0a84 4FEA0041 	    lsl T1,T0,#16
 395 0a88 40EA0100 	    orr T0,T1 
 396 0a8c 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0a90 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0a92 5050     	1:	str T0,[T2,T1]
 399 0a94 0439     	    subs T1,#4
 400 0a96 FCD1     	    bne 1b
 401 0a98 1060     	    str T0,[T2]
 402 0a9a 80EA0000 	    eor T0,T0 
 403 0a9e C4F89000 	    str T0,[UP,#ROW]
 404 0aa2 C4F89400 	    str T0,[UP,#COL]
 405 0aa6 01F0FBBA 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0aaa 620A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0ab8 504700BF 	  _NEST
 412 0abc 1F220000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0ac4 51230000 	  _ADR DUPP  
 414 0ac8 F9220000 	  _ADR TOR 
 415 0acc 35240000 	  _ADR STAR
 416 0ad0 AD090000 	  _ADR VIDBUFF
 417 0ad4 15240000 	  _ADR PLUS
 418 0ad8 D1220000 	  _ADR RFROM   
 419 0adc 1F220000 	  _DOLIT 0 
 419      00000000 
 420 0ae4 912C0000 	  _ADR FILL 
 421 0ae8 A7200000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0aec AE0A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0afc 504700BF 	    _NEST 
 429 0b00 AD090000 	    _ADR VIDBUFF 
 430 0b04 51230000 	    _ADR DUPP 
 431 0b08 1F220000 	    _DOLIT BPR*CHAR_HEIGHT 
ARM GAS  forth.s 			page 37


 431      00050000 
 432 0b10 51230000 	    _ADR DUPP 
 433 0b14 F9220000 	    _ADR TOR 
 434 0b18 15240000 	    _ADR PLUS 
 435 0b1c 61230000 	    _ADR SWAP 
 436 0b20 1F220000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0b28 D1220000 	    _ADR RFROM  
 438 0b2c 25240000 	    _ADR SUBB 
 439 0b30 492C0000 	    _ADR MOVE
 440 0b34 1F220000 	    _DOLIT 24 
 440      18000000 
 441 0b3c B90A0000 	    _ADR CLRLINE 
 442 0b40 A7200000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0b44 F00A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0b54 504700BF 	    _NEST 
 450 0b58 AD090000 	    _ADR VIDBUFF
 451 0b5c 51230000 	    _ADR DUPP 
 452 0b60 1F220000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0b68 15240000 	    _ADR PLUS 
 454 0b6c 1F220000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0b74 1F220000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0b7c 25240000 	    _ADR SUBB  
 457 0b80 492C0000 	    _ADR MOVE
 458 0b84 1F220000 	    _DOLIT 0 
 458      00000000 
 459 0b8c B90A0000 	    _ADR CLRLINE
 460 0b90 A7200000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0b94 480B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0ba0 E34D     	    ldr WP,=SCROLLUP 
 469 0ba2 45F00105 	    orr WP,#1
 470 0ba6 80EA0000 	    eor T0,T0 
 471 0baa C4F89400 	    str T0,[UP,#COL]
 472 0bae D4F89000 	    ldr T0,[UP,#ROW]
 473 0bb2 1828     	    cmp T0,#24 
 474 0bb4 A2D0     	    beq SCROLLUP  
 475 0bb6 00F10100 	    add T0,#1 
 476 0bba C4F89000 	    str T0,[UP,#ROW]
ARM GAS  forth.s 			page 38


 477 0bbe 01F06FBA 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0bc2 980B0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0bcc D4F89400 	  ldr T0,[UP,#COL]
 484 0bd0 00F10100 	  add T0,#1
 485 0bd4 3528     	  cmp T0,#53
 486 0bd6 E3D5     	  bpl TV_CRLF  
 487 0bd8 C4F89400 	  str T0,[UP,#COL]
 488 0bdc 01F060BA 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0be0 C60B0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0bec D4F89400 	    ldr T0,[UP,#COL]
 497 0bf0 28B1     	    cbz T0,1f 
 498 0bf2 A0F10100 	    sub T0,#1 
 499 0bf6 C4F89400 	    str T0,[UP,#COL]
 500 0bfa 01F051BA 	    _NEXT 
 501 0bfe D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0c02 38B1     	    cbz T0,9f
 503 0c04 A0F10100 	    sub T0,#1
 504 0c08 C4F89000 	    str T0,[UP,#ROW]
 505 0c0c 4FF03400 	    mov T0,#52 
 506 0c10 C4F89400 	    str T0,[UP,#COL]
 507 0c14 01F044BA 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0c18 4FF08000 	    mov T0,#128 
 513 0c1c 06EA0006 	    and TOS,T0 
 514 0c20 4FEAD616 	    lsr TOS,#7
 515 0c24 01F03CBA 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0c28 3868     	  ldr T0,[DSP]
 520 0c2a 00F10100 	  add T0,#1 
 521 0c2e 3860     	  str T0,[DSP]
 522 0c30 01F036BA 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0c34 4FEA4606 	    lsl TOS,#1
 527 0c38 01F032BA 	    _NEXT 
 528              	
 529              	
ARM GAS  forth.s 			page 39


 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0c3c 504700BF 	    _NEST 
 536 0c40 1F220000 	    _DOLIT 5 
 536      05000000 
 537 0c48 F9220000 	    _ADR TOR 
 538 0c4c F9220000 	1:  _ADR TOR 
 539 0c50 89250000 	    _ADR DDUP 
 540 0c54 E5220000 	    _ADR RAT
 541 0c58 190C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0c5c C1090000 	    _ADR PLOT 
 543 0c60 290C0000 	    _ADR INCR_X 
 544 0c64 D1220000 	    _ADR RFROM 
 545 0c68 350C0000 	    _ADR NEXT_PIXEL
 546 0c6c 41220000 	    _DONXT 1b
 546      4C0C0000 
 547 0c74 75250000 	    _ADR TDROP 
 548 0c78 A7200000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0c7c A6F12006 	   sub TOS,#32
 553 0c80 4FF00800 	   mov T0,#8 
 554 0c84 00FB06F6 	   mul TOS,T0 
 555 0c88 A748     	   ldr T0,=font_6x8
 556 0c8a 0644     	   add TOS,T0 
 557 0c8c 01F008BA 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0c90 E40B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0c9c 504700BF 	    _NEST
 565 0ca0 51230000 	    _ADR DUPP 
 566 0ca4 1F220000 	    _DOLIT 32 
 566      20000000 
 567 0cac 85260000 	    _ADR ULESS
 568 0cb0 5F220000 	    _QBRAN 1f
 568      C00C0000 
 569 0cb8 73220000 	    _BRAN CTRL_KEY
 569      240D0000 
 570 0cc0 7D0C0000 	1:  _ADR CHAR_FONT 
 571 0cc4 39090000 	    _ADR CURSOR_COL 
 572 0cc8 A5220000 	    _ADR AT
 573 0ccc 7D090000 	    _ADR COLX  // x coord 
 574 0cd0 4D090000 	    _ADR CURSOR_ROW 
 575 0cd4 A5220000 	    _ADR AT    
 576 0cd8 65090000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0cdc 39250000 	    _ADR ROT  // TEST 
 578 0ce0 1F220000 	    _DOLIT 7   
 578      07000000 
ARM GAS  forth.s 			page 40


 579 0ce8 F9220000 	    _ADR TOR  
 580 0cec F9220000 	1:  _ADR TOR  // { x y }
 581 0cf0 89250000 	    _ADR DDUP  // { x y x y }
 582 0cf4 E5220000 	    _ADR RAT 
 583 0cf8 C5220000 	    _ADR CAT   // { x y x y r }
 584 0cfc 3D0C0000 	    _ADR CHAR_ROW 
 585 0d00 71240000 	    _ADR ONEP // {x y' }
 586 0d04 D1220000 	    _ADR RFROM 
 587 0d08 71240000 	    _ADR ONEP // {x y' c-adr' }
 588 0d0c 41220000 	    _DONXT 1b
 588      EC0C0000 
 589 0d14 75250000 	    _ADR TDROP  
 590 0d18 CD0B0000 	    _ADR RIGHT
 591 0d1c 0D0E0000 	9:  _ADR SHOW_CURSOR 
 592 0d20 A7200000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0d24 950E0000 	    _ADR HIDE_CURSOR
 595 0d28 51230000 	    _ADR DUPP 
 596 0d2c 1F220000 	    _DOLIT BKSPP  
 596      08000000 
 597 0d34 6D260000 	    _ADR EQUAL 
 598 0d38 5F220000 	    _QBRAN 1f 
 598      500D0000 
 599 0d40 ED0D0000 	    _ADR BACK_SPACE 
 600 0d44 41230000 	8:  _ADR DROP 
 601 0d48 73220000 	    _BRAN 9b 
 601      1C0D0000 
 602 0d50 51230000 	1:  _ADR DUPP 
 603 0d54 1F220000 	    _DOLIT CRR 
 603      0D000000 
 604 0d5c 6D260000 	    _ADR EQUAL 
 605 0d60 5F220000 	    _QBRAN 1f 
 605      740D0000 
 606 0d68 950D0000 	    _ADR CAR_RET
 607 0d6c 73220000 	    _BRAN 8b
 607      440D0000 
 608 0d74 1F220000 	1:  _DOLIT LF 
 608      0A000000 
 609 0d7c 6D260000 	    _ADR EQUAL 
 610 0d80 5F220000 	    _QBRAN 9b 
 610      1C0D0000 
 611 0d88 AD0D0000 	    _ADR LN_FEED
 612 0d8c 73220000 	    _BRAN 9b  
 612      1C0D0000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0d94 504700BF 	   _NEST
 620 0d98 1F220000 	   _DOLIT 0 
 620      00000000 
 621 0da0 39090000 	   _ADR CURSOR_COL 
 622 0da4 91220000 	   _ADR STORE 
 623 0da8 A7200000 	   _UNNEST   
 624              	
ARM GAS  forth.s 			page 41


 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 0dac 504700BF 	    _NEST 
 631 0db0 4D090000 	    _ADR CURSOR_ROW 
 632 0db4 A5220000 	    _ADR AT 
 633 0db8 51230000 	    _ADR DUPP 
 634 0dbc 1F220000 	    _DOLIT 24 
 634      18000000 
 635 0dc4 BD230000 	    _ADR XORR 
 636 0dc8 5F220000 	    _QBRAN 1f
 636      E00D0000 
 637 0dd0 71240000 	    _ADR ONEP 
 638 0dd4 4D090000 	    _ADR CURSOR_ROW 
 639 0dd8 91220000 	    _ADR STORE 
 640 0ddc A7200000 	    _UNNEST    
 641 0de0 41230000 	1:  _ADR DROP 
 642 0de4 FD0A0000 	    _ADR SCROLLUP 
 643 0de8 A7200000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 0dec 504700BF 	  _NEST 
 652 0df0 ED0B0000 	  _ADR LEFT 
 653 0df4 0D0E0000 	  _ADR SHOW_CURSOR
 654 0df8 A7200000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 0dfc 940C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 0e0c 504700BF 	    _NEST 
 663 0e10 1F220000 	    _DOLIT 0xFF
 663      FF000000 
 664 0e18 4D090000 	0:  _ADR CURSOR_ROW
 665 0e1c A5220000 	    _ADR AT  
 666 0e20 71240000 	    _ADR ONEP 
 667 0e24 65090000 	    _ADR ROWY 
 668 0e28 1F220000 	    _DOLIT BPR
 668      A0000000 
 669 0e30 35240000 	    _ADR STAR
 670 0e34 1F220000 	    _DOLIT BPR  
 670      A0000000 
 671 0e3c 25240000 	    _ADR SUBB 
 672 0e40 39090000 	    _ADR CURSOR_COL
 673 0e44 A5220000 	    _ADR AT 
ARM GAS  forth.s 			page 42


 674 0e48 7D090000 	    _ADR COLX 
 675 0e4c 15250000 	    _ADR TWOSL  
 676 0e50 15240000 	    _ADR PLUS
 677 0e54 AD090000 	    _ADR VIDBUFF
 678 0e58 15240000 	    _ADR PLUS
 679 0e5c 1F220000 	    _DOLIT 2
 679      02000000 
 680 0e64 F9220000 	    _ADR TOR  
 681 0e68 89250000 	1:  _ADR DDUP 
 682 0e6c B1220000 	    _ADR CSTOR 
 683 0e70 71240000 	    _ADR ONEP 
 684 0e74 41220000 	    _DONXT 1b
 684      680E0000 
 685 0e7c 61250000 	2:  _ADR DDROP // drop 3 elements 
 686 0e80 A7200000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 0e84 000E0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 0e94 504700BF 	    _NEST 
 694 0e98 05090000 	    _ADR BACKCOLOR 
 695 0e9c A5220000 	    _ADR AT 
 696 0ea0 51230000 	    _ADR DUPP  
 697 0ea4 1F220000 	    _DOLIT 4 
 697      04000000 
 698 0eac 05240000 	    _ADR LSHIFT 
 699 0eb0 A9230000 	    _ADR ORR 
 700 0eb4 73220000 	    _BRAN 0b
 700      180E0000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 0ebc 880E0000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 0ec8 352E     	    cmp TOS,#53
 706 0eca 01D4     	    bmi 1f 
 707 0ecc 4FF03406 	    mov TOS,#52
 708 0ed0 C4F89460 	1:  str TOS,[UP,#COL]
 709 0ed4 57F8046B 	    _POP
 710 0ed8 192E     	    cmp TOS,#25
 711 0eda 01D4     	    bmi 1f 
 712 0edc 4FF01806 	    mov TOS,#24 
 713 0ee0 C4F89060 	1:  str TOS,[UP,#ROW]
 714 0ee4 57F8046B 	    _POP 
 715 0ee8 01F0DAB8 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 0eec C00E0000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
ARM GAS  forth.s 			page 43


 720 0ef8 504700BF 	    _NEST 
 721 0efc C12B0000 	    _ADR PAD 
 722 0f00 51230000 	    _ADR DUPP 
 723 0f04 71240000 	    _ADR ONEP 
 724 0f08 1F220000 	    _DOLIT 53
 724      35000000 
 725 0f10 35380000 	    _ADR ACCEP
 726 0f14 61230000 	    _ADR SWAP 
 727 0f18 41230000 	    _ADR DROP 
 728 0f1c 75230000 	    _ADR OVER 
 729 0f20 B1220000 	    _ADR CSTOR  
 730 0f24 A7200000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
ARM GAS  forth.s 			page 44


 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
ARM GAS  forth.s 			page 45


 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
ARM GAS  forth.s 			page 46


 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
ARM GAS  forth.s 			page 47


   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
ARM GAS  forth.s 			page 48


  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
ARM GAS  forth.s 			page 49


  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
ARM GAS  forth.s 			page 50


 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f34 1C61     	   .byte 0x1c,'a' 
   9 0f36 3262     	   .byte 0x32,'b'
  10 0f38 2163     	   .byte 0x21,'c'
  11 0f3a 2364     	   .byte 0x23,'d'
  12 0f3c 2465     	   .byte 0x24,'e'
  13 0f3e 2B66     	   .byte 0x2b,'f'
  14 0f40 3467     	   .byte 0x34,'g'
  15 0f42 3368     	   .byte 0x33,'h'
  16 0f44 4369     	   .byte 0x43,'i'
  17 0f46 3B6A     	   .byte 0x3B,'j'
  18 0f48 426B     	   .byte 0x42,'k'
  19 0f4a 4B6C     	   .byte 0x4b,'l'
  20 0f4c 3A6D     	   .byte 0x3a,'m'
  21 0f4e 316E     	   .byte 0x31,'n'
  22 0f50 446F     	   .byte 0x44,'o'
  23 0f52 4D70     	   .byte 0x4d,'p'
  24 0f54 1571     	   .byte 0x15,'q'
  25 0f56 2D72     	   .byte 0x2d,'r'
  26 0f58 1B73     	   .byte 0x1b,'s'
  27 0f5a 2C74     	   .byte 0x2c,'t'
  28 0f5c 3C75     	   .byte 0x3c,'u'
  29 0f5e 2A76     	   .byte 0x2a,'v'
  30 0f60 1D77     	   .byte 0x1d,'w'
  31 0f62 2278     	   .byte 0x22,'x'
  32 0f64 3579     	   .byte 0x35,'y'
  33 0f66 1A7A     	   .byte 0x1a,'z'
  34 0f68 4530     	   .byte 0x45,'0'
  35 0f6a 1631     	   .byte 0x16,'1'
  36 0f6c 1E32     	   .byte 0x1e,'2'
  37 0f6e 2633     	   .byte 0x26,'3'
  38 0f70 2534     	   .byte 0x25,'4'
  39 0f72 2E35     	   .byte 0x2e,'5'
  40 0f74 3636     	   .byte 0x36,'6'
  41 0f76 3D37     	   .byte 0x3d,'7'
  42 0f78 3E38     	   .byte 0x3e,'8'
  43 0f7a 4639     	   .byte 0x46,'9'
  44 0f7c 0E60     	   .byte 0x0e,'`'
  45 0f7e 4E2D     	   .byte 0x4e,'-'
ARM GAS  forth.s 			page 51


  46 0f80 553D     	   .byte 0x55,'='
  47 0f82 5D5C     	   .byte 0x5d,'\\'
  48 0f84 545B     	   .byte 0x54,'['
  49 0f86 5B5D     	   .byte 0x5b,']'
  50 0f88 4C3B     	   .byte 0x4c,';'
  51 0f8a 5227     	   .byte 0x52,'\''
  52 0f8c 412C     	   .byte 0x41,','
  53 0f8e 492E     	   .byte 0x49,'.'
  54 0f90 7C2A     	   .byte 0x7c,'*'
  55 0f92 792B     	   .byte 0x79,'+'
  56 0f94 2920     	   .byte 0x29,' '
  57 0f96 5A0D     	   .byte SC_ENTER,CRR 
  58 0f98 6608     	   .byte SC_BKSP,BKSPP 
  59 0f9a 0D09     	   .byte SC_TAB,9
  60 0f9c 761B     	   .byte SC_ESC,27
  61 0f9e 119E     	   .byte SC_LALT,VK_LALT 
  62 0fa0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0fa2 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0fa4 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0fa6 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0fa8 5800     	   .byte SC_CAPS,0
  67 0faa 0580     	   .byte SC_F1,VK_F1
  68 0fac 0681     	   .byte SC_F2,VK_F2
  69 0fae 0482     	   .byte SC_F3,VK_F3
  70 0fb0 0C83     	   .byte SC_F4,VK_F4
  71 0fb2 0384     	   .byte SC_F5,VK_F5
  72 0fb4 0B85     	   .byte SC_F6,VK_F6
  73 0fb6 8386     	   .byte SC_F7,VK_F7
  74 0fb8 0A87     	   .byte SC_F8,VK_F8
  75 0fba 0188     	   .byte SC_F9,VK_F9
  76 0fbc 098A     	   .byte SC_F10,VK_F10
  77 0fbe 788B     	   .byte SC_F11,VK_F11
  78 0fc0 078C     	   .byte SC_F12,VK_F12
  79 0fc2 7030     	   .byte SC_KP0,'0'
  80 0fc4 6931     	   .byte SC_KP1,'1'
  81 0fc6 7232     	   .byte SC_KP2,'2'
  82 0fc8 7A33     	   .byte SC_KP3,'3'
  83 0fca 6B34     	   .byte SC_KP4,'4'
  84 0fcc 7335     	   .byte SC_KP5,'5'
  85 0fce 7436     	   .byte SC_KP6,'6'
  86 0fd0 6C37     	   .byte SC_KP7,'7'
  87 0fd2 7538     	   .byte SC_KP8,'8'
  88 0fd4 7D39     	   .byte SC_KP9,'9'
  89 0fd6 7C2A     	   .byte SC_KPMUL,'*'
  90 0fd8 4A2F     	   .byte SC_KPDIV,'/'
  91 0fda 792B     	   .byte SC_KPPLUS,'+'
  92 0fdc 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fde 712E     	   .byte SC_KPDOT,'.'
  94 0fe0 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fe2 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fe4 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fe6 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fe8 6141     	   .byte 'a','A'
 102 0fea 6242     	   .byte 'b','B'
ARM GAS  forth.s 			page 52


 103 0fec 6343     	   .byte 'c','C'
 104 0fee 6444     	   .byte 'd','D'
 105 0ff0 6545     	   .byte 'e','E'
 106 0ff2 6646     	   .byte 'f','F'
 107 0ff4 6747     	   .byte 'g','G'
 108 0ff6 6848     	   .byte 'h','H'
 109 0ff8 6949     	   .byte 'i','I'
 110 0ffa 6A4A     	   .byte 'j','J'
 111 0ffc 6B4B     	   .byte 'k','K'
 112 0ffe 6C4C     	   .byte 'l','L'
 113 1000 6D4D     	   .byte 'm','M'
 114 1002 6E4E     	   .byte 'n','N'
 115 1004 6F4F     	   .byte 'o','O'
 116 1006 7050     	   .byte 'p','P'
 117 1008 7151     	   .byte 'q','Q'
 118 100a 7252     	   .byte 'r','R'
 119 100c 7353     	   .byte 's','S'
 120 100e 7454     	   .byte 't','T'
 121 1010 7555     	   .byte 'u','U'
 122 1012 7656     	   .byte 'v','V'
 123 1014 7757     	   .byte 'w','W'
 124 1016 7858     	   .byte 'x','X'
 125 1018 7959     	   .byte 'y','Y'
 126 101a 7A5A     	   .byte 'z','Z'
 127 101c 3121     	   .byte '1','!'
 128 101e 3240     	   .byte '2','@'
 129 1020 3323     	   .byte '3','#'
 130 1022 3424     	   .byte '4','$'
 131 1024 3525     	   .byte '5','%'
 132 1026 365E     	   .byte '6','^'
 133 1028 3726     	   .byte '7','&'
 134 102a 382A     	   .byte '8','*'
 135 102c 3928     	   .byte '9','('
 136 102e 3029     	   .byte '0',')'
 137 1030 2D5F     	   .byte '-','_'
 138 1032 3D2B     	   .byte '=','+'
 139 1034 607E     	   .byte '`','~'
 140 1036 2722     	   .byte '\'','"'
 141 1038 2C3C     	   .byte ',','<'
 142 103a 2E3E     	   .byte '.','>'
 143 103c 2F3F     	   .byte '/','?'
 144 103e 5C7C     	   .byte '\\','|'
 145 1040 3B3A     	   .byte ';',':'
 146 1042 5B7B     	   .byte '[','{'
 147 1044 5D7D     	   .byte ']','}'
 148 1046 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1048 315C     	   .byte '1','\\'
 153 104a 3240     	   .byte '2','@'
 154 104c 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 104e 363F     	   .byte '6','?'
 158 1050 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
ARM GAS  forth.s 			page 53


 160 1052 397B     	   .byte '9','{'
 161 1054 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 1056 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 1058 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 105a 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 105c 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 105e 11A3     	    .byte SC_RALT,VK_RALT
 172 1060 2F97     	    .byte SC_APPS,VK_APPS
 173 1062 758D     	    .byte SC_UP,VK_UP
 174 1064 728E     	    .byte SC_DOWN,VK_DOWN
 175 1066 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 1068 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 106a 7095     	    .byte SC_INSERT,VK_INSERT
 178 106c 6C91     	    .byte SC_HOME,VK_HOME
 179 106e 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1070 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1072 717F     	    .byte SC_DEL,VK_DELETE
 182 1074 6992     	    .byte SC_END,VK_END
 183 1076 4A2F     	    .byte SC_KPDIV,'/'
 184 1078 5A0D     	    .byte SC_KPENTER,'\r'
 185 107a 1200     	    .byte 0x12,0
 186 107c 7C00     	    .byte 0x7c,0
 187 107e 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1080 6303     	   .byte 'c', VK_CTRL_C 
 193 1082 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1084 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1086 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1088 11A3     	   .byte SC_RALT,VK_RALT
 197 108a 2F97     	   .byte SC_APPS,VK_APPS
 198 108c 7095     	   .byte SC_INSERT,VK_INSERT
 199 108e 6C91     	   .byte SC_HOME,VK_HOME
 200 1090 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1092 717F     	   .byte SC_DEL,VK_DELETE
 202 1094 6992     	   .byte SC_END,VK_END
 203 1096 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1098 758D     	   .byte SC_UP,VK_UP
 205 109a 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 109c 728E     	   .byte SC_DOWN,VK_DOWN
 207 109e 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 10a0 4A2F     	   .byte SC_KPDIV,'/'
 209 10a2 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 10a4 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 10a6 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 10a8 119E     	   .byte SC_LALT,VK_LALT
 213 10aa 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 10ac 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 10ae 761B     	   .byte SC_ESC,VK_ESC
 216 10b0 779A     	   .byte SC_NUM,VK_NLOCK
ARM GAS  forth.s 			page 54


 217 10b2 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10b4 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 10b6 00BF     	    _GBL_FUNC kbd_isr 
  79 10b8 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 10c0 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 10c4 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 10c6 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 10ce D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 10d2 10F0020F 	    tst r0,#KBD_TX 
  85 10d6 40F08480 	    bne send_bit  
  86 10da 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 10dc 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 10e0 01F10102 	    add r2,r1,#1
ARM GAS  forth.s 			page 55


  89 10e4 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 10e8 0029     	    cmp r1,#0
  91 10ea 15D0     	    beq start_bit 
  92 10ec 0929     	    cmp r1,#9 
  93 10ee 25D0     	    beq parity_bit 
  94 10f0 0A29     	    cmp r1,#10 
  95 10f2 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 10f4 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 10f8 4FEA5202 	    lsr r2,#1 
  99 10fc 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1100 07D0     	    beq 1f 
 101 1102 42F08002 	    orr r2,#(1<<7)
 102 1106 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 110a 00F10100 	    add r0,#1 
 104 110e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 1112 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1116 63E0     	    b 9f         
 107              	start_bit:
 108 1118 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 111c 60D1     	    bne 9f // not a start bit 
 110 111e 80EA0000 	    eor r0,r0 
 111 1122 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 1126 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 112a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 112e 6FF00101 	    mvn r1,#1
 115 1132 00EA0100 	    and r0,r1 // clear error flag 
 116 1136 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 113a 51E0     	    b 9f 
 118              	parity_bit:
 119 113c 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1140 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1144 4CD0     	    beq 9f  
 122 1146 01F10101 	    add r1,#1 
 123 114a 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 114e 47E0     	    b 9f      
 125              	stop_bit:
 126 1150 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1154 40D0     	    beq 8f // error stop bit expected 
 128 1156 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 115a 11F0010F 	    tst r1,#1 
 130 115e 3BD0     	    beq 8f // error parity
 131 1160 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 1164 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 1168 E028     	    cmp r0,#XT_KEY
 134 116a 04D1     	    bne 1f
 135 116c 41F04001 	    orr r1,#KBD_F_XT
 136 1170 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1174 30E0     	    b 8f  
 138 1176 11F0800F 	1:  tst r1,#KBD_F_REL
 139 117a 14D0     	    beq store_code
 140 117c 5828     	    cmp r0,#SC_CAPS
 141 117e 04D1     	    bne 1f
 142 1180 81F00401 	    eor r1,#KBD_F_CAPS
 143 1184 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1188 06E0     	    b 2f 
 145 118a 00B500F0 	1:  _CALL do_async_key 
ARM GAS  forth.s 			page 56


 145      73F85DF8 
 145      04EB
 146 1194 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1198 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 119c 01EA0201 	    and r1,r2
 149 11a0 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 11a4 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 11a6 F028     	    cmp r0,#KEY_REL
 154 11a8 04D1     	    bne 1f
 155              	// set release flags 
 156 11aa 41F08001 	    orr r1,#KBD_F_REL 
 157 11ae 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 11b2 11E0     	    b 8f     
 159 11b4 0146     	1:  mov r1,r0 
 160 11b6 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 11c0 0AD1     	    bne 8f // was async key 
 162 11c2 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 11c6 04F17802 	    add r2,UP,#KBD_QUEUE
 164 11ca 1154     	    strb r1,[r2,r0]
 165 11cc 00F10100 	    add r0,#1
 166 11d0 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 11d4 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 11d8 80EA0000 	8:  eor r0,r0 
 169 11dc A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 11e0 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 11e2 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 11e6 01F10100 	    add r0,r1,#1
 182 11ea 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 11ee 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 11f2 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 11f6 0829     	1:  cmp r1,#8 
 187 11f8 15D0     	    beq send_parity 
 188 11fa 0929     	    cmp r1,#9 
 189 11fc 1CD0     	    beq send_stop
 190 11fe 0A29     	    cmp r1,#10
 191 1200 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 1202 10F0010F 	    tst r0,#1
 194 1206 4FEA5000 	    lsr r0,#1
 195 120a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 120e 02D1     	    bne 1f 
 197 1210 4FEA0242 	    lsl r2,#16
 198 1214 05E0     	    b 2f  
ARM GAS  forth.s 			page 57


 199 1216 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 121a 00F10100 	    add r0,#1 
 201 121e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 1222 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1224 1CE0     	    b 9f 
 204              	send_parity:
 205 1226 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 122a 10F0010F 	    tst r0,#1
 207 122e 01D0     	    beq 1f 
 208 1230 4FEA0242 	    lsl r2,#16
 209 1234 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1236 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1238 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 123a 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 123e 1960     	    str r1,[r3,#GPIO_MODER]
 217 1240 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 1242 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1246 6FF00201 	    mvn r1,#KBD_TX 
 221 124a 00EA0100 	    and r0,r1 
 222 124e 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 1250 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1254 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 1258 80EA0000 	    eor r0,r0 
 226 125c 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1260 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 1262 02B4     	    push {r1}
 238 1264 DFF86414 	    ldr r1,=async_keys
 239 1268 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 1272 02BC     	    pop {r1}
 241 1274 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
ARM GAS  forth.s 			page 58


 254 1276 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1280 FF28     	    cmp r0,#255
 256 1282 01D1     	    bne set_async_key 
 257 1284 0020     	    movs r0,#0 
 258 1286 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1288 06B4     	    push {r1,r2}
 262 128a 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 128e DFF84014 	    ldr r1,=async_jump 
 264 1292 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1296 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 129a 04E0     	    b set_reset
 268              	ctrl_key:
 269 129c 4FF01000 	    mov r0,#KBD_F_CTRL
 270 12a0 01E0     	    b set_reset 
 271              	alt_key:
 272 12a2 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 12a6 12F0800F 	    tst r2,#KBD_F_REL 
 275 12aa 04D0     	    beq 1f 
 276 12ac 6FEA0000 	    mvn r0,r0
 277 12b0 02EA0002 	    and r2,r0
 278 12b4 01E0     	    b 2f
 279 12b6 42EA0002 	1:  orr r2,r0 
 280 12ba 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 12be 5FF0FF30 	    movs r0,#-1
 282 12c2 06BC     	9:  pop {r1,r2}
 283 12c4 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 12c6 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 12c8 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 12ca 1401     	    .byte SC_LCTRL,1  // left control 
 290 12cc 1401     	    .byte SC_RCTRL,1  // right control 
 291 12ce 1102     	    .byte SC_LALT,2  // left alt 
 292 12d0 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 12d2 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 12d4 00       	    .byte 0 // shift  key 
 297 12d5 03       	    .byte (ctrl_key-shift_key)/2
 298 12d6 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 12d7 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
ARM GAS  forth.s 			page 59


 309 12d8 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 12e0 1846     	    mov r0,r3 
 311 12e2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 12e6 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 12ea 00B5FFF7 	    _CALL gpio_config
 313      21F85DF8 
 313      04EB
 314 12f4 1846     	    mov r0,r3 
 315 12f6 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 12fa 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 12fe 00B5FFF7 	    _CALL gpio_config
 317      17F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1308 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1310 4FF40050 	    mov r0,#(2<<12)
 321 1314 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1316 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 131e 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 1322 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1324 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1326 80EA0000 	   eor r0,r0 
 328 132a C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 132e C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 1332 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1336 4FF00101 	   mov r1,#1 
 333 133a 00B5FEF7 	   _CALL nvic_set_priority
 333      B4FF5DF8 
 333      04EB
 334 1344 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1348 00B5FEF7 	   _CALL nvic_enable_irq 
 335      C6FF5DF8 
 335      04EB
 336 1352 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1354 F00E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1364 47F8046D 	    _PUSH 
 342 1368 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 136c 06F0FC06 	    and TOS,#0xFC  
 344 1370 00F096BE 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1374 0EB4     	    push {T1,T2,T3}
ARM GAS  forth.s 			page 60


 352 1376 80EA0000 	    eor T0,T0  
 353 137a 04F17803 	    add T3,UP,#KBD_QUEUE
 354 137e D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 1382 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 1386 9142     	    cmp T1,T2 
 357 1388 06D0     	    beq 2f  
 358 138a 585C     	    ldrb T0,[T3,T1]
 359 138c 01F10101 	    add T1,#1 
 360 1390 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1394 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 1398 0EBC     	2:  pop {T1,T2,T3}
 363 139a 7047     	    _RET 
 364              	
 365              	wait_code:
 366 139c 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 13a6 0000     	    movs T0,T0
 368 13a8 F8D0     	    beq wait_code  
 369 13aa 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 13ac 04B4     	    push {T2}
 380 13ae 11F8012B 	1:  ldrb T2,[T1],#1
 381 13b2 22B1     	    cbz T2,2f 
 382 13b4 8242     	    cmp T2,T0
 383 13b6 02D0     	    beq 2f 
 384 13b8 01F10101 	    add T1,#1 
 385 13bc F7E7     	    b 1b 
 386 13be 0878     	2:  ldrb T0,[T1]
 387 13c0 0000     	    movs T0,T0 // set/reset zero flag 
 388 13c2 04BC     	9:  pop {T2}
 389 13c4 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 13c6 58130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 13d4 47F8046D 	    _PUSH 
 398 13d8 86EA0606 	    eor TOS,TOS 
 399 13dc BD49     	    ldr T1,=sc_ascii // translation table
 400 13de 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 13e2 4FF04002 	    mov T2,#KBD_F_XT 
 402 13e6 1042     	    tst T0,T2
 403 13e8 00D0     	    beq 1f
ARM GAS  forth.s 			page 61


 404 13ea BB49     	    ldr T1,=extended // extended code translation
 405 13ec 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 13f6 98B1     	    cbz T0,inkey_exit
 407 13f8 E128     	    cmp T0,#XT2_KEY // pause 
 408 13fa 13D0     	    beq pause_key
 409 13fc 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1406 0646     	    mov TOS,T0
 411 1408 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1412 032E     	    cmp TOS,#VK_CTRL_C 
 413 1414 3EF45EAE 	    beq user_reboot 
 414 1418 47F8046D 	    _PUSH 
 415 141c 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1420 00F03EBE 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1424 4FF00701 	    mov T1,#7 
 420 1428 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1432 0139     	    subs T1,#1
 422 1434 F8D1     	    bne 1b 
 423 1436 00F033BE 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 143a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 143e 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1442 06D1     	    bne shift_down 
 431 1444 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1448 06D1     	    bne altchar_down 
 433 144a 10F0100F 	    tst T0,#KBD_F_CTRL
 434 144e 06D1     	    bne ctrl_down 
 435 1450 0DE0     	    b 9f 
 436              	shift_down:
 437 1452 3046     	    mov T0,TOS 
 438 1454 A149     	    ldr T1,=shifted 
 439 1456 04E0     	    b 8f 
 440              	altchar_down:
 441 1458 3046     	    mov T0,TOS 
 442 145a A149     	    ldr T1,=altchar
 443 145c 01E0     	    b 8f
 444              	ctrl_down:
 445 145e 3046     	    mov T0,TOS 
 446 1460 A049     	    ldr T1,=controls 
 447 1462 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 146c 0646     	    mov TOS,T0
 449 146e 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
ARM GAS  forth.s 			page 62


 449      04EB
 450 1478 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 147a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 147e 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1482 0BD0     	    beq 9f 
 456 1484 412E     	    cmp TOS,#'A'
 457 1486 09D4     	    bmi 9f 
 458 1488 5B2E     	    cmp TOS,#'Z'+1 
 459 148a 03D4     	    bmi 3f 
 460 148c 612E     	    cmp TOS,#'a'
 461 148e 05D4     	    bmi 9f 
 462 1490 7B2E     	    cmp TOS,#'z'+1
 463 1492 03D5     	    bpl 9f 
 464 1494 4FF02000 	3:  mov T0,#(1<<5)
 465 1498 86EA0006 	    eor TOS,T0 
 466 149c 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 149e 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 14a0 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 14a2 0128     	    cmp r0,ST_PREVID 
 484 14a4 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 14a6 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 14aa 00B5FEF7 	    _CALL nvic_disable_irq
 487      2AFF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 14b4 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 14bc 1846     	    mov r0,r3 
 491 14be 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 14c2 4FF01102 	    mov r2,#OUTPUT_OD
 493 14c6 00B5FEF7 	    _CALL gpio_config 
 493      33FF5DF8 
 493      04EB
 494 14d0 1846     	    mov r0,r3 
 495 14d2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 14d6 82EA0202 	    eor r2,r2 
 497 14da 00B5FEF7 	    _CALL gpio_out 
 497      7FFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
ARM GAS  forth.s 			page 63


 499 14e4 4FF4E150 	    mov r0,#150*48
 500 14e8 0138     	1:  subs r0,#1 
 501 14ea FDD1     	    bne 1b
 502 14ec 01BC     	    pop {r0}
 503 14ee 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 14f2 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 14f6 40F00200 	    orr r0,#KBD_TX 
 506 14fa 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 14fe 80EA0000 	    eor r0,r0 
 508 1502 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 1506 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 150a 1846     	    mov r0,r3 
 513 150c 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1510 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1514 00B5FEF7 	    _CALL gpio_config 
 515      0CFF5DF8 
 515      04EB
 516 151e 1846     	    mov r0,r3 
 517 1520 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1524 82EA0202 	    eor r2,r2 
 519 1528 00B5FEF7 	    _CALL gpio_out
 519      58FF5DF8 
 519      04EB
 520              	// release clock line 
 521 1532 1846     	    mov r0,r3 
 522 1534 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1538 4FF00002 	    mov r2,#INPUT_FLOAT
 524 153c 00B5FEF7 	    _CALL gpio_config
 524      F8FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1546 4FF00A00 	    mov r0,#10
 528 154a E060     	    str r0,[UP,#CD_TIMER]
 529 154c E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 154e 20B1     	    cbz r0, 4f 
 531 1550 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1554 10F0020F 	    tst r0,#KBD_TX
 533 1558 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 155a 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 155e 00B5FEF7 	    _CALL nvic_enable_irq
 536      BBFE5DF8 
 536      04EB
 537 1568 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 156c 20F00201 	    bic r1,r0,#KBD_TX
 539 1570 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 1574 00F00200 	    and r0,#KBD_TX
 541 1578 48B1     	    cbz r0, 5f
 542 157a 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 157c 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1580 1960     	    str r1,[r3,#GPIO_MODER]
 545 1582 80EA0000 	    eor r0,r0 
 546 1586 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 158a 6FEA0000 	    mvn r0,r0   
ARM GAS  forth.s 			page 64


 548 158e 0EBC     	5:  pop {r1,r2,r3}
 549 1590 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1592 80EA0000 	    eor T0,T0 
 555 1596 C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 159a C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 159e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 15a2 6FF00301 	    mvn T1,#3
 559 15a6 00EA0100 	    and T0,T1 
 560 15aa 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 15ae 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 15b0 CA130000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 15bc 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 15c0 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 15ca B8B9     	    cbnz T0,3f // keyboard not dectected
 571 15cc 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 15d6 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 15e0 FE28     	    cmp r0,KBD_CMD_RESEND
 574 15e2 EBD0     	    beq 1b 
 575 15e4 4FF4FA70 	    mov T0,#500 
 576 15e8 E060     	    str T0,[UP,#CD_TIMER]
 577 15ea 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 15f4 10B9     	    cbnz T0,3f
 579 15f6 E068     	    ldr T0,[UP,#CD_TIMER]
 580 15f8 0028     	    cmp T0,#0 
 581 15fa F6D1     	    bne 2b 
 582 15fc 47F8046D 	3:  _PUSH 
 583 1600 0646     	    mov TOS,T0  
 584 1602 00F04DBD 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1606 B4150000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
ARM GAS  forth.s 			page 65


 592 1614 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 161e 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1622 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 162c 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1636 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1638 ECD0     	    beq 1b
 598 163a FA28     	    cmp T0,#KBD_ACK  
 599 163c F6D1     	    bne 2b 
 600 163e 3046     	2:  mov T0,TOS 
 601 1640 00F00700 	    and T0,#7 
 602 1644 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 164e 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1658 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 165a F0D0     	    beq 2b
 606 165c FA28     	    cmp T0,#KBD_ACK 
 607 165e F6D1     	    bne 3b  
 608 1660 57F8046B 	    _POP 
 609 1664 00F01CBD 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1668 0A160000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1678 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 167c 10F0010F 	    tst T0,#1
 619 1680 01D1     	    bne 1f 
 620 1682 00F00DBD 	    _NEXT 
 621 1686 47F8046D 	1: _PUSH 
 622 168a 6FF00101 	    mvn T1,#1 
 623 168e 00EA0100 	    and T0,T1 
 624 1692 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 1696 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 169a 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 16a2 6C160000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
ARM GAS  forth.s 			page 66


 633      542D4B45 
 633      5900
 634 16b0 504700BF 	    _NEST
 635 16b4 79160000 	1:  _ADR CAPS_LED  
 636 16b8 D5130000 	    _ADR PS2_QKEY 
 637 16bc 25250000 	    _ADR QDUP 
 638 16c0 5F220000 	    _QBRAN 1b  
 638      B4160000 
 639 16c8 A7200000 	    _UNNEST 
 640 16cc C6120000 	
 640      D4120000 
 640      340F0000 
 640      58100000 
 640      E80F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16ec 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 16f4 0346     	    mov r3,r0 
  42 16f6 4FF00401 	    mov r1,#PIN_F_SC 
ARM GAS  forth.s 			page 67


  43 16fa 4FF00102 	    mov r2,#OUTPUT_PP
  44 16fe 00B5FEF7 	    _CALL gpio_config 
  44      17FE5DF8 
  44      04EB
  45 1708 1846     	    mov r0,r3 
  46 170a 4FF00401 	    mov r1,#PIN_F_SC  
  47 170e 4FF00102 	    MOV r2,#1
  48 1712 00B5FEF7 	    _CALL gpio_out 
  48      63FE5DF8 
  48      04EB
  49 171c 1846     	    mov r0,r3 
  50 171e 4FF00501 	    mov r1,#PIN_SCK  
  51 1722 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 1726 00B5FEF7 	    _CALL gpio_config 
  52      03FE5DF8 
  52      04EB
  53 1730 1846     	    mov r0,r3 
  54 1732 4FF00701 	    mov r1,#PIN_MOSI 
  55 1736 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 173a 00B5FEF7 	    _CALL gpio_config 
  56      F9FD5DF8 
  56      04EB
  57 1744 1846     	    mov r0,r3
  58 1746 4FF00601 	    mov r1,#PIN_MISO
  59 174a 4FF00202 	    mov r2,#INPUT_AFO  
  60 174e 00B5FEF7 	    _CALL gpio_config
  60      EFFD5DF8 
  60      04EB
  61              	// PA5:7 at max speed 
  62 1758 4CF6AA40 	    mov r0,#0xCCAA
  63 175c 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  64 175e 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  64      C4F20200 
  65 1766 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  66 1768 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  67 176c 4164     	    str r1,[r0,#RCC_APB2ENR]
  68 176e 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  68      C4F20100 
  69 1776 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  70 177a 0180     	    strh r1,[r0,#SPI_CR1]
  71 177c 196A     	    ldr r1,[r3,#GPIO_AFRL]
  72 177e 80EA0000 	    eor r0,r0 
  73 1782 C5F25050 	    movt r0,#0x5550 
  74 1786 40EA0100 	    orr r0,r1 
  75 178a 1862     	    str r0,[r3,#GPIO_AFRL]
  76 178c 7047     	    _RET 
  77              	
  78              	
  79              	/**********************
  80              	    CHIP-SEL ( -- )
  81              	    drive F_SC low 
  82              	*********************/
  83 178e A6160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  83      08434849 
  83      502D5345 
  83      4C00
  84 179c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
ARM GAS  forth.s 			page 68


  84      C4F20200 
  85 17a4 4FF00401 	    mov r1,#PIN_F_SC 
  86 17a8 4FF00002 	    mov r2,#0 
  87 17ac 00B5FEF7 	    _CALL gpio_out 
  87      16FE5DF8 
  87      04EB
  88 17b6 00F073BC 	    _NEXT 
  89              	
  90              	
  91              	/*********************
  92              	    CHIP-DSEL 
  93              	    drive F_SC high 
  94              	*********************/
  95 17ba 92170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  95      09434849 
  95      502D4453 
  95      454C
  96 17c8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  96      C4F20100 
  97 17d0 0189     	1:  ldrh T1,[T0,#SPI_SR]
  98 17d2 11F0800F 	    tst T1,(1<<7) // BSY 
  99 17d6 FBD1     	    bne 1b 
 100 17d8 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 100      C4F20200 
 101 17e0 4FF00401 	    mov r1,#PIN_F_SC 
 102 17e4 4FF00102 	    mov r2,#1 
 103 17e8 00B5FEF7 	    _CALL gpio_out 
 103      F8FD5DF8 
 103      04EB
 104 17f2 00F055BC 	    _NEXT 
 105              	
 106              	
 107              	/****************************
 108              	    RD-BYTE ( -- )
 109              	    read flash byte 
 110              	***************************/
 111 17f6 BE170000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 111      0752442D 
 111      42595445 
 111      00BF
 112 1804 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 112      C4F20100 
 113 180c 0189     	0:  ldrh T1,[T0,#SPI_SR]
 114 180e 11F0020F 	    tst T1,#(1<<1) //TXE
 115 1812 FBD0     	    beq 0b 
 116 1814 6FF00001 	    mvn T1,#0 
 117 1818 0173     	    strb T1,[T0,#SPI_DR]
 118 181a 0189     	1:  ldrh T1,[T0,#SPI_SR]
 119 181c 11F0010F 	    tst T1,#(1<<0) // RXNE  
 120 1820 FBD0     	    beq 1b     
 121              	2:  
 122 1822 47F8046D 	    _PUSH 
 123 1826 067B     	    ldrb TOS,[T0,#SPI_DR]
 124 1828 00F03ABC 	    _NEXT 
 125              	
 126              	
 127              	/*********************************
ARM GAS  forth.s 			page 69


 128              	    WR-BYTE  ( c -- )
 129              	    write flash byte 
 130              	*************************/
 131 182c FA170000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 131      0757522D 
 131      42595445 
 132 1838 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 132      C4F20100 
 133 1840 0189     	0:  ldrh T1,[T0,#SPI_SR]
 134 1842 11F0020F 	    tst T1,#(1<<1) //TXE
 135 1846 FBD0     	    beq 0b 
 136 1848 0673     	    strb TOS,[T0,#SPI_DR]
 137 184a 0189     	1:  ldrh T1,[T0,#SPI_SR]
 138 184c 11F0010F 	    tst T1,#(1<<0) // RXNE  
 139 1850 FBD0     	    beq 1b 
 140 1852 8189     	    ldrh T1,[T0,#SPI_DR]
 141 1854 57F8046B 	    _POP 
 142 1858 00F022BC 	    _NEXT 
 143              	
 144              	/*************************
 145              	    WR-DIS ( -- )
 146              	    write disable 
 147              	    reset WEL bit 
 148              	*************************/
 149 185c 30180000 	    _HEADER WR_DIS,6,"WR-DIS"
 149      0657522D 
 149      44495300 
 150 1868 504700BF 	    _NEST 
 151 186c 9D170000 	    _ADR CHIP_SEL 
 152 1870 1F220000 	    _DOLIT 4
 152      04000000 
 153 1878 39180000 	    _ADR WR_BYTE
 154 187c C9170000 	    _ADR CHIP_DSEL
 155 1880 A7200000 	    _UNNEST
 156              	
 157              	/*************************
 158              	    WR-ENBL ( -- )
 159              	    set WEL flag in SR0 
 160              	************************/
 161 1884 60180000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 161      0757522D 
 161      454E424C 
 162 1890 504700BF 	    _NEST 
 163 1894 9D170000 	    _ADR CHIP_SEL 
 164 1898 1F220000 	    _DOLIT 6 
 164      06000000 
 165 18a0 39180000 	    _ADR WR_BYTE 
 166 18a4 C9170000 	    _ADR CHIP_DSEL 
 167 18a8 A7200000 	    _UNNEST 
 168              	
 169              	/********************************
 170              	    RD-SR ( n -- c )
 171              	    read status register  
 172              	********************************/
 173 18ac 88180000 	    _HEADER RD_SR,5,"RD-SR"
 173      0552442D 
 173      535200BF 
ARM GAS  forth.s 			page 70


 174 18b8 504700BF 	    _NEST
 175 18bc 9D170000 	    _ADR CHIP_SEL  
 176 18c0 1F220000 	    _DOLIT sr_cmd 
 176      E0180000 
 177 18c8 15240000 	    _ADR PLUS 
 178 18cc C5220000 	    _ADR CAT
 179 18d0 39180000 	    _ADR WR_BYTE
 180 18d4 05180000 	    _ADR RD_BYTE
 181 18d8 C9170000 	    _ADR CHIP_DSEL  
 182 18dc A7200000 	    _UNNEST 
 183 18e0 053515   	sr_cmd: .byte 5,0x35,0x15      
 184              	
 185              	/*********************************
 186              	    SEND-ADR ( a -- )
 187              	    send 24 bits address 
 188              	*******************************/
 189 18e3 B0180000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 189      0853454E 
 189      442D4144 
 189      52
 190 18f0 504700BF 	    _NEST 
 191 18f4 51230000 	    _ADR DUPP 
 192 18f8 1F220000 	    _DOLIT 16
 192      10000000 
 193 1900 ED230000 	    _ADR RSHIFT 
 194 1904 39180000 	    _ADR WR_BYTE 
 195 1908 51230000 	    _ADR DUPP
 196 190c 1F220000 	    _DOLIT 8 
 196      08000000 
 197 1914 ED230000 	    _ADR RSHIFT 
 198 1918 39180000 	    _ADR WR_BYTE 
 199 191c 39180000 	    _ADR WR_BYTE 
 200 1920 A7200000 	    _UNNEST 
 201              	
 202              	/**********************************
 203              	    WAIT-DONE ( -- )
 204              	    wait write operation completed 
 205              	**********************************/
 206 1924 E7180000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 206      09574149 
 206      542D444F 
 206      4E4500BF 
 207 1934 504700BF 	    _NEST 
 208 1938 1F220000 	1:  _DOLIT 0 
 208      00000000 
 209 1940 B9180000 	    _ADR RD_SR 
 210 1944 1F220000 	    _DOLIT 3 
 210      03000000 
 211 194c 95230000 	    _ADR ANDD 
 212 1950 5F220000 	    _QBRAN 2f
 212      60190000 
 213 1958 73220000 	    _BRAN 1b
 213      38190000 
 214 1960 A7200000 	2:  _UNNEST 
 215              	
 216              	
 217              	/****************************
ARM GAS  forth.s 			page 71


 218              	   ERASE-BLK ( a -- )
 219              	   erase 4Ko block  
 220              	***************************/
 221 1964 28190000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 221      09455241 
 221      53452D42 
 221      4C4B00BF 
 222 1974 504700BF 	    _NEST 
 223 1978 91180000 	    _ADR WR_ENBL
 224 197c 9D170000 	    _ADR CHIP_SEL 
 225 1980 1F220000 	    _DOLIT 0x20 
 225      20000000 
 226 1988 39180000 	    _ADR WR_BYTE 
 227 198c F1180000 	    _ADR SEND_ADR
 228 1990 C9170000 	    _ADR CHIP_DSEL 
 229 1994 35190000 	    _ADR WAIT_DONE 
 230 1998 A7200000 	    _UNNEST 
 231              	
 232              	/******************************
 233              	    ERASE-CHIP ( -- )
 234              	    erase all data 
 235              	******************************/
 236 199c 68190000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 236      0A455241 
 236      53452D43 
 236      48495000 
 237 19ac 504700BF 	    _NEST 
 238 19b0 91180000 	    _ADR WR_ENBL 
 239 19b4 9D170000 	    _ADR CHIP_SEL
 240 19b8 1F220000 	    _DOLIT 0x60
 240      60000000 
 241 19c0 1F220000 	    _DOLIT 0xC7 
 241      C7000000 
 242 19c8 39180000 	    _ADR WR_BYTE 
 243 19cc 39180000 	    _ADR WR_BYTE 
 244 19d0 C9170000 	    _ADR CHIP_DSEL 
 245 19d4 35190000 	    _ADR WAIT_DONE
 246 19d8 A7200000 	    _UNNEST 
 247              	
 248              	
 249              	/******************************
 250              	    RD-BLK ( buff n a --  )
 251              	    read n bytes in buff 
 252              	    starting at address a  
 253              	******************************/
 254 19dc A0190000 	    _HEADER RD_BLK,6,"RD-BLK"
 254      0652442D 
 254      424C4B00 
 255 19e8 504700BF 	    _NEST
 256 19ec 9D170000 	    _ADR CHIP_SEL 
 257 19f0 1F220000 	    _DOLIT 3 
 257      03000000 
 258 19f8 39180000 	    _ADR WR_BYTE 
 259 19fc F1180000 	    _ADR SEND_ADR
 260 1a00 F9220000 	    _ADR TOR   
 261 1a04 73220000 	    _BRAN 2f
 261      1C1A0000 
ARM GAS  forth.s 			page 72


 262 1a0c 05180000 	1:  _ADR RD_BYTE
 263 1a10 75230000 	    _ADR OVER 
 264 1a14 B1220000 	    _ADR CSTOR
 265 1a18 71240000 	    _ADR ONEP 
 266 1a1c 41220000 	2:  _DONXT 1b
 266      0C1A0000 
 267 1a24 41230000 	    _ADR DROP 
 268 1a28 C9170000 	    _ADR CHIP_DSEL 
 269 1a2c A7200000 	    _UNNEST 
 270              	
 271              	/*****************************
 272              	    WR-BLK ( buff n a -- )
 273              	    write up to 256 bytes 
 274              	    in erased flash
 275              	****************************/
 276 1a30 E0190000 	    _HEADER WR_BLK,6,"WR-BLK"
 276      0657522D 
 276      424C4B00 
 277 1a3c 504700BF 	    _NEST 
 278 1a40 91180000 	    _ADR WR_ENBL
 279 1a44 9D170000 	    _ADR CHIP_SEL
 280 1a48 1F220000 	    _DOLIT 2 
 280      02000000 
 281 1a50 39180000 	    _ADR WR_BYTE 
 282 1a54 F1180000 	    _ADR SEND_ADR
 283 1a58 F9220000 	    _ADR TOR
 284 1a5c 73220000 	    _BRAN 2f 
 284      7C1A0000 
 285 1a64 51230000 	1:  _ADR DUPP 
 286 1a68 C5220000 	    _ADR CAT 
 287 1a6c 51230000 	    _ADR DUPP 
 288 1a70 A1320000 	    _ADR HDOT
 289 1a74 39180000 	    _ADR WR_BYTE 
 290 1a78 71240000 	    _ADR ONEP
 291 1a7c 41220000 	2:  _DONXT 1b 
 291      641A0000 
 292 1a84 41230000 	    _ADR DROP
 293 1a88 C9170000 	    _ADR CHIP_DSEL
 294 1a8c 35190000 	    _ADR WAIT_DONE 
 295 1a90 A7200000 	    _UNNEST
 296              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  forth.s 			page 73


  17              	
  18              	***************************************************************************/
  19              	
  20              	/*==========================================================
  21              	    THE 'FLOATING POINT ARITHMETIC' ROUTINES
  22              	==========================================================*/
  23              	
  24              	/******************************************************
  25              	    Parsing float32 to IEEE-754 format is quite Complex
  26              	    so the original Jupiter ACE Z80 code 
  27              	    is adapted to this ARM-7M architecture.
  28              	    REF: docs/Jupiter-Ace-ROM.asm 
  29              	
  30              	    based on BCD  (binary Coded Decimal)
  31              	Format:
  32              	    bit 23:0  6 BCD digits mantissa
  33              	        mantissa range 0...999999 
  34              	    bit 30:24 exponent offset by 127 for exponent (decimal value)
  35              	        exponent range:  -127...127   128 value indicate out of range 
  36              	    bit 31    mantissa sign 
  37              	
  38              	    ** Floating point words: 
  39              	    REF: docs/JA-Ace4000-Manual-First-US-Edition.pdf, chapter 15
  40              	    F+, F-, F*, F/, 
  41              	    FNEGATE, INT, UFLOAT, F. 
  42              	*******************************************************/    
  43              	
  44              	    MAX_MANTISSA = 0xffffff // biggest mantissa 
  45              	
  46              	/*****************************************************************************
  47              	    PREP_FP  
  48              	    prepare floating point
  49              	    work space 
  50              	
  51              	; ( f1, f2 -- m1, m2 )
  52              	; -> from add/mult/div
  53              	; Entered with two floating point numbers on the stack.
  54              	; The exponents are stored in the first two bytes of FP_WS and the third byte
  55              	; is loaded with the manipulated result sign.
  56              	; the two exponent locations on the Data Stack are blanked leaving just the
  57              	; binary coded mantissas.
  58              	*******************************************************************************/
  59              	PREP_FP:
  60 1a94 D4F8A000 	    ldr T0,[UP,#FP_WS] // float work space pointer 
  61              	// clear first 16 bytes of 19 bytes array 
  62 1a98 4FF00401 	    mov T1,#4 
  63 1a9c 82EA0202 	    eor T2,T2 
  64 1aa0 40F8042B 	1:  str T2,[T0],#4
  65 1aa4 0139     	    subs T1,#1
  66 1aa6 FBD1     	    bne 1b 
  67 1aa8 2262     	    str T2,[UP,#TMP] // clear tmp variable (SPARE)
  68              	
  69 1aaa 7047     	    _RET 
  70              	
  71              	/***********************
  72              	  digit_add  
  73              	 add 2 BCD digits 
ARM GAS  forth.s 			page 74


  74              	 input:
  75              	    T0  first digit
  76              	    T1  second digit 
  77              	    T2  carry 
  78              	 output:
  79              	    T0  sump
  80              	    T2  carry 
  81              	***********************/ 
  82              	    .type add_digit, %function
  83              	digit_add:
  84 1aac 1044     	    add T0,T2 
  85 1aae 0844     	    add T0,T1 
  86 1ab0 0A28     	    cmp T0,#10
  87 1ab2 01D4     	    bmi 1f 
  88 1ab4 00F10600 	    add T0,#6 
  89 1ab8 4FEA1012 	1:  lsr T2,T0,#4 
  90 1abc 00F00F00 	    and T0,#15
  91 1ac0 7047     	    _RET 
  92              	
  93              	/*********************************
  94              	    digit_sub 
  95              	    substract T0-BORROW-T1 
  96              	  input:
  97              	        T0  first digit 
  98              	        T1  second digit 
  99              	        T2  borrow 
 100              	  output:
 101              	        T0  substraction 
 102              	        T2  borrow 
 103              	*********************************/
 104              	digit_sub:
 105 1ac2 3AB1     	    cbz T2,1f
 106 1ac4 801A     	    subs T0,T2 
 107 1ac6 82EA0202 	    eor T2,T2 
 108 1aca 03D5     	    bpl 1f 
 109 1acc 00F10A00 	    add T0,#10  
 110 1ad0 4FF00102 	    mov T2,#1 
 111 1ad4 401A     	1:  subs T0,T1 
 112 1ad6 05D5     	    bpl 3f
 113 1ad8 00F10A00 	    add T0,#10
 114 1adc 00F00F00 	    and T0,#15 
 115 1ae0 4FF00102 	    mov T2,#1
 116 1ae4 7047     	3:  _RET 
 117              	
 118              	/**********************************
 119              	    digit_prod 
 120              	    multiply 2 BCD digits 
 121              	    input:
 122              	        T0 first digit 
 123              	        T1 second digit 
 124              	    output:
 125              	        T0  prod low digit 
 126              	        T1  prod high digit 
 127              	***********************************/
 128              	digit_prod:
 129 1ae6 01FB00F0 	    mul T0,T1 
 130 1aea 4FF00A01 	    mov T1,#10 
ARM GAS  forth.s 			page 75


 131 1aee B0FBF1F2 	    udiv T2,T0,T1 
 132 1af2 01FB02F1 	    mul T1,T1,T2 
 133 1af6 A0EB0100 	    sub T0,T1
 134 1afa 1146     	    mov T1,T2  
 135 1afc 7047     	    _RET 
 136              	
 137              	/****************************************
 138              	    BCD+  ( bcd1 bcd2 carry -- sum carry )
 139              	    sum=bcd1+bcd2+carry 
 140              	    bcd are 8 digits packed in 32 bits   
 141              	*****************************************/
 142 1afe 341A0000 	    _HEADER BCD_ADD,4,"BCD+"
 142      04424344 
 142      2B00
 143 1b08 83EA0303 	    eor T3,T3 // bit shift  
 144 1b0c 85EA0505 	    eor WP,WP // sum   
 145 1b10 3246     	    mov T2,TOS
 146 1b12 57F8046B 	    _POP   
 147 1b16 3868     	1:  ldr T0,[DSP]
 148 1b18 20FA03F0 	    lsr T0,T3 
 149 1b1c 00F00F00 	    and T0,#15
 150 1b20 26FA03F1 	    lsr T1,TOS,T3 
 151 1b24 01F00F01 	    and T1,#15
 152 1b28 FFF7C0FF 	    bl digit_add 
 153 1b2c 00FA03F0 	    lsl T0,T3 
 154 1b30 45EA0005 	    orr WP,T0 
 155 1b34 03F10403 	    add T3,#4 
 156 1b38 202B     	    cmp T3,#32 
 157 1b3a ECD4     	    bmi 1b 
 158 1b3c 3D60     	    str WP,[DSP]
 159 1b3e 1646     	    mov TOS,T2 
 160 1b40 AEE2     	    _NEXT 
 161              	
 162              	
 163              	/********************************************
 164              	    BCD- ( bcd1 bcd2 borrow -- diff borrow )
 165              	    diff=bcd1-borrow-bcd2 
 166              	********************************************/
 167 1b42 021B0000 	    _HEADER BCD_SUB,4,"BCD-"
 167      04424344 
 167      2D00
 168 1b4c 83EA0303 	    eor T3,T3 // bit shift 
 169 1b50 85EA0505 	    eor WP,WP
 170 1b54 3246     	    mov T2,TOS 
 171 1b56 57F8046B 	    _POP 
 172 1b5a 3868     	1:  ldr T0,[DSP]
 173 1b5c 20FA03F0 	    lsr T0,T3 
 174 1b60 00F00F00 	    and T0,#15 
 175 1b64 26FA03F1 	    lsr T1,TOS,T3
 176 1b68 01F00F01 	    and T1,#15 
 177 1b6c FFF7A9FF 	    bl digit_sub
 178 1b70 00FA03F0 	    lsl T0,T3 
 179 1b74 45EA0005 	    orr WP,T0 
 180 1b78 03F10403 	    add T3,#4 
 181 1b7c 202B     	    cmp T3,#32 
 182 1b7e ECD4     	    bmi 1b 
 183 1b80 3D60     	    str WP,[DSP]
ARM GAS  forth.s 			page 76


 184 1b82 1646     	    mov TOS,T2 
 185 1b84 8CE2     	    _NEXT 
 186              	
 187              	
 188              	/*********************************
 189              	    BCD1+ ( bcd -- bcd+1 carry )
 190              	    increment bcd integer 
 191              	*********************************/
 192 1b86 461B0000 	    _HEADER BCD_1P,5,"BCD1+"
 192      05424344 
 192      312B
 193 1b90 83EA0303 	    eor T3,T3 
 194 1b94 3546     	    mov WP,TOS 
 195 1b96 4FF00F00 	    mov T0,#15 
 196 1b9a 00FA03F1 	1:  lsl T1,T0,T3 
 197 1b9e 6FEA0101 	    mvn T1,T1 
 198 1ba2 05EA0105 	    and WP,T1 
 199 1ba6 26FA03F1 	    lsr T1,TOS,T3
 200 1baa 01F00F01 	    and T1,#15 
 201 1bae 01F10101 	    add T1,#1 
 202 1bb2 0A29     	    cmp T1,#10 
 203 1bb4 01D4     	    bmi 2f 
 204 1bb6 01F10601 	    add T1,#6 
 205 1bba 4FEA1112 	2:  lsr T2,T1,#4 
 206 1bbe 01F00F01 	    and T1,#15 
 207 1bc2 01FA03F1 	    lsl T1,T3 
 208 1bc6 45EA0105 	    orr WP,T1
 209 1bca 1AB1     	    cbz T2,3f 
 210 1bcc 03F10403 	    add T3,#4 
 211 1bd0 202B     	    cmp T3,#32 
 212 1bd2 E2D4     	    bmi 1b 
 213 1bd4 47F8045D 	3:  str WP,[DSP,#-4]! 
 214 1bd8 1646     	    mov TOS,T2 
 215 1bda 61E2     	    _NEXT     
 216              	
 217              	/*******************************
 218              	    BCD-NEG ( bcd -- - bcd carry )
 219              	    BCD ten's complement 
 220              	*******************************/
 221 1bdc 8A1B0000 	    _HEADER BCD_NEG,7,"BCD-NEG"
 221      07424344 
 221      2D4E4547 
 222 1be8 49F69915 	    _MOV32 WP,0x99999999
 222      C9F69915 
 223 1bf0 C6EB0506 	1:  rsb TOS,WP  
 224 1bf4 CCE7     	    b BCD_1P 
 225              	
 226              	
 227              	/*****************************************
 228              	    BCD* ( bcd1 bcd2 -- prod_low prod_hi )
 229              	    multiply 2 bcd numbers 
 230              	    return 16 digits products 
 231              	*****************************************/
 232 1bf6 E01B0000 	    _HEADER BCD_STAR,4,"BCD*"
 232      04424344 
 232      2A00
 233              	
ARM GAS  forth.s 			page 77


 234 1c00 4EE2     	    _NEXT 
 235              	
 236              	/**********************************
 237              	    BCD>BIN ( bcd sign -- binary )
 238              	    convert bcd number to binary 
 239              	**********************************/
 240 1c02 FA1B0000 	    _HEADER BCD_BIN,7,"BCD>BIN"
 240      07424344 
 240      3E42494E 
 240      00BF
 241 1c10 40B4     	    push {TOS}
 242 1c12 57F8046B 	    _POP 
 243 1c16 85EA0505 	    eor WP,WP 
 244 1c1a 4FF00A01 	    mov T1,#10 
 245 1c1e 4FF01C03 	    mov T3,#28 
 246 1c22 01FB05F5 	1:  mul WP,T1 
 247 1c26 26FA03F2 	    lsr T2,TOS,T3 
 248 1c2a 02F00F02 	    and T2,#15 
 249 1c2e 1544     	    add WP,T2 
 250 1c30 043B     	    subs T3,#4 
 251 1c32 F6D5     	    bpl 1b
 252 1c34 2E46     	    mov TOS,WP
 253 1c36 01BC     	    pop {T0}
 254 1c38 08B1     	    cbz T0,4f
 255 1c3a C6F10006 	    rsb TOS,#0 
 256 1c3e 2FE2     	4:  _NEXT 
 257              	
 258              	/**********************************
 259              	    BIN>BCD ( int -- bcd sign )
 260              	    convert bcd number to binary 
 261              	**********************************/
 262 1c40 061C0000 	    _HEADER BIN_BCD,7,"BIN>BCD"
 262      0742494E 
 262      3E424344 
 263 1c4c 3046     	    mov T0,TOS 
 264 1c4e 47F8046D 	    _PUSH
 265 1c52 86EA0606 	    eor TOS,TOS // sign  
 266 1c56 10F0004F 	    tst T0,#(1<<31)
 267 1c5a 03D0     	    beq 1f 
 268 1c5c 6FEA0606 	    mvn TOS,TOS // negative 
 269 1c60 C0F10000 	    rsb T0,#0 // 2's complement 
 270 1c64 4FF00A01 	1:  mov T1,#10
 271 1c68 85EA0505 	    eor WP,WP 
 272 1c6c 83EA0303 	    eor T3,T3 
 273 1c70 78B1     	2:  cbz T0,3f 
 274 1c72 B0FBF1F2 	    udiv T2,T0,T1    
 275 1c76 04B4     	    push {T2}
 276 1c78 01FB02F2 	    mul T2,T1 
 277 1c7c C2EB0002 	    rsb T2,T0 
 278 1c80 01BC     	    pop {T0}
 279 1c82 02FA03F2 	    lsl T2,T3 
 280 1c86 45EA0205 	    orr WP,T2 
 281 1c8a 03F10403 	    add T3,#4 
 282 1c8e 202B     	    cmp T3,#32 
 283 1c90 EED1     	    bne 2b 
 284 1c92 3D60     	3:  str WP,[DSP]
 285 1c94 04E2     	    _NEXT 
ARM GAS  forth.s 			page 78


 286              	
 287              	/*******************************
 288              	    F+ ( f1 f2 -- f1+f2 )
 289              	    add 2 float 
 290              	*******************************/
 291 1c96 441C0000 	    _HEADER FPLUS,2,"F+"
 291      02462B00 
 291      00BF
 292 1ca0 504700BF 	    _NEST 
 293              	
 294 1ca4 A7200000 	    _UNNEST 
 295              	
 296              	/*******************************
 297              	    F- ( f1 f2 -- f1-f2 )
 298              	    substract 2 float 
 299              	*******************************/
 300 1ca8 9A1C0000 	    _HEADER FMINUS,2,"F-"
 300      02462D00 
 301 1cb0 504700BF 	    _NEST 
 302              	
 303 1cb4 A7200000 	    _UNNEST 
 304              	
 305              	/*******************************
 306              	    F* ( f1 f2 -- f1*f2 )
 307              	    multiply 2 float 
 308              	******************************/
 309              	
 310              	/*******************************
 311              	    F/ ( f1 f2 -- f1/f2 )
 312              	    divide f1 by f2 
 313              	*******************************/
 314 1cb8 AC1C0000 	    _HEADER FSLH,2,"F/"
 314      02462F00 
 315 1cc0 504700BF 	    _NEST 
 316              	
 317 1cc4 A7200000 	    _UNNEST 
 318              	
 319              	
 320              	/********************************
 321              	    FNEGATE ( f -- -f )
 322              	    negate floating point 
 323              	********************************/
 324 1cc8 BC1C0000 	    _HEADER FNEG,7,"FNEGATE"
 324      07464E45 
 324      47415445 
 325 1cd4 504700BF 	    _NEST 
 326              	
 327 1cd8 A7200000 	    _UNNEST 
 328              	
 329              	/*******************************
 330              	    INT ( f -- n )
 331              	    convert float to integer 
 332              	*******************************/
 333 1cdc CC1C0000 	    _HEADER INT,3,"INT"
 333      03494E54 
 334 1ce4 504700BF 	    _NEST 
 335              	
ARM GAS  forth.s 			page 79


 336 1ce8 A7200000 	    _UNNEST 
 337              	
 338              	/*******************************
 339              	    UFLOAT ( n -- f )
 340              	    convert integer to float 
 341              	*******************************/
 342 1cec E01C0000 	    _HEADER UFLOAT,6,"UFLOAT"
 342      0655464C 
 342      4F415400 
 343 1cf8 504700BF 	    _NEST 
 344              	
 345 1cfc A7200000 	    _UNNEST 
 346              	
 347              	/*******************************
 348              	    F. ( f -- )
 349              	    print float
 350              	*******************************/
 351 1d00 F01C0000 	    _HEADER FDOT,2,"F."
 351      02462E00 
 352 1d08 504700BF 	    _NEST
 353              	
 354 1d0c A7200000 	    _UNNEST 
 355              	
 356              	
 357              	// accumulate digits 
 358              	// ( n a+ c -- n+ a+ c- )
 359              	ACCUM_DIGITS:
 360 1d10 504700BF 	    _NEST 
 361 1d14 F9220000 	    _ADR TOR 
 362 1d18 73220000 	    _BRAN 4f 
 362      501D0000 
 363 1d20 55270000 	1:  _ADR COUNT 
 364 1d24 1F220000 	    _DOLIT 10  // n a+ char 10 
 364      0A000000 
 365 1d2c F52E0000 	    _ADR DIGTQ
 366 1d30 5F220000 	    _QBRAN 6f
 366      701D0000 
 367 1d38 39250000 	    _ADR ROT 
 368 1d3c 1F220000 	    _DOLIT 10 
 368      0A000000 
 369 1d44 35240000 	    _ADR STAR 
 370 1d48 15240000 	    _ADR PLUS 
 371 1d4c 61230000 	    _ADR SWAP // n a+  
 372 1d50 D1220000 	4:  _ADR RFROM  
 373 1d54 51230000 	    _ADR DUPP 
 374 1d58 5F220000 	    _QBRAN 9f 
 374      8C1D0000 
 375 1d60 81240000 	    _ADR ONEM 
 376 1d64 F9220000 	    _ADR TOR
 377 1d68 73220000 	    _BRAN 1b 
 377      201D0000 
 378 1d70 41230000 	6:  _ADR DROP 
 379 1d74 81240000 	    _ADR ONEM
 380 1d78 D1220000 	    _ADR RFROM
 381 1d7c 51230000 	    _ADR DUPP  
 382 1d80 5F220000 	    _QBRAN 9f 
 382      8C1D0000 
ARM GAS  forth.s 			page 80


 383 1d88 71240000 	    _ADR ONEP      
 384 1d8c A7200000 	9:  _UNNEST 
 385              	
 386              	// parse mantissa
 387              	//  ( a c -- dcnt m a+ c- ) 
 388              	MANTISSA:
 389 1d90 504700BF 	    _NEST
 390 1d94 75230000 	    _ADR OVER 
 391 1d98 F9220000 	    _ADR TOR  
 392 1d9c 1F220000 	    _DOLIT 0 
 392      00000000 
 393 1da4 4D250000 	    _ADR NROT 
 394 1da8 111D0000 	    _ADR ACCUM_DIGITS
 395 1dac 61230000 	    _ADR SWAP  // m c- a+ 
 396 1db0 51230000 	    _ADR DUPP  
 397 1db4 D1220000 	    _ADR RFROM // m c- a+ a+ a 
 398 1db8 25240000 	    _ADR  SUBB // m c- a+ dcnt 
 399 1dbc 4D250000 	    _ADR NROT // m dcnt c- a+ 
 400 1dc0 61230000 	    _ADR SWAP // m dcnt a+ c-
 401 1dc4 F9220000 	    _ADR TOR  // m dcnt a+ R: c- 
 402 1dc8 61230000 	    _ADR SWAP // m a+ dcnt 
 403 1dcc 4D250000 	    _ADR NROT // dcnt m a+ 
 404 1dd0 D1220000 	    _ADR RFROM // dcnt m a+ c-  
 405 1dd4 A7200000 	    _UNNEST 
 406              	
 407              	//parse exponent
 408              	// ( a c -- e esign a+ c- ) 
 409              	EXPONENT:
 410 1dd8 504700BF 	    _NEST 
 411 1ddc A12F0000 	    _ADR DASHQ 
 412 1de0 F9220000 	    _ADR TOR  // a c R: esign 
 413 1de4 1F220000 	    _DOLIT 0 
 413      00000000 
 414 1dec 4D250000 	    _ADR NROT 
 415 1df0 111D0000 	    _ADR ACCUM_DIGITS 
 416 1df4 D1220000 	    _ADR RFROM 
 417 1df8 4D250000 	    _ADR NROT // e esign a+ c- 
 418 1dfc A7200000 	    _UNNEST 
 419              	
 420              	// build float
 421              	//  ( dcnt m e esign msign -- float ) 
 422              	FORMAT_FLOAT:
 423 1e00 504700BF 	    _NEST 
 424 1e04 1F220000 	    _DOLIT (1<<31)
 424      00000080 
 425 1e0c 95230000 	    _ADR ANDD 
 426 1e10 61230000 	    _ADR SWAP 
 427 1e14 1F220000 	    _DOLIT (1<<30)
 427      00000040 
 428 1e1c BD230000 	    _ADR XORR  
 429 1e20 A9230000 	    _ADR ORR  // dcnt m e sign 
 430 1e24 39250000 	    _ADR ROT  // dcnt e sign m 
 431 1e28 51230000 	    _ADR DUPP 
 432 1e2c 5F220000 	    _QBRAN 2f // mantissa = 0 
 432      6C1E0000 
 433 1e34 F9220000 	    _ADR TOR // dcnt e sign R:  mantissa 
 434 1e38 4D250000 	    _ADR NROT 
ARM GAS  forth.s 			page 81


 435 1e3c 15240000 	    _ADR PLUS // sign e R: mantissa  
 436 1e40 1F220000 	    _DOLIT 64 
 436      40000000 
 437 1e48 15240000 	    _ADR PLUS 
 438 1e4c 1F220000 	    _DOLIT 24 
 438      18000000 
 439 1e54 05240000 	    _ADR LSHIFT 
 440 1e58 D1220000 	    _ADR RFROM 
 441 1e5c 811E0000 	    _ADR BOUND_MANTISSA
 442 1e60 A9230000 	    _ADR ORR 
 443 1e64 73220000 	    _BRAN 9f
 443      7C1E0000 
 444 1e6c F9220000 	2:  _ADR TOR // 
 445 1e70 61250000 	    _ADR DDROP 
 446 1e74 41230000 	    _ADR DROP 
 447 1e78 D1220000 	    _ADR RFROM 
 448 1e7c A7200000 	9:  _UNNEST 
 449              	
 450              	
 451              	// bound mantissa
 452              	//  0xfffff < m <= MAX_MANTISSA
 453              	//  ( e m1 -- e m2 )
 454              	BOUND_MANTISSA:
 455 1e80 504700BF 	    _NEST
 456 1e84 51230000 	    _ADR DUPP 
 457 1e88 1F220000 	    _DOLIT MAX_MANTISSA
 457      FFFFFF00 
 458 1e90 B5260000 	    _ADR UGREAT  
 459 1e94 5F220000 	    _QBRAN SCALE_UP
 459      CC1E0000 
 460              	// to much digits 
 461              	// scale down  
 462 1e9c 51230000 	1:  _ADR DUPP 
 463 1ea0 1F220000 	    _DOLIT MAX_MANTISSA 
 463      FFFFFF00 
 464 1ea8 B5260000 	    _ADR UGREAT 
 465 1eac 5F220000 	    _QBRAN 2f 
 465      C81E0000 
 466 1eb4 1F220000 	    _DOLIT 10 
 466      0A000000 
 467 1ebc 952A0000 	    _ADR SLASH 
 468 1ec0 73220000 	    _BRAN 1b
 468      9C1E0000 
 469 1ec8 A7200000 	2:  _UNNEST 
 470              	SCALE_UP:
 471 1ecc 51230000 	    _ADR DUPP 
 472 1ed0 1F220000 	    _DOLIT 0xff0000
 472      0000FF00 
 473 1ed8 95230000 	    _ADR ANDD 
 474 1edc 21260000 	    _ADR INVER
 475 1ee0 5F220000 	    _QBRAN 9f
 475      041F0000 
 476 1ee8 1F220000 	    _DOLIT 10 
 476      0A000000 
 477 1ef0 35240000 	    _ADR STAR 
 478 1ef4 61230000 	    _ADR SWAP 
 479 1ef8 81240000 	    _ADR ONEM
ARM GAS  forth.s 			page 82


 480 1efc 73220000 	    _BRAN 1b 
 480      9C1E0000 
 481 1f04 A7200000 	9:  _UNNEST 
 482              	
 483              	
 484              	/*******************************
 485              	    FLOAT? ( a -- f -1 | a 0 )
 486              	    parse floating point 
 487              	*******************************/
 488 1f08 041D0000 	    _HEADER FLOATQ,6,"FLOAT?"
 488      06464C4F 
 488      41543F00 
 489 1f14 504700BF 	    _NEST
 490 1f18 ED270000 	    _ADR BASE 
 491 1f1c A5220000 	    _ADR AT 
 492 1f20 F9220000 	    _ADR TOR
 493 1f24 D12E0000 	    _ADR DECIM 
 494 1f28 1F220000 	    _DOLIT 0
 494      00000000 
 495 1f30 75230000 	    _ADR OVER   // a 0 a  
 496 1f34 55270000 	    _ADR COUNT  // a 0 a+ c 
 497 1f38 A12F0000 	    _ADR DASHQ  // negative sign? 
 498 1f3c F9220000 	    _ADR TOR   // a 0 a+ c- R: base msign   
 499 1f40 911D0000 	    _ADR MANTISSA // a 0 dcnt m a+ c- 
 500 1f44 75230000 	    _ADR OVER 
 501 1f48 C5220000 	    _ADR CAT
 502 1f4c 51230000 	    _ADR DUPP  
 503 1f50 1F220000 	    _DOLIT '.' 
 503      2E000000 
 504 1f58 BD230000 	    _ADR XORR 
 505 1f5c 5F220000 	    _QBRAN 1f 
 505      901F0000 
 506 1f64 1F220000 	    _DOLIT 'E' 
 506      45000000 
 507 1f6c BD230000 	    _ADR XORR 
 508 1f70 5F220000 	    _QBRAN 2f
 508      E41F0000 
 509              	// format error 
 510 1f78 5B250000 	0:  _ADR _DDROP // -- a 0 dcnt m 
 511 1f7c 5B250000 	    _ADR _DDROP // -- a 0
 512 1f80 D1220000 	    _ADR RFROM 
 513 1f84 41230000 	    _ADR DROP 
 514 1f88 73220000 	    _BRAN 9f  
 514      5C200000 
 515 1f90 41230000 	1:  _ADR DROP
 516 1f94 81240000 	    _ADR ONEM
 517 1f98 61230000 	    _ADR SWAP 
 518 1f9c 71240000 	    _ADR ONEP 
 519 1fa0 61230000 	    _ADR SWAP
 520 1fa4 A1430000 	_ADR TRACE 
 521 1fa8 111D0000 	    _ADR ACCUM_DIGITS // a 0 dcnt m a+ c-
 522 1fac A1430000 	_ADR TRACE 
 523 1fb0 75230000 	    _ADR OVER 
 524 1fb4 C5220000 	    _ADR CAT 
 525 1fb8 51230000 	    _ADR DUPP 
 526 1fbc 1F220000 	    _DOLIT '.' 
 526      2E000000 
ARM GAS  forth.s 			page 83


 527 1fc4 6D260000 	    _ADR EQUAL 
 528 1fc8 5F220000 	    _QBRAN 2f
 528      E41F0000 
 529 1fd0 41230000 	    _ADR DROP 
 530 1fd4 1F220000 	    _DOLIT 0 
 530      00000000 
 531 1fdc 73220000 	    _BRAN 3f 
 531      34200000 
 532 1fe4 1F220000 	2:  _DOLIT 'E'
 532      45000000 
 533 1fec BD230000 	    _ADR XORR 
 534 1ff0 5F220000 	    _QBRAN 2f
 534      1C200000 
 535 1ff8 51230000 	    _ADR DUPP 
 536 1ffc 59260000 	    _ADR ZEQUAL 
 537 2000 5F220000 	    _QBRAN 0b 
 537      781F0000 
 538 2008 1F220000 	    _DOLIT 0
 538      00000000 
 539 2010 39250000 	    _ADR ROT 
 540 2014 73220000 	    _BRAN 3f  
 540      34200000 
 541 201c D91D0000 	2:  _ADR EXPONENT // a 0 dcnt m e esign a+ c- 
 542 2020 5F220000 	    _QBRAN 3f   // if not char left ok 
 542      34200000 
 543 2028 61250000 	    _ADR DDROP 
 544 202c 73220000 	    _BRAN 0b
 544      781F0000 
 545 2034 A1430000 	3: _ADR TRACE   
 546 2038 41230000 	    _ADR DROP // a 0 dcnt m e esign 
 547 203c D1220000 	    _ADR RFROM // a 0 dcnt m e esign msign 
 548 2040 A1430000 	_ADR TRACE 
 549 2044 011E0000 	    _ADR FORMAT_FLOAT
 550 2048 A1430000 	_ADR TRACE 
 551 204c 4D250000 	    _ADR NROT 
 552 2050 61250000 	    _ADR DDROP 
 553 2054 1F220000 	    _DOLIT -2 
 553      FEFFFFFF 
 554 205c D1220000 	9:  _ADR RFROM 
 555 2060 ED270000 	    _ADR BASE 
 556 2064 91220000 	    _ADR STORE     
 557 2068 A7200000 	    _UNNEST    
 558              	
 559              	/********************************
 560              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 561              	    parse number, integer or float 
 562              	    if not a number return ( a 0 ) 
 563              	    if integer return ( int -1 ) 
 564              	    if float return ( float -2 )
 565              	**********************************/
 566 206c 0C1F0000 	    _HEADER NUMBER,6,"NUMBER"
 566      064E554D 
 566      42455200 
 567 2078 504700BF 	    _NEST 
 568 207c D12F0000 	    _ADR INTQ
 569 2080 25250000 	    _ADR QDUP 
 570 2084 5F220000 	    _QBRAN 2f 
ARM GAS  forth.s 			page 84


 570      90200000 
 571 208c A7200000 	    _UNNEST 
 572 2090 151F0000 	2:  _ADR FLOATQ
 573 2094 A7200000 	    _UNNEST 
 574              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
ARM GAS  forth.s 			page 85


  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2098 48F804CD 		STMFD	RSP!,{IP}
  85 209c 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 20a0 5CF8045B 		LDR WP,[IP],#4 
  89 20a4 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 20a6 58F804CB 		LDMFD RSP!,{IP}
  92 20aa 5CF8045B 		LDR WP,[IP],#4 
  93 20ae 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 20b0 04F14401 		add T1,UP,#USER_CTOP 
 105 20b4 0968     		ldr T1,[T1]
 106 20b6 44F25072 		mov T2,#0x4700+(10<<3)
 107 20ba 21F8022B 		strh T2,[T1],#2
 108 20be 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 20c2 21F8022B 		strh T2,[T1],#2 
ARM GAS  forth.s 			page 86


 110 20c6 04F14402 		add T2,UP,#USER_CTOP 
 111 20ca 1160     		str T1,[T2]
 112 20cc E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 20ce 47F8046D 		_PUSH 
 118 20d2 04F11406 		ADD TOS,UP,#STDIN 
 119 20d6 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 20d8 47F8046D 		_PUSH 
 125 20dc 04F11806 		ADD TOS,UP,#STDOUT
 126 20e0 DEE7     		_NEXT 
 127              		
 128              	/********************************************
 129              		KEY? ( -- c T | F )
 130              		check if available character 
 131              	********************************************/
 132 20e2 70200000 		_HEADER QKEY,4,"KEY?" 
 132      044B4559 
 132      3F00
 133 20ec 504700BF 		_NEST 
 134 20f0 CF200000 		_ADR TSTDIN // ' STDIN 
 135 20f4 F92B0000 		_ADR ATEXE
 136 20f8 A7200000 		_UNNEST 
 137              	
 138              	/********************************************
 139              	    KEY	 ( -- c )
 140              	 	Wait for and return an input character.
 141              	********************************************/
 142 20fc E6200000 		_HEADER KEY,3,"KEY"
 142      034B4559 
 143 2104 504700BF 		_NEST
 144              	KEY1:
 145 2108 79160000 		_ADR CAPS_LED 
 146 210c ED200000 		_ADR	QKEY 
 147 2110 5F220000 		_QBRAN	KEY1
 147      08210000 
 148 2118 A7200000 		_UNNEST
 149              	
 150              	/**********************************************
 151              		EMIT ( c -- )
 152              		transmit a character to console 
 153              	**********************************************/
 154 211c 00210000 		_HEADER EMIT,4,"EMIT"
 154      04454D49 
 154      540000BF 
 155 2128 504700BF 		_NEST 
 156 212c D9200000 		_ADR TSTDOUT 
 157 2130 F92B0000 		_ADR ATEXE 
 158 2134 A7200000 		_UNNEST 
 159              	
 160              	
ARM GAS  forth.s 			page 87


 161              	/************************************************
 162              	 GET-IP ( n - c )
 163              	 return interrupt priority of IRQn 
 164              	************************************************/
 165              	/*
 166              		_HEADER GETIP,6,"GET-IP" 
 167              		_NEST 
 168              		_ADR DUPP 
 169              		_ADR ZLESS
 170              		_QBRAN 1f 
 171              		_DOLIT 15
 172              		_ADR ANDD
 173              		_DOLIT 4
 174              		_ADR SUBB  
 175              		_DOLIT 0xE000ED18 
 176              		_BRAN 2f 
 177              	1:	_DOLIT 0xE000E400 
 178              	2:	_ADR PLUS 
 179              		_ADR CAT
 180              		_DOLIT 4 
 181              		_ADR RSHIFT 
 182              		_UNNEST 
 183              	*/
 184              	
 185              	/***********************************************
 186              	 RANDOM ( n+ -- {0..n+ - 1} )
 187              	 return pseudo random number 
 188              	 REF: https://en.wikipedia.org/wiki/Xorshift
 189              	************************************************/
 190 2138 20210000 		_HEADER RAND,6,"RANDOM"
 190      0652414E 
 190      444F4D00 
 191 2144 504700BF 		_NEST
 192 2148 45260000 		_ADR ABSS   
 193 214c 9D270000 		_ADR SEED 
 194 2150 A5220000 		_ADR AT 
 195 2154 51230000 		_ADR DUPP 
 196 2158 1F220000 		_DOLIT 13
 196      0D000000 
 197 2160 05240000 		_ADR LSHIFT 
 198 2164 BD230000 		_ADR XORR  
 199 2168 51230000 		_ADR DUPP 
 200 216c 1F220000 		_DOLIT 17 
 200      11000000 
 201 2174 ED230000 		_ADR RSHIFT 
 202 2178 BD230000 		_ADR XORR 
 203 217c 51230000 		_ADR DUPP
 204 2180 1F220000 		_DOLIT 5 
 204      05000000 
 205 2188 05240000 		_ADR LSHIFT 
 206 218c BD230000 		_ADR XORR  
 207 2190 51230000 		_ADR DUPP 
 208 2194 9D270000 		_ADR SEED 
 209 2198 91220000 		_ADR STORE 
 210 219c 1F220000 		_DOLIT 0x7FFFFFFF
 210      FFFFFF7F 
 211 21a4 95230000 		_ADR ANDD 
ARM GAS  forth.s 			page 88


 212 21a8 61230000 		_ADR SWAP 
 213 21ac 7D2A0000 		_ADR MODD 
 214 21b0 A7200000 		_UNNEST 
 215              	
 216              	
 217              	/****************************************
 218              	 PAUSE ( u -- ) 
 219              	 suspend execution for u milliseconds
 220              	****************************************/
 221 21b4 3C210000 		_HEADER PAUSE,5,"PAUSE"
 221      05504155 
 221      534500BF 
 222 21c0 504700BF 		_NEST 
 223 21c4 C5270000 		_ADR TIMER 
 224 21c8 91220000 		_ADR STORE 
 225              	PAUSE_LOOP:
 226 21cc C5270000 		_ADR TIMER 
 227 21d0 A5220000 		_ADR AT 
 228 21d4 5F220000 		_QBRAN PAUSE_EXIT 
 228      E4210000 
 229 21dc 73220000 		_BRAN PAUSE_LOOP 
 229      CC210000 
 230              	PAUSE_EXIT: 		
 231 21e4 A7200000 		_UNNEST 
 232              	
 233              	/******************************************
 234              	  ULED ( T|F -- )
 235              	  control user LED, -1 ON, 0 OFF 
 236              	*******************************************/
 237 21e8 B8210000 		_HEADER ULED,4,"ULED"
 237      04554C45 
 237      440000BF 
 238 21f4 4FF40050 		mov T0,#(1<<LED_PIN)
 239 21f8 4FF40061 		_MOV32 T1,LED_GPIO 
 239      C4F20201 
 240 2200 3600     		movs TOS,TOS 
 241 2202 57F8046B 		_POP
 242 2206 03D0     		beq ULED_OFF
 243 2208 4FEA0040 		lsl T0,#16 
 244 220c 8861     		str T0,[T1,#GPIO_BSRR]
 245 220e 47E7     		_NEXT 
 246              	ULED_OFF:
 247 2210 8861     		str T0,[T1,#GPIO_BSRR]
 248 2212 45E7     		_NEXT    
 249              	
 250              	
 251              		
 252              	/***************
 253              	//  The kernel
 254              	***************/
 255              	
 256              	/********************
 257              	    NOP	( -- )
 258              	 	do nothing.
 259              	*********************/
 260 2214 EC210000 		_HEADER NOP,3,"NOP"
 260      034E4F50 
ARM GAS  forth.s 			page 89


 261 221c 40E7     		_NEXT 
 262              	 
 263              	/********************
 264              	    doLIT	( -- w )
 265              	 	Push an inline literal.
 266              	hidden word used by compiler 
 267              	*********************/
 268              	DOLIT:
 269 221e 47F8046D 		_PUSH				//  store TOS on data stack
 270 2222 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 271 2226 3BE7     		_NEXT 
 272              	
 273              	/*******************************
 274              	    EXECUTE	( ca -- )
 275              	 	Execute the word at ca.
 276              	*******************************/
 277 2228 18220000 		_HEADER EXECU,7,"EXECUTE"
 277      07455845 
 277      43555445 
 278 2234 46F00105 		ORR	WP,TOS,#1 
 279 2238 57F8046B 		_POP
 280 223c 2847     		BX WP 
 281 223e 2FE7     		_NEXT 
 282              	
 283              	/**********************************************************
 284              	    donext	( -- ) counter on R:
 285              	 	Run time code for the single index loop.
 286              	 	: next ( -- ) \ hilevel model
 287              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 288              	hidden word used by compiler 	  
 289              	*********************************************************/
 290              	DONXT:
 291 2240 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 292 2244 22B9     		CBNZ T2,NEXT1 
 293              		/* loop done */
 294 2246 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 295 224a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 296 224e 27E7     		_NEXT
 297              	NEXT1:
 298              		/* decrement loop counter */
 299 2250 A2F10102 		SUB	T2,T2,#1
 300 2254 C8F80020 		STR	T2,[RSP]
 301 2258 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 302 225c 20E7     		_NEXT 
 303              	
 304              	/**************************************
 305              	    ?branch	( f -- )
 306              	 	Branch if flag is zero.
 307              	hiddend word used by compiler
 308              	**************************************/
 309              	QBRAN:
 310 225e 3600     		MOVS	TOS,TOS
 311 2260 57F8046B 		_POP
 312 2264 02D1     		BNE	QBRAN1
 313 2266 DCF800C0 		LDR	IP,[IP]
 314 226a 19E7     		_NEXT
 315              	QBRAN1:
ARM GAS  forth.s 			page 90


 316 226c 0CF1040C 	 	ADD	IP,IP,#4
 317 2270 16E7     		_NEXT
 318              	
 319              	/***********************************
 320              	    branch	( -- )
 321              	 	Branch to an inline address.
 322              	hidden word used by compiler 
 323              	***********************************/
 324              	BRAN:
 325 2272 DCF800C0 		LDR	IP,[IP]
 326 2276 13E7     		_NEXT
 327              	
 328              	/******************************************
 329              	    EXIT	(  -- )
 330              	 	Exit the currently executing command.
 331              	******************************************/
 332 2278 2C220000 		_HEADER EXIT,4,"EXIT"
 332      04455849 
 332      540000BF 
 333 2284 A7200000 		_UNNEST
 334              	
 335              	/***********************************
 336              	    !	   ( w a -- )
 337              	 	Pop the data stack to memory.
 338              	************************************/
 339 2288 7C220000 		_HEADER STORE,1,"!"
 339      012100BF 
 340 2290 57F8045B 		LDR	WP,[DSP],#4
 341 2294 3560     		STR	WP,[TOS]
 342 2296 57F8046B 		_POP
 343 229a 01E7     		_NEXT 
 344              	
 345              	/********************************************
 346              	    @	   ( a -- w )
 347              	 	Push memory location to the data stack.
 348              	*********************************************/
 349 229c 8C220000 		_HEADER AT,1,"@"
 349      014000BF 
 350 22a4 3668     		LDR	TOS,[TOS]
 351 22a6 FBE6     		_NEXT 
 352              	
 353              	/*******************************************
 354              	    C!	  ( c b -- )
 355              	 	Pop the data stack to byte memory.
 356              	*******************************************/
 357 22a8 A0220000 		_HEADER CSTOR,2,"C!"
 357      02432100 
 358 22b0 57F8045B 		LDR	WP,[DSP],#4
 359 22b4 3570     		STRB WP,[TOS]
 360 22b6 57F8046B 		_POP
 361 22ba F1E6     		_NEXT
 362              	
 363              	/*********************************************
 364              	    C@	  ( b -- c )
 365              	 	Push byte memory location to the data stack.
 366              	**********************************************/
 367 22bc AC220000 		_HEADER CAT,2,"C@"
ARM GAS  forth.s 			page 91


 367      02434000 
 368 22c4 3678     		LDRB	TOS,[TOS]
 369 22c6 EBE6     		_NEXT 
 370              	
 371              	/*********************************************
 372              	    R>	  ( -- w )
 373              	 	Pop the return stack to the data stack.
 374              	**********************************************/
 375 22c8 C0220000 		_HEADER RFROM,2,"R>"
 375      02523E00 
 376 22d0 47F8046D 		_PUSH
 377 22d4 58F8046B 		LDR	TOS,[RSP],#4
 378 22d8 E2E6     		_NEXT 
 379              	
 380              	/************************************************
 381              	    R@	  ( -- w )
 382              	 	Copy top of return stack to the data stack.
 383              	************************************************/
 384 22da CC220000 		_HEADER RAT,2,"R@"
 384      02524000 
 384      00BF
 385 22e4 47F8046D 		_PUSH
 386 22e8 D8F80060 		LDR	TOS,[RSP]
 387 22ec D8E6     		_NEXT 
 388              	
 389              	/***********************************************
 390              	    >R	  ( w -- )
 391              	 	Push the data stack to the return stack.
 392              	************************************************/
 393 22ee DE220000 		_HEADER TOR,2,">R"
 393      023E5200 
 393      00BF
 394 22f8 48F8046D 		STR	TOS,[RSP,#-4]!
 395 22fc 57F8046B 		_POP
 396 2300 CEE6     		_NEXT
 397              	
 398              	/*******************************
 399              	//	RP! ( u -- )
 400              	// initialize RPP with u 
 401              	*******************************/
 402 2302 F2220000 		_HEADER RPSTOR,3,"RP!"
 402      03525021 
 402      00BF
 403 230c B046     		MOV RSP,TOS 
 404 230e 57F8046B 		_POP  
 405 2312 C5E6     		_NEXT 
 406              	
 407              	/********************************
 408              		SP! ( u -- )
 409              	 initialize SPP with u 
 410              	********************************/
 411 2314 06230000 		_HEADER SPSTOR,3,"SP!"
 411      03535021 
 412 231c 3746     		MOV DSP,TOS 
 413 231e 86EA0606 		EOR TOS,TOS,TOS 
 414 2322 BDE6     		_NEXT 
 415              	
ARM GAS  forth.s 			page 92


 416              	/**************************************
 417              	    SP@	 ( -- a )
 418              	 	Push the current data stack pointer.
 419              	***************************************/
 420 2324 18230000 		_HEADER SPAT,3,"SP@"
 420      03535040 
 421 232c 47F8046D 		_PUSH
 422 2330 3E46     		MOV	TOS,DSP
 423 2332 B5E6     		_NEXT
 424              	
 425              	/********************************
 426              	    DROP	( w -- )
 427              	 	Discard top stack item.
 428              	********************************/
 429 2334 28230000 		_HEADER DROP,4,"DROP"
 429      0444524F 
 429      500000BF 
 430 2340 57F8046B 		_POP
 431 2344 ACE6     		_NEXT 
 432              	
 433              	/*********************************
 434              	    DUP	 ( w -- w w )
 435              	 	Duplicate the top stack item.
 436              	*********************************/
 437 2346 38230000 		_HEADER DUPP,3,"DUP"
 437      03445550 
 437      00BF
 438 2350 47F8046D 		_PUSH
 439 2354 A4E6     		_NEXT 
 440              	
 441              	/**********************************
 442              	    SWAP	( w1 w2 -- w2 w1 )
 443              	 	Exchange top two stack items.
 444              	**********************************/
 445 2356 4A230000 		_HEADER SWAP,4,"SWAP"
 445      04535741 
 445      5000
 446 2360 3D68     		LDR	WP,[DSP]
 447 2362 3E60     		STR	TOS,[DSP]
 448 2364 2E46     		MOV	TOS,WP
 449 2366 9BE6     		_NEXT 
 450              	
 451              	/***********************************
 452              	    OVER	( w1 w2 -- w1 w2 w1 )
 453              	 	Copy second stack item to top.
 454              	***********************************/
 455 2368 5A230000 		_HEADER OVER,4,"OVER"
 455      044F5645 
 455      520000BF 
 456 2374 47F8046D 		_PUSH
 457 2378 7E68     		LDR	TOS,[DSP,#4]
 458 237a 91E6     		_NEXT 
 459              	
 460              	/***********************************
 461              	    0<	  ( n -- t )
 462              	 	Return true if n is negative.
 463              	***********************************/
ARM GAS  forth.s 			page 93


 464 237c 6C230000 		_HEADER ZLESS,2,"0<"
 464      02303C00 
 465 2384 4FEAE676 		ASR TOS,#31
 466 2388 8AE6     		_NEXT 
 467              	
 468              	/********************************
 469              	    AND	 ( w w -- w )
 470              	 	Bitwise AND.
 471              	********************************/
 472 238a 80230000 		_HEADER ANDD,3,"AND"
 472      03414E44 
 472      00BF
 473 2394 57F8045B 		LDR	WP,[DSP],#4
 474 2398 06EA0506 		AND	TOS,TOS,WP
 475 239c 80E6     		_NEXT 
 476              	
 477              	/******************************
 478              	    OR	  ( w w -- w )
 479              	 	Bitwise inclusive OR.
 480              	******************************/
 481 239e 8E230000 		_HEADER ORR,2,"OR"
 481      024F5200 
 481      00BF
 482 23a8 57F8045B 		LDR	WP,[DSP],#4
 483 23ac 46EA0506 		ORR	TOS,TOS,WP
 484 23b0 76E6     		_NEXT 
 485              	
 486              	/*****************************
 487              	    XOR	 ( w w -- w )
 488              	 	Bitwise exclusive OR.
 489              	*****************************/
 490 23b2 A2230000 		_HEADER XORR,3,"XOR"
 490      03584F52 
 490      00BF
 491 23bc 57F8045B 		LDR	WP,[DSP],#4
 492 23c0 86EA0506 		EOR	TOS,TOS,WP
 493 23c4 6CE6     		_NEXT 
 494              	
 495              	/**************************************************
 496              	    UM+	 ( w w -- w cy )
 497              	 	Add two numbers, return the sum and carry flag.
 498              	***************************************************/
 499 23c6 B6230000 		_HEADER UPLUS,3,"UM+"
 499      03554D2B 
 499      00BF
 500 23d0 3D68     		LDR	WP,[DSP]
 501 23d2 AD19     		ADDS	WP,WP,TOS
 502 23d4 4FF00006 		MOV	TOS,#0
 503 23d8 46F10006 		ADC	TOS,TOS,#0
 504 23dc 3D60     		STR	WP,[DSP]
 505 23de 5FE6     		_NEXT 
 506              	
 507              	/*********************************
 508              	    RSHIFT	 ( w # -- w )
 509              	 	arithmetic Right shift # bits.
 510              	**********************************/
 511 23e0 CA230000 		_HEADER RSHIFT,6,"RSHIFT"
ARM GAS  forth.s 			page 94


 511      06525348 
 511      49465400 
 512 23ec 57F8045B 		LDR	WP,[DSP],#4
 513 23f0 45FA06F6 		MOV	TOS,WP,ASR TOS
 514 23f4 54E6     		_NEXT 
 515              	
 516              	/****************************
 517              	    LSHIFT	 ( w # -- w )
 518              	 	Right shift # bits.
 519              	****************************/
 520 23f6 E4230000 		_HEADER LSHIFT,6,"LSHIFT"
 520      064C5348 
 520      49465400 
 520      00BF
 521 2404 57F8045B 		LDR	WP,[DSP],#4
 522 2408 05FA06F6 		MOV	TOS,WP,LSL TOS
 523 240c 48E6     		_NEXT
 524              	
 525              	/*************************
 526              	    +	 ( w w -- w )
 527              	 	Add.
 528              	*************************/
 529 240e FA230000 		_HEADER PLUS,1,"+"
 529      012B
 530 2414 57F8045B 		LDR	WP,[DSP],#4
 531 2418 2E44     		ADD	TOS,TOS,WP
 532 241a 41E6     		_NEXT 
 533              	
 534              	/************************
 535              	    -	 ( w w -- w )
 536              	 	Subtract.
 537              	************************/
 538 241c 12240000 		_HEADER SUBB,1,"-"
 538      012D00BF 
 539 2424 57F8045B 		LDR	WP,[DSP],#4
 540 2428 C6EB0506 		RSB	TOS,TOS,WP
 541 242c 38E6     		_NEXT 
 542              	
 543              	/************************
 544              	    *	 ( w w -- w )
 545              	 	Multiply.
 546              	***********************/
 547 242e 20240000 		_HEADER STAR,1,"*"
 547      012A
 548 2434 57F8045B 		LDR	WP,[DSP],#4
 549 2438 05FB06F6 		MUL	TOS,WP,TOS
 550 243c 30E6     		_NEXT 
 551              	
 552              	/***************************
 553              	    UM*	 ( w w -- ud )
 554              	 	Unsigned multiply.
 555              	****************************/
 556 243e 32240000 		_HEADER UMSTA,3,"UM*"
 556      03554D2A 
 556      00BF
 557 2448 3D68     		LDR	WP,[DSP]
 558 244a A6FB0523 		UMULL	T2,T3,TOS,WP
ARM GAS  forth.s 			page 95


 559 244e 3A60     		STR	T2,[DSP]
 560 2450 1E46     		MOV	TOS,T3
 561 2452 25E6     		_NEXT 
 562              	
 563              	/***************************
 564              	    M*	 ( w w -- d )
 565              	 	signed multiply.
 566              		hold double result
 567              	***************************/
 568 2454 42240000 		_HEADER MSTAR,2,"M*"
 568      024D2A00 
 569 245c 3D68     		LDR	WP,[DSP]
 570 245e 86FB0523 		SMULL	T2,T3,TOS,WP
 571 2462 3A60     		STR	T2,[DSP]
 572 2464 1E46     		MOV	TOS,T3
 573 2466 1BE6     		_NEXT 
 574              	
 575              	/***************************
 576              	    1+	 ( w -- w+1 )
 577              	 	Add 1.
 578              	***************************/
 579 2468 58240000 		_HEADER ONEP,2,"1+"
 579      02312B00 
 580 2470 06F10106 		ADD	TOS,TOS,#1
 581 2474 14E6     		_NEXT 
 582              	
 583              	/***************************
 584              	    1-	 ( w -- w-1 )
 585              	 	Subtract 1.
 586              	***************************/
 587 2476 6C240000 		_HEADER ONEM,2,"1-"
 587      02312D00 
 587      00BF
 588 2480 A6F10106 		SUB	TOS,TOS,#1
 589 2484 0CE6     		_NEXT 
 590              	
 591              	/***************************
 592              	    2+	 ( w -- w+2 )
 593              	 	Add 2.
 594              	**************************/
 595 2486 7A240000 		_HEADER TWOP,2,"2+"
 595      02322B00 
 595      00BF
 596 2490 06F10206 		ADD	TOS,TOS,#2
 597 2494 04E6     		_NEXT
 598              	
 599              	/**************************
 600              	    2-	 ( w -- w-2 )
 601              	 	Subtract 2.
 602              	**************************/
 603 2496 8A240000 		_HEADER TWOM,2,"2-"
 603      02322D00 
 603      00BF
 604 24a0 A6F10206 		SUB	TOS,TOS,#2
 605 24a4 FCE5     		_NEXT
 606              	
 607              	/***************************
ARM GAS  forth.s 			page 96


 608              	    CELL+	( w -- w+4 )
 609              	 	Add CELLL.
 610              	***************************/
 611 24a6 9A240000 		_HEADER CELLP,5,"CELL+"
 611      0543454C 
 611      4C2B
 612 24b0 06F10406 		ADD	TOS,TOS,#CELLL
 613 24b4 F4E5     		_NEXT
 614              	
 615              	/***************************
 616              	    CELL-	( w -- w-4 )
 617              	 	Subtract CELLL.
 618              	**************************/
 619 24b6 AA240000 		_HEADER CELLM,5,"CELL-"
 619      0543454C 
 619      4C2D
 620 24c0 A6F10406 		SUB	TOS,TOS,#CELLL
 621 24c4 ECE5     		_NEXT
 622              	
 623              	/**************************** 
 624              	    BL	( -- 32 )
 625              	 	Blank (ASCII space).
 626              	*****************************/
 627 24c6 BA240000 		_HEADER BLANK,2,"BL"
 627      02424C00 
 627      00BF
 628 24d0 47F8046D 		_PUSH
 629 24d4 4FF02006 		MOV	TOS,#32
 630 24d8 E2E5     		_NEXT 
 631              	
 632              	/**************************
 633              	    CELLS	( w -- w*4 )
 634              	 	Multiply CELLL 
 635              	***************************/
 636 24da CA240000 		_HEADER CELLS,5,"CELLS"
 636      0543454C 
 636      4C53
 637 24e4 4FEA8606 		LSL TOS,#2
 638 24e8 DAE5     		_NEXT
 639              	
 640              	/***************************
 641              	    CELL/	( w -- w/4 )
 642              	 	Divide by CELLL.
 643              	***************************/
 644 24ea DE240000 		_HEADER CELLSL,5,"CELL/"
 644      0543454C 
 644      4C2F
 645 24f4 4FEAA606 		ASR TOS,#2
 646 24f8 D2E5     		_NEXT
 647              	
 648              	/*************************
 649              	    2*	( w -- w*2 )
 650              	 	Multiply 2.
 651              	*************************/
 652 24fa EE240000 		_HEADER TWOST,2,"2*"
 652      02322A00 
 652      00BF
ARM GAS  forth.s 			page 97


 653 2504 4FEA4606 		MOV	TOS,TOS,LSL#1
 654 2508 CAE5     		_NEXT
 655              	
 656              	/*************************
 657              	    2/	( w -- w/2 )
 658              	 	Divide by 2.
 659              	***********************/
 660 250a FE240000 		_HEADER TWOSL,2,"2/"
 660      02322F00 
 660      00BF
 661 2514 4FEA6606 		MOV	TOS,TOS,ASR#1
 662 2518 C2E5     		_NEXT
 663              	
 664              	/****************************
 665              	    ?DUP	( w -- w w | 0 )
 666              	 	Conditional duplicate.
 667              	*****************************/
 668 251a 0E250000 		_HEADER QDUP,4,"?DUP"
 668      043F4455 
 668      5000
 669 2524 3500     		MOVS	WP,TOS
 670 2526 18BF     		IT NE 
 671 2528 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 672 252c B8E5     		_NEXT
 673              	
 674              	/***********************************
 675              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 676              	 	Rotate top 3 items.
 677              	*************************************/
 678 252e 1E250000 		_HEADER ROT,3,"ROT"
 678      03524F54 
 678      00BF
 679 2538 3868     		LDR	T0,[DSP]  // w2 
 680 253a 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 681 253c 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 682 253e 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 683 2540 AEE5     		_NEXT
 684              	
 685              	/*********************************
 686              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 687              	 left rotate top 3 elements 
 688              	********************************/
 689 2542 32250000 		_HEADER NROT,4,"-ROT"
 689      042D524F 
 689      5400
 690 254c 7868     		LDR T0,[DSP,#4]
 691 254e 7E60     		STR TOS,[DSP,#4]	
 692 2550 3E68     		LDR TOS,[DSP]
 693 2552 3860     		STR T0,[DSP]
 694 2554 A4E5     		_NEXT 
 695              	
 696              	/*********************************
 697              	    2DROP	( w1 w2 -- )
 698              	 	Drop top 2 items.
 699              	*********************************/
 700 2556 46250000 		_HEADER DDROP,5,"2DROP"
 700      05324452 
ARM GAS  forth.s 			page 98


 700      4F50
 701 2560 57F8046B 		_POP
 702 2564 57F8046B 		_POP
 703 2568 9AE5     		_NEXT 
 704              	
 705              	/********************************
 706              		3DROP ( w1 w2 w3 -- )
 707              		drop top 3 items 
 708              	********************************/
 709 256a 5A250000 		_HEADER TDROP,5,"3DROP"
 709      05334452 
 709      4F50
 710 2574 07F10807 	    add DSP,#8 
 711 2578 57F8046B 	    _POP 
 712 257c 90E5     	    _NEXT 
 713              	
 714              	/***********************************
 715              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 716              	 	Duplicate top 2 items.
 717              	************************************/
 718 257e 6E250000 		_HEADER DDUP,4,"2DUP"
 718      04324455 
 718      5000
 719 2588 3868     		LDR	T0,[DSP] // w1
 720 258a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 721 258e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 722 2592 85E5     		_NEXT
 723              	
 724              	/******************************
 725              	    D+	( d1 d2 -- d3 )
 726              	 	Add top 2 double numbers.
 727              	******************************/
 728 2594 82250000 		_HEADER DPLUS,2,"D+"
 728      02442B00 
 729 259c 57F8045B 		LDR	WP,[DSP],#4
 730 25a0 57F8042B 		LDR	T2,[DSP],#4
 731 25a4 3B68     		LDR	T3,[DSP]
 732 25a6 ED18     		ADDS	WP,WP,T3
 733 25a8 3D60     		STR	WP,[DSP]
 734 25aa 46EB0206 		ADC	TOS,TOS,T2
 735 25ae 77E5     		_NEXT
 736              	
 737              	/******************************
 738              		DABS ( d -- ud )
 739              		absolute value double 
 740              	*****************************/
 741 25b0 98250000 		_HEADER DABS,4,"DABS"
 741      04444142 
 741      530000BF 
 742 25bc 16F0004F 		tst TOS,#(1<<31)
 743 25c0 09D0     		beq 9f 
 744 25c2 6FEA0606 		mvn TOS,TOS 
 745 25c6 3D68     		ldr WP,[DSP]
 746 25c8 6FEA0505 		mvn WP,WP 
 747 25cc 0135     		adds WP,#1
 748 25ce 3D60     		str WP,[DSP]
 749 25d0 01D3     		bcc 9f 
ARM GAS  forth.s 			page 99


 750 25d2 06F10106 		add TOS,#1 
 751 25d6 63E5     	9:	_NEXT 
 752              	
 753              	/*****************************
 754              	  UD> ( d1 d2 -- f )
 755              	  unsigned compare double d1 > d2 
 756              	******************************/
 757 25d8 B4250000 		_HEADER UDGREAT,3,"UD>"
 757      0355443E 
 758 25e0 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 759 25e4 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 760 25e6 B042     		cmp T0,TOS 
 761 25e8 02D8     		bhi 1f
 762 25ea 04D4     		bmi 2f  
 763 25ec A942     		cmp T1,WP 
 764 25ee 02D9     		bls 2f 
 765 25f0 4FF0FF36 	1:	mov TOS,#-1 
 766 25f4 54E5     		_NEXT 
 767 25f6 4FF00006 	2:  mov TOS,#0 
 768 25fa 51E5     		_NEXT 
 769              	
 770              	/******************************
 771              		D0= ( d -- f )
 772              		double 0= 
 773              	*****************************/
 774 25fc DC250000 		_HEADER DZEQUAL,3,"D0="
 774      0344303D 
 775 2604 3046     		mov T0,TOS
 776 2606 57F8046B 		_POP 
 777 260a 46EA0006 		orr TOS,T0 
 778 260e 01D0     		beq 9f
 779 2610 6FF00006 		mvn TOS,#0 
 780 2614 44E5     	9:	_NEXT 
 781              	
 782              	/*****************************
 783              	    NOT	 ( w -- !w )
 784              	 	1"s complement.
 785              	*****************************/
 786 2616 00260000 		_HEADER INVER,3,"NOT"
 786      034E4F54 
 786      00BF
 787 2620 6FEA0606 		MVN	TOS,TOS
 788 2624 3CE5     		_NEXT
 789              	
 790              	/*****************************
 791              	    NEGATE	( w -- -w )
 792              	 	2's complement.
 793              	***************************/
 794 2626 1A260000 		_HEADER NEGAT,6,"NEGATE"
 794      064E4547 
 794      41544500 
 794      00BF
 795 2634 C6F10006 		RSB	TOS,TOS,#0
 796 2638 32E5     		_NEXT
 797              	
 798              	/***************************
 799              	    ABS	 ( w -- |w| )
ARM GAS  forth.s 			page 100


 800              	 	Absolute.
 801              	**************************/
 802 263a 2A260000 		_HEADER ABSS,3,"ABS"
 802      03414253 
 802      00BF
 803 2644 16F0004F 		TST	TOS,#0x80000000
 804 2648 18BF     		IT NE
 805 264a 7642     	    RSBNE   TOS,TOS,#0
 806 264c 28E5     		_NEXT
 807              	
 808              	/*******************
 809              	  0= ( w -- f )
 810              	 TOS==0?
 811              	*******************/
 812 264e 3E260000 		_HEADER ZEQUAL,2,"0="
 812      02303D00 
 812      00BF
 813 2658 16B9     		cbnz TOS,1f
 814 265a 4FF0FF36 		mov TOS,#-1
 815 265e 1FE5     		_NEXT 
 816 2660 86EA0606 	1:  eor TOS,TOS,TOS  
 817 2664 1CE5     		_NEXT 	
 818              	
 819              	/*********************
 820              	    =	 ( w w -- t )
 821              	 	Equal?
 822              	*********************/
 823 2666 52260000 		_HEADER EQUAL,1,"="
 823      013D
 824 266c 57F8045B 		LDR	WP,[DSP],#4
 825 2670 AE42     		CMP	TOS,WP
 826 2672 0CBF     		ITE EQ 
 827 2674 6FF00006 	    MVNEQ	TOS,#0
 828 2678 0026     		MOVNE	TOS,#0
 829 267a 11E5     		_NEXT
 830              	
 831              	/************************
 832              	    U<	 ( w w -- t )
 833              	 	Unsigned less?
 834              	*************************/
 835 267c 6A260000 		_HEADER ULESS,2,"U<"
 835      02553C00 
 836 2684 57F8045B 		LDR	WP,[DSP],#4
 837 2688 B542     		CMP	WP,TOS
 838 268a 34BF     		ITE CC 
 839 268c 6FF00006 		MVNCC	TOS,#0
 840 2690 0026     		MOVCS	TOS,#0
 841 2692 05E5     		_NEXT
 842              	
 843              	/**********************
 844              	    <	( w w -- t )
 845              	 	Less?
 846              	**********************/
 847 2694 80260000 		_HEADER LESS,1,"<"
 847      013C00BF 
 848 269c 57F8045B 		LDR	WP,[DSP],#4
 849 26a0 B542     		CMP	WP,TOS
ARM GAS  forth.s 			page 101


 850 26a2 B4BF     	    ITE LT
 851 26a4 6FF00006 		MVNLT	TOS,#0
 852 26a8 0026     		MOVGE	TOS,#0
 853 26aa F9E4     		_NEXT 
 854              	
 855              	/**********************
 856              		U> ( u u -- t|f )
 857              	    unsigned greater 
 858              	**********************/
 859 26ac 98260000 		_HEADER UGREAT,2,"U>"
 859      02553E00 
 860 26b4 57F8045B 		LDR WP,[DSP],#4 
 861 26b8 AE42     		CMP TOS,WP 
 862 26ba 34BF     		ITE CC  
 863 26bc 6FF00006 		MVNCC TOS,#0 
 864 26c0 0026     		MOVCS TOS,#0
 865 26c2 EDE4     		_NEXT 
 866              	
 867              	/***********************
 868              	    >	( w w -- t )
 869              	 	greater?
 870              	***********************/
 871 26c4 B0260000 		_HEADER GREAT,1,">"
 871      013E00BF 
 872 26cc 57F8045B 		LDR	WP,[DSP],#4
 873 26d0 B542     		CMP	WP,TOS
 874 26d2 CCBF     		ITE GT
 875 26d4 6FF00006 	    MVNGT	TOS,#0
 876 26d8 0026     		MOVLE	TOS,#0
 877 26da E1E4     		_NEXT
 878              	
 879              	/***************************
 880              	    MAX	 ( w w -- max )
 881              	 	Leave maximum.
 882              	***************************/
 883 26dc C8260000 		_HEADER MAX,3,"MAX"
 883      034D4158 
 884 26e4 57F8045B 		LDR	WP,[DSP],#4
 885 26e8 B542     		CMP	WP,TOS
 886 26ea C8BF     		IT GT 
 887 26ec 2E46     		MOVGT	TOS,WP
 888 26ee D7E4     		_NEXT 
 889              	
 890              	/**************************
 891              	    MIN	 ( w w -- min )
 892              	 	Leave minimum.
 893              	**************************/
 894 26f0 E0260000 		_HEADER MIN,3,"MIN"
 894      034D494E 
 895 26f8 57F8045B 		LDR	WP,[DSP],#4
 896 26fc B542     		CMP	WP,TOS
 897 26fe B8BF     		IT LT
 898 2700 2E46     		MOVLT	TOS,WP
 899 2702 CDE4     		_NEXT
 900              	
 901              	/***********************
 902              	    +!	 ( w a -- )
ARM GAS  forth.s 			page 102


 903              	 	Add to memory.
 904              	***********************/
 905 2704 F4260000 		_HEADER PSTOR,2,"+!"
 905      022B2100 
 906 270c 57F8045B 		LDR	WP,[DSP],#4
 907 2710 3268     		LDR	T2,[TOS]
 908 2712 2A44     		ADD	T2,T2,WP
 909 2714 3260     		STR	T2,[TOS]
 910 2716 57F8046B 		_POP
 911 271a C1E4     		_NEXT
 912              	
 913              	/************************
 914              	    2!	 ( d a -- )
 915              	 	Store double number.
 916              	*************************/
 917 271c 08270000 		_HEADER DSTOR,2,"2!"
 917      02322100 
 918 2724 57F8045B 		LDR	WP,[DSP],#4
 919 2728 57F8042B 		LDR	T2,[DSP],#4
 920 272c 46F8045B 		STR	WP,[TOS],#4
 921 2730 3260     		STR	T2,[TOS]
 922 2732 57F8046B 		_POP
 923 2736 B3E4     		_NEXT
 924              	
 925              	/************************
 926              	    2@	 ( a -- d )
 927              	 	Fetch double number.
 928              	************************/
 929 2738 20270000 		_HEADER DAT,2,"D@"
 929      02444000 
 930 2740 7568     		LDR	WP,[TOS,#4]
 931 2742 47F8045D 		STR	WP,[DSP,#-4]!
 932 2746 3668     		LDR	TOS,[TOS]
 933 2748 AAE4     		_NEXT
 934              	
 935              	/***************************
 936              	    COUNT	( b -- b+1 c )
 937              	 	Fetch length of string.
 938              	****************************/
 939 274a 3C270000 		_HEADER COUNT,5,"COUNT"
 939      05434F55 
 939      4E54
 940 2754 16F8015B 		LDRB	WP,[TOS],#1
 941 2758 47F8046D 		_PUSH
 942 275c 2E46     		MOV	TOS,WP
 943 275e 9FE4     		_NEXT
 944              	
 945              	/******************************
 946              	    DNEGATE	( d -- -d )
 947              	 	Negate double number.
 948              	**************************/
 949 2760 4E270000 		_HEADER DNEGA,7,"DNEGATE"
 949      07444E45 
 949      47415445 
 950 276c 3D68     		LDR	WP,[DSP]
 951 276e A2EB0202 		SUB	T2,T2,T2
 952 2772 551B     		SUBS WP,T2,WP
ARM GAS  forth.s 			page 103


 953 2774 62EB0606 		SBC	TOS,T2,TOS
 954 2778 3D60     		STR	WP,[DSP]
 955 277a 91E4     		_NEXT
 956              	
 957              	/******************************
 958              	  System and user variables
 959              	******************************/
 960              	
 961              	/*******************************
 962              	  doVAR	( -- a )
 963              	  Run time routine for VARIABLE and CREATE.
 964              	hidden word used by compiler
 965              	********************************/
 966              	DOVAR:
 967 277c 47F8046D 		_PUSH
 968 2780 6646     		MOV TOS,IP
 969 2782 0CF1040C 		ADD IP,IP,#4 
 970 2786 8EE4     		B UNNEST 
 971              	
 972              	/**********************************
 973              	    doCON	( -- a ) 
 974              	 	Run time routine for CONSTANT.
 975              	hidden word used by compiler 
 976              	***********************************/
 977              	DOCON:
 978 2788 47F8046D 		_PUSH
 979 278c 5CF8046B 		LDR.W TOS,[IP],#4 
 980 2790 89E4     		B UNNEST 
 981              	
 982              	/***********************
 983              	  system variables 
 984              	***********************/
 985              	
 986              	/**************************
 987              	 SEED ( -- a)
 988              	 return PRNG seed address 
 989              	**************************/
 990 2792 64270000 		_HEADER SEED,4,"SEED"
 990      04534545 
 990      4400
 991 279c 47F8046D 		_PUSH 
 992 27a0 04F10406 		ADD TOS,UP,#RNDSEED
 993 27a4 7CE4     		_NEXT 	
 994              	
 995              	/****************************************
 996              	  MSEC ( -- a)
 997              	 return address of milliseconds counter
 998              	****************************************/
 999 27a6 96270000 		_HEADER MSEC,4,"MSEC"
 999      044D5345 
 999      4300
 1000 27b0 47F8046D 	    _PUSH
 1001 27b4 04F10806 	    ADD TOS,UP,#TICKS
 1002 27b8 72E4     	    _NEXT 
 1003              	
 1004              	/*************************
 1005              	 TIMER ( -- a )
ARM GAS  forth.s 			page 104


 1006              	 count down timer 
 1007              	**********************/
 1008 27ba AA270000 		_HEADER TIMER,5,"TIMER"
 1008      0554494D 
 1008      4552
 1009 27c4 47F8046D 		 _PUSH 
 1010 27c8 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1011 27cc 68E4     	    _NEXT
 1012              	
 1013              	/*****************************
 1014              	    'BOOT	 ( -- a )
 1015              	 	boot up application vector 
 1016              	*****************************/
 1017 27ce BE270000 		_HEADER TBOOT,5,"'BOOT"
 1017      0527424F 
 1017      4F54
 1018 27d8 47F8046D 		_PUSH
 1019 27dc 04F11006 		ADD	TOS,UP,#BOOT 
 1020 27e0 5EE4     		_NEXT
 1021              		
 1022              	/********************************************	
 1023              	    BASE	( -- a )
 1024              	 	Storage of the radix base for numeric I/O.
 1025              	**********************************************/
 1026 27e2 D2270000 		_HEADER BASE,4,"BASE"
 1026      04424153 
 1026      4500
 1027 27ec 47F8046D 		_PUSH
 1028 27f0 04F11C06 		ADD	TOS,UP,#NBASE
 1029 27f4 54E4     		_NEXT
 1030              	
 1031              	/*****************************************************
 1032              	    temp	 ( -- a )
 1033              	 	A temporary storage location used in parse and find.
 1034              	hidden word for internal use
 1035              	********************************************************/
 1036              	TEMP:
 1037 27f6 47F8046D 		_PUSH
 1038 27fa 04F12006 		ADD	TOS,UP,#TMP
 1039 27fe 4FE4     		_NEXT
 1040              	
 1041              	/*******************************************
 1042              	    SPAN	( -- a )
 1043              	 	Hold character count received by EXPECT.
 1044              	********************************************/
 1045 2800 E6270000 		_HEADER SPAN,4,"SPAN"
 1045      04535041 
 1045      4E0000BF 
 1046 280c 47F8046D 		_PUSH
 1047 2810 04F12406 		ADD	TOS,UP,#CSPAN
 1048 2814 44E4     		_NEXT
 1049              	
 1050              	/***********************************************************
 1051              	    >IN	 ( -- a )
 1052              	 	Hold the character pointer while parsing input stream.
 1053              	***********************************************************/
 1054 2816 04280000 		_HEADER INN,3,">IN"
ARM GAS  forth.s 			page 105


 1054      033E494E 
 1054      00BF
 1055 2820 47F8046D 		_PUSH
 1056 2824 04F12806 		ADD	TOS,UP,#TOIN
 1057 2828 3AE4     		_NEXT
 1058              	
 1059              	/**************************************
 1060              	    #TIB	( -- a )
 1061              	 	Hold the current count and address 
 1062              		of the terminal input buffer.
 1063              	**************************************/
 1064 282a 1A280000 		_HEADER NTIB,4,"#TIB"
 1064      04235449 
 1064      4200
 1065 2834 47F8046D 		_PUSH
 1066 2838 04F12C06 		ADD	TOS,UP,#NTIBB
 1067 283c 30E4     		_NEXT
 1068              	
 1069              	/******************************
 1070              	    'EVAL	( -- a )
 1071              	 	Execution vector of EVAL.
 1072              	*******************************/
 1073 283e 2E280000 		_HEADER TEVAL,5,"'EVAL"
 1073      05274556 
 1073      414C
 1074 2848 47F8046D 		_PUSH
 1075 284c 04F13406 		ADD	TOS,UP,#EVAL
 1076 2850 26E4     		_NEXT
 1077              	
 1078              	/*********************************
 1079              	    HLD	 ( -- a )
 1080              	 	Hold a pointer in building a 
 1081              		numeric output string.
 1082              	*********************************/
 1083 2852 42280000 		_HEADER HLD,3,"HLD"
 1083      03484C44 
 1083      00BF
 1084 285c 47F8046D 		_PUSH
 1085 2860 04F13806 		ADD	TOS,UP,#HOLD
 1086 2864 1CE4     		_NEXT
 1087              	
 1088              	/**********************************
 1089              	    CONTEXT	( -- a )
 1090              	 	A area to specify vocabulary 
 1091              		search order.
 1092              	**********************************/
 1093 2866 56280000 		_HEADER CNTXT,7,"CONTEXT"
 1093      07434F4E 
 1093      54455854 
 1093      00BF
 1094              	CRRNT:
 1095 2874 47F8046D 		_PUSH
 1096 2878 04F13C06 		ADD	TOS,UP,#CTXT
 1097 287c 10E4     		_NEXT
 1098              	
 1099              	/******************************
 1100              	    CP	( -- a )
ARM GAS  forth.s 			page 106


 1101              	 	Point to top name in RAM 
 1102              		vocabulary.
 1103              	******************************/
 1104 287e 6A280000 		_HEADER CPP,2,"CP"
 1104      02435000 
 1104      00BF
 1105 2888 47F8046D 		_PUSH
 1106 288c 04F14406 		ADD	TOS,UP,#USER_CTOP
 1107 2890 06E4     		_NEXT
 1108              	
 1109              	/****************************
 1110              	   FCP ( -- a )
 1111              	  Point ot top of Forth 
 1112              	  system dictionary
 1113              	****************************/
 1114 2892 82280000 		_HEADER FCP,3,"FCP"
 1114      03464350 
 1114      00BF
 1115 289c 47F8046D 		_PUSH 
 1116 28a0 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1117 28a4 FFF7FCBB 		_NEXT 
 1118              	
 1119              	/***************************
 1120              	    LAST	( -- a )
 1121              	 	Point to the last name 
 1122              		in the name dictionary.
 1123              	***************************/
 1124 28a8 96280000 		_HEADER LAST,4,"LAST"
 1124      044C4153 
 1124      540000BF 
 1125 28b4 47F8046D 		_PUSH
 1126 28b8 04F14806 		ADD	TOS,UP,#LASTN
 1127 28bc FFF7F0BB 		_NEXT
 1128              	
 1129              	
 1130              	/***********************
 1131              		system constants 
 1132              	***********************/
 1133              	
 1134              	/********************************
 1135              		USER-BEGIN ( -- a )
 1136              	  where user area begin in RAM
 1137              	********************************/
 1138 28c0 AC280000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1138      0A555345 
 1138      522D4245 
 1138      47494E00 
 1139 28d0 47F8046D 		_PUSH 
 1140 28d4 DFF80460 		ldr TOS,USR_BGN_ADR 
 1141 28d8 FFF7E2BB 		_NEXT 
 1142              	USR_BGN_ADR:
 1143 28dc 12050020 	.word  DTOP 
 1144              	
 1145              	/*********************************
 1146              	  USER_END ( -- a )
 1147              	  where user area end in RAM 
 1148              	******************************/
ARM GAS  forth.s 			page 107


 1149 28e0 C4280000 		_HEADER USER_END,8,"USER-END"
 1149      08555345 
 1149      522D454E 
 1149      440000BF 
 1150 28f0 47F8046D 		_PUSH 
 1151 28f4 DFF80460 		ldr TOS,USER_END_ADR 
 1152 28f8 FFF7D2BB 		_NEXT 
 1153              	USER_END_ADR:
 1154 28fc FC800120 		.word DEND 
 1155              	
 1156              	
 1157              	/* *********************
 1158              	  Common functions
 1159              	***********************/
 1160              	
 1161              	/********************************
 1162              	    WITHIN	( u ul uh -- t )
 1163              	 	Return true if u is within 
 1164              		the range of ul and uh.
 1165              	********************************/
 1166 2900 E4280000 		_HEADER WITHI,6,"WITHIN"
 1166      06574954 
 1166      48494E00 
 1167 290c 504700BF 		_NEST
 1168 2910 75230000 		_ADR	OVER
 1169 2914 25240000 		_ADR	SUBB
 1170 2918 F9220000 		_ADR	TOR
 1171 291c 25240000 		_ADR	SUBB
 1172 2920 D1220000 		_ADR	RFROM
 1173 2924 85260000 		_ADR	ULESS
 1174 2928 A7200000 		_UNNEST
 1175              	
 1176              	//  Divide
 1177              	
 1178              	/*************************************
 1179              	    UM/MOD	( udl udh u -- ur uq )
 1180              	 	Unsigned divide of a double by a 
 1181              		single. Return mod and quotient.
 1182              	**************************************/
 1183 292c 04290000 		_HEADER UMMOD,6,"UM/MOD"
 1183      06554D2F 
 1183      4D4F4400 
 1184 2938 4FF00103 		MOV	T3,#1
 1185 293c 57F8045B 		LDR	WP,[DSP],#4
 1186 2940 3A68     		LDR	T2,[DSP]
 1187              	UMMOD0:
 1188 2942 9218     		ADDS	T2,T2,T2
 1189 2944 6D41     		ADCS	WP,WP,WP
 1190 2946 04D3     		BCC	UMMOD1
 1191 2948 A5EB0605 		SUB	WP,WP,TOS
 1192 294c 02F10102 		ADD	T2,T2,#1
 1193 2950 04E0     		B UMMOD2
 1194              	UMMOD1:
 1195 2952 AD1B     		SUBS	WP,WP,TOS 
 1196 2954 28BF     		IT CS 
 1197 2956 0132     		ADDCS	T2,T2,#1
 1198 2958 00D2     		BCS	UMMOD2
ARM GAS  forth.s 			page 108


 1199 295a 3544     		ADD	WP,WP,TOS
 1200              	UMMOD2:
 1201 295c DB18     		ADDS	T3,T3,T3
 1202 295e F0D3     		BCC	UMMOD0
 1203 2960 1646     		MOV	TOS,T2
 1204 2962 3D60     		STR	WP,[DSP]
 1205 2964 FFF79CBB 		_NEXT
 1206              	
 1207              	/****************************
 1208              	    M/MOD	( d n -- r q )
 1209              	 	Signed floored divide 
 1210              		of double by single. 
 1211              		Return mod and quotient.
 1212              	****************************/
 1213 2968 30290000 		_HEADER MSMOD,5,"M/MOD"
 1213      054D2F4D 
 1213      4F4400BF 
 1214 2974 504700BF 		_NEST
 1215 2978 51230000 		_ADR	DUPP
 1216 297c 85230000 		_ADR	ZLESS
 1217 2980 51230000 		_ADR	DUPP
 1218 2984 F9220000 		_ADR	TOR
 1219 2988 5F220000 		_QBRAN MMOD1
 1219      A0290000 
 1220 2990 35260000 		_ADR	NEGAT
 1221 2994 F9220000 		_ADR	TOR
 1222 2998 6D270000 		_ADR	DNEGA
 1223 299c D1220000 		_ADR	RFROM
 1224              	MMOD1:
 1225 29a0 F9220000 		_ADR	TOR
 1226 29a4 51230000 		_ADR	DUPP
 1227 29a8 85230000 		_ADR	ZLESS
 1228 29ac 5F220000 		_QBRAN MMOD2
 1228      BC290000 
 1229 29b4 E5220000 		_ADR	RAT
 1230 29b8 15240000 		_ADR	PLUS
 1231              	MMOD2:
 1232 29bc D1220000 		_ADR	RFROM
 1233 29c0 39290000 		_ADR	UMMOD
 1234 29c4 D1220000 		_ADR	RFROM
 1235 29c8 5F220000 		_QBRAN	MMOD3
 1235      DC290000 
 1236 29d0 61230000 		_ADR	SWAP
 1237 29d4 35260000 		_ADR	NEGAT
 1238 29d8 61230000 		_ADR	SWAP
 1239              	MMOD3:   
 1240 29dc A7200000 		_UNNEST
 1241              	
 1242              	/****************************
 1243              		D2* ( d -- d<<1 )
 1244              		double * 2 
 1245              	***************************/
 1246 29e0 6C290000 		_HEADER D2STAR,3,"D2*"
 1246      0344322A 
 1247 29e8 3868     		ldr T0,[DSP]
 1248 29ea 4000     		lsls T0,#1
 1249 29ec 3860     		str T0,[DSP]
ARM GAS  forth.s 			page 109


 1250 29ee 4FEA4606 		lsl TOS,#1
 1251 29f2 46F10006 		adc TOS,#0
 1252 29f6 FFF753BB 		_NEXT 
 1253              	
 1254              	
 1255              	/***************************
 1256              		D/MOD  ( d+ n+ - ur qd+ )
 1257              	    qd+ = d+ / n+
 1258              		unsigned double division
 1259              		output:
 1260              		ur  remainder 
 1261              		qd+ truncated quotient 
 1262              	***************************/
 1263 29fa E4290000 		_HEADER DSLMOD,5,"D/MOD"
 1263      05442F4D 
 1263      4F44
 1264 2a04 3D68     		ldr WP,[DSP]  // d+ high 
 1265 2a06 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1266 2a08 4FF02002 		mov T2,#32 // shift counter  
 1267 2a0c 81EA0101 		eor T1,T1 // quotient T0:T1  
 1268 2a10 25B9     		cbnz WP,1f    
 1269 2a12 82EA0202 		eor T2,T2 // nos shifting required 
 1270 2a16 0546     		mov WP,T0 
 1271 2a18 80EA0000 		eor T0,T0 
 1272 2a1c 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1273 2a1e 15F0004F 	    tst WP,#(1<<31) 
 1274 2a22 06D1     		bne 2f
 1275 2a24 4918     		adds T1,T1,T1 
 1276 2a26 4041     		adcs T0,T0,T0 
 1277 2a28 45EB0505 		adc WP,WP,WP 
 1278 2a2c A2F10102 		sub T2,#1 
 1279 2a30 F4E7     		b 1b 
 1280 2a32 B5FBF6F3 	2:  udiv T3,WP,TOS
 1281 2a36 41EA0301 		orr T1,T3   // append partial quotient 
 1282 2a3a 06FB03F3 		mul T3,TOS
 1283 2a3e A5EB0305 		sub WP,T3 //remainder 
 1284 2a42 02B1     		cbz T2,8f 
 1285 2a44 EAE7     		b 1b 
 1286 2a46 7D60     	8:	str WP,[DSP,#4] // remainder 
 1287 2a48 3960     		str T1,[DSP]  // q lo 
 1288 2a4a 0646     		mov TOS,T0  // q hi 		
 1289 2a4c FFF728BB 		_NEXT 
 1290              	
 1291              	
 1292              	
 1293              	/****************************
 1294              	   /MOD	( n n -- r q )
 1295              		Signed divide. Return
 1296              		mod and quotient.
 1297              	****************************/
 1298 2a50 FE290000 		_HEADER SLMOD,4,"/MOD"
 1298      042F4D4F 
 1298      440000BF 
 1299 2a5c 504700BF 		_NEST
 1300 2a60 75230000 		_ADR	OVER
 1301 2a64 85230000 		_ADR	ZLESS
 1302 2a68 61230000 		_ADR	SWAP
ARM GAS  forth.s 			page 110


 1303 2a6c 75290000 		_ADR	MSMOD
 1304 2a70 A7200000 		_UNNEST
 1305              	
 1306              	/**************************
 1307              	    MOD	 ( n n -- r )
 1308              	 	Signed divide. Return
 1309              		mod only.
 1310              	**************************/
 1311 2a74 542A0000 		_HEADER MODD,3,"MOD"
 1311      034D4F44 
 1312 2a7c 504700BF 		_NEST
 1313 2a80 5D2A0000 		_ADR	SLMOD
 1314 2a84 41230000 		_ADR	DROP
 1315 2a88 A7200000 		_UNNEST
 1316              	
 1317              	/*************************
 1318              	    /	   ( n n -- q )
 1319              	 	Signed divide. Return
 1320              		quotient only.
 1321              	**************************/
 1322 2a8c 782A0000 		_HEADER SLASH,1,"/"
 1322      012F00BF 
 1323 2a94 504700BF 		_NEST
 1324 2a98 5D2A0000 		_ADR	SLMOD
 1325 2a9c 61230000 		_ADR	SWAP
 1326 2aa0 41230000 		_ADR	DROP
 1327 2aa4 A7200000 		_UNNEST
 1328              	
 1329              	//******************************
 1330              	//  */MOD	( n1 n2 n3 -- r q )
 1331              	/* 	Multiply n1 and n2, then 
 1332              		divide by n3. Return 
 1333              		mod and quotient.
 1334              	******************************/
 1335 2aa8 902A0000 		_HEADER SSMOD,5,"*/MOD"
 1335      052A2F4D 
 1335      4F4400BF 
 1336 2ab4 504700BF 		_NEST
 1337 2ab8 F9220000 		_ADR	TOR
 1338 2abc 5D240000 		_ADR	MSTAR
 1339 2ac0 D1220000 		_ADR	RFROM
 1340 2ac4 75290000 		_ADR	MSMOD
 1341 2ac8 A7200000 		_UNNEST
 1342              	
 1343              	//*******************************
 1344              	//  */ ( n1 n2 n3 -- q )
 1345              	/* 	Multiply n1 by n2, then 
 1346              		divide by n3. Return quotient
 1347              		only.
 1348              	*******************************/
 1349 2acc AC2A0000 		_HEADER STASL,2,"*/"
 1349      022A2F00 
 1350 2ad4 504700BF 		_NEST
 1351 2ad8 B52A0000 		_ADR	SSMOD
 1352 2adc 61230000 		_ADR	SWAP
 1353 2ae0 41230000 		_ADR	DROP
 1354 2ae4 A7200000 		_UNNEST
ARM GAS  forth.s 			page 111


 1355              	
 1356              	/*******************
 1357              	  Miscellaneous
 1358              	*******************/
 1359              	
 1360              	/*************************
 1361              	    ALIGNED	( b -- a )
 1362              	 	Align address to the 
 1363              		cell boundary.
 1364              	**************************/
 1365 2ae8 D02A0000 		_HEADER ALGND,7,"ALIGNED"
 1365      07414C49 
 1365      474E4544 
 1366 2af4 06F10306 		ADD	TOS,TOS,#3
 1367 2af8 6FF00305 		MVN	WP,#3
 1368 2afc 06EA0506 		AND	TOS,TOS,WP
 1369 2b00 FFF7CEBA 		_NEXT
 1370              	
 1371              	/****************************
 1372              	    >CHAR	( c -- c )
 1373              	 	Filter non-printing 
 1374              		characters.
 1375              	****************************/
 1376 2b04 EC2A0000 		_HEADER TCHAR,5,">CHAR"
 1376      053E4348 
 1376      415200BF 
 1377 2b10 504700BF 		_NEST
 1378 2b14 1F220000 		_DOLIT  0x7F
 1378      7F000000 
 1379 2b1c 95230000 		_ADR	ANDD
 1380 2b20 51230000 		_ADR	DUPP	// mask msb
 1381 2b24 D1240000 		_ADR	BLANK
 1382 2b28 1F220000 		_DOLIT 	127
 1382      7F000000 
 1383 2b30 0D290000 		_ADR	WITHI	// check for printable
 1384 2b34 21260000 		_ADR	INVER
 1385 2b38 5F220000 		_QBRAN	TCHA1
 1385      4C2B0000 
 1386 2b40 41230000 		_ADR	DROP
 1387 2b44 1F220000 		_DOLIT 	'_'	// replace non-printables
 1387      5F000000 
 1388              	TCHA1:
 1389 2b4c A7200000 		  _UNNEST
 1390              	
 1391              	/************************
 1392              	    DEPTH	( -- n )
 1393              	 	Return the depth of
 1394              		the data stack.
 1395              	***********************/
 1396 2b50 082B0000 		_HEADER DEPTH,5,"DEPTH"
 1396      05444550 
 1396      544800BF 
 1397 2b5c 4FF47F42 		_MOV32 T2,SPP 
 1397      C2F20102 
 1398 2b64 A2EB0702 		SUB	T2,T2,DSP
 1399 2b68 47F8046D 		_PUSH
 1400 2b6c 4FEAA206 		ASR	TOS,T2,#2
ARM GAS  forth.s 			page 112


 1401 2b70 FFF796BA 		_NEXT
 1402              	
 1403              	/*****************************
 1404              	    PICK	( ... +n -- ... w )
 1405              	 	Copy the nth stack item 
 1406              		to tos.
 1407              	******************************/
 1408 2b74 542B0000 		_HEADER PICK,4,"PICK"
 1408      04504943 
 1408      4B0000BF 
 1409 2b80 504700BF 		_NEST
 1410 2b84 71240000 		_ADR	ONEP
 1411 2b88 E5240000 		_ADR	CELLS
 1412 2b8c 2D230000 		_ADR	SPAT
 1413 2b90 15240000 		_ADR	PLUS
 1414 2b94 A5220000 		_ADR	AT
 1415 2b98 A7200000 		_UNNEST
 1416              	
 1417              	/*********************
 1418              	  Memory access
 1419              	*********************/
 1420              	
 1421              	/*************************
 1422              	    HERE	( -- a )
 1423              	 	Return the top of
 1424              		the code dictionary.
 1425              	*************************/
 1426 2b9c 782B0000 		_HEADER HERE,4,"HERE"
 1426      04484552 
 1426      450000BF 
 1427 2ba8 504700BF 		_NEST
 1428 2bac 89280000 		_ADR	CPP
 1429 2bb0 A5220000 		_ADR	AT
 1430 2bb4 A7200000 		_UNNEST
 1431              	
 1432              	/***************************	
 1433              	    PAD	 ( -- a )
 1434              	 	Return the address of 
 1435              		a temporary buffer.
 1436              	***************************/
 1437 2bb8 A02B0000 		_HEADER PAD,3,"PAD"
 1437      03504144 
 1438 2bc0 504700BF 		_NEST
 1439 2bc4 A92B0000 		_ADR	HERE
 1440 2bc8 1F220000 		_DOLIT 80
 1440      50000000 
 1441 2bd0 15240000 		_ADR PLUS 
 1442 2bd4 A7200000 		_UNNEST
 1443              	
 1444              	/***********************
 1445              	    TIB	 ( -- a )
 1446              	 	Return the address 
 1447              		of the terminal 
 1448              		input buffer.
 1449              	************************/
 1450 2bd8 BC2B0000 		_HEADER TIB,3,"TIB"
 1450      03544942 
ARM GAS  forth.s 			page 113


 1451 2be0 47F8046D 		_PUSH
 1452 2be4 266B     		ldr TOS,[UP,#TIBUF]
 1453 2be6 FFF75BBA 		_NEXT
 1454              	
 1455              	/*************************
 1456              	    @EXECUTE	( a -- )
 1457              	 	Execute vector stored
 1458              		in address a.
 1459              	*************************/
 1460 2bea DC2B0000 		_HEADER ATEXE,8,"@EXECUTE"
 1460      08404558 
 1460      45435554 
 1460      4500
 1461 2bf8 3500     		MOVS	WP,TOS
 1462 2bfa 57F8046B 		_POP
 1463 2bfe 2D68     		LDR	WP,[WP]
 1464 2c00 45F00105 		ORR	WP,WP,#1
 1465 2c04 18BF     	    IT NE 
 1466 2c06 2847     		BXNE	WP
 1467 2c08 FFF74ABA 		_NEXT
 1468              	
 1469              	/*******************************
 1470              	    CMOVE	( b1 b2 u -- )
 1471              	 	Copy u bytes from b1 to b2.
 1472              	********************************/
 1473 2c0c EE2B0000 		_HEADER CMOVE,5,"CMOVE"
 1473      05434D4F 
 1473      564500BF 
 1474 2c18 57F8042B 		LDR	T2,[DSP],#4
 1475 2c1c 57F8043B 		LDR	T3,[DSP],#4
 1476 2c20 03E0     		B CMOV1
 1477              	CMOV0:
 1478 2c22 13F8015B 		LDRB	WP,[T3],#1
 1479 2c26 02F8015B 		STRB	WP,[T2],#1
 1480              	CMOV1:
 1481 2c2a 3600     		MOVS	TOS,TOS
 1482 2c2c 02D0     		BEQ	CMOV2
 1483 2c2e A6F10106 		SUB	TOS,TOS,#1
 1484 2c32 F6E7     		B CMOV0
 1485              	CMOV2:
 1486 2c34 57F8046B 		_POP
 1487 2c38 FFF732BA 		_NEXT
 1488              	
 1489              	/***************************
 1490              	    MOVE	( a1 a2 u -- )
 1491              	 	Copy u words from a1 to a2.
 1492              	*******************************/
 1493 2c3c 102C0000 		_HEADER MOVE,4,"MOVE"
 1493      044D4F56 
 1493      450000BF 
 1494 2c48 4FF00400 		MOV T0,#4 
 1495 2c4c 06F10306 		ADD TOS,#3 
 1496 2c50 26F00306 		BIC TOS,#3
 1497 2c54 57F8041B 		LDR	T1,[DSP],#4 // dest
 1498 2c58 57F8042B 		LDR	T2,[DSP],#4 // src 
 1499 2c5c 8A42     		CMP T2,T1 
 1500 2c5e 08D5     		BPL MOVE1
ARM GAS  forth.s 			page 114


 1501 2c60 6FF00300 		MOV T0,#-4 
 1502 2c64 3144     		ADD T1,TOS
 1503 2c66 3244     		ADD T2,TOS 
 1504 2c68 01E0     		B MOVE3
 1505              	MOVE0:
 1506 2c6a 1568     		LDR	WP,[T2]
 1507 2c6c 0D60     		STR	WP,[T1]
 1508              	MOVE3: 
 1509 2c6e 0144     		ADD T1,T0 
 1510 2c70 0244     		ADD T2,T0 
 1511              	MOVE1:
 1512 2c72 3600     		MOVS TOS,TOS
 1513 2c74 02D0     		BEQ	MOVE2
 1514 2c76 A6F10406 		SUB	TOS,TOS,#4
 1515 2c7a F6E7     		B MOVE0
 1516              	MOVE2:
 1517 2c7c 57F8046B 		_POP
 1518 2c80 FFF70EBA 		_NEXT
 1519              	
 1520              	/**************************
 1521              	    FILL	( b u c -- )
 1522              	 	Fill u bytes of character
 1523              		c to area beginning at b.
 1524              	******************************/
 1525 2c84 402C0000 		_HEADER FILL,4,"FILL"
 1525      0446494C 
 1525      4C0000BF 
 1526 2c90 03CF     		LDMFD DSP!,{T0,T1} 
 1527 2c92 0000     		MOVS T0,T0 
 1528 2c94 03D0     		BEQ FILL2
 1529              	FILL1:
 1530 2c96 01F8016B 		STRB	TOS,[T1],#1
 1531 2c9a 0138     		SUBS	T0,T0,#1
 1532 2c9c FBD1     		BNE FILL1
 1533              	FILL2:
 1534 2c9e 57F8046B 		_POP
 1535 2ca2 FFF7FDB9 		_NEXT
 1536              	
 1537              	/*****************************
 1538              	    PACK$	( b u a -- a )
 1539              	 	Build a counted word with
 1540              		u characters from b. 
 1541              		Null fill.
 1542              	*****************************/
 1543 2ca6 882C0000 		_HEADER PACKS,5,"PACK$"
 1543      05504143 
 1543      4B24
 1544 2cb0 504700BF 		_NEST
 1545 2cb4 F52A0000 		_ADR	ALGND
 1546 2cb8 51230000 		_ADR	DUPP
 1547 2cbc F9220000 		_ADR	TOR			// strings only on cell boundary
 1548 2cc0 75230000 		_ADR	OVER
 1549 2cc4 15240000 		_ADR	PLUS
 1550 2cc8 71240000 		_ADR	ONEP
 1551 2ccc 1F220000 		_DOLIT 	0xFFFFFFFC
 1551      FCFFFFFF 
 1552 2cd4 95230000 		_ADR	ANDD			// count mod cell
ARM GAS  forth.s 			page 115


 1553 2cd8 1F220000 		_DOLIT 	0
 1553      00000000 
 1554 2ce0 61230000 		_ADR	SWAP
 1555 2ce4 91220000 		_ADR	STORE			// null fill cell
 1556 2ce8 E5220000 		_ADR	RAT
 1557 2cec 89250000 		_ADR	DDUP
 1558 2cf0 B1220000 		_ADR	CSTOR
 1559 2cf4 71240000 		_ADR	ONEP			// save count
 1560 2cf8 61230000 		_ADR	SWAP
 1561 2cfc 192C0000 		_ADR	CMOVE
 1562 2d00 D1220000 		_ADR	RFROM
 1563 2d04 A7200000 		_UNNEST   			// move string
 1564              	
 1565              	/***********************************
 1566              	  Numeric output, single precision
 1567              	***********************************/
 1568              	
 1569              	/**************************
 1570              	    DIGIT	( u -- c )
 1571              	 	Convert digit u to 
 1572              		a character.
 1573              	***************************/
 1574 2d08 AA2C0000 		_HEADER DIGIT,5,"DIGIT"
 1574      05444947 
 1574      495400BF 
 1575 2d14 504700BF 		_NEST
 1576 2d18 1F220000 		_DOLIT 9
 1576      09000000 
 1577 2d20 75230000 		_ADR	OVER
 1578 2d24 9D260000 		_ADR	LESS
 1579 2d28 1F220000 		_DOLIT	7
 1579      07000000 
 1580 2d30 95230000 		_ADR	ANDD
 1581 2d34 15240000 		_ADR	PLUS
 1582 2d38 1F220000 		_DOLIT	'0'
 1582      30000000 
 1583 2d40 15240000 		_ADR	PLUS 
 1584 2d44 A7200000 		_UNNEST
 1585              	
 1586              	/*********************************
 1587              	    EXTRACT	( n base -- n c )
 1588              	 	Extract the least significant
 1589              		digit from n.
 1590              	**********************************/
 1591 2d48 0C2D0000 		_HEADER EXTRC,7,"EXTRACT"
 1591      07455854 
 1591      52414354 
 1592 2d54 504700BF 		_NEST
 1593 2d58 1F220000 		_DOLIT 0
 1593      00000000 
 1594 2d60 61230000 		_ADR	SWAP
 1595 2d64 39290000 		_ADR	UMMOD
 1596 2d68 61230000 		_ADR	SWAP
 1597 2d6c 152D0000 		_ADR	DIGIT
 1598 2d70 A7200000 		_UNNEST
 1599              	
 1600              	/***************************
ARM GAS  forth.s 			page 116


 1601              	    <#	  ( -- )
 1602              	 	Initiate the numeric
 1603              		output process.
 1604              	****************************/
 1605 2d74 4C2D0000 		_HEADER BDIGS,2,"<#"
 1605      023C2300 
 1606 2d7c 504700BF 		_NEST
 1607 2d80 C12B0000 		_ADR	PAD
 1608 2d84 5D280000 		_ADR	HLD
 1609 2d88 91220000 		_ADR	STORE
 1610 2d8c A7200000 		_UNNEST
 1611              	
 1612              	/*********************************
 1613              	    HOLD	( c -- )
 1614              	 	Insert a character into the 
 1615              		numeric output string.
 1616              	**********************************/
 1617 2d90 782D0000 		_HEADER HOLD,4,"HOLD"
 1617      04484F4C 
 1617      440000BF 
 1618 2d9c 504700BF 		_NEST
 1619 2da0 5D280000 		_ADR	HLD
 1620 2da4 A5220000 		_ADR	AT
 1621 2da8 81240000 		_ADR	ONEM
 1622 2dac 51230000 		_ADR	DUPP
 1623 2db0 5D280000 		_ADR	HLD
 1624 2db4 91220000 		_ADR	STORE
 1625 2db8 B1220000 		_ADR	CSTOR
 1626 2dbc A7200000 		_UNNEST
 1627              	
 1628              	/***********************
 1629              	    #	   ( u -- u )
 1630              	 	Extract one digit 
 1631              		from u and append 
 1632              		the digit to output 
 1633              		string.
 1634              	*************************/
 1635 2dc0 942D0000 		_HEADER DIG,1,"#"
 1635      012300BF 
 1636 2dc8 504700BF 		_NEST
 1637 2dcc ED270000 		_ADR	BASE
 1638 2dd0 A5220000 		_ADR	AT
 1639 2dd4 552D0000 		_ADR	EXTRC
 1640 2dd8 9D2D0000 		_ADR	HOLD
 1641 2ddc A7200000 		_UNNEST
 1642              	
 1643              	/***************************
 1644              	    #S	  ( u -- 0 )
 1645              	 	Convert u until all 
 1646              		digits are added to 
 1647              		the output string.
 1648              	***************************/
 1649 2de0 C42D0000 		_HEADER DIGS,2,"#S"
 1649      02235300 
 1650 2de8 504700BF 		_NEST
 1651              	DIGS1:
 1652 2dec C92D0000 	    _ADR	DIG
ARM GAS  forth.s 			page 117


 1653 2df0 51230000 		_ADR	DUPP
 1654 2df4 5F220000 		_QBRAN 	DIGS2
 1654      042E0000 
 1655 2dfc 73220000 		_BRAN	DIGS1
 1655      EC2D0000 
 1656              	DIGS2:
 1657 2e04 A7200000 		  _UNNEST
 1658              	
 1659              	/*********************
 1660              	    SIGN	( n -- )
 1661              	 	Add a minus sign
 1662              		to the numeric
 1663              		output string.
 1664              	*********************/
 1665 2e08 E42D0000 		_HEADER SIGN,4,"SIGN"
 1665      04534947 
 1665      4E0000BF 
 1666 2e14 504700BF 		_NEST
 1667 2e18 85230000 		_ADR	ZLESS
 1668 2e1c 5F220000 		_QBRAN	SIGN1
 1668      302E0000 
 1669 2e24 1F220000 		_DOLIT '-'
 1669      2D000000 
 1670 2e2c 9D2D0000 		_ADR	HOLD
 1671              	SIGN1:
 1672 2e30 A7200000 		  _UNNEST
 1673              	
 1674              	/*************************
 1675              	    #>  ( w -- b u )
 1676              	 	Prepare the output 
 1677              		word to be TYPE'd.
 1678              	************************/
 1679 2e34 0C2E0000 		_HEADER EDIGS,2,"#>"
 1679      02233E00 
 1680 2e3c 504700BF 		_NEST
 1681 2e40 41230000 		_ADR	DROP
 1682 2e44 5D280000 		_ADR	HLD
 1683 2e48 A5220000 		_ADR	AT
 1684 2e4c C12B0000 		_ADR	PAD
 1685 2e50 75230000 		_ADR	OVER
 1686 2e54 25240000 		_ADR	SUBB
 1687 2e58 A7200000 		_UNNEST
 1688              	
 1689              	/**************************
 1690              	    str	 ( n -- b u )
 1691              	 	Convert a signed 
 1692              		integer to a numeric 
 1693              		string.
 1694              	hidden word used by compiler
 1695              	***************************/
 1696              	STRR:
 1697 2e5c 504700BF 		_NEST
 1698 2e60 51230000 		_ADR	DUPP
 1699 2e64 F9220000 		_ADR	TOR
 1700 2e68 45260000 		_ADR	ABSS
 1701 2e6c 7D2D0000 		_ADR	BDIGS
 1702 2e70 E92D0000 		_ADR	DIGS
ARM GAS  forth.s 			page 118


 1703 2e74 D1220000 		_ADR	RFROM
 1704 2e78 152E0000 		_ADR	SIGN
 1705 2e7c 3D2E0000 		_ADR	EDIGS
 1706 2e80 A7200000 		_UNNEST
 1707              	
 1708              	/*************************
 1709              	    HEX	 ( -- )
 1710              	 	Use radix 16 as 
 1711              		base for numeric 
 1712              		conversions.
 1713              	*************************/
 1714 2e84 382E0000 		_HEADER HEX,3,"HEX"
 1714      03484558 
 1715 2e8c 504700BF 		_NEST
 1716 2e90 1F220000 		_DOLIT 16
 1716      10000000 
 1717 2e98 ED270000 		_ADR	BASE
 1718 2e9c 91220000 		_ADR	STORE
 1719 2ea0 A7200000 		_UNNEST
 1720              	
 1721              	/**************************
 1722              		BIN ( -- )
 1723              		Use radix 2 as 
 1724              		base for numeric 
 1725              		conversion 
 1726              	**************************/
 1727 2ea4 882E0000 		_HEADER BIN,3,"BIN"
 1727      0342494E 
 1728 2eac 504700BF 		_NEST 
 1729 2eb0 1F220000 		_DOLIT 2 
 1729      02000000 
 1730 2eb8 ED270000 		_ADR BASE 
 1731 2ebc 91220000 		_ADR STORE
 1732 2ec0 A7200000 		_UNNEST 
 1733              	
 1734              	/************************
 1735              	    DECIMAL	( -- )
 1736              	 	Use radix 10 as base
 1737              		for numeric conversions.
 1738              	*************************/
 1739 2ec4 A82E0000 		_HEADER DECIM,7,"DECIMAL"
 1739      07444543 
 1739      494D414C 
 1740 2ed0 504700BF 		_NEST
 1741 2ed4 1F220000 		_DOLIT 10
 1741      0A000000 
 1742 2edc ED270000 		_ADR	BASE
 1743 2ee0 91220000 		_ADR	STORE
 1744 2ee4 A7200000 		_UNNEST
 1745              	
 1746              	/************************************
 1747              	  Numeric input, single precision
 1748              	***********************************/
 1749              	
 1750              	/***********************************
 1751              	    DIGIT?	( c base -- u t )
 1752              	 	Convert a character to its 
ARM GAS  forth.s 			page 119


 1753              		numeric value. A flag 
 1754              		indicates success.
 1755              	**********************************/
 1756 2ee8 C82E0000 		_HEADER DIGTQ,6,"DIGIT?"
 1756      06444947 
 1756      49543F00 
 1757 2ef4 504700BF 		_NEST
 1758 2ef8 F9220000 		_ADR	TOR
 1759 2efc 1F220000 		_DOLIT 	'0'
 1759      30000000 
 1760 2f04 25240000 		_ADR	SUBB
 1761 2f08 1F220000 		_DOLIT 9
 1761      09000000 
 1762 2f10 75230000 		_ADR	OVER
 1763 2f14 9D260000 		_ADR	LESS
 1764 2f18 5F220000 		_QBRAN	DGTQ1
 1764      402F0000 
 1765 2f20 1F220000 		_DOLIT 7
 1765      07000000 
 1766 2f28 25240000 		_ADR	SUBB
 1767 2f2c 51230000 		_ADR	DUPP
 1768 2f30 1F220000 		_DOLIT	10
 1768      0A000000 
 1769 2f38 9D260000 		_ADR	LESS
 1770 2f3c A9230000 		_ADR	ORR
 1771              	DGTQ1:
 1772 2f40 51230000 		_ADR	DUPP
 1773 2f44 D1220000 		_ADR	RFROM
 1774 2f48 85260000 		_ADR	ULESS
 1775 2f4c A7200000 		_UNNEST
 1776              	
 1777              	/*****************************
 1778              		( a c -- a+ n c- )
 1779              		a  string pointer 
 1780              		c string length 
 1781              		a+ updated pointer 
 1782              		n  parsed integer 
 1783              		c- character left in string   
 1784              	****************************/
 1785              		.type PARSE_DIGITS, %function 
 1786              	PARSE_DIGITS:
 1787 2f50 3046     		mov T0,TOS // string length 
 1788 2f52 57F8046B 		_POP // TOS <- a 
 1789 2f56 85EA0505 		eor WP,WP  // integer accumulator  
 1790 2f5a E269     		ldr T2,[UP,#NBASE] // conversion base 
 1791 2f5c 98B1     	1:	cbz T0, 8f 
 1792 2f5e 16F8011B 		ldrb T1,[TOS],#1
 1793 2f62 A1F13001 		sub T1,#'0'
 1794 2f66 0A29     		cmp T1,#10 
 1795 2f68 01D4     		bmi 2f 
 1796 2f6a A1F10701 		sub T1,#7
 1797 2f6e 9142     	2:  cmp T1,T2
 1798 2f70 05D2     		bcs 7f 
 1799 2f72 02FB05F5 		mul WP,T2 
 1800 2f76 0D44     		add WP,T1
 1801 2f78 A0F10100 		sub T0,#1 
 1802 2f7c EEE7     		b 1b 
ARM GAS  forth.s 			page 120


 1803              	7:  // not a valid character 
 1804 2f7e A6F10106 		sub TOS,#1
 1805 2f82 00F10100 		add T0,#1 
 1806 2f86 47F8046D 	8:	_PUSH // -- a+
 1807 2f8a 47F8045D 		str WP,[DSP,#-4]! // -- a+ n 
 1808 2f8e 0646     		mov TOS,T0  // -- a+ n c- 
 1809 2f90 FFF786B8 		_NEXT 
 1810              	
 1811              	/************************************
 1812              		DASH? ( a c -- a+ c- t | a c f )
 1813              		check if *a is '-' 
 1814              	*************************************/
 1815 2f94 EC2E0000 		_HEADER DASHQ,5,"DASH?"
 1815      05444153 
 1815      483F00BF 
 1816 2fa0 82EA0202 		eor T2,T2  // flag 
 1817 2fa4 3868     		ldr T0,[DSP] // T0 <- a 
 1818 2fa6 47F8046D 		str TOS,[DSP,#-4]! // a c c 
 1819 2faa 10F8011B 		ldrb T1,[T0],#1
 1820 2fae 2D29     		cmp T1,#'-'
 1821 2fb0 05D1     		bne 9f 
 1822 2fb2 7860     		str T0,[DSP,#4] // a+ 
 1823 2fb4 A6F10106 		sub TOS,#1 
 1824 2fb8 3E60     		str TOS,[DSP] // a+ c- 
 1825 2fba 6FEA0202 		mvn T2,T2 // -1 
 1826 2fbe 1646     	9:	mov TOS,T2 // a+ c- -1 | a c 0 
 1827 2fc0 FFF76EB8 		_NEXT
 1828              	
 1829              	
 1830              	/**********************************
 1831              	    INT?	( a -- n T | a F )
 1832              	 	parse string for at 'a' for 
 1833              		integer. Push a flag on TOS.
 1834              		integer form:
 1835              			[-]hex_digit+  | 
 1836              			$[-]hex_digit+ |
 1837              			%[-]bin_digit+ | 
 1838              			[-]dec_digit+ 
 1839              	**********************************/
 1840 2fc4 982F0000 		_HEADER INTQ,4,"INT?"
 1840      04494E54 
 1840      3F0000BF 
 1841 2fd0 504700BF 		_NEST
 1842 2fd4 ED270000 		_ADR	BASE
 1843 2fd8 A5220000 		_ADR	AT
 1844 2fdc F9220000 		_ADR	TOR
 1845 2fe0 1F220000 		_DOLIT	0      // a 0 
 1845      00000000 
 1846 2fe8 75230000 		_ADR	OVER   // a 0 a 
 1847 2fec 55270000 		_ADR	COUNT  // a 0 a+ c 
 1848 2ff0 75230000 		_ADR	OVER   // a 0 a+ c a+
 1849 2ff4 C5220000 		_ADR	CAT    // a 0 a+ c char 
 1850 2ff8 1F220000 		_DOLIT '$'     // a 0 a+ c char '$'
 1850      24000000 
 1851 3000 6D260000 		_ADR	EQUAL  // a 0 a+ c f 
 1852 3004 5F220000 		_QBRAN	0f    
 1852      28300000 
ARM GAS  forth.s 			page 121


 1853 300c 8D2E0000 		_ADR	HEX
 1854 3010 61230000 		_ADR	SWAP  // a 0 c a+ 
 1855 3014 71240000 		_ADR	ONEP
 1856 3018 61230000 		_ADR	SWAP
 1857 301c 81240000 		_ADR	ONEM // a 0 a+ c 
 1858 3020 73220000 		_BRAN   1f
 1858      58300000 
 1859 3028 75230000 	0:  _ADR    OVER  // a 0 a+ c a+
 1860 302c C5220000 		_ADR    CAT   // a 0 a+ c char 
 1861 3030 1F220000 		_DOLIT  '%'   // a 0 a+ c char '%'
 1861      25000000 
 1862 3038 6D260000 		_ADR	EQUAL  // a 0 a+ c f 
 1863 303c 5F220000 		_QBRAN  1f
 1863      58300000 
 1864 3044 AD2E0000 		_ADR	BIN 
 1865 3048 61230000 		_ADR	SWAP 
 1866 304c 71240000 		_ADR	ONEP 
 1867 3050 61230000 		_ADR	SWAP 
 1868 3054 81240000 		_ADR	ONEM
 1869              	1:  // a 0 a+ c 
 1870 3058 A12F0000 		_ADR	DASHQ
 1871 305c F9220000 		_ADR	TOR   // save sign -- a 0 a+ c- 
 1872 3060 25250000 		_ADR	QDUP
 1873 3064 5F220000 		_QBRAN	6f
 1873      B0300000 
 1874 306c 01000000 		_ADR	PARSE_DIGITS  // a 0 a+ c -- a 0 a+ n c- 
 1875 3070 59260000 		_ADR	ZEQUAL
 1876 3074 5F220000 		_QBRAN  5f // digits left, not an integer 
 1876      AC300000 
 1877 307c D1220000 	2:	_ADR	RFROM  // sign 
 1878 3080 5F220000 		_QBRAN  3f   // positive integer 
 1878      8C300000 
 1879 3088 35260000 		_ADR	NEGAT
 1880              	3:	
 1881 308c 4D250000 		_ADR	NROT  // a n 0 a+
 1882 3090 61250000 		_ADR	DDROP // a n 
 1883 3094 1F220000 		_DOLIT  -1    // a n -1 
 1883      FFFFFFFF 
 1884 309c 39250000 		_ADR	ROT   // n -1 a 
 1885 30a0 41230000 		_ADR	DROP 
 1886 30a4 73220000 		_BRAN   7f  
 1886      B8300000 
 1887 30ac 41230000 	5:  _ADR    DROP  // -- a 0 a+   	 
 1888 30b0 D1220000 	6:  _ADR	RFROM
 1889 30b4 61250000 		_ADR	DDROP
 1890 30b8 D1220000 	7:	_ADR	RFROM
 1891 30bc ED270000 		_ADR	BASE
 1892 30c0 91220000 		_ADR	STORE
 1893 30c4 A7200000 		_UNNEST
 1894              	
 1895              	
 1896              	/********************
 1897              	  console I/O
 1898              	********************/
 1899              	
 1900              	/**********************
 1901              	    SPACE	( -- )
ARM GAS  forth.s 			page 122


 1902              	 	Send the blank 
 1903              		character to 
 1904              		the output device.
 1905              	************************/
 1906 30c8 C82F0000 		_HEADER SPACE,5,"SPACE"
 1906      05535041 
 1906      434500BF 
 1907 30d4 504700BF 		_NEST
 1908 30d8 D1240000 		_ADR	BLANK
 1909 30dc 29210000 		_ADR	EMIT
 1910 30e0 A7200000 		_UNNEST
 1911              	
 1912              	/***************************
 1913              	    SPACES	( +n -- )
 1914              	 	Send n spaces to the 
 1915              		output device.
 1916              	****************************/
 1917 30e4 CC300000 		_HEADER SPACS,6,"SPACES"
 1917      06535041 
 1917      43455300 
 1918 30f0 504700BF 		_NEST
 1919 30f4 1F220000 		_DOLIT	0
 1919      00000000 
 1920 30fc E5260000 		_ADR	MAX
 1921 3100 F9220000 		_ADR	TOR
 1922 3104 73220000 		_BRAN	CHAR2
 1922      10310000 
 1923              	CHAR1:
 1924 310c D5300000 		_ADR	SPACE
 1925              	CHAR2:
 1926 3110 41220000 		_DONXT	CHAR1
 1926      0C310000 
 1927 3118 A7200000 		_UNNEST
 1928              	
 1929              	/***********************
 1930              	    TYPE	( b u -- )
 1931              	 	Output u characters 
 1932              		from b.
 1933              	************************/
 1934 311c E8300000 		_HEADER TYPEE,4,"TYPE"
 1934      04545950 
 1934      450000BF 
 1935 3128 504700BF 		_NEST
 1936 312c F9220000 		_ADR  TOR   // ( a+1 -- R: u )
 1937 3130 73220000 		_BRAN	TYPE2
 1937      44310000 
 1938              	TYPE1:  
 1939 3138 55270000 		_ADR  COUNT
 1940 313c 112B0000 		_ADR TCHAR
 1941 3140 29210000 		_ADR EMIT
 1942              	TYPE2:  
 1943 3144 41220000 		_DONXT	TYPE1
 1943      38310000 
 1944 314c 41230000 		_ADR	DROP
 1945 3150 A7200000 		_UNNEST
 1946              	
 1947              	/***************************
ARM GAS  forth.s 			page 123


 1948              	    CR	  ( -- )
 1949              	 	Output a carriage return
 1950              		and a line feed.
 1951              	****************************/
 1952 3154 20310000 		_HEADER CR,2,"CR"
 1952      02435200 
 1953 315c 504700BF 		_NEST
 1954 3160 1F220000 		_DOLIT	CRR
 1954      0D000000 
 1955 3168 29210000 		_ADR	EMIT
 1956 316c 1F220000 		_DOLIT	LF
 1956      0A000000 
 1957 3174 29210000 		_ADR	EMIT
 1958 3178 A7200000 		_UNNEST
 1959              	
 1960              	/******************************************
 1961              	  do_$	( -- a )
 1962              	  Return the address of a compiled string.
 1963              	  adjust return address to skip over it.
 1964              	hidden word used by compiler. 
 1965              	******************************************/
 1966              	DOSTR:
 1967 317c 504700BF 		_NEST     
 1968              	/* compiled string address is 2 levels deep */
 1969 3180 D1220000 		_ADR	RFROM	// { -- a1 }
 1970 3184 D1220000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1971 3188 51230000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1972 318c 55270000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1973 3190 15240000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1974 3194 F52A0000 		_ADR	ALGND	//  end of string
 1975              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1976 3198 F9220000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1977 319c 61230000 		_ADR	SWAP	//  count tugged
 1978 31a0 F9220000 		_ADR	TOR     //  ( -- a2) is string address
 1979 31a4 A7200000 		_UNNEST
 1980              	
 1981              	/******************************************
 1982              	    $"|	( -- a )
 1983              	 	Run time routine compiled by _". 
 1984              		Return address of a compiled string.
 1985              	hidden word used by compiler
 1986              	*****************************************/
 1987              	STRQP:
 1988 31a8 504700BF 		_NEST
 1989 31ac 7D310000 		_ADR	DOSTR
 1990 31b0 A7200000 		_UNNEST			// force a call to dostr
 1991              	
 1992              	/*******************************
 1993              	    .$	( a -- )
 1994              	 	Run time routine of ." 
 1995              		Output a compiled string.
 1996              	hidden word used by compiler
 1997              	*******************************/
 1998              	DOTST:
 1999 31b4 504700BF 		_NEST
 2000 31b8 55270000 		_ADR	COUNT // ( -- a+1 c )
 2001 31bc 29310000 		_ADR	TYPEE
ARM GAS  forth.s 			page 124


 2002 31c0 A7200000 		_UNNEST
 2003              	
 2004              	/**********************
 2005              	    ."|	( -- )
 2006              	 	Run time routine of ." 
 2007              		Output a compiled string.
 2008              	hidden word used by compiler
 2009              	*****************************/
 2010              	DOTQP:
 2011 31c4 504700BF 		_NEST
 2012 31c8 7D310000 		_ADR	DOSTR
 2013 31cc B5310000 		_ADR	DOTST
 2014 31d0 A7200000 		_UNNEST
 2015              	
 2016              	/******************************
 2017              	    .R	  ( n +n -- )
 2018              	 	Display an integer in a 
 2019              		field of n columns, 
 2020              		right justified.
 2021              	*******************************/
 2022 31d4 58310000 		_HEADER DOTR,2,".R"
 2022      022E5200 
 2023 31dc 504700BF 		_NEST
 2024 31e0 F9220000 		_ADR	TOR
 2025 31e4 5D2E0000 		_ADR	STRR
 2026 31e8 D1220000 		_ADR	RFROM
 2027 31ec 75230000 		_ADR	OVER
 2028 31f0 25240000 		_ADR	SUBB
 2029 31f4 F1300000 		_ADR	SPACS
 2030 31f8 29310000 		_ADR	TYPEE
 2031 31fc A7200000 		_UNNEST
 2032              	
 2033              	/*************************
 2034              	    U.R	 ( u +n -- )
 2035              	 	Display an unsigned 
 2036              		integer in n column, 
 2037              		right justified.
 2038              	***************************/
 2039 3200 D8310000 		_HEADER UDOTR,3,"U.R"
 2039      03552E52 
 2040 3208 504700BF 		_NEST
 2041 320c F9220000 		_ADR	TOR
 2042 3210 7D2D0000 		_ADR	BDIGS
 2043 3214 E92D0000 		_ADR	DIGS
 2044 3218 3D2E0000 		_ADR	EDIGS
 2045 321c D1220000 		_ADR	RFROM
 2046 3220 75230000 		_ADR	OVER
 2047 3224 25240000 		_ADR	SUBB
 2048 3228 F1300000 		_ADR	SPACS
 2049 322c 29310000 		_ADR	TYPEE
 2050 3230 A7200000 		_UNNEST
 2051              	
 2052              	/************************
 2053              	    U.	  ( u -- )
 2054              	 	Display an unsigned 
 2055              		integer in free format.
 2056              	***************************/
ARM GAS  forth.s 			page 125


 2057 3234 04320000 		_HEADER UDOT,2,"U."
 2057      02552E00 
 2058 323c 504700BF 		_NEST
 2059 3240 7D2D0000 		_ADR	BDIGS
 2060 3244 E92D0000 		_ADR	DIGS
 2061 3248 3D2E0000 		_ADR	EDIGS
 2062 324c D5300000 		_ADR	SPACE
 2063 3250 29310000 		_ADR	TYPEE
 2064 3254 A7200000 		_UNNEST
 2065              	
 2066              	/************************
 2067              	    .	   ( w -- )
 2068              	 	Display an integer 
 2069              		in free format, 
 2070              		preceeded by a space.
 2071              	**************************/
 2072 3258 38320000 		_HEADER DOT,1,"."
 2072      012E00BF 
 2073 3260 504700BF 		_NEST
 2074 3264 ED270000 		_ADR	BASE
 2075 3268 A5220000 		_ADR	AT
 2076 326c 1F220000 		_DOLIT 10
 2076      0A000000 
 2077 3274 BD230000 		_ADR	XORR			// ?decimal
 2078 3278 5F220000 		_QBRAN	DOT1
 2078      88320000 
 2079 3280 3D320000 		_ADR	UDOT
 2080 3284 A7200000 		_UNNEST			// no,display unsigned
 2081              	DOT1:
 2082 3288 5D2E0000 	    _ADR	STRR
 2083 328c D5300000 		_ADR	SPACE
 2084 3290 29310000 		_ADR	TYPEE
 2085 3294 A7200000 		_UNNEST			// yes, display signed
 2086              	
 2087              	/*************************
 2088              	   D. ( d -- )
 2089              	   display double integer 
 2090              	**************************
 2091              		_HEADER DDOT,2,"D."
 2092              		_NEST 
 2093              		_ADR OVER 
 2094              		_DOLIT (1<<31)
 2095              		_ADR ANDD 
 2096              		_ADR DUPP 
 2097              		_ADR TOR 
 2098              		_QBRAN 1f 
 2099              		_ADR DABS 
 2100              	1:	_ADR BDIGS
 2101              		
 2102              		_UNNEST 
 2103              	
 2104              	/***********************
 2105              		H. ( w -- )
 2106              		display integer 
 2107              		in hexadecimal 
 2108              	*********************/
 2109 3298 5C320000 		_HEADER HDOT,2,"H."
ARM GAS  forth.s 			page 126


 2109      02482E00 
 2110 32a0 504700BF 		_NEST 
 2111 32a4 ED270000 		_ADR BASE
 2112 32a8 A5220000 		_ADR AT 
 2113 32ac 61230000 		_ADR SWAP
 2114 32b0 8D2E0000 		_ADR HEX
 2115 32b4 3D320000 		_ADR UDOT 
 2116 32b8 ED270000 		_ADR BASE
 2117 32bc 91220000 		_ADR STORE  
 2118 32c0 A7200000 		_UNNEST 
 2119              	
 2120              	
 2121              	/***********************
 2122              	    ?	   ( a -- )
 2123              	 	Display the contents
 2124              		in a memory cell.
 2125              	*************************/
 2126 32c4 9C320000 		_HEADER QUEST,1,"?"
 2126      013F00BF 
 2127 32cc 504700BF 		_NEST
 2128 32d0 A5220000 		_ADR	AT
 2129 32d4 61320000 		_ADR	DOT
 2130 32d8 A7200000 		_UNNEST
 2131              	
 2132              	/**************
 2133              	  Parsing
 2134              	***************/
 2135              	
 2136              	/*********************************************
 2137              	    parse	( b u c -- b u delta //  string> )
 2138              	 	Scan word delimited by c. 
 2139              		Return found string and its offset.
 2140              	hidden word used by PARSE
 2141              	**********************************************/
 2142              	PARS:
 2143 32dc 504700BF 		_NEST
 2144 32e0 F7270000 		_ADR	TEMP
 2145 32e4 91220000 		_ADR	STORE
 2146 32e8 75230000 		_ADR	OVER
 2147 32ec F9220000 		_ADR	TOR
 2148 32f0 51230000 		_ADR	DUPP
 2149 32f4 5F220000 		_QBRAN	PARS8
 2149      F0330000 
 2150 32fc 81240000 		_ADR	ONEM
 2151 3300 F7270000 		_ADR	TEMP
 2152 3304 A5220000 		_ADR	AT
 2153 3308 D1240000 		_ADR	BLANK
 2154 330c 6D260000 		_ADR	EQUAL
 2155 3310 5F220000 		_QBRAN	PARS3
 2155      64330000 
 2156 3318 F9220000 		_ADR	TOR
 2157              	PARS1:
 2158 331c D1240000 		_ADR	BLANK
 2159 3320 75230000 		_ADR	OVER
 2160 3324 C5220000 		_ADR	CAT			// skip leading blanks 
 2161 3328 25240000 		_ADR	SUBB
 2162 332c 85230000 		_ADR	ZLESS
ARM GAS  forth.s 			page 127


 2163 3330 21260000 		_ADR	INVER
 2164 3334 5F220000 		_QBRAN	PARS2
 2164      60330000 
 2165 333c 71240000 		_ADR	ONEP
 2166 3340 41220000 		_DONXT	PARS1
 2166      1C330000 
 2167 3348 D1220000 		_ADR	RFROM
 2168 334c 41230000 		_ADR	DROP
 2169 3350 1F220000 		_DOLIT	0
 2169      00000000 
 2170 3358 51230000 		_ADR	DUPP
 2171 335c A7200000 		_UNNEST
 2172              	PARS2:
 2173 3360 D1220000 		_ADR	RFROM
 2174              	PARS3:
 2175 3364 75230000 		_ADR	OVER
 2176 3368 61230000 		_ADR	SWAP
 2177 336c F9220000 		_ADR	TOR
 2178              	PARS4:
 2179 3370 F7270000 		_ADR	TEMP
 2180 3374 A5220000 		_ADR	AT
 2181 3378 75230000 		_ADR	OVER
 2182 337c C5220000 		_ADR	CAT
 2183 3380 25240000 		_ADR	SUBB			// scan for delimiter
 2184 3384 F7270000 		_ADR	TEMP
 2185 3388 A5220000 		_ADR	AT
 2186 338c D1240000 		_ADR	BLANK
 2187 3390 6D260000 		_ADR	EQUAL
 2188 3394 5F220000 		_QBRAN	PARS5
 2188      A0330000 
 2189 339c 85230000 		_ADR	ZLESS
 2190              	PARS5:
 2191 33a0 5F220000 		_QBRAN	PARS6
 2191      C4330000 
 2192 33a8 71240000 		_ADR	ONEP
 2193 33ac 41220000 		_DONXT	PARS4
 2193      70330000 
 2194 33b4 51230000 		_ADR	DUPP
 2195 33b8 F9220000 		_ADR	TOR
 2196 33bc 73220000 		_BRAN	PARS7
 2196      D8330000 
 2197              	PARS6:
 2198 33c4 D1220000 		_ADR	RFROM
 2199 33c8 41230000 		_ADR	DROP
 2200 33cc 51230000 		_ADR	DUPP
 2201 33d0 71240000 		_ADR	ONEP
 2202 33d4 F9220000 		_ADR	TOR
 2203              	PARS7:
 2204 33d8 75230000 		_ADR	OVER
 2205 33dc 25240000 		_ADR	SUBB
 2206 33e0 D1220000 		_ADR	RFROM
 2207 33e4 D1220000 		_ADR	RFROM
 2208 33e8 25240000 		_ADR	SUBB
 2209 33ec A7200000 		_UNNEST
 2210              	PARS8:
 2211 33f0 75230000 		_ADR	OVER
 2212 33f4 D1220000 		_ADR	RFROM
ARM GAS  forth.s 			page 128


 2213 33f8 25240000 		_ADR	SUBB
 2214 33fc A7200000 		_UNNEST
 2215              	
 2216              	/************************************
 2217              	    PARSE	( c -- b u //  string> )
 2218              	 	Scan input stream and return 
 2219              		counted string delimited by c.
 2220              	************************************/
 2221 3400 C8320000 		_HEADER PARSE,5,"PARSE"
 2221      05504152 
 2221      534500BF 
 2222 340c 504700BF 		_NEST
 2223 3410 F9220000 		_ADR	TOR
 2224 3414 E12B0000 		_ADR	TIB
 2225 3418 21280000 		_ADR	INN
 2226 341c A5220000 		_ADR	AT
 2227 3420 15240000 		_ADR	PLUS			// current input buffer pointer
 2228 3424 35280000 		_ADR	NTIB
 2229 3428 A5220000 		_ADR	AT
 2230 342c 21280000 		_ADR	INN
 2231 3430 A5220000 		_ADR	AT
 2232 3434 25240000 		_ADR	SUBB			// remaining count
 2233 3438 D1220000 		_ADR	RFROM
 2234 343c DD320000 		_ADR	PARS
 2235 3440 21280000 		_ADR	INN
 2236 3444 0D270000 		_ADR	PSTOR
 2237 3448 A7200000 		_UNNEST
 2238              	
 2239              	/*******************************
 2240              	    .(	  ( -- )
 2241              	 	Output following string 
 2242              		up to next ) .
 2243              	******************************/
 2244 344c 04340000 		_HEADER DOTPR,2,".("
 2244      022E2800 
 2245 3454 504700BF 		_NEST
 2246 3458 1F220000 		_DOLIT	')'
 2246      29000000 
 2247 3460 0D340000 		_ADR	PARSE
 2248 3464 29310000 		_ADR	TYPEE
 2249 3468 A7200000 		_UNNEST
 2250              	
 2251              	/************************
 2252              	    (	   ( -- )
 2253              	 	Ignore following 
 2254              		string up to next )
 2255              		A comment.
 2256              	************************/
 2257 346c 50340000 		_HEADER PAREN,IMEDD+1,"("
 2257      812800BF 
 2258 3474 504700BF 		_NEST
 2259 3478 1F220000 		_DOLIT	')'
 2259      29000000 
 2260 3480 0D340000 		_ADR	PARSE
 2261 3484 61250000 		_ADR	DDROP
 2262 3488 A7200000 		_UNNEST
 2263              	
ARM GAS  forth.s 			page 129


 2264              	/*******************
 2265              	    \	   ( -- )
 2266              	 	Ignore following 
 2267              		text till the 
 2268              		end of line.
 2269              	********************/
 2270 348c 70340000 		_HEADER BKSLA,IMEDD+1,"\\"
 2270      815C00BF 
 2271 3494 504700BF 		_NEST
 2272 3498 35280000 		_ADR	NTIB
 2273 349c A5220000 		_ADR	AT
 2274 34a0 21280000 		_ADR	INN
 2275 34a4 91220000 		_ADR	STORE
 2276 34a8 A7200000 		_UNNEST
 2277              	
 2278              	/******************************
 2279              	    CHAR	( -- c )
 2280              	 	Parse next word and
 2281              		return its first character.
 2282              	*******************************/
 2283 34ac 90340000 		_HEADER CHAR,4,"CHAR"
 2283      04434841 
 2283      520000BF 
 2284 34b8 504700BF 		_NEST
 2285 34bc D1240000 		_ADR	BLANK
 2286 34c0 0D340000 		_ADR	PARSE
 2287 34c4 41230000 		_ADR	DROP
 2288 34c8 C5220000 		_ADR	CAT
 2289 34cc A7200000 		_UNNEST
 2290              	
 2291              	/**********************************
 2292              	    WORD	( c -- a //  string> )
 2293              	 	Parse a word from input stream
 2294              		and copy it to code dictionary.
 2295              	***********************************/
 2296 34d0 B0340000 		_HEADER WORDD,4,"WORD"
 2296      04574F52 
 2296      440000BF 
 2297 34dc 504700BF 		_NEST
 2298 34e0 0D340000 		_ADR	PARSE
 2299 34e4 A92B0000 		_ADR	HERE
 2300 34e8 B1240000 		_ADR	CELLP
 2301 34ec B12C0000 		_ADR	PACKS
 2302 34f0 A7200000 		_UNNEST
 2303              	
 2304              	/********************************
 2305              	    TOKEN	( -- a //  string> )
 2306              	 	Parse a word from input 
 2307              		stream and copy it to 
 2308              		name dictionary.
 2309              	*********************************/
 2310 34f4 D4340000 		_HEADER TOKEN,5,"TOKEN"
 2310      05544F4B 
 2310      454E00BF 
 2311 3500 504700BF 		_NEST
 2312 3504 D1240000 		_ADR	BLANK
 2313 3508 DD340000 		_ADR	WORDD
ARM GAS  forth.s 			page 130


 2314 350c E1360000 		_ADR	UPPER 
 2315 3510 A7200000 		_UNNEST
 2316              	
 2317              	/**********************
 2318              	  Dictionary search
 2319              	***********************/
 2320              	
 2321              	/*************************
 2322              	    NAME>	( na -- ca )
 2323              	 	Return a code address
 2324              		given a name address.
 2325              	**************************/
 2326 3514 F8340000 		_HEADER NAMET,5,"NAME>"
 2326      054E414D 
 2326      453E00BF 
 2327 3520 504700BF 		_NEST
 2328 3524 55270000 		_ADR	COUNT
 2329 3528 1F220000 		_DOLIT	0x1F
 2329      1F000000 
 2330 3530 95230000 		_ADR	ANDD
 2331 3534 15240000 		_ADR	PLUS
 2332 3538 F52A0000 		_ADR	ALGND
 2333 353c A7200000 		_UNNEST
 2334              	
 2335              	/***************************************
 2336              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2337              	 	Compare u bytes in two strings. 
 2338              		Return 0 if identical.
 2339              	
 2340              	  Picatout 2020-12-01, 
 2341              	    Because of problem with .align 
 2342              		directive that doesn't fill 
 2343              		with zero's I had to change 
 2344              		the "SAME?" and "FIND" 
 2345              	 	words  to do a byte by byte comparison. 
 2346              	****************************************/
 2347 3540 18350000 		_HEADER SAMEQ,5,"SAME?"
 2347      0553414D 
 2347      453F00BF 
 2348 354c 504700BF 		_NEST
 2349 3550 F9220000 		_ADR	TOR
 2350 3554 73220000 		_BRAN	SAME2
 2350      98350000 
 2351              	SAME1:
 2352 355c 75230000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2353 3560 E5220000 		_ADR	RAT   // a1 a2 a1 u 
 2354 3564 15240000 		_ADR	PLUS  // a1 a2 a1+u 
 2355 3568 C5220000 		_ADR	CAT	   // a1 a2 c1    		
 2356 356c 75230000 		_ADR	OVER  // a1 a2 c1 a2 
 2357 3570 E5220000 		_ADR	RAT    
 2358 3574 15240000 		_ADR	PLUS    
 2359 3578 C5220000 		_ADR	CAT	  // a1 a2 c1 c2
 2360 357c 25240000 		_ADR	SUBB  
 2361 3580 25250000 		_ADR	QDUP
 2362 3584 5F220000 		_QBRAN	SAME2
 2362      98350000 
 2363 358c D1220000 		_ADR	RFROM
ARM GAS  forth.s 			page 131


 2364 3590 41230000 		_ADR	DROP
 2365 3594 A7200000 		_UNNEST	// strings not equal
 2366              	SAME2:
 2367 3598 41220000 		_DONXT	SAME1
 2367      5C350000 
 2368 35a0 1F220000 		_DOLIT	0
 2368      00000000 
 2369 35a8 A7200000 		_UNNEST	// strings equal
 2370              	
 2371              	/***********************************
 2372              	    FIND	( a na -- ca na | a F )
 2373              	 	Search a vocabulary for a string.
 2374              		Return ca and na if succeeded.
 2375              	hidden word used by NAME?
 2376              	
 2377              	  Picatout 2020-12-01,  
 2378              		 Modified from original. 
 2379              	   See comment for word "SAME?" 
 2380              	************************************/
 2381              	FIND:
 2382 35ac 504700BF 		_NEST
 2383 35b0 61230000 		_ADR	SWAP			// na a	
 2384 35b4 55270000 		_ADR	COUNT			// na a+1 count
 2385 35b8 51230000 		_ADR	DUPP 
 2386 35bc F7270000 		_ADR	TEMP
 2387 35c0 91220000 		_ADR	STORE			// na a+1 count 
 2388 35c4 F9220000 		_ADR  TOR		// na a+1  R: count  
 2389 35c8 61230000 		_ADR	SWAP			// a+1 na
 2390              	FIND1:
 2391 35cc 51230000 		_ADR	DUPP			// a+1 na na
 2392 35d0 5F220000 		_QBRAN	FIND6	// end of vocabulary
 2392      24360000 
 2393 35d8 51230000 		_ADR	DUPP			// a+1 na na
 2394 35dc C5220000 		_ADR	CAT			// a+1 na name1
 2395 35e0 1F220000 		_DOLIT	MASKK
 2395      1FFFFFFF 
 2396 35e8 95230000 		_ADR	ANDD
 2397 35ec E5220000 		_ADR	RAT			// a+1 na name1 count 
 2398 35f0 BD230000 		_ADR	XORR			// a+1 na,  same length?
 2399 35f4 5F220000 		_QBRAN	FIND2
 2399      0C360000 
 2400 35fc C1240000 		_ADR	CELLM			// a+1 la
 2401 3600 A5220000 		_ADR	AT			// a+1 next_na
 2402 3604 73220000 		_BRAN	FIND1			// try next word
 2402      CC350000 
 2403              	FIND2:   
 2404 360c 71240000 		_ADR	ONEP			// a+1 na+1
 2405 3610 F7270000 		_ADR	TEMP
 2406 3614 A5220000 		_ADR	AT			// a+1 na+1 count
 2407 3618 4D350000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2408              	FIND3:	
 2409 361c 73220000 		_BRAN	FIND4
 2409      3C360000 
 2410              	FIND6:	
 2411 3624 D1220000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2412 3628 41230000 		_ADR	DROP			// a+1 0
 2413 362c 61230000 		_ADR	SWAP			// 0 a+1
ARM GAS  forth.s 			page 132


 2414 3630 81240000 		_ADR	ONEM			// 0 a
 2415 3634 61230000 		_ADR	SWAP			// a 0 
 2416 3638 A7200000 		_UNNEST			// return without a match
 2417              	FIND4:	
 2418 363c 5F220000 		_QBRAN	FIND5			// a+1 na+1
 2418      58360000 
 2419 3644 81240000 		_ADR	ONEM			// a+1 na
 2420 3648 C1240000 		_ADR	CELLM			// a+4 la
 2421 364c A5220000 		_ADR	AT			// a+1 next_na
 2422 3650 73220000 		_BRAN	FIND1			// compare next name
 2422      CC350000 
 2423              	FIND5:	
 2424 3658 D1220000 		_ADR	RFROM			// a+1 na+1 count
 2425 365c 41230000 		_ADR	DROP			// a+1 na+1
 2426 3660 61230000 		_ADR	SWAP			// na+1 a+1
 2427 3664 41230000 		_ADR	DROP			// na+1
 2428 3668 81240000 		_ADR	ONEM			// na
 2429 366c 51230000 		_ADR	DUPP			// na na
 2430 3670 21350000 		_ADR	NAMET			// na ca
 2431 3674 61230000 		_ADR	SWAP			// ca na
 2432 3678 A7200000 		_UNNEST			//  return with a match
 2433              	
 2434              	/********************************
 2435              	    NAME?	( a -- ca na | a F )
 2436              	 	Search all context vocabularies 
 2437              		for a string.
 2438              	***********************************/
 2439 367c 44350000 		_HEADER NAMEQ,5,"NAME?"
 2439      054E414D 
 2439      453F00BF 
 2440 3688 504700BF 		_NEST
 2441 368c 75280000 		_ADR	CNTXT
 2442 3690 A5220000 		_ADR	AT
 2443 3694 AD350000 		_ADR	FIND
 2444 3698 A7200000 		_UNNEST
 2445              	
 2446              	/********************
 2447              	  console input
 2448              	********************/
 2449              	
 2450              	/****************************
 2451              		ASCIZ ( a -- a+ )
 2452              		convert counted string to 
 2453              		null terminated string 
 2454              		in pad.
 2455              	*****************************/
 2456 369c 80360000 		_HEADER ASCIZ,5,"ASCIZ" 
 2456      05415343 
 2456      495A00BF 
 2457 36a8 504700BF 		_NEST 
 2458 36ac 55270000 		_ADR COUNT 
 2459 36b0 F9220000 		_ADR TOR 
 2460 36b4 51230000 		_ADR DUPP 
 2461 36b8 D1220000 		_ADR RFROM
 2462 36bc 15240000 		_ADR PLUS 
 2463 36c0 1F220000 		_DOLIT 0 
 2463      00000000 
ARM GAS  forth.s 			page 133


 2464 36c8 61230000 		_ADR SWAP 
 2465 36cc B1220000 		_ADR CSTOR  
 2466 36d0 FEF7E6BC 		_NEXT 
 2467              	
 2468              	/***********************
 2469              		UPPER (cstring -- cstring )
 2470              		convert to upper case in situ
 2471              	*******************************/
 2472 36d4 A0360000 		_HEADER UPPER,5,"UPPER"
 2472      05555050 
 2472      455200BF 
 2473 36e0 504700BF 		_NEST 
 2474 36e4 51230000 		_ADR DUPP 
 2475 36e8 F9220000 		_ADR TOR 
 2476 36ec 55270000 		_ADR COUNT
 2477 36f0 1F220000 		_DOLIT 0x1f
 2477      1F000000 
 2478 36f8 95230000 		_ADR ANDD
 2479 36fc F9220000 		_ADR TOR 
 2480 3700 73220000 		_BRAN 3f
 2480      54370000 
 2481 3708 51230000 	1:  _ADR DUPP 
 2482 370c 55270000 		_ADR COUNT 
 2483 3710 51230000 		_ADR DUPP 
 2484 3714 1F220000 		_DOLIT 'a'-1
 2484      60000000 
 2485 371c CD260000 		_ADR GREAT
 2486 3720 5F220000 		_QBRAN 2f 
 2486      4C370000 
 2487 3728 51230000 		_ADR DUPP 
 2488 372c 1F220000 		_DOLIT 'z'+1 
 2488      7B000000 
 2489 3734 9D260000 		_ADR LESS 
 2490 3738 5F220000 		_QBRAN 2f 
 2490      4C370000 
 2491 3740 1F220000 		_DOLIT 0x5f  
 2491      5F000000 
 2492 3748 95230000 		_ADR ANDD
 2493 374c 39250000 	2:	_ADR ROT
 2494 3750 B1220000 		_ADR CSTOR
 2495 3754 41220000 	3:  _DONXT 1b
 2495      08370000 
 2496 375c 41230000 		_ADR DROP 
 2497 3760 D1220000 		_ADR RFROM
 2498 3764 A7200000 		_UNNEST 
 2499              	
 2500              	/**************************************
 2501              	   BKSP  ( bot eot cur -- bot eot cur )
 2502              	   Move cursor left by one character.
 2503              	hidden word used by KTAP
 2504              	***************************************/
 2505              	BKSP:
 2506 3768 504700BF 		_NEST
 2507 376c F9220000 		_ADR	TOR
 2508 3770 75230000 		_ADR	OVER
 2509 3774 D1220000 		_ADR	RFROM
 2510 3778 61230000 		_ADR	SWAP
ARM GAS  forth.s 			page 134


 2511 377c 75230000 		_ADR	OVER
 2512 3780 BD230000 		_ADR	XORR
 2513 3784 5F220000 		_QBRAN	BACK1
 2513      B0370000 
 2514 378c 1F220000 		_DOLIT	BKSPP
 2514      08000000 
 2515 3794 29210000 		_ADR	EMIT
 2516 3798 81240000 		_ADR	ONEM
 2517 379c D1240000 		_ADR	BLANK
 2518 37a0 29210000 		_ADR	EMIT
 2519 37a4 1F220000 		_DOLIT	BKSPP
 2519      08000000 
 2520 37ac 29210000 		_ADR	EMIT
 2521              	BACK1:
 2522 37b0 A7200000 		  _UNNEST
 2523              	
 2524              	/****************************************
 2525              	   TAP	 ( bot eot cur c -- bot eot cur )
 2526              	   Accept and echo the key stroke 
 2527              	   and bump the cursor.
 2528              	hidden word used by KTAP 
 2529              	****************************************/
 2530              	TAP:
 2531 37b4 504700BF 		_NEST
 2532 37b8 51230000 		_ADR	DUPP
 2533 37bc 29210000 		_ADR	EMIT
 2534 37c0 75230000 		_ADR	OVER
 2535 37c4 B1220000 		_ADR	CSTOR
 2536 37c8 71240000 		_ADR	ONEP
 2537 37cc A7200000 		_UNNEST
 2538              	
 2539              	
 2540              	/*******************************************
 2541              	    kTAP	( bot eot cur c -- bot eot cur )
 2542              	 	Process a key stroke, CR or backspace.
 2543              	hidden word used by ACCEPT 
 2544              	*******************************************/
 2545              	KTAP:
 2546              	TTAP:
 2547 37d0 504700BF 		_NEST
 2548 37d4 51230000 		_ADR	DUPP
 2549 37d8 1F220000 		_DOLIT	CRR
 2549      0D000000 
 2550 37e0 BD230000 		_ADR	XORR
 2551 37e4 5F220000 		_QBRAN  KTAP2
 2551      14380000 
 2552 37ec 1F220000 		_DOLIT	BKSPP
 2552      08000000 
 2553 37f4 BD230000 		_ADR	XORR
 2554 37f8 5F220000 		_QBRAN	KTAP1
 2554      0C380000 
 2555 3800 D1240000 		_ADR	BLANK
 2556 3804 B5370000 		_ADR	TAP
 2557 3808 A7200000 		_UNNEST
 2558              	//	.word	0			// patch
 2559              	KTAP1:
 2560 380c 69370000 		_ADR	BKSP
ARM GAS  forth.s 			page 135


 2561 3810 A7200000 		_UNNEST
 2562              	KTAP2:
 2563 3814 41230000 		_ADR	DROP
 2564 3818 61230000 		_ADR	SWAP
 2565 381c 41230000 		_ADR	DROP
 2566 3820 51230000 		_ADR	DUPP
 2567 3824 A7200000 		_UNNEST
 2568              	
 2569              	/************************************
 2570              	    ACCEPT	( b u -- b u )
 2571              	 	Accept characters to input 
 2572              		buffer. Return with actual count.
 2573              	*************************************/
 2574 3828 D8360000 		_HEADER ACCEP,6,"ACCEPT"
 2574      06414343 
 2574      45505400 
 2575 3834 504700BF 		_NEST
 2576 3838 75230000 		_ADR	OVER
 2577 383c 15240000 		_ADR	PLUS
 2578 3840 75230000 		_ADR	OVER
 2579              	ACCP1:
 2580 3844 89250000 		_ADR	DDUP
 2581 3848 BD230000 		_ADR	XORR
 2582 384c 5F220000 		_QBRAN	ACCP4
 2582      8C380000 
 2583 3854 05210000 		_ADR	KEY
 2584 3858 51230000 		_ADR	DUPP
 2585 385c D1240000 		_ADR	BLANK
 2586 3860 1F220000 		_DOLIT 127
 2586      7F000000 
 2587 3868 0D290000 		_ADR	WITHI
 2588 386c 5F220000 		_QBRAN	ACCP2
 2588      80380000 
 2589 3874 B5370000 		_ADR	TAP
 2590 3878 73220000 		_BRAN	ACCP3
 2590      84380000 
 2591              	ACCP2:
 2592 3880 D1370000 		_ADR	KTAP
 2593              	ACCP3:	  
 2594 3884 73220000 		_BRAN	ACCP1
 2594      44380000 
 2595              	ACCP4:
 2596 388c 41230000 		_ADR	DROP
 2597 3890 75230000 		_ADR	OVER
 2598 3894 25240000 		_ADR	SUBB
 2599 3898 A7200000 		_UNNEST
 2600              	
 2601              	/*****************************
 2602              	    QUERY	( -- )
 2603              	 	Accept input stream 
 2604              		to terminal input buffer.
 2605              	******************************/
 2606 389c 2C380000 		_HEADER QUERY,5,"QUERY"
 2606      05515545 
 2606      525900BF 
 2607 38a8 504700BF 		_NEST
 2608 38ac E12B0000 		_ADR	TIB
ARM GAS  forth.s 			page 136


 2609 38b0 1F220000 		_DOLIT 80
 2609      50000000 
 2610 38b8 35380000 		_ADR	ACCEP
 2611 38bc 35280000 		_ADR	NTIB
 2612 38c0 91220000 		_ADR	STORE
 2613 38c4 41230000 		_ADR	DROP
 2614 38c8 1F220000 		_DOLIT	0
 2614      00000000 
 2615 38d0 21280000 		_ADR	INN
 2616 38d4 91220000 		_ADR	STORE
 2617 38d8 A7200000 		_UNNEST
 2618              	
 2619              	/********************
 2620              	  Error handling
 2621              	********************/
 2622              	
 2623              	/*********************
 2624              	    ABORT	( a -- )
 2625              	 	Reset data stack 
 2626              		and jump to QUIT.
 2627              	**********************/
 2628 38dc A0380000 		_HEADER ABORT,5,"ABORT"
 2628      0541424F 
 2628      525400BF 
 2629 38e8 504700BF 		_NEST
 2630              	ABORT1:
 2631 38ec D5300000 		_ADR	SPACE
 2632 38f0 55270000 		_ADR	COUNT
 2633 38f4 29310000 		_ADR	TYPEE
 2634 38f8 1F220000 		_DOLIT	0X3F
 2634      3F000000 
 2635 3900 29210000 		_ADR	EMIT
 2636 3904 5D310000 		_ADR	CR
 2637 3908 713A0000 		_ADR	PRESE
 2638 390c 73220000 		_BRAN	QUIT
 2638      903A0000 
 2639              	
 2640              	/*******************************
 2641              	    _abort"	( f -- )
 2642              	 	Run time routine of ABORT"
 2643              		Abort with a message.
 2644              	hidden used by compiler 
 2645              	********************************/
 2646              	ABORQ:
 2647 3914 504700BF 		_NEST
 2648 3918 7D310000 		_ADR	DOSTR
 2649 391c 61230000 		_ADR	SWAP 
 2650 3920 5F220000 		_QBRAN	1f	// text flag
 2650      30390000 
 2651 3928 73220000 		_BRAN	ABORT1
 2651      EC380000 
 2652              	1:
 2653 3930 41230000 		_ADR	DROP
 2654 3934 A7200000 		_UNNEST			// drop error
 2655              	
 2656              	/************************
 2657              	  The text interpreter
ARM GAS  forth.s 			page 137


 2658              	************************/
 2659              	
 2660              	/***************************
 2661              	    $INTERPRET  ( a -- )
 2662              	 	Interpret a word. 
 2663              		If failed, try to 
 2664              		convert it to an integer.
 2665              	******************************/
 2666 3938 E0380000 		_HEADER INTER,10,"$INTERPRET"
 2666      0A24494E 
 2666      54455250 
 2666      52455400 
 2667 3948 504700BF 		_NEST
 2668 394c 89360000 		_ADR	NAMEQ
 2669 3950 25250000 		_ADR	QDUP	// ?defined
 2670 3954 5F220000 		_QBRAN	INTE1
 2670      88390000 
 2671 395c A5220000 		_ADR	AT
 2672 3960 1F220000 		_DOLIT	COMPO
 2672      40000000 
 2673 3968 95230000 		_ADR	ANDD	// ?compile only lexicon bits
 2674 396c 15390000 		_ABORQ	13," compile only"
 2674      0D20636F 
 2674      6D70696C 
 2674      65206F6E 
 2674      6C7900BF 
 2675 3980 35220000 		_ADR	EXECU
 2676 3984 A7200000 		_UNNEST			// execute defined word
 2677              	INTE1:
 2678 3988 79200000 		_ADR	NUMBER 
 2679 398c 5F220000 		_QBRAN	INTE2
 2679      98390000 
 2680 3994 A7200000 		_UNNEST
 2681              	INTE2:
 2682 3998 E9380000 		_ADR	ABORT	// error
 2683              	
 2684              	/******************************
 2685              	    [	   ( -- )
 2686              	 	Start the text interpreter.
 2687              	*******************************/
 2688 399c 3C390000 		_HEADER LBRAC,IMEDD+1,"["
 2688      815B00BF 
 2689 39a4 504700BF 		_NEST
 2690 39a8 1F220000 		_DOLIT	INTER
 2690      48390000 
 2691 39b0 49280000 		_ADR	TEVAL
 2692 39b4 91220000 		_ADR	STORE
 2693 39b8 A7200000 		_UNNEST
 2694              	
 2695              	/**********************
 2696              	    .OK	 ( -- )
 2697              	 	Display "ok" only 
 2698              		while interpreting.
 2699              	************************/
 2700 39bc A0390000 		_HEADER DOTOK,3,".OK"
 2700      032E4F4B 
 2701 39c4 504700BF 		_NEST
ARM GAS  forth.s 			page 138


 2702 39c8 1F220000 		_DOLIT	INTER
 2702      48390000 
 2703 39d0 49280000 		_ADR	TEVAL
 2704 39d4 A5220000 		_ADR	AT
 2705 39d8 6D260000 		_ADR	EQUAL
 2706 39dc 5F220000 		_QBRAN	DOTO1
 2706      EC390000 
 2707 39e4 C5310000 		_DOTQP	3," ok"
 2707      03206F6B 
 2708              	DOTO1:
 2709 39ec 5D310000 		_ADR	CR
 2710 39f0 A7200000 		_UNNEST
 2711              	
 2712              	/*************************
 2713              	    ?STACK	( -- )
 2714              	 	Abort if the data 
 2715              		stack underflows.
 2716              	************************/
 2717 39f4 C0390000 		_HEADER QSTAC,6,"?STACK"
 2717      063F5354 
 2717      41434B00 
 2718 3a00 504700BF 		_NEST
 2719 3a04 5D2B0000 		_ADR	DEPTH
 2720 3a08 85230000 		_ADR	ZLESS	// check only for underflow
 2721 3a0c 15390000 		_ABORQ	9,"underflow"
 2721      09756E64 
 2721      6572666C 
 2721      6F7700BF 
 2722 3a1c A7200000 		_UNNEST
 2723              	
 2724              	/*******************
 2725              	    EVAL	( -- )
 2726              	 	Interpret the 
 2727              		input stream.
 2728              	*******************/
 2729 3a20 F8390000 		_HEADER EVAL,4,"EVAL"
 2729      04455641 
 2729      4C0000BF 
 2730 3a2c 504700BF 		_NEST
 2731              	EVAL1:
 2732 3a30 01350000 	    _ADR	TOKEN
 2733 3a34 51230000 		_ADR	DUPP
 2734 3a38 C5220000 		_ADR	CAT	// ?input stream empty
 2735 3a3c 5F220000 		_QBRAN	EVAL2
 2735      583A0000 
 2736 3a44 49280000 		_ADR	TEVAL
 2737 3a48 F92B0000 		_ADR	ATEXE
 2738 3a4c 013A0000 		_ADR	QSTAC	// evaluate input, check stack
 2739 3a50 73220000 		_BRAN	EVAL1
 2739      303A0000 
 2740              	EVAL2:
 2741 3a58 41230000 		_ADR	DROP
 2742 3a5c C5390000 		_ADR	DOTOK
 2743 3a60 A7200000 		_UNNEST	// prompt
 2744              	
 2745              	/**********************************
 2746              	    PRESET	( -- )
ARM GAS  forth.s 			page 139


 2747              	 	Reset data stack pointer 
 2748              		and the terminal input buffer.
 2749              	**********************************/
 2750 3a64 243A0000 		_HEADER PRESE,6,"PRESET"
 2750      06505245 
 2750      53455400 
 2751 3a70 504700BF 		_NEST 
 2752 3a74 1F220000 		_DOLIT SPP 
 2752      00FF0120 
 2753 3a7c 1D230000 		_ADR SPSTOR 
 2754 3a80 A7200000 		_UNNEST 
 2755              	
 2756              	/*********************
 2757              	    QUIT	( -- )
 2758              	 	Reset return stack 
 2759              		pointer and start 
 2760              		text interpreter.
 2761              	***********************/
 2762 3a84 683A0000 		_HEADER QUIT,4,"QUIT"
 2762      04515549 
 2762      540000BF 
 2763 3a90 1F220000 		_DOLIT RPP 
 2763      80FF0120 
 2764 3a98 0D230000 		_ADR RPSTOR 
 2765              	QUIT1:
 2766 3a9c A5390000 		_ADR	LBRAC			// start interpretation
 2767              	QUIT2:
 2768 3aa0 A9380000 		_ADR	QUERY			// get input
 2769 3aa4 2D3A0000 		_ADR	EVAL
 2770 3aa8 73220000 		_BRAN	QUIT2	// continue till error
 2770      A03A0000 
 2771              	
 2772              	/***************************
 2773              		FORGET ( <string> -- )
 2774              		forget all definition 
 2775              		starting at <string>
 2776              	****************************/
 2777 3ab0 883A0000 		_HEADER FORGET,6,"FORGET"
 2777      06464F52 
 2777      47455400 
 2778 3abc 504700BF 		_NEST 
 2779 3ac0 01350000 		_ADR TOKEN 
 2780 3ac4 51230000 		_ADR DUPP 
 2781 3ac8 5F220000 		_QBRAN 9f 
 2781      043B0000 
 2782 3ad0 89360000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2783 3ad4 25250000 		_ADR QDUP 
 2784 3ad8 5F220000 		_QBRAN 8f
 2784      003B0000 
 2785 3ae0 C1240000 		_ADR CELLM // ( ca la )
 2786 3ae4 51230000 		_ADR DUPP 
 2787 3ae8 89280000 		_ADR CPP   
 2788 3aec 91220000 		_ADR STORE
 2789 3af0 A5220000 		_ADR AT 
 2790 3af4 B5280000 		_ADR LAST 
 2791 3af8 91220000 		_ADR STORE
 2792 3afc 59400000 		_ADR OVERT 
ARM GAS  forth.s 			page 140


 2793 3b00 41230000 	8:  _ADR DROP 
 2794 3b04 A7200000 	9:	_UNNEST 
 2795              	
 2796              		.p2align 2 
 2797              	
 2798              	/*****************
 2799              	  The compiler
 2800              	******************/
 2801              	
 2802              	/**************************************
 2803              	    '	   ( -- ca )
 2804              	 	Search context vocabularies 
 2805              		for the next word in input stream.
 2806              	***************************************/
 2807 3b08 B43A0000 		_HEADER TICK,1,"'"
 2807      012700BF 
 2808 3b10 504700BF 		_NEST
 2809 3b14 01350000 		_ADR	TOKEN
 2810 3b18 89360000 		_ADR	NAMEQ	// ?defined
 2811 3b1c 5F220000 		_QBRAN	TICK1
 2811      283B0000 
 2812 3b24 A7200000 		_UNNEST	// yes, push code address
 2813              	TICK1:	
 2814 3b28 E9380000 		_ADR ABORT	// no, error
 2815              	
 2816              	/***********************
 2817              	    ALLOT	( n -- )
 2818              	 	Allocate n bytes to 
 2819              		the ram area.
 2820              	************************/
 2821 3b2c 0C3B0000 		_HEADER ALLOT,5,"ALLOT"
 2821      05414C4C 
 2821      4F5400BF 
 2822 3b38 504700BF 		_NEST
 2823 3b3c 89280000 		_ADR	CPP
 2824 3b40 0D270000 		_ADR	PSTOR
 2825 3b44 A7200000 		_UNNEST			// adjust code pointer
 2826              	
 2827              	/******************************
 2828              	    ,	   ( w -- )
 2829              	 	Compile an integer 
 2830              		into the code dictionary.
 2831              	******************************/
 2832 3b48 303B0000 		_HEADER COMMA,1,","
 2832      012C00BF 
 2833 3b50 504700BF 		_NEST
 2834 3b54 A92B0000 		_ADR	HERE
 2835 3b58 51230000 		_ADR	DUPP
 2836 3b5c B1240000 		_ADR	CELLP	// cell boundary
 2837 3b60 89280000 		_ADR	CPP
 2838 3b64 91220000 		_ADR	STORE
 2839 3b68 91220000 		_ADR	STORE
 2840 3b6c A7200000 		_UNNEST	// adjust code pointer, compile
 2841              		.p2align 2 
 2842              	
 2843              	/************************************
 2844              	    [COMPILE]   ( -- //  string> )
ARM GAS  forth.s 			page 141


 2845              	 	Compile the next immediate word 
 2846              		into code dictionary.
 2847              	*************************************/
 2848 3b70 4C3B0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2848      895B434F 
 2848      4D50494C 
 2848      455D00BF 
 2849 3b80 504700BF 		_NEST
 2850 3b84 113B0000 		_ADR	TICK
 2851 3b88 513B0000 		_ADR	COMMA
 2852 3b8c A7200000 		_UNNEST
 2853              	
 2854              	/****************************
 2855              	    COMPILE	( -- )
 2856              	 	Compile the next address 
 2857              		in colon list to code 
 2858              		dictionary.
 2859              	*******************************/
 2860 3b90 743B0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2860      47434F4D 
 2860      50494C45 
 2861 3b9c 504700BF 		_NEST
 2862 3ba0 D1220000 		_ADR	RFROM
 2863 3ba4 51230000 		_ADR	DUPP 
 2864 3ba8 A5220000 		_ADR	AT
 2865 3bac 1F220000 		_DOLIT 1 
 2865      01000000 
 2866 3bb4 A9230000 		_ADR	ORR 
 2867 3bb8 513B0000 		_ADR	COMMA 
 2868 3bbc B1240000 		_ADR	CELLP 
 2869 3bc0 F9220000 		_ADR	TOR 
 2870 3bc4 A7200000 		_UNNEST	// adjust return address
 2871              	
 2872              	/*************************
 2873              	    LITERAL	( w -- )
 2874              	 	Compile tos to code 
 2875              		dictionary as an 
 2876              		integer literal.
 2877              	***************************/
 2878 3bc8 943B0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2878      874C4954 
 2878      4552414C 
 2879 3bd4 504700BF 		_NEST
 2880 3bd8 1F220000 		_COMPI	DOLIT
 2880      1E220000 
 2880      B5400000 
 2881 3be4 513B0000 		_ADR	COMMA
 2882 3be8 A7200000 		_UNNEST
 2883              	
 2884              	/********************
 2885              	    $,"	( -- )
 2886              	 	Compile a literal 
 2887              		string up to next " .
 2888              	hidden word 
 2889              	************************/
 2890              	STRCQ:
 2891 3bec 504700BF 		_NEST
ARM GAS  forth.s 			page 142


 2892 3bf0 1F220000 		_DOLIT -4
 2892      FCFFFFFF 
 2893 3bf8 89280000 		_ADR	CPP
 2894 3bfc 0D270000 		_ADR	PSTOR
 2895 3c00 1F220000 		_DOLIT	'\"'
 2895      22000000 
 2896 3c08 DD340000 		_ADR	WORDD			// move word to code dictionary
 2897 3c0c 55270000 		_ADR	COUNT
 2898 3c10 15240000 		_ADR	PLUS
 2899 3c14 F52A0000 		_ADR	ALGND			// calculate aligned end of string
 2900 3c18 89280000 		_ADR	CPP
 2901 3c1c 91220000 		_ADR	STORE
 2902 3c20 A7200000 		_UNNEST 			// adjust the code pointer
 2903              	
 2904              	/*******************
 2905              	   Structures
 2906              	*******************/
 2907              	
 2908              	/*************************
 2909              	    FOR	 ( -- a )
 2910              	 	Start a FOR-NEXT loop 
 2911              		structure in a colon 
 2912              		definition.
 2913              	**************************/
 2914 3c24 CC3B0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2914      C3464F52 
 2915 3c2c 504700BF 		_NEST
 2916 3c30 1F220000 		_COMPI	TOR
 2916      F8220000 
 2916      B5400000 
 2917 3c3c A92B0000 		_ADR	HERE
 2918 3c40 A7200000 		_UNNEST
 2919              	
 2920              	/********************************
 2921              		DO ( limit start -- )
 2922              		initialise a DO...LOOP 
 2923              		or DO...+LOOP 
 2924              	********************************/
 2925 3c44 283C0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 2925      C2444F00 
 2926 3c4c 504700BF 		_NEST
 2927 3c50 1F220000 		_COMPI SWAP
 2927      60230000 
 2927      B5400000 
 2928 3c5c 1F220000 		_COMPI TOR 
 2928      F8220000 
 2928      B5400000 
 2929 3c68 1F220000 		_COMPI TOR 
 2929      F8220000 
 2929      B5400000 
 2930 3c74 A92B0000 		_ADR HERE 
 2931 3c78 A7200000 		_UNNEST 
 2932              	
 2933              	DOPLOOP: // ( n -- R: counter limit )
 2934 3c7c B8E80300 		ldmfd RSP!,{T0,T1}
 2935 3c80 3044     		add T0,TOS 
 2936 3c82 28E90300 		stmfd RSP!,{T0,T1}
ARM GAS  forth.s 			page 143


 2937 3c86 8842     		cmp T0,T1 
 2938 3c88 05D4     		bmi 9f 
 2939 3c8a 08F10808 		add RSP,#8
 2940 3c8e 0CF1040C 		add IP,#4
 2941 3c92 FEF705BA 		_NEXT 
 2942 3c96 DCF800C0 	9:  ldr IP,[IP]
 2943 3c9a FEF701BA 		_NEXT 
 2944              		
 2945              	/***************************
 2946              		+LOOP ( a -- )
 2947              		increment counter 
 2948              		end loop if countr>limit
 2949              	****************************/
 2950 3c9e 483C0000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 2950      C52B4C4F 
 2950      4F50
 2951 3ca8 504700BF 		_NEST 
 2952 3cac 1F220000 		_COMPI DOPLOOP 
 2952      7C3C0000 
 2952      B5400000 
 2953 3cb8 513B0000 		_ADR COMMA
 2954 3cbc A7200000 		_UNNEST 
 2955              	
 2956              	DOLOOP: // ( -- R: counter limit )
 2957 3cc0 D8F80000 		ldr T0,[RSP]
 2958 3cc4 00F10100 		add T0,#1
 2959 3cc8 C8F80000 		str T0,[RSP]
 2960 3ccc D8F80410 		ldr T1,[RSP,#4]
 2961 3cd0 8842     		cmp T0,T1 
 2962 3cd2 05D4     		bmi 9f
 2963 3cd4 08F10808 		add RSP,#8  // counter and limit  
 2964 3cd8 0CF1040C 		add IP,IP,#4 // skip loop address 
 2965 3cdc FEF7E0B9 		_NEXT 
 2966 3ce0 DCF800C0 	9:  ldr IP,[IP]
 2967 3ce4 FEF7DCB9 		_NEXT 
 2968              	
 2969              	
 2970              	/********************************
 2971              		LOOP ( a -- )
 2972              		increment counter 
 2973              		end loop if >= limit 
 2974              	*********************************/
 2975 3ce8 A23C0000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 2975      C44C4F4F 
 2975      500000BF 
 2976 3cf4 504700BF 		_NEST 
 2977 3cf8 1F220000 		_COMPI DOLOOP
 2977      C03C0000 
 2977      B5400000 
 2978 3d04 513B0000 		_ADR COMMA 
 2979 3d08 A7200000 		_UNNEST 
 2980              	
 2981              	
 2982              	/**********************
 2983              	    BEGIN	( -- a )
 2984              	 	Start an infinite 
 2985              		or indefinite 
ARM GAS  forth.s 			page 144


 2986              		loop structure.
 2987              	************************/
 2988 3d0c EC3C0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2988      C5424547 
 2988      494E00BF 
 2989 3d18 504700BF 		_NEST
 2990 3d1c A92B0000 		_ADR	HERE
 2991 3d20 A7200000 		_UNNEST
 2992              		.p2align 2 
 2993              	
 2994              	/********************
 2995              	    NEXT	( a -- )
 2996              	 	Terminate a FOR-NEXT
 2997              		loop structure.
 2998              	**************************/
 2999 3d24 103D0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2999      C44E4558 
 2999      540000BF 
 3000 3d30 504700BF 		_NEST
 3001 3d34 1F220000 		_COMPI	DONXT
 3001      40220000 
 3001      B5400000 
 3002 3d40 513B0000 		_ADR	COMMA
 3003 3d44 A7200000 		_UNNEST
 3004              	
 3005              	/***************************
 3006              		I ( -- n )
 3007              		stack for loop counter 
 3008              	***************************/
 3009 3d48 283D0000 		_HEADER I,1+COMPO,"I"
 3009      414900BF 
 3010 3d50 47F8046D 		_PUSH 
 3011 3d54 D8F80060 		ldr TOS,[RSP]
 3012 3d58 FEF7A2B9 		_NEXT 
 3013              	
 3014              	/****************************
 3015              		J ( -- n )
 3016              		stack outer loop counter 
 3017              	****************************/
 3018 3d5c 4C3D0000 		_HEADER J,1,"J"
 3018      014A00BF 
 3019 3d64 47F8046D 		_PUSH 
 3020 3d68 D8F80460 		ldr TOS,[RSP,#4]
 3021 3d6c FEF798B9 		_NEXT 
 3022              	
 3023              	/**********************
 3024              	    UNTIL	( a -- )
 3025              	 	Terminate a BEGIN-UNTIL
 3026              		indefinite loop structure.
 3027              	******************************/
 3028 3d70 603D0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3028      C5554E54 
 3028      494C00BF 
 3029 3d7c 504700BF 		_NEST
 3030 3d80 1F220000 		_COMPI	QBRAN
 3030      5E220000 
 3030      B5400000 
ARM GAS  forth.s 			page 145


 3031 3d8c 513B0000 		_ADR	COMMA
 3032 3d90 A7200000 		_UNNEST
 3033              	
 3034              	/**********************
 3035              	    AGAIN	( a -- )
 3036              	 	Terminate a BEGIN-AGAIN
 3037              		infinite loop structure.
 3038              	*****************************/
 3039 3d94 743D0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3039      C5414741 
 3039      494E00BF 
 3040 3da0 504700BF 		_NEST
 3041 3da4 1F220000 		_COMPI	BRAN
 3041      72220000 
 3041      B5400000 
 3042 3db0 513B0000 		_ADR	COMMA
 3043 3db4 A7200000 		_UNNEST
 3044              	
 3045              	/************************
 3046              	    IF	  ( -- A )
 3047              	 	Begin a conditional
 3048              		branch structure.
 3049              	**************************/
 3050 3db8 983D0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3050      C2494600 
 3051 3dc0 504700BF 		_NEST
 3052 3dc4 1F220000 		_COMPI	QBRAN
 3052      5E220000 
 3052      B5400000 
 3053 3dd0 A92B0000 		_ADR	HERE
 3054 3dd4 1F220000 		_DOLIT	4
 3054      04000000 
 3055 3ddc 89280000 		_ADR	CPP
 3056 3de0 0D270000 		_ADR	PSTOR
 3057 3de4 A7200000 		_UNNEST
 3058              	
 3059              	/*************************
 3060              	    AHEAD	( -- A )
 3061              	 	Compile a forward 
 3062              		branch instruction.
 3063              	*************************/
 3064 3de8 BC3D0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3064      C5414845 
 3064      414400BF 
 3065 3df4 504700BF 		_NEST
 3066 3df8 1F220000 		_COMPI	BRAN
 3066      72220000 
 3066      B5400000 
 3067 3e04 A92B0000 		_ADR	HERE
 3068 3e08 1F220000 		_DOLIT	4
 3068      04000000 
 3069 3e10 89280000 		_ADR	CPP
 3070 3e14 0D270000 		_ADR	PSTOR
 3071 3e18 A7200000 		_UNNEST
 3072              	
 3073              	/**************************
 3074              	    REPEAT	( A a -- )
ARM GAS  forth.s 			page 146


 3075              	 	Terminate a BEGIN-WHILE-REPEAT
 3076              		indefinite loop.
 3077              	**********************************/
 3078 3e1c EC3D0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3078      C6524550 
 3078      45415400 
 3079 3e28 504700BF 		_NEST
 3080 3e2c A13D0000 		_ADR	AGAIN
 3081 3e30 A92B0000 		_ADR	HERE
 3082 3e34 61230000 		_ADR	SWAP
 3083 3e38 91220000 		_ADR	STORE
 3084 3e3c A7200000 		_UNNEST
 3085              	
 3086              	/*********************
 3087              	    THEN	( A -- )
 3088              	 	Terminate a conditional
 3089              		branch structure.
 3090              	*****************************/
 3091 3e40 203E0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3091      C4544845 
 3091      4E0000BF 
 3092 3e4c 504700BF 		_NEST
 3093 3e50 A92B0000 		_ADR	HERE
 3094 3e54 61230000 		_ADR	SWAP
 3095 3e58 91220000 		_ADR	STORE
 3096 3e5c A7200000 		_UNNEST
 3097              	
 3098              	/***************************
 3099              	    AFT	 ( a -- a A )
 3100              	 	Jump to THEN in a 
 3101              		FOR-AFT-THEN-NEXT loop 
 3102              		the first time through.
 3103              	*****************************/
 3104 3e60 443E0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3104      C3414654 
 3105 3e68 504700BF 		_NEST
 3106 3e6c 41230000 		_ADR	DROP
 3107 3e70 F53D0000 		_ADR	AHEAD
 3108 3e74 193D0000 		_ADR	BEGIN
 3109 3e78 61230000 		_ADR	SWAP
 3110 3e7c A7200000 		_UNNEST
 3111              	
 3112              	/**********************
 3113              	    ELSE	( A -- A )
 3114              	 	Start the false 
 3115              		clause in an 
 3116              		IF-ELSE-THEN structure.
 3117              	****************************/
 3118 3e80 643E0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3118      C4454C53 
 3118      450000BF 
 3119 3e8c 504700BF 		_NEST
 3120 3e90 F53D0000 		_ADR	AHEAD
 3121 3e94 61230000 		_ADR	SWAP
 3122 3e98 4D3E0000 		_ADR	THENN
 3123 3e9c A7200000 		_UNNEST
 3124              	
ARM GAS  forth.s 			page 147


 3125              	/**************************
 3126              	    WHILE	( a -- A a )
 3127              	 	Conditional branch out 
 3128              		of a BEGIN-WHILE-REPEAT loop.
 3129              	*********************************/
 3130 3ea0 843E0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3130      C5574849 
 3130      4C4500BF 
 3131 3eac 504700BF 		_NEST
 3132 3eb0 C13D0000 		_ADR	IFF
 3133 3eb4 61230000 		_ADR	SWAP
 3134 3eb8 A7200000 		_UNNEST
 3135              	
 3136              	/***********************************
 3137              	    ABORT"	( -- //  string> )
 3138              	 	Conditional abort with an 
 3139              		error message.
 3140              	***********************************/
 3141 3ebc A43E0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3141      8641424F 
 3141      52542200 
 3142 3ec8 504700BF 		_NEST
 3143 3ecc 1F220000 		_COMPI	ABORQ
 3143      14390000 
 3143      B5400000 
 3144 3ed8 ED3B0000 		_ADR	STRCQ
 3145 3edc A7200000 		_UNNEST
 3146              	
 3147              	/******************************
 3148              	    $"	( -- //  string> )
 3149              	 	Compile an inline 
 3150              		word literal.
 3151              	*****************************/
 3152 3ee0 C03E0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3152      C2242200 
 3153 3ee8 504700BF 		_NEST
 3154 3eec 1F220000 		_COMPI	STRQP
 3154      A8310000 
 3154      B5400000 
 3155 3ef8 ED3B0000 		_ADR	STRCQ
 3156 3efc A7200000 		_UNNEST
 3157              	
 3158              	/******************************
 3159              	    ."	( -- //  string> )
 3160              	 	Compile an inline word
 3161              		literal to be typed out 
 3162              		at run time.
 3163              	*******************************/
 3164 3f00 E43E0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3164      C22E2200 
 3165 3f08 504700BF 		_NEST
 3166 3f0c 1F220000 		_COMPI	DOTQP
 3166      C4310000 
 3166      B5400000 
 3167 3f18 ED3B0000 		_ADR	STRCQ
 3168 3f1c A7200000 		_UNNEST
 3169              	
ARM GAS  forth.s 			page 148


 3170              	/*********************
 3171              	  Name compiler
 3172              	***********************/
 3173              	
 3174              	/**************************
 3175              	    ?UNIQUE	( a -- a )
 3176              	 	Display a warning 
 3177              		message if the word 
 3178              		already exists.
 3179              	**************************/
 3180 3f20 043F0000 		_HEADER UNIQU,7,"?UNIQUE"
 3180      073F554E 
 3180      49515545 
 3181 3f2c 504700BF 		_NEST
 3182 3f30 51230000 		_ADR	DUPP
 3183 3f34 89360000 		_ADR	NAMEQ			// ?name exists
 3184 3f38 5F220000 		_QBRAN	UNIQ1	// redefinitions are OK
 3184      583F0000 
 3185 3f40 C5310000 		_DOTQP	7," reDef "		// but warn the user
 3185      07207265 
 3185      44656620 
 3186 3f4c 75230000 		_ADR	OVER
 3187 3f50 55270000 		_ADR	COUNT
 3188 3f54 29310000 		_ADR	TYPEE			// just in case its not planned
 3189              	UNIQ1:
 3190 3f58 41230000 		_ADR	DROP
 3191 3f5c A7200000 		_UNNEST
 3192              	
 3193              	/***********************
 3194              	    $,n	 ( na -- )
 3195              	 	Build a new dictionary 
 3196              		name using the data at na.
 3197              	hidden word 
 3198              	*******************************/
 3199              	SNAME:
 3200 3f60 504700BF 		_NEST
 3201 3f64 51230000 		_ADR	DUPP			//  na na
 3202 3f68 C5220000 		_ADR	CAT			//  ?null input
 3203 3f6c 5F220000 		_QBRAN	SNAM1
 3203      A83F0000 
 3204 3f74 2D3F0000 		_ADR	UNIQU			//  na
 3205 3f78 B5280000 		_ADR	LAST			//  na last
 3206 3f7c A5220000 		_ADR	AT			//  na la
 3207 3f80 513B0000 		_ADR	COMMA			//  na
 3208 3f84 51230000 		_ADR	DUPP			//  na na
 3209 3f88 B5280000 		_ADR	LAST			//  na na last
 3210 3f8c 91220000 		_ADR	STORE			//  na , save na for vocabulary link
 3211 3f90 55270000 		_ADR	COUNT			//  na+1 count
 3212 3f94 15240000 		_ADR	PLUS			//  na+1+count
 3213 3f98 F52A0000 		_ADR	ALGND			//  word boundary
 3214 3f9c 89280000 		_ADR	CPP
 3215 3fa0 91220000 		_ADR	STORE			//  top of dictionary now
 3216 3fa4 A7200000 		_UNNEST
 3217              	SNAM1:
 3218 3fa8 A9310000 		_ADR	STRQP
 3219 3fac 07       		.byte	7
 3220 3fad 206E616D 		.ascii " name? "
ARM GAS  forth.s 			page 149


 3220      653F20
 3221 3fb4 E9380000 		_ADR	ABORT
 3222              	
 3223              	/************************
 3224              	    $COMPILE	( a -- )
 3225              	 	Compile next word to 
 3226              		code dictionary as 
 3227              		a token or literal.
 3228              	**************************/
 3229 3fb8 243F0000 		_HEADER SCOMP,8,"$COMPILE"
 3229      0824434F 
 3229      4D50494C 
 3229      450000BF 
 3230 3fc8 504700BF 		_NEST
 3231 3fcc 89360000 		_ADR	NAMEQ
 3232 3fd0 25250000 		_ADR	QDUP	// defined?
 3233 3fd4 5F220000 		_QBRAN	SCOM2
 3233      04400000 
 3234 3fdc A5220000 		_ADR	AT
 3235 3fe0 1F220000 		_DOLIT	IMEDD
 3235      80000000 
 3236 3fe8 95230000 		_ADR	ANDD	// immediate?
 3237 3fec 5F220000 		_QBRAN	SCOM1
 3237      FC3F0000 
 3238 3ff4 35220000 		_ADR	EXECU
 3239 3ff8 A7200000 		_UNNEST			// it's immediate, execute
 3240              	SCOM1:
 3241 3ffc B5400000 		_ADR	CALLC			// it's not immediate, compile
 3242 4000 A7200000 		_UNNEST	
 3243              	SCOM2:
 3244 4004 79200000 		_ADR	NUMBER 
 3245 4008 5F220000 		_QBRAN	SCOM3
 3245      18400000 
 3246 4010 D53B0000 		_ADR	LITER
 3247 4014 A7200000 		_UNNEST			// compile number as integer
 3248              	SCOM3: // compilation abort 
 3249 4018 21400000 		_ADR COLON_ABORT 
 3250 401c E9380000 		_ADR	ABORT			// error
 3251              	
 3252              	/********************************
 3253              	 before aborting a compilation 
 3254              	 reset HERE and LAST
 3255              	 to previous values. 
 3256              	*******************************/
 3257              	COLON_ABORT:
 3258 4020 504700BF 		_NEST 
 3259 4024 B5280000 		_ADR LAST 
 3260 4028 A5220000 		_ADR AT 
 3261 402c C1240000 		_ADR CELLM 
 3262 4030 51230000 		_ADR DUPP 
 3263 4034 89280000 		_ADR CPP  
 3264 4038 91220000 		_ADR STORE 
 3265 403c A5220000 		_ADR AT 
 3266 4040 B5280000 		_ADR LAST 
 3267 4044 91220000 		_ADR STORE 
 3268 4048 A7200000 		_UNNEST 
 3269              	
ARM GAS  forth.s 			page 150


 3270              	/*********************
 3271              	    OVERT	( -- )
 3272              	 	Link a new word 
 3273              		into the current 
 3274              		vocabulary.
 3275              	**********************/
 3276 404c BC3F0000 		_HEADER OVERT,5,"OVERT"
 3276      054F5645 
 3276      525400BF 
 3277 4058 504700BF 		_NEST
 3278 405c B5280000 		_ADR	LAST
 3279 4060 A5220000 		_ADR	AT
 3280 4064 75280000 		_ADR	CNTXT
 3281 4068 91220000 		_ADR	STORE
 3282 406c A7200000 		_UNNEST
 3283              	
 3284              	/**********************
 3285              	    ;  ( -- )
 3286              	 	Terminate a colon
 3287              		definition.
 3288              	***********************/
 3289 4070 50400000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3289      C13B00BF 
 3290 4078 504700BF 		_NEST
 3291 407c 1F220000 		_DOLIT	UNNEST
 3291      A6200000 
 3292 4084 B5400000 		_ADR	CALLC
 3293 4088 A5390000 		_ADR	LBRAC
 3294 408c 59400000 		_ADR	OVERT
 3295 4090 A7200000 		_UNNEST
 3296              	
 3297              	/******************
 3298              	    ]	   ( -- )
 3299              	 	Start compiling 
 3300              		the words in 
 3301              		the input stream.
 3302              	*********************/
 3303 4094 74400000 		_HEADER RBRAC,1,"]"
 3303      015D00BF 
 3304 409c 504700BF 		_NEST
 3305 40a0 1F220000 		_DOLIT	SCOMP
 3305      C83F0000 
 3306 40a8 49280000 		_ADR	TEVAL
 3307 40ac 91220000 		_ADR	STORE
 3308 40b0 A7200000 		_UNNEST
 3309              	
 3310              	/*********************
 3311              	    BL.W	( ca -- )
 3312              	 	compile ca.
 3313              	hidden word used by compiler
 3314              	*****************************/
 3315              	CALLC:
 3316 40b4 504700BF 		_NEST
 3317 40b8 1F220000 		_DOLIT 1 
 3317      01000000 
 3318 40c0 A9230000 		_ADR ORR 
 3319 40c4 513B0000 		_ADR COMMA  
ARM GAS  forth.s 			page 151


 3320 40c8 A7200000 		_UNNEST 
 3321              	
 3322              	
 3323              	/*************************
 3324              	 	:	( -- //  string> )
 3325              	 	Start a new colon 
 3326              		definition using 
 3327              		next word as its name.
 3328              	**************************/
 3329 40cc 98400000 		_HEADER COLON,1,":"
 3329      013A00BF 
 3330 40d4 504700BF 		_NEST
 3331 40d8 01350000 		_ADR	TOKEN
 3332 40dc 613F0000 		_ADR	SNAME
 3333 40e0 B1200000 		_ADR	COMPI_NEST 
 3334 40e4 9D400000 		_ADR	RBRAC
 3335 40e8 A7200000 		_UNNEST
 3336              	
 3337              	/*************************
 3338              	    IMMEDIATE   ( -- )
 3339              	 	Make the last compiled 
 3340              		word an immediate word.
 3341              	***************************/
 3342 40ec D0400000 		_HEADER IMMED,9,"IMMEDIATE"
 3342      09494D4D 
 3342      45444941 
 3342      544500BF 
 3343 40fc 504700BF 		_NEST
 3344 4100 1F220000 		_DOLIT	IMEDD
 3344      80000000 
 3345 4108 B5280000 		_ADR	LAST
 3346 410c A5220000 		_ADR	AT
 3347 4110 A5220000 		_ADR	AT
 3348 4114 A9230000 		_ADR	ORR
 3349 4118 B5280000 		_ADR	LAST
 3350 411c A5220000 		_ADR	AT
 3351 4120 91220000 		_ADR	STORE
 3352 4124 A7200000 		_UNNEST
 3353              	
 3354              	/******************
 3355              	  Defining words
 3356              	******************/
 3357              	
 3358              	/***********************************
 3359              	    CONSTANT	( u -- //  string> )
 3360              	 	Compile a new constant.
 3361              	************************************/
 3362 4128 F0400000 		_HEADER CONST,8,"CONSTANT"
 3362      08434F4E 
 3362      5354414E 
 3362      540000BF 
 3363 4138 504700BF 		_NEST 
 3364 413c 01350000 		_ADR	TOKEN
 3365 4140 613F0000 		_ADR	SNAME
 3366 4144 59400000 		_ADR	OVERT
 3367 4148 B1200000 		_ADR	COMPI_NEST
 3368 414c 1F220000 		_DOLIT	DOCON
ARM GAS  forth.s 			page 152


 3368      88270000 
 3369 4154 B5400000 		_ADR	CALLC
 3370 4158 513B0000 		_ADR	COMMA
 3371 415c 1F220000 		_DOLIT	UNNEST 
 3371      A6200000 
 3372 4164 B5400000 		_ADR	CALLC  
 3373 4168 A7200000 		_UNNEST
 3374              	
 3375              		.p2align 2 
 3376              	/****************************************
 3377              	 doDOES> ( -- a )
 3378              	 runtime action of DOES> 
 3379              	 leave parameter field address on stack 
 3380              	hidden word used by compiler 
 3381              	***************************************/
 3382              	DODOES:
 3383 416c 504700BF 		_NEST 
 3384 4170 D1220000 		_ADR	RFROM
 3385 4174 B1240000 		_ADR	CELLP 
 3386 4178 71240000 		_ADR	ONEP  
 3387 417c B5280000 		_ADR LAST 
 3388 4180 A5220000 		_ADR AT
 3389 4184 21350000 		_ADR NAMET 
 3390 4188 B1240000 		_ADR CELLP 
 3391 418c 91220000 		_ADR STORE  
 3392 4190 A7200000 		_UNNEST 
 3393              	
 3394              		.p2align 2
 3395              	/**********************
 3396              	  DOES> ( -- )
 3397              	  compile time action
 3398              	*************************/
 3399 4194 2C410000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3399      C5444F45 
 3399      533E00BF 
 3400 41a0 504700BF 		_NEST 
 3401 41a4 1F220000 		_DOLIT DODOES 
 3401      6C410000 
 3402 41ac B5400000 		_ADR CALLC 
 3403 41b0 1F220000 		_DOLIT	UNNEST
 3403      A6200000 
 3404 41b8 B5400000 		_ADR	CALLC 
 3405 41bc B1200000 		_ADR COMPI_NEST
 3406 41c0 1F220000 		_DOLIT RFROM 
 3406      D0220000 
 3407 41c8 B5400000 		_ADR	CALLC
 3408 41cc A7200000 		_UNNEST 
 3409              	
 3410              	
 3411              	/****************************
 3412              	  DEFER@ ( "name" -- a )
 3413              	  return value of code field 
 3414              	  of defered function. 
 3415              	******************************/
 3416 41d0 98410000 		_HEADER DEFERAT,6,"DEFER@"
 3416      06444546 
 3416      45524000 
ARM GAS  forth.s 			page 153


 3417 41dc 504700BF 		_NEST 
 3418 41e0 113B0000 		_ADR TICK
 3419 41e4 B1240000 		_ADR CELLP 
 3420 41e8 A5220000 		_ADR AT 
 3421 41ec 81240000 		_ADR ONEM 
 3422 41f0 A7200000 		_UNNEST 
 3423              	
 3424              	/*********************************
 3425              	 DEFER! ( "name1" "name2" -- )
 3426              	 assign an action to a defered word 
 3427              	************************************/
 3428 41f4 D4410000 		_HEADER DEFERSTO,6,"DEFER!"
 3428      06444546 
 3428      45522100 
 3429 4200 504700BF 		_NEST 
 3430 4204 113B0000 		_ADR TICK 
 3431 4208 71240000 		_ADR ONEP 
 3432 420c 113B0000 		_ADR TICK 
 3433 4210 B1240000 		_ADR CELLP 
 3434 4214 91220000 		_ADR STORE 
 3435 4218 A7200000 		_UNNEST
 3436              	
 3437              	/****************************
 3438              	  DEFER ( "name" -- )
 3439              	  create a defered definition
 3440              	*****************************/
 3441 421c F8410000 		_HEADER DEFER,5,"DEFER"
 3441      05444546 
 3441      455200BF 
 3442 4228 504700BF 		_NEST 
 3443 422c 79420000 		_ADR CREAT 
 3444 4230 1F220000 		_DOLIT UNNEST 
 3444      A6200000 
 3445 4238 B5400000 		_ADR CALLC 
 3446 423c 1F220000 		_DOLIT DEFER_NOP
 3446      60420000 
 3447 4244 71240000 		_ADR ONEP 
 3448 4248 B5280000 		_ADR LAST 
 3449 424c A5220000 		_ADR AT 
 3450 4250 21350000 		_ADR NAMET 
 3451 4254 B1240000 		_ADR CELLP 
 3452 4258 91220000 		_ADR STORE 
 3453 425c A7200000 		_UNNEST 
 3454              	DEFER_NOP:
 3455 4260 504700BF 		_NEST  
 3456 4264 1D220000 		_ADR NOP 
 3457 4268 A7200000 		_UNNEST 
 3458              	
 3459              	/******************************
 3460              	    CREATE	( -- //  string> )
 3461              	 	Compile a new array entry 
 3462              		without allocating code space.
 3463              	***********************************/
 3464 426c 20420000 		_HEADER CREAT,6,"CREATE"
 3464      06435245 
 3464      41544500 
 3465 4278 504700BF 		_NEST 
ARM GAS  forth.s 			page 154


 3466 427c 01350000 		_ADR	TOKEN
 3467 4280 613F0000 		_ADR	SNAME
 3468 4284 59400000 		_ADR	OVERT
 3469 4288 B1200000 		_ADR	COMPI_NEST 
 3470 428c 1F220000 		_DOLIT	DOVAR
 3470      7C270000 
 3471 4294 B5400000 		_ADR	CALLC
 3472 4298 A7200000 		_UNNEST
 3473              	
 3474              	/*******************************
 3475              	    VARIABLE	( -- //  string> )
 3476              	 	Compile a new variable 
 3477              		initialized to 0.
 3478              	***********************************/
 3479 429c 70420000 		_HEADER VARIA,8,"VARIABLE"
 3479      08564152 
 3479      4941424C 
 3479      450000BF 
 3480 42ac 504700BF 		_NEST
 3481 42b0 79420000 		_ADR	CREAT
 3482 42b4 1F220000 		_DOLIT	0
 3482      00000000 
 3483 42bc 513B0000 		_ADR	COMMA
 3484 42c0 1F220000 		_DOLIT UNNEST
 3484      A6200000 
 3485 42c8 B5400000 		_ADR	CALLC  
 3486 42cc A7200000 		_UNNEST
 3487              	
 3488              	/***********
 3489              	  Tools
 3490              	***********/
 3491              	
 3492              	/*************************
 3493              	    dm+	 ( a u -- a )
 3494              	 	Dump u bytes from , 
 3495              		leaving a+u on the stack.
 3496              	hidden word used by DUMP 
 3497              	****************************/
 3498              	DMP:
 3499 42d0 504700BF 		_NEST
 3500 42d4 75230000 		_ADR	OVER
 3501 42d8 1F220000 		_DOLIT	4
 3501      04000000 
 3502 42e0 09320000 		_ADR	UDOTR			// display address
 3503 42e4 D5300000 		_ADR	SPACE
 3504 42e8 F9220000 		_ADR	TOR			// start count down loop
 3505 42ec 73220000 		_BRAN	PDUM2			// skip first pass
 3505      0C430000 
 3506              	PDUM1:
 3507 42f4 51230000 	  _ADR	DUPP
 3508 42f8 C5220000 		_ADR	CAT
 3509 42fc 1F220000 		_DOLIT	3
 3509      03000000 
 3510 4304 09320000 		_ADR	UDOTR			// display numeric data
 3511 4308 71240000 		_ADR	ONEP			// increment address
 3512              	PDUM2:
 3513 430c 41220000 	  _ADR	DONXT
ARM GAS  forth.s 			page 155


 3514 4310 F4420000 		.word	PDUM1	// loop till done
 3515 4314 A7200000 		_UNNEST
 3516              		.p2align 2 
 3517              	//    DUMP	( a u -- )
 3518              	// 	Dump u bytes from a, in a formatted manner.
 3519              	
 3520              	/**********************
 3521              		DUMP ( a n -- )
 3522              		hex dump memory 
 3523              	*********************/
 3524 4318 A0420000 		_HEADER DUMP,4,"DUMP"
 3524      0444554D 
 3524      500000BF 
 3525 4324 504700BF 		_NEST
 3526 4328 ED270000 		_ADR	BASE
 3527 432c A5220000 		_ADR	AT
 3528 4330 F9220000 		_ADR	TOR
 3529 4334 8D2E0000 		_ADR	HEX			// save radix,set hex
 3530 4338 1F220000 		_DOLIT	16
 3530      10000000 
 3531 4340 952A0000 		_ADR	SLASH			// change count to lines
 3532 4344 F9220000 		_ADR	TOR
 3533 4348 73220000 		_BRAN	DUMP4			// start count down loop
 3533      78430000 
 3534              	DUMP1:
 3535 4350 5D310000 	  _ADR	CR
 3536 4354 1F220000 		_DOLIT	16
 3536      10000000 
 3537 435c 89250000 		_ADR	DDUP
 3538 4360 D1420000 		_ADR	DMP			// display numeric
 3539 4364 39250000 		_ADR	ROT
 3540 4368 39250000 		_ADR	ROT
 3541 436c D5300000 		_ADR	SPACE
 3542 4370 D5300000 		_ADR	SPACE
 3543 4374 29310000 		_ADR	TYPEE			// display printable characters
 3544              	DUMP4:
 3545 4378 41220000 	  _DONXT	DUMP1	// loop till done
 3545      50430000 
 3546              	DUMP3:
 3547 4380 41230000 		_ADR	DROP
 3548 4384 D1220000 		_ADR	RFROM
 3549 4388 ED270000 		_ADR	BASE
 3550 438c 91220000 		_ADR	STORE			// restore radix
 3551 4390 A7200000 		_UNNEST
 3552              	
 3553              	/***********************
 3554              		TRACE ( -- )
 3555              	**********************/
 3556 4394 1C430000 		_HEADER TRACE,5,"TRACE"
 3556      05545241 
 3556      434500BF 
 3557 43a0 504700BF 		_NEST 
 3558 43a4 5D310000 		_ADR CR 
 3559 43a8 ED270000 		_ADR BASE 
 3560 43ac A5220000 		_ADR AT 
 3561 43b0 F9220000 		_ADR TOR
 3562 43b4 D12E0000 		_ADR DECIM
ARM GAS  forth.s 			page 156


 3563 43b8 1F220000 		_DOLIT '>' 
 3563      3E000000 
 3564 43c0 1F220000 		_DOLIT 'S'
 3564      53000000 
 3565 43c8 29210000 		_ADR EMIT 
 3566 43cc 29210000 		_ADR EMIT  
 3567 43d0 F1430000 		_ADR DOTS
 3568 43d4 D1220000 		_ADR RFROM 
 3569 43d8 ED270000 		_ADR BASE 
 3570 43dc 91220000 		_ADR STORE  
 3571 43e0 5D310000 		_ADR CR 
 3572 43e4 A7200000 		_UNNEST 
 3573              	
 3574              	
 3575              	/**********************
 3576              	   .S	  ( ... -- ... )
 3577              	 	Display the contents 
 3578              		of the data stack.
 3579              	*************************/
 3580 43e8 98430000 		_HEADER DOTS,2,".S"
 3580      022E5300 
 3581 43f0 504700BF 		_NEST
 3582 43f4 D5300000 		_ADR	SPACE
 3583 43f8 5D2B0000 		_ADR	DEPTH			// stack depth
 3584 43fc F9220000 		_ADR	TOR			// start count down loop
 3585 4400 73220000 		_BRAN	DOTS2			// skip first pass
 3585      14440000 
 3586              	DOTS1:
 3587 4408 E5220000 		_ADR	RAT
 3588 440c 812B0000 		_ADR	PICK
 3589 4410 61320000 		_ADR	DOT			// index stack, display contents
 3590              	DOTS2:
 3591 4414 41220000 		_DONXT	DOTS1	// loop till done
 3591      08440000 
 3592 441c D5300000 		_ADR	SPACE
 3593 4420 A7200000 		_UNNEST
 3594              	
 3595              	/*****************************
 3596              	    >NAME	( ca -- na | F )
 3597              	 	Convert code address 
 3598              		to a name address.
 3599              	*****************************/
 3600 4424 EC430000 		_HEADER TNAME,5,">NAME"
 3600      053E4E41 
 3600      4D4500BF 
 3601 4430 504700BF 		_NEST
 3602 4434 F9220000 		_ADR	TOR			//  
 3603 4438 75280000 		_ADR	CNTXT			//  va
 3604 443c A5220000 		_ADR	AT			//  na
 3605              	TNAM1:
 3606 4440 51230000 		_ADR	DUPP			//  na na
 3607 4444 5F220000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3607      74440000 
 3608 444c 51230000 		_ADR	DUPP			//  na na
 3609 4450 21350000 		_ADR	NAMET			//  na ca
 3610 4454 E5220000 		_ADR	RAT			//  na ca code
 3611 4458 BD230000 		_ADR	XORR			//  na f --
ARM GAS  forth.s 			page 157


 3612 445c 5F220000 		_QBRAN	TNAM2
 3612      74440000 
 3613 4464 C1240000 		_ADR	CELLM			//  la 
 3614 4468 A5220000 		_ADR	AT			//  next_na
 3615 446c 73220000 		_BRAN	TNAM1
 3615      40440000 
 3616              	TNAM2:	
 3617 4474 D1220000 		_ADR	RFROM
 3618 4478 41230000 		_ADR	DROP			//  0|na --
 3619 447c A7200000 		_UNNEST			// 0
 3620              	
 3621              	/********************************
 3622              	    .ID	 ( na -- )
 3623              	 	Display the name at address.
 3624              	********************************/
 3625 4480 28440000 		_HEADER DOTID,3,".ID"
 3625      032E4944 
 3626 4488 504700BF 		_NEST
 3627 448c 25250000 		_ADR	QDUP			// if zero no name
 3628 4490 5F220000 		_QBRAN	DOTI1
 3628      B0440000 
 3629 4498 55270000 		_ADR	COUNT
 3630 449c 1F220000 		_DOLIT	0x1F
 3630      1F000000 
 3631 44a4 95230000 		_ADR	ANDD			// mask lexicon bits
 3632 44a8 29310000 		_ADR	TYPEE
 3633 44ac A7200000 		_UNNEST			// display name string
 3634              	DOTI1:
 3635 44b0 C5310000 		_DOTQP	9," {noName}"
 3635      09207B6E 
 3635      6F4E616D 
 3635      657D00BF 
 3636 44c0 A7200000 		_UNNEST
 3637              	
 3638              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3639              	.if WANT_SEE 
 3640              	/*******************************
 3641              	    SEE	 ( -- //  string> )
 3642              	 	A simple decompiler.
 3643              	*******************************/
 3644              		_HEADER SEE,3,"SEE"
 3645              		_NEST
 3646              		_ADR	TICK	//  ca --, starting address
 3647              		_ADR	CR	
 3648              		_DOLIT	20
 3649              		_ADR	TOR
 3650              	SEE1:
 3651              		_ADR	CELLP			//  a
 3652              		_ADR	DUPP			//  a a
 3653              		_ADR	DECOMP		//  a
 3654              		_DONXT	SEE1
 3655              		_ADR	DROP
 3656              		_UNNEST
 3657              	
 3658              	/*************************
 3659              	 	DECOMPILE ( a -- )
 3660              	 	Convert code in a.  
ARM GAS  forth.s 			page 158


 3661              		Display name of command or as data.
 3662              	*************************************/
 3663              		_HEADER DECOMP,9,"DECOMPILE"
 3664              		_NEST
 3665              		_ADR	DUPP			//  a a
 3666              	// 	_ADR	TOR			//  a
 3667              		_ADR	AT			//  a code
 3668              		_ADR	DUPP			//  a code code
 3669              		_DOLIT	0xF800D000 //0xF800F800
 3670              		_ADR	ANDD
 3671              		_DOLIT	0xF000D000 //0xF800F000
 3672              		_ADR	EQUAL			//  a code ?
 3673              		_ADR	INVER 
 3674              		_QBRAN	DECOM2	//  not a command
 3675              		//  a valid_code --, extract address and display name
 3676              		MOVW	IP,#0xFFE
 3677              		MOV	WP,TOS
 3678              		LSL	TOS,TOS,#21		//  get bits 22-12
 3679              		ASR	TOS,TOS,#9		//  with sign extension
 3680              		LSR	WP,WP,#15		//  get bits 11-1
 3681              		AND	WP,WP,IP		//  retain only bits 11-1
 3682              		ORR	TOS,TOS,WP		//  get bits 22-1
 3683              		NOP
 3684              		_ADR	OVER			//  a offset a
 3685              		_ADR	PLUS			//  a target-4
 3686              		_ADR	CELLP			//  a target
 3687              		_ADR	TNAME			//  a na/0 --, is it a name?
 3688              		_ADR	QDUP			//  name address or zero
 3689              		_QBRAN	DECOM1
 3690              		_ADR	SPACE			//  a na
 3691              		_ADR	DOTID			//  a --, display name
 3692              	// 	_ADR	RFROM			//  a
 3693              		_ADR	DROP
 3694              		_UNNEST
 3695              	DECOM1:	// _ADR	RFROM		//  a
 3696              		_ADR	AT			//  data
 3697              		_ADR	UDOT			//  display data
 3698              		_UNNEST
 3699              	DECOM2:
 3700              		_ADR	UDOT
 3701              	// 	_ADR	RFROM
 3702              		_ADR	DROP
 3703              		_UNNEST
 3704              	.endif 
 3705              	
 3706              	/**********************
 3707              		VLIST ( -- )
 3708              		WORDS alias 
 3709              		+ display words count 
 3710              	**********************/
 3711 44c4 84440000 		_HEADER VLIST,5,"VLIST"
 3711      05564C49 
 3711      535400BF 
 3712 44d0 504700BF 		_NEST 
 3713 44d4 F5440000 		_ADR WORDS
 3714 44d8 5D310000 		_ADR CR 
 3715 44dc 39450000 		_ADR WC
ARM GAS  forth.s 			page 159


 3716 44e0 61320000 		_ADR DOT    
 3717 44e4 A7200000 		_UNNEST 
 3718              	
 3719              	/*********************
 3720              	    WORDS	( -- )
 3721              	 	Display the names 
 3722              		in the context vocabulary.
 3723              	*******************************/
 3724 44e8 C8440000 		_HEADER WORDS,5,"WORDS"
 3724      05574F52 
 3724      445300BF 
 3725 44f4 504700BF 		_NEST
 3726 44f8 5D310000 		_ADR	CR
 3727 44fc 75280000 		_ADR	CNTXT
 3728 4500 A5220000 		_ADR	AT			// only in context
 3729              	WORS1:
 3730 4504 25250000 		_ADR	QDUP			// ?at end of list
 3731 4508 5F220000 		_QBRAN	WORS2
 3731      2C450000 
 3732 4510 51230000 		_ADR	DUPP
 3733 4514 D5300000 		_ADR	SPACE
 3734 4518 89440000 		_ADR	DOTID			// display a name
 3735 451c C1240000 		_ADR	CELLM
 3736 4520 A5220000 		_ADR	AT
 3737 4524 73220000 		_BRAN	WORS1
 3737      04450000 
 3738              	WORS2:
 3739 452c A7200000 		_UNNEST
 3740              	
 3741              	/*****************************
 3742              		WC ( - n )
 3743              		count words in dictionary 
 3744              	******************************/
 3745 4530 EC440000 		_HEADER WC,2,"WC"
 3745      02574300 
 3746 4538 504700BF 		_NEST 
 3747 453c 1F220000 		_DOLIT 0 
 3747      00000000 
 3748 4544 B5280000 		_ADR LAST
 3749 4548 A5220000 	1:	_ADR AT
 3750 454c 25250000 		_ADR QDUP
 3751 4550 5F220000 		_QBRAN 9f
 3751      70450000 
 3752 4558 61230000 		_ADR SWAP
 3753 455c 71240000 		_ADR ONEP
 3754 4560 61230000 		_ADR SWAP
 3755 4564 C1240000 		_ADR CELLM
 3756 4568 73220000 		_BRAN 1b
 3756      48450000 
 3757 4570 A7200000 	9:	_UNNEST 
 3758              	
 3759              	/*************************
 3760              		MARK <string> ( -- )
 3761              	    create forget point 
 3762              		in dictionary 
 3763              	*************************/	
 3764 4574 34450000 		_HEADER MARK,4,"MARK"
ARM GAS  forth.s 			page 160


 3764      044D4152 
 3764      4B0000BF 
 3765 4580 504700BF 		_NEST
 3766 4584 79420000 		_ADR CREAT 
 3767 4588 6D410000 		_ADR DODOES 
 3768 458c A7200000 		_UNNEST
 3769 4590 504700BF 		_NEST  
 3770 4594 D1220000 		_ADR RFROM 
 3771 4598 1F220000 		_DOLIT 8
 3771      08000000 
 3772 45a0 25240000 		_ADR SUBB
 3773 45a4 31440000 		_ADR TNAME
 3774 45a8 C1240000 		_ADR CELLM
 3775 45ac A5220000 		_ADR AT  
 3776 45b0 B5280000 		_ADR LAST 
 3777 45b4 91220000 		_ADR STORE 
 3778 45b8 59400000 		_ADR OVERT
 3779 45bc A7200000 		_UNNEST 
 3780              	
 3781              	/****************
 3782              	  cold start
 3783              	*****************/
 3784              	
 3785              	/**********************************
 3786              	    VER	 ( -- n )
 3787              	 	Return the version 
 3788              		number of this implementation.
 3789              	hidden word used by COLD
 3790              	**********************************/
 3791              	VERSN:
 3792 45c0 504700BF 		_NEST
 3793 45c4 1F220000 		_DOLIT	VER*256+EXT
 3793      00010000 
 3794 45cc A7200000 		_UNNEST
 3795              	
 3796              	/*********************
 3797              	    hi	  ( -- )
 3798              	 	Display the sign-on 
 3799              		message.
 3800              	***********************/
 3801 45d0 78450000 		_HEADER HI,2,"HI"
 3801      02484900 
 3802 45d8 504700BF 		_NEST
 3803 45dc 5D310000 		_ADR	CR	// initialize I/O
 3804 45e0 C5310000 		_DOTQP	17, "beyond Jupiter, v" 
 3804      11626579 
 3804      6F6E6420 
 3804      4A757069 
 3804      7465722C 
 3805 45f8 ED270000 		_ADR	BASE
 3806 45fc A5220000 		_ADR	AT
 3807 4600 8D2E0000 		_ADR	HEX	// save radix
 3808 4604 C1450000 		_ADR	VERSN
 3809 4608 7D2D0000 		_ADR	BDIGS
 3810 460c C92D0000 		_ADR	DIG
 3811 4610 C92D0000 		_ADR	DIG
 3812 4614 1F220000 		_DOLIT	'.'
ARM GAS  forth.s 			page 161


 3812      2E000000 
 3813 461c 9D2D0000 		_ADR	HOLD
 3814 4620 E92D0000 		_ADR	DIGS
 3815 4624 3D2E0000 		_ADR	EDIGS
 3816 4628 29310000 		_ADR	TYPEE	// format version number
 3817 462c ED270000 		_ADR	BASE
 3818 4630 91220000 		_ADR	STORE
 3819 4634 5D310000 		_ADR	CR
 3820 4638 A7200000 		_UNNEST			// restore radix
 3821              	
 3822              	/**********************
 3823              	 check if PS2 keyboard 
 3824              	 present.
 3825              	**********************/
 3826              	PS2_QUERY: 
 3827 463c 504700BF 		_NEST 
 3828 4640 1F220000 		_DOLIT 400 
 3828      90010000 
 3829 4648 C1210000 		_ADR PAUSE
 3830 464c D5130000 		_ADR PS2_QKEY
 3831 4650 5F220000 		_QBRAN 1f
 3831      6C460000 
 3832 4658 1F220000 		_DOLIT BAT_OK 
 3832      AA000000 
 3833 4660 BD230000 		_ADR XORR 
 3834 4664 5F220000 		_QBRAN 9f 
 3834      B0460000 
 3835 466c BD150000 	1:	_ADR KBD_RST
 3836 4670 1F220000 		_DOLIT BAT_OK 
 3836      AA000000 
 3837 4678 BD230000 		_ADR XORR  
 3838 467c 5F220000 		_QBRAN 9f  
 3838      B0460000 
 3839              	// no ps2 keyboard 
 3840              	// swith to serial console
 3841 4684 5D310000 		_ADR CR 
 3842 4688 C5310000 		_DOTQP 25,"no PS2 keyboard detected."
 3842      196E6F20 
 3842      50533220 
 3842      6B657962 
 3842      6F617264 
 3843 46a8 CD050000 		_ADR SERIAL 
 3844 46ac E5050000 		_ADR CONSOLE 
 3845 46b0 A7200000 	9:	_UNNEST 
 3846              	
 3847              	/*************************
 3848              	   check PA8 to 
 3849              	   select console 
 3850              	   PA8 -> low  LOCAL 
 3851              	   PA8 -> high SERIAL 
 3852              	*************************/
 3853              	IF_SENSE:
 3854 46b4 504700BF 		_NEST 
 3855 46b8 B5050000 		_ADR LOCAL 
 3856 46bc 1F220000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3856      10000240 
 3857 46c4 A5220000 		_ADR AT 
ARM GAS  forth.s 			page 162


 3858 46c8 1F220000 		_DOLIT (1<<8)
 3858      00010000 
 3859 46d0 95230000 		_ADR ANDD 
 3860 46d4 5F220000 		_QBRAN 9f 
 3860      E0460000 
 3861 46dc 71240000 		_ADR ONEP 
 3862 46e0 E5050000 	9:  _ADR CONSOLE 
 3863 46e4 A7200000 		_UNNEST 
 3864              	
 3865              	
 3866              	/********************
 3867              	    COLD	( -- )
 3868              	 	The high level cold 
 3869              		start sequence.
 3870              	**************************/
 3871 46e8 D4450000 		.word	LINK 
 3872              		LINK = . 
 3873 46ec 04       	_LASTN:	.byte  4
 3874 46ed 434F4C44 		.ascii "COLD"
 3875 46f1 0000BF   		.p2align 2	
 3876              	COLD:
 3877 46f4 00B5FBF7 		_CALL forth_init 
 3877      37FD5DF8 
 3877      04EB
 3878 46fe DFF858C0 		ldr IP,=COLD1 
 3879 4702 FDF7CDBC 		_NEXT
 3880 4706 00BF     		.p2align 2 
 3881              	COLD1:
 3882 4708 1F220000 		_DOLIT  0 
 3882      00000000 
 3883 4710 F5210000 		_ADR ULED // turn off user LED 
 3884 4714 1F220000 		_DOLIT	UZERO
 3884      F4030000 
 3885 471c 1F220000 		_DOLIT	UPP
 3885      00000020 
 3886 4724 1F220000 		_DOLIT	ULAST-UZERO
 3886      BB000000 
 3887 472c 492C0000 		_ADR	MOVE 			// initialize user area
 3888 4730 713A0000 		_ADR	PRESE			// initialize stack and TIB
 3889 4734 B5460000 		_ADR	IF_SENSE
 3890 4738 69180000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 3891 473c 3D460000 		_ADR 	PS2_QUERY  
 3892 4740 D9270000 		_ADR	TBOOT
 3893 4744 F92B0000 		_ADR	ATEXE			// application boot
 3894 4748 59400000 		_ADR	OVERT
 3895 474c 73220000 		_BRAN	QUIT			// start interpretation
 3895      903A0000 
 3896              	COLD2:
 3897              		.p2align 2 	
 3898              	CTOP:
 3899 4754 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3900              	
 3901              	
 3902 4758 08470000 	  .end 
ARM GAS  forth.s 			page 163


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 164


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 165


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 166


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 167


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 168


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 169


             forth.s:2729   .text:0000000000003a2c EVAL
             forth.s:1617   .text:0000000000002d9c HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 FP_WS
          macros.inc:109    *ABS*:0000000000000013 FP_WS_SIZE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:00000000000007dc tv_out_isr
          ser-term.s:35     .text:00000000000004c0 uart_rx_handler
           ps2_kbd.s:78     .text:00000000000010b8 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:00000000000020a0 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2750   .text:0000000000003a70 PRESE
             forth.s:268    .text:000000000000221e DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:939    .text:0000000000002754 COUNT
             forth.s:1934   .text:0000000000003128 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:437    .text:0000000000002350 DUPP
             forth.s:393    .text:00000000000022f8 TOR
             forth.s:1026   .text:00000000000027ec BASE
             forth.s:339    .text:0000000000002290 STORE
             forth.s:2072   .text:0000000000003260 DOT
             forth.s:375    .text:00000000000022d0 RFROM
             forth.s:472    .text:0000000000002394 ANDD
             forth.s:309    .text:000000000000225e QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:154    .text:0000000000002128 EMIT
             forth.s:1906   .text:00000000000030d4 SPACE
ARM GAS  forth.s 			page 170


              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:1952   .text:000000000000315c CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:385    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004ee ser_init
             tvout.s:74     .text:000000000000072c tv_init
           ps2_kbd.s:307    .text:00000000000012d8 kbd_init
         spi-flash.s:39     .text:00000000000016ec flash_spi_init
             forth.s:3876   .text:00000000000046f4 COLD
             forth.s:83     .text:0000000000002098 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:475    .text:0000000000000332 gpio_config
              init.s:550    .text:00000000000003de gpio_out
              init.s:410    .text:00000000000002a8 nvic_set_priority
              init.s:565    .text:00000000000003f4 UZERO
              init.s:602    .text:00000000000004af ULAST
              init.s:419    .text:00000000000002c0 negative_irq
              init.s:431    .text:00000000000002da nvic_enable_irq
              init.s:448    .text:0000000000000304 nvic_disable_irq
              init.s:512    .text:000000000000039a input_pull
              init.s:505    .text:0000000000000388 output_type
              init.s:528    .text:00000000000003b0 gpio_speed
              init.s:566    .text:00000000000003f4 $d
             forth.s:3801   .text:00000000000045d8 HI
           ps2_kbd.s:396    .text:00000000000013d4 PS2_QKEY
             tvout.s:563    .text:0000000000000c9c TV_EMIT
             forth.s:2666   .text:0000000000003948 INTER
             forth.s:3873   .text:00000000000046ec _LASTN
             forth.s:3898   .text:0000000000004754 CTOP
             forth.s:3872   .text:00000000000046ec LINK
              init.s:607    .text:00000000000004b0 $d
          ser-term.s:33     .text:00000000000004c0 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000546 $d
          ser-term.s:90     .text:000000000000054a _SER_QKEY
          ser-term.s:90     .text:0000000000000554 SER_QKEY
          ser-term.s:110    .text:0000000000000580 $d
          ser-term.s:110    .text:0000000000000584 _SER_EMIT
          ser-term.s:110    .text:0000000000000590 SER_EMIT
          ser-term.s:124    .text:00000000000005aa $d
          ser-term.s:124    .text:00000000000005ae _LOCAL
          ser-term.s:124    .text:00000000000005b4 $t
          ser-term.s:124    .text:00000000000005b4 LOCAL
          ser-term.s:133    .text:00000000000005c0 $d
          ser-term.s:133    .text:00000000000005c4 _SERIAL
ARM GAS  forth.s 			page 171


          ser-term.s:133    .text:00000000000005cc SERIAL
          ser-term.s:142    .text:00000000000005d8 $d
          ser-term.s:142    .text:00000000000005dc _CONSOLE
          ser-term.s:142    .text:00000000000005e4 $t
          ser-term.s:142    .text:00000000000005e4 CONSOLE
          ser-term.s:164    .text:0000000000000604 $d
          ser-term.s:164    .text:0000000000000608 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000614 ANSI_PARAM
          ser-term.s:166    .text:0000000000000618 $d
             forth.s:579    .text:0000000000002470 ONEP
             forth.s:1298   .text:0000000000002a5c SLMOD
             forth.s:668    .text:0000000000002524 QDUP
             forth.s:324    .text:0000000000002272 BRAN
             forth.s:529    .text:0000000000002414 PLUS
             forth.s:587    .text:0000000000002480 ONEM
             forth.s:90     .text:00000000000020a6 UNNEST
          ser-term.s:191    .text:0000000000000684 _ANSI_ESC
          ser-term.s:191    .text:000000000000068c ANSI_ESC
          ser-term.s:193    .text:0000000000000690 $d
          ser-term.s:203    .text:00000000000006b0 _SER_AT
          ser-term.s:203    .text:00000000000006b8 SER_AT
          ser-term.s:205    .text:00000000000006bc $d
             forth.s:445    .text:0000000000002360 SWAP
          ser-term.s:219    .text:00000000000006ec _SER_CLS
          ser-term.s:219    .text:00000000000006f4 $t
          ser-term.s:219    .text:00000000000006f4 SER_CLS
          ser-term.s:221    .text:00000000000006f8 $d
          ser-term.s:228    .text:000000000000071c $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
ARM GAS  forth.s 			page 172


             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:000000000000072c $t
             tvout.s:150    .text:0000000000000808 state_vsync
             tvout.s:191    .text:000000000000085c state_pre_video
             tvout.s:202    .text:000000000000086e state_video_out
             tvout.s:237    .text:00000000000008cc state_post_video
             tvout.s:254    .text:00000000000008f2 tv_isr_exit
             tvout.s:180    .text:0000000000000842 sync_end
             tvout.s:246    .text:00000000000008de frame_end
             tvout.s:264    .text:00000000000008f4 $d
             tvout.s:264    .text:00000000000008f8 _BACKCOLOR
             tvout.s:264    .text:0000000000000904 BACKCOLOR
             tvout.s:271    .text:0000000000000910 $d
             tvout.s:271    .text:0000000000000914 _PENCOLOR
             tvout.s:271    .text:000000000000091e $t
             tvout.s:271    .text:0000000000000920 PENCOLOR
             tvout.s:278    .text:000000000000092c $d
             tvout.s:278    .text:0000000000000930 _CURSOR_COL
             tvout.s:278    .text:0000000000000938 CURSOR_COL
             tvout.s:285    .text:0000000000000944 $d
             tvout.s:285    .text:0000000000000948 _CURSOR_ROW
             tvout.s:285    .text:000000000000094c $t
             tvout.s:285    .text:000000000000094c CURSOR_ROW
             tvout.s:292    .text:0000000000000958 $d
             tvout.s:292    .text:000000000000095c _ROWY
             tvout.s:292    .text:0000000000000962 $t
             tvout.s:292    .text:0000000000000964 ROWY
             tvout.s:299    .text:0000000000000970 $d
             tvout.s:299    .text:0000000000000974 _COLX
             tvout.s:299    .text:000000000000097a $t
             tvout.s:299    .text:000000000000097c COLX
             tvout.s:306    .text:0000000000000988 $d
             tvout.s:306    .text:000000000000098c _FONT
             tvout.s:306    .text:0000000000000994 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:00000000000009a0 $d
             tvout.s:313    .text:00000000000009a4 _VIDBUFF
             tvout.s:313    .text:00000000000009ac $t
             tvout.s:313    .text:00000000000009ac VIDBUFF
             tvout.s:325    .text:00000000000009b6 $d
             tvout.s:325    .text:00000000000009ba _PLOT
             tvout.s:325    .text:00000000000009c0 PLOT
             tvout.s:373    .text:0000000000000a44 plot_op
             tvout.s:341    .text:00000000000009ec op_back
             tvout.s:350    .text:0000000000000a06 op_pen
             tvout.s:359    .text:0000000000000a20 op_invert
             tvout.s:363    .text:0000000000000a28 op_xor
             tvout.s:373    .text:0000000000000a44 $d
             tvout.s:378    .text:0000000000000a4c _VSYNC
             tvout.s:378    .text:0000000000000a52 $t
             tvout.s:378    .text:0000000000000a54 VSYNC
             tvout.s:386    .text:0000000000000a5e $d
             tvout.s:386    .text:0000000000000a62 _CLS
             tvout.s:386    .text:0000000000000a66 $t
             tvout.s:386    .text:0000000000000a68 CLS
             tvout.s:410    .text:0000000000000aaa $d
             tvout.s:410    .text:0000000000000aae _CLRLINE
ARM GAS  forth.s 			page 173


             tvout.s:410    .text:0000000000000ab6 $t
             tvout.s:410    .text:0000000000000ab8 CLRLINE
             tvout.s:412    .text:0000000000000abc $d
             forth.s:547    .text:0000000000002434 STAR
             forth.s:1525   .text:0000000000002c90 FILL
             tvout.s:427    .text:0000000000000af0 _SCROLLUP
             tvout.s:427    .text:0000000000000afc SCROLLUP
             tvout.s:429    .text:0000000000000b00 $d
             forth.s:538    .text:0000000000002424 SUBB
             forth.s:1493   .text:0000000000002c48 MOVE
             tvout.s:448    .text:0000000000000b48 _SCROLLDOWN
             tvout.s:448    .text:0000000000000b54 SCROLLDOWN
             tvout.s:450    .text:0000000000000b58 $d
             tvout.s:467    .text:0000000000000b98 _TV_CRLF
             tvout.s:467    .text:0000000000000ba0 $t
             tvout.s:467    .text:0000000000000ba0 TV_CRLF
             tvout.s:482    .text:0000000000000bc2 $d
             tvout.s:482    .text:0000000000000bc6 _RIGHT
             tvout.s:482    .text:0000000000000bcc $t
             tvout.s:482    .text:0000000000000bcc RIGHT
             tvout.s:495    .text:0000000000000be0 $d
             tvout.s:495    .text:0000000000000be4 _LEFT
             tvout.s:495    .text:0000000000000bec LEFT
             tvout.s:511    .text:0000000000000c18 FONT_PIXEL
             tvout.s:518    .text:0000000000000c28 INCR_X
             tvout.s:525    .text:0000000000000c34 NEXT_PIXEL
             tvout.s:534    .text:0000000000000c3c CHAR_ROW
             tvout.s:536    .text:0000000000000c40 $d
             forth.s:718    .text:0000000000002588 DDUP
             forth.s:384    .text:00000000000022e4 RAT
             forth.s:290    .text:0000000000002240 DONXT
             forth.s:709    .text:0000000000002574 TDROP
             tvout.s:551    .text:0000000000000c7c CHAR_FONT
             tvout.s:552    .text:0000000000000c7c $t
             tvout.s:563    .text:0000000000000c90 $d
             tvout.s:563    .text:0000000000000c94 _TV_EMIT
             tvout.s:563    .text:0000000000000c9c $t
             tvout.s:565    .text:0000000000000ca0 $d
             forth.s:835    .text:0000000000002684 ULESS
             tvout.s:593    .text:0000000000000d24 CTRL_KEY
             forth.s:349    .text:00000000000022a4 AT
             forth.s:678    .text:0000000000002538 ROT
             forth.s:367    .text:00000000000022c4 CAT
             tvout.s:660    .text:0000000000000e0c SHOW_CURSOR
             tvout.s:691    .text:0000000000000e94 HIDE_CURSOR
             forth.s:823    .text:000000000000266c EQUAL
             tvout.s:650    .text:0000000000000dec BACK_SPACE
             forth.s:429    .text:0000000000002340 DROP
             tvout.s:618    .text:0000000000000d94 CAR_RET
             tvout.s:629    .text:0000000000000dac LN_FEED
             tvout.s:619    .text:0000000000000d94 $t
             tvout.s:620    .text:0000000000000d98 $d
             tvout.s:630    .text:0000000000000dac $t
             tvout.s:631    .text:0000000000000db0 $d
             forth.s:490    .text:00000000000023bc XORR
             tvout.s:651    .text:0000000000000dec $t
             tvout.s:652    .text:0000000000000df0 $d
ARM GAS  forth.s 			page 174


             tvout.s:660    .text:0000000000000e00 _SHOW_CURSOR
             tvout.s:660    .text:0000000000000e0c $t
             tvout.s:663    .text:0000000000000e10 $d
             forth.s:660    .text:0000000000002514 TWOSL
             forth.s:357    .text:00000000000022b0 CSTOR
             forth.s:700    .text:0000000000002560 DDROP
             tvout.s:691    .text:0000000000000e88 _HIDE_CURSOR
             tvout.s:691    .text:0000000000000e94 $t
             tvout.s:694    .text:0000000000000e98 $d
             forth.s:520    .text:0000000000002404 LSHIFT
             forth.s:481    .text:00000000000023a8 ORR
             tvout.s:704    .text:0000000000000ec0 _TV_AT
             tvout.s:704    .text:0000000000000ec6 $t
             tvout.s:704    .text:0000000000000ec8 TV_AT
             tvout.s:719    .text:0000000000000eec $d
             tvout.s:719    .text:0000000000000ef0 _INPUT
             tvout.s:719    .text:0000000000000ef6 $t
             tvout.s:719    .text:0000000000000ef8 INPUT
             tvout.s:721    .text:0000000000000efc $d
             forth.s:1437   .text:0000000000002bc0 PAD
             forth.s:2574   .text:0000000000003834 ACCEP
             forth.s:455    .text:0000000000002374 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000000f28 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
ARM GAS  forth.s 			page 175


       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
ARM GAS  forth.s 			page 176


       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f34 sc_ascii
         mcSaite.inc:100    .text:0000000000000fe8 shifted
         mcSaite.inc:151    .text:0000000000001048 altchar
         mcSaite.inc:167    .text:0000000000001058 extended
         mcSaite.inc:191    .text:0000000000001080 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
ARM GAS  forth.s 			page 177


           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:00000000000010b6 $t
           ps2_kbd.s:179    .text:00000000000011e2 send_bit
           ps2_kbd.s:107    .text:0000000000001118 start_bit
           ps2_kbd.s:118    .text:000000000000113c parity_bit
           ps2_kbd.s:125    .text:0000000000001150 stop_bit
           ps2_kbd.s:152    .text:00000000000011a6 store_code
           ps2_kbd.s:253    .text:0000000000001276 do_async_key
           ps2_kbd.s:204    .text:0000000000001226 send_parity
           ps2_kbd.s:211    .text:0000000000001238 send_stop
           ps2_kbd.s:218    .text:0000000000001242 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000001262 is_async_key
           ps2_kbd.s:286    .text:00000000000012c6 async_keys
           ps2_kbd.s:378    .text:00000000000013ac table_scan
           ps2_kbd.s:260    .text:0000000000001288 set_async_key
           ps2_kbd.s:295    .text:00000000000012d4 async_jump
           ps2_kbd.s:265    .text:0000000000001296 shift_key
           ps2_kbd.s:273    .text:00000000000012a6 set_reset
           ps2_kbd.s:268    .text:000000000000129c ctrl_key
           ps2_kbd.s:271    .text:00000000000012a2 alt_key
           ps2_kbd.s:287    .text:00000000000012c6 $d
           ps2_kbd.s:340    .text:0000000000001354 $d
           ps2_kbd.s:340    .text:0000000000001358 _KEY_ASYNC
           ps2_kbd.s:340    .text:0000000000001362 $t
           ps2_kbd.s:340    .text:0000000000001364 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001374 keycode
           ps2_kbd.s:365    .text:000000000000139c wait_code
           ps2_kbd.s:396    .text:00000000000013c6 $d
           ps2_kbd.s:396    .text:00000000000013ca _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001420 inkey_exit
           ps2_kbd.s:418    .text:0000000000001424 pause_key
           ps2_kbd.s:427    .text:000000000000143a do_modifiers
           ps2_kbd.s:436    .text:0000000000001452 shift_down
           ps2_kbd.s:440    .text:0000000000001458 altchar_down
           ps2_kbd.s:444    .text:000000000000145e ctrl_down
           ps2_kbd.s:452    .text:000000000000147a do_capslock
           ps2_kbd.s:478    .text:000000000000149e kbd_send
           ps2_kbd.s:553    .text:0000000000001592 kbd_clear_queue
           ps2_kbd.s:567    .text:00000000000015b0 $d
           ps2_kbd.s:567    .text:00000000000015b4 _KBD_RST
           ps2_kbd.s:567    .text:00000000000015bc $t
           ps2_kbd.s:567    .text:00000000000015bc KBD_RST
           ps2_kbd.s:591    .text:0000000000001606 $d
           ps2_kbd.s:591    .text:000000000000160a _KBD_LED
           ps2_kbd.s:591    .text:0000000000001612 $t
           ps2_kbd.s:591    .text:0000000000001614 KBD_LED
           ps2_kbd.s:616    .text:0000000000001668 $d
           ps2_kbd.s:616    .text:000000000000166c _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001678 CAPS_LED
           ps2_kbd.s:633    .text:00000000000016a2 $d
           ps2_kbd.s:633    .text:00000000000016a6 _WKEY
ARM GAS  forth.s 			page 178


           ps2_kbd.s:633    .text:00000000000016b0 WKEY
           ps2_kbd.s:635    .text:00000000000016b4 $d
           ps2_kbd.s:640    .text:00000000000016cc $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016ec $t
         spi-flash.s:83     .text:000000000000178e $d
         spi-flash.s:83     .text:0000000000001792 _CHIP_SEL
         spi-flash.s:83     .text:000000000000179c CHIP_SEL
         spi-flash.s:95     .text:00000000000017ba $d
         spi-flash.s:95     .text:00000000000017be _CHIP_DSEL
         spi-flash.s:95     .text:00000000000017c8 $t
         spi-flash.s:95     .text:00000000000017c8 CHIP_DSEL
         spi-flash.s:111    .text:00000000000017f6 $d
         spi-flash.s:111    .text:00000000000017fa _RD_BYTE
         spi-flash.s:111    .text:0000000000001802 $t
         spi-flash.s:111    .text:0000000000001804 RD_BYTE
         spi-flash.s:131    .text:000000000000182c $d
         spi-flash.s:131    .text:0000000000001830 _WR_BYTE
         spi-flash.s:131    .text:0000000000001838 $t
         spi-flash.s:131    .text:0000000000001838 WR_BYTE
         spi-flash.s:149    .text:000000000000185c $d
         spi-flash.s:149    .text:0000000000001860 _WR_DIS
         spi-flash.s:149    .text:0000000000001868 WR_DIS
         spi-flash.s:151    .text:000000000000186c $d
         spi-flash.s:161    .text:0000000000001888 _WR_ENBL
         spi-flash.s:161    .text:0000000000001890 $t
         spi-flash.s:161    .text:0000000000001890 WR_ENBL
         spi-flash.s:163    .text:0000000000001894 $d
         spi-flash.s:173    .text:00000000000018b0 _RD_SR
         spi-flash.s:173    .text:00000000000018b6 $t
         spi-flash.s:173    .text:00000000000018b8 RD_SR
         spi-flash.s:175    .text:00000000000018bc $d
         spi-flash.s:183    .text:00000000000018e0 sr_cmd
         spi-flash.s:189    .text:00000000000018e7 _SEND_ADR
         spi-flash.s:189    .text:00000000000018f0 $t
         spi-flash.s:189    .text:00000000000018f0 SEND_ADR
         spi-flash.s:191    .text:00000000000018f4 $d
             forth.s:511    .text:00000000000023ec RSHIFT
         spi-flash.s:206    .text:0000000000001928 _WAIT_DONE
         spi-flash.s:206    .text:0000000000001932 $t
         spi-flash.s:206    .text:0000000000001934 WAIT_DONE
         spi-flash.s:208    .text:0000000000001938 $d
         spi-flash.s:221    .text:0000000000001968 _ERASE_BLK
         spi-flash.s:221    .text:0000000000001972 $t
         spi-flash.s:221    .text:0000000000001974 ERASE_BLK
         spi-flash.s:223    .text:0000000000001978 $d
         spi-flash.s:236    .text:00000000000019a0 _ERASE_CHIP
         spi-flash.s:236    .text:00000000000019ac ERASE_CHIP
         spi-flash.s:238    .text:00000000000019b0 $d
         spi-flash.s:254    .text:00000000000019e0 _RD_BLK
         spi-flash.s:254    .text:00000000000019e8 RD_BLK
         spi-flash.s:256    .text:00000000000019ec $d
         spi-flash.s:276    .text:0000000000001a34 _WR_BLK
         spi-flash.s:276    .text:0000000000001a3c WR_BLK
ARM GAS  forth.s 			page 179


         spi-flash.s:278    .text:0000000000001a40 $d
             forth.s:2109   .text:00000000000032a0 HDOT
             float.s:44     *ABS*:0000000000ffffff MAX_MANTISSA
             float.s:59     .text:0000000000001a94 PREP_FP
             float.s:60     .text:0000000000001a94 $t
             float.s:83     .text:0000000000001aac digit_add
             float.s:104    .text:0000000000001ac2 digit_sub
             float.s:128    .text:0000000000001ae6 digit_prod
             float.s:142    .text:0000000000001afe $d
             float.s:142    .text:0000000000001b02 _BCD_ADD
             float.s:142    .text:0000000000001b08 BCD_ADD
             float.s:167    .text:0000000000001b42 $d
             float.s:167    .text:0000000000001b46 _BCD_SUB
             float.s:167    .text:0000000000001b4c BCD_SUB
             float.s:192    .text:0000000000001b86 $d
             float.s:192    .text:0000000000001b8a _BCD_1P
             float.s:192    .text:0000000000001b90 $t
             float.s:192    .text:0000000000001b90 BCD_1P
             float.s:221    .text:0000000000001bdc $d
             float.s:221    .text:0000000000001be0 _BCD_NEG
             float.s:221    .text:0000000000001be8 $t
             float.s:221    .text:0000000000001be8 BCD_NEG
             float.s:232    .text:0000000000001bf6 $d
             float.s:232    .text:0000000000001bfa _BCD_STAR
             float.s:232    .text:0000000000001c00 BCD_STAR
             float.s:240    .text:0000000000001c02 $d
             float.s:240    .text:0000000000001c06 _BCD_BIN
             float.s:240    .text:0000000000001c0e $t
             float.s:240    .text:0000000000001c10 BCD_BIN
             float.s:262    .text:0000000000001c40 $d
             float.s:262    .text:0000000000001c44 _BIN_BCD
             float.s:262    .text:0000000000001c4c $t
             float.s:262    .text:0000000000001c4c BIN_BCD
             float.s:291    .text:0000000000001c96 $d
             float.s:291    .text:0000000000001c9a _FPLUS
             float.s:291    .text:0000000000001ca0 FPLUS
             float.s:294    .text:0000000000001ca4 $d
             float.s:300    .text:0000000000001cac _FMINUS
             float.s:300    .text:0000000000001cb0 FMINUS
             float.s:303    .text:0000000000001cb4 $d
             float.s:314    .text:0000000000001cbc _FSLH
             float.s:314    .text:0000000000001cc0 FSLH
             float.s:317    .text:0000000000001cc4 $d
             float.s:324    .text:0000000000001ccc _FNEG
             float.s:324    .text:0000000000001cd4 $t
             float.s:324    .text:0000000000001cd4 FNEG
             float.s:327    .text:0000000000001cd8 $d
             float.s:333    .text:0000000000001ce0 _INT
             float.s:333    .text:0000000000001ce4 $t
             float.s:333    .text:0000000000001ce4 INT
             float.s:336    .text:0000000000001ce8 $d
             float.s:342    .text:0000000000001cf0 _UFLOAT
             float.s:342    .text:0000000000001cf8 UFLOAT
             float.s:345    .text:0000000000001cfc $d
             float.s:351    .text:0000000000001d04 _FDOT
             float.s:351    .text:0000000000001d08 FDOT
             float.s:354    .text:0000000000001d0c $d
ARM GAS  forth.s 			page 180


             float.s:359    .text:0000000000001d10 ACCUM_DIGITS
             float.s:360    .text:0000000000001d10 $t
             float.s:361    .text:0000000000001d14 $d
             forth.s:1756   .text:0000000000002ef4 DIGTQ
             float.s:388    .text:0000000000001d90 MANTISSA
             float.s:389    .text:0000000000001d90 $t
             float.s:390    .text:0000000000001d94 $d
             forth.s:689    .text:000000000000254c NROT
             float.s:409    .text:0000000000001dd8 EXPONENT
             float.s:410    .text:0000000000001dd8 $t
             float.s:411    .text:0000000000001ddc $d
             forth.s:1815   .text:0000000000002fa0 DASHQ
             float.s:422    .text:0000000000001e00 FORMAT_FLOAT
             float.s:423    .text:0000000000001e00 $t
             float.s:424    .text:0000000000001e04 $d
             float.s:454    .text:0000000000001e80 BOUND_MANTISSA
             float.s:455    .text:0000000000001e80 $t
             float.s:456    .text:0000000000001e84 $d
             forth.s:859    .text:00000000000026b4 UGREAT
             float.s:470    .text:0000000000001ecc SCALE_UP
             forth.s:1322   .text:0000000000002a94 SLASH
             forth.s:786    .text:0000000000002620 INVER
             float.s:488    .text:0000000000001f0c _FLOATQ
             float.s:488    .text:0000000000001f14 FLOATQ
             float.s:490    .text:0000000000001f18 $d
             forth.s:1739   .text:0000000000002ed0 DECIM
             forth.s:700    .text:000000000000255a _DDROP
             forth.s:3556   .text:00000000000043a0 TRACE
             forth.s:812    .text:0000000000002658 ZEQUAL
             float.s:566    .text:0000000000002070 _NUMBER
             float.s:566    .text:0000000000002078 NUMBER
             float.s:568    .text:000000000000207c $d
             forth.s:1840   .text:0000000000002fd0 INTQ
             forth.s:80     .text:0000000000002098 $t
             forth.s:103    .text:00000000000020b0 COMPI_NEST
             forth.s:116    .text:00000000000020ce TSTDIN
             forth.s:123    .text:00000000000020d8 TSTDOUT
             forth.s:132    .text:00000000000020e2 $d
             forth.s:132    .text:00000000000020e6 _QKEY
             forth.s:132    .text:00000000000020ec QKEY
             forth.s:134    .text:00000000000020f0 $d
             forth.s:1460   .text:0000000000002bf8 ATEXE
             forth.s:142    .text:0000000000002100 _KEY
             forth.s:142    .text:0000000000002104 $t
             forth.s:142    .text:0000000000002104 KEY
             forth.s:144    .text:0000000000002108 KEY1
             forth.s:145    .text:0000000000002108 $d
             forth.s:154    .text:0000000000002120 _EMIT
             forth.s:156    .text:000000000000212c $d
             forth.s:190    .text:000000000000213c _RAND
             forth.s:190    .text:0000000000002144 RAND
             forth.s:192    .text:0000000000002148 $d
             forth.s:802    .text:0000000000002644 ABSS
             forth.s:990    .text:000000000000279c SEED
             forth.s:1311   .text:0000000000002a7c MODD
             forth.s:221    .text:00000000000021b8 _PAUSE
             forth.s:221    .text:00000000000021be $t
ARM GAS  forth.s 			page 181


             forth.s:221    .text:00000000000021c0 PAUSE
             forth.s:223    .text:00000000000021c4 $d
             forth.s:1008   .text:00000000000027c4 TIMER
             forth.s:225    .text:00000000000021cc PAUSE_LOOP
             forth.s:230    .text:00000000000021e4 PAUSE_EXIT
             forth.s:237    .text:00000000000021ec _ULED
             forth.s:237    .text:00000000000021f4 ULED
             forth.s:246    .text:0000000000002210 ULED_OFF
             forth.s:260    .text:0000000000002214 $d
             forth.s:260    .text:0000000000002218 _NOP
             forth.s:260    .text:000000000000221c $t
             forth.s:260    .text:000000000000221c NOP
             forth.s:277    .text:0000000000002228 $d
             forth.s:277    .text:000000000000222c _EXECU
             forth.s:277    .text:0000000000002234 $t
             forth.s:277    .text:0000000000002234 EXECU
             forth.s:297    .text:0000000000002250 NEXT1
             forth.s:315    .text:000000000000226c QBRAN1
             forth.s:332    .text:0000000000002278 $d
             forth.s:332    .text:000000000000227c _EXIT
             forth.s:332    .text:0000000000002284 EXIT
             forth.s:333    .text:0000000000002284 $d
             forth.s:339    .text:000000000000228c _STORE
             forth.s:339    .text:000000000000228e $t
             forth.s:349    .text:000000000000229c $d
             forth.s:349    .text:00000000000022a0 _AT
             forth.s:349    .text:00000000000022a2 $t
             forth.s:357    .text:00000000000022a8 $d
             forth.s:357    .text:00000000000022ac _CSTOR
             forth.s:367    .text:00000000000022bc $d
             forth.s:367    .text:00000000000022c0 _CAT
             forth.s:375    .text:00000000000022c8 $d
             forth.s:375    .text:00000000000022cc _RFROM
             forth.s:384    .text:00000000000022da $d
             forth.s:384    .text:00000000000022de _RAT
             forth.s:393    .text:00000000000022ee $d
             forth.s:393    .text:00000000000022f2 _TOR
             forth.s:402    .text:0000000000002302 $d
             forth.s:402    .text:0000000000002306 _RPSTOR
             forth.s:402    .text:000000000000230a $t
             forth.s:402    .text:000000000000230c RPSTOR
             forth.s:411    .text:0000000000002314 $d
             forth.s:411    .text:0000000000002318 _SPSTOR
             forth.s:411    .text:000000000000231c $t
             forth.s:411    .text:000000000000231c SPSTOR
             forth.s:420    .text:0000000000002324 $d
             forth.s:420    .text:0000000000002328 _SPAT
             forth.s:420    .text:000000000000232c $t
             forth.s:420    .text:000000000000232c SPAT
             forth.s:429    .text:0000000000002334 $d
             forth.s:429    .text:0000000000002338 _DROP
             forth.s:437    .text:0000000000002346 $d
             forth.s:437    .text:000000000000234a _DUPP
             forth.s:437    .text:000000000000234e $t
             forth.s:445    .text:0000000000002356 $d
             forth.s:445    .text:000000000000235a _SWAP
             forth.s:455    .text:0000000000002368 $d
ARM GAS  forth.s 			page 182


             forth.s:455    .text:000000000000236c _OVER
             forth.s:464    .text:000000000000237c $d
             forth.s:464    .text:0000000000002380 _ZLESS
             forth.s:464    .text:0000000000002384 ZLESS
             forth.s:472    .text:000000000000238a $d
             forth.s:472    .text:000000000000238e _ANDD
             forth.s:472    .text:0000000000002392 $t
             forth.s:481    .text:000000000000239e $d
             forth.s:481    .text:00000000000023a2 _ORR
             forth.s:490    .text:00000000000023b2 $d
             forth.s:490    .text:00000000000023b6 _XORR
             forth.s:490    .text:00000000000023ba $t
             forth.s:499    .text:00000000000023c6 $d
             forth.s:499    .text:00000000000023ca _UPLUS
             forth.s:499    .text:00000000000023ce $t
             forth.s:499    .text:00000000000023d0 UPLUS
             forth.s:511    .text:00000000000023e0 $d
             forth.s:511    .text:00000000000023e4 _RSHIFT
             forth.s:520    .text:00000000000023f6 $d
             forth.s:520    .text:00000000000023fa _LSHIFT
             forth.s:529    .text:000000000000240e $d
             forth.s:529    .text:0000000000002412 _PLUS
             forth.s:529    .text:0000000000002414 $t
             forth.s:538    .text:000000000000241c $d
             forth.s:538    .text:0000000000002420 _SUBB
             forth.s:538    .text:0000000000002422 $t
             forth.s:547    .text:000000000000242e $d
             forth.s:547    .text:0000000000002432 _STAR
             forth.s:547    .text:0000000000002434 $t
             forth.s:556    .text:000000000000243e $d
             forth.s:556    .text:0000000000002442 _UMSTA
             forth.s:556    .text:0000000000002446 $t
             forth.s:556    .text:0000000000002448 UMSTA
             forth.s:568    .text:0000000000002454 $d
             forth.s:568    .text:0000000000002458 _MSTAR
             forth.s:568    .text:000000000000245c MSTAR
             forth.s:579    .text:0000000000002468 $d
             forth.s:579    .text:000000000000246c _ONEP
             forth.s:587    .text:0000000000002476 $d
             forth.s:587    .text:000000000000247a _ONEM
             forth.s:595    .text:0000000000002486 $d
             forth.s:595    .text:000000000000248a _TWOP
             forth.s:595    .text:0000000000002490 TWOP
             forth.s:603    .text:0000000000002496 $d
             forth.s:603    .text:000000000000249a _TWOM
             forth.s:603    .text:00000000000024a0 TWOM
             forth.s:611    .text:00000000000024a6 $d
             forth.s:611    .text:00000000000024aa _CELLP
             forth.s:611    .text:00000000000024b0 $t
             forth.s:611    .text:00000000000024b0 CELLP
             forth.s:619    .text:00000000000024b6 $d
             forth.s:619    .text:00000000000024ba _CELLM
             forth.s:619    .text:00000000000024c0 $t
             forth.s:619    .text:00000000000024c0 CELLM
             forth.s:627    .text:00000000000024c6 $d
             forth.s:627    .text:00000000000024ca _BLANK
             forth.s:627    .text:00000000000024d0 BLANK
ARM GAS  forth.s 			page 183


             forth.s:636    .text:00000000000024da $d
             forth.s:636    .text:00000000000024de _CELLS
             forth.s:636    .text:00000000000024e4 $t
             forth.s:636    .text:00000000000024e4 CELLS
             forth.s:644    .text:00000000000024ea $d
             forth.s:644    .text:00000000000024ee _CELLSL
             forth.s:644    .text:00000000000024f4 $t
             forth.s:644    .text:00000000000024f4 CELLSL
             forth.s:652    .text:00000000000024fa $d
             forth.s:652    .text:00000000000024fe _TWOST
             forth.s:652    .text:0000000000002504 TWOST
             forth.s:660    .text:000000000000250a $d
             forth.s:660    .text:000000000000250e _TWOSL
             forth.s:668    .text:000000000000251a $d
             forth.s:668    .text:000000000000251e _QDUP
             forth.s:678    .text:000000000000252e $d
             forth.s:678    .text:0000000000002532 _ROT
             forth.s:678    .text:0000000000002536 $t
             forth.s:689    .text:0000000000002542 $d
             forth.s:689    .text:0000000000002546 _NROT
             forth.s:700    .text:0000000000002556 $d
             forth.s:700    .text:0000000000002560 $t
             forth.s:709    .text:000000000000256a $d
             forth.s:709    .text:000000000000256e _TDROP
             forth.s:709    .text:0000000000002574 $t
             forth.s:718    .text:000000000000257e $d
             forth.s:718    .text:0000000000002582 _DDUP
             forth.s:728    .text:0000000000002594 $d
             forth.s:728    .text:0000000000002598 _DPLUS
             forth.s:728    .text:000000000000259c DPLUS
             forth.s:741    .text:00000000000025b0 $d
             forth.s:741    .text:00000000000025b4 _DABS
             forth.s:741    .text:00000000000025bc DABS
             forth.s:757    .text:00000000000025d8 $d
             forth.s:757    .text:00000000000025dc _UDGREAT
             forth.s:757    .text:00000000000025e0 $t
             forth.s:757    .text:00000000000025e0 UDGREAT
             forth.s:774    .text:00000000000025fc $d
             forth.s:774    .text:0000000000002600 _DZEQUAL
             forth.s:774    .text:0000000000002604 $t
             forth.s:774    .text:0000000000002604 DZEQUAL
             forth.s:786    .text:0000000000002616 $d
             forth.s:786    .text:000000000000261a _INVER
             forth.s:786    .text:000000000000261e $t
             forth.s:794    .text:0000000000002626 $d
             forth.s:794    .text:000000000000262a _NEGAT
             forth.s:794    .text:0000000000002634 NEGAT
             forth.s:802    .text:000000000000263a $d
             forth.s:802    .text:000000000000263e _ABSS
             forth.s:802    .text:0000000000002642 $t
             forth.s:812    .text:000000000000264e $d
             forth.s:812    .text:0000000000002652 _ZEQUAL
             forth.s:823    .text:0000000000002666 $d
             forth.s:823    .text:000000000000266a _EQUAL
             forth.s:823    .text:000000000000266c $t
             forth.s:835    .text:000000000000267c $d
             forth.s:835    .text:0000000000002680 _ULESS
ARM GAS  forth.s 			page 184


             forth.s:847    .text:0000000000002694 $d
             forth.s:847    .text:0000000000002698 _LESS
             forth.s:847    .text:000000000000269a $t
             forth.s:847    .text:000000000000269c LESS
             forth.s:859    .text:00000000000026ac $d
             forth.s:859    .text:00000000000026b0 _UGREAT
             forth.s:871    .text:00000000000026c4 $d
             forth.s:871    .text:00000000000026c8 _GREAT
             forth.s:871    .text:00000000000026ca $t
             forth.s:871    .text:00000000000026cc GREAT
             forth.s:883    .text:00000000000026dc $d
             forth.s:883    .text:00000000000026e0 _MAX
             forth.s:883    .text:00000000000026e4 $t
             forth.s:883    .text:00000000000026e4 MAX
             forth.s:894    .text:00000000000026f0 $d
             forth.s:894    .text:00000000000026f4 _MIN
             forth.s:894    .text:00000000000026f8 $t
             forth.s:894    .text:00000000000026f8 MIN
             forth.s:905    .text:0000000000002704 $d
             forth.s:905    .text:0000000000002708 _PSTOR
             forth.s:905    .text:000000000000270c PSTOR
             forth.s:917    .text:000000000000271c $d
             forth.s:917    .text:0000000000002720 _DSTOR
             forth.s:917    .text:0000000000002724 DSTOR
             forth.s:929    .text:0000000000002738 $d
             forth.s:929    .text:000000000000273c _DAT
             forth.s:929    .text:0000000000002740 DAT
             forth.s:939    .text:000000000000274a $d
             forth.s:939    .text:000000000000274e _COUNT
             forth.s:939    .text:0000000000002754 $t
             forth.s:949    .text:0000000000002760 $d
             forth.s:949    .text:0000000000002764 _DNEGA
             forth.s:949    .text:000000000000276c $t
             forth.s:949    .text:000000000000276c DNEGA
             forth.s:966    .text:000000000000277c DOVAR
             forth.s:977    .text:0000000000002788 DOCON
             forth.s:990    .text:0000000000002792 $d
             forth.s:990    .text:0000000000002796 _SEED
             forth.s:999    .text:00000000000027a6 $d
             forth.s:999    .text:00000000000027aa _MSEC
             forth.s:999    .text:00000000000027b0 MSEC
             forth.s:1008   .text:00000000000027ba $d
             forth.s:1008   .text:00000000000027be _TIMER
             forth.s:1008   .text:00000000000027c4 $t
             forth.s:1017   .text:00000000000027ce $d
             forth.s:1017   .text:00000000000027d2 _TBOOT
             forth.s:1017   .text:00000000000027d8 $t
             forth.s:1017   .text:00000000000027d8 TBOOT
             forth.s:1026   .text:00000000000027e2 $d
             forth.s:1026   .text:00000000000027e6 _BASE
             forth.s:1036   .text:00000000000027f6 TEMP
             forth.s:1045   .text:0000000000002800 $d
             forth.s:1045   .text:0000000000002804 _SPAN
             forth.s:1045   .text:000000000000280c SPAN
             forth.s:1054   .text:0000000000002816 $d
             forth.s:1054   .text:000000000000281a _INN
             forth.s:1054   .text:000000000000281e $t
ARM GAS  forth.s 			page 185


             forth.s:1054   .text:0000000000002820 INN
             forth.s:1064   .text:000000000000282a $d
             forth.s:1064   .text:000000000000282e _NTIB
             forth.s:1064   .text:0000000000002834 NTIB
             forth.s:1073   .text:000000000000283e $d
             forth.s:1073   .text:0000000000002842 _TEVAL
             forth.s:1073   .text:0000000000002848 $t
             forth.s:1073   .text:0000000000002848 TEVAL
             forth.s:1083   .text:0000000000002852 $d
             forth.s:1083   .text:0000000000002856 _HLD
             forth.s:1083   .text:000000000000285a $t
             forth.s:1083   .text:000000000000285c HLD
             forth.s:1093   .text:0000000000002866 $d
             forth.s:1093   .text:000000000000286a _CNTXT
             forth.s:1093   .text:0000000000002872 $t
             forth.s:1093   .text:0000000000002874 CNTXT
             forth.s:1094   .text:0000000000002874 CRRNT
             forth.s:1104   .text:000000000000287e $d
             forth.s:1104   .text:0000000000002882 _CPP
             forth.s:1104   .text:0000000000002888 CPP
             forth.s:1114   .text:0000000000002892 $d
             forth.s:1114   .text:0000000000002896 _FCP
             forth.s:1114   .text:000000000000289a $t
             forth.s:1114   .text:000000000000289c FCP
             forth.s:1124   .text:00000000000028a8 $d
             forth.s:1124   .text:00000000000028ac _LAST
             forth.s:1124   .text:00000000000028b4 LAST
             forth.s:1138   .text:00000000000028c0 $d
             forth.s:1138   .text:00000000000028c4 _USER_BEGIN
             forth.s:1138   .text:00000000000028d0 USER_BEGIN
             forth.s:1142   .text:00000000000028dc USR_BGN_ADR
             forth.s:1143   .text:00000000000028dc $d
             forth.s:1149   .text:00000000000028e4 _USER_END
             forth.s:1149   .text:00000000000028f0 USER_END
             forth.s:1153   .text:00000000000028fc USER_END_ADR
             forth.s:1154   .text:00000000000028fc $d
             forth.s:1166   .text:0000000000002904 _WITHI
             forth.s:1166   .text:000000000000290c WITHI
             forth.s:1168   .text:0000000000002910 $d
             forth.s:1183   .text:0000000000002930 _UMMOD
             forth.s:1183   .text:0000000000002938 UMMOD
             forth.s:1187   .text:0000000000002942 UMMOD0
             forth.s:1194   .text:0000000000002952 UMMOD1
             forth.s:1200   .text:000000000000295c UMMOD2
             forth.s:1213   .text:0000000000002968 $d
             forth.s:1213   .text:000000000000296c _MSMOD
             forth.s:1213   .text:0000000000002972 $t
             forth.s:1213   .text:0000000000002974 MSMOD
             forth.s:1215   .text:0000000000002978 $d
             forth.s:1224   .text:00000000000029a0 MMOD1
             forth.s:1231   .text:00000000000029bc MMOD2
             forth.s:1239   .text:00000000000029dc MMOD3
             forth.s:1246   .text:00000000000029e4 _D2STAR
             forth.s:1246   .text:00000000000029e8 $t
             forth.s:1246   .text:00000000000029e8 D2STAR
             forth.s:1263   .text:00000000000029fa $d
             forth.s:1263   .text:00000000000029fe _DSLMOD
ARM GAS  forth.s 			page 186


             forth.s:1263   .text:0000000000002a04 $t
             forth.s:1263   .text:0000000000002a04 DSLMOD
             forth.s:1298   .text:0000000000002a50 $d
             forth.s:1298   .text:0000000000002a54 _SLMOD
             forth.s:1300   .text:0000000000002a60 $d
             forth.s:1311   .text:0000000000002a78 _MODD
             forth.s:1311   .text:0000000000002a7c $t
             forth.s:1313   .text:0000000000002a80 $d
             forth.s:1322   .text:0000000000002a90 _SLASH
             forth.s:1322   .text:0000000000002a92 $t
             forth.s:1324   .text:0000000000002a98 $d
             forth.s:1335   .text:0000000000002aac _SSMOD
             forth.s:1335   .text:0000000000002ab2 $t
             forth.s:1335   .text:0000000000002ab4 SSMOD
             forth.s:1337   .text:0000000000002ab8 $d
             forth.s:1349   .text:0000000000002ad0 _STASL
             forth.s:1349   .text:0000000000002ad4 STASL
             forth.s:1351   .text:0000000000002ad8 $d
             forth.s:1365   .text:0000000000002aec _ALGND
             forth.s:1365   .text:0000000000002af4 $t
             forth.s:1365   .text:0000000000002af4 ALGND
             forth.s:1376   .text:0000000000002b04 $d
             forth.s:1376   .text:0000000000002b08 _TCHAR
             forth.s:1376   .text:0000000000002b0e $t
             forth.s:1376   .text:0000000000002b10 TCHAR
             forth.s:1378   .text:0000000000002b14 $d
             forth.s:1388   .text:0000000000002b4c TCHA1
             forth.s:1396   .text:0000000000002b54 _DEPTH
             forth.s:1396   .text:0000000000002b5a $t
             forth.s:1396   .text:0000000000002b5c DEPTH
             forth.s:1408   .text:0000000000002b74 $d
             forth.s:1408   .text:0000000000002b78 _PICK
             forth.s:1408   .text:0000000000002b80 PICK
             forth.s:1410   .text:0000000000002b84 $d
             forth.s:1426   .text:0000000000002ba0 _HERE
             forth.s:1426   .text:0000000000002ba8 HERE
             forth.s:1428   .text:0000000000002bac $d
             forth.s:1437   .text:0000000000002bbc _PAD
             forth.s:1437   .text:0000000000002bc0 $t
             forth.s:1439   .text:0000000000002bc4 $d
             forth.s:1450   .text:0000000000002bdc _TIB
             forth.s:1450   .text:0000000000002be0 $t
             forth.s:1450   .text:0000000000002be0 TIB
             forth.s:1460   .text:0000000000002bea $d
             forth.s:1460   .text:0000000000002bee _ATEXE
             forth.s:1473   .text:0000000000002c0c $d
             forth.s:1473   .text:0000000000002c10 _CMOVE
             forth.s:1473   .text:0000000000002c16 $t
             forth.s:1473   .text:0000000000002c18 CMOVE
             forth.s:1480   .text:0000000000002c2a CMOV1
             forth.s:1477   .text:0000000000002c22 CMOV0
             forth.s:1485   .text:0000000000002c34 CMOV2
             forth.s:1493   .text:0000000000002c3c $d
             forth.s:1493   .text:0000000000002c40 _MOVE
             forth.s:1511   .text:0000000000002c72 MOVE1
             forth.s:1508   .text:0000000000002c6e MOVE3
             forth.s:1505   .text:0000000000002c6a MOVE0
ARM GAS  forth.s 			page 187


             forth.s:1516   .text:0000000000002c7c MOVE2
             forth.s:1525   .text:0000000000002c84 $d
             forth.s:1525   .text:0000000000002c88 _FILL
             forth.s:1533   .text:0000000000002c9e FILL2
             forth.s:1529   .text:0000000000002c96 FILL1
             forth.s:1543   .text:0000000000002ca6 $d
             forth.s:1543   .text:0000000000002caa _PACKS
             forth.s:1543   .text:0000000000002cb0 $t
             forth.s:1543   .text:0000000000002cb0 PACKS
             forth.s:1545   .text:0000000000002cb4 $d
             forth.s:1574   .text:0000000000002d0c _DIGIT
             forth.s:1574   .text:0000000000002d12 $t
             forth.s:1574   .text:0000000000002d14 DIGIT
             forth.s:1576   .text:0000000000002d18 $d
             forth.s:1591   .text:0000000000002d4c _EXTRC
             forth.s:1591   .text:0000000000002d54 $t
             forth.s:1591   .text:0000000000002d54 EXTRC
             forth.s:1593   .text:0000000000002d58 $d
             forth.s:1605   .text:0000000000002d78 _BDIGS
             forth.s:1605   .text:0000000000002d7c BDIGS
             forth.s:1607   .text:0000000000002d80 $d
             forth.s:1617   .text:0000000000002d94 _HOLD
             forth.s:1619   .text:0000000000002da0 $d
             forth.s:1635   .text:0000000000002dc4 _DIG
             forth.s:1635   .text:0000000000002dc6 $t
             forth.s:1635   .text:0000000000002dc8 DIG
             forth.s:1637   .text:0000000000002dcc $d
             forth.s:1649   .text:0000000000002de4 _DIGS
             forth.s:1649   .text:0000000000002de8 DIGS
             forth.s:1651   .text:0000000000002dec DIGS1
             forth.s:1652   .text:0000000000002dec $d
             forth.s:1656   .text:0000000000002e04 DIGS2
             forth.s:1665   .text:0000000000002e0c _SIGN
             forth.s:1665   .text:0000000000002e14 SIGN
             forth.s:1667   .text:0000000000002e18 $d
             forth.s:1671   .text:0000000000002e30 SIGN1
             forth.s:1679   .text:0000000000002e38 _EDIGS
             forth.s:1679   .text:0000000000002e3c EDIGS
             forth.s:1681   .text:0000000000002e40 $d
             forth.s:1696   .text:0000000000002e5c STRR
             forth.s:1697   .text:0000000000002e5c $t
             forth.s:1698   .text:0000000000002e60 $d
             forth.s:1714   .text:0000000000002e88 _HEX
             forth.s:1714   .text:0000000000002e8c $t
             forth.s:1714   .text:0000000000002e8c HEX
             forth.s:1716   .text:0000000000002e90 $d
             forth.s:1727   .text:0000000000002ea8 _BIN
             forth.s:1727   .text:0000000000002eac $t
             forth.s:1727   .text:0000000000002eac BIN
             forth.s:1729   .text:0000000000002eb0 $d
             forth.s:1739   .text:0000000000002ec8 _DECIM
             forth.s:1739   .text:0000000000002ed0 $t
             forth.s:1741   .text:0000000000002ed4 $d
             forth.s:1756   .text:0000000000002eec _DIGTQ
             forth.s:1758   .text:0000000000002ef8 $d
             forth.s:1771   .text:0000000000002f40 DGTQ1
             forth.s:1786   .text:0000000000002f50 PARSE_DIGITS
ARM GAS  forth.s 			page 188


             forth.s:1787   .text:0000000000002f50 $t
             forth.s:1815   .text:0000000000002f94 $d
             forth.s:1815   .text:0000000000002f98 _DASHQ
             forth.s:1815   .text:0000000000002f9e $t
             forth.s:1840   .text:0000000000002fc4 $d
             forth.s:1840   .text:0000000000002fc8 _INTQ
             forth.s:1842   .text:0000000000002fd4 $d
             forth.s:1906   .text:00000000000030cc _SPACE
             forth.s:1906   .text:00000000000030d2 $t
             forth.s:1908   .text:00000000000030d8 $d
             forth.s:1917   .text:00000000000030e8 _SPACS
             forth.s:1917   .text:00000000000030f0 SPACS
             forth.s:1919   .text:00000000000030f4 $d
             forth.s:1925   .text:0000000000003110 CHAR2
             forth.s:1923   .text:000000000000310c CHAR1
             forth.s:1934   .text:0000000000003120 _TYPEE
             forth.s:1936   .text:000000000000312c $d
             forth.s:1942   .text:0000000000003144 TYPE2
             forth.s:1938   .text:0000000000003138 TYPE1
             forth.s:1952   .text:0000000000003158 _CR
             forth.s:1954   .text:0000000000003160 $d
             forth.s:1966   .text:000000000000317c DOSTR
             forth.s:1967   .text:000000000000317c $t
             forth.s:1969   .text:0000000000003180 $d
             forth.s:1987   .text:00000000000031a8 STRQP
             forth.s:1988   .text:00000000000031a8 $t
             forth.s:1989   .text:00000000000031ac $d
             forth.s:1998   .text:00000000000031b4 DOTST
             forth.s:1999   .text:00000000000031b4 $t
             forth.s:2000   .text:00000000000031b8 $d
             forth.s:2010   .text:00000000000031c4 DOTQP
             forth.s:2011   .text:00000000000031c4 $t
             forth.s:2012   .text:00000000000031c8 $d
             forth.s:2022   .text:00000000000031d8 _DOTR
             forth.s:2022   .text:00000000000031dc DOTR
             forth.s:2024   .text:00000000000031e0 $d
             forth.s:2039   .text:0000000000003204 _UDOTR
             forth.s:2039   .text:0000000000003208 $t
             forth.s:2039   .text:0000000000003208 UDOTR
             forth.s:2041   .text:000000000000320c $d
             forth.s:2057   .text:0000000000003238 _UDOT
             forth.s:2057   .text:000000000000323c UDOT
             forth.s:2059   .text:0000000000003240 $d
             forth.s:2072   .text:000000000000325c _DOT
             forth.s:2072   .text:000000000000325e $t
             forth.s:2074   .text:0000000000003264 $d
             forth.s:2081   .text:0000000000003288 DOT1
             forth.s:2109   .text:000000000000329c _HDOT
             forth.s:2111   .text:00000000000032a4 $d
             forth.s:2126   .text:00000000000032c8 _QUEST
             forth.s:2126   .text:00000000000032ca $t
             forth.s:2126   .text:00000000000032cc QUEST
             forth.s:2128   .text:00000000000032d0 $d
             forth.s:2142   .text:00000000000032dc PARS
             forth.s:2143   .text:00000000000032dc $t
             forth.s:2144   .text:00000000000032e0 $d
             forth.s:2210   .text:00000000000033f0 PARS8
ARM GAS  forth.s 			page 189


             forth.s:2174   .text:0000000000003364 PARS3
             forth.s:2157   .text:000000000000331c PARS1
             forth.s:2172   .text:0000000000003360 PARS2
             forth.s:2178   .text:0000000000003370 PARS4
             forth.s:2190   .text:00000000000033a0 PARS5
             forth.s:2197   .text:00000000000033c4 PARS6
             forth.s:2203   .text:00000000000033d8 PARS7
             forth.s:2221   .text:0000000000003404 _PARSE
             forth.s:2221   .text:000000000000340a $t
             forth.s:2221   .text:000000000000340c PARSE
             forth.s:2223   .text:0000000000003410 $d
             forth.s:2244   .text:0000000000003450 _DOTPR
             forth.s:2244   .text:0000000000003454 DOTPR
             forth.s:2246   .text:0000000000003458 $d
             forth.s:2257   .text:0000000000003470 _PAREN
             forth.s:2257   .text:0000000000003472 $t
             forth.s:2257   .text:0000000000003474 PAREN
             forth.s:2259   .text:0000000000003478 $d
             forth.s:2270   .text:0000000000003490 _BKSLA
             forth.s:2270   .text:0000000000003492 $t
             forth.s:2270   .text:0000000000003494 BKSLA
             forth.s:2272   .text:0000000000003498 $d
             forth.s:2283   .text:00000000000034b0 _CHAR
             forth.s:2283   .text:00000000000034b8 CHAR
             forth.s:2285   .text:00000000000034bc $d
             forth.s:2296   .text:00000000000034d4 _WORDD
             forth.s:2296   .text:00000000000034dc WORDD
             forth.s:2298   .text:00000000000034e0 $d
             forth.s:2310   .text:00000000000034f8 _TOKEN
             forth.s:2310   .text:00000000000034fe $t
             forth.s:2310   .text:0000000000003500 TOKEN
             forth.s:2312   .text:0000000000003504 $d
             forth.s:2472   .text:00000000000036e0 UPPER
             forth.s:2326   .text:0000000000003518 _NAMET
             forth.s:2326   .text:000000000000351e $t
             forth.s:2326   .text:0000000000003520 NAMET
             forth.s:2328   .text:0000000000003524 $d
             forth.s:2347   .text:0000000000003544 _SAMEQ
             forth.s:2347   .text:000000000000354a $t
             forth.s:2347   .text:000000000000354c SAMEQ
             forth.s:2349   .text:0000000000003550 $d
             forth.s:2366   .text:0000000000003598 SAME2
             forth.s:2351   .text:000000000000355c SAME1
             forth.s:2381   .text:00000000000035ac FIND
             forth.s:2382   .text:00000000000035ac $t
             forth.s:2383   .text:00000000000035b0 $d
             forth.s:2390   .text:00000000000035cc FIND1
             forth.s:2410   .text:0000000000003624 FIND6
             forth.s:2403   .text:000000000000360c FIND2
             forth.s:2408   .text:000000000000361c FIND3
             forth.s:2417   .text:000000000000363c FIND4
             forth.s:2423   .text:0000000000003658 FIND5
             forth.s:2439   .text:0000000000003680 _NAMEQ
             forth.s:2439   .text:0000000000003686 $t
             forth.s:2439   .text:0000000000003688 NAMEQ
             forth.s:2441   .text:000000000000368c $d
             forth.s:2456   .text:00000000000036a0 _ASCIZ
ARM GAS  forth.s 			page 190


             forth.s:2456   .text:00000000000036a6 $t
             forth.s:2456   .text:00000000000036a8 ASCIZ
             forth.s:2458   .text:00000000000036ac $d
             forth.s:2466   .text:00000000000036d0 $t
             forth.s:2472   .text:00000000000036d4 $d
             forth.s:2472   .text:00000000000036d8 _UPPER
             forth.s:2472   .text:00000000000036de $t
             forth.s:2474   .text:00000000000036e4 $d
             forth.s:2505   .text:0000000000003768 BKSP
             forth.s:2506   .text:0000000000003768 $t
             forth.s:2507   .text:000000000000376c $d
             forth.s:2521   .text:00000000000037b0 BACK1
             forth.s:2530   .text:00000000000037b4 TAP
             forth.s:2531   .text:00000000000037b4 $t
             forth.s:2532   .text:00000000000037b8 $d
             forth.s:2545   .text:00000000000037d0 KTAP
             forth.s:2546   .text:00000000000037d0 TTAP
             forth.s:2547   .text:00000000000037d0 $t
             forth.s:2548   .text:00000000000037d4 $d
             forth.s:2562   .text:0000000000003814 KTAP2
             forth.s:2559   .text:000000000000380c KTAP1
             forth.s:2574   .text:000000000000382c _ACCEP
             forth.s:2576   .text:0000000000003838 $d
             forth.s:2579   .text:0000000000003844 ACCP1
             forth.s:2595   .text:000000000000388c ACCP4
             forth.s:2591   .text:0000000000003880 ACCP2
             forth.s:2593   .text:0000000000003884 ACCP3
             forth.s:2606   .text:00000000000038a0 _QUERY
             forth.s:2606   .text:00000000000038a6 $t
             forth.s:2606   .text:00000000000038a8 QUERY
             forth.s:2608   .text:00000000000038ac $d
             forth.s:2628   .text:00000000000038e0 _ABORT
             forth.s:2628   .text:00000000000038e6 $t
             forth.s:2628   .text:00000000000038e8 ABORT
             forth.s:2630   .text:00000000000038ec ABORT1
             forth.s:2631   .text:00000000000038ec $d
             forth.s:2762   .text:0000000000003a90 QUIT
             forth.s:2646   .text:0000000000003914 ABORQ
             forth.s:2647   .text:0000000000003914 $t
             forth.s:2648   .text:0000000000003918 $d
             forth.s:2666   .text:000000000000393c _INTER
             forth.s:2668   .text:000000000000394c $d
             forth.s:2677   .text:0000000000003988 INTE1
             forth.s:2674   .text:000000000000397e $t
             forth.s:2675   .text:0000000000003980 $d
             forth.s:2681   .text:0000000000003998 INTE2
             forth.s:2688   .text:00000000000039a0 _LBRAC
             forth.s:2688   .text:00000000000039a2 $t
             forth.s:2688   .text:00000000000039a4 LBRAC
             forth.s:2690   .text:00000000000039a8 $d
             forth.s:2700   .text:00000000000039c0 _DOTOK
             forth.s:2700   .text:00000000000039c4 $t
             forth.s:2700   .text:00000000000039c4 DOTOK
             forth.s:2702   .text:00000000000039c8 $d
             forth.s:2708   .text:00000000000039ec DOTO1
             forth.s:2709   .text:00000000000039ec $d
             forth.s:2717   .text:00000000000039f8 _QSTAC
ARM GAS  forth.s 			page 191


             forth.s:2717   .text:0000000000003a00 QSTAC
             forth.s:2719   .text:0000000000003a04 $d
             forth.s:2721   .text:0000000000003a1a $t
             forth.s:2722   .text:0000000000003a1c $d
             forth.s:2729   .text:0000000000003a24 _EVAL
             forth.s:2731   .text:0000000000003a30 EVAL1
             forth.s:2732   .text:0000000000003a30 $d
             forth.s:2740   .text:0000000000003a58 EVAL2
             forth.s:2750   .text:0000000000003a68 _PRESE
             forth.s:2752   .text:0000000000003a74 $d
             forth.s:2762   .text:0000000000003a88 _QUIT
             forth.s:2763   .text:0000000000003a90 $d
             forth.s:2765   .text:0000000000003a9c QUIT1
             forth.s:2767   .text:0000000000003aa0 QUIT2
             forth.s:2777   .text:0000000000003ab4 _FORGET
             forth.s:2777   .text:0000000000003abc FORGET
             forth.s:2779   .text:0000000000003ac0 $d
             forth.s:3276   .text:0000000000004058 OVERT
             forth.s:2807   .text:0000000000003b08 $d
             forth.s:2807   .text:0000000000003b0c _TICK
             forth.s:2807   .text:0000000000003b0e $t
             forth.s:2807   .text:0000000000003b10 TICK
             forth.s:2809   .text:0000000000003b14 $d
             forth.s:2813   .text:0000000000003b28 TICK1
             forth.s:2821   .text:0000000000003b30 _ALLOT
             forth.s:2821   .text:0000000000003b36 $t
             forth.s:2821   .text:0000000000003b38 ALLOT
             forth.s:2823   .text:0000000000003b3c $d
             forth.s:2832   .text:0000000000003b4c _COMMA
             forth.s:2832   .text:0000000000003b4e $t
             forth.s:2832   .text:0000000000003b50 COMMA
             forth.s:2834   .text:0000000000003b54 $d
             forth.s:2848   .text:0000000000003b70 $d
             forth.s:2848   .text:0000000000003b74 _BCOMP
             forth.s:2848   .text:0000000000003b7e $t
             forth.s:2848   .text:0000000000003b80 BCOMP
             forth.s:2850   .text:0000000000003b84 $d
             forth.s:2860   .text:0000000000003b94 _COMPI
             forth.s:2860   .text:0000000000003b9c $t
             forth.s:2860   .text:0000000000003b9c COMPI
             forth.s:2862   .text:0000000000003ba0 $d
             forth.s:2878   .text:0000000000003bcc _LITER
             forth.s:2878   .text:0000000000003bd4 $t
             forth.s:2878   .text:0000000000003bd4 LITER
             forth.s:2880   .text:0000000000003bd8 $d
             forth.s:3315   .text:00000000000040b4 CALLC
             forth.s:2890   .text:0000000000003bec STRCQ
             forth.s:2891   .text:0000000000003bec $t
             forth.s:2892   .text:0000000000003bf0 $d
             forth.s:2914   .text:0000000000003c28 _FOR
             forth.s:2914   .text:0000000000003c2c $t
             forth.s:2914   .text:0000000000003c2c FOR
             forth.s:2916   .text:0000000000003c30 $d
             forth.s:2925   .text:0000000000003c48 _DO
             forth.s:2925   .text:0000000000003c4c DO
             forth.s:2927   .text:0000000000003c50 $d
             forth.s:2933   .text:0000000000003c7c DOPLOOP
ARM GAS  forth.s 			page 192


             forth.s:2934   .text:0000000000003c7c $t
             forth.s:2950   .text:0000000000003c9e $d
             forth.s:2950   .text:0000000000003ca2 _PLOOP
             forth.s:2950   .text:0000000000003ca8 $t
             forth.s:2950   .text:0000000000003ca8 PLOOP
             forth.s:2952   .text:0000000000003cac $d
             forth.s:2956   .text:0000000000003cc0 DOLOOP
             forth.s:2957   .text:0000000000003cc0 $t
             forth.s:2975   .text:0000000000003ce8 $d
             forth.s:2975   .text:0000000000003cec _LOOP
             forth.s:2975   .text:0000000000003cf4 LOOP
             forth.s:2977   .text:0000000000003cf8 $d
             forth.s:2988   .text:0000000000003d10 _BEGIN
             forth.s:2988   .text:0000000000003d16 $t
             forth.s:2988   .text:0000000000003d18 BEGIN
             forth.s:2990   .text:0000000000003d1c $d
             forth.s:2999   .text:0000000000003d24 $d
             forth.s:2999   .text:0000000000003d28 _FNEXT
             forth.s:2999   .text:0000000000003d30 FNEXT
             forth.s:3001   .text:0000000000003d34 $d
             forth.s:3009   .text:0000000000003d4c _I
             forth.s:3009   .text:0000000000003d4e $t
             forth.s:3009   .text:0000000000003d50 I
             forth.s:3018   .text:0000000000003d5c $d
             forth.s:3018   .text:0000000000003d60 _J
             forth.s:3018   .text:0000000000003d62 $t
             forth.s:3018   .text:0000000000003d64 J
             forth.s:3028   .text:0000000000003d70 $d
             forth.s:3028   .text:0000000000003d74 _UNTIL
             forth.s:3028   .text:0000000000003d7a $t
             forth.s:3028   .text:0000000000003d7c UNTIL
             forth.s:3030   .text:0000000000003d80 $d
             forth.s:3039   .text:0000000000003d98 _AGAIN
             forth.s:3039   .text:0000000000003d9e $t
             forth.s:3039   .text:0000000000003da0 AGAIN
             forth.s:3041   .text:0000000000003da4 $d
             forth.s:3050   .text:0000000000003dbc _IFF
             forth.s:3050   .text:0000000000003dc0 IFF
             forth.s:3052   .text:0000000000003dc4 $d
             forth.s:3064   .text:0000000000003dec _AHEAD
             forth.s:3064   .text:0000000000003df2 $t
             forth.s:3064   .text:0000000000003df4 AHEAD
             forth.s:3066   .text:0000000000003df8 $d
             forth.s:3078   .text:0000000000003e20 _REPEA
             forth.s:3078   .text:0000000000003e28 REPEA
             forth.s:3080   .text:0000000000003e2c $d
             forth.s:3091   .text:0000000000003e44 _THENN
             forth.s:3091   .text:0000000000003e4c THENN
             forth.s:3093   .text:0000000000003e50 $d
             forth.s:3104   .text:0000000000003e64 _AFT
             forth.s:3104   .text:0000000000003e68 $t
             forth.s:3104   .text:0000000000003e68 AFT
             forth.s:3106   .text:0000000000003e6c $d
             forth.s:3118   .text:0000000000003e84 _ELSEE
             forth.s:3118   .text:0000000000003e8c ELSEE
             forth.s:3120   .text:0000000000003e90 $d
             forth.s:3130   .text:0000000000003ea4 _WHILE
ARM GAS  forth.s 			page 193


             forth.s:3130   .text:0000000000003eaa $t
             forth.s:3130   .text:0000000000003eac WHILE
             forth.s:3132   .text:0000000000003eb0 $d
             forth.s:3141   .text:0000000000003ec0 _ABRTQ
             forth.s:3141   .text:0000000000003ec8 ABRTQ
             forth.s:3143   .text:0000000000003ecc $d
             forth.s:3152   .text:0000000000003ee4 _STRQ
             forth.s:3152   .text:0000000000003ee8 STRQ
             forth.s:3154   .text:0000000000003eec $d
             forth.s:3164   .text:0000000000003f04 _DOTQ
             forth.s:3164   .text:0000000000003f08 DOTQ
             forth.s:3166   .text:0000000000003f0c $d
             forth.s:3180   .text:0000000000003f24 _UNIQU
             forth.s:3180   .text:0000000000003f2c $t
             forth.s:3180   .text:0000000000003f2c UNIQU
             forth.s:3182   .text:0000000000003f30 $d
             forth.s:3189   .text:0000000000003f58 UNIQ1
             forth.s:3186   .text:0000000000003f4c $d
             forth.s:3199   .text:0000000000003f60 SNAME
             forth.s:3200   .text:0000000000003f60 $t
             forth.s:3201   .text:0000000000003f64 $d
             forth.s:3217   .text:0000000000003fa8 SNAM1
             forth.s:3229   .text:0000000000003fbc _SCOMP
             forth.s:3229   .text:0000000000003fc8 SCOMP
             forth.s:3231   .text:0000000000003fcc $d
             forth.s:3243   .text:0000000000004004 SCOM2
             forth.s:3240   .text:0000000000003ffc SCOM1
             forth.s:3248   .text:0000000000004018 SCOM3
             forth.s:3257   .text:0000000000004020 COLON_ABORT
             forth.s:3258   .text:0000000000004020 $t
             forth.s:3259   .text:0000000000004024 $d
             forth.s:3276   .text:0000000000004050 _OVERT
             forth.s:3276   .text:0000000000004056 $t
             forth.s:3278   .text:000000000000405c $d
             forth.s:3289   .text:0000000000004074 _SEMIS
             forth.s:3289   .text:0000000000004076 $t
             forth.s:3289   .text:0000000000004078 SEMIS
             forth.s:3291   .text:000000000000407c $d
             forth.s:3303   .text:0000000000004098 _RBRAC
             forth.s:3303   .text:000000000000409a $t
             forth.s:3303   .text:000000000000409c RBRAC
             forth.s:3305   .text:00000000000040a0 $d
             forth.s:3316   .text:00000000000040b4 $t
             forth.s:3317   .text:00000000000040b8 $d
             forth.s:3329   .text:00000000000040d0 _COLON
             forth.s:3329   .text:00000000000040d2 $t
             forth.s:3329   .text:00000000000040d4 COLON
             forth.s:3331   .text:00000000000040d8 $d
             forth.s:3342   .text:00000000000040f0 _IMMED
             forth.s:3342   .text:00000000000040fa $t
             forth.s:3342   .text:00000000000040fc IMMED
             forth.s:3344   .text:0000000000004100 $d
             forth.s:3362   .text:000000000000412c _CONST
             forth.s:3362   .text:0000000000004138 CONST
             forth.s:3364   .text:000000000000413c $d
             forth.s:3375   .text:000000000000416c $t
             forth.s:3382   .text:000000000000416c DODOES
ARM GAS  forth.s 			page 194


             forth.s:3384   .text:0000000000004170 $d
             forth.s:3399   .text:0000000000004194 $d
             forth.s:3399   .text:0000000000004198 _DOES
             forth.s:3399   .text:000000000000419e $t
             forth.s:3399   .text:00000000000041a0 DOES
             forth.s:3401   .text:00000000000041a4 $d
             forth.s:3416   .text:00000000000041d4 _DEFERAT
             forth.s:3416   .text:00000000000041dc DEFERAT
             forth.s:3418   .text:00000000000041e0 $d
             forth.s:3428   .text:00000000000041f8 _DEFERSTO
             forth.s:3428   .text:0000000000004200 DEFERSTO
             forth.s:3430   .text:0000000000004204 $d
             forth.s:3441   .text:0000000000004220 _DEFER
             forth.s:3441   .text:0000000000004226 $t
             forth.s:3441   .text:0000000000004228 DEFER
             forth.s:3443   .text:000000000000422c $d
             forth.s:3464   .text:0000000000004278 CREAT
             forth.s:3454   .text:0000000000004260 DEFER_NOP
             forth.s:3455   .text:0000000000004260 $t
             forth.s:3456   .text:0000000000004264 $d
             forth.s:3464   .text:0000000000004270 _CREAT
             forth.s:3466   .text:000000000000427c $d
             forth.s:3479   .text:00000000000042a0 _VARIA
             forth.s:3479   .text:00000000000042ac VARIA
             forth.s:3481   .text:00000000000042b0 $d
             forth.s:3498   .text:00000000000042d0 DMP
             forth.s:3499   .text:00000000000042d0 $t
             forth.s:3500   .text:00000000000042d4 $d
             forth.s:3512   .text:000000000000430c PDUM2
             forth.s:3506   .text:00000000000042f4 PDUM1
             forth.s:3524   .text:0000000000004318 $d
             forth.s:3524   .text:000000000000431c _DUMP
             forth.s:3524   .text:0000000000004324 DUMP
             forth.s:3526   .text:0000000000004328 $d
             forth.s:3544   .text:0000000000004378 DUMP4
             forth.s:3534   .text:0000000000004350 DUMP1
             forth.s:3546   .text:0000000000004380 DUMP3
             forth.s:3556   .text:0000000000004398 _TRACE
             forth.s:3556   .text:000000000000439e $t
             forth.s:3558   .text:00000000000043a4 $d
             forth.s:3580   .text:00000000000043f0 DOTS
             forth.s:3580   .text:00000000000043ec _DOTS
             forth.s:3582   .text:00000000000043f4 $d
             forth.s:3590   .text:0000000000004414 DOTS2
             forth.s:3586   .text:0000000000004408 DOTS1
             forth.s:3600   .text:0000000000004428 _TNAME
             forth.s:3600   .text:000000000000442e $t
             forth.s:3600   .text:0000000000004430 TNAME
             forth.s:3602   .text:0000000000004434 $d
             forth.s:3605   .text:0000000000004440 TNAM1
             forth.s:3616   .text:0000000000004474 TNAM2
             forth.s:3625   .text:0000000000004484 _DOTID
             forth.s:3625   .text:0000000000004488 $t
             forth.s:3625   .text:0000000000004488 DOTID
             forth.s:3627   .text:000000000000448c $d
             forth.s:3634   .text:00000000000044b0 DOTI1
             forth.s:3635   .text:00000000000044be $t
ARM GAS  forth.s 			page 195


             forth.s:3636   .text:00000000000044c0 $d
             forth.s:3638   *ABS*:0000000000000000 WANT_SEE
             forth.s:3711   .text:00000000000044c8 _VLIST
             forth.s:3711   .text:00000000000044ce $t
             forth.s:3711   .text:00000000000044d0 VLIST
             forth.s:3713   .text:00000000000044d4 $d
             forth.s:3724   .text:00000000000044f4 WORDS
             forth.s:3745   .text:0000000000004538 WC
             forth.s:3724   .text:00000000000044ec _WORDS
             forth.s:3724   .text:00000000000044f2 $t
             forth.s:3726   .text:00000000000044f8 $d
             forth.s:3729   .text:0000000000004504 WORS1
             forth.s:3738   .text:000000000000452c WORS2
             forth.s:3745   .text:0000000000004534 _WC
             forth.s:3747   .text:000000000000453c $d
             forth.s:3764   .text:0000000000004578 _MARK
             forth.s:3764   .text:0000000000004580 MARK
             forth.s:3766   .text:0000000000004584 $d
             forth.s:3769   .text:0000000000004590 $t
             forth.s:3770   .text:0000000000004594 $d
             forth.s:3791   .text:00000000000045c0 VERSN
             forth.s:3792   .text:00000000000045c0 $t
             forth.s:3793   .text:00000000000045c4 $d
             forth.s:3801   .text:00000000000045d4 _HI
             forth.s:3803   .text:00000000000045dc $d
             forth.s:3804   .text:00000000000045f6 $t
             forth.s:3805   .text:00000000000045f8 $d
             forth.s:3826   .text:000000000000463c PS2_QUERY
             forth.s:3827   .text:000000000000463c $t
             forth.s:3828   .text:0000000000004640 $d
             forth.s:3842   .text:00000000000046a6 $t
             forth.s:3843   .text:00000000000046a8 $d
             forth.s:3853   .text:00000000000046b4 IF_SENSE
             forth.s:3854   .text:00000000000046b4 $t
             forth.s:3855   .text:00000000000046b8 $d
             forth.s:3881   .text:0000000000004708 COLD1
             forth.s:3882   .text:0000000000004708 $d
             forth.s:3896   .text:0000000000004754 COLD2
             forth.s:3899   .text:0000000000004754 $d
             forth.s:3902   .text:0000000000004758 $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:0000000000000553 $d
          ser-term.s:90     .text:0000000000000554 $t
          ser-term.s:110    .text:000000000000058d $d
          ser-term.s:110    .text:000000000000058e $t
          ser-term.s:133    .text:00000000000005cb $d
          ser-term.s:133    .text:00000000000005cc $t
          ser-term.s:164    .text:0000000000000613 $d
          ser-term.s:164    .text:0000000000000614 $t
          ser-term.s:191    .text:0000000000000689 $d
          ser-term.s:191    .text:000000000000068a $t
          ser-term.s:203    .text:00000000000006b7 $d
          ser-term.s:203    .text:00000000000006b8 $t
             tvout.s:264    .text:0000000000000903 $d
             tvout.s:264    .text:0000000000000904 $t
             tvout.s:278    .text:0000000000000937 $d
ARM GAS  forth.s 			page 196


             tvout.s:278    .text:0000000000000938 $t
             tvout.s:306    .text:0000000000000991 $d
             tvout.s:306    .text:0000000000000992 $t
             tvout.s:325    .text:00000000000009bf $d
             tvout.s:325    .text:00000000000009c0 $t
             tvout.s:427    .text:0000000000000af9 $d
             tvout.s:427    .text:0000000000000afa $t
             tvout.s:448    .text:0000000000000b53 $d
             tvout.s:448    .text:0000000000000b54 $t
             tvout.s:495    .text:0000000000000be9 $d
             tvout.s:495    .text:0000000000000bea $t
           ps2_kbd.s:307    .text:00000000000012d7 $d
           ps2_kbd.s:307    .text:00000000000012d8 $t
           ps2_kbd.s:396    .text:00000000000013d3 $d
           ps2_kbd.s:396    .text:00000000000013d4 $t
           ps2_kbd.s:616    .text:0000000000001675 $d
           ps2_kbd.s:616    .text:0000000000001676 $t
           ps2_kbd.s:633    .text:00000000000016af $d
           ps2_kbd.s:633    .text:00000000000016b0 $t
         spi-flash.s:83     .text:000000000000179b $d
         spi-flash.s:83     .text:000000000000179c $t
         spi-flash.s:149    .text:0000000000001867 $d
         spi-flash.s:149    .text:0000000000001868 $t
         spi-flash.s:236    .text:00000000000019ab $d
         spi-flash.s:236    .text:00000000000019ac $t
         spi-flash.s:254    .text:00000000000019e7 $d
         spi-flash.s:254    .text:00000000000019e8 $t
         spi-flash.s:276    .text:0000000000001a3b $d
         spi-flash.s:276    .text:0000000000001a3c $t
             float.s:142    .text:0000000000001b07 $d
             float.s:142    .text:0000000000001b08 $t
             float.s:167    .text:0000000000001b4b $d
             float.s:167    .text:0000000000001b4c $t
             float.s:232    .text:0000000000001bff $d
             float.s:232    .text:0000000000001c00 $t
             float.s:291    .text:0000000000001c9d $d
             float.s:291    .text:0000000000001c9e $t
             float.s:300    .text:0000000000001caf $d
             float.s:300    .text:0000000000001cb0 $t
             float.s:314    .text:0000000000001cbf $d
             float.s:314    .text:0000000000001cc0 $t
             float.s:342    .text:0000000000001cf7 $d
             float.s:342    .text:0000000000001cf8 $t
             float.s:351    .text:0000000000001d07 $d
             float.s:351    .text:0000000000001d08 $t
             float.s:488    .text:0000000000001f13 $d
             float.s:488    .text:0000000000001f14 $t
             float.s:566    .text:0000000000002077 $d
             float.s:566    .text:0000000000002078 $t
             forth.s:132    .text:00000000000020eb $d
             forth.s:132    .text:00000000000020ec $t
             forth.s:154    .text:0000000000002125 $d
             forth.s:154    .text:0000000000002126 $t
             forth.s:190    .text:0000000000002143 $d
             forth.s:190    .text:0000000000002144 $t
             forth.s:237    .text:00000000000021f1 $d
             forth.s:237    .text:00000000000021f2 $t
ARM GAS  forth.s 			page 197


             forth.s:332    .text:0000000000002281 $d
             forth.s:332    .text:0000000000002282 $t
             forth.s:357    .text:00000000000022af $d
             forth.s:357    .text:00000000000022b0 $t
             forth.s:367    .text:00000000000022c3 $d
             forth.s:367    .text:00000000000022c4 $t
             forth.s:375    .text:00000000000022cf $d
             forth.s:375    .text:00000000000022d0 $t
             forth.s:384    .text:00000000000022e1 $d
             forth.s:384    .text:00000000000022e2 $t
             forth.s:393    .text:00000000000022f5 $d
             forth.s:393    .text:00000000000022f6 $t
             forth.s:429    .text:000000000000233d $d
             forth.s:429    .text:000000000000233e $t
             forth.s:445    .text:000000000000235f $d
             forth.s:445    .text:0000000000002360 $t
             forth.s:455    .text:0000000000002371 $d
             forth.s:455    .text:0000000000002372 $t
             forth.s:464    .text:0000000000002383 $d
             forth.s:464    .text:0000000000002384 $t
             forth.s:481    .text:00000000000023a5 $d
             forth.s:481    .text:00000000000023a6 $t
             forth.s:511    .text:00000000000023eb $d
             forth.s:511    .text:00000000000023ec $t
             forth.s:520    .text:0000000000002401 $d
             forth.s:520    .text:0000000000002402 $t
             forth.s:568    .text:000000000000245b $d
             forth.s:568    .text:000000000000245c $t
             forth.s:579    .text:000000000000246f $d
             forth.s:579    .text:0000000000002470 $t
             forth.s:587    .text:000000000000247d $d
             forth.s:587    .text:000000000000247e $t
             forth.s:595    .text:000000000000248d $d
             forth.s:595    .text:000000000000248e $t
             forth.s:603    .text:000000000000249d $d
             forth.s:603    .text:000000000000249e $t
             forth.s:627    .text:00000000000024cd $d
             forth.s:627    .text:00000000000024ce $t
             forth.s:652    .text:0000000000002501 $d
             forth.s:652    .text:0000000000002502 $t
             forth.s:660    .text:0000000000002511 $d
             forth.s:660    .text:0000000000002512 $t
             forth.s:668    .text:0000000000002523 $d
             forth.s:668    .text:0000000000002524 $t
             forth.s:689    .text:000000000000254b $d
             forth.s:689    .text:000000000000254c $t
             forth.s:718    .text:0000000000002587 $d
             forth.s:718    .text:0000000000002588 $t
             forth.s:728    .text:000000000000259b $d
             forth.s:728    .text:000000000000259c $t
             forth.s:741    .text:00000000000025b9 $d
             forth.s:741    .text:00000000000025ba $t
             forth.s:794    .text:0000000000002631 $d
             forth.s:794    .text:0000000000002632 $t
             forth.s:812    .text:0000000000002655 $d
             forth.s:812    .text:0000000000002656 $t
             forth.s:835    .text:0000000000002683 $d
ARM GAS  forth.s 			page 198


             forth.s:835    .text:0000000000002684 $t
             forth.s:859    .text:00000000000026b3 $d
             forth.s:859    .text:00000000000026b4 $t
             forth.s:905    .text:000000000000270b $d
             forth.s:905    .text:000000000000270c $t
             forth.s:917    .text:0000000000002723 $d
             forth.s:917    .text:0000000000002724 $t
             forth.s:929    .text:000000000000273f $d
             forth.s:929    .text:0000000000002740 $t
             forth.s:990    .text:000000000000279b $d
             forth.s:990    .text:000000000000279c $t
             forth.s:999    .text:00000000000027af $d
             forth.s:999    .text:00000000000027b0 $t
             forth.s:1026   .text:00000000000027eb $d
             forth.s:1026   .text:00000000000027ec $t
             forth.s:1045   .text:0000000000002809 $d
             forth.s:1045   .text:000000000000280a $t
             forth.s:1064   .text:0000000000002833 $d
             forth.s:1064   .text:0000000000002834 $t
             forth.s:1104   .text:0000000000002885 $d
             forth.s:1104   .text:0000000000002886 $t
             forth.s:1124   .text:00000000000028b1 $d
             forth.s:1124   .text:00000000000028b2 $t
             forth.s:1138   .text:00000000000028cf $d
             forth.s:1138   .text:00000000000028d0 $t
             forth.s:1149   .text:00000000000028ed $d
             forth.s:1149   .text:00000000000028ee $t
             forth.s:1166   .text:000000000000290b $d
             forth.s:1166   .text:000000000000290c $t
             forth.s:1183   .text:0000000000002937 $d
             forth.s:1183   .text:0000000000002938 $t
             forth.s:1298   .text:0000000000002a59 $d
             forth.s:1298   .text:0000000000002a5a $t
             forth.s:1349   .text:0000000000002ad3 $d
             forth.s:1349   .text:0000000000002ad4 $t
             forth.s:1408   .text:0000000000002b7d $d
             forth.s:1408   .text:0000000000002b7e $t
             forth.s:1426   .text:0000000000002ba5 $d
             forth.s:1426   .text:0000000000002ba6 $t
             forth.s:1460   .text:0000000000002bf7 $d
             forth.s:1460   .text:0000000000002bf8 $t
             forth.s:1493   .text:0000000000002c45 $d
             forth.s:1493   .text:0000000000002c46 $t
             forth.s:1525   .text:0000000000002c8d $d
             forth.s:1525   .text:0000000000002c8e $t
             forth.s:1605   .text:0000000000002d7b $d
             forth.s:1605   .text:0000000000002d7c $t
             forth.s:1617   .text:0000000000002d99 $d
             forth.s:1617   .text:0000000000002d9a $t
             forth.s:1649   .text:0000000000002de7 $d
             forth.s:1649   .text:0000000000002de8 $t
             forth.s:1665   .text:0000000000002e11 $d
             forth.s:1665   .text:0000000000002e12 $t
             forth.s:1679   .text:0000000000002e3b $d
             forth.s:1679   .text:0000000000002e3c $t
             forth.s:1756   .text:0000000000002ef3 $d
             forth.s:1756   .text:0000000000002ef4 $t
ARM GAS  forth.s 			page 199


             forth.s:1840   .text:0000000000002fcd $d
             forth.s:1840   .text:0000000000002fce $t
             forth.s:1917   .text:00000000000030ef $d
             forth.s:1917   .text:00000000000030f0 $t
             forth.s:1934   .text:0000000000003125 $d
             forth.s:1934   .text:0000000000003126 $t
             forth.s:1952   .text:000000000000315b $d
             forth.s:1952   .text:000000000000315c $t
             forth.s:2022   .text:00000000000031db $d
             forth.s:2022   .text:00000000000031dc $t
             forth.s:2057   .text:000000000000323b $d
             forth.s:2057   .text:000000000000323c $t
             forth.s:2109   .text:000000000000329f $d
             forth.s:2109   .text:00000000000032a0 $t
             forth.s:2244   .text:0000000000003453 $d
             forth.s:2244   .text:0000000000003454 $t
             forth.s:2283   .text:00000000000034b5 $d
             forth.s:2283   .text:00000000000034b6 $t
             forth.s:2296   .text:00000000000034d9 $d
             forth.s:2296   .text:00000000000034da $t
             forth.s:2574   .text:0000000000003833 $d
             forth.s:2574   .text:0000000000003834 $t
             forth.s:2666   .text:0000000000003947 $d
             forth.s:2666   .text:0000000000003948 $t
             forth.s:2717   .text:00000000000039ff $d
             forth.s:2717   .text:0000000000003a00 $t
             forth.s:2729   .text:0000000000003a29 $d
             forth.s:2729   .text:0000000000003a2a $t
             forth.s:2750   .text:0000000000003a6f $d
             forth.s:2750   .text:0000000000003a70 $t
             forth.s:2762   .text:0000000000003a8d $d
             forth.s:2762   .text:0000000000003a8e $t
             forth.s:2777   .text:0000000000003abb $d
             forth.s:2777   .text:0000000000003abc $t
             forth.s:2925   .text:0000000000003c4b $d
             forth.s:2925   .text:0000000000003c4c $t
             forth.s:2975   .text:0000000000003cf1 $d
             forth.s:2975   .text:0000000000003cf2 $t
             forth.s:2999   .text:0000000000003d2d $d
             forth.s:2999   .text:0000000000003d2e $t
             forth.s:3050   .text:0000000000003dbf $d
             forth.s:3050   .text:0000000000003dc0 $t
             forth.s:3078   .text:0000000000003e27 $d
             forth.s:3078   .text:0000000000003e28 $t
             forth.s:3091   .text:0000000000003e49 $d
             forth.s:3091   .text:0000000000003e4a $t
             forth.s:3118   .text:0000000000003e89 $d
             forth.s:3118   .text:0000000000003e8a $t
             forth.s:3141   .text:0000000000003ec7 $d
             forth.s:3141   .text:0000000000003ec8 $t
             forth.s:3152   .text:0000000000003ee7 $d
             forth.s:3152   .text:0000000000003ee8 $t
             forth.s:3164   .text:0000000000003f07 $d
             forth.s:3164   .text:0000000000003f08 $t
             forth.s:3229   .text:0000000000003fc5 $d
             forth.s:3229   .text:0000000000003fc6 $t
             forth.s:3362   .text:0000000000004135 $d
ARM GAS  forth.s 			page 200


             forth.s:3362   .text:0000000000004136 $t
             forth.s:3416   .text:00000000000041db $d
             forth.s:3416   .text:00000000000041dc $t
             forth.s:3428   .text:00000000000041ff $d
             forth.s:3428   .text:0000000000004200 $t
             forth.s:3464   .text:0000000000004277 $d
             forth.s:3464   .text:0000000000004278 $t
             forth.s:3479   .text:00000000000042a9 $d
             forth.s:3479   .text:00000000000042aa $t
             forth.s:3524   .text:0000000000004321 $d
             forth.s:3524   .text:0000000000004322 $t
             forth.s:3580   .text:00000000000043ef $d
             forth.s:3580   .text:00000000000043f0 $t
             forth.s:3745   .text:0000000000004537 $d
             forth.s:3745   .text:0000000000004538 $t
             forth.s:3764   .text:000000000000457d $d
             forth.s:3764   .text:000000000000457e $t
             forth.s:3801   .text:00000000000045d7 $d
             forth.s:3801   .text:00000000000045d8 $t
             forth.s:3875   .text:00000000000046f1 $d
             forth.s:3875   .text:00000000000046f2 $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
add_digit
