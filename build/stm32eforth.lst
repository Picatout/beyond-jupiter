ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
ARM GAS  forth.s 			page 10


 108              	  .equ VFPSW, PEN_COLOR+4 
 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
ARM GAS  forth.s 			page 12


 222              		// from a code word   
 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
ARM GAS  forth.s 			page 13


  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
ARM GAS  forth.s 			page 14


 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      CBF95DF8 
 157      04EB
 158 000a DFF8CCC6 	  ldr IP,=dh
 159 000e 02F081BC 	  b INEXT  
 160              	dh:
 161 0012 A1450000 	  _ADR PRESE
 162 0016 593C0000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 65290000 	  _ADR CFSR 
 164 0038 552C0000 	  _ADR DUPP
 165 003c D12B0000 	  _ADR TOR 
 166 0040 DB2A0000 	  _DOLIT 16 
 166      10000000 
 167 0048 49310000 	  _ADR BASE 
 168 004c 4D2B0000 	  _ADR STORE 
 169 0050 DD3C0000 	  _ADR UDOT 
 170 0054 593C0000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 8D2B0000 	  _ADR RFROM
 172 0068 DB2A0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 992C0000 	  _ADR ANDD
 174 0074 1B2B0000 	  _QBRAN 1f
 174      94000000 
 175 007c 89290000 	  _ADR BFAR
 176 0080 DB2A0000 	  _DOLIT ','
 176      2C000000 
 177 0088 E5290000 	  _ADR EMIT 
 178 008c 693B0000 	  _ADR SPACE 
ARM GAS  forth.s 			page 15


 179 0090 DD3C0000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 593C0000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 F51D0000 	  _ADR FPSCR
 184 00a8 DD3C0000 	  _ADR UDOT 
 185              	1:
 186 00ac 39030000 	  _ADR reset_mcu 
 187              	
 188              	  
 189              	
 190              	/*********************************
 191              	   fpu exception 
 192              	*********************************/
 193              	  .type fpu_exception, %function 
 194              	  .global fpu_exception 
 195              	  .p2align 2 
 196              	fpu_exception:
 197 00b0 4FF00000 	  _MOV32 r0,RAM_END 
 197      C2F20200 
 198 00b8 8546     	  mov sp,r0 
 199 00ba DFF820C6 	  ldr IP,=fpu_except 
 200 00be 02F029BC 	  b INEXT 
 201              	fpu_except:  
 202 00c2 A1450000 	  _ADR PRESE
 203 00c6 F13B0000 	  _ADR CR  
 204 00ca DB2A0000 	  _DOLIT 16 
 204      10000000 
 205 00d2 49310000 	  _ADR BASE 
 206 00d6 4D2B0000 	  _ADR STORE 
 207 00da 593C0000 	  _DOTQP 21 , "fpu exception FPSCR: "
 207      15667075 
 207      20657863 
 207      65707469 
 207      6F6E2046 
 208 00f4 F51D0000 	  _ADR FPSCR 
 209 00f8 DD3C0000 	  _ADR UDOT 
 210 00fc F13B0000 	  _ADR CR 
 211 0100 39030000 	  _ADR reset_mcu 
 212              	
 213              	
 214              	
 215              	/*********************************
 216              	  non maskable interrupt handler
 217              	  irq -14 
 218              	*********************************/
 219              	  .type nmi_handler, %function
 220              	  .p2align 2
 221              	  .global nmi_handler 
 222              	nmi_handler:
 223 0104 DFF8D8C5 	  ldr IP,=nmi_hl 
 224 0108 02F004BC 	  b  INEXT
 225              	nmi_hl:
 226 010c A1450000 	  _ADR PRESE 
ARM GAS  forth.s 			page 16


 227 0110 F13B0000 	  _ADR CR 
 228 0114 593C0000 	  _DOTQP  25 , "not managed nmi exception"
 228      196E6F74 
 228      206D616E 
 228      61676564 
 228      206E6D69 
 229 0134 F13B0000 	  _ADR CR 
 230 0138 19440000 	  _ADR ABORT 
 231              	   
 232              	
 233              	/***********************************
 234              	   hard fault handler
 235              	   irq -13
 236              	***********************************/
 237              	  .type hardfault_handler, %function
 238              	  .p2align 2
 239              	  .global hardfault_handler 
 240              	hardfault_handler:
 241 013c 4FF00000 	  _MOV32 r0,RAM_END 
 241      C2F20200 
 242 0144 8546     	  mov sp,r0 
 243 0146 DFF89CC5 	  ldr IP,=hardfault_hl 
 244 014a 02F0E3BB 	  b INEXT
 245              	hardfault_hl:
 246 014e A1450000 	  _ADR PRESE
 247 0152 F13B0000 	  _ADR CR  
 248 0156 593C0000 	  _DOTQP  20 , "hard fault exception"
 248      14686172 
 248      64206661 
 248      756C7420 
 248      65786365 
 249 0170 F13B0000 	  _ADR CR 
 250 0174 39030000 	  _ADR reset_mcu
 251              	
 252              	/***********************************
 253              	   memory manager fault 
 254              	   irq -12 
 255              	************************************/
 256              	  .type memfault_handler, %function
 257              	  .p2align 2
 258              	  .global memfault_handler 
 259              	memfault_handler:
 260 0178 4FF00000 	  _MOV32 r0,RAM_END 
 260      C2F20200 
 261 0180 8546     	  mov sp,r0 
 262 0182 DFF864C5 	  ldr IP,=memfault_hl 
 263 0186 02F0C5BB 	  b INEXT 
 264              	memfault_hl: 
 265 018a A1450000 	  _ADR PRESE
 266 018e F13B0000 	  _ADR CR  
 267 0192 593C0000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 267      216D656D 
 267      6F727920 
 267      6D616E61 
 267      67657220 
 268 01b8 DB2A0000 	  _DOLIT 16 
 268      10000000 
ARM GAS  forth.s 			page 17


 269 01c0 49310000 	  _ADR BASE 
 270 01c4 4D2B0000 	  _ADR STORE   
 271 01c8 65290000 	  _ADR CFSR
 272 01cc DB2A0000 	  _DOLIT 255 
 272      FF000000 
 273 01d4 992C0000 	  _ADR ANDD 
 274 01d8 DD3C0000 	  _ADR UDOT 
 275 01dc F13B0000 	  _ADR CR 
 276 01e0 39030000 	  _ADR reset_mcu 
 277              	
 278              	
 279              	/************************************
 280              	   bus fault 
 281              	   irq -11 
 282              	***********************************/
 283              	  .type busfault_handler, %function
 284              	  .p2align 2
 285              	  .global busfault_handler 
 286              	busfault_handler:
 287 01e4 4FF00000 	  _MOV32 r0,RAM_END 
 287      C2F20200 
 288 01ec 8546     	  mov sp,r0 
 289 01ee DFF8FCC4 	  ldr IP,=busfault_hl 
 290 01f2 02F08FBB 	  b INEXT 
 291              	busfault_hl:
 292 01f6 A1450000 	  _ADR PRESE
 293 01fa DB2A0000 	  _DOLIT 1 
 293      01000000 
 294 0202 B12A0000 	  _ADR ULED 
 295 0206 DB2A0000 	  _DOLIT  100 
 295      64000000 
 296 020e 05310000 	  _ADR MSEC 
 297 0212 89290000 	  _ADR BFAR 
 298 0216 65290000 	  _ADR CFSR 
 299 021a F13B0000 	  _ADR CR  
 300 021e 593C0000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 300      1B627573 
 300      20666175 
 300      6C742065 
 300      78636570 
 301 0240 DB2A0000 	  _DOLIT 16 
 301      10000000 
 302 0248 49310000 	  _ADR BASE 
 303 024c 4D2B0000 	  _ADR STORE   
 304 0250 DB2A0000 	  _DOLIT 0XFF00 
 304      00FF0000 
 305 0258 992C0000 	  _ADR ANDD   
 306 025c DD3C0000 	  _ADR UDOT 
 307 0260 593C0000 	  _DOTQP 7 , " BFAR: "
 307      07204246 
 307      41523A20 
 308 026c DD3C0000 	  _ADR UDOT 
 309 0270 F13B0000 	  _ADR CR 
 310 0274 39030000 	  _ADR reset_mcu  
 311              	
 312              	/************************************
 313              	    usage fault
ARM GAS  forth.s 			page 18


 314              	    irq -10 
 315              	************************************/
 316              	  .type usagefault_handler, %function
 317              	  .p2align 2
 318              	  .global usagefault_handler 
 319              	usagefault_handler:
 320 0278 4FF00000 	  _MOV32 r0,RAM_END 
 320      C2F20200 
 321 0280 8546     	  mov sp,r0 
 322 0282 DFF86CC4 	  ldr IP,=usagefault_hl
 323 0286 02F045BB 	  b INEXT 
 324              	usagefault_hl:
 325 028a A1450000 	  _ADR PRESE
 326 028e F13B0000 	  _ADR CR  
 327 0292 593C0000 	  _DOTQP  23 , "usage exception, UFSR: "
 327      17757361 
 327      67652065 
 327      78636570 
 327      74696F6E 
 328 02b0 DB2A0000 	  _DOLIT 16 
 328      10000000 
 329 02b8 49310000 	  _ADR BASE 
 330 02bc 4D2B0000 	  _ADR STORE   
 331 02c0 65290000 	  _ADR CFSR
 332 02c4 DB2A0000 	  _DOLIT 16 
 332      10000000 
 333 02cc F12C0000 	  _ADR RSHIFT 
 334 02d0 DD3C0000 	  _ADR UDOT 
 335 02d4 F13B0000 	  _ADR CR 
 336 02d8 39030000 	  _ADR reset_mcu  
 337              	
 338              	
 339              	/*********************************
 340              		system milliseconds counter
 341              	*********************************/	
 342              	  .type systick_handler, %function
 343              	  .p2align 2 
 344              	  .global systick_handler
 345              	systick_handler:
 346 02dc 4FF00003 	  _MOV32 r3,UPP
 346      C2F20003 
 347 02e4 9868     	  ldr r0,[r3,#TICKS]  
 348 02e6 00F10100 	  add r0,#1
 349 02ea 9860     	  str r0,[r3,#TICKS]
 350 02ec D868     	  ldr r0,[r3,#CD_TIMER]
 351 02ee 10B1     	  cbz r0, systick_exit
 352 02f0 A0F10100 	  sub r0,#1
 353 02f4 D860     	  str r0,[r3,#CD_TIMER]
 354              	systick_exit:
 355 02f6 7047     	  bx lr
 356              	
 357              	user_reboot:
 358 02f8 00B500F0 	   _CALL forth_init 
 358      4FF85DF8 
 358      04EB
 359 0302 DFF8F0C3 	  ldr IP,=ur
 360 0306 02F005BB 	  b INEXT  
ARM GAS  forth.s 			page 19


 361              	ur:
 362 030a A1450000 	  _ADR PRESE
 363 030e F13B0000 	  _ADR CR   
 364 0312 DB2A0000 		_DOLIT user_reboot_msg
 364      28030000 
 365 031a A9300000 		_ADR COUNT 
 366 031e BD3B0000 	  _ADR TYPEE 
 367 0322 39030000 	  _ADR reset_mcu 
 368              	
 369 0326 00BF     		.p2align 2 
 370              	user_reboot_msg:
 371 0328 0C       		.byte 12
 372 0329 75736572 		.ascii "user reboot!"
 372      20726562 
 372      6F6F7421 
 373 0335 0000BF   		.p2align 2 
 374              	
 375              	reset_mcu:
 376 0338 4FF48050 	  _MOV32 r0,UART 
 376      C4F20100 
 377 0340 0168     	1: ldr r1,[r0,#USART_SR]
 378 0342 11F0400F 	  tst r1,#(1<<6)
 379 0346 FBD0     	  beq 1b
 380 0348 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 380      CEF20000 
 381 0350 C168     		ldr r1,[r0,#SCB_AIRCR]
 382 0352 41F00401 		orr r1,#(1<<2)
 383 0356 C0F2FA51 		movt r1,#SCB_VECTKEY
 384 035a C160     		str r1,[r0,#SCB_AIRCR]
 385 035c FEE7     		b . 
 386              	
 387              	/**************************************
 388              	  reset_handler execute at MCU reset
 389              	***************************************/
 390              	  .type  reset_handler, %function
 391 035e 00BF     	  .p2align 2 
 392              	  .global reset_handler
 393              	reset_handler:
 394 0360 4FF00000 		_MOV32 r0,RAM_END
 394      C2F20200 
 395 0368 8546     		mov sp,r0 
 396              	// enable memory, bus and usage exceptions  
 397 036a 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 397      CEF20000 
 398 0372 81EA0101 	  eor r1,r1 
 399 0376 C0F20701 	  movt r1,#7 
 400 037a 4162     	  str r1,[r0,#SCB_SHCSR]
 401 037c FFF7FEFF 		bl	remap 
 402 0380 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 403 0384 01F019FD 	  bl  fpu_init 
 404 0388 00F0D1F9 		bl  ser_init
 405 038c FFF7FEFF 	 	bl	tv_init
 406 0390 FFF7FEFF 	  bl  kbd_init
 407 0394 01F0D6FA 	  bl  flash_spi_init   
 408 0398 05F02EB8 		b COLD 
 409              	
 410              	
ARM GAS  forth.s 			page 20


 411              	
 412              		.type forth_init, %function 
 413              	  .p2align 2 
 414              	forth_init:
 415 039c 4FF00004 		_MOV32 UP,UPP 
 415      C2F20004 
 416 03a4 4FF68067 		_MOV32 DSP,SPP
 416      C2F20107 
 417 03ac 4FF47F48 		_MOV32 RSP,RPP
 417      C2F20108 
 418 03b4 DFF840A3 	  ldr INX,=NEST
 419 03b8 4AF0010A 	  orr INX,#1 
 420 03bc 86EA0606 		EOR TOS,TOS  
 421 03c0 7047     		_RET 
 422              	
 423              	
 424              	
 425              	  .type init_devices, %function
 426 03c2 00BF     	  .p2align 2 
 427              	init_devices:
 428              	/* init clock to HSE 96 Mhz */
 429              	/* set 3 wait states in FLASH_ACR_LATENCY */
 430 03c4 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 430      C4F20200 
 431 03cc 4FF00301 	  mov r1,#3 
 432 03d0 0160     	  str r1,[r0,#FLASH_ACR]
 433              	/* configure clock for HSE, 25 Mhz crystal */
 434              	/* enable HSE in RCC_CR */
 435 03d2 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 435      C4F20200 
 436 03da 0168     	  ldr r1,[r0,#RCC_CR]
 437 03dc 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 438 03e0 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 439              	/* wait HSERDY loop */
 440              	wait_hserdy:
 441 03e2 0168     	  ldr r1,[r0,#RCC_CR]
 442 03e4 11F4003F 	  tst r1,#(1<<17)
 443 03e8 FBD0     	  beq wait_hserdy
 444              	
 445              	/************************************************* 
 446              	   configure PLL  and source 
 447              	   SYSCLOCK=96 Mhz
 448              	   select HSE as  PLL source clock
 449              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 450              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 451              	****************************************************/
 452              	  /* set RCC_PLLCFGR */
 453 03ea 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 453      C4F20200 
 454 03f2 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 454      C0F24041 
 455 03fa 4160     	  str r1,[r0,#RCC_PLLCFGR]
 456              	  /* enable PLL */
 457 03fc 0168     	  ldr r1,[r0,#RCC_CR]
 458 03fe 41F08071 	  orr r1, #(1<<24)
 459 0402 0160     	  str r1,[r0,#RCC_CR]
 460              	/* wait for PLLRDY */
ARM GAS  forth.s 			page 21


 461              	wait_pllrdy:
 462 0404 0168     	  ldr r1,[r0,#RCC_CR]
 463 0406 11F0007F 	  tst r1,#(1<<25)
 464 040a FBD1     	  bne wait_pllrdy 
 465              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 466 040c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 466      C0F21901 
 467 0414 8160     	  str r1,[r0,#RCC_CFGR]
 468              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 469 0416 8168     	  ldr r1,[r0,#RCC_CFGR]
 470 0418 41F00201 	  orr r1,#2
 471 041c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 472              	/* wait for SWS==2 */
 473              	wait_sws:
 474 041e 8168     	  ldr r1,[r0,#RCC_CFGR]
 475 0420 11F0080F 	  tst r1,#(2<<2)
 476 0424 FBD0     	  beq wait_sws
 477              	/* now sysclock is 96 Mhz */
 478              	
 479              	
 480              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 481 0426 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 482 042a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 483 042c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 484 0430 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 485              	/* configure GPIOC:13 as output for user LED */
 486 0432 4FF40060 	  _MOV32 r0,LED_GPIO 
 486      C4F20200 
 487 043a 4FF00D01 	  mov r1,#LED_PIN
 488 043e 4FF01102 	  mov r2,#OUTPUT_OD 
 489 0442 00B500F0 	  _CALL gpio_config 
 489      8FF85DF8 
 489      04EB
 490 044c 4FF00102 	  mov r2,#1
 491 0450 00B500F0 	  _CALL gpio_out 
 491      DEF85DF8 
 491      04EB
 492              	/* enable compensation CELL for fast I/O */
 493 045a 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 493      C4F20101 
 494 0462 4FF00100 		mov r0,#1 
 495 0466 0862     		str r0,[R1,#SYSCFG_CMPCR]
 496              	/* wait for ready bit */ 
 497 0468 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 498 046a 10F4807F 	    tst r0,#(1<<8)
 499 046e FBD0     		beq 1b 	
 500              	
 501              	
 502              	/* configure systicks for 1msec ticks */
 503              	// set priority to 15 (lowest)
 504 0470 4FF0FF30 	  mov r0,#STCK_IRQ
 505 0474 4FF00F01 	  mov r1,#15 
 506 0478 00B500F0 	  _CALL nvic_set_priority
 506      2FF85DF8 
 506      04EB
 507 0482 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 507      CEF20000 
ARM GAS  forth.s 			page 22


 508 048a 47F2FF61 	  _MOV32 r1,95999 
 508      C0F20101 
 509 0492 4160     	  str r1,[r0,#STK_LOAD]
 510 0494 4FF00701 	  mov r1,#7
 511 0498 0160     	  str r1,[r0,STK_CTL]
 512 049a 7047     	  _RET  
 513              	
 514              	
 515              	/* copy system variables to RAM */ 
 516              		.type remap, %function 
 517              	    .global remap 
 518              	remap:
 519              	// copy system to RAM 	
 520 049c 4FF00000 		_MOV32 r0,RAM_ADR 
 520      C2F20000 
 521 04a4 9549     		ldr r1,=UZERO 
 522 04a6 4FF0B002 		mov r2,#ULAST-UZERO 
 523 04aa 02F10302 		add r2,r2,#3
 524 04ae 22F00302 		and r2,r2,#~3 
 525 04b2 51F8043B 	1:	ldr r3,[r1],#4 
 526 04b6 40F8043B 		str r3,[r0],#4 
 527 04ba 043A     		subs R2,#4 
 528 04bc F9D1     		bne 1b
 529              	// zero end of RAM 
 530 04be 4FF00002 		_MOV32 r2,RAM_END 
 530      C2F20202 
 531 04c6 83EA0303 		eor r3,r3,r3 
 532 04ca 40F8043B 	2:  str r3,[r0],#4
 533 04ce 9042     		cmp r0,r2 
 534 04d0 FBDB     		blt 2b 
 535 04d2 4FF00004 		_MOV32 UP,RAM_ADR  
 535      C2F20004 
 536 04da 7047     		_RET 
 537              	
 538              	// set irq priority 
 539              	// 0 highest 
 540              	// 15 lowest
 541              	// input: r0 IRQn  
 542              	//        r1  ipr 
 543              	nvic_set_priority:
 544 04dc 08B4     	    push {r3}
 545 04de 0028     	    cmp r0,#0 
 546 04e0 08D4     	    bmi negative_irq 
 547 04e2 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 547      CEF20003 
 548 04ea 4FEA0111 	    lsl r1,#4 
 549 04ee 1954     	    strb r1,[r3,r0]
 550 04f0 08BC     	    pop {r3}
 551 04f2 7047     	    _RET 
 552              	negative_irq:
 553 04f4 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 553      CEF20003 
 554 04fc 00F00F00 	    and r0,#0XF 
 555 0500 A0F10400 	    sub r0,#4 
 556 0504 4FEA0111 	    lsl r1,#4 
 557 0508 1954     	    strb r1,[r3,r0]
 558 050a 08BC     	    pop {r3}
ARM GAS  forth.s 			page 23


 559 050c 7047     	    _RET 
 560              	
 561              	
 562              	// enable interrupt in nvic 
 563              	// input: r0 = IRQn 
 564              	nvic_enable_irq: 
 565 050e 0EB4     	    push {r1,r2,r3}
 566 0510 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 566      CEF20003 
 567 0518 0146     	    mov r1,r0 
 568 051a 4FEA5111 	    lsr r1,#5  
 569 051e 4FEA8101 	    lsl r1,#2  // ISERn  
 570 0522 00F01F00 	    and r0,#31 // bit#
 571 0526 4FF00102 	    mov r2,#1 
 572 052a 02FA00F2 	    lsl r2,r0
 573 052e 72B6     	    cpsid I
 574 0530 5A50     	    str r2,[r3,r1]
 575 0532 62B6     	    cpsie I 
 576 0534 0EBC     	    pop {r1,r2,r3}
 577 0536 7047     	    _RET 
 578              	
 579              	// disable interrupt in nvic
 580              	// input: r0 = IRQn
 581              	nvic_disable_irq:
 582 0538 0EB4     	    push {r1,r2,r3}
 583 053a 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 583      CEF20003 
 584 0542 0146     	    mov r1,r0 
 585 0544 4FEA5111 	    lsr r1,#5  
 586 0548 4FEA8101 	    lsl r1,#2  // ISERn
 587 054c 00F01F00 	    and r0,#31 // bit#
 588 0550 4FF00102 	    mov r2,#1 
 589 0554 02FA00F2 	    lsl r2,r0
 590 0558 5A50     	    str r2,[r3,r1]
 591 055a BFF34F8F 	    dsb 
 592 055e BFF36F8F 	    isb 
 593 0562 0EBC     	    pop {r1,r2,r3}
 594 0564 7047     	    _RET 
 595              	
 596              	/**********************************
 597              	  gpio_config 
 598              	  Configure gpio mode 
 599              	  input:
 600              	    r0   GPIOx 
 601              	    r1   pin 
 602              	    r2   mode 
 603              	  output:
 604              	    none 
 605              	  use:
 606              	    r3,r5,r11  
 607              	**********************************/
 608              	gpio_config:
 609 0566 2DE92808 	    push {r3,r5,r11}
 610              	//  clear registers field 
 611 056a 4FF00105 	    mov r5,#1
 612 056e 05FA01F5 	    lsl r5,r1
 613 0572 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
ARM GAS  forth.s 			page 24


 614 0576 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 615 0578 03EA0503 	    and r3,r5 
 616 057c 4360     	    str r3,[r0,#GPIO_OTYPER]
 617 057e 4FF00305 	    mov r5,#3 
 618 0582 4FF0020B 	    mov r11,#2 
 619 0586 01FB0BFB 	    mul r11,r1 
 620 058a 05FA0BF5 	    lsl r5,r11 
 621 058e 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 622 0592 0368     	    ldr r3,[r0,#GPIO_MODER]
 623 0594 03EA0503 	    and r3,r5 
 624 0598 0360     	    str r3,[r0,#GPIO_MODER]
 625 059a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 626 059c 03EA0503 	    and r3,r5 
 627 05a0 C360     	    str r3,[r0,#GPIO_PUPDR]
 628              	// set mode register, r2 low nibble  
 629 05a2 02F00305 	    and r5,r2,#3    
 630 05a6 05FA0BF5 	    lsl r5,r11 // mode 
 631 05aa 0368     	    ldr r3,[r0,#GPIO_MODER]
 632 05ac 43EA0503 	    orr r3,r5 
 633 05b0 0360     	    str r3,[r0,#GPIO_MODER]
 634 05b2 032A     	    cmp r2,#3
 635 05b4 13D0     	    beq 9f // analog input 
 636 05b6 12F00305 	    ands r5,r2,#3 
 637 05ba 08D0     	    beq input_pull 
 638              	output_type:
 639 05bc 4FEA1212 	    lsr r2,#4 
 640 05c0 02FA01F2 	    lsl r2,r1 // 1 bit field 
 641 05c4 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 642 05c6 43EA0203 	    orr r3,r2 
 643 05ca 4360     	    str r3,[r0,#GPIO_OTYPER]
 644 05cc 07E0     	    b 9f 
 645              	input_pull:
 646 05ce C368     	    ldr r3,[r0,#GPIO_PUPDR]
 647 05d0 4FEA1212 	    lsr r2,#4 
 648 05d4 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 649 05d8 43EA0203 	    orr r3,r2 
 650 05dc C360     	    str r3,[r0,#GPIO_PUPDR]
 651 05de BDE82808 	9:  pop {r3,r5,r11}
 652 05e2 7047     	    _RET 
 653              	
 654              	// configure gpio speed 
 655              	// input:
 656              	//    r0   GPIO_BASE_ADR 
 657              	//    r1   pin 
 658              	//    r2   speed
 659              	// use:
 660              	//  r3,r5,r11 
 661              	gpio_speed:
 662 05e4 2DE92808 	    push {r3,r5,r11}
 663 05e8 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 664 05ea 4FF00305 	    mov r5,#3
 665 05ee 4FF0020B 	    mov r11,#2 
 666 05f2 01FB0BFB 	    mul r11,r1 
 667 05f6 05FA0BF5 	    lsl r5,r11
 668 05fa 6FEA0505 	    mvn r5,r5 
 669 05fe 03EA0503 	    and r3,r5   
 670 0602 02FA0BF2 	    lsl r2,r11  
ARM GAS  forth.s 			page 25


 671 0606 43EA0203 	    orr r3,r2 
 672 060a 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 673 060c BDE82808 	    pop {r3,r5,r11}
 674 0610 7047     	    _RET
 675              	
 676              	/**************************** 
 677              	  gpio_out port,pin,0|1
 678              	  input:
 679              	    r0   gpio_base_adr 
 680              	    r1   pin 
 681              	    r2   data 0|1 
 682              	**************************/
 683              	gpio_out:
 684 0612 08B4     	    push {r3}
 685 0614 4FF00103 	    mov r3,#1 
 686 0618 03FA01F3 	    lsl r3,r1 
 687 061c 0AB9     	    cbnz r2, 1f 
 688 061e 4FEA0343 	    lsl r3,#16 
 689 0622 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 690 0624 08BC     	    pop {r3}
 691 0626 7047     	    _RET 
 692              	
 693              	/******************************************************
 694              	*  COLD start moves the following to USER variables.
 695              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 696              	******************************************************/
 697              		.p2align 2
 698              	UZERO:
 699 0628 00000000 		.word 0  			/*Reserved */
 700 062c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 701 0630 00000000 		.word 0      /* TICKS */
 702 0634 00000000 	    .word 0     /* CD_TIMER */
 703 0638 08530000 		.word HI_BOTH  /*'BOOT */
 704 063c 2C160000 		.word PS2_QKEY /* query for character */
 705 0640 F40E0000 	  .word TV_EMIT  /* char output device */
 706 0644 0A000000 	  .word BASEE 	/*BASE */
 707 0648 00000000 		.word 0			/*tmp */
 708 064c 00000000 		.word 0			/*SPAN */
 709 0650 00000000 		.word 0			/*>IN */
 710 0654 00000000 		.word 0			/*#TIB */
 711 0658 80FE0120 		.word TIBB	/*TIBU */
 712 065c 78440000 		.word INTER	/*'EVAL */
 713 0660 00000000 		.word 0			/*HLD */
 714 0664 F0530000 		.word _LASTN	/*CONTEXT */
 715 0668 58540000 		.word CTOP  	/* FCP end of system dictionnary */
 716 066c 304E0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 717 0670 F0530000 		.word _LASTN	/*LAST word in dictionary */
 718 0674 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 718      00000000 
 718      00000000 
 718      00000000 
 719 0684 00000000 		.word 0  /* RX_HEAD */
 720 0688 00000000 		.word 0  /* RX_TAIL */ 
 721 068c 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 722 0690 00000000 		.word 0  /* VID_STATE, video state */  
 723 0694 00000000 	    .word 0  /* VID_FIELD, field */
 724 0698 80800120 		.word VID_BUFF /* video_buffer address */ 
ARM GAS  forth.s 			page 26


 725 069c 00000000 	    .word 0 /* kbd struct */
 726 06a0 00000000 		.space KBD_QUEUE_SIZE,0  
 726      00000000 
 726      00000000 
 726      00000000 
 727 06b0 00000000 		.word 0  /* kbd queue head */
 728 06b4 00000000 		.word 0 /* kbd queue tail */ 
 729 06b8 00000000 	    .word 0 /* tv cursor row */
 730 06bc 00000000 	    .word 0 /* tv cursor column */ 
 731 06c0 00000000 	    .word 0 /* tv back color */
 732 06c4 07000000 	    .word 7 /* tv font color */
 733 06c8 00000000 	    .word 0 /* FPSW */
 734 06cc 00000000 	    .word 0 /* FBASE */ 
 735 06d0 00000000 	    .word 0,0 
 735      00000000 
 736              	ULAST:
 737              	
 738              	// used by _HEADER macro 
 739              	// to link names field
 740              	// in dictionary  
 741 06d8 12000000 	    .equ LINK, 0 
 741      C2000000 
 741      0C010000 
 741      4E010000 
 741      8A010000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
ARM GAS  forth.s 			page 27


  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0700 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0708 1868     		ldr r0,[r3,#USART_SR]
  38 070a 5968     		ldr r1,[r3,#USART_DR]
  39 070c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0710 0CD0     		beq 2f // no char received 
  41 0712 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0716 3FF4EFAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 071a 04F14C00 		add r0,UP,#RX_QUEUE
  44 071e 226E     		ldr r2,[UP,#RX_TAIL]
  45 0720 8154     		strb r1,[r0,r2]
  46 0722 02F10102 		add r2,#1 
  47 0726 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 072a 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 072c 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 072e 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0736 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0738 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 073c 01EA0201 	  and r1,r1,r2
  62 0740 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0744 41EA0201 	  orr r1,r1,r2 
  64 0748 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 074a 4FF4EE61 	  mov r1,#0x77<<4 
  67 074e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0750 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0758 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 075c 8160     	  str r1,[r0,#USART_BRR]
  73 075e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0762 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0764 4FF02500 	  mov r0,#USART1_IRQ 
  77 0768 4FF00701 	  mov r1,#7
  78 076c 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0776 4FF02500 	  mov r0,#USART1_IRQ 
  81 077a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FE5DF8 
  81      04EB
  82 0784 7047     	  _RET  
ARM GAS  forth.s 			page 28


  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0786 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0794 47F8046D 		_PUSH
  92 0798 206E     		ldr T0,[UP,#RX_TAIL] 
  93 079a E16D     		ldr T1,[UP,#RX_HEAD]
  94 079c 90EA0106 		eors TOS,T0,T1 
  95 07a0 0CD0     		beq 1f
  96 07a2 04F14C00 		add T0,UP,#RX_QUEUE 
  97 07a6 0844     		add T0,T1 
  98 07a8 0678     		ldrb TOS,[T0]
  99 07aa 01F10101 		add T1,#1 
 100 07ae 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 07b2 E165     		str T1,[UP,#RX_HEAD]
 102 07b4 47F8046D 		_PUSH 
 103 07b8 4FF0FF36 		mov TOS,#-1
 104 07bc 02F0AAB8 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 07c0 8A070000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 07d0 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 07d8 2868     	1:  ldr T0,[WP,#USART_SR]
 113 07da 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 07de FBD0     		beq 1b 
 115 07e0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 07e2 57F8046B 		_POP
 117 07e6 02F095B8 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 07ea C4070000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 07f4 47F8046D 	        _PUSH 
 126 07f8 4FF00006 	        mov TOS,#0
 127 07fc 02F08AB8 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
ARM GAS  forth.s 			page 29


 131              	    constant: serial console id 
 132              	****************************************/
 133 0800 EE070000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 080c 47F8046D 	        _PUSH 
 135 0810 4FF00106 	        mov TOS,#1
 136 0814 02F07EB8 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0818 04080000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0824 3046     	        mov T0,TOS
 144 0826 57F8046B 	        _POP 
 145 082a 50B1     	        cbz T0, 4f 
 146              	// serial console 
 147 082c 5048     	        ldr T0,=SER_QKEY 
 148 082e 6061     	        str T0,[UP,#STDIN]
 149 0830 5048     	        ldr T0,=SER_EMIT
 150 0832 A061     	        str T0,[UP,#STDOUT]
 151 0834 504D45F0 	        _CALL_COLWORD READY 
 151      010504F0 
 151      CBBD
 152 083e 02F069B8 	        _NEXT 
 153              	4: // local console 
 154 0842 4E48     	        ldr T0,=PS2_QKEY
 155 0844 6061     	        str T0,[UP,#STDIN]
 156 0846 4E48     	        ldr T0,=TV_EMIT
 157 0848 A061     	        str T0,[UP,#STDOUT]
 158 084a 4B4D45F0 	        _CALL_COLWORD READY 
 158      010504F0 
 158      C0BD
 159 0854 02F05EB8 	        _NEXT 
 160              	
 161              	/*******************************
 162              	    ANSI-PARAM ( n -- )
 163              	    convert and transmit 
 164              	    ANSI ESC[  parameter 
 165              	*******************************/
 166 0858 1C080000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 166      0A414E53 
 166      492D5041 
 166      52414D00 
 167 0868 504700BF 	      _NEST 
 168 086c DB2A0000 	      _DOLIT -1 // c 
 168      FFFFFFFF 
 169 0874 752D0000 	1:    _ADR ONEP  // c+1
 170 0878 D12B0000 	      _ADR TOR   
 171 087c DB2A0000 	      _DOLIT 10 
 171      0A000000 
 172 0884 79340000 	      _ADR SLMOD // r q  
 173 0888 292E0000 	      _ADR QDUP  // r q q | r 0  
 174 088c 1B2B0000 	      _QBRAN 2f  // r 0 
ARM GAS  forth.s 			page 30


 174      A0080000 
 175 0894 8D2B0000 	      _ADR RFROM // r q c 
 176 0898 2F2B0000 	      _BRAN 1b
 176      74080000 
 177 08a0 DB2A0000 	2:    _DOLIT '0'  
 177      30000000 
 178 08a8 192D0000 	      _ADR PLUS 
 179 08ac E5290000 	      _ADR EMIT 
 180 08b0 8D2B0000 	      _ADR RFROM 
 181 08b4 292E0000 	      _ADR QDUP 
 182 08b8 1B2B0000 	      _QBRAN 3f
 182      D0080000 
 183 08c0 852D0000 	      _ADR ONEM 
 184 08c4 D12B0000 	      _ADR TOR 
 185 08c8 2F2B0000 	      _BRAN 2b 
 185      A0080000 
 186              	3:    
 187 08d0 1B290000 	      _UNNEST 
 188              	
 189              	/******************************
 190              	    ESC[ 
 191              	    send ANSI escape sequence
 192              	*******************************/
 193 08d4 5C080000 	      _HEADER ANSI_ESC,4,"ESC["
 193      04455343 
 193      5B0000BF 
 194 08e0 504700BF 	      _NEST 
 195 08e4 DB2A0000 	      _DOLIT 27 
 195      1B000000 
 196 08ec E5290000 	      _ADR EMIT 
 197 08f0 DB2A0000 	      _DOLIT '['
 197      5B000000 
 198 08f8 E5290000 	      _ADR EMIT 
 199 08fc 1B290000 	      _UNNEST 
 200              	
 201              	/*************************************
 202              	    SER-AT ( line col -- )
 203              	    move cursor on serial console
 204              	*************************************/
 205 0900 D8080000 	      _HEADER SER_AT,6,"SER-AT"
 205      06534552 
 205      2D415400 
 206 090c 504700BF 	      _NEST
 207 0910 E1080000 	      _ADR ANSI_ESC
 208 0914 652C0000 	      _ADR SWAP 
 209 0918 69080000 	      _ADR ANSI_PARAM 
 210 091c DB2A0000 	      _DOLIT ';'
 210      3B000000 
 211 0924 E5290000 	      _ADR EMIT
 212 0928 69080000 	      _ADR ANSI_PARAM
 213 092c DB2A0000 	      _DOLIT 'H'
 213      48000000 
 214 0934 E5290000 	      _ADR EMIT 
 215 0938 1B290000 	      _UNNEST 
 216              	
 217              	/****************************
 218              	    SER-CLS ( -- )
ARM GAS  forth.s 			page 31


 219              	    serial clear screeen 
 220              	****************************/
 221 093c 04090000 	    _HEADER SER_CLS,7,"SER-CLS"
 221      07534552 
 221      2D434C53 
 222 0948 504700BF 	    _NEST
 223 094c DB2A0000 	    _DOLIT 1 
 223      01000000 
 224 0954 552C0000 	    _ADR DUPP 
 225 0958 0D090000 	    _ADR SER_AT  
 226 095c E1080000 	    _ADR ANSI_ESC
 227 0960 DB2A0000 	    _DOLIT 'J'
 227      4A000000 
 228 0968 E5290000 	    _ADR EMIT 
 229 096c 1B290000 	    _UNNEST 
 230 0970 94070000 	
 230      D0070000 
 230      D4530000 
 230      2C160000 
 230      F40E0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
ARM GAS  forth.s 			page 32


   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
ARM GAS  forth.s 			page 33


  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0984 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 098c 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 098e 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0996 41EA0201 	  orr r1,r2
  82 099a 0160     	  str r1,[r0,#GPIO_MODER]
  83 099c 81EA0101 	  eor r1,r1 
  84 09a0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 09a2 4FF00101 	  mov r1,#1 // pin 1 
  88 09a6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 09aa 00B5FFF7 	  _CALL gpio_config 
  89      DBFD5DF8 
  89      04EB
  90 09b4 4FF00101 	  mov r1,#1 
  91 09b8 4FF00202 	  mov r2,#2
  92 09bc 00B5FFF7 	  _CALL gpio_speed 
  92      11FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 09c6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 09c8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 09cc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 09ce 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 09d6 4FF00200 	  mov r0,#2 
 100 09da 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 09dc 41EA0001 	  orr r1,r0 
 102 09e0 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 09e2 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 09ea 41F2D470 	  mov r0,#HPER
 106 09ee D062     	  str r0,[r2,#TIM_ARR]
 107 09f0 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 09f4 D063     	  str r0,[r2,#TIM_CCR3]
 109 09f6 4FF4E170 	  mov r0,#HPULSE 
 110 09fa 1064     	  str r0,[r2,#TIM_CCR4]  
 111 09fc 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0a00 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0a02 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0a06 1062     	  str r0,[r2,#TIM_CCER]
 115 0a08 4FF00100 	  mov r0,#1 
ARM GAS  forth.s 			page 34


 116 0a0c D060     	  str r0,[r2,#TIM_DIER]
 117 0a0e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0a10 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0a14 4FF00201 	  mov r1,#2
 121 0a18 00B5FFF7 	  _CALL nvic_set_priority
 121      5FFD5DF8 
 121      04EB
 122 0a22 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0a26 00B5FFF7 	  _CALL nvic_enable_irq
 123      71FD5DF8 
 123      04EB
 124 0a30 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0a32 00BF     	  _GBL_FUNC tv_out_isr
 132 0a34 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0a3c 81EA0101 	  eor T1,T1
 134 0a40 0161     	  str T1,[T0,#TIM_SR]
 135 0a42 616E     	  ldr T1,[UP,#VID_CNTR]
 136 0a44 01F10101 	  add T1,#1 
 137 0a48 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0a4a A26E     	  ldr T2,[UP,#VID_STATE]
 140 0a4c 002A     	  cmp T2,#ST_VSYNC 
 141 0a4e 07D0     	  beq state_vsync
 142 0a50 012A     	  cmp T2,#ST_PREVID 
 143 0a52 2FD0     	  beq state_pre_video 
 144 0a54 022A     	  cmp T2,#ST_VIDEO 
 145 0a56 36D0     	  beq state_video_out 
 146 0a58 032A     	  cmp T2,#ST_POSTVID 
 147 0a5a 63D0     	  beq state_post_video
 148 0a5c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0a60 0129     	  cmp T1,#1
 152 0a62 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0a64 4FF0DB01 	  mov T1,#SERRATION
 155 0a68 0164     	  str T1,[T0,#TIM_CCR4]
 156 0a6a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0a6e C162     	  str T1,[T0,#TIM_ARR]
 158 0a70 6BE0     	  b tv_isr_exit 
 159 0a72 0729     	1: cmp T1,#7
 160 0a74 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0a76 40F62821 	  mov T1,#VSYNC_PULSE
 163 0a7a 0164     	  str T1,[T0,#TIM_CCR4]
 164 0a7c 65E0     	  b tv_isr_exit
 165 0a7e 0D29     	2: cmp T1,#13
 166 0a80 03D1     	   bne 3f  
 167              	// set vertical post-sync    
ARM GAS  forth.s 			page 35


 168 0a82 4FF0DB01 	   mov T1,#SERRATION 
 169 0a86 0164     	   str T1,[T0,#TIM_CCR4]
 170 0a88 5FE0     	   b tv_isr_exit   
 171 0a8a 1229     	3: cmp T1,#18
 172 0a8c 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0a8e E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0a90 0029     	   cmp T1,#ODD_FIELD  
 176 0a92 5AD0     	   beq tv_isr_exit 
 177 0a94 01E0     	   b sync_end 
 178 0a96 1329     	4: cmp T1,#19 
 179 0a98 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0a9a 4FF00901 	   mov T1,#9
 182 0a9e 6166     	   str T1,[UP,#VID_CNTR]
 183 0aa0 4FF4E171 	   mov T1,#HPULSE 
 184 0aa4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0aa6 41F2D471 	   mov T1,#HPER 
 186 0aaa C162     	   str T1,[T0,#TIM_ARR] 
 187 0aac 4FF00101 	   mov T1,#ST_PREVID 
 188 0ab0 A166     	   str T1,[UP,#VID_STATE]
 189 0ab2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ab4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ab6 48D4     	   bmi tv_isr_exit 
 194 0ab8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0abc A166     	   str T1,[UP,#VID_STATE]
 196 0abe 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0ac2 C160     	   str T1,[T0,#TIM_DIER]
 198 0ac4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0ac6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ac8 06D9     	   bls 1f 
 205 0aca 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ace A166     	   str T1,[UP,#VID_STATE]
 207 0ad0 4FF00101 	   mov T1,#1 
 208 0ad4 C160     	   str T1,[T0,#TIM_DIER]
 209 0ad6 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ad8 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ada A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ade 4FF0A003 	   mov T3,#160
 214 0ae2 03FB01F1 	   mul T1,T3 
 215 0ae6 0844     	   add T0,T1  
 216 0ae8 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0af0 10F8012B 	2: ldrb T2,[T0],#1 
 222 0af4 4FEA0222 	   lsl T2,#8 
 223 0af8 8A82     	   strh T2,[T1,#GPIO_ODR]
ARM GAS  forth.s 			page 36


 224 0afa AFF30080 	   nop.w 
 225 0afe AFF30080 	   nop.w
 226 0b02 AFF30080 	   nop.w 
 227 0b06 AFF30080 	   nop.w 
 228 0b0a 4FEA0212 	   lsl T2,#4  
 229 0b0e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0b10 AFF30080 	   nop.w
 231 0b14 AFF30080 	   nop.w  
 232 0b18 013B     	   subs T3,#1
 233 0b1a E9D1     	   bne 2b  
 234 0b1c 4FF47022 	   mov T2,#(15<<16) 
 235 0b20 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0b22 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0b24 4FF48372 	   mov T2,#262
 239 0b28 9142     	   cmp T1,T2
 240 0b2a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0b2c E16E     	   ldr T1,[UP,VID_FIELD]
 243 0b2e 11B9     	   cbnz T1, frame_end 
 244 0b30 40F6E931 	   mov T1,#SYNC_LINE
 245 0b34 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0b36 4FF00001 	   mov T1,#ST_VSYNC 
 248 0b3a A166     	   str T1,[UP,#VID_STATE]
 249 0b3c 81EA0101 	   eor T1,T1 
 250 0b40 6166     	   str T1,[UP,#VID_CNTR]
 251 0b42 E16E     	   ldr T1,[UP,#VID_FIELD]
 252 0b44 6FEA0101 	   mvn T1,T1  
 253 0b48 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0b4a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0b4c 40090000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0b5c 47F8046D 		_PUSH 
 266 0b60 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0b64 01F0D6BE 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0b68 500B0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0b78 47F8046D 		_PUSH 
 273 0b7c 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0b80 01F0C8BE 		_NEXT 
ARM GAS  forth.s 			page 37


 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0b84 6C0B0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0b90 47F8046D 	  _PUSH 
 280 0b94 04F19406 	  ADD TOS,UP,#COL 
 281 0b98 01F0BCBE 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0b9c 880B0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0ba4 47F8046D 	  _PUSH 
 287 0ba8 04F19006 	  ADD TOS,UP,#ROW 
 288 0bac 01F0B2BE 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0bb0 A00B0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0bbc 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0bc0 00FB06F6 	  mul TOS,T0 
 295 0bc4 01F0A6BE 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0bc8 B40B0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0bd4 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0bd8 00FB06F6 	  mul TOS,T0 
 302 0bdc 01F09ABE 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0be0 CC0B0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0bec 47F8046D 	  _PUSH 
 308 0bf0 DFF88C65 	  ldr TOS,=font_6x8 
 309 0bf4 01F08EBE 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0bf8 E40B0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0c04 47F8046D 	  _PUSH 
 315 0c08 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0c0a 01F083BE 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
ARM GAS  forth.s 			page 38


 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0c0e FC0B0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0c18 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0c1a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0c1e 02FB00F0 	    mul T0,T2 
 330 0c22 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0c26 1044     	    add T0,T2 
 332 0c28 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0c2a 0344     	    add T3,T0 // T3 -> byte address 
 334 0c2c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0c2e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0c32 11F0010F 	    tst T1,#1 
 337 0c36 01D0     	    beq 1f 
 338 0c38 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0c3c DFF84405 	1:  ldr T0,=plot_op 
 340 0c40 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0c44 05EA0205 	    and WP,T2 // mask out nibble 
 343 0c48 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 0c4c 11F0010F 	    tst T1,#1 
 345 0c50 01D1     	    bne 1f 
 346 0c52 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0c56 45EA0005 	1:  orr WP,T0  
 348 0c5a 1D70     	    strb WP,[T3]
 349 0c5c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0c5e 05EA0205 	    and WP,T2 
 352 0c62 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0c66 11F0010F 	    tst T1,#1
 354 0c6a 01D1     	    bne 1f 
 355 0c6c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0c70 45EA0005 	1:	orr WP,T0 
 357 0c74 1D70     	    strb WP,[T3]
 358 0c76 0DE0     	    b 9f 
 359              	op_invert:
 360 0c78 85EA0205 	    eor WP,T2 
 361 0c7c 1D70     	    strb WP,[T3]
 362 0c7e 09E0     	    b 9f 
 363              	op_xor:
 364 0c80 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0c84 11F0010F 	    tst T1,#1 
 366 0c88 01D1     	    bne 1f 
 367 0c8a 4FEA0010 	    lsl T0,#4 
 368 0c8e 85EA0005 	1:  eor WP,T0 
 369 0c92 1D70     	    strb WP,[T3]
 370 0c94 57F8046B 	9:  _POP 
 371 0c98 01F03CBE 	    _NEXT 
 372              	
 373 0c9c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
ARM GAS  forth.s 			page 39


 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ca0 120C0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0cac 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0cae 0028     	    cmp T0,#0
 381 0cb0 FCD1     	    bne 1b
 382 0cb2 01F02FBE 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0cb6 A40C0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0cc0 80EA0000 	    eor T0,T0 
 388 0cc4 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0cc8 40EA0100 	    orr T0,T1 
 390 0ccc 4FEA0111 	    lsl T1,#4 
 391 0cd0 40EA0100 	    orr T0,T1 
 392 0cd4 4FEA0021 	    lsl T1,T0,#8 
 393 0cd8 40EA0100 	    orr T0,T1 
 394 0cdc 4FEA0041 	    lsl T1,T0,#16
 395 0ce0 40EA0100 	    orr T0,T1 
 396 0ce4 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0ce8 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0cea 5050     	1:	str T0,[T2,T1]
 399 0cec 0439     	    subs T1,#4
 400 0cee FCD1     	    bne 1b
 401 0cf0 1060     	    str T0,[T2]
 402 0cf2 80EA0000 	    eor T0,T0 
 403 0cf6 C4F89000 	    str T0,[UP,#ROW]
 404 0cfa C4F89400 	    str T0,[UP,#COL]
 405 0cfe 01F009BE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0d02 BA0C0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0d10 504700BF 	  _NEST
 412 0d14 DB2A0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0d1c 552C0000 	  _ADR DUPP  
 414 0d20 D12B0000 	  _ADR TOR 
 415 0d24 392D0000 	  _ADR STAR
 416 0d28 050C0000 	  _ADR VIDBUFF
 417 0d2c 192D0000 	  _ADR PLUS
 418 0d30 8D2B0000 	  _ADR RFROM   
 419 0d34 DB2A0000 	  _DOLIT 0 
 419      00000000 
 420 0d3c AD360000 	  _ADR FILL 
 421 0d40 1B290000 	  _UNNEST 
 422              	
 423              	/**********************************
ARM GAS  forth.s 			page 40


 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0d44 060D0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0d54 504700BF 	    _NEST 
 429 0d58 050C0000 	    _ADR VIDBUFF 
 430 0d5c 552C0000 	    _ADR DUPP 
 431 0d60 DB2A0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0d68 552C0000 	    _ADR DUPP 
 433 0d6c D12B0000 	    _ADR TOR 
 434 0d70 192D0000 	    _ADR PLUS 
 435 0d74 652C0000 	    _ADR SWAP 
 436 0d78 DB2A0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0d80 8D2B0000 	    _ADR RFROM  
 438 0d84 292D0000 	    _ADR SUBB 
 439 0d88 65360000 	    _ADR MOVE
 440 0d8c DB2A0000 	    _DOLIT 24 
 440      18000000 
 441 0d94 110D0000 	    _ADR CLRLINE 
 442 0d98 1B290000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0d9c 480D0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0dac 504700BF 	    _NEST 
 450 0db0 050C0000 	    _ADR VIDBUFF
 451 0db4 552C0000 	    _ADR DUPP 
 452 0db8 DB2A0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0dc0 192D0000 	    _ADR PLUS 
 454 0dc4 DB2A0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0dcc DB2A0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0dd4 292D0000 	    _ADR SUBB  
 457 0dd8 65360000 	    _ADR MOVE
 458 0ddc DB2A0000 	    _DOLIT 0 
 458      00000000 
 459 0de4 110D0000 	    _ADR CLRLINE
 460 0de8 1B290000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0dec A00D0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
ARM GAS  forth.s 			page 41


 467      0754562D 
 467      43524C46 
 468 0df8 E34D     	    ldr WP,=SCROLLUP 
 469 0dfa 45F00105 	    orr WP,#1
 470 0dfe 80EA0000 	    eor T0,T0 
 471 0e02 C4F89400 	    str T0,[UP,#COL]
 472 0e06 D4F89000 	    ldr T0,[UP,#ROW]
 473 0e0a 1828     	    cmp T0,#24 
 474 0e0c A2D0     	    beq SCROLLUP  
 475 0e0e 00F10100 	    add T0,#1 
 476 0e12 C4F89000 	    str T0,[UP,#ROW]
 477 0e16 01F07DBD 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0e1a F00D0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0e24 D4F89400 	  ldr T0,[UP,#COL]
 484 0e28 00F10100 	  add T0,#1
 485 0e2c 3528     	  cmp T0,#53
 486 0e2e E3D5     	  bpl TV_CRLF  
 487 0e30 C4F89400 	  str T0,[UP,#COL]
 488 0e34 01F06EBD 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0e38 1E0E0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0e44 D4F89400 	    ldr T0,[UP,#COL]
 497 0e48 28B1     	    cbz T0,1f 
 498 0e4a A0F10100 	    sub T0,#1 
 499 0e4e C4F89400 	    str T0,[UP,#COL]
 500 0e52 01F05FBD 	    _NEXT 
 501 0e56 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0e5a 38B1     	    cbz T0,9f
 503 0e5c A0F10100 	    sub T0,#1
 504 0e60 C4F89000 	    str T0,[UP,#ROW]
 505 0e64 4FF03400 	    mov T0,#52 
 506 0e68 C4F89400 	    str T0,[UP,#COL]
 507 0e6c 01F052BD 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0e70 4FF08000 	    mov T0,#128 
 513 0e74 06EA0006 	    and TOS,T0 
 514 0e78 4FEAD616 	    lsr TOS,#7
 515 0e7c 01F04ABD 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
ARM GAS  forth.s 			page 42


 519 0e80 3868     	  ldr T0,[DSP]
 520 0e82 00F10100 	  add T0,#1 
 521 0e86 3860     	  str T0,[DSP]
 522 0e88 01F044BD 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0e8c 4FEA4606 	    lsl TOS,#1
 527 0e90 01F040BD 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0e94 504700BF 	    _NEST 
 536 0e98 DB2A0000 	    _DOLIT 5 
 536      05000000 
 537 0ea0 D12B0000 	    _ADR TOR 
 538 0ea4 D12B0000 	1:  _ADR TOR 
 539 0ea8 8D2E0000 	    _ADR DDUP 
 540 0eac BD2B0000 	    _ADR RAT
 541 0eb0 710E0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0eb4 190C0000 	    _ADR PLOT 
 543 0eb8 810E0000 	    _ADR INCR_X 
 544 0ebc 8D2B0000 	    _ADR RFROM 
 545 0ec0 8D0E0000 	    _ADR NEXT_PIXEL
 546 0ec4 FD2A0000 	    _DONXT 1b
 546      A40E0000 
 547 0ecc 792E0000 	    _ADR TDROP 
 548 0ed0 1B290000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0ed4 A6F12006 	   sub TOS,#32
 553 0ed8 4FF00800 	   mov T0,#8 
 554 0edc 00FB06F6 	   mul TOS,T0 
 555 0ee0 A748     	   ldr T0,=font_6x8
 556 0ee2 0644     	   add TOS,T0 
 557 0ee4 01F016BD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0ee8 3C0E0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0ef4 504700BF 	    _NEST
 565 0ef8 552C0000 	    _ADR DUPP 
 566 0efc DB2A0000 	    _DOLIT 32 
 566      20000000 
 567 0f04 D92F0000 	    _ADR ULESS
 568 0f08 1B2B0000 	    _QBRAN 1f
 568      180F0000 
 569 0f10 2F2B0000 	    _BRAN CTRL_KEY
ARM GAS  forth.s 			page 43


 569      7C0F0000 
 570 0f18 D50E0000 	1:  _ADR CHAR_FONT 
 571 0f1c 910B0000 	    _ADR CURSOR_COL 
 572 0f20 612B0000 	    _ADR AT
 573 0f24 D50B0000 	    _ADR COLX  // x coord 
 574 0f28 A50B0000 	    _ADR CURSOR_ROW 
 575 0f2c 612B0000 	    _ADR AT    
 576 0f30 BD0B0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0f34 3D2E0000 	    _ADR ROT  // TEST 
 578 0f38 DB2A0000 	    _DOLIT 7   
 578      07000000 
 579 0f40 D12B0000 	    _ADR TOR  
 580 0f44 D12B0000 	1:  _ADR TOR  // { x y }
 581 0f48 8D2E0000 	    _ADR DDUP  // { x y x y }
 582 0f4c BD2B0000 	    _ADR RAT 
 583 0f50 812B0000 	    _ADR CAT   // { x y x y r }
 584 0f54 950E0000 	    _ADR CHAR_ROW 
 585 0f58 752D0000 	    _ADR ONEP // {x y' }
 586 0f5c 8D2B0000 	    _ADR RFROM 
 587 0f60 752D0000 	    _ADR ONEP // {x y' c-adr' }
 588 0f64 FD2A0000 	    _DONXT 1b
 588      440F0000 
 589 0f6c 792E0000 	    _ADR TDROP  
 590 0f70 250E0000 	    _ADR RIGHT
 591 0f74 65100000 	9:  _ADR SHOW_CURSOR 
 592 0f78 1B290000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0f7c ED100000 	    _ADR HIDE_CURSOR
 595 0f80 552C0000 	    _ADR DUPP 
 596 0f84 DB2A0000 	    _DOLIT BKSPP  
 596      08000000 
 597 0f8c A12F0000 	    _ADR EQUAL 
 598 0f90 1B2B0000 	    _QBRAN 1f 
 598      A80F0000 
 599 0f98 45100000 	    _ADR BACK_SPACE 
 600 0f9c 452C0000 	8:  _ADR DROP 
 601 0fa0 2F2B0000 	    _BRAN 9b 
 601      740F0000 
 602 0fa8 552C0000 	1:  _ADR DUPP 
 603 0fac DB2A0000 	    _DOLIT CRR 
 603      0D000000 
 604 0fb4 A12F0000 	    _ADR EQUAL 
 605 0fb8 1B2B0000 	    _QBRAN 1f 
 605      CC0F0000 
 606 0fc0 ED0F0000 	    _ADR CAR_RET
 607 0fc4 2F2B0000 	    _BRAN 8b
 607      9C0F0000 
 608 0fcc DB2A0000 	1:  _DOLIT LF 
 608      0A000000 
 609 0fd4 A12F0000 	    _ADR EQUAL 
 610 0fd8 1B2B0000 	    _QBRAN 9b 
 610      740F0000 
 611 0fe0 05100000 	    _ADR LN_FEED
 612 0fe4 2F2B0000 	    _BRAN 9b  
 612      740F0000 
 613              	
 614              	/*******************************
ARM GAS  forth.s 			page 44


 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0fec 504700BF 	   _NEST
 620 0ff0 DB2A0000 	   _DOLIT 0 
 620      00000000 
 621 0ff8 910B0000 	   _ADR CURSOR_COL 
 622 0ffc 4D2B0000 	   _ADR STORE 
 623 1000 1B290000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1004 504700BF 	    _NEST 
 631 1008 A50B0000 	    _ADR CURSOR_ROW 
 632 100c 612B0000 	    _ADR AT 
 633 1010 552C0000 	    _ADR DUPP 
 634 1014 DB2A0000 	    _DOLIT 24 
 634      18000000 
 635 101c C12C0000 	    _ADR XORR 
 636 1020 1B2B0000 	    _QBRAN 1f
 636      38100000 
 637 1028 752D0000 	    _ADR ONEP 
 638 102c A50B0000 	    _ADR CURSOR_ROW 
 639 1030 4D2B0000 	    _ADR STORE 
 640 1034 1B290000 	    _UNNEST    
 641 1038 452C0000 	1:  _ADR DROP 
 642 103c 550D0000 	    _ADR SCROLLUP 
 643 1040 1B290000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1044 504700BF 	  _NEST 
 652 1048 450E0000 	  _ADR LEFT 
 653 104c 65100000 	  _ADR SHOW_CURSOR
 654 1050 1B290000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1054 EC0E0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1064 504700BF 	    _NEST 
 663 1068 DB2A0000 	    _DOLIT 0xFF
 663      FF000000 
 664 1070 A50B0000 	0:  _ADR CURSOR_ROW
ARM GAS  forth.s 			page 45


 665 1074 612B0000 	    _ADR AT  
 666 1078 752D0000 	    _ADR ONEP 
 667 107c BD0B0000 	    _ADR ROWY 
 668 1080 DB2A0000 	    _DOLIT BPR
 668      A0000000 
 669 1088 392D0000 	    _ADR STAR
 670 108c DB2A0000 	    _DOLIT BPR  
 670      A0000000 
 671 1094 292D0000 	    _ADR SUBB 
 672 1098 910B0000 	    _ADR CURSOR_COL
 673 109c 612B0000 	    _ADR AT 
 674 10a0 D50B0000 	    _ADR COLX 
 675 10a4 192E0000 	    _ADR TWOSL  
 676 10a8 192D0000 	    _ADR PLUS
 677 10ac 050C0000 	    _ADR VIDBUFF
 678 10b0 192D0000 	    _ADR PLUS
 679 10b4 DB2A0000 	    _DOLIT 2
 679      02000000 
 680 10bc D12B0000 	    _ADR TOR  
 681 10c0 8D2E0000 	1:  _ADR DDUP 
 682 10c4 6D2B0000 	    _ADR CSTOR 
 683 10c8 752D0000 	    _ADR ONEP 
 684 10cc FD2A0000 	    _DONXT 1b
 684      C0100000 
 685 10d4 652E0000 	2:  _ADR DDROP // drop 3 elements 
 686 10d8 1B290000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 10dc 58100000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 10ec 504700BF 	    _NEST 
 694 10f0 5D0B0000 	    _ADR BACKCOLOR 
 695 10f4 612B0000 	    _ADR AT 
 696 10f8 552C0000 	    _ADR DUPP  
 697 10fc DB2A0000 	    _DOLIT 4 
 697      04000000 
 698 1104 092D0000 	    _ADR LSHIFT 
 699 1108 AD2C0000 	    _ADR ORR 
 700 110c 2F2B0000 	    _BRAN 0b
 700      70100000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1114 E0100000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1120 352E     	    cmp TOS,#53
 706 1122 01D4     	    bmi 1f 
 707 1124 4FF03406 	    mov TOS,#52
 708 1128 C4F89460 	1:  str TOS,[UP,#COL]
 709 112c 57F8046B 	    _POP
 710 1130 192E     	    cmp TOS,#25
ARM GAS  forth.s 			page 46


 711 1132 01D4     	    bmi 1f 
 712 1134 4FF01806 	    mov TOS,#24 
 713 1138 C4F89060 	1:  str TOS,[UP,#ROW]
 714 113c 57F8046B 	    _POP 
 715 1140 01F0E8BB 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1144 18110000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1150 504700BF 	    _NEST 
 721 1154 DD350000 	    _ADR PAD 
 722 1158 552C0000 	    _ADR DUPP 
 723 115c 752D0000 	    _ADR ONEP 
 724 1160 DB2A0000 	    _DOLIT 53
 724      35000000 
 725 1168 65430000 	    _ADR ACCEP
 726 116c 652C0000 	    _ADR SWAP 
 727 1170 452C0000 	    _ADR DROP 
 728 1174 792C0000 	    _ADR OVER 
 729 1178 6D2B0000 	    _ADR CSTOR  
 730 117c 1B290000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
ARM GAS  forth.s 			page 47


 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
ARM GAS  forth.s 			page 48


 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
ARM GAS  forth.s 			page 49


 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
ARM GAS  forth.s 			page 50


 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
ARM GAS  forth.s 			page 51


  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
ARM GAS  forth.s 			page 52


  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
ARM GAS  forth.s 			page 53


 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 118c 1C61     	   .byte 0x1c,'a' 
   9 118e 3262     	   .byte 0x32,'b'
  10 1190 2163     	   .byte 0x21,'c'
  11 1192 2364     	   .byte 0x23,'d'
  12 1194 2465     	   .byte 0x24,'e'
  13 1196 2B66     	   .byte 0x2b,'f'
  14 1198 3467     	   .byte 0x34,'g'
  15 119a 3368     	   .byte 0x33,'h'
  16 119c 4369     	   .byte 0x43,'i'
  17 119e 3B6A     	   .byte 0x3B,'j'
  18 11a0 426B     	   .byte 0x42,'k'
  19 11a2 4B6C     	   .byte 0x4b,'l'
  20 11a4 3A6D     	   .byte 0x3a,'m'
  21 11a6 316E     	   .byte 0x31,'n'
  22 11a8 446F     	   .byte 0x44,'o'
  23 11aa 4D70     	   .byte 0x4d,'p'
  24 11ac 1571     	   .byte 0x15,'q'
  25 11ae 2D72     	   .byte 0x2d,'r'
  26 11b0 1B73     	   .byte 0x1b,'s'
  27 11b2 2C74     	   .byte 0x2c,'t'
  28 11b4 3C75     	   .byte 0x3c,'u'
  29 11b6 2A76     	   .byte 0x2a,'v'
  30 11b8 1D77     	   .byte 0x1d,'w'
  31 11ba 2278     	   .byte 0x22,'x'
  32 11bc 3579     	   .byte 0x35,'y'
  33 11be 1A7A     	   .byte 0x1a,'z'
  34 11c0 4530     	   .byte 0x45,'0'
ARM GAS  forth.s 			page 54


  35 11c2 1631     	   .byte 0x16,'1'
  36 11c4 1E32     	   .byte 0x1e,'2'
  37 11c6 2633     	   .byte 0x26,'3'
  38 11c8 2534     	   .byte 0x25,'4'
  39 11ca 2E35     	   .byte 0x2e,'5'
  40 11cc 3636     	   .byte 0x36,'6'
  41 11ce 3D37     	   .byte 0x3d,'7'
  42 11d0 3E38     	   .byte 0x3e,'8'
  43 11d2 4639     	   .byte 0x46,'9'
  44 11d4 0E60     	   .byte 0x0e,'`'
  45 11d6 4E2D     	   .byte 0x4e,'-'
  46 11d8 553D     	   .byte 0x55,'='
  47 11da 5D5C     	   .byte 0x5d,'\\'
  48 11dc 545B     	   .byte 0x54,'['
  49 11de 5B5D     	   .byte 0x5b,']'
  50 11e0 4C3B     	   .byte 0x4c,';'
  51 11e2 5227     	   .byte 0x52,'\''
  52 11e4 412C     	   .byte 0x41,','
  53 11e6 492E     	   .byte 0x49,'.'
  54 11e8 7C2A     	   .byte 0x7c,'*'
  55 11ea 792B     	   .byte 0x79,'+'
  56 11ec 2920     	   .byte 0x29,' '
  57 11ee 5A0D     	   .byte SC_ENTER,CRR 
  58 11f0 6608     	   .byte SC_BKSP,BKSPP 
  59 11f2 0D09     	   .byte SC_TAB,9
  60 11f4 761B     	   .byte SC_ESC,27
  61 11f6 119E     	   .byte SC_LALT,VK_LALT 
  62 11f8 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 11fa 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 11fc 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 11fe 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1200 5800     	   .byte SC_CAPS,0
  67 1202 0580     	   .byte SC_F1,VK_F1
  68 1204 0681     	   .byte SC_F2,VK_F2
  69 1206 0482     	   .byte SC_F3,VK_F3
  70 1208 0C83     	   .byte SC_F4,VK_F4
  71 120a 0384     	   .byte SC_F5,VK_F5
  72 120c 0B85     	   .byte SC_F6,VK_F6
  73 120e 8386     	   .byte SC_F7,VK_F7
  74 1210 0A87     	   .byte SC_F8,VK_F8
  75 1212 0188     	   .byte SC_F9,VK_F9
  76 1214 098A     	   .byte SC_F10,VK_F10
  77 1216 788B     	   .byte SC_F11,VK_F11
  78 1218 078C     	   .byte SC_F12,VK_F12
  79 121a 7030     	   .byte SC_KP0,'0'
  80 121c 6931     	   .byte SC_KP1,'1'
  81 121e 7232     	   .byte SC_KP2,'2'
  82 1220 7A33     	   .byte SC_KP3,'3'
  83 1222 6B34     	   .byte SC_KP4,'4'
  84 1224 7335     	   .byte SC_KP5,'5'
  85 1226 7436     	   .byte SC_KP6,'6'
  86 1228 6C37     	   .byte SC_KP7,'7'
  87 122a 7538     	   .byte SC_KP8,'8'
  88 122c 7D39     	   .byte SC_KP9,'9'
  89 122e 7C2A     	   .byte SC_KPMUL,'*'
  90 1230 4A2F     	   .byte SC_KPDIV,'/'
  91 1232 792B     	   .byte SC_KPPLUS,'+'
ARM GAS  forth.s 			page 55


  92 1234 7B2D     	   .byte SC_KPMINUS,'-'
  93 1236 712E     	   .byte SC_KPDOT,'.'
  94 1238 5A0D     	   .byte SC_KPENTER,'\r'
  95 123a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 123c AAAA     	   .byte BAT_OK,BAT_OK  
  97 123e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1240 6141     	   .byte 'a','A'
 102 1242 6242     	   .byte 'b','B'
 103 1244 6343     	   .byte 'c','C'
 104 1246 6444     	   .byte 'd','D'
 105 1248 6545     	   .byte 'e','E'
 106 124a 6646     	   .byte 'f','F'
 107 124c 6747     	   .byte 'g','G'
 108 124e 6848     	   .byte 'h','H'
 109 1250 6949     	   .byte 'i','I'
 110 1252 6A4A     	   .byte 'j','J'
 111 1254 6B4B     	   .byte 'k','K'
 112 1256 6C4C     	   .byte 'l','L'
 113 1258 6D4D     	   .byte 'm','M'
 114 125a 6E4E     	   .byte 'n','N'
 115 125c 6F4F     	   .byte 'o','O'
 116 125e 7050     	   .byte 'p','P'
 117 1260 7151     	   .byte 'q','Q'
 118 1262 7252     	   .byte 'r','R'
 119 1264 7353     	   .byte 's','S'
 120 1266 7454     	   .byte 't','T'
 121 1268 7555     	   .byte 'u','U'
 122 126a 7656     	   .byte 'v','V'
 123 126c 7757     	   .byte 'w','W'
 124 126e 7858     	   .byte 'x','X'
 125 1270 7959     	   .byte 'y','Y'
 126 1272 7A5A     	   .byte 'z','Z'
 127 1274 3121     	   .byte '1','!'
 128 1276 3240     	   .byte '2','@'
 129 1278 3323     	   .byte '3','#'
 130 127a 3424     	   .byte '4','$'
 131 127c 3525     	   .byte '5','%'
 132 127e 365E     	   .byte '6','^'
 133 1280 3726     	   .byte '7','&'
 134 1282 382A     	   .byte '8','*'
 135 1284 3928     	   .byte '9','('
 136 1286 3029     	   .byte '0',')'
 137 1288 2D5F     	   .byte '-','_'
 138 128a 3D2B     	   .byte '=','+'
 139 128c 607E     	   .byte '`','~'
 140 128e 2722     	   .byte '\'','"'
 141 1290 2C3C     	   .byte ',','<'
 142 1292 2E3E     	   .byte '.','>'
 143 1294 2F3F     	   .byte '/','?'
 144 1296 5C7C     	   .byte '\\','|'
 145 1298 3B3A     	   .byte ';',':'
 146 129a 5B7B     	   .byte '[','{'
 147 129c 5D7D     	   .byte ']','}'
 148 129e 0000     	   .byte 0,0
ARM GAS  forth.s 			page 56


 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 12a0 315C     	   .byte '1','\\'
 153 12a2 3240     	   .byte '2','@'
 154 12a4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 12a6 363F     	   .byte '6','?'
 158 12a8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 12aa 397B     	   .byte '9','{'
 161 12ac 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 12ae 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 12b0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 12b2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 12b4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 12b6 11A3     	    .byte SC_RALT,VK_RALT
 172 12b8 2F97     	    .byte SC_APPS,VK_APPS
 173 12ba 758D     	    .byte SC_UP,VK_UP
 174 12bc 728E     	    .byte SC_DOWN,VK_DOWN
 175 12be 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 12c0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 12c2 7095     	    .byte SC_INSERT,VK_INSERT
 178 12c4 6C91     	    .byte SC_HOME,VK_HOME
 179 12c6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 12c8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 12ca 717F     	    .byte SC_DEL,VK_DELETE
 182 12cc 6992     	    .byte SC_END,VK_END
 183 12ce 4A2F     	    .byte SC_KPDIV,'/'
 184 12d0 5A0D     	    .byte SC_KPENTER,'\r'
 185 12d2 1200     	    .byte 0x12,0
 186 12d4 7C00     	    .byte 0x7c,0
 187 12d6 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 12d8 6303     	   .byte 'c', VK_CTRL_C 
 193 12da 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 12dc 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 12de 27A2     	   .byte SC_RGUI,VK_RGUI
 196 12e0 11A3     	   .byte SC_RALT,VK_RALT
 197 12e2 2F97     	   .byte SC_APPS,VK_APPS
 198 12e4 7095     	   .byte SC_INSERT,VK_INSERT
 199 12e6 6C91     	   .byte SC_HOME,VK_HOME
 200 12e8 7D93     	   .byte SC_PGUP,VK_PGUP
 201 12ea 717F     	   .byte SC_DEL,VK_DELETE
 202 12ec 6992     	   .byte SC_END,VK_END
 203 12ee 7A94     	   .byte SC_PGDN,VK_PGDN
 204 12f0 758D     	   .byte SC_UP,VK_UP
 205 12f2 6B8F     	   .byte SC_LEFT,VK_LEFT
ARM GAS  forth.s 			page 57


 206 12f4 728E     	   .byte SC_DOWN,VK_DOWN
 207 12f6 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 12f8 4A2F     	   .byte SC_KPDIV,'/'
 209 12fa 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 12fc 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 12fe 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1300 119E     	   .byte SC_LALT,VK_LALT
 213 1302 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1304 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1306 761B     	   .byte SC_ESC,VK_ESC
 216 1308 779A     	   .byte SC_NUM,VK_NLOCK
 217 130a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 130c 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 130e 00BF     	    _GBL_FUNC kbd_isr 
  79 1310 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
ARM GAS  forth.s 			page 58


  79      C4F20102 
  80 1318 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 131c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 131e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1326 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 132a 10F0020F 	    tst r0,#KBD_TX 
  85 132e 40F08480 	    bne send_bit  
  86 1332 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1334 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1338 01F10102 	    add r2,r1,#1
  89 133c 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 1340 0029     	    cmp r1,#0
  91 1342 15D0     	    beq start_bit 
  92 1344 0929     	    cmp r1,#9 
  93 1346 25D0     	    beq parity_bit 
  94 1348 0A29     	    cmp r1,#10 
  95 134a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 134c 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1350 4FEA5202 	    lsr r2,#1 
  99 1354 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1358 07D0     	    beq 1f 
 101 135a 42F08002 	    orr r2,#(1<<7)
 102 135e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 1362 00F10100 	    add r0,#1 
 104 1366 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 136a 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 136e 63E0     	    b 9f         
 107              	start_bit:
 108 1370 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1374 60D1     	    bne 9f // not a start bit 
 110 1376 80EA0000 	    eor r0,r0 
 111 137a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 137e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 1382 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1386 6FF00101 	    mvn r1,#1
 115 138a 00EA0100 	    and r0,r1 // clear error flag 
 116 138e 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 1392 51E0     	    b 9f 
 118              	parity_bit:
 119 1394 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1398 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 139c 4CD0     	    beq 9f  
 122 139e 01F10101 	    add r1,#1 
 123 13a2 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 13a6 47E0     	    b 9f      
 125              	stop_bit:
 126 13a8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 13ac 40D0     	    beq 8f // error stop bit expected 
 128 13ae 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 13b2 11F0010F 	    tst r1,#1 
 130 13b6 3BD0     	    beq 8f // error parity
 131 13b8 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 13bc 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 13c0 E028     	    cmp r0,#XT_KEY
 134 13c2 04D1     	    bne 1f
ARM GAS  forth.s 			page 59


 135 13c4 41F04001 	    orr r1,#KBD_F_XT
 136 13c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 13cc 30E0     	    b 8f  
 138 13ce 11F0800F 	1:  tst r1,#KBD_F_REL
 139 13d2 14D0     	    beq store_code
 140 13d4 5828     	    cmp r0,#SC_CAPS
 141 13d6 04D1     	    bne 1f
 142 13d8 81F00401 	    eor r1,#KBD_F_CAPS
 143 13dc 41F00101 	    orr r1,#KBD_F_CTGL 
 144 13e0 06E0     	    b 2f 
 145 13e2 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 13ec 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 13f0 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 13f4 01EA0201 	    and r1,r2
 149 13f8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 13fc 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 13fe F028     	    cmp r0,#KEY_REL
 154 1400 04D1     	    bne 1f
 155              	// set release flags 
 156 1402 41F08001 	    orr r1,#KBD_F_REL 
 157 1406 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 140a 11E0     	    b 8f     
 159 140c 0146     	1:  mov r1,r0 
 160 140e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1418 0AD1     	    bne 8f // was async key 
 162 141a D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 141e 04F17802 	    add r2,UP,#KBD_QUEUE
 164 1422 1154     	    strb r1,[r2,r0]
 165 1424 00F10100 	    add r0,#1
 166 1428 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 142c 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 1430 80EA0000 	8:  eor r0,r0 
 169 1434 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 1438 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 143a 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 143e 01F10100 	    add r0,r1,#1
 182 1442 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 1446 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 144a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 144e 0829     	1:  cmp r1,#8 
 187 1450 15D0     	    beq send_parity 
ARM GAS  forth.s 			page 60


 188 1452 0929     	    cmp r1,#9 
 189 1454 1CD0     	    beq send_stop
 190 1456 0A29     	    cmp r1,#10
 191 1458 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 145a 10F0010F 	    tst r0,#1
 194 145e 4FEA5000 	    lsr r0,#1
 195 1462 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 1466 02D1     	    bne 1f 
 197 1468 4FEA0242 	    lsl r2,#16
 198 146c 05E0     	    b 2f  
 199 146e 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1472 00F10100 	    add r0,#1 
 201 1476 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 147a 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 147c 1CE0     	    b 9f 
 204              	send_parity:
 205 147e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 1482 10F0010F 	    tst r0,#1
 207 1486 01D0     	    beq 1f 
 208 1488 4FEA0242 	    lsl r2,#16
 209 148c 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 148e 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1490 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1492 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1496 1960     	    str r1,[r3,#GPIO_MODER]
 217 1498 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 149a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 149e 6FF00201 	    mvn r1,#KBD_TX 
 221 14a2 00EA0100 	    and r0,r1 
 222 14a6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 14a8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 14ac 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 14b0 80EA0000 	    eor r0,r0 
 226 14b4 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 14b8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 14ba 02B4     	    push {r1}
 238 14bc DFF86414 	    ldr r1,=async_keys
 239 14c0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 14ca 02BC     	    pop {r1}
 241 14cc 7047     	    _RET 
 242              	
ARM GAS  forth.s 			page 61


 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 14ce 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 14d8 FF28     	    cmp r0,#255
 256 14da 01D1     	    bne set_async_key 
 257 14dc 0020     	    movs r0,#0 
 258 14de 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 14e0 06B4     	    push {r1,r2}
 262 14e2 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 14e6 DFF84014 	    ldr r1,=async_jump 
 264 14ea D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 14ee 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 14f2 04E0     	    b set_reset
 268              	ctrl_key:
 269 14f4 4FF01000 	    mov r0,#KBD_F_CTRL
 270 14f8 01E0     	    b set_reset 
 271              	alt_key:
 272 14fa 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 14fe 12F0800F 	    tst r2,#KBD_F_REL 
 275 1502 04D0     	    beq 1f 
 276 1504 6FEA0000 	    mvn r0,r0
 277 1508 02EA0002 	    and r2,r0
 278 150c 01E0     	    b 2f
 279 150e 42EA0002 	1:  orr r2,r0 
 280 1512 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1516 5FF0FF30 	    movs r0,#-1
 282 151a 06BC     	9:  pop {r1,r2}
 283 151c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 151e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1520 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1522 1401     	    .byte SC_LCTRL,1  // left control 
 290 1524 1401     	    .byte SC_RCTRL,1  // right control 
 291 1526 1102     	    .byte SC_LALT,2  // left alt 
 292 1528 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 152a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 152c 00       	    .byte 0 // shift  key 
 297 152d 03       	    .byte (ctrl_key-shift_key)/2
ARM GAS  forth.s 			page 62


 298 152e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 152f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1530 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1538 1846     	    mov r0,r3 
 311 153a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 153e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1542 00B5FFF7 	    _CALL gpio_config
 313      0FF85DF8 
 313      04EB
 314 154c 1846     	    mov r0,r3 
 315 154e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1552 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1556 00B5FFF7 	    _CALL gpio_config
 317      05F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1560 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1568 4FF40050 	    mov r0,#(2<<12)
 321 156c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 156e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 1576 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 157a 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 157c D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 157e 80EA0000 	   eor r0,r0 
 328 1582 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 1586 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 158a 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 158e 4FF00101 	   mov r1,#1 
 333 1592 00B5FEF7 	   _CALL nvic_set_priority
 333      A2FF5DF8 
 333      04EB
 334 159c 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 15a0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      B4FF5DF8 
 335      04EB
 336 15aa 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 15ac 48110000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
ARM GAS  forth.s 			page 63


 341 15bc 47F8046D 	    _PUSH 
 342 15c0 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 15c4 06F0FC06 	    and TOS,#0xFC  
 344 15c8 01F0A4B9 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 15cc 0EB4     	    push {T1,T2,T3}
 352 15ce 80EA0000 	    eor T0,T0  
 353 15d2 04F17803 	    add T3,UP,#KBD_QUEUE
 354 15d6 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 15da D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 15de 9142     	    cmp T1,T2 
 357 15e0 06D0     	    beq 2f  
 358 15e2 585C     	    ldrb T0,[T3,T1]
 359 15e4 01F10101 	    add T1,#1 
 360 15e8 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 15ec C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 15f0 0EBC     	2:  pop {T1,T2,T3}
 363 15f2 7047     	    _RET 
 364              	
 365              	wait_code:
 366 15f4 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 15fe 0000     	    movs T0,T0
 368 1600 F8D0     	    beq wait_code  
 369 1602 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1604 04B4     	    push {T2}
 380 1606 11F8012B 	1:  ldrb T2,[T1],#1
 381 160a 22B1     	    cbz T2,2f 
 382 160c 8242     	    cmp T2,T0
 383 160e 02D0     	    beq 2f 
 384 1610 01F10101 	    add T1,#1 
 385 1614 F7E7     	    b 1b 
 386 1616 0878     	2:  ldrb T0,[T1]
 387 1618 0000     	    movs T0,T0 // set/reset zero flag 
 388 161a 04BC     	9:  pop {T2}
 389 161c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
ARM GAS  forth.s 			page 64


 396 161e B0150000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 162c 47F8046D 	    _PUSH 
 398 1630 86EA0606 	    eor TOS,TOS 
 399 1634 BD49     	    ldr T1,=sc_ascii // translation table
 400 1636 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 163a 4FF04002 	    mov T2,#KBD_F_XT 
 402 163e 1042     	    tst T0,T2
 403 1640 00D0     	    beq 1f
 404 1642 BB49     	    ldr T1,=extended // extended code translation
 405 1644 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 164e 98B1     	    cbz T0,inkey_exit
 407 1650 E128     	    cmp T0,#XT2_KEY // pause 
 408 1652 13D0     	    beq pause_key
 409 1654 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 165e 0646     	    mov TOS,T0
 411 1660 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 166a 032E     	    cmp TOS,#VK_CTRL_C 
 413 166c 3EF444AE 	    beq user_reboot 
 414 1670 47F8046D 	    _PUSH 
 415 1674 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1678 01F04CB9 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 167c 4FF00701 	    mov T1,#7 
 420 1680 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 168a 0139     	    subs T1,#1
 422 168c F8D1     	    bne 1b 
 423 168e 01F041B9 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1692 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1696 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 169a 06D1     	    bne shift_down 
 431 169c 10F0200F 	    tst T0,#KBD_F_ALT  
 432 16a0 06D1     	    bne altchar_down 
 433 16a2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 16a6 06D1     	    bne ctrl_down 
 435 16a8 0DE0     	    b 9f 
 436              	shift_down:
 437 16aa 3046     	    mov T0,TOS 
 438 16ac A149     	    ldr T1,=shifted 
 439 16ae 04E0     	    b 8f 
 440              	altchar_down:
 441 16b0 3046     	    mov T0,TOS 
ARM GAS  forth.s 			page 65


 442 16b2 A149     	    ldr T1,=altchar
 443 16b4 01E0     	    b 8f
 444              	ctrl_down:
 445 16b6 3046     	    mov T0,TOS 
 446 16b8 A049     	    ldr T1,=controls 
 447 16ba 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 16c4 0646     	    mov TOS,T0
 449 16c6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 16d0 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 16d2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 16d6 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 16da 0BD0     	    beq 9f 
 456 16dc 412E     	    cmp TOS,#'A'
 457 16de 09D4     	    bmi 9f 
 458 16e0 5B2E     	    cmp TOS,#'Z'+1 
 459 16e2 03D4     	    bmi 3f 
 460 16e4 612E     	    cmp TOS,#'a'
 461 16e6 05D4     	    bmi 9f 
 462 16e8 7B2E     	    cmp TOS,#'z'+1
 463 16ea 03D5     	    bpl 9f 
 464 16ec 4FF02000 	3:  mov T0,#(1<<5)
 465 16f0 86EA0006 	    eor TOS,T0 
 466 16f4 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 16f6 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 16f8 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 16fa 0128     	    cmp r0,ST_PREVID 
 484 16fc FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 16fe 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1702 00B5FEF7 	    _CALL nvic_disable_irq
 487      18FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 170c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1714 1846     	    mov r0,r3 
 491 1716 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
ARM GAS  forth.s 			page 66


 492 171a 4FF01102 	    mov r2,#OUTPUT_OD
 493 171e 00B5FEF7 	    _CALL gpio_config 
 493      21FF5DF8 
 493      04EB
 494 1728 1846     	    mov r0,r3 
 495 172a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 172e 82EA0202 	    eor r2,r2 
 497 1732 00B5FEF7 	    _CALL gpio_out 
 497      6DFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 173c 4FF4E150 	    mov r0,#150*48
 500 1740 0138     	1:  subs r0,#1 
 501 1742 FDD1     	    bne 1b
 502 1744 01BC     	    pop {r0}
 503 1746 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 174a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 174e 40F00200 	    orr r0,#KBD_TX 
 506 1752 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 1756 80EA0000 	    eor r0,r0 
 508 175a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 175e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1762 1846     	    mov r0,r3 
 513 1764 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1768 4FF01102 	    mov r2,#OUTPUT_OD 
 515 176c 00B5FEF7 	    _CALL gpio_config 
 515      FAFE5DF8 
 515      04EB
 516 1776 1846     	    mov r0,r3 
 517 1778 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 177c 82EA0202 	    eor r2,r2 
 519 1780 00B5FEF7 	    _CALL gpio_out
 519      46FF5DF8 
 519      04EB
 520              	// release clock line 
 521 178a 1846     	    mov r0,r3 
 522 178c 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1790 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1794 00B5FEF7 	    _CALL gpio_config
 524      E6FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 179e 4FF00A00 	    mov r0,#10
 528 17a2 E060     	    str r0,[UP,#CD_TIMER]
 529 17a4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 17a6 20B1     	    cbz r0, 4f 
 531 17a8 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 17ac 10F0020F 	    tst r0,#KBD_TX
 533 17b0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 17b2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 17b6 00B5FEF7 	    _CALL nvic_enable_irq
 536      A9FE5DF8 
 536      04EB
ARM GAS  forth.s 			page 67


 537 17c0 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 17c4 20F00201 	    bic r1,r0,#KBD_TX
 539 17c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 17cc 00F00200 	    and r0,#KBD_TX
 541 17d0 48B1     	    cbz r0, 5f
 542 17d2 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 17d4 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 17d8 1960     	    str r1,[r3,#GPIO_MODER]
 545 17da 80EA0000 	    eor r0,r0 
 546 17de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 17e2 6FEA0000 	    mvn r0,r0   
 548 17e6 0EBC     	5:  pop {r1,r2,r3}
 549 17e8 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 17ea 80EA0000 	    eor T0,T0 
 555 17ee C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 17f2 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 17f6 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 17fa 6FF00301 	    mvn T1,#3
 559 17fe 00EA0100 	    and T0,T1 
 560 1802 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1806 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1808 22160000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1814 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1818 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1822 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1824 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 182e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1838 FE28     	    cmp r0,KBD_CMD_RESEND
 574 183a EBD0     	    beq 1b 
 575 183c 4FF4FA70 	    mov T0,#500 
 576 1840 E060     	    str T0,[UP,#CD_TIMER]
 577 1842 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 184c 10B9     	    cbnz T0,3f
 579 184e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1850 0028     	    cmp T0,#0 
 581 1852 F6D1     	    bne 2b 
 582 1854 47F8046D 	3:  _PUSH 
 583 1858 0646     	    mov TOS,T0  
ARM GAS  forth.s 			page 68


 584 185a 01F05BB8 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 185e 0C180000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 186c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1876 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 187a 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1884 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 188e FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1890 ECD0     	    beq 1b
 598 1892 FA28     	    cmp T0,#KBD_ACK  
 599 1894 F6D1     	    bne 2b 
 600 1896 3046     	2:  mov T0,TOS 
 601 1898 00F00700 	    and T0,#7 
 602 189c 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 18a6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 18b0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 18b2 F0D0     	    beq 2b
 606 18b4 FA28     	    cmp T0,#KBD_ACK 
 607 18b6 F6D1     	    bne 3b  
 608 18b8 57F8046B 	    _POP 
 609 18bc 01F02AB8 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 18c0 62180000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 18d0 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 18d4 10F0010F 	    tst T0,#1
 619 18d8 01D1     	    bne 1f 
 620 18da 01F01BB8 	    _NEXT 
 621 18de 47F8046D 	1: _PUSH 
 622 18e2 6FF00101 	    mvn T1,#1 
 623 18e6 00EA0100 	    and T0,T1 
 624 18ea 84F87600 	    strb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 69


 625 18ee 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 18f2 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 18fa C4180000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1908 504700BF 	    _NEST
 635 190c D1180000 	1:  _ADR CAPS_LED  
 636 1910 2D160000 	    _ADR PS2_QKEY 
 637 1914 292E0000 	    _ADR QDUP 
 638 1918 1B2B0000 	    _QBRAN 1b  
 638      0C190000 
 639 1920 1B290000 	    _UNNEST 
 640 1924 1E150000 	
 640      2C150000 
 640      8C110000 
 640      B0120000 
 640      40120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
ARM GAS  forth.s 			page 70


  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1944 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 194c 0346     	    mov r3,r0 
  44 194e 4FF00401 	    mov r1,#PIN_F_SC 
  45 1952 4FF00102 	    mov r2,#OUTPUT_PP
  46 1956 00B5FEF7 	    _CALL gpio_config 
  46      05FE5DF8 
  46      04EB
  47 1960 1846     	    mov r0,r3 
  48 1962 4FF00401 	    mov r1,#PIN_F_SC  
  49 1966 4FF00102 	    MOV r2,#1
  50 196a 00B5FEF7 	    _CALL gpio_out 
  50      51FE5DF8 
  50      04EB
  51 1974 1846     	    mov r0,r3 
  52 1976 4FF00501 	    mov r1,#PIN_SCK  
  53 197a 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 197e 00B5FEF7 	    _CALL gpio_config 
  54      F1FD5DF8 
  54      04EB
  55 1988 1846     	    mov r0,r3 
  56 198a 4FF00701 	    mov r1,#PIN_MOSI 
  57 198e 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1992 00B5FEF7 	    _CALL gpio_config 
  58      E7FD5DF8 
  58      04EB
  59 199c 1846     	    mov r0,r3
  60 199e 4FF00601 	    mov r1,#PIN_MISO
  61 19a2 4FF00202 	    mov r2,#INPUT_AFO  
  62 19a6 00B5FEF7 	    _CALL gpio_config
  62      DDFD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 19b0 4CF6AA40 	    mov r0,#0xCCAA
  65 19b4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 19b6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 19be 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 19c0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 19c4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 19c6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 19ce 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 19d2 0180     	    strh r1,[r0,#SPI_CR1]
  73 19d4 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 19d6 80EA0000 	    eor r0,r0 
  75 19da C5F25050 	    movt r0,#0x5550 
  76 19de 40EA0100 	    orr r0,r1 
ARM GAS  forth.s 			page 71


  77 19e2 1862     	    str r0,[r3,#GPIO_AFRL]
  78 19e4 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 19e6 FE180000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 19f4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 19fc 4FF00401 	    mov r1,#PIN_F_SC 
  88 1a00 4FF00002 	    mov r2,#0 
  89 1a04 00B5FEF7 	    _CALL gpio_out 
  89      04FE5DF8 
  89      04EB
  90 1a0e 00F081BF 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1a12 EA190000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1a20 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1a28 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1a2a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1a2e FBD1     	    bne 1b 
 102 1a30 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1a38 4FF00401 	    mov r1,#PIN_F_SC 
 104 1a3c 4FF00102 	    mov r2,#1 
 105 1a40 00B5FEF7 	    _CALL gpio_out 
 105      E6FD5DF8 
 105      04EB
 106 1a4a 00F063BF 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1a4e 161A0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1a5c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1a64 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1a66 11F0020F 	    tst T1,#(1<<1) //TXE
ARM GAS  forth.s 			page 72


 117 1a6a FBD0     	    beq 0b 
 118 1a6c 6FF00001 	    mvn T1,#0 
 119 1a70 0173     	    strb T1,[T0,#SPI_DR]
 120 1a72 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1a74 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1a78 FBD0     	    beq 1b     
 123              	2:  
 124 1a7a 47F8046D 	    _PUSH 
 125 1a7e 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1a80 00F048BF 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1a84 521A0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1a90 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1a98 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1a9a 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1a9e FBD0     	    beq 0b 
 138 1aa0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1aa2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1aa4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1aa8 FBD0     	    beq 1b 
 142 1aaa 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1aac 57F8046B 	    _POP 
 144 1ab0 00F030BF 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ab4 881A0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1ac0 504700BF 	    _NEST 
 153 1ac4 F5190000 	    _ADR CHIP_SEL 
 154 1ac8 DB2A0000 	    _DOLIT 4
 154      04000000 
 155 1ad0 911A0000 	    _ADR WR_BYTE
 156 1ad4 211A0000 	    _ADR CHIP_DSEL
 157 1ad8 1B290000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1adc B81A0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1ae8 504700BF 	    _NEST 
 165 1aec F5190000 	    _ADR CHIP_SEL 
ARM GAS  forth.s 			page 73


 166 1af0 DB2A0000 	    _DOLIT 6 
 166      06000000 
 167 1af8 911A0000 	    _ADR WR_BYTE 
 168 1afc 211A0000 	    _ADR CHIP_DSEL 
 169 1b00 1B290000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1b04 E01A0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1b10 504700BF 	    _NEST
 177 1b14 F5190000 	    _ADR CHIP_SEL  
 178 1b18 DB2A0000 	    _DOLIT sr_cmd 
 178      381B0000 
 179 1b20 192D0000 	    _ADR PLUS 
 180 1b24 812B0000 	    _ADR CAT
 181 1b28 911A0000 	    _ADR WR_BYTE
 182 1b2c 5D1A0000 	    _ADR RD_BYTE
 183 1b30 211A0000 	    _ADR CHIP_DSEL  
 184 1b34 1B290000 	    _UNNEST 
 185 1b38 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1b3b 081B0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1b48 504700BF 	    _NEST 
 193 1b4c 552C0000 	    _ADR DUPP 
 194 1b50 DB2A0000 	    _DOLIT 16
 194      10000000 
 195 1b58 F12C0000 	    _ADR RSHIFT 
 196 1b5c 911A0000 	    _ADR WR_BYTE 
 197 1b60 552C0000 	    _ADR DUPP
 198 1b64 DB2A0000 	    _DOLIT 8 
 198      08000000 
 199 1b6c F12C0000 	    _ADR RSHIFT 
 200 1b70 911A0000 	    _ADR WR_BYTE 
 201 1b74 911A0000 	    _ADR WR_BYTE 
 202 1b78 1B290000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1b7c 3F1B0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1b8c 504700BF 	    _NEST 
 210 1b90 DB2A0000 	1:  _DOLIT 0 
ARM GAS  forth.s 			page 74


 210      00000000 
 211 1b98 111B0000 	    _ADR RD_SR 
 212 1b9c DB2A0000 	    _DOLIT 3 
 212      03000000 
 213 1ba4 992C0000 	    _ADR ANDD 
 214 1ba8 1B2B0000 	    _QBRAN 2f
 214      B81B0000 
 215 1bb0 2F2B0000 	    _BRAN 1b
 215      901B0000 
 216 1bb8 1B290000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1bbc 801B0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1bcc 504700BF 	    _NEST 
 225 1bd0 E91A0000 	    _ADR WR_ENBL
 226 1bd4 F5190000 	    _ADR CHIP_SEL 
 227 1bd8 DB2A0000 	    _DOLIT 0x20 
 227      20000000 
 228 1be0 911A0000 	    _ADR WR_BYTE 
 229 1be4 491B0000 	    _ADR SEND_ADR
 230 1be8 211A0000 	    _ADR CHIP_DSEL 
 231 1bec 8D1B0000 	    _ADR WAIT_DONE 
 232 1bf0 1B290000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1bf4 C01B0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1c04 504700BF 	    _NEST 
 240 1c08 E91A0000 	    _ADR WR_ENBL 
 241 1c0c F5190000 	    _ADR CHIP_SEL
 242 1c10 DB2A0000 	    _DOLIT 0x60
 242      60000000 
 243 1c18 DB2A0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1c20 911A0000 	    _ADR WR_BYTE 
 245 1c24 911A0000 	    _ADR WR_BYTE 
 246 1c28 211A0000 	    _ADR CHIP_DSEL 
 247 1c2c 8D1B0000 	    _ADR WAIT_DONE
 248 1c30 1B290000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
ARM GAS  forth.s 			page 75


 255              	******************************/
 256 1c34 F81B0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1c40 504700BF 	    _NEST
 258 1c44 F5190000 	    _ADR CHIP_SEL 
 259 1c48 DB2A0000 	    _DOLIT 3 
 259      03000000 
 260 1c50 911A0000 	    _ADR WR_BYTE 
 261 1c54 491B0000 	    _ADR SEND_ADR
 262 1c58 D12B0000 	    _ADR TOR   
 263 1c5c 2F2B0000 	    _BRAN 2f
 263      741C0000 
 264 1c64 5D1A0000 	1:  _ADR RD_BYTE
 265 1c68 792C0000 	    _ADR OVER 
 266 1c6c 6D2B0000 	    _ADR CSTOR
 267 1c70 752D0000 	    _ADR ONEP 
 268 1c74 FD2A0000 	2:  _DONXT 1b
 268      641C0000 
 269 1c7c 452C0000 	    _ADR DROP 
 270 1c80 211A0000 	    _ADR CHIP_DSEL 
 271 1c84 1B290000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1c88 381C0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1c94 504700BF 	    _NEST 
 280 1c98 E91A0000 	    _ADR WR_ENBL
 281 1c9c F5190000 	    _ADR CHIP_SEL
 282 1ca0 DB2A0000 	    _DOLIT 2 
 282      02000000 
 283 1ca8 911A0000 	    _ADR WR_BYTE 
 284 1cac 491B0000 	    _ADR SEND_ADR
 285 1cb0 D12B0000 	    _ADR TOR
 286 1cb4 2F2B0000 	    _BRAN 2f 
 286      D41C0000 
 287 1cbc 552C0000 	1:  _ADR DUPP 
 288 1cc0 812B0000 	    _ADR CAT 
 289 1cc4 552C0000 	    _ADR DUPP 
 290 1cc8 7D3D0000 	    _ADR HDOT
 291 1ccc 911A0000 	    _ADR WR_BYTE 
 292 1cd0 752D0000 	    _ADR ONEP
 293 1cd4 FD2A0000 	2:  _DONXT 1b 
 293      BC1C0000 
 294 1cdc 452C0000 	    _ADR DROP
 295 1ce0 211A0000 	    _ADR CHIP_DSEL
 296 1ce4 8D1B0000 	    _ADR WAIT_DONE 
 297 1ce8 1B290000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
ARM GAS  forth.s 			page 76


 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1cec 8C1C0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1cfc 504700BF 	    _NEST 
 318              	    
 319 1d00 1B290000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1d04 F01C0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1d14 504700BF 	    _NEST 
 327              	
 328 1d18 1B290000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1d1c 081D0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1d24 504700BF 	    _NEST 
 336              	
 337 1d28 1B290000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1d2c 201D0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1d38 504700BF 	    _NEST 
 345              	
 346 1d3c 1B290000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
ARM GAS  forth.s 			page 77


 350              	    load program from flash 
 351              	******************************/
 352 1d40 301D0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1d4c 504700BF 	    _NEST 
 354              	
 355 1d50 1B290000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1d54 5F708930 	     .word  0x3089705F // 1e-9
  34 1d58 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1d5c 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1d60 BD378635 	     .word  0x358637BD // 1e-6 
  37 1d64 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1d68 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1d6c 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1d70 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1d74 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1d78 0000803F 	     .word  0x3F800000 // 1.0 
  44 1d7c 00002041 	     .word  0x41200000 // 1e1 
  45 1d80 0000C842 	     .word  0x42C80000 // 1e2 
  46 1d84 00007A44 	     .word  0x447A0000 // 1e3 
ARM GAS  forth.s 			page 78


  47 1d88 00401C46 	     .word  0x461C4000 // 1e4 
  48 1d8c 0050C347 	     .word  0x47C35000 // 1e5 
  49 1d90 00247449 	     .word  0x49742400 // 1e6 
  50 1d94 8096184B 	     .word  0x4B189680 // 1e7
  51 1d98 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1d9c 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10 
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1da0 441D0000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 1dac 4FEA8606 	    lsl TOS,#2  
  61 1db0 F248     	    ldr t0, =p10 
  62 1db2 0644     	    add TOS,TOS,T0
  63 1db4 3668     	    ldr TOS,[TOS]  
  64 1db6 00F0ADBD 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1dba DFF8C403 	   ldr.w r0,=CPACR 
  73 1dbe 0168     	   ldr R1,[R0]
  74 1dc0 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1dc4 0160     	   str r1,[r0]
  76 1dc6 BFF34F8F 	   dsb 
  77 1dca 4FF00000 	   ldr r0,=FPCCR
  78 1dce 81EA0101 	   eor r1,r1 
  79 1dd2 0160     	   str r1,[r0]
  80 1dd4 BFF34F8F 	   dsb 
  81 1dd8 4FF05100 	   mov r0,#FPU_IRQ 
  82 1ddc 00B5FEF7 	   _CALL nvic_enable_irq
  82      96FB5DF8 
  82      04EB
  83 1de6 7047     	   _RET
  84              	
  85              	/***************************
  86              	   FPSCR ( -- u )
  87              	   stack fpu SCR register 
  88              	***************************/
  89 1de8 A41D0000 	   _HEADER FPSCR,5,"FPSCR"
  89      05465053 
  89      435200BF 
  90 1df4 47F8046D 	   _PUSH 
  91 1df8 F1EE106A 	   vmrs TOS,FPSCR
  92 1dfc BFF34F8F 	   dsb  
  93 1e00 00F088BD 	   _NEXT 
  94              	
  95              	
  96              	/**************************
  97              	   CLR_FPSCR ( -- )
ARM GAS  forth.s 			page 79


  98              	************************/
  99 1e04 EC1D0000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
  99      09434C52 
  99      5F465053 
  99      435200BF 
 100 1e14 80EA0000 	   eor T0,T0 
 101 1e18 E1EE100A 	   vmsr FPSCR,T0
 102 1e1c BFF34F8F 	   dsb 
 103 1e20 00F078BD 	   _NEXT 
 104              	
 105              	
 106              	/*******************************
 107              	    >S0 variable ( f# --  )
 108              	    send float to fpu S0 
 109              	**********************************/
 110 1e24 081E0000 	    _HEADER TOS0,3,">S0"
 110      033E5330 
 111 1e2c 00EE106A 	    vmov.f32 S0,TOS 
 112 1e30 57F8046B 	    _POP 
 113 1e34 00F06EBD 	    _NEXT  
 114              	
 115              	/*******************************
 116              	    >S1 variable ( f# --  )
 117              	    send float to fpu S1 
 118              	**********************************/
 119 1e38 281E0000 	    _HEADER TOS1,3,">S1"
 119      033E5331 
 120 1e40 00EE906A 	    vmov.f32 S1,TOS 
 121 1e44 57F8046B 	    _POP 
 122 1e48 00F064BD 	    _NEXT  
 123              	
 124              	/*******************************
 125              	    >S2 variable ( f# --  )
 126              	    send float to fpu S2 
 127              	**********************************/
 128 1e4c 3C1E0000 	    _HEADER TOS2,3,">S2"
 128      033E5332 
 129 1e54 01EE106A 	    vmov.f32 S2,TOS 
 130 1e58 57F8046B 	    _POP 
 131 1e5c 00F05ABD 	    _NEXT  
 132              	
 133              	/*******************************
 134              	    S0>  ( -- f )
 135              	    push fpu S0 
 136              	*******************************/
 137 1e60 501E0000 	    _HEADER S0FROM,3,"S0>"
 137      0353303E 
 138 1e68 47F8046D 	    _PUSH 
 139 1e6c 10EE106A 	    vmov.f32 TOS,S0 
 140 1e70 00F050BD 	    _NEXT 
 141              	
 142              	/*******************************
 143              	    S1>  ( -- f )
 144              	    push fpu S1 
 145              	*******************************/
 146 1e74 641E0000 	    _HEADER S1FROM,3,"S1>"
 146      0353313E 
ARM GAS  forth.s 			page 80


 147 1e7c 47F8046D 	    _PUSH 
 148 1e80 10EE906A 	    vmov.f32 TOS,S1 
 149 1e84 00F046BD 	    _NEXT 
 150              	
 151              	/*******************************
 152              	    S2>  ( -- f )
 153              	    push fpu S2 
 154              	*******************************/
 155 1e88 781E0000 	    _HEADER S2FROM,3,"S2>"
 155      0353323E 
 156 1e90 47F8046D 	    _PUSH 
 157 1e94 11EE106A 	    vmov.f32 TOS,S2 
 158 1e98 00F03CBD 	    _NEXT 
 159              	
 160              	
 161              	/*******************************
 162              	    F>S ( f -- n )
 163              	    convert float to integer 
 164              	    round to nearest integer 
 165              	*******************************/
 166 1e9c 8C1E0000 	    _HEADER FTOS,3,"F>S"
 166      03463E53 
 167 1ea4 00EE106A 	    vmov.f32 S0,TOS
 168 1ea8 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 169 1eac 10EE106A 	    vmov.f32 TOS,s0 
 170 1eb0 00F030BD 	    _NEXT 
 171              	    
 172              	/*******************************
 173              	    TRUNC (f - n )
 174              	    truncate float to integer 
 175              	*******************************/
 176 1eb4 A01E0000 	    _HEADER TRUNC,5,"TRUNC"
 176      05545255 
 176      4E4300BF 
 177 1ec0 00EE106A 	    vmov.f32 S0,TOS 
 178 1ec4 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 179 1ec8 10EE106A 	    vmov.f32 TOS,S0 
 180 1ecc 00F022BD 	    _NEXT 
 181              	
 182              	/*******************************
 183              	    S>F ( s -- f )
 184              	    convert integer to float 
 185              	*******************************/
 186 1ed0 B81E0000 	    _HEADER STOF,3,"S>F" 
 186      03533E46 
 187 1ed8 00EE106A 	    vmov.f32 S0,TOS
 188 1edc B8EEC00A 	    vcvt.f32.s32 s0,s0 
 189 1ee0 10EE106A 	    vmov.f32 TOS,s0 
 190 1ee4 00F016BD 	   _NEXT 
 191              	
 192              	/*******************************
 193              	    F+ ( f1 f2 -- f1+f2 )
 194              	    add 2 floats 
 195              	*******************************/
 196 1ee8 D41E0000 	    _HEADER FPLUS,2,"F+"
 196      02462B00 
 197 1ef0 00EE106A 	   vmov.f32 s0,TOS 
ARM GAS  forth.s 			page 81


 198 1ef4 57F8046B 	   _POP 
 199 1ef8 00EE906A 	   vmov.f32 s1,TOS 
 200 1efc 30EE200A 	   vadd.f32 s0,s0,s1 
 201 1f00 10EE106A 	   vmov.f32 TOS,s0
 202 1f04 00F006BD 	   _NEXT 
 203              	
 204              	   
 205              	/*******************************
 206              	    F- ( f1 f2 -- f1-f2 )
 207              	    substract 2 float 
 208              	*******************************/
 209 1f08 EC1E0000 	    _HEADER FSUBB,2,"F-"
 209      02462D00 
 210 1f10 00EE106A 	   vmov.f32 s0,TOS 
 211 1f14 57F8046B 	   _POP 
 212 1f18 00EE906A 	   vmov.f32 s1,TOS 
 213 1f1c 30EEC00A 	   vsub.f32 s0,s1,s0 
 214 1f20 10EE106A 	   vmov.f32 TOS,s0
 215 1f24 00F0F6BC 	   _NEXT 
 216              	
 217              	
 218              	
 219              	/*******************************
 220              	    F* ( f1 f2 -- f1*f2 )
 221              	    multiply 2 float 
 222              	******************************/
 223 1f28 0C1F0000 	   _HEADER FSTAR,2,"F*"
 223      02462A00 
 224 1f30 00EE106A 	   vmov.f32 s0,TOS 
 225 1f34 57F8046B 	   _POP 
 226 1f38 00EE906A 	   vmov.f32 s1,TOS 
 227 1f3c 20EE800A 	   vmul.f32 s0,s1,s0 
 228 1f40 10EE106A 	   vmov.f32 TOS,s0
 229 1f44 00F0E6BC 	   _NEXT 
 230              	
 231              	
 232              	/*******************************
 233              	    F/ ( f1 f2 -- f1/f2 )
 234              	    divide f1 by f2 
 235              	*******************************/
 236 1f48 2C1F0000 	    _HEADER FSLH,2,"F/"
 236      02462F00 
 237 1f50 00EE106A 	   vmov.f32 s0,TOS 
 238 1f54 57F8046B 	   _POP 
 239 1f58 00EE906A 	   vmov.f32 s1,TOS 
 240 1f5c 80EE800A 	   vdiv.f32 s0,s1,s0 
 241 1f60 10EE106A 	   vmov.f32 TOS,s0
 242 1f64 00F0D6BC 	   _NEXT 
 243              	
 244              	
 245              	/********************************
 246              	    FNEGATE ( f -- -f )
 247              	    negate floating point 
 248              	********************************/
 249 1f68 4C1F0000 	    _HEADER FNEG,7,"FNEGATE"
 249      07464E45 
 249      47415445 
ARM GAS  forth.s 			page 82


 250 1f74 00EE106A 	    vmov.f32 s0,TOS 
 251 1f78 B1EE400A 	    vneg.f32 S0,S0 
 252 1f7c 10EE106A 	    vmov.f32 TOS,S0    
 253 1f80 00F0C8BC 	    _NEXT 
 254              	
 255              	/**********************************
 256              	    FABS ( f -- f )
 257              	    return absolute value 
 258              	******************************/
 259 1f84 6C1F0000 	    _HEADER FABS,4,"FABS"
 259      04464142 
 259      530000BF 
 260 1f90 80EA0000 	    eor T0,T0 
 261 1f94 6FEA0000 	    mvn T0,T0 
 262 1f98 4FEA5000 	    lsr T0,#1 
 263 1f9c 06EA0006 	    and TOS,T0 
 264 1fa0 00F0B8BC 	    _NEXT 
 265              	
 266              	
 267              	/*****************************
 268              	     SQRT  ( f -- f )
 269              	     compute square root 
 270              	*****************************/
 271 1fa4 881F0000 	     _HEADER SQRT,4,"SQRT"
 271      04535152 
 271      540000BF 
 272 1fb0 00EE106A 	     vmov.f32 s0,TOS 
 273 1fb4 B1EEC00A 	     vsqrt.f32 s0,s0 
 274 1fb8 10EE106A 	     vmov.f32 TOS,s0 
 275 1fbc 00F0AABC 	     _NEXT 
 276              	
 277              	
 278              	/*****************************
 279              	   F0<   ( f -- flag )
 280              	*****************************/
 281 1fc0 A81F0000 	    _HEADER FZLESS,3,"F0<"
 281      0346303C 
 282 1fc8 00EE106A 	    vmov.f32 s0,TOS 
 283 1fcc B5EE400A 	    vcmp.f32 s0, #0.0 
 284 1fd0 F1EE106A 	    vmrs TOS,FPSCR
 285 1fd4 BFF34F8F 	    dsb  
 286 1fd8 4FEAE676 	    asr TOS,#31   
 287 1fdc 00F09ABC 	    _NEXT 
 288              	
 289              	/*****************************
 290              	    F> ( f#1 f#2 -- flag )
 291              	    f#1>f#2 ? 
 292              	*****************************/
 293 1fe0 C41F0000 	    _HEADER FGREAT,2,"F>"
 293      02463E00 
 294 1fe8 504700BF 	    _NEST 
 295 1fec 111F0000 	    _ADR FSUBB
 296 1ff0 C91F0000 	    _ADR FZLESS
 297 1ff4 252F0000 	    _ADR INVER     
 298 1ff8 1B290000 	    _UNNEST 
 299              	
 300              	/*****************************
ARM GAS  forth.s 			page 83


 301              	    F< ( f#1 f#2 -- flag )
 302              	    f#1<f#2 ? 
 303              	*****************************/
 304 1ffc E41F0000 	    _HEADER FLESS,2,"F<"
 304      02463C00 
 305 2004 504700BF 	    _NEST 
 306 2008 111F0000 	    _ADR FSUBB 
 307 200c C91F0000 	    _ADR FZLESS
 308 2010 1B290000 	    _UNNEST 
 309              	
 310              	
 311              	/*******************************
 312              	    FMIN ( f#1 f#2 -- smallest )
 313              	********************************/
 314 2014 00200000 	    _HEADER FMIN,4,"FMIN"
 314      04464D49 
 314      4E0000BF 
 315 2020 504700BF 	    _NEST 
 316 2024 792C0000 	   _ADR OVER 
 317 2028 792C0000 	   _ADR OVER 
 318 202c E91F0000 	   _ADR FGREAT 
 319 2030 1B2B0000 	   _QBRAN 1f 
 319      3C200000 
 320 2038 652C0000 	   _ADR SWAP  
 321 203c 452C0000 	1: _ADR DROP 
 322 2040 1B290000 	    _UNNEST 
 323              	
 324              	/*******************************
 325              	    FMAX (f#1 f#2 -- largest )
 326              	*******************************/
 327 2044 18200000 	    _HEADER FMAX,4,"FMAX"
 327      04464D41 
 327      580000BF 
 328 2050 504700BF 	    _NEST 
 329 2054 792C0000 	    _ADR OVER 
 330 2058 792C0000 	    _ADR OVER 
 331 205c 05200000 	    _ADR FLESS 
 332 2060 1B2B0000 	    _QBRAN 1f
 332      6C200000 
 333 2068 652C0000 	    _ADR SWAP   
 334 206c 452C0000 	1:  _ADR DROP 
 335 2070 1B290000 	    _UNNEST 
 336              	
 337              	
 338              	/*******************************
 339              	    FSIGN ( f -- n )
 340              	    return float sign 
 341              	*******************************/
 342 2074 48200000 	    _HEADER FSIGN,5,"FSIGN"
 342      05465349 
 342      474E00BF 
 343 2080 80EA0000 	    eor T0,T0 
 344 2084 C8F20000 	    movt T0,#0X8000
 345 2088 06EA0006 	    and TOS,T0
 346 208c 4FEAE676 	    asr TOS,#31  
 347 2090 00F040BC 	    _NEXT 
 348              	
ARM GAS  forth.s 			page 84


 349              	/*******************************
 350              	    FEXP ( f --  n )
 351              	    return binary exponent of f 
 352              	*******************************/
 353 2094 78200000 	    _HEADER FEXP,4,"FEXP"
 353      04464558 
 353      500000BF 
 354 20a0 4FF00000 	    _MOV32 T0,0X7F800000
 354      C7F68070 
 355 20a8 06EA0006 	    and TOS,T0 
 356 20ac 4FEAD656 	    lsr TOS,#23
 357 20b0 A6F17F06 	    sub TOS,#127 
 358 20b4 00F02EBC 	    _NEXT  
 359              	
 360              	/*******************************
 361              	   FMANT ( f -- n )
 362              	   return float mantisssa 
 363              	********************************/
 364 20b8 98200000 	    _HEADER FMANT,5,"FMANT"
 364      05464D41 
 364      4E5400BF 
 365 20c4 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 365      C0F27F00 
 366 20cc 06EA0006 	    AND TOS,T0 
 367 20d0 80EA0000 	    EOR T0,T0 
 368 20d4 C0F28000 	    MOVT T0,0x80
 369 20d8 46EA0006 	    ORR TOS,T0 
 370 20dc 00F01ABC 	    _NEXT 
 371              	
 372              	
 373              	/*******************************
 374              	    PI  ( -- f )
 375              	    return 3.14159265
 376              	*******************************/
 377 20e0 BC200000 	    _HEADER PI,2,"PI"
 377      02504900 
 378 20e8 47F8046D 	    _PUSH 
 379 20ec 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 379      C4F24906 
 380 20f4 00F00EBC 	    _NEXT
 381              	 
 382              	/********************************
 383              	    LOG2 ( -- f)
 384              	    return log10(2)
 385              	*******************************/
 386 20f8 E4200000 	    _HEADER LOG2,4,"LOG2"
 386      044C4F47 
 386      320000BF 
 387 2104 47F8046D 	    _PUSH 
 388 2108 42F29A06 	    _MOV32 TOS,0x3E9A209A
 388      C3F69A66 
 389 2110 00F000BC 	    _NEXT 
 390              	
 391              	/********************************
 392              	    LOG2>10 ( f -- exp )
 393              	    convert float base2 exponent 
 394              	    to base10
ARM GAS  forth.s 			page 85


 395              	********************************/
 396 2114 FC200000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 396      074C4F47 
 396      323E3130 
 397 2120 504700BF 	    _NEST
 398 2124 A1200000 	    _ADR FEXP 
 399 2128 D91E0000 	    _ADR STOF 
 400 212c 05210000 	    _ADR LOG2
 401 2130 311F0000 	    _ADR FSTAR 
 402 2134 C11E0000 	    _ADR TRUNC  
 403 2138 552C0000 	    _ADR DUPP 
 404 213c 892C0000 	    _ADR ZLESS 
 405 2140 1B2B0000 	    _QBRAN 1f 
 405      4C210000 
 406 2148 852D0000 	    _ADR ONEM
 407 214c 1B290000 	1:  _UNNEST 
 408              	
 409              	/********************************
 410              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 411              	    parse number, integer or float 
 412              	    if not a number return ( a 0 ) 
 413              	    if integer return ( int -1 ) 
 414              	    if float return ( float -2 )
 415              	**********************************/
 416 2150 18210000 	    _HEADER NUMBER,6,"NUMBER"
 416      064E554D 
 416      42455200 
 417 215c 504700BF 	    _NEST 
 418 2160 553A0000 	    _ADR INTQ
 419 2164 292E0000 	    _ADR QDUP 
 420 2168 1B2B0000 	    _QBRAN 2f 
 420      74210000 
 421 2170 1B290000 	    _UNNEST 
 422 2174 69230000 	2:  _ADR FLOATQ
 423 2178 1B290000 	    _UNNEST 
 423      781D0000 
 423      88ED00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
ARM GAS  forth.s 			page 86


  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 2184 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 2188 0000C842 	            .word  0x42C80000  // 100.0
  31 218c 00401C46 	            .word  0x461C4000  // 10000.0 
  32 2190 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 2194 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 2198 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 219c 504700BF 	    _NEST 
  45 21a0 DB2A0000 	    _DOLIT 2 
  45      02000000 
  46 21a8 092D0000 	    _ADR LSHIFT 
  47 21ac DB2A0000 	    _DOLIT p10p2n 
  47      84210000 
  48 21b4 192D0000 	    _ADR PLUS 
  49 21b8 612B0000 	    _ADR AT 
  50 21bc 1B290000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 21c0 504700BF 	    _NEST 
  59 21c4 DB2A0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 21cc DB2A0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 21d4 9D350000 	    _ADR PICK  // idx f e 1 idx 
  62 21d8 092D0000 	    _ADR LSHIFT // idx f e bit_mask 
  63 21dc 992C0000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 21e0 1B290000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
ARM GAS  forth.s 			page 87


  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 21e4 504700BF 	    _NEST 
  78 21e8 D12B0000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 21ec BD2B0000 	    _ADR RAT   // idx f e R: e 
  81 21f0 C1210000 	    _ADR bit_state // idx f state 
  82 21f4 1B2B0000 	    _QBRAN 1f   // bit reset 
  82      08220000 
  83 21fc 792C0000 	    _ADR OVER 
  84 2200 9D210000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2204 511F0000 	    _ADR FSLH  // idx f R: e 
  86 2208 652C0000 	1:  _ADR SWAP  // f idx R: e 
  87 220c 752D0000 	    _ADR ONEP   // F idx++ R: e 
  88 2210 652C0000 	    _ADR SWAP   // idx f  
  89 2214 792C0000 	    _ADR OVER   // idx f idx 
  90 2218 DB2A0000 	    _DOLIT 5 
  90      05000000 
  91 2220 21300000 	    _ADR GREAT  // idx > 5
  92 2224 1B2B0000 	    _QBRAN div_loop 
  92      EC210000 
  93 222c 8D2B0000 	    _ADR RFROM 
  94 2230 452C0000 	    _ADR DROP 
  95 2234 1B290000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 2238 504700BF 	    _NEST 
 109 223c D12B0000 	    _ADR TOR 
 110              	mult_loop:
 111 2240 BD2B0000 	    _ADR RAT   // idx f e R: e 
 112 2244 C1210000 	    _ADR bit_state // idx f state 
 113 2248 1B2B0000 	    _QBRAN 1f   // bit reset 
 113      5C220000 
 114 2250 792C0000 	    _ADR OVER  
 115 2254 9D210000 	    _ADR p10p2at // idx f pwr10 R: e
 116 2258 311F0000 	    _ADR FSTAR  // idx f R: e 
 117 225c 652C0000 	1:  _ADR SWAP  // f idx R: e 
 118 2260 752D0000 	    _ADR ONEP   // F idx++ R: e 
 119 2264 652C0000 	    _ADR SWAP   // idx f  
 120 2268 792C0000 	    _ADR OVER   // idx f idx 
 121 226c DB2A0000 	    _DOLIT 5 
 121      05000000 
 122 2274 21300000 	    _ADR GREAT  // idx > 5
 123 2278 1B2B0000 	    _QBRAN mult_loop 
 123      40220000 
 124 2280 8D2B0000 	    _ADR RFROM 
ARM GAS  forth.s 			page 88


 125 2284 452C0000 	    _ADR DROP 
 126 2288 1B290000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 228c 504700BF 	    _NEST 
 136 2290 792C0000 	    _ADR OVER  // e f e 
 137 2294 1B2B0000 	    _QBRAN 3f // exp==0,  done 
 137      D0220000 
 138 229c DB2A0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 22a4 512E0000 	    _ADR NROT // idx e f
 140 22a8 652C0000 	    _ADR SWAP // idx f e   
 141 22ac 552C0000 	    _ADR DUPP  // idx f e e 
 142 22b0 892C0000 	    _ADR ZLESS
 143 22b4 1B2B0000 	    _QBRAN pos_exp 
 143      CC220000 
 144              	// negative exponent 
 145 22bc 492F0000 	    _ADR ABSS 
 146 22c0 E5210000 	    _ADR mant_div 
 147 22c4 2F2B0000 	    _BRAN 3f 
 147      D0220000 
 148              	pos_exp: // positive exponent 
 149 22cc 39220000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 22d0 652C0000 	3:  _ADR SWAP 
 152 22d4 452C0000 	    _ADR DROP 
 153 22d8 1B290000 	    _UNNEST 
 154              	
 155              	
 156              	/*****************************
 157              	   decimals ( a -- a+ fdec | a 0.0 )
 158              	   parse digits after '.' 
 159              	   convert to float 
 160              	*****************************/
 161              	decimals:
 162 22dc 504700BF 	    _NEST 
 163 22e0 DB2A0000 	    _DOLIT 0
 163      00000000 
 164 22e8 552C0000 	    _ADR DUPP
 165 22ec 3D2E0000 	    _ADR ROT
 166 22f0 6D390000 	    _ADR PARSE_DIGITS // d n a+ 
 167 22f4 512E0000 	    _ADR NROT  // a d n 
 168 22f8 D91E0000 	    _ADR STOF  // convert integer n to float 
 169 22fc 652C0000 	    _ADR SWAP
 170 2300 DB2A0000 	    _DOLIT 9 
 170      09000000 
 171 2308 4D300000 	    _ADR MIN 
 172 230c AD1D0000 	    _ADR PWR10 
 173 2310 511F0000 	    _ADR FSLH 
 174 2314 1B290000 	    _UNNEST 
 175              	
ARM GAS  forth.s 			page 89


 176              	
 177              	/************************************
 178              	   exponent ( a -- exp a+ )
 179              	   parse float exponent 
 180              	************************************/
 181              	exponent: 
 182 2318 504700BF 	    _NEST 
 183 231c 0B3A0000 	    _ADR NEGQ 
 184 2320 D12B0000 	    _ADR TOR 
 185 2324 DB2A0000 	    _DOLIT 0 
 185      00000000 
 186 232c 552C0000 	    _ADR DUPP 
 187 2330 3D2E0000 	    _ADR ROT 
 188 2334 6D390000 	    _ADR PARSE_DIGITS // d n a  
 189 2338 512E0000 	    _ADR NROT 
 190 233c 652C0000 	    _ADR SWAP 
 191 2340 452C0000 	    _ADR DROP 
 192 2344 8D2B0000 	    _ADR RFROM 
 193 2348 1B2B0000 	    _QBRAN 1f 
 193      54230000 
 194 2350 392F0000 	    _ADR NEGAT 
 195 2354 652C0000 	1:  _ADR SWAP 
 196 2358 1B290000 	    _UNNEST  // -- exp a+  
 197              	
 198              	
 199              	/**********************************
 200              	    FLOAT? ( a -- f# -2 | a 0 )
 201              	    parse float number 
 202              	    return a 0 if not float 
 203              	**********************************/
 204 235c 54210000 	    _HEADER FLOATQ,6,"FLOAT?"
 204      06464C4F 
 204      41543F00 
 205 2368 504700BF 	    _NEST
 206              	    // always use base 10 
 207              	    // hexadecimal float not accepted 
 208 236c 49310000 	    _ADR BASE 
 209 2370 612B0000 	    _ADR AT 
 210 2374 D12B0000 	    _ADR TOR 
 211              	    // use decimal base  
 212 2378 ED380000 	    _ADR DECIM 
 213 237c DB2A0000 		_DOLIT	0      // failed flag   
 213      00000000 
 214 2384 792C0000 		_ADR	OVER   // a 0 a     R: base
 215 2388 A9300000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 216 238c 452C0000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 217              	// check for '-'|'+' save sign on R: 
 218 2390 0B3A0000 	    _ADR NEGQ 
 219 2394 D12B0000 	    _ADR   TOR // -- ... a  R: base sign 
 220              	// if next char is digit parse integer part 
 221 2398 552C0000 	    _ADR DUPP 
 222 239c 812B0000 	    _ADR CAT 
 223 23a0 DB2A0000 	    _DOLIT 10 
 223      0A000000 
 224 23a8 11390000 	    _ADR DIGTQ // u t|f 
 225 23ac 652C0000 	    _ADR SWAP 
 226 23b0 452C0000 	    _ADR DROP  // drop u 
ARM GAS  forth.s 			page 90


 227 23b4 1B2B0000 	    _QBRAN must_be_dot 
 227      08240000 
 228              	// get integer part     
 229 23bc DB2A0000 	    _DOLIT 0 
 229      00000000 
 230 23c4 552C0000 	    _ADR DUPP
 231 23c8 3D2E0000 	    _ADR ROT // a 0 0 0 a  
 232 23cc 6D390000 	    _ADR PARSE_DIGITS // a 0 d n a 
 233 23d0 512E0000 	    _ADR NROT // ... a d n 
 234 23d4 D91E0000 	    _ADR STOF  // convert n to float 
 235 23d8 D12B0000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 236 23dc 452C0000 	    _ADR DROP // d not needed
 237              	// if next char is 'E' get exponent 
 238 23e0 DB2A0000 	    _DOLIT 'E' 
 238      45000000 
 239 23e8 F1390000 	    _ADR CHARQ 
 240 23ec 1B2B0000 	    _QBRAN 1f // next is decimal fraction  
 240      14240000 
 241 23f4 DB2A0000 	    _DOLIT fzero // no fraction 
 241      00000000 
 242 23fc D12B0000 	    _ADR TOR  // R: base sign fint 0.0
 243 2400 2F2B0000 	    _BRAN 3f // get exponent   
 243      70240000 
 244              	// no integer part, next character must be '.' 
 245              	must_be_dot: 
 246 2408 DB2A0000 	    _DOLIT fzero // integer part 0.0 
 246      00000000 
 247 2410 D12B0000 	    _ADR TOR  // R: base sign fint 
 248 2414 DB2A0000 	1:  _DOLIT '.' 
 248      2E000000 
 249 241c F1390000 	    _ADR CHARQ 
 250 2420 1B2B0000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 250      E0240000 
 251 2428 DD220000 	    _ADR decimals // -- a 0 a fdec 
 252 242c D12B0000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 253              	// if next char == 'E' there is an exponent 
 254              	// else no exponent, float completed 
 255 2430 DB2A0000 	    _DOLIT 'E' 
 255      45000000 
 256 2438 F1390000 	    _ADR CHARQ 
 257 243c 1B2B0000 	    _QBRAN 1f
 257      4C240000 
 258 2444 2F2B0000 	    _BRAN 3f 
 258      70240000 
 259              	// no exponent, must be end of string 
 260 244c 812B0000 	1:   _ADR CAT 
 261 2450 1B2B0000 	    _QBRAN 1f 
 261      60240000 
 262 2458 2F2B0000 	    _BRAN error2 // error not end of string 
 262      F4240000 
 263 2460 D12B0000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 264 2464 452C0000 	    _ADR DROP 
 265 2468 2F2B0000 	    _BRAN build_float 
 265      A8240000 
 266              	3: // get exponent 
 267 2470 19230000 	    _ADR exponent // a 0 exp a+ 
 268              	// must be end of string 
ARM GAS  forth.s 			page 91


 269 2474 812B0000 	    _ADR CAT 
 270 2478 1B2B0000 	    _QBRAN 4f
 270      88240000 
 271 2480 2F2B0000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 271      F4240000 
 272 2488 D12B0000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 273 248c 652E0000 	    _ADR DDROP 
 274 2490 2F2B0000 	    _BRAN build_float     
 274      A8240000 
 275              	5: // no exponent 
 276 2498 DB2A0000 	    _DOLIT 0 
 276      00000000 
 277 24a0 D12B0000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 278 24a4 452C0000 	    _ADR DROP 
 279              	build_float: // a 0 R: base sign fint fdec exp 
 280 24a8 8D2B0000 	    _ADR RFROM 
 281 24ac A12B0000 	    _ADR DRFROM 
 282 24b0 F11E0000 	    _ADR FPLUS 
 283 24b4 8D220000 	    _ADR exp_adjust
 284 24b8 8D2B0000 	    _ADR RFROM 
 285 24bc 1B2B0000 	    _QBRAN 1f 
 285      D0240000 
 286 24c4 DB2A0000 	    _DOLIT fminus1
 286      000080BF 
 287 24cc 311F0000 	    _ADR FSTAR 
 288 24d0 DB2A0000 	1:  _DOLIT -2 
 288      FEFFFFFF 
 289 24d8 2F2B0000 	    _BRAN restore_base  
 289      04250000 
 290              	error1: // a 0 a R: base sign fint 
 291 24e0 A12B0000 	    _ADR DRFROM 
 292 24e4 652E0000 	    _ADR DDROP
 293 24e8 452C0000 	    _ADR DROP  
 294 24ec 2F2B0000 	    _BRAN restore_base  
 294      04250000 
 295              	error2: // a 0 a R: base sign fint fdec  
 296 24f4 A12B0000 	    _ADR DRFROM 
 297 24f8 652E0000 	    _ADR DDROP  // a 0 a R: base sign
 298 24fc 8D2B0000 	    _ADR RFROM  // a 0 a sign R: base  
 299 2500 652E0000 	    _ADR DDROP  
 300              	restore_base: 
 301 2504 8D2B0000 	    _ADR RFROM 
 302 2508 49310000 	    _ADR BASE 
 303 250c 4D2B0000 	    _ADR STORE 
 304 2510 1B290000 	    _UNNEST 
 305              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
ARM GAS  forth.s 			page 92


  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 2514 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2518 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 251c 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2520 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2524 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2528 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 252c BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2530 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2534 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2538 60230000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 2544 504700BF 	    _NEST
  50 2548 DB2A0000 	    _DOLIT 1  
  50      01000000 
  51 2550 39300000 	    _ADR MAX  
  52 2554 DB2A0000 	    _DOLIT 8
  52      08000000 
  53 255c 4D300000 	    _ADR MIN 
  54 2560 DB2A0000 	    _DOLIT 2 
  54      02000000 
  55 2568 092D0000 	    _ADR LSHIFT 
  56 256c DB2A0000 	    _DOLIT rounding 
  56      14250000 
  57 2574 192D0000 	    _ADR PLUS 
  58 2578 612B0000 	    _ADR AT   
  59 257c F11E0000 	    _ADR FPLUS 
  60 2580 1B290000 	    _UNNEST 
  61              	
  62              	/*****************************
ARM GAS  forth.s 			page 93


  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 2584 3C250000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 258c 57F8040B 	    ldr T0,[DSP],#4
  69 2590 3070     	    strb T0,[TOS]  
  70 2592 06F10106 	    add TOS,#1
  71 2596 BDE1     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78 2598 88250000 	    _HEADER ITOA,3,"I>A"
  78      03493E41 
  79              	itoa:
  80 25a0 504700BF 	    _NEST 
  81 25a4 D12B0000 	    _ADR TOR  // >R ( i r: b )
  82 25a8 51330000 	    _ADR STOD // ( dbl r: b )
  83 25ac 552C0000 	    _ADR DUPP // ( dbl i r: b )
  84 25b0 D12B0000 	    _ADR TOR  // ( dbl r: b sign )
  85 25b4 C12E0000 	    _ADR DABS 
  86 25b8 8D370000 	    _ADR BDIGS 
  87 25bc F9370000 	    _ADR DIGS 
  88 25c0 8D2B0000 	    _ADR RFROM 
  89 25c4 2D380000 	    _ADR SIGN 
  90 25c8 55380000 	    _ADR EDIGS // ( -- p u )
  91 25cc 552C0000 	    _ADR DUPP  
  92 25d0 512E0000 	    _ADR NROT // -rot ( -- u p u )
  93 25d4 BD2B0000 	    _ADR RAT  // r@ ( -- u p u b )
  94 25d8 652C0000 	    _ADR SWAP // ( -- u p b u )
  95 25dc 35360000 	    _ADR CMOVE // ( -- u ) 
  96 25e0 552C0000 	    _ADR DUPP  // ( -- u u )
  97 25e4 8D2B0000 	    _ADR RFROM // ( -- u u b )
  98 25e8 192D0000 	    _ADR PLUS  // ( -- u b+ )
  99 25ec 652C0000 	    _ADR SWAP  // ( -- b+ u )
 100 25f0 1B290000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	\ SCALEUP ( f1 -- m f2 ) 
 105              	\ multiply fraction until 
 106              	\ f1 >= 0.1
 107              	\ input: 
 108              	\   f1  float
 109              	\ output:
 110              	\   m  log10 exponent 
 111              	\   f2  >= 0.1 
 112              	*************************/
 113 25f4 9C250000 	    _HEADER SCALEUP,7,"SCALEUP" 
 113      07534341 
 113      4C455550 
 114              	scaleup:
 115 2600 504700BF 	    _NEST 
ARM GAS  forth.s 			page 94


 116 2604 DB2A0000 	    _DOLIT 0   // m 
 116      00000000 
 117 260c 652C0000 	    _ADR SWAP  // m f1 
 118 2610 552C0000 	1:  _ADR DUPP 
 119 2614 DB2A0000 	    _DOLIT onetenth 
 119      CDCCCC3D 
 120 261c 05200000 	    _ADR FLESS
 121 2620 1B2B0000 	    _QBRAN 2f
 121      48260000 
 122 2628 DB2A0000 	    _DOLIT ten 
 122      00002041 
 123 2630 311F0000 	    _ADR FSTAR
 124              	    // decrement m   
 125 2634 652C0000 	    _ADR SWAP
 126 2638 852D0000 	    _ADR ONEM 
 127 263c 652C0000 	    _ADR SWAP 
 128 2640 2F2B0000 	    _BRAN 1b
 128      10260000 
 129 2648 1B290000 	2:  _UNNEST 
 130              	
 131              	/******************************
 132              	\ SCALEDOWN ( d f1 -- m d f2 )
 133              	\ divide by 10.0 until 
 134              	\ f < 10^d 
 135              	******************************/
 136 264c F8250000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 136      09534341 
 136      4C45444F 
 136      574E00BF 
 137              	scaledown: // ( d f1 -- m d f2 )
 138 265c 504700BF 	    _NEST 
 139 2660 792C0000 	    _ADR OVER 
 140 2664 AD1D0000 	    _ADR PWR10
 141 2668 DB2A0000 	    _DOLIT 0x31ABCC77 // 0.5e-8
 141      77CCAB31 
 142 2670 111F0000 	    _ADR FSUBB 
 143 2674 D12B0000 	    _ADR TOR
 144 2678 DB2A0000 	    _DOLIT 0 
 144      00000000 
 145 2680 652C0000 	    _ADR SWAP // d 0 f1 r: pwr10  
 146 2684 552C0000 	1:  _ADR DUPP
 147 2688 BD2B0000 	    _ADR RAT 
 148 268c E91F0000 	    _ADR FGREAT 
 149 2690 1B2B0000 	    _QBRAN 2f
 149      B8260000 
 150 2698 DB2A0000 	    _DOLIT ten 
 150      00002041 
 151 26a0 511F0000 	    _ADR FSLH 
 152              	    // increment m 
 153 26a4 652C0000 	    _ADR SWAP 
 154 26a8 752D0000 	    _ADR ONEP 
 155 26ac 652C0000 	    _ADR SWAP 
 156 26b0 2F2B0000 	    _BRAN 1b   
 156      84260000 
 157 26b8 8D2B0000 	2:  _ADR RFROM 
 158 26bc 452C0000 	    _ADR DROP
 159 26c0 652C0000 	    _ADR SWAP // ( -- d f m ) 
ARM GAS  forth.s 			page 95


 160 26c4 512E0000 	    _ADR NROT // ( -- m d f )
 161 26c8 1B290000 	    _UNNEST 
 162              	
 163              	
 164              	/***************************
 165              	convert exponant of float 
 166              	    EPART ( m b -- b+ )
 167              	input: 
 168              	    m   decimal exponent 
 169              	    b   string buffer 
 170              	output:
 171              	    b+   adjusted pointer 
 172              	****************************/
 173 26cc 50260000 	    _HEADER EPART,5,"EPART"
 173      05455041 
 173      525400BF 
 174 26d8 504700BF 	    _NEST
 175 26dc 652C0000 	    _ADR SWAP
 176 26e0 292E0000 	    _ADR QDUP    
 177 26e4 1B2B0000 	    _QBRAN 2f 
 177      08270000 
 178 26ec 652C0000 	    _ADR SWAP 
 179 26f0 DB2A0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 179      45000000 
 180 26f8 652C0000 	    _ADR SWAP  
 181 26fc 8D250000 	    _ADR CSTOP // c!+ ( -- m b ) 
 182 2700 A1250000 	    _ADR ITOA // ( i b -- b u )
 183 2704 452C0000 	    _ADR DROP // ( -- b+ )     
 184 2708 1B290000 	2:  _UNNEST 
 185              	
 186              	
 187              	/***************************
 188              	conver fraction part of float 
 189              	    FPART ( d f b -- b+ )
 190              	input:
 191              	    d   digit left to display 
 192              	    f   float to convert
 193              	    b   string* buffer  
 194              	output:
 195              	    b+  updated string* 
 196              	****************************/
 197 270c D0260000 	    _HEADER FPART,5,"FPART"
 197      05465041 
 197      525400BF 
 198 2718 504700BF 	    _NEST
 199 271c DB2A0000 	    _DOLIT '.' 
 199      2E000000 
 200 2724 652C0000 	    _ADR SWAP 
 201 2728 8D250000 	    _ADR CSTOP 
 202 272c D12B0000 	    _ADR TOR // >r ( d f r: b ) 
 203              	    // round to next digit 
 204 2730 792C0000 	    _ADR OVER 
 205 2734 45250000 	    _ADR ROUND 
 206 2738 652C0000 	1:  _ADR SWAP  
 207 273c 292E0000 	    _ADR QDUP 
 208 2740 1B2B0000 	    _QBRAN 2f
 208      90270000 
ARM GAS  forth.s 			page 96


 209 2748 852D0000 	    _ADR ONEM // 1- ( -- f d- r: b )
 210 274c 652C0000 	    _ADR SWAP // swap ( -- d f r: b )
 211 2750 DB2A0000 	    _DOLIT ten // ( d f 10.0 ) 
 211      00002041 
 212 2758 311F0000 	    _ADR FSTAR // f*
 213 275c 552C0000 	    _ADR DUPP  
 214 2760 C11E0000 	    _ADR TRUNC // d f i
 215 2764 552C0000 	    _ADR DUPP  // d f i i  
 216 2768 DB2A0000 	    _DOLIT '0' 
 216      30000000 
 217 2770 192D0000 	    _ADR PLUS 
 218 2774 8D2B0000 	    _ADR RFROM // R> ( d f c b )
 219 2778 8D250000 	    _ADR CSTOP // ( d f i b+ )
 220 277c D12B0000 	    _ADR TOR  // >r ( -- d f i r: b )
 221 2780 D91E0000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 222 2784 111F0000 	    _ADR FSUBB 
 223 2788 2F2B0000 	    _BRAN 1b 
 223      38270000 
 224 2790 452C0000 	2:  _ADR DROP 
 225 2794 8D2B0000 	    _ADR RFROM 
 226 2798 1B290000 	    _UNNEST 
 227              	
 228              	/***************************
 229              	 convert integer part of float 
 230              	    IPART ( d f b -- m d f b )
 231              	input:
 232              	    d   digit# to display 
 233              	    f   float to convert 
 234              	    b   string* buffer 
 235              	output:
 236              	    m   decimal exponent 
 237              	    d   digit# to display left 
 238              	    f   float fraction 
 239              	    b   update str* 
 240              	****************************/
 241 279c 10270000 	    _HEADER IPART,5,"IPART"
 241      05495041 
 241      525400BF 
 242 27a8 504700BF 	    _NEST 
 243 27ac D12B0000 	    _ADR TOR // ( -- d f r: b )
 244 27b0 552C0000 	    _ADR DUPP 
 245 27b4 DB2A0000 	    _DOLIT fone 
 245      0000803F 
 246 27bc 05200000 	    _ADR FLESS 
 247 27c0 1B2B0000 	    _QBRAN 1f 
 247      FC270000 
 248 27c8 DB2A0000 	    _DOLIT '0' 
 248      30000000 
 249 27d0 8D2B0000 	    _ADR RFROM 
 250 27d4 8D250000 	    _ADR CSTOP 
 251 27d8 D12B0000 	    _ADR TOR 
 252 27dc 01260000 	    _ADR scaleup
 253 27e0 652C0000 	    _ADR SWAP 
 254 27e4 512E0000 	    _ADR NROT 
 255              	    // decrement d 
 256 27e8 652C0000 	    _ADR SWAP 
 257 27ec 852D0000 	    _ADR ONEM 
ARM GAS  forth.s 			page 97


 258 27f0 652C0000 	    _ADR SWAP 
 259 27f4 8D2B0000 	    _ADR RFROM // r> ( -- m d f b )  
 260 27f8 1B290000 	    _UNNEST 
 261 27fc 5D260000 	1:  _ADR scaledown // ( -- m d f r: b)
 262 2800 552C0000 	    _ADR DUPP  // ( -- m d f f r: b )
 263 2804 C11E0000 	    _ADR TRUNC // ( -- m d f i r: b )
 264 2808 552C0000 	    _ADR DUPP  // ( -- m d f i i r: b )
 265 280c D12B0000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 266 2810 D91E0000 	    _ADR STOF  // ( -- m d f f )
 267 2814 111F0000 	    _ADR FSUBB // ( -- m d f r: b i )
 268 2818 8D2B0000 	    _ADR RFROM // ( -- m d f i r: b )
 269 281c 8D2B0000 	    _ADR RFROM  // ( -- m d f i b )  
 270 2820 A1250000 	    _ADR ITOA // -- m d f b u )
 271 2824 D12B0000 	    _ADR TOR  // >r ( -- m d f b r: u )
 272 2828 3D2E0000 	    _ADR ROT
 273 282c 8D2B0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 274 2830 292D0000 	    _ADR SUBB // ( -- m f b d- )
 275 2834 512E0000 	    _ADR NROT // ( -- m d f b )
 276 2838 1B290000 	    _UNNEST
 277              	
 278              	
 279              	/***************************************
 280              	\  f>a ( d f b -- b u )
 281              	\ convert float to string
 282              	\ input: 
 283              	\   b  output buffer  
 284              	\   d n# of digits [1..7] to convert 
 285              	\   f float to convert 
 286              	\  output: 
 287              	\   b output buffer 
 288              	\    u length of string 
 289              	****************************************/
 290 283c A0270000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 290      03463E41 
 291 2844 504700BF 	    _NEST 
 292 2848 552C0000 	    _ADR DUPP // dup ( -- d f b b )
 293 284c D12B0000 	    _ADR TOR // >r   ( d f b r: b )  
 294              	    // store space first buffer char. 
 295 2850 D52D0000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 296 2854 652C0000 	    _ADR SWAP 
 297 2858 8D250000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 298              	    // check float sign 
 299 285c 792C0000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 300 2860 81200000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 301 2864 1B2B0000 	    _QBRAN 1f  // 0branch 1f 
 301      7C280000 
 302              	    // negative number add '-' to buffer 
 303 286c DB2A0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 303      2D000000 
 304 2874 652C0000 	    _ADR SWAP 
 305 2878 8D250000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 306 287c A9270000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 307 2880 19270000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 308 2884 D9260000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 309 2888 BD2B0000 	    _ADR RAT 
 310 288c 292D0000 	    _ADR SUBB 
 311 2890 8D2B0000 	    _ADR RFROM 
ARM GAS  forth.s 			page 98


 312 2894 652C0000 	    _ADR SWAP 
 313 2898 1B290000 	    _UNNEST 
 314              	
 315              	
 316              	/***********************************
 317              	    F. (  f d -- )
 318              	    print float32 number  
 319              	    f -> float to print 
 320              	    d -> string digits# 
 321              	***********************************/
 322 289c 40280000 	    _HEADER FDOT,2,"F."
 322      02462E00 
 323 28a4 504700BF 	    _NEST 
 324              	    // limit digits range [1..7]
 325 28a8 DB2A0000 	    _DOLIT 1 
 325      01000000 
 326 28b0 39300000 	    _ADR MAX 
 327 28b4 DB2A0000 	    _DOLIT 7 
 327      07000000 
 328 28bc 4D300000 	    _ADR MIN
 329 28c0 652C0000 	    _ADR SWAP // ( -- d f )
 330              	    // allocate convertion buffer 
 331 28c4 C5350000 	    _ADR HERE
 332 28c8 D12B0000 	    _ADR TOR  
 333 28cc DB2A0000 	    _DOLIT 16 
 333      10000000 
 334 28d4 69460000 	    _ADR ALLOT 
 335              	    // fill it with zero's 
 336 28d8 BD2B0000 	    _ADR RAT 
 337 28dc DB2A0000 	    _DOLIT 16 
 337      10000000 
 338 28e4 DB2A0000 	    _DOLIT 0 
 338      00000000 
 339 28ec AD360000 	    _ADR FILL 
 340 28f0 8D2B0000 	    _ADR RFROM // ( d f b )
 341 28f4 45280000 	    _ADR FTOA 
 342 28f8 BD3B0000 	    _ADR TYPEE 
 343              	    // free buffer 
 344 28fc DB2A0000 	    _DOLIT -16 
 344      F0FFFFFF 
 345 2904 69460000 	    _ADR ALLOT
 346 2908 1B290000 	    _UNNEST 
 347              	
 348              	
 349              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  forth.s 			page 99


  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
ARM GAS  forth.s 			page 100


  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 290c 48F804CD 		STMFD	RSP!,{IP}
  85 2910 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2914 5CF8045B 		LDR WP,[IP],#4 
  89 2918 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 291a 58F804CB 		LDMFD RSP!,{IP}
  92 291e 5CF8045B 		LDR WP,[IP],#4 
  93 2922 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2924 04F14401 		add T1,UP,#USER_CTOP 
 105 2928 0968     		ldr T1,[T1]
 106 292a 44F25072 		mov T2,#0x4700+(10<<3)
 107 292e 21F8022B 		strh T2,[T1],#2
 108 2932 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 2936 21F8022B 		strh T2,[T1],#2 
 110 293a 04F14402 		add T2,UP,#USER_CTOP 
 111 293e 1160     		str T1,[T2]
 112 2940 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 2942 47F8046D 		_PUSH 
 118 2946 04F11406 		ADD TOS,UP,#STDIN 
 119 294a E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 294c 47F8046D 		_PUSH 
 125 2950 04F11806 		ADD TOS,UP,#STDOUT
 126 2954 DEE7     		_NEXT 
ARM GAS  forth.s 			page 101


 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 2956 A0280000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 2964 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 296c 47F8046D 	    _PUSH 
 135 2970 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 2972 81EA0101 	    eor T1,T1 
 137 2976 8162     	    str T1,[T0,#SCB_CFSR]
 138 2978 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 297a 5A290000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 2988 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 2990 47F8046D 		_PUSH 
 147 2994 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 2996 81EA0101 	    eor T1,T1 
 149 299a 8163     	    str T1,[T0,#SCB_BFAR]
 150 299c BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 299e 7E290000 		_HEADER QKEY,4,"KEY?" 
 156      044B4559 
 156      3F00
 157 29a8 504700BF 		_NEST 
 158 29ac 43290000 		_ADR TSTDIN // ' STDIN 
 159 29b0 15360000 		_ADR ATEXE
 160 29b4 1B290000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 29b8 A2290000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 29c0 504700BF 		_NEST
 168              	KEY1:
 169 29c4 D1180000 		_ADR CAPS_LED 
 170 29c8 A9290000 		_ADR	QKEY 
 171 29cc 1B2B0000 		_QBRAN	KEY1
 171      C4290000 
ARM GAS  forth.s 			page 102


 172 29d4 1B290000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 29d8 BC290000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 29e4 504700BF 		_NEST 
 180 29e8 4D290000 		_ADR TSTDOUT 
 181 29ec 15360000 		_ADR ATEXE 
 182 29f0 1B290000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 29f4 DC290000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 2a00 504700BF 		_NEST
 216 2a04 492F0000 		_ADR ABSS   
 217 2a08 F1300000 		_ADR SEED 
 218 2a0c 612B0000 		_ADR AT 
 219 2a10 552C0000 		_ADR DUPP 
 220 2a14 DB2A0000 		_DOLIT 13
 220      0D000000 
 221 2a1c 092D0000 		_ADR LSHIFT 
 222 2a20 C12C0000 		_ADR XORR  
 223 2a24 552C0000 		_ADR DUPP 
ARM GAS  forth.s 			page 103


 224 2a28 DB2A0000 		_DOLIT 17 
 224      11000000 
 225 2a30 F12C0000 		_ADR RSHIFT 
 226 2a34 C12C0000 		_ADR XORR 
 227 2a38 552C0000 		_ADR DUPP
 228 2a3c DB2A0000 		_DOLIT 5 
 228      05000000 
 229 2a44 092D0000 		_ADR LSHIFT 
 230 2a48 C12C0000 		_ADR XORR  
 231 2a4c 552C0000 		_ADR DUPP 
 232 2a50 F1300000 		_ADR SEED 
 233 2a54 4D2B0000 		_ADR STORE 
 234 2a58 DB2A0000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 2a60 992C0000 		_ADR ANDD 
 236 2a64 652C0000 		_ADR SWAP 
 237 2a68 99340000 		_ADR MODD 
 238 2a6c 1B290000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 2a70 F8290000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 2a7c 504700BF 		_NEST 
 247 2a80 19310000 		_ADR TIMER 
 248 2a84 4D2B0000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2a88 19310000 		_ADR TIMER 
 251 2a8c 612B0000 		_ADR AT 
 252 2a90 1B2B0000 		_QBRAN PAUSE_EXIT 
 252      A02A0000 
 253 2a98 2F2B0000 		_BRAN PAUSE_LOOP 
 253      882A0000 
 254              	PAUSE_EXIT: 		
 255 2aa0 1B290000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2aa4 742A0000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 2ab0 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2ab4 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 2abc 3600     		movs TOS,TOS 
 265 2abe 57F8046B 		_POP
 266 2ac2 03D0     		beq ULED_OFF
 267 2ac4 4FEA0040 		lsl T0,#16 
 268 2ac8 8861     		str T0,[T1,#GPIO_BSRR]
 269 2aca 23E7     		_NEXT 
 270              	ULED_OFF:
ARM GAS  forth.s 			page 104


 271 2acc 8861     		str T0,[T1,#GPIO_BSRR]
 272 2ace 21E7     		_NEXT    
 273              	
 274              	
 275              		
 276              	/***************
 277              	//  The kernel
 278              	***************/
 279              	
 280              	/********************
 281              	    NOP	( -- )
 282              	 	do nothing.
 283              	*********************/
 284 2ad0 A82A0000 		_HEADER NOP,3,"NOP"
 284      034E4F50 
 285 2ad8 1CE7     		_NEXT 
 286              	 
 287              	/********************
 288              	    doLIT	( -- w )
 289              	 	Push an inline literal.
 290              	hidden word used by compiler 
 291              	*********************/
 292              	DOLIT:
 293 2ada 47F8046D 		_PUSH				//  store TOS on data stack
 294 2ade 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 295 2ae2 17E7     		_NEXT 
 296              	
 297              	/*******************************
 298              	    EXECUTE	( ca -- )
 299              	 	Execute the word at ca.
 300              	*******************************/
 301 2ae4 D42A0000 		_HEADER EXECU,7,"EXECUTE"
 301      07455845 
 301      43555445 
 302 2af0 46F00105 		ORR	WP,TOS,#1 
 303 2af4 57F8046B 		_POP
 304 2af8 2847     		BX WP 
 305 2afa 0BE7     		_NEXT 
 306              	
 307              	/**********************************************************
 308              	    donext	( -- ) counter on R:
 309              	 	Run time code for the single index loop.
 310              	 	: next ( -- ) \ hilevel model
 311              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 312              	hidden word used by compiler 	  
 313              	*********************************************************/
 314              	DONXT:
 315 2afc D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 316 2b00 22B9     		CBNZ T2,NEXT1 
 317              		/* loop done */
 318 2b02 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 319 2b06 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 320 2b0a 03E7     		_NEXT
 321              	NEXT1:
 322              		/* decrement loop counter */
 323 2b0c A2F10102 		SUB	T2,T2,#1
 324 2b10 C8F80020 		STR	T2,[RSP]
ARM GAS  forth.s 			page 105


 325 2b14 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 326 2b18 FCE6     		_NEXT 
 327              	
 328              	/**************************************
 329              	    ?branch	( f -- )
 330              	 	Branch if flag is zero.
 331              	hiddend word used by compiler
 332              	**************************************/
 333              	QBRAN:
 334 2b1a 3600     		MOVS	TOS,TOS
 335 2b1c 57F8046B 		_POP
 336 2b20 02D1     		BNE	QBRAN1
 337 2b22 DCF800C0 		LDR	IP,[IP]
 338 2b26 F5E6     		_NEXT
 339              	QBRAN1:
 340 2b28 0CF1040C 	 	ADD	IP,IP,#4
 341 2b2c F2E6     		_NEXT
 342              	
 343              	/***********************************
 344              	    branch	( -- )
 345              	 	Branch to an inline address.
 346              	hidden word used by compiler 
 347              	***********************************/
 348              	BRAN:
 349 2b2e DCF800C0 		LDR	IP,[IP]
 350 2b32 EFE6     		_NEXT
 351              	
 352              	/******************************************
 353              	    EXIT	(  -- )
 354              	 	Exit the currently executing command.
 355              	******************************************/
 356 2b34 E82A0000 		_HEADER EXIT,4,"EXIT"
 356      04455849 
 356      540000BF 
 357 2b40 1B290000 		_UNNEST
 358              	
 359              	/***********************************
 360              	    !	   ( w a -- )
 361              	 	Pop the data stack to memory.
 362              	************************************/
 363 2b44 382B0000 		_HEADER STORE,1,"!"
 363      012100BF 
 364 2b4c 57F8045B 		LDR	WP,[DSP],#4
 365 2b50 3560     		STR	WP,[TOS]
 366 2b52 57F8046B 		_POP
 367 2b56 DDE6     		_NEXT 
 368              	
 369              	/********************************************
 370              	    @	   ( a -- w )
 371              	 	Push memory location to the data stack.
 372              	*********************************************/
 373 2b58 482B0000 		_HEADER AT,1,"@"
 373      014000BF 
 374 2b60 3668     		LDR	TOS,[TOS]
 375 2b62 D7E6     		_NEXT 
 376              	
 377              	/*******************************************
ARM GAS  forth.s 			page 106


 378              	    C!	  ( c b -- )
 379              	 	Pop the data stack to byte memory.
 380              	*******************************************/
 381 2b64 5C2B0000 		_HEADER CSTOR,2,"C!"
 381      02432100 
 382 2b6c 57F8045B 		LDR	WP,[DSP],#4
 383 2b70 3570     		STRB WP,[TOS]
 384 2b72 57F8046B 		_POP
 385 2b76 CDE6     		_NEXT
 386              	
 387              	/*********************************************
 388              	    C@	  ( b -- c )
 389              	 	Push byte memory location to the data stack.
 390              	**********************************************/
 391 2b78 682B0000 		_HEADER CAT,2,"C@"
 391      02434000 
 392 2b80 3678     		LDRB	TOS,[TOS]
 393 2b82 C7E6     		_NEXT 
 394              	
 395              	
 396              	/*********************************************
 397              	    R>	  ( -- w  R: w -- ) 
 398              	 	push from rstack.
 399              	**********************************************/
 400 2b84 7C2B0000 		_HEADER RFROM,2,"R>"
 400      02523E00 
 401 2b8c 47F8046D 		_PUSH
 402 2b90 58F8046B 		LDR	TOS,[RSP],#4
 403 2b94 BEE6     		_NEXT 
 404              	
 405              	/***********************************************
 406              		2R> (  -- D ) R: D --  
 407              	    push a double from rstack 
 408              	***********************************************/
 409 2b96 882B0000 		_HEADER DRFROM,3,"2R>"
 409      0332523E 
 409      00BF
 410 2ba0 47F8046D 		_PUSH 
 411 2ba4 58F8046B 		LDR TOS,[RSP],#4 
 412 2ba8 47F8046D 		_PUSH 
 413 2bac 58F8046B 		LDR TOS,[RSP],#4
 414 2bb0 B0E6     		_NEXT 
 415              	
 416              	/************************************************
 417              	    R@	  ( -- w )
 418              	 	Copy top of return stack to the data stack.
 419              	************************************************/
 420 2bb2 9A2B0000 		_HEADER RAT,2,"R@"
 420      02524000 
 420      00BF
 421 2bbc 47F8046D 		_PUSH
 422 2bc0 D8F80060 		LDR	TOS,[RSP]
 423 2bc4 A6E6     		_NEXT 
 424              	
 425              	/***********************************************
 426              	    >R	  ( w -- ) R: -- w 
 427              	 	pop to rstack.
ARM GAS  forth.s 			page 107


 428              	************************************************/
 429 2bc6 B62B0000 		_HEADER TOR,2,">R"
 429      023E5200 
 429      00BF
 430 2bd0 48F8046D 		STR	TOS,[RSP,#-4]!
 431 2bd4 57F8046B 		_POP
 432 2bd8 9CE6     		_NEXT
 433              	
 434              	/*********************************************
 435              		2>R ( d -- ) R: -- d 
 436              		pop a double to rstack 
 437              	*********************************************/
 438 2bda CA2B0000 		_HEADER DTOR,3,"2>R"
 438      03323E52 
 438      00BF
 439 2be4 48F8046D 		STR TOS,[RSP,#-4]!
 440 2be8 57F8046B 	    _POP 
 441 2bec 48F8046D 		STR TOS,[RSP,#-4]!
 442 2bf0 57F8046B 		_POP  
 443 2bf4 8EE6     		_NEXT 	
 444              	
 445              	
 446              	/*******************************
 447              	//	RP! ( u -- )
 448              	// initialize RPP with u 
 449              	*******************************/
 450 2bf6 DE2B0000 		_HEADER RPSTOR,3,"RP!"
 450      03525021 
 450      00BF
 451 2c00 B046     		MOV RSP,TOS 
 452 2c02 57F8046B 		_POP  
 453 2c06 85E6     		_NEXT 
 454              	
 455              	/********************************
 456              		SP! ( u -- )
 457              	 initialize SPP with u 
 458              	********************************/
 459 2c08 FA2B0000 		_HEADER SPSTOR,3,"SP!"
 459      03535021 
 460 2c10 3746     		MOV DSP,TOS 
 461 2c12 86EA0606 		EOR TOS,TOS,TOS 
 462 2c16 7DE6     		_NEXT 
 463              	
 464              	/**************************************
 465              	    SP@	 ( -- a )
 466              	 	Push the current data stack pointer.
 467              	***************************************/
 468 2c18 0C2C0000 		_HEADER SPAT,3,"SP@"
 468      03535040 
 469 2c20 47F8046D 		_PUSH
 470 2c24 3E46     		MOV	TOS,DSP
 471 2c26 75E6     		_NEXT
 472              	
 473              	/**************************************
 474              	   RP@ ( -- a )
 475              	   push current rstack pointer 
 476              	**************************************/
ARM GAS  forth.s 			page 108


 477 2c28 1C2C0000 		_HEADER RPAT,3,"RP@"
 477      03525040 
 478 2c30 47F8046D 		_PUSH 
 479 2c34 4646     		MOV TOS,RSP 
 480 2c36 6DE6     		_NEXT 
 481              	
 482              	/********************************
 483              	    DROP	( w -- )
 484              	 	Discard top stack item.
 485              	********************************/
 486 2c38 2C2C0000 		_HEADER DROP,4,"DROP"
 486      0444524F 
 486      500000BF 
 487 2c44 57F8046B 		_POP
 488 2c48 64E6     		_NEXT 
 489              	
 490              	/*********************************
 491              	    DUP	 ( w -- w w )
 492              	 	Duplicate the top stack item.
 493              	*********************************/
 494 2c4a 3C2C0000 		_HEADER DUPP,3,"DUP"
 494      03445550 
 494      00BF
 495 2c54 47F8046D 		_PUSH
 496 2c58 5CE6     		_NEXT 
 497              	
 498              	/**********************************
 499              	    SWAP	( w1 w2 -- w2 w1 )
 500              	 	Exchange top two stack items.
 501              	**********************************/
 502 2c5a 4E2C0000 		_HEADER SWAP,4,"SWAP"
 502      04535741 
 502      5000
 503 2c64 3D68     		LDR	WP,[DSP]
 504 2c66 3E60     		STR	TOS,[DSP]
 505 2c68 2E46     		MOV	TOS,WP
 506 2c6a 53E6     		_NEXT 
 507              	
 508              	/***********************************
 509              	    OVER	( w1 w2 -- w1 w2 w1 )
 510              	 	Copy second stack item to top.
 511              	***********************************/
 512 2c6c 5E2C0000 		_HEADER OVER,4,"OVER"
 512      044F5645 
 512      520000BF 
 513 2c78 47F8046D 		_PUSH
 514 2c7c 7E68     		LDR	TOS,[DSP,#4]
 515 2c7e 49E6     		_NEXT 
 516              	
 517              	/***********************************
 518              	    0<	  ( n -- t )
 519              	 	Return true if n is negative.
 520              	***********************************/
 521 2c80 702C0000 		_HEADER ZLESS,2,"0<"
 521      02303C00 
 522 2c88 4FEAE676 		ASR TOS,#31
 523 2c8c 42E6     		_NEXT 
ARM GAS  forth.s 			page 109


 524              	
 525              	/********************************
 526              	    AND	 ( w w -- w )
 527              	 	Bitwise AND.
 528              	********************************/
 529 2c8e 842C0000 		_HEADER ANDD,3,"AND"
 529      03414E44 
 529      00BF
 530 2c98 57F8045B 		LDR	WP,[DSP],#4
 531 2c9c 06EA0506 		AND	TOS,TOS,WP
 532 2ca0 38E6     		_NEXT 
 533              	
 534              	/******************************
 535              	    OR	  ( w w -- w )
 536              	 	Bitwise inclusive OR.
 537              	******************************/
 538 2ca2 922C0000 		_HEADER ORR,2,"OR"
 538      024F5200 
 538      00BF
 539 2cac 57F8045B 		LDR	WP,[DSP],#4
 540 2cb0 46EA0506 		ORR	TOS,TOS,WP
 541 2cb4 2EE6     		_NEXT 
 542              	
 543              	/*****************************
 544              	    XOR	 ( w w -- w )
 545              	 	Bitwise exclusive OR.
 546              	*****************************/
 547 2cb6 A62C0000 		_HEADER XORR,3,"XOR"
 547      03584F52 
 547      00BF
 548 2cc0 57F8045B 		LDR	WP,[DSP],#4
 549 2cc4 86EA0506 		EOR	TOS,TOS,WP
 550 2cc8 24E6     		_NEXT 
 551              	
 552              	/**************************************************
 553              	    UM+	 ( w w -- w cy )
 554              	 	Add two numbers, return the sum and carry flag.
 555              	***************************************************/
 556 2cca BA2C0000 		_HEADER UPLUS,3,"UM+"
 556      03554D2B 
 556      00BF
 557 2cd4 3D68     		LDR	WP,[DSP]
 558 2cd6 AD19     		ADDS	WP,WP,TOS
 559 2cd8 4FF00006 		MOV	TOS,#0
 560 2cdc 46F10006 		ADC	TOS,TOS,#0
 561 2ce0 3D60     		STR	WP,[DSP]
 562 2ce2 17E6     		_NEXT 
 563              	
 564              	/*********************************
 565              	    RSHIFT	 ( w # -- w )
 566              	 	arithmetic Right shift # bits.
 567              	**********************************/
 568 2ce4 CE2C0000 		_HEADER RSHIFT,6,"RSHIFT"
 568      06525348 
 568      49465400 
 569 2cf0 57F8045B 		LDR	WP,[DSP],#4
 570 2cf4 45FA06F6 		MOV	TOS,WP,ASR TOS
ARM GAS  forth.s 			page 110


 571 2cf8 0CE6     		_NEXT 
 572              	
 573              	/****************************
 574              	    LSHIFT	 ( w # -- w )
 575              	 	Right shift # bits.
 576              	****************************/
 577 2cfa E82C0000 		_HEADER LSHIFT,6,"LSHIFT"
 577      064C5348 
 577      49465400 
 577      00BF
 578 2d08 57F8045B 		LDR	WP,[DSP],#4
 579 2d0c 05FA06F6 		MOV	TOS,WP,LSL TOS
 580 2d10 00E6     		_NEXT
 581              	
 582              	/*************************
 583              	    +	 ( w w -- w )
 584              	 	Add.
 585              	*************************/
 586 2d12 FE2C0000 		_HEADER PLUS,1,"+"
 586      012B
 587 2d18 57F8045B 		LDR	WP,[DSP],#4
 588 2d1c 2E44     		ADD	TOS,TOS,WP
 589 2d1e F9E5     		_NEXT 
 590              	
 591              	/************************
 592              	    -	 ( w w -- w )
 593              	 	Subtract.
 594              	************************/
 595 2d20 162D0000 		_HEADER SUBB,1,"-"
 595      012D00BF 
 596 2d28 57F8045B 		LDR	WP,[DSP],#4
 597 2d2c C6EB0506 		RSB	TOS,TOS,WP
 598 2d30 F0E5     		_NEXT 
 599              	
 600              	/************************
 601              	    *	 ( w w -- w )
 602              	 	Multiply.
 603              	***********************/
 604 2d32 242D0000 		_HEADER STAR,1,"*"
 604      012A
 605 2d38 57F8045B 		LDR	WP,[DSP],#4
 606 2d3c 05FB06F6 		MUL	TOS,WP,TOS
 607 2d40 E8E5     		_NEXT 
 608              	
 609              	/***************************
 610              	    UM*	 ( w w -- ud )
 611              	 	Unsigned multiply.
 612              	****************************/
 613 2d42 362D0000 		_HEADER UMSTA,3,"UM*"
 613      03554D2A 
 613      00BF
 614 2d4c 3D68     		LDR	WP,[DSP]
 615 2d4e A6FB0523 		UMULL	T2,T3,TOS,WP
 616 2d52 3A60     		STR	T2,[DSP]
 617 2d54 1E46     		MOV	TOS,T3
 618 2d56 DDE5     		_NEXT 
 619              	
ARM GAS  forth.s 			page 111


 620              	/***************************
 621              	    M*	 ( w w -- d )
 622              	 	signed multiply.
 623              		hold double result
 624              	***************************/
 625 2d58 462D0000 		_HEADER MSTAR,2,"M*"
 625      024D2A00 
 626 2d60 3D68     		LDR	WP,[DSP]
 627 2d62 86FB0523 		SMULL	T2,T3,TOS,WP
 628 2d66 3A60     		STR	T2,[DSP]
 629 2d68 1E46     		MOV	TOS,T3
 630 2d6a D3E5     		_NEXT 
 631              	
 632              	/***************************
 633              	    1+	 ( w -- w+1 )
 634              	 	Add 1.
 635              	***************************/
 636 2d6c 5C2D0000 		_HEADER ONEP,2,"1+"
 636      02312B00 
 637 2d74 06F10106 		ADD	TOS,TOS,#1
 638 2d78 CCE5     		_NEXT 
 639              	
 640              	/***************************
 641              	    1-	 ( w -- w-1 )
 642              	 	Subtract 1.
 643              	***************************/
 644 2d7a 702D0000 		_HEADER ONEM,2,"1-"
 644      02312D00 
 644      00BF
 645 2d84 A6F10106 		SUB	TOS,TOS,#1
 646 2d88 C4E5     		_NEXT 
 647              	
 648              	/***************************
 649              	    2+	 ( w -- w+2 )
 650              	 	Add 2.
 651              	**************************/
 652 2d8a 7E2D0000 		_HEADER TWOP,2,"2+"
 652      02322B00 
 652      00BF
 653 2d94 06F10206 		ADD	TOS,TOS,#2
 654 2d98 BCE5     		_NEXT
 655              	
 656              	/**************************
 657              	    2-	 ( w -- w-2 )
 658              	 	Subtract 2.
 659              	**************************/
 660 2d9a 8E2D0000 		_HEADER TWOM,2,"2-"
 660      02322D00 
 660      00BF
 661 2da4 A6F10206 		SUB	TOS,TOS,#2
 662 2da8 B4E5     		_NEXT
 663              	
 664              	/***************************
 665              	    CELL+	( w -- w+4 )
 666              	 	Add CELLL.
 667              	***************************/
 668 2daa 9E2D0000 		_HEADER CELLP,5,"CELL+"
ARM GAS  forth.s 			page 112


 668      0543454C 
 668      4C2B
 669 2db4 06F10406 		ADD	TOS,TOS,#CELLL
 670 2db8 ACE5     		_NEXT
 671              	
 672              	/***************************
 673              	    CELL-	( w -- w-4 )
 674              	 	Subtract CELLL.
 675              	**************************/
 676 2dba AE2D0000 		_HEADER CELLM,5,"CELL-"
 676      0543454C 
 676      4C2D
 677 2dc4 A6F10406 		SUB	TOS,TOS,#CELLL
 678 2dc8 A4E5     		_NEXT
 679              	
 680              	/**************************** 
 681              	    BL	( -- 32 )
 682              	 	Blank (ASCII space).
 683              	*****************************/
 684 2dca BE2D0000 		_HEADER BLANK,2,"BL"
 684      02424C00 
 684      00BF
 685 2dd4 47F8046D 		_PUSH
 686 2dd8 4FF02006 		MOV	TOS,#32
 687 2ddc 9AE5     		_NEXT 
 688              	
 689              	/**************************
 690              	    CELLS	( w -- w*4 )
 691              	 	Multiply CELLL 
 692              	***************************/
 693 2dde CE2D0000 		_HEADER CELLS,5,"CELLS"
 693      0543454C 
 693      4C53
 694 2de8 4FEA8606 		LSL TOS,#2
 695 2dec 92E5     		_NEXT
 696              	
 697              	/***************************
 698              	    CELL/	( w -- w/4 )
 699              	 	Divide by CELLL.
 700              	***************************/
 701 2dee E22D0000 		_HEADER CELLSL,5,"CELL/"
 701      0543454C 
 701      4C2F
 702 2df8 4FEAA606 		ASR TOS,#2
 703 2dfc 8AE5     		_NEXT
 704              	
 705              	/*************************
 706              	    2*	( w -- w*2 )
 707              	 	Multiply 2.
 708              	*************************/
 709 2dfe F22D0000 		_HEADER TWOST,2,"2*"
 709      02322A00 
 709      00BF
 710 2e08 4FEA4606 		MOV	TOS,TOS,LSL#1
 711 2e0c 82E5     		_NEXT
 712              	
 713              	/*************************
ARM GAS  forth.s 			page 113


 714              	    2/	( w -- w/2 )
 715              	 	Divide by 2.
 716              	***********************/
 717 2e0e 022E0000 		_HEADER TWOSL,2,"2/"
 717      02322F00 
 717      00BF
 718 2e18 4FEA6606 		MOV	TOS,TOS,ASR#1
 719 2e1c 7AE5     		_NEXT
 720              	
 721              	/****************************
 722              	    ?DUP	( w -- w w | 0 )
 723              	 	Conditional duplicate.
 724              	*****************************/
 725 2e1e 122E0000 		_HEADER QDUP,4,"?DUP"
 725      043F4455 
 725      5000
 726 2e28 3500     		MOVS	WP,TOS
 727 2e2a 18BF     		IT NE 
 728 2e2c 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 729 2e30 70E5     		_NEXT
 730              	
 731              	/***********************************
 732              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 733              	 	Rotate top 3 items.
 734              	*************************************/
 735 2e32 222E0000 		_HEADER ROT,3,"ROT"
 735      03524F54 
 735      00BF
 736 2e3c 3868     		LDR	T0,[DSP]  // w2 
 737 2e3e 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 738 2e40 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 739 2e42 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 740 2e44 66E5     		_NEXT
 741              	
 742              	/*********************************
 743              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 744              	 left rotate top 3 elements 
 745              	********************************/
 746 2e46 362E0000 		_HEADER NROT,4,"-ROT"
 746      042D524F 
 746      5400
 747 2e50 7868     		LDR T0,[DSP,#4]
 748 2e52 7E60     		STR TOS,[DSP,#4]	
 749 2e54 3E68     		LDR TOS,[DSP]
 750 2e56 3860     		STR T0,[DSP]
 751 2e58 5CE5     		_NEXT 
 752              	
 753              	/*********************************
 754              	    2DROP	( w1 w2 -- )
 755              	 	Drop top 2 items.
 756              	*********************************/
 757 2e5a 4A2E0000 		_HEADER DDROP,5,"2DROP"
 757      05324452 
 757      4F50
 758 2e64 57F8046B 		_POP
 759 2e68 57F8046B 		_POP
 760 2e6c 52E5     		_NEXT 
ARM GAS  forth.s 			page 114


 761              	
 762              	/********************************
 763              		3DROP ( w1 w2 w3 -- )
 764              		drop top 3 items 
 765              	********************************/
 766 2e6e 5E2E0000 		_HEADER TDROP,5,"3DROP"
 766      05334452 
 766      4F50
 767 2e78 07F10807 	    add DSP,#8 
 768 2e7c 57F8046B 	    _POP 
 769 2e80 48E5     	    _NEXT 
 770              	
 771              	/***********************************
 772              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 773              	 	Duplicate top 2 items.
 774              	************************************/
 775 2e82 722E0000 		_HEADER DDUP,4,"2DUP"
 775      04324455 
 775      5000
 776 2e8c 3868     		LDR	T0,[DSP] // w1
 777 2e8e 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 778 2e92 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 779 2e96 3DE5     		_NEXT
 780              	
 781              	/******************************
 782              	    D+	( d1 d2 -- d3 )
 783              	 	Add top 2 double numbers.
 784              	******************************/
 785 2e98 862E0000 		_HEADER DPLUS,2,"D+"
 785      02442B00 
 786 2ea0 57F8045B 		LDR	WP,[DSP],#4
 787 2ea4 57F8042B 		LDR	T2,[DSP],#4
 788 2ea8 3B68     		LDR	T3,[DSP]
 789 2eaa ED18     		ADDS	WP,WP,T3
 790 2eac 3D60     		STR	WP,[DSP]
 791 2eae 46EB0206 		ADC	TOS,TOS,T2
 792 2eb2 2FE5     		_NEXT
 793              	
 794              	/******************************
 795              		DABS ( d -- ud )
 796              		absolute value double 
 797              	*****************************/
 798 2eb4 9C2E0000 		_HEADER DABS,4,"DABS"
 798      04444142 
 798      530000BF 
 799 2ec0 16F0004F 		tst TOS,#(1<<31)
 800 2ec4 09D0     		beq 9f 
 801 2ec6 6FEA0606 		mvn TOS,TOS 
 802 2eca 3D68     		ldr WP,[DSP]
 803 2ecc 6FEA0505 		mvn WP,WP 
 804 2ed0 0135     		adds WP,#1
 805 2ed2 3D60     		str WP,[DSP]
 806 2ed4 01D3     		bcc 9f 
 807 2ed6 06F10106 		add TOS,#1 
 808 2eda 1BE5     	9:	_NEXT 
 809              	
 810              	/*****************************
ARM GAS  forth.s 			page 115


 811              	  UD> ( d1 d2 -- f )
 812              	  unsigned compare double d1 > d2 
 813              	******************************/
 814 2edc B82E0000 		_HEADER UDGREAT,3,"UD>"
 814      0355443E 
 815 2ee4 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 816 2ee8 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 817 2eea B042     		cmp T0,TOS 
 818 2eec 02D8     		bhi 1f
 819 2eee 04D4     		bmi 2f  
 820 2ef0 A942     		cmp T1,WP 
 821 2ef2 02D9     		bls 2f 
 822 2ef4 4FF0FF36 	1:	mov TOS,#-1 
 823 2ef8 0CE5     		_NEXT 
 824 2efa 4FF00006 	2:  mov TOS,#0 
 825 2efe 09E5     		_NEXT 
 826              	
 827              	/******************************
 828              		D0= ( d -- f )
 829              		double 0= 
 830              	*****************************/
 831 2f00 E02E0000 		_HEADER DZEQUAL,3,"D0="
 831      0344303D 
 832 2f08 3046     		mov T0,TOS
 833 2f0a 57F8046B 		_POP 
 834 2f0e 46EA0006 		orr TOS,T0 
 835 2f12 01D0     		beq 9f
 836 2f14 6FF00006 		mvn TOS,#0 
 837 2f18 FCE4     	9:	_NEXT 
 838              	
 839              	/*****************************
 840              	    NOT	 ( w -- !w )
 841              	 	1"s complement.
 842              	*****************************/
 843 2f1a 042F0000 		_HEADER INVER,3,"NOT"
 843      034E4F54 
 843      00BF
 844 2f24 6FEA0606 		MVN	TOS,TOS
 845 2f28 F4E4     		_NEXT
 846              	
 847              	/*****************************
 848              	    NEGATE	( w -- -w )
 849              	 	2's complement.
 850              	***************************/
 851 2f2a 1E2F0000 		_HEADER NEGAT,6,"NEGATE"
 851      064E4547 
 851      41544500 
 851      00BF
 852 2f38 C6F10006 		RSB	TOS,TOS,#0
 853 2f3c EAE4     		_NEXT
 854              	
 855              	/***************************
 856              	    ABS	 ( w -- |w| )
 857              	 	Absolute.
 858              	**************************/
 859 2f3e 2E2F0000 		_HEADER ABSS,3,"ABS"
 859      03414253 
ARM GAS  forth.s 			page 116


 859      00BF
 860 2f48 16F0004F 		TST	TOS,#0x80000000
 861 2f4c 18BF     		IT NE
 862 2f4e 7642     	    RSBNE   TOS,TOS,#0
 863 2f50 E0E4     		_NEXT
 864              	
 865              	/**************************
 866              		CLZ ( n - n )
 867              		count leading zeros 
 868              	**************************/
 869 2f52 422F0000 		_HEADER CLZ,3,"CLZ"
 869      03434C5A 
 869      00BF
 870 2f5c B6FA86F6 		clz TOS,TOS 
 871 2f60 D8E4     		_NEXT 
 872              	
 873              	/*************************
 874              		CTZ ( n -- n )
 875              		count trailing zeros 
 876              	************************/
 877 2f62 562F0000 		_HEADER CTZ,3,"CTZ"
 877      0343545A 
 877      00BF
 878 2f6c 80EA0000 		eor T0,T0 
 879 2f70 16F0010F 	1:  tst TOS,#1 
 880 2f74 04D1     		bne 2f 
 881 2f76 4FEA5606 		lsr TOS,#1 
 882 2f7a 00F10100 		add T0,#1 
 883 2f7e F7E7     		b 1b 
 884 2f80 0646     	2:  mov TOS,T0 
 885 2f82 C7E4     		_NEXT 
 886              	
 887              	
 888              	/*******************
 889              	  0= ( w -- f )
 890              	 TOS==0?
 891              	*******************/
 892 2f84 662F0000 		_HEADER ZEQUAL,2,"0="
 892      02303D00 
 893 2f8c 16B9     		cbnz TOS,1f
 894 2f8e 4FF0FF36 		mov TOS,#-1
 895 2f92 BFE4     		_NEXT 
 896 2f94 86EA0606 	1:  eor TOS,TOS,TOS  
 897 2f98 BCE4     		_NEXT 	
 898              	
 899              	/*********************
 900              	    =	 ( w w -- t )
 901              	 	Equal?
 902              	*********************/
 903 2f9a 882F0000 		_HEADER EQUAL,1,"="
 903      013D
 904 2fa0 57F8045B 		LDR	WP,[DSP],#4
 905 2fa4 AE42     		CMP	TOS,WP
 906 2fa6 0CBF     		ITE EQ 
 907 2fa8 6FF00006 	    MVNEQ	TOS,#0
 908 2fac 0026     		MOVNE	TOS,#0
 909 2fae B1E4     		_NEXT
ARM GAS  forth.s 			page 117


 910              	
 911              	/************************
 912              		<> ( w w -- f )
 913              		different?
 914              	************************/
 915 2fb0 9E2F0000 		_HEADER DIFF,2,"<>"
 915      023C3E00 
 916 2fb8 3046     		mov T0,TOS 
 917 2fba 57F8046B 		_POP 
 918 2fbe 86EA0006 		eor TOS,T0
 919 2fc2 B6FA86F0 		clz T0,TOS 
 920 2fc6 06FA00F6 		lsl TOS,T0 
 921 2fca 4FEAE676 		asr TOS,#31 
 922 2fce A1E4     		_NEXT 
 923              	
 924              	/************************
 925              	    U<	 ( w w -- t )
 926              	 	Unsigned less?
 927              	*************************/
 928 2fd0 B42F0000 		_HEADER ULESS,2,"U<"
 928      02553C00 
 929 2fd8 57F8045B 		LDR	WP,[DSP],#4
 930 2fdc B542     		CMP	WP,TOS
 931 2fde 34BF     		ITE CC 
 932 2fe0 6FF00006 		MVNCC	TOS,#0
 933 2fe4 0026     		MOVCS	TOS,#0
 934 2fe6 95E4     		_NEXT
 935              	
 936              	/**********************
 937              	    <	( w w -- t )
 938              	 	Less?
 939              	**********************/
 940 2fe8 D42F0000 		_HEADER LESS,1,"<"
 940      013C00BF 
 941 2ff0 57F8045B 		LDR	WP,[DSP],#4
 942 2ff4 B542     		CMP	WP,TOS
 943 2ff6 B4BF     	    ITE LT
 944 2ff8 6FF00006 		MVNLT	TOS,#0
 945 2ffc 0026     		MOVGE	TOS,#0
 946 2ffe 89E4     		_NEXT 
 947              	
 948              	/**********************
 949              		U> ( u u -- t|f )
 950              	    unsigned greater 
 951              	**********************/
 952 3000 EC2F0000 		_HEADER UGREAT,2,"U>"
 952      02553E00 
 953 3008 57F8045B 		LDR WP,[DSP],#4 
 954 300c AE42     		CMP TOS,WP 
 955 300e 34BF     		ITE CC  
 956 3010 6FF00006 		MVNCC TOS,#0 
 957 3014 0026     		MOVCS TOS,#0
 958 3016 7DE4     		_NEXT 
 959              	
 960              	/***********************
 961              	    >	( w w -- t )
 962              	 	greater?
ARM GAS  forth.s 			page 118


 963              	***********************/
 964 3018 04300000 		_HEADER GREAT,1,">"
 964      013E00BF 
 965 3020 57F8045B 		LDR	WP,[DSP],#4
 966 3024 B542     		CMP	WP,TOS
 967 3026 CCBF     		ITE GT
 968 3028 6FF00006 	    MVNGT	TOS,#0
 969 302c 0026     		MOVLE	TOS,#0
 970 302e 71E4     		_NEXT
 971              	
 972              	/***************************
 973              	    MAX	 ( w w -- max )
 974              	 	Leave maximum.
 975              	***************************/
 976 3030 1C300000 		_HEADER MAX,3,"MAX"
 976      034D4158 
 977 3038 57F8045B 		LDR	WP,[DSP],#4
 978 303c B542     		CMP	WP,TOS
 979 303e C8BF     		IT GT 
 980 3040 2E46     		MOVGT	TOS,WP
 981 3042 67E4     		_NEXT 
 982              	
 983              	/**************************
 984              	    MIN	 ( w w -- min )
 985              	 	Leave minimum.
 986              	**************************/
 987 3044 34300000 		_HEADER MIN,3,"MIN"
 987      034D494E 
 988 304c 57F8045B 		LDR	WP,[DSP],#4
 989 3050 B542     		CMP	WP,TOS
 990 3052 B8BF     		IT LT
 991 3054 2E46     		MOVLT	TOS,WP
 992 3056 5DE4     		_NEXT
 993              	
 994              	/***********************
 995              	    +!	 ( w a -- )
 996              	 	Add to memory.
 997              	***********************/
 998 3058 48300000 		_HEADER PSTOR,2,"+!"
 998      022B2100 
 999 3060 57F8045B 		LDR	WP,[DSP],#4
 1000 3064 3268     		LDR	T2,[TOS]
 1001 3066 2A44     		ADD	T2,T2,WP
 1002 3068 3260     		STR	T2,[TOS]
 1003 306a 57F8046B 		_POP
 1004 306e 51E4     		_NEXT
 1005              	
 1006              	/************************
 1007              	    2!	 ( d a -- )
 1008              	 	Store double number.
 1009              	*************************/
 1010 3070 5C300000 		_HEADER DSTOR,2,"2!"
 1010      02322100 
 1011 3078 57F8045B 		LDR	WP,[DSP],#4
 1012 307c 57F8042B 		LDR	T2,[DSP],#4
 1013 3080 46F8045B 		STR	WP,[TOS],#4
 1014 3084 3260     		STR	T2,[TOS]
ARM GAS  forth.s 			page 119


 1015 3086 57F8046B 		_POP
 1016 308a 43E4     		_NEXT
 1017              	
 1018              	/************************
 1019              	    2@	 ( a -- d )
 1020              	 	Fetch double number.
 1021              	************************/
 1022 308c 74300000 		_HEADER DAT,2,"D@"
 1022      02444000 
 1023 3094 7568     		LDR	WP,[TOS,#4]
 1024 3096 47F8045D 		STR	WP,[DSP,#-4]!
 1025 309a 3668     		LDR	TOS,[TOS]
 1026 309c 3AE4     		_NEXT
 1027              	
 1028              	/***************************
 1029              	    COUNT	( b -- b+1 c )
 1030              	 	Fetch length of string.
 1031              	****************************/
 1032 309e 90300000 		_HEADER COUNT,5,"COUNT"
 1032      05434F55 
 1032      4E54
 1033 30a8 16F8015B 		LDRB	WP,[TOS],#1
 1034 30ac 47F8046D 		_PUSH
 1035 30b0 2E46     		MOV	TOS,WP
 1036 30b2 2FE4     		_NEXT
 1037              	
 1038              	/******************************
 1039              	    DNEGATE	( d -- -d )
 1040              	 	Negate double number.
 1041              	**************************/
 1042 30b4 A2300000 		_HEADER DNEGA,7,"DNEGATE"
 1042      07444E45 
 1042      47415445 
 1043 30c0 3D68     		LDR	WP,[DSP]
 1044 30c2 A2EB0202 		SUB	T2,T2,T2
 1045 30c6 551B     		SUBS WP,T2,WP
 1046 30c8 62EB0606 		SBC	TOS,T2,TOS
 1047 30cc 3D60     		STR	WP,[DSP]
 1048 30ce 21E4     		_NEXT
 1049              	
 1050              	/******************************
 1051              	  System and user variables
 1052              	******************************/
 1053              	
 1054              	/*******************************
 1055              	  doVAR	( -- a )
 1056              	  Run time routine for VARIABLE and CREATE.
 1057              	hidden word used by compiler
 1058              	********************************/
 1059              	DOVAR:
 1060 30d0 47F8046D 		_PUSH
 1061 30d4 6646     		MOV TOS,IP
 1062 30d6 0CF1040C 		ADD IP,IP,#4 
 1063 30da 1EE4     		B UNNEST 
 1064              	
 1065              	/**********************************
 1066              	    doCON	( -- a ) 
ARM GAS  forth.s 			page 120


 1067              	 	Run time routine for CONSTANT.
 1068              	hidden word used by compiler 
 1069              	***********************************/
 1070              	DOCON:
 1071 30dc 47F8046D 		_PUSH
 1072 30e0 5CF8046B 		LDR.W TOS,[IP],#4 
 1073 30e4 19E4     		B UNNEST 
 1074              	
 1075              	/***********************
 1076              	  system variables 
 1077              	***********************/
 1078              	
 1079              	/**************************
 1080              	 SEED ( -- a)
 1081              	 return PRNG seed address 
 1082              	**************************/
 1083 30e6 B8300000 		_HEADER SEED,4,"SEED"
 1083      04534545 
 1083      4400
 1084 30f0 47F8046D 		_PUSH 
 1085 30f4 04F10406 		ADD TOS,UP,#RNDSEED
 1086 30f8 0CE4     		_NEXT 	
 1087              	
 1088              	/****************************************
 1089              	  MSEC ( -- a)
 1090              	 return address of milliseconds counter
 1091              	****************************************/
 1092 30fa EA300000 		_HEADER MSEC,4,"MSEC"
 1092      044D5345 
 1092      4300
 1093 3104 47F8046D 	    _PUSH
 1094 3108 04F10806 	    ADD TOS,UP,#TICKS
 1095 310c 02E4     	    _NEXT 
 1096              	
 1097              	/*************************
 1098              	 TIMER ( -- a )
 1099              	 count down timer 
 1100              	**********************/
 1101 310e FE300000 		_HEADER TIMER,5,"TIMER"
 1101      0554494D 
 1101      4552
 1102 3118 47F8046D 		 _PUSH 
 1103 311c 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1104 3120 FFF7F8BB 	    _NEXT
 1105              	
 1106              	/*****************************
 1107              	    'BOOT	 ( -- a )
 1108              	 	boot up application vector 
 1109              	*****************************/
 1110 3124 12310000 		_HEADER TBOOT,5,"'BOOT"
 1110      0527424F 
 1110      4F5400BF 
 1111 3130 47F8046D 		_PUSH
 1112 3134 04F11006 		ADD	TOS,UP,#BOOT 
 1113 3138 FFF7ECBB 		_NEXT
 1114              		
 1115              	/********************************************	
ARM GAS  forth.s 			page 121


 1116              	    BASE	( -- a )
 1117              	 	Storage of the radix base for numeric I/O.
 1118              	**********************************************/
 1119 313c 28310000 		_HEADER BASE,4,"BASE"
 1119      04424153 
 1119      450000BF 
 1120 3148 47F8046D 		_PUSH
 1121 314c 04F11C06 		ADD	TOS,UP,#NBASE
 1122 3150 FFF7E0BB 		_NEXT
 1123              	
 1124              	/*****************************************************
 1125              	    temp	 ( -- a )
 1126              	 	A temporary storage location used in parse and find.
 1127              	hidden word for internal use
 1128              	********************************************************/
 1129              	TEMP:
 1130 3154 47F8046D 		_PUSH
 1131 3158 04F12006 		ADD	TOS,UP,#TMP
 1132 315c FFF7DABB 		_NEXT
 1133              	
 1134              	/*******************************************
 1135              	    SPAN	( -- a )
 1136              	 	Hold character count received by EXPECT.
 1137              	********************************************/
 1138 3160 40310000 		_HEADER SPAN,4,"SPAN"
 1138      04535041 
 1138      4E0000BF 
 1139 316c 47F8046D 		_PUSH
 1140 3170 04F12406 		ADD	TOS,UP,#CSPAN
 1141 3174 FFF7CEBB 		_NEXT
 1142              	
 1143              	/***********************************************************
 1144              	    >IN	 ( -- a )
 1145              	 	Hold the character pointer while parsing input stream.
 1146              	***********************************************************/
 1147 3178 64310000 		_HEADER INN,3,">IN"
 1147      033E494E 
 1148 3180 47F8046D 		_PUSH
 1149 3184 04F12806 		ADD	TOS,UP,#TOIN
 1150 3188 FFF7C4BB 		_NEXT
 1151              	
 1152              	/**************************************
 1153              	    #TIB	( -- a )
 1154              	 	Hold the current count and address 
 1155              		of the terminal input buffer.
 1156              	**************************************/
 1157 318c 7C310000 		_HEADER NTIB,4,"#TIB"
 1157      04235449 
 1157      420000BF 
 1158 3198 47F8046D 		_PUSH
 1159 319c 04F12C06 		ADD	TOS,UP,#NTIBB
 1160 31a0 FFF7B8BB 		_NEXT
 1161              	
 1162              	/******************************
 1163              	    'EVAL	( -- a )
 1164              	 	Execution vector of EVAL.
 1165              	*******************************/
ARM GAS  forth.s 			page 122


 1166 31a4 90310000 		_HEADER TEVAL,5,"'EVAL"
 1166      05274556 
 1166      414C00BF 
 1167 31b0 47F8046D 		_PUSH
 1168 31b4 04F13406 		ADD	TOS,UP,#EVAL
 1169 31b8 FFF7ACBB 		_NEXT
 1170              	
 1171              	/*********************************
 1172              	    HLD	 ( -- a )
 1173              	 	Hold a pointer in building a 
 1174              		numeric output string.
 1175              	*********************************/
 1176 31bc A8310000 		_HEADER HLD,3,"HLD"
 1176      03484C44 
 1177 31c4 47F8046D 		_PUSH
 1178 31c8 04F13806 		ADD	TOS,UP,#VHOLD
 1179 31cc FFF7A2BB 		_NEXT
 1180              	
 1181              	/**********************************
 1182              	    CONTEXT	( -- a )
 1183              	 	A area to specify vocabulary 
 1184              		search order.
 1185              	**********************************/
 1186 31d0 C0310000 		_HEADER CNTXT,7,"CONTEXT"
 1186      07434F4E 
 1186      54455854 
 1187              	CRRNT:
 1188 31dc 47F8046D 		_PUSH
 1189 31e0 04F13C06 		ADD	TOS,UP,#CTXT
 1190 31e4 FFF796BB 		_NEXT
 1191              	
 1192              	/******************************
 1193              	    CP	( -- a )
 1194              	 	Point to top name in RAM 
 1195              		vocabulary.
 1196              	******************************/
 1197 31e8 D4310000 		_HEADER CPP,2,"CP"
 1197      02435000 
 1198 31f0 47F8046D 		_PUSH
 1199 31f4 04F14406 		ADD	TOS,UP,#USER_CTOP
 1200 31f8 FFF78CBB 		_NEXT
 1201              	
 1202              	/****************************
 1203              	   FCP ( -- a )
 1204              	  Point ot top of Forth 
 1205              	  system dictionary
 1206              	****************************/
 1207 31fc EC310000 		_HEADER FCP,3,"FCP"
 1207      03464350 
 1208 3204 47F8046D 		_PUSH 
 1209 3208 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1210 320c FFF782BB 		_NEXT 
 1211              	
 1212              	/***************************
 1213              	    LAST	( -- a )
 1214              	 	Point to the last name 
 1215              		in the name dictionary.
ARM GAS  forth.s 			page 123


 1216              	***************************/
 1217 3210 00320000 		_HEADER LAST,4,"LAST"
 1217      044C4153 
 1217      540000BF 
 1218 321c 47F8046D 		_PUSH
 1219 3220 04F14806 		ADD	TOS,UP,#LASTN
 1220 3224 FFF776BB 		_NEXT
 1221              	
 1222              	
 1223              	/***********************
 1224              		system constants 
 1225              	***********************/
 1226              	
 1227              	/********************************
 1228              		USER-BEGIN ( -- a )
 1229              	  where user area begin in RAM
 1230              	********************************/
 1231 3228 14320000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1231      0A555345 
 1231      522D4245 
 1231      47494E00 
 1232 3238 47F8046D 		_PUSH 
 1233 323c DFF80460 		ldr TOS,USR_BGN_ADR 
 1234 3240 FFF768BB 		_NEXT 
 1235              	USR_BGN_ADR:
 1236 3244 12050020 	.word  DTOP 
 1237              	
 1238              	/*********************************
 1239              	  USER_END ( -- a )
 1240              	  where user area end in RAM 
 1241              	******************************/
 1242 3248 2C320000 		_HEADER USER_END,8,"USER-END"
 1242      08555345 
 1242      522D454E 
 1242      440000BF 
 1243 3258 47F8046D 		_PUSH 
 1244 325c DFF80460 		ldr TOS,USER_END_ADR 
 1245 3260 FFF758BB 		_NEXT 
 1246              	USER_END_ADR:
 1247 3264 7C800120 		.word DEND 
 1248              	
 1249              	
 1250              	/* *********************
 1251              	  Common functions
 1252              	***********************/
 1253              	
 1254              	/********************************
 1255              	    WITHIN	( u ul uh -- t )
 1256              	 	Return true if u is within 
 1257              		the range of ul and uh.
 1258              	********************************/
 1259 3268 4C320000 		_HEADER WITHI,6,"WITHIN"
 1259      06574954 
 1259      48494E00 
 1260 3274 504700BF 		_NEST
 1261 3278 792C0000 		_ADR	OVER
 1262 327c 292D0000 		_ADR	SUBB
ARM GAS  forth.s 			page 124


 1263 3280 D12B0000 		_ADR	TOR
 1264 3284 292D0000 		_ADR	SUBB
 1265 3288 8D2B0000 		_ADR	RFROM
 1266 328c D92F0000 		_ADR	ULESS
 1267 3290 1B290000 		_UNNEST
 1268              	
 1269              	//  Divide
 1270              	
 1271              	/*************************************
 1272              	    UM/MOD	( udl udh u -- ur uq )
 1273              	 	Unsigned divide of a double by a 
 1274              		single. Return mod and quotient.
 1275              	**************************************/
 1276 3294 6C320000 		_HEADER UMMOD,6,"UM/MOD"
 1276      06554D2F 
 1276      4D4F4400 
 1277 32a0 4FF00103 		MOV	T3,#1
 1278 32a4 57F8045B 		LDR	WP,[DSP],#4
 1279 32a8 3A68     		LDR	T2,[DSP]
 1280              	UMMOD0:
 1281 32aa 9218     		ADDS	T2,T2,T2
 1282 32ac 6D41     		ADCS	WP,WP,WP
 1283 32ae 04D3     		BCC	UMMOD1
 1284 32b0 A5EB0605 		SUB	WP,WP,TOS
 1285 32b4 02F10102 		ADD	T2,T2,#1
 1286 32b8 04E0     		B UMMOD2
 1287              	UMMOD1:
 1288 32ba AD1B     		SUBS	WP,WP,TOS 
 1289 32bc 28BF     		IT CS 
 1290 32be 0132     		ADDCS	T2,T2,#1
 1291 32c0 00D2     		BCS	UMMOD2
 1292 32c2 3544     		ADD	WP,WP,TOS
 1293              	UMMOD2:
 1294 32c4 DB18     		ADDS	T3,T3,T3
 1295 32c6 F0D3     		BCC	UMMOD0
 1296 32c8 1646     		MOV	TOS,T2
 1297 32ca 3D60     		STR	WP,[DSP]
 1298 32cc FFF722BB 		_NEXT
 1299              	
 1300              	/****************************
 1301              	    M/MOD	( d n -- r q )
 1302              	 	Signed floored divide 
 1303              		of double by single. 
 1304              		Return mod and quotient.
 1305              	****************************/
 1306 32d0 98320000 		_HEADER MSMOD,5,"M/MOD"
 1306      054D2F4D 
 1306      4F4400BF 
 1307 32dc 504700BF 		_NEST
 1308 32e0 552C0000 		_ADR	DUPP
 1309 32e4 892C0000 		_ADR	ZLESS
 1310 32e8 552C0000 		_ADR	DUPP
 1311 32ec D12B0000 		_ADR	TOR
 1312 32f0 1B2B0000 		_QBRAN MMOD1
 1312      08330000 
 1313 32f8 392F0000 		_ADR	NEGAT
 1314 32fc D12B0000 		_ADR	TOR
ARM GAS  forth.s 			page 125


 1315 3300 C1300000 		_ADR	DNEGA
 1316 3304 8D2B0000 		_ADR	RFROM
 1317              	MMOD1:
 1318 3308 D12B0000 		_ADR	TOR
 1319 330c 552C0000 		_ADR	DUPP
 1320 3310 892C0000 		_ADR	ZLESS
 1321 3314 1B2B0000 		_QBRAN MMOD2
 1321      24330000 
 1322 331c BD2B0000 		_ADR	RAT
 1323 3320 192D0000 		_ADR	PLUS
 1324              	MMOD2:
 1325 3324 8D2B0000 		_ADR	RFROM
 1326 3328 A1320000 		_ADR	UMMOD
 1327 332c 8D2B0000 		_ADR	RFROM
 1328 3330 1B2B0000 		_QBRAN	MMOD3
 1328      44330000 
 1329 3338 652C0000 		_ADR	SWAP
 1330 333c 392F0000 		_ADR	NEGAT
 1331 3340 652C0000 		_ADR	SWAP
 1332              	MMOD3:   
 1333 3344 1B290000 		_UNNEST
 1334              	
 1335              	/****************************
 1336              		S>D ( n -- d )
 1337              		convert single to double 
 1338              	*****************************/
 1339 3348 D4320000 		_HEADER STOD,3,"S>D"
 1339      03533E44 
 1340 3350 47F8046D 		_PUSH 
 1341 3354 4FEAE676 		ASR TOS,#31
 1342 3358 FFF7DCBA 		_NEXT 
 1343              	
 1344              	/****************************
 1345              		D2* ( d -- d<<1 )
 1346              		double * 2 
 1347              	***************************/
 1348 335c 4C330000 		_HEADER D2STAR,3,"D2*"
 1348      0344322A 
 1349 3364 3868     		ldr T0,[DSP]
 1350 3366 4000     		lsls T0,#1
 1351 3368 3860     		str T0,[DSP]
 1352 336a 4FEA4606 		lsl TOS,#1
 1353 336e 46F10006 		adc TOS,#0
 1354 3372 FFF7CFBA 		_NEXT 
 1355              	
 1356              	/****************************
 1357              		D2/  ( d -- d>>1 )
 1358              		double signed divide by 2 
 1359              	*****************************/
 1360 3376 60330000 		_HEADER D2SL,3,"D2/"
 1360      0344322F 
 1360      00BF
 1361 3380 3868     		ldr T0,[DSP]
 1362 3382 7610     		asrs TOS,#1
 1363 3384 4FEA3000 		rrx T0,T0 
 1364 3388 3860     		str T0,[DSP]
 1365 338a FFF7C3BA 		_NEXT 
ARM GAS  forth.s 			page 126


 1366              	
 1367              	/***************************
 1368              		D/MOD  ( d+ n+ - r+ qd+ )
 1369              		unsigned double division
 1370              		and modulo 
 1371              		output:
 1372              			qd+ = d+ / n+
 1373              			r+ = qd+ - (d+ * n+ )
 1374              	***************************/
 1375 338e 7A330000 		_HEADER DSLMOD,5,"D/MOD"
 1375      05442F4D 
 1375      4F44
 1376 3398 3D68     		ldr WP,[DSP]  // d+ high 
 1377 339a 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1378 339c 4FF02002 		mov T2,#32 // shift counter  
 1379 33a0 81EA0101 		eor T1,T1 // quotient T0:T1  
 1380 33a4 25B9     		cbnz WP,1f    
 1381 33a6 82EA0202 		eor T2,T2 // nos shifting required 
 1382 33aa 0546     		mov WP,T0 
 1383 33ac 80EA0000 		eor T0,T0 
 1384 33b0 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1385 33b2 15F0004F 	    tst WP,#(1<<31) 
 1386 33b6 06D1     		bne 2f
 1387 33b8 4918     		adds T1,T1,T1 
 1388 33ba 4041     		adcs T0,T0,T0 
 1389 33bc 45EB0505 		adc WP,WP,WP 
 1390 33c0 A2F10102 		sub T2,#1 
 1391 33c4 F4E7     		b 1b 
 1392 33c6 B5FBF6F3 	2:  udiv T3,WP,TOS
 1393 33ca 41EA0301 		orr T1,T3   // append partial quotient 
 1394 33ce 06FB03F3 		mul T3,TOS
 1395 33d2 A5EB0305 		sub WP,T3 //remainder 
 1396 33d6 02B1     		cbz T2,8f 
 1397 33d8 EAE7     		b 1b 
 1398 33da 7D60     	8:	str WP,[DSP,#4] // remainder 
 1399 33dc 3960     		str T1,[DSP]  // q lo 
 1400 33de 0646     		mov TOS,T0  // q hi 		
 1401 33e0 FFF798BA 		_NEXT 
 1402              	
 1403              	
 1404              	/****************************
 1405              		D/  ( ud u -- udq )
 1406              		divide unsigned double 
 1407              		by unsigned single 
 1408              		return double quotient
 1409              		rounded to nearest integer 
 1410              	****************************/
 1411 33e4 92330000 		_HEADER DSLASH,2,"D/"
 1411      02442F00 
 1412 33ec 504700BF 		_NEST 
 1413 33f0 552C0000 		_ADR DUPP 
 1414 33f4 DB2A0000 		_DOLIT 1 
 1414      01000000 
 1415 33fc F12C0000 		_ADR RSHIFT 
 1416 3400 D12B0000 		_ADR TOR 
 1417 3404 99330000 		_ADR DSLMOD 
 1418 3408 3D2E0000 		_ADR ROT 
ARM GAS  forth.s 			page 127


 1419 340c 8D2B0000 		_ADR RFROM 
 1420 3410 21300000 		_ADR GREAT 
 1421 3414 1B2B0000 		_QBRAN 9f
 1421      2C340000 
 1422 341c DB2A0000 		_DOLIT 1 
 1422      01000000 
 1423 3424 51330000 		_ADR STOD 
 1424 3428 A12E0000 		_ADR DPLUS 
 1425 342c 1B290000 	9:	_UNNEST 
 1426              	
 1427              	
 1428              	/****************************
 1429              		D* ( d s -- d )
 1430              	    multiply a double 
 1431              		by a single 
 1432              	****************************/
 1433 3430 E8330000 		_HEADER DSTAR,2,"D*"
 1433      02442A00 
 1434              	/*
 1435              		_NEST 
 1436              		_ADR NROT 
 1437              		_ADR DUPP 
 1438              		_ADR TOR 
 1439              		_ADR DABS
 1440              		_ADR SWAP  
 1441              		_ADR ROT   
 1442              		_ADR DUPP
 1443              		_ADR TOR
 1444              		_ADR MSTAR
 1445              		_ADR ROT
 1446              		_ADR RFROM 
 1447              		_ADR STAR 
 1448              		_ADR PLUS
 1449              		_ADR RFROM 
 1450              		_ADR ZLESS 
 1451              		_QBRAN 9f
 1452              		_ADR DNEGA   
 1453              	9:	_UNNEST 
 1454              	*/
 1455 3438 57F8040B 		ldr T0,[DSP],#4
 1456 343c 3968     		ldr T1,[DSP]
 1457 343e 3860     		str T0,[DSP] 
 1458 3440 83EA0303 		eor T3,T3 
 1459 3444 10F0004F 		tst T0,#(1<<31)
 1460 3448 02D0     		beq 1f 
 1461              		// DNEGATE 
 1462 344a 591A     		subs T1,T3,T1  
 1463 344c 63EB0000 		sbc T0,T3,T0 
 1464 3450 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1465 3454 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1466 3458 0E44     		add TOS,T1  // TOS:T2 product  
 1467 345a 3868     		ldr r0,[DSP]
 1468 345c 10F0004F 		tst T0,#(1<<31)
 1469 3460 02D0     		beq 2f 
 1470              		// DNEGATE product 
 1471 3462 9A1A     		subs T2,T3,T2  
 1472 3464 63EB0606 		sbc TOS,T3,TOS 
ARM GAS  forth.s 			page 128


 1473 3468 3A60     	2:  str T2,[DSP]
 1474 346a FFF753BA 		_NEXT 
 1475              	
 1476              	
 1477              	/****************************
 1478              	   /MOD	( n n -- r q )
 1479              		Signed divide. Return
 1480              		mod and quotient.
 1481              	****************************/
 1482 346e 34340000 		_HEADER SLMOD,4,"/MOD"
 1482      042F4D4F 
 1482      4400
 1483 3478 504700BF 		_NEST
 1484 347c 792C0000 		_ADR	OVER
 1485 3480 892C0000 		_ADR	ZLESS
 1486 3484 652C0000 		_ADR	SWAP
 1487 3488 DD320000 		_ADR	MSMOD
 1488 348c 1B290000 		_UNNEST
 1489              	
 1490              	/**************************
 1491              	    MOD	 ( n n -- r )
 1492              	 	Signed divide. Return
 1493              		mod only.
 1494              	**************************/
 1495 3490 72340000 		_HEADER MODD,3,"MOD"
 1495      034D4F44 
 1496 3498 504700BF 		_NEST
 1497 349c 79340000 		_ADR	SLMOD
 1498 34a0 452C0000 		_ADR	DROP
 1499 34a4 1B290000 		_UNNEST
 1500              	
 1501              	/*************************
 1502              	    /	   ( n n -- q )
 1503              	 	Signed divide. Return
 1504              		quotient only.
 1505              	**************************/
 1506 34a8 94340000 		_HEADER SLASH,1,"/"
 1506      012F00BF 
 1507 34b0 504700BF 		_NEST
 1508 34b4 79340000 		_ADR	SLMOD
 1509 34b8 652C0000 		_ADR	SWAP
 1510 34bc 452C0000 		_ADR	DROP
 1511 34c0 1B290000 		_UNNEST
 1512              	
 1513              	//******************************
 1514              	//  */MOD	( n1 n2 n3 -- r q )
 1515              	/* 	Multiply n1 and n2, then 
 1516              		divide by n3. Return 
 1517              		mod and quotient.
 1518              	******************************/
 1519 34c4 AC340000 		_HEADER SSMOD,5,"*/MOD"
 1519      052A2F4D 
 1519      4F4400BF 
 1520 34d0 504700BF 		_NEST
 1521 34d4 D12B0000 		_ADR	TOR
 1522 34d8 612D0000 		_ADR	MSTAR
 1523 34dc 8D2B0000 		_ADR	RFROM
ARM GAS  forth.s 			page 129


 1524 34e0 DD320000 		_ADR	MSMOD
 1525 34e4 1B290000 		_UNNEST
 1526              	
 1527              	//*******************************
 1528              	//  */ ( n1 n2 n3 -- q )
 1529              	/* 	Multiply n1 by n2, then 
 1530              		divide by n3. Return quotient
 1531              		only.
 1532              	*******************************/
 1533 34e8 C8340000 		_HEADER STASL,2,"*/"
 1533      022A2F00 
 1534 34f0 504700BF 		_NEST
 1535 34f4 D1340000 		_ADR	SSMOD
 1536 34f8 652C0000 		_ADR	SWAP
 1537 34fc 452C0000 		_ADR	DROP
 1538 3500 1B290000 		_UNNEST
 1539              	
 1540              	/*******************
 1541              	  Miscellaneous
 1542              	*******************/
 1543              	
 1544              	/*************************
 1545              	    ALIGNED	( b -- a )
 1546              	 	Align address to the 
 1547              		cell boundary.
 1548              	**************************/
 1549 3504 EC340000 		_HEADER ALGND,7,"ALIGNED"
 1549      07414C49 
 1549      474E4544 
 1550 3510 06F10306 		ADD	TOS,TOS,#3
 1551 3514 6FF00305 		MVN	WP,#3
 1552 3518 06EA0506 		AND	TOS,TOS,WP
 1553 351c FFF7FAB9 		_NEXT
 1554              	
 1555              	/****************************
 1556              	    >CHAR	( c -- c )
 1557              	 	Filter non-printing 
 1558              		characters.
 1559              	****************************/
 1560 3520 08350000 		_HEADER TCHAR,5,">CHAR"
 1560      053E4348 
 1560      415200BF 
 1561 352c 504700BF 		_NEST
 1562 3530 DB2A0000 		_DOLIT  0x7F
 1562      7F000000 
 1563 3538 992C0000 		_ADR	ANDD
 1564 353c 552C0000 		_ADR	DUPP	// mask msb
 1565 3540 D52D0000 		_ADR	BLANK
 1566 3544 DB2A0000 		_DOLIT 	127
 1566      7F000000 
 1567 354c 75320000 		_ADR	WITHI	// check for printable
 1568 3550 252F0000 		_ADR	INVER
 1569 3554 1B2B0000 		_QBRAN	TCHA1
 1569      68350000 
 1570 355c 452C0000 		_ADR	DROP
 1571 3560 DB2A0000 		_DOLIT 	'_'	// replace non-printables
 1571      5F000000 
ARM GAS  forth.s 			page 130


 1572              	TCHA1:
 1573 3568 1B290000 		  _UNNEST
 1574              	
 1575              	/************************
 1576              	    DEPTH	( -- n )
 1577              	 	Return the depth of
 1578              		the data stack.
 1579              	***********************/
 1580 356c 24350000 		_HEADER DEPTH,5,"DEPTH"
 1580      05444550 
 1580      544800BF 
 1581 3578 4FF68062 		_MOV32 T2,SPP 
 1581      C2F20102 
 1582 3580 A2EB0702 		SUB	T2,T2,DSP
 1583 3584 47F8046D 		_PUSH
 1584 3588 4FEAA206 		ASR	TOS,T2,#2
 1585 358c FFF7C2B9 		_NEXT
 1586              	
 1587              	/*****************************
 1588              	    PICK	( ... +n -- ... w )
 1589              	 	Copy the nth stack item 
 1590              		to tos.
 1591              	******************************/
 1592 3590 70350000 		_HEADER PICK,4,"PICK"
 1592      04504943 
 1592      4B0000BF 
 1593 359c 504700BF 		_NEST
 1594 35a0 752D0000 		_ADR	ONEP
 1595 35a4 E92D0000 		_ADR	CELLS
 1596 35a8 212C0000 		_ADR	SPAT
 1597 35ac 192D0000 		_ADR	PLUS
 1598 35b0 612B0000 		_ADR	AT
 1599 35b4 1B290000 		_UNNEST
 1600              	
 1601              	/*********************
 1602              	  Memory access
 1603              	*********************/
 1604              	
 1605              	/*************************
 1606              	    HERE	( -- a )
 1607              	 	Return the top of
 1608              		the code dictionary.
 1609              	*************************/
 1610 35b8 94350000 		_HEADER HERE,4,"HERE"
 1610      04484552 
 1610      450000BF 
 1611 35c4 504700BF 		_NEST
 1612 35c8 F1310000 		_ADR	CPP
 1613 35cc 612B0000 		_ADR	AT
 1614 35d0 1B290000 		_UNNEST
 1615              	
 1616              	/***************************	
 1617              	    PAD	 ( -- a )
 1618              	 	Return the address of 
 1619              		a temporary buffer.
 1620              	***************************/
 1621 35d4 BC350000 		_HEADER PAD,3,"PAD"
ARM GAS  forth.s 			page 131


 1621      03504144 
 1622 35dc 504700BF 		_NEST
 1623 35e0 C5350000 		_ADR	HERE
 1624 35e4 DB2A0000 		_DOLIT 80
 1624      50000000 
 1625 35ec 192D0000 		_ADR PLUS 
 1626 35f0 1B290000 		_UNNEST
 1627              	
 1628              	/***********************
 1629              	    TIB	 ( -- a )
 1630              	 	Return the address 
 1631              		of the terminal 
 1632              		input buffer.
 1633              	************************/
 1634 35f4 D8350000 		_HEADER TIB,3,"TIB"
 1634      03544942 
 1635 35fc 47F8046D 		_PUSH
 1636 3600 266B     		ldr TOS,[UP,#TIBUF]
 1637 3602 FFF787B9 		_NEXT
 1638              	
 1639              	/*************************
 1640              	    @EXECUTE	( a -- )
 1641              	 	Execute vector stored
 1642              		in address a.
 1643              	*************************/
 1644 3606 F8350000 		_HEADER ATEXE,8,"@EXECUTE"
 1644      08404558 
 1644      45435554 
 1644      4500
 1645 3614 3500     		MOVS	WP,TOS
 1646 3616 57F8046B 		_POP
 1647 361a 2D68     		LDR	WP,[WP]
 1648 361c 45F00105 		ORR	WP,WP,#1
 1649 3620 18BF     	    IT NE 
 1650 3622 2847     		BXNE	WP
 1651 3624 FFF776B9 		_NEXT
 1652              	
 1653              	/*******************************
 1654              	    CMOVE	( b1 b2 u -- )
 1655              	 	Copy u bytes from b1 to b2.
 1656              	********************************/
 1657 3628 0A360000 		_HEADER CMOVE,5,"CMOVE"
 1657      05434D4F 
 1657      564500BF 
 1658 3634 57F8042B 		LDR	T2,[DSP],#4
 1659 3638 57F8043B 		LDR	T3,[DSP],#4
 1660 363c 03E0     		B CMOV1
 1661              	CMOV0:
 1662 363e 13F8015B 		LDRB	WP,[T3],#1
 1663 3642 02F8015B 		STRB	WP,[T2],#1
 1664              	CMOV1:
 1665 3646 3600     		MOVS	TOS,TOS
 1666 3648 02D0     		BEQ	CMOV2
 1667 364a A6F10106 		SUB	TOS,TOS,#1
 1668 364e F6E7     		B CMOV0
 1669              	CMOV2:
 1670 3650 57F8046B 		_POP
ARM GAS  forth.s 			page 132


 1671 3654 FFF75EB9 		_NEXT
 1672              	
 1673              	/***************************
 1674              	    MOVE	( a1 a2 u -- )
 1675              	 	Copy u words from a1 to a2.
 1676              	*******************************/
 1677 3658 2C360000 		_HEADER MOVE,4,"MOVE"
 1677      044D4F56 
 1677      450000BF 
 1678 3664 4FF00400 		MOV T0,#4 
 1679 3668 06F10306 		ADD TOS,#3 
 1680 366c 26F00306 		BIC TOS,#3
 1681 3670 57F8041B 		LDR	T1,[DSP],#4 // dest
 1682 3674 57F8042B 		LDR	T2,[DSP],#4 // src 
 1683 3678 8A42     		CMP T2,T1 
 1684 367a 08D5     		BPL MOVE1
 1685 367c 6FF00300 		MOV T0,#-4 
 1686 3680 3144     		ADD T1,TOS
 1687 3682 3244     		ADD T2,TOS 
 1688 3684 01E0     		B MOVE3
 1689              	MOVE0:
 1690 3686 1568     		LDR	WP,[T2]
 1691 3688 0D60     		STR	WP,[T1]
 1692              	MOVE3: 
 1693 368a 0144     		ADD T1,T0 
 1694 368c 0244     		ADD T2,T0 
 1695              	MOVE1:
 1696 368e 3600     		MOVS TOS,TOS
 1697 3690 02D0     		BEQ	MOVE2
 1698 3692 A6F10406 		SUB	TOS,TOS,#4
 1699 3696 F6E7     		B MOVE0
 1700              	MOVE2:
 1701 3698 57F8046B 		_POP
 1702 369c FFF73AB9 		_NEXT
 1703              	
 1704              	/**************************
 1705              	    FILL	( b u c -- )
 1706              	 	Fill u bytes of character
 1707              		c to area beginning at b.
 1708              	******************************/
 1709 36a0 5C360000 		_HEADER FILL,4,"FILL"
 1709      0446494C 
 1709      4C0000BF 
 1710 36ac 03CF     		LDMFD DSP!,{T0,T1} 
 1711 36ae 0000     		MOVS T0,T0 
 1712 36b0 03D0     		BEQ FILL2
 1713              	FILL1:
 1714 36b2 01F8016B 		STRB	TOS,[T1],#1
 1715 36b6 0138     		SUBS	T0,T0,#1
 1716 36b8 FBD1     		BNE FILL1
 1717              	FILL2:
 1718 36ba 57F8046B 		_POP
 1719 36be FFF729B9 		_NEXT
 1720              	
 1721              	/*****************************
 1722              	    PACK$	( b u a -- a )
 1723              	 	Build a counted word with
ARM GAS  forth.s 			page 133


 1724              		u characters from b. 
 1725              		Null fill.
 1726              	*****************************/
 1727 36c2 A4360000 		_HEADER PACKS,5,"PACK$"
 1727      05504143 
 1727      4B24
 1728 36cc 504700BF 		_NEST
 1729 36d0 11350000 		_ADR	ALGND
 1730 36d4 552C0000 		_ADR	DUPP
 1731 36d8 D12B0000 		_ADR	TOR		// strings only on cell boundary
 1732 36dc 792C0000 		_ADR	OVER
 1733 36e0 192D0000 		_ADR	PLUS
 1734 36e4 752D0000 		_ADR	ONEP 
 1735 36e8 DB2A0000 		_DOLIT 	0xFFFFFFFC
 1735      FCFFFFFF 
 1736 36f0 992C0000 		_ADR	ANDD			// count mod cell
 1737 36f4 DB2A0000 		_DOLIT 	0
 1737      00000000 
 1738 36fc 652C0000 		_ADR	SWAP
 1739 3700 4D2B0000 		_ADR	STORE			// null fill cell
 1740 3704 BD2B0000 		_ADR	RAT
 1741 3708 8D2E0000 		_ADR	DDUP
 1742 370c 6D2B0000 		_ADR	CSTOR
 1743 3710 752D0000 		_ADR	ONEP			// save count
 1744 3714 652C0000 		_ADR	SWAP
 1745 3718 35360000 		_ADR	CMOVE
 1746 371c 8D2B0000 		_ADR	RFROM
 1747 3720 1B290000 		_UNNEST   			// move string
 1748              	
 1749              	/***********************************
 1750              	  Numeric output, single precision
 1751              	***********************************/
 1752              	
 1753              	/**************************
 1754              	    DIGIT	( u -- c )
 1755              	 	Convert digit u to 
 1756              		a character.
 1757              	***************************/
 1758 3724 C6360000 		_HEADER DIGIT,5,"DIGIT"
 1758      05444947 
 1758      495400BF 
 1759 3730 504700BF 		_NEST
 1760 3734 DB2A0000 		_DOLIT 9
 1760      09000000 
 1761 373c 792C0000 		_ADR	OVER
 1762 3740 F12F0000 		_ADR	LESS
 1763 3744 DB2A0000 		_DOLIT	7
 1763      07000000 
 1764 374c 992C0000 		_ADR	ANDD
 1765 3750 192D0000 		_ADR	PLUS
 1766 3754 DB2A0000 		_DOLIT	'0'
 1766      30000000 
 1767 375c 192D0000 		_ADR	PLUS 
 1768 3760 1B290000 		_UNNEST
 1769              	
 1770              	/*********************************
 1771              	    EXTRACT	( ud base -- ud c )
ARM GAS  forth.s 			page 134


 1772              	 	Extract the least significant
 1773              		digit from positive double.
 1774              	**********************************/
 1775 3764 28370000 		_HEADER EXTRC,7,"EXTRACT"
 1775      07455854 
 1775      52414354 
 1776 3770 504700BF 		_NEST
 1777 3774 99330000 		_ADR	DSLMOD
 1778 3778 3D2E0000 		_ADR	ROT
 1779 377c 31370000 		_ADR	DIGIT
 1780 3780 1B290000 		_UNNEST
 1781              	
 1782              	/***************************
 1783              	    <#	  ( -- )
 1784              	 	Initiate the numeric
 1785              		output process.
 1786              	****************************/
 1787 3784 68370000 		_HEADER BDIGS,2,"<#"
 1787      023C2300 
 1788 378c 504700BF 		_NEST
 1789 3790 DD350000 		_ADR	PAD
 1790 3794 C5310000 		_ADR	HLD
 1791 3798 4D2B0000 		_ADR	STORE
 1792 379c 1B290000 		_UNNEST
 1793              	
 1794              	/*********************************
 1795              	    HOLD	( c -- )
 1796              	 	Insert a character into the 
 1797              		numeric output string.
 1798              	**********************************/
 1799 37a0 88370000 		_HEADER HOLD,4,"HOLD"
 1799      04484F4C 
 1799      440000BF 
 1800 37ac 504700BF 		_NEST
 1801 37b0 C5310000 		_ADR	HLD
 1802 37b4 612B0000 		_ADR	AT
 1803 37b8 852D0000 		_ADR	ONEM
 1804 37bc 552C0000 		_ADR	DUPP
 1805 37c0 C5310000 		_ADR	HLD
 1806 37c4 4D2B0000 		_ADR	STORE
 1807 37c8 6D2B0000 		_ADR	CSTOR
 1808 37cc 1B290000 		_UNNEST
 1809              	
 1810              	/***********************
 1811              	    #	   ( ud -- ud )
 1812              	 	Extract one digit 
 1813              		from ud and append 
 1814              		the digit to output 
 1815              		string.
 1816              	*************************/
 1817 37d0 A4370000 		_HEADER DIG,1,"#"
 1817      012300BF 
 1818 37d8 504700BF 		_NEST
 1819 37dc 49310000 		_ADR	BASE
 1820 37e0 612B0000 		_ADR	AT
 1821 37e4 71370000 		_ADR	EXTRC
 1822 37e8 AD370000 		_ADR	HOLD
ARM GAS  forth.s 			page 135


 1823 37ec 1B290000 		_UNNEST
 1824              	
 1825              	/***************************
 1826              	    #S	  ( ud -- 0 )
 1827              	 	Convert ud until all 
 1828              		digits are added to 
 1829              		the output string.
 1830              	***************************/
 1831 37f0 D4370000 		_HEADER DIGS,2,"#S"
 1831      02235300 
 1832 37f8 504700BF 		_NEST
 1833              	DIGS1:
 1834 37fc D9370000 	    _ADR	DIG
 1835 3800 8D2E0000 		_ADR	DDUP
 1836 3804 AD2C0000 		_ADR    ORR 
 1837 3808 1B2B0000 		_QBRAN 	DIGS2
 1837      18380000 
 1838 3810 2F2B0000 		_BRAN	DIGS1
 1838      FC370000 
 1839              	DIGS2:
 1840 3818 452C0000 		 _ADR DROP 
 1841 381c 1B290000 		 _UNNEST
 1842              	
 1843              	/*********************
 1844              	    SIGN	( n -- )
 1845              	 	Add a minus sign
 1846              		to the numeric
 1847              		output string.
 1848              	*********************/
 1849 3820 F4370000 		_HEADER SIGN,4,"SIGN"
 1849      04534947 
 1849      4E0000BF 
 1850 382c 504700BF 		_NEST
 1851 3830 892C0000 		_ADR	ZLESS
 1852 3834 1B2B0000 		_QBRAN	SIGN1
 1852      48380000 
 1853 383c DB2A0000 		_DOLIT '-'
 1853      2D000000 
 1854 3844 AD370000 		_ADR	HOLD
 1855              	SIGN1:
 1856 3848 1B290000 		  _UNNEST
 1857              	
 1858              	/*************************
 1859              	    #>  ( w -- b u )
 1860              	 	Prepare the output 
 1861              		word to be TYPE'd.
 1862              	************************/
 1863 384c 24380000 		_HEADER EDIGS,2,"#>"
 1863      02233E00 
 1864 3854 504700BF 		_NEST
 1865 3858 452C0000 		_ADR	DROP
 1866 385c C5310000 		_ADR	HLD
 1867 3860 612B0000 		_ADR	AT
 1868 3864 DD350000 		_ADR	PAD
 1869 3868 792C0000 		_ADR	OVER
 1870 386c 292D0000 		_ADR	SUBB
 1871 3870 1B290000 		_UNNEST
ARM GAS  forth.s 			page 136


 1872              	
 1873              	/**************************
 1874              	    str	 ( n -- b u )
 1875              	 	Convert a signed 
 1876              		integer to a numeric 
 1877              		string.
 1878              	hidden word used by compiler
 1879              	***************************/
 1880              	STRR:
 1881 3874 504700BF 		_NEST
 1882 3878 51330000 		_ADR 	STOD 
 1883 387c 552C0000 		_ADR	DUPP
 1884 3880 D12B0000 		_ADR	TOR
 1885 3884 C12E0000 		_ADR	DABS
 1886 3888 8D370000 		_ADR	BDIGS
 1887 388c F9370000 		_ADR	DIGS
 1888 3890 8D2B0000 		_ADR	RFROM
 1889 3894 2D380000 		_ADR	SIGN
 1890 3898 55380000 		_ADR	EDIGS
 1891 389c 1B290000 		_UNNEST
 1892              	
 1893              	/*************************
 1894              	    HEX	 ( -- )
 1895              	 	Use radix 16 as 
 1896              		base for numeric 
 1897              		conversions.
 1898              	*************************/
 1899 38a0 50380000 		_HEADER HEX,3,"HEX"
 1899      03484558 
 1900 38a8 504700BF 		_NEST
 1901 38ac DB2A0000 		_DOLIT 16
 1901      10000000 
 1902 38b4 49310000 		_ADR	BASE
 1903 38b8 4D2B0000 		_ADR	STORE
 1904 38bc 1B290000 		_UNNEST
 1905              	
 1906              	/**************************
 1907              		BIN ( -- )
 1908              		Use radix 2 as 
 1909              		base for numeric 
 1910              		conversion 
 1911              	**************************/
 1912 38c0 A4380000 		_HEADER BIN,3,"BIN"
 1912      0342494E 
 1913 38c8 504700BF 		_NEST 
 1914 38cc DB2A0000 		_DOLIT 2 
 1914      02000000 
 1915 38d4 49310000 		_ADR BASE 
 1916 38d8 4D2B0000 		_ADR STORE
 1917 38dc 1B290000 		_UNNEST 
 1918              	
 1919              	/************************
 1920              	    DECIMAL	( -- )
 1921              	 	Use radix 10 as base
 1922              		for numeric conversions.
 1923              	*************************/
 1924 38e0 C4380000 		_HEADER DECIM,7,"DECIMAL"
ARM GAS  forth.s 			page 137


 1924      07444543 
 1924      494D414C 
 1925 38ec 504700BF 		_NEST
 1926 38f0 DB2A0000 		_DOLIT 10
 1926      0A000000 
 1927 38f8 49310000 		_ADR	BASE
 1928 38fc 4D2B0000 		_ADR	STORE
 1929 3900 1B290000 		_UNNEST
 1930              	
 1931              	/************************************
 1932              	  Numeric input, single precision
 1933              	***********************************/
 1934              	
 1935              	/***********************************
 1936              	    DIGIT?	( c base -- u t )
 1937              	 	Convert a character to its 
 1938              		numeric value. A flag 
 1939              		indicates success.
 1940              	**********************************/
 1941 3904 E4380000 		_HEADER DIGTQ,6,"DIGIT?"
 1941      06444947 
 1941      49543F00 
 1942 3910 504700BF 		_NEST
 1943 3914 D12B0000 		_ADR	TOR
 1944 3918 DB2A0000 		_DOLIT 	'0'
 1944      30000000 
 1945 3920 292D0000 		_ADR	SUBB
 1946 3924 DB2A0000 		_DOLIT 9
 1946      09000000 
 1947 392c 792C0000 		_ADR	OVER
 1948 3930 F12F0000 		_ADR	LESS
 1949 3934 1B2B0000 		_QBRAN	DGTQ1
 1949      5C390000 
 1950 393c DB2A0000 		_DOLIT 7
 1950      07000000 
 1951 3944 292D0000 		_ADR	SUBB
 1952 3948 552C0000 		_ADR	DUPP
 1953 394c DB2A0000 		_DOLIT	10
 1953      0A000000 
 1954 3954 F12F0000 		_ADR	LESS
 1955 3958 AD2C0000 		_ADR	ORR
 1956              	DGTQ1:
 1957 395c 552C0000 		_ADR	DUPP
 1958 3960 8D2B0000 		_ADR	RFROM
 1959 3964 D92F0000 		_ADR	ULESS
 1960 3968 1B290000 		_UNNEST
 1961              	
 1962              	/***********************************
 1963              	 parse digits 
 1964              	  d digits count 
 1965              	  n parsed integer
 1966              	  a+ updated pointer  
 1967              	************************************/
 1968              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1969 396c 504700BF 	    _NEST
 1970 3970 49310000 	    _ADR BASE 
 1971 3974 612B0000 	    _ADR AT 
ARM GAS  forth.s 			page 138


 1972 3978 D12B0000 	    _ADR TOR  
 1973 397c A9300000 	1:  _ADR COUNT 
 1974 3980 BD2B0000 	    _ADR RAT 
 1975 3984 11390000 	    _ADR DIGTQ
 1976 3988 1B2B0000 	    _QBRAN 3f
 1976      DC390000 
 1977 3990 3D2E0000 	    _ADR ROT
 1978 3994 552C0000 		_ADR DUPP 
 1979 3998 DB2A0000 		_DOLIT 0XCCCCCCC // limit before overflow 
 1979      CCCCCC0C 
 1980 39a0 21300000 		_ADR GREAT 
 1981 39a4 1B2B0000 		_QBRAN 2f 
 1981      B8390000 
 1982 39ac 512E0000 		_ADR NROT 
 1983 39b0 2F2B0000 		_BRAN 3f  // too big 
 1983      DC390000 
 1984 39b8 BD2B0000 	2:  _ADR RAT 
 1985 39bc 392D0000 	    _ADR STAR 
 1986 39c0 192D0000 	    _ADR PLUS
 1987 39c4 652C0000 	    _ADR SWAP 
 1988 39c8 3D2E0000 	    _ADR ROT 
 1989 39cc 752D0000 	    _ADR ONEP 
 1990 39d0 512E0000 	    _ADR NROT
 1991 39d4 2F2B0000 	    _BRAN 1b 
 1991      7C390000 
 1992 39dc 452C0000 	3:  _ADR DROP 
 1993 39e0 852D0000 	    _ADR ONEM  // decrement a 
 1994 39e4 8D2B0000 	    _ADR RFROM 
 1995 39e8 452C0000 	    _ADR DROP 
 1996 39ec 1B290000 	    _UNNEST 
 1997              	
 1998              	/**************************
 1999              	 CHAR? 
 2000              	 check for charcter c 
 2001              	 move pointer if *a==c  
 2002              	**************************/
 2003              	CHARQ: // ( a c -- a+ t | a f )
 2004 39f0 3868     	    ldr T0,[DSP]
 2005 39f2 10F8011B 	    ldrb T1,[T0],#1 
 2006 39f6 3246     	    mov T2,TOS 
 2007 39f8 86EA0606 	    eor TOS,TOS
 2008 39fc 9142     	    cmp T1,T2
 2009 39fe 02D1     	    bne 1f 
 2010 3a00 3860     	    str T0,[DSP]
 2011 3a02 6FEA0606 	    mvn TOS,TOS  
 2012 3a06 FEF785BF 	1:  _NEXT
 2013              	
 2014              	/*********************************
 2015              	   NEG? ( a -- a|a+  f|t )
 2016              	   skip '-'|'+' return -1 if '-' 
 2017              	   else return 0 
 2018              	*********************************/
 2019              	NEGQ: 
 2020 3a0a 504700BF 	    _NEST 
 2021 3a0e DB2A0000 	    _DOLIT '-' 
 2021      2D000000 
 2022 3a16 F1390000 	    _ADR CHARQ
ARM GAS  forth.s 			page 139


 2023 3a1a 552C0000 	    _ADR DUPP  
 2024 3a1e 1B2B0000 	    _QBRAN 1f
 2024      2E3A0000 
 2025 3a26 2F2B0000 	    _BRAN 2f
 2025      463A0000 
 2026 3a2e 652C0000 	1:  _ADR SWAP 
 2027 3a32 DB2A0000 	    _DOLIT '+'
 2027      2B000000 
 2028 3a3a F1390000 	    _ADR CHARQ
 2029 3a3e 452C0000 	    _ADR DROP  
 2030 3a42 652C0000 		_ADR SWAP 
 2031 3a46 1B290000 	2:  _UNNEST 
 2032              	
 2033              	
 2034              	/**********************************
 2035              	    INT?	( a -- n T | a F )
 2036              	 	parse string  at 'a' for 
 2037              		integer. Push a flag on TOS.
 2038              		integer form:
 2039              			[-]hex_digit+  | 
 2040              			$[-]hex_digit+ |
 2041              			%[-]bin_digit+ | 
 2042              			[-]dec_digit+ 
 2043              	**********************************/
 2044 3a4a 08390000 		_HEADER INTQ,4,"INT?"
 2044      04494E54 
 2044      3F00
 2045 3a54 504700BF 		_NEST
 2046              	// save BASE 	
 2047 3a58 49310000 		_ADR	BASE
 2048 3a5c 612B0000 		_ADR	AT
 2049 3a60 D12B0000 		_ADR	TOR
 2050 3a64 DB2A0000 		_DOLIT	0      // a 0 
 2050      00000000 
 2051 3a6c 792C0000 		_ADR	OVER   // a 0 a 
 2052 3a70 A9300000 		_ADR	COUNT  // a 0 a+ cnt 
 2053 3a74 652C0000 		_ADR    SWAP   
 2054 3a78 DB2A0000 		_DOLIT  '$' 
 2054      24000000 
 2055 3a80 F1390000 		_ADR    CHARQ 
 2056 3a84 1B2B0000 		_QBRAN  0f 
 2056      983A0000 
 2057              	// hexadecimal number 
 2058 3a8c A9380000 		_ADR    HEX
 2059 3a90 2F2B0000 		_BRAN   1f 
 2059      B03A0000 
 2060 3a98 DB2A0000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2060      25000000 
 2061 3aa0 F1390000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2062 3aa4 1B2B0000 		_QBRAN  2f
 2062      BC3A0000 
 2063 3aac C9380000 		_ADR	BIN 
 2064              	1:	// decrement cnt 
 2065 3ab0 652C0000 	    _ADR	SWAP 
 2066 3ab4 852D0000 		_ADR	ONEM 
 2067 3ab8 652C0000 		_ADR	SWAP  // -- a 0 cnt- a  
 2068              	2: // check if negative number 
ARM GAS  forth.s 			page 140


 2069 3abc 552C0000 		_ADR    DUPP 
 2070 3ac0 0B3A0000 		_ADR    NEGQ 
 2071 3ac4 D12B0000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2072 3ac8 552C0000 		_ADR    DUPP 
 2073 3acc 3D2E0000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2074 3ad0 292D0000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2075 3ad4 1B2B0000 		_QBRAN  2f  
 2075      E83A0000 
 2076 3adc 652C0000 		_ADR    SWAP  // -- a 0 a cnt 
 2077 3ae0 852D0000 		_ADR    ONEM  // -- a 0 a cnt--
 2078 3ae4 652C0000 		_ADR    SWAP   
 2079 3ae8 652C0000 	2:  _ADR    SWAP 
 2080 3aec D12B0000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2081 3af0 DB2A0000 		_DOLIT  0
 2081      00000000 
 2082 3af8 552C0000 		_ADR	DUPP 
 2083 3afc 3D2E0000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2084 3b00 6D390000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2085 3b04 452C0000 		_ADR	DROP // a 0 d n 
 2086 3b08 652C0000 		_ADR	SWAP  // a 0 n d 
 2087 3b0c 8D2B0000 		_ADR	RFROM // a 0 n d cnt  
 2088 3b10 A12F0000 		_ADR	EQUAL // d == cnt ? 
 2089 3b14 1B2B0000 		_QBRAN  5f // digits left, not an integer 
 2089      443B0000 
 2090 3b1c 8D2B0000 	2:	_ADR	RFROM  // sign 
 2091 3b20 1B2B0000 		_QBRAN  3f   // positive integer 
 2091      2C3B0000 
 2092 3b28 392F0000 		_ADR	NEGAT
 2093              	3:	
 2094 3b2c 512E0000 		_ADR	NROT  // n a 0 
 2095 3b30 652E0000 		_ADR	DDROP // n  
 2096 3b34 DB2A0000 		_DOLIT  -1    // n -1 
 2096      FFFFFFFF 
 2097 3b3c 2F2B0000 		_BRAN   7f  
 2097      4C3B0000 
 2098 3b44 8D2B0000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2099 3b48 652E0000 	    _ADR	DDROP 
 2100              	7: // restore BASE 
 2101 3b4c 8D2B0000 		_ADR	RFROM
 2102 3b50 49310000 		_ADR	BASE
 2103 3b54 4D2B0000 		_ADR	STORE
 2104 3b58 1B290000 		_UNNEST
 2105              	
 2106              	
 2107              	/********************
 2108              	  console I/O
 2109              	********************/
 2110              	
 2111              	/**********************
 2112              	    SPACE	( -- )
 2113              	 	Send the blank 
 2114              		character to 
 2115              		the output device.
 2116              	************************/
 2117 3b5c 4E3A0000 		_HEADER SPACE,5,"SPACE"
 2117      05535041 
 2117      434500BF 
ARM GAS  forth.s 			page 141


 2118 3b68 504700BF 		_NEST
 2119 3b6c D52D0000 		_ADR	BLANK
 2120 3b70 E5290000 		_ADR	EMIT
 2121 3b74 1B290000 		_UNNEST
 2122              	
 2123              	/***************************
 2124              	    SPACES	( +n -- )
 2125              	 	Send n spaces to the 
 2126              		output device.
 2127              	****************************/
 2128 3b78 603B0000 		_HEADER SPACS,6,"SPACES"
 2128      06535041 
 2128      43455300 
 2129 3b84 504700BF 		_NEST
 2130 3b88 DB2A0000 		_DOLIT	0
 2130      00000000 
 2131 3b90 39300000 		_ADR	MAX
 2132 3b94 D12B0000 		_ADR	TOR
 2133 3b98 2F2B0000 		_BRAN	CHAR2
 2133      A43B0000 
 2134              	CHAR1:
 2135 3ba0 693B0000 		_ADR	SPACE
 2136              	CHAR2:
 2137 3ba4 FD2A0000 		_DONXT	CHAR1
 2137      A03B0000 
 2138 3bac 1B290000 		_UNNEST
 2139              	
 2140              	/***********************
 2141              	    TYPE	( b u -- )
 2142              	 	Output u characters 
 2143              		from b.
 2144              	************************/
 2145 3bb0 7C3B0000 		_HEADER TYPEE,4,"TYPE"
 2145      04545950 
 2145      450000BF 
 2146 3bbc 504700BF 		_NEST
 2147 3bc0 D12B0000 		_ADR  TOR   // ( a+1 -- R: u )
 2148 3bc4 2F2B0000 		_BRAN	TYPE2
 2148      D83B0000 
 2149              	TYPE1:  
 2150 3bcc A9300000 		_ADR  COUNT
 2151 3bd0 2D350000 		_ADR TCHAR
 2152 3bd4 E5290000 		_ADR EMIT
 2153              	TYPE2:  
 2154 3bd8 FD2A0000 		_DONXT	TYPE1
 2154      CC3B0000 
 2155 3be0 452C0000 		_ADR	DROP
 2156 3be4 1B290000 		_UNNEST
 2157              	
 2158              	/***************************
 2159              	    CR	  ( -- )
 2160              	 	Output a carriage return
 2161              		and a line feed.
 2162              	****************************/
 2163 3be8 B43B0000 		_HEADER CR,2,"CR"
 2163      02435200 
 2164 3bf0 504700BF 		_NEST
ARM GAS  forth.s 			page 142


 2165 3bf4 DB2A0000 		_DOLIT	CRR
 2165      0D000000 
 2166 3bfc E5290000 		_ADR	EMIT
 2167 3c00 DB2A0000 		_DOLIT	LF
 2167      0A000000 
 2168 3c08 E5290000 		_ADR	EMIT
 2169 3c0c 1B290000 		_UNNEST
 2170              	
 2171              	/******************************************
 2172              	  do_$	( -- a )
 2173              	  Return the address of a compiled string.
 2174              	  adjust return address to skip over it.
 2175              	hidden word used by compiler. 
 2176              	******************************************/
 2177              	DOSTR:
 2178 3c10 504700BF 		_NEST     
 2179              	/* compiled string address is 2 levels deep */
 2180 3c14 8D2B0000 		_ADR	RFROM	// { -- a1 }
 2181 3c18 8D2B0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2182 3c1c 552C0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2183 3c20 A9300000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2184 3c24 192D0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2185 3c28 11350000 		_ADR	ALGND	//  end of string
 2186              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2187 3c2c D12B0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2188 3c30 652C0000 		_ADR	SWAP	//  count tugged
 2189 3c34 D12B0000 		_ADR	TOR     //  ( -- a2) is string address
 2190 3c38 1B290000 		_UNNEST
 2191              	
 2192              	/******************************************
 2193              	    $"|	( -- a )
 2194              	 	Run time routine compiled by _". 
 2195              		Return address of a compiled string.
 2196              	hidden word used by compiler
 2197              	*****************************************/
 2198              	STRQP:
 2199 3c3c 504700BF 		_NEST
 2200 3c40 113C0000 		_ADR	DOSTR
 2201 3c44 1B290000 		_UNNEST			// force a call to dostr
 2202              	
 2203              	/*******************************
 2204              	    .$	( a -- )
 2205              	 	Run time routine of ." 
 2206              		Output a compiled string.
 2207              	hidden word used by compiler
 2208              	*******************************/
 2209              	DOTST:
 2210 3c48 504700BF 		_NEST
 2211 3c4c A9300000 		_ADR	COUNT // ( -- a+1 c )
 2212 3c50 BD3B0000 		_ADR	TYPEE
 2213 3c54 1B290000 		_UNNEST
 2214              	
 2215              	/**********************
 2216              	    ."|	( -- )
 2217              	 	Run time routine of ." 
 2218              		Output a compiled string.
 2219              	hidden word used by compiler
ARM GAS  forth.s 			page 143


 2220              	*****************************/
 2221              	DOTQP:
 2222 3c58 504700BF 		_NEST
 2223 3c5c 113C0000 		_ADR	DOSTR
 2224 3c60 493C0000 		_ADR	DOTST
 2225 3c64 1B290000 		_UNNEST
 2226              	
 2227              	/******************************
 2228              	    .R	  ( n +n -- )
 2229              	 	Display an integer in a 
 2230              		field of n columns, 
 2231              		right justified.
 2232              	*******************************/
 2233 3c68 EC3B0000 		_HEADER DOTR,2,".R"
 2233      022E5200 
 2234 3c70 504700BF 		_NEST
 2235 3c74 D12B0000 		_ADR	TOR
 2236 3c78 75380000 		_ADR	STRR
 2237 3c7c 8D2B0000 		_ADR	RFROM
 2238 3c80 792C0000 		_ADR	OVER
 2239 3c84 292D0000 		_ADR	SUBB
 2240 3c88 853B0000 		_ADR	SPACS
 2241 3c8c BD3B0000 		_ADR	TYPEE
 2242 3c90 1B290000 		_UNNEST
 2243              	
 2244              	/*************************
 2245              	    U.R	 ( u +n -- )
 2246              	 	Display an unsigned 
 2247              		integer in n column, 
 2248              		right justified.
 2249              	***************************/
 2250 3c94 6C3C0000 		_HEADER UDOTR,3,"U.R"
 2250      03552E52 
 2251 3c9c 504700BF 		_NEST
 2252 3ca0 652C0000 		_ADR	SWAP 
 2253 3ca4 51330000 		_ADR 	STOD 
 2254 3ca8 3D2E0000 		_ADR	ROT 
 2255 3cac D12B0000 		_ADR	TOR
 2256 3cb0 8D370000 		_ADR	BDIGS
 2257 3cb4 F9370000 		_ADR	DIGS
 2258 3cb8 55380000 		_ADR	EDIGS
 2259 3cbc 8D2B0000 		_ADR	RFROM
 2260 3cc0 792C0000 		_ADR	OVER
 2261 3cc4 292D0000 		_ADR	SUBB
 2262 3cc8 853B0000 		_ADR	SPACS
 2263 3ccc BD3B0000 		_ADR	TYPEE
 2264 3cd0 1B290000 		_UNNEST
 2265              	
 2266              	/************************
 2267              	    U.	  ( u -- )
 2268              	 	Display an unsigned 
 2269              		integer in free format.
 2270              	***************************/
 2271 3cd4 983C0000 		_HEADER UDOT,2,"U."
 2271      02552E00 
 2272 3cdc 504700BF 		_NEST
 2273 3ce0 51330000 		_ADR 	STOD 
ARM GAS  forth.s 			page 144


 2274 3ce4 8D370000 		_ADR	BDIGS
 2275 3ce8 F9370000 		_ADR	DIGS
 2276 3cec 55380000 		_ADR	EDIGS
 2277 3cf0 693B0000 		_ADR	SPACE
 2278 3cf4 BD3B0000 		_ADR	TYPEE
 2279 3cf8 1B290000 		_UNNEST
 2280              	
 2281              	/************************
 2282              	    .	   ( w -- )
 2283              	 	Display an integer 
 2284              		in free format, 
 2285              		preceeded by a space.
 2286              	**************************/
 2287 3cfc D83C0000 		_HEADER DOT,1,"."
 2287      012E00BF 
 2288 3d04 504700BF 		_NEST
 2289 3d08 49310000 		_ADR	BASE
 2290 3d0c 612B0000 		_ADR	AT
 2291 3d10 DB2A0000 		_DOLIT 10
 2291      0A000000 
 2292 3d18 C12C0000 		_ADR	XORR			// ?decimal
 2293 3d1c 1B2B0000 		_QBRAN	DOT1
 2293      2C3D0000 
 2294 3d24 DD3C0000 		_ADR	UDOT
 2295 3d28 1B290000 		_UNNEST			// no,display unsigned
 2296              	DOT1:
 2297 3d2c 75380000 	    _ADR	STRR
 2298 3d30 693B0000 		_ADR	SPACE
 2299 3d34 BD3B0000 		_ADR	TYPEE
 2300 3d38 1B290000 		_UNNEST			// yes, display signed
 2301              	
 2302              	/*************************
 2303              	   D. ( d -- )
 2304              	   display double integer 
 2305              	**************************/
 2306 3d3c 003D0000 		_HEADER DDOT,2,"D."
 2306      02442E00 
 2307 3d44 504700BF 		_NEST 
 2308 3d48 552C0000 		_ADR DUPP 
 2309 3d4c D12B0000 		_ADR TOR 
 2310 3d50 C12E0000 		_ADR DABS 
 2311 3d54 8D370000 		_ADR BDIGS
 2312 3d58 F9370000 		_ADR DIGS 
 2313 3d5c 8D2B0000 		_ADR RFROM
 2314 3d60 2D380000 		_ADR SIGN 
 2315 3d64 55380000 		_ADR EDIGS
 2316 3d68 693B0000 		_ADR SPACE 
 2317 3d6c BD3B0000 		_ADR TYPEE 
 2318 3d70 1B290000 		_UNNEST 
 2319              	
 2320              	
 2321              	/***********************
 2322              		H. ( w -- )
 2323              		display integer 
 2324              		in hexadecimal 
 2325              	*********************/
 2326 3d74 403D0000 		_HEADER HDOT,2,"H."
ARM GAS  forth.s 			page 145


 2326      02482E00 
 2327 3d7c 504700BF 		_NEST 
 2328 3d80 49310000 		_ADR BASE
 2329 3d84 612B0000 		_ADR AT 
 2330 3d88 652C0000 		_ADR SWAP
 2331 3d8c A9380000 		_ADR HEX
 2332 3d90 DB2A0000 		_DOLIT 0 
 2332      00000000 
 2333 3d98 8D370000 		_ADR BDIGS
 2334 3d9c F9370000 		_ADR DIGS
 2335 3da0 55380000 		_ADR EDIGS
 2336 3da4 693B0000 		_ADR SPACE
 2337 3da8 DB2A0000 		_DOLIT '$'
 2337      24000000 
 2338 3db0 E5290000 		_ADR EMIT 
 2339 3db4 BD3B0000 		_ADR TYPEE
 2340 3db8 49310000 		_ADR BASE
 2341 3dbc 4D2B0000 		_ADR STORE  
 2342 3dc0 1B290000 		_UNNEST 
 2343              	
 2344              	
 2345              	/***********************
 2346              	    ?	   ( a -- )
 2347              	 	Display the contents
 2348              		in a memory cell.
 2349              	*************************/
 2350 3dc4 783D0000 		_HEADER QUEST,1,"?"
 2350      013F00BF 
 2351 3dcc 504700BF 		_NEST
 2352 3dd0 612B0000 		_ADR	AT
 2353 3dd4 053D0000 		_ADR	DOT
 2354 3dd8 1B290000 		_UNNEST
 2355              	
 2356              	/**************
 2357              	  Parsing
 2358              	***************/
 2359              	
 2360              	/*********************************************
 2361              	    parse	( b u c -- b u delta //  string> )
 2362              	 	Scan word delimited by c. 
 2363              		Return found string and its offset.
 2364              	hidden word used by PARSE
 2365              	**********************************************/
 2366              	PARS:
 2367 3ddc 504700BF 		_NEST
 2368 3de0 55310000 		_ADR	TEMP
 2369 3de4 4D2B0000 		_ADR	STORE
 2370 3de8 792C0000 		_ADR	OVER
 2371 3dec D12B0000 		_ADR	TOR
 2372 3df0 552C0000 		_ADR	DUPP
 2373 3df4 1B2B0000 		_QBRAN	PARS8
 2373      F03E0000 
 2374 3dfc 852D0000 		_ADR	ONEM
 2375 3e00 55310000 		_ADR	TEMP
 2376 3e04 612B0000 		_ADR	AT
 2377 3e08 D52D0000 		_ADR	BLANK
 2378 3e0c A12F0000 		_ADR	EQUAL
ARM GAS  forth.s 			page 146


 2379 3e10 1B2B0000 		_QBRAN	PARS3
 2379      643E0000 
 2380 3e18 D12B0000 		_ADR	TOR
 2381              	PARS1:
 2382 3e1c D52D0000 		_ADR	BLANK
 2383 3e20 792C0000 		_ADR	OVER
 2384 3e24 812B0000 		_ADR	CAT	 // skip leading blanks 
 2385 3e28 292D0000 		_ADR	SUBB
 2386 3e2c 892C0000 		_ADR	ZLESS
 2387 3e30 252F0000 		_ADR	INVER
 2388 3e34 1B2B0000 		_QBRAN	PARS2
 2388      603E0000 
 2389 3e3c 752D0000 		_ADR	ONEP
 2390 3e40 FD2A0000 		_DONXT	PARS1
 2390      1C3E0000 
 2391 3e48 8D2B0000 		_ADR	RFROM
 2392 3e4c 452C0000 		_ADR	DROP
 2393 3e50 DB2A0000 		_DOLIT	0
 2393      00000000 
 2394 3e58 552C0000 		_ADR	DUPP
 2395 3e5c 1B290000 		_UNNEST
 2396              	PARS2:
 2397 3e60 8D2B0000 		_ADR	RFROM
 2398              	PARS3:
 2399 3e64 792C0000 		_ADR	OVER
 2400 3e68 652C0000 		_ADR	SWAP
 2401 3e6c D12B0000 		_ADR	TOR
 2402              	PARS4:
 2403 3e70 55310000 		_ADR	TEMP
 2404 3e74 612B0000 		_ADR	AT
 2405 3e78 792C0000 		_ADR	OVER
 2406 3e7c 812B0000 		_ADR	CAT
 2407 3e80 292D0000 		_ADR	SUBB // scan for delimiter
 2408 3e84 55310000 		_ADR	TEMP
 2409 3e88 612B0000 		_ADR	AT
 2410 3e8c D52D0000 		_ADR	BLANK
 2411 3e90 A12F0000 		_ADR	EQUAL
 2412 3e94 1B2B0000 		_QBRAN	PARS5
 2412      A03E0000 
 2413 3e9c 892C0000 		_ADR	ZLESS
 2414              	PARS5:
 2415 3ea0 1B2B0000 		_QBRAN	PARS6
 2415      C43E0000 
 2416 3ea8 752D0000 		_ADR	ONEP
 2417 3eac FD2A0000 		_DONXT	PARS4
 2417      703E0000 
 2418 3eb4 552C0000 		_ADR	DUPP
 2419 3eb8 D12B0000 		_ADR	TOR
 2420 3ebc 2F2B0000 		_BRAN	PARS7
 2420      D83E0000 
 2421              	PARS6:
 2422 3ec4 8D2B0000 		_ADR	RFROM
 2423 3ec8 452C0000 		_ADR	DROP
 2424 3ecc 552C0000 		_ADR	DUPP
 2425 3ed0 752D0000 		_ADR	ONEP
 2426 3ed4 D12B0000 		_ADR	TOR
 2427              	PARS7:
ARM GAS  forth.s 			page 147


 2428 3ed8 792C0000 		_ADR	OVER
 2429 3edc 292D0000 		_ADR	SUBB
 2430 3ee0 8D2B0000 		_ADR	RFROM
 2431 3ee4 8D2B0000 		_ADR	RFROM
 2432 3ee8 292D0000 		_ADR	SUBB
 2433 3eec 1B290000 		_UNNEST
 2434              	PARS8:
 2435 3ef0 792C0000 		_ADR	OVER
 2436 3ef4 8D2B0000 		_ADR	RFROM
 2437 3ef8 292D0000 		_ADR	SUBB
 2438 3efc 1B290000 		_UNNEST
 2439              	
 2440              	/************************************
 2441              	    PARSE	( c -- b u //  string> )
 2442              	 	Scan input stream and return 
 2443              		counted string delimited by c.
 2444              	************************************/
 2445 3f00 C83D0000 		_HEADER PARSE,5,"PARSE"
 2445      05504152 
 2445      534500BF 
 2446 3f0c 504700BF 		_NEST
 2447 3f10 D12B0000 		_ADR	TOR
 2448 3f14 FD350000 		_ADR	TIB
 2449 3f18 81310000 		_ADR	INN
 2450 3f1c 612B0000 		_ADR	AT
 2451 3f20 192D0000 		_ADR	PLUS			// current input buffer pointer
 2452 3f24 99310000 		_ADR	NTIB
 2453 3f28 612B0000 		_ADR	AT
 2454 3f2c 81310000 		_ADR	INN
 2455 3f30 612B0000 		_ADR	AT
 2456 3f34 292D0000 		_ADR	SUBB			// remaining count
 2457 3f38 8D2B0000 		_ADR	RFROM
 2458 3f3c DD3D0000 		_ADR	PARS
 2459 3f40 81310000 		_ADR	INN
 2460 3f44 61300000 		_ADR	PSTOR
 2461 3f48 1B290000 		_UNNEST
 2462              	
 2463              	/*******************************
 2464              	    .(	  ( -- )
 2465              	 	Output following string 
 2466              		up to next ) .
 2467              	******************************/
 2468 3f4c 043F0000 		_HEADER DOTPR,2,".("
 2468      022E2800 
 2469 3f54 504700BF 		_NEST
 2470 3f58 DB2A0000 		_DOLIT	')'
 2470      29000000 
 2471 3f60 0D3F0000 		_ADR	PARSE
 2472 3f64 BD3B0000 		_ADR	TYPEE
 2473 3f68 1B290000 		_UNNEST
 2474              	
 2475              	/************************
 2476              	    (	   ( -- )
 2477              	 	Ignore following 
 2478              		string up to next )
 2479              		A comment.
 2480              	************************/
ARM GAS  forth.s 			page 148


 2481 3f6c 503F0000 		_HEADER PAREN,IMEDD+1,"("
 2481      812800BF 
 2482 3f74 504700BF 		_NEST
 2483 3f78 DB2A0000 		_DOLIT	')'
 2483      29000000 
 2484 3f80 0D3F0000 		_ADR	PARSE
 2485 3f84 652E0000 		_ADR	DDROP
 2486 3f88 1B290000 		_UNNEST
 2487              	
 2488              	/*******************
 2489              	    \	   ( -- )
 2490              	 	Ignore following 
 2491              		text till the 
 2492              		end of line.
 2493              	********************/
 2494 3f8c 703F0000 		_HEADER BKSLA,IMEDD+1,"\\"
 2494      815C00BF 
 2495 3f94 504700BF 		_NEST
 2496 3f98 99310000 		_ADR	NTIB
 2497 3f9c 612B0000 		_ADR	AT
 2498 3fa0 81310000 		_ADR	INN
 2499 3fa4 4D2B0000 		_ADR	STORE
 2500 3fa8 1B290000 		_UNNEST
 2501              	
 2502              	/******************************
 2503              	    CHAR	( -- c )
 2504              	 	Parse next word and
 2505              		return its first character.
 2506              	*******************************/
 2507 3fac 903F0000 		_HEADER CHAR,4,"CHAR"
 2507      04434841 
 2507      520000BF 
 2508 3fb8 504700BF 		_NEST
 2509 3fbc D52D0000 		_ADR	BLANK
 2510 3fc0 0D3F0000 		_ADR	PARSE
 2511 3fc4 452C0000 		_ADR	DROP
 2512 3fc8 812B0000 		_ADR	CAT
 2513 3fcc 1B290000 		_UNNEST
 2514              	
 2515              	/**********************************
 2516              		[CHAR] ( -- c )
 2517              		immediate version of CHAR 
 2518              	**********************************/
 2519 3fd0 B03F0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2519      C65B4348 
 2519      41525D00 
 2520 3fdc 504700BF 		_NEST 
 2521 3fe0 B93F0000 		_ADR CHAR
 2522 3fe4 05470000 		_ADR LITER 
 2523 3fe8 1B290000 		_UNNEST 
 2524              	
 2525              	/**********************************
 2526              	    WORD	( c -- a //  string> )
 2527              	 	Parse a word from input stream
 2528              		and copy it to code dictionary.
 2529              	***********************************/
 2530 3fec D43F0000 		_HEADER WORDD,4,"WORD"
ARM GAS  forth.s 			page 149


 2530      04574F52 
 2530      440000BF 
 2531 3ff8 504700BF 		_NEST
 2532 3ffc 0D3F0000 		_ADR	PARSE
 2533 4000 C5350000 		_ADR	HERE
 2534 4004 B52D0000 		_ADR	CELLP
 2535 4008 CD360000 		_ADR	PACKS
 2536 400c 1B290000 		_UNNEST
 2537              	
 2538              	/********************************
 2539              	    TOKEN	( -- a //  string> )
 2540              	 	Parse a word from input 
 2541              		stream and copy it to 
 2542              		name dictionary.
 2543              	*********************************/
 2544 4010 F03F0000 		_HEADER TOKEN,5,"TOKEN"
 2544      05544F4B 
 2544      454E00BF 
 2545 401c 504700BF 		_NEST
 2546 4020 D52D0000 		_ADR	BLANK
 2547 4024 F93F0000 		_ADR	WORDD
 2548 4028 11420000 		_ADR	UPPER 
 2549 402c 1B290000 		_UNNEST
 2550              	
 2551              	/**********************
 2552              	  Dictionary search
 2553              	***********************/
 2554              	
 2555              	/*************************
 2556              	    NAME>	( na -- ca )
 2557              	 	Return a code address
 2558              		given a name address.
 2559              	**************************/
 2560 4030 14400000 		_HEADER NAMET,5,"NAME>"
 2560      054E414D 
 2560      453E00BF 
 2561 403c 504700BF 		_NEST
 2562 4040 A9300000 		_ADR	COUNT
 2563 4044 DB2A0000 		_DOLIT	0x1F
 2563      1F000000 
 2564 404c 992C0000 		_ADR	ANDD
 2565 4050 192D0000 		_ADR	PLUS
 2566 4054 11350000 		_ADR	ALGND
 2567 4058 1B290000 		_UNNEST
 2568              	
 2569              	/***************************************
 2570              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2571              	 	Compare u bytes in two strings. 
 2572              		Return 0 if identical.
 2573              	
 2574              	  Picatout 2020-12-01, 
 2575              	    Because of problem with .align 
 2576              		directive that doesn't fill 
 2577              		with zero's I had to change 
 2578              		the "SAME?" and "FIND" 
 2579              	 	words  to do a byte by byte comparison. 
 2580              	****************************************/
ARM GAS  forth.s 			page 150


 2581 405c 34400000 		_HEADER SAMEQ,5,"SAME?"
 2581      0553414D 
 2581      453F00BF 
 2582 4068 504700BF 		_NEST
 2583 406c D12B0000 		_ADR	TOR
 2584 4070 2F2B0000 		_BRAN	SAME2
 2584      B4400000 
 2585              	SAME1:
 2586 4078 792C0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2587 407c BD2B0000 		_ADR	RAT   // a1 a2 a1 u 
 2588 4080 192D0000 		_ADR	PLUS  // a1 a2 a1+u 
 2589 4084 812B0000 		_ADR	CAT	   // a1 a2 c1    		
 2590 4088 792C0000 		_ADR	OVER  // a1 a2 c1 a2 
 2591 408c BD2B0000 		_ADR	RAT    
 2592 4090 192D0000 		_ADR	PLUS    
 2593 4094 812B0000 		_ADR	CAT	  // a1 a2 c1 c2
 2594 4098 292D0000 		_ADR	SUBB  
 2595 409c 292E0000 		_ADR	QDUP
 2596 40a0 1B2B0000 		_QBRAN	SAME2
 2596      B4400000 
 2597 40a8 8D2B0000 		_ADR	RFROM
 2598 40ac 452C0000 		_ADR	DROP
 2599 40b0 1B290000 		_UNNEST	// strings not equal
 2600              	SAME2:
 2601 40b4 FD2A0000 		_DONXT	SAME1
 2601      78400000 
 2602 40bc DB2A0000 		_DOLIT	0
 2602      00000000 
 2603 40c4 1B290000 		_UNNEST	// strings equal
 2604              	
 2605              	/***********************************
 2606              	    FIND	( a na -- ca na | a F )
 2607              	 	Search a vocabulary for a string.
 2608              		Return ca and na if succeeded.
 2609              	hidden word used by NAME?
 2610              	
 2611              	  Picatout 2020-12-01,  
 2612              		 Modified from original. 
 2613              	   See comment for word "SAME?" 
 2614              	************************************/
 2615              	FIND:
 2616 40c8 504700BF 		_NEST
 2617 40cc 652C0000 		_ADR	SWAP			// na a	
 2618 40d0 A9300000 		_ADR	COUNT			// na a+1 count
 2619 40d4 552C0000 		_ADR	DUPP 
 2620 40d8 55310000 		_ADR	TEMP
 2621 40dc 4D2B0000 		_ADR	STORE			// na a+1 count 
 2622 40e0 D12B0000 		_ADR  TOR		// na a+1  R: count  
 2623 40e4 652C0000 		_ADR	SWAP			// a+1 na
 2624              	FIND1:
 2625 40e8 552C0000 		_ADR	DUPP			// a+1 na na
 2626 40ec 1B2B0000 		_QBRAN	FIND6	// end of vocabulary
 2626      40410000 
 2627 40f4 552C0000 		_ADR	DUPP			// a+1 na na
 2628 40f8 812B0000 		_ADR	CAT			// a+1 na name1
 2629 40fc DB2A0000 		_DOLIT	MASKK
 2629      1FFFFFFF 
ARM GAS  forth.s 			page 151


 2630 4104 992C0000 		_ADR	ANDD
 2631 4108 BD2B0000 		_ADR	RAT			// a+1 na name1 count 
 2632 410c C12C0000 		_ADR	XORR			// a+1 na,  same length?
 2633 4110 1B2B0000 		_QBRAN	FIND2
 2633      28410000 
 2634 4118 C52D0000 		_ADR	CELLM			// a+1 la
 2635 411c 612B0000 		_ADR	AT			// a+1 next_na
 2636 4120 2F2B0000 		_BRAN	FIND1			// try next word
 2636      E8400000 
 2637              	FIND2:   
 2638 4128 752D0000 		_ADR	ONEP			// a+1 na+1
 2639 412c 55310000 		_ADR	TEMP
 2640 4130 612B0000 		_ADR	AT			// a+1 na+1 count
 2641 4134 69400000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2642              	FIND3:	
 2643 4138 2F2B0000 		_BRAN	FIND4
 2643      58410000 
 2644              	FIND6:	
 2645 4140 8D2B0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2646 4144 452C0000 		_ADR	DROP			// a+1 0
 2647 4148 652C0000 		_ADR	SWAP			// 0 a+1
 2648 414c 852D0000 		_ADR	ONEM			// 0 a
 2649 4150 652C0000 		_ADR	SWAP			// a 0 
 2650 4154 1B290000 		_UNNEST			// return without a match
 2651              	FIND4:	
 2652 4158 1B2B0000 		_QBRAN	FIND5			// a+1 na+1
 2652      74410000 
 2653 4160 852D0000 		_ADR	ONEM			// a+1 na
 2654 4164 C52D0000 		_ADR	CELLM			// a+4 la
 2655 4168 612B0000 		_ADR	AT			// a+1 next_na
 2656 416c 2F2B0000 		_BRAN	FIND1			// compare next name
 2656      E8400000 
 2657              	FIND5:	
 2658 4174 8D2B0000 		_ADR	RFROM			// a+1 na+1 count
 2659 4178 452C0000 		_ADR	DROP			// a+1 na+1
 2660 417c 652C0000 		_ADR	SWAP			// na+1 a+1
 2661 4180 452C0000 		_ADR	DROP			// na+1
 2662 4184 852D0000 		_ADR	ONEM			// na
 2663 4188 552C0000 		_ADR	DUPP			// na na
 2664 418c 3D400000 		_ADR	NAMET			// na ca
 2665 4190 652C0000 		_ADR	SWAP			// ca na
 2666 4194 1B290000 		_UNNEST			//  return with a match
 2667              	
 2668              	/********************************
 2669              	    NAME?	( a -- ca na | a F )
 2670              	 	Search all context vocabularies 
 2671              		for a string.
 2672              	***********************************/
 2673 4198 60400000 		_HEADER NAMEQ,5,"NAME?"
 2673      054E414D 
 2673      453F00BF 
 2674 41a4 504700BF 		_NEST
 2675 41a8 DD310000 		_ADR	CNTXT
 2676 41ac 612B0000 		_ADR	AT
 2677 41b0 C9400000 		_ADR	FIND
 2678 41b4 1B290000 		_UNNEST
 2679              	
ARM GAS  forth.s 			page 152


 2680              	/********************
 2681              	  console input
 2682              	********************/
 2683              	
 2684              	/****************************
 2685              		ASCIZ ( a -- a+ )
 2686              		convert counted string to 
 2687              		null terminated string 
 2688              		in pad.
 2689              	*****************************/
 2690 41b8 9C410000 		_HEADER ASCIZ,5,"ASCIZ" 
 2690      05415343 
 2690      495A00BF 
 2691 41c4 504700BF 		_NEST 
 2692 41c8 A9300000 		_ADR COUNT
 2693 41cc 552C0000 		_ADR DUPP
 2694 41d0 D12B0000 		_ADR TOR 
 2695 41d4 DD350000 		_ADR PAD 
 2696 41d8 652C0000 		_ADR SWAP
 2697 41dc 65360000 		_ADR MOVE  
 2698 41e0 DD350000 		_ADR PAD 
 2699 41e4 8D2B0000 		_ADR RFROM
 2700 41e8 192D0000 		_ADR PLUS 
 2701 41ec DB2A0000 		_DOLIT 0 
 2701      00000000 
 2702 41f4 652C0000 		_ADR SWAP  
 2703 41f8 6D2B0000 		_ADR CSTOR
 2704 41fc DD350000 		_ADR PAD   
 2705 4200 1B290000 		_UNNEST 
 2706              	
 2707              	/***********************
 2708              		UPPER (cstring -- cstring )
 2709              		convert to upper case in situ
 2710              	*******************************/
 2711 4204 BC410000 		_HEADER UPPER,5,"UPPER"
 2711      05555050 
 2711      455200BF 
 2712 4210 504700BF 		_NEST 
 2713 4214 552C0000 		_ADR DUPP 
 2714 4218 D12B0000 		_ADR TOR 
 2715 421c A9300000 		_ADR COUNT
 2716 4220 DB2A0000 		_DOLIT 0x1f
 2716      1F000000 
 2717 4228 992C0000 		_ADR ANDD
 2718 422c D12B0000 		_ADR TOR 
 2719 4230 2F2B0000 		_BRAN 3f
 2719      84420000 
 2720 4238 552C0000 	1:  _ADR DUPP 
 2721 423c A9300000 		_ADR COUNT 
 2722 4240 552C0000 		_ADR DUPP 
 2723 4244 DB2A0000 		_DOLIT 'a'-1
 2723      60000000 
 2724 424c 21300000 		_ADR GREAT
 2725 4250 1B2B0000 		_QBRAN 2f 
 2725      7C420000 
 2726 4258 552C0000 		_ADR DUPP 
 2727 425c DB2A0000 		_DOLIT 'z'+1 
ARM GAS  forth.s 			page 153


 2727      7B000000 
 2728 4264 F12F0000 		_ADR LESS 
 2729 4268 1B2B0000 		_QBRAN 2f 
 2729      7C420000 
 2730 4270 DB2A0000 		_DOLIT 0x5f  
 2730      5F000000 
 2731 4278 992C0000 		_ADR ANDD
 2732 427c 3D2E0000 	2:	_ADR ROT
 2733 4280 6D2B0000 		_ADR CSTOR
 2734 4284 FD2A0000 	3:  _DONXT 1b
 2734      38420000 
 2735 428c 452C0000 		_ADR DROP 
 2736 4290 8D2B0000 		_ADR RFROM
 2737 4294 1B290000 		_UNNEST 
 2738              	
 2739              	/**************************************
 2740              	   BKSP  ( bot eot cur -- bot eot cur )
 2741              	   Move cursor left by one character.
 2742              	hidden word used by KTAP
 2743              	***************************************/
 2744              	BKSP:
 2745 4298 504700BF 		_NEST
 2746 429c D12B0000 		_ADR	TOR
 2747 42a0 792C0000 		_ADR	OVER
 2748 42a4 8D2B0000 		_ADR	RFROM
 2749 42a8 652C0000 		_ADR	SWAP
 2750 42ac 792C0000 		_ADR	OVER
 2751 42b0 C12C0000 		_ADR	XORR
 2752 42b4 1B2B0000 		_QBRAN	BACK1
 2752      E0420000 
 2753 42bc DB2A0000 		_DOLIT	BKSPP
 2753      08000000 
 2754 42c4 E5290000 		_ADR	EMIT
 2755 42c8 852D0000 		_ADR	ONEM
 2756 42cc D52D0000 		_ADR	BLANK
 2757 42d0 E5290000 		_ADR	EMIT
 2758 42d4 DB2A0000 		_DOLIT	BKSPP
 2758      08000000 
 2759 42dc E5290000 		_ADR	EMIT
 2760              	BACK1:
 2761 42e0 1B290000 		  _UNNEST
 2762              	
 2763              	/****************************************
 2764              	   TAP	 ( bot eot cur c -- bot eot cur )
 2765              	   Accept and echo the key stroke 
 2766              	   and bump the cursor.
 2767              	hidden word used by KTAP 
 2768              	****************************************/
 2769              	TAP:
 2770 42e4 504700BF 		_NEST
 2771 42e8 552C0000 		_ADR	DUPP
 2772 42ec E5290000 		_ADR	EMIT
 2773 42f0 792C0000 		_ADR	OVER
 2774 42f4 6D2B0000 		_ADR	CSTOR
 2775 42f8 752D0000 		_ADR	ONEP
 2776 42fc 1B290000 		_UNNEST
 2777              	
ARM GAS  forth.s 			page 154


 2778              	
 2779              	/*******************************************
 2780              	    kTAP	( bot eot cur c -- bot eot cur )
 2781              	 	Process a key stroke, CR or backspace.
 2782              	hidden word used by ACCEPT 
 2783              	*******************************************/
 2784              	KTAP:
 2785              	TTAP:
 2786 4300 504700BF 		_NEST
 2787 4304 552C0000 		_ADR	DUPP
 2788 4308 DB2A0000 		_DOLIT	CRR
 2788      0D000000 
 2789 4310 C12C0000 		_ADR	XORR
 2790 4314 1B2B0000 		_QBRAN  KTAP2
 2790      44430000 
 2791 431c DB2A0000 		_DOLIT	BKSPP
 2791      08000000 
 2792 4324 C12C0000 		_ADR	XORR
 2793 4328 1B2B0000 		_QBRAN	KTAP1
 2793      3C430000 
 2794 4330 D52D0000 		_ADR	BLANK
 2795 4334 E5420000 		_ADR	TAP
 2796 4338 1B290000 		_UNNEST
 2797              	//	.word	0			// patch
 2798              	KTAP1:
 2799 433c 99420000 		_ADR	BKSP
 2800 4340 1B290000 		_UNNEST
 2801              	KTAP2:
 2802 4344 452C0000 		_ADR	DROP
 2803 4348 652C0000 		_ADR	SWAP
 2804 434c 452C0000 		_ADR	DROP
 2805 4350 552C0000 		_ADR	DUPP
 2806 4354 1B290000 		_UNNEST
 2807              	
 2808              	/************************************
 2809              	    ACCEPT	( b u -- b u )
 2810              	 	Accept characters to input 
 2811              		buffer. Return with actual count.
 2812              	*************************************/
 2813 4358 08420000 		_HEADER ACCEP,6,"ACCEPT"
 2813      06414343 
 2813      45505400 
 2814 4364 504700BF 		_NEST
 2815 4368 792C0000 		_ADR	OVER
 2816 436c 192D0000 		_ADR	PLUS
 2817 4370 792C0000 		_ADR	OVER
 2818              	ACCP1:
 2819 4374 8D2E0000 		_ADR	DDUP
 2820 4378 C12C0000 		_ADR	XORR
 2821 437c 1B2B0000 		_QBRAN	ACCP4
 2821      BC430000 
 2822 4384 C1290000 		_ADR	KEY
 2823 4388 552C0000 		_ADR	DUPP
 2824 438c D52D0000 		_ADR	BLANK
 2825 4390 DB2A0000 		_DOLIT 127
 2825      7F000000 
 2826 4398 75320000 		_ADR	WITHI
ARM GAS  forth.s 			page 155


 2827 439c 1B2B0000 		_QBRAN	ACCP2
 2827      B0430000 
 2828 43a4 E5420000 		_ADR	TAP
 2829 43a8 2F2B0000 		_BRAN	ACCP3
 2829      B4430000 
 2830              	ACCP2:
 2831 43b0 01430000 		_ADR	KTAP
 2832              	ACCP3:	  
 2833 43b4 2F2B0000 		_BRAN	ACCP1
 2833      74430000 
 2834              	ACCP4:
 2835 43bc 452C0000 		_ADR	DROP
 2836 43c0 792C0000 		_ADR	OVER
 2837 43c4 292D0000 		_ADR	SUBB
 2838 43c8 1B290000 		_UNNEST
 2839              	
 2840              	/*****************************
 2841              	    QUERY	( -- )
 2842              	 	Accept input stream 
 2843              		to terminal input buffer.
 2844              	******************************/
 2845 43cc 5C430000 		_HEADER QUERY,5,"QUERY"
 2845      05515545 
 2845      525900BF 
 2846 43d8 504700BF 		_NEST
 2847 43dc FD350000 		_ADR	TIB
 2848 43e0 DB2A0000 		_DOLIT 80
 2848      50000000 
 2849 43e8 65430000 		_ADR	ACCEP
 2850 43ec 99310000 		_ADR	NTIB
 2851 43f0 4D2B0000 		_ADR	STORE
 2852 43f4 452C0000 		_ADR	DROP
 2853 43f8 DB2A0000 		_DOLIT	0
 2853      00000000 
 2854 4400 81310000 		_ADR	INN
 2855 4404 4D2B0000 		_ADR	STORE
 2856 4408 1B290000 		_UNNEST
 2857              	
 2858              	/********************
 2859              	  Error handling
 2860              	********************/
 2861              	
 2862              	/*********************
 2863              	    ABORT	( a -- )
 2864              	 	Reset data stack 
 2865              		and jump to QUIT.
 2866              	**********************/
 2867 440c D0430000 		_HEADER ABORT,5,"ABORT"
 2867      0541424F 
 2867      525400BF 
 2868 4418 504700BF 		_NEST
 2869              	ABORT1:
 2870 441c 693B0000 		_ADR	SPACE
 2871 4420 A9300000 		_ADR	COUNT
 2872 4424 BD3B0000 		_ADR	TYPEE
 2873 4428 DB2A0000 		_DOLIT	0X3F
 2873      3F000000 
ARM GAS  forth.s 			page 156


 2874 4430 E5290000 		_ADR	EMIT
 2875 4434 F13B0000 		_ADR	CR
 2876 4438 A1450000 		_ADR	PRESE
 2877 443c 2F2B0000 		_BRAN	QUIT
 2877      C0450000 
 2878              	
 2879              	/*******************************
 2880              	    _abort"	( f -- )
 2881              	 	Run time routine of ABORT"
 2882              		Abort with a message.
 2883              	hidden used by compiler 
 2884              	********************************/
 2885              	ABORQ:
 2886 4444 504700BF 		_NEST
 2887 4448 113C0000 		_ADR	DOSTR
 2888 444c 652C0000 		_ADR	SWAP 
 2889 4450 1B2B0000 		_QBRAN	1f	// text flag
 2889      60440000 
 2890 4458 2F2B0000 		_BRAN	ABORT1
 2890      1C440000 
 2891              	1:
 2892 4460 452C0000 		_ADR	DROP
 2893 4464 1B290000 		_UNNEST			// drop error
 2894              	
 2895              	/************************
 2896              	  The text interpreter
 2897              	************************/
 2898              	
 2899              	/***************************
 2900              	    $INTERPRET  ( a -- )
 2901              	 	Interpret a word. 
 2902              		If failed, try to 
 2903              		convert it to an integer.
 2904              	******************************/
 2905 4468 10440000 		_HEADER INTER,10,"$INTERPRET"
 2905      0A24494E 
 2905      54455250 
 2905      52455400 
 2906 4478 504700BF 		_NEST
 2907 447c A5410000 		_ADR	NAMEQ
 2908 4480 292E0000 		_ADR	QDUP	// ?defined
 2909 4484 1B2B0000 		_QBRAN	INTE1
 2909      B8440000 
 2910 448c 612B0000 		_ADR	AT
 2911 4490 DB2A0000 		_DOLIT	COMPO
 2911      40000000 
 2912 4498 992C0000 		_ADR	ANDD	// ?compile only lexicon bits
 2913 449c 45440000 		_ABORQ	13," compile only"
 2913      0D20636F 
 2913      6D70696C 
 2913      65206F6E 
 2913      6C7900BF 
 2914 44b0 F12A0000 		_ADR	EXECU
 2915 44b4 1B290000 		_UNNEST			// execute defined word
 2916              	INTE1:
 2917 44b8 5D210000 		_ADR	NUMBER 
 2918 44bc 1B2B0000 		_QBRAN	INTE2
ARM GAS  forth.s 			page 157


 2918      C8440000 
 2919 44c4 1B290000 		_UNNEST
 2920              	INTE2:
 2921 44c8 19440000 		_ADR	ABORT	// error
 2922              	
 2923              	/******************************
 2924              	    [	   ( -- )
 2925              	 	Start the text interpreter.
 2926              	*******************************/
 2927 44cc 6C440000 		_HEADER LBRAC,IMEDD+1,"["
 2927      815B00BF 
 2928 44d4 504700BF 		_NEST
 2929 44d8 DB2A0000 		_DOLIT	INTER
 2929      78440000 
 2930 44e0 B1310000 		_ADR	TEVAL
 2931 44e4 4D2B0000 		_ADR	STORE
 2932 44e8 1B290000 		_UNNEST
 2933              	
 2934              	/**********************
 2935              	    .OK	 ( -- )
 2936              	 	Display "ok" only 
 2937              		while interpreting.
 2938              	************************/
 2939 44ec D0440000 		_HEADER DOTOK,3,".OK"
 2939      032E4F4B 
 2940 44f4 504700BF 		_NEST
 2941 44f8 DB2A0000 		_DOLIT	INTER
 2941      78440000 
 2942 4500 B1310000 		_ADR	TEVAL
 2943 4504 612B0000 		_ADR	AT
 2944 4508 A12F0000 		_ADR	EQUAL
 2945 450c 1B2B0000 		_QBRAN	DOTO1
 2945      1C450000 
 2946 4514 593C0000 		_DOTQP	3," ok"
 2946      03206F6B 
 2947              	DOTO1:
 2948 451c F13B0000 		_ADR	CR
 2949 4520 1B290000 		_UNNEST
 2950              	
 2951              	/*************************
 2952              	    ?STACK	( -- )
 2953              	 	Abort if the data 
 2954              		stack underflows.
 2955              	************************/
 2956 4524 F0440000 		_HEADER QSTAC,6,"?STACK"
 2956      063F5354 
 2956      41434B00 
 2957 4530 504700BF 		_NEST
 2958 4534 79350000 		_ADR	DEPTH
 2959 4538 892C0000 		_ADR	ZLESS	// check only for underflow
 2960 453c 45440000 		_ABORQ	9,"underflow"
 2960      09756E64 
 2960      6572666C 
 2960      6F7700BF 
 2961 454c 1B290000 		_UNNEST
 2962              	
 2963              	/*******************
ARM GAS  forth.s 			page 158


 2964              	    EVAL	( -- )
 2965              	 	Interpret the 
 2966              		input stream.
 2967              	*******************/
 2968 4550 28450000 		_HEADER EVAL,4,"EVAL"
 2968      04455641 
 2968      4C0000BF 
 2969 455c 504700BF 		_NEST
 2970              	EVAL1:
 2971 4560 1D400000 	    _ADR	TOKEN
 2972 4564 552C0000 		_ADR	DUPP
 2973 4568 812B0000 		_ADR	CAT	// ?input stream empty
 2974 456c 1B2B0000 		_QBRAN	EVAL2
 2974      88450000 
 2975 4574 B1310000 		_ADR	TEVAL
 2976 4578 15360000 		_ADR	ATEXE
 2977 457c 31450000 		_ADR	QSTAC	// evaluate input, check stack
 2978 4580 2F2B0000 		_BRAN	EVAL1
 2978      60450000 
 2979              	EVAL2:
 2980 4588 452C0000 		_ADR	DROP
 2981 458c F5440000 		_ADR	DOTOK
 2982 4590 1B290000 		_UNNEST	// prompt
 2983              	
 2984              	/**********************************
 2985              	    PRESET	( -- )
 2986              	 	Reset data stack pointer 
 2987              		and the terminal input buffer.
 2988              	**********************************/
 2989 4594 54450000 		_HEADER PRESE,6,"PRESET"
 2989      06505245 
 2989      53455400 
 2990 45a0 504700BF 		_NEST 
 2991 45a4 DB2A0000 		_DOLIT SPP 
 2991      80FE0120 
 2992 45ac 112C0000 		_ADR SPSTOR 
 2993 45b0 1B290000 		_UNNEST 
 2994              	
 2995              	/*********************
 2996              	    QUIT	( -- )
 2997              	 	Reset return stack 
 2998              		pointer and start 
 2999              		text interpreter.
 3000              	***********************/
 3001 45b4 98450000 		_HEADER QUIT,4,"QUIT"
 3001      04515549 
 3001      540000BF 
 3002 45c0 DB2A0000 		_DOLIT RPP 
 3002      00FF0120 
 3003 45c8 012C0000 		_ADR RPSTOR 
 3004              	QUIT1:
 3005 45cc D5440000 		_ADR	LBRAC			// start interpretation
 3006              	QUIT2:
 3007 45d0 D9430000 		_ADR	QUERY			// get input
 3008 45d4 5D450000 		_ADR	EVAL
 3009 45d8 2F2B0000 		_BRAN	QUIT2	// continue till error
 3009      D0450000 
ARM GAS  forth.s 			page 159


 3010              	
 3011              	/***************************
 3012              		FORGET ( <string> -- )
 3013              		forget all definition 
 3014              		starting at <string>
 3015              	****************************/
 3016 45e0 B8450000 		_HEADER FORGET,6,"FORGET"
 3016      06464F52 
 3016      47455400 
 3017 45ec 504700BF 		_NEST 
 3018 45f0 1D400000 		_ADR TOKEN 
 3019 45f4 552C0000 		_ADR DUPP 
 3020 45f8 1B2B0000 		_QBRAN 9f 
 3020      34460000 
 3021 4600 A5410000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3022 4604 292E0000 		_ADR QDUP 
 3023 4608 1B2B0000 		_QBRAN 8f
 3023      30460000 
 3024 4610 C52D0000 		_ADR CELLM // ( ca la )
 3025 4614 552C0000 		_ADR DUPP 
 3026 4618 F1310000 		_ADR CPP   
 3027 461c 4D2B0000 		_ADR STORE
 3028 4620 612B0000 		_ADR AT 
 3029 4624 1D320000 		_ADR LAST 
 3030 4628 4D2B0000 		_ADR STORE
 3031 462c 894B0000 		_ADR OVERT 
 3032 4630 452C0000 	8:  _ADR DROP 
 3033 4634 1B290000 	9:	_UNNEST 
 3034              	
 3035              		.p2align 2 
 3036              	
 3037              	/*****************
 3038              	  The compiler
 3039              	******************/
 3040              	
 3041              	/**************************************
 3042              	    '	   ( -- ca )
 3043              	 	Search context vocabularies 
 3044              		for the next word in input stream.
 3045              	***************************************/
 3046 4638 E4450000 		_HEADER TICK,1,"'"
 3046      012700BF 
 3047 4640 504700BF 		_NEST
 3048 4644 1D400000 		_ADR	TOKEN
 3049 4648 A5410000 		_ADR	NAMEQ	// ?defined
 3050 464c 1B2B0000 		_QBRAN	TICK1
 3050      58460000 
 3051 4654 1B290000 		_UNNEST	// yes, push code address
 3052              	TICK1:	
 3053 4658 19440000 		_ADR ABORT	// no, error
 3054              	
 3055              	/***********************
 3056              	    ALLOT	( n -- )
 3057              	 	Allocate n bytes to 
 3058              		the ram area.
 3059              	************************/
 3060 465c 3C460000 		_HEADER ALLOT,5,"ALLOT"
ARM GAS  forth.s 			page 160


 3060      05414C4C 
 3060      4F5400BF 
 3061 4668 504700BF 		_NEST
 3062 466c F1310000 		_ADR	CPP
 3063 4670 61300000 		_ADR	PSTOR
 3064 4674 1B290000 		_UNNEST			// adjust code pointer
 3065              	
 3066              	/******************************
 3067              	    ,	   ( w -- )
 3068              	 	Compile an integer 
 3069              		into the code dictionary.
 3070              	******************************/
 3071 4678 60460000 		_HEADER COMMA,1,","
 3071      012C00BF 
 3072 4680 504700BF 		_NEST
 3073 4684 C5350000 		_ADR	HERE
 3074 4688 552C0000 		_ADR	DUPP
 3075 468c B52D0000 		_ADR	CELLP	// cell boundary
 3076 4690 F1310000 		_ADR	CPP
 3077 4694 4D2B0000 		_ADR	STORE
 3078 4698 4D2B0000 		_ADR	STORE
 3079 469c 1B290000 		_UNNEST	// adjust code pointer, compile
 3080              		.p2align 2 
 3081              	
 3082              	/************************************
 3083              	    [COMPILE]   ( -- //  string> )
 3084              	 	Compile the next immediate word 
 3085              		into code dictionary.
 3086              	*************************************/
 3087 46a0 7C460000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3087      895B434F 
 3087      4D50494C 
 3087      455D00BF 
 3088 46b0 504700BF 		_NEST
 3089 46b4 41460000 		_ADR	TICK
 3090 46b8 81460000 		_ADR	COMMA
 3091 46bc 1B290000 		_UNNEST
 3092              	
 3093              	/****************************
 3094              	    COMPILE	( -- )
 3095              	 	Compile the next address 
 3096              		in colon list to code 
 3097              		dictionary.
 3098              	*******************************/
 3099 46c0 A4460000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3099      47434F4D 
 3099      50494C45 
 3100 46cc 504700BF 		_NEST
 3101 46d0 8D2B0000 		_ADR	RFROM
 3102 46d4 552C0000 		_ADR	DUPP 
 3103 46d8 612B0000 		_ADR	AT
 3104 46dc DB2A0000 		_DOLIT 1 
 3104      01000000 
 3105 46e4 AD2C0000 		_ADR	ORR 
 3106 46e8 81460000 		_ADR	COMMA 
 3107 46ec B52D0000 		_ADR	CELLP 
 3108 46f0 D12B0000 		_ADR	TOR 
ARM GAS  forth.s 			page 161


 3109 46f4 1B290000 		_UNNEST	// adjust return address
 3110              	
 3111              	/*************************
 3112              	    LITERAL	( w -- )
 3113              	 	Compile tos to code 
 3114              		dictionary as an 
 3115              		integer literal.
 3116              	***************************/
 3117 46f8 C4460000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3117      874C4954 
 3117      4552414C 
 3118 4704 504700BF 		_NEST
 3119 4708 DB2A0000 		_COMPI	DOLIT
 3119      DA2A0000 
 3119      E54B0000 
 3120 4714 81460000 		_ADR	COMMA
 3121 4718 1B290000 		_UNNEST
 3122              	
 3123              	/********************
 3124              	    $,"	( -- )
 3125              	 	Compile a literal 
 3126              		string up to next " .
 3127              	hidden word 
 3128              	************************/
 3129              	STRCQ:
 3130 471c 504700BF 		_NEST
 3131 4720 DB2A0000 		_DOLIT -4
 3131      FCFFFFFF 
 3132 4728 F1310000 		_ADR	CPP
 3133 472c 61300000 		_ADR	PSTOR
 3134 4730 DB2A0000 		_DOLIT	'\"'
 3134      22000000 
 3135 4738 F93F0000 		_ADR	WORDD			// move word to code dictionary
 3136 473c A9300000 		_ADR	COUNT
 3137 4740 192D0000 		_ADR	PLUS
 3138 4744 11350000 		_ADR	ALGND			// calculate aligned end of string
 3139 4748 F1310000 		_ADR	CPP
 3140 474c 4D2B0000 		_ADR	STORE
 3141 4750 1B290000 		_UNNEST 			// adjust the code pointer
 3142              	
 3143              	/*******************
 3144              	   Structures
 3145              	*******************/
 3146              	
 3147              	/*************************
 3148              	    FOR	 ( -- a )
 3149              	 	Start a FOR-NEXT loop 
 3150              		structure in a colon 
 3151              		definition.
 3152              	**************************/
 3153 4754 FC460000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3153      C3464F52 
 3154 475c 504700BF 		_NEST
 3155 4760 DB2A0000 		_COMPI	TOR
 3155      D02B0000 
 3155      E54B0000 
 3156 476c C5350000 		_ADR	HERE
ARM GAS  forth.s 			page 162


 3157 4770 1B290000 		_UNNEST
 3158              	
 3159              	/********************************
 3160              		DO ( limit start -- )
 3161              		initialise a DO...LOOP 
 3162              		or DO...+LOOP 
 3163              	********************************/
 3164 4774 58470000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3164      C2444F00 
 3165 477c 504700BF 		_NEST
 3166 4780 DB2A0000 		_COMPI SWAP
 3166      642C0000 
 3166      E54B0000 
 3167 478c DB2A0000 		_COMPI TOR 
 3167      D02B0000 
 3167      E54B0000 
 3168 4798 DB2A0000 		_COMPI TOR 
 3168      D02B0000 
 3168      E54B0000 
 3169 47a4 C5350000 		_ADR HERE 
 3170 47a8 1B290000 		_UNNEST 
 3171              	
 3172              	DOPLOOP: // ( n -- R: counter limit )
 3173 47ac B8E80300 		ldmfd RSP!,{T0,T1}
 3174 47b0 3044     		add T0,TOS 
 3175 47b2 28E90300 		stmfd RSP!,{T0,T1}
 3176 47b6 8842     		cmp T0,T1 
 3177 47b8 05D4     		bmi 9f 
 3178 47ba 08F10808 		add RSP,#8
 3179 47be 0CF1040C 		add IP,#4
 3180 47c2 FEF7A7B8 		_NEXT 
 3181 47c6 DCF800C0 	9:  ldr IP,[IP]
 3182 47ca FEF7A3B8 		_NEXT 
 3183              		
 3184              	/***************************
 3185              		+LOOP ( a -- )
 3186              		increment counter 
 3187              		end loop if countr>limit
 3188              	****************************/
 3189 47ce 78470000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3189      C52B4C4F 
 3189      4F50
 3190 47d8 504700BF 		_NEST 
 3191 47dc DB2A0000 		_COMPI DOPLOOP 
 3191      AC470000 
 3191      E54B0000 
 3192 47e8 81460000 		_ADR COMMA
 3193 47ec 1B290000 		_UNNEST 
 3194              	
 3195              	DOLOOP: // ( -- R: counter limit )
 3196 47f0 D8F80000 		ldr T0,[RSP]
 3197 47f4 00F10100 		add T0,#1
 3198 47f8 C8F80000 		str T0,[RSP]
 3199 47fc D8F80410 		ldr T1,[RSP,#4]
 3200 4800 8842     		cmp T0,T1 
 3201 4802 05D4     		bmi 9f
 3202 4804 08F10808 		add RSP,#8  // counter and limit  
ARM GAS  forth.s 			page 163


 3203 4808 0CF1040C 		add IP,IP,#4 // skip loop address 
 3204 480c FEF782B8 		_NEXT 
 3205 4810 DCF800C0 	9:  ldr IP,[IP]
 3206 4814 FEF77EB8 		_NEXT 
 3207              	
 3208              	
 3209              	/********************************
 3210              		LOOP ( a -- )
 3211              		increment counter 
 3212              		end loop if >= limit 
 3213              	*********************************/
 3214 4818 D2470000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3214      C44C4F4F 
 3214      500000BF 
 3215 4824 504700BF 		_NEST 
 3216 4828 DB2A0000 		_COMPI DOLOOP
 3216      F0470000 
 3216      E54B0000 
 3217 4834 81460000 		_ADR COMMA 
 3218 4838 1B290000 		_UNNEST 
 3219              	
 3220              	
 3221              	/**********************
 3222              	    BEGIN	( -- a )
 3223              	 	Start an infinite 
 3224              		or indefinite 
 3225              		loop structure.
 3226              	************************/
 3227 483c 1C480000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3227      C5424547 
 3227      494E00BF 
 3228 4848 504700BF 		_NEST
 3229 484c C5350000 		_ADR	HERE
 3230 4850 1B290000 		_UNNEST
 3231              		.p2align 2 
 3232              	
 3233              	/********************
 3234              	    NEXT	( a -- )
 3235              	 	Terminate a FOR-NEXT
 3236              		loop structure.
 3237              	**************************/
 3238 4854 40480000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3238      C44E4558 
 3238      540000BF 
 3239 4860 504700BF 		_NEST
 3240 4864 DB2A0000 		_COMPI	DONXT
 3240      FC2A0000 
 3240      E54B0000 
 3241 4870 81460000 		_ADR	COMMA
 3242 4874 1B290000 		_UNNEST
 3243              	
 3244              	/***************************
 3245              		I ( -- n )
 3246              		stack for loop counter 
 3247              	***************************/
 3248 4878 58480000 		_HEADER I,1+COMPO,"I"
 3248      414900BF 
ARM GAS  forth.s 			page 164


 3249 4880 47F8046D 		_PUSH 
 3250 4884 D8F80060 		ldr TOS,[RSP]
 3251 4888 FEF744B8 		_NEXT 
 3252              	
 3253              	/****************************
 3254              		J ( -- n )
 3255              		stack outer loop counter 
 3256              	****************************/
 3257 488c 7C480000 		_HEADER J,1,"J"
 3257      014A00BF 
 3258 4894 47F8046D 		_PUSH 
 3259 4898 D8F80460 		ldr TOS,[RSP,#4]
 3260 489c FEF73AB8 		_NEXT 
 3261              	
 3262              	/**********************
 3263              	    UNTIL	( a -- )
 3264              	 	Terminate a BEGIN-UNTIL
 3265              		indefinite loop structure.
 3266              	******************************/
 3267 48a0 90480000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3267      C5554E54 
 3267      494C00BF 
 3268 48ac 504700BF 		_NEST
 3269 48b0 DB2A0000 		_COMPI	QBRAN
 3269      1A2B0000 
 3269      E54B0000 
 3270 48bc 81460000 		_ADR	COMMA
 3271 48c0 1B290000 		_UNNEST
 3272              	
 3273              	/**********************
 3274              	    AGAIN	( a -- )
 3275              	 	Terminate a BEGIN-AGAIN
 3276              		infinite loop structure.
 3277              	*****************************/
 3278 48c4 A4480000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3278      C5414741 
 3278      494E00BF 
 3279 48d0 504700BF 		_NEST
 3280 48d4 DB2A0000 		_COMPI	BRAN
 3280      2E2B0000 
 3280      E54B0000 
 3281 48e0 81460000 		_ADR	COMMA
 3282 48e4 1B290000 		_UNNEST
 3283              	
 3284              	/************************
 3285              	    IF	  ( -- A )
 3286              	 	Begin a conditional
 3287              		branch structure.
 3288              	**************************/
 3289 48e8 C8480000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3289      C2494600 
 3290 48f0 504700BF 		_NEST
 3291 48f4 DB2A0000 		_COMPI	QBRAN
 3291      1A2B0000 
 3291      E54B0000 
 3292 4900 C5350000 		_ADR	HERE
 3293 4904 DB2A0000 		_DOLIT	4
ARM GAS  forth.s 			page 165


 3293      04000000 
 3294 490c F1310000 		_ADR	CPP
 3295 4910 61300000 		_ADR	PSTOR
 3296 4914 1B290000 		_UNNEST
 3297              	
 3298              	/*************************
 3299              	    AHEAD	( -- A )
 3300              	 	Compile a forward 
 3301              		branch instruction.
 3302              	*************************/
 3303 4918 EC480000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3303      C5414845 
 3303      414400BF 
 3304 4924 504700BF 		_NEST
 3305 4928 DB2A0000 		_COMPI	BRAN
 3305      2E2B0000 
 3305      E54B0000 
 3306 4934 C5350000 		_ADR	HERE
 3307 4938 DB2A0000 		_DOLIT	4
 3307      04000000 
 3308 4940 F1310000 		_ADR	CPP
 3309 4944 61300000 		_ADR	PSTOR
 3310 4948 1B290000 		_UNNEST
 3311              	
 3312              	/**************************
 3313              	    REPEAT	( A a -- )
 3314              	 	Terminate a BEGIN-WHILE-REPEAT
 3315              		indefinite loop.
 3316              	**********************************/
 3317 494c 1C490000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3317      C6524550 
 3317      45415400 
 3318 4958 504700BF 		_NEST
 3319 495c D1480000 		_ADR	AGAIN
 3320 4960 C5350000 		_ADR	HERE
 3321 4964 652C0000 		_ADR	SWAP
 3322 4968 4D2B0000 		_ADR	STORE
 3323 496c 1B290000 		_UNNEST
 3324              	
 3325              	/*********************
 3326              	    THEN	( A -- )
 3327              	 	Terminate a conditional
 3328              		branch structure.
 3329              	*****************************/
 3330 4970 50490000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3330      C4544845 
 3330      4E0000BF 
 3331 497c 504700BF 		_NEST
 3332 4980 C5350000 		_ADR	HERE
 3333 4984 652C0000 		_ADR	SWAP
 3334 4988 4D2B0000 		_ADR	STORE
 3335 498c 1B290000 		_UNNEST
 3336              	
 3337              	/***************************
 3338              	    AFT	 ( a -- a A )
 3339              	 	Jump to THEN in a 
 3340              		FOR-AFT-THEN-NEXT loop 
ARM GAS  forth.s 			page 166


 3341              		the first time through.
 3342              	*****************************/
 3343 4990 74490000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3343      C3414654 
 3344 4998 504700BF 		_NEST
 3345 499c 452C0000 		_ADR	DROP
 3346 49a0 25490000 		_ADR	AHEAD
 3347 49a4 49480000 		_ADR	BEGIN
 3348 49a8 652C0000 		_ADR	SWAP
 3349 49ac 1B290000 		_UNNEST
 3350              	
 3351              	/**********************
 3352              	    ELSE	( A -- A )
 3353              	 	Start the false 
 3354              		clause in an 
 3355              		IF-ELSE-THEN structure.
 3356              	****************************/
 3357 49b0 94490000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3357      C4454C53 
 3357      450000BF 
 3358 49bc 504700BF 		_NEST
 3359 49c0 25490000 		_ADR	AHEAD
 3360 49c4 652C0000 		_ADR	SWAP
 3361 49c8 7D490000 		_ADR	THENN
 3362 49cc 1B290000 		_UNNEST
 3363              	
 3364              	/**************************
 3365              	    WHILE	( a -- A a )
 3366              	 	Conditional branch out 
 3367              		of a BEGIN-WHILE-REPEAT loop.
 3368              	*********************************/
 3369 49d0 B4490000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3369      C5574849 
 3369      4C4500BF 
 3370 49dc 504700BF 		_NEST
 3371 49e0 F1480000 		_ADR	IFF
 3372 49e4 652C0000 		_ADR	SWAP
 3373 49e8 1B290000 		_UNNEST
 3374              	
 3375              	/***********************************
 3376              	    ABORT"	( -- //  string> )
 3377              	 	Conditional abort with an 
 3378              		error message.
 3379              	***********************************/
 3380 49ec D4490000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3380      8641424F 
 3380      52542200 
 3381 49f8 504700BF 		_NEST
 3382 49fc DB2A0000 		_COMPI	ABORQ
 3382      44440000 
 3382      E54B0000 
 3383 4a08 1D470000 		_ADR	STRCQ
 3384 4a0c 1B290000 		_UNNEST
 3385              	
 3386              	/******************************
 3387              	    $"	( -- //  string> )
 3388              	 	Compile an inline 
ARM GAS  forth.s 			page 167


 3389              		word literal.
 3390              	*****************************/
 3391 4a10 F0490000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3391      C2242200 
 3392 4a18 504700BF 		_NEST
 3393 4a1c DB2A0000 		_COMPI	STRQP
 3393      3C3C0000 
 3393      E54B0000 
 3394 4a28 1D470000 		_ADR	STRCQ
 3395 4a2c 1B290000 		_UNNEST
 3396              	
 3397              	/******************************
 3398              	    ."	( -- //  string> )
 3399              	 	Compile an inline word
 3400              		literal to be typed out 
 3401              		at run time.
 3402              	*******************************/
 3403 4a30 144A0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3403      C22E2200 
 3404 4a38 504700BF 		_NEST
 3405 4a3c DB2A0000 		_COMPI	DOTQP
 3405      583C0000 
 3405      E54B0000 
 3406 4a48 1D470000 		_ADR	STRCQ
 3407 4a4c 1B290000 		_UNNEST
 3408              	
 3409              	/*********************
 3410              	  Name compiler
 3411              	***********************/
 3412              	
 3413              	/**************************
 3414              	    ?UNIQUE	( a -- a )
 3415              	 	Display a warning 
 3416              		message if the word 
 3417              		already exists.
 3418              	**************************/
 3419 4a50 344A0000 		_HEADER UNIQU,7,"?UNIQUE"
 3419      073F554E 
 3419      49515545 
 3420 4a5c 504700BF 		_NEST
 3421 4a60 552C0000 		_ADR	DUPP
 3422 4a64 A5410000 		_ADR	NAMEQ			// ?name exists
 3423 4a68 1B2B0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3423      884A0000 
 3424 4a70 593C0000 		_DOTQP	7," reDef "		// but warn the user
 3424      07207265 
 3424      44656620 
 3425 4a7c 792C0000 		_ADR	OVER
 3426 4a80 A9300000 		_ADR	COUNT
 3427 4a84 BD3B0000 		_ADR	TYPEE			// just in case its not planned
 3428              	UNIQ1:
 3429 4a88 452C0000 		_ADR	DROP
 3430 4a8c 1B290000 		_UNNEST
 3431              	
 3432              	/***********************
 3433              	    $,n	 ( na -- )
 3434              	 	Build a new dictionary 
ARM GAS  forth.s 			page 168


 3435              		name using the data at na.
 3436              	hidden word 
 3437              	*******************************/
 3438              	SNAME:
 3439 4a90 504700BF 		_NEST
 3440 4a94 552C0000 		_ADR	DUPP			//  na na
 3441 4a98 812B0000 		_ADR	CAT			//  ?null input
 3442 4a9c 1B2B0000 		_QBRAN	SNAM1
 3442      D84A0000 
 3443 4aa4 5D4A0000 		_ADR	UNIQU			//  na
 3444 4aa8 1D320000 		_ADR	LAST			//  na last
 3445 4aac 612B0000 		_ADR	AT			//  na la
 3446 4ab0 81460000 		_ADR	COMMA			//  na
 3447 4ab4 552C0000 		_ADR	DUPP			//  na na
 3448 4ab8 1D320000 		_ADR	LAST			//  na na last
 3449 4abc 4D2B0000 		_ADR	STORE			//  na , save na for vocabulary link
 3450 4ac0 A9300000 		_ADR	COUNT			//  na+1 count
 3451 4ac4 192D0000 		_ADR	PLUS			//  na+1+count
 3452 4ac8 11350000 		_ADR	ALGND			//  word boundary
 3453 4acc F1310000 		_ADR	CPP
 3454 4ad0 4D2B0000 		_ADR	STORE			//  top of dictionary now
 3455 4ad4 1B290000 		_UNNEST
 3456              	SNAM1:
 3457 4ad8 3D3C0000 		_ADR	STRQP
 3458 4adc 07       		.byte	7
 3459 4add 206E616D 		.ascii " name? "
 3459      653F20
 3460 4ae4 19440000 		_ADR	ABORT
 3461              	
 3462              	/************************
 3463              	    $COMPILE	( a -- )
 3464              	 	Compile next word to 
 3465              		code dictionary as 
 3466              		a token or literal.
 3467              	**************************/
 3468 4ae8 544A0000 		_HEADER SCOMP,8,"$COMPILE"
 3468      0824434F 
 3468      4D50494C 
 3468      450000BF 
 3469 4af8 504700BF 		_NEST
 3470 4afc A5410000 		_ADR	NAMEQ
 3471 4b00 292E0000 		_ADR	QDUP	// defined?
 3472 4b04 1B2B0000 		_QBRAN	SCOM2
 3472      344B0000 
 3473 4b0c 612B0000 		_ADR	AT
 3474 4b10 DB2A0000 		_DOLIT	IMEDD
 3474      80000000 
 3475 4b18 992C0000 		_ADR	ANDD	// immediate?
 3476 4b1c 1B2B0000 		_QBRAN	SCOM1
 3476      2C4B0000 
 3477 4b24 F12A0000 		_ADR	EXECU
 3478 4b28 1B290000 		_UNNEST			// it's immediate, execute
 3479              	SCOM1:
 3480 4b2c E54B0000 		_ADR	CALLC			// it's not immediate, compile
 3481 4b30 1B290000 		_UNNEST	
 3482              	SCOM2:
 3483 4b34 5D210000 		_ADR	NUMBER 
ARM GAS  forth.s 			page 169


 3484 4b38 1B2B0000 		_QBRAN	SCOM3
 3484      484B0000 
 3485 4b40 05470000 		_ADR	LITER
 3486 4b44 1B290000 		_UNNEST			// compile number as integer
 3487              	SCOM3: // compilation abort 
 3488 4b48 514B0000 		_ADR COLON_ABORT 
 3489 4b4c 19440000 		_ADR	ABORT			// error
 3490              	
 3491              	/********************************
 3492              	 before aborting a compilation 
 3493              	 reset HERE and LAST
 3494              	 to previous values. 
 3495              	*******************************/
 3496              	COLON_ABORT:
 3497 4b50 504700BF 		_NEST 
 3498 4b54 1D320000 		_ADR LAST 
 3499 4b58 612B0000 		_ADR AT 
 3500 4b5c C52D0000 		_ADR CELLM 
 3501 4b60 552C0000 		_ADR DUPP 
 3502 4b64 F1310000 		_ADR CPP  
 3503 4b68 4D2B0000 		_ADR STORE 
 3504 4b6c 612B0000 		_ADR AT 
 3505 4b70 1D320000 		_ADR LAST 
 3506 4b74 4D2B0000 		_ADR STORE 
 3507 4b78 1B290000 		_UNNEST 
 3508              	
 3509              	/*********************
 3510              	    OVERT	( -- )
 3511              	 	Link a new word 
 3512              		into the current 
 3513              		vocabulary.
 3514              	**********************/
 3515 4b7c EC4A0000 		_HEADER OVERT,5,"OVERT"
 3515      054F5645 
 3515      525400BF 
 3516 4b88 504700BF 		_NEST
 3517 4b8c 1D320000 		_ADR	LAST
 3518 4b90 612B0000 		_ADR	AT
 3519 4b94 DD310000 		_ADR	CNTXT
 3520 4b98 4D2B0000 		_ADR	STORE
 3521 4b9c 1B290000 		_UNNEST
 3522              	
 3523              	/**********************
 3524              	    ;  ( -- )
 3525              	 	Terminate a colon
 3526              		definition.
 3527              	***********************/
 3528 4ba0 804B0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3528      C13B00BF 
 3529 4ba8 504700BF 		_NEST
 3530 4bac DB2A0000 		_DOLIT	UNNEST
 3530      1A290000 
 3531 4bb4 E54B0000 		_ADR	CALLC
 3532 4bb8 D5440000 		_ADR	LBRAC
 3533 4bbc 894B0000 		_ADR	OVERT
 3534 4bc0 1B290000 		_UNNEST
 3535              	
ARM GAS  forth.s 			page 170


 3536              	/******************
 3537              	    ]	   ( -- )
 3538              	 	Start compiling 
 3539              		the words in 
 3540              		the input stream.
 3541              	*********************/
 3542 4bc4 A44B0000 		_HEADER RBRAC,1,"]"
 3542      015D00BF 
 3543 4bcc 504700BF 		_NEST
 3544 4bd0 DB2A0000 		_DOLIT	SCOMP
 3544      F84A0000 
 3545 4bd8 B1310000 		_ADR	TEVAL
 3546 4bdc 4D2B0000 		_ADR	STORE
 3547 4be0 1B290000 		_UNNEST
 3548              	
 3549              	/*********************
 3550              	    BL.W	( ca -- )
 3551              	 	compile ca.
 3552              	hidden word used by compiler
 3553              	*****************************/
 3554              	CALLC:
 3555 4be4 504700BF 		_NEST
 3556 4be8 DB2A0000 		_DOLIT 1 
 3556      01000000 
 3557 4bf0 AD2C0000 		_ADR ORR 
 3558 4bf4 81460000 		_ADR COMMA  
 3559 4bf8 1B290000 		_UNNEST 
 3560              	
 3561              	
 3562              	/*************************
 3563              	 	:	( -- //  string> )
 3564              	 	Start a new colon 
 3565              		definition using 
 3566              		next word as its name.
 3567              	**************************/
 3568 4bfc C84B0000 		_HEADER COLON,1,":"
 3568      013A00BF 
 3569 4c04 504700BF 		_NEST
 3570 4c08 1D400000 		_ADR	TOKEN
 3571 4c0c 914A0000 		_ADR	SNAME
 3572 4c10 25290000 		_ADR	COMPI_NEST 
 3573 4c14 CD4B0000 		_ADR	RBRAC
 3574 4c18 1B290000 		_UNNEST
 3575              	
 3576              	/*************************
 3577              	    IMMEDIATE   ( -- )
 3578              	 	Make the last compiled 
 3579              		word an immediate word.
 3580              	***************************/
 3581 4c1c 004C0000 		_HEADER IMMED,9,"IMMEDIATE"
 3581      09494D4D 
 3581      45444941 
 3581      544500BF 
 3582 4c2c 504700BF 		_NEST
 3583 4c30 DB2A0000 		_DOLIT	IMEDD
 3583      80000000 
 3584 4c38 1D320000 		_ADR	LAST
ARM GAS  forth.s 			page 171


 3585 4c3c 612B0000 		_ADR	AT
 3586 4c40 612B0000 		_ADR	AT
 3587 4c44 AD2C0000 		_ADR	ORR
 3588 4c48 1D320000 		_ADR	LAST
 3589 4c4c 612B0000 		_ADR	AT
 3590 4c50 4D2B0000 		_ADR	STORE
 3591 4c54 1B290000 		_UNNEST
 3592              	
 3593              	/******************
 3594              	  Defining words
 3595              	******************/
 3596              	
 3597              	/***********************************
 3598              	    CONSTANT	( u -- //  string> )
 3599              	 	Compile a new constant.
 3600              	************************************/
 3601 4c58 204C0000 		_HEADER CONST,8,"CONSTANT"
 3601      08434F4E 
 3601      5354414E 
 3601      540000BF 
 3602 4c68 504700BF 		_NEST 
 3603 4c6c 1D400000 		_ADR	TOKEN
 3604 4c70 914A0000 		_ADR	SNAME
 3605 4c74 894B0000 		_ADR	OVERT
 3606 4c78 25290000 		_ADR	COMPI_NEST
 3607 4c7c DB2A0000 		_DOLIT	DOCON
 3607      DC300000 
 3608 4c84 E54B0000 		_ADR	CALLC
 3609 4c88 81460000 		_ADR	COMMA
 3610 4c8c DB2A0000 		_DOLIT	UNNEST 
 3610      1A290000 
 3611 4c94 E54B0000 		_ADR	CALLC  
 3612 4c98 1B290000 		_UNNEST
 3613              	
 3614              		.p2align 2 
 3615              	/****************************************
 3616              	 doDOES> ( -- a )
 3617              	 runtime action of 		 
 3618              	 leave parameter field address on stack 
 3619              	hidden word used by compiler 
 3620              	***************************************/
 3621              	DODOES:
 3622 4c9c 504700BF 		_NEST 
 3623 4ca0 8D2B0000 		_ADR	RFROM
 3624 4ca4 B52D0000 		_ADR	CELLP 
 3625 4ca8 752D0000 		_ADR	ONEP  
 3626 4cac 1D320000 		_ADR LAST 
 3627 4cb0 612B0000 		_ADR AT
 3628 4cb4 3D400000 		_ADR NAMET 
 3629 4cb8 B52D0000 		_ADR CELLP 
 3630 4cbc 4D2B0000 		_ADR STORE  
 3631 4cc0 1B290000 		_UNNEST 
 3632              	
 3633              		.p2align 2
 3634              	/**********************
 3635              	  DOES> ( -- )
 3636              	  compile time action
ARM GAS  forth.s 			page 172


 3637              	*************************/
 3638 4cc4 5C4C0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3638      C5444F45 
 3638      533E00BF 
 3639 4cd0 504700BF 		_NEST 
 3640 4cd4 DB2A0000 		_DOLIT DODOES 
 3640      9C4C0000 
 3641 4cdc E54B0000 		_ADR CALLC 
 3642 4ce0 DB2A0000 		_DOLIT	UNNEST
 3642      1A290000 
 3643 4ce8 E54B0000 		_ADR	CALLC 
 3644 4cec 25290000 		_ADR COMPI_NEST
 3645 4cf0 DB2A0000 		_DOLIT RFROM 
 3645      8C2B0000 
 3646 4cf8 E54B0000 		_ADR	CALLC
 3647 4cfc 1B290000 		_UNNEST 
 3648              	
 3649              	
 3650              	/****************************
 3651              	  DEFER@ ( "name" -- a )
 3652              	  return value of code field 
 3653              	  of defered function. 
 3654              	******************************/
 3655 4d00 C84C0000 		_HEADER DEFERAT,6,"DEFER@"
 3655      06444546 
 3655      45524000 
 3656 4d0c 504700BF 		_NEST 
 3657 4d10 41460000 		_ADR TICK
 3658 4d14 B52D0000 		_ADR CELLP 
 3659 4d18 612B0000 		_ADR AT 
 3660 4d1c 852D0000 		_ADR ONEM 
 3661 4d20 1B290000 		_UNNEST 
 3662              	
 3663              	/*********************************
 3664              	 DEFER! ( "name1" "name2" -- )
 3665              	 assign an action to a defered word 
 3666              	************************************/
 3667 4d24 044D0000 		_HEADER DEFERSTO,6,"DEFER!"
 3667      06444546 
 3667      45522100 
 3668 4d30 504700BF 		_NEST 
 3669 4d34 41460000 		_ADR TICK 
 3670 4d38 752D0000 		_ADR ONEP 
 3671 4d3c 41460000 		_ADR TICK 
 3672 4d40 B52D0000 		_ADR CELLP 
 3673 4d44 4D2B0000 		_ADR STORE 
 3674 4d48 1B290000 		_UNNEST
 3675              	
 3676              	/****************************
 3677              	  DEFER ( "name" -- )
 3678              	  create a defered definition
 3679              	*****************************/
 3680 4d4c 284D0000 		_HEADER DEFER,5,"DEFER"
 3680      05444546 
 3680      455200BF 
 3681 4d58 504700BF 		_NEST 
 3682 4d5c A94D0000 		_ADR CREAT 
ARM GAS  forth.s 			page 173


 3683 4d60 DB2A0000 		_DOLIT UNNEST 
 3683      1A290000 
 3684 4d68 E54B0000 		_ADR CALLC 
 3685 4d6c DB2A0000 		_DOLIT DEFER_NOP
 3685      904D0000 
 3686 4d74 752D0000 		_ADR ONEP 
 3687 4d78 1D320000 		_ADR LAST 
 3688 4d7c 612B0000 		_ADR AT 
 3689 4d80 3D400000 		_ADR NAMET 
 3690 4d84 B52D0000 		_ADR CELLP 
 3691 4d88 4D2B0000 		_ADR STORE 
 3692 4d8c 1B290000 		_UNNEST 
 3693              	DEFER_NOP:
 3694 4d90 504700BF 		_NEST  
 3695 4d94 D92A0000 		_ADR NOP 
 3696 4d98 1B290000 		_UNNEST 
 3697              	
 3698              	/******************************
 3699              	    CREATE	( -- //  string> )
 3700              	 	Compile a new array entry 
 3701              		without allocating code space.
 3702              	***********************************/
 3703 4d9c 504D0000 		_HEADER CREAT,6,"CREATE"
 3703      06435245 
 3703      41544500 
 3704 4da8 504700BF 		_NEST 
 3705 4dac 1D400000 		_ADR	TOKEN
 3706 4db0 914A0000 		_ADR	SNAME
 3707 4db4 894B0000 		_ADR	OVERT
 3708 4db8 25290000 		_ADR	COMPI_NEST 
 3709 4dbc DB2A0000 		_DOLIT	DOVAR
 3709      D0300000 
 3710 4dc4 E54B0000 		_ADR	CALLC
 3711 4dc8 1B290000 		_UNNEST
 3712              	
 3713              	/*******************************
 3714              	    VARIABLE	( -- //  string> )
 3715              	 	Compile a new variable 
 3716              		initialized to 0.
 3717              	***********************************/
 3718 4dcc A04D0000 		_HEADER VARIA,8,"VARIABLE"
 3718      08564152 
 3718      4941424C 
 3718      450000BF 
 3719 4ddc 504700BF 		_NEST
 3720 4de0 A94D0000 		_ADR	CREAT
 3721 4de4 DB2A0000 		_DOLIT	0
 3721      00000000 
 3722 4dec 81460000 		_ADR	COMMA
 3723 4df0 DB2A0000 		_DOLIT UNNEST
 3723      1A290000 
 3724 4df8 E54B0000 		_ADR	CALLC  
 3725 4dfc 1B290000 		_UNNEST
 3726              	
 3727              	
 3728              	/***********
 3729              	  Tools
ARM GAS  forth.s 			page 174


 3730              	***********/
 3731              	
 3732              	/*************************
 3733              	    dm+	 ( a u -- a )
 3734              	 	Dump u bytes from , 
 3735              		leaving a+u on the stack.
 3736              	hidden word used by DUMP 
 3737              	****************************/
 3738              	DMP:
 3739 4e00 504700BF 		_NEST
 3740 4e04 792C0000 		_ADR	OVER
 3741 4e08 DB2A0000 		_DOLIT	4
 3741      04000000 
 3742 4e10 9D3C0000 		_ADR	UDOTR			// display address
 3743 4e14 693B0000 		_ADR	SPACE
 3744 4e18 D12B0000 		_ADR	TOR			// start count down loop
 3745 4e1c 2F2B0000 		_BRAN	PDUM2			// skip first pass
 3745      3C4E0000 
 3746              	PDUM1:
 3747 4e24 552C0000 	  _ADR	DUPP
 3748 4e28 812B0000 		_ADR	CAT
 3749 4e2c DB2A0000 		_DOLIT	3
 3749      03000000 
 3750 4e34 9D3C0000 		_ADR	UDOTR			// display numeric data
 3751 4e38 752D0000 		_ADR	ONEP			// increment address
 3752              	PDUM2:
 3753 4e3c FD2A0000 	  _ADR	DONXT
 3754 4e40 244E0000 		.word	PDUM1	// loop till done
 3755 4e44 1B290000 		_UNNEST
 3756              		.p2align 2 
 3757              	//    DUMP	( a u -- )
 3758              	// 	Dump u bytes from a, in a formatted manner.
 3759              	
 3760              	/**********************
 3761              		DUMP ( a n -- )
 3762              		hex dump memory 
 3763              	*********************/
 3764 4e48 D04D0000 		_HEADER DUMP,4,"DUMP"
 3764      0444554D 
 3764      500000BF 
 3765 4e54 504700BF 		_NEST
 3766 4e58 DB2A0000 		_DOLIT  15 
 3766      0F000000 
 3767 4e60 192D0000 		_ADR    PLUS 
 3768 4e64 DB2A0000 		_DOLIT  0xFFFFFFF0 
 3768      F0FFFFFF 
 3769 4e6c 992C0000 		_ADR    ANDD 
 3770 4e70 652C0000 		_ADR    SWAP 
 3771 4e74 DB2A0000 		_DOLIT  0xFFFFFFFC
 3771      FCFFFFFF 
 3772 4e7c 992C0000 		_ADR    ANDD 
 3773 4e80 652C0000 		_ADR    SWAP 
 3774 4e84 49310000 		_ADR	BASE
 3775 4e88 612B0000 		_ADR	AT
 3776 4e8c D12B0000 		_ADR	TOR
 3777 4e90 A9380000 		_ADR	HEX			// save radix,set hex
 3778 4e94 DB2A0000 		_DOLIT	16
ARM GAS  forth.s 			page 175


 3778      10000000 
 3779 4e9c B1340000 		_ADR	SLASH			// change count to lines
 3780 4ea0 D12B0000 		_ADR	TOR
 3781 4ea4 2F2B0000 		_BRAN	DUMP4			// start count down loop
 3781      D44E0000 
 3782              	DUMP1:
 3783 4eac F13B0000 	    _ADR	CR
 3784 4eb0 DB2A0000 		_DOLIT	16
 3784      10000000 
 3785 4eb8 8D2E0000 		_ADR	DDUP
 3786 4ebc 014E0000 		_ADR	DMP			// display numeric
 3787 4ec0 3D2E0000 		_ADR	ROT
 3788 4ec4 3D2E0000 		_ADR	ROT
 3789 4ec8 693B0000 		_ADR	SPACE
 3790 4ecc 693B0000 		_ADR	SPACE
 3791 4ed0 BD3B0000 		_ADR	TYPEE			// display printable characters
 3792              	DUMP4:
 3793 4ed4 FD2A0000 	  _DONXT	DUMP1	// loop till done
 3793      AC4E0000 
 3794              	DUMP3:
 3795 4edc 452C0000 		_ADR	DROP
 3796 4ee0 8D2B0000 		_ADR	RFROM
 3797 4ee4 49310000 		_ADR	BASE
 3798 4ee8 4D2B0000 		_ADR	STORE			// restore radix
 3799 4eec 1B290000 		_UNNEST
 3800              	
 3801              	/*******************************
 3802              	   TRACE. display in hexadecimal
 3803              	   TRACE. use a different buffer 
 3804              	   than DOT  to avoid current 
 3805              	   display overwrite.
 3806              	*******************************/ 
 3807              	TDOT: // ( u -- )
 3808 4ef0 504700BF 		_NEST 
 3809 4ef4 49310000 		_ADR BASE 
 3810 4ef8 612B0000 		_ADR AT 
 3811 4efc D12B0000 		_ADR TOR
 3812 4f00 A9380000 		_ADR HEX  
 3813 4f04 C5310000 		_ADR HLD 
 3814 4f08 612B0000 		_ADR AT 
 3815 4f0c D12B0000 		_ADR TOR   // R: base *hold 
 3816 4f10 C5350000 		_ADR HERE 
 3817 4f14 DB2A0000 		_DOLIT 160 
 3817      A0000000 
 3818 4f1c 192D0000 		_ADR PLUS
 3819 4f20 552C0000 		_ADR DUPP 
 3820 4f24 D12B0000 		_ADR TOR  
 3821 4f28 C5310000 		_ADR HLD 
 3822 4f2c 4D2B0000 		_ADR STORE
 3823 4f30 51330000 		_ADR STOD 
 3824 4f34 F9370000 		_ADR DIGS  
 3825 4f38 452C0000 		_ADR DROP
 3826 4f3c DB2A0000 		_DOLIT '$'
 3826      24000000 
 3827 4f44 AD370000 		_ADR HOLD 
 3828 4f48 C5310000 		_ADR HLD 
 3829 4f4c 612B0000 		_ADR AT
ARM GAS  forth.s 			page 176


 3830 4f50 8D2B0000 		_ADR RFROM   
 3831 4f54 792C0000 		_ADR OVER 
 3832 4f58 292D0000 		_ADR SUBB 
 3833 4f5c 693B0000 		_ADR SPACE 
 3834 4f60 BD3B0000 		_ADR TYPEE 
 3835 4f64 8D2B0000 		_ADR RFROM 
 3836 4f68 C5310000 		_ADR HLD 
 3837 4f6c 4D2B0000 		_ADR STORE 
 3838 4f70 8D2B0000 		_ADR RFROM 
 3839 4f74 49310000 		_ADR BASE 
 3840 4f78 4D2B0000 		_ADR STORE 
 3841 4f7c 1B290000 		_UNNEST 
 3842              	
 3843              	/**********************
 3844              	   .S	  ( ... -- ... )
 3845              	 	Display the contents 
 3846              		of the data stack.
 3847              	*************************/
 3848 4f80 4C4E0000 		_HEADER DOTS,2,".S"
 3848      022E5300 
 3849 4f88 504700BF 		_NEST
 3850 4f8c 79350000 		_ADR	DEPTH	// stack depth
 3851 4f90 D12B0000 		_ADR	TOR		// start count down loop
 3852 4f94 2F2B0000 		_BRAN	DOTS2  // skip first pass
 3852      A84F0000 
 3853              	DOTS1:
 3854 4f9c BD2B0000 		_ADR	RAT
 3855 4fa0 9D350000 		_ADR	PICK
 3856 4fa4 F14E0000 		_ADR	TDOT // index stack, display contents
 3857              	DOTS2:
 3858 4fa8 FD2A0000 		_DONXT	DOTS1 // loop till done
 3858      9C4F0000 
 3859 4fb0 F13B0000 		_ADR	CR 
 3860 4fb4 1B290000 		_UNNEST
 3861              	
 3862              	RBASE: 
 3863 4fb8 47F8046D 		_PUSH 
 3864 4fbc 4FF47F46 		_MOV32 TOS,RPP 
 3864      C2F20106 
 3865 4fc4 FDF7A6BC 		_NEXT 
 3866              	
 3867              	
 3868              	/**************************
 3869              	  R.  display return stack 
 3870              	**************************/
 3871              	RDOT: 
 3872 4fc8 504700BF 		_NEST 
 3873 4fcc B94F0000 		_ADR RBASE
 3874 4fd0 312C0000 		_ADR RPAT 
 3875 4fd4 292D0000 		_ADR SUBB
 3876 4fd8 F92D0000 		_ADR CELLSL   
 3877 4fdc DB2A0000 		_DOLIT 2
 3877      02000000 
 3878 4fe4 292D0000 		_ADR SUBB 
 3879 4fe8 D12B0000 		_ADR TOR
 3880 4fec B94F0000 		_ADR RBASE 
 3881 4ff0 C52D0000 	1:	_ADR CELLM 
ARM GAS  forth.s 			page 177


 3882 4ff4 552C0000 		_ADR DUPP 
 3883 4ff8 612B0000 		_ADR AT 
 3884 4ffc F14E0000 		_ADR TDOT 
 3885 5000 8D2B0000 		_ADR RFROM   
 3886 5004 852D0000 		_ADR ONEM 
 3887 5008 552C0000 		_ADR DUPP
 3888 500c D12B0000 		_ADR TOR 
 3889 5010 8D2F0000 		_ADR ZEQUAL   
 3890 5014 1B2B0000 		_QBRAN 1b
 3890      F04F0000 
 3891 501c 8D2B0000 		_ADR RFROM  
 3892 5020 652E0000 		_ADR DDROP
 3893 5024 F13B0000 		_ADR CR   
 3894 5028 1B290000 		_UNNEST 
 3895              	
 3896              	/**************************
 3897              		TRACE ( -- )
 3898              		display stacks content 
 3899              	**************************/
 3900 502c 844F0000 		_HEADER TRACE,5,"TRACE"
 3900      05545241 
 3900      434500BF 
 3901 5038 504700BF 		_NEST
 3902 503c F13B0000 		_ADR CR 
 3903 5040 DB2A0000 		_DOLIT '>' 
 3903      3E000000 
 3904 5048 DB2A0000 		_DOLIT 'S'
 3904      53000000 
 3905 5050 E5290000 		_ADR EMIT 
 3906 5054 E5290000 		_ADR EMIT  
 3907 5058 894F0000 		_ADR DOTS
 3908 505c DB2A0000 		_DOLIT '>'
 3908      3E000000 
 3909 5064 DB2A0000 		_DOLIT 'R'
 3909      52000000 
 3910 506c E5290000 		_ADR EMIT 
 3911 5070 E5290000 		_ADR EMIT 
 3912 5074 C94F0000 		_ADR RDOT 
 3913 5078 1B290000 		_UNNEST 
 3914              	
 3915              	
 3916              	/*****************************
 3917              	    >NAME	( ca -- na | F )
 3918              	 	Convert code address 
 3919              		to a name address.
 3920              	*****************************/
 3921 507c 30500000 		_HEADER TNAME,5,">NAME"
 3921      053E4E41 
 3921      4D4500BF 
 3922 5088 504700BF 		_NEST
 3923 508c D12B0000 		_ADR	TOR			//  
 3924 5090 DD310000 		_ADR	CNTXT			//  va
 3925 5094 612B0000 		_ADR	AT			//  na
 3926              	TNAM1:
 3927 5098 552C0000 		_ADR	DUPP			//  na na
 3928 509c 1B2B0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3928      CC500000 
ARM GAS  forth.s 			page 178


 3929 50a4 552C0000 		_ADR	DUPP			//  na na
 3930 50a8 3D400000 		_ADR	NAMET			//  na ca
 3931 50ac BD2B0000 		_ADR	RAT			//  na ca code
 3932 50b0 C12C0000 		_ADR	XORR			//  na f --
 3933 50b4 1B2B0000 		_QBRAN	TNAM2
 3933      CC500000 
 3934 50bc C52D0000 		_ADR	CELLM			//  la 
 3935 50c0 612B0000 		_ADR	AT			//  next_na
 3936 50c4 2F2B0000 		_BRAN	TNAM1
 3936      98500000 
 3937              	TNAM2:	
 3938 50cc 8D2B0000 		_ADR	RFROM
 3939 50d0 452C0000 		_ADR	DROP			//  0|na --
 3940 50d4 1B290000 		_UNNEST			// 0
 3941              	
 3942              	/********************************
 3943              	    .ID	 ( na -- )
 3944              	 	Display the name at address.
 3945              	********************************/
 3946 50d8 80500000 		_HEADER DOTID,3,".ID"
 3946      032E4944 
 3947 50e0 504700BF 		_NEST
 3948 50e4 292E0000 		_ADR	QDUP			// if zero no name
 3949 50e8 1B2B0000 		_QBRAN	DOTI1
 3949      08510000 
 3950 50f0 A9300000 		_ADR	COUNT
 3951 50f4 DB2A0000 		_DOLIT	0x1F
 3951      1F000000 
 3952 50fc 992C0000 		_ADR	ANDD			// mask lexicon bits
 3953 5100 BD3B0000 		_ADR	TYPEE
 3954 5104 1B290000 		_UNNEST			// display name string
 3955              	DOTI1:
 3956 5108 593C0000 		_DOTQP	9," {noName}"
 3956      09207B6E 
 3956      6F4E616D 
 3956      657D00BF 
 3957 5118 1B290000 		_UNNEST
 3958              	
 3959              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3960              	.if WANT_SEE 
 3961              	/*******************************
 3962              	    SEE	 ( -- //  string> )
 3963              	 	A simple decompiler.
 3964              	*******************************/
 3965              		_HEADER SEE,3,"SEE"
 3966              		_NEST
 3967              		_ADR	TICK	//  ca --, starting address
 3968              		_ADR	CR	
 3969              		_DOLIT	20
 3970              		_ADR	TOR
 3971              	SEE1:
 3972              		_ADR	CELLP			//  a
 3973              		_ADR	DUPP			//  a a
 3974              		_ADR	DECOMP		//  a
 3975              		_DONXT	SEE1
 3976              		_ADR	DROP
 3977              		_UNNEST
ARM GAS  forth.s 			page 179


 3978              	
 3979              	/*************************
 3980              	 	DECOMPILE ( a -- )
 3981              	 	Convert code in a.  
 3982              		Display name of command or as data.
 3983              	*************************************/
 3984              		_HEADER DECOMP,9,"DECOMPILE"
 3985              		_NEST
 3986              		_ADR	DUPP			//  a a
 3987              	// 	_ADR	TOR			//  a
 3988              		_ADR	AT			//  a code
 3989              		_ADR	DUPP			//  a code code
 3990              		_DOLIT	0xF800D000 //0xF800F800
 3991              		_ADR	ANDD
 3992              		_DOLIT	0xF000D000 //0xF800F000
 3993              		_ADR	EQUAL			//  a code ?
 3994              		_ADR	INVER 
 3995              		_QBRAN	DECOM2	//  not a command
 3996              		//  a valid_code --, extract address and display name
 3997              		MOVW	IP,#0xFFE
 3998              		MOV	WP,TOS
 3999              		LSL	TOS,TOS,#21		//  get bits 22-12
 4000              		ASR	TOS,TOS,#9		//  with sign extension
 4001              		LSR	WP,WP,#15		//  get bits 11-1
 4002              		AND	WP,WP,IP		//  retain only bits 11-1
 4003              		ORR	TOS,TOS,WP		//  get bits 22-1
 4004              		NOP
 4005              		_ADR	OVER			//  a offset a
 4006              		_ADR	PLUS			//  a target-4
 4007              		_ADR	CELLP			//  a target
 4008              		_ADR	TNAME			//  a na/0 --, is it a name?
 4009              		_ADR	QDUP			//  name address or zero
 4010              		_QBRAN	DECOM1
 4011              		_ADR	SPACE			//  a na
 4012              		_ADR	DOTID			//  a --, display name
 4013              	// 	_ADR	RFROM			//  a
 4014              		_ADR	DROP
 4015              		_UNNEST
 4016              	DECOM1:	// _ADR	RFROM		//  a
 4017              		_ADR	AT			//  data
 4018              		_ADR	UDOT			//  display data
 4019              		_UNNEST
 4020              	DECOM2:
 4021              		_ADR	UDOT
 4022              	// 	_ADR	RFROM
 4023              		_ADR	DROP
 4024              		_UNNEST
 4025              	.endif 
 4026              	
 4027              	/**********************
 4028              		VLIST ( -- )
 4029              		WORDS alias 
 4030              		+ display words count 
 4031              	**********************/
 4032 511c DC500000 		_HEADER VLIST,5,"VLIST"
 4032      05564C49 
 4032      535400BF 
ARM GAS  forth.s 			page 180


 4033 5128 504700BF 		_NEST 
 4034 512c 4D510000 		_ADR WORDS
 4035 5130 F13B0000 		_ADR CR 
 4036 5134 91510000 		_ADR WC
 4037 5138 053D0000 		_ADR DOT    
 4038 513c 1B290000 		_UNNEST 
 4039              	
 4040              	/*********************
 4041              	    WORDS	( -- )
 4042              	 	Display the names 
 4043              		in the context vocabulary.
 4044              	*******************************/
 4045 5140 20510000 		_HEADER WORDS,5,"WORDS"
 4045      05574F52 
 4045      445300BF 
 4046 514c 504700BF 		_NEST
 4047 5150 F13B0000 		_ADR	CR
 4048 5154 DD310000 		_ADR	CNTXT
 4049 5158 612B0000 		_ADR	AT			// only in context
 4050              	WORS1:
 4051 515c 292E0000 		_ADR	QDUP			// ?at end of list
 4052 5160 1B2B0000 		_QBRAN	WORS2
 4052      84510000 
 4053 5168 552C0000 		_ADR	DUPP
 4054 516c 693B0000 		_ADR	SPACE
 4055 5170 E1500000 		_ADR	DOTID			// display a name
 4056 5174 C52D0000 		_ADR	CELLM
 4057 5178 612B0000 		_ADR	AT
 4058 517c 2F2B0000 		_BRAN	WORS1
 4058      5C510000 
 4059              	WORS2:
 4060 5184 1B290000 		_UNNEST
 4061              	
 4062              	/*****************************
 4063              		WC ( - n )
 4064              		count words in dictionary 
 4065              	******************************/
 4066 5188 44510000 		_HEADER WC,2,"WC"
 4066      02574300 
 4067 5190 504700BF 		_NEST 
 4068 5194 DB2A0000 		_DOLIT 0 
 4068      00000000 
 4069 519c 1D320000 		_ADR LAST
 4070 51a0 612B0000 	1:	_ADR AT
 4071 51a4 292E0000 		_ADR QDUP
 4072 51a8 1B2B0000 		_QBRAN 9f
 4072      C8510000 
 4073 51b0 652C0000 		_ADR SWAP
 4074 51b4 752D0000 		_ADR ONEP
 4075 51b8 652C0000 		_ADR SWAP
 4076 51bc C52D0000 		_ADR CELLM
 4077 51c0 2F2B0000 		_BRAN 1b
 4077      A0510000 
 4078 51c8 1B290000 	9:	_UNNEST 
 4079              	
 4080              	/*************************
 4081              		MARK <string> ( -- )
ARM GAS  forth.s 			page 181


 4082              	    create forget point 
 4083              		in dictionary 
 4084              	*************************/	
 4085 51cc 8C510000 		_HEADER MARK,4,"MARK"
 4085      044D4152 
 4085      4B0000BF 
 4086 51d8 504700BF 		_NEST
 4087 51dc A94D0000 		_ADR CREAT 
 4088 51e0 9D4C0000 		_ADR DODOES 
 4089 51e4 1B290000 		_UNNEST
 4090 51e8 504700BF 		_NEST  
 4091 51ec 8D2B0000 		_ADR RFROM 
 4092 51f0 DB2A0000 		_DOLIT 8
 4092      08000000 
 4093 51f8 292D0000 		_ADR SUBB
 4094 51fc 89500000 		_ADR TNAME
 4095 5200 C52D0000 		_ADR CELLM
 4096 5204 612B0000 		_ADR AT  
 4097 5208 1D320000 		_ADR LAST 
 4098 520c 4D2B0000 		_ADR STORE 
 4099 5210 894B0000 		_ADR OVERT
 4100 5214 1B290000 		_UNNEST 
 4101              	
 4102              	/*********************************
 4103              		ARRAY "name" ( n -- )
 4104              	    create an array of n elements 
 4105              	*********************************/
 4106 5218 D0510000 		_HEADER ARRAY,5,"ARRAY"
 4106      05415252 
 4106      415900BF 
 4107 5224 504700BF 		_NEST 
 4108 5228 1D400000 		_ADR	TOKEN
 4109 522c 914A0000 		_ADR	SNAME
 4110 5230 894B0000 		_ADR	OVERT
 4111 5234 25290000 		_ADR	COMPI_NEST
 4112 5238 DB2A0000 		_DOLIT	DO_ARRAY
 4112      64520000 
 4113 5240 E54B0000 		_ADR	CALLC
 4114 5244 DB2A0000 		_DOLIT	UNNEST 
 4114      1A290000 
 4115 524c E54B0000 		_ADR	CALLC  
 4116 5250 DB2A0000 		_DOLIT  4 
 4116      04000000 
 4117 5258 392D0000 		_ADR    STAR 
 4118 525c 69460000 		_ADR    ALLOT 
 4119 5260 1B290000 		_UNNEST 	
 4120              	
 4121              	// does> du array
 4122              	DO_ARRAY:
 4123 5264 504700BF 		_NEST  
 4124 5268 DB2A0000 		_DOLIT 4 
 4124      04000000 
 4125 5270 392D0000 		_ADR STAR  
 4126 5274 BD2B0000 		_ADR RAT  
 4127 5278 B52D0000 		_ADR CELLP 
 4128 527c 192D0000 		_ADR PLUS  
 4129 5280 1B290000 		_UNNEST 
ARM GAS  forth.s 			page 182


 4130              	
 4131              	
 4132              	/****************
 4133              	  cold start
 4134              	*****************/
 4135              	
 4136              	/**********************************
 4137              	    VER	 ( -- n )
 4138              	 	Return the version 
 4139              		number of this implementation.
 4140              	hidden word used by COLD
 4141              	**********************************/
 4142              	VERSN:
 4143 5284 504700BF 		_NEST
 4144 5288 DB2A0000 		_DOLIT	VER*256+EXT
 4144      00010000 
 4145 5290 1B290000 		_UNNEST
 4146              	
 4147              	/*********************
 4148              	    hi	  ( -- )
 4149              	 	Display the sign-on 
 4150              		message.
 4151              	***********************/
 4152 5294 1C520000 		_HEADER HI,2,"HI"
 4152      02484900 
 4153 529c 504700BF 		_NEST
 4154 52a0 F13B0000 		_ADR	CR	// initialize I/O
 4155 52a4 593C0000 		_DOTQP	17, "beyond Jupiter, v" 
 4155      11626579 
 4155      6F6E6420 
 4155      4A757069 
 4155      7465722C 
 4156 52bc 49310000 		_ADR	BASE
 4157 52c0 612B0000 		_ADR	AT
 4158 52c4 A9380000 		_ADR	HEX	// save radix
 4159 52c8 85520000 		_ADR	VERSN
 4160 52cc 8D370000 		_ADR	BDIGS
 4161 52d0 DB2A0000 		_DOLIT  0 
 4161      00000000 
 4162 52d8 D9370000 		_ADR	DIG
 4163 52dc D9370000 		_ADR	DIG
 4164 52e0 DB2A0000 		_DOLIT	'.'
 4164      2E000000 
 4165 52e8 AD370000 		_ADR	HOLD
 4166 52ec F9370000 		_ADR	DIGS
 4167 52f0 55380000 		_ADR	EDIGS
 4168 52f4 BD3B0000 		_ADR	TYPEE	// format version number
 4169 52f8 49310000 		_ADR	BASE
 4170 52fc 4D2B0000 		_ADR	STORE
 4171 5300 F13B0000 		_ADR	CR
 4172 5304 1B290000 		_UNNEST			// restore radix
 4173              	
 4174              	/***********************
 4175              	   HI_BOTH ( -- )
 4176              	   display sign-on 
 4177              	   on both CONSOLE
 4178              	***********************/
ARM GAS  forth.s 			page 183


 4179              	HI_BOTH:
 4180 5308 504700BF 	    _NEST 
 4181 530c F5070000 		_ADR LOCAL 
 4182 5310 25080000 		_ADR CONSOLE 
 4183 5314 9D520000 		_ADR HI 
 4184 5318 0D080000 		_ADR SERIAL 
 4185 531c 25080000 		_ADR CONSOLE 
 4186 5320 9D520000 		_ADR HI
 4187 5324 1B290000 		_UNNEST 
 4188              	
 4189              	/**********************
 4190              	 check if PS2 keyboard 
 4191              	 present.
 4192              	**********************/
 4193              	PS2_QUERY: 
 4194 5328 504700BF 		_NEST 
 4195 532c DB2A0000 		_DOLIT 400 
 4195      90010000 
 4196 5334 7D2A0000 		_ADR PAUSE
 4197 5338 2D160000 		_ADR PS2_QKEY
 4198 533c 1B2B0000 		_QBRAN 1f
 4198      58530000 
 4199 5344 DB2A0000 		_DOLIT BAT_OK 
 4199      AA000000 
 4200 534c C12C0000 		_ADR XORR 
 4201 5350 1B2B0000 		_QBRAN 9f 
 4201      9C530000 
 4202 5358 15180000 	1:	_ADR KBD_RST
 4203 535c DB2A0000 		_DOLIT BAT_OK 
 4203      AA000000 
 4204 5364 C12C0000 		_ADR XORR  
 4205 5368 1B2B0000 		_QBRAN 9f  
 4205      9C530000 
 4206              	// no ps2 keyboard 
 4207              	// swith to serial console
 4208 5370 F13B0000 		_ADR CR 
 4209 5374 593C0000 		_DOTQP 25,"no PS2 keyboard detected."
 4209      196E6F20 
 4209      50533220 
 4209      6B657962 
 4209      6F617264 
 4210 5394 0D080000 		_ADR SERIAL 
 4211 5398 25080000 		_ADR CONSOLE 
 4212 539c 1B290000 	9:	_UNNEST 
 4213              	
 4214              	/*************************
 4215              	   check PA8 to 
 4216              	   select console 
 4217              	   PA8 -> low  LOCAL 
 4218              	   PA8 -> high SERIAL 
 4219              	*************************/
 4220              	IF_SENSE:
 4221 53a0 504700BF 		_NEST 
 4222 53a4 F5070000 		_ADR LOCAL 
 4223 53a8 DB2A0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4223      10000240 
 4224 53b0 612B0000 		_ADR AT 
ARM GAS  forth.s 			page 184


 4225 53b4 DB2A0000 		_DOLIT (1<<8)
 4225      00010000 
 4226 53bc 992C0000 		_ADR ANDD 
 4227 53c0 1B2B0000 		_QBRAN 9f 
 4227      CC530000 
 4228 53c8 752D0000 		_ADR ONEP 
 4229 53cc 25080000 	9:  _ADR CONSOLE 
 4230 53d0 1B290000 		_UNNEST 
 4231              	
 4232              	/****************************
 4233              	   display READY on active
 4234              	   console
 4235              	***************************/
 4236              	READY:
 4237 53d4 504700BF 	    _NEST 
 4238 53d8 593C0000 		_DOTQP 5,"READY"
 4238      05524541 
 4238      445900BF 
 4239 53e4 F13B0000 		_ADR  CR 
 4240 53e8 1B290000 	    _UNNEST 
 4241              	
 4242              	/********************
 4243              	    COLD	( -- )
 4244              	 	The high level cold 
 4245              		start sequence.
 4246              	**************************/
 4247 53ec 98520000 		.word	LINK 
 4248              		LINK = . 
 4249 53f0 04       	_LASTN:	.byte  4
 4250 53f1 434F4C44 		.ascii "COLD"
 4251 53f5 0000BF   		.p2align 2	
 4252              	COLD:
 4253 53f8 00B5FAF7 		_CALL forth_init 
 4253      CFFF5DF8 
 4253      04EB
 4254 5402 DFF858C0 		ldr IP,=COLD1 
 4255 5406 FDF785BA 		_NEXT
 4256 540a 00BF     		.p2align 2 
 4257              	COLD1:
 4258 540c DB2A0000 		_DOLIT  0 
 4258      00000000 
 4259 5414 B12A0000 		_ADR ULED // turn off user LED 
 4260 5418 DB2A0000 		_DOLIT	UZERO
 4260      28060000 
 4261 5420 DB2A0000 		_DOLIT	UPP
 4261      00000020 
 4262 5428 DB2A0000 		_DOLIT	ULAST-UZERO
 4262      B0000000 
 4263 5430 65360000 		_ADR	MOVE 			// initialize user area
 4264 5434 A1450000 		_ADR	PRESE			// initialize stack and TIB
 4265 5438 C11A0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4266 543c 29530000 		_ADR 	PS2_QUERY  
 4267 5440 31310000 		_ADR	TBOOT
 4268 5444 15360000 		_ADR	ATEXE			// application boot
 4269 5448 894B0000 		_ADR	OVERT
 4270 544c A1530000 		_ADR	IF_SENSE
 4271 5450 2F2B0000 		_BRAN	QUIT			// start interpretation
ARM GAS  forth.s 			page 185


 4271      C0450000 
 4272              	COLD2:
 4273              		.p2align 2 	
 4274              	CTOP:
 4275 5458 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4276              	
 4277              	
 4278 545c 0C540000 	  .end 
ARM GAS  forth.s 			page 186


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 187


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 188


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 189


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 190


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 191


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 192


             forth.s:2968   .text:000000000000455c EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:393    .text:0000000000000360 reset_handler
              init.s:222    .text:0000000000000104 nmi_handler
              init.s:240    .text:000000000000013c hardfault_handler
              init.s:259    .text:0000000000000178 memfault_handler
              init.s:286    .text:00000000000001e4 busfault_handler
              init.s:319    .text:0000000000000278 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:345    .text:00000000000002dc systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000a34 tv_out_isr
          ser-term.s:35     .text:0000000000000700 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001310 kbd_isr
              init.s:196    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:414    .text:000000000000039c forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002914 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2989   .text:00000000000045a0 PRESE
             forth.s:2221   .text:0000000000003c58 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:0000000000002964 CFSR
             forth.s:494    .text:0000000000002c54 DUPP
             forth.s:429    .text:0000000000002bd0 TOR
             forth.s:292    .text:0000000000002ada DOLIT
             forth.s:1119   .text:0000000000003148 BASE
             forth.s:363    .text:0000000000002b4c STORE
             forth.s:2271   .text:0000000000003cdc UDOT
ARM GAS  forth.s 			page 193


              init.s:171    .text:0000000000000064 $d
             forth.s:400    .text:0000000000002b8c RFROM
             forth.s:529    .text:0000000000002c98 ANDD
             forth.s:333    .text:0000000000002b1a QBRAN
             forth.s:144    .text:0000000000002988 BFAR
             forth.s:178    .text:00000000000029e4 EMIT
             forth.s:2117   .text:0000000000003b68 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:89     .text:0000000000001df4 FPSCR
              init.s:375    .text:0000000000000338 reset_mcu
              init.s:195    .text:00000000000000b0 $t
              init.s:201    .text:00000000000000c2 fpu_except
              init.s:202    .text:00000000000000c2 $d
             forth.s:2163   .text:0000000000003bf0 CR
              init.s:208    .text:00000000000000f4 $d
              init.s:220    .text:0000000000000104 $t
              init.s:225    .text:000000000000010c nmi_hl
              init.s:226    .text:000000000000010c $d
              init.s:228    .text:0000000000000132 $t
              init.s:229    .text:0000000000000134 $d
             forth.s:2867   .text:0000000000004418 ABORT
              init.s:238    .text:000000000000013c $t
              init.s:245    .text:000000000000014e hardfault_hl
              init.s:246    .text:000000000000014e $d
              init.s:249    .text:0000000000000170 $d
              init.s:257    .text:0000000000000178 $t
              init.s:264    .text:000000000000018a memfault_hl
              init.s:265    .text:000000000000018a $d
              init.s:268    .text:00000000000001b8 $d
              init.s:284    .text:00000000000001e4 $t
              init.s:291    .text:00000000000001f6 busfault_hl
              init.s:292    .text:00000000000001f6 $d
             forth.s:261    .text:0000000000002ab0 ULED
             forth.s:1092   .text:0000000000003104 MSEC
              init.s:300    .text:000000000000023e $t
              init.s:301    .text:0000000000000240 $d
              init.s:308    .text:000000000000026c $d
              init.s:317    .text:0000000000000278 $t
              init.s:324    .text:000000000000028a usagefault_hl
              init.s:325    .text:000000000000028a $d
              init.s:327    .text:00000000000002ae $t
              init.s:328    .text:00000000000002b0 $d
             forth.s:568    .text:0000000000002cf0 RSHIFT
              init.s:343    .text:00000000000002dc $t
              init.s:354    .text:00000000000002f6 systick_exit
              init.s:357    .text:00000000000002f8 user_reboot
              init.s:361    .text:000000000000030a ur
              init.s:362    .text:000000000000030a $d
              init.s:370    .text:0000000000000328 user_reboot_msg
             forth.s:1032   .text:00000000000030a8 COUNT
             forth.s:2145   .text:0000000000003bbc TYPEE
              init.s:369    .text:0000000000000326 $t
              init.s:371    .text:0000000000000328 $d
              init.s:518    .text:000000000000049c remap
              init.s:427    .text:00000000000003c4 init_devices
               fpu.s:71     .text:0000000000001dba fpu_init
ARM GAS  forth.s 			page 194


          ser-term.s:56     .text:000000000000072e ser_init
             tvout.s:74     .text:0000000000000984 tv_init
           ps2_kbd.s:307    .text:0000000000001530 kbd_init
         spi-flash.s:41     .text:0000000000001944 flash_spi_init
             forth.s:4252   .text:00000000000053f8 COLD
             forth.s:83     .text:000000000000290c NEST
              init.s:440    .text:00000000000003e2 wait_hserdy
              init.s:461    .text:0000000000000404 wait_pllrdy
              init.s:473    .text:000000000000041e wait_sws
              init.s:608    .text:0000000000000566 gpio_config
              init.s:683    .text:0000000000000612 gpio_out
              init.s:543    .text:00000000000004dc nvic_set_priority
              init.s:698    .text:0000000000000628 UZERO
              init.s:736    .text:00000000000006d8 ULAST
              init.s:552    .text:00000000000004f4 negative_irq
              init.s:564    .text:000000000000050e nvic_enable_irq
              init.s:581    .text:0000000000000538 nvic_disable_irq
              init.s:645    .text:00000000000005ce input_pull
              init.s:638    .text:00000000000005bc output_type
              init.s:661    .text:00000000000005e4 gpio_speed
              init.s:699    .text:0000000000000628 $d
             forth.s:4179   .text:0000000000005308 HI_BOTH
           ps2_kbd.s:396    .text:000000000000162c PS2_QKEY
             tvout.s:563    .text:0000000000000ef4 TV_EMIT
             forth.s:2905   .text:0000000000004478 INTER
             forth.s:4249   .text:00000000000053f0 _LASTN
             forth.s:4274   .text:0000000000005458 CTOP
             forth.s:4248   .text:00000000000053f0 LINK
              init.s:741    .text:00000000000006d8 $d
          ser-term.s:33     .text:0000000000000700 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000786 $d
          ser-term.s:90     .text:000000000000078a _SER_QKEY
          ser-term.s:90     .text:0000000000000794 SER_QKEY
          ser-term.s:110    .text:00000000000007c0 $d
          ser-term.s:110    .text:00000000000007c4 _SER_EMIT
          ser-term.s:110    .text:00000000000007d0 SER_EMIT
          ser-term.s:124    .text:00000000000007ea $d
          ser-term.s:124    .text:00000000000007ee _LOCAL
          ser-term.s:124    .text:00000000000007f4 $t
          ser-term.s:124    .text:00000000000007f4 LOCAL
          ser-term.s:133    .text:0000000000000800 $d
          ser-term.s:133    .text:0000000000000804 _SERIAL
          ser-term.s:133    .text:000000000000080c SERIAL
          ser-term.s:142    .text:0000000000000818 $d
          ser-term.s:142    .text:000000000000081c _CONSOLE
          ser-term.s:142    .text:0000000000000824 $t
          ser-term.s:142    .text:0000000000000824 CONSOLE
             forth.s:4236   .text:00000000000053d4 READY
          ser-term.s:166    .text:0000000000000858 $d
          ser-term.s:166    .text:000000000000085c _ANSI_PARAM
          ser-term.s:166    .text:0000000000000868 ANSI_PARAM
          ser-term.s:168    .text:000000000000086c $d
             forth.s:636    .text:0000000000002d74 ONEP
             forth.s:1482   .text:0000000000003478 SLMOD
             forth.s:725    .text:0000000000002e28 QDUP
             forth.s:348    .text:0000000000002b2e BRAN
ARM GAS  forth.s 			page 195


             forth.s:586    .text:0000000000002d18 PLUS
             forth.s:644    .text:0000000000002d84 ONEM
             forth.s:90     .text:000000000000291a UNNEST
          ser-term.s:193    .text:00000000000008d8 _ANSI_ESC
          ser-term.s:193    .text:00000000000008e0 ANSI_ESC
          ser-term.s:195    .text:00000000000008e4 $d
          ser-term.s:205    .text:0000000000000904 _SER_AT
          ser-term.s:205    .text:000000000000090c SER_AT
          ser-term.s:207    .text:0000000000000910 $d
             forth.s:502    .text:0000000000002c64 SWAP
          ser-term.s:221    .text:0000000000000940 _SER_CLS
          ser-term.s:221    .text:0000000000000948 $t
          ser-term.s:221    .text:0000000000000948 SER_CLS
          ser-term.s:223    .text:000000000000094c $d
          ser-term.s:230    .text:0000000000000970 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000984 $t
             tvout.s:150    .text:0000000000000a60 state_vsync
             tvout.s:191    .text:0000000000000ab4 state_pre_video
             tvout.s:202    .text:0000000000000ac6 state_video_out
             tvout.s:237    .text:0000000000000b24 state_post_video
             tvout.s:254    .text:0000000000000b4a tv_isr_exit
             tvout.s:180    .text:0000000000000a9a sync_end
             tvout.s:246    .text:0000000000000b36 frame_end
             tvout.s:264    .text:0000000000000b4c $d
             tvout.s:264    .text:0000000000000b50 _BACKCOLOR
             tvout.s:264    .text:0000000000000b5c BACKCOLOR
             tvout.s:271    .text:0000000000000b68 $d
ARM GAS  forth.s 			page 196


             tvout.s:271    .text:0000000000000b6c _PENCOLOR
             tvout.s:271    .text:0000000000000b76 $t
             tvout.s:271    .text:0000000000000b78 PENCOLOR
             tvout.s:278    .text:0000000000000b84 $d
             tvout.s:278    .text:0000000000000b88 _CURSOR_COL
             tvout.s:278    .text:0000000000000b90 CURSOR_COL
             tvout.s:285    .text:0000000000000b9c $d
             tvout.s:285    .text:0000000000000ba0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000ba4 $t
             tvout.s:285    .text:0000000000000ba4 CURSOR_ROW
             tvout.s:292    .text:0000000000000bb0 $d
             tvout.s:292    .text:0000000000000bb4 _ROWY
             tvout.s:292    .text:0000000000000bba $t
             tvout.s:292    .text:0000000000000bbc ROWY
             tvout.s:299    .text:0000000000000bc8 $d
             tvout.s:299    .text:0000000000000bcc _COLX
             tvout.s:299    .text:0000000000000bd2 $t
             tvout.s:299    .text:0000000000000bd4 COLX
             tvout.s:306    .text:0000000000000be0 $d
             tvout.s:306    .text:0000000000000be4 _FONT
             tvout.s:306    .text:0000000000000bec FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000bf8 $d
             tvout.s:313    .text:0000000000000bfc _VIDBUFF
             tvout.s:313    .text:0000000000000c04 $t
             tvout.s:313    .text:0000000000000c04 VIDBUFF
             tvout.s:325    .text:0000000000000c0e $d
             tvout.s:325    .text:0000000000000c12 _PLOT
             tvout.s:325    .text:0000000000000c18 PLOT
             tvout.s:373    .text:0000000000000c9c plot_op
             tvout.s:341    .text:0000000000000c44 op_back
             tvout.s:350    .text:0000000000000c5e op_pen
             tvout.s:359    .text:0000000000000c78 op_invert
             tvout.s:363    .text:0000000000000c80 op_xor
             tvout.s:373    .text:0000000000000c9c $d
             tvout.s:378    .text:0000000000000ca4 _VSYNC
             tvout.s:378    .text:0000000000000caa $t
             tvout.s:378    .text:0000000000000cac VSYNC
             tvout.s:386    .text:0000000000000cb6 $d
             tvout.s:386    .text:0000000000000cba _CLS
             tvout.s:386    .text:0000000000000cbe $t
             tvout.s:386    .text:0000000000000cc0 CLS
             tvout.s:410    .text:0000000000000d02 $d
             tvout.s:410    .text:0000000000000d06 _CLRLINE
             tvout.s:410    .text:0000000000000d0e $t
             tvout.s:410    .text:0000000000000d10 CLRLINE
             tvout.s:412    .text:0000000000000d14 $d
             forth.s:604    .text:0000000000002d38 STAR
             forth.s:1709   .text:00000000000036ac FILL
             tvout.s:427    .text:0000000000000d48 _SCROLLUP
             tvout.s:427    .text:0000000000000d54 SCROLLUP
             tvout.s:429    .text:0000000000000d58 $d
             forth.s:595    .text:0000000000002d28 SUBB
             forth.s:1677   .text:0000000000003664 MOVE
             tvout.s:448    .text:0000000000000da0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000dac SCROLLDOWN
             tvout.s:450    .text:0000000000000db0 $d
ARM GAS  forth.s 			page 197


             tvout.s:467    .text:0000000000000df0 _TV_CRLF
             tvout.s:467    .text:0000000000000df8 $t
             tvout.s:467    .text:0000000000000df8 TV_CRLF
             tvout.s:482    .text:0000000000000e1a $d
             tvout.s:482    .text:0000000000000e1e _RIGHT
             tvout.s:482    .text:0000000000000e24 $t
             tvout.s:482    .text:0000000000000e24 RIGHT
             tvout.s:495    .text:0000000000000e38 $d
             tvout.s:495    .text:0000000000000e3c _LEFT
             tvout.s:495    .text:0000000000000e44 LEFT
             tvout.s:511    .text:0000000000000e70 FONT_PIXEL
             tvout.s:518    .text:0000000000000e80 INCR_X
             tvout.s:525    .text:0000000000000e8c NEXT_PIXEL
             tvout.s:534    .text:0000000000000e94 CHAR_ROW
             tvout.s:536    .text:0000000000000e98 $d
             forth.s:775    .text:0000000000002e8c DDUP
             forth.s:420    .text:0000000000002bbc RAT
             forth.s:314    .text:0000000000002afc DONXT
             forth.s:766    .text:0000000000002e78 TDROP
             tvout.s:551    .text:0000000000000ed4 CHAR_FONT
             tvout.s:552    .text:0000000000000ed4 $t
             tvout.s:563    .text:0000000000000ee8 $d
             tvout.s:563    .text:0000000000000eec _TV_EMIT
             tvout.s:563    .text:0000000000000ef4 $t
             tvout.s:565    .text:0000000000000ef8 $d
             forth.s:928    .text:0000000000002fd8 ULESS
             tvout.s:593    .text:0000000000000f7c CTRL_KEY
             forth.s:373    .text:0000000000002b60 AT
             forth.s:735    .text:0000000000002e3c ROT
             forth.s:391    .text:0000000000002b80 CAT
             tvout.s:660    .text:0000000000001064 SHOW_CURSOR
             tvout.s:691    .text:00000000000010ec HIDE_CURSOR
             forth.s:903    .text:0000000000002fa0 EQUAL
             tvout.s:650    .text:0000000000001044 BACK_SPACE
             forth.s:486    .text:0000000000002c44 DROP
             tvout.s:618    .text:0000000000000fec CAR_RET
             tvout.s:629    .text:0000000000001004 LN_FEED
             tvout.s:619    .text:0000000000000fec $t
             tvout.s:620    .text:0000000000000ff0 $d
             tvout.s:630    .text:0000000000001004 $t
             tvout.s:631    .text:0000000000001008 $d
             forth.s:547    .text:0000000000002cc0 XORR
             tvout.s:651    .text:0000000000001044 $t
             tvout.s:652    .text:0000000000001048 $d
             tvout.s:660    .text:0000000000001058 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001064 $t
             tvout.s:663    .text:0000000000001068 $d
             forth.s:717    .text:0000000000002e18 TWOSL
             forth.s:381    .text:0000000000002b6c CSTOR
             forth.s:757    .text:0000000000002e64 DDROP
             tvout.s:691    .text:00000000000010e0 _HIDE_CURSOR
             tvout.s:691    .text:00000000000010ec $t
             tvout.s:694    .text:00000000000010f0 $d
             forth.s:577    .text:0000000000002d08 LSHIFT
             forth.s:538    .text:0000000000002cac ORR
             tvout.s:704    .text:0000000000001118 _TV_AT
             tvout.s:704    .text:000000000000111e $t
ARM GAS  forth.s 			page 198


             tvout.s:704    .text:0000000000001120 TV_AT
             tvout.s:719    .text:0000000000001144 $d
             tvout.s:719    .text:0000000000001148 _INPUT
             tvout.s:719    .text:000000000000114e $t
             tvout.s:719    .text:0000000000001150 INPUT
             tvout.s:721    .text:0000000000001154 $d
             forth.s:1621   .text:00000000000035dc PAD
             forth.s:2813   .text:0000000000004364 ACCEP
             forth.s:512    .text:0000000000002c78 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001180 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
ARM GAS  forth.s 			page 199


       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
ARM GAS  forth.s 			page 200


       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:000000000000118c sc_ascii
         mcSaite.inc:100    .text:0000000000001240 shifted
         mcSaite.inc:151    .text:00000000000012a0 altchar
         mcSaite.inc:167    .text:00000000000012b0 extended
         mcSaite.inc:191    .text:00000000000012d8 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000130e $t
           ps2_kbd.s:179    .text:000000000000143a send_bit
           ps2_kbd.s:107    .text:0000000000001370 start_bit
           ps2_kbd.s:118    .text:0000000000001394 parity_bit
           ps2_kbd.s:125    .text:00000000000013a8 stop_bit
           ps2_kbd.s:152    .text:00000000000013fe store_code
ARM GAS  forth.s 			page 201


           ps2_kbd.s:253    .text:00000000000014ce do_async_key
           ps2_kbd.s:204    .text:000000000000147e send_parity
           ps2_kbd.s:211    .text:0000000000001490 send_stop
           ps2_kbd.s:218    .text:000000000000149a rx_ack_bit
           ps2_kbd.s:236    .text:00000000000014ba is_async_key
           ps2_kbd.s:286    .text:000000000000151e async_keys
           ps2_kbd.s:378    .text:0000000000001604 table_scan
           ps2_kbd.s:260    .text:00000000000014e0 set_async_key
           ps2_kbd.s:295    .text:000000000000152c async_jump
           ps2_kbd.s:265    .text:00000000000014ee shift_key
           ps2_kbd.s:273    .text:00000000000014fe set_reset
           ps2_kbd.s:268    .text:00000000000014f4 ctrl_key
           ps2_kbd.s:271    .text:00000000000014fa alt_key
           ps2_kbd.s:287    .text:000000000000151e $d
           ps2_kbd.s:340    .text:00000000000015ac $d
           ps2_kbd.s:340    .text:00000000000015b0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000015ba $t
           ps2_kbd.s:340    .text:00000000000015bc KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000015cc keycode
           ps2_kbd.s:365    .text:00000000000015f4 wait_code
           ps2_kbd.s:396    .text:000000000000161e $d
           ps2_kbd.s:396    .text:0000000000001622 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001678 inkey_exit
           ps2_kbd.s:418    .text:000000000000167c pause_key
           ps2_kbd.s:427    .text:0000000000001692 do_modifiers
           ps2_kbd.s:436    .text:00000000000016aa shift_down
           ps2_kbd.s:440    .text:00000000000016b0 altchar_down
           ps2_kbd.s:444    .text:00000000000016b6 ctrl_down
           ps2_kbd.s:452    .text:00000000000016d2 do_capslock
           ps2_kbd.s:478    .text:00000000000016f6 kbd_send
           ps2_kbd.s:553    .text:00000000000017ea kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001808 $d
           ps2_kbd.s:567    .text:000000000000180c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001814 $t
           ps2_kbd.s:567    .text:0000000000001814 KBD_RST
           ps2_kbd.s:591    .text:000000000000185e $d
           ps2_kbd.s:591    .text:0000000000001862 _KBD_LED
           ps2_kbd.s:591    .text:000000000000186a $t
           ps2_kbd.s:591    .text:000000000000186c KBD_LED
           ps2_kbd.s:616    .text:00000000000018c0 $d
           ps2_kbd.s:616    .text:00000000000018c4 _CAPS_LED
           ps2_kbd.s:616    .text:00000000000018d0 CAPS_LED
           ps2_kbd.s:633    .text:00000000000018fa $d
           ps2_kbd.s:633    .text:00000000000018fe _WKEY
           ps2_kbd.s:633    .text:0000000000001908 WKEY
           ps2_kbd.s:635    .text:000000000000190c $d
           ps2_kbd.s:640    .text:0000000000001924 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001944 $t
         spi-flash.s:85     .text:00000000000019e6 $d
         spi-flash.s:85     .text:00000000000019ea _CHIP_SEL
         spi-flash.s:85     .text:00000000000019f4 CHIP_SEL
         spi-flash.s:97     .text:0000000000001a12 $d
         spi-flash.s:97     .text:0000000000001a16 _CHIP_DSEL
ARM GAS  forth.s 			page 202


         spi-flash.s:97     .text:0000000000001a20 $t
         spi-flash.s:97     .text:0000000000001a20 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001a4e $d
         spi-flash.s:113    .text:0000000000001a52 _RD_BYTE
         spi-flash.s:113    .text:0000000000001a5a $t
         spi-flash.s:113    .text:0000000000001a5c RD_BYTE
         spi-flash.s:133    .text:0000000000001a84 $d
         spi-flash.s:133    .text:0000000000001a88 _WR_BYTE
         spi-flash.s:133    .text:0000000000001a90 $t
         spi-flash.s:133    .text:0000000000001a90 WR_BYTE
         spi-flash.s:151    .text:0000000000001ab4 $d
         spi-flash.s:151    .text:0000000000001ab8 _WR_DIS
         spi-flash.s:151    .text:0000000000001ac0 WR_DIS
         spi-flash.s:153    .text:0000000000001ac4 $d
         spi-flash.s:163    .text:0000000000001ae0 _WR_ENBL
         spi-flash.s:163    .text:0000000000001ae8 $t
         spi-flash.s:163    .text:0000000000001ae8 WR_ENBL
         spi-flash.s:165    .text:0000000000001aec $d
         spi-flash.s:175    .text:0000000000001b08 _RD_SR
         spi-flash.s:175    .text:0000000000001b0e $t
         spi-flash.s:175    .text:0000000000001b10 RD_SR
         spi-flash.s:177    .text:0000000000001b14 $d
         spi-flash.s:185    .text:0000000000001b38 sr_cmd
         spi-flash.s:191    .text:0000000000001b3f _SEND_ADR
         spi-flash.s:191    .text:0000000000001b48 $t
         spi-flash.s:191    .text:0000000000001b48 SEND_ADR
         spi-flash.s:193    .text:0000000000001b4c $d
         spi-flash.s:208    .text:0000000000001b80 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001b8a $t
         spi-flash.s:208    .text:0000000000001b8c WAIT_DONE
         spi-flash.s:210    .text:0000000000001b90 $d
         spi-flash.s:223    .text:0000000000001bc0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001bca $t
         spi-flash.s:223    .text:0000000000001bcc ERASE_BLK
         spi-flash.s:225    .text:0000000000001bd0 $d
         spi-flash.s:238    .text:0000000000001bf8 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001c04 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001c08 $d
         spi-flash.s:256    .text:0000000000001c38 _RD_BLK
         spi-flash.s:256    .text:0000000000001c40 RD_BLK
         spi-flash.s:258    .text:0000000000001c44 $d
         spi-flash.s:278    .text:0000000000001c8c _WR_BLK
         spi-flash.s:278    .text:0000000000001c94 WR_BLK
         spi-flash.s:280    .text:0000000000001c98 $d
             forth.s:2326   .text:0000000000003d7c HDOT
         spi-flash.s:316    .text:0000000000001cf0 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001cfc $t
         spi-flash.s:316    .text:0000000000001cfc SEARCH_FILE
         spi-flash.s:319    .text:0000000000001d00 $d
         spi-flash.s:325    .text:0000000000001d08 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001d14 ERASE_FILE
         spi-flash.s:328    .text:0000000000001d18 $d
         spi-flash.s:334    .text:0000000000001d20 _DIR
         spi-flash.s:334    .text:0000000000001d24 $t
         spi-flash.s:334    .text:0000000000001d24 DIR
         spi-flash.s:337    .text:0000000000001d28 $d
         spi-flash.s:343    .text:0000000000001d30 _SAVE
ARM GAS  forth.s 			page 203


         spi-flash.s:343    .text:0000000000001d38 SAVE
         spi-flash.s:346    .text:0000000000001d3c $d
         spi-flash.s:352    .text:0000000000001d44 _LOAD
         spi-flash.s:352    .text:0000000000001d4c LOAD
         spi-flash.s:355    .text:0000000000001d50 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001d78 p10
               fpu.s:59     .text:0000000000001da4 _PWR10
               fpu.s:59     .text:0000000000001daa $t
               fpu.s:59     .text:0000000000001dac PWR10
               fpu.s:89     .text:0000000000001de8 $d
               fpu.s:89     .text:0000000000001dec _FPSCR
               fpu.s:89     .text:0000000000001df2 $t
               fpu.s:99     .text:0000000000001e04 $d
               fpu.s:99     .text:0000000000001e08 _CLR_FPSCR
               fpu.s:99     .text:0000000000001e12 $t
               fpu.s:99     .text:0000000000001e14 CLR_FPSCR
               fpu.s:110    .text:0000000000001e24 $d
               fpu.s:110    .text:0000000000001e28 _TOS0
               fpu.s:110    .text:0000000000001e2c $t
               fpu.s:110    .text:0000000000001e2c TOS0
               fpu.s:119    .text:0000000000001e38 $d
               fpu.s:119    .text:0000000000001e3c _TOS1
               fpu.s:119    .text:0000000000001e40 $t
               fpu.s:119    .text:0000000000001e40 TOS1
               fpu.s:128    .text:0000000000001e4c $d
               fpu.s:128    .text:0000000000001e50 _TOS2
               fpu.s:128    .text:0000000000001e54 $t
               fpu.s:128    .text:0000000000001e54 TOS2
               fpu.s:137    .text:0000000000001e60 $d
               fpu.s:137    .text:0000000000001e64 _S0FROM
               fpu.s:137    .text:0000000000001e68 $t
               fpu.s:137    .text:0000000000001e68 S0FROM
               fpu.s:146    .text:0000000000001e74 $d
               fpu.s:146    .text:0000000000001e78 _S1FROM
               fpu.s:146    .text:0000000000001e7c $t
               fpu.s:146    .text:0000000000001e7c S1FROM
               fpu.s:155    .text:0000000000001e88 $d
               fpu.s:155    .text:0000000000001e8c _S2FROM
               fpu.s:155    .text:0000000000001e90 $t
               fpu.s:155    .text:0000000000001e90 S2FROM
               fpu.s:166    .text:0000000000001e9c $d
               fpu.s:166    .text:0000000000001ea0 _FTOS
               fpu.s:166    .text:0000000000001ea4 $t
               fpu.s:166    .text:0000000000001ea4 FTOS
               fpu.s:176    .text:0000000000001eb4 $d
               fpu.s:176    .text:0000000000001eb8 _TRUNC
               fpu.s:176    .text:0000000000001ebe $t
               fpu.s:176    .text:0000000000001ec0 TRUNC
               fpu.s:186    .text:0000000000001ed0 $d
               fpu.s:186    .text:0000000000001ed4 _STOF
               fpu.s:186    .text:0000000000001ed8 $t
               fpu.s:186    .text:0000000000001ed8 STOF
               fpu.s:196    .text:0000000000001ee8 $d
ARM GAS  forth.s 			page 204


               fpu.s:196    .text:0000000000001eec _FPLUS
               fpu.s:196    .text:0000000000001ef0 FPLUS
               fpu.s:209    .text:0000000000001f08 $d
               fpu.s:209    .text:0000000000001f0c _FSUBB
               fpu.s:209    .text:0000000000001f10 FSUBB
               fpu.s:223    .text:0000000000001f28 $d
               fpu.s:223    .text:0000000000001f2c _FSTAR
               fpu.s:223    .text:0000000000001f30 FSTAR
               fpu.s:236    .text:0000000000001f48 $d
               fpu.s:236    .text:0000000000001f4c _FSLH
               fpu.s:236    .text:0000000000001f50 FSLH
               fpu.s:249    .text:0000000000001f68 $d
               fpu.s:249    .text:0000000000001f6c _FNEG
               fpu.s:249    .text:0000000000001f74 $t
               fpu.s:249    .text:0000000000001f74 FNEG
               fpu.s:259    .text:0000000000001f84 $d
               fpu.s:259    .text:0000000000001f88 _FABS
               fpu.s:259    .text:0000000000001f90 FABS
               fpu.s:271    .text:0000000000001fa4 $d
               fpu.s:271    .text:0000000000001fa8 _SQRT
               fpu.s:271    .text:0000000000001fb0 SQRT
               fpu.s:281    .text:0000000000001fc0 $d
               fpu.s:281    .text:0000000000001fc4 _FZLESS
               fpu.s:281    .text:0000000000001fc8 $t
               fpu.s:281    .text:0000000000001fc8 FZLESS
               fpu.s:293    .text:0000000000001fe0 $d
               fpu.s:293    .text:0000000000001fe4 _FGREAT
               fpu.s:293    .text:0000000000001fe8 FGREAT
               fpu.s:295    .text:0000000000001fec $d
             forth.s:843    .text:0000000000002f24 INVER
               fpu.s:304    .text:0000000000002000 _FLESS
               fpu.s:304    .text:0000000000002004 FLESS
               fpu.s:306    .text:0000000000002008 $d
               fpu.s:314    .text:0000000000002018 _FMIN
               fpu.s:314    .text:0000000000002020 FMIN
               fpu.s:316    .text:0000000000002024 $d
               fpu.s:327    .text:0000000000002048 _FMAX
               fpu.s:327    .text:0000000000002050 FMAX
               fpu.s:329    .text:0000000000002054 $d
               fpu.s:342    .text:0000000000002078 _FSIGN
               fpu.s:342    .text:000000000000207e $t
               fpu.s:342    .text:0000000000002080 FSIGN
               fpu.s:353    .text:0000000000002094 $d
               fpu.s:353    .text:0000000000002098 _FEXP
               fpu.s:353    .text:00000000000020a0 FEXP
               fpu.s:364    .text:00000000000020b8 $d
               fpu.s:364    .text:00000000000020bc _FMANT
               fpu.s:364    .text:00000000000020c2 $t
               fpu.s:364    .text:00000000000020c4 FMANT
               fpu.s:377    .text:00000000000020e0 $d
               fpu.s:377    .text:00000000000020e4 _PI
               fpu.s:377    .text:00000000000020e8 PI
               fpu.s:386    .text:00000000000020f8 $d
               fpu.s:386    .text:00000000000020fc _LOG2
               fpu.s:386    .text:0000000000002104 LOG2
               fpu.s:396    .text:0000000000002114 $d
               fpu.s:396    .text:0000000000002118 _LOG2TO10
ARM GAS  forth.s 			page 205


               fpu.s:396    .text:0000000000002120 $t
               fpu.s:396    .text:0000000000002120 LOG2TO10
               fpu.s:398    .text:0000000000002124 $d
             forth.s:521    .text:0000000000002c88 ZLESS
               fpu.s:416    .text:0000000000002154 _NUMBER
               fpu.s:416    .text:000000000000215c NUMBER
               fpu.s:418    .text:0000000000002160 $d
             forth.s:2044   .text:0000000000003a54 INTQ
            strtof.s:204    .text:0000000000002368 FLOATQ
               fpu.s:423    .text:000000000000217c $d
            strtof.s:29     .text:0000000000002184 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:000000000000219c p10p2at
            strtof.s:44     .text:000000000000219c $t
            strtof.s:45     .text:00000000000021a0 $d
            strtof.s:57     .text:00000000000021c0 bit_state
            strtof.s:58     .text:00000000000021c0 $t
            strtof.s:59     .text:00000000000021c4 $d
             forth.s:1592   .text:000000000000359c PICK
            strtof.s:76     .text:00000000000021e4 mant_div
            strtof.s:77     .text:00000000000021e4 $t
            strtof.s:78     .text:00000000000021e8 $d
            strtof.s:79     .text:00000000000021ec div_loop
             forth.s:964    .text:0000000000003020 GREAT
            strtof.s:107    .text:0000000000002238 mant_mult
            strtof.s:108    .text:0000000000002238 $t
            strtof.s:109    .text:000000000000223c $d
            strtof.s:110    .text:0000000000002240 mult_loop
            strtof.s:134    .text:000000000000228c exp_adjust
            strtof.s:135    .text:000000000000228c $t
            strtof.s:136    .text:0000000000002290 $d
             forth.s:746    .text:0000000000002e50 NROT
            strtof.s:148    .text:00000000000022cc pos_exp
             forth.s:859    .text:0000000000002f48 ABSS
            strtof.s:161    .text:00000000000022dc decimals
            strtof.s:162    .text:00000000000022dc $t
            strtof.s:163    .text:00000000000022e0 $d
             forth.s:1968   .text:000000000000396c PARSE_DIGITS
             forth.s:987    .text:000000000000304c MIN
            strtof.s:181    .text:0000000000002318 exponent
            strtof.s:182    .text:0000000000002318 $t
            strtof.s:183    .text:000000000000231c $d
             forth.s:2019   .text:0000000000003a0a NEGQ
             forth.s:851    .text:0000000000002f38 NEGAT
            strtof.s:204    .text:0000000000002360 _FLOATQ
            strtof.s:208    .text:000000000000236c $d
             forth.s:1924   .text:00000000000038ec DECIM
             forth.s:1941   .text:0000000000003910 DIGTQ
            strtof.s:245    .text:0000000000002408 must_be_dot
             forth.s:2003   .text:00000000000039f0 CHARQ
            strtof.s:290    .text:00000000000024e0 error1
            strtof.s:295    .text:00000000000024f4 error2
            strtof.s:279    .text:00000000000024a8 build_float
             forth.s:409    .text:0000000000002ba0 DRFROM
ARM GAS  forth.s 			page 206


            strtof.s:300    .text:0000000000002504 restore_base
              ftoa.s:28     .text:0000000000002514 rounding
              ftoa.s:48     .text:000000000000253c _ROUND
              ftoa.s:48     .text:0000000000002542 $t
              ftoa.s:48     .text:0000000000002544 ROUND
              ftoa.s:50     .text:0000000000002548 $d
             forth.s:976    .text:0000000000003038 MAX
              ftoa.s:67     .text:0000000000002588 _CSTOP
              ftoa.s:67     .text:000000000000258c $t
              ftoa.s:67     .text:000000000000258c CSTOP
              ftoa.s:78     .text:0000000000002598 $d
              ftoa.s:78     .text:000000000000259c _ITOA
              ftoa.s:78     .text:00000000000025a0 $t
              ftoa.s:78     .text:00000000000025a0 ITOA
              ftoa.s:79     .text:00000000000025a0 itoa
              ftoa.s:81     .text:00000000000025a4 $d
             forth.s:1339   .text:0000000000003350 STOD
             forth.s:798    .text:0000000000002ec0 DABS
             forth.s:1787   .text:000000000000378c BDIGS
             forth.s:1831   .text:00000000000037f8 DIGS
             forth.s:1849   .text:000000000000382c SIGN
             forth.s:1863   .text:0000000000003854 EDIGS
             forth.s:1657   .text:0000000000003634 CMOVE
              ftoa.s:113    .text:00000000000025f8 _SCALEUP
              ftoa.s:113    .text:0000000000002600 $t
              ftoa.s:113    .text:0000000000002600 SCALEUP
              ftoa.s:114    .text:0000000000002600 scaleup
              ftoa.s:116    .text:0000000000002604 $d
              ftoa.s:136    .text:0000000000002650 _SCALEDOWN
              ftoa.s:136    .text:000000000000265a $t
              ftoa.s:136    .text:000000000000265c SCALEDOWN
              ftoa.s:137    .text:000000000000265c scaledown
              ftoa.s:139    .text:0000000000002660 $d
              ftoa.s:173    .text:00000000000026d0 _EPART
              ftoa.s:173    .text:00000000000026d6 $t
              ftoa.s:173    .text:00000000000026d8 EPART
              ftoa.s:175    .text:00000000000026dc $d
              ftoa.s:197    .text:0000000000002710 _FPART
              ftoa.s:197    .text:0000000000002716 $t
              ftoa.s:197    .text:0000000000002718 FPART
              ftoa.s:199    .text:000000000000271c $d
              ftoa.s:241    .text:00000000000027a0 _IPART
              ftoa.s:241    .text:00000000000027a6 $t
              ftoa.s:241    .text:00000000000027a8 IPART
              ftoa.s:243    .text:00000000000027ac $d
              ftoa.s:290    .text:0000000000002840 _FTOA
              ftoa.s:290    .text:0000000000002844 $t
              ftoa.s:290    .text:0000000000002844 FTOA
              ftoa.s:292    .text:0000000000002848 $d
             forth.s:684    .text:0000000000002dd4 BLANK
              ftoa.s:322    .text:00000000000028a0 _FDOT
              ftoa.s:322    .text:00000000000028a4 FDOT
              ftoa.s:325    .text:00000000000028a8 $d
             forth.s:1610   .text:00000000000035c4 HERE
             forth.s:3060   .text:0000000000004668 ALLOT
             forth.s:80     .text:000000000000290c $t
             forth.s:103    .text:0000000000002924 COMPI_NEST
ARM GAS  forth.s 			page 207


             forth.s:116    .text:0000000000002942 TSTDIN
             forth.s:123    .text:000000000000294c TSTDOUT
             forth.s:132    .text:0000000000002956 $d
             forth.s:132    .text:000000000000295a _CFSR
             forth.s:144    .text:000000000000297a $d
             forth.s:144    .text:000000000000297e _BFAR
             forth.s:156    .text:000000000000299e $d
             forth.s:156    .text:00000000000029a2 _QKEY
             forth.s:156    .text:00000000000029a8 QKEY
             forth.s:158    .text:00000000000029ac $d
             forth.s:1644   .text:0000000000003614 ATEXE
             forth.s:166    .text:00000000000029bc _KEY
             forth.s:166    .text:00000000000029c0 $t
             forth.s:166    .text:00000000000029c0 KEY
             forth.s:168    .text:00000000000029c4 KEY1
             forth.s:169    .text:00000000000029c4 $d
             forth.s:178    .text:00000000000029dc _EMIT
             forth.s:180    .text:00000000000029e8 $d
             forth.s:214    .text:00000000000029f8 _RAND
             forth.s:214    .text:0000000000002a00 RAND
             forth.s:216    .text:0000000000002a04 $d
             forth.s:1083   .text:00000000000030f0 SEED
             forth.s:1495   .text:0000000000003498 MODD
             forth.s:245    .text:0000000000002a74 _PAUSE
             forth.s:245    .text:0000000000002a7a $t
             forth.s:245    .text:0000000000002a7c PAUSE
             forth.s:247    .text:0000000000002a80 $d
             forth.s:1101   .text:0000000000003118 TIMER
             forth.s:249    .text:0000000000002a88 PAUSE_LOOP
             forth.s:254    .text:0000000000002aa0 PAUSE_EXIT
             forth.s:261    .text:0000000000002aa8 _ULED
             forth.s:270    .text:0000000000002acc ULED_OFF
             forth.s:284    .text:0000000000002ad0 $d
             forth.s:284    .text:0000000000002ad4 _NOP
             forth.s:284    .text:0000000000002ad8 $t
             forth.s:284    .text:0000000000002ad8 NOP
             forth.s:301    .text:0000000000002ae4 $d
             forth.s:301    .text:0000000000002ae8 _EXECU
             forth.s:301    .text:0000000000002af0 $t
             forth.s:301    .text:0000000000002af0 EXECU
             forth.s:321    .text:0000000000002b0c NEXT1
             forth.s:339    .text:0000000000002b28 QBRAN1
             forth.s:356    .text:0000000000002b34 $d
             forth.s:356    .text:0000000000002b38 _EXIT
             forth.s:356    .text:0000000000002b40 EXIT
             forth.s:357    .text:0000000000002b40 $d
             forth.s:363    .text:0000000000002b48 _STORE
             forth.s:363    .text:0000000000002b4a $t
             forth.s:373    .text:0000000000002b58 $d
             forth.s:373    .text:0000000000002b5c _AT
             forth.s:373    .text:0000000000002b5e $t
             forth.s:381    .text:0000000000002b64 $d
             forth.s:381    .text:0000000000002b68 _CSTOR
             forth.s:391    .text:0000000000002b78 $d
             forth.s:391    .text:0000000000002b7c _CAT
             forth.s:400    .text:0000000000002b84 $d
             forth.s:400    .text:0000000000002b88 _RFROM
ARM GAS  forth.s 			page 208


             forth.s:409    .text:0000000000002b96 $d
             forth.s:409    .text:0000000000002b9a _DRFROM
             forth.s:409    .text:0000000000002b9e $t
             forth.s:420    .text:0000000000002bb2 $d
             forth.s:420    .text:0000000000002bb6 _RAT
             forth.s:429    .text:0000000000002bc6 $d
             forth.s:429    .text:0000000000002bca _TOR
             forth.s:438    .text:0000000000002bda $d
             forth.s:438    .text:0000000000002bde _DTOR
             forth.s:438    .text:0000000000002be2 $t
             forth.s:438    .text:0000000000002be4 DTOR
             forth.s:450    .text:0000000000002bf6 $d
             forth.s:450    .text:0000000000002bfa _RPSTOR
             forth.s:450    .text:0000000000002bfe $t
             forth.s:450    .text:0000000000002c00 RPSTOR
             forth.s:459    .text:0000000000002c08 $d
             forth.s:459    .text:0000000000002c0c _SPSTOR
             forth.s:459    .text:0000000000002c10 $t
             forth.s:459    .text:0000000000002c10 SPSTOR
             forth.s:468    .text:0000000000002c18 $d
             forth.s:468    .text:0000000000002c1c _SPAT
             forth.s:468    .text:0000000000002c20 $t
             forth.s:468    .text:0000000000002c20 SPAT
             forth.s:477    .text:0000000000002c28 $d
             forth.s:477    .text:0000000000002c2c _RPAT
             forth.s:477    .text:0000000000002c30 $t
             forth.s:477    .text:0000000000002c30 RPAT
             forth.s:486    .text:0000000000002c38 $d
             forth.s:486    .text:0000000000002c3c _DROP
             forth.s:494    .text:0000000000002c4a $d
             forth.s:494    .text:0000000000002c4e _DUPP
             forth.s:494    .text:0000000000002c52 $t
             forth.s:502    .text:0000000000002c5a $d
             forth.s:502    .text:0000000000002c5e _SWAP
             forth.s:512    .text:0000000000002c6c $d
             forth.s:512    .text:0000000000002c70 _OVER
             forth.s:521    .text:0000000000002c80 $d
             forth.s:521    .text:0000000000002c84 _ZLESS
             forth.s:529    .text:0000000000002c8e $d
             forth.s:529    .text:0000000000002c92 _ANDD
             forth.s:529    .text:0000000000002c96 $t
             forth.s:538    .text:0000000000002ca2 $d
             forth.s:538    .text:0000000000002ca6 _ORR
             forth.s:547    .text:0000000000002cb6 $d
             forth.s:547    .text:0000000000002cba _XORR
             forth.s:547    .text:0000000000002cbe $t
             forth.s:556    .text:0000000000002cca $d
             forth.s:556    .text:0000000000002cce _UPLUS
             forth.s:556    .text:0000000000002cd2 $t
             forth.s:556    .text:0000000000002cd4 UPLUS
             forth.s:568    .text:0000000000002ce4 $d
             forth.s:568    .text:0000000000002ce8 _RSHIFT
             forth.s:577    .text:0000000000002cfa $d
             forth.s:577    .text:0000000000002cfe _LSHIFT
             forth.s:586    .text:0000000000002d12 $d
             forth.s:586    .text:0000000000002d16 _PLUS
             forth.s:586    .text:0000000000002d18 $t
ARM GAS  forth.s 			page 209


             forth.s:595    .text:0000000000002d20 $d
             forth.s:595    .text:0000000000002d24 _SUBB
             forth.s:595    .text:0000000000002d26 $t
             forth.s:604    .text:0000000000002d32 $d
             forth.s:604    .text:0000000000002d36 _STAR
             forth.s:604    .text:0000000000002d38 $t
             forth.s:613    .text:0000000000002d42 $d
             forth.s:613    .text:0000000000002d46 _UMSTA
             forth.s:613    .text:0000000000002d4a $t
             forth.s:613    .text:0000000000002d4c UMSTA
             forth.s:625    .text:0000000000002d58 $d
             forth.s:625    .text:0000000000002d5c _MSTAR
             forth.s:625    .text:0000000000002d60 MSTAR
             forth.s:636    .text:0000000000002d6c $d
             forth.s:636    .text:0000000000002d70 _ONEP
             forth.s:644    .text:0000000000002d7a $d
             forth.s:644    .text:0000000000002d7e _ONEM
             forth.s:652    .text:0000000000002d8a $d
             forth.s:652    .text:0000000000002d8e _TWOP
             forth.s:652    .text:0000000000002d94 TWOP
             forth.s:660    .text:0000000000002d9a $d
             forth.s:660    .text:0000000000002d9e _TWOM
             forth.s:660    .text:0000000000002da4 TWOM
             forth.s:668    .text:0000000000002daa $d
             forth.s:668    .text:0000000000002dae _CELLP
             forth.s:668    .text:0000000000002db4 $t
             forth.s:668    .text:0000000000002db4 CELLP
             forth.s:676    .text:0000000000002dba $d
             forth.s:676    .text:0000000000002dbe _CELLM
             forth.s:676    .text:0000000000002dc4 $t
             forth.s:676    .text:0000000000002dc4 CELLM
             forth.s:684    .text:0000000000002dca $d
             forth.s:684    .text:0000000000002dce _BLANK
             forth.s:693    .text:0000000000002dde $d
             forth.s:693    .text:0000000000002de2 _CELLS
             forth.s:693    .text:0000000000002de8 $t
             forth.s:693    .text:0000000000002de8 CELLS
             forth.s:701    .text:0000000000002dee $d
             forth.s:701    .text:0000000000002df2 _CELLSL
             forth.s:701    .text:0000000000002df8 $t
             forth.s:701    .text:0000000000002df8 CELLSL
             forth.s:709    .text:0000000000002dfe $d
             forth.s:709    .text:0000000000002e02 _TWOST
             forth.s:709    .text:0000000000002e08 TWOST
             forth.s:717    .text:0000000000002e0e $d
             forth.s:717    .text:0000000000002e12 _TWOSL
             forth.s:725    .text:0000000000002e1e $d
             forth.s:725    .text:0000000000002e22 _QDUP
             forth.s:735    .text:0000000000002e32 $d
             forth.s:735    .text:0000000000002e36 _ROT
             forth.s:735    .text:0000000000002e3a $t
             forth.s:746    .text:0000000000002e46 $d
             forth.s:746    .text:0000000000002e4a _NROT
             forth.s:757    .text:0000000000002e5a $d
             forth.s:757    .text:0000000000002e5e _DDROP
             forth.s:757    .text:0000000000002e64 $t
             forth.s:766    .text:0000000000002e6e $d
ARM GAS  forth.s 			page 210


             forth.s:766    .text:0000000000002e72 _TDROP
             forth.s:766    .text:0000000000002e78 $t
             forth.s:775    .text:0000000000002e82 $d
             forth.s:775    .text:0000000000002e86 _DDUP
             forth.s:785    .text:0000000000002e98 $d
             forth.s:785    .text:0000000000002e9c _DPLUS
             forth.s:785    .text:0000000000002ea0 DPLUS
             forth.s:798    .text:0000000000002eb4 $d
             forth.s:798    .text:0000000000002eb8 _DABS
             forth.s:814    .text:0000000000002edc $d
             forth.s:814    .text:0000000000002ee0 _UDGREAT
             forth.s:814    .text:0000000000002ee4 $t
             forth.s:814    .text:0000000000002ee4 UDGREAT
             forth.s:831    .text:0000000000002f00 $d
             forth.s:831    .text:0000000000002f04 _DZEQUAL
             forth.s:831    .text:0000000000002f08 $t
             forth.s:831    .text:0000000000002f08 DZEQUAL
             forth.s:843    .text:0000000000002f1a $d
             forth.s:843    .text:0000000000002f1e _INVER
             forth.s:843    .text:0000000000002f22 $t
             forth.s:851    .text:0000000000002f2a $d
             forth.s:851    .text:0000000000002f2e _NEGAT
             forth.s:859    .text:0000000000002f3e $d
             forth.s:859    .text:0000000000002f42 _ABSS
             forth.s:859    .text:0000000000002f46 $t
             forth.s:869    .text:0000000000002f52 $d
             forth.s:869    .text:0000000000002f56 _CLZ
             forth.s:869    .text:0000000000002f5a $t
             forth.s:869    .text:0000000000002f5c CLZ
             forth.s:877    .text:0000000000002f62 $d
             forth.s:877    .text:0000000000002f66 _CTZ
             forth.s:877    .text:0000000000002f6a $t
             forth.s:877    .text:0000000000002f6c CTZ
             forth.s:892    .text:0000000000002f84 $d
             forth.s:892    .text:0000000000002f88 _ZEQUAL
             forth.s:892    .text:0000000000002f8c ZEQUAL
             forth.s:903    .text:0000000000002f9a $d
             forth.s:903    .text:0000000000002f9e _EQUAL
             forth.s:903    .text:0000000000002fa0 $t
             forth.s:915    .text:0000000000002fb0 $d
             forth.s:915    .text:0000000000002fb4 _DIFF
             forth.s:915    .text:0000000000002fb8 DIFF
             forth.s:928    .text:0000000000002fd0 $d
             forth.s:928    .text:0000000000002fd4 _ULESS
             forth.s:940    .text:0000000000002fe8 $d
             forth.s:940    .text:0000000000002fec _LESS
             forth.s:940    .text:0000000000002fee $t
             forth.s:940    .text:0000000000002ff0 LESS
             forth.s:952    .text:0000000000003000 $d
             forth.s:952    .text:0000000000003004 _UGREAT
             forth.s:952    .text:0000000000003008 UGREAT
             forth.s:964    .text:0000000000003018 $d
             forth.s:964    .text:000000000000301c _GREAT
             forth.s:964    .text:000000000000301e $t
             forth.s:976    .text:0000000000003030 $d
             forth.s:976    .text:0000000000003034 _MAX
             forth.s:976    .text:0000000000003038 $t
ARM GAS  forth.s 			page 211


             forth.s:987    .text:0000000000003044 $d
             forth.s:987    .text:0000000000003048 _MIN
             forth.s:987    .text:000000000000304c $t
             forth.s:998    .text:0000000000003058 $d
             forth.s:998    .text:000000000000305c _PSTOR
             forth.s:998    .text:0000000000003060 PSTOR
             forth.s:1010   .text:0000000000003070 $d
             forth.s:1010   .text:0000000000003074 _DSTOR
             forth.s:1010   .text:0000000000003078 DSTOR
             forth.s:1022   .text:000000000000308c $d
             forth.s:1022   .text:0000000000003090 _DAT
             forth.s:1022   .text:0000000000003094 DAT
             forth.s:1032   .text:000000000000309e $d
             forth.s:1032   .text:00000000000030a2 _COUNT
             forth.s:1032   .text:00000000000030a8 $t
             forth.s:1042   .text:00000000000030b4 $d
             forth.s:1042   .text:00000000000030b8 _DNEGA
             forth.s:1042   .text:00000000000030c0 $t
             forth.s:1042   .text:00000000000030c0 DNEGA
             forth.s:1059   .text:00000000000030d0 DOVAR
             forth.s:1070   .text:00000000000030dc DOCON
             forth.s:1083   .text:00000000000030e6 $d
             forth.s:1083   .text:00000000000030ea _SEED
             forth.s:1092   .text:00000000000030fa $d
             forth.s:1092   .text:00000000000030fe _MSEC
             forth.s:1101   .text:000000000000310e $d
             forth.s:1101   .text:0000000000003112 _TIMER
             forth.s:1101   .text:0000000000003118 $t
             forth.s:1110   .text:0000000000003124 $d
             forth.s:1110   .text:0000000000003128 _TBOOT
             forth.s:1110   .text:000000000000312e $t
             forth.s:1110   .text:0000000000003130 TBOOT
             forth.s:1119   .text:000000000000313c $d
             forth.s:1119   .text:0000000000003140 _BASE
             forth.s:1129   .text:0000000000003154 TEMP
             forth.s:1138   .text:0000000000003160 $d
             forth.s:1138   .text:0000000000003164 _SPAN
             forth.s:1138   .text:000000000000316c SPAN
             forth.s:1147   .text:0000000000003178 $d
             forth.s:1147   .text:000000000000317c _INN
             forth.s:1147   .text:0000000000003180 $t
             forth.s:1147   .text:0000000000003180 INN
             forth.s:1157   .text:000000000000318c $d
             forth.s:1157   .text:0000000000003190 _NTIB
             forth.s:1157   .text:0000000000003198 NTIB
             forth.s:1166   .text:00000000000031a4 $d
             forth.s:1166   .text:00000000000031a8 _TEVAL
             forth.s:1166   .text:00000000000031ae $t
             forth.s:1166   .text:00000000000031b0 TEVAL
             forth.s:1176   .text:00000000000031bc $d
             forth.s:1176   .text:00000000000031c0 _HLD
             forth.s:1176   .text:00000000000031c4 $t
             forth.s:1176   .text:00000000000031c4 HLD
             forth.s:1186   .text:00000000000031d0 $d
             forth.s:1186   .text:00000000000031d4 _CNTXT
             forth.s:1186   .text:00000000000031dc $t
             forth.s:1186   .text:00000000000031dc CNTXT
ARM GAS  forth.s 			page 212


             forth.s:1187   .text:00000000000031dc CRRNT
             forth.s:1197   .text:00000000000031e8 $d
             forth.s:1197   .text:00000000000031ec _CPP
             forth.s:1197   .text:00000000000031f0 CPP
             forth.s:1207   .text:00000000000031fc $d
             forth.s:1207   .text:0000000000003200 _FCP
             forth.s:1207   .text:0000000000003204 $t
             forth.s:1207   .text:0000000000003204 FCP
             forth.s:1217   .text:0000000000003210 $d
             forth.s:1217   .text:0000000000003214 _LAST
             forth.s:1217   .text:000000000000321c LAST
             forth.s:1231   .text:0000000000003228 $d
             forth.s:1231   .text:000000000000322c _USER_BEGIN
             forth.s:1231   .text:0000000000003238 USER_BEGIN
             forth.s:1235   .text:0000000000003244 USR_BGN_ADR
             forth.s:1236   .text:0000000000003244 $d
             forth.s:1242   .text:000000000000324c _USER_END
             forth.s:1242   .text:0000000000003258 USER_END
             forth.s:1246   .text:0000000000003264 USER_END_ADR
             forth.s:1247   .text:0000000000003264 $d
             forth.s:1259   .text:000000000000326c _WITHI
             forth.s:1259   .text:0000000000003274 WITHI
             forth.s:1261   .text:0000000000003278 $d
             forth.s:1276   .text:0000000000003298 _UMMOD
             forth.s:1276   .text:00000000000032a0 UMMOD
             forth.s:1280   .text:00000000000032aa UMMOD0
             forth.s:1287   .text:00000000000032ba UMMOD1
             forth.s:1293   .text:00000000000032c4 UMMOD2
             forth.s:1306   .text:00000000000032d0 $d
             forth.s:1306   .text:00000000000032d4 _MSMOD
             forth.s:1306   .text:00000000000032da $t
             forth.s:1306   .text:00000000000032dc MSMOD
             forth.s:1308   .text:00000000000032e0 $d
             forth.s:1317   .text:0000000000003308 MMOD1
             forth.s:1324   .text:0000000000003324 MMOD2
             forth.s:1332   .text:0000000000003344 MMOD3
             forth.s:1339   .text:000000000000334c _STOD
             forth.s:1339   .text:0000000000003350 $t
             forth.s:1348   .text:000000000000335c $d
             forth.s:1348   .text:0000000000003360 _D2STAR
             forth.s:1348   .text:0000000000003364 $t
             forth.s:1348   .text:0000000000003364 D2STAR
             forth.s:1360   .text:0000000000003376 $d
             forth.s:1360   .text:000000000000337a _D2SL
             forth.s:1360   .text:000000000000337e $t
             forth.s:1360   .text:0000000000003380 D2SL
             forth.s:1375   .text:000000000000338e $d
             forth.s:1375   .text:0000000000003392 _DSLMOD
             forth.s:1375   .text:0000000000003398 $t
             forth.s:1375   .text:0000000000003398 DSLMOD
             forth.s:1411   .text:00000000000033e4 $d
             forth.s:1411   .text:00000000000033e8 _DSLASH
             forth.s:1411   .text:00000000000033ec DSLASH
             forth.s:1413   .text:00000000000033f0 $d
             forth.s:1433   .text:0000000000003434 _DSTAR
             forth.s:1433   .text:0000000000003438 DSTAR
             forth.s:1482   .text:000000000000346e $d
ARM GAS  forth.s 			page 213


             forth.s:1482   .text:0000000000003472 _SLMOD
             forth.s:1484   .text:000000000000347c $d
             forth.s:1495   .text:0000000000003494 _MODD
             forth.s:1495   .text:0000000000003498 $t
             forth.s:1497   .text:000000000000349c $d
             forth.s:1506   .text:00000000000034ac _SLASH
             forth.s:1506   .text:00000000000034ae $t
             forth.s:1506   .text:00000000000034b0 SLASH
             forth.s:1508   .text:00000000000034b4 $d
             forth.s:1519   .text:00000000000034c8 _SSMOD
             forth.s:1519   .text:00000000000034ce $t
             forth.s:1519   .text:00000000000034d0 SSMOD
             forth.s:1521   .text:00000000000034d4 $d
             forth.s:1533   .text:00000000000034ec _STASL
             forth.s:1533   .text:00000000000034f0 STASL
             forth.s:1535   .text:00000000000034f4 $d
             forth.s:1549   .text:0000000000003508 _ALGND
             forth.s:1549   .text:0000000000003510 $t
             forth.s:1549   .text:0000000000003510 ALGND
             forth.s:1560   .text:0000000000003520 $d
             forth.s:1560   .text:0000000000003524 _TCHAR
             forth.s:1560   .text:000000000000352a $t
             forth.s:1560   .text:000000000000352c TCHAR
             forth.s:1562   .text:0000000000003530 $d
             forth.s:1572   .text:0000000000003568 TCHA1
             forth.s:1580   .text:0000000000003570 _DEPTH
             forth.s:1580   .text:0000000000003576 $t
             forth.s:1580   .text:0000000000003578 DEPTH
             forth.s:1592   .text:0000000000003590 $d
             forth.s:1592   .text:0000000000003594 _PICK
             forth.s:1594   .text:00000000000035a0 $d
             forth.s:1610   .text:00000000000035bc _HERE
             forth.s:1612   .text:00000000000035c8 $d
             forth.s:1621   .text:00000000000035d8 _PAD
             forth.s:1621   .text:00000000000035dc $t
             forth.s:1623   .text:00000000000035e0 $d
             forth.s:1634   .text:00000000000035f8 _TIB
             forth.s:1634   .text:00000000000035fc $t
             forth.s:1634   .text:00000000000035fc TIB
             forth.s:1644   .text:0000000000003606 $d
             forth.s:1644   .text:000000000000360a _ATEXE
             forth.s:1657   .text:0000000000003628 $d
             forth.s:1657   .text:000000000000362c _CMOVE
             forth.s:1657   .text:0000000000003632 $t
             forth.s:1664   .text:0000000000003646 CMOV1
             forth.s:1661   .text:000000000000363e CMOV0
             forth.s:1669   .text:0000000000003650 CMOV2
             forth.s:1677   .text:0000000000003658 $d
             forth.s:1677   .text:000000000000365c _MOVE
             forth.s:1695   .text:000000000000368e MOVE1
             forth.s:1692   .text:000000000000368a MOVE3
             forth.s:1689   .text:0000000000003686 MOVE0
             forth.s:1700   .text:0000000000003698 MOVE2
             forth.s:1709   .text:00000000000036a0 $d
             forth.s:1709   .text:00000000000036a4 _FILL
             forth.s:1717   .text:00000000000036ba FILL2
             forth.s:1713   .text:00000000000036b2 FILL1
ARM GAS  forth.s 			page 214


             forth.s:1727   .text:00000000000036c2 $d
             forth.s:1727   .text:00000000000036c6 _PACKS
             forth.s:1727   .text:00000000000036cc $t
             forth.s:1727   .text:00000000000036cc PACKS
             forth.s:1729   .text:00000000000036d0 $d
             forth.s:1758   .text:0000000000003728 _DIGIT
             forth.s:1758   .text:000000000000372e $t
             forth.s:1758   .text:0000000000003730 DIGIT
             forth.s:1760   .text:0000000000003734 $d
             forth.s:1775   .text:0000000000003768 _EXTRC
             forth.s:1775   .text:0000000000003770 $t
             forth.s:1775   .text:0000000000003770 EXTRC
             forth.s:1777   .text:0000000000003774 $d
             forth.s:1787   .text:0000000000003788 _BDIGS
             forth.s:1789   .text:0000000000003790 $d
             forth.s:1799   .text:00000000000037a4 _HOLD
             forth.s:1799   .text:00000000000037ac HOLD
             forth.s:1801   .text:00000000000037b0 $d
             forth.s:1817   .text:00000000000037d4 _DIG
             forth.s:1817   .text:00000000000037d6 $t
             forth.s:1817   .text:00000000000037d8 DIG
             forth.s:1819   .text:00000000000037dc $d
             forth.s:1831   .text:00000000000037f4 _DIGS
             forth.s:1833   .text:00000000000037fc DIGS1
             forth.s:1834   .text:00000000000037fc $d
             forth.s:1839   .text:0000000000003818 DIGS2
             forth.s:1849   .text:0000000000003824 _SIGN
             forth.s:1851   .text:0000000000003830 $d
             forth.s:1855   .text:0000000000003848 SIGN1
             forth.s:1863   .text:0000000000003850 _EDIGS
             forth.s:1865   .text:0000000000003858 $d
             forth.s:1880   .text:0000000000003874 STRR
             forth.s:1881   .text:0000000000003874 $t
             forth.s:1882   .text:0000000000003878 $d
             forth.s:1899   .text:00000000000038a4 _HEX
             forth.s:1899   .text:00000000000038a8 $t
             forth.s:1899   .text:00000000000038a8 HEX
             forth.s:1901   .text:00000000000038ac $d
             forth.s:1912   .text:00000000000038c4 _BIN
             forth.s:1912   .text:00000000000038c8 $t
             forth.s:1912   .text:00000000000038c8 BIN
             forth.s:1914   .text:00000000000038cc $d
             forth.s:1924   .text:00000000000038e4 _DECIM
             forth.s:1924   .text:00000000000038ec $t
             forth.s:1926   .text:00000000000038f0 $d
             forth.s:1941   .text:0000000000003908 _DIGTQ
             forth.s:1943   .text:0000000000003914 $d
             forth.s:1956   .text:000000000000395c DGTQ1
             forth.s:1969   .text:000000000000396c $t
             forth.s:1970   .text:0000000000003970 $d
             forth.s:2004   .text:00000000000039f0 $t
             forth.s:2021   .text:0000000000003a0e $d
             forth.s:2044   .text:0000000000003a4e _INTQ
             forth.s:2047   .text:0000000000003a58 $d
             forth.s:2117   .text:0000000000003b60 _SPACE
             forth.s:2117   .text:0000000000003b66 $t
             forth.s:2119   .text:0000000000003b6c $d
ARM GAS  forth.s 			page 215


             forth.s:2128   .text:0000000000003b7c _SPACS
             forth.s:2128   .text:0000000000003b84 SPACS
             forth.s:2130   .text:0000000000003b88 $d
             forth.s:2136   .text:0000000000003ba4 CHAR2
             forth.s:2134   .text:0000000000003ba0 CHAR1
             forth.s:2145   .text:0000000000003bb4 _TYPEE
             forth.s:2147   .text:0000000000003bc0 $d
             forth.s:2153   .text:0000000000003bd8 TYPE2
             forth.s:2149   .text:0000000000003bcc TYPE1
             forth.s:2163   .text:0000000000003bec _CR
             forth.s:2165   .text:0000000000003bf4 $d
             forth.s:2177   .text:0000000000003c10 DOSTR
             forth.s:2178   .text:0000000000003c10 $t
             forth.s:2180   .text:0000000000003c14 $d
             forth.s:2198   .text:0000000000003c3c STRQP
             forth.s:2199   .text:0000000000003c3c $t
             forth.s:2200   .text:0000000000003c40 $d
             forth.s:2209   .text:0000000000003c48 DOTST
             forth.s:2210   .text:0000000000003c48 $t
             forth.s:2211   .text:0000000000003c4c $d
             forth.s:2222   .text:0000000000003c58 $t
             forth.s:2223   .text:0000000000003c5c $d
             forth.s:2233   .text:0000000000003c6c _DOTR
             forth.s:2233   .text:0000000000003c70 DOTR
             forth.s:2235   .text:0000000000003c74 $d
             forth.s:2250   .text:0000000000003c98 _UDOTR
             forth.s:2250   .text:0000000000003c9c $t
             forth.s:2250   .text:0000000000003c9c UDOTR
             forth.s:2252   .text:0000000000003ca0 $d
             forth.s:2271   .text:0000000000003cd8 _UDOT
             forth.s:2273   .text:0000000000003ce0 $d
             forth.s:2287   .text:0000000000003d00 _DOT
             forth.s:2287   .text:0000000000003d02 $t
             forth.s:2287   .text:0000000000003d04 DOT
             forth.s:2289   .text:0000000000003d08 $d
             forth.s:2296   .text:0000000000003d2c DOT1
             forth.s:2306   .text:0000000000003d40 _DDOT
             forth.s:2306   .text:0000000000003d44 DDOT
             forth.s:2308   .text:0000000000003d48 $d
             forth.s:2326   .text:0000000000003d78 _HDOT
             forth.s:2328   .text:0000000000003d80 $d
             forth.s:2350   .text:0000000000003dc8 _QUEST
             forth.s:2350   .text:0000000000003dca $t
             forth.s:2350   .text:0000000000003dcc QUEST
             forth.s:2352   .text:0000000000003dd0 $d
             forth.s:2366   .text:0000000000003ddc PARS
             forth.s:2367   .text:0000000000003ddc $t
             forth.s:2368   .text:0000000000003de0 $d
             forth.s:2434   .text:0000000000003ef0 PARS8
             forth.s:2398   .text:0000000000003e64 PARS3
             forth.s:2381   .text:0000000000003e1c PARS1
             forth.s:2396   .text:0000000000003e60 PARS2
             forth.s:2402   .text:0000000000003e70 PARS4
             forth.s:2414   .text:0000000000003ea0 PARS5
             forth.s:2421   .text:0000000000003ec4 PARS6
             forth.s:2427   .text:0000000000003ed8 PARS7
             forth.s:2445   .text:0000000000003f04 _PARSE
ARM GAS  forth.s 			page 216


             forth.s:2445   .text:0000000000003f0a $t
             forth.s:2445   .text:0000000000003f0c PARSE
             forth.s:2447   .text:0000000000003f10 $d
             forth.s:2468   .text:0000000000003f50 _DOTPR
             forth.s:2468   .text:0000000000003f54 DOTPR
             forth.s:2470   .text:0000000000003f58 $d
             forth.s:2481   .text:0000000000003f70 _PAREN
             forth.s:2481   .text:0000000000003f72 $t
             forth.s:2481   .text:0000000000003f74 PAREN
             forth.s:2483   .text:0000000000003f78 $d
             forth.s:2494   .text:0000000000003f90 _BKSLA
             forth.s:2494   .text:0000000000003f92 $t
             forth.s:2494   .text:0000000000003f94 BKSLA
             forth.s:2496   .text:0000000000003f98 $d
             forth.s:2507   .text:0000000000003fb0 _CHAR
             forth.s:2507   .text:0000000000003fb8 CHAR
             forth.s:2509   .text:0000000000003fbc $d
             forth.s:2519   .text:0000000000003fd4 _IMCHAR
             forth.s:2519   .text:0000000000003fdc IMCHAR
             forth.s:2521   .text:0000000000003fe0 $d
             forth.s:3117   .text:0000000000004704 LITER
             forth.s:2530   .text:0000000000003ff0 _WORDD
             forth.s:2530   .text:0000000000003ff8 WORDD
             forth.s:2532   .text:0000000000003ffc $d
             forth.s:2544   .text:0000000000004014 _TOKEN
             forth.s:2544   .text:000000000000401a $t
             forth.s:2544   .text:000000000000401c TOKEN
             forth.s:2546   .text:0000000000004020 $d
             forth.s:2711   .text:0000000000004210 UPPER
             forth.s:2560   .text:0000000000004034 _NAMET
             forth.s:2560   .text:000000000000403a $t
             forth.s:2560   .text:000000000000403c NAMET
             forth.s:2562   .text:0000000000004040 $d
             forth.s:2581   .text:0000000000004060 _SAMEQ
             forth.s:2581   .text:0000000000004066 $t
             forth.s:2581   .text:0000000000004068 SAMEQ
             forth.s:2583   .text:000000000000406c $d
             forth.s:2600   .text:00000000000040b4 SAME2
             forth.s:2585   .text:0000000000004078 SAME1
             forth.s:2615   .text:00000000000040c8 FIND
             forth.s:2616   .text:00000000000040c8 $t
             forth.s:2617   .text:00000000000040cc $d
             forth.s:2624   .text:00000000000040e8 FIND1
             forth.s:2644   .text:0000000000004140 FIND6
             forth.s:2637   .text:0000000000004128 FIND2
             forth.s:2642   .text:0000000000004138 FIND3
             forth.s:2651   .text:0000000000004158 FIND4
             forth.s:2657   .text:0000000000004174 FIND5
             forth.s:2673   .text:000000000000419c _NAMEQ
             forth.s:2673   .text:00000000000041a2 $t
             forth.s:2673   .text:00000000000041a4 NAMEQ
             forth.s:2675   .text:00000000000041a8 $d
             forth.s:2690   .text:00000000000041bc _ASCIZ
             forth.s:2690   .text:00000000000041c2 $t
             forth.s:2690   .text:00000000000041c4 ASCIZ
             forth.s:2692   .text:00000000000041c8 $d
             forth.s:2711   .text:0000000000004208 _UPPER
ARM GAS  forth.s 			page 217


             forth.s:2711   .text:000000000000420e $t
             forth.s:2713   .text:0000000000004214 $d
             forth.s:2744   .text:0000000000004298 BKSP
             forth.s:2745   .text:0000000000004298 $t
             forth.s:2746   .text:000000000000429c $d
             forth.s:2760   .text:00000000000042e0 BACK1
             forth.s:2769   .text:00000000000042e4 TAP
             forth.s:2770   .text:00000000000042e4 $t
             forth.s:2771   .text:00000000000042e8 $d
             forth.s:2784   .text:0000000000004300 KTAP
             forth.s:2785   .text:0000000000004300 TTAP
             forth.s:2786   .text:0000000000004300 $t
             forth.s:2787   .text:0000000000004304 $d
             forth.s:2801   .text:0000000000004344 KTAP2
             forth.s:2798   .text:000000000000433c KTAP1
             forth.s:2813   .text:000000000000435c _ACCEP
             forth.s:2815   .text:0000000000004368 $d
             forth.s:2818   .text:0000000000004374 ACCP1
             forth.s:2834   .text:00000000000043bc ACCP4
             forth.s:2830   .text:00000000000043b0 ACCP2
             forth.s:2832   .text:00000000000043b4 ACCP3
             forth.s:2845   .text:00000000000043d0 _QUERY
             forth.s:2845   .text:00000000000043d6 $t
             forth.s:2845   .text:00000000000043d8 QUERY
             forth.s:2847   .text:00000000000043dc $d
             forth.s:2867   .text:0000000000004410 _ABORT
             forth.s:2867   .text:0000000000004416 $t
             forth.s:2869   .text:000000000000441c ABORT1
             forth.s:2870   .text:000000000000441c $d
             forth.s:3001   .text:00000000000045c0 QUIT
             forth.s:2885   .text:0000000000004444 ABORQ
             forth.s:2886   .text:0000000000004444 $t
             forth.s:2887   .text:0000000000004448 $d
             forth.s:2905   .text:000000000000446c _INTER
             forth.s:2907   .text:000000000000447c $d
             forth.s:2916   .text:00000000000044b8 INTE1
             forth.s:2913   .text:00000000000044ae $t
             forth.s:2914   .text:00000000000044b0 $d
             forth.s:2920   .text:00000000000044c8 INTE2
             forth.s:2927   .text:00000000000044d0 _LBRAC
             forth.s:2927   .text:00000000000044d2 $t
             forth.s:2927   .text:00000000000044d4 LBRAC
             forth.s:2929   .text:00000000000044d8 $d
             forth.s:2939   .text:00000000000044f0 _DOTOK
             forth.s:2939   .text:00000000000044f4 $t
             forth.s:2939   .text:00000000000044f4 DOTOK
             forth.s:2941   .text:00000000000044f8 $d
             forth.s:2947   .text:000000000000451c DOTO1
             forth.s:2948   .text:000000000000451c $d
             forth.s:2956   .text:0000000000004528 _QSTAC
             forth.s:2956   .text:0000000000004530 QSTAC
             forth.s:2958   .text:0000000000004534 $d
             forth.s:2960   .text:000000000000454a $t
             forth.s:2961   .text:000000000000454c $d
             forth.s:2968   .text:0000000000004554 _EVAL
             forth.s:2970   .text:0000000000004560 EVAL1
             forth.s:2971   .text:0000000000004560 $d
ARM GAS  forth.s 			page 218


             forth.s:2979   .text:0000000000004588 EVAL2
             forth.s:2989   .text:0000000000004598 _PRESE
             forth.s:2991   .text:00000000000045a4 $d
             forth.s:3001   .text:00000000000045b8 _QUIT
             forth.s:3002   .text:00000000000045c0 $d
             forth.s:3004   .text:00000000000045cc QUIT1
             forth.s:3006   .text:00000000000045d0 QUIT2
             forth.s:3016   .text:00000000000045e4 _FORGET
             forth.s:3016   .text:00000000000045ec FORGET
             forth.s:3018   .text:00000000000045f0 $d
             forth.s:3515   .text:0000000000004b88 OVERT
             forth.s:3046   .text:0000000000004638 $d
             forth.s:3046   .text:000000000000463c _TICK
             forth.s:3046   .text:000000000000463e $t
             forth.s:3046   .text:0000000000004640 TICK
             forth.s:3048   .text:0000000000004644 $d
             forth.s:3052   .text:0000000000004658 TICK1
             forth.s:3060   .text:0000000000004660 _ALLOT
             forth.s:3060   .text:0000000000004666 $t
             forth.s:3062   .text:000000000000466c $d
             forth.s:3071   .text:000000000000467c _COMMA
             forth.s:3071   .text:000000000000467e $t
             forth.s:3071   .text:0000000000004680 COMMA
             forth.s:3073   .text:0000000000004684 $d
             forth.s:3087   .text:00000000000046a0 $d
             forth.s:3087   .text:00000000000046a4 _BCOMP
             forth.s:3087   .text:00000000000046ae $t
             forth.s:3087   .text:00000000000046b0 BCOMP
             forth.s:3089   .text:00000000000046b4 $d
             forth.s:3099   .text:00000000000046c4 _COMPI
             forth.s:3099   .text:00000000000046cc $t
             forth.s:3099   .text:00000000000046cc COMPI
             forth.s:3101   .text:00000000000046d0 $d
             forth.s:3117   .text:00000000000046fc _LITER
             forth.s:3117   .text:0000000000004704 $t
             forth.s:3119   .text:0000000000004708 $d
             forth.s:3554   .text:0000000000004be4 CALLC
             forth.s:3129   .text:000000000000471c STRCQ
             forth.s:3130   .text:000000000000471c $t
             forth.s:3131   .text:0000000000004720 $d
             forth.s:3153   .text:0000000000004758 _FOR
             forth.s:3153   .text:000000000000475c $t
             forth.s:3153   .text:000000000000475c FOR
             forth.s:3155   .text:0000000000004760 $d
             forth.s:3164   .text:0000000000004778 _DO
             forth.s:3164   .text:000000000000477c DO
             forth.s:3166   .text:0000000000004780 $d
             forth.s:3172   .text:00000000000047ac DOPLOOP
             forth.s:3173   .text:00000000000047ac $t
             forth.s:3189   .text:00000000000047ce $d
             forth.s:3189   .text:00000000000047d2 _PLOOP
             forth.s:3189   .text:00000000000047d8 $t
             forth.s:3189   .text:00000000000047d8 PLOOP
             forth.s:3191   .text:00000000000047dc $d
             forth.s:3195   .text:00000000000047f0 DOLOOP
             forth.s:3196   .text:00000000000047f0 $t
             forth.s:3214   .text:0000000000004818 $d
ARM GAS  forth.s 			page 219


             forth.s:3214   .text:000000000000481c _LOOP
             forth.s:3214   .text:0000000000004824 LOOP
             forth.s:3216   .text:0000000000004828 $d
             forth.s:3227   .text:0000000000004840 _BEGIN
             forth.s:3227   .text:0000000000004846 $t
             forth.s:3227   .text:0000000000004848 BEGIN
             forth.s:3229   .text:000000000000484c $d
             forth.s:3238   .text:0000000000004854 $d
             forth.s:3238   .text:0000000000004858 _FNEXT
             forth.s:3238   .text:0000000000004860 FNEXT
             forth.s:3240   .text:0000000000004864 $d
             forth.s:3248   .text:000000000000487c _I
             forth.s:3248   .text:000000000000487e $t
             forth.s:3248   .text:0000000000004880 I
             forth.s:3257   .text:000000000000488c $d
             forth.s:3257   .text:0000000000004890 _J
             forth.s:3257   .text:0000000000004892 $t
             forth.s:3257   .text:0000000000004894 J
             forth.s:3267   .text:00000000000048a0 $d
             forth.s:3267   .text:00000000000048a4 _UNTIL
             forth.s:3267   .text:00000000000048aa $t
             forth.s:3267   .text:00000000000048ac UNTIL
             forth.s:3269   .text:00000000000048b0 $d
             forth.s:3278   .text:00000000000048c8 _AGAIN
             forth.s:3278   .text:00000000000048ce $t
             forth.s:3278   .text:00000000000048d0 AGAIN
             forth.s:3280   .text:00000000000048d4 $d
             forth.s:3289   .text:00000000000048ec _IFF
             forth.s:3289   .text:00000000000048f0 IFF
             forth.s:3291   .text:00000000000048f4 $d
             forth.s:3303   .text:000000000000491c _AHEAD
             forth.s:3303   .text:0000000000004922 $t
             forth.s:3303   .text:0000000000004924 AHEAD
             forth.s:3305   .text:0000000000004928 $d
             forth.s:3317   .text:0000000000004950 _REPEA
             forth.s:3317   .text:0000000000004958 REPEA
             forth.s:3319   .text:000000000000495c $d
             forth.s:3330   .text:0000000000004974 _THENN
             forth.s:3330   .text:000000000000497c THENN
             forth.s:3332   .text:0000000000004980 $d
             forth.s:3343   .text:0000000000004994 _AFT
             forth.s:3343   .text:0000000000004998 $t
             forth.s:3343   .text:0000000000004998 AFT
             forth.s:3345   .text:000000000000499c $d
             forth.s:3357   .text:00000000000049b4 _ELSEE
             forth.s:3357   .text:00000000000049bc ELSEE
             forth.s:3359   .text:00000000000049c0 $d
             forth.s:3369   .text:00000000000049d4 _WHILE
             forth.s:3369   .text:00000000000049da $t
             forth.s:3369   .text:00000000000049dc WHILE
             forth.s:3371   .text:00000000000049e0 $d
             forth.s:3380   .text:00000000000049f0 _ABRTQ
             forth.s:3380   .text:00000000000049f8 ABRTQ
             forth.s:3382   .text:00000000000049fc $d
             forth.s:3391   .text:0000000000004a14 _STRQ
             forth.s:3391   .text:0000000000004a18 STRQ
             forth.s:3393   .text:0000000000004a1c $d
ARM GAS  forth.s 			page 220


             forth.s:3403   .text:0000000000004a34 _DOTQ
             forth.s:3403   .text:0000000000004a38 DOTQ
             forth.s:3405   .text:0000000000004a3c $d
             forth.s:3419   .text:0000000000004a54 _UNIQU
             forth.s:3419   .text:0000000000004a5c $t
             forth.s:3419   .text:0000000000004a5c UNIQU
             forth.s:3421   .text:0000000000004a60 $d
             forth.s:3428   .text:0000000000004a88 UNIQ1
             forth.s:3425   .text:0000000000004a7c $d
             forth.s:3438   .text:0000000000004a90 SNAME
             forth.s:3439   .text:0000000000004a90 $t
             forth.s:3440   .text:0000000000004a94 $d
             forth.s:3456   .text:0000000000004ad8 SNAM1
             forth.s:3468   .text:0000000000004aec _SCOMP
             forth.s:3468   .text:0000000000004af8 SCOMP
             forth.s:3470   .text:0000000000004afc $d
             forth.s:3482   .text:0000000000004b34 SCOM2
             forth.s:3479   .text:0000000000004b2c SCOM1
             forth.s:3487   .text:0000000000004b48 SCOM3
             forth.s:3496   .text:0000000000004b50 COLON_ABORT
             forth.s:3497   .text:0000000000004b50 $t
             forth.s:3498   .text:0000000000004b54 $d
             forth.s:3515   .text:0000000000004b80 _OVERT
             forth.s:3515   .text:0000000000004b86 $t
             forth.s:3517   .text:0000000000004b8c $d
             forth.s:3528   .text:0000000000004ba4 _SEMIS
             forth.s:3528   .text:0000000000004ba6 $t
             forth.s:3528   .text:0000000000004ba8 SEMIS
             forth.s:3530   .text:0000000000004bac $d
             forth.s:3542   .text:0000000000004bc8 _RBRAC
             forth.s:3542   .text:0000000000004bca $t
             forth.s:3542   .text:0000000000004bcc RBRAC
             forth.s:3544   .text:0000000000004bd0 $d
             forth.s:3555   .text:0000000000004be4 $t
             forth.s:3556   .text:0000000000004be8 $d
             forth.s:3568   .text:0000000000004c00 _COLON
             forth.s:3568   .text:0000000000004c02 $t
             forth.s:3568   .text:0000000000004c04 COLON
             forth.s:3570   .text:0000000000004c08 $d
             forth.s:3581   .text:0000000000004c20 _IMMED
             forth.s:3581   .text:0000000000004c2a $t
             forth.s:3581   .text:0000000000004c2c IMMED
             forth.s:3583   .text:0000000000004c30 $d
             forth.s:3601   .text:0000000000004c5c _CONST
             forth.s:3601   .text:0000000000004c68 CONST
             forth.s:3603   .text:0000000000004c6c $d
             forth.s:3614   .text:0000000000004c9c $t
             forth.s:3621   .text:0000000000004c9c DODOES
             forth.s:3623   .text:0000000000004ca0 $d
             forth.s:3638   .text:0000000000004cc4 $d
             forth.s:3638   .text:0000000000004cc8 _DOES
             forth.s:3638   .text:0000000000004cce $t
             forth.s:3638   .text:0000000000004cd0 DOES
             forth.s:3640   .text:0000000000004cd4 $d
             forth.s:3655   .text:0000000000004d04 _DEFERAT
             forth.s:3655   .text:0000000000004d0c DEFERAT
             forth.s:3657   .text:0000000000004d10 $d
ARM GAS  forth.s 			page 221


             forth.s:3667   .text:0000000000004d28 _DEFERSTO
             forth.s:3667   .text:0000000000004d30 DEFERSTO
             forth.s:3669   .text:0000000000004d34 $d
             forth.s:3680   .text:0000000000004d50 _DEFER
             forth.s:3680   .text:0000000000004d56 $t
             forth.s:3680   .text:0000000000004d58 DEFER
             forth.s:3682   .text:0000000000004d5c $d
             forth.s:3703   .text:0000000000004da8 CREAT
             forth.s:3693   .text:0000000000004d90 DEFER_NOP
             forth.s:3694   .text:0000000000004d90 $t
             forth.s:3695   .text:0000000000004d94 $d
             forth.s:3703   .text:0000000000004da0 _CREAT
             forth.s:3705   .text:0000000000004dac $d
             forth.s:3718   .text:0000000000004dd0 _VARIA
             forth.s:3718   .text:0000000000004ddc VARIA
             forth.s:3720   .text:0000000000004de0 $d
             forth.s:3738   .text:0000000000004e00 DMP
             forth.s:3739   .text:0000000000004e00 $t
             forth.s:3740   .text:0000000000004e04 $d
             forth.s:3752   .text:0000000000004e3c PDUM2
             forth.s:3746   .text:0000000000004e24 PDUM1
             forth.s:3764   .text:0000000000004e48 $d
             forth.s:3764   .text:0000000000004e4c _DUMP
             forth.s:3764   .text:0000000000004e54 DUMP
             forth.s:3766   .text:0000000000004e58 $d
             forth.s:3792   .text:0000000000004ed4 DUMP4
             forth.s:3782   .text:0000000000004eac DUMP1
             forth.s:3794   .text:0000000000004edc DUMP3
             forth.s:3807   .text:0000000000004ef0 TDOT
             forth.s:3808   .text:0000000000004ef0 $t
             forth.s:3809   .text:0000000000004ef4 $d
             forth.s:3848   .text:0000000000004f84 _DOTS
             forth.s:3848   .text:0000000000004f88 DOTS
             forth.s:3850   .text:0000000000004f8c $d
             forth.s:3857   .text:0000000000004fa8 DOTS2
             forth.s:3853   .text:0000000000004f9c DOTS1
             forth.s:3862   .text:0000000000004fb8 RBASE
             forth.s:3863   .text:0000000000004fb8 $t
             forth.s:3871   .text:0000000000004fc8 RDOT
             forth.s:3873   .text:0000000000004fcc $d
             forth.s:3900   .text:0000000000005030 _TRACE
             forth.s:3900   .text:0000000000005036 $t
             forth.s:3900   .text:0000000000005038 TRACE
             forth.s:3902   .text:000000000000503c $d
             forth.s:3921   .text:0000000000005080 _TNAME
             forth.s:3921   .text:0000000000005086 $t
             forth.s:3921   .text:0000000000005088 TNAME
             forth.s:3923   .text:000000000000508c $d
             forth.s:3926   .text:0000000000005098 TNAM1
             forth.s:3937   .text:00000000000050cc TNAM2
             forth.s:3946   .text:00000000000050dc _DOTID
             forth.s:3946   .text:00000000000050e0 $t
             forth.s:3946   .text:00000000000050e0 DOTID
             forth.s:3948   .text:00000000000050e4 $d
             forth.s:3955   .text:0000000000005108 DOTI1
             forth.s:3956   .text:0000000000005116 $t
             forth.s:3957   .text:0000000000005118 $d
ARM GAS  forth.s 			page 222


             forth.s:3959   *ABS*:0000000000000000 WANT_SEE
             forth.s:4032   .text:0000000000005120 _VLIST
             forth.s:4032   .text:0000000000005126 $t
             forth.s:4032   .text:0000000000005128 VLIST
             forth.s:4034   .text:000000000000512c $d
             forth.s:4045   .text:000000000000514c WORDS
             forth.s:4066   .text:0000000000005190 WC
             forth.s:4045   .text:0000000000005144 _WORDS
             forth.s:4045   .text:000000000000514a $t
             forth.s:4047   .text:0000000000005150 $d
             forth.s:4050   .text:000000000000515c WORS1
             forth.s:4059   .text:0000000000005184 WORS2
             forth.s:4066   .text:000000000000518c _WC
             forth.s:4068   .text:0000000000005194 $d
             forth.s:4085   .text:00000000000051d0 _MARK
             forth.s:4085   .text:00000000000051d8 MARK
             forth.s:4087   .text:00000000000051dc $d
             forth.s:4090   .text:00000000000051e8 $t
             forth.s:4091   .text:00000000000051ec $d
             forth.s:4106   .text:000000000000521c _ARRAY
             forth.s:4106   .text:0000000000005222 $t
             forth.s:4106   .text:0000000000005224 ARRAY
             forth.s:4108   .text:0000000000005228 $d
             forth.s:4122   .text:0000000000005264 DO_ARRAY
             forth.s:4123   .text:0000000000005264 $t
             forth.s:4124   .text:0000000000005268 $d
             forth.s:4142   .text:0000000000005284 VERSN
             forth.s:4143   .text:0000000000005284 $t
             forth.s:4144   .text:0000000000005288 $d
             forth.s:4152   .text:0000000000005298 _HI
             forth.s:4152   .text:000000000000529c HI
             forth.s:4154   .text:00000000000052a0 $d
             forth.s:4155   .text:00000000000052ba $t
             forth.s:4156   .text:00000000000052bc $d
             forth.s:4180   .text:0000000000005308 $t
             forth.s:4181   .text:000000000000530c $d
             forth.s:4193   .text:0000000000005328 PS2_QUERY
             forth.s:4194   .text:0000000000005328 $t
             forth.s:4195   .text:000000000000532c $d
             forth.s:4209   .text:0000000000005392 $t
             forth.s:4210   .text:0000000000005394 $d
             forth.s:4220   .text:00000000000053a0 IF_SENSE
             forth.s:4221   .text:00000000000053a0 $t
             forth.s:4222   .text:00000000000053a4 $d
             forth.s:4237   .text:00000000000053d4 $t
             forth.s:4238   .text:00000000000053d8 $d
             forth.s:4238   .text:00000000000053e2 $t
             forth.s:4239   .text:00000000000053e4 $d
             forth.s:4257   .text:000000000000540c COLD1
             forth.s:4258   .text:000000000000540c $d
             forth.s:4272   .text:0000000000005458 COLD2
             forth.s:4275   .text:0000000000005458 $d
             forth.s:4278   .text:000000000000545c $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:248    .text:000000000000016f $d
              init.s:373    .text:0000000000000335 $d
ARM GAS  forth.s 			page 223


              init.s:373    .text:0000000000000336 $t
          ser-term.s:90     .text:0000000000000793 $d
          ser-term.s:90     .text:0000000000000794 $t
          ser-term.s:110    .text:00000000000007cd $d
          ser-term.s:110    .text:00000000000007ce $t
          ser-term.s:133    .text:000000000000080b $d
          ser-term.s:133    .text:000000000000080c $t
          ser-term.s:166    .text:0000000000000867 $d
          ser-term.s:166    .text:0000000000000868 $t
          ser-term.s:193    .text:00000000000008dd $d
          ser-term.s:193    .text:00000000000008de $t
          ser-term.s:205    .text:000000000000090b $d
          ser-term.s:205    .text:000000000000090c $t
             tvout.s:264    .text:0000000000000b5b $d
             tvout.s:264    .text:0000000000000b5c $t
             tvout.s:278    .text:0000000000000b8f $d
             tvout.s:278    .text:0000000000000b90 $t
             tvout.s:306    .text:0000000000000be9 $d
             tvout.s:306    .text:0000000000000bea $t
             tvout.s:325    .text:0000000000000c17 $d
             tvout.s:325    .text:0000000000000c18 $t
             tvout.s:427    .text:0000000000000d51 $d
             tvout.s:427    .text:0000000000000d52 $t
             tvout.s:448    .text:0000000000000dab $d
             tvout.s:448    .text:0000000000000dac $t
             tvout.s:495    .text:0000000000000e41 $d
             tvout.s:495    .text:0000000000000e42 $t
           ps2_kbd.s:307    .text:000000000000152f $d
           ps2_kbd.s:307    .text:0000000000001530 $t
           ps2_kbd.s:396    .text:000000000000162b $d
           ps2_kbd.s:396    .text:000000000000162c $t
           ps2_kbd.s:616    .text:00000000000018cd $d
           ps2_kbd.s:616    .text:00000000000018ce $t
           ps2_kbd.s:633    .text:0000000000001907 $d
           ps2_kbd.s:633    .text:0000000000001908 $t
         spi-flash.s:85     .text:00000000000019f3 $d
         spi-flash.s:85     .text:00000000000019f4 $t
         spi-flash.s:151    .text:0000000000001abf $d
         spi-flash.s:151    .text:0000000000001ac0 $t
         spi-flash.s:238    .text:0000000000001c03 $d
         spi-flash.s:238    .text:0000000000001c04 $t
         spi-flash.s:256    .text:0000000000001c3f $d
         spi-flash.s:256    .text:0000000000001c40 $t
         spi-flash.s:278    .text:0000000000001c93 $d
         spi-flash.s:278    .text:0000000000001c94 $t
         spi-flash.s:325    .text:0000000000001d13 $d
         spi-flash.s:325    .text:0000000000001d14 $t
         spi-flash.s:343    .text:0000000000001d35 $d
         spi-flash.s:343    .text:0000000000001d36 $t
         spi-flash.s:352    .text:0000000000001d49 $d
         spi-flash.s:352    .text:0000000000001d4a $t
               fpu.s:196    .text:0000000000001eef $d
               fpu.s:196    .text:0000000000001ef0 $t
               fpu.s:209    .text:0000000000001f0f $d
               fpu.s:209    .text:0000000000001f10 $t
               fpu.s:223    .text:0000000000001f2f $d
               fpu.s:223    .text:0000000000001f30 $t
ARM GAS  forth.s 			page 224


               fpu.s:236    .text:0000000000001f4f $d
               fpu.s:236    .text:0000000000001f50 $t
               fpu.s:259    .text:0000000000001f8d $d
               fpu.s:259    .text:0000000000001f8e $t
               fpu.s:271    .text:0000000000001fad $d
               fpu.s:271    .text:0000000000001fae $t
               fpu.s:293    .text:0000000000001fe7 $d
               fpu.s:293    .text:0000000000001fe8 $t
               fpu.s:304    .text:0000000000002003 $d
               fpu.s:304    .text:0000000000002004 $t
               fpu.s:314    .text:000000000000201d $d
               fpu.s:314    .text:000000000000201e $t
               fpu.s:327    .text:000000000000204d $d
               fpu.s:327    .text:000000000000204e $t
               fpu.s:353    .text:000000000000209d $d
               fpu.s:353    .text:000000000000209e $t
               fpu.s:377    .text:00000000000020e7 $d
               fpu.s:377    .text:00000000000020e8 $t
               fpu.s:386    .text:0000000000002101 $d
               fpu.s:386    .text:0000000000002102 $t
               fpu.s:416    .text:000000000000215b $d
               fpu.s:416    .text:000000000000215c $t
            strtof.s:204    .text:0000000000002367 $d
            strtof.s:204    .text:0000000000002368 $t
              ftoa.s:322    .text:00000000000028a3 $d
              ftoa.s:322    .text:00000000000028a4 $t
             forth.s:132    .text:0000000000002961 $d
             forth.s:132    .text:0000000000002962 $t
             forth.s:144    .text:0000000000002985 $d
             forth.s:144    .text:0000000000002986 $t
             forth.s:156    .text:00000000000029a7 $d
             forth.s:156    .text:00000000000029a8 $t
             forth.s:178    .text:00000000000029e1 $d
             forth.s:178    .text:00000000000029e2 $t
             forth.s:214    .text:00000000000029ff $d
             forth.s:214    .text:0000000000002a00 $t
             forth.s:261    .text:0000000000002aad $d
             forth.s:261    .text:0000000000002aae $t
             forth.s:356    .text:0000000000002b3d $d
             forth.s:356    .text:0000000000002b3e $t
             forth.s:381    .text:0000000000002b6b $d
             forth.s:381    .text:0000000000002b6c $t
             forth.s:391    .text:0000000000002b7f $d
             forth.s:391    .text:0000000000002b80 $t
             forth.s:400    .text:0000000000002b8b $d
             forth.s:400    .text:0000000000002b8c $t
             forth.s:420    .text:0000000000002bb9 $d
             forth.s:420    .text:0000000000002bba $t
             forth.s:429    .text:0000000000002bcd $d
             forth.s:429    .text:0000000000002bce $t
             forth.s:486    .text:0000000000002c41 $d
             forth.s:486    .text:0000000000002c42 $t
             forth.s:502    .text:0000000000002c63 $d
             forth.s:502    .text:0000000000002c64 $t
             forth.s:512    .text:0000000000002c75 $d
             forth.s:512    .text:0000000000002c76 $t
             forth.s:521    .text:0000000000002c87 $d
ARM GAS  forth.s 			page 225


             forth.s:521    .text:0000000000002c88 $t
             forth.s:538    .text:0000000000002ca9 $d
             forth.s:538    .text:0000000000002caa $t
             forth.s:568    .text:0000000000002cef $d
             forth.s:568    .text:0000000000002cf0 $t
             forth.s:577    .text:0000000000002d05 $d
             forth.s:577    .text:0000000000002d06 $t
             forth.s:625    .text:0000000000002d5f $d
             forth.s:625    .text:0000000000002d60 $t
             forth.s:636    .text:0000000000002d73 $d
             forth.s:636    .text:0000000000002d74 $t
             forth.s:644    .text:0000000000002d81 $d
             forth.s:644    .text:0000000000002d82 $t
             forth.s:652    .text:0000000000002d91 $d
             forth.s:652    .text:0000000000002d92 $t
             forth.s:660    .text:0000000000002da1 $d
             forth.s:660    .text:0000000000002da2 $t
             forth.s:684    .text:0000000000002dd1 $d
             forth.s:684    .text:0000000000002dd2 $t
             forth.s:709    .text:0000000000002e05 $d
             forth.s:709    .text:0000000000002e06 $t
             forth.s:717    .text:0000000000002e15 $d
             forth.s:717    .text:0000000000002e16 $t
             forth.s:725    .text:0000000000002e27 $d
             forth.s:725    .text:0000000000002e28 $t
             forth.s:746    .text:0000000000002e4f $d
             forth.s:746    .text:0000000000002e50 $t
             forth.s:775    .text:0000000000002e8b $d
             forth.s:775    .text:0000000000002e8c $t
             forth.s:785    .text:0000000000002e9f $d
             forth.s:785    .text:0000000000002ea0 $t
             forth.s:798    .text:0000000000002ebd $d
             forth.s:798    .text:0000000000002ebe $t
             forth.s:851    .text:0000000000002f35 $d
             forth.s:851    .text:0000000000002f36 $t
             forth.s:892    .text:0000000000002f8b $d
             forth.s:892    .text:0000000000002f8c $t
             forth.s:915    .text:0000000000002fb7 $d
             forth.s:915    .text:0000000000002fb8 $t
             forth.s:928    .text:0000000000002fd7 $d
             forth.s:928    .text:0000000000002fd8 $t
             forth.s:952    .text:0000000000003007 $d
             forth.s:952    .text:0000000000003008 $t
             forth.s:998    .text:000000000000305f $d
             forth.s:998    .text:0000000000003060 $t
             forth.s:1010   .text:0000000000003077 $d
             forth.s:1010   .text:0000000000003078 $t
             forth.s:1022   .text:0000000000003093 $d
             forth.s:1022   .text:0000000000003094 $t
             forth.s:1083   .text:00000000000030ef $d
             forth.s:1083   .text:00000000000030f0 $t
             forth.s:1092   .text:0000000000003103 $d
             forth.s:1092   .text:0000000000003104 $t
             forth.s:1119   .text:0000000000003145 $d
             forth.s:1119   .text:0000000000003146 $t
             forth.s:1138   .text:0000000000003169 $d
             forth.s:1138   .text:000000000000316a $t
ARM GAS  forth.s 			page 226


             forth.s:1157   .text:0000000000003195 $d
             forth.s:1157   .text:0000000000003196 $t
             forth.s:1197   .text:00000000000031ef $d
             forth.s:1197   .text:00000000000031f0 $t
             forth.s:1217   .text:0000000000003219 $d
             forth.s:1217   .text:000000000000321a $t
             forth.s:1231   .text:0000000000003237 $d
             forth.s:1231   .text:0000000000003238 $t
             forth.s:1242   .text:0000000000003255 $d
             forth.s:1242   .text:0000000000003256 $t
             forth.s:1259   .text:0000000000003273 $d
             forth.s:1259   .text:0000000000003274 $t
             forth.s:1276   .text:000000000000329f $d
             forth.s:1276   .text:00000000000032a0 $t
             forth.s:1411   .text:00000000000033eb $d
             forth.s:1411   .text:00000000000033ec $t
             forth.s:1433   .text:0000000000003437 $d
             forth.s:1433   .text:0000000000003438 $t
             forth.s:1482   .text:0000000000003477 $d
             forth.s:1482   .text:0000000000003478 $t
             forth.s:1533   .text:00000000000034ef $d
             forth.s:1533   .text:00000000000034f0 $t
             forth.s:1592   .text:0000000000003599 $d
             forth.s:1592   .text:000000000000359a $t
             forth.s:1610   .text:00000000000035c1 $d
             forth.s:1610   .text:00000000000035c2 $t
             forth.s:1644   .text:0000000000003613 $d
             forth.s:1644   .text:0000000000003614 $t
             forth.s:1677   .text:0000000000003661 $d
             forth.s:1677   .text:0000000000003662 $t
             forth.s:1709   .text:00000000000036a9 $d
             forth.s:1709   .text:00000000000036aa $t
             forth.s:1787   .text:000000000000378b $d
             forth.s:1787   .text:000000000000378c $t
             forth.s:1799   .text:00000000000037a9 $d
             forth.s:1799   .text:00000000000037aa $t
             forth.s:1831   .text:00000000000037f7 $d
             forth.s:1831   .text:00000000000037f8 $t
             forth.s:1849   .text:0000000000003829 $d
             forth.s:1849   .text:000000000000382a $t
             forth.s:1863   .text:0000000000003853 $d
             forth.s:1863   .text:0000000000003854 $t
             forth.s:1941   .text:000000000000390f $d
             forth.s:1941   .text:0000000000003910 $t
             forth.s:2044   .text:0000000000003a53 $d
             forth.s:2044   .text:0000000000003a54 $t
             forth.s:2128   .text:0000000000003b83 $d
             forth.s:2128   .text:0000000000003b84 $t
             forth.s:2145   .text:0000000000003bb9 $d
             forth.s:2145   .text:0000000000003bba $t
             forth.s:2163   .text:0000000000003bef $d
             forth.s:2163   .text:0000000000003bf0 $t
             forth.s:2233   .text:0000000000003c6f $d
             forth.s:2233   .text:0000000000003c70 $t
             forth.s:2271   .text:0000000000003cdb $d
             forth.s:2271   .text:0000000000003cdc $t
             forth.s:2306   .text:0000000000003d43 $d
ARM GAS  forth.s 			page 227


             forth.s:2306   .text:0000000000003d44 $t
             forth.s:2326   .text:0000000000003d7b $d
             forth.s:2326   .text:0000000000003d7c $t
             forth.s:2468   .text:0000000000003f53 $d
             forth.s:2468   .text:0000000000003f54 $t
             forth.s:2507   .text:0000000000003fb5 $d
             forth.s:2507   .text:0000000000003fb6 $t
             forth.s:2519   .text:0000000000003fdb $d
             forth.s:2519   .text:0000000000003fdc $t
             forth.s:2530   .text:0000000000003ff5 $d
             forth.s:2530   .text:0000000000003ff6 $t
             forth.s:2813   .text:0000000000004363 $d
             forth.s:2813   .text:0000000000004364 $t
             forth.s:2905   .text:0000000000004477 $d
             forth.s:2905   .text:0000000000004478 $t
             forth.s:2956   .text:000000000000452f $d
             forth.s:2956   .text:0000000000004530 $t
             forth.s:2968   .text:0000000000004559 $d
             forth.s:2968   .text:000000000000455a $t
             forth.s:2989   .text:000000000000459f $d
             forth.s:2989   .text:00000000000045a0 $t
             forth.s:3001   .text:00000000000045bd $d
             forth.s:3001   .text:00000000000045be $t
             forth.s:3016   .text:00000000000045eb $d
             forth.s:3016   .text:00000000000045ec $t
             forth.s:3164   .text:000000000000477b $d
             forth.s:3164   .text:000000000000477c $t
             forth.s:3214   .text:0000000000004821 $d
             forth.s:3214   .text:0000000000004822 $t
             forth.s:3238   .text:000000000000485d $d
             forth.s:3238   .text:000000000000485e $t
             forth.s:3289   .text:00000000000048ef $d
             forth.s:3289   .text:00000000000048f0 $t
             forth.s:3317   .text:0000000000004957 $d
             forth.s:3317   .text:0000000000004958 $t
             forth.s:3330   .text:0000000000004979 $d
             forth.s:3330   .text:000000000000497a $t
             forth.s:3357   .text:00000000000049b9 $d
             forth.s:3357   .text:00000000000049ba $t
             forth.s:3380   .text:00000000000049f7 $d
             forth.s:3380   .text:00000000000049f8 $t
             forth.s:3391   .text:0000000000004a17 $d
             forth.s:3391   .text:0000000000004a18 $t
             forth.s:3403   .text:0000000000004a37 $d
             forth.s:3403   .text:0000000000004a38 $t
             forth.s:3468   .text:0000000000004af5 $d
             forth.s:3468   .text:0000000000004af6 $t
             forth.s:3601   .text:0000000000004c65 $d
             forth.s:3601   .text:0000000000004c66 $t
             forth.s:3655   .text:0000000000004d0b $d
             forth.s:3655   .text:0000000000004d0c $t
             forth.s:3667   .text:0000000000004d2f $d
             forth.s:3667   .text:0000000000004d30 $t
             forth.s:3703   .text:0000000000004da7 $d
             forth.s:3703   .text:0000000000004da8 $t
             forth.s:3718   .text:0000000000004dd9 $d
             forth.s:3718   .text:0000000000004dda $t
ARM GAS  forth.s 			page 228


             forth.s:3764   .text:0000000000004e51 $d
             forth.s:3764   .text:0000000000004e52 $t
             forth.s:3848   .text:0000000000004f87 $d
             forth.s:3848   .text:0000000000004f88 $t
             forth.s:4066   .text:000000000000518f $d
             forth.s:4066   .text:0000000000005190 $t
             forth.s:4085   .text:00000000000051d5 $d
             forth.s:4085   .text:00000000000051d6 $t
             forth.s:4152   .text:000000000000529b $d
             forth.s:4152   .text:000000000000529c $t
             forth.s:4251   .text:00000000000053f5 $d
             forth.s:4251   .text:00000000000053f6 $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
