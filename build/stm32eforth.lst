ARM GAS  ps2_kbd.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to beyond Jupiter board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  ps2_kbd.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m4
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
ARM GAS  ps2_kbd.s 			page 3


  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
ARM GAS  ps2_kbd.s 			page 4


  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
ARM GAS  ps2_kbd.s 			page 5


 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0x400 
 203              	   .equ NVIC_STIR, 0xE00 
 204              	
 205              	/* TIMERS registers */
ARM GAS  ps2_kbd.s 			page 6


 206              	.equ TIM1_BASE_ADR,0x40010000
 207              	.equ TIM9_BASE_ADR,0x40010400
 208              	.equ TIM10_BASE_ADR,0x40010800
 209              	.equ TIM11_BASE_ADR,0x40010C00
 210              	
 211              	.equ TIM2_BASE_ADR,0x40000000
 212              	.equ TIM3_BASE_ADR,0x40000400
 213              	.equ TIM4_BASE_ADR,0x40000800
 214              	.equ TIM5_BASE_ADR,0x40000C00
 215              	
 216              	/* TIMER1 */
 217              	.equ TIM1_RCR,48 
 218              	.equ TIM1_BDTR,68 
 219              	
 220              	/* TIMER2..TIMER5 */
 221              	.equ TIM_CR1,0
 222              	.equ TIM_CR2,4
 223              	.equ TIM_SMCR,8
 224              	.equ TIM_DIER,12
 225              	.equ TIM_SR,16
 226              	.equ TIM_EGR,20
 227              	.equ TIM_CCMR1,24
 228              	.equ TIM_CCMR2,28
 229              	.equ TIM_CCER,32
 230              	.equ TIM_CNT,36
 231              	.equ TIM_PSC,40
 232              	.equ TIM_ARR,44
 233              	.equ TIM_CCR1,52
 234              	.equ TIM_CCR2,56
 235              	.equ TIM_CCR3,60
 236              	.equ TIM_CCR4,64
 237              	.equ TIM_DCR,72
 238              	.equ TIM_DMAR,76
 239              	.equ TIM2_OR,80
 240              	.equ TIM5_OR,80 
 241              	
 242              	/* SYSCFG registers */
 243              	.equ SYSCFG_BASE_ADR, 0x40013800
 244              	
 245              	.equ SYSCFG_MEMRMP,0
 246              	.equ SYSCFG_PMC,4
 247              	.equ SYSCFG_EXTICR1,8
 248              	.equ SYSCFG_EXTICR2,12
 249              	.equ SYSCFG_EXTICR3,16
 250              	.equ SYSCFG_EXTICR4,20
 251              	.equ SYSCFG_CMPCR,32
 252              	
 253              	/* EXTI registers */
 254              	.equ EXTI_BASE_ADR, 0x40013C00
 255              	
 256              	.equ EXTI_IMR,0
 257              	.equ EXTI_EMR,4
 258              	.equ EXTI_RTSR,8
 259              	.equ EXTI_FTSR,12
 260              	.equ EXTI_SWIER,16
 261              	.equ EXTI_PR,20
  81              	  .include "macros.inc"
ARM GAS  ps2_kbd.s 			page 7


   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/* registers alias */
  21              		T1 .req R0  // scratch
  22              		FSP .req R1  // forth data stack pointer 
  23              		FRP .req R2  // forth return stack pointer 
  24              		UP .req R3   // system variables pointer 
  25              		T2 .req R4   // scratch 
  26              		TOS .req R5  // top of data stack 
  27              		XP .req R6   // scratch 
  28              		YP .req R7   // scratch 
  29              	
  30              	/* beyond Jupiter specific constants */ 
  31              	  .equ LED_GPIO, GPIOC_BASE_ADR
  32              	  .equ LED_PIN, 13
  33              	  .equ UART, USART1_BASE_ADR 
  34              	
  35              	/* eForth specific constants */
  36              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  37              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  38              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  39              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  40              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  41              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  42              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  43              	
  44              	/*************************************
  45              	   system variables offset from UPP
  46              	*************************************/
  47              	  .equ SEED_OFS, 4    // prng seed 
  48              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
  49              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
  50              	  .equ BOOT_OFS, TIMER_OFS+4  // boot program address
  51              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
  52              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
  53              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
  54              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
  55              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
  56              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
  57              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
ARM GAS  ps2_kbd.s 			page 8


  58              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
  59              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
  60              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
  61              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
  62              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
  63              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  64              	  .equ RX_QUEUE_OFS, LASTN_OFS+4 // rx queue 
  65              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
  66              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
  67              	  .equ VID_CNTR_OFS, RX_TAIL_OFS+4 // video line counter 
  68              	  .equ VID_STATE_OFS, VID_CNTR_OFS+4 // video field,ODD=0,EVEN=1 
  69              	  .equ VID_FIELD_OFS, VID_STATE_OFS+4 // VSYNC,PRE_VID,VID,POST_VID 
  70              	  .equ VID_BUFFER_OFS, VID_FIELD_OFS+4 // video buffer address 
  71              	  .equ KBD_STRUCT_OFS, VID_BUFFER_OFS+4 // keyboard structure 
  72              	  .equ KBD_QUEUE_SIZE, 16 
  73              	  .equ KBD_QUEUE_OFS, KBD_STRUCT_OFS+4 
  74              	  .equ KBD_QHEAD_OFS,KBD_QUEUE_OFS+KBD_QUEUE_SIZE 
  75              	  .equ KBD_QTAIL_OFS,KBD_QHEAD_OFS+4
  76              	
  77              	/***********************************************
  78              	* MACROS
  79              	*	Assemble inline direct threaded code ending.
  80              	***********************************************/
  81              		.macro _CALL fn /* low level routine call */ 
  82              	 	PUSH {LR}
  83              		BL \fn  
  84              		POP {LR}
  85              		.endm
  86              		
  87              		.macro _RET /* exit sub-routine */ 
  88              		BX LR 
  89              		.endm 
  90              	
  91              		.macro	_NEXT /*end low level word */
  92              		BX	LR
  93              		.endm
  94              	
  95              	 	.macro	_NEST /*start high level word */
  96              		STMFD	R2!,{LR}
  97              		.endm
  98              	
  99              	 	.macro	_UNNEST	/*end high level word */
 100              		LDMFD	R2!,{PC}
 101              		.endm
 102              	
 103              		.macro _MOV32 R V 
 104              		MOV \R, #\V&0xffff
 105              		MOVT \R, #\V>>16
 106              		.endm
 107              	
 108              	 	.macro	_DOLIT  value /*long literals */
 109              		BL	DOLIT
 110              		.word \value 
 111              		.endm
 112              	
 113              	 	.macro	_PUSH	/*push R5 on data stack*/
 114              		STR	R5,[R1,#-4]!
ARM GAS  ps2_kbd.s 			page 9


 115              		.endm
 116              	
 117              	 	.macro	_POP /*pop data stack to R5 */
 118              		LDR	R5,[R1],#4
 119              		.endm
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.section .inflash.dictinary 
 124              		LF_\label:   // link field
 125              			.word link 
 126              			.equ link , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		CA_\label:   // code field address 
 131              			.word \label + MAPOFFSET 
 132              			.section .text, "ax", %progbits 
 133              			.p2align 2 
 134              		\label:  // code address in .section .text 
 135              		.endm 
 136              		
 137              	
 138              	// local function header 
 139              		.macro _FUNC label 
 140              		.section .text, "ax", %progbits 
 141              		.p2align 2 
 142              		.type \label, %function  
 143              		\label:
 144              		.endm 
 145              	
 146              	// global function header 
 147              		.macro _GBL_FUNC label 
 148              		.global \label 
 149              		_FUNC \label 
 150              		.endm 
 151              	
 152              	
  82              	
  83              	
  84              	
  85              	
  86              		.equ link, 0
  87              	
  88              	
  89              	/*************************************
  90              	*   interrupt service vectors table 
  91              	**************************************/
  92              	   .section  .isr_vector,"a",%progbits
  93              	  .type  isr_vectors, %object
  94              	
  95              	isr_vectors:
  96 0000 00000000 	  .word   _mstack          /* main return stack address */
  97 0004 00000000 	  .word   reset_handler    /* startup address */
  98              	/* core interrupts || exceptions */
  99 0008 00000000 	  .word   default_handler  /*  -14 NMI */
 100 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
ARM GAS  ps2_kbd.s 			page 10


 101 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
 102 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
 103 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
 104 001c 00000000 	  .word   0 /* -9 */
 105 0020 00000000 	  .word   0 /* -8 */ 
 106 0024 00000000 	  .word   0 /* -7 */
 107 0028 00000000 	  .word   0	/* -6 */
 108 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
 109 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
 110 0034 00000000 	  .word   0 /* -3 */
 111 0038 00000000 	  .word   default_handler  /* -2 PendSV */
 112 003c 00000000 	  .word   systick_handler  /* -1 Systick */
 113              	 irq0:  
 114              	  /* External Interrupts */
 115 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
 116 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 117 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 118 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 119 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 120 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 121 0058 00000000 	  .word      kbd_isr         /* IRQ6, EXTI Line0 */                        
 122 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 123 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 124 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 125 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 126 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 127 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 128 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 129 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 130 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 131 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 132 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 133 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 134 008c 00000000 	  .word      0 /* IRQ19 not used */                         
 135 0090 00000000 	  .word      0 /* IRQ20 not used */                          
 136 0094 00000000 	  .word      0 /* IRQ21 not used */                          
 137 0098 00000000 	  .word      0 /* IRQ22 not used */                          
 138 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 139 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
 140 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
 141 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
 142 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 143 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 144 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
 145 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 146 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
 147 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 148 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
 149 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 150 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 151 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 152 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 153 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 154 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
 155 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 156 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 157 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
ARM GAS  ps2_kbd.s 			page 11


 158 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 159 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 160 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 161 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 162 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 163 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 164 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 165 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 166 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 167 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 168 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 169 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 170 011c 00000000 	  .word      0 /* IRQ55, not used  */
 171 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 172 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 173 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 174 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 175 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 176 0134 00000000 	  .word		 0 /* IRQ61, not used */
 177 0138 00000000 	  .word		 0 /* IRQ62, not used */
 178 013c 00000000 	  .word		 0 /* IRQ63, not used */
 179 0140 00000000 	  .word		 0 /* IRQ64, not used */
 180 0144 00000000 	  .word		 0 /* IRQ65, not used */
 181 0148 00000000 	  .word		 0 /* IRQ66, not used */
 182 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 183 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 184 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 185 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 186 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 187 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 188 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 189 0168 00000000 	  .word		 0 /* IRQ74, not used */
 190 016c 00000000 	  .word		 0 /* IRQ75, not used */
 191 0170 00000000 	  .word		 0 /* IRQ76, not used */
 192 0174 00000000 	  .word		 0 /* IRQ77, not used */
 193 0178 00000000 	  .word		 0 /* IRQ78, not used */
 194 017c 00000000 	  .word		 0 /* IRQ79, not used */
 195 0180 00000000 	  .word		 0 /* IRQ80, not used */
 196 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 197 0188 00000000 	  .word		 0 /* IRQ82, not used */
 198 018c 00000000 	  .word		 0 /* IRQ83, not used */
 199 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 200 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 201              	isr_end:
 202              	  .size  isr_vectors, .-isr_vectors
 203 0198 00000000 	  .p2align 9
 203      00000000 
 203      00000000 
 203      00000000 
 203      00000000 
 204              	
 205              	/*****************************************************
 206              	* default isr handler called on unexpected interrupt
 207              	*****************************************************/
 208              	   .section  .inflash, "ax", %progbits 
 209              	   
 210              	  .type default_handler, %function
ARM GAS  ps2_kbd.s 			page 12


 211              	  .p2align 2 
 212              	  .global default_handler
 213              	default_handler:
 214 0000 014D     		ldr r5,exception_msg 
 215 0002 00F04FF8 		bl uart_puts 
 216 0006 39E0     		b reset_mcu    
 217              	  .size  default_handler, .-default_handler
 218              	exception_msg:
 219 0008 0C000000 		.word .+4 
 220 000c 12       		.byte 18
 221 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 221      65707469 
 221      6F6E2072 
 221      65626F6F 
 221      7421
 222 001f 00       		.p2align 2
 223              	
 224              	/*********************************
 225              		system milliseconds counter
 226              	*********************************/	
 227              	  .type systick_handler, %function
 228              	  .p2align 2 
 229              	  .global systick_handler
 230              	systick_handler:
 231 0020 4FF00003 	  _MOV32 r3,UPP
 231      C2F20003 
 232 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 233 002a 00F10100 	  add r0,#1
 234 002e 9860     	  str r0,[r3,#TICKS_OFS]
 235 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 236 0032 10B1     	  cbz r0, systick_exit
 237 0034 A0F10100 	  sub r0,#1
 238 0038 D860     	  str r0,[r3,#TIMER_OFS]
 239              	systick_exit:
 240 003a 7047     	  bx lr
 241              	
 242              	
 243              	
 244              	/**************************
 245              		UART RX handler
 246              	**************************/
 247              		.p2align 2
 248              		.type uart_rx_handler, %function
 249              	uart_rx_handler:
 250 003c 2DE9D002 		push {r4,r6,r7,r9}
 251 0040 4FF48054 		_MOV32 r4,UART 
 251      C4F20104 
 252 0048 2668     		ldr r6,[r4,#USART_SR]
 253 004a D4F80490 		ldr r9,[r4,#USART_DR]
 254 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 255 0052 0DD0     		beq 2f // no char received 
 256 0054 B9F1030F 		cmp r9,#3
 257 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 258 005a 03F14407 		add r7,r3,#RX_QUEUE_OFS
 259 005e 9C6D     		ldr r4,[r3,#RX_TAIL_OFS]
 260 0060 2744     		add r7,r7,r4 
 261 0062 87F80090 		strb r9,[r7]
ARM GAS  ps2_kbd.s 			page 13


 262 0066 04F10104 		add r4,#1 
 263 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 264 006e 9C65     		str r4,[r3,#RX_TAIL_OFS]
 265              	2:	
 266 0070 BDE8D002 		pop {r4,r6,r7,r9}
 267 0074 7047     		bx lr 
 268              	
 269              	user_reboot:
 270 0076 064D     		ldr r5,user_reboot_msg
 271 0078 00F014F8 		bl uart_puts 
 272              	reset_mcu: 
 273 007c 0348     		ldr r0,scb_adr 
 274 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 275 0080 41F00401 		orr r1,#(1<<2)
 276 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 277 0088 C160     		str r1,[r0,#SCB_AIRCR]
 278 008a FEE7     		b . 
 279              		.p2align 2 
 280              	scb_adr:
 281 008c 00ED00E0 		.word SCB_BASE_ADR 
 282              	user_reboot_msg:
 283 0090 94000000 		.word .+4
 284 0094 0D       		.byte 13 
 285 0095 0D757365 		.ascii "\ruser reboot!"
 285      72207265 
 285      626F6F74 
 285      21
 286 00a2 00BF     		.p2align 2 
 287              	
 288              	// send counted string to uart 
 289              	// input: r5 string* 
 290              		.type uart_puts,%function 
 291              	uart_puts:
 292 00a4 4FF48050 		_MOV32 r0,UART 
 292      C4F20100 
 293 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 294 00b0 0940     		ands r1,r1
 295 00b2 0CD0     	1:	beq 9f 
 296 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 297 00b6 12F08002 		ands r2,#0x80 
 298 00ba FBD0     		beq 2b 	
 299 00bc 15F8012B 		ldrb r2,[r5],#1
 300 00c0 0271     		strb r2,[r0,#USART_DR]
 301 00c2 0139     		subs r1,r1,#1 
 302 00c4 F6D1     		bne 2b 
 303 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 304 00c8 12F04002 		ands r2,#(1<<6)
 305 00cc FBD0     		beq 3b 
 306 00ce 7047     	9:  bx lr 
 307              	
 308              	
 309              	/**************************************
 310              	  reset_handler execute at MCU reset
 311              	***************************************/
 312              	  .type  reset_handler, %function
 313              	  .p2align 2 
 314              	  .global reset_handler
ARM GAS  ps2_kbd.s 			page 14


 315              	reset_handler:
 316 00d0 4FF00000 		_MOV32 r0,RAM_END
 316      C2F20200 
 317 00d8 8546     		mov sp,r0  
 318 00da 00F0BDF8 		bl	remap 
 319 00de 00F033F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 320 00e2 00F093F8 		bl  uart_init
 321 00e6 FFF7FEFF 		bl	tv_init 
 322 00ea 00F01DF8 		bl forth_init 
 323              	   // test code 
 324 00ee 4FF40144 		_MOV32 T2,VID_BUFF 
 324      C2F20104 
 325 00f6 4FF4FA46 		mov XP,#32000
 326 00fa 80EA0000 		eor T1,T1 
 327 00fe 4FF00A07 	1:  mov YP,#10
 328 0102 04F8010B 	2:	strb T1,[T2],#1
 329 0106 013F     		subs YP,#1 
 330 0108 FBD1     		bne 2b  
 331 010a 00F11100 		add T1,#0x11
 332 010e 10F00F0F 		tst T1,#15
 333 0112 01D1     		bne 3f
 334 0114 80EA0000 		eor T1,T1
 335 0118 0A3E     	3:  subs XP,#10 
 336 011a F0D1     		bne 1b 
 337              	//	b . 
 338              	// end test code */
 339 011c 0148     		ldr r0,forth_entry
 340 011e 40F00100 		orr r0,#1
 341 0122 0047     		bx r0
 342              	  
 343              		.p2align 2 
 344              	forth_entry:
 345 0124 201D0000 		.word COLD  
 346              	
 347              		.type forth_init, %function 
 348              	forth_init:
 349 0128 4FF00003 		_MOV32 r3,UPP 
 349      C2F20003 
 350 0130 4FF47F41 		_MOV32 R1,SPP
 350      C2F20101 
 351 0138 4FF68072 		_MOV32 R2,RPP
 351      C2F20102 
 352 0140 85EA0505 		EOR R5,R5  
 353 0144 7047     		BX LR 
 354              	
 355              	/*
 356              	// test code 
 357              		.type echo, %function 
 358              	echo:
 359              		BL KEY 
 360              		BL EMIT 
 361              		B  echo 	
 362              	
 363              		.type blink, %function 
 364              	blink:
 365              		_MOV32 r0,GPIOC_BASE_ADR
 366              	0:	mov r4,#1<<LED_PIN 
ARM GAS  ps2_kbd.s 			page 15


 367              		str r4,[r0,GPIO_BSRR]
 368              		mov	r4,#500
 369              		str r4,[R3,#TIMER_OFS] 
 370              		_CALL timeout
 371              		mov r4,#1<<(LED_PIN+16)
 372              		str r4,[r0,#GPIO_BSRR]
 373              		mov	r4,#500
 374              		str r4,[R3,#TIMER_OFS] 
 375              		_CALL timeout 
 376              		b 0b 
 377              	
 378              		.type timeout, %function 
 379              	timeout:
 380              		ldr r4,[r3,#TIMER_OFS]
 381              		orrs r4,r4
 382              		bne timeout 
 383              		bx lr 
 384              	*/
 385              	
 386              	
 387              	  .type init_devices, %function
 388 0146 00BF     	  .p2align 2 
 389              	init_devices:
 390              	/* init clock to HSE 96 Mhz */
 391              	/* set 3 wait states in FLASH_ACR_LATENCY */
 392 0148 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 392      C4F20200 
 393 0150 4FF00301 	  mov r1,#3 
 394 0154 0160     	  str r1,[r0,#FLASH_ACR]
 395              	/* configure clock for HSE, 25 Mhz crystal */
 396              	/* enable HSE in RCC_CR */
 397 0156 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 397      C4F20200 
 398 015e 0168     	  ldr r1,[r0,#RCC_CR]
 399 0160 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 400 0164 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 401              	/* wait HSERDY loop */
 402              	wait_hserdy:
 403 0166 0168     	  ldr r1,[r0,#RCC_CR]
 404 0168 11F4003F 	  tst r1,#(1<<17)
 405 016c FBD0     	  beq wait_hserdy
 406              	
 407              	/************************************************* 
 408              	   configure PLL  and source 
 409              	   SYSCLOCK=96 Mhz
 410              	   select HSE as  PLL source clock
 411              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 412              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 413              	****************************************************/
 414              	  /* set RCC_PLLCFGR */
 415 016e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 415      C4F20200 
 416 0176 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 416      C0F24041 
 417 017e 4160     	  str r1,[r0,#RCC_PLLCFGR]
 418              	  /* enable PLL */
 419 0180 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  ps2_kbd.s 			page 16


 420 0182 41F08071 	  orr r1, #(1<<24)
 421 0186 0160     	  str r1,[r0,#RCC_CR]
 422              	/* wait for PLLRDY */
 423              	wait_pllrdy:
 424 0188 0168     	  ldr r1,[r0,#RCC_CR]
 425 018a 11F0007F 	  tst r1,#(1<<25)
 426 018e FBD1     	  bne wait_pllrdy 
 427              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 428 0190 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 428      C0F21901 
 429 0198 8160     	  str r1,[r0,#RCC_CFGR]
 430              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 431 019a 8168     	  ldr r1,[r0,#RCC_CFGR]
 432 019c 41F00201 	  orr r1,#2
 433 01a0 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 434              	/* wait for SWS==2 */
 435              	wait_sws:
 436 01a2 8168     	  ldr r1,[r0,#RCC_CFGR]
 437 01a4 11F0080F 	  tst r1,#(2<<2)
 438 01a8 FBD0     	  beq wait_sws
 439              	/* now sysclock is 96 Mhz */
 440              	
 441              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 442 01aa 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 443 01ae 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 444 01b0 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 445 01b4 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 446              	/* configure GPIOC:13 as output for user LED */
 447 01b6 4FF40060 	  _MOV32 r0,LED_GPIO 
 447      C4F20200 
 448 01be 0168     	  ldr r1,[r0,#GPIO_MODER]
 449 01c0 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 450 01c4 01EA0201 	  and r1,r1,r2
 451 01c8 41F08061 	  orr r1,#(1<<(2*LED_PIN))
 452 01cc 0160     	  str r1,[r0,#GPIO_MODER]
 453 01ce 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 454 01d0 41F40051 	  orr r1,#(1<<LED_PIN)
 455 01d4 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 456 01d6 81EA0101 	  eor r1,r1 
 457 01da 8182     	  strh r1,[r0,#GPIO_ODR]	
 458              	/* enable compensation CELL for fast I/O */
 459 01dc 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 459      C4F20101 
 460 01e4 4FF00100 		mov r0,#1 
 461 01e8 0862     		str r0,[R1,#SYSCFG_CMPCR]
 462              	/* wait for ready bit */ 
 463 01ea 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 464 01ec 10F4807F 	    tst r0,#(1<<8)
 465 01f0 FBD0     		beq 1b 	
 466              	
 467              	
 468              	/* configure systicks for 1msec ticks */
 469 01f2 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 469      CEF20000 
 470 01fa 47F2FF61 	  _MOV32 r1,95999 
 470      C0F20101 
 471 0202 4160     	  str r1,[r0,#STK_LOAD]
ARM GAS  ps2_kbd.s 			page 17


 472 0204 4FF00701 	  mov r1,#7
 473 0208 0160     	  str r1,[r0,STK_CTL]
 474 020a 7047     	  _NEXT  
 475              	
 476              	/*******************************
 477              	  initialize UART peripheral 
 478              	********************************/
 479              		.type uart_init, %function
 480              	uart_init:
 481              	/* set GPIOA PIN 9, uart TX  */
 482 020c 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 482      C4F20200 
 483 0214 0168     	  ldr r1,[r0,#GPIO_MODER]
 484 0216 6FF47012 	  mvn r2,#0xf<<(2*9)
 485 021a 01EA0201 	  and r1,r1,r2
 486 021e 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 487 0222 41EA0201 	  orr r1,r1,r2 
 488 0226 0160     	  str r1,[r0,#GPIO_MODER]
 489              	/* select alternate functions USART1==AF07 */ 
 490 0228 4FF4EE61 	  mov r1,#0x77<<4 
 491 022c 4162     	  str r1,[r0,#GPIO_AFRH]
 492              	/* configure USART1 registers */
 493 022e 4FF48050 	  _MOV32 r0,UART 
 493      C4F20100 
 494              	/* BAUD rate */
 495 0236 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 496 023a 8160     	  str r1,[r0,#USART_BRR]
 497 023c 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 498 0240 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 499              	/* enable interrupt in NVIC */
 500 0242 4FF46040 	  _MOV32 r0,NVIC_BASE_ADR
 500      CEF20000 
 501 024a D0F80411 	  ldr r1,[r0,#NVIC_ISER1]
 502 024e 41F02001 	  orr r1,#32   
 503 0252 C0F80411 	  str r1,[r0,#NVIC_ISER1]
 504 0256 7047     	  bx lr 
 505              	
 506              	/* copy system to RAM */ 
 507              		.type remap, %function 
 508              	
 509              	remap:
 510              	// copy system to RAM 	
 511 0258 4FF00000 		_MOV32 r0,RAM_ADR 
 511      C2F20000 
 512 0260 0D49     		ldr r1,init_vars_src 
 513 0262 41F67C52 		mov r2,#CTOP-UZERO 
 514 0266 02F10302 		add r2,r2,#3
 515 026a 22F00302 		and r2,r2,#~3 
 516 026e 51F8043B 	1:	ldr r3,[r1],#4 
 517 0272 40F8043B 		str r3,[r0],#4 
 518 0276 043A     		subs R2,#4 
 519 0278 F9D1     		bne 1b
 520              	// zero end of RAM 
 521 027a 4FF00002 		_MOV32 r2,RAM_END 
 521      C2F20202 
 522 0282 83EA0303 		eor r3,r3,r3 
 523 0286 40F8043B 	2:  str r3,[r0],#4
ARM GAS  ps2_kbd.s 			page 18


 524 028a 9042     		cmp r0,r2 
 525 028c FBDB     		blt 2b 
 526 028e 4FF00003 		_MOV32 UP,RAM_ADR  
 526      C2F20003 
 527 0296 7047     		_NEXT 
 528              	init_vars_src:
 529 0298 00000000 		.word UZERO 
 530              	
 531              	/********************
 532              	* Version control
 533              	*******************/
 534              	.equ VER ,	0x01	/*major release version */
 535              	.equ EXT ,	0x00	/*minor extension */
 536              	
 537              	/* Constants */
 538              	
 539              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 540              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 541              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 542              	
 543              	.equ CELLL ,	4	/*size of a cell */
 544              	.equ BASEE ,	10	/*default radix */
 545              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 546              	
 547              	.equ BKSPP ,	8	/*backspace */
 548              	.equ LF ,	10	  /*line feed */
 549              	.equ CRR ,	13	/*carriage return */
 550              	.equ ERR ,	27	/*error escape */
 551              	.equ TIC ,	39	/*tick */
 552              	
 553              	/********************************************************
 554              	* RAM memory mapping
 555              	* 	0x20000000	RAM base address
 556              	*	0x20000000  system variables	
 557              	* 	0x20000200	Forth dictionary
 558              	* 	0x2000????	top of dictionary, HERE
 559              	* 	0x2000????	WORD buffer, HERE+16
 560              	*   0x200180FC  end of user space
 561              	*   0x20018100  video buffer 32000 bytes 
 562              	* 	0x2001FF00	top of data stack  R2
 563              	* 	0x2001FF80	TIB terminal input buffer
 564              	* 	0x2001FF80	top of return stack  R1
 565              	* 	0x20020000	top of hardware stack for interrupts R14
 566              	********************************************************/
 567              	
 568              	
 569              	/******************************************************
 570              	*  COLD start moves the following to USER variables.
 571              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 572              	******************************************************/
 573              		.section  .text, "ax" ,%progbits 
 574              		.p2align 2
 575              	
 576              	UZERO:
 577 0000 00000000 		.word 0  			/*Reserved */
 578 0004 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 579 0008 00000000 		.word 0      /* TICKS */
ARM GAS  ps2_kbd.s 			page 19


 580 000c 00000000 	    .word 0     /* TIMER */
 581 0010 C41C0000 		.word HI  /*'BOOT */
 582 0014 0A000000 		.word BASEE 	/*BASE */
 583 0018 00000000 		.word 0			/*tmp */
 584 001c 00000000 		.word 0			/*SPAN */
 585 0020 00000000 		.word 0			/*>IN */
 586 0024 00000000 		.word 0			/*#TIB */
 587 0028 00FF0120 		.word TIBB	/*TIB */
 588 002c 64110000 		.word INTER	/*'EVAL */
 589 0030 00000000 		.word 0			/*HLD */
 590 0034 300B0000 		.word _LASTN	/*CONTEXT */
 591 0038 7C1D0000 		.word CTOP  	/* FCP end of system dictionnary */
 592 003c 7C1D0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 593 0040 300B0000 		.word _LASTN	/*LAST word in dictionary */
 594 0044 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 594      00000000 
 594      00000000 
 594      00000000 
 595 0054 00000000 		.word 0  /* RX_HEAD */
 596 0058 00000000 		.word 0  /* RX_TAIL */ 
 597 005c 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 598 0060 00000000 		.word 0  /* VID_STATE, video state */  
 599 0064 00000000 	    .word 0  /* VID_FIELD, field */
 600 0068 00810120 		.word VID_BUFF /* video_buffer address */ 
 601 006c 00000000 	    .word 0 /* kbd struct */
 602 0070 00000000 		.space KBD_QUEUE_SIZE,0  
 602      00000000 
 602      00000000 
 602      00000000 
 603 0080 00000000 		.word 0  /* kbd queue head */
 604 0084 00000000 		.word 0 /* kbd queue tail */ 
 605              	ULAST:
 606              	
 607              	/***********************************
 608              	//  Start of Forth dictionary
 609              	***********************************/
 610              	
 611 0088 AFF30080 		.p2align 4
 611      AFF30080 
 612              	
 613              	/*******************************
 614              	    kbd_scancode 
 615              	    extract scancode from queue 
 616              	******************************/
 617              	    _HEADER scan_code,5,"SCODE" 
 618 0090 41F8045D 	    _PUSH 
 619 0094 D3F88060 	    ldr XP,[UP,#KBD_QHEAD_OFS]
 620 0098 D3F88470 	1:  ldr YP,[UP,#KBD_QTAIL_OFS]
 621 009c BE42     	    cmp XP,YP
 622 009e FBD0     	    beq 1b
 623 00a0 03F17007 	    add YP,UP,#KBD_QUEUE_OFS
 624 00a4 BD5D     	    ldrb TOS,[YP,XP]
 625 00a6 06F10106 	    add XP,#1 
 626 00aa 06F00F06 	    and XP,#KBD_QUEUE_SIZE-1 
 627 00ae 83F88060 	    strb XP,[UP,#KBD_QHEAD_OFS]
 628 00b2 7047     	    _RET 
 629              	
ARM GAS  ps2_kbd.s 			page 20


 630              	
 631              	// RANDOM ( n1 -- {0..n1-1} )
 632              	// return pseudo random number 
 633              	// REF: https://en.wikipedia.org/wiki/Xorshift
 634              	
 635              		_HEADER RAND,6,RANDOM 
 636 00b4 42F804ED 		_NEST 
 637 00b8 00F0D2F9 		bl SEED 
 638 00bc 00F096F8 		bl AT 
 639 00c0 4FEA4534 		lsl r4,r5,#13
 640 00c4 85EA0405 		eor r5,r4
 641 00c8 4FEA5544 		lsr r4,r5,#17
 642 00cc 85EA0405 		eor r5,r4
 643 00d0 4FEA4514 		lsl r4,r5,#5
 644 00d4 85EA0405 		eor r5,r4
 645 00d8 00F0AAF8 		bl DUPP 
 646 00dc 00F0C0F9 		bl SEED 
 647 00e0 00F07EF8 		bl STORE 
 648 00e4 00F050F9 		bl ABSS
 649 00e8 00F0A6F8 		bl SWAP 
 650 00ec 00F08CFA 		bl MODD 
 651 00f0 52F804FB 		_UNNEST 
 652              	
 653              	// PAUSE ( u -- ) 
 654              	// suspend execution for u milliseconds
 655              		_HEADER PAUSE,5,PAUSE 
 656 00f4 42F804ED 		_NEST 
 657 00f8 00F0BEF9 		BL TIMER 
 658 00fc 00F070F8 		BL STORE 
 659              	PAUSE_LOOP:
 660 0100 00F0BAF9 		BL TIMER 
 661 0104 00F072F8 		BL AT 
 662 0108 00F056F8 		BL QBRAN 
 663 010c 18010000 		.word PAUSE_EXIT  
 664 0110 00F05EF8 		BL BRAN 
 665 0114 00010000 		.word PAUSE_LOOP 
 666              	PAUSE_EXIT: 		
 667 0118 52F804FB 		_UNNEST 
 668              	
 669              	//  ULED ( T|F -- )
 670              	// control user LED, -1 ON, 0 OFF  
 671              		_HEADER ULED,4,ULED
 672 011c 4FF40056 		mov r6,#(1<<LED_PIN)
 673 0120 4FF40064 		_MOV32 r4,LED_GPIO 
 673      C4F20204 
 674 0128 2800     		movs r0,r5 
 675 012a 51F8045B 		_POP
 676 012e 01D0     		beq ULED_OFF 
 677 0130 4FEA0646 		LSL r6,#16 
 678              	ULED_OFF:
 679 0134 A661     		str r6,[r4,#GPIO_BSRR]
 680 0136 7047     		_NEXT 
 681              		
 682              	//    ?KEY	 ( -- c T | F )
 683              	// 	Return input character and true, or a false if no input.
 684              		_HEADER QRX,4,"?KEY"
 685              	QKEY: 
ARM GAS  ps2_kbd.s 			page 21


 686 0138 41F8045D 		_PUSH
 687 013c 9F6D     		ldr r7,[r3,#RX_TAIL_OFS] 
 688 013e 5E6D     		ldr r6,[r3,#RX_HEAD_OFS]
 689 0140 96EA0705 		eors r5,r6,r7 
 690 0144 0CD0     		beq 1f
 691 0146 03F14407 		add r7,r3,#RX_QUEUE_OFS 
 692 014a 3744     		add r7,r6 
 693 014c 3D78     		ldrb r5,[r7]
 694 014e 06F10106 		add r6,#1 
 695 0152 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 696 0156 5E65     		str r6,[R3,#RX_HEAD_OFS]
 697 0158 41F8045D 		_PUSH 
 698 015c 4FF0FF35 		mov r5,#-1
 699 0160 7047     	1:	_NEXT 
 700 0162 00BF     		.p2align 2 
 701              	
 702              	//    TX!	 ( c -- )
 703              	// 	Send character c to the output device.
 704              		_HEADER EMIT,4,EMIT
 705              	TECHO:
 706 0164 4FF48054 		_MOV32 r4,UART 
 706      C4F20104 
 707 016c 2668     	1:	ldr	r6, [r4, #USART_SR]	
 708 016e 16F08006 		ands	r6, #0x80		//  TXE bit 
 709 0172 FBD0     		beq	1b
 710 0174 2571     		strb	r5, [r4, #USART_DR]	
 711 0176 51F8045B 		_POP
 712 017a 7047     		_NEXT 
 713              		
 714              	// **************************************************************************
 715              	//  The kernel
 716              	
 717              	//    NOP	( -- )
 718              	// 	do nothing.
 719              		_HEADER NOP,3,NOP 
 720 017c 7047     		_NEXT
 721              	 
 722              	
 723              	//    doLIT	( -- w )
 724              	// 	Push an inline literal.
 725              	
 726              	// 	.word	_NOP
 727              	// _LIT	.byte   COMPO+5
 728              	// 	.ascii "doLIT"
 729              	// 	.p2align 2 	
 730              	DOLIT:
 731 017e 41F8045D 		_PUSH				//  store R5 on data stack
 732 0182 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 733 0186 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 734 018a 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 735 018e 7047     		_NEXT
 736              	
 737              	//    EXECUTE	( ca -- )
 738              	// 	Execute the word at ca.
 739              		_HEADER EXECU,7,EXECUTE 
 740 0190 45F00104 		ORR	R4,R5,#1		//  b0=1 
 741 0194 51F8045B 		_POP
ARM GAS  ps2_kbd.s 			page 22


 742 0198 2047     		BX	R4
 743              	
 744              	//    next	( -- ) counter on R:
 745              	// 	Run time code for the single index loop.
 746              	// 	: next ( -- ) \ hilevel model
 747              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 748              	
 749              	// 	.word	_EXECU
 750              	// _DONXT	.byte   COMPO+4
 751              	// 	.ascii "next"
 752              	// 	.p2align 2 	
 753              	DONXT:
 754 019a 1468     		LDR	R4,[R2]   // ( -- u )  
 755 019c 24B9     		CBNZ R4,NEXT1 
 756              		/* loop done */
 757 019e 02F10402 		ADD	R2,R2,#4 // drop counter 
 758 01a2 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 759 01a6 7047     		_NEXT
 760              	NEXT1:
 761              		/* decrement loop counter */
 762 01a8 A4F10104 		SUB	R4,R4,#1
 763 01ac 1460     		STR	R4,[R2]
 764 01ae 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 765 01b2 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 766 01b6 7047     		_NEXT
 767              	
 768              	//    ?branch	( f -- )
 769              	// 	Branch if flag is zero.
 770              	
 771              	// 	.word	_DONXT
 772              	// _QBRAN	.byte   COMPO+7
 773              	// 	.ascii "?branch"
 774              	// 	.p2align 2 	
 775              	QBRAN:
 776 01b8 2C00     		MOVS	R4,R5
 777 01ba 51F8045B 		_POP
 778 01be 04D1     		BNE	QBRAN1
 779 01c0 5EF801EC 		LDR	LR,[LR,#-1]
 780 01c4 4EF0010E 		ORR LR,LR,#1
 781 01c8 7047     		_NEXT
 782              	QBRAN1:
 783 01ca 0EF1040E 	 	ADD	LR,LR,#4
 784 01ce 7047     		_NEXT
 785              	
 786              	//    branch	( -- )
 787              	// 	Branch to an inline address.
 788              	
 789              	// 	.word	_QBRAN
 790              	// _BRAN	.byte   COMPO+6
 791              	// 	.ascii "branch"
 792              	// 	.p2align 2 	
 793              	BRAN:
 794 01d0 5EF801EC 		LDR	LR,[LR,#-1]
 795 01d4 4EF0010E 		ORR	LR,LR,#1
 796 01d8 7047     		_NEXT
 797              	
 798              	//    EXIT	(  -- )
ARM GAS  ps2_kbd.s 			page 23


 799              	// 	Exit the currently executing command.
 800 01da 00BF     		_HEADER EXIT,4,EXIT 
 801 01dc 52F804FB 		_UNNEST 
 802              	
 803              	//    !	   ( w a -- )
 804              	// 	Pop the data stack to memory.
 805              		_HEADER STORE,1,"!"
 806 01e0 51F8044B 		LDR	R4,[R1],#4
 807 01e4 2C60     		STR	R4,[R5]
 808 01e6 51F8045B 		_POP
 809 01ea 7047     		_NEXT
 810              	
 811              	//    @	   ( a -- w )
 812              	// 	Push memory location to the data stack.
 813              		_HEADER AT,1,"@"
 814 01ec 2D68     		LDR	R5,[R5]
 815 01ee 7047     		_NEXT
 816              	
 817              	//    C!	  ( c b -- )
 818              	// 	Pop the data stack to byte memory.
 819              		_HEADER CSTOR,2,"C!"
 820 01f0 51F8044B 		LDR	R4,[R1],#4
 821 01f4 2C70     		STRB	R4,[R5]
 822 01f6 51F8045B 		_POP
 823 01fa 7047     		_NEXT
 824              	
 825              	//    C@	  ( b -- c )
 826              	// 	Push byte memory location to the data stack.
 827              		_HEADER CAT,2,"C@"
 828 01fc 2D78     		LDRB	R5,[R5]
 829 01fe 7047     		_NEXT
 830              	
 831              	//    R>	  ( -- w )
 832              	// 	Pop the return stack to the data stack.
 833              		_HEADER RFROM,2,"R>"
 834 0200 41F8045D 		_PUSH
 835 0204 52F8045B 		LDR	R5,[R2],#4
 836 0208 7047     		_NEXT
 837              	
 838              	//    R@	  ( -- w )
 839              	// 	Copy top of return stack to the data stack.
 840 020a 00BF     		_HEADER RAT,2,"R@"
 841 020c 41F8045D 		_PUSH
 842 0210 1568     		LDR	R5,[R2]
 843 0212 7047     		_NEXT
 844              	
 845              	//    >R	  ( w -- )
 846              	// 	Push the data stack to the return stack.
 847              		_HEADER TOR,2+COMPO,">R"
 848 0214 42F8045D 		STR	R5,[R2,#-4]!
 849 0218 51F8045B 		_POP
 850 021c 7047     		_NEXT  
 851              	
 852              	//    SP@	 ( -- a )
 853              	// 	Push the current data stack pointer.
 854 021e 00BF     		_HEADER SPAT,3,"SP@"
 855 0220 41F8045D 		_PUSH
ARM GAS  ps2_kbd.s 			page 24


 856 0224 0D46     		MOV	R5,R1
 857 0226 7047     		_NEXT
 858              	
 859              	//    DROP	( w -- )
 860              	// 	Discard top stack item.
 861              		_HEADER DROP,4,DROP
 862 0228 51F8045B 		_POP
 863 022c 7047     		_NEXT
 864              	
 865              	//    DUP	 ( w -- w w )
 866              	// 	Duplicate the top stack item.
 867 022e 00BF     		_HEADER DUPP,3,"DUP"
 868 0230 41F8045D 		_PUSH
 869 0234 7047     		_NEXT
 870              	
 871              	//    SWAP	( w1 w2 -- w2 w1 )
 872              	// 	Exchange top two stack items.
 873 0236 00BF     		_HEADER SWAP,4,"SWAP"
 874 0238 0C68     		LDR	R4,[R1]
 875 023a 0D60     		STR	R5,[R1]
 876 023c 2546     		MOV	R5,R4
 877 023e 7047     		_NEXT
 878              	
 879              	//    OVER	( w1 w2 -- w1 w2 w1 )
 880              	// 	Copy second stack item to top.
 881              		_HEADER OVER,4,"OVER"
 882 0240 41F8045D 		_PUSH
 883 0244 4D68     		LDR	R5,[R1,#4]
 884 0246 7047     		_NEXT
 885              	
 886              	//    0<	  ( n -- t )
 887              	// 	Return true if n is negative.
 888              		_HEADER ZLESS,2,"0<"
 889 0248 4FF00004 		MOV	R4,#0
 890 024c 04EB2505 		ADD	R5,R4,R5,ASR #32
 891 0250 7047     		_NEXT
 892              	
 893              	//    AND	 ( w w -- w )
 894              	// 	Bitwise AND.
 895 0252 00BF     		_HEADER ANDD,3,"AND"
 896 0254 51F8044B 		LDR	R4,[R1],#4
 897 0258 05EA0405 		AND	R5,R4
 898 025c 7047     		_NEXT
 899              	
 900              	//    OR	  ( w w -- w )
 901              	// 	Bitwise inclusive OR.
 902 025e 00BF     		_HEADER ORR,2,"OR"
 903 0260 51F8044B 		LDR	R4,[R1],#4
 904 0264 45EA0405 		ORR	R5,R4
 905 0268 7047     		_NEXT
 906              	
 907              	//    XOR	 ( w w -- w )
 908              	// 	Bitwise exclusive OR.
 909 026a 00BF     		_HEADER XORR,3,"XOR"
 910 026c 51F8044B 		LDR	R4,[R1],#4
 911 0270 85EA0405 		EOR	R5,R4
 912 0274 7047     		_NEXT
ARM GAS  ps2_kbd.s 			page 25


 913              	
 914              	//    UM+	 ( w w -- w cy )
 915              	// 	Add two numbers, return the sum and carry flag.
 916 0276 00BF     		_HEADER UPLUS,3,"UM+"
 917 0278 0C68     		LDR	R4,[R1]
 918 027a 6419     		ADDS	R4,R4,R5
 919 027c 4FF00005 		MOV	R5,#0
 920 0280 45F10005 		ADC	R5,R5,#0
 921 0284 0C60     		STR	R4,[R1]
 922 0286 7047     		_NEXT
 923              	
 924              	//    RSHIFT	 ( w # -- w )
 925              	// 	arithmetic Right shift # bits.
 926              		_HEADER RSHIFT,6,"RSHIFT"
 927 0288 51F8044B 		LDR	R4,[R1],#4
 928 028c 44FA05F5 		MOV	R5,R4,ASR R5
 929 0290 7047     		_NEXT
 930              	
 931              	//    LSHIFT	 ( w # -- w )
 932              	// 	Right shift # bits.
 933 0292 00BF     		_HEADER LSHIFT,6,"LSHIFT"
 934 0294 51F8044B 		LDR	R4,[R1],#4
 935 0298 04FA05F5 		MOV	R5,R4,LSL R5
 936 029c 7047     		_NEXT
 937              	
 938              	//    +	 ( w w -- w )
 939              	// 	Add.
 940 029e 00BF     		_HEADER PLUS,1,"+"
 941 02a0 51F8044B 		LDR	R4,[R1],#4
 942 02a4 2544     		ADD	R5,R5,R4
 943 02a6 7047     		_NEXT
 944              	
 945              	//    -	 ( w w -- w )
 946              	// 	Subtract.
 947              		_HEADER SUBB,1,"-"
 948 02a8 51F8044B 		LDR	R4,[R1],#4
 949 02ac C5EB0405 		RSB	R5,R5,R4
 950 02b0 7047     		_NEXT
 951              	
 952              	//    *	 ( w w -- w )
 953              	// 	Multiply.
 954 02b2 00BF     		_HEADER STAR,1,"*"
 955 02b4 51F8044B 		LDR	R4,[R1],#4
 956 02b8 04FB05F5 		MUL	R5,R4,R5
 957 02bc 7047     		_NEXT
 958              	
 959              	//    UM*	 ( w w -- ud )
 960              	// 	Unsigned multiply.
 961 02be 00BF     		_HEADER UMSTA,3,"UM*"
 962 02c0 0C68     		LDR	R4,[R1]
 963 02c2 A5FB0467 		UMULL	R6,R7,R5,R4
 964 02c6 0E60     		STR	R6,[R1]
 965 02c8 3D46     		MOV	R5,R7
 966 02ca 7047     		_NEXT
 967              	
 968              	//    M*	 ( w w -- d )
 969              	// 	signed multiply.
ARM GAS  ps2_kbd.s 			page 26


 970              		_HEADER MSTAR,2,"M*"
 971 02cc 0C68     		LDR	R4,[R1]
 972 02ce 85FB0467 		SMULL	R6,R7,R5,R4
 973 02d2 0E60     		STR	R6,[R1]
 974 02d4 3D46     		MOV	R5,R7
 975 02d6 7047     		_NEXT
 976              	
 977              	//    1+	 ( w -- w+1 )
 978              	// 	Add 1.
 979              		_HEADER ONEP,2,"1+"
 980 02d8 05F10105 		ADD	R5,R5,#1
 981 02dc 7047     		_NEXT
 982              	
 983              	//    1-	 ( w -- w-1 )
 984              	// 	Subtract 1.
 985 02de 00BF     		_HEADER ONEM,2,"1-"
 986 02e0 A5F10105 		SUB	R5,R5,#1
 987 02e4 7047     		_NEXT
 988              	
 989              	//    2+	 ( w -- w+2 )
 990              	// 	Add 1.
 991 02e6 00BF     		_HEADER TWOP,2,"2+"
 992 02e8 05F10205 		ADD	R5,R5,#2
 993 02ec 7047     		_NEXT
 994              	
 995              	//    2-	 ( w -- w-2 )
 996              	// 	Subtract 2.
 997 02ee 00BF     		_HEADER TWOM,2,"2-"
 998 02f0 A5F10205 		SUB	R5,R5,#2
 999 02f4 7047     		_NEXT
 1000              	
 1001              	//    CELL+	( w -- w+4 )
 1002              	// 	Add CELLL.
 1003 02f6 00BF     		_HEADER CELLP,5,"CELL+"
 1004 02f8 05F10405 		ADD	R5,R5,#CELLL
 1005 02fc 7047     		_NEXT
 1006              	
 1007              	//    CELL-	( w -- w-4 )
 1008              	// 	Subtract CELLL.
 1009 02fe 00BF     		_HEADER CELLM,5,"CELL-"
 1010 0300 A5F10405 		SUB	R5,R5,#CELLL
 1011 0304 7047     		_NEXT
 1012              	 
 1013              	//    BL	( -- 32 )
 1014              	// 	Blank (ASCII space).
 1015 0306 00BF     		_HEADER BLANK,2,"BL"
 1016 0308 41F8045D 		_PUSH
 1017 030c 4FF02005 		MOV	R5,#32
 1018 0310 7047     		_NEXT
 1019              	
 1020              	//    CELLS	( w -- w*4 )
 1021              	// 	Multiply 4.
 1022 0312 00BF     		_HEADER CELLS,5,"CELLS"
 1023 0314 4FEA8505 		MOV	R5,R5,LSL#2
 1024 0318 7047     		_NEXT
 1025              	
 1026              	//    CELL/	( w -- w/4 )
ARM GAS  ps2_kbd.s 			page 27


 1027              	// 	Divide by 4.
 1028 031a 00BF     		_HEADER CELLSL,5,"CELL/"
 1029 031c 4FEAA505 		MOV	R5,R5,ASR#2
 1030 0320 7047     		_NEXT
 1031              	
 1032              	//    2*	( w -- w*2 )
 1033              	// 	Multiply 2.
 1034 0322 00BF     		_HEADER TWOST,2,"2*"
 1035 0324 4FEA4505 		MOV	R5,R5,LSL#1
 1036 0328 7047     		_NEXT
 1037              	
 1038              	//    2/	( w -- w/2 )
 1039              	// 	Divide by 2.
 1040 032a 00BF     		_HEADER TWOSL,2,"2/"
 1041 032c 4FEA6505 		MOV	R5,R5,ASR#1
 1042 0330 7047     		_NEXT
 1043              	
 1044              	//    ?DUP	( w -- w w | 0 )
 1045              	// 	Conditional duplicate.
 1046 0332 00BF     		_HEADER QDUP,4,"?DUP"
 1047 0334 2C00     		MOVS	R4,R5
 1048 0336 18BF     		IT NE 
 1049 0338 41F8045D 	    STRNE	R5,[R1,#-4]!
 1050 033c 7047     		_NEXT
 1051              	
 1052              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1053              	// 	Rotate top 3 items.
 1054 033e 00BF     		_HEADER ROT,3,"ROT"
 1055 0340 0C68     		LDR	R4,[R1]  // r4=w2 
 1056 0342 0D60     		STR	R5,[R1]  // w3 replace w2 
 1057 0344 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1058 0346 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1059 0348 7047     		_NEXT
 1060              	
 1061              	//    2DROP	( w1 w2 -- )
 1062              	// 	Drop top 2 items.
 1063 034a 00BF     		_HEADER DDROP,5,"2DROP"
 1064 034c 51F8045B 		_POP
 1065 0350 51F8045B 		_POP
 1066 0354 7047     		_NEXT
 1067              	
 1068              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1069              	// 	Duplicate top 2 items.
 1070 0356 00BF     		_HEADER DDUP,4,"2DUP"
 1071 0358 0C68     		LDR	R4,[R1] // r4=w1
 1072 035a 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1073 035e 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1074 0362 7047     		_NEXT
 1075              	
 1076              	//    D+	( d1 d2 -- d3 )
 1077              	// 	Add top 2 double numbers.
 1078              		_HEADER DPLUS,2,"D+"
 1079 0364 51F8044B 		LDR	R4,[R1],#4
 1080 0368 51F8046B 		LDR	R6,[R1],#4
 1081 036c 0F68     		LDR	R7,[R1]
 1082 036e E419     		ADDS	R4,R4,R7
 1083 0370 0C60     		STR	R4,[R1]
ARM GAS  ps2_kbd.s 			page 28


 1084 0372 45EB0605 		ADC	R5,R5,R6
 1085 0376 7047     		_NEXT
 1086              	
 1087              	//    NOT	 ( w -- !w )
 1088              	// 	1"s complement.
 1089              		_HEADER INVER,3,"NOT"
 1090 0378 6FEA0505 		MVN	R5,R5
 1091 037c 7047     		_NEXT
 1092              	
 1093              	//    NEGATE	( w -- -w )
 1094              	// 	2's complement.
 1095 037e 00BF     		_HEADER NEGAT,6,"NEGATE"
 1096 0380 C5F10005 		RSB	R5,R5,#0
 1097 0384 7047     		_NEXT
 1098              	
 1099              	//    ABS	 ( w -- |w| )
 1100              	// 	Absolute.
 1101 0386 00BF     		_HEADER ABSS,3,"ABS"
 1102 0388 15F0004F 		TST	R5,#0x80000000
 1103 038c 18BF     		IT NE
 1104 038e 6D42     	    RSBNE   R5,R5,#0
 1105 0390 7047     		_NEXT
 1106              	
 1107              	//  0= ( w -- f )
 1108              	// TOS==0?
 1109 0392 00BF     		_HEADER ZEQUAL,2,"0="
 1110 0394 15B9     		cbnz r5,1f
 1111 0396 4FF0FF35 		mov r5,#-1
 1112 039a 7047     		_NEXT 
 1113 039c 85EA0505 	1:  eor r5,r5,r5  
 1114 03a0 7047     		_NEXT 	
 1115              	
 1116              	//    =	 ( w w -- t )
 1117              	// 	Equal?
 1118 03a2 00BF     		_HEADER EQUAL,1,"="
 1119 03a4 51F8044B 		LDR	R4,[R1],#4
 1120 03a8 A542     		CMP	R5,R4
 1121 03aa 0CBF     		ITE EQ 
 1122 03ac 6FF00005 	    MVNEQ	R5,#0
 1123 03b0 0025     		MOVNE	R5,#0
 1124 03b2 7047     		_NEXT
 1125              	
 1126              	//    U<	 ( w w -- t )
 1127              	// 	Unsigned equal?
 1128              		_HEADER ULESS,2,"U<"
 1129 03b4 51F8044B 		LDR	R4,[R1],#4
 1130 03b8 AC42     		CMP	R4,R5
 1131 03ba 34BF     		ITE CC 
 1132 03bc 6FF00005 		MVNCC	R5,#0
 1133 03c0 0025     		MOVCS	R5,#0
 1134 03c2 7047     		_NEXT
 1135              	
 1136              	//    <	( w w -- t )
 1137              	// 	Less?
 1138              		_HEADER LESS,1,"<"
 1139 03c4 51F8044B 		LDR	R4,[R1],#4
 1140 03c8 AC42     		CMP	R4,R5
ARM GAS  ps2_kbd.s 			page 29


 1141 03ca B4BF     	    ITE LT
 1142 03cc 6FF00005 		MVNLT	R5,#0
 1143 03d0 0025     		MOVGE	R5,#0
 1144 03d2 7047     		_NEXT
 1145              	
 1146              	//    >	( w w -- t )
 1147              	// 	greater?
 1148              		_HEADER GREAT,1,">"
 1149 03d4 51F8044B 		LDR	R4,[R1],#4
 1150 03d8 AC42     		CMP	R4,R5
 1151 03da CCBF     		ITE GT
 1152 03dc 6FF00005 	    MVNGT	R5,#0
 1153 03e0 0025     		MOVLE	R5,#0
 1154 03e2 7047     		_NEXT
 1155              	
 1156              	//    MAX	 ( w w -- max )
 1157              	// 	Leave maximum.
 1158              		_HEADER MAX,3,"MAX"
 1159 03e4 51F8044B 		LDR	R4,[R1],#4
 1160 03e8 AC42     		CMP	R4,R5
 1161 03ea C8BF     		IT GT 
 1162 03ec 2546     		MOVGT	R5,R4
 1163 03ee 7047     		_NEXT
 1164              	
 1165              	//    MIN	 ( w w -- min )
 1166              	// 	Leave minimum.
 1167              		_HEADER MIN,3,"MIN"
 1168 03f0 51F8044B 		LDR	R4,[R1],#4
 1169 03f4 AC42     		CMP	R4,R5
 1170 03f6 B8BF     		IT LT
 1171 03f8 2546     		MOVLT	R5,R4
 1172 03fa 7047     		_NEXT
 1173              	
 1174              	//    +!	 ( w a -- )
 1175              	// 	Add to memory.
 1176              		_HEADER PSTOR,2,"+!"
 1177 03fc 51F8044B 		LDR	R4,[R1],#4
 1178 0400 2E68     		LDR	R6,[R5]
 1179 0402 2644     		ADD	R6,R6,R4
 1180 0404 2E60     		STR	R6,[R5]
 1181 0406 51F8045B 		_POP
 1182 040a 7047     		_NEXT
 1183              	
 1184              	//    2!	 ( d a -- )
 1185              	// 	Store double number.
 1186              		_HEADER DSTOR,2,"2!"
 1187 040c 51F8044B 		LDR	R4,[R1],#4
 1188 0410 51F8046B 		LDR	R6,[R1],#4
 1189 0414 45F8044B 		STR	R4,[R5],#4
 1190 0418 2E60     		STR	R6,[R5]
 1191 041a 51F8045B 		_POP
 1192 041e 7047     		_NEXT
 1193              	
 1194              	//    2@	 ( a -- d )
 1195              	// 	Fetch double number.
 1196              		_HEADER DAT,2,"2@"
 1197 0420 6C68     		LDR	R4,[R5,#4]
ARM GAS  ps2_kbd.s 			page 30


 1198 0422 41F8044D 		STR	R4,[R1,#-4]!
 1199 0426 2D68     		LDR	R5,[R5]
 1200 0428 7047     		_NEXT
 1201              	
 1202              	//    COUNT	( b -- b+1 c )
 1203              	// 	Fetch length of string.
 1204 042a 00BF     		_HEADER COUNT,5,"COUNT"
 1205 042c 15F8014B 		LDRB	R4,[R5],#1
 1206 0430 41F8045D 		_PUSH
 1207 0434 2546     		MOV	R5,R4
 1208 0436 7047     		_NEXT
 1209              	
 1210              	//    DNEGATE	( d -- -d )
 1211              	// 	Negate double number.
 1212              		_HEADER DNEGA,7,"DNEGATE"
 1213 0438 0C68     		LDR	R4,[R1]
 1214 043a A6EB0606 		SUB	R6,R6,R6
 1215 043e 341B     		SUBS R4,R6,R4
 1216 0440 66EB0505 		SBC	R5,R6,R5
 1217 0444 0C60     		STR	R4,[R1]
 1218 0446 7047     		_NEXT
 1219              	
 1220              	// **************************************************************************
 1221              	//  System and user variables
 1222              	
 1223              	//    doVAR	( -- a )
 1224              	// 	Run time routine for VARIABLE and CREATE.
 1225              	
 1226              	// 	.word	_DNEGA
 1227              	// _DOVAR	.byte  COMPO+5
 1228              	// 	.ascii "doVAR"
 1229              	// 	.p2align 2 	
 1230              	DOVAR:
 1231 0448 41F8045D 		_PUSH
 1232 044c AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1233 0450 52F804FB 		_UNNEST
 1234              	
 1235              	//    doCON	( -- a ) 
 1236              	// 	Run time routine for CONSTANT.
 1237              	
 1238              	// 	.word	_DOVAR
 1239              	// _DOCON	.byte  COMPO+5
 1240              	// 	.ascii "doCON"
 1241              	// 	.p2align 2 	
 1242              	DOCON:
 1243 0454 41F8045D 		_PUSH
 1244 0458 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1245 045c 52F804FB 		_UNNEST
 1246              	
 1247              	/***********************
 1248              	  system variables 
 1249              	***********************/
 1250              	
 1251              	 // SEED ( -- a)
 1252              	 // return PRNG seed address 
 1253              		_HEADER SEED,4,"SEED"
 1254 0460 41F8045D 		_PUSH 
ARM GAS  ps2_kbd.s 			page 31


 1255 0464 03F10405 		ADD R5,R3,#SEED_OFS
 1256 0468 7047     		_NEXT 	
 1257              	
 1258              	//  MSEC ( -- a)
 1259              	// return address of milliseconds counter
 1260 046a 00BF     		_HEADER MSEC,4,"MSEC"
 1261 046c 41F8045D 	  _PUSH
 1262 0470 03F10805 	  ADD R5,R3,#TICKS_OFS
 1263 0474 7047     	  _NEXT 
 1264              	
 1265              	// TIMER ( -- a )
 1266              	// count down timer 
 1267 0476 00BF     		_HEADER TIMER,5,"TIMER"
 1268 0478 41F8045D 	  _PUSH 
 1269 047c 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1270 0480 7047     	  _NEXT
 1271              	
 1272              	//    'BOOT	 ( -- a )
 1273              	// 	Application.
 1274 0482 00BF     		_HEADER TBOOT,5,"'BOOT"
 1275 0484 41F8045D 		_PUSH
 1276 0488 03F11005 		ADD	R5,R3,#BOOT_OFS 
 1277 048c 7047     		_NEXT
 1278              	
 1279              	//    BASE	( -- a )
 1280              	// 	Storage of the radix base for numeric I/O.
 1281 048e 00BF     		_HEADER BASE,4,"BASE"
 1282 0490 41F8045D 		_PUSH
 1283 0494 03F11405 		ADD	R5,R3,#BASE_OFS
 1284 0498 7047     		_NEXT
 1285              	
 1286              	//    tmp	 ( -- a )
 1287              	// 	A temporary storage location used in parse and find.
 1288              	
 1289              	// 	.word	_BASE
 1290              	// _TEMP	.byte   COMPO+3
 1291              	// 	.ascii "tmp"
 1292              	// 	.p2align 2 	
 1293              	TEMP:
 1294 049a 41F8045D 		_PUSH
 1295 049e 03F11805 		ADD	R5,R3,#TMP_OFS
 1296 04a2 7047     		_NEXT
 1297              	
 1298              	//    SPAN	( -- a )
 1299              	// 	Hold character count received by EXPECT.
 1300              		_HEADER SPAN,4,"SPAN"
 1301 04a4 41F8045D 		_PUSH
 1302 04a8 03F11C05 		ADD	R5,R3,#SPAN_OFS
 1303 04ac 7047     		_NEXT
 1304              	
 1305              	//    >IN	 ( -- a )
 1306              	// 	Hold the character pointer while parsing input stream.
 1307 04ae 00BF     		_HEADER INN,3,">IN"
 1308 04b0 41F8045D 		_PUSH
 1309 04b4 03F12005 		ADD	R5,R3,#TOIN_OFS
 1310 04b8 7047     		_NEXT
 1311              	
ARM GAS  ps2_kbd.s 			page 32


 1312              	//    #TIB	( -- a )
 1313              	// 	Hold the current count and address of the terminal input buffer.
 1314 04ba 00BF     		_HEADER NTIB,4,"#TIB"
 1315 04bc 41F8045D 		_PUSH
 1316 04c0 03F12405 		ADD	R5,R3,#NTIB_OFS
 1317 04c4 7047     		_NEXT
 1318              	
 1319              	//    'EVAL	( -- a )
 1320              	// 	Execution vector of EVAL.
 1321 04c6 00BF     		_HEADER TEVAL,5,"'EVAL"
 1322 04c8 41F8045D 		_PUSH
 1323 04cc 03F12C05 		ADD	R5,R3,#EVAL_OFS
 1324 04d0 7047     		_NEXT
 1325              	
 1326              	//    HLD	 ( -- a )
 1327              	// 	Hold a pointer in building a numeric output string.
 1328 04d2 00BF     		_HEADER HLD,3,"HLD"
 1329 04d4 41F8045D 		_PUSH
 1330 04d8 03F13005 		ADD	R5,R3,#HLD_OFS
 1331 04dc 7047     		_NEXT
 1332              	
 1333              	//    CONTEXT	( -- a )
 1334              	// 	A area to specify vocabulary search order.
 1335 04de 00BF     		_HEADER CNTXT,7,"CONTEXT"
 1336              	CRRNT:
 1337 04e0 41F8045D 		_PUSH
 1338 04e4 03F13405 		ADD	R5,R3,#CTXT_OFS
 1339 04e8 7047     		_NEXT
 1340              	
 1341              	//    CP	( -- a )
 1342              	// 	Point to top name in RAM vocabulary.
 1343 04ea 00BF     		_HEADER CPP,2,"CP"
 1344 04ec 41F8045D 		_PUSH
 1345 04f0 03F13C05 		ADD	R5,R3,#USER_CTOP_OFS
 1346 04f4 7047     		_NEXT
 1347              	
 1348              	//   FCP ( -- a )
 1349              	//  Point ot top of Forth system dictionary
 1350 04f6 00BF     		_HEADER FCP,3,"FCP"
 1351 04f8 41F8045D 		_PUSH 
 1352 04fc 03F13805 		ADD R5,R3,#FORTH_CTOP_OFS 
 1353 0500 7047     		_NEXT 
 1354              	
 1355              	//    LAST	( -- a )
 1356              	// 	Point to the last name in the name dictionary.
 1357 0502 00BF     		_HEADER LAST,4,"LAST"
 1358 0504 41F8045D 		_PUSH
 1359 0508 03F14005 		ADD	R5,R3,#LASTN_OFS
 1360 050c 7047     		_NEXT
 1361              	
 1362              	/***********************
 1363              		system constants 
 1364              	***********************/
 1365              	
 1366              	//	USER_BEGIN ( -- a )
 1367              	//  where user area begin in RAM
 1368 050e 00BF     		_HEADER USER_BEGIN,10,"USER_BEGIN"
ARM GAS  ps2_kbd.s 			page 33


 1369 0510 41F8045D 		_PUSH 
 1370 0514 004D     		ldr r5,USR_BGN_ADR 
 1371 0516 7047     		_NEXT 
 1372              	USR_BGN_ADR:
 1373 0518 7C1D0000 	.word CTOP 
 1374              	
 1375              	//  USER_END ( -- a )
 1376              	//  where user area end in RAM 
 1377              		_HEADER USER_END,8,"USER_END"
 1378 051c 41F8045D 		_PUSH 
 1379 0520 48F2FC05 		_MOV32 R5,DEND 
 1379      C2F20105 
 1380 0528 7047     		_NEXT 
 1381              	
 1382              	
 1383              	// VID-BUFF ( -- a )
 1384              	// video buffer address 
 1385 052a 00BF     		_HEADER VIDEO_BUFFER,8,"VID-BUFF"
 1386 052c 41F8045D 		_PUSH 
 1387 0530 9D6E     		ldr TOS,[UP,#VID_BUFFER_OFS]
 1388 0532 7047     		_NEXT 
 1389              	
 1390              	
 1391              	/* *********************
 1392              	  Common functions
 1393              	***********************/
 1394              	
 1395              	//    WITHIN	( u ul uh -- t )
 1396              	// 	Return true if u is within the range of ul and uh.
 1397              		_HEADER WITHI,6,"WITHIN"
 1398 0534 42F804ED 		_NEST
 1399 0538 FFF782FE 		BL	OVER
 1400 053c FFF7B4FE 		BL	SUBB
 1401 0540 FFF768FE 		BL	TOR
 1402 0544 FFF7B0FE 		BL	SUBB
 1403 0548 FFF75AFE 		BL	RFROM
 1404 054c FFF732FF 		BL	ULESS
 1405 0550 52F804FB 		_UNNEST
 1406              	
 1407              	//  Divide
 1408              	
 1409              	//    UM/MOD	( udl udh u -- ur uq )
 1410              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1411              		_HEADER UMMOD,6,"UM/MOD"
 1412 0554 4FF00107 		MOV	R7,#1
 1413 0558 51F8044B 		LDR	R4,[R1],#4
 1414 055c 0E68     		LDR	R6,[R1]
 1415              	UMMOD0:
 1416 055e B619     		ADDS	R6,R6,R6
 1417 0560 6441     		ADCS	R4,R4,R4
 1418 0562 04D3     		BCC	UMMOD1
 1419 0564 A4EB0504 		SUB	R4,R4,R5
 1420 0568 06F10106 		ADD	R6,R6,#1
 1421 056c 04E0     		B UMMOD2
 1422              	UMMOD1:
 1423 056e 641B     		SUBS	R4,R4,R5 
 1424 0570 28BF     		IT CS 
ARM GAS  ps2_kbd.s 			page 34


 1425 0572 0136     		ADDCS	R6,R6,#1
 1426 0574 00D2     		BCS	UMMOD2
 1427 0576 2C44     		ADD	R4,R4,R5
 1428              	UMMOD2:
 1429 0578 FF19     		ADDS	R7,R7,R7
 1430 057a F0D3     		BCC	UMMOD0
 1431 057c 3546     		MOV	R5,R6
 1432 057e 0C60     		STR	R4,[R1]
 1433 0580 7047     		_NEXT
 1434              	
 1435              	//    M/MOD	( d n -- r q )
 1436              	// 	Signed floored divide of double by single. Return mod and quotient.
 1437 0582 00BF     		_HEADER MSMOD,5,"M/MOD"
 1438 0584 42F804ED 		_NEST
 1439 0588 FFF752FE 		BL	DUPP
 1440 058c FFF75CFE 		BL	ZLESS
 1441 0590 FFF74EFE 		BL	DUPP
 1442 0594 FFF73EFE 		BL	TOR
 1443 0598 FFF70EFE 		BL	QBRAN
 1444 059c B0050000 		.word	MMOD1
 1445 05a0 FFF7EEFE 		BL	NEGAT
 1446 05a4 FFF736FE 		BL	TOR
 1447 05a8 FFF746FF 		BL	DNEGA
 1448 05ac FFF728FE 		BL	RFROM
 1449              	MMOD1:
 1450 05b0 FFF730FE 	  BL	TOR
 1451 05b4 FFF73CFE 		BL	DUPP
 1452 05b8 FFF746FE 		BL	ZLESS
 1453 05bc FFF7FCFD 		BL	QBRAN
 1454 05c0 CC050000 		.word	MMOD2
 1455 05c4 FFF722FE 		BL	RAT
 1456 05c8 FFF76AFE 		BL	PLUS
 1457              	MMOD2:
 1458 05cc FFF718FE 	  BL	RFROM
 1459 05d0 FFF7C0FF 		BL	UMMOD
 1460 05d4 FFF714FE 		BL	RFROM
 1461 05d8 FFF7EEFD 		BL	QBRAN
 1462 05dc EC050000 		.word	MMOD3
 1463 05e0 FFF72AFE 		BL	SWAP
 1464 05e4 FFF7CCFE 		BL	NEGAT
 1465 05e8 FFF726FE 		BL	SWAP
 1466              	MMOD3:   
 1467 05ec 52F804FB 		_UNNEST
 1468              	
 1469              	//    /MOD	( n n -- r q )
 1470              	// 	Signed divide. Return mod and quotient.
 1471              		_HEADER SLMOD,4,"/MOD"
 1472 05f0 42F804ED 		_NEST
 1473 05f4 FFF724FE 		BL	OVER
 1474 05f8 FFF726FE 		BL	ZLESS
 1475 05fc FFF71CFE 		BL	SWAP
 1476 0600 FFF7C0FF 		BL	MSMOD
 1477 0604 52F804FB 		_UNNEST
 1478              	
 1479              	//    MOD	 ( n n -- r )
 1480              	// 	Signed divide. Return mod only.
 1481              		_HEADER MODD,3,"MOD"
ARM GAS  ps2_kbd.s 			page 35


 1482 0608 42F804ED 		_NEST
 1483 060c FFF7F0FF 		BL	SLMOD
 1484 0610 FFF70AFE 		BL	DROP
 1485 0614 52F804FB 		_UNNEST
 1486              	
 1487              	//    /	   ( n n -- q )
 1488              	// 	Signed divide. Return quotient only.
 1489              		_HEADER SLASH,1,"/"
 1490 0618 42F804ED 		_NEST
 1491 061c FFF7E8FF 		BL	SLMOD
 1492 0620 FFF70AFE 		BL	SWAP
 1493 0624 FFF700FE 		BL	DROP
 1494 0628 52F804FB 		_UNNEST
 1495              	
 1496              	//    */MOD	( n1 n2 n3 -- r q )
 1497              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1498              		_HEADER SSMOD,5,"*/MOD"
 1499 062c 42F804ED 		_NEST
 1500 0630 FFF7F0FD 		BL	TOR
 1501 0634 FFF74AFE 		BL	MSTAR
 1502 0638 FFF7E2FD 		BL	RFROM
 1503 063c FFF7A2FF 		BL	MSMOD
 1504 0640 52F804FB 		_UNNEST
 1505              	
 1506              	//    */	  ( n1 n2 n3 -- q )
 1507              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1508              		_HEADER STASL,2,"*/"
 1509 0644 42F804ED 		_NEST
 1510 0648 FFF7F0FF 		BL	SSMOD
 1511 064c FFF7F4FD 		BL	SWAP
 1512 0650 FFF7EAFD 		BL	DROP
 1513 0654 52F804FB 		_UNNEST
 1514              	
 1515              	// **************************************************************************
 1516              	//  Miscellaneous
 1517              	
 1518              	//    ALIGNED	( b -- a )
 1519              	// 	Align address to the cell boundary.
 1520              		_HEADER ALGND,7,"ALIGNED"
 1521 0658 05F10305 		ADD	R5,R5,#3
 1522 065c 6FF00304 		MVN	R4,#3
 1523 0660 05EA0405 		AND	R5,R5,R4
 1524 0664 7047     		_NEXT
 1525              	
 1526              	//    >CHAR	( c -- c )
 1527              	// 	Filter non-printing characters.
 1528 0666 00BF     		_HEADER TCHAR,5,">CHAR"
 1529 0668 42F804ED 		_NEST
 1530 066c FFF787FD 		_DOLIT 0x7F
 1530      7F000000 
 1531 0674 FFF7EEFD 		BL	ANDD
 1532 0678 FFF7DAFD 		BL	DUPP	// mask msb
 1533 067c FFF744FE 		BL	BLANK
 1534 0680 FFF77DFD 		_DOLIT 127
 1534      7F000000 
 1535 0688 FFF754FF 		BL	WITHI	// check for printable
 1536 068c FFF774FE 		BL	INVER
ARM GAS  ps2_kbd.s 			page 36


 1537 0690 FFF792FD 		BL	QBRAN
 1538 0694 A4060000 		.word	TCHA1
 1539 0698 FFF7C6FD 		BL	DROP
 1540 069c FFF76FFD 		_DOLIT 	'_'	// replace non-printables
 1540      5F000000 
 1541              	TCHA1:
 1542 06a4 52F804FB 		  _UNNEST
 1543              	
 1544              	//    DEPTH	( -- n )
 1545              	// 	Return the depth of the data stack.
 1546              		_HEADER DEPTH,5,"DEPTH"
 1547 06a8 4FF47F46 		_MOV32 R6,SPP 
 1547      C2F20106 
 1548 06b0 A6EB0106 		SUB	R6,R6,R1
 1549 06b4 41F8045D 		_PUSH
 1550 06b8 4FEAA605 		ASR	R5,R6,#2
 1551 06bc 7047     		_NEXT  
 1552              	
 1553              	//    PICK	( ... +n -- ... w )
 1554              	// 	Copy the nth stack item to tos.
 1555 06be 00BF     		_HEADER PICK,4,"PICK"
 1556 06c0 42F804ED 		_NEST
 1557 06c4 FFF708FE 		BL	ONEP
 1558 06c8 FFF724FE 		BL	CELLS
 1559 06cc FFF7A8FD 		BL	SPAT
 1560 06d0 FFF7E6FD 		BL	PLUS
 1561 06d4 FFF78AFD 		BL	AT
 1562 06d8 52F804FB 		_UNNEST
 1563              	
 1564              	// **************************************************************************
 1565              	//  Memory access
 1566              	
 1567              	//    HERE	( -- a )
 1568              	// 	Return the top of the code dictionary.
 1569              		_HEADER HERE,4,"HERE"
 1570 06dc 42F804ED 		_NEST
 1571 06e0 FFF704FF 		BL	CPP
 1572 06e4 FFF782FD 		BL	AT
 1573 06e8 52F804FB 		_UNNEST
 1574              		
 1575              	//    PAD	 ( -- a )
 1576              	// 	Return the address of a temporary buffer.
 1577              		_HEADER PAD,4,"PAD"
 1578 06ec 42F804ED 		_NEST
 1579 06f0 FFF7F4FF 		BL	HERE
 1580 06f4 05F15005 		ADD	R5,R5,#80
 1581 06f8 52F804FB 		_UNNEST
 1582              	
 1583              	//    TIB	 ( -- a )
 1584              	// 	Return the address of the terminal input buffer.
 1585              		_HEADER TIB,3,"TIB"
 1586 06fc 41F8045D 		_PUSH
 1587 0700 9D6A     		ldr r5,[r3,#TIB_OFS]
 1588 0702 7047     		_NEXT
 1589              	
 1590              	//    @EXECUTE	( a -- )
 1591              	// 	Execute vector stored in address a.
ARM GAS  ps2_kbd.s 			page 37


 1592              		_HEADER ATEXE,8,"@EXECUTE"
 1593 0704 2C00     		MOVS	R4,R5
 1594 0706 51F8045B 		_POP
 1595 070a 2468     		LDR	R4,[R4]
 1596 070c 44F00104 		ORR	R4,R4,#1
 1597 0710 18BF     	    IT NE 
 1598 0712 2047     		BXNE	R4
 1599 0714 7047     		_NEXT
 1600              	
 1601              	//    CMOVE	( b1 b2 u -- )
 1602              	// 	Copy u bytes from b1 to b2.
 1603 0716 00BF     		_HEADER CMOVE,5,"CMOVE"
 1604 0718 51F8046B 		LDR	R6,[R1],#4
 1605 071c 51F8047B 		LDR	R7,[R1],#4
 1606 0720 03E0     		B CMOV1
 1607              	CMOV0:
 1608 0722 17F8014B 		LDRB	R4,[R7],#1
 1609 0726 06F8014B 		STRB	R4,[R6],#1
 1610              	CMOV1:
 1611 072a 2D00     		MOVS	R5,R5
 1612 072c 02D0     		BEQ	CMOV2
 1613 072e A5F10105 		SUB	R5,R5,#1
 1614 0732 F6E7     		B CMOV0
 1615              	CMOV2:
 1616 0734 51F8045B 		_POP
 1617 0738 7047     		_NEXT
 1618              	
 1619              	//    MOVE	( a1 a2 u -- )
 1620              	// 	Copy u words from a1 to a2.
 1621 073a 00BF     		_HEADER MOVE,4,"MOVE"
 1622 073c 25F00305 		AND	R5,R5,#-4
 1623 0740 51F8046B 		LDR	R6,[R1],#4
 1624 0744 51F8047B 		LDR	R7,[R1],#4
 1625 0748 03E0     		B MOVE1
 1626              	MOVE0:
 1627 074a 57F8044B 		LDR	R4,[R7],#4
 1628 074e 46F8044B 		STR	R4,[R6],#4
 1629              	MOVE1:
 1630 0752 2D00     		MOVS	R5,R5
 1631 0754 02D0     		BEQ	MOVE2
 1632 0756 A5F10405 		SUB	R5,R5,#4
 1633 075a F6E7     		B MOVE0
 1634              	MOVE2:
 1635 075c 51F8045B 		_POP
 1636 0760 7047     		_NEXT
 1637              	
 1638              	//    FILL	( b u c -- )
 1639              	// 	Fill u bytes of character c to area beginning at b.
 1640 0762 00BF     		_HEADER FILL,4,"FILL"
 1641 0764 51F8046B 		LDR	R6,[R1],#4
 1642 0768 51F8047B 		LDR	R7,[R1],#4
 1643              	FILL0:
 1644 076c 00E0     		B FILL1
 1645 076e 2D46     		MOV	R5,R5
 1646              	FILL1:
 1647 0770 07F8015B 		STRB	R5,[R7],#1
 1648 0774 3600     		MOVS	R6,R6
ARM GAS  ps2_kbd.s 			page 38


 1649 0776 02D0     		BEQ	FILL2
 1650 0778 A6F10106 		SUB	R6,R6,#1
 1651 077c F6E7     		B FILL0
 1652              	FILL2:
 1653 077e 51F8045B 		_POP
 1654 0782 7047     		_NEXT
 1655              	
 1656              	//    PACK$	( b u a -- a )
 1657              	// 	Build a counted word with u characters from b. Null fill.
 1658              		_HEADER PACKS,5,"PACK$"
 1659 0784 42F804ED 		_NEST
 1660 0788 FFF766FF 		BL	ALGND
 1661 078c FFF750FD 		BL	DUPP
 1662 0790 FFF740FD 		BL	TOR			// strings only on cell boundary
 1663 0794 FFF754FD 		BL	OVER
 1664 0798 FFF782FD 		BL	PLUS
 1665 079c FFF79CFD 		BL	ONEP
 1666 07a0 FFF7EDFC 		_DOLIT 0xFFFFFFFC
 1666      FCFFFFFF 
 1667 07a8 FFF754FD 		BL	ANDD			// count mod cell
 1668 07ac FFF7E7FC 		_DOLIT 	0
 1668      00000000 
 1669 07b4 FFF740FD 		BL	SWAP
 1670 07b8 FFF712FD 		BL	STORE			// null fill cell
 1671 07bc FFF726FD 		BL	RAT
 1672 07c0 FFF7CAFD 		BL	DDUP
 1673 07c4 FFF714FD 		BL	CSTOR
 1674 07c8 FFF786FD 		BL	ONEP			// save count
 1675 07cc FFF734FD 		BL	SWAP
 1676 07d0 FFF7A2FF 		BL	CMOVE
 1677 07d4 FFF714FD 		BL	RFROM
 1678 07d8 52F804FB 		_UNNEST   			// move string
 1679              	
 1680              	// **************************************************************************
 1681              	//  Numeric output, single precision
 1682              	
 1683              	//    DIGIT	( u -- c )
 1684              	// 	Convert digit u to a character.
 1685              		_HEADER DIGIT,5,"DIGIT"
 1686 07dc 42F804ED 		_NEST
 1687 07e0 FFF7CDFC 		_DOLIT 9
 1687      09000000 
 1688 07e8 FFF72AFD 		BL	OVER
 1689 07ec FFF7EAFD 		BL	LESS
 1690 07f0 05F00705 		AND	R5,R5,#7
 1691 07f4 FFF754FD 		BL	PLUS
 1692 07f8 05F13005 		ADD	R5,R5,#'0'
 1693 07fc 52F804FB 		_UNNEST
 1694              	
 1695              	//    EXTRACT	( n base -- n c )
 1696              	// 	Extract the least significant digit from n.
 1697              		_HEADER EXTRC,7,"EXTRACT"
 1698 0800 42F804ED 		_NEST
 1699 0804 FFF7BBFC 		_DOLIT 0
 1699      00000000 
 1700 080c FFF714FD 		BL	SWAP
 1701 0810 FFF7A0FE 		BL	UMMOD
ARM GAS  ps2_kbd.s 			page 39


 1702 0814 FFF710FD 		BL	SWAP
 1703 0818 FFF7E0FF 		BL	DIGIT
 1704 081c 52F804FB 		_UNNEST
 1705              	
 1706              	//    <#	  ( -- )
 1707              	// 	Initiate the numeric output process.
 1708              		_HEADER BDIGS,2,"<#"
 1709 0820 42F804ED 		_NEST
 1710 0824 FFF762FF 		BL	PAD
 1711 0828 FFF754FE 		BL	HLD
 1712 082c FFF7D8FC 		BL	STORE
 1713 0830 52F804FB 		_UNNEST
 1714              	
 1715              	//    HOLD	( c -- )
 1716              	// 	Insert a character into the numeric output string.
 1717              		_HEADER HOLD,4,"HOLD"
 1718 0834 42F804ED 		_NEST
 1719 0838 FFF74CFE 		BL	HLD
 1720 083c FFF7D6FC 		BL	AT
 1721 0840 FFF74EFD 		BL	ONEM
 1722 0844 FFF7F4FC 		BL	DUPP
 1723 0848 FFF744FE 		BL	HLD
 1724 084c FFF7C8FC 		BL	STORE
 1725 0850 FFF7CEFC 		BL	CSTOR
 1726 0854 52F804FB 		_UNNEST
 1727              	
 1728              	//    #	   ( u -- u )
 1729              	// 	Extract one digit from u and append the digit to output string.
 1730              		_HEADER DIG,1,"#"
 1731 0858 42F804ED 		_NEST
 1732 085c FFF718FE 		BL	BASE
 1733 0860 FFF7C4FC 		BL	AT
 1734 0864 FFF7CCFF 		BL	EXTRC
 1735 0868 FFF7E4FF 		BL	HOLD
 1736 086c 52F804FB 		_UNNEST
 1737              	
 1738              	//    #S	  ( u -- 0 )
 1739              	// 	Convert u until all digits are added to the output string.
 1740              		_HEADER DIGS,2,"#S"
 1741 0870 42F804ED 		_NEST
 1742              	DIGS1:
 1743 0874 FFF7F0FF 	    BL	DIG
 1744 0878 FFF7DAFC 		BL	DUPP
 1745 087c FFF79CFC 		BL	QBRAN
 1746 0880 86080000 		.word	DIGS2
 1747 0884 F6E7     		B	DIGS1
 1748              	DIGS2:
 1749 0886 52F804FB 		  _UNNEST
 1750              	
 1751              	//    SIGN	( n -- )
 1752              	// 	Add a minus sign to the numeric output string.
 1753 088a 00BF     		_HEADER SIGN, 4,"SIGN"
 1754 088c 42F804ED 		_NEST
 1755 0890 FFF7DAFC 		BL	ZLESS
 1756 0894 FFF790FC 		BL	QBRAN
 1757 0898 A8080000 		.word	SIGN1
 1758 089c FFF76FFC 		_DOLIT '-'
ARM GAS  ps2_kbd.s 			page 40


 1758      2D000000 
 1759 08a4 FFF7C6FF 		BL	HOLD
 1760              	SIGN1:
 1761 08a8 52F804FB 		  _UNNEST
 1762              	
 1763              	//    #>	  ( w -- b u )
 1764              	// 	Prepare the outputDCB to be TYPE'd.
 1765              		_HEADER EDIGS,2,"#>"
 1766 08ac 42F804ED 		_NEST
 1767 08b0 FFF7BAFC 		BL	DROP
 1768 08b4 FFF70EFE 		BL	HLD
 1769 08b8 FFF798FC 		BL	AT
 1770 08bc FFF716FF 		BL	PAD
 1771 08c0 FFF7BEFC 		BL	OVER
 1772 08c4 FFF7F0FC 		BL	SUBB
 1773 08c8 52F804FB 		_UNNEST
 1774              	
 1775              	//    str	 ( n -- b u )
 1776              	// 	Convert a signed integer to a numeric string.
 1777              	
 1778              	// 	.word	_EDIGS
 1779              	// _STRR	.byte  3
 1780              	// 	.ascii "str"
 1781              	// 	.p2align 2 	
 1782              	STRR:
 1783 08cc 42F804ED 		_NEST
 1784 08d0 FFF7AEFC 		BL	DUPP
 1785 08d4 FFF79EFC 		BL	TOR
 1786 08d8 FFF756FD 		BL	ABSS
 1787 08dc FFF7A0FF 		BL	BDIGS
 1788 08e0 FFF7C6FF 		BL	DIGS
 1789 08e4 FFF78CFC 		BL	RFROM
 1790 08e8 FFF7D0FF 		BL	SIGN
 1791 08ec FFF7DEFF 		BL	EDIGS
 1792 08f0 52F804FB 		_UNNEST
 1793              	
 1794              	//    HEX	 ( -- )
 1795              	// 	Use radix 16 as base for numeric conversions.
 1796              		_HEADER HEX,3,"HEX"
 1797 08f4 42F804ED 		_NEST
 1798 08f8 FFF741FC 		_DOLIT 16
 1798      10000000 
 1799 0900 FFF7C6FD 		BL	BASE
 1800 0904 FFF76CFC 		BL	STORE
 1801 0908 52F804FB 		_UNNEST
 1802              	
 1803              	//    DECIMAL	( -- )
 1804              	// 	Use radix 10 as base for numeric conversions.
 1805              		_HEADER DECIM,7,"DECIMAL"
 1806 090c 42F804ED 		_NEST
 1807 0910 FFF735FC 		_DOLIT 10
 1807      0A000000 
 1808 0918 FFF7BAFD 		BL	BASE
 1809 091c FFF760FC 		BL	STORE
 1810 0920 52F804FB 		_UNNEST
 1811              	
 1812              	// **************************************************************************
ARM GAS  ps2_kbd.s 			page 41


 1813              	//  Numeric input, single precision
 1814              	
 1815              	//    DIGIT?	( c base -- u t )
 1816              	// 	Convert a character to its numeric value. A flag indicates success.
 1817              		_HEADER DIGTQ,6,"DIGIT?"
 1818 0924 42F804ED 		_NEST
 1819 0928 FFF774FC 		BL	TOR
 1820 092c FFF727FC 		_DOLIT '0'
 1820      30000000 
 1821 0934 FFF7B8FC 		BL	SUBB
 1822 0938 FFF721FC 		_DOLIT 9
 1822      09000000 
 1823 0940 FFF77EFC 		BL	OVER
 1824 0944 FFF73EFD 		BL	LESS
 1825 0948 FFF736FC 		BL	QBRAN
 1826 094c 70090000 		.word	DGTQ1
 1827 0950 FFF715FC 		_DOLIT 7
 1827      07000000 
 1828 0958 FFF7A6FC 		BL	SUBB
 1829 095c FFF768FC 		BL	DUPP
 1830 0960 FFF70DFC 		_DOLIT 10
 1830      0A000000 
 1831 0968 FFF72CFD 		BL	LESS
 1832 096c FFF778FC 		BL	ORR
 1833              	DGTQ1:
 1834 0970 FFF75EFC 	  BL	DUPP
 1835 0974 FFF744FC 		BL	RFROM
 1836 0978 FFF71CFD 		BL	ULESS
 1837 097c 52F804FB 		_UNNEST
 1838              	
 1839              	//    NUMBER?	( a -- n T | a F )
 1840              	// 	Convert a number word to integer. Push a flag on tos.
 1841              		_HEADER NUMBQ,7,"NUMBER?"
 1842 0980 42F804ED 		_NEST
 1843 0984 FFF784FD 		BL	BASE
 1844 0988 FFF730FC 		BL	AT
 1845 098c FFF742FC 		BL	TOR
 1846 0990 FFF7F5FB 		_DOLIT 0
 1846      00000000 
 1847 0998 FFF752FC 		BL	OVER
 1848 099c FFF746FD 		BL	COUNT
 1849 09a0 FFF74EFC 		BL	OVER
 1850 09a4 FFF72AFC 		BL	CAT
 1851 09a8 FFF7E9FB 		_DOLIT '$'
 1851      24000000 
 1852 09b0 FFF7F8FC 		BL	EQUAL
 1853 09b4 FFF700FC 		BL	QBRAN
 1854 09b8 D0090000 		.word	NUMQ1
 1855 09bc FFF79AFF 		BL	HEX
 1856 09c0 FFF73AFC 		BL	SWAP
 1857 09c4 FFF788FC 		BL	ONEP
 1858 09c8 FFF736FC 		BL	SWAP
 1859 09cc FFF788FC 		BL	ONEM
 1860              	NUMQ1:
 1861 09d0 FFF736FC 		BL	OVER
 1862 09d4 FFF712FC 		BL	CAT
 1863 09d8 FFF7D1FB 		_DOLIT '-'
ARM GAS  ps2_kbd.s 			page 42


 1863      2D000000 
 1864 09e0 FFF7E0FC 		BL	EQUAL
 1865 09e4 FFF716FC 		BL	TOR
 1866 09e8 FFF726FC 		BL	SWAP
 1867 09ec FFF70EFC 		BL	RAT
 1868 09f0 FFF75AFC 		BL	SUBB
 1869 09f4 FFF720FC 		BL	SWAP
 1870 09f8 FFF708FC 		BL	RAT
 1871 09fc FFF750FC 		BL	PLUS
 1872 0a00 FFF798FC 		BL	QDUP
 1873 0a04 FFF7D8FB 		BL	QBRAN
 1874 0a08 940A0000 		.word	NUMQ6
 1875 0a0c FFF768FC 		BL	ONEM
 1876 0a10 FFF700FC 		BL	TOR
 1877              	NUMQ2:
 1878 0a14 FFF70CFC 		BL	DUPP
 1879 0a18 FFF7FCFB 		BL	TOR
 1880 0a1c FFF7EEFB 		BL	CAT
 1881 0a20 FFF736FD 		BL	BASE
 1882 0a24 FFF7E2FB 		BL	AT
 1883 0a28 FFF77CFF 		BL	DIGTQ
 1884 0a2c FFF7C4FB 		BL	QBRAN
 1885 0a30 780A0000 		.word	NUMQ4
 1886 0a34 FFF700FC 		BL	SWAP
 1887 0a38 FFF72AFD 		BL	BASE
 1888 0a3c FFF7D6FB 		BL	AT
 1889 0a40 FFF738FC 		BL	STAR
 1890 0a44 FFF72CFC 		BL	PLUS
 1891 0a48 FFF7DAFB 		BL	RFROM
 1892 0a4c FFF744FC 		BL	ONEP
 1893 0a50 FFF7A3FB 		BL	DONXT
 1894 0a54 140A0000 		.word	NUMQ2
 1895 0a58 FFF7D8FB 		BL	RAT
 1896 0a5c FFF7ECFB 		BL	SWAP
 1897 0a60 FFF7E2FB 		BL	DROP
 1898 0a64 FFF7A8FB 		BL	QBRAN
 1899 0a68 700A0000 		.word	NUMQ3
 1900 0a6c FFF788FC 		BL	NEGAT
 1901              	NUMQ3:
 1902 0a70 FFF7E2FB 		BL	SWAP
 1903 0a74 00F00CB8 		B.W	NUMQ5
 1904              	NUMQ4:
 1905 0a78 FFF7C2FB 		BL	RFROM
 1906 0a7c FFF7C0FB 		BL	RFROM
 1907 0a80 FFF764FC 		BL	DDROP
 1908 0a84 FFF762FC 		BL	DDROP
 1909 0a88 FFF779FB 		_DOLIT	0
 1909      00000000 
 1910              	NUMQ5:
 1911 0a90 FFF7CEFB 		BL	DUPP
 1912              	NUMQ6:
 1913 0a94 FFF7B4FB 		BL	RFROM
 1914 0a98 FFF758FC 		BL	DDROP
 1915 0a9c FFF7B0FB 		BL	RFROM
 1916 0aa0 FFF7F6FC 		BL	BASE
 1917 0aa4 FFF79CFB 		BL	STORE
 1918 0aa8 52F804FB 		_UNNEST
ARM GAS  ps2_kbd.s 			page 43


 1919              	
 1920              	// **************************************************************************
 1921              	//  Basic I/O
 1922              	
 1923              	//    KEY	 ( -- c )
 1924              	// 	Wait for and return an input character.
 1925              		_HEADER KEY,3,"KEY"
 1926 0aac 42F804ED 		_NEST
 1927              	KEY1:
 1928 0ab0 FFF742FB 		BL	QRX
 1929 0ab4 FFF780FB 		BL	QBRAN
 1930 0ab8 B00A0000 		.word	KEY1
 1931 0abc 52F804FB 		_UNNEST
 1932              	
 1933              	//    SPACE	( -- )
 1934              	// 	Send the blank character to the output device.
 1935              		_HEADER SPACE,5,"SPACE"
 1936 0ac0 42F804ED 		_NEST
 1937 0ac4 FFF720FC 		BL	BLANK
 1938 0ac8 FFF74CFB 		BL	EMIT
 1939 0acc 52F804FB 		_UNNEST
 1940              	
 1941              	//    SPACES	( +n -- )
 1942              	// 	Send n spaces to the output device.
 1943              		_HEADER SPACS,6,"SPACES"
 1944 0ad0 42F804ED 		_NEST
 1945 0ad4 FFF753FB 		_DOLIT 0
 1945      00000000 
 1946 0adc FFF782FC 		BL	MAX
 1947 0ae0 FFF798FB 		BL	TOR
 1948 0ae4 00F002B8 		B.W	CHAR2
 1949              	CHAR1:
 1950 0ae8 FFF7EAFF 		BL	SPACE
 1951              	CHAR2:
 1952 0aec FFF755FB 		BL	DONXT
 1953 0af0 E80A0000 		.word	CHAR1
 1954 0af4 52F804FB 		_UNNEST
 1955              	
 1956              	//    TYPE	( b u -- )
 1957              	// 	Output u characters from b.
 1958              		_HEADER TYPEE,4,"TYPE"
 1959 0af8 42F804ED 		_NEST
 1960 0afc FFF78AFB 		BL  TOR   // ( a+1 -- R: u )
 1961 0b00 00F006B8 		B.W	TYPE2
 1962              	TYPE1:  
 1963 0b04 FFF792FC 		BL  COUNT
 1964 0b08 FFF7AEFD 		BL	TCHAR
 1965 0b0c FFF72AFB 		BL	EMIT
 1966              	TYPE2:  
 1967 0b10 FFF743FB 		BL  DONXT  
 1968 0b14 040B0000 		.word	TYPE1
 1969 0b18 FFF786FB 		BL	DROP
 1970 0b1c 52F804FB 		_UNNEST
 1971              	
 1972              	//    CR	  ( -- )
 1973              	// 	Output a carriage return and a line feed.
 1974              		_HEADER CR,2,"CR"
ARM GAS  ps2_kbd.s 			page 44


 1975 0b20 42F804ED 		_NEST
 1976 0b24 FFF72BFB 		_DOLIT	CRR
 1976      0D000000 
 1977 0b2c FFF71AFB 		BL	EMIT
 1978 0b30 FFF725FB 		_DOLIT	LF
 1978      0A000000 
 1979 0b38 FFF714FB 		BL	EMIT
 1980 0b3c 52F804FB 		_UNNEST
 1981              	
 1982              	//    do_$	( -- a )
 1983              	// 	Return the address of a compiled string.
 1984              	//  adjust return address to skip over it.
 1985              	
 1986              	// 	.word	_CR
 1987              	// _DOSTR	.byte  COMPO+3
 1988              	// 	.ascii "do$$"
 1989              	// 	.p2align 2 	
 1990              	DOSTR:
 1991 0b40 42F804ED 		_NEST     
 1992              	/* compiled string address is 2 levels deep */
 1993 0b44 FFF75CFB 		BL	RFROM	// { -- a1 }
 1994 0b48 FFF75AFB 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 1995 0b4c FFF7C8FB 		BL	ONEM	//  clear b0
 1996 0b50 FFF76EFB 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 1997 0b54 FFF76AFC 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1998 0b58 FFF7A2FB 		BL	PLUS	// { -- a1 a2 a2+1+c }
 1999 0b5c FFF77CFD 		BL	ALGND	//  end of string
 2000 0b60 FFF7BAFB 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2001 0b64 FFF756FB 		BL	TOR		//  address after string { -- a1 a2 }
 2002 0b68 FFF766FB 		BL	SWAP	//  count tugged
 2003 0b6c FFF752FB 		BL	TOR     //  ( -- a2) is string address
 2004 0b70 52F804FB 		_UNNEST
 2005              	
 2006              	//    $"|	( -- a )
 2007              	// 	Run time routine compiled by _". Return address of a compiled string.
 2008              	
 2009              	// 	.word	_DOSTR
 2010              	// _STRQP	.byte  COMPO+3
 2011              	// 	.ascii "$\"|"
 2012              	// 	.p2align 2 	
 2013              	STRQP:
 2014 0b74 42F804ED 		_NEST
 2015 0b78 FFF7E2FF 		BL	DOSTR
 2016 0b7c 52F804FB 		_UNNEST			// force a call to dostr
 2017              	
 2018              	//    .$	( a -- )
 2019              	// 	Run time routine of ." . Output a compiled string.
 2020              	
 2021              	// 	.word	_STRQP
 2022              	// _DOTST	.byte  COMPO+2
 2023              	// 	.ascii ".$$"
 2024              	// 	.p2align 2 	
 2025              	DOTST:
 2026 0b80 42F804ED 		_NEST
 2027 0b84 FFF752FC 		BL	COUNT // ( -- a+1 c )
 2028 0b88 FFF7B6FF 		BL	TYPEE
 2029 0b8c 52F804FB 		_UNNEST
ARM GAS  ps2_kbd.s 			page 45


 2030              	
 2031              	//    ."|	( -- )
 2032              	// 	Run time routine of ." . Output a compiled string.
 2033              	
 2034              	// 	.word	_DOTST
 2035              	// _DOTQP	.byte  COMPO+3
 2036              	// 	.ascii ".""|"
 2037              	// 	.p2align 2 	
 2038              	DOTQP:
 2039 0b90 42F804ED 		_NEST
 2040 0b94 FFF7D4FF 		BL	DOSTR
 2041 0b98 FFF7F2FF 		BL	DOTST
 2042 0b9c 52F804FB 		_UNNEST
 2043              	
 2044              	//    .R	  ( n +n -- )
 2045              	// 	Display an integer in a field of n columns, right justified.
 2046              		_HEADER DOTR,2,".R"
 2047 0ba0 42F804ED 		_NEST
 2048 0ba4 FFF736FB 		BL	TOR
 2049 0ba8 FFF790FE 		BL	STRR
 2050 0bac FFF728FB 		BL	RFROM
 2051 0bb0 FFF746FB 		BL	OVER
 2052 0bb4 FFF778FB 		BL	SUBB
 2053 0bb8 FFF78AFF 		BL	SPACS
 2054 0bbc FFF79CFF 		BL	TYPEE
 2055 0bc0 52F804FB 		_UNNEST
 2056              	
 2057              	//    U.R	 ( u +n -- )
 2058              	// 	Display an unsigned integer in n column, right justified.
 2059              		_HEADER UDOTR,3,"U.R"
 2060 0bc4 42F804ED 		_NEST
 2061 0bc8 FFF724FB 		BL	TOR
 2062 0bcc FFF728FE 		BL	BDIGS
 2063 0bd0 FFF74EFE 		BL	DIGS
 2064 0bd4 FFF76AFE 		BL	EDIGS
 2065 0bd8 FFF712FB 		BL	RFROM
 2066 0bdc FFF730FB 		BL	OVER
 2067 0be0 FFF762FB 		BL	SUBB
 2068 0be4 FFF774FF 		BL	SPACS
 2069 0be8 FFF786FF 		BL	TYPEE
 2070 0bec 52F804FB 		_UNNEST
 2071              	
 2072              	//    U.	  ( u -- )
 2073              	// 	Display an unsigned integer in free format.
 2074              		_HEADER UDOT,2,"U."
 2075 0bf0 42F804ED 		_NEST
 2076 0bf4 FFF714FE 		BL	BDIGS
 2077 0bf8 FFF73AFE 		BL	DIGS
 2078 0bfc FFF756FE 		BL	EDIGS
 2079 0c00 FFF75EFF 		BL	SPACE
 2080 0c04 FFF778FF 		BL	TYPEE
 2081 0c08 52F804FB 		_UNNEST
 2082              	
 2083              	//   H. ( u -- )
 2084              	//  display unsigned integer in hexadecimal
 2085              		_HEADER HDOT,2,"H."
 2086 0c0c 42F804ED 		_NEST 
ARM GAS  ps2_kbd.s 			page 46


 2087 0c10 FFF73EFC 		BL	BASE 
 2088 0c14 FFF7EAFA 		BL	AT 
 2089 0c18 FFF7FCFA 		BL	TOR 
 2090 0c1c FFF76AFE 		BL	HEX 
 2091 0c20 FFF7E6FF 		BL	UDOT 
 2092 0c24 FFF7ECFA 		BL	RFROM 
 2093 0c28 FFF732FC 		BL	BASE 
 2094 0c2c FFF7D8FA 		BL	STORE 
 2095 0c30 52F804FB 		_UNNEST 
 2096              	
 2097              	
 2098              	//    .	   ( w -- )
 2099              	// 	Display an integer in free format, preceeded by a space.
 2100              		_HEADER DOT,1,"."
 2101 0c34 42F804ED 		_NEST
 2102 0c38 FFF72AFC 		BL	BASE
 2103 0c3c FFF7D6FA 		BL	AT
 2104 0c40 FFF79DFA 		_DOLIT	10
 2104      0A000000 
 2105 0c48 FFF710FB 		BL	XORR			// ?decimal
 2106 0c4c FFF7B4FA 		BL	QBRAN
 2107 0c50 5C0C0000 		.word	DOT1
 2108 0c54 FFF7CCFF 		BL	UDOT
 2109 0c58 52F804FB 		_UNNEST			// no,display unsigned
 2110              	DOT1:
 2111 0c5c FFF736FE 	    BL	STRR
 2112 0c60 FFF72EFF 		BL	SPACE
 2113 0c64 FFF748FF 		BL	TYPEE
 2114 0c68 52F804FB 		_UNNEST			// yes, display signed
 2115              	
 2116              	//    ?	   ( a -- )
 2117              	// 	Display the contents in a memory cell.
 2118              		_HEADER QUEST,1,"?"
 2119 0c6c 42F804ED 		_NEST
 2120 0c70 FFF7BCFA 		BL	AT
 2121 0c74 FFF7DEFF 		BL	DOT
 2122 0c78 52F804FB 		_UNNEST
 2123              	
 2124              	// **************************************************************************
 2125              	//  Parsing
 2126              	
 2127              	//    parse	( b u c -- b u delta //  string> )
 2128              	// 	Scan word delimited by c. Return found string and its offset.
 2129              	
 2130              	// 	.word	_QUEST
 2131              	// _PARS	.byte  5
 2132              	// 	.ascii "parse"
 2133              	// 	.p2align 2 	
 2134              	PARS:
 2135 0c7c 42F804ED 		_NEST
 2136 0c80 FFF70BFC 		BL	TEMP
 2137 0c84 FFF7ACFA 		BL	STORE
 2138 0c88 FFF7DAFA 		BL	OVER
 2139 0c8c FFF7C2FA 		BL	TOR
 2140 0c90 FFF7CEFA 		BL	DUPP
 2141 0c94 FFF790FA 		BL	QBRAN
 2142 0c98 8A0D0000 		.word	PARS8
ARM GAS  ps2_kbd.s 			page 47


 2143 0c9c FFF720FB 		BL	ONEM
 2144 0ca0 FFF7FBFB 		BL	TEMP
 2145 0ca4 FFF7A2FA 		BL	AT
 2146 0ca8 FFF72EFB 		BL	BLANK
 2147 0cac FFF77AFB 		BL	EQUAL
 2148 0cb0 FFF782FA 		BL	QBRAN
 2149 0cb4 040D0000 		.word	PARS3
 2150 0cb8 FFF7ACFA 		BL	TOR
 2151              	PARS1:
 2152 0cbc FFF724FB 		BL	BLANK
 2153 0cc0 FFF7BEFA 		BL	OVER
 2154 0cc4 FFF79AFA 		BL	CAT			// skip leading blanks 
 2155 0cc8 FFF7EEFA 		BL	SUBB
 2156 0ccc FFF7BCFA 		BL	ZLESS
 2157 0cd0 FFF752FB 		BL	INVER
 2158 0cd4 FFF770FA 		BL	QBRAN
 2159 0cd8 000D0000 		.word	PARS2
 2160 0cdc FFF7FCFA 		BL	ONEP
 2161 0ce0 FFF75BFA 		BL	DONXT
 2162 0ce4 BC0C0000 		.word	PARS1
 2163 0ce8 FFF78AFA 		BL	RFROM
 2164 0cec FFF79CFA 		BL	DROP
 2165 0cf0 FFF745FA 		_DOLIT	0
 2165      00000000 
 2166 0cf8 FFF79AFA 		BL	DUPP
 2167 0cfc 52F804FB 		_UNNEST
 2168              	PARS2:
 2169 0d00 FFF77EFA 	  BL	RFROM
 2170              	PARS3:
 2171 0d04 FFF79CFA 		BL	OVER
 2172 0d08 FFF796FA 		BL	SWAP
 2173 0d0c FFF782FA 		BL	TOR
 2174              	PARS4:
 2175 0d10 FFF7C3FB 		BL	TEMP
 2176 0d14 FFF76AFA 		BL	AT
 2177 0d18 FFF792FA 		BL	OVER
 2178 0d1c FFF76EFA 		BL	CAT
 2179 0d20 FFF7C2FA 		BL	SUBB			// scan for delimiter
 2180 0d24 FFF7B9FB 		BL	TEMP
 2181 0d28 FFF760FA 		BL	AT
 2182 0d2c FFF7ECFA 		BL	BLANK
 2183 0d30 FFF738FB 		BL	EQUAL
 2184 0d34 FFF740FA 		BL	QBRAN
 2185 0d38 400D0000 		.word	PARS5
 2186 0d3c FFF784FA 		BL	ZLESS
 2187              	PARS5:
 2188 0d40 FFF73AFA 		BL	QBRAN
 2189 0d44 5E0D0000 		.word	PARS6
 2190 0d48 FFF7C6FA 		BL	ONEP
 2191 0d4c FFF725FA 		BL	DONXT
 2192 0d50 100D0000 		.word	PARS4
 2193 0d54 FFF76CFA 		BL	DUPP
 2194 0d58 FFF75CFA 		BL	TOR
 2195 0d5c 09E0     		B	PARS7
 2196              	PARS6:
 2197 0d5e FFF74FFA 		BL	RFROM
 2198 0d62 FFF761FA 		BL	DROP
ARM GAS  ps2_kbd.s 			page 48


 2199 0d66 FFF763FA 		BL	DUPP
 2200 0d6a FFF7B5FA 		BL	ONEP
 2201 0d6e FFF751FA 		BL	TOR
 2202              	PARS7:
 2203 0d72 FFF765FA 		BL	OVER
 2204 0d76 FFF797FA 		BL	SUBB
 2205 0d7a FFF741FA 		BL	RFROM
 2206 0d7e FFF73FFA 		BL	RFROM
 2207 0d82 FFF791FA 		BL	SUBB
 2208 0d86 52F804FB 		_UNNEST
 2209              	PARS8:
 2210 0d8a FFF759FA 		BL	OVER
 2211 0d8e FFF737FA 		BL	RFROM
 2212 0d92 FFF789FA 		BL	SUBB
 2213 0d96 52F804FB 		_UNNEST
 2214              	
 2215              	//    PARSE	( c -- b u //  string> )
 2216              	// 	Scan input stream and return counted string delimited by c.
 2217 0d9a 00BF     		_HEADER PARSE,5,"PARSE"
 2218 0d9c 42F804ED 		_NEST
 2219 0da0 FFF738FA 		BL	TOR
 2220 0da4 FFF7AAFC 		BL	TIB
 2221 0da8 FFF782FB 		BL	INN
 2222 0dac FFF71EFA 		BL	AT
 2223 0db0 FFF776FA 		BL	PLUS			// current input buffer pointer
 2224 0db4 FFF782FB 		BL	NTIB
 2225 0db8 FFF718FA 		BL	AT
 2226 0dbc FFF778FB 		BL	INN
 2227 0dc0 FFF714FA 		BL	AT
 2228 0dc4 FFF770FA 		BL	SUBB			// remaining count
 2229 0dc8 FFF71AFA 		BL	RFROM
 2230 0dcc FFF756FF 		BL	PARS
 2231 0dd0 FFF76EFB 		BL	INN
 2232 0dd4 FFF712FB 		BL	PSTOR
 2233 0dd8 52F804FB 		_UNNEST
 2234              	
 2235              	//    .(	  ( -- )
 2236              	// 	Output following string up to next ) .
 2237              		_HEADER DOTPR,IMEDD+2,".("
 2238 0ddc 42F804ED 		_NEST
 2239 0de0 FFF7CDF9 		_DOLIT	')'
 2239      29000000 
 2240 0de8 FFF7D8FF 		BL	PARSE
 2241 0dec FFF784FE 		BL	TYPEE
 2242 0df0 52F804FB 		_UNNEST
 2243              	
 2244              	//    (	   ( -- )
 2245              	// 	Ignore following string up to next ) . A comment.
 2246              		_HEADER PAREN,IMEDD+1,"("
 2247 0df4 42F804ED 		_NEST
 2248 0df8 FFF7C1F9 		_DOLIT	')'
 2248      29000000 
 2249 0e00 FFF7CCFF 		BL	PARSE
 2250 0e04 FFF7A2FA 		BL	DDROP
 2251 0e08 52F804FB 		_UNNEST
 2252              	
 2253              	//    \	   ( -- )
ARM GAS  ps2_kbd.s 			page 49


 2254              	// 	Ignore following text till the end of line.
 2255              		_HEADER BKSLA,1,"\\"
 2256 0e0c 42F804ED 		_NEST
 2257 0e10 FFF754FB 		BL	NTIB
 2258 0e14 FFF7EAF9 		BL	AT
 2259 0e18 FFF74AFB 		BL	INN
 2260 0e1c FFF7E0F9 		BL	STORE
 2261 0e20 52F804FB 		_UNNEST
 2262              	
 2263              	//    CHAR	( -- c )
 2264              	// 	Parse next word and return its first character.
 2265              		_HEADER CAHR,4,"CHAR"
 2266 0e24 42F804ED 		_NEST
 2267 0e28 FFF76EFA 		BL	BLANK
 2268 0e2c FFF7B6FF 		BL	PARSE
 2269 0e30 FFF7FAF9 		BL	DROP
 2270 0e34 FFF7E2F9 		BL	CAT
 2271 0e38 52F804FB 		_UNNEST
 2272              	
 2273              	//    WORD	( c -- a //  string> )
 2274              	// 	Parse a word from input stream and copy it to code dictionary.
 2275              		_HEADER WORDD,4,"WORD"
 2276 0e3c 42F804ED 		_NEST
 2277 0e40 FFF7ACFF 		BL	PARSE
 2278 0e44 FFF74AFC 		BL	HERE
 2279 0e48 FFF756FA 		BL	CELLP
 2280 0e4c FFF79AFC 		BL	PACKS
 2281 0e50 52F804FB 		_UNNEST
 2282              	
 2283              	//    TOKEN	( -- a //  string> )
 2284              	// 	Parse a word from input stream and copy it to name dictionary.
 2285              		_HEADER TOKEN,5,"TOKEN"
 2286 0e54 42F804ED 		_NEST
 2287 0e58 FFF756FA 		BL	BLANK
 2288 0e5c FFF7EEFF 		BL	WORDD
 2289 0e60 52F804FB 		_UNNEST
 2290              	
 2291              	// **************************************************************************
 2292              	//  Dictionary search
 2293              	
 2294              	//    >CFA	( na -- cfa )
 2295              	// 	Return a code field address given a name address.
 2296              		_HEADER TOCFA,4,">CFA"
 2297 0e64 42F804ED 		_NEST
 2298 0e68 FFF7E0FA 		BL	COUNT
 2299 0e6c FFF787F9 		_DOLIT	0x1F
 2299      1F000000 
 2300 0e74 FFF7EEF9 		BL	ANDD
 2301 0e78 FFF712FA 		BL	PLUS
 2302 0e7c FFF7ECFB 		BL	ALGND
 2303 0e80 52F804FB 		_UNNEST
 2304              	
 2305              	//	NAME> ( na -- ca ) 
 2306              	// Return code address 
 2307              		_HEADER NAMET,5,"NAME>"
 2308 0e84 42F804ED 		_NEST 
 2309 0e88 FFF7ECFF 		BL	TOCFA
ARM GAS  ps2_kbd.s 			page 50


 2310 0e8c FFF7AEF9 		BL	AT  
 2311 0e90 52F804FB 		_UNNEST 
 2312              	
 2313              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2314              	// 	Compare u bytes in two strings. Return 0 if identical.
 2315              	//
 2316              	//  Picatout 2020-12-01, 
 2317              	//      Because of problem with .align directive that
 2318              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2319              	// 		words  to do a byte by byte comparison. 
 2320              	//
 2321              		_HEADER SAMEQ,5,"SAME?"
 2322 0e94 42F804ED 		_NEST
 2323 0e98 FFF7BCF9 		BL	TOR
 2324 0e9c 00F01EB8 		B.W	SAME2
 2325              	SAME1:
 2326 0ea0 FFF7CEF9 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2327 0ea4 FFF7B2F9 		BL	RAT   // a1 a2 a1 u 
 2328 0ea8 FFF7FAF9 		BL	PLUS  // a1 a2 a1+u 
 2329 0eac FFF7A6F9 		BL	CAT	   // a1 a2 c1    		
 2330 0eb0 FFF7C6F9 		BL	OVER  // a1 a2 c1 a2 
 2331 0eb4 FFF7AAF9 		BL	RAT    
 2332 0eb8 FFF7F2F9 		BL	PLUS    
 2333 0ebc FFF79EF9 		BL	CAT	  // a1 a2 c1 c2
 2334 0ec0 FFF7F2F9 		BL	SUBB  
 2335 0ec4 FFF736FA 		BL	QDUP
 2336 0ec8 FFF776F9 		BL	QBRAN
 2337 0ecc DC0E0000 		.word	SAME2
 2338 0ed0 FFF796F9 		BL	RFROM
 2339 0ed4 FFF7A8F9 		BL	DROP
 2340 0ed8 52F804FB 		_UNNEST	// strings not equal
 2341              	SAME2:
 2342 0edc FFF75DF9 		BL	DONXT
 2343 0ee0 A00E0000 		.word	SAME1
 2344 0ee4 FFF74BF9 		_DOLIT	0
 2344      00000000 
 2345 0eec 52F804FB 		_UNNEST	// strings equal
 2346              	
 2347              	//    find	( a na -- ca na | a F )
 2348              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2349              	
 2350              	//  Picatout 2020-12-01,  
 2351              	//		Modified from original. See comment for word "SAME?" 
 2352              	
 2353              	// 	.word	_SAMEQ
 2354              	// _FIND	.byte  4
 2355              	// 	.ascii "find"
 2356              	// 	.p2align 2 	
 2357              	FIND:
 2358 0ef0 42F804ED 		_NEST
 2359 0ef4 FFF7A0F9 		BL	SWAP			// na a	
 2360 0ef8 FFF798FA 		BL	COUNT			// na a+1 count
 2361 0efc FFF798F9 		BL	DUPP 
 2362 0f00 FFF7CBFA 		BL	TEMP
 2363 0f04 FFF76CF9 		BL	STORE			// na a+1 count 
 2364 0f08 FFF784F9 		BL  TOR		// na a+1  R: count  
 2365 0f0c FFF794F9 		BL	SWAP			// a+1 na
ARM GAS  ps2_kbd.s 			page 51


 2366              	FIND1:
 2367 0f10 FFF78EF9 		BL	DUPP			// a+1 na na
 2368 0f14 FFF750F9 		BL	QBRAN
 2369 0f18 600F0000 		.word	FIND6	// end of vocabulary
 2370 0f1c FFF788F9 		BL	DUPP			// a+1 na na
 2371 0f20 FFF76CF9 		BL	CAT			// a+1 na name1
 2372 0f24 FFF72BF9 		_DOLIT	MASKK
 2372      1FFFFFFF 
 2373 0f2c FFF792F9 		BL	ANDD
 2374 0f30 FFF76CF9 		BL	RAT			// a+1 na name1 count 
 2375 0f34 FFF79AF9 		BL	XORR			// a+1 na,  same length?
 2376 0f38 FFF73EF9 		BL	QBRAN
 2377 0f3c 4C0F0000 		.word	FIND2
 2378 0f40 FFF7DEF9 		BL	CELLM			// a+1 la
 2379 0f44 FFF752F9 		BL	AT			// a+1 next_na
 2380 0f48 FFF7E2BF 		B.w	FIND1			// try next word
 2381              	FIND2:   
 2382 0f4c FFF7C4F9 		BL	ONEP			// a+1 na+1
 2383 0f50 FFF7A3FA 		BL	TEMP
 2384 0f54 FFF74AF9 		BL	AT			// a+1 na+1 count
 2385 0f58 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2386              	FIND3:	
 2387 0f5c 00F00CB8 		B.w	FIND4
 2388              	FIND6:	
 2389 0f60 FFF74EF9 		BL	RFROM			// a+1 0 name1 -- , no match
 2390 0f64 FFF760F9 		BL	DROP			// a+1 0
 2391 0f68 FFF766F9 		BL	SWAP			// 0 a+1
 2392 0f6c FFF7B8F9 		BL	ONEM			// 0 a
 2393 0f70 FFF762F9 		BL	SWAP			// a 0 
 2394 0f74 52F804FB 		_UNNEST			// return without a match
 2395              	FIND4:	
 2396 0f78 FFF71EF9 		BL	QBRAN			// a+1 na+1
 2397 0f7c 900F0000 		.word	FIND5	// found a match
 2398 0f80 FFF7AEF9 		BL	ONEM			// a+1 na
 2399 0f84 FFF7BCF9 		BL	CELLM			// a+4 la
 2400 0f88 FFF730F9 		BL	AT			// a+1 next_na
 2401 0f8c FFF7C0BF 		B.w	FIND1			// compare next name
 2402              	FIND5:	
 2403 0f90 FFF736F9 		BL	RFROM			// a+1 na+1 count
 2404 0f94 FFF748F9 		BL	DROP			// a+1 na+1
 2405 0f98 FFF74EF9 		BL	SWAP			// na+1 a+1
 2406 0f9c FFF744F9 		BL	DROP			// na+1
 2407 0fa0 FFF79EF9 		BL	ONEM			// na
 2408 0fa4 FFF744F9 		BL	DUPP			// na na
 2409 0fa8 FFF76CFF 		BL	NAMET			// na ca
 2410 0fac FFF744F9 		BL	SWAP			// ca na
 2411 0fb0 52F804FB 		_UNNEST			//  return with a match
 2412              	
 2413              	//    NAME?	( a -- ca na | a F )
 2414              	// 	Search all context vocabularies for a string.
 2415              		_HEADER NAMEQ,5,"NAME?"
 2416 0fb4 42F804ED 		_NEST
 2417 0fb8 FFF792FA 		BL	CNTXT
 2418 0fbc FFF716F9 		BL	AT
 2419 0fc0 FFF796FF 		BL	FIND
 2420 0fc4 52F804FB 		_UNNEST
 2421              	
ARM GAS  ps2_kbd.s 			page 52


 2422              	// **************************************************************************
 2423              	//  Terminal input
 2424              	
 2425              	//    	  ( bot eot cur -- bot eot cur )
 2426              	// 	Backup the cursor by one character.
 2427              	
 2428              	// 	.word	_NAMEQ
 2429              	// _BKSP	.byte  2
 2430              	// 	.ascii "^H"
 2431              	// 	.p2align 2 	
 2432              	BKSP:
 2433 0fc8 42F804ED 		_NEST
 2434 0fcc FFF722F9 		BL	TOR
 2435 0fd0 FFF736F9 		BL	OVER
 2436 0fd4 FFF714F9 		BL	RFROM
 2437 0fd8 FFF72EF9 		BL	SWAP
 2438 0fdc FFF730F9 		BL	OVER
 2439 0fe0 FFF744F9 		BL	XORR
 2440 0fe4 FFF7E8F8 		BL	QBRAN
 2441 0fe8 10100000 		.word	BACK1
 2442 0fec FFF7C7F8 		_DOLIT	BKSPP
 2442      08000000 
 2443 0ff4 FFF7B6F8 		BL	TECHO
 2444              	// 	BL	ATEXE
 2445 0ff8 FFF772F9 		BL	ONEM
 2446 0ffc FFF784F9 		BL	BLANK
 2447 1000 FFF7B0F8 		BL	TECHO
 2448              	// 	BL	ATEXE
 2449 1004 FFF7BBF8 		_DOLIT	BKSPP
 2449      08000000 
 2450 100c FFF7AAF8 		BL	TECHO
 2451              	// 	BL	ATEXE
 2452              	BACK1:
 2453 1010 52F804FB 		  _UNNEST
 2454              	
 2455              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2456              	// 	Accept and echo the key stroke and bump the cursor.
 2457              	
 2458              	// 	.word	_BKSP
 2459              	// _TAP	.byte  3
 2460              	// 	.ascii "TAP"
 2461              	// 	.p2align 2 	
 2462              	TAP:
 2463 1014 42F804ED 		_NEST
 2464 1018 FFF70AF9 		BL	DUPP
 2465 101c FFF7A2F8 		BL	TECHO
 2466              	// 	BL	ATEXE
 2467 1020 FFF70EF9 		BL	OVER
 2468 1024 FFF7E4F8 		BL	CSTOR
 2469 1028 FFF756F9 		BL	ONEP
 2470 102c 52F804FB 		_UNNEST
 2471              	
 2472              	//    kTAP	( bot eot cur c -- bot eot cur )
 2473              	// 	Process a key stroke, CR or backspace.
 2474              	
 2475              	// 	.word	_TAP
 2476              	// _KTAP	.byte  4
ARM GAS  ps2_kbd.s 			page 53


 2477              	// 	.ascii "kTAP"
 2478              	// 	.p2align 2 	
 2479              	KTAP:
 2480              	TTAP:
 2481 1030 42F804ED 		_NEST
 2482 1034 FFF7FCF8 		BL	DUPP
 2483 1038 FFF7A1F8 		_DOLIT	CRR
 2483      0D000000 
 2484 1040 FFF714F9 		BL	XORR
 2485 1044 FFF7B8F8 		BL	QBRAN
 2486 1048 78100000 		.word	KTAP2
 2487 104c FFF797F8 		_DOLIT	BKSPP
 2487      08000000 
 2488 1054 FFF70AF9 		BL	XORR
 2489 1058 FFF7AEF8 		BL	QBRAN
 2490 105c 70100000 		.word	KTAP1
 2491 1060 FFF752F9 		BL	BLANK
 2492 1064 FFF7D6FF 		BL	TAP
 2493 1068 52F804FB 		_UNNEST
 2494 106c 00000000 		.word	0			// patch
 2495              	KTAP1:
 2496 1070 FFF7AAFF 	  BL	BKSP
 2497 1074 52F804FB 		_UNNEST
 2498              	KTAP2:
 2499 1078 FFF7D6F8 	  BL	DROP
 2500 107c FFF7DCF8 		BL	SWAP
 2501 1080 FFF7D2F8 		BL	DROP
 2502 1084 FFF7D4F8 		BL	DUPP
 2503 1088 52F804FB 		_UNNEST
 2504              	
 2505              	//    ACCEPT	( b u -- b u )
 2506              	// 	Accept characters to input buffer. Return with actual count.
 2507              		_HEADER ACCEP,6,"ACCEPT"
 2508 108c 42F804ED 		_NEST
 2509 1090 FFF7D6F8 		BL	OVER
 2510 1094 FFF704F9 		BL	PLUS
 2511 1098 FFF7D2F8 		BL	OVER
 2512              	ACCP1:
 2513 109c FFF75CF9 	  BL	DDUP
 2514 10a0 FFF7E4F8 		BL	XORR
 2515 10a4 FFF788F8 		BL	QBRAN
 2516 10a8 D8100000 		.word	ACCP4
 2517 10ac FFF7FEFC 		BL	KEY
 2518 10b0 FFF7BEF8 		BL	DUPP
 2519 10b4 FFF728F9 		BL	BLANK
 2520 10b8 FFF761F8 		_DOLIT	127
 2520      7F000000 
 2521 10c0 FFF738FA 		BL	WITHI
 2522 10c4 FFF778F8 		BL	QBRAN
 2523 10c8 D2100000 		.word	ACCP2
 2524 10cc FFF7A2FF 		BL	TAP
 2525 10d0 01E0     		B	ACCP3
 2526              	ACCP2:
 2527 10d2 FFF7ADFF 	  BL	KTAP
 2528              	// 	BL	ATEXE
 2529              	ACCP3:	  
 2530 10d6 E1E7     		B	ACCP1
ARM GAS  ps2_kbd.s 			page 54


 2531              	ACCP4:
 2532 10d8 FFF7A6F8 	  BL	DROP
 2533 10dc FFF7B0F8 		BL	OVER
 2534 10e0 FFF7E2F8 		BL	SUBB
 2535 10e4 52F804FB 		_UNNEST
 2536              	
 2537              	//    QUERY	( -- )
 2538              	// 	Accept input stream to terminal input buffer.
 2539              		_HEADER QUERY,5,"QUERY"
 2540 10e8 42F804ED 		_NEST
 2541 10ec FFF706FB 		BL	TIB
 2542 10f0 FFF745F8 		_DOLIT	80
 2542      50000000 
 2543 10f8 FFF7C8FF 		BL	ACCEP
 2544 10fc FFF7DEF9 		BL	NTIB
 2545 1100 FFF76EF8 		BL	STORE
 2546 1104 FFF790F8 		BL	DROP
 2547 1108 FFF739F8 		_DOLIT	0
 2547      00000000 
 2548 1110 FFF7CEF9 		BL	INN
 2549 1114 FFF764F8 		BL	STORE
 2550 1118 52F804FB 		_UNNEST
 2551              	
 2552              	// **************************************************************************
 2553              	//  Error handling
 2554              	
 2555              	//    ABORT	( a -- )
 2556              	// 	Reset data stack and jump to QUIT.
 2557              		_HEADER ABORT,5,"ABORT"
 2558 111c 42F804ED 		_NEST
 2559 1120 FFF7CEFC 		BL	SPACE
 2560              	ABORT1:
 2561 1124 FFF782F9 		BL	COUNT
 2562 1128 FFF7E6FC 		BL	TYPEE
 2563 112c FFF727F8 		_DOLIT	0X3F
 2563      3F000000 
 2564 1134 FFF716F8 		BL	EMIT
 2565 1138 FFF7F2FC 		BL	CR
 2566 113c 00F08AF8 		BL	PRESE
 2567 1140 00F092B8 		B.W	QUIT
 2568              	
 2569              	//    _abort"	( f -- )
 2570              	// 	Run time routine of ABORT" . Abort with a message.
 2571              	
 2572              	// 	.word	_ABORT
 2573              	// _ABORQ	.byte  COMPO+6
 2574              	// 	.ascii "abort\""
 2575              	// 	.p2align 2 	
 2576              	ABORQ:
 2577 1144 42F804ED 		_NEST
 2578 1148 FFF7FAFC 		BL	DOSTR 
 2579 114c FFF774F8 		BL	SWAP 
 2580 1150 FFF732F8 		BL	QBRAN
 2581 1154 5A110000 		.word	1f	// text flag
 2582 1158 E4E7     		B	ABORT1 
 2583              	1:
 2584 115a FFF765F8 		BL	DROP
ARM GAS  ps2_kbd.s 			page 55


 2585 115e 52F804FB 		_UNNEST			// drop error
 2586              	
 2587              	// **************************************************************************
 2588              	//  The text interpreter
 2589              	
 2590              	//    $INTERPRET  ( a -- )
 2591              	// 	Interpret a word. If failed, try to convert it to an integer.
 2592 1162 00BF     		_HEADER INTER,10,"$INTERPRET"
 2593 1164 42F804ED 		_NEST
 2594 1168 FFF724FF 		BL	NAMEQ
 2595 116c FFF7E2F8 		BL	QDUP	// ?defined
 2596 1170 FFF722F8 		BL	QBRAN
 2597 1174 A4110000 		.word	INTE1
 2598 1178 FFF738F8 		BL	AT
 2599 117c FEF7FFFF 		_DOLIT	COMPO
 2599      40000000 
 2600 1184 FFF766F8 		BL	ANDD	// ?compile only lexicon bits
 2601 1188 FFF7DCFF 		BL	ABORQ
 2602 118c 0D       		.byte	13
 2603 118d 20636F6D 		.ascii " compile only"
 2603      70696C65 
 2603      206F6E6C 
 2603      79
 2604 119a 00BF     		.p2align 2 	
 2605 119c FEF7F8FF 		BL	EXECU
 2606 11a0 52F804FB 		_UNNEST			// execute defined word
 2607              	INTE1:
 2608 11a4 FFF7ECFB 	  BL	NUMBQ
 2609 11a8 FFF706F8 		BL	QBRAN
 2610 11ac B4110000 		.word	INTE2
 2611 11b0 52F804FB 		_UNNEST
 2612              	INTE2:
 2613 11b4 FFF7B2BF 	  B.W	ABORT	// error
 2614              	
 2615              	//    [	   ( -- )
 2616              	// 	Start the text interpreter.
 2617              		_HEADER LBRAC,IMEDD+1,"["
 2618 11b8 42F804ED 		_NEST
 2619 11bc FEF7DFFF 		_DOLIT	INTER
 2619      64110000 
 2620 11c4 FFF780F9 		BL	TEVAL
 2621 11c8 FFF70AF8 		BL	STORE
 2622 11cc 52F804FB 		_UNNEST
 2623              	
 2624              	//    .OK	 ( -- )
 2625              	// 	Display "ok" only while interpreting.
 2626              		_HEADER DOTOK,3,".OK"
 2627 11d0 42F804ED 		_NEST
 2628 11d4 FEF7D3FF 		_DOLIT	INTER
 2628      64110000 
 2629 11dc FFF774F9 		BL	TEVAL
 2630 11e0 FFF704F8 		BL	AT
 2631 11e4 FFF7DEF8 		BL	EQUAL
 2632 11e8 FEF7E6FF 		BL	QBRAN
 2633 11ec F8110000 		.word	DOTO1
 2634 11f0 FFF7CEFC 		BL	DOTQP
 2635 11f4 03       		.byte	3
ARM GAS  ps2_kbd.s 			page 56


 2636 11f5 206F6B   		.ascii " ok"
 2637              	DOTO1:
 2638 11f8 FFF792FC 		BL	CR
 2639 11fc 52F804FB 		_UNNEST
 2640              	
 2641              	//    ?STACK	( -- )
 2642              	// 	Abort if the data stack underflows.
 2643              		_HEADER QSTAC,6,"?STACK"
 2644 1200 42F804ED 		_NEST
 2645 1204 FFF750FA 		BL	DEPTH
 2646 1208 FFF71EF8 		BL	ZLESS	// check only for underflow
 2647 120c FFF79AFF 		BL	ABORQ
 2648 1210 0A       		.byte	10
 2649 1211 20756E64 		.ascii " underflow"
 2649      6572666C 
 2649      6F77
 2650 121b 00       		.p2align 2 	
 2651 121c 52F804FB 		_UNNEST
 2652              	
 2653              	//    EVAL	( -- )
 2654              	// 	Interpret the input stream.
 2655              		_HEADER EVAL,4,"EVAL"
 2656 1220 42F804ED 		_NEST
 2657              	EVAL1:
 2658 1224 FFF716FE 	    BL	TOKEN
 2659 1228 FFF702F8 		BL	DUPP
 2660 122c FEF7E6FF 		BL	CAT	// ?input stream empty
 2661 1230 FEF7C2FF 		BL	QBRAN
 2662 1234 48120000 		.word	EVAL2
 2663 1238 FFF746F9 		BL	TEVAL
 2664 123c FFF762FA 		BL	ATEXE
 2665 1240 FFF7DEFF 		BL	QSTAC	// evaluate input, check stack
 2666 1244 FFF7EEBF 		B.W	EVAL1
 2667              	EVAL2:
 2668 1248 FEF7EEFF 		BL	DROP
 2669 124c FFF7C0FF 		BL	DOTOK
 2670 1250 52F804FB 		_UNNEST	// prompt
 2671              	
 2672              	//    PRESET	( -- )
 2673              	// 	Reset data stack pointer and the terminal input buffer.
 2674              		_HEADER PRESE,6,"PRESET"
 2675 1254 42F804ED 		_NEST
 2676 1258 4FF47F41 		_MOV32 R1,SPP // init SP 
 2676      C2F20101 
 2677 1260 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 2678 1264 52F804FB 		_UNNEST 
 2679              	
 2680              	//    QUIT	( -- )
 2681              	// 	Reset return stack pointer and start text interpreter.
 2682              		_HEADER QUIT,4,"QUIT"
 2683 1268 42F804ED 		_NEST
 2684 126c 4FF68072 		_MOV32 R2,RPP
 2684      C2F20102 
 2685              	QUIT1:
 2686 1274 FFF7A0FF 		BL	LBRAC			// start interpretation
 2687              	QUIT2:
 2688 1278 FFF736FF 		BL	QUERY			// get input
ARM GAS  ps2_kbd.s 			page 57


 2689 127c FFF7D0FF 		BL	EVAL
 2690 1280 FEF7A6FF 		BL	BRAN
 2691 1284 78120000 		.word	QUIT2	// continue till error
 2692              	
 2693              	/****************************************
 2694              	  Flash memory interface
 2695              	REF: RM0383 reference manual section 3.5
 2696              	****************************************/
 2697              	// UNLOCK ( T|F -- )
 2698              	// lock or unlock FLASH write 
 2699              		_HEADER UNLOCK,6,"UNLOCK"
 2700 1288 42F804ED 		_NEST 
 2701 128c FEF794FF 		BL QBRAN
 2702 1290 B0120000 		.word LOCK 
 2703 1294 5D48     		ldr	r0, flash_regs 
 2704 1296 0469     		ldr r4, [r0,#FLASH_CR]
 2705 1298 14F0004F 		tst r4,#(1<<31)
 2706 129c 06D0     		beq 1f // trying unlock sequence when already unlock generate exception 
 2707 129e 40F2F314 		mov r4,#0x1f3 // clear EOP|OPERR|WRPERR|PGAERR|PGPERR|RDERR bits 
 2708 12a2 C460     		str r4,[r0,#FLASH_SR]
 2709 12a4 5A4C     		ldr	r4, flash_regs+4 // key1
 2710 12a6 4460     		str	r4, [r0, #FLASH_KEYR]
 2711 12a8 5A4C     		ldr	r4, flash_regs+8 // key2 
 2712 12aa 4460     		str	r4, [r0, #FLASH_KEYR]
 2713 12ac 52F804FB 	1:	_UNNEST
 2714              	 // lock flash memory
 2715              	LOCK: 
 2716 12b0 5648     		ldr r0,flash_regs  
 2717 12b2 4FF00044 		mov r4,#(1<<31) // LOCK BIT 
 2718 12b6 0461     		str r4,[r0,#FLASH_CR]
 2719 12b8 52F804FB 		_UNNEST  
 2720              	
 2721              	WAIT_BSY:
 2722 12bc 5348     		ldr	r0,flash_regs
 2723              	WAIT1:
 2724 12be C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 2725 12c0 14F48034 		ands	r4, #(1<<16)	//  BSY
 2726 12c4 FBD1     		bne	WAIT1
 2727 12c6 7047     		_NEXT
 2728              	
 2729              	// check for flash write error 
 2730              	FLASH_ERR_CHECK:
 2731 12c8 42F804ED 		_NEST
 2732 12cc 41F8045D 		_PUSH 
 2733 12d0 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 2734 12d2 FFF737FF 		bl ABORQ 
 2735 12d6 1F       		.byte 31
 2736 12d7 20666C61 		.ascii " flash erase|programming error!"
 2736      73682065 
 2736      72617365 
 2736      7C70726F 
 2736      6772616D 
 2737 12f6 00BF     		.p2align 2
 2738 12f8 52F804FB 		_UNNEST 
 2739              	
 2740              	//    ERASE_SECTOR	   ( sector -- )
 2741              	// 	  Erase one sector of flash memory.
ARM GAS  ps2_kbd.s 			page 58


 2742              	//    stm32f411 has 7 sectors of different size. 
 2743              		_HEADER ESECTOR,12,"ERASE_SECTOR"
 2744 12fc 42F804ED 		_NEST
 2745 1300 FFF7DCFF 		bl	WAIT_BSY
 2746 1304 FEF73BFF 		_DOLIT 1 
 2746      01000000 
 2747 130c FFF7BCFF 		bl  UNLOCK
 2748 1310 05F00704 		and R4,r5,#7  // sectors {0..7}
 2749 1314 4FEAC404 		lsl r4,r4,#3
 2750 1318 44F00204 		orr r4,#2   
 2751 131c 3B48     		ldr r0,flash_regs
 2752 131e 51F8045B 		_POP 
 2753              	//	str r4,[r0,#FLASH_CR]
 2754 1322 44F48034 		orr r4,#(1<<16) // START bit 
 2755 1326 0461     		str r4,[r0,#FLASH_CR] 	 
 2756 1328 FFF7C8FF 	 	bl	WAIT_BSY // wait until done
 2757 132c FFF7CCFF 		bl FLASH_ERR_CHECK
 2758 1330 52F804FB 		_UNNEST
 2759              	
 2760              	//    I!	   ( data address -- )
 2761              	// 	   Write one 32 bits word into flash memory
 2762              	//	   address must align on 4 bytes boundary   
 2763              		_HEADER ISTOR,2,"I!"
 2764 1334 42F804ED 		_NEST
 2765 1338 FFF7C0FF 		bl	WAIT_BSY
 2766 133c FEF71FFF 		_DOLIT 1 
 2766      01000000 
 2767 1344 FFF7A0FF 		bl  UNLOCK 
 2768 1348 3048     		ldr r0,flash_regs 
 2769 134a 40F20124 		mov r4,#(2<<8)+1
 2770 134e 0461     		str r4,[r0,#FLASH_CR]
 2771 1350 2C46     		mov r4,r5 
 2772 1352 51F8045B 		_POP 
 2773 1356 2560     		str r5,[r4]
 2774 1358 51F8045B 		_POP 
 2775 135c FFF7AEFF 		bl WAIT_BSY 
 2776 1360 FEF70DFF 		_DOLIT 0 
 2776      00000000 
 2777 1368 FFF78EFF 		BL UNLOCK 
 2778 136c FFF7ACFF 		bl FLASH_ERR_CHECK
 2779 1370 52F804FB 		_UNNEST
 2780              	
 2781              	
 2782              	/*************************************************
 2783              	  Image load and save is done in 
 2784              	  sector 7 which is 128KB at address 0x08060000
 2785              	************************************************/
 2786              	
 2787              	// FLSH_WR ( src dest u -- dest+u )
 2788              	// write u words to flash memory 
 2789              		_HEADER FLSH_WR,7,"FLSH_WR"
 2790 1374 42F804ED 		_NEST 
 2791 1378 FEF74CFF 		BL TOR
 2792 137c FEF728FF 		BL BRAN 
 2793 1380 A4130000 		.word 3f  
 2794              	/* write system variables to FLASH */
 2795 1384 FEF746FF 	2:  BL TOR  // destination address 
ARM GAS  ps2_kbd.s 			page 59


 2796 1388 FEF752FF 		BL DUPP 
 2797 138c FEF72EFF 		BL AT   // get data 
 2798 1390 FEF73CFF 		BL RAT  // get destination address 
 2799 1394 FFF7CEFF 		BL ISTOR
 2800 1398 FEF7AEFF 		BL CELLP  // increment source address 
 2801 139c FEF730FF 		BL RFROM 
 2802 13a0 FEF7AAFF 		BL CELLP  // increment dest address 
 2803 13a4 FEF7F9FE 	3:	BL DONXT 
 2804 13a8 84130000 		.word 2b
 2805 13ac FEF732FF 		BL TOR 
 2806 13b0 FEF73AFF 		BL DROP 
 2807 13b4 FEF724FF 		BL RFROM 
 2808 13b8 52F804FB 		_UNNEST 
 2809              	
 2810              	
 2811              	// FORGET ( -- ) "word"
 2812              	// forget all words defined from "word"	
 2813              		_HEADER FORGET,6,"FORGET"
 2814 13bc 42F804ED 		_NEST 
 2815 13c0 FFF748FD 		BL TOKEN 
 2816 13c4 FEF734FF 		BL DUPP 
 2817 13c8 FEF7F6FE 		BL QBRAN 
 2818 13cc FEF7D7FE 		_DOLIT 9f 
 2818      08140000 
 2819 13d4 FFF7EEFD 		BL NAMEQ // ( a -- ca na | a 0 )
 2820 13d8 FEF7ACFF 		BL QDUP 
 2821 13dc FEF7ECFE 		BL QBRAN 
 2822 13e0 04140000 		.word 8f 
 2823 13e4 FEF78CFF 		BL CELLM // ( ca la )
 2824 13e8 FEF722FF 		BL DUPP 
 2825 13ec FFF77EF8 		BL CPP   
 2826 13f0 FEF7F6FE 		BL STORE
 2827 13f4 FEF7FAFE 		BL AT 
 2828 13f8 FFF784F8 		BL LAST 
 2829 13fc FEF7F0FE 		BL STORE
 2830 1400 00F0A4F9 		BL OVERT 
 2831 1404 FEF710FF 	8:  BL DROP 
 2832 1408 52F804FB 	9:	_UNNEST 
 2833              	
 2834              	flash_regs:
 2835 140c 003C0240 		.word FLASH_BASE_ADR // 0 
 2836 1410 23016745 		.word FLASH_KEY1   // 4 
 2837 1414 AB89EFCD 		.word FLASH_KEY2   // 8
 2838 1418 3B2A1908 		.word OPTKEY1  // 12 
 2839 141c 7F6E5D4C 		.word OPTKEY2 // 16
 2840              	
 2841              	
 2842              	// **************************************************************************
 2843              	//  The compiler
 2844              	
 2845              	//    '	   ( -- ca )
 2846              	// 	Search context vocabularies for the next word in input stream.
 2847              		_HEADER TICK,1,"'"
 2848 1420 42F804ED 		_NEST
 2849 1424 FFF716FD 		BL	TOKEN
 2850 1428 FFF7C4FD 		BL	NAMEQ	// ?defined
 2851 142c FEF7C4FE 		BL	QBRAN
ARM GAS  ps2_kbd.s 			page 60


 2852 1430 38140000 		.word	TICK1
 2853 1434 52F804FB 		_UNNEST	// yes, push code address
 2854 1438 FFF770BE 	TICK1:	B.W	ABORT	// no, error
 2855              	
 2856              	//    ALLOT	( n -- )
 2857              	// 	Allocate n bytes to the ram area.
 2858              		_HEADER ALLOT,5,"ALLOT"
 2859 143c 42F804ED 		_NEST
 2860 1440 FFF754F8 		BL	CPP
 2861 1444 FEF7DAFF 		BL	PSTOR
 2862 1448 52F804FB 		_UNNEST			// adjust code pointer
 2863              	
 2864              	//    ,	   ( w -- )
 2865              	// 	Compile an integer into the code dictionary.
 2866              		_HEADER COMMA,1,","
 2867 144c 42F804ED 		_NEST
 2868 1450 FFF744F9 		BL	HERE
 2869 1454 FEF7ECFE 		BL	DUPP
 2870 1458 FEF74EFF 		BL	CELLP	// cell boundary
 2871 145c FFF746F8 		BL	CPP
 2872 1460 FEF7BEFE 		BL	STORE
 2873 1464 FEF7BCFE 		BL	STORE
 2874 1468 52F804FB 		_UNNEST	// adjust code pointer, compile
 2875              		.p2align 2 
 2876              	//    [COMPILE]   ( -- //  string> )
 2877              	// 	Compile the next immediate word into code dictionary.
 2878              		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2879 146c 42F804ED 		_NEST
 2880 1470 FFF7D6FF 		BL	TICK
 2881 1474 FFF7EAFF 		BL	COMMA
 2882 1478 52F804FB 		_UNNEST
 2883              	
 2884              	//    COMPILE	( -- )
 2885              	// 	Compile the next address in colon list to code dictionary.
 2886              		_HEADER COMPI,COMPO+7,"COMPILE"
 2887 147c 42F804ED 		_NEST
 2888 1480 FEF7BEFE 		BL	RFROM
 2889 1484 25F00105 		BIC	R5,R5,#1
 2890 1488 FEF7D2FE 		BL	DUPP
 2891 148c FEF7AEFE 		BL	AT
 2892 1490 00F0A3F9 		BL	CALLC			// compile BL instruction
 2893 1494 FEF730FF 		BL	CELLP
 2894 1498 45F00105 		ORR	R5,R5,#1
 2895 149c FEF7BAFE 		BL	TOR
 2896 14a0 52F804FB 		_UNNEST			// adjust return address
 2897              	
 2898              	//    LITERAL	( w -- )
 2899              	// 	Compile tos to code dictionary as an integer literal.
 2900              		_HEADER LITER,IMEDD+7,"LITERAL"
 2901 14a4 A8080000 		.word	_COMPI
 2902 14a8 42F804ED 		_NEST
 2903 14ac FFF7E6FF 		BL	COMPI
 2904 14b0 7E010000 		.word	DOLIT
 2905 14b4 FFF7CAFF 		BL	COMMA
 2906 14b8 52F804FB 		_UNNEST
 2907              	
 2908              	//    $,"	( -- )
ARM GAS  ps2_kbd.s 			page 61


 2909              	// 	Compile a literal string up to next " .
 2910              	
 2911              	// 	.word	_LITER
 2912              	// _STRCQ	.byte  3
 2913              	// 	.ascii "$$,"""
 2914              	// 	.p2align 2 	
 2915              	STRCQ:
 2916 14bc 42F804ED 		_NEST
 2917 14c0 FEF75DFE 		_DOLIT	-4
 2917      FCFFFFFF 
 2918 14c8 FFF710F8 		BL	CPP
 2919 14cc FEF796FF 		BL	PSTOR
 2920 14d0 FEF755FE 		_DOLIT	'\"'
 2920      22000000 
 2921 14d8 FFF7B0FC 		BL	WORDD			// move word to code dictionary
 2922 14dc FEF7A6FF 		BL	COUNT
 2923 14e0 FEF7DEFE 		BL	PLUS
 2924 14e4 FFF7B8F8 		BL	ALGND			// calculate aligned end of string
 2925 14e8 FFF700F8 		BL	CPP
 2926 14ec FEF778FE 		BL	STORE
 2927 14f0 52F804FB 		_UNNEST 			// adjust the code pointer
 2928              	
 2929              	// **************************************************************************
 2930              	//  Structures
 2931              	
 2932              	//    FOR	 ( -- a )
 2933              	// 	Start a FOR-NEXT loop structure in a colon definition.
 2934              		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2935 14f4 42F804ED 		_NEST
 2936 14f8 FFF7C0FF 		BL	COMPI
 2937 14fc 14020000 		.word	TOR
 2938 1500 FFF7ECF8 		BL	HERE
 2939 1504 52F804FB 		_UNNEST
 2940              	
 2941              	//    BEGIN	( -- a )
 2942              	// 	Start an infinite or indefinite loop structure.
 2943              		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2944 1508 42F804ED 		_NEST
 2945 150c FFF7E6F8 		BL	HERE
 2946 1510 52F804FB 		_UNNEST
 2947              		
 2948              		.p2align 2 
 2949              	//    NEXT	( a -- )
 2950              	// 	Terminate a FOR-NEXT loop structure.
 2951              		_HEADER NEXT,COMPO+IMEDD+4,"NEXT"
 2952 1514 42F804ED 		_NEST
 2953 1518 FFF7B0FF 		BL	COMPI
 2954 151c 9A010000 		.word	DONXT
 2955 1520 FFF794FF 		BL	COMMA
 2956 1524 52F804FB 		_UNNEST
 2957              	
 2958              	//    UNTIL	( a -- )
 2959              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 2960              		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2961 1528 42F804ED 		_NEST
 2962 152c FFF7A6FF 		BL	COMPI
 2963 1530 B8010000 		.word	QBRAN
ARM GAS  ps2_kbd.s 			page 62


 2964 1534 FFF78AFF 		BL	COMMA
 2965 1538 52F804FB 		_UNNEST
 2966              	
 2967              	//    AGAIN	( a -- )
 2968              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 2969              		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2970 153c 42F804ED 		_NEST
 2971 1540 FFF79CFF 		BL	COMPI
 2972 1544 D0010000 		.word	BRAN
 2973 1548 FFF780FF 		BL	COMMA
 2974 154c 52F804FB 		_UNNEST
 2975              	
 2976              	//    IF	  ( -- A )
 2977              	// 	Begin a conditional branch structure.
 2978              		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2979 1550 42F804ED 		_NEST
 2980 1554 FFF792FF 		BL	COMPI
 2981 1558 B8010000 		.word	QBRAN
 2982 155c FFF7BEF8 		BL	HERE
 2983 1560 FEF70DFE 		_DOLIT	4
 2983      04000000 
 2984 1568 FEF7C0FF 		BL	CPP
 2985 156c FEF746FF 		BL	PSTOR
 2986 1570 52F804FB 		_UNNEST
 2987              	
 2988              	//    AHEAD	( -- A )
 2989              	// 	Compile a forward branch instruction.
 2990              		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2991 1574 42F804ED 		_NEST
 2992 1578 FFF780FF 		BL	COMPI
 2993 157c D0010000 		.word	BRAN
 2994 1580 FFF7ACF8 		BL	HERE
 2995 1584 FEF7FBFD 		_DOLIT	4
 2995      04000000 
 2996 158c FEF7AEFF 		BL	CPP
 2997 1590 FEF734FF 		BL	PSTOR
 2998 1594 52F804FB 		_UNNEST
 2999              	
 3000              	//    REPEAT	( A a -- )
 3001              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3002              		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3003 1598 42F804ED 		_NEST
 3004 159c FFF7CEFF 		BL	AGAIN
 3005 15a0 FFF79CF8 		BL	HERE
 3006 15a4 FEF748FE 		BL	SWAP
 3007 15a8 FEF71AFE 		BL	STORE
 3008 15ac 52F804FB 		_UNNEST
 3009              	
 3010              	//    THEN	( A -- )
 3011              	// 	Terminate a conditional branch structure.
 3012              		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3013 15b0 42F804ED 		_NEST
 3014 15b4 FFF792F8 		BL	HERE
 3015 15b8 FEF73EFE 		BL	SWAP
 3016 15bc FEF710FE 		BL	STORE
 3017 15c0 52F804FB 		_UNNEST
 3018              	
ARM GAS  ps2_kbd.s 			page 63


 3019              	//    AFT	 ( a -- a A )
 3020              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3021              		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3022 15c4 42F804ED 		_NEST
 3023 15c8 FEF72EFE 		BL	DROP
 3024 15cc FFF7D2FF 		BL	AHEAD
 3025 15d0 FFF79AFF 		BL	BEGIN
 3026 15d4 FEF730FE 		BL	SWAP
 3027 15d8 52F804FB 		_UNNEST
 3028              	
 3029              	//    ELSE	( A -- A )
 3030              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3031              		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3032 15dc 42F804ED 		_NEST
 3033 15e0 FFF7C8FF 		BL	AHEAD
 3034 15e4 FEF728FE 		BL	SWAP
 3035 15e8 FFF7E2FF 		BL	THENN
 3036 15ec 52F804FB 		_UNNEST
 3037              	
 3038              	//    WHILE	( a -- A a )
 3039              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3040              		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3041 15f0 42F804ED 		_NEST
 3042 15f4 FFF7ACFF 		BL	IFF
 3043 15f8 FEF71EFE 		BL	SWAP
 3044 15fc 52F804FB 		_UNNEST
 3045              	
 3046              	//    ABORT"	( -- //  string> )
 3047              	// 	Conditional abort with an error message.
 3048              		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3049 1600 42F804ED 		_NEST
 3050 1604 FFF73AFF 		BL	COMPI
 3051 1608 44110000 		.word	ABORQ
 3052 160c FFF756FF 		BL	STRCQ
 3053 1610 52F804FB 		_UNNEST
 3054              	
 3055              	//    $"	( -- //  string> )
 3056              	// 	Compile an inline string literal.
 3057              		_HEADER STRQ,IMEDD+2,"$\""
 3058 1614 42F804ED 		_NEST
 3059 1618 FFF730FF 		BL	COMPI
 3060 161c 740B0000 		.word	STRQP
 3061 1620 FFF74CFF 		BL	STRCQ
 3062 1624 52F804FB 		_UNNEST
 3063              	
 3064              	//    ."	( -- //  string> )
 3065              	// 	Compile an inline word  literal to be typed out at run time.
 3066              		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3067 1628 42F804ED 		_NEST
 3068 162c FFF726FF 		BL	COMPI
 3069 1630 900B0000 		.word	DOTQP
 3070 1634 FFF742FF 		BL	STRCQ
 3071 1638 52F804FB 		_UNNEST
 3072              	
 3073              	/*******************
 3074              	  Name compiler
 3075              	*******************/
ARM GAS  ps2_kbd.s 			page 64


 3076              	
 3077              	//    ?UNIQUE	( a -- a )
 3078              	// 	Display a warning message if the word already exists.
 3079              		_HEADER UNIQU,7,"?UNIQUE"
 3080 163c 42F804ED 		_NEST
 3081 1640 FEF7F6FD 		BL	DUPP
 3082 1644 FFF7B6FC 		BL	NAMEQ			// ?name exists
 3083 1648 FEF7B6FD 		BL	QBRAN
 3084 164c 68160000 		.word	UNIQ1	// redefinitions are OK
 3085 1650 FFF79EFA 		BL	DOTQP
 3086 1654 07       		.byte	7
 3087 1655 20726544 		.ascii " reDef "		// but warn the user
 3087      656620
 3088              		.p2align 2 	
 3089 165c FEF7F0FD 		BL	OVER
 3090 1660 FEF7E4FE 		BL	COUNT
 3091 1664 FFF748FA 		BL	TYPEE			// just in case its not planned
 3092              	UNIQ1:
 3093 1668 FEF7DEFD 		BL	DROP
 3094 166c 52F804FB 		_UNNEST
 3095              	
 3096              	//    $,n	 ( na -- )
 3097              	// 	Build a new dictionary name using the data at na.
 3098              	
 3099              	// 	.word	_UNIQU
 3100              	// _SNAME	.byte  3
 3101              	// 	.ascii "$,n"
 3102              	// 	.p2align 2 	
 3103              	SNAME:
 3104 1670 42F804ED 		_NEST
 3105 1674 FEF7DCFD 		BL	DUPP			//  na na
 3106 1678 FEF7C0FD 		BL	CAT			//  ?null input
 3107 167c FEF79CFD 		BL	QBRAN
 3108 1680 B8160000 		.word	SNAM1
 3109 1684 FFF7DAFF 		BL	UNIQU			//  na
 3110 1688 FEF73CFF 		BL	LAST			//  na last
 3111 168c FEF7AEFD 		BL	AT			//  na la
 3112 1690 FFF7DCFE 		BL	COMMA			//  na
 3113 1694 FEF7CCFD 		BL	DUPP			//  na na
 3114 1698 FEF734FF 		BL	LAST			//  na na last
 3115 169c FEF7A0FD 		BL	STORE			//  na , save na for vocabulary link
 3116 16a0 FEF7C4FE 		BL	COUNT			//  na+1 count
 3117 16a4 FEF7FCFD 		BL	PLUS			//  na+1+count
 3118 16a8 FEF7D6FF 		BL	ALGND			//  word boundary
 3119 16ac FEF71EFF 		BL	CPP
 3120 16b0 FEF796FD 		BL	STORE			//  top of dictionary now
 3121 16b4 52F804FB 		_UNNEST
 3122              	SNAM1:
 3123 16b8 FFF75CFA 		BL	STRQP
 3124 16bc 07       		.byte	7
 3125 16bd 206E616D 		.ascii " name? "
 3125      653F20
 3126 16c4 FFF72ABD 		B.W	ABORT
 3127              	
 3128              	//    $COMPILE	( a -- )
 3129              	// 	Compile next word to code dictionary as a token or literal.
 3130              		_HEADER SCOMP,7,"$COMPILE"
ARM GAS  ps2_kbd.s 			page 65


 3131 16c8 42F804ED 		_NEST
 3132 16cc FFF772FC 		BL	NAMEQ
 3133 16d0 FEF730FE 		BL	QDUP	// defined?
 3134 16d4 FEF770FD 		BL	QBRAN
 3135 16d8 04170000 		.word	SCOM2
 3136 16dc FEF786FD 		BL	AT
 3137 16e0 FEF74DFD 		_DOLIT	IMEDD
 3137      80000000 
 3138 16e8 FEF7B4FD 		BL	ANDD	// immediate?
 3139 16ec FEF764FD 		BL	QBRAN
 3140 16f0 FC160000 		.word	SCOM1
 3141 16f4 FEF74CFD 		BL	EXECU
 3142 16f8 52F804FB 		_UNNEST			// it's immediate, execute
 3143              	SCOM1:
 3144 16fc 00F06DF8 		BL	CALLC			// it's not immediate, compile
 3145 1700 52F804FB 		_UNNEST	
 3146              	SCOM2:
 3147 1704 FFF73CF9 		BL	NUMBQ
 3148 1708 FEF756FD 		BL	QBRAN
 3149 170c 18170000 		.word	SCOM3
 3150 1710 FFF7C8FE 		BL	LITER
 3151 1714 52F804FB 		_UNNEST			// compile number as integer
 3152              	SCOM3: // compilation abort 
 3153 1718 00F002F8 		BL COLON_ABORT 
 3154 171c FFF7FEBC 		B.W	ABORT			// error
 3155              	
 3156              	// before aborting a compilation 
 3157              	// reset HERE and LAST
 3158              	// to previous values.  
 3159              	COLON_ABORT:
 3160 1720 42F804ED 		_NEST 
 3161 1724 FEF7EEFE 		BL LAST 
 3162 1728 FEF760FD 		BL AT 
 3163 172c FEF7E8FD 		BL CELLM 
 3164 1730 FEF77EFD 		BL DUPP 
 3165 1734 FEF7DAFE 		BL CPP  
 3166 1738 FEF752FD 		BL STORE 
 3167 173c FEF756FD 		BL AT 
 3168 1740 FEF7E0FE 		BL LAST 
 3169 1744 FEF74CFD 		BL STORE 
 3170 1748 52F804FB 		_UNNEST 
 3171              	
 3172              	//    OVERT	( -- )
 3173              	// 	Link a new word into the current vocabulary.
 3174              		_HEADER OVERT,5,"OVERT"
 3175 174c 42F804ED 		_NEST
 3176 1750 FEF7D8FE 		BL	LAST
 3177 1754 FEF74AFD 		BL	AT
 3178 1758 FEF7C2FE 		BL	CNTXT
 3179 175c FEF740FD 		BL	STORE
 3180 1760 52F804FB 		_UNNEST
 3181              	
 3182              	//    ; 	   ( -- )
 3183              	// 	Terminate a colon definition.
 3184              		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3185 1764 42F804ED 		_NEST
 3186 1768 FEF709FD 		BL	DOLIT 
ARM GAS  ps2_kbd.s 			page 66


 3187 176c 52F804FB 		_UNNEST
 3188 1770 FFF76CFE 		BL	COMMA
 3189 1774 FFF720FD 		BL	LBRAC
 3190 1778 FFF7E8FF 		BL	OVERT
 3191 177c 52F804FB 		_UNNEST
 3192              	
 3193              	//    ]	   ( -- )
 3194              	// 	Start compiling the words in the input stream.
 3195              		_HEADER RBRAC,1,"]"
 3196 1780 42F804ED 		_NEST
 3197 1784 FEF7FBFC 		_DOLIT SCOMP
 3197      C8160000 
 3198 178c FEF79CFE 		BL	TEVAL
 3199 1790 FEF726FD 		BL	STORE
 3200 1794 52F804FB 		_UNNEST
 3201              	
 3202              	
 3203              	//    COMPILE_BLW	( ca -- asm_code )
 3204              	// 	Assemble a branch-link long instruction to ca.
 3205              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3206              	COMPILE_BLW:
 3207 1798 4FEA6505 		ASR R5,R5,#1 
 3208 179c 4FF45044 		_MOV32 R4,0xF000D000 
 3208      CFF20004 
 3209 17a4 65F30A04 		BFI R4,R5,#0,#11
 3210 17a8 4FEAD525 		LSR R5,#11
 3211 17ac 65F31944 		BFI R4,R5,#16,#10
 3212 17b0 4FEAA525 		ASR R5,#10
 3213 17b4 65F3CB24 		BFI R4,R5,#11,#1
 3214 17b8 4FEA6505 		ASR R5,#1
 3215 17bc 65F34D34 		BFI R4,R5,#13,#1
 3216 17c0 4FEA6505 		ASR R5,#1
 3217 17c4 65F39A64 		BFI R4,R5,#26,#1
 3218 17c8 14F0806F 		TST R4,#(1<<26)
 3219 17cc 02D1     		BNE 1f
 3220 17ce 00BF     		NOP 
 3221 17d0 84F42054 		EOR R4,R4,#(5<<11)
 3222 17d4 4FEA3445 	1:  ROR R5,R4,#16 
 3223 17d8 7047     		_NEXT 
 3224              	
 3225              	// 	.word	_RBRAC
 3226              	// _CALLC	.byte  5
 3227              	// 	.ascii "call,"
 3228              	// 	.p2align 2 
 3229              	CALLC:	
 3230 17da 42F804ED 		_NEST
 3231 17de 25F00105 		BIC R5,R5,#1 
 3232 17e2 FEF77BFF 		BL HERE 
 3233 17e6 FEF75FFD 		BL SUBB 
 3234 17ea A5F10405 		SUB R5,R5,#4 
 3235 17ee FFF7D3FF 		BL COMPILE_BLW 
 3236 17f2 FFF72BFE 		BL	COMMA			//  assemble BL.W instruction
 3237 17f6 52F804FB 		_UNNEST
 3238              	
 3239              		.p2align 
 3240              	// 	:	( -- //  string> )
 3241              	// 	Start a new colon definition using next word as its name.
ARM GAS  ps2_kbd.s 			page 67


 3242 17fa 00BF     		_HEADER COLON,1,":"
 3243 17fc 42F804ED 		_NEST
 3244 1800 00F01AF8 		BL	HEAD 
 3245 1804 FFF7BCFF 		BL	RBRAC
 3246 1808 52F804FB 		_UNNEST
 3247              	
 3248              	//    IMMEDIATE   ( -- )
 3249              	// 	Make the last compiled word an immediate word.
 3250              		_HEADER IMMED,9,"IMMEDIATE"
 3251 180c 42F804ED 		_NEST
 3252 1810 FEF7B5FC 		_DOLIT IMEDD
 3252      80000000 
 3253 1818 FEF774FE 		BL	LAST
 3254 181c FEF7E6FC 		BL	AT
 3255 1820 FEF7E4FC 		BL	AT
 3256 1824 FEF71CFD 		BL	ORR
 3257 1828 FEF76CFE 		BL	LAST
 3258 182c FEF7DEFC 		BL	AT
 3259 1830 FEF7D6FC 		BL	STORE
 3260 1834 52F804FB 		_UNNEST
 3261              	
 3262              	
 3263              	/*********************
 3264              	   Defining words
 3265              	*********************/
 3266              	
 3267              	//  HEADER ( -- )  "string"
 3268              	// create a dictionary header in RAM
 3269              		_HEADER HEAD,6,"HEADER"
 3270 1838 42F804ED 		_NEST 
 3271 183c FFF70AFB 		BL	TOKEN
 3272 1840 FFF716FF 		BL	SNAME
 3273 1844 FEF74AFF 		BL	HERE   
 3274 1848 FEF756FD 		BL	CELLP
 3275 184c FFF7FEFD 		BL	COMMA 
 3276 1850 FEF795FC 		BL	DOLIT 
 3277 1854 42F804ED 		_NEST 
 3278 1858 FFF7F8FD 		BL	COMMA 
 3279 185c 52F804FB 		_UNNEST 
 3280              	
 3281              	//    CONSTANT	( u -- //  string> )
 3282              	// 	Compile a new constant.
 3283              		_HEADER CONST,8,"CONSTANT" 
 3284 1860 42F804ED 		_NEST
 3285 1864 FFF7E8FF 		BL	HEAD 
 3286 1868 FEF789FC 		_DOLIT DOCON
 3286      54040000 
 3287 1870 FFF7B3FF 		BL	CALLC
 3288 1874 FFF7EAFD 		BL	COMMA
 3289 1878 FFF768FF 		BL	OVERT 
 3290 187c 52F804FB 		_UNNEST
 3291              	
 3292              		.p2align 2 
 3293              	// doDOES> ( -- )
 3294              	// set code addresse in code field of new word 
 3295              	DODOES:
 3296 1880 42F804ED 		_NEST 
ARM GAS  ps2_kbd.s 			page 68


 3297 1884 FEF73EFE 		BL	LAST 
 3298 1888 FEF7B0FC 		BL	AT 
 3299 188c FFF7EAFA 		BL 	TOCFA
 3300 1890 FEF724FF 		BL	HERE  // this is ca of new word 
 3301 1894 FEF7D4FC 		BL	OVER  
 3302 1898 FEF7A2FC 		BL	STORE
 3303 189c FEF76FFC 		BL	DOLIT 
 3304 18a0 42F804ED 		_NEST 
 3305 18a4 FFF7D2FD 		BL COMMA  
 3306 18a8 FEF769FC 		_DOLIT 12 
 3306      0C000000 
 3307 18b0 FEF7F6FC 		BL	PLUS  // parameter field of new word 
 3308 18b4 FFF7F6FD 		BL	LITER
 3309 18b8 FEF7A8FC 		BL RAT 
 3310 18bc FEF710FD 		BL ONEM 
 3311 18c0 FEF71AFD 		BL	CELLP
 3312 18c4 FFF789FF 		BL	CALLC  
 3313 18c8 FEF759FC 		BL	DOLIT 
 3314 18cc 52F804FB 		_UNNEST 
 3315 18d0 FFF7BCFD 		BL	COMMA 
 3316 18d4 FFF73AFF 		BL	OVERT 
 3317 18d8 52F804FB 		_UNNEST 
 3318              	
 3319              		
 3320              	
 3321              		.p2align 2
 3322              	//  DOES> ( -- )
 3323              	//  compile time action 
 3324              		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3325 18dc 42F804ED 		_NEST 
 3326 18e0 FEF74DFC 		_DOLIT DODOES
 3326      80180000 
 3327 18e8 FFF777FF 		BL CALLC 
 3328 18ec FEF747FC 		BL	DOLIT	
 3329 18f0 52F804FB 		_UNNEST 
 3330 18f4 FFF7AAFD 		BL	COMMA  
 3331 18f8 FEF741FC 		BL	DOLIT 
 3332 18fc 42F804ED 		_NEST 
 3333 1900 FFF7A4FD 		BL	COMMA 
 3334 1904 52F804FB 		_UNNEST 
 3335              	
 3336              	
 3337              	//    CREATE	( -- //  string> )
 3338              	// 	Compile a new array entry without allocating code space.
 3339              		_HEADER CREAT,6,"CREATE"
 3340 1908 42F804ED 		_NEST
 3341 190c FFF794FF 		BL	HEAD 
 3342 1910 FEF735FC 		_DOLIT DOVAR 
 3342      48040000 
 3343 1918 FFF75FFF 		BL	CALLC  
 3344 191c 52F804FB 		_UNNEST
 3345              	
 3346              	//    VARIABLE	( -- //  string> )
 3347              	// 	Compile a new variable initialized to 0.
 3348              		_HEADER VARIA,8,"VARIABLE"
 3349 1920 42F804ED 		_NEST
 3350 1924 FFF7F0FF 		BL	CREAT
ARM GAS  ps2_kbd.s 			page 69


 3351 1928 FEF729FC 		_DOLIT 0
 3351      00000000 
 3352 1930 FFF78CFD 		BL	COMMA
 3353 1934 FFF70AFF 		BL	OVERT 
 3354 1938 52F804FB 		_UNNEST
 3355              	
 3356              	//  FCALL ( a -- )
 3357              	//  call code in FLASH memory 
 3358              	//  from RAM or opposite
 3359              		_HEADER FCALL,5,"FCALL"
 3360 193c 42F804ED 		_NEST 
 3361 1940 2C46     		MOV R4,R5
 3362 1942 51F8045B 		_POP 
 3363 1946 44F00104 		ORR R4,R4,#1
 3364 194a A047     		BLX R4 
 3365 194c 52F804FB 		_UNNEST 
 3366              	
 3367              	
 3368              	// DEFER ( -- ) name
 3369              	// create a differed word 
 3370              		_HEADER DEFER,5,"DEFER"
 3371 1950 42F804ED 		_NEST 
 3372 1954 FFF770FF 		BL	HEAD
 3373 1958 FEF711FC 		_DOLIT  NOP  
 3373      7C010000 
 3374 1960 FFF73BFF 		BL	CALLC 
 3375 1964 FEF70BFC 		BL	DOLIT 
 3376 1968 52F804FB 		_UNNEST  
 3377 196c FFF76EFD 		BL	COMMA 
 3378 1970 FFF7ECFE 		BL	OVERT  
 3379 1974 52F804FB 		_UNNEST 
 3380              	
 3381              	// DEFER! ( a -- ) name 
 3382              	// set execution address of a defered word 
 3383              		_HEADER DEFERSTO,6,"DEFER!"
 3384 1978 42F804ED 		_NEST
 3385 197c 25F00105 		BIC R5,R5,#1 
 3386 1980 FFF74EFD 		BL	TICK 
 3387 1984 FEF7B8FC 		BL	CELLP 
 3388 1988 FEF752FC 		BL	DUPP
 3389 198c FEF742FC 		BL	TOR 
 3390 1990 FEF78AFC 		BL SUBB 
 3391 1994 A5F10405 		SUB R5,R5,#4 
 3392 1998 FFF7FEFE 		BL COMPILE_BLW 
 3393 199c FEF730FC 		BL	RFROM   
 3394 19a0 FEF71EFC 		BL	STORE 
 3395 19a4 52F804FB 		_UNNEST 
 3396              		
 3397              	// DEFER@ ( -- a ) name
 3398              	// get execution address of word 	
 3399              		_HEADER DEFERAT,6,"DEFER@"
 3400 19a8 42F804ED 		_NEST 
 3401 19ac FFF738FD 		BL TICK 
 3402 19b0 FEF7A2FC 		BL	CELLP
 3403 19b4 FEF73CFC 		BL	DUPP
 3404 19b8 FEF72CFC 		BL	TOR  
 3405 19bc FEF716FC 		BL	AT
ARM GAS  ps2_kbd.s 			page 70


 3406 19c0 FEF7DDFB 		_DOLIT BLADR 
 3406      00000000 
 3407 19c8 FFF7B8FF 		BL	FCALL 
 3408 19cc FEF7D7FB 		_DOLIT	4  
 3408      04000000 
 3409 19d4 FEF764FC 		BL	PLUS 
 3410 19d8 FEF712FC 		BL	RFROM
 3411 19dc FEF760FC 		BL	PLUS  
 3412 19e0 52F804FB 		_UNNEST
 3413              	
 3414              	/*************
 3415              	   Tools
 3416              	*************/
 3417              	
 3418              	//    dm+	 ( a u -- a )
 3419              	// 	Dump u bytes from , leaving a+u on the stack.
 3420              	
 3421              	// 	.word	_VARIA
 3422              	// _DMP	.byte  3
 3423              	// 	.ascii "dm+"
 3424              	 	.p2align 2 	
 3425              		.section .inflash, "ax", %progbits 
 3426              		.type DMP, %function 
 3427              	DMP:
 3428 029c 42F804ED 		_NEST
 3429 02a0 00F01EF9 		BL	OVER
 3430 02a4 00F0BDF8 		_DOLIT	4
 3430      04000000 
 3431 02ac 00F0E0FD 		BL	UDOTR			// display address
 3432 02b0 00F05EFD 		BL	SPACE
 3433 02b4 00F008F9 		BL	TOR			// start count down loop
 3434 02b8 00F00CB8 		B.W	PDUM2			// skip first pass
 3435              	PDUM1:
 3436 02bc 00F016F9 	  BL	DUPP
 3437 02c0 00F0FCF8 		BL	CAT
 3438 02c4 00F0BDF8 		_DOLIT 3
 3438      03000000 
 3439 02cc 00F0E0FD 		BL	UDOTR			// display numeric data
 3440 02d0 00F06AF9 		BL	ONEP			// increment address
 3441              	PDUM2:
 3442 02d4 00F0CBF8 	  BL	DONXT
 3443 02d8 BC020000 		.word	PDUM1	// loop till done
 3444 02dc 52F804FB 		_UNNEST
 3445              		.p2align 2 
 3446              	
 3447              	//    DUMP	( a u -- )
 3448              	// 	Dump u bytes from a, in a formatted manner.
 3449              		_HEADER DUMP,4,"DUMP"
 3450 19e4 42F804ED 		_NEST
 3451 19e8 FEF752FD 		BL	BASE
 3452 19ec FEF7FEFB 		BL	AT
 3453 19f0 FEF710FC 		BL	TOR
 3454 19f4 FEF77EFF 		BL	HEX			// save radix,set hex
 3455 19f8 FEF7C1FB 		_DOLIT	16
 3455      10000000 
 3456 1a00 FEF70AFE 		BL	SLASH			// change count to lines
 3457 1a04 FEF706FC 		BL	TOR
ARM GAS  ps2_kbd.s 			page 71


 3458 1a08 00F014B8 		B.W	DUMP4			// start count down loop
 3459              	DUMP1:
 3460 1a0c FFF788F8 	    BL	CR
 3461 1a10 FEF7B5FB 		_DOLIT	16
 3461      10000000 
 3462 1a18 FEF79EFC 		BL	DDUP
 3463 1a1c FFF7FEFF 		BL	DMP			// display numeric
 3464 1a20 FEF78EFC 		BL	ROT
 3465 1a24 FEF78CFC 		BL	ROT
 3466 1a28 FFF74AF8 		BL	SPACE
 3467 1a2c FFF748F8 		BL	SPACE
 3468 1a30 FFF762F8 		BL	TYPEE			// display printable characters
 3469              	DUMP4:
 3470 1a34 FEF7B1FB 	    BL	DONXT
 3471 1a38 0C1A0000 		.word	DUMP1	// loop till done
 3472              	DUMP3:
 3473 1a3c FEF7F4FB 	    BL	DROP
 3474 1a40 FEF7DEFB 		BL	RFROM
 3475 1a44 FEF724FD 		BL	BASE
 3476 1a48 FEF7CAFB 		BL	STORE			// restore radix
 3477 1a4c 52F804FB 		_UNNEST
 3478              	
 3479              	//    .S	  ( ... -- ... )
 3480              	// 	Display the contents of the data stack.
 3481              		_HEADER DOTS,2,".S"
 3482 1a50 42F804ED 		_NEST
 3483 1a54 FFF734F8 		BL	SPACE
 3484 1a58 FEF726FE 		BL	DEPTH			// stack depth
 3485 1a5c FEF7DAFB 		BL	TOR			// start count down loop
 3486 1a60 00F006B8 		B.W	DOTS2			// skip first pass
 3487              	DOTS1:
 3488 1a64 FEF7D2FB 		BL	RAT
 3489 1a68 FEF72AFE 		BL	PICK
 3490 1a6c FFF7E2F8 		BL	DOT			// index stack, display contents
 3491              	DOTS2:
 3492 1a70 FEF793FB 		BL	DONXT
 3493 1a74 641A0000 		.word	DOTS1	// loop till done
 3494 1a78 FFF722F8 		BL	SPACE
 3495 1a7c 52F804FB 		_UNNEST
 3496              	
 3497              	//    >NAME	( ca -- na | F )
 3498              	// 	Convert code address to a name address.
 3499              		_HEADER TNAME,5,">NAME"
 3500 1a80 42F804ED 		_NEST
 3501 1a84 FEF7C6FB 		BL	TOR			//  
 3502 1a88 FEF72AFD 		BL	CNTXT			//  va
 3503 1a8c FEF7AEFB 		BL	AT			//  na
 3504              	TNAM1:
 3505 1a90 FEF7CEFB 		BL	DUPP			//  na na
 3506 1a94 FEF790FB 		BL	QBRAN
 3507 1a98 CC1A0000 		.word	TNAM2	//  vocabulary end, no match
 3508 1a9c FEF7C8FB 		BL	DUPP			//  na na
 3509 1aa0 FFF7F0F9 		BL	NAMET			//  na ca
 3510 1aa4 FEF7B2FB 		BL	RAT			//  na ca code
 3511 1aa8 FEF7E0FB 		BL	XORR			//  na f --
 3512 1aac FEF767FB 		_DOLIT 	0xFFFFFF
 3512      FFFFFF00 
ARM GAS  ps2_kbd.s 			page 72


 3513 1ab4 FEF7CEFB 		BL	ANDD 
 3514 1ab8 FEF77EFB 		BL	QBRAN
 3515 1abc CC1A0000 		.word	TNAM2
 3516 1ac0 FEF71EFC 		BL	CELLM			//  la 
 3517 1ac4 FEF792FB 		BL	AT			//  next_na
 3518 1ac8 FFF7E2BF 		B.W	TNAM1
 3519              	TNAM2:	
 3520 1acc FEF798FB 		BL	RFROM
 3521 1ad0 FEF7AAFB 		BL	DROP			//  0|na --
 3522 1ad4 52F804FB 		_UNNEST			// 0
 3523              	
 3524              	//    .ID	 ( na -- )
 3525              	// 	Display the name at address.
 3526              		_HEADER DOTID,3,".ID"
 3527 1ad8 42F804ED 		_NEST
 3528 1adc FEF72AFC 		BL	QDUP			// if zero no name
 3529 1ae0 FEF76AFB 		BL	QBRAN
 3530 1ae4 001B0000 		.word	DOTI1
 3531 1ae8 FEF7A0FC 		BL	COUNT
 3532 1aec FEF747FB 		_DOLIT	0x1F
 3532      1F000000 
 3533 1af4 FEF7AEFB 		BL	ANDD			// mask lexicon bits
 3534 1af8 FEF7FEFF 		BL	TYPEE
 3535 1afc 52F804FB 		_UNNEST			// display name string
 3536              	DOTI1:
 3537 1b00 FFF746F8 		BL	DOTQP
 3538 1b04 09       		.byte	9
 3539 1b05 207B6E6F 		.ascii " {noName}"
 3539      4E616D65 
 3539      7D
 3540 1b0e 00BF     		.p2align 2 	
 3541 1b10 52F804FB 		_UNNEST
 3542              	
 3543              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 3544              		.if WANT_SEE 
 3545              	
 3546              	// .CA ( ca -- ca )
 3547              	// print code field address 
 3548              		.section .inflash ,"ax", %progbits 
 3549              		.p2align 2
 3550              		.type DOTCA, %function 
 3551              	DOTCA:
 3552 02e0 42F804ED 		_NEST 
 3553 02e4 00F016F9 		BL  DUPP
 3554 02e8 00F0F6FD 		BL UDOT 
 3555 02ec 00F0BDF8 		_DOLIT 2 
 3555      02000000 
 3556 02f4 00F066FD 		BL SPACS 
 3557 02f8 52F804FB 		_UNNEST 
 3558              	
 3559              	// CODE_ABORT ( ca -- f )
 3560              	// abort if code definition
 3561              		.type CODE_ABORT,%function
 3562              	CODE_ABORT:
 3563 02fc 42F804ED 		_NEST 
 3564 0300 FFF7EEFF 		BL DOTCA  
 3565 0304 00F016F9 		BL DUPP 
ARM GAS  ps2_kbd.s 			page 73


 3566 0308 00F0F4F8 		BL AT 
 3567 030c 00F0BDF8 		BL DOLIT 
 3568 0310 42F804ED 		_NEST 
 3569 0314 00F034F9 		BL XORR 
 3570 0318 00F0DAF8 		BL QBRAN 
 3571 031c 34030000 		.word 1f  
 3572 0320 00F084FC 		BL DECIM
 3573 0324 01F0A0F8 		BL ABORQ 
 3574 0328 09       		.byte 9 
 3575 0329 636F6465 		.ascii "code word"
 3575      20776F72 
 3575      64
 3576 0332 00BF     		.p2align 2
 3577              	1:	 
 3578 0334 00F0C6FD 		BL DOTQP 
 3579 0338 04       		.byte 4
 3580 0339 6E657374 		.ascii "nest"
 3581 033d 0000BF   		.p2align 2 
 3582 0340 00F08EFD 		BL CR 
 3583 0344 52F804FB 		_UNNEST 
 3584              	
 3585              	
 3586              	// UNNEST? ( ca -- ca f )
 3587              	// check if UNNEST 
 3588              		.type UNNESTQ,%function
 3589              	UNNESTQ:
 3590 0348 42F804ED 		_NEST 
 3591 034c 00F016F9 		BL DUPP 
 3592 0350 00F0F4F8 		BL AT 
 3593 0354 00F0BDF8 		BL DOLIT 
 3594 0358 52F804FB 		_UNNEST  
 3595 035c 00F0D0F9 		BL EQUAL
 3596 0360 00F016F9 		BL DUPP 
 3597 0364 00F0DAF8 		BL QBRAN
 3598 0368 7C030000 		.word 1f  
 3599 036c 00F0C6FD 		BL DOTQP
 3600 0370 06       		.byte 6
 3601 0371 756E6E65 		.ascii "unnest" 
 3601      7374
 3602 0377 00       		.p2align 2
 3603 0378 00F08EFD 		BL CR  
 3604 037c 52F804FB 	1:	_UNNEST 
 3605              	
 3606              	
 3607              	// search no name routine from code address. 
 3608              		.type NONAMEQ, %function
 3609              	NONAMEQ: // ( ca -- na|ca f )
 3610 0380 42F804ED 		_NEST 
 3611 0384 00F0BDF8 		_DOLIT 0 
 3611      00000000 
 3612 038c 00F01AF9 		BL SWAP 
 3613 0390 00F0BDF8 		_DOLIT NONAME_SUB
 3613      14000000 
 3614 0398 00F008F9 		BL TOR   
 3615 039c 00F016F9 	0:	BL DUPP // ( 0 ca ca -- )  
 3616 03a0 00F004F9 		BL RAT  
 3617 03a4 00F0F4F8 		BL AT
ARM GAS  ps2_kbd.s 			page 74


 3618 03a8 00F098F9 		BL QDUP 
 3619 03ac 00F0DAF8 		BL QBRAN 
 3620 03b0 14040000 		.word 2f  
 3621 03b4 00F034F9 		BL XORR 
 3622 03b8 00F0BDF8 		_DOLIT 0xFFFFFF 
 3622      FFFFFF00 
 3623 03c0 00F028F9 		BL	ANDD  
 3624 03c4 00F0DAF8 		BL QBRAN 
 3625 03c8 E0030000 		.word 1f 
 3626 03cc 00F0FEF8 		BL RFROM 
 3627 03d0 00F07AF9 		BL CELLP
 3628 03d4 00F008F9 		BL TOR  
 3629 03d8 00F0E6F8 		BL BRAN 
 3630 03dc 9C030000 		.word 0b 
 3631 03e0 00F0FEF8 	1:  BL RFROM 
 3632 03e4 00F0BDF8 		_DOLIT NONAME_SUB
 3632      14000000 
 3633 03ec 00F052F9 		BL SUBB
 3634 03f0 00F0BDF8 		_DOLIT ANONYMOUS 
 3634      50000000 
 3635 03f8 00F04EF9 		BL	PLUS
 3636 03fc 00F0F4F8 		BL	AT   
 3637 0400 00F01AF9 		BL	SWAP 
 3638 0404 00F012F9 		BL	DROP
 3639 0408 00F01AF9 		BL	SWAP 
 3640 040c 00F0BAF9 		BL	INVER 
 3641 0410 52F804FB 		_UNNEST 
 3642 0414 00F012F9 	2:	BL DROP 
 3643 0418 00F01AF9 		BL SWAP 
 3644 041c 00F0FEF8 		BL RFROM
 3645 0420 00F012F9 		BL DROP 
 3646 0424 52F804FB 		_UNNEST 
 3647              	
 3648              		.p2align 2 
 3649              	
 3650              	
 3651              	// print noname routine label ( n -- )
 3652              	// n is offset in ANONYMOUS array 
 3653              		.type DOTNONAME,%function
 3654              	DOTNONAME:
 3655 0428 42F804ED 		_NEST 
 3656 042c 41F8045D 		_PUSH 
 3657 0430 00F0BDF8 		_DOLIT ANONYMOUS 
 3657      50000000 
 3658 0438 00F04EF9 		BL PLUS 
 3659 043c 00F0F4F8 		BL AT 
 3660 0440 00F07AFD 		BL TYPEE 
 3661 0444 52F804FB 		_UNNEST 
 3662              	
 3663              	// IS_BLW ( code -- f )
 3664              	// check if it is a BL instruction 
 3665              		.type IS_BLW, %function 
 3666              	IS_BLW:
 3667 0448 42F804ED 		_NEST 
 3668 044c 00F0BDF8 		_DOLIT 0xD000F000
 3668      00F000D0 
 3669 0454 00F016F9 		BL DUPP 
ARM GAS  ps2_kbd.s 			page 75


 3670 0458 00F008F9 		BL TOR 
 3671 045c 00F028F9 		BL ANDD
 3672 0460 00F0FEF8 		BL RFROM  
 3673 0464 00F0D0F9 		BL EQUAL   
 3674 0468 52F804FB 		_UNNEST 
 3675              	
 3676              	//    SEE	 ( -- //  string> )
 3677              	// 	A simple decompiler.
 3678              		_HEADER SEE,3,"SEE"
 3679 1b14 42F804ED 		_NEST
 3680 1b18 FEF7BAFC 		BL BASE 
 3681 1b1c FEF766FB 		BL AT 
 3682 1b20 FEF778FB 		BL TOR 
 3683 1b24 FEF7E6FE 		BL HEX 
 3684 1b28 FFF77AFC 		BL	TICK	//  ca --, starting address
 3685 1b2c FEF7F8FF 		BL	CR	
 3686 1b30 FFF7FEFF 		BL  CODE_ABORT
 3687 1b34 00F008F8 		BL	SCOL 
 3688 1b38 FEF762FB 		BL  RFROM 
 3689 1b3c FEF7A8FC 		BL 	BASE 
 3690 1b40 FEF74EFB 		BL	STORE 
 3691 1b44 52F804FB 		_UNNEST
 3692              	
 3693              	
 3694              	// SEECOLON ( ca -- )
 3695              	// Decompile colon definition 
 3696              		_HEADER SCOL,8,"SEECOLON"
 3697 1b48 42F804ED 		_NEST 
 3698 1b4c FEF717FB 		_DOLIT 9  
 3698      09000000 
 3699 1b54 FEF75EFB 		BL TOR // not a BL counter limit to 10 consecutives 
 3700              	SCOL1:
 3701 1b58 FEF7CEFB 		BL	CELLP			//  a
 3702 1b5c FFF7FEFF 		BL  DOTCA 
 3703 1b60 FFF7FEFF 		BL  UNNESTQ
 3704 1b64 FEF728FB 		BL	QBRAN 
 3705 1b68 981B0000 		.word 1f  
 3706 1b6c FEF760FB 		BL	DUPP 
 3707 1b70 FEF7C2FB 		BL	CELLP
 3708 1b74 FEF73AFB 		BL	AT 
 3709 1b78 FFF7FEFF 		BL	IS_BLW
 3710 1b7c FEF7FCFB 		BL	INVER  
 3711 1b80 FEF71AFB 		BL	QBRAN 
 3712 1b84 581B0000 		.word SCOL1 
 3713 1b88 FEF73AFB 		BL	RFROM 
 3714 1b8c FEF74CFB 		BL	DROP 
 3715 1b90 FEF71EFB 		BL	BRAN 
 3716 1b94 AC1B0000 		.word 2f 
 3717 1b98 FEF74AFB 	1:	BL	DUPP			//  a a
 3718 1b9c 00F02CF8 		BL  DECOMP		//  a
 3719 1ba0 FEF7BEFF 		BL	CR 
 3720 1ba4 FEF7F9FA 		BL	DONXT  
 3721 1ba8 581B0000 		.word	SCOL1
 3722 1bac FEF73CFB 	2:	BL DROP 
 3723 1bb0 52F804FB 		_UNNEST
 3724              	
 3725              	// BL-ADR ( asm_code -- rel_adr )
ARM GAS  ps2_kbd.s 			page 76


 3726              	// get absolute address from asm_code 
 3727              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3728              		.p2align 2 
 3729              		.type BLADR, %function 
 3730              	BLADR: 
 3731 1bb4 4FEA0504 		MOV.W R4,R5
 3732 1bb8 4FEA3444 		ROR R4,#16 
 3733 1bbc 64F30A05 		BFI R5,R4,#0,#11 
 3734 1bc0 4FEAE424 		ASR R4,#11 
 3735 1bc4 64F35555 		BFI R5,R4,#21,#1 
 3736 1bc8 4FEAA404 		ASR R4,#2
 3737 1bcc 64F39655 		BFI R5,R4,#22,#1
 3738 1bd0 4FEAE404 		ASR R4,#3
 3739 1bd4 64F3D425 		BFI R5,R4,#11,#10
 3740 1bd8 4FEAA424 		ASR R4,#10 
 3741 1bdc 64F3D755 		BFI R5,R4,#23,#1
 3742 1be0 15F4000F 		TST R5,#(1<<23)
 3743 1be4 40F00280 		BNE.W 1f
 3744 1be8 85F4C005 		EOR R5,R5,#(3<<21)
 3745 1bec 4FEA0525 	1:	LSL R5,#8
 3746 1bf0 4FEAE515 		ASR R5,#7 
 3747 1bf4 7047     		_NEXT 
 3748              	
 3749              		
 3750              	// 	DECOMPILE ( a -- )
 3751              	// 	Convert code in a.  Display name of command or as data.
 3752 1bf6 00BF     		_HEADER DECOMP,9,"DECOMPILE"
 3753 1bf8 42F804ED 		_NEST
 3754 1bfc FEF718FB 		BL	DUPP			//  a a
 3755 1c00 FEF7F4FA 		BL	AT			//  a code
 3756 1c04 FEF714FB 		BL	DUPP			//  a code code
 3757 1c08 FFF7FEFF 		BL	IS_BLW
 3758 1c0c FEF7D4FA 		BL	QBRAN
 3759 1c10 701C0000 		.word	DECOM2	//  not a BL instruction 
 3760              		//  a valid_code --, extract address and display name
 3761 1c14 FEF7BCFF 		BL DOTQP  
 3762 1c18 03       		.byte 3
 3763 1c19 424C20   		.ascii "BL "
 3764              		.p2align 2
 3765 1c1c FFF7CAFF 		BL  BLADR   // extract relative address from BL code
 3766 1c20 FEF70EFB 		BL	OVER			//  a offset a
 3767 1c24 FEF73CFB 		BL	PLUS			//  a target-4
 3768 1c28 FEF766FB 		BL	CELLP			//  a target
 3769 1c2c FFF7FEFF 		BL  DOTCA 
 3770 1c30 FFF7FEFF 		BL	NONAMEQ 
 3771 1c34 FEF7C0FA 		BL	QBRAN 
 3772 1c38 441C0000 		.word DECOMP1  
 3773 1c3c FEF7C8FA 		BL	BRAN 
 3774 1c40 481C0000 		.word DECOMP3 
 3775              	DECOMP1:
 3776 1c44 FFF71CFF 		BL	TNAME			//  a na/0 --, is it a name?
 3777              	DECOMP3:
 3778 1c48 FFF746FF 		BL	DOTID			//  a --, display name
 3779 1c4c FEF7ECFA 		BL	DROP
 3780              	// reset not BL counter 
 3781 1c50 FEF7D6FA 		BL	RFROM 
 3782 1c54 FEF7D4FA 		BL	RFROM 
ARM GAS  ps2_kbd.s 			page 77


 3783 1c58 FEF7E6FA 		BL	DROP
 3784 1c5c FEF78FFA 		_DOLIT 9  
 3784      09000000 
 3785 1c64 FEF7D6FA 		BL	TOR 
 3786 1c68 FEF7D4FA 		BL	TOR 	
 3787 1c6c 52F804FB 		_UNNEST
 3788              	DECOM2: // not a BL 
 3789 1c70 FEF7BEFF 		BL	UDOT
 3790 1c74 FEF7D8FA 		BL	DROP
 3791 1c78 52F804FB 		_UNNEST
 3792              	.endif 
 3793              	
 3794              	//    WORDS	( -- )
 3795              	// 	Display the names in the context vocabulary.
 3796              		_HEADER WORDS,5,"WORDS"
 3797 1c7c 42F804ED 		_NEST
 3798 1c80 FEF74EFF 		BL	CR
 3799 1c84 FEF72CFC 		BL	CNTXT
 3800 1c88 FEF7B0FA 		BL	AT			// only in context
 3801              	WORS1:
 3802 1c8c FEF752FB 		BL	QDUP			// ?at end of list
 3803 1c90 FEF792FA 		BL	QBRAN
 3804 1c94 B01C0000 		.word	WORS2
 3805 1c98 FEF7CAFA 		BL	DUPP
 3806 1c9c FEF710FF 		BL	SPACE
 3807 1ca0 FFF71AFF 		BL	DOTID			// display a name
 3808 1ca4 FEF72CFB 		BL	CELLM
 3809 1ca8 FEF7A0FA 		BL	AT
 3810 1cac FFF7EEBF 		B.W	WORS1
 3811              	WORS2:
 3812 1cb0 52F804FB 		_UNNEST
 3813              	
 3814              		.section .text , "ax", %progbits
 3815              	
 3816              	// **************************************************************************
 3817              	//  cold start
 3818              	
 3819              	//    VER	 ( -- n )
 3820              	// 	Return the version number of this implementation.
 3821              	
 3822              	// 	.word	_WORDS
 3823              	// _VERSN	.byte  3
 3824              	// 	.ascii "VER"
 3825              	// 	.p2align 2 	
 3826              	VERSN:
 3827 1cb4 42F804ED 		_NEST
 3828 1cb8 FEF761FA 		_DOLIT	VER*256+EXT
 3828      00010000 
 3829 1cc0 52F804FB 		_UNNEST
 3830              	
 3831              	//    hi	  ( -- )
 3832              	// 	Display the sign-on message of eForth.
 3833              		_HEADER HI,2,"HI"
 3834 1cc4 42F804ED 		_NEST
 3835 1cc8 FEF72AFF 		BL	CR	// initialize I/O
 3836 1ccc FEF757FA 		_DOLIT hi_msg 
 3836      00000000 
ARM GAS  ps2_kbd.s 			page 78


 3837 1cd4 FEF7AAFB 		BL	COUNT 
 3838 1cd8 FEF70EFF 		BL	TYPEE 
 3839 1cdc FEF7D8FB 		BL	BASE
 3840 1ce0 FEF784FA 		BL	AT
 3841 1ce4 FEF706FE 		BL	HEX	// save radix
 3842 1ce8 FFF7E4FF 		BL	VERSN
 3843 1cec FEF798FD 		BL	BDIGS
 3844 1cf0 FEF7B2FD 		BL	DIG
 3845 1cf4 FEF7B0FD 		BL	DIG
 3846 1cf8 FEF741FA 		_DOLIT	'.'
 3846      2E000000 
 3847 1d00 FEF798FD 		BL	HOLD
 3848 1d04 FEF7B4FD 		BL	DIGS
 3849 1d08 FEF7D0FD 		BL	EDIGS
 3850 1d0c FEF7F4FE 		BL	TYPEE	// format version number
 3851 1d10 FEF7BEFB 		BL	BASE
 3852 1d14 FEF764FA 		BL	STORE
 3853 1d18 FEF702FF 		BL	CR
 3854 1d1c 52F804FB 		_UNNEST			// restore radix
 3855              	
 3856              		.section .rodata
 3857              		.p2align 2 
 3858              	hi_msg:
 3859 0000 10       		.byte	16
 3860 0001 6265796F 		.ascii "beyond Jupiter v" 
 3860      6E64204A 
 3860      75706974 
 3860      65722076 
 3861 0011 000000   		.p2align 2 
 3862              	
 3863              		.section  .text, "ax" ,%progbits 
 3864              	
 3865              	//    COLD	( -- )
 3866              	// 	The high level cold start sequence.
 3867              		_HEADER LASTN,4,"COLD"
 3868              	COLD:
 3869              	//  Initiate Forth registers
 3870 1d20 4FF00003 		_MOV32 R3,UPP // system variables area 
 3870      C2F20003 
 3871 1d28 4FF47F41 		_MOV32 R1,SPP // Forth data stack 
 3871      C2F20101 
 3872 1d30 4FF68072 		_MOV32 R2,RPP // Forth return stack 
 3872      C2F20102 
 3873 1d38 85EA0505 		EOR R5,R5,R5			//  tos=0
 3874 1d3c 42F804ED 		_NEST
 3875              	COLD1:
 3876 1d40 FEF71DFA 		_DOLIT 0 
 3876      00000000 
 3877 1d48 FEF7E8F9 		BL ULED // turn off user LED 
 3878 1d4c FEF717FA 		_DOLIT	UZERO
 3878      00000000 
 3879 1d54 FEF713FA 		_DOLIT	UPP
 3879      00000020 
 3880 1d5c FEF70FFA 		_DOLIT	ULAST-UZERO
 3880      88000000 
 3881 1d64 FEF7EAFC 		BL	MOVE 			// initialize user area
 3882 1d68 FFF774FA 		BL	PRESE			// initialize stack
ARM GAS  ps2_kbd.s 			page 79


 3883 1d6c FEF78AFB 		BL	TBOOT
 3884 1d70 FEF7C8FC 		BL	ATEXE			// application boot
 3885 1d74 FFF7EAFC 		BL	OVERT
 3886 1d78 FFF776BA 		B.W	QUIT			// start interpretation
 3887              		.p2align 2
 3888              	CTOP: 
 3889              	COLD2:
 3890 1d7c FFFFFFFF 		.word	0XFFFFFFFF
 3891              	
 3892              	/********************************
 3893              	  data that doesn't need to be 
 3894              	  copied in RAM 
 3895              	*******************************/
 3896              		.section .rodata 
 3897              		.p2align 2
 3898              	NONAME_SUB: // routine not in the dictionary 
 3899 0014 D0010000 		.word BRAN,QBRAN, DOLIT,DONXT,DODOES
 3899      B8010000 
 3899      7E010000 
 3899      9A010000 
 3899      80180000 
 3900 0028 48040000 		.word DOVAR,DOCON,IS_BLW,DOTQP,BLADR  
 3900      54040000 
 3900      00000000 
 3900      900B0000 
 3900      00000000 
 3901 003c 00000000 		.word DOTCA,NONAMEQ,STRCQ,VERSN  
 3901      00000000 
 3901      BC140000 
 3901      B41C0000 
 3902 004c 00000000 		.word 0 
 3903              	
 3904              	ANONYMOUS: // anonymous routines 
 3905 0050 88000000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 3905      94000000 
 3905      A0000000 
 3905      AC000000 
 3905      B8000000 
 3906 006c DC000000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 3906      E8000000 
 3906      EC000000 
 3906      F8000000 
 3906      04010000 
 3907              	
 3908              	BRAN_LBL:
 3909 0088 09       		.byte 9 
 3910 0089 207B6272 		.ascii " {branch}"
 3910      616E6368 
 3910      7D
 3911 0092 0000     		.p2align 2 
 3912              	QBRAN_LBL:
 3913 0094 0A       		.byte 10
 3914 0095 207B3F62 		.ascii " {?branch}"
 3914      72616E63 
 3914      687D
 3915 009f 00       		.p2align 2
 3916              	DOLIT_LBL:
ARM GAS  ps2_kbd.s 			page 80


 3917 00a0 08       		.byte 8 
 3918 00a1 207B646F 		.ascii " {doLit}"
 3918      4C69747D 
 3919 00a9 000000   		.p2align 2 
 3920              	DONEXT_LBL:
 3921 00ac 09       		.byte 9
 3922 00ad 207B646F 		.ascii " {doNext}"
 3922      4E657874 
 3922      7D
 3923 00b6 0000     		.p2align 2 
 3924              	DODOES_LBL:
 3925 00b8 09       		.byte 9
 3926 00b9 207B646F 		.ascii " {doDoes}"
 3926      446F6573 
 3926      7D
 3927 00c2 0000     		.p2align 2 
 3928              	DOVAR_LBL:
 3929 00c4 08       		.byte 8
 3930 00c5 207B646F 		.ascii " {doVar}"
 3930      5661727D 
 3931 00cd 000000   		.p2align 2 
 3932              	DOCON_LBL:
 3933 00d0 0A       		.byte 10
 3934 00d1 207B646F 		.ascii " {doConst}"
 3934      436F6E73 
 3934      747D
 3935 00db 00       		.p2align 2 
 3936              	IS_BLW_LBL:
 3937 00dc 0B       		.byte 11 
 3938 00dd 207B424C 		.ascii " {BL code?}"
 3938      20636F64 
 3938      653F7D
 3939              		.p2align 2 
 3940              	DOTQP_LBL:
 3941 00e8 03       		.byte 3
 3942 00e9 202E22   		.ascii " .\""
 3943              		.p2align 
 3944              	BLADR_LBL:
 3945 00ec 09       		.byte 9
 3946 00ed 207B424C 		.ascii " {BL>ADR}"
 3946      3E414452 
 3946      7D
 3947 00f6 0000     		.p2align 2 
 3948              	DOTCA_LBL:
 3949 00f8 08       		.byte  8
 3950 00f9 207B646F 		.ascii " {dotca}"
 3950      7463617D 
 3951 0101 000000   		.p2align 2 
 3952              	NONAMEQ_LBL:
 3953 0104 0A       		.byte  10
 3954 0105 207B6E6F 		.ascii " {noname?}"
 3954      6E616D65 
 3954      3F7D
 3955 010f 00       		.p2align 2 
 3956              	STRCQ_LBL:
 3957 0110 06       		.byte  6
 3958 0111 207B242C 		.ascii " {$,\"}"
ARM GAS  ps2_kbd.s 			page 81


 3958      227D
 3959 0117 00       		.p2align 2 
 3960              	VERSN_LBL:
 3961 0118 0A       		.byte  10
 3962 0119 207B7665 		.ascii " {version}"
 3962      7273696F 
 3962      6E7D
 3963 0123 00       		.p2align 2 
 3964              	
 3965              		.section .user 
 3966              		.p2align 10 
 3967              	USER_SPACE: // save user image here.  
 3968 0000 FFFFFFFF 		.word 0XFFFFFFFF
 3969              	
 3970              	
 3971              	  .end 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	//  .include "macros.inc"
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ HRES, 320  // horizontal resolution
  37              	  .equ VRES, 200   // vertical resolution
  38              	  .equ BPP, 4     // bits per pixel
  39              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  40              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  41              	  .equ LEFT_MARGIN, (750) 
ARM GAS  ps2_kbd.s 			page 82


  42              	  .equ VIDEO_FIRST_LINE, 40
  43              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  44              	  .equ VIDEO_DELAY,(FCLK/1000000*10-1) // 10µSec
  45              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  46              	
  47              	// video state 
  48              	  .equ ST_VSYNC, 0 
  49              	  .equ ST_PREVID,1 
  50              	  .equ ST_VIDEO,2 
  51              	  .equ ST_POSTVID,3    
  52              	// field 
  53              	   .equ ODD_FIELD,0 
  54              	   .equ EVEN_FIELD,-1
  55              	
  56              	/*******************************************************
  57              	NOTES:
  58              	 1) Values computed for a 96Mhz sysclock 
  59              	 2) Video sync output on PB1 use T3_CH4
  60              	 3) video out trigger TIMER3 CH3 
  61              	********************************************************/
  62              	
  63              	/**************************************
  64              	  initialize TIMER3 CH4 to generate tv_out
  65              	  synchronization signal.
  66              	**************************************/ 
  67              	  _GBL_FUNC tv_init
  68              	// configure PA0:3 as OUTPUT_OD 
  69 1d80 4FF00002 	  _MOV32 r2,GPIOA_BASE_ADR 
  69      C4F20202 
  70 1d88 1168     	  ldr r1,[r2,#GPIO_MODER]
  71 1d8a 4FF05500 	  mov r0,#0x55
  72 1d8e 41EA0001 	  orr r1,r0
  73 1d92 1160     	  str r1,[r2,#GPIO_MODER]
  74              	//  mov r0,#15 
  75              	//  ldr r1,[r2,#GPIO_OTYPER]
  76              	//  orr r1,r0 
  77              	//  str r1,[r2,#GPIO_OTYPER]
  78              	//  str r1,[r2,#GPIO_BSRR]
  79              	//  ldr r1,[r2,GPIO_OSPEEDR]
  80              	//  lsl r0,#1 // fast speed  
  81              	//  orr r1,r0 
  82              	//  str r1,[r2,#GPIO_OSPEEDR]
  83 1d94 80EA0000 	  eor r0,r0 
  84 1d98 5061     	  str r0,[r2,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 1d9a 02F58062 	  add r2,#0x400 // GPIOB_BASE_ADR
  88 1d9e 4FF00800 	  mov r0,(2<<2) // alternate function output 
  89 1da2 1168     	  ldr r1,[r2,#GPIO_MODER]
  90 1da4 41EA0001 	  orr r1,r0 
  91 1da8 1060     	  str r0,[r2,#GPIO_MODER] // output AFPP
  92 1daa 9168     	  ldr r1,[r2,#GPIO_OSPEEDR]
  93 1dac 41EA0001 	  orr r1,r0 
  94 1db0 9160     	  str r1,[r2,#GPIO_OSPEEDR] // 2= fast speed 
  95 1db2 4FEA8000 	  lsl r0,#2 // alternate function 2 on BP1==TIM3_CH4 
  96 1db6 116A     	  ldr r1,[r2,#GPIO_AFRL]
  97 1db8 41EA0001 	  orr r1,r0 
ARM GAS  ps2_kbd.s 			page 83


  98 1dbc 1162     	  str r1,[r2,#GPIO_AFRL]
  99              	// enable peripheral clock 
 100 1dbe 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 100      C4F20202 
 101 1dc6 4FF00200 	  mov r0,#2 
 102 1dca 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 103 1dcc 41EA0001 	  orr r1,r0 
 104 1dd0 1164     	  str r1,[r2,#RCC_APB1ENR]
 105              	// configure TIMER3   
 106 1dd2 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 106      C4F20002 
 107 1dda 41F2D470 	  mov r0,#HPER
 108 1dde D062     	  str r0,[r2,#TIM_ARR]
 109 1de0 40F2BF30 	  mov r0,#VIDEO_DELAY 
 110 1de4 D063     	  str r0,[r2,#TIM_CCR3]
 111 1de6 4FF4E170 	  mov r0,#HPULSE 
 112 1dea 1064     	  str r0,[r2,#TIM_CCR4]  
 113 1dec 47F27000 	  mov r0,#(7<<12)+(7<<4)
 114 1df0 D061     	  str r0,[r2,#TIM_CCMR2]
 115 1df2 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 116 1df6 1062     	  str r0,[r2,#TIM_CCER]
 117 1df8 4FF00100 	  mov r0,#1 
 118 1dfc D060     	  str r0,[r2,#TIM_DIER]
 119 1dfe 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 120              	// enable interrupt in NVIC controller 
 121 1e00 4FEA4070 	  lsl r0,#29 // IRQ29
 122 1e04 4FF46042 	  _MOV32 r2,NVIC_BASE_ADR
 122      CEF20002 
 123 1e0c D2F80011 	  ldr r1,[r2,#NVIC_ISER0]
 124 1e10 41EA0001 	  orr r1,r0 
 125 1e14 C2F80011 	  str r1,[r2,#NVIC_ISER0]
 126 1e18 7047     	  _RET
 127              	
 128              	/*************************************
 129              	  TIMER3 interrupt for tv_out
 130              	  T1 line # 
 131              	  T2 TIM3_BASE_ADR 
 132              	*************************************/
 133 1e1a 00BF     	  _GBL_FUNC tv_out_isr
 134 1e1c D0B4     	  push {T2,XP,YP}
 135 1e1e 4FF48064 	  _MOV32 T2,TIM3_BASE_ADR
 135      C4F20004 
 136 1e26 80EA0000 	  eor T1,T1
 137 1e2a 2061     	  str T1,[T2,#TIM_SR]
 138 1e2c D86D     	  ldr T1,[UP,#VID_CNTR_OFS]
 139 1e2e 00F10100 	  add T1,#1 
 140 1e32 D865     	  str T1,[UP,#VID_CNTR_OFS]
 141              	/** machine state cases **/
 142 1e34 1E6E     	  ldr XP,[UP,#VID_STATE_OFS]
 143 1e36 002E     	  cmp XP,#ST_VSYNC 
 144 1e38 07D0     	  beq state_vsync
 145 1e3a 012E     	  cmp XP,#ST_PREVID 
 146 1e3c 2FD0     	  beq state_pre_video 
 147 1e3e 022E     	  cmp XP,#ST_VIDEO 
 148 1e40 36D0     	  beq state_video_out 
 149 1e42 032E     	  cmp XP,#ST_POSTVID 
 150 1e44 62D0     	  beq state_post_video
ARM GAS  ps2_kbd.s 			page 84


 151 1e46 FFF7FEBF 	  b default_handler // invalid state 
 152              	/*** vertical sync state **/
 153              	state_vsync:
 154 1e4a 0128     	  cmp T1,#1
 155 1e4c 06D1     	  bne 1f 
 156              	/****** set vertical pre-sync  *****/
 157 1e4e 4FF0DB06 	  mov XP,#SERRATION
 158 1e52 2664     	  str XP,[T2,#TIM_CCR4]
 159 1e54 40F6E936 	  mov XP,#SYNC_LINE 
 160 1e58 E662     	  str XP,[T2,#TIM_ARR]
 161 1e5a 6AE0     	  b tv_isr_exit 
 162 1e5c 0728     	1: cmp T1,#7
 163 1e5e 03D1     	  bne 2f 
 164              	// vertical sync pulse   
 165 1e60 40F62826 	  mov XP,#VSYNC_PULSE
 166 1e64 2664     	  str XP,[T2,#TIM_CCR4]
 167 1e66 64E0     	  b tv_isr_exit
 168 1e68 0D28     	2: cmp T1,#13
 169 1e6a 03D1     	   bne 3f  
 170              	// set vertical post-sync    
 171 1e6c 4FF0DB06 	   mov XP,#SERRATION 
 172 1e70 2664     	   str XP,[T2,#TIM_CCR4]
 173 1e72 5EE0     	   b tv_isr_exit   
 174 1e74 1228     	3: cmp T1,#18
 175 1e76 03D1     	   bne 4f 
 176              	// if even field full line  
 177 1e78 5E6E     	   ldr XP,[UP,#VID_FIELD_OFS]
 178 1e7a 002E     	   cmp XP,#ODD_FIELD  
 179 1e7c 59D0     	   beq tv_isr_exit 
 180 1e7e 01E0     	   b sync_end 
 181 1e80 1328     	4: cmp T1,#19 
 182 1e82 56D1     	   bne tv_isr_exit
 183              	sync_end: 
 184 1e84 4FF00900 	   mov T1,#9
 185 1e88 D865     	   str T1,[UP,#VID_CNTR_OFS]
 186 1e8a 4FF4E176 	   mov XP,#HPULSE 
 187 1e8e 2664     	   str XP,[T2,#TIM_CCR4] 
 188 1e90 41F2D476 	   mov XP,#HPER 
 189 1e94 E662     	   str XP,[T2,#TIM_ARR] 
 190 1e96 4FF00106 	   mov XP,#ST_PREVID 
 191 1e9a 1E66     	   str XP,[UP,#VID_STATE_OFS]
 192 1e9c 49E0     	   b tv_isr_exit 
 193              	/*****************************/
 194              	state_pre_video:
 195 1e9e 2828     	   cmp T1,#VIDEO_FIRST_LINE
 196 1ea0 47D4     	   bmi tv_isr_exit 
 197 1ea2 4FF00206 	   mov XP,#ST_VIDEO 
 198 1ea6 1E66     	   str XP,[UP,#VID_STATE_OFS]
 199 1ea8 4FF00806 	   mov XP,#(1<<3) // CC3IE 
 200 1eac E660     	   str XP,[T2,#TIM_DIER]
 201 1eae 40E0     	   b tv_isr_exit 
 202              	/**************************
 203              	    VIDEO OUTPUT 
 204              	**************************/   
 205              	state_video_out:
 206 1eb0 F028     	   cmp T1,#VIDEO_LAST_LINE 
 207 1eb2 06D4     	   bmi 1f 
ARM GAS  ps2_kbd.s 			page 85


 208 1eb4 4FF00306 	   mov XP,#ST_POSTVID 
 209 1eb8 1E66     	   str XP,[UP,#VID_STATE_OFS]
 210 1eba 4FF00106 	   mov XP,#1 
 211 1ebe E660     	   str XP,[T2,#TIM_DIER]
 212 1ec0 37E0     	   b tv_isr_exit 
 213              	1: // video output
 214 1ec2 9C6E     	   ldr T2,[UP,#VID_BUFFER_OFS]
 215 1ec4 A0F12800 	   sub T1,#VIDEO_FIRST_LINE 
 216 1ec8 4FF0A006 	   mov XP,#160
 217 1ecc 06FB00F0 	   mul T1,XP 
 218 1ed0 0444     	   add T2,T1  
 219 1ed2 4FF0A007 	   mov YP,#160
 220 1ed6 4FF00006 	   _MOV32 XP,GPIOA_BASE_ADR 
 220      C4F20206 
 221 1ede 2078     	2: ldrb T1,[T2]
 222 1ee0 4FEA1010 	   lsr T1,#4 
 223 1ee4 7061     	   str T1,[XP,#GPIO_ODR]
 224 1ee6 AFF30080 	   nop.w
 225 1eea AFF30080 	   nop.w 
 226 1eee 14F8010B 	   ldrb T1,[T2],#1
 227 1ef2 00F00F00 	   and T1,#15 
 228 1ef6 7061     	   str T1,[XP,#GPIO_ODR]
 229 1ef8 AFF30080 	   nop.w
 230 1efc AFF30080 	   nop.w  
 231 1f00 013F     	   subs YP,#1
 232 1f02 ECD1     	   bne 2b  
 233 1f04 4FF47020 	   mov T1,#(15<<16) 
 234 1f08 B061     	   str T1,[XP,#GPIO_BSRR]
 235 1f0a 12E0     	   b tv_isr_exit 
 236              	state_post_video:
 237 1f0c 4FF48376 	   mov XP,#262
 238 1f10 B042     	   cmp T1,XP
 239 1f12 0ED4     	   bmi tv_isr_exit     
 240              	// odd field line 262 half line 
 241 1f14 5E6E     	   ldr XP,[UP,VID_FIELD_OFS]
 242 1f16 16B9     	   cbnz XP, frame_end 
 243 1f18 40F6E930 	   mov T1,#SYNC_LINE
 244 1f1c E062     	   str T1,[T2,#TIM_ARR]      
 245              	frame_end: 
 246 1f1e 4FF00000 	   mov T1,#ST_VSYNC 
 247 1f22 1866     	   str T1,[UP,#VID_STATE_OFS]
 248 1f24 80EA0000 	   eor T1,T1 
 249 1f28 D865     	   str T1,[UP,#VID_CNTR_OFS]
 250 1f2a 5E6E     	   ldr XP,[UP,#VID_FIELD_OFS]
 251 1f2c 6FEA0606 	   mvn XP,XP  
 252 1f30 5E66     	   str XP,[UP,#VID_FIELD_OFS]
 253              	tv_isr_exit: 
 254 1f32 D0BC     	   pop {T2,XP,YP}
 255 1f34 7047     	   _RET   
 256              	
 257              	/**********************************
 258              	   put_char 
 259              	   draw character in video buffer
 260              	   input:
 261              	      r0 character 
 262              	
 263              	**********************************/
ARM GAS  ps2_kbd.s 			page 86


 264 1f36 00BF     	      _FUNC put_char 
 265              	
 266 1f38 7047     	      _RET 
 267              	
 268              	
 269 1f3a 00BF     		.section .rodata 
 270              		.p2align 2
 271              	/********************************************
 272              	    TV font  ASCII 6 pixels x 8 pixels 
 273              	********************************************/
 274              	font_6x8:
 275 0124 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 275      00000000 
 276 012c 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 276      20002000 
 277 0134 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 277      00000000 
 278 013c 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 278      F8505000 
 279 0144 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 279      28F02000 
 280 014c C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 280      40981800 
 281 0154 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 281      A8906800 
 282 015c 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 282      00000000 
 283 0164 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 283      40201000 
 284 016c 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 284      10204000 
 285 0174 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 285      A8200000 
 286 017c 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 286      20200000 
 287 0184 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 287      60204000 
 288 018c 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 288      00000000 
 289 0194 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 289      00606000 
 290 019c 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 290      40800000 
 291 01a4 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 291      C8887000 
 292 01ac 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 292      2020F800 
 293 01b4 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 293      4080F800 
 294 01bc F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 294      0808F000 
 295 01c4 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 295      F8101000 
 296 01cc F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 296      0808F000 
 297 01d4 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 297      88887000 
ARM GAS  ps2_kbd.s 			page 87


 298 01dc F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 298      40404000 
 299 01e4 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 299      88887000 
 300 01ec 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 300      08087000 
 301 01f4 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 301      60600000 
 302 01fc 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 302      60204000 
 303 0204 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 303      40201000 
 304 020c 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 304      F8000000 
 305 0214 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 305      10204000 
 306 021c 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 306      20002000 
 307 0224 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 307      A8A87000 
 308 022c 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 308      88888800 
 309 0234 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 309      8888F000 
 310 023c 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 310      80807800 
 311 0244 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 311      8888F000 
 312 024c F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 312      8080F800 
 313 0254 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 313      80808000 
 314 025c 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 314      88887000 
 315 0264 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 315      88888800 
 316 026c 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 316      20207000 
 317 0274 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 317      08906000 
 318 027c 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 318      A0908800 
 319 0284 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 319      8080F800 
 320 028c 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 320      88888800 
 321 0294 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 321      98888800 
 322 029c 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 322      88887000 
 323 02a4 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 323      80808000 
 324 02ac 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 324      A8987800 
 325 02b4 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 325      A0908800 
 326 02bc 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
ARM GAS  ps2_kbd.s 			page 88


 326      0808F000 
 327 02c4 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 327      20202000 
 328 02cc 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 328      88887000 
 329 02d4 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 329      88502000 
 330 02dc 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 330      A8D88800 
 331 02e4 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 331      50888800 
 332 02ec 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 332      20202000 
 333 02f4 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 333      8080F800 
 334 02fc 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 334      40406000 
 335 0304 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 335      10080000 
 336 030c 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 336      08081800 
 337 0314 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 337      00000000 
 338 031c 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 338      0000F800 
 339 0324 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 339      00000000 
 340 032c 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 340      78887800 
 341 0334 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 341      C888F000 
 342 033c 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 342      80887000 
 343 0344 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 343      98887800 
 344 034c 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 344      F8807000 
 345 0354 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 345      40404000 
 346 035c 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 346      88780870 
 347 0364 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 347      88888800 
 348 036c 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 348      20202000 
 349 0374 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 349      10906000 
 350 037c 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 350      C0A09000 
 351 0384 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 351      20207000 
 352 038c 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 352      A8888800 
 353 0394 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 353      88888800 
 354 039c 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 354      88887000 
ARM GAS  ps2_kbd.s 			page 89


 355 03a4 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 355      88F08080 
 356 03ac 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 356      90B05018 
 357 03b4 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 357      80808000 
 358 03bc 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 358      7008F000 
 359 03c4 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 359      40483000 
 360 03cc 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 360      88986800 
 361 03d4 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 361      88502000 
 362 03dc 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 362      A8A85000 
 363 03e4 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 363      20508800 
 364 03ec 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 364      88780870 
 365 03f4 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 365      2040F800 
 366 03fc 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 366      40402000 
 367 0404 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 367      20202000 
 368 040c 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 368      20204000 
 369 0414 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 369      10000000 
 370 041c FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 370      FCFCFCFC 
 371 0424 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 371      10204000 
 372 042c 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 372      40201000 
 373 0434 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 373      20200000 
 374 043c 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 374      A8702000 
 375 0444 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 375      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
ARM GAS  ps2_kbd.s 			page 90


  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	
  36              	/**********************************
  37              	  keyboard structure 
  38              	
  39              	struct {
  40              	    byte bitcntr; received bit counter 
  41              	    byte rxshift; shiftin keycode 
  42              	    byte flags; flags 
  43              	    byte ones; count bits to 1 
  44              	    }
  45              	
  46              	flags 
  47              	   :0 -> parity error flags 
  48              	**********************************/
  49              	    .equ KBD_F_PAR_ERR,1
  50              	    .equ KBD_FLAGS,KBD_STRUCT_OFS+2 
  51              	    .equ KBD_RXSHIFT,KBD_STRUCT_OFS+1
  52              	    .equ KBD_BITCNTR,KBD_STRUCT_OFS 
  53              	    .equ KBD_ONES,KBD_STRUCT_OFS+3 
  54              	
  55              	/**********************************
  56              	    kbd_isr
  57              	    interrupt service routine 
  58              	    EXTI0 connected to keyboard 
  59              	    clock signal and triggered 
  60              	    on falling edge 
  61              	**********************************/
  62              	    _GBL_FUNC kbd_isr 
  63 1f3c 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  63      C4F20102 
  64 1f44 4FF00100 	    mov r0,#1 
  65 1f48 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  66 1f4a 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  66      C4F20202 
  67 1f52 108A     	    ldrh r0,[r2,#GPIO_IDR]
  68 1f54 93F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  69 1f58 0029     	    cmp r1,#0 
  70 1f5a 19D0     	    beq start_bit 
ARM GAS  ps2_kbd.s 			page 91


  71 1f5c 0929     	    cmp r1,#9 
  72 1f5e 22D0     	    beq parity_bit 
  73 1f60 0A29     	    cmp r1,#10 
  74 1f62 31D0     	    beq stop_bit 
  75 1f64 93F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  76 1f68 4FEA5202 	    lsr r2,#1 
  77 1f6c 10F4805F 	    tst r0,#(1<<12) // data bit 
  78 1f70 07D0     	    beq 1f 
  79 1f72 42F08002 	    orr r2,#(1<<7)
  80 1f76 93F86F00 	    ldrb r0,[UP,#KBD_ONES]
  81 1f7a 00F10100 	    add r0,#1 
  82 1f7e 83F86F00 	    strb r0,[UP,#KBD_ONES]
  83 1f82 83F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
  84 1f86 01F10101 	    add r1,#1 
  85 1f8a 83F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  86 1f8e 31E0     	    b 9f         
  87              	start_bit:
  88 1f90 01F10101 	    add r1,#1 
  89 1f94 83F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  90 1f98 81EA0101 	    eor r1,r1 
  91 1f9c 83F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
  92 1fa0 83F86F10 	    strb r1,[UP,#KBD_ONES]
  93 1fa4 26E0     	    b 9f 
  94              	parity_bit:
  95 1fa6 D3F86F10 	    ldr r1,[UP,#KBD_ONES]
  96 1faa 10F4805F 	    tst r0,#(1<<12)
  97 1fae 01D0     	    beq 1f 
  98 1fb0 01F10101 	    add r1,#1 
  99 1fb4 11F0010F 	1:  tst r1,#1 
 100 1fb8 1CD1     	    bne 9f      
 101              	2: // parity error
 102 1fba 93F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 103 1fbe 41F00101 	    orr r1,#KBD_F_PAR_ERR // parity error flags 
 104 1fc2 83F86E10 	    strb r1,[UP,#KBD_FLAGS]
 105 1fc6 15E0     	    b 9f      
 106              	stop_bit:
 107 1fc8 93F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 108 1fcc 11F0010F 	    tst r1,#KBD_F_PAR_ERR 
 109 1fd0 10D1     	    bne 9f // drop this code 
 110              	// store code in queue 
 111 1fd2 D3F88410 	    ldr r1,[UP,#KBD_QTAIL_OFS]
 112 1fd6 03F17002 	    add r2,UP,#KBD_QUEUE_OFS
 113 1fda 93F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 114 1fde 5054     	    strb r0,[r2,r1]
 115 1fe0 01F10101 	    add r1,#1
 116 1fe4 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 117 1fe8 83F88410 	    strb r1,[UP,#KBD_QTAIL_OFS]
 118 1fec 80EA0000 	    eor r0,r0 
 119 1ff0 A3F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 120 1ff4 7047     	9:  _RET 
 121              	    
 122              	/**********************************
 123              	    kbd_init 
 124              	    initialize keyboard 
 125              	    PS2 clock on PA11 
 126              	    PS2 data on PA12 
 127              	**********************************/
ARM GAS  ps2_kbd.s 			page 92


 128 1ff6 00BF     	    _GBL_FUNC kbd_init 
 129              	// configure EXTI0 on pin PA11 
 130 1ff8 4FF46052 	   _MOV32 r2,SYSCFG_BASE_ADR
 130      C4F20102 
 131 2000 4FF00B00 	   mov r0,#11 
 132 2004 9060     	   str r0,[R2,#SYSCFG_EXTICR1]
 133              	// interrupt triggered on falling edge 
 134 2006 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 134      C4F20102 
 135 200e 4FF00100 	   mov r0,#(1<<0)
 136 2012 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI0 
 137 2014 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 138              	// enable interrupt EXIT0 in NVIC 
 139 2016 4FF04000 	   mov r0,#(1<<6) // IRQ6
 140 201a 4FF46042 	   _MOV32 r2,NVIC_BASE_ADR
 140      CEF20002 
 141 2022 D2F80011 	   ldr r1,[r2,#NVIC_ISER0]
 142 2026 41EA0001 	   orr r1,r0 
 143 202a C2F80011 	   str r1,[r2,#NVIC_ISER0]
 144 202e 7047     	   _RET 
 145              	
 146              	
 147              	
 148              	
ARM GAS  ps2_kbd.s 			page 93


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  ps2_kbd.s 			page 94


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  ps2_kbd.s 			page 95


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:0000000000000400 NVIC_IPR_BASE
     stm32f411ce.inc:203    *ABS*:0000000000000e00 NVIC_STIR
     stm32f411ce.inc:206    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:207    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:208    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:209    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:211    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:212    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:213    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:214    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:217    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:218    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:221    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:222    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:223    *ABS*:0000000000000008 TIM_SMCR
ARM GAS  ps2_kbd.s 			page 96


     stm32f411ce.inc:224    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:225    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:226    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:227    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:228    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:229    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:230    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:231    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:232    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:233    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:234    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:235    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:236    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:237    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:238    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:239    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:240    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:243    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:245    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:246    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:247    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:248    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:249    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:250    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:251    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:254    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:256    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:257    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:258    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:259    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:260    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:261    *ABS*:0000000000000014 EXTI_PR
          macros.inc:31     *ABS*:0000000040020800 LED_GPIO
          macros.inc:32     *ABS*:000000000000000d LED_PIN
          macros.inc:33     *ABS*:0000000040011000 UART
          macros.inc:36     *ABS*:000000002001ff80 RPP
          macros.inc:37     *ABS*:000000002001ff00 TIBB
          macros.inc:38     *ABS*:000000002001ff00 SPP
          macros.inc:39     *ABS*:0000000020018100 VID_BUFF
          macros.inc:40     *ABS*:0000000020000000 UPP
          macros.inc:41     *ABS*:00000000200180fc DEND
          macros.inc:42     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:47     *ABS*:0000000000000004 SEED_OFS
          macros.inc:48     *ABS*:0000000000000008 TICKS_OFS
          macros.inc:49     *ABS*:000000000000000c TIMER_OFS
          macros.inc:50     *ABS*:0000000000000010 BOOT_OFS
          macros.inc:51     *ABS*:0000000000000014 BASE_OFS
          macros.inc:52     *ABS*:0000000000000018 TMP_OFS
          macros.inc:53     *ABS*:000000000000001c SPAN_OFS
          macros.inc:54     *ABS*:0000000000000020 TOIN_OFS
          macros.inc:55     *ABS*:0000000000000024 NTIB_OFS
          macros.inc:56     *ABS*:0000000000000028 TIB_OFS
          macros.inc:57     *ABS*:000000000000002c EVAL_OFS
          macros.inc:58     *ABS*:0000000000000030 HLD_OFS
          macros.inc:59     *ABS*:0000000000000034 CTXT_OFS
          macros.inc:60     *ABS*:0000000000000038 FORTH_CTOP_OFS
          macros.inc:61     *ABS*:000000000000003c USER_CTOP_OFS
ARM GAS  ps2_kbd.s 			page 97


          macros.inc:62     *ABS*:0000000000000040 LASTN_OFS
          macros.inc:63     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:64     *ABS*:0000000000000044 RX_QUEUE_OFS
          macros.inc:65     *ABS*:0000000000000054 RX_HEAD_OFS
          macros.inc:66     *ABS*:0000000000000058 RX_TAIL_OFS
          macros.inc:67     *ABS*:000000000000005c VID_CNTR_OFS
          macros.inc:68     *ABS*:0000000000000060 VID_STATE_OFS
          macros.inc:69     *ABS*:0000000000000064 VID_FIELD_OFS
          macros.inc:70     *ABS*:0000000000000068 VID_BUFFER_OFS
          macros.inc:71     *ABS*:000000000000006c KBD_STRUCT_OFS
          macros.inc:72     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:73     *ABS*:0000000000000070 KBD_QUEUE_OFS
          macros.inc:74     *ABS*:0000000000000080 KBD_QHEAD_OFS
          macros.inc:75     *ABS*:0000000000000084 KBD_QTAIL_OFS
       stm32eforth.s:3833   .inflash.dictinary:0000000000000b30 link
       stm32eforth.s:95     .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:315    .inflash:00000000000000d0 reset_handler
       stm32eforth.s:213    .inflash:0000000000000000 default_handler
       stm32eforth.s:230    .inflash:0000000000000020 systick_handler
       stm32eforth.s:113    .isr_vector:0000000000000040 irq0
           ps2_kbd.s:62     .text:0000000000001f3c kbd_isr
             tvout.s:133    .text:0000000000001e1c tv_out_isr
       stm32eforth.s:249    .inflash:000000000000003c uart_rx_handler
       stm32eforth.s:201    .isr_vector:0000000000000198 isr_end
       stm32eforth.s:203    .isr_vector:0000000000000198 $d
       stm32eforth.s:211    .inflash:0000000000000000 $t
       stm32eforth.s:218    .inflash:0000000000000008 exception_msg
       stm32eforth.s:291    .inflash:00000000000000a4 uart_puts
       stm32eforth.s:272    .inflash:000000000000007c reset_mcu
       stm32eforth.s:219    .inflash:0000000000000008 $d
       stm32eforth.s:239    .inflash:000000000000003a systick_exit
       stm32eforth.s:269    .inflash:0000000000000076 user_reboot
       stm32eforth.s:282    .inflash:0000000000000090 user_reboot_msg
       stm32eforth.s:280    .inflash:000000000000008c scb_adr
       stm32eforth.s:281    .inflash:000000000000008c $d
       stm32eforth.s:286    .inflash:00000000000000a2 $t
       stm32eforth.s:509    .inflash:0000000000000258 remap
       stm32eforth.s:389    .inflash:0000000000000148 init_devices
       stm32eforth.s:480    .inflash:000000000000020c uart_init
             tvout.s:67     .text:0000000000001d80 tv_init
       stm32eforth.s:348    .inflash:0000000000000128 forth_init
       stm32eforth.s:344    .inflash:0000000000000124 forth_entry
       stm32eforth.s:345    .inflash:0000000000000124 $d
       stm32eforth.s:3868   .text:0000000000001d20 COLD
       stm32eforth.s:349    .inflash:0000000000000128 $t
       stm32eforth.s:402    .inflash:0000000000000166 wait_hserdy
       stm32eforth.s:423    .inflash:0000000000000188 wait_pllrdy
       stm32eforth.s:435    .inflash:00000000000001a2 wait_sws
       stm32eforth.s:528    .inflash:0000000000000298 init_vars_src
       stm32eforth.s:3888   .text:0000000000001d7c CTOP
       stm32eforth.s:576    .text:0000000000000000 UZERO
       stm32eforth.s:529    .inflash:0000000000000298 $d
       stm32eforth.s:534    *ABS*:0000000000000001 VER
       stm32eforth.s:535    *ABS*:0000000000000000 EXT
       stm32eforth.s:539    *ABS*:0000000000000040 COMPO
       stm32eforth.s:540    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:541    *ABS*:00000000ffffff1f MASKK
ARM GAS  ps2_kbd.s 			page 98


       stm32eforth.s:543    *ABS*:0000000000000004 CELLL
       stm32eforth.s:544    *ABS*:000000000000000a BASEE
       stm32eforth.s:545    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:547    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:548    *ABS*:000000000000000a LF
       stm32eforth.s:549    *ABS*:000000000000000d CRR
       stm32eforth.s:550    *ABS*:000000000000001b ERR
       stm32eforth.s:551    *ABS*:0000000000000027 TIC
       stm32eforth.s:577    .text:0000000000000000 $d
       stm32eforth.s:3833   .text:0000000000001cc4 HI
       stm32eforth.s:2592   .text:0000000000001164 INTER
       stm32eforth.s:3833   .inflash.dictinary:0000000000000b30 _LASTN
       stm32eforth.s:605    .text:0000000000000088 ULAST
       stm32eforth.s:611    .text:0000000000000088 $t
               .inflash.dictinary:0000000000000000 LF_scan_code
               .inflash.dictinary:0000000000000004 _scan_code
               .inflash.dictinary:000000000000000a $d
       stm32eforth.s:617    .inflash.dictinary:000000000000000c CA_scan_code
       stm32eforth.s:617    .text:0000000000000090 scan_code
       stm32eforth.s:617    .inflash.dictinary:0000000000000010 LF_RAND
       stm32eforth.s:617    .inflash.dictinary:0000000000000014 _RAND
       stm32eforth.s:635    .inflash.dictinary:000000000000001c CA_RAND
       stm32eforth.s:635    .text:00000000000000b4 RAND
       stm32eforth.s:1253   .text:0000000000000460 SEED
       stm32eforth.s:813    .text:00000000000001ec AT
       stm32eforth.s:867    .text:0000000000000230 DUPP
       stm32eforth.s:805    .text:00000000000001e0 STORE
       stm32eforth.s:1101   .text:0000000000000388 ABSS
       stm32eforth.s:873    .text:0000000000000238 SWAP
       stm32eforth.s:1481   .text:0000000000000608 MODD
       stm32eforth.s:635    .inflash.dictinary:0000000000000020 LF_PAUSE
       stm32eforth.s:635    .inflash.dictinary:0000000000000024 _PAUSE
       stm32eforth.s:655    .inflash.dictinary:000000000000002c CA_PAUSE
       stm32eforth.s:655    .text:00000000000000f4 PAUSE
       stm32eforth.s:1267   .text:0000000000000478 TIMER
       stm32eforth.s:659    .text:0000000000000100 PAUSE_LOOP
       stm32eforth.s:775    .text:00000000000001b8 QBRAN
       stm32eforth.s:663    .text:000000000000010c $d
       stm32eforth.s:666    .text:0000000000000118 PAUSE_EXIT
       stm32eforth.s:793    .text:00000000000001d0 BRAN
       stm32eforth.s:664    .text:0000000000000110 $t
       stm32eforth.s:665    .text:0000000000000114 $d
       stm32eforth.s:667    .text:0000000000000118 $t
       stm32eforth.s:655    .inflash.dictinary:0000000000000030 LF_ULED
       stm32eforth.s:655    .inflash.dictinary:0000000000000034 _ULED
       stm32eforth.s:671    .inflash.dictinary:000000000000003c CA_ULED
       stm32eforth.s:671    .text:000000000000011c ULED
       stm32eforth.s:678    .text:0000000000000134 ULED_OFF
       stm32eforth.s:671    .inflash.dictinary:0000000000000040 LF_QRX
       stm32eforth.s:671    .inflash.dictinary:0000000000000044 _QRX
       stm32eforth.s:684    .inflash.dictinary:000000000000004c CA_QRX
       stm32eforth.s:684    .text:0000000000000138 QRX
       stm32eforth.s:685    .text:0000000000000138 QKEY
       stm32eforth.s:684    .inflash.dictinary:0000000000000050 LF_EMIT
       stm32eforth.s:684    .inflash.dictinary:0000000000000054 _EMIT
       stm32eforth.s:704    .inflash.dictinary:000000000000005c CA_EMIT
       stm32eforth.s:704    .text:0000000000000164 EMIT
ARM GAS  ps2_kbd.s 			page 99


       stm32eforth.s:705    .text:0000000000000164 TECHO
       stm32eforth.s:704    .inflash.dictinary:0000000000000060 LF_NOP
       stm32eforth.s:704    .inflash.dictinary:0000000000000064 _NOP
       stm32eforth.s:719    .inflash.dictinary:0000000000000068 CA_NOP
       stm32eforth.s:719    .text:000000000000017c NOP
       stm32eforth.s:730    .text:000000000000017e DOLIT
       stm32eforth.s:719    .inflash.dictinary:000000000000006c LF_EXECU
       stm32eforth.s:719    .inflash.dictinary:0000000000000070 _EXECU
       stm32eforth.s:739    .inflash.dictinary:0000000000000078 CA_EXECU
       stm32eforth.s:739    .text:0000000000000190 EXECU
       stm32eforth.s:753    .text:000000000000019a DONXT
       stm32eforth.s:760    .text:00000000000001a8 NEXT1
       stm32eforth.s:782    .text:00000000000001ca QBRAN1
       stm32eforth.s:739    .inflash.dictinary:000000000000007c LF_EXIT
       stm32eforth.s:739    .inflash.dictinary:0000000000000080 _EXIT
       stm32eforth.s:800    .inflash.dictinary:0000000000000088 CA_EXIT
       stm32eforth.s:800    .text:00000000000001dc EXIT
       stm32eforth.s:800    .inflash.dictinary:000000000000008c LF_STORE
       stm32eforth.s:800    .inflash.dictinary:0000000000000090 _STORE
       stm32eforth.s:805    .inflash.dictinary:0000000000000094 CA_STORE
       stm32eforth.s:805    .inflash.dictinary:0000000000000098 LF_AT
       stm32eforth.s:805    .inflash.dictinary:000000000000009c _AT
       stm32eforth.s:813    .inflash.dictinary:00000000000000a0 CA_AT
       stm32eforth.s:813    .inflash.dictinary:00000000000000a4 LF_CSTOR
       stm32eforth.s:813    .inflash.dictinary:00000000000000a8 _CSTOR
       stm32eforth.s:819    .inflash.dictinary:00000000000000ac CA_CSTOR
       stm32eforth.s:819    .text:00000000000001f0 CSTOR
       stm32eforth.s:819    .inflash.dictinary:00000000000000b0 LF_CAT
       stm32eforth.s:819    .inflash.dictinary:00000000000000b4 _CAT
       stm32eforth.s:827    .inflash.dictinary:00000000000000b8 CA_CAT
       stm32eforth.s:827    .text:00000000000001fc CAT
       stm32eforth.s:827    .inflash.dictinary:00000000000000bc LF_RFROM
       stm32eforth.s:827    .inflash.dictinary:00000000000000c0 _RFROM
       stm32eforth.s:833    .inflash.dictinary:00000000000000c4 CA_RFROM
       stm32eforth.s:833    .text:0000000000000200 RFROM
       stm32eforth.s:833    .inflash.dictinary:00000000000000c8 LF_RAT
       stm32eforth.s:833    .inflash.dictinary:00000000000000cc _RAT
       stm32eforth.s:840    .inflash.dictinary:00000000000000d0 CA_RAT
       stm32eforth.s:840    .text:000000000000020c RAT
       stm32eforth.s:840    .inflash.dictinary:00000000000000d4 LF_TOR
       stm32eforth.s:840    .inflash.dictinary:00000000000000d8 _TOR
       stm32eforth.s:847    .inflash.dictinary:00000000000000dc CA_TOR
       stm32eforth.s:847    .text:0000000000000214 TOR
       stm32eforth.s:847    .inflash.dictinary:00000000000000e0 LF_SPAT
       stm32eforth.s:847    .inflash.dictinary:00000000000000e4 _SPAT
       stm32eforth.s:854    .inflash.dictinary:00000000000000e8 CA_SPAT
       stm32eforth.s:854    .text:0000000000000220 SPAT
       stm32eforth.s:854    .inflash.dictinary:00000000000000ec LF_DROP
       stm32eforth.s:854    .inflash.dictinary:00000000000000f0 _DROP
       stm32eforth.s:861    .inflash.dictinary:00000000000000f8 CA_DROP
       stm32eforth.s:861    .text:0000000000000228 DROP
       stm32eforth.s:861    .inflash.dictinary:00000000000000fc LF_DUPP
       stm32eforth.s:861    .inflash.dictinary:0000000000000100 _DUPP
       stm32eforth.s:867    .inflash.dictinary:0000000000000104 CA_DUPP
       stm32eforth.s:867    .inflash.dictinary:0000000000000108 LF_SWAP
       stm32eforth.s:867    .inflash.dictinary:000000000000010c _SWAP
       stm32eforth.s:873    .inflash.dictinary:0000000000000114 CA_SWAP
ARM GAS  ps2_kbd.s 			page 100


       stm32eforth.s:873    .inflash.dictinary:0000000000000118 LF_OVER
       stm32eforth.s:873    .inflash.dictinary:000000000000011c _OVER
       stm32eforth.s:881    .inflash.dictinary:0000000000000124 CA_OVER
       stm32eforth.s:881    .text:0000000000000240 OVER
       stm32eforth.s:881    .inflash.dictinary:0000000000000128 LF_ZLESS
       stm32eforth.s:881    .inflash.dictinary:000000000000012c _ZLESS
       stm32eforth.s:888    .inflash.dictinary:0000000000000130 CA_ZLESS
       stm32eforth.s:888    .text:0000000000000248 ZLESS
       stm32eforth.s:888    .inflash.dictinary:0000000000000134 LF_ANDD
       stm32eforth.s:888    .inflash.dictinary:0000000000000138 _ANDD
       stm32eforth.s:895    .inflash.dictinary:000000000000013c CA_ANDD
       stm32eforth.s:895    .text:0000000000000254 ANDD
       stm32eforth.s:895    .inflash.dictinary:0000000000000140 LF_ORR
       stm32eforth.s:895    .inflash.dictinary:0000000000000144 _ORR
       stm32eforth.s:902    .inflash.dictinary:0000000000000148 CA_ORR
       stm32eforth.s:902    .text:0000000000000260 ORR
       stm32eforth.s:902    .inflash.dictinary:000000000000014c LF_XORR
       stm32eforth.s:902    .inflash.dictinary:0000000000000150 _XORR
       stm32eforth.s:909    .inflash.dictinary:0000000000000154 CA_XORR
       stm32eforth.s:909    .text:000000000000026c XORR
       stm32eforth.s:909    .inflash.dictinary:0000000000000158 LF_UPLUS
       stm32eforth.s:909    .inflash.dictinary:000000000000015c _UPLUS
       stm32eforth.s:916    .inflash.dictinary:0000000000000160 CA_UPLUS
       stm32eforth.s:916    .text:0000000000000278 UPLUS
       stm32eforth.s:916    .inflash.dictinary:0000000000000164 LF_RSHIFT
       stm32eforth.s:916    .inflash.dictinary:0000000000000168 _RSHIFT
       stm32eforth.s:926    .inflash.dictinary:0000000000000170 CA_RSHIFT
       stm32eforth.s:926    .text:0000000000000288 RSHIFT
       stm32eforth.s:926    .inflash.dictinary:0000000000000174 LF_LSHIFT
       stm32eforth.s:926    .inflash.dictinary:0000000000000178 _LSHIFT
       stm32eforth.s:933    .inflash.dictinary:0000000000000180 CA_LSHIFT
       stm32eforth.s:933    .text:0000000000000294 LSHIFT
       stm32eforth.s:933    .inflash.dictinary:0000000000000184 LF_PLUS
       stm32eforth.s:933    .inflash.dictinary:0000000000000188 _PLUS
       stm32eforth.s:940    .inflash.dictinary:000000000000018c CA_PLUS
       stm32eforth.s:940    .text:00000000000002a0 PLUS
       stm32eforth.s:940    .inflash.dictinary:0000000000000190 LF_SUBB
       stm32eforth.s:940    .inflash.dictinary:0000000000000194 _SUBB
       stm32eforth.s:947    .inflash.dictinary:0000000000000198 CA_SUBB
       stm32eforth.s:947    .text:00000000000002a8 SUBB
       stm32eforth.s:947    .inflash.dictinary:000000000000019c LF_STAR
       stm32eforth.s:947    .inflash.dictinary:00000000000001a0 _STAR
       stm32eforth.s:954    .inflash.dictinary:00000000000001a4 CA_STAR
       stm32eforth.s:954    .text:00000000000002b4 STAR
       stm32eforth.s:954    .inflash.dictinary:00000000000001a8 LF_UMSTA
       stm32eforth.s:954    .inflash.dictinary:00000000000001ac _UMSTA
       stm32eforth.s:961    .inflash.dictinary:00000000000001b0 CA_UMSTA
       stm32eforth.s:961    .text:00000000000002c0 UMSTA
       stm32eforth.s:961    .inflash.dictinary:00000000000001b4 LF_MSTAR
       stm32eforth.s:961    .inflash.dictinary:00000000000001b8 _MSTAR
       stm32eforth.s:970    .inflash.dictinary:00000000000001bc CA_MSTAR
       stm32eforth.s:970    .text:00000000000002cc MSTAR
       stm32eforth.s:970    .inflash.dictinary:00000000000001c0 LF_ONEP
       stm32eforth.s:970    .inflash.dictinary:00000000000001c4 _ONEP
       stm32eforth.s:979    .inflash.dictinary:00000000000001c8 CA_ONEP
       stm32eforth.s:979    .text:00000000000002d8 ONEP
       stm32eforth.s:979    .inflash.dictinary:00000000000001cc LF_ONEM
ARM GAS  ps2_kbd.s 			page 101


       stm32eforth.s:979    .inflash.dictinary:00000000000001d0 _ONEM
       stm32eforth.s:985    .inflash.dictinary:00000000000001d4 CA_ONEM
       stm32eforth.s:985    .text:00000000000002e0 ONEM
       stm32eforth.s:985    .inflash.dictinary:00000000000001d8 LF_TWOP
       stm32eforth.s:985    .inflash.dictinary:00000000000001dc _TWOP
       stm32eforth.s:991    .inflash.dictinary:00000000000001e0 CA_TWOP
       stm32eforth.s:991    .text:00000000000002e8 TWOP
       stm32eforth.s:991    .inflash.dictinary:00000000000001e4 LF_TWOM
       stm32eforth.s:991    .inflash.dictinary:00000000000001e8 _TWOM
       stm32eforth.s:997    .inflash.dictinary:00000000000001ec CA_TWOM
       stm32eforth.s:997    .text:00000000000002f0 TWOM
       stm32eforth.s:997    .inflash.dictinary:00000000000001f0 LF_CELLP
       stm32eforth.s:997    .inflash.dictinary:00000000000001f4 _CELLP
       stm32eforth.s:1003   .inflash.dictinary:00000000000001fc CA_CELLP
       stm32eforth.s:1003   .text:00000000000002f8 CELLP
       stm32eforth.s:1003   .inflash.dictinary:0000000000000200 LF_CELLM
       stm32eforth.s:1003   .inflash.dictinary:0000000000000204 _CELLM
       stm32eforth.s:1009   .inflash.dictinary:000000000000020c CA_CELLM
       stm32eforth.s:1009   .text:0000000000000300 CELLM
       stm32eforth.s:1009   .inflash.dictinary:0000000000000210 LF_BLANK
       stm32eforth.s:1009   .inflash.dictinary:0000000000000214 _BLANK
       stm32eforth.s:1015   .inflash.dictinary:0000000000000218 CA_BLANK
       stm32eforth.s:1015   .text:0000000000000308 BLANK
       stm32eforth.s:1015   .inflash.dictinary:000000000000021c LF_CELLS
       stm32eforth.s:1015   .inflash.dictinary:0000000000000220 _CELLS
       stm32eforth.s:1022   .inflash.dictinary:0000000000000228 CA_CELLS
       stm32eforth.s:1022   .text:0000000000000314 CELLS
       stm32eforth.s:1022   .inflash.dictinary:000000000000022c LF_CELLSL
       stm32eforth.s:1022   .inflash.dictinary:0000000000000230 _CELLSL
       stm32eforth.s:1028   .inflash.dictinary:0000000000000238 CA_CELLSL
       stm32eforth.s:1028   .text:000000000000031c CELLSL
       stm32eforth.s:1028   .inflash.dictinary:000000000000023c LF_TWOST
       stm32eforth.s:1028   .inflash.dictinary:0000000000000240 _TWOST
       stm32eforth.s:1034   .inflash.dictinary:0000000000000244 CA_TWOST
       stm32eforth.s:1034   .text:0000000000000324 TWOST
       stm32eforth.s:1034   .inflash.dictinary:0000000000000248 LF_TWOSL
       stm32eforth.s:1034   .inflash.dictinary:000000000000024c _TWOSL
       stm32eforth.s:1040   .inflash.dictinary:0000000000000250 CA_TWOSL
       stm32eforth.s:1040   .text:000000000000032c TWOSL
       stm32eforth.s:1040   .inflash.dictinary:0000000000000254 LF_QDUP
       stm32eforth.s:1040   .inflash.dictinary:0000000000000258 _QDUP
       stm32eforth.s:1046   .inflash.dictinary:0000000000000260 CA_QDUP
       stm32eforth.s:1046   .text:0000000000000334 QDUP
       stm32eforth.s:1046   .inflash.dictinary:0000000000000264 LF_ROT
       stm32eforth.s:1046   .inflash.dictinary:0000000000000268 _ROT
       stm32eforth.s:1054   .inflash.dictinary:000000000000026c CA_ROT
       stm32eforth.s:1054   .text:0000000000000340 ROT
       stm32eforth.s:1054   .inflash.dictinary:0000000000000270 LF_DDROP
       stm32eforth.s:1054   .inflash.dictinary:0000000000000274 _DDROP
       stm32eforth.s:1063   .inflash.dictinary:000000000000027c CA_DDROP
       stm32eforth.s:1063   .text:000000000000034c DDROP
       stm32eforth.s:1063   .inflash.dictinary:0000000000000280 LF_DDUP
       stm32eforth.s:1063   .inflash.dictinary:0000000000000284 _DDUP
       stm32eforth.s:1070   .inflash.dictinary:000000000000028c CA_DDUP
       stm32eforth.s:1070   .text:0000000000000358 DDUP
       stm32eforth.s:1070   .inflash.dictinary:0000000000000290 LF_DPLUS
       stm32eforth.s:1070   .inflash.dictinary:0000000000000294 _DPLUS
ARM GAS  ps2_kbd.s 			page 102


       stm32eforth.s:1078   .inflash.dictinary:0000000000000298 CA_DPLUS
       stm32eforth.s:1078   .text:0000000000000364 DPLUS
       stm32eforth.s:1078   .inflash.dictinary:000000000000029c LF_INVER
       stm32eforth.s:1078   .inflash.dictinary:00000000000002a0 _INVER
       stm32eforth.s:1089   .inflash.dictinary:00000000000002a4 CA_INVER
       stm32eforth.s:1089   .text:0000000000000378 INVER
       stm32eforth.s:1089   .inflash.dictinary:00000000000002a8 LF_NEGAT
       stm32eforth.s:1089   .inflash.dictinary:00000000000002ac _NEGAT
       stm32eforth.s:1095   .inflash.dictinary:00000000000002b4 CA_NEGAT
       stm32eforth.s:1095   .text:0000000000000380 NEGAT
       stm32eforth.s:1095   .inflash.dictinary:00000000000002b8 LF_ABSS
       stm32eforth.s:1095   .inflash.dictinary:00000000000002bc _ABSS
       stm32eforth.s:1101   .inflash.dictinary:00000000000002c0 CA_ABSS
       stm32eforth.s:1101   .inflash.dictinary:00000000000002c4 LF_ZEQUAL
       stm32eforth.s:1101   .inflash.dictinary:00000000000002c8 _ZEQUAL
       stm32eforth.s:1109   .inflash.dictinary:00000000000002cc CA_ZEQUAL
       stm32eforth.s:1109   .text:0000000000000394 ZEQUAL
       stm32eforth.s:1109   .inflash.dictinary:00000000000002d0 LF_EQUAL
       stm32eforth.s:1109   .inflash.dictinary:00000000000002d4 _EQUAL
       stm32eforth.s:1118   .inflash.dictinary:00000000000002d8 CA_EQUAL
       stm32eforth.s:1118   .text:00000000000003a4 EQUAL
       stm32eforth.s:1118   .inflash.dictinary:00000000000002dc LF_ULESS
       stm32eforth.s:1118   .inflash.dictinary:00000000000002e0 _ULESS
       stm32eforth.s:1128   .inflash.dictinary:00000000000002e4 CA_ULESS
       stm32eforth.s:1128   .text:00000000000003b4 ULESS
       stm32eforth.s:1128   .inflash.dictinary:00000000000002e8 LF_LESS
       stm32eforth.s:1128   .inflash.dictinary:00000000000002ec _LESS
       stm32eforth.s:1138   .inflash.dictinary:00000000000002f0 CA_LESS
       stm32eforth.s:1138   .text:00000000000003c4 LESS
       stm32eforth.s:1138   .inflash.dictinary:00000000000002f4 LF_GREAT
       stm32eforth.s:1138   .inflash.dictinary:00000000000002f8 _GREAT
       stm32eforth.s:1148   .inflash.dictinary:00000000000002fc CA_GREAT
       stm32eforth.s:1148   .text:00000000000003d4 GREAT
       stm32eforth.s:1148   .inflash.dictinary:0000000000000300 LF_MAX
       stm32eforth.s:1148   .inflash.dictinary:0000000000000304 _MAX
       stm32eforth.s:1158   .inflash.dictinary:0000000000000308 CA_MAX
       stm32eforth.s:1158   .text:00000000000003e4 MAX
       stm32eforth.s:1158   .inflash.dictinary:000000000000030c LF_MIN
       stm32eforth.s:1158   .inflash.dictinary:0000000000000310 _MIN
       stm32eforth.s:1167   .inflash.dictinary:0000000000000314 CA_MIN
       stm32eforth.s:1167   .text:00000000000003f0 MIN
       stm32eforth.s:1167   .inflash.dictinary:0000000000000318 LF_PSTOR
       stm32eforth.s:1167   .inflash.dictinary:000000000000031c _PSTOR
       stm32eforth.s:1176   .inflash.dictinary:0000000000000320 CA_PSTOR
       stm32eforth.s:1176   .text:00000000000003fc PSTOR
       stm32eforth.s:1176   .inflash.dictinary:0000000000000324 LF_DSTOR
       stm32eforth.s:1176   .inflash.dictinary:0000000000000328 _DSTOR
       stm32eforth.s:1186   .inflash.dictinary:000000000000032c CA_DSTOR
       stm32eforth.s:1186   .text:000000000000040c DSTOR
       stm32eforth.s:1186   .inflash.dictinary:0000000000000330 LF_DAT
       stm32eforth.s:1186   .inflash.dictinary:0000000000000334 _DAT
       stm32eforth.s:1196   .inflash.dictinary:0000000000000338 CA_DAT
       stm32eforth.s:1196   .text:0000000000000420 DAT
       stm32eforth.s:1196   .inflash.dictinary:000000000000033c LF_COUNT
       stm32eforth.s:1196   .inflash.dictinary:0000000000000340 _COUNT
       stm32eforth.s:1204   .inflash.dictinary:0000000000000348 CA_COUNT
       stm32eforth.s:1204   .text:000000000000042c COUNT
ARM GAS  ps2_kbd.s 			page 103


       stm32eforth.s:1204   .inflash.dictinary:000000000000034c LF_DNEGA
       stm32eforth.s:1204   .inflash.dictinary:0000000000000350 _DNEGA
       stm32eforth.s:1212   .inflash.dictinary:0000000000000358 CA_DNEGA
       stm32eforth.s:1212   .text:0000000000000438 DNEGA
       stm32eforth.s:1230   .text:0000000000000448 DOVAR
       stm32eforth.s:1242   .text:0000000000000454 DOCON
       stm32eforth.s:1212   .inflash.dictinary:000000000000035c LF_SEED
       stm32eforth.s:1212   .inflash.dictinary:0000000000000360 _SEED
       stm32eforth.s:1253   .inflash.dictinary:0000000000000368 CA_SEED
       stm32eforth.s:1253   .inflash.dictinary:000000000000036c LF_MSEC
       stm32eforth.s:1253   .inflash.dictinary:0000000000000370 _MSEC
       stm32eforth.s:1260   .inflash.dictinary:0000000000000378 CA_MSEC
       stm32eforth.s:1260   .text:000000000000046c MSEC
       stm32eforth.s:1260   .inflash.dictinary:000000000000037c LF_TIMER
       stm32eforth.s:1260   .inflash.dictinary:0000000000000380 _TIMER
       stm32eforth.s:1267   .inflash.dictinary:0000000000000388 CA_TIMER
       stm32eforth.s:1267   .inflash.dictinary:000000000000038c LF_TBOOT
       stm32eforth.s:1267   .inflash.dictinary:0000000000000390 _TBOOT
       stm32eforth.s:1274   .inflash.dictinary:0000000000000398 CA_TBOOT
       stm32eforth.s:1274   .text:0000000000000484 TBOOT
       stm32eforth.s:1274   .inflash.dictinary:000000000000039c LF_BASE
       stm32eforth.s:1274   .inflash.dictinary:00000000000003a0 _BASE
       stm32eforth.s:1281   .inflash.dictinary:00000000000003a8 CA_BASE
       stm32eforth.s:1281   .text:0000000000000490 BASE
       stm32eforth.s:1293   .text:000000000000049a TEMP
       stm32eforth.s:1281   .inflash.dictinary:00000000000003ac LF_SPAN
       stm32eforth.s:1281   .inflash.dictinary:00000000000003b0 _SPAN
       stm32eforth.s:1300   .inflash.dictinary:00000000000003b8 CA_SPAN
       stm32eforth.s:1300   .text:00000000000004a4 SPAN
       stm32eforth.s:1300   .inflash.dictinary:00000000000003bc LF_INN
       stm32eforth.s:1300   .inflash.dictinary:00000000000003c0 _INN
       stm32eforth.s:1307   .inflash.dictinary:00000000000003c4 CA_INN
       stm32eforth.s:1307   .text:00000000000004b0 INN
       stm32eforth.s:1307   .inflash.dictinary:00000000000003c8 LF_NTIB
       stm32eforth.s:1307   .inflash.dictinary:00000000000003cc _NTIB
       stm32eforth.s:1314   .inflash.dictinary:00000000000003d4 CA_NTIB
       stm32eforth.s:1314   .text:00000000000004bc NTIB
       stm32eforth.s:1314   .inflash.dictinary:00000000000003d8 LF_TEVAL
       stm32eforth.s:1314   .inflash.dictinary:00000000000003dc _TEVAL
       stm32eforth.s:1321   .inflash.dictinary:00000000000003e4 CA_TEVAL
       stm32eforth.s:1321   .text:00000000000004c8 TEVAL
       stm32eforth.s:1321   .inflash.dictinary:00000000000003e8 LF_HLD
       stm32eforth.s:1321   .inflash.dictinary:00000000000003ec _HLD
       stm32eforth.s:1328   .inflash.dictinary:00000000000003f0 CA_HLD
       stm32eforth.s:1328   .text:00000000000004d4 HLD
       stm32eforth.s:1328   .inflash.dictinary:00000000000003f4 LF_CNTXT
       stm32eforth.s:1328   .inflash.dictinary:00000000000003f8 _CNTXT
       stm32eforth.s:1335   .inflash.dictinary:0000000000000400 CA_CNTXT
       stm32eforth.s:1335   .text:00000000000004e0 CNTXT
       stm32eforth.s:1336   .text:00000000000004e0 CRRNT
       stm32eforth.s:1335   .inflash.dictinary:0000000000000404 LF_CPP
       stm32eforth.s:1335   .inflash.dictinary:0000000000000408 _CPP
       stm32eforth.s:1343   .inflash.dictinary:000000000000040c CA_CPP
       stm32eforth.s:1343   .text:00000000000004ec CPP
       stm32eforth.s:1343   .inflash.dictinary:0000000000000410 LF_FCP
       stm32eforth.s:1343   .inflash.dictinary:0000000000000414 _FCP
       stm32eforth.s:1350   .inflash.dictinary:0000000000000418 CA_FCP
ARM GAS  ps2_kbd.s 			page 104


       stm32eforth.s:1350   .text:00000000000004f8 FCP
       stm32eforth.s:1350   .inflash.dictinary:000000000000041c LF_LAST
       stm32eforth.s:1350   .inflash.dictinary:0000000000000420 _LAST
       stm32eforth.s:1357   .inflash.dictinary:0000000000000428 CA_LAST
       stm32eforth.s:1357   .text:0000000000000504 LAST
       stm32eforth.s:1357   .inflash.dictinary:000000000000042c LF_USER_BEGIN
       stm32eforth.s:1357   .inflash.dictinary:0000000000000430 _USER_BEGIN
       stm32eforth.s:1368   .inflash.dictinary:000000000000043c CA_USER_BEGIN
       stm32eforth.s:1368   .text:0000000000000510 USER_BEGIN
       stm32eforth.s:1372   .text:0000000000000518 USR_BGN_ADR
       stm32eforth.s:1373   .text:0000000000000518 $d
       stm32eforth.s:1368   .inflash.dictinary:0000000000000440 LF_USER_END
       stm32eforth.s:1368   .inflash.dictinary:0000000000000444 _USER_END
       stm32eforth.s:1377   .inflash.dictinary:0000000000000450 CA_USER_END
       stm32eforth.s:1377   .text:000000000000051c USER_END
       stm32eforth.s:1377   .text:000000000000051c $t
       stm32eforth.s:1377   .inflash.dictinary:0000000000000454 LF_VIDEO_BUFFER
       stm32eforth.s:1377   .inflash.dictinary:0000000000000458 _VIDEO_BUFFER
       stm32eforth.s:1385   .inflash.dictinary:0000000000000464 CA_VIDEO_BUFFER
       stm32eforth.s:1385   .text:000000000000052c VIDEO_BUFFER
       stm32eforth.s:1385   .inflash.dictinary:0000000000000468 LF_WITHI
       stm32eforth.s:1385   .inflash.dictinary:000000000000046c _WITHI
       stm32eforth.s:1397   .inflash.dictinary:0000000000000474 CA_WITHI
       stm32eforth.s:1397   .text:0000000000000534 WITHI
       stm32eforth.s:1397   .inflash.dictinary:0000000000000478 LF_UMMOD
       stm32eforth.s:1397   .inflash.dictinary:000000000000047c _UMMOD
       stm32eforth.s:1411   .inflash.dictinary:0000000000000484 CA_UMMOD
       stm32eforth.s:1411   .text:0000000000000554 UMMOD
       stm32eforth.s:1415   .text:000000000000055e UMMOD0
       stm32eforth.s:1422   .text:000000000000056e UMMOD1
       stm32eforth.s:1428   .text:0000000000000578 UMMOD2
       stm32eforth.s:1411   .inflash.dictinary:0000000000000488 LF_MSMOD
       stm32eforth.s:1411   .inflash.dictinary:000000000000048c _MSMOD
       stm32eforth.s:1437   .inflash.dictinary:0000000000000494 CA_MSMOD
       stm32eforth.s:1437   .text:0000000000000584 MSMOD
       stm32eforth.s:1444   .text:000000000000059c $d
       stm32eforth.s:1449   .text:00000000000005b0 MMOD1
       stm32eforth.s:1445   .text:00000000000005a0 $t
       stm32eforth.s:1454   .text:00000000000005c0 $d
       stm32eforth.s:1457   .text:00000000000005cc MMOD2
       stm32eforth.s:1455   .text:00000000000005c4 $t
       stm32eforth.s:1462   .text:00000000000005dc $d
       stm32eforth.s:1466   .text:00000000000005ec MMOD3
       stm32eforth.s:1463   .text:00000000000005e0 $t
       stm32eforth.s:1437   .inflash.dictinary:0000000000000498 LF_SLMOD
       stm32eforth.s:1437   .inflash.dictinary:000000000000049c _SLMOD
       stm32eforth.s:1471   .inflash.dictinary:00000000000004a4 CA_SLMOD
       stm32eforth.s:1471   .text:00000000000005f0 SLMOD
       stm32eforth.s:1471   .inflash.dictinary:00000000000004a8 LF_MODD
       stm32eforth.s:1471   .inflash.dictinary:00000000000004ac _MODD
       stm32eforth.s:1481   .inflash.dictinary:00000000000004b0 CA_MODD
       stm32eforth.s:1481   .inflash.dictinary:00000000000004b4 LF_SLASH
       stm32eforth.s:1481   .inflash.dictinary:00000000000004b8 _SLASH
       stm32eforth.s:1489   .inflash.dictinary:00000000000004bc CA_SLASH
       stm32eforth.s:1489   .text:0000000000000618 SLASH
       stm32eforth.s:1489   .inflash.dictinary:00000000000004c0 LF_SSMOD
       stm32eforth.s:1489   .inflash.dictinary:00000000000004c4 _SSMOD
ARM GAS  ps2_kbd.s 			page 105


       stm32eforth.s:1498   .inflash.dictinary:00000000000004cc CA_SSMOD
       stm32eforth.s:1498   .text:000000000000062c SSMOD
       stm32eforth.s:1498   .inflash.dictinary:00000000000004d0 LF_STASL
       stm32eforth.s:1498   .inflash.dictinary:00000000000004d4 _STASL
       stm32eforth.s:1508   .inflash.dictinary:00000000000004d8 CA_STASL
       stm32eforth.s:1508   .text:0000000000000644 STASL
       stm32eforth.s:1508   .inflash.dictinary:00000000000004dc LF_ALGND
       stm32eforth.s:1508   .inflash.dictinary:00000000000004e0 _ALGND
       stm32eforth.s:1520   .inflash.dictinary:00000000000004e8 CA_ALGND
       stm32eforth.s:1520   .text:0000000000000658 ALGND
       stm32eforth.s:1520   .inflash.dictinary:00000000000004ec LF_TCHAR
       stm32eforth.s:1520   .inflash.dictinary:00000000000004f0 _TCHAR
       stm32eforth.s:1528   .inflash.dictinary:00000000000004f8 CA_TCHAR
       stm32eforth.s:1528   .text:0000000000000668 TCHAR
       stm32eforth.s:1530   .text:0000000000000670 $d
       stm32eforth.s:1531   .text:0000000000000674 $t
       stm32eforth.s:1534   .text:0000000000000684 $d
       stm32eforth.s:1535   .text:0000000000000688 $t
       stm32eforth.s:1538   .text:0000000000000694 $d
       stm32eforth.s:1541   .text:00000000000006a4 TCHA1
       stm32eforth.s:1539   .text:0000000000000698 $t
       stm32eforth.s:1540   .text:00000000000006a0 $d
       stm32eforth.s:1542   .text:00000000000006a4 $t
       stm32eforth.s:1528   .inflash.dictinary:00000000000004fc LF_DEPTH
       stm32eforth.s:1528   .inflash.dictinary:0000000000000500 _DEPTH
       stm32eforth.s:1546   .inflash.dictinary:0000000000000508 CA_DEPTH
       stm32eforth.s:1546   .text:00000000000006a8 DEPTH
       stm32eforth.s:1546   .inflash.dictinary:000000000000050c LF_PICK
       stm32eforth.s:1546   .inflash.dictinary:0000000000000510 _PICK
       stm32eforth.s:1555   .inflash.dictinary:0000000000000518 CA_PICK
       stm32eforth.s:1555   .text:00000000000006c0 PICK
       stm32eforth.s:1555   .inflash.dictinary:000000000000051c LF_HERE
       stm32eforth.s:1555   .inflash.dictinary:0000000000000520 _HERE
       stm32eforth.s:1569   .inflash.dictinary:0000000000000528 CA_HERE
       stm32eforth.s:1569   .text:00000000000006dc HERE
       stm32eforth.s:1569   .inflash.dictinary:000000000000052c LF_PAD
       stm32eforth.s:1569   .inflash.dictinary:0000000000000530 _PAD
       stm32eforth.s:1577   .inflash.dictinary:0000000000000534 CA_PAD
       stm32eforth.s:1577   .text:00000000000006ec PAD
       stm32eforth.s:1577   .inflash.dictinary:0000000000000538 LF_TIB
       stm32eforth.s:1577   .inflash.dictinary:000000000000053c _TIB
       stm32eforth.s:1585   .inflash.dictinary:0000000000000540 CA_TIB
       stm32eforth.s:1585   .text:00000000000006fc TIB
       stm32eforth.s:1585   .inflash.dictinary:0000000000000544 LF_ATEXE
       stm32eforth.s:1585   .inflash.dictinary:0000000000000548 _ATEXE
       stm32eforth.s:1592   .inflash.dictinary:0000000000000554 CA_ATEXE
       stm32eforth.s:1592   .text:0000000000000704 ATEXE
       stm32eforth.s:1592   .inflash.dictinary:0000000000000558 LF_CMOVE
       stm32eforth.s:1592   .inflash.dictinary:000000000000055c _CMOVE
       stm32eforth.s:1603   .inflash.dictinary:0000000000000564 CA_CMOVE
       stm32eforth.s:1603   .text:0000000000000718 CMOVE
       stm32eforth.s:1610   .text:000000000000072a CMOV1
       stm32eforth.s:1607   .text:0000000000000722 CMOV0
       stm32eforth.s:1615   .text:0000000000000734 CMOV2
       stm32eforth.s:1603   .inflash.dictinary:0000000000000568 LF_MOVE
       stm32eforth.s:1603   .inflash.dictinary:000000000000056c _MOVE
       stm32eforth.s:1621   .inflash.dictinary:0000000000000574 CA_MOVE
ARM GAS  ps2_kbd.s 			page 106


       stm32eforth.s:1621   .text:000000000000073c MOVE
       stm32eforth.s:1629   .text:0000000000000752 MOVE1
       stm32eforth.s:1626   .text:000000000000074a MOVE0
       stm32eforth.s:1634   .text:000000000000075c MOVE2
       stm32eforth.s:1621   .inflash.dictinary:0000000000000578 LF_FILL
       stm32eforth.s:1621   .inflash.dictinary:000000000000057c _FILL
       stm32eforth.s:1640   .inflash.dictinary:0000000000000584 CA_FILL
       stm32eforth.s:1640   .text:0000000000000764 FILL
       stm32eforth.s:1643   .text:000000000000076c FILL0
       stm32eforth.s:1646   .text:0000000000000770 FILL1
       stm32eforth.s:1652   .text:000000000000077e FILL2
       stm32eforth.s:1640   .inflash.dictinary:0000000000000588 LF_PACKS
       stm32eforth.s:1640   .inflash.dictinary:000000000000058c _PACKS
       stm32eforth.s:1658   .inflash.dictinary:0000000000000594 CA_PACKS
       stm32eforth.s:1658   .text:0000000000000784 PACKS
       stm32eforth.s:1666   .text:00000000000007a4 $d
       stm32eforth.s:1667   .text:00000000000007a8 $t
       stm32eforth.s:1668   .text:00000000000007b0 $d
       stm32eforth.s:1669   .text:00000000000007b4 $t
       stm32eforth.s:1658   .inflash.dictinary:0000000000000598 LF_DIGIT
       stm32eforth.s:1658   .inflash.dictinary:000000000000059c _DIGIT
       stm32eforth.s:1685   .inflash.dictinary:00000000000005a4 CA_DIGIT
       stm32eforth.s:1685   .text:00000000000007dc DIGIT
       stm32eforth.s:1687   .text:00000000000007e4 $d
       stm32eforth.s:1688   .text:00000000000007e8 $t
       stm32eforth.s:1685   .inflash.dictinary:00000000000005a8 LF_EXTRC
       stm32eforth.s:1685   .inflash.dictinary:00000000000005ac _EXTRC
       stm32eforth.s:1697   .inflash.dictinary:00000000000005b4 CA_EXTRC
       stm32eforth.s:1697   .text:0000000000000800 EXTRC
       stm32eforth.s:1699   .text:0000000000000808 $d
       stm32eforth.s:1700   .text:000000000000080c $t
       stm32eforth.s:1697   .inflash.dictinary:00000000000005b8 LF_BDIGS
       stm32eforth.s:1697   .inflash.dictinary:00000000000005bc _BDIGS
       stm32eforth.s:1708   .inflash.dictinary:00000000000005c0 CA_BDIGS
       stm32eforth.s:1708   .text:0000000000000820 BDIGS
       stm32eforth.s:1708   .inflash.dictinary:00000000000005c4 LF_HOLD
       stm32eforth.s:1708   .inflash.dictinary:00000000000005c8 _HOLD
       stm32eforth.s:1717   .inflash.dictinary:00000000000005d0 CA_HOLD
       stm32eforth.s:1717   .text:0000000000000834 HOLD
       stm32eforth.s:1717   .inflash.dictinary:00000000000005d4 LF_DIG
       stm32eforth.s:1717   .inflash.dictinary:00000000000005d8 _DIG
       stm32eforth.s:1730   .inflash.dictinary:00000000000005dc CA_DIG
       stm32eforth.s:1730   .text:0000000000000858 DIG
       stm32eforth.s:1730   .inflash.dictinary:00000000000005e0 LF_DIGS
       stm32eforth.s:1730   .inflash.dictinary:00000000000005e4 _DIGS
       stm32eforth.s:1740   .inflash.dictinary:00000000000005e8 CA_DIGS
       stm32eforth.s:1740   .text:0000000000000870 DIGS
       stm32eforth.s:1742   .text:0000000000000874 DIGS1
       stm32eforth.s:1746   .text:0000000000000880 $d
       stm32eforth.s:1748   .text:0000000000000886 DIGS2
       stm32eforth.s:1747   .text:0000000000000884 $t
       stm32eforth.s:1740   .inflash.dictinary:00000000000005ec LF_SIGN
       stm32eforth.s:1740   .inflash.dictinary:00000000000005f0 _SIGN
       stm32eforth.s:1753   .inflash.dictinary:00000000000005f8 CA_SIGN
       stm32eforth.s:1753   .text:000000000000088c SIGN
       stm32eforth.s:1757   .text:0000000000000898 $d
       stm32eforth.s:1760   .text:00000000000008a8 SIGN1
ARM GAS  ps2_kbd.s 			page 107


       stm32eforth.s:1758   .text:000000000000089c $t
       stm32eforth.s:1758   .text:00000000000008a0 $d
       stm32eforth.s:1759   .text:00000000000008a4 $t
       stm32eforth.s:1753   .inflash.dictinary:00000000000005fc LF_EDIGS
       stm32eforth.s:1753   .inflash.dictinary:0000000000000600 _EDIGS
       stm32eforth.s:1765   .inflash.dictinary:0000000000000604 CA_EDIGS
       stm32eforth.s:1765   .text:00000000000008ac EDIGS
       stm32eforth.s:1782   .text:00000000000008cc STRR
       stm32eforth.s:1765   .inflash.dictinary:0000000000000608 LF_HEX
       stm32eforth.s:1765   .inflash.dictinary:000000000000060c _HEX
       stm32eforth.s:1796   .inflash.dictinary:0000000000000610 CA_HEX
       stm32eforth.s:1796   .text:00000000000008f4 HEX
       stm32eforth.s:1798   .text:00000000000008fc $d
       stm32eforth.s:1799   .text:0000000000000900 $t
       stm32eforth.s:1796   .inflash.dictinary:0000000000000614 LF_DECIM
       stm32eforth.s:1796   .inflash.dictinary:0000000000000618 _DECIM
       stm32eforth.s:1805   .inflash.dictinary:0000000000000620 CA_DECIM
       stm32eforth.s:1805   .text:000000000000090c DECIM
       stm32eforth.s:1807   .text:0000000000000914 $d
       stm32eforth.s:1808   .text:0000000000000918 $t
       stm32eforth.s:1805   .inflash.dictinary:0000000000000624 LF_DIGTQ
       stm32eforth.s:1805   .inflash.dictinary:0000000000000628 _DIGTQ
       stm32eforth.s:1817   .inflash.dictinary:0000000000000630 CA_DIGTQ
       stm32eforth.s:1817   .text:0000000000000924 DIGTQ
       stm32eforth.s:1820   .text:0000000000000930 $d
       stm32eforth.s:1821   .text:0000000000000934 $t
       stm32eforth.s:1822   .text:000000000000093c $d
       stm32eforth.s:1823   .text:0000000000000940 $t
       stm32eforth.s:1826   .text:000000000000094c $d
       stm32eforth.s:1833   .text:0000000000000970 DGTQ1
       stm32eforth.s:1827   .text:0000000000000950 $t
       stm32eforth.s:1827   .text:0000000000000954 $d
       stm32eforth.s:1828   .text:0000000000000958 $t
       stm32eforth.s:1830   .text:0000000000000964 $d
       stm32eforth.s:1831   .text:0000000000000968 $t
       stm32eforth.s:1817   .inflash.dictinary:0000000000000634 LF_NUMBQ
       stm32eforth.s:1817   .inflash.dictinary:0000000000000638 _NUMBQ
       stm32eforth.s:1841   .inflash.dictinary:0000000000000640 CA_NUMBQ
       stm32eforth.s:1841   .text:0000000000000980 NUMBQ
       stm32eforth.s:1846   .text:0000000000000994 $d
       stm32eforth.s:1847   .text:0000000000000998 $t
       stm32eforth.s:1851   .text:00000000000009ac $d
       stm32eforth.s:1852   .text:00000000000009b0 $t
       stm32eforth.s:1854   .text:00000000000009b8 $d
       stm32eforth.s:1860   .text:00000000000009d0 NUMQ1
       stm32eforth.s:1855   .text:00000000000009bc $t
       stm32eforth.s:1863   .text:00000000000009dc $d
       stm32eforth.s:1864   .text:00000000000009e0 $t
       stm32eforth.s:1874   .text:0000000000000a08 $d
       stm32eforth.s:1912   .text:0000000000000a94 NUMQ6
       stm32eforth.s:1875   .text:0000000000000a0c $t
       stm32eforth.s:1877   .text:0000000000000a14 NUMQ2
       stm32eforth.s:1885   .text:0000000000000a30 $d
       stm32eforth.s:1904   .text:0000000000000a78 NUMQ4
       stm32eforth.s:1886   .text:0000000000000a34 $t
       stm32eforth.s:1894   .text:0000000000000a54 $d
       stm32eforth.s:1895   .text:0000000000000a58 $t
ARM GAS  ps2_kbd.s 			page 108


       stm32eforth.s:1899   .text:0000000000000a68 $d
       stm32eforth.s:1901   .text:0000000000000a70 NUMQ3
       stm32eforth.s:1900   .text:0000000000000a6c $t
       stm32eforth.s:1910   .text:0000000000000a90 NUMQ5
       stm32eforth.s:1909   .text:0000000000000a8c $d
       stm32eforth.s:1911   .text:0000000000000a90 $t
       stm32eforth.s:1841   .inflash.dictinary:0000000000000644 LF_KEY
       stm32eforth.s:1841   .inflash.dictinary:0000000000000648 _KEY
       stm32eforth.s:1925   .inflash.dictinary:000000000000064c CA_KEY
       stm32eforth.s:1925   .text:0000000000000aac KEY
       stm32eforth.s:1927   .text:0000000000000ab0 KEY1
       stm32eforth.s:1930   .text:0000000000000ab8 $d
       stm32eforth.s:1931   .text:0000000000000abc $t
       stm32eforth.s:1925   .inflash.dictinary:0000000000000650 LF_SPACE
       stm32eforth.s:1925   .inflash.dictinary:0000000000000654 _SPACE
       stm32eforth.s:1935   .inflash.dictinary:000000000000065c CA_SPACE
       stm32eforth.s:1935   .text:0000000000000ac0 SPACE
       stm32eforth.s:1935   .inflash.dictinary:0000000000000660 LF_SPACS
       stm32eforth.s:1935   .inflash.dictinary:0000000000000664 _SPACS
       stm32eforth.s:1943   .inflash.dictinary:000000000000066c CA_SPACS
       stm32eforth.s:1943   .text:0000000000000ad0 SPACS
       stm32eforth.s:1945   .text:0000000000000ad8 $d
       stm32eforth.s:1946   .text:0000000000000adc $t
       stm32eforth.s:1951   .text:0000000000000aec CHAR2
       stm32eforth.s:1949   .text:0000000000000ae8 CHAR1
       stm32eforth.s:1953   .text:0000000000000af0 $d
       stm32eforth.s:1954   .text:0000000000000af4 $t
       stm32eforth.s:1943   .inflash.dictinary:0000000000000670 LF_TYPEE
       stm32eforth.s:1943   .inflash.dictinary:0000000000000674 _TYPEE
       stm32eforth.s:1958   .inflash.dictinary:000000000000067c CA_TYPEE
       stm32eforth.s:1958   .text:0000000000000af8 TYPEE
       stm32eforth.s:1966   .text:0000000000000b10 TYPE2
       stm32eforth.s:1962   .text:0000000000000b04 TYPE1
       stm32eforth.s:1968   .text:0000000000000b14 $d
       stm32eforth.s:1969   .text:0000000000000b18 $t
       stm32eforth.s:1958   .inflash.dictinary:0000000000000680 LF_CR
       stm32eforth.s:1958   .inflash.dictinary:0000000000000684 _CR
       stm32eforth.s:1974   .inflash.dictinary:0000000000000688 CA_CR
       stm32eforth.s:1974   .text:0000000000000b20 CR
       stm32eforth.s:1976   .text:0000000000000b28 $d
       stm32eforth.s:1977   .text:0000000000000b2c $t
       stm32eforth.s:1978   .text:0000000000000b34 $d
       stm32eforth.s:1979   .text:0000000000000b38 $t
       stm32eforth.s:1990   .text:0000000000000b40 DOSTR
       stm32eforth.s:2013   .text:0000000000000b74 STRQP
       stm32eforth.s:2025   .text:0000000000000b80 DOTST
       stm32eforth.s:2038   .text:0000000000000b90 DOTQP
       stm32eforth.s:1974   .inflash.dictinary:000000000000068c LF_DOTR
       stm32eforth.s:1974   .inflash.dictinary:0000000000000690 _DOTR
       stm32eforth.s:2046   .inflash.dictinary:0000000000000694 CA_DOTR
       stm32eforth.s:2046   .text:0000000000000ba0 DOTR
       stm32eforth.s:2046   .inflash.dictinary:0000000000000698 LF_UDOTR
       stm32eforth.s:2046   .inflash.dictinary:000000000000069c _UDOTR
       stm32eforth.s:2059   .inflash.dictinary:00000000000006a0 CA_UDOTR
       stm32eforth.s:2059   .text:0000000000000bc4 UDOTR
       stm32eforth.s:2059   .inflash.dictinary:00000000000006a4 LF_UDOT
       stm32eforth.s:2059   .inflash.dictinary:00000000000006a8 _UDOT
ARM GAS  ps2_kbd.s 			page 109


       stm32eforth.s:2074   .inflash.dictinary:00000000000006ac CA_UDOT
       stm32eforth.s:2074   .text:0000000000000bf0 UDOT
       stm32eforth.s:2074   .inflash.dictinary:00000000000006b0 LF_HDOT
       stm32eforth.s:2074   .inflash.dictinary:00000000000006b4 _HDOT
       stm32eforth.s:2085   .inflash.dictinary:00000000000006b8 CA_HDOT
       stm32eforth.s:2085   .text:0000000000000c0c HDOT
       stm32eforth.s:2085   .inflash.dictinary:00000000000006bc LF_DOT
       stm32eforth.s:2085   .inflash.dictinary:00000000000006c0 _DOT
       stm32eforth.s:2100   .inflash.dictinary:00000000000006c4 CA_DOT
       stm32eforth.s:2100   .text:0000000000000c34 DOT
       stm32eforth.s:2104   .text:0000000000000c44 $d
       stm32eforth.s:2105   .text:0000000000000c48 $t
       stm32eforth.s:2107   .text:0000000000000c50 $d
       stm32eforth.s:2110   .text:0000000000000c5c DOT1
       stm32eforth.s:2108   .text:0000000000000c54 $t
       stm32eforth.s:2100   .inflash.dictinary:00000000000006c8 LF_QUEST
       stm32eforth.s:2100   .inflash.dictinary:00000000000006cc _QUEST
       stm32eforth.s:2118   .inflash.dictinary:00000000000006d0 CA_QUEST
       stm32eforth.s:2118   .text:0000000000000c6c QUEST
       stm32eforth.s:2134   .text:0000000000000c7c PARS
       stm32eforth.s:2142   .text:0000000000000c98 $d
       stm32eforth.s:2209   .text:0000000000000d8a PARS8
       stm32eforth.s:2143   .text:0000000000000c9c $t
       stm32eforth.s:2149   .text:0000000000000cb4 $d
       stm32eforth.s:2170   .text:0000000000000d04 PARS3
       stm32eforth.s:2150   .text:0000000000000cb8 $t
       stm32eforth.s:2151   .text:0000000000000cbc PARS1
       stm32eforth.s:2159   .text:0000000000000cd8 $d
       stm32eforth.s:2168   .text:0000000000000d00 PARS2
       stm32eforth.s:2160   .text:0000000000000cdc $t
       stm32eforth.s:2162   .text:0000000000000ce4 $d
       stm32eforth.s:2163   .text:0000000000000ce8 $t
       stm32eforth.s:2165   .text:0000000000000cf4 $d
       stm32eforth.s:2166   .text:0000000000000cf8 $t
       stm32eforth.s:2174   .text:0000000000000d10 PARS4
       stm32eforth.s:2185   .text:0000000000000d38 $d
       stm32eforth.s:2187   .text:0000000000000d40 PARS5
       stm32eforth.s:2186   .text:0000000000000d3c $t
       stm32eforth.s:2189   .text:0000000000000d44 $d
       stm32eforth.s:2196   .text:0000000000000d5e PARS6
       stm32eforth.s:2190   .text:0000000000000d48 $t
       stm32eforth.s:2192   .text:0000000000000d50 $d
       stm32eforth.s:2193   .text:0000000000000d54 $t
       stm32eforth.s:2202   .text:0000000000000d72 PARS7
       stm32eforth.s:2118   .inflash.dictinary:00000000000006d4 LF_PARSE
       stm32eforth.s:2118   .inflash.dictinary:00000000000006d8 _PARSE
       stm32eforth.s:2217   .inflash.dictinary:00000000000006e0 CA_PARSE
       stm32eforth.s:2217   .text:0000000000000d9c PARSE
       stm32eforth.s:2217   .inflash.dictinary:00000000000006e4 LF_DOTPR
       stm32eforth.s:2217   .inflash.dictinary:00000000000006e8 _DOTPR
       stm32eforth.s:2237   .inflash.dictinary:00000000000006ec CA_DOTPR
       stm32eforth.s:2237   .text:0000000000000ddc DOTPR
       stm32eforth.s:2239   .text:0000000000000de4 $d
       stm32eforth.s:2240   .text:0000000000000de8 $t
       stm32eforth.s:2237   .inflash.dictinary:00000000000006f0 LF_PAREN
       stm32eforth.s:2237   .inflash.dictinary:00000000000006f4 _PAREN
       stm32eforth.s:2246   .inflash.dictinary:00000000000006f8 CA_PAREN
ARM GAS  ps2_kbd.s 			page 110


       stm32eforth.s:2246   .text:0000000000000df4 PAREN
       stm32eforth.s:2248   .text:0000000000000dfc $d
       stm32eforth.s:2249   .text:0000000000000e00 $t
       stm32eforth.s:2246   .inflash.dictinary:00000000000006fc LF_BKSLA
       stm32eforth.s:2246   .inflash.dictinary:0000000000000700 _BKSLA
       stm32eforth.s:2255   .inflash.dictinary:0000000000000704 CA_BKSLA
       stm32eforth.s:2255   .text:0000000000000e0c BKSLA
       stm32eforth.s:2255   .inflash.dictinary:0000000000000708 LF_CAHR
       stm32eforth.s:2255   .inflash.dictinary:000000000000070c _CAHR
       stm32eforth.s:2265   .inflash.dictinary:0000000000000714 CA_CAHR
       stm32eforth.s:2265   .text:0000000000000e24 CAHR
       stm32eforth.s:2265   .inflash.dictinary:0000000000000718 LF_WORDD
       stm32eforth.s:2265   .inflash.dictinary:000000000000071c _WORDD
       stm32eforth.s:2275   .inflash.dictinary:0000000000000724 CA_WORDD
       stm32eforth.s:2275   .text:0000000000000e3c WORDD
       stm32eforth.s:2275   .inflash.dictinary:0000000000000728 LF_TOKEN
       stm32eforth.s:2275   .inflash.dictinary:000000000000072c _TOKEN
       stm32eforth.s:2285   .inflash.dictinary:0000000000000734 CA_TOKEN
       stm32eforth.s:2285   .text:0000000000000e54 TOKEN
       stm32eforth.s:2285   .inflash.dictinary:0000000000000738 LF_TOCFA
       stm32eforth.s:2285   .inflash.dictinary:000000000000073c _TOCFA
       stm32eforth.s:2296   .inflash.dictinary:0000000000000744 CA_TOCFA
       stm32eforth.s:2296   .text:0000000000000e64 TOCFA
       stm32eforth.s:2299   .text:0000000000000e70 $d
       stm32eforth.s:2300   .text:0000000000000e74 $t
       stm32eforth.s:2296   .inflash.dictinary:0000000000000748 LF_NAMET
       stm32eforth.s:2296   .inflash.dictinary:000000000000074c _NAMET
       stm32eforth.s:2307   .inflash.dictinary:0000000000000754 CA_NAMET
       stm32eforth.s:2307   .text:0000000000000e84 NAMET
       stm32eforth.s:2307   .inflash.dictinary:0000000000000758 LF_SAMEQ
       stm32eforth.s:2307   .inflash.dictinary:000000000000075c _SAMEQ
       stm32eforth.s:2321   .inflash.dictinary:0000000000000764 CA_SAMEQ
       stm32eforth.s:2321   .text:0000000000000e94 SAMEQ
       stm32eforth.s:2341   .text:0000000000000edc SAME2
       stm32eforth.s:2325   .text:0000000000000ea0 SAME1
       stm32eforth.s:2337   .text:0000000000000ecc $d
       stm32eforth.s:2338   .text:0000000000000ed0 $t
       stm32eforth.s:2343   .text:0000000000000ee0 $d
       stm32eforth.s:2344   .text:0000000000000ee4 $t
       stm32eforth.s:2344   .text:0000000000000ee8 $d
       stm32eforth.s:2345   .text:0000000000000eec $t
       stm32eforth.s:2357   .text:0000000000000ef0 FIND
       stm32eforth.s:2366   .text:0000000000000f10 FIND1
       stm32eforth.s:2369   .text:0000000000000f18 $d
       stm32eforth.s:2388   .text:0000000000000f60 FIND6
       stm32eforth.s:2370   .text:0000000000000f1c $t
       stm32eforth.s:2372   .text:0000000000000f28 $d
       stm32eforth.s:2373   .text:0000000000000f2c $t
       stm32eforth.s:2377   .text:0000000000000f3c $d
       stm32eforth.s:2381   .text:0000000000000f4c FIND2
       stm32eforth.s:2378   .text:0000000000000f40 $t
       stm32eforth.s:2386   .text:0000000000000f5c FIND3
       stm32eforth.s:2395   .text:0000000000000f78 FIND4
       stm32eforth.s:2397   .text:0000000000000f7c $d
       stm32eforth.s:2402   .text:0000000000000f90 FIND5
       stm32eforth.s:2398   .text:0000000000000f80 $t
       stm32eforth.s:2321   .inflash.dictinary:0000000000000768 LF_NAMEQ
ARM GAS  ps2_kbd.s 			page 111


       stm32eforth.s:2321   .inflash.dictinary:000000000000076c _NAMEQ
       stm32eforth.s:2415   .inflash.dictinary:0000000000000774 CA_NAMEQ
       stm32eforth.s:2415   .text:0000000000000fb4 NAMEQ
       stm32eforth.s:2432   .text:0000000000000fc8 BKSP
       stm32eforth.s:2441   .text:0000000000000fe8 $d
       stm32eforth.s:2452   .text:0000000000001010 BACK1
       stm32eforth.s:2442   .text:0000000000000fec $t
       stm32eforth.s:2442   .text:0000000000000ff0 $d
       stm32eforth.s:2443   .text:0000000000000ff4 $t
       stm32eforth.s:2449   .text:0000000000001008 $d
       stm32eforth.s:2450   .text:000000000000100c $t
       stm32eforth.s:2462   .text:0000000000001014 TAP
       stm32eforth.s:2479   .text:0000000000001030 KTAP
       stm32eforth.s:2480   .text:0000000000001030 TTAP
       stm32eforth.s:2483   .text:000000000000103c $d
       stm32eforth.s:2484   .text:0000000000001040 $t
       stm32eforth.s:2486   .text:0000000000001048 $d
       stm32eforth.s:2498   .text:0000000000001078 KTAP2
       stm32eforth.s:2487   .text:000000000000104c $t
       stm32eforth.s:2487   .text:0000000000001050 $d
       stm32eforth.s:2488   .text:0000000000001054 $t
       stm32eforth.s:2490   .text:000000000000105c $d
       stm32eforth.s:2495   .text:0000000000001070 KTAP1
       stm32eforth.s:2491   .text:0000000000001060 $t
       stm32eforth.s:2494   .text:000000000000106c $d
       stm32eforth.s:2496   .text:0000000000001070 $t
       stm32eforth.s:2415   .inflash.dictinary:0000000000000778 LF_ACCEP
       stm32eforth.s:2415   .inflash.dictinary:000000000000077c _ACCEP
       stm32eforth.s:2507   .inflash.dictinary:0000000000000784 CA_ACCEP
       stm32eforth.s:2507   .text:000000000000108c ACCEP
       stm32eforth.s:2512   .text:000000000000109c ACCP1
       stm32eforth.s:2516   .text:00000000000010a8 $d
       stm32eforth.s:2531   .text:00000000000010d8 ACCP4
       stm32eforth.s:2517   .text:00000000000010ac $t
       stm32eforth.s:2520   .text:00000000000010bc $d
       stm32eforth.s:2521   .text:00000000000010c0 $t
       stm32eforth.s:2523   .text:00000000000010c8 $d
       stm32eforth.s:2526   .text:00000000000010d2 ACCP2
       stm32eforth.s:2524   .text:00000000000010cc $t
       stm32eforth.s:2529   .text:00000000000010d6 ACCP3
       stm32eforth.s:2507   .inflash.dictinary:0000000000000788 LF_QUERY
       stm32eforth.s:2507   .inflash.dictinary:000000000000078c _QUERY
       stm32eforth.s:2539   .inflash.dictinary:0000000000000794 CA_QUERY
       stm32eforth.s:2539   .text:00000000000010e8 QUERY
       stm32eforth.s:2542   .text:00000000000010f4 $d
       stm32eforth.s:2543   .text:00000000000010f8 $t
       stm32eforth.s:2547   .text:000000000000110c $d
       stm32eforth.s:2548   .text:0000000000001110 $t
       stm32eforth.s:2539   .inflash.dictinary:0000000000000798 LF_ABORT
       stm32eforth.s:2539   .inflash.dictinary:000000000000079c _ABORT
       stm32eforth.s:2557   .inflash.dictinary:00000000000007a4 CA_ABORT
       stm32eforth.s:2557   .text:000000000000111c ABORT
       stm32eforth.s:2560   .text:0000000000001124 ABORT1
       stm32eforth.s:2563   .text:0000000000001130 $d
       stm32eforth.s:2564   .text:0000000000001134 $t
       stm32eforth.s:2674   .text:0000000000001254 PRESE
       stm32eforth.s:2682   .text:0000000000001268 QUIT
ARM GAS  ps2_kbd.s 			page 112


       stm32eforth.s:2576   .text:0000000000001144 ABORQ
       stm32eforth.s:2581   .text:0000000000001154 $d
       stm32eforth.s:2582   .text:0000000000001158 $t
       stm32eforth.s:2557   .inflash.dictinary:00000000000007a8 LF_INTER
       stm32eforth.s:2557   .inflash.dictinary:00000000000007ac _INTER
       stm32eforth.s:2592   .inflash.dictinary:00000000000007b8 CA_INTER
       stm32eforth.s:2597   .text:0000000000001174 $d
       stm32eforth.s:2607   .text:00000000000011a4 INTE1
       stm32eforth.s:2598   .text:0000000000001178 $t
       stm32eforth.s:2599   .text:0000000000001180 $d
       stm32eforth.s:2600   .text:0000000000001184 $t
       stm32eforth.s:2602   .text:000000000000118c $d
       stm32eforth.s:2604   .text:000000000000119a $t
       stm32eforth.s:2610   .text:00000000000011ac $d
       stm32eforth.s:2612   .text:00000000000011b4 INTE2
       stm32eforth.s:2611   .text:00000000000011b0 $t
       stm32eforth.s:2592   .inflash.dictinary:00000000000007bc LF_LBRAC
       stm32eforth.s:2592   .inflash.dictinary:00000000000007c0 _LBRAC
       stm32eforth.s:2617   .inflash.dictinary:00000000000007c4 CA_LBRAC
       stm32eforth.s:2617   .text:00000000000011b8 LBRAC
       stm32eforth.s:2619   .text:00000000000011c0 $d
       stm32eforth.s:2620   .text:00000000000011c4 $t
       stm32eforth.s:2617   .inflash.dictinary:00000000000007c8 LF_DOTOK
       stm32eforth.s:2617   .inflash.dictinary:00000000000007cc _DOTOK
       stm32eforth.s:2626   .inflash.dictinary:00000000000007d0 CA_DOTOK
       stm32eforth.s:2626   .text:00000000000011d0 DOTOK
       stm32eforth.s:2628   .text:00000000000011d8 $d
       stm32eforth.s:2629   .text:00000000000011dc $t
       stm32eforth.s:2633   .text:00000000000011ec $d
       stm32eforth.s:2637   .text:00000000000011f8 DOTO1
       stm32eforth.s:2634   .text:00000000000011f0 $t
       stm32eforth.s:2635   .text:00000000000011f4 $d
       stm32eforth.s:2638   .text:00000000000011f8 $t
       stm32eforth.s:2626   .inflash.dictinary:00000000000007d4 LF_QSTAC
       stm32eforth.s:2626   .inflash.dictinary:00000000000007d8 _QSTAC
       stm32eforth.s:2643   .inflash.dictinary:00000000000007e0 CA_QSTAC
       stm32eforth.s:2643   .text:0000000000001200 QSTAC
       stm32eforth.s:2648   .text:0000000000001210 $d
       stm32eforth.s:2643   .inflash.dictinary:00000000000007e4 LF_EVAL
       stm32eforth.s:2643   .inflash.dictinary:00000000000007e8 _EVAL
       stm32eforth.s:2655   .inflash.dictinary:00000000000007f0 CA_EVAL
       stm32eforth.s:2655   .text:0000000000001220 EVAL
       stm32eforth.s:2657   .text:0000000000001224 EVAL1
       stm32eforth.s:2662   .text:0000000000001234 $d
       stm32eforth.s:2667   .text:0000000000001248 EVAL2
       stm32eforth.s:2663   .text:0000000000001238 $t
       stm32eforth.s:2655   .inflash.dictinary:00000000000007f4 LF_PRESE
       stm32eforth.s:2655   .inflash.dictinary:00000000000007f8 _PRESE
       stm32eforth.s:2674   .inflash.dictinary:0000000000000800 CA_PRESE
       stm32eforth.s:2674   .inflash.dictinary:0000000000000804 LF_QUIT
       stm32eforth.s:2674   .inflash.dictinary:0000000000000808 _QUIT
       stm32eforth.s:2682   .inflash.dictinary:0000000000000810 CA_QUIT
       stm32eforth.s:2685   .text:0000000000001274 QUIT1
       stm32eforth.s:2687   .text:0000000000001278 QUIT2
       stm32eforth.s:2691   .text:0000000000001284 $d
       stm32eforth.s:2682   .inflash.dictinary:0000000000000814 LF_UNLOCK
       stm32eforth.s:2682   .inflash.dictinary:0000000000000818 _UNLOCK
ARM GAS  ps2_kbd.s 			page 113


       stm32eforth.s:2699   .inflash.dictinary:0000000000000820 CA_UNLOCK
       stm32eforth.s:2699   .text:0000000000001288 UNLOCK
       stm32eforth.s:2699   .text:0000000000001288 $t
       stm32eforth.s:2702   .text:0000000000001290 $d
       stm32eforth.s:2715   .text:00000000000012b0 LOCK
       stm32eforth.s:2834   .text:000000000000140c flash_regs
       stm32eforth.s:2703   .text:0000000000001294 $t
       stm32eforth.s:2721   .text:00000000000012bc WAIT_BSY
       stm32eforth.s:2723   .text:00000000000012be WAIT1
       stm32eforth.s:2730   .text:00000000000012c8 FLASH_ERR_CHECK
       stm32eforth.s:2735   .text:00000000000012d6 $d
       stm32eforth.s:2737   .text:00000000000012f6 $t
       stm32eforth.s:2699   .inflash.dictinary:0000000000000824 LF_ESECTOR
       stm32eforth.s:2699   .inflash.dictinary:0000000000000828 _ESECTOR
       stm32eforth.s:2743   .inflash.dictinary:0000000000000838 CA_ESECTOR
       stm32eforth.s:2743   .text:00000000000012fc ESECTOR
       stm32eforth.s:2746   .text:0000000000001308 $d
       stm32eforth.s:2747   .text:000000000000130c $t
       stm32eforth.s:2743   .inflash.dictinary:000000000000083c LF_ISTOR
       stm32eforth.s:2743   .inflash.dictinary:0000000000000840 _ISTOR
       stm32eforth.s:2763   .inflash.dictinary:0000000000000844 CA_ISTOR
       stm32eforth.s:2763   .text:0000000000001334 ISTOR
       stm32eforth.s:2766   .text:0000000000001340 $d
       stm32eforth.s:2767   .text:0000000000001344 $t
       stm32eforth.s:2776   .text:0000000000001364 $d
       stm32eforth.s:2777   .text:0000000000001368 $t
       stm32eforth.s:2763   .inflash.dictinary:0000000000000848 LF_FLSH_WR
       stm32eforth.s:2763   .inflash.dictinary:000000000000084c _FLSH_WR
       stm32eforth.s:2789   .inflash.dictinary:0000000000000854 CA_FLSH_WR
       stm32eforth.s:2789   .text:0000000000001374 FLSH_WR
       stm32eforth.s:2793   .text:0000000000001380 $d
       stm32eforth.s:2795   .text:0000000000001384 $t
       stm32eforth.s:2804   .text:00000000000013a8 $d
       stm32eforth.s:2805   .text:00000000000013ac $t
       stm32eforth.s:2789   .inflash.dictinary:0000000000000858 LF_FORGET
       stm32eforth.s:2789   .inflash.dictinary:000000000000085c _FORGET
       stm32eforth.s:2813   .inflash.dictinary:0000000000000864 CA_FORGET
       stm32eforth.s:2813   .text:00000000000013bc FORGET
       stm32eforth.s:2818   .text:00000000000013d0 $d
       stm32eforth.s:2819   .text:00000000000013d4 $t
       stm32eforth.s:2822   .text:00000000000013e0 $d
       stm32eforth.s:2823   .text:00000000000013e4 $t
       stm32eforth.s:3174   .text:000000000000174c OVERT
       stm32eforth.s:2835   .text:000000000000140c $d
       stm32eforth.s:2813   .inflash.dictinary:0000000000000868 LF_TICK
       stm32eforth.s:2813   .inflash.dictinary:000000000000086c _TICK
       stm32eforth.s:2847   .inflash.dictinary:0000000000000870 CA_TICK
       stm32eforth.s:2847   .text:0000000000001420 TICK
       stm32eforth.s:2847   .text:0000000000001420 $t
       stm32eforth.s:2852   .text:0000000000001430 $d
       stm32eforth.s:2854   .text:0000000000001438 TICK1
       stm32eforth.s:2853   .text:0000000000001434 $t
       stm32eforth.s:2847   .inflash.dictinary:0000000000000874 LF_ALLOT
       stm32eforth.s:2847   .inflash.dictinary:0000000000000878 _ALLOT
       stm32eforth.s:2858   .inflash.dictinary:0000000000000880 CA_ALLOT
       stm32eforth.s:2858   .text:000000000000143c ALLOT
       stm32eforth.s:2858   .inflash.dictinary:0000000000000884 LF_COMMA
ARM GAS  ps2_kbd.s 			page 114


       stm32eforth.s:2858   .inflash.dictinary:0000000000000888 _COMMA
       stm32eforth.s:2866   .inflash.dictinary:000000000000088c CA_COMMA
       stm32eforth.s:2866   .text:000000000000144c COMMA
       stm32eforth.s:2866   .inflash.dictinary:0000000000000890 LF_BCOMP
       stm32eforth.s:2866   .inflash.dictinary:0000000000000894 _BCOMP
       stm32eforth.s:2878   .inflash.dictinary:00000000000008a0 CA_BCOMP
       stm32eforth.s:2878   .text:000000000000146c BCOMP
       stm32eforth.s:2878   .inflash.dictinary:00000000000008a4 LF_COMPI
       stm32eforth.s:2878   .inflash.dictinary:00000000000008a8 _COMPI
       stm32eforth.s:2886   .inflash.dictinary:00000000000008b0 CA_COMPI
       stm32eforth.s:2886   .text:000000000000147c COMPI
       stm32eforth.s:3229   .text:00000000000017da CALLC
       stm32eforth.s:2886   .inflash.dictinary:00000000000008b4 LF_LITER
       stm32eforth.s:2886   .inflash.dictinary:00000000000008b8 _LITER
       stm32eforth.s:2900   .inflash.dictinary:00000000000008c0 CA_LITER
       stm32eforth.s:2900   .text:00000000000014a4 LITER
       stm32eforth.s:2901   .text:00000000000014a4 $d
       stm32eforth.s:2902   .text:00000000000014a8 $t
       stm32eforth.s:2904   .text:00000000000014b0 $d
       stm32eforth.s:2905   .text:00000000000014b4 $t
       stm32eforth.s:2915   .text:00000000000014bc STRCQ
       stm32eforth.s:2917   .text:00000000000014c4 $d
       stm32eforth.s:2918   .text:00000000000014c8 $t
       stm32eforth.s:2920   .text:00000000000014d4 $d
       stm32eforth.s:2921   .text:00000000000014d8 $t
       stm32eforth.s:2900   .inflash.dictinary:00000000000008c4 LF_FOR
       stm32eforth.s:2900   .inflash.dictinary:00000000000008c8 _FOR
       stm32eforth.s:2934   .inflash.dictinary:00000000000008cc CA_FOR
       stm32eforth.s:2934   .text:00000000000014f4 FOR
       stm32eforth.s:2937   .text:00000000000014fc $d
       stm32eforth.s:2938   .text:0000000000001500 $t
       stm32eforth.s:2934   .inflash.dictinary:00000000000008d0 LF_BEGIN
       stm32eforth.s:2934   .inflash.dictinary:00000000000008d4 _BEGIN
       stm32eforth.s:2943   .inflash.dictinary:00000000000008dc CA_BEGIN
       stm32eforth.s:2943   .text:0000000000001508 BEGIN
       stm32eforth.s:2943   .inflash.dictinary:00000000000008e0 LF_NEXT
       stm32eforth.s:2943   .inflash.dictinary:00000000000008e4 _NEXT
       stm32eforth.s:2951   .inflash.dictinary:00000000000008ec CA_NEXT
       stm32eforth.s:2951   .text:0000000000001514 NEXT
       stm32eforth.s:2954   .text:000000000000151c $d
       stm32eforth.s:2955   .text:0000000000001520 $t
       stm32eforth.s:2951   .inflash.dictinary:00000000000008f0 LF_UNTIL
       stm32eforth.s:2951   .inflash.dictinary:00000000000008f4 _UNTIL
       stm32eforth.s:2960   .inflash.dictinary:00000000000008fc CA_UNTIL
       stm32eforth.s:2960   .text:0000000000001528 UNTIL
       stm32eforth.s:2963   .text:0000000000001530 $d
       stm32eforth.s:2964   .text:0000000000001534 $t
       stm32eforth.s:2960   .inflash.dictinary:0000000000000900 LF_AGAIN
       stm32eforth.s:2960   .inflash.dictinary:0000000000000904 _AGAIN
       stm32eforth.s:2969   .inflash.dictinary:000000000000090c CA_AGAIN
       stm32eforth.s:2969   .text:000000000000153c AGAIN
       stm32eforth.s:2972   .text:0000000000001544 $d
       stm32eforth.s:2973   .text:0000000000001548 $t
       stm32eforth.s:2969   .inflash.dictinary:0000000000000910 LF_IFF
       stm32eforth.s:2969   .inflash.dictinary:0000000000000914 _IFF
       stm32eforth.s:2978   .inflash.dictinary:0000000000000918 CA_IFF
       stm32eforth.s:2978   .text:0000000000001550 IFF
ARM GAS  ps2_kbd.s 			page 115


       stm32eforth.s:2981   .text:0000000000001558 $d
       stm32eforth.s:2982   .text:000000000000155c $t
       stm32eforth.s:2983   .text:0000000000001564 $d
       stm32eforth.s:2984   .text:0000000000001568 $t
       stm32eforth.s:2978   .inflash.dictinary:000000000000091c LF_AHEAD
       stm32eforth.s:2978   .inflash.dictinary:0000000000000920 _AHEAD
       stm32eforth.s:2990   .inflash.dictinary:0000000000000928 CA_AHEAD
       stm32eforth.s:2990   .text:0000000000001574 AHEAD
       stm32eforth.s:2993   .text:000000000000157c $d
       stm32eforth.s:2994   .text:0000000000001580 $t
       stm32eforth.s:2995   .text:0000000000001588 $d
       stm32eforth.s:2996   .text:000000000000158c $t
       stm32eforth.s:2990   .inflash.dictinary:000000000000092c LF_REPEA
       stm32eforth.s:2990   .inflash.dictinary:0000000000000930 _REPEA
       stm32eforth.s:3002   .inflash.dictinary:0000000000000938 CA_REPEA
       stm32eforth.s:3002   .text:0000000000001598 REPEA
       stm32eforth.s:3002   .inflash.dictinary:000000000000093c LF_THENN
       stm32eforth.s:3002   .inflash.dictinary:0000000000000940 _THENN
       stm32eforth.s:3012   .inflash.dictinary:0000000000000948 CA_THENN
       stm32eforth.s:3012   .text:00000000000015b0 THENN
       stm32eforth.s:3012   .inflash.dictinary:000000000000094c LF_AFT
       stm32eforth.s:3012   .inflash.dictinary:0000000000000950 _AFT
       stm32eforth.s:3021   .inflash.dictinary:0000000000000954 CA_AFT
       stm32eforth.s:3021   .text:00000000000015c4 AFT
       stm32eforth.s:3021   .inflash.dictinary:0000000000000958 LF_ELSEE
       stm32eforth.s:3021   .inflash.dictinary:000000000000095c _ELSEE
       stm32eforth.s:3031   .inflash.dictinary:0000000000000964 CA_ELSEE
       stm32eforth.s:3031   .text:00000000000015dc ELSEE
       stm32eforth.s:3031   .inflash.dictinary:0000000000000968 LF_WHILE
       stm32eforth.s:3031   .inflash.dictinary:000000000000096c _WHILE
       stm32eforth.s:3040   .inflash.dictinary:0000000000000974 CA_WHILE
       stm32eforth.s:3040   .text:00000000000015f0 WHILE
       stm32eforth.s:3040   .inflash.dictinary:0000000000000978 LF_ABRTQ
       stm32eforth.s:3040   .inflash.dictinary:000000000000097c _ABRTQ
       stm32eforth.s:3048   .inflash.dictinary:0000000000000984 CA_ABRTQ
       stm32eforth.s:3048   .text:0000000000001600 ABRTQ
       stm32eforth.s:3051   .text:0000000000001608 $d
       stm32eforth.s:3052   .text:000000000000160c $t
       stm32eforth.s:3048   .inflash.dictinary:0000000000000988 LF_STRQ
       stm32eforth.s:3048   .inflash.dictinary:000000000000098c _STRQ
       stm32eforth.s:3057   .inflash.dictinary:0000000000000990 CA_STRQ
       stm32eforth.s:3057   .text:0000000000001614 STRQ
       stm32eforth.s:3060   .text:000000000000161c $d
       stm32eforth.s:3061   .text:0000000000001620 $t
       stm32eforth.s:3057   .inflash.dictinary:0000000000000994 LF_DOTQ
       stm32eforth.s:3057   .inflash.dictinary:0000000000000998 _DOTQ
       stm32eforth.s:3066   .inflash.dictinary:000000000000099c CA_DOTQ
       stm32eforth.s:3066   .text:0000000000001628 DOTQ
       stm32eforth.s:3069   .text:0000000000001630 $d
       stm32eforth.s:3070   .text:0000000000001634 $t
       stm32eforth.s:3066   .inflash.dictinary:00000000000009a0 LF_UNIQU
       stm32eforth.s:3066   .inflash.dictinary:00000000000009a4 _UNIQU
       stm32eforth.s:3079   .inflash.dictinary:00000000000009ac CA_UNIQU
       stm32eforth.s:3079   .text:000000000000163c UNIQU
       stm32eforth.s:3084   .text:000000000000164c $d
       stm32eforth.s:3092   .text:0000000000001668 UNIQ1
       stm32eforth.s:3085   .text:0000000000001650 $t
ARM GAS  ps2_kbd.s 			page 116


       stm32eforth.s:3086   .text:0000000000001654 $d
       stm32eforth.s:3088   .text:000000000000165c $t
       stm32eforth.s:3103   .text:0000000000001670 SNAME
       stm32eforth.s:3108   .text:0000000000001680 $d
       stm32eforth.s:3122   .text:00000000000016b8 SNAM1
       stm32eforth.s:3109   .text:0000000000001684 $t
       stm32eforth.s:3124   .text:00000000000016bc $d
       stm32eforth.s:3126   .text:00000000000016c4 $t
       stm32eforth.s:3079   .inflash.dictinary:00000000000009b0 LF_SCOMP
       stm32eforth.s:3079   .inflash.dictinary:00000000000009b4 _SCOMP
       stm32eforth.s:3130   .inflash.dictinary:00000000000009c0 CA_SCOMP
       stm32eforth.s:3130   .text:00000000000016c8 SCOMP
       stm32eforth.s:3135   .text:00000000000016d8 $d
       stm32eforth.s:3146   .text:0000000000001704 SCOM2
       stm32eforth.s:3136   .text:00000000000016dc $t
       stm32eforth.s:3137   .text:00000000000016e4 $d
       stm32eforth.s:3138   .text:00000000000016e8 $t
       stm32eforth.s:3140   .text:00000000000016f0 $d
       stm32eforth.s:3143   .text:00000000000016fc SCOM1
       stm32eforth.s:3141   .text:00000000000016f4 $t
       stm32eforth.s:3149   .text:000000000000170c $d
       stm32eforth.s:3152   .text:0000000000001718 SCOM3
       stm32eforth.s:3150   .text:0000000000001710 $t
       stm32eforth.s:3159   .text:0000000000001720 COLON_ABORT
       stm32eforth.s:3130   .inflash.dictinary:00000000000009c4 LF_OVERT
       stm32eforth.s:3130   .inflash.dictinary:00000000000009c8 _OVERT
       stm32eforth.s:3174   .inflash.dictinary:00000000000009d0 CA_OVERT
       stm32eforth.s:3174   .inflash.dictinary:00000000000009d4 LF_SEMIS
       stm32eforth.s:3174   .inflash.dictinary:00000000000009d8 _SEMIS
       stm32eforth.s:3184   .inflash.dictinary:00000000000009dc CA_SEMIS
       stm32eforth.s:3184   .text:0000000000001764 SEMIS
       stm32eforth.s:3184   .inflash.dictinary:00000000000009e0 LF_RBRAC
       stm32eforth.s:3184   .inflash.dictinary:00000000000009e4 _RBRAC
       stm32eforth.s:3195   .inflash.dictinary:00000000000009e8 CA_RBRAC
       stm32eforth.s:3195   .text:0000000000001780 RBRAC
       stm32eforth.s:3197   .text:0000000000001788 $d
       stm32eforth.s:3198   .text:000000000000178c $t
       stm32eforth.s:3206   .text:0000000000001798 COMPILE_BLW
       stm32eforth.s:3195   .inflash.dictinary:00000000000009ec LF_COLON
       stm32eforth.s:3195   .inflash.dictinary:00000000000009f0 _COLON
       stm32eforth.s:3242   .inflash.dictinary:00000000000009f4 CA_COLON
       stm32eforth.s:3242   .text:00000000000017fc COLON
       stm32eforth.s:3269   .text:0000000000001838 HEAD
       stm32eforth.s:3242   .inflash.dictinary:00000000000009f8 LF_IMMED
       stm32eforth.s:3242   .inflash.dictinary:00000000000009fc _IMMED
       stm32eforth.s:3250   .inflash.dictinary:0000000000000a08 CA_IMMED
       stm32eforth.s:3250   .text:000000000000180c IMMED
       stm32eforth.s:3252   .text:0000000000001814 $d
       stm32eforth.s:3253   .text:0000000000001818 $t
       stm32eforth.s:3250   .inflash.dictinary:0000000000000a0c LF_HEAD
       stm32eforth.s:3250   .inflash.dictinary:0000000000000a10 _HEAD
       stm32eforth.s:3269   .inflash.dictinary:0000000000000a18 CA_HEAD
       stm32eforth.s:3269   .inflash.dictinary:0000000000000a1c LF_CONST
       stm32eforth.s:3269   .inflash.dictinary:0000000000000a20 _CONST
       stm32eforth.s:3283   .inflash.dictinary:0000000000000a2c CA_CONST
       stm32eforth.s:3283   .text:0000000000001860 CONST
       stm32eforth.s:3286   .text:000000000000186c $d
ARM GAS  ps2_kbd.s 			page 117


       stm32eforth.s:3287   .text:0000000000001870 $t
       stm32eforth.s:3295   .text:0000000000001880 DODOES
       stm32eforth.s:3306   .text:00000000000018ac $d
       stm32eforth.s:3307   .text:00000000000018b0 $t
       stm32eforth.s:3283   .inflash.dictinary:0000000000000a30 LF_DOES
       stm32eforth.s:3283   .inflash.dictinary:0000000000000a34 _DOES
       stm32eforth.s:3324   .inflash.dictinary:0000000000000a3c CA_DOES
       stm32eforth.s:3324   .text:00000000000018dc DOES
       stm32eforth.s:3326   .text:00000000000018e4 $d
       stm32eforth.s:3327   .text:00000000000018e8 $t
       stm32eforth.s:3324   .inflash.dictinary:0000000000000a40 LF_CREAT
       stm32eforth.s:3324   .inflash.dictinary:0000000000000a44 _CREAT
       stm32eforth.s:3339   .inflash.dictinary:0000000000000a4c CA_CREAT
       stm32eforth.s:3339   .text:0000000000001908 CREAT
       stm32eforth.s:3342   .text:0000000000001914 $d
       stm32eforth.s:3343   .text:0000000000001918 $t
       stm32eforth.s:3339   .inflash.dictinary:0000000000000a50 LF_VARIA
       stm32eforth.s:3339   .inflash.dictinary:0000000000000a54 _VARIA
       stm32eforth.s:3348   .inflash.dictinary:0000000000000a60 CA_VARIA
       stm32eforth.s:3348   .text:0000000000001920 VARIA
       stm32eforth.s:3351   .text:000000000000192c $d
       stm32eforth.s:3352   .text:0000000000001930 $t
       stm32eforth.s:3348   .inflash.dictinary:0000000000000a64 LF_FCALL
       stm32eforth.s:3348   .inflash.dictinary:0000000000000a68 _FCALL
       stm32eforth.s:3359   .inflash.dictinary:0000000000000a70 CA_FCALL
       stm32eforth.s:3359   .text:000000000000193c FCALL
       stm32eforth.s:3359   .inflash.dictinary:0000000000000a74 LF_DEFER
       stm32eforth.s:3359   .inflash.dictinary:0000000000000a78 _DEFER
       stm32eforth.s:3370   .inflash.dictinary:0000000000000a80 CA_DEFER
       stm32eforth.s:3370   .text:0000000000001950 DEFER
       stm32eforth.s:3373   .text:000000000000195c $d
       stm32eforth.s:3374   .text:0000000000001960 $t
       stm32eforth.s:3370   .inflash.dictinary:0000000000000a84 LF_DEFERSTO
       stm32eforth.s:3370   .inflash.dictinary:0000000000000a88 _DEFERSTO
       stm32eforth.s:3383   .inflash.dictinary:0000000000000a90 CA_DEFERSTO
       stm32eforth.s:3383   .text:0000000000001978 DEFERSTO
       stm32eforth.s:3383   .inflash.dictinary:0000000000000a94 LF_DEFERAT
       stm32eforth.s:3383   .inflash.dictinary:0000000000000a98 _DEFERAT
       stm32eforth.s:3399   .inflash.dictinary:0000000000000aa0 CA_DEFERAT
       stm32eforth.s:3399   .text:00000000000019a8 DEFERAT
       stm32eforth.s:3406   .text:00000000000019c4 $d
       stm32eforth.s:3730   .text:0000000000001bb4 BLADR
       stm32eforth.s:3407   .text:00000000000019c8 $t
       stm32eforth.s:3408   .text:00000000000019d0 $d
       stm32eforth.s:3409   .text:00000000000019d4 $t
       stm32eforth.s:3427   .inflash:000000000000029c DMP
       stm32eforth.s:3428   .inflash:000000000000029c $t
       stm32eforth.s:3430   .inflash:00000000000002a8 $d
       stm32eforth.s:3431   .inflash:00000000000002ac $t
       stm32eforth.s:3441   .inflash:00000000000002d4 PDUM2
       stm32eforth.s:3435   .inflash:00000000000002bc PDUM1
       stm32eforth.s:3438   .inflash:00000000000002c8 $d
       stm32eforth.s:3439   .inflash:00000000000002cc $t
       stm32eforth.s:3443   .inflash:00000000000002d8 $d
       stm32eforth.s:3444   .inflash:00000000000002dc $t
       stm32eforth.s:3399   .inflash.dictinary:0000000000000aa4 LF_DUMP
       stm32eforth.s:3399   .inflash.dictinary:0000000000000aa8 _DUMP
ARM GAS  ps2_kbd.s 			page 118


       stm32eforth.s:3449   .inflash.dictinary:0000000000000ab0 CA_DUMP
       stm32eforth.s:3449   .text:00000000000019e4 DUMP
       stm32eforth.s:3455   .text:00000000000019fc $d
       stm32eforth.s:3456   .text:0000000000001a00 $t
       stm32eforth.s:3469   .text:0000000000001a34 DUMP4
       stm32eforth.s:3459   .text:0000000000001a0c DUMP1
       stm32eforth.s:3461   .text:0000000000001a14 $d
       stm32eforth.s:3462   .text:0000000000001a18 $t
       stm32eforth.s:3471   .text:0000000000001a38 $d
       stm32eforth.s:3472   .text:0000000000001a3c DUMP3
       stm32eforth.s:3473   .text:0000000000001a3c $t
       stm32eforth.s:3449   .inflash.dictinary:0000000000000ab4 LF_DOTS
       stm32eforth.s:3449   .inflash.dictinary:0000000000000ab8 _DOTS
       stm32eforth.s:3481   .inflash.dictinary:0000000000000abc CA_DOTS
       stm32eforth.s:3481   .text:0000000000001a50 DOTS
       stm32eforth.s:3491   .text:0000000000001a70 DOTS2
       stm32eforth.s:3487   .text:0000000000001a64 DOTS1
       stm32eforth.s:3493   .text:0000000000001a74 $d
       stm32eforth.s:3494   .text:0000000000001a78 $t
       stm32eforth.s:3481   .inflash.dictinary:0000000000000ac0 LF_TNAME
       stm32eforth.s:3481   .inflash.dictinary:0000000000000ac4 _TNAME
       stm32eforth.s:3499   .inflash.dictinary:0000000000000acc CA_TNAME
       stm32eforth.s:3499   .text:0000000000001a80 TNAME
       stm32eforth.s:3504   .text:0000000000001a90 TNAM1
       stm32eforth.s:3507   .text:0000000000001a98 $d
       stm32eforth.s:3519   .text:0000000000001acc TNAM2
       stm32eforth.s:3508   .text:0000000000001a9c $t
       stm32eforth.s:3512   .text:0000000000001ab0 $d
       stm32eforth.s:3513   .text:0000000000001ab4 $t
       stm32eforth.s:3515   .text:0000000000001abc $d
       stm32eforth.s:3516   .text:0000000000001ac0 $t
       stm32eforth.s:3499   .inflash.dictinary:0000000000000ad0 LF_DOTID
       stm32eforth.s:3499   .inflash.dictinary:0000000000000ad4 _DOTID
       stm32eforth.s:3526   .inflash.dictinary:0000000000000ad8 CA_DOTID
       stm32eforth.s:3526   .text:0000000000001ad8 DOTID
       stm32eforth.s:3530   .text:0000000000001ae4 $d
       stm32eforth.s:3536   .text:0000000000001b00 DOTI1
       stm32eforth.s:3531   .text:0000000000001ae8 $t
       stm32eforth.s:3532   .text:0000000000001af0 $d
       stm32eforth.s:3533   .text:0000000000001af4 $t
       stm32eforth.s:3538   .text:0000000000001b04 $d
       stm32eforth.s:3540   .text:0000000000001b0e $t
       stm32eforth.s:3543   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:3551   .inflash:00000000000002e0 DOTCA
       stm32eforth.s:3555   .inflash:00000000000002f0 $d
       stm32eforth.s:3556   .inflash:00000000000002f4 $t
       stm32eforth.s:3562   .inflash:00000000000002fc CODE_ABORT
       stm32eforth.s:3571   .inflash:000000000000031c $d
       stm32eforth.s:3572   .inflash:0000000000000320 $t
       stm32eforth.s:3574   .inflash:0000000000000328 $d
       stm32eforth.s:3576   .inflash:0000000000000332 $t
       stm32eforth.s:3579   .inflash:0000000000000338 $d
       stm32eforth.s:3589   .inflash:0000000000000348 UNNESTQ
       stm32eforth.s:3598   .inflash:0000000000000368 $d
       stm32eforth.s:3599   .inflash:000000000000036c $t
       stm32eforth.s:3600   .inflash:0000000000000370 $d
       stm32eforth.s:3609   .inflash:0000000000000380 NONAMEQ
ARM GAS  ps2_kbd.s 			page 119


       stm32eforth.s:3611   .inflash:0000000000000388 $d
       stm32eforth.s:3612   .inflash:000000000000038c $t
       stm32eforth.s:3613   .inflash:0000000000000394 $d
       stm32eforth.s:3898   .rodata:0000000000000014 NONAME_SUB
       stm32eforth.s:3614   .inflash:0000000000000398 $t
       stm32eforth.s:3620   .inflash:00000000000003b0 $d
       stm32eforth.s:3621   .inflash:00000000000003b4 $t
       stm32eforth.s:3622   .inflash:00000000000003bc $d
       stm32eforth.s:3623   .inflash:00000000000003c0 $t
       stm32eforth.s:3625   .inflash:00000000000003c8 $d
       stm32eforth.s:3626   .inflash:00000000000003cc $t
       stm32eforth.s:3630   .inflash:00000000000003dc $d
       stm32eforth.s:3631   .inflash:00000000000003e0 $t
       stm32eforth.s:3632   .inflash:00000000000003e8 $d
       stm32eforth.s:3633   .inflash:00000000000003ec $t
       stm32eforth.s:3634   .inflash:00000000000003f4 $d
       stm32eforth.s:3904   .rodata:0000000000000050 ANONYMOUS
       stm32eforth.s:3635   .inflash:00000000000003f8 $t
       stm32eforth.s:3654   .inflash:0000000000000428 DOTNONAME
       stm32eforth.s:3657   .inflash:0000000000000434 $d
       stm32eforth.s:3658   .inflash:0000000000000438 $t
       stm32eforth.s:3666   .inflash:0000000000000448 IS_BLW
       stm32eforth.s:3668   .inflash:0000000000000450 $d
       stm32eforth.s:3669   .inflash:0000000000000454 $t
       stm32eforth.s:3526   .inflash.dictinary:0000000000000adc LF_SEE
       stm32eforth.s:3526   .inflash.dictinary:0000000000000ae0 _SEE
       stm32eforth.s:3678   .inflash.dictinary:0000000000000ae4 CA_SEE
       stm32eforth.s:3678   .text:0000000000001b14 SEE
       stm32eforth.s:3696   .text:0000000000001b48 SCOL
       stm32eforth.s:3678   .inflash.dictinary:0000000000000ae8 LF_SCOL
       stm32eforth.s:3678   .inflash.dictinary:0000000000000aec _SCOL
       stm32eforth.s:3696   .inflash.dictinary:0000000000000af8 CA_SCOL
       stm32eforth.s:3698   .text:0000000000001b50 $d
       stm32eforth.s:3699   .text:0000000000001b54 $t
       stm32eforth.s:3700   .text:0000000000001b58 SCOL1
       stm32eforth.s:3705   .text:0000000000001b68 $d
       stm32eforth.s:3706   .text:0000000000001b6c $t
       stm32eforth.s:3712   .text:0000000000001b84 $d
       stm32eforth.s:3713   .text:0000000000001b88 $t
       stm32eforth.s:3716   .text:0000000000001b94 $d
       stm32eforth.s:3717   .text:0000000000001b98 $t
       stm32eforth.s:3752   .text:0000000000001bf8 DECOMP
       stm32eforth.s:3721   .text:0000000000001ba8 $d
       stm32eforth.s:3722   .text:0000000000001bac $t
       stm32eforth.s:3696   .inflash.dictinary:0000000000000afc LF_DECOMP
       stm32eforth.s:3696   .inflash.dictinary:0000000000000b00 _DECOMP
       stm32eforth.s:3752   .inflash.dictinary:0000000000000b0c CA_DECOMP
       stm32eforth.s:3759   .text:0000000000001c10 $d
       stm32eforth.s:3788   .text:0000000000001c70 DECOM2
       stm32eforth.s:3761   .text:0000000000001c14 $t
       stm32eforth.s:3762   .text:0000000000001c18 $d
       stm32eforth.s:3764   .text:0000000000001c1c $t
       stm32eforth.s:3772   .text:0000000000001c38 $d
       stm32eforth.s:3775   .text:0000000000001c44 DECOMP1
       stm32eforth.s:3773   .text:0000000000001c3c $t
       stm32eforth.s:3774   .text:0000000000001c40 $d
       stm32eforth.s:3777   .text:0000000000001c48 DECOMP3
ARM GAS  ps2_kbd.s 			page 120


       stm32eforth.s:3776   .text:0000000000001c44 $t
       stm32eforth.s:3784   .text:0000000000001c60 $d
       stm32eforth.s:3785   .text:0000000000001c64 $t
       stm32eforth.s:3752   .inflash.dictinary:0000000000000b10 LF_WORDS
       stm32eforth.s:3752   .inflash.dictinary:0000000000000b14 _WORDS
       stm32eforth.s:3796   .inflash.dictinary:0000000000000b1c CA_WORDS
       stm32eforth.s:3796   .text:0000000000001c7c WORDS
       stm32eforth.s:3801   .text:0000000000001c8c WORS1
       stm32eforth.s:3804   .text:0000000000001c94 $d
       stm32eforth.s:3811   .text:0000000000001cb0 WORS2
       stm32eforth.s:3805   .text:0000000000001c98 $t
       stm32eforth.s:3826   .text:0000000000001cb4 VERSN
       stm32eforth.s:3828   .text:0000000000001cbc $d
       stm32eforth.s:3829   .text:0000000000001cc0 $t
       stm32eforth.s:3796   .inflash.dictinary:0000000000000b20 LF_HI
       stm32eforth.s:3796   .inflash.dictinary:0000000000000b24 _HI
       stm32eforth.s:3833   .inflash.dictinary:0000000000000b28 CA_HI
       stm32eforth.s:3836   .text:0000000000001cd0 $d
       stm32eforth.s:3858   .rodata:0000000000000000 hi_msg
       stm32eforth.s:3837   .text:0000000000001cd4 $t
       stm32eforth.s:3846   .text:0000000000001cfc $d
       stm32eforth.s:3847   .text:0000000000001d00 $t
       stm32eforth.s:3857   .rodata:0000000000000000 $d
       stm32eforth.s:3833   .inflash.dictinary:0000000000000b2c LF_LASTN
       stm32eforth.s:3867   .inflash.dictinary:0000000000000b38 CA_LASTN
       stm32eforth.s:3867   .text:0000000000001d20 LASTN
       stm32eforth.s:3875   .text:0000000000001d40 COLD1
       stm32eforth.s:3876   .text:0000000000001d44 $d
       stm32eforth.s:3877   .text:0000000000001d48 $t
       stm32eforth.s:3878   .text:0000000000001d50 $d
       stm32eforth.s:3879   .text:0000000000001d54 $t
       stm32eforth.s:3879   .text:0000000000001d58 $d
       stm32eforth.s:3880   .text:0000000000001d5c $t
       stm32eforth.s:3880   .text:0000000000001d60 $d
       stm32eforth.s:3881   .text:0000000000001d64 $t
       stm32eforth.s:3889   .text:0000000000001d7c COLD2
       stm32eforth.s:3890   .text:0000000000001d7c $d
       stm32eforth.s:3908   .rodata:0000000000000088 BRAN_LBL
       stm32eforth.s:3912   .rodata:0000000000000094 QBRAN_LBL
       stm32eforth.s:3916   .rodata:00000000000000a0 DOLIT_LBL
       stm32eforth.s:3920   .rodata:00000000000000ac DONEXT_LBL
       stm32eforth.s:3924   .rodata:00000000000000b8 DODOES_LBL
       stm32eforth.s:3928   .rodata:00000000000000c4 DOVAR_LBL
       stm32eforth.s:3932   .rodata:00000000000000d0 DOCON_LBL
       stm32eforth.s:3936   .rodata:00000000000000dc IS_BLW_LBL
       stm32eforth.s:3940   .rodata:00000000000000e8 DOTQP_LBL
       stm32eforth.s:3944   .rodata:00000000000000ec BLADR_LBL
       stm32eforth.s:3948   .rodata:00000000000000f8 DOTCA_LBL
       stm32eforth.s:3952   .rodata:0000000000000104 NONAMEQ_LBL
       stm32eforth.s:3956   .rodata:0000000000000110 STRCQ_LBL
       stm32eforth.s:3960   .rodata:0000000000000118 VERSN_LBL
       stm32eforth.s:3966   .user:0000000000000000 $d
       stm32eforth.s:3967   .user:0000000000000000 USER_SPACE
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
ARM GAS  ps2_kbd.s 			page 121


             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:0000000000000140 HRES
             tvout.s:37     *ABS*:00000000000000c8 VRES
             tvout.s:38     *ABS*:0000000000000004 BPP
             tvout.s:39     *ABS*:00000000000000a0 BPR
             tvout.s:40     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
             tvout.s:41     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:42     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:43     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:44     *ABS*:00000000000003bf VIDEO_DELAY
             tvout.s:45     *ABS*:000000000000173f VIDEO_END
             tvout.s:48     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:49     *ABS*:0000000000000001 ST_PREVID
             tvout.s:50     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:51     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:53     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:54     *ABS*:ffffffffffffffff EVEN_FIELD
       stm32eforth.s:3896   .text:0000000000001d80 $t
             tvout.s:153    .text:0000000000001e4a state_vsync
             tvout.s:194    .text:0000000000001e9e state_pre_video
             tvout.s:205    .text:0000000000001eb0 state_video_out
             tvout.s:236    .text:0000000000001f0c state_post_video
             tvout.s:253    .text:0000000000001f32 tv_isr_exit
             tvout.s:183    .text:0000000000001e84 sync_end
             tvout.s:245    .text:0000000000001f1e frame_end
             tvout.s:264    .text:0000000000001f38 put_char
             tvout.s:274    .rodata:0000000000000124 font_6x8
           ps2_kbd.s:49     *ABS*:0000000000000001 KBD_F_PAR_ERR
           ps2_kbd.s:50     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:51     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:52     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:53     *ABS*:000000000000006f KBD_ONES
           ps2_kbd.s:87     .text:0000000000001f90 start_bit
           ps2_kbd.s:94     .text:0000000000001fa6 parity_bit
           ps2_kbd.s:106    .text:0000000000001fc8 stop_bit
           ps2_kbd.s:128    .text:0000000000001ff8 kbd_init
       stm32eforth.s:2650   .text:000000000000121b $d
       stm32eforth.s:2650   .text:000000000000121c $t
       stm32eforth.s:222    .inflash:000000000000001f $d
       stm32eforth.s:222    .inflash:0000000000000020 $t
       stm32eforth.s:3581   .inflash:000000000000033d $d
       stm32eforth.s:3581   .inflash:000000000000033e $t
       stm32eforth.s:3602   .inflash:0000000000000377 $d
       stm32eforth.s:3602   .inflash:0000000000000378 $t

UNDEFINED SYMBOLS
_mstack
