ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	   
 179              	   /* NVIC block */
 180              	   .equ NVIC_BASE_ADR, 0xE000E000
 181              	   .equ NVIC_ISER0, 0x100
 182              	   .equ NVIC_ISER1, 0x104
 183              	   .equ NVIC_ISER2, 0x108
 184              	   .equ NVIC_ISER3, 0x10c
 185              	   .equ NVIC_ISER4, 0x110
 186              	   .equ NVIC_ISER5, 0x114
 187              	   .equ NVIC_ISER6, 0x118
 188              	   .equ NVIC_ISER7, 0x11c
 189              	   .equ NVIC_ICER0, 0x180
 190              	   .equ NVIC_ICER1, 0x184 
 191              	   .equ NVIC_ICER2, 0x188 
 192              	   .equ NVIC_ICER3, 0x18C 
 193              	   .equ NVIC_ICER4, 0x190 
 194              	   .equ NVIC_ICER5, 0x194 
 195              	   .equ NVIC_ICER6, 0x198 
 196              	   .equ NVIC_ICER7, 0x19C 
 197              	   .equ NVIC_ISPR0, 0x200
 198              	   .equ NVIC_ISPR1, 0x204
 199              	   .equ NVIC_ISPR2, 0x208 
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ISPR3, 0x20c 
 201              	   .equ NVIC_ISPR4, 0x210 
 202              	   .equ NVIC_ISPR5, 0x214 
 203              	   .equ NVIC_ISPR6, 0x218 
 204              	   .equ NVIC_ISPR7, 0x21c 
 205              	   .equ NVIC_ICPR0, 0x280
 206              	   .equ NVIC_ICPR1, 0x284
 207              	   .equ NVIC_ICPR2, 0x288
 208              	   .equ NVIC_ICPR3, 0x28c
 209              	   .equ NVIC_ICPR4, 0x290
 210              	   .equ NVIC_ICPR5, 0x294
 211              	   .equ NVIC_ICPR6, 0x298
 212              	   .equ NVIC_ICPR7, 0x29c
 213              	   .equ NVIC_IABR0, 0x300
 214              	   .equ NVIC_IABR1, 0x304
 215              	   .equ NVIC_IABR2, 0x308
 216              	   .equ NVIC_IABR3, 0x30c
 217              	   .equ NVIC_IABR4, 0x310
 218              	   .equ NVIC_IABR5, 0x314
 219              	   .equ NVIC_IABR6, 0x318
 220              	   .equ NVIC_IABR7, 0x31c
 221              	/*  NVIC_IPR0 - NVIC_IPR59 */
 222              	   .equ NVIC_IPR_BASE, 0xE000E400 
 223              	
 224              	/*  IRQ number */
 225              	   .equ NMI_IRQ, (-14) // non maskable
 226              	   .equ HF_IRQ, (-13)  // hard fault
 227              	   .equ MM_IRQ, (-12)  // memory Management
 228              	   .equ BF_IRQ, (-11)  // bus fault 
 229              	   .equ UF_IRQ, (-10)  // usage fault 
 230              	   .equ SVC_IRQ, (-5)  // service call 
 231              	   .equ DM_IRQ, (-4)  // debug monitor
 232              	   .equ PSV_IRQ, (-2) // pending service 
 233              	   .equ STCK_IRQ, (-1) // systick 
 234              	   .equ WWDG_IRQ, (0) // window watchdog 
 235              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 236              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 237              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 238              	   .equ FLASH_IRQ, (4) // flash global 
 239              	   .equ RCC_IRQ, (5)  // real time clock 
 240              	   .equ EXTI0_IRQ, (6) // 
 241              	   .equ EXTI1_IRQ, (7)
 242              	   .equ EXTI2_IRQ, (8)
 243              	   .equ EXTI3_IRQ, (9)
 244              	   .equ EXTI4_IRQ, (10)
 245              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 246              	   .equ DMA1S1_IRQ, (12)
 247              	   .equ DMA1S2_IRQ, (13)
 248              	   .equ DMA1S3_IRQ, (14)
 249              	   .equ DMA1S4_IRQ, (15)
 250              	   .equ DMA1S5_IRQ, (16)
 251              	   .equ DMA1S6_IRQ, (17)
 252              	   .equ ADC_IRQ, (18)
 253              	   .equ EXTI9_5_IRQ, (23)
 254              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 255              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 256              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
ARM GAS  forth.s 			page 6


 257              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 258              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 259              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 260              	   .equ TIM4_IRQ, (30) // TIMER4 global
 261              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 262              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 263              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 264              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 265              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 266              	   .equ SPI2_IRQ, (36)  // SPI2 global
 267              	   .equ USART1_IRQ, (37) // USART1 global
 268              	   .equ USART2_IRQ, (38) // USART2 global
 269              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 270              	   .equ EXTI17_IRQ, (41)
 271              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 272              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 273              	   .equ SDIO_IRQ, (49) // SDIO global
 274              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 275              	   .equ SPI3_IRQ, (51)
 276              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 277              	   .equ DMA2S1_IRQ, (57) 
 278              	   .equ DMAS2_IRQ, (58)
 279              	   .equ DMAS3_IRQ, (59)
 280              	   .equ DMAS4_IRQ, (60)
 281              	   .equ OTG_FS_IRQ, (67)
 282              	   .equ DMA2S5_IRQ, (68)
 283              	   .equ DMA2S6_IRQ, (69)
 284              	   .equ DMA2S7_IRQ, (70)
 285              	   .equ USART6_IRQ, (71)
 286              	   .equ I2C3EV_IRQ, (72)
 287              	   .equ I2C3ER_IRQ, (73)
 288              	   .equ FPU_IRQ, (81) // FPU global
 289              	   .equ SPI4_IRQ, (84)
 290              	   .equ SPI5_IRQ, (85)
 291              	   
 292              	
 293              	/* TIMERS registers */
 294              	.equ TIM1_BASE_ADR,0x40010000
 295              	.equ TIM9_BASE_ADR,0x40010400
 296              	.equ TIM10_BASE_ADR,0x40010800
 297              	.equ TIM11_BASE_ADR,0x40010C00
 298              	
 299              	.equ TIM2_BASE_ADR,0x40000000
 300              	.equ TIM3_BASE_ADR,0x40000400
 301              	.equ TIM4_BASE_ADR,0x40000800
 302              	.equ TIM5_BASE_ADR,0x40000C00
 303              	
 304              	/* TIMER1 */
 305              	.equ TIM1_RCR,48 
 306              	.equ TIM1_BDTR,68 
 307              	
 308              	/* TIMER2..TIMER5 */
 309              	.equ TIM_CR1,0
 310              	.equ TIM_CR2,4
 311              	.equ TIM_SMCR,8
 312              	.equ TIM_DIER,12
 313              	.equ TIM_SR,16
ARM GAS  forth.s 			page 7


 314              	.equ TIM_EGR,20
 315              	.equ TIM_CCMR1,24
 316              	.equ TIM_CCMR2,28
 317              	.equ TIM_CCER,32
 318              	.equ TIM_CNT,36
 319              	.equ TIM_PSC,40
 320              	.equ TIM_ARR,44
 321              	.equ TIM_CCR1,52
 322              	.equ TIM_CCR2,56
 323              	.equ TIM_CCR3,60
 324              	.equ TIM_CCR4,64
 325              	.equ TIM_DCR,72
 326              	.equ TIM_DMAR,76
 327              	.equ TIM2_OR,80
 328              	.equ TIM5_OR,80 
 329              	
 330              	/* SYSCFG registers */
 331              	.equ SYSCFG_BASE_ADR, 0x40013800
 332              	
 333              	.equ SYSCFG_MEMRMP,0
 334              	.equ SYSCFG_PMC,4
 335              	.equ SYSCFG_EXTICR1,8
 336              	.equ SYSCFG_EXTICR2,12
 337              	.equ SYSCFG_EXTICR3,16
 338              	.equ SYSCFG_EXTICR4,20
 339              	.equ SYSCFG_CMPCR,32
 340              	
 341              	/* EXTI registers */
 342              	.equ EXTI_BASE_ADR, 0x40013C00
 343              	
 344              	.equ EXTI_IMR,0
 345              	.equ EXTI_EMR,4
 346              	.equ EXTI_RTSR,8
 347              	.equ EXTI_FTSR,12
 348              	.equ EXTI_SWIER,16
 349              	.equ EXTI_PR,20
 350              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
ARM GAS  forth.s 			page 8


  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
ARM GAS  forth.s 			page 9


  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	
 109              	/***********************************************
 110              	* MACROS
 111              	*	Assemble inline direct threaded code ending.
 112              	***********************************************/
 113              		.macro _CALL fn /* low level routine call */ 
 114              	 	PUSH {LR}
 115              		BL \fn  
 116              		POP {LR}
 117              		.endm
 118              		
 119              		.macro _RET /* exit sub-routine */ 
 120              		BX LR 
 121              		.endm 
 122              	
 123              		/* dictionary header  */
 124              		.macro _HEADER  label, nlen, name
 125              			.word LINK 
 126              			.equ LINK , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		\label:   // code field 
 131              		.endm 
 132              		
 133              	
ARM GAS  forth.s 			page 10


 134              	// local function header 
 135              		.macro _FUNC label 
 136              		.section .text, "ax", %progbits 
 137              		.p2align 2 
 138              		.type \label, %function  
 139              		\label:
 140              		.endm 
 141              	
 142              	// global function header 
 143              		.macro _GBL_FUNC label 
 144              		.global \label 
 145              		_FUNC \label 
 146              		.endm 
 147              	
 148              	
 149              	// load large constant to register 
 150              		.macro _MOV32 r, value 
 151              		mov \r,#(\value&0xffff)
 152              		movt \r,#(\value>>16)
 153              		.endm 
 154              	
 155              		.macro _NEXT /* direct jump INEXT */ 
 156              		B INEXT   
 157              		.endm 
 158              	
 159              	 	.macro	_NEST /*start high level word */
 160              		BX INX  
 161              		NOP.N 
 162              		.endm
 163              	
 164              		.macro _ADR label 
 165              		.word 1+\label  
 166              		.endm 
 167              	
 168              	 	.macro	_UNNEST	/*end high level word */
 169              		_ADR UNNEST 
 170              		.endm
 171              	
 172              	 	.macro	_DOLIT u /*long literals */
 173              		_ADR	DOLIT
 174              		.word	\u 
 175              		.endm
 176              	
 177              		.macro _DOTQP len, text 
 178              		_ADR DOTQP 
 179              		.byte \len 
 180              		.ascii "\text" 
 181              		.p2align 2 
 182              		.endm
 183              	
 184              		.macro _COMPI name 
 185              		_DOLIT \name 
 186              		_ADR CALLC 
 187              		.endm 
 188              	
 189              		.macro _ABORQ len,name 
 190              		_ADR ABORQ 
ARM GAS  forth.s 			page 11


 191              		.byte \len 
 192              		.ascii "\name"
 193              		.p2align 2 
 194              		.endm
 195              	
 196              		.macro _BRAN label 
 197              		_ADR BRAN 
 198              		.word \label 
 199              		.endm 
 200              	
 201              		.macro _QBRAN label 
 202              		_ADR QBRAN 
 203              		.word \label
 204              		.endm 
 205              	
 206              		.macro _DONXT label 
 207              		_ADR DONXT
 208              		.word \label 
 209              		.endm 
 210              	
 211              	 	.macro	_PUSH	/*push TOS on data stack*/
 212              		STR	TOS,[DSP,#-4]!
 213              		.endm
 214              	
 215              	 	.macro	_POP /*pop data stack to TOS */
 216              		LDR	TOS,[DSP],#4
 217              		.endm
 218              	
 219              		// calling a colon word 
 220              		// from a code word   
 221              		.macro _CALL_COLWORD target 
 222              	    STMFD	RSP!,{IP}
 223              	    ldr IP,=\target
 224              		b INEXT   
 225              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
ARM GAS  forth.s 			page 12


  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
ARM GAS  forth.s 			page 13


 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      A5F85DF8 
 157      04EB
 158 000a DFF878C4 	  ldr IP,=dh
 159 000e 01F0F3BA 	  b INEXT  
 160              	dh:
ARM GAS  forth.s 			page 14


 161 0012 612D0000 	  _ADR PRESE    
 162 0016 77170000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e 2D1C0000 	  _ADR COUNT 
 164 0022 15250000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a A9180000 	  _ADR DUPP
 167 002e 51180000 	  _ADR TOR 
 168 0032 77170000 	  _DOLIT 16 
 168      10000000 
 169 003a C51C0000 	  _ADR BASE 
 170 003e E9170000 	  _ADR STORE 
 171 0042 4D260000 	  _ADR DOT 
 172 0046 29180000 	  _ADR RFROM
 173 004a 77170000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 ED180000 	  _ADR ANDD
 175 0056 B7170000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 77170000 	  _DOLIT ','
 177      2C000000 
 178 006a 81160000 	  _ADR EMIT 
 179 006e C1240000 	  _ADR SPACE 
 180 0072 4D260000 	  _ADR DOT 
 181              	1:
 182 0076 01010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 01F0B6BA 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 01F0ADBA 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
ARM GAS  forth.s 			page 15


 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 504700BF 	  _NEST 
 231 00d8 47F8046D 	  _PUSH 
 232 00dc 77170000 		_DOLIT user_reboot_msg
 232      F0000000 
 233 00e4 2D1C0000 		_ADR COUNT 
 234 00e8 15250000 	  _ADR TYPEE 
 235 00ec 01010000 	  _ADR reset_mcu 
 236              	
 237              		.p2align 2 
 238              	user_reboot_msg:
 239 00f0 0D       		.byte 13 
 240 00f1 0D757365 		.ascii "\ruser reboot!"
 240      72207265 
 240      626F6F74 
 240      21
 241 00fe 00BF     		.p2align 2 
 242              	
 243              	reset_mcu:
 244 0100 4FF48050 	  _MOV32 r0,UART 
 244      C4F20100 
 245 0108 0168     	1: ldr r1,[r0,#USART_SR]
 246 010a 11F0400F 	  tst r1,#(1<<6)
 247 010e FBD0     	  beq 1b
 248 0110 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 248      CEF20000 
 249 0118 C168     		ldr r1,[r0,#SCB_AIRCR]
 250 011a 41F00401 		orr r1,#(1<<2)
 251 011e C0F2FA51 		movt r1,#SCB_VECTKEY
 252 0122 C160     		str r1,[r0,#SCB_AIRCR]
 253 0124 FEE7     		b . 
 254              	
 255              	 
 256              	
ARM GAS  forth.s 			page 16


 257              	/**************************************
 258              	  reset_handler execute at MCU reset
 259              	***************************************/
 260              	  .type  reset_handler, %function
 261 0126 00BF     	  .p2align 2 
 262              	  .global reset_handler
 263              	reset_handler:
 264 0128 4FF00000 		_MOV32 r0,RAM_END
 264      C2F20200 
 265 0130 8546     		mov sp,r0  
 266 0132 FFF7FEFF 		bl	remap 
 267 0136 00F01FF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 268 013a 00F0BFF9 		bl  ser_init
 269 013e FFF7FEFF 		bl	tv_init
 270 0142 FFF7FEFF 	  bl  kbd_init  
 271 0146 00F003F8 		bl forth_init 
 272 014a 03F0F9BA 		b COLD 
 273              	
 274              	
 275              	
 276              		.type forth_init, %function 
 277 014e 00BF     	  .p2align 2 
 278              	forth_init:
 279 0150 4FF00004 		_MOV32 UP,UPP 
 279      C2F20004 
 280 0158 4FF47F47 		_MOV32 DSP,SPP
 280      C2F20107 
 281 0160 4FF68078 		_MOV32 RSP,RPP
 281      C2F20108 
 282 0168 DFF81CA3 	  ldr INX,=NEST
 283 016c 4AF0010A 	  orr INX,#1 
 284 0170 86EA0606 		EOR TOS,TOS  
 285 0174 7047     		_RET 
 286              	
 287              	
 288              	
 289              	  .type init_devices, %function
 290 0176 00BF     	  .p2align 2 
 291              	init_devices:
 292              	/* init clock to HSE 96 Mhz */
 293              	/* set 3 wait states in FLASH_ACR_LATENCY */
 294 0178 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 294      C4F20200 
 295 0180 4FF00301 	  mov r1,#3 
 296 0184 0160     	  str r1,[r0,#FLASH_ACR]
 297              	/* configure clock for HSE, 25 Mhz crystal */
 298              	/* enable HSE in RCC_CR */
 299 0186 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 299      C4F20200 
 300 018e 0168     	  ldr r1,[r0,#RCC_CR]
 301 0190 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 302 0194 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 303              	/* wait HSERDY loop */
 304              	wait_hserdy:
 305 0196 0168     	  ldr r1,[r0,#RCC_CR]
 306 0198 11F4003F 	  tst r1,#(1<<17)
 307 019c FBD0     	  beq wait_hserdy
ARM GAS  forth.s 			page 17


 308              	
 309              	/************************************************* 
 310              	   configure PLL  and source 
 311              	   SYSCLOCK=96 Mhz
 312              	   select HSE as  PLL source clock
 313              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 314              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 315              	****************************************************/
 316              	  /* set RCC_PLLCFGR */
 317 019e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 317      C4F20200 
 318 01a6 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 318      C0F24041 
 319 01ae 4160     	  str r1,[r0,#RCC_PLLCFGR]
 320              	  /* enable PLL */
 321 01b0 0168     	  ldr r1,[r0,#RCC_CR]
 322 01b2 41F08071 	  orr r1, #(1<<24)
 323 01b6 0160     	  str r1,[r0,#RCC_CR]
 324              	/* wait for PLLRDY */
 325              	wait_pllrdy:
 326 01b8 0168     	  ldr r1,[r0,#RCC_CR]
 327 01ba 11F0007F 	  tst r1,#(1<<25)
 328 01be FBD1     	  bne wait_pllrdy 
 329              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 330 01c0 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 330      C0F21901 
 331 01c8 8160     	  str r1,[r0,#RCC_CFGR]
 332              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 333 01ca 8168     	  ldr r1,[r0,#RCC_CFGR]
 334 01cc 41F00201 	  orr r1,#2
 335 01d0 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 336              	/* wait for SWS==2 */
 337              	wait_sws:
 338 01d2 8168     	  ldr r1,[r0,#RCC_CFGR]
 339 01d4 11F0080F 	  tst r1,#(2<<2)
 340 01d8 FBD0     	  beq wait_sws
 341              	/* now sysclock is 96 Mhz */
 342              	
 343              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 344 01da 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 345 01de 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 346 01e0 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 347 01e4 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 348              	/* configure GPIOC:13 as output for user LED */
 349 01e6 4FF40060 	  _MOV32 r0,LED_GPIO 
 349      C4F20200 
 350 01ee 4FF00D01 	  mov r1,#LED_PIN
 351 01f2 4FF01102 	  mov r2,#OUTPUT_OD 
 352 01f6 00B500F0 	  _CALL gpio_config 
 352      8FF85DF8 
 352      04EB
 353 0200 4FF00102 	  mov r2,#1
 354 0204 00B500F0 	  _CALL gpio_out 
 354      DEF85DF8 
 354      04EB
 355              	/* enable compensation CELL for fast I/O */
 356 020e 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
ARM GAS  forth.s 			page 18


 356      C4F20101 
 357 0216 4FF00100 		mov r0,#1 
 358 021a 0862     		str r0,[R1,#SYSCFG_CMPCR]
 359              	/* wait for ready bit */ 
 360 021c 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 361 021e 10F4807F 	    tst r0,#(1<<8)
 362 0222 FBD0     		beq 1b 	
 363              	
 364              	
 365              	/* configure systicks for 1msec ticks */
 366              	// set priority to 15 (lowest)
 367 0224 4FF0FF30 	  mov r0,#STCK_IRQ
 368 0228 4FF00F01 	  mov r1,#15 
 369 022c 00B500F0 	  _CALL nvic_set_priority
 369      2FF85DF8 
 369      04EB
 370 0236 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 370      CEF20000 
 371 023e 47F2FF61 	  _MOV32 r1,95999 
 371      C0F20101 
 372 0246 4160     	  str r1,[r0,#STK_LOAD]
 373 0248 4FF00701 	  mov r1,#7
 374 024c 0160     	  str r1,[r0,STK_CTL]
 375 024e 7047     	  _RET  
 376              	
 377              	
 378              	/* copy system variables to RAM */ 
 379              		.type remap, %function 
 380              	    .global remap 
 381              	remap:
 382              	// copy system to RAM 	
 383 0250 4FF00000 		_MOV32 r0,RAM_ADR 
 383      C2F20000 
 384 0258 8C49     		ldr r1,=UZERO 
 385 025a 4FF0A802 		mov r2,#ULAST-UZERO 
 386 025e 02F10302 		add r2,r2,#3
 387 0262 22F00302 		and r2,r2,#~3 
 388 0266 51F8043B 	1:	ldr r3,[r1],#4 
 389 026a 40F8043B 		str r3,[r0],#4 
 390 026e 043A     		subs R2,#4 
 391 0270 F9D1     		bne 1b
 392              	// zero end of RAM 
 393 0272 4FF00002 		_MOV32 r2,RAM_END 
 393      C2F20202 
 394 027a 83EA0303 		eor r3,r3,r3 
 395 027e 40F8043B 	2:  str r3,[r0],#4
 396 0282 9042     		cmp r0,r2 
 397 0284 FBDB     		blt 2b 
 398 0286 4FF00004 		_MOV32 UP,RAM_ADR  
 398      C2F20004 
 399 028e 7047     		_RET 
 400              	
 401              	// set irq priority 
 402              	// 0 highest 
 403              	// 15 lowest
 404              	// input: r0 IRQn  
 405              	//        r1  ipr 
ARM GAS  forth.s 			page 19


 406              	nvic_set_priority:
 407 0290 08B4     	    push {r3}
 408 0292 0028     	    cmp r0,#0 
 409 0294 08D4     	    bmi negative_irq 
 410 0296 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 410      CEF20003 
 411 029e 4FEA0111 	    lsl r1,#4 
 412 02a2 1954     	    strb r1,[r3,r0]
 413 02a4 08BC     	    pop {r3}
 414 02a6 7047     	    _RET 
 415              	negative_irq:
 416 02a8 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 416      CEF20003 
 417 02b0 00F00F00 	    and r0,#0XF 
 418 02b4 A0F10400 	    sub r0,#4 
 419 02b8 4FEA0111 	    lsl r1,#4 
 420 02bc 1954     	    strb r1,[r3,r0]
 421 02be 08BC     	    pop {r3}
 422 02c0 7047     	    _RET 
 423              	
 424              	
 425              	// enable interrupt in nvic 
 426              	// input: r0 = IRQn 
 427              	nvic_enable_irq: 
 428 02c2 0EB4     	    push {r1,r2,r3}
 429 02c4 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 429      CEF20003 
 430 02cc 0146     	    mov r1,r0 
 431 02ce 4FEA5111 	    lsr r1,#5  
 432 02d2 4FEA8101 	    lsl r1,#2  // ISERn  
 433 02d6 00F01F00 	    and r0,#31 // bit#
 434 02da 4FF00102 	    mov r2,#1 
 435 02de 02FA00F2 	    lsl r2,r0
 436 02e2 72B6     	    cpsid I
 437 02e4 5A50     	    str r2,[r3,r1]
 438 02e6 62B6     	    cpsie I 
 439 02e8 0EBC     	    pop {r1,r2,r3}
 440 02ea 7047     	    _RET 
 441              	
 442              	// disable interrupt in nvic
 443              	// input: r0 = IRQn
 444              	nvic_disable_irq:
 445 02ec 0EB4     	    push {r1,r2,r3}
 446 02ee 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 446      CEF20003 
 447 02f6 0146     	    mov r1,r0 
 448 02f8 4FEA5111 	    lsr r1,#5  
 449 02fc 4FEA8101 	    lsl r1,#2  // ISERn
 450 0300 00F01F00 	    and r0,#31 // bit#
 451 0304 4FF00102 	    mov r2,#1 
 452 0308 02FA00F2 	    lsl r2,r0
 453 030c 5A50     	    str r2,[r3,r1]
 454 030e BFF34F8F 	    dsb 
 455 0312 BFF36F8F 	    isb 
 456 0316 0EBC     	    pop {r1,r2,r3}
 457 0318 7047     	    _RET 
 458              	
ARM GAS  forth.s 			page 20


 459              	/**********************************
 460              	  gpio_config 
 461              	  Configure gpio mode 
 462              	  input:
 463              	    r0   GPIOx 
 464              	    r1   pin 
 465              	    r2   mode 
 466              	  output:
 467              	    none 
 468              	  use:
 469              	    r3,r5,r11  
 470              	**********************************/
 471              	gpio_config:
 472 031a 2DE92808 	    push {r3,r5,r11}
 473              	//  clear registers field 
 474 031e 4FF00105 	    mov r5,#1
 475 0322 05FA01F5 	    lsl r5,r1
 476 0326 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 477 032a 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 478 032c 03EA0503 	    and r3,r5 
 479 0330 4360     	    str r3,[r0,#GPIO_OTYPER]
 480 0332 4FF00305 	    mov r5,#3 
 481 0336 4FF0020B 	    mov r11,#2 
 482 033a 01FB0BFB 	    mul r11,r1 
 483 033e 05FA0BF5 	    lsl r5,r11 
 484 0342 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 485 0346 0368     	    ldr r3,[r0,#GPIO_MODER]
 486 0348 03EA0503 	    and r3,r5 
 487 034c 0360     	    str r3,[r0,#GPIO_MODER]
 488 034e C368     	    ldr r3,[r0,#GPIO_PUPDR]
 489 0350 03EA0503 	    and r3,r5 
 490 0354 C360     	    str r3,[r0,#GPIO_PUPDR]
 491              	// set mode register, r2 low nibble  
 492 0356 02F00305 	    and r5,r2,#3    
 493 035a 05FA0BF5 	    lsl r5,r11 // mode 
 494 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 495 0360 43EA0503 	    orr r3,r5 
 496 0364 0360     	    str r3,[r0,#GPIO_MODER]
 497 0366 032A     	    cmp r2,#3
 498 0368 13D0     	    beq 9f // analog input 
 499 036a 12F00305 	    ands r5,r2,#3 
 500 036e 08D0     	    beq input_pull 
 501              	output_type:
 502 0370 4FEA1212 	    lsr r2,#4 
 503 0374 02FA01F2 	    lsl r2,r1 // 1 bit field 
 504 0378 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 505 037a 43EA0203 	    orr r3,r2 
 506 037e 4360     	    str r3,[r0,#GPIO_OTYPER]
 507 0380 07E0     	    b 9f 
 508              	input_pull:
 509 0382 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 510 0384 4FEA1212 	    lsr r2,#4 
 511 0388 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 512 038c 43EA0203 	    orr r3,r2 
 513 0390 C360     	    str r3,[r0,#GPIO_PUPDR]
 514 0392 BDE82808 	9:  pop {r3,r5,r11}
 515 0396 7047     	    _RET 
ARM GAS  forth.s 			page 21


 516              	
 517              	// configure gpio speed 
 518              	// input:
 519              	//    r0   GPIO_BASE_ADR 
 520              	//    r1   pin 
 521              	//    r2   speed
 522              	// use:
 523              	//  r3,r5,r11 
 524              	gpio_speed:
 525 0398 2DE92808 	    push {r3,r5,r11}
 526 039c 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 527 039e 4FF00305 	    mov r5,#3
 528 03a2 4FF0020B 	    mov r11,#2 
 529 03a6 01FB0BFB 	    mul r11,r1 
 530 03aa 05FA0BF5 	    lsl r5,r11
 531 03ae 6FEA0505 	    mvn r5,r5 
 532 03b2 03EA0503 	    and r3,r5   
 533 03b6 02FA0BF2 	    lsl r2,r11  
 534 03ba 43EA0203 	    orr r3,r2 
 535 03be 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 536 03c0 BDE82808 	    pop {r3,r5,r11}
 537 03c4 7047     	    _RET
 538              	
 539              	/**************************** 
 540              	  gpio_out port,pin,0|1
 541              	  input:
 542              	    r0   gpio_base_adr 
 543              	    r1   pin 
 544              	    r2   data 0|1 
 545              	**************************/
 546              	gpio_out:
 547 03c6 08B4     	    push {r3}
 548 03c8 4FF00103 	    mov r3,#1 
 549 03cc 03FA01F3 	    lsl r3,r1 
 550 03d0 0AB9     	    cbnz r2, 1f 
 551 03d2 4FEA0343 	    lsl r3,#16 
 552 03d6 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 553 03d8 08BC     	    pop {r3}
 554 03da 7047     	    _RET 
 555              	
 556              	/******************************************************
 557              	*  COLD start moves the following to USER variables.
 558              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 559              	******************************************************/
 560              		.p2align 2
 561              	UZERO:
 562 03dc 00000000 		.word 0  			/*Reserved */
 563 03e0 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 564 03e4 00000000 		.word 0      /* TICKS */
 565 03e8 00000000 	    .word 0     /* CD_TIMER */
 566 03ec D0360000 		.word HI  /*'BOOT */
 567 03f0 24050000 		.word SER_QKEY /* query for character */
 568 03f4 60050000 	  .word SER_EMIT  /* char output device */
 569 03f8 0A000000 	  .word BASEE 	/*BASE */
 570 03fc 00000000 		.word 0			/*tmp */
 571 0400 00000000 		.word 0			/*SPAN */
 572 0404 00000000 		.word 0			/*>IN */
ARM GAS  forth.s 			page 22


 573 0408 00000000 		.word 0			/*#TIB */
 574 040c 00FF0120 		.word TIBB	/*TIBU */
 575 0410 382C0000 		.word INTER	/*'EVAL */
 576 0414 00000000 		.word 0			/*HLD */
 577 0418 38370000 		.word _LASTN	/*CONTEXT */
 578 041c 98370000 		.word CTOP  	/* FCP end of system dictionnary */
 579 0420 BC330020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 580 0424 38370000 		.word _LASTN	/*LAST word in dictionary */
 581 0428 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 581      00000000 
 581      00000000 
 581      00000000 
 582 0438 00000000 		.word 0  /* RX_HEAD */
 583 043c 00000000 		.word 0  /* RX_TAIL */ 
 584 0440 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 585 0444 00000000 		.word 0  /* VID_STATE, video state */  
 586 0448 00000000 	    .word 0  /* VID_FIELD, field */
 587 044c 00810120 		.word VID_BUFF /* video_buffer address */ 
 588 0450 00000000 	    .word 0 /* kbd struct */
 589 0454 00000000 		.space KBD_QUEUE_SIZE,0  
 589      00000000 
 589      00000000 
 589      00000000 
 590 0464 00000000 		.word 0  /* kbd queue head */
 591 0468 00000000 		.word 0 /* kbd queue tail */ 
 592 046c 00000000 	    .word 0 /* tv cursor row */
 593 0470 00000000 	    .word 0 /* tv cursor column */ 
 594 0474 00000000 	    .word 0 /* tv back color */
 595 0478 07000000 	    .word 7 /* tv font color */
 596 047c 00000000 	    .word 0,0 
 596      00000000 
 597              	ULAST:
 598              	
 599              	// used by _HEADER macro 
 600              	// to link names field
 601              	// in dictionary  
 602 0484 12000000 	    .equ LINK, 0 
 602      F0150000 
 602      DC030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
ARM GAS  forth.s 			page 23


  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0490 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0498 1868     		ldr r0,[r3,#USART_SR]
  38 049a 5968     		ldr r1,[r3,#USART_DR]
  39 049c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04a0 0BD0     		beq 2f // no char received 
  41 04a2 0329     		cmp r1,#3
  42 04a4 3FF416AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04a8 04F14C00 		add r0,UP,#RX_QUEUE
  44 04ac 226E     		ldr r2,[UP,#RX_TAIL]
  45 04ae 8154     		strb r1,[r0,r2]
  46 04b0 02F10102 		add r2,#1 
  47 04b4 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04b8 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04ba 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04bc 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04c4 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04c6 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04ca 01EA0201 	  and r1,r1,r2
  62 04ce 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04d2 41EA0201 	  orr r1,r1,r2 
  64 04d6 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04d8 4FF4EE61 	  mov r1,#0x77<<4 
  67 04dc 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 04de 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 04e6 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 04ea 8160     	  str r1,[r0,#USART_BRR]
ARM GAS  forth.s 			page 24


  73 04ec 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 04f0 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 04f2 4FF02500 	  mov r0,#USART1_IRQ 
  77 04f6 4FF00101 	  mov r1,#1 
  78 04fa 00B5FFF7 	  _CALL nvic_set_priority
  78      C8FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0504 4FF02500 	  mov r0,#USART1_IRQ 
  81 0508 00B5FFF7 	  _CALL nvic_enable_irq  
  81      DAFE5DF8 
  81      04EB
  82 0512 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0514 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F0000BF 
  91 0524 47F8046D 		_PUSH
  92 0528 206E     		ldr T0,[UP,#RX_TAIL] 
  93 052a E16D     		ldr T1,[UP,#RX_HEAD]
  94 052c 90EA0106 		eors TOS,T0,T1 
  95 0530 0CD0     		beq 1f
  96 0532 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0536 0844     		add T0,T1 
  98 0538 0678     		ldrb TOS,[T0]
  99 053a 01F10101 		add T1,#1 
 100 053e 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0542 E165     		str T1,[UP,#RX_HEAD]
 102 0544 47F8046D 		_PUSH 
 103 0548 4FF0FF36 		mov TOS,#-1
 104 054c 01F054B8 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0550 18050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0560 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0568 2868     	1:  ldr T0,[WP,#USART_SR]
 113 056a 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 056e FBD0     		beq 1b 
 115 0570 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0572 57F8046B 		_POP
 117 0576 01F03FB8 		_NEXT 
 118              	
ARM GAS  forth.s 			page 25


 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 057a 54050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0584 47F8046D 	        _PUSH 
 126 0588 4FF00006 	        mov TOS,#0
 127 058c 01F034B8 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0590 7E050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 059c 47F8046D 	        _PUSH 
 135 05a0 4FF00106 	        mov TOS,#1
 136 05a4 01F028B8 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05a8 94050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05b4 26B1     	        cbz TOS, 4f 
 144              	// serial console 
 145 05b6 4C48     	        ldr T0,=SER_QKEY 
 146 05b8 6061     	        str T0,[UP,#STDIN]
 147 05ba 4C48     	        ldr T0,=SER_EMIT
 148 05bc A061     	        str T0,[UP,#STDOUT]
 149 05be 03E0     	        b 9f 
 150              	4: // local console 
 151 05c0 4B48     	        ldr T0,=PS2_QKEY
 152 05c2 6061     	        str T0,[UP,#STDIN]
 153 05c4 4B48     	        ldr T0,=TV_EMIT
 154 05c6 A061     	        str T0,[UP,#STDOUT]
 155 05c8 57F8046B 	9:      _POP 
 156 05cc 01F014B8 	        _NEXT 
 157              	
 158              	/*******************************
 159              	    ANSI-PARAM ( n -- )
 160              	    convert and transmit 
 161              	    ANSI ESC[  parameter 
 162              	*******************************/
 163 05d0 AC050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 163      0A414E53 
 163      492D5041 
 163      52414D00 
 164 05e0 504700BF 	      _NEST 
 165 05e4 77170000 	      _DOLIT -1 // c 
 165      FFFFFFFF 
ARM GAS  forth.s 			page 26


 166 05ec C9190000 	1:    _ADR ONEP  // c+1
 167 05f0 51180000 	      _ADR TOR   
 168 05f4 77170000 	      _DOLIT 10 
 168      0A000000 
 169 05fc B91E0000 	      _ADR SLMOD // r q  
 170 0600 7D1A0000 	      _ADR QDUP  // r q q | r 0  
 171 0604 B7170000 	      _QBRAN 2f  // r 0 
 171      18060000 
 172 060c 29180000 	      _ADR RFROM // r q c 
 173 0610 CB170000 	      _BRAN 1b
 173      EC050000 
 174 0618 77170000 	2:    _DOLIT '0'  
 174      30000000 
 175 0620 6D190000 	      _ADR PLUS 
 176 0624 81160000 	      _ADR EMIT 
 177 0628 29180000 	      _ADR RFROM 
 178 062c 7D1A0000 	      _ADR QDUP 
 179 0630 B7170000 	      _QBRAN 3f
 179      48060000 
 180 0638 D9190000 	      _ADR ONEM 
 181 063c 51180000 	      _ADR TOR 
 182 0640 CB170000 	      _BRAN 2b 
 182      18060000 
 183              	3:    
 184 0648 FF150000 	      _UNNEST 
 185              	
 186              	/******************************
 187              	    ESC[ 
 188              	    send ANSI escape sequence
 189              	*******************************/
 190 064c D4050000 	      _HEADER ANSI_ESC,4,"ESC["
 190      04455343 
 190      5B0000BF 
 191 0658 504700BF 	      _NEST 
 192 065c 77170000 	      _DOLIT 27 
 192      1B000000 
 193 0664 81160000 	      _ADR EMIT 
 194 0668 77170000 	      _DOLIT '['
 194      5B000000 
 195 0670 81160000 	      _ADR EMIT 
 196 0674 FF150000 	      _UNNEST 
 197              	
 198              	/*************************************
 199              	    SER-AT ( line col -- )
 200              	    move cursor on serial console
 201              	*************************************/
 202 0678 50060000 	      _HEADER SER_AT,6,"SER-AT"
 202      06534552 
 202      2D415400 
 203 0684 504700BF 	      _NEST
 204 0688 59060000 	      _ADR ANSI_ESC
 205 068c B9180000 	      _ADR SWAP 
 206 0690 E1050000 	      _ADR ANSI_PARAM 
 207 0694 77170000 	      _DOLIT ';'
 207      3B000000 
 208 069c 81160000 	      _ADR EMIT
 209 06a0 E1050000 	      _ADR ANSI_PARAM
ARM GAS  forth.s 			page 27


 210 06a4 77170000 	      _DOLIT 'H'
 210      48000000 
 211 06ac 81160000 	      _ADR EMIT 
 212 06b0 FF150000 	      _UNNEST 
 213              	
 214              	/****************************
 215              	    SER-CLS ( -- )
 216              	    serial clear screeen 
 217              	****************************/
 218 06b4 7C060000 	    _HEADER SER_CLS,7,"SER-CLS"
 218      07534552 
 218      2D434C53 
 219 06c0 504700BF 	    _NEST
 220 06c4 77170000 	    _DOLIT 1 
 220      01000000 
 221 06cc A9180000 	    _ADR DUPP 
 222 06d0 85060000 	    _ADR SER_AT  
 223 06d4 59060000 	    _ADR ANSI_ESC
 224 06d8 77170000 	    _DOLIT 'J'
 224      4A000000 
 225 06e0 81160000 	    _ADR EMIT 
 226 06e4 FF150000 	    _UNNEST 
 227 06e8 24050000 	
 227      60050000 
 227      00130000 
 227      EC0B0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
ARM GAS  forth.s 			page 28


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	/*******************************************************
  56              	NOTES:
  57              	 1) Values computed for a 96Mhz sysclock 
  58              	 2) Video sync output on PB1 use T3_CH4
  59              	 3) video out trigger TIMER3 CH3 
  60              	********************************************************/
ARM GAS  forth.s 			page 29


  61              	
  62              	/**************************************
  63              	  initialize TIMER3 CH4 to generate tv_out
  64              	  synchronization signal.
  65              	**************************************/ 
  66              	  _GBL_FUNC tv_init
  67              	// configure PA0:3 as OUTPUT_OD 
  68 06f8 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR 
  68      C4F20200 
  69 0700 0168     	  ldr r1,[r0,#GPIO_MODER]
  70 0702 4FF05502 	  mov r2,#0x55
  71 0706 41EA0201 	  orr r1,r2
  72 070a 0160     	  str r1,[r0,#GPIO_MODER]
  73 070c 81EA0101 	  eor r1,r1 
  74 0710 4161     	  str r1,[r0,#GPIO_ODR]  
  75              	// configure PB1 as OUTPUT_AFPP 
  76              	// this is TIM3_CC4 output compare 
  77 0712 00F58060 	  add r0,#0x400 // GPIOB_BASE_ADR
  78 0716 4FF00101 	  mov r1,#1 // pin 1 
  79 071a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  80 071e 00B5FFF7 	  _CALL gpio_config 
  80      FBFD5DF8 
  80      04EB
  81 0728 4FF00101 	  mov r1,#1 
  82 072c 4FF00202 	  mov r2,#2
  83 0730 00B5FFF7 	  _CALL gpio_speed 
  83      31FE5DF8 
  83      04EB
  84              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  85 073a 016A     	  ldr r1,[r0,#GPIO_AFRL]
  86 073c 41F02001 	  orr r1,#(2<<4) // r2 
  87 0740 0162     	  str r1,[r0,#GPIO_AFRL]
  88              	// enable peripheral clock 
  89 0742 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  89      C4F20202 
  90 074a 4FF00200 	  mov r0,#2 
  91 074e 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  92 0750 41EA0001 	  orr r1,r0 
  93 0754 1164     	  str r1,[r2,#RCC_APB1ENR]
  94              	// configure TIMER3   
  95 0756 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
  95      C4F20002 
  96 075e 41F2D470 	  mov r0,#HPER
  97 0762 D062     	  str r0,[r2,#TIM_ARR]
  98 0764 40F23F50 	  mov r0,#VIDEO_DELAY 
  99 0768 D063     	  str r0,[r2,#TIM_CCR3]
 100 076a 4FF4E170 	  mov r0,#HPULSE 
 101 076e 1064     	  str r0,[r2,#TIM_CCR4]  
 102 0770 47F27000 	  mov r0,#(7<<12)+(7<<4)
 103 0774 D061     	  str r0,[r2,#TIM_CCMR2]
 104 0776 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 105 077a 1062     	  str r0,[r2,#TIM_CCER]
 106 077c 4FF00100 	  mov r0,#1 
 107 0780 D060     	  str r0,[r2,#TIM_DIER]
 108 0782 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 109              	// enable interrupt in NVIC controller 
 110 0784 4FF01D00 	  mov r0,#TIM3_IRQ 
ARM GAS  forth.s 			page 30


 111 0788 4FF00201 	  mov r1,#2
 112 078c 00B5FFF7 	  _CALL nvic_set_priority
 112      7FFD5DF8 
 112      04EB
 113 0796 4FF01D00 	  mov r0,#TIM3_IRQ 
 114 079a 00B5FFF7 	  _CALL nvic_enable_irq
 114      91FD5DF8 
 114      04EB
 115 07a4 7047     	  _RET
 116              	
 117              	/*************************************
 118              	  TIMER3 interrupt for tv_out
 119              	  T1 line # 
 120              	  T0 TIM3_BASE_ADR 
 121              	*************************************/
 122 07a6 00BF     	  _GBL_FUNC tv_out_isr
 123 07a8 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 123      C4F20000 
 124 07b0 81EA0101 	  eor T1,T1
 125 07b4 0161     	  str T1,[T0,#TIM_SR]
 126 07b6 616E     	  ldr T1,[UP,#VID_CNTR]
 127 07b8 01F10101 	  add T1,#1 
 128 07bc 6166     	  str T1,[UP,#VID_CNTR]
 129              	/** machine state cases **/
 130 07be A26E     	  ldr T2,[UP,#VID_STATE]
 131 07c0 002A     	  cmp T2,#ST_VSYNC 
 132 07c2 07D0     	  beq state_vsync
 133 07c4 012A     	  cmp T2,#ST_PREVID 
 134 07c6 2FD0     	  beq state_pre_video 
 135 07c8 022A     	  cmp T2,#ST_VIDEO 
 136 07ca 36D0     	  beq state_video_out 
 137 07cc 032A     	  cmp T2,#ST_POSTVID 
 138 07ce 60D0     	  beq state_post_video
 139 07d0 FFF7FEBF 	  b default_handler // invalid state 
 140              	/*** vertical sync state **/
 141              	state_vsync:
 142 07d4 0129     	  cmp T1,#1
 143 07d6 06D1     	  bne 1f 
 144              	/****** set vertical pre-sync  *****/
 145 07d8 4FF0DB01 	  mov T1,#SERRATION
 146 07dc 0164     	  str T1,[T0,#TIM_CCR4]
 147 07de 40F6E931 	  mov T1,#SYNC_LINE 
 148 07e2 C162     	  str T1,[T0,#TIM_ARR]
 149 07e4 68E0     	  b tv_isr_exit 
 150 07e6 0729     	1: cmp T1,#7
 151 07e8 03D1     	  bne 2f 
 152              	// vertical sync pulse   
 153 07ea 40F62821 	  mov T1,#VSYNC_PULSE
 154 07ee 0164     	  str T1,[T0,#TIM_CCR4]
 155 07f0 62E0     	  b tv_isr_exit
 156 07f2 0D29     	2: cmp T1,#13
 157 07f4 03D1     	   bne 3f  
 158              	// set vertical post-sync    
 159 07f6 4FF0DB01 	   mov T1,#SERRATION 
 160 07fa 0164     	   str T1,[T0,#TIM_CCR4]
 161 07fc 5CE0     	   b tv_isr_exit   
 162 07fe 1229     	3: cmp T1,#18
ARM GAS  forth.s 			page 31


 163 0800 03D1     	   bne 4f 
 164              	// if even field full line  
 165 0802 E16E     	   ldr T1,[UP,#VID_FIELD]
 166 0804 0029     	   cmp T1,#ODD_FIELD  
 167 0806 57D0     	   beq tv_isr_exit 
 168 0808 01E0     	   b sync_end 
 169 080a 1329     	4: cmp T1,#19 
 170 080c 54D1     	   bne tv_isr_exit
 171              	sync_end: 
 172 080e 4FF00901 	   mov T1,#9
 173 0812 6166     	   str T1,[UP,#VID_CNTR]
 174 0814 4FF4E171 	   mov T1,#HPULSE 
 175 0818 0164     	   str T1,[T0,#TIM_CCR4] 
 176 081a 41F2D471 	   mov T1,#HPER 
 177 081e C162     	   str T1,[T0,#TIM_ARR] 
 178 0820 4FF00101 	   mov T1,#ST_PREVID 
 179 0824 A166     	   str T1,[UP,#VID_STATE]
 180 0826 47E0     	   b tv_isr_exit 
 181              	/*****************************/
 182              	state_pre_video:
 183 0828 2829     	   cmp T1,#VIDEO_FIRST_LINE
 184 082a 45D4     	   bmi tv_isr_exit 
 185 082c 4FF00201 	   mov T1,#ST_VIDEO 
 186 0830 A166     	   str T1,[UP,#VID_STATE]
 187 0832 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 188 0836 C160     	   str T1,[T0,#TIM_DIER]
 189 0838 3EE0     	   b tv_isr_exit 
 190              	/**************************
 191              	    VIDEO OUTPUT 
 192              	**************************/   
 193              	state_video_out:
 194 083a F029     	   cmp T1,#VIDEO_LAST_LINE 
 195 083c 06D9     	   bls 1f 
 196 083e 4FF00301 	   mov T1,#ST_POSTVID 
 197 0842 A166     	   str T1,[UP,#VID_STATE]
 198 0844 4FF00101 	   mov T1,#1 
 199 0848 C160     	   str T1,[T0,#TIM_DIER]
 200 084a 35E0     	   b tv_isr_exit 
 201              	1: // video output
 202 084c 206F     	   ldr T0,[UP,#VID_BUFFER]
 203 084e A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 204 0852 4FF0A003 	   mov T3,#160
 205 0856 03FB01F1 	   mul T1,T3 
 206 085a 0844     	   add T0,T1  
 207 085c 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 207      C4F20201 
 208 0864 0278     	2: ldrb T2,[T0]
 209 0866 4FEA1212 	   lsr T2,#4 
 210 086a 4A61     	   str T2,[T1,#GPIO_ODR]
 211 086c AFF30080 	   nop.w
 212 0870 AFF30080 	   nop.w 
 213 0874 10F8012B 	   ldrb T2,[T0],#1
 214 0878 02F00F02 	   and T2,#15 
 215 087c 4A61     	   str T2,[T1,#GPIO_ODR]
 216 087e AFF30080 	   nop.w
 217 0882 AFF30080 	   nop.w  
 218 0886 013B     	   subs T3,#1
ARM GAS  forth.s 			page 32


 219 0888 ECD1     	   bne 2b  
 220 088a 4FF47022 	   mov T2,#(15<<16) 
 221 088e 8A61     	   str T2,[T1,#GPIO_BSRR]
 222 0890 12E0     	   b tv_isr_exit 
 223              	state_post_video:
 224 0892 4FF48372 	   mov T2,#262
 225 0896 9142     	   cmp T1,T2
 226 0898 0ED4     	   bmi tv_isr_exit     
 227              	// odd field line 262 half line 
 228 089a E16E     	   ldr T1,[UP,VID_FIELD]
 229 089c 11B9     	   cbnz T1, frame_end 
 230 089e 40F6E931 	   mov T1,#SYNC_LINE
 231 08a2 C162     	   str T1,[T0,#TIM_ARR]      
 232              	frame_end: 
 233 08a4 4FF00001 	   mov T1,#ST_VSYNC 
 234 08a8 A166     	   str T1,[UP,#VID_STATE]
 235 08aa 81EA0101 	   eor T1,T1 
 236 08ae 6166     	   str T1,[UP,#VID_CNTR]
 237 08b0 E16E     	   ldr T1,[UP,#VID_FIELD]
 238 08b2 6FEA0101 	   mvn T1,T1  
 239 08b6 E166     	   str T1,[UP,#VID_FIELD]
 240              	tv_isr_exit: 
 241 08b8 7047     	   _RET   
 242              	
 243              	
 244              	/***************************
 245              	    FORTH WORDS 
 246              	***************************/
 247              	
 248              	// BACK-COLOR ( -- a )
 249              	//   back color variable 
 250 08ba B8060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 250      0A424143 
 250      4B2D434F 
 250      4C4F5200 
 250      00BF
 251 08cc 47F8046D 		_PUSH 
 252 08d0 04F19806 		ADD TOS,UP,#BK_COLOR
 253 08d4 00F090BE 		_NEXT
 254              	
 255              	// PEN-COLOR ( -- a )
 256              	// pen color variable 
 257 08d8 BE080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 257      0950454E 
 257      2D434F4C 
 257      4F5200BF 
 258 08e8 47F8046D 		_PUSH 
 259 08ec 04F19C06 		ADD TOS,UP,#PEN_COLOR
 260 08f0 00F082BE 		_NEXT 
 261              	
 262              	// COLUMN ( -- a )
 263              	// cursor column variable 
 264 08f4 DC080000 	  _HEADER CURSOR_COL,6,"COLUMN"
 264      06434F4C 
 264      554D4E00 
 265 0900 47F8046D 	  _PUSH 
 266 0904 04F19406 	  ADD TOS,UP,#COL 
ARM GAS  forth.s 			page 33


 267 0908 00F076BE 	  _NEXT 
 268              	
 269              	// ROW ( -- a )
 270              	// cursor row 
 271 090c F8080000 	  _HEADER CURSOR_ROW,3,"ROW"
 271      03524F57 
 272 0914 47F8046D 	  _PUSH 
 273 0918 04F19006 	  ADD TOS,UP,#ROW 
 274 091c 00F06CBE 	  _NEXT 
 275              	
 276              	// ROW>Y ( n1 - n2 )
 277              	// convert cursor row to y coord 
 278 0920 10090000 	  _HEADER ROWY,5,"ROW>Y"
 278      05524F57 
 278      3E5900BF 
 279 092c 4FF00800 	  mov T0,#CHAR_HEIGHT
 280 0930 00FB06F6 	  mul TOS,T0 
 281 0934 00F060BE 	  _NEXT 
 282              	
 283              	// COL>X ( n1 -- n2 )
 284              	// convert cursor column to x coord 
 285 0938 24090000 	  _HEADER COLX,5,"COL>X" 
 285      05434F4C 
 285      3E5800BF 
 286 0944 4FF00600 	  mov T0,#CHAR_WIDTH 
 287 0948 00FB06F6 	  mul TOS,T0 
 288 094c 00F054BE 	  _NEXT 
 289              	
 290              	// FONT ( -- a )
 291              	// return address of font table
 292 0950 3C090000 	  _HEADER FONT,4,"FONT" 
 292      04464F4E 
 292      540000BF 
 293 095c 47F8046D 	  _PUSH 
 294 0960 DFF83065 	  ldr TOS,=font_6x8 
 295 0964 00F048BE 	  _NEXT 
 296              	
 297              	// VIDBUFF ( -- a )
 298              	// address of video buffer 
 299 0968 54090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 299      07564944 
 299      42554646 
 300 0974 47F8046D 	  _PUSH 
 301 0978 266F     	  LDR TOS,[UP,#VID_BUFFER]
 302 097a 00F03DBE 	  _NEXT 
 303              	
 304              	
 305              	// PLOT ( x y op -- )
 306              	// draw a pixel 
 307              	//    0 back color 
 308              	//    1 pen color 
 309              	//    2 invert (invert color pixels )
 310              	//    3 xor pen color  
 311 097e 6C090000 	    _HEADER PLOT,4,"PLOT"
 311      04504C4F 
 311      5400
 312              	// compute video buffer byte address from coords
ARM GAS  forth.s 			page 34


 313 0988 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 314 098a 4FF0A002 	    mov T2,#BPR // bytes per row  
 315 098e 02FB00F0 	    mul T0,T2 
 316 0992 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 317 0996 1044     	    add T0,T2 
 318 0998 236F     	    ldr T3,[UP,#VID_BUFFER] 
 319 099a 0344     	    add T3,T0 // T3 -> byte address 
 320 099c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 321 099e 4FF00F02 	    mov T2,#15 // AND mask 
 322 09a2 11F0010F 	    tst T1,#1 
 323 09a6 01D0     	    beq 1f 
 324 09a8 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 325 09ac DFF8E804 	1:  ldr T0,=plot_op 
 326 09b0 D0E806F0 	    tbb [T0,TOS]
 327              	op_back:
 328 09b4 05EA0205 	    and WP,T2 // mask out nibble 
 329 09b8 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 330 09bc 11F0010F 	    tst T1,#1 
 331 09c0 01D1     	    bne 1f 
 332 09c2 4FEA0010 	    lsl T0,#4 // high nibble  
 333 09c6 45EA0005 	1:  orr WP,T0  
 334 09ca 1D70     	    strb WP,[T3]
 335 09cc 1AE0     	    b 9f 
 336              	op_pen: 
 337 09ce 05EA0205 	    and WP,T2 
 338 09d2 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 339 09d6 11F0010F 	    tst T1,#1
 340 09da 01D1     	    bne 1f 
 341 09dc 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 342 09e0 45EA0005 	1:	orr WP,T0 
 343 09e4 1D70     	    strb WP,[T3]
 344 09e6 0DE0     	    b 9f 
 345              	op_invert:
 346 09e8 85EA0205 	    eor WP,T2 
 347 09ec 1D70     	    strb WP,[T3]
 348 09ee 09E0     	    b 9f 
 349              	op_xor:
 350 09f0 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 351 09f4 11F0010F 	    tst T1,#1 
 352 09f8 01D1     	    bne 1f 
 353 09fa 4FEA0010 	    lsl T0,#4 
 354 09fe 85EA0005 	1:  eor WP,T0 
 355 0a02 1D70     	    strb WP,[T3]
 356 0a04 57F8046B 	9:  _POP 
 357 0a08 00F0F6BD 	    _NEXT 
 358              	
 359 0a0c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 360              	
 361              	
 362              	// VSYNC ( -- )
 363              	// wait vertical sync phase 
 364 0a10 82090000 	    _HEADER VSYNC,5,"VSYNC"
 364      05565359 
 364      4E4300BF 
 365 0a1c 606E     	1:  ldr T0,[UP,#VID_CNTR]
 366 0a1e 0028     	    cmp T0,#0
 367 0a20 FCD1     	    bne 1b
ARM GAS  forth.s 			page 35


 368 0a22 00F0E9BD 	    _NEXT 
 369              	
 370              	// CLS ( -- )
 371              	// clear TV screen 
 372 0a26 140A0000 	    _HEADER CLS,3,"CLS"
 372      03434C53 
 372      00BF
 373 0a30 80EA0000 	    eor T0,T0 
 374 0a34 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 375 0a38 40EA0100 	    orr T0,T1 
 376 0a3c 4FEA0111 	    lsl T1,#4 
 377 0a40 40EA0100 	    orr T0,T1 
 378 0a44 4FEA0021 	    lsl T1,T0,#8 
 379 0a48 40EA0100 	    orr T0,T1 
 380 0a4c 4FEA0041 	    lsl T1,T0,#16
 381 0a50 40EA0100 	    orr T0,T1 
 382 0a54 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 383 0a58 226F     	    ldr T2,[UP,#VID_BUFFER]
 384 0a5a 5050     	1:	str T0,[T2,T1]
 385 0a5c 0439     	    subs T1,#4
 386 0a5e FCD1     	    bne 1b
 387 0a60 1060     	    str T0,[T2]
 388 0a62 80EA0000 	    eor T0,T0 
 389 0a66 C4F89000 	    str T0,[UP,#ROW]
 390 0a6a C4F89400 	    str T0,[UP,#COL]
 391 0a6e 00F0C3BD 	    _NEXT 
 392              	
 393              	
 394              	// CLRLINE ( n -- )
 395              	// clear text line 
 396 0a72 2A0A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 396      07434C52 
 396      4C494E45 
 396      00BF
 397 0a80 504700BF 	  _NEST
 398 0a84 77170000 	  _DOLIT (BPR*CHAR_HEIGHT)
 398      00050000 
 399 0a8c A9180000 	  _ADR DUPP  
 400 0a90 51180000 	  _ADR TOR 
 401 0a94 8D190000 	  _ADR STAR
 402 0a98 75090000 	  _ADR VIDBUFF
 403 0a9c 6D190000 	  _ADR PLUS
 404 0aa0 29180000 	  _ADR RFROM   
 405 0aa4 77170000 	  _DOLIT 0 
 405      00000000 
 406 0aac D9200000 	  _ADR FILL 
 407 0ab0 FF150000 	  _UNNEST 
 408              	
 409              	// SCROLLUP ( -- )
 410              	// scroll up tv screen 1 char height 
 411 0ab4 760A0000 	  _HEADER SCROLLUP,8,"SCROLLUP"
 411      08534352 
 411      4F4C4C55 
 411      500000BF 
 412 0ac4 504700BF 	  _NEST 
 413 0ac8 75090000 	  _ADR VIDBUFF 
 414 0acc A9180000 	  _ADR DUPP 
ARM GAS  forth.s 			page 36


 415 0ad0 77170000 	  _DOLIT BPR*CHAR_HEIGHT 
 415      00050000 
 416 0ad8 A9180000 	  _ADR DUPP 
 417 0adc 51180000 	  _ADR TOR 
 418 0ae0 6D190000 	  _ADR PLUS 
 419 0ae4 B9180000 	  _ADR SWAP 
 420 0ae8 77170000 	  _DOLIT VIDEO_BUFFER_SIZE 
 420      007D0000 
 421 0af0 29180000 	  _ADR RFROM  
 422 0af4 7D190000 	  _ADR SUBB 
 423 0af8 A5200000 	  _ADR MOVE
 424 0afc 77170000 	  _DOLIT 24 
 424      18000000 
 425 0b04 810A0000 	  _ADR CLRLINE 
 426 0b08 FF150000 	  _UNNEST 
 427              	
 428              	//  RIGHT ( -- )
 429              	// move cursor 1 char. right 
 430 0b0c B80A0000 	  _HEADER RIGHT,5,"RIGHT"
 430      05524947 
 430      485400BF 
 431 0b18 D4F89400 	  ldr T0,[UP,#COL]
 432 0b1c 00F10100 	  add T0,#1
 433 0b20 3528     	  cmp T0,#53
 434 0b22 09D5     	  bpl TVCR  
 435 0b24 C4F89400 	  str T0,[UP,#COL]
 436 0b28 00F066BD 	  _NEXT 
 437              	
 438              	
 439              	// TV-CR 
 440              	// carriage return line feed 
 441 0b2c 100B0000 	  _HEADER TVCR,5,"TV-CR"
 441      0554562D 
 441      435200BF 
 442 0b38 80EA0000 	  eor T0,T0 
 443 0b3c C4F89400 	  str T0,[UP,#COL]
 444 0b40 D4F89000 	  ldr T0,[UP,#ROW]
 445 0b44 1828     	  cmp T0,#24
 446 0b46 05D0     	  beq 2f 
 447 0b48 00F10100 	  add T0,#1 
 448 0b4c C4F89000 	  str T0,[UP,#ROW]
 449 0b50 00F052BD 	  _NEXT 
 450 0b54 48F804CD 	2:_CALL_COLWORD 3f 
 450      DFF840C3 
 450      00F04CBD 
 451              	3: 
 452 0b60 C50A0000 	  _ADR SCROLLUP 
 453 0b64 FF150000 	  _UNNEST  
 454              	
 455              	
 456              	// extract font pixel 
 457              	FONT_PIXEL: // ( r -- 0|1 )
 458 0b68 4FF08000 	    mov T0,#128 
 459 0b6c 06EA0006 	    and TOS,T0 
 460 0b70 4FEAD616 	    lsr TOS,#7
 461 0b74 00F040BD 	    _NEXT 
 462              	
ARM GAS  forth.s 			page 37


 463              	// increment x coord 
 464              	INCR_X: // ( x y -- x' y )
 465 0b78 3868     	  ldr T0,[DSP]
 466 0b7a 00F10100 	  add T0,#1 
 467 0b7e 3860     	  str T0,[DSP]
 468 0b80 00F03ABD 	  _NEXT 
 469              	
 470              	// shift font row data
 471              	NEXT_PIXEL:
 472 0b84 4FEA4606 	    lsl TOS,#1
 473 0b88 00F036BD 	    _NEXT 
 474              	
 475              	
 476              	// CHAR_ROW 
 477              	// plot character row 
 478              	// {x y r -- }
 479              	//  _HEADER CHAR_ROW,7,"CHARROW"
 480              	CHAR_ROW:  
 481 0b8c 504700BF 	    _NEST 
 482 0b90 77170000 	    _DOLIT 5 
 482      05000000 
 483 0b98 51180000 	    _ADR TOR 
 484 0b9c 51180000 	1:  _ADR TOR 
 485 0ba0 E11A0000 	    _ADR DDUP 
 486 0ba4 3D180000 	    _ADR RAT
 487 0ba8 690B0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 488 0bac 89090000 	    _ADR PLOT 
 489 0bb0 790B0000 	    _ADR INCR_X 
 490 0bb4 29180000 	    _ADR RFROM 
 491 0bb8 850B0000 	    _ADR NEXT_PIXEL
 492              	    //_DOLIT 1 
 493              	    //_ADR LSHIFT 
 494 0bbc 99170000 	    _DONXT 1b
 494      9C0B0000 
 495 0bc4 CD1A0000 	    _ADR TDROP 
 496 0bc8 FF150000 	    _UNNEST 
 497              	
 498              	
 499              	CHAR_FONT: // ( c -- c-adr )
 500 0bcc A6F12006 	   sub TOS,#32
 501 0bd0 4FF00800 	   mov T0,#8 
 502 0bd4 00FB06F6 	   mul TOS,T0 
 503 0bd8 AE48     	   ldr T0,=font_6x8
 504 0bda 0644     	   add TOS,T0 
 505 0bdc 00F00CBD 	   _NEXT 
 506              	
 507              	/**********************************
 508              	   TV-EMIT ( c -- )
 509              	   draw character in video buffer
 510              	**********************************/
 511 0be0 300B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 511      0754562D 
 511      454D4954 
 512 0bec 504700BF 	    _NEST
 513 0bf0 A9180000 	    _ADR DUPP 
 514 0bf4 77170000 	    _DOLIT 32 
 514      20000000 
ARM GAS  forth.s 			page 38


 515 0bfc 751B0000 	    _ADR ULESS
 516 0c00 B7170000 	    _QBRAN 1f
 516      100C0000 
 517 0c08 CB170000 	    _BRAN CTRL_KEY
 517      740C0000 
 518 0c10 CD0B0000 	1:  _ADR CHAR_FONT 
 519 0c14 01090000 	    _ADR CURSOR_COL 
 520 0c18 FD170000 	    _ADR AT
 521 0c1c 45090000 	    _ADR COLX  // x coord 
 522 0c20 15090000 	    _ADR CURSOR_ROW 
 523 0c24 FD170000 	    _ADR AT    
 524 0c28 2D090000 	    _ADR ROWY  // {c-adr x y -- } 
 525 0c2c 911A0000 	    _ADR ROT  // TEST 
 526 0c30 77170000 	    _DOLIT 7   
 526      07000000 
 527 0c38 51180000 	    _ADR TOR  
 528 0c3c 51180000 	1:  _ADR TOR  // { x y }
 529 0c40 E11A0000 	    _ADR DDUP  // { x y x y }
 530 0c44 3D180000 	    _ADR RAT 
 531 0c48 1D180000 	    _ADR CAT   // { x y x y r }
 532 0c4c 8D0B0000 	    _ADR CHAR_ROW 
 533 0c50 C9190000 	    _ADR ONEP // {x y' }
 534 0c54 29180000 	    _ADR RFROM 
 535 0c58 C9190000 	    _ADR ONEP // {x y' c-adr' }
 536 0c5c 99170000 	    _DONXT 1b
 536      3C0C0000 
 537 0c64 CD1A0000 	    _ADR TDROP  
 538 0c68 190B0000 	    _ADR RIGHT
 539 0c6c 790D0000 	9:  _ADR DRAW_CURSOR 
 540 0c70 FF150000 	    _UNNEST  
 541              	CTRL_KEY:
 542 0c74 050E0000 	    _ADR ERASE_CURSOR
 543 0c78 A9180000 	    _ADR DUPP 
 544 0c7c 77170000 	    _DOLIT BKSPP  
 544      08000000 
 545 0c84 5D1B0000 	    _ADR EQUAL 
 546 0c88 B7170000 	    _QBRAN 1f
 546      A00C0000 
 547 0c90 3D0D0000 	    _ADR BACK_SPACE 
 548 0c94 99180000 	8:  _ADR DROP 
 549 0c98 CB170000 	    _BRAN 9b 
 549      6C0C0000 
 550 0ca0 A9180000 	1:  _ADR DUPP 
 551 0ca4 77170000 	    _DOLIT CRR 
 551      0D000000 
 552 0cac 5D1B0000 	    _ADR EQUAL 
 553 0cb0 B7170000 	    _QBRAN 1f 
 553      C40C0000 
 554 0cb8 E50C0000 	    _ADR CAR_RET
 555 0cbc CB170000 	    _BRAN 8b
 555      940C0000 
 556 0cc4 77170000 	1:  _DOLIT LF 
 556      0A000000 
 557 0ccc 5D1B0000 	    _ADR EQUAL 
 558 0cd0 B7170000 	    _QBRAN 9b 
 558      6C0C0000 
 559 0cd8 FD0C0000 	    _ADR LN_FEED
ARM GAS  forth.s 			page 39


 560 0cdc CB170000 	    _BRAN 9b  
 560      6C0C0000 
 561              	
 562              	/*******************************
 563              	  CAR_RET 
 564              	  carriage return
 565              	*******************************/
 566              	CAR_RET:
 567 0ce4 504700BF 	   _NEST
 568 0ce8 77170000 	   _DOLIT 0 
 568      00000000 
 569 0cf0 01090000 	   _ADR CURSOR_COL 
 570 0cf4 E9170000 	   _ADR STORE 
 571 0cf8 FF150000 	   _UNNEST   
 572              	
 573              	/*************************
 574              	  LN_FEED 
 575              	  send cursor to next line 
 576              	**************************/
 577              	LN_FEED:
 578 0cfc 504700BF 	    _NEST 
 579 0d00 15090000 	    _ADR CURSOR_ROW 
 580 0d04 FD170000 	    _ADR AT 
 581 0d08 A9180000 	    _ADR DUPP 
 582 0d0c 77170000 	    _DOLIT 24 
 582      18000000 
 583 0d14 15190000 	    _ADR XORR 
 584 0d18 B7170000 	    _QBRAN 1f
 584      300D0000 
 585 0d20 C9190000 	    _ADR ONEP 
 586 0d24 15090000 	    _ADR CURSOR_ROW 
 587 0d28 E9170000 	    _ADR STORE 
 588 0d2c FF150000 	    _UNNEST    
 589 0d30 99180000 	1:  _ADR DROP 
 590 0d34 C50A0000 	    _ADR SCROLLUP 
 591 0d38 FF150000 	    _UNNEST  
 592              	
 593              	
 594              	/*****************************
 595              	  BACK_SPACE  
 596              	  move cursor left 1 character
 597              	*****************************/
 598              	BACK_SPACE: 
 599 0d3c 504700BF 	  _NEST 
 600 0d40 01090000 	  _ADR CURSOR_COL 
 601 0d44 FD170000 	  _ADR AT 
 602 0d48 7D1A0000 	  _ADR QDUP 
 603 0d4c B7170000 	  _QBRAN 9f
 603      640D0000 
 604 0d54 D9190000 	  _ADR ONEM
 605 0d58 01090000 	  _ADR CURSOR_COL 
 606 0d5c E9170000 	  _ADR STORE
 607 0d60 790D0000 	  _ADR DRAW_CURSOR
 608 0d64 FF150000 	9: _UNNEST    
 609              	
 610              	
 611              	/*******************************
ARM GAS  forth.s 			page 40


 612              	  DRAW_CURSOR ( -- )
 613              	********************************/
 614 0d68 E40B0000 	    _HEADER DRAW_CURSOR,11,"DRAW-CURSOR"
 614      0B445241 
 614      572D4355 
 614      52534F52 
 615              	//DRAW_CURSOR:
 616 0d78 504700BF 	    _NEST 
 617 0d7c 77170000 	    _DOLIT 0xFF
 617      FF000000 
 618 0d84 15090000 	0:  _ADR CURSOR_ROW
 619 0d88 FD170000 	    _ADR AT  
 620 0d8c C9190000 	    _ADR ONEP 
 621 0d90 2D090000 	    _ADR ROWY 
 622 0d94 77170000 	    _DOLIT BPR
 622      A0000000 
 623 0d9c 8D190000 	    _ADR STAR
 624 0da0 77170000 	    _DOLIT BPR  
 624      A0000000 
 625 0da8 7D190000 	    _ADR SUBB 
 626 0dac 01090000 	    _ADR CURSOR_COL
 627 0db0 FD170000 	    _ADR AT 
 628 0db4 45090000 	    _ADR COLX 
 629 0db8 6D1A0000 	    _ADR TWOSL  
 630 0dbc 6D190000 	    _ADR PLUS
 631 0dc0 75090000 	    _ADR VIDBUFF
 632 0dc4 6D190000 	    _ADR PLUS
 633 0dc8 77170000 	    _DOLIT 2
 633      02000000 
 634 0dd0 51180000 	    _ADR TOR  
 635 0dd4 E11A0000 	1:  _ADR DDUP 
 636 0dd8 09180000 	    _ADR CSTOR 
 637 0ddc C9190000 	    _ADR ONEP 
 638 0de0 99170000 	    _DONXT 1b
 638      D40D0000 
 639 0de8 B91A0000 	2:  _ADR DDROP // drop 3 elements 
 640 0dec FF150000 	    _UNNEST  
 641              	
 642              	/*************************
 643              	    ERASE_CURSOR 
 644              	*************************/
 645 0df0 6C0D0000 	    _HEADER ERASE_CURSOR,12,"ERASE-CURSOR"
 645      0C455241 
 645      53452D43 
 645      5552534F 
 645      520000BF 
 646              	//ERASE_CURSOR:
 647 0e04 504700BF 	    _NEST 
 648 0e08 CD080000 	    _ADR BACKCOLOR 
 649 0e0c FD170000 	    _ADR AT 
 650 0e10 A9180000 	    _ADR DUPP  
 651 0e14 77170000 	    _DOLIT 4 
 651      04000000 
 652 0e1c 5D190000 	    _ADR LSHIFT 
 653 0e20 01190000 	    _ADR ORR 
 654 0e24 CB170000 	    _BRAN 0b
 654      840D0000 
ARM GAS  forth.s 			page 41


 655              	
 656              	// TV-AT ( line col -- )
 657              	// set text cursor position 
 658 0e2c F40D0000 	    _HEADER TV_AT,5,"TV-AT"
 658      0554562D 
 658      415400BF 
 659 0e38 352E     	    cmp TOS,#53
 660 0e3a 01D4     	    bmi 1f 
 661 0e3c 4FF03406 	    mov TOS,#52
 662 0e40 C4F89460 	1:  str TOS,[UP,#COL]
 663 0e44 57F8046B 	    _POP
 664 0e48 192E     	    cmp TOS,#25
 665 0e4a 01D4     	    bmi 1f 
 666 0e4c 4FF01806 	    mov TOS,#24 
 667 0e50 C4F89060 	1:  str TOS,[UP,#ROW]
 668 0e54 57F8046B 	    _POP 
 669 0e58 CEE3     	    _NEXT 
 670              	
 671              	// INPUT ( -- c-adr )
 672              	// input a string in pad 
 673 0e5a 300E0000 	    _HEADER INPUT,5,"INPUT"
 673      05494E50 
 673      5554
 674 0e64 504700BF 	    _NEST 
 675 0e68 1D200000 	    _ADR PAD 
 676 0e6c A9180000 	    _ADR DUPP 
 677 0e70 C9190000 	    _ADR ONEP 
 678 0e74 77170000 	    _DOLIT 53
 678      35000000 
 679 0e7c 252B0000 	    _ADR ACCEP
 680 0e80 B9180000 	    _ADR SWAP 
 681 0e84 99180000 	    _ADR DROP 
 682 0e88 CD180000 	    _ADR OVER 
 683 0e8c 09180000 	    _ADR CSTOR  
 684 0e90 FF150000 	    _UNNEST 
 685              	
 686              	
 687              		.section .rodata 
 688              		.p2align 2
 689              	/********************************************
 690              	    TV font  ASCII 6 pixels x 8 pixels 
 691              	********************************************/
 692              	font_6x8:
 693 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 693      00000000 
 694 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 694      20002000 
 695 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 695      00000000 
 696 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 696      F8505000 
 697 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 697      28F02000 
 698 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 698      40981800 
 699 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 699      A8906800 
ARM GAS  forth.s 			page 42


 700 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 700      00000000 
 701 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 701      40201000 
 702 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 702      10204000 
 703 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 703      A8200000 
 704 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 704      20200000 
 705 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 705      60204000 
 706 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 706      00000000 
 707 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 707      00606000 
 708 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 708      40800000 
 709 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 709      C8887000 
 710 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 710      2020F800 
 711 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 711      4080F800 
 712 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 712      0808F000 
 713 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 713      F8101000 
 714 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 714      0808F000 
 715 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 715      88887000 
 716 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 716      40404000 
 717 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 717      88887000 
 718 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 718      08087000 
 719 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 719      60600000 
 720 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 720      60204000 
 721 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 721      40201000 
 722 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 722      F8000000 
 723 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 723      10204000 
 724 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 724      20002000 
 725 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 725      A8A87000 
 726 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 726      88888800 
 727 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 727      8888F000 
 728 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
ARM GAS  forth.s 			page 43


 728      80807800 
 729 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 729      8888F000 
 730 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 730      8080F800 
 731 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 731      80808000 
 732 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 732      88887000 
 733 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 733      88888800 
 734 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 734      20207000 
 735 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 735      08906000 
 736 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 736      A0908800 
 737 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 737      8080F800 
 738 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 738      88888800 
 739 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 739      98888800 
 740 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 740      88887000 
 741 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 741      80808000 
 742 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 742      A8987800 
 743 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 743      A0908800 
 744 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 744      0808F000 
 745 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 745      20202000 
 746 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 746      88887000 
 747 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 747      88502000 
 748 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 748      A8D88800 
 749 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 749      50888800 
 750 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 750      20202000 
 751 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 751      8080F800 
 752 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 752      40406000 
 753 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 753      10080000 
 754 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 754      08081800 
 755 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 755      00000000 
 756 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 756      0000F800 
ARM GAS  forth.s 			page 44


 757 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 757      00000000 
 758 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 758      78887800 
 759 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 759      C888F000 
 760 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 760      80887000 
 761 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 761      98887800 
 762 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 762      F8807000 
 763 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 763      40404000 
 764 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 764      88780870 
 765 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 765      88888800 
 766 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 766      20202000 
 767 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 767      10906000 
 768 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 768      C0A09000 
 769 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 769      20207000 
 770 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 770      A8888800 
 771 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 771      88888800 
 772 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 772      88887000 
 773 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 773      88F08080 
 774 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 774      90B05018 
 775 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 775      80808000 
 776 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 776      7008F000 
 777 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 777      40483000 
 778 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 778      88986800 
 779 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 779      88502000 
 780 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 780      A8A85000 
 781 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 781      20508800 
 782 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 782      88780870 
 783 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 783      2040F800 
 784 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 784      40402000 
 785 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
ARM GAS  forth.s 			page 45


 785      20202000 
 786 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 786      20204000 
 787 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 787      10000000 
 788 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 788      FCFCFCFC 
 789 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 789      10204000 
 790 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 790      40201000 
 791 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 791      20200000 
 792 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 792      A8702000 
 793 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 793      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
ARM GAS  forth.s 			page 46


   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
ARM GAS  forth.s 			page 47


  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
ARM GAS  forth.s 			page 48


 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0ea0 1C61     	   .byte 0x1c,'a' 
   9 0ea2 3262     	   .byte 0x32,'b'
  10 0ea4 2163     	   .byte 0x21,'c'
  11 0ea6 2364     	   .byte 0x23,'d'
  12 0ea8 2465     	   .byte 0x24,'e'
  13 0eaa 2B66     	   .byte 0x2b,'f'
  14 0eac 3467     	   .byte 0x34,'g'
  15 0eae 3368     	   .byte 0x33,'h'
  16 0eb0 4369     	   .byte 0x43,'i'
  17 0eb2 3B6A     	   .byte 0x3B,'j'
  18 0eb4 426B     	   .byte 0x42,'k'
  19 0eb6 4B6C     	   .byte 0x4b,'l'
  20 0eb8 3A6D     	   .byte 0x3a,'m'
  21 0eba 316E     	   .byte 0x31,'n'
  22 0ebc 446F     	   .byte 0x44,'o'
ARM GAS  forth.s 			page 49


  23 0ebe 4D70     	   .byte 0x4d,'p'
  24 0ec0 1571     	   .byte 0x15,'q'
  25 0ec2 2D72     	   .byte 0x2d,'r'
  26 0ec4 1B73     	   .byte 0x1b,'s'
  27 0ec6 2C74     	   .byte 0x2c,'t'
  28 0ec8 3C75     	   .byte 0x3c,'u'
  29 0eca 2A76     	   .byte 0x2a,'v'
  30 0ecc 1D77     	   .byte 0x1d,'w'
  31 0ece 2278     	   .byte 0x22,'x'
  32 0ed0 3579     	   .byte 0x35,'y'
  33 0ed2 1A7A     	   .byte 0x1a,'z'
  34 0ed4 4530     	   .byte 0x45,'0'
  35 0ed6 1631     	   .byte 0x16,'1'
  36 0ed8 1E32     	   .byte 0x1e,'2'
  37 0eda 2633     	   .byte 0x26,'3'
  38 0edc 2534     	   .byte 0x25,'4'
  39 0ede 2E35     	   .byte 0x2e,'5'
  40 0ee0 3636     	   .byte 0x36,'6'
  41 0ee2 3D37     	   .byte 0x3d,'7'
  42 0ee4 3E38     	   .byte 0x3e,'8'
  43 0ee6 4639     	   .byte 0x46,'9'
  44 0ee8 0E60     	   .byte 0x0e,'`'
  45 0eea 4E2D     	   .byte 0x4e,'-'
  46 0eec 553D     	   .byte 0x55,'='
  47 0eee 5D5C     	   .byte 0x5d,'\\'
  48 0ef0 545B     	   .byte 0x54,'['
  49 0ef2 5B5D     	   .byte 0x5b,']'
  50 0ef4 4C3B     	   .byte 0x4c,';'
  51 0ef6 5227     	   .byte 0x52,'\''
  52 0ef8 412C     	   .byte 0x41,','
  53 0efa 492E     	   .byte 0x49,'.'
  54 0efc 7C2A     	   .byte 0x7c,'*'
  55 0efe 792B     	   .byte 0x79,'+'
  56 0f00 2920     	   .byte 0x29,' '
  57 0f02 5A0D     	   .byte SC_ENTER,CRR 
  58 0f04 6608     	   .byte SC_BKSP,BKSPP 
  59 0f06 0D09     	   .byte SC_TAB,9
  60 0f08 761B     	   .byte SC_ESC,27
  61 0f0a 119E     	   .byte SC_LALT,VK_LALT 
  62 0f0c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0f0e 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f10 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f12 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f14 5800     	   .byte SC_CAPS,0
  67 0f16 0580     	   .byte SC_F1,VK_F1
  68 0f18 0681     	   .byte SC_F2,VK_F2
  69 0f1a 0482     	   .byte SC_F3,VK_F3
  70 0f1c 0C83     	   .byte SC_F4,VK_F4
  71 0f1e 0384     	   .byte SC_F5,VK_F5
  72 0f20 0B85     	   .byte SC_F6,VK_F6
  73 0f22 8386     	   .byte SC_F7,VK_F7
  74 0f24 0A87     	   .byte SC_F8,VK_F8
  75 0f26 0188     	   .byte SC_F9,VK_F9
  76 0f28 098A     	   .byte SC_F10,VK_F10
  77 0f2a 788B     	   .byte SC_F11,VK_F11
  78 0f2c 078C     	   .byte SC_F12,VK_F12
  79 0f2e 7030     	   .byte SC_KP0,'0'
ARM GAS  forth.s 			page 50


  80 0f30 6931     	   .byte SC_KP1,'1'
  81 0f32 7232     	   .byte SC_KP2,'2'
  82 0f34 7A33     	   .byte SC_KP3,'3'
  83 0f36 6B34     	   .byte SC_KP4,'4'
  84 0f38 7335     	   .byte SC_KP5,'5'
  85 0f3a 7436     	   .byte SC_KP6,'6'
  86 0f3c 6C37     	   .byte SC_KP7,'7'
  87 0f3e 7538     	   .byte SC_KP8,'8'
  88 0f40 7D39     	   .byte SC_KP9,'9'
  89 0f42 7C2A     	   .byte SC_KPMUL,'*'
  90 0f44 4A2F     	   .byte SC_KPDIV,'/'
  91 0f46 792B     	   .byte SC_KPPLUS,'+'
  92 0f48 7B2D     	   .byte SC_KPMINUS,'-'
  93 0f4a 712E     	   .byte SC_KPDOT,'.'
  94 0f4c 5A0D     	   .byte SC_KPENTER,'\r'
  95 0f4e FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0f50 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0f52 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0f54 6141     	   .byte 'a','A'
 102 0f56 6242     	   .byte 'b','B'
 103 0f58 6343     	   .byte 'c','C'
 104 0f5a 6444     	   .byte 'd','D'
 105 0f5c 6545     	   .byte 'e','E'
 106 0f5e 6646     	   .byte 'f','F'
 107 0f60 6747     	   .byte 'g','G'
 108 0f62 6848     	   .byte 'h','H'
 109 0f64 6949     	   .byte 'i','I'
 110 0f66 6A4A     	   .byte 'j','J'
 111 0f68 6B4B     	   .byte 'k','K'
 112 0f6a 6C4C     	   .byte 'l','L'
 113 0f6c 6D4D     	   .byte 'm','M'
 114 0f6e 6E4E     	   .byte 'n','N'
 115 0f70 6F4F     	   .byte 'o','O'
 116 0f72 7050     	   .byte 'p','P'
 117 0f74 7151     	   .byte 'q','Q'
 118 0f76 7252     	   .byte 'r','R'
 119 0f78 7353     	   .byte 's','S'
 120 0f7a 7454     	   .byte 't','T'
 121 0f7c 7555     	   .byte 'u','U'
 122 0f7e 7656     	   .byte 'v','V'
 123 0f80 7757     	   .byte 'w','W'
 124 0f82 7858     	   .byte 'x','X'
 125 0f84 7959     	   .byte 'y','Y'
 126 0f86 7A5A     	   .byte 'z','Z'
 127 0f88 3121     	   .byte '1','!'
 128 0f8a 3240     	   .byte '2','@'
 129 0f8c 3323     	   .byte '3','#'
 130 0f8e 3424     	   .byte '4','$'
 131 0f90 3525     	   .byte '5','%'
 132 0f92 365E     	   .byte '6','^'
 133 0f94 3726     	   .byte '7','&'
 134 0f96 382A     	   .byte '8','*'
 135 0f98 3928     	   .byte '9','('
 136 0f9a 3029     	   .byte '0',')'
ARM GAS  forth.s 			page 51


 137 0f9c 2D5F     	   .byte '-','_'
 138 0f9e 3D2B     	   .byte '=','+'
 139 0fa0 607E     	   .byte '`','~'
 140 0fa2 2722     	   .byte '\'','"'
 141 0fa4 2C3C     	   .byte ',','<'
 142 0fa6 2E3E     	   .byte '.','>'
 143 0fa8 2F3F     	   .byte '/','?'
 144 0faa 5C7C     	   .byte '\\','|'
 145 0fac 3B3A     	   .byte ';',':'
 146 0fae 5B7B     	   .byte '[','{'
 147 0fb0 5D7D     	   .byte ']','}'
 148 0fb2 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 0fb4 315C     	   .byte '1','\\'
 153 0fb6 3240     	   .byte '2','@'
 154 0fb8 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 0fba 363F     	   .byte '6','?'
 158 0fbc 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 0fbe 397B     	   .byte '9','{'
 161 0fc0 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 0fc2 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 0fc4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 0fc6 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 0fc8 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 0fca 11A3     	    .byte SC_RALT,VK_RALT
 172 0fcc 2F97     	    .byte SC_APPS,VK_APPS
 173 0fce 758D     	    .byte SC_UP,VK_UP
 174 0fd0 728E     	    .byte SC_DOWN,VK_DOWN
 175 0fd2 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 0fd4 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 0fd6 7095     	    .byte SC_INSERT,VK_INSERT
 178 0fd8 6C91     	    .byte SC_HOME,VK_HOME
 179 0fda 7D93     	    .byte SC_PGUP,VK_PGUP
 180 0fdc 7A94     	    .byte SC_PGDN,VK_PGDN
 181 0fde 717F     	    .byte SC_DEL,VK_DELETE
 182 0fe0 6992     	    .byte SC_END,VK_END
 183 0fe2 4A2F     	    .byte SC_KPDIV,'/'
 184 0fe4 5A0D     	    .byte SC_KPENTER,'\r'
 185 0fe6 1200     	    .byte 0x12,0
 186 0fe8 7C00     	    .byte 0x7c,0
 187 0fea 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 0fec 6303     	   .byte 'c', VK_CTRL_C 
 193 0fee 1FA0     	   .byte SC_LGUI,VK_LGUI
ARM GAS  forth.s 			page 52


 194 0ff0 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 0ff2 27A2     	   .byte SC_RGUI,VK_RGUI
 196 0ff4 11A3     	   .byte SC_RALT,VK_RALT
 197 0ff6 2F97     	   .byte SC_APPS,VK_APPS
 198 0ff8 7095     	   .byte SC_INSERT,VK_INSERT
 199 0ffa 6C91     	   .byte SC_HOME,VK_HOME
 200 0ffc 7D93     	   .byte SC_PGUP,VK_PGUP
 201 0ffe 717F     	   .byte SC_DEL,VK_DELETE
 202 1000 6992     	   .byte SC_END,VK_END
 203 1002 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1004 758D     	   .byte SC_UP,VK_UP
 205 1006 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1008 728E     	   .byte SC_DOWN,VK_DOWN
 207 100a 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 100c 4A2F     	   .byte SC_KPDIV,'/'
 209 100e 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1010 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 1012 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1014 119E     	   .byte SC_LALT,VK_LALT
 213 1016 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1018 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 101a 761B     	   .byte SC_ESC,VK_ESC
 216 101c 779A     	   .byte SC_NUM,VK_NLOCK
 217 101e 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1020 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 12 
ARM GAS  forth.s 			page 53


  68              	    .equ KBD_CLOCK_PIN, 11
  69              	
  70              	/**********************************
  71              	    kbd_isr
  72              	    interrupt service routine 
  73              	    EXTI0 connected to keyboard 
  74              	    clock signal and triggered 
  75              	    on falling edge 
  76              	**********************************/
  77 1022 00BF     	    _GBL_FUNC kbd_isr 
  78 1024 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  78      C4F20102 
  79 102c 4FF40060 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  80 1030 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  81 1032 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
  81      C4F20203 
  82 103a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  83 103e 10F0020F 	    tst r0,#KBD_TX 
  84 1042 40F08480 	    bne send_bit  
  85 1046 188A     	    ldrh r0,[r3,#GPIO_IDR]
  86 1048 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  87 104c 01F10102 	    add r2,r1,#1
  88 1050 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  89 1054 0029     	    cmp r1,#0
  90 1056 15D0     	    beq start_bit 
  91 1058 0929     	    cmp r1,#9 
  92 105a 25D0     	    beq parity_bit 
  93 105c 0A29     	    cmp r1,#10 
  94 105e 2DD0     	    beq stop_bit 
  95              	    // data bit 
  96 1060 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  97 1064 4FEA5202 	    lsr r2,#1 
  98 1068 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
  99 106c 07D0     	    beq 1f 
 100 106e 42F08002 	    orr r2,#(1<<7)
 101 1072 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 102 1076 00F10100 	    add r0,#1 
 103 107a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 104 107e 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 105 1082 63E0     	    b 9f         
 106              	start_bit:
 107 1084 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) 
 108 1088 60D1     	    bne 9f // not a start bit 
 109 108a 80EA0000 	    eor r0,r0 
 110 108e 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 111 1092 84F87700 	    strb r0,[UP,#KBD_PARITY]
 112 1096 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 113 109a 6FF00101 	    mvn r1,#1
 114 109e 00EA0100 	    and r0,r1 // clear error flag 
 115 10a2 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 116 10a6 51E0     	    b 9f 
 117              	parity_bit:
 118 10a8 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 119 10ac 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 120 10b0 4CD0     	    beq 9f  
 121 10b2 01F10101 	    add r1,#1 
 122 10b6 84F87710 	    strb r1,[UP,#KBD_PARITY]  
ARM GAS  forth.s 			page 54


 123 10ba 47E0     	    b 9f      
 124              	stop_bit:
 125 10bc 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 126 10c0 40D0     	    beq 8f // error stop bit expected 
 127 10c2 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 128 10c6 11F0010F 	    tst r1,#1 
 129 10ca 3BD0     	    beq 8f // error parity
 130 10cc 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 131 10d0 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 132 10d4 E028     	    cmp r0,#XT_KEY
 133 10d6 04D1     	    bne 1f
 134 10d8 41F04001 	    orr r1,#KBD_F_XT
 135 10dc 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 136 10e0 30E0     	    b 8f  
 137 10e2 11F0800F 	1:  tst r1,#KBD_F_REL
 138 10e6 14D0     	    beq store_code
 139 10e8 5828     	    cmp r0,#SC_CAPS
 140 10ea 04D1     	    bne 1f
 141 10ec 81F00401 	    eor r1,#KBD_F_CAPS
 142 10f0 41F00101 	    orr r1,#KBD_F_CTGL 
 143 10f4 06E0     	    b 2f 
 144 10f6 00B500F0 	1:  _CALL do_async_key 
 144      74F85DF8 
 144      04EB
 145 1100 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 146 1104 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 147 1108 01EA0201 	    and r1,r2
 148 110c 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 149 1110 18E0     	    b 8f
 150              	// store code in queue 
 151              	store_code:
 152 1112 F028     	    cmp r0,#KEY_REL
 153 1114 04D1     	    bne 1f
 154              	// set release flags 
 155 1116 41F08001 	    orr r1,#KBD_F_REL 
 156 111a 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 157 111e 11E0     	    b 8f     
 158 1120 0146     	1:  mov r1,r0 
 159 1122 00B500F0 	    _CALL do_async_key 
 159      5EF85DF8 
 159      04EB
 160 112c 0AD1     	    bne 8f // was async key 
 161 112e D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 162 1132 04F17802 	    add r2,UP,#KBD_QUEUE
 163 1136 1154     	    strb r1,[r2,r0]
 164 1138 00F10100 	    add r0,#1
 165 113c 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 166 1140 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 167 1144 80EA0000 	8:  eor r0,r0 
 168 1148 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 169 114c 7047     	9:  _RET 
 170              	
 171              	/* send bit to keyboard 
 172              	 registers usage:
 173              	    r0 bit shifter 
 174              	    r1 bit counter 
 175              	    r2 output bit 
ARM GAS  forth.s 			page 55


 176              	    r3 GPIOA_BASE_ADR 
 177              	*/
 178              	send_bit:
 179 114e 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 180 1152 01F10100 	    add r0,r1,#1
 181 1156 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 182 115a 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 183 115e 4FF48052 	    mov r2,#(1<<KBD_DATA_PIN)
 184              	//    cbz r1,9f 
 185 1162 0829     	1:  cmp r1,#8 
 186 1164 15D0     	    beq send_parity 
 187 1166 0929     	    cmp r1,#9 
 188 1168 1CD0     	    beq send_stop
 189 116a 0A29     	    cmp r1,#10
 190 116c 21D0     	    beq rx_ack_bit  
 191              	// data bits
 192 116e 10F0010F 	    tst r0,#1
 193 1172 4FEA5000 	    lsr r0,#1
 194 1176 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 195 117a 02D1     	    bne 1f 
 196 117c 4FEA0242 	    lsl r2,#16
 197 1180 05E0     	    b 2f  
 198 1182 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 199 1186 00F10100 	    add r0,#1 
 200 118a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 201 118e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 202 1190 1EE0     	    b 9f 
 203              	send_parity:
 204 1192 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 205 1196 10F0010F 	    tst r0,#1
 206 119a 01D0     	    beq 1f 
 207 119c 4FEA0242 	    lsl r2,#16
 208 11a0 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 209 11a2 15E0     	    b 9f 
 210              	send_stop:
 211              	//    str r2,[r3,#GPIO_BSRR]
 212              	// release data pin 
 213 11a4 6FF04070 	    mvn r0,#(3<<(2*KBD_DATA_PIN))
 214 11a8 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 11aa 01EA0001 	    and r1,r0 
 216 11ae 1960     	    str r1,[r3,#GPIO_MODER]
 217 11b0 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 11b2 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 11b6 6FF00201 	    mvn r1,#KBD_TX 
 221 11ba 00EA0100 	    and r0,r1 
 222 11be 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 11c0 11F4805F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 11c4 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 11c8 80EA0000 	    eor r0,r0 
 226 11cc 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 11d0 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
ARM GAS  forth.s 			page 56


 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 11d2 02B4     	    push {r1}
 238 11d4 FB49     	    ldr r1,=async_keys
 239 11d6 00B500F0 	    _CALL table_scan
 239      7DF85DF8 
 239      04EB
 240 11e0 02BC     	    pop {r1}
 241 11e2 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 11e4 00B5FFF7 	    _CALL is_async_key  
 254      F4FF5DF8 
 254      04EB
 255 11ee FF28     	    cmp r0,#255
 256 11f0 01D1     	    bne set_async_key 
 257 11f2 0020     	    movs r0,#0 
 258 11f4 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 11f6 06B4     	    push {r1,r2}
 262 11f8 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 11fc F249     	    ldr r1,=async_jump 
 264 11fe D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1202 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1206 04E0     	    b set_reset
 268              	ctrl_key:
 269 1208 4FF01000 	    mov r0,#KBD_F_CTRL
 270 120c 01E0     	    b set_reset 
 271              	alt_key:
 272 120e 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 1212 12F0800F 	    tst r2,#KBD_F_REL 
 275 1216 04D0     	    beq 1f 
 276 1218 6FEA0000 	    mvn r0,r0
 277 121c 02EA0002 	    and r2,r0
 278 1220 01E0     	    b 2f
 279 1222 42EA0002 	1:  orr r2,r0 
 280 1226 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 122a 5FF0FF30 	    movs r0,#-1
 282 122e 06BC     	9:  pop {r1,r2}
 283 1230 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
ARM GAS  forth.s 			page 57


 286              	async_keys:
 287 1232 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1234 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1236 1401     	    .byte SC_LCTRL,1  // left control 
 290 1238 1401     	    .byte SC_RCTRL,1  // right control 
 291 123a 1102     	    .byte SC_LALT,2  // left alt 
 292 123c 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 123e 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1240 00       	    .byte 0 // shift  key 
 297 1241 03       	    .byte (ctrl_key-shift_key)/2
 298 1242 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1243 00       	    _GBL_FUNC kbd_init 
 308              	// interrupt triggered on falling edge 
 309 1244 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 309      C4F20102 
 310 124c 4FF40060 	   mov r0,#(1<<KBD_CLOCK_PIN)
 311 1250 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 312 1252 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 313 1254 80EA0000 	   eor r0,r0 
 314 1258 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 315 125c C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 316              	// enable interrupt EXTI15_10_IRQ in NVIC 
 317 1260 4FF02800 	   mov r0,#EXTI15_10_IRQ
 318 1264 4FF00101 	   mov r1,#1 
 319 1268 00B5FFF7 	   _CALL nvic_set_priority
 319      11F85DF8 
 319      04EB
 320 1272 4FF02800 	   mov r0,#EXTI15_10_IRQ
 321 1276 00B5FFF7 	   _CALL nvic_enable_irq 
 321      23F85DF8 
 321      04EB
 322 1280 7047     	   _RET 
 323              	
 324              	// KEY-ASYNC ( -- n )
 325              	// return async key flags 
 326 1282 5E0E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 326      094B4559 
 326      2D415359 
 326      4E43
 327 1290 47F8046D 	    _PUSH 
 328 1294 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 329 1298 06F0FC06 	    and TOS,#0xFC  
 330 129c ACE1     	    _NEXT 
 331              	
 332              	// KEYCODE 
 333              	// extract keyboard scancode from queue.
 334              	// output:
ARM GAS  forth.s 			page 58


 335              	//        T0  keycode | 0 
 336              	keycode: 
 337 129e 0EB4     	    push {T1,T2,T3}
 338 12a0 80EA0000 	    eor T0,T0  
 339 12a4 04F17803 	    add T3,UP,#KBD_QUEUE
 340 12a8 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 341 12ac D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 342 12b0 9142     	    cmp T1,T2 
 343 12b2 06D0     	    beq 2f  
 344 12b4 585C     	    ldrb T0,[T3,T1]
 345 12b6 01F10101 	    add T1,#1 
 346 12ba 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 347 12be C4F88810 	    str T1,[UP,#KBD_QHEAD]
 348 12c2 0EBC     	2:  pop {T1,T2,T3}
 349 12c4 7047     	    _RET 
 350              	
 351              	wait_code:
 352 12c6 00B5FFF7 	    _CALL keycode 
 352      E9FF5DF8 
 352      04EB
 353 12d0 0000     	    movs T0,T0
 354 12d2 F8D0     	    beq wait_code  
 355 12d4 7047     	    _RET 
 356              	
 357              	// translation table scan 
 358              	// input:
 359              	//      T0   target code 
 360              	//      T1   table pointer 
 361              	// output: 
 362              	//        T0   0 | code
 363              	//        Z flag  
 364              	table_scan:
 365 12d6 04B4     	    push {T2}
 366 12d8 11F8012B 	1:  ldrb T2,[T1],#1
 367 12dc 22B1     	    cbz T2,2f 
 368 12de 8242     	    cmp T2,T0
 369 12e0 02D0     	    beq 2f 
 370 12e2 01F10101 	    add T1,#1 
 371 12e6 F7E7     	    b 1b 
 372 12e8 0878     	2:  ldrb T0,[T1]
 373 12ea 0000     	    movs T0,T0 // set/reset zero flag 
 374 12ec 04BC     	9:  pop {T2}
 375 12ee 7047     	    _RET 
 376              	
 377              	/**********************************
 378              	   PS2-KEY? ( -- key -1 | 0 )
 379              	   get a character from keyboard
 380              	   don't wait for it.
 381              	*********************************/
 382 12f0 86120000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 382      08505332 
 382      2D4B4559 
 382      3F0000BF 
 383 1300 47F8046D 	    _PUSH 
 384 1304 86EA0606 	    eor TOS,TOS 
 385 1308 B049     	    ldr T1,=sc_ascii // translation table
 386 130a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 59


 387 130e 4FF04002 	    mov T2,#KBD_F_XT 
 388 1312 1042     	    tst T0,T2
 389 1314 00D0     	    beq 1f
 390 1316 AE49     	    ldr T1,=extended // extended code translation
 391 1318 00B5FFF7 	1:  _CALL keycode
 391      C0FF5DF8 
 391      04EB
 392 1322 98B1     	    cbz T0,inkey_exit
 393 1324 E128     	    cmp T0,#XT2_KEY // pause 
 394 1326 12D0     	    beq pause_key
 395 1328 00B5FFF7 	    _CALL table_scan 
 395      D4FF5DF8 
 395      04EB
 396 1332 0646     	    mov TOS,T0
 397 1334 00B500F0 	    _CALL do_modifiers
 397      14F85DF8 
 397      04EB
 398 133e 032E     	    cmp TOS,#VK_CTRL_C 
 399 1340 3EF4C8AE 	    beq user_reboot 
 400 1344 47F8046D 	    _PUSH 
 401 1348 4FF0FF36 	    mov TOS,#-1
 402              	inkey_exit:     
 403 134c 54E1     	    _NEXT
 404              	pause_key: // discard next 7 codes 
 405 134e 4FF00701 	    mov T1,#7 
 406 1352 00B5FFF7 	1:  _CALL wait_code 
 406      B7FF5DF8 
 406      04EB
 407 135c 0139     	    subs T1,#1
 408 135e F8D1     	    bne 1b 
 409 1360 4AE1     	    _NEXT 
 410              	
 411              	// check for modifiers flags 
 412              	// and process it.
 413              	do_modifiers:
 414 1362 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 415 1366 10F0080F 	    tst T0,#KBD_F_SHIFT 
 416 136a 06D1     	    bne shift_down 
 417 136c 10F0200F 	    tst T0,#KBD_F_ALT  
 418 1370 06D1     	    bne altchar_down 
 419 1372 10F0100F 	    tst T0,#KBD_F_CTRL
 420 1376 06D1     	    bne ctrl_down 
 421 1378 0DE0     	    b 9f 
 422              	shift_down:
 423 137a 3046     	    mov T0,TOS 
 424 137c 9549     	    ldr T1,=shifted 
 425 137e 04E0     	    b 8f 
 426              	altchar_down:
 427 1380 3046     	    mov T0,TOS 
 428 1382 9549     	    ldr T1,=altchar
 429 1384 01E0     	    b 8f
 430              	ctrl_down:
 431 1386 3046     	    mov T0,TOS 
 432 1388 9449     	    ldr T1,=controls 
 433 138a 00B5FFF7 	8:  _CALL table_scan
 433      A3FF5DF8 
 433      04EB
ARM GAS  forth.s 			page 60


 434 1394 0646     	    mov TOS,T0
 435 1396 00B500F0 	9:  _CALL do_capslock 
 435      03F85DF8 
 435      04EB
 436 13a0 7047     	    _RET 
 437              	
 438              	do_capslock:
 439 13a2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 440 13a6 10F0040F 	    tst T0,#KBD_F_CAPS 
 441 13aa 0BD0     	    beq 9f 
 442 13ac 412E     	    cmp TOS,#'A'
 443 13ae 09D4     	    bmi 9f 
 444 13b0 5B2E     	    cmp TOS,#'Z'+1 
 445 13b2 03D4     	    bmi 3f 
 446 13b4 612E     	    cmp TOS,#'a'
 447 13b6 05D4     	    bmi 9f 
 448 13b8 7B2E     	    cmp TOS,#'z'+1
 449 13ba 03D5     	    bpl 9f 
 450 13bc 4FF02000 	3:  mov T0,#(1<<5)
 451 13c0 86EA0006 	    eor TOS,T0 
 452 13c4 7047     	9:  _RET 
 453              	
 454              	
 455              	
 456              	/***************************
 457              	 send byte do keyboard
 458              	 input:
 459              	    r0  byte to send 
 460              	 use: 
 461              	    r1,r2 temp 
 462              	    r3 GPIOA_BASE_ADR 
 463              	***************************/
 464              	kbd_send:
 465 13c6 0FB4     	    push {r0,r1,r2,r3}
 466              	// wait pre-video phase
 467              	// for least video output disturbance
 468 13c8 A06E     	1:  ldr r0,[UP,#VID_STATE]
 469 13ca 0128     	    cmp r0,ST_PREVID 
 470 13cc FCD1     	    bne 1b
 471              	// disable video interrupt 
 472 13ce 4FF01D00 	    mov r0,#TIM3_IRQ 
 473 13d2 00B5FEF7 	    _CALL nvic_disable_irq
 473      8AFF5DF8 
 473      04EB
 474              	// take control of keyboard clock line  
 475 13dc 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
 475      C4F20203 
 476 13e4 1846     	    mov r0,r3 
 477 13e6 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 478 13ea 4FF01102 	    mov r2,#OUTPUT_OD
 479 13ee 00B5FEF7 	    _CALL gpio_config 
 479      93FF5DF8 
 479      04EB
 480 13f8 1846     	    mov r0,r3 
 481 13fa 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 482 13fe 82EA0202 	    eor r2,r2 
 483 1402 00B5FEF7 	    _CALL gpio_out 
ARM GAS  forth.s 			page 61


 483      DFFF5DF8 
 483      04EB
 484              	// delay to hold clock line to 0 for 150Âµsec     
 485 140c 4FF4E150 	    mov r0,#150*48
 486 1410 0138     	1:  subs r0,#1 
 487 1412 FDD1     	    bne 1b
 488 1414 01BC     	    pop {r0}
 489 1416 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 490 141a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 491 141e 40F00200 	    orr r0,#KBD_TX 
 492 1422 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 493 1426 80EA0000 	    eor r0,r0 
 494 142a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 495 142e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 496              	// take control of data line 
 497              	// and put it to 0 for start bit.    
 498 1432 1846     	    mov r0,r3 
 499 1434 4FF00C01 	    mov r1,#KBD_DATA_PIN  
 500 1438 4FF01102 	    mov r2,#OUTPUT_OD 
 501 143c 00B5FEF7 	    _CALL gpio_config 
 501      6CFF5DF8 
 501      04EB
 502 1446 1846     	    mov r0,r3 
 503 1448 4FF00C01 	    mov r1,#KBD_DATA_PIN 
 504 144c 82EA0202 	    eor r2,r2 
 505 1450 00B5FEF7 	    _CALL gpio_out
 505      B8FF5DF8 
 505      04EB
 506              	// release clock line 
 507 145a 1846     	    mov r0,r3 
 508 145c 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 509 1460 4FF00002 	    mov r2,#INPUT_FLOAT
 510 1464 00B5FEF7 	    _CALL gpio_config
 510      58FF5DF8 
 510      04EB
 511              	// wait send completed 
 512 146e 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 513 1472 10F0020F 	    tst r0,#KBD_TX
 514 1476 FAD1     	    bne 2b 
 515              	// enable video interrupt     
 516 1478 4FF01D00 	    mov r0,#TIM3_IRQ
 517 147c 00B5FEF7 	    _CALL nvic_enable_irq
 517      20FF5DF8 
 517      04EB
 518 1486 0EBC     	    pop {r1,r2,r3}
 519 1488 7047     	    _RET 
 520              	
 521              	 
 522              	// flush keyboard queue 
 523              	kbd_clear_queue:
 524 148a 80EA0000 	    eor T0,T0 
 525 148e C4F88800 	    str T0,[UP,#KBD_QHEAD]
 526 1492 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 527 1496 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 528 149a 6FF00301 	    mvn T1,#3
 529 149e 00EA0100 	    and T0,T1 
 530 14a2 84F87600 	    strb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 62


 531 14a6 7047     	    _RET 
 532              	
 533              	/**********************************
 534              	 KBD-RST ( -- c )
 535              	 send a reset command to keyboard
 536              	**********************************/
 537 14a8 F4120000 	    _HEADER KBD_RST,7,"KBD-RST"
 537      074B4244 
 537      2D525354 
 538 14b4 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 539 14b8 00B5FFF7 	    _CALL kbd_send
 539      84FF5DF8 
 539      04EB
 540 14c2 00B5FFF7 	    _CALL kbd_clear_queue
 540      E1FF5DF8 
 540      04EB
 541 14cc 00B5FFF7 	    _CALL wait_code 
 541      FAFE5DF8 
 541      04EB
 542 14d6 FE28     	    cmp r0,KBD_CMD_RESEND
 543 14d8 ECD0     	    beq 1b 
 544 14da 4FF4FA70 	    mov T0,#500 
 545 14de E060     	    str T0,[UP,#CD_TIMER]
 546 14e0 00B5FFF7 	2:  _CALL keycode
 546      DCFE5DF8 
 546      04EB
 547 14ea 10B9     	    cbnz T0,3f
 548 14ec E068     	    ldr T0,[UP,#CD_TIMER]
 549 14ee 0028     	    cmp T0,#0 
 550 14f0 F6D1     	    bne 2b 
 551 14f2 47F8046D 	3:  _PUSH 
 552 14f6 0646     	    mov TOS,T0  
 553 14f8 7EE0     	    _NEXT 
 554              	
 555              	/*****************************
 556              	 KBD-LED ( c -- )
 557              	 send command to control
 558              	 keyboard LEDS 
 559              	*****************************/
 560 14fa AC140000 	    _HEADER KBD_LED,7,"KBD-LED"
 560      074B4244 
 560      2D4C4544 
 560      00BF
 561 1508 00B5FFF7 	1:  _CALL kbd_clear_queue
 561      BEFF5DF8 
 561      04EB
 562 1512 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 563 1516 00B5FFF7 	    _CALL kbd_send
 563      55FF5DF8 
 563      04EB
 564 1520 00B5FFF7 	2:  _CALL wait_code 
 564      D0FE5DF8 
 564      04EB
 565 152a FE28     	    cmp T0,#KBD_CMD_RESEND
 566 152c ECD0     	    beq 1b
 567 152e FA28     	    cmp T0,#KBD_ACK  
 568 1530 F6D1     	    bne 2b 
ARM GAS  forth.s 			page 63


 569 1532 3046     	2:  mov T0,TOS 
 570 1534 00F00700 	    and T0,#7 
 571 1538 00B5FFF7 	    _CALL kbd_send 
 571      44FF5DF8 
 571      04EB
 572 1542 00B5FFF7 	3:  _CALL wait_code 
 572      BFFE5DF8 
 572      04EB
 573 154c FE28     	    cmp T0,#KBD_CMD_RESEND 
 574 154e F0D0     	    beq 2b
 575 1550 FA28     	    cmp T0,#KBD_ACK 
 576 1552 F6D1     	    bne 3b  
 577 1554 57F8046B 	    _POP 
 578 1558 4EE0     	    _NEXT 
 579              	
 580              	/**************************
 581              	 CAPS-LED ( -- )
 582              	 synch capslock LED
 583              	 to KBD_F_CAPS 
 584              	**************************/
 585 155a FE140000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 585      08434150 
 585      532D4C45 
 585      4400
 586 1568 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 587 156c 10F0010F 	    tst T0,#1
 588 1570 00D1     	    bne 1f 
 589 1572 41E0     	    _NEXT 
 590 1574 47F8046D 	1: _PUSH 
 591 1578 6FF00101 	    mvn T1,#1 
 592 157c 00EA0100 	    and T0,T1 
 593 1580 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 594 1584 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 595 1588 48F804CD 	    _CALL_COLWORD 1f
 595      DFF850C0 
 595      32E0
 596 1592 09150000 	1:  _ADR KBD_LED       
 597 1596 FF150000 	    _UNNEST
 598              	
 599              	/************************
 600              	 WAIT-KEY ( -- c )
 601              	 wait for keyboard key 
 602              	*************************/
 603 159a 5E150000 	    _HEADER WKEY,8,"WAIT-KEY"
 603      08574149 
 603      542D4B45 
 603      5900
 604 15a8 504700BF 	    _NEST
 605 15ac 69150000 	1:  _ADR CAPS_LED  
 606 15b0 01130000 	    _ADR PS2_QKEY 
 607 15b4 7D1A0000 	    _ADR QDUP 
 608 15b8 B7170000 	    _QBRAN 1b  
 608      AC150000 
 609 15c0 FF150000 	    _UNNEST 
 610 15c4 32120000 	
 610      40120000 
 610      A00E0000 
ARM GAS  forth.s 			page 64


 610      C40F0000 
 610      540F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/*****************************************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
ARM GAS  forth.s 			page 65


  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	//  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// PUSH TOS, to be used in colon definition 
  83              	TPUSH:
  84 15e4 47F8046D 		_PUSH
  85 15e8 06E0     		_NEXT
  86              	
  87              	// POP TOS, to be used in colon defintion  
  88              	TPOP:
  89 15ea 57F8046B 		_POP 
  90 15ee 03E0     		_NEXT
  91              	
  92              	// hi level word enter 
  93              	NEST: 
  94 15f0 48F804CD 		STMFD	RSP!,{IP}
  95 15f4 05F1030C 		ADD IP,WP,#3
  96              	// inner interprer
  97              	INEXT: 
  98 15f8 5CF8045B 		LDR WP,[IP],#4 
  99 15fc 2847     		BX WP  
 100              	UNNEST:
 101 15fe 58F804CB 		LDMFD RSP!,{IP}
 102 1602 5CF8045B 		LDR WP,[IP],#4 
 103 1606 2847     		BX WP  
 104              	
 105              		.p2align 2 
 106              	
 107              	// compile "BX 	INX" 
 108              	// this is the only way 
 109              	// a colon defintion in RAM 
 110              	// can jump to NEST
 111              	// INX is initialized to NEST address 
 112              	// and must be preserved   
ARM GAS  forth.s 			page 66


 113              	COMPI_NEST:
 114 1608 04F14401 		add T1,UP,#USER_CTOP 
 115 160c 0968     		ldr T1,[T1]
 116 160e 44F25072 		mov T2,#0x4700+(10<<3)
 117 1612 21F8022B 		strh T2,[T1],#2
 118 1616 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 119 161a 21F8022B 		strh T2,[T1],#2 
 120 161e 04F14402 		add T2,UP,#USER_CTOP 
 121 1622 1160     		str T1,[T2]
 122 1624 E8E7     		_NEXT  
 123              	
 124              	// ' STDIN 
 125              	// stdin vector 
 126              	TSTDIN:
 127 1626 47F8046D 		_PUSH 
 128 162a 04F11406 		ADD TOS,UP,#STDIN 
 129 162e E3E7     		_NEXT 
 130              	
 131              	// ' STDOUT 
 132              	// stdout vector 
 133              	TSTDOUT:
 134 1630 47F8046D 		_PUSH 
 135 1634 04F11806 		ADD TOS,UP,#STDOUT
 136 1638 DEE7     		_NEXT 
 137              		
 138              	/********************************************
 139              		KEY? ( -- c T | F )
 140              		check if available character 
 141              	********************************************/
 142 163a 9E150000 		_HEADER QKEY,4,"KEY?"
 142      044B4559 
 142      3F00
 143              	QRX: 
 144 1644 504700BF 		_NEST 
 145 1648 27160000 		_ADR TSTDIN // ' STDIN 
 146 164c 55200000 		_ADR ATEXE
 147 1650 FF150000 		_UNNEST 
 148              	
 149              	/********************************************
 150              	    KEY	 ( -- c )
 151              	 	Wait for and return an input character.
 152              	********************************************/
 153 1654 3E160000 		_HEADER KEY,3,"KEY"
 153      034B4559 
 154 165c 504700BF 		_NEST
 155              	KEY1:
 156 1660 69150000 		_ADR CAPS_LED 
 157 1664 45160000 		_ADR	QRX
 158 1668 B7170000 		_QBRAN	KEY1
 158      60160000 
 159 1670 FF150000 		_UNNEST
 160              	
 161              	/**********************************************
 162              		EMIT ( c -- )
 163              		transmit a character to console 
 164              	**********************************************/
 165 1674 58160000 		_HEADER EMIT,4,"EMIT"
ARM GAS  forth.s 			page 67


 165      04454D49 
 165      540000BF 
 166              	TECHO:
 167 1680 504700BF 		_NEST 
 168 1684 31160000 		_ADR TSTDOUT 
 169 1688 55200000 		_ADR ATEXE 
 170 168c FF150000 		_UNNEST 
 171              	
 172              	
 173              	/************************************************
 174              	 GET-IP ( n - c )
 175              	 return interrupt priority of IRQn 
 176              	************************************************/
 177              	/*
 178              		_HEADER GETIP,6,"GET-IP" 
 179              		_NEST 
 180              		_ADR DUPP 
 181              		_ADR ZLESS
 182              		_QBRAN 1f 
 183              		_DOLIT 15
 184              		_ADR ANDD
 185              		_DOLIT 4
 186              		_ADR SUBB  
 187              		_DOLIT 0xE000ED18 
 188              		_BRAN 2f 
 189              	1:	_DOLIT 0xE000E400 
 190              	2:	_ADR PLUS 
 191              		_ADR CAT
 192              		_DOLIT 4 
 193              		_ADR RSHIFT 
 194              		_UNNEST 
 195              	*/
 196              	
 197              	/***********************************************
 198              	 RANDOM ( n+ -- {0..n+ - 1} )
 199              	 return pseudo random number 
 200              	 REF: https://en.wikipedia.org/wiki/Xorshift
 201              	************************************************/
 202 1690 78160000 		_HEADER RAND,6,"RANDOM"
 202      0652414E 
 202      444F4D00 
 203 169c 504700BF 		_NEST
 204 16a0 351B0000 		_ADR ABSS   
 205 16a4 751C0000 		_ADR SEED 
 206 16a8 FD170000 		_ADR AT 
 207 16ac A9180000 		_ADR DUPP 
 208 16b0 77170000 		_DOLIT 13
 208      0D000000 
 209 16b8 5D190000 		_ADR LSHIFT 
 210 16bc 15190000 		_ADR XORR  
 211 16c0 A9180000 		_ADR DUPP 
 212 16c4 77170000 		_DOLIT 17 
 212      11000000 
 213 16cc 45190000 		_ADR RSHIFT 
 214 16d0 15190000 		_ADR XORR 
 215 16d4 A9180000 		_ADR DUPP
 216 16d8 77170000 		_DOLIT 5 
ARM GAS  forth.s 			page 68


 216      05000000 
 217 16e0 5D190000 		_ADR LSHIFT 
 218 16e4 15190000 		_ADR XORR  
 219 16e8 A9180000 		_ADR DUPP 
 220 16ec 751C0000 		_ADR SEED 
 221 16f0 E9170000 		_ADR STORE 
 222 16f4 77170000 		_DOLIT 0x7FFFFFFF
 222      FFFFFF7F 
 223 16fc ED180000 		_ADR ANDD 
 224 1700 B9180000 		_ADR SWAP 
 225 1704 D91E0000 		_ADR MODD 
 226 1708 FF150000 		_UNNEST 
 227              	
 228              	
 229              	/****************************************
 230              	 PAUSE ( u -- ) 
 231              	 suspend execution for u milliseconds
 232              	****************************************/
 233 170c 94160000 		_HEADER PAUSE,5,"PAUSE"
 233      05504155 
 233      534500BF 
 234 1718 504700BF 		_NEST 
 235 171c 9D1C0000 		_ADR TIMER 
 236 1720 E9170000 		_ADR STORE 
 237              	PAUSE_LOOP:
 238 1724 9D1C0000 		_ADR TIMER 
 239 1728 FD170000 		_ADR AT 
 240 172c B7170000 		_QBRAN PAUSE_EXIT 
 240      3C170000 
 241 1734 CB170000 		_BRAN PAUSE_LOOP 
 241      24170000 
 242              	PAUSE_EXIT: 		
 243 173c FF150000 		_UNNEST 
 244              	
 245              	/******************************************
 246              	  ULED ( T|F -- )
 247              	  control user LED, -1 ON, 0 OFF 
 248              	*******************************************/
 249 1740 10170000 		_HEADER ULED,4,"ULED"
 249      04554C45 
 249      440000BF 
 250 174c 4FF40050 		mov T0,#(1<<LED_PIN)
 251 1750 4FF40061 		_MOV32 T1,LED_GPIO 
 251      C4F20201 
 252 1758 3600     		movs TOS,TOS 
 253 175a 57F8046B 		_POP
 254 175e 03D0     		beq ULED_OFF
 255 1760 4FEA0040 		lsl T0,#16 
 256 1764 8861     		str T0,[T1,#GPIO_BSRR]
 257 1766 47E7     		_NEXT 
 258              	ULED_OFF:
 259 1768 8861     		str T0,[T1,#GPIO_BSRR]
 260 176a 45E7     		_NEXT    
 261              	
 262              	
 263              		
 264              	/***************
ARM GAS  forth.s 			page 69


 265              	//  The kernel
 266              	***************/
 267              	
 268              	/********************
 269              	    NOP	( -- )
 270              	 	do nothing.
 271              	*********************/
 272 176c 44170000 		_HEADER NOP,3,"NOP"
 272      034E4F50 
 273 1774 40E7     		_NEXT 
 274              	 
 275              	/********************
 276              	    doLIT	( -- w )
 277              	 	Push an inline literal.
 278              	hidden word used by compiler 
 279              	*********************/
 280              	DOLIT:
 281 1776 47F8046D 		_PUSH				//  store TOS on data stack
 282 177a 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 283 177e 3BE7     		_NEXT 
 284              	
 285              	/*******************************
 286              	    EXECUTE	( ca -- )
 287              	 	Execute the word at ca.
 288              	*******************************/
 289 1780 70170000 		_HEADER EXECU,7,"EXECUTE"
 289      07455845 
 289      43555445 
 290 178c 46F00105 		ORR	WP,TOS,#1 
 291 1790 57F8046B 		_POP
 292 1794 2847     		BX WP 
 293 1796 2FE7     		_NEXT 
 294              	
 295              	/**********************************************************
 296              	    donext	( -- ) counter on R:
 297              	 	Run time code for the single index loop.
 298              	 	: next ( -- ) \ hilevel model
 299              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 300              	hidden word used by compiler 	  
 301              	*********************************************************/
 302              	DONXT:
 303 1798 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 304 179c 22B9     		CBNZ T2,NEXT1 
 305              		/* loop done */
 306 179e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 307 17a2 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 308 17a6 27E7     		_NEXT
 309              	NEXT1:
 310              		/* decrement loop counter */
 311 17a8 A2F10102 		SUB	T2,T2,#1
 312 17ac C8F80020 		STR	T2,[RSP]
 313 17b0 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 314 17b4 20E7     		_NEXT 
 315              	
 316              	/**************************************
 317              	    ?branch	( f -- )
 318              	 	Branch if flag is zero.
ARM GAS  forth.s 			page 70


 319              	hiddend word used by compiler
 320              	**************************************/
 321              	QBRAN:
 322 17b6 3600     		MOVS	TOS,TOS
 323 17b8 57F8046B 		_POP
 324 17bc 02D1     		BNE	QBRAN1
 325 17be DCF800C0 		LDR	IP,[IP]
 326 17c2 19E7     		_NEXT
 327              	QBRAN1:
 328 17c4 0CF1040C 	 	ADD	IP,IP,#4
 329 17c8 16E7     		_NEXT
 330              	
 331              	/***********************************
 332              	    branch	( -- )
 333              	 	Branch to an inline address.
 334              	hidden word used by compiler 
 335              	***********************************/
 336              	BRAN:
 337 17ca DCF800C0 		LDR	IP,[IP]
 338 17ce 13E7     		_NEXT
 339              	
 340              	/******************************************
 341              	    EXIT	(  -- )
 342              	 	Exit the currently executing command.
 343              	******************************************/
 344 17d0 84170000 		_HEADER EXIT,4,"EXIT"
 344      04455849 
 344      540000BF 
 345 17dc FF150000 		_UNNEST
 346              	
 347              	/***********************************
 348              	    !	   ( w a -- )
 349              	 	Pop the data stack to memory.
 350              	************************************/
 351 17e0 D4170000 		_HEADER STORE,1,"!"
 351      012100BF 
 352 17e8 57F8045B 		LDR	WP,[DSP],#4
 353 17ec 3560     		STR	WP,[TOS]
 354 17ee 57F8046B 		_POP
 355 17f2 01E7     		_NEXT 
 356              	
 357              	/********************************************
 358              	    @	   ( a -- w )
 359              	 	Push memory location to the data stack.
 360              	*********************************************/
 361 17f4 E4170000 		_HEADER AT,1,"@"
 361      014000BF 
 362 17fc 3668     		LDR	TOS,[TOS]
 363 17fe FBE6     		_NEXT 
 364              	
 365              	/*******************************************
 366              	    C!	  ( c b -- )
 367              	 	Pop the data stack to byte memory.
 368              	*******************************************/
 369 1800 F8170000 		_HEADER CSTOR,2,"C!"
 369      02432100 
 370 1808 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 71


 371 180c 3570     		STRB WP,[TOS]
 372 180e 57F8046B 		_POP
 373 1812 F1E6     		_NEXT
 374              	
 375              	/*********************************************
 376              	    C@	  ( b -- c )
 377              	 	Push byte memory location to the data stack.
 378              	**********************************************/
 379 1814 04180000 		_HEADER CAT,2,"C@"
 379      02434000 
 380 181c 3678     		LDRB	TOS,[TOS]
 381 181e EBE6     		_NEXT 
 382              	
 383              	/*********************************************
 384              	    R>	  ( -- w )
 385              	 	Pop the return stack to the data stack.
 386              	**********************************************/
 387 1820 18180000 		_HEADER RFROM,2,"R>"
 387      02523E00 
 388 1828 47F8046D 		_PUSH
 389 182c 58F8046B 		LDR	TOS,[RSP],#4
 390 1830 E2E6     		_NEXT 
 391              	
 392              	/************************************************
 393              	    R@	  ( -- w )
 394              	 	Copy top of return stack to the data stack.
 395              	************************************************/
 396 1832 24180000 		_HEADER RAT,2,"R@"
 396      02524000 
 396      00BF
 397 183c 47F8046D 		_PUSH
 398 1840 D8F80060 		LDR	TOS,[RSP]
 399 1844 D8E6     		_NEXT 
 400              	
 401              	/***********************************************
 402              	    >R	  ( w -- )
 403              	 	Push the data stack to the return stack.
 404              	************************************************/
 405 1846 36180000 		_HEADER TOR,2,">R"
 405      023E5200 
 405      00BF
 406 1850 48F8046D 		STR	TOS,[RSP,#-4]!
 407 1854 57F8046B 		_POP
 408 1858 CEE6     		_NEXT
 409              	
 410              	/*******************************
 411              	//	RP! ( u -- )
 412              	// initialize RPP with u 
 413              	*******************************/
 414 185a 4A180000 		_HEADER RPSTOR,3,"RP!"
 414      03525021 
 414      00BF
 415 1864 B046     		MOV RSP,TOS 
 416 1866 57F8046B 		_POP  
 417 186a C5E6     		_NEXT 
 418              	
 419              	/********************************
ARM GAS  forth.s 			page 72


 420              		SP! ( u -- )
 421              	 initialize SPP with u 
 422              	********************************/
 423 186c 5E180000 		_HEADER SPSTOR,3,"SP!"
 423      03535021 
 424 1874 3746     		MOV DSP,TOS 
 425 1876 86EA0606 		EOR TOS,TOS,TOS 
 426 187a BDE6     		_NEXT 
 427              	
 428              	/**************************************
 429              	    SP@	 ( -- a )
 430              	 	Push the current data stack pointer.
 431              	***************************************/
 432 187c 70180000 		_HEADER SPAT,3,"SP@"
 432      03535040 
 433 1884 47F8046D 		_PUSH
 434 1888 3E46     		MOV	TOS,DSP
 435 188a B5E6     		_NEXT
 436              	
 437              	/********************************
 438              	    DROP	( w -- )
 439              	 	Discard top stack item.
 440              	********************************/
 441 188c 80180000 		_HEADER DROP,4,"DROP"
 441      0444524F 
 441      500000BF 
 442 1898 57F8046B 		_POP
 443 189c ACE6     		_NEXT 
 444              	
 445              	/*********************************
 446              	    DUP	 ( w -- w w )
 447              	 	Duplicate the top stack item.
 448              	*********************************/
 449 189e 90180000 		_HEADER DUPP,3,"DUP"
 449      03445550 
 449      00BF
 450 18a8 47F8046D 		_PUSH
 451 18ac A4E6     		_NEXT 
 452              	
 453              	/**********************************
 454              	    SWAP	( w1 w2 -- w2 w1 )
 455              	 	Exchange top two stack items.
 456              	**********************************/
 457 18ae A2180000 		_HEADER SWAP,4,"SWAP"
 457      04535741 
 457      5000
 458 18b8 3D68     		LDR	WP,[DSP]
 459 18ba 3E60     		STR	TOS,[DSP]
 460 18bc 2E46     		MOV	TOS,WP
 461 18be 9BE6     		_NEXT 
 462              	
 463              	/***********************************
 464              	    OVER	( w1 w2 -- w1 w2 w1 )
 465              	 	Copy second stack item to top.
 466              	***********************************/
 467 18c0 B2180000 		_HEADER OVER,4,"OVER"
 467      044F5645 
ARM GAS  forth.s 			page 73


 467      520000BF 
 468 18cc 47F8046D 		_PUSH
 469 18d0 7E68     		LDR	TOS,[DSP,#4]
 470 18d2 91E6     		_NEXT 
 471              	
 472              	/***********************************
 473              	    0<	  ( n -- t )
 474              	 	Return true if n is negative.
 475              	***********************************/
 476 18d4 C4180000 		_HEADER ZLESS,2,"0<"
 476      02303C00 
 477 18dc 4FEAE676 		ASR TOS,#31
 478 18e0 8AE6     		_NEXT 
 479              	
 480              	/********************************
 481              	    AND	 ( w w -- w )
 482              	 	Bitwise AND.
 483              	********************************/
 484 18e2 D8180000 		_HEADER ANDD,3,"AND"
 484      03414E44 
 484      00BF
 485 18ec 57F8045B 		LDR	WP,[DSP],#4
 486 18f0 06EA0506 		AND	TOS,TOS,WP
 487 18f4 80E6     		_NEXT 
 488              	
 489              	/******************************
 490              	    OR	  ( w w -- w )
 491              	 	Bitwise inclusive OR.
 492              	******************************/
 493 18f6 E6180000 		_HEADER ORR,2,"OR"
 493      024F5200 
 493      00BF
 494 1900 57F8045B 		LDR	WP,[DSP],#4
 495 1904 46EA0506 		ORR	TOS,TOS,WP
 496 1908 76E6     		_NEXT 
 497              	
 498              	/*****************************
 499              	    XOR	 ( w w -- w )
 500              	 	Bitwise exclusive OR.
 501              	*****************************/
 502 190a FA180000 		_HEADER XORR,3,"XOR"
 502      03584F52 
 502      00BF
 503 1914 57F8045B 		LDR	WP,[DSP],#4
 504 1918 86EA0506 		EOR	TOS,TOS,WP
 505 191c 6CE6     		_NEXT 
 506              	
 507              	/**************************************************
 508              	    UM+	 ( w w -- w cy )
 509              	 	Add two numbers, return the sum and carry flag.
 510              	***************************************************/
 511 191e 0E190000 		_HEADER UPLUS,3,"UM+"
 511      03554D2B 
 511      00BF
 512 1928 3D68     		LDR	WP,[DSP]
 513 192a AD19     		ADDS	WP,WP,TOS
 514 192c 4FF00006 		MOV	TOS,#0
ARM GAS  forth.s 			page 74


 515 1930 46F10006 		ADC	TOS,TOS,#0
 516 1934 3D60     		STR	WP,[DSP]
 517 1936 5FE6     		_NEXT 
 518              	
 519              	/*********************************
 520              	    RSHIFT	 ( w # -- w )
 521              	 	arithmetic Right shift # bits.
 522              	**********************************/
 523 1938 22190000 		_HEADER RSHIFT,6,"RSHIFT"
 523      06525348 
 523      49465400 
 524 1944 57F8045B 		LDR	WP,[DSP],#4
 525 1948 45FA06F6 		MOV	TOS,WP,ASR TOS
 526 194c 54E6     		_NEXT 
 527              	
 528              	/****************************
 529              	    LSHIFT	 ( w # -- w )
 530              	 	Right shift # bits.
 531              	****************************/
 532 194e 3C190000 		_HEADER LSHIFT,6,"LSHIFT"
 532      064C5348 
 532      49465400 
 532      00BF
 533 195c 57F8045B 		LDR	WP,[DSP],#4
 534 1960 05FA06F6 		MOV	TOS,WP,LSL TOS
 535 1964 48E6     		_NEXT
 536              	
 537              	/*************************
 538              	    +	 ( w w -- w )
 539              	 	Add.
 540              	*************************/
 541 1966 52190000 		_HEADER PLUS,1,"+"
 541      012B
 542 196c 57F8045B 		LDR	WP,[DSP],#4
 543 1970 2E44     		ADD	TOS,TOS,WP
 544 1972 41E6     		_NEXT 
 545              	
 546              	/************************
 547              	    -	 ( w w -- w )
 548              	 	Subtract.
 549              	************************/
 550 1974 6A190000 		_HEADER SUBB,1,"-"
 550      012D00BF 
 551 197c 57F8045B 		LDR	WP,[DSP],#4
 552 1980 C6EB0506 		RSB	TOS,TOS,WP
 553 1984 38E6     		_NEXT 
 554              	
 555              	/************************
 556              	    *	 ( w w -- w )
 557              	 	Multiply.
 558              	***********************/
 559 1986 78190000 		_HEADER STAR,1,"*"
 559      012A
 560 198c 57F8045B 		LDR	WP,[DSP],#4
 561 1990 05FB06F6 		MUL	TOS,WP,TOS
 562 1994 30E6     		_NEXT 
 563              	
ARM GAS  forth.s 			page 75


 564              	/***************************
 565              	    UM*	 ( w w -- ud )
 566              	 	Unsigned multiply.
 567              	****************************/
 568 1996 8A190000 		_HEADER UMSTA,3,"UM*"
 568      03554D2A 
 568      00BF
 569 19a0 3D68     		LDR	WP,[DSP]
 570 19a2 A6FB0523 		UMULL	T2,T3,TOS,WP
 571 19a6 3A60     		STR	T2,[DSP]
 572 19a8 1E46     		MOV	TOS,T3
 573 19aa 25E6     		_NEXT 
 574              	
 575              	/***************************
 576              	    M*	 ( w w -- d )
 577              	 	signed multiply.
 578              	***************************/
 579 19ac 9A190000 		_HEADER MSTAR,2,"M*"
 579      024D2A00 
 580 19b4 3D68     		LDR	WP,[DSP]
 581 19b6 86FB0523 		SMULL	T2,T3,TOS,WP
 582 19ba 3A60     		STR	T2,[DSP]
 583 19bc 1E46     		MOV	TOS,T3
 584 19be 1BE6     		_NEXT 
 585              	
 586              	/***************************
 587              	    1+	 ( w -- w+1 )
 588              	 	Add 1.
 589              	***************************/
 590 19c0 B0190000 		_HEADER ONEP,2,"1+"
 590      02312B00 
 591 19c8 06F10106 		ADD	TOS,TOS,#1
 592 19cc 14E6     		_NEXT 
 593              	
 594              	/***************************
 595              	    1-	 ( w -- w-1 )
 596              	 	Subtract 1.
 597              	***************************/
 598 19ce C4190000 		_HEADER ONEM,2,"1-"
 598      02312D00 
 598      00BF
 599 19d8 A6F10106 		SUB	TOS,TOS,#1
 600 19dc 0CE6     		_NEXT 
 601              	
 602              	/***************************
 603              	    2+	 ( w -- w+2 )
 604              	 	Add 2.
 605              	**************************/
 606 19de D2190000 		_HEADER TWOP,2,"2+"
 606      02322B00 
 606      00BF
 607 19e8 06F10206 		ADD	TOS,TOS,#2
 608 19ec 04E6     		_NEXT
 609              	
 610              	/**************************
 611              	    2-	 ( w -- w-2 )
 612              	 	Subtract 2.
ARM GAS  forth.s 			page 76


 613              	**************************/
 614 19ee E2190000 		_HEADER TWOM,2,"2-"
 614      02322D00 
 614      00BF
 615 19f8 A6F10206 		SUB	TOS,TOS,#2
 616 19fc FCE5     		_NEXT
 617              	
 618              	/***************************
 619              	    CELL+	( w -- w+4 )
 620              	 	Add CELLL.
 621              	***************************/
 622 19fe F2190000 		_HEADER CELLP,5,"CELL+"
 622      0543454C 
 622      4C2B
 623 1a08 06F10406 		ADD	TOS,TOS,#CELLL
 624 1a0c F4E5     		_NEXT
 625              	
 626              	/***************************
 627              	    CELL-	( w -- w-4 )
 628              	 	Subtract CELLL.
 629              	**************************/
 630 1a0e 021A0000 		_HEADER CELLM,5,"CELL-"
 630      0543454C 
 630      4C2D
 631 1a18 A6F10406 		SUB	TOS,TOS,#CELLL
 632 1a1c ECE5     		_NEXT
 633              	
 634              	/**************************** 
 635              	    BL	( -- 32 )
 636              	 	Blank (ASCII space).
 637              	*****************************/
 638 1a1e 121A0000 		_HEADER BLANK,2,"BL"
 638      02424C00 
 638      00BF
 639 1a28 47F8046D 		_PUSH
 640 1a2c 4FF02006 		MOV	TOS,#32
 641 1a30 E2E5     		_NEXT 
 642              	
 643              	/**************************
 644              	    CELLS	( w -- w*4 )
 645              	 	Multiply CELLL 
 646              	***************************/
 647 1a32 221A0000 		_HEADER CELLS,5,"CELLS"
 647      0543454C 
 647      4C53
 648 1a3c 4FEA8606 		LSL TOS,#2
 649 1a40 DAE5     		_NEXT
 650              	
 651              	/***************************
 652              	    CELL/	( w -- w/4 )
 653              	 	Divide by CELLL.
 654              	***************************/
 655 1a42 361A0000 		_HEADER CELLSL,5,"CELL/"
 655      0543454C 
 655      4C2F
 656 1a4c 4FEAA606 		ASR TOS,#2
 657 1a50 D2E5     		_NEXT
ARM GAS  forth.s 			page 77


 658              	
 659              	/*************************
 660              	    2*	( w -- w*2 )
 661              	 	Multiply 2.
 662              	*************************/
 663 1a52 461A0000 		_HEADER TWOST,2,"2*"
 663      02322A00 
 663      00BF
 664 1a5c 4FEA4606 		MOV	TOS,TOS,LSL#1
 665 1a60 CAE5     		_NEXT
 666              	
 667              	/*************************
 668              	    2/	( w -- w/2 )
 669              	 	Divide by 2.
 670              	***********************/
 671 1a62 561A0000 		_HEADER TWOSL,2,"2/"
 671      02322F00 
 671      00BF
 672 1a6c 4FEA6606 		MOV	TOS,TOS,ASR#1
 673 1a70 C2E5     		_NEXT
 674              	
 675              	/****************************
 676              	    ?DUP	( w -- w w | 0 )
 677              	 	Conditional duplicate.
 678              	*****************************/
 679 1a72 661A0000 		_HEADER QDUP,4,"?DUP"
 679      043F4455 
 679      5000
 680 1a7c 3500     		MOVS	WP,TOS
 681 1a7e 18BF     		IT NE 
 682 1a80 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 683 1a84 B8E5     		_NEXT
 684              	
 685              	/***********************************
 686              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 687              	 	Rotate top 3 items.
 688              	*************************************/
 689 1a86 761A0000 		_HEADER ROT,3,"ROT"
 689      03524F54 
 689      00BF
 690 1a90 3868     		LDR	T0,[DSP]  // w2 
 691 1a92 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 692 1a94 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 693 1a96 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 694 1a98 AEE5     		_NEXT
 695              	
 696              	/*********************************
 697              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 698              	 left rotate top 3 elements 
 699              	********************************/
 700 1a9a 8A1A0000 		_HEADER NROT,4,"-ROT"
 700      042D524F 
 700      5400
 701 1aa4 7868     		LDR T0,[DSP,#4]
 702 1aa6 7E60     		STR TOS,[DSP,#4]	
 703 1aa8 3E68     		LDR TOS,[DSP]
 704 1aaa 3860     		STR T0,[DSP]
ARM GAS  forth.s 			page 78


 705 1aac A4E5     		_NEXT 
 706              	
 707              	/*********************************
 708              	    2DROP	( w1 w2 -- )
 709              	 	Drop top 2 items.
 710              	*********************************/
 711 1aae 9E1A0000 		_HEADER DDROP,5,"2DROP"
 711      05324452 
 711      4F50
 712 1ab8 57F8046B 		_POP
 713 1abc 57F8046B 		_POP
 714 1ac0 9AE5     		_NEXT 
 715              	
 716              	/********************************
 717              		3DROP ( w1 w2 w3 -- )
 718              		drop top 3 items 
 719              	********************************/
 720 1ac2 B21A0000 		_HEADER TDROP,5,"3DROP"
 720      05334452 
 720      4F50
 721 1acc 07F10807 	    add DSP,#8 
 722 1ad0 57F8046B 	    _POP 
 723 1ad4 90E5     	    _NEXT 
 724              	
 725              	/***********************************
 726              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 727              	 	Duplicate top 2 items.
 728              	************************************/
 729 1ad6 C61A0000 		_HEADER DDUP,4,"2DUP"
 729      04324455 
 729      5000
 730 1ae0 3868     		LDR	T0,[DSP] // w1
 731 1ae2 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 732 1ae6 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 733 1aea 85E5     		_NEXT
 734              	
 735              	/******************************
 736              	    D+	( d1 d2 -- d3 )
 737              	 	Add top 2 double numbers.
 738              	******************************/
 739 1aec DA1A0000 		_HEADER DPLUS,2,"D+"
 739      02442B00 
 740 1af4 57F8045B 		LDR	WP,[DSP],#4
 741 1af8 57F8042B 		LDR	T2,[DSP],#4
 742 1afc 3B68     		LDR	T3,[DSP]
 743 1afe ED18     		ADDS	WP,WP,T3
 744 1b00 3D60     		STR	WP,[DSP]
 745 1b02 46EB0206 		ADC	TOS,TOS,T2
 746 1b06 77E5     		_NEXT
 747              	
 748              	/*****************************
 749              	    NOT	 ( w -- !w )
 750              	 	1"s complement.
 751              	*****************************/
 752 1b08 F01A0000 		_HEADER INVER,3,"NOT"
 752      034E4F54 
 753 1b10 6FEA0606 		MVN	TOS,TOS
ARM GAS  forth.s 			page 79


 754 1b14 70E5     		_NEXT
 755              	
 756              	/*****************************
 757              	    NEGATE	( w -- -w )
 758              	 	2's complement.
 759              	***************************/
 760 1b16 0C1B0000 		_HEADER NEGAT,6,"NEGATE"
 760      064E4547 
 760      41544500 
 760      00BF
 761 1b24 C6F10006 		RSB	TOS,TOS,#0
 762 1b28 66E5     		_NEXT
 763              	
 764              	/***************************
 765              	    ABS	 ( w -- |w| )
 766              	 	Absolute.
 767              	**************************/
 768 1b2a 1A1B0000 		_HEADER ABSS,3,"ABS"
 768      03414253 
 768      00BF
 769 1b34 16F0004F 		TST	TOS,#0x80000000
 770 1b38 18BF     		IT NE
 771 1b3a 7642     	    RSBNE   TOS,TOS,#0
 772 1b3c 5CE5     		_NEXT
 773              	
 774              	/*******************
 775              	  0= ( w -- f )
 776              	 TOS==0?
 777              	*******************/
 778 1b3e 2E1B0000 		_HEADER ZEQUAL,2,"0="
 778      02303D00 
 778      00BF
 779 1b48 16B9     		cbnz TOS,1f
 780 1b4a 4FF0FF36 		mov TOS,#-1
 781 1b4e 53E5     		_NEXT 
 782 1b50 86EA0606 	1:  eor TOS,TOS,TOS  
 783 1b54 50E5     		_NEXT 	
 784              	
 785              	/*********************
 786              	    =	 ( w w -- t )
 787              	 	Equal?
 788              	*********************/
 789 1b56 421B0000 		_HEADER EQUAL,1,"="
 789      013D
 790 1b5c 57F8045B 		LDR	WP,[DSP],#4
 791 1b60 AE42     		CMP	TOS,WP
 792 1b62 0CBF     		ITE EQ 
 793 1b64 6FF00006 	    MVNEQ	TOS,#0
 794 1b68 0026     		MOVNE	TOS,#0
 795 1b6a 45E5     		_NEXT
 796              	
 797              	/************************
 798              	    U<	 ( w w -- t )
 799              	 	Unsigned less?
 800              	*************************/
 801 1b6c 5A1B0000 		_HEADER ULESS,2,"U<"
 801      02553C00 
ARM GAS  forth.s 			page 80


 802 1b74 57F8045B 		LDR	WP,[DSP],#4
 803 1b78 B542     		CMP	WP,TOS
 804 1b7a 34BF     		ITE CC 
 805 1b7c 6FF00006 		MVNCC	TOS,#0
 806 1b80 0026     		MOVCS	TOS,#0
 807 1b82 39E5     		_NEXT
 808              	
 809              	/**********************
 810              	    <	( w w -- t )
 811              	 	Less?
 812              	**********************/
 813 1b84 701B0000 		_HEADER LESS,1,"<"
 813      013C00BF 
 814 1b8c 57F8045B 		LDR	WP,[DSP],#4
 815 1b90 B542     		CMP	WP,TOS
 816 1b92 B4BF     	    ITE LT
 817 1b94 6FF00006 		MVNLT	TOS,#0
 818 1b98 0026     		MOVGE	TOS,#0
 819 1b9a 2DE5     		_NEXT 
 820              	
 821              	/***********************
 822              	    >	( w w -- t )
 823              	 	greater?
 824              	***********************/
 825 1b9c 881B0000 		_HEADER GREAT,1,">"
 825      013E00BF 
 826 1ba4 57F8045B 		LDR	WP,[DSP],#4
 827 1ba8 B542     		CMP	WP,TOS
 828 1baa CCBF     		ITE GT
 829 1bac 6FF00006 	    MVNGT	TOS,#0
 830 1bb0 0026     		MOVLE	TOS,#0
 831 1bb2 21E5     		_NEXT
 832              	
 833              	/***************************
 834              	    MAX	 ( w w -- max )
 835              	 	Leave maximum.
 836              	***************************/
 837 1bb4 A01B0000 		_HEADER MAX,3,"MAX"
 837      034D4158 
 838 1bbc 57F8045B 		LDR	WP,[DSP],#4
 839 1bc0 B542     		CMP	WP,TOS
 840 1bc2 C8BF     		IT GT 
 841 1bc4 2E46     		MOVGT	TOS,WP
 842 1bc6 17E5     		_NEXT 
 843              	
 844              	/**************************
 845              	    MIN	 ( w w -- min )
 846              	 	Leave minimum.
 847              	**************************/
 848 1bc8 B81B0000 		_HEADER MIN,3,"MIN"
 848      034D494E 
 849 1bd0 57F8045B 		LDR	WP,[DSP],#4
 850 1bd4 B542     		CMP	WP,TOS
 851 1bd6 B8BF     		IT LT
 852 1bd8 2E46     		MOVLT	TOS,WP
 853 1bda 0DE5     		_NEXT
 854              	
ARM GAS  forth.s 			page 81


 855              	/***********************
 856              	    +!	 ( w a -- )
 857              	 	Add to memory.
 858              	***********************/
 859 1bdc CC1B0000 		_HEADER PSTOR,2,"+!"
 859      022B2100 
 860 1be4 57F8045B 		LDR	WP,[DSP],#4
 861 1be8 3268     		LDR	T2,[TOS]
 862 1bea 2A44     		ADD	T2,T2,WP
 863 1bec 3260     		STR	T2,[TOS]
 864 1bee 57F8046B 		_POP
 865 1bf2 01E5     		_NEXT
 866              	
 867              	/************************
 868              	    2!	 ( d a -- )
 869              	 	Store double number.
 870              	*************************/
 871 1bf4 E01B0000 		_HEADER DSTOR,2,"2!"
 871      02322100 
 872 1bfc 57F8045B 		LDR	WP,[DSP],#4
 873 1c00 57F8042B 		LDR	T2,[DSP],#4
 874 1c04 46F8045B 		STR	WP,[TOS],#4
 875 1c08 3260     		STR	T2,[TOS]
 876 1c0a 57F8046B 		_POP
 877 1c0e F3E4     		_NEXT
 878              	
 879              	/************************
 880              	    2@	 ( a -- d )
 881              	 	Fetch double number.
 882              	************************/
 883 1c10 F81B0000 		_HEADER DAT,2,"D@"
 883      02444000 
 884 1c18 7568     		LDR	WP,[TOS,#4]
 885 1c1a 47F8045D 		STR	WP,[DSP,#-4]!
 886 1c1e 3668     		LDR	TOS,[TOS]
 887 1c20 EAE4     		_NEXT
 888              	
 889              	/***************************
 890              	    COUNT	( b -- b+1 c )
 891              	 	Fetch length of string.
 892              	****************************/
 893 1c22 141C0000 		_HEADER COUNT,5,"COUNT"
 893      05434F55 
 893      4E54
 894 1c2c 16F8015B 		LDRB	WP,[TOS],#1
 895 1c30 47F8046D 		_PUSH
 896 1c34 2E46     		MOV	TOS,WP
 897 1c36 DFE4     		_NEXT
 898              	
 899              	/******************************
 900              	    DNEGATE	( d -- -d )
 901              	 	Negate double number.
 902              	**************************/
 903 1c38 261C0000 		_HEADER DNEGA,7,"DNEGATE"
 903      07444E45 
 903      47415445 
 904 1c44 3D68     		LDR	WP,[DSP]
ARM GAS  forth.s 			page 82


 905 1c46 A2EB0202 		SUB	T2,T2,T2
 906 1c4a 551B     		SUBS WP,T2,WP
 907 1c4c 62EB0606 		SBC	TOS,T2,TOS
 908 1c50 3D60     		STR	WP,[DSP]
 909 1c52 D1E4     		_NEXT
 910              	
 911              	/******************************
 912              	  System and user variables
 913              	******************************/
 914              	
 915              	/*******************************
 916              	  doVAR	( -- a )
 917              	  Run time routine for VARIABLE and CREATE.
 918              	hidden word used by compiler
 919              	********************************/
 920              	DOVAR:
 921 1c54 47F8046D 		_PUSH
 922 1c58 6646     		MOV TOS,IP
 923 1c5a 0CF1040C 		ADD IP,IP,#4 
 924 1c5e CEE4     		B UNNEST 
 925              	
 926              	/**********************************
 927              	    doCON	( -- a ) 
 928              	 	Run time routine for CONSTANT.
 929              	hidden word used by compiler 
 930              	***********************************/
 931              	DOCON:
 932 1c60 47F8046D 		_PUSH
 933 1c64 5CF8046B 		LDR.W TOS,[IP],#4 
 934 1c68 C9E4     		B UNNEST 
 935              	
 936              	/***********************
 937              	  system variables 
 938              	***********************/
 939              	
 940              	/**************************
 941              	 SEED ( -- a)
 942              	 return PRNG seed address 
 943              	**************************/
 944 1c6a 3C1C0000 		_HEADER SEED,4,"SEED"
 944      04534545 
 944      4400
 945 1c74 47F8046D 		_PUSH 
 946 1c78 04F10406 		ADD TOS,UP,#RNDSEED
 947 1c7c BCE4     		_NEXT 	
 948              	
 949              	/****************************************
 950              	  MSEC ( -- a)
 951              	 return address of milliseconds counter
 952              	****************************************/
 953 1c7e 6E1C0000 		_HEADER MSEC,4,"MSEC"
 953      044D5345 
 953      4300
 954 1c88 47F8046D 	    _PUSH
 955 1c8c 04F10806 	    ADD TOS,UP,#TICKS
 956 1c90 B2E4     	    _NEXT 
 957              	
ARM GAS  forth.s 			page 83


 958              	/*************************
 959              	 TIMER ( -- a )
 960              	 count down timer 
 961              	**********************/
 962 1c92 821C0000 		_HEADER TIMER,5,"TIMER"
 962      0554494D 
 962      4552
 963 1c9c 47F8046D 		 _PUSH 
 964 1ca0 04F10C06 	    ADD TOS,UP,#CD_TIMER
 965 1ca4 A8E4     	    _NEXT
 966              	
 967              	/*****************************
 968              	    'BOOT	 ( -- a )
 969              	 	boot up application vector 
 970              	*****************************/
 971 1ca6 961C0000 		_HEADER TBOOT,5,"'BOOT"
 971      0527424F 
 971      4F54
 972 1cb0 47F8046D 		_PUSH
 973 1cb4 04F11006 		ADD	TOS,UP,#BOOT 
 974 1cb8 9EE4     		_NEXT
 975              		
 976              	/********************************************	
 977              	    BASE	( -- a )
 978              	 	Storage of the radix base for numeric I/O.
 979              	**********************************************/
 980 1cba AA1C0000 		_HEADER BASE,4,"BASE"
 980      04424153 
 980      4500
 981 1cc4 47F8046D 		_PUSH
 982 1cc8 04F11C06 		ADD	TOS,UP,#NBASE
 983 1ccc 94E4     		_NEXT
 984              	
 985              	/*****************************************************
 986              	    temp	 ( -- a )
 987              	 	A temporary storage location used in parse and find.
 988              	hidden word for internal use
 989              	********************************************************/
 990              	TEMP:
 991 1cce 47F8046D 		_PUSH
 992 1cd2 04F12006 		ADD	TOS,UP,#TMP
 993 1cd6 8FE4     		_NEXT
 994              	
 995              	/*******************************************
 996              	    SPAN	( -- a )
 997              	 	Hold character count received by EXPECT.
 998              	********************************************/
 999 1cd8 BE1C0000 		_HEADER SPAN,4,"SPAN"
 999      04535041 
 999      4E0000BF 
 1000 1ce4 47F8046D 		_PUSH
 1001 1ce8 04F12406 		ADD	TOS,UP,#CSPAN
 1002 1cec 84E4     		_NEXT
 1003              	
 1004              	/***********************************************************
 1005              	    >IN	 ( -- a )
 1006              	 	Hold the character pointer while parsing input stream.
ARM GAS  forth.s 			page 84


 1007              	***********************************************************/
 1008 1cee DC1C0000 		_HEADER INN,3,">IN"
 1008      033E494E 
 1008      00BF
 1009 1cf8 47F8046D 		_PUSH
 1010 1cfc 04F12806 		ADD	TOS,UP,#TOIN
 1011 1d00 7AE4     		_NEXT
 1012              	
 1013              	/**************************************
 1014              	    #TIB	( -- a )
 1015              	 	Hold the current count and address 
 1016              		of the terminal input buffer.
 1017              	**************************************/
 1018 1d02 F21C0000 		_HEADER NTIB,4,"#TIB"
 1018      04235449 
 1018      4200
 1019 1d0c 47F8046D 		_PUSH
 1020 1d10 04F12C06 		ADD	TOS,UP,#NTIBB
 1021 1d14 70E4     		_NEXT
 1022              	
 1023              	/******************************
 1024              	    'EVAL	( -- a )
 1025              	 	Execution vector of EVAL.
 1026              	*******************************/
 1027 1d16 061D0000 		_HEADER TEVAL,5,"'EVAL"
 1027      05274556 
 1027      414C
 1028 1d20 47F8046D 		_PUSH
 1029 1d24 04F13406 		ADD	TOS,UP,#EVAL
 1030 1d28 66E4     		_NEXT
 1031              	
 1032              	/*********************************
 1033              	    HLD	 ( -- a )
 1034              	 	Hold a pointer in building a 
 1035              		numeric output string.
 1036              	*********************************/
 1037 1d2a 1A1D0000 		_HEADER HLD,3,"HLD"
 1037      03484C44 
 1037      00BF
 1038 1d34 47F8046D 		_PUSH
 1039 1d38 04F13806 		ADD	TOS,UP,#HOLD
 1040 1d3c 5CE4     		_NEXT
 1041              	
 1042              	/**********************************
 1043              	    CONTEXT	( -- a )
 1044              	 	A area to specify vocabulary 
 1045              		search order.
 1046              	**********************************/
 1047 1d3e 2E1D0000 		_HEADER CNTXT,7,"CONTEXT"
 1047      07434F4E 
 1047      54455854 
 1047      00BF
 1048              	CRRNT:
 1049 1d4c 47F8046D 		_PUSH
 1050 1d50 04F13C06 		ADD	TOS,UP,#CTXT
 1051 1d54 50E4     		_NEXT
 1052              	
ARM GAS  forth.s 			page 85


 1053              	/******************************
 1054              	    CP	( -- a )
 1055              	 	Point to top name in RAM 
 1056              		vocabulary.
 1057              	******************************/
 1058 1d56 421D0000 		_HEADER CPP,2,"CP"
 1058      02435000 
 1058      00BF
 1059 1d60 47F8046D 		_PUSH
 1060 1d64 04F14406 		ADD	TOS,UP,#USER_CTOP
 1061 1d68 46E4     		_NEXT
 1062              	
 1063              	/****************************
 1064              	   FCP ( -- a )
 1065              	  Point ot top of Forth 
 1066              	  system dictionary
 1067              	****************************/
 1068 1d6a 5A1D0000 		_HEADER FCP,3,"FCP"
 1068      03464350 
 1068      00BF
 1069 1d74 47F8046D 		_PUSH 
 1070 1d78 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1071 1d7c 3CE4     		_NEXT 
 1072              	
 1073              	/***************************
 1074              	    LAST	( -- a )
 1075              	 	Point to the last name 
 1076              		in the name dictionary.
 1077              	***************************/
 1078 1d7e 6E1D0000 		_HEADER LAST,4,"LAST"
 1078      044C4153 
 1078      5400
 1079 1d88 47F8046D 		_PUSH
 1080 1d8c 04F14806 		ADD	TOS,UP,#LASTN
 1081 1d90 32E4     		_NEXT
 1082              	
 1083              	
 1084              	/***********************
 1085              		system constants 
 1086              	***********************/
 1087              	
 1088              	/********************************
 1089              		USER-BEGIN ( -- a )
 1090              	  where user area begin in RAM
 1091              	********************************/
 1092 1d92 821D0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1092      0A555345 
 1092      522D4245 
 1092      47494E00 
 1092      00BF
 1093 1da4 47F8046D 		_PUSH 
 1094 1da8 004E     		ldr TOS,USR_BGN_ADR 
 1095 1daa 25E4     		_NEXT 
 1096              	USR_BGN_ADR:
 1097 1dac 12050020 	.word  DTOP 
 1098              	
 1099              	/*********************************
ARM GAS  forth.s 			page 86


 1100              	  USER_END ( -- a )
 1101              	  where user area end in RAM 
 1102              	******************************/
 1103 1db0 961D0000 		_HEADER USER_END,8,"USER-END"
 1103      08555345 
 1103      522D454E 
 1103      440000BF 
 1104 1dc0 47F8046D 		_PUSH 
 1105 1dc4 004E     		ldr TOS,USER_END_ADR 
 1106 1dc6 17E4     		_NEXT 
 1107              	USER_END_ADR:
 1108 1dc8 FC800120 		.word DEND 
 1109              	
 1110              	
 1111              	/* *********************
 1112              	  Common functions
 1113              	***********************/
 1114              	
 1115              	/********************************
 1116              	    WITHIN	( u ul uh -- t )
 1117              	 	Return true if u is within 
 1118              		the range of ul and uh.
 1119              	********************************/
 1120 1dcc B41D0000 		_HEADER WITHI,6,"WITHIN"
 1120      06574954 
 1120      48494E00 
 1121 1dd8 504700BF 		_NEST
 1122 1ddc CD180000 		_ADR	OVER
 1123 1de0 7D190000 		_ADR	SUBB
 1124 1de4 51180000 		_ADR	TOR
 1125 1de8 7D190000 		_ADR	SUBB
 1126 1dec 29180000 		_ADR	RFROM
 1127 1df0 751B0000 		_ADR	ULESS
 1128 1df4 FF150000 		_UNNEST
 1129              	
 1130              	//  Divide
 1131              	
 1132              	/*************************************
 1133              	    UM/MOD	( udl udh u -- ur uq )
 1134              	 	Unsigned divide of a double by a 
 1135              		single. Return mod and quotient.
 1136              	**************************************/
 1137 1df8 D01D0000 		_HEADER UMMOD,6,"UM/MOD"
 1137      06554D2F 
 1137      4D4F4400 
 1138 1e04 4FF00103 		MOV	T3,#1
 1139 1e08 57F8045B 		LDR	WP,[DSP],#4
 1140 1e0c 3A68     		LDR	T2,[DSP]
 1141              	UMMOD0:
 1142 1e0e 9218     		ADDS	T2,T2,T2
 1143 1e10 6D41     		ADCS	WP,WP,WP
 1144 1e12 04D3     		BCC	UMMOD1
 1145 1e14 A5EB0605 		SUB	WP,WP,TOS
 1146 1e18 02F10102 		ADD	T2,T2,#1
 1147 1e1c 04E0     		B UMMOD2
 1148              	UMMOD1:
 1149 1e1e AD1B     		SUBS	WP,WP,TOS 
ARM GAS  forth.s 			page 87


 1150 1e20 28BF     		IT CS 
 1151 1e22 0132     		ADDCS	T2,T2,#1
 1152 1e24 00D2     		BCS	UMMOD2
 1153 1e26 3544     		ADD	WP,WP,TOS
 1154              	UMMOD2:
 1155 1e28 DB18     		ADDS	T3,T3,T3
 1156 1e2a F0D3     		BCC	UMMOD0
 1157 1e2c 1646     		MOV	TOS,T2
 1158 1e2e 3D60     		STR	WP,[DSP]
 1159 1e30 FFF7E2BB 		_NEXT
 1160              	
 1161              	/****************************
 1162              	    M/MOD	( d n -- r q )
 1163              	 	Signed floored divide 
 1164              		of double by single. 
 1165              		Return mod and quotient.
 1166              	****************************/
 1167 1e34 FC1D0000 		_HEADER MSMOD,5,"M/MOD"
 1167      054D2F4D 
 1167      4F4400BF 
 1168 1e40 504700BF 		_NEST
 1169 1e44 A9180000 		_ADR	DUPP
 1170 1e48 DD180000 		_ADR	ZLESS
 1171 1e4c A9180000 		_ADR	DUPP
 1172 1e50 51180000 		_ADR	TOR
 1173 1e54 B7170000 		_QBRAN MMOD1
 1173      6C1E0000 
 1174 1e5c 251B0000 		_ADR	NEGAT
 1175 1e60 51180000 		_ADR	TOR
 1176 1e64 451C0000 		_ADR	DNEGA
 1177 1e68 29180000 		_ADR	RFROM
 1178              	MMOD1:
 1179 1e6c 51180000 		_ADR	TOR
 1180 1e70 A9180000 		_ADR	DUPP
 1181 1e74 DD180000 		_ADR	ZLESS
 1182 1e78 B7170000 		_QBRAN MMOD2
 1182      881E0000 
 1183 1e80 3D180000 		_ADR	RAT
 1184 1e84 6D190000 		_ADR	PLUS
 1185              	MMOD2:
 1186 1e88 29180000 		_ADR	RFROM
 1187 1e8c 051E0000 		_ADR	UMMOD
 1188 1e90 29180000 		_ADR	RFROM
 1189 1e94 B7170000 		_QBRAN	MMOD3
 1189      A81E0000 
 1190 1e9c B9180000 		_ADR	SWAP
 1191 1ea0 251B0000 		_ADR	NEGAT
 1192 1ea4 B9180000 		_ADR	SWAP
 1193              	MMOD3:   
 1194 1ea8 FF150000 		_UNNEST
 1195              	
 1196              	/****************************
 1197              	   /MOD	( n n -- r q )
 1198              		Signed divide. Return
 1199              		mod and quotient.
 1200              	****************************/
 1201 1eac 381E0000 		_HEADER SLMOD,4,"/MOD"
ARM GAS  forth.s 			page 88


 1201      042F4D4F 
 1201      440000BF 
 1202 1eb8 504700BF 		_NEST
 1203 1ebc CD180000 		_ADR	OVER
 1204 1ec0 DD180000 		_ADR	ZLESS
 1205 1ec4 B9180000 		_ADR	SWAP
 1206 1ec8 411E0000 		_ADR	MSMOD
 1207 1ecc FF150000 		_UNNEST
 1208              	
 1209              	/**************************
 1210              	    MOD	 ( n n -- r )
 1211              	 	Signed divide. Return
 1212              		mod only.
 1213              	**************************/
 1214 1ed0 B01E0000 		_HEADER MODD,3,"MOD"
 1214      034D4F44 
 1215 1ed8 504700BF 		_NEST
 1216 1edc B91E0000 		_ADR	SLMOD
 1217 1ee0 99180000 		_ADR	DROP
 1218 1ee4 FF150000 		_UNNEST
 1219              	
 1220              	/*************************
 1221              	    /	   ( n n -- q )
 1222              	 	Signed divide. Return
 1223              		quotient only.
 1224              	**************************/
 1225 1ee8 D41E0000 		_HEADER SLASH,1,"/"
 1225      012F00BF 
 1226 1ef0 504700BF 		_NEST
 1227 1ef4 B91E0000 		_ADR	SLMOD
 1228 1ef8 B9180000 		_ADR	SWAP
 1229 1efc 99180000 		_ADR	DROP
 1230 1f00 FF150000 		_UNNEST
 1231              	
 1232              	//******************************
 1233              	//  */MOD	( n1 n2 n3 -- r q )
 1234              	/* 	Multiply n1 and n2, then 
 1235              		divide by n3. Return 
 1236              		mod and quotient.
 1237              	******************************/
 1238 1f04 EC1E0000 		_HEADER SSMOD,5,"*/MOD"
 1238      052A2F4D 
 1238      4F4400BF 
 1239 1f10 504700BF 		_NEST
 1240 1f14 51180000 		_ADR	TOR
 1241 1f18 B5190000 		_ADR	MSTAR
 1242 1f1c 29180000 		_ADR	RFROM
 1243 1f20 411E0000 		_ADR	MSMOD
 1244 1f24 FF150000 		_UNNEST
 1245              	
 1246              	//*******************************
 1247              	//  */ ( n1 n2 n3 -- q )
 1248              	/* 	Multiply n1 by n2, then 
 1249              		divide by n3. Return quotient
 1250              		only.
 1251              	*******************************/
 1252 1f28 081F0000 		_HEADER STASL,2,"*/"
ARM GAS  forth.s 			page 89


 1252      022A2F00 
 1253 1f30 504700BF 		_NEST
 1254 1f34 111F0000 		_ADR	SSMOD
 1255 1f38 B9180000 		_ADR	SWAP
 1256 1f3c 99180000 		_ADR	DROP
 1257 1f40 FF150000 		_UNNEST
 1258              	
 1259              	/*******************
 1260              	  Miscellaneous
 1261              	*******************/
 1262              	
 1263              	/*************************
 1264              	    ALIGNED	( b -- a )
 1265              	 	Align address to the 
 1266              		cell boundary.
 1267              	**************************/
 1268 1f44 2C1F0000 		_HEADER ALGND,7,"ALIGNED"
 1268      07414C49 
 1268      474E4544 
 1269 1f50 06F10306 		ADD	TOS,TOS,#3
 1270 1f54 6FF00305 		MVN	WP,#3
 1271 1f58 06EA0506 		AND	TOS,TOS,WP
 1272 1f5c FFF74CBB 		_NEXT
 1273              	
 1274              	/****************************
 1275              	    >CHAR	( c -- c )
 1276              	 	Filter non-printing 
 1277              		characters.
 1278              	****************************/
 1279 1f60 481F0000 		_HEADER TCHAR,5,">CHAR"
 1279      053E4348 
 1279      415200BF 
 1280 1f6c 504700BF 		_NEST
 1281 1f70 77170000 		_DOLIT  0x7F
 1281      7F000000 
 1282 1f78 ED180000 		_ADR	ANDD
 1283 1f7c A9180000 		_ADR	DUPP	// mask msb
 1284 1f80 291A0000 		_ADR	BLANK
 1285 1f84 77170000 		_DOLIT 	127
 1285      7F000000 
 1286 1f8c D91D0000 		_ADR	WITHI	// check for printable
 1287 1f90 111B0000 		_ADR	INVER
 1288 1f94 B7170000 		_QBRAN	TCHA1
 1288      A81F0000 
 1289 1f9c 99180000 		_ADR	DROP
 1290 1fa0 77170000 		_DOLIT 	'_'	// replace non-printables
 1290      5F000000 
 1291              	TCHA1:
 1292 1fa8 FF150000 		  _UNNEST
 1293              	
 1294              	/************************
 1295              	    DEPTH	( -- n )
 1296              	 	Return the depth of
 1297              		the data stack.
 1298              	***********************/
 1299 1fac 641F0000 		_HEADER DEPTH,5,"DEPTH"
 1299      05444550 
ARM GAS  forth.s 			page 90


 1299      544800BF 
 1300 1fb8 4FF47F42 		_MOV32 T2,SPP 
 1300      C2F20102 
 1301 1fc0 A2EB0702 		SUB	T2,T2,DSP
 1302 1fc4 47F8046D 		_PUSH
 1303 1fc8 4FEAA206 		ASR	TOS,T2,#2
 1304 1fcc FFF714BB 		_NEXT
 1305              	
 1306              	/*****************************
 1307              	    PICK	( ... +n -- ... w )
 1308              	 	Copy the nth stack item 
 1309              		to tos.
 1310              	******************************/
 1311 1fd0 B01F0000 		_HEADER PICK,4,"PICK"
 1311      04504943 
 1311      4B0000BF 
 1312 1fdc 504700BF 		_NEST
 1313 1fe0 C9190000 		_ADR	ONEP
 1314 1fe4 3D1A0000 		_ADR	CELLS
 1315 1fe8 85180000 		_ADR	SPAT
 1316 1fec 6D190000 		_ADR	PLUS
 1317 1ff0 FD170000 		_ADR	AT
 1318 1ff4 FF150000 		_UNNEST
 1319              	
 1320              	/*********************
 1321              	  Memory access
 1322              	*********************/
 1323              	
 1324              	/*************************
 1325              	    HERE	( -- a )
 1326              	 	Return the top of
 1327              		the code dictionary.
 1328              	*************************/
 1329 1ff8 D41F0000 		_HEADER HERE,4,"HERE"
 1329      04484552 
 1329      450000BF 
 1330 2004 504700BF 		_NEST
 1331 2008 611D0000 		_ADR	CPP
 1332 200c FD170000 		_ADR	AT
 1333 2010 FF150000 		_UNNEST
 1334              	
 1335              	/***************************	
 1336              	    PAD	 ( -- a )
 1337              	 	Return the address of 
 1338              		a temporary buffer.
 1339              	***************************/
 1340 2014 FC1F0000 		_HEADER PAD,3,"PAD"
 1340      03504144 
 1341 201c 504700BF 		_NEST
 1342 2020 05200000 		_ADR	HERE
 1343 2024 77170000 		_DOLIT 80
 1343      50000000 
 1344 202c 6D190000 		_ADR PLUS 
 1345 2030 FF150000 		_UNNEST
 1346              	
 1347              	/***********************
 1348              	    TIB	 ( -- a )
ARM GAS  forth.s 			page 91


 1349              	 	Return the address 
 1350              		of the terminal 
 1351              		input buffer.
 1352              	************************/
 1353 2034 18200000 		_HEADER TIB,3,"TIB"
 1353      03544942 
 1354 203c 47F8046D 		_PUSH
 1355 2040 266B     		ldr TOS,[UP,#TIBUF]
 1356 2042 FFF7D9BA 		_NEXT
 1357              	
 1358              	/*************************
 1359              	    @EXECUTE	( a -- )
 1360              	 	Execute vector stored
 1361              		in address a.
 1362              	*************************/
 1363 2046 38200000 		_HEADER ATEXE,8,"@EXECUTE"
 1363      08404558 
 1363      45435554 
 1363      4500
 1364 2054 3500     		MOVS	WP,TOS
 1365 2056 57F8046B 		_POP
 1366 205a 2D68     		LDR	WP,[WP]
 1367 205c 45F00105 		ORR	WP,WP,#1
 1368 2060 18BF     	    IT NE 
 1369 2062 2847     		BXNE	WP
 1370 2064 FFF7C8BA 		_NEXT
 1371              	
 1372              	/*******************************
 1373              	    CMOVE	( b1 b2 u -- )
 1374              	 	Copy u bytes from b1 to b2.
 1375              	********************************/
 1376 2068 4A200000 		_HEADER CMOVE,5,"CMOVE"
 1376      05434D4F 
 1376      564500BF 
 1377 2074 57F8042B 		LDR	T2,[DSP],#4
 1378 2078 57F8043B 		LDR	T3,[DSP],#4
 1379 207c 03E0     		B CMOV1
 1380              	CMOV0:
 1381 207e 13F8015B 		LDRB	WP,[T3],#1
 1382 2082 02F8015B 		STRB	WP,[T2],#1
 1383              	CMOV1:
 1384 2086 3600     		MOVS	TOS,TOS
 1385 2088 02D0     		BEQ	CMOV2
 1386 208a A6F10106 		SUB	TOS,TOS,#1
 1387 208e F6E7     		B CMOV0
 1388              	CMOV2:
 1389 2090 57F8046B 		_POP
 1390 2094 FFF7B0BA 		_NEXT
 1391              	
 1392              	/***************************
 1393              	    MOVE	( a1 a2 u -- )
 1394              	 	Copy u words from a1 to a2.
 1395              	*******************************/
 1396 2098 6C200000 		_HEADER MOVE,4,"MOVE"
 1396      044D4F56 
 1396      450000BF 
 1397 20a4 26F00306 		AND	TOS,TOS,#-4
ARM GAS  forth.s 			page 92


 1398 20a8 57F8042B 		LDR	T2,[DSP],#4
 1399 20ac 57F8043B 		LDR	T3,[DSP],#4
 1400 20b0 03E0     		B MOVE1
 1401              	MOVE0:
 1402 20b2 53F8045B 		LDR	WP,[T3],#4
 1403 20b6 42F8045B 		STR	WP,[T2],#4
 1404              	MOVE1:
 1405 20ba 3600     		MOVS	TOS,TOS
 1406 20bc 02D0     		BEQ	MOVE2
 1407 20be A6F10406 		SUB	TOS,TOS,#4
 1408 20c2 F6E7     		B MOVE0
 1409              	MOVE2:
 1410 20c4 57F8046B 		_POP
 1411 20c8 FFF796BA 		_NEXT
 1412              	
 1413              	/**************************
 1414              	    FILL	( b u c -- )
 1415              	 	Fill u bytes of character
 1416              		c to area beginning at b.
 1417              	******************************/
 1418 20cc 9C200000 		_HEADER FILL,4,"FILL"
 1418      0446494C 
 1418      4C0000BF 
 1419 20d8 03CF     		LDMFD DSP!,{T0,T1} 
 1420 20da 0000     		MOVS T0,T0 
 1421 20dc 03D0     		BEQ FILL2
 1422              	FILL1:
 1423 20de 01F8016B 		STRB	TOS,[T1],#1
 1424 20e2 0138     		SUBS	T0,T0,#1
 1425 20e4 FBD1     		BNE FILL1
 1426              	FILL2:
 1427 20e6 57F8046B 		_POP
 1428 20ea FFF785BA 		_NEXT
 1429              	
 1430              	/*****************************
 1431              	    PACK$	( b u a -- a )
 1432              	 	Build a counted word with
 1433              		u characters from b. 
 1434              		Null fill.
 1435              	*****************************/
 1436 20ee D0200000 		_HEADER PACKS,5,"PACK$"
 1436      05504143 
 1436      4B24
 1437 20f8 504700BF 		_NEST
 1438 20fc 511F0000 		_ADR	ALGND
 1439 2100 A9180000 		_ADR	DUPP
 1440 2104 51180000 		_ADR	TOR			// strings only on cell boundary
 1441 2108 CD180000 		_ADR	OVER
 1442 210c 6D190000 		_ADR	PLUS
 1443 2110 C9190000 		_ADR	ONEP
 1444 2114 77170000 		_DOLIT 	0xFFFFFFFC
 1444      FCFFFFFF 
 1445 211c ED180000 		_ADR	ANDD			// count mod cell
 1446 2120 77170000 		_DOLIT 	0
 1446      00000000 
 1447 2128 B9180000 		_ADR	SWAP
 1448 212c E9170000 		_ADR	STORE			// null fill cell
ARM GAS  forth.s 			page 93


 1449 2130 3D180000 		_ADR	RAT
 1450 2134 E11A0000 		_ADR	DDUP
 1451 2138 09180000 		_ADR	CSTOR
 1452 213c C9190000 		_ADR	ONEP			// save count
 1453 2140 B9180000 		_ADR	SWAP
 1454 2144 75200000 		_ADR	CMOVE
 1455 2148 29180000 		_ADR	RFROM
 1456 214c FF150000 		_UNNEST   			// move string
 1457              	
 1458              	/***********************************
 1459              	  Numeric output, single precision
 1460              	***********************************/
 1461              	
 1462              	/**************************
 1463              	    DIGIT	( u -- c )
 1464              	 	Convert digit u to 
 1465              		a character.
 1466              	***************************/
 1467 2150 F2200000 		_HEADER DIGIT,5,"DIGIT"
 1467      05444947 
 1467      495400BF 
 1468 215c 504700BF 		_NEST
 1469 2160 77170000 		_DOLIT 9
 1469      09000000 
 1470 2168 CD180000 		_ADR	OVER
 1471 216c 8D1B0000 		_ADR	LESS
 1472 2170 77170000 		_DOLIT	7
 1472      07000000 
 1473 2178 ED180000 		_ADR	ANDD
 1474 217c 6D190000 		_ADR	PLUS
 1475 2180 77170000 		_DOLIT	'0'
 1475      30000000 
 1476 2188 6D190000 		_ADR	PLUS 
 1477 218c FF150000 		_UNNEST
 1478              	
 1479              	/*********************************
 1480              	    EXTRACT	( n base -- n c )
 1481              	 	Extract the least significant
 1482              		digit from n.
 1483              	**********************************/
 1484 2190 54210000 		_HEADER EXTRC,7,"EXTRACT"
 1484      07455854 
 1484      52414354 
 1485 219c 504700BF 		_NEST
 1486 21a0 77170000 		_DOLIT 0
 1486      00000000 
 1487 21a8 B9180000 		_ADR	SWAP
 1488 21ac 051E0000 		_ADR	UMMOD
 1489 21b0 B9180000 		_ADR	SWAP
 1490 21b4 5D210000 		_ADR	DIGIT
 1491 21b8 FF150000 		_UNNEST
 1492              	
 1493              	/***************************
 1494              	    <#	  ( -- )
 1495              	 	Initiate the numeric
 1496              		output process.
 1497              	****************************/
ARM GAS  forth.s 			page 94


 1498 21bc 94210000 		_HEADER BDIGS,2,"<#"
 1498      023C2300 
 1499 21c4 504700BF 		_NEST
 1500 21c8 1D200000 		_ADR	PAD
 1501 21cc 351D0000 		_ADR	HLD
 1502 21d0 E9170000 		_ADR	STORE
 1503 21d4 FF150000 		_UNNEST
 1504              	
 1505              	/*********************************
 1506              	    HOLD	( c -- )
 1507              	 	Insert a character into the 
 1508              		numeric output string.
 1509              	**********************************/
 1510 21d8 C0210000 		_HEADER HOLD,4,"HOLD"
 1510      04484F4C 
 1510      440000BF 
 1511 21e4 504700BF 		_NEST
 1512 21e8 351D0000 		_ADR	HLD
 1513 21ec FD170000 		_ADR	AT
 1514 21f0 D9190000 		_ADR	ONEM
 1515 21f4 A9180000 		_ADR	DUPP
 1516 21f8 351D0000 		_ADR	HLD
 1517 21fc E9170000 		_ADR	STORE
 1518 2200 09180000 		_ADR	CSTOR
 1519 2204 FF150000 		_UNNEST
 1520              	
 1521              	/***********************
 1522              	    #	   ( u -- u )
 1523              	 	Extract one digit 
 1524              		from u and append 
 1525              		the digit to output 
 1526              		string.
 1527              	*************************/
 1528 2208 DC210000 		_HEADER DIG,1,"#"
 1528      012300BF 
 1529 2210 504700BF 		_NEST
 1530 2214 C51C0000 		_ADR	BASE
 1531 2218 FD170000 		_ADR	AT
 1532 221c 9D210000 		_ADR	EXTRC
 1533 2220 E5210000 		_ADR	HOLD
 1534 2224 FF150000 		_UNNEST
 1535              	
 1536              	/***************************
 1537              	    #S	  ( u -- 0 )
 1538              	 	Convert u until all 
 1539              		digits are added to 
 1540              		the output string.
 1541              	***************************/
 1542 2228 0C220000 		_HEADER DIGS,2,"#S"
 1542      02235300 
 1543 2230 504700BF 		_NEST
 1544              	DIGS1:
 1545 2234 11220000 	    _ADR	DIG
 1546 2238 A9180000 		_ADR	DUPP
 1547 223c B7170000 		_QBRAN 	DIGS2
 1547      4C220000 
 1548 2244 CB170000 		_BRAN	DIGS1
ARM GAS  forth.s 			page 95


 1548      34220000 
 1549              	DIGS2:
 1550 224c FF150000 		  _UNNEST
 1551              	
 1552              	/*********************
 1553              	    SIGN	( n -- )
 1554              	 	Add a minus sign
 1555              		to the numeric
 1556              		output string.
 1557              	*********************/
 1558 2250 2C220000 		_HEADER SIGN,4,"SIGN"
 1558      04534947 
 1558      4E0000BF 
 1559 225c 504700BF 		_NEST
 1560 2260 DD180000 		_ADR	ZLESS
 1561 2264 B7170000 		_QBRAN	SIGN1
 1561      78220000 
 1562 226c 77170000 		_DOLIT '-'
 1562      2D000000 
 1563 2274 E5210000 		_ADR	HOLD
 1564              	SIGN1:
 1565 2278 FF150000 		  _UNNEST
 1566              	
 1567              	/*************************
 1568              	    #>  ( w -- b u )
 1569              	 	Prepare the output 
 1570              		word to be TYPE'd.
 1571              	************************/
 1572 227c 54220000 		_HEADER EDIGS,2,"#>"
 1572      02233E00 
 1573 2284 504700BF 		_NEST
 1574 2288 99180000 		_ADR	DROP
 1575 228c 351D0000 		_ADR	HLD
 1576 2290 FD170000 		_ADR	AT
 1577 2294 1D200000 		_ADR	PAD
 1578 2298 CD180000 		_ADR	OVER
 1579 229c 7D190000 		_ADR	SUBB
 1580 22a0 FF150000 		_UNNEST
 1581              	
 1582              	/**************************
 1583              	    str	 ( n -- b u )
 1584              	 	Convert a signed 
 1585              		integer to a numeric 
 1586              		string.
 1587              	hidden word used by compiler
 1588              	***************************/
 1589              	STRR:
 1590 22a4 504700BF 		_NEST
 1591 22a8 A9180000 		_ADR	DUPP
 1592 22ac 51180000 		_ADR	TOR
 1593 22b0 351B0000 		_ADR	ABSS
 1594 22b4 C5210000 		_ADR	BDIGS
 1595 22b8 31220000 		_ADR	DIGS
 1596 22bc 29180000 		_ADR	RFROM
 1597 22c0 5D220000 		_ADR	SIGN
 1598 22c4 85220000 		_ADR	EDIGS
 1599 22c8 FF150000 		_UNNEST
ARM GAS  forth.s 			page 96


 1600              	
 1601              	/*************************
 1602              	    HEX	 ( -- )
 1603              	 	Use radix 16 as 
 1604              		base for numeric 
 1605              		conversions.
 1606              	*************************/
 1607 22cc 80220000 		_HEADER HEX,3,"HEX"
 1607      03484558 
 1608 22d4 504700BF 		_NEST
 1609 22d8 77170000 		_DOLIT 16
 1609      10000000 
 1610 22e0 C51C0000 		_ADR	BASE
 1611 22e4 E9170000 		_ADR	STORE
 1612 22e8 FF150000 		_UNNEST
 1613              	
 1614              	/************************
 1615              	    DECIMAL	( -- )
 1616              	 	Use radix 10 as base
 1617              		for numeric conversions.
 1618              	*************************/
 1619 22ec D0220000 		_HEADER DECIM,7,"DECIMAL"
 1619      07444543 
 1619      494D414C 
 1620 22f8 504700BF 		_NEST
 1621 22fc 77170000 		_DOLIT 10
 1621      0A000000 
 1622 2304 C51C0000 		_ADR	BASE
 1623 2308 E9170000 		_ADR	STORE
 1624 230c FF150000 		_UNNEST
 1625              	
 1626              	/************************************
 1627              	  Numeric input, single precision
 1628              	***********************************/
 1629              	
 1630              	/***********************************
 1631              	    DIGIT?	( c base -- u t )
 1632              	 	Convert a character to its 
 1633              		numeric value. A flag 
 1634              		indicates success.
 1635              	**********************************/
 1636 2310 F0220000 		_HEADER DIGTQ,6,"DIGIT?"
 1636      06444947 
 1636      49543F00 
 1637 231c 504700BF 		_NEST
 1638 2320 51180000 		_ADR	TOR
 1639 2324 77170000 		_DOLIT 	'0'
 1639      30000000 
 1640 232c 7D190000 		_ADR	SUBB
 1641 2330 77170000 		_DOLIT 9
 1641      09000000 
 1642 2338 CD180000 		_ADR	OVER
 1643 233c 8D1B0000 		_ADR	LESS
 1644 2340 B7170000 		_QBRAN	DGTQ1
 1644      68230000 
 1645 2348 77170000 		_DOLIT 7
 1645      07000000 
ARM GAS  forth.s 			page 97


 1646 2350 7D190000 		_ADR	SUBB
 1647 2354 A9180000 		_ADR	DUPP
 1648 2358 77170000 		_DOLIT	10
 1648      0A000000 
 1649 2360 8D1B0000 		_ADR	LESS
 1650 2364 01190000 		_ADR	ORR
 1651              	DGTQ1:
 1652 2368 A9180000 		_ADR	DUPP
 1653 236c 29180000 		_ADR	RFROM
 1654 2370 751B0000 		_ADR	ULESS
 1655 2374 FF150000 		_UNNEST
 1656              	
 1657              	/**********************************
 1658              	    NUMBER?	( a -- n T | a F )
 1659              	 	Convert a number word to 
 1660              		integer. Push a flag on tos.
 1661              	**********************************/
 1662 2378 14230000 		_HEADER NUMBQ,7,"NUMBER?"
 1662      074E554D 
 1662      4245523F 
 1663 2384 504700BF 		_NEST
 1664 2388 C51C0000 		_ADR	BASE
 1665 238c FD170000 		_ADR	AT
 1666 2390 51180000 		_ADR	TOR
 1667 2394 77170000 		_DOLIT	0
 1667      00000000 
 1668 239c CD180000 		_ADR	OVER
 1669 23a0 2D1C0000 		_ADR	COUNT
 1670 23a4 CD180000 		_ADR	OVER
 1671 23a8 1D180000 		_ADR	CAT
 1672 23ac 77170000 		_DOLIT '$'
 1672      24000000 
 1673 23b4 5D1B0000 		_ADR	EQUAL
 1674 23b8 B7170000 		_QBRAN	NUMQ1
 1674      D4230000 
 1675 23c0 D5220000 		_ADR	HEX
 1676 23c4 B9180000 		_ADR	SWAP
 1677 23c8 C9190000 		_ADR	ONEP
 1678 23cc B9180000 		_ADR	SWAP
 1679 23d0 D9190000 		_ADR	ONEM
 1680              	NUMQ1:
 1681 23d4 CD180000 		_ADR	OVER
 1682 23d8 1D180000 		_ADR	CAT
 1683 23dc 77170000 		_DOLIT	'-'
 1683      2D000000 
 1684 23e4 5D1B0000 		_ADR	EQUAL
 1685 23e8 51180000 		_ADR	TOR
 1686 23ec B9180000 		_ADR	SWAP
 1687 23f0 3D180000 		_ADR	RAT
 1688 23f4 7D190000 		_ADR	SUBB
 1689 23f8 B9180000 		_ADR	SWAP
 1690 23fc 3D180000 		_ADR	RAT
 1691 2400 6D190000 		_ADR	PLUS
 1692 2404 7D1A0000 		_ADR	QDUP
 1693 2408 B7170000 		_QBRAN	NUMQ6
 1693      9C240000 
 1694 2410 D9190000 		_ADR	ONEM
ARM GAS  forth.s 			page 98


 1695 2414 51180000 		_ADR	TOR
 1696              	NUMQ2:
 1697 2418 A9180000 		_ADR	DUPP
 1698 241c 51180000 		_ADR	TOR
 1699 2420 1D180000 		_ADR	CAT
 1700 2424 C51C0000 		_ADR	BASE
 1701 2428 FD170000 		_ADR	AT
 1702 242c 1D230000 		_ADR	DIGTQ
 1703 2430 B7170000 		_QBRAN	NUMQ4
 1703      80240000 
 1704 2438 B9180000 		_ADR	SWAP
 1705 243c C51C0000 		_ADR	BASE
 1706 2440 FD170000 		_ADR	AT
 1707 2444 8D190000 		_ADR	STAR
 1708 2448 6D190000 		_ADR	PLUS
 1709 244c 29180000 		_ADR	RFROM
 1710 2450 C9190000 		_ADR	ONEP
 1711 2454 99170000 		_DONXT	NUMQ2
 1711      18240000 
 1712 245c 3D180000 		_ADR	RAT
 1713 2460 B9180000 		_ADR	SWAP
 1714 2464 99180000 		_ADR	DROP
 1715 2468 B7170000 		_QBRAN	NUMQ3
 1715      74240000 
 1716 2470 251B0000 		_ADR	NEGAT
 1717              	NUMQ3:
 1718 2474 B9180000 		_ADR	SWAP
 1719 2478 CB170000 		_BRAN	NUMQ5
 1719      98240000 
 1720              	NUMQ4:
 1721 2480 29180000 		_ADR	RFROM
 1722 2484 29180000 		_ADR	RFROM
 1723 2488 B91A0000 		_ADR	DDROP
 1724 248c B91A0000 		_ADR	DDROP
 1725 2490 77170000 		_DOLIT	0
 1725      00000000 
 1726              	NUMQ5:
 1727 2498 A9180000 		_ADR	DUPP
 1728              	NUMQ6:
 1729 249c 29180000 		_ADR	RFROM
 1730 24a0 B91A0000 		_ADR	DDROP
 1731 24a4 29180000 		_ADR	RFROM
 1732 24a8 C51C0000 		_ADR	BASE
 1733 24ac E9170000 		_ADR	STORE
 1734 24b0 FF150000 		_UNNEST
 1735              	
 1736              	/********************
 1737              	  console I/O
 1738              	********************/
 1739              	
 1740              	/**********************
 1741              	    SPACE	( -- )
 1742              	 	Send the blank 
 1743              		character to 
 1744              		the output device.
 1745              	************************/
 1746 24b4 7C230000 		_HEADER SPACE,5,"SPACE"
ARM GAS  forth.s 			page 99


 1746      05535041 
 1746      434500BF 
 1747 24c0 504700BF 		_NEST
 1748 24c4 291A0000 		_ADR	BLANK
 1749 24c8 81160000 		_ADR	EMIT
 1750 24cc FF150000 		_UNNEST
 1751              	
 1752              	/***************************
 1753              	    SPACES	( +n -- )
 1754              	 	Send n spaces to the 
 1755              		output device.
 1756              	****************************/
 1757 24d0 B8240000 		_HEADER SPACS,6,"SPACES"
 1757      06535041 
 1757      43455300 
 1758 24dc 504700BF 		_NEST
 1759 24e0 77170000 		_DOLIT	0
 1759      00000000 
 1760 24e8 BD1B0000 		_ADR	MAX
 1761 24ec 51180000 		_ADR	TOR
 1762 24f0 CB170000 		_BRAN	CHAR2
 1762      FC240000 
 1763              	CHAR1:
 1764 24f8 C1240000 		_ADR	SPACE
 1765              	CHAR2:
 1766 24fc 99170000 		_DONXT	CHAR1
 1766      F8240000 
 1767 2504 FF150000 		_UNNEST
 1768              	
 1769              	/***********************
 1770              	    TYPE	( b u -- )
 1771              	 	Output u characters 
 1772              		from b.
 1773              	************************/
 1774 2508 D4240000 		_HEADER TYPEE,4,"TYPE"
 1774      04545950 
 1774      450000BF 
 1775 2514 504700BF 		_NEST
 1776 2518 51180000 		_ADR  TOR   // ( a+1 -- R: u )
 1777 251c CB170000 		_BRAN	TYPE2
 1777      30250000 
 1778              	TYPE1:  
 1779 2524 2D1C0000 		_ADR  COUNT
 1780 2528 6D1F0000 		_ADR TCHAR
 1781 252c 81160000 		_ADR EMIT
 1782              	TYPE2:  
 1783 2530 99170000 		_DONXT	TYPE1
 1783      24250000 
 1784 2538 99180000 		_ADR	DROP
 1785 253c FF150000 		_UNNEST
 1786              	
 1787              	/***************************
 1788              	    CR	  ( -- )
 1789              	 	Output a carriage return
 1790              		and a line feed.
 1791              	****************************/
 1792 2540 0C250000 		_HEADER CR,2,"CR"
ARM GAS  forth.s 			page 100


 1792      02435200 
 1793 2548 504700BF 		_NEST
 1794 254c 77170000 		_DOLIT	CRR
 1794      0D000000 
 1795 2554 81160000 		_ADR	EMIT
 1796 2558 77170000 		_DOLIT	LF
 1796      0A000000 
 1797 2560 81160000 		_ADR	EMIT
 1798 2564 FF150000 		_UNNEST
 1799              	
 1800              	/******************************************
 1801              	  do_$	( -- a )
 1802              	  Return the address of a compiled string.
 1803              	  adjust return address to skip over it.
 1804              	hidden word used by compiler. 
 1805              	******************************************/
 1806              	DOSTR:
 1807 2568 504700BF 		_NEST     
 1808              	/* compiled string address is 2 levels deep */
 1809 256c 29180000 		_ADR	RFROM	// { -- a1 }
 1810 2570 29180000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1811 2574 A9180000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1812 2578 2D1C0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1813 257c 6D190000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1814 2580 511F0000 		_ADR	ALGND	//  end of string
 1815              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1816 2584 51180000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1817 2588 B9180000 		_ADR	SWAP	//  count tugged
 1818 258c 51180000 		_ADR	TOR     //  ( -- a2) is string address
 1819 2590 FF150000 		_UNNEST
 1820              	
 1821              	/******************************************
 1822              	    $"|	( -- a )
 1823              	 	Run time routine compiled by _". 
 1824              		Return address of a compiled string.
 1825              	hidden word used by compiler
 1826              	*****************************************/
 1827              	STRQP:
 1828 2594 504700BF 		_NEST
 1829 2598 69250000 		_ADR	DOSTR
 1830 259c FF150000 		_UNNEST			// force a call to dostr
 1831              	
 1832              	/*******************************
 1833              	    .$	( a -- )
 1834              	 	Run time routine of ." 
 1835              		Output a compiled string.
 1836              	hidden word used by compiler
 1837              	*******************************/
 1838              	DOTST:
 1839 25a0 504700BF 		_NEST
 1840 25a4 2D1C0000 		_ADR	COUNT // ( -- a+1 c )
 1841 25a8 15250000 		_ADR	TYPEE
 1842 25ac FF150000 		_UNNEST
 1843              	
 1844              	/**********************
 1845              	    ."|	( -- )
 1846              	 	Run time routine of ." 
ARM GAS  forth.s 			page 101


 1847              		Output a compiled string.
 1848              	hidden word used by compiler
 1849              	*****************************/
 1850              	DOTQP:
 1851 25b0 504700BF 		_NEST
 1852 25b4 69250000 		_ADR	DOSTR
 1853 25b8 A1250000 		_ADR	DOTST
 1854 25bc FF150000 		_UNNEST
 1855              	
 1856              	/******************************
 1857              	    .R	  ( n +n -- )
 1858              	 	Display an integer in a 
 1859              		field of n columns, 
 1860              		right justified.
 1861              	*******************************/
 1862 25c0 44250000 		_HEADER DOTR,2,".R"
 1862      022E5200 
 1863 25c8 504700BF 		_NEST
 1864 25cc 51180000 		_ADR	TOR
 1865 25d0 A5220000 		_ADR	STRR
 1866 25d4 29180000 		_ADR	RFROM
 1867 25d8 CD180000 		_ADR	OVER
 1868 25dc 7D190000 		_ADR	SUBB
 1869 25e0 DD240000 		_ADR	SPACS
 1870 25e4 15250000 		_ADR	TYPEE
 1871 25e8 FF150000 		_UNNEST
 1872              	
 1873              	/*************************
 1874              	    U.R	 ( u +n -- )
 1875              	 	Display an unsigned 
 1876              		integer in n column, 
 1877              		right justified.
 1878              	***************************/
 1879 25ec C4250000 		_HEADER UDOTR,3,"U.R"
 1879      03552E52 
 1880 25f4 504700BF 		_NEST
 1881 25f8 51180000 		_ADR	TOR
 1882 25fc C5210000 		_ADR	BDIGS
 1883 2600 31220000 		_ADR	DIGS
 1884 2604 85220000 		_ADR	EDIGS
 1885 2608 29180000 		_ADR	RFROM
 1886 260c CD180000 		_ADR	OVER
 1887 2610 7D190000 		_ADR	SUBB
 1888 2614 DD240000 		_ADR	SPACS
 1889 2618 15250000 		_ADR	TYPEE
 1890 261c FF150000 		_UNNEST
 1891              	
 1892              	/************************
 1893              	    U.	  ( u -- )
 1894              	 	Display an unsigned 
 1895              		integer in free format.
 1896              	***************************/
 1897 2620 F0250000 		_HEADER UDOT,2,"U."
 1897      02552E00 
 1898 2628 504700BF 		_NEST
 1899 262c C5210000 		_ADR	BDIGS
 1900 2630 31220000 		_ADR	DIGS
ARM GAS  forth.s 			page 102


 1901 2634 85220000 		_ADR	EDIGS
 1902 2638 C1240000 		_ADR	SPACE
 1903 263c 15250000 		_ADR	TYPEE
 1904 2640 FF150000 		_UNNEST
 1905              	
 1906              	/************************
 1907              	    .	   ( w -- )
 1908              	 	Display an integer 
 1909              		in free format, 
 1910              		preceeded by a space.
 1911              	**************************/
 1912 2644 24260000 		_HEADER DOT,1,"."
 1912      012E00BF 
 1913 264c 504700BF 		_NEST
 1914 2650 C51C0000 		_ADR	BASE
 1915 2654 FD170000 		_ADR	AT
 1916 2658 77170000 		_DOLIT 10
 1916      0A000000 
 1917 2660 15190000 		_ADR	XORR			// ?decimal
 1918 2664 B7170000 		_QBRAN	DOT1
 1918      74260000 
 1919 266c 29260000 		_ADR	UDOT
 1920 2670 FF150000 		_UNNEST			// no,display unsigned
 1921              	DOT1:
 1922 2674 A5220000 	    _ADR	STRR
 1923 2678 C1240000 		_ADR	SPACE
 1924 267c 15250000 		_ADR	TYPEE
 1925 2680 FF150000 		_UNNEST			// yes, display signed
 1926              	
 1927              	/***********************
 1928              	    ?	   ( a -- )
 1929              	 	Display the contents
 1930              		in a memory cell.
 1931              	*************************/
 1932 2684 48260000 		_HEADER QUEST,1,"?"
 1932      013F00BF 
 1933 268c 504700BF 		_NEST
 1934 2690 FD170000 		_ADR	AT
 1935 2694 4D260000 		_ADR	DOT
 1936 2698 FF150000 		_UNNEST
 1937              	
 1938              	/**************
 1939              	  Parsing
 1940              	***************/
 1941              	
 1942              	/*********************************************
 1943              	    parse	( b u c -- b u delta //  string> )
 1944              	 	Scan word delimited by c. 
 1945              		Return found string and its offset.
 1946              	hidden word used by PARSE
 1947              	**********************************************/
 1948              	PARS:
 1949 269c 504700BF 		_NEST
 1950 26a0 CF1C0000 		_ADR	TEMP
 1951 26a4 E9170000 		_ADR	STORE
 1952 26a8 CD180000 		_ADR	OVER
 1953 26ac 51180000 		_ADR	TOR
ARM GAS  forth.s 			page 103


 1954 26b0 A9180000 		_ADR	DUPP
 1955 26b4 B7170000 		_QBRAN	PARS8
 1955      B0270000 
 1956 26bc D9190000 		_ADR	ONEM
 1957 26c0 CF1C0000 		_ADR	TEMP
 1958 26c4 FD170000 		_ADR	AT
 1959 26c8 291A0000 		_ADR	BLANK
 1960 26cc 5D1B0000 		_ADR	EQUAL
 1961 26d0 B7170000 		_QBRAN	PARS3
 1961      24270000 
 1962 26d8 51180000 		_ADR	TOR
 1963              	PARS1:
 1964 26dc 291A0000 		_ADR	BLANK
 1965 26e0 CD180000 		_ADR	OVER
 1966 26e4 1D180000 		_ADR	CAT			// skip leading blanks 
 1967 26e8 7D190000 		_ADR	SUBB
 1968 26ec DD180000 		_ADR	ZLESS
 1969 26f0 111B0000 		_ADR	INVER
 1970 26f4 B7170000 		_QBRAN	PARS2
 1970      20270000 
 1971 26fc C9190000 		_ADR	ONEP
 1972 2700 99170000 		_DONXT	PARS1
 1972      DC260000 
 1973 2708 29180000 		_ADR	RFROM
 1974 270c 99180000 		_ADR	DROP
 1975 2710 77170000 		_DOLIT	0
 1975      00000000 
 1976 2718 A9180000 		_ADR	DUPP
 1977 271c FF150000 		_UNNEST
 1978              	PARS2:
 1979 2720 29180000 		_ADR	RFROM
 1980              	PARS3:
 1981 2724 CD180000 		_ADR	OVER
 1982 2728 B9180000 		_ADR	SWAP
 1983 272c 51180000 		_ADR	TOR
 1984              	PARS4:
 1985 2730 CF1C0000 		_ADR	TEMP
 1986 2734 FD170000 		_ADR	AT
 1987 2738 CD180000 		_ADR	OVER
 1988 273c 1D180000 		_ADR	CAT
 1989 2740 7D190000 		_ADR	SUBB			// scan for delimiter
 1990 2744 CF1C0000 		_ADR	TEMP
 1991 2748 FD170000 		_ADR	AT
 1992 274c 291A0000 		_ADR	BLANK
 1993 2750 5D1B0000 		_ADR	EQUAL
 1994 2754 B7170000 		_QBRAN	PARS5
 1994      60270000 
 1995 275c DD180000 		_ADR	ZLESS
 1996              	PARS5:
 1997 2760 B7170000 		_QBRAN	PARS6
 1997      84270000 
 1998 2768 C9190000 		_ADR	ONEP
 1999 276c 99170000 		_DONXT	PARS4
 1999      30270000 
 2000 2774 A9180000 		_ADR	DUPP
 2001 2778 51180000 		_ADR	TOR
 2002 277c CB170000 		_BRAN	PARS7
ARM GAS  forth.s 			page 104


 2002      98270000 
 2003              	PARS6:
 2004 2784 29180000 		_ADR	RFROM
 2005 2788 99180000 		_ADR	DROP
 2006 278c A9180000 		_ADR	DUPP
 2007 2790 C9190000 		_ADR	ONEP
 2008 2794 51180000 		_ADR	TOR
 2009              	PARS7:
 2010 2798 CD180000 		_ADR	OVER
 2011 279c 7D190000 		_ADR	SUBB
 2012 27a0 29180000 		_ADR	RFROM
 2013 27a4 29180000 		_ADR	RFROM
 2014 27a8 7D190000 		_ADR	SUBB
 2015 27ac FF150000 		_UNNEST
 2016              	PARS8:
 2017 27b0 CD180000 		_ADR	OVER
 2018 27b4 29180000 		_ADR	RFROM
 2019 27b8 7D190000 		_ADR	SUBB
 2020 27bc FF150000 		_UNNEST
 2021              	
 2022              	/************************************
 2023              	    PARSE	( c -- b u //  string> )
 2024              	 	Scan input stream and return 
 2025              		counted string delimited by c.
 2026              	************************************/
 2027 27c0 88260000 		_HEADER PARSE,5,"PARSE"
 2027      05504152 
 2027      534500BF 
 2028 27cc 504700BF 		_NEST
 2029 27d0 51180000 		_ADR	TOR
 2030 27d4 3D200000 		_ADR	TIB
 2031 27d8 F91C0000 		_ADR	INN
 2032 27dc FD170000 		_ADR	AT
 2033 27e0 6D190000 		_ADR	PLUS			// current input buffer pointer
 2034 27e4 0D1D0000 		_ADR	NTIB
 2035 27e8 FD170000 		_ADR	AT
 2036 27ec F91C0000 		_ADR	INN
 2037 27f0 FD170000 		_ADR	AT
 2038 27f4 7D190000 		_ADR	SUBB			// remaining count
 2039 27f8 29180000 		_ADR	RFROM
 2040 27fc 9D260000 		_ADR	PARS
 2041 2800 F91C0000 		_ADR	INN
 2042 2804 E51B0000 		_ADR	PSTOR
 2043 2808 FF150000 		_UNNEST
 2044              	
 2045              	/*******************************
 2046              	    .(	  ( -- )
 2047              	 	Output following string 
 2048              		up to next ) .
 2049              	******************************/
 2050 280c C4270000 		_HEADER DOTPR,2,".("
 2050      022E2800 
 2051 2814 504700BF 		_NEST
 2052 2818 77170000 		_DOLIT	')'
 2052      29000000 
 2053 2820 CD270000 		_ADR	PARSE
 2054 2824 15250000 		_ADR	TYPEE
ARM GAS  forth.s 			page 105


 2055 2828 FF150000 		_UNNEST
 2056              	
 2057              	/************************
 2058              	    (	   ( -- )
 2059              	 	Ignore following 
 2060              		string up to next )
 2061              		A comment.
 2062              	************************/
 2063 282c 10280000 		_HEADER PAREN,1,"("
 2063      012800BF 
 2064 2834 504700BF 		_NEST
 2065 2838 77170000 		_DOLIT	')'
 2065      29000000 
 2066 2840 CD270000 		_ADR	PARSE
 2067 2844 B91A0000 		_ADR	DDROP
 2068 2848 FF150000 		_UNNEST
 2069              	
 2070              	/*******************
 2071              	    \	   ( -- )
 2072              	 	Ignore following 
 2073              		text till the 
 2074              		end of line.
 2075              	********************/
 2076 284c 30280000 		_HEADER BKSLA,1,"\\"
 2076      015C00BF 
 2077 2854 504700BF 		_NEST
 2078 2858 0D1D0000 		_ADR	NTIB
 2079 285c FD170000 		_ADR	AT
 2080 2860 F91C0000 		_ADR	INN
 2081 2864 E9170000 		_ADR	STORE
 2082 2868 FF150000 		_UNNEST
 2083              	
 2084              	/******************************
 2085              	    CHAR	( -- c )
 2086              	 	Parse next word and
 2087              		return its first character.
 2088              	*******************************/
 2089 286c 50280000 		_HEADER CHAR,4,"CHAR"
 2089      04434841 
 2089      520000BF 
 2090 2878 504700BF 		_NEST
 2091 287c 291A0000 		_ADR	BLANK
 2092 2880 CD270000 		_ADR	PARSE
 2093 2884 99180000 		_ADR	DROP
 2094 2888 1D180000 		_ADR	CAT
 2095 288c FF150000 		_UNNEST
 2096              	
 2097              	/**********************************
 2098              	    WORD	( c -- a //  string> )
 2099              	 	Parse a word from input stream
 2100              		and copy it to code dictionary.
 2101              	***********************************/
 2102 2890 70280000 		_HEADER WORDD,4,"WORD"
 2102      04574F52 
 2102      440000BF 
 2103 289c 504700BF 		_NEST
 2104 28a0 CD270000 		_ADR	PARSE
ARM GAS  forth.s 			page 106


 2105 28a4 05200000 		_ADR	HERE
 2106 28a8 091A0000 		_ADR	CELLP
 2107 28ac F9200000 		_ADR	PACKS
 2108 28b0 FF150000 		_UNNEST
 2109              	
 2110              	/********************************
 2111              	    TOKEN	( -- a //  string> )
 2112              	 	Parse a word from input 
 2113              		stream and copy it to 
 2114              		name dictionary.
 2115              	*********************************/
 2116 28b4 94280000 		_HEADER TOKEN,5,"TOKEN"
 2116      05544F4B 
 2116      454E00BF 
 2117 28c0 504700BF 		_NEST
 2118 28c4 291A0000 		_ADR	BLANK
 2119 28c8 9D280000 		_ADR	WORDD
 2120 28cc FF150000 		_UNNEST
 2121              	
 2122              	/**********************
 2123              	  Dictionary search
 2124              	***********************/
 2125              	
 2126              	/*************************
 2127              	    NAME>	( na -- ca )
 2128              	 	Return a code address
 2129              		given a name address.
 2130              	**************************/
 2131 28d0 B8280000 		_HEADER NAMET,5,"NAME>"
 2131      054E414D 
 2131      453E00BF 
 2132 28dc 504700BF 		_NEST
 2133 28e0 2D1C0000 		_ADR	COUNT
 2134 28e4 77170000 		_DOLIT	0x1F
 2134      1F000000 
 2135 28ec ED180000 		_ADR	ANDD
 2136 28f0 6D190000 		_ADR	PLUS
 2137 28f4 511F0000 		_ADR	ALGND
 2138 28f8 FF150000 		_UNNEST
 2139              	
 2140              	/***************************************
 2141              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2142              	 	Compare u bytes in two strings. 
 2143              		Return 0 if identical.
 2144              	
 2145              	  Picatout 2020-12-01, 
 2146              	    Because of problem with .align 
 2147              		directive that doesn't fill 
 2148              		with zero's I had to change 
 2149              		the "SAME?" and "FIND" 
 2150              	 	words  to do a byte by byte comparison. 
 2151              	****************************************/
 2152 28fc D4280000 		_HEADER SAMEQ,5,"SAME?"
 2152      0553414D 
 2152      453F00BF 
 2153 2908 504700BF 		_NEST
 2154 290c 51180000 		_ADR	TOR
ARM GAS  forth.s 			page 107


 2155 2910 CB170000 		_BRAN	SAME2
 2155      54290000 
 2156              	SAME1:
 2157 2918 CD180000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2158 291c 3D180000 		_ADR	RAT   // a1 a2 a1 u 
 2159 2920 6D190000 		_ADR	PLUS  // a1 a2 a1+u 
 2160 2924 1D180000 		_ADR	CAT	   // a1 a2 c1    		
 2161 2928 CD180000 		_ADR	OVER  // a1 a2 c1 a2 
 2162 292c 3D180000 		_ADR	RAT    
 2163 2930 6D190000 		_ADR	PLUS    
 2164 2934 1D180000 		_ADR	CAT	  // a1 a2 c1 c2
 2165 2938 7D190000 		_ADR	SUBB  
 2166 293c 7D1A0000 		_ADR	QDUP
 2167 2940 B7170000 		_QBRAN	SAME2
 2167      54290000 
 2168 2948 29180000 		_ADR	RFROM
 2169 294c 99180000 		_ADR	DROP
 2170 2950 FF150000 		_UNNEST	// strings not equal
 2171              	SAME2:
 2172 2954 99170000 		_DONXT	SAME1
 2172      18290000 
 2173 295c 77170000 		_DOLIT	0
 2173      00000000 
 2174 2964 FF150000 		_UNNEST	// strings equal
 2175              	
 2176              	/***********************************
 2177              	    FIND	( a na -- ca na | a F )
 2178              	 	Search a vocabulary for a string.
 2179              		Return ca and na if succeeded.
 2180              	hidden word used by NAME?
 2181              	
 2182              	  Picatout 2020-12-01,  
 2183              		 Modified from original. 
 2184              	   See comment for word "SAME?" 
 2185              	************************************/
 2186              	FIND:
 2187 2968 504700BF 		_NEST
 2188 296c B9180000 		_ADR	SWAP			// na a	
 2189 2970 2D1C0000 		_ADR	COUNT			// na a+1 count
 2190 2974 A9180000 		_ADR	DUPP 
 2191 2978 CF1C0000 		_ADR	TEMP
 2192 297c E9170000 		_ADR	STORE			// na a+1 count 
 2193 2980 51180000 		_ADR  TOR		// na a+1  R: count  
 2194 2984 B9180000 		_ADR	SWAP			// a+1 na
 2195              	FIND1:
 2196 2988 A9180000 		_ADR	DUPP			// a+1 na na
 2197 298c B7170000 		_QBRAN	FIND6	// end of vocabulary
 2197      E0290000 
 2198 2994 A9180000 		_ADR	DUPP			// a+1 na na
 2199 2998 1D180000 		_ADR	CAT			// a+1 na name1
 2200 299c 77170000 		_DOLIT	MASKK
 2200      1FFFFFFF 
 2201 29a4 ED180000 		_ADR	ANDD
 2202 29a8 3D180000 		_ADR	RAT			// a+1 na name1 count 
 2203 29ac 15190000 		_ADR	XORR			// a+1 na,  same length?
 2204 29b0 B7170000 		_QBRAN	FIND2
 2204      C8290000 
ARM GAS  forth.s 			page 108


 2205 29b8 191A0000 		_ADR	CELLM			// a+1 la
 2206 29bc FD170000 		_ADR	AT			// a+1 next_na
 2207 29c0 CB170000 		_BRAN	FIND1			// try next word
 2207      88290000 
 2208              	FIND2:   
 2209 29c8 C9190000 		_ADR	ONEP			// a+1 na+1
 2210 29cc CF1C0000 		_ADR	TEMP
 2211 29d0 FD170000 		_ADR	AT			// a+1 na+1 count
 2212 29d4 09290000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2213              	FIND3:	
 2214 29d8 CB170000 		_BRAN	FIND4
 2214      F8290000 
 2215              	FIND6:	
 2216 29e0 29180000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2217 29e4 99180000 		_ADR	DROP			// a+1 0
 2218 29e8 B9180000 		_ADR	SWAP			// 0 a+1
 2219 29ec D9190000 		_ADR	ONEM			// 0 a
 2220 29f0 B9180000 		_ADR	SWAP			// a 0 
 2221 29f4 FF150000 		_UNNEST			// return without a match
 2222              	FIND4:	
 2223 29f8 B7170000 		_QBRAN	FIND5			// a+1 na+1
 2223      142A0000 
 2224 2a00 D9190000 		_ADR	ONEM			// a+1 na
 2225 2a04 191A0000 		_ADR	CELLM			// a+4 la
 2226 2a08 FD170000 		_ADR	AT			// a+1 next_na
 2227 2a0c CB170000 		_BRAN	FIND1			// compare next name
 2227      88290000 
 2228              	FIND5:	
 2229 2a14 29180000 		_ADR	RFROM			// a+1 na+1 count
 2230 2a18 99180000 		_ADR	DROP			// a+1 na+1
 2231 2a1c B9180000 		_ADR	SWAP			// na+1 a+1
 2232 2a20 99180000 		_ADR	DROP			// na+1
 2233 2a24 D9190000 		_ADR	ONEM			// na
 2234 2a28 A9180000 		_ADR	DUPP			// na na
 2235 2a2c DD280000 		_ADR	NAMET			// na ca
 2236 2a30 B9180000 		_ADR	SWAP			// ca na
 2237 2a34 FF150000 		_UNNEST			//  return with a match
 2238              	
 2239              	/********************************
 2240              	    NAME?	( a -- ca na | a F )
 2241              	 	Search all context vocabularies 
 2242              		for a string.
 2243              	***********************************/
 2244 2a38 00290000 		_HEADER NAMEQ,5,"NAME?"
 2244      054E414D 
 2244      453F00BF 
 2245 2a44 504700BF 		_NEST
 2246 2a48 4D1D0000 		_ADR	CNTXT
 2247 2a4c FD170000 		_ADR	AT
 2248 2a50 69290000 		_ADR	FIND
 2249 2a54 FF150000 		_UNNEST
 2250              	
 2251              	/********************
 2252              	  console input
 2253              	********************/
 2254              	
 2255              	/**************************************
ARM GAS  forth.s 			page 109


 2256              	   BKSP  ( bot eot cur -- bot eot cur )
 2257              	   Move cursor left by one character.
 2258              	hidden word used by KTAP
 2259              	***************************************/
 2260              	BKSP:
 2261 2a58 504700BF 		_NEST
 2262 2a5c 51180000 		_ADR	TOR
 2263 2a60 CD180000 		_ADR	OVER
 2264 2a64 29180000 		_ADR	RFROM
 2265 2a68 B9180000 		_ADR	SWAP
 2266 2a6c CD180000 		_ADR	OVER
 2267 2a70 15190000 		_ADR	XORR
 2268 2a74 B7170000 		_QBRAN	BACK1
 2268      A02A0000 
 2269 2a7c 77170000 		_DOLIT	BKSPP
 2269      08000000 
 2270 2a84 81160000 		_ADR	TECHO
 2271 2a88 D9190000 		_ADR	ONEM
 2272 2a8c 291A0000 		_ADR	BLANK
 2273 2a90 81160000 		_ADR	TECHO
 2274 2a94 77170000 		_DOLIT	BKSPP
 2274      08000000 
 2275 2a9c 81160000 		_ADR	TECHO
 2276              	BACK1:
 2277 2aa0 FF150000 		  _UNNEST
 2278              	
 2279              	/****************************************
 2280              	   TAP	 ( bot eot cur c -- bot eot cur )
 2281              	   Accept and echo the key stroke 
 2282              	   and bump the cursor.
 2283              	hidden word used by KTAP 
 2284              	****************************************/
 2285              	TAP:
 2286 2aa4 504700BF 		_NEST
 2287 2aa8 A9180000 		_ADR	DUPP
 2288 2aac 81160000 		_ADR	TECHO
 2289 2ab0 CD180000 		_ADR	OVER
 2290 2ab4 09180000 		_ADR	CSTOR
 2291 2ab8 C9190000 		_ADR	ONEP
 2292 2abc FF150000 		_UNNEST
 2293              	
 2294              	/*******************************************
 2295              	    kTAP	( bot eot cur c -- bot eot cur )
 2296              	 	Process a key stroke, CR or backspace.
 2297              	hidden word used by ACCEPT 
 2298              	*******************************************/
 2299              	KTAP:
 2300              	TTAP:
 2301 2ac0 504700BF 		_NEST
 2302 2ac4 A9180000 		_ADR	DUPP
 2303 2ac8 77170000 		_DOLIT	CRR
 2303      0D000000 
 2304 2ad0 15190000 		_ADR	XORR
 2305 2ad4 B7170000 		_QBRAN  KTAP2
 2305      042B0000 
 2306 2adc 77170000 		_DOLIT	BKSPP
 2306      08000000 
ARM GAS  forth.s 			page 110


 2307 2ae4 15190000 		_ADR	XORR
 2308 2ae8 B7170000 		_QBRAN	KTAP1
 2308      FC2A0000 
 2309 2af0 291A0000 		_ADR	BLANK
 2310 2af4 A52A0000 		_ADR	TAP
 2311 2af8 FF150000 		_UNNEST
 2312              	//	.word	0			// patch
 2313              	KTAP1:
 2314 2afc 592A0000 		_ADR	BKSP
 2315 2b00 FF150000 		_UNNEST
 2316              	KTAP2:
 2317 2b04 99180000 		_ADR	DROP
 2318 2b08 B9180000 		_ADR	SWAP
 2319 2b0c 99180000 		_ADR	DROP
 2320 2b10 A9180000 		_ADR	DUPP
 2321 2b14 FF150000 		_UNNEST
 2322              	
 2323              	/************************************
 2324              	    ACCEPT	( b u -- b u )
 2325              	 	Accept characters to input 
 2326              		buffer. Return with actual count.
 2327              	*************************************/
 2328 2b18 3C2A0000 		_HEADER ACCEP,6,"ACCEPT"
 2328      06414343 
 2328      45505400 
 2329 2b24 504700BF 		_NEST
 2330 2b28 CD180000 		_ADR	OVER
 2331 2b2c 6D190000 		_ADR	PLUS
 2332 2b30 CD180000 		_ADR	OVER
 2333              	ACCP1:
 2334 2b34 E11A0000 		_ADR	DDUP
 2335 2b38 15190000 		_ADR	XORR
 2336 2b3c B7170000 		_QBRAN	ACCP4
 2336      7C2B0000 
 2337 2b44 5D160000 		_ADR	KEY
 2338 2b48 A9180000 		_ADR	DUPP
 2339 2b4c 291A0000 		_ADR	BLANK
 2340 2b50 77170000 		_DOLIT 127
 2340      7F000000 
 2341 2b58 D91D0000 		_ADR	WITHI
 2342 2b5c B7170000 		_QBRAN	ACCP2
 2342      702B0000 
 2343 2b64 A52A0000 		_ADR	TAP
 2344 2b68 CB170000 		_BRAN	ACCP3
 2344      742B0000 
 2345              	ACCP2:
 2346 2b70 C12A0000 		_ADR	KTAP
 2347              	ACCP3:	  
 2348 2b74 CB170000 		_BRAN	ACCP1
 2348      342B0000 
 2349              	ACCP4:
 2350 2b7c 99180000 		_ADR	DROP
 2351 2b80 CD180000 		_ADR	OVER
 2352 2b84 7D190000 		_ADR	SUBB
 2353 2b88 FF150000 		_UNNEST
 2354              	
 2355              	/*****************************
ARM GAS  forth.s 			page 111


 2356              	    QUERY	( -- )
 2357              	 	Accept input stream 
 2358              		to terminal input buffer.
 2359              	******************************/
 2360 2b8c 1C2B0000 		_HEADER QUERY,5,"QUERY"
 2360      05515545 
 2360      525900BF 
 2361 2b98 504700BF 		_NEST
 2362 2b9c 3D200000 		_ADR	TIB
 2363 2ba0 77170000 		_DOLIT 80
 2363      50000000 
 2364 2ba8 252B0000 		_ADR	ACCEP
 2365 2bac 0D1D0000 		_ADR	NTIB
 2366 2bb0 E9170000 		_ADR	STORE
 2367 2bb4 99180000 		_ADR	DROP
 2368 2bb8 77170000 		_DOLIT	0
 2368      00000000 
 2369 2bc0 F91C0000 		_ADR	INN
 2370 2bc4 E9170000 		_ADR	STORE
 2371 2bc8 FF150000 		_UNNEST
 2372              	
 2373              	/********************
 2374              	  Error handling
 2375              	********************/
 2376              	
 2377              	/*********************
 2378              	    ABORT	( a -- )
 2379              	 	Reset data stack 
 2380              		and jump to QUIT.
 2381              	**********************/
 2382 2bcc 902B0000 		_HEADER ABORT,5,"ABORT"
 2382      0541424F 
 2382      525400BF 
 2383 2bd8 504700BF 		_NEST
 2384              	ABORT1:
 2385 2bdc C1240000 		_ADR	SPACE
 2386 2be0 2D1C0000 		_ADR	COUNT
 2387 2be4 15250000 		_ADR	TYPEE
 2388 2be8 77170000 		_DOLIT	0X3F
 2388      3F000000 
 2389 2bf0 81160000 		_ADR	EMIT
 2390 2bf4 49250000 		_ADR	CR
 2391 2bf8 612D0000 		_ADR	PRESE
 2392 2bfc CB170000 		_BRAN	QUIT
 2392      802D0000 
 2393              	
 2394              	/*******************************
 2395              	    _abort"	( f -- )
 2396              	 	Run time routine of ABORT"
 2397              		Abort with a message.
 2398              	hidden used by compiler 
 2399              	********************************/
 2400              	ABORQ:
 2401 2c04 504700BF 		_NEST
 2402 2c08 69250000 		_ADR	DOSTR
 2403 2c0c B9180000 		_ADR	SWAP 
 2404 2c10 B7170000 		_QBRAN	1f	// text flag
ARM GAS  forth.s 			page 112


 2404      202C0000 
 2405 2c18 CB170000 		_BRAN	ABORT1
 2405      DC2B0000 
 2406              	1:
 2407 2c20 99180000 		_ADR	DROP
 2408 2c24 FF150000 		_UNNEST			// drop error
 2409              	
 2410              	/************************
 2411              	  The text interpreter
 2412              	************************/
 2413              	
 2414              	/***************************
 2415              	    $INTERPRET  ( a -- )
 2416              	 	Interpret a word. 
 2417              		If failed, try to 
 2418              		convert it to an integer.
 2419              	******************************/
 2420 2c28 D02B0000 		_HEADER INTER,10,"$INTERPRET"
 2420      0A24494E 
 2420      54455250 
 2420      52455400 
 2421 2c38 504700BF 		_NEST
 2422 2c3c 452A0000 		_ADR	NAMEQ
 2423 2c40 7D1A0000 		_ADR	QDUP	// ?defined
 2424 2c44 B7170000 		_QBRAN	INTE1
 2424      782C0000 
 2425 2c4c FD170000 		_ADR	AT
 2426 2c50 77170000 		_DOLIT	COMPO
 2426      40000000 
 2427 2c58 ED180000 		_ADR	ANDD	// ?compile only lexicon bits
 2428 2c5c 052C0000 		_ABORQ	13," compile only"
 2428      0D20636F 
 2428      6D70696C 
 2428      65206F6E 
 2428      6C7900BF 
 2429 2c70 8D170000 		_ADR	EXECU
 2430 2c74 FF150000 		_UNNEST			// execute defined word
 2431              	INTE1:
 2432 2c78 85230000 		_ADR	NUMBQ
 2433 2c7c B7170000 		_QBRAN	INTE2
 2433      882C0000 
 2434 2c84 FF150000 		_UNNEST
 2435              	INTE2:
 2436 2c88 D92B0000 		_ADR	ABORT	// error
 2437              	
 2438              	/******************************
 2439              	    [	   ( -- )
 2440              	 	Start the text interpreter.
 2441              	*******************************/
 2442 2c8c 2C2C0000 		_HEADER LBRAC,1,"["
 2442      015B00BF 
 2443 2c94 504700BF 		_NEST
 2444 2c98 77170000 		_DOLIT	INTER
 2444      382C0000 
 2445 2ca0 211D0000 		_ADR	TEVAL
 2446 2ca4 E9170000 		_ADR	STORE
 2447 2ca8 FF150000 		_UNNEST
ARM GAS  forth.s 			page 113


 2448              	
 2449              	/**********************
 2450              	    .OK	 ( -- )
 2451              	 	Display "ok" only 
 2452              		while interpreting.
 2453              	************************/
 2454 2cac 902C0000 		_HEADER DOTOK,3,".OK"
 2454      032E4F4B 
 2455 2cb4 504700BF 		_NEST
 2456 2cb8 77170000 		_DOLIT	INTER
 2456      382C0000 
 2457 2cc0 211D0000 		_ADR	TEVAL
 2458 2cc4 FD170000 		_ADR	AT
 2459 2cc8 5D1B0000 		_ADR	EQUAL
 2460 2ccc B7170000 		_QBRAN	DOTO1
 2460      DC2C0000 
 2461 2cd4 B1250000 		_DOTQP	3," ok"
 2461      03206F6B 
 2462              	DOTO1:
 2463 2cdc 49250000 		_ADR	CR
 2464 2ce0 FF150000 		_UNNEST
 2465              	
 2466              	/*************************
 2467              	    ?STACK	( -- )
 2468              	 	Abort if the data 
 2469              		stack underflows.
 2470              	************************/
 2471 2ce4 B02C0000 		_HEADER QSTAC,6,"?STACK"
 2471      063F5354 
 2471      41434B00 
 2472 2cf0 504700BF 		_NEST
 2473 2cf4 B91F0000 		_ADR	DEPTH
 2474 2cf8 DD180000 		_ADR	ZLESS	// check only for underflow
 2475 2cfc 052C0000 		_ABORQ	9,"underflow"
 2475      09756E64 
 2475      6572666C 
 2475      6F7700BF 
 2476 2d0c FF150000 		_UNNEST
 2477              	
 2478              	/*******************
 2479              	    EVAL	( -- )
 2480              	 	Interpret the 
 2481              		input stream.
 2482              	*******************/
 2483 2d10 E82C0000 		_HEADER EVAL,4,"EVAL"
 2483      04455641 
 2483      4C0000BF 
 2484 2d1c 504700BF 		_NEST
 2485              	EVAL1:
 2486 2d20 C1280000 	    _ADR	TOKEN
 2487 2d24 A9180000 		_ADR	DUPP
 2488 2d28 1D180000 		_ADR	CAT	// ?input stream empty
 2489 2d2c B7170000 		_QBRAN	EVAL2
 2489      482D0000 
 2490 2d34 211D0000 		_ADR	TEVAL
 2491 2d38 55200000 		_ADR	ATEXE
 2492 2d3c F12C0000 		_ADR	QSTAC	// evaluate input, check stack
ARM GAS  forth.s 			page 114


 2493 2d40 CB170000 		_BRAN	EVAL1
 2493      202D0000 
 2494              	EVAL2:
 2495 2d48 99180000 		_ADR	DROP
 2496 2d4c B52C0000 		_ADR	DOTOK
 2497 2d50 FF150000 		_UNNEST	// prompt
 2498              	
 2499              	/**********************************
 2500              	    PRESET	( -- )
 2501              	 	Reset data stack pointer 
 2502              		and the terminal input buffer.
 2503              	**********************************/
 2504 2d54 142D0000 		_HEADER PRESE,6,"PRESET"
 2504      06505245 
 2504      53455400 
 2505 2d60 504700BF 		_NEST 
 2506 2d64 77170000 		_DOLIT SPP 
 2506      00FF0120 
 2507 2d6c 75180000 		_ADR SPSTOR 
 2508 2d70 FF150000 		_UNNEST 
 2509              	
 2510              	/*********************
 2511              	    QUIT	( -- )
 2512              	 	Reset return stack 
 2513              		pointer and start 
 2514              		text interpreter.
 2515              	***********************/
 2516 2d74 582D0000 		_HEADER QUIT,4,"QUIT"
 2516      04515549 
 2516      540000BF 
 2517 2d80 77170000 		_DOLIT RPP 
 2517      80FF0120 
 2518 2d88 65180000 		_ADR RPSTOR 
 2519              	QUIT1:
 2520 2d8c 952C0000 		_ADR	LBRAC			// start interpretation
 2521              	QUIT2:
 2522 2d90 992B0000 		_ADR	QUERY			// get input
 2523 2d94 1D2D0000 		_ADR	EVAL
 2524 2d98 CB170000 		_BRAN	QUIT2	// continue till error
 2524      902D0000 
 2525              	
 2526              	/***************************
 2527              		FORGET ( <string> -- )
 2528              		forget all definition 
 2529              		starting at <string>
 2530              	****************************/
 2531 2da0 782D0000 		_HEADER FORGET,6,"FORGET"
 2531      06464F52 
 2531      47455400 
 2532 2dac 504700BF 		_NEST 
 2533 2db0 C1280000 		_ADR TOKEN 
 2534 2db4 A9180000 		_ADR DUPP 
 2535 2db8 B7170000 		_QBRAN 9f 
 2535      F42D0000 
 2536 2dc0 452A0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2537 2dc4 7D1A0000 		_ADR QDUP 
 2538 2dc8 B7170000 		_QBRAN 8f
ARM GAS  forth.s 			page 115


 2538      F02D0000 
 2539 2dd0 191A0000 		_ADR CELLM // ( ca la )
 2540 2dd4 A9180000 		_ADR DUPP 
 2541 2dd8 611D0000 		_ADR CPP   
 2542 2ddc E9170000 		_ADR STORE
 2543 2de0 FD170000 		_ADR AT 
 2544 2de4 891D0000 		_ADR LAST 
 2545 2de8 E9170000 		_ADR STORE
 2546 2dec 59320000 		_ADR OVERT 
 2547 2df0 99180000 	8:  _ADR DROP 
 2548 2df4 FF150000 	9:	_UNNEST 
 2549              	
 2550              		.p2align 2 
 2551              	
 2552              	/*****************
 2553              	  The compiler
 2554              	******************/
 2555              	
 2556              	/**************************************
 2557              	    '	   ( -- ca )
 2558              	 	Search context vocabularies 
 2559              		for the next word in input stream.
 2560              	***************************************/
 2561 2df8 A42D0000 		_HEADER TICK,1,"'"
 2561      012700BF 
 2562 2e00 504700BF 		_NEST
 2563 2e04 C1280000 		_ADR	TOKEN
 2564 2e08 452A0000 		_ADR	NAMEQ	// ?defined
 2565 2e0c B7170000 		_QBRAN	TICK1
 2565      182E0000 
 2566 2e14 FF150000 		_UNNEST	// yes, push code address
 2567              	TICK1:	
 2568 2e18 D92B0000 		_ADR ABORT	// no, error
 2569              	
 2570              	/***********************
 2571              	    ALLOT	( n -- )
 2572              	 	Allocate n bytes to 
 2573              		the ram area.
 2574              	************************/
 2575 2e1c FC2D0000 		_HEADER ALLOT,5,"ALLOT"
 2575      05414C4C 
 2575      4F5400BF 
 2576 2e28 504700BF 		_NEST
 2577 2e2c 611D0000 		_ADR	CPP
 2578 2e30 E51B0000 		_ADR	PSTOR
 2579 2e34 FF150000 		_UNNEST			// adjust code pointer
 2580              	
 2581              	/******************************
 2582              	    ,	   ( w -- )
 2583              	 	Compile an integer 
 2584              		into the code dictionary.
 2585              	******************************/
 2586 2e38 202E0000 		_HEADER COMMA,1,","
 2586      012C00BF 
 2587 2e40 504700BF 		_NEST
 2588 2e44 05200000 		_ADR	HERE
 2589 2e48 A9180000 		_ADR	DUPP
ARM GAS  forth.s 			page 116


 2590 2e4c 091A0000 		_ADR	CELLP	// cell boundary
 2591 2e50 611D0000 		_ADR	CPP
 2592 2e54 E9170000 		_ADR	STORE
 2593 2e58 E9170000 		_ADR	STORE
 2594 2e5c FF150000 		_UNNEST	// adjust code pointer, compile
 2595              		.p2align 2 
 2596              	
 2597              	/************************************
 2598              	    [COMPILE]   ( -- //  string> )
 2599              	 	Compile the next immediate word 
 2600              		into code dictionary.
 2601              	*************************************/
 2602 2e60 3C2E0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2602      895B434F 
 2602      4D50494C 
 2602      455D00BF 
 2603 2e70 504700BF 		_NEST
 2604 2e74 012E0000 		_ADR	TICK
 2605 2e78 412E0000 		_ADR	COMMA
 2606 2e7c FF150000 		_UNNEST
 2607              	
 2608              	/****************************
 2609              	    COMPILE	( -- )
 2610              	 	Compile the next address 
 2611              		in colon list to code 
 2612              		dictionary.
 2613              	*******************************/
 2614 2e80 642E0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2614      47434F4D 
 2614      50494C45 
 2615 2e8c 504700BF 		_NEST
 2616 2e90 29180000 		_ADR	RFROM
 2617 2e94 A9180000 		_ADR	DUPP 
 2618 2e98 FD170000 		_ADR	AT
 2619 2e9c 77170000 		_DOLIT 1 
 2619      01000000 
 2620 2ea4 01190000 		_ADR	ORR 
 2621 2ea8 412E0000 		_ADR	COMMA 
 2622 2eac 091A0000 		_ADR	CELLP 
 2623 2eb0 51180000 		_ADR	TOR 
 2624 2eb4 FF150000 		_UNNEST	// adjust return address
 2625              	
 2626              	/*************************
 2627              	    LITERAL	( w -- )
 2628              	 	Compile tos to code 
 2629              		dictionary as an 
 2630              		integer literal.
 2631              	***************************/
 2632 2eb8 842E0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2632      874C4954 
 2632      4552414C 
 2633 2ec4 504700BF 		_NEST
 2634 2ec8 77170000 		_COMPI	DOLIT
 2634      76170000 
 2634      B5320000 
 2635 2ed4 412E0000 		_ADR	COMMA
 2636 2ed8 FF150000 		_UNNEST
ARM GAS  forth.s 			page 117


 2637              	
 2638              	/********************
 2639              	    $,"	( -- )
 2640              	 	Compile a literal 
 2641              		string up to next " .
 2642              	hidden word 
 2643              	************************/
 2644              	STRCQ:
 2645 2edc 504700BF 		_NEST
 2646 2ee0 77170000 		_DOLIT -4
 2646      FCFFFFFF 
 2647 2ee8 611D0000 		_ADR	CPP
 2648 2eec E51B0000 		_ADR	PSTOR
 2649 2ef0 77170000 		_DOLIT	'\"'
 2649      22000000 
 2650 2ef8 9D280000 		_ADR	WORDD			// move word to code dictionary
 2651 2efc 2D1C0000 		_ADR	COUNT
 2652 2f00 6D190000 		_ADR	PLUS
 2653 2f04 511F0000 		_ADR	ALGND			// calculate aligned end of string
 2654 2f08 611D0000 		_ADR	CPP
 2655 2f0c E9170000 		_ADR	STORE
 2656 2f10 FF150000 		_UNNEST 			// adjust the code pointer
 2657              	
 2658              	/*******************
 2659              	//  Structures
 2660              	*******************/
 2661              	
 2662              	/*************************
 2663              	    FOR	 ( -- a )
 2664              	 	Start a FOR-NEXT loop 
 2665              		structure in a colon 
 2666              		definition.
 2667              	**************************/
 2668 2f14 BC2E0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2668      C3464F52 
 2669 2f1c 504700BF 		_NEST
 2670 2f20 77170000 		_COMPI	TOR
 2670      50180000 
 2670      B5320000 
 2671 2f2c 05200000 		_ADR	HERE
 2672 2f30 FF150000 		_UNNEST
 2673              	
 2674              	/**********************
 2675              	    BEGIN	( -- a )
 2676              	 	Start an infinite 
 2677              		or indefinite 
 2678              		loop structure.
 2679              	************************/
 2680 2f34 182F0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2680      C5424547 
 2680      494E00BF 
 2681 2f40 504700BF 		_NEST
 2682 2f44 05200000 		_ADR	HERE
 2683 2f48 FF150000 		_UNNEST
 2684              		.p2align 2 
 2685              	
 2686              	/********************
ARM GAS  forth.s 			page 118


 2687              	    NEXT	( a -- )
 2688              	 	Terminate a FOR-NEXT
 2689              		loop structure.
 2690              	**************************/
 2691 2f4c 382F0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2691      C44E4558 
 2691      540000BF 
 2692 2f58 504700BF 		_NEST
 2693 2f5c 77170000 		_COMPI	DONXT
 2693      98170000 
 2693      B5320000 
 2694 2f68 412E0000 		_ADR	COMMA
 2695 2f6c FF150000 		_UNNEST
 2696              	
 2697              	/**********************
 2698              	    UNTIL	( a -- )
 2699              	 	Terminate a BEGIN-UNTIL
 2700              		indefinite loop structure.
 2701              	******************************/
 2702 2f70 502F0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2702      C5554E54 
 2702      494C00BF 
 2703 2f7c 504700BF 		_NEST
 2704 2f80 77170000 		_COMPI	QBRAN
 2704      B6170000 
 2704      B5320000 
 2705 2f8c 412E0000 		_ADR	COMMA
 2706 2f90 FF150000 		_UNNEST
 2707              	
 2708              	/**********************
 2709              	    AGAIN	( a -- )
 2710              	 	Terminate a BEGIN-AGAIN
 2711              		infinite loop structure.
 2712              	*****************************/
 2713 2f94 742F0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2713      C5414741 
 2713      494E00BF 
 2714 2fa0 504700BF 		_NEST
 2715 2fa4 77170000 		_COMPI	BRAN
 2715      CA170000 
 2715      B5320000 
 2716 2fb0 412E0000 		_ADR	COMMA
 2717 2fb4 FF150000 		_UNNEST
 2718              	
 2719              	/************************
 2720              	    IF	  ( -- A )
 2721              	 	Begin a conditional
 2722              		branch structure.
 2723              	**************************/
 2724 2fb8 982F0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2724      C2494600 
 2725 2fc0 504700BF 		_NEST
 2726 2fc4 77170000 		_COMPI	QBRAN
 2726      B6170000 
 2726      B5320000 
 2727 2fd0 05200000 		_ADR	HERE
 2728 2fd4 77170000 		_DOLIT	4
ARM GAS  forth.s 			page 119


 2728      04000000 
 2729 2fdc 611D0000 		_ADR	CPP
 2730 2fe0 E51B0000 		_ADR	PSTOR
 2731 2fe4 FF150000 		_UNNEST
 2732              	
 2733              	/*************************
 2734              	    AHEAD	( -- A )
 2735              	 	Compile a forward 
 2736              		branch instruction.
 2737              	*************************/
 2738 2fe8 BC2F0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2738      C5414845 
 2738      414400BF 
 2739 2ff4 504700BF 		_NEST
 2740 2ff8 77170000 		_COMPI	BRAN
 2740      CA170000 
 2740      B5320000 
 2741 3004 05200000 		_ADR	HERE
 2742 3008 77170000 		_DOLIT	4
 2742      04000000 
 2743 3010 611D0000 		_ADR	CPP
 2744 3014 E51B0000 		_ADR	PSTOR
 2745 3018 FF150000 		_UNNEST
 2746              	
 2747              	/**************************
 2748              	    REPEAT	( A a -- )
 2749              	 	Terminate a BEGIN-WHILE-REPEAT
 2750              		indefinite loop.
 2751              	**********************************/
 2752 301c EC2F0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2752      C6524550 
 2752      45415400 
 2753 3028 504700BF 		_NEST
 2754 302c A12F0000 		_ADR	AGAIN
 2755 3030 05200000 		_ADR	HERE
 2756 3034 B9180000 		_ADR	SWAP
 2757 3038 E9170000 		_ADR	STORE
 2758 303c FF150000 		_UNNEST
 2759              	
 2760              	/*********************
 2761              	    THEN	( A -- )
 2762              	 	Terminate a conditional
 2763              		branch structure.
 2764              	*****************************/
 2765 3040 20300000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2765      C4544845 
 2765      4E0000BF 
 2766 304c 504700BF 		_NEST
 2767 3050 05200000 		_ADR	HERE
 2768 3054 B9180000 		_ADR	SWAP
 2769 3058 E9170000 		_ADR	STORE
 2770 305c FF150000 		_UNNEST
 2771              	
 2772              	/***************************
 2773              	    AFT	 ( a -- a A )
 2774              	 	Jump to THEN in a 
 2775              		FOR-AFT-THEN-NEXT loop 
ARM GAS  forth.s 			page 120


 2776              		the first time through.
 2777              	*****************************/
 2778 3060 44300000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2778      C3414654 
 2779 3068 504700BF 		_NEST
 2780 306c 99180000 		_ADR	DROP
 2781 3070 F52F0000 		_ADR	AHEAD
 2782 3074 412F0000 		_ADR	BEGIN
 2783 3078 B9180000 		_ADR	SWAP
 2784 307c FF150000 		_UNNEST
 2785              	
 2786              	/**********************
 2787              	    ELSE	( A -- A )
 2788              	 	Start the false 
 2789              		clause in an 
 2790              		IF-ELSE-THEN structure.
 2791              	****************************/
 2792 3080 64300000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 2792      C4454C53 
 2792      450000BF 
 2793 308c 504700BF 		_NEST
 2794 3090 F52F0000 		_ADR	AHEAD
 2795 3094 B9180000 		_ADR	SWAP
 2796 3098 4D300000 		_ADR	THENN
 2797 309c FF150000 		_UNNEST
 2798              	
 2799              	/**************************
 2800              	    WHILE	( a -- A a )
 2801              	 	Conditional branch out 
 2802              		of a BEGIN-WHILE-REPEAT loop.
 2803              	*********************************/
 2804 30a0 84300000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 2804      C5574849 
 2804      4C4500BF 
 2805 30ac 504700BF 		_NEST
 2806 30b0 C12F0000 		_ADR	IFF
 2807 30b4 B9180000 		_ADR	SWAP
 2808 30b8 FF150000 		_UNNEST
 2809              	
 2810              	/***********************************
 2811              	    ABORT"	( -- //  string> )
 2812              	 	Conditional abort with an 
 2813              		error message.
 2814              	***********************************/
 2815 30bc A4300000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 2815      8641424F 
 2815      52542200 
 2816 30c8 504700BF 		_NEST
 2817 30cc 77170000 		_COMPI	ABORQ
 2817      042C0000 
 2817      B5320000 
 2818 30d8 DD2E0000 		_ADR	STRCQ
 2819 30dc FF150000 		_UNNEST
 2820              	
 2821              	/******************************
 2822              	    $"	( -- //  string> )
 2823              	 	Compile an inline 
ARM GAS  forth.s 			page 121


 2824              		word literal.
 2825              	*****************************/
 2826 30e0 C0300000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 2826      C2242200 
 2827 30e8 504700BF 		_NEST
 2828 30ec 77170000 		_COMPI	STRQP
 2828      94250000 
 2828      B5320000 
 2829 30f8 DD2E0000 		_ADR	STRCQ
 2830 30fc FF150000 		_UNNEST
 2831              	
 2832              	/******************************
 2833              	    ."	( -- //  string> )
 2834              	 	Compile an inline word
 2835              		literal to be typed out 
 2836              		at run time.
 2837              	*******************************/
 2838 3100 E4300000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 2838      C22E2200 
 2839 3108 504700BF 		_NEST
 2840 310c 77170000 		_COMPI	DOTQP
 2840      B0250000 
 2840      B5320000 
 2841 3118 DD2E0000 		_ADR	STRCQ
 2842 311c FF150000 		_UNNEST
 2843              	
 2844              	/*********************
 2845              	  Name compiler
 2846              	***********************/
 2847              	
 2848              	/**************************
 2849              	    ?UNIQUE	( a -- a )
 2850              	 	Display a warning 
 2851              		message if the word 
 2852              		already exists.
 2853              	**************************/
 2854 3120 04310000 		_HEADER UNIQU,7,"?UNIQUE"
 2854      073F554E 
 2854      49515545 
 2855 312c 504700BF 		_NEST
 2856 3130 A9180000 		_ADR	DUPP
 2857 3134 452A0000 		_ADR	NAMEQ			// ?name exists
 2858 3138 B7170000 		_QBRAN	UNIQ1	// redefinitions are OK
 2858      58310000 
 2859 3140 B1250000 		_DOTQP	7," reDef "		// but warn the user
 2859      07207265 
 2859      44656620 
 2860 314c CD180000 		_ADR	OVER
 2861 3150 2D1C0000 		_ADR	COUNT
 2862 3154 15250000 		_ADR	TYPEE			// just in case its not planned
 2863              	UNIQ1:
 2864 3158 99180000 		_ADR	DROP
 2865 315c FF150000 		_UNNEST
 2866              	
 2867              	/***********************
 2868              	    $,n	 ( na -- )
 2869              	 	Build a new dictionary 
ARM GAS  forth.s 			page 122


 2870              		name using the data at na.
 2871              	hidden word 
 2872              	*******************************/
 2873              	SNAME:
 2874 3160 504700BF 		_NEST
 2875 3164 A9180000 		_ADR	DUPP			//  na na
 2876 3168 1D180000 		_ADR	CAT			//  ?null input
 2877 316c B7170000 		_QBRAN	SNAM1
 2877      A8310000 
 2878 3174 2D310000 		_ADR	UNIQU			//  na
 2879 3178 891D0000 		_ADR	LAST			//  na last
 2880 317c FD170000 		_ADR	AT			//  na la
 2881 3180 412E0000 		_ADR	COMMA			//  na
 2882 3184 A9180000 		_ADR	DUPP			//  na na
 2883 3188 891D0000 		_ADR	LAST			//  na na last
 2884 318c E9170000 		_ADR	STORE			//  na , save na for vocabulary link
 2885 3190 2D1C0000 		_ADR	COUNT			//  na+1 count
 2886 3194 6D190000 		_ADR	PLUS			//  na+1+count
 2887 3198 511F0000 		_ADR	ALGND			//  word boundary
 2888 319c 611D0000 		_ADR	CPP
 2889 31a0 E9170000 		_ADR	STORE			//  top of dictionary now
 2890 31a4 FF150000 		_UNNEST
 2891              	SNAM1:
 2892 31a8 95250000 		_ADR	STRQP
 2893 31ac 07       		.byte	7
 2894 31ad 206E616D 		.ascii " name? "
 2894      653F20
 2895 31b4 D92B0000 		_ADR	ABORT
 2896              	
 2897              	/************************
 2898              	    $COMPILE	( a -- )
 2899              	 	Compile next word to 
 2900              		code dictionary as 
 2901              		a token or literal.
 2902              	**************************/
 2903 31b8 24310000 		_HEADER SCOMP,8,"$COMPILE"
 2903      0824434F 
 2903      4D50494C 
 2903      450000BF 
 2904 31c8 504700BF 		_NEST
 2905 31cc 452A0000 		_ADR	NAMEQ
 2906 31d0 7D1A0000 		_ADR	QDUP	// defined?
 2907 31d4 B7170000 		_QBRAN	SCOM2
 2907      04320000 
 2908 31dc FD170000 		_ADR	AT
 2909 31e0 77170000 		_DOLIT	IMEDD
 2909      80000000 
 2910 31e8 ED180000 		_ADR	ANDD	// immediate?
 2911 31ec B7170000 		_QBRAN	SCOM1
 2911      FC310000 
 2912 31f4 8D170000 		_ADR	EXECU
 2913 31f8 FF150000 		_UNNEST			// it's immediate, execute
 2914              	SCOM1:
 2915 31fc B5320000 		_ADR	CALLC			// it's not immediate, compile
 2916 3200 FF150000 		_UNNEST	
 2917              	SCOM2:
 2918 3204 85230000 		_ADR	NUMBQ
ARM GAS  forth.s 			page 123


 2919 3208 B7170000 		_QBRAN	SCOM3
 2919      18320000 
 2920 3210 C52E0000 		_ADR	LITER
 2921 3214 FF150000 		_UNNEST			// compile number as integer
 2922              	SCOM3: // compilation abort 
 2923 3218 21320000 		_ADR COLON_ABORT 
 2924 321c D92B0000 		_ADR	ABORT			// error
 2925              	
 2926              	/********************************
 2927              	 before aborting a compilation 
 2928              	 reset HERE and LAST
 2929              	 to previous values. 
 2930              	*******************************/
 2931              	COLON_ABORT:
 2932 3220 504700BF 		_NEST 
 2933 3224 891D0000 		_ADR LAST 
 2934 3228 FD170000 		_ADR AT 
 2935 322c 191A0000 		_ADR CELLM 
 2936 3230 A9180000 		_ADR DUPP 
 2937 3234 611D0000 		_ADR CPP  
 2938 3238 E9170000 		_ADR STORE 
 2939 323c FD170000 		_ADR AT 
 2940 3240 891D0000 		_ADR LAST 
 2941 3244 E9170000 		_ADR STORE 
 2942 3248 FF150000 		_UNNEST 
 2943              	
 2944              	/*********************
 2945              	    OVERT	( -- )
 2946              	 	Link a new word 
 2947              		into the current 
 2948              		vocabulary.
 2949              	**********************/
 2950 324c BC310000 		_HEADER OVERT,5,"OVERT"
 2950      054F5645 
 2950      525400BF 
 2951 3258 504700BF 		_NEST
 2952 325c 891D0000 		_ADR	LAST
 2953 3260 FD170000 		_ADR	AT
 2954 3264 4D1D0000 		_ADR	CNTXT
 2955 3268 E9170000 		_ADR	STORE
 2956 326c FF150000 		_UNNEST
 2957              	
 2958              	/**********************
 2959              	    ;  ( -- )
 2960              	 	Terminate a colon
 2961              		definition.
 2962              	***********************/
 2963 3270 50320000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 2963      C13B00BF 
 2964 3278 504700BF 		_NEST
 2965 327c 77170000 		_DOLIT	UNNEST
 2965      FE150000 
 2966 3284 B5320000 		_ADR	CALLC
 2967 3288 952C0000 		_ADR	LBRAC
 2968 328c 59320000 		_ADR	OVERT
 2969 3290 FF150000 		_UNNEST
 2970              	
ARM GAS  forth.s 			page 124


 2971              	/******************
 2972              	    ]	   ( -- )
 2973              	 	Start compiling 
 2974              		the words in 
 2975              		the input stream.
 2976              	*********************/
 2977 3294 74320000 		_HEADER RBRAC,1,"]"
 2977      015D00BF 
 2978 329c 504700BF 		_NEST
 2979 32a0 77170000 		_DOLIT	SCOMP
 2979      C8310000 
 2980 32a8 211D0000 		_ADR	TEVAL
 2981 32ac E9170000 		_ADR	STORE
 2982 32b0 FF150000 		_UNNEST
 2983              	
 2984              	/*********************
 2985              	    BL.W	( ca -- )
 2986              	 	compile ca.
 2987              	hidden word used by compiler
 2988              	*****************************/
 2989              	CALLC:
 2990 32b4 504700BF 		_NEST
 2991 32b8 77170000 		_DOLIT 1 
 2991      01000000 
 2992 32c0 01190000 		_ADR ORR 
 2993 32c4 412E0000 		_ADR COMMA  
 2994 32c8 FF150000 		_UNNEST 
 2995              	
 2996              	
 2997              	/*************************
 2998              	 	:	( -- //  string> )
 2999              	 	Start a new colon 
 3000              		definition using 
 3001              		next word as its name.
 3002              	**************************/
 3003 32cc 98320000 		_HEADER COLON,1,":"
 3003      013A00BF 
 3004 32d4 504700BF 		_NEST
 3005 32d8 C1280000 		_ADR	TOKEN
 3006 32dc 61310000 		_ADR	SNAME
 3007 32e0 09160000 		_ADR	COMPI_NEST 
 3008 32e4 9D320000 		_ADR	RBRAC
 3009 32e8 FF150000 		_UNNEST
 3010              	
 3011              	/*************************
 3012              	    IMMEDIATE   ( -- )
 3013              	 	Make the last compiled 
 3014              		word an immediate word.
 3015              	***************************/
 3016 32ec D0320000 		_HEADER IMMED,9,"IMMEDIATE"
 3016      09494D4D 
 3016      45444941 
 3016      544500BF 
 3017 32fc 504700BF 		_NEST
 3018 3300 77170000 		_DOLIT	IMEDD
 3018      80000000 
 3019 3308 891D0000 		_ADR	LAST
ARM GAS  forth.s 			page 125


 3020 330c FD170000 		_ADR	AT
 3021 3310 FD170000 		_ADR	AT
 3022 3314 01190000 		_ADR	ORR
 3023 3318 891D0000 		_ADR	LAST
 3024 331c FD170000 		_ADR	AT
 3025 3320 E9170000 		_ADR	STORE
 3026 3324 FF150000 		_UNNEST
 3027              	
 3028              	/******************
 3029              	  Defining words
 3030              	******************/
 3031              	
 3032              	/***********************************
 3033              	    CONSTANT	( u -- //  string> )
 3034              	 	Compile a new constant.
 3035              	************************************/
 3036 3328 F0320000 		_HEADER CONST,8,"CONSTANT"
 3036      08434F4E 
 3036      5354414E 
 3036      540000BF 
 3037 3338 504700BF 		_NEST 
 3038 333c C1280000 		_ADR	TOKEN
 3039 3340 61310000 		_ADR	SNAME
 3040 3344 59320000 		_ADR	OVERT
 3041 3348 09160000 		_ADR	COMPI_NEST
 3042 334c 77170000 		_DOLIT	DOCON
 3042      601C0000 
 3043 3354 B5320000 		_ADR	CALLC
 3044 3358 412E0000 		_ADR	COMMA
 3045 335c 77170000 		_DOLIT	UNNEST 
 3045      FE150000 
 3046 3364 B5320000 		_ADR	CALLC  
 3047 3368 FF150000 		_UNNEST
 3048              	
 3049              		.p2align 2 
 3050              	/****************************************
 3051              	 doDOES> ( -- a )
 3052              	 runtime action of DOES> 
 3053              	 leave parameter field address on stack 
 3054              	hidden word used by compiler 
 3055              	***************************************/
 3056              	DODOES:
 3057 336c 504700BF 		_NEST 
 3058 3370 29180000 		_ADR	RFROM
 3059 3374 091A0000 		_ADR	CELLP 
 3060 3378 C9190000 		_ADR	ONEP  
 3061 337c 891D0000 		_ADR LAST 
 3062 3380 FD170000 		_ADR AT
 3063 3384 DD280000 		_ADR NAMET 
 3064 3388 091A0000 		_ADR CELLP 
 3065 338c E9170000 		_ADR STORE  
 3066 3390 FF150000 		_UNNEST 
 3067              	
 3068              		.p2align 2
 3069              	/**********************
 3070              	  DOES> ( -- )
 3071              	  compile time action
ARM GAS  forth.s 			page 126


 3072              	*************************/
 3073 3394 2C330000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3073      C5444F45 
 3073      533E00BF 
 3074 33a0 504700BF 		_NEST 
 3075 33a4 77170000 		_DOLIT DODOES 
 3075      6C330000 
 3076 33ac B5320000 		_ADR CALLC 
 3077 33b0 77170000 		_DOLIT	UNNEST
 3077      FE150000 
 3078 33b8 B5320000 		_ADR	CALLC 
 3079 33bc 09160000 		_ADR COMPI_NEST
 3080 33c0 77170000 		_DOLIT RFROM 
 3080      28180000 
 3081 33c8 B5320000 		_ADR	CALLC
 3082 33cc FF150000 		_UNNEST 
 3083              	
 3084              	
 3085              	/****************************
 3086              	  DEFER@ ( "name" -- a )
 3087              	  return value of code field 
 3088              	  of defered function. 
 3089              	******************************/
 3090 33d0 98330000 		_HEADER DEFERAT,6,"DEFER@"
 3090      06444546 
 3090      45524000 
 3091 33dc 504700BF 		_NEST 
 3092 33e0 012E0000 		_ADR TICK
 3093 33e4 091A0000 		_ADR CELLP 
 3094 33e8 FD170000 		_ADR AT 
 3095 33ec D9190000 		_ADR ONEM 
 3096 33f0 FF150000 		_UNNEST 
 3097              	
 3098              	/*********************************
 3099              	 DEFER! ( "name1" "name2" -- )
 3100              	 assign an action to a defered word 
 3101              	************************************/
 3102 33f4 D4330000 		_HEADER DEFERSTO,6,"DEFER!"
 3102      06444546 
 3102      45522100 
 3103 3400 504700BF 		_NEST 
 3104 3404 012E0000 		_ADR TICK 
 3105 3408 C9190000 		_ADR ONEP 
 3106 340c 012E0000 		_ADR TICK 
 3107 3410 091A0000 		_ADR CELLP 
 3108 3414 E9170000 		_ADR STORE 
 3109 3418 FF150000 		_UNNEST
 3110              	
 3111              	/****************************
 3112              	  DEFER ( "name" -- )
 3113              	  create a defered definition
 3114              	*****************************/
 3115 341c F8330000 		_HEADER DEFER,5,"DEFER"
 3115      05444546 
 3115      455200BF 
 3116 3428 504700BF 		_NEST 
 3117 342c 79340000 		_ADR CREAT 
ARM GAS  forth.s 			page 127


 3118 3430 77170000 		_DOLIT UNNEST 
 3118      FE150000 
 3119 3438 B5320000 		_ADR CALLC 
 3120 343c 77170000 		_DOLIT DEFER_NOP
 3120      60340000 
 3121 3444 C9190000 		_ADR ONEP 
 3122 3448 891D0000 		_ADR LAST 
 3123 344c FD170000 		_ADR AT 
 3124 3450 DD280000 		_ADR NAMET 
 3125 3454 091A0000 		_ADR CELLP 
 3126 3458 E9170000 		_ADR STORE 
 3127 345c FF150000 		_UNNEST 
 3128              	DEFER_NOP:
 3129 3460 504700BF 		_NEST  
 3130 3464 75170000 		_ADR NOP 
 3131 3468 FF150000 		_UNNEST 
 3132              	
 3133              	/******************************
 3134              	    CREATE	( -- //  string> )
 3135              	 	Compile a new array entry 
 3136              		without allocating code space.
 3137              	***********************************/
 3138 346c 20340000 		_HEADER CREAT,6,"CREATE"
 3138      06435245 
 3138      41544500 
 3139 3478 504700BF 		_NEST 
 3140 347c C1280000 		_ADR	TOKEN
 3141 3480 61310000 		_ADR	SNAME
 3142 3484 59320000 		_ADR	OVERT
 3143 3488 09160000 		_ADR	COMPI_NEST 
 3144 348c 77170000 		_DOLIT	DOVAR
 3144      541C0000 
 3145 3494 B5320000 		_ADR	CALLC
 3146 3498 FF150000 		_UNNEST
 3147              	
 3148              	/*******************************
 3149              	    VARIABLE	( -- //  string> )
 3150              	 	Compile a new variable 
 3151              		initialized to 0.
 3152              	***********************************/
 3153 349c 70340000 		_HEADER VARIA,8,"VARIABLE"
 3153      08564152 
 3153      4941424C 
 3153      450000BF 
 3154 34ac 504700BF 		_NEST
 3155 34b0 79340000 		_ADR	CREAT
 3156 34b4 77170000 		_DOLIT	0
 3156      00000000 
 3157 34bc 412E0000 		_ADR	COMMA
 3158 34c0 77170000 		_DOLIT UNNEST
 3158      FE150000 
 3159 34c8 B5320000 		_ADR	CALLC  
 3160 34cc FF150000 		_UNNEST
 3161              	
 3162              	/***********
 3163              	  Tools
 3164              	***********/
ARM GAS  forth.s 			page 128


 3165              	
 3166              	/*************************
 3167              	    dm+	 ( a u -- a )
 3168              	 	Dump u bytes from , 
 3169              		leaving a+u on the stack.
 3170              	hidden word used by DUMP 
 3171              	****************************/
 3172              	DMP:
 3173 34d0 504700BF 		_NEST
 3174 34d4 CD180000 		_ADR	OVER
 3175 34d8 77170000 		_DOLIT	4
 3175      04000000 
 3176 34e0 F5250000 		_ADR	UDOTR			// display address
 3177 34e4 C1240000 		_ADR	SPACE
 3178 34e8 51180000 		_ADR	TOR			// start count down loop
 3179 34ec CB170000 		_BRAN	PDUM2			// skip first pass
 3179      0C350000 
 3180              	PDUM1:
 3181 34f4 A9180000 	  _ADR	DUPP
 3182 34f8 1D180000 		_ADR	CAT
 3183 34fc 77170000 		_DOLIT	3
 3183      03000000 
 3184 3504 F5250000 		_ADR	UDOTR			// display numeric data
 3185 3508 C9190000 		_ADR	ONEP			// increment address
 3186              	PDUM2:
 3187 350c 99170000 	  _ADR	DONXT
 3188 3510 F4340000 		.word	PDUM1	// loop till done
 3189 3514 FF150000 		_UNNEST
 3190              		.p2align 2 
 3191              	//    DUMP	( a u -- )
 3192              	// 	Dump u bytes from a, in a formatted manner.
 3193              	
 3194              	/**********************
 3195              		DUMP ( a n -- )
 3196              		hex dump memory 
 3197              	*********************/
 3198 3518 A0340000 		_HEADER DUMP,4,"DUMP"
 3198      0444554D 
 3198      500000BF 
 3199 3524 504700BF 		_NEST
 3200 3528 C51C0000 		_ADR	BASE
 3201 352c FD170000 		_ADR	AT
 3202 3530 51180000 		_ADR	TOR
 3203 3534 D5220000 		_ADR	HEX			// save radix,set hex
 3204 3538 77170000 		_DOLIT	16
 3204      10000000 
 3205 3540 F11E0000 		_ADR	SLASH			// change count to lines
 3206 3544 51180000 		_ADR	TOR
 3207 3548 CB170000 		_BRAN	DUMP4			// start count down loop
 3207      78350000 
 3208              	DUMP1:
 3209 3550 49250000 	  _ADR	CR
 3210 3554 77170000 		_DOLIT	16
 3210      10000000 
 3211 355c E11A0000 		_ADR	DDUP
 3212 3560 D1340000 		_ADR	DMP			// display numeric
 3213 3564 911A0000 		_ADR	ROT
ARM GAS  forth.s 			page 129


 3214 3568 911A0000 		_ADR	ROT
 3215 356c C1240000 		_ADR	SPACE
 3216 3570 C1240000 		_ADR	SPACE
 3217 3574 15250000 		_ADR	TYPEE			// display printable characters
 3218              	DUMP4:
 3219 3578 99170000 	  _DONXT	DUMP1	// loop till done
 3219      50350000 
 3220              	DUMP3:
 3221 3580 99180000 		_ADR	DROP
 3222 3584 29180000 		_ADR	RFROM
 3223 3588 C51C0000 		_ADR	BASE
 3224 358c E9170000 		_ADR	STORE			// restore radix
 3225 3590 FF150000 		_UNNEST
 3226              	
 3227              	/**********************
 3228              	   .S	  ( ... -- ... )
 3229              	 	Display the contents 
 3230              		of the data stack.
 3231              	*************************/
 3232 3594 1C350000 		_HEADER DOTS,2,".S"
 3232      022E5300 
 3233 359c 504700BF 		_NEST
 3234 35a0 C1240000 		_ADR	SPACE
 3235 35a4 B91F0000 		_ADR	DEPTH			// stack depth
 3236 35a8 51180000 		_ADR	TOR			// start count down loop
 3237 35ac CB170000 		_BRAN	DOTS2			// skip first pass
 3237      C0350000 
 3238              	DOTS1:
 3239 35b4 3D180000 		_ADR	RAT
 3240 35b8 DD1F0000 		_ADR	PICK
 3241 35bc 4D260000 		_ADR	DOT			// index stack, display contents
 3242              	DOTS2:
 3243 35c0 99170000 		_DONXT	DOTS1	// loop till done
 3243      B4350000 
 3244 35c8 C1240000 		_ADR	SPACE
 3245 35cc FF150000 		_UNNEST
 3246              	
 3247              	/*****************************
 3248              	    >NAME	( ca -- na | F )
 3249              	 	Convert code address 
 3250              		to a name address.
 3251              	*****************************/
 3252 35d0 98350000 		_HEADER TNAME,5,">NAME"
 3252      053E4E41 
 3252      4D4500BF 
 3253 35dc 504700BF 		_NEST
 3254 35e0 51180000 		_ADR	TOR			//  
 3255 35e4 4D1D0000 		_ADR	CNTXT			//  va
 3256 35e8 FD170000 		_ADR	AT			//  na
 3257              	TNAM1:
 3258 35ec A9180000 		_ADR	DUPP			//  na na
 3259 35f0 B7170000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3259      20360000 
 3260 35f8 A9180000 		_ADR	DUPP			//  na na
 3261 35fc DD280000 		_ADR	NAMET			//  na ca
 3262 3600 3D180000 		_ADR	RAT			//  na ca code
 3263 3604 15190000 		_ADR	XORR			//  na f --
ARM GAS  forth.s 			page 130


 3264 3608 B7170000 		_QBRAN	TNAM2
 3264      20360000 
 3265 3610 191A0000 		_ADR	CELLM			//  la 
 3266 3614 FD170000 		_ADR	AT			//  next_na
 3267 3618 CB170000 		_BRAN	TNAM1
 3267      EC350000 
 3268              	TNAM2:	
 3269 3620 29180000 		_ADR	RFROM
 3270 3624 99180000 		_ADR	DROP			//  0|na --
 3271 3628 FF150000 		_UNNEST			// 0
 3272              	
 3273              	/********************************
 3274              	    .ID	 ( na -- )
 3275              	 	Display the name at address.
 3276              	********************************/
 3277 362c D4350000 		_HEADER DOTID,3,".ID"
 3277      032E4944 
 3278 3634 504700BF 		_NEST
 3279 3638 7D1A0000 		_ADR	QDUP			// if zero no name
 3280 363c B7170000 		_QBRAN	DOTI1
 3280      5C360000 
 3281 3644 2D1C0000 		_ADR	COUNT
 3282 3648 77170000 		_DOLIT	0x1F
 3282      1F000000 
 3283 3650 ED180000 		_ADR	ANDD			// mask lexicon bits
 3284 3654 15250000 		_ADR	TYPEE
 3285 3658 FF150000 		_UNNEST			// display name string
 3286              	DOTI1:
 3287 365c B1250000 		_DOTQP	9," {noName}"
 3287      09207B6E 
 3287      6F4E616D 
 3287      657D00BF 
 3288 366c FF150000 		_UNNEST
 3289              	
 3290              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3291              	.if WANT_SEE 
 3292              	/*******************************
 3293              	    SEE	 ( -- //  string> )
 3294              	 	A simple decompiler.
 3295              	*******************************/
 3296              		_HEADER SEE,3,"SEE"
 3297              		_NEST
 3298              		_ADR	TICK	//  ca --, starting address
 3299              		_ADR	CR	
 3300              		_DOLIT	20
 3301              		_ADR	TOR
 3302              	SEE1:
 3303              		_ADR	CELLP			//  a
 3304              		_ADR	DUPP			//  a a
 3305              		_ADR	DECOMP		//  a
 3306              		_DONXT	SEE1
 3307              		_ADR	DROP
 3308              		_UNNEST
 3309              	
 3310              	/*************************
 3311              	 	DECOMPILE ( a -- )
 3312              	 	Convert code in a.  
ARM GAS  forth.s 			page 131


 3313              		Display name of command or as data.
 3314              	*************************************/
 3315              		_HEADER DECOMP,9,"DECOMPILE"
 3316              		_NEST
 3317              		_ADR	DUPP			//  a a
 3318              	// 	_ADR	TOR			//  a
 3319              		_ADR	AT			//  a code
 3320              		_ADR	DUPP			//  a code code
 3321              		_DOLIT	0xF800D000 //0xF800F800
 3322              		_ADR	ANDD
 3323              		_DOLIT	0xF000D000 //0xF800F000
 3324              		_ADR	EQUAL			//  a code ?
 3325              		_ADR	INVER 
 3326              		_QBRAN	DECOM2	//  not a command
 3327              		//  a valid_code --, extract address and display name
 3328              		MOVW	IP,#0xFFE
 3329              		MOV	WP,TOS
 3330              		LSL	TOS,TOS,#21		//  get bits 22-12
 3331              		ASR	TOS,TOS,#9		//  with sign extension
 3332              		LSR	WP,WP,#15		//  get bits 11-1
 3333              		AND	WP,WP,IP		//  retain only bits 11-1
 3334              		ORR	TOS,TOS,WP		//  get bits 22-1
 3335              		NOP
 3336              		_ADR	OVER			//  a offset a
 3337              		_ADR	PLUS			//  a target-4
 3338              		_ADR	CELLP			//  a target
 3339              		_ADR	TNAME			//  a na/0 --, is it a name?
 3340              		_ADR	QDUP			//  name address or zero
 3341              		_QBRAN	DECOM1
 3342              		_ADR	SPACE			//  a na
 3343              		_ADR	DOTID			//  a --, display name
 3344              	// 	_ADR	RFROM			//  a
 3345              		_ADR	DROP
 3346              		_UNNEST
 3347              	DECOM1:	// _ADR	RFROM		//  a
 3348              		_ADR	AT			//  data
 3349              		_ADR	UDOT			//  display data
 3350              		_UNNEST
 3351              	DECOM2:
 3352              		_ADR	UDOT
 3353              	// 	_ADR	RFROM
 3354              		_ADR	DROP
 3355              		_UNNEST
 3356              	.endif 
 3357              	
 3358              	/*********************
 3359              	    WORDS	( -- )
 3360              	 	Display the names 
 3361              		in the context vocabulary.
 3362              	*******************************/
 3363 3670 30360000 		_HEADER WORDS,5,"WORDS"
 3363      05574F52 
 3363      445300BF 
 3364 367c 504700BF 		_NEST
 3365 3680 49250000 		_ADR	CR
 3366 3684 4D1D0000 		_ADR	CNTXT
 3367 3688 FD170000 		_ADR	AT			// only in context
ARM GAS  forth.s 			page 132


 3368              	WORS1:
 3369 368c 7D1A0000 		_ADR	QDUP			// ?at end of list
 3370 3690 B7170000 		_QBRAN	WORS2
 3370      B4360000 
 3371 3698 A9180000 		_ADR	DUPP
 3372 369c C1240000 		_ADR	SPACE
 3373 36a0 35360000 		_ADR	DOTID			// display a name
 3374 36a4 191A0000 		_ADR	CELLM
 3375 36a8 FD170000 		_ADR	AT
 3376 36ac CB170000 		_BRAN	WORS1
 3376      8C360000 
 3377              	WORS2:
 3378 36b4 FF150000 		_UNNEST
 3379              	
 3380              	/****************
 3381              	  cold start
 3382              	*****************/
 3383              	
 3384              	/**********************************
 3385              	    VER	 ( -- n )
 3386              	 	Return the version 
 3387              		number of this implementation.
 3388              	hidden word used by COLD
 3389              	**********************************/
 3390              	VERSN:
 3391 36b8 504700BF 		_NEST
 3392 36bc 77170000 		_DOLIT	VER*256+EXT
 3392      00010000 
 3393 36c4 FF150000 		_UNNEST
 3394              	
 3395              	/*********************
 3396              	    hi	  ( -- )
 3397              	 	Display the sign-on 
 3398              		message.
 3399              	***********************/
 3400 36c8 74360000 		_HEADER HI,2,"HI"
 3400      02484900 
 3401 36d0 504700BF 		_NEST
 3402 36d4 49250000 		_ADR	CR	// initialize I/O
 3403 36d8 B1250000 		_DOTQP	17, "beyond Jupiter, v" 
 3403      11626579 
 3403      6F6E6420 
 3403      4A757069 
 3403      7465722C 
 3404 36f0 C51C0000 		_ADR	BASE
 3405 36f4 FD170000 		_ADR	AT
 3406 36f8 D5220000 		_ADR	HEX	// save radix
 3407 36fc B9360000 		_ADR	VERSN
 3408 3700 C5210000 		_ADR	BDIGS
 3409 3704 11220000 		_ADR	DIG
 3410 3708 11220000 		_ADR	DIG
 3411 370c 77170000 		_DOLIT	'.'
 3411      2E000000 
 3412 3714 E5210000 		_ADR	HOLD
 3413 3718 31220000 		_ADR	DIGS
 3414 371c 85220000 		_ADR	EDIGS
 3415 3720 15250000 		_ADR	TYPEE	// format version number
ARM GAS  forth.s 			page 133


 3416 3724 C51C0000 		_ADR	BASE
 3417 3728 E9170000 		_ADR	STORE
 3418 372c 49250000 		_ADR	CR
 3419 3730 FF150000 		_UNNEST			// restore radix
 3420              	
 3421              	/********************
 3422              	    COLD	( -- )
 3423              	 	The high level cold 
 3424              		start sequence.
 3425              	**************************/
 3426 3734 CC360000 		.word	LINK 
 3427              		LINK = . 
 3428 3738 04       	_LASTN:	.byte  4
 3429 3739 434F4C44 		.ascii "COLD"
 3430 373d 0000BF   		.p2align 2	
 3431              	COLD:
 3432 3740 00B5FCF7 		_CALL forth_init 
 3432      05FD5DF8 
 3432      04EB
 3433 374a DFF850C0 		ldr IP,=COLD1 
 3434 374e FDF753BF 		_NEXT
 3435 3752 00BF     		.p2align 2 
 3436              	COLD1:
 3437 3754 B5140000 		_ADR KBD_RST 
 3438 3758 77170000 		_DOLIT  0 
 3438      00000000 
 3439 3760 4D170000 		_ADR ULED // turn off user LED 
 3440 3764 77170000 		_DOLIT	UZERO
 3440      DC030000 
 3441 376c 77170000 		_DOLIT	UPP
 3441      00000020 
 3442 3774 77170000 		_DOLIT	ULAST-UZERO
 3442      A8000000 
 3443 377c A5200000 		_ADR	MOVE 			// initialize user area
 3444 3780 612D0000 		_ADR	PRESE			// initialize stack and TIB
 3445 3784 B11C0000 		_ADR	TBOOT
 3446 3788 55200000 		_ADR	ATEXE			// application boot
 3447 378c 59320000 		_ADR	OVERT
 3448 3790 CB170000 		_BRAN	QUIT			// start interpretation
 3448      802D0000 
 3449              	COLD2:
 3450              		.p2align 2 	
 3451              	CTOP:
 3452 3798 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3453              	
 3454              	
 3455 379c 54370000 	  .end 
ARM GAS  forth.s 			page 134


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 135


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
ARM GAS  forth.s 			page 136


     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:181    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:182    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:183    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:184    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:185    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:186    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:187    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:188    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:189    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:190    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:191    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:192    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:193    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:194    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:195    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:196    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:197    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:198    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:199    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:200    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:201    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:202    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:203    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:204    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:205    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:206    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:207    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:208    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:209    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:210    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:211    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:212    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:213    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:214    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:215    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:216    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:217    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:218    *ABS*:0000000000000314 NVIC_IABR5
ARM GAS  forth.s 			page 137


     stm32f411ce.inc:219    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:220    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:222    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:225    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:226    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:227    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:228    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:229    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:230    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:231    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:232    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:233    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:236    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:237    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:238    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:239    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:240    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:241    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:244    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:245    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:246    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:247    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:248    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:249    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:261    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:272    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:278    *ABS*:000000000000003a DMAS2_IRQ
ARM GAS  forth.s 			page 138


     stm32f411ce.inc:279    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:280    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:281    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:282    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:288    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:289    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:290    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:294    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:295    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:296    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:297    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:299    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:300    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:301    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:302    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:306    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:309    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:310    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:311    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:312    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:313    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:314    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:315    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:316    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:317    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:318    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:319    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:320    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:321    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:322    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:323    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:324    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:325    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:326    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:327    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:328    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:331    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:333    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:334    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:335    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:336    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:337    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:338    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:339    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:342    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:344    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:345    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:346    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:347    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:348    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:349    *ABS*:0000000000000014 EXTI_PR
ARM GAS  forth.s 			page 139


          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
             forth.s:2483   .text:0000000000002d1c EVAL
             forth.s:1510   .text:00000000000021e4 HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
ARM GAS  forth.s 			page 140


          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:263    .text:0000000000000128 reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:122    .text:00000000000007a8 tv_out_isr
          ser-term.s:35     .text:0000000000000490 uart_rx_handler
           ps2_kbd.s:77     .text:0000000000001024 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:278    .text:0000000000000150 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:97     .text:00000000000015f8 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2504   .text:0000000000002d60 PRESE
             forth.s:280    .text:0000000000001776 DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:893    .text:0000000000001c2c COUNT
             forth.s:1774   .text:0000000000002514 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:449    .text:00000000000018a8 DUPP
             forth.s:405    .text:0000000000001850 TOR
             forth.s:980    .text:0000000000001cc4 BASE
             forth.s:351    .text:00000000000017e8 STORE
             forth.s:1912   .text:000000000000264c DOT
             forth.s:387    .text:0000000000001828 RFROM
             forth.s:484    .text:00000000000018ec ANDD
             forth.s:321    .text:00000000000017b6 QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:165    .text:0000000000001680 EMIT
             forth.s:1746   .text:00000000000024c0 SPACE
              init.s:243    .text:0000000000000100 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:232    .text:00000000000000dc $d
              init.s:238    .text:00000000000000f0 user_reboot_msg
              init.s:239    .text:00000000000000f0 $d
              init.s:241    .text:00000000000000fe $t
              init.s:381    .text:0000000000000250 remap
              init.s:291    .text:0000000000000178 init_devices
          ser-term.s:56     .text:00000000000004bc ser_init
             tvout.s:66     .text:00000000000006f8 tv_init
           ps2_kbd.s:307    .text:0000000000001244 kbd_init
             forth.s:3431   .text:0000000000003740 COLD
             forth.s:93     .text:00000000000015f0 NEST
              init.s:304    .text:0000000000000196 wait_hserdy
              init.s:325    .text:00000000000001b8 wait_pllrdy
              init.s:337    .text:00000000000001d2 wait_sws
              init.s:471    .text:000000000000031a gpio_config
              init.s:546    .text:00000000000003c6 gpio_out
              init.s:406    .text:0000000000000290 nvic_set_priority
ARM GAS  forth.s 			page 141


              init.s:561    .text:00000000000003dc UZERO
              init.s:597    .text:0000000000000484 ULAST
              init.s:415    .text:00000000000002a8 negative_irq
              init.s:427    .text:00000000000002c2 nvic_enable_irq
              init.s:444    .text:00000000000002ec nvic_disable_irq
              init.s:508    .text:0000000000000382 input_pull
              init.s:501    .text:0000000000000370 output_type
              init.s:524    .text:0000000000000398 gpio_speed
              init.s:562    .text:00000000000003dc $d
             forth.s:3400   .text:00000000000036d0 HI
          ser-term.s:90     .text:0000000000000524 SER_QKEY
          ser-term.s:110    .text:0000000000000560 SER_EMIT
             forth.s:2420   .text:0000000000002c38 INTER
             forth.s:3428   .text:0000000000003738 _LASTN
             forth.s:3451   .text:0000000000003798 CTOP
             forth.s:3427   .text:0000000000003738 LINK
              init.s:602    .text:0000000000000484 $d
          ser-term.s:33     .text:0000000000000490 $t
          ser-term.s:90     .text:0000000000000514 $d
          ser-term.s:90     .text:0000000000000518 _SER_QKEY
          ser-term.s:110    .text:0000000000000550 $d
          ser-term.s:110    .text:0000000000000554 _SER_EMIT
          ser-term.s:124    .text:000000000000057a $d
          ser-term.s:124    .text:000000000000057e _LOCAL
          ser-term.s:124    .text:0000000000000584 $t
          ser-term.s:124    .text:0000000000000584 LOCAL
          ser-term.s:133    .text:0000000000000590 $d
          ser-term.s:133    .text:0000000000000594 _SERIAL
          ser-term.s:133    .text:000000000000059c SERIAL
          ser-term.s:142    .text:00000000000005a8 $d
          ser-term.s:142    .text:00000000000005ac _CONSOLE
          ser-term.s:142    .text:00000000000005b4 $t
          ser-term.s:142    .text:00000000000005b4 CONSOLE
           ps2_kbd.s:382    .text:0000000000001300 PS2_QKEY
             tvout.s:511    .text:0000000000000bec TV_EMIT
          ser-term.s:163    .text:00000000000005d0 $d
          ser-term.s:163    .text:00000000000005d4 _ANSI_PARAM
          ser-term.s:163    .text:00000000000005e0 ANSI_PARAM
          ser-term.s:165    .text:00000000000005e4 $d
             forth.s:590    .text:00000000000019c8 ONEP
             forth.s:1201   .text:0000000000001eb8 SLMOD
             forth.s:679    .text:0000000000001a7c QDUP
             forth.s:336    .text:00000000000017ca BRAN
             forth.s:541    .text:000000000000196c PLUS
             forth.s:598    .text:00000000000019d8 ONEM
             forth.s:100    .text:00000000000015fe UNNEST
          ser-term.s:190    .text:0000000000000650 _ANSI_ESC
          ser-term.s:190    .text:0000000000000658 ANSI_ESC
          ser-term.s:192    .text:000000000000065c $d
          ser-term.s:202    .text:000000000000067c _SER_AT
          ser-term.s:202    .text:0000000000000684 SER_AT
          ser-term.s:204    .text:0000000000000688 $d
             forth.s:457    .text:00000000000018b8 SWAP
          ser-term.s:218    .text:00000000000006b8 _SER_CLS
          ser-term.s:218    .text:00000000000006c0 $t
          ser-term.s:218    .text:00000000000006c0 SER_CLS
          ser-term.s:220    .text:00000000000006c4 $d
ARM GAS  forth.s 			page 142


          ser-term.s:227    .text:00000000000006e8 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:66     .text:00000000000006f8 $t
             tvout.s:141    .text:00000000000007d4 state_vsync
             tvout.s:182    .text:0000000000000828 state_pre_video
             tvout.s:193    .text:000000000000083a state_video_out
             tvout.s:223    .text:0000000000000892 state_post_video
             tvout.s:240    .text:00000000000008b8 tv_isr_exit
             tvout.s:171    .text:000000000000080e sync_end
             tvout.s:232    .text:00000000000008a4 frame_end
             tvout.s:250    .text:00000000000008ba $d
             tvout.s:250    .text:00000000000008be _BACKCOLOR
             tvout.s:250    .text:00000000000008cc BACKCOLOR
             tvout.s:257    .text:00000000000008d8 $d
             tvout.s:257    .text:00000000000008dc _PENCOLOR
             tvout.s:257    .text:00000000000008e6 $t
             tvout.s:257    .text:00000000000008e8 PENCOLOR
             tvout.s:264    .text:00000000000008f4 $d
             tvout.s:264    .text:00000000000008f8 _CURSOR_COL
             tvout.s:264    .text:0000000000000900 CURSOR_COL
             tvout.s:271    .text:000000000000090c $d
             tvout.s:271    .text:0000000000000910 _CURSOR_ROW
             tvout.s:271    .text:0000000000000914 $t
             tvout.s:271    .text:0000000000000914 CURSOR_ROW
             tvout.s:278    .text:0000000000000920 $d
             tvout.s:278    .text:0000000000000924 _ROWY
             tvout.s:278    .text:000000000000092a $t
             tvout.s:278    .text:000000000000092c ROWY
             tvout.s:285    .text:0000000000000938 $d
             tvout.s:285    .text:000000000000093c _COLX
             tvout.s:285    .text:0000000000000942 $t
             tvout.s:285    .text:0000000000000944 COLX
             tvout.s:292    .text:0000000000000950 $d
ARM GAS  forth.s 			page 143


             tvout.s:292    .text:0000000000000954 _FONT
             tvout.s:292    .text:000000000000095c FONT
             tvout.s:692    .rodata:0000000000000000 font_6x8
             tvout.s:299    .text:0000000000000968 $d
             tvout.s:299    .text:000000000000096c _VIDBUFF
             tvout.s:299    .text:0000000000000974 $t
             tvout.s:299    .text:0000000000000974 VIDBUFF
             tvout.s:311    .text:000000000000097e $d
             tvout.s:311    .text:0000000000000982 _PLOT
             tvout.s:311    .text:0000000000000988 PLOT
             tvout.s:359    .text:0000000000000a0c plot_op
             tvout.s:327    .text:00000000000009b4 op_back
             tvout.s:336    .text:00000000000009ce op_pen
             tvout.s:345    .text:00000000000009e8 op_invert
             tvout.s:349    .text:00000000000009f0 op_xor
             tvout.s:359    .text:0000000000000a0c $d
             tvout.s:364    .text:0000000000000a14 _VSYNC
             tvout.s:364    .text:0000000000000a1a $t
             tvout.s:364    .text:0000000000000a1c VSYNC
             tvout.s:372    .text:0000000000000a26 $d
             tvout.s:372    .text:0000000000000a2a _CLS
             tvout.s:372    .text:0000000000000a2e $t
             tvout.s:372    .text:0000000000000a30 CLS
             tvout.s:396    .text:0000000000000a72 $d
             tvout.s:396    .text:0000000000000a76 _CLRLINE
             tvout.s:396    .text:0000000000000a7e $t
             tvout.s:396    .text:0000000000000a80 CLRLINE
             tvout.s:398    .text:0000000000000a84 $d
             forth.s:559    .text:000000000000198c STAR
             forth.s:1418   .text:00000000000020d8 FILL
             tvout.s:411    .text:0000000000000ab8 _SCROLLUP
             tvout.s:411    .text:0000000000000ac4 SCROLLUP
             tvout.s:413    .text:0000000000000ac8 $d
             forth.s:550    .text:000000000000197c SUBB
             forth.s:1396   .text:00000000000020a4 MOVE
             tvout.s:430    .text:0000000000000b10 _RIGHT
             tvout.s:430    .text:0000000000000b16 $t
             tvout.s:430    .text:0000000000000b18 RIGHT
             tvout.s:441    .text:0000000000000b38 TVCR
             tvout.s:441    .text:0000000000000b2c $d
             tvout.s:441    .text:0000000000000b30 _TVCR
             tvout.s:441    .text:0000000000000b36 $t
             tvout.s:452    .text:0000000000000b60 $d
             tvout.s:457    .text:0000000000000b68 FONT_PIXEL
             tvout.s:458    .text:0000000000000b68 $t
             tvout.s:464    .text:0000000000000b78 INCR_X
             tvout.s:471    .text:0000000000000b84 NEXT_PIXEL
             tvout.s:480    .text:0000000000000b8c CHAR_ROW
             tvout.s:482    .text:0000000000000b90 $d
             forth.s:729    .text:0000000000001ae0 DDUP
             forth.s:396    .text:000000000000183c RAT
             forth.s:302    .text:0000000000001798 DONXT
             forth.s:720    .text:0000000000001acc TDROP
             tvout.s:499    .text:0000000000000bcc CHAR_FONT
             tvout.s:500    .text:0000000000000bcc $t
             tvout.s:511    .text:0000000000000be0 $d
             tvout.s:511    .text:0000000000000be4 _TV_EMIT
ARM GAS  forth.s 			page 144


             tvout.s:511    .text:0000000000000bec $t
             tvout.s:513    .text:0000000000000bf0 $d
             forth.s:801    .text:0000000000001b74 ULESS
             tvout.s:541    .text:0000000000000c74 CTRL_KEY
             forth.s:361    .text:00000000000017fc AT
             forth.s:689    .text:0000000000001a90 ROT
             forth.s:379    .text:000000000000181c CAT
             tvout.s:614    .text:0000000000000d78 DRAW_CURSOR
             tvout.s:645    .text:0000000000000e04 ERASE_CURSOR
             forth.s:789    .text:0000000000001b5c EQUAL
             tvout.s:598    .text:0000000000000d3c BACK_SPACE
             forth.s:441    .text:0000000000001898 DROP
             tvout.s:566    .text:0000000000000ce4 CAR_RET
             tvout.s:577    .text:0000000000000cfc LN_FEED
             tvout.s:567    .text:0000000000000ce4 $t
             tvout.s:568    .text:0000000000000ce8 $d
             tvout.s:578    .text:0000000000000cfc $t
             tvout.s:579    .text:0000000000000d00 $d
             forth.s:502    .text:0000000000001914 XORR
             tvout.s:599    .text:0000000000000d3c $t
             tvout.s:600    .text:0000000000000d40 $d
             tvout.s:614    .text:0000000000000d6c _DRAW_CURSOR
             tvout.s:614    .text:0000000000000d78 $t
             tvout.s:617    .text:0000000000000d7c $d
             forth.s:671    .text:0000000000001a6c TWOSL
             forth.s:369    .text:0000000000001808 CSTOR
             forth.s:711    .text:0000000000001ab8 DDROP
             tvout.s:645    .text:0000000000000df4 _ERASE_CURSOR
             tvout.s:648    .text:0000000000000e08 $d
             forth.s:532    .text:000000000000195c LSHIFT
             forth.s:493    .text:0000000000001900 ORR
             tvout.s:658    .text:0000000000000e30 _TV_AT
             tvout.s:658    .text:0000000000000e36 $t
             tvout.s:658    .text:0000000000000e38 TV_AT
             tvout.s:673    .text:0000000000000e5a $d
             tvout.s:673    .text:0000000000000e5e _INPUT
             tvout.s:673    .text:0000000000000e64 $t
             tvout.s:673    .text:0000000000000e64 INPUT
             tvout.s:675    .text:0000000000000e68 $d
             forth.s:1340   .text:000000000000201c PAD
             forth.s:2328   .text:0000000000002b24 ACCEP
             forth.s:467    .text:00000000000018cc OVER
             tvout.s:688    .rodata:0000000000000000 $d
             tvout.s:793    .text:0000000000000e94 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
ARM GAS  forth.s 			page 145


       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:83     *ABS*:0000000000000003 VK_CTRL_C
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
ARM GAS  forth.s 			page 146


       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
ARM GAS  forth.s 			page 147


       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000ea0 sc_ascii
         mcSaite.inc:100    .text:0000000000000f54 shifted
         mcSaite.inc:151    .text:0000000000000fb4 altchar
         mcSaite.inc:167    .text:0000000000000fc4 extended
         mcSaite.inc:191    .text:0000000000000fec controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000c KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000b KBD_CLOCK_PIN
           ps2_kbd.s:77     .text:0000000000001022 $t
           ps2_kbd.s:178    .text:000000000000114e send_bit
           ps2_kbd.s:106    .text:0000000000001084 start_bit
           ps2_kbd.s:117    .text:00000000000010a8 parity_bit
           ps2_kbd.s:124    .text:00000000000010bc stop_bit
           ps2_kbd.s:151    .text:0000000000001112 store_code
           ps2_kbd.s:253    .text:00000000000011e4 do_async_key
           ps2_kbd.s:203    .text:0000000000001192 send_parity
           ps2_kbd.s:210    .text:00000000000011a4 send_stop
           ps2_kbd.s:218    .text:00000000000011b2 rx_ack_bit
           ps2_kbd.s:236    .text:00000000000011d2 is_async_key
           ps2_kbd.s:286    .text:0000000000001232 async_keys
           ps2_kbd.s:364    .text:00000000000012d6 table_scan
           ps2_kbd.s:260    .text:00000000000011f6 set_async_key
           ps2_kbd.s:295    .text:0000000000001240 async_jump
           ps2_kbd.s:265    .text:0000000000001202 shift_key
           ps2_kbd.s:273    .text:0000000000001212 set_reset
           ps2_kbd.s:268    .text:0000000000001208 ctrl_key
           ps2_kbd.s:271    .text:000000000000120e alt_key
           ps2_kbd.s:287    .text:0000000000001232 $d
           ps2_kbd.s:326    .text:0000000000001282 $d
           ps2_kbd.s:326    .text:0000000000001286 _KEY_ASYNC
           ps2_kbd.s:326    .text:0000000000001290 $t
           ps2_kbd.s:326    .text:0000000000001290 KEY_ASYNC
           ps2_kbd.s:336    .text:000000000000129e keycode
           ps2_kbd.s:351    .text:00000000000012c6 wait_code
           ps2_kbd.s:382    .text:00000000000012f0 $d
           ps2_kbd.s:382    .text:00000000000012f4 _PS2_QKEY
           ps2_kbd.s:402    .text:000000000000134c inkey_exit
           ps2_kbd.s:404    .text:000000000000134e pause_key
ARM GAS  forth.s 			page 148


           ps2_kbd.s:413    .text:0000000000001362 do_modifiers
           ps2_kbd.s:422    .text:000000000000137a shift_down
           ps2_kbd.s:426    .text:0000000000001380 altchar_down
           ps2_kbd.s:430    .text:0000000000001386 ctrl_down
           ps2_kbd.s:438    .text:00000000000013a2 do_capslock
           ps2_kbd.s:464    .text:00000000000013c6 kbd_send
           ps2_kbd.s:523    .text:000000000000148a kbd_clear_queue
           ps2_kbd.s:537    .text:00000000000014a8 $d
           ps2_kbd.s:537    .text:00000000000014ac _KBD_RST
           ps2_kbd.s:537    .text:00000000000014b4 $t
           ps2_kbd.s:537    .text:00000000000014b4 KBD_RST
           ps2_kbd.s:560    .text:00000000000014fa $d
           ps2_kbd.s:560    .text:00000000000014fe _KBD_LED
           ps2_kbd.s:560    .text:0000000000001506 $t
           ps2_kbd.s:560    .text:0000000000001508 KBD_LED
           ps2_kbd.s:585    .text:000000000000155a $d
           ps2_kbd.s:585    .text:000000000000155e _CAPS_LED
           ps2_kbd.s:585    .text:0000000000001568 CAPS_LED
           ps2_kbd.s:596    .text:0000000000001592 $d
           ps2_kbd.s:603    .text:000000000000159e _WKEY
           ps2_kbd.s:603    .text:00000000000015a8 WKEY
           ps2_kbd.s:605    .text:00000000000015ac $d
           ps2_kbd.s:610    .text:00000000000015c4 $d
             forth.s:80     .text:00000000000015e4 $t
             forth.s:83     .text:00000000000015e4 TPUSH
             forth.s:88     .text:00000000000015ea TPOP
             forth.s:113    .text:0000000000001608 COMPI_NEST
             forth.s:126    .text:0000000000001626 TSTDIN
             forth.s:133    .text:0000000000001630 TSTDOUT
             forth.s:142    .text:000000000000163a $d
             forth.s:142    .text:000000000000163e _QKEY
             forth.s:142    .text:0000000000001644 QKEY
             forth.s:143    .text:0000000000001644 QRX
             forth.s:145    .text:0000000000001648 $d
             forth.s:1363   .text:0000000000002054 ATEXE
             forth.s:153    .text:0000000000001658 _KEY
             forth.s:153    .text:000000000000165c $t
             forth.s:153    .text:000000000000165c KEY
             forth.s:155    .text:0000000000001660 KEY1
             forth.s:156    .text:0000000000001660 $d
             forth.s:165    .text:0000000000001678 _EMIT
             forth.s:166    .text:0000000000001680 TECHO
             forth.s:168    .text:0000000000001684 $d
             forth.s:202    .text:0000000000001694 _RAND
             forth.s:202    .text:000000000000169c RAND
             forth.s:204    .text:00000000000016a0 $d
             forth.s:768    .text:0000000000001b34 ABSS
             forth.s:944    .text:0000000000001c74 SEED
             forth.s:523    .text:0000000000001944 RSHIFT
             forth.s:1214   .text:0000000000001ed8 MODD
             forth.s:233    .text:0000000000001710 _PAUSE
             forth.s:233    .text:0000000000001716 $t
             forth.s:233    .text:0000000000001718 PAUSE
             forth.s:235    .text:000000000000171c $d
             forth.s:962    .text:0000000000001c9c TIMER
             forth.s:237    .text:0000000000001724 PAUSE_LOOP
             forth.s:242    .text:000000000000173c PAUSE_EXIT
ARM GAS  forth.s 			page 149


             forth.s:249    .text:0000000000001744 _ULED
             forth.s:249    .text:000000000000174c ULED
             forth.s:258    .text:0000000000001768 ULED_OFF
             forth.s:272    .text:000000000000176c $d
             forth.s:272    .text:0000000000001770 _NOP
             forth.s:272    .text:0000000000001774 $t
             forth.s:272    .text:0000000000001774 NOP
             forth.s:289    .text:0000000000001780 $d
             forth.s:289    .text:0000000000001784 _EXECU
             forth.s:289    .text:000000000000178c $t
             forth.s:289    .text:000000000000178c EXECU
             forth.s:309    .text:00000000000017a8 NEXT1
             forth.s:327    .text:00000000000017c4 QBRAN1
             forth.s:344    .text:00000000000017d0 $d
             forth.s:344    .text:00000000000017d4 _EXIT
             forth.s:344    .text:00000000000017dc EXIT
             forth.s:345    .text:00000000000017dc $d
             forth.s:351    .text:00000000000017e4 _STORE
             forth.s:351    .text:00000000000017e6 $t
             forth.s:361    .text:00000000000017f4 $d
             forth.s:361    .text:00000000000017f8 _AT
             forth.s:361    .text:00000000000017fa $t
             forth.s:369    .text:0000000000001800 $d
             forth.s:369    .text:0000000000001804 _CSTOR
             forth.s:379    .text:0000000000001814 $d
             forth.s:379    .text:0000000000001818 _CAT
             forth.s:387    .text:0000000000001820 $d
             forth.s:387    .text:0000000000001824 _RFROM
             forth.s:396    .text:0000000000001832 $d
             forth.s:396    .text:0000000000001836 _RAT
             forth.s:405    .text:0000000000001846 $d
             forth.s:405    .text:000000000000184a _TOR
             forth.s:414    .text:000000000000185a $d
             forth.s:414    .text:000000000000185e _RPSTOR
             forth.s:414    .text:0000000000001862 $t
             forth.s:414    .text:0000000000001864 RPSTOR
             forth.s:423    .text:000000000000186c $d
             forth.s:423    .text:0000000000001870 _SPSTOR
             forth.s:423    .text:0000000000001874 $t
             forth.s:423    .text:0000000000001874 SPSTOR
             forth.s:432    .text:000000000000187c $d
             forth.s:432    .text:0000000000001880 _SPAT
             forth.s:432    .text:0000000000001884 $t
             forth.s:432    .text:0000000000001884 SPAT
             forth.s:441    .text:000000000000188c $d
             forth.s:441    .text:0000000000001890 _DROP
             forth.s:449    .text:000000000000189e $d
             forth.s:449    .text:00000000000018a2 _DUPP
             forth.s:449    .text:00000000000018a6 $t
             forth.s:457    .text:00000000000018ae $d
             forth.s:457    .text:00000000000018b2 _SWAP
             forth.s:467    .text:00000000000018c0 $d
             forth.s:467    .text:00000000000018c4 _OVER
             forth.s:476    .text:00000000000018d4 $d
             forth.s:476    .text:00000000000018d8 _ZLESS
             forth.s:476    .text:00000000000018dc ZLESS
             forth.s:484    .text:00000000000018e2 $d
ARM GAS  forth.s 			page 150


             forth.s:484    .text:00000000000018e6 _ANDD
             forth.s:484    .text:00000000000018ea $t
             forth.s:493    .text:00000000000018f6 $d
             forth.s:493    .text:00000000000018fa _ORR
             forth.s:502    .text:000000000000190a $d
             forth.s:502    .text:000000000000190e _XORR
             forth.s:502    .text:0000000000001912 $t
             forth.s:511    .text:000000000000191e $d
             forth.s:511    .text:0000000000001922 _UPLUS
             forth.s:511    .text:0000000000001926 $t
             forth.s:511    .text:0000000000001928 UPLUS
             forth.s:523    .text:0000000000001938 $d
             forth.s:523    .text:000000000000193c _RSHIFT
             forth.s:532    .text:000000000000194e $d
             forth.s:532    .text:0000000000001952 _LSHIFT
             forth.s:541    .text:0000000000001966 $d
             forth.s:541    .text:000000000000196a _PLUS
             forth.s:541    .text:000000000000196c $t
             forth.s:550    .text:0000000000001974 $d
             forth.s:550    .text:0000000000001978 _SUBB
             forth.s:550    .text:000000000000197a $t
             forth.s:559    .text:0000000000001986 $d
             forth.s:559    .text:000000000000198a _STAR
             forth.s:559    .text:000000000000198c $t
             forth.s:568    .text:0000000000001996 $d
             forth.s:568    .text:000000000000199a _UMSTA
             forth.s:568    .text:000000000000199e $t
             forth.s:568    .text:00000000000019a0 UMSTA
             forth.s:579    .text:00000000000019ac $d
             forth.s:579    .text:00000000000019b0 _MSTAR
             forth.s:579    .text:00000000000019b4 MSTAR
             forth.s:590    .text:00000000000019c0 $d
             forth.s:590    .text:00000000000019c4 _ONEP
             forth.s:598    .text:00000000000019ce $d
             forth.s:598    .text:00000000000019d2 _ONEM
             forth.s:606    .text:00000000000019de $d
             forth.s:606    .text:00000000000019e2 _TWOP
             forth.s:606    .text:00000000000019e8 TWOP
             forth.s:614    .text:00000000000019ee $d
             forth.s:614    .text:00000000000019f2 _TWOM
             forth.s:614    .text:00000000000019f8 TWOM
             forth.s:622    .text:00000000000019fe $d
             forth.s:622    .text:0000000000001a02 _CELLP
             forth.s:622    .text:0000000000001a08 $t
             forth.s:622    .text:0000000000001a08 CELLP
             forth.s:630    .text:0000000000001a0e $d
             forth.s:630    .text:0000000000001a12 _CELLM
             forth.s:630    .text:0000000000001a18 $t
             forth.s:630    .text:0000000000001a18 CELLM
             forth.s:638    .text:0000000000001a1e $d
             forth.s:638    .text:0000000000001a22 _BLANK
             forth.s:638    .text:0000000000001a28 BLANK
             forth.s:647    .text:0000000000001a32 $d
             forth.s:647    .text:0000000000001a36 _CELLS
             forth.s:647    .text:0000000000001a3c $t
             forth.s:647    .text:0000000000001a3c CELLS
             forth.s:655    .text:0000000000001a42 $d
ARM GAS  forth.s 			page 151


             forth.s:655    .text:0000000000001a46 _CELLSL
             forth.s:655    .text:0000000000001a4c $t
             forth.s:655    .text:0000000000001a4c CELLSL
             forth.s:663    .text:0000000000001a52 $d
             forth.s:663    .text:0000000000001a56 _TWOST
             forth.s:663    .text:0000000000001a5c TWOST
             forth.s:671    .text:0000000000001a62 $d
             forth.s:671    .text:0000000000001a66 _TWOSL
             forth.s:679    .text:0000000000001a72 $d
             forth.s:679    .text:0000000000001a76 _QDUP
             forth.s:689    .text:0000000000001a86 $d
             forth.s:689    .text:0000000000001a8a _ROT
             forth.s:689    .text:0000000000001a8e $t
             forth.s:700    .text:0000000000001a9a $d
             forth.s:700    .text:0000000000001a9e _NROT
             forth.s:700    .text:0000000000001aa4 NROT
             forth.s:711    .text:0000000000001aae $d
             forth.s:711    .text:0000000000001ab2 _DDROP
             forth.s:711    .text:0000000000001ab8 $t
             forth.s:720    .text:0000000000001ac2 $d
             forth.s:720    .text:0000000000001ac6 _TDROP
             forth.s:720    .text:0000000000001acc $t
             forth.s:729    .text:0000000000001ad6 $d
             forth.s:729    .text:0000000000001ada _DDUP
             forth.s:739    .text:0000000000001aec $d
             forth.s:739    .text:0000000000001af0 _DPLUS
             forth.s:739    .text:0000000000001af4 DPLUS
             forth.s:752    .text:0000000000001b08 $d
             forth.s:752    .text:0000000000001b0c _INVER
             forth.s:752    .text:0000000000001b10 $t
             forth.s:752    .text:0000000000001b10 INVER
             forth.s:760    .text:0000000000001b16 $d
             forth.s:760    .text:0000000000001b1a _NEGAT
             forth.s:760    .text:0000000000001b24 NEGAT
             forth.s:768    .text:0000000000001b2a $d
             forth.s:768    .text:0000000000001b2e _ABSS
             forth.s:768    .text:0000000000001b32 $t
             forth.s:778    .text:0000000000001b3e $d
             forth.s:778    .text:0000000000001b42 _ZEQUAL
             forth.s:778    .text:0000000000001b48 ZEQUAL
             forth.s:789    .text:0000000000001b56 $d
             forth.s:789    .text:0000000000001b5a _EQUAL
             forth.s:789    .text:0000000000001b5c $t
             forth.s:801    .text:0000000000001b6c $d
             forth.s:801    .text:0000000000001b70 _ULESS
             forth.s:813    .text:0000000000001b84 $d
             forth.s:813    .text:0000000000001b88 _LESS
             forth.s:813    .text:0000000000001b8a $t
             forth.s:813    .text:0000000000001b8c LESS
             forth.s:825    .text:0000000000001b9c $d
             forth.s:825    .text:0000000000001ba0 _GREAT
             forth.s:825    .text:0000000000001ba2 $t
             forth.s:825    .text:0000000000001ba4 GREAT
             forth.s:837    .text:0000000000001bb4 $d
             forth.s:837    .text:0000000000001bb8 _MAX
             forth.s:837    .text:0000000000001bbc $t
             forth.s:837    .text:0000000000001bbc MAX
ARM GAS  forth.s 			page 152


             forth.s:848    .text:0000000000001bc8 $d
             forth.s:848    .text:0000000000001bcc _MIN
             forth.s:848    .text:0000000000001bd0 $t
             forth.s:848    .text:0000000000001bd0 MIN
             forth.s:859    .text:0000000000001bdc $d
             forth.s:859    .text:0000000000001be0 _PSTOR
             forth.s:859    .text:0000000000001be4 PSTOR
             forth.s:871    .text:0000000000001bf4 $d
             forth.s:871    .text:0000000000001bf8 _DSTOR
             forth.s:871    .text:0000000000001bfc DSTOR
             forth.s:883    .text:0000000000001c10 $d
             forth.s:883    .text:0000000000001c14 _DAT
             forth.s:883    .text:0000000000001c18 DAT
             forth.s:893    .text:0000000000001c22 $d
             forth.s:893    .text:0000000000001c26 _COUNT
             forth.s:893    .text:0000000000001c2c $t
             forth.s:903    .text:0000000000001c38 $d
             forth.s:903    .text:0000000000001c3c _DNEGA
             forth.s:903    .text:0000000000001c44 $t
             forth.s:903    .text:0000000000001c44 DNEGA
             forth.s:920    .text:0000000000001c54 DOVAR
             forth.s:931    .text:0000000000001c60 DOCON
             forth.s:944    .text:0000000000001c6a $d
             forth.s:944    .text:0000000000001c6e _SEED
             forth.s:953    .text:0000000000001c7e $d
             forth.s:953    .text:0000000000001c82 _MSEC
             forth.s:953    .text:0000000000001c88 MSEC
             forth.s:962    .text:0000000000001c92 $d
             forth.s:962    .text:0000000000001c96 _TIMER
             forth.s:962    .text:0000000000001c9c $t
             forth.s:971    .text:0000000000001ca6 $d
             forth.s:971    .text:0000000000001caa _TBOOT
             forth.s:971    .text:0000000000001cb0 $t
             forth.s:971    .text:0000000000001cb0 TBOOT
             forth.s:980    .text:0000000000001cba $d
             forth.s:980    .text:0000000000001cbe _BASE
             forth.s:990    .text:0000000000001cce TEMP
             forth.s:999    .text:0000000000001cd8 $d
             forth.s:999    .text:0000000000001cdc _SPAN
             forth.s:999    .text:0000000000001ce4 SPAN
             forth.s:1008   .text:0000000000001cee $d
             forth.s:1008   .text:0000000000001cf2 _INN
             forth.s:1008   .text:0000000000001cf6 $t
             forth.s:1008   .text:0000000000001cf8 INN
             forth.s:1018   .text:0000000000001d02 $d
             forth.s:1018   .text:0000000000001d06 _NTIB
             forth.s:1018   .text:0000000000001d0c NTIB
             forth.s:1027   .text:0000000000001d16 $d
             forth.s:1027   .text:0000000000001d1a _TEVAL
             forth.s:1027   .text:0000000000001d20 $t
             forth.s:1027   .text:0000000000001d20 TEVAL
             forth.s:1037   .text:0000000000001d2a $d
             forth.s:1037   .text:0000000000001d2e _HLD
             forth.s:1037   .text:0000000000001d32 $t
             forth.s:1037   .text:0000000000001d34 HLD
             forth.s:1047   .text:0000000000001d3e $d
             forth.s:1047   .text:0000000000001d42 _CNTXT
ARM GAS  forth.s 			page 153


             forth.s:1047   .text:0000000000001d4a $t
             forth.s:1047   .text:0000000000001d4c CNTXT
             forth.s:1048   .text:0000000000001d4c CRRNT
             forth.s:1058   .text:0000000000001d56 $d
             forth.s:1058   .text:0000000000001d5a _CPP
             forth.s:1058   .text:0000000000001d60 CPP
             forth.s:1068   .text:0000000000001d6a $d
             forth.s:1068   .text:0000000000001d6e _FCP
             forth.s:1068   .text:0000000000001d72 $t
             forth.s:1068   .text:0000000000001d74 FCP
             forth.s:1078   .text:0000000000001d7e $d
             forth.s:1078   .text:0000000000001d82 _LAST
             forth.s:1078   .text:0000000000001d88 LAST
             forth.s:1092   .text:0000000000001d92 $d
             forth.s:1092   .text:0000000000001d96 _USER_BEGIN
             forth.s:1092   .text:0000000000001da4 USER_BEGIN
             forth.s:1096   .text:0000000000001dac USR_BGN_ADR
             forth.s:1097   .text:0000000000001dac $d
             forth.s:1103   .text:0000000000001db4 _USER_END
             forth.s:1103   .text:0000000000001dc0 USER_END
             forth.s:1107   .text:0000000000001dc8 USER_END_ADR
             forth.s:1108   .text:0000000000001dc8 $d
             forth.s:1120   .text:0000000000001dd0 _WITHI
             forth.s:1120   .text:0000000000001dd8 WITHI
             forth.s:1122   .text:0000000000001ddc $d
             forth.s:1137   .text:0000000000001dfc _UMMOD
             forth.s:1137   .text:0000000000001e04 UMMOD
             forth.s:1141   .text:0000000000001e0e UMMOD0
             forth.s:1148   .text:0000000000001e1e UMMOD1
             forth.s:1154   .text:0000000000001e28 UMMOD2
             forth.s:1167   .text:0000000000001e34 $d
             forth.s:1167   .text:0000000000001e38 _MSMOD
             forth.s:1167   .text:0000000000001e3e $t
             forth.s:1167   .text:0000000000001e40 MSMOD
             forth.s:1169   .text:0000000000001e44 $d
             forth.s:1178   .text:0000000000001e6c MMOD1
             forth.s:1185   .text:0000000000001e88 MMOD2
             forth.s:1193   .text:0000000000001ea8 MMOD3
             forth.s:1201   .text:0000000000001eb0 _SLMOD
             forth.s:1203   .text:0000000000001ebc $d
             forth.s:1214   .text:0000000000001ed4 _MODD
             forth.s:1214   .text:0000000000001ed8 $t
             forth.s:1216   .text:0000000000001edc $d
             forth.s:1225   .text:0000000000001eec _SLASH
             forth.s:1225   .text:0000000000001eee $t
             forth.s:1225   .text:0000000000001ef0 SLASH
             forth.s:1227   .text:0000000000001ef4 $d
             forth.s:1238   .text:0000000000001f08 _SSMOD
             forth.s:1238   .text:0000000000001f0e $t
             forth.s:1238   .text:0000000000001f10 SSMOD
             forth.s:1240   .text:0000000000001f14 $d
             forth.s:1252   .text:0000000000001f2c _STASL
             forth.s:1252   .text:0000000000001f30 STASL
             forth.s:1254   .text:0000000000001f34 $d
             forth.s:1268   .text:0000000000001f48 _ALGND
             forth.s:1268   .text:0000000000001f50 $t
             forth.s:1268   .text:0000000000001f50 ALGND
ARM GAS  forth.s 			page 154


             forth.s:1279   .text:0000000000001f60 $d
             forth.s:1279   .text:0000000000001f64 _TCHAR
             forth.s:1279   .text:0000000000001f6a $t
             forth.s:1279   .text:0000000000001f6c TCHAR
             forth.s:1281   .text:0000000000001f70 $d
             forth.s:1291   .text:0000000000001fa8 TCHA1
             forth.s:1299   .text:0000000000001fb0 _DEPTH
             forth.s:1299   .text:0000000000001fb6 $t
             forth.s:1299   .text:0000000000001fb8 DEPTH
             forth.s:1311   .text:0000000000001fd0 $d
             forth.s:1311   .text:0000000000001fd4 _PICK
             forth.s:1311   .text:0000000000001fdc PICK
             forth.s:1313   .text:0000000000001fe0 $d
             forth.s:1329   .text:0000000000001ffc _HERE
             forth.s:1329   .text:0000000000002004 HERE
             forth.s:1331   .text:0000000000002008 $d
             forth.s:1340   .text:0000000000002018 _PAD
             forth.s:1340   .text:000000000000201c $t
             forth.s:1342   .text:0000000000002020 $d
             forth.s:1353   .text:0000000000002038 _TIB
             forth.s:1353   .text:000000000000203c $t
             forth.s:1353   .text:000000000000203c TIB
             forth.s:1363   .text:0000000000002046 $d
             forth.s:1363   .text:000000000000204a _ATEXE
             forth.s:1376   .text:0000000000002068 $d
             forth.s:1376   .text:000000000000206c _CMOVE
             forth.s:1376   .text:0000000000002072 $t
             forth.s:1376   .text:0000000000002074 CMOVE
             forth.s:1383   .text:0000000000002086 CMOV1
             forth.s:1380   .text:000000000000207e CMOV0
             forth.s:1388   .text:0000000000002090 CMOV2
             forth.s:1396   .text:0000000000002098 $d
             forth.s:1396   .text:000000000000209c _MOVE
             forth.s:1404   .text:00000000000020ba MOVE1
             forth.s:1401   .text:00000000000020b2 MOVE0
             forth.s:1409   .text:00000000000020c4 MOVE2
             forth.s:1418   .text:00000000000020cc $d
             forth.s:1418   .text:00000000000020d0 _FILL
             forth.s:1426   .text:00000000000020e6 FILL2
             forth.s:1422   .text:00000000000020de FILL1
             forth.s:1436   .text:00000000000020ee $d
             forth.s:1436   .text:00000000000020f2 _PACKS
             forth.s:1436   .text:00000000000020f8 $t
             forth.s:1436   .text:00000000000020f8 PACKS
             forth.s:1438   .text:00000000000020fc $d
             forth.s:1467   .text:0000000000002154 _DIGIT
             forth.s:1467   .text:000000000000215a $t
             forth.s:1467   .text:000000000000215c DIGIT
             forth.s:1469   .text:0000000000002160 $d
             forth.s:1484   .text:0000000000002194 _EXTRC
             forth.s:1484   .text:000000000000219c $t
             forth.s:1484   .text:000000000000219c EXTRC
             forth.s:1486   .text:00000000000021a0 $d
             forth.s:1498   .text:00000000000021c0 _BDIGS
             forth.s:1498   .text:00000000000021c4 BDIGS
             forth.s:1500   .text:00000000000021c8 $d
             forth.s:1510   .text:00000000000021dc _HOLD
ARM GAS  forth.s 			page 155


             forth.s:1512   .text:00000000000021e8 $d
             forth.s:1528   .text:000000000000220c _DIG
             forth.s:1528   .text:000000000000220e $t
             forth.s:1528   .text:0000000000002210 DIG
             forth.s:1530   .text:0000000000002214 $d
             forth.s:1542   .text:000000000000222c _DIGS
             forth.s:1542   .text:0000000000002230 DIGS
             forth.s:1544   .text:0000000000002234 DIGS1
             forth.s:1545   .text:0000000000002234 $d
             forth.s:1549   .text:000000000000224c DIGS2
             forth.s:1558   .text:0000000000002254 _SIGN
             forth.s:1558   .text:000000000000225c SIGN
             forth.s:1560   .text:0000000000002260 $d
             forth.s:1564   .text:0000000000002278 SIGN1
             forth.s:1572   .text:0000000000002280 _EDIGS
             forth.s:1572   .text:0000000000002284 EDIGS
             forth.s:1574   .text:0000000000002288 $d
             forth.s:1589   .text:00000000000022a4 STRR
             forth.s:1590   .text:00000000000022a4 $t
             forth.s:1591   .text:00000000000022a8 $d
             forth.s:1607   .text:00000000000022d0 _HEX
             forth.s:1607   .text:00000000000022d4 $t
             forth.s:1607   .text:00000000000022d4 HEX
             forth.s:1609   .text:00000000000022d8 $d
             forth.s:1619   .text:00000000000022f0 _DECIM
             forth.s:1619   .text:00000000000022f8 $t
             forth.s:1619   .text:00000000000022f8 DECIM
             forth.s:1621   .text:00000000000022fc $d
             forth.s:1636   .text:0000000000002314 _DIGTQ
             forth.s:1636   .text:000000000000231c DIGTQ
             forth.s:1638   .text:0000000000002320 $d
             forth.s:1651   .text:0000000000002368 DGTQ1
             forth.s:1662   .text:000000000000237c _NUMBQ
             forth.s:1662   .text:0000000000002384 $t
             forth.s:1662   .text:0000000000002384 NUMBQ
             forth.s:1664   .text:0000000000002388 $d
             forth.s:1680   .text:00000000000023d4 NUMQ1
             forth.s:1728   .text:000000000000249c NUMQ6
             forth.s:1696   .text:0000000000002418 NUMQ2
             forth.s:1720   .text:0000000000002480 NUMQ4
             forth.s:1717   .text:0000000000002474 NUMQ3
             forth.s:1726   .text:0000000000002498 NUMQ5
             forth.s:1746   .text:00000000000024b8 _SPACE
             forth.s:1746   .text:00000000000024be $t
             forth.s:1748   .text:00000000000024c4 $d
             forth.s:1757   .text:00000000000024d4 _SPACS
             forth.s:1757   .text:00000000000024dc SPACS
             forth.s:1759   .text:00000000000024e0 $d
             forth.s:1765   .text:00000000000024fc CHAR2
             forth.s:1763   .text:00000000000024f8 CHAR1
             forth.s:1774   .text:000000000000250c _TYPEE
             forth.s:1776   .text:0000000000002518 $d
             forth.s:1782   .text:0000000000002530 TYPE2
             forth.s:1778   .text:0000000000002524 TYPE1
             forth.s:1792   .text:0000000000002544 _CR
             forth.s:1792   .text:0000000000002548 CR
             forth.s:1794   .text:000000000000254c $d
ARM GAS  forth.s 			page 156


             forth.s:1806   .text:0000000000002568 DOSTR
             forth.s:1807   .text:0000000000002568 $t
             forth.s:1809   .text:000000000000256c $d
             forth.s:1827   .text:0000000000002594 STRQP
             forth.s:1828   .text:0000000000002594 $t
             forth.s:1829   .text:0000000000002598 $d
             forth.s:1838   .text:00000000000025a0 DOTST
             forth.s:1839   .text:00000000000025a0 $t
             forth.s:1840   .text:00000000000025a4 $d
             forth.s:1850   .text:00000000000025b0 DOTQP
             forth.s:1851   .text:00000000000025b0 $t
             forth.s:1852   .text:00000000000025b4 $d
             forth.s:1862   .text:00000000000025c4 _DOTR
             forth.s:1862   .text:00000000000025c8 DOTR
             forth.s:1864   .text:00000000000025cc $d
             forth.s:1879   .text:00000000000025f0 _UDOTR
             forth.s:1879   .text:00000000000025f4 $t
             forth.s:1879   .text:00000000000025f4 UDOTR
             forth.s:1881   .text:00000000000025f8 $d
             forth.s:1897   .text:0000000000002624 _UDOT
             forth.s:1897   .text:0000000000002628 UDOT
             forth.s:1899   .text:000000000000262c $d
             forth.s:1912   .text:0000000000002648 _DOT
             forth.s:1912   .text:000000000000264a $t
             forth.s:1914   .text:0000000000002650 $d
             forth.s:1921   .text:0000000000002674 DOT1
             forth.s:1932   .text:0000000000002688 _QUEST
             forth.s:1932   .text:000000000000268a $t
             forth.s:1932   .text:000000000000268c QUEST
             forth.s:1934   .text:0000000000002690 $d
             forth.s:1948   .text:000000000000269c PARS
             forth.s:1949   .text:000000000000269c $t
             forth.s:1950   .text:00000000000026a0 $d
             forth.s:2016   .text:00000000000027b0 PARS8
             forth.s:1980   .text:0000000000002724 PARS3
             forth.s:1963   .text:00000000000026dc PARS1
             forth.s:1978   .text:0000000000002720 PARS2
             forth.s:1984   .text:0000000000002730 PARS4
             forth.s:1996   .text:0000000000002760 PARS5
             forth.s:2003   .text:0000000000002784 PARS6
             forth.s:2009   .text:0000000000002798 PARS7
             forth.s:2027   .text:00000000000027c4 _PARSE
             forth.s:2027   .text:00000000000027ca $t
             forth.s:2027   .text:00000000000027cc PARSE
             forth.s:2029   .text:00000000000027d0 $d
             forth.s:2050   .text:0000000000002810 _DOTPR
             forth.s:2050   .text:0000000000002814 DOTPR
             forth.s:2052   .text:0000000000002818 $d
             forth.s:2063   .text:0000000000002830 _PAREN
             forth.s:2063   .text:0000000000002832 $t
             forth.s:2063   .text:0000000000002834 PAREN
             forth.s:2065   .text:0000000000002838 $d
             forth.s:2076   .text:0000000000002850 _BKSLA
             forth.s:2076   .text:0000000000002852 $t
             forth.s:2076   .text:0000000000002854 BKSLA
             forth.s:2078   .text:0000000000002858 $d
             forth.s:2089   .text:0000000000002870 _CHAR
ARM GAS  forth.s 			page 157


             forth.s:2089   .text:0000000000002878 CHAR
             forth.s:2091   .text:000000000000287c $d
             forth.s:2102   .text:0000000000002894 _WORDD
             forth.s:2102   .text:000000000000289c WORDD
             forth.s:2104   .text:00000000000028a0 $d
             forth.s:2116   .text:00000000000028b8 _TOKEN
             forth.s:2116   .text:00000000000028be $t
             forth.s:2116   .text:00000000000028c0 TOKEN
             forth.s:2118   .text:00000000000028c4 $d
             forth.s:2131   .text:00000000000028d4 _NAMET
             forth.s:2131   .text:00000000000028da $t
             forth.s:2131   .text:00000000000028dc NAMET
             forth.s:2133   .text:00000000000028e0 $d
             forth.s:2152   .text:0000000000002900 _SAMEQ
             forth.s:2152   .text:0000000000002906 $t
             forth.s:2152   .text:0000000000002908 SAMEQ
             forth.s:2154   .text:000000000000290c $d
             forth.s:2171   .text:0000000000002954 SAME2
             forth.s:2156   .text:0000000000002918 SAME1
             forth.s:2186   .text:0000000000002968 FIND
             forth.s:2187   .text:0000000000002968 $t
             forth.s:2188   .text:000000000000296c $d
             forth.s:2195   .text:0000000000002988 FIND1
             forth.s:2215   .text:00000000000029e0 FIND6
             forth.s:2208   .text:00000000000029c8 FIND2
             forth.s:2213   .text:00000000000029d8 FIND3
             forth.s:2222   .text:00000000000029f8 FIND4
             forth.s:2228   .text:0000000000002a14 FIND5
             forth.s:2244   .text:0000000000002a3c _NAMEQ
             forth.s:2244   .text:0000000000002a42 $t
             forth.s:2244   .text:0000000000002a44 NAMEQ
             forth.s:2246   .text:0000000000002a48 $d
             forth.s:2260   .text:0000000000002a58 BKSP
             forth.s:2261   .text:0000000000002a58 $t
             forth.s:2262   .text:0000000000002a5c $d
             forth.s:2276   .text:0000000000002aa0 BACK1
             forth.s:2285   .text:0000000000002aa4 TAP
             forth.s:2286   .text:0000000000002aa4 $t
             forth.s:2287   .text:0000000000002aa8 $d
             forth.s:2299   .text:0000000000002ac0 KTAP
             forth.s:2300   .text:0000000000002ac0 TTAP
             forth.s:2301   .text:0000000000002ac0 $t
             forth.s:2302   .text:0000000000002ac4 $d
             forth.s:2316   .text:0000000000002b04 KTAP2
             forth.s:2313   .text:0000000000002afc KTAP1
             forth.s:2328   .text:0000000000002b1c _ACCEP
             forth.s:2330   .text:0000000000002b28 $d
             forth.s:2333   .text:0000000000002b34 ACCP1
             forth.s:2349   .text:0000000000002b7c ACCP4
             forth.s:2345   .text:0000000000002b70 ACCP2
             forth.s:2347   .text:0000000000002b74 ACCP3
             forth.s:2360   .text:0000000000002b90 _QUERY
             forth.s:2360   .text:0000000000002b96 $t
             forth.s:2360   .text:0000000000002b98 QUERY
             forth.s:2362   .text:0000000000002b9c $d
             forth.s:2382   .text:0000000000002bd0 _ABORT
             forth.s:2382   .text:0000000000002bd6 $t
ARM GAS  forth.s 			page 158


             forth.s:2382   .text:0000000000002bd8 ABORT
             forth.s:2384   .text:0000000000002bdc ABORT1
             forth.s:2385   .text:0000000000002bdc $d
             forth.s:2516   .text:0000000000002d80 QUIT
             forth.s:2400   .text:0000000000002c04 ABORQ
             forth.s:2401   .text:0000000000002c04 $t
             forth.s:2402   .text:0000000000002c08 $d
             forth.s:2420   .text:0000000000002c2c _INTER
             forth.s:2422   .text:0000000000002c3c $d
             forth.s:2431   .text:0000000000002c78 INTE1
             forth.s:2428   .text:0000000000002c6e $t
             forth.s:2429   .text:0000000000002c70 $d
             forth.s:2435   .text:0000000000002c88 INTE2
             forth.s:2442   .text:0000000000002c90 _LBRAC
             forth.s:2442   .text:0000000000002c92 $t
             forth.s:2442   .text:0000000000002c94 LBRAC
             forth.s:2444   .text:0000000000002c98 $d
             forth.s:2454   .text:0000000000002cb0 _DOTOK
             forth.s:2454   .text:0000000000002cb4 $t
             forth.s:2454   .text:0000000000002cb4 DOTOK
             forth.s:2456   .text:0000000000002cb8 $d
             forth.s:2462   .text:0000000000002cdc DOTO1
             forth.s:2463   .text:0000000000002cdc $d
             forth.s:2471   .text:0000000000002ce8 _QSTAC
             forth.s:2471   .text:0000000000002cf0 QSTAC
             forth.s:2473   .text:0000000000002cf4 $d
             forth.s:2475   .text:0000000000002d0a $t
             forth.s:2476   .text:0000000000002d0c $d
             forth.s:2483   .text:0000000000002d14 _EVAL
             forth.s:2485   .text:0000000000002d20 EVAL1
             forth.s:2486   .text:0000000000002d20 $d
             forth.s:2494   .text:0000000000002d48 EVAL2
             forth.s:2504   .text:0000000000002d58 _PRESE
             forth.s:2506   .text:0000000000002d64 $d
             forth.s:2516   .text:0000000000002d78 _QUIT
             forth.s:2517   .text:0000000000002d80 $d
             forth.s:2519   .text:0000000000002d8c QUIT1
             forth.s:2521   .text:0000000000002d90 QUIT2
             forth.s:2531   .text:0000000000002da4 _FORGET
             forth.s:2531   .text:0000000000002dac FORGET
             forth.s:2533   .text:0000000000002db0 $d
             forth.s:2950   .text:0000000000003258 OVERT
             forth.s:2561   .text:0000000000002df8 $d
             forth.s:2561   .text:0000000000002dfc _TICK
             forth.s:2561   .text:0000000000002dfe $t
             forth.s:2561   .text:0000000000002e00 TICK
             forth.s:2563   .text:0000000000002e04 $d
             forth.s:2567   .text:0000000000002e18 TICK1
             forth.s:2575   .text:0000000000002e20 _ALLOT
             forth.s:2575   .text:0000000000002e26 $t
             forth.s:2575   .text:0000000000002e28 ALLOT
             forth.s:2577   .text:0000000000002e2c $d
             forth.s:2586   .text:0000000000002e3c _COMMA
             forth.s:2586   .text:0000000000002e3e $t
             forth.s:2586   .text:0000000000002e40 COMMA
             forth.s:2588   .text:0000000000002e44 $d
             forth.s:2602   .text:0000000000002e60 $d
ARM GAS  forth.s 			page 159


             forth.s:2602   .text:0000000000002e64 _BCOMP
             forth.s:2602   .text:0000000000002e6e $t
             forth.s:2602   .text:0000000000002e70 BCOMP
             forth.s:2604   .text:0000000000002e74 $d
             forth.s:2614   .text:0000000000002e84 _COMPI
             forth.s:2614   .text:0000000000002e8c $t
             forth.s:2614   .text:0000000000002e8c COMPI
             forth.s:2616   .text:0000000000002e90 $d
             forth.s:2632   .text:0000000000002ebc _LITER
             forth.s:2632   .text:0000000000002ec4 $t
             forth.s:2632   .text:0000000000002ec4 LITER
             forth.s:2634   .text:0000000000002ec8 $d
             forth.s:2989   .text:00000000000032b4 CALLC
             forth.s:2644   .text:0000000000002edc STRCQ
             forth.s:2645   .text:0000000000002edc $t
             forth.s:2646   .text:0000000000002ee0 $d
             forth.s:2668   .text:0000000000002f18 _FOR
             forth.s:2668   .text:0000000000002f1c $t
             forth.s:2668   .text:0000000000002f1c FOR
             forth.s:2670   .text:0000000000002f20 $d
             forth.s:2680   .text:0000000000002f38 _BEGIN
             forth.s:2680   .text:0000000000002f3e $t
             forth.s:2680   .text:0000000000002f40 BEGIN
             forth.s:2682   .text:0000000000002f44 $d
             forth.s:2691   .text:0000000000002f4c $d
             forth.s:2691   .text:0000000000002f50 _FNEXT
             forth.s:2691   .text:0000000000002f58 FNEXT
             forth.s:2693   .text:0000000000002f5c $d
             forth.s:2702   .text:0000000000002f74 _UNTIL
             forth.s:2702   .text:0000000000002f7a $t
             forth.s:2702   .text:0000000000002f7c UNTIL
             forth.s:2704   .text:0000000000002f80 $d
             forth.s:2713   .text:0000000000002f98 _AGAIN
             forth.s:2713   .text:0000000000002f9e $t
             forth.s:2713   .text:0000000000002fa0 AGAIN
             forth.s:2715   .text:0000000000002fa4 $d
             forth.s:2724   .text:0000000000002fbc _IFF
             forth.s:2724   .text:0000000000002fc0 IFF
             forth.s:2726   .text:0000000000002fc4 $d
             forth.s:2738   .text:0000000000002fec _AHEAD
             forth.s:2738   .text:0000000000002ff2 $t
             forth.s:2738   .text:0000000000002ff4 AHEAD
             forth.s:2740   .text:0000000000002ff8 $d
             forth.s:2752   .text:0000000000003020 _REPEA
             forth.s:2752   .text:0000000000003028 REPEA
             forth.s:2754   .text:000000000000302c $d
             forth.s:2765   .text:0000000000003044 _THENN
             forth.s:2765   .text:000000000000304c THENN
             forth.s:2767   .text:0000000000003050 $d
             forth.s:2778   .text:0000000000003064 _AFT
             forth.s:2778   .text:0000000000003068 $t
             forth.s:2778   .text:0000000000003068 AFT
             forth.s:2780   .text:000000000000306c $d
             forth.s:2792   .text:0000000000003084 _ELSEE
             forth.s:2792   .text:000000000000308c ELSEE
             forth.s:2794   .text:0000000000003090 $d
             forth.s:2804   .text:00000000000030a4 _WHILE
ARM GAS  forth.s 			page 160


             forth.s:2804   .text:00000000000030aa $t
             forth.s:2804   .text:00000000000030ac WHILE
             forth.s:2806   .text:00000000000030b0 $d
             forth.s:2815   .text:00000000000030c0 _ABRTQ
             forth.s:2815   .text:00000000000030c8 ABRTQ
             forth.s:2817   .text:00000000000030cc $d
             forth.s:2826   .text:00000000000030e4 _STRQ
             forth.s:2826   .text:00000000000030e8 STRQ
             forth.s:2828   .text:00000000000030ec $d
             forth.s:2838   .text:0000000000003104 _DOTQ
             forth.s:2838   .text:0000000000003108 DOTQ
             forth.s:2840   .text:000000000000310c $d
             forth.s:2854   .text:0000000000003124 _UNIQU
             forth.s:2854   .text:000000000000312c $t
             forth.s:2854   .text:000000000000312c UNIQU
             forth.s:2856   .text:0000000000003130 $d
             forth.s:2863   .text:0000000000003158 UNIQ1
             forth.s:2860   .text:000000000000314c $d
             forth.s:2873   .text:0000000000003160 SNAME
             forth.s:2874   .text:0000000000003160 $t
             forth.s:2875   .text:0000000000003164 $d
             forth.s:2891   .text:00000000000031a8 SNAM1
             forth.s:2903   .text:00000000000031bc _SCOMP
             forth.s:2903   .text:00000000000031c8 SCOMP
             forth.s:2905   .text:00000000000031cc $d
             forth.s:2917   .text:0000000000003204 SCOM2
             forth.s:2914   .text:00000000000031fc SCOM1
             forth.s:2922   .text:0000000000003218 SCOM3
             forth.s:2931   .text:0000000000003220 COLON_ABORT
             forth.s:2932   .text:0000000000003220 $t
             forth.s:2933   .text:0000000000003224 $d
             forth.s:2950   .text:0000000000003250 _OVERT
             forth.s:2950   .text:0000000000003256 $t
             forth.s:2952   .text:000000000000325c $d
             forth.s:2963   .text:0000000000003274 _SEMIS
             forth.s:2963   .text:0000000000003276 $t
             forth.s:2963   .text:0000000000003278 SEMIS
             forth.s:2965   .text:000000000000327c $d
             forth.s:2977   .text:0000000000003298 _RBRAC
             forth.s:2977   .text:000000000000329a $t
             forth.s:2977   .text:000000000000329c RBRAC
             forth.s:2979   .text:00000000000032a0 $d
             forth.s:2990   .text:00000000000032b4 $t
             forth.s:2991   .text:00000000000032b8 $d
             forth.s:3003   .text:00000000000032d0 _COLON
             forth.s:3003   .text:00000000000032d2 $t
             forth.s:3003   .text:00000000000032d4 COLON
             forth.s:3005   .text:00000000000032d8 $d
             forth.s:3016   .text:00000000000032f0 _IMMED
             forth.s:3016   .text:00000000000032fa $t
             forth.s:3016   .text:00000000000032fc IMMED
             forth.s:3018   .text:0000000000003300 $d
             forth.s:3036   .text:000000000000332c _CONST
             forth.s:3036   .text:0000000000003338 CONST
             forth.s:3038   .text:000000000000333c $d
             forth.s:3049   .text:000000000000336c $t
             forth.s:3056   .text:000000000000336c DODOES
ARM GAS  forth.s 			page 161


             forth.s:3058   .text:0000000000003370 $d
             forth.s:3073   .text:0000000000003394 $d
             forth.s:3073   .text:0000000000003398 _DOES
             forth.s:3073   .text:000000000000339e $t
             forth.s:3073   .text:00000000000033a0 DOES
             forth.s:3075   .text:00000000000033a4 $d
             forth.s:3090   .text:00000000000033d4 _DEFERAT
             forth.s:3090   .text:00000000000033dc DEFERAT
             forth.s:3092   .text:00000000000033e0 $d
             forth.s:3102   .text:00000000000033f8 _DEFERSTO
             forth.s:3102   .text:0000000000003400 DEFERSTO
             forth.s:3104   .text:0000000000003404 $d
             forth.s:3115   .text:0000000000003420 _DEFER
             forth.s:3115   .text:0000000000003426 $t
             forth.s:3115   .text:0000000000003428 DEFER
             forth.s:3117   .text:000000000000342c $d
             forth.s:3138   .text:0000000000003478 CREAT
             forth.s:3128   .text:0000000000003460 DEFER_NOP
             forth.s:3129   .text:0000000000003460 $t
             forth.s:3130   .text:0000000000003464 $d
             forth.s:3138   .text:0000000000003470 _CREAT
             forth.s:3140   .text:000000000000347c $d
             forth.s:3153   .text:00000000000034a0 _VARIA
             forth.s:3153   .text:00000000000034ac VARIA
             forth.s:3155   .text:00000000000034b0 $d
             forth.s:3172   .text:00000000000034d0 DMP
             forth.s:3173   .text:00000000000034d0 $t
             forth.s:3174   .text:00000000000034d4 $d
             forth.s:3186   .text:000000000000350c PDUM2
             forth.s:3180   .text:00000000000034f4 PDUM1
             forth.s:3198   .text:0000000000003518 $d
             forth.s:3198   .text:000000000000351c _DUMP
             forth.s:3198   .text:0000000000003524 DUMP
             forth.s:3200   .text:0000000000003528 $d
             forth.s:3218   .text:0000000000003578 DUMP4
             forth.s:3208   .text:0000000000003550 DUMP1
             forth.s:3220   .text:0000000000003580 DUMP3
             forth.s:3232   .text:0000000000003598 _DOTS
             forth.s:3232   .text:000000000000359c DOTS
             forth.s:3234   .text:00000000000035a0 $d
             forth.s:3242   .text:00000000000035c0 DOTS2
             forth.s:3238   .text:00000000000035b4 DOTS1
             forth.s:3252   .text:00000000000035d4 _TNAME
             forth.s:3252   .text:00000000000035da $t
             forth.s:3252   .text:00000000000035dc TNAME
             forth.s:3254   .text:00000000000035e0 $d
             forth.s:3257   .text:00000000000035ec TNAM1
             forth.s:3268   .text:0000000000003620 TNAM2
             forth.s:3277   .text:0000000000003630 _DOTID
             forth.s:3277   .text:0000000000003634 $t
             forth.s:3277   .text:0000000000003634 DOTID
             forth.s:3279   .text:0000000000003638 $d
             forth.s:3286   .text:000000000000365c DOTI1
             forth.s:3287   .text:000000000000366a $t
             forth.s:3288   .text:000000000000366c $d
             forth.s:3290   *ABS*:0000000000000000 WANT_SEE
             forth.s:3363   .text:0000000000003674 _WORDS
ARM GAS  forth.s 			page 162


             forth.s:3363   .text:000000000000367a $t
             forth.s:3363   .text:000000000000367c WORDS
             forth.s:3365   .text:0000000000003680 $d
             forth.s:3368   .text:000000000000368c WORS1
             forth.s:3377   .text:00000000000036b4 WORS2
             forth.s:3390   .text:00000000000036b8 VERSN
             forth.s:3391   .text:00000000000036b8 $t
             forth.s:3392   .text:00000000000036bc $d
             forth.s:3400   .text:00000000000036cc _HI
             forth.s:3402   .text:00000000000036d4 $d
             forth.s:3403   .text:00000000000036ee $t
             forth.s:3404   .text:00000000000036f0 $d
             forth.s:3436   .text:0000000000003754 COLD1
             forth.s:3437   .text:0000000000003754 $d
             forth.s:3449   .text:0000000000003798 COLD2
             forth.s:3452   .text:0000000000003798 $d
             forth.s:3455   .text:000000000000379c $d
          ser-term.s:90     .text:0000000000000521 $d
          ser-term.s:90     .text:0000000000000522 $t
          ser-term.s:110    .text:000000000000055d $d
          ser-term.s:110    .text:000000000000055e $t
          ser-term.s:133    .text:000000000000059b $d
          ser-term.s:133    .text:000000000000059c $t
          ser-term.s:163    .text:00000000000005df $d
          ser-term.s:163    .text:00000000000005e0 $t
          ser-term.s:190    .text:0000000000000655 $d
          ser-term.s:190    .text:0000000000000656 $t
          ser-term.s:202    .text:0000000000000683 $d
          ser-term.s:202    .text:0000000000000684 $t
             tvout.s:250    .text:00000000000008c9 $d
             tvout.s:250    .text:00000000000008ca $t
             tvout.s:264    .text:00000000000008ff $d
             tvout.s:264    .text:0000000000000900 $t
             tvout.s:292    .text:0000000000000959 $d
             tvout.s:292    .text:000000000000095a $t
             tvout.s:311    .text:0000000000000987 $d
             tvout.s:311    .text:0000000000000988 $t
             tvout.s:411    .text:0000000000000ac1 $d
             tvout.s:411    .text:0000000000000ac2 $t
             tvout.s:645    .text:0000000000000e01 $d
             tvout.s:645    .text:0000000000000e02 $t
           ps2_kbd.s:307    .text:0000000000001243 $d
           ps2_kbd.s:307    .text:0000000000001244 $t
           ps2_kbd.s:382    .text:00000000000012fd $d
           ps2_kbd.s:382    .text:00000000000012fe $t
           ps2_kbd.s:585    .text:0000000000001567 $d
           ps2_kbd.s:585    .text:0000000000001568 $t
           ps2_kbd.s:603    .text:00000000000015a7 $d
           ps2_kbd.s:603    .text:00000000000015a8 $t
             forth.s:142    .text:0000000000001643 $d
             forth.s:142    .text:0000000000001644 $t
             forth.s:165    .text:000000000000167d $d
             forth.s:165    .text:000000000000167e $t
             forth.s:202    .text:000000000000169b $d
             forth.s:202    .text:000000000000169c $t
             forth.s:249    .text:0000000000001749 $d
             forth.s:249    .text:000000000000174a $t
ARM GAS  forth.s 			page 163


             forth.s:344    .text:00000000000017d9 $d
             forth.s:344    .text:00000000000017da $t
             forth.s:369    .text:0000000000001807 $d
             forth.s:369    .text:0000000000001808 $t
             forth.s:379    .text:000000000000181b $d
             forth.s:379    .text:000000000000181c $t
             forth.s:387    .text:0000000000001827 $d
             forth.s:387    .text:0000000000001828 $t
             forth.s:396    .text:0000000000001839 $d
             forth.s:396    .text:000000000000183a $t
             forth.s:405    .text:000000000000184d $d
             forth.s:405    .text:000000000000184e $t
             forth.s:441    .text:0000000000001895 $d
             forth.s:441    .text:0000000000001896 $t
             forth.s:457    .text:00000000000018b7 $d
             forth.s:457    .text:00000000000018b8 $t
             forth.s:467    .text:00000000000018c9 $d
             forth.s:467    .text:00000000000018ca $t
             forth.s:476    .text:00000000000018db $d
             forth.s:476    .text:00000000000018dc $t
             forth.s:493    .text:00000000000018fd $d
             forth.s:493    .text:00000000000018fe $t
             forth.s:523    .text:0000000000001943 $d
             forth.s:523    .text:0000000000001944 $t
             forth.s:532    .text:0000000000001959 $d
             forth.s:532    .text:000000000000195a $t
             forth.s:579    .text:00000000000019b3 $d
             forth.s:579    .text:00000000000019b4 $t
             forth.s:590    .text:00000000000019c7 $d
             forth.s:590    .text:00000000000019c8 $t
             forth.s:598    .text:00000000000019d5 $d
             forth.s:598    .text:00000000000019d6 $t
             forth.s:606    .text:00000000000019e5 $d
             forth.s:606    .text:00000000000019e6 $t
             forth.s:614    .text:00000000000019f5 $d
             forth.s:614    .text:00000000000019f6 $t
             forth.s:638    .text:0000000000001a25 $d
             forth.s:638    .text:0000000000001a26 $t
             forth.s:663    .text:0000000000001a59 $d
             forth.s:663    .text:0000000000001a5a $t
             forth.s:671    .text:0000000000001a69 $d
             forth.s:671    .text:0000000000001a6a $t
             forth.s:679    .text:0000000000001a7b $d
             forth.s:679    .text:0000000000001a7c $t
             forth.s:700    .text:0000000000001aa3 $d
             forth.s:700    .text:0000000000001aa4 $t
             forth.s:729    .text:0000000000001adf $d
             forth.s:729    .text:0000000000001ae0 $t
             forth.s:739    .text:0000000000001af3 $d
             forth.s:739    .text:0000000000001af4 $t
             forth.s:760    .text:0000000000001b21 $d
             forth.s:760    .text:0000000000001b22 $t
             forth.s:778    .text:0000000000001b45 $d
             forth.s:778    .text:0000000000001b46 $t
             forth.s:801    .text:0000000000001b73 $d
             forth.s:801    .text:0000000000001b74 $t
             forth.s:859    .text:0000000000001be3 $d
ARM GAS  forth.s 			page 164


             forth.s:859    .text:0000000000001be4 $t
             forth.s:871    .text:0000000000001bfb $d
             forth.s:871    .text:0000000000001bfc $t
             forth.s:883    .text:0000000000001c17 $d
             forth.s:883    .text:0000000000001c18 $t
             forth.s:944    .text:0000000000001c73 $d
             forth.s:944    .text:0000000000001c74 $t
             forth.s:953    .text:0000000000001c87 $d
             forth.s:953    .text:0000000000001c88 $t
             forth.s:980    .text:0000000000001cc3 $d
             forth.s:980    .text:0000000000001cc4 $t
             forth.s:999    .text:0000000000001ce1 $d
             forth.s:999    .text:0000000000001ce2 $t
             forth.s:1018   .text:0000000000001d0b $d
             forth.s:1018   .text:0000000000001d0c $t
             forth.s:1058   .text:0000000000001d5d $d
             forth.s:1058   .text:0000000000001d5e $t
             forth.s:1078   .text:0000000000001d87 $d
             forth.s:1078   .text:0000000000001d88 $t
             forth.s:1092   .text:0000000000001da1 $d
             forth.s:1092   .text:0000000000001da2 $t
             forth.s:1103   .text:0000000000001dbd $d
             forth.s:1103   .text:0000000000001dbe $t
             forth.s:1120   .text:0000000000001dd7 $d
             forth.s:1120   .text:0000000000001dd8 $t
             forth.s:1137   .text:0000000000001e03 $d
             forth.s:1137   .text:0000000000001e04 $t
             forth.s:1201   .text:0000000000001eb5 $d
             forth.s:1201   .text:0000000000001eb6 $t
             forth.s:1252   .text:0000000000001f2f $d
             forth.s:1252   .text:0000000000001f30 $t
             forth.s:1311   .text:0000000000001fd9 $d
             forth.s:1311   .text:0000000000001fda $t
             forth.s:1329   .text:0000000000002001 $d
             forth.s:1329   .text:0000000000002002 $t
             forth.s:1363   .text:0000000000002053 $d
             forth.s:1363   .text:0000000000002054 $t
             forth.s:1396   .text:00000000000020a1 $d
             forth.s:1396   .text:00000000000020a2 $t
             forth.s:1418   .text:00000000000020d5 $d
             forth.s:1418   .text:00000000000020d6 $t
             forth.s:1498   .text:00000000000021c3 $d
             forth.s:1498   .text:00000000000021c4 $t
             forth.s:1510   .text:00000000000021e1 $d
             forth.s:1510   .text:00000000000021e2 $t
             forth.s:1542   .text:000000000000222f $d
             forth.s:1542   .text:0000000000002230 $t
             forth.s:1558   .text:0000000000002259 $d
             forth.s:1558   .text:000000000000225a $t
             forth.s:1572   .text:0000000000002283 $d
             forth.s:1572   .text:0000000000002284 $t
             forth.s:1636   .text:000000000000231b $d
             forth.s:1636   .text:000000000000231c $t
             forth.s:1757   .text:00000000000024db $d
             forth.s:1757   .text:00000000000024dc $t
             forth.s:1774   .text:0000000000002511 $d
             forth.s:1774   .text:0000000000002512 $t
ARM GAS  forth.s 			page 165


             forth.s:1792   .text:0000000000002547 $d
             forth.s:1792   .text:0000000000002548 $t
             forth.s:1862   .text:00000000000025c7 $d
             forth.s:1862   .text:00000000000025c8 $t
             forth.s:1897   .text:0000000000002627 $d
             forth.s:1897   .text:0000000000002628 $t
             forth.s:2050   .text:0000000000002813 $d
             forth.s:2050   .text:0000000000002814 $t
             forth.s:2089   .text:0000000000002875 $d
             forth.s:2089   .text:0000000000002876 $t
             forth.s:2102   .text:0000000000002899 $d
             forth.s:2102   .text:000000000000289a $t
             forth.s:2328   .text:0000000000002b23 $d
             forth.s:2328   .text:0000000000002b24 $t
             forth.s:2420   .text:0000000000002c37 $d
             forth.s:2420   .text:0000000000002c38 $t
             forth.s:2471   .text:0000000000002cef $d
             forth.s:2471   .text:0000000000002cf0 $t
             forth.s:2483   .text:0000000000002d19 $d
             forth.s:2483   .text:0000000000002d1a $t
             forth.s:2504   .text:0000000000002d5f $d
             forth.s:2504   .text:0000000000002d60 $t
             forth.s:2516   .text:0000000000002d7d $d
             forth.s:2516   .text:0000000000002d7e $t
             forth.s:2531   .text:0000000000002dab $d
             forth.s:2531   .text:0000000000002dac $t
             forth.s:2691   .text:0000000000002f55 $d
             forth.s:2691   .text:0000000000002f56 $t
             forth.s:2724   .text:0000000000002fbf $d
             forth.s:2724   .text:0000000000002fc0 $t
             forth.s:2752   .text:0000000000003027 $d
             forth.s:2752   .text:0000000000003028 $t
             forth.s:2765   .text:0000000000003049 $d
             forth.s:2765   .text:000000000000304a $t
             forth.s:2792   .text:0000000000003089 $d
             forth.s:2792   .text:000000000000308a $t
             forth.s:2815   .text:00000000000030c7 $d
             forth.s:2815   .text:00000000000030c8 $t
             forth.s:2826   .text:00000000000030e7 $d
             forth.s:2826   .text:00000000000030e8 $t
             forth.s:2838   .text:0000000000003107 $d
             forth.s:2838   .text:0000000000003108 $t
             forth.s:2903   .text:00000000000031c5 $d
             forth.s:2903   .text:00000000000031c6 $t
             forth.s:3036   .text:0000000000003335 $d
             forth.s:3036   .text:0000000000003336 $t
             forth.s:3090   .text:00000000000033db $d
             forth.s:3090   .text:00000000000033dc $t
             forth.s:3102   .text:00000000000033ff $d
             forth.s:3102   .text:0000000000003400 $t
             forth.s:3138   .text:0000000000003477 $d
             forth.s:3138   .text:0000000000003478 $t
             forth.s:3153   .text:00000000000034a9 $d
             forth.s:3153   .text:00000000000034aa $t
             forth.s:3198   .text:0000000000003521 $d
             forth.s:3198   .text:0000000000003522 $t
             forth.s:3232   .text:000000000000359b $d
ARM GAS  forth.s 			page 166


             forth.s:3232   .text:000000000000359c $t
             forth.s:3400   .text:00000000000036cf $d
             forth.s:3400   .text:00000000000036d0 $t
             forth.s:3430   .text:000000000000373d $d
             forth.s:3430   .text:000000000000373e $t

UNDEFINED SYMBOLS
_mstack
