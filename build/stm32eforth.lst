ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	   
 179              	   /* NVIC block */
 180              	   .equ NVIC_BASE_ADR, 0xE000E000
 181              	   .equ NVIC_ISER0, 0x100
 182              	   .equ NVIC_ISER1, 0x104
 183              	   .equ NVIC_ISER2, 0x108
 184              	   .equ NVIC_ISER3, 0x10c
 185              	   .equ NVIC_ISER4, 0x110
 186              	   .equ NVIC_ISER5, 0x114
 187              	   .equ NVIC_ISER6, 0x118
 188              	   .equ NVIC_ISER7, 0x11c
 189              	   .equ NVIC_ICER0, 0x180
 190              	   .equ NVIC_ICER1, 0x184 
 191              	   .equ NVIC_ICER2, 0x188 
 192              	   .equ NVIC_ICER3, 0x18C 
 193              	   .equ NVIC_ICER4, 0x190 
 194              	   .equ NVIC_ICER5, 0x194 
 195              	   .equ NVIC_ICER6, 0x198 
 196              	   .equ NVIC_ICER7, 0x19C 
 197              	   .equ NVIC_ISPR0, 0x200
 198              	   .equ NVIC_ISPR1, 0x204
 199              	   .equ NVIC_ISPR2, 0x208 
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ISPR3, 0x20c 
 201              	   .equ NVIC_ISPR4, 0x210 
 202              	   .equ NVIC_ISPR5, 0x214 
 203              	   .equ NVIC_ISPR6, 0x218 
 204              	   .equ NVIC_ISPR7, 0x21c 
 205              	   .equ NVIC_ICPR0, 0x280
 206              	   .equ NVIC_ICPR1, 0x284
 207              	   .equ NVIC_ICPR2, 0x288
 208              	   .equ NVIC_ICPR3, 0x28c
 209              	   .equ NVIC_ICPR4, 0x290
 210              	   .equ NVIC_ICPR5, 0x294
 211              	   .equ NVIC_ICPR6, 0x298
 212              	   .equ NVIC_ICPR7, 0x29c
 213              	   .equ NVIC_IABR0, 0x300
 214              	   .equ NVIC_IABR1, 0x304
 215              	   .equ NVIC_IABR2, 0x308
 216              	   .equ NVIC_IABR3, 0x30c
 217              	   .equ NVIC_IABR4, 0x310
 218              	   .equ NVIC_IABR5, 0x314
 219              	   .equ NVIC_IABR6, 0x318
 220              	   .equ NVIC_IABR7, 0x31c
 221              	/*  NVIC_IPR0 - NVIC_IPR59 */
 222              	   .equ NVIC_IPR_BASE, 0xE000E400 
 223              	
 224              	/*  IRQ number */
 225              	   .equ NMI_IRQ, (-14) // non maskable
 226              	   .equ HF_IRQ, (-13)  // hard fault
 227              	   .equ MM_IRQ, (-12)  // memory Management
 228              	   .equ BF_IRQ, (-11)  // bus fault 
 229              	   .equ UF_IRQ, (-10)  // usage fault 
 230              	   .equ SVC_IRQ, (-5)  // service call 
 231              	   .equ DM_IRQ, (-4)  // debug monitor
 232              	   .equ PSV_IRQ, (-2) // pending service 
 233              	   .equ STCK_IRQ, (-1) // systick 
 234              	   .equ WWDG_IRQ, (0) // window watchdog 
 235              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 236              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 237              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 238              	   .equ FLASH_IRQ, (4) // flash global 
 239              	   .equ RCC_IRQ, (5)  // real time clock 
 240              	   .equ EXTI0_IRQ, (6) // 
 241              	   .equ EXTI1_IRQ, (7)
 242              	   .equ EXTI2_IRQ, (8)
 243              	   .equ EXTI3_IRQ, (9)
 244              	   .equ EXTI4_IRQ, (10)
 245              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 246              	   .equ DMA1S1_IRQ, (12)
 247              	   .equ DMA1S2_IRQ, (13)
 248              	   .equ DMA1S3_IRQ, (14)
 249              	   .equ DMA1S4_IRQ, (15)
 250              	   .equ DMA1S5_IRQ, (16)
 251              	   .equ DMA1S6_IRQ, (17)
 252              	   .equ ADC_IRQ, (18)
 253              	   .equ EXTI9_5_IRQ, (23)
 254              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 255              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 256              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
ARM GAS  forth.s 			page 6


 257              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 258              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 259              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 260              	   .equ TIM4_IRQ, (30) // TIMER4 global
 261              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 262              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 263              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 264              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 265              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 266              	   .equ SPI2_IRQ, (36)  // SPI2 global
 267              	   .equ USART1_IRQ, (37) // USART1 global
 268              	   .equ USART2_IRQ, (38) // USART2 global
 269              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 270              	   .equ EXTI17_IRQ, (41)
 271              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 272              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 273              	   .equ SDIO_IRQ, (49) // SDIO global
 274              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 275              	   .equ SPI3_IRQ, (51)
 276              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 277              	   .equ DMA2S1_IRQ, (57) 
 278              	   .equ DMAS2_IRQ, (58)
 279              	   .equ DMAS3_IRQ, (59)
 280              	   .equ DMAS4_IRQ, (60)
 281              	   .equ OTG_FS_IRQ, (67)
 282              	   .equ DMA2S5_IRQ, (68)
 283              	   .equ DMA2S6_IRQ, (69)
 284              	   .equ DMA2S7_IRQ, (70)
 285              	   .equ USART6_IRQ, (71)
 286              	   .equ I2C3EV_IRQ, (72)
 287              	   .equ I2C3ER_IRQ, (73)
 288              	   .equ FPU_IRQ, (81) // FPU global
 289              	   .equ SPI4_IRQ, (84)
 290              	   .equ SPI5_IRQ, (85)
 291              	   
 292              	
 293              	/* TIMERS registers */
 294              	.equ TIM1_BASE_ADR,0x40010000
 295              	.equ TIM9_BASE_ADR,0x40010400
 296              	.equ TIM10_BASE_ADR,0x40010800
 297              	.equ TIM11_BASE_ADR,0x40010C00
 298              	
 299              	.equ TIM2_BASE_ADR,0x40000000
 300              	.equ TIM3_BASE_ADR,0x40000400
 301              	.equ TIM4_BASE_ADR,0x40000800
 302              	.equ TIM5_BASE_ADR,0x40000C00
 303              	
 304              	/* TIMER1 */
 305              	.equ TIM1_RCR,48 
 306              	.equ TIM1_BDTR,68 
 307              	
 308              	/* TIMER2..TIMER5 */
 309              	.equ TIM_CR1,0
 310              	.equ TIM_CR2,4
 311              	.equ TIM_SMCR,8
 312              	.equ TIM_DIER,12
 313              	.equ TIM_SR,16
ARM GAS  forth.s 			page 7


 314              	.equ TIM_EGR,20
 315              	.equ TIM_CCMR1,24
 316              	.equ TIM_CCMR2,28
 317              	.equ TIM_CCER,32
 318              	.equ TIM_CNT,36
 319              	.equ TIM_PSC,40
 320              	.equ TIM_ARR,44
 321              	.equ TIM_CCR1,52
 322              	.equ TIM_CCR2,56
 323              	.equ TIM_CCR3,60
 324              	.equ TIM_CCR4,64
 325              	.equ TIM_DCR,72
 326              	.equ TIM_DMAR,76
 327              	.equ TIM2_OR,80
 328              	.equ TIM5_OR,80 
 329              	
 330              	/* SYSCFG registers */
 331              	.equ SYSCFG_BASE_ADR, 0x40013800
 332              	
 333              	.equ SYSCFG_MEMRMP,0
 334              	.equ SYSCFG_PMC,4
 335              	.equ SYSCFG_EXTICR1,8
 336              	.equ SYSCFG_EXTICR2,12
 337              	.equ SYSCFG_EXTICR3,16
 338              	.equ SYSCFG_EXTICR4,20
 339              	.equ SYSCFG_CMPCR,32
 340              	
 341              	/* EXTI registers */
 342              	.equ EXTI_BASE_ADR, 0x40013C00
 343              	
 344              	.equ EXTI_IMR,0
 345              	.equ EXTI_EMR,4
 346              	.equ EXTI_RTSR,8
 347              	.equ EXTI_FTSR,12
 348              	.equ EXTI_SWIER,16
 349              	.equ EXTI_PR,20
 350              	
 351              	/* SPI registers */
 352              	SPI1_BASE_ADR = 0x40013000 
 353              	SPI2_BASE_ADR = 0x40003800
 354              	SPI3_BASE_ADR = 0x40003C00
 355              	SPI4_BASE_ADR = 0x40013400
 356              	
 357              	SPI_CR1 = 0
 358              	SPI_CR2 = 4
 359              	SPI_SR = 8
 360              	SPI_DR = 12 
 361              	SPI_CRCPR = 16 
 362              	SPI_RXCRCR = 20 
 363              	SPI_TXCRCR = 24
 364              	SPI_I2SCFGR = 28  
 365              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
ARM GAS  forth.s 			page 8


   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
ARM GAS  forth.s 			page 9


  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	
 109              	/***********************************************
 110              	* MACROS
 111              	*	Assemble inline direct threaded code ending.
 112              	***********************************************/
 113              		.macro _CALL fn /* low level routine call */ 
 114              	 	PUSH {LR}
 115              		BL \fn  
 116              		POP {LR}
 117              		.endm
 118              		
ARM GAS  forth.s 			page 10


 119              		.macro _RET /* exit sub-routine */ 
 120              		BX LR 
 121              		.endm 
 122              	
 123              		/* dictionary header  */
 124              		.macro _HEADER  label, nlen, name
 125              			.word LINK 
 126              			.equ LINK , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		\label:   // code field 
 131              		.endm 
 132              		
 133              	
 134              	// local function header 
 135              		.macro _FUNC label 
 136              		.section .text, "ax", %progbits 
 137              		.p2align 2 
 138              		.type \label, %function  
 139              		\label:
 140              		.endm 
 141              	
 142              	// global function header 
 143              		.macro _GBL_FUNC label 
 144              		.global \label 
 145              		_FUNC \label 
 146              		.endm 
 147              	
 148              	
 149              	// load large constant to register 
 150              		.macro _MOV32 r, value 
 151              		mov \r,#(\value&0xffff)
 152              		movt \r,#(\value>>16)
 153              		.endm 
 154              	
 155              		.macro _NEXT /* direct jump INEXT */ 
 156              		B INEXT   
 157              		.endm 
 158              	
 159              	 	.macro	_NEST /*start high level word */
 160              		BX INX  
 161              		NOP.N 
 162              		.endm
 163              	
 164              		.macro _ADR label 
 165              		.word 1+\label  
 166              		.endm 
 167              	
 168              	 	.macro	_UNNEST	/*end high level word */
 169              		_ADR UNNEST 
 170              		.endm
 171              	
 172              	 	.macro	_DOLIT u /*long literals */
 173              		_ADR	DOLIT
 174              		.word	\u 
 175              		.endm
ARM GAS  forth.s 			page 11


 176              	
 177              		.macro _DOTQP len, text 
 178              		_ADR DOTQP 
 179              		.byte \len 
 180              		.ascii "\text" 
 181              		.p2align 2 
 182              		.endm
 183              	
 184              		.macro _COMPI name 
 185              		_DOLIT \name 
 186              		_ADR CALLC 
 187              		.endm 
 188              	
 189              		.macro _ABORQ len,name 
 190              		_ADR ABORQ 
 191              		.byte \len 
 192              		.ascii "\name"
 193              		.p2align 2 
 194              		.endm
 195              	
 196              		.macro _BRAN label 
 197              		_ADR BRAN 
 198              		.word \label 
 199              		.endm 
 200              	
 201              		.macro _QBRAN label 
 202              		_ADR QBRAN 
 203              		.word \label
 204              		.endm 
 205              	
 206              		.macro _DONXT label 
 207              		_ADR DONXT
 208              		.word \label 
 209              		.endm 
 210              	
 211              	 	.macro	_PUSH	/*push TOS on data stack*/
 212              		STR	TOS,[DSP,#-4]!
 213              		.endm
 214              	
 215              	 	.macro	_POP /*pop data stack to TOS */
 216              		LDR	TOS,[DSP],#4
 217              		.endm
 218              	
 219              		// calling a colon word 
 220              		// from a code word   
 221              		.macro _CALL_COLWORD target 
 222              	    ldr WP,=\target 
 223              		orr WP,#1
 224              		b \target  
 225              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
ARM GAS  forth.s 			page 12


  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
ARM GAS  forth.s 			page 13


  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
ARM GAS  forth.s 			page 14


 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF890C4 	  ldr IP,=dh
 159 000e 01F003BD 	  b INEXT  
 160              	dh:
 161 0012 95310000 	  _ADR PRESE    
 162 0016 971B0000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e 4D200000 	  _ADR COUNT 
 164 0022 49290000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a C91C0000 	  _ADR DUPP
 167 002e 711C0000 	  _ADR TOR 
 168 0032 971B0000 	  _DOLIT 16 
 168      10000000 
 169 003a E5200000 	  _ADR BASE 
 170 003e 091C0000 	  _ADR STORE 
 171 0042 812A0000 	  _ADR DOT 
 172 0046 491C0000 	  _ADR RFROM
 173 004a 971B0000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 0D1D0000 	  _ADR ANDD
 175 0056 D71B0000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 971B0000 	  _DOLIT ','
 177      2C000000 
 178 006a A11A0000 	  _ADR EMIT 
 179 006e F5280000 	  _ADR SPACE 
 180 0072 812A0000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 01F0C6BC 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
ARM GAS  forth.s 			page 15


 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 01F0BDBC 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8C0C3 	  ldr IP,=ur
 232 00e2 01F099BC 	  b INEXT  
 233              	ur:
 234 00e6 95310000 	  _ADR PRESE
 235 00ea 7D290000 	  _ADR CR   
 236 00ee 971B0000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 4D200000 		_ADR COUNT 
 238 00fa 49290000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
ARM GAS  forth.s 			page 16


 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0C4F9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0B7FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 03F051BD 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF820A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
ARM GAS  forth.s 			page 17


 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
ARM GAS  forth.s 			page 18


 346              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 347 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 348 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 349 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 350 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 351              	/* configure GPIOC:13 as output for user LED */
 352 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 352      C4F20200 
 353 0206 4FF00D01 	  mov r1,#LED_PIN
 354 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 355 020e 00B500F0 	  _CALL gpio_config 
 355      8FF85DF8 
 355      04EB
 356 0218 4FF00102 	  mov r2,#1
 357 021c 00B500F0 	  _CALL gpio_out 
 357      DEF85DF8 
 357      04EB
 358              	/* enable compensation CELL for fast I/O */
 359 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 359      C4F20101 
 360 022e 4FF00100 		mov r0,#1 
 361 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 362              	/* wait for ready bit */ 
 363 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 364 0236 10F4807F 	    tst r0,#(1<<8)
 365 023a FBD0     		beq 1b 	
 366              	
 367              	
 368              	/* configure systicks for 1msec ticks */
 369              	// set priority to 15 (lowest)
 370 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 371 0240 4FF00F01 	  mov r1,#15 
 372 0244 00B500F0 	  _CALL nvic_set_priority
 372      2FF85DF8 
 372      04EB
 373 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 373      CEF20000 
 374 0256 47F2FF61 	  _MOV32 r1,95999 
 374      C0F20101 
 375 025e 4160     	  str r1,[r0,#STK_LOAD]
 376 0260 4FF00701 	  mov r1,#7
 377 0264 0160     	  str r1,[r0,STK_CTL]
 378 0266 7047     	  _RET  
 379              	
 380              	
 381              	/* copy system variables to RAM */ 
 382              		.type remap, %function 
 383              	    .global remap 
 384              	remap:
 385              	// copy system to RAM 	
 386 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 386      C2F20000 
 387 0270 8D49     		ldr r1,=UZERO 
 388 0272 4FF0A802 		mov r2,#ULAST-UZERO 
 389 0276 02F10302 		add r2,r2,#3
 390 027a 22F00302 		and r2,r2,#~3 
 391 027e 51F8043B 	1:	ldr r3,[r1],#4 
ARM GAS  forth.s 			page 19


 392 0282 40F8043B 		str r3,[r0],#4 
 393 0286 043A     		subs R2,#4 
 394 0288 F9D1     		bne 1b
 395              	// zero end of RAM 
 396 028a 4FF00002 		_MOV32 r2,RAM_END 
 396      C2F20202 
 397 0292 83EA0303 		eor r3,r3,r3 
 398 0296 40F8043B 	2:  str r3,[r0],#4
 399 029a 9042     		cmp r0,r2 
 400 029c FBDB     		blt 2b 
 401 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 401      C2F20004 
 402 02a6 7047     		_RET 
 403              	
 404              	// set irq priority 
 405              	// 0 highest 
 406              	// 15 lowest
 407              	// input: r0 IRQn  
 408              	//        r1  ipr 
 409              	nvic_set_priority:
 410 02a8 08B4     	    push {r3}
 411 02aa 0028     	    cmp r0,#0 
 412 02ac 08D4     	    bmi negative_irq 
 413 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 413      CEF20003 
 414 02b6 4FEA0111 	    lsl r1,#4 
 415 02ba 1954     	    strb r1,[r3,r0]
 416 02bc 08BC     	    pop {r3}
 417 02be 7047     	    _RET 
 418              	negative_irq:
 419 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 419      CEF20003 
 420 02c8 00F00F00 	    and r0,#0XF 
 421 02cc A0F10400 	    sub r0,#4 
 422 02d0 4FEA0111 	    lsl r1,#4 
 423 02d4 1954     	    strb r1,[r3,r0]
 424 02d6 08BC     	    pop {r3}
 425 02d8 7047     	    _RET 
 426              	
 427              	
 428              	// enable interrupt in nvic 
 429              	// input: r0 = IRQn 
 430              	nvic_enable_irq: 
 431 02da 0EB4     	    push {r1,r2,r3}
 432 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 432      CEF20003 
 433 02e4 0146     	    mov r1,r0 
 434 02e6 4FEA5111 	    lsr r1,#5  
 435 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 436 02ee 00F01F00 	    and r0,#31 // bit#
 437 02f2 4FF00102 	    mov r2,#1 
 438 02f6 02FA00F2 	    lsl r2,r0
 439 02fa 72B6     	    cpsid I
 440 02fc 5A50     	    str r2,[r3,r1]
 441 02fe 62B6     	    cpsie I 
 442 0300 0EBC     	    pop {r1,r2,r3}
 443 0302 7047     	    _RET 
ARM GAS  forth.s 			page 20


 444              	
 445              	// disable interrupt in nvic
 446              	// input: r0 = IRQn
 447              	nvic_disable_irq:
 448 0304 0EB4     	    push {r1,r2,r3}
 449 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 449      CEF20003 
 450 030e 0146     	    mov r1,r0 
 451 0310 4FEA5111 	    lsr r1,#5  
 452 0314 4FEA8101 	    lsl r1,#2  // ISERn
 453 0318 00F01F00 	    and r0,#31 // bit#
 454 031c 4FF00102 	    mov r2,#1 
 455 0320 02FA00F2 	    lsl r2,r0
 456 0324 5A50     	    str r2,[r3,r1]
 457 0326 BFF34F8F 	    dsb 
 458 032a BFF36F8F 	    isb 
 459 032e 0EBC     	    pop {r1,r2,r3}
 460 0330 7047     	    _RET 
 461              	
 462              	/**********************************
 463              	  gpio_config 
 464              	  Configure gpio mode 
 465              	  input:
 466              	    r0   GPIOx 
 467              	    r1   pin 
 468              	    r2   mode 
 469              	  output:
 470              	    none 
 471              	  use:
 472              	    r3,r5,r11  
 473              	**********************************/
 474              	gpio_config:
 475 0332 2DE92808 	    push {r3,r5,r11}
 476              	//  clear registers field 
 477 0336 4FF00105 	    mov r5,#1
 478 033a 05FA01F5 	    lsl r5,r1
 479 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 480 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 481 0344 03EA0503 	    and r3,r5 
 482 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 483 034a 4FF00305 	    mov r5,#3 
 484 034e 4FF0020B 	    mov r11,#2 
 485 0352 01FB0BFB 	    mul r11,r1 
 486 0356 05FA0BF5 	    lsl r5,r11 
 487 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 488 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 489 0360 03EA0503 	    and r3,r5 
 490 0364 0360     	    str r3,[r0,#GPIO_MODER]
 491 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 492 0368 03EA0503 	    and r3,r5 
 493 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 494              	// set mode register, r2 low nibble  
 495 036e 02F00305 	    and r5,r2,#3    
 496 0372 05FA0BF5 	    lsl r5,r11 // mode 
 497 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 498 0378 43EA0503 	    orr r3,r5 
 499 037c 0360     	    str r3,[r0,#GPIO_MODER]
ARM GAS  forth.s 			page 21


 500 037e 032A     	    cmp r2,#3
 501 0380 13D0     	    beq 9f // analog input 
 502 0382 12F00305 	    ands r5,r2,#3 
 503 0386 08D0     	    beq input_pull 
 504              	output_type:
 505 0388 4FEA1212 	    lsr r2,#4 
 506 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 507 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 508 0392 43EA0203 	    orr r3,r2 
 509 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 510 0398 07E0     	    b 9f 
 511              	input_pull:
 512 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 513 039c 4FEA1212 	    lsr r2,#4 
 514 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 515 03a4 43EA0203 	    orr r3,r2 
 516 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 517 03aa BDE82808 	9:  pop {r3,r5,r11}
 518 03ae 7047     	    _RET 
 519              	
 520              	// configure gpio speed 
 521              	// input:
 522              	//    r0   GPIO_BASE_ADR 
 523              	//    r1   pin 
 524              	//    r2   speed
 525              	// use:
 526              	//  r3,r5,r11 
 527              	gpio_speed:
 528 03b0 2DE92808 	    push {r3,r5,r11}
 529 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 530 03b6 4FF00305 	    mov r5,#3
 531 03ba 4FF0020B 	    mov r11,#2 
 532 03be 01FB0BFB 	    mul r11,r1 
 533 03c2 05FA0BF5 	    lsl r5,r11
 534 03c6 6FEA0505 	    mvn r5,r5 
 535 03ca 03EA0503 	    and r3,r5   
 536 03ce 02FA0BF2 	    lsl r2,r11  
 537 03d2 43EA0203 	    orr r3,r2 
 538 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 539 03d8 BDE82808 	    pop {r3,r5,r11}
 540 03dc 7047     	    _RET
 541              	
 542              	/**************************** 
 543              	  gpio_out port,pin,0|1
 544              	  input:
 545              	    r0   gpio_base_adr 
 546              	    r1   pin 
 547              	    r2   data 0|1 
 548              	**************************/
 549              	gpio_out:
 550 03de 08B4     	    push {r3}
 551 03e0 4FF00103 	    mov r3,#1 
 552 03e4 03FA01F3 	    lsl r3,r1 
 553 03e8 0AB9     	    cbnz r2, 1f 
 554 03ea 4FEA0343 	    lsl r3,#16 
 555 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 556 03f0 08BC     	    pop {r3}
ARM GAS  forth.s 			page 22


 557 03f2 7047     	    _RET 
 558              	
 559              	/******************************************************
 560              	*  COLD start moves the following to USER variables.
 561              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 562              	******************************************************/
 563              		.p2align 2
 564              	UZERO:
 565 03f4 00000000 		.word 0  			/*Reserved */
 566 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 567 03fc 00000000 		.word 0      /* TICKS */
 568 0400 00000000 	    .word 0     /* CD_TIMER */
 569 0404 183B0000 		.word HI  /*'BOOT */
 570 0408 C0130000 		.word PS2_QKEY /* query for character */
 571 040c 880C0000 	  .word TV_EMIT  /* char output device */
 572 0410 0A000000 	  .word BASEE 	/*BASE */
 573 0414 00000000 		.word 0			/*tmp */
 574 0418 00000000 		.word 0			/*SPAN */
 575 041c 00000000 		.word 0			/*>IN */
 576 0420 00000000 		.word 0			/*#TIB */
 577 0424 00FF0120 		.word TIBB	/*TIBU */
 578 0428 6C300000 		.word INTER	/*'EVAL */
 579 042c 00000000 		.word 0			/*HLD */
 580 0430 003C0000 		.word _LASTN	/*CONTEXT */
 581 0434 643C0000 		.word CTOP  	/* FCP end of system dictionnary */
 582 0438 70380020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 583 043c 003C0000 		.word _LASTN	/*LAST word in dictionary */
 584 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 584      00000000 
 584      00000000 
 584      00000000 
 585 0450 00000000 		.word 0  /* RX_HEAD */
 586 0454 00000000 		.word 0  /* RX_TAIL */ 
 587 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 588 045c 00000000 		.word 0  /* VID_STATE, video state */  
 589 0460 00000000 	    .word 0  /* VID_FIELD, field */
 590 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 591 0468 00000000 	    .word 0 /* kbd struct */
 592 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 592      00000000 
 592      00000000 
 592      00000000 
 593 047c 00000000 		.word 0  /* kbd queue head */
 594 0480 00000000 		.word 0 /* kbd queue tail */ 
 595 0484 00000000 	    .word 0 /* tv cursor row */
 596 0488 00000000 	    .word 0 /* tv cursor column */ 
 597 048c 00000000 	    .word 0 /* tv back color */
 598 0490 07000000 	    .word 7 /* tv font color */
 599 0494 00000000 	    .word 0,0 
 599      00000000 
 600              	ULAST:
 601              	
 602              	// used by _HEADER macro 
 603              	// to link names field
 604              	// in dictionary  
 605 049c 12000000 	    .equ LINK, 0 
 605      E6000000 
ARM GAS  forth.s 			page 23


 605      101A0000 
 605      F4030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04ac 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 04b4 1868     		ldr r0,[r3,#USART_SR]
  38 04b6 5968     		ldr r1,[r3,#USART_DR]
  39 04b8 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04bc 0CD0     		beq 2f // no char received 
  41 04be B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04c2 3FF407AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04c6 04F14C00 		add r0,UP,#RX_QUEUE
  44 04ca 226E     		ldr r2,[UP,#RX_TAIL]
  45 04cc 8154     		strb r1,[r0,r2]
  46 04ce 02F10102 		add r2,#1 
  47 04d2 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04d6 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04d8 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
ARM GAS  forth.s 			page 24


  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04da 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04e2 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04e4 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04e8 01EA0201 	  and r1,r1,r2
  62 04ec 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04f0 41EA0201 	  orr r1,r1,r2 
  64 04f4 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04f6 4FF4EE61 	  mov r1,#0x77<<4 
  67 04fa 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 04fc 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0504 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0508 8160     	  str r1,[r0,#USART_BRR]
  73 050a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 050e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0510 4FF02500 	  mov r0,#USART1_IRQ 
  77 0514 4FF00701 	  mov r1,#7
  78 0518 00B5FFF7 	  _CALL nvic_set_priority
  78      C5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0522 4FF02500 	  mov r0,#USART1_IRQ 
  81 0526 00B5FFF7 	  _CALL nvic_enable_irq  
  81      D7FE5DF8 
  81      04EB
  82 0530 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0532 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0540 47F8046D 		_PUSH
  92 0544 206E     		ldr T0,[UP,#RX_TAIL] 
  93 0546 E16D     		ldr T1,[UP,#RX_HEAD]
  94 0548 90EA0106 		eors TOS,T0,T1 
  95 054c 0CD0     		beq 1f
  96 054e 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0552 0844     		add T0,T1 
  98 0554 0678     		ldrb TOS,[T0]
  99 0556 01F10101 		add T1,#1 
 100 055a 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 055e E165     		str T1,[UP,#RX_HEAD]
 102 0560 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 25


 103 0564 4FF0FF36 		mov TOS,#-1
 104 0568 01F056BA 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 056c 36050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 057c 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0584 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0586 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 058a FBD0     		beq 1b 
 115 058c 2E71     		strb TOS,[WP,#USART_DR]	 
 116 058e 57F8046B 		_POP
 117 0592 01F041BA 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0596 70050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05a0 47F8046D 	        _PUSH 
 126 05a4 4FF00006 	        mov TOS,#0
 127 05a8 01F036BA 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05ac 9A050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 05b8 47F8046D 	        _PUSH 
 135 05bc 4FF00106 	        mov TOS,#1
 136 05c0 01F02ABA 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05c4 B0050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05d0 3046     	        mov T0,TOS
 144 05d2 57F8046B 	        _POP 
 145 05d6 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05d8 4B48     	        ldr T0,=SER_QKEY 
 148 05da 6061     	        str T0,[UP,#STDIN]
 149 05dc 4B48     	        ldr T0,=SER_EMIT
ARM GAS  forth.s 			page 26


 150 05de A061     	        str T0,[UP,#STDOUT]
 151 05e0 01F01ABA 	        _NEXT 
 152              	4: // local console 
 153 05e4 4A48     	        ldr T0,=PS2_QKEY
 154 05e6 6061     	        str T0,[UP,#STDIN]
 155 05e8 4A48     	        ldr T0,=TV_EMIT
 156 05ea A061     	        str T0,[UP,#STDOUT]
 157 05ec 01F014BA 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 05f0 C8050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0600 504700BF 	      _NEST 
 166 0604 971B0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 060c E91D0000 	1:    _ADR ONEP  // c+1
 168 0610 711C0000 	      _ADR TOR   
 169 0614 971B0000 	      _DOLIT 10 
 169      0A000000 
 170 061c D9220000 	      _ADR SLMOD // r q  
 171 0620 9D1E0000 	      _ADR QDUP  // r q q | r 0  
 172 0624 D71B0000 	      _QBRAN 2f  // r 0 
 172      38060000 
 173 062c 491C0000 	      _ADR RFROM // r q c 
 174 0630 EB1B0000 	      _BRAN 1b
 174      0C060000 
 175 0638 971B0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0640 8D1D0000 	      _ADR PLUS 
 177 0644 A11A0000 	      _ADR EMIT 
 178 0648 491C0000 	      _ADR RFROM 
 179 064c 9D1E0000 	      _ADR QDUP 
 180 0650 D71B0000 	      _QBRAN 3f
 180      68060000 
 181 0658 F91D0000 	      _ADR ONEM 
 182 065c 711C0000 	      _ADR TOR 
 183 0660 EB1B0000 	      _BRAN 2b 
 183      38060000 
 184              	3:    
 185 0668 1F1A0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 066c F4050000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0678 504700BF 	      _NEST 
 193 067c 971B0000 	      _DOLIT 27 
 193      1B000000 
ARM GAS  forth.s 			page 27


 194 0684 A11A0000 	      _ADR EMIT 
 195 0688 971B0000 	      _DOLIT '['
 195      5B000000 
 196 0690 A11A0000 	      _ADR EMIT 
 197 0694 1F1A0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0698 70060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06a4 504700BF 	      _NEST
 205 06a8 79060000 	      _ADR ANSI_ESC
 206 06ac D91C0000 	      _ADR SWAP 
 207 06b0 01060000 	      _ADR ANSI_PARAM 
 208 06b4 971B0000 	      _DOLIT ';'
 208      3B000000 
 209 06bc A11A0000 	      _ADR EMIT
 210 06c0 01060000 	      _ADR ANSI_PARAM
 211 06c4 971B0000 	      _DOLIT 'H'
 211      48000000 
 212 06cc A11A0000 	      _ADR EMIT 
 213 06d0 1F1A0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06d4 9C060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06e0 504700BF 	    _NEST
 221 06e4 971B0000 	    _DOLIT 1 
 221      01000000 
 222 06ec C91C0000 	    _ADR DUPP 
 223 06f0 A5060000 	    _ADR SER_AT  
 224 06f4 79060000 	    _ADR ANSI_ESC
 225 06f8 971B0000 	    _DOLIT 'J'
 225      4A000000 
 226 0700 A11A0000 	    _ADR EMIT 
 227 0704 1F1A0000 	    _UNNEST 
 228 0708 40050000 	
 228      7C050000 
 228      C0130000 
 228      880C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
ARM GAS  forth.s 			page 28


  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
ARM GAS  forth.s 			page 29


  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0718 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0720 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0722 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 072a 41EA0201 	  orr r1,r2
  82 072e 0160     	  str r1,[r0,#GPIO_MODER]
  83 0730 81EA0101 	  eor r1,r1 
  84 0734 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0736 4FF00101 	  mov r1,#1 // pin 1 
  88 073a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 073e 00B5FFF7 	  _CALL gpio_config 
  89      F7FD5DF8 
  89      04EB
  90 0748 4FF00101 	  mov r1,#1 
  91 074c 4FF00202 	  mov r2,#2
  92 0750 00B5FFF7 	  _CALL gpio_speed 
ARM GAS  forth.s 			page 30


  92      2DFE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 075a 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 075c 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0760 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0762 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 076a 4FF00200 	  mov r0,#2 
 100 076e 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0770 41EA0001 	  orr r1,r0 
 102 0774 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0776 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 077e 41F2D470 	  mov r0,#HPER
 106 0782 D062     	  str r0,[r2,#TIM_ARR]
 107 0784 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0788 D063     	  str r0,[r2,#TIM_CCR3]
 109 078a 4FF4E170 	  mov r0,#HPULSE 
 110 078e 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0790 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0794 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0796 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 079a 1062     	  str r0,[r2,#TIM_CCER]
 115 079c 4FF00100 	  mov r0,#1 
 116 07a0 D060     	  str r0,[r2,#TIM_DIER]
 117 07a2 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 07a4 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 07a8 4FF00201 	  mov r1,#2
 121 07ac 00B5FFF7 	  _CALL nvic_set_priority
 121      7BFD5DF8 
 121      04EB
 122 07b6 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 07ba 00B5FFF7 	  _CALL nvic_enable_irq
 123      8DFD5DF8 
 123      04EB
 124 07c4 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 07c6 00BF     	  _GBL_FUNC tv_out_isr
 132 07c8 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 07d0 81EA0101 	  eor T1,T1
 134 07d4 0161     	  str T1,[T0,#TIM_SR]
 135 07d6 616E     	  ldr T1,[UP,#VID_CNTR]
 136 07d8 01F10101 	  add T1,#1 
 137 07dc 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 07de A26E     	  ldr T2,[UP,#VID_STATE]
 140 07e0 002A     	  cmp T2,#ST_VSYNC 
ARM GAS  forth.s 			page 31


 141 07e2 07D0     	  beq state_vsync
 142 07e4 012A     	  cmp T2,#ST_PREVID 
 143 07e6 2FD0     	  beq state_pre_video 
 144 07e8 022A     	  cmp T2,#ST_VIDEO 
 145 07ea 36D0     	  beq state_video_out 
 146 07ec 032A     	  cmp T2,#ST_POSTVID 
 147 07ee 63D0     	  beq state_post_video
 148 07f0 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 07f4 0129     	  cmp T1,#1
 152 07f6 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 07f8 4FF0DB01 	  mov T1,#SERRATION
 155 07fc 0164     	  str T1,[T0,#TIM_CCR4]
 156 07fe 40F6E931 	  mov T1,#SYNC_LINE 
 157 0802 C162     	  str T1,[T0,#TIM_ARR]
 158 0804 6BE0     	  b tv_isr_exit 
 159 0806 0729     	1: cmp T1,#7
 160 0808 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 080a 40F62821 	  mov T1,#VSYNC_PULSE
 163 080e 0164     	  str T1,[T0,#TIM_CCR4]
 164 0810 65E0     	  b tv_isr_exit
 165 0812 0D29     	2: cmp T1,#13
 166 0814 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0816 4FF0DB01 	   mov T1,#SERRATION 
 169 081a 0164     	   str T1,[T0,#TIM_CCR4]
 170 081c 5FE0     	   b tv_isr_exit   
 171 081e 1229     	3: cmp T1,#18
 172 0820 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0822 E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0824 0029     	   cmp T1,#ODD_FIELD  
 176 0826 5AD0     	   beq tv_isr_exit 
 177 0828 01E0     	   b sync_end 
 178 082a 1329     	4: cmp T1,#19 
 179 082c 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 082e 4FF00901 	   mov T1,#9
 182 0832 6166     	   str T1,[UP,#VID_CNTR]
 183 0834 4FF4E171 	   mov T1,#HPULSE 
 184 0838 0164     	   str T1,[T0,#TIM_CCR4] 
 185 083a 41F2D471 	   mov T1,#HPER 
 186 083e C162     	   str T1,[T0,#TIM_ARR] 
 187 0840 4FF00101 	   mov T1,#ST_PREVID 
 188 0844 A166     	   str T1,[UP,#VID_STATE]
 189 0846 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0848 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 084a 48D4     	   bmi tv_isr_exit 
 194 084c 4FF00201 	   mov T1,#ST_VIDEO 
 195 0850 A166     	   str T1,[UP,#VID_STATE]
 196 0852 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0856 C160     	   str T1,[T0,#TIM_DIER]
ARM GAS  forth.s 			page 32


 198 0858 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 085a F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 085c 06D9     	   bls 1f 
 205 085e 4FF00301 	   mov T1,#ST_POSTVID 
 206 0862 A166     	   str T1,[UP,#VID_STATE]
 207 0864 4FF00101 	   mov T1,#1 
 208 0868 C160     	   str T1,[T0,#TIM_DIER]
 209 086a 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 086c 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 086e A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0872 4FF0A003 	   mov T3,#160
 214 0876 03FB01F1 	   mul T1,T3 
 215 087a 0844     	   add T0,T1  
 216 087c 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0884 10F8012B 	2: ldrb T2,[T0],#1 
 222 0888 4FEA0222 	   lsl T2,#8 
 223 088c 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 088e AFF30080 	   nop.w 
 225 0892 AFF30080 	   nop.w
 226 0896 AFF30080 	   nop.w 
 227 089a AFF30080 	   nop.w 
 228 089e 4FEA0212 	   lsl T2,#4  
 229 08a2 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 08a4 AFF30080 	   nop.w
 231 08a8 AFF30080 	   nop.w  
 232 08ac 013B     	   subs T3,#1
 233 08ae E9D1     	   bne 2b  
 234 08b0 4FF47022 	   mov T2,#(15<<16) 
 235 08b4 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 08b6 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 08b8 4FF48372 	   mov T2,#262
 239 08bc 9142     	   cmp T1,T2
 240 08be 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 08c0 E16E     	   ldr T1,[UP,VID_FIELD]
 243 08c2 11B9     	   cbnz T1, frame_end 
 244 08c4 40F6E931 	   mov T1,#SYNC_LINE
 245 08c8 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 08ca 4FF00001 	   mov T1,#ST_VSYNC 
 248 08ce A166     	   str T1,[UP,#VID_STATE]
 249 08d0 81EA0101 	   eor T1,T1 
 250 08d4 6166     	   str T1,[UP,#VID_CNTR]
 251 08d6 E16E     	   ldr T1,[UP,#VID_FIELD]
 252 08d8 6FEA0101 	   mvn T1,T1  
 253 08dc E166     	   str T1,[UP,#VID_FIELD]
ARM GAS  forth.s 			page 33


 254              	tv_isr_exit: 
 255 08de 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 08e0 D8060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 08f0 47F8046D 		_PUSH 
 266 08f4 04F19806 		ADD TOS,UP,#BK_COLOR
 267 08f8 01F08EB8 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 08fc E4080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 090c 47F8046D 		_PUSH 
 273 0910 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0914 01F080B8 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0918 00090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0924 47F8046D 	  _PUSH 
 280 0928 04F19406 	  ADD TOS,UP,#COL 
 281 092c 01F074B8 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0930 1C090000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0938 47F8046D 	  _PUSH 
 287 093c 04F19006 	  ADD TOS,UP,#ROW 
 288 0940 01F06AB8 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0944 34090000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0950 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0954 00FB06F6 	  mul TOS,T0 
 295 0958 01F05EB8 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 095c 48090000 	  _HEADER COLX,5,"COL>X" 
ARM GAS  forth.s 			page 34


 299      05434F4C 
 299      3E5800BF 
 300 0968 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 096c 00FB06F6 	  mul TOS,T0 
 302 0970 01F052B8 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0974 60090000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0980 47F8046D 	  _PUSH 
 308 0984 DFF88C65 	  ldr TOS,=font_6x8 
 309 0988 01F046B8 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 098c 78090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0998 47F8046D 	  _PUSH 
 315 099c 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 099e 01F03BB8 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 09a2 90090000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 09ac 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 09ae 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 09b2 02FB00F0 	    mul T0,T2 
 330 09b6 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 09ba 1044     	    add T0,T2 
 332 09bc 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 09be 0344     	    add T3,T0 // T3 -> byte address 
 334 09c0 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 09c2 4FF00F02 	    mov T2,#15 // AND mask 
 336 09c6 11F0010F 	    tst T1,#1 
 337 09ca 01D0     	    beq 1f 
 338 09cc 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 09d0 DFF84405 	1:  ldr T0,=plot_op 
 340 09d4 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 09d8 05EA0205 	    and WP,T2 // mask out nibble 
 343 09dc 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 09e0 11F0010F 	    tst T1,#1 
 345 09e4 01D1     	    bne 1f 
 346 09e6 4FEA0010 	    lsl T0,#4 // high nibble  
 347 09ea 45EA0005 	1:  orr WP,T0  
 348 09ee 1D70     	    strb WP,[T3]
ARM GAS  forth.s 			page 35


 349 09f0 1AE0     	    b 9f 
 350              	op_pen: 
 351 09f2 05EA0205 	    and WP,T2 
 352 09f6 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 09fa 11F0010F 	    tst T1,#1
 354 09fe 01D1     	    bne 1f 
 355 0a00 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0a04 45EA0005 	1:	orr WP,T0 
 357 0a08 1D70     	    strb WP,[T3]
 358 0a0a 0DE0     	    b 9f 
 359              	op_invert:
 360 0a0c 85EA0205 	    eor WP,T2 
 361 0a10 1D70     	    strb WP,[T3]
 362 0a12 09E0     	    b 9f 
 363              	op_xor:
 364 0a14 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0a18 11F0010F 	    tst T1,#1 
 366 0a1c 01D1     	    bne 1f 
 367 0a1e 4FEA0010 	    lsl T0,#4 
 368 0a22 85EA0005 	1:  eor WP,T0 
 369 0a26 1D70     	    strb WP,[T3]
 370 0a28 57F8046B 	9:  _POP 
 371 0a2c 00F0F4BF 	    _NEXT 
 372              	
 373 0a30 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0a34 A6090000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0a40 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0a42 0028     	    cmp T0,#0
 381 0a44 FCD1     	    bne 1b
 382 0a46 00F0E7BF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0a4a 380A0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0a54 80EA0000 	    eor T0,T0 
 388 0a58 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0a5c 40EA0100 	    orr T0,T1 
 390 0a60 4FEA0111 	    lsl T1,#4 
 391 0a64 40EA0100 	    orr T0,T1 
 392 0a68 4FEA0021 	    lsl T1,T0,#8 
 393 0a6c 40EA0100 	    orr T0,T1 
 394 0a70 4FEA0041 	    lsl T1,T0,#16
 395 0a74 40EA0100 	    orr T0,T1 
 396 0a78 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0a7c 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0a7e 5050     	1:	str T0,[T2,T1]
 399 0a80 0439     	    subs T1,#4
 400 0a82 FCD1     	    bne 1b
 401 0a84 1060     	    str T0,[T2]
ARM GAS  forth.s 			page 36


 402 0a86 80EA0000 	    eor T0,T0 
 403 0a8a C4F89000 	    str T0,[UP,#ROW]
 404 0a8e C4F89400 	    str T0,[UP,#COL]
 405 0a92 00F0C1BF 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0a96 4E0A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0aa4 504700BF 	  _NEST
 412 0aa8 971B0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0ab0 C91C0000 	  _ADR DUPP  
 414 0ab4 711C0000 	  _ADR TOR 
 415 0ab8 AD1D0000 	  _ADR STAR
 416 0abc 99090000 	  _ADR VIDBUFF
 417 0ac0 8D1D0000 	  _ADR PLUS
 418 0ac4 491C0000 	  _ADR RFROM   
 419 0ac8 971B0000 	  _DOLIT 0 
 419      00000000 
 420 0ad0 0D250000 	  _ADR FILL 
 421 0ad4 1F1A0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0ad8 9A0A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0ae8 504700BF 	    _NEST 
 429 0aec 99090000 	    _ADR VIDBUFF 
 430 0af0 C91C0000 	    _ADR DUPP 
 431 0af4 971B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0afc C91C0000 	    _ADR DUPP 
 433 0b00 711C0000 	    _ADR TOR 
 434 0b04 8D1D0000 	    _ADR PLUS 
 435 0b08 D91C0000 	    _ADR SWAP 
 436 0b0c 971B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0b14 491C0000 	    _ADR RFROM  
 438 0b18 9D1D0000 	    _ADR SUBB 
 439 0b1c C5240000 	    _ADR MOVE
 440 0b20 971B0000 	    _DOLIT 24 
 440      18000000 
 441 0b28 A50A0000 	    _ADR CLRLINE 
 442 0b2c 1F1A0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
ARM GAS  forth.s 			page 37


 448 0b30 DC0A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0b40 504700BF 	    _NEST 
 450 0b44 99090000 	    _ADR VIDBUFF
 451 0b48 C91C0000 	    _ADR DUPP 
 452 0b4c 971B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0b54 8D1D0000 	    _ADR PLUS 
 454 0b58 971B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0b60 971B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0b68 9D1D0000 	    _ADR SUBB  
 457 0b6c C5240000 	    _ADR MOVE
 458 0b70 971B0000 	    _DOLIT 0 
 458      00000000 
 459 0b78 A50A0000 	    _ADR CLRLINE
 460 0b7c 1F1A0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0b80 340B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0b8c E34D     	    ldr WP,=SCROLLUP 
 469 0b8e 45F00105 	    orr WP,#1
 470 0b92 80EA0000 	    eor T0,T0 
 471 0b96 C4F89400 	    str T0,[UP,#COL]
 472 0b9a D4F89000 	    ldr T0,[UP,#ROW]
 473 0b9e 1828     	    cmp T0,#24 
 474 0ba0 A2D0     	    beq SCROLLUP  
 475 0ba2 00F10100 	    add T0,#1 
 476 0ba6 C4F89000 	    str T0,[UP,#ROW]
 477 0baa 00F035BF 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0bae 840B0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0bb8 D4F89400 	  ldr T0,[UP,#COL]
 484 0bbc 00F10100 	  add T0,#1
 485 0bc0 3528     	  cmp T0,#53
 486 0bc2 E3D5     	  bpl TV_CRLF  
 487 0bc4 C4F89400 	  str T0,[UP,#COL]
 488 0bc8 00F026BF 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
ARM GAS  forth.s 			page 38


 494              	**************************/
 495 0bcc B20B0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0bd8 D4F89400 	    ldr T0,[UP,#COL]
 497 0bdc 28B1     	    cbz T0,1f 
 498 0bde A0F10100 	    sub T0,#1 
 499 0be2 C4F89400 	    str T0,[UP,#COL]
 500 0be6 00F017BF 	    _NEXT 
 501 0bea D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0bee 38B1     	    cbz T0,9f
 503 0bf0 A0F10100 	    sub T0,#1
 504 0bf4 C4F89000 	    str T0,[UP,#ROW]
 505 0bf8 4FF03400 	    mov T0,#52 
 506 0bfc C4F89400 	    str T0,[UP,#COL]
 507 0c00 00F00ABF 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0c04 4FF08000 	    mov T0,#128 
 513 0c08 06EA0006 	    and TOS,T0 
 514 0c0c 4FEAD616 	    lsr TOS,#7
 515 0c10 00F002BF 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0c14 3868     	  ldr T0,[DSP]
 520 0c16 00F10100 	  add T0,#1 
 521 0c1a 3860     	  str T0,[DSP]
 522 0c1c 00F0FCBE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0c20 4FEA4606 	    lsl TOS,#1
 527 0c24 00F0F8BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0c28 504700BF 	    _NEST 
 536 0c2c 971B0000 	    _DOLIT 5 
 536      05000000 
 537 0c34 711C0000 	    _ADR TOR 
 538 0c38 711C0000 	1:  _ADR TOR 
 539 0c3c 011F0000 	    _ADR DDUP 
 540 0c40 5D1C0000 	    _ADR RAT
 541 0c44 050C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0c48 AD090000 	    _ADR PLOT 
 543 0c4c 150C0000 	    _ADR INCR_X 
 544 0c50 491C0000 	    _ADR RFROM 
 545 0c54 210C0000 	    _ADR NEXT_PIXEL
 546              	    //_DOLIT 1 
 547              	    //_ADR LSHIFT 
ARM GAS  forth.s 			page 39


 548 0c58 B91B0000 	    _DONXT 1b
 548      380C0000 
 549 0c60 ED1E0000 	    _ADR TDROP 
 550 0c64 1F1A0000 	    _UNNEST 
 551              	
 552              	
 553              	CHAR_FONT: // ( c -- c-adr )
 554 0c68 A6F12006 	   sub TOS,#32
 555 0c6c 4FF00800 	   mov T0,#8 
 556 0c70 00FB06F6 	   mul TOS,T0 
 557 0c74 A748     	   ldr T0,=font_6x8
 558 0c76 0644     	   add TOS,T0 
 559 0c78 00F0CEBE 	   _NEXT 
 560              	
 561              	/**********************************
 562              	   TV-EMIT ( c -- )
 563              	   draw character in video buffer
 564              	**********************************/
 565 0c7c D00B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 565      0754562D 
 565      454D4954 
 566 0c88 504700BF 	    _NEST
 567 0c8c C91C0000 	    _ADR DUPP 
 568 0c90 971B0000 	    _DOLIT 32 
 568      20000000 
 569 0c98 951F0000 	    _ADR ULESS
 570 0c9c D71B0000 	    _QBRAN 1f
 570      AC0C0000 
 571 0ca4 EB1B0000 	    _BRAN CTRL_KEY
 571      100D0000 
 572 0cac 690C0000 	1:  _ADR CHAR_FONT 
 573 0cb0 25090000 	    _ADR CURSOR_COL 
 574 0cb4 1D1C0000 	    _ADR AT
 575 0cb8 69090000 	    _ADR COLX  // x coord 
 576 0cbc 39090000 	    _ADR CURSOR_ROW 
 577 0cc0 1D1C0000 	    _ADR AT    
 578 0cc4 51090000 	    _ADR ROWY  // {c-adr x y -- } 
 579 0cc8 B11E0000 	    _ADR ROT  // TEST 
 580 0ccc 971B0000 	    _DOLIT 7   
 580      07000000 
 581 0cd4 711C0000 	    _ADR TOR  
 582 0cd8 711C0000 	1:  _ADR TOR  // { x y }
 583 0cdc 011F0000 	    _ADR DDUP  // { x y x y }
 584 0ce0 5D1C0000 	    _ADR RAT 
 585 0ce4 3D1C0000 	    _ADR CAT   // { x y x y r }
 586 0ce8 290C0000 	    _ADR CHAR_ROW 
 587 0cec E91D0000 	    _ADR ONEP // {x y' }
 588 0cf0 491C0000 	    _ADR RFROM 
 589 0cf4 E91D0000 	    _ADR ONEP // {x y' c-adr' }
 590 0cf8 B91B0000 	    _DONXT 1b
 590      D80C0000 
 591 0d00 ED1E0000 	    _ADR TDROP  
 592 0d04 B90B0000 	    _ADR RIGHT
 593 0d08 F90D0000 	9:  _ADR SHOW_CURSOR 
 594 0d0c 1F1A0000 	    _UNNEST  
 595              	CTRL_KEY:
 596 0d10 810E0000 	    _ADR HIDE_CURSOR
ARM GAS  forth.s 			page 40


 597 0d14 C91C0000 	    _ADR DUPP 
 598 0d18 971B0000 	    _DOLIT BKSPP  
 598      08000000 
 599 0d20 7D1F0000 	    _ADR EQUAL 
 600 0d24 D71B0000 	    _QBRAN 1f 
 600      3C0D0000 
 601 0d2c D90D0000 	    _ADR BACK_SPACE 
 602 0d30 B91C0000 	8:  _ADR DROP 
 603 0d34 EB1B0000 	    _BRAN 9b 
 603      080D0000 
 604 0d3c C91C0000 	1:  _ADR DUPP 
 605 0d40 971B0000 	    _DOLIT CRR 
 605      0D000000 
 606 0d48 7D1F0000 	    _ADR EQUAL 
 607 0d4c D71B0000 	    _QBRAN 1f 
 607      600D0000 
 608 0d54 810D0000 	    _ADR CAR_RET
 609 0d58 EB1B0000 	    _BRAN 8b
 609      300D0000 
 610 0d60 971B0000 	1:  _DOLIT LF 
 610      0A000000 
 611 0d68 7D1F0000 	    _ADR EQUAL 
 612 0d6c D71B0000 	    _QBRAN 9b 
 612      080D0000 
 613 0d74 990D0000 	    _ADR LN_FEED
 614 0d78 EB1B0000 	    _BRAN 9b  
 614      080D0000 
 615              	
 616              	/*******************************
 617              	  CAR_RET 
 618              	  carriage return
 619              	*******************************/
 620              	CAR_RET:
 621 0d80 504700BF 	   _NEST
 622 0d84 971B0000 	   _DOLIT 0 
 622      00000000 
 623 0d8c 25090000 	   _ADR CURSOR_COL 
 624 0d90 091C0000 	   _ADR STORE 
 625 0d94 1F1A0000 	   _UNNEST   
 626              	
 627              	/*************************
 628              	  LN_FEED 
 629              	  send cursor to next line 
 630              	**************************/
 631              	LN_FEED:
 632 0d98 504700BF 	    _NEST 
 633 0d9c 39090000 	    _ADR CURSOR_ROW 
 634 0da0 1D1C0000 	    _ADR AT 
 635 0da4 C91C0000 	    _ADR DUPP 
 636 0da8 971B0000 	    _DOLIT 24 
 636      18000000 
 637 0db0 351D0000 	    _ADR XORR 
 638 0db4 D71B0000 	    _QBRAN 1f
 638      CC0D0000 
 639 0dbc E91D0000 	    _ADR ONEP 
 640 0dc0 39090000 	    _ADR CURSOR_ROW 
 641 0dc4 091C0000 	    _ADR STORE 
ARM GAS  forth.s 			page 41


 642 0dc8 1F1A0000 	    _UNNEST    
 643 0dcc B91C0000 	1:  _ADR DROP 
 644 0dd0 E90A0000 	    _ADR SCROLLUP 
 645 0dd4 1F1A0000 	    _UNNEST  
 646              	
 647              	
 648              	/*****************************
 649              	  BACK_SPACE  
 650              	  move cursor left 1 character
 651              	*****************************/
 652              	BACK_SPACE: 
 653 0dd8 504700BF 	  _NEST 
 654 0ddc D90B0000 	  _ADR LEFT 
 655 0de0 F90D0000 	  _ADR SHOW_CURSOR
 656 0de4 1F1A0000 	9: _UNNEST    
 657              	
 658              	
 659              	/*******************************
 660              	  SHOW_CURSOR ( -- )
 661              	********************************/
 662 0de8 800C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 662      0B53484F 
 662      572D4355 
 662      52534F52 
 663              	//SHOW_CURSOR:
 664 0df8 504700BF 	    _NEST 
 665 0dfc 971B0000 	    _DOLIT 0xFF
 665      FF000000 
 666 0e04 39090000 	0:  _ADR CURSOR_ROW
 667 0e08 1D1C0000 	    _ADR AT  
 668 0e0c E91D0000 	    _ADR ONEP 
 669 0e10 51090000 	    _ADR ROWY 
 670 0e14 971B0000 	    _DOLIT BPR
 670      A0000000 
 671 0e1c AD1D0000 	    _ADR STAR
 672 0e20 971B0000 	    _DOLIT BPR  
 672      A0000000 
 673 0e28 9D1D0000 	    _ADR SUBB 
 674 0e2c 25090000 	    _ADR CURSOR_COL
 675 0e30 1D1C0000 	    _ADR AT 
 676 0e34 69090000 	    _ADR COLX 
 677 0e38 8D1E0000 	    _ADR TWOSL  
 678 0e3c 8D1D0000 	    _ADR PLUS
 679 0e40 99090000 	    _ADR VIDBUFF
 680 0e44 8D1D0000 	    _ADR PLUS
 681 0e48 971B0000 	    _DOLIT 2
 681      02000000 
 682 0e50 711C0000 	    _ADR TOR  
 683 0e54 011F0000 	1:  _ADR DDUP 
 684 0e58 291C0000 	    _ADR CSTOR 
 685 0e5c E91D0000 	    _ADR ONEP 
 686 0e60 B91B0000 	    _DONXT 1b
 686      540E0000 
 687 0e68 D91E0000 	2:  _ADR DDROP // drop 3 elements 
 688 0e6c 1F1A0000 	    _UNNEST  
 689              	
 690              	/*************************
ARM GAS  forth.s 			page 42


 691              	    HIDE_CURSOR 
 692              	*************************/
 693 0e70 EC0D0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 693      0B484944 
 693      452D4355 
 693      52534F52 
 694              	//HIDE_CURSOR:
 695 0e80 504700BF 	    _NEST 
 696 0e84 F1080000 	    _ADR BACKCOLOR 
 697 0e88 1D1C0000 	    _ADR AT 
 698 0e8c C91C0000 	    _ADR DUPP  
 699 0e90 971B0000 	    _DOLIT 4 
 699      04000000 
 700 0e98 7D1D0000 	    _ADR LSHIFT 
 701 0e9c 211D0000 	    _ADR ORR 
 702 0ea0 EB1B0000 	    _BRAN 0b
 702      040E0000 
 703              	
 704              	// TV-AT ( line col -- )
 705              	// set text cursor position 
 706 0ea8 740E0000 	    _HEADER TV_AT,5,"TV-AT"
 706      0554562D 
 706      415400BF 
 707 0eb4 352E     	    cmp TOS,#53
 708 0eb6 01D4     	    bmi 1f 
 709 0eb8 4FF03406 	    mov TOS,#52
 710 0ebc C4F89460 	1:  str TOS,[UP,#COL]
 711 0ec0 57F8046B 	    _POP
 712 0ec4 192E     	    cmp TOS,#25
 713 0ec6 01D4     	    bmi 1f 
 714 0ec8 4FF01806 	    mov TOS,#24 
 715 0ecc C4F89060 	1:  str TOS,[UP,#ROW]
 716 0ed0 57F8046B 	    _POP 
 717 0ed4 00F0A0BD 	    _NEXT 
 718              	
 719              	// INPUT ( -- c-adr )
 720              	// input a string in pad 
 721 0ed8 AC0E0000 	    _HEADER INPUT,5,"INPUT"
 721      05494E50 
 721      555400BF 
 722 0ee4 504700BF 	    _NEST 
 723 0ee8 3D240000 	    _ADR PAD 
 724 0eec C91C0000 	    _ADR DUPP 
 725 0ef0 E91D0000 	    _ADR ONEP 
 726 0ef4 971B0000 	    _DOLIT 53
 726      35000000 
 727 0efc 592F0000 	    _ADR ACCEP
 728 0f00 D91C0000 	    _ADR SWAP 
 729 0f04 B91C0000 	    _ADR DROP 
 730 0f08 ED1C0000 	    _ADR OVER 
 731 0f0c 291C0000 	    _ADR CSTOR  
 732 0f10 1F1A0000 	    _UNNEST 
 733              	
 734              	
 735              		.section .rodata 
 736              		.p2align 2
 737              	/********************************************
ARM GAS  forth.s 			page 43


 738              	    TV font  ASCII 6 pixels x 8 pixels 
 739              	********************************************/
 740              	font_6x8:
 741 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 741      00000000 
 742 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 742      20002000 
 743 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 743      00000000 
 744 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 744      F8505000 
 745 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 745      28F02000 
 746 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 746      40981800 
 747 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 747      A8906800 
 748 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 748      00000000 
 749 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 749      40201000 
 750 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 750      10204000 
 751 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 751      A8200000 
 752 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 752      20200000 
 753 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 753      60204000 
 754 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 754      00000000 
 755 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 755      00606000 
 756 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 756      40800000 
 757 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 757      C8887000 
 758 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 758      2020F800 
 759 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 759      4080F800 
 760 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 760      0808F000 
 761 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 761      F8101000 
 762 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 762      0808F000 
 763 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 763      88887000 
 764 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 764      40404000 
 765 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 765      88887000 
 766 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 766      08087000 
 767 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 767      60600000 
ARM GAS  forth.s 			page 44


 768 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 768      60204000 
 769 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 769      40201000 
 770 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 770      F8000000 
 771 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 771      10204000 
 772 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 772      20002000 
 773 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 773      A8A87000 
 774 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 774      88888800 
 775 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 775      8888F000 
 776 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 776      80807800 
 777 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 777      8888F000 
 778 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 778      8080F800 
 779 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 779      80808000 
 780 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 780      88887000 
 781 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 781      88888800 
 782 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 782      20207000 
 783 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 783      08906000 
 784 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 784      A0908800 
 785 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 785      8080F800 
 786 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 786      88888800 
 787 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 787      98888800 
 788 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 788      88887000 
 789 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 789      80808000 
 790 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 790      A8987800 
 791 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 791      A0908800 
 792 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 792      0808F000 
 793 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 793      20202000 
 794 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 794      88887000 
 795 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 795      88502000 
 796 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
ARM GAS  forth.s 			page 45


 796      A8D88800 
 797 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 797      50888800 
 798 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 798      20202000 
 799 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 799      8080F800 
 800 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 800      40406000 
 801 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 801      10080000 
 802 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 802      08081800 
 803 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 803      00000000 
 804 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 804      0000F800 
 805 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 805      00000000 
 806 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 806      78887800 
 807 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 807      C888F000 
 808 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 808      80887000 
 809 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 809      98887800 
 810 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 810      F8807000 
 811 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 811      40404000 
 812 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 812      88780870 
 813 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 813      88888800 
 814 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 814      20202000 
 815 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 815      10906000 
 816 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 816      C0A09000 
 817 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 817      20207000 
 818 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 818      A8888800 
 819 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 819      88888800 
 820 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 820      88887000 
 821 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 821      88F08080 
 822 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 822      90B05018 
 823 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 823      80808000 
 824 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 824      7008F000 
ARM GAS  forth.s 			page 46


 825 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 825      40483000 
 826 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 826      88986800 
 827 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 827      88502000 
 828 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 828      A8A85000 
 829 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 829      20508800 
 830 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 830      88780870 
 831 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 831      2040F800 
 832 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 832      40402000 
 833 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 833      20202000 
 834 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 834      20204000 
 835 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 835      10000000 
 836 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 836      FCFCFCFC 
 837 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 837      10204000 
 838 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 838      40201000 
 839 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 839      20200000 
 840 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 840      A8702000 
 841 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 841      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
ARM GAS  forth.s 			page 47


  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
ARM GAS  forth.s 			page 48


  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
ARM GAS  forth.s 			page 49


  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
ARM GAS  forth.s 			page 50


   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f20 1C61     	   .byte 0x1c,'a' 
   9 0f22 3262     	   .byte 0x32,'b'
  10 0f24 2163     	   .byte 0x21,'c'
  11 0f26 2364     	   .byte 0x23,'d'
  12 0f28 2465     	   .byte 0x24,'e'
  13 0f2a 2B66     	   .byte 0x2b,'f'
  14 0f2c 3467     	   .byte 0x34,'g'
  15 0f2e 3368     	   .byte 0x33,'h'
  16 0f30 4369     	   .byte 0x43,'i'
  17 0f32 3B6A     	   .byte 0x3B,'j'
  18 0f34 426B     	   .byte 0x42,'k'
  19 0f36 4B6C     	   .byte 0x4b,'l'
  20 0f38 3A6D     	   .byte 0x3a,'m'
  21 0f3a 316E     	   .byte 0x31,'n'
  22 0f3c 446F     	   .byte 0x44,'o'
  23 0f3e 4D70     	   .byte 0x4d,'p'
  24 0f40 1571     	   .byte 0x15,'q'
  25 0f42 2D72     	   .byte 0x2d,'r'
  26 0f44 1B73     	   .byte 0x1b,'s'
  27 0f46 2C74     	   .byte 0x2c,'t'
  28 0f48 3C75     	   .byte 0x3c,'u'
  29 0f4a 2A76     	   .byte 0x2a,'v'
  30 0f4c 1D77     	   .byte 0x1d,'w'
  31 0f4e 2278     	   .byte 0x22,'x'
  32 0f50 3579     	   .byte 0x35,'y'
  33 0f52 1A7A     	   .byte 0x1a,'z'
  34 0f54 4530     	   .byte 0x45,'0'
  35 0f56 1631     	   .byte 0x16,'1'
  36 0f58 1E32     	   .byte 0x1e,'2'
  37 0f5a 2633     	   .byte 0x26,'3'
  38 0f5c 2534     	   .byte 0x25,'4'
  39 0f5e 2E35     	   .byte 0x2e,'5'
  40 0f60 3636     	   .byte 0x36,'6'
  41 0f62 3D37     	   .byte 0x3d,'7'
  42 0f64 3E38     	   .byte 0x3e,'8'
  43 0f66 4639     	   .byte 0x46,'9'
  44 0f68 0E60     	   .byte 0x0e,'`'
  45 0f6a 4E2D     	   .byte 0x4e,'-'
  46 0f6c 553D     	   .byte 0x55,'='
  47 0f6e 5D5C     	   .byte 0x5d,'\\'
  48 0f70 545B     	   .byte 0x54,'['
  49 0f72 5B5D     	   .byte 0x5b,']'
  50 0f74 4C3B     	   .byte 0x4c,';'
  51 0f76 5227     	   .byte 0x52,'\''
  52 0f78 412C     	   .byte 0x41,','
  53 0f7a 492E     	   .byte 0x49,'.'
  54 0f7c 7C2A     	   .byte 0x7c,'*'
  55 0f7e 792B     	   .byte 0x79,'+'
  56 0f80 2920     	   .byte 0x29,' '
  57 0f82 5A0D     	   .byte SC_ENTER,CRR 
  58 0f84 6608     	   .byte SC_BKSP,BKSPP 
  59 0f86 0D09     	   .byte SC_TAB,9
  60 0f88 761B     	   .byte SC_ESC,27
  61 0f8a 119E     	   .byte SC_LALT,VK_LALT 
  62 0f8c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
ARM GAS  forth.s 			page 51


  63 0f8e 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f90 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f92 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f94 5800     	   .byte SC_CAPS,0
  67 0f96 0580     	   .byte SC_F1,VK_F1
  68 0f98 0681     	   .byte SC_F2,VK_F2
  69 0f9a 0482     	   .byte SC_F3,VK_F3
  70 0f9c 0C83     	   .byte SC_F4,VK_F4
  71 0f9e 0384     	   .byte SC_F5,VK_F5
  72 0fa0 0B85     	   .byte SC_F6,VK_F6
  73 0fa2 8386     	   .byte SC_F7,VK_F7
  74 0fa4 0A87     	   .byte SC_F8,VK_F8
  75 0fa6 0188     	   .byte SC_F9,VK_F9
  76 0fa8 098A     	   .byte SC_F10,VK_F10
  77 0faa 788B     	   .byte SC_F11,VK_F11
  78 0fac 078C     	   .byte SC_F12,VK_F12
  79 0fae 7030     	   .byte SC_KP0,'0'
  80 0fb0 6931     	   .byte SC_KP1,'1'
  81 0fb2 7232     	   .byte SC_KP2,'2'
  82 0fb4 7A33     	   .byte SC_KP3,'3'
  83 0fb6 6B34     	   .byte SC_KP4,'4'
  84 0fb8 7335     	   .byte SC_KP5,'5'
  85 0fba 7436     	   .byte SC_KP6,'6'
  86 0fbc 6C37     	   .byte SC_KP7,'7'
  87 0fbe 7538     	   .byte SC_KP8,'8'
  88 0fc0 7D39     	   .byte SC_KP9,'9'
  89 0fc2 7C2A     	   .byte SC_KPMUL,'*'
  90 0fc4 4A2F     	   .byte SC_KPDIV,'/'
  91 0fc6 792B     	   .byte SC_KPPLUS,'+'
  92 0fc8 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fca 712E     	   .byte SC_KPDOT,'.'
  94 0fcc 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fce FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fd0 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fd2 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fd4 6141     	   .byte 'a','A'
 102 0fd6 6242     	   .byte 'b','B'
 103 0fd8 6343     	   .byte 'c','C'
 104 0fda 6444     	   .byte 'd','D'
 105 0fdc 6545     	   .byte 'e','E'
 106 0fde 6646     	   .byte 'f','F'
 107 0fe0 6747     	   .byte 'g','G'
 108 0fe2 6848     	   .byte 'h','H'
 109 0fe4 6949     	   .byte 'i','I'
 110 0fe6 6A4A     	   .byte 'j','J'
 111 0fe8 6B4B     	   .byte 'k','K'
 112 0fea 6C4C     	   .byte 'l','L'
 113 0fec 6D4D     	   .byte 'm','M'
 114 0fee 6E4E     	   .byte 'n','N'
 115 0ff0 6F4F     	   .byte 'o','O'
 116 0ff2 7050     	   .byte 'p','P'
 117 0ff4 7151     	   .byte 'q','Q'
 118 0ff6 7252     	   .byte 'r','R'
 119 0ff8 7353     	   .byte 's','S'
ARM GAS  forth.s 			page 52


 120 0ffa 7454     	   .byte 't','T'
 121 0ffc 7555     	   .byte 'u','U'
 122 0ffe 7656     	   .byte 'v','V'
 123 1000 7757     	   .byte 'w','W'
 124 1002 7858     	   .byte 'x','X'
 125 1004 7959     	   .byte 'y','Y'
 126 1006 7A5A     	   .byte 'z','Z'
 127 1008 3121     	   .byte '1','!'
 128 100a 3240     	   .byte '2','@'
 129 100c 3323     	   .byte '3','#'
 130 100e 3424     	   .byte '4','$'
 131 1010 3525     	   .byte '5','%'
 132 1012 365E     	   .byte '6','^'
 133 1014 3726     	   .byte '7','&'
 134 1016 382A     	   .byte '8','*'
 135 1018 3928     	   .byte '9','('
 136 101a 3029     	   .byte '0',')'
 137 101c 2D5F     	   .byte '-','_'
 138 101e 3D2B     	   .byte '=','+'
 139 1020 607E     	   .byte '`','~'
 140 1022 2722     	   .byte '\'','"'
 141 1024 2C3C     	   .byte ',','<'
 142 1026 2E3E     	   .byte '.','>'
 143 1028 2F3F     	   .byte '/','?'
 144 102a 5C7C     	   .byte '\\','|'
 145 102c 3B3A     	   .byte ';',':'
 146 102e 5B7B     	   .byte '[','{'
 147 1030 5D7D     	   .byte ']','}'
 148 1032 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1034 315C     	   .byte '1','\\'
 153 1036 3240     	   .byte '2','@'
 154 1038 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 103a 363F     	   .byte '6','?'
 158 103c 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 103e 397B     	   .byte '9','{'
 161 1040 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 1042 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 1044 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 1046 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1048 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 104a 11A3     	    .byte SC_RALT,VK_RALT
 172 104c 2F97     	    .byte SC_APPS,VK_APPS
 173 104e 758D     	    .byte SC_UP,VK_UP
 174 1050 728E     	    .byte SC_DOWN,VK_DOWN
 175 1052 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 1054 7490     	    .byte SC_RIGHT,VK_RIGHT
ARM GAS  forth.s 			page 53


 177 1056 7095     	    .byte SC_INSERT,VK_INSERT
 178 1058 6C91     	    .byte SC_HOME,VK_HOME
 179 105a 7D93     	    .byte SC_PGUP,VK_PGUP
 180 105c 7A94     	    .byte SC_PGDN,VK_PGDN
 181 105e 717F     	    .byte SC_DEL,VK_DELETE
 182 1060 6992     	    .byte SC_END,VK_END
 183 1062 4A2F     	    .byte SC_KPDIV,'/'
 184 1064 5A0D     	    .byte SC_KPENTER,'\r'
 185 1066 1200     	    .byte 0x12,0
 186 1068 7C00     	    .byte 0x7c,0
 187 106a 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 106c 6303     	   .byte 'c', VK_CTRL_C 
 193 106e 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1070 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1072 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1074 11A3     	   .byte SC_RALT,VK_RALT
 197 1076 2F97     	   .byte SC_APPS,VK_APPS
 198 1078 7095     	   .byte SC_INSERT,VK_INSERT
 199 107a 6C91     	   .byte SC_HOME,VK_HOME
 200 107c 7D93     	   .byte SC_PGUP,VK_PGUP
 201 107e 717F     	   .byte SC_DEL,VK_DELETE
 202 1080 6992     	   .byte SC_END,VK_END
 203 1082 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1084 758D     	   .byte SC_UP,VK_UP
 205 1086 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1088 728E     	   .byte SC_DOWN,VK_DOWN
 207 108a 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 108c 4A2F     	   .byte SC_KPDIV,'/'
 209 108e 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1090 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 1092 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1094 119E     	   .byte SC_LALT,VK_LALT
 213 1096 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1098 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 109a 761B     	   .byte SC_ESC,VK_ESC
 216 109c 779A     	   .byte SC_NUM,VK_NLOCK
 217 109e 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10a0 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
ARM GAS  forth.s 			page 54


  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 10a2 00BF     	    _GBL_FUNC kbd_isr 
  79 10a4 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 10ac 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 10b0 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 10b2 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 10ba D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 10be 10F0020F 	    tst r0,#KBD_TX 
  85 10c2 40F08480 	    bne send_bit  
  86 10c6 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 10c8 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 10cc 01F10102 	    add r2,r1,#1
  89 10d0 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 10d4 0029     	    cmp r1,#0
  91 10d6 15D0     	    beq start_bit 
  92 10d8 0929     	    cmp r1,#9 
  93 10da 25D0     	    beq parity_bit 
  94 10dc 0A29     	    cmp r1,#10 
  95 10de 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 10e0 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 10e4 4FEA5202 	    lsr r2,#1 
  99 10e8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 10ec 07D0     	    beq 1f 
 101 10ee 42F08002 	    orr r2,#(1<<7)
 102 10f2 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 10f6 00F10100 	    add r0,#1 
 104 10fa 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 10fe 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
ARM GAS  forth.s 			page 55


 106 1102 63E0     	    b 9f         
 107              	start_bit:
 108 1104 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1108 60D1     	    bne 9f // not a start bit 
 110 110a 80EA0000 	    eor r0,r0 
 111 110e 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 1112 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 1116 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 111a 6FF00101 	    mvn r1,#1
 115 111e 00EA0100 	    and r0,r1 // clear error flag 
 116 1122 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 1126 51E0     	    b 9f 
 118              	parity_bit:
 119 1128 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 112c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1130 4CD0     	    beq 9f  
 122 1132 01F10101 	    add r1,#1 
 123 1136 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 113a 47E0     	    b 9f      
 125              	stop_bit:
 126 113c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1140 40D0     	    beq 8f // error stop bit expected 
 128 1142 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 1146 11F0010F 	    tst r1,#1 
 130 114a 3BD0     	    beq 8f // error parity
 131 114c 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 1150 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 1154 E028     	    cmp r0,#XT_KEY
 134 1156 04D1     	    bne 1f
 135 1158 41F04001 	    orr r1,#KBD_F_XT
 136 115c 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1160 30E0     	    b 8f  
 138 1162 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1166 14D0     	    beq store_code
 140 1168 5828     	    cmp r0,#SC_CAPS
 141 116a 04D1     	    bne 1f
 142 116c 81F00401 	    eor r1,#KBD_F_CAPS
 143 1170 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1174 06E0     	    b 2f 
 145 1176 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 1180 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1184 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1188 01EA0201 	    and r1,r2
 149 118c 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 1190 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 1192 F028     	    cmp r0,#KEY_REL
 154 1194 04D1     	    bne 1f
 155              	// set release flags 
 156 1196 41F08001 	    orr r1,#KBD_F_REL 
 157 119a 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 119e 11E0     	    b 8f     
 159 11a0 0146     	1:  mov r1,r0 
 160 11a2 00B500F0 	    _CALL do_async_key 
ARM GAS  forth.s 			page 56


 160      5DF85DF8 
 160      04EB
 161 11ac 0AD1     	    bne 8f // was async key 
 162 11ae D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 11b2 04F17802 	    add r2,UP,#KBD_QUEUE
 164 11b6 1154     	    strb r1,[r2,r0]
 165 11b8 00F10100 	    add r0,#1
 166 11bc 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 11c0 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 11c4 80EA0000 	8:  eor r0,r0 
 169 11c8 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 11cc 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 11ce 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 11d2 01F10100 	    add r0,r1,#1
 182 11d6 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 11da 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 11de 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 11e2 0829     	1:  cmp r1,#8 
 187 11e4 15D0     	    beq send_parity 
 188 11e6 0929     	    cmp r1,#9 
 189 11e8 1CD0     	    beq send_stop
 190 11ea 0A29     	    cmp r1,#10
 191 11ec 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 11ee 10F0010F 	    tst r0,#1
 194 11f2 4FEA5000 	    lsr r0,#1
 195 11f6 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 11fa 02D1     	    bne 1f 
 197 11fc 4FEA0242 	    lsl r2,#16
 198 1200 05E0     	    b 2f  
 199 1202 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1206 00F10100 	    add r0,#1 
 201 120a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 120e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1210 1CE0     	    b 9f 
 204              	send_parity:
 205 1212 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 1216 10F0010F 	    tst r0,#1
 207 121a 01D0     	    beq 1f 
 208 121c 4FEA0242 	    lsl r2,#16
 209 1220 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1222 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1224 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1226 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
ARM GAS  forth.s 			page 57


 216 122a 1960     	    str r1,[r3,#GPIO_MODER]
 217 122c 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 122e 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1232 6FF00201 	    mvn r1,#KBD_TX 
 221 1236 00EA0100 	    and r0,r1 
 222 123a 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 123c 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1240 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 1244 80EA0000 	    eor r0,r0 
 226 1248 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 124c 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 124e 02B4     	    push {r1}
 238 1250 DFF85814 	    ldr r1,=async_keys
 239 1254 00B500F0 	    _CALL table_scan
 239      9EF85DF8 
 239      04EB
 240 125e 02BC     	    pop {r1}
 241 1260 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 1262 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 126c FF28     	    cmp r0,#255
 256 126e 01D1     	    bne set_async_key 
 257 1270 0020     	    movs r0,#0 
 258 1272 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1274 06B4     	    push {r1,r2}
 262 1276 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 127a DFF83414 	    ldr r1,=async_jump 
 264 127e D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1282 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1286 04E0     	    b set_reset
 268              	ctrl_key:
ARM GAS  forth.s 			page 58


 269 1288 4FF01000 	    mov r0,#KBD_F_CTRL
 270 128c 01E0     	    b set_reset 
 271              	alt_key:
 272 128e 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 1292 12F0800F 	    tst r2,#KBD_F_REL 
 275 1296 04D0     	    beq 1f 
 276 1298 6FEA0000 	    mvn r0,r0
 277 129c 02EA0002 	    and r2,r0
 278 12a0 01E0     	    b 2f
 279 12a2 42EA0002 	1:  orr r2,r0 
 280 12a6 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 12aa 5FF0FF30 	    movs r0,#-1
 282 12ae 06BC     	9:  pop {r1,r2}
 283 12b0 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 12b2 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 12b4 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 12b6 1401     	    .byte SC_LCTRL,1  // left control 
 290 12b8 1401     	    .byte SC_RCTRL,1  // right control 
 291 12ba 1102     	    .byte SC_LALT,2  // left alt 
 292 12bc 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 12be 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 12c0 00       	    .byte 0 // shift  key 
 297 12c1 03       	    .byte (ctrl_key-shift_key)/2
 298 12c2 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 12c3 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 12c4 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 12cc 1846     	    mov r0,r3 
 311 12ce 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 12d2 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 12d6 00B5FFF7 	    _CALL gpio_config
 313      2BF85DF8 
 313      04EB
 314 12e0 1846     	    mov r0,r3 
 315 12e2 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 12e6 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 12ea 00B5FFF7 	    _CALL gpio_config
 317      21F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 12f4 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
ARM GAS  forth.s 			page 59


 320 12fc 4FF40050 	    mov r0,#(2<<12)
 321 1300 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1302 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 130a 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 130e 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1310 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1312 80EA0000 	   eor r0,r0 
 328 1316 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 131a C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 131e 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1322 4FF00101 	   mov r1,#1 
 333 1326 00B5FEF7 	   _CALL nvic_set_priority
 333      BEFF5DF8 
 333      04EB
 334 1330 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1334 00B5FEF7 	   _CALL nvic_enable_irq 
 335      D0FF5DF8 
 335      04EB
 336 133e 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1340 DC0E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1350 47F8046D 	    _PUSH 
 342 1354 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 1358 06F0FC06 	    and TOS,#0xFC  
 344 135c 5CE3     	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 135e 0EB4     	    push {T1,T2,T3}
 352 1360 80EA0000 	    eor T0,T0  
 353 1364 04F17803 	    add T3,UP,#KBD_QUEUE
 354 1368 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 136c D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 1370 9142     	    cmp T1,T2 
 357 1372 06D0     	    beq 2f  
 358 1374 585C     	    ldrb T0,[T3,T1]
 359 1376 01F10101 	    add T1,#1 
 360 137a 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 137e C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 1382 0EBC     	2:  pop {T1,T2,T3}
 363 1384 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1386 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
ARM GAS  forth.s 			page 60


 367 1390 0000     	    movs T0,T0
 368 1392 F8D0     	    beq wait_code  
 369 1394 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1396 04B4     	    push {T2}
 380 1398 11F8012B 	1:  ldrb T2,[T1],#1
 381 139c 22B1     	    cbz T2,2f 
 382 139e 8242     	    cmp T2,T0
 383 13a0 02D0     	    beq 2f 
 384 13a2 01F10101 	    add T1,#1 
 385 13a6 F7E7     	    b 1b 
 386 13a8 0878     	2:  ldrb T0,[T1]
 387 13aa 0000     	    movs T0,T0 // set/reset zero flag 
 388 13ac 04BC     	9:  pop {T2}
 389 13ae 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 13b0 44130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F0000BF 
 397 13c0 47F8046D 	    _PUSH 
 398 13c4 86EA0606 	    eor TOS,TOS 
 399 13c8 BA49     	    ldr T1,=sc_ascii // translation table
 400 13ca 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 13ce 4FF04002 	    mov T2,#KBD_F_XT 
 402 13d2 1042     	    tst T0,T2
 403 13d4 00D0     	    beq 1f
 404 13d6 B849     	    ldr T1,=extended // extended code translation
 405 13d8 00B5FFF7 	1:  _CALL keycode
 405      C0FF5DF8 
 405      04EB
 406 13e2 98B1     	    cbz T0,inkey_exit
 407 13e4 E128     	    cmp T0,#XT2_KEY // pause 
 408 13e6 12D0     	    beq pause_key
 409 13e8 00B5FFF7 	    _CALL table_scan 
 409      D4FF5DF8 
 409      04EB
 410 13f2 0646     	    mov TOS,T0
 411 13f4 00B500F0 	    _CALL do_modifiers
 411      14F85DF8 
 411      04EB
 412 13fe 032E     	    cmp TOS,#VK_CTRL_C 
 413 1400 3EF468AE 	    beq user_reboot 
 414 1404 47F8046D 	    _PUSH 
ARM GAS  forth.s 			page 61


 415 1408 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 140c 04E3     	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 140e 4FF00701 	    mov T1,#7 
 420 1412 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 141c 0139     	    subs T1,#1
 422 141e F8D1     	    bne 1b 
 423 1420 FAE2     	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1422 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1426 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 142a 06D1     	    bne shift_down 
 431 142c 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1430 06D1     	    bne altchar_down 
 433 1432 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1436 06D1     	    bne ctrl_down 
 435 1438 0DE0     	    b 9f 
 436              	shift_down:
 437 143a 3046     	    mov T0,TOS 
 438 143c 9F49     	    ldr T1,=shifted 
 439 143e 04E0     	    b 8f 
 440              	altchar_down:
 441 1440 3046     	    mov T0,TOS 
 442 1442 9F49     	    ldr T1,=altchar
 443 1444 01E0     	    b 8f
 444              	ctrl_down:
 445 1446 3046     	    mov T0,TOS 
 446 1448 9E49     	    ldr T1,=controls 
 447 144a 00B5FFF7 	8:  _CALL table_scan
 447      A3FF5DF8 
 447      04EB
 448 1454 0646     	    mov TOS,T0
 449 1456 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1460 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1462 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1466 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 146a 0BD0     	    beq 9f 
 456 146c 412E     	    cmp TOS,#'A'
 457 146e 09D4     	    bmi 9f 
 458 1470 5B2E     	    cmp TOS,#'Z'+1 
 459 1472 03D4     	    bmi 3f 
 460 1474 612E     	    cmp TOS,#'a'
 461 1476 05D4     	    bmi 9f 
 462 1478 7B2E     	    cmp TOS,#'z'+1
 463 147a 03D5     	    bpl 9f 
 464 147c 4FF02000 	3:  mov T0,#(1<<5)
 465 1480 86EA0006 	    eor TOS,T0 
ARM GAS  forth.s 			page 62


 466 1484 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1486 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1488 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 148a 0128     	    cmp r0,ST_PREVID 
 484 148c FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 148e 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1492 00B5FEF7 	    _CALL nvic_disable_irq
 487      36FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 149c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 14a4 1846     	    mov r0,r3 
 491 14a6 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 14aa 4FF01102 	    mov r2,#OUTPUT_OD
 493 14ae 00B5FEF7 	    _CALL gpio_config 
 493      3FFF5DF8 
 493      04EB
 494 14b8 1846     	    mov r0,r3 
 495 14ba 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 14be 82EA0202 	    eor r2,r2 
 497 14c2 00B5FEF7 	    _CALL gpio_out 
 497      8BFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 14cc 4FF4E150 	    mov r0,#150*48
 500 14d0 0138     	1:  subs r0,#1 
 501 14d2 FDD1     	    bne 1b
 502 14d4 01BC     	    pop {r0}
 503 14d6 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 14da D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 14de 40F00200 	    orr r0,#KBD_TX 
 506 14e2 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 14e6 80EA0000 	    eor r0,r0 
 508 14ea 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 14ee 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 14f2 1846     	    mov r0,r3 
 513 14f4 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 14f8 4FF01102 	    mov r2,#OUTPUT_OD 
 515 14fc 00B5FEF7 	    _CALL gpio_config 
ARM GAS  forth.s 			page 63


 515      18FF5DF8 
 515      04EB
 516 1506 1846     	    mov r0,r3 
 517 1508 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 150c 82EA0202 	    eor r2,r2 
 519 1510 00B5FEF7 	    _CALL gpio_out
 519      64FF5DF8 
 519      04EB
 520              	// release clock line 
 521 151a 1846     	    mov r0,r3 
 522 151c 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1520 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1524 00B5FEF7 	    _CALL gpio_config
 524      04FF5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 152e 4FF00A00 	    mov r0,#10
 528 1532 E060     	    str r0,[UP,#CD_TIMER]
 529 1534 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1536 20B1     	    cbz r0, 4f 
 531 1538 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 153c 10F0020F 	    tst r0,#KBD_TX
 533 1540 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1542 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1546 00B5FEF7 	    _CALL nvic_enable_irq
 536      C7FE5DF8 
 536      04EB
 537 1550 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1554 20F00201 	    bic r1,r0,#KBD_TX
 539 1558 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 155c 00F00200 	    and r0,#KBD_TX
 541 1560 48B1     	    cbz r0, 5f
 542 1562 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1564 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1568 1960     	    str r1,[r3,#GPIO_MODER]
 545 156a 80EA0000 	    eor r0,r0 
 546 156e 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1572 6FEA0000 	    mvn r0,r0   
 548 1576 0EBC     	5:  pop {r1,r2,r3}
 549 1578 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 157a 80EA0000 	    eor T0,T0 
 555 157e C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 1582 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 1586 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 158a 6FF00301 	    mvn T1,#3
 559 158e 00EA0100 	    and T0,T1 
 560 1592 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1596 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
ARM GAS  forth.s 			page 64


 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1598 B4130000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 15a4 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 15a8 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 15b2 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 15b4 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 15be 00B5FFF7 	    _CALL wait_code 
 572      E1FE5DF8 
 572      04EB
 573 15c8 FE28     	    cmp r0,KBD_CMD_RESEND
 574 15ca EBD0     	    beq 1b 
 575 15cc 4FF4FA70 	    mov T0,#500 
 576 15d0 E060     	    str T0,[UP,#CD_TIMER]
 577 15d2 00B5FFF7 	2:  _CALL keycode
 577      C3FE5DF8 
 577      04EB
 578 15dc 10B9     	    cbnz T0,3f
 579 15de E068     	    ldr T0,[UP,#CD_TIMER]
 580 15e0 0028     	    cmp T0,#0 
 581 15e2 F6D1     	    bne 2b 
 582 15e4 47F8046D 	3:  _PUSH 
 583 15e8 0646     	    mov TOS,T0  
 584 15ea 15E2     	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 15ec 9C150000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 592 15f8 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BEFF5DF8 
 592      04EB
 593 1602 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1606 00B5FFF7 	    _CALL kbd_send 
 594      3DFF5DF8 
 594      04EB
 595 1610 00B5FFF7 	2:  _CALL wait_code 
 595      B8FE5DF8 
 595      04EB
 596 161a FE28     	    cmp T0,#KBD_CMD_RESEND
 597 161c ECD0     	    beq 1b
 598 161e FA28     	    cmp T0,#KBD_ACK  
 599 1620 F6D1     	    bne 2b 
 600 1622 3046     	2:  mov T0,TOS 
 601 1624 00F00700 	    and T0,#7 
 602 1628 00B5FFF7 	    _CALL kbd_send 
 602      2CFF5DF8 
ARM GAS  forth.s 			page 65


 602      04EB
 603 1632 00B5FFF7 	3:  _CALL wait_code 
 603      A7FE5DF8 
 603      04EB
 604 163c FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 163e F0D0     	    beq 2b
 606 1640 FA28     	    cmp T0,#KBD_ACK 
 607 1642 F6D1     	    bne 3b  
 608 1644 57F8046B 	    _POP 
 609 1648 E6E1     	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 164a F0150000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      4400
 617 1658 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 165c 10F0010F 	    tst T0,#1
 619 1660 00D1     	    bne 1f 
 620 1662 D9E1     	    _NEXT 
 621 1664 47F8046D 	1: _PUSH 
 622 1668 6FF00101 	    mvn T1,#1 
 623 166c 00EA0100 	    and T0,T1 
 624 1670 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 1674 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1678 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105BBE7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1680 4E160000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      590000BF 
 634 1690 504700BF 	    _NEST
 635 1694 59160000 	1:  _ADR CAPS_LED  
 636 1698 C1130000 	    _ADR PS2_QKEY 
 637 169c 9D1E0000 	    _ADR QDUP 
 638 16a0 D71B0000 	    _QBRAN 1b  
 638      94160000 
 639 16a8 1F1A0000 	    _UNNEST 
 640 16ac B2120000 	
 640      C0120000 
 640      200F0000 
 640      44100000 
 640      D40F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
ARM GAS  forth.s 			page 66


   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16cc 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 16d4 0346     	    mov r3,r0 
  42 16d6 4FF00401 	    mov r1,#PIN_F_SC 
  43 16da 4FF00102 	    mov r2,#OUTPUT_PP
  44 16de 00B5FEF7 	    _CALL gpio_config 
  44      27FE5DF8 
  44      04EB
  45 16e8 1846     	    mov r0,r3 
  46 16ea 4FF00401 	    mov r1,#PIN_F_SC  
  47 16ee 4FF00102 	    MOV r2,#1
  48 16f2 00B5FEF7 	    _CALL gpio_out 
  48      73FE5DF8 
  48      04EB
  49 16fc 1846     	    mov r0,r3 
  50 16fe 4FF00501 	    mov r1,#PIN_SCK  
  51 1702 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 1706 00B5FEF7 	    _CALL gpio_config 
  52      13FE5DF8 
  52      04EB
  53 1710 1846     	    mov r0,r3 
  54 1712 4FF00701 	    mov r1,#PIN_MOSI 
ARM GAS  forth.s 			page 67


  55 1716 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 171a 00B5FEF7 	    _CALL gpio_config 
  56      09FE5DF8 
  56      04EB
  57 1724 1846     	    mov r0,r3
  58 1726 4FF00601 	    mov r1,#PIN_MISO
  59 172a 4FF00202 	    mov r2,#INPUT_AFO  
  60 172e 00B5FEF7 	    _CALL gpio_config
  60      FFFD5DF8 
  60      04EB
  61 1738 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  61      C4F20200 
  62 1740 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  63 1742 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  64 1746 4164     	    str r1,[r0,#RCC_APB2ENR]
  65 1748 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  65      C4F20100 
  66 1750 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  67 1754 0180     	    strh r1,[r0,#SPI_CR1]
  68 1756 196A     	    ldr r1,[r3,#GPIO_AFRL]
  69 1758 80EA0000 	    eor r0,r0 
  70 175c C5F25050 	    movt r0,#0x5550 
  71 1760 40EA0100 	    orr r0,r1 
  72 1764 1862     	    str r0,[r3,#GPIO_AFRL]
  73 1766 7047     	    _RET 
  74              	
  75              	
  76              	/**********************
  77              	    CHIP-SEL ( -- )
  78              	    drive F_SC low 
  79              	*********************/
  80 1768 84160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  80      08434849 
  80      502D5345 
  80      4C0000BF 
  81 1778 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  81      C4F20200 
  82 1780 4FF00401 	    mov r1,#PIN_F_SC 
  83 1784 4FF00002 	    mov r2,#0 
  84 1788 00B5FEF7 	    _CALL gpio_out 
  84      28FE5DF8 
  84      04EB
  85 1792 41E1     	    _NEXT 
  86              	
  87              	
  88              	/*********************
  89              	    CHIP-DSEL 
  90              	    drive F_SC high 
  91              	*********************/
  92 1794 6C170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  92      09434849 
  92      502D4453 
  92      454C00BF 
  93 17a4 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  93      C4F20100 
  94 17ac 0189     	1:  ldrh T1,[T0,#SPI_SR]
  95 17ae 11F0800F 	    tst T1,(1<<7) // BSY 
ARM GAS  forth.s 			page 68


  96 17b2 FBD1     	    bne 1b 
  97 17b4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  97      C4F20200 
  98 17bc 4FF00401 	    mov r1,#PIN_F_SC 
  99 17c0 4FF00102 	    mov r2,#1 
 100 17c4 00B5FEF7 	    _CALL gpio_out 
 100      0AFE5DF8 
 100      04EB
 101 17ce 23E1     	    _NEXT 
 102              	
 103              	
 104              	/****************************
 105              	    RD-BYTE ( -- )
 106              	    read flash byte 
 107              	***************************/
 108 17d0 98170000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 108      0752442D 
 108      42595445 
 109 17dc 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 109      C4F20100 
 110 17e4 0189     	0:  ldrh T1,[T0,#SPI_SR]
 111 17e6 11F0020F 	    tst T1,#(1<<1) //TXE
 112 17ea FBD0     	    beq 0b 
 113 17ec 6FF00001 	    mvn T1,#0 
 114 17f0 0173     	    strb T1,[T0,#SPI_DR]
 115 17f2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 116 17f4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 117 17f8 FBD0     	    beq 1b     
 118              	2:  
 119 17fa 47F8046D 	    _PUSH 
 120 17fe 067B     	    ldrb TOS,[T0,#SPI_DR]
 121 1800 0AE1     	    _NEXT 
 122              	
 123              	
 124              	/*********************************
 125              	    WR-BYTE  ( c -- )
 126              	    write flash byte 
 127              	*************************/
 128 1802 D4170000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 128      0757522D 
 128      42595445 
 128      00BF
 129 1810 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 129      C4F20100 
 130 1818 0189     	0:  ldrh T1,[T0,#SPI_SR]
 131 181a 11F0020F 	    tst T1,#(1<<1) //TXE
 132 181e FBD0     	    beq 0b 
 133 1820 0673     	    strb TOS,[T0,#SPI_DR]
 134 1822 0189     	1:  ldrh T1,[T0,#SPI_SR]
 135 1824 11F0010F 	    tst T1,#(1<<0) // RXNE  
 136 1828 FBD0     	    beq 1b 
 137 182a 8189     	    ldrh T1,[T0,#SPI_DR]
 138 182c 57F8046B 	    _POP 
 139 1830 F2E0     	    _NEXT 
 140              	
 141              	/*************************
 142              	    WR-ENBL ( -- )
ARM GAS  forth.s 			page 69


 143              	    set WEL flag in SR0 
 144              	************************/
 145 1832 06180000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 145      0757522D 
 145      454E424C 
 145      00BF
 146 1840 504700BF 	    _NEST 
 147 1844 79170000 	    _ADR CHIP_SEL 
 148 1848 971B0000 	    _DOLIT 6 
 148      06000000 
 149 1850 11180000 	    _ADR WR_BYTE 
 150 1854 A5170000 	    _ADR CHIP_DSEL 
 151 1858 1F1A0000 	    _UNNEST 
 152              	
 153              	/********************************
 154              	    RD-SR ( n -- c )
 155              	    read status register  
 156              	********************************/
 157 185c 36180000 	    _HEADER RD_SR,5,"RD-SR"
 157      0552442D 
 157      535200BF 
 158 1868 504700BF 	    _NEST
 159 186c 79170000 	    _ADR CHIP_SEL  
 160 1870 971B0000 	    _DOLIT sr_cmd 
 160      90180000 
 161 1878 8D1D0000 	    _ADR PLUS 
 162 187c 3D1C0000 	    _ADR CAT
 163 1880 11180000 	    _ADR WR_BYTE
 164 1884 DD170000 	    _ADR RD_BYTE
 165 1888 A5170000 	    _ADR CHIP_DSEL  
 166 188c 1F1A0000 	    _UNNEST 
 167 1890 053515   	sr_cmd: .byte 5,0x35,0x15      
 168              	
 169              	/*********************************
 170              	    SEND-ADR ( a -- )
 171              	    send 24 bits address 
 172              	*******************************/
 173 1893 60180000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 173      0853454E 
 173      442D4144 
 173      52
 174 18a0 504700BF 	    _NEST 
 175 18a4 C91C0000 	    _ADR DUPP 
 176 18a8 971B0000 	    _DOLIT 16
 176      10000000 
 177 18b0 651D0000 	    _ADR RSHIFT 
 178 18b4 11180000 	    _ADR WR_BYTE 
 179 18b8 C91C0000 	    _ADR DUPP
 180 18bc 971B0000 	    _DOLIT 8 
 180      08000000 
 181 18c4 651D0000 	    _ADR RSHIFT 
 182 18c8 11180000 	    _ADR WR_BYTE 
 183 18cc 11180000 	    _ADR WR_BYTE 
 184 18d0 1F1A0000 	    _UNNEST 
 185              	
 186              	/**********************************
 187              	    WAIT-DONE ( -- )
ARM GAS  forth.s 			page 70


 188              	    wait write operation completed 
 189              	**********************************/
 190 18d4 97180000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 190      09574149 
 190      542D444F 
 190      4E4500BF 
 191 18e4 504700BF 	    _NEST 
 192 18e8 971B0000 	1:  _DOLIT 0 
 192      00000000 
 193 18f0 69180000 	    _ADR RD_SR 
 194 18f4 971B0000 	    _DOLIT 3 
 194      03000000 
 195 18fc 0D1D0000 	    _ADR ANDD 
 196 1900 D71B0000 	    _QBRAN 2f
 196      10190000 
 197 1908 EB1B0000 	    _BRAN 1b
 197      E8180000 
 198 1910 1F1A0000 	2:  _UNNEST 
 199              	
 200              	
 201              	/****************************
 202              	   ERASE-SEC ( a -- )
 203              	   erase 4Ko sector 
 204              	***************************/
 205 1914 D8180000 	    _HEADER ERASE_SEC,9,"ERASE-SEC"
 205      09455241 
 205      53452D53 
 205      454300BF 
 206 1924 504700BF 	    _NEST 
 207 1928 41180000 	    _ADR WR_ENBL
 208 192c 79170000 	    _ADR CHIP_SEL 
 209 1930 971B0000 	    _DOLIT 0x20 
 209      20000000 
 210 1938 11180000 	    _ADR WR_BYTE 
 211 193c A1180000 	    _ADR SEND_ADR
 212 1940 A5170000 	    _ADR CHIP_DSEL 
 213 1944 E5180000 	    _ADR WAIT_DONE 
 214 1948 1F1A0000 	    _UNNEST 
 215              	
 216              	/******************************
 217              	    RD-BLK ( buff n a --  )
 218              	    read n bytes in buff 
 219              	    starting at address a  
 220              	******************************/
 221 194c 18190000 	    _HEADER RD_BLK,6,"RD-BLK"
 221      0652442D 
 221      424C4B00 
 222 1958 504700BF 	    _NEST
 223 195c 79170000 	    _ADR CHIP_SEL 
 224 1960 971B0000 	    _DOLIT 3 
 224      03000000 
 225 1968 11180000 	    _ADR WR_BYTE 
 226 196c A1180000 	    _ADR SEND_ADR
 227 1970 DD170000 	    _ADR RD_BYTE 
 228 1974 B91C0000 	    _ADR DROP   
 229 1978 711C0000 	    _ADR TOR   
 230 197c EB1B0000 	    _BRAN 2f
ARM GAS  forth.s 			page 71


 230      94190000 
 231 1984 DD170000 	1:  _ADR RD_BYTE
 232 1988 ED1C0000 	    _ADR OVER 
 233 198c 291C0000 	    _ADR CSTOR
 234 1990 E91D0000 	    _ADR ONEP 
 235 1994 B91B0000 	2:  _DONXT 1b
 235      84190000 
 236 199c B91C0000 	    _ADR DROP 
 237 19a0 A5170000 	    _ADR CHIP_DSEL 
 238 19a4 1F1A0000 	    _UNNEST 
 239              	
 240              	/*****************************
 241              	    WR-BLK ( buff n a -- )
 242              	    write up to 256 bytes 
 243              	    in erased flash
 244              	****************************/
 245 19a8 50190000 	    _HEADER WR_BLK,6,"WR-BLK"
 245      0657522D 
 245      424C4B00 
 246 19b4 504700BF 	    _NEST 
 247 19b8 41180000 	    _ADR WR_ENBL
 248 19bc 79170000 	    _ADR CHIP_SEL
 249 19c0 971B0000 	    _DOLIT 2 
 249      02000000 
 250 19c8 11180000 	    _ADR WR_BYTE 
 251 19cc A1180000 	    _ADR SEND_ADR
 252 19d0 711C0000 	    _ADR TOR
 253 19d4 EB1B0000 	    _BRAN 2f 
 253      EC190000 
 254 19dc C91C0000 	1:  _ADR DUPP 
 255 19e0 3D1C0000 	    _ADR CAT 
 256 19e4 11180000 	    _ADR WR_BYTE 
 257 19e8 E91D0000 	    _ADR ONEP
 258 19ec B91B0000 	2:  _DONXT 1b 
 258      DC190000 
 259 19f4 B91C0000 	    _ADR DROP
 260 19f8 A5170000 	    _ADR CHIP_DSEL
 261 19fc E5180000 	    _ADR WAIT_DONE 
 262 1a00 1F1A0000 	    _UNNEST
 263              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
ARM GAS  forth.s 			page 72


  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/*****************************************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
ARM GAS  forth.s 			page 73


  75              	
  76              	/***********************************
  77              	//  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// PUSH TOS, to be used in colon definition 
  83              	TPUSH:
  84 1a04 47F8046D 		_PUSH
  85 1a08 06E0     		_NEXT
  86              	
  87              	// POP TOS, to be used in colon defintion  
  88              	TPOP:
  89 1a0a 57F8046B 		_POP 
  90 1a0e 03E0     		_NEXT
  91              	
  92              	// hi level word enter 
  93              	NEST: 
  94 1a10 48F804CD 		STMFD	RSP!,{IP}
  95 1a14 05F1030C 		ADD IP,WP,#3
  96              	// inner interprer
  97              	INEXT: 
  98 1a18 5CF8045B 		LDR WP,[IP],#4 
  99 1a1c 2847     		BX WP  
 100              	UNNEST:
 101 1a1e 58F804CB 		LDMFD RSP!,{IP}
 102 1a22 5CF8045B 		LDR WP,[IP],#4 
 103 1a26 2847     		BX WP  
 104              	
 105              		.p2align 2 
 106              	
 107              	// compile "BX 	INX" 
 108              	// this is the only way 
 109              	// a colon defintion in RAM 
 110              	// can jump to NEST
 111              	// INX is initialized to NEST address 
 112              	// and must be preserved   
 113              	COMPI_NEST:
 114 1a28 04F14401 		add T1,UP,#USER_CTOP 
 115 1a2c 0968     		ldr T1,[T1]
 116 1a2e 44F25072 		mov T2,#0x4700+(10<<3)
 117 1a32 21F8022B 		strh T2,[T1],#2
 118 1a36 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 119 1a3a 21F8022B 		strh T2,[T1],#2 
 120 1a3e 04F14402 		add T2,UP,#USER_CTOP 
 121 1a42 1160     		str T1,[T2]
 122 1a44 E8E7     		_NEXT  
 123              	
 124              	// ' STDIN 
 125              	// stdin vector 
 126              	TSTDIN:
 127 1a46 47F8046D 		_PUSH 
 128 1a4a 04F11406 		ADD TOS,UP,#STDIN 
 129 1a4e E3E7     		_NEXT 
 130              	
 131              	// ' STDOUT 
ARM GAS  forth.s 			page 74


 132              	// stdout vector 
 133              	TSTDOUT:
 134 1a50 47F8046D 		_PUSH 
 135 1a54 04F11806 		ADD TOS,UP,#STDOUT
 136 1a58 DEE7     		_NEXT 
 137              		
 138              	/********************************************
 139              		KEY? ( -- c T | F )
 140              		check if available character 
 141              	********************************************/
 142 1a5a AC190000 		_HEADER QKEY,4,"KEY?"
 142      044B4559 
 142      3F00
 143              	QRX: 
 144 1a64 504700BF 		_NEST 
 145 1a68 471A0000 		_ADR TSTDIN // ' STDIN 
 146 1a6c 75240000 		_ADR ATEXE
 147 1a70 1F1A0000 		_UNNEST 
 148              	
 149              	/********************************************
 150              	    KEY	 ( -- c )
 151              	 	Wait for and return an input character.
 152              	********************************************/
 153 1a74 5E1A0000 		_HEADER KEY,3,"KEY"
 153      034B4559 
 154 1a7c 504700BF 		_NEST
 155              	KEY1:
 156 1a80 59160000 		_ADR CAPS_LED 
 157 1a84 651A0000 		_ADR	QRX
 158 1a88 D71B0000 		_QBRAN	KEY1
 158      801A0000 
 159 1a90 1F1A0000 		_UNNEST
 160              	
 161              	/**********************************************
 162              		EMIT ( c -- )
 163              		transmit a character to console 
 164              	**********************************************/
 165 1a94 781A0000 		_HEADER EMIT,4,"EMIT"
 165      04454D49 
 165      540000BF 
 166              	TECHO:
 167 1aa0 504700BF 		_NEST 
 168 1aa4 511A0000 		_ADR TSTDOUT 
 169 1aa8 75240000 		_ADR ATEXE 
 170 1aac 1F1A0000 		_UNNEST 
 171              	
 172              	
 173              	/************************************************
 174              	 GET-IP ( n - c )
 175              	 return interrupt priority of IRQn 
 176              	************************************************/
 177              	/*
 178              		_HEADER GETIP,6,"GET-IP" 
 179              		_NEST 
 180              		_ADR DUPP 
 181              		_ADR ZLESS
 182              		_QBRAN 1f 
ARM GAS  forth.s 			page 75


 183              		_DOLIT 15
 184              		_ADR ANDD
 185              		_DOLIT 4
 186              		_ADR SUBB  
 187              		_DOLIT 0xE000ED18 
 188              		_BRAN 2f 
 189              	1:	_DOLIT 0xE000E400 
 190              	2:	_ADR PLUS 
 191              		_ADR CAT
 192              		_DOLIT 4 
 193              		_ADR RSHIFT 
 194              		_UNNEST 
 195              	*/
 196              	
 197              	/***********************************************
 198              	 RANDOM ( n+ -- {0..n+ - 1} )
 199              	 return pseudo random number 
 200              	 REF: https://en.wikipedia.org/wiki/Xorshift
 201              	************************************************/
 202 1ab0 981A0000 		_HEADER RAND,6,"RANDOM"
 202      0652414E 
 202      444F4D00 
 203 1abc 504700BF 		_NEST
 204 1ac0 551F0000 		_ADR ABSS   
 205 1ac4 95200000 		_ADR SEED 
 206 1ac8 1D1C0000 		_ADR AT 
 207 1acc C91C0000 		_ADR DUPP 
 208 1ad0 971B0000 		_DOLIT 13
 208      0D000000 
 209 1ad8 7D1D0000 		_ADR LSHIFT 
 210 1adc 351D0000 		_ADR XORR  
 211 1ae0 C91C0000 		_ADR DUPP 
 212 1ae4 971B0000 		_DOLIT 17 
 212      11000000 
 213 1aec 651D0000 		_ADR RSHIFT 
 214 1af0 351D0000 		_ADR XORR 
 215 1af4 C91C0000 		_ADR DUPP
 216 1af8 971B0000 		_DOLIT 5 
 216      05000000 
 217 1b00 7D1D0000 		_ADR LSHIFT 
 218 1b04 351D0000 		_ADR XORR  
 219 1b08 C91C0000 		_ADR DUPP 
 220 1b0c 95200000 		_ADR SEED 
 221 1b10 091C0000 		_ADR STORE 
 222 1b14 971B0000 		_DOLIT 0x7FFFFFFF
 222      FFFFFF7F 
 223 1b1c 0D1D0000 		_ADR ANDD 
 224 1b20 D91C0000 		_ADR SWAP 
 225 1b24 F9220000 		_ADR MODD 
 226 1b28 1F1A0000 		_UNNEST 
 227              	
 228              	
 229              	/****************************************
 230              	 PAUSE ( u -- ) 
 231              	 suspend execution for u milliseconds
 232              	****************************************/
 233 1b2c B41A0000 		_HEADER PAUSE,5,"PAUSE"
ARM GAS  forth.s 			page 76


 233      05504155 
 233      534500BF 
 234 1b38 504700BF 		_NEST 
 235 1b3c BD200000 		_ADR TIMER 
 236 1b40 091C0000 		_ADR STORE 
 237              	PAUSE_LOOP:
 238 1b44 BD200000 		_ADR TIMER 
 239 1b48 1D1C0000 		_ADR AT 
 240 1b4c D71B0000 		_QBRAN PAUSE_EXIT 
 240      5C1B0000 
 241 1b54 EB1B0000 		_BRAN PAUSE_LOOP 
 241      441B0000 
 242              	PAUSE_EXIT: 		
 243 1b5c 1F1A0000 		_UNNEST 
 244              	
 245              	/******************************************
 246              	  ULED ( T|F -- )
 247              	  control user LED, -1 ON, 0 OFF 
 248              	*******************************************/
 249 1b60 301B0000 		_HEADER ULED,4,"ULED"
 249      04554C45 
 249      440000BF 
 250 1b6c 4FF40050 		mov T0,#(1<<LED_PIN)
 251 1b70 4FF40061 		_MOV32 T1,LED_GPIO 
 251      C4F20201 
 252 1b78 3600     		movs TOS,TOS 
 253 1b7a 57F8046B 		_POP
 254 1b7e 03D0     		beq ULED_OFF
 255 1b80 4FEA0040 		lsl T0,#16 
 256 1b84 8861     		str T0,[T1,#GPIO_BSRR]
 257 1b86 47E7     		_NEXT 
 258              	ULED_OFF:
 259 1b88 8861     		str T0,[T1,#GPIO_BSRR]
 260 1b8a 45E7     		_NEXT    
 261              	
 262              	
 263              		
 264              	/***************
 265              	//  The kernel
 266              	***************/
 267              	
 268              	/********************
 269              	    NOP	( -- )
 270              	 	do nothing.
 271              	*********************/
 272 1b8c 641B0000 		_HEADER NOP,3,"NOP"
 272      034E4F50 
 273 1b94 40E7     		_NEXT 
 274              	 
 275              	/********************
 276              	    doLIT	( -- w )
 277              	 	Push an inline literal.
 278              	hidden word used by compiler 
 279              	*********************/
 280              	DOLIT:
 281 1b96 47F8046D 		_PUSH				//  store TOS on data stack
 282 1b9a 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
ARM GAS  forth.s 			page 77


 283 1b9e 3BE7     		_NEXT 
 284              	
 285              	/*******************************
 286              	    EXECUTE	( ca -- )
 287              	 	Execute the word at ca.
 288              	*******************************/
 289 1ba0 901B0000 		_HEADER EXECU,7,"EXECUTE"
 289      07455845 
 289      43555445 
 290 1bac 46F00105 		ORR	WP,TOS,#1 
 291 1bb0 57F8046B 		_POP
 292 1bb4 2847     		BX WP 
 293 1bb6 2FE7     		_NEXT 
 294              	
 295              	/**********************************************************
 296              	    donext	( -- ) counter on R:
 297              	 	Run time code for the single index loop.
 298              	 	: next ( -- ) \ hilevel model
 299              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 300              	hidden word used by compiler 	  
 301              	*********************************************************/
 302              	DONXT:
 303 1bb8 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 304 1bbc 22B9     		CBNZ T2,NEXT1 
 305              		/* loop done */
 306 1bbe 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 307 1bc2 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 308 1bc6 27E7     		_NEXT
 309              	NEXT1:
 310              		/* decrement loop counter */
 311 1bc8 A2F10102 		SUB	T2,T2,#1
 312 1bcc C8F80020 		STR	T2,[RSP]
 313 1bd0 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 314 1bd4 20E7     		_NEXT 
 315              	
 316              	/**************************************
 317              	    ?branch	( f -- )
 318              	 	Branch if flag is zero.
 319              	hiddend word used by compiler
 320              	**************************************/
 321              	QBRAN:
 322 1bd6 3600     		MOVS	TOS,TOS
 323 1bd8 57F8046B 		_POP
 324 1bdc 02D1     		BNE	QBRAN1
 325 1bde DCF800C0 		LDR	IP,[IP]
 326 1be2 19E7     		_NEXT
 327              	QBRAN1:
 328 1be4 0CF1040C 	 	ADD	IP,IP,#4
 329 1be8 16E7     		_NEXT
 330              	
 331              	/***********************************
 332              	    branch	( -- )
 333              	 	Branch to an inline address.
 334              	hidden word used by compiler 
 335              	***********************************/
 336              	BRAN:
 337 1bea DCF800C0 		LDR	IP,[IP]
ARM GAS  forth.s 			page 78


 338 1bee 13E7     		_NEXT
 339              	
 340              	/******************************************
 341              	    EXIT	(  -- )
 342              	 	Exit the currently executing command.
 343              	******************************************/
 344 1bf0 A41B0000 		_HEADER EXIT,4,"EXIT"
 344      04455849 
 344      540000BF 
 345 1bfc 1F1A0000 		_UNNEST
 346              	
 347              	/***********************************
 348              	    !	   ( w a -- )
 349              	 	Pop the data stack to memory.
 350              	************************************/
 351 1c00 F41B0000 		_HEADER STORE,1,"!"
 351      012100BF 
 352 1c08 57F8045B 		LDR	WP,[DSP],#4
 353 1c0c 3560     		STR	WP,[TOS]
 354 1c0e 57F8046B 		_POP
 355 1c12 01E7     		_NEXT 
 356              	
 357              	/********************************************
 358              	    @	   ( a -- w )
 359              	 	Push memory location to the data stack.
 360              	*********************************************/
 361 1c14 041C0000 		_HEADER AT,1,"@"
 361      014000BF 
 362 1c1c 3668     		LDR	TOS,[TOS]
 363 1c1e FBE6     		_NEXT 
 364              	
 365              	/*******************************************
 366              	    C!	  ( c b -- )
 367              	 	Pop the data stack to byte memory.
 368              	*******************************************/
 369 1c20 181C0000 		_HEADER CSTOR,2,"C!"
 369      02432100 
 370 1c28 57F8045B 		LDR	WP,[DSP],#4
 371 1c2c 3570     		STRB WP,[TOS]
 372 1c2e 57F8046B 		_POP
 373 1c32 F1E6     		_NEXT
 374              	
 375              	/*********************************************
 376              	    C@	  ( b -- c )
 377              	 	Push byte memory location to the data stack.
 378              	**********************************************/
 379 1c34 241C0000 		_HEADER CAT,2,"C@"
 379      02434000 
 380 1c3c 3678     		LDRB	TOS,[TOS]
 381 1c3e EBE6     		_NEXT 
 382              	
 383              	/*********************************************
 384              	    R>	  ( -- w )
 385              	 	Pop the return stack to the data stack.
 386              	**********************************************/
 387 1c40 381C0000 		_HEADER RFROM,2,"R>"
 387      02523E00 
ARM GAS  forth.s 			page 79


 388 1c48 47F8046D 		_PUSH
 389 1c4c 58F8046B 		LDR	TOS,[RSP],#4
 390 1c50 E2E6     		_NEXT 
 391              	
 392              	/************************************************
 393              	    R@	  ( -- w )
 394              	 	Copy top of return stack to the data stack.
 395              	************************************************/
 396 1c52 441C0000 		_HEADER RAT,2,"R@"
 396      02524000 
 396      00BF
 397 1c5c 47F8046D 		_PUSH
 398 1c60 D8F80060 		LDR	TOS,[RSP]
 399 1c64 D8E6     		_NEXT 
 400              	
 401              	/***********************************************
 402              	    >R	  ( w -- )
 403              	 	Push the data stack to the return stack.
 404              	************************************************/
 405 1c66 561C0000 		_HEADER TOR,2,">R"
 405      023E5200 
 405      00BF
 406 1c70 48F8046D 		STR	TOS,[RSP,#-4]!
 407 1c74 57F8046B 		_POP
 408 1c78 CEE6     		_NEXT
 409              	
 410              	/*******************************
 411              	//	RP! ( u -- )
 412              	// initialize RPP with u 
 413              	*******************************/
 414 1c7a 6A1C0000 		_HEADER RPSTOR,3,"RP!"
 414      03525021 
 414      00BF
 415 1c84 B046     		MOV RSP,TOS 
 416 1c86 57F8046B 		_POP  
 417 1c8a C5E6     		_NEXT 
 418              	
 419              	/********************************
 420              		SP! ( u -- )
 421              	 initialize SPP with u 
 422              	********************************/
 423 1c8c 7E1C0000 		_HEADER SPSTOR,3,"SP!"
 423      03535021 
 424 1c94 3746     		MOV DSP,TOS 
 425 1c96 86EA0606 		EOR TOS,TOS,TOS 
 426 1c9a BDE6     		_NEXT 
 427              	
 428              	/**************************************
 429              	    SP@	 ( -- a )
 430              	 	Push the current data stack pointer.
 431              	***************************************/
 432 1c9c 901C0000 		_HEADER SPAT,3,"SP@"
 432      03535040 
 433 1ca4 47F8046D 		_PUSH
 434 1ca8 3E46     		MOV	TOS,DSP
 435 1caa B5E6     		_NEXT
 436              	
ARM GAS  forth.s 			page 80


 437              	/********************************
 438              	    DROP	( w -- )
 439              	 	Discard top stack item.
 440              	********************************/
 441 1cac A01C0000 		_HEADER DROP,4,"DROP"
 441      0444524F 
 441      500000BF 
 442 1cb8 57F8046B 		_POP
 443 1cbc ACE6     		_NEXT 
 444              	
 445              	/*********************************
 446              	    DUP	 ( w -- w w )
 447              	 	Duplicate the top stack item.
 448              	*********************************/
 449 1cbe B01C0000 		_HEADER DUPP,3,"DUP"
 449      03445550 
 449      00BF
 450 1cc8 47F8046D 		_PUSH
 451 1ccc A4E6     		_NEXT 
 452              	
 453              	/**********************************
 454              	    SWAP	( w1 w2 -- w2 w1 )
 455              	 	Exchange top two stack items.
 456              	**********************************/
 457 1cce C21C0000 		_HEADER SWAP,4,"SWAP"
 457      04535741 
 457      5000
 458 1cd8 3D68     		LDR	WP,[DSP]
 459 1cda 3E60     		STR	TOS,[DSP]
 460 1cdc 2E46     		MOV	TOS,WP
 461 1cde 9BE6     		_NEXT 
 462              	
 463              	/***********************************
 464              	    OVER	( w1 w2 -- w1 w2 w1 )
 465              	 	Copy second stack item to top.
 466              	***********************************/
 467 1ce0 D21C0000 		_HEADER OVER,4,"OVER"
 467      044F5645 
 467      520000BF 
 468 1cec 47F8046D 		_PUSH
 469 1cf0 7E68     		LDR	TOS,[DSP,#4]
 470 1cf2 91E6     		_NEXT 
 471              	
 472              	/***********************************
 473              	    0<	  ( n -- t )
 474              	 	Return true if n is negative.
 475              	***********************************/
 476 1cf4 E41C0000 		_HEADER ZLESS,2,"0<"
 476      02303C00 
 477 1cfc 4FEAE676 		ASR TOS,#31
 478 1d00 8AE6     		_NEXT 
 479              	
 480              	/********************************
 481              	    AND	 ( w w -- w )
 482              	 	Bitwise AND.
 483              	********************************/
 484 1d02 F81C0000 		_HEADER ANDD,3,"AND"
ARM GAS  forth.s 			page 81


 484      03414E44 
 484      00BF
 485 1d0c 57F8045B 		LDR	WP,[DSP],#4
 486 1d10 06EA0506 		AND	TOS,TOS,WP
 487 1d14 80E6     		_NEXT 
 488              	
 489              	/******************************
 490              	    OR	  ( w w -- w )
 491              	 	Bitwise inclusive OR.
 492              	******************************/
 493 1d16 061D0000 		_HEADER ORR,2,"OR"
 493      024F5200 
 493      00BF
 494 1d20 57F8045B 		LDR	WP,[DSP],#4
 495 1d24 46EA0506 		ORR	TOS,TOS,WP
 496 1d28 76E6     		_NEXT 
 497              	
 498              	/*****************************
 499              	    XOR	 ( w w -- w )
 500              	 	Bitwise exclusive OR.
 501              	*****************************/
 502 1d2a 1A1D0000 		_HEADER XORR,3,"XOR"
 502      03584F52 
 502      00BF
 503 1d34 57F8045B 		LDR	WP,[DSP],#4
 504 1d38 86EA0506 		EOR	TOS,TOS,WP
 505 1d3c 6CE6     		_NEXT 
 506              	
 507              	/**************************************************
 508              	    UM+	 ( w w -- w cy )
 509              	 	Add two numbers, return the sum and carry flag.
 510              	***************************************************/
 511 1d3e 2E1D0000 		_HEADER UPLUS,3,"UM+"
 511      03554D2B 
 511      00BF
 512 1d48 3D68     		LDR	WP,[DSP]
 513 1d4a AD19     		ADDS	WP,WP,TOS
 514 1d4c 4FF00006 		MOV	TOS,#0
 515 1d50 46F10006 		ADC	TOS,TOS,#0
 516 1d54 3D60     		STR	WP,[DSP]
 517 1d56 5FE6     		_NEXT 
 518              	
 519              	/*********************************
 520              	    RSHIFT	 ( w # -- w )
 521              	 	arithmetic Right shift # bits.
 522              	**********************************/
 523 1d58 421D0000 		_HEADER RSHIFT,6,"RSHIFT"
 523      06525348 
 523      49465400 
 524 1d64 57F8045B 		LDR	WP,[DSP],#4
 525 1d68 45FA06F6 		MOV	TOS,WP,ASR TOS
 526 1d6c 54E6     		_NEXT 
 527              	
 528              	/****************************
 529              	    LSHIFT	 ( w # -- w )
 530              	 	Right shift # bits.
 531              	****************************/
ARM GAS  forth.s 			page 82


 532 1d6e 5C1D0000 		_HEADER LSHIFT,6,"LSHIFT"
 532      064C5348 
 532      49465400 
 532      00BF
 533 1d7c 57F8045B 		LDR	WP,[DSP],#4
 534 1d80 05FA06F6 		MOV	TOS,WP,LSL TOS
 535 1d84 48E6     		_NEXT
 536              	
 537              	/*************************
 538              	    +	 ( w w -- w )
 539              	 	Add.
 540              	*************************/
 541 1d86 721D0000 		_HEADER PLUS,1,"+"
 541      012B
 542 1d8c 57F8045B 		LDR	WP,[DSP],#4
 543 1d90 2E44     		ADD	TOS,TOS,WP
 544 1d92 41E6     		_NEXT 
 545              	
 546              	/************************
 547              	    -	 ( w w -- w )
 548              	 	Subtract.
 549              	************************/
 550 1d94 8A1D0000 		_HEADER SUBB,1,"-"
 550      012D00BF 
 551 1d9c 57F8045B 		LDR	WP,[DSP],#4
 552 1da0 C6EB0506 		RSB	TOS,TOS,WP
 553 1da4 38E6     		_NEXT 
 554              	
 555              	/************************
 556              	    *	 ( w w -- w )
 557              	 	Multiply.
 558              	***********************/
 559 1da6 981D0000 		_HEADER STAR,1,"*"
 559      012A
 560 1dac 57F8045B 		LDR	WP,[DSP],#4
 561 1db0 05FB06F6 		MUL	TOS,WP,TOS
 562 1db4 30E6     		_NEXT 
 563              	
 564              	/***************************
 565              	    UM*	 ( w w -- ud )
 566              	 	Unsigned multiply.
 567              	****************************/
 568 1db6 AA1D0000 		_HEADER UMSTA,3,"UM*"
 568      03554D2A 
 568      00BF
 569 1dc0 3D68     		LDR	WP,[DSP]
 570 1dc2 A6FB0523 		UMULL	T2,T3,TOS,WP
 571 1dc6 3A60     		STR	T2,[DSP]
 572 1dc8 1E46     		MOV	TOS,T3
 573 1dca 25E6     		_NEXT 
 574              	
 575              	/***************************
 576              	    M*	 ( w w -- d )
 577              	 	signed multiply.
 578              	***************************/
 579 1dcc BA1D0000 		_HEADER MSTAR,2,"M*"
 579      024D2A00 
ARM GAS  forth.s 			page 83


 580 1dd4 3D68     		LDR	WP,[DSP]
 581 1dd6 86FB0523 		SMULL	T2,T3,TOS,WP
 582 1dda 3A60     		STR	T2,[DSP]
 583 1ddc 1E46     		MOV	TOS,T3
 584 1dde 1BE6     		_NEXT 
 585              	
 586              	/***************************
 587              	    1+	 ( w -- w+1 )
 588              	 	Add 1.
 589              	***************************/
 590 1de0 D01D0000 		_HEADER ONEP,2,"1+"
 590      02312B00 
 591 1de8 06F10106 		ADD	TOS,TOS,#1
 592 1dec 14E6     		_NEXT 
 593              	
 594              	/***************************
 595              	    1-	 ( w -- w-1 )
 596              	 	Subtract 1.
 597              	***************************/
 598 1dee E41D0000 		_HEADER ONEM,2,"1-"
 598      02312D00 
 598      00BF
 599 1df8 A6F10106 		SUB	TOS,TOS,#1
 600 1dfc 0CE6     		_NEXT 
 601              	
 602              	/***************************
 603              	    2+	 ( w -- w+2 )
 604              	 	Add 2.
 605              	**************************/
 606 1dfe F21D0000 		_HEADER TWOP,2,"2+"
 606      02322B00 
 606      00BF
 607 1e08 06F10206 		ADD	TOS,TOS,#2
 608 1e0c 04E6     		_NEXT
 609              	
 610              	/**************************
 611              	    2-	 ( w -- w-2 )
 612              	 	Subtract 2.
 613              	**************************/
 614 1e0e 021E0000 		_HEADER TWOM,2,"2-"
 614      02322D00 
 614      00BF
 615 1e18 A6F10206 		SUB	TOS,TOS,#2
 616 1e1c FCE5     		_NEXT
 617              	
 618              	/***************************
 619              	    CELL+	( w -- w+4 )
 620              	 	Add CELLL.
 621              	***************************/
 622 1e1e 121E0000 		_HEADER CELLP,5,"CELL+"
 622      0543454C 
 622      4C2B
 623 1e28 06F10406 		ADD	TOS,TOS,#CELLL
 624 1e2c F4E5     		_NEXT
 625              	
 626              	/***************************
 627              	    CELL-	( w -- w-4 )
ARM GAS  forth.s 			page 84


 628              	 	Subtract CELLL.
 629              	**************************/
 630 1e2e 221E0000 		_HEADER CELLM,5,"CELL-"
 630      0543454C 
 630      4C2D
 631 1e38 A6F10406 		SUB	TOS,TOS,#CELLL
 632 1e3c ECE5     		_NEXT
 633              	
 634              	/**************************** 
 635              	    BL	( -- 32 )
 636              	 	Blank (ASCII space).
 637              	*****************************/
 638 1e3e 321E0000 		_HEADER BLANK,2,"BL"
 638      02424C00 
 638      00BF
 639 1e48 47F8046D 		_PUSH
 640 1e4c 4FF02006 		MOV	TOS,#32
 641 1e50 E2E5     		_NEXT 
 642              	
 643              	/**************************
 644              	    CELLS	( w -- w*4 )
 645              	 	Multiply CELLL 
 646              	***************************/
 647 1e52 421E0000 		_HEADER CELLS,5,"CELLS"
 647      0543454C 
 647      4C53
 648 1e5c 4FEA8606 		LSL TOS,#2
 649 1e60 DAE5     		_NEXT
 650              	
 651              	/***************************
 652              	    CELL/	( w -- w/4 )
 653              	 	Divide by CELLL.
 654              	***************************/
 655 1e62 561E0000 		_HEADER CELLSL,5,"CELL/"
 655      0543454C 
 655      4C2F
 656 1e6c 4FEAA606 		ASR TOS,#2
 657 1e70 D2E5     		_NEXT
 658              	
 659              	/*************************
 660              	    2*	( w -- w*2 )
 661              	 	Multiply 2.
 662              	*************************/
 663 1e72 661E0000 		_HEADER TWOST,2,"2*"
 663      02322A00 
 663      00BF
 664 1e7c 4FEA4606 		MOV	TOS,TOS,LSL#1
 665 1e80 CAE5     		_NEXT
 666              	
 667              	/*************************
 668              	    2/	( w -- w/2 )
 669              	 	Divide by 2.
 670              	***********************/
 671 1e82 761E0000 		_HEADER TWOSL,2,"2/"
 671      02322F00 
 671      00BF
 672 1e8c 4FEA6606 		MOV	TOS,TOS,ASR#1
ARM GAS  forth.s 			page 85


 673 1e90 C2E5     		_NEXT
 674              	
 675              	/****************************
 676              	    ?DUP	( w -- w w | 0 )
 677              	 	Conditional duplicate.
 678              	*****************************/
 679 1e92 861E0000 		_HEADER QDUP,4,"?DUP"
 679      043F4455 
 679      5000
 680 1e9c 3500     		MOVS	WP,TOS
 681 1e9e 18BF     		IT NE 
 682 1ea0 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 683 1ea4 B8E5     		_NEXT
 684              	
 685              	/***********************************
 686              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 687              	 	Rotate top 3 items.
 688              	*************************************/
 689 1ea6 961E0000 		_HEADER ROT,3,"ROT"
 689      03524F54 
 689      00BF
 690 1eb0 3868     		LDR	T0,[DSP]  // w2 
 691 1eb2 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 692 1eb4 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 693 1eb6 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 694 1eb8 AEE5     		_NEXT
 695              	
 696              	/*********************************
 697              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 698              	 left rotate top 3 elements 
 699              	********************************/
 700 1eba AA1E0000 		_HEADER NROT,4,"-ROT"
 700      042D524F 
 700      5400
 701 1ec4 7868     		LDR T0,[DSP,#4]
 702 1ec6 7E60     		STR TOS,[DSP,#4]	
 703 1ec8 3E68     		LDR TOS,[DSP]
 704 1eca 3860     		STR T0,[DSP]
 705 1ecc A4E5     		_NEXT 
 706              	
 707              	/*********************************
 708              	    2DROP	( w1 w2 -- )
 709              	 	Drop top 2 items.
 710              	*********************************/
 711 1ece BE1E0000 		_HEADER DDROP,5,"2DROP"
 711      05324452 
 711      4F50
 712 1ed8 57F8046B 		_POP
 713 1edc 57F8046B 		_POP
 714 1ee0 9AE5     		_NEXT 
 715              	
 716              	/********************************
 717              		3DROP ( w1 w2 w3 -- )
 718              		drop top 3 items 
 719              	********************************/
 720 1ee2 D21E0000 		_HEADER TDROP,5,"3DROP"
 720      05334452 
ARM GAS  forth.s 			page 86


 720      4F50
 721 1eec 07F10807 	    add DSP,#8 
 722 1ef0 57F8046B 	    _POP 
 723 1ef4 90E5     	    _NEXT 
 724              	
 725              	/***********************************
 726              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 727              	 	Duplicate top 2 items.
 728              	************************************/
 729 1ef6 E61E0000 		_HEADER DDUP,4,"2DUP"
 729      04324455 
 729      5000
 730 1f00 3868     		LDR	T0,[DSP] // w1
 731 1f02 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 732 1f06 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 733 1f0a 85E5     		_NEXT
 734              	
 735              	/******************************
 736              	    D+	( d1 d2 -- d3 )
 737              	 	Add top 2 double numbers.
 738              	******************************/
 739 1f0c FA1E0000 		_HEADER DPLUS,2,"D+"
 739      02442B00 
 740 1f14 57F8045B 		LDR	WP,[DSP],#4
 741 1f18 57F8042B 		LDR	T2,[DSP],#4
 742 1f1c 3B68     		LDR	T3,[DSP]
 743 1f1e ED18     		ADDS	WP,WP,T3
 744 1f20 3D60     		STR	WP,[DSP]
 745 1f22 46EB0206 		ADC	TOS,TOS,T2
 746 1f26 77E5     		_NEXT
 747              	
 748              	/*****************************
 749              	    NOT	 ( w -- !w )
 750              	 	1"s complement.
 751              	*****************************/
 752 1f28 101F0000 		_HEADER INVER,3,"NOT"
 752      034E4F54 
 753 1f30 6FEA0606 		MVN	TOS,TOS
 754 1f34 70E5     		_NEXT
 755              	
 756              	/*****************************
 757              	    NEGATE	( w -- -w )
 758              	 	2's complement.
 759              	***************************/
 760 1f36 2C1F0000 		_HEADER NEGAT,6,"NEGATE"
 760      064E4547 
 760      41544500 
 760      00BF
 761 1f44 C6F10006 		RSB	TOS,TOS,#0
 762 1f48 66E5     		_NEXT
 763              	
 764              	/***************************
 765              	    ABS	 ( w -- |w| )
 766              	 	Absolute.
 767              	**************************/
 768 1f4a 3A1F0000 		_HEADER ABSS,3,"ABS"
 768      03414253 
ARM GAS  forth.s 			page 87


 768      00BF
 769 1f54 16F0004F 		TST	TOS,#0x80000000
 770 1f58 18BF     		IT NE
 771 1f5a 7642     	    RSBNE   TOS,TOS,#0
 772 1f5c 5CE5     		_NEXT
 773              	
 774              	/*******************
 775              	  0= ( w -- f )
 776              	 TOS==0?
 777              	*******************/
 778 1f5e 4E1F0000 		_HEADER ZEQUAL,2,"0="
 778      02303D00 
 778      00BF
 779 1f68 16B9     		cbnz TOS,1f
 780 1f6a 4FF0FF36 		mov TOS,#-1
 781 1f6e 53E5     		_NEXT 
 782 1f70 86EA0606 	1:  eor TOS,TOS,TOS  
 783 1f74 50E5     		_NEXT 	
 784              	
 785              	/*********************
 786              	    =	 ( w w -- t )
 787              	 	Equal?
 788              	*********************/
 789 1f76 621F0000 		_HEADER EQUAL,1,"="
 789      013D
 790 1f7c 57F8045B 		LDR	WP,[DSP],#4
 791 1f80 AE42     		CMP	TOS,WP
 792 1f82 0CBF     		ITE EQ 
 793 1f84 6FF00006 	    MVNEQ	TOS,#0
 794 1f88 0026     		MOVNE	TOS,#0
 795 1f8a 45E5     		_NEXT
 796              	
 797              	/************************
 798              	    U<	 ( w w -- t )
 799              	 	Unsigned less?
 800              	*************************/
 801 1f8c 7A1F0000 		_HEADER ULESS,2,"U<"
 801      02553C00 
 802 1f94 57F8045B 		LDR	WP,[DSP],#4
 803 1f98 B542     		CMP	WP,TOS
 804 1f9a 34BF     		ITE CC 
 805 1f9c 6FF00006 		MVNCC	TOS,#0
 806 1fa0 0026     		MOVCS	TOS,#0
 807 1fa2 39E5     		_NEXT
 808              	
 809              	/**********************
 810              	    <	( w w -- t )
 811              	 	Less?
 812              	**********************/
 813 1fa4 901F0000 		_HEADER LESS,1,"<"
 813      013C00BF 
 814 1fac 57F8045B 		LDR	WP,[DSP],#4
 815 1fb0 B542     		CMP	WP,TOS
 816 1fb2 B4BF     	    ITE LT
 817 1fb4 6FF00006 		MVNLT	TOS,#0
 818 1fb8 0026     		MOVGE	TOS,#0
 819 1fba 2DE5     		_NEXT 
ARM GAS  forth.s 			page 88


 820              	
 821              	/***********************
 822              	    >	( w w -- t )
 823              	 	greater?
 824              	***********************/
 825 1fbc A81F0000 		_HEADER GREAT,1,">"
 825      013E00BF 
 826 1fc4 57F8045B 		LDR	WP,[DSP],#4
 827 1fc8 B542     		CMP	WP,TOS
 828 1fca CCBF     		ITE GT
 829 1fcc 6FF00006 	    MVNGT	TOS,#0
 830 1fd0 0026     		MOVLE	TOS,#0
 831 1fd2 21E5     		_NEXT
 832              	
 833              	/***************************
 834              	    MAX	 ( w w -- max )
 835              	 	Leave maximum.
 836              	***************************/
 837 1fd4 C01F0000 		_HEADER MAX,3,"MAX"
 837      034D4158 
 838 1fdc 57F8045B 		LDR	WP,[DSP],#4
 839 1fe0 B542     		CMP	WP,TOS
 840 1fe2 C8BF     		IT GT 
 841 1fe4 2E46     		MOVGT	TOS,WP
 842 1fe6 17E5     		_NEXT 
 843              	
 844              	/**************************
 845              	    MIN	 ( w w -- min )
 846              	 	Leave minimum.
 847              	**************************/
 848 1fe8 D81F0000 		_HEADER MIN,3,"MIN"
 848      034D494E 
 849 1ff0 57F8045B 		LDR	WP,[DSP],#4
 850 1ff4 B542     		CMP	WP,TOS
 851 1ff6 B8BF     		IT LT
 852 1ff8 2E46     		MOVLT	TOS,WP
 853 1ffa 0DE5     		_NEXT
 854              	
 855              	/***********************
 856              	    +!	 ( w a -- )
 857              	 	Add to memory.
 858              	***********************/
 859 1ffc EC1F0000 		_HEADER PSTOR,2,"+!"
 859      022B2100 
 860 2004 57F8045B 		LDR	WP,[DSP],#4
 861 2008 3268     		LDR	T2,[TOS]
 862 200a 2A44     		ADD	T2,T2,WP
 863 200c 3260     		STR	T2,[TOS]
 864 200e 57F8046B 		_POP
 865 2012 01E5     		_NEXT
 866              	
 867              	/************************
 868              	    2!	 ( d a -- )
 869              	 	Store double number.
 870              	*************************/
 871 2014 00200000 		_HEADER DSTOR,2,"2!"
 871      02322100 
ARM GAS  forth.s 			page 89


 872 201c 57F8045B 		LDR	WP,[DSP],#4
 873 2020 57F8042B 		LDR	T2,[DSP],#4
 874 2024 46F8045B 		STR	WP,[TOS],#4
 875 2028 3260     		STR	T2,[TOS]
 876 202a 57F8046B 		_POP
 877 202e F3E4     		_NEXT
 878              	
 879              	/************************
 880              	    2@	 ( a -- d )
 881              	 	Fetch double number.
 882              	************************/
 883 2030 18200000 		_HEADER DAT,2,"D@"
 883      02444000 
 884 2038 7568     		LDR	WP,[TOS,#4]
 885 203a 47F8045D 		STR	WP,[DSP,#-4]!
 886 203e 3668     		LDR	TOS,[TOS]
 887 2040 EAE4     		_NEXT
 888              	
 889              	/***************************
 890              	    COUNT	( b -- b+1 c )
 891              	 	Fetch length of string.
 892              	****************************/
 893 2042 34200000 		_HEADER COUNT,5,"COUNT"
 893      05434F55 
 893      4E54
 894 204c 16F8015B 		LDRB	WP,[TOS],#1
 895 2050 47F8046D 		_PUSH
 896 2054 2E46     		MOV	TOS,WP
 897 2056 DFE4     		_NEXT
 898              	
 899              	/******************************
 900              	    DNEGATE	( d -- -d )
 901              	 	Negate double number.
 902              	**************************/
 903 2058 46200000 		_HEADER DNEGA,7,"DNEGATE"
 903      07444E45 
 903      47415445 
 904 2064 3D68     		LDR	WP,[DSP]
 905 2066 A2EB0202 		SUB	T2,T2,T2
 906 206a 551B     		SUBS WP,T2,WP
 907 206c 62EB0606 		SBC	TOS,T2,TOS
 908 2070 3D60     		STR	WP,[DSP]
 909 2072 D1E4     		_NEXT
 910              	
 911              	/******************************
 912              	  System and user variables
 913              	******************************/
 914              	
 915              	/*******************************
 916              	  doVAR	( -- a )
 917              	  Run time routine for VARIABLE and CREATE.
 918              	hidden word used by compiler
 919              	********************************/
 920              	DOVAR:
 921 2074 47F8046D 		_PUSH
 922 2078 6646     		MOV TOS,IP
 923 207a 0CF1040C 		ADD IP,IP,#4 
ARM GAS  forth.s 			page 90


 924 207e CEE4     		B UNNEST 
 925              	
 926              	/**********************************
 927              	    doCON	( -- a ) 
 928              	 	Run time routine for CONSTANT.
 929              	hidden word used by compiler 
 930              	***********************************/
 931              	DOCON:
 932 2080 47F8046D 		_PUSH
 933 2084 5CF8046B 		LDR.W TOS,[IP],#4 
 934 2088 C9E4     		B UNNEST 
 935              	
 936              	/***********************
 937              	  system variables 
 938              	***********************/
 939              	
 940              	/**************************
 941              	 SEED ( -- a)
 942              	 return PRNG seed address 
 943              	**************************/
 944 208a 5C200000 		_HEADER SEED,4,"SEED"
 944      04534545 
 944      4400
 945 2094 47F8046D 		_PUSH 
 946 2098 04F10406 		ADD TOS,UP,#RNDSEED
 947 209c BCE4     		_NEXT 	
 948              	
 949              	/****************************************
 950              	  MSEC ( -- a)
 951              	 return address of milliseconds counter
 952              	****************************************/
 953 209e 8E200000 		_HEADER MSEC,4,"MSEC"
 953      044D5345 
 953      4300
 954 20a8 47F8046D 	    _PUSH
 955 20ac 04F10806 	    ADD TOS,UP,#TICKS
 956 20b0 B2E4     	    _NEXT 
 957              	
 958              	/*************************
 959              	 TIMER ( -- a )
 960              	 count down timer 
 961              	**********************/
 962 20b2 A2200000 		_HEADER TIMER,5,"TIMER"
 962      0554494D 
 962      4552
 963 20bc 47F8046D 		 _PUSH 
 964 20c0 04F10C06 	    ADD TOS,UP,#CD_TIMER
 965 20c4 A8E4     	    _NEXT
 966              	
 967              	/*****************************
 968              	    'BOOT	 ( -- a )
 969              	 	boot up application vector 
 970              	*****************************/
 971 20c6 B6200000 		_HEADER TBOOT,5,"'BOOT"
 971      0527424F 
 971      4F54
 972 20d0 47F8046D 		_PUSH
ARM GAS  forth.s 			page 91


 973 20d4 04F11006 		ADD	TOS,UP,#BOOT 
 974 20d8 9EE4     		_NEXT
 975              		
 976              	/********************************************	
 977              	    BASE	( -- a )
 978              	 	Storage of the radix base for numeric I/O.
 979              	**********************************************/
 980 20da CA200000 		_HEADER BASE,4,"BASE"
 980      04424153 
 980      4500
 981 20e4 47F8046D 		_PUSH
 982 20e8 04F11C06 		ADD	TOS,UP,#NBASE
 983 20ec 94E4     		_NEXT
 984              	
 985              	/*****************************************************
 986              	    temp	 ( -- a )
 987              	 	A temporary storage location used in parse and find.
 988              	hidden word for internal use
 989              	********************************************************/
 990              	TEMP:
 991 20ee 47F8046D 		_PUSH
 992 20f2 04F12006 		ADD	TOS,UP,#TMP
 993 20f6 8FE4     		_NEXT
 994              	
 995              	/*******************************************
 996              	    SPAN	( -- a )
 997              	 	Hold character count received by EXPECT.
 998              	********************************************/
 999 20f8 DE200000 		_HEADER SPAN,4,"SPAN"
 999      04535041 
 999      4E0000BF 
 1000 2104 47F8046D 		_PUSH
 1001 2108 04F12406 		ADD	TOS,UP,#CSPAN
 1002 210c 84E4     		_NEXT
 1003              	
 1004              	/***********************************************************
 1005              	    >IN	 ( -- a )
 1006              	 	Hold the character pointer while parsing input stream.
 1007              	***********************************************************/
 1008 210e FC200000 		_HEADER INN,3,">IN"
 1008      033E494E 
 1008      00BF
 1009 2118 47F8046D 		_PUSH
 1010 211c 04F12806 		ADD	TOS,UP,#TOIN
 1011 2120 7AE4     		_NEXT
 1012              	
 1013              	/**************************************
 1014              	    #TIB	( -- a )
 1015              	 	Hold the current count and address 
 1016              		of the terminal input buffer.
 1017              	**************************************/
 1018 2122 12210000 		_HEADER NTIB,4,"#TIB"
 1018      04235449 
 1018      4200
 1019 212c 47F8046D 		_PUSH
 1020 2130 04F12C06 		ADD	TOS,UP,#NTIBB
 1021 2134 70E4     		_NEXT
ARM GAS  forth.s 			page 92


 1022              	
 1023              	/******************************
 1024              	    'EVAL	( -- a )
 1025              	 	Execution vector of EVAL.
 1026              	*******************************/
 1027 2136 26210000 		_HEADER TEVAL,5,"'EVAL"
 1027      05274556 
 1027      414C
 1028 2140 47F8046D 		_PUSH
 1029 2144 04F13406 		ADD	TOS,UP,#EVAL
 1030 2148 66E4     		_NEXT
 1031              	
 1032              	/*********************************
 1033              	    HLD	 ( -- a )
 1034              	 	Hold a pointer in building a 
 1035              		numeric output string.
 1036              	*********************************/
 1037 214a 3A210000 		_HEADER HLD,3,"HLD"
 1037      03484C44 
 1037      00BF
 1038 2154 47F8046D 		_PUSH
 1039 2158 04F13806 		ADD	TOS,UP,#HOLD
 1040 215c 5CE4     		_NEXT
 1041              	
 1042              	/**********************************
 1043              	    CONTEXT	( -- a )
 1044              	 	A area to specify vocabulary 
 1045              		search order.
 1046              	**********************************/
 1047 215e 4E210000 		_HEADER CNTXT,7,"CONTEXT"
 1047      07434F4E 
 1047      54455854 
 1047      00BF
 1048              	CRRNT:
 1049 216c 47F8046D 		_PUSH
 1050 2170 04F13C06 		ADD	TOS,UP,#CTXT
 1051 2174 50E4     		_NEXT
 1052              	
 1053              	/******************************
 1054              	    CP	( -- a )
 1055              	 	Point to top name in RAM 
 1056              		vocabulary.
 1057              	******************************/
 1058 2176 62210000 		_HEADER CPP,2,"CP"
 1058      02435000 
 1058      00BF
 1059 2180 47F8046D 		_PUSH
 1060 2184 04F14406 		ADD	TOS,UP,#USER_CTOP
 1061 2188 46E4     		_NEXT
 1062              	
 1063              	/****************************
 1064              	   FCP ( -- a )
 1065              	  Point ot top of Forth 
 1066              	  system dictionary
 1067              	****************************/
 1068 218a 7A210000 		_HEADER FCP,3,"FCP"
 1068      03464350 
ARM GAS  forth.s 			page 93


 1068      00BF
 1069 2194 47F8046D 		_PUSH 
 1070 2198 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1071 219c 3CE4     		_NEXT 
 1072              	
 1073              	/***************************
 1074              	    LAST	( -- a )
 1075              	 	Point to the last name 
 1076              		in the name dictionary.
 1077              	***************************/
 1078 219e 8E210000 		_HEADER LAST,4,"LAST"
 1078      044C4153 
 1078      5400
 1079 21a8 47F8046D 		_PUSH
 1080 21ac 04F14806 		ADD	TOS,UP,#LASTN
 1081 21b0 32E4     		_NEXT
 1082              	
 1083              	
 1084              	/***********************
 1085              		system constants 
 1086              	***********************/
 1087              	
 1088              	/********************************
 1089              		USER-BEGIN ( -- a )
 1090              	  where user area begin in RAM
 1091              	********************************/
 1092 21b2 A2210000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1092      0A555345 
 1092      522D4245 
 1092      47494E00 
 1092      00BF
 1093 21c4 47F8046D 		_PUSH 
 1094 21c8 004E     		ldr TOS,USR_BGN_ADR 
 1095 21ca 25E4     		_NEXT 
 1096              	USR_BGN_ADR:
 1097 21cc 12050020 	.word  DTOP 
 1098              	
 1099              	/*********************************
 1100              	  USER_END ( -- a )
 1101              	  where user area end in RAM 
 1102              	******************************/
 1103 21d0 B6210000 		_HEADER USER_END,8,"USER-END"
 1103      08555345 
 1103      522D454E 
 1103      440000BF 
 1104 21e0 47F8046D 		_PUSH 
 1105 21e4 004E     		ldr TOS,USER_END_ADR 
 1106 21e6 17E4     		_NEXT 
 1107              	USER_END_ADR:
 1108 21e8 FC800120 		.word DEND 
 1109              	
 1110              	
 1111              	/* *********************
 1112              	  Common functions
 1113              	***********************/
 1114              	
 1115              	/********************************
ARM GAS  forth.s 			page 94


 1116              	    WITHIN	( u ul uh -- t )
 1117              	 	Return true if u is within 
 1118              		the range of ul and uh.
 1119              	********************************/
 1120 21ec D4210000 		_HEADER WITHI,6,"WITHIN"
 1120      06574954 
 1120      48494E00 
 1121 21f8 504700BF 		_NEST
 1122 21fc ED1C0000 		_ADR	OVER
 1123 2200 9D1D0000 		_ADR	SUBB
 1124 2204 711C0000 		_ADR	TOR
 1125 2208 9D1D0000 		_ADR	SUBB
 1126 220c 491C0000 		_ADR	RFROM
 1127 2210 951F0000 		_ADR	ULESS
 1128 2214 1F1A0000 		_UNNEST
 1129              	
 1130              	//  Divide
 1131              	
 1132              	/*************************************
 1133              	    UM/MOD	( udl udh u -- ur uq )
 1134              	 	Unsigned divide of a double by a 
 1135              		single. Return mod and quotient.
 1136              	**************************************/
 1137 2218 F0210000 		_HEADER UMMOD,6,"UM/MOD"
 1137      06554D2F 
 1137      4D4F4400 
 1138 2224 4FF00103 		MOV	T3,#1
 1139 2228 57F8045B 		LDR	WP,[DSP],#4
 1140 222c 3A68     		LDR	T2,[DSP]
 1141              	UMMOD0:
 1142 222e 9218     		ADDS	T2,T2,T2
 1143 2230 6D41     		ADCS	WP,WP,WP
 1144 2232 04D3     		BCC	UMMOD1
 1145 2234 A5EB0605 		SUB	WP,WP,TOS
 1146 2238 02F10102 		ADD	T2,T2,#1
 1147 223c 04E0     		B UMMOD2
 1148              	UMMOD1:
 1149 223e AD1B     		SUBS	WP,WP,TOS 
 1150 2240 28BF     		IT CS 
 1151 2242 0132     		ADDCS	T2,T2,#1
 1152 2244 00D2     		BCS	UMMOD2
 1153 2246 3544     		ADD	WP,WP,TOS
 1154              	UMMOD2:
 1155 2248 DB18     		ADDS	T3,T3,T3
 1156 224a F0D3     		BCC	UMMOD0
 1157 224c 1646     		MOV	TOS,T2
 1158 224e 3D60     		STR	WP,[DSP]
 1159 2250 FFF7E2BB 		_NEXT
 1160              	
 1161              	/****************************
 1162              	    M/MOD	( d n -- r q )
 1163              	 	Signed floored divide 
 1164              		of double by single. 
 1165              		Return mod and quotient.
 1166              	****************************/
 1167 2254 1C220000 		_HEADER MSMOD,5,"M/MOD"
 1167      054D2F4D 
ARM GAS  forth.s 			page 95


 1167      4F4400BF 
 1168 2260 504700BF 		_NEST
 1169 2264 C91C0000 		_ADR	DUPP
 1170 2268 FD1C0000 		_ADR	ZLESS
 1171 226c C91C0000 		_ADR	DUPP
 1172 2270 711C0000 		_ADR	TOR
 1173 2274 D71B0000 		_QBRAN MMOD1
 1173      8C220000 
 1174 227c 451F0000 		_ADR	NEGAT
 1175 2280 711C0000 		_ADR	TOR
 1176 2284 65200000 		_ADR	DNEGA
 1177 2288 491C0000 		_ADR	RFROM
 1178              	MMOD1:
 1179 228c 711C0000 		_ADR	TOR
 1180 2290 C91C0000 		_ADR	DUPP
 1181 2294 FD1C0000 		_ADR	ZLESS
 1182 2298 D71B0000 		_QBRAN MMOD2
 1182      A8220000 
 1183 22a0 5D1C0000 		_ADR	RAT
 1184 22a4 8D1D0000 		_ADR	PLUS
 1185              	MMOD2:
 1186 22a8 491C0000 		_ADR	RFROM
 1187 22ac 25220000 		_ADR	UMMOD
 1188 22b0 491C0000 		_ADR	RFROM
 1189 22b4 D71B0000 		_QBRAN	MMOD3
 1189      C8220000 
 1190 22bc D91C0000 		_ADR	SWAP
 1191 22c0 451F0000 		_ADR	NEGAT
 1192 22c4 D91C0000 		_ADR	SWAP
 1193              	MMOD3:   
 1194 22c8 1F1A0000 		_UNNEST
 1195              	
 1196              	/****************************
 1197              	   /MOD	( n n -- r q )
 1198              		Signed divide. Return
 1199              		mod and quotient.
 1200              	****************************/
 1201 22cc 58220000 		_HEADER SLMOD,4,"/MOD"
 1201      042F4D4F 
 1201      440000BF 
 1202 22d8 504700BF 		_NEST
 1203 22dc ED1C0000 		_ADR	OVER
 1204 22e0 FD1C0000 		_ADR	ZLESS
 1205 22e4 D91C0000 		_ADR	SWAP
 1206 22e8 61220000 		_ADR	MSMOD
 1207 22ec 1F1A0000 		_UNNEST
 1208              	
 1209              	/**************************
 1210              	    MOD	 ( n n -- r )
 1211              	 	Signed divide. Return
 1212              		mod only.
 1213              	**************************/
 1214 22f0 D0220000 		_HEADER MODD,3,"MOD"
 1214      034D4F44 
 1215 22f8 504700BF 		_NEST
 1216 22fc D9220000 		_ADR	SLMOD
 1217 2300 B91C0000 		_ADR	DROP
ARM GAS  forth.s 			page 96


 1218 2304 1F1A0000 		_UNNEST
 1219              	
 1220              	/*************************
 1221              	    /	   ( n n -- q )
 1222              	 	Signed divide. Return
 1223              		quotient only.
 1224              	**************************/
 1225 2308 F4220000 		_HEADER SLASH,1,"/"
 1225      012F00BF 
 1226 2310 504700BF 		_NEST
 1227 2314 D9220000 		_ADR	SLMOD
 1228 2318 D91C0000 		_ADR	SWAP
 1229 231c B91C0000 		_ADR	DROP
 1230 2320 1F1A0000 		_UNNEST
 1231              	
 1232              	//******************************
 1233              	//  */MOD	( n1 n2 n3 -- r q )
 1234              	/* 	Multiply n1 and n2, then 
 1235              		divide by n3. Return 
 1236              		mod and quotient.
 1237              	******************************/
 1238 2324 0C230000 		_HEADER SSMOD,5,"*/MOD"
 1238      052A2F4D 
 1238      4F4400BF 
 1239 2330 504700BF 		_NEST
 1240 2334 711C0000 		_ADR	TOR
 1241 2338 D51D0000 		_ADR	MSTAR
 1242 233c 491C0000 		_ADR	RFROM
 1243 2340 61220000 		_ADR	MSMOD
 1244 2344 1F1A0000 		_UNNEST
 1245              	
 1246              	//*******************************
 1247              	//  */ ( n1 n2 n3 -- q )
 1248              	/* 	Multiply n1 by n2, then 
 1249              		divide by n3. Return quotient
 1250              		only.
 1251              	*******************************/
 1252 2348 28230000 		_HEADER STASL,2,"*/"
 1252      022A2F00 
 1253 2350 504700BF 		_NEST
 1254 2354 31230000 		_ADR	SSMOD
 1255 2358 D91C0000 		_ADR	SWAP
 1256 235c B91C0000 		_ADR	DROP
 1257 2360 1F1A0000 		_UNNEST
 1258              	
 1259              	/*******************
 1260              	  Miscellaneous
 1261              	*******************/
 1262              	
 1263              	/*************************
 1264              	    ALIGNED	( b -- a )
 1265              	 	Align address to the 
 1266              		cell boundary.
 1267              	**************************/
 1268 2364 4C230000 		_HEADER ALGND,7,"ALIGNED"
 1268      07414C49 
 1268      474E4544 
ARM GAS  forth.s 			page 97


 1269 2370 06F10306 		ADD	TOS,TOS,#3
 1270 2374 6FF00305 		MVN	WP,#3
 1271 2378 06EA0506 		AND	TOS,TOS,WP
 1272 237c FFF74CBB 		_NEXT
 1273              	
 1274              	/****************************
 1275              	    >CHAR	( c -- c )
 1276              	 	Filter non-printing 
 1277              		characters.
 1278              	****************************/
 1279 2380 68230000 		_HEADER TCHAR,5,">CHAR"
 1279      053E4348 
 1279      415200BF 
 1280 238c 504700BF 		_NEST
 1281 2390 971B0000 		_DOLIT  0x7F
 1281      7F000000 
 1282 2398 0D1D0000 		_ADR	ANDD
 1283 239c C91C0000 		_ADR	DUPP	// mask msb
 1284 23a0 491E0000 		_ADR	BLANK
 1285 23a4 971B0000 		_DOLIT 	127
 1285      7F000000 
 1286 23ac F9210000 		_ADR	WITHI	// check for printable
 1287 23b0 311F0000 		_ADR	INVER
 1288 23b4 D71B0000 		_QBRAN	TCHA1
 1288      C8230000 
 1289 23bc B91C0000 		_ADR	DROP
 1290 23c0 971B0000 		_DOLIT 	'_'	// replace non-printables
 1290      5F000000 
 1291              	TCHA1:
 1292 23c8 1F1A0000 		  _UNNEST
 1293              	
 1294              	/************************
 1295              	    DEPTH	( -- n )
 1296              	 	Return the depth of
 1297              		the data stack.
 1298              	***********************/
 1299 23cc 84230000 		_HEADER DEPTH,5,"DEPTH"
 1299      05444550 
 1299      544800BF 
 1300 23d8 4FF47F42 		_MOV32 T2,SPP 
 1300      C2F20102 
 1301 23e0 A2EB0702 		SUB	T2,T2,DSP
 1302 23e4 47F8046D 		_PUSH
 1303 23e8 4FEAA206 		ASR	TOS,T2,#2
 1304 23ec FFF714BB 		_NEXT
 1305              	
 1306              	/*****************************
 1307              	    PICK	( ... +n -- ... w )
 1308              	 	Copy the nth stack item 
 1309              		to tos.
 1310              	******************************/
 1311 23f0 D0230000 		_HEADER PICK,4,"PICK"
 1311      04504943 
 1311      4B0000BF 
 1312 23fc 504700BF 		_NEST
 1313 2400 E91D0000 		_ADR	ONEP
 1314 2404 5D1E0000 		_ADR	CELLS
ARM GAS  forth.s 			page 98


 1315 2408 A51C0000 		_ADR	SPAT
 1316 240c 8D1D0000 		_ADR	PLUS
 1317 2410 1D1C0000 		_ADR	AT
 1318 2414 1F1A0000 		_UNNEST
 1319              	
 1320              	/*********************
 1321              	  Memory access
 1322              	*********************/
 1323              	
 1324              	/*************************
 1325              	    HERE	( -- a )
 1326              	 	Return the top of
 1327              		the code dictionary.
 1328              	*************************/
 1329 2418 F4230000 		_HEADER HERE,4,"HERE"
 1329      04484552 
 1329      450000BF 
 1330 2424 504700BF 		_NEST
 1331 2428 81210000 		_ADR	CPP
 1332 242c 1D1C0000 		_ADR	AT
 1333 2430 1F1A0000 		_UNNEST
 1334              	
 1335              	/***************************	
 1336              	    PAD	 ( -- a )
 1337              	 	Return the address of 
 1338              		a temporary buffer.
 1339              	***************************/
 1340 2434 1C240000 		_HEADER PAD,3,"PAD"
 1340      03504144 
 1341 243c 504700BF 		_NEST
 1342 2440 25240000 		_ADR	HERE
 1343 2444 971B0000 		_DOLIT 80
 1343      50000000 
 1344 244c 8D1D0000 		_ADR PLUS 
 1345 2450 1F1A0000 		_UNNEST
 1346              	
 1347              	/***********************
 1348              	    TIB	 ( -- a )
 1349              	 	Return the address 
 1350              		of the terminal 
 1351              		input buffer.
 1352              	************************/
 1353 2454 38240000 		_HEADER TIB,3,"TIB"
 1353      03544942 
 1354 245c 47F8046D 		_PUSH
 1355 2460 266B     		ldr TOS,[UP,#TIBUF]
 1356 2462 FFF7D9BA 		_NEXT
 1357              	
 1358              	/*************************
 1359              	    @EXECUTE	( a -- )
 1360              	 	Execute vector stored
 1361              		in address a.
 1362              	*************************/
 1363 2466 58240000 		_HEADER ATEXE,8,"@EXECUTE"
 1363      08404558 
 1363      45435554 
 1363      4500
ARM GAS  forth.s 			page 99


 1364 2474 3500     		MOVS	WP,TOS
 1365 2476 57F8046B 		_POP
 1366 247a 2D68     		LDR	WP,[WP]
 1367 247c 45F00105 		ORR	WP,WP,#1
 1368 2480 18BF     	    IT NE 
 1369 2482 2847     		BXNE	WP
 1370 2484 FFF7C8BA 		_NEXT
 1371              	
 1372              	/*******************************
 1373              	    CMOVE	( b1 b2 u -- )
 1374              	 	Copy u bytes from b1 to b2.
 1375              	********************************/
 1376 2488 6A240000 		_HEADER CMOVE,5,"CMOVE"
 1376      05434D4F 
 1376      564500BF 
 1377 2494 57F8042B 		LDR	T2,[DSP],#4
 1378 2498 57F8043B 		LDR	T3,[DSP],#4
 1379 249c 03E0     		B CMOV1
 1380              	CMOV0:
 1381 249e 13F8015B 		LDRB	WP,[T3],#1
 1382 24a2 02F8015B 		STRB	WP,[T2],#1
 1383              	CMOV1:
 1384 24a6 3600     		MOVS	TOS,TOS
 1385 24a8 02D0     		BEQ	CMOV2
 1386 24aa A6F10106 		SUB	TOS,TOS,#1
 1387 24ae F6E7     		B CMOV0
 1388              	CMOV2:
 1389 24b0 57F8046B 		_POP
 1390 24b4 FFF7B0BA 		_NEXT
 1391              	
 1392              	/***************************
 1393              	    MOVE	( a1 a2 u -- )
 1394              	 	Copy u words from a1 to a2.
 1395              	*******************************/
 1396 24b8 8C240000 		_HEADER MOVE,4,"MOVE"
 1396      044D4F56 
 1396      450000BF 
 1397 24c4 4FF00400 		MOV T0,#4 
 1398 24c8 06F10306 		ADD TOS,#3 
 1399 24cc 26F00306 		BIC TOS,#3
 1400 24d0 57F8041B 		LDR	T1,[DSP],#4 // dest
 1401 24d4 57F8042B 		LDR	T2,[DSP],#4 // src 
 1402 24d8 8A42     		CMP T2,T1 
 1403 24da 08D5     		BPL MOVE1
 1404 24dc 6FF00300 		MOV T0,#-4 
 1405 24e0 3144     		ADD T1,TOS
 1406 24e2 3244     		ADD T2,TOS 
 1407 24e4 01E0     		B MOVE3
 1408              	MOVE0:
 1409 24e6 1568     		LDR	WP,[T2]
 1410 24e8 0D60     		STR	WP,[T1]
 1411              	MOVE3: 
 1412 24ea 0144     		ADD T1,T0 
 1413 24ec 0244     		ADD T2,T0 
 1414              	MOVE1:
 1415 24ee 3600     		MOVS TOS,TOS
 1416 24f0 02D0     		BEQ	MOVE2
ARM GAS  forth.s 			page 100


 1417 24f2 A6F10406 		SUB	TOS,TOS,#4
 1418 24f6 F6E7     		B MOVE0
 1419              	MOVE2:
 1420 24f8 57F8046B 		_POP
 1421 24fc FFF78CBA 		_NEXT
 1422              	
 1423              	/**************************
 1424              	    FILL	( b u c -- )
 1425              	 	Fill u bytes of character
 1426              		c to area beginning at b.
 1427              	******************************/
 1428 2500 BC240000 		_HEADER FILL,4,"FILL"
 1428      0446494C 
 1428      4C0000BF 
 1429 250c 03CF     		LDMFD DSP!,{T0,T1} 
 1430 250e 0000     		MOVS T0,T0 
 1431 2510 03D0     		BEQ FILL2
 1432              	FILL1:
 1433 2512 01F8016B 		STRB	TOS,[T1],#1
 1434 2516 0138     		SUBS	T0,T0,#1
 1435 2518 FBD1     		BNE FILL1
 1436              	FILL2:
 1437 251a 57F8046B 		_POP
 1438 251e FFF77BBA 		_NEXT
 1439              	
 1440              	/*****************************
 1441              	    PACK$	( b u a -- a )
 1442              	 	Build a counted word with
 1443              		u characters from b. 
 1444              		Null fill.
 1445              	*****************************/
 1446 2522 04250000 		_HEADER PACKS,5,"PACK$"
 1446      05504143 
 1446      4B24
 1447 252c 504700BF 		_NEST
 1448 2530 71230000 		_ADR	ALGND
 1449 2534 C91C0000 		_ADR	DUPP
 1450 2538 711C0000 		_ADR	TOR			// strings only on cell boundary
 1451 253c ED1C0000 		_ADR	OVER
 1452 2540 8D1D0000 		_ADR	PLUS
 1453 2544 E91D0000 		_ADR	ONEP
 1454 2548 971B0000 		_DOLIT 	0xFFFFFFFC
 1454      FCFFFFFF 
 1455 2550 0D1D0000 		_ADR	ANDD			// count mod cell
 1456 2554 971B0000 		_DOLIT 	0
 1456      00000000 
 1457 255c D91C0000 		_ADR	SWAP
 1458 2560 091C0000 		_ADR	STORE			// null fill cell
 1459 2564 5D1C0000 		_ADR	RAT
 1460 2568 011F0000 		_ADR	DDUP
 1461 256c 291C0000 		_ADR	CSTOR
 1462 2570 E91D0000 		_ADR	ONEP			// save count
 1463 2574 D91C0000 		_ADR	SWAP
 1464 2578 95240000 		_ADR	CMOVE
 1465 257c 491C0000 		_ADR	RFROM
 1466 2580 1F1A0000 		_UNNEST   			// move string
 1467              	
ARM GAS  forth.s 			page 101


 1468              	/***********************************
 1469              	  Numeric output, single precision
 1470              	***********************************/
 1471              	
 1472              	/**************************
 1473              	    DIGIT	( u -- c )
 1474              	 	Convert digit u to 
 1475              		a character.
 1476              	***************************/
 1477 2584 26250000 		_HEADER DIGIT,5,"DIGIT"
 1477      05444947 
 1477      495400BF 
 1478 2590 504700BF 		_NEST
 1479 2594 971B0000 		_DOLIT 9
 1479      09000000 
 1480 259c ED1C0000 		_ADR	OVER
 1481 25a0 AD1F0000 		_ADR	LESS
 1482 25a4 971B0000 		_DOLIT	7
 1482      07000000 
 1483 25ac 0D1D0000 		_ADR	ANDD
 1484 25b0 8D1D0000 		_ADR	PLUS
 1485 25b4 971B0000 		_DOLIT	'0'
 1485      30000000 
 1486 25bc 8D1D0000 		_ADR	PLUS 
 1487 25c0 1F1A0000 		_UNNEST
 1488              	
 1489              	/*********************************
 1490              	    EXTRACT	( n base -- n c )
 1491              	 	Extract the least significant
 1492              		digit from n.
 1493              	**********************************/
 1494 25c4 88250000 		_HEADER EXTRC,7,"EXTRACT"
 1494      07455854 
 1494      52414354 
 1495 25d0 504700BF 		_NEST
 1496 25d4 971B0000 		_DOLIT 0
 1496      00000000 
 1497 25dc D91C0000 		_ADR	SWAP
 1498 25e0 25220000 		_ADR	UMMOD
 1499 25e4 D91C0000 		_ADR	SWAP
 1500 25e8 91250000 		_ADR	DIGIT
 1501 25ec 1F1A0000 		_UNNEST
 1502              	
 1503              	/***************************
 1504              	    <#	  ( -- )
 1505              	 	Initiate the numeric
 1506              		output process.
 1507              	****************************/
 1508 25f0 C8250000 		_HEADER BDIGS,2,"<#"
 1508      023C2300 
 1509 25f8 504700BF 		_NEST
 1510 25fc 3D240000 		_ADR	PAD
 1511 2600 55210000 		_ADR	HLD
 1512 2604 091C0000 		_ADR	STORE
 1513 2608 1F1A0000 		_UNNEST
 1514              	
 1515              	/*********************************
ARM GAS  forth.s 			page 102


 1516              	    HOLD	( c -- )
 1517              	 	Insert a character into the 
 1518              		numeric output string.
 1519              	**********************************/
 1520 260c F4250000 		_HEADER HOLD,4,"HOLD"
 1520      04484F4C 
 1520      440000BF 
 1521 2618 504700BF 		_NEST
 1522 261c 55210000 		_ADR	HLD
 1523 2620 1D1C0000 		_ADR	AT
 1524 2624 F91D0000 		_ADR	ONEM
 1525 2628 C91C0000 		_ADR	DUPP
 1526 262c 55210000 		_ADR	HLD
 1527 2630 091C0000 		_ADR	STORE
 1528 2634 291C0000 		_ADR	CSTOR
 1529 2638 1F1A0000 		_UNNEST
 1530              	
 1531              	/***********************
 1532              	    #	   ( u -- u )
 1533              	 	Extract one digit 
 1534              		from u and append 
 1535              		the digit to output 
 1536              		string.
 1537              	*************************/
 1538 263c 10260000 		_HEADER DIG,1,"#"
 1538      012300BF 
 1539 2644 504700BF 		_NEST
 1540 2648 E5200000 		_ADR	BASE
 1541 264c 1D1C0000 		_ADR	AT
 1542 2650 D1250000 		_ADR	EXTRC
 1543 2654 19260000 		_ADR	HOLD
 1544 2658 1F1A0000 		_UNNEST
 1545              	
 1546              	/***************************
 1547              	    #S	  ( u -- 0 )
 1548              	 	Convert u until all 
 1549              		digits are added to 
 1550              		the output string.
 1551              	***************************/
 1552 265c 40260000 		_HEADER DIGS,2,"#S"
 1552      02235300 
 1553 2664 504700BF 		_NEST
 1554              	DIGS1:
 1555 2668 45260000 	    _ADR	DIG
 1556 266c C91C0000 		_ADR	DUPP
 1557 2670 D71B0000 		_QBRAN 	DIGS2
 1557      80260000 
 1558 2678 EB1B0000 		_BRAN	DIGS1
 1558      68260000 
 1559              	DIGS2:
 1560 2680 1F1A0000 		  _UNNEST
 1561              	
 1562              	/*********************
 1563              	    SIGN	( n -- )
 1564              	 	Add a minus sign
 1565              		to the numeric
 1566              		output string.
ARM GAS  forth.s 			page 103


 1567              	*********************/
 1568 2684 60260000 		_HEADER SIGN,4,"SIGN"
 1568      04534947 
 1568      4E0000BF 
 1569 2690 504700BF 		_NEST
 1570 2694 FD1C0000 		_ADR	ZLESS
 1571 2698 D71B0000 		_QBRAN	SIGN1
 1571      AC260000 
 1572 26a0 971B0000 		_DOLIT '-'
 1572      2D000000 
 1573 26a8 19260000 		_ADR	HOLD
 1574              	SIGN1:
 1575 26ac 1F1A0000 		  _UNNEST
 1576              	
 1577              	/*************************
 1578              	    #>  ( w -- b u )
 1579              	 	Prepare the output 
 1580              		word to be TYPE'd.
 1581              	************************/
 1582 26b0 88260000 		_HEADER EDIGS,2,"#>"
 1582      02233E00 
 1583 26b8 504700BF 		_NEST
 1584 26bc B91C0000 		_ADR	DROP
 1585 26c0 55210000 		_ADR	HLD
 1586 26c4 1D1C0000 		_ADR	AT
 1587 26c8 3D240000 		_ADR	PAD
 1588 26cc ED1C0000 		_ADR	OVER
 1589 26d0 9D1D0000 		_ADR	SUBB
 1590 26d4 1F1A0000 		_UNNEST
 1591              	
 1592              	/**************************
 1593              	    str	 ( n -- b u )
 1594              	 	Convert a signed 
 1595              		integer to a numeric 
 1596              		string.
 1597              	hidden word used by compiler
 1598              	***************************/
 1599              	STRR:
 1600 26d8 504700BF 		_NEST
 1601 26dc C91C0000 		_ADR	DUPP
 1602 26e0 711C0000 		_ADR	TOR
 1603 26e4 551F0000 		_ADR	ABSS
 1604 26e8 F9250000 		_ADR	BDIGS
 1605 26ec 65260000 		_ADR	DIGS
 1606 26f0 491C0000 		_ADR	RFROM
 1607 26f4 91260000 		_ADR	SIGN
 1608 26f8 B9260000 		_ADR	EDIGS
 1609 26fc 1F1A0000 		_UNNEST
 1610              	
 1611              	/*************************
 1612              	    HEX	 ( -- )
 1613              	 	Use radix 16 as 
 1614              		base for numeric 
 1615              		conversions.
 1616              	*************************/
 1617 2700 B4260000 		_HEADER HEX,3,"HEX"
 1617      03484558 
ARM GAS  forth.s 			page 104


 1618 2708 504700BF 		_NEST
 1619 270c 971B0000 		_DOLIT 16
 1619      10000000 
 1620 2714 E5200000 		_ADR	BASE
 1621 2718 091C0000 		_ADR	STORE
 1622 271c 1F1A0000 		_UNNEST
 1623              	
 1624              	/************************
 1625              	    DECIMAL	( -- )
 1626              	 	Use radix 10 as base
 1627              		for numeric conversions.
 1628              	*************************/
 1629 2720 04270000 		_HEADER DECIM,7,"DECIMAL"
 1629      07444543 
 1629      494D414C 
 1630 272c 504700BF 		_NEST
 1631 2730 971B0000 		_DOLIT 10
 1631      0A000000 
 1632 2738 E5200000 		_ADR	BASE
 1633 273c 091C0000 		_ADR	STORE
 1634 2740 1F1A0000 		_UNNEST
 1635              	
 1636              	/************************************
 1637              	  Numeric input, single precision
 1638              	***********************************/
 1639              	
 1640              	/***********************************
 1641              	    DIGIT?	( c base -- u t )
 1642              	 	Convert a character to its 
 1643              		numeric value. A flag 
 1644              		indicates success.
 1645              	**********************************/
 1646 2744 24270000 		_HEADER DIGTQ,6,"DIGIT?"
 1646      06444947 
 1646      49543F00 
 1647 2750 504700BF 		_NEST
 1648 2754 711C0000 		_ADR	TOR
 1649 2758 971B0000 		_DOLIT 	'0'
 1649      30000000 
 1650 2760 9D1D0000 		_ADR	SUBB
 1651 2764 971B0000 		_DOLIT 9
 1651      09000000 
 1652 276c ED1C0000 		_ADR	OVER
 1653 2770 AD1F0000 		_ADR	LESS
 1654 2774 D71B0000 		_QBRAN	DGTQ1
 1654      9C270000 
 1655 277c 971B0000 		_DOLIT 7
 1655      07000000 
 1656 2784 9D1D0000 		_ADR	SUBB
 1657 2788 C91C0000 		_ADR	DUPP
 1658 278c 971B0000 		_DOLIT	10
 1658      0A000000 
 1659 2794 AD1F0000 		_ADR	LESS
 1660 2798 211D0000 		_ADR	ORR
 1661              	DGTQ1:
 1662 279c C91C0000 		_ADR	DUPP
 1663 27a0 491C0000 		_ADR	RFROM
ARM GAS  forth.s 			page 105


 1664 27a4 951F0000 		_ADR	ULESS
 1665 27a8 1F1A0000 		_UNNEST
 1666              	
 1667              	/**********************************
 1668              	    NUMBER?	( a -- n T | a F )
 1669              	 	Convert a number word to 
 1670              		integer. Push a flag on tos.
 1671              	**********************************/
 1672 27ac 48270000 		_HEADER NUMBQ,7,"NUMBER?"
 1672      074E554D 
 1672      4245523F 
 1673 27b8 504700BF 		_NEST
 1674 27bc E5200000 		_ADR	BASE
 1675 27c0 1D1C0000 		_ADR	AT
 1676 27c4 711C0000 		_ADR	TOR
 1677 27c8 971B0000 		_DOLIT	0
 1677      00000000 
 1678 27d0 ED1C0000 		_ADR	OVER
 1679 27d4 4D200000 		_ADR	COUNT
 1680 27d8 ED1C0000 		_ADR	OVER
 1681 27dc 3D1C0000 		_ADR	CAT
 1682 27e0 971B0000 		_DOLIT '$'
 1682      24000000 
 1683 27e8 7D1F0000 		_ADR	EQUAL
 1684 27ec D71B0000 		_QBRAN	NUMQ1
 1684      08280000 
 1685 27f4 09270000 		_ADR	HEX
 1686 27f8 D91C0000 		_ADR	SWAP
 1687 27fc E91D0000 		_ADR	ONEP
 1688 2800 D91C0000 		_ADR	SWAP
 1689 2804 F91D0000 		_ADR	ONEM
 1690              	NUMQ1:
 1691 2808 ED1C0000 		_ADR	OVER
 1692 280c 3D1C0000 		_ADR	CAT
 1693 2810 971B0000 		_DOLIT	'-'
 1693      2D000000 
 1694 2818 7D1F0000 		_ADR	EQUAL
 1695 281c 711C0000 		_ADR	TOR
 1696 2820 D91C0000 		_ADR	SWAP
 1697 2824 5D1C0000 		_ADR	RAT
 1698 2828 9D1D0000 		_ADR	SUBB
 1699 282c D91C0000 		_ADR	SWAP
 1700 2830 5D1C0000 		_ADR	RAT
 1701 2834 8D1D0000 		_ADR	PLUS
 1702 2838 9D1E0000 		_ADR	QDUP
 1703 283c D71B0000 		_QBRAN	NUMQ6
 1703      D0280000 
 1704 2844 F91D0000 		_ADR	ONEM
 1705 2848 711C0000 		_ADR	TOR
 1706              	NUMQ2:
 1707 284c C91C0000 		_ADR	DUPP
 1708 2850 711C0000 		_ADR	TOR
 1709 2854 3D1C0000 		_ADR	CAT
 1710 2858 E5200000 		_ADR	BASE
 1711 285c 1D1C0000 		_ADR	AT
 1712 2860 51270000 		_ADR	DIGTQ
 1713 2864 D71B0000 		_QBRAN	NUMQ4
ARM GAS  forth.s 			page 106


 1713      B4280000 
 1714 286c D91C0000 		_ADR	SWAP
 1715 2870 E5200000 		_ADR	BASE
 1716 2874 1D1C0000 		_ADR	AT
 1717 2878 AD1D0000 		_ADR	STAR
 1718 287c 8D1D0000 		_ADR	PLUS
 1719 2880 491C0000 		_ADR	RFROM
 1720 2884 E91D0000 		_ADR	ONEP
 1721 2888 B91B0000 		_DONXT	NUMQ2
 1721      4C280000 
 1722 2890 5D1C0000 		_ADR	RAT
 1723 2894 D91C0000 		_ADR	SWAP
 1724 2898 B91C0000 		_ADR	DROP
 1725 289c D71B0000 		_QBRAN	NUMQ3
 1725      A8280000 
 1726 28a4 451F0000 		_ADR	NEGAT
 1727              	NUMQ3:
 1728 28a8 D91C0000 		_ADR	SWAP
 1729 28ac EB1B0000 		_BRAN	NUMQ5
 1729      CC280000 
 1730              	NUMQ4:
 1731 28b4 491C0000 		_ADR	RFROM
 1732 28b8 491C0000 		_ADR	RFROM
 1733 28bc D91E0000 		_ADR	DDROP
 1734 28c0 D91E0000 		_ADR	DDROP
 1735 28c4 971B0000 		_DOLIT	0
 1735      00000000 
 1736              	NUMQ5:
 1737 28cc C91C0000 		_ADR	DUPP
 1738              	NUMQ6:
 1739 28d0 491C0000 		_ADR	RFROM
 1740 28d4 D91E0000 		_ADR	DDROP
 1741 28d8 491C0000 		_ADR	RFROM
 1742 28dc E5200000 		_ADR	BASE
 1743 28e0 091C0000 		_ADR	STORE
 1744 28e4 1F1A0000 		_UNNEST
 1745              	
 1746              	/********************
 1747              	  console I/O
 1748              	********************/
 1749              	
 1750              	/**********************
 1751              	    SPACE	( -- )
 1752              	 	Send the blank 
 1753              		character to 
 1754              		the output device.
 1755              	************************/
 1756 28e8 B0270000 		_HEADER SPACE,5,"SPACE"
 1756      05535041 
 1756      434500BF 
 1757 28f4 504700BF 		_NEST
 1758 28f8 491E0000 		_ADR	BLANK
 1759 28fc A11A0000 		_ADR	EMIT
 1760 2900 1F1A0000 		_UNNEST
 1761              	
 1762              	/***************************
 1763              	    SPACES	( +n -- )
ARM GAS  forth.s 			page 107


 1764              	 	Send n spaces to the 
 1765              		output device.
 1766              	****************************/
 1767 2904 EC280000 		_HEADER SPACS,6,"SPACES"
 1767      06535041 
 1767      43455300 
 1768 2910 504700BF 		_NEST
 1769 2914 971B0000 		_DOLIT	0
 1769      00000000 
 1770 291c DD1F0000 		_ADR	MAX
 1771 2920 711C0000 		_ADR	TOR
 1772 2924 EB1B0000 		_BRAN	CHAR2
 1772      30290000 
 1773              	CHAR1:
 1774 292c F5280000 		_ADR	SPACE
 1775              	CHAR2:
 1776 2930 B91B0000 		_DONXT	CHAR1
 1776      2C290000 
 1777 2938 1F1A0000 		_UNNEST
 1778              	
 1779              	/***********************
 1780              	    TYPE	( b u -- )
 1781              	 	Output u characters 
 1782              		from b.
 1783              	************************/
 1784 293c 08290000 		_HEADER TYPEE,4,"TYPE"
 1784      04545950 
 1784      450000BF 
 1785 2948 504700BF 		_NEST
 1786 294c 711C0000 		_ADR  TOR   // ( a+1 -- R: u )
 1787 2950 EB1B0000 		_BRAN	TYPE2
 1787      64290000 
 1788              	TYPE1:  
 1789 2958 4D200000 		_ADR  COUNT
 1790 295c 8D230000 		_ADR TCHAR
 1791 2960 A11A0000 		_ADR EMIT
 1792              	TYPE2:  
 1793 2964 B91B0000 		_DONXT	TYPE1
 1793      58290000 
 1794 296c B91C0000 		_ADR	DROP
 1795 2970 1F1A0000 		_UNNEST
 1796              	
 1797              	/***************************
 1798              	    CR	  ( -- )
 1799              	 	Output a carriage return
 1800              		and a line feed.
 1801              	****************************/
 1802 2974 40290000 		_HEADER CR,2,"CR"
 1802      02435200 
 1803 297c 504700BF 		_NEST
 1804 2980 971B0000 		_DOLIT	CRR
 1804      0D000000 
 1805 2988 A11A0000 		_ADR	EMIT
 1806 298c 971B0000 		_DOLIT	LF
 1806      0A000000 
 1807 2994 A11A0000 		_ADR	EMIT
 1808 2998 1F1A0000 		_UNNEST
ARM GAS  forth.s 			page 108


 1809              	
 1810              	/******************************************
 1811              	  do_$	( -- a )
 1812              	  Return the address of a compiled string.
 1813              	  adjust return address to skip over it.
 1814              	hidden word used by compiler. 
 1815              	******************************************/
 1816              	DOSTR:
 1817 299c 504700BF 		_NEST     
 1818              	/* compiled string address is 2 levels deep */
 1819 29a0 491C0000 		_ADR	RFROM	// { -- a1 }
 1820 29a4 491C0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1821 29a8 C91C0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1822 29ac 4D200000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1823 29b0 8D1D0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1824 29b4 71230000 		_ADR	ALGND	//  end of string
 1825              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1826 29b8 711C0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1827 29bc D91C0000 		_ADR	SWAP	//  count tugged
 1828 29c0 711C0000 		_ADR	TOR     //  ( -- a2) is string address
 1829 29c4 1F1A0000 		_UNNEST
 1830              	
 1831              	/******************************************
 1832              	    $"|	( -- a )
 1833              	 	Run time routine compiled by _". 
 1834              		Return address of a compiled string.
 1835              	hidden word used by compiler
 1836              	*****************************************/
 1837              	STRQP:
 1838 29c8 504700BF 		_NEST
 1839 29cc 9D290000 		_ADR	DOSTR
 1840 29d0 1F1A0000 		_UNNEST			// force a call to dostr
 1841              	
 1842              	/*******************************
 1843              	    .$	( a -- )
 1844              	 	Run time routine of ." 
 1845              		Output a compiled string.
 1846              	hidden word used by compiler
 1847              	*******************************/
 1848              	DOTST:
 1849 29d4 504700BF 		_NEST
 1850 29d8 4D200000 		_ADR	COUNT // ( -- a+1 c )
 1851 29dc 49290000 		_ADR	TYPEE
 1852 29e0 1F1A0000 		_UNNEST
 1853              	
 1854              	/**********************
 1855              	    ."|	( -- )
 1856              	 	Run time routine of ." 
 1857              		Output a compiled string.
 1858              	hidden word used by compiler
 1859              	*****************************/
 1860              	DOTQP:
 1861 29e4 504700BF 		_NEST
 1862 29e8 9D290000 		_ADR	DOSTR
 1863 29ec D5290000 		_ADR	DOTST
 1864 29f0 1F1A0000 		_UNNEST
 1865              	
ARM GAS  forth.s 			page 109


 1866              	/******************************
 1867              	    .R	  ( n +n -- )
 1868              	 	Display an integer in a 
 1869              		field of n columns, 
 1870              		right justified.
 1871              	*******************************/
 1872 29f4 78290000 		_HEADER DOTR,2,".R"
 1872      022E5200 
 1873 29fc 504700BF 		_NEST
 1874 2a00 711C0000 		_ADR	TOR
 1875 2a04 D9260000 		_ADR	STRR
 1876 2a08 491C0000 		_ADR	RFROM
 1877 2a0c ED1C0000 		_ADR	OVER
 1878 2a10 9D1D0000 		_ADR	SUBB
 1879 2a14 11290000 		_ADR	SPACS
 1880 2a18 49290000 		_ADR	TYPEE
 1881 2a1c 1F1A0000 		_UNNEST
 1882              	
 1883              	/*************************
 1884              	    U.R	 ( u +n -- )
 1885              	 	Display an unsigned 
 1886              		integer in n column, 
 1887              		right justified.
 1888              	***************************/
 1889 2a20 F8290000 		_HEADER UDOTR,3,"U.R"
 1889      03552E52 
 1890 2a28 504700BF 		_NEST
 1891 2a2c 711C0000 		_ADR	TOR
 1892 2a30 F9250000 		_ADR	BDIGS
 1893 2a34 65260000 		_ADR	DIGS
 1894 2a38 B9260000 		_ADR	EDIGS
 1895 2a3c 491C0000 		_ADR	RFROM
 1896 2a40 ED1C0000 		_ADR	OVER
 1897 2a44 9D1D0000 		_ADR	SUBB
 1898 2a48 11290000 		_ADR	SPACS
 1899 2a4c 49290000 		_ADR	TYPEE
 1900 2a50 1F1A0000 		_UNNEST
 1901              	
 1902              	/************************
 1903              	    U.	  ( u -- )
 1904              	 	Display an unsigned 
 1905              		integer in free format.
 1906              	***************************/
 1907 2a54 242A0000 		_HEADER UDOT,2,"U."
 1907      02552E00 
 1908 2a5c 504700BF 		_NEST
 1909 2a60 F9250000 		_ADR	BDIGS
 1910 2a64 65260000 		_ADR	DIGS
 1911 2a68 B9260000 		_ADR	EDIGS
 1912 2a6c F5280000 		_ADR	SPACE
 1913 2a70 49290000 		_ADR	TYPEE
 1914 2a74 1F1A0000 		_UNNEST
 1915              	
 1916              	/************************
 1917              	    .	   ( w -- )
 1918              	 	Display an integer 
 1919              		in free format, 
ARM GAS  forth.s 			page 110


 1920              		preceeded by a space.
 1921              	**************************/
 1922 2a78 582A0000 		_HEADER DOT,1,"."
 1922      012E00BF 
 1923 2a80 504700BF 		_NEST
 1924 2a84 E5200000 		_ADR	BASE
 1925 2a88 1D1C0000 		_ADR	AT
 1926 2a8c 971B0000 		_DOLIT 10
 1926      0A000000 
 1927 2a94 351D0000 		_ADR	XORR			// ?decimal
 1928 2a98 D71B0000 		_QBRAN	DOT1
 1928      A82A0000 
 1929 2aa0 5D2A0000 		_ADR	UDOT
 1930 2aa4 1F1A0000 		_UNNEST			// no,display unsigned
 1931              	DOT1:
 1932 2aa8 D9260000 	    _ADR	STRR
 1933 2aac F5280000 		_ADR	SPACE
 1934 2ab0 49290000 		_ADR	TYPEE
 1935 2ab4 1F1A0000 		_UNNEST			// yes, display signed
 1936              	
 1937              	/***********************
 1938              	    ?	   ( a -- )
 1939              	 	Display the contents
 1940              		in a memory cell.
 1941              	*************************/
 1942 2ab8 7C2A0000 		_HEADER QUEST,1,"?"
 1942      013F00BF 
 1943 2ac0 504700BF 		_NEST
 1944 2ac4 1D1C0000 		_ADR	AT
 1945 2ac8 812A0000 		_ADR	DOT
 1946 2acc 1F1A0000 		_UNNEST
 1947              	
 1948              	/**************
 1949              	  Parsing
 1950              	***************/
 1951              	
 1952              	/*********************************************
 1953              	    parse	( b u c -- b u delta //  string> )
 1954              	 	Scan word delimited by c. 
 1955              		Return found string and its offset.
 1956              	hidden word used by PARSE
 1957              	**********************************************/
 1958              	PARS:
 1959 2ad0 504700BF 		_NEST
 1960 2ad4 EF200000 		_ADR	TEMP
 1961 2ad8 091C0000 		_ADR	STORE
 1962 2adc ED1C0000 		_ADR	OVER
 1963 2ae0 711C0000 		_ADR	TOR
 1964 2ae4 C91C0000 		_ADR	DUPP
 1965 2ae8 D71B0000 		_QBRAN	PARS8
 1965      E42B0000 
 1966 2af0 F91D0000 		_ADR	ONEM
 1967 2af4 EF200000 		_ADR	TEMP
 1968 2af8 1D1C0000 		_ADR	AT
 1969 2afc 491E0000 		_ADR	BLANK
 1970 2b00 7D1F0000 		_ADR	EQUAL
 1971 2b04 D71B0000 		_QBRAN	PARS3
ARM GAS  forth.s 			page 111


 1971      582B0000 
 1972 2b0c 711C0000 		_ADR	TOR
 1973              	PARS1:
 1974 2b10 491E0000 		_ADR	BLANK
 1975 2b14 ED1C0000 		_ADR	OVER
 1976 2b18 3D1C0000 		_ADR	CAT			// skip leading blanks 
 1977 2b1c 9D1D0000 		_ADR	SUBB
 1978 2b20 FD1C0000 		_ADR	ZLESS
 1979 2b24 311F0000 		_ADR	INVER
 1980 2b28 D71B0000 		_QBRAN	PARS2
 1980      542B0000 
 1981 2b30 E91D0000 		_ADR	ONEP
 1982 2b34 B91B0000 		_DONXT	PARS1
 1982      102B0000 
 1983 2b3c 491C0000 		_ADR	RFROM
 1984 2b40 B91C0000 		_ADR	DROP
 1985 2b44 971B0000 		_DOLIT	0
 1985      00000000 
 1986 2b4c C91C0000 		_ADR	DUPP
 1987 2b50 1F1A0000 		_UNNEST
 1988              	PARS2:
 1989 2b54 491C0000 		_ADR	RFROM
 1990              	PARS3:
 1991 2b58 ED1C0000 		_ADR	OVER
 1992 2b5c D91C0000 		_ADR	SWAP
 1993 2b60 711C0000 		_ADR	TOR
 1994              	PARS4:
 1995 2b64 EF200000 		_ADR	TEMP
 1996 2b68 1D1C0000 		_ADR	AT
 1997 2b6c ED1C0000 		_ADR	OVER
 1998 2b70 3D1C0000 		_ADR	CAT
 1999 2b74 9D1D0000 		_ADR	SUBB			// scan for delimiter
 2000 2b78 EF200000 		_ADR	TEMP
 2001 2b7c 1D1C0000 		_ADR	AT
 2002 2b80 491E0000 		_ADR	BLANK
 2003 2b84 7D1F0000 		_ADR	EQUAL
 2004 2b88 D71B0000 		_QBRAN	PARS5
 2004      942B0000 
 2005 2b90 FD1C0000 		_ADR	ZLESS
 2006              	PARS5:
 2007 2b94 D71B0000 		_QBRAN	PARS6
 2007      B82B0000 
 2008 2b9c E91D0000 		_ADR	ONEP
 2009 2ba0 B91B0000 		_DONXT	PARS4
 2009      642B0000 
 2010 2ba8 C91C0000 		_ADR	DUPP
 2011 2bac 711C0000 		_ADR	TOR
 2012 2bb0 EB1B0000 		_BRAN	PARS7
 2012      CC2B0000 
 2013              	PARS6:
 2014 2bb8 491C0000 		_ADR	RFROM
 2015 2bbc B91C0000 		_ADR	DROP
 2016 2bc0 C91C0000 		_ADR	DUPP
 2017 2bc4 E91D0000 		_ADR	ONEP
 2018 2bc8 711C0000 		_ADR	TOR
 2019              	PARS7:
 2020 2bcc ED1C0000 		_ADR	OVER
ARM GAS  forth.s 			page 112


 2021 2bd0 9D1D0000 		_ADR	SUBB
 2022 2bd4 491C0000 		_ADR	RFROM
 2023 2bd8 491C0000 		_ADR	RFROM
 2024 2bdc 9D1D0000 		_ADR	SUBB
 2025 2be0 1F1A0000 		_UNNEST
 2026              	PARS8:
 2027 2be4 ED1C0000 		_ADR	OVER
 2028 2be8 491C0000 		_ADR	RFROM
 2029 2bec 9D1D0000 		_ADR	SUBB
 2030 2bf0 1F1A0000 		_UNNEST
 2031              	
 2032              	/************************************
 2033              	    PARSE	( c -- b u //  string> )
 2034              	 	Scan input stream and return 
 2035              		counted string delimited by c.
 2036              	************************************/
 2037 2bf4 BC2A0000 		_HEADER PARSE,5,"PARSE"
 2037      05504152 
 2037      534500BF 
 2038 2c00 504700BF 		_NEST
 2039 2c04 711C0000 		_ADR	TOR
 2040 2c08 5D240000 		_ADR	TIB
 2041 2c0c 19210000 		_ADR	INN
 2042 2c10 1D1C0000 		_ADR	AT
 2043 2c14 8D1D0000 		_ADR	PLUS			// current input buffer pointer
 2044 2c18 2D210000 		_ADR	NTIB
 2045 2c1c 1D1C0000 		_ADR	AT
 2046 2c20 19210000 		_ADR	INN
 2047 2c24 1D1C0000 		_ADR	AT
 2048 2c28 9D1D0000 		_ADR	SUBB			// remaining count
 2049 2c2c 491C0000 		_ADR	RFROM
 2050 2c30 D12A0000 		_ADR	PARS
 2051 2c34 19210000 		_ADR	INN
 2052 2c38 05200000 		_ADR	PSTOR
 2053 2c3c 1F1A0000 		_UNNEST
 2054              	
 2055              	/*******************************
 2056              	    .(	  ( -- )
 2057              	 	Output following string 
 2058              		up to next ) .
 2059              	******************************/
 2060 2c40 F82B0000 		_HEADER DOTPR,2,".("
 2060      022E2800 
 2061 2c48 504700BF 		_NEST
 2062 2c4c 971B0000 		_DOLIT	')'
 2062      29000000 
 2063 2c54 012C0000 		_ADR	PARSE
 2064 2c58 49290000 		_ADR	TYPEE
 2065 2c5c 1F1A0000 		_UNNEST
 2066              	
 2067              	/************************
 2068              	    (	   ( -- )
 2069              	 	Ignore following 
 2070              		string up to next )
 2071              		A comment.
 2072              	************************/
 2073 2c60 442C0000 		_HEADER PAREN,1,"("
ARM GAS  forth.s 			page 113


 2073      012800BF 
 2074 2c68 504700BF 		_NEST
 2075 2c6c 971B0000 		_DOLIT	')'
 2075      29000000 
 2076 2c74 012C0000 		_ADR	PARSE
 2077 2c78 D91E0000 		_ADR	DDROP
 2078 2c7c 1F1A0000 		_UNNEST
 2079              	
 2080              	/*******************
 2081              	    \	   ( -- )
 2082              	 	Ignore following 
 2083              		text till the 
 2084              		end of line.
 2085              	********************/
 2086 2c80 642C0000 		_HEADER BKSLA,1,"\\"
 2086      015C00BF 
 2087 2c88 504700BF 		_NEST
 2088 2c8c 2D210000 		_ADR	NTIB
 2089 2c90 1D1C0000 		_ADR	AT
 2090 2c94 19210000 		_ADR	INN
 2091 2c98 091C0000 		_ADR	STORE
 2092 2c9c 1F1A0000 		_UNNEST
 2093              	
 2094              	/******************************
 2095              	    CHAR	( -- c )
 2096              	 	Parse next word and
 2097              		return its first character.
 2098              	*******************************/
 2099 2ca0 842C0000 		_HEADER CHAR,4,"CHAR"
 2099      04434841 
 2099      520000BF 
 2100 2cac 504700BF 		_NEST
 2101 2cb0 491E0000 		_ADR	BLANK
 2102 2cb4 012C0000 		_ADR	PARSE
 2103 2cb8 B91C0000 		_ADR	DROP
 2104 2cbc 3D1C0000 		_ADR	CAT
 2105 2cc0 1F1A0000 		_UNNEST
 2106              	
 2107              	/**********************************
 2108              	    WORD	( c -- a //  string> )
 2109              	 	Parse a word from input stream
 2110              		and copy it to code dictionary.
 2111              	***********************************/
 2112 2cc4 A42C0000 		_HEADER WORDD,4,"WORD"
 2112      04574F52 
 2112      440000BF 
 2113 2cd0 504700BF 		_NEST
 2114 2cd4 012C0000 		_ADR	PARSE
 2115 2cd8 25240000 		_ADR	HERE
 2116 2cdc 291E0000 		_ADR	CELLP
 2117 2ce0 2D250000 		_ADR	PACKS
 2118 2ce4 1F1A0000 		_UNNEST
 2119              	
 2120              	/********************************
 2121              	    TOKEN	( -- a //  string> )
 2122              	 	Parse a word from input 
 2123              		stream and copy it to 
ARM GAS  forth.s 			page 114


 2124              		name dictionary.
 2125              	*********************************/
 2126 2ce8 C82C0000 		_HEADER TOKEN,5,"TOKEN"
 2126      05544F4B 
 2126      454E00BF 
 2127 2cf4 504700BF 		_NEST
 2128 2cf8 491E0000 		_ADR	BLANK
 2129 2cfc D12C0000 		_ADR	WORDD
 2130 2d00 1F1A0000 		_UNNEST
 2131              	
 2132              	/**********************
 2133              	  Dictionary search
 2134              	***********************/
 2135              	
 2136              	/*************************
 2137              	    NAME>	( na -- ca )
 2138              	 	Return a code address
 2139              		given a name address.
 2140              	**************************/
 2141 2d04 EC2C0000 		_HEADER NAMET,5,"NAME>"
 2141      054E414D 
 2141      453E00BF 
 2142 2d10 504700BF 		_NEST
 2143 2d14 4D200000 		_ADR	COUNT
 2144 2d18 971B0000 		_DOLIT	0x1F
 2144      1F000000 
 2145 2d20 0D1D0000 		_ADR	ANDD
 2146 2d24 8D1D0000 		_ADR	PLUS
 2147 2d28 71230000 		_ADR	ALGND
 2148 2d2c 1F1A0000 		_UNNEST
 2149              	
 2150              	/***************************************
 2151              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2152              	 	Compare u bytes in two strings. 
 2153              		Return 0 if identical.
 2154              	
 2155              	  Picatout 2020-12-01, 
 2156              	    Because of problem with .align 
 2157              		directive that doesn't fill 
 2158              		with zero's I had to change 
 2159              		the "SAME?" and "FIND" 
 2160              	 	words  to do a byte by byte comparison. 
 2161              	****************************************/
 2162 2d30 082D0000 		_HEADER SAMEQ,5,"SAME?"
 2162      0553414D 
 2162      453F00BF 
 2163 2d3c 504700BF 		_NEST
 2164 2d40 711C0000 		_ADR	TOR
 2165 2d44 EB1B0000 		_BRAN	SAME2
 2165      882D0000 
 2166              	SAME1:
 2167 2d4c ED1C0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2168 2d50 5D1C0000 		_ADR	RAT   // a1 a2 a1 u 
 2169 2d54 8D1D0000 		_ADR	PLUS  // a1 a2 a1+u 
 2170 2d58 3D1C0000 		_ADR	CAT	   // a1 a2 c1    		
 2171 2d5c ED1C0000 		_ADR	OVER  // a1 a2 c1 a2 
 2172 2d60 5D1C0000 		_ADR	RAT    
ARM GAS  forth.s 			page 115


 2173 2d64 8D1D0000 		_ADR	PLUS    
 2174 2d68 3D1C0000 		_ADR	CAT	  // a1 a2 c1 c2
 2175 2d6c 9D1D0000 		_ADR	SUBB  
 2176 2d70 9D1E0000 		_ADR	QDUP
 2177 2d74 D71B0000 		_QBRAN	SAME2
 2177      882D0000 
 2178 2d7c 491C0000 		_ADR	RFROM
 2179 2d80 B91C0000 		_ADR	DROP
 2180 2d84 1F1A0000 		_UNNEST	// strings not equal
 2181              	SAME2:
 2182 2d88 B91B0000 		_DONXT	SAME1
 2182      4C2D0000 
 2183 2d90 971B0000 		_DOLIT	0
 2183      00000000 
 2184 2d98 1F1A0000 		_UNNEST	// strings equal
 2185              	
 2186              	/***********************************
 2187              	    FIND	( a na -- ca na | a F )
 2188              	 	Search a vocabulary for a string.
 2189              		Return ca and na if succeeded.
 2190              	hidden word used by NAME?
 2191              	
 2192              	  Picatout 2020-12-01,  
 2193              		 Modified from original. 
 2194              	   See comment for word "SAME?" 
 2195              	************************************/
 2196              	FIND:
 2197 2d9c 504700BF 		_NEST
 2198 2da0 D91C0000 		_ADR	SWAP			// na a	
 2199 2da4 4D200000 		_ADR	COUNT			// na a+1 count
 2200 2da8 C91C0000 		_ADR	DUPP 
 2201 2dac EF200000 		_ADR	TEMP
 2202 2db0 091C0000 		_ADR	STORE			// na a+1 count 
 2203 2db4 711C0000 		_ADR  TOR		// na a+1  R: count  
 2204 2db8 D91C0000 		_ADR	SWAP			// a+1 na
 2205              	FIND1:
 2206 2dbc C91C0000 		_ADR	DUPP			// a+1 na na
 2207 2dc0 D71B0000 		_QBRAN	FIND6	// end of vocabulary
 2207      142E0000 
 2208 2dc8 C91C0000 		_ADR	DUPP			// a+1 na na
 2209 2dcc 3D1C0000 		_ADR	CAT			// a+1 na name1
 2210 2dd0 971B0000 		_DOLIT	MASKK
 2210      1FFFFFFF 
 2211 2dd8 0D1D0000 		_ADR	ANDD
 2212 2ddc 5D1C0000 		_ADR	RAT			// a+1 na name1 count 
 2213 2de0 351D0000 		_ADR	XORR			// a+1 na,  same length?
 2214 2de4 D71B0000 		_QBRAN	FIND2
 2214      FC2D0000 
 2215 2dec 391E0000 		_ADR	CELLM			// a+1 la
 2216 2df0 1D1C0000 		_ADR	AT			// a+1 next_na
 2217 2df4 EB1B0000 		_BRAN	FIND1			// try next word
 2217      BC2D0000 
 2218              	FIND2:   
 2219 2dfc E91D0000 		_ADR	ONEP			// a+1 na+1
 2220 2e00 EF200000 		_ADR	TEMP
 2221 2e04 1D1C0000 		_ADR	AT			// a+1 na+1 count
 2222 2e08 3D2D0000 		_ADR	SAMEQ		// a+1 na+1 ? 
ARM GAS  forth.s 			page 116


 2223              	FIND3:	
 2224 2e0c EB1B0000 		_BRAN	FIND4
 2224      2C2E0000 
 2225              	FIND6:	
 2226 2e14 491C0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2227 2e18 B91C0000 		_ADR	DROP			// a+1 0
 2228 2e1c D91C0000 		_ADR	SWAP			// 0 a+1
 2229 2e20 F91D0000 		_ADR	ONEM			// 0 a
 2230 2e24 D91C0000 		_ADR	SWAP			// a 0 
 2231 2e28 1F1A0000 		_UNNEST			// return without a match
 2232              	FIND4:	
 2233 2e2c D71B0000 		_QBRAN	FIND5			// a+1 na+1
 2233      482E0000 
 2234 2e34 F91D0000 		_ADR	ONEM			// a+1 na
 2235 2e38 391E0000 		_ADR	CELLM			// a+4 la
 2236 2e3c 1D1C0000 		_ADR	AT			// a+1 next_na
 2237 2e40 EB1B0000 		_BRAN	FIND1			// compare next name
 2237      BC2D0000 
 2238              	FIND5:	
 2239 2e48 491C0000 		_ADR	RFROM			// a+1 na+1 count
 2240 2e4c B91C0000 		_ADR	DROP			// a+1 na+1
 2241 2e50 D91C0000 		_ADR	SWAP			// na+1 a+1
 2242 2e54 B91C0000 		_ADR	DROP			// na+1
 2243 2e58 F91D0000 		_ADR	ONEM			// na
 2244 2e5c C91C0000 		_ADR	DUPP			// na na
 2245 2e60 112D0000 		_ADR	NAMET			// na ca
 2246 2e64 D91C0000 		_ADR	SWAP			// ca na
 2247 2e68 1F1A0000 		_UNNEST			//  return with a match
 2248              	
 2249              	/********************************
 2250              	    NAME?	( a -- ca na | a F )
 2251              	 	Search all context vocabularies 
 2252              		for a string.
 2253              	***********************************/
 2254 2e6c 342D0000 		_HEADER NAMEQ,5,"NAME?"
 2254      054E414D 
 2254      453F00BF 
 2255 2e78 504700BF 		_NEST
 2256 2e7c 6D210000 		_ADR	CNTXT
 2257 2e80 1D1C0000 		_ADR	AT
 2258 2e84 9D2D0000 		_ADR	FIND
 2259 2e88 1F1A0000 		_UNNEST
 2260              	
 2261              	/********************
 2262              	  console input
 2263              	********************/
 2264              	
 2265              	/**************************************
 2266              	   BKSP  ( bot eot cur -- bot eot cur )
 2267              	   Move cursor left by one character.
 2268              	hidden word used by KTAP
 2269              	***************************************/
 2270              	BKSP:
 2271 2e8c 504700BF 		_NEST
 2272 2e90 711C0000 		_ADR	TOR
 2273 2e94 ED1C0000 		_ADR	OVER
 2274 2e98 491C0000 		_ADR	RFROM
ARM GAS  forth.s 			page 117


 2275 2e9c D91C0000 		_ADR	SWAP
 2276 2ea0 ED1C0000 		_ADR	OVER
 2277 2ea4 351D0000 		_ADR	XORR
 2278 2ea8 D71B0000 		_QBRAN	BACK1
 2278      D42E0000 
 2279 2eb0 971B0000 		_DOLIT	BKSPP
 2279      08000000 
 2280 2eb8 A11A0000 		_ADR	TECHO
 2281 2ebc F91D0000 		_ADR	ONEM
 2282 2ec0 491E0000 		_ADR	BLANK
 2283 2ec4 A11A0000 		_ADR	TECHO
 2284 2ec8 971B0000 		_DOLIT	BKSPP
 2284      08000000 
 2285 2ed0 A11A0000 		_ADR	TECHO
 2286              	BACK1:
 2287 2ed4 1F1A0000 		  _UNNEST
 2288              	
 2289              	/****************************************
 2290              	   TAP	 ( bot eot cur c -- bot eot cur )
 2291              	   Accept and echo the key stroke 
 2292              	   and bump the cursor.
 2293              	hidden word used by KTAP 
 2294              	****************************************/
 2295              	TAP:
 2296 2ed8 504700BF 		_NEST
 2297 2edc C91C0000 		_ADR	DUPP
 2298 2ee0 A11A0000 		_ADR	TECHO
 2299 2ee4 ED1C0000 		_ADR	OVER
 2300 2ee8 291C0000 		_ADR	CSTOR
 2301 2eec E91D0000 		_ADR	ONEP
 2302 2ef0 1F1A0000 		_UNNEST
 2303              	
 2304              	/*******************************************
 2305              	    kTAP	( bot eot cur c -- bot eot cur )
 2306              	 	Process a key stroke, CR or backspace.
 2307              	hidden word used by ACCEPT 
 2308              	*******************************************/
 2309              	KTAP:
 2310              	TTAP:
 2311 2ef4 504700BF 		_NEST
 2312 2ef8 C91C0000 		_ADR	DUPP
 2313 2efc 971B0000 		_DOLIT	CRR
 2313      0D000000 
 2314 2f04 351D0000 		_ADR	XORR
 2315 2f08 D71B0000 		_QBRAN  KTAP2
 2315      382F0000 
 2316 2f10 971B0000 		_DOLIT	BKSPP
 2316      08000000 
 2317 2f18 351D0000 		_ADR	XORR
 2318 2f1c D71B0000 		_QBRAN	KTAP1
 2318      302F0000 
 2319 2f24 491E0000 		_ADR	BLANK
 2320 2f28 D92E0000 		_ADR	TAP
 2321 2f2c 1F1A0000 		_UNNEST
 2322              	//	.word	0			// patch
 2323              	KTAP1:
 2324 2f30 8D2E0000 		_ADR	BKSP
ARM GAS  forth.s 			page 118


 2325 2f34 1F1A0000 		_UNNEST
 2326              	KTAP2:
 2327 2f38 B91C0000 		_ADR	DROP
 2328 2f3c D91C0000 		_ADR	SWAP
 2329 2f40 B91C0000 		_ADR	DROP
 2330 2f44 C91C0000 		_ADR	DUPP
 2331 2f48 1F1A0000 		_UNNEST
 2332              	
 2333              	/************************************
 2334              	    ACCEPT	( b u -- b u )
 2335              	 	Accept characters to input 
 2336              		buffer. Return with actual count.
 2337              	*************************************/
 2338 2f4c 702E0000 		_HEADER ACCEP,6,"ACCEPT"
 2338      06414343 
 2338      45505400 
 2339 2f58 504700BF 		_NEST
 2340 2f5c ED1C0000 		_ADR	OVER
 2341 2f60 8D1D0000 		_ADR	PLUS
 2342 2f64 ED1C0000 		_ADR	OVER
 2343              	ACCP1:
 2344 2f68 011F0000 		_ADR	DDUP
 2345 2f6c 351D0000 		_ADR	XORR
 2346 2f70 D71B0000 		_QBRAN	ACCP4
 2346      B02F0000 
 2347 2f78 7D1A0000 		_ADR	KEY
 2348 2f7c C91C0000 		_ADR	DUPP
 2349 2f80 491E0000 		_ADR	BLANK
 2350 2f84 971B0000 		_DOLIT 127
 2350      7F000000 
 2351 2f8c F9210000 		_ADR	WITHI
 2352 2f90 D71B0000 		_QBRAN	ACCP2
 2352      A42F0000 
 2353 2f98 D92E0000 		_ADR	TAP
 2354 2f9c EB1B0000 		_BRAN	ACCP3
 2354      A82F0000 
 2355              	ACCP2:
 2356 2fa4 F52E0000 		_ADR	KTAP
 2357              	ACCP3:	  
 2358 2fa8 EB1B0000 		_BRAN	ACCP1
 2358      682F0000 
 2359              	ACCP4:
 2360 2fb0 B91C0000 		_ADR	DROP
 2361 2fb4 ED1C0000 		_ADR	OVER
 2362 2fb8 9D1D0000 		_ADR	SUBB
 2363 2fbc 1F1A0000 		_UNNEST
 2364              	
 2365              	/*****************************
 2366              	    QUERY	( -- )
 2367              	 	Accept input stream 
 2368              		to terminal input buffer.
 2369              	******************************/
 2370 2fc0 502F0000 		_HEADER QUERY,5,"QUERY"
 2370      05515545 
 2370      525900BF 
 2371 2fcc 504700BF 		_NEST
 2372 2fd0 5D240000 		_ADR	TIB
ARM GAS  forth.s 			page 119


 2373 2fd4 971B0000 		_DOLIT 80
 2373      50000000 
 2374 2fdc 592F0000 		_ADR	ACCEP
 2375 2fe0 2D210000 		_ADR	NTIB
 2376 2fe4 091C0000 		_ADR	STORE
 2377 2fe8 B91C0000 		_ADR	DROP
 2378 2fec 971B0000 		_DOLIT	0
 2378      00000000 
 2379 2ff4 19210000 		_ADR	INN
 2380 2ff8 091C0000 		_ADR	STORE
 2381 2ffc 1F1A0000 		_UNNEST
 2382              	
 2383              	/********************
 2384              	  Error handling
 2385              	********************/
 2386              	
 2387              	/*********************
 2388              	    ABORT	( a -- )
 2389              	 	Reset data stack 
 2390              		and jump to QUIT.
 2391              	**********************/
 2392 3000 C42F0000 		_HEADER ABORT,5,"ABORT"
 2392      0541424F 
 2392      525400BF 
 2393 300c 504700BF 		_NEST
 2394              	ABORT1:
 2395 3010 F5280000 		_ADR	SPACE
 2396 3014 4D200000 		_ADR	COUNT
 2397 3018 49290000 		_ADR	TYPEE
 2398 301c 971B0000 		_DOLIT	0X3F
 2398      3F000000 
 2399 3024 A11A0000 		_ADR	EMIT
 2400 3028 7D290000 		_ADR	CR
 2401 302c 95310000 		_ADR	PRESE
 2402 3030 EB1B0000 		_BRAN	QUIT
 2402      B4310000 
 2403              	
 2404              	/*******************************
 2405              	    _abort"	( f -- )
 2406              	 	Run time routine of ABORT"
 2407              		Abort with a message.
 2408              	hidden used by compiler 
 2409              	********************************/
 2410              	ABORQ:
 2411 3038 504700BF 		_NEST
 2412 303c 9D290000 		_ADR	DOSTR
 2413 3040 D91C0000 		_ADR	SWAP 
 2414 3044 D71B0000 		_QBRAN	1f	// text flag
 2414      54300000 
 2415 304c EB1B0000 		_BRAN	ABORT1
 2415      10300000 
 2416              	1:
 2417 3054 B91C0000 		_ADR	DROP
 2418 3058 1F1A0000 		_UNNEST			// drop error
 2419              	
 2420              	/************************
 2421              	  The text interpreter
ARM GAS  forth.s 			page 120


 2422              	************************/
 2423              	
 2424              	/***************************
 2425              	    $INTERPRET  ( a -- )
 2426              	 	Interpret a word. 
 2427              		If failed, try to 
 2428              		convert it to an integer.
 2429              	******************************/
 2430 305c 04300000 		_HEADER INTER,10,"$INTERPRET"
 2430      0A24494E 
 2430      54455250 
 2430      52455400 
 2431 306c 504700BF 		_NEST
 2432 3070 792E0000 		_ADR	NAMEQ
 2433 3074 9D1E0000 		_ADR	QDUP	// ?defined
 2434 3078 D71B0000 		_QBRAN	INTE1
 2434      AC300000 
 2435 3080 1D1C0000 		_ADR	AT
 2436 3084 971B0000 		_DOLIT	COMPO
 2436      40000000 
 2437 308c 0D1D0000 		_ADR	ANDD	// ?compile only lexicon bits
 2438 3090 39300000 		_ABORQ	13," compile only"
 2438      0D20636F 
 2438      6D70696C 
 2438      65206F6E 
 2438      6C7900BF 
 2439 30a4 AD1B0000 		_ADR	EXECU
 2440 30a8 1F1A0000 		_UNNEST			// execute defined word
 2441              	INTE1:
 2442 30ac B9270000 		_ADR	NUMBQ
 2443 30b0 D71B0000 		_QBRAN	INTE2
 2443      BC300000 
 2444 30b8 1F1A0000 		_UNNEST
 2445              	INTE2:
 2446 30bc 0D300000 		_ADR	ABORT	// error
 2447              	
 2448              	/******************************
 2449              	    [	   ( -- )
 2450              	 	Start the text interpreter.
 2451              	*******************************/
 2452 30c0 60300000 		_HEADER LBRAC,1,"["
 2452      015B00BF 
 2453 30c8 504700BF 		_NEST
 2454 30cc 971B0000 		_DOLIT	INTER
 2454      6C300000 
 2455 30d4 41210000 		_ADR	TEVAL
 2456 30d8 091C0000 		_ADR	STORE
 2457 30dc 1F1A0000 		_UNNEST
 2458              	
 2459              	/**********************
 2460              	    .OK	 ( -- )
 2461              	 	Display "ok" only 
 2462              		while interpreting.
 2463              	************************/
 2464 30e0 C4300000 		_HEADER DOTOK,3,".OK"
 2464      032E4F4B 
 2465 30e8 504700BF 		_NEST
ARM GAS  forth.s 			page 121


 2466 30ec 971B0000 		_DOLIT	INTER
 2466      6C300000 
 2467 30f4 41210000 		_ADR	TEVAL
 2468 30f8 1D1C0000 		_ADR	AT
 2469 30fc 7D1F0000 		_ADR	EQUAL
 2470 3100 D71B0000 		_QBRAN	DOTO1
 2470      10310000 
 2471 3108 E5290000 		_DOTQP	3," ok"
 2471      03206F6B 
 2472              	DOTO1:
 2473 3110 7D290000 		_ADR	CR
 2474 3114 1F1A0000 		_UNNEST
 2475              	
 2476              	/*************************
 2477              	    ?STACK	( -- )
 2478              	 	Abort if the data 
 2479              		stack underflows.
 2480              	************************/
 2481 3118 E4300000 		_HEADER QSTAC,6,"?STACK"
 2481      063F5354 
 2481      41434B00 
 2482 3124 504700BF 		_NEST
 2483 3128 D9230000 		_ADR	DEPTH
 2484 312c FD1C0000 		_ADR	ZLESS	// check only for underflow
 2485 3130 39300000 		_ABORQ	9,"underflow"
 2485      09756E64 
 2485      6572666C 
 2485      6F7700BF 
 2486 3140 1F1A0000 		_UNNEST
 2487              	
 2488              	/*******************
 2489              	    EVAL	( -- )
 2490              	 	Interpret the 
 2491              		input stream.
 2492              	*******************/
 2493 3144 1C310000 		_HEADER EVAL,4,"EVAL"
 2493      04455641 
 2493      4C0000BF 
 2494 3150 504700BF 		_NEST
 2495              	EVAL1:
 2496 3154 F52C0000 	    _ADR	TOKEN
 2497 3158 C91C0000 		_ADR	DUPP
 2498 315c 3D1C0000 		_ADR	CAT	// ?input stream empty
 2499 3160 D71B0000 		_QBRAN	EVAL2
 2499      7C310000 
 2500 3168 41210000 		_ADR	TEVAL
 2501 316c 75240000 		_ADR	ATEXE
 2502 3170 25310000 		_ADR	QSTAC	// evaluate input, check stack
 2503 3174 EB1B0000 		_BRAN	EVAL1
 2503      54310000 
 2504              	EVAL2:
 2505 317c B91C0000 		_ADR	DROP
 2506 3180 E9300000 		_ADR	DOTOK
 2507 3184 1F1A0000 		_UNNEST	// prompt
 2508              	
 2509              	/**********************************
 2510              	    PRESET	( -- )
ARM GAS  forth.s 			page 122


 2511              	 	Reset data stack pointer 
 2512              		and the terminal input buffer.
 2513              	**********************************/
 2514 3188 48310000 		_HEADER PRESE,6,"PRESET"
 2514      06505245 
 2514      53455400 
 2515 3194 504700BF 		_NEST 
 2516 3198 971B0000 		_DOLIT SPP 
 2516      00FF0120 
 2517 31a0 951C0000 		_ADR SPSTOR 
 2518 31a4 1F1A0000 		_UNNEST 
 2519              	
 2520              	/*********************
 2521              	    QUIT	( -- )
 2522              	 	Reset return stack 
 2523              		pointer and start 
 2524              		text interpreter.
 2525              	***********************/
 2526 31a8 8C310000 		_HEADER QUIT,4,"QUIT"
 2526      04515549 
 2526      540000BF 
 2527 31b4 971B0000 		_DOLIT RPP 
 2527      80FF0120 
 2528 31bc 851C0000 		_ADR RPSTOR 
 2529              	QUIT1:
 2530 31c0 C9300000 		_ADR	LBRAC			// start interpretation
 2531              	QUIT2:
 2532 31c4 CD2F0000 		_ADR	QUERY			// get input
 2533 31c8 51310000 		_ADR	EVAL
 2534 31cc EB1B0000 		_BRAN	QUIT2	// continue till error
 2534      C4310000 
 2535              	
 2536              	/***************************
 2537              		FORGET ( <string> -- )
 2538              		forget all definition 
 2539              		starting at <string>
 2540              	****************************/
 2541 31d4 AC310000 		_HEADER FORGET,6,"FORGET"
 2541      06464F52 
 2541      47455400 
 2542 31e0 504700BF 		_NEST 
 2543 31e4 F52C0000 		_ADR TOKEN 
 2544 31e8 C91C0000 		_ADR DUPP 
 2545 31ec D71B0000 		_QBRAN 9f 
 2545      28320000 
 2546 31f4 792E0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2547 31f8 9D1E0000 		_ADR QDUP 
 2548 31fc D71B0000 		_QBRAN 8f
 2548      24320000 
 2549 3204 391E0000 		_ADR CELLM // ( ca la )
 2550 3208 C91C0000 		_ADR DUPP 
 2551 320c 81210000 		_ADR CPP   
 2552 3210 091C0000 		_ADR STORE
 2553 3214 1D1C0000 		_ADR AT 
 2554 3218 A9210000 		_ADR LAST 
 2555 321c 091C0000 		_ADR STORE
 2556 3220 A1360000 		_ADR OVERT 
ARM GAS  forth.s 			page 123


 2557 3224 B91C0000 	8:  _ADR DROP 
 2558 3228 1F1A0000 	9:	_UNNEST 
 2559              	
 2560              		.p2align 2 
 2561              	
 2562              	/*****************
 2563              	  The compiler
 2564              	******************/
 2565              	
 2566              	/**************************************
 2567              	    '	   ( -- ca )
 2568              	 	Search context vocabularies 
 2569              		for the next word in input stream.
 2570              	***************************************/
 2571 322c D8310000 		_HEADER TICK,1,"'"
 2571      012700BF 
 2572 3234 504700BF 		_NEST
 2573 3238 F52C0000 		_ADR	TOKEN
 2574 323c 792E0000 		_ADR	NAMEQ	// ?defined
 2575 3240 D71B0000 		_QBRAN	TICK1
 2575      4C320000 
 2576 3248 1F1A0000 		_UNNEST	// yes, push code address
 2577              	TICK1:	
 2578 324c 0D300000 		_ADR ABORT	// no, error
 2579              	
 2580              	/***********************
 2581              	    ALLOT	( n -- )
 2582              	 	Allocate n bytes to 
 2583              		the ram area.
 2584              	************************/
 2585 3250 30320000 		_HEADER ALLOT,5,"ALLOT"
 2585      05414C4C 
 2585      4F5400BF 
 2586 325c 504700BF 		_NEST
 2587 3260 81210000 		_ADR	CPP
 2588 3264 05200000 		_ADR	PSTOR
 2589 3268 1F1A0000 		_UNNEST			// adjust code pointer
 2590              	
 2591              	/******************************
 2592              	    ,	   ( w -- )
 2593              	 	Compile an integer 
 2594              		into the code dictionary.
 2595              	******************************/
 2596 326c 54320000 		_HEADER COMMA,1,","
 2596      012C00BF 
 2597 3274 504700BF 		_NEST
 2598 3278 25240000 		_ADR	HERE
 2599 327c C91C0000 		_ADR	DUPP
 2600 3280 291E0000 		_ADR	CELLP	// cell boundary
 2601 3284 81210000 		_ADR	CPP
 2602 3288 091C0000 		_ADR	STORE
 2603 328c 091C0000 		_ADR	STORE
 2604 3290 1F1A0000 		_UNNEST	// adjust code pointer, compile
 2605              		.p2align 2 
 2606              	
 2607              	/************************************
 2608              	    [COMPILE]   ( -- //  string> )
ARM GAS  forth.s 			page 124


 2609              	 	Compile the next immediate word 
 2610              		into code dictionary.
 2611              	*************************************/
 2612 3294 70320000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2612      895B434F 
 2612      4D50494C 
 2612      455D00BF 
 2613 32a4 504700BF 		_NEST
 2614 32a8 35320000 		_ADR	TICK
 2615 32ac 75320000 		_ADR	COMMA
 2616 32b0 1F1A0000 		_UNNEST
 2617              	
 2618              	/****************************
 2619              	    COMPILE	( -- )
 2620              	 	Compile the next address 
 2621              		in colon list to code 
 2622              		dictionary.
 2623              	*******************************/
 2624 32b4 98320000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2624      47434F4D 
 2624      50494C45 
 2625 32c0 504700BF 		_NEST
 2626 32c4 491C0000 		_ADR	RFROM
 2627 32c8 C91C0000 		_ADR	DUPP 
 2628 32cc 1D1C0000 		_ADR	AT
 2629 32d0 971B0000 		_DOLIT 1 
 2629      01000000 
 2630 32d8 211D0000 		_ADR	ORR 
 2631 32dc 75320000 		_ADR	COMMA 
 2632 32e0 291E0000 		_ADR	CELLP 
 2633 32e4 711C0000 		_ADR	TOR 
 2634 32e8 1F1A0000 		_UNNEST	// adjust return address
 2635              	
 2636              	/*************************
 2637              	    LITERAL	( w -- )
 2638              	 	Compile tos to code 
 2639              		dictionary as an 
 2640              		integer literal.
 2641              	***************************/
 2642 32ec B8320000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2642      874C4954 
 2642      4552414C 
 2643 32f8 504700BF 		_NEST
 2644 32fc 971B0000 		_COMPI	DOLIT
 2644      961B0000 
 2644      FD360000 
 2645 3308 75320000 		_ADR	COMMA
 2646 330c 1F1A0000 		_UNNEST
 2647              	
 2648              	/********************
 2649              	    $,"	( -- )
 2650              	 	Compile a literal 
 2651              		string up to next " .
 2652              	hidden word 
 2653              	************************/
 2654              	STRCQ:
 2655 3310 504700BF 		_NEST
ARM GAS  forth.s 			page 125


 2656 3314 971B0000 		_DOLIT -4
 2656      FCFFFFFF 
 2657 331c 81210000 		_ADR	CPP
 2658 3320 05200000 		_ADR	PSTOR
 2659 3324 971B0000 		_DOLIT	'\"'
 2659      22000000 
 2660 332c D12C0000 		_ADR	WORDD			// move word to code dictionary
 2661 3330 4D200000 		_ADR	COUNT
 2662 3334 8D1D0000 		_ADR	PLUS
 2663 3338 71230000 		_ADR	ALGND			// calculate aligned end of string
 2664 333c 81210000 		_ADR	CPP
 2665 3340 091C0000 		_ADR	STORE
 2666 3344 1F1A0000 		_UNNEST 			// adjust the code pointer
 2667              	
 2668              	/*******************
 2669              	//  Structures
 2670              	*******************/
 2671              	
 2672              	/*************************
 2673              	    FOR	 ( -- a )
 2674              	 	Start a FOR-NEXT loop 
 2675              		structure in a colon 
 2676              		definition.
 2677              	**************************/
 2678 3348 F0320000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2678      C3464F52 
 2679 3350 504700BF 		_NEST
 2680 3354 971B0000 		_COMPI	TOR
 2680      701C0000 
 2680      FD360000 
 2681 3360 25240000 		_ADR	HERE
 2682 3364 1F1A0000 		_UNNEST
 2683              	
 2684              	/**********************
 2685              	    BEGIN	( -- a )
 2686              	 	Start an infinite 
 2687              		or indefinite 
 2688              		loop structure.
 2689              	************************/
 2690 3368 4C330000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2690      C5424547 
 2690      494E00BF 
 2691 3374 504700BF 		_NEST
 2692 3378 25240000 		_ADR	HERE
 2693 337c 1F1A0000 		_UNNEST
 2694              		.p2align 2 
 2695              	
 2696              	/********************
 2697              	    NEXT	( a -- )
 2698              	 	Terminate a FOR-NEXT
 2699              		loop structure.
 2700              	**************************/
 2701 3380 6C330000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2701      C44E4558 
 2701      540000BF 
 2702 338c 504700BF 		_NEST
 2703 3390 971B0000 		_COMPI	DONXT
ARM GAS  forth.s 			page 126


 2703      B81B0000 
 2703      FD360000 
 2704 339c 75320000 		_ADR	COMMA
 2705 33a0 1F1A0000 		_UNNEST
 2706              	
 2707              	/***************************
 2708              		I ( -- n )
 2709              		stack for loop counter 
 2710              	***************************/
 2711 33a4 84330000 		_HEADER I,1+COMPO,"I"
 2711      414900BF 
 2712 33ac 47F8046D 		_PUSH 
 2713 33b0 D8F80060 		ldr TOS,[RSP]
 2714 33b4 FEF730BB 		_NEXT 
 2715              	
 2716              	/**********************
 2717              	    UNTIL	( a -- )
 2718              	 	Terminate a BEGIN-UNTIL
 2719              		indefinite loop structure.
 2720              	******************************/
 2721 33b8 A8330000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2721      C5554E54 
 2721      494C00BF 
 2722 33c4 504700BF 		_NEST
 2723 33c8 971B0000 		_COMPI	QBRAN
 2723      D61B0000 
 2723      FD360000 
 2724 33d4 75320000 		_ADR	COMMA
 2725 33d8 1F1A0000 		_UNNEST
 2726              	
 2727              	/**********************
 2728              	    AGAIN	( a -- )
 2729              	 	Terminate a BEGIN-AGAIN
 2730              		infinite loop structure.
 2731              	*****************************/
 2732 33dc BC330000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2732      C5414741 
 2732      494E00BF 
 2733 33e8 504700BF 		_NEST
 2734 33ec 971B0000 		_COMPI	BRAN
 2734      EA1B0000 
 2734      FD360000 
 2735 33f8 75320000 		_ADR	COMMA
 2736 33fc 1F1A0000 		_UNNEST
 2737              	
 2738              	/************************
 2739              	    IF	  ( -- A )
 2740              	 	Begin a conditional
 2741              		branch structure.
 2742              	**************************/
 2743 3400 E0330000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2743      C2494600 
 2744 3408 504700BF 		_NEST
 2745 340c 971B0000 		_COMPI	QBRAN
 2745      D61B0000 
 2745      FD360000 
 2746 3418 25240000 		_ADR	HERE
ARM GAS  forth.s 			page 127


 2747 341c 971B0000 		_DOLIT	4
 2747      04000000 
 2748 3424 81210000 		_ADR	CPP
 2749 3428 05200000 		_ADR	PSTOR
 2750 342c 1F1A0000 		_UNNEST
 2751              	
 2752              	/*************************
 2753              	    AHEAD	( -- A )
 2754              	 	Compile a forward 
 2755              		branch instruction.
 2756              	*************************/
 2757 3430 04340000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2757      C5414845 
 2757      414400BF 
 2758 343c 504700BF 		_NEST
 2759 3440 971B0000 		_COMPI	BRAN
 2759      EA1B0000 
 2759      FD360000 
 2760 344c 25240000 		_ADR	HERE
 2761 3450 971B0000 		_DOLIT	4
 2761      04000000 
 2762 3458 81210000 		_ADR	CPP
 2763 345c 05200000 		_ADR	PSTOR
 2764 3460 1F1A0000 		_UNNEST
 2765              	
 2766              	/**************************
 2767              	    REPEAT	( A a -- )
 2768              	 	Terminate a BEGIN-WHILE-REPEAT
 2769              		indefinite loop.
 2770              	**********************************/
 2771 3464 34340000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2771      C6524550 
 2771      45415400 
 2772 3470 504700BF 		_NEST
 2773 3474 E9330000 		_ADR	AGAIN
 2774 3478 25240000 		_ADR	HERE
 2775 347c D91C0000 		_ADR	SWAP
 2776 3480 091C0000 		_ADR	STORE
 2777 3484 1F1A0000 		_UNNEST
 2778              	
 2779              	/*********************
 2780              	    THEN	( A -- )
 2781              	 	Terminate a conditional
 2782              		branch structure.
 2783              	*****************************/
 2784 3488 68340000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2784      C4544845 
 2784      4E0000BF 
 2785 3494 504700BF 		_NEST
 2786 3498 25240000 		_ADR	HERE
 2787 349c D91C0000 		_ADR	SWAP
 2788 34a0 091C0000 		_ADR	STORE
 2789 34a4 1F1A0000 		_UNNEST
 2790              	
 2791              	/***************************
 2792              	    AFT	 ( a -- a A )
 2793              	 	Jump to THEN in a 
ARM GAS  forth.s 			page 128


 2794              		FOR-AFT-THEN-NEXT loop 
 2795              		the first time through.
 2796              	*****************************/
 2797 34a8 8C340000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2797      C3414654 
 2798 34b0 504700BF 		_NEST
 2799 34b4 B91C0000 		_ADR	DROP
 2800 34b8 3D340000 		_ADR	AHEAD
 2801 34bc 75330000 		_ADR	BEGIN
 2802 34c0 D91C0000 		_ADR	SWAP
 2803 34c4 1F1A0000 		_UNNEST
 2804              	
 2805              	/**********************
 2806              	    ELSE	( A -- A )
 2807              	 	Start the false 
 2808              		clause in an 
 2809              		IF-ELSE-THEN structure.
 2810              	****************************/
 2811 34c8 AC340000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 2811      C4454C53 
 2811      450000BF 
 2812 34d4 504700BF 		_NEST
 2813 34d8 3D340000 		_ADR	AHEAD
 2814 34dc D91C0000 		_ADR	SWAP
 2815 34e0 95340000 		_ADR	THENN
 2816 34e4 1F1A0000 		_UNNEST
 2817              	
 2818              	/**************************
 2819              	    WHILE	( a -- A a )
 2820              	 	Conditional branch out 
 2821              		of a BEGIN-WHILE-REPEAT loop.
 2822              	*********************************/
 2823 34e8 CC340000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 2823      C5574849 
 2823      4C4500BF 
 2824 34f4 504700BF 		_NEST
 2825 34f8 09340000 		_ADR	IFF
 2826 34fc D91C0000 		_ADR	SWAP
 2827 3500 1F1A0000 		_UNNEST
 2828              	
 2829              	/***********************************
 2830              	    ABORT"	( -- //  string> )
 2831              	 	Conditional abort with an 
 2832              		error message.
 2833              	***********************************/
 2834 3504 EC340000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 2834      8641424F 
 2834      52542200 
 2835 3510 504700BF 		_NEST
 2836 3514 971B0000 		_COMPI	ABORQ
 2836      38300000 
 2836      FD360000 
 2837 3520 11330000 		_ADR	STRCQ
 2838 3524 1F1A0000 		_UNNEST
 2839              	
 2840              	/******************************
 2841              	    $"	( -- //  string> )
ARM GAS  forth.s 			page 129


 2842              	 	Compile an inline 
 2843              		word literal.
 2844              	*****************************/
 2845 3528 08350000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 2845      C2242200 
 2846 3530 504700BF 		_NEST
 2847 3534 971B0000 		_COMPI	STRQP
 2847      C8290000 
 2847      FD360000 
 2848 3540 11330000 		_ADR	STRCQ
 2849 3544 1F1A0000 		_UNNEST
 2850              	
 2851              	/******************************
 2852              	    ."	( -- //  string> )
 2853              	 	Compile an inline word
 2854              		literal to be typed out 
 2855              		at run time.
 2856              	*******************************/
 2857 3548 2C350000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 2857      C22E2200 
 2858 3550 504700BF 		_NEST
 2859 3554 971B0000 		_COMPI	DOTQP
 2859      E4290000 
 2859      FD360000 
 2860 3560 11330000 		_ADR	STRCQ
 2861 3564 1F1A0000 		_UNNEST
 2862              	
 2863              	/*********************
 2864              	  Name compiler
 2865              	***********************/
 2866              	
 2867              	/**************************
 2868              	    ?UNIQUE	( a -- a )
 2869              	 	Display a warning 
 2870              		message if the word 
 2871              		already exists.
 2872              	**************************/
 2873 3568 4C350000 		_HEADER UNIQU,7,"?UNIQUE"
 2873      073F554E 
 2873      49515545 
 2874 3574 504700BF 		_NEST
 2875 3578 C91C0000 		_ADR	DUPP
 2876 357c 792E0000 		_ADR	NAMEQ			// ?name exists
 2877 3580 D71B0000 		_QBRAN	UNIQ1	// redefinitions are OK
 2877      A0350000 
 2878 3588 E5290000 		_DOTQP	7," reDef "		// but warn the user
 2878      07207265 
 2878      44656620 
 2879 3594 ED1C0000 		_ADR	OVER
 2880 3598 4D200000 		_ADR	COUNT
 2881 359c 49290000 		_ADR	TYPEE			// just in case its not planned
 2882              	UNIQ1:
 2883 35a0 B91C0000 		_ADR	DROP
 2884 35a4 1F1A0000 		_UNNEST
 2885              	
 2886              	/***********************
 2887              	    $,n	 ( na -- )
ARM GAS  forth.s 			page 130


 2888              	 	Build a new dictionary 
 2889              		name using the data at na.
 2890              	hidden word 
 2891              	*******************************/
 2892              	SNAME:
 2893 35a8 504700BF 		_NEST
 2894 35ac C91C0000 		_ADR	DUPP			//  na na
 2895 35b0 3D1C0000 		_ADR	CAT			//  ?null input
 2896 35b4 D71B0000 		_QBRAN	SNAM1
 2896      F0350000 
 2897 35bc 75350000 		_ADR	UNIQU			//  na
 2898 35c0 A9210000 		_ADR	LAST			//  na last
 2899 35c4 1D1C0000 		_ADR	AT			//  na la
 2900 35c8 75320000 		_ADR	COMMA			//  na
 2901 35cc C91C0000 		_ADR	DUPP			//  na na
 2902 35d0 A9210000 		_ADR	LAST			//  na na last
 2903 35d4 091C0000 		_ADR	STORE			//  na , save na for vocabulary link
 2904 35d8 4D200000 		_ADR	COUNT			//  na+1 count
 2905 35dc 8D1D0000 		_ADR	PLUS			//  na+1+count
 2906 35e0 71230000 		_ADR	ALGND			//  word boundary
 2907 35e4 81210000 		_ADR	CPP
 2908 35e8 091C0000 		_ADR	STORE			//  top of dictionary now
 2909 35ec 1F1A0000 		_UNNEST
 2910              	SNAM1:
 2911 35f0 C9290000 		_ADR	STRQP
 2912 35f4 07       		.byte	7
 2913 35f5 206E616D 		.ascii " name? "
 2913      653F20
 2914 35fc 0D300000 		_ADR	ABORT
 2915              	
 2916              	/************************
 2917              	    $COMPILE	( a -- )
 2918              	 	Compile next word to 
 2919              		code dictionary as 
 2920              		a token or literal.
 2921              	**************************/
 2922 3600 6C350000 		_HEADER SCOMP,8,"$COMPILE"
 2922      0824434F 
 2922      4D50494C 
 2922      450000BF 
 2923 3610 504700BF 		_NEST
 2924 3614 792E0000 		_ADR	NAMEQ
 2925 3618 9D1E0000 		_ADR	QDUP	// defined?
 2926 361c D71B0000 		_QBRAN	SCOM2
 2926      4C360000 
 2927 3624 1D1C0000 		_ADR	AT
 2928 3628 971B0000 		_DOLIT	IMEDD
 2928      80000000 
 2929 3630 0D1D0000 		_ADR	ANDD	// immediate?
 2930 3634 D71B0000 		_QBRAN	SCOM1
 2930      44360000 
 2931 363c AD1B0000 		_ADR	EXECU
 2932 3640 1F1A0000 		_UNNEST			// it's immediate, execute
 2933              	SCOM1:
 2934 3644 FD360000 		_ADR	CALLC			// it's not immediate, compile
 2935 3648 1F1A0000 		_UNNEST	
 2936              	SCOM2:
ARM GAS  forth.s 			page 131


 2937 364c B9270000 		_ADR	NUMBQ
 2938 3650 D71B0000 		_QBRAN	SCOM3
 2938      60360000 
 2939 3658 F9320000 		_ADR	LITER
 2940 365c 1F1A0000 		_UNNEST			// compile number as integer
 2941              	SCOM3: // compilation abort 
 2942 3660 69360000 		_ADR COLON_ABORT 
 2943 3664 0D300000 		_ADR	ABORT			// error
 2944              	
 2945              	/********************************
 2946              	 before aborting a compilation 
 2947              	 reset HERE and LAST
 2948              	 to previous values. 
 2949              	*******************************/
 2950              	COLON_ABORT:
 2951 3668 504700BF 		_NEST 
 2952 366c A9210000 		_ADR LAST 
 2953 3670 1D1C0000 		_ADR AT 
 2954 3674 391E0000 		_ADR CELLM 
 2955 3678 C91C0000 		_ADR DUPP 
 2956 367c 81210000 		_ADR CPP  
 2957 3680 091C0000 		_ADR STORE 
 2958 3684 1D1C0000 		_ADR AT 
 2959 3688 A9210000 		_ADR LAST 
 2960 368c 091C0000 		_ADR STORE 
 2961 3690 1F1A0000 		_UNNEST 
 2962              	
 2963              	/*********************
 2964              	    OVERT	( -- )
 2965              	 	Link a new word 
 2966              		into the current 
 2967              		vocabulary.
 2968              	**********************/
 2969 3694 04360000 		_HEADER OVERT,5,"OVERT"
 2969      054F5645 
 2969      525400BF 
 2970 36a0 504700BF 		_NEST
 2971 36a4 A9210000 		_ADR	LAST
 2972 36a8 1D1C0000 		_ADR	AT
 2973 36ac 6D210000 		_ADR	CNTXT
 2974 36b0 091C0000 		_ADR	STORE
 2975 36b4 1F1A0000 		_UNNEST
 2976              	
 2977              	/**********************
 2978              	    ;  ( -- )
 2979              	 	Terminate a colon
 2980              		definition.
 2981              	***********************/
 2982 36b8 98360000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 2982      C13B00BF 
 2983 36c0 504700BF 		_NEST
 2984 36c4 971B0000 		_DOLIT	UNNEST
 2984      1E1A0000 
 2985 36cc FD360000 		_ADR	CALLC
 2986 36d0 C9300000 		_ADR	LBRAC
 2987 36d4 A1360000 		_ADR	OVERT
 2988 36d8 1F1A0000 		_UNNEST
ARM GAS  forth.s 			page 132


 2989              	
 2990              	/******************
 2991              	    ]	   ( -- )
 2992              	 	Start compiling 
 2993              		the words in 
 2994              		the input stream.
 2995              	*********************/
 2996 36dc BC360000 		_HEADER RBRAC,1,"]"
 2996      015D00BF 
 2997 36e4 504700BF 		_NEST
 2998 36e8 971B0000 		_DOLIT	SCOMP
 2998      10360000 
 2999 36f0 41210000 		_ADR	TEVAL
 3000 36f4 091C0000 		_ADR	STORE
 3001 36f8 1F1A0000 		_UNNEST
 3002              	
 3003              	/*********************
 3004              	    BL.W	( ca -- )
 3005              	 	compile ca.
 3006              	hidden word used by compiler
 3007              	*****************************/
 3008              	CALLC:
 3009 36fc 504700BF 		_NEST
 3010 3700 971B0000 		_DOLIT 1 
 3010      01000000 
 3011 3708 211D0000 		_ADR ORR 
 3012 370c 75320000 		_ADR COMMA  
 3013 3710 1F1A0000 		_UNNEST 
 3014              	
 3015              	
 3016              	/*************************
 3017              	 	:	( -- //  string> )
 3018              	 	Start a new colon 
 3019              		definition using 
 3020              		next word as its name.
 3021              	**************************/
 3022 3714 E0360000 		_HEADER COLON,1,":"
 3022      013A00BF 
 3023 371c 504700BF 		_NEST
 3024 3720 F52C0000 		_ADR	TOKEN
 3025 3724 A9350000 		_ADR	SNAME
 3026 3728 291A0000 		_ADR	COMPI_NEST 
 3027 372c E5360000 		_ADR	RBRAC
 3028 3730 1F1A0000 		_UNNEST
 3029              	
 3030              	/*************************
 3031              	    IMMEDIATE   ( -- )
 3032              	 	Make the last compiled 
 3033              		word an immediate word.
 3034              	***************************/
 3035 3734 18370000 		_HEADER IMMED,9,"IMMEDIATE"
 3035      09494D4D 
 3035      45444941 
 3035      544500BF 
 3036 3744 504700BF 		_NEST
 3037 3748 971B0000 		_DOLIT	IMEDD
 3037      80000000 
ARM GAS  forth.s 			page 133


 3038 3750 A9210000 		_ADR	LAST
 3039 3754 1D1C0000 		_ADR	AT
 3040 3758 1D1C0000 		_ADR	AT
 3041 375c 211D0000 		_ADR	ORR
 3042 3760 A9210000 		_ADR	LAST
 3043 3764 1D1C0000 		_ADR	AT
 3044 3768 091C0000 		_ADR	STORE
 3045 376c 1F1A0000 		_UNNEST
 3046              	
 3047              	/******************
 3048              	  Defining words
 3049              	******************/
 3050              	
 3051              	/***********************************
 3052              	    CONSTANT	( u -- //  string> )
 3053              	 	Compile a new constant.
 3054              	************************************/
 3055 3770 38370000 		_HEADER CONST,8,"CONSTANT"
 3055      08434F4E 
 3055      5354414E 
 3055      540000BF 
 3056 3780 504700BF 		_NEST 
 3057 3784 F52C0000 		_ADR	TOKEN
 3058 3788 A9350000 		_ADR	SNAME
 3059 378c A1360000 		_ADR	OVERT
 3060 3790 291A0000 		_ADR	COMPI_NEST
 3061 3794 971B0000 		_DOLIT	DOCON
 3061      80200000 
 3062 379c FD360000 		_ADR	CALLC
 3063 37a0 75320000 		_ADR	COMMA
 3064 37a4 971B0000 		_DOLIT	UNNEST 
 3064      1E1A0000 
 3065 37ac FD360000 		_ADR	CALLC  
 3066 37b0 1F1A0000 		_UNNEST
 3067              	
 3068              		.p2align 2 
 3069              	/****************************************
 3070              	 doDOES> ( -- a )
 3071              	 runtime action of DOES> 
 3072              	 leave parameter field address on stack 
 3073              	hidden word used by compiler 
 3074              	***************************************/
 3075              	DODOES:
 3076 37b4 504700BF 		_NEST 
 3077 37b8 491C0000 		_ADR	RFROM
 3078 37bc 291E0000 		_ADR	CELLP 
 3079 37c0 E91D0000 		_ADR	ONEP  
 3080 37c4 A9210000 		_ADR LAST 
 3081 37c8 1D1C0000 		_ADR AT
 3082 37cc 112D0000 		_ADR NAMET 
 3083 37d0 291E0000 		_ADR CELLP 
 3084 37d4 091C0000 		_ADR STORE  
 3085 37d8 1F1A0000 		_UNNEST 
 3086              	
 3087              		.p2align 2
 3088              	/**********************
 3089              	  DOES> ( -- )
ARM GAS  forth.s 			page 134


 3090              	  compile time action
 3091              	*************************/
 3092 37dc 74370000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3092      C5444F45 
 3092      533E00BF 
 3093 37e8 504700BF 		_NEST 
 3094 37ec 971B0000 		_DOLIT DODOES 
 3094      B4370000 
 3095 37f4 FD360000 		_ADR CALLC 
 3096 37f8 971B0000 		_DOLIT	UNNEST
 3096      1E1A0000 
 3097 3800 FD360000 		_ADR	CALLC 
 3098 3804 291A0000 		_ADR COMPI_NEST
 3099 3808 971B0000 		_DOLIT RFROM 
 3099      481C0000 
 3100 3810 FD360000 		_ADR	CALLC
 3101 3814 1F1A0000 		_UNNEST 
 3102              	
 3103              	
 3104              	/****************************
 3105              	  DEFER@ ( "name" -- a )
 3106              	  return value of code field 
 3107              	  of defered function. 
 3108              	******************************/
 3109 3818 E0370000 		_HEADER DEFERAT,6,"DEFER@"
 3109      06444546 
 3109      45524000 
 3110 3824 504700BF 		_NEST 
 3111 3828 35320000 		_ADR TICK
 3112 382c 291E0000 		_ADR CELLP 
 3113 3830 1D1C0000 		_ADR AT 
 3114 3834 F91D0000 		_ADR ONEM 
 3115 3838 1F1A0000 		_UNNEST 
 3116              	
 3117              	/*********************************
 3118              	 DEFER! ( "name1" "name2" -- )
 3119              	 assign an action to a defered word 
 3120              	************************************/
 3121 383c 1C380000 		_HEADER DEFERSTO,6,"DEFER!"
 3121      06444546 
 3121      45522100 
 3122 3848 504700BF 		_NEST 
 3123 384c 35320000 		_ADR TICK 
 3124 3850 E91D0000 		_ADR ONEP 
 3125 3854 35320000 		_ADR TICK 
 3126 3858 291E0000 		_ADR CELLP 
 3127 385c 091C0000 		_ADR STORE 
 3128 3860 1F1A0000 		_UNNEST
 3129              	
 3130              	/****************************
 3131              	  DEFER ( "name" -- )
 3132              	  create a defered definition
 3133              	*****************************/
 3134 3864 40380000 		_HEADER DEFER,5,"DEFER"
 3134      05444546 
 3134      455200BF 
 3135 3870 504700BF 		_NEST 
ARM GAS  forth.s 			page 135


 3136 3874 C1380000 		_ADR CREAT 
 3137 3878 971B0000 		_DOLIT UNNEST 
 3137      1E1A0000 
 3138 3880 FD360000 		_ADR CALLC 
 3139 3884 971B0000 		_DOLIT DEFER_NOP
 3139      A8380000 
 3140 388c E91D0000 		_ADR ONEP 
 3141 3890 A9210000 		_ADR LAST 
 3142 3894 1D1C0000 		_ADR AT 
 3143 3898 112D0000 		_ADR NAMET 
 3144 389c 291E0000 		_ADR CELLP 
 3145 38a0 091C0000 		_ADR STORE 
 3146 38a4 1F1A0000 		_UNNEST 
 3147              	DEFER_NOP:
 3148 38a8 504700BF 		_NEST  
 3149 38ac 951B0000 		_ADR NOP 
 3150 38b0 1F1A0000 		_UNNEST 
 3151              	
 3152              	/******************************
 3153              	    CREATE	( -- //  string> )
 3154              	 	Compile a new array entry 
 3155              		without allocating code space.
 3156              	***********************************/
 3157 38b4 68380000 		_HEADER CREAT,6,"CREATE"
 3157      06435245 
 3157      41544500 
 3158 38c0 504700BF 		_NEST 
 3159 38c4 F52C0000 		_ADR	TOKEN
 3160 38c8 A9350000 		_ADR	SNAME
 3161 38cc A1360000 		_ADR	OVERT
 3162 38d0 291A0000 		_ADR	COMPI_NEST 
 3163 38d4 971B0000 		_DOLIT	DOVAR
 3163      74200000 
 3164 38dc FD360000 		_ADR	CALLC
 3165 38e0 1F1A0000 		_UNNEST
 3166              	
 3167              	/*******************************
 3168              	    VARIABLE	( -- //  string> )
 3169              	 	Compile a new variable 
 3170              		initialized to 0.
 3171              	***********************************/
 3172 38e4 B8380000 		_HEADER VARIA,8,"VARIABLE"
 3172      08564152 
 3172      4941424C 
 3172      450000BF 
 3173 38f4 504700BF 		_NEST
 3174 38f8 C1380000 		_ADR	CREAT
 3175 38fc 971B0000 		_DOLIT	0
 3175      00000000 
 3176 3904 75320000 		_ADR	COMMA
 3177 3908 971B0000 		_DOLIT UNNEST
 3177      1E1A0000 
 3178 3910 FD360000 		_ADR	CALLC  
 3179 3914 1F1A0000 		_UNNEST
 3180              	
 3181              	/***********
 3182              	  Tools
ARM GAS  forth.s 			page 136


 3183              	***********/
 3184              	
 3185              	/*************************
 3186              	    dm+	 ( a u -- a )
 3187              	 	Dump u bytes from , 
 3188              		leaving a+u on the stack.
 3189              	hidden word used by DUMP 
 3190              	****************************/
 3191              	DMP:
 3192 3918 504700BF 		_NEST
 3193 391c ED1C0000 		_ADR	OVER
 3194 3920 971B0000 		_DOLIT	4
 3194      04000000 
 3195 3928 292A0000 		_ADR	UDOTR			// display address
 3196 392c F5280000 		_ADR	SPACE
 3197 3930 711C0000 		_ADR	TOR			// start count down loop
 3198 3934 EB1B0000 		_BRAN	PDUM2			// skip first pass
 3198      54390000 
 3199              	PDUM1:
 3200 393c C91C0000 	  _ADR	DUPP
 3201 3940 3D1C0000 		_ADR	CAT
 3202 3944 971B0000 		_DOLIT	3
 3202      03000000 
 3203 394c 292A0000 		_ADR	UDOTR			// display numeric data
 3204 3950 E91D0000 		_ADR	ONEP			// increment address
 3205              	PDUM2:
 3206 3954 B91B0000 	  _ADR	DONXT
 3207 3958 3C390000 		.word	PDUM1	// loop till done
 3208 395c 1F1A0000 		_UNNEST
 3209              		.p2align 2 
 3210              	//    DUMP	( a u -- )
 3211              	// 	Dump u bytes from a, in a formatted manner.
 3212              	
 3213              	/**********************
 3214              		DUMP ( a n -- )
 3215              		hex dump memory 
 3216              	*********************/
 3217 3960 E8380000 		_HEADER DUMP,4,"DUMP"
 3217      0444554D 
 3217      500000BF 
 3218 396c 504700BF 		_NEST
 3219 3970 E5200000 		_ADR	BASE
 3220 3974 1D1C0000 		_ADR	AT
 3221 3978 711C0000 		_ADR	TOR
 3222 397c 09270000 		_ADR	HEX			// save radix,set hex
 3223 3980 971B0000 		_DOLIT	16
 3223      10000000 
 3224 3988 11230000 		_ADR	SLASH			// change count to lines
 3225 398c 711C0000 		_ADR	TOR
 3226 3990 EB1B0000 		_BRAN	DUMP4			// start count down loop
 3226      C0390000 
 3227              	DUMP1:
 3228 3998 7D290000 	  _ADR	CR
 3229 399c 971B0000 		_DOLIT	16
 3229      10000000 
 3230 39a4 011F0000 		_ADR	DDUP
 3231 39a8 19390000 		_ADR	DMP			// display numeric
ARM GAS  forth.s 			page 137


 3232 39ac B11E0000 		_ADR	ROT
 3233 39b0 B11E0000 		_ADR	ROT
 3234 39b4 F5280000 		_ADR	SPACE
 3235 39b8 F5280000 		_ADR	SPACE
 3236 39bc 49290000 		_ADR	TYPEE			// display printable characters
 3237              	DUMP4:
 3238 39c0 B91B0000 	  _DONXT	DUMP1	// loop till done
 3238      98390000 
 3239              	DUMP3:
 3240 39c8 B91C0000 		_ADR	DROP
 3241 39cc 491C0000 		_ADR	RFROM
 3242 39d0 E5200000 		_ADR	BASE
 3243 39d4 091C0000 		_ADR	STORE			// restore radix
 3244 39d8 1F1A0000 		_UNNEST
 3245              	
 3246              	/**********************
 3247              	   .S	  ( ... -- ... )
 3248              	 	Display the contents 
 3249              		of the data stack.
 3250              	*************************/
 3251 39dc 64390000 		_HEADER DOTS,2,".S"
 3251      022E5300 
 3252 39e4 504700BF 		_NEST
 3253 39e8 F5280000 		_ADR	SPACE
 3254 39ec D9230000 		_ADR	DEPTH			// stack depth
 3255 39f0 711C0000 		_ADR	TOR			// start count down loop
 3256 39f4 EB1B0000 		_BRAN	DOTS2			// skip first pass
 3256      083A0000 
 3257              	DOTS1:
 3258 39fc 5D1C0000 		_ADR	RAT
 3259 3a00 FD230000 		_ADR	PICK
 3260 3a04 812A0000 		_ADR	DOT			// index stack, display contents
 3261              	DOTS2:
 3262 3a08 B91B0000 		_DONXT	DOTS1	// loop till done
 3262      FC390000 
 3263 3a10 F5280000 		_ADR	SPACE
 3264 3a14 1F1A0000 		_UNNEST
 3265              	
 3266              	/*****************************
 3267              	    >NAME	( ca -- na | F )
 3268              	 	Convert code address 
 3269              		to a name address.
 3270              	*****************************/
 3271 3a18 E0390000 		_HEADER TNAME,5,">NAME"
 3271      053E4E41 
 3271      4D4500BF 
 3272 3a24 504700BF 		_NEST
 3273 3a28 711C0000 		_ADR	TOR			//  
 3274 3a2c 6D210000 		_ADR	CNTXT			//  va
 3275 3a30 1D1C0000 		_ADR	AT			//  na
 3276              	TNAM1:
 3277 3a34 C91C0000 		_ADR	DUPP			//  na na
 3278 3a38 D71B0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3278      683A0000 
 3279 3a40 C91C0000 		_ADR	DUPP			//  na na
 3280 3a44 112D0000 		_ADR	NAMET			//  na ca
 3281 3a48 5D1C0000 		_ADR	RAT			//  na ca code
ARM GAS  forth.s 			page 138


 3282 3a4c 351D0000 		_ADR	XORR			//  na f --
 3283 3a50 D71B0000 		_QBRAN	TNAM2
 3283      683A0000 
 3284 3a58 391E0000 		_ADR	CELLM			//  la 
 3285 3a5c 1D1C0000 		_ADR	AT			//  next_na
 3286 3a60 EB1B0000 		_BRAN	TNAM1
 3286      343A0000 
 3287              	TNAM2:	
 3288 3a68 491C0000 		_ADR	RFROM
 3289 3a6c B91C0000 		_ADR	DROP			//  0|na --
 3290 3a70 1F1A0000 		_UNNEST			// 0
 3291              	
 3292              	/********************************
 3293              	    .ID	 ( na -- )
 3294              	 	Display the name at address.
 3295              	********************************/
 3296 3a74 1C3A0000 		_HEADER DOTID,3,".ID"
 3296      032E4944 
 3297 3a7c 504700BF 		_NEST
 3298 3a80 9D1E0000 		_ADR	QDUP			// if zero no name
 3299 3a84 D71B0000 		_QBRAN	DOTI1
 3299      A43A0000 
 3300 3a8c 4D200000 		_ADR	COUNT
 3301 3a90 971B0000 		_DOLIT	0x1F
 3301      1F000000 
 3302 3a98 0D1D0000 		_ADR	ANDD			// mask lexicon bits
 3303 3a9c 49290000 		_ADR	TYPEE
 3304 3aa0 1F1A0000 		_UNNEST			// display name string
 3305              	DOTI1:
 3306 3aa4 E5290000 		_DOTQP	9," {noName}"
 3306      09207B6E 
 3306      6F4E616D 
 3306      657D00BF 
 3307 3ab4 1F1A0000 		_UNNEST
 3308              	
 3309              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3310              	.if WANT_SEE 
 3311              	/*******************************
 3312              	    SEE	 ( -- //  string> )
 3313              	 	A simple decompiler.
 3314              	*******************************/
 3315              		_HEADER SEE,3,"SEE"
 3316              		_NEST
 3317              		_ADR	TICK	//  ca --, starting address
 3318              		_ADR	CR	
 3319              		_DOLIT	20
 3320              		_ADR	TOR
 3321              	SEE1:
 3322              		_ADR	CELLP			//  a
 3323              		_ADR	DUPP			//  a a
 3324              		_ADR	DECOMP		//  a
 3325              		_DONXT	SEE1
 3326              		_ADR	DROP
 3327              		_UNNEST
 3328              	
 3329              	/*************************
 3330              	 	DECOMPILE ( a -- )
ARM GAS  forth.s 			page 139


 3331              	 	Convert code in a.  
 3332              		Display name of command or as data.
 3333              	*************************************/
 3334              		_HEADER DECOMP,9,"DECOMPILE"
 3335              		_NEST
 3336              		_ADR	DUPP			//  a a
 3337              	// 	_ADR	TOR			//  a
 3338              		_ADR	AT			//  a code
 3339              		_ADR	DUPP			//  a code code
 3340              		_DOLIT	0xF800D000 //0xF800F800
 3341              		_ADR	ANDD
 3342              		_DOLIT	0xF000D000 //0xF800F000
 3343              		_ADR	EQUAL			//  a code ?
 3344              		_ADR	INVER 
 3345              		_QBRAN	DECOM2	//  not a command
 3346              		//  a valid_code --, extract address and display name
 3347              		MOVW	IP,#0xFFE
 3348              		MOV	WP,TOS
 3349              		LSL	TOS,TOS,#21		//  get bits 22-12
 3350              		ASR	TOS,TOS,#9		//  with sign extension
 3351              		LSR	WP,WP,#15		//  get bits 11-1
 3352              		AND	WP,WP,IP		//  retain only bits 11-1
 3353              		ORR	TOS,TOS,WP		//  get bits 22-1
 3354              		NOP
 3355              		_ADR	OVER			//  a offset a
 3356              		_ADR	PLUS			//  a target-4
 3357              		_ADR	CELLP			//  a target
 3358              		_ADR	TNAME			//  a na/0 --, is it a name?
 3359              		_ADR	QDUP			//  name address or zero
 3360              		_QBRAN	DECOM1
 3361              		_ADR	SPACE			//  a na
 3362              		_ADR	DOTID			//  a --, display name
 3363              	// 	_ADR	RFROM			//  a
 3364              		_ADR	DROP
 3365              		_UNNEST
 3366              	DECOM1:	// _ADR	RFROM		//  a
 3367              		_ADR	AT			//  data
 3368              		_ADR	UDOT			//  display data
 3369              		_UNNEST
 3370              	DECOM2:
 3371              		_ADR	UDOT
 3372              	// 	_ADR	RFROM
 3373              		_ADR	DROP
 3374              		_UNNEST
 3375              	.endif 
 3376              	
 3377              	/*********************
 3378              	    WORDS	( -- )
 3379              	 	Display the names 
 3380              		in the context vocabulary.
 3381              	*******************************/
 3382 3ab8 783A0000 		_HEADER WORDS,5,"WORDS"
 3382      05574F52 
 3382      445300BF 
 3383 3ac4 504700BF 		_NEST
 3384 3ac8 7D290000 		_ADR	CR
 3385 3acc 6D210000 		_ADR	CNTXT
ARM GAS  forth.s 			page 140


 3386 3ad0 1D1C0000 		_ADR	AT			// only in context
 3387              	WORS1:
 3388 3ad4 9D1E0000 		_ADR	QDUP			// ?at end of list
 3389 3ad8 D71B0000 		_QBRAN	WORS2
 3389      FC3A0000 
 3390 3ae0 C91C0000 		_ADR	DUPP
 3391 3ae4 F5280000 		_ADR	SPACE
 3392 3ae8 7D3A0000 		_ADR	DOTID			// display a name
 3393 3aec 391E0000 		_ADR	CELLM
 3394 3af0 1D1C0000 		_ADR	AT
 3395 3af4 EB1B0000 		_BRAN	WORS1
 3395      D43A0000 
 3396              	WORS2:
 3397 3afc 1F1A0000 		_UNNEST
 3398              	
 3399              	/****************
 3400              	  cold start
 3401              	*****************/
 3402              	
 3403              	/**********************************
 3404              	    VER	 ( -- n )
 3405              	 	Return the version 
 3406              		number of this implementation.
 3407              	hidden word used by COLD
 3408              	**********************************/
 3409              	VERSN:
 3410 3b00 504700BF 		_NEST
 3411 3b04 971B0000 		_DOLIT	VER*256+EXT
 3411      00010000 
 3412 3b0c 1F1A0000 		_UNNEST
 3413              	
 3414              	/*********************
 3415              	    hi	  ( -- )
 3416              	 	Display the sign-on 
 3417              		message.
 3418              	***********************/
 3419 3b10 BC3A0000 		_HEADER HI,2,"HI"
 3419      02484900 
 3420 3b18 504700BF 		_NEST
 3421 3b1c 7D290000 		_ADR	CR	// initialize I/O
 3422 3b20 E5290000 		_DOTQP	17, "beyond Jupiter, v" 
 3422      11626579 
 3422      6F6E6420 
 3422      4A757069 
 3422      7465722C 
 3423 3b38 E5200000 		_ADR	BASE
 3424 3b3c 1D1C0000 		_ADR	AT
 3425 3b40 09270000 		_ADR	HEX	// save radix
 3426 3b44 013B0000 		_ADR	VERSN
 3427 3b48 F9250000 		_ADR	BDIGS
 3428 3b4c 45260000 		_ADR	DIG
 3429 3b50 45260000 		_ADR	DIG
 3430 3b54 971B0000 		_DOLIT	'.'
 3430      2E000000 
 3431 3b5c 19260000 		_ADR	HOLD
 3432 3b60 65260000 		_ADR	DIGS
 3433 3b64 B9260000 		_ADR	EDIGS
ARM GAS  forth.s 			page 141


 3434 3b68 49290000 		_ADR	TYPEE	// format version number
 3435 3b6c E5200000 		_ADR	BASE
 3436 3b70 091C0000 		_ADR	STORE
 3437 3b74 7D290000 		_ADR	CR
 3438 3b78 1F1A0000 		_UNNEST			// restore radix
 3439              	
 3440              	/**********************
 3441              	 check if PS2 keyboard 
 3442              	 present.
 3443              	**********************/
 3444              	PS2_QUERY:
 3445 3b7c 504700BF 		_NEST 
 3446 3b80 A5150000 		_ADR KBD_RST
 3447 3b84 971B0000 		_DOLIT BAT_OK 
 3447      AA000000 
 3448 3b8c 351D0000 		_ADR XORR  
 3449 3b90 D71B0000 		_QBRAN 9f  
 3449      C43B0000 
 3450              	// no ps2 keyboard 
 3451              	// swith to serial console
 3452 3b98 7D290000 		_ADR CR 
 3453 3b9c E5290000 		_DOTQP 25,"no PS2 keyboard detected."
 3453      196E6F20 
 3453      50533220 
 3453      6B657962 
 3453      6F617264 
 3454 3bbc B9050000 		_ADR SERIAL 
 3455 3bc0 D1050000 		_ADR CONSOLE 
 3456 3bc4 1F1A0000 	9:	_UNNEST 
 3457              	
 3458              	/*************************
 3459              	   check PA8 to 
 3460              	   select console 
 3461              	   PA8 -> low  LOCAL 
 3462              	   PA8 -> high SERIAL 
 3463              	*************************/
 3464              	IF_SENSE:
 3465 3bc8 504700BF 		_NEST 
 3466 3bcc A1050000 		_ADR LOCAL 
 3467 3bd0 971B0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3467      10000240 
 3468 3bd8 1D1C0000 		_ADR AT 
 3469 3bdc 971B0000 		_DOLIT (1<<8)
 3469      00010000 
 3470 3be4 0D1D0000 		_ADR ANDD 
 3471 3be8 D71B0000 		_QBRAN 9f 
 3471      F43B0000 
 3472 3bf0 E91D0000 		_ADR ONEP 
 3473 3bf4 D1050000 	9:  _ADR CONSOLE 
 3474 3bf8 1F1A0000 		_UNNEST 
 3475              	
 3476              	
 3477              	/********************
 3478              	    COLD	( -- )
 3479              	 	The high level cold 
 3480              		start sequence.
 3481              	**************************/
ARM GAS  forth.s 			page 142


 3482 3bfc 143B0000 		.word	LINK 
 3483              		LINK = . 
 3484 3c00 04       	_LASTN:	.byte  4
 3485 3c01 434F4C44 		.ascii "COLD"
 3486 3c05 0000BF   		.p2align 2	
 3487              	COLD:
 3488 3c08 00B5FCF7 		_CALL forth_init 
 3488      ADFA5DF8 
 3488      04EB
 3489 3c12 DFF854C0 		ldr IP,=COLD1 
 3490 3c16 FDF7FFBE 		_NEXT
 3491 3c1a 00BF     		.p2align 2 
 3492              	COLD1:
 3493 3c1c 971B0000 		_DOLIT  0 
 3493      00000000 
 3494 3c24 6D1B0000 		_ADR ULED // turn off user LED 
 3495 3c28 971B0000 		_DOLIT	UZERO
 3495      F4030000 
 3496 3c30 971B0000 		_DOLIT	UPP
 3496      00000020 
 3497 3c38 971B0000 		_DOLIT	ULAST-UZERO
 3497      A8000000 
 3498 3c40 C5240000 		_ADR	MOVE 			// initialize user area
 3499 3c44 95310000 		_ADR	PRESE			// initialize stack and TIB
 3500 3c48 C93B0000 		_ADR	IF_SENSE 
 3501 3c4c 7D3B0000 		_ADR 	PS2_QUERY  
 3502 3c50 D1200000 		_ADR	TBOOT
 3503 3c54 75240000 		_ADR	ATEXE			// application boot
 3504 3c58 A1360000 		_ADR	OVERT
 3505 3c5c EB1B0000 		_BRAN	QUIT			// start interpretation
 3505      B4310000 
 3506              	COLD2:
 3507              		.p2align 2 	
 3508              	CTOP:
 3509 3c64 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3510              	
 3511              	
 3512 3c68 1C3C0000 	  .end 
ARM GAS  forth.s 			page 143


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 144


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 145


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:181    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:182    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:183    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:184    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:185    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:186    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:187    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:188    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:189    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:190    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:191    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:192    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:193    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:194    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:195    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:196    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:197    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:198    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:199    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:200    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:201    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:202    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:203    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:204    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:205    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:206    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:207    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:208    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:209    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:210    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:211    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:212    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:213    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:214    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:215    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:216    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:217    *ABS*:0000000000000310 NVIC_IABR4
ARM GAS  forth.s 			page 146


     stm32f411ce.inc:218    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:219    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:220    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:222    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:225    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:226    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:227    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:228    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:229    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:230    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:231    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:232    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:233    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:236    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:237    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:238    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:239    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:240    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:241    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:244    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:245    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:246    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:247    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:248    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:249    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:261    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:272    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000039 DMA2S1_IRQ
ARM GAS  forth.s 			page 147


     stm32f411ce.inc:278    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:279    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:280    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:281    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:282    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:288    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:289    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:290    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:294    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:295    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:296    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:297    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:299    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:300    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:301    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:302    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:306    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:309    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:310    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:311    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:312    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:313    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:314    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:315    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:316    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:317    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:318    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:319    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:320    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:321    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:322    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:323    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:324    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:325    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:326    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:327    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:328    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:331    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:333    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:334    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:335    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:336    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:337    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:338    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:339    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:342    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:344    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:345    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:346    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:347    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:348    *ABS*:0000000000000010 EXTI_SWIER
ARM GAS  forth.s 			page 148


     stm32f411ce.inc:349    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:352    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:353    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:355    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:357    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:358    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:359    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:360    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:361    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:362    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:363    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:364    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:365    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
             forth.s:2493   .text:0000000000003150 EVAL
             forth.s:1520   .text:0000000000002618 HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  forth.s 			page 149


          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:00000000000007c8 tv_out_isr
          ser-term.s:35     .text:00000000000004ac uart_rx_handler
           ps2_kbd.s:78     .text:00000000000010a4 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:97     .text:0000000000001a18 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2514   .text:0000000000003194 PRESE
             forth.s:280    .text:0000000000001b96 DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:893    .text:000000000000204c COUNT
             forth.s:1784   .text:0000000000002948 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:449    .text:0000000000001cc8 DUPP
             forth.s:405    .text:0000000000001c70 TOR
             forth.s:980    .text:00000000000020e4 BASE
             forth.s:351    .text:0000000000001c08 STORE
             forth.s:1922   .text:0000000000002a80 DOT
             forth.s:387    .text:0000000000001c48 RFROM
             forth.s:484    .text:0000000000001d0c ANDD
             forth.s:321    .text:0000000000001bd6 QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:165    .text:0000000000001aa0 EMIT
             forth.s:1756   .text:00000000000028f4 SPACE
              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:1802   .text:000000000000297c CR
ARM GAS  forth.s 			page 150


              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:384    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004da ser_init
             tvout.s:74     .text:0000000000000718 tv_init
           ps2_kbd.s:307    .text:00000000000012c4 kbd_init
         spi-flash.s:39     .text:00000000000016cc flash_spi_init
             forth.s:3487   .text:0000000000003c08 COLD
             forth.s:93     .text:0000000000001a10 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:474    .text:0000000000000332 gpio_config
              init.s:549    .text:00000000000003de gpio_out
              init.s:409    .text:00000000000002a8 nvic_set_priority
              init.s:564    .text:00000000000003f4 UZERO
              init.s:600    .text:000000000000049c ULAST
              init.s:418    .text:00000000000002c0 negative_irq
              init.s:430    .text:00000000000002da nvic_enable_irq
              init.s:447    .text:0000000000000304 nvic_disable_irq
              init.s:511    .text:000000000000039a input_pull
              init.s:504    .text:0000000000000388 output_type
              init.s:527    .text:00000000000003b0 gpio_speed
              init.s:565    .text:00000000000003f4 $d
             forth.s:3419   .text:0000000000003b18 HI
           ps2_kbd.s:396    .text:00000000000013c0 PS2_QKEY
             tvout.s:565    .text:0000000000000c88 TV_EMIT
             forth.s:2430   .text:000000000000306c INTER
             forth.s:3484   .text:0000000000003c00 _LASTN
             forth.s:3508   .text:0000000000003c64 CTOP
             forth.s:3483   .text:0000000000003c00 LINK
              init.s:605    .text:000000000000049c $d
          ser-term.s:33     .text:00000000000004ac $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000532 $d
          ser-term.s:90     .text:0000000000000536 _SER_QKEY
          ser-term.s:90     .text:0000000000000540 SER_QKEY
          ser-term.s:110    .text:000000000000056c $d
          ser-term.s:110    .text:0000000000000570 _SER_EMIT
          ser-term.s:110    .text:000000000000057c SER_EMIT
          ser-term.s:124    .text:0000000000000596 $d
          ser-term.s:124    .text:000000000000059a _LOCAL
          ser-term.s:124    .text:00000000000005a0 $t
          ser-term.s:124    .text:00000000000005a0 LOCAL
          ser-term.s:133    .text:00000000000005ac $d
          ser-term.s:133    .text:00000000000005b0 _SERIAL
          ser-term.s:133    .text:00000000000005b8 SERIAL
          ser-term.s:142    .text:00000000000005c4 $d
          ser-term.s:142    .text:00000000000005c8 _CONSOLE
          ser-term.s:142    .text:00000000000005d0 $t
          ser-term.s:142    .text:00000000000005d0 CONSOLE
          ser-term.s:164    .text:00000000000005f0 $d
          ser-term.s:164    .text:00000000000005f4 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000600 ANSI_PARAM
          ser-term.s:166    .text:0000000000000604 $d
ARM GAS  forth.s 			page 151


             forth.s:590    .text:0000000000001de8 ONEP
             forth.s:1201   .text:00000000000022d8 SLMOD
             forth.s:679    .text:0000000000001e9c QDUP
             forth.s:336    .text:0000000000001bea BRAN
             forth.s:541    .text:0000000000001d8c PLUS
             forth.s:598    .text:0000000000001df8 ONEM
             forth.s:100    .text:0000000000001a1e UNNEST
          ser-term.s:191    .text:0000000000000670 _ANSI_ESC
          ser-term.s:191    .text:0000000000000678 ANSI_ESC
          ser-term.s:193    .text:000000000000067c $d
          ser-term.s:203    .text:000000000000069c _SER_AT
          ser-term.s:203    .text:00000000000006a4 SER_AT
          ser-term.s:205    .text:00000000000006a8 $d
             forth.s:457    .text:0000000000001cd8 SWAP
          ser-term.s:219    .text:00000000000006d8 _SER_CLS
          ser-term.s:219    .text:00000000000006e0 $t
          ser-term.s:219    .text:00000000000006e0 SER_CLS
          ser-term.s:221    .text:00000000000006e4 $d
          ser-term.s:228    .text:0000000000000708 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000718 $t
             tvout.s:150    .text:00000000000007f4 state_vsync
             tvout.s:191    .text:0000000000000848 state_pre_video
             tvout.s:202    .text:000000000000085a state_video_out
             tvout.s:237    .text:00000000000008b8 state_post_video
             tvout.s:254    .text:00000000000008de tv_isr_exit
             tvout.s:180    .text:000000000000082e sync_end
             tvout.s:246    .text:00000000000008ca frame_end
ARM GAS  forth.s 			page 152


             tvout.s:264    .text:00000000000008e0 $d
             tvout.s:264    .text:00000000000008e4 _BACKCOLOR
             tvout.s:264    .text:00000000000008f0 BACKCOLOR
             tvout.s:271    .text:00000000000008fc $d
             tvout.s:271    .text:0000000000000900 _PENCOLOR
             tvout.s:271    .text:000000000000090a $t
             tvout.s:271    .text:000000000000090c PENCOLOR
             tvout.s:278    .text:0000000000000918 $d
             tvout.s:278    .text:000000000000091c _CURSOR_COL
             tvout.s:278    .text:0000000000000924 CURSOR_COL
             tvout.s:285    .text:0000000000000930 $d
             tvout.s:285    .text:0000000000000934 _CURSOR_ROW
             tvout.s:285    .text:0000000000000938 $t
             tvout.s:285    .text:0000000000000938 CURSOR_ROW
             tvout.s:292    .text:0000000000000944 $d
             tvout.s:292    .text:0000000000000948 _ROWY
             tvout.s:292    .text:000000000000094e $t
             tvout.s:292    .text:0000000000000950 ROWY
             tvout.s:299    .text:000000000000095c $d
             tvout.s:299    .text:0000000000000960 _COLX
             tvout.s:299    .text:0000000000000966 $t
             tvout.s:299    .text:0000000000000968 COLX
             tvout.s:306    .text:0000000000000974 $d
             tvout.s:306    .text:0000000000000978 _FONT
             tvout.s:306    .text:0000000000000980 FONT
             tvout.s:740    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:000000000000098c $d
             tvout.s:313    .text:0000000000000990 _VIDBUFF
             tvout.s:313    .text:0000000000000998 $t
             tvout.s:313    .text:0000000000000998 VIDBUFF
             tvout.s:325    .text:00000000000009a2 $d
             tvout.s:325    .text:00000000000009a6 _PLOT
             tvout.s:325    .text:00000000000009ac PLOT
             tvout.s:373    .text:0000000000000a30 plot_op
             tvout.s:341    .text:00000000000009d8 op_back
             tvout.s:350    .text:00000000000009f2 op_pen
             tvout.s:359    .text:0000000000000a0c op_invert
             tvout.s:363    .text:0000000000000a14 op_xor
             tvout.s:373    .text:0000000000000a30 $d
             tvout.s:378    .text:0000000000000a38 _VSYNC
             tvout.s:378    .text:0000000000000a3e $t
             tvout.s:378    .text:0000000000000a40 VSYNC
             tvout.s:386    .text:0000000000000a4a $d
             tvout.s:386    .text:0000000000000a4e _CLS
             tvout.s:386    .text:0000000000000a52 $t
             tvout.s:386    .text:0000000000000a54 CLS
             tvout.s:410    .text:0000000000000a96 $d
             tvout.s:410    .text:0000000000000a9a _CLRLINE
             tvout.s:410    .text:0000000000000aa2 $t
             tvout.s:410    .text:0000000000000aa4 CLRLINE
             tvout.s:412    .text:0000000000000aa8 $d
             forth.s:559    .text:0000000000001dac STAR
             forth.s:1428   .text:000000000000250c FILL
             tvout.s:427    .text:0000000000000adc _SCROLLUP
             tvout.s:427    .text:0000000000000ae8 SCROLLUP
             tvout.s:429    .text:0000000000000aec $d
             forth.s:550    .text:0000000000001d9c SUBB
ARM GAS  forth.s 			page 153


             forth.s:1396   .text:00000000000024c4 MOVE
             tvout.s:448    .text:0000000000000b34 _SCROLLDOWN
             tvout.s:448    .text:0000000000000b40 SCROLLDOWN
             tvout.s:450    .text:0000000000000b44 $d
             tvout.s:467    .text:0000000000000b84 _TV_CRLF
             tvout.s:467    .text:0000000000000b8c $t
             tvout.s:467    .text:0000000000000b8c TV_CRLF
             tvout.s:482    .text:0000000000000bae $d
             tvout.s:482    .text:0000000000000bb2 _RIGHT
             tvout.s:482    .text:0000000000000bb8 $t
             tvout.s:482    .text:0000000000000bb8 RIGHT
             tvout.s:495    .text:0000000000000bcc $d
             tvout.s:495    .text:0000000000000bd0 _LEFT
             tvout.s:495    .text:0000000000000bd8 LEFT
             tvout.s:511    .text:0000000000000c04 FONT_PIXEL
             tvout.s:518    .text:0000000000000c14 INCR_X
             tvout.s:525    .text:0000000000000c20 NEXT_PIXEL
             tvout.s:534    .text:0000000000000c28 CHAR_ROW
             tvout.s:536    .text:0000000000000c2c $d
             forth.s:729    .text:0000000000001f00 DDUP
             forth.s:396    .text:0000000000001c5c RAT
             forth.s:302    .text:0000000000001bb8 DONXT
             forth.s:720    .text:0000000000001eec TDROP
             tvout.s:553    .text:0000000000000c68 CHAR_FONT
             tvout.s:554    .text:0000000000000c68 $t
             tvout.s:565    .text:0000000000000c7c $d
             tvout.s:565    .text:0000000000000c80 _TV_EMIT
             tvout.s:565    .text:0000000000000c88 $t
             tvout.s:567    .text:0000000000000c8c $d
             forth.s:801    .text:0000000000001f94 ULESS
             tvout.s:595    .text:0000000000000d10 CTRL_KEY
             forth.s:361    .text:0000000000001c1c AT
             forth.s:689    .text:0000000000001eb0 ROT
             forth.s:379    .text:0000000000001c3c CAT
             tvout.s:662    .text:0000000000000df8 SHOW_CURSOR
             tvout.s:693    .text:0000000000000e80 HIDE_CURSOR
             forth.s:789    .text:0000000000001f7c EQUAL
             tvout.s:652    .text:0000000000000dd8 BACK_SPACE
             forth.s:441    .text:0000000000001cb8 DROP
             tvout.s:620    .text:0000000000000d80 CAR_RET
             tvout.s:631    .text:0000000000000d98 LN_FEED
             tvout.s:621    .text:0000000000000d80 $t
             tvout.s:622    .text:0000000000000d84 $d
             tvout.s:632    .text:0000000000000d98 $t
             tvout.s:633    .text:0000000000000d9c $d
             forth.s:502    .text:0000000000001d34 XORR
             tvout.s:653    .text:0000000000000dd8 $t
             tvout.s:654    .text:0000000000000ddc $d
             tvout.s:662    .text:0000000000000dec _SHOW_CURSOR
             tvout.s:662    .text:0000000000000df8 $t
             tvout.s:665    .text:0000000000000dfc $d
             forth.s:671    .text:0000000000001e8c TWOSL
             forth.s:369    .text:0000000000001c28 CSTOR
             forth.s:711    .text:0000000000001ed8 DDROP
             tvout.s:693    .text:0000000000000e74 _HIDE_CURSOR
             tvout.s:693    .text:0000000000000e80 $t
             tvout.s:696    .text:0000000000000e84 $d
ARM GAS  forth.s 			page 154


             forth.s:532    .text:0000000000001d7c LSHIFT
             forth.s:493    .text:0000000000001d20 ORR
             tvout.s:706    .text:0000000000000eac _TV_AT
             tvout.s:706    .text:0000000000000eb2 $t
             tvout.s:706    .text:0000000000000eb4 TV_AT
             tvout.s:721    .text:0000000000000ed8 $d
             tvout.s:721    .text:0000000000000edc _INPUT
             tvout.s:721    .text:0000000000000ee2 $t
             tvout.s:721    .text:0000000000000ee4 INPUT
             tvout.s:723    .text:0000000000000ee8 $d
             forth.s:1340   .text:000000000000243c PAD
             forth.s:2338   .text:0000000000002f58 ACCEP
             forth.s:467    .text:0000000000001cec OVER
             tvout.s:736    .rodata:0000000000000000 $d
             tvout.s:841    .text:0000000000000f14 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
ARM GAS  forth.s 			page 155


       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
ARM GAS  forth.s 			page 156


       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f20 sc_ascii
         mcSaite.inc:100    .text:0000000000000fd4 shifted
         mcSaite.inc:151    .text:0000000000001034 altchar
         mcSaite.inc:167    .text:0000000000001044 extended
         mcSaite.inc:191    .text:000000000000106c controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:00000000000010a2 $t
           ps2_kbd.s:179    .text:00000000000011ce send_bit
ARM GAS  forth.s 			page 157


           ps2_kbd.s:107    .text:0000000000001104 start_bit
           ps2_kbd.s:118    .text:0000000000001128 parity_bit
           ps2_kbd.s:125    .text:000000000000113c stop_bit
           ps2_kbd.s:152    .text:0000000000001192 store_code
           ps2_kbd.s:253    .text:0000000000001262 do_async_key
           ps2_kbd.s:204    .text:0000000000001212 send_parity
           ps2_kbd.s:211    .text:0000000000001224 send_stop
           ps2_kbd.s:218    .text:000000000000122e rx_ack_bit
           ps2_kbd.s:236    .text:000000000000124e is_async_key
           ps2_kbd.s:286    .text:00000000000012b2 async_keys
           ps2_kbd.s:378    .text:0000000000001396 table_scan
           ps2_kbd.s:260    .text:0000000000001274 set_async_key
           ps2_kbd.s:295    .text:00000000000012c0 async_jump
           ps2_kbd.s:265    .text:0000000000001282 shift_key
           ps2_kbd.s:273    .text:0000000000001292 set_reset
           ps2_kbd.s:268    .text:0000000000001288 ctrl_key
           ps2_kbd.s:271    .text:000000000000128e alt_key
           ps2_kbd.s:287    .text:00000000000012b2 $d
           ps2_kbd.s:340    .text:0000000000001340 $d
           ps2_kbd.s:340    .text:0000000000001344 _KEY_ASYNC
           ps2_kbd.s:340    .text:000000000000134e $t
           ps2_kbd.s:340    .text:0000000000001350 KEY_ASYNC
           ps2_kbd.s:350    .text:000000000000135e keycode
           ps2_kbd.s:365    .text:0000000000001386 wait_code
           ps2_kbd.s:396    .text:00000000000013b0 $d
           ps2_kbd.s:396    .text:00000000000013b4 _PS2_QKEY
           ps2_kbd.s:416    .text:000000000000140c inkey_exit
           ps2_kbd.s:418    .text:000000000000140e pause_key
           ps2_kbd.s:427    .text:0000000000001422 do_modifiers
           ps2_kbd.s:436    .text:000000000000143a shift_down
           ps2_kbd.s:440    .text:0000000000001440 altchar_down
           ps2_kbd.s:444    .text:0000000000001446 ctrl_down
           ps2_kbd.s:452    .text:0000000000001462 do_capslock
           ps2_kbd.s:478    .text:0000000000001486 kbd_send
           ps2_kbd.s:553    .text:000000000000157a kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001598 $d
           ps2_kbd.s:567    .text:000000000000159c _KBD_RST
           ps2_kbd.s:567    .text:00000000000015a4 $t
           ps2_kbd.s:567    .text:00000000000015a4 KBD_RST
           ps2_kbd.s:591    .text:00000000000015ec $d
           ps2_kbd.s:591    .text:00000000000015f0 _KBD_LED
           ps2_kbd.s:591    .text:00000000000015f8 $t
           ps2_kbd.s:591    .text:00000000000015f8 KBD_LED
           ps2_kbd.s:616    .text:000000000000164a $d
           ps2_kbd.s:616    .text:000000000000164e _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001658 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001680 $d
           ps2_kbd.s:633    .text:0000000000001684 _WKEY
           ps2_kbd.s:633    .text:0000000000001690 WKEY
           ps2_kbd.s:635    .text:0000000000001694 $d
           ps2_kbd.s:640    .text:00000000000016ac $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016cc $t
         spi-flash.s:80     .text:0000000000001768 $d
ARM GAS  forth.s 			page 158


         spi-flash.s:80     .text:000000000000176c _CHIP_SEL
         spi-flash.s:80     .text:0000000000001778 CHIP_SEL
         spi-flash.s:92     .text:0000000000001794 $d
         spi-flash.s:92     .text:0000000000001798 _CHIP_DSEL
         spi-flash.s:92     .text:00000000000017a2 $t
         spi-flash.s:92     .text:00000000000017a4 CHIP_DSEL
         spi-flash.s:108    .text:00000000000017d0 $d
         spi-flash.s:108    .text:00000000000017d4 _RD_BYTE
         spi-flash.s:108    .text:00000000000017dc $t
         spi-flash.s:108    .text:00000000000017dc RD_BYTE
         spi-flash.s:128    .text:0000000000001802 $d
         spi-flash.s:128    .text:0000000000001806 _WR_BYTE
         spi-flash.s:128    .text:000000000000180e $t
         spi-flash.s:128    .text:0000000000001810 WR_BYTE
         spi-flash.s:145    .text:0000000000001832 $d
         spi-flash.s:145    .text:0000000000001836 _WR_ENBL
         spi-flash.s:145    .text:000000000000183e $t
         spi-flash.s:145    .text:0000000000001840 WR_ENBL
         spi-flash.s:147    .text:0000000000001844 $d
         spi-flash.s:157    .text:0000000000001860 _RD_SR
         spi-flash.s:157    .text:0000000000001866 $t
         spi-flash.s:157    .text:0000000000001868 RD_SR
         spi-flash.s:159    .text:000000000000186c $d
         spi-flash.s:167    .text:0000000000001890 sr_cmd
         spi-flash.s:173    .text:0000000000001897 _SEND_ADR
         spi-flash.s:173    .text:00000000000018a0 $t
         spi-flash.s:173    .text:00000000000018a0 SEND_ADR
         spi-flash.s:175    .text:00000000000018a4 $d
             forth.s:523    .text:0000000000001d64 RSHIFT
         spi-flash.s:190    .text:00000000000018d8 _WAIT_DONE
         spi-flash.s:190    .text:00000000000018e2 $t
         spi-flash.s:190    .text:00000000000018e4 WAIT_DONE
         spi-flash.s:192    .text:00000000000018e8 $d
         spi-flash.s:205    .text:0000000000001918 _ERASE_SEC
         spi-flash.s:205    .text:0000000000001922 $t
         spi-flash.s:205    .text:0000000000001924 ERASE_SEC
         spi-flash.s:207    .text:0000000000001928 $d
         spi-flash.s:221    .text:0000000000001950 _RD_BLK
         spi-flash.s:221    .text:0000000000001958 RD_BLK
         spi-flash.s:223    .text:000000000000195c $d
         spi-flash.s:245    .text:00000000000019ac _WR_BLK
         spi-flash.s:245    .text:00000000000019b4 WR_BLK
         spi-flash.s:247    .text:00000000000019b8 $d
             forth.s:80     .text:0000000000001a04 $t
             forth.s:83     .text:0000000000001a04 TPUSH
             forth.s:88     .text:0000000000001a0a TPOP
             forth.s:113    .text:0000000000001a28 COMPI_NEST
             forth.s:126    .text:0000000000001a46 TSTDIN
             forth.s:133    .text:0000000000001a50 TSTDOUT
             forth.s:142    .text:0000000000001a5a $d
             forth.s:142    .text:0000000000001a5e _QKEY
             forth.s:142    .text:0000000000001a64 QKEY
             forth.s:143    .text:0000000000001a64 QRX
             forth.s:145    .text:0000000000001a68 $d
             forth.s:1363   .text:0000000000002474 ATEXE
             forth.s:153    .text:0000000000001a78 _KEY
             forth.s:153    .text:0000000000001a7c $t
ARM GAS  forth.s 			page 159


             forth.s:153    .text:0000000000001a7c KEY
             forth.s:155    .text:0000000000001a80 KEY1
             forth.s:156    .text:0000000000001a80 $d
             forth.s:165    .text:0000000000001a98 _EMIT
             forth.s:166    .text:0000000000001aa0 TECHO
             forth.s:168    .text:0000000000001aa4 $d
             forth.s:202    .text:0000000000001ab4 _RAND
             forth.s:202    .text:0000000000001abc RAND
             forth.s:204    .text:0000000000001ac0 $d
             forth.s:768    .text:0000000000001f54 ABSS
             forth.s:944    .text:0000000000002094 SEED
             forth.s:1214   .text:00000000000022f8 MODD
             forth.s:233    .text:0000000000001b30 _PAUSE
             forth.s:233    .text:0000000000001b36 $t
             forth.s:233    .text:0000000000001b38 PAUSE
             forth.s:235    .text:0000000000001b3c $d
             forth.s:962    .text:00000000000020bc TIMER
             forth.s:237    .text:0000000000001b44 PAUSE_LOOP
             forth.s:242    .text:0000000000001b5c PAUSE_EXIT
             forth.s:249    .text:0000000000001b64 _ULED
             forth.s:249    .text:0000000000001b6c ULED
             forth.s:258    .text:0000000000001b88 ULED_OFF
             forth.s:272    .text:0000000000001b8c $d
             forth.s:272    .text:0000000000001b90 _NOP
             forth.s:272    .text:0000000000001b94 $t
             forth.s:272    .text:0000000000001b94 NOP
             forth.s:289    .text:0000000000001ba0 $d
             forth.s:289    .text:0000000000001ba4 _EXECU
             forth.s:289    .text:0000000000001bac $t
             forth.s:289    .text:0000000000001bac EXECU
             forth.s:309    .text:0000000000001bc8 NEXT1
             forth.s:327    .text:0000000000001be4 QBRAN1
             forth.s:344    .text:0000000000001bf0 $d
             forth.s:344    .text:0000000000001bf4 _EXIT
             forth.s:344    .text:0000000000001bfc EXIT
             forth.s:345    .text:0000000000001bfc $d
             forth.s:351    .text:0000000000001c04 _STORE
             forth.s:351    .text:0000000000001c06 $t
             forth.s:361    .text:0000000000001c14 $d
             forth.s:361    .text:0000000000001c18 _AT
             forth.s:361    .text:0000000000001c1a $t
             forth.s:369    .text:0000000000001c20 $d
             forth.s:369    .text:0000000000001c24 _CSTOR
             forth.s:379    .text:0000000000001c34 $d
             forth.s:379    .text:0000000000001c38 _CAT
             forth.s:387    .text:0000000000001c40 $d
             forth.s:387    .text:0000000000001c44 _RFROM
             forth.s:396    .text:0000000000001c52 $d
             forth.s:396    .text:0000000000001c56 _RAT
             forth.s:405    .text:0000000000001c66 $d
             forth.s:405    .text:0000000000001c6a _TOR
             forth.s:414    .text:0000000000001c7a $d
             forth.s:414    .text:0000000000001c7e _RPSTOR
             forth.s:414    .text:0000000000001c82 $t
             forth.s:414    .text:0000000000001c84 RPSTOR
             forth.s:423    .text:0000000000001c8c $d
             forth.s:423    .text:0000000000001c90 _SPSTOR
ARM GAS  forth.s 			page 160


             forth.s:423    .text:0000000000001c94 $t
             forth.s:423    .text:0000000000001c94 SPSTOR
             forth.s:432    .text:0000000000001c9c $d
             forth.s:432    .text:0000000000001ca0 _SPAT
             forth.s:432    .text:0000000000001ca4 $t
             forth.s:432    .text:0000000000001ca4 SPAT
             forth.s:441    .text:0000000000001cac $d
             forth.s:441    .text:0000000000001cb0 _DROP
             forth.s:449    .text:0000000000001cbe $d
             forth.s:449    .text:0000000000001cc2 _DUPP
             forth.s:449    .text:0000000000001cc6 $t
             forth.s:457    .text:0000000000001cce $d
             forth.s:457    .text:0000000000001cd2 _SWAP
             forth.s:467    .text:0000000000001ce0 $d
             forth.s:467    .text:0000000000001ce4 _OVER
             forth.s:476    .text:0000000000001cf4 $d
             forth.s:476    .text:0000000000001cf8 _ZLESS
             forth.s:476    .text:0000000000001cfc ZLESS
             forth.s:484    .text:0000000000001d02 $d
             forth.s:484    .text:0000000000001d06 _ANDD
             forth.s:484    .text:0000000000001d0a $t
             forth.s:493    .text:0000000000001d16 $d
             forth.s:493    .text:0000000000001d1a _ORR
             forth.s:502    .text:0000000000001d2a $d
             forth.s:502    .text:0000000000001d2e _XORR
             forth.s:502    .text:0000000000001d32 $t
             forth.s:511    .text:0000000000001d3e $d
             forth.s:511    .text:0000000000001d42 _UPLUS
             forth.s:511    .text:0000000000001d46 $t
             forth.s:511    .text:0000000000001d48 UPLUS
             forth.s:523    .text:0000000000001d58 $d
             forth.s:523    .text:0000000000001d5c _RSHIFT
             forth.s:532    .text:0000000000001d6e $d
             forth.s:532    .text:0000000000001d72 _LSHIFT
             forth.s:541    .text:0000000000001d86 $d
             forth.s:541    .text:0000000000001d8a _PLUS
             forth.s:541    .text:0000000000001d8c $t
             forth.s:550    .text:0000000000001d94 $d
             forth.s:550    .text:0000000000001d98 _SUBB
             forth.s:550    .text:0000000000001d9a $t
             forth.s:559    .text:0000000000001da6 $d
             forth.s:559    .text:0000000000001daa _STAR
             forth.s:559    .text:0000000000001dac $t
             forth.s:568    .text:0000000000001db6 $d
             forth.s:568    .text:0000000000001dba _UMSTA
             forth.s:568    .text:0000000000001dbe $t
             forth.s:568    .text:0000000000001dc0 UMSTA
             forth.s:579    .text:0000000000001dcc $d
             forth.s:579    .text:0000000000001dd0 _MSTAR
             forth.s:579    .text:0000000000001dd4 MSTAR
             forth.s:590    .text:0000000000001de0 $d
             forth.s:590    .text:0000000000001de4 _ONEP
             forth.s:598    .text:0000000000001dee $d
             forth.s:598    .text:0000000000001df2 _ONEM
             forth.s:606    .text:0000000000001dfe $d
             forth.s:606    .text:0000000000001e02 _TWOP
             forth.s:606    .text:0000000000001e08 TWOP
ARM GAS  forth.s 			page 161


             forth.s:614    .text:0000000000001e0e $d
             forth.s:614    .text:0000000000001e12 _TWOM
             forth.s:614    .text:0000000000001e18 TWOM
             forth.s:622    .text:0000000000001e1e $d
             forth.s:622    .text:0000000000001e22 _CELLP
             forth.s:622    .text:0000000000001e28 $t
             forth.s:622    .text:0000000000001e28 CELLP
             forth.s:630    .text:0000000000001e2e $d
             forth.s:630    .text:0000000000001e32 _CELLM
             forth.s:630    .text:0000000000001e38 $t
             forth.s:630    .text:0000000000001e38 CELLM
             forth.s:638    .text:0000000000001e3e $d
             forth.s:638    .text:0000000000001e42 _BLANK
             forth.s:638    .text:0000000000001e48 BLANK
             forth.s:647    .text:0000000000001e52 $d
             forth.s:647    .text:0000000000001e56 _CELLS
             forth.s:647    .text:0000000000001e5c $t
             forth.s:647    .text:0000000000001e5c CELLS
             forth.s:655    .text:0000000000001e62 $d
             forth.s:655    .text:0000000000001e66 _CELLSL
             forth.s:655    .text:0000000000001e6c $t
             forth.s:655    .text:0000000000001e6c CELLSL
             forth.s:663    .text:0000000000001e72 $d
             forth.s:663    .text:0000000000001e76 _TWOST
             forth.s:663    .text:0000000000001e7c TWOST
             forth.s:671    .text:0000000000001e82 $d
             forth.s:671    .text:0000000000001e86 _TWOSL
             forth.s:679    .text:0000000000001e92 $d
             forth.s:679    .text:0000000000001e96 _QDUP
             forth.s:689    .text:0000000000001ea6 $d
             forth.s:689    .text:0000000000001eaa _ROT
             forth.s:689    .text:0000000000001eae $t
             forth.s:700    .text:0000000000001eba $d
             forth.s:700    .text:0000000000001ebe _NROT
             forth.s:700    .text:0000000000001ec4 NROT
             forth.s:711    .text:0000000000001ece $d
             forth.s:711    .text:0000000000001ed2 _DDROP
             forth.s:711    .text:0000000000001ed8 $t
             forth.s:720    .text:0000000000001ee2 $d
             forth.s:720    .text:0000000000001ee6 _TDROP
             forth.s:720    .text:0000000000001eec $t
             forth.s:729    .text:0000000000001ef6 $d
             forth.s:729    .text:0000000000001efa _DDUP
             forth.s:739    .text:0000000000001f0c $d
             forth.s:739    .text:0000000000001f10 _DPLUS
             forth.s:739    .text:0000000000001f14 DPLUS
             forth.s:752    .text:0000000000001f28 $d
             forth.s:752    .text:0000000000001f2c _INVER
             forth.s:752    .text:0000000000001f30 $t
             forth.s:752    .text:0000000000001f30 INVER
             forth.s:760    .text:0000000000001f36 $d
             forth.s:760    .text:0000000000001f3a _NEGAT
             forth.s:760    .text:0000000000001f44 NEGAT
             forth.s:768    .text:0000000000001f4a $d
             forth.s:768    .text:0000000000001f4e _ABSS
             forth.s:768    .text:0000000000001f52 $t
             forth.s:778    .text:0000000000001f5e $d
ARM GAS  forth.s 			page 162


             forth.s:778    .text:0000000000001f62 _ZEQUAL
             forth.s:778    .text:0000000000001f68 ZEQUAL
             forth.s:789    .text:0000000000001f76 $d
             forth.s:789    .text:0000000000001f7a _EQUAL
             forth.s:789    .text:0000000000001f7c $t
             forth.s:801    .text:0000000000001f8c $d
             forth.s:801    .text:0000000000001f90 _ULESS
             forth.s:813    .text:0000000000001fa4 $d
             forth.s:813    .text:0000000000001fa8 _LESS
             forth.s:813    .text:0000000000001faa $t
             forth.s:813    .text:0000000000001fac LESS
             forth.s:825    .text:0000000000001fbc $d
             forth.s:825    .text:0000000000001fc0 _GREAT
             forth.s:825    .text:0000000000001fc2 $t
             forth.s:825    .text:0000000000001fc4 GREAT
             forth.s:837    .text:0000000000001fd4 $d
             forth.s:837    .text:0000000000001fd8 _MAX
             forth.s:837    .text:0000000000001fdc $t
             forth.s:837    .text:0000000000001fdc MAX
             forth.s:848    .text:0000000000001fe8 $d
             forth.s:848    .text:0000000000001fec _MIN
             forth.s:848    .text:0000000000001ff0 $t
             forth.s:848    .text:0000000000001ff0 MIN
             forth.s:859    .text:0000000000001ffc $d
             forth.s:859    .text:0000000000002000 _PSTOR
             forth.s:859    .text:0000000000002004 PSTOR
             forth.s:871    .text:0000000000002014 $d
             forth.s:871    .text:0000000000002018 _DSTOR
             forth.s:871    .text:000000000000201c DSTOR
             forth.s:883    .text:0000000000002030 $d
             forth.s:883    .text:0000000000002034 _DAT
             forth.s:883    .text:0000000000002038 DAT
             forth.s:893    .text:0000000000002042 $d
             forth.s:893    .text:0000000000002046 _COUNT
             forth.s:893    .text:000000000000204c $t
             forth.s:903    .text:0000000000002058 $d
             forth.s:903    .text:000000000000205c _DNEGA
             forth.s:903    .text:0000000000002064 $t
             forth.s:903    .text:0000000000002064 DNEGA
             forth.s:920    .text:0000000000002074 DOVAR
             forth.s:931    .text:0000000000002080 DOCON
             forth.s:944    .text:000000000000208a $d
             forth.s:944    .text:000000000000208e _SEED
             forth.s:953    .text:000000000000209e $d
             forth.s:953    .text:00000000000020a2 _MSEC
             forth.s:953    .text:00000000000020a8 MSEC
             forth.s:962    .text:00000000000020b2 $d
             forth.s:962    .text:00000000000020b6 _TIMER
             forth.s:962    .text:00000000000020bc $t
             forth.s:971    .text:00000000000020c6 $d
             forth.s:971    .text:00000000000020ca _TBOOT
             forth.s:971    .text:00000000000020d0 $t
             forth.s:971    .text:00000000000020d0 TBOOT
             forth.s:980    .text:00000000000020da $d
             forth.s:980    .text:00000000000020de _BASE
             forth.s:990    .text:00000000000020ee TEMP
             forth.s:999    .text:00000000000020f8 $d
ARM GAS  forth.s 			page 163


             forth.s:999    .text:00000000000020fc _SPAN
             forth.s:999    .text:0000000000002104 SPAN
             forth.s:1008   .text:000000000000210e $d
             forth.s:1008   .text:0000000000002112 _INN
             forth.s:1008   .text:0000000000002116 $t
             forth.s:1008   .text:0000000000002118 INN
             forth.s:1018   .text:0000000000002122 $d
             forth.s:1018   .text:0000000000002126 _NTIB
             forth.s:1018   .text:000000000000212c NTIB
             forth.s:1027   .text:0000000000002136 $d
             forth.s:1027   .text:000000000000213a _TEVAL
             forth.s:1027   .text:0000000000002140 $t
             forth.s:1027   .text:0000000000002140 TEVAL
             forth.s:1037   .text:000000000000214a $d
             forth.s:1037   .text:000000000000214e _HLD
             forth.s:1037   .text:0000000000002152 $t
             forth.s:1037   .text:0000000000002154 HLD
             forth.s:1047   .text:000000000000215e $d
             forth.s:1047   .text:0000000000002162 _CNTXT
             forth.s:1047   .text:000000000000216a $t
             forth.s:1047   .text:000000000000216c CNTXT
             forth.s:1048   .text:000000000000216c CRRNT
             forth.s:1058   .text:0000000000002176 $d
             forth.s:1058   .text:000000000000217a _CPP
             forth.s:1058   .text:0000000000002180 CPP
             forth.s:1068   .text:000000000000218a $d
             forth.s:1068   .text:000000000000218e _FCP
             forth.s:1068   .text:0000000000002192 $t
             forth.s:1068   .text:0000000000002194 FCP
             forth.s:1078   .text:000000000000219e $d
             forth.s:1078   .text:00000000000021a2 _LAST
             forth.s:1078   .text:00000000000021a8 LAST
             forth.s:1092   .text:00000000000021b2 $d
             forth.s:1092   .text:00000000000021b6 _USER_BEGIN
             forth.s:1092   .text:00000000000021c4 USER_BEGIN
             forth.s:1096   .text:00000000000021cc USR_BGN_ADR
             forth.s:1097   .text:00000000000021cc $d
             forth.s:1103   .text:00000000000021d4 _USER_END
             forth.s:1103   .text:00000000000021e0 USER_END
             forth.s:1107   .text:00000000000021e8 USER_END_ADR
             forth.s:1108   .text:00000000000021e8 $d
             forth.s:1120   .text:00000000000021f0 _WITHI
             forth.s:1120   .text:00000000000021f8 WITHI
             forth.s:1122   .text:00000000000021fc $d
             forth.s:1137   .text:000000000000221c _UMMOD
             forth.s:1137   .text:0000000000002224 UMMOD
             forth.s:1141   .text:000000000000222e UMMOD0
             forth.s:1148   .text:000000000000223e UMMOD1
             forth.s:1154   .text:0000000000002248 UMMOD2
             forth.s:1167   .text:0000000000002254 $d
             forth.s:1167   .text:0000000000002258 _MSMOD
             forth.s:1167   .text:000000000000225e $t
             forth.s:1167   .text:0000000000002260 MSMOD
             forth.s:1169   .text:0000000000002264 $d
             forth.s:1178   .text:000000000000228c MMOD1
             forth.s:1185   .text:00000000000022a8 MMOD2
             forth.s:1193   .text:00000000000022c8 MMOD3
ARM GAS  forth.s 			page 164


             forth.s:1201   .text:00000000000022d0 _SLMOD
             forth.s:1203   .text:00000000000022dc $d
             forth.s:1214   .text:00000000000022f4 _MODD
             forth.s:1214   .text:00000000000022f8 $t
             forth.s:1216   .text:00000000000022fc $d
             forth.s:1225   .text:000000000000230c _SLASH
             forth.s:1225   .text:000000000000230e $t
             forth.s:1225   .text:0000000000002310 SLASH
             forth.s:1227   .text:0000000000002314 $d
             forth.s:1238   .text:0000000000002328 _SSMOD
             forth.s:1238   .text:000000000000232e $t
             forth.s:1238   .text:0000000000002330 SSMOD
             forth.s:1240   .text:0000000000002334 $d
             forth.s:1252   .text:000000000000234c _STASL
             forth.s:1252   .text:0000000000002350 STASL
             forth.s:1254   .text:0000000000002354 $d
             forth.s:1268   .text:0000000000002368 _ALGND
             forth.s:1268   .text:0000000000002370 $t
             forth.s:1268   .text:0000000000002370 ALGND
             forth.s:1279   .text:0000000000002380 $d
             forth.s:1279   .text:0000000000002384 _TCHAR
             forth.s:1279   .text:000000000000238a $t
             forth.s:1279   .text:000000000000238c TCHAR
             forth.s:1281   .text:0000000000002390 $d
             forth.s:1291   .text:00000000000023c8 TCHA1
             forth.s:1299   .text:00000000000023d0 _DEPTH
             forth.s:1299   .text:00000000000023d6 $t
             forth.s:1299   .text:00000000000023d8 DEPTH
             forth.s:1311   .text:00000000000023f0 $d
             forth.s:1311   .text:00000000000023f4 _PICK
             forth.s:1311   .text:00000000000023fc PICK
             forth.s:1313   .text:0000000000002400 $d
             forth.s:1329   .text:000000000000241c _HERE
             forth.s:1329   .text:0000000000002424 HERE
             forth.s:1331   .text:0000000000002428 $d
             forth.s:1340   .text:0000000000002438 _PAD
             forth.s:1340   .text:000000000000243c $t
             forth.s:1342   .text:0000000000002440 $d
             forth.s:1353   .text:0000000000002458 _TIB
             forth.s:1353   .text:000000000000245c $t
             forth.s:1353   .text:000000000000245c TIB
             forth.s:1363   .text:0000000000002466 $d
             forth.s:1363   .text:000000000000246a _ATEXE
             forth.s:1376   .text:0000000000002488 $d
             forth.s:1376   .text:000000000000248c _CMOVE
             forth.s:1376   .text:0000000000002492 $t
             forth.s:1376   .text:0000000000002494 CMOVE
             forth.s:1383   .text:00000000000024a6 CMOV1
             forth.s:1380   .text:000000000000249e CMOV0
             forth.s:1388   .text:00000000000024b0 CMOV2
             forth.s:1396   .text:00000000000024b8 $d
             forth.s:1396   .text:00000000000024bc _MOVE
             forth.s:1414   .text:00000000000024ee MOVE1
             forth.s:1411   .text:00000000000024ea MOVE3
             forth.s:1408   .text:00000000000024e6 MOVE0
             forth.s:1419   .text:00000000000024f8 MOVE2
             forth.s:1428   .text:0000000000002500 $d
ARM GAS  forth.s 			page 165


             forth.s:1428   .text:0000000000002504 _FILL
             forth.s:1436   .text:000000000000251a FILL2
             forth.s:1432   .text:0000000000002512 FILL1
             forth.s:1446   .text:0000000000002522 $d
             forth.s:1446   .text:0000000000002526 _PACKS
             forth.s:1446   .text:000000000000252c $t
             forth.s:1446   .text:000000000000252c PACKS
             forth.s:1448   .text:0000000000002530 $d
             forth.s:1477   .text:0000000000002588 _DIGIT
             forth.s:1477   .text:000000000000258e $t
             forth.s:1477   .text:0000000000002590 DIGIT
             forth.s:1479   .text:0000000000002594 $d
             forth.s:1494   .text:00000000000025c8 _EXTRC
             forth.s:1494   .text:00000000000025d0 $t
             forth.s:1494   .text:00000000000025d0 EXTRC
             forth.s:1496   .text:00000000000025d4 $d
             forth.s:1508   .text:00000000000025f4 _BDIGS
             forth.s:1508   .text:00000000000025f8 BDIGS
             forth.s:1510   .text:00000000000025fc $d
             forth.s:1520   .text:0000000000002610 _HOLD
             forth.s:1522   .text:000000000000261c $d
             forth.s:1538   .text:0000000000002640 _DIG
             forth.s:1538   .text:0000000000002642 $t
             forth.s:1538   .text:0000000000002644 DIG
             forth.s:1540   .text:0000000000002648 $d
             forth.s:1552   .text:0000000000002660 _DIGS
             forth.s:1552   .text:0000000000002664 DIGS
             forth.s:1554   .text:0000000000002668 DIGS1
             forth.s:1555   .text:0000000000002668 $d
             forth.s:1559   .text:0000000000002680 DIGS2
             forth.s:1568   .text:0000000000002688 _SIGN
             forth.s:1568   .text:0000000000002690 SIGN
             forth.s:1570   .text:0000000000002694 $d
             forth.s:1574   .text:00000000000026ac SIGN1
             forth.s:1582   .text:00000000000026b4 _EDIGS
             forth.s:1582   .text:00000000000026b8 EDIGS
             forth.s:1584   .text:00000000000026bc $d
             forth.s:1599   .text:00000000000026d8 STRR
             forth.s:1600   .text:00000000000026d8 $t
             forth.s:1601   .text:00000000000026dc $d
             forth.s:1617   .text:0000000000002704 _HEX
             forth.s:1617   .text:0000000000002708 $t
             forth.s:1617   .text:0000000000002708 HEX
             forth.s:1619   .text:000000000000270c $d
             forth.s:1629   .text:0000000000002724 _DECIM
             forth.s:1629   .text:000000000000272c $t
             forth.s:1629   .text:000000000000272c DECIM
             forth.s:1631   .text:0000000000002730 $d
             forth.s:1646   .text:0000000000002748 _DIGTQ
             forth.s:1646   .text:0000000000002750 DIGTQ
             forth.s:1648   .text:0000000000002754 $d
             forth.s:1661   .text:000000000000279c DGTQ1
             forth.s:1672   .text:00000000000027b0 _NUMBQ
             forth.s:1672   .text:00000000000027b8 $t
             forth.s:1672   .text:00000000000027b8 NUMBQ
             forth.s:1674   .text:00000000000027bc $d
             forth.s:1690   .text:0000000000002808 NUMQ1
ARM GAS  forth.s 			page 166


             forth.s:1738   .text:00000000000028d0 NUMQ6
             forth.s:1706   .text:000000000000284c NUMQ2
             forth.s:1730   .text:00000000000028b4 NUMQ4
             forth.s:1727   .text:00000000000028a8 NUMQ3
             forth.s:1736   .text:00000000000028cc NUMQ5
             forth.s:1756   .text:00000000000028ec _SPACE
             forth.s:1756   .text:00000000000028f2 $t
             forth.s:1758   .text:00000000000028f8 $d
             forth.s:1767   .text:0000000000002908 _SPACS
             forth.s:1767   .text:0000000000002910 SPACS
             forth.s:1769   .text:0000000000002914 $d
             forth.s:1775   .text:0000000000002930 CHAR2
             forth.s:1773   .text:000000000000292c CHAR1
             forth.s:1784   .text:0000000000002940 _TYPEE
             forth.s:1786   .text:000000000000294c $d
             forth.s:1792   .text:0000000000002964 TYPE2
             forth.s:1788   .text:0000000000002958 TYPE1
             forth.s:1802   .text:0000000000002978 _CR
             forth.s:1804   .text:0000000000002980 $d
             forth.s:1816   .text:000000000000299c DOSTR
             forth.s:1817   .text:000000000000299c $t
             forth.s:1819   .text:00000000000029a0 $d
             forth.s:1837   .text:00000000000029c8 STRQP
             forth.s:1838   .text:00000000000029c8 $t
             forth.s:1839   .text:00000000000029cc $d
             forth.s:1848   .text:00000000000029d4 DOTST
             forth.s:1849   .text:00000000000029d4 $t
             forth.s:1850   .text:00000000000029d8 $d
             forth.s:1860   .text:00000000000029e4 DOTQP
             forth.s:1861   .text:00000000000029e4 $t
             forth.s:1862   .text:00000000000029e8 $d
             forth.s:1872   .text:00000000000029f8 _DOTR
             forth.s:1872   .text:00000000000029fc DOTR
             forth.s:1874   .text:0000000000002a00 $d
             forth.s:1889   .text:0000000000002a24 _UDOTR
             forth.s:1889   .text:0000000000002a28 $t
             forth.s:1889   .text:0000000000002a28 UDOTR
             forth.s:1891   .text:0000000000002a2c $d
             forth.s:1907   .text:0000000000002a58 _UDOT
             forth.s:1907   .text:0000000000002a5c UDOT
             forth.s:1909   .text:0000000000002a60 $d
             forth.s:1922   .text:0000000000002a7c _DOT
             forth.s:1922   .text:0000000000002a7e $t
             forth.s:1924   .text:0000000000002a84 $d
             forth.s:1931   .text:0000000000002aa8 DOT1
             forth.s:1942   .text:0000000000002abc _QUEST
             forth.s:1942   .text:0000000000002abe $t
             forth.s:1942   .text:0000000000002ac0 QUEST
             forth.s:1944   .text:0000000000002ac4 $d
             forth.s:1958   .text:0000000000002ad0 PARS
             forth.s:1959   .text:0000000000002ad0 $t
             forth.s:1960   .text:0000000000002ad4 $d
             forth.s:2026   .text:0000000000002be4 PARS8
             forth.s:1990   .text:0000000000002b58 PARS3
             forth.s:1973   .text:0000000000002b10 PARS1
             forth.s:1988   .text:0000000000002b54 PARS2
             forth.s:1994   .text:0000000000002b64 PARS4
ARM GAS  forth.s 			page 167


             forth.s:2006   .text:0000000000002b94 PARS5
             forth.s:2013   .text:0000000000002bb8 PARS6
             forth.s:2019   .text:0000000000002bcc PARS7
             forth.s:2037   .text:0000000000002bf8 _PARSE
             forth.s:2037   .text:0000000000002bfe $t
             forth.s:2037   .text:0000000000002c00 PARSE
             forth.s:2039   .text:0000000000002c04 $d
             forth.s:2060   .text:0000000000002c44 _DOTPR
             forth.s:2060   .text:0000000000002c48 DOTPR
             forth.s:2062   .text:0000000000002c4c $d
             forth.s:2073   .text:0000000000002c64 _PAREN
             forth.s:2073   .text:0000000000002c66 $t
             forth.s:2073   .text:0000000000002c68 PAREN
             forth.s:2075   .text:0000000000002c6c $d
             forth.s:2086   .text:0000000000002c84 _BKSLA
             forth.s:2086   .text:0000000000002c86 $t
             forth.s:2086   .text:0000000000002c88 BKSLA
             forth.s:2088   .text:0000000000002c8c $d
             forth.s:2099   .text:0000000000002ca4 _CHAR
             forth.s:2099   .text:0000000000002cac CHAR
             forth.s:2101   .text:0000000000002cb0 $d
             forth.s:2112   .text:0000000000002cc8 _WORDD
             forth.s:2112   .text:0000000000002cd0 WORDD
             forth.s:2114   .text:0000000000002cd4 $d
             forth.s:2126   .text:0000000000002cec _TOKEN
             forth.s:2126   .text:0000000000002cf2 $t
             forth.s:2126   .text:0000000000002cf4 TOKEN
             forth.s:2128   .text:0000000000002cf8 $d
             forth.s:2141   .text:0000000000002d08 _NAMET
             forth.s:2141   .text:0000000000002d0e $t
             forth.s:2141   .text:0000000000002d10 NAMET
             forth.s:2143   .text:0000000000002d14 $d
             forth.s:2162   .text:0000000000002d34 _SAMEQ
             forth.s:2162   .text:0000000000002d3a $t
             forth.s:2162   .text:0000000000002d3c SAMEQ
             forth.s:2164   .text:0000000000002d40 $d
             forth.s:2181   .text:0000000000002d88 SAME2
             forth.s:2166   .text:0000000000002d4c SAME1
             forth.s:2196   .text:0000000000002d9c FIND
             forth.s:2197   .text:0000000000002d9c $t
             forth.s:2198   .text:0000000000002da0 $d
             forth.s:2205   .text:0000000000002dbc FIND1
             forth.s:2225   .text:0000000000002e14 FIND6
             forth.s:2218   .text:0000000000002dfc FIND2
             forth.s:2223   .text:0000000000002e0c FIND3
             forth.s:2232   .text:0000000000002e2c FIND4
             forth.s:2238   .text:0000000000002e48 FIND5
             forth.s:2254   .text:0000000000002e70 _NAMEQ
             forth.s:2254   .text:0000000000002e76 $t
             forth.s:2254   .text:0000000000002e78 NAMEQ
             forth.s:2256   .text:0000000000002e7c $d
             forth.s:2270   .text:0000000000002e8c BKSP
             forth.s:2271   .text:0000000000002e8c $t
             forth.s:2272   .text:0000000000002e90 $d
             forth.s:2286   .text:0000000000002ed4 BACK1
             forth.s:2295   .text:0000000000002ed8 TAP
             forth.s:2296   .text:0000000000002ed8 $t
ARM GAS  forth.s 			page 168


             forth.s:2297   .text:0000000000002edc $d
             forth.s:2309   .text:0000000000002ef4 KTAP
             forth.s:2310   .text:0000000000002ef4 TTAP
             forth.s:2311   .text:0000000000002ef4 $t
             forth.s:2312   .text:0000000000002ef8 $d
             forth.s:2326   .text:0000000000002f38 KTAP2
             forth.s:2323   .text:0000000000002f30 KTAP1
             forth.s:2338   .text:0000000000002f50 _ACCEP
             forth.s:2340   .text:0000000000002f5c $d
             forth.s:2343   .text:0000000000002f68 ACCP1
             forth.s:2359   .text:0000000000002fb0 ACCP4
             forth.s:2355   .text:0000000000002fa4 ACCP2
             forth.s:2357   .text:0000000000002fa8 ACCP3
             forth.s:2370   .text:0000000000002fc4 _QUERY
             forth.s:2370   .text:0000000000002fca $t
             forth.s:2370   .text:0000000000002fcc QUERY
             forth.s:2372   .text:0000000000002fd0 $d
             forth.s:2392   .text:0000000000003004 _ABORT
             forth.s:2392   .text:000000000000300a $t
             forth.s:2392   .text:000000000000300c ABORT
             forth.s:2394   .text:0000000000003010 ABORT1
             forth.s:2395   .text:0000000000003010 $d
             forth.s:2526   .text:00000000000031b4 QUIT
             forth.s:2410   .text:0000000000003038 ABORQ
             forth.s:2411   .text:0000000000003038 $t
             forth.s:2412   .text:000000000000303c $d
             forth.s:2430   .text:0000000000003060 _INTER
             forth.s:2432   .text:0000000000003070 $d
             forth.s:2441   .text:00000000000030ac INTE1
             forth.s:2438   .text:00000000000030a2 $t
             forth.s:2439   .text:00000000000030a4 $d
             forth.s:2445   .text:00000000000030bc INTE2
             forth.s:2452   .text:00000000000030c4 _LBRAC
             forth.s:2452   .text:00000000000030c6 $t
             forth.s:2452   .text:00000000000030c8 LBRAC
             forth.s:2454   .text:00000000000030cc $d
             forth.s:2464   .text:00000000000030e4 _DOTOK
             forth.s:2464   .text:00000000000030e8 $t
             forth.s:2464   .text:00000000000030e8 DOTOK
             forth.s:2466   .text:00000000000030ec $d
             forth.s:2472   .text:0000000000003110 DOTO1
             forth.s:2473   .text:0000000000003110 $d
             forth.s:2481   .text:000000000000311c _QSTAC
             forth.s:2481   .text:0000000000003124 QSTAC
             forth.s:2483   .text:0000000000003128 $d
             forth.s:2485   .text:000000000000313e $t
             forth.s:2486   .text:0000000000003140 $d
             forth.s:2493   .text:0000000000003148 _EVAL
             forth.s:2495   .text:0000000000003154 EVAL1
             forth.s:2496   .text:0000000000003154 $d
             forth.s:2504   .text:000000000000317c EVAL2
             forth.s:2514   .text:000000000000318c _PRESE
             forth.s:2516   .text:0000000000003198 $d
             forth.s:2526   .text:00000000000031ac _QUIT
             forth.s:2527   .text:00000000000031b4 $d
             forth.s:2529   .text:00000000000031c0 QUIT1
             forth.s:2531   .text:00000000000031c4 QUIT2
ARM GAS  forth.s 			page 169


             forth.s:2541   .text:00000000000031d8 _FORGET
             forth.s:2541   .text:00000000000031e0 FORGET
             forth.s:2543   .text:00000000000031e4 $d
             forth.s:2969   .text:00000000000036a0 OVERT
             forth.s:2571   .text:000000000000322c $d
             forth.s:2571   .text:0000000000003230 _TICK
             forth.s:2571   .text:0000000000003232 $t
             forth.s:2571   .text:0000000000003234 TICK
             forth.s:2573   .text:0000000000003238 $d
             forth.s:2577   .text:000000000000324c TICK1
             forth.s:2585   .text:0000000000003254 _ALLOT
             forth.s:2585   .text:000000000000325a $t
             forth.s:2585   .text:000000000000325c ALLOT
             forth.s:2587   .text:0000000000003260 $d
             forth.s:2596   .text:0000000000003270 _COMMA
             forth.s:2596   .text:0000000000003272 $t
             forth.s:2596   .text:0000000000003274 COMMA
             forth.s:2598   .text:0000000000003278 $d
             forth.s:2612   .text:0000000000003294 $d
             forth.s:2612   .text:0000000000003298 _BCOMP
             forth.s:2612   .text:00000000000032a2 $t
             forth.s:2612   .text:00000000000032a4 BCOMP
             forth.s:2614   .text:00000000000032a8 $d
             forth.s:2624   .text:00000000000032b8 _COMPI
             forth.s:2624   .text:00000000000032c0 $t
             forth.s:2624   .text:00000000000032c0 COMPI
             forth.s:2626   .text:00000000000032c4 $d
             forth.s:2642   .text:00000000000032f0 _LITER
             forth.s:2642   .text:00000000000032f8 $t
             forth.s:2642   .text:00000000000032f8 LITER
             forth.s:2644   .text:00000000000032fc $d
             forth.s:3008   .text:00000000000036fc CALLC
             forth.s:2654   .text:0000000000003310 STRCQ
             forth.s:2655   .text:0000000000003310 $t
             forth.s:2656   .text:0000000000003314 $d
             forth.s:2678   .text:000000000000334c _FOR
             forth.s:2678   .text:0000000000003350 $t
             forth.s:2678   .text:0000000000003350 FOR
             forth.s:2680   .text:0000000000003354 $d
             forth.s:2690   .text:000000000000336c _BEGIN
             forth.s:2690   .text:0000000000003372 $t
             forth.s:2690   .text:0000000000003374 BEGIN
             forth.s:2692   .text:0000000000003378 $d
             forth.s:2701   .text:0000000000003380 $d
             forth.s:2701   .text:0000000000003384 _FNEXT
             forth.s:2701   .text:000000000000338c FNEXT
             forth.s:2703   .text:0000000000003390 $d
             forth.s:2711   .text:00000000000033a8 _I
             forth.s:2711   .text:00000000000033aa $t
             forth.s:2711   .text:00000000000033ac I
             forth.s:2721   .text:00000000000033b8 $d
             forth.s:2721   .text:00000000000033bc _UNTIL
             forth.s:2721   .text:00000000000033c2 $t
             forth.s:2721   .text:00000000000033c4 UNTIL
             forth.s:2723   .text:00000000000033c8 $d
             forth.s:2732   .text:00000000000033e0 _AGAIN
             forth.s:2732   .text:00000000000033e6 $t
ARM GAS  forth.s 			page 170


             forth.s:2732   .text:00000000000033e8 AGAIN
             forth.s:2734   .text:00000000000033ec $d
             forth.s:2743   .text:0000000000003404 _IFF
             forth.s:2743   .text:0000000000003408 IFF
             forth.s:2745   .text:000000000000340c $d
             forth.s:2757   .text:0000000000003434 _AHEAD
             forth.s:2757   .text:000000000000343a $t
             forth.s:2757   .text:000000000000343c AHEAD
             forth.s:2759   .text:0000000000003440 $d
             forth.s:2771   .text:0000000000003468 _REPEA
             forth.s:2771   .text:0000000000003470 REPEA
             forth.s:2773   .text:0000000000003474 $d
             forth.s:2784   .text:000000000000348c _THENN
             forth.s:2784   .text:0000000000003494 THENN
             forth.s:2786   .text:0000000000003498 $d
             forth.s:2797   .text:00000000000034ac _AFT
             forth.s:2797   .text:00000000000034b0 $t
             forth.s:2797   .text:00000000000034b0 AFT
             forth.s:2799   .text:00000000000034b4 $d
             forth.s:2811   .text:00000000000034cc _ELSEE
             forth.s:2811   .text:00000000000034d4 ELSEE
             forth.s:2813   .text:00000000000034d8 $d
             forth.s:2823   .text:00000000000034ec _WHILE
             forth.s:2823   .text:00000000000034f2 $t
             forth.s:2823   .text:00000000000034f4 WHILE
             forth.s:2825   .text:00000000000034f8 $d
             forth.s:2834   .text:0000000000003508 _ABRTQ
             forth.s:2834   .text:0000000000003510 ABRTQ
             forth.s:2836   .text:0000000000003514 $d
             forth.s:2845   .text:000000000000352c _STRQ
             forth.s:2845   .text:0000000000003530 STRQ
             forth.s:2847   .text:0000000000003534 $d
             forth.s:2857   .text:000000000000354c _DOTQ
             forth.s:2857   .text:0000000000003550 DOTQ
             forth.s:2859   .text:0000000000003554 $d
             forth.s:2873   .text:000000000000356c _UNIQU
             forth.s:2873   .text:0000000000003574 $t
             forth.s:2873   .text:0000000000003574 UNIQU
             forth.s:2875   .text:0000000000003578 $d
             forth.s:2882   .text:00000000000035a0 UNIQ1
             forth.s:2879   .text:0000000000003594 $d
             forth.s:2892   .text:00000000000035a8 SNAME
             forth.s:2893   .text:00000000000035a8 $t
             forth.s:2894   .text:00000000000035ac $d
             forth.s:2910   .text:00000000000035f0 SNAM1
             forth.s:2922   .text:0000000000003604 _SCOMP
             forth.s:2922   .text:0000000000003610 SCOMP
             forth.s:2924   .text:0000000000003614 $d
             forth.s:2936   .text:000000000000364c SCOM2
             forth.s:2933   .text:0000000000003644 SCOM1
             forth.s:2941   .text:0000000000003660 SCOM3
             forth.s:2950   .text:0000000000003668 COLON_ABORT
             forth.s:2951   .text:0000000000003668 $t
             forth.s:2952   .text:000000000000366c $d
             forth.s:2969   .text:0000000000003698 _OVERT
             forth.s:2969   .text:000000000000369e $t
             forth.s:2971   .text:00000000000036a4 $d
ARM GAS  forth.s 			page 171


             forth.s:2982   .text:00000000000036bc _SEMIS
             forth.s:2982   .text:00000000000036be $t
             forth.s:2982   .text:00000000000036c0 SEMIS
             forth.s:2984   .text:00000000000036c4 $d
             forth.s:2996   .text:00000000000036e0 _RBRAC
             forth.s:2996   .text:00000000000036e2 $t
             forth.s:2996   .text:00000000000036e4 RBRAC
             forth.s:2998   .text:00000000000036e8 $d
             forth.s:3009   .text:00000000000036fc $t
             forth.s:3010   .text:0000000000003700 $d
             forth.s:3022   .text:0000000000003718 _COLON
             forth.s:3022   .text:000000000000371a $t
             forth.s:3022   .text:000000000000371c COLON
             forth.s:3024   .text:0000000000003720 $d
             forth.s:3035   .text:0000000000003738 _IMMED
             forth.s:3035   .text:0000000000003742 $t
             forth.s:3035   .text:0000000000003744 IMMED
             forth.s:3037   .text:0000000000003748 $d
             forth.s:3055   .text:0000000000003774 _CONST
             forth.s:3055   .text:0000000000003780 CONST
             forth.s:3057   .text:0000000000003784 $d
             forth.s:3068   .text:00000000000037b4 $t
             forth.s:3075   .text:00000000000037b4 DODOES
             forth.s:3077   .text:00000000000037b8 $d
             forth.s:3092   .text:00000000000037dc $d
             forth.s:3092   .text:00000000000037e0 _DOES
             forth.s:3092   .text:00000000000037e6 $t
             forth.s:3092   .text:00000000000037e8 DOES
             forth.s:3094   .text:00000000000037ec $d
             forth.s:3109   .text:000000000000381c _DEFERAT
             forth.s:3109   .text:0000000000003824 DEFERAT
             forth.s:3111   .text:0000000000003828 $d
             forth.s:3121   .text:0000000000003840 _DEFERSTO
             forth.s:3121   .text:0000000000003848 DEFERSTO
             forth.s:3123   .text:000000000000384c $d
             forth.s:3134   .text:0000000000003868 _DEFER
             forth.s:3134   .text:000000000000386e $t
             forth.s:3134   .text:0000000000003870 DEFER
             forth.s:3136   .text:0000000000003874 $d
             forth.s:3157   .text:00000000000038c0 CREAT
             forth.s:3147   .text:00000000000038a8 DEFER_NOP
             forth.s:3148   .text:00000000000038a8 $t
             forth.s:3149   .text:00000000000038ac $d
             forth.s:3157   .text:00000000000038b8 _CREAT
             forth.s:3159   .text:00000000000038c4 $d
             forth.s:3172   .text:00000000000038e8 _VARIA
             forth.s:3172   .text:00000000000038f4 VARIA
             forth.s:3174   .text:00000000000038f8 $d
             forth.s:3191   .text:0000000000003918 DMP
             forth.s:3192   .text:0000000000003918 $t
             forth.s:3193   .text:000000000000391c $d
             forth.s:3205   .text:0000000000003954 PDUM2
             forth.s:3199   .text:000000000000393c PDUM1
             forth.s:3217   .text:0000000000003960 $d
             forth.s:3217   .text:0000000000003964 _DUMP
             forth.s:3217   .text:000000000000396c DUMP
             forth.s:3219   .text:0000000000003970 $d
ARM GAS  forth.s 			page 172


             forth.s:3237   .text:00000000000039c0 DUMP4
             forth.s:3227   .text:0000000000003998 DUMP1
             forth.s:3239   .text:00000000000039c8 DUMP3
             forth.s:3251   .text:00000000000039e0 _DOTS
             forth.s:3251   .text:00000000000039e4 DOTS
             forth.s:3253   .text:00000000000039e8 $d
             forth.s:3261   .text:0000000000003a08 DOTS2
             forth.s:3257   .text:00000000000039fc DOTS1
             forth.s:3271   .text:0000000000003a1c _TNAME
             forth.s:3271   .text:0000000000003a22 $t
             forth.s:3271   .text:0000000000003a24 TNAME
             forth.s:3273   .text:0000000000003a28 $d
             forth.s:3276   .text:0000000000003a34 TNAM1
             forth.s:3287   .text:0000000000003a68 TNAM2
             forth.s:3296   .text:0000000000003a78 _DOTID
             forth.s:3296   .text:0000000000003a7c $t
             forth.s:3296   .text:0000000000003a7c DOTID
             forth.s:3298   .text:0000000000003a80 $d
             forth.s:3305   .text:0000000000003aa4 DOTI1
             forth.s:3306   .text:0000000000003ab2 $t
             forth.s:3307   .text:0000000000003ab4 $d
             forth.s:3309   *ABS*:0000000000000000 WANT_SEE
             forth.s:3382   .text:0000000000003abc _WORDS
             forth.s:3382   .text:0000000000003ac2 $t
             forth.s:3382   .text:0000000000003ac4 WORDS
             forth.s:3384   .text:0000000000003ac8 $d
             forth.s:3387   .text:0000000000003ad4 WORS1
             forth.s:3396   .text:0000000000003afc WORS2
             forth.s:3409   .text:0000000000003b00 VERSN
             forth.s:3410   .text:0000000000003b00 $t
             forth.s:3411   .text:0000000000003b04 $d
             forth.s:3419   .text:0000000000003b14 _HI
             forth.s:3421   .text:0000000000003b1c $d
             forth.s:3422   .text:0000000000003b36 $t
             forth.s:3423   .text:0000000000003b38 $d
             forth.s:3444   .text:0000000000003b7c PS2_QUERY
             forth.s:3445   .text:0000000000003b7c $t
             forth.s:3446   .text:0000000000003b80 $d
             forth.s:3453   .text:0000000000003bba $t
             forth.s:3454   .text:0000000000003bbc $d
             forth.s:3464   .text:0000000000003bc8 IF_SENSE
             forth.s:3465   .text:0000000000003bc8 $t
             forth.s:3466   .text:0000000000003bcc $d
             forth.s:3492   .text:0000000000003c1c COLD1
             forth.s:3493   .text:0000000000003c1c $d
             forth.s:3506   .text:0000000000003c64 COLD2
             forth.s:3509   .text:0000000000003c64 $d
             forth.s:3512   .text:0000000000003c68 $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:000000000000053f $d
          ser-term.s:90     .text:0000000000000540 $t
          ser-term.s:110    .text:0000000000000579 $d
          ser-term.s:110    .text:000000000000057a $t
          ser-term.s:133    .text:00000000000005b7 $d
          ser-term.s:133    .text:00000000000005b8 $t
          ser-term.s:164    .text:00000000000005ff $d
ARM GAS  forth.s 			page 173


          ser-term.s:164    .text:0000000000000600 $t
          ser-term.s:191    .text:0000000000000675 $d
          ser-term.s:191    .text:0000000000000676 $t
          ser-term.s:203    .text:00000000000006a3 $d
          ser-term.s:203    .text:00000000000006a4 $t
             tvout.s:264    .text:00000000000008ef $d
             tvout.s:264    .text:00000000000008f0 $t
             tvout.s:278    .text:0000000000000923 $d
             tvout.s:278    .text:0000000000000924 $t
             tvout.s:306    .text:000000000000097d $d
             tvout.s:306    .text:000000000000097e $t
             tvout.s:325    .text:00000000000009ab $d
             tvout.s:325    .text:00000000000009ac $t
             tvout.s:427    .text:0000000000000ae5 $d
             tvout.s:427    .text:0000000000000ae6 $t
             tvout.s:448    .text:0000000000000b3f $d
             tvout.s:448    .text:0000000000000b40 $t
             tvout.s:495    .text:0000000000000bd5 $d
             tvout.s:495    .text:0000000000000bd6 $t
           ps2_kbd.s:307    .text:00000000000012c3 $d
           ps2_kbd.s:307    .text:00000000000012c4 $t
           ps2_kbd.s:396    .text:00000000000013bd $d
           ps2_kbd.s:396    .text:00000000000013be $t
           ps2_kbd.s:616    .text:0000000000001657 $d
           ps2_kbd.s:616    .text:0000000000001658 $t
           ps2_kbd.s:633    .text:000000000000168d $d
           ps2_kbd.s:633    .text:000000000000168e $t
         spi-flash.s:80     .text:0000000000001775 $d
         spi-flash.s:80     .text:0000000000001776 $t
         spi-flash.s:221    .text:0000000000001957 $d
         spi-flash.s:221    .text:0000000000001958 $t
         spi-flash.s:245    .text:00000000000019b3 $d
         spi-flash.s:245    .text:00000000000019b4 $t
             forth.s:142    .text:0000000000001a63 $d
             forth.s:142    .text:0000000000001a64 $t
             forth.s:165    .text:0000000000001a9d $d
             forth.s:165    .text:0000000000001a9e $t
             forth.s:202    .text:0000000000001abb $d
             forth.s:202    .text:0000000000001abc $t
             forth.s:249    .text:0000000000001b69 $d
             forth.s:249    .text:0000000000001b6a $t
             forth.s:344    .text:0000000000001bf9 $d
             forth.s:344    .text:0000000000001bfa $t
             forth.s:369    .text:0000000000001c27 $d
             forth.s:369    .text:0000000000001c28 $t
             forth.s:379    .text:0000000000001c3b $d
             forth.s:379    .text:0000000000001c3c $t
             forth.s:387    .text:0000000000001c47 $d
             forth.s:387    .text:0000000000001c48 $t
             forth.s:396    .text:0000000000001c59 $d
             forth.s:396    .text:0000000000001c5a $t
             forth.s:405    .text:0000000000001c6d $d
             forth.s:405    .text:0000000000001c6e $t
             forth.s:441    .text:0000000000001cb5 $d
             forth.s:441    .text:0000000000001cb6 $t
             forth.s:457    .text:0000000000001cd7 $d
             forth.s:457    .text:0000000000001cd8 $t
ARM GAS  forth.s 			page 174


             forth.s:467    .text:0000000000001ce9 $d
             forth.s:467    .text:0000000000001cea $t
             forth.s:476    .text:0000000000001cfb $d
             forth.s:476    .text:0000000000001cfc $t
             forth.s:493    .text:0000000000001d1d $d
             forth.s:493    .text:0000000000001d1e $t
             forth.s:523    .text:0000000000001d63 $d
             forth.s:523    .text:0000000000001d64 $t
             forth.s:532    .text:0000000000001d79 $d
             forth.s:532    .text:0000000000001d7a $t
             forth.s:579    .text:0000000000001dd3 $d
             forth.s:579    .text:0000000000001dd4 $t
             forth.s:590    .text:0000000000001de7 $d
             forth.s:590    .text:0000000000001de8 $t
             forth.s:598    .text:0000000000001df5 $d
             forth.s:598    .text:0000000000001df6 $t
             forth.s:606    .text:0000000000001e05 $d
             forth.s:606    .text:0000000000001e06 $t
             forth.s:614    .text:0000000000001e15 $d
             forth.s:614    .text:0000000000001e16 $t
             forth.s:638    .text:0000000000001e45 $d
             forth.s:638    .text:0000000000001e46 $t
             forth.s:663    .text:0000000000001e79 $d
             forth.s:663    .text:0000000000001e7a $t
             forth.s:671    .text:0000000000001e89 $d
             forth.s:671    .text:0000000000001e8a $t
             forth.s:679    .text:0000000000001e9b $d
             forth.s:679    .text:0000000000001e9c $t
             forth.s:700    .text:0000000000001ec3 $d
             forth.s:700    .text:0000000000001ec4 $t
             forth.s:729    .text:0000000000001eff $d
             forth.s:729    .text:0000000000001f00 $t
             forth.s:739    .text:0000000000001f13 $d
             forth.s:739    .text:0000000000001f14 $t
             forth.s:760    .text:0000000000001f41 $d
             forth.s:760    .text:0000000000001f42 $t
             forth.s:778    .text:0000000000001f65 $d
             forth.s:778    .text:0000000000001f66 $t
             forth.s:801    .text:0000000000001f93 $d
             forth.s:801    .text:0000000000001f94 $t
             forth.s:859    .text:0000000000002003 $d
             forth.s:859    .text:0000000000002004 $t
             forth.s:871    .text:000000000000201b $d
             forth.s:871    .text:000000000000201c $t
             forth.s:883    .text:0000000000002037 $d
             forth.s:883    .text:0000000000002038 $t
             forth.s:944    .text:0000000000002093 $d
             forth.s:944    .text:0000000000002094 $t
             forth.s:953    .text:00000000000020a7 $d
             forth.s:953    .text:00000000000020a8 $t
             forth.s:980    .text:00000000000020e3 $d
             forth.s:980    .text:00000000000020e4 $t
             forth.s:999    .text:0000000000002101 $d
             forth.s:999    .text:0000000000002102 $t
             forth.s:1018   .text:000000000000212b $d
             forth.s:1018   .text:000000000000212c $t
             forth.s:1058   .text:000000000000217d $d
ARM GAS  forth.s 			page 175


             forth.s:1058   .text:000000000000217e $t
             forth.s:1078   .text:00000000000021a7 $d
             forth.s:1078   .text:00000000000021a8 $t
             forth.s:1092   .text:00000000000021c1 $d
             forth.s:1092   .text:00000000000021c2 $t
             forth.s:1103   .text:00000000000021dd $d
             forth.s:1103   .text:00000000000021de $t
             forth.s:1120   .text:00000000000021f7 $d
             forth.s:1120   .text:00000000000021f8 $t
             forth.s:1137   .text:0000000000002223 $d
             forth.s:1137   .text:0000000000002224 $t
             forth.s:1201   .text:00000000000022d5 $d
             forth.s:1201   .text:00000000000022d6 $t
             forth.s:1252   .text:000000000000234f $d
             forth.s:1252   .text:0000000000002350 $t
             forth.s:1311   .text:00000000000023f9 $d
             forth.s:1311   .text:00000000000023fa $t
             forth.s:1329   .text:0000000000002421 $d
             forth.s:1329   .text:0000000000002422 $t
             forth.s:1363   .text:0000000000002473 $d
             forth.s:1363   .text:0000000000002474 $t
             forth.s:1396   .text:00000000000024c1 $d
             forth.s:1396   .text:00000000000024c2 $t
             forth.s:1428   .text:0000000000002509 $d
             forth.s:1428   .text:000000000000250a $t
             forth.s:1508   .text:00000000000025f7 $d
             forth.s:1508   .text:00000000000025f8 $t
             forth.s:1520   .text:0000000000002615 $d
             forth.s:1520   .text:0000000000002616 $t
             forth.s:1552   .text:0000000000002663 $d
             forth.s:1552   .text:0000000000002664 $t
             forth.s:1568   .text:000000000000268d $d
             forth.s:1568   .text:000000000000268e $t
             forth.s:1582   .text:00000000000026b7 $d
             forth.s:1582   .text:00000000000026b8 $t
             forth.s:1646   .text:000000000000274f $d
             forth.s:1646   .text:0000000000002750 $t
             forth.s:1767   .text:000000000000290f $d
             forth.s:1767   .text:0000000000002910 $t
             forth.s:1784   .text:0000000000002945 $d
             forth.s:1784   .text:0000000000002946 $t
             forth.s:1802   .text:000000000000297b $d
             forth.s:1802   .text:000000000000297c $t
             forth.s:1872   .text:00000000000029fb $d
             forth.s:1872   .text:00000000000029fc $t
             forth.s:1907   .text:0000000000002a5b $d
             forth.s:1907   .text:0000000000002a5c $t
             forth.s:2060   .text:0000000000002c47 $d
             forth.s:2060   .text:0000000000002c48 $t
             forth.s:2099   .text:0000000000002ca9 $d
             forth.s:2099   .text:0000000000002caa $t
             forth.s:2112   .text:0000000000002ccd $d
             forth.s:2112   .text:0000000000002cce $t
             forth.s:2338   .text:0000000000002f57 $d
             forth.s:2338   .text:0000000000002f58 $t
             forth.s:2430   .text:000000000000306b $d
             forth.s:2430   .text:000000000000306c $t
ARM GAS  forth.s 			page 176


             forth.s:2481   .text:0000000000003123 $d
             forth.s:2481   .text:0000000000003124 $t
             forth.s:2493   .text:000000000000314d $d
             forth.s:2493   .text:000000000000314e $t
             forth.s:2514   .text:0000000000003193 $d
             forth.s:2514   .text:0000000000003194 $t
             forth.s:2526   .text:00000000000031b1 $d
             forth.s:2526   .text:00000000000031b2 $t
             forth.s:2541   .text:00000000000031df $d
             forth.s:2541   .text:00000000000031e0 $t
             forth.s:2701   .text:0000000000003389 $d
             forth.s:2701   .text:000000000000338a $t
             forth.s:2743   .text:0000000000003407 $d
             forth.s:2743   .text:0000000000003408 $t
             forth.s:2771   .text:000000000000346f $d
             forth.s:2771   .text:0000000000003470 $t
             forth.s:2784   .text:0000000000003491 $d
             forth.s:2784   .text:0000000000003492 $t
             forth.s:2811   .text:00000000000034d1 $d
             forth.s:2811   .text:00000000000034d2 $t
             forth.s:2834   .text:000000000000350f $d
             forth.s:2834   .text:0000000000003510 $t
             forth.s:2845   .text:000000000000352f $d
             forth.s:2845   .text:0000000000003530 $t
             forth.s:2857   .text:000000000000354f $d
             forth.s:2857   .text:0000000000003550 $t
             forth.s:2922   .text:000000000000360d $d
             forth.s:2922   .text:000000000000360e $t
             forth.s:3055   .text:000000000000377d $d
             forth.s:3055   .text:000000000000377e $t
             forth.s:3109   .text:0000000000003823 $d
             forth.s:3109   .text:0000000000003824 $t
             forth.s:3121   .text:0000000000003847 $d
             forth.s:3121   .text:0000000000003848 $t
             forth.s:3157   .text:00000000000038bf $d
             forth.s:3157   .text:00000000000038c0 $t
             forth.s:3172   .text:00000000000038f1 $d
             forth.s:3172   .text:00000000000038f2 $t
             forth.s:3217   .text:0000000000003969 $d
             forth.s:3217   .text:000000000000396a $t
             forth.s:3251   .text:00000000000039e3 $d
             forth.s:3251   .text:00000000000039e4 $t
             forth.s:3419   .text:0000000000003b17 $d
             forth.s:3419   .text:0000000000003b18 $t
             forth.s:3486   .text:0000000000003c05 $d
             forth.s:3486   .text:0000000000003c06 $t

UNDEFINED SYMBOLS
_mstack
