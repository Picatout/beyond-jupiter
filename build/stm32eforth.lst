ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  54              		.equ DTOP,  RAM_ADR+0x512 
  55              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  56              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  57              	
  58              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  59              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  60              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  61              	
  62              		.equ CELLL ,	4	/*size of a cell */
  63              		.equ BASEE ,	10	/*default radix */
  64              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  65              	
  66              		.equ BKSPP ,	8	/*backspace */
  67              		.equ LF ,	10	  /*line feed */
  68              		.equ CRR ,	13	/*carriage return */
  69              		.equ ERR ,	27	/*error escape */
  70              		.equ TIC ,	39	/*tick */
  71              	
  72              	/*************************************
  73              	   system variables offset from UPP
  74              	*************************************/
  75              	  .equ RNDSEED, 4    // prng seed 
  76              	  .equ TICKS, RNDSEED+4  // millseconds counter
  77              	  .equ CD_TIMER, TICKS+4  // count down timer
  78              	  .equ BOOT, CD_TIMER+4  // boot program address
  79              	  .equ STDIN, BOOT+4   //character ouput device 
  80              	  .equ STDOUT, STDIN+4 // character input device 
  81              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  82              	  .equ BCHAR, NBASE+4   // display base character flag 
  83              	  .equ TMP, BCHAR+4   // temporary variable
  84              	  .equ CSPAN, TMP+4  // character count received by expect  
  85              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  86              	  .equ SRC, TOIN+4    // SOURCE 
  87              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  88              	  .equ TIBUF, SRC+4   // TIB buffer address 
  89              	  .equ SRCID, TIBUF+4  // evaluation source string or user interface
  90              	  .equ EVAL, SRCID+4  // eval|compile vector 
  91              	  .equ VHOLD, EVAL+4   // hold pointer 
  92              	  .equ CTXT, VHOLD+4  // context pointer 
  93              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  94              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  95              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  96              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  97              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  98              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  99              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
 100              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 101              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 102              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 103              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 104              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 105              	  .equ KBD_QUEUE_SIZE, 16 
 106              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 107              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
ARM GAS  forth.s 			page 10


 108              	  .equ KBD_QTAIL,KBD_QHEAD+4
 109              	  .equ ROW,KBD_QTAIL+4 
 110              	  .equ COL,ROW+4 
 111              	  .equ BK_COLOR,COL+4 
 112              	  .equ PEN_COLOR,BK_COLOR+4
 113              	  .equ VFPSW, PEN_COLOR+4 
 114              	  .equ VFBASE, VFPSW+4 
 115              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 116              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 117              	
 118              	/***********************************************
 119              	* MACROS
 120              	*	Assemble inline direct threaded code ending.
 121              	***********************************************/
 122              		.macro _CALL fn /* low level routine call */ 
 123              	 	PUSH {LR}
 124              		BL \fn  
 125              		POP {LR}
 126              		.endm
 127              		
 128              		.macro _RET /* exit sub-routine */ 
 129              		BX LR 
 130              		.endm 
 131              	
 132              		// dictionary header  
 133              		.macro _HEADER  label, nlen, name
 134              			.word LINK 
 135              			.equ LINK , . 
 136              		_\label: .byte \nlen    // name field
 137              			.ascii "\name"
 138              			.p2align 2 
 139              		\label:   // code field 
 140              		.endm 
 141              		
 142              	
 143              	// local function header 
 144              		.macro _FUNC label 
 145              		.section .text, "ax", %progbits 
 146              		.p2align 2 
 147              		.type \label, %function  
 148              		\label:
 149              		.endm 
 150              	
 151              	// global function header 
 152              		.macro _GBL_FUNC label 
 153              		.global \label 
 154              		_FUNC \label 
 155              		.endm 
 156              	
 157              	
 158              	// load large constant to register 
 159              		.macro _MOV32 r, value 
 160              		mov \r,#(\value&0xffff)
 161              		movt \r,#(\value>>16)
 162              		.endm 
 163              	
 164              		.macro _NEXT /* direct jump INEXT */ 
ARM GAS  forth.s 			page 11


 165              		B INEXT   
 166              		.endm 
 167              	
 168              	 	.macro	_NEST /*start high level word */
 169              		BX INX  
 170              		NOP.N 
 171              		.endm
 172              	
 173              		.macro _ADR label 
 174              		.word 1+\label  
 175              		.endm 
 176              	
 177              	 	.macro	_UNNEST	/*end high level word */
 178              		_ADR UNNEST 
 179              		.endm
 180              	
 181              	 	.macro	_DOLIT u /*long literals */
 182              		_ADR	DOLIT
 183              		.word	\u 
 184              		.endm
 185              	
 186              		.macro _DOTQP len, text 
 187              		_ADR DOTQP 
 188              		.byte \len 
 189              		.ascii "\text" 
 190              		.p2align 2 
 191              		.endm
 192              	
 193              		// POSTPONE COMPILE 
 194              		.macro _COMPI name 
 195              		_DOLIT	\name + 1
 196              		_ADR	COMMA 
 197              		.endm 
 198              	
 199              		.macro _ABORQ len,name 
 200              		_ADR ABORQ 
 201              		.byte \len 
 202              		.ascii "\name"
 203              		.p2align 2 
 204              		.endm
 205              	
 206              		.macro _BRAN label 
 207              		_ADR BRAN 
 208              		.word \label 
 209              		.endm 
 210              	
 211              		.macro _QBRAN label 
 212              		_ADR QBRAN 
 213              		.word \label
 214              		.endm 
 215              	
 216              		.macro _TBRAN label 
 217              		_ADR TBRAN 
 218              		.word \label 
 219              		.endm 
 220              	
 221              		.macro _DONXT label 
ARM GAS  forth.s 			page 12


 222              		_ADR DONXT
 223              		.word \label 
 224              		.endm 
 225              	
 226              	 	.macro	_PUSH	/*push TOS on data stack*/
 227              		STR	TOS,[DSP,#-4]!
 228              		.endm
 229              	
 230              	 	.macro	_POP /*pop data stack to TOS */
 231              		LDR	TOS,[DSP],#4
 232              		.endm
 233              	
 234              		// calling a colon word 
 235              		// from a code word   
 236              		.macro _CALL_COLWORD target 
 237              	    ldr WP,=\target 
 238              		orr WP,#1
 239              		b \target  
 240              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
ARM GAS  forth.s 			page 13


  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
ARM GAS  forth.s 			page 14


 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF818C9 	  ldr IP,=dh
 159 000e 02F051BF 	  b INEXT  
 160              	dh:
 161 0012 05520000 	  _ADR PRESE
 162 0016 0D460000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 012F0000 	  _ADR CFSR 
 164 0038 99320000 	  _ADR DUPP
 165 003c 05320000 	  _ADR TOR 
 166 0040 DF300000 	  _DOLIT 16 
 166      10000000 
 167 0048 F9380000 	  _ADR BASE 
 168 004c 61310000 	  _ADR STORE 
 169 0050 09470000 	  _ADR UDOT 
 170 0054 0D460000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
ARM GAS  forth.s 			page 15


 170      4641523A 
 170      200000BF 
 171 0064 A1310000 	  _ADR RFROM
 172 0068 DF300000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 55330000 	  _ADR ANDD
 174 0074 1F310000 	  _QBRAN 1f
 174      94000000 
 175 007c 212F0000 	  _ADR BFAR
 176 0080 DF300000 	  _DOLIT ','
 176      2C000000 
 177 0088 7D2F0000 	  _ADR EMIT 
 178 008c 29450000 	  _ADR SPACE 
 179 0090 09470000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 0D460000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 0D220000 	  _ADR FPSCR
 184 00a8 09470000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF864C8 	  ldr IP,=fpu_except
 202 00c4 02F0F6BE 	  b INEXT 
 203              	fpu_except:  
 204 00c8 B1450000 	  _ADR CR 
 205 00cc F9380000 	  _ADR BASE 
 206 00d0 75310000 	  _ADR AT 
 207 00d4 05320000 	  _ADR TOR  
 208 00d8 DF300000 	  _DOLIT 16 
 208      10000000 
 209 00e0 F9380000 	  _ADR BASE 
 210 00e4 61310000 	  _ADR STORE
 211 00e8 DF300000 	  _DOLIT 4 
 211      04000000 
 212 00f0 E5330000 	  _ADR SUBB  
 213 00f4 0D460000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 3D470000 	  _ADR DOT 
 215 0104 0D460000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
ARM GAS  forth.s 			page 16


 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 0D220000 	  _ADR FPSCR 
 217 0124 99320000 	  _ADR DUPP 
 218 0128 3D470000 	  _ADR DOT
 219 012c E5340000 	  _ADR QDUP 
 220 0130 1F310000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 DF300000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 7D2F0000 	  _ADR EMIT 
 223 0144 DF300000 	  _DOLIT ' ' 
 223      20000000 
 224 014c 7D2F0000 	  _ADR EMIT
 225 0150 99320000 	  _ADR DUPP 
 226 0154 DF300000 	  _DOLIT 0x10 
 226      10000000 
 227 015c 55330000 	  _ADR ANDD
 228 0160 E5340000 	  _ADR QDUP  
 229 0164 1F310000 	  _QBRAN 1f 
 229      84010000 
 230 016c DF300000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 D5330000 	  _ADR PLUS 
 232 0178 75310000 	  _ADR AT 
 233 017c 49380000 	  _ADR COUNT 
 234 0180 7D450000 	  _ADR TYPEE
 235 0184 DF300000 	1: _DOLIT 15 
 235      0F000000 
 236 018c 55330000 	  _ADR ANDD
 237 0190 A1360000 	  _ADR CLZ 
 238 0194 DF300000 	  _DOLIT 31 
 238      1F000000 
 239 019c A9320000 	  _ADR SWAP 
 240 01a0 E5330000 	  _ADR SUBB 
 241 01a4 DF300000 	  _DOLIT 2 
 241      02000000 
 242 01ac C5330000 	  _ADR LSHIFT 
 243 01b0 DF300000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 D5330000 	  _ADR PLUS 
 245 01bc 75310000 	  _ADR AT 
 246 01c0 49380000 	  _ADR COUNT 
 247 01c4 7D450000 	  _ADR TYPEE 
 248 01c8 B1450000 	2: _ADR CR 
 249 01cc DF300000 	  _DOLIT 0
 249      00000000 
 250 01d4 2D220000 	  _ADR CLR_FPSCR 
 251 01d8 A1310000 	  _ADR RFROM  
 252 01dc F9380000 	  _ADR BASE 
 253 01e0 61310000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF840C7 	   ldr IP,=QUIT  
ARM GAS  forth.s 			page 17


 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
ARM GAS  forth.s 			page 18


 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C8C6 	  ldr IP,=nmi_hl 
 306 0268 02F024BE 	  b  INEXT
 307              	nmi_hl:
 308 026c 05520000 	  _ADR PRESE 
 309 0270 B1450000 	  _ADR CR 
 310 0274 0D460000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 B1450000 	  _ADR CR 
 312 0298 794F0000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF88CC6 	  ldr IP,=hardfault_hl 
 326 02aa 02F003BE 	  b INEXT
 327              	hardfault_hl:
 328 02ae 05520000 	  _ADR PRESE
 329 02b2 B1450000 	  _ADR CR  
 330 02b6 0D460000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 B1450000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
ARM GAS  forth.s 			page 19


 344 02e2 DFF854C6 	  ldr IP,=memfault_hl 
 345 02e6 02F0E5BD 	  b INEXT 
 346              	memfault_hl: 
 347 02ea 05520000 	  _ADR PRESE
 348 02ee B1450000 	  _ADR CR  
 349 02f2 0D460000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 DF300000 	  _DOLIT 16 
 350      10000000 
 351 0320 F9380000 	  _ADR BASE 
 352 0324 61310000 	  _ADR STORE   
 353 0328 012F0000 	  _ADR CFSR
 354 032c DF300000 	  _DOLIT 255 
 354      FF000000 
 355 0334 55330000 	  _ADR ANDD 
 356 0338 09470000 	  _ADR UDOT 
 357 033c B1450000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8ECC5 	  ldr IP,=busfault_hl 
 372 0352 02F0AFBD 	  b INEXT 
 373              	busfault_hl:
 374 0356 05520000 	  _ADR PRESE
 375 035a DF300000 	  _DOLIT 1 
 375      01000000 
 376 0362 49300000 	  _ADR ULED 
 377 0366 DF300000 	  _DOLIT  100 
 377      64000000 
 378 036e B1380000 	  _ADR MSEC 
 379 0372 212F0000 	  _ADR BFAR 
 380 0376 012F0000 	  _ADR CFSR 
 381 037a B1450000 	  _ADR CR  
 382 037e 0D460000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 DF300000 	  _DOLIT 16 
 383      10000000 
 384 03a8 F9380000 	  _ADR BASE 
 385 03ac 61310000 	  _ADR STORE   
 386 03b0 DF300000 	  _DOLIT 0XFF00 
ARM GAS  forth.s 			page 20


 386      00FF0000 
 387 03b8 55330000 	  _ADR ANDD   
 388 03bc 09470000 	  _ADR UDOT 
 389 03c0 0D460000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc 09470000 	  _ADR UDOT 
 391 03d0 B1450000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF85CC5 	  ldr IP,=usagefault_hl
 405 03e6 02F065BD 	  b INEXT 
 406              	usagefault_hl:
 407 03ea 05520000 	  _ADR PRESE
 408 03ee B1450000 	  _ADR CR  
 409 03f2 0D460000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 DF300000 	  _DOLIT 16 
 410      10000000 
 411 0418 F9380000 	  _ADR BASE 
 412 041c 61310000 	  _ADR STORE   
 413 0420 012F0000 	  _ADR CFSR
 414 0424 DF300000 	  _DOLIT 16 
 414      10000000 
 415 042c AD330000 	  _ADR RSHIFT 
 416 0430 09470000 	  _ADR UDOT 
 417 0434 B1450000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8B000 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
ARM GAS  forth.s 			page 21


 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8B000 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8B000 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF8A0C4 	  ldr IP,=ur
 474 04a4 02F006BD 	  b INEXT  
 475              	ur:
 476 04a8 05520000 	  _ADR PRESE
 477 04ac B1450000 	  _ADR CR   
 478 04b0 DF300000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 49380000 		_ADR COUNT 
 480 04bc 7D450000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
ARM GAS  forth.s 			page 22


 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F045FE 	  bl  fpu_init 
 518 0524 00F009FB 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F002FC 	  bl  flash_spi_init   
 522 0534 06F0CAB8 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF6B067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
ARM GAS  forth.s 			page 23


 532 0550 DFF8F4A3 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
ARM GAS  forth.s 			page 24


 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
ARM GAS  forth.s 			page 25


 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A649     		ldr r1,=UZERO 
 674 06b2 4FF0C002 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
ARM GAS  forth.s 			page 26


 679 06c6 043A     		subs R2,#4 
 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
ARM GAS  forth.s 			page 27


 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
ARM GAS  forth.s 			page 28


 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
ARM GAS  forth.s 			page 29


 843 0846 BDE82808 	    pop {r3,r5,r11}
 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 DC650000 		.word HI_BOTH  /*'BOOT */
 874 0878 201A0000 		.word PS2_QKEY /* query for character */
 875 087c E8120000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 B0FE0120 		.word TIBB	/*TIBU */
 883 089c 00000000 	  .word 0     // SRCID 
 884 08a0 28500000 		.word INTER	/*'EVAL */
 885 08a4 00000000 		.word 0			/*HLD */
 886 08a8 C4660000 		.word _LASTN	/*CONTEXT */
 887 08ac 30670000 		.word CTOP  	/* FCP end of system dictionnary */
 888 08b0 CC5E0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 889 08b4 C4660000 		.word _LASTN	/*LAST word in dictionary */
 890 08b8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 890      00000000 
 890      00000000 
 890      00000000 
 891 08c8 00000000 		.word 0  /* RX_HEAD */
 892 08cc 00000000 		.word 0  /* RX_TAIL */ 
 893 08d0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 894 08d4 00000000 		.word 0  /* VID_STATE, video state */  
 895 08d8 00000000 	    .word 0  /* VID_FIELD, field */
 896 08dc 30810120 		.word VID_BUFF /* video_buffer address */ 
ARM GAS  forth.s 			page 30


 897 08e0 00000000 	    .word 0 /* kbd struct */
 898 08e4 00000000 		.space KBD_QUEUE_SIZE,0  
 898      00000000 
 898      00000000 
 898      00000000 
 899 08f4 00000000 		.word 0  /* kbd queue head */
 900 08f8 00000000 		.word 0 /* kbd queue tail */ 
 901 08fc 00000000 	    .word 0 /* tv cursor row */
 902 0900 00000000 	    .word 0 /* tv cursor column */ 
 903 0904 00000000 	    .word 0 /* tv back color */
 904 0908 07000000 	    .word 7 /* tv font color */
 905 090c 00000000 	    .word 0 /* FPSW */
 906 0910 00000000 	    .word 0 /* FBASE */ 
 907 0914 00000000 	    .word 0 /* BEEP_DTMR */
 908 0918 00000000 	    .word 0 /* CSTATE */ 
 909 091c 00000000 	    .word 0,0 
 909      00000000 
 910              	ULAST:
 911              	
 912              	// used by _HEADER macro 
 913              	// to link names field
 914              	// in dictionary  
 915 0924 12000000 	    .equ LINK, 0 
 915      C8000000 
 915      1C520000 
 915      6C020000 
 915      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	    ENVIRONMENT? 
  22              	    constants 
  23              	    vocabulary separate from 
  24              	    main dictionary  
  25              	*******************************/
  26              	
  27              	
  28              	/*******************************
  29              	    ENVIRONMENT? 
  30              	    ( c-addr u -- false | i * x true ) 
ARM GAS  forth.s 			page 31


  31              	********************************/
  32 0950 00000000 	    _HEADER ENVQ,12,"ENVIRONMENT?"
  32      0C454E56 
  32      49524F4E 
  32      4D454E54 
  32      3F0000BF 
  33 0964 504700BF 	    _NEST 
  34              	    // save normal context 
  35 0968 A5390000 	    _ADR CNTXT 
  36 096c 75310000 	    _ADR AT 
  37 0970 05320000 	    _ADR TOR 
  38              	    // set environment context 
  39 0974 DF300000 	    _DOLIT _ENVLASTN  
  39      EA0A0000 
  40 097c A5390000 	    _ADR   CNTXT 
  41 0980 61310000 	    _ADR   STORE 
  42              	    // search string 
  43 0984 79320000 	    _ADR   DROP 
  44 0988 41340000 	    _ADR   ONEM 
  45 098c 694C0000 	    _ADR   NAMEQ
  46 0990 99320000 	    _ADR   DUPP 
  47 0994 1F310000 	    _QBRAN  1f
  47      AC090000 
  48 099c 79320000 	    _ADR   DROP 
  49 09a0 F5300000 	    _ADR   EXECU 
  50 09a4 47310000 	    _BRAN  2f
  50      B4090000 
  51 09ac A9320000 	1:  _ADR  SWAP 
  52 09b0 79320000 	    _ADR  DROP 
  53              	2:  // restore normal context 
  54 09b4 A1310000 	    _ADR RFROM
  55 09b8 A5390000 	    _ADR CNTXT 
  56 09bc 61310000 	    _ADR STORE 
  57 09c0 BB2E0000 	    _UNNEST 
  58              	
  59              	
  60              	    .equ ENVLNK , 0 
  61              	
  62              		// dictionary header  
  63              		.macro _ENV_HEADER  label, nlen, name
  64              			.word ENVLNK 
  65              			.equ ENVLNK , . 
  66              		_\label: .byte \nlen    // name field
  67              			.ascii "\name"
  68              			.p2align 2 
  69              		\label:   // code field 
  70              		.endm 
  71              		
  72              	
  73              	/***********************************
  74              	    envronment constants 
  75              	***********************************/
  76              	
  77              	/**********************************
  78              	    /COUNTED-STRING ( -- 255 t )
  79              	constant:
  80              	    255 maximum counted string length
ARM GAS  forth.s 			page 32


  81              	*************************************/
  82 09c4 00000000 	    _ENV_HEADER CNTDSTR,15,"/COUNTED-STRING"
  82      0F2F434F 
  82      554E5445 
  82      442D5354 
  82      52494E47 
  83 09d8 47F8046D 	    _PUSH 
  84 09dc 4FF0FF06 	    MOV  TOS,#255
  85 09e0 8EE0     	    B flag_true
  86              	
  87              	
  88              	/******************************************
  89              	    /HOLD  ( -- 80 t )
  90              	    size of the pictured numeric 
  91              	    output string buffer, in characters
  92              	constant:
  93              	    80 bytes   
  94              	*******************************************/
  95 09e2 C8090000 	    _ENV_HEADER SLHOLD,5,"/HOLD"
  95      052F484F 
  95      4C44
  96 09ec 47F8046D 	    _PUSH
  97 09f0 4FF05006 	    MOV TOS,#80
  98 09f4 84E0     	    B flag_true
  99              	
 100              	/***************************************
 101              	    /PAD ( -- 80 t )	
 102              	    size of the scratch area 
 103              	    pointed to by PAD, in characters
 104              	constant: 
 105              	    80 bytes 
 106              	***************************************/
 107 09f6 E6090000 	    _ENV_HEADER SLPAD,4,"/PAD"
 107      042F5041 
 107      4400
 108 0a00 47F8046D 	    _PUSH 
 109 0a04 4FF05006 	    MOV TOS,#80
 110 0a08 7AE0     	    B flag_true
 111              	
 112              	/**************************************
 113              	    ADDRESS-UNIT-BITS ( -- 32 t )
 114              	    size of one address unit, in bits
 115              	constant:
 116              	    32 bits
 117              	**************************************/
 118 0a0a FA090000 	    _ENV_HEADER ADRBITS,17,"ADDRESS-UNIT-BITS"
 118      11414444 
 118      52455353 
 118      2D554E49 
 118      542D4249 
 119 0a20 47F8046D 	    _PUSH 
 120 0a24 4FF02006 	    MOV TOS,#32
 121 0a28 6AE0     	    B flag_true
 122              	
 123              	/***************************************
 124              	    FLOORED	( -- t ) 
 125              	    flag true if floored division 
ARM GAS  forth.s 			page 33


 126              	    is the default
 127              	constant:
 128              	    true 
 129              	***************************************/
 130 0a2a 0E0A0000 	    _ENV_HEADER FLOORED,7,"FLOORED"
 130      07464C4F 
 130      4F524544 
 130      00BF
 131 0a38 62E0     	    b flag_true
 132              	
 133              	/*************************************
 134              	    MAX-CHAR  ( -- 127 -1 t )
 135              	    maximum value of any character in 
 136              	    the implementation-defined 
 137              	    character set.
 138              	constant:
 139              	    127 
 140              	*************************************/
 141 0a3a 2E0A0000 	    _ENV_HEADER MAXCHAR,8,"MAX-CHAR"
 141      084D4158 
 141      2D434841 
 141      5200
 142 0a48 47F8046D 	    _PUSH 
 143 0a4c 4FF07F06 	    MOV TOS,#127 
 144 0a50 56E0     	    b flag_true 
 145              	
 146              	/************************************
 147              	    MAX-D	(-- 0xffffffff 0x7fffffff t )
 148              	    largest usable signed double number
 149              	constant:
 150              	    0x7FFF_FFFF_FFFF_FFFF 
 151              	************************************/
 152 0a52 3E0A0000 	    _ENV_HEADER MAXD,5,"MAX-D"
 152      054D4158 
 152      2D44
 153 0a5c 47F8046D 	    _PUSH 
 154 0a60 4FF6FF76 	    _MOV32 TOS,0xFFFFFFFF 
 154      CFF6FF76 
 155 0a68 47F8046D 	    _PUSH
 156 0a6c 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 156      C7F6FF76 
 157 0a74 44E0     	    B flag_true
 158              	
 159              	/************************************
 160              	    MAX-N ( -- 0x7FFFFFFF t ) 
 161              	    largest usable signed integer
 162              	constant:
 163              	    0x7FFFFFFF
 164              	*************************************/
 165 0a76 560A0000 	    _ENV_HEADER MAXN,5,"MAX-N"
 165      054D4158 
 165      2D4E
 166 0a80 47F8046D 	    _PUSH 
 167 0a84 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 167      C7F6FF76 
 168 0a8c 38E0     	    B flag_true 
 169              	
ARM GAS  forth.s 			page 34


 170              	/************************************
 171              	    MAX-U ( -- 0xFFFFFFFF t ) 
 172              	    largest usable unsigned integer
 173              	constant:
 174              	    0xFFFFFFFF 
 175              	************************************/
 176 0a8e 7A0A0000 	    _ENV_HEADER MAXU,5,"MAX-U"
 176      054D4158 
 176      2D55
 177 0a98 47F8046D 	    _PUSH 
 178 0a9c 4FF0FF36 	    MOV TOS,#-1 
 179 0aa0 2EE0     	    B flag_true 
 180              	
 181              	/**********************************
 182              	    MAX-UD ( -- 0xFFFFFFFF 0xFFFFFFFFF t )
 183              	    largest usable unsigned double number
 184              	constant:
 185              	    0xFFFF_FFFF_FFFF_FFFF 
 186              	*************************************/
 187 0aa2 920A0000 	    _ENV_HEADER MAXUD,6,"MAX-UD"
 187      064D4158 
 187      2D554400 
 187      00BF
 188 0ab0 47F8046D 	    _PUSH 
 189 0ab4 4FF0FF36 	    MOV  TOS,#-1 
 190 0ab8 47F8046D 	    _PUSH 
 191 0abc 4FF0FF36 	    MOV TOS,#-1 
 192 0ac0 1EE0     	    B flag_true
 193              	
 194              	/*************************************
 195              	    RETURN-STACK-CELLS ( -- 32 t )
 196              	    maximum size of the return stack, 
 197              	    in cells
 198              	constant:
 199              	    32 cells 
 200              	************************************/
 201 0ac2 A60A0000 	    _ENV_HEADER RSTKCELLS,18,"RETURN-STACK-CELLS"
 201      12524554 
 201      55524E2D 
 201      53544143 
 201      4B2D4345 
 202 0adc 47F8046D 	    _PUSH 
 203 0ae0 4FF02006 	    MOV TOS,#32 
 204 0ae4 0CE0     	    B flag_true
 205              	
 206              	/*************************************
 207              	    STACK-CELLS ( -- 32 t ) 
 208              	    maximum size of the data stack, 
 209              	    in cells
 210              	constant:
 211              	    32 cells 
 212              	*************************************/
 213 0ae6 C60A0000 		.word	ENVLNK 
 214              		ENVLINK = . 
 215 0aea 0B       	_ENVLASTN:	.byte 11
 216 0aeb 53544143 		.ascii "STACK-CELLS"
 216      4B2D4345 
ARM GAS  forth.s 			page 35


 216      4C4C53
 217 0af6 00BF     		.p2align 2	
 218              	STKCELLS: 
 219 0af8 47F8046D 	    _PUSH 
 220 0afc 4FF02006 	    MOV TOS,#32 
 221              	//    B flag_true 
 222              	
 223              	flag_true:
 224 0b00 47F8046D 	    _PUSH 
 225 0b04 4FF0FF36 	    MOV TOS,#-1 
 226 0b08 02F0D4B9 	    _NEXT 
 227              	
 228              	
 229              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0b0c 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0b14 1868     		ldr r0,[r3,#USART_SR]
  38 0b16 5968     		ldr r1,[r3,#USART_DR]
  39 0b18 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0b1c 0CD0     		beq 2f // no char received 
  41 0b1e B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0b22 3FF4B8AC 		beq user_reboot // received CTRL-C then reboot MCU 
ARM GAS  forth.s 			page 36


  43 0b26 04F15400 		add r0,UP,#RX_QUEUE
  44 0b2a A26E     		ldr r2,[UP,#RX_TAIL]
  45 0b2c 8154     		strb r1,[r0,r2]
  46 0b2e 02F10102 		add r2,#1 
  47 0b32 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0b36 A266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0b38 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0b3a 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0b42 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0b44 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0b48 01EA0201 	  and r1,r1,r2
  62 0b4c 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0b50 41EA0201 	  orr r1,r1,r2 
  64 0b54 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0b56 4FF4EE61 	  mov r1,#0x77<<4 
  67 0b5a 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0b5c 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0b64 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0b68 8160     	  str r1,[r0,#USART_BRR]
  73 0b6a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0b6e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0b70 4FF02500 	  mov r0,#USART1_IRQ 
  77 0b74 4FF00701 	  mov r1,#7
  78 0b78 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FD5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0b82 4FF02500 	  mov r0,#USART1_IRQ 
  81 0b86 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FD5DF8 
  81      04EB
  82 0b90 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0b92 54090000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
ARM GAS  forth.s 			page 37


  91 0ba0 47F8046D 		_PUSH
  92 0ba4 A06E     		ldr T0,[UP,#RX_TAIL] 
  93 0ba6 616E     		ldr T1,[UP,#RX_HEAD]
  94 0ba8 90EA0106 		eors TOS,T0,T1 
  95 0bac 0CD0     		beq 1f
  96 0bae 04F15400 		add T0,UP,#RX_QUEUE 
  97 0bb2 0844     		add T0,T1 
  98 0bb4 0678     		ldrb TOS,[T0]
  99 0bb6 01F10101 		add T1,#1 
 100 0bba 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0bbe 6166     		str T1,[UP,#RX_HEAD]
 102 0bc0 47F8046D 		_PUSH 
 103 0bc4 4FF0FF36 		mov TOS,#-1
 104 0bc8 02F074B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0bcc 960B0000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0bdc 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0be4 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0be6 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0bea FBD0     		beq 1b 
 115 0bec 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0bee 57F8046B 		_POP
 117 0bf2 02F05FB9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0bf6 D00B0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0c00 47F8046D 	        _PUSH 
 126 0c04 4FF00006 	        mov TOS,#0
 127 0c08 02F054B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0c0c FA0B0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0c18 47F8046D 	        _PUSH 
 135 0c1c 4FF00106 	        mov TOS,#1
 136 0c20 02F048B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
ARM GAS  forth.s 			page 38


 140              	    select active user interface 
 141              	****************************************/
 142 0c24 100C0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0c30 3046     	        mov T0,TOS
 144 0c32 57F8046B 	        _POP 
 145 0c36 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0c38 4B48     	        ldr T0,=SER_QKEY 
 148 0c3a 6061     	        str T0,[UP,#STDIN]
 149 0c3c 4B48     	        ldr T0,=SER_EMIT
 150 0c3e A061     	        str T0,[UP,#STDOUT]
 151 0c40 02F038B9 	        _NEXT 
 152              	4: // local console 
 153 0c44 4A48     	        ldr T0,=PS2_QKEY
 154 0c46 6061     	        str T0,[UP,#STDIN]
 155 0c48 4A48     	        ldr T0,=TV_EMIT
 156 0c4a A061     	        str T0,[UP,#STDOUT]
 157 0c4c 02F032B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0c50 280C0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0c60 504700BF 	      _NEST 
 166 0c64 DF300000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0c6c 31340000 	1:    _ADR ONEP  // c+1
 168 0c70 05320000 	      _ADR TOR   
 169 0c74 DF300000 	      _DOLIT 10 
 169      0A000000 
 170 0c7c 513D0000 	      _ADR SLMOD // r q  
 171 0c80 E5340000 	      _ADR QDUP  // r q q | r 0  
 172 0c84 1F310000 	      _QBRAN 2f  // r 0 
 172      980C0000 
 173 0c8c A1310000 	      _ADR RFROM // r q c 
 174 0c90 47310000 	      _BRAN 1b
 174      6C0C0000 
 175 0c98 DF300000 	2:    _DOLIT '0'  
 175      30000000 
 176 0ca0 D5330000 	      _ADR PLUS 
 177 0ca4 7D2F0000 	      _ADR EMIT 
 178 0ca8 A1310000 	      _ADR RFROM 
 179 0cac E5340000 	      _ADR QDUP 
 180 0cb0 1F310000 	      _QBRAN 3f
 180      C80C0000 
 181 0cb8 41340000 	      _ADR ONEM 
 182 0cbc 05320000 	      _ADR TOR 
 183 0cc0 47310000 	      _BRAN 2b 
 183      980C0000 
 184              	3:    
ARM GAS  forth.s 			page 39


 185 0cc8 BB2E0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0ccc 540C0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0cd8 504700BF 	      _NEST 
 193 0cdc DF300000 	      _DOLIT 27 
 193      1B000000 
 194 0ce4 7D2F0000 	      _ADR EMIT 
 195 0ce8 DF300000 	      _DOLIT '['
 195      5B000000 
 196 0cf0 7D2F0000 	      _ADR EMIT 
 197 0cf4 BB2E0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0cf8 D00C0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0d04 504700BF 	      _NEST
 205 0d08 D90C0000 	      _ADR ANSI_ESC
 206 0d0c A9320000 	      _ADR SWAP 
 207 0d10 610C0000 	      _ADR ANSI_PARAM 
 208 0d14 DF300000 	      _DOLIT ';'
 208      3B000000 
 209 0d1c 7D2F0000 	      _ADR EMIT
 210 0d20 610C0000 	      _ADR ANSI_PARAM
 211 0d24 DF300000 	      _DOLIT 'H'
 211      48000000 
 212 0d2c 7D2F0000 	      _ADR EMIT 
 213 0d30 BB2E0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0d34 FC0C0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0d40 504700BF 	    _NEST
 221 0d44 DF300000 	    _DOLIT 1 
 221      01000000 
 222 0d4c 99320000 	    _ADR DUPP 
 223 0d50 050D0000 	    _ADR SER_AT  
 224 0d54 D90C0000 	    _ADR ANSI_ESC
 225 0d58 DF300000 	    _DOLIT 'J'
 225      4A000000 
 226 0d60 7D2F0000 	    _ADR EMIT 
 227 0d64 BB2E0000 	    _UNNEST 
 228 0d68 A00B0000 	
 228      DC0B0000 
ARM GAS  forth.s 			page 40


 228      201A0000 
 228      E8120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
ARM GAS  forth.s 			page 41


  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0d78 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0d80 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0d82 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0d8a 41EA0201 	  orr r1,r2
  82 0d8e 0160     	  str r1,[r0,#GPIO_MODER]
ARM GAS  forth.s 			page 42


  83 0d90 81EA0101 	  eor r1,r1 
  84 0d94 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0d96 4FF00101 	  mov r1,#1 // pin 1 
  88 0d9a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0d9e 00B5FFF7 	  _CALL gpio_config 
  89      FEFC5DF8 
  89      04EB
  90 0da8 4FF00101 	  mov r1,#1 
  91 0dac 4FF00202 	  mov r2,#2
  92 0db0 00B5FFF7 	  _CALL gpio_speed 
  92      34FD5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0dba 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0dbc 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0dc0 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0dc2 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0dca 4FF00200 	  mov r0,#2 
 100 0dce 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0dd0 41EA0001 	  orr r1,r0 
 102 0dd4 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0dd6 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0dde 41F2D470 	  mov r0,#HPER
 106 0de2 D062     	  str r0,[r2,#TIM_ARR]
 107 0de4 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0de8 D063     	  str r0,[r2,#TIM_CCR3]
 109 0dea 4FF4E170 	  mov r0,#HPULSE 
 110 0dee 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0df0 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0df4 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0df6 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0dfa 1062     	  str r0,[r2,#TIM_CCER]
 115 0dfc 4FF00100 	  mov r0,#1 
 116 0e00 D060     	  str r0,[r2,#TIM_DIER]
 117 0e02 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0e04 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0e08 4FF00201 	  mov r1,#2
 121 0e0c 00B5FFF7 	  _CALL nvic_set_priority
 121      6BFC5DF8 
 121      04EB
 122 0e16 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0e1a 00B5FFF7 	  _CALL nvic_enable_irq
 123      7DFC5DF8 
 123      04EB
 124 0e24 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
ARM GAS  forth.s 			page 43


 130              	*************************************/
 131 0e26 00BF     	  _GBL_FUNC tv_out_isr
 132 0e28 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0e30 81EA0101 	  eor T1,T1
 134 0e34 0161     	  str T1,[T0,#TIM_SR]
 135 0e36 E16E     	  ldr T1,[UP,#VID_CNTR]
 136 0e38 01F10101 	  add T1,#1 
 137 0e3c E166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0e3e 226F     	  ldr T2,[UP,#VID_STATE]
 140 0e40 002A     	  cmp T2,#ST_VSYNC 
 141 0e42 07D0     	  beq state_vsync
 142 0e44 012A     	  cmp T2,#ST_PREVID 
 143 0e46 2FD0     	  beq state_pre_video 
 144 0e48 022A     	  cmp T2,#ST_VIDEO 
 145 0e4a 36D0     	  beq state_video_out 
 146 0e4c 032A     	  cmp T2,#ST_POSTVID 
 147 0e4e 63D0     	  beq state_post_video
 148 0e50 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0e54 0129     	  cmp T1,#1
 152 0e56 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0e58 4FF0DB01 	  mov T1,#SERRATION
 155 0e5c 0164     	  str T1,[T0,#TIM_CCR4]
 156 0e5e 40F6E931 	  mov T1,#SYNC_LINE 
 157 0e62 C162     	  str T1,[T0,#TIM_ARR]
 158 0e64 6BE0     	  b tv_isr_exit 
 159 0e66 0729     	1: cmp T1,#7
 160 0e68 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0e6a 40F62821 	  mov T1,#VSYNC_PULSE
 163 0e6e 0164     	  str T1,[T0,#TIM_CCR4]
 164 0e70 65E0     	  b tv_isr_exit
 165 0e72 0D29     	2: cmp T1,#13
 166 0e74 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0e76 4FF0DB01 	   mov T1,#SERRATION 
 169 0e7a 0164     	   str T1,[T0,#TIM_CCR4]
 170 0e7c 5FE0     	   b tv_isr_exit   
 171 0e7e 1229     	3: cmp T1,#18
 172 0e80 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0e82 616F     	   ldr T1,[UP,#VID_FIELD]
 175 0e84 0029     	   cmp T1,#ODD_FIELD  
 176 0e86 5AD0     	   beq tv_isr_exit 
 177 0e88 01E0     	   b sync_end 
 178 0e8a 1329     	4: cmp T1,#19 
 179 0e8c 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0e8e 4FF00901 	   mov T1,#9
 182 0e92 E166     	   str T1,[UP,#VID_CNTR]
 183 0e94 4FF4E171 	   mov T1,#HPULSE 
 184 0e98 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0e9a 41F2D471 	   mov T1,#HPER 
ARM GAS  forth.s 			page 44


 186 0e9e C162     	   str T1,[T0,#TIM_ARR] 
 187 0ea0 4FF00101 	   mov T1,#ST_PREVID 
 188 0ea4 2167     	   str T1,[UP,#VID_STATE]
 189 0ea6 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ea8 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0eaa 48D4     	   bmi tv_isr_exit 
 194 0eac 4FF00201 	   mov T1,#ST_VIDEO 
 195 0eb0 2167     	   str T1,[UP,#VID_STATE]
 196 0eb2 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0eb6 C160     	   str T1,[T0,#TIM_DIER]
 198 0eb8 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0eba F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ebc 06D9     	   bls 1f 
 205 0ebe 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ec2 2167     	   str T1,[UP,#VID_STATE]
 207 0ec4 4FF00101 	   mov T1,#1 
 208 0ec8 C160     	   str T1,[T0,#TIM_DIER]
 209 0eca 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ecc A06F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ece A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ed2 4FF0A003 	   mov T3,#160
 214 0ed6 03FB01F1 	   mul T1,T3 
 215 0eda 0844     	   add T0,T1  
 216 0edc 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0ee4 10F8012B 	2: ldrb T2,[T0],#1 
 222 0ee8 4FEA0222 	   lsl T2,#8 
 223 0eec 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0eee AFF30080 	   nop.w 
 225 0ef2 AFF30080 	   nop.w
 226 0ef6 AFF30080 	   nop.w 
 227 0efa AFF30080 	   nop.w 
 228 0efe 4FEA0212 	   lsl T2,#4  
 229 0f02 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0f04 AFF30080 	   nop.w
 231 0f08 AFF30080 	   nop.w  
 232 0f0c 013B     	   subs T3,#1
 233 0f0e E9D1     	   bne 2b  
 234 0f10 4FF47022 	   mov T2,#(15<<16) 
 235 0f14 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0f16 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0f18 4FF48372 	   mov T2,#262
 239 0f1c 9142     	   cmp T1,T2
 240 0f1e 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
ARM GAS  forth.s 			page 45


 242 0f20 616F     	   ldr T1,[UP,VID_FIELD]
 243 0f22 11B9     	   cbnz T1, frame_end 
 244 0f24 40F6E931 	   mov T1,#SYNC_LINE
 245 0f28 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0f2a 4FF00001 	   mov T1,#ST_VSYNC 
 248 0f2e 2167     	   str T1,[UP,#VID_STATE]
 249 0f30 81EA0101 	   eor T1,T1 
 250 0f34 E166     	   str T1,[UP,#VID_CNTR]
 251 0f36 616F     	   ldr T1,[UP,#VID_FIELD]
 252 0f38 6FEA0101 	   mvn T1,T1  
 253 0f3c 6167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0f3e 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0f40 380D0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0f50 47F8046D 		_PUSH 
 266 0f54 04F1A006 		ADD TOS,UP,#BK_COLOR
 267 0f58 01F0ACBF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0f5c 440F0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0f6c 47F8046D 		_PUSH 
 273 0f70 04F1A406 		ADD TOS,UP,#PEN_COLOR
 274 0f74 01F09EBF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0f78 600F0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0f84 47F8046D 	  _PUSH 
 280 0f88 04F19C06 	  ADD TOS,UP,#COL 
 281 0f8c 01F092BF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0f90 7C0F0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0f98 47F8046D 	  _PUSH 
 287 0f9c 04F19806 	  ADD TOS,UP,#ROW 
 288 0fa0 01F088BF 	  _NEXT 
 289              	
ARM GAS  forth.s 			page 46


 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0fa4 940F0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0fb0 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0fb4 00FB06F6 	  mul TOS,T0 
 295 0fb8 01F07CBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0fbc A80F0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0fc8 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0fcc 00FB06F6 	  mul TOS,T0 
 302 0fd0 01F070BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0fd4 C00F0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0fe0 47F8046D 	  _PUSH 
 308 0fe4 DFF88C65 	  ldr TOS,=font_6x8 
 309 0fe8 01F064BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0fec D80F0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0ff8 47F8046D 	  _PUSH 
 315 0ffc A66F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0ffe 01F059BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 1002 F00F0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 100c 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 100e 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 1012 02FB00F0 	    mul T0,T2 
 330 1016 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 101a 1044     	    add T0,T2 
 332 101c A36F     	    ldr T3,[UP,#VID_BUFFER] 
 333 101e 0344     	    add T3,T0 // T3 -> byte address 
 334 1020 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 1022 4FF00F02 	    mov T2,#15 // AND mask 
 336 1026 11F0010F 	    tst T1,#1 
ARM GAS  forth.s 			page 47


 337 102a 01D0     	    beq 1f 
 338 102c 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 1030 DFF84405 	1:  ldr T0,=plot_op 
 340 1034 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 1038 05EA0205 	    and WP,T2 // mask out nibble 
 343 103c 94F8A000 	    ldrb T0,[UP,#BK_COLOR]
 344 1040 11F0010F 	    tst T1,#1 
 345 1044 01D1     	    bne 1f 
 346 1046 4FEA0010 	    lsl T0,#4 // high nibble  
 347 104a 45EA0005 	1:  orr WP,T0  
 348 104e 1D70     	    strb WP,[T3]
 349 1050 1AE0     	    b 9f 
 350              	op_pen: 
 351 1052 05EA0205 	    and WP,T2 
 352 1056 94F8A400 	    ldrb T0,[UP,#PEN_COLOR]
 353 105a 11F0010F 	    tst T1,#1
 354 105e 01D1     	    bne 1f 
 355 1060 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 1064 45EA0005 	1:	orr WP,T0 
 357 1068 1D70     	    strb WP,[T3]
 358 106a 0DE0     	    b 9f 
 359              	op_invert:
 360 106c 85EA0205 	    eor WP,T2 
 361 1070 1D70     	    strb WP,[T3]
 362 1072 09E0     	    b 9f 
 363              	op_xor:
 364 1074 D4F8A400 	    ldr T0,[UP,#PEN_COLOR]
 365 1078 11F0010F 	    tst T1,#1 
 366 107c 01D1     	    bne 1f 
 367 107e 4FEA0010 	    lsl T0,#4 
 368 1082 85EA0005 	1:  eor WP,T0 
 369 1086 1D70     	    strb WP,[T3]
 370 1088 57F8046B 	9:  _POP 
 371 108c 01F012BF 	    _NEXT 
 372              	
 373 1090 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 1094 06100000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 10a0 E06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 10a2 0028     	    cmp T0,#0
 381 10a4 FCD1     	    bne 1b
 382 10a6 01F005BF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 10aa 98100000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 10b4 80EA0000 	    eor T0,T0 
 388 10b8 94F8A010 	    ldrb T1,[UP,#BK_COLOR]
 389 10bc 40EA0100 	    orr T0,T1 
ARM GAS  forth.s 			page 48


 390 10c0 4FEA0111 	    lsl T1,#4 
 391 10c4 40EA0100 	    orr T0,T1 
 392 10c8 4FEA0021 	    lsl T1,T0,#8 
 393 10cc 40EA0100 	    orr T0,T1 
 394 10d0 4FEA0041 	    lsl T1,T0,#16
 395 10d4 40EA0100 	    orr T0,T1 
 396 10d8 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 10dc A26F     	    ldr T2,[UP,#VID_BUFFER]
 398 10de 5050     	1:	str T0,[T2,T1]
 399 10e0 0439     	    subs T1,#4
 400 10e2 FCD1     	    bne 1b
 401 10e4 1060     	    str T0,[T2]
 402 10e6 80EA0000 	    eor T0,T0 
 403 10ea C4F89800 	    str T0,[UP,#ROW]
 404 10ee C4F89C00 	    str T0,[UP,#COL]
 405 10f2 01F0DFBE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 10f6 AE100000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 1104 504700BF 	  _NEST
 412 1108 DF300000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 1110 99320000 	  _ADR DUPP  
 414 1114 05320000 	  _ADR TOR 
 415 1118 F5330000 	  _ADR STAR
 416 111c F90F0000 	  _ADR VIDBUFF
 417 1120 D5330000 	  _ADR PLUS
 418 1124 A1310000 	  _ADR RFROM   
 419 1128 DF300000 	  _DOLIT 0 
 419      00000000 
 420 1130 21400000 	  _ADR FILL 
 421 1134 BB2E0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 1138 FA100000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 1148 504700BF 	    _NEST 
 429 114c F90F0000 	    _ADR VIDBUFF 
 430 1150 99320000 	    _ADR DUPP 
 431 1154 DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 115c 99320000 	    _ADR DUPP 
 433 1160 05320000 	    _ADR TOR 
 434 1164 D5330000 	    _ADR PLUS 
 435 1168 A9320000 	    _ADR SWAP 
 436 116c DF300000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
ARM GAS  forth.s 			page 49


 437 1174 A1310000 	    _ADR RFROM  
 438 1178 E5330000 	    _ADR SUBB 
 439 117c D93F0000 	    _ADR WMOVE
 440 1180 DF300000 	    _DOLIT 24 
 440      18000000 
 441 1188 05110000 	    _ADR CLRLINE 
 442 118c BB2E0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 1190 3C110000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 11a0 504700BF 	    _NEST 
 450 11a4 F90F0000 	    _ADR VIDBUFF
 451 11a8 99320000 	    _ADR DUPP 
 452 11ac DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 11b4 D5330000 	    _ADR PLUS 
 454 11b8 DF300000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 11c0 DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 11c8 E5330000 	    _ADR SUBB  
 457 11cc D93F0000 	    _ADR WMOVE
 458 11d0 DF300000 	    _DOLIT 0 
 458      00000000 
 459 11d8 05110000 	    _ADR CLRLINE
 460 11dc BB2E0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 11e0 94110000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 11ec E34D     	    ldr WP,=SCROLLUP 
 469 11ee 45F00105 	    orr WP,#1
 470 11f2 80EA0000 	    eor T0,T0 
 471 11f6 C4F89C00 	    str T0,[UP,#COL]
 472 11fa D4F89800 	    ldr T0,[UP,#ROW]
 473 11fe 1828     	    cmp T0,#24 
 474 1200 A2D0     	    beq SCROLLUP  
 475 1202 00F10100 	    add T0,#1 
 476 1206 C4F89800 	    str T0,[UP,#ROW]
 477 120a 01F053BE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 120e E4110000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
ARM GAS  forth.s 			page 50


 482      4854
 483 1218 D4F89C00 	  ldr T0,[UP,#COL]
 484 121c 00F10100 	  add T0,#1
 485 1220 3528     	  cmp T0,#53
 486 1222 E3D5     	  bpl TV_CRLF  
 487 1224 C4F89C00 	  str T0,[UP,#COL]
 488 1228 01F044BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 122c 12120000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1238 D4F89C00 	    ldr T0,[UP,#COL]
 497 123c 28B1     	    cbz T0,1f 
 498 123e A0F10100 	    sub T0,#1 
 499 1242 C4F89C00 	    str T0,[UP,#COL]
 500 1246 01F035BE 	    _NEXT 
 501 124a D4F89800 	1:  ldr T0,[UP,#ROW]
 502 124e 38B1     	    cbz T0,9f
 503 1250 A0F10100 	    sub T0,#1
 504 1254 C4F89800 	    str T0,[UP,#ROW]
 505 1258 4FF03400 	    mov T0,#52 
 506 125c C4F89C00 	    str T0,[UP,#COL]
 507 1260 01F028BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 1264 4FF08000 	    mov T0,#128 
 513 1268 06EA0006 	    and TOS,T0 
 514 126c 4FEAD616 	    lsr TOS,#7
 515 1270 01F020BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 1274 3868     	  ldr T0,[DSP]
 520 1276 00F10100 	  add T0,#1 
 521 127a 3860     	  str T0,[DSP]
 522 127c 01F01ABE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 1280 4FEA4606 	    lsl TOS,#1
 527 1284 01F016BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 1288 504700BF 	    _NEST 
 536 128c DF300000 	    _DOLIT 5 
ARM GAS  forth.s 			page 51


 536      05000000 
 537 1294 05320000 	    _ADR TOR 
 538 1298 05320000 	1:  _ADR TOR 
 539 129c CD350000 	    _ADR DDUP 
 540 12a0 D5310000 	    _ADR RAT
 541 12a4 65120000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 12a8 0D100000 	    _ADR PLOT 
 543 12ac 75120000 	    _ADR INCR_X 
 544 12b0 A1310000 	    _ADR RFROM 
 545 12b4 81120000 	    _ADR NEXT_PIXEL
 546 12b8 01310000 	    _DONXT 1b
 546      98120000 
 547 12c0 B9350000 	    _ADR TDROP 
 548 12c4 BB2E0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 12c8 A6F12006 	   sub TOS,#32
 553 12cc 4FF00800 	   mov T0,#8 
 554 12d0 00FB06F6 	   mul TOS,T0 
 555 12d4 A748     	   ldr T0,=font_6x8
 556 12d6 0644     	   add TOS,T0 
 557 12d8 01F0ECBD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 12dc 30120000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 12e8 504700BF 	    _NEST
 565 12ec 99320000 	    _ADR DUPP 
 566 12f0 DF300000 	    _DOLIT 32 
 566      20000000 
 567 12f8 5D370000 	    _ADR ULESS
 568 12fc 1F310000 	    _QBRAN 1f
 568      0C130000 
 569 1304 47310000 	    _BRAN CTRL_KEY
 569      70130000 
 570 130c C9120000 	1:  _ADR CHAR_FONT 
 571 1310 850F0000 	    _ADR CURSOR_COL 
 572 1314 75310000 	    _ADR AT
 573 1318 C90F0000 	    _ADR COLX  // x coord 
 574 131c 990F0000 	    _ADR CURSOR_ROW 
 575 1320 75310000 	    _ADR AT    
 576 1324 B10F0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1328 7D350000 	    _ADR ROT  // TEST 
 578 132c DF300000 	    _DOLIT 7   
 578      07000000 
 579 1334 05320000 	    _ADR TOR  
 580 1338 05320000 	1:  _ADR TOR  // { x y }
 581 133c CD350000 	    _ADR DDUP  // { x y x y }
 582 1340 D5310000 	    _ADR RAT 
 583 1344 95310000 	    _ADR CAT   // { x y x y r }
 584 1348 89120000 	    _ADR CHAR_ROW 
 585 134c 31340000 	    _ADR ONEP // {x y' }
ARM GAS  forth.s 			page 52


 586 1350 A1310000 	    _ADR RFROM 
 587 1354 31340000 	    _ADR ONEP // {x y' c-adr' }
 588 1358 01310000 	    _DONXT 1b
 588      38130000 
 589 1360 B9350000 	    _ADR TDROP  
 590 1364 19120000 	    _ADR RIGHT
 591 1368 59140000 	9:  _ADR SHOW_CURSOR 
 592 136c BB2E0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 1370 E1140000 	    _ADR HIDE_CURSOR
 595 1374 99320000 	    _ADR DUPP 
 596 1378 DF300000 	    _DOLIT BKSPP  
 596      08000000 
 597 1380 1D370000 	    _ADR EQUAL 
 598 1384 1F310000 	    _QBRAN 1f 
 598      9C130000 
 599 138c 39140000 	    _ADR BACK_SPACE 
 600 1390 79320000 	8:  _ADR DROP 
 601 1394 47310000 	    _BRAN 9b 
 601      68130000 
 602 139c 99320000 	1:  _ADR DUPP 
 603 13a0 DF300000 	    _DOLIT CRR 
 603      0D000000 
 604 13a8 1D370000 	    _ADR EQUAL 
 605 13ac 1F310000 	    _QBRAN 1f 
 605      C0130000 
 606 13b4 E1130000 	    _ADR CAR_RET
 607 13b8 47310000 	    _BRAN 8b
 607      90130000 
 608 13c0 DF300000 	1:  _DOLIT LF 
 608      0A000000 
 609 13c8 1D370000 	    _ADR EQUAL 
 610 13cc 1F310000 	    _QBRAN 9b 
 610      68130000 
 611 13d4 F9130000 	    _ADR LN_FEED
 612 13d8 47310000 	    _BRAN 9b  
 612      68130000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 13e0 504700BF 	   _NEST
 620 13e4 DF300000 	   _DOLIT 0 
 620      00000000 
 621 13ec 850F0000 	   _ADR CURSOR_COL 
 622 13f0 61310000 	   _ADR STORE 
 623 13f4 BB2E0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 13f8 504700BF 	    _NEST 
 631 13fc 990F0000 	    _ADR CURSOR_ROW 
ARM GAS  forth.s 			page 53


 632 1400 75310000 	    _ADR AT 
 633 1404 99320000 	    _ADR DUPP 
 634 1408 DF300000 	    _DOLIT 24 
 634      18000000 
 635 1410 7D330000 	    _ADR XORR 
 636 1414 1F310000 	    _QBRAN 1f
 636      2C140000 
 637 141c 31340000 	    _ADR ONEP 
 638 1420 990F0000 	    _ADR CURSOR_ROW 
 639 1424 61310000 	    _ADR STORE 
 640 1428 BB2E0000 	    _UNNEST    
 641 142c 79320000 	1:  _ADR DROP 
 642 1430 49110000 	    _ADR SCROLLUP 
 643 1434 BB2E0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1438 504700BF 	  _NEST 
 652 143c 39120000 	  _ADR LEFT 
 653 1440 59140000 	  _ADR SHOW_CURSOR
 654 1444 BB2E0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1448 E0120000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1458 504700BF 	    _NEST 
 663 145c DF300000 	    _DOLIT 0xFF
 663      FF000000 
 664 1464 990F0000 	0:  _ADR CURSOR_ROW
 665 1468 75310000 	    _ADR AT  
 666 146c 31340000 	    _ADR ONEP 
 667 1470 B10F0000 	    _ADR ROWY 
 668 1474 DF300000 	    _DOLIT BPR
 668      A0000000 
 669 147c F5330000 	    _ADR STAR
 670 1480 DF300000 	    _DOLIT BPR  
 670      A0000000 
 671 1488 E5330000 	    _ADR SUBB 
 672 148c 850F0000 	    _ADR CURSOR_COL
 673 1490 75310000 	    _ADR AT 
 674 1494 C90F0000 	    _ADR COLX 
 675 1498 D5340000 	    _ADR TWOSL  
 676 149c D5330000 	    _ADR PLUS
 677 14a0 F90F0000 	    _ADR VIDBUFF
 678 14a4 D5330000 	    _ADR PLUS
 679 14a8 DF300000 	    _DOLIT 2
 679      02000000 
ARM GAS  forth.s 			page 54


 680 14b0 05320000 	    _ADR TOR  
 681 14b4 CD350000 	1:  _ADR DDUP 
 682 14b8 81310000 	    _ADR CSTOR 
 683 14bc 31340000 	    _ADR ONEP 
 684 14c0 01310000 	    _DONXT 1b
 684      B4140000 
 685 14c8 A5350000 	2:  _ADR DDROP // drop 3 elements 
 686 14cc BB2E0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 14d0 4C140000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 14e0 504700BF 	    _NEST 
 694 14e4 510F0000 	    _ADR BACKCOLOR 
 695 14e8 75310000 	    _ADR AT 
 696 14ec 99320000 	    _ADR DUPP  
 697 14f0 DF300000 	    _DOLIT 4 
 697      04000000 
 698 14f8 C5330000 	    _ADR LSHIFT 
 699 14fc 69330000 	    _ADR ORR 
 700 1500 47310000 	    _BRAN 0b
 700      64140000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1508 D4140000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1514 352E     	    cmp TOS,#53
 706 1516 01D4     	    bmi 1f 
 707 1518 4FF03406 	    mov TOS,#52
 708 151c C4F89C60 	1:  str TOS,[UP,#COL]
 709 1520 57F8046B 	    _POP
 710 1524 192E     	    cmp TOS,#25
 711 1526 01D4     	    bmi 1f 
 712 1528 4FF01806 	    mov TOS,#24 
 713 152c C4F89860 	1:  str TOS,[UP,#ROW]
 714 1530 57F8046B 	    _POP 
 715 1534 01F0BEBC 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1538 0C150000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1544 504700BF 	    _NEST 
 721 1548 013F0000 	    _ADR PAD 
 722 154c 99320000 	    _ADR DUPP 
 723 1550 31340000 	    _ADR ONEP 
 724 1554 DF300000 	    _DOLIT 53
 724      35000000 
 725 155c 294E0000 	    _ADR ACCEP
ARM GAS  forth.s 			page 55


 726 1560 A9320000 	    _ADR SWAP 
 727 1564 79320000 	    _ADR DROP 
 728 1568 D9320000 	    _ADR OVER 
 729 156c 81310000 	    _ADR CSTOR  
 730 1570 BB2E0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
ARM GAS  forth.s 			page 56


 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
ARM GAS  forth.s 			page 57


 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
ARM GAS  forth.s 			page 58


 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
ARM GAS  forth.s 			page 59


  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
ARM GAS  forth.s 			page 60


  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
ARM GAS  forth.s 			page 61


  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
ARM GAS  forth.s 			page 62


 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 1580 1C61     	   .byte 0x1c,'a' 
   9 1582 3262     	   .byte 0x32,'b'
  10 1584 2163     	   .byte 0x21,'c'
  11 1586 2364     	   .byte 0x23,'d'
  12 1588 2465     	   .byte 0x24,'e'
  13 158a 2B66     	   .byte 0x2b,'f'
  14 158c 3467     	   .byte 0x34,'g'
  15 158e 3368     	   .byte 0x33,'h'
  16 1590 4369     	   .byte 0x43,'i'
  17 1592 3B6A     	   .byte 0x3B,'j'
  18 1594 426B     	   .byte 0x42,'k'
  19 1596 4B6C     	   .byte 0x4b,'l'
  20 1598 3A6D     	   .byte 0x3a,'m'
  21 159a 316E     	   .byte 0x31,'n'
  22 159c 446F     	   .byte 0x44,'o'
  23 159e 4D70     	   .byte 0x4d,'p'
  24 15a0 1571     	   .byte 0x15,'q'
  25 15a2 2D72     	   .byte 0x2d,'r'
  26 15a4 1B73     	   .byte 0x1b,'s'
  27 15a6 2C74     	   .byte 0x2c,'t'
  28 15a8 3C75     	   .byte 0x3c,'u'
  29 15aa 2A76     	   .byte 0x2a,'v'
  30 15ac 1D77     	   .byte 0x1d,'w'
  31 15ae 2278     	   .byte 0x22,'x'
  32 15b0 3579     	   .byte 0x35,'y'
  33 15b2 1A7A     	   .byte 0x1a,'z'
  34 15b4 4530     	   .byte 0x45,'0'
  35 15b6 1631     	   .byte 0x16,'1'
  36 15b8 1E32     	   .byte 0x1e,'2'
  37 15ba 2633     	   .byte 0x26,'3'
  38 15bc 2534     	   .byte 0x25,'4'
  39 15be 2E35     	   .byte 0x2e,'5'
  40 15c0 3636     	   .byte 0x36,'6'
  41 15c2 3D37     	   .byte 0x3d,'7'
  42 15c4 3E38     	   .byte 0x3e,'8'
  43 15c6 4639     	   .byte 0x46,'9'
  44 15c8 0E60     	   .byte 0x0e,'`'
  45 15ca 4E2D     	   .byte 0x4e,'-'
  46 15cc 553D     	   .byte 0x55,'='
  47 15ce 5D5C     	   .byte 0x5d,'\\'
  48 15d0 545B     	   .byte 0x54,'['
  49 15d2 5B5D     	   .byte 0x5b,']'
  50 15d4 4C3B     	   .byte 0x4c,';'
  51 15d6 5227     	   .byte 0x52,'\''
  52 15d8 412C     	   .byte 0x41,','
ARM GAS  forth.s 			page 63


  53 15da 492E     	   .byte 0x49,'.'
  54 15dc 7C2A     	   .byte 0x7c,'*'
  55 15de 792B     	   .byte 0x79,'+'
  56 15e0 2920     	   .byte 0x29,' '
  57 15e2 5A0D     	   .byte SC_ENTER,CRR 
  58 15e4 6608     	   .byte SC_BKSP,BKSPP 
  59 15e6 0D09     	   .byte SC_TAB,9
  60 15e8 761B     	   .byte SC_ESC,27
  61 15ea 119E     	   .byte SC_LALT,VK_LALT 
  62 15ec 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 15ee 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 15f0 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 15f2 779A     	   .byte SC_NUM,VK_NLOCK 
  66 15f4 5800     	   .byte SC_CAPS,0
  67 15f6 0580     	   .byte SC_F1,VK_F1
  68 15f8 0681     	   .byte SC_F2,VK_F2
  69 15fa 0482     	   .byte SC_F3,VK_F3
  70 15fc 0C83     	   .byte SC_F4,VK_F4
  71 15fe 0384     	   .byte SC_F5,VK_F5
  72 1600 0B85     	   .byte SC_F6,VK_F6
  73 1602 8386     	   .byte SC_F7,VK_F7
  74 1604 0A87     	   .byte SC_F8,VK_F8
  75 1606 0188     	   .byte SC_F9,VK_F9
  76 1608 098A     	   .byte SC_F10,VK_F10
  77 160a 788B     	   .byte SC_F11,VK_F11
  78 160c 078C     	   .byte SC_F12,VK_F12
  79 160e 7030     	   .byte SC_KP0,'0'
  80 1610 6931     	   .byte SC_KP1,'1'
  81 1612 7232     	   .byte SC_KP2,'2'
  82 1614 7A33     	   .byte SC_KP3,'3'
  83 1616 6B34     	   .byte SC_KP4,'4'
  84 1618 7335     	   .byte SC_KP5,'5'
  85 161a 7436     	   .byte SC_KP6,'6'
  86 161c 6C37     	   .byte SC_KP7,'7'
  87 161e 7538     	   .byte SC_KP8,'8'
  88 1620 7D39     	   .byte SC_KP9,'9'
  89 1622 7C2A     	   .byte SC_KPMUL,'*'
  90 1624 4A2F     	   .byte SC_KPDIV,'/'
  91 1626 792B     	   .byte SC_KPPLUS,'+'
  92 1628 7B2D     	   .byte SC_KPMINUS,'-'
  93 162a 712E     	   .byte SC_KPDOT,'.'
  94 162c 5A0D     	   .byte SC_KPENTER,'\r'
  95 162e FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1630 AAAA     	   .byte BAT_OK,BAT_OK  
  97 1632 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1634 6141     	   .byte 'a','A'
 102 1636 6242     	   .byte 'b','B'
 103 1638 6343     	   .byte 'c','C'
 104 163a 6444     	   .byte 'd','D'
 105 163c 6545     	   .byte 'e','E'
 106 163e 6646     	   .byte 'f','F'
 107 1640 6747     	   .byte 'g','G'
 108 1642 6848     	   .byte 'h','H'
 109 1644 6949     	   .byte 'i','I'
ARM GAS  forth.s 			page 64


 110 1646 6A4A     	   .byte 'j','J'
 111 1648 6B4B     	   .byte 'k','K'
 112 164a 6C4C     	   .byte 'l','L'
 113 164c 6D4D     	   .byte 'm','M'
 114 164e 6E4E     	   .byte 'n','N'
 115 1650 6F4F     	   .byte 'o','O'
 116 1652 7050     	   .byte 'p','P'
 117 1654 7151     	   .byte 'q','Q'
 118 1656 7252     	   .byte 'r','R'
 119 1658 7353     	   .byte 's','S'
 120 165a 7454     	   .byte 't','T'
 121 165c 7555     	   .byte 'u','U'
 122 165e 7656     	   .byte 'v','V'
 123 1660 7757     	   .byte 'w','W'
 124 1662 7858     	   .byte 'x','X'
 125 1664 7959     	   .byte 'y','Y'
 126 1666 7A5A     	   .byte 'z','Z'
 127 1668 3121     	   .byte '1','!'
 128 166a 3240     	   .byte '2','@'
 129 166c 3323     	   .byte '3','#'
 130 166e 3424     	   .byte '4','$'
 131 1670 3525     	   .byte '5','%'
 132 1672 365E     	   .byte '6','^'
 133 1674 3726     	   .byte '7','&'
 134 1676 382A     	   .byte '8','*'
 135 1678 3928     	   .byte '9','('
 136 167a 3029     	   .byte '0',')'
 137 167c 2D5F     	   .byte '-','_'
 138 167e 3D2B     	   .byte '=','+'
 139 1680 607E     	   .byte '`','~'
 140 1682 2722     	   .byte '\'','"'
 141 1684 2C3C     	   .byte ',','<'
 142 1686 2E3E     	   .byte '.','>'
 143 1688 2F3F     	   .byte '/','?'
 144 168a 5C7C     	   .byte '\\','|'
 145 168c 3B3A     	   .byte ';',':'
 146 168e 5B7B     	   .byte '[','{'
 147 1690 5D7D     	   .byte ']','}'
 148 1692 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1694 315C     	   .byte '1','\\'
 153 1696 3240     	   .byte '2','@'
 154 1698 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 169a 363F     	   .byte '6','?'
 158 169c 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 169e 397B     	   .byte '9','{'
 161 16a0 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 16a2 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
ARM GAS  forth.s 			page 65


 167              	extended:
 168 16a4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 16a6 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 16a8 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 16aa 11A3     	    .byte SC_RALT,VK_RALT
 172 16ac 2F97     	    .byte SC_APPS,VK_APPS
 173 16ae 758D     	    .byte SC_UP,VK_UP
 174 16b0 728E     	    .byte SC_DOWN,VK_DOWN
 175 16b2 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 16b4 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 16b6 7095     	    .byte SC_INSERT,VK_INSERT
 178 16b8 6C91     	    .byte SC_HOME,VK_HOME
 179 16ba 7D93     	    .byte SC_PGUP,VK_PGUP
 180 16bc 7A94     	    .byte SC_PGDN,VK_PGDN
 181 16be 717F     	    .byte SC_DEL,VK_DELETE
 182 16c0 6992     	    .byte SC_END,VK_END
 183 16c2 4A2F     	    .byte SC_KPDIV,'/'
 184 16c4 5A0D     	    .byte SC_KPENTER,'\r'
 185 16c6 1200     	    .byte 0x12,0
 186 16c8 7C00     	    .byte 0x7c,0
 187 16ca 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 16cc 6303     	   .byte 'c', VK_CTRL_C 
 193 16ce 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 16d0 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 16d2 27A2     	   .byte SC_RGUI,VK_RGUI
 196 16d4 11A3     	   .byte SC_RALT,VK_RALT
 197 16d6 2F97     	   .byte SC_APPS,VK_APPS
 198 16d8 7095     	   .byte SC_INSERT,VK_INSERT
 199 16da 6C91     	   .byte SC_HOME,VK_HOME
 200 16dc 7D93     	   .byte SC_PGUP,VK_PGUP
 201 16de 717F     	   .byte SC_DEL,VK_DELETE
 202 16e0 6992     	   .byte SC_END,VK_END
 203 16e2 7A94     	   .byte SC_PGDN,VK_PGDN
 204 16e4 758D     	   .byte SC_UP,VK_UP
 205 16e6 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 16e8 728E     	   .byte SC_DOWN,VK_DOWN
 207 16ea 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 16ec 4A2F     	   .byte SC_KPDIV,'/'
 209 16ee 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 16f0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 16f2 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 16f4 119E     	   .byte SC_LALT,VK_LALT
 213 16f6 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 16f8 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 16fa 761B     	   .byte SC_ESC,VK_ESC
 216 16fc 779A     	   .byte SC_NUM,VK_NLOCK
 217 16fe 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1700 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
ARM GAS  forth.s 			page 66


  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 1702 00BF     	    _GBL_FUNC kbd_isr 
  79 1704 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 170c 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1710 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 1712 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 171a D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
  84 171e 10F0020F 	    tst r0,#KBD_TX 
  85 1722 40F08480 	    bne send_bit  
  86 1726 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1728 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 172c 01F10102 	    add r2,r1,#1
  89 1730 84F87C20 	    strb r2,[UP,#KBD_BITCNTR]
  90 1734 0029     	    cmp r1,#0
  91 1736 15D0     	    beq start_bit 
  92 1738 0929     	    cmp r1,#9 
  93 173a 25D0     	    beq parity_bit 
  94 173c 0A29     	    cmp r1,#10 
  95 173e 2DD0     	    beq stop_bit 
ARM GAS  forth.s 			page 67


  96              	    // data bit 
  97 1740 94F87D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1744 4FEA5202 	    lsr r2,#1 
  99 1748 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 174c 07D0     	    beq 1f 
 101 174e 42F08002 	    orr r2,#(1<<7)
 102 1752 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1756 00F10100 	    add r0,#1 
 104 175a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 105 175e 84F87D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1762 63E0     	    b 9f         
 107              	start_bit:
 108 1764 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1768 60D1     	    bne 9f // not a start bit 
 110 176a 80EA0000 	    eor r0,r0 
 111 176e 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 112 1772 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 113 1776 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 177a 6FF00101 	    mvn r1,#1
 115 177e 00EA0100 	    and r0,r1 // clear error flag 
 116 1782 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 117 1786 51E0     	    b 9f 
 118              	parity_bit:
 119 1788 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 120 178c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1790 4CD0     	    beq 9f  
 122 1792 01F10101 	    add r1,#1 
 123 1796 84F87F10 	    strb r1,[UP,#KBD_PARITY]  
 124 179a 47E0     	    b 9f      
 125              	stop_bit:
 126 179c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 17a0 40D0     	    beq 8f // error stop bit expected 
 128 17a2 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 129 17a6 11F0010F 	    tst r1,#1 
 130 17aa 3BD0     	    beq 8f // error parity
 131 17ac 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 17b0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 17b4 E028     	    cmp r0,#XT_KEY
 134 17b6 04D1     	    bne 1f
 135 17b8 41F04001 	    orr r1,#KBD_F_XT
 136 17bc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 137 17c0 30E0     	    b 8f  
 138 17c2 11F0800F 	1:  tst r1,#KBD_F_REL
 139 17c6 14D0     	    beq store_code
 140 17c8 5828     	    cmp r0,#SC_CAPS
 141 17ca 04D1     	    bne 1f
 142 17cc 81F00401 	    eor r1,#KBD_F_CAPS
 143 17d0 41F00101 	    orr r1,#KBD_F_CTGL 
 144 17d4 06E0     	    b 2f 
 145 17d6 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 17e0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 17e4 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 17e8 01EA0201 	    and r1,r2
 149 17ec 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 150 17f0 18E0     	    b 8f
ARM GAS  forth.s 			page 68


 151              	// store code in queue 
 152              	store_code:
 153 17f2 F028     	    cmp r0,#KEY_REL
 154 17f4 04D1     	    bne 1f
 155              	// set release flags 
 156 17f6 41F08001 	    orr r1,#KBD_F_REL 
 157 17fa 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 158 17fe 11E0     	    b 8f     
 159 1800 0146     	1:  mov r1,r0 
 160 1802 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 180c 0AD1     	    bne 8f // was async key 
 162 180e D4F89400 	    ldr r0,[UP,#KBD_QTAIL]
 163 1812 04F18002 	    add r2,UP,#KBD_QUEUE
 164 1816 1154     	    strb r1,[r2,r0]
 165 1818 00F10100 	    add r0,#1
 166 181c 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1820 84F89400 	    strb r0,[UP,#KBD_QTAIL]
 168 1824 80EA0000 	8:  eor r0,r0 
 169 1828 A4F87C00 	    strh r0,[UP,#KBD_BITCNTR]
 170 182c 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 182e 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 1832 01F10100 	    add r0,r1,#1
 182 1836 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 183 183a 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 183e 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 1842 0829     	1:  cmp r1,#8 
 187 1844 15D0     	    beq send_parity 
 188 1846 0929     	    cmp r1,#9 
 189 1848 1CD0     	    beq send_stop
 190 184a 0A29     	    cmp r1,#10
 191 184c 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 184e 10F0010F 	    tst r0,#1
 194 1852 4FEA5000 	    lsr r0,#1
 195 1856 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 196 185a 02D1     	    bne 1f 
 197 185c 4FEA0242 	    lsl r2,#16
 198 1860 05E0     	    b 2f  
 199 1862 94F87F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1866 00F10100 	    add r0,#1 
 201 186a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 202 186e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1870 1CE0     	    b 9f 
 204              	send_parity:
 205 1872 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
ARM GAS  forth.s 			page 69


 206 1876 10F0010F 	    tst r0,#1
 207 187a 01D0     	    beq 1f 
 208 187c 4FEA0242 	    lsl r2,#16
 209 1880 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1882 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1884 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1886 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 188a 1960     	    str r1,[r3,#GPIO_MODER]
 217 188c 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 188e 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1892 6FF00201 	    mvn r1,#KBD_TX 
 221 1896 00EA0100 	    and r0,r1 
 222 189a 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 189c 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 18a0 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 225 18a4 80EA0000 	    eor r0,r0 
 226 18a8 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 227 18ac 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 18ae 02B4     	    push {r1}
 238 18b0 DFF86414 	    ldr r1,=async_keys
 239 18b4 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 18be 02BC     	    pop {r1}
 241 18c0 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 18c2 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 18cc FF28     	    cmp r0,#255
 256 18ce 01D1     	    bne set_async_key 
 257 18d0 0020     	    movs r0,#0 
 258 18d2 7047     	    _RET  
ARM GAS  forth.s 			page 70


 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 18d4 06B4     	    push {r1,r2}
 262 18d6 94F87E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 18da DFF84014 	    ldr r1,=async_jump 
 264 18de D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 18e2 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 18e6 04E0     	    b set_reset
 268              	ctrl_key:
 269 18e8 4FF01000 	    mov r0,#KBD_F_CTRL
 270 18ec 01E0     	    b set_reset 
 271              	alt_key:
 272 18ee 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 18f2 12F0800F 	    tst r2,#KBD_F_REL 
 275 18f6 04D0     	    beq 1f 
 276 18f8 6FEA0000 	    mvn r0,r0
 277 18fc 02EA0002 	    and r2,r0
 278 1900 01E0     	    b 2f
 279 1902 42EA0002 	1:  orr r2,r0 
 280 1906 84F87E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 190a 5FF0FF30 	    movs r0,#-1
 282 190e 06BC     	9:  pop {r1,r2}
 283 1910 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1912 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1914 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1916 1401     	    .byte SC_LCTRL,1  // left control 
 290 1918 1401     	    .byte SC_RCTRL,1  // right control 
 291 191a 1102     	    .byte SC_LALT,2  // left alt 
 292 191c 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 191e 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1920 00       	    .byte 0 // shift  key 
 297 1921 03       	    .byte (ctrl_key-shift_key)/2
 298 1922 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1923 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1924 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 192c 1846     	    mov r0,r3 
 311 192e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 1932 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1936 00B5FEF7 	    _CALL gpio_config
 313      32FF5DF8 
ARM GAS  forth.s 			page 71


 313      04EB
 314 1940 1846     	    mov r0,r3 
 315 1942 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1946 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 194a 00B5FEF7 	    _CALL gpio_config
 317      28FF5DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1954 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 195c 4FF40050 	    mov r0,#(2<<12)
 321 1960 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1962 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 196a 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 196e 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1970 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1972 80EA0000 	   eor r0,r0 
 328 1976 C4F89000 	   str r0,[UP,#KBD_QHEAD]
 329 197a C4F89400 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 197e 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1982 4FF00101 	   mov r1,#1 
 333 1986 00B5FEF7 	   _CALL nvic_set_priority
 333      AEFE5DF8 
 333      04EB
 334 1990 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1994 00B5FEF7 	   _CALL nvic_enable_irq 
 335      C0FE5DF8 
 335      04EB
 336 199e 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 19a0 3C150000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 19b0 47F8046D 	    _PUSH 
 342 19b4 94F87E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 19b8 06F0FC06 	    and TOS,#0xFC  
 344 19bc 01F07ABA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 19c0 0EB4     	    push {T1,T2,T3}
 352 19c2 80EA0000 	    eor T0,T0  
 353 19c6 04F18003 	    add T3,UP,#KBD_QUEUE
 354 19ca D4F89010 	    ldr T1,[UP,#KBD_QHEAD]
 355 19ce D4F89420 	    ldr T2,[UP,#KBD_QTAIL]
 356 19d2 9142     	    cmp T1,T2 
 357 19d4 06D0     	    beq 2f  
 358 19d6 585C     	    ldrb T0,[T3,T1]
ARM GAS  forth.s 			page 72


 359 19d8 01F10101 	    add T1,#1 
 360 19dc 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 19e0 C4F89010 	    str T1,[UP,#KBD_QHEAD]
 362 19e4 0EBC     	2:  pop {T1,T2,T3}
 363 19e6 7047     	    _RET 
 364              	
 365              	wait_code:
 366 19e8 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 19f2 0000     	    movs T0,T0
 368 19f4 F8D0     	    beq wait_code  
 369 19f6 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 19f8 04B4     	    push {T2}
 380 19fa 11F8012B 	1:  ldrb T2,[T1],#1
 381 19fe 22B1     	    cbz T2,2f 
 382 1a00 8242     	    cmp T2,T0
 383 1a02 02D0     	    beq 2f 
 384 1a04 01F10101 	    add T1,#1 
 385 1a08 F7E7     	    b 1b 
 386 1a0a 0878     	2:  ldrb T0,[T1]
 387 1a0c 0000     	    movs T0,T0 // set/reset zero flag 
 388 1a0e 04BC     	9:  pop {T2}
 389 1a10 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 1a12 A4190000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1a20 47F8046D 	    _PUSH 
 398 1a24 86EA0606 	    eor TOS,TOS 
 399 1a28 BD49     	    ldr T1,=sc_ascii // translation table
 400 1a2a 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 1a2e 4FF04002 	    mov T2,#KBD_F_XT 
 402 1a32 1042     	    tst T0,T2
 403 1a34 00D0     	    beq 1f
 404 1a36 BB49     	    ldr T1,=extended // extended code translation
 405 1a38 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 1a42 98B1     	    cbz T0,inkey_exit
 407 1a44 E128     	    cmp T0,#XT2_KEY // pause 
 408 1a46 13D0     	    beq pause_key
ARM GAS  forth.s 			page 73


 409 1a48 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1a52 0646     	    mov TOS,T0
 411 1a54 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1a5e 032E     	    cmp TOS,#VK_CTRL_C 
 413 1a60 3EF419AD 	    beq user_reboot 
 414 1a64 47F8046D 	    _PUSH 
 415 1a68 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1a6c 01F022BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1a70 4FF00701 	    mov T1,#7 
 420 1a74 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1a7e 0139     	    subs T1,#1
 422 1a80 F8D1     	    bne 1b 
 423 1a82 01F017BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1a86 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1a8a 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1a8e 06D1     	    bne shift_down 
 431 1a90 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1a94 06D1     	    bne altchar_down 
 433 1a96 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1a9a 06D1     	    bne ctrl_down 
 435 1a9c 0DE0     	    b 9f 
 436              	shift_down:
 437 1a9e 3046     	    mov T0,TOS 
 438 1aa0 A149     	    ldr T1,=shifted 
 439 1aa2 04E0     	    b 8f 
 440              	altchar_down:
 441 1aa4 3046     	    mov T0,TOS 
 442 1aa6 A149     	    ldr T1,=altchar
 443 1aa8 01E0     	    b 8f
 444              	ctrl_down:
 445 1aaa 3046     	    mov T0,TOS 
 446 1aac A049     	    ldr T1,=controls 
 447 1aae 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1ab8 0646     	    mov TOS,T0
 449 1aba 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1ac4 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1ac6 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1aca 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1ace 0BD0     	    beq 9f 
ARM GAS  forth.s 			page 74


 456 1ad0 412E     	    cmp TOS,#'A'
 457 1ad2 09D4     	    bmi 9f 
 458 1ad4 5B2E     	    cmp TOS,#'Z'+1 
 459 1ad6 03D4     	    bmi 3f 
 460 1ad8 612E     	    cmp TOS,#'a'
 461 1ada 05D4     	    bmi 9f 
 462 1adc 7B2E     	    cmp TOS,#'z'+1
 463 1ade 03D5     	    bpl 9f 
 464 1ae0 4FF02000 	3:  mov T0,#(1<<5)
 465 1ae4 86EA0006 	    eor TOS,T0 
 466 1ae8 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1aea 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1aec 206F     	1:  ldr r0,[UP,#VID_STATE]
 483 1aee 0128     	    cmp r0,ST_PREVID 
 484 1af0 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 1af2 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1af6 00B5FEF7 	    _CALL nvic_disable_irq
 487      24FE5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1b00 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1b08 1846     	    mov r0,r3 
 491 1b0a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 1b0e 4FF01102 	    mov r2,#OUTPUT_OD
 493 1b12 00B5FEF7 	    _CALL gpio_config 
 493      44FE5DF8 
 493      04EB
 494 1b1c 1846     	    mov r0,r3 
 495 1b1e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 1b22 82EA0202 	    eor r2,r2 
 497 1b26 00B5FEF7 	    _CALL gpio_out 
 497      90FE5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1b30 4FF4E150 	    mov r0,#150*48
 500 1b34 0138     	1:  subs r0,#1 
 501 1b36 FDD1     	    bne 1b
 502 1b38 01BC     	    pop {r0}
 503 1b3a 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 504 1b3e D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
 505 1b42 40F00200 	    orr r0,#KBD_TX 
ARM GAS  forth.s 			page 75


 506 1b46 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 507 1b4a 80EA0000 	    eor r0,r0 
 508 1b4e 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 509 1b52 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1b56 1846     	    mov r0,r3 
 513 1b58 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1b5c 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1b60 00B5FEF7 	    _CALL gpio_config 
 515      1DFE5DF8 
 515      04EB
 516 1b6a 1846     	    mov r0,r3 
 517 1b6c 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1b70 82EA0202 	    eor r2,r2 
 519 1b74 00B5FEF7 	    _CALL gpio_out
 519      69FE5DF8 
 519      04EB
 520              	// release clock line 
 521 1b7e 1846     	    mov r0,r3 
 522 1b80 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1b84 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1b88 00B5FEF7 	    _CALL gpio_config
 524      09FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1b92 4FF00A00 	    mov r0,#10
 528 1b96 E060     	    str r0,[UP,#CD_TIMER]
 529 1b98 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1b9a 20B1     	    cbz r0, 4f 
 531 1b9c 94F87E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1ba0 10F0020F 	    tst r0,#KBD_TX
 533 1ba4 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1ba6 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1baa 00B5FEF7 	    _CALL nvic_enable_irq
 536      B5FD5DF8 
 536      04EB
 537 1bb4 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1bb8 20F00201 	    bic r1,r0,#KBD_TX
 539 1bbc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 540 1bc0 00F00200 	    and r0,#KBD_TX
 541 1bc4 48B1     	    cbz r0, 5f
 542 1bc6 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1bc8 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1bcc 1960     	    str r1,[r3,#GPIO_MODER]
 545 1bce 80EA0000 	    eor r0,r0 
 546 1bd2 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1bd6 6FEA0000 	    mvn r0,r0   
 548 1bda 0EBC     	5:  pop {r1,r2,r3}
 549 1bdc 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1bde 80EA0000 	    eor T0,T0 
ARM GAS  forth.s 			page 76


 555 1be2 C4F89000 	    str T0,[UP,#KBD_QHEAD]
 556 1be6 C4F89400 	    str T0,[UP,#KBD_QTAIL]
 557 1bea 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1bee 6FF00301 	    mvn T1,#3
 559 1bf2 00EA0100 	    and T0,T1 
 560 1bf6 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 561 1bfa 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1bfc 161A0000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1c08 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1c0c 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1c16 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1c18 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1c22 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1c2c FE28     	    cmp r0,KBD_CMD_RESEND
 574 1c2e EBD0     	    beq 1b 
 575 1c30 4FF4FA70 	    mov T0,#500 
 576 1c34 E060     	    str T0,[UP,#CD_TIMER]
 577 1c36 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1c40 10B9     	    cbnz T0,3f
 579 1c42 E068     	    ldr T0,[UP,#CD_TIMER]
 580 1c44 0028     	    cmp T0,#0 
 581 1c46 F6D1     	    bne 2b 
 582 1c48 47F8046D 	3:  _PUSH 
 583 1c4c 0646     	    mov TOS,T0  
 584 1c4e 01F031B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1c52 001C0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1c60 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1c6a 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1c6e 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
ARM GAS  forth.s 			page 77


 595 1c78 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1c82 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1c84 ECD0     	    beq 1b
 598 1c86 FA28     	    cmp T0,#KBD_ACK  
 599 1c88 F6D1     	    bne 2b 
 600 1c8a 3046     	2:  mov T0,TOS 
 601 1c8c 00F00700 	    and T0,#7 
 602 1c90 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1c9a 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ca4 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ca6 F0D0     	    beq 2b
 606 1ca8 FA28     	    cmp T0,#KBD_ACK 
 607 1caa F6D1     	    bne 3b  
 608 1cac 57F8046B 	    _POP 
 609 1cb0 01F000B9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1cb4 561C0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1cc4 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1cc8 10F0010F 	    tst T0,#1
 619 1ccc 01D1     	    bne 1f 
 620 1cce 01F0F1B8 	    _NEXT 
 621 1cd2 47F8046D 	1: _PUSH 
 622 1cd6 6FF00101 	    mvn T1,#1 
 623 1cda 00EA0100 	    and T0,T1 
 624 1cde 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 625 1ce2 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1ce6 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1cee B81C0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1cfc 504700BF 	    _NEST
 635 1d00 C51C0000 	1:  _ADR CAPS_LED  
 636 1d04 211A0000 	    _ADR PS2_QKEY 
 637 1d08 E5340000 	    _ADR QDUP 
 638 1d0c 1F310000 	    _QBRAN 1b  
ARM GAS  forth.s 			page 78


 638      001D0000 
 639 1d14 BB2E0000 	    _UNNEST 
 640 1d18 12190000 	
 640      20190000 
 640      80150000 
 640      A4160000 
 640      34160000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1d38 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1d40 0346     	    mov r3,r0 
  44 1d42 4FF00401 	    mov r1,#PIN_F_SC 
  45 1d46 4FF00102 	    mov r2,#OUTPUT_PP
  46 1d4a 00B5FEF7 	    _CALL gpio_config 
  46      28FD5DF8 
  46      04EB
  47 1d54 1846     	    mov r0,r3 
ARM GAS  forth.s 			page 79


  48 1d56 4FF00401 	    mov r1,#PIN_F_SC  
  49 1d5a 4FF00102 	    MOV r2,#1
  50 1d5e 00B5FEF7 	    _CALL gpio_out 
  50      74FD5DF8 
  50      04EB
  51 1d68 1846     	    mov r0,r3 
  52 1d6a 4FF00501 	    mov r1,#PIN_SCK  
  53 1d6e 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1d72 00B5FEF7 	    _CALL gpio_config 
  54      14FD5DF8 
  54      04EB
  55 1d7c 1846     	    mov r0,r3 
  56 1d7e 4FF00701 	    mov r1,#PIN_MOSI 
  57 1d82 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1d86 00B5FEF7 	    _CALL gpio_config 
  58      0AFD5DF8 
  58      04EB
  59 1d90 1846     	    mov r0,r3
  60 1d92 4FF00601 	    mov r1,#PIN_MISO
  61 1d96 4FF00202 	    mov r2,#INPUT_AFO  
  62 1d9a 00B5FEF7 	    _CALL gpio_config
  62      00FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1da4 4CF6AA40 	    mov r0,#0xCCAA
  65 1da8 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1daa 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1db2 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1db4 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1db8 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1dba 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1dc2 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1dc6 0180     	    strh r1,[r0,#SPI_CR1]
  73 1dc8 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1dca 80EA0000 	    eor r0,r0 
  75 1dce C5F25050 	    movt r0,#0x5550 
  76 1dd2 40EA0100 	    orr r0,r1 
  77 1dd6 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1dd8 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1dda F21C0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1de8 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1df0 4FF00401 	    mov r1,#PIN_F_SC 
  88 1df4 4FF00002 	    mov r2,#0 
  89 1df8 00B5FEF7 	    _CALL gpio_out 
  89      27FD5DF8 
ARM GAS  forth.s 			page 80


  89      04EB
  90 1e02 01F057B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1e06 DE1D0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1e14 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1e1c 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1e1e 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1e22 FBD1     	    bne 1b 
 102 1e24 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1e2c 4FF00401 	    mov r1,#PIN_F_SC 
 104 1e30 4FF00102 	    mov r2,#1 
 105 1e34 00B5FEF7 	    _CALL gpio_out 
 105      09FD5DF8 
 105      04EB
 106 1e3e 01F039B8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1e42 0A1E0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1e50 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1e58 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1e5a 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1e5e FBD0     	    beq 0b 
 118 1e60 6FF00001 	    mvn T1,#0 
 119 1e64 0173     	    strb T1,[T0,#SPI_DR]
 120 1e66 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1e68 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1e6c FBD0     	    beq 1b     
 123              	2:  
 124 1e6e 47F8046D 	    _PUSH 
 125 1e72 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1e74 01F01EB8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1e78 461E0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
ARM GAS  forth.s 			page 81


 133      42595445 
 134 1e84 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1e8c 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1e8e 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1e92 FBD0     	    beq 0b 
 138 1e94 0673     	    strb TOS,[T0,#SPI_DR]
 139 1e96 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1e98 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1e9c FBD0     	    beq 1b 
 142 1e9e 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1ea0 57F8046B 	    _POP 
 144 1ea4 01F006B8 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ea8 7C1E0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1eb4 504700BF 	    _NEST 
 153 1eb8 E91D0000 	    _ADR CHIP_SEL 
 154 1ebc DF300000 	    _DOLIT 4
 154      04000000 
 155 1ec4 851E0000 	    _ADR WR_BYTE
 156 1ec8 151E0000 	    _ADR CHIP_DSEL
 157 1ecc BB2E0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1ed0 AC1E0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1edc 504700BF 	    _NEST 
 165 1ee0 E91D0000 	    _ADR CHIP_SEL 
 166 1ee4 DF300000 	    _DOLIT 6 
 166      06000000 
 167 1eec 851E0000 	    _ADR WR_BYTE 
 168 1ef0 151E0000 	    _ADR CHIP_DSEL 
 169 1ef4 BB2E0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1ef8 D41E0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1f04 504700BF 	    _NEST
 177 1f08 E91D0000 	    _ADR CHIP_SEL  
 178 1f0c DF300000 	    _DOLIT sr_cmd 
 178      2C1F0000 
 179 1f14 D5330000 	    _ADR PLUS 
ARM GAS  forth.s 			page 82


 180 1f18 95310000 	    _ADR CAT
 181 1f1c 851E0000 	    _ADR WR_BYTE
 182 1f20 511E0000 	    _ADR RD_BYTE
 183 1f24 151E0000 	    _ADR CHIP_DSEL  
 184 1f28 BB2E0000 	    _UNNEST 
 185 1f2c 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1f2f FC1E0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1f3c 504700BF 	    _NEST 
 193 1f40 99320000 	    _ADR DUPP 
 194 1f44 DF300000 	    _DOLIT 16
 194      10000000 
 195 1f4c AD330000 	    _ADR RSHIFT 
 196 1f50 851E0000 	    _ADR WR_BYTE 
 197 1f54 99320000 	    _ADR DUPP
 198 1f58 DF300000 	    _DOLIT 8 
 198      08000000 
 199 1f60 AD330000 	    _ADR RSHIFT 
 200 1f64 851E0000 	    _ADR WR_BYTE 
 201 1f68 851E0000 	    _ADR WR_BYTE 
 202 1f6c BB2E0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1f70 331F0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1f80 504700BF 	    _NEST 
 210 1f84 DF300000 	1:  _DOLIT 0 
 210      00000000 
 211 1f8c 051F0000 	    _ADR RD_SR 
 212 1f90 DF300000 	    _DOLIT 3 
 212      03000000 
 213 1f98 55330000 	    _ADR ANDD 
 214 1f9c 1F310000 	    _QBRAN 2f
 214      AC1F0000 
 215 1fa4 47310000 	    _BRAN 1b
 215      841F0000 
 216 1fac BB2E0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1fb0 741F0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
ARM GAS  forth.s 			page 83


 223      53452D42 
 223      4C4B00BF 
 224 1fc0 504700BF 	    _NEST 
 225 1fc4 DD1E0000 	    _ADR WR_ENBL
 226 1fc8 E91D0000 	    _ADR CHIP_SEL 
 227 1fcc DF300000 	    _DOLIT 0x20 
 227      20000000 
 228 1fd4 851E0000 	    _ADR WR_BYTE 
 229 1fd8 3D1F0000 	    _ADR SEND_ADR
 230 1fdc 151E0000 	    _ADR CHIP_DSEL 
 231 1fe0 811F0000 	    _ADR WAIT_DONE 
 232 1fe4 BB2E0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1fe8 B41F0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1ff8 504700BF 	    _NEST 
 240 1ffc DD1E0000 	    _ADR WR_ENBL 
 241 2000 E91D0000 	    _ADR CHIP_SEL
 242 2004 DF300000 	    _DOLIT 0x60
 242      60000000 
 243 200c DF300000 	    _DOLIT 0xC7 
 243      C7000000 
 244 2014 851E0000 	    _ADR WR_BYTE 
 245 2018 851E0000 	    _ADR WR_BYTE 
 246 201c 151E0000 	    _ADR CHIP_DSEL 
 247 2020 811F0000 	    _ADR WAIT_DONE
 248 2024 BB2E0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 2028 EC1F0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 2034 504700BF 	    _NEST
 258 2038 E91D0000 	    _ADR CHIP_SEL 
 259 203c DF300000 	    _DOLIT 3 
 259      03000000 
 260 2044 851E0000 	    _ADR WR_BYTE 
 261 2048 3D1F0000 	    _ADR SEND_ADR
 262 204c 05320000 	    _ADR TOR   
 263 2050 47310000 	    _BRAN 2f
 263      68200000 
 264 2058 511E0000 	1:  _ADR RD_BYTE
 265 205c D9320000 	    _ADR OVER 
 266 2060 81310000 	    _ADR CSTOR
 267 2064 31340000 	    _ADR ONEP 
 268 2068 01310000 	2:  _DONXT 1b
ARM GAS  forth.s 			page 84


 268      58200000 
 269 2070 79320000 	    _ADR DROP 
 270 2074 151E0000 	    _ADR CHIP_DSEL 
 271 2078 BB2E0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 207c 2C200000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 2088 504700BF 	    _NEST 
 280 208c DD1E0000 	    _ADR WR_ENBL
 281 2090 E91D0000 	    _ADR CHIP_SEL
 282 2094 DF300000 	    _DOLIT 2 
 282      02000000 
 283 209c 851E0000 	    _ADR WR_BYTE 
 284 20a0 3D1F0000 	    _ADR SEND_ADR
 285 20a4 05320000 	    _ADR TOR
 286 20a8 47310000 	    _BRAN 2f 
 286      C8200000 
 287 20b0 99320000 	1:  _ADR DUPP 
 288 20b4 95310000 	    _ADR CAT 
 289 20b8 99320000 	    _ADR DUPP 
 290 20bc 15480000 	    _ADR HDOT
 291 20c0 851E0000 	    _ADR WR_BYTE 
 292 20c4 31340000 	    _ADR ONEP
 293 20c8 01310000 	2:  _DONXT 1b 
 293      B0200000 
 294 20d0 79320000 	    _ADR DROP
 295 20d4 151E0000 	    _ADR CHIP_DSEL
 296 20d8 811F0000 	    _ADR WAIT_DONE 
 297 20dc BB2E0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 20e0 80200000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
ARM GAS  forth.s 			page 85


 317 20f0 504700BF 	    _NEST 
 318              	    
 319 20f4 BB2E0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 20f8 E4200000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 2108 504700BF 	    _NEST 
 327              	
 328 210c BB2E0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 2110 FC200000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 2118 504700BF 	    _NEST 
 336              	
 337 211c BB2E0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 2120 14210000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 212c 504700BF 	    _NEST 
 345              	
 346 2130 BB2E0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 2134 24210000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 2140 504700BF 	    _NEST 
 354              	
 355 2144 BB2E0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
ARM GAS  forth.s 			page 86


   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 2148 5F708930 	     .word  0x3089705F // 1e-9
  34 214c 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 2150 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 2154 BD378635 	     .word  0x358637BD // 1e-6 
  37 2158 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 215c 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 2160 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 2164 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 2168 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 216c 0000803F 	     .word  0x3F800000 // 1.0 
  44 2170 00002041 	     .word  0x41200000 // 1e1 
  45 2174 0000C842 	     .word  0x42C80000 // 1e2 
  46 2178 00007A44 	     .word  0x447A0000 // 1e3 
  47 217c 00401C46 	     .word  0x461C4000 // 1e4 
  48 2180 0050C347 	     .word  0x47C35000 // 1e5 
  49 2184 00247449 	     .word  0x49742400 // 1e6 
  50 2188 8096184B 	     .word  0x4B189680 // 1e7
  51 218c 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 2190 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 2194 38210000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 21a0 4FEA8606 	    lsl TOS,#2  
  61 21a4 FF48     	    ldr t0, =p10 
  62 21a6 0644     	    add TOS,TOS,T0
ARM GAS  forth.s 			page 87


  63 21a8 3668     	    ldr TOS,[TOS]  
  64 21aa 00F083BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 21ae DFF8F803 	   ldr.w r0,=CPACR 
  73 21b2 0168     	   ldr R1,[R0]
  74 21b4 41F47001 	   orr r1,r1,#(0xf<<20)
  75 21b8 0160     	   str r1,[r0]
  76 21ba BFF34F8F 	   dsb 
  77 21be FB48     	   ldr r0,=FPC_BASE_ADR
  78 21c0 81EA0101 	   eor r1,r1 
  79 21c4 0160     	   str r1,[r0,FPCCR]
  80 21c6 BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 21ca 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 21cc 98210000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 21d4 4FF05100 	    mov r0,#FPU_IRQ 
  92 21d8 00B5FEF7 	    _CALL nvic_disable_irq
  92      B3FA5DF8 
  92      04EB
  93 21e2 00F067BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 21e6 D0210000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 21f0 4FF05100 	    mov r0,#FPU_IRQ
 102 21f4 00B5FEF7 	    _CALL nvic_enable_irq
 102      90FA5DF8 
 102      04EB
 103 21fe 00F059BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 2202 EA210000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
ARM GAS  forth.s 			page 88


 111 220c 47F8046D 	   _PUSH 
 112 2210 F1EE106A 	   vmrs TOS,FPSCR
 113 2214 BFF34F8F 	   dsb  
 114 2218 00F04CBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 221c 06220000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 222c F1EE100A 	   vmrs T0,FPSCR 
 125 2230 BFF34F8F 	   dsb 
 126 2234 06EA0006 	   and TOS,T0  
 127 2238 E1EE106A 	   vmsr FPSCR,TOS 
 128 223c BFF34F8F 	   dsb 
 129 2240 00F038BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2244 20220000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 224c 00EE106A 	    vmov.f32 S0,TOS 
 138 2250 57F8046B 	    _POP 
 139 2254 00F02EBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 2258 48220000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 2260 00EE906A 	    vmov.f32 S1,TOS 
 147 2264 57F8046B 	    _POP 
 148 2268 00F024BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 226c 5C220000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 2274 01EE106A 	    vmov.f32 S2,TOS 
 156 2278 57F8046B 	    _POP 
 157 227c 00F01ABE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
ARM GAS  forth.s 			page 89


 162              	*******************************/
 163 2280 70220000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 2288 47F8046D 	    _PUSH 
 165 228c 10EE106A 	    vmov.f32 TOS,S0 
 166 2290 00F010BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 2294 84220000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 229c 47F8046D 	    _PUSH 
 174 22a0 10EE906A 	    vmov.f32 TOS,S1 
 175 22a4 00F006BE 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 22a8 98220000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 22b0 47F8046D 	    _PUSH 
 183 22b4 11EE106A 	    vmov.f32 TOS,S2 
 184 22b8 00F0FCBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 22bc AC220000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 22c4 00EE106A 	    vmov.f32 S0,TOS
 194 22c8 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 22cc 10EE106A 	    vmov.f32 TOS,s0 
 196 22d0 00F0F0BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 22d4 C0220000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 22e0 00EE106A 	    vmov.f32 S0,TOS 
 204 22e4 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 22e8 10EE106A 	    vmov.f32 TOS,S0 
 206 22ec 00F0E2BD 	    _NEXT 
 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 22f0 D8220000 	    _HEADER STOF,3,"S>F" 
ARM GAS  forth.s 			page 90


 212      03533E46 
 213 22f8 00EE106A 	    vmov.f32 S0,TOS
 214 22fc B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 2300 10EE106A 	    vmov.f32 TOS,s0 
 216 2304 00F0D6BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 2308 F4220000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 2310 00EE106A 	   vmov.f32 s0,TOS 
 224 2314 57F8046B 	   _POP 
 225 2318 00EE906A 	   vmov.f32 s1,TOS 
 226 231c 30EE200A 	   vadd.f32 s0,s0,s1 
 227 2320 10EE106A 	   vmov.f32 TOS,s0
 228 2324 00F0C6BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 2328 0C230000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 2330 00EE106A 	   vmov.f32 s0,TOS 
 237 2334 57F8046B 	   _POP 
 238 2338 00EE906A 	   vmov.f32 s1,TOS 
 239 233c 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 2340 10EE106A 	   vmov.f32 TOS,s0
 241 2344 00F0B6BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 2348 2C230000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 2350 00EE106A 	   vmov.f32 s0,TOS 
 251 2354 57F8046B 	   _POP 
 252 2358 00EE906A 	   vmov.f32 s1,TOS 
 253 235c 20EE800A 	   vmul.f32 s0,s1,s0 
 254 2360 10EE106A 	   vmov.f32 TOS,s0
 255 2364 00F0A6BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
 261              	*******************************/
 262 2368 4C230000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 2370 00EE106A 	   vmov.f32 s0,TOS 
 264 2374 57F8046B 	   _POP 
ARM GAS  forth.s 			page 91


 265 2378 00EE906A 	   vmov.f32 s1,TOS 
 266 237c 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 2380 10EE106A 	   vmov.f32 TOS,s0
 268 2384 00F096BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 2388 6C230000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 2394 00EE106A 	    vmov.f32 s0,TOS 
 277 2398 B1EE400A 	    vneg.f32 S0,S0 
 278 239c 10EE106A 	    vmov.f32 TOS,S0    
 279 23a0 00F088BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 23a4 8C230000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 23b0 80EA0000 	    eor T0,T0 
 287 23b4 6FEA0000 	    mvn T0,T0 
 288 23b8 4FEA5000 	    lsr T0,#1 
 289 23bc 06EA0006 	    and TOS,T0 
 290 23c0 00F078BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 23c4 A8230000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 23d0 00EE106A 	     vmov.f32 s0,TOS 
 299 23d4 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 23d8 10EE106A 	     vmov.f32 TOS,s0 
 301 23dc 00F06ABD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 23e0 C8230000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 23e8 00EE106A 	    vmov.f32 s0,TOS 
 309 23ec B5EE400A 	    vcmp.f32 s0, #0.0 
 310 23f0 F1EE106A 	    vmrs TOS,FPSCR
 311 23f4 BFF34F8F 	    dsb  
 312 23f8 4FEAE676 	    asr TOS,#31   
 313 23fc 00F05ABD 	    _NEXT 
 314              	
ARM GAS  forth.s 			page 92


 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 2400 E4230000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 2408 504700BF 	    _NEST 
 321 240c 31230000 	    _ADR FSUBB
 322 2410 E9230000 	    _ADR FZLESS
 323 2414 69360000 	    _ADR INVER     
 324 2418 BB2E0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 241c 04240000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2424 504700BF 	    _NEST 
 332 2428 31230000 	    _ADR FSUBB 
 333 242c E9230000 	    _ADR FZLESS
 334 2430 BB2E0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2434 20240000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 2440 504700BF 	    _NEST 
 342 2444 D9320000 	   _ADR OVER 
 343 2448 D9320000 	   _ADR OVER 
 344 244c 09240000 	   _ADR FGREAT 
 345 2450 1F310000 	   _QBRAN 1f 
 345      5C240000 
 346 2458 A9320000 	   _ADR SWAP  
 347 245c 79320000 	1: _ADR DROP 
 348 2460 BB2E0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 2464 38240000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 2470 504700BF 	    _NEST 
 355 2474 D9320000 	    _ADR OVER 
 356 2478 D9320000 	    _ADR OVER 
 357 247c 25240000 	    _ADR FLESS 
 358 2480 1F310000 	    _QBRAN 1f
 358      8C240000 
 359 2488 A9320000 	    _ADR SWAP   
 360 248c 79320000 	1:  _ADR DROP 
 361 2490 BB2E0000 	    _UNNEST 
 362              	
 363              	
ARM GAS  forth.s 			page 93


 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 2494 68240000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 24a0 80EA0000 	    eor T0,T0 
 370 24a4 C8F20000 	    movt T0,#0X8000
 371 24a8 06EA0006 	    and TOS,T0
 372 24ac 4FEAE676 	    asr TOS,#31  
 373 24b0 00F000BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 24b4 98240000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 24c0 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 24c8 06EA0006 	    and TOS,T0 
 382 24cc 4FEAD656 	    lsr TOS,#23
 383 24d0 A6F17F06 	    sub TOS,#127 
 384 24d4 00F0EEBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 24d8 B8240000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 24e4 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 24ec 06EA0006 	    AND TOS,T0 
 393 24f0 80EA0000 	    EOR T0,T0 
 394 24f4 C0F28000 	    MOVT T0,0x80
 395 24f8 46EA0006 	    ORR TOS,T0 
 396 24fc 00F0DABC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 2500 DC240000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 2508 47F8046D 	    _PUSH 
 405 250c 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
 406 2514 00F0CEBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
ARM GAS  forth.s 			page 94


 411              	********************************/
 412 2518 04250000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 2520 47F8046D 	    _PUSH 
 414 2524 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 252c 00F0C2BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 2530 1C250000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 253c 47F8046D 	    _PUSH 
 423 2540 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 2548 00F0B4BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 254c 34250000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 2558 47F8046D 	    _PUSH 
 433 255c 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 2564 00F0A6BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 2568 50250000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 2574 504700BF 	    _NEST
 443 2578 C1240000 	    _ADR FEXP 
 444 257c F9220000 	    _ADR STOF 
 445 2580 59250000 	    _ADR LOG2
 446 2584 51230000 	    _ADR FSTAR 
 447 2588 E1220000 	    _ADR TRUNC  
 448 258c 99320000 	    _ADR DUPP 
 449 2590 09330000 	    _ADR ZLESS 
 450 2594 1F310000 	    _QBRAN 1f 
 450      A0250000 
 451 259c 41340000 	    _ADR ONEM
 452 25a0 BB2E0000 	1:  _UNNEST 
 453 25a4 6C210000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
ARM GAS  forth.s 			page 95


   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 25b0 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 25b4 0000C842 	            .word  0x42C80000  // 100.0
  31 25b8 00401C46 	            .word  0x461C4000  // 10000.0 
  32 25bc 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 25c0 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 25c4 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 25c8 504700BF 	    _NEST 
  45 25cc DF300000 	    _DOLIT 2 
  45      02000000 
  46 25d4 C5330000 	    _ADR LSHIFT 
  47 25d8 DF300000 	    _DOLIT p10p2n 
  47      B0250000 
  48 25e0 D5330000 	    _ADR PLUS 
  49 25e4 75310000 	    _ADR AT 
  50 25e8 BB2E0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
ARM GAS  forth.s 			page 96


  57              	bit_state: // ( idx f e -- idx f bit )
  58 25ec 504700BF 	    _NEST 
  59 25f0 DF300000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 25f8 DF300000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2600 B53E0000 	    _ADR PICK  // idx f e 1 idx 
  62 2604 C5330000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2608 55330000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 260c BB2E0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2610 504700BF 	    _NEST 
  78 2614 05320000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2618 D5310000 	    _ADR RAT   // idx f e R: e 
  81 261c ED250000 	    _ADR bit_state // idx f state 
  82 2620 1F310000 	    _QBRAN 1f   // bit reset 
  82      34260000 
  83 2628 D9320000 	    _ADR OVER 
  84 262c C9250000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2630 71230000 	    _ADR FSLH  // idx f R: e 
  86 2634 A9320000 	1:  _ADR SWAP  // f idx R: e 
  87 2638 31340000 	    _ADR ONEP   // F idx++ R: e 
  88 263c A9320000 	    _ADR SWAP   // idx f  
  89 2640 D9320000 	    _ADR OVER   // idx f idx 
  90 2644 DF300000 	    _DOLIT 5 
  90      05000000 
  91 264c A9370000 	    _ADR GREAT  // idx > 5
  92 2650 1F310000 	    _QBRAN div_loop 
  92      18260000 
  93 2658 A1310000 	    _ADR RFROM 
  94 265c 79320000 	    _ADR DROP 
  95 2660 BB2E0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 2664 504700BF 	    _NEST 
ARM GAS  forth.s 			page 97


 109 2668 05320000 	    _ADR TOR 
 110              	mult_loop:
 111 266c D5310000 	    _ADR RAT   // idx f e R: e 
 112 2670 ED250000 	    _ADR bit_state // idx f state 
 113 2674 1F310000 	    _QBRAN 1f   // bit reset 
 113      88260000 
 114 267c D9320000 	    _ADR OVER  
 115 2680 C9250000 	    _ADR p10p2at // idx f pwr10 R: e
 116 2684 51230000 	    _ADR FSTAR  // idx f R: e 
 117 2688 A9320000 	1:  _ADR SWAP  // f idx R: e 
 118 268c 31340000 	    _ADR ONEP   // F idx++ R: e 
 119 2690 A9320000 	    _ADR SWAP   // idx f  
 120 2694 D9320000 	    _ADR OVER   // idx f idx 
 121 2698 DF300000 	    _DOLIT 5 
 121      05000000 
 122 26a0 A9370000 	    _ADR GREAT  // idx > 5
 123 26a4 1F310000 	    _QBRAN mult_loop 
 123      6C260000 
 124 26ac A1310000 	    _ADR RFROM 
 125 26b0 79320000 	    _ADR DROP 
 126 26b4 BB2E0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 26b8 504700BF 	    _NEST 
 136 26bc D9320000 	    _ADR OVER  // e f e 
 137 26c0 1F310000 	    _QBRAN 3f // exp==0,  done 
 137      FC260000 
 138 26c8 DF300000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 26d0 91350000 	    _ADR NROT // idx e f
 140 26d4 A9320000 	    _ADR SWAP // idx f e   
 141 26d8 99320000 	    _ADR DUPP  // idx f e e 
 142 26dc 09330000 	    _ADR ZLESS
 143 26e0 1F310000 	    _QBRAN pos_exp 
 143      F8260000 
 144              	// negative exponent 
 145 26e8 8D360000 	    _ADR ABSS 
 146 26ec 11260000 	    _ADR mant_div 
 147 26f0 47310000 	    _BRAN 3f 
 147      FC260000 
 148              	pos_exp: // positive exponent 
 149 26f8 65260000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 26fc A9320000 	3:  _ADR SWAP 
 152 2700 79320000 	    _ADR DROP 
 153 2704 BB2E0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
ARM GAS  forth.s 			page 98


 159              	integer:
 160 2708 504700BF 	    _NEST 
 161 270c DF300000 	    _DOLIT 0 
 161      00000000 
 162 2714 99320000 	    _ADR DUPP 
 163 2718 BD320000 	    _ADR DSWAP // 0 0 a cnt 
 164 271c 5D430000 	    _ADR TONBR // d a+ cnt- 
 165 2720 19320000 	    _ADR DTOR 
 166 2724 79320000 	    _ADR DROP // drop hi word 
 167 2728 B5310000 	    _ADR DRFROM // i a+ cnt-  
 168 272c 7D350000 	    _ADR ROT  // a+ cnt- i
 169 2730 F9220000 	    _ADR STOF 
 170 2734 BB2E0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 2738 504700BF 	    _NEST 
 180 273c 99320000 	    _ADR DUPP 
 181 2740 05320000 	    _ADR TOR 
 182 2744 DF300000 	    _DOLIT 0
 182      00000000 
 183 274c 99320000 	    _ADR DUPP
 184 2750 BD320000 	    _ADR DSWAP 
 185 2754 5D430000 	    _ADR TONBR // -- d a+ cnt-  
 186 2758 BD320000 	    _ADR DSWAP  // a+ cnt- d
 187 275c 79320000 	    _ADR DROP   // a+ cnt- i 
 188 2760 F9220000 	    _ADR STOF  // convert integer to float 
 189 2764 A1310000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 2768 DF300000 	    _DOLIT 2 
 190      02000000 
 191 2770 B53E0000 	    _ADR  PICK  
 192 2774 E5330000 	    _ADR SUBB 
 193 2778 DF300000 	    _DOLIT 9 
 193      09000000 
 194 2780 DD370000 	    _ADR MIN 
 195 2784 A1210000 	    _ADR PWR10
 196 2788 71230000 	    _ADR FSLH  // a+ cnt- fdec 
 197 278c BB2E0000 	    _UNNEST 
 198              	
 199              	
 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 2790 504700BF 	    _NEST 
 206 2794 F3430000 	    _ADR NEGQ 
 207 2798 05320000 	    _ADR TOR 
 208 279c DF300000 	    _DOLIT 0 
 208      00000000 
 209 27a4 99320000 	    _ADR DUPP 
 210 27a8 BD320000 	    _ADR DSWAP // 0 0 a cnt  
ARM GAS  forth.s 			page 99


 211 27ac 5D430000 	    _ADR TONBR // d a cnt   
 212 27b0 BD320000 	    _ADR DSWAP
 213 27b4 79320000 	    _ADR DROP  // hi word 
 214 27b8 A1310000 	    _ADR RFROM 
 215 27bc 1F310000 	    _QBRAN 1f 
 215      C8270000 
 216 27c4 7D360000 	    _ADR NEGAT 
 217              	1:  
 218 27c8 BB2E0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 27cc 6C250000 	    _HEADER FLOATQ,6,"FLOAT?"
 226      06464C4F 
 226      41543F00 
 227 27d8 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 27dc F9380000 	    _ADR BASE 
 231 27e0 75310000 	    _ADR AT 
 232 27e4 05320000 	    _ADR TOR 
 233              	    // use decimal base  
 234 27e8 D1420000 	    _ADR DECIM 
 235 27ec DF300000 		_DOLIT	0      // failed flag   
 235      00000000 
 236 27f4 D9320000 		_ADR	OVER   // a 0 a     R: base
 237 27f8 49380000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 27fc F3430000 	    _ADR   NEGQ
 240 2800 05320000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 2804 99320000 	    _ADR   DUPP 
 242 2808 05320000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 280c 09270000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 2810 D9320000 	    _ADR  OVER  
 245 2814 A1310000 	    _ADR  RFROM  
 246 2818 1D370000 	    _ADR  EQUAL
 247 281c A9320000 	    _ADR  SWAP
 248 2820 05320000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 2824 33310000 	    _TBRAN expect_dot  
 249      5C280000 
 250              	// must be '.' or 'E'     
 251 282c DF300000 	    _DOLIT '.' 
 251      2E000000 
 252 2834 D1430000 	    _ADR CHARQ
 253 2838 33310000 	    _TBRAN get_fraction  
 253      70280000 
 254 2840 DF300000 	    _DOLIT 'E'
 254      45000000 
 255 2848 D1430000 	    _ADR  CHARQ 
 256 284c 33310000 	    _TBRAN get_exponent 
 256      C4280000 
 257 2854 47310000 	    _BRAN error2
 257      18290000 
ARM GAS  forth.s 			page 100


 258              	expect_dot:
 259 285c DF300000 	    _DOLIT '.' 
 259      2E000000 
 260 2864 D1430000 	    _ADR CHARQ 
 261 2868 1F310000 	    _QBRAN error2
 261      18290000 
 262              	get_fraction:
 263 2870 D9320000 	    _ADR OVER 
 264 2874 95310000 	    _ADR CAT 
 265 2878 DF300000 	    _DOLIT 10
 265      0A000000 
 266 2880 F5420000 	    _ADR DIGTQ 
 267 2884 A9320000 	    _ADR SWAP 
 268 2888 79320000 	    _ADR DROP 
 269 288c 1F310000 	    _QBRAN error2       
 269      18290000 
 270 2894 39270000 	    _ADR decimals 
 271 2898 05320000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 272              	// if next char is 'E' get exponent 
 273 289c DF300000 	    _DOLIT 'E' 
 273      45000000 
 274 28a4 D1430000 	    _ADR CHARQ
 275 28a8 33310000 	    _TBRAN get_exponent 
 275      C4280000 
 276 28b0 DF300000 	    _DOLIT fzero 
 276      00000000 
 277 28b8 05320000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 278 28bc 47310000 	    _BRAN build_float
 278      D8280000 
 279              	get_exponent: 
 280 28c4 91270000 	    _ADR exponent // -- a 0 a+ cnt- exp
 281 28c8 05320000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 282 28cc 99320000 	    _ADR DUPP 
 283 28d0 33310000 	    _TBRAN error4   // count must be 0 
 283      38290000 
 284              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 285 28d8 A5350000 	    _ADR DDROP 
 286 28dc A5350000 	    _ADR DDROP 
 287 28e0 A1310000 	    _ADR RFROM 
 288 28e4 B5310000 	    _ADR DRFROM 
 289 28e8 11230000 	    _ADR FPLUS 
 290 28ec B9260000 	    _ADR exp_adjust
 291 28f0 A1310000 	    _ADR RFROM 
 292 28f4 1F310000 	    _QBRAN 1f 
 292      08290000 
 293 28fc DF300000 	    _DOLIT fminus1
 293      000080BF 
 294 2904 51230000 	    _ADR FSTAR 
 295 2908 DF300000 	1:  _DOLIT -2 
 295      FEFFFFFF 
 296 2910 47310000 	    _BRAN restore_base  
 296      4C290000 
 297              	error2: // a 0 a cnt R: base sign fint 
 298 2918 A5350000 	    _ADR DDROP  
 299 291c 47310000 	    _BRAN e4  
 299      44290000 
 300              	error3: // a 0 a cnt R: base sign fint fdec  
ARM GAS  forth.s 			page 101


 301 2924 A5350000 	    _ADR DDROP  // a 0 a R: base sign
 302 2928 A1310000 	    _ADR RFROM 
 303 292c 79320000 	    _ADR DROP 
 304 2930 47310000 	    _BRAN e4  
 304      44290000 
 305              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 306 2938 A5350000 	    _ADR DDROP 
 307 293c B5310000 	    _ADR DRFROM 
 308 2940 A5350000 	    _ADR DDROP 
 309 2944 B5310000 	e4: _ADR DRFROM 
 310 2948 A5350000 	    _ADR DDROP 
 311              	restore_base: 
 312 294c A1310000 	    _ADR RFROM 
 313 2950 F9380000 	    _ADR BASE 
 314 2954 61310000 	    _ADR STORE 
 315 2958 BB2E0000 	    _UNNEST 
 316              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 295c 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2960 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2964 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2968 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 296c 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2970 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2974 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2978 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 297c 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
ARM GAS  forth.s 			page 102


  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2980 D0270000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 298c 504700BF 	    _NEST
  50 2990 DF300000 	    _DOLIT 1  
  50      01000000 
  51 2998 C5370000 	    _ADR MAX  
  52 299c DF300000 	    _DOLIT 8
  52      08000000 
  53 29a4 DD370000 	    _ADR MIN 
  54 29a8 DF300000 	    _DOLIT 2 
  54      02000000 
  55 29b0 C5330000 	    _ADR LSHIFT 
  56 29b4 DF300000 	    _DOLIT rounding 
  56      5C290000 
  57 29bc D5330000 	    _ADR PLUS 
  58 29c0 75310000 	    _ADR AT   
  59 29c4 11230000 	    _ADR FPLUS 
  60 29c8 BB2E0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 29cc 84290000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 29d4 57F8040B 	    ldr T0,[DSP],#4
  69 29d8 3070     	    strb T0,[TOS]  
  70 29da 06F10106 	    add TOS,#1
  71 29de 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 29e0 504700BF 	    _NEST 
  81 29e4 05320000 	    _ADR TOR  // >R ( i r: b )
  82 29e8 293C0000 	    _ADR STOD // ( dbl r: b )
  83 29ec 99320000 	    _ADR DUPP // ( dbl i r: b )
  84 29f0 05320000 	    _ADR TOR  // ( dbl r: b sign )
  85 29f4 01360000 	    _ADR DABS 
  86 29f8 39410000 	    _ADR BDIGS 
  87 29fc DD410000 	    _ADR DIGS 
  88 2a00 A1310000 	    _ADR RFROM 
  89 2a04 11420000 	    _ADR SIGN 
  90 2a08 39420000 	    _ADR EDIGS // ( -- p u )
ARM GAS  forth.s 			page 103


  91 2a0c 99320000 	    _ADR DUPP  
  92 2a10 91350000 	    _ADR NROT // -rot ( -- u p u )
  93 2a14 D5310000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2a18 A9320000 	    _ADR SWAP // ( -- u p b u )
  95 2a1c 953F0000 	    _ADR CMOVE // ( -- u ) 
  96 2a20 99320000 	    _ADR DUPP  // ( -- u u )
  97 2a24 A1310000 	    _ADR RFROM // ( -- u u b )
  98 2a28 D5330000 	    _ADR PLUS  // ( -- u b+ )
  99 2a2c A9320000 	    _ADR SWAP  // ( -- b+ u )
 100 2a30 BB2E0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2a34 D0290000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2a40 504700BF 	    _NEST 
 116 2a44 A1210000 	    _ADR PWR10 
 117 2a48 05320000 	    _ADR TOR  // f2 r: f1 
 118 2a4c DF300000 	    _DOLIT 0   // m 
 118      00000000 
 119 2a54 A9320000 	    _ADR SWAP  // m f2 
 120 2a58 99320000 	1:  _ADR DUPP 
 121 2a5c D5310000 	    _ADR RAT 
 122 2a60 25240000 	    _ADR FLESS
 123 2a64 1F310000 	    _QBRAN 2f
 123      8C2A0000 
 124 2a6c DF300000 	    _DOLIT ten 
 124      00002041 
 125 2a74 51230000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2a78 A9320000 	    _ADR SWAP
 128 2a7c 41340000 	    _ADR ONEM 
 129 2a80 A9320000 	    _ADR SWAP 
 130 2a84 47310000 	    _BRAN 1b
 130      582A0000 
 131 2a8c A1310000 	2:  _ADR RFROM 
 132 2a90 79320000 	    _ADR DROP 
 133 2a94 A9320000 	    _ADR SWAP 
 134 2a98 BB2E0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
ARM GAS  forth.s 			page 104


 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 2a9c 382A0000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 2aac 504700BF 	    _NEST 
 150 2ab0 A1210000 	    _ADR PWR10
 151 2ab4 05320000 	    _ADR TOR
 152 2ab8 DF300000 	    _DOLIT 0 
 152      00000000 
 153 2ac0 A9320000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 2ac4 D5310000 	1:  _ADR RAT   
 155 2ac8 D9320000 	    _ADR OVER 
 156 2acc 09240000 	    _ADR FGREAT 
 157 2ad0 33310000 	    _TBRAN 2f 
 157      F82A0000 
 158 2ad8 DF300000 	    _DOLIT ten 
 158      00002041 
 159 2ae0 71230000 	    _ADR FSLH 
 160              	    // increment m 
 161 2ae4 A9320000 	    _ADR SWAP 
 162 2ae8 31340000 	    _ADR ONEP 
 163 2aec A9320000 	    _ADR SWAP 
 164 2af0 47310000 	    _BRAN 1b   
 164      C42A0000 
 165 2af8 A1310000 	2:  _ADR RFROM 
 166 2afc 79320000 	    _ADR DROP
 167 2b00 A9320000 	    _ADR SWAP 
 168 2b04 BB2E0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2b08 504700BF 	    _NEST
 183 2b0c A9320000 	    _ADR SWAP
 184 2b10 E5340000 	    _ADR QDUP    
 185 2b14 1F310000 	    _QBRAN 2f 
 185      382B0000 
 186 2b1c A9320000 	    _ADR SWAP 
 187 2b20 DF300000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2b28 A9320000 	    _ADR SWAP  
 189 2b2c D5290000 	    _ADR CSTOP // c!+ ( -- m b ) 
ARM GAS  forth.s 			page 105


 190 2b30 E1290000 	    _ADR ITOA // ( i b -- b u )
 191 2b34 79320000 	    _ADR DROP // ( -- b+ )     
 192 2b38 BB2E0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 2b3c 504700BF 	    _NEST
 208 2b40 DF300000 	    _DOLIT 2 
 208      02000000 
 209 2b48 B53E0000 	    _ADR PICK 
 210 2b4c 09330000 	    _ADR ZLESS 
 211 2b50 1F310000 	    _QBRAN 1f 
 211      682B0000 
 212 2b58 05320000 	    _ADR TOR 
 213 2b5c 79320000 	    _ADR DROP 
 214 2b60 47310000 	    _BRAN 2f 
 214      D42B0000 
 215 2b68 DF300000 	1:   _DOLIT '.' 
 215      2E000000 
 216 2b70 A9320000 	    _ADR SWAP 
 217 2b74 D5290000 	    _ADR CSTOP 
 218 2b78 05320000 	    _ADR TOR // >r ( d f r: b ) 
 219 2b7c A9320000 	1:  _ADR SWAP  
 220 2b80 E5340000 	    _ADR QDUP 
 221 2b84 1F310000 	    _QBRAN 2f
 221      D42B0000 
 222 2b8c 41340000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 2b90 A9320000 	    _ADR SWAP // swap ( -- d f r: b )
 224 2b94 DF300000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 2b9c 51230000 	    _ADR FSTAR // f*
 226 2ba0 99320000 	    _ADR DUPP  
 227 2ba4 E1220000 	    _ADR TRUNC // d f i
 228 2ba8 99320000 	    _ADR DUPP  // d f i i  
 229 2bac DF300000 	    _DOLIT '0' 
 229      30000000 
 230 2bb4 D5330000 	    _ADR PLUS 
 231 2bb8 A1310000 	    _ADR RFROM // R> ( d f c b )
 232 2bbc D5290000 	    _ADR CSTOP // ( d f i b+ )
 233 2bc0 05320000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 2bc4 F9220000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 2bc8 31230000 	    _ADR FSUBB 
 236 2bcc 47310000 	    _BRAN 1b 
 236      7C2B0000 
 237 2bd4 79320000 	2:  _ADR DROP 
 238 2bd8 A1310000 	    _ADR RFROM 
ARM GAS  forth.s 			page 106


 239 2bdc BB2E0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2be0 504700BF 	    _NEST 
 257 2be4 05320000 	    _ADR TOR // ( -- d f r: b )
 258 2be8 99320000 	    _ADR DUPP 
 259 2bec DF300000 	    _DOLIT fone 
 259      0000803F 
 260 2bf4 25240000 	    _ADR FLESS 
 261 2bf8 1F310000 	    _QBRAN 1f
 261      582C0000 
 262 2c00 DF300000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2c08 412A0000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2c0c 91350000 	    _ADR NROT
 265 2c10 D9320000 	    _ADR OVER 
 266 2c14 8D290000 	    _ADR ROUND
 267 2c18 99320000 	    _ADR DUPP 
 268 2c1c DF300000 	    _DOLIT fone 
 268      0000803F 
 269 2c24 25240000 	    _ADR FLESS 
 270 2c28 1F310000 	    _QBRAN 2f 
 270      642C0000 
 271              	    // first digit '0' 
 272 2c30 DF300000 	    _DOLIT '0' 
 272      30000000 
 273 2c38 A1310000 	    _ADR RFROM 
 274 2c3c D5290000 	    _ADR CSTOP 
 275 2c40 05320000 	    _ADR TOR 
 276              	    // decrement d 
 277 2c44 A9320000 	    _ADR SWAP 
 278 2c48 41340000 	    _ADR ONEM 
 279 2c4c A9320000 	    _ADR SWAP 
 280 2c50 A1310000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2c54 BB2E0000 	    _UNNEST 
 282 2c58 D9320000 	1:  _ADR OVER 
 283 2c5c AD2A0000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2c60 91350000 	    _ADR NROT   // m d f r: b 
 285 2c64 99320000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2c68 E1220000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2c6c 99320000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2c70 05320000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2c74 F9220000 	    _ADR STOF  // ( -- m d f f )
ARM GAS  forth.s 			page 107


 290 2c78 31230000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 2c7c A1310000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2c80 A1310000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2c84 E1290000 	    _ADR ITOA // -- m d f b u )
 294 2c88 05320000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2c8c 7D350000 	    _ADR ROT
 296 2c90 A1310000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2c94 E5330000 	    _ADR SUBB // ( -- m f b d- )
 298 2c98 91350000 	    _ADR NROT // ( -- m d f b )
 299 2c9c BB2E0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2ca0 A02A0000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2ca8 504700BF 	    _NEST 
 315 2cac D9320000 	    _ADR OVER  
 316 2cb0 C1240000 	    _ADR FEXP 
 317 2cb4 DF300000 	    _DOLIT 128 
 317      80000000 
 318 2cbc 1D370000 	    _ADR EQUAL 
 319 2cc0 1F310000 	    _QBRAN 1f
 319      D02C0000 
 320 2cc8 47310000 	    _BRAN nan 
 320      8C2D0000 
 321 2cd0 99320000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2cd4 05320000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2cd8 91340000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2cdc A9320000 	    _ADR SWAP 
 326 2ce0 D5290000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2ce4 D9320000 	    _ADR OVER 
 328 2ce8 1F310000 	    _QBRAN zdz // 0.0 
 328      3C2D0000 
 329              	    // check float sign 
 330 2cf0 D9320000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2cf4 A1240000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2cf8 1F310000 	    _QBRAN 1f  // 0branch 1f 
 332      1C2D0000 
 333              	    // negative number add '-' to buffer 
 334 2d00 A9320000 	    _ADR SWAP 
 335 2d04 B1230000 	    _ADR FABS 
 336 2d08 A9320000 	    _ADR SWAP 
 337 2d0c DF300000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2d14 A9320000 	    _ADR SWAP 
 339 2d18 D5290000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
ARM GAS  forth.s 			page 108


 340 2d1c E12B0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 2d20 3D2B0000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2d24 092B0000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2d28 D5310000 	    _ADR RAT 
 344 2d2c E5330000 	    _ADR SUBB 
 345 2d30 A1310000 	    _ADR RFROM 
 346 2d34 A9320000 	    _ADR SWAP 
 347 2d38 BB2E0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2d3c 05320000 	     _ADR TOR 
 350 2d40 A5350000 	     _ADR DDROP
 351 2d44 A1310000 	     _ADR RFROM
 352 2d48 DF300000 	     _DOLIT '0'
 352      30000000 
 353 2d50 A9320000 	     _ADR SWAP 
 354 2d54 D5290000 	     _ADR CSTOP 
 355 2d58 DF300000 	     _DOLIT '.'
 355      2E000000 
 356 2d60 A9320000 	     _ADR SWAP 
 357 2d64 D5290000 	     _ADR CSTOP 
 358 2d68 DF300000 	     _DOLIT '0'
 358      30000000 
 359 2d70 A9320000 	     _ADR SWAP 
 360 2d74 D5290000 	     _ADR CSTOP 
 361 2d78 79320000 	     _ADR DROP  
 362 2d7c A1310000 	     _ADR RFROM 
 363 2d80 DF300000 	     _DOLIT 4 
 363      04000000 
 364 2d88 BB2E0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2d8c 05320000 	    _ADR TOR   // ( d f r: b )
 367 2d90 A9320000 	    _ADR SWAP  // f d  
 368 2d94 79320000 	    _ADR DROP  // f 
 369 2d98 91340000 	    _ADR BLANK  // f c 
 370 2d9c D5310000 	    _ADR RAT    // f c b 
 371 2da0 D5290000 	    _ADR CSTOP  // f b+ 
 372 2da4 A9320000 	    _ADR SWAP   // b+ f 
 373 2da8 E5240000 	    _ADR FMANT  // b+ mant
 374 2dac DF300000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2db4 55330000 	    _ADR ANDD   
 376 2db8 1F310000 	    _QBRAN infinity 
 376      F82D0000 
 377 2dc0 DF300000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2dc8 A9320000 	    _ADR SWAP   // c b+
 379 2dcc D5290000 	    _ADR CSTOP  // b+
 380 2dd0 DF300000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2dd8 A9320000 	    _ADR SWAP   // c b+ 
 382 2ddc D5290000 	    _ADR CSTOP  // b+
 383 2de0 DF300000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2de8 A9320000 	    _ADR SWAP   // c b+ 
 385 2dec D5290000 	    _ADR CSTOP  // b+
 386 2df0 47310000 	    _BRAN 1f 
 386      282E0000 
ARM GAS  forth.s 			page 109


 387              	infinity:
 388 2df8 DF300000 	    _DOLIT 'I'
 388      49000000 
 389 2e00 A9320000 	    _ADR SWAP 
 390 2e04 D5290000 	    _ADR CSTOP 
 391 2e08 DF300000 	    _DOLIT 'N'
 391      4E000000 
 392 2e10 A9320000 	    _ADR SWAP 
 393 2e14 D5290000 	    _ADR CSTOP 
 394 2e18 DF300000 	    _DOLIT 'F'
 394      46000000 
 395 2e20 A9320000 	    _ADR SWAP 
 396 2e24 D5290000 	    _ADR CSTOP 
 397              	1:
 398 2e28 79320000 	    _ADR DROP 
 399 2e2c A1310000 	    _ADR RFROM 
 400 2e30 DF300000 	    _DOLIT 4 
 400      04000000 
 401 2e38 BB2E0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2e3c A42C0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2e44 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2e48 DF300000 	    _DOLIT 1 
 415      01000000 
 416 2e50 C5370000 	    _ADR MAX 
 417 2e54 DF300000 	    _DOLIT 7 
 417      07000000 
 418 2e5c DD370000 	    _ADR MIN
 419 2e60 A9320000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2e64 E93E0000 	    _ADR HERE
 422 2e68 05320000 	    _ADR TOR  
 423 2e6c DF300000 	    _DOLIT 16 
 423      10000000 
 424 2e74 49530000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2e78 D5310000 	    _ADR RAT 
 427 2e7c DF300000 	    _DOLIT 16 
 427      10000000 
 428 2e84 DF300000 	    _DOLIT 0 
 428      00000000 
 429 2e8c 21400000 	    _ADR FILL 
 430 2e90 A1310000 	    _ADR RFROM // ( d f b )
 431 2e94 A92C0000 	    _ADR FTOA 
 432 2e98 7D450000 	    _ADR TYPEE 
 433              	    // free buffer 
ARM GAS  forth.s 			page 110


 434 2e9c DF300000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 2ea4 49530000 	    _ADR ALLOT
 436 2ea8 BB2E0000 	    _UNNEST
 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
ARM GAS  forth.s 			page 111


  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2eac 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2eb0 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2eb4 5CF8045B 		LDR WP,[IP],#4 
  89 2eb8 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2eba 58F804CB 		LDMFD RSP!,{IP}
  92 2ebe 5CF8045B 		LDR WP,[IP],#4 
  93 2ec2 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2ec4 04F14C01 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2ec8 0968     		ldr T1,[T1]     // address in here   
ARM GAS  forth.s 			page 112


 107 2eca 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 2ece 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2ed2 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2ed6 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 2eda 04F14C02 		add T2,UP,#USER_CTOP 
 112 2ede 1160     		str T1,[T2]  // save update HERE value 
 113 2ee0 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2ee2 47F8046D 		_PUSH 
 119 2ee6 04F11406 		ADD TOS,UP,#STDIN 
 120 2eea E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2eec 47F8046D 		_PUSH 
 126 2ef0 04F11806 		ADD TOS,UP,#STDOUT
 127 2ef4 DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2ef6 402E0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 2f00 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2f08 47F8046D 	    _PUSH 
 136 2f0c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2f0e 81EA0101 	    eor T1,T1 
 138 2f12 8162     	    str T1,[T0,#SCB_CFSR]
 139 2f14 CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2f16 FA2E0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2f20 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 2f28 47F8046D 		_PUSH 
 148 2f2c 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2f2e 81EA0101 	    eor T1,T1 
 150 2f32 8163     	    str T1,[T0,#SCB_BFAR]
 151 2f34 BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 2f36 1A2F0000 		_HEADER QKEY,4,"KEY?" 
ARM GAS  forth.s 			page 113


 157      044B4559 
 157      3F00
 158 2f40 504700BF 		_NEST 
 159 2f44 E32E0000 		_ADR TSTDIN // ' STDIN 
 160 2f48 753F0000 		_ADR ATEXE
 161 2f4c BB2E0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 2f50 3A2F0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 2f58 504700BF 		_NEST
 169              	KEY1:
 170 2f5c C51C0000 		_ADR CAPS_LED 
 171 2f60 412F0000 		_ADR	QKEY 
 172 2f64 1F310000 		_QBRAN	KEY1
 172      5C2F0000 
 173              	/*  add this code to filter out control characters 	
 174              		_ADR    DUPP 
 175              		_DOLIT  13 
 176              		_ADR    EQUAL 
 177              		_TBRAN  KEY2 
 178              		_ADR    DUPP
 179              		_DOLIT  32 
 180              		_ADR    LESS 
 181              		_QBRAN  KEY2 
 182              		_ADR    DROP 
 183              		_BRAN   KEY1 
 184              	*/ 
 185              	KEY2: 	
 186 2f6c BB2E0000 		_UNNEST
 187              	
 188              	/**********************************************
 189              		EMIT ( c -- )
 190              		transmit a character to console 
 191              	**********************************************/
 192 2f70 542F0000 		_HEADER EMIT,4,"EMIT"
 192      04454D49 
 192      540000BF 
 193 2f7c 504700BF 		_NEST 
 194 2f80 ED2E0000 		_ADR TSTDOUT 
 195 2f84 753F0000 		_ADR ATEXE 
 196 2f88 BB2E0000 		_UNNEST 
 197              	
 198              	
 199              	/************************************************
 200              	 GET-IP ( n - c )
 201              	 return interrupt priority of IRQn 
 202              	************************************************/
 203              	/*
 204              		_HEADER GETIP,6,"GET-IP" 
 205              		_NEST 
 206              		_ADR DUPP 
 207              		_ADR ZLESS
 208              		_QBRAN 1f 
ARM GAS  forth.s 			page 114


 209              		_DOLIT 15
 210              		_ADR ANDD
 211              		_DOLIT 4
 212              		_ADR SUBB  
 213              		_DOLIT 0xE000ED18 
 214              		_BRAN 2f 
 215              	1:	_DOLIT 0xE000E400 
 216              	2:	_ADR PLUS 
 217              		_ADR CAT
 218              		_DOLIT 4 
 219              		_ADR RSHIFT 
 220              		_UNNEST 
 221              	*/
 222              	
 223              	/***********************************************
 224              	 RANDOM ( n+ -- {0..n+ - 1} )
 225              	 return pseudo random number 
 226              	 REF: https://en.wikipedia.org/wiki/Xorshift
 227              	************************************************/
 228 2f8c 742F0000 		_HEADER RAND,6,"RANDOM"
 228      0652414E 
 228      444F4D00 
 229 2f98 504700BF 		_NEST
 230 2f9c 8D360000 		_ADR ABSS   
 231 2fa0 99380000 		_ADR SEED 
 232 2fa4 75310000 		_ADR AT 
 233 2fa8 99320000 		_ADR DUPP 
 234 2fac DF300000 		_DOLIT 13
 234      0D000000 
 235 2fb4 C5330000 		_ADR LSHIFT 
 236 2fb8 7D330000 		_ADR XORR  
 237 2fbc 99320000 		_ADR DUPP 
 238 2fc0 DF300000 		_DOLIT 17 
 238      11000000 
 239 2fc8 AD330000 		_ADR RSHIFT 
 240 2fcc 7D330000 		_ADR XORR 
 241 2fd0 99320000 		_ADR DUPP
 242 2fd4 DF300000 		_DOLIT 5 
 242      05000000 
 243 2fdc C5330000 		_ADR LSHIFT 
 244 2fe0 7D330000 		_ADR XORR  
 245 2fe4 99320000 		_ADR DUPP 
 246 2fe8 99380000 		_ADR SEED 
 247 2fec 61310000 		_ADR STORE 
 248 2ff0 DF300000 		_DOLIT 0x7FFFFFFF
 248      FFFFFF7F 
 249 2ff8 55330000 		_ADR ANDD 
 250 2ffc A9320000 		_ADR SWAP 
 251 3000 713D0000 		_ADR MODD 
 252 3004 BB2E0000 		_UNNEST 
 253              	
 254              	
 255              	/****************************************
 256              	 PAUSE ( u -- ) 
 257              	 suspend execution for u milliseconds
 258              	****************************************/
 259 3008 902F0000 		_HEADER PAUSE,5,"PAUSE"
ARM GAS  forth.s 			page 115


 259      05504155 
 259      534500BF 
 260 3014 504700BF 		_NEST 
 261 3018 C9380000 		_ADR TIMER 
 262 301c 61310000 		_ADR STORE 
 263              	PAUSE_LOOP:
 264 3020 C9380000 		_ADR TIMER 
 265 3024 75310000 		_ADR AT 
 266 3028 1F310000 		_QBRAN PAUSE_EXIT 
 266      38300000 
 267 3030 47310000 		_BRAN PAUSE_LOOP 
 267      20300000 
 268              	PAUSE_EXIT: 		
 269 3038 BB2E0000 		_UNNEST 
 270              	
 271              	/******************************************
 272              	  ULED ( T|F -- )
 273              	  control user LED, -1 ON, 0 OFF 
 274              	*******************************************/
 275 303c 0C300000 		_HEADER ULED,4,"ULED"
 275      04554C45 
 275      440000BF 
 276 3048 4FF40050 		mov T0,#(1<<LED_PIN)
 277 304c 4FF40061 		_MOV32 T1,LED_GPIO 
 277      C4F20201 
 278 3054 3600     		movs TOS,TOS 
 279 3056 57F8046B 		_POP
 280 305a 03D0     		beq ULED_OFF
 281 305c 4FEA0040 		lsl T0,#16 
 282 3060 8861     		str T0,[T1,#GPIO_BSRR]
 283 3062 27E7     		_NEXT 
 284              	ULED_OFF:
 285 3064 8861     		str T0,[T1,#GPIO_BSRR]
 286 3066 25E7     		_NEXT    
 287              	
 288              	/**************************
 289              	   JOYSTK  ( -- u )
 290              	   read joystick port 
 291              	**************************/
 292 3068 40300000 		_HEADER JOYSTK,6,"JOYSTK"
 292      064A4F59 
 292      53544B00 
 293 3074 504700BF 		_NEST 
 294 3078 DF300000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 294      10000240 
 295 3080 75310000 		_ADR AT 
 296 3084 DF300000 		_DOLIT 0x100f 
 296      0F100000 
 297 308c 55330000 		_ADR ANDD 
 298 3090 BB2E0000 		_UNNEST 
 299              	
 300              	/****************************
 301              		BEEP ( msec freq -- )
 302              	input:
 303              		freq  frequence hertz 
 304              		msec  durration in msec 
 305              	*****************************/
ARM GAS  forth.s 			page 116


 306 3094 6C300000 		_HEADER BEEP,4,"BEEP"
 306      04424545 
 306      500000BF 
 307 30a0 48F68050 		_MOV32 r0,6000000 // Fclk 
 307      C0F25B00 
 308 30a8 B0FBF6F0 		udiv r0,r0,TOS
 309 30ac 57F8046B 		_POP  
 310 30b0 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 310      C4F20001 
 311 30b8 C862     		str r0,[r1,#TIM_ARR]
 312 30ba 4FEA5000 		lsr r0,#1
 313 30be 4863     		str r0,[r1,#TIM_CCR1]
 314 30c0 4FF00100 		mov r0,#1 
 315 30c4 0862     		str r0,[r1,#TIM_CCER]
 316 30c6 0860     		str r0,[r1,#TIM_CR1]
 317 30c8 C868     		ldr r0,[r1,#TIM_DIER]
 318 30ca C4F8B060 		str TOS,[UP,#BEEP_DTMR]
 319 30ce 57F8046B 		_POP
 320 30d2 EFE6     		_NEXT 
 321              	
 322              	
 323              	/***************
 324              	//  The kernel
 325              	***************/
 326              	
 327              	/********************
 328              	    NOP	( -- )
 329              	 	do nothing.
 330              	*********************/
 331 30d4 98300000 		_HEADER NOP,3,"NOP"
 331      034E4F50 
 332 30dc EAE6     		_NEXT
 333              		  
 334              	 
 335              	/********************
 336              	    doLIT	( -- w )
 337              	 	Push an inline literal.
 338              	hidden word used by compiler 
 339              	*********************/
 340              	DOLIT:
 341 30de 47F8046D 		_PUSH				//  store TOS on data stack
 342 30e2 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 343 30e6 E5E6     		_NEXT 
 344              	
 345              	/*******************************
 346              	    EXECUTE	( ca -- )
 347              	 	Execute the word at ca.
 348              	*******************************/
 349 30e8 D8300000 		_HEADER EXECU,7,"EXECUTE"
 349      07455845 
 349      43555445 
 350 30f4 46F00105 		ORR	WP,TOS,#1 
 351 30f8 57F8046B 		_POP
 352 30fc 2847     		BX WP 
 353 30fe D9E6     		_NEXT 
 354              	
 355              	/**********************************************************
ARM GAS  forth.s 			page 117


 356              	    donext	( -- ) counter on R:
 357              	 	Run time code for the single index loop.
 358              	 	: next ( -- ) \ hilevel model
 359              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 360              	hidden word used by compiler 	  
 361              	*********************************************************/
 362              	DONXT:
 363 3100 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 364 3104 22B9     		CBNZ T2,NEXT1 
 365              		/* loop done */
 366 3106 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 367 310a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 368 310e D1E6     		_NEXT
 369              	NEXT1:
 370              		/* decrement loop counter */
 371 3110 A2F10102 		SUB	T2,T2,#1
 372 3114 C8F80020 		STR	T2,[RSP]
 373 3118 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 374 311c CAE6     		_NEXT 
 375              	
 376              	/**************************************
 377              	    ?branch	( f -- )
 378              	 	Branch if flag is zero.
 379              	hiddend word used by compiler
 380              	**************************************/
 381              	QBRAN:
 382 311e 3600     		MOVS	TOS,TOS
 383 3120 57F8046B 		_POP
 384 3124 02D1     		BNE	QBRAN1
 385 3126 DCF800C0 		LDR	IP,[IP]
 386 312a C3E6     		_NEXT
 387              	QBRAN1:
 388 312c 0CF1040C 	 	ADD	IP,IP,#4
 389 3130 C0E6     		_NEXT
 390              	
 391              	/***********************************
 392              		tbranch ( f -- )
 393              	    branch if flag is true 
 394              	***********************************/
 395              	TBRAN:
 396 3132 3600     		MOVS TOS,TOS 
 397 3134 57F8046B 		_POP 
 398 3138 02D0     		BEQ 1f 
 399 313a DCF800C0 		LDR IP,[IP]
 400 313e B9E6     		_NEXT 
 401 3140 0CF1040C 	1:  ADD IP,IP,#4
 402 3144 B6E6     		_NEXT 
 403              	
 404              	
 405              	/***********************************
 406              	    branch	( -- )
 407              	 	Branch to an inline address.
 408              	hidden word used by compiler 
 409              	***********************************/
 410              	BRAN:
 411 3146 DCF800C0 		LDR	IP,[IP]
 412 314a B3E6     		_NEXT
ARM GAS  forth.s 			page 118


 413              	
 414              	/******************************************
 415              	    EXIT	(  -- )
 416              	 	Exit the currently executing command.
 417              	******************************************/
 418 314c EC300000 		_HEADER EXIT,4,"EXIT"
 418      04455849 
 418      540000BF 
 419 3158 AFE6     		b UNNEST 
 420              	
 421              	
 422              	/***********************************
 423              	    !	   ( w a -- )
 424              	 	Pop the data stack to memory.
 425              	************************************/
 426 315a 50310000 		_HEADER STORE,1,"!"
 426      0121
 427 3160 57F8045B 		LDR	WP,[DSP],#4
 428 3164 3560     		STR	WP,[TOS]
 429 3166 57F8046B 		_POP
 430 316a A3E6     		_NEXT 
 431              	
 432              	/********************************************
 433              	    @	   ( a -- w )
 434              	 	Push memory location to the data stack.
 435              	*********************************************/
 436 316c 5E310000 		_HEADER AT,1,"@"
 436      014000BF 
 437 3174 3668     		LDR	TOS,[TOS]
 438 3176 9DE6     		_NEXT 
 439              	
 440              	/*******************************************
 441              	    C!	  ( c b -- )
 442              	 	Pop the data stack to byte memory.
 443              	*******************************************/
 444 3178 70310000 		_HEADER CSTOR,2,"C!"
 444      02432100 
 445 3180 57F8045B 		LDR	WP,[DSP],#4
 446 3184 3570     		STRB WP,[TOS]
 447 3186 57F8046B 		_POP
 448 318a 93E6     		_NEXT
 449              	
 450              	/*********************************************
 451              	    C@	  ( b -- c )
 452              	 	Push byte memory location to the data stack.
 453              	**********************************************/
 454 318c 7C310000 		_HEADER CAT,2,"C@"
 454      02434000 
 455 3194 3678     		LDRB	TOS,[TOS]
 456 3196 8DE6     		_NEXT 
 457              	
 458              	
 459              	/*********************************************
 460              	    R>	  ( -- w  R: w -- ) 
 461              	 	push from rstack.
 462              	**********************************************/
 463 3198 90310000 		_HEADER RFROM,2,"R>"
ARM GAS  forth.s 			page 119


 463      02523E00 
 464 31a0 47F8046D 		_PUSH
 465 31a4 58F8046B 		LDR	TOS,[RSP],#4
 466 31a8 84E6     		_NEXT 
 467              	
 468              	/***********************************************
 469              		2R> (  -- x1 x2 ) R: x1 x2 --  
 470              	    push a double from rstack 
 471              	***********************************************/
 472 31aa 9C310000 		_HEADER DRFROM,3,"2R>"
 472      0332523E 
 472      00BF
 473 31b4 47F8046D 		_PUSH 
 474 31b8 D8F80460 		LDR TOS,[RSP,#CELLL] 
 475 31bc 47F8046D 		_PUSH 
 476 31c0 D8F80060 		LDR TOS,[RSP]
 477 31c4 08F10808 		ADD RSP,#2*CELLL 
 478 31c8 74E6     		_NEXT 
 479              	
 480              	/************************************************
 481              	    R@	  ( -- w )
 482              	 	Copy top of return stack to the data stack.
 483              	************************************************/
 484 31ca AE310000 		_HEADER RAT,2,"R@"
 484      02524000 
 484      00BF
 485 31d4 47F8046D 		_PUSH
 486 31d8 D8F80060 		LDR	TOS,[RSP]
 487 31dc 6AE6     		_NEXT 
 488              	
 489              	/***********************************************
 490              		2R@ ( -- x2 x1 ) ( R: x1 x2 -- ) 
 491              		Copy 2 element of return stack to data stack
 492              	***********************************************/
 493 31de CE310000 		_HEADER DRAT,3,"2R@"
 493      03325240 
 493      00BF
 494 31e8 47F8046D 		_PUSH 
 495 31ec D8F80460 		LDR TOS,[RSP,#CELLL] 
 496 31f0 47F8046D 		_PUSH 
 497 31f4 D8F80060 		LDR TOS,[RSP] 
 498 31f8 5CE6     		_NEXT 
 499              	
 500              	
 501              	/***********************************************
 502              	    >R	  ( w -- ) R: -- w 
 503              	 	pop to rstack.
 504              	************************************************/
 505 31fa E2310000 		_HEADER TOR,2,">R"
 505      023E5200 
 505      00BF
 506 3204 48F8046D 		STR	TOS,[RSP,#-CELLL]!
 507 3208 57F8046B 		_POP
 508 320c 52E6     		_NEXT
 509              	
 510              	/*********************************************
 511              		2>R ( x1 x2 -- ) R: -- x1 x2  
ARM GAS  forth.s 			page 120


 512              		pop a double to rstack 
 513              	*********************************************/
 514 320e FE310000 		_HEADER DTOR,3,"2>R"
 514      03323E52 
 514      00BF
 515 3218 57F8040B 		LDR T0, [DSP],#CELLL
 516 321c 48F8040D 		STR T0,[RSP,#-CELLL]!
 517 3220 48F8046D 	 	STR TOS,[RSP,#-CELLL]!
 518 3224 57F8046B 		_POP  
 519 3228 44E6     		_NEXT 	
 520              	
 521              	
 522              	/*******************************
 523              	//	RP! ( u -- )
 524              	// initialize RPP with u 
 525              	*******************************/
 526 322a 12320000 		_HEADER RPSTOR,3,"RP!"
 526      03525021 
 526      00BF
 527 3234 B046     		MOV RSP,TOS 
 528 3236 57F8046B 		_POP  
 529 323a 3BE6     		_NEXT 
 530              	
 531              	/********************************
 532              		SP! ( u -- )
 533              	 initialize SPP with u 
 534              	********************************/
 535 323c 2E320000 		_HEADER SPSTOR,3,"SP!"
 535      03535021 
 536 3244 3746     		MOV DSP,TOS 
 537 3246 86EA0606 		EOR TOS,TOS,TOS 
 538 324a 33E6     		_NEXT 
 539              	
 540              	/**************************************
 541              	    SP@	 ( -- a )
 542              	 	Push the current data stack pointer.
 543              	***************************************/
 544 324c 40320000 		_HEADER SPAT,3,"SP@"
 544      03535040 
 545 3254 47F8046D 		_PUSH
 546 3258 3E46     		MOV	TOS,DSP
 547 325a 2BE6     		_NEXT
 548              	
 549              	/**************************************
 550              	   RP@ ( -- a )
 551              	   push current rstack pointer 
 552              	**************************************/
 553 325c 50320000 		_HEADER RPAT,3,"RP@"
 553      03525040 
 554 3264 47F8046D 		_PUSH 
 555 3268 4646     		MOV TOS,RSP 
 556 326a 23E6     		_NEXT 
 557              	
 558              	/********************************
 559              	    DROP	( w -- )
 560              	 	Discard top stack item.
 561              	********************************/
ARM GAS  forth.s 			page 121


 562 326c 60320000 		_HEADER DROP,4,"DROP"
 562      0444524F 
 562      500000BF 
 563 3278 57F8046B 		_POP
 564 327c 1AE6     		_NEXT 
 565              	
 566              	/*********************************
 567              	CORE EXTENSION 
 568              		NIP ( x1 x2 -- x2 )
 569              		throw next element 
 570              	*********************************/
 571 327e 70320000 		_HEADER NIP,3,"NIP"
 571      034E4950 
 571      00BF
 572 3288 07F10407 		ADD DSP,#CELLL 
 573 328c 12E6     		_NEXT 
 574              	
 575              	/*********************************
 576              	    DUP	 ( w -- w w )
 577              	 	Duplicate the top stack item.
 578              	*********************************/
 579 328e 82320000 		_HEADER DUPP,3,"DUP"
 579      03445550 
 579      00BF
 580 3298 47F8046D 		_PUSH
 581 329c 0AE6     		_NEXT 
 582              	
 583              	/**********************************
 584              	    SWAP	( w1 w2 -- w2 w1 )
 585              	 	Exchange top two stack items.
 586              	**********************************/
 587 329e 92320000 		_HEADER SWAP,4,"SWAP"
 587      04535741 
 587      5000
 588 32a8 3D68     		LDR	WP,[DSP]
 589 32aa 3E60     		STR	TOS,[DSP]
 590 32ac 2E46     		MOV	TOS,WP
 591 32ae 01E6     		_NEXT 
 592              	
 593              	/***********************************
 594              		2SWAP ( d2 d1 -- d1 d2 )
 595              		swap double integer 
 596              	***************************************/
 597 32b0 A2320000 		_HEADER DSWAP,5,"2SWAP"
 597      05325357 
 597      415000BF 
 598 32bc 3046     		mov T0,TOS 
 599 32be 3968     		ldr T1,[DSP]
 600 32c0 7E68     		ldr TOS,[DSP,#4]
 601 32c2 BD68     		ldr WP,[DSP,#8]
 602 32c4 3D60     		str WP,[DSP]
 603 32c6 7860     		str T0,[DSP,#4]
 604 32c8 B960     		str T1,[DSP,#8]
 605 32ca F3E5     		_NEXT 
 606              	
 607              	
 608              	/***********************************
ARM GAS  forth.s 			page 122


 609              	    OVER	( w1 w2 -- w1 w2 w1 )
 610              	 	Copy second stack item to top.
 611              	***********************************/
 612 32cc B4320000 		_HEADER OVER,4,"OVER"
 612      044F5645 
 612      520000BF 
 613 32d8 47F8046D 		_PUSH
 614 32dc 7E68     		LDR	TOS,[DSP,#4]
 615 32de E9E5     		_NEXT 
 616              	
 617              	/***********************************
 618              		2OVER ( d2 d1 -- d2 d1 d2 )
 619              		copy a double integer to TOS 
 620              	**********************************************/
 621 32e0 D0320000 		_HEADER DOVER,5,"2OVER"
 621      05324F56 
 621      455200BF 
 622 32ec 7868     		ldr T0,[DSP,#4]
 623 32ee BD68     		ldr WP,[DSP,#8]
 624 32f0 47F8046D 		_PUSH 
 625 32f4 2E46     		mov TOS,WP 
 626 32f6 47F8046D 		_PUSH
 627 32fa 0646     		mov TOS,T0 
 628 32fc DAE5     		_NEXT 
 629              	
 630              	
 631              	/***********************************
 632              	    0<	  ( n -- t )
 633              	 	Return true if n is negative.
 634              	***********************************/
 635 32fe E4320000 		_HEADER ZLESS,2,"0<"
 635      02303C00 
 635      00BF
 636 3308 4FEAE676 		ASR TOS,#31
 637 330c D2E5     		_NEXT 
 638              	
 639              	/**********************************
 640              		0> ( n -- flag )
 641              		true if n > 0 
 642              	**********************************/
 643 330e 02330000 		_HEADER ZGREAT,2,"0>"
 643      02303E00 
 643      00BF
 644 3318 1EB1     		CBZ TOS, 1f
 645 331a 4FEAE676 		ASR TOS,#31 
 646 331e 6FEA0606 		MVN TOS,TOS 
 647 3322 C7E5     	1:	_NEXT 
 648              	
 649              	
 650              	/**********************************
 651              		0<> ( n -- flag )
 652              	    true if n <> 0
 653              	*********************************/
 654 3324 12330000 		_HEADER ZNEQU,3,"0<>"
 654      03303C3E 
 655 332c 0EB1     		CBZ TOS,1f
 656 332e 4FF0FF36 		MOV TOS,#-1
ARM GAS  forth.s 			page 123


 657 3332 BFE5     	1:	_NEXT
 658              	
 659              	
 660              	/*********************************
 661              		<>  ( x1 x2 -- flag )
 662              		true fi x1 <> x2 
 663              	********************************/
 664 3334 28330000 		_HEADER NEQU,2,"<>"
 664      023C3E00 
 665 333c 57F8040B 		LDR T0,[DSP],#CELLL 
 666 3340 4640     		EORS TOS,T0 
 667 3342 01D0     		BEQ 1f
 668 3344 4FF0FF36 		MOV TOS,#-1
 669 3348 B4E5     	1:  _NEXT 
 670              	
 671              	
 672              	/********************************
 673              	    AND	 ( w w -- w )
 674              	 	Bitwise AND.
 675              	********************************/
 676 334a 38330000 		_HEADER ANDD,3,"AND"
 676      03414E44 
 676      00BF
 677 3354 57F8045B 		LDR	WP,[DSP],#4
 678 3358 06EA0506 		AND	TOS,TOS,WP
 679 335c AAE5     		_NEXT 
 680              	
 681              	/******************************
 682              	    OR	  ( w w -- w )
 683              	 	Bitwise inclusive OR.
 684              	******************************/
 685 335e 4E330000 		_HEADER ORR,2,"OR"
 685      024F5200 
 685      00BF
 686 3368 57F8045B 		LDR	WP,[DSP],#4
 687 336c 46EA0506 		ORR	TOS,TOS,WP
 688 3370 A0E5     		_NEXT 
 689              	
 690              	/*****************************
 691              	    XOR	 ( w w -- w )
 692              	 	Bitwise exclusive OR.
 693              	*****************************/
 694 3372 62330000 		_HEADER XORR,3,"XOR"
 694      03584F52 
 694      00BF
 695 337c 57F8045B 		LDR	WP,[DSP],#4
 696 3380 86EA0506 		EOR	TOS,TOS,WP
 697 3384 96E5     		_NEXT 
 698              	
 699              	/**************************************************
 700              	    UM+	 ( w w -- w cy )
 701              	 	Add two numbers, return the sum and carry flag.
 702              	***************************************************/
 703 3386 76330000 		_HEADER UPLUS,3,"UM+"
 703      03554D2B 
 703      00BF
 704 3390 3D68     		LDR	WP,[DSP]
ARM GAS  forth.s 			page 124


 705 3392 AD19     		ADDS	WP,WP,TOS
 706 3394 4FF00006 		MOV	TOS,#0
 707 3398 46F10006 		ADC	TOS,TOS,#0
 708 339c 3D60     		STR	WP,[DSP]
 709 339e 89E5     		_NEXT 
 710              	
 711              	/*********************************
 712              	    RSHIFT	 ( w # -- w )
 713              	 	logical Right shift # bits.
 714              	**********************************/
 715 33a0 8A330000 		_HEADER RSHIFT,6,"RSHIFT"
 715      06525348 
 715      49465400 
 716 33ac 57F8045B 		LDR	WP,[DSP],#4
 717 33b0 25FA06F6 		MOV	TOS,WP,LSR TOS
 718 33b4 7EE5     		_NEXT 
 719              	
 720              	/****************************
 721              	    LSHIFT	 ( w # -- w )
 722              	 	left shift # bits.
 723              	****************************/
 724 33b6 A4330000 		_HEADER LSHIFT,6,"LSHIFT"
 724      064C5348 
 724      49465400 
 724      00BF
 725 33c4 57F8045B 		LDR	WP,[DSP],#4
 726 33c8 05FA06F6 		MOV	TOS,WP,LSL TOS
 727 33cc 72E5     		_NEXT
 728              	
 729              	/*************************
 730              	    +	 ( w w -- w )
 731              	 	Add.
 732              	*************************/
 733 33ce BA330000 		_HEADER PLUS,1,"+"
 733      012B
 734 33d4 57F8045B 		LDR	WP,[DSP],#4
 735 33d8 2E44     		ADD	TOS,TOS,WP
 736 33da 6BE5     		_NEXT 
 737              	
 738              	/************************
 739              	    -	 ( w w -- w )
 740              	 	Subtract.
 741              	************************/
 742 33dc D2330000 		_HEADER SUBB,1,"-"
 742      012D00BF 
 743 33e4 57F8045B 		LDR	WP,[DSP],#4
 744 33e8 C6EB0506 		RSB	TOS,TOS,WP
 745 33ec 62E5     		_NEXT 
 746              	
 747              	/************************
 748              	    *	 ( w w -- w )
 749              	 	Multiply.
 750              	***********************/
 751 33ee E0330000 		_HEADER STAR,1,"*"
 751      012A
 752 33f4 57F8045B 		LDR	WP,[DSP],#4
 753 33f8 05FB06F6 		MUL	TOS,WP,TOS
ARM GAS  forth.s 			page 125


 754 33fc 5AE5     		_NEXT 
 755              	
 756              	/***************************
 757              	    UM*	 ( w w -- ud )
 758              	 	Unsigned multiply.
 759              	****************************/
 760 33fe F2330000 		_HEADER UMSTA,3,"UM*"
 760      03554D2A 
 760      00BF
 761 3408 3D68     		LDR	WP,[DSP]
 762 340a A6FB0523 		UMULL	T2,T3,TOS,WP
 763 340e 3A60     		STR	T2,[DSP]
 764 3410 1E46     		MOV	TOS,T3
 765 3412 4FE5     		_NEXT 
 766              	
 767              	/***************************
 768              	    M*	 ( w w -- d )
 769              	 	signed multiply.
 770              		hold double result
 771              	***************************/
 772 3414 02340000 		_HEADER MSTAR,2,"M*"
 772      024D2A00 
 773 341c 3D68     		LDR	WP,[DSP]
 774 341e 86FB0523 		SMULL	T2,T3,TOS,WP
 775 3422 3A60     		STR	T2,[DSP]
 776 3424 1E46     		MOV	TOS,T3
 777 3426 45E5     		_NEXT 
 778              	
 779              	/***************************
 780              	    1+	 ( w -- w+1 )
 781              	 	Add 1.
 782              	***************************/
 783 3428 18340000 		_HEADER ONEP,2,"1+"
 783      02312B00 
 784 3430 06F10106 		ADD	TOS,TOS,#1
 785 3434 3EE5     		_NEXT 
 786              	
 787              	/***************************
 788              	    1-	 ( w -- w-1 )
 789              	 	Subtract 1.
 790              	***************************/
 791 3436 2C340000 		_HEADER ONEM,2,"1-"
 791      02312D00 
 791      00BF
 792 3440 A6F10106 		SUB	TOS,TOS,#1
 793 3444 36E5     		_NEXT 
 794              	
 795              	/***************************
 796              	    2+	 ( w -- w+2 )
 797              	 	Add 2.
 798              	**************************/
 799 3446 3A340000 		_HEADER TWOP,2,"2+"
 799      02322B00 
 799      00BF
 800 3450 06F10206 		ADD	TOS,TOS,#2
 801 3454 2EE5     		_NEXT
 802              	
ARM GAS  forth.s 			page 126


 803              	/**************************
 804              	    2-	 ( w -- w-2 )
 805              	 	Subtract 2.
 806              	**************************/
 807 3456 4A340000 		_HEADER TWOM,2,"2-"
 807      02322D00 
 807      00BF
 808 3460 A6F10206 		SUB	TOS,TOS,#2
 809 3464 26E5     		_NEXT
 810              	
 811              	/***************************
 812              	    CELL+	( w -- w+4 )
 813              	 	Add CELLL.
 814              	***************************/
 815 3466 5A340000 		_HEADER CELLP,5,"CELL+"
 815      0543454C 
 815      4C2B
 816 3470 06F10406 		ADD	TOS,TOS,#CELLL
 817 3474 1EE5     		_NEXT
 818              	
 819              	/***************************
 820              	    CELL-	( w -- w-4 )
 821              	 	Subtract CELLL.
 822              	**************************/
 823 3476 6A340000 		_HEADER CELLM,5,"CELL-"
 823      0543454C 
 823      4C2D
 824 3480 A6F10406 		SUB	TOS,TOS,#CELLL
 825 3484 16E5     		_NEXT
 826              	
 827              	/**************************** 
 828              	    BL	( -- 32 )
 829              	 	Blank (ASCII space).
 830              	*****************************/
 831 3486 7A340000 		_HEADER BLANK,2,"BL"
 831      02424C00 
 831      00BF
 832 3490 47F8046D 		_PUSH
 833 3494 4FF02006 		MOV	TOS,#32
 834 3498 0CE5     		_NEXT 
 835              	
 836              	/**************************
 837              	    CELLS	( w -- w*4 )
 838              	 	Multiply CELLL 
 839              	***************************/
 840 349a 8A340000 		_HEADER CELLS,5,"CELLS"
 840      0543454C 
 840      4C53
 841 34a4 4FEA8606 		LSL TOS,#2
 842 34a8 04E5     		_NEXT
 843              	
 844              	/***************************
 845              	    CELL/	( w -- w/4 )
 846              	 	Divide by CELLL.
 847              	***************************/
 848 34aa 9E340000 		_HEADER CELLSL,5,"CELL/"
 848      0543454C 
ARM GAS  forth.s 			page 127


 848      4C2F
 849 34b4 4FEAA606 		ASR TOS,#2
 850 34b8 FCE4     		_NEXT
 851              	
 852              	/*************************
 853              	    2*	( w -- w*2 )
 854              	 	Multiply 2.
 855              	*************************/
 856 34ba AE340000 		_HEADER TWOST,2,"2*"
 856      02322A00 
 856      00BF
 857 34c4 4FEA4606 		MOV	TOS,TOS,LSL#1
 858 34c8 F4E4     		_NEXT
 859              	
 860              	/*************************
 861              	    2/	( w -- w/2 )
 862              	 	Divide by 2.
 863              	***********************/
 864 34ca BE340000 		_HEADER TWOSL,2,"2/"
 864      02322F00 
 864      00BF
 865 34d4 4FEA6606 		MOV	TOS,TOS,ASR#1
 866 34d8 ECE4     		_NEXT
 867              	
 868              	/****************************
 869              	    ?DUP	( w -- w w | 0 )
 870              	 	Conditional duplicate.
 871              	*****************************/
 872 34da CE340000 		_HEADER QDUP,4,"?DUP"
 872      043F4455 
 872      5000
 873 34e4 3500     		MOVS	WP,TOS
 874 34e6 18BF     		IT NE 
 875 34e8 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 876 34ec E2E4     		_NEXT
 877              	
 878              	/************************************
 879              	 CORE EXTENSION 
 880              		TUCK ( x1 x2 -- x2 x1 x2 )
 881              	***********************************/
 882 34ee DE340000 		_HEADER TUCK,4,"TUCK"
 882      04545543 
 882      4B00
 883 34f8 47F8046D 		_PUSH 
 884 34fc 7E68     		LDR TOS, [DSP,#CELLL]
 885 34fe D9E4     		_NEXT 
 886              	
 887              	/************************************
 888              	 CORE EXTENSION 
 889              		ROLL ( Xu Xu-1 .. X0 u -- Xu-1 ... X0 Xu )
 890              	**********************************************/
 891 3500 F2340000 		_HEADER ROLL,4,"ROLL"
 891      04524F4C 
 891      4C0000BF 
 892 350c 504700BF 		_NEST 
 893 3510 E5340000 		_ADR QDUP 
 894 3514 1F310000 		_QBRAN 9f 
ARM GAS  forth.s 			page 128


 894      70350000 
 895 351c 99320000 		_ADR  DUPP 
 896 3520 DF300000 		_DOLIT 1 
 896      01000000 
 897 3528 1D370000 		_ADR   EQUAL 
 898 352c 1F310000 		_QBRAN 1f 
 898      44350000 
 899 3534 79320000 		_ADR  DROP 
 900 3538 A9320000 		_ADR  SWAP 
 901 353c 47310000 		_BRAN 9f 
 901      70350000 
 902 3544 05320000 	1:  _ADR  TOR 	
 903 3548 D5310000 		_ADR  RAT
 904 354c B53E0000 		_ADR  PICK 	
 905 3550 55320000 		_ADR  SPAT
 906 3554 99320000 		_ADR  DUPP 
 907 3558 71340000 		_ADR  CELLP 
 908 355c A1310000 		_ADR  RFROM
 909 3560 31340000 		_ADR  ONEP  
 910 3564 A5340000 		_ADR  CELLS 
 911 3568 D93F0000 		_ADR  WMOVE  
 912 356c 79320000 		_ADR  DROP 
 913 3570 BB2E0000 	9:	_UNNEST 
 914              	/*
 915              		MOV T0, TOS
 916              		CBZ T0, 9f 
 917              		MOV T1, T0   // COUNTER   
 918              		SUBB T0, #1 
 919              		SLL T0, #2 
 920              		_POP
 921              		MOV T2, TOS 
 922              		LDR TOS,[DSP,T0]
 923              		MOV T2, [DSP,T0]
 924              		SUBS T1,#1
 925              		BEQ  9f 
 926              	
 927              	9:	_NEXT 
 928              	*/
 929              	
 930              	/***********************************
 931              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 932              	 	Rotate top 3 items.
 933              	*************************************/
 934 3574 04350000 		_HEADER ROT,3,"ROT"
 934      03524F54 
 935 357c 3868     		LDR	T0,[DSP]  // w2 
 936 357e 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 937 3580 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 938 3582 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 939 3584 96E4     		_NEXT
 940              	
 941              	/*********************************
 942              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 943              	 left rotate top 3 elements 
 944              	********************************/
 945 3586 78350000 		_HEADER NROT,4,"-ROT"
 945      042D524F 
ARM GAS  forth.s 			page 129


 945      5400
 946 3590 7868     		LDR T0,[DSP,#4]
 947 3592 7E60     		STR TOS,[DSP,#4]	
 948 3594 3E68     		LDR TOS,[DSP]
 949 3596 3860     		STR T0,[DSP]
 950 3598 8CE4     		_NEXT 
 951              	
 952              	/*********************************
 953              	    2DROP	( w1 w2 -- )
 954              	 	Drop top 2 items.
 955              	*********************************/
 956 359a 8A350000 		_HEADER DDROP,5,"2DROP"
 956      05324452 
 956      4F50
 957 35a4 57F8046B 		_POP
 958 35a8 57F8046B 		_POP
 959 35ac 82E4     		_NEXT 
 960              	
 961              	/********************************
 962              		3DROP ( w1 w2 w3 -- )
 963              		drop top 3 items 
 964              	********************************/
 965 35ae 9E350000 		_HEADER TDROP,5,"3DROP"
 965      05334452 
 965      4F50
 966 35b8 07F10807 	    add DSP,#8 
 967 35bc 57F8046B 	    _POP 
 968 35c0 78E4     	    _NEXT 
 969              	
 970              	/***********************************
 971              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 972              	 	Duplicate top 2 items.
 973              	************************************/
 974 35c2 B2350000 		_HEADER DDUP,4,"2DUP"
 974      04324455 
 974      5000
 975 35cc 3868     		LDR	T0,[DSP] // w1
 976 35ce 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 977 35d2 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 978 35d6 6DE4     		_NEXT
 979              	
 980              	/******************************
 981              	    D+	( d1 d2 -- d3 )
 982              	 	Add top 2 double numbers.
 983              	******************************/
 984 35d8 C6350000 		_HEADER DPLUS,2,"D+"
 984      02442B00 
 985 35e0 57F8045B 		LDR	WP,[DSP],#4
 986 35e4 57F8042B 		LDR	T2,[DSP],#4
 987 35e8 3B68     		LDR	T3,[DSP]
 988 35ea ED18     		ADDS	WP,WP,T3
 989 35ec 3D60     		STR	WP,[DSP]
 990 35ee 46EB0206 		ADC	TOS,TOS,T2
 991 35f2 5FE4     		_NEXT
 992              	
 993              	/******************************
 994              		DABS ( d -- ud )
ARM GAS  forth.s 			page 130


 995              		absolute value double 
 996              	*****************************/
 997 35f4 DC350000 		_HEADER DABS,4,"DABS"
 997      04444142 
 997      530000BF 
 998 3600 16F0004F 		tst TOS,#(1<<31)
 999 3604 09D0     		beq 9f 
 1000 3606 6FEA0606 		mvn TOS,TOS 
 1001 360a 3D68     		ldr WP,[DSP]
 1002 360c 6FEA0505 		mvn WP,WP 
 1003 3610 0135     		adds WP,#1
 1004 3612 3D60     		str WP,[DSP]
 1005 3614 01D3     		bcc 9f 
 1006 3616 06F10106 		add TOS,#1 
 1007 361a 4BE4     	9:	_NEXT 
 1008              	
 1009              	/*****************************
 1010              	  UD> ( d1 d2 -- f )
 1011              	  unsigned compare double d1 > d2 
 1012              	******************************/
 1013 361c F8350000 		_HEADER UDGREAT,3,"UD>"
 1013      0355443E 
 1014 3624 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 1015 3628 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 1016 362a B042     		cmp T0,TOS 
 1017 362c 02D8     		bhi 1f
 1018 362e 04D4     		bmi 2f  
 1019 3630 A942     		cmp T1,WP 
 1020 3632 02D9     		bls 2f 
 1021 3634 4FF0FF36 	1:	mov TOS,#-1 
 1022 3638 3CE4     		_NEXT 
 1023 363a 4FF00006 	2:  mov TOS,#0 
 1024 363e 39E4     		_NEXT 
 1025              	
 1026              	/******************************
 1027              		D0= ( d -- f )
 1028              		double 0= 
 1029              	*****************************/
 1030 3640 20360000 		_HEADER DZEQUAL,3,"D0="
 1030      0344303D 
 1031 3648 3046     		mov T0,TOS
 1032 364a 57F8046B 		_POP 
 1033 364e 46EA0006 		orr TOS,T0 
 1034 3652 01D0     		beq 9f
 1035 3654 6FF00006 		mvn TOS,#0 
 1036 3658 2CE4     	9:	_NEXT 
 1037              	
 1038              	/*****************************
 1039              	    INVERT	 ( w -- !w )
 1040              	 	1"s complement.
 1041              	*****************************/
 1042 365a 44360000 		_HEADER INVER,6,"INVERT"
 1042      06494E56 
 1042      45525400 
 1042      00BF
 1043 3668 6FEA0606 		MVN	TOS,TOS
 1044 366c 22E4     		_NEXT
ARM GAS  forth.s 			page 131


 1045              	
 1046              	/*****************************
 1047              	    NEGATE	( w -- -w )
 1048              	 	2's complement.
 1049              	***************************/
 1050 366e 5E360000 		_HEADER NEGAT,6,"NEGATE"
 1050      064E4547 
 1050      41544500 
 1050      00BF
 1051 367c C6F10006 		RSB	TOS,TOS,#0
 1052 3680 18E4     		_NEXT
 1053              	
 1054              	/***************************
 1055              	    ABS	 ( w -- |w| )
 1056              	 	Absolute.
 1057              	**************************/
 1058 3682 72360000 		_HEADER ABSS,3,"ABS"
 1058      03414253 
 1058      00BF
 1059 368c 16F0004F 		TST	TOS,#0x80000000
 1060 3690 18BF     		IT NE
 1061 3692 7642     	    RSBNE   TOS,TOS,#0
 1062 3694 0EE4     		_NEXT
 1063              	
 1064              	/**************************
 1065              		CLZ ( n - n )
 1066              		count leading zeros 
 1067              	**************************/
 1068 3696 86360000 		_HEADER CLZ,3,"CLZ"
 1068      03434C5A 
 1068      00BF
 1069 36a0 B6FA86F6 		clz TOS,TOS 
 1070 36a4 06E4     		_NEXT 
 1071              	
 1072              	/*************************
 1073              		CTZ ( n -- n )
 1074              		count trailing zeros 
 1075              	************************/
 1076 36a6 9A360000 		_HEADER CTZ,3,"CTZ"
 1076      0343545A 
 1076      00BF
 1077 36b0 80EA0000 		eor T0,T0 
 1078 36b4 16F0010F 	1:  tst TOS,#1 
 1079 36b8 04D1     		bne 2f 
 1080 36ba 4FEA5606 		lsr TOS,#1 
 1081 36be 00F10100 		add T0,#1 
 1082 36c2 F7E7     		b 1b 
 1083 36c4 0646     	2:  mov TOS,T0 
 1084 36c6 FFF7F5BB 		_NEXT 
 1085              	
 1086              	/**********************
 1087              	CORE EXTENSION 
 1088              		FALSE ( -- 0 )
 1089              		return false flag 
 1090              	***********************/
 1091 36ca AA360000 		_HEADER FALSE,5,"FALSE"
 1091      0546414C 
ARM GAS  forth.s 			page 132


 1091      5345
 1092 36d4 47F8046D 		_PUSH 
 1093 36d8 86EA0606 		EOR TOS,TOS 
 1094 36dc FFF7EABB 		_NEXT 
 1095              	
 1096              	/**********************
 1097              	CORE EXTENSION 
 1098              		TRUE ( -- -1 )
 1099              		return true flag 
 1100              	***********************/
 1101 36e0 CE360000 		_HEADER TRUE,4,"TRUE"
 1101      04545255 
 1101      450000BF 
 1102 36ec 47F8046D 		_PUSH 
 1103 36f0 86EA0606 		EOR TOS,TOS
 1104 36f4 6FEA0606 		MVN TOS,TOS 
 1105 36f8 FFF7DCBB 		_NEXT 
 1106              	
 1107              	
 1108              	/*******************
 1109              	  0= ( w -- f )
 1110              	 TOS==0?
 1111              	*******************/
 1112 36fc E4360000 		_HEADER ZEQUAL,2,"0="
 1112      02303D00 
 1113 3704 1EB9     		cbnz TOS,1f
 1114 3706 4FF0FF36 		mov TOS,#-1
 1115 370a FFF7D3BB 		_NEXT 
 1116 370e 86EA0606 	1:  eor TOS,TOS,TOS  
 1117 3712 FFF7CFBB 		_NEXT 	
 1118              	
 1119              	/*********************
 1120              	    =	 ( w w -- t )
 1121              	 	Equal?
 1122              	*********************/
 1123 3716 00370000 		_HEADER EQUAL,1,"="
 1123      013D
 1124 371c 57F8045B 		LDR	WP,[DSP],#4
 1125 3720 AE42     		CMP	TOS,WP
 1126 3722 0CBF     		ITE EQ 
 1127 3724 6FF00006 	    MVNEQ	TOS,#0
 1128 3728 0026     		MOVNE	TOS,#0
 1129 372a FFF7C3BB 		_NEXT
 1130              	
 1131              	/************************
 1132              		<> ( w w -- f )
 1133              		different?
 1134              	************************/
 1135 372e 1A370000 		_HEADER DIFF,2,"<>"
 1135      023C3E00 
 1135      00BF
 1136 3738 3046     		mov T0,TOS 
 1137 373a 57F8046B 		_POP 
 1138 373e 86EA0006 		eor TOS,T0
 1139 3742 B6FA86F0 		clz T0,TOS 
 1140 3746 06FA00F6 		lsl TOS,T0 
 1141 374a 4FEAE676 		asr TOS,#31 
ARM GAS  forth.s 			page 133


 1142 374e FFF7B1BB 		_NEXT 
 1143              	
 1144              	/************************
 1145              	    U<	 ( w w -- t )
 1146              	 	Unsigned less?
 1147              	*************************/
 1148 3752 32370000 		_HEADER ULESS,2,"U<"
 1148      02553C00 
 1148      00BF
 1149 375c 57F8045B 		LDR	WP,[DSP],#4
 1150 3760 B542     		CMP	WP,TOS
 1151 3762 34BF     		ITE CC 
 1152 3764 6FF00006 		MVNCC	TOS,#0
 1153 3768 0026     		MOVCS	TOS,#0
 1154 376a FFF7A3BB 		_NEXT
 1155              	
 1156              	/**********************
 1157              	    <	( w w -- t )
 1158              	 	Less?
 1159              	**********************/
 1160 376e 56370000 		_HEADER LESS,1,"<"
 1160      013C
 1161 3774 57F8045B 		LDR	WP,[DSP],#4
 1162 3778 B542     		CMP	WP,TOS
 1163 377a B4BF     	    ITE LT
 1164 377c 6FF00006 		MVNLT	TOS,#0
 1165 3780 0026     		MOVGE	TOS,#0
 1166 3782 FFF797BB 		_NEXT 
 1167              	
 1168              	/**********************
 1169              		U> ( u u -- t|f )
 1170              	    unsigned greater 
 1171              	**********************/
 1172 3786 72370000 		_HEADER UGREAT,2,"U>"
 1172      02553E00 
 1172      00BF
 1173 3790 57F8045B 		LDR WP,[DSP],#4 
 1174 3794 AE42     		CMP TOS,WP 
 1175 3796 34BF     		ITE CC  
 1176 3798 6FF00006 		MVNCC TOS,#0 
 1177 379c 0026     		MOVCS TOS,#0
 1178 379e FFF789BB 		_NEXT 
 1179              	
 1180              	/***********************
 1181              	    >	( w w -- t )
 1182              	 	greater?
 1183              	***********************/
 1184 37a2 8A370000 		_HEADER GREAT,1,">"
 1184      013E
 1185 37a8 57F8045B 		LDR	WP,[DSP],#4
 1186 37ac B542     		CMP	WP,TOS
 1187 37ae CCBF     		ITE GT
 1188 37b0 6FF00006 	    MVNGT	TOS,#0
 1189 37b4 0026     		MOVLE	TOS,#0
 1190 37b6 FFF77DBB 		_NEXT
 1191              	
 1192              	/***************************
ARM GAS  forth.s 			page 134


 1193              	    MAX	 ( w w -- max )
 1194              	 	Leave maximum.
 1195              	***************************/
 1196 37ba A6370000 		_HEADER MAX,3,"MAX"
 1196      034D4158 
 1196      00BF
 1197 37c4 57F8045B 		LDR	WP,[DSP],#4
 1198 37c8 B542     		CMP	WP,TOS
 1199 37ca C8BF     		IT GT 
 1200 37cc 2E46     		MOVGT	TOS,WP
 1201 37ce FFF771BB 		_NEXT 
 1202              	
 1203              	/**************************
 1204              	    MIN	 ( w w -- min )
 1205              	 	Leave minimum.
 1206              	**************************/
 1207 37d2 BE370000 		_HEADER MIN,3,"MIN"
 1207      034D494E 
 1207      00BF
 1208 37dc 57F8045B 		LDR	WP,[DSP],#4
 1209 37e0 B542     		CMP	WP,TOS
 1210 37e2 B8BF     		IT LT
 1211 37e4 2E46     		MOVLT	TOS,WP
 1212 37e6 FFF765BB 		_NEXT
 1213              	
 1214              	/***********************
 1215              	    +!	 ( w a -- )
 1216              	 	Add to memory.
 1217              	***********************/
 1218 37ea D6370000 		_HEADER PSTOR,2,"+!"
 1218      022B2100 
 1218      00BF
 1219 37f4 57F8045B 		LDR	WP,[DSP],#4
 1220 37f8 3268     		LDR	T2,[TOS]
 1221 37fa 2A44     		ADD	T2,T2,WP
 1222 37fc 3260     		STR	T2,[TOS]
 1223 37fe 57F8046B 		_POP
 1224 3802 FFF757BB 		_NEXT
 1225              	
 1226              	/************************
 1227              	    2!	 ( d a -- )
 1228              	 	Store double number.
 1229              	*************************/
 1230 3806 EE370000 		_HEADER DSTOR,2,"2!"
 1230      02322100 
 1230      00BF
 1231 3810 57F8045B 		LDR	WP,[DSP],#4
 1232 3814 57F8042B 		LDR	T2,[DSP],#4
 1233 3818 46F8045B 		STR	WP,[TOS],#4
 1234 381c 3260     		STR	T2,[TOS]
 1235 381e 57F8046B 		_POP
 1236 3822 FFF747BB 		_NEXT
 1237              	
 1238              	/************************
 1239              	    2@	 ( a -- d )
 1240              	 	Fetch double number.
 1241              	************************/
ARM GAS  forth.s 			page 135


 1242 3826 0A380000 		_HEADER DAT,2,"2@"
 1242      02324000 
 1242      00BF
 1243 3830 7568     		LDR	WP,[TOS,#4]
 1244 3832 47F8045D 		STR	WP,[DSP,#-4]!
 1245 3836 3668     		LDR	TOS,[TOS]
 1246 3838 FFF73CBB 		_NEXT
 1247              	
 1248              	/***************************
 1249              	    COUNT	( b -- b+1 c )
 1250              	 	Fetch length of string.
 1251              	****************************/
 1252 383c 2A380000 		_HEADER COUNT,5,"COUNT"
 1252      05434F55 
 1252      4E5400BF 
 1253 3848 16F8015B 		LDRB	WP,[TOS],#1
 1254 384c 47F8046D 		_PUSH
 1255 3850 2E46     		MOV	TOS,WP
 1256 3852 FFF72FBB 		_NEXT
 1257              	
 1258              	/******************************
 1259              	    DNEGATE	( d -- -d )
 1260              	 	Negate double number.
 1261              	**************************/
 1262 3856 40380000 		_HEADER DNEGA,7,"DNEGATE"
 1262      07444E45 
 1262      47415445 
 1262      00BF
 1263 3864 3D68     		LDR	WP,[DSP]
 1264 3866 A2EB0202 		SUB	T2,T2,T2
 1265 386a 551B     		SUBS WP,T2,WP
 1266 386c 62EB0606 		SBC	TOS,T2,TOS
 1267 3870 3D60     		STR	WP,[DSP]
 1268 3872 FFF71FBB 		_NEXT
 1269              	
 1270              	/******************************
 1271              	  System and user variables
 1272              	******************************/
 1273              	
 1274              	/***********************
 1275              	  system variables 
 1276              	***********************/
 1277              	
 1278              	/***********************
 1279              		STATE ( -- a )
 1280              		compilation state 
 1281              		0 -> interpret
 1282              		-1 -> compile 
 1283              	************************/
 1284 3876 5A380000 		_HEADER STATE,5,"STATE"
 1284      05535441 
 1284      5445
 1285 3880 47F8046D 		_PUSH 
 1286 3884 04F1B406 		ADD TOS,UP,#CSTATE 
 1287 3888 FFF714BB 		_NEXT 
 1288              	
 1289              	/**************************
ARM GAS  forth.s 			page 136


 1290              	 SEED ( -- a)
 1291              	 return PRNG seed address 
 1292              	**************************/
 1293 388c 7A380000 		_HEADER SEED,4,"SEED"
 1293      04534545 
 1293      440000BF 
 1294 3898 47F8046D 		_PUSH 
 1295 389c 04F10406 		ADD TOS,UP,#RNDSEED
 1296 38a0 FFF708BB 		_NEXT 	
 1297              	
 1298              	/****************************************
 1299              	  MSEC ( -- a)
 1300              	 return address of milliseconds counter
 1301              	****************************************/
 1302 38a4 90380000 		_HEADER MSEC,4,"MSEC"
 1302      044D5345 
 1302      430000BF 
 1303 38b0 47F8046D 	    _PUSH
 1304 38b4 04F10806 	    ADD TOS,UP,#TICKS
 1305 38b8 FFF7FCBA 	    _NEXT 
 1306              	
 1307              	/*************************
 1308              	 TIMER ( -- a )
 1309              	 count down timer 
 1310              	**********************/
 1311 38bc A8380000 		_HEADER TIMER,5,"TIMER"
 1311      0554494D 
 1311      455200BF 
 1312 38c8 47F8046D 		 _PUSH 
 1313 38cc 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1314 38d0 FFF7F0BA 	    _NEXT
 1315              	
 1316              	/*****************************
 1317              	    'BOOT	 ( -- a )
 1318              	 	boot up application vector 
 1319              	*****************************/
 1320 38d4 C0380000 		_HEADER TBOOT,5,"'BOOT"
 1320      0527424F 
 1320      4F5400BF 
 1321 38e0 47F8046D 		_PUSH
 1322 38e4 04F11006 		ADD	TOS,UP,#BOOT 
 1323 38e8 FFF7E4BA 		_NEXT
 1324              		
 1325              	/********************************************	
 1326              	    BASE	( -- a )
 1327              	 	Storage of the radix base for numeric I/O.
 1328              	**********************************************/
 1329 38ec D8380000 		_HEADER BASE,4,"BASE"
 1329      04424153 
 1329      450000BF 
 1330 38f8 47F8046D 		_PUSH
 1331 38fc 04F11C06 		ADD	TOS,UP,#NBASE
 1332 3900 FFF7D8BA 		_NEXT
 1333              	
 1334              	/***********************************************
 1335              		BCHAR ( -- flag )
 1336              		boolean variable
ARM GAS  forth.s 			page 137


 1337              		if set base char include in convertion 
 1338              		of integer to string.  
 1339              	************************************************/
 1340 3904 F0380000 			_HEADER BCHR,5,"BCHAR"
 1340      05424348 
 1340      415200BF 
 1341 3910 47F8046D 			_PUSH 
 1342 3914 04F12006 			ADD TOS,UP,#BCHAR 
 1343 3918 FFF7CCBA 			_NEXT 
 1344              	
 1345              	/*****************************************************
 1346              	    temp	 ( -- a )
 1347              	 	A temporary storage location used in parse and find.
 1348              	hidden word for internal use
 1349              	********************************************************/
 1350              	TEMP:
 1351 391c 47F8046D 		_PUSH
 1352 3920 04F12406 		ADD	TOS,UP,#TMP
 1353 3924 FFF7C6BA 		_NEXT
 1354              	
 1355              	/*******************************************
 1356              	    SPAN	( -- a )
 1357              	 	Hold character count received by EXPECT.
 1358              	********************************************/
 1359 3928 08390000 		_HEADER SPAN,4,"SPAN"
 1359      04535041 
 1359      4E0000BF 
 1360 3934 47F8046D 		_PUSH
 1361 3938 04F12806 		ADD	TOS,UP,#CSPAN
 1362 393c FFF7BABA 		_NEXT
 1363              	
 1364              	/***********************************************************
 1365              	    >IN	 ( -- a )
 1366              	 	Hold the character pointer while parsing input stream.
 1367              	***********************************************************/
 1368 3940 2C390000 		_HEADER INN,3,">IN"
 1368      033E494E 
 1369 3948 47F8046D 		_PUSH
 1370 394c 04F12C06 		ADD	TOS,UP,#TOIN
 1371 3950 FFF7B0BA 		_NEXT
 1372              	
 1373              	/**************************************
 1374              	    #TIB	( -- a )
 1375              	 	Hold the current count and address 
 1376              		of the terminal input buffer.
 1377              	**************************************/
 1378 3954 44390000 		_HEADER NTIB,4,"#TIB"
 1378      04235449 
 1378      420000BF 
 1379 3960 47F8046D 		_PUSH
 1380 3964 04F13006 		ADD	TOS,UP,#NTIBB
 1381 3968 FFF7A4BA 		_NEXT
 1382              	
 1383              	/******************************
 1384              	    'EVAL	( -- a )
 1385              	 	Execution vector of EVAL.
 1386              	*******************************/
ARM GAS  forth.s 			page 138


 1387 396c 58390000 		_HEADER TEVAL,5,"'EVAL"
 1387      05274556 
 1387      414C00BF 
 1388 3978 47F8046D 		_PUSH
 1389 397c 04F13C06 		ADD	TOS,UP,#EVAL
 1390 3980 FFF798BA 		_NEXT
 1391              	
 1392              	/*********************************
 1393              	    HLD	 ( -- a )
 1394              	 	Hold a pointer in building a 
 1395              		numeric output string.
 1396              	*********************************/
 1397 3984 70390000 		_HEADER HLD,3,"HLD"
 1397      03484C44 
 1398 398c 47F8046D 		_PUSH
 1399 3990 04F14006 		ADD	TOS,UP,#VHOLD
 1400 3994 FFF78EBA 		_NEXT
 1401              	
 1402              	/**********************************
 1403              	    CONTEXT	( -- a )
 1404              	 	A area to specify vocabulary 
 1405              		search order.
 1406              	**********************************/
 1407 3998 88390000 		_HEADER CNTXT,7,"CONTEXT"
 1407      07434F4E 
 1407      54455854 
 1408              	CRRNT:
 1409 39a4 47F8046D 		_PUSH
 1410 39a8 04F14406 		ADD	TOS,UP,#CTXT
 1411 39ac FFF782BA 		_NEXT
 1412              	
 1413              	/******************************
 1414              	    CP	( -- a )
 1415              	 	Point to top free area  
 1416              		in user RAM. 
 1417              	******************************/
 1418 39b0 9C390000 		_HEADER CPP,2,"CP"
 1418      02435000 
 1419 39b8 47F8046D 		_PUSH
 1420 39bc 04F14C06 		ADD	TOS,UP,#USER_CTOP
 1421 39c0 FFF778BA 		_NEXT
 1422              	
 1423              	/*****************************
 1424              	CORE EXT 
 1425              		UNUSED ( -- n )
 1426              		return free bytes in 
 1427              		user RAM 
 1428              	*****************************/
 1429 39c4 B4390000 		_HEADER UNUSED,6,"UNUSED"
 1429      06554E55 
 1429      53454400 
 1430 39d0 47F8046D 		_PUSH 
 1431 39d4 E06C     		LDR T0,[UP,#USER_CTOP]
 1432 39d6 48F22C16 		_MOV32 TOS,DEND 
 1432      C2F20106 
 1433 39de A6EB0006 		SUB TOS,T0 
 1434 39e2 FFF767BA 		_NEXT 
ARM GAS  forth.s 			page 139


 1435              	
 1436              	/****************************
 1437              	   FCP ( -- a )
 1438              	  Point ot top of Forth 
 1439              	  system dictionary
 1440              	****************************/
 1441 39e6 C8390000 		_HEADER FCP,3,"FCP"
 1441      03464350 
 1441      00BF
 1442 39f0 47F8046D 		_PUSH 
 1443 39f4 04F14806 		ADD TOS,UP,#FORTH_CTOP 
 1444 39f8 FFF75CBA 		_NEXT 
 1445              	
 1446              	/***************************
 1447              	    LAST	( -- a )
 1448              	 	Point to the last name 
 1449              		in the dictionary.
 1450              	***************************/
 1451 39fc EA390000 		_HEADER LAST,4,"LAST"
 1451      044C4153 
 1451      540000BF 
 1452 3a08 47F8046D 		_PUSH
 1453 3a0c 04F15006 		ADD	TOS,UP,#LASTN
 1454 3a10 FFF750BA 		_NEXT
 1455              	
 1456              	
 1457              	/***********************
 1458              		system constants 
 1459              	***********************/
 1460              	
 1461              	/********************************
 1462              		USER-BEGIN ( -- a )
 1463              	  where user area begin in RAM
 1464              	********************************/
 1465 3a14 003A0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1465      0A555345 
 1465      522D4245 
 1465      47494E00 
 1466 3a24 47F8046D 		_PUSH 
 1467 3a28 DFF80460 		ldr TOS,USR_BGN_ADR 
 1468 3a2c FFF742BA 		_NEXT 
 1469              	USR_BGN_ADR:
 1470 3a30 12050020 	.word  DTOP 
 1471              	
 1472              	/*********************************
 1473              	  USER_END ( -- a )
 1474              	  where user area end in RAM 
 1475              	******************************/
 1476 3a34 183A0000 		_HEADER USER_END,8,"USER-END"
 1476      08555345 
 1476      522D454E 
 1476      440000BF 
 1477 3a44 47F8046D 		_PUSH 
 1478 3a48 DFF80460 		ldr TOS,USER_END_ADR 
 1479 3a4c FFF732BA 		_NEXT 
 1480              	USER_END_ADR:
 1481 3a50 2C810120 		.word DEND 
ARM GAS  forth.s 			page 140


 1482              	
 1483              	/********************************
 1484              		MAX-INT ( -- n+ )
 1485              		maximum integer 
 1486              	*******************************/
 1487 3a54 383A0000 		_HEADER MAXINT,7,"MAX-INT"
 1487      074D4158 
 1487      2D494E54 
 1488 3a60 47F8046D 		_PUSH 
 1489 3a64 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
 1489      C7F6FF76 
 1490 3a6c FFF722BA 		_NEXT 
 1491              	
 1492              	/******************************
 1493              		MIN-INT ( -- n- )
 1494              		minimum integer 
 1495              	******************************/
 1496 3a70 583A0000 		_HEADER MININT,7,"MIN-INT"
 1496      074D494E 
 1496      2D494E54 
 1497 3a7c 47F8046D 		_PUSH 
 1498 3a80 4FF00006 		_MOV32 TOS, 0x80000000
 1498      C8F20006 
 1499 3a88 FFF714BA 		_NEXT 
 1500              	
 1501              	/******************************
 1502              		MAX-UINT ( -- u )
 1503              		maximum unsigned integer 
 1504              	******************************/
 1505 3a8c 743A0000 		_HEADER MAXUINT,8,"MAX-UINT"
 1505      084D4158 
 1505      2D55494E 
 1505      540000BF 
 1506 3a9c 47F8046D 		_PUSH
 1507 3aa0 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1507      CFF6FF76 
 1508 3aa8 FFF704BA 		_NEXT 
 1509              	
 1510              	
 1511              	/* *********************
 1512              	  Common functions
 1513              	***********************/
 1514              	
 1515              	/********************************
 1516              	    WITHIN	( u ul uh -- t )
 1517              	 	Return true if u is within 
 1518              		the range of ul and uh.
 1519              	********************************/
 1520 3aac 903A0000 		_HEADER WITHI,6,"WITHIN"
 1520      06574954 
 1520      48494E00 
 1521 3ab8 504700BF 		_NEST
 1522 3abc D9320000 		_ADR	OVER
 1523 3ac0 E5330000 		_ADR	SUBB
 1524 3ac4 05320000 		_ADR	TOR
 1525 3ac8 E5330000 		_ADR	SUBB
 1526 3acc A1310000 		_ADR	RFROM
ARM GAS  forth.s 			page 141


 1527 3ad0 5D370000 		_ADR	ULESS
 1528 3ad4 BB2E0000 		_UNNEST
 1529              	
 1530              	//  Divide
 1531              	
 1532              	/*************************************
 1533              	    UM/MOD	( udl udh u -- ur uq )
 1534              	 	Unsigned divide of a double by a 
 1535              		single. Return mod and quotient.
 1536              	**************************************/
 1537 3ad8 B03A0000 		_HEADER UMMOD,6,"UM/MOD"
 1537      06554D2F 
 1537      4D4F4400 
 1538 3ae4 4FF00103 		MOV	T3,#1
 1539 3ae8 57F8045B 		LDR	WP,[DSP],#4
 1540 3aec 3A68     		LDR	T2,[DSP]
 1541              	UMMOD0:
 1542 3aee 9218     		ADDS	T2,T2,T2
 1543 3af0 6D41     		ADCS	WP,WP,WP
 1544 3af2 04D3     		BCC	UMMOD1
 1545 3af4 A5EB0605 		SUB	WP,WP,TOS
 1546 3af8 02F10102 		ADD	T2,T2,#1
 1547 3afc 04E0     		B UMMOD2
 1548              	UMMOD1:
 1549 3afe AD1B     		SUBS	WP,WP,TOS 
 1550 3b00 28BF     		IT CS 
 1551 3b02 0132     		ADDCS	T2,T2,#1
 1552 3b04 00D2     		BCS	UMMOD2
 1553 3b06 3544     		ADD	WP,WP,TOS
 1554              	UMMOD2:
 1555 3b08 DB18     		ADDS	T3,T3,T3
 1556 3b0a F0D3     		BCC	UMMOD0
 1557 3b0c 1646     		MOV	TOS,T2
 1558 3b0e 3D60     		STR	WP,[DSP]
 1559 3b10 FFF7D0B9 		_NEXT
 1560              	
 1561              	/****************************
 1562              	    FM/MOD	( d n -- r q )
 1563              	 	Signed floored divide 
 1564              		of double by single. 
 1565              		Return mod and quotient.
 1566              	****************************/
 1567 3b14 DC3A0000 		_HEADER MSMOD,6,"FM/MOD"
 1567      06464D2F 
 1567      4D4F4400 
 1568 3b20 504700BF 		_NEST
 1569 3b24 99320000 		_ADR	DUPP
 1570 3b28 09330000 		_ADR	ZLESS
 1571 3b2c 99320000 		_ADR	DUPP
 1572 3b30 05320000 		_ADR	TOR
 1573 3b34 1F310000 		_QBRAN MMOD1
 1573      4C3B0000 
 1574 3b3c 7D360000 		_ADR	NEGAT
 1575 3b40 05320000 		_ADR	TOR
 1576 3b44 65380000 		_ADR	DNEGA
 1577 3b48 A1310000 		_ADR	RFROM
 1578              	MMOD1:
ARM GAS  forth.s 			page 142


 1579 3b4c 05320000 		_ADR	TOR
 1580 3b50 99320000 		_ADR	DUPP
 1581 3b54 09330000 		_ADR	ZLESS
 1582 3b58 1F310000 		_QBRAN MMOD2
 1582      683B0000 
 1583 3b60 D5310000 		_ADR	RAT
 1584 3b64 D5330000 		_ADR	PLUS
 1585              	MMOD2:
 1586 3b68 A1310000 		_ADR	RFROM
 1587 3b6c E53A0000 		_ADR	UMMOD
 1588 3b70 A1310000 		_ADR	RFROM
 1589 3b74 1F310000 		_QBRAN	MMOD3
 1589      883B0000 
 1590 3b7c A9320000 		_ADR	SWAP
 1591 3b80 7D360000 		_ADR	NEGAT
 1592 3b84 A9320000 		_ADR	SWAP
 1593              	MMOD3:   
 1594 3b88 BB2E0000 		_UNNEST
 1595              	
 1596              	/****************************
 1597              		SM/REM (d n1 -- n2 n3 )
 1598              	    symetric signed division 
 1599              		double by single 
 1600              	input:
 1601              		d   signed double 
 1602              		n1  signed single 
 1603              	output: 
 1604              		n2  signed remainder 
 1605              		n3  signed quotient 
 1606              	****************************/
 1607 3b8c 183B0000 		_HEADER SMSLSHREM,6,"SM/REM"
 1607      06534D2F 
 1607      52454D00 
 1608 3b98 504700BF 		_NEST 
 1609 3b9c 99320000 		_ADR DUPP 
 1610 3ba0 09330000 		_ADR ZLESS 
 1611 3ba4 99320000 		_ADR DUPP 
 1612 3ba8 05320000 		_ADR TOR   // divisor sign 
 1613 3bac 1F310000 		_QBRAN 1f 
 1613      B83B0000 
 1614 3bb4 7D360000 		_ADR NEGAT 
 1615 3bb8 D9320000 	1:  _ADR OVER 
 1616 3bbc 09330000 		_ADR ZLESS 
 1617 3bc0 99320000 		_ADR DUPP 
 1618 3bc4 05320000 		_ADR TOR  // divident sign 
 1619 3bc8 1F310000 		_QBRAN  1f 
 1619      DC3B0000 
 1620 3bd0 05320000 		_ADR TOR 
 1621 3bd4 65380000 		_ADR DNEGA
 1622 3bd8 A1310000 		_ADR RFROM 
 1623 3bdc E53A0000 	1:  _ADR UMMOD  // rem quot  
 1624 3be0 A1310000 		_ADR RFROM 
 1625 3be4 D5310000 		_ADR RAT 
 1626 3be8 7D330000 		_ADR XORR
 1627 3bec 1F310000 		_QBRAN 1f
 1627      F83B0000 
 1628 3bf4 7D360000 		_ADR NEGAT 
ARM GAS  forth.s 			page 143


 1629 3bf8 99320000 	1:  _ADR DUPP 
 1630 3bfc 09330000 		_ADR ZLESS 
 1631 3c00 A1310000 		_ADR RFROM 
 1632 3c04 7D330000 		_ADR XORR 
 1633 3c08 1F310000 		_QBRAN 1f 
 1633      1C3C0000 
 1634 3c10 A9320000 		_ADR SWAP 
 1635 3c14 7D360000 		_ADR NEGAT 
 1636 3c18 A9320000 	    _ADR SWAP 
 1637 3c1c BB2E0000 	1:  _UNNEST 
 1638              	
 1639              	
 1640              	/****************************
 1641              		S>D ( n -- d )
 1642              		convert single to double 
 1643              	*****************************/
 1644 3c20 903B0000 		_HEADER STOD,3,"S>D"
 1644      03533E44 
 1645 3c28 47F8046D 		_PUSH 
 1646 3c2c 4FEAE676 		ASR TOS,#31
 1647 3c30 FFF740B9 		_NEXT 
 1648              	
 1649              	/****************************
 1650              		D2* ( d -- d<<1 )
 1651              		double * 2 
 1652              	***************************/
 1653 3c34 243C0000 		_HEADER D2STAR,3,"D2*"
 1653      0344322A 
 1654 3c3c 3868     		ldr T0,[DSP]
 1655 3c3e 4000     		lsls T0,#1
 1656 3c40 3860     		str T0,[DSP]
 1657 3c42 4FEA4606 		lsl TOS,#1
 1658 3c46 46F10006 		adc TOS,#0
 1659 3c4a FFF733B9 		_NEXT 
 1660              	
 1661              	/****************************
 1662              		D2/  ( d -- d>>1 )
 1663              		double signed divide by 2 
 1664              	*****************************/
 1665 3c4e 383C0000 		_HEADER D2SL,3,"D2/"
 1665      0344322F 
 1665      00BF
 1666 3c58 3868     		ldr T0,[DSP]
 1667 3c5a 7610     		asrs TOS,#1
 1668 3c5c 4FEA3000 		rrx T0,T0 
 1669 3c60 3860     		str T0,[DSP]
 1670 3c62 FFF727B9 		_NEXT 
 1671              	
 1672              	/***************************
 1673              		D/MOD  ( d+ n+ - r+ qd+ )
 1674              		unsigned double division
 1675              		and modulo 
 1676              		output:
 1677              			qd+ = d+ / n+
 1678              			r+ = qd+ - (d+ * n+ )
 1679              	***************************/
 1680 3c66 523C0000 		_HEADER DSLMOD,5,"D/MOD"
ARM GAS  forth.s 			page 144


 1680      05442F4D 
 1680      4F44
 1681 3c70 3D68     		ldr WP,[DSP]  // d+ high 
 1682 3c72 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1683 3c74 4FF02002 		mov T2,#32 // shift counter  
 1684 3c78 81EA0101 		eor T1,T1 // quotient T0:T1  
 1685 3c7c 25B9     		cbnz WP,1f    
 1686 3c7e 82EA0202 		eor T2,T2 // nos shifting required 
 1687 3c82 0546     		mov WP,T0 
 1688 3c84 80EA0000 		eor T0,T0 
 1689 3c88 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1690 3c8a 15F0004F 	    tst WP,#(1<<31) 
 1691 3c8e 06D1     		bne 2f
 1692 3c90 4918     		adds T1,T1,T1 
 1693 3c92 4041     		adcs T0,T0,T0 
 1694 3c94 45EB0505 		adc WP,WP,WP 
 1695 3c98 A2F10102 		sub T2,#1 
 1696 3c9c F4E7     		b 1b 
 1697 3c9e B5FBF6F3 	2:  udiv T3,WP,TOS
 1698 3ca2 41EA0301 		orr T1,T3   // append partial quotient 
 1699 3ca6 06FB03F3 		mul T3,TOS
 1700 3caa A5EB0305 		sub WP,T3 //remainder 
 1701 3cae 02B1     		cbz T2,8f 
 1702 3cb0 EAE7     		b 1b 
 1703 3cb2 7D60     	8:	str WP,[DSP,#4] // remainder 
 1704 3cb4 3960     		str T1,[DSP]  // q lo 
 1705 3cb6 0646     		mov TOS,T0  // q hi 		
 1706 3cb8 FFF7FCB8 		_NEXT 
 1707              	
 1708              	
 1709              	/****************************
 1710              		D/  ( ud u -- udq )
 1711              		divide unsigned double 
 1712              		by unsigned single 
 1713              		return double quotient
 1714              		rounded to nearest integer 
 1715              	****************************/
 1716 3cbc 6A3C0000 		_HEADER DSLASH,2,"D/"
 1716      02442F00 
 1717 3cc4 504700BF 		_NEST 
 1718 3cc8 99320000 		_ADR DUPP 
 1719 3ccc DF300000 		_DOLIT 1 
 1719      01000000 
 1720 3cd4 AD330000 		_ADR RSHIFT 
 1721 3cd8 05320000 		_ADR TOR 
 1722 3cdc 713C0000 		_ADR DSLMOD 
 1723 3ce0 7D350000 		_ADR ROT 
 1724 3ce4 A1310000 		_ADR RFROM 
 1725 3ce8 A9370000 		_ADR GREAT 
 1726 3cec 1F310000 		_QBRAN 9f
 1726      043D0000 
 1727 3cf4 DF300000 		_DOLIT 1 
 1727      01000000 
 1728 3cfc 293C0000 		_ADR STOD 
 1729 3d00 E1350000 		_ADR DPLUS 
 1730 3d04 BB2E0000 	9:	_UNNEST 
 1731              	
ARM GAS  forth.s 			page 145


 1732              	
 1733              	/****************************
 1734              		D* ( d s -- d )
 1735              	    multiply a double 
 1736              		by a single 
 1737              	****************************/
 1738 3d08 C03C0000 		_HEADER DSTAR,2,"D*"
 1738      02442A00 
 1739              	/*
 1740              		_NEST 
 1741              		_ADR NROT 
 1742              		_ADR DUPP 
 1743              		_ADR TOR 
 1744              		_ADR DABS
 1745              		_ADR SWAP  
 1746              		_ADR ROT   
 1747              		_ADR DUPP
 1748              		_ADR TOR
 1749              		_ADR MSTAR
 1750              		_ADR ROT
 1751              		_ADR RFROM 
 1752              		_ADR STAR 
 1753              		_ADR PLUS
 1754              		_ADR RFROM 
 1755              		_ADR ZLESS 
 1756              		_QBRAN 9f
 1757              		_ADR DNEGA   
 1758              	9:	_UNNEST 
 1759              	*/
 1760 3d10 57F8040B 		ldr T0,[DSP],#4
 1761 3d14 3968     		ldr T1,[DSP]
 1762 3d16 3860     		str T0,[DSP] 
 1763 3d18 83EA0303 		eor T3,T3 
 1764 3d1c 10F0004F 		tst T0,#(1<<31)
 1765 3d20 02D0     		beq 1f 
 1766              		// DNEGATE 
 1767 3d22 591A     		subs T1,T3,T1  
 1768 3d24 63EB0000 		sbc T0,T3,T0 
 1769 3d28 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1770 3d2c 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1771 3d30 0E44     		add TOS,T1  // TOS:T2 product  
 1772 3d32 3868     		ldr r0,[DSP]
 1773 3d34 10F0004F 		tst T0,#(1<<31)
 1774 3d38 02D0     		beq 2f 
 1775              		// DNEGATE product 
 1776 3d3a 9A1A     		subs T2,T3,T2  
 1777 3d3c 63EB0606 		sbc TOS,T3,TOS 
 1778 3d40 3A60     	2:  str T2,[DSP]
 1779 3d42 FFF7B7B8 		_NEXT 
 1780              	
 1781              	
 1782              	/****************************
 1783              	   /MOD	( n n -- r q )
 1784              		Signed divide. Return
 1785              		mod and quotient.
 1786              	****************************/
 1787 3d46 0C3D0000 		_HEADER SLMOD,4,"/MOD"
ARM GAS  forth.s 			page 146


 1787      042F4D4F 
 1787      4400
 1788 3d50 504700BF 		_NEST
 1789 3d54 D9320000 		_ADR	OVER
 1790 3d58 09330000 		_ADR	ZLESS
 1791 3d5c A9320000 		_ADR	SWAP
 1792 3d60 213B0000 		_ADR	MSMOD
 1793 3d64 BB2E0000 		_UNNEST
 1794              	
 1795              	/**************************
 1796              	    MOD	 ( n n -- r )
 1797              	 	Signed divide. Return
 1798              		mod only.
 1799              	**************************/
 1800 3d68 4A3D0000 		_HEADER MODD,3,"MOD"
 1800      034D4F44 
 1801 3d70 504700BF 		_NEST
 1802 3d74 513D0000 		_ADR	SLMOD
 1803 3d78 79320000 		_ADR	DROP
 1804 3d7c BB2E0000 		_UNNEST
 1805              	
 1806              	/*************************
 1807              	    /	   ( n n -- q )
 1808              	 	Signed divide. Return
 1809              		quotient only.
 1810              	**************************/
 1811 3d80 6C3D0000 		_HEADER SLASH,1,"/"
 1811      012F00BF 
 1812 3d88 504700BF 		_NEST
 1813 3d8c 513D0000 		_ADR	SLMOD
 1814 3d90 A9320000 		_ADR	SWAP
 1815 3d94 79320000 		_ADR	DROP
 1816 3d98 BB2E0000 		_UNNEST
 1817              	
 1818              	//******************************
 1819              	//   */MOD	( n1 n2 n3 -- r q )
 1820              	/*   Multiply n1 and n2, then 
 1821              	   divide by n3. Return 
 1822              	   mod and quotient.
 1823              	******************************/
 1824 3d9c 843D0000 		_HEADER SSMOD,5,"*/MOD"
 1824      052A2F4D 
 1824      4F4400BF 
 1825 3da8 504700BF 		_NEST
 1826 3dac 05320000 		_ADR	TOR
 1827 3db0 1D340000 		_ADR	MSTAR
 1828 3db4 A1310000 		_ADR	RFROM
 1829 3db8 213B0000 		_ADR	MSMOD
 1830 3dbc BB2E0000 		_UNNEST
 1831              	
 1832              	//*******************************
 1833              	//  */ ( n1 n2 n3 -- q )
 1834              	/* 	Multiply n1 by n2, then 
 1835              		divide by n3. Return quotient
 1836              		only.
 1837              	*******************************/
 1838 3dc0 A03D0000 		_HEADER STASL,2,"*/"
ARM GAS  forth.s 			page 147


 1838      022A2F00 
 1839 3dc8 504700BF 		_NEST
 1840 3dcc A93D0000 		_ADR	SSMOD
 1841 3dd0 A9320000 		_ADR	SWAP
 1842 3dd4 79320000 		_ADR	DROP
 1843 3dd8 BB2E0000 		_UNNEST
 1844              	
 1845              	/*******************
 1846              	  Miscellaneous
 1847              	*******************/
 1848              	
 1849              	/*************************
 1850              		CHAR+ ( a -- a+ )
 1851              		increment a by one 
 1852              		char size unit. 
 1853              	*************************/
 1854 3ddc C43D0000 		_HEADER CHARP,5,"CHAR+"
 1854      05434841 
 1854      522B00BF 
 1855 3de8 06F10106 		add TOS,#1
 1856 3dec FFF762B8 		_NEXT 
 1857              	
 1858              	/*************************
 1859              		CHARS ( n1 -- n1 )
 1860              		address size of 
 1861              		n1 character
 1862              		same on this system 
 1863              	*************************/
 1864 3df0 E03D0000 		_HEADER CHARS,5,"CHARS"
 1864      05434841 
 1864      525300BF 
 1865 3dfc FFF75AB8 		_NEXT 
 1866              	
 1867              	
 1868              	
 1869              	/*************************
 1870              		ALIGN ( -- )
 1871              		align data pointer 
 1872              		to cell boundary 
 1873              	************************/
 1874 3e00 F43D0000 		_HEADER ALIGN,5,"ALIGN"
 1874      05414C49 
 1874      474E00BF 
 1875 3e0c E06C     		ldr T0,[UP,#USER_CTOP]
 1876 3e0e 00F10300 		add T0,#(CELLL-1)
 1877 3e12 20F00300 		and T0,#0xFFFFFFFC 
 1878 3e16 E064     		str T0,[UP,#USER_CTOP]
 1879 3e18 FFF74CB8 		_NEXT 
 1880              	
 1881              	
 1882              	/*************************
 1883              	    ALIGNED	( b -- a )
 1884              	 	Align address to the 
 1885              		cell boundary.
 1886              	**************************/
 1887 3e1c 043E0000 		_HEADER ALGND,7,"ALIGNED"
 1887      07414C49 
ARM GAS  forth.s 			page 148


 1887      474E4544 
 1888 3e28 06F10306 		ADD	TOS,TOS,#3
 1889 3e2c 6FF00305 		MVN	WP,#3
 1890 3e30 06EA0506 		AND	TOS,TOS,WP
 1891 3e34 FFF73EB8 		_NEXT
 1892              	
 1893              	/****************************
 1894              	    >CHAR	( c -- c )
 1895              	 	Filter non-printing 
 1896              		characters.
 1897              	****************************/
 1898 3e38 203E0000 		_HEADER TCHAR,5,">CHAR"
 1898      053E4348 
 1898      415200BF 
 1899 3e44 504700BF 		_NEST
 1900 3e48 DF300000 		_DOLIT  0x7F
 1900      7F000000 
 1901 3e50 55330000 		_ADR	ANDD
 1902 3e54 99320000 		_ADR	DUPP	// mask msb
 1903 3e58 91340000 		_ADR	BLANK
 1904 3e5c DF300000 		_DOLIT 	127
 1904      7F000000 
 1905 3e64 B93A0000 		_ADR	WITHI	// check for printable
 1906 3e68 69360000 		_ADR	INVER
 1907 3e6c 1F310000 		_QBRAN	TCHA1
 1907      803E0000 
 1908 3e74 79320000 		_ADR	DROP
 1909 3e78 DF300000 		_DOLIT 	'_'	// replace non-printables
 1909      5F000000 
 1910              	TCHA1:
 1911 3e80 BB2E0000 		  _UNNEST
 1912              	
 1913              	/************************
 1914              	    DEPTH	( -- n )
 1915              	 	Return the depth of
 1916              		the data stack.
 1917              	***********************/
 1918 3e84 3C3E0000 		_HEADER DEPTH,5,"DEPTH"
 1918      05444550 
 1918      544800BF 
 1919 3e90 4FF6B062 		_MOV32 T2,SPP 
 1919      C2F20102 
 1920 3e98 A2EB0702 		SUB	T2,T2,DSP
 1921 3e9c 47F8046D 		_PUSH
 1922 3ea0 4FEAA206 		ASR	TOS,T2,#2
 1923 3ea4 FFF706B8 		_NEXT
 1924              	
 1925              	/*****************************
 1926              	    PICK	( ... +n -- ... w )
 1927              	 	Copy the nth stack item 
 1928              		to tos.
 1929              	******************************/
 1930 3ea8 883E0000 		_HEADER PICK,4,"PICK"
 1930      04504943 
 1930      4B0000BF 
 1931 3eb4 4FEA8606 		lsl TOS,#2 
 1932 3eb8 BE59     		ldr TOS,[DSP,TOS]
ARM GAS  forth.s 			page 149


 1933 3eba FEF7FBBF 		_NEXT 
 1934              	
 1935              	/*****************************
 1936              		PUT ( xn..x0 w i -- xi...x0 )
 1937              		put value w at position 
 1938              		xi on stack 
 1939              		i in range [0..n] 
 1940              	*****************************/
 1941 3ebe AC3E0000 		_HEADER PUT,3,"PUT"
 1941      03505554 
 1941      00BF
 1942 3ec8 3546     		mov WP,TOS 
 1943 3eca 57F8046B 		_POP 
 1944 3ece 4FEA8505 		lsl WP,#2 
 1945 3ed2 7E51     		str TOS,[DSP,WP]
 1946 3ed4 57F8046B 		_POP 
 1947 3ed8 FEF7ECBF 		_NEXT 
 1948              	
 1949              	/*********************
 1950              	  Memory access
 1951              	*********************/
 1952              	
 1953              	/*************************
 1954              	    HERE	( -- a )
 1955              	 	Return the top of
 1956              		the code dictionary.
 1957              	*************************/
 1958 3edc C23E0000 		_HEADER HERE,4,"HERE"
 1958      04484552 
 1958      450000BF 
 1959 3ee8 504700BF 		_NEST
 1960 3eec B9390000 		_ADR	CPP
 1961 3ef0 75310000 		_ADR	AT
 1962 3ef4 BB2E0000 		_UNNEST
 1963              	
 1964              	/***************************	
 1965              	    PAD	 ( -- a )
 1966              	 	Return the address of 
 1967              		a temporary buffer.
 1968              	***************************/
 1969 3ef8 E03E0000 		_HEADER PAD,3,"PAD"
 1969      03504144 
 1970 3f00 504700BF 		_NEST
 1971 3f04 E93E0000 		_ADR	HERE
 1972 3f08 DF300000 		_DOLIT 80
 1972      50000000 
 1973 3f10 D5330000 		_ADR PLUS 
 1974 3f14 BB2E0000 		_UNNEST
 1975              	
 1976              	/***********************
 1977              	    TIB	 ( -- a )
 1978              	 	Return the address 
 1979              		of the terminal 
 1980              		input buffer.
 1981              	************************/
 1982 3f18 FC3E0000 		_HEADER TIB,3,"TIB"
 1982      03544942 
ARM GAS  forth.s 			page 150


 1983 3f20 47F8046D 		_PUSH
 1984 3f24 666B     		ldr TOS,[UP,#TIBUF]
 1985 3f26 FEF7C5BF 		_NEXT
 1986              	
 1987              	/*************************
 1988              		SOURCE-ID, ( -- 0 | -1 )
 1989              	output:
 1990              		-1 	String (via EVALUATE)	
 1991              		0 	User input device
 1992              	*****************************/
 1993 3f2a 1C3F0000 		_HEADER SOURCID,9,"SOURCE-ID"
 1993      09534F55 
 1993      5243452D 
 1993      4944
 1994 3f38 47F8046D 		_PUSH 
 1995 3f3c A66B     		ldr TOS,[UP,#SRCID]
 1996 3f3e FEF7B9BF 		_NEXT 
 1997              	
 1998              	
 1999              	/***********************************
 2000              		SOURCE ( -- a u )
 2001              	output:
 2002              		a  address of transaction buffer 
 2003              		u  # char in buffer 
 2004              	***********************************/
 2005 3f42 2E3F0000 		_HEADER SOURCE,6,"SOURCE"
 2005      06534F55 
 2005      52434500 
 2005      00BF
 2006 3f50 504700BF 		_NEST 
 2007 3f54 DF300000 		_DOLIT  UPP+SRC 
 2007      30000020 
 2008 3f5c 31380000 		_ADR   DAT 
 2009 3f60 BB2E0000 		_UNNEST 
 2010              	
 2011              	/*************************
 2012              	    @EXECUTE	( a -- )
 2013              	 	Execute vector stored
 2014              		in address a.
 2015              	*************************/
 2016 3f64 463F0000 		_HEADER ATEXE,8,"@EXECUTE"
 2016      08404558 
 2016      45435554 
 2016      450000BF 
 2017 3f74 3500     		MOVS	WP,TOS
 2018 3f76 57F8046B 		_POP
 2019 3f7a 2D68     		LDR	WP,[WP]
 2020 3f7c 45F00105 		ORR	WP,WP,#1
 2021 3f80 18BF     	    IT NE 
 2022 3f82 2847     		BXNE	WP
 2023 3f84 FEF796BF 		_NEXT
 2024              	
 2025              	/*******************************
 2026              	    CMOVE	( b1 b2 u -- )
 2027              	 	Copy u bytes from b1 to b2.
 2028              	********************************/
 2029 3f88 683F0000 		_HEADER CMOVE,5,"CMOVE"
ARM GAS  forth.s 			page 151


 2029      05434D4F 
 2029      564500BF 
 2030 3f94 012E     		CMP TOS,#1 
 2031 3f96 0DD4     		BMI CMOV3 
 2032 3f98 57F8042B 		LDR	T2,[DSP],#4
 2033 3f9c 57F8043B 		LDR	T3,[DSP],#4
 2034 3fa0 03E0     		B CMOV1
 2035              	CMOV0:
 2036 3fa2 13F8015B 		LDRB	WP,[T3],#1
 2037 3fa6 02F8015B 		STRB	WP,[T2],#1
 2038              	CMOV1:
 2039 3faa 3600     		MOVS	TOS,TOS
 2040 3fac 04D0     		BEQ	CMOV2
 2041 3fae A6F10106 		SUB	TOS,TOS,#1
 2042 3fb2 F6E7     		B CMOV0
 2043              	CMOV3: 
 2044 3fb4 07F10807 		ADD  DSP,#2*CELLL  
 2045              	CMOV2:
 2046 3fb8 57F8046B 		_POP
 2047 3fbc FEF77ABF 		_NEXT
 2048              	
 2049              	/*********************************
 2050              		MOVE ( a1 a2 u -- )
 2051              		alias for CMOVE 
 2052              	*********************************/
 2053 3fc0 8C3F0000 		_HEADER MOVE,4,"MOVE"
 2053      044D4F56 
 2053      450000BF 
 2054 3fcc E2E7     		B CMOVE 
 2055              	
 2056              	
 2057              	/***************************
 2058              	    WMOVE	( a1 a2 u -- )
 2059              	 	Copy u byte from a1 to a2
 2060              		round u to upper modulo 4 
 2061              	*******************************/
 2062 3fce C43F0000 		_HEADER WMOVE,5,"WMOVE"
 2062      05574D4F 
 2062      5645
 2063 3fd8 4FF00400 		MOV T0,#4
 2064 3fdc 06F10306 		ADD TOS,#3 
 2065 3fe0 26F00306 		BIC TOS,#3
 2066 3fe4 57F8041B 		LDR	T1,[DSP],#4 // dest
 2067 3fe8 57F8042B 		LDR	T2,[DSP],#4 // src 
 2068 3fec 8A42     		CMP T2,T1 
 2069 3fee 08D5     		BPL MOVE1
 2070 3ff0 6FF00300 		MOV T0,#-4 
 2071 3ff4 3144     		ADD T1,TOS
 2072 3ff6 3244     		ADD T2,TOS 
 2073 3ff8 01E0     		B MOVE3
 2074              	MOVE0:
 2075 3ffa 1568     		LDR	WP,[T2]
 2076 3ffc 0D60     		STR	WP,[T1]
 2077              	MOVE3: 
 2078 3ffe 0144     		ADD T1,T0 
 2079 4000 0244     		ADD T2,T0 
 2080              	MOVE1:
ARM GAS  forth.s 			page 152


 2081 4002 3600     		MOVS TOS,TOS
 2082 4004 02D0     		BEQ	MOVE2
 2083 4006 A6F10406 		SUB	TOS,TOS,#4
 2084 400a F6E7     		B MOVE0
 2085              	MOVE2:
 2086 400c 57F8046B 		_POP
 2087 4010 FEF750BF 		_NEXT
 2088              	
 2089              	/**************************
 2090              	    FILL	( b u c -- )
 2091              	 	Fill u bytes of character
 2092              		c to area beginning at b.
 2093              	******************************/
 2094 4014 D23F0000 		_HEADER FILL,4,"FILL"
 2094      0446494C 
 2094      4C0000BF 
 2095 4020 03CF     		LDMFD DSP!,{T0,T1} 
 2096 4022 0000     		MOVS T0,T0 
 2097 4024 03D0     		BEQ FILL2
 2098              	FILL1:
 2099 4026 01F8016B 		STRB	TOS,[T1],#1
 2100 402a 0138     		SUBS	T0,T0,#1
 2101 402c FBD1     		BNE FILL1
 2102              	FILL2:
 2103 402e 57F8046B 		_POP
 2104 4032 FEF73FBF 		_NEXT
 2105              	
 2106              	/*****************************
 2107              	CORE EXTENSION 
 2108              		ERASE ( a u -- )
 2109              		fill u bytes with zeros 
 2110              		starting at a 
 2111              	*****************************/
 2112 4036 18400000 		_HEADER ERASE,5,"ERASE"
 2112      05455241 
 2112      5345
 2113 4040 504700BF 		_NEST 
 2114 4044 99320000 		_ADR	DUPP 
 2115 4048 19330000 		_ADR	ZGREAT 
 2116 404c 1F310000 		_QBRAN	1f 
 2116      64400000 
 2117 4054 DF300000 		_DOLIT	0 
 2117      00000000 
 2118 405c 21400000 		_ADR	FILL 
 2119 4060 BB2E0000 		_UNNEST 
 2120 4064 A5350000 	1:   _ADR	DDROP 
 2121 4068 BB2E0000 		_UNNEST 
 2122              	
 2123              	
 2124              	/*****************************
 2125              	    PACK$	( b u a -- a )
 2126              	 	Build a counted word with
 2127              		u characters from b. 
 2128              		Null fill.
 2129              	*****************************/
 2130 406c 3A400000 		_HEADER PACKS,5,"PACK$"
 2130      05504143 
ARM GAS  forth.s 			page 153


 2130      4B2400BF 
 2131 4078 504700BF 		_NEST
 2132 407c 293E0000 		_ADR	ALGND
 2133 4080 99320000 		_ADR	DUPP
 2134 4084 05320000 		_ADR	TOR		// strings only on cell boundary
 2135 4088 D9320000 		_ADR	OVER
 2136 408c D5330000 		_ADR	PLUS
 2137 4090 31340000 		_ADR	ONEP 
 2138 4094 DF300000 		_DOLIT 	0xFFFFFFFC
 2138      FCFFFFFF 
 2139 409c 55330000 		_ADR	ANDD			// count mod cell
 2140 40a0 DF300000 		_DOLIT 	0
 2140      00000000 
 2141 40a8 A9320000 		_ADR	SWAP
 2142 40ac 61310000 		_ADR	STORE			// null fill cell
 2143 40b0 D5310000 		_ADR	RAT
 2144 40b4 CD350000 		_ADR	DDUP
 2145 40b8 81310000 		_ADR	CSTOR
 2146 40bc 31340000 		_ADR	ONEP			// save count
 2147 40c0 A9320000 		_ADR	SWAP
 2148 40c4 953F0000 		_ADR	CMOVE
 2149 40c8 A1310000 		_ADR	RFROM
 2150 40cc BB2E0000 		_UNNEST   			// move string
 2151              	
 2152              	/***********************************
 2153              	  Numeric output, single precision
 2154              	***********************************/
 2155              	
 2156              	/**************************
 2157              	    DIGIT	( u -- c )
 2158              	 	Convert digit u to 
 2159              		a character.
 2160              	***************************/
 2161 40d0 70400000 		_HEADER DIGIT,5,"DIGIT"
 2161      05444947 
 2161      495400BF 
 2162 40dc 504700BF 		_NEST
 2163 40e0 DF300000 		_DOLIT 9
 2163      09000000 
 2164 40e8 D9320000 		_ADR	OVER
 2165 40ec 75370000 		_ADR	LESS
 2166 40f0 DF300000 		_DOLIT	7
 2166      07000000 
 2167 40f8 55330000 		_ADR	ANDD
 2168 40fc D5330000 		_ADR	PLUS
 2169 4100 DF300000 		_DOLIT	'0'
 2169      30000000 
 2170 4108 D5330000 		_ADR	PLUS 
 2171 410c BB2E0000 		_UNNEST
 2172              	
 2173              	/*********************************
 2174              	    EXTRACT	( ud base -- ud c )
 2175              	 	Extract the least significant
 2176              		digit from positive double.
 2177              	**********************************/
 2178 4110 D4400000 		_HEADER EXTRC,7,"EXTRACT"
 2178      07455854 
ARM GAS  forth.s 			page 154


 2178      52414354 
 2179 411c 504700BF 		_NEST
 2180 4120 713C0000 		_ADR	DSLMOD
 2181 4124 7D350000 		_ADR	ROT
 2182 4128 DD400000 		_ADR	DIGIT
 2183 412c BB2E0000 		_UNNEST
 2184              	
 2185              	/***************************
 2186              	    <#	  ( -- )
 2187              	 	Initiate the numeric
 2188              		output process.
 2189              	****************************/
 2190 4130 14410000 		_HEADER BDIGS,2,"<#"
 2190      023C2300 
 2191 4138 504700BF 		_NEST
 2192 413c 013F0000 		_ADR	PAD
 2193 4140 8D390000 		_ADR	HLD
 2194 4144 61310000 		_ADR	STORE
 2195 4148 BB2E0000 		_UNNEST
 2196              	
 2197              	/*********************************
 2198              	    HOLD	( c -- )
 2199              	 	Insert a character into the 
 2200              		numeric output string.
 2201              	**********************************/
 2202 414c 34410000 		_HEADER HOLD,4,"HOLD"
 2202      04484F4C 
 2202      440000BF 
 2203 4158 504700BF 		_NEST
 2204 415c 8D390000 		_ADR	HLD
 2205 4160 75310000 		_ADR	AT
 2206 4164 41340000 		_ADR	ONEM
 2207 4168 99320000 		_ADR	DUPP
 2208 416c 8D390000 		_ADR	HLD
 2209 4170 61310000 		_ADR	STORE
 2210 4174 81310000 		_ADR	CSTOR
 2211 4178 BB2E0000 		_UNNEST
 2212              	
 2213              	/********************************
 2214              	CORE EXTENSION 
 2215              		HOLDS ( c-addr u -- )
 2216              		add string to pictured 
 2217              		numeric output.
 2218              	*********************************/
 2219 417c 50410000 		_HEADER HOLDS,5,"HOLDS" 
 2219      05484F4C 
 2219      445300BF 
 2220 4188 504700BF 		_NEST 
 2221 418c 8D390000 		_ADR	HLD   
 2222 4190 75310000 		_ADR	AT     // c-addr u a 
 2223 4194 D9320000 		_ADR	OVER 
 2224 4198 E5330000 		_ADR	SUBB 
 2225 419c 99320000 		_ADR	DUPP 
 2226 41a0 8D390000 		_ADR	HLD 
 2227 41a4 61310000 		_ADR	STORE
 2228 41a8 A9320000 		_ADR	SWAP  
 2229 41ac 953F0000 		_ADR	CMOVE  
ARM GAS  forth.s 			page 155


 2230 41b0 BB2E0000 		_UNNEST 
 2231              	
 2232              	
 2233              	/***********************
 2234              	    #	   ( ud -- ud )
 2235              	 	Extract one digit 
 2236              		from ud and append 
 2237              		the digit to output 
 2238              		string.
 2239              	*************************/
 2240 41b4 80410000 		_HEADER DIG,1,"#"
 2240      012300BF 
 2241 41bc 504700BF 		_NEST
 2242 41c0 F9380000 		_ADR	BASE
 2243 41c4 75310000 		_ADR	AT
 2244 41c8 1D410000 		_ADR	EXTRC
 2245 41cc 59410000 		_ADR	HOLD
 2246 41d0 BB2E0000 		_UNNEST
 2247              	
 2248              	/***************************
 2249              	    #S	  ( ud -- 0 )
 2250              	 	Convert ud until all 
 2251              		digits are added to 
 2252              		the output string.
 2253              	***************************/
 2254 41d4 B8410000 		_HEADER DIGS,2,"#S"
 2254      02235300 
 2255 41dc 504700BF 		_NEST
 2256              	DIGS1:
 2257 41e0 BD410000 	    _ADR	DIG
 2258 41e4 CD350000 		_ADR	DDUP
 2259 41e8 69330000 		_ADR    ORR 
 2260 41ec 1F310000 		_QBRAN 	DIGS2
 2260      FC410000 
 2261 41f4 47310000 		_BRAN	DIGS1
 2261      E0410000 
 2262              	DIGS2:
 2263 41fc 79320000 		 _ADR DROP 
 2264 4200 BB2E0000 		 _UNNEST
 2265              	
 2266              	/*********************
 2267              	    SIGN	( n -- )
 2268              	 	Add a minus sign
 2269              		to the numeric
 2270              		output string.
 2271              	*********************/
 2272 4204 D8410000 		_HEADER SIGN,4,"SIGN"
 2272      04534947 
 2272      4E0000BF 
 2273 4210 504700BF 		_NEST
 2274 4214 09330000 		_ADR	ZLESS
 2275 4218 1F310000 		_QBRAN	SIGN1
 2275      2C420000 
 2276 4220 DF300000 		_DOLIT '-'
 2276      2D000000 
 2277 4228 59410000 		_ADR	HOLD
 2278              	SIGN1:
ARM GAS  forth.s 			page 156


 2279 422c BB2E0000 		  _UNNEST
 2280              	
 2281              	/*************************
 2282              	    #>  ( w -- b u )
 2283              	 	Prepare the output 
 2284              		word to be TYPE'd.
 2285              	************************/
 2286 4230 08420000 		_HEADER EDIGS,2,"#>"
 2286      02233E00 
 2287 4238 504700BF 		_NEST
 2288 423c 79320000 		_ADR	DROP
 2289 4240 8D390000 		_ADR	HLD
 2290 4244 75310000 		_ADR	AT
 2291 4248 013F0000 		_ADR	PAD
 2292 424c D9320000 		_ADR	OVER
 2293 4250 E5330000 		_ADR	SUBB
 2294 4254 BB2E0000 		_UNNEST
 2295              	
 2296              	/**************************
 2297              	    str	 ( n -- b u )
 2298              	 	Convert a signed 
 2299              		integer to a numeric 
 2300              		string.
 2301              	hidden word used by compiler
 2302              	***************************/
 2303              	STRR:
 2304 4258 504700BF 		_NEST
 2305 425c 293C0000 		_ADR 	STOD 
 2306 4260 99320000 		_ADR	DUPP
 2307 4264 05320000 		_ADR	TOR
 2308 4268 01360000 		_ADR	DABS
 2309 426c 39410000 		_ADR	BDIGS
 2310 4270 DD410000 		_ADR	DIGS
 2311 4274 A1310000 		_ADR	RFROM
 2312 4278 11420000 		_ADR	SIGN
 2313 427c 39420000 		_ADR	EDIGS
 2314 4280 BB2E0000 		_UNNEST
 2315              	
 2316              	/*************************
 2317              	    HEX	 ( -- )
 2318              	 	Use radix 16 as 
 2319              		base for numeric 
 2320              		conversions.
 2321              	*************************/
 2322 4284 34420000 		_HEADER HEX,3,"HEX"
 2322      03484558 
 2323 428c 504700BF 		_NEST
 2324 4290 DF300000 		_DOLIT 16
 2324      10000000 
 2325 4298 F9380000 		_ADR	BASE
 2326 429c 61310000 		_ADR	STORE
 2327 42a0 BB2E0000 		_UNNEST
 2328              	
 2329              	/**************************
 2330              		BIN ( -- )
 2331              		Use radix 2 as 
 2332              		base for numeric 
ARM GAS  forth.s 			page 157


 2333              		conversion 
 2334              	**************************/
 2335 42a4 88420000 		_HEADER BIN,3,"BIN"
 2335      0342494E 
 2336 42ac 504700BF 		_NEST 
 2337 42b0 DF300000 		_DOLIT 2 
 2337      02000000 
 2338 42b8 F9380000 		_ADR BASE 
 2339 42bc 61310000 		_ADR STORE
 2340 42c0 BB2E0000 		_UNNEST 
 2341              	
 2342              	/************************
 2343              	    DECIMAL	( -- )
 2344              	 	Use radix 10 as base
 2345              		for numeric conversions.
 2346              	*************************/
 2347 42c4 A8420000 		_HEADER DECIM,7,"DECIMAL"
 2347      07444543 
 2347      494D414C 
 2348 42d0 504700BF 		_NEST
 2349 42d4 DF300000 		_DOLIT 10
 2349      0A000000 
 2350 42dc F9380000 		_ADR	BASE
 2351 42e0 61310000 		_ADR	STORE
 2352 42e4 BB2E0000 		_UNNEST
 2353              	
 2354              	/************************************
 2355              	  Numeric input
 2356              	***********************************/
 2357              	
 2358              	/***********************************
 2359              	    DIGIT?	( c base -- u t )
 2360              	 	Convert a character to its 
 2361              		numeric value. A flag 
 2362              		indicates success.
 2363              	**********************************/
 2364 42e8 C8420000 		_HEADER DIGTQ,6,"DIGIT?"
 2364      06444947 
 2364      49543F00 
 2365 42f4 504700BF 		_NEST
 2366 42f8 05320000 		_ADR	TOR
 2367 42fc DF300000 		_DOLIT 	'0'
 2367      30000000 
 2368 4304 E5330000 		_ADR	SUBB
 2369 4308 DF300000 		_DOLIT 9
 2369      09000000 
 2370 4310 D9320000 		_ADR	OVER
 2371 4314 75370000 		_ADR	LESS
 2372 4318 1F310000 		_QBRAN	DGTQ1
 2372      40430000 
 2373 4320 DF300000 		_DOLIT 7
 2373      07000000 
 2374 4328 E5330000 		_ADR	SUBB
 2375 432c 99320000 		_ADR	DUPP
 2376 4330 DF300000 		_DOLIT	10
 2376      0A000000 
 2377 4338 75370000 		_ADR	LESS
ARM GAS  forth.s 			page 158


 2378 433c 69330000 		_ADR	ORR
 2379              	DGTQ1:
 2380 4340 99320000 		_ADR	DUPP
 2381 4344 A1310000 		_ADR	RFROM
 2382 4348 5D370000 		_ADR	ULESS
 2383 434c BB2E0000 		_UNNEST
 2384              	
 2385              	
 2386              	/*****************************************
 2387              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2388              	  convert unsigned double string 
 2389              	  to double integer adding to ud1 
 2390              	input:
 2391              		ud1  unsiged double 
 2392              		adr1  string address 
 2393              		u1    string length 
 2394              	outpout:
 2395              		ud2   modifield ud1 
 2396              		adr2  point to char not converted 
 2397              		u2    char left in string 
 2398              	**************************************/
 2399 4350 EC420000 		_HEADER TONBR,7,">NUMBER"
 2399      073E4E55 
 2399      4D424552 
 2400 435c 504700BF 		_NEST 
 2401 4360 99320000 		_ADR DUPP 
 2402 4364 1F310000 		_QBRAN 9f 
 2402      CC430000 
 2403 436c D9320000 	1: 	_ADR OVER  // d a u a 
 2404 4370 95310000 		_ADR CAT   // d  a u c 
 2405 4374 F9380000 		_ADR BASE   
 2406 4378 75310000 		_ADR AT      // d a u c base
 2407 437c F5420000 		_ADR DIGTQ   // d a u n flag 
 2408 4380 1F310000 		_QBRAN 8f
 2408      C8430000 
 2409 4388 05320000 		_ADR TOR   	 
 2410 438c 41340000 		_ADR ONEM 
 2411 4390 BD320000 		_ADR DSWAP // a u d 
 2412 4394 F9380000 		_ADR BASE 
 2413 4398 75310000 		_ADR AT 
 2414 439c 113D0000 		_ADR DSTAR 
 2415 43a0 A1310000 		_ADR RFROM 
 2416 43a4 DF300000 		_DOLIT 0    
 2416      00000000 
 2417 43ac E1350000 		_ADR DPLUS 
 2418 43b0 BD320000 		_ADR DSWAP 
 2419 43b4 A9320000 		_ADR SWAP 
 2420 43b8 31340000 		_ADR ONEP
 2421 43bc A9320000 		_ADR SWAP  
 2422 43c0 47310000 		_BRAN 1b 
 2422      6C430000 
 2423 43c8 79320000 	8:  _ADR DROP
 2424 43cc BB2E0000 	9:	_UNNEST 
 2425              	
 2426              	
 2427              	/**************************
 2428              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
ARM GAS  forth.s 			page 159


 2429              	 check for charcter c 
 2430              	 move pointer if *a==c  
 2431              	**************************/
 2432              	CHARQ:
 2433 43d0 7868     	    ldr T0,[DSP,#4]
 2434 43d2 10F8011B 	    ldrb T1,[T0],#1 
 2435 43d6 3246     	    mov T2,TOS 
 2436 43d8 86EA0606 	    eor TOS,TOS
 2437 43dc 9142     	    cmp T1,T2
 2438 43de 06D1     	    bne 1f 
 2439 43e0 7860     	    str T0,[DSP,#4]
 2440 43e2 3868     		ldr T0,[DSP]
 2441 43e4 A0F10100 		sub T0,#1 
 2442 43e8 3860     		str T0,[DSP]
 2443 43ea 6FEA0606 	    mvn TOS,TOS  
 2444 43ee FEF761BD 	1:  _NEXT
 2445              	
 2446              	
 2447              	/*********************************
 2448              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2449              	   skip '-'|'+' return -1 if '-' 
 2450              	   else return 0 
 2451              	*********************************/
 2452              	NEGQ: 
 2453 43f2 47F8046D 		_PUSH 
 2454 43f6 86EA0606 		eor TOS,TOS // false flag 
 2455 43fa 7868     		ldr T0,[DSP,#4]
 2456 43fc 10F8011B 		ldrb T1,[T0],#1
 2457 4400 2D29     		cmp T1,#'-' 
 2458 4402 02D0     		beq 1f
 2459 4404 2B29     		cmp T1,#'+'
 2460 4406 07D1     		bne 3f 
 2461 4408 01E0     		b 2f 
 2462 440a 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2463 440e 7860     	2:	str T0,[DSP,#4]
 2464 4410 3868     		ldr T0,[DSP]
 2465 4412 A0F10100 		sub T0,#1 
 2466 4416 3860     		str T0,[DSP]
 2467 4418 FEF74CBD 	3:	_NEXT 
 2468              	
 2469              	
 2470              	
 2471              	/**********************************
 2472              	    INT?	( a -- n T | a F )
 2473              	 	parse string  at 'a' for 
 2474              		integer. Push a flag on TOS.
 2475              		integer form:
 2476              			[-]hex_digit+  | 
 2477              			$[-]hex_digit+ |
 2478              			%[-]bin_digit+ | 
 2479              			[-]dec_digit+ 
 2480              	**********************************/
 2481 441c 54430000 		_HEADER INTQ,4,"INT?"
 2481      04494E54 
 2481      3F0000BF 
 2482 4428 504700BF 		_NEST
 2483              	// save BASE 	
ARM GAS  forth.s 			page 160


 2484 442c F9380000 		_ADR	BASE
 2485 4430 75310000 		_ADR	AT
 2486 4434 05320000 		_ADR	TOR
 2487 4438 DF300000 		_DOLIT	0      // a 0 
 2487      00000000 
 2488 4440 D9320000 		_ADR	OVER   // a 0 a 
 2489 4444 49380000 		_ADR	COUNT  // a 0 a+ cnt 
 2490 4448 DF300000 		_DOLIT  '$' 
 2490      24000000 
 2491 4450 D1430000 		_ADR    CHARQ 
 2492 4454 1F310000 		_QBRAN  0f 
 2492      68440000 
 2493              	// hexadecimal number 
 2494 445c 8D420000 		_ADR    HEX
 2495 4460 47310000 		_BRAN   2f 
 2495      80440000 
 2496 4468 DF300000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2496      25000000 
 2497 4470 D1430000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2498 4474 1F310000 		_QBRAN  2f
 2498      80440000 
 2499 447c AD420000 		_ADR	BIN 
 2500              	2: // check if negative number 
 2501 4480 F3430000 		_ADR    NEGQ 
 2502 4484 05320000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2503 4488 DF300000 		_DOLIT  0
 2503      00000000 
 2504 4490 99320000 		_ADR	DUPP 
 2505 4494 BD320000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
 2506 4498 5D430000 		_ADR    TONBR // a 0 d a+ cnt 
 2507 449c 1F310000 		_QBRAN  2f
 2507      B8440000 
 2508              	    // not an integer 
 2509 44a4 A1310000 		_ADR RFROM // a 0 d a sign  
 2510 44a8 A5350000 		_ADR DDROP 
 2511 44ac A5350000 		_ADR DDROP 
 2512 44b0 47310000 		_BRAN 7f 
 2512      E0440000 
 2513              	2: // valid integer 
 2514 44b8 79320000 		_ADR	DROP // a 0 d
 2515 44bc BD320000 		_ADR    DSWAP 
 2516 44c0 A5350000 		_ADR    DDROP 
 2517 44c4 79320000 		_ADR    DROP  // d>s 
 2518 44c8 A1310000 		_ADR    RFROM // n sign 
 2519 44cc 1F310000 		_QBRAN  2f
 2519      D8440000 
 2520 44d4 7D360000 		_ADR    NEGAT   
 2521 44d8 DF300000 	2:	_DOLIT  -1 
 2521      FFFFFFFF 
 2522              	7: // restore BASE 
 2523 44e0 A1310000 		_ADR	RFROM
 2524 44e4 F9380000 		_ADR	BASE
 2525 44e8 61310000 		_ADR	STORE
 2526 44ec BB2E0000 		_UNNEST
 2527              	
 2528              	
 2529              	/********************************
ARM GAS  forth.s 			page 161


 2530              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2531              	    parse number, integer or float 
 2532              	    if not a number return ( a 0 ) 
 2533              	    if integer return ( int -1 ) 
 2534              	    if float return ( float -2 )
 2535              	**********************************/
 2536 44f0 20440000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2536      074E554D 
 2536      4245523F 
 2537 44fc 504700BF 	    _NEST 
 2538 4500 29440000 	    _ADR INTQ
 2539 4504 E5340000 	    _ADR QDUP 
 2540 4508 1F310000 	    _QBRAN 2f 
 2540      14450000 
 2541 4510 BB2E0000 	    _UNNEST 
 2542 4514 D9270000 	2:  _ADR FLOATQ
 2543 4518 BB2E0000 	    _UNNEST 
 2544              	
 2545              	
 2546              	/********************
 2547              	  console I/O
 2548              	********************/
 2549              	
 2550              	/**********************
 2551              	    SPACE	( -- )
 2552              	 	Send the blank 
 2553              		character to 
 2554              		the output device.
 2555              	************************/
 2556 451c F4440000 		_HEADER SPACE,5,"SPACE"
 2556      05535041 
 2556      434500BF 
 2557 4528 504700BF 		_NEST
 2558 452c 91340000 		_ADR	BLANK
 2559 4530 7D2F0000 		_ADR	EMIT
 2560 4534 BB2E0000 		_UNNEST
 2561              	
 2562              	/***************************
 2563              	    SPACES	( +n -- )
 2564              	 	Send n spaces to the 
 2565              		output device.
 2566              	****************************/
 2567 4538 20450000 		_HEADER SPACS,6,"SPACES"
 2567      06535041 
 2567      43455300 
 2568 4544 504700BF 		_NEST
 2569 4548 DF300000 		_DOLIT	0
 2569      00000000 
 2570 4550 C5370000 		_ADR	MAX
 2571 4554 05320000 		_ADR	TOR
 2572 4558 47310000 		_BRAN	CHAR2
 2572      64450000 
 2573              	CHAR1:
 2574 4560 29450000 		_ADR	SPACE
 2575              	CHAR2:
 2576 4564 01310000 		_DONXT	CHAR1
 2576      60450000 
ARM GAS  forth.s 			page 162


 2577 456c BB2E0000 		_UNNEST
 2578              	
 2579              	/***********************
 2580              	    TYPE	( b u -- )
 2581              	 	Output u characters 
 2582              		from b.
 2583              	************************/
 2584 4570 3C450000 		_HEADER TYPEE,4,"TYPE"
 2584      04545950 
 2584      450000BF 
 2585 457c 504700BF 		_NEST
 2586 4580 05320000 		_ADR  TOR   // ( a+1 -- R: u )
 2587 4584 47310000 		_BRAN	TYPE2
 2587      98450000 
 2588              	TYPE1:  
 2589 458c 49380000 		_ADR  COUNT
 2590 4590 453E0000 		_ADR TCHAR
 2591 4594 7D2F0000 		_ADR EMIT
 2592              	TYPE2:  
 2593 4598 01310000 		_DONXT	TYPE1
 2593      8C450000 
 2594 45a0 79320000 		_ADR	DROP
 2595 45a4 BB2E0000 		_UNNEST
 2596              	
 2597              	/***************************
 2598              	    CR	  ( -- )
 2599              	 	Output a carriage return
 2600              		and a line feed.
 2601              	****************************/
 2602 45a8 74450000 		_HEADER CR,2,"CR"
 2602      02435200 
 2603 45b0 504700BF 		_NEST
 2604 45b4 DF300000 		_DOLIT	CRR
 2604      0D000000 
 2605 45bc 7D2F0000 		_ADR	EMIT
 2606 45c0 DF300000 		_DOLIT	LF
 2606      0A000000 
 2607 45c8 7D2F0000 		_ADR	EMIT
 2608 45cc BB2E0000 		_UNNEST
 2609              	
 2610              	/******************************************
 2611              	  do_$	( -- a u )
 2612              	  Return the address of a compiled string.
 2613              	  adjust return address to skip over it.
 2614              	hidden word used by compiler. 
 2615              	******************************************/
 2616              	DOSTR:
 2617 45d0 504700BF 		_NEST     
 2618              	/* compiled string address is 2 levels deep */
 2619 45d4 A1310000 		_ADR	RFROM	// { -- a1 }
 2620 45d8 A1310000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2621 45dc 99320000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2622 45e0 49380000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2623 45e4 D5330000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2624 45e8 293E0000 		_ADR	ALGND	//  end of string
 2625              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2626 45ec 05320000 		_ADR	TOR		//  address after string { -- a1 a2 }
ARM GAS  forth.s 			page 163


 2627 45f0 A9320000 		_ADR	SWAP	//  count tugged
 2628 45f4 05320000 		_ADR	TOR     //  ( -- a2) is string address
 2629 45f8 49380000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2630 45fc BB2E0000 		_UNNEST
 2631              	
 2632              	/******************************************
 2633              	    $"|	( -- a u )
 2634              	 	Run time routine compiled by _". 
 2635              		Return address of a compiled string.
 2636              	hidden word used by compiler
 2637              	*****************************************/
 2638              	STRQP:
 2639 4600 504700BF 		_NEST
 2640 4604 D1450000 		_ADR	DOSTR
 2641 4608 BB2E0000 		_UNNEST			// force a call to dostr
 2642              	
 2643              	
 2644              	/**********************
 2645              	    ."|	( -- )
 2646              	 	Run time routine of ." 
 2647              		Output a compiled string.
 2648              	hidden word used by compiler
 2649              	*****************************/
 2650              	DOTQP:
 2651 460c 504700BF 		_NEST
 2652 4610 D1450000 		_ADR	DOSTR
 2653 4614 7D450000 		_ADR	TYPEE 
 2654 4618 BB2E0000 		_UNNEST
 2655              	
 2656              	/*************************
 2657              		LPAD  ( n+ -- )
 2658              		emit n spaceS + 
 2659              		base character  
 2660              		16 -> $
 2661              		 2 -> %
 2662              		 other -> none 
 2663              	*************************/
 2664              	LPAD:
 2665 461c 504700BF 		_NEST 
 2666 4620 11390000 		_ADR BCHR 
 2667 4624 75310000 		_ADR  AT 
 2668 4628 1F310000 		_QBRAN 3f 
 2668      94460000 
 2669 4630 F9380000 		_ADR BASE 
 2670 4634 75310000 		_ADR AT 
 2671 4638 99320000 		_ADR DUPP 
 2672 463c DF300000 		_DOLIT 16
 2672      10000000 
 2673 4644 1D370000 		_ADR EQUAL 
 2674 4648 1F310000 		_QBRAN 1f
 2674      70460000 
 2675 4650 79320000 		_ADR DROP 
 2676 4654 DF300000 		_DOLIT '$'
 2676      24000000 
 2677 465c A9320000 	0:	_ADR  SWAP 
 2678 4660 41340000 		_ADR  ONEM 
 2679 4664 45450000 		_ADR  SPACS 
ARM GAS  forth.s 			page 164


 2680 4668 7D2F0000 		_ADR  EMIT 
 2681 466c BB2E0000 		_UNNEST 
 2682 4670 DF300000 	1:  _DOLIT 2 
 2682      02000000 
 2683 4678 1D370000 		_ADR EQUAL 
 2684 467c 1F310000 		_QBRAN 3f
 2684      94460000 
 2685 4684 DF300000 		_DOLIT '%'
 2685      25000000 
 2686 468c 47310000 		_BRAN 0b   	
 2686      5C460000 
 2687 4694 45450000 	3:	_ADR  SPACS 
 2688 4698 BB2E0000 		_UNNEST 
 2689              	
 2690              	
 2691              	/******************************
 2692              	    .R	  ( n +n -- )
 2693              	 	Display an integer in a 
 2694              		field of n columns, 
 2695              		right justified.
 2696              	*******************************/
 2697 469c AC450000 		_HEADER DOTR,2,".R"
 2697      022E5200 
 2698 46a4 504700BF 		_NEST
 2699 46a8 05320000 		_ADR	TOR
 2700 46ac 293C0000 		_ADR    STOD 
 2701 46b0 8D470000 		_ADR	DTOA 
 2702 46b4 A1310000 		_ADR	RFROM
 2703 46b8 D9320000 		_ADR	OVER
 2704 46bc E5330000 		_ADR	SUBB
 2705 46c0 1D460000 		_ADR    LPAD  
 2706 46c4 7D450000 		_ADR	TYPEE
 2707 46c8 BB2E0000 		_UNNEST
 2708              	
 2709              	
 2710              	/*************************
 2711              	    U.R	 ( u +n -- )
 2712              	 	Display an unsigned 
 2713              		integer in n column, 
 2714              		right justified.
 2715              	***************************/
 2716 46cc A0460000 		_HEADER UDOTR,3,"U.R"
 2716      03552E52 
 2717 46d4 504700BF 		_NEST
 2718 46d8 05320000 		_ADR    TOR 
 2719 46dc DF300000 		_DOLIT  0
 2719      00000000 
 2720 46e4 8D470000 		_ADR    DTOA 
 2721 46e8 A1310000 		_ADR	RFROM
 2722 46ec D9320000 		_ADR	OVER
 2723 46f0 E5330000 		_ADR	SUBB
 2724 46f4 1D460000 		_ADR    LPAD  
 2725 46f8 7D450000 		_ADR	TYPEE
 2726 46fc BB2E0000 		_UNNEST
 2727              	
 2728              	
 2729              	/************************
ARM GAS  forth.s 			page 165


 2730              	    U.	  ( u -- )
 2731              	 	Display an unsigned 
 2732              		integer in free format.
 2733              	***************************/
 2734 4700 D0460000 		_HEADER UDOT,2,"U."
 2734      02552E00 
 2735 4708 504700BF 		_NEST
 2736 470c DF300000 		_DOLIT  0 
 2736      00000000 
 2737 4714 39410000 		_ADR	BDIGS
 2738 4718 DD410000 		_ADR	DIGS
 2739 471c 39420000 		_ADR	EDIGS
 2740 4720 DF300000 		_DOLIT  1 
 2740      01000000 
 2741 4728 1D460000 		_ADR	LPAD  
 2742 472c 7D450000 		_ADR	TYPEE
 2743 4730 BB2E0000 		_UNNEST
 2744              	
 2745              	
 2746              	/************************
 2747              	    .	   ( w -- )
 2748              	 	Display an integer 
 2749              		in free format, 
 2750              		preceeded by a space.
 2751              	**************************/
 2752 4734 04470000 		_HEADER DOT,1,"."
 2752      012E00BF 
 2753 473c 504700BF 		_NEST
 2754 4740 29450000 		_ADR    SPACE 
 2755 4744 F9380000 		_ADR	BASE
 2756 4748 75310000 		_ADR	AT
 2757 474c DF300000 	1:	_DOLIT  10
 2757      0A000000 
 2758 4754 7D330000 		_ADR	XORR	// decimal base?
 2759 4758 1F310000 		_QBRAN	DOT1
 2759      68470000 
 2760 4760 09470000 		_ADR	UDOT    // no,display unsigned
 2761 4764 BB2E0000 		_UNNEST			
 2762              	DOT1:
 2763 4768 293C0000 		_ADR    STOD 
 2764 476c 8D470000 	    _ADR	DTOA
 2765 4770 DF300000 		_DOLIT  1 
 2765      01000000 
 2766 4778 1D460000 		_ADR	LPAD  
 2767 477c 7D450000 	1:	_ADR	TYPEE
 2768 4780 BB2E0000 		_UNNEST			// yes, display signed
 2769              	
 2770              	
 2771              	/*************************
 2772              	  D>A ( d -- p u )
 2773              	  convert double integer to 
 2774              	  ASCII string in pad  
 2775              	input:
 2776              		d    int64 to convert 
 2777              	output:
 2778              		p     pointer to string  
 2779              		u     string length 
ARM GAS  forth.s 			page 166


 2780              	**************************/
 2781 4784 38470000 		_HEADER DTOA,3,"D>A" 
 2781      03443E41 
 2782 478c 504700BF 		_NEST
 2783 4790 99320000 	    _ADR DUPP 
 2784 4794 05320000 		_ADR TOR 
 2785 4798 01360000 		_ADR DABS 
 2786 479c 39410000 		_ADR BDIGS
 2787 47a0 DD410000 		_ADR DIGS 
 2788 47a4 A1310000 		_ADR RFROM 
 2789 47a8 11420000 		_ADR SIGN  
 2790 47ac 39420000 		_ADR EDIGS 
 2791 47b0 BB2E0000 		_UNNEST 
 2792              	
 2793              	
 2794              	/*************************
 2795              	   D. ( d -- )
 2796              	   display double integer 
 2797              	**************************/
 2798 47b4 88470000 		_HEADER DDOT,2,"D."
 2798      02442E00 
 2799 47bc 504700BF 		_NEST
 2800 47c0 29450000 		_ADR SPACE 
 2801 47c4 8D470000 		_ADR DTOA 
 2802 47c8 DF300000 		_DOLIT 1
 2802      01000000 
 2803 47d0 1D460000 		_ADR LPAD 
 2804 47d4 7D450000 		_ADR TYPEE
 2805 47d8 BB2E0000 		_UNNEST 
 2806              	
 2807              	/**************************
 2808              		UD. ( d -- )
 2809              		display unsigned double
 2810              	**************************/
 2811 47dc B8470000 		_HEADER UDDOT,3,"UD."
 2811      0355442E 
 2812 47e4 504700BF 		_NEST
 2813 47e8 29450000 		_ADR SPACE 
 2814 47ec 39410000 		_ADR BDIGS
 2815 47f0 DD410000 		_ADR DIGS 
 2816 47f4 39420000 		_ADR EDIGS 
 2817 47f8 DF300000 		_DOLIT 1
 2817      01000000 
 2818 4800 1D460000 		_ADR LPAD 
 2819 4804 7D450000 		_ADR TYPEE
 2820 4808 BB2E0000 		_UNNEST 
 2821              	
 2822              	
 2823              	
 2824              	/***********************
 2825              		H. ( w -- )
 2826              		display integer 
 2827              		in hexadecimal 
 2828              	*********************/
 2829 480c E0470000 		_HEADER HDOT,2,"H."
 2829      02482E00 
 2830 4814 504700BF 		_NEST 
ARM GAS  forth.s 			page 167


 2831 4818 F9380000 		_ADR BASE
 2832 481c 75310000 		_ADR AT 
 2833 4820 A9320000 		_ADR SWAP
 2834 4824 8D420000 		_ADR HEX
 2835 4828 DF300000 		_DOLIT 0 
 2835      00000000 
 2836 4830 39410000 		_ADR BDIGS
 2837 4834 DD410000 		_ADR DIGS
 2838 4838 39420000 		_ADR EDIGS
 2839 483c 29450000 		_ADR SPACE
 2840 4840 DF300000 		_DOLIT '$'
 2840      24000000 
 2841 4848 7D2F0000 		_ADR EMIT 
 2842 484c 7D450000 		_ADR TYPEE
 2843 4850 F9380000 		_ADR BASE
 2844 4854 61310000 		_ADR STORE  
 2845 4858 BB2E0000 		_UNNEST 
 2846              	
 2847              	
 2848              	/***********************
 2849              	    ?	   ( a -- )
 2850              	 	Display the contents
 2851              		in a memory cell.
 2852              	*************************/
 2853 485c 10480000 		_HEADER QUEST,1,"?"
 2853      013F00BF 
 2854 4864 504700BF 		_NEST
 2855 4868 75310000 		_ADR	AT
 2856 486c 3D470000 		_ADR	DOT
 2857 4870 BB2E0000 		_UNNEST
 2858              	
 2859              	/**************
 2860              	  Parsing
 2861              	***************/
 2862              	
 2863              	/*********************************************
 2864              	    parse	( b u c -- b u delta //  string> )
 2865              	 	Scan word delimited by c. 
 2866              		Return found string and its offset.
 2867              	hidden word used by PARSE
 2868              	**********************************************/
 2869              	PARS:
 2870 4874 504700BF 		_NEST
 2871 4878 1D390000 		_ADR	TEMP
 2872 487c 61310000 		_ADR	STORE
 2873 4880 D9320000 		_ADR	OVER
 2874 4884 05320000 		_ADR	TOR
 2875 4888 99320000 		_ADR	DUPP
 2876 488c 1F310000 		_QBRAN	PARS8
 2876      88490000 
 2877 4894 41340000 		_ADR	ONEM
 2878 4898 1D390000 		_ADR	TEMP
 2879 489c 75310000 		_ADR	AT
 2880 48a0 91340000 		_ADR	BLANK
 2881 48a4 1D370000 		_ADR	EQUAL
 2882 48a8 1F310000 		_QBRAN	PARS3
 2882      FC480000 
ARM GAS  forth.s 			page 168


 2883 48b0 05320000 		_ADR	TOR
 2884              	PARS1:
 2885 48b4 91340000 		_ADR	BLANK
 2886 48b8 D9320000 		_ADR	OVER
 2887 48bc 95310000 		_ADR	CAT	 // skip leading blanks 
 2888 48c0 E5330000 		_ADR	SUBB
 2889 48c4 09330000 		_ADR	ZLESS
 2890 48c8 69360000 		_ADR	INVER
 2891 48cc 1F310000 		_QBRAN	PARS2
 2891      F8480000 
 2892 48d4 31340000 		_ADR	ONEP
 2893 48d8 01310000 		_DONXT	PARS1
 2893      B4480000 
 2894 48e0 A1310000 		_ADR	RFROM
 2895 48e4 79320000 		_ADR	DROP
 2896 48e8 DF300000 		_DOLIT	0
 2896      00000000 
 2897 48f0 99320000 		_ADR	DUPP
 2898 48f4 BB2E0000 		_UNNEST
 2899              	PARS2:
 2900 48f8 A1310000 		_ADR	RFROM
 2901              	PARS3:
 2902 48fc D9320000 		_ADR	OVER
 2903 4900 A9320000 		_ADR	SWAP
 2904 4904 05320000 		_ADR	TOR
 2905              	PARS4:
 2906 4908 1D390000 		_ADR	TEMP
 2907 490c 75310000 		_ADR	AT
 2908 4910 D9320000 		_ADR	OVER
 2909 4914 95310000 		_ADR	CAT
 2910 4918 E5330000 		_ADR	SUBB // scan for delimiter
 2911 491c 1D390000 		_ADR	TEMP
 2912 4920 75310000 		_ADR	AT
 2913 4924 91340000 		_ADR	BLANK
 2914 4928 1D370000 		_ADR	EQUAL
 2915 492c 1F310000 		_QBRAN	PARS5
 2915      38490000 
 2916 4934 09330000 		_ADR	ZLESS
 2917              	PARS5:
 2918 4938 1F310000 		_QBRAN	PARS6
 2918      5C490000 
 2919 4940 31340000 		_ADR	ONEP
 2920 4944 01310000 		_DONXT	PARS4
 2920      08490000 
 2921 494c 99320000 		_ADR	DUPP
 2922 4950 05320000 		_ADR	TOR
 2923 4954 47310000 		_BRAN	PARS7
 2923      70490000 
 2924              	PARS6:
 2925 495c A1310000 		_ADR	RFROM
 2926 4960 79320000 		_ADR	DROP
 2927 4964 99320000 		_ADR	DUPP
 2928 4968 31340000 		_ADR	ONEP
 2929 496c 05320000 		_ADR	TOR
 2930              	PARS7:
 2931 4970 D9320000 		_ADR	OVER
 2932 4974 E5330000 		_ADR	SUBB
ARM GAS  forth.s 			page 169


 2933 4978 A1310000 		_ADR	RFROM
 2934 497c A1310000 		_ADR	RFROM
 2935 4980 E5330000 		_ADR	SUBB
 2936 4984 BB2E0000 		_UNNEST
 2937              	PARS8:
 2938 4988 D9320000 		_ADR	OVER
 2939 498c A1310000 		_ADR	RFROM
 2940 4990 E5330000 		_ADR	SUBB
 2941 4994 BB2E0000 		_UNNEST
 2942              	
 2943              	/************************************
 2944              	 CORE EXTENSION 
 2945              	    PARSE	( c -- b u //  string> )
 2946              	 	Scan input stream and return 
 2947              		counted string delimited by c.
 2948              	************************************/
 2949 4998 60480000 		_HEADER PARSE,5,"PARSE"
 2949      05504152 
 2949      534500BF 
 2950 49a4 504700BF 		_NEST
 2951 49a8 05320000 		_ADR	TOR
 2952 49ac 213F0000 		_ADR	TIB
 2953 49b0 49390000 		_ADR	INN
 2954 49b4 75310000 		_ADR	AT
 2955 49b8 D5330000 		_ADR	PLUS			// current input buffer pointer
 2956 49bc 61390000 		_ADR	NTIB
 2957 49c0 75310000 		_ADR	AT
 2958 49c4 49390000 		_ADR	INN
 2959 49c8 75310000 		_ADR	AT
 2960 49cc E5330000 		_ADR	SUBB			// remaining count
 2961 49d0 A1310000 		_ADR	RFROM
 2962 49d4 75480000 		_ADR	PARS
 2963 49d8 49390000 		_ADR	INN
 2964 49dc F5370000 		_ADR	PSTOR
 2965 49e0 BB2E0000 		_UNNEST
 2966              	
 2967              	/************************************
 2968              	 CORE EXTENSION 
 2969              		PARSE-NAME ( -- b u )
 2970              		space delimited parse input 
 2971              		buffer 
 2972              	*************************************/
 2973 49e4 9C490000 		_HEADER PARSENAME,10,"PARSE-NAME"
 2973      0A504152 
 2973      53452D4E 
 2973      414D4500 
 2974 49f4 504700BF 		_NEST 
 2975 49f8 91340000 		_ADR	BLANK  
 2976 49fc A5490000 		_ADR	PARSE 
 2977 4a00 BB2E0000 		_UNNEST 
 2978              	
 2979              	
 2980              	/*******************************
 2981              	    .(	  ( -- )
 2982              	 	Output following string 
 2983              		up to next ) .
 2984              	******************************/
ARM GAS  forth.s 			page 170


 2985 4a04 E8490000 		_HEADER DOTPR,IMEDD+2,".("
 2985      822E2800 
 2986 4a0c 504700BF 		_NEST
 2987 4a10 DF300000 		_DOLIT	')'
 2987      29000000 
 2988 4a18 A5490000 		_ADR	PARSE
 2989 4a1c 7D450000 		_ADR	TYPEE
 2990 4a20 BB2E0000 		_UNNEST
 2991              	
 2992              	/************************
 2993              	    (	   ( -- )
 2994              	 	Ignore following 
 2995              		string up to next )
 2996              		A comment.
 2997              	************************/
 2998 4a24 084A0000 		_HEADER PAREN,IMEDD+1,"("
 2998      812800BF 
 2999 4a2c 504700BF 		_NEST
 3000 4a30 DF300000 		_DOLIT	')'
 3000      29000000 
 3001 4a38 A5490000 		_ADR	PARSE
 3002 4a3c A5350000 		_ADR	DDROP
 3003 4a40 BB2E0000 		_UNNEST
 3004              	
 3005              	/*******************
 3006              	    \	   ( -- )
 3007              	 	Ignore following 
 3008              		text till the 
 3009              		end of line.
 3010              	********************/
 3011 4a44 284A0000 		_HEADER BKSLA,IMEDD+1,"\\"
 3011      815C00BF 
 3012 4a4c 504700BF 		_NEST
 3013 4a50 61390000 		_ADR	NTIB
 3014 4a54 75310000 		_ADR	AT
 3015 4a58 49390000 		_ADR	INN
 3016 4a5c 61310000 		_ADR	STORE
 3017 4a60 BB2E0000 		_UNNEST
 3018              	
 3019              	/******************************
 3020              	    CHAR	( -- c )
 3021              	 	Parse next word and
 3022              		return its first character.
 3023              	*******************************/
 3024 4a64 484A0000 		_HEADER CHAR,4,"CHAR"
 3024      04434841 
 3024      520000BF 
 3025 4a70 504700BF 		_NEST
 3026 4a74 91340000 		_ADR	BLANK
 3027 4a78 A5490000 		_ADR	PARSE
 3028 4a7c 79320000 		_ADR	DROP
 3029 4a80 95310000 		_ADR	CAT
 3030 4a84 BB2E0000 		_UNNEST
 3031              	
 3032              	/**********************************
 3033              		[CHAR] ( -- c )
 3034              		immediate version of CHAR 
ARM GAS  forth.s 			page 171


 3035              	**********************************/
 3036 4a88 684A0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 3036      C65B4348 
 3036      41525D00 
 3037 4a94 504700BF 		_NEST 
 3038 4a98 714A0000 		_ADR CHAR
 3039 4a9c 0D540000 		_ADR LITER 
 3040 4aa0 BB2E0000 		_UNNEST 
 3041              	
 3042              	/**********************************
 3043              	    WORD	( c -- a //  string> )
 3044              	 	Parse a word from input stream
 3045              		and copy it to code dictionary.
 3046              	***********************************/
 3047 4aa4 8C4A0000 		_HEADER WORDD,4,"WORD"
 3047      04574F52 
 3047      440000BF 
 3048 4ab0 504700BF 		_NEST
 3049 4ab4 A5490000 		_ADR	PARSE
 3050 4ab8 E93E0000 		_ADR	HERE
 3051 4abc 71340000 		_ADR	CELLP
 3052 4ac0 79400000 		_ADR	PACKS
 3053 4ac4 BB2E0000 		_UNNEST
 3054              	
 3055              	/********************************
 3056              	    TOKEN	( -- a //  string> )
 3057              	 	Parse a word from input 
 3058              		stream and copy it to 
 3059              		name dictionary.
 3060              	*********************************/
 3061 4ac8 A84A0000 		_HEADER TOKEN,5,"TOKEN"
 3061      05544F4B 
 3061      454E00BF 
 3062 4ad4 504700BF 		_NEST
 3063 4ad8 91340000 		_ADR	BLANK
 3064 4adc B14A0000 		_ADR	WORDD
 3065 4ae0 D54C0000 		_ADR	UPPER 
 3066 4ae4 BB2E0000 		_UNNEST
 3067              	
 3068              	/**********************
 3069              	  Dictionary search
 3070              	***********************/
 3071              	
 3072              	/*************************
 3073              	    >CFA	( nfa -- cfa )
 3074              	 	Return a code field address
 3075              		given a name field address.
 3076              	**************************/
 3077 4ae8 CC4A0000 		_HEADER TOCFA,4,">CFA"
 3077      043E4346 
 3077      410000BF 
 3078 4af4 504700BF 		_NEST
 3079 4af8 49380000 		_ADR	COUNT
 3080 4afc DF300000 		_DOLIT	0x1F
 3080      1F000000 
 3081 4b04 55330000 		_ADR	ANDD
 3082 4b08 D5330000 		_ADR	PLUS
ARM GAS  forth.s 			page 172


 3083 4b0c 293E0000 		_ADR	ALGND
 3084 4b10 DF300000 		_DOLIT  1
 3084      01000000 
 3085 4b18 69330000 		_ADR    ORR    // set thum bit 
 3086 4b1c BB2E0000 		_UNNEST
 3087              	
 3088              	/***************************************
 3089              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 3090              	 	Compare u bytes in two strings. 
 3091              		Return 0 if identical.
 3092              	
 3093              	  Picatout 2020-12-01, 
 3094              	    Because of problem with .align 
 3095              		directive that doesn't fill 
 3096              		with zero's I had to change 
 3097              		the "SAME?" and "SEARCH" 
 3098              	 	words  to do a byte by byte comparison. 
 3099              	****************************************/
 3100 4b20 EC4A0000 		_HEADER SAMEQ,5,"SAME?"
 3100      0553414D 
 3100      453F00BF 
 3101 4b2c 504700BF 		_NEST
 3102 4b30 05320000 		_ADR	TOR
 3103 4b34 47310000 		_BRAN	SAME2
 3103      784B0000 
 3104              	SAME1:
 3105 4b3c D9320000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 3106 4b40 D5310000 		_ADR	RAT   // a1 a2 a1 u 
 3107 4b44 D5330000 		_ADR	PLUS  // a1 a2 a1+u 
 3108 4b48 95310000 		_ADR	CAT	   // a1 a2 c1    		
 3109 4b4c D9320000 		_ADR	OVER  // a1 a2 c1 a2 
 3110 4b50 D5310000 		_ADR	RAT    
 3111 4b54 D5330000 		_ADR	PLUS    
 3112 4b58 95310000 		_ADR	CAT	  // a1 a2 c1 c2
 3113 4b5c E5330000 		_ADR	SUBB  
 3114 4b60 E5340000 		_ADR	QDUP
 3115 4b64 1F310000 		_QBRAN	SAME2
 3115      784B0000 
 3116 4b6c A1310000 		_ADR	RFROM
 3117 4b70 79320000 		_ADR	DROP
 3118 4b74 BB2E0000 		_UNNEST	// strings not equal
 3119              	SAME2:
 3120 4b78 01310000 		_DONXT	SAME1
 3120      3C4B0000 
 3121 4b80 DF300000 		_DOLIT	0
 3121      00000000 
 3122 4b88 BB2E0000 		_UNNEST	// strings equal
 3123              	
 3124              	/***********************************
 3125              	    SEARCH	( a na -- ca na | a F )
 3126              	 	Search a vocabulary for a string.
 3127              		Return ca and na if succeeded.
 3128              	hidden word used by NAME?
 3129              	
 3130              	  Picatout 2020-12-01,  
 3131              		 Modified from original. 
 3132              	   See comment for word "SAME?" 
ARM GAS  forth.s 			page 173


 3133              	************************************/
 3134              	SEARCH:
 3135 4b8c 504700BF 		_NEST
 3136 4b90 A9320000 		_ADR	SWAP			// na a	
 3137 4b94 49380000 		_ADR	COUNT			// na a+1 count
 3138 4b98 99320000 		_ADR	DUPP 
 3139 4b9c 1D390000 		_ADR	TEMP
 3140 4ba0 61310000 		_ADR	STORE			// na a+1 count 
 3141 4ba4 05320000 		_ADR  TOR		// na a+1  R: count  
 3142 4ba8 A9320000 		_ADR	SWAP			// a+1 na
 3143              	SEARCH1:
 3144 4bac 99320000 		_ADR	DUPP			// a+1 na na
 3145 4bb0 1F310000 		_QBRAN	SEARCH6	// end of vocabulary
 3145      044C0000 
 3146 4bb8 99320000 		_ADR	DUPP			// a+1 na na
 3147 4bbc 95310000 		_ADR	CAT			// a+1 na name1
 3148 4bc0 DF300000 		_DOLIT	MASKK
 3148      1FFFFFFF 
 3149 4bc8 55330000 		_ADR	ANDD
 3150 4bcc D5310000 		_ADR	RAT			// a+1 na name1 count 
 3151 4bd0 7D330000 		_ADR	XORR			// a+1 na,  same length?
 3152 4bd4 1F310000 		_QBRAN	SEARCH2
 3152      EC4B0000 
 3153 4bdc 81340000 		_ADR	CELLM			// a+1 la
 3154 4be0 75310000 		_ADR	AT			// a+1 next_na
 3155 4be4 47310000 		_BRAN	SEARCH1			// try next word
 3155      AC4B0000 
 3156              	SEARCH2:   
 3157 4bec 31340000 		_ADR	ONEP			// a+1 na+1
 3158 4bf0 1D390000 		_ADR	TEMP
 3159 4bf4 75310000 		_ADR	AT			// a+1 na+1 count
 3160 4bf8 2D4B0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3161              	SEARCH3:	
 3162 4bfc 47310000 		_BRAN	SEARCH4
 3162      1C4C0000 
 3163              	SEARCH6:	
 3164 4c04 A1310000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3165 4c08 79320000 		_ADR	DROP			// a+1 0
 3166 4c0c A9320000 		_ADR	SWAP			// 0 a+1
 3167 4c10 41340000 		_ADR	ONEM			// 0 a
 3168 4c14 A9320000 		_ADR	SWAP			// a 0 
 3169 4c18 BB2E0000 		_UNNEST			// return without a match
 3170              	SEARCH4:	
 3171 4c1c 1F310000 		_QBRAN	SEARCH5			// a+1 na+1
 3171      384C0000 
 3172 4c24 41340000 		_ADR	ONEM			// a+1 na
 3173 4c28 81340000 		_ADR	CELLM			// a+4 la
 3174 4c2c 75310000 		_ADR	AT			// a+1 next_na
 3175 4c30 47310000 		_BRAN	SEARCH1			// compare next name
 3175      AC4B0000 
 3176              	SEARCH5:	
 3177 4c38 A1310000 		_ADR	RFROM			// a+1 na+1 count
 3178 4c3c 79320000 		_ADR	DROP			// a+1 na+1
 3179 4c40 A9320000 		_ADR	SWAP			// na+1 a+1
 3180 4c44 79320000 		_ADR	DROP			// na+1
 3181 4c48 41340000 		_ADR	ONEM			// na
 3182 4c4c 99320000 		_ADR	DUPP			// na na
ARM GAS  forth.s 			page 174


 3183 4c50 F54A0000 		_ADR	TOCFA			// na cfa
 3184 4c54 A9320000 		_ADR	SWAP			// cfa na
 3185 4c58 BB2E0000 		_UNNEST			//  return with a match
 3186              	
 3187              	/********************************
 3188              	    NAME?	( a -- ca na | a F )
 3189              	 	Search all context vocabularies 
 3190              		for a string.
 3191              	***********************************/
 3192 4c5c 244B0000 		_HEADER NAMEQ,5,"NAME?"
 3192      054E414D 
 3192      453F00BF 
 3193 4c68 504700BF 		_NEST
 3194 4c6c A5390000 		_ADR	CNTXT
 3195 4c70 75310000 		_ADR	AT
 3196 4c74 8D4B0000 		_ADR	SEARCH
 3197 4c78 BB2E0000 		_UNNEST
 3198              	
 3199              	/********************
 3200              	  console input
 3201              	********************/
 3202              	
 3203              	/****************************
 3204              		ASCIZ ( a -- a+ )
 3205              		convert counted string to 
 3206              		null terminated string 
 3207              		in pad.
 3208              	*****************************/
 3209 4c7c 604C0000 		_HEADER ASCIZ,5,"ASCIZ" 
 3209      05415343 
 3209      495A00BF 
 3210 4c88 504700BF 		_NEST 
 3211 4c8c 49380000 		_ADR COUNT
 3212 4c90 99320000 		_ADR DUPP
 3213 4c94 05320000 		_ADR TOR 
 3214 4c98 013F0000 		_ADR PAD 
 3215 4c9c A9320000 		_ADR SWAP
 3216 4ca0 D93F0000 		_ADR WMOVE  
 3217 4ca4 013F0000 		_ADR PAD 
 3218 4ca8 A1310000 		_ADR RFROM
 3219 4cac D5330000 		_ADR PLUS 
 3220 4cb0 DF300000 		_DOLIT 0 
 3220      00000000 
 3221 4cb8 A9320000 		_ADR SWAP  
 3222 4cbc 81310000 		_ADR CSTOR
 3223 4cc0 013F0000 		_ADR PAD   
 3224 4cc4 BB2E0000 		_UNNEST 
 3225              	
 3226              	/***********************
 3227              		UPPER (cstring -- cstring )
 3228              		convert to upper case in situ
 3229              	*******************************/
 3230 4cc8 804C0000 		_HEADER UPPER,5,"UPPER"
 3230      05555050 
 3230      455200BF 
 3231 4cd4 504700BF 		_NEST 
 3232 4cd8 99320000 		_ADR DUPP 
ARM GAS  forth.s 			page 175


 3233 4cdc 05320000 		_ADR TOR 
 3234 4ce0 49380000 		_ADR COUNT
 3235 4ce4 DF300000 		_DOLIT 0x1f
 3235      1F000000 
 3236 4cec 55330000 		_ADR ANDD
 3237 4cf0 05320000 		_ADR TOR 
 3238 4cf4 47310000 		_BRAN 3f
 3238      484D0000 
 3239 4cfc 99320000 	1:  _ADR DUPP 
 3240 4d00 49380000 		_ADR COUNT 
 3241 4d04 99320000 		_ADR DUPP 
 3242 4d08 DF300000 		_DOLIT 'a'-1
 3242      60000000 
 3243 4d10 A9370000 		_ADR GREAT
 3244 4d14 1F310000 		_QBRAN 2f 
 3244      404D0000 
 3245 4d1c 99320000 		_ADR DUPP 
 3246 4d20 DF300000 		_DOLIT 'z'+1 
 3246      7B000000 
 3247 4d28 75370000 		_ADR LESS 
 3248 4d2c 1F310000 		_QBRAN 2f 
 3248      404D0000 
 3249 4d34 DF300000 		_DOLIT 0x5f  
 3249      5F000000 
 3250 4d3c 55330000 		_ADR ANDD
 3251 4d40 7D350000 	2:	_ADR ROT
 3252 4d44 81310000 		_ADR CSTOR
 3253 4d48 01310000 	3:  _DONXT 1b
 3253      FC4C0000 
 3254 4d50 79320000 		_ADR DROP 
 3255 4d54 A1310000 		_ADR RFROM
 3256 4d58 BB2E0000 		_UNNEST 
 3257              	
 3258              	/**************************************
 3259              	   BKSP  ( bot eot cur -- bot eot cur )
 3260              	   Move cursor left by one character.
 3261              	hidden word used by KTAP
 3262              	***************************************/
 3263              	BKSP:
 3264 4d5c 504700BF 		_NEST
 3265 4d60 05320000 		_ADR	TOR
 3266 4d64 D9320000 		_ADR	OVER
 3267 4d68 A1310000 		_ADR	RFROM
 3268 4d6c A9320000 		_ADR	SWAP
 3269 4d70 D9320000 		_ADR	OVER
 3270 4d74 7D330000 		_ADR	XORR
 3271 4d78 1F310000 		_QBRAN	BACK1
 3271      A44D0000 
 3272 4d80 DF300000 		_DOLIT	BKSPP
 3272      08000000 
 3273 4d88 7D2F0000 		_ADR	EMIT
 3274 4d8c 41340000 		_ADR	ONEM
 3275 4d90 91340000 		_ADR	BLANK
 3276 4d94 7D2F0000 		_ADR	EMIT
 3277 4d98 DF300000 		_DOLIT	BKSPP
 3277      08000000 
 3278 4da0 7D2F0000 		_ADR	EMIT
ARM GAS  forth.s 			page 176


 3279              	BACK1:
 3280 4da4 BB2E0000 		  _UNNEST
 3281              	
 3282              	/****************************************
 3283              	   TAP	 ( bot eot cur c -- bot eot cur )
 3284              	   Accept and echo the key stroke 
 3285              	   and bump the cursor.
 3286              	hidden word used by KTAP 
 3287              	****************************************/
 3288              	TAP:
 3289 4da8 504700BF 		_NEST
 3290 4dac 99320000 		_ADR	DUPP
 3291 4db0 7D2F0000 		_ADR	EMIT
 3292 4db4 D9320000 		_ADR	OVER
 3293 4db8 81310000 		_ADR	CSTOR
 3294 4dbc 31340000 		_ADR	ONEP
 3295 4dc0 BB2E0000 		_UNNEST
 3296              	
 3297              	
 3298              	/*******************************************
 3299              	    kTAP	( bot eot cur c -- bot eot cur )
 3300              	 	Process a key stroke, CR or backspace.
 3301              	hidden word used by ACCEPT 
 3302              	*******************************************/
 3303              	KTAP:
 3304              	TTAP:
 3305 4dc4 504700BF 		_NEST
 3306 4dc8 99320000 		_ADR	DUPP
 3307 4dcc DF300000 		_DOLIT	CRR
 3307      0D000000 
 3308 4dd4 7D330000 		_ADR	XORR
 3309 4dd8 1F310000 		_QBRAN  KTAP2
 3309      084E0000 
 3310 4de0 DF300000 		_DOLIT	BKSPP
 3310      08000000 
 3311 4de8 7D330000 		_ADR	XORR
 3312 4dec 1F310000 		_QBRAN	KTAP1
 3312      004E0000 
 3313 4df4 91340000 		_ADR	BLANK
 3314 4df8 A94D0000 		_ADR	TAP
 3315 4dfc BB2E0000 		_UNNEST
 3316              	//	.word	0			// patch
 3317              	KTAP1:
 3318 4e00 5D4D0000 		_ADR	BKSP
 3319 4e04 BB2E0000 		_UNNEST
 3320              	KTAP2:
 3321 4e08 79320000 		_ADR	DROP
 3322 4e0c A9320000 		_ADR	SWAP
 3323 4e10 79320000 		_ADR	DROP
 3324 4e14 99320000 		_ADR	DUPP
 3325 4e18 BB2E0000 		_UNNEST
 3326              	
 3327              	/************************************
 3328              	    ACCEPT	( b u -- b u )
 3329              	 	Accept characters to input 
 3330              		buffer. Return with actual count.
 3331              	*************************************/
ARM GAS  forth.s 			page 177


 3332 4e1c CC4C0000 		_HEADER ACCEP,6,"ACCEPT"
 3332      06414343 
 3332      45505400 
 3333 4e28 504700BF 		_NEST
 3334 4e2c D9320000 		_ADR	OVER
 3335 4e30 D5330000 		_ADR	PLUS
 3336 4e34 D9320000 		_ADR	OVER
 3337              	ACCP1:
 3338 4e38 CD350000 		_ADR	DDUP
 3339 4e3c 7D330000 		_ADR	XORR
 3340 4e40 1F310000 		_QBRAN	ACCP4
 3340      804E0000 
 3341 4e48 592F0000 		_ADR	KEY
 3342 4e4c 99320000 		_ADR	DUPP
 3343 4e50 91340000 		_ADR	BLANK
 3344 4e54 DF300000 		_DOLIT 127
 3344      7F000000 
 3345 4e5c B93A0000 		_ADR	WITHI
 3346 4e60 1F310000 		_QBRAN	ACCP2
 3346      744E0000 
 3347 4e68 A94D0000 		_ADR	TAP
 3348 4e6c 47310000 		_BRAN	ACCP3
 3348      784E0000 
 3349              	ACCP2:
 3350 4e74 C54D0000 		_ADR	KTAP
 3351              	ACCP3:	  
 3352 4e78 47310000 		_BRAN	ACCP1
 3352      384E0000 
 3353              	ACCP4:
 3354 4e80 79320000 		_ADR	DROP
 3355 4e84 D9320000 		_ADR	OVER
 3356 4e88 E5330000 		_ADR	SUBB
 3357 4e8c BB2E0000 		_UNNEST
 3358              	
 3359              	/*****************************
 3360              	    QUERY	( -- )
 3361              	 	Accept input stream 
 3362              		to terminal input buffer.
 3363              	******************************/
 3364 4e90 204E0000 		_HEADER QUERY,5,"QUERY"
 3364      05515545 
 3364      525900BF 
 3365 4e9c 504700BF 		_NEST
 3366 4ea0 213F0000 		_ADR	TIB
 3367 4ea4 DF300000 		_DOLIT 80
 3367      50000000 
 3368 4eac 294E0000 		_ADR	ACCEP
 3369 4eb0 61390000 		_ADR	NTIB
 3370 4eb4 61310000 		_ADR	STORE
 3371 4eb8 79320000 		_ADR	DROP
 3372 4ebc DF300000 		_DOLIT	0
 3372      00000000 
 3373 4ec4 49390000 		_ADR	INN
 3374 4ec8 61310000 		_ADR	STORE
 3375 4ecc BB2E0000 		_UNNEST
 3376              	
 3377              	/*****************************
ARM GAS  forth.s 			page 178


 3378              	  CORE EXT 
 3379              	  REFILL ( -- )
 3380              	  if SOURCE-ID== 0 call QUERY 
 3381              	  and return TRUE 
 3382              	  if SOURCE-ID=1 return FALSE 
 3383              	******************************/
 3384 4ed0 944E0000 		_HEADER REFILL,6,"REFILL"
 3384      06524546 
 3384      494C4C00 
 3385 4edc 504700BF 		_NEST 
 3386 4ee0 393F0000 		_ADR	SOURCID 
 3387 4ee4 1F310000 		_QBRAN	1f
 3387      F44E0000 
 3388 4eec D5360000 		_ADR	FALSE 
 3389 4ef0 BB2E0000 		_UNNEST 
 3390 4ef4 9D4E0000 	1:  _ADR	QUERY 
 3391 4ef8 ED360000 		_ADR	TRUE 
 3392 4efc BB2E0000 		_UNNEST 
 3393              	
 3394              	/*****************************
 3395              	  CORE EXT 
 3396              		SAVE-INPUT ( -- n )
 3397              		if SOURCE-ID=0 STACK >IN @ 
 3398              		if SOURCE-ID=1 do nothing 
 3399              	*****************************/
 3400 4f00 D44E0000 		_HEADER SAVEINP,10,"SAVE-INPUT"
 3400      0A534156 
 3400      452D494E 
 3400      50555400 
 3401 4f10 504700BF 		_NEST 
 3402 4f14 393F0000 		_ADR SOURCID 
 3403 4f18 1F310000 		_QBRAN 1f 
 3403      244F0000 
 3404 4f20 BB2E0000 		_UNNEST 
 3405 4f24 49390000 	1:  _ADR	INN 
 3406 4f28 75310000 		_ADR	AT 
 3407 4f2c BB2E0000 		_UNNEST 
 3408              	
 3409              	/*****************************
 3410              	  CORE EXT 
 3411              		RESTORE-INPUT ( n -- flag )
 3412              		if SOURCE-ID=0 n -> >IN stack FALSE 
 3413              		if SOURCE-ID=1 stack TRUE 
 3414              	***************************************/
 3415 4f30 044F0000 		_HEADER RESTINP,13,"RESTORE-INPUT"
 3415      0D524553 
 3415      544F5245 
 3415      2D494E50 
 3415      555400BF 
 3416 4f44 504700BF 		_NEST 
 3417 4f48 393F0000 		_ADR	SOURCID 
 3418 4f4c 1F310000 		_QBRAN	1f
 3418      5C4F0000 
 3419 4f54 ED360000 		_ADR	TRUE 
 3420 4f58 BB2E0000 		_UNNEST 
 3421 4f5c 49390000 	1:  _ADR	INN  
 3422 4f60 61310000 		_ADR	STORE 
ARM GAS  forth.s 			page 179


 3423 4f64 D5360000 		_ADR	FALSE 
 3424 4f68 BB2E0000 		_UNNEST 
 3425              	
 3426              	
 3427              	/********************
 3428              	  Error handling
 3429              	********************/
 3430              	
 3431              	/*********************
 3432              	    ABORT	( a -- )
 3433              	 	Reset data stack 
 3434              		and jump to QUIT.
 3435              	**********************/
 3436 4f6c 344F0000 		_HEADER ABORT,5,"ABORT"
 3436      0541424F 
 3436      525400BF 
 3437 4f78 504700BF 		_NEST
 3438              	ABORT1: 
 3439 4f7c 85500000 		_ADR    LBRAC  
 3440 4f80 05520000 		_ADR	PRESE
 3441 4f84 DF300000 		_DOLIT  0 
 3441      00000000 
 3442 4f8c 99320000 		_ADR    DUPP 
 3443 4f90 DF300000 		_DOLIT  UPP+TOIN 
 3443      2C000020 
 3444 4f98 11380000 		_ADR    DSTOR 
 3445 4f9c DF300000 		_DOLIT  TIBB 
 3445      B0FE0120 
 3446 4fa4 DF300000 		_DOLIT  UPP+TIBUF  
 3446      34000020 
 3447 4fac 61310000 		_ADR    STORE 
 3448 4fb0 B1450000 		_ADR    CR 
 3449 4fb4 47310000 		_BRAN	QUIT
 3449      1C520000 
 3450              	
 3451              	
 3452              	/*******************************
 3453              		PRT_ABORT ( a -- )
 3454              	    print message and abort 
 3455              	input:
 3456              		a   address of counted string 	
 3457              	
 3458              	hidden word 
 3459              	*******************************/
 3460              	PRT_ABORT:
 3461 4fbc 504700BF 		_NEST 
 3462 4fc0 29450000 		_ADR SPACE 
 3463 4fc4 49380000 		_ADR COUNT 
 3464 4fc8 7D450000 		_ADR TYPEE 
 3465 4fcc 29450000 		_ADR  SPACE 
 3466 4fd0 DF300000 		_DOLIT '?'
 3466      3F000000 
 3467 4fd8 7D2F0000 		_ADR    EMIT 
 3468 4fdc B1450000 		_ADR    CR 
 3469 4fe0 47310000 		_BRAN   ABORT1 
 3469      7C4F0000 
 3470              	
ARM GAS  forth.s 			page 180


 3471              	
 3472              	
 3473              	
 3474              	/*******************************
 3475              	    _abort"	( f -- )
 3476              	 	Run time routine of ABORT"
 3477              		Abort with a message.
 3478              	hidden used by compiler 
 3479              	********************************/
 3480              	ABORQ:
 3481 4fe8 504700BF 		_NEST
 3482 4fec D1450000 		_ADR	DOSTR
 3483 4ff0 7D350000 		_ADR	ROT  
 3484 4ff4 1F310000 		_QBRAN	1f	// error flag
 3484      10500000 
 3485 4ffc 29450000 		_ADR    SPACE 
 3486 5000 7D450000 		_ADR    TYPEE
 3487 5004 B1450000 		_ADR    CR  
 3488 5008 47310000 		_BRAN   ABORT1
 3488      7C4F0000 
 3489              	1:
 3490 5010 A5350000 		_ADR	DDROP
 3491 5014 BB2E0000 		_UNNEST			// drop message
 3492              	
 3493              	
 3494              	/************************
 3495              	  The text interpreter
 3496              	************************/
 3497              	
 3498              	/***************************
 3499              	    $INTERPRET  ( a -- )
 3500              	 	Interpret a word. 
 3501              		If failed, try to 
 3502              		convert it to an integer.
 3503              	******************************/
 3504 5018 704F0000 		_HEADER INTER,10,"$INTERPRET"
 3504      0A24494E 
 3504      54455250 
 3504      52455400 
 3505 5028 504700BF 		_NEST
 3506 502c 694C0000 		_ADR	NAMEQ
 3507 5030 E5340000 		_ADR	QDUP	// ?defined
 3508 5034 1F310000 		_QBRAN	INTE1
 3508      68500000 
 3509 503c 75310000 		_ADR	AT
 3510 5040 DF300000 		_DOLIT	COMPO
 3510      40000000 
 3511 5048 55330000 		_ADR	ANDD	// ?compile only lexicon bits
 3512 504c E94F0000 		_ABORQ	13," compile only"
 3512      0D20636F 
 3512      6D70696C 
 3512      65206F6E 
 3512      6C7900BF 
 3513 5060 F5300000 		_ADR	EXECU
 3514 5064 BB2E0000 		_UNNEST			// execute defined word
 3515              	INTE1:
 3516 5068 FD440000 		_ADR	NUMBERQ
ARM GAS  forth.s 			page 181


 3517 506c 1F310000 		_QBRAN	INTE2
 3517      78500000 
 3518 5074 BB2E0000 		_UNNEST
 3519              	INTE2:
 3520 5078 BD4F0000 		_ADR	PRT_ABORT	// error
 3521              	
 3522              	/******************************
 3523              	    [	   ( -- )
 3524              	 	Start the text interpreter.
 3525              	*******************************/
 3526 507c 1C500000 		_HEADER LBRAC,IMEDD+1,"["
 3526      815B00BF 
 3527 5084 504700BF 		_NEST
 3528 5088 DF300000 		_DOLIT	INTER
 3528      28500000 
 3529 5090 79390000 		_ADR	TEVAL
 3530 5094 61310000 		_ADR	STORE
 3531 5098 DF300000 		_DOLIT  0 
 3531      00000000 
 3532 50a0 81380000 		_ADR    STATE 
 3533 50a4 61310000 		_ADR    STORE 
 3534 50a8 BB2E0000 		_UNNEST
 3535              	
 3536              	/**********************
 3537              	    .OK	 ( -- )
 3538              	 	Display "ok" only 
 3539              		while interpreting.
 3540              	************************/
 3541 50ac 80500000 		_HEADER DOTOK,3,".OK"
 3541      032E4F4B 
 3542 50b4 504700BF 		_NEST
 3543 50b8 DF300000 		_DOLIT	INTER
 3543      28500000 
 3544 50c0 79390000 		_ADR	TEVAL
 3545 50c4 75310000 		_ADR	AT
 3546 50c8 1D370000 		_ADR	EQUAL
 3547 50cc 1F310000 		_QBRAN	DOTO1
 3547      DC500000 
 3548 50d4 0D460000 		_DOTQP	3," ok"
 3548      03206F6B 
 3549              	DOTO1:
 3550 50dc B1450000 		_ADR	CR
 3551 50e0 BB2E0000 		_UNNEST
 3552              	
 3553              	/*************************
 3554              	    ?STACK	( -- )
 3555              	 	Abort if the data 
 3556              		stack underflows.
 3557              	************************/
 3558 50e4 B0500000 		_HEADER QSTAC,6,"?STACK"
 3558      063F5354 
 3558      41434B00 
 3559 50f0 504700BF 		_NEST
 3560 50f4 913E0000 		_ADR	DEPTH
 3561 50f8 09330000 		_ADR	ZLESS	// check only for underflow
 3562 50fc E94F0000 		_ABORQ	9,"underflow"
 3562      09756E64 
ARM GAS  forth.s 			page 182


 3562      6572666C 
 3562      6F7700BF 
 3563 510c BB2E0000 		_UNNEST
 3564              	
 3565              	/*******************
 3566              	    EVAL	( -- )
 3567              	 	Interpret the 
 3568              		input stream.
 3569              	*******************/
 3570 5110 E8500000 		_HEADER EVAL,4,"EVAL"
 3570      04455641 
 3570      4C0000BF 
 3571 511c 504700BF 		_NEST
 3572              	EVAL1:
 3573 5120 D54A0000 	    _ADR	TOKEN
 3574 5124 99320000 		_ADR	DUPP
 3575 5128 95310000 		_ADR	CAT	// ?input stream empty
 3576 512c 1F310000 		_QBRAN	EVAL2
 3576      48510000 
 3577 5134 79390000 		_ADR	TEVAL
 3578 5138 753F0000 		_ADR	ATEXE
 3579 513c F1500000 		_ADR	QSTAC	// evaluate input, check stack
 3580 5140 47310000 		_BRAN	EVAL1
 3580      20510000 
 3581              	EVAL2:
 3582 5148 79320000 		_ADR	DROP
 3583 514c B5500000 		_ADR	DOTOK
 3584 5150 BB2E0000 		_UNNEST	// prompt
 3585              	
 3586              	
 3587              	/******************************
 3588              		EVALUATE ( ix* a u -- jx* )
 3589              	    interpret string 
 3590              	input:
 3591              	    ix*  argument required 
 3592              		a   address string to interpret 
 3593              		u   str length 
 3594              	output:
 3595              		jx*  evalution results 
 3596              	***********************************/
 3597 5154 14510000 		_HEADER EVALUATE,8,"EVALUATE"
 3597      08455641 
 3597      4C554154 
 3597      450000BF 
 3598 5164 504700BF 		_NEST 
 3599              		// save original source specs
 3600 5168 DF300000 		_DOLIT UPP+TOIN 
 3600      2C000020 
 3601 5170 99320000 		_ADR   DUPP 
 3602 5174 75310000 		_ADR  AT 
 3603 5178 05320000 		_ADR   TOR 
 3604 517c DF300000 		_DOLIT  0
 3604      00000000 
 3605 5184 A9320000 		_ADR  SWAP
 3606 5188 61310000 		_ADR   STORE 
 3607 518c DF300000 		_DOLIT UPP+SRC 
 3607      30000020 
ARM GAS  forth.s 			page 183


 3608 5194 31380000 		_ADR   DAT 
 3609 5198 19320000 		_ADR   DTOR 
 3610 519c DF300000 		_DOLIT -1
 3610      FFFFFFFF 
 3611 51a4 DF300000 		_DOLIT UPP+SRCID 
 3611      38000020 
 3612 51ac 61310000 		_ADR   STORE 
 3613 51b0 DF300000 		_DOLIT UPP+SRC 
 3613      30000020 
 3614 51b8 11380000 		_ADR   DSTOR
 3615 51bc 1D510000 		_ADR   EVAL 
 3616              	    // restore original source specs 
 3617 51c0 B5310000 		_ADR   DRFROM 
 3618 51c4 DF300000 		_DOLIT UPP+SRC 
 3618      30000020 
 3619 51cc 11380000 		_ADR   DSTOR 
 3620 51d0 A1310000 		_ADR   RFROM 
 3621 51d4 DF300000 		_DOLIT UPP+TOIN 
 3621      2C000020 
 3622 51dc 61310000 		_ADR   STORE 
 3623 51e0 DF300000 		_DOLIT 0 
 3623      00000000 
 3624 51e8 DF300000 		_DOLIT UPP+SRCID 
 3624      38000020 
 3625 51f0 61310000 		_ADR   STORE 
 3626 51f4 BB2E0000 		_UNNEST 
 3627              	
 3628              	
 3629              	/**********************************
 3630              	    PRESET	( -- )
 3631              	 	Reset data stack pointer 
 3632              		and the terminal input buffer.
 3633              	**********************************/
 3634 51f8 58510000 		_HEADER PRESE,6,"PRESET"
 3634      06505245 
 3634      53455400 
 3635 5204 4FF6B067 		_MOV32 DSP,SPP 
 3635      C2F20107 
 3636 520c FDF752BE 		_NEXT 
 3637              	
 3638              	
 3639              	/*********************
 3640              	    QUIT	( -- )
 3641              	 	Reset return stack 
 3642              		pointer and start 
 3643              		text interpreter.
 3644              	***********************/
 3645 5210 FC510000 		_HEADER QUIT,4,"QUIT"
 3645      04515549 
 3645      540000BF 
 3646 521c DF300000 		_DOLIT RPP 
 3646      80FF0120 
 3647 5224 35320000 		_ADR RPSTOR 
 3648              	QUIT1:
 3649 5228 85500000 		_ADR	LBRAC			// start interpretation
 3650              	QUIT2:
 3651 522c 9D4E0000 		_ADR	QUERY			// get input
ARM GAS  forth.s 			page 184


 3652 5230 1D510000 		_ADR	EVAL
 3653 5234 47310000 		_BRAN	QUIT2	// continue till error
 3653      2C520000 
 3654              	
 3655              	/***************************
 3656              		FORGET ( <string> -- )
 3657              		forget all definition 
 3658              		starting at <string>
 3659              	****************************/
 3660 523c 14520000 		_HEADER FORGET,6,"FORGET"
 3660      06464F52 
 3660      47455400 
 3661 5248 504700BF 		_NEST 
 3662 524c D54A0000 		_ADR TOKEN 
 3663 5250 99320000 		_ADR DUPP 
 3664 5254 1F310000 		_QBRAN 9f 
 3664      90520000 
 3665 525c 694C0000 		_ADR NAMEQ // ( a -- cfa na | a 0 )
 3666 5260 E5340000 		_ADR QDUP 
 3667 5264 1F310000 		_QBRAN 8f
 3667      8C520000 
 3668 526c 81340000 		_ADR CELLM // ( cfa la )
 3669 5270 99320000 		_ADR DUPP 
 3670 5274 B9390000 		_ADR CPP   
 3671 5278 61310000 		_ADR STORE
 3672 527c 75310000 		_ADR AT 
 3673 5280 093A0000 		_ADR LAST 
 3674 5284 61310000 		_ADR STORE
 3675 5288 DD5C0000 		_ADR OVERT 
 3676 528c 79320000 	8:  _ADR DROP 
 3677 5290 BB2E0000 	9:	_UNNEST 
 3678              	
 3679              		.p2align 2 
 3680              	
 3681              	/*****************
 3682              	  The compiler
 3683              	******************/
 3684              	
 3685              	/**************************************
 3686              		POSTPONE <name> ( -- )
 3687              		use to compile immediate word 
 3688              	**************************************/
 3689 5294 40520000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3689      C8504F53 
 3689      54504F4E 
 3689      450000BF 
 3690 52a4 504700BF 		_NEST 
 3691 52a8 E1520000 		_ADR ITICK
 3692 52ac 5D5D0000 		_ADR CALLC  
 3693 52b0 BB2E0000 		_UNNEST 
 3694              	
 3695              	
 3696              	/**************************************
 3697              	    '	   ( -- ca )
 3698              	 	Search context vocabularies 
 3699              		for the next word in input stream.
 3700              	***************************************/
ARM GAS  forth.s 			page 185


 3701 52b4 98520000 		_HEADER TICK,1,"'"
 3701      012700BF 
 3702 52bc 504700BF 		_NEST
 3703 52c0 D54A0000 		_ADR	TOKEN
 3704 52c4 694C0000 		_ADR	NAMEQ	// ?defined
 3705 52c8 1F310000 		_QBRAN	TICK1
 3705      D4520000 
 3706 52d0 BB2E0000 		_UNNEST	// yes, push code address
 3707              	TICK1:
 3708 52d4 BD4F0000 		_ADR PRT_ABORT	// error
 3709              	
 3710              	/*****************************************
 3711              		['] ( -- ca )
 3712              		immediate version of ' 
 3713              	****************************************/
 3714 52d8 B8520000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
 3714      C35B275D 
 3715 52e0 504700BF 		_NEST 
 3716 52e4 BD520000 		_ADR TICK  
 3717 52e8 BB2E0000 		_UNNEST 
 3718              	
 3719              	
 3720              	/***********************************
 3721              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
 3722              		search all context for name at 
 3723              		c-adr 
 3724              	input:
 3725              		c-adr   name 
 3726              	output:
 3727              		c-adr  0   not found 
 3728              		xt 1   found word immediate 
 3729              		xt -1  found normal word 
 3730              	***********************************/
 3731 52ec DC520000 		_HEADER FIND,4,"FIND"
 3731      0446494E 
 3731      440000BF 
 3732 52f8 504700BF 		_NEST 
 3733 52fc 694C0000 		_ADR NAMEQ 
 3734 5300 99320000 		_ADR DUPP 
 3735 5304 1F310000 		_QBRAN 9f
 3735      38530000 
 3736 530c 95310000 		_ADR CAT 
 3737 5310 DF300000 		_DOLIT IMEDD
 3737      80000000 
 3738 5318 55330000 		_ADR ANDD 
 3739 531c DF300000 		_DOLIT 7 
 3739      07000000 
 3740 5324 AD330000 		_ADR RSHIFT  
 3741 5328 99320000 		_ADR DUPP 
 3742 532c 33310000 		_TBRAN 9f 
 3742      38530000 
 3743 5334 69360000 		_ADR INVER 
 3744 5338 BB2E0000 	9:	_UNNEST 
 3745              	
 3746              	
 3747              	
 3748              	/***********************
ARM GAS  forth.s 			page 186


 3749              	    ALLOT	( n -- )
 3750              	 	Allocate n bytes to 
 3751              		the ram area.
 3752              	************************/
 3753 533c F0520000 		_HEADER ALLOT,5,"ALLOT"
 3753      05414C4C 
 3753      4F5400BF 
 3754 5348 504700BF 		_NEST
 3755 534c B9390000 		_ADR	CPP
 3756 5350 F5370000 		_ADR	PSTOR
 3757 5354 BB2E0000 		_UNNEST			// adjust code pointer
 3758              	
 3759              	/******************************
 3760              	    ,	   ( w -- )
 3761              	 	Compile an integer 
 3762              		into dataspace.
 3763              	******************************/
 3764 5358 40530000 		_HEADER COMMA,1,","
 3764      012C00BF 
 3765 5360 504700BF 		_NEST
 3766 5364 E93E0000 		_ADR	HERE
 3767 5368 99320000 		_ADR	DUPP
 3768 536c 71340000 		_ADR	CELLP	// cell boundary
 3769 5370 B9390000 		_ADR	CPP
 3770 5374 61310000 		_ADR	STORE
 3771 5378 61310000 		_ADR	STORE
 3772 537c BB2E0000 		_UNNEST	// adjust code pointer, compile
 3773              		.p2align 2 
 3774              	
 3775              	/***********************************
 3776              		C, ( c -- )
 3777              		compile 1 character into 
 3778              		dataspace 
 3779              	************************************/
 3780 5380 5C530000 		_HEADER CCOMMA,2,"C,"
 3780      02432C00 
 3781 5388 504700BF 		_NEST 
 3782 538c E93E0000 		_ADR 	HERE 
 3783 5390 99320000 		_ADR	DUPP 
 3784 5394 31340000 		_ADR    ONEP 
 3785 5398 B9390000 		_ADR    CPP 
 3786 539c 61310000 		_ADR    STORE 
 3787 53a0 81310000 		_ADR    CSTOR 
 3788 53a4 BB2E0000 		_UNNEST 
 3789              	
 3790              	/************************************
 3791              	    [COMPILE]   ( -- //  string> )
 3792              	 	Compile the next immediate word 
 3793              		into code dictionary.
 3794              	*************************************/
 3795 53a8 84530000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3795      895B434F 
 3795      4D50494C 
 3795      455D00BF 
 3796 53b8 504700BF 		_NEST
 3797 53bc BD520000 		_ADR	TICK
 3798 53c0 61530000 		_ADR	COMMA
ARM GAS  forth.s 			page 187


 3799 53c4 BB2E0000 		_UNNEST
 3800              	
 3801              	/****************************
 3802              	    COMPILE	( -- )
 3803              	 	Compile the next address 
 3804              		in colon list to code 
 3805              		dictionary.
 3806              	*******************************/
 3807 53c8 AC530000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3807      47434F4D 
 3807      50494C45 
 3808 53d4 504700BF 		_NEST
 3809 53d8 A1310000 		_ADR	RFROM
 3810 53dc 99320000 		_ADR	DUPP 
 3811 53e0 75310000 		_ADR	AT
 3812 53e4 DF300000 		_DOLIT 1 
 3812      01000000 
 3813 53ec 69330000 		_ADR	ORR 
 3814 53f0 61530000 		_ADR	COMMA 
 3815 53f4 71340000 		_ADR	CELLP 
 3816 53f8 05320000 		_ADR	TOR 
 3817 53fc BB2E0000 		_UNNEST	// adjust return address
 3818              	
 3819              	/*************************
 3820              	    LITERAL	( w -- )
 3821              	 	Compile tos to code 
 3822              		dictionary as an 
 3823              		integer literal.
 3824              	***************************/
 3825 5400 CC530000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3825      874C4954 
 3825      4552414C 
 3826 540c 504700BF 		_NEST
 3827 5410 DF300000 		_COMPI	DOLIT
 3827      DF300000 
 3827      61530000 
 3828 541c 61530000 		_ADR	COMMA
 3829 5420 BB2E0000 		_UNNEST
 3830              	
 3831              	/********************
 3832              	    $,"	( -- )
 3833              	 	Compile a literal 
 3834              		string up to next " .
 3835              	hidden word 
 3836              	************************/
 3837              	STRCQ:
 3838 5424 504700BF 		_NEST
 3839 5428 DF300000 		_DOLIT -4
 3839      FCFFFFFF 
 3840 5430 B9390000 		_ADR	CPP
 3841 5434 F5370000 		_ADR	PSTOR
 3842 5438 DF300000 		_DOLIT	'\"'
 3842      22000000 
 3843 5440 B14A0000 		_ADR	WORDD	// move word to code dictionary
 3844 5444 49380000 		_ADR	COUNT
 3845 5448 D5330000 		_ADR	PLUS
 3846 544c 293E0000 		_ADR	ALGND	// calculate aligned end of string
ARM GAS  forth.s 			page 188


 3847 5450 B9390000 		_ADR	CPP
 3848 5454 61310000 		_ADR	STORE   // adjust the code pointer
 3849 5458 BB2E0000 		_UNNEST 			
 3850              	
 3851              	/*******************
 3852              	   Structures
 3853              	*******************/
 3854              	
 3855              	/*************************
 3856              	    FOR	 ( -- a )
 3857              	 	Start a FOR-NEXT loop 
 3858              		structure in a colon 
 3859              		definition.
 3860              	**************************/
 3861 545c 04540000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3861      C3464F52 
 3862 5464 504700BF 		_NEST
 3863 5468 DF300000 		_COMPI	TOR
 3863      05320000 
 3863      61530000 
 3864 5474 E93E0000 		_ADR	HERE
 3865 5478 BB2E0000 		_UNNEST
 3866              	
 3867              	/********************************
 3868              		DO ( limit start -- a 0 )
 3869              		initialise a DO...LOOP 
 3870              		or DO...+LOOP 
 3871              	********************************/
 3872 547c 60540000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3872      C2444F00 
 3873 5484 504700BF 		_NEST
 3874 5488 DF300000 		_COMPI DTOR 
 3874      19320000 
 3874      61530000 
 3875 5494 E93E0000 		_ADR HERE 
 3876 5498 DF300000 		_DOLIT 0  // end marker used by resolve_leave 
 3876      00000000 
 3877 54a0 BB2E0000 		_UNNEST 
 3878              		
 3879              	/******************************
 3880              		?DO ( limit start -- a )	
 3881              	    initialise conditional 
 3882              		?DO ... LOOP 	
 3883              		at run time abort loop 
 3884              		if limit = start 
 3885              	******************************/
 3886 54a4 80540000 		_HEADER QDO,COMPO+IMEDD+3,"?DO"
 3886      C33F444F 
 3887 54ac 504700BF 		_NEST 
 3888 54b0 DF300000 		_COMPI  DDUP
 3888      CD350000 
 3888      61530000 
 3889 54bc DF300000 		_COMPI  EQUAL 
 3889      1D370000 
 3889      61530000 
 3890 54c8 DF300000 		_COMPI  QBRAN
 3890      1F310000 
ARM GAS  forth.s 			page 189


 3890      61530000 
 3891 54d4 E93E0000 		_ADR    HERE 
 3892 54d8 DF300000 		_DOLIT  0 
 3892      00000000 
 3893 54e0 61530000 		_ADR    COMMA 
 3894 54e4 DF300000 		_COMPI  DDROP  
 3894      A5350000 
 3894      61530000 
 3895 54f0 DF300000 		_COMPI  EXIT 
 3895      59310000 
 3895      61530000 
 3896 54fc E93E0000 		_ADR    HERE 
 3897 5500 A9320000 		_ADR    SWAP 
 3898 5504 61310000 		_ADR    STORE  
 3899 5508 85540000 		_ADR    DO 
 3900 550c BB2E0000 		_UNNEST 
 3901              	
 3902              	DOPLOOP: // ( n -- R: limit counter )
 3903 5510 3246     		mov T2,TOS 
 3904 5512 57F8046B 		_POP 
 3905 5516 B8E80300 		ldmfd RSP!,{T0,T1}
 3906 551a 1044     		add T0,T2 
 3907 551c 28E90300 		stmfd RSP!,{T0,T1}
 3908 5520 8842     		cmp T0,T1 
 3909 5522 05D4     		bmi 9f 
 3910 5524 08F10808 		add RSP,#8
 3911 5528 0CF1040C 		add IP,#4
 3912 552c FDF7C2BC 		_NEXT 
 3913 5530 DCF800C0 	9:  ldr IP,[IP]
 3914 5534 FDF7BEBC 		_NEXT 
 3915              	
 3916              	
 3917              	/***************************
 3918              		+LOOP ( a -- )
 3919              		increment counter 
 3920              		end loop if countr>limit
 3921              	****************************/
 3922 5538 A8540000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3922      C52B4C4F 
 3922      4F5000BF 
 3923 5544 504700BF 		_NEST 
 3924 5548 DF300000 		_COMPI DOPLOOP 
 3924      11550000 
 3924      61530000 
 3925 5554 89550000 		_ADR resolve_leave 
 3926 5558 61530000 		_ADR COMMA
 3927 555c BB2E0000 		_UNNEST 
 3928              	
 3929              	DOLOOP: // ( -- R: limit counter )
 3930 5560 D8F80000 		ldr T0,[RSP]
 3931 5564 00F10100 		add T0,#1
 3932 5568 C8F80000 		str T0,[RSP]
 3933 556c D8F80410 		ldr T1,[RSP,#4]
 3934 5570 8842     		cmp T0,T1 
 3935 5572 05D4     		bmi 9f
 3936 5574 08F10808 		add RSP,#8  // drop counter and limit  
 3937 5578 0CF1040C 		add IP,IP,#4 // skip loop address 
ARM GAS  forth.s 			page 190


 3938 557c FDF79ABC 		_NEXT 
 3939 5580 DCF800C0 	9:  ldr IP,[IP]
 3940 5584 FDF796BC 		_NEXT 
 3941              	
 3942              	
 3943              	resolve_leave:
 3944 5588 504700BF 		_NEST
 3945 558c E5340000 	1:	_ADR QDUP 
 3946 5590 1F310000 		_QBRAN 2f 
 3946      B0550000 
 3947 5598 E93E0000 		_ADR HERE 
 3948 559c 71340000 		_ADR CELLP 
 3949 55a0 A9320000 		_ADR SWAP 
 3950 55a4 61310000 		_ADR STORE 
 3951 55a8 47310000 		_BRAN 1b 
 3951      8C550000 
 3952              	2:
 3953 55b0 BB2E0000 		_UNNEST 
 3954              	
 3955              	/********************************
 3956              		LOOP ( a -- )
 3957              		increment counter 
 3958              		end loop if >= limit 
 3959              	*********************************/
 3960 55b4 3C550000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3960      C44C4F4F 
 3960      500000BF 
 3961 55c0 504700BF 		_NEST 
 3962 55c4 DF300000 		_COMPI DOLOOP
 3962      61550000 
 3962      61530000 
 3963 55d0 89550000 		_ADR resolve_leave 
 3964 55d4 61530000 		_ADR COMMA  // resolve loop branch 
 3965 55d8 BB2E0000 		_UNNEST 
 3966              	
 3967              	/************************************
 3968              		UNLOOP ( -- ) ( R: limit count -- )
 3969              		remove loop parameters from rstack 
 3970              	****************************************/
 3971 55dc B8550000 		_HEADER UNLOOP,6,"UNLOOP"
 3971      06554E4C 
 3971      4F4F5000 
 3972 55e8 08F10808 		add RSP,#2*CELLL 
 3973 55ec FDF762BC 		_NEXT 
 3974              	
 3975              	
 3976              	/*********************************
 3977              		LEAVE ( -- ) ( R: loop-sys -- ) 
 3978              		exit inner DO...LOOP 
 3979              	**********************************/
 3980 55f0 E0550000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 3980      C54C4541 
 3980      564500BF 
 3981 55fc 504700BF 		_NEST 
 3982 5600 DF300000 		_COMPI DOLEAVE
 3982      31560000 
 3982      61530000 
ARM GAS  forth.s 			page 191


 3983 560c E93E0000 		_ADR HERE
 3984 5610 D9320000 		_ADR OVER 
 3985 5614 1F310000 		_QBRAN 1f
 3985      20560000 
 3986 561c A9320000 		_ADR SWAP 
 3987 5620 DF300000 	1:	_DOLIT 0 
 3987      00000000 
 3988 5628 61530000 		_ADR COMMA   
 3989 562c BB2E0000 		_UNNEST 
 3990              	
 3991              	// LEAVE runtime
 3992              	// remove limit and counter from rstack  
 3993              	DOLEAVE:
 3994 5630 08F10808 		add RSP,#2*CELLL
 3995 5634 DCF800C0 		ldr IP,[IP] 
 3996 5638 FDF73CBC 		_NEXT 
 3997              	
 3998              	
 3999              	/**********************
 4000              	    BEGIN	( -- a )
 4001              	 	Start an infinite 
 4002              		or indefinite 
 4003              		loop structure.
 4004              	************************/
 4005 563c F4550000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 4005      C5424547 
 4005      494E00BF 
 4006 5648 504700BF 		_NEST
 4007 564c E93E0000 		_ADR	HERE
 4008 5650 BB2E0000 		_UNNEST
 4009              		.p2align 2 
 4010              	
 4011              	/********************
 4012              	    NEXT	( a -- )
 4013              	 	Terminate a FOR-NEXT
 4014              		loop structure.
 4015              	**************************/
 4016 5654 40560000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 4016      C44E4558 
 4016      540000BF 
 4017 5660 504700BF 		_NEST
 4018 5664 DF300000 		_COMPI	DONXT
 4018      01310000 
 4018      61530000 
 4019 5670 61530000 		_ADR	COMMA
 4020 5674 BB2E0000 		_UNNEST
 4021              	
 4022              	/***************************
 4023              		I ( -- n )
 4024              		stack for loop counter 
 4025              	***************************/
 4026 5678 58560000 		_HEADER I,1+COMPO,"I"
 4026      414900BF 
 4027 5680 47F8046D 		_PUSH 
 4028 5684 D8F80060 		ldr TOS,[RSP]
 4029 5688 FDF714BC 		_NEXT 
 4030              	
ARM GAS  forth.s 			page 192


 4031              	/****************************
 4032              		J ( -- n )
 4033              		stack outer loop counter 
 4034              	****************************/
 4035 568c 7C560000 		_HEADER J,1,"J"
 4035      014A00BF 
 4036 5694 47F8046D 		_PUSH 
 4037 5698 D8F80460 		ldr TOS,[RSP,#4]
 4038 569c FDF70ABC 		_NEXT 
 4039              	
 4040              	/**********************
 4041              	    UNTIL	( a -- )
 4042              	 	Terminate a BEGIN-UNTIL
 4043              		indefinite loop structure.
 4044              	******************************/
 4045 56a0 90560000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 4045      C5554E54 
 4045      494C00BF 
 4046 56ac 504700BF 		_NEST
 4047 56b0 DF300000 		_COMPI	QBRAN
 4047      1F310000 
 4047      61530000 
 4048 56bc 61530000 		_ADR	COMMA
 4049 56c0 BB2E0000 		_UNNEST
 4050              	
 4051              	/**********************
 4052              	    AGAIN	( a -- )
 4053              	 	Terminate a BEGIN-AGAIN
 4054              		infinite loop structure.
 4055              	*****************************/
 4056 56c4 A4560000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 4056      C5414741 
 4056      494E00BF 
 4057 56d0 504700BF 		_NEST
 4058 56d4 DF300000 		_COMPI	BRAN
 4058      47310000 
 4058      61530000 
 4059 56e0 61530000 		_ADR	COMMA
 4060 56e4 BB2E0000 		_UNNEST
 4061              	
 4062              	/************************
 4063              	    IF	  ( -- A )
 4064              	 	Begin a conditional
 4065              		branch structure.
 4066              	**************************/
 4067 56e8 C8560000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 4067      C2494600 
 4068 56f0 504700BF 		_NEST
 4069 56f4 DF300000 		_COMPI	QBRAN
 4069      1F310000 
 4069      61530000 
 4070 5700 E93E0000 		_ADR	HERE
 4071 5704 DF300000 		_DOLIT	4
 4071      04000000 
 4072 570c B9390000 		_ADR	CPP
 4073 5710 F5370000 		_ADR	PSTOR
 4074 5714 BB2E0000 		_UNNEST
ARM GAS  forth.s 			page 193


 4075              	
 4076              	/*************************
 4077              	    AHEAD	( -- A )
 4078              	 	Compile a forward 
 4079              		branch instruction.
 4080              	*************************/
 4081 5718 EC560000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 4081      C5414845 
 4081      414400BF 
 4082 5724 504700BF 		_NEST
 4083 5728 DF300000 		_COMPI	BRAN
 4083      47310000 
 4083      61530000 
 4084 5734 E93E0000 		_ADR	HERE
 4085 5738 DF300000 		_DOLIT	4
 4085      04000000 
 4086 5740 B9390000 		_ADR	CPP
 4087 5744 F5370000 		_ADR	PSTOR
 4088 5748 BB2E0000 		_UNNEST
 4089              	
 4090              	/**************************
 4091              	    REPEAT	( A a -- )
 4092              	 	Terminate a BEGIN-WHILE-REPEAT
 4093              		indefinite loop.
 4094              	**********************************/
 4095 574c 1C570000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 4095      C6524550 
 4095      45415400 
 4096 5758 504700BF 		_NEST
 4097 575c D1560000 		_ADR	AGAIN
 4098 5760 E93E0000 		_ADR	HERE
 4099 5764 A9320000 		_ADR	SWAP
 4100 5768 61310000 		_ADR	STORE
 4101 576c BB2E0000 		_UNNEST
 4102              	
 4103              	/*********************
 4104              	    THEN	( A -- )
 4105              	 	Terminate a conditional
 4106              		branch structure.
 4107              	*****************************/
 4108 5770 50570000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 4108      C4544845 
 4108      4E0000BF 
 4109 577c 504700BF 		_NEST
 4110 5780 E93E0000 		_ADR	HERE
 4111 5784 A9320000 		_ADR	SWAP
 4112 5788 61310000 		_ADR	STORE
 4113 578c BB2E0000 		_UNNEST
 4114              	
 4115              	/***************************
 4116              	    AFT	 ( a -- a A )
 4117              	 	Jump to THEN in a 
 4118              		FOR-AFT-THEN-NEXT loop 
 4119              		the first time through.
 4120              	*****************************/
 4121 5790 74570000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 4121      C3414654 
ARM GAS  forth.s 			page 194


 4122 5798 504700BF 		_NEST
 4123 579c 79320000 		_ADR	DROP
 4124 57a0 25570000 		_ADR	AHEAD
 4125 57a4 49560000 		_ADR	BEGIN
 4126 57a8 A9320000 		_ADR	SWAP
 4127 57ac BB2E0000 		_UNNEST
 4128              	
 4129              	/**********************
 4130              	    ELSE	( A -- A )
 4131              	 	Start the false 
 4132              		clause in an 
 4133              		IF-ELSE-THEN structure.
 4134              	****************************/
 4135 57b0 94570000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 4135      C4454C53 
 4135      450000BF 
 4136 57bc 504700BF 		_NEST
 4137 57c0 25570000 		_ADR	AHEAD
 4138 57c4 A9320000 		_ADR	SWAP
 4139 57c8 7D570000 		_ADR	THENN
 4140 57cc BB2E0000 		_UNNEST
 4141              	
 4142              	/**************************
 4143              	    WHILE	( a -- A a )
 4144              	 	Conditional branch out 
 4145              		of a BEGIN-WHILE-REPEAT loop.
 4146              	*********************************/
 4147 57d0 B4570000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 4147      C5574849 
 4147      4C4500BF 
 4148 57dc 504700BF 		_NEST
 4149 57e0 F1560000 		_ADR	IFF
 4150 57e4 A9320000 		_ADR	SWAP
 4151 57e8 BB2E0000 		_UNNEST
 4152              	
 4153              	/**********************************
 4154              		CASE ( -- 0 )
 4155              		put a 0 on stack as a marker 
 4156              		for end of BRANCH list to 
 4157              		resolve by ENDCASE 
 4158              	***********************************/
 4159 57ec D4570000 		_HEADER CASE,COMPO+IMEDD+4,"CASE"
 4159      C4434153 
 4159      450000BF 
 4160 57f8 504700BF 		_NEST 
 4161 57fc DF300000 		_DOLIT 0 
 4161      00000000 
 4162 5804 BB2E0000 		_UNNEST 
 4163              	
 4164              	/**********************************
 4165              		OF ( -- a )
 4166              		compile code for value comparison
 4167              		and add address of slot to be 
 4168              		resolved by ENDOF 
 4169              	*********************************/
 4170 5808 F0570000 		_HEADER OF,COMPO+IMEDD+2,"OF"
 4170      C24F4600 
ARM GAS  forth.s 			page 195


 4171 5810 504700BF 		_NEST 
 4172 5814 DF300000 		_COMPI OVER 
 4172      D9320000 
 4172      61530000 
 4173 5820 DF300000 		_COMPI EQUAL  
 4173      1D370000 
 4173      61530000 
 4174 582c DF300000 		_COMPI QBRAN 
 4174      1F310000 
 4174      61530000 
 4175 5838 E93E0000 		_ADR	HERE  
 4176 583c DF300000 		_DOLIT 0 
 4176      00000000 
 4177 5844 61530000 		_ADR COMMA 
 4178 5848 BB2E0000 		_UNNEST
 4179              	
 4180              	/**********************************
 4181              		ENDOF ( a1 -- a2 )
 4182              		resolve QBRAN of predecing OF 
 4183              		and add slot for forward BRANCH 
 4184              		to be resolved by ENDCASE 
 4185              	**********************************/
 4186 584c 0C580000 		_HEADER ENDOF,COMPO+IMEDD+5,"ENDOF"
 4186      C5454E44 
 4186      4F4600BF 
 4187 5858 504700BF 		_NEST
 4188 585c DF300000 		_COMPI	BRAN 
 4188      47310000 
 4188      61530000 
 4189 5868 DF300000 		_DOLIT	0 
 4189      00000000 
 4190 5870 61530000 		_ADR	COMMA 
 4191 5874 E93E0000 		_ADR	HERE 
 4192 5878 A9320000 		_ADR	SWAP 
 4193 587c 61310000 		_ADR	STORE 
 4194 5880 E93E0000 		_ADR	HERE 
 4195 5884 81340000 		_ADR	CELLM 
 4196 5888 BB2E0000 		_UNNEST 
 4197              	
 4198              	/*************************************
 4199              		ENDCASE ( 0...a  -- )
 4200              		compile code for DROP 
 4201              		and resolve forward BRANCH 
 4202              		for each OF 
 4203              	*************************************/
 4204 588c 50580000 		_HEADER ENDCASE,COMPO+IMEDD+7,"ENDCASE"
 4204      C7454E44 
 4204      43415345 
 4205 5898 504700BF 		_NEST 
 4206 589c DF300000 		_COMPI DROP 
 4206      79320000 
 4206      61530000 
 4207 58a8 E5340000 	1:	_ADR QDUP 
 4208 58ac 1F310000 		_QBRAN 2f 
 4208      CC580000 
 4209 58b4 E93E0000 		_ADR HERE
 4210 58b8 81340000 		_ADR CELLM 	
ARM GAS  forth.s 			page 196


 4211 58bc A9320000 		_ADR SWAP 
 4212 58c0 61310000 		_ADR STORE 
 4213 58c4 47310000 		_BRAN 1b 
 4213      A8580000 
 4214              	2:
 4215 58cc BB2E0000 		_UNNEST 
 4216              	
 4217              	
 4218              	/**********************************
 4219              		RECURSE ( -- )
 4220              		compile recursive call to 
 4221              		actual defined word 
 4222              	***********************************/
 4223 58d0 90580000 		_HEADER RECURSE,COMPO+IMEDD+7,"RECURSE"
 4223      C7524543 
 4223      55525345 
 4224 58dc 504700BF 		_NEST 
 4225 58e0 093A0000 		_ADR LAST
 4226 58e4 75310000 		_ADR AT  
 4227 58e8 F54A0000 		_ADR TOCFA 
 4228 58ec 61530000 		_ADR COMMA  
 4229 58f0 BB2E0000 		_UNNEST 
 4230              	
 4231              	
 4232              	/***********************************
 4233              	    ABORT"	( -- //  string> )
 4234              	 	Conditional abort with an 
 4235              		error message.
 4236              	***********************************/
 4237 58f4 D4580000 		_HEADER ABRTQ,IMEDD+COMPO+6,"ABORT\""
 4237      C641424F 
 4237      52542200 
 4238 5900 504700BF 		_NEST
 4239 5904 DF300000 		_COMPI	ABORQ
 4239      E94F0000 
 4239      61530000 
 4240 5910 25540000 		_ADR	STRCQ
 4241 5914 BB2E0000 		_UNNEST
 4242              	
 4243              	/******************************
 4244              	    S"	( -- //  string> )
 4245              	 	Compile an inline 
 4246              		counted string. 
 4247              		at runtime: ( -- a u )
 4248              	*****************************/
 4249 5918 F8580000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 4249      C2532200 
 4250 5920 504700BF 		_NEST
 4251 5924 DF300000 		_COMPI	STRQP
 4251      01460000 
 4251      61530000 
 4252 5930 25540000 		_ADR	STRCQ
 4253 5934 BB2E0000 		_UNNEST
 4254              	
 4255              	/********************************
 4256              	CORE EXT 
 4257              		S\" ( -- )
ARM GAS  forth.s 			page 197


 4258              		compile and inline counted 
 4259              		string with escaped char.
 4260              	********************************/
 4261 5938 1C590000 		_HEADER STRSLHQ,COMPO+IMEDD+3,"S\\\""
 4261      C3535C22 
 4262 5940 504700BF 		_NEST 
 4263 5944 DF300000 		_COMPI	STRQP
 4263      01460000 
 4263      61530000 
 4264 5950 E93E0000 		_ADR	HERE   
 4265 5954 DF300000 		_DOLIT	0 
 4265      00000000 
 4266 595c 89530000 		_ADR	CCOMMA // space for count 
 4267 5960 DD590000 	1:	_ADR	GETC
 4268 5964 E5340000 		_ADR	QDUP 
 4269 5968 1F310000 		_QBRAN  4f 
 4269      B0590000 
 4270 5970 99320000 		_ADR	DUPP 
 4271 5974 DF300000 		_DOLIT	'\\' 
 4271      5C000000 
 4272 597c 1D370000 		_ADR	EQUAL
 4273 5980 1F310000 		_QBRAN	2f
 4273      94590000 
 4274 5988 FB590000 		_ADR	ESCAPE
 4275 598c 47310000 		_BRAN	3f 
 4275      D0590000 
 4276 5994 99320000 	2:  _ADR	DUPP 
 4277 5998 DF300000 		_DOLIT	'"' 
 4277      22000000 
 4278 59a0 1D370000 		_ADR	EQUAL 
 4279 59a4 1F310000 		_QBRAN	3f
 4279      D0590000 
 4280 59ac 79320000 		_ADR	DROP 
 4281 59b0 E93E0000 	4:	_ADR	HERE 
 4282 59b4 D9320000 		_ADR	OVER
 4283 59b8 31340000 		_ADR	ONEP   
 4284 59bc E5330000 		_ADR	SUBB
 4285 59c0 A9320000 		_ADR	SWAP 
 4286 59c4 81310000 		_ADR	CSTOR  
 4287 59c8 0D3E0000 		_ADR	ALIGN 
 4288 59cc BB2E0000 		_UNNEST   
 4289              	3:	
 4290 59d0 89530000 		_ADR	CCOMMA 
 4291 59d4 47310000 		_BRAN	1b 
 4291      60590000 
 4292              	
 4293              	GETC: 
 4294 59dc 606B     		ldr T0,[UP,#TIBUF]
 4295 59de E16A     		ldr T1,[UP,#TOIN]
 4296 59e0 226B     		ldr T2,[UP,#NTIBB]
 4297 59e2 47F8046D 		_PUSH
 4298 59e6 4FF00006 		mov TOS,#0  
 4299 59ea 9142     		cmp	T1,T2 
 4300 59ec 03D0     		beq 1f 
 4301 59ee 465C     		Ldrb TOS,[T0,T1]
 4302 59f0 01F10101 		add  T1,#1 
 4303 59f4 E162     		str T1,[UP,#TOIN]
ARM GAS  forth.s 			page 198


 4304 59f6 FDF75DBA 	1:	_NEXT 
 4305              	
 4306              	// replace escaped character 
 4307              	ESCAPE: 
 4308 59fa 504700BF 		_NEST 
 4309 59fe 79320000 		_ADR	DROP 
 4310 5a02 DD590000 		_ADR	GETC  
 4311 5a06 99320000 		_ADR	DUPP
 4312 5a0a 1F310000 		_QBRAN  5f 
 4312      A65A0000 
 4313 5a12 99320000 		_ADR	DUPP 
 4314 5a16 DF300000 		_DOLIT	'"' 
 4314      22000000 
 4315 5a1e 1D370000 		_ADR	EQUAL 
 4316 5a22 1F310000 		_QBRAN  1f 
 4316      2E5A0000 
 4317 5a2a BB2E0000 		_UNNEST 
 4318 5a2e 99320000 	1: 	_ADR	DUPP 
 4319 5a32 DF300000 		_DOLIT	'\\' 
 4319      5C000000 
 4320 5a3a 1D370000 		_ADR	EQUAL 
 4321 5a3e 1F310000 		_QBRAN  2f 
 4321      4A5A0000 
 4322 5a46 BB2E0000 		_UNNEST 	
 4323 5a4a DF300000 	2:	_DOLIT	0X20 
 4323      20000000 
 4324 5a52 69330000 		_ADR	ORR   // convert to lower case 
 4325 5a56 99320000 		_ADR	DUPP 
 4326 5a5a DF300000 		_DOLIT	'x' 
 4326      78000000 
 4327 5a62 1D370000 		_ADR	EQUAL 
 4328 5a66 1F310000 		_QBRAN  3f 
 4328      765A0000 
 4329 5a6e AB5A0000 		_ADR	PARSE_HEX 
 4330 5a72 BB2E0000 		_UNNEST 
 4331 5a76 DF300000 	3:  _DOLIT	'a' 
 4331      61000000 
 4332 5a7e E5330000 		_ADR	SUBB
 4333 5a82 99320000 		_ADR	DUPP 
 4334 5a86 09330000 		_ADR	ZLESS 
 4335 5a8a 1F310000 		_QBRAN	4f
 4335      965A0000 
 4336 5a92 BB2E0000 		_UNNEST 
 4337 5a96 DF300000 	4:  _DOLIT	esc_char 
 4337      2E5B0000 
 4338 5a9e D5330000 		_ADR	PLUS 
 4339 5aa2 95310000 		_ADR	CAT 
 4340 5aa6 BB2E0000 	5:	_UNNEST 
 4341              	
 4342              	PARSE_HEX:
 4343 5aaa 504700BF 		_NEST 
 4344 5aae 79320000 		_ADR 	DROP 
 4345 5ab2 DD590000 		_ADR	GETC 
 4346 5ab6 99320000 		_ADR	DUPP 
 4347 5aba 1F310000 		_QBRAN	2f
 4347      F25A0000 
 4348 5ac2 F75A0000 		_ADR	TO_HEX 
ARM GAS  forth.s 			page 199


 4349 5ac6 DF300000 	1:	_DOLIT	16 
 4349      10000000 
 4350 5ace F5330000 		_ADR	STAR 
 4351 5ad2 05320000 		_ADR	TOR 
 4352 5ad6 DD590000 		_ADR	GETC
 4353 5ada 99320000 		_ADR	DUPP 
 4354 5ade 1F310000 		_QBRAN	3f 
 4354      EA5A0000 
 4355 5ae6 F75A0000 		_ADR	TO_HEX 
 4356 5aea A1310000 	3:	_ADR	RFROM 
 4357 5aee D5330000 		_ADR	PLUS 
 4358 5af2 BB2E0000 	2:	_UNNEST 
 4359              	
 4360              	
 4361              	TO_HEX: 
 4362 5af6 504700BF 		_NEST 
 4363 5afa DF300000 		_DOLIT	'0' 
 4363      30000000 
 4364 5b02 E5330000 		_ADR	SUBB 
 4365 5b06 99320000 		_ADR	DUPP 
 4366 5b0a DF300000 		_DOLIT	9 
 4366      09000000 
 4367 5b12 A9370000 		_ADR	GREAT 
 4368 5b16 1F310000 		_QBRAN	1f 
 4368      2A5B0000 
 4369 5b1e DF300000 		_DOLIT	7 
 4369      07000000 
 4370 5b26 E5330000 		_ADR	SUBB  
 4371              	1:
 4372 5b2a BB2E0000 		_UNNEST 
 4373              	
 4374              	
 4375 5b2e 07086364 	esc_char:  .byte 7,8,'c','d',27,12,'g','h','i','j','k',10,13,10,'o','p',34,13,'s',9,'u',11,'x','y',
 4375      1B0C6768 
 4375      696A6B0A 
 4375      0D0A6F70 
 4375      220D7309 
 4376              	
 4377              	
 4378              	/********************
 4379              	    $,\"	( -- )
 4380              	 	Compile a literal 
 4381              		escaped string up to next " .
 4382              	hidden word 
 4383              	************************/
 4384              	STRCSLHQ:
 4385              	
 4386              	
 4387              	
 4388              	/********************************
 4389              	EXTENDED CORE 
 4390              		C" string" ( -- )
 4391              		Compile an inline counted 
 4392              		literal.
 4393              		at runtime ( -- a )
 4394              	*********************************/
 4395 5b47 3C590000 		_HEADER CSTRQ,IMEDD+COMPO+2,"C\""
ARM GAS  forth.s 			page 200


 4395      C2432200 
 4395      BF
 4396 5b50 504700BF 		_NEST 
 4397 5b54 DF300000 		_COMPI	STRQP
 4397      01460000 
 4397      61530000 
 4398 5b60 25540000 		_ADR	STRCQ 
 4399 5b64 DF300000 		_COMPI	DROP 
 4399      79320000 
 4399      61530000 
 4400 5b70 DF300000 		_COMPI	ONEM  
 4400      41340000 
 4400      61530000 
 4401 5b7c BB2E0000 		_UNNEST 
 4402              	
 4403              	
 4404              	/******************************
 4405              	    ."	( -- //  string> )
 4406              	 	Compile an inline word
 4407              		literal to be typed out 
 4408              		at run time.
 4409              	*******************************/
 4410 5b80 4B5B0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 4410      C22E2200 
 4411 5b88 504700BF 		_NEST
 4412 5b8c DF300000 		_COMPI	DOTQP
 4412      0D460000 
 4412      61530000 
 4413 5b98 25540000 		_ADR	STRCQ
 4414 5b9c BB2E0000 		_UNNEST
 4415              	
 4416              	/*********************
 4417              	  Name compiler
 4418              	***********************/
 4419              	
 4420              	/**************************
 4421              	    ?UNIQUE	( a -- a )
 4422              	 	Display a warning 
 4423              		message if the word 
 4424              		already exists.
 4425              	**************************/
 4426 5ba0 845B0000 		_HEADER UNIQU,7,"?UNIQUE"
 4426      073F554E 
 4426      49515545 
 4427 5bac 504700BF 		_NEST
 4428 5bb0 99320000 		_ADR	DUPP
 4429 5bb4 694C0000 		_ADR	NAMEQ			// ?name exists
 4430 5bb8 1F310000 		_QBRAN	UNIQ1	// redefinitions are OK
 4430      D85B0000 
 4431 5bc0 0D460000 		_DOTQP	7," reDef "		// but warn the user
 4431      07207265 
 4431      44656620 
 4432 5bcc D9320000 		_ADR	OVER
 4433 5bd0 49380000 		_ADR	COUNT
 4434 5bd4 7D450000 		_ADR	TYPEE			// just in case its not planned
 4435              	UNIQ1:
 4436 5bd8 79320000 		_ADR	DROP
ARM GAS  forth.s 			page 201


 4437 5bdc BB2E0000 		_UNNEST
 4438              	
 4439              	/***********************
 4440              	    $,n	 ( na -- )
 4441              	 	Build a new dictionary 
 4442              		name using the data at na.
 4443              	hidden word 
 4444              	*******************************/
 4445              	SNAME:
 4446 5be0 504700BF 		_NEST
 4447 5be4 99320000 		_ADR	DUPP			//  na na
 4448 5be8 95310000 		_ADR	CAT			//  ?null input
 4449 5bec 1F310000 		_QBRAN	SNAM1
 4449      285C0000 
 4450 5bf4 AD5B0000 		_ADR	UNIQU			//  na
 4451 5bf8 093A0000 		_ADR	LAST			//  na last
 4452 5bfc 75310000 		_ADR	AT			//  na la
 4453 5c00 61530000 		_ADR	COMMA			//  na
 4454 5c04 99320000 		_ADR	DUPP			//  na na
 4455 5c08 093A0000 		_ADR	LAST			//  na na last
 4456 5c0c 61310000 		_ADR	STORE			//  na , save na for vocabulary link
 4457 5c10 49380000 		_ADR	COUNT			//  na+1 count
 4458 5c14 D5330000 		_ADR	PLUS			//  na+1+count
 4459 5c18 293E0000 		_ADR	ALGND			//  word boundary
 4460 5c1c B9390000 		_ADR	CPP
 4461 5c20 61310000 		_ADR	STORE			//  top of dictionary now
 4462 5c24 BB2E0000 		_UNNEST
 4463              	SNAM1:
 4464 5c28 01460000 		_ADR	STRQP
 4465 5c2c 07       		.byte	7
 4466 5c2d 206E616D 		.ascii " name? "
 4466      653F20
 4467 5c34 BD4F0000 		_ADR	PRT_ABORT
 4468              	
 4469              	/************************
 4470              	    $COMPILE	( a -- )
 4471              	 	Compile next word to 
 4472              		code dictionary as 
 4473              		a token or literal.
 4474              	**************************/
 4475 5c38 A45B0000 		_HEADER SCOMP,8,"$COMPILE"
 4475      0824434F 
 4475      4D50494C 
 4475      450000BF 
 4476 5c48 504700BF 		_NEST
 4477 5c4c 694C0000 		_ADR	NAMEQ
 4478 5c50 E5340000 		_ADR	QDUP	// defined?
 4479 5c54 1F310000 		_QBRAN	SCOM2
 4479      845C0000 
 4480 5c5c 75310000 		_ADR	AT
 4481 5c60 DF300000 		_DOLIT	IMEDD
 4481      80000000 
 4482 5c68 55330000 		_ADR	ANDD	// immediate?
 4483 5c6c 1F310000 		_QBRAN	SCOM1
 4483      7C5C0000 
 4484 5c74 F5300000 		_ADR	EXECU
 4485 5c78 BB2E0000 		_UNNEST			// it's immediate, execute
ARM GAS  forth.s 			page 202


 4486              	SCOM1:
 4487 5c7c 5D5D0000 		_ADR	CALLC			// it's not immediate, compile
 4488 5c80 BB2E0000 		_UNNEST	
 4489              	SCOM2:
 4490 5c84 FD440000 		_ADR	NUMBERQ 
 4491 5c88 1F310000 		_QBRAN	SCOM3
 4491      985C0000 
 4492 5c90 0D540000 		_ADR	LITER
 4493 5c94 BB2E0000 		_UNNEST			// compile number as integer
 4494              	SCOM3: // compilation abort 
 4495 5c98 A15C0000 		_ADR COLON_ABORT 
 4496 5c9c BD4F0000 		_ADR	PRT_ABORT			// error
 4497              	
 4498              	/********************************
 4499              	 before aborting a compilation 
 4500              	 reset HERE and LAST
 4501              	 to previous values. 
 4502              	*******************************/
 4503              	COLON_ABORT:
 4504 5ca0 504700BF 		_NEST 
 4505 5ca4 093A0000 		_ADR LAST 
 4506 5ca8 75310000 		_ADR AT 
 4507 5cac 81340000 		_ADR CELLM 
 4508 5cb0 99320000 		_ADR DUPP 
 4509 5cb4 B9390000 		_ADR CPP  
 4510 5cb8 61310000 		_ADR STORE 
 4511 5cbc 75310000 		_ADR AT 
 4512 5cc0 093A0000 		_ADR LAST 
 4513 5cc4 61310000 		_ADR STORE 
 4514 5cc8 DD5C0000 		_ADR OVERT 
 4515 5ccc BB2E0000 		_UNNEST 
 4516              	
 4517              	/*********************
 4518              	    OVERT	( -- )
 4519              	 	Link a new word 
 4520              		into the current 
 4521              		vocabulary.
 4522              	**********************/
 4523 5cd0 3C5C0000 		_HEADER OVERT,5,"OVERT"
 4523      054F5645 
 4523      525400BF 
 4524 5cdc 504700BF 		_NEST
 4525 5ce0 093A0000 		_ADR	LAST
 4526 5ce4 75310000 		_ADR	AT
 4527 5ce8 A5390000 		_ADR	CNTXT
 4528 5cec 61310000 		_ADR	STORE
 4529 5cf0 BB2E0000 		_UNNEST
 4530              	
 4531              	/**********************
 4532              	    ;  ( -- )
 4533              	 	Terminate a colon
 4534              		definition.
 4535              	***********************/
 4536 5cf4 D45C0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 4536      C13B00BF 
 4537 5cfc 504700BF 		_NEST
 4538 5d00 DF300000 		_DOLIT	UNNEST
ARM GAS  forth.s 			page 203


 4538      BA2E0000 
 4539 5d08 5D5D0000 		_ADR	CALLC
 4540 5d0c 0D3E0000 		_ADR    ALIGN 
 4541 5d10 85500000 		_ADR	LBRAC
 4542 5d14 DD5C0000 		_ADR	OVERT
 4543 5d18 BB2E0000 		_UNNEST
 4544              	
 4545              	/******************
 4546              	    ]	   ( -- )
 4547              	 	Start compiling 
 4548              		the words in 
 4549              		the input stream.
 4550              	*********************/
 4551 5d1c F85C0000 		_HEADER RBRAC,1,"]"
 4551      015D00BF 
 4552 5d24 504700BF 		_NEST
 4553 5d28 DF300000 		_DOLIT	SCOMP
 4553      485C0000 
 4554 5d30 79390000 		_ADR	TEVAL
 4555 5d34 61310000 		_ADR	STORE
 4556 5d38 DF300000 		_DOLIT  -1
 4556      FFFFFFFF 
 4557 5d40 81380000 		_ADR    STATE 
 4558 5d44 61310000 		_ADR    STORE 
 4559 5d48 BB2E0000 		_UNNEST
 4560              	
 4561              	/****************************
 4562              	    COMPILE,	( cfa -- )
 4563              	 	compile cfa.
 4564              	
 4565              	*****************************/
 4566 5d4c 205D0000 		_HEADER CALLC,COMPO+IMEDD+8,"COMPILE,"
 4566      C8434F4D 
 4566      50494C45 
 4566      2C0000BF 
 4567 5d5c 504700BF 		_NEST
 4568 5d60 DF300000 		_DOLIT 1 
 4568      01000000 
 4569 5d68 69330000 		_ADR ORR 
 4570 5d6c 61530000 		_ADR COMMA  
 4571 5d70 BB2E0000 		_UNNEST 
 4572              	
 4573              	
 4574              	/****************************
 4575              		BUFFER: "name" ( u -- a )
 4576              		create a named buffer of 
 4577              		u bytes 
 4578              		0's the buffer. 
 4579              	*****************************/
 4580 5d74 505D0000 		_HEADER BUFFER,7,"BUFFER:"
 4580      07425546 
 4580      4645523A 
 4581 5d80 504700BF 		_NEST 
 4582 5d84 0D3E0000 		_ADR    ALIGN 
 4583 5d88 D54A0000 		_ADR	TOKEN
 4584 5d8c E15B0000 		_ADR	SNAME
 4585 5d90 E93E0000 		_ADR    HERE 
ARM GAS  forth.s 			page 204


 4586 5d94 D9320000 		_ADR    OVER 
 4587 5d98 49530000 		_ADR    ALLOT 
 4588 5d9c DF300000 		_DOLIT	0 
 4588      00000000 
 4589 5da4 7D350000 		_ADR	ROT 
 4590 5da8 99320000 		_ADR	DUPP 
 4591 5dac 05320000 		_ADR	TOR 
 4592 5db0 21400000 		_ADR	FILL
 4593 5db4 A1310000 		_ADR	RFROM 
 4594 5db8 DD5C0000 		_ADR    OVERT 
 4595 5dbc BB2E0000 		_UNNEST 
 4596              	
 4597              	
 4598              	/*************************
 4599              	 	:	( -- //  string> )
 4600              	 	Start a new colon 
 4601              		definition using 
 4602              		next word as its name.
 4603              	**************************/
 4604 5dc0 785D0000 		_HEADER COLON,1,":"
 4604      013A00BF 
 4605 5dc8 504700BF 		_NEST
 4606 5dcc 0D3E0000 		_ADR    ALIGN 
 4607 5dd0 D54A0000 		_ADR	TOKEN
 4608 5dd4 E15B0000 		_ADR	SNAME
 4609 5dd8 C52E0000 		_ADR	COMPI_NEST 
 4610 5ddc 255D0000 		_ADR	RBRAC
 4611 5de0 BB2E0000 		_UNNEST
 4612              	
 4613              	/*************************
 4614              	    IMMEDIATE   ( -- )
 4615              	 	Make the last compiled 
 4616              		word an immediate word.
 4617              	***************************/
 4618 5de4 C45D0000 		_HEADER IMMED,9,"IMMEDIATE"
 4618      09494D4D 
 4618      45444941 
 4618      544500BF 
 4619 5df4 504700BF 		_NEST
 4620 5df8 DF300000 		_DOLIT	IMEDD
 4620      80000000 
 4621 5e00 093A0000 		_ADR	LAST
 4622 5e04 75310000 		_ADR	AT
 4623 5e08 75310000 		_ADR	AT
 4624 5e0c 69330000 		_ADR	ORR
 4625 5e10 093A0000 		_ADR	LAST
 4626 5e14 75310000 		_ADR	AT
 4627 5e18 61310000 		_ADR	STORE
 4628 5e1c BB2E0000 		_UNNEST
 4629              	
 4630              	/******************
 4631              	  Defining words
 4632              	******************/
 4633              	
 4634              		.p2align 2 
 4635              	/****************************************
 4636              	 doDOES> ( -- a )
ARM GAS  forth.s 			page 205


 4637              	 runtime action of  DOES>		 
 4638              	hidden word used by compiler 
 4639              	***************************************/
 4640              	DODOES:
 4641 5e20 504700BF 		_NEST 
 4642 5e24 D5310000 		_ADR	RAT 
 4643 5e28 71340000 		_ADR	CELLP 
 4644 5e2c 31340000 		_ADR	ONEP  
 4645 5e30 093A0000 		_ADR	LAST 
 4646 5e34 75310000 		_ADR	AT
 4647 5e38 F54A0000 		_ADR	TOCFA
 4648 5e3c 41340000 		_ADR    ONEM  
 4649 5e40 AD630000 		_ADR	TOVECTOR  
 4650 5e44 61310000 		_ADR	STORE
 4651 5e48 BB2E0000 		_UNNEST 
 4652              	
 4653              		.p2align 2
 4654              	/**********************
 4655              	  DOES> ( -- )
 4656              	  compile time action
 4657              	*************************/
 4658 5e4c E85D0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4658      C5444F45 
 4658      533E00BF 
 4659 5e58 504700BF 		_NEST 
 4660 5e5c DF300000 		_COMPI	DODOES 
 4660      215E0000 
 4660      61530000 
 4661 5e68 DF300000 		_COMPI	UNNEST 
 4661      BB2E0000 
 4661      61530000 
 4662 5e74 C52E0000 		_ADR	COMPI_NEST
 4663 5e78 BB2E0000 	 	_UNNEST 
 4664              	
 4665              	
 4666              	/****************************
 4667              	  DEFER@ ( cfa1 -- cfa2 )
 4668              	
 4669              	******************************/
 4670 5e7c 505E0000 		_HEADER DEFERAT,6,"DEFER@"
 4670      06444546 
 4670      45524000 
 4671 5e88 504700BF 		_NEST 
 4672 5e8c 71340000 		_ADR CELLP 
 4673 5e90 75310000 		_ADR AT 
 4674 5e94 BB2E0000 		_UNNEST 
 4675              	
 4676              	/*********************************
 4677              		ACTION-OF "name" ( -- xt )
 4678              		push the action token 
 4679              		of defered word "name" 
 4680              	*********************************/
 4681 5e98 805E0000 		_HEADER ACTIONOF,IMEDD+9,"ACTION-OF"
 4681      89414354 
 4681      494F4E2D 
 4681      4F4600BF 
 4682 5ea8 504700BF 		_NEST 
ARM GAS  forth.s 			page 206


 4683 5eac BD520000 		_ADR 	TICK  
 4684 5eb0 895E0000 		_ADR 	DEFERAT 
 4685 5eb4 81380000 		_ADR    STATE 
 4686 5eb8 75310000 		_ADR 	AT 
 4687 5ebc 1F310000 		_QBRAN 	1f
 4687      C85E0000 
 4688 5ec4 61530000 		_ADR    COMMA 
 4689 5ec8 BB2E0000 	1: 	_UNNEST 
 4690              	
 4691              	
 4692              	/*********************************
 4693              	 DEFER! ( cfa1 cfa2 -- )
 4694              	 assign an action to a defered word 
 4695              	************************************/
 4696 5ecc 9C5E0000 		_HEADER DEFERSTO,6,"DEFER!"
 4696      06444546 
 4696      45522100 
 4697 5ed8 504700BF 		_NEST 
 4698 5edc DF300000 		_DOLIT	-2 
 4698      FEFFFFFF 
 4699 5ee4 55330000 		_ADR	ANDD   // clear thumb bit of cfa2  
 4700 5ee8 71340000 		_ADR 	CELLP  // skip NEST 
 4701 5eec 61310000 		_ADR STORE 
 4702 5ef0 BB2E0000 		_UNNEST
 4703              	
 4704              	/****************************
 4705              	  DEFER ( "name" -- )
 4706              	  create a defered definition
 4707              	*****************************/
 4708 5ef4 D05E0000 		_HEADER DEFER,5,"DEFER"
 4708      05444546 
 4708      455200BF 
 4709 5f00 504700BF 		_NEST 
 4710 5f04 C95D0000 		_ADR COLON 
 4711              	// runtime code 
 4712 5f08 DF300000 		_DOLIT NO_ACTION  
 4712      285F0000 
 4713 5f10 5D5D0000 		_ADR  CALLC 
 4714 5f14 DF300000 		_DOLIT UNNEST 
 4714      BA2E0000 
 4715 5f1c 5D5D0000 		_ADR  CALLC
 4716              	// end of runtime code 	
 4717 5f20 FD5C0000 		_ADR  SEMIS  
 4718 5f24 BB2E0000 		_UNNEST 
 4719              	
 4720              	NO_ACTION:
 4721 5f28 504700BF 		_NEST 
 4722 5f2c DF300000 		_DOLIT 1 
 4722      01000000 
 4723 5f34 E94F0000 		_ABORQ 15 , " no action set!"
 4723      0F206E6F 
 4723      20616374 
 4723      696F6E20 
 4723      73657421 
 4724 5f48 BB2E0000 		_UNNEST 
 4725              	
 4726              	/*********************************
ARM GAS  forth.s 			page 207


 4727              		:NONAME  ( -- xt )
 4728              		create a colon word without 
 4729              		name. 
 4730              	output:
 4731              		xt  exÃ©cution token of 
 4732              		new definition
 4733              	*********************************/
 4734 5f4c F85E0000 		_HEADER NONAME,7,":NONAME"
 4734      073A4E4F 
 4734      4E414D45 
 4735 5f58 504700BF 		_NEST 
 4736 5f5c E93E0000 		_ADR 	HERE 
 4737 5f60 C52E0000 		_ADR	COMPI_NEST 
 4738 5f64 255D0000 		_ADR 	RBRAC
 4739 5f68 BB2E0000 		_UNNEST 
 4740              	
 4741              	/*******************************
 4742              		IS cccc ( cfa -- )
 4743              	input:
 4744              	   cccc  defered word name 
 4745              	   xt    execution token 
 4746              	   to be affected to the 
 4747              	   defered word.
 4748              	********************************/
 4749 5f6c 505F0000 		_HEADER IS,IMEDD+2,"IS"
 4749      82495300 
 4750 5f74 504700BF 		_NEST
 4751 5f78 81380000 		_ADR STATE 
 4752 5f7c 75310000 		_ADR AT 
 4753 5f80 1F310000 		_QBRAN 1f 
 4753      A85F0000 
 4754 5f88 DF300000 		_DOLIT ITICK
 4754      E0520000 
 4755 5f90 5D5D0000 		_ADR CALLC  
 4756 5f94 DF300000 		_DOLIT DEFERSTO
 4756      D85E0000 
 4757 5f9c 5D5D0000 		_ADR CALLC
 4758 5fa0 47310000 		_BRAN 2f    
 4758      B05F0000 
 4759 5fa8 BD520000 	1:  _ADR TICK 
 4760 5fac D95E0000 		_ADR DEFERSTO 
 4761 5fb0 BB2E0000 	2:	_UNNEST 
 4762              	
 4763              	
 4764              	/******************************
 4765              	    CREATE	( -- //  string> )
 4766              	 	Compile a new array entry 
 4767              		without allocating code space.
 4768              	***********************************/
 4769 5fb4 705F0000 		_HEADER CREAT,6,"CREATE"
 4769      06435245 
 4769      41544500 
 4770 5fc0 504700BF 		_NEST 
 4771 5fc4 0D3E0000 		_ADR	ALIGN 
 4772 5fc8 D54A0000 		_ADR	TOKEN
 4773 5fcc E15B0000 		_ADR	SNAME
 4774 5fd0 DD5C0000 		_ADR	OVERT
ARM GAS  forth.s 			page 208


 4775 5fd4 C52E0000 		_ADR	COMPI_NEST 
 4776 5fd8 DF300000 		_COMPI	DOVAR
 4776      01600000 
 4776      61530000 
 4777 5fe4 DF300000 		_COMPI  NOP     // reserved slot  for DOES> vector   
 4777      DD300000 
 4777      61530000 
 4778 5ff0 DF300000 		_COMPI  UNNEST 
 4778      BB2E0000 
 4778      61530000 
 4779 5ffc BB2E0000 		_UNNEST
 4780              	
 4781              	/*******************************
 4782              	  doVAR	( -- a )
 4783              	  Run time routine for VARIABLE and CREATE.
 4784              	hidden word used by compiler
 4785              	********************************/
 4786              	DOVAR:
 4787 6000 47F8046D 		_PUSH
 4788 6004 6646     		MOV TOS,IP
 4789 6006 06F10806 		ADD TOS,#2*CELLL // >BODY 
 4790 600a FCF753BF 		_NEXT  
 4791              	
 4792              	
 4793              	/*******************************
 4794              	    VARIABLE	( -- //  string> )
 4795              	 	Compile a new variable 
 4796              		initialized to 0.
 4797              	***********************************/
 4798 600e B85F0000 		_HEADER VARIA,8,"VARIABLE"
 4798      08564152 
 4798      4941424C 
 4798      4500
 4799 601c 504700BF 		_NEST
 4800 6020 C15F0000 		_ADR	CREAT
 4801 6024 DF300000 		_DOLIT	0
 4801      00000000 
 4802 602c 61530000 		_ADR	COMMA
 4803 6030 BB2E0000 		_UNNEST
 4804              	
 4805              	/**********************************
 4806              	    doCON	( -- a ) 
 4807              	 	Run time routine for CONSTANT.
 4808              	hidden word used by compiler 
 4809              	***********************************/
 4810              	DOCON:
 4811 6034 47F8046D 		_PUSH
 4812 6038 5CF8046B 		LDR.W TOS,[IP],#4 
 4813 603c FCF73DBF 		B UNNEST 
 4814              	
 4815              	
 4816              	/***********************************
 4817              	CORE EXT 
 4818              		VALUE name ( x -- )
 4819              		create a value object and 
 4820              		assign x to it. 
 4821              	***********************************/
ARM GAS  forth.s 			page 209


 4822 6040 12600000 		_HEADER VALUE,5,"VALUE" 
 4822      0556414C 
 4822      554500BF 
 4823 604c 504700BF 		_NEST 
 4824 6050 C15F0000 		_ADR CREAT 
 4825 6054 DF300000 		_DOLIT AT 
 4825      74310000 
 4826 605c DF300000 		_DOLIT	1 
 4826      01000000 
 4827 6064 69330000 		_ADR	ORR 
 4828 6068 E93E0000 		_ADR	HERE 
 4829 606c DF300000 		_DOLIT	8 
 4829      08000000 
 4830 6074 E5330000 		_ADR	SUBB 
 4831 6078 61310000 		_ADR	STORE 
 4832 607c 61530000 		_ADR	COMMA 
 4833 6080 BB2E0000 		_UNNEST 
 4834              	
 4835              	/***********************************
 4836              	CORE EXT 
 4837              		TO name ( x -- )
 4838              	    assign a new value to name 
 4839              	***********************************/
 4840 6084 44600000 		_HEADER TO,2,"TO"
 4840      02544F00 
 4841 608c 504700BF 		_NEST 
 4842 6090 BD520000 		_ADR	TICK 
 4843 6094 41340000 		_ADR	ONEM 
 4844 6098 DF300000 		_DOLIT	4*CELLL
 4844      10000000 
 4845 60a0 D5330000 		_ADR	PLUS  
 4846 60a4 61310000 		_ADR	STORE 
 4847 60a8 BB2E0000 		_UNNEST 
 4848              	
 4849              	
 4850              	/***********************************
 4851              	    CONSTANT	( u -- //  string> )
 4852              	 	Compile a new constant.
 4853              	************************************/
 4854 60ac 88600000 		_HEADER CONST,8,"CONSTANT"
 4854      08434F4E 
 4854      5354414E 
 4854      540000BF 
 4855 60bc 504700BF 		_NEST 
 4856 60c0 D54A0000 		_ADR	TOKEN
 4857 60c4 E15B0000 		_ADR	SNAME
 4858 60c8 DD5C0000 		_ADR	OVERT
 4859 60cc C52E0000 		_ADR	COMPI_NEST
 4860 60d0 DF300000 		_DOLIT	DOCON
 4860      34600000 
 4861 60d8 5D5D0000 		_ADR	CALLC
 4862 60dc 61530000 		_ADR	COMMA
 4863 60e0 DF300000 		_DOLIT	UNNEST 
 4863      BA2E0000 
 4864 60e8 5D5D0000 		_ADR	CALLC  
 4865 60ec BB2E0000 		_UNNEST
 4866              	
ARM GAS  forth.s 			page 210


 4867              	
 4868              	/***********
 4869              	  Tools
 4870              	***********/
 4871              	
 4872              	/*************************
 4873              	    dm+	 ( a u -- a )
 4874              	 	Dump u bytes from a , 
 4875              		leaving a+u on the stack.
 4876              		hidden word used by DUMP 
 4877              	****************************/
 4878              	DMP:
 4879 60f0 504700BF 		_NEST
 4880 60f4 D9320000 		_ADR	OVER
 4881 60f8 DF300000 		_DOLIT	4
 4881      04000000 
 4882 6100 D5460000 		_ADR	UDOTR			// display address
 4883 6104 DF300000 		_DOLIT  0         // don't show base char 
 4883      00000000 
 4884 610c 11390000 		_ADR    BCHR
 4885 6110 99320000 		_ADR    DUPP
 4886 6114 75310000 		_ADR    AT 
 4887 6118 05320000 		_ADR    TOR      // save original value of BCHAR 
 4888 611c 61310000 		_ADR    STORE 
 4889 6120 29450000 		_ADR	SPACE
 4890 6124 05320000 		_ADR	TOR			// start count down loop
 4891 6128 47310000 		_BRAN	PDUM2			// skip first pass
 4891      48610000 
 4892              	PDUM1:
 4893 6130 99320000 	    _ADR	DUPP
 4894 6134 95310000 		_ADR	CAT
 4895 6138 DF300000 		_DOLIT	3
 4895      03000000 
 4896 6140 D5460000 		_ADR	UDOTR			// display numeric data
 4897 6144 31340000 		_ADR	ONEP			// increment address
 4898              	PDUM2:
 4899 6148 01310000 	    _ADR	DONXT
 4900 614c 30610000 		.word	PDUM1	// loop till done
 4901 6150 A1310000 		_ADR    RFROM   // restore BCHAR value 
 4902 6154 11390000 		_ADR    BCHR 
 4903 6158 61310000 		_ADR    STORE 
 4904 615c BB2E0000 		_UNNEST
 4905              		.p2align 2 
 4906              	//    DUMP	( a u -- )
 4907              	// 	Dump u bytes from a, in a formatted manner.
 4908              	
 4909              	/**********************
 4910              		DUMP ( a n -- )
 4911              		hex dump memory 
 4912              	*********************/
 4913 6160 B0600000 		_HEADER DUMP,4,"DUMP"
 4913      0444554D 
 4913      500000BF 
 4914 616c 504700BF 		_NEST
 4915 6170 DF300000 		_DOLIT  15 
 4915      0F000000 
 4916 6178 D5330000 		_ADR    PLUS 
ARM GAS  forth.s 			page 211


 4917 617c DF300000 		_DOLIT  0xFFFFFFF0 
 4917      F0FFFFFF 
 4918 6184 55330000 		_ADR    ANDD 
 4919 6188 A9320000 		_ADR    SWAP 
 4920 618c DF300000 		_DOLIT  0xFFFFFFFC
 4920      FCFFFFFF 
 4921 6194 55330000 		_ADR    ANDD 
 4922 6198 A9320000 		_ADR    SWAP 
 4923 619c F9380000 		_ADR	BASE
 4924 61a0 75310000 		_ADR	AT
 4925 61a4 05320000 		_ADR	TOR
 4926 61a8 8D420000 		_ADR	HEX			// save radix,set hex
 4927 61ac DF300000 		_DOLIT	16
 4927      10000000 
 4928 61b4 893D0000 		_ADR	SLASH			// change count to lines
 4929 61b8 05320000 		_ADR	TOR
 4930 61bc 47310000 		_BRAN	DUMP4			// start count down loop
 4930      EC610000 
 4931              	DUMP1:
 4932 61c4 B1450000 	    _ADR	CR
 4933 61c8 DF300000 		_DOLIT	16
 4933      10000000 
 4934 61d0 CD350000 		_ADR	DDUP
 4935 61d4 F1600000 		_ADR	DMP			// display numeric
 4936 61d8 7D350000 		_ADR	ROT
 4937 61dc 7D350000 		_ADR	ROT
 4938 61e0 29450000 		_ADR	SPACE
 4939 61e4 29450000 		_ADR	SPACE
 4940 61e8 7D450000 		_ADR	TYPEE			// display printable characters
 4941              	DUMP4:
 4942 61ec 01310000 	  _DONXT	DUMP1	// loop till done
 4942      C4610000 
 4943              	DUMP3:
 4944 61f4 79320000 		_ADR	DROP
 4945 61f8 A1310000 		_ADR	RFROM
 4946 61fc F9380000 		_ADR	BASE
 4947 6200 61310000 		_ADR	STORE			// restore radix
 4948 6204 BB2E0000 		_UNNEST
 4949              	
 4950              	/*******************************
 4951              	   TRACE. display in hexadecimal
 4952              	   TRACE. use a different buffer 
 4953              	   than DOT  to avoid current 
 4954              	   display overwrite.
 4955              	*******************************/ 
 4956              	TDOT: // ( u -- )
 4957 6208 504700BF 		_NEST 
 4958 620c F9380000 		_ADR BASE 
 4959 6210 75310000 		_ADR AT 
 4960 6214 05320000 		_ADR TOR
 4961 6218 8D420000 		_ADR HEX  
 4962 621c 8D390000 		_ADR HLD 
 4963 6220 75310000 		_ADR AT 
 4964 6224 05320000 		_ADR TOR   // R: base *hold 
 4965 6228 E93E0000 		_ADR HERE 
 4966 622c DF300000 		_DOLIT 160 
 4966      A0000000 
ARM GAS  forth.s 			page 212


 4967 6234 D5330000 		_ADR PLUS
 4968 6238 99320000 		_ADR DUPP 
 4969 623c 05320000 		_ADR TOR  
 4970 6240 8D390000 		_ADR HLD 
 4971 6244 61310000 		_ADR STORE
 4972 6248 DF300000 		_DOLIT 0  
 4972      00000000 
 4973 6250 DD410000 		_ADR DIGS  
 4974 6254 79320000 		_ADR DROP
 4975 6258 DF300000 		_DOLIT '$'
 4975      24000000 
 4976 6260 59410000 		_ADR HOLD 
 4977 6264 8D390000 		_ADR HLD 
 4978 6268 75310000 		_ADR AT
 4979 626c A1310000 		_ADR RFROM   
 4980 6270 D9320000 		_ADR OVER 
 4981 6274 E5330000 		_ADR SUBB 
 4982 6278 29450000 		_ADR SPACE 
 4983 627c 7D450000 		_ADR TYPEE 
 4984 6280 A1310000 		_ADR RFROM 
 4985 6284 8D390000 		_ADR HLD 
 4986 6288 61310000 		_ADR STORE 
 4987 628c A1310000 		_ADR RFROM 
 4988 6290 F9380000 		_ADR BASE 
 4989 6294 61310000 		_ADR STORE 
 4990 6298 BB2E0000 		_UNNEST 
 4991              	
 4992              	/**********************
 4993              	   .S	  ( ... -- ... )
 4994              	 	Display the contents 
 4995              		of the data stack.
 4996              	*************************/
 4997 629c 64610000 		_HEADER DOTS,2,".S"
 4997      022E5300 
 4998 62a4 504700BF 		_NEST
 4999 62a8 913E0000 		_ADR	DEPTH	// stack depth
 5000 62ac 05320000 		_ADR	TOR		// start count down loop
 5001 62b0 47310000 		_BRAN	DOTS2  // skip first pass
 5001      C4620000 
 5002              	DOTS1:
 5003 62b8 D5310000 		_ADR	RAT
 5004 62bc B53E0000 		_ADR	PICK
 5005 62c0 09620000 		_ADR	TDOT // index stack, display contents
 5006              	DOTS2:
 5007 62c4 01310000 		_DONXT	DOTS1 // loop till done
 5007      B8620000 
 5008 62cc B1450000 		_ADR	CR 
 5009 62d0 BB2E0000 		_UNNEST
 5010              	
 5011              	RBASE: 
 5012 62d4 47F8046D 		_PUSH 
 5013 62d8 4FF68076 		_MOV32 TOS,RPP 
 5013      C2F20106 
 5014 62e0 FCF7E8BD 		_NEXT 
 5015              	
 5016              	
 5017              	/**************************
ARM GAS  forth.s 			page 213


 5018              	  R.  display return stack 
 5019              	**************************/
 5020              	RDOT: 
 5021 62e4 504700BF 		_NEST 
 5022 62e8 D5620000 		_ADR RBASE
 5023 62ec 65320000 		_ADR RPAT 
 5024 62f0 E5330000 		_ADR SUBB
 5025 62f4 B5340000 		_ADR CELLSL   
 5026 62f8 DF300000 		_DOLIT 2
 5026      02000000 
 5027 6300 E5330000 		_ADR SUBB 
 5028 6304 05320000 		_ADR TOR
 5029 6308 D5620000 		_ADR RBASE 
 5030 630c 81340000 	1:	_ADR CELLM 
 5031 6310 99320000 		_ADR DUPP 
 5032 6314 75310000 		_ADR AT 
 5033 6318 09620000 		_ADR TDOT 
 5034 631c A1310000 		_ADR RFROM   
 5035 6320 41340000 		_ADR ONEM 
 5036 6324 99320000 		_ADR DUPP
 5037 6328 05320000 		_ADR TOR 
 5038 632c 05370000 		_ADR ZEQUAL   
 5039 6330 1F310000 		_QBRAN 1b
 5039      0C630000 
 5040 6338 A1310000 		_ADR RFROM  
 5041 633c A5350000 		_ADR DDROP
 5042 6340 B1450000 		_ADR CR   
 5043 6344 BB2E0000 		_UNNEST 
 5044              	
 5045              	/**************************
 5046              		TRACE ( -- )
 5047              		display stacks content 
 5048              	**************************/
 5049 6348 A0620000 		_HEADER TRACE,5,"TRACE"
 5049      05545241 
 5049      434500BF 
 5050 6354 504700BF 		_NEST
 5051 6358 B1450000 		_ADR CR 
 5052 635c DF300000 		_DOLIT '>' 
 5052      3E000000 
 5053 6364 DF300000 		_DOLIT 'S'
 5053      53000000 
 5054 636c 7D2F0000 		_ADR EMIT 
 5055 6370 7D2F0000 		_ADR EMIT  
 5056 6374 A5620000 		_ADR DOTS
 5057 6378 DF300000 		_DOLIT '>'
 5057      3E000000 
 5058 6380 DF300000 		_DOLIT 'R'
 5058      52000000 
 5059 6388 7D2F0000 		_ADR EMIT 
 5060 638c 7D2F0000 		_ADR EMIT 
 5061 6390 E5620000 		_ADR RDOT 
 5062 6394 BB2E0000 		_UNNEST 
 5063              	
 5064              	
 5065              	/****************************
 5066              	  >BODY  ( xt -- adr )
ARM GAS  forth.s 			page 214


 5067              	  get parameter field address
 5068              	  from code field address 
 5069              	****************************/
 5070 6398 4C630000 		_HEADER TOBODY,5,">BODY"
 5070      053E424F 
 5070      445900BF 
 5071 63a4 06F11006 		add TOS,#4*CELLL   
 5072 63a8 FCF784BD 		_NEXT 		
 5073              	
 5074              	/*****************************
 5075              		>VECTOR ( xt -- adr )
 5076              		for words defined by 
 5077              		CREATE  return 
 5078              		address vector slot 
 5079              		for DOES> 
 5080              	hidden word.	
 5081              	*****************************/
 5082              	TOVECTOR:
 5083 63ac 06F10806 		add TOS,#2*CELLL
 5084 63b0 FCF780BD 		_NEXT 
 5085              	
 5086              	/*****************************
 5087              	    >NFA	( cfa -- nfa | F )
 5088              	 	Convert code address 
 5089              		to a name address.
 5090              	*****************************/
 5091 63b4 9C630000 		_HEADER TONFA,4,">NFA"
 5091      043E4E46 
 5091      410000BF 
 5092 63c0 504700BF 		_NEST
 5093 63c4 05320000 		_ADR	TOR			//  
 5094 63c8 A5390000 		_ADR	CNTXT			//  va
 5095 63cc 75310000 		_ADR	AT			//  nfa
 5096              	TNAM1:
 5097 63d0 99320000 		_ADR	DUPP			//  nfa nfa
 5098 63d4 1F310000 		_QBRAN	TNAM2	//  vocabulary end, no match
 5098      04640000 
 5099 63dc 99320000 		_ADR	DUPP			//  nfa nfa
 5100 63e0 F54A0000 		_ADR	TOCFA			//  nfa cfa
 5101 63e4 D5310000 		_ADR	RAT			//  nfa cfa code
 5102 63e8 7D330000 		_ADR	XORR			//  nfa f --
 5103 63ec 1F310000 		_QBRAN	TNAM2
 5103      04640000 
 5104 63f4 81340000 		_ADR	CELLM			//  la 
 5105 63f8 75310000 		_ADR	AT			//  next_nfa
 5106 63fc 47310000 		_BRAN	TNAM1
 5106      D0630000 
 5107              	TNAM2:	
 5108 6404 A1310000 		_ADR	RFROM
 5109 6408 79320000 		_ADR	DROP			//  0|nfa --
 5110 640c BB2E0000 		_UNNEST			// 0
 5111              	
 5112              	
 5113              	/********************************
 5114              	    .ID	 ( na -- )
 5115              	 	Display the name at address.
 5116              	********************************/
ARM GAS  forth.s 			page 215


 5117 6410 B8630000 		_HEADER DOTID,3,".ID"
 5117      032E4944 
 5118 6418 504700BF 		_NEST
 5119 641c E5340000 		_ADR	QDUP			// if zero no name
 5120 6420 1F310000 		_QBRAN	DOTI1
 5120      44640000 
 5121 6428 49380000 		_ADR	COUNT
 5122 642c DF300000 		_DOLIT	0x1F
 5122      1F000000 
 5123 6434 55330000 		_ADR	ANDD			// mask lexicon bits
 5124 6438 29450000 		_ADR	SPACE 
 5125 643c 7D450000 		_ADR	TYPEE
 5126 6440 BB2E0000 		_UNNEST			// display name string
 5127              	DOTI1:
 5128 6444 0D460000 		_DOTQP	9," {noName}"
 5128      09207B6E 
 5128      6F4E616D 
 5128      657D00BF 
 5129 6454 BB2E0000 		_UNNEST
 5130              	
 5131              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 5132              	.if WANT_SEE 
 5133              	/*******************************
 5134              	    SEE	 ( -- //  string> )
 5135              	 	A simple decompiler.
 5136              	*******************************/
 5137              		_HEADER SEE,3,"SEE"
 5138              		_NEST
 5139              		_ADR	TICK	//  ca --, starting address
 5140              		_ADR	CR	
 5141              		_DOLIT	20
 5142              		_ADR	TOR
 5143              	SEE1:
 5144              		_ADR	CELLP			//  a
 5145              		_ADR	DUPP			//  a a
 5146              		_ADR	DECOMP		//  a
 5147              		_DONXT	SEE1
 5148              		_ADR	DROP
 5149              		_UNNEST
 5150              	
 5151              	/*************************
 5152              	 	DECOMPILE ( a -- )
 5153              	 	Convert code in a.  
 5154              		Display name of command or as data.
 5155              	*************************************/
 5156              		_HEADER DECOMP,9,"DECOMPILE"
 5157              		_NEST
 5158              		_ADR	DUPP			//  a a
 5159              	// 	_ADR	TOR			//  a
 5160              		_ADR	AT			//  a code
 5161              		_ADR	DUPP			//  a code code
 5162              		_DOLIT	0xF800D000 //0xF800F800
 5163              		_ADR	ANDD
 5164              		_DOLIT	0xF000D000 //0xF800F000
 5165              		_ADR	EQUAL			//  a code ?
 5166              		_ADR	INVER 
 5167              		_QBRAN	DECOM2	//  not a command
ARM GAS  forth.s 			page 216


 5168              		//  a valid_code --, extract address and display name
 5169              		MOVW	IP,#0xFFE
 5170              		MOV	WP,TOS
 5171              		LSL	TOS,TOS,#21		//  get bits 22-12
 5172              		ASR	TOS,TOS,#9		//  with sign extension
 5173              		LSR	WP,WP,#15		//  get bits 11-1
 5174              		AND	WP,WP,IP		//  retain only bits 11-1
 5175              		ORR	TOS,TOS,WP		//  get bits 22-1
 5176              		NOP
 5177              		_ADR	OVER			//  a offset a
 5178              		_ADR	PLUS			//  a target-4
 5179              		_ADR	CELLP			//  a target
 5180              		_ADR	TONFA			//  a na/0 --, is it a name?
 5181              		_ADR	QDUP			//  name address or zero
 5182              		_QBRAN	DECOM1
 5183              		_ADR	SPACE			//  a na
 5184              		_ADR	DOTID			//  a --, display name
 5185              	// 	_ADR	RFROM			//  a
 5186              		_ADR	DROP
 5187              		_UNNEST
 5188              	DECOM1:	// _ADR	RFROM		//  a
 5189              		_ADR	AT			//  data
 5190              		_ADR	UDOT			//  display data
 5191              		_UNNEST
 5192              	DECOM2:
 5193              		_ADR	UDOT
 5194              	// 	_ADR	RFROM
 5195              		_ADR	DROP
 5196              		_UNNEST
 5197              	.endif 
 5198              	
 5199              	
 5200              	/*********************
 5201              	    WORDS	( -- )
 5202              	 	Display the names 
 5203              		in the context vocabulary.
 5204              	*******************************/
 5205 6458 14640000 		_HEADER WORDS,5,"WORDS"
 5205      05574F52 
 5205      445300BF 
 5206 6464 504700BF 		_NEST
 5207 6468 B1450000 		_ADR	CR
 5208 646c A5390000 		_ADR	CNTXT
 5209 6470 75310000 		_ADR	AT			// only in context
 5210              	WORS1:
 5211 6474 E5340000 		_ADR	QDUP			// ?at end of list
 5212 6478 1F310000 		_QBRAN	WORS2
 5212      9C640000 
 5213 6480 99320000 		_ADR	DUPP
 5214 6484 29450000 		_ADR	SPACE
 5215 6488 19640000 		_ADR	DOTID			// display a name
 5216 648c 81340000 		_ADR	CELLM
 5217 6490 75310000 		_ADR	AT
 5218 6494 47310000 		_BRAN	WORS1
 5218      74640000 
 5219              	WORS2:
 5220 649c BB2E0000 		_UNNEST
ARM GAS  forth.s 			page 217


 5221              	
 5222              	
 5223              	/*************************
 5224              		MARKER <string> ( -- )
 5225              	    create forget point 
 5226              		in dictionary 
 5227              	*************************/	
 5228 64a0 5C640000 		_HEADER MARKER,6,"MARKER"
 5228      064D4152 
 5228      4B455200 
 5229 64ac 504700BF 		_NEST
 5230 64b0 C15F0000 		_ADR	CREAT 
 5231 64b4 215E0000 		_ADR	DODOES
 5232 64b8 BB2E0000 		_UNNEST 
 5233 64bc 504700BF 		_NEST 
 5234 64c0 DF300000 		_DOLIT	4*CELLL  
 5234      10000000 
 5235 64c8 E5330000 		_ADR	SUBB
 5236 64cc 31340000 		_ADR	ONEP  
 5237 64d0 C1630000 		_ADR	TONFA 
 5238 64d4 81340000 		_ADR	CELLM
 5239 64d8 75310000 		_ADR	AT  
 5240 64dc 093A0000 		_ADR	LAST 
 5241 64e0 61310000 		_ADR	STORE 
 5242 64e4 DD5C0000 		_ADR	OVERT
 5243 64e8 BB2E0000 		_UNNEST 
 5244              	
 5245              	/*********************************
 5246              		ARRAY "name" ( n -- )
 5247              	    create an array of n elements 
 5248              	*********************************/
 5249 64ec A4640000 		_HEADER ARRAY,5,"ARRAY"
 5249      05415252 
 5249      415900BF 
 5250 64f8 504700BF 		_NEST 
 5251 64fc D54A0000 		_ADR	TOKEN
 5252 6500 E15B0000 		_ADR	SNAME
 5253 6504 DD5C0000 		_ADR	OVERT
 5254 6508 C52E0000 		_ADR	COMPI_NEST
 5255 650c DF300000 		_DOLIT	DO_ARRAY
 5255      38650000 
 5256 6514 5D5D0000 		_ADR	CALLC
 5257 6518 DF300000 		_DOLIT	UNNEST 
 5257      BA2E0000 
 5258 6520 5D5D0000 		_ADR	CALLC  
 5259 6524 DF300000 		_DOLIT  4 
 5259      04000000 
 5260 652c F5330000 		_ADR    STAR 
 5261 6530 49530000 		_ADR    ALLOT 
 5262 6534 BB2E0000 		_UNNEST 	
 5263              	
 5264              	// does> du array
 5265              	DO_ARRAY:
 5266 6538 504700BF 		_NEST  
 5267 653c DF300000 		_DOLIT 4 
 5267      04000000 
 5268 6544 F5330000 		_ADR STAR  
ARM GAS  forth.s 			page 218


 5269 6548 D5310000 		_ADR RAT  
 5270 654c 71340000 		_ADR CELLP 
 5271 6550 D5330000 		_ADR PLUS  
 5272 6554 BB2E0000 		_UNNEST 
 5273              	
 5274              	
 5275              	/****************
 5276              	  cold start
 5277              	*****************/
 5278              	
 5279              	/**********************************
 5280              	    VER	 ( -- n )
 5281              	 	Return the version 
 5282              		number of this implementation.
 5283              	hidden word used by COLD
 5284              	**********************************/
 5285              	VERSN:
 5286 6558 504700BF 		_NEST
 5287 655c DF300000 		_DOLIT	VER*256+EXT
 5287      00010000 
 5288 6564 BB2E0000 		_UNNEST
 5289              	
 5290              	/*********************
 5291              	    hi	  ( -- )
 5292              	 	Display the sign-on 
 5293              		message.
 5294              	***********************/
 5295 6568 F0640000 		_HEADER HI,2,"HI"
 5295      02484900 
 5296 6570 504700BF 		_NEST
 5297 6574 B1450000 		_ADR	CR	// initialize I/O
 5298 6578 0D460000 		_DOTQP	17, "beyond Jupiter, v" 
 5298      11626579 
 5298      6F6E6420 
 5298      4A757069 
 5298      7465722C 
 5299 6590 F9380000 		_ADR	BASE
 5300 6594 75310000 		_ADR	AT
 5301 6598 8D420000 		_ADR	HEX	// save radix
 5302 659c 59650000 		_ADR	VERSN
 5303 65a0 39410000 		_ADR	BDIGS
 5304 65a4 DF300000 		_DOLIT  0 
 5304      00000000 
 5305 65ac BD410000 		_ADR	DIG
 5306 65b0 BD410000 		_ADR	DIG
 5307 65b4 DF300000 		_DOLIT	'.'
 5307      2E000000 
 5308 65bc 59410000 		_ADR	HOLD
 5309 65c0 DD410000 		_ADR	DIGS
 5310 65c4 39420000 		_ADR	EDIGS
 5311 65c8 7D450000 		_ADR	TYPEE	// format version number
 5312 65cc F9380000 		_ADR	BASE
 5313 65d0 61310000 		_ADR	STORE
 5314 65d4 B1450000 		_ADR	CR
 5315 65d8 BB2E0000 		_UNNEST			// restore radix
 5316              	
 5317              	/***********************
ARM GAS  forth.s 			page 219


 5318              	   HI_BOTH ( -- )
 5319              	   display sign-on 
 5320              	   on both CONSOLE
 5321              	***********************/
 5322              	HI_BOTH:
 5323 65dc 504700BF 	    _NEST 
 5324 65e0 010C0000 		_ADR LOCAL 
 5325 65e4 310C0000 		_ADR CONSOLE 
 5326 65e8 71650000 		_ADR HI 
 5327 65ec 190C0000 		_ADR SERIAL 
 5328 65f0 310C0000 		_ADR CONSOLE 
 5329 65f4 71650000 		_ADR HI
 5330 65f8 BB2E0000 		_UNNEST 
 5331              	
 5332              	/**********************
 5333              	 check if PS2 keyboard 
 5334              	 present.
 5335              	**********************/
 5336              	PS2_QUERY: 
 5337 65fc 504700BF 		_NEST 
 5338 6600 DF300000 		_DOLIT 400 
 5338      90010000 
 5339 6608 15300000 		_ADR PAUSE
 5340 660c 211A0000 		_ADR PS2_QKEY
 5341 6610 1F310000 		_QBRAN 1f
 5341      2C660000 
 5342 6618 DF300000 		_DOLIT BAT_OK 
 5342      AA000000 
 5343 6620 7D330000 		_ADR XORR 
 5344 6624 1F310000 		_QBRAN 9f 
 5344      70660000 
 5345 662c 091C0000 	1:	_ADR KBD_RST
 5346 6630 DF300000 		_DOLIT BAT_OK 
 5346      AA000000 
 5347 6638 7D330000 		_ADR XORR  
 5348 663c 1F310000 		_QBRAN 9f  
 5348      70660000 
 5349              	// no ps2 keyboard 
 5350              	// swith to serial console
 5351 6644 B1450000 		_ADR CR 
 5352 6648 0D460000 		_DOTQP 25,"no PS2 keyboard detected."
 5352      196E6F20 
 5352      50533220 
 5352      6B657962 
 5352      6F617264 
 5353 6668 190C0000 		_ADR SERIAL 
 5354 666c 310C0000 		_ADR CONSOLE 
 5355 6670 BB2E0000 	9:	_UNNEST 
 5356              	
 5357              	/*************************
 5358              	   check PA8 to 
 5359              	   select console 
 5360              	   PA8 -> low  LOCAL 
 5361              	   PA8 -> high SERIAL 
 5362              	*************************/
 5363              	IF_SENSE:
 5364 6674 504700BF 		_NEST 
ARM GAS  forth.s 			page 220


 5365 6678 010C0000 		_ADR LOCAL 
 5366 667c DF300000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 5366      10000240 
 5367 6684 75310000 		_ADR AT 
 5368 6688 DF300000 		_DOLIT (1<<8)
 5368      00010000 
 5369 6690 55330000 		_ADR ANDD 
 5370 6694 1F310000 		_QBRAN 9f 
 5370      A0660000 
 5371 669c 31340000 		_ADR ONEP 
 5372 66a0 310C0000 	9:  _ADR CONSOLE 
 5373 66a4 BB2E0000 		_UNNEST 
 5374              	
 5375              	/****************************
 5376              	   display READY on active
 5377              	   console
 5378              	***************************/
 5379              	READY:
 5380 66a8 504700BF 	    _NEST 
 5381 66ac 0D460000 		_DOTQP 5,"READY"
 5381      05524541 
 5381      445900BF 
 5382 66b8 B1450000 		_ADR  CR 
 5383 66bc BB2E0000 	    _UNNEST 
 5384              	
 5385              	/********************
 5386              	    COLD	( -- )
 5387              	 	The high level cold 
 5388              		start sequence.
 5389              	**************************/
 5390 66c0 6C650000 		.word	LINK 
 5391              		LINK = . 
 5392 66c4 04       	_LASTN:	.byte  4
 5393 66c5 434F4C44 		.ascii "COLD"
 5394 66c9 0000BF   		.p2align 2	
 5395              	COLD:
 5396 66cc 00B5F9F7 		_CALL forth_init 
 5396      33FF5DF8 
 5396      04EB
 5397 66d6 DFF85CC0 		ldr IP,=COLD1 
 5398 66da FCF7EBBB 		_NEXT
 5399 66de 00BF     		.p2align 2 
 5400              	COLD1:
 5401 66e0 DF300000 		_DOLIT  0 
 5401      00000000 
 5402 66e8 49300000 		_ADR ULED // turn off user LED 
 5403 66ec DF300000 		_DOLIT	UZERO
 5403      64080000 
 5404 66f4 DF300000 		_DOLIT	UPP
 5404      00000020 
 5405 66fc DF300000 		_DOLIT	ULAST-UZERO
 5405      C0000000 
 5406 6704 D93F0000 		_ADR	WMOVE 			// initialize user area
 5407 6708 05520000 		_ADR	PRESE			// initialize stack and TIB
 5408 670c B51E0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 5409 6710 FD650000 		_ADR 	PS2_QUERY  
 5410 6714 E1380000 		_ADR	TBOOT
ARM GAS  forth.s 			page 221


 5411 6718 753F0000 		_ADR	ATEXE			// application boot
 5412 671c DD5C0000 		_ADR	OVERT
 5413 6720 75660000 		_ADR	IF_SENSE
 5414 6724 A9660000 		_ADR    READY 
 5415 6728 47310000 		_BRAN	QUIT			// start interpretation
 5415      1C520000 
 5416              	COLD2:
 5417              		.p2align 2 	
 5418              	CTOP:
 5419 6730 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 5420              	
 5421              	
 5422 6734 E0660000 	  .end 
ARM GAS  forth.s 			page 222


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 223


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 224


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 225


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 226


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 227


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020000000 UPP
          macros.inc:54     *ABS*:0000000020000512 DTOP
          macros.inc:55     *ABS*:000000002001812c DEND
          macros.inc:56     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:58     *ABS*:0000000000000040 COMPO
          macros.inc:59     *ABS*:0000000000000080 IMEDD
          macros.inc:60     *ABS*:00000000ffffff1f MASKK
          macros.inc:62     *ABS*:0000000000000004 CELLL
          macros.inc:63     *ABS*:000000000000000a BASEE
          macros.inc:64     *ABS*:0000000000000008 VOCSS
          macros.inc:66     *ABS*:0000000000000008 BKSPP
          macros.inc:67     *ABS*:000000000000000a LF
          macros.inc:68     *ABS*:000000000000000d CRR
          macros.inc:69     *ABS*:000000000000001b ERR
          macros.inc:70     *ABS*:0000000000000027 TIC
          macros.inc:75     *ABS*:0000000000000004 RNDSEED
          macros.inc:76     *ABS*:0000000000000008 TICKS
          macros.inc:77     *ABS*:000000000000000c CD_TIMER
          macros.inc:78     *ABS*:0000000000000010 BOOT
          macros.inc:79     *ABS*:0000000000000014 STDIN
          macros.inc:80     *ABS*:0000000000000018 STDOUT
          macros.inc:81     *ABS*:000000000000001c NBASE
          macros.inc:82     *ABS*:0000000000000020 BCHAR
          macros.inc:83     *ABS*:0000000000000024 TMP
          macros.inc:84     *ABS*:0000000000000028 CSPAN
ARM GAS  forth.s 			page 228


          macros.inc:85     *ABS*:000000000000002c TOIN
          macros.inc:86     *ABS*:0000000000000030 SRC
          macros.inc:87     *ABS*:0000000000000030 NTIBB
          macros.inc:88     *ABS*:0000000000000034 TIBUF
          macros.inc:89     *ABS*:0000000000000038 SRCID
             forth.s:3570   .text:000000000000511c EVAL
          macros.inc:91     *ABS*:0000000000000040 VHOLD
          macros.inc:92     *ABS*:0000000000000044 CTXT
          macros.inc:93     *ABS*:0000000000000048 FORTH_CTOP
          macros.inc:94     *ABS*:000000000000004c USER_CTOP
          macros.inc:95     *ABS*:0000000000000050 LASTN
          macros.inc:96     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:97     *ABS*:0000000000000054 RX_QUEUE
          macros.inc:98     *ABS*:0000000000000064 RX_HEAD
          macros.inc:99     *ABS*:0000000000000068 RX_TAIL
          macros.inc:100    *ABS*:000000000000006c VID_CNTR
          macros.inc:101    *ABS*:0000000000000070 VID_STATE
          macros.inc:102    *ABS*:0000000000000074 VID_FIELD
          macros.inc:103    *ABS*:0000000000000078 VID_BUFFER
          macros.inc:104    *ABS*:000000000000007c KBD_STRUCT
          macros.inc:105    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:106    *ABS*:0000000000000080 KBD_QUEUE
          macros.inc:107    *ABS*:0000000000000090 KBD_QHEAD
          macros.inc:108    *ABS*:0000000000000094 KBD_QTAIL
          macros.inc:109    *ABS*:0000000000000098 ROW
          macros.inc:110    *ABS*:000000000000009c COL
          macros.inc:111    *ABS*:00000000000000a0 BK_COLOR
          macros.inc:112    *ABS*:00000000000000a4 PEN_COLOR
          macros.inc:113    *ABS*:00000000000000a8 VFPSW
          macros.inc:114    *ABS*:00000000000000ac VFBASE
          macros.inc:115    *ABS*:00000000000000b0 BEEP_DTMR
          macros.inc:116    *ABS*:00000000000000b4 CSTATE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000e28 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000b0c uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001704 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002eb4 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3634   .text:0000000000005204 PRESE
             forth.s:2650   .text:000000000000460c DOTQP
              init.s:162    .text:0000000000000032 $t
ARM GAS  forth.s 			page 229


              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002f00 CFSR
             forth.s:579    .text:0000000000003298 DUPP
             forth.s:505    .text:0000000000003204 TOR
             forth.s:340    .text:00000000000030de DOLIT
             forth.s:1329   .text:00000000000038f8 BASE
             forth.s:426    .text:0000000000003160 STORE
             forth.s:2734   .text:0000000000004708 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:463    .text:00000000000031a0 RFROM
             forth.s:676    .text:0000000000003354 ANDD
             forth.s:381    .text:000000000000311e QBRAN
             forth.s:145    .text:0000000000002f20 BFAR
             forth.s:192    .text:0000000000002f7c EMIT
             forth.s:2556   .text:0000000000004528 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:000000000000220c FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2602   .text:00000000000045b0 CR
             forth.s:436    .text:0000000000003174 AT
             forth.s:742    .text:00000000000033e4 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2752   .text:000000000000473c DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:872    .text:00000000000034e4 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:733    .text:00000000000033d4 PLUS
             forth.s:1252   .text:0000000000003848 COUNT
             forth.s:2584   .text:000000000000457c TYPEE
             forth.s:1068   .text:00000000000036a0 CLZ
             forth.s:587    .text:00000000000032a8 SWAP
             forth.s:724    .text:00000000000033c4 LSHIFT
               fpu.s:123    .text:000000000000222c CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3645   .text:000000000000521c QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
ARM GAS  forth.s 			page 230


              init.s:311    .text:0000000000000294 $d
             forth.s:3436   .text:0000000000004f78 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:275    .text:0000000000003048 ULED
             forth.s:1302   .text:00000000000038b0 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:715    .text:00000000000033ac RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:00000000000021ae fpu_init
          ser-term.s:56     .text:0000000000000b3a ser_init
             tvout.s:74     .text:0000000000000d78 tv_init
           ps2_kbd.s:307    .text:0000000000001924 kbd_init
         spi-flash.s:41     .text:0000000000001d38 flash_spi_init
             forth.s:5395   .text:00000000000066cc COLD
             forth.s:83     .text:0000000000002eac NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:910    .text:0000000000000924 ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:5322   .text:00000000000065dc HI_BOTH
           ps2_kbd.s:396    .text:0000000000001a20 PS2_QKEY
             tvout.s:563    .text:00000000000012e8 TV_EMIT
ARM GAS  forth.s 			page 231


             forth.s:3504   .text:0000000000005028 INTER
             forth.s:5392   .text:00000000000066c4 _LASTN
             forth.s:5418   .text:0000000000006730 CTOP
             forth.s:5391   .text:00000000000066c4 LINK
              init.s:915    .text:0000000000000924 $d
       environment.s:32     .text:0000000000000954 _ENVQ
       environment.s:32     .text:0000000000000964 ENVQ
       environment.s:35     .text:0000000000000968 $d
             forth.s:1407   .text:00000000000039a4 CNTXT
       environment.s:215    .text:0000000000000aea _ENVLASTN
             forth.s:562    .text:0000000000003278 DROP
             forth.s:791    .text:0000000000003440 ONEM
             forth.s:3192   .text:0000000000004c68 NAMEQ
             forth.s:349    .text:00000000000030f4 EXECU
             forth.s:410    .text:0000000000003146 BRAN
             forth.s:90     .text:0000000000002eba UNNEST
       environment.s:201    .text:0000000000000ac6 ENVLNK
       environment.s:82     .text:00000000000009c8 _CNTDSTR
       environment.s:82     .text:00000000000009d8 $t
       environment.s:82     .text:00000000000009d8 CNTDSTR
       environment.s:223    .text:0000000000000b00 flag_true
       environment.s:95     .text:00000000000009e2 $d
       environment.s:95     .text:00000000000009e6 _SLHOLD
       environment.s:95     .text:00000000000009ec $t
       environment.s:95     .text:00000000000009ec SLHOLD
       environment.s:107    .text:00000000000009f6 $d
       environment.s:107    .text:00000000000009fa _SLPAD
       environment.s:107    .text:0000000000000a00 SLPAD
       environment.s:118    .text:0000000000000a0a $d
       environment.s:118    .text:0000000000000a0e _ADRBITS
       environment.s:118    .text:0000000000000a20 $t
       environment.s:118    .text:0000000000000a20 ADRBITS
       environment.s:130    .text:0000000000000a2a $d
       environment.s:130    .text:0000000000000a2e _FLOORED
       environment.s:130    .text:0000000000000a36 $t
       environment.s:130    .text:0000000000000a38 FLOORED
       environment.s:141    .text:0000000000000a3a $d
       environment.s:141    .text:0000000000000a3e _MAXCHAR
       environment.s:141    .text:0000000000000a48 MAXCHAR
       environment.s:152    .text:0000000000000a52 $d
       environment.s:152    .text:0000000000000a56 _MAXD
       environment.s:152    .text:0000000000000a5c $t
       environment.s:152    .text:0000000000000a5c MAXD
       environment.s:165    .text:0000000000000a76 $d
       environment.s:165    .text:0000000000000a7a _MAXN
       environment.s:165    .text:0000000000000a80 $t
       environment.s:165    .text:0000000000000a80 MAXN
       environment.s:176    .text:0000000000000a8e $d
       environment.s:176    .text:0000000000000a92 _MAXU
       environment.s:176    .text:0000000000000a98 $t
       environment.s:176    .text:0000000000000a98 MAXU
       environment.s:187    .text:0000000000000aa2 $d
       environment.s:187    .text:0000000000000aa6 _MAXUD
       environment.s:187    .text:0000000000000ab0 MAXUD
       environment.s:201    .text:0000000000000ac2 $d
       environment.s:201    .text:0000000000000ac6 _RSTKCELLS
       environment.s:201    .text:0000000000000adc RSTKCELLS
ARM GAS  forth.s 			page 232


       environment.s:213    .text:0000000000000ae6 $d
       environment.s:214    .text:0000000000000aea ENVLINK
       environment.s:217    .text:0000000000000af6 $t
       environment.s:218    .text:0000000000000af8 STKCELLS
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000b92 $d
          ser-term.s:90     .text:0000000000000b96 _SER_QKEY
          ser-term.s:90     .text:0000000000000ba0 SER_QKEY
          ser-term.s:110    .text:0000000000000bcc $d
          ser-term.s:110    .text:0000000000000bd0 _SER_EMIT
          ser-term.s:110    .text:0000000000000bdc SER_EMIT
          ser-term.s:124    .text:0000000000000bf6 $d
          ser-term.s:124    .text:0000000000000bfa _LOCAL
          ser-term.s:124    .text:0000000000000c00 $t
          ser-term.s:124    .text:0000000000000c00 LOCAL
          ser-term.s:133    .text:0000000000000c0c $d
          ser-term.s:133    .text:0000000000000c10 _SERIAL
          ser-term.s:133    .text:0000000000000c18 SERIAL
          ser-term.s:142    .text:0000000000000c24 $d
          ser-term.s:142    .text:0000000000000c28 _CONSOLE
          ser-term.s:142    .text:0000000000000c30 $t
          ser-term.s:142    .text:0000000000000c30 CONSOLE
          ser-term.s:164    .text:0000000000000c50 $d
          ser-term.s:164    .text:0000000000000c54 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000c60 ANSI_PARAM
          ser-term.s:166    .text:0000000000000c64 $d
             forth.s:783    .text:0000000000003430 ONEP
             forth.s:1787   .text:0000000000003d50 SLMOD
          ser-term.s:191    .text:0000000000000cd0 _ANSI_ESC
          ser-term.s:191    .text:0000000000000cd8 ANSI_ESC
          ser-term.s:193    .text:0000000000000cdc $d
          ser-term.s:203    .text:0000000000000cfc _SER_AT
          ser-term.s:203    .text:0000000000000d04 SER_AT
          ser-term.s:205    .text:0000000000000d08 $d
          ser-term.s:219    .text:0000000000000d38 _SER_CLS
          ser-term.s:219    .text:0000000000000d40 $t
          ser-term.s:219    .text:0000000000000d40 SER_CLS
          ser-term.s:221    .text:0000000000000d44 $d
          ser-term.s:228    .text:0000000000000d68 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
ARM GAS  forth.s 			page 233


             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000d78 $t
             tvout.s:150    .text:0000000000000e54 state_vsync
             tvout.s:191    .text:0000000000000ea8 state_pre_video
             tvout.s:202    .text:0000000000000eba state_video_out
             tvout.s:237    .text:0000000000000f18 state_post_video
             tvout.s:254    .text:0000000000000f3e tv_isr_exit
             tvout.s:180    .text:0000000000000e8e sync_end
             tvout.s:246    .text:0000000000000f2a frame_end
             tvout.s:264    .text:0000000000000f40 $d
             tvout.s:264    .text:0000000000000f44 _BACKCOLOR
             tvout.s:264    .text:0000000000000f50 BACKCOLOR
             tvout.s:271    .text:0000000000000f5c $d
             tvout.s:271    .text:0000000000000f60 _PENCOLOR
             tvout.s:271    .text:0000000000000f6a $t
             tvout.s:271    .text:0000000000000f6c PENCOLOR
             tvout.s:278    .text:0000000000000f78 $d
             tvout.s:278    .text:0000000000000f7c _CURSOR_COL
             tvout.s:278    .text:0000000000000f84 CURSOR_COL
             tvout.s:285    .text:0000000000000f90 $d
             tvout.s:285    .text:0000000000000f94 _CURSOR_ROW
             tvout.s:285    .text:0000000000000f98 $t
             tvout.s:285    .text:0000000000000f98 CURSOR_ROW
             tvout.s:292    .text:0000000000000fa4 $d
             tvout.s:292    .text:0000000000000fa8 _ROWY
             tvout.s:292    .text:0000000000000fae $t
             tvout.s:292    .text:0000000000000fb0 ROWY
             tvout.s:299    .text:0000000000000fbc $d
             tvout.s:299    .text:0000000000000fc0 _COLX
             tvout.s:299    .text:0000000000000fc6 $t
             tvout.s:299    .text:0000000000000fc8 COLX
             tvout.s:306    .text:0000000000000fd4 $d
             tvout.s:306    .text:0000000000000fd8 _FONT
             tvout.s:306    .text:0000000000000fe0 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000fec $d
             tvout.s:313    .text:0000000000000ff0 _VIDBUFF
             tvout.s:313    .text:0000000000000ff8 $t
             tvout.s:313    .text:0000000000000ff8 VIDBUFF
             tvout.s:325    .text:0000000000001002 $d
             tvout.s:325    .text:0000000000001006 _PLOT
             tvout.s:325    .text:000000000000100c PLOT
             tvout.s:373    .text:0000000000001090 plot_op
             tvout.s:341    .text:0000000000001038 op_back
             tvout.s:350    .text:0000000000001052 op_pen
             tvout.s:359    .text:000000000000106c op_invert
ARM GAS  forth.s 			page 234


             tvout.s:363    .text:0000000000001074 op_xor
             tvout.s:373    .text:0000000000001090 $d
             tvout.s:378    .text:0000000000001098 _VSYNC
             tvout.s:378    .text:000000000000109e $t
             tvout.s:378    .text:00000000000010a0 VSYNC
             tvout.s:386    .text:00000000000010aa $d
             tvout.s:386    .text:00000000000010ae _CLS
             tvout.s:386    .text:00000000000010b2 $t
             tvout.s:386    .text:00000000000010b4 CLS
             tvout.s:410    .text:00000000000010f6 $d
             tvout.s:410    .text:00000000000010fa _CLRLINE
             tvout.s:410    .text:0000000000001102 $t
             tvout.s:410    .text:0000000000001104 CLRLINE
             tvout.s:412    .text:0000000000001108 $d
             forth.s:751    .text:00000000000033f4 STAR
             forth.s:2094   .text:0000000000004020 FILL
             tvout.s:427    .text:000000000000113c _SCROLLUP
             tvout.s:427    .text:0000000000001148 SCROLLUP
             tvout.s:429    .text:000000000000114c $d
             forth.s:2062   .text:0000000000003fd8 WMOVE
             tvout.s:448    .text:0000000000001194 _SCROLLDOWN
             tvout.s:448    .text:00000000000011a0 SCROLLDOWN
             tvout.s:450    .text:00000000000011a4 $d
             tvout.s:467    .text:00000000000011e4 _TV_CRLF
             tvout.s:467    .text:00000000000011ec $t
             tvout.s:467    .text:00000000000011ec TV_CRLF
             tvout.s:482    .text:000000000000120e $d
             tvout.s:482    .text:0000000000001212 _RIGHT
             tvout.s:482    .text:0000000000001218 $t
             tvout.s:482    .text:0000000000001218 RIGHT
             tvout.s:495    .text:000000000000122c $d
             tvout.s:495    .text:0000000000001230 _LEFT
             tvout.s:495    .text:0000000000001238 LEFT
             tvout.s:511    .text:0000000000001264 FONT_PIXEL
             tvout.s:518    .text:0000000000001274 INCR_X
             tvout.s:525    .text:0000000000001280 NEXT_PIXEL
             tvout.s:534    .text:0000000000001288 CHAR_ROW
             tvout.s:536    .text:000000000000128c $d
             forth.s:974    .text:00000000000035cc DDUP
             forth.s:484    .text:00000000000031d4 RAT
             forth.s:362    .text:0000000000003100 DONXT
             forth.s:965    .text:00000000000035b8 TDROP
             tvout.s:551    .text:00000000000012c8 CHAR_FONT
             tvout.s:552    .text:00000000000012c8 $t
             tvout.s:563    .text:00000000000012dc $d
             tvout.s:563    .text:00000000000012e0 _TV_EMIT
             tvout.s:563    .text:00000000000012e8 $t
             tvout.s:565    .text:00000000000012ec $d
             forth.s:1148   .text:000000000000375c ULESS
             tvout.s:593    .text:0000000000001370 CTRL_KEY
             forth.s:934    .text:000000000000357c ROT
             forth.s:454    .text:0000000000003194 CAT
             tvout.s:660    .text:0000000000001458 SHOW_CURSOR
             tvout.s:691    .text:00000000000014e0 HIDE_CURSOR
             forth.s:1123   .text:000000000000371c EQUAL
             tvout.s:650    .text:0000000000001438 BACK_SPACE
             tvout.s:618    .text:00000000000013e0 CAR_RET
ARM GAS  forth.s 			page 235


             tvout.s:629    .text:00000000000013f8 LN_FEED
             tvout.s:619    .text:00000000000013e0 $t
             tvout.s:620    .text:00000000000013e4 $d
             tvout.s:630    .text:00000000000013f8 $t
             tvout.s:631    .text:00000000000013fc $d
             forth.s:694    .text:000000000000337c XORR
             tvout.s:651    .text:0000000000001438 $t
             tvout.s:652    .text:000000000000143c $d
             tvout.s:660    .text:000000000000144c _SHOW_CURSOR
             tvout.s:660    .text:0000000000001458 $t
             tvout.s:663    .text:000000000000145c $d
             forth.s:864    .text:00000000000034d4 TWOSL
             forth.s:444    .text:0000000000003180 CSTOR
             forth.s:956    .text:00000000000035a4 DDROP
             tvout.s:691    .text:00000000000014d4 _HIDE_CURSOR
             tvout.s:691    .text:00000000000014e0 $t
             tvout.s:694    .text:00000000000014e4 $d
             forth.s:685    .text:0000000000003368 ORR
             tvout.s:704    .text:000000000000150c _TV_AT
             tvout.s:704    .text:0000000000001512 $t
             tvout.s:704    .text:0000000000001514 TV_AT
             tvout.s:719    .text:0000000000001538 $d
             tvout.s:719    .text:000000000000153c _INPUT
             tvout.s:719    .text:0000000000001542 $t
             tvout.s:719    .text:0000000000001544 INPUT
             tvout.s:721    .text:0000000000001548 $d
             forth.s:1969   .text:0000000000003f00 PAD
             forth.s:3332   .text:0000000000004e28 ACCEP
             forth.s:612    .text:00000000000032d8 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001574 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
ARM GAS  forth.s 			page 236


       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
ARM GAS  forth.s 			page 237


       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000001580 sc_ascii
         mcSaite.inc:100    .text:0000000000001634 shifted
         mcSaite.inc:151    .text:0000000000001694 altchar
         mcSaite.inc:167    .text:00000000000016a4 extended
         mcSaite.inc:191    .text:00000000000016cc controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
ARM GAS  forth.s 			page 238


           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000007d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000007c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:0000000000001702 $t
           ps2_kbd.s:179    .text:000000000000182e send_bit
           ps2_kbd.s:107    .text:0000000000001764 start_bit
           ps2_kbd.s:118    .text:0000000000001788 parity_bit
           ps2_kbd.s:125    .text:000000000000179c stop_bit
           ps2_kbd.s:152    .text:00000000000017f2 store_code
           ps2_kbd.s:253    .text:00000000000018c2 do_async_key
           ps2_kbd.s:204    .text:0000000000001872 send_parity
           ps2_kbd.s:211    .text:0000000000001884 send_stop
           ps2_kbd.s:218    .text:000000000000188e rx_ack_bit
           ps2_kbd.s:236    .text:00000000000018ae is_async_key
           ps2_kbd.s:286    .text:0000000000001912 async_keys
           ps2_kbd.s:378    .text:00000000000019f8 table_scan
           ps2_kbd.s:260    .text:00000000000018d4 set_async_key
           ps2_kbd.s:295    .text:0000000000001920 async_jump
           ps2_kbd.s:265    .text:00000000000018e2 shift_key
           ps2_kbd.s:273    .text:00000000000018f2 set_reset
           ps2_kbd.s:268    .text:00000000000018e8 ctrl_key
           ps2_kbd.s:271    .text:00000000000018ee alt_key
           ps2_kbd.s:287    .text:0000000000001912 $d
           ps2_kbd.s:340    .text:00000000000019a0 $d
           ps2_kbd.s:340    .text:00000000000019a4 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000019ae $t
           ps2_kbd.s:340    .text:00000000000019b0 KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000019c0 keycode
           ps2_kbd.s:365    .text:00000000000019e8 wait_code
           ps2_kbd.s:396    .text:0000000000001a12 $d
           ps2_kbd.s:396    .text:0000000000001a16 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001a6c inkey_exit
           ps2_kbd.s:418    .text:0000000000001a70 pause_key
           ps2_kbd.s:427    .text:0000000000001a86 do_modifiers
           ps2_kbd.s:436    .text:0000000000001a9e shift_down
           ps2_kbd.s:440    .text:0000000000001aa4 altchar_down
           ps2_kbd.s:444    .text:0000000000001aaa ctrl_down
           ps2_kbd.s:452    .text:0000000000001ac6 do_capslock
           ps2_kbd.s:478    .text:0000000000001aea kbd_send
           ps2_kbd.s:553    .text:0000000000001bde kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001bfc $d
           ps2_kbd.s:567    .text:0000000000001c00 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001c08 $t
           ps2_kbd.s:567    .text:0000000000001c08 KBD_RST
           ps2_kbd.s:591    .text:0000000000001c52 $d
           ps2_kbd.s:591    .text:0000000000001c56 _KBD_LED
ARM GAS  forth.s 			page 239


           ps2_kbd.s:591    .text:0000000000001c5e $t
           ps2_kbd.s:591    .text:0000000000001c60 KBD_LED
           ps2_kbd.s:616    .text:0000000000001cb4 $d
           ps2_kbd.s:616    .text:0000000000001cb8 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001cc4 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001cee $d
           ps2_kbd.s:633    .text:0000000000001cf2 _WKEY
           ps2_kbd.s:633    .text:0000000000001cfc WKEY
           ps2_kbd.s:635    .text:0000000000001d00 $d
           ps2_kbd.s:640    .text:0000000000001d18 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001d38 $t
         spi-flash.s:85     .text:0000000000001dda $d
         spi-flash.s:85     .text:0000000000001dde _CHIP_SEL
         spi-flash.s:85     .text:0000000000001de8 CHIP_SEL
         spi-flash.s:97     .text:0000000000001e06 $d
         spi-flash.s:97     .text:0000000000001e0a _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001e14 $t
         spi-flash.s:97     .text:0000000000001e14 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001e42 $d
         spi-flash.s:113    .text:0000000000001e46 _RD_BYTE
         spi-flash.s:113    .text:0000000000001e4e $t
         spi-flash.s:113    .text:0000000000001e50 RD_BYTE
         spi-flash.s:133    .text:0000000000001e78 $d
         spi-flash.s:133    .text:0000000000001e7c _WR_BYTE
         spi-flash.s:133    .text:0000000000001e84 $t
         spi-flash.s:133    .text:0000000000001e84 WR_BYTE
         spi-flash.s:151    .text:0000000000001ea8 $d
         spi-flash.s:151    .text:0000000000001eac _WR_DIS
         spi-flash.s:151    .text:0000000000001eb4 WR_DIS
         spi-flash.s:153    .text:0000000000001eb8 $d
         spi-flash.s:163    .text:0000000000001ed4 _WR_ENBL
         spi-flash.s:163    .text:0000000000001edc $t
         spi-flash.s:163    .text:0000000000001edc WR_ENBL
         spi-flash.s:165    .text:0000000000001ee0 $d
         spi-flash.s:175    .text:0000000000001efc _RD_SR
         spi-flash.s:175    .text:0000000000001f02 $t
         spi-flash.s:175    .text:0000000000001f04 RD_SR
         spi-flash.s:177    .text:0000000000001f08 $d
         spi-flash.s:185    .text:0000000000001f2c sr_cmd
         spi-flash.s:191    .text:0000000000001f33 _SEND_ADR
         spi-flash.s:191    .text:0000000000001f3c $t
         spi-flash.s:191    .text:0000000000001f3c SEND_ADR
         spi-flash.s:193    .text:0000000000001f40 $d
         spi-flash.s:208    .text:0000000000001f74 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001f7e $t
         spi-flash.s:208    .text:0000000000001f80 WAIT_DONE
         spi-flash.s:210    .text:0000000000001f84 $d
         spi-flash.s:223    .text:0000000000001fb4 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001fbe $t
         spi-flash.s:223    .text:0000000000001fc0 ERASE_BLK
         spi-flash.s:225    .text:0000000000001fc4 $d
         spi-flash.s:238    .text:0000000000001fec _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001ff8 ERASE_CHIP
ARM GAS  forth.s 			page 240


         spi-flash.s:240    .text:0000000000001ffc $d
         spi-flash.s:256    .text:000000000000202c _RD_BLK
         spi-flash.s:256    .text:0000000000002034 RD_BLK
         spi-flash.s:258    .text:0000000000002038 $d
         spi-flash.s:278    .text:0000000000002080 _WR_BLK
         spi-flash.s:278    .text:0000000000002088 WR_BLK
         spi-flash.s:280    .text:000000000000208c $d
             forth.s:2829   .text:0000000000004814 HDOT
         spi-flash.s:316    .text:00000000000020e4 _SEARCH_FILE
         spi-flash.s:316    .text:00000000000020f0 $t
         spi-flash.s:316    .text:00000000000020f0 SEARCH_FILE
         spi-flash.s:319    .text:00000000000020f4 $d
         spi-flash.s:325    .text:00000000000020fc _ERASE_FILE
         spi-flash.s:325    .text:0000000000002108 ERASE_FILE
         spi-flash.s:328    .text:000000000000210c $d
         spi-flash.s:334    .text:0000000000002114 _DIR
         spi-flash.s:334    .text:0000000000002118 $t
         spi-flash.s:334    .text:0000000000002118 DIR
         spi-flash.s:337    .text:000000000000211c $d
         spi-flash.s:343    .text:0000000000002124 _SAVE
         spi-flash.s:343    .text:000000000000212c SAVE
         spi-flash.s:346    .text:0000000000002130 $d
         spi-flash.s:352    .text:0000000000002138 _LOAD
         spi-flash.s:352    .text:0000000000002140 LOAD
         spi-flash.s:355    .text:0000000000002144 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:000000000000216c p10
               fpu.s:59     .text:0000000000002198 _PWR10
               fpu.s:59     .text:000000000000219e $t
               fpu.s:59     .text:00000000000021a0 PWR10
               fpu.s:90     .text:00000000000021cc $d
               fpu.s:90     .text:00000000000021d0 _FDI
               fpu.s:90     .text:00000000000021d4 $t
               fpu.s:90     .text:00000000000021d4 FDI
               fpu.s:100    .text:00000000000021e6 $d
               fpu.s:100    .text:00000000000021ea _FEI
               fpu.s:100    .text:00000000000021ee $t
               fpu.s:100    .text:00000000000021f0 FEI
               fpu.s:110    .text:0000000000002202 $d
               fpu.s:110    .text:0000000000002206 _FPSCR
               fpu.s:110    .text:000000000000220c $t
               fpu.s:123    .text:000000000000221c $d
               fpu.s:123    .text:0000000000002220 _CLR_FPSCR
               fpu.s:123    .text:000000000000222a $t
               fpu.s:136    .text:0000000000002244 $d
               fpu.s:136    .text:0000000000002248 _TOS0
               fpu.s:136    .text:000000000000224c $t
               fpu.s:136    .text:000000000000224c TOS0
               fpu.s:145    .text:0000000000002258 $d
               fpu.s:145    .text:000000000000225c _TOS1
               fpu.s:145    .text:0000000000002260 $t
               fpu.s:145    .text:0000000000002260 TOS1
               fpu.s:154    .text:000000000000226c $d
               fpu.s:154    .text:0000000000002270 _TOS2
ARM GAS  forth.s 			page 241


               fpu.s:154    .text:0000000000002274 $t
               fpu.s:154    .text:0000000000002274 TOS2
               fpu.s:163    .text:0000000000002280 $d
               fpu.s:163    .text:0000000000002284 _S0FROM
               fpu.s:163    .text:0000000000002288 $t
               fpu.s:163    .text:0000000000002288 S0FROM
               fpu.s:172    .text:0000000000002294 $d
               fpu.s:172    .text:0000000000002298 _S1FROM
               fpu.s:172    .text:000000000000229c $t
               fpu.s:172    .text:000000000000229c S1FROM
               fpu.s:181    .text:00000000000022a8 $d
               fpu.s:181    .text:00000000000022ac _S2FROM
               fpu.s:181    .text:00000000000022b0 $t
               fpu.s:181    .text:00000000000022b0 S2FROM
               fpu.s:192    .text:00000000000022bc $d
               fpu.s:192    .text:00000000000022c0 _FTOS
               fpu.s:192    .text:00000000000022c4 $t
               fpu.s:192    .text:00000000000022c4 FTOS
               fpu.s:202    .text:00000000000022d4 $d
               fpu.s:202    .text:00000000000022d8 _TRUNC
               fpu.s:202    .text:00000000000022de $t
               fpu.s:202    .text:00000000000022e0 TRUNC
               fpu.s:212    .text:00000000000022f0 $d
               fpu.s:212    .text:00000000000022f4 _STOF
               fpu.s:212    .text:00000000000022f8 $t
               fpu.s:212    .text:00000000000022f8 STOF
               fpu.s:222    .text:0000000000002308 $d
               fpu.s:222    .text:000000000000230c _FPLUS
               fpu.s:222    .text:0000000000002310 FPLUS
               fpu.s:235    .text:0000000000002328 $d
               fpu.s:235    .text:000000000000232c _FSUBB
               fpu.s:235    .text:0000000000002330 FSUBB
               fpu.s:249    .text:0000000000002348 $d
               fpu.s:249    .text:000000000000234c _FSTAR
               fpu.s:249    .text:0000000000002350 FSTAR
               fpu.s:262    .text:0000000000002368 $d
               fpu.s:262    .text:000000000000236c _FSLH
               fpu.s:262    .text:0000000000002370 FSLH
               fpu.s:275    .text:0000000000002388 $d
               fpu.s:275    .text:000000000000238c _FNEG
               fpu.s:275    .text:0000000000002394 $t
               fpu.s:275    .text:0000000000002394 FNEG
               fpu.s:285    .text:00000000000023a4 $d
               fpu.s:285    .text:00000000000023a8 _FABS
               fpu.s:285    .text:00000000000023b0 FABS
               fpu.s:297    .text:00000000000023c4 $d
               fpu.s:297    .text:00000000000023c8 _SQRT
               fpu.s:297    .text:00000000000023d0 SQRT
               fpu.s:307    .text:00000000000023e0 $d
               fpu.s:307    .text:00000000000023e4 _FZLESS
               fpu.s:307    .text:00000000000023e8 $t
               fpu.s:307    .text:00000000000023e8 FZLESS
               fpu.s:319    .text:0000000000002400 $d
               fpu.s:319    .text:0000000000002404 _FGREAT
               fpu.s:319    .text:0000000000002408 FGREAT
               fpu.s:321    .text:000000000000240c $d
             forth.s:1042   .text:0000000000003668 INVER
ARM GAS  forth.s 			page 242


               fpu.s:330    .text:0000000000002420 _FLESS
               fpu.s:330    .text:0000000000002424 FLESS
               fpu.s:332    .text:0000000000002428 $d
               fpu.s:340    .text:0000000000002438 _FMIN
               fpu.s:340    .text:0000000000002440 FMIN
               fpu.s:342    .text:0000000000002444 $d
               fpu.s:353    .text:0000000000002468 _FMAX
               fpu.s:353    .text:0000000000002470 FMAX
               fpu.s:355    .text:0000000000002474 $d
               fpu.s:368    .text:0000000000002498 _FSIGN
               fpu.s:368    .text:000000000000249e $t
               fpu.s:368    .text:00000000000024a0 FSIGN
               fpu.s:379    .text:00000000000024b4 $d
               fpu.s:379    .text:00000000000024b8 _FEXP
               fpu.s:379    .text:00000000000024c0 FEXP
               fpu.s:390    .text:00000000000024d8 $d
               fpu.s:390    .text:00000000000024dc _FMANT
               fpu.s:390    .text:00000000000024e2 $t
               fpu.s:390    .text:00000000000024e4 FMANT
               fpu.s:403    .text:0000000000002500 $d
               fpu.s:403    .text:0000000000002504 _PI
               fpu.s:403    .text:0000000000002508 PI
               fpu.s:412    .text:0000000000002518 $d
               fpu.s:412    .text:000000000000251c _LN2
               fpu.s:412    .text:0000000000002520 $t
               fpu.s:412    .text:0000000000002520 LN2
               fpu.s:421    .text:0000000000002530 $d
               fpu.s:421    .text:0000000000002534 _LN10
               fpu.s:421    .text:000000000000253c LN10
               fpu.s:431    .text:000000000000254c $d
               fpu.s:431    .text:0000000000002550 _LOG2
               fpu.s:431    .text:0000000000002558 LOG2
               fpu.s:441    .text:0000000000002568 $d
               fpu.s:441    .text:000000000000256c _LOG2TO10
               fpu.s:441    .text:0000000000002574 $t
               fpu.s:441    .text:0000000000002574 LOG2TO10
               fpu.s:443    .text:0000000000002578 $d
             forth.s:635    .text:0000000000003308 ZLESS
               fpu.s:453    .text:00000000000025a4 $d
            strtof.s:29     .text:00000000000025b0 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000025c8 p10p2at
            strtof.s:44     .text:00000000000025c8 $t
            strtof.s:45     .text:00000000000025cc $d
            strtof.s:57     .text:00000000000025ec bit_state
            strtof.s:58     .text:00000000000025ec $t
            strtof.s:59     .text:00000000000025f0 $d
             forth.s:1930   .text:0000000000003eb4 PICK
            strtof.s:76     .text:0000000000002610 mant_div
            strtof.s:77     .text:0000000000002610 $t
            strtof.s:78     .text:0000000000002614 $d
            strtof.s:79     .text:0000000000002618 div_loop
             forth.s:1184   .text:00000000000037a8 GREAT
            strtof.s:107    .text:0000000000002664 mant_mult
ARM GAS  forth.s 			page 243


            strtof.s:108    .text:0000000000002664 $t
            strtof.s:109    .text:0000000000002668 $d
            strtof.s:110    .text:000000000000266c mult_loop
            strtof.s:134    .text:00000000000026b8 exp_adjust
            strtof.s:135    .text:00000000000026b8 $t
            strtof.s:136    .text:00000000000026bc $d
             forth.s:945    .text:0000000000003590 NROT
            strtof.s:148    .text:00000000000026f8 pos_exp
             forth.s:1058   .text:000000000000368c ABSS
            strtof.s:159    .text:0000000000002708 integer
            strtof.s:160    .text:0000000000002708 $t
            strtof.s:161    .text:000000000000270c $d
             forth.s:597    .text:00000000000032bc DSWAP
             forth.s:2399   .text:000000000000435c TONBR
             forth.s:514    .text:0000000000003218 DTOR
             forth.s:472    .text:00000000000031b4 DRFROM
            strtof.s:178    .text:0000000000002738 decimals
            strtof.s:179    .text:0000000000002738 $t
            strtof.s:180    .text:000000000000273c $d
             forth.s:1207   .text:00000000000037dc MIN
            strtof.s:204    .text:0000000000002790 exponent
            strtof.s:205    .text:0000000000002790 $t
            strtof.s:206    .text:0000000000002794 $d
             forth.s:2452   .text:00000000000043f2 NEGQ
             forth.s:1050   .text:000000000000367c NEGAT
            strtof.s:226    .text:00000000000027d0 _FLOATQ
            strtof.s:226    .text:00000000000027d8 FLOATQ
            strtof.s:230    .text:00000000000027dc $d
             forth.s:2347   .text:00000000000042d0 DECIM
             forth.s:395    .text:0000000000003132 TBRAN
            strtof.s:258    .text:000000000000285c expect_dot
             forth.s:2432   .text:00000000000043d0 CHARQ
            strtof.s:262    .text:0000000000002870 get_fraction
            strtof.s:279    .text:00000000000028c4 get_exponent
            strtof.s:297    .text:0000000000002918 error2
             forth.s:2364   .text:00000000000042f4 DIGTQ
            strtof.s:284    .text:00000000000028d8 build_float
            strtof.s:305    .text:0000000000002938 error4
            strtof.s:311    .text:000000000000294c restore_base
            strtof.s:309    .text:0000000000002944 e4
            strtof.s:300    .text:0000000000002924 error3
              ftoa.s:28     .text:000000000000295c rounding
              ftoa.s:48     .text:0000000000002984 _ROUND
              ftoa.s:48     .text:000000000000298a $t
              ftoa.s:48     .text:000000000000298c ROUND
              ftoa.s:50     .text:0000000000002990 $d
             forth.s:1196   .text:00000000000037c4 MAX
              ftoa.s:67     .text:00000000000029d0 _CSTOP
              ftoa.s:67     .text:00000000000029d4 $t
              ftoa.s:67     .text:00000000000029d4 CSTOP
              ftoa.s:79     .text:00000000000029e0 ITOA
              ftoa.s:81     .text:00000000000029e4 $d
             forth.s:1644   .text:0000000000003c28 STOD
             forth.s:997    .text:0000000000003600 DABS
             forth.s:2190   .text:0000000000004138 BDIGS
             forth.s:2254   .text:00000000000041dc DIGS
             forth.s:2272   .text:0000000000004210 SIGN
ARM GAS  forth.s 			page 244


             forth.s:2286   .text:0000000000004238 EDIGS
             forth.s:2029   .text:0000000000003f94 CMOVE
              ftoa.s:114    .text:0000000000002a38 _SCALEUP
              ftoa.s:114    .text:0000000000002a40 $t
              ftoa.s:114    .text:0000000000002a40 SCALEUP
              ftoa.s:116    .text:0000000000002a44 $d
              ftoa.s:148    .text:0000000000002aa0 _SCALEDOWN
              ftoa.s:148    .text:0000000000002aaa $t
              ftoa.s:148    .text:0000000000002aac SCALEDOWN
              ftoa.s:150    .text:0000000000002ab0 $d
              ftoa.s:181    .text:0000000000002b08 EPART
              ftoa.s:182    .text:0000000000002b08 $t
              ftoa.s:183    .text:0000000000002b0c $d
              ftoa.s:206    .text:0000000000002b3c FPART
              ftoa.s:207    .text:0000000000002b3c $t
              ftoa.s:208    .text:0000000000002b40 $d
              ftoa.s:255    .text:0000000000002be0 IPART
              ftoa.s:256    .text:0000000000002be0 $t
              ftoa.s:257    .text:0000000000002be4 $d
              ftoa.s:313    .text:0000000000002ca4 _FTOA
              ftoa.s:313    .text:0000000000002ca8 $t
              ftoa.s:313    .text:0000000000002ca8 FTOA
              ftoa.s:315    .text:0000000000002cac $d
              ftoa.s:365    .text:0000000000002d8c nan
             forth.s:831    .text:0000000000003490 BLANK
              ftoa.s:348    .text:0000000000002d3c zdz
              ftoa.s:387    .text:0000000000002df8 infinity
              ftoa.s:412    .text:0000000000002e40 _FDOT
              ftoa.s:412    .text:0000000000002e44 FDOT
              ftoa.s:415    .text:0000000000002e48 $d
             forth.s:1958   .text:0000000000003ee8 HERE
             forth.s:3753   .text:0000000000005348 ALLOT
             forth.s:80     .text:0000000000002eac $t
             forth.s:104    .text:0000000000002ec4 COMPI_NEST
             forth.s:117    .text:0000000000002ee2 TSTDIN
             forth.s:124    .text:0000000000002eec TSTDOUT
             forth.s:133    .text:0000000000002ef6 $d
             forth.s:133    .text:0000000000002efa _CFSR
             forth.s:145    .text:0000000000002f16 $d
             forth.s:145    .text:0000000000002f1a _BFAR
             forth.s:157    .text:0000000000002f36 $d
             forth.s:157    .text:0000000000002f3a _QKEY
             forth.s:157    .text:0000000000002f40 QKEY
             forth.s:159    .text:0000000000002f44 $d
             forth.s:2016   .text:0000000000003f74 ATEXE
             forth.s:167    .text:0000000000002f54 _KEY
             forth.s:167    .text:0000000000002f58 $t
             forth.s:167    .text:0000000000002f58 KEY
             forth.s:169    .text:0000000000002f5c KEY1
             forth.s:170    .text:0000000000002f5c $d
             forth.s:185    .text:0000000000002f6c KEY2
             forth.s:192    .text:0000000000002f74 _EMIT
             forth.s:194    .text:0000000000002f80 $d
             forth.s:228    .text:0000000000002f90 _RAND
             forth.s:228    .text:0000000000002f98 RAND
             forth.s:230    .text:0000000000002f9c $d
             forth.s:1293   .text:0000000000003898 SEED
ARM GAS  forth.s 			page 245


             forth.s:1800   .text:0000000000003d70 MODD
             forth.s:259    .text:000000000000300c _PAUSE
             forth.s:259    .text:0000000000003012 $t
             forth.s:259    .text:0000000000003014 PAUSE
             forth.s:261    .text:0000000000003018 $d
             forth.s:1311   .text:00000000000038c8 TIMER
             forth.s:263    .text:0000000000003020 PAUSE_LOOP
             forth.s:268    .text:0000000000003038 PAUSE_EXIT
             forth.s:275    .text:0000000000003040 _ULED
             forth.s:284    .text:0000000000003064 ULED_OFF
             forth.s:292    .text:0000000000003068 $d
             forth.s:292    .text:000000000000306c _JOYSTK
             forth.s:292    .text:0000000000003074 JOYSTK
             forth.s:294    .text:0000000000003078 $d
             forth.s:306    .text:0000000000003098 _BEEP
             forth.s:306    .text:00000000000030a0 BEEP
             forth.s:331    .text:00000000000030d4 $d
             forth.s:331    .text:00000000000030d8 _NOP
             forth.s:331    .text:00000000000030dc $t
             forth.s:331    .text:00000000000030dc NOP
             forth.s:349    .text:00000000000030e8 $d
             forth.s:349    .text:00000000000030ec _EXECU
             forth.s:349    .text:00000000000030f4 $t
             forth.s:369    .text:0000000000003110 NEXT1
             forth.s:387    .text:000000000000312c QBRAN1
             forth.s:418    .text:000000000000314c $d
             forth.s:418    .text:0000000000003150 _EXIT
             forth.s:418    .text:0000000000003158 EXIT
             forth.s:426    .text:000000000000315a $d
             forth.s:426    .text:000000000000315e _STORE
             forth.s:426    .text:0000000000003160 $t
             forth.s:436    .text:000000000000316c $d
             forth.s:436    .text:0000000000003170 _AT
             forth.s:436    .text:0000000000003172 $t
             forth.s:444    .text:0000000000003178 $d
             forth.s:444    .text:000000000000317c _CSTOR
             forth.s:454    .text:000000000000318c $d
             forth.s:454    .text:0000000000003190 _CAT
             forth.s:463    .text:0000000000003198 $d
             forth.s:463    .text:000000000000319c _RFROM
             forth.s:472    .text:00000000000031aa $d
             forth.s:472    .text:00000000000031ae _DRFROM
             forth.s:472    .text:00000000000031b2 $t
             forth.s:484    .text:00000000000031ca $d
             forth.s:484    .text:00000000000031ce _RAT
             forth.s:493    .text:00000000000031de $d
             forth.s:493    .text:00000000000031e2 _DRAT
             forth.s:493    .text:00000000000031e6 $t
             forth.s:493    .text:00000000000031e8 DRAT
             forth.s:505    .text:00000000000031fa $d
             forth.s:505    .text:00000000000031fe _TOR
             forth.s:514    .text:000000000000320e $d
             forth.s:514    .text:0000000000003212 _DTOR
             forth.s:514    .text:0000000000003216 $t
             forth.s:526    .text:000000000000322a $d
             forth.s:526    .text:000000000000322e _RPSTOR
             forth.s:526    .text:0000000000003232 $t
ARM GAS  forth.s 			page 246


             forth.s:526    .text:0000000000003234 RPSTOR
             forth.s:535    .text:000000000000323c $d
             forth.s:535    .text:0000000000003240 _SPSTOR
             forth.s:535    .text:0000000000003244 $t
             forth.s:535    .text:0000000000003244 SPSTOR
             forth.s:544    .text:000000000000324c $d
             forth.s:544    .text:0000000000003250 _SPAT
             forth.s:544    .text:0000000000003254 $t
             forth.s:544    .text:0000000000003254 SPAT
             forth.s:553    .text:000000000000325c $d
             forth.s:553    .text:0000000000003260 _RPAT
             forth.s:553    .text:0000000000003264 $t
             forth.s:553    .text:0000000000003264 RPAT
             forth.s:562    .text:000000000000326c $d
             forth.s:562    .text:0000000000003270 _DROP
             forth.s:571    .text:000000000000327e $d
             forth.s:571    .text:0000000000003282 _NIP
             forth.s:571    .text:0000000000003286 $t
             forth.s:571    .text:0000000000003288 NIP
             forth.s:579    .text:000000000000328e $d
             forth.s:579    .text:0000000000003292 _DUPP
             forth.s:579    .text:0000000000003296 $t
             forth.s:587    .text:000000000000329e $d
             forth.s:587    .text:00000000000032a2 _SWAP
             forth.s:597    .text:00000000000032b0 $d
             forth.s:597    .text:00000000000032b4 _DSWAP
             forth.s:597    .text:00000000000032ba $t
             forth.s:612    .text:00000000000032cc $d
             forth.s:612    .text:00000000000032d0 _OVER
             forth.s:621    .text:00000000000032e0 $d
             forth.s:621    .text:00000000000032e4 _DOVER
             forth.s:621    .text:00000000000032ea $t
             forth.s:621    .text:00000000000032ec DOVER
             forth.s:635    .text:00000000000032fe $d
             forth.s:635    .text:0000000000003302 _ZLESS
             forth.s:643    .text:000000000000330e $d
             forth.s:643    .text:0000000000003312 _ZGREAT
             forth.s:643    .text:0000000000003318 ZGREAT
             forth.s:654    .text:0000000000003324 $d
             forth.s:654    .text:0000000000003328 _ZNEQU
             forth.s:654    .text:000000000000332c $t
             forth.s:654    .text:000000000000332c ZNEQU
             forth.s:664    .text:0000000000003334 $d
             forth.s:664    .text:0000000000003338 _NEQU
             forth.s:664    .text:000000000000333c NEQU
             forth.s:676    .text:000000000000334a $d
             forth.s:676    .text:000000000000334e _ANDD
             forth.s:676    .text:0000000000003352 $t
             forth.s:685    .text:000000000000335e $d
             forth.s:685    .text:0000000000003362 _ORR
             forth.s:694    .text:0000000000003372 $d
             forth.s:694    .text:0000000000003376 _XORR
             forth.s:694    .text:000000000000337a $t
             forth.s:703    .text:0000000000003386 $d
             forth.s:703    .text:000000000000338a _UPLUS
             forth.s:703    .text:000000000000338e $t
             forth.s:703    .text:0000000000003390 UPLUS
ARM GAS  forth.s 			page 247


             forth.s:715    .text:00000000000033a0 $d
             forth.s:715    .text:00000000000033a4 _RSHIFT
             forth.s:724    .text:00000000000033b6 $d
             forth.s:724    .text:00000000000033ba _LSHIFT
             forth.s:733    .text:00000000000033ce $d
             forth.s:733    .text:00000000000033d2 _PLUS
             forth.s:733    .text:00000000000033d4 $t
             forth.s:742    .text:00000000000033dc $d
             forth.s:742    .text:00000000000033e0 _SUBB
             forth.s:742    .text:00000000000033e2 $t
             forth.s:751    .text:00000000000033ee $d
             forth.s:751    .text:00000000000033f2 _STAR
             forth.s:751    .text:00000000000033f4 $t
             forth.s:760    .text:00000000000033fe $d
             forth.s:760    .text:0000000000003402 _UMSTA
             forth.s:760    .text:0000000000003406 $t
             forth.s:760    .text:0000000000003408 UMSTA
             forth.s:772    .text:0000000000003414 $d
             forth.s:772    .text:0000000000003418 _MSTAR
             forth.s:772    .text:000000000000341c MSTAR
             forth.s:783    .text:0000000000003428 $d
             forth.s:783    .text:000000000000342c _ONEP
             forth.s:791    .text:0000000000003436 $d
             forth.s:791    .text:000000000000343a _ONEM
             forth.s:799    .text:0000000000003446 $d
             forth.s:799    .text:000000000000344a _TWOP
             forth.s:799    .text:0000000000003450 TWOP
             forth.s:807    .text:0000000000003456 $d
             forth.s:807    .text:000000000000345a _TWOM
             forth.s:807    .text:0000000000003460 TWOM
             forth.s:815    .text:0000000000003466 $d
             forth.s:815    .text:000000000000346a _CELLP
             forth.s:815    .text:0000000000003470 $t
             forth.s:815    .text:0000000000003470 CELLP
             forth.s:823    .text:0000000000003476 $d
             forth.s:823    .text:000000000000347a _CELLM
             forth.s:823    .text:0000000000003480 $t
             forth.s:823    .text:0000000000003480 CELLM
             forth.s:831    .text:0000000000003486 $d
             forth.s:831    .text:000000000000348a _BLANK
             forth.s:840    .text:000000000000349a $d
             forth.s:840    .text:000000000000349e _CELLS
             forth.s:840    .text:00000000000034a4 $t
             forth.s:840    .text:00000000000034a4 CELLS
             forth.s:848    .text:00000000000034aa $d
             forth.s:848    .text:00000000000034ae _CELLSL
             forth.s:848    .text:00000000000034b4 $t
             forth.s:848    .text:00000000000034b4 CELLSL
             forth.s:856    .text:00000000000034ba $d
             forth.s:856    .text:00000000000034be _TWOST
             forth.s:856    .text:00000000000034c4 TWOST
             forth.s:864    .text:00000000000034ca $d
             forth.s:864    .text:00000000000034ce _TWOSL
             forth.s:872    .text:00000000000034da $d
             forth.s:872    .text:00000000000034de _QDUP
             forth.s:882    .text:00000000000034ee $d
             forth.s:882    .text:00000000000034f2 _TUCK
ARM GAS  forth.s 			page 248


             forth.s:882    .text:00000000000034f8 TUCK
             forth.s:891    .text:0000000000003500 $d
             forth.s:891    .text:0000000000003504 _ROLL
             forth.s:891    .text:000000000000350c ROLL
             forth.s:893    .text:0000000000003510 $d
             forth.s:934    .text:0000000000003578 _ROT
             forth.s:934    .text:000000000000357c $t
             forth.s:945    .text:0000000000003586 $d
             forth.s:945    .text:000000000000358a _NROT
             forth.s:956    .text:000000000000359a $d
             forth.s:956    .text:000000000000359e _DDROP
             forth.s:956    .text:00000000000035a4 $t
             forth.s:965    .text:00000000000035ae $d
             forth.s:965    .text:00000000000035b2 _TDROP
             forth.s:965    .text:00000000000035b8 $t
             forth.s:974    .text:00000000000035c2 $d
             forth.s:974    .text:00000000000035c6 _DDUP
             forth.s:984    .text:00000000000035d8 $d
             forth.s:984    .text:00000000000035dc _DPLUS
             forth.s:984    .text:00000000000035e0 DPLUS
             forth.s:997    .text:00000000000035f4 $d
             forth.s:997    .text:00000000000035f8 _DABS
             forth.s:1013   .text:000000000000361c $d
             forth.s:1013   .text:0000000000003620 _UDGREAT
             forth.s:1013   .text:0000000000003624 $t
             forth.s:1013   .text:0000000000003624 UDGREAT
             forth.s:1030   .text:0000000000003640 $d
             forth.s:1030   .text:0000000000003644 _DZEQUAL
             forth.s:1030   .text:0000000000003648 $t
             forth.s:1030   .text:0000000000003648 DZEQUAL
             forth.s:1042   .text:000000000000365a $d
             forth.s:1042   .text:000000000000365e _INVER
             forth.s:1050   .text:000000000000366e $d
             forth.s:1050   .text:0000000000003672 _NEGAT
             forth.s:1058   .text:0000000000003682 $d
             forth.s:1058   .text:0000000000003686 _ABSS
             forth.s:1058   .text:000000000000368a $t
             forth.s:1068   .text:0000000000003696 $d
             forth.s:1068   .text:000000000000369a _CLZ
             forth.s:1068   .text:000000000000369e $t
             forth.s:1076   .text:00000000000036a6 $d
             forth.s:1076   .text:00000000000036aa _CTZ
             forth.s:1076   .text:00000000000036ae $t
             forth.s:1076   .text:00000000000036b0 CTZ
             forth.s:1091   .text:00000000000036ca $d
             forth.s:1091   .text:00000000000036ce _FALSE
             forth.s:1091   .text:00000000000036d4 $t
             forth.s:1091   .text:00000000000036d4 FALSE
             forth.s:1101   .text:00000000000036e0 $d
             forth.s:1101   .text:00000000000036e4 _TRUE
             forth.s:1101   .text:00000000000036ec TRUE
             forth.s:1112   .text:00000000000036fc $d
             forth.s:1112   .text:0000000000003700 _ZEQUAL
             forth.s:1112   .text:0000000000003704 ZEQUAL
             forth.s:1123   .text:0000000000003716 $d
             forth.s:1123   .text:000000000000371a _EQUAL
             forth.s:1123   .text:000000000000371c $t
ARM GAS  forth.s 			page 249


             forth.s:1135   .text:000000000000372e $d
             forth.s:1135   .text:0000000000003732 _DIFF
             forth.s:1135   .text:0000000000003738 DIFF
             forth.s:1148   .text:0000000000003752 $d
             forth.s:1148   .text:0000000000003756 _ULESS
             forth.s:1160   .text:000000000000376e $d
             forth.s:1160   .text:0000000000003772 _LESS
             forth.s:1160   .text:0000000000003774 $t
             forth.s:1160   .text:0000000000003774 LESS
             forth.s:1172   .text:0000000000003786 $d
             forth.s:1172   .text:000000000000378a _UGREAT
             forth.s:1172   .text:0000000000003790 UGREAT
             forth.s:1184   .text:00000000000037a2 $d
             forth.s:1184   .text:00000000000037a6 _GREAT
             forth.s:1184   .text:00000000000037a8 $t
             forth.s:1196   .text:00000000000037ba $d
             forth.s:1196   .text:00000000000037be _MAX
             forth.s:1196   .text:00000000000037c2 $t
             forth.s:1207   .text:00000000000037d2 $d
             forth.s:1207   .text:00000000000037d6 _MIN
             forth.s:1207   .text:00000000000037da $t
             forth.s:1218   .text:00000000000037ea $d
             forth.s:1218   .text:00000000000037ee _PSTOR
             forth.s:1218   .text:00000000000037f4 PSTOR
             forth.s:1230   .text:0000000000003806 $d
             forth.s:1230   .text:000000000000380a _DSTOR
             forth.s:1230   .text:0000000000003810 DSTOR
             forth.s:1242   .text:0000000000003826 $d
             forth.s:1242   .text:000000000000382a _DAT
             forth.s:1242   .text:0000000000003830 DAT
             forth.s:1252   .text:000000000000383c $d
             forth.s:1252   .text:0000000000003840 _COUNT
             forth.s:1252   .text:0000000000003846 $t
             forth.s:1262   .text:0000000000003856 $d
             forth.s:1262   .text:000000000000385a _DNEGA
             forth.s:1262   .text:0000000000003862 $t
             forth.s:1262   .text:0000000000003864 DNEGA
             forth.s:1284   .text:0000000000003876 $d
             forth.s:1284   .text:000000000000387a _STATE
             forth.s:1284   .text:0000000000003880 $t
             forth.s:1284   .text:0000000000003880 STATE
             forth.s:1293   .text:000000000000388c $d
             forth.s:1293   .text:0000000000003890 _SEED
             forth.s:1302   .text:00000000000038a4 $d
             forth.s:1302   .text:00000000000038a8 _MSEC
             forth.s:1311   .text:00000000000038bc $d
             forth.s:1311   .text:00000000000038c0 _TIMER
             forth.s:1311   .text:00000000000038c6 $t
             forth.s:1320   .text:00000000000038d4 $d
             forth.s:1320   .text:00000000000038d8 _TBOOT
             forth.s:1320   .text:00000000000038de $t
             forth.s:1320   .text:00000000000038e0 TBOOT
             forth.s:1329   .text:00000000000038ec $d
             forth.s:1329   .text:00000000000038f0 _BASE
             forth.s:1340   .text:0000000000003904 $d
             forth.s:1340   .text:0000000000003908 _BCHR
             forth.s:1340   .text:000000000000390e $t
ARM GAS  forth.s 			page 250


             forth.s:1340   .text:0000000000003910 BCHR
             forth.s:1350   .text:000000000000391c TEMP
             forth.s:1359   .text:0000000000003928 $d
             forth.s:1359   .text:000000000000392c _SPAN
             forth.s:1359   .text:0000000000003934 SPAN
             forth.s:1368   .text:0000000000003940 $d
             forth.s:1368   .text:0000000000003944 _INN
             forth.s:1368   .text:0000000000003948 $t
             forth.s:1368   .text:0000000000003948 INN
             forth.s:1378   .text:0000000000003954 $d
             forth.s:1378   .text:0000000000003958 _NTIB
             forth.s:1378   .text:0000000000003960 NTIB
             forth.s:1387   .text:000000000000396c $d
             forth.s:1387   .text:0000000000003970 _TEVAL
             forth.s:1387   .text:0000000000003976 $t
             forth.s:1387   .text:0000000000003978 TEVAL
             forth.s:1397   .text:0000000000003984 $d
             forth.s:1397   .text:0000000000003988 _HLD
             forth.s:1397   .text:000000000000398c $t
             forth.s:1397   .text:000000000000398c HLD
             forth.s:1407   .text:0000000000003998 $d
             forth.s:1407   .text:000000000000399c _CNTXT
             forth.s:1407   .text:00000000000039a4 $t
             forth.s:1408   .text:00000000000039a4 CRRNT
             forth.s:1418   .text:00000000000039b0 $d
             forth.s:1418   .text:00000000000039b4 _CPP
             forth.s:1418   .text:00000000000039b8 CPP
             forth.s:1429   .text:00000000000039c4 $d
             forth.s:1429   .text:00000000000039c8 _UNUSED
             forth.s:1429   .text:00000000000039d0 UNUSED
             forth.s:1441   .text:00000000000039e6 $d
             forth.s:1441   .text:00000000000039ea _FCP
             forth.s:1441   .text:00000000000039ee $t
             forth.s:1441   .text:00000000000039f0 FCP
             forth.s:1451   .text:00000000000039fc $d
             forth.s:1451   .text:0000000000003a00 _LAST
             forth.s:1451   .text:0000000000003a08 LAST
             forth.s:1465   .text:0000000000003a14 $d
             forth.s:1465   .text:0000000000003a18 _USER_BEGIN
             forth.s:1465   .text:0000000000003a24 USER_BEGIN
             forth.s:1469   .text:0000000000003a30 USR_BGN_ADR
             forth.s:1470   .text:0000000000003a30 $d
             forth.s:1476   .text:0000000000003a38 _USER_END
             forth.s:1476   .text:0000000000003a44 USER_END
             forth.s:1480   .text:0000000000003a50 USER_END_ADR
             forth.s:1481   .text:0000000000003a50 $d
             forth.s:1487   .text:0000000000003a58 _MAXINT
             forth.s:1487   .text:0000000000003a60 $t
             forth.s:1487   .text:0000000000003a60 MAXINT
             forth.s:1496   .text:0000000000003a70 $d
             forth.s:1496   .text:0000000000003a74 _MININT
             forth.s:1496   .text:0000000000003a7c $t
             forth.s:1496   .text:0000000000003a7c MININT
             forth.s:1505   .text:0000000000003a8c $d
             forth.s:1505   .text:0000000000003a90 _MAXUINT
             forth.s:1505   .text:0000000000003a9c MAXUINT
             forth.s:1520   .text:0000000000003aac $d
ARM GAS  forth.s 			page 251


             forth.s:1520   .text:0000000000003ab0 _WITHI
             forth.s:1520   .text:0000000000003ab8 WITHI
             forth.s:1522   .text:0000000000003abc $d
             forth.s:1537   .text:0000000000003adc _UMMOD
             forth.s:1537   .text:0000000000003ae4 UMMOD
             forth.s:1541   .text:0000000000003aee UMMOD0
             forth.s:1548   .text:0000000000003afe UMMOD1
             forth.s:1554   .text:0000000000003b08 UMMOD2
             forth.s:1567   .text:0000000000003b14 $d
             forth.s:1567   .text:0000000000003b18 _MSMOD
             forth.s:1567   .text:0000000000003b20 MSMOD
             forth.s:1569   .text:0000000000003b24 $d
             forth.s:1578   .text:0000000000003b4c MMOD1
             forth.s:1585   .text:0000000000003b68 MMOD2
             forth.s:1593   .text:0000000000003b88 MMOD3
             forth.s:1607   .text:0000000000003b90 _SMSLSHREM
             forth.s:1607   .text:0000000000003b98 SMSLSHREM
             forth.s:1609   .text:0000000000003b9c $d
             forth.s:1644   .text:0000000000003c24 _STOD
             forth.s:1644   .text:0000000000003c28 $t
             forth.s:1653   .text:0000000000003c34 $d
             forth.s:1653   .text:0000000000003c38 _D2STAR
             forth.s:1653   .text:0000000000003c3c $t
             forth.s:1653   .text:0000000000003c3c D2STAR
             forth.s:1665   .text:0000000000003c4e $d
             forth.s:1665   .text:0000000000003c52 _D2SL
             forth.s:1665   .text:0000000000003c56 $t
             forth.s:1665   .text:0000000000003c58 D2SL
             forth.s:1680   .text:0000000000003c66 $d
             forth.s:1680   .text:0000000000003c6a _DSLMOD
             forth.s:1680   .text:0000000000003c70 $t
             forth.s:1680   .text:0000000000003c70 DSLMOD
             forth.s:1716   .text:0000000000003cbc $d
             forth.s:1716   .text:0000000000003cc0 _DSLASH
             forth.s:1716   .text:0000000000003cc4 DSLASH
             forth.s:1718   .text:0000000000003cc8 $d
             forth.s:1738   .text:0000000000003d0c _DSTAR
             forth.s:1738   .text:0000000000003d10 DSTAR
             forth.s:1787   .text:0000000000003d46 $d
             forth.s:1787   .text:0000000000003d4a _SLMOD
             forth.s:1789   .text:0000000000003d54 $d
             forth.s:1800   .text:0000000000003d6c _MODD
             forth.s:1800   .text:0000000000003d70 $t
             forth.s:1802   .text:0000000000003d74 $d
             forth.s:1811   .text:0000000000003d84 _SLASH
             forth.s:1811   .text:0000000000003d86 $t
             forth.s:1811   .text:0000000000003d88 SLASH
             forth.s:1813   .text:0000000000003d8c $d
             forth.s:1824   .text:0000000000003da0 _SSMOD
             forth.s:1824   .text:0000000000003da6 $t
             forth.s:1824   .text:0000000000003da8 SSMOD
             forth.s:1826   .text:0000000000003dac $d
             forth.s:1838   .text:0000000000003dc4 _STASL
             forth.s:1838   .text:0000000000003dc8 STASL
             forth.s:1840   .text:0000000000003dcc $d
             forth.s:1854   .text:0000000000003de0 _CHARP
             forth.s:1854   .text:0000000000003de6 $t
ARM GAS  forth.s 			page 252


             forth.s:1854   .text:0000000000003de8 CHARP
             forth.s:1864   .text:0000000000003df0 $d
             forth.s:1864   .text:0000000000003df4 _CHARS
             forth.s:1864   .text:0000000000003dfa $t
             forth.s:1864   .text:0000000000003dfc CHARS
             forth.s:1874   .text:0000000000003e00 $d
             forth.s:1874   .text:0000000000003e04 _ALIGN
             forth.s:1874   .text:0000000000003e0a $t
             forth.s:1874   .text:0000000000003e0c ALIGN
             forth.s:1887   .text:0000000000003e1c $d
             forth.s:1887   .text:0000000000003e20 _ALGND
             forth.s:1887   .text:0000000000003e28 $t
             forth.s:1887   .text:0000000000003e28 ALGND
             forth.s:1898   .text:0000000000003e38 $d
             forth.s:1898   .text:0000000000003e3c _TCHAR
             forth.s:1898   .text:0000000000003e42 $t
             forth.s:1898   .text:0000000000003e44 TCHAR
             forth.s:1900   .text:0000000000003e48 $d
             forth.s:1910   .text:0000000000003e80 TCHA1
             forth.s:1918   .text:0000000000003e88 _DEPTH
             forth.s:1918   .text:0000000000003e8e $t
             forth.s:1918   .text:0000000000003e90 DEPTH
             forth.s:1930   .text:0000000000003ea8 $d
             forth.s:1930   .text:0000000000003eac _PICK
             forth.s:1941   .text:0000000000003ebe $d
             forth.s:1941   .text:0000000000003ec2 _PUT
             forth.s:1941   .text:0000000000003ec6 $t
             forth.s:1941   .text:0000000000003ec8 PUT
             forth.s:1958   .text:0000000000003edc $d
             forth.s:1958   .text:0000000000003ee0 _HERE
             forth.s:1960   .text:0000000000003eec $d
             forth.s:1969   .text:0000000000003efc _PAD
             forth.s:1969   .text:0000000000003f00 $t
             forth.s:1971   .text:0000000000003f04 $d
             forth.s:1982   .text:0000000000003f1c _TIB
             forth.s:1982   .text:0000000000003f20 $t
             forth.s:1982   .text:0000000000003f20 TIB
             forth.s:1993   .text:0000000000003f2a $d
             forth.s:1993   .text:0000000000003f2e _SOURCID
             forth.s:1993   .text:0000000000003f38 $t
             forth.s:1993   .text:0000000000003f38 SOURCID
             forth.s:2005   .text:0000000000003f42 $d
             forth.s:2005   .text:0000000000003f46 _SOURCE
             forth.s:2005   .text:0000000000003f50 SOURCE
             forth.s:2007   .text:0000000000003f54 $d
             forth.s:2016   .text:0000000000003f68 _ATEXE
             forth.s:2029   .text:0000000000003f88 $d
             forth.s:2029   .text:0000000000003f8c _CMOVE
             forth.s:2029   .text:0000000000003f92 $t
             forth.s:2043   .text:0000000000003fb4 CMOV3
             forth.s:2038   .text:0000000000003faa CMOV1
             forth.s:2035   .text:0000000000003fa2 CMOV0
             forth.s:2045   .text:0000000000003fb8 CMOV2
             forth.s:2053   .text:0000000000003fc0 $d
             forth.s:2053   .text:0000000000003fc4 _MOVE
             forth.s:2053   .text:0000000000003fcc MOVE
             forth.s:2062   .text:0000000000003fce $d
ARM GAS  forth.s 			page 253


             forth.s:2062   .text:0000000000003fd2 _WMOVE
             forth.s:2062   .text:0000000000003fd8 $t
             forth.s:2080   .text:0000000000004002 MOVE1
             forth.s:2077   .text:0000000000003ffe MOVE3
             forth.s:2074   .text:0000000000003ffa MOVE0
             forth.s:2085   .text:000000000000400c MOVE2
             forth.s:2094   .text:0000000000004014 $d
             forth.s:2094   .text:0000000000004018 _FILL
             forth.s:2102   .text:000000000000402e FILL2
             forth.s:2098   .text:0000000000004026 FILL1
             forth.s:2112   .text:0000000000004036 $d
             forth.s:2112   .text:000000000000403a _ERASE
             forth.s:2112   .text:0000000000004040 $t
             forth.s:2112   .text:0000000000004040 ERASE
             forth.s:2114   .text:0000000000004044 $d
             forth.s:2130   .text:0000000000004070 _PACKS
             forth.s:2130   .text:0000000000004076 $t
             forth.s:2130   .text:0000000000004078 PACKS
             forth.s:2132   .text:000000000000407c $d
             forth.s:2161   .text:00000000000040d4 _DIGIT
             forth.s:2161   .text:00000000000040da $t
             forth.s:2161   .text:00000000000040dc DIGIT
             forth.s:2163   .text:00000000000040e0 $d
             forth.s:2178   .text:0000000000004114 _EXTRC
             forth.s:2178   .text:000000000000411c $t
             forth.s:2178   .text:000000000000411c EXTRC
             forth.s:2180   .text:0000000000004120 $d
             forth.s:2190   .text:0000000000004134 _BDIGS
             forth.s:2192   .text:000000000000413c $d
             forth.s:2202   .text:0000000000004150 _HOLD
             forth.s:2202   .text:0000000000004158 HOLD
             forth.s:2204   .text:000000000000415c $d
             forth.s:2219   .text:0000000000004180 _HOLDS
             forth.s:2219   .text:0000000000004186 $t
             forth.s:2219   .text:0000000000004188 HOLDS
             forth.s:2221   .text:000000000000418c $d
             forth.s:2240   .text:00000000000041b8 _DIG
             forth.s:2240   .text:00000000000041ba $t
             forth.s:2240   .text:00000000000041bc DIG
             forth.s:2242   .text:00000000000041c0 $d
             forth.s:2254   .text:00000000000041d8 _DIGS
             forth.s:2256   .text:00000000000041e0 DIGS1
             forth.s:2257   .text:00000000000041e0 $d
             forth.s:2262   .text:00000000000041fc DIGS2
             forth.s:2272   .text:0000000000004208 _SIGN
             forth.s:2274   .text:0000000000004214 $d
             forth.s:2278   .text:000000000000422c SIGN1
             forth.s:2286   .text:0000000000004234 _EDIGS
             forth.s:2288   .text:000000000000423c $d
             forth.s:2303   .text:0000000000004258 STRR
             forth.s:2304   .text:0000000000004258 $t
             forth.s:2305   .text:000000000000425c $d
             forth.s:2322   .text:0000000000004288 _HEX
             forth.s:2322   .text:000000000000428c $t
             forth.s:2322   .text:000000000000428c HEX
             forth.s:2324   .text:0000000000004290 $d
             forth.s:2335   .text:00000000000042a8 _BIN
ARM GAS  forth.s 			page 254


             forth.s:2335   .text:00000000000042ac $t
             forth.s:2335   .text:00000000000042ac BIN
             forth.s:2337   .text:00000000000042b0 $d
             forth.s:2347   .text:00000000000042c8 _DECIM
             forth.s:2347   .text:00000000000042d0 $t
             forth.s:2349   .text:00000000000042d4 $d
             forth.s:2364   .text:00000000000042ec _DIGTQ
             forth.s:2366   .text:00000000000042f8 $d
             forth.s:2379   .text:0000000000004340 DGTQ1
             forth.s:2399   .text:0000000000004354 _TONBR
             forth.s:2399   .text:000000000000435c $t
             forth.s:2401   .text:0000000000004360 $d
             forth.s:2433   .text:00000000000043d0 $t
             forth.s:2481   .text:000000000000441c $d
             forth.s:2481   .text:0000000000004420 _INTQ
             forth.s:2481   .text:0000000000004428 INTQ
             forth.s:2484   .text:000000000000442c $d
             forth.s:2536   .text:00000000000044f4 _NUMBERQ
             forth.s:2536   .text:00000000000044fc $t
             forth.s:2536   .text:00000000000044fc NUMBERQ
             forth.s:2538   .text:0000000000004500 $d
             forth.s:2556   .text:0000000000004520 _SPACE
             forth.s:2556   .text:0000000000004526 $t
             forth.s:2558   .text:000000000000452c $d
             forth.s:2567   .text:000000000000453c _SPACS
             forth.s:2567   .text:0000000000004544 SPACS
             forth.s:2569   .text:0000000000004548 $d
             forth.s:2575   .text:0000000000004564 CHAR2
             forth.s:2573   .text:0000000000004560 CHAR1
             forth.s:2584   .text:0000000000004574 _TYPEE
             forth.s:2586   .text:0000000000004580 $d
             forth.s:2592   .text:0000000000004598 TYPE2
             forth.s:2588   .text:000000000000458c TYPE1
             forth.s:2602   .text:00000000000045ac _CR
             forth.s:2604   .text:00000000000045b4 $d
             forth.s:2616   .text:00000000000045d0 DOSTR
             forth.s:2617   .text:00000000000045d0 $t
             forth.s:2619   .text:00000000000045d4 $d
             forth.s:2638   .text:0000000000004600 STRQP
             forth.s:2639   .text:0000000000004600 $t
             forth.s:2640   .text:0000000000004604 $d
             forth.s:2651   .text:000000000000460c $t
             forth.s:2652   .text:0000000000004610 $d
             forth.s:2664   .text:000000000000461c LPAD
             forth.s:2665   .text:000000000000461c $t
             forth.s:2666   .text:0000000000004620 $d
             forth.s:2697   .text:00000000000046a0 _DOTR
             forth.s:2697   .text:00000000000046a4 DOTR
             forth.s:2699   .text:00000000000046a8 $d
             forth.s:2781   .text:000000000000478c DTOA
             forth.s:2716   .text:00000000000046d0 _UDOTR
             forth.s:2716   .text:00000000000046d4 $t
             forth.s:2716   .text:00000000000046d4 UDOTR
             forth.s:2718   .text:00000000000046d8 $d
             forth.s:2734   .text:0000000000004704 _UDOT
             forth.s:2736   .text:000000000000470c $d
             forth.s:2752   .text:0000000000004738 _DOT
ARM GAS  forth.s 			page 255


             forth.s:2752   .text:000000000000473a $t
             forth.s:2754   .text:0000000000004740 $d
             forth.s:2762   .text:0000000000004768 DOT1
             forth.s:2781   .text:0000000000004788 _DTOA
             forth.s:2781   .text:000000000000478c $t
             forth.s:2783   .text:0000000000004790 $d
             forth.s:2798   .text:00000000000047b8 _DDOT
             forth.s:2798   .text:00000000000047bc DDOT
             forth.s:2800   .text:00000000000047c0 $d
             forth.s:2811   .text:00000000000047e0 _UDDOT
             forth.s:2811   .text:00000000000047e4 $t
             forth.s:2811   .text:00000000000047e4 UDDOT
             forth.s:2813   .text:00000000000047e8 $d
             forth.s:2829   .text:0000000000004810 _HDOT
             forth.s:2831   .text:0000000000004818 $d
             forth.s:2853   .text:0000000000004860 _QUEST
             forth.s:2853   .text:0000000000004862 $t
             forth.s:2853   .text:0000000000004864 QUEST
             forth.s:2855   .text:0000000000004868 $d
             forth.s:2869   .text:0000000000004874 PARS
             forth.s:2870   .text:0000000000004874 $t
             forth.s:2871   .text:0000000000004878 $d
             forth.s:2937   .text:0000000000004988 PARS8
             forth.s:2901   .text:00000000000048fc PARS3
             forth.s:2884   .text:00000000000048b4 PARS1
             forth.s:2899   .text:00000000000048f8 PARS2
             forth.s:2905   .text:0000000000004908 PARS4
             forth.s:2917   .text:0000000000004938 PARS5
             forth.s:2924   .text:000000000000495c PARS6
             forth.s:2930   .text:0000000000004970 PARS7
             forth.s:2949   .text:000000000000499c _PARSE
             forth.s:2949   .text:00000000000049a2 $t
             forth.s:2949   .text:00000000000049a4 PARSE
             forth.s:2951   .text:00000000000049a8 $d
             forth.s:2973   .text:00000000000049e8 _PARSENAME
             forth.s:2973   .text:00000000000049f4 PARSENAME
             forth.s:2975   .text:00000000000049f8 $d
             forth.s:2985   .text:0000000000004a08 _DOTPR
             forth.s:2985   .text:0000000000004a0c DOTPR
             forth.s:2987   .text:0000000000004a10 $d
             forth.s:2998   .text:0000000000004a28 _PAREN
             forth.s:2998   .text:0000000000004a2a $t
             forth.s:2998   .text:0000000000004a2c PAREN
             forth.s:3000   .text:0000000000004a30 $d
             forth.s:3011   .text:0000000000004a48 _BKSLA
             forth.s:3011   .text:0000000000004a4a $t
             forth.s:3011   .text:0000000000004a4c BKSLA
             forth.s:3013   .text:0000000000004a50 $d
             forth.s:3024   .text:0000000000004a68 _CHAR
             forth.s:3024   .text:0000000000004a70 CHAR
             forth.s:3026   .text:0000000000004a74 $d
             forth.s:3036   .text:0000000000004a8c _IMCHAR
             forth.s:3036   .text:0000000000004a94 IMCHAR
             forth.s:3038   .text:0000000000004a98 $d
             forth.s:3825   .text:000000000000540c LITER
             forth.s:3047   .text:0000000000004aa8 _WORDD
             forth.s:3047   .text:0000000000004ab0 WORDD
ARM GAS  forth.s 			page 256


             forth.s:3049   .text:0000000000004ab4 $d
             forth.s:3061   .text:0000000000004acc _TOKEN
             forth.s:3061   .text:0000000000004ad2 $t
             forth.s:3061   .text:0000000000004ad4 TOKEN
             forth.s:3063   .text:0000000000004ad8 $d
             forth.s:3230   .text:0000000000004cd4 UPPER
             forth.s:3077   .text:0000000000004aec _TOCFA
             forth.s:3077   .text:0000000000004af4 TOCFA
             forth.s:3079   .text:0000000000004af8 $d
             forth.s:3100   .text:0000000000004b24 _SAMEQ
             forth.s:3100   .text:0000000000004b2a $t
             forth.s:3100   .text:0000000000004b2c SAMEQ
             forth.s:3102   .text:0000000000004b30 $d
             forth.s:3119   .text:0000000000004b78 SAME2
             forth.s:3104   .text:0000000000004b3c SAME1
             forth.s:3134   .text:0000000000004b8c SEARCH
             forth.s:3135   .text:0000000000004b8c $t
             forth.s:3136   .text:0000000000004b90 $d
             forth.s:3143   .text:0000000000004bac SEARCH1
             forth.s:3163   .text:0000000000004c04 SEARCH6
             forth.s:3156   .text:0000000000004bec SEARCH2
             forth.s:3161   .text:0000000000004bfc SEARCH3
             forth.s:3170   .text:0000000000004c1c SEARCH4
             forth.s:3176   .text:0000000000004c38 SEARCH5
             forth.s:3192   .text:0000000000004c60 _NAMEQ
             forth.s:3192   .text:0000000000004c66 $t
             forth.s:3194   .text:0000000000004c6c $d
             forth.s:3209   .text:0000000000004c80 _ASCIZ
             forth.s:3209   .text:0000000000004c86 $t
             forth.s:3209   .text:0000000000004c88 ASCIZ
             forth.s:3211   .text:0000000000004c8c $d
             forth.s:3230   .text:0000000000004ccc _UPPER
             forth.s:3230   .text:0000000000004cd2 $t
             forth.s:3232   .text:0000000000004cd8 $d
             forth.s:3263   .text:0000000000004d5c BKSP
             forth.s:3264   .text:0000000000004d5c $t
             forth.s:3265   .text:0000000000004d60 $d
             forth.s:3279   .text:0000000000004da4 BACK1
             forth.s:3288   .text:0000000000004da8 TAP
             forth.s:3289   .text:0000000000004da8 $t
             forth.s:3290   .text:0000000000004dac $d
             forth.s:3303   .text:0000000000004dc4 KTAP
             forth.s:3304   .text:0000000000004dc4 TTAP
             forth.s:3305   .text:0000000000004dc4 $t
             forth.s:3306   .text:0000000000004dc8 $d
             forth.s:3320   .text:0000000000004e08 KTAP2
             forth.s:3317   .text:0000000000004e00 KTAP1
             forth.s:3332   .text:0000000000004e20 _ACCEP
             forth.s:3334   .text:0000000000004e2c $d
             forth.s:3337   .text:0000000000004e38 ACCP1
             forth.s:3353   .text:0000000000004e80 ACCP4
             forth.s:3349   .text:0000000000004e74 ACCP2
             forth.s:3351   .text:0000000000004e78 ACCP3
             forth.s:3364   .text:0000000000004e94 _QUERY
             forth.s:3364   .text:0000000000004e9a $t
             forth.s:3364   .text:0000000000004e9c QUERY
             forth.s:3366   .text:0000000000004ea0 $d
ARM GAS  forth.s 			page 257


             forth.s:3384   .text:0000000000004ed4 _REFILL
             forth.s:3384   .text:0000000000004edc REFILL
             forth.s:3386   .text:0000000000004ee0 $d
             forth.s:3400   .text:0000000000004f04 _SAVEINP
             forth.s:3400   .text:0000000000004f10 SAVEINP
             forth.s:3402   .text:0000000000004f14 $d
             forth.s:3415   .text:0000000000004f34 _RESTINP
             forth.s:3415   .text:0000000000004f42 $t
             forth.s:3415   .text:0000000000004f44 RESTINP
             forth.s:3417   .text:0000000000004f48 $d
             forth.s:3436   .text:0000000000004f70 _ABORT
             forth.s:3436   .text:0000000000004f76 $t
             forth.s:3438   .text:0000000000004f7c ABORT1
             forth.s:3439   .text:0000000000004f7c $d
             forth.s:3526   .text:0000000000005084 LBRAC
             forth.s:3460   .text:0000000000004fbc PRT_ABORT
             forth.s:3461   .text:0000000000004fbc $t
             forth.s:3462   .text:0000000000004fc0 $d
             forth.s:3480   .text:0000000000004fe8 ABORQ
             forth.s:3481   .text:0000000000004fe8 $t
             forth.s:3482   .text:0000000000004fec $d
             forth.s:3504   .text:000000000000501c _INTER
             forth.s:3506   .text:000000000000502c $d
             forth.s:3515   .text:0000000000005068 INTE1
             forth.s:3512   .text:000000000000505e $t
             forth.s:3513   .text:0000000000005060 $d
             forth.s:3519   .text:0000000000005078 INTE2
             forth.s:3526   .text:0000000000005080 _LBRAC
             forth.s:3526   .text:0000000000005082 $t
             forth.s:3528   .text:0000000000005088 $d
             forth.s:3541   .text:00000000000050b0 _DOTOK
             forth.s:3541   .text:00000000000050b4 $t
             forth.s:3541   .text:00000000000050b4 DOTOK
             forth.s:3543   .text:00000000000050b8 $d
             forth.s:3549   .text:00000000000050dc DOTO1
             forth.s:3550   .text:00000000000050dc $d
             forth.s:3558   .text:00000000000050e8 _QSTAC
             forth.s:3558   .text:00000000000050f0 QSTAC
             forth.s:3560   .text:00000000000050f4 $d
             forth.s:3562   .text:000000000000510a $t
             forth.s:3563   .text:000000000000510c $d
             forth.s:3570   .text:0000000000005114 _EVAL
             forth.s:3572   .text:0000000000005120 EVAL1
             forth.s:3573   .text:0000000000005120 $d
             forth.s:3581   .text:0000000000005148 EVAL2
             forth.s:3597   .text:0000000000005158 _EVALUATE
             forth.s:3597   .text:0000000000005164 EVALUATE
             forth.s:3600   .text:0000000000005168 $d
             forth.s:3634   .text:00000000000051fc _PRESE
             forth.s:3645   .text:0000000000005210 $d
             forth.s:3645   .text:0000000000005214 _QUIT
             forth.s:3646   .text:000000000000521c $d
             forth.s:3648   .text:0000000000005228 QUIT1
             forth.s:3650   .text:000000000000522c QUIT2
             forth.s:3660   .text:0000000000005240 _FORGET
             forth.s:3660   .text:0000000000005248 FORGET
             forth.s:3662   .text:000000000000524c $d
ARM GAS  forth.s 			page 258


             forth.s:4523   .text:0000000000005cdc OVERT
             forth.s:3689   .text:0000000000005294 $d
             forth.s:3689   .text:0000000000005298 _POSTPONE
             forth.s:3689   .text:00000000000052a4 POSTPONE
             forth.s:3691   .text:00000000000052a8 $d
             forth.s:3714   .text:00000000000052e0 ITICK
             forth.s:4566   .text:0000000000005d5c CALLC
             forth.s:3701   .text:00000000000052b8 _TICK
             forth.s:3701   .text:00000000000052ba $t
             forth.s:3701   .text:00000000000052bc TICK
             forth.s:3703   .text:00000000000052c0 $d
             forth.s:3707   .text:00000000000052d4 TICK1
             forth.s:3714   .text:00000000000052dc _ITICK
             forth.s:3714   .text:00000000000052e0 $t
             forth.s:3716   .text:00000000000052e4 $d
             forth.s:3731   .text:00000000000052f0 _FIND
             forth.s:3731   .text:00000000000052f8 FIND
             forth.s:3733   .text:00000000000052fc $d
             forth.s:3753   .text:0000000000005340 _ALLOT
             forth.s:3753   .text:0000000000005346 $t
             forth.s:3755   .text:000000000000534c $d
             forth.s:3764   .text:000000000000535c _COMMA
             forth.s:3764   .text:000000000000535e $t
             forth.s:3764   .text:0000000000005360 COMMA
             forth.s:3766   .text:0000000000005364 $d
             forth.s:3780   .text:0000000000005380 $d
             forth.s:3780   .text:0000000000005384 _CCOMMA
             forth.s:3780   .text:0000000000005388 CCOMMA
             forth.s:3782   .text:000000000000538c $d
             forth.s:3795   .text:00000000000053ac _BCOMP
             forth.s:3795   .text:00000000000053b6 $t
             forth.s:3795   .text:00000000000053b8 BCOMP
             forth.s:3797   .text:00000000000053bc $d
             forth.s:3807   .text:00000000000053cc _COMPI
             forth.s:3807   .text:00000000000053d4 $t
             forth.s:3807   .text:00000000000053d4 COMPI
             forth.s:3809   .text:00000000000053d8 $d
             forth.s:3825   .text:0000000000005404 _LITER
             forth.s:3825   .text:000000000000540c $t
             forth.s:3827   .text:0000000000005410 $d
             forth.s:3837   .text:0000000000005424 STRCQ
             forth.s:3838   .text:0000000000005424 $t
             forth.s:3839   .text:0000000000005428 $d
             forth.s:3861   .text:0000000000005460 _FOR
             forth.s:3861   .text:0000000000005464 $t
             forth.s:3861   .text:0000000000005464 FOR
             forth.s:3863   .text:0000000000005468 $d
             forth.s:3872   .text:0000000000005480 _DO
             forth.s:3872   .text:0000000000005484 DO
             forth.s:3874   .text:0000000000005488 $d
             forth.s:3886   .text:00000000000054a8 _QDO
             forth.s:3886   .text:00000000000054ac $t
             forth.s:3886   .text:00000000000054ac QDO
             forth.s:3888   .text:00000000000054b0 $d
             forth.s:3902   .text:0000000000005510 DOPLOOP
             forth.s:3903   .text:0000000000005510 $t
             forth.s:3922   .text:0000000000005538 $d
ARM GAS  forth.s 			page 259


             forth.s:3922   .text:000000000000553c _PLOOP
             forth.s:3922   .text:0000000000005542 $t
             forth.s:3922   .text:0000000000005544 PLOOP
             forth.s:3924   .text:0000000000005548 $d
             forth.s:3943   .text:0000000000005588 resolve_leave
             forth.s:3929   .text:0000000000005560 DOLOOP
             forth.s:3930   .text:0000000000005560 $t
             forth.s:3945   .text:000000000000558c $d
             forth.s:3960   .text:00000000000055b8 _LOOP
             forth.s:3960   .text:00000000000055c0 LOOP
             forth.s:3962   .text:00000000000055c4 $d
             forth.s:3971   .text:00000000000055e0 _UNLOOP
             forth.s:3971   .text:00000000000055e8 UNLOOP
             forth.s:3980   .text:00000000000055f0 $d
             forth.s:3980   .text:00000000000055f4 _LEAVE
             forth.s:3980   .text:00000000000055fa $t
             forth.s:3980   .text:00000000000055fc LEAVE
             forth.s:3982   .text:0000000000005600 $d
             forth.s:3993   .text:0000000000005630 DOLEAVE
             forth.s:3994   .text:0000000000005630 $t
             forth.s:4005   .text:000000000000563c $d
             forth.s:4005   .text:0000000000005640 _BEGIN
             forth.s:4005   .text:0000000000005646 $t
             forth.s:4005   .text:0000000000005648 BEGIN
             forth.s:4007   .text:000000000000564c $d
             forth.s:4016   .text:0000000000005654 $d
             forth.s:4016   .text:0000000000005658 _FNEXT
             forth.s:4016   .text:0000000000005660 FNEXT
             forth.s:4018   .text:0000000000005664 $d
             forth.s:4026   .text:000000000000567c _I
             forth.s:4026   .text:000000000000567e $t
             forth.s:4026   .text:0000000000005680 I
             forth.s:4035   .text:000000000000568c $d
             forth.s:4035   .text:0000000000005690 _J
             forth.s:4035   .text:0000000000005692 $t
             forth.s:4035   .text:0000000000005694 J
             forth.s:4045   .text:00000000000056a0 $d
             forth.s:4045   .text:00000000000056a4 _UNTIL
             forth.s:4045   .text:00000000000056aa $t
             forth.s:4045   .text:00000000000056ac UNTIL
             forth.s:4047   .text:00000000000056b0 $d
             forth.s:4056   .text:00000000000056c8 _AGAIN
             forth.s:4056   .text:00000000000056ce $t
             forth.s:4056   .text:00000000000056d0 AGAIN
             forth.s:4058   .text:00000000000056d4 $d
             forth.s:4067   .text:00000000000056ec _IFF
             forth.s:4067   .text:00000000000056f0 IFF
             forth.s:4069   .text:00000000000056f4 $d
             forth.s:4081   .text:000000000000571c _AHEAD
             forth.s:4081   .text:0000000000005722 $t
             forth.s:4081   .text:0000000000005724 AHEAD
             forth.s:4083   .text:0000000000005728 $d
             forth.s:4095   .text:0000000000005750 _REPEA
             forth.s:4095   .text:0000000000005758 REPEA
             forth.s:4097   .text:000000000000575c $d
             forth.s:4108   .text:0000000000005774 _THENN
             forth.s:4108   .text:000000000000577c THENN
ARM GAS  forth.s 			page 260


             forth.s:4110   .text:0000000000005780 $d
             forth.s:4121   .text:0000000000005794 _AFT
             forth.s:4121   .text:0000000000005798 $t
             forth.s:4121   .text:0000000000005798 AFT
             forth.s:4123   .text:000000000000579c $d
             forth.s:4135   .text:00000000000057b4 _ELSEE
             forth.s:4135   .text:00000000000057bc ELSEE
             forth.s:4137   .text:00000000000057c0 $d
             forth.s:4147   .text:00000000000057d4 _WHILE
             forth.s:4147   .text:00000000000057da $t
             forth.s:4147   .text:00000000000057dc WHILE
             forth.s:4149   .text:00000000000057e0 $d
             forth.s:4159   .text:00000000000057f0 _CASE
             forth.s:4159   .text:00000000000057f8 CASE
             forth.s:4161   .text:00000000000057fc $d
             forth.s:4170   .text:000000000000580c _OF
             forth.s:4170   .text:0000000000005810 OF
             forth.s:4172   .text:0000000000005814 $d
             forth.s:4186   .text:0000000000005850 _ENDOF
             forth.s:4186   .text:0000000000005856 $t
             forth.s:4186   .text:0000000000005858 ENDOF
             forth.s:4188   .text:000000000000585c $d
             forth.s:4204   .text:0000000000005890 _ENDCASE
             forth.s:4204   .text:0000000000005898 $t
             forth.s:4204   .text:0000000000005898 ENDCASE
             forth.s:4206   .text:000000000000589c $d
             forth.s:4223   .text:00000000000058d4 _RECURSE
             forth.s:4223   .text:00000000000058dc $t
             forth.s:4223   .text:00000000000058dc RECURSE
             forth.s:4225   .text:00000000000058e0 $d
             forth.s:4237   .text:00000000000058f8 _ABRTQ
             forth.s:4237   .text:0000000000005900 ABRTQ
             forth.s:4239   .text:0000000000005904 $d
             forth.s:4249   .text:000000000000591c _STRQ
             forth.s:4249   .text:0000000000005920 STRQ
             forth.s:4251   .text:0000000000005924 $d
             forth.s:4261   .text:000000000000593c _STRSLHQ
             forth.s:4261   .text:0000000000005940 $t
             forth.s:4261   .text:0000000000005940 STRSLHQ
             forth.s:4263   .text:0000000000005944 $d
             forth.s:4293   .text:00000000000059dc GETC
             forth.s:4307   .text:00000000000059fa ESCAPE
             forth.s:4294   .text:00000000000059dc $t
             forth.s:4309   .text:00000000000059fe $d
             forth.s:4342   .text:0000000000005aaa PARSE_HEX
             forth.s:4375   .text:0000000000005b2e esc_char
             forth.s:4343   .text:0000000000005aaa $t
             forth.s:4344   .text:0000000000005aae $d
             forth.s:4361   .text:0000000000005af6 TO_HEX
             forth.s:4362   .text:0000000000005af6 $t
             forth.s:4363   .text:0000000000005afa $d
             forth.s:4384   .text:0000000000005b47 STRCSLHQ
             forth.s:4395   .text:0000000000005b4b _CSTRQ
             forth.s:4395   .text:0000000000005b4e $t
             forth.s:4395   .text:0000000000005b50 CSTRQ
             forth.s:4397   .text:0000000000005b54 $d
             forth.s:4410   .text:0000000000005b84 _DOTQ
ARM GAS  forth.s 			page 261


             forth.s:4410   .text:0000000000005b88 DOTQ
             forth.s:4412   .text:0000000000005b8c $d
             forth.s:4426   .text:0000000000005ba4 _UNIQU
             forth.s:4426   .text:0000000000005bac $t
             forth.s:4426   .text:0000000000005bac UNIQU
             forth.s:4428   .text:0000000000005bb0 $d
             forth.s:4435   .text:0000000000005bd8 UNIQ1
             forth.s:4432   .text:0000000000005bcc $d
             forth.s:4445   .text:0000000000005be0 SNAME
             forth.s:4446   .text:0000000000005be0 $t
             forth.s:4447   .text:0000000000005be4 $d
             forth.s:4463   .text:0000000000005c28 SNAM1
             forth.s:4475   .text:0000000000005c3c _SCOMP
             forth.s:4475   .text:0000000000005c48 SCOMP
             forth.s:4477   .text:0000000000005c4c $d
             forth.s:4489   .text:0000000000005c84 SCOM2
             forth.s:4486   .text:0000000000005c7c SCOM1
             forth.s:4494   .text:0000000000005c98 SCOM3
             forth.s:4503   .text:0000000000005ca0 COLON_ABORT
             forth.s:4504   .text:0000000000005ca0 $t
             forth.s:4505   .text:0000000000005ca4 $d
             forth.s:4523   .text:0000000000005cd4 _OVERT
             forth.s:4523   .text:0000000000005cda $t
             forth.s:4525   .text:0000000000005ce0 $d
             forth.s:4536   .text:0000000000005cf8 _SEMIS
             forth.s:4536   .text:0000000000005cfa $t
             forth.s:4536   .text:0000000000005cfc SEMIS
             forth.s:4538   .text:0000000000005d00 $d
             forth.s:4551   .text:0000000000005d20 _RBRAC
             forth.s:4551   .text:0000000000005d22 $t
             forth.s:4551   .text:0000000000005d24 RBRAC
             forth.s:4553   .text:0000000000005d28 $d
             forth.s:4566   .text:0000000000005d50 _CALLC
             forth.s:4568   .text:0000000000005d60 $d
             forth.s:4580   .text:0000000000005d78 _BUFFER
             forth.s:4580   .text:0000000000005d80 $t
             forth.s:4580   .text:0000000000005d80 BUFFER
             forth.s:4582   .text:0000000000005d84 $d
             forth.s:4604   .text:0000000000005dc4 _COLON
             forth.s:4604   .text:0000000000005dc6 $t
             forth.s:4604   .text:0000000000005dc8 COLON
             forth.s:4606   .text:0000000000005dcc $d
             forth.s:4618   .text:0000000000005de8 _IMMED
             forth.s:4618   .text:0000000000005df2 $t
             forth.s:4618   .text:0000000000005df4 IMMED
             forth.s:4620   .text:0000000000005df8 $d
             forth.s:4634   .text:0000000000005e20 $t
             forth.s:4640   .text:0000000000005e20 DODOES
             forth.s:4642   .text:0000000000005e24 $d
             forth.s:5082   .text:00000000000063ac TOVECTOR
             forth.s:4658   .text:0000000000005e4c $d
             forth.s:4658   .text:0000000000005e50 _DOES
             forth.s:4658   .text:0000000000005e56 $t
             forth.s:4658   .text:0000000000005e58 DOES
             forth.s:4660   .text:0000000000005e5c $d
             forth.s:4670   .text:0000000000005e80 _DEFERAT
             forth.s:4670   .text:0000000000005e88 DEFERAT
ARM GAS  forth.s 			page 262


             forth.s:4672   .text:0000000000005e8c $d
             forth.s:4681   .text:0000000000005e9c _ACTIONOF
             forth.s:4681   .text:0000000000005ea6 $t
             forth.s:4681   .text:0000000000005ea8 ACTIONOF
             forth.s:4683   .text:0000000000005eac $d
             forth.s:4696   .text:0000000000005ed0 _DEFERSTO
             forth.s:4696   .text:0000000000005ed8 DEFERSTO
             forth.s:4698   .text:0000000000005edc $d
             forth.s:4708   .text:0000000000005ef8 _DEFER
             forth.s:4708   .text:0000000000005efe $t
             forth.s:4708   .text:0000000000005f00 DEFER
             forth.s:4710   .text:0000000000005f04 $d
             forth.s:4720   .text:0000000000005f28 NO_ACTION
             forth.s:4721   .text:0000000000005f28 $t
             forth.s:4722   .text:0000000000005f2c $d
             forth.s:4724   .text:0000000000005f48 $d
             forth.s:4734   .text:0000000000005f50 _NONAME
             forth.s:4734   .text:0000000000005f58 $t
             forth.s:4734   .text:0000000000005f58 NONAME
             forth.s:4736   .text:0000000000005f5c $d
             forth.s:4749   .text:0000000000005f70 _IS
             forth.s:4749   .text:0000000000005f74 IS
             forth.s:4751   .text:0000000000005f78 $d
             forth.s:4769   .text:0000000000005fb8 _CREAT
             forth.s:4769   .text:0000000000005fc0 CREAT
             forth.s:4771   .text:0000000000005fc4 $d
             forth.s:4786   .text:0000000000006000 DOVAR
             forth.s:4787   .text:0000000000006000 $t
             forth.s:4798   .text:000000000000600e $d
             forth.s:4798   .text:0000000000006012 _VARIA
             forth.s:4798   .text:000000000000601c VARIA
             forth.s:4800   .text:0000000000006020 $d
             forth.s:4810   .text:0000000000006034 DOCON
             forth.s:4811   .text:0000000000006034 $t
             forth.s:4822   .text:0000000000006040 $d
             forth.s:4822   .text:0000000000006044 _VALUE
             forth.s:4822   .text:000000000000604a $t
             forth.s:4822   .text:000000000000604c VALUE
             forth.s:4824   .text:0000000000006050 $d
             forth.s:4840   .text:0000000000006088 _TO
             forth.s:4840   .text:000000000000608c TO
             forth.s:4842   .text:0000000000006090 $d
             forth.s:4854   .text:00000000000060b0 _CONST
             forth.s:4854   .text:00000000000060bc CONST
             forth.s:4856   .text:00000000000060c0 $d
             forth.s:4878   .text:00000000000060f0 DMP
             forth.s:4879   .text:00000000000060f0 $t
             forth.s:4880   .text:00000000000060f4 $d
             forth.s:4898   .text:0000000000006148 PDUM2
             forth.s:4892   .text:0000000000006130 PDUM1
             forth.s:4913   .text:0000000000006160 $d
             forth.s:4913   .text:0000000000006164 _DUMP
             forth.s:4913   .text:000000000000616c DUMP
             forth.s:4915   .text:0000000000006170 $d
             forth.s:4941   .text:00000000000061ec DUMP4
             forth.s:4931   .text:00000000000061c4 DUMP1
             forth.s:4943   .text:00000000000061f4 DUMP3
ARM GAS  forth.s 			page 263


             forth.s:4956   .text:0000000000006208 TDOT
             forth.s:4957   .text:0000000000006208 $t
             forth.s:4958   .text:000000000000620c $d
             forth.s:4997   .text:00000000000062a0 _DOTS
             forth.s:4997   .text:00000000000062a4 DOTS
             forth.s:4999   .text:00000000000062a8 $d
             forth.s:5006   .text:00000000000062c4 DOTS2
             forth.s:5002   .text:00000000000062b8 DOTS1
             forth.s:5011   .text:00000000000062d4 RBASE
             forth.s:5012   .text:00000000000062d4 $t
             forth.s:5020   .text:00000000000062e4 RDOT
             forth.s:5022   .text:00000000000062e8 $d
             forth.s:5049   .text:000000000000634c _TRACE
             forth.s:5049   .text:0000000000006352 $t
             forth.s:5049   .text:0000000000006354 TRACE
             forth.s:5051   .text:0000000000006358 $d
             forth.s:5070   .text:000000000000639c _TOBODY
             forth.s:5070   .text:00000000000063a2 $t
             forth.s:5070   .text:00000000000063a4 TOBODY
             forth.s:5091   .text:00000000000063b4 $d
             forth.s:5091   .text:00000000000063b8 _TONFA
             forth.s:5091   .text:00000000000063c0 TONFA
             forth.s:5093   .text:00000000000063c4 $d
             forth.s:5096   .text:00000000000063d0 TNAM1
             forth.s:5107   .text:0000000000006404 TNAM2
             forth.s:5117   .text:0000000000006414 _DOTID
             forth.s:5117   .text:0000000000006418 $t
             forth.s:5117   .text:0000000000006418 DOTID
             forth.s:5119   .text:000000000000641c $d
             forth.s:5127   .text:0000000000006444 DOTI1
             forth.s:5128   .text:0000000000006452 $t
             forth.s:5129   .text:0000000000006454 $d
             forth.s:5131   *ABS*:0000000000000000 WANT_SEE
             forth.s:5205   .text:000000000000645c _WORDS
             forth.s:5205   .text:0000000000006462 $t
             forth.s:5205   .text:0000000000006464 WORDS
             forth.s:5207   .text:0000000000006468 $d
             forth.s:5210   .text:0000000000006474 WORS1
             forth.s:5219   .text:000000000000649c WORS2
             forth.s:5228   .text:00000000000064a4 _MARKER
             forth.s:5228   .text:00000000000064ac MARKER
             forth.s:5230   .text:00000000000064b0 $d
             forth.s:5233   .text:00000000000064bc $t
             forth.s:5234   .text:00000000000064c0 $d
             forth.s:5249   .text:00000000000064f0 _ARRAY
             forth.s:5249   .text:00000000000064f6 $t
             forth.s:5249   .text:00000000000064f8 ARRAY
             forth.s:5251   .text:00000000000064fc $d
             forth.s:5265   .text:0000000000006538 DO_ARRAY
             forth.s:5266   .text:0000000000006538 $t
             forth.s:5267   .text:000000000000653c $d
             forth.s:5285   .text:0000000000006558 VERSN
             forth.s:5286   .text:0000000000006558 $t
             forth.s:5287   .text:000000000000655c $d
             forth.s:5295   .text:000000000000656c _HI
             forth.s:5295   .text:0000000000006570 HI
             forth.s:5297   .text:0000000000006574 $d
ARM GAS  forth.s 			page 264


             forth.s:5298   .text:000000000000658e $t
             forth.s:5299   .text:0000000000006590 $d
             forth.s:5323   .text:00000000000065dc $t
             forth.s:5324   .text:00000000000065e0 $d
             forth.s:5336   .text:00000000000065fc PS2_QUERY
             forth.s:5337   .text:00000000000065fc $t
             forth.s:5338   .text:0000000000006600 $d
             forth.s:5352   .text:0000000000006666 $t
             forth.s:5353   .text:0000000000006668 $d
             forth.s:5363   .text:0000000000006674 IF_SENSE
             forth.s:5364   .text:0000000000006674 $t
             forth.s:5365   .text:0000000000006678 $d
             forth.s:5379   .text:00000000000066a8 READY
             forth.s:5380   .text:00000000000066a8 $t
             forth.s:5381   .text:00000000000066ac $d
             forth.s:5381   .text:00000000000066b6 $t
             forth.s:5382   .text:00000000000066b8 $d
             forth.s:5400   .text:00000000000066e0 COLD1
             forth.s:5401   .text:00000000000066e0 $d
             forth.s:5416   .text:0000000000006730 COLD2
             forth.s:5419   .text:0000000000006730 $d
             forth.s:5422   .text:0000000000006734 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
       environment.s:32     .text:0000000000000961 $d
       environment.s:32     .text:0000000000000962 $t
       environment.s:107    .text:00000000000009ff $d
       environment.s:107    .text:0000000000000a00 $t
       environment.s:141    .text:0000000000000a47 $d
       environment.s:141    .text:0000000000000a48 $t
       environment.s:187    .text:0000000000000aad $d
       environment.s:187    .text:0000000000000aae $t
       environment.s:201    .text:0000000000000ad9 $d
       environment.s:201    .text:0000000000000ada $t
          ser-term.s:90     .text:0000000000000b9f $d
          ser-term.s:90     .text:0000000000000ba0 $t
          ser-term.s:110    .text:0000000000000bd9 $d
          ser-term.s:110    .text:0000000000000bda $t
          ser-term.s:133    .text:0000000000000c17 $d
          ser-term.s:133    .text:0000000000000c18 $t
          ser-term.s:164    .text:0000000000000c5f $d
          ser-term.s:164    .text:0000000000000c60 $t
          ser-term.s:191    .text:0000000000000cd5 $d
          ser-term.s:191    .text:0000000000000cd6 $t
          ser-term.s:203    .text:0000000000000d03 $d
          ser-term.s:203    .text:0000000000000d04 $t
             tvout.s:264    .text:0000000000000f4f $d
ARM GAS  forth.s 			page 265


             tvout.s:264    .text:0000000000000f50 $t
             tvout.s:278    .text:0000000000000f83 $d
             tvout.s:278    .text:0000000000000f84 $t
             tvout.s:306    .text:0000000000000fdd $d
             tvout.s:306    .text:0000000000000fde $t
             tvout.s:325    .text:000000000000100b $d
             tvout.s:325    .text:000000000000100c $t
             tvout.s:427    .text:0000000000001145 $d
             tvout.s:427    .text:0000000000001146 $t
             tvout.s:448    .text:000000000000119f $d
             tvout.s:448    .text:00000000000011a0 $t
             tvout.s:495    .text:0000000000001235 $d
             tvout.s:495    .text:0000000000001236 $t
           ps2_kbd.s:307    .text:0000000000001923 $d
           ps2_kbd.s:307    .text:0000000000001924 $t
           ps2_kbd.s:396    .text:0000000000001a1f $d
           ps2_kbd.s:396    .text:0000000000001a20 $t
           ps2_kbd.s:616    .text:0000000000001cc1 $d
           ps2_kbd.s:616    .text:0000000000001cc2 $t
           ps2_kbd.s:633    .text:0000000000001cfb $d
           ps2_kbd.s:633    .text:0000000000001cfc $t
         spi-flash.s:85     .text:0000000000001de7 $d
         spi-flash.s:85     .text:0000000000001de8 $t
         spi-flash.s:151    .text:0000000000001eb3 $d
         spi-flash.s:151    .text:0000000000001eb4 $t
         spi-flash.s:238    .text:0000000000001ff7 $d
         spi-flash.s:238    .text:0000000000001ff8 $t
         spi-flash.s:256    .text:0000000000002033 $d
         spi-flash.s:256    .text:0000000000002034 $t
         spi-flash.s:278    .text:0000000000002087 $d
         spi-flash.s:278    .text:0000000000002088 $t
         spi-flash.s:325    .text:0000000000002107 $d
         spi-flash.s:325    .text:0000000000002108 $t
         spi-flash.s:343    .text:0000000000002129 $d
         spi-flash.s:343    .text:000000000000212a $t
         spi-flash.s:352    .text:000000000000213d $d
         spi-flash.s:352    .text:000000000000213e $t
               fpu.s:222    .text:000000000000230f $d
               fpu.s:222    .text:0000000000002310 $t
               fpu.s:235    .text:000000000000232f $d
               fpu.s:235    .text:0000000000002330 $t
               fpu.s:249    .text:000000000000234f $d
               fpu.s:249    .text:0000000000002350 $t
               fpu.s:262    .text:000000000000236f $d
               fpu.s:262    .text:0000000000002370 $t
               fpu.s:285    .text:00000000000023ad $d
               fpu.s:285    .text:00000000000023ae $t
               fpu.s:297    .text:00000000000023cd $d
               fpu.s:297    .text:00000000000023ce $t
               fpu.s:319    .text:0000000000002407 $d
               fpu.s:319    .text:0000000000002408 $t
               fpu.s:330    .text:0000000000002423 $d
               fpu.s:330    .text:0000000000002424 $t
               fpu.s:340    .text:000000000000243d $d
               fpu.s:340    .text:000000000000243e $t
               fpu.s:353    .text:000000000000246d $d
               fpu.s:353    .text:000000000000246e $t
ARM GAS  forth.s 			page 266


               fpu.s:379    .text:00000000000024bd $d
               fpu.s:379    .text:00000000000024be $t
               fpu.s:403    .text:0000000000002507 $d
               fpu.s:403    .text:0000000000002508 $t
               fpu.s:421    .text:0000000000002539 $d
               fpu.s:421    .text:000000000000253a $t
               fpu.s:431    .text:0000000000002555 $d
               fpu.s:431    .text:0000000000002556 $t
            strtof.s:226    .text:00000000000027d7 $d
            strtof.s:226    .text:00000000000027d8 $t
              ftoa.s:412    .text:0000000000002e43 $d
              ftoa.s:412    .text:0000000000002e44 $t
             forth.s:133    .text:0000000000002eff $d
             forth.s:133    .text:0000000000002f00 $t
             forth.s:145    .text:0000000000002f1f $d
             forth.s:145    .text:0000000000002f20 $t
             forth.s:157    .text:0000000000002f3f $d
             forth.s:157    .text:0000000000002f40 $t
             forth.s:192    .text:0000000000002f79 $d
             forth.s:192    .text:0000000000002f7a $t
             forth.s:228    .text:0000000000002f97 $d
             forth.s:228    .text:0000000000002f98 $t
             forth.s:275    .text:0000000000003045 $d
             forth.s:275    .text:0000000000003046 $t
             forth.s:292    .text:0000000000003073 $d
             forth.s:292    .text:0000000000003074 $t
             forth.s:306    .text:000000000000309d $d
             forth.s:306    .text:000000000000309e $t
             forth.s:418    .text:0000000000003155 $d
             forth.s:418    .text:0000000000003156 $t
             forth.s:444    .text:000000000000317f $d
             forth.s:444    .text:0000000000003180 $t
             forth.s:454    .text:0000000000003193 $d
             forth.s:454    .text:0000000000003194 $t
             forth.s:463    .text:000000000000319f $d
             forth.s:463    .text:00000000000031a0 $t
             forth.s:484    .text:00000000000031d1 $d
             forth.s:484    .text:00000000000031d2 $t
             forth.s:505    .text:0000000000003201 $d
             forth.s:505    .text:0000000000003202 $t
             forth.s:562    .text:0000000000003275 $d
             forth.s:562    .text:0000000000003276 $t
             forth.s:587    .text:00000000000032a7 $d
             forth.s:587    .text:00000000000032a8 $t
             forth.s:612    .text:00000000000032d5 $d
             forth.s:612    .text:00000000000032d6 $t
             forth.s:635    .text:0000000000003305 $d
             forth.s:635    .text:0000000000003306 $t
             forth.s:643    .text:0000000000003315 $d
             forth.s:643    .text:0000000000003316 $t
             forth.s:664    .text:000000000000333b $d
             forth.s:664    .text:000000000000333c $t
             forth.s:685    .text:0000000000003365 $d
             forth.s:685    .text:0000000000003366 $t
             forth.s:715    .text:00000000000033ab $d
             forth.s:715    .text:00000000000033ac $t
             forth.s:724    .text:00000000000033c1 $d
ARM GAS  forth.s 			page 267


             forth.s:724    .text:00000000000033c2 $t
             forth.s:772    .text:000000000000341b $d
             forth.s:772    .text:000000000000341c $t
             forth.s:783    .text:000000000000342f $d
             forth.s:783    .text:0000000000003430 $t
             forth.s:791    .text:000000000000343d $d
             forth.s:791    .text:000000000000343e $t
             forth.s:799    .text:000000000000344d $d
             forth.s:799    .text:000000000000344e $t
             forth.s:807    .text:000000000000345d $d
             forth.s:807    .text:000000000000345e $t
             forth.s:831    .text:000000000000348d $d
             forth.s:831    .text:000000000000348e $t
             forth.s:856    .text:00000000000034c1 $d
             forth.s:856    .text:00000000000034c2 $t
             forth.s:864    .text:00000000000034d1 $d
             forth.s:864    .text:00000000000034d2 $t
             forth.s:872    .text:00000000000034e3 $d
             forth.s:872    .text:00000000000034e4 $t
             forth.s:882    .text:00000000000034f7 $d
             forth.s:882    .text:00000000000034f8 $t
             forth.s:891    .text:0000000000003509 $d
             forth.s:891    .text:000000000000350a $t
             forth.s:945    .text:000000000000358f $d
             forth.s:945    .text:0000000000003590 $t
             forth.s:974    .text:00000000000035cb $d
             forth.s:974    .text:00000000000035cc $t
             forth.s:984    .text:00000000000035df $d
             forth.s:984    .text:00000000000035e0 $t
             forth.s:997    .text:00000000000035fd $d
             forth.s:997    .text:00000000000035fe $t
             forth.s:1042   .text:0000000000003665 $d
             forth.s:1042   .text:0000000000003666 $t
             forth.s:1050   .text:0000000000003679 $d
             forth.s:1050   .text:000000000000367a $t
             forth.s:1101   .text:00000000000036e9 $d
             forth.s:1101   .text:00000000000036ea $t
             forth.s:1112   .text:0000000000003703 $d
             forth.s:1112   .text:0000000000003704 $t
             forth.s:1135   .text:0000000000003735 $d
             forth.s:1135   .text:0000000000003736 $t
             forth.s:1148   .text:0000000000003759 $d
             forth.s:1148   .text:000000000000375a $t
             forth.s:1172   .text:000000000000378d $d
             forth.s:1172   .text:000000000000378e $t
             forth.s:1218   .text:00000000000037f1 $d
             forth.s:1218   .text:00000000000037f2 $t
             forth.s:1230   .text:000000000000380d $d
             forth.s:1230   .text:000000000000380e $t
             forth.s:1242   .text:000000000000382d $d
             forth.s:1242   .text:000000000000382e $t
             forth.s:1293   .text:0000000000003895 $d
             forth.s:1293   .text:0000000000003896 $t
             forth.s:1302   .text:00000000000038ad $d
             forth.s:1302   .text:00000000000038ae $t
             forth.s:1329   .text:00000000000038f5 $d
             forth.s:1329   .text:00000000000038f6 $t
ARM GAS  forth.s 			page 268


             forth.s:1359   .text:0000000000003931 $d
             forth.s:1359   .text:0000000000003932 $t
             forth.s:1378   .text:000000000000395d $d
             forth.s:1378   .text:000000000000395e $t
             forth.s:1418   .text:00000000000039b7 $d
             forth.s:1418   .text:00000000000039b8 $t
             forth.s:1429   .text:00000000000039cf $d
             forth.s:1429   .text:00000000000039d0 $t
             forth.s:1451   .text:0000000000003a05 $d
             forth.s:1451   .text:0000000000003a06 $t
             forth.s:1465   .text:0000000000003a23 $d
             forth.s:1465   .text:0000000000003a24 $t
             forth.s:1476   .text:0000000000003a41 $d
             forth.s:1476   .text:0000000000003a42 $t
             forth.s:1505   .text:0000000000003a99 $d
             forth.s:1505   .text:0000000000003a9a $t
             forth.s:1520   .text:0000000000003ab7 $d
             forth.s:1520   .text:0000000000003ab8 $t
             forth.s:1537   .text:0000000000003ae3 $d
             forth.s:1537   .text:0000000000003ae4 $t
             forth.s:1567   .text:0000000000003b1f $d
             forth.s:1567   .text:0000000000003b20 $t
             forth.s:1607   .text:0000000000003b97 $d
             forth.s:1607   .text:0000000000003b98 $t
             forth.s:1716   .text:0000000000003cc3 $d
             forth.s:1716   .text:0000000000003cc4 $t
             forth.s:1738   .text:0000000000003d0f $d
             forth.s:1738   .text:0000000000003d10 $t
             forth.s:1787   .text:0000000000003d4f $d
             forth.s:1787   .text:0000000000003d50 $t
             forth.s:1838   .text:0000000000003dc7 $d
             forth.s:1838   .text:0000000000003dc8 $t
             forth.s:1930   .text:0000000000003eb1 $d
             forth.s:1930   .text:0000000000003eb2 $t
             forth.s:1958   .text:0000000000003ee5 $d
             forth.s:1958   .text:0000000000003ee6 $t
             forth.s:2005   .text:0000000000003f4d $d
             forth.s:2005   .text:0000000000003f4e $t
             forth.s:2016   .text:0000000000003f71 $d
             forth.s:2016   .text:0000000000003f72 $t
             forth.s:2053   .text:0000000000003fc9 $d
             forth.s:2053   .text:0000000000003fca $t
             forth.s:2094   .text:000000000000401d $d
             forth.s:2094   .text:000000000000401e $t
             forth.s:2190   .text:0000000000004137 $d
             forth.s:2190   .text:0000000000004138 $t
             forth.s:2202   .text:0000000000004155 $d
             forth.s:2202   .text:0000000000004156 $t
             forth.s:2254   .text:00000000000041db $d
             forth.s:2254   .text:00000000000041dc $t
             forth.s:2272   .text:000000000000420d $d
             forth.s:2272   .text:000000000000420e $t
             forth.s:2286   .text:0000000000004237 $d
             forth.s:2286   .text:0000000000004238 $t
             forth.s:2364   .text:00000000000042f3 $d
             forth.s:2364   .text:00000000000042f4 $t
             forth.s:2481   .text:0000000000004425 $d
ARM GAS  forth.s 			page 269


             forth.s:2481   .text:0000000000004426 $t
             forth.s:2567   .text:0000000000004543 $d
             forth.s:2567   .text:0000000000004544 $t
             forth.s:2584   .text:0000000000004579 $d
             forth.s:2584   .text:000000000000457a $t
             forth.s:2602   .text:00000000000045af $d
             forth.s:2602   .text:00000000000045b0 $t
             forth.s:2697   .text:00000000000046a3 $d
             forth.s:2697   .text:00000000000046a4 $t
             forth.s:2734   .text:0000000000004707 $d
             forth.s:2734   .text:0000000000004708 $t
             forth.s:2798   .text:00000000000047bb $d
             forth.s:2798   .text:00000000000047bc $t
             forth.s:2829   .text:0000000000004813 $d
             forth.s:2829   .text:0000000000004814 $t
             forth.s:2973   .text:00000000000049f3 $d
             forth.s:2973   .text:00000000000049f4 $t
             forth.s:2985   .text:0000000000004a0b $d
             forth.s:2985   .text:0000000000004a0c $t
             forth.s:3024   .text:0000000000004a6d $d
             forth.s:3024   .text:0000000000004a6e $t
             forth.s:3036   .text:0000000000004a93 $d
             forth.s:3036   .text:0000000000004a94 $t
             forth.s:3047   .text:0000000000004aad $d
             forth.s:3047   .text:0000000000004aae $t
             forth.s:3077   .text:0000000000004af1 $d
             forth.s:3077   .text:0000000000004af2 $t
             forth.s:3332   .text:0000000000004e27 $d
             forth.s:3332   .text:0000000000004e28 $t
             forth.s:3384   .text:0000000000004edb $d
             forth.s:3384   .text:0000000000004edc $t
             forth.s:3400   .text:0000000000004f0f $d
             forth.s:3400   .text:0000000000004f10 $t
             forth.s:3504   .text:0000000000005027 $d
             forth.s:3504   .text:0000000000005028 $t
             forth.s:3558   .text:00000000000050ef $d
             forth.s:3558   .text:00000000000050f0 $t
             forth.s:3570   .text:0000000000005119 $d
             forth.s:3570   .text:000000000000511a $t
             forth.s:3597   .text:0000000000005161 $d
             forth.s:3597   .text:0000000000005162 $t
             forth.s:3634   .text:0000000000005203 $d
             forth.s:3634   .text:0000000000005204 $t
             forth.s:3645   .text:0000000000005219 $d
             forth.s:3645   .text:000000000000521a $t
             forth.s:3660   .text:0000000000005247 $d
             forth.s:3660   .text:0000000000005248 $t
             forth.s:3689   .text:00000000000052a1 $d
             forth.s:3689   .text:00000000000052a2 $t
             forth.s:3731   .text:00000000000052f5 $d
             forth.s:3731   .text:00000000000052f6 $t
             forth.s:3780   .text:0000000000005387 $d
             forth.s:3780   .text:0000000000005388 $t
             forth.s:3872   .text:0000000000005483 $d
             forth.s:3872   .text:0000000000005484 $t
             forth.s:3960   .text:00000000000055bd $d
             forth.s:3960   .text:00000000000055be $t
ARM GAS  forth.s 			page 270


             forth.s:3971   .text:00000000000055e7 $d
             forth.s:3971   .text:00000000000055e8 $t
             forth.s:4016   .text:000000000000565d $d
             forth.s:4016   .text:000000000000565e $t
             forth.s:4067   .text:00000000000056ef $d
             forth.s:4067   .text:00000000000056f0 $t
             forth.s:4095   .text:0000000000005757 $d
             forth.s:4095   .text:0000000000005758 $t
             forth.s:4108   .text:0000000000005779 $d
             forth.s:4108   .text:000000000000577a $t
             forth.s:4135   .text:00000000000057b9 $d
             forth.s:4135   .text:00000000000057ba $t
             forth.s:4159   .text:00000000000057f5 $d
             forth.s:4159   .text:00000000000057f6 $t
             forth.s:4170   .text:000000000000580f $d
             forth.s:4170   .text:0000000000005810 $t
             forth.s:4237   .text:00000000000058ff $d
             forth.s:4237   .text:0000000000005900 $t
             forth.s:4249   .text:000000000000591f $d
             forth.s:4249   .text:0000000000005920 $t
             forth.s:4410   .text:0000000000005b87 $d
             forth.s:4410   .text:0000000000005b88 $t
             forth.s:4475   .text:0000000000005c45 $d
             forth.s:4475   .text:0000000000005c46 $t
             forth.s:4566   .text:0000000000005d59 $d
             forth.s:4566   .text:0000000000005d5a $t
             forth.s:4670   .text:0000000000005e87 $d
             forth.s:4670   .text:0000000000005e88 $t
             forth.s:4696   .text:0000000000005ed7 $d
             forth.s:4696   .text:0000000000005ed8 $t
             forth.s:4749   .text:0000000000005f73 $d
             forth.s:4749   .text:0000000000005f74 $t
             forth.s:4769   .text:0000000000005fbf $d
             forth.s:4769   .text:0000000000005fc0 $t
             forth.s:4798   .text:000000000000601b $d
             forth.s:4798   .text:000000000000601c $t
             forth.s:4840   .text:000000000000608b $d
             forth.s:4840   .text:000000000000608c $t
             forth.s:4854   .text:00000000000060b9 $d
             forth.s:4854   .text:00000000000060ba $t
             forth.s:4913   .text:0000000000006169 $d
             forth.s:4913   .text:000000000000616a $t
             forth.s:4997   .text:00000000000062a3 $d
             forth.s:4997   .text:00000000000062a4 $t
             forth.s:5091   .text:00000000000063bd $d
             forth.s:5091   .text:00000000000063be $t
             forth.s:5228   .text:00000000000064ab $d
             forth.s:5228   .text:00000000000064ac $t
             forth.s:5295   .text:000000000000656f $d
             forth.s:5295   .text:0000000000006570 $t
             forth.s:5394   .text:00000000000066c9 $d
             forth.s:5394   .text:00000000000066ca $t

UNDEFINED SYMBOLS
_mstack
