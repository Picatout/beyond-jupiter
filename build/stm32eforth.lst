ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	   
 179              	   /* NVIC block */
 180              	   .equ NVIC_BASE_ADR, 0xE000E000
 181              	   .equ NVIC_ISER0, 0x100
 182              	   .equ NVIC_ISER1, 0x104
 183              	   .equ NVIC_ISER2, 0x108
 184              	   .equ NVIC_ISER3, 0x10c
 185              	   .equ NVIC_ISER4, 0x110
 186              	   .equ NVIC_ISER5, 0x114
 187              	   .equ NVIC_ISER6, 0x118
 188              	   .equ NVIC_ISER7, 0x11c
 189              	   .equ NVIC_ICER0, 0x180
 190              	   .equ NVIC_ICER1, 0x184 
 191              	   .equ NVIC_ICER2, 0x188 
 192              	   .equ NVIC_ICER3, 0x18C 
 193              	   .equ NVIC_ICER4, 0x190 
 194              	   .equ NVIC_ICER5, 0x194 
 195              	   .equ NVIC_ICER6, 0x198 
 196              	   .equ NVIC_ICER7, 0x19C 
 197              	   .equ NVIC_ISPR0, 0x200
 198              	   .equ NVIC_ISPR1, 0x204
 199              	   .equ NVIC_ISPR2, 0x208 
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ISPR3, 0x20c 
 201              	   .equ NVIC_ISPR4, 0x210 
 202              	   .equ NVIC_ISPR5, 0x214 
 203              	   .equ NVIC_ISPR6, 0x218 
 204              	   .equ NVIC_ISPR7, 0x21c 
 205              	   .equ NVIC_ICPR0, 0x280
 206              	   .equ NVIC_ICPR1, 0x284
 207              	   .equ NVIC_ICPR2, 0x288
 208              	   .equ NVIC_ICPR3, 0x28c
 209              	   .equ NVIC_ICPR4, 0x290
 210              	   .equ NVIC_ICPR5, 0x294
 211              	   .equ NVIC_ICPR6, 0x298
 212              	   .equ NVIC_ICPR7, 0x29c
 213              	   .equ NVIC_IABR0, 0x300
 214              	   .equ NVIC_IABR1, 0x304
 215              	   .equ NVIC_IABR2, 0x308
 216              	   .equ NVIC_IABR3, 0x30c
 217              	   .equ NVIC_IABR4, 0x310
 218              	   .equ NVIC_IABR5, 0x314
 219              	   .equ NVIC_IABR6, 0x318
 220              	   .equ NVIC_IABR7, 0x31c
 221              	/*  NVIC_IPR0 - NVIC_IPR59 */
 222              	   .equ NVIC_IPR_BASE, 0xE000E400 
 223              	
 224              	/*  IRQ number */
 225              	   .equ NMI_IRQ, (-14) // non maskable
 226              	   .equ HF_IRQ, (-13)  // hard fault
 227              	   .equ MM_IRQ, (-12)  // memory Management
 228              	   .equ BF_IRQ, (-11)  // bus fault 
 229              	   .equ UF_IRQ, (-10)  // usage fault 
 230              	   .equ SVC_IRQ, (-5)  // service call 
 231              	   .equ DM_IRQ, (-4)  // debug monitor
 232              	   .equ PSV_IRQ, (-2) // pending service 
 233              	   .equ STCK_IRQ, (-1) // systick 
 234              	   .equ WWDG_IRQ, (0) // window watchdog 
 235              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 236              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 237              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 238              	   .equ FLASH_IRQ, (4) // flash global 
 239              	   .equ RCC_IRQ, (5)  // real time clock 
 240              	   .equ EXTI0_IRQ, (6) // 
 241              	   .equ EXTI1_IRQ, (7)
 242              	   .equ EXTI2_IRQ, (8)
 243              	   .equ EXTI3_IRQ, (9)
 244              	   .equ EXTI4_IRQ, (10)
 245              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 246              	   .equ DMA1S1_IRQ, (12)
 247              	   .equ DMA1S2_IRQ, (13)
 248              	   .equ DMA1S3_IRQ, (14)
 249              	   .equ DMA1S4_IRQ, (15)
 250              	   .equ DMA1S5_IRQ, (16)
 251              	   .equ DMA1S6_IRQ, (17)
 252              	   .equ ADC_IRQ, (18)
 253              	   .equ EXTI9_5_IRQ, (23)
 254              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 255              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 256              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
ARM GAS  forth.s 			page 6


 257              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 258              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 259              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 260              	   .equ TIM4_IRQ, (30) // TIMER4 global
 261              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 262              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 263              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 264              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 265              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 266              	   .equ SPI2_IRQ, (36)  // SPI2 global
 267              	   .equ USART1_IRQ, (37) // USART1 global
 268              	   .equ USART2_IRQ, (38) // USART2 global
 269              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 270              	   .equ EXTI17_IRQ, (41)
 271              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 272              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 273              	   .equ SDIO_IRQ, (49) // SDIO global
 274              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 275              	   .equ SPI3_IRQ, (51)
 276              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 277              	   .equ DMA2S1_IRQ, (57) 
 278              	   .equ DMAS2_IRQ, (58)
 279              	   .equ DMAS3_IRQ, (59)
 280              	   .equ DMAS4_IRQ, (60)
 281              	   .equ OTG_FS_IRQ, (67)
 282              	   .equ DMA2S5_IRQ, (68)
 283              	   .equ DMA2S6_IRQ, (69)
 284              	   .equ DMA2S7_IRQ, (70)
 285              	   .equ USART6_IRQ, (71)
 286              	   .equ I2C3EV_IRQ, (72)
 287              	   .equ I2C3ER_IRQ, (73)
 288              	   .equ FPU_IRQ, (81) // FPU global
 289              	   .equ SPI4_IRQ, (84)
 290              	   .equ SPI5_IRQ, (85)
 291              	   
 292              	
 293              	/* TIMERS registers */
 294              	.equ TIM1_BASE_ADR,0x40010000
 295              	.equ TIM9_BASE_ADR,0x40010400
 296              	.equ TIM10_BASE_ADR,0x40010800
 297              	.equ TIM11_BASE_ADR,0x40010C00
 298              	
 299              	.equ TIM2_BASE_ADR,0x40000000
 300              	.equ TIM3_BASE_ADR,0x40000400
 301              	.equ TIM4_BASE_ADR,0x40000800
 302              	.equ TIM5_BASE_ADR,0x40000C00
 303              	
 304              	/* TIMER1 */
 305              	.equ TIM1_RCR,48 
 306              	.equ TIM1_BDTR,68 
 307              	
 308              	/* TIMER2..TIMER5 */
 309              	.equ TIM_CR1,0
 310              	.equ TIM_CR2,4
 311              	.equ TIM_SMCR,8
 312              	.equ TIM_DIER,12
 313              	.equ TIM_SR,16
ARM GAS  forth.s 			page 7


 314              	.equ TIM_EGR,20
 315              	.equ TIM_CCMR1,24
 316              	.equ TIM_CCMR2,28
 317              	.equ TIM_CCER,32
 318              	.equ TIM_CNT,36
 319              	.equ TIM_PSC,40
 320              	.equ TIM_ARR,44
 321              	.equ TIM_CCR1,52
 322              	.equ TIM_CCR2,56
 323              	.equ TIM_CCR3,60
 324              	.equ TIM_CCR4,64
 325              	.equ TIM_DCR,72
 326              	.equ TIM_DMAR,76
 327              	.equ TIM2_OR,80
 328              	.equ TIM5_OR,80 
 329              	
 330              	/* SYSCFG registers */
 331              	.equ SYSCFG_BASE_ADR, 0x40013800
 332              	
 333              	.equ SYSCFG_MEMRMP,0
 334              	.equ SYSCFG_PMC,4
 335              	.equ SYSCFG_EXTICR1,8
 336              	.equ SYSCFG_EXTICR2,12
 337              	.equ SYSCFG_EXTICR3,16
 338              	.equ SYSCFG_EXTICR4,20
 339              	.equ SYSCFG_CMPCR,32
 340              	
 341              	/* EXTI registers */
 342              	.equ EXTI_BASE_ADR, 0x40013C00
 343              	
 344              	.equ EXTI_IMR,0
 345              	.equ EXTI_EMR,4
 346              	.equ EXTI_RTSR,8
 347              	.equ EXTI_FTSR,12
 348              	.equ EXTI_SWIER,16
 349              	.equ EXTI_PR,20
 350              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
ARM GAS  forth.s 			page 8


  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
ARM GAS  forth.s 			page 9


  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	
 109              	/***********************************************
 110              	* MACROS
 111              	*	Assemble inline direct threaded code ending.
 112              	***********************************************/
 113              		.macro _CALL fn /* low level routine call */ 
 114              	 	PUSH {LR}
 115              		BL \fn  
 116              		POP {LR}
 117              		.endm
 118              		
 119              		.macro _RET /* exit sub-routine */ 
 120              		BX LR 
 121              		.endm 
 122              	
 123              		/* dictionary header  */
 124              		.macro _HEADER  label, nlen, name
 125              			.word LINK 
 126              			.equ LINK , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		\label:   // code field 
 131              		.endm 
 132              		
 133              	
ARM GAS  forth.s 			page 10


 134              	// local function header 
 135              		.macro _FUNC label 
 136              		.section .text, "ax", %progbits 
 137              		.p2align 2 
 138              		.type \label, %function  
 139              		\label:
 140              		.endm 
 141              	
 142              	// global function header 
 143              		.macro _GBL_FUNC label 
 144              		.global \label 
 145              		_FUNC \label 
 146              		.endm 
 147              	
 148              	
 149              	// load large constant to register 
 150              		.macro _MOV32 r, value 
 151              		mov \r,#(\value&0xffff)
 152              		movt \r,#(\value>>16)
 153              		.endm 
 154              	
 155              		.macro _NEXT /* direct jump INEXT */ 
 156              		B INEXT   
 157              		.endm 
 158              	
 159              	 	.macro	_NEST /*start high level word */
 160              		BX INX  
 161              		NOP.N 
 162              		.endm
 163              	
 164              		.macro _ADR label 
 165              		.word 1+\label  
 166              		.endm 
 167              	
 168              	 	.macro	_UNNEST	/*end high level word */
 169              		_ADR UNNEST 
 170              		.endm
 171              	
 172              	 	.macro	_DOLIT u /*long literals */
 173              		_ADR	DOLIT
 174              		.word	\u 
 175              		.endm
 176              	
 177              		.macro _DOTQP len, text 
 178              		_ADR DOTQP 
 179              		.byte \len 
 180              		.ascii "\text" 
 181              		.p2align 2 
 182              		.endm
 183              	
 184              		.macro _COMPI name 
 185              		_DOLIT \name 
 186              		_ADR CALLC 
 187              		.endm 
 188              	
 189              		.macro _ABORQ len,name 
 190              		_ADR ABORQ 
ARM GAS  forth.s 			page 11


 191              		.byte \len 
 192              		.ascii "\name"
 193              		.p2align 2 
 194              		.endm
 195              	
 196              		.macro _BRAN label 
 197              		_ADR BRAN 
 198              		.word \label 
 199              		.endm 
 200              	
 201              		.macro _QBRAN label 
 202              		_ADR QBRAN 
 203              		.word \label
 204              		.endm 
 205              	
 206              		.macro _DONXT label 
 207              		_ADR DONXT
 208              		.word \label 
 209              		.endm 
 210              	
 211              	 	.macro	_PUSH	/*push TOS on data stack*/
 212              		STR	TOS,[DSP,#-4]!
 213              		.endm
 214              	
 215              	 	.macro	_POP /*pop data stack to TOS */
 216              		LDR	TOS,[DSP],#4
 217              		.endm
 218              	
 219              		// calling a colon word 
 220              		// from a code word   
 221              		.macro _CALL_COLWORD target 
 222              	    ldr WP,=\target 
 223              		orr WP,#1
 224              		b \target  
 225              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
ARM GAS  forth.s 			page 12


  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
ARM GAS  forth.s 			page 13


 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF890C4 	  ldr IP,=dh
 159 000e 01F0BBBB 	  b INEXT  
 160              	dh:
ARM GAS  forth.s 			page 14


 161 0012 052F0000 	  _ADR PRESE    
 162 0016 07190000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e BD1D0000 	  _ADR COUNT 
 164 0022 B9260000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a 391A0000 	  _ADR DUPP
 167 002e E1190000 	  _ADR TOR 
 168 0032 07190000 	  _DOLIT 16 
 168      10000000 
 169 003a 551E0000 	  _ADR BASE 
 170 003e 79190000 	  _ADR STORE 
 171 0042 F1270000 	  _ADR DOT 
 172 0046 B9190000 	  _ADR RFROM
 173 004a 07190000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 7D1A0000 	  _ADR ANDD
 175 0056 47190000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 07190000 	  _DOLIT ','
 177      2C000000 
 178 006a 11180000 	  _ADR EMIT 
 179 006e 65260000 	  _ADR SPACE 
 180 0072 F1270000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 01F07EBB 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 01F075BB 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
ARM GAS  forth.s 			page 15


 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8C0C3 	  ldr IP,=ur
 232 00e2 01F051BB 	  b INEXT  
 233              	ur:
 234 00e6 052F0000 	  _ADR PRESE
 235 00ea ED260000 	  _ADR CR   
 236 00ee 07190000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 BD1D0000 		_ADR COUNT 
 238 00fa B9260000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
ARM GAS  forth.s 			page 16


 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0C4F9 		bl  ser_init
 271 0152 FFF7FEFF 		bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0ABFA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 03F0FFBB 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF820A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
ARM GAS  forth.s 			page 17


 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 347 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 348 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 349 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 350 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 351              	/* configure GPIOC:13 as output for user LED */
 352 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 352      C4F20200 
 353 0206 4FF00D01 	  mov r1,#LED_PIN
 354 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 355 020e 00B500F0 	  _CALL gpio_config 
 355      8FF85DF8 
 355      04EB
 356 0218 4FF00102 	  mov r2,#1
 357 021c 00B500F0 	  _CALL gpio_out 
ARM GAS  forth.s 			page 18


 357      DEF85DF8 
 357      04EB
 358              	/* enable compensation CELL for fast I/O */
 359 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 359      C4F20101 
 360 022e 4FF00100 		mov r0,#1 
 361 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 362              	/* wait for ready bit */ 
 363 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 364 0236 10F4807F 	    tst r0,#(1<<8)
 365 023a FBD0     		beq 1b 	
 366              	
 367              	
 368              	/* configure systicks for 1msec ticks */
 369              	// set priority to 15 (lowest)
 370 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 371 0240 4FF00F01 	  mov r1,#15 
 372 0244 00B500F0 	  _CALL nvic_set_priority
 372      2FF85DF8 
 372      04EB
 373 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 373      CEF20000 
 374 0256 47F2FF61 	  _MOV32 r1,95999 
 374      C0F20101 
 375 025e 4160     	  str r1,[r0,#STK_LOAD]
 376 0260 4FF00701 	  mov r1,#7
 377 0264 0160     	  str r1,[r0,STK_CTL]
 378 0266 7047     	  _RET  
 379              	
 380              	
 381              	/* copy system variables to RAM */ 
 382              		.type remap, %function 
 383              	    .global remap 
 384              	remap:
 385              	// copy system to RAM 	
 386 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 386      C2F20000 
 387 0270 8D49     		ldr r1,=UZERO 
 388 0272 4FF0A802 		mov r2,#ULAST-UZERO 
 389 0276 02F10302 		add r2,r2,#3
 390 027a 22F00302 		and r2,r2,#~3 
 391 027e 51F8043B 	1:	ldr r3,[r1],#4 
 392 0282 40F8043B 		str r3,[r0],#4 
 393 0286 043A     		subs R2,#4 
 394 0288 F9D1     		bne 1b
 395              	// zero end of RAM 
 396 028a 4FF00002 		_MOV32 r2,RAM_END 
 396      C2F20202 
 397 0292 83EA0303 		eor r3,r3,r3 
 398 0296 40F8043B 	2:  str r3,[r0],#4
 399 029a 9042     		cmp r0,r2 
 400 029c FBDB     		blt 2b 
 401 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 401      C2F20004 
 402 02a6 7047     		_RET 
 403              	
 404              	// set irq priority 
ARM GAS  forth.s 			page 19


 405              	// 0 highest 
 406              	// 15 lowest
 407              	// input: r0 IRQn  
 408              	//        r1  ipr 
 409              	nvic_set_priority:
 410 02a8 08B4     	    push {r3}
 411 02aa 0028     	    cmp r0,#0 
 412 02ac 08D4     	    bmi negative_irq 
 413 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 413      CEF20003 
 414 02b6 4FEA0111 	    lsl r1,#4 
 415 02ba 1954     	    strb r1,[r3,r0]
 416 02bc 08BC     	    pop {r3}
 417 02be 7047     	    _RET 
 418              	negative_irq:
 419 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 419      CEF20003 
 420 02c8 00F00F00 	    and r0,#0XF 
 421 02cc A0F10400 	    sub r0,#4 
 422 02d0 4FEA0111 	    lsl r1,#4 
 423 02d4 1954     	    strb r1,[r3,r0]
 424 02d6 08BC     	    pop {r3}
 425 02d8 7047     	    _RET 
 426              	
 427              	
 428              	// enable interrupt in nvic 
 429              	// input: r0 = IRQn 
 430              	nvic_enable_irq: 
 431 02da 0EB4     	    push {r1,r2,r3}
 432 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 432      CEF20003 
 433 02e4 0146     	    mov r1,r0 
 434 02e6 4FEA5111 	    lsr r1,#5  
 435 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 436 02ee 00F01F00 	    and r0,#31 // bit#
 437 02f2 4FF00102 	    mov r2,#1 
 438 02f6 02FA00F2 	    lsl r2,r0
 439 02fa 72B6     	    cpsid I
 440 02fc 5A50     	    str r2,[r3,r1]
 441 02fe 62B6     	    cpsie I 
 442 0300 0EBC     	    pop {r1,r2,r3}
 443 0302 7047     	    _RET 
 444              	
 445              	// disable interrupt in nvic
 446              	// input: r0 = IRQn
 447              	nvic_disable_irq:
 448 0304 0EB4     	    push {r1,r2,r3}
 449 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 449      CEF20003 
 450 030e 0146     	    mov r1,r0 
 451 0310 4FEA5111 	    lsr r1,#5  
 452 0314 4FEA8101 	    lsl r1,#2  // ISERn
 453 0318 00F01F00 	    and r0,#31 // bit#
 454 031c 4FF00102 	    mov r2,#1 
 455 0320 02FA00F2 	    lsl r2,r0
 456 0324 5A50     	    str r2,[r3,r1]
 457 0326 BFF34F8F 	    dsb 
ARM GAS  forth.s 			page 20


 458 032a BFF36F8F 	    isb 
 459 032e 0EBC     	    pop {r1,r2,r3}
 460 0330 7047     	    _RET 
 461              	
 462              	/**********************************
 463              	  gpio_config 
 464              	  Configure gpio mode 
 465              	  input:
 466              	    r0   GPIOx 
 467              	    r1   pin 
 468              	    r2   mode 
 469              	  output:
 470              	    none 
 471              	  use:
 472              	    r3,r5,r11  
 473              	**********************************/
 474              	gpio_config:
 475 0332 2DE92808 	    push {r3,r5,r11}
 476              	//  clear registers field 
 477 0336 4FF00105 	    mov r5,#1
 478 033a 05FA01F5 	    lsl r5,r1
 479 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 480 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 481 0344 03EA0503 	    and r3,r5 
 482 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 483 034a 4FF00305 	    mov r5,#3 
 484 034e 4FF0020B 	    mov r11,#2 
 485 0352 01FB0BFB 	    mul r11,r1 
 486 0356 05FA0BF5 	    lsl r5,r11 
 487 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 488 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 489 0360 03EA0503 	    and r3,r5 
 490 0364 0360     	    str r3,[r0,#GPIO_MODER]
 491 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 492 0368 03EA0503 	    and r3,r5 
 493 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 494              	// set mode register, r2 low nibble  
 495 036e 02F00305 	    and r5,r2,#3    
 496 0372 05FA0BF5 	    lsl r5,r11 // mode 
 497 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 498 0378 43EA0503 	    orr r3,r5 
 499 037c 0360     	    str r3,[r0,#GPIO_MODER]
 500 037e 032A     	    cmp r2,#3
 501 0380 13D0     	    beq 9f // analog input 
 502 0382 12F00305 	    ands r5,r2,#3 
 503 0386 08D0     	    beq input_pull 
 504              	output_type:
 505 0388 4FEA1212 	    lsr r2,#4 
 506 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 507 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 508 0392 43EA0203 	    orr r3,r2 
 509 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 510 0398 07E0     	    b 9f 
 511              	input_pull:
 512 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 513 039c 4FEA1212 	    lsr r2,#4 
 514 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
ARM GAS  forth.s 			page 21


 515 03a4 43EA0203 	    orr r3,r2 
 516 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 517 03aa BDE82808 	9:  pop {r3,r5,r11}
 518 03ae 7047     	    _RET 
 519              	
 520              	// configure gpio speed 
 521              	// input:
 522              	//    r0   GPIO_BASE_ADR 
 523              	//    r1   pin 
 524              	//    r2   speed
 525              	// use:
 526              	//  r3,r5,r11 
 527              	gpio_speed:
 528 03b0 2DE92808 	    push {r3,r5,r11}
 529 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 530 03b6 4FF00305 	    mov r5,#3
 531 03ba 4FF0020B 	    mov r11,#2 
 532 03be 01FB0BFB 	    mul r11,r1 
 533 03c2 05FA0BF5 	    lsl r5,r11
 534 03c6 6FEA0505 	    mvn r5,r5 
 535 03ca 03EA0503 	    and r3,r5   
 536 03ce 02FA0BF2 	    lsl r2,r11  
 537 03d2 43EA0203 	    orr r3,r2 
 538 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 539 03d8 BDE82808 	    pop {r3,r5,r11}
 540 03dc 7047     	    _RET
 541              	
 542              	/**************************** 
 543              	  gpio_out port,pin,0|1
 544              	  input:
 545              	    r0   gpio_base_adr 
 546              	    r1   pin 
 547              	    r2   data 0|1 
 548              	**************************/
 549              	gpio_out:
 550 03de 08B4     	    push {r3}
 551 03e0 4FF00103 	    mov r3,#1 
 552 03e4 03FA01F3 	    lsl r3,r1 
 553 03e8 0AB9     	    cbnz r2, 1f 
 554 03ea 4FEA0343 	    lsl r3,#16 
 555 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 556 03f0 08BC     	    pop {r3}
 557 03f2 7047     	    _RET 
 558              	
 559              	/******************************************************
 560              	*  COLD start moves the following to USER variables.
 561              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 562              	******************************************************/
 563              		.p2align 2
 564              	UZERO:
 565 03f4 00000000 		.word 0  			/*Reserved */
 566 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 567 03fc 00000000 		.word 0      /* TICKS */
 568 0400 00000000 	    .word 0     /* CD_TIMER */
 569 0404 74380000 		.word HI  /*'BOOT */
 570 0408 A8130000 		.word PS2_QKEY /* query for character */
 571 040c 800C0000 	  .word TV_EMIT  /* char output device */
ARM GAS  forth.s 			page 22


 572 0410 0A000000 	  .word BASEE 	/*BASE */
 573 0414 00000000 		.word 0			/*tmp */
 574 0418 00000000 		.word 0			/*SPAN */
 575 041c 00000000 		.word 0			/*>IN */
 576 0420 00000000 		.word 0			/*#TIB */
 577 0424 00FF0120 		.word TIBB	/*TIBU */
 578 0428 DC2D0000 		.word INTER	/*'EVAL */
 579 042c 00000000 		.word 0			/*HLD */
 580 0430 5C390000 		.word _LASTN	/*CONTEXT */
 581 0434 C0390000 		.word CTOP  	/* FCP end of system dictionnary */
 582 0438 CC350020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 583 043c 5C390000 		.word _LASTN	/*LAST word in dictionary */
 584 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 584      00000000 
 584      00000000 
 584      00000000 
 585 0450 00000000 		.word 0  /* RX_HEAD */
 586 0454 00000000 		.word 0  /* RX_TAIL */ 
 587 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 588 045c 00000000 		.word 0  /* VID_STATE, video state */  
 589 0460 00000000 	    .word 0  /* VID_FIELD, field */
 590 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 591 0468 00000000 	    .word 0 /* kbd struct */
 592 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 592      00000000 
 592      00000000 
 592      00000000 
 593 047c 00000000 		.word 0  /* kbd queue head */
 594 0480 00000000 		.word 0 /* kbd queue tail */ 
 595 0484 00000000 	    .word 0 /* tv cursor row */
 596 0488 00000000 	    .word 0 /* tv cursor column */ 
 597 048c 00000000 	    .word 0 /* tv back color */
 598 0490 07000000 	    .word 7 /* tv font color */
 599 0494 00000000 	    .word 0,0 
 599      00000000 
 600              	ULAST:
 601              	
 602              	// used by _HEADER macro 
 603              	// to link names field
 604              	// in dictionary  
 605 049c 12000000 	    .equ LINK, 0 
 605      E6000000 
 605      80170000 
 605      F4030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
ARM GAS  forth.s 			page 23


  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04ac 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 04b4 1868     		ldr r0,[r3,#USART_SR]
  38 04b6 5968     		ldr r1,[r3,#USART_DR]
  39 04b8 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04bc 0CD0     		beq 2f // no char received 
  41 04be B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04c2 3FF407AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04c6 04F14C00 		add r0,UP,#RX_QUEUE
  44 04ca 226E     		ldr r2,[UP,#RX_TAIL]
  45 04cc 8154     		strb r1,[r0,r2]
  46 04ce 02F10102 		add r2,#1 
  47 04d2 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04d6 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04d8 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04da 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04e2 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04e4 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04e8 01EA0201 	  and r1,r1,r2
  62 04ec 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04f0 41EA0201 	  orr r1,r1,r2 
  64 04f4 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04f6 4FF4EE61 	  mov r1,#0x77<<4 
  67 04fa 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
ARM GAS  forth.s 			page 24


  69 04fc 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0504 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0508 8160     	  str r1,[r0,#USART_BRR]
  73 050a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 050e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0510 4FF02500 	  mov r0,#USART1_IRQ 
  77 0514 4FF00101 	  mov r1,#1 
  78 0518 00B5FFF7 	  _CALL nvic_set_priority
  78      C5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0522 4FF02500 	  mov r0,#USART1_IRQ 
  81 0526 00B5FFF7 	  _CALL nvic_enable_irq  
  81      D7FE5DF8 
  81      04EB
  82 0530 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0532 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0540 47F8046D 		_PUSH
  92 0544 206E     		ldr T0,[UP,#RX_TAIL] 
  93 0546 E16D     		ldr T1,[UP,#RX_HEAD]
  94 0548 90EA0106 		eors TOS,T0,T1 
  95 054c 0CD0     		beq 1f
  96 054e 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0552 0844     		add T0,T1 
  98 0554 0678     		ldrb TOS,[T0]
  99 0556 01F10101 		add T1,#1 
 100 055a 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 055e E165     		str T1,[UP,#RX_HEAD]
 102 0560 47F8046D 		_PUSH 
 103 0564 4FF0FF36 		mov TOS,#-1
 104 0568 01F00EB9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 056c 36050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 057c 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0584 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0586 10F0800F 	    tst T0,#0x80 // TXE flag 
ARM GAS  forth.s 			page 25


 114 058a FBD0     		beq 1b 
 115 058c 2E71     		strb TOS,[WP,#USART_DR]	 
 116 058e 57F8046B 		_POP
 117 0592 01F0F9B8 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0596 70050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05a0 47F8046D 	        _PUSH 
 126 05a4 4FF00006 	        mov TOS,#0
 127 05a8 01F0EEB8 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05ac 9A050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 05b8 47F8046D 	        _PUSH 
 135 05bc 4FF00106 	        mov TOS,#1
 136 05c0 01F0E2B8 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05c4 B0050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05d0 3046     	        mov T0,TOS
 144 05d2 57F8046B 	        _POP 
 145 05d6 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05d8 4B48     	        ldr T0,=SER_QKEY 
 148 05da 6061     	        str T0,[UP,#STDIN]
 149 05dc 4B48     	        ldr T0,=SER_EMIT
 150 05de A061     	        str T0,[UP,#STDOUT]
 151 05e0 01F0D2B8 	        _NEXT 
 152              	4: // local console 
 153 05e4 4A48     	        ldr T0,=PS2_QKEY
 154 05e6 6061     	        str T0,[UP,#STDIN]
 155 05e8 4A48     	        ldr T0,=TV_EMIT
 156 05ea A061     	        str T0,[UP,#STDOUT]
 157 05ec 01F0CCB8 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 05f0 C8050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
ARM GAS  forth.s 			page 26


 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0600 504700BF 	      _NEST 
 166 0604 07190000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 060c 591B0000 	1:    _ADR ONEP  // c+1
 168 0610 E1190000 	      _ADR TOR   
 169 0614 07190000 	      _DOLIT 10 
 169      0A000000 
 170 061c 49200000 	      _ADR SLMOD // r q  
 171 0620 0D1C0000 	      _ADR QDUP  // r q q | r 0  
 172 0624 47190000 	      _QBRAN 2f  // r 0 
 172      38060000 
 173 062c B9190000 	      _ADR RFROM // r q c 
 174 0630 5B190000 	      _BRAN 1b
 174      0C060000 
 175 0638 07190000 	2:    _DOLIT '0'  
 175      30000000 
 176 0640 FD1A0000 	      _ADR PLUS 
 177 0644 11180000 	      _ADR EMIT 
 178 0648 B9190000 	      _ADR RFROM 
 179 064c 0D1C0000 	      _ADR QDUP 
 180 0650 47190000 	      _QBRAN 3f
 180      68060000 
 181 0658 691B0000 	      _ADR ONEM 
 182 065c E1190000 	      _ADR TOR 
 183 0660 5B190000 	      _BRAN 2b 
 183      38060000 
 184              	3:    
 185 0668 8F170000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 066c F4050000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0678 504700BF 	      _NEST 
 193 067c 07190000 	      _DOLIT 27 
 193      1B000000 
 194 0684 11180000 	      _ADR EMIT 
 195 0688 07190000 	      _DOLIT '['
 195      5B000000 
 196 0690 11180000 	      _ADR EMIT 
 197 0694 8F170000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0698 70060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06a4 504700BF 	      _NEST
 205 06a8 79060000 	      _ADR ANSI_ESC
ARM GAS  forth.s 			page 27


 206 06ac 491A0000 	      _ADR SWAP 
 207 06b0 01060000 	      _ADR ANSI_PARAM 
 208 06b4 07190000 	      _DOLIT ';'
 208      3B000000 
 209 06bc 11180000 	      _ADR EMIT
 210 06c0 01060000 	      _ADR ANSI_PARAM
 211 06c4 07190000 	      _DOLIT 'H'
 211      48000000 
 212 06cc 11180000 	      _ADR EMIT 
 213 06d0 8F170000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06d4 9C060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06e0 504700BF 	    _NEST
 221 06e4 07190000 	    _DOLIT 1 
 221      01000000 
 222 06ec 391A0000 	    _ADR DUPP 
 223 06f0 A5060000 	    _ADR SER_AT  
 224 06f4 79060000 	    _ADR ANSI_ESC
 225 06f8 07190000 	    _DOLIT 'J'
 225      4A000000 
 226 0700 11180000 	    _ADR EMIT 
 227 0704 8F170000 	    _UNNEST 
 228 0708 40050000 	
 228      7C050000 
 228      A8130000 
 228      800C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
ARM GAS  forth.s 			page 28


  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
ARM GAS  forth.s 			page 29


  55              	/*******************************************************
  56              	NOTES:
  57              	 1) Values computed for a 96Mhz sysclock 
  58              	 2) Video sync output on PB1 use T3_CH4
  59              	 3) video out trigger TIMER3 CH3 
  60              	********************************************************/
  61              	
  62              	/**************************************
  63              	  initialize TIMER3 CH4 to generate tv_out
  64              	  synchronization signal.
  65              	**************************************/ 
  66              	  _GBL_FUNC tv_init
  67              	// configure PA0:3 as OUTPUT_OD 
  68 0718 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR 
  68      C4F20200 
  69 0720 0168     	  ldr r1,[r0,#GPIO_MODER]
  70 0722 4FF05502 	  mov r2,#0x55
  71 0726 41EA0201 	  orr r1,r2
  72 072a 0160     	  str r1,[r0,#GPIO_MODER]
  73 072c 81EA0101 	  eor r1,r1 
  74 0730 4161     	  str r1,[r0,#GPIO_ODR]  
  75              	// configure PB1 as OUTPUT_AFPP 
  76              	// this is TIM3_CC4 output compare 
  77 0732 00F58060 	  add r0,#0x400 // GPIOB_BASE_ADR
  78 0736 4FF00101 	  mov r1,#1 // pin 1 
  79 073a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  80 073e 00B5FFF7 	  _CALL gpio_config 
  80      F7FD5DF8 
  80      04EB
  81 0748 4FF00101 	  mov r1,#1 
  82 074c 4FF00202 	  mov r2,#2
  83 0750 00B5FFF7 	  _CALL gpio_speed 
  83      2DFE5DF8 
  83      04EB
  84              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  85 075a 016A     	  ldr r1,[r0,#GPIO_AFRL]
  86 075c 41F02001 	  orr r1,#(2<<4) // r2 
  87 0760 0162     	  str r1,[r0,#GPIO_AFRL]
  88              	// enable peripheral clock 
  89 0762 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  89      C4F20202 
  90 076a 4FF00200 	  mov r0,#2 
  91 076e 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  92 0770 41EA0001 	  orr r1,r0 
  93 0774 1164     	  str r1,[r2,#RCC_APB1ENR]
  94              	// configure TIMER3   
  95 0776 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
  95      C4F20002 
  96 077e 41F2D470 	  mov r0,#HPER
  97 0782 D062     	  str r0,[r2,#TIM_ARR]
  98 0784 40F23F50 	  mov r0,#VIDEO_DELAY 
  99 0788 D063     	  str r0,[r2,#TIM_CCR3]
 100 078a 4FF4E170 	  mov r0,#HPULSE 
 101 078e 1064     	  str r0,[r2,#TIM_CCR4]  
 102 0790 47F27000 	  mov r0,#(7<<12)+(7<<4)
 103 0794 D061     	  str r0,[r2,#TIM_CCMR2]
 104 0796 4FF48850 	  mov r0,#(1<<12)+(1<<8)
ARM GAS  forth.s 			page 30


 105 079a 1062     	  str r0,[r2,#TIM_CCER]
 106 079c 4FF00100 	  mov r0,#1 
 107 07a0 D060     	  str r0,[r2,#TIM_DIER]
 108 07a2 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 109              	// enable interrupt in NVIC controller 
 110 07a4 4FF01D00 	  mov r0,#TIM3_IRQ 
 111 07a8 4FF00201 	  mov r1,#2
 112 07ac 00B5FFF7 	  _CALL nvic_set_priority
 112      7BFD5DF8 
 112      04EB
 113 07b6 4FF01D00 	  mov r0,#TIM3_IRQ 
 114 07ba 00B5FFF7 	  _CALL nvic_enable_irq
 114      8DFD5DF8 
 114      04EB
 115 07c4 7047     	  _RET
 116              	
 117              	/*************************************
 118              	  TIMER3 interrupt for tv_out
 119              	  T1 line # 
 120              	  T0 TIM3_BASE_ADR 
 121              	*************************************/
 122 07c6 00BF     	  _GBL_FUNC tv_out_isr
 123 07c8 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 123      C4F20000 
 124 07d0 81EA0101 	  eor T1,T1
 125 07d4 0161     	  str T1,[T0,#TIM_SR]
 126 07d6 616E     	  ldr T1,[UP,#VID_CNTR]
 127 07d8 01F10101 	  add T1,#1 
 128 07dc 6166     	  str T1,[UP,#VID_CNTR]
 129              	/** machine state cases **/
 130 07de A26E     	  ldr T2,[UP,#VID_STATE]
 131 07e0 002A     	  cmp T2,#ST_VSYNC 
 132 07e2 07D0     	  beq state_vsync
 133 07e4 012A     	  cmp T2,#ST_PREVID 
 134 07e6 2FD0     	  beq state_pre_video 
 135 07e8 022A     	  cmp T2,#ST_VIDEO 
 136 07ea 36D0     	  beq state_video_out 
 137 07ec 032A     	  cmp T2,#ST_POSTVID 
 138 07ee 60D0     	  beq state_post_video
 139 07f0 FFF7FEBF 	  b default_handler // invalid state 
 140              	/*** vertical sync state **/
 141              	state_vsync:
 142 07f4 0129     	  cmp T1,#1
 143 07f6 06D1     	  bne 1f 
 144              	/****** set vertical pre-sync  *****/
 145 07f8 4FF0DB01 	  mov T1,#SERRATION
 146 07fc 0164     	  str T1,[T0,#TIM_CCR4]
 147 07fe 40F6E931 	  mov T1,#SYNC_LINE 
 148 0802 C162     	  str T1,[T0,#TIM_ARR]
 149 0804 68E0     	  b tv_isr_exit 
 150 0806 0729     	1: cmp T1,#7
 151 0808 03D1     	  bne 2f 
 152              	// vertical sync pulse   
 153 080a 40F62821 	  mov T1,#VSYNC_PULSE
 154 080e 0164     	  str T1,[T0,#TIM_CCR4]
 155 0810 62E0     	  b tv_isr_exit
 156 0812 0D29     	2: cmp T1,#13
ARM GAS  forth.s 			page 31


 157 0814 03D1     	   bne 3f  
 158              	// set vertical post-sync    
 159 0816 4FF0DB01 	   mov T1,#SERRATION 
 160 081a 0164     	   str T1,[T0,#TIM_CCR4]
 161 081c 5CE0     	   b tv_isr_exit   
 162 081e 1229     	3: cmp T1,#18
 163 0820 03D1     	   bne 4f 
 164              	// if even field full line  
 165 0822 E16E     	   ldr T1,[UP,#VID_FIELD]
 166 0824 0029     	   cmp T1,#ODD_FIELD  
 167 0826 57D0     	   beq tv_isr_exit 
 168 0828 01E0     	   b sync_end 
 169 082a 1329     	4: cmp T1,#19 
 170 082c 54D1     	   bne tv_isr_exit
 171              	sync_end: 
 172 082e 4FF00901 	   mov T1,#9
 173 0832 6166     	   str T1,[UP,#VID_CNTR]
 174 0834 4FF4E171 	   mov T1,#HPULSE 
 175 0838 0164     	   str T1,[T0,#TIM_CCR4] 
 176 083a 41F2D471 	   mov T1,#HPER 
 177 083e C162     	   str T1,[T0,#TIM_ARR] 
 178 0840 4FF00101 	   mov T1,#ST_PREVID 
 179 0844 A166     	   str T1,[UP,#VID_STATE]
 180 0846 47E0     	   b tv_isr_exit 
 181              	/*****************************/
 182              	state_pre_video:
 183 0848 2829     	   cmp T1,#VIDEO_FIRST_LINE
 184 084a 45D4     	   bmi tv_isr_exit 
 185 084c 4FF00201 	   mov T1,#ST_VIDEO 
 186 0850 A166     	   str T1,[UP,#VID_STATE]
 187 0852 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 188 0856 C160     	   str T1,[T0,#TIM_DIER]
 189 0858 3EE0     	   b tv_isr_exit 
 190              	/**************************
 191              	    VIDEO OUTPUT 
 192              	**************************/   
 193              	state_video_out:
 194 085a F029     	   cmp T1,#VIDEO_LAST_LINE 
 195 085c 06D9     	   bls 1f 
 196 085e 4FF00301 	   mov T1,#ST_POSTVID 
 197 0862 A166     	   str T1,[UP,#VID_STATE]
 198 0864 4FF00101 	   mov T1,#1 
 199 0868 C160     	   str T1,[T0,#TIM_DIER]
 200 086a 35E0     	   b tv_isr_exit 
 201              	1: // video output
 202 086c 206F     	   ldr T0,[UP,#VID_BUFFER]
 203 086e A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 204 0872 4FF0A003 	   mov T3,#160
 205 0876 03FB01F1 	   mul T1,T3 
 206 087a 0844     	   add T0,T1  
 207 087c 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 207      C4F20201 
 208 0884 0278     	2: ldrb T2,[T0]
 209 0886 4FEA1212 	   lsr T2,#4 
 210 088a 4A61     	   str T2,[T1,#GPIO_ODR]
 211 088c AFF30080 	   nop.w
 212 0890 AFF30080 	   nop.w 
ARM GAS  forth.s 			page 32


 213 0894 10F8012B 	   ldrb T2,[T0],#1
 214 0898 02F00F02 	   and T2,#15 
 215 089c 4A61     	   str T2,[T1,#GPIO_ODR]
 216 089e AFF30080 	   nop.w
 217 08a2 AFF30080 	   nop.w  
 218 08a6 013B     	   subs T3,#1
 219 08a8 ECD1     	   bne 2b  
 220 08aa 4FF47022 	   mov T2,#(15<<16) 
 221 08ae 8A61     	   str T2,[T1,#GPIO_BSRR]
 222 08b0 12E0     	   b tv_isr_exit 
 223              	state_post_video:
 224 08b2 4FF48372 	   mov T2,#262
 225 08b6 9142     	   cmp T1,T2
 226 08b8 0ED4     	   bmi tv_isr_exit     
 227              	// odd field line 262 half line 
 228 08ba E16E     	   ldr T1,[UP,VID_FIELD]
 229 08bc 11B9     	   cbnz T1, frame_end 
 230 08be 40F6E931 	   mov T1,#SYNC_LINE
 231 08c2 C162     	   str T1,[T0,#TIM_ARR]      
 232              	frame_end: 
 233 08c4 4FF00001 	   mov T1,#ST_VSYNC 
 234 08c8 A166     	   str T1,[UP,#VID_STATE]
 235 08ca 81EA0101 	   eor T1,T1 
 236 08ce 6166     	   str T1,[UP,#VID_CNTR]
 237 08d0 E16E     	   ldr T1,[UP,#VID_FIELD]
 238 08d2 6FEA0101 	   mvn T1,T1  
 239 08d6 E166     	   str T1,[UP,#VID_FIELD]
 240              	tv_isr_exit: 
 241 08d8 7047     	   _RET   
 242              	
 243              	
 244              	/***************************
 245              	    FORTH WORDS 
 246              	***************************/
 247              	
 248              	// BACK-COLOR ( -- a )
 249              	//   back color variable 
 250 08da D8060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 250      0A424143 
 250      4B2D434F 
 250      4C4F5200 
 250      00BF
 251 08ec 47F8046D 		_PUSH 
 252 08f0 04F19806 		ADD TOS,UP,#BK_COLOR
 253 08f4 00F048BF 		_NEXT
 254              	
 255              	// PEN-COLOR ( -- a )
 256              	// pen color variable 
 257 08f8 DE080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 257      0950454E 
 257      2D434F4C 
 257      4F5200BF 
 258 0908 47F8046D 		_PUSH 
 259 090c 04F19C06 		ADD TOS,UP,#PEN_COLOR
 260 0910 00F03ABF 		_NEXT 
 261              	
 262              	// COLUMN ( -- a )
ARM GAS  forth.s 			page 33


 263              	// cursor column variable 
 264 0914 FC080000 	  _HEADER CURSOR_COL,6,"COLUMN"
 264      06434F4C 
 264      554D4E00 
 265 0920 47F8046D 	  _PUSH 
 266 0924 04F19406 	  ADD TOS,UP,#COL 
 267 0928 00F02EBF 	  _NEXT 
 268              	
 269              	// ROW ( -- a )
 270              	// cursor row 
 271 092c 18090000 	  _HEADER CURSOR_ROW,3,"ROW"
 271      03524F57 
 272 0934 47F8046D 	  _PUSH 
 273 0938 04F19006 	  ADD TOS,UP,#ROW 
 274 093c 00F024BF 	  _NEXT 
 275              	
 276              	// ROW>Y ( n1 - n2 )
 277              	// convert cursor row to y coord 
 278 0940 30090000 	  _HEADER ROWY,5,"ROW>Y"
 278      05524F57 
 278      3E5900BF 
 279 094c 4FF00800 	  mov T0,#CHAR_HEIGHT
 280 0950 00FB06F6 	  mul TOS,T0 
 281 0954 00F018BF 	  _NEXT 
 282              	
 283              	// COL>X ( n1 -- n2 )
 284              	// convert cursor column to x coord 
 285 0958 44090000 	  _HEADER COLX,5,"COL>X" 
 285      05434F4C 
 285      3E5800BF 
 286 0964 4FF00600 	  mov T0,#CHAR_WIDTH 
 287 0968 00FB06F6 	  mul TOS,T0 
 288 096c 00F00CBF 	  _NEXT 
 289              	
 290              	// FONT ( -- a )
 291              	// return address of font table
 292 0970 5C090000 	  _HEADER FONT,4,"FONT" 
 292      04464F4E 
 292      540000BF 
 293 097c 47F8046D 	  _PUSH 
 294 0980 DFF88865 	  ldr TOS,=font_6x8 
 295 0984 00F000BF 	  _NEXT 
 296              	
 297              	// VIDBUFF ( -- a )
 298              	// address of video buffer 
 299 0988 74090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 299      07564944 
 299      42554646 
 300 0994 47F8046D 	  _PUSH 
 301 0998 266F     	  LDR TOS,[UP,#VID_BUFFER]
 302 099a 00F0F5BE 	  _NEXT 
 303              	
 304              	
 305              	// PLOT ( x y op -- )
 306              	// draw a pixel 
 307              	//    0 back color 
 308              	//    1 pen color 
ARM GAS  forth.s 			page 34


 309              	//    2 invert (invert color pixels )
 310              	//    3 xor pen color  
 311 099e 8C090000 	    _HEADER PLOT,4,"PLOT"
 311      04504C4F 
 311      5400
 312              	// compute video buffer byte address from coords
 313 09a8 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 314 09aa 4FF0A002 	    mov T2,#BPR // bytes per row  
 315 09ae 02FB00F0 	    mul T0,T2 
 316 09b2 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 317 09b6 1044     	    add T0,T2 
 318 09b8 236F     	    ldr T3,[UP,#VID_BUFFER] 
 319 09ba 0344     	    add T3,T0 // T3 -> byte address 
 320 09bc 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 321 09be 4FF00F02 	    mov T2,#15 // AND mask 
 322 09c2 11F0010F 	    tst T1,#1 
 323 09c6 01D0     	    beq 1f 
 324 09c8 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 325 09cc DFF84005 	1:  ldr T0,=plot_op 
 326 09d0 D0E806F0 	    tbb [T0,TOS]
 327              	op_back:
 328 09d4 05EA0205 	    and WP,T2 // mask out nibble 
 329 09d8 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 330 09dc 11F0010F 	    tst T1,#1 
 331 09e0 01D1     	    bne 1f 
 332 09e2 4FEA0010 	    lsl T0,#4 // high nibble  
 333 09e6 45EA0005 	1:  orr WP,T0  
 334 09ea 1D70     	    strb WP,[T3]
 335 09ec 1AE0     	    b 9f 
 336              	op_pen: 
 337 09ee 05EA0205 	    and WP,T2 
 338 09f2 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 339 09f6 11F0010F 	    tst T1,#1
 340 09fa 01D1     	    bne 1f 
 341 09fc 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 342 0a00 45EA0005 	1:	orr WP,T0 
 343 0a04 1D70     	    strb WP,[T3]
 344 0a06 0DE0     	    b 9f 
 345              	op_invert:
 346 0a08 85EA0205 	    eor WP,T2 
 347 0a0c 1D70     	    strb WP,[T3]
 348 0a0e 09E0     	    b 9f 
 349              	op_xor:
 350 0a10 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 351 0a14 11F0010F 	    tst T1,#1 
 352 0a18 01D1     	    bne 1f 
 353 0a1a 4FEA0010 	    lsl T0,#4 
 354 0a1e 85EA0005 	1:  eor WP,T0 
 355 0a22 1D70     	    strb WP,[T3]
 356 0a24 57F8046B 	9:  _POP 
 357 0a28 00F0AEBE 	    _NEXT 
 358              	
 359 0a2c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 360              	
 361              	
 362              	// VSYNC ( -- )
 363              	// wait vertical sync phase 
ARM GAS  forth.s 			page 35


 364 0a30 A2090000 	    _HEADER VSYNC,5,"VSYNC"
 364      05565359 
 364      4E4300BF 
 365 0a3c 606E     	1:  ldr T0,[UP,#VID_CNTR]
 366 0a3e 0028     	    cmp T0,#0
 367 0a40 FCD1     	    bne 1b
 368 0a42 00F0A1BE 	    _NEXT 
 369              	
 370              	// CLS ( -- )
 371              	// clear TV screen 
 372 0a46 340A0000 	    _HEADER CLS,3,"CLS"
 372      03434C53 
 372      00BF
 373 0a50 80EA0000 	    eor T0,T0 
 374 0a54 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 375 0a58 40EA0100 	    orr T0,T1 
 376 0a5c 4FEA0111 	    lsl T1,#4 
 377 0a60 40EA0100 	    orr T0,T1 
 378 0a64 4FEA0021 	    lsl T1,T0,#8 
 379 0a68 40EA0100 	    orr T0,T1 
 380 0a6c 4FEA0041 	    lsl T1,T0,#16
 381 0a70 40EA0100 	    orr T0,T1 
 382 0a74 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 383 0a78 226F     	    ldr T2,[UP,#VID_BUFFER]
 384 0a7a 5050     	1:	str T0,[T2,T1]
 385 0a7c 0439     	    subs T1,#4
 386 0a7e FCD1     	    bne 1b
 387 0a80 1060     	    str T0,[T2]
 388 0a82 80EA0000 	    eor T0,T0 
 389 0a86 C4F89000 	    str T0,[UP,#ROW]
 390 0a8a C4F89400 	    str T0,[UP,#COL]
 391 0a8e 00F07BBE 	    _NEXT 
 392              	
 393              	
 394              	// CLRLINE ( n -- )
 395              	// clear text line 
 396 0a92 4A0A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 396      07434C52 
 396      4C494E45 
 396      00BF
 397 0aa0 504700BF 	  _NEST
 398 0aa4 07190000 	  _DOLIT (BPR*CHAR_HEIGHT)
 398      00050000 
 399 0aac 391A0000 	  _ADR DUPP  
 400 0ab0 E1190000 	  _ADR TOR 
 401 0ab4 1D1B0000 	  _ADR STAR
 402 0ab8 95090000 	  _ADR VIDBUFF
 403 0abc FD1A0000 	  _ADR PLUS
 404 0ac0 B9190000 	  _ADR RFROM   
 405 0ac4 07190000 	  _DOLIT 0 
 405      00000000 
 406 0acc 7D220000 	  _ADR FILL 
 407 0ad0 8F170000 	  _UNNEST 
 408              	
 409              	/**********************************
 410              	 SCROLLUP ( -- )
 411              	 scroll up tv screen 1 char height 
ARM GAS  forth.s 			page 36


 412              	**********************************/
 413 0ad4 960A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 413      08534352 
 413      4F4C4C55 
 413      500000BF 
 414 0ae4 504700BF 	    _NEST 
 415 0ae8 95090000 	    _ADR VIDBUFF 
 416 0aec 391A0000 	    _ADR DUPP 
 417 0af0 07190000 	    _DOLIT BPR*CHAR_HEIGHT 
 417      00050000 
 418 0af8 391A0000 	    _ADR DUPP 
 419 0afc E1190000 	    _ADR TOR 
 420 0b00 FD1A0000 	    _ADR PLUS 
 421 0b04 491A0000 	    _ADR SWAP 
 422 0b08 07190000 	    _DOLIT VIDEO_BUFFER_SIZE 
 422      007D0000 
 423 0b10 B9190000 	    _ADR RFROM  
 424 0b14 0D1B0000 	    _ADR SUBB 
 425 0b18 35220000 	    _ADR MOVE
 426 0b1c 07190000 	    _DOLIT 24 
 426      18000000 
 427 0b24 A10A0000 	    _ADR CLRLINE 
 428 0b28 8F170000 	    _UNNEST 
 429              	
 430              	/***********************************
 431              	    SCROLLDOWN ( -- )
 432              	    scroll down tv screen 1 char 
 433              	***********************************/
 434 0b2c D80A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 434      0A534352 
 434      4F4C4C44 
 434      4F574E00 
 435 0b3c 504700BF 	    _NEST 
 436 0b40 95090000 	    _ADR VIDBUFF
 437 0b44 391A0000 	    _ADR DUPP 
 438 0b48 07190000 	    _DOLIT BPR*CHAR_HEIGHT 
 438      00050000 
 439 0b50 FD1A0000 	    _ADR PLUS 
 440 0b54 07190000 	    _DOLIT VIDEO_BUFFER_SIZE 
 440      007D0000 
 441 0b5c 07190000 	    _DOLIT BPR*CHAR_HEIGHT 
 441      00050000 
 442 0b64 0D1B0000 	    _ADR SUBB  
 443 0b68 35220000 	    _ADR MOVE
 444 0b6c 07190000 	    _DOLIT 0 
 444      00000000 
 445 0b74 A10A0000 	    _ADR CLRLINE
 446 0b78 8F170000 	    _UNNEST 
 447              	
 448              	
 449              	/*****************************
 450              	    TV-CRLF 
 451              	    carriage return line feed 
 452              	*****************************/
 453 0b7c 300B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 453      0754562D 
 453      43524C46 
ARM GAS  forth.s 			page 37


 454 0b88 E24D     	    ldr WP,=SCROLLUP 
 455 0b8a 45F00105 	    orr WP,#1
 456 0b8e 80EA0000 	    eor T0,T0 
 457 0b92 C4F89400 	    str T0,[UP,#COL]
 458 0b96 D4F89000 	    ldr T0,[UP,#ROW]
 459 0b9a 1828     	    cmp T0,#24 
 460 0b9c A2D0     	    beq SCROLLUP  
 461 0b9e 00F10100 	    add T0,#1 
 462 0ba2 C4F89000 	    str T0,[UP,#ROW]
 463 0ba6 00F0EFBD 	    _NEXT 
 464              	
 465              	
 466              	//  RIGHT ( -- )
 467              	// move cursor 1 char. right 
 468 0baa 800B0000 	  _HEADER RIGHT,5,"RIGHT"
 468      05524947 
 468      4854
 469 0bb4 D4F89400 	  ldr T0,[UP,#COL]
 470 0bb8 00F10100 	  add T0,#1
 471 0bbc 3528     	  cmp T0,#53
 472 0bbe E3D5     	  bpl TV_CRLF  
 473 0bc0 C4F89400 	  str T0,[UP,#COL]
 474 0bc4 00F0E0BD 	  _NEXT 
 475              	
 476              	/**************************
 477              	    LEFT ( -- )
 478              	    move text cursor 
 479              	    1 character left 
 480              	**************************/
 481 0bc8 AE0B0000 	    _HEADER LEFT,4,"LEFT"
 481      044C4546 
 481      540000BF 
 482 0bd4 D4F89400 	    ldr T0,[UP,#COL]
 483 0bd8 18B1     	    cbz T0,1f 
 484 0bda A0F10100 	    sub T0,#1 
 485 0bde C4F89400 	    str T0,[UP,#COL]
 486 0be2 D4F89000 	1:  ldr T0,[UP,#ROW]
 487 0be6 38B1     	    cbz T0,9f
 488 0be8 A0F10100 	    sub T0,#1
 489 0bec C4F89000 	    str T0,[UP,#ROW]
 490 0bf0 4FF03400 	    mov T0,#52 
 491 0bf4 C4F89400 	    str T0,[UP,#COL]
 492 0bf8 00F0C6BD 	9:  _NEXT 
 493              	
 494              	
 495              	// extract font pixel 
 496              	FONT_PIXEL: // ( r -- 0|1 )
 497 0bfc 4FF08000 	    mov T0,#128 
 498 0c00 06EA0006 	    and TOS,T0 
 499 0c04 4FEAD616 	    lsr TOS,#7
 500 0c08 00F0BEBD 	    _NEXT 
 501              	
 502              	// increment x coord 
 503              	INCR_X: // ( x y -- x' y )
 504 0c0c 3868     	  ldr T0,[DSP]
 505 0c0e 00F10100 	  add T0,#1 
 506 0c12 3860     	  str T0,[DSP]
ARM GAS  forth.s 			page 38


 507 0c14 00F0B8BD 	  _NEXT 
 508              	
 509              	// shift font row data
 510              	NEXT_PIXEL:
 511 0c18 4FEA4606 	    lsl TOS,#1
 512 0c1c 00F0B4BD 	    _NEXT 
 513              	
 514              	
 515              	// CHAR_ROW 
 516              	// plot character row 
 517              	// {x y r -- }
 518              	//  _HEADER CHAR_ROW,7,"CHARROW"
 519              	CHAR_ROW:  
 520 0c20 504700BF 	    _NEST 
 521 0c24 07190000 	    _DOLIT 5 
 521      05000000 
 522 0c2c E1190000 	    _ADR TOR 
 523 0c30 E1190000 	1:  _ADR TOR 
 524 0c34 711C0000 	    _ADR DDUP 
 525 0c38 CD190000 	    _ADR RAT
 526 0c3c FD0B0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 527 0c40 A9090000 	    _ADR PLOT 
 528 0c44 0D0C0000 	    _ADR INCR_X 
 529 0c48 B9190000 	    _ADR RFROM 
 530 0c4c 190C0000 	    _ADR NEXT_PIXEL
 531              	    //_DOLIT 1 
 532              	    //_ADR LSHIFT 
 533 0c50 29190000 	    _DONXT 1b
 533      300C0000 
 534 0c58 5D1C0000 	    _ADR TDROP 
 535 0c5c 8F170000 	    _UNNEST 
 536              	
 537              	
 538              	CHAR_FONT: // ( c -- c-adr )
 539 0c60 A6F12006 	   sub TOS,#32
 540 0c64 4FF00800 	   mov T0,#8 
 541 0c68 00FB06F6 	   mul TOS,T0 
 542 0c6c A748     	   ldr T0,=font_6x8
 543 0c6e 0644     	   add TOS,T0 
 544 0c70 00F08ABD 	   _NEXT 
 545              	
 546              	/**********************************
 547              	   TV-EMIT ( c -- )
 548              	   draw character in video buffer
 549              	**********************************/
 550 0c74 CC0B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 550      0754562D 
 550      454D4954 
 551 0c80 504700BF 	    _NEST
 552 0c84 391A0000 	    _ADR DUPP 
 553 0c88 07190000 	    _DOLIT 32 
 553      20000000 
 554 0c90 051D0000 	    _ADR ULESS
 555 0c94 47190000 	    _QBRAN 1f
 555      A40C0000 
 556 0c9c 5B190000 	    _BRAN CTRL_KEY
 556      080D0000 
ARM GAS  forth.s 			page 39


 557 0ca4 610C0000 	1:  _ADR CHAR_FONT 
 558 0ca8 21090000 	    _ADR CURSOR_COL 
 559 0cac 8D190000 	    _ADR AT
 560 0cb0 65090000 	    _ADR COLX  // x coord 
 561 0cb4 35090000 	    _ADR CURSOR_ROW 
 562 0cb8 8D190000 	    _ADR AT    
 563 0cbc 4D090000 	    _ADR ROWY  // {c-adr x y -- } 
 564 0cc0 211C0000 	    _ADR ROT  // TEST 
 565 0cc4 07190000 	    _DOLIT 7   
 565      07000000 
 566 0ccc E1190000 	    _ADR TOR  
 567 0cd0 E1190000 	1:  _ADR TOR  // { x y }
 568 0cd4 711C0000 	    _ADR DDUP  // { x y x y }
 569 0cd8 CD190000 	    _ADR RAT 
 570 0cdc AD190000 	    _ADR CAT   // { x y x y r }
 571 0ce0 210C0000 	    _ADR CHAR_ROW 
 572 0ce4 591B0000 	    _ADR ONEP // {x y' }
 573 0ce8 B9190000 	    _ADR RFROM 
 574 0cec 591B0000 	    _ADR ONEP // {x y' c-adr' }
 575 0cf0 29190000 	    _DONXT 1b
 575      D00C0000 
 576 0cf8 5D1C0000 	    _ADR TDROP  
 577 0cfc B50B0000 	    _ADR RIGHT
 578 0d00 F10D0000 	9:  _ADR SHOW_CURSOR 
 579 0d04 8F170000 	    _UNNEST  
 580              	CTRL_KEY:
 581 0d08 790E0000 	    _ADR HIDE_CURSOR
 582 0d0c 391A0000 	    _ADR DUPP 
 583 0d10 07190000 	    _DOLIT BKSPP  
 583      08000000 
 584 0d18 ED1C0000 	    _ADR EQUAL 
 585 0d1c 47190000 	    _QBRAN 1f
 585      340D0000 
 586 0d24 D10D0000 	    _ADR BACK_SPACE 
 587 0d28 291A0000 	8:  _ADR DROP 
 588 0d2c 5B190000 	    _BRAN 9b 
 588      000D0000 
 589 0d34 391A0000 	1:  _ADR DUPP 
 590 0d38 07190000 	    _DOLIT CRR 
 590      0D000000 
 591 0d40 ED1C0000 	    _ADR EQUAL 
 592 0d44 47190000 	    _QBRAN 1f 
 592      580D0000 
 593 0d4c 790D0000 	    _ADR CAR_RET
 594 0d50 5B190000 	    _BRAN 8b
 594      280D0000 
 595 0d58 07190000 	1:  _DOLIT LF 
 595      0A000000 
 596 0d60 ED1C0000 	    _ADR EQUAL 
 597 0d64 47190000 	    _QBRAN 9b 
 597      000D0000 
 598 0d6c 910D0000 	    _ADR LN_FEED
 599 0d70 5B190000 	    _BRAN 9b  
 599      000D0000 
 600              	
 601              	/*******************************
 602              	  CAR_RET 
ARM GAS  forth.s 			page 40


 603              	  carriage return
 604              	*******************************/
 605              	CAR_RET:
 606 0d78 504700BF 	   _NEST
 607 0d7c 07190000 	   _DOLIT 0 
 607      00000000 
 608 0d84 21090000 	   _ADR CURSOR_COL 
 609 0d88 79190000 	   _ADR STORE 
 610 0d8c 8F170000 	   _UNNEST   
 611              	
 612              	/*************************
 613              	  LN_FEED 
 614              	  send cursor to next line 
 615              	**************************/
 616              	LN_FEED:
 617 0d90 504700BF 	    _NEST 
 618 0d94 35090000 	    _ADR CURSOR_ROW 
 619 0d98 8D190000 	    _ADR AT 
 620 0d9c 391A0000 	    _ADR DUPP 
 621 0da0 07190000 	    _DOLIT 24 
 621      18000000 
 622 0da8 A51A0000 	    _ADR XORR 
 623 0dac 47190000 	    _QBRAN 1f
 623      C40D0000 
 624 0db4 591B0000 	    _ADR ONEP 
 625 0db8 35090000 	    _ADR CURSOR_ROW 
 626 0dbc 79190000 	    _ADR STORE 
 627 0dc0 8F170000 	    _UNNEST    
 628 0dc4 291A0000 	1:  _ADR DROP 
 629 0dc8 E50A0000 	    _ADR SCROLLUP 
 630 0dcc 8F170000 	    _UNNEST  
 631              	
 632              	
 633              	/*****************************
 634              	  BACK_SPACE  
 635              	  move cursor left 1 character
 636              	*****************************/
 637              	BACK_SPACE: 
 638 0dd0 504700BF 	  _NEST 
 639 0dd4 D50B0000 	  _ADR LEFT 
 640 0dd8 F10D0000 	  _ADR SHOW_CURSOR
 641 0ddc 8F170000 	9: _UNNEST    
 642              	
 643              	
 644              	/*******************************
 645              	  SHOW_CURSOR ( -- )
 646              	********************************/
 647 0de0 780C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 647      0B53484F 
 647      572D4355 
 647      52534F52 
 648              	//SHOW_CURSOR:
 649 0df0 504700BF 	    _NEST 
 650 0df4 07190000 	    _DOLIT 0xFF
 650      FF000000 
 651 0dfc 35090000 	0:  _ADR CURSOR_ROW
 652 0e00 8D190000 	    _ADR AT  
ARM GAS  forth.s 			page 41


 653 0e04 591B0000 	    _ADR ONEP 
 654 0e08 4D090000 	    _ADR ROWY 
 655 0e0c 07190000 	    _DOLIT BPR
 655      A0000000 
 656 0e14 1D1B0000 	    _ADR STAR
 657 0e18 07190000 	    _DOLIT BPR  
 657      A0000000 
 658 0e20 0D1B0000 	    _ADR SUBB 
 659 0e24 21090000 	    _ADR CURSOR_COL
 660 0e28 8D190000 	    _ADR AT 
 661 0e2c 65090000 	    _ADR COLX 
 662 0e30 FD1B0000 	    _ADR TWOSL  
 663 0e34 FD1A0000 	    _ADR PLUS
 664 0e38 95090000 	    _ADR VIDBUFF
 665 0e3c FD1A0000 	    _ADR PLUS
 666 0e40 07190000 	    _DOLIT 2
 666      02000000 
 667 0e48 E1190000 	    _ADR TOR  
 668 0e4c 711C0000 	1:  _ADR DDUP 
 669 0e50 99190000 	    _ADR CSTOR 
 670 0e54 591B0000 	    _ADR ONEP 
 671 0e58 29190000 	    _DONXT 1b
 671      4C0E0000 
 672 0e60 491C0000 	2:  _ADR DDROP // drop 3 elements 
 673 0e64 8F170000 	    _UNNEST  
 674              	
 675              	/*************************
 676              	    HIDE_CURSOR 
 677              	*************************/
 678 0e68 E40D0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 678      0B484944 
 678      452D4355 
 678      52534F52 
 679              	//HIDE_CURSOR:
 680 0e78 504700BF 	    _NEST 
 681 0e7c ED080000 	    _ADR BACKCOLOR 
 682 0e80 8D190000 	    _ADR AT 
 683 0e84 391A0000 	    _ADR DUPP  
 684 0e88 07190000 	    _DOLIT 4 
 684      04000000 
 685 0e90 ED1A0000 	    _ADR LSHIFT 
 686 0e94 911A0000 	    _ADR ORR 
 687 0e98 5B190000 	    _BRAN 0b
 687      FC0D0000 
 688              	
 689              	// TV-AT ( line col -- )
 690              	// set text cursor position 
 691 0ea0 6C0E0000 	    _HEADER TV_AT,5,"TV-AT"
 691      0554562D 
 691      415400BF 
 692 0eac 352E     	    cmp TOS,#53
 693 0eae 01D4     	    bmi 1f 
 694 0eb0 4FF03406 	    mov TOS,#52
 695 0eb4 C4F89460 	1:  str TOS,[UP,#COL]
 696 0eb8 57F8046B 	    _POP
 697 0ebc 192E     	    cmp TOS,#25
 698 0ebe 01D4     	    bmi 1f 
ARM GAS  forth.s 			page 42


 699 0ec0 4FF01806 	    mov TOS,#24 
 700 0ec4 C4F89060 	1:  str TOS,[UP,#ROW]
 701 0ec8 57F8046B 	    _POP 
 702 0ecc 00F05CBC 	    _NEXT 
 703              	
 704              	// INPUT ( -- c-adr )
 705              	// input a string in pad 
 706 0ed0 A40E0000 	    _HEADER INPUT,5,"INPUT"
 706      05494E50 
 706      555400BF 
 707 0edc 504700BF 	    _NEST 
 708 0ee0 AD210000 	    _ADR PAD 
 709 0ee4 391A0000 	    _ADR DUPP 
 710 0ee8 591B0000 	    _ADR ONEP 
 711 0eec 07190000 	    _DOLIT 53
 711      35000000 
 712 0ef4 C92C0000 	    _ADR ACCEP
 713 0ef8 491A0000 	    _ADR SWAP 
 714 0efc 291A0000 	    _ADR DROP 
 715 0f00 5D1A0000 	    _ADR OVER 
 716 0f04 99190000 	    _ADR CSTOR  
 717 0f08 8F170000 	    _UNNEST 
 718              	
 719              	
 720              		.section .rodata 
 721              		.p2align 2
 722              	/********************************************
 723              	    TV font  ASCII 6 pixels x 8 pixels 
 724              	********************************************/
 725              	font_6x8:
 726 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 726      00000000 
 727 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 727      20002000 
 728 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 728      00000000 
 729 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 729      F8505000 
 730 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 730      28F02000 
 731 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 731      40981800 
 732 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 732      A8906800 
 733 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 733      00000000 
 734 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 734      40201000 
 735 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 735      10204000 
 736 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 736      A8200000 
 737 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 737      20200000 
 738 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 738      60204000 
 739 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
ARM GAS  forth.s 			page 43


 739      00000000 
 740 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 740      00606000 
 741 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 741      40800000 
 742 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 742      C8887000 
 743 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 743      2020F800 
 744 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 744      4080F800 
 745 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 745      0808F000 
 746 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 746      F8101000 
 747 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 747      0808F000 
 748 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 748      88887000 
 749 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 749      40404000 
 750 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 750      88887000 
 751 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 751      08087000 
 752 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 752      60600000 
 753 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 753      60204000 
 754 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 754      40201000 
 755 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 755      F8000000 
 756 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 756      10204000 
 757 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 757      20002000 
 758 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 758      A8A87000 
 759 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 759      88888800 
 760 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 760      8888F000 
 761 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 761      80807800 
 762 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 762      8888F000 
 763 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 763      8080F800 
 764 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 764      80808000 
 765 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 765      88887000 
 766 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 766      88888800 
 767 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 767      20207000 
ARM GAS  forth.s 			page 44


 768 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 768      08906000 
 769 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 769      A0908800 
 770 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 770      8080F800 
 771 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 771      88888800 
 772 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 772      98888800 
 773 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 773      88887000 
 774 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 774      80808000 
 775 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 775      A8987800 
 776 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 776      A0908800 
 777 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 777      0808F000 
 778 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 778      20202000 
 779 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 779      88887000 
 780 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 780      88502000 
 781 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 781      A8D88800 
 782 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 782      50888800 
 783 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 783      20202000 
 784 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 784      8080F800 
 785 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 785      40406000 
 786 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 786      10080000 
 787 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 787      08081800 
 788 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 788      00000000 
 789 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 789      0000F800 
 790 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 790      00000000 
 791 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 791      78887800 
 792 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 792      C888F000 
 793 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 793      80887000 
 794 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 794      98887800 
 795 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 795      F8807000 
 796 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
ARM GAS  forth.s 			page 45


 796      40404000 
 797 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 797      88780870 
 798 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 798      88888800 
 799 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 799      20202000 
 800 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 800      10906000 
 801 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 801      C0A09000 
 802 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 802      20207000 
 803 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 803      A8888800 
 804 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 804      88888800 
 805 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 805      88887000 
 806 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 806      88F08080 
 807 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 807      90B05018 
 808 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 808      80808000 
 809 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 809      7008F000 
 810 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 810      40483000 
 811 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 811      88986800 
 812 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 812      88502000 
 813 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 813      A8A85000 
 814 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 814      20508800 
 815 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 815      88780870 
 816 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 816      2040F800 
 817 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 817      40402000 
 818 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 818      20202000 
 819 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 819      20204000 
 820 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 820      10000000 
 821 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 821      FCFCFCFC 
 822 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 822      10204000 
 823 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 823      40201000 
 824 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 824      20200000 
ARM GAS  forth.s 			page 46


 825 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 825      A8702000 
 826 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 826      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
ARM GAS  forth.s 			page 47


  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
ARM GAS  forth.s 			page 48


  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
ARM GAS  forth.s 			page 49


 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f18 1C61     	   .byte 0x1c,'a' 
   9 0f1a 3262     	   .byte 0x32,'b'
  10 0f1c 2163     	   .byte 0x21,'c'
  11 0f1e 2364     	   .byte 0x23,'d'
  12 0f20 2465     	   .byte 0x24,'e'
  13 0f22 2B66     	   .byte 0x2b,'f'
  14 0f24 3467     	   .byte 0x34,'g'
  15 0f26 3368     	   .byte 0x33,'h'
  16 0f28 4369     	   .byte 0x43,'i'
  17 0f2a 3B6A     	   .byte 0x3B,'j'
  18 0f2c 426B     	   .byte 0x42,'k'
  19 0f2e 4B6C     	   .byte 0x4b,'l'
  20 0f30 3A6D     	   .byte 0x3a,'m'
  21 0f32 316E     	   .byte 0x31,'n'
  22 0f34 446F     	   .byte 0x44,'o'
  23 0f36 4D70     	   .byte 0x4d,'p'
  24 0f38 1571     	   .byte 0x15,'q'
  25 0f3a 2D72     	   .byte 0x2d,'r'
  26 0f3c 1B73     	   .byte 0x1b,'s'
  27 0f3e 2C74     	   .byte 0x2c,'t'
  28 0f40 3C75     	   .byte 0x3c,'u'
  29 0f42 2A76     	   .byte 0x2a,'v'
  30 0f44 1D77     	   .byte 0x1d,'w'
  31 0f46 2278     	   .byte 0x22,'x'
  32 0f48 3579     	   .byte 0x35,'y'
  33 0f4a 1A7A     	   .byte 0x1a,'z'
  34 0f4c 4530     	   .byte 0x45,'0'
  35 0f4e 1631     	   .byte 0x16,'1'
ARM GAS  forth.s 			page 50


  36 0f50 1E32     	   .byte 0x1e,'2'
  37 0f52 2633     	   .byte 0x26,'3'
  38 0f54 2534     	   .byte 0x25,'4'
  39 0f56 2E35     	   .byte 0x2e,'5'
  40 0f58 3636     	   .byte 0x36,'6'
  41 0f5a 3D37     	   .byte 0x3d,'7'
  42 0f5c 3E38     	   .byte 0x3e,'8'
  43 0f5e 4639     	   .byte 0x46,'9'
  44 0f60 0E60     	   .byte 0x0e,'`'
  45 0f62 4E2D     	   .byte 0x4e,'-'
  46 0f64 553D     	   .byte 0x55,'='
  47 0f66 5D5C     	   .byte 0x5d,'\\'
  48 0f68 545B     	   .byte 0x54,'['
  49 0f6a 5B5D     	   .byte 0x5b,']'
  50 0f6c 4C3B     	   .byte 0x4c,';'
  51 0f6e 5227     	   .byte 0x52,'\''
  52 0f70 412C     	   .byte 0x41,','
  53 0f72 492E     	   .byte 0x49,'.'
  54 0f74 7C2A     	   .byte 0x7c,'*'
  55 0f76 792B     	   .byte 0x79,'+'
  56 0f78 2920     	   .byte 0x29,' '
  57 0f7a 5A0D     	   .byte SC_ENTER,CRR 
  58 0f7c 6608     	   .byte SC_BKSP,BKSPP 
  59 0f7e 0D09     	   .byte SC_TAB,9
  60 0f80 761B     	   .byte SC_ESC,27
  61 0f82 119E     	   .byte SC_LALT,VK_LALT 
  62 0f84 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0f86 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f88 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f8a 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f8c 5800     	   .byte SC_CAPS,0
  67 0f8e 0580     	   .byte SC_F1,VK_F1
  68 0f90 0681     	   .byte SC_F2,VK_F2
  69 0f92 0482     	   .byte SC_F3,VK_F3
  70 0f94 0C83     	   .byte SC_F4,VK_F4
  71 0f96 0384     	   .byte SC_F5,VK_F5
  72 0f98 0B85     	   .byte SC_F6,VK_F6
  73 0f9a 8386     	   .byte SC_F7,VK_F7
  74 0f9c 0A87     	   .byte SC_F8,VK_F8
  75 0f9e 0188     	   .byte SC_F9,VK_F9
  76 0fa0 098A     	   .byte SC_F10,VK_F10
  77 0fa2 788B     	   .byte SC_F11,VK_F11
  78 0fa4 078C     	   .byte SC_F12,VK_F12
  79 0fa6 7030     	   .byte SC_KP0,'0'
  80 0fa8 6931     	   .byte SC_KP1,'1'
  81 0faa 7232     	   .byte SC_KP2,'2'
  82 0fac 7A33     	   .byte SC_KP3,'3'
  83 0fae 6B34     	   .byte SC_KP4,'4'
  84 0fb0 7335     	   .byte SC_KP5,'5'
  85 0fb2 7436     	   .byte SC_KP6,'6'
  86 0fb4 6C37     	   .byte SC_KP7,'7'
  87 0fb6 7538     	   .byte SC_KP8,'8'
  88 0fb8 7D39     	   .byte SC_KP9,'9'
  89 0fba 7C2A     	   .byte SC_KPMUL,'*'
  90 0fbc 4A2F     	   .byte SC_KPDIV,'/'
  91 0fbe 792B     	   .byte SC_KPPLUS,'+'
  92 0fc0 7B2D     	   .byte SC_KPMINUS,'-'
ARM GAS  forth.s 			page 51


  93 0fc2 712E     	   .byte SC_KPDOT,'.'
  94 0fc4 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fc6 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fc8 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fca 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fcc 6141     	   .byte 'a','A'
 102 0fce 6242     	   .byte 'b','B'
 103 0fd0 6343     	   .byte 'c','C'
 104 0fd2 6444     	   .byte 'd','D'
 105 0fd4 6545     	   .byte 'e','E'
 106 0fd6 6646     	   .byte 'f','F'
 107 0fd8 6747     	   .byte 'g','G'
 108 0fda 6848     	   .byte 'h','H'
 109 0fdc 6949     	   .byte 'i','I'
 110 0fde 6A4A     	   .byte 'j','J'
 111 0fe0 6B4B     	   .byte 'k','K'
 112 0fe2 6C4C     	   .byte 'l','L'
 113 0fe4 6D4D     	   .byte 'm','M'
 114 0fe6 6E4E     	   .byte 'n','N'
 115 0fe8 6F4F     	   .byte 'o','O'
 116 0fea 7050     	   .byte 'p','P'
 117 0fec 7151     	   .byte 'q','Q'
 118 0fee 7252     	   .byte 'r','R'
 119 0ff0 7353     	   .byte 's','S'
 120 0ff2 7454     	   .byte 't','T'
 121 0ff4 7555     	   .byte 'u','U'
 122 0ff6 7656     	   .byte 'v','V'
 123 0ff8 7757     	   .byte 'w','W'
 124 0ffa 7858     	   .byte 'x','X'
 125 0ffc 7959     	   .byte 'y','Y'
 126 0ffe 7A5A     	   .byte 'z','Z'
 127 1000 3121     	   .byte '1','!'
 128 1002 3240     	   .byte '2','@'
 129 1004 3323     	   .byte '3','#'
 130 1006 3424     	   .byte '4','$'
 131 1008 3525     	   .byte '5','%'
 132 100a 365E     	   .byte '6','^'
 133 100c 3726     	   .byte '7','&'
 134 100e 382A     	   .byte '8','*'
 135 1010 3928     	   .byte '9','('
 136 1012 3029     	   .byte '0',')'
 137 1014 2D5F     	   .byte '-','_'
 138 1016 3D2B     	   .byte '=','+'
 139 1018 607E     	   .byte '`','~'
 140 101a 2722     	   .byte '\'','"'
 141 101c 2C3C     	   .byte ',','<'
 142 101e 2E3E     	   .byte '.','>'
 143 1020 2F3F     	   .byte '/','?'
 144 1022 5C7C     	   .byte '\\','|'
 145 1024 3B3A     	   .byte ';',':'
 146 1026 5B7B     	   .byte '[','{'
 147 1028 5D7D     	   .byte ']','}'
 148 102a 0000     	   .byte 0,0
 149              	   
ARM GAS  forth.s 			page 52


 150              	//alt char keys 
 151              	altchar:
 152 102c 315C     	   .byte '1','\\'
 153 102e 3240     	   .byte '2','@'
 154 1030 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 1032 363F     	   .byte '6','?'
 158 1034 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 1036 397B     	   .byte '9','{'
 161 1038 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 103a 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 103c 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 103e 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1040 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 1042 11A3     	    .byte SC_RALT,VK_RALT
 172 1044 2F97     	    .byte SC_APPS,VK_APPS
 173 1046 758D     	    .byte SC_UP,VK_UP
 174 1048 728E     	    .byte SC_DOWN,VK_DOWN
 175 104a 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 104c 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 104e 7095     	    .byte SC_INSERT,VK_INSERT
 178 1050 6C91     	    .byte SC_HOME,VK_HOME
 179 1052 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1054 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1056 717F     	    .byte SC_DEL,VK_DELETE
 182 1058 6992     	    .byte SC_END,VK_END
 183 105a 4A2F     	    .byte SC_KPDIV,'/'
 184 105c 5A0D     	    .byte SC_KPENTER,'\r'
 185 105e 1200     	    .byte 0x12,0
 186 1060 7C00     	    .byte 0x7c,0
 187 1062 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1064 6303     	   .byte 'c', VK_CTRL_C 
 193 1066 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1068 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 106a 27A2     	   .byte SC_RGUI,VK_RGUI
 196 106c 11A3     	   .byte SC_RALT,VK_RALT
 197 106e 2F97     	   .byte SC_APPS,VK_APPS
 198 1070 7095     	   .byte SC_INSERT,VK_INSERT
 199 1072 6C91     	   .byte SC_HOME,VK_HOME
 200 1074 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1076 717F     	   .byte SC_DEL,VK_DELETE
 202 1078 6992     	   .byte SC_END,VK_END
 203 107a 7A94     	   .byte SC_PGDN,VK_PGDN
 204 107c 758D     	   .byte SC_UP,VK_UP
 205 107e 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1080 728E     	   .byte SC_DOWN,VK_DOWN
ARM GAS  forth.s 			page 53


 207 1082 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1084 4A2F     	   .byte SC_KPDIV,'/'
 209 1086 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1088 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 108a 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 108c 119E     	   .byte SC_LALT,VK_LALT
 213 108e 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1090 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1092 761B     	   .byte SC_ESC,VK_ESC
 216 1094 779A     	   .byte SC_NUM,VK_NLOCK
 217 1096 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1098 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 12 
  68              	    .equ KBD_CLOCK_PIN, 11
  69              	
  70              	/**********************************
  71              	    kbd_isr
  72              	    interrupt service routine 
  73              	    EXTI0 connected to keyboard 
  74              	    clock signal and triggered 
  75              	    on falling edge 
  76              	**********************************/
  77 109a 00BF     	    _GBL_FUNC kbd_isr 
  78 109c 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  78      C4F20102 
  79 10a4 4FF40060 	    mov r0,#(1<<KBD_CLOCK_PIN) 
ARM GAS  forth.s 			page 54


  80 10a8 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  81 10aa 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
  81      C4F20203 
  82 10b2 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  83 10b6 10F0020F 	    tst r0,#KBD_TX 
  84 10ba 40F08480 	    bne send_bit  
  85 10be 188A     	    ldrh r0,[r3,#GPIO_IDR]
  86 10c0 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  87 10c4 01F10102 	    add r2,r1,#1
  88 10c8 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  89 10cc 0029     	    cmp r1,#0
  90 10ce 15D0     	    beq start_bit 
  91 10d0 0929     	    cmp r1,#9 
  92 10d2 25D0     	    beq parity_bit 
  93 10d4 0A29     	    cmp r1,#10 
  94 10d6 2DD0     	    beq stop_bit 
  95              	    // data bit 
  96 10d8 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  97 10dc 4FEA5202 	    lsr r2,#1 
  98 10e0 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
  99 10e4 07D0     	    beq 1f 
 100 10e6 42F08002 	    orr r2,#(1<<7)
 101 10ea 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 102 10ee 00F10100 	    add r0,#1 
 103 10f2 84F87700 	    strb r0,[UP,#KBD_PARITY]
 104 10f6 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 105 10fa 63E0     	    b 9f         
 106              	start_bit:
 107 10fc 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) 
 108 1100 60D1     	    bne 9f // not a start bit 
 109 1102 80EA0000 	    eor r0,r0 
 110 1106 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 111 110a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 112 110e 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 113 1112 6FF00101 	    mvn r1,#1
 114 1116 00EA0100 	    and r0,r1 // clear error flag 
 115 111a 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 116 111e 51E0     	    b 9f 
 117              	parity_bit:
 118 1120 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 119 1124 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 120 1128 4CD0     	    beq 9f  
 121 112a 01F10101 	    add r1,#1 
 122 112e 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 123 1132 47E0     	    b 9f      
 124              	stop_bit:
 125 1134 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 126 1138 40D0     	    beq 8f // error stop bit expected 
 127 113a 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 128 113e 11F0010F 	    tst r1,#1 
 129 1142 3BD0     	    beq 8f // error parity
 130 1144 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 131 1148 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 132 114c E028     	    cmp r0,#XT_KEY
 133 114e 04D1     	    bne 1f
 134 1150 41F04001 	    orr r1,#KBD_F_XT
 135 1154 84F87610 	    strb r1,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 55


 136 1158 30E0     	    b 8f  
 137 115a 11F0800F 	1:  tst r1,#KBD_F_REL
 138 115e 14D0     	    beq store_code
 139 1160 5828     	    cmp r0,#SC_CAPS
 140 1162 04D1     	    bne 1f
 141 1164 81F00401 	    eor r1,#KBD_F_CAPS
 142 1168 41F00101 	    orr r1,#KBD_F_CTGL 
 143 116c 06E0     	    b 2f 
 144 116e 00B500F0 	1:  _CALL do_async_key 
 144      73F85DF8 
 144      04EB
 145 1178 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 146 117c 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 147 1180 01EA0201 	    and r1,r2
 148 1184 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 149 1188 18E0     	    b 8f
 150              	// store code in queue 
 151              	store_code:
 152 118a F028     	    cmp r0,#KEY_REL
 153 118c 04D1     	    bne 1f
 154              	// set release flags 
 155 118e 41F08001 	    orr r1,#KBD_F_REL 
 156 1192 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 157 1196 11E0     	    b 8f     
 158 1198 0146     	1:  mov r1,r0 
 159 119a 00B500F0 	    _CALL do_async_key 
 159      5DF85DF8 
 159      04EB
 160 11a4 0AD1     	    bne 8f // was async key 
 161 11a6 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 162 11aa 04F17802 	    add r2,UP,#KBD_QUEUE
 163 11ae 1154     	    strb r1,[r2,r0]
 164 11b0 00F10100 	    add r0,#1
 165 11b4 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 166 11b8 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 167 11bc 80EA0000 	8:  eor r0,r0 
 168 11c0 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 169 11c4 7047     	9:  _RET 
 170              	
 171              	/* send bit to keyboard 
 172              	 registers usage:
 173              	    r0 bit shifter 
 174              	    r1 bit counter 
 175              	    r2 output bit 
 176              	    r3 GPIOA_BASE_ADR 
 177              	*/
 178              	send_bit:
 179 11c6 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 180 11ca 01F10100 	    add r0,r1,#1
 181 11ce 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 182 11d2 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 183 11d6 4FF48052 	    mov r2,#(1<<KBD_DATA_PIN)
 184              	//    cbz r1,9f 
 185 11da 0829     	1:  cmp r1,#8 
 186 11dc 15D0     	    beq send_parity 
 187 11de 0929     	    cmp r1,#9 
 188 11e0 1CD0     	    beq send_stop
ARM GAS  forth.s 			page 56


 189 11e2 0A29     	    cmp r1,#10
 190 11e4 1FD0     	    beq rx_ack_bit  
 191              	// data bits
 192 11e6 10F0010F 	    tst r0,#1
 193 11ea 4FEA5000 	    lsr r0,#1
 194 11ee 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 195 11f2 02D1     	    bne 1f 
 196 11f4 4FEA0242 	    lsl r2,#16
 197 11f8 05E0     	    b 2f  
 198 11fa 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 199 11fe 00F10100 	    add r0,#1 
 200 1202 84F87700 	    strb r0,[UP,#KBD_PARITY]
 201 1206 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 202 1208 1CE0     	    b 9f 
 203              	send_parity:
 204 120a 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 205 120e 10F0010F 	    tst r0,#1
 206 1212 01D0     	    beq 1f 
 207 1214 4FEA0242 	    lsl r2,#16
 208 1218 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 209 121a 13E0     	    b 9f 
 210              	send_stop:
 211              	//    str r2,[r3,#GPIO_BSRR]
 212              	// release data pin 
 213 121c 1968     	    ldr r1,[r3,#GPIO_MODER]
 214 121e 21F04071 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 215 1222 1960     	    str r1,[r3,#GPIO_MODER]
 216 1224 0EE0     	    b 9f
 217              	rx_ack_bit:
 218 1226 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 219 122a 6FF00201 	    mvn r1,#KBD_TX 
 220 122e 00EA0100 	    and r0,r1 
 221 1232 198A     	    ldrh r1,[r3,#GPIO_IDR]
 222 1234 11F4805F 	    tst r1,#(1<<KBD_DATA_PIN)
 223 1238 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 224 123c 80EA0000 	    eor r0,r0 
 225 1240 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 226 1244 7047     	9:  _RET 
 227              	
 228              	/*************************************
 229              	 check if it is an asynchronous key 
 230              	 input:
 231              	    r0  virtual code
 232              	 output:
 233              	    r0 code order | 255 
 234              	*************************************/
 235              	is_async_key:
 236 1246 02B4     	    push {r1}
 237 1248 DFF84814 	    ldr r1,=async_keys
 238 124c 00B500F0 	    _CALL table_scan
 238      96F85DF8 
 238      04EB
 239 1256 02BC     	    pop {r1}
 240 1258 7047     	    _RET 
 241              	
 242              	
 243              	/***************************
ARM GAS  forth.s 			page 57


 244              	 check if async key 
 245              	 and process it
 246              	 input: 
 247              	    r0 code 
 248              	 output:
 249              	    r0 0|-1  
 250              	    Z flag set->not async, reset->async key      
 251              	****************************/
 252              	do_async_key:
 253 125a 00B5FFF7 	    _CALL is_async_key  
 253      F3FF5DF8 
 253      04EB
 254 1264 FF28     	    cmp r0,#255
 255 1266 01D1     	    bne set_async_key 
 256 1268 0020     	    movs r0,#0 
 257 126a 7047     	    _RET  
 258              	// asynchornous key, set/reset flag 
 259              	set_async_key:
 260 126c 06B4     	    push {r1,r2}
 261 126e 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 262 1272 DFF82414 	    ldr r1,=async_jump 
 263 1276 D1E800F0 	    tbb [r1,r0]
 264              	shift_key:
 265 127a 4FF00800 	    mov r0,#KBD_F_SHIFT 
 266 127e 04E0     	    b set_reset
 267              	ctrl_key:
 268 1280 4FF01000 	    mov r0,#KBD_F_CTRL
 269 1284 01E0     	    b set_reset 
 270              	alt_key:
 271 1286 4FF02000 	    mov r0,#KBD_F_ALT 
 272              	set_reset:
 273 128a 12F0800F 	    tst r2,#KBD_F_REL 
 274 128e 04D0     	    beq 1f 
 275 1290 6FEA0000 	    mvn r0,r0
 276 1294 02EA0002 	    and r2,r0
 277 1298 01E0     	    b 2f
 278 129a 42EA0002 	1:  orr r2,r0 
 279 129e 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 280 12a2 5FF0FF30 	    movs r0,#-1
 281 12a6 06BC     	9:  pop {r1,r2}
 282 12a8 7047     	    _RET 
 283              	
 284              	// asynchronous key table 
 285              	async_keys:
 286 12aa 1200     	    .byte SC_LSHIFT,0 // left shift 
 287 12ac 5900     	    .byte SC_RSHIFT,0 // right shift 
 288 12ae 1401     	    .byte SC_LCTRL,1  // left control 
 289 12b0 1401     	    .byte SC_RCTRL,1  // right control 
 290 12b2 1102     	    .byte SC_LALT,2  // left alt 
 291 12b4 1102     	    .byte SC_RALT,2   // right alt (alt char)
 292 12b6 00FF     	    .byte 0,255 
 293              	
 294              	async_jump: // tbb table for async keys 
 295 12b8 00       	    .byte 0 // shift  key 
 296 12b9 03       	    .byte (ctrl_key-shift_key)/2
 297 12ba 06       	    .byte (alt_key-shift_key)/2
 298              	
ARM GAS  forth.s 			page 58


 299              	
 300              	/**********************************
 301              	    kbd_init 
 302              	    initialize keyboard 
 303              	    PS2 clock on PA11 
 304              	    PS2 data on PA12 
 305              	**********************************/
 306 12bb 00       	    _GBL_FUNC kbd_init 
 307              	//  clock and data pins as INPUT_FLOAT 
 308 12bc 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR 
 308      C4F20203 
 309 12c4 1846     	    mov r0,r3 
 310 12c6 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 311 12ca 4FF00002 	    mov r2,#INPUT_FLOAT 
 312 12ce 00B5FFF7 	    _CALL gpio_config
 312      2FF85DF8 
 312      04EB
 313 12d8 1846     	    mov r0,r3 
 314 12da 4FF00C01 	    mov r1,#KBD_DATA_PIN
 315 12de 4FF00002 	    mov r2,#INPUT_FLOAT 
 316 12e2 00B5FFF7 	    _CALL gpio_config
 316      25F85DF8 
 316      04EB
 317              	// interrupt triggered on falling edge 
 318 12ec 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 318      C4F20102 
 319 12f4 4FF40060 	   mov r0,#(1<<KBD_CLOCK_PIN)
 320 12f8 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 321 12fa D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 322 12fc 80EA0000 	   eor r0,r0 
 323 1300 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 324 1304 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 325              	// enable interrupt EXTI15_10_IRQ in NVIC 
 326 1308 4FF02800 	   mov r0,#EXTI15_10_IRQ
 327 130c 4FF00101 	   mov r1,#1 
 328 1310 00B5FEF7 	   _CALL nvic_set_priority
 328      C9FF5DF8 
 328      04EB
 329 131a 4FF02800 	   mov r0,#EXTI15_10_IRQ
 330 131e 00B5FEF7 	   _CALL nvic_enable_irq 
 330      DBFF5DF8 
 330      04EB
 331 1328 7047     	   _RET 
 332              	
 333              	// KEY-ASYNC ( -- n )
 334              	// return async key flags 
 335 132a D40E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 335      094B4559 
 335      2D415359 
 335      4E43
 336 1338 47F8046D 	    _PUSH 
 337 133c 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 338 1340 06F0FC06 	    and TOS,#0xFC  
 339 1344 20E2     	    _NEXT 
 340              	
 341              	// KEYCODE 
 342              	// extract keyboard scancode from queue.
ARM GAS  forth.s 			page 59


 343              	// output:
 344              	//        T0  keycode | 0 
 345              	keycode: 
 346 1346 0EB4     	    push {T1,T2,T3}
 347 1348 80EA0000 	    eor T0,T0  
 348 134c 04F17803 	    add T3,UP,#KBD_QUEUE
 349 1350 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 350 1354 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 351 1358 9142     	    cmp T1,T2 
 352 135a 06D0     	    beq 2f  
 353 135c 585C     	    ldrb T0,[T3,T1]
 354 135e 01F10101 	    add T1,#1 
 355 1362 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 356 1366 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 357 136a 0EBC     	2:  pop {T1,T2,T3}
 358 136c 7047     	    _RET 
 359              	
 360              	wait_code:
 361 136e 00B5FFF7 	    _CALL keycode 
 361      E9FF5DF8 
 361      04EB
 362 1378 0000     	    movs T0,T0
 363 137a F8D0     	    beq wait_code  
 364 137c 7047     	    _RET 
 365              	
 366              	// translation table scan 
 367              	// input:
 368              	//      T0   target code 
 369              	//      T1   table pointer 
 370              	// output: 
 371              	//        T0   0 | code
 372              	//        Z flag  
 373              	table_scan:
 374 137e 04B4     	    push {T2}
 375 1380 11F8012B 	1:  ldrb T2,[T1],#1
 376 1384 22B1     	    cbz T2,2f 
 377 1386 8242     	    cmp T2,T0
 378 1388 02D0     	    beq 2f 
 379 138a 01F10101 	    add T1,#1 
 380 138e F7E7     	    b 1b 
 381 1390 0878     	2:  ldrb T0,[T1]
 382 1392 0000     	    movs T0,T0 // set/reset zero flag 
 383 1394 04BC     	9:  pop {T2}
 384 1396 7047     	    _RET 
 385              	
 386              	/**********************************
 387              	   PS2-KEY? ( -- key -1 | 0 )
 388              	   get a character from keyboard
 389              	   don't wait for it.
 390              	*********************************/
 391 1398 2E130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 391      08505332 
 391      2D4B4559 
 391      3F0000BF 
 392 13a8 47F8046D 	    _PUSH 
 393 13ac 86EA0606 	    eor TOS,TOS 
 394 13b0 BA49     	    ldr T1,=sc_ascii // translation table
ARM GAS  forth.s 			page 60


 395 13b2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 396 13b6 4FF04002 	    mov T2,#KBD_F_XT 
 397 13ba 1042     	    tst T0,T2
 398 13bc 00D0     	    beq 1f
 399 13be B849     	    ldr T1,=extended // extended code translation
 400 13c0 00B5FFF7 	1:  _CALL keycode
 400      C0FF5DF8 
 400      04EB
 401 13ca 98B1     	    cbz T0,inkey_exit
 402 13cc E128     	    cmp T0,#XT2_KEY // pause 
 403 13ce 12D0     	    beq pause_key
 404 13d0 00B5FFF7 	    _CALL table_scan 
 404      D4FF5DF8 
 404      04EB
 405 13da 0646     	    mov TOS,T0
 406 13dc 00B500F0 	    _CALL do_modifiers
 406      14F85DF8 
 406      04EB
 407 13e6 032E     	    cmp TOS,#VK_CTRL_C 
 408 13e8 3EF474AE 	    beq user_reboot 
 409 13ec 47F8046D 	    _PUSH 
 410 13f0 4FF0FF36 	    mov TOS,#-1
 411              	inkey_exit:     
 412 13f4 C8E1     	    _NEXT
 413              	pause_key: // discard next 7 codes 
 414 13f6 4FF00701 	    mov T1,#7 
 415 13fa 00B5FFF7 	1:  _CALL wait_code 
 415      B7FF5DF8 
 415      04EB
 416 1404 0139     	    subs T1,#1
 417 1406 F8D1     	    bne 1b 
 418 1408 BEE1     	    _NEXT 
 419              	
 420              	// check for modifiers flags 
 421              	// and process it.
 422              	do_modifiers:
 423 140a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 424 140e 10F0080F 	    tst T0,#KBD_F_SHIFT 
 425 1412 06D1     	    bne shift_down 
 426 1414 10F0200F 	    tst T0,#KBD_F_ALT  
 427 1418 06D1     	    bne altchar_down 
 428 141a 10F0100F 	    tst T0,#KBD_F_CTRL
 429 141e 06D1     	    bne ctrl_down 
 430 1420 0DE0     	    b 9f 
 431              	shift_down:
 432 1422 3046     	    mov T0,TOS 
 433 1424 9F49     	    ldr T1,=shifted 
 434 1426 04E0     	    b 8f 
 435              	altchar_down:
 436 1428 3046     	    mov T0,TOS 
 437 142a 9F49     	    ldr T1,=altchar
 438 142c 01E0     	    b 8f
 439              	ctrl_down:
 440 142e 3046     	    mov T0,TOS 
 441 1430 9E49     	    ldr T1,=controls 
 442 1432 00B5FFF7 	8:  _CALL table_scan
 442      A3FF5DF8 
ARM GAS  forth.s 			page 61


 442      04EB
 443 143c 0646     	    mov TOS,T0
 444 143e 00B500F0 	9:  _CALL do_capslock 
 444      03F85DF8 
 444      04EB
 445 1448 7047     	    _RET 
 446              	
 447              	do_capslock:
 448 144a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 449 144e 10F0040F 	    tst T0,#KBD_F_CAPS 
 450 1452 0BD0     	    beq 9f 
 451 1454 412E     	    cmp TOS,#'A'
 452 1456 09D4     	    bmi 9f 
 453 1458 5B2E     	    cmp TOS,#'Z'+1 
 454 145a 03D4     	    bmi 3f 
 455 145c 612E     	    cmp TOS,#'a'
 456 145e 05D4     	    bmi 9f 
 457 1460 7B2E     	    cmp TOS,#'z'+1
 458 1462 03D5     	    bpl 9f 
 459 1464 4FF02000 	3:  mov T0,#(1<<5)
 460 1468 86EA0006 	    eor TOS,T0 
 461 146c 7047     	9:  _RET 
 462              	
 463              	
 464              	
 465              	/***************************
 466              	 send byte do keyboard
 467              	 input:
 468              	    r0  byte to send 
 469              	 use: 
 470              	    r1,r2 temp 
 471              	    r3 GPIOA_BASE_ADR 
 472              	***************************/
 473              	kbd_send:
 474 146e 0FB4     	    push {r0,r1,r2,r3}
 475              	// wait pre-video phase
 476              	// for least video output disturbance
 477 1470 A06E     	1:  ldr r0,[UP,#VID_STATE]
 478 1472 0128     	    cmp r0,ST_PREVID 
 479 1474 FCD1     	    bne 1b
 480              	// disable video interrupt 
 481 1476 4FF01D00 	    mov r0,#TIM3_IRQ 
 482 147a 00B5FEF7 	    _CALL nvic_disable_irq
 482      42FF5DF8 
 482      04EB
 483              	// take control of keyboard clock line  
 484 1484 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
 484      C4F20203 
 485 148c 1846     	    mov r0,r3 
 486 148e 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 487 1492 4FF01102 	    mov r2,#OUTPUT_OD
 488 1496 00B5FEF7 	    _CALL gpio_config 
 488      4BFF5DF8 
 488      04EB
 489 14a0 1846     	    mov r0,r3 
 490 14a2 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 491 14a6 82EA0202 	    eor r2,r2 
ARM GAS  forth.s 			page 62


 492 14aa 00B5FEF7 	    _CALL gpio_out 
 492      97FF5DF8 
 492      04EB
 493              	// delay to hold clock line to 0 for 150Âµsec     
 494 14b4 4FF4E150 	    mov r0,#150*48
 495 14b8 0138     	1:  subs r0,#1 
 496 14ba FDD1     	    bne 1b
 497 14bc 01BC     	    pop {r0}
 498 14be 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 499 14c2 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 500 14c6 40F00200 	    orr r0,#KBD_TX 
 501 14ca 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 502 14ce 80EA0000 	    eor r0,r0 
 503 14d2 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 504 14d6 84F87700 	    strb r0,[UP,#KBD_PARITY]
 505              	// take control of data line 
 506              	// and put it to 0 for start bit.    
 507 14da 1846     	    mov r0,r3 
 508 14dc 4FF00C01 	    mov r1,#KBD_DATA_PIN  
 509 14e0 4FF01102 	    mov r2,#OUTPUT_OD 
 510 14e4 00B5FEF7 	    _CALL gpio_config 
 510      24FF5DF8 
 510      04EB
 511 14ee 1846     	    mov r0,r3 
 512 14f0 4FF00C01 	    mov r1,#KBD_DATA_PIN 
 513 14f4 82EA0202 	    eor r2,r2 
 514 14f8 00B5FEF7 	    _CALL gpio_out
 514      70FF5DF8 
 514      04EB
 515              	// release clock line 
 516 1502 1846     	    mov r0,r3 
 517 1504 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 518 1508 4FF00002 	    mov r2,#INPUT_FLOAT
 519 150c 00B5FEF7 	    _CALL gpio_config
 519      10FF5DF8 
 519      04EB
 520              	// wait send completed
 521              	//  expire after 10 msec 
 522 1516 4FF00A00 	    mov r0,#10
 523 151a E060     	    str r0,[UP,#CD_TIMER]
 524 151c E068     	1:  ldr r0,[UP,#CD_TIMER]
 525 151e 20B1     	    cbz r0, 4f 
 526 1520 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 527 1524 10F0020F 	    tst r0,#KBD_TX
 528 1528 F8D1     	    bne 1b 
 529              	// enable video interrupt     
 530 152a 4FF01D00 	4:  mov r0,#TIM3_IRQ
 531 152e 00B5FEF7 	    _CALL nvic_enable_irq
 531      D3FE5DF8 
 531      04EB
 532 1538 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 533 153c 20F00201 	    bic r1,r0,#KBD_TX
 534 1540 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 535 1544 00F00200 	    and r0,#KBD_TX
 536 1548 48B1     	    cbz r0, 5f
 537 154a 1968     	    ldr r1,[r3,#GPIO_MODER]
 538 154c 21F04071 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
ARM GAS  forth.s 			page 63


 539 1550 1960     	    str r1,[r3,#GPIO_MODER]
 540 1552 80EA0000 	    eor r0,r0 
 541 1556 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 542 155a 6FEA0000 	    mvn r0,r0   
 543 155e 0EBC     	5:  pop {r1,r2,r3}
 544 1560 7047     	    _RET 
 545              	
 546              	 
 547              	// flush keyboard queue 
 548              	kbd_clear_queue:
 549 1562 80EA0000 	    eor T0,T0 
 550 1566 C4F88800 	    str T0,[UP,#KBD_QHEAD]
 551 156a C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 552 156e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 553 1572 6FF00301 	    mvn T1,#3
 554 1576 00EA0100 	    and T0,T1 
 555 157a 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 556 157e 7047     	    _RET 
 557              	
 558              	/**********************************
 559              	 KBD-RST ( -- c )
 560              	 send a reset command to keyboard
 561              	**********************************/
 562 1580 9C130000 	    _HEADER KBD_RST,7,"KBD-RST"
 562      074B4244 
 562      2D525354 
 563 158c 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 564 1590 00B5FFF7 	    _CALL kbd_send
 564      6CFF5DF8 
 564      04EB
 565 159a B8B9     	    cbnz T0,3f // keyboard not dectected
 566 159c 00B5FFF7 	    _CALL kbd_clear_queue
 566      E0FF5DF8 
 566      04EB
 567 15a6 00B5FFF7 	    _CALL wait_code 
 567      E1FE5DF8 
 567      04EB
 568 15b0 FE28     	    cmp r0,KBD_CMD_RESEND
 569 15b2 EBD0     	    beq 1b 
 570 15b4 4FF4FA70 	    mov T0,#500 
 571 15b8 E060     	    str T0,[UP,#CD_TIMER]
 572 15ba 00B5FFF7 	2:  _CALL keycode
 572      C3FE5DF8 
 572      04EB
 573 15c4 10B9     	    cbnz T0,3f
 574 15c6 E068     	    ldr T0,[UP,#CD_TIMER]
 575 15c8 0028     	    cmp T0,#0 
 576 15ca F6D1     	    bne 2b 
 577 15cc 47F8046D 	3:  _PUSH 
 578 15d0 0646     	    mov TOS,T0  
 579 15d2 D9E0     	    _NEXT 
 580              	
 581              	/*****************************
 582              	 KBD-LED ( c -- )
 583              	 send command to control
 584              	 keyboard LEDS 
 585              	*****************************/
ARM GAS  forth.s 			page 64


 586 15d4 84150000 	    _HEADER KBD_LED,7,"KBD-LED"
 586      074B4244 
 586      2D4C4544 
 587 15e0 00B5FFF7 	1:  _CALL kbd_clear_queue
 587      BEFF5DF8 
 587      04EB
 588 15ea 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 589 15ee 00B5FFF7 	    _CALL kbd_send 
 589      3DFF5DF8 
 589      04EB
 590 15f8 00B5FFF7 	2:  _CALL wait_code 
 590      B8FE5DF8 
 590      04EB
 591 1602 FE28     	    cmp T0,#KBD_CMD_RESEND
 592 1604 ECD0     	    beq 1b
 593 1606 FA28     	    cmp T0,#KBD_ACK  
 594 1608 F6D1     	    bne 2b 
 595 160a 3046     	2:  mov T0,TOS 
 596 160c 00F00700 	    and T0,#7 
 597 1610 00B5FFF7 	    _CALL kbd_send 
 597      2CFF5DF8 
 597      04EB
 598 161a 00B5FFF7 	3:  _CALL wait_code 
 598      A7FE5DF8 
 598      04EB
 599 1624 FE28     	    cmp T0,#KBD_CMD_RESEND 
 600 1626 F0D0     	    beq 2b
 601 1628 FA28     	    cmp T0,#KBD_ACK 
 602 162a F6D1     	    bne 3b  
 603 162c 57F8046B 	    _POP 
 604 1630 AAE0     	    _NEXT 
 605              	
 606              	/**************************
 607              	 CAPS-LED ( -- )
 608              	 synch capslock LED
 609              	 to KBD_F_CAPS 
 610              	**************************/
 611 1632 D8150000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 611      08434150 
 611      532D4C45 
 611      4400
 612 1640 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 613 1644 10F0010F 	    tst T0,#1
 614 1648 00D1     	    bne 1f 
 615 164a 9DE0     	    _NEXT 
 616 164c 47F8046D 	1: _PUSH 
 617 1650 6FF00101 	    mvn T1,#1 
 618 1654 00EA0100 	    and T0,T1 
 619 1658 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 620 165c 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 621 1660 134D45F0 	    _CALL_COLWORD KBD_LED
 621      0105BBE7 
 622              	
 623              	
 624              	/************************
 625              	 WAIT-KEY ( -- c )
 626              	 wait for keyboard key 
ARM GAS  forth.s 			page 65


 627              	*************************/
 628 1668 36160000 	    _HEADER WKEY,8,"WAIT-KEY"
 628      08574149 
 628      542D4B45 
 628      590000BF 
 629 1678 504700BF 	    _NEST
 630 167c 41160000 	1:  _ADR CAPS_LED  
 631 1680 A9130000 	    _ADR PS2_QKEY 
 632 1684 0D1C0000 	    _ADR QDUP 
 633 1688 47190000 	    _QBRAN 1b  
 633      7C160000 
 634 1690 8F170000 	    _UNNEST 
 635 1694 AA120000 	
 635      B8120000 
 635      180F0000 
 635      3C100000 
 635      CC0F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16b4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
ARM GAS  forth.s 			page 66


  40      C4F20200 
  41 16bc 0346     	    mov r3,r0 
  42 16be 4FF00401 	    mov r1,#PIN_F_SC 
  43 16c2 4FF00102 	    mov r2,#OUTPUT_PP
  44 16c6 00B5FEF7 	    _CALL gpio_config 
  44      33FE5DF8 
  44      04EB
  45 16d0 1846     	    mov r0,r3 
  46 16d2 4FF00401 	    mov r1,#PIN_F_SC  
  47 16d6 4FF00101 	    MOV r1,#1
  48 16da 00B5FEF7 	    _CALL gpio_out 
  48      7FFE5DF8 
  48      04EB
  49 16e4 1846     	    mov r0,r3 
  50 16e6 4FF00501 	    mov r1,#PIN_SCK  
  51 16ea 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 16ee 00B5FEF7 	    _CALL gpio_config 
  52      1FFE5DF8 
  52      04EB
  53 16f8 1846     	    mov r0,r3 
  54 16fa 4FF00701 	    mov r1,#PIN_MOSI 
  55 16fe 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 1702 00B5FEF7 	    _CALL gpio_config 
  56      15FE5DF8 
  56      04EB
  57 170c 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  57      C4F20200 
  58 1714 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  59 1716 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  60 171a 4164     	    str r1,[r0,#RCC_APB2ENR]
  61 171c 7047     	    _RET 
  62              	
  63              	
  64              	/**********************
  65              	    CHIP-SEL ( -- )
  66              	    drive F_SC low 
  67              	*********************/
  68 171e 6C160000 	    _HEADER CHIPSEL,8,"CHIP-SEL"
  68      08434849 
  68      502D5345 
  68      4C00
  69 172c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  69      C4F20200 
  70 1734 4FF00401 	    mov r1,#PIN_F_SC 
  71 1738 4FF00002 	    mov r2,#0 
  72 173c 00B5FEF7 	    _CALL gpio_out 
  72      4EFE5DF8 
  72      04EB
  73 1746 1FE0     	    _NEXT 
  74              	
  75              	
  76              	/*********************
  77              	    _CHIP-DSEL 
  78              	    drive F_SC high 
  79              	*********************/
  80 1748 22170000 	    _HEADER CHIPDSEL,9,"CHIP-DSEL"
  80      09434849 
ARM GAS  forth.s 			page 67


  80      502D4453 
  80      454C00BF 
  81 1758 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  81      C4F20200 
  82 1760 4FF00401 	    mov r1,#PIN_F_SC 
  83 1764 4FF00102 	    mov r2,#1 
  84 1768 00B5FEF7 	    _CALL gpio_out 
  84      38FE5DF8 
  84      04EB
  85 1772 09E0     	    _NEXT 
  86              	
  87              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/*****************************************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
ARM GAS  forth.s 			page 68


  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	//  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// PUSH TOS, to be used in colon definition 
  83              	TPUSH:
  84 1774 47F8046D 		_PUSH
  85 1778 06E0     		_NEXT
  86              	
  87              	// POP TOS, to be used in colon defintion  
  88              	TPOP:
  89 177a 57F8046B 		_POP 
  90 177e 03E0     		_NEXT
  91              	
  92              	// hi level word enter 
  93              	NEST: 
  94 1780 48F804CD 		STMFD	RSP!,{IP}
  95 1784 05F1030C 		ADD IP,WP,#3
  96              	// inner interprer
  97              	INEXT: 
  98 1788 5CF8045B 		LDR WP,[IP],#4 
  99 178c 2847     		BX WP  
 100              	UNNEST:
 101 178e 58F804CB 		LDMFD RSP!,{IP}
 102 1792 5CF8045B 		LDR WP,[IP],#4 
ARM GAS  forth.s 			page 69


 103 1796 2847     		BX WP  
 104              	
 105              		.p2align 2 
 106              	
 107              	// compile "BX 	INX" 
 108              	// this is the only way 
 109              	// a colon defintion in RAM 
 110              	// can jump to NEST
 111              	// INX is initialized to NEST address 
 112              	// and must be preserved   
 113              	COMPI_NEST:
 114 1798 04F14401 		add T1,UP,#USER_CTOP 
 115 179c 0968     		ldr T1,[T1]
 116 179e 44F25072 		mov T2,#0x4700+(10<<3)
 117 17a2 21F8022B 		strh T2,[T1],#2
 118 17a6 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 119 17aa 21F8022B 		strh T2,[T1],#2 
 120 17ae 04F14402 		add T2,UP,#USER_CTOP 
 121 17b2 1160     		str T1,[T2]
 122 17b4 E8E7     		_NEXT  
 123              	
 124              	// ' STDIN 
 125              	// stdin vector 
 126              	TSTDIN:
 127 17b6 47F8046D 		_PUSH 
 128 17ba 04F11406 		ADD TOS,UP,#STDIN 
 129 17be E3E7     		_NEXT 
 130              	
 131              	// ' STDOUT 
 132              	// stdout vector 
 133              	TSTDOUT:
 134 17c0 47F8046D 		_PUSH 
 135 17c4 04F11806 		ADD TOS,UP,#STDOUT
 136 17c8 DEE7     		_NEXT 
 137              		
 138              	/********************************************
 139              		KEY? ( -- c T | F )
 140              		check if available character 
 141              	********************************************/
 142 17ca 4C170000 		_HEADER QKEY,4,"KEY?"
 142      044B4559 
 142      3F00
 143              	QRX: 
 144 17d4 504700BF 		_NEST 
 145 17d8 B7170000 		_ADR TSTDIN // ' STDIN 
 146 17dc E5210000 		_ADR ATEXE
 147 17e0 8F170000 		_UNNEST 
 148              	
 149              	/********************************************
 150              	    KEY	 ( -- c )
 151              	 	Wait for and return an input character.
 152              	********************************************/
 153 17e4 CE170000 		_HEADER KEY,3,"KEY"
 153      034B4559 
 154 17ec 504700BF 		_NEST
 155              	KEY1:
 156 17f0 41160000 		_ADR CAPS_LED 
ARM GAS  forth.s 			page 70


 157 17f4 D5170000 		_ADR	QRX
 158 17f8 47190000 		_QBRAN	KEY1
 158      F0170000 
 159 1800 8F170000 		_UNNEST
 160              	
 161              	/**********************************************
 162              		EMIT ( c -- )
 163              		transmit a character to console 
 164              	**********************************************/
 165 1804 E8170000 		_HEADER EMIT,4,"EMIT"
 165      04454D49 
 165      540000BF 
 166              	TECHO:
 167 1810 504700BF 		_NEST 
 168 1814 C1170000 		_ADR TSTDOUT 
 169 1818 E5210000 		_ADR ATEXE 
 170 181c 8F170000 		_UNNEST 
 171              	
 172              	
 173              	/************************************************
 174              	 GET-IP ( n - c )
 175              	 return interrupt priority of IRQn 
 176              	************************************************/
 177              	/*
 178              		_HEADER GETIP,6,"GET-IP" 
 179              		_NEST 
 180              		_ADR DUPP 
 181              		_ADR ZLESS
 182              		_QBRAN 1f 
 183              		_DOLIT 15
 184              		_ADR ANDD
 185              		_DOLIT 4
 186              		_ADR SUBB  
 187              		_DOLIT 0xE000ED18 
 188              		_BRAN 2f 
 189              	1:	_DOLIT 0xE000E400 
 190              	2:	_ADR PLUS 
 191              		_ADR CAT
 192              		_DOLIT 4 
 193              		_ADR RSHIFT 
 194              		_UNNEST 
 195              	*/
 196              	
 197              	/***********************************************
 198              	 RANDOM ( n+ -- {0..n+ - 1} )
 199              	 return pseudo random number 
 200              	 REF: https://en.wikipedia.org/wiki/Xorshift
 201              	************************************************/
 202 1820 08180000 		_HEADER RAND,6,"RANDOM"
 202      0652414E 
 202      444F4D00 
 203 182c 504700BF 		_NEST
 204 1830 C51C0000 		_ADR ABSS   
 205 1834 051E0000 		_ADR SEED 
 206 1838 8D190000 		_ADR AT 
 207 183c 391A0000 		_ADR DUPP 
 208 1840 07190000 		_DOLIT 13
ARM GAS  forth.s 			page 71


 208      0D000000 
 209 1848 ED1A0000 		_ADR LSHIFT 
 210 184c A51A0000 		_ADR XORR  
 211 1850 391A0000 		_ADR DUPP 
 212 1854 07190000 		_DOLIT 17 
 212      11000000 
 213 185c D51A0000 		_ADR RSHIFT 
 214 1860 A51A0000 		_ADR XORR 
 215 1864 391A0000 		_ADR DUPP
 216 1868 07190000 		_DOLIT 5 
 216      05000000 
 217 1870 ED1A0000 		_ADR LSHIFT 
 218 1874 A51A0000 		_ADR XORR  
 219 1878 391A0000 		_ADR DUPP 
 220 187c 051E0000 		_ADR SEED 
 221 1880 79190000 		_ADR STORE 
 222 1884 07190000 		_DOLIT 0x7FFFFFFF
 222      FFFFFF7F 
 223 188c 7D1A0000 		_ADR ANDD 
 224 1890 491A0000 		_ADR SWAP 
 225 1894 69200000 		_ADR MODD 
 226 1898 8F170000 		_UNNEST 
 227              	
 228              	
 229              	/****************************************
 230              	 PAUSE ( u -- ) 
 231              	 suspend execution for u milliseconds
 232              	****************************************/
 233 189c 24180000 		_HEADER PAUSE,5,"PAUSE"
 233      05504155 
 233      534500BF 
 234 18a8 504700BF 		_NEST 
 235 18ac 2D1E0000 		_ADR TIMER 
 236 18b0 79190000 		_ADR STORE 
 237              	PAUSE_LOOP:
 238 18b4 2D1E0000 		_ADR TIMER 
 239 18b8 8D190000 		_ADR AT 
 240 18bc 47190000 		_QBRAN PAUSE_EXIT 
 240      CC180000 
 241 18c4 5B190000 		_BRAN PAUSE_LOOP 
 241      B4180000 
 242              	PAUSE_EXIT: 		
 243 18cc 8F170000 		_UNNEST 
 244              	
 245              	/******************************************
 246              	  ULED ( T|F -- )
 247              	  control user LED, -1 ON, 0 OFF 
 248              	*******************************************/
 249 18d0 A0180000 		_HEADER ULED,4,"ULED"
 249      04554C45 
 249      440000BF 
 250 18dc 4FF40050 		mov T0,#(1<<LED_PIN)
 251 18e0 4FF40061 		_MOV32 T1,LED_GPIO 
 251      C4F20201 
 252 18e8 3600     		movs TOS,TOS 
 253 18ea 57F8046B 		_POP
 254 18ee 03D0     		beq ULED_OFF
ARM GAS  forth.s 			page 72


 255 18f0 4FEA0040 		lsl T0,#16 
 256 18f4 8861     		str T0,[T1,#GPIO_BSRR]
 257 18f6 47E7     		_NEXT 
 258              	ULED_OFF:
 259 18f8 8861     		str T0,[T1,#GPIO_BSRR]
 260 18fa 45E7     		_NEXT    
 261              	
 262              	
 263              		
 264              	/***************
 265              	//  The kernel
 266              	***************/
 267              	
 268              	/********************
 269              	    NOP	( -- )
 270              	 	do nothing.
 271              	*********************/
 272 18fc D4180000 		_HEADER NOP,3,"NOP"
 272      034E4F50 
 273 1904 40E7     		_NEXT 
 274              	 
 275              	/********************
 276              	    doLIT	( -- w )
 277              	 	Push an inline literal.
 278              	hidden word used by compiler 
 279              	*********************/
 280              	DOLIT:
 281 1906 47F8046D 		_PUSH				//  store TOS on data stack
 282 190a 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 283 190e 3BE7     		_NEXT 
 284              	
 285              	/*******************************
 286              	    EXECUTE	( ca -- )
 287              	 	Execute the word at ca.
 288              	*******************************/
 289 1910 00190000 		_HEADER EXECU,7,"EXECUTE"
 289      07455845 
 289      43555445 
 290 191c 46F00105 		ORR	WP,TOS,#1 
 291 1920 57F8046B 		_POP
 292 1924 2847     		BX WP 
 293 1926 2FE7     		_NEXT 
 294              	
 295              	/**********************************************************
 296              	    donext	( -- ) counter on R:
 297              	 	Run time code for the single index loop.
 298              	 	: next ( -- ) \ hilevel model
 299              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 300              	hidden word used by compiler 	  
 301              	*********************************************************/
 302              	DONXT:
 303 1928 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 304 192c 22B9     		CBNZ T2,NEXT1 
 305              		/* loop done */
 306 192e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 307 1932 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 308 1936 27E7     		_NEXT
ARM GAS  forth.s 			page 73


 309              	NEXT1:
 310              		/* decrement loop counter */
 311 1938 A2F10102 		SUB	T2,T2,#1
 312 193c C8F80020 		STR	T2,[RSP]
 313 1940 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 314 1944 20E7     		_NEXT 
 315              	
 316              	/**************************************
 317              	    ?branch	( f -- )
 318              	 	Branch if flag is zero.
 319              	hiddend word used by compiler
 320              	**************************************/
 321              	QBRAN:
 322 1946 3600     		MOVS	TOS,TOS
 323 1948 57F8046B 		_POP
 324 194c 02D1     		BNE	QBRAN1
 325 194e DCF800C0 		LDR	IP,[IP]
 326 1952 19E7     		_NEXT
 327              	QBRAN1:
 328 1954 0CF1040C 	 	ADD	IP,IP,#4
 329 1958 16E7     		_NEXT
 330              	
 331              	/***********************************
 332              	    branch	( -- )
 333              	 	Branch to an inline address.
 334              	hidden word used by compiler 
 335              	***********************************/
 336              	BRAN:
 337 195a DCF800C0 		LDR	IP,[IP]
 338 195e 13E7     		_NEXT
 339              	
 340              	/******************************************
 341              	    EXIT	(  -- )
 342              	 	Exit the currently executing command.
 343              	******************************************/
 344 1960 14190000 		_HEADER EXIT,4,"EXIT"
 344      04455849 
 344      540000BF 
 345 196c 8F170000 		_UNNEST
 346              	
 347              	/***********************************
 348              	    !	   ( w a -- )
 349              	 	Pop the data stack to memory.
 350              	************************************/
 351 1970 64190000 		_HEADER STORE,1,"!"
 351      012100BF 
 352 1978 57F8045B 		LDR	WP,[DSP],#4
 353 197c 3560     		STR	WP,[TOS]
 354 197e 57F8046B 		_POP
 355 1982 01E7     		_NEXT 
 356              	
 357              	/********************************************
 358              	    @	   ( a -- w )
 359              	 	Push memory location to the data stack.
 360              	*********************************************/
 361 1984 74190000 		_HEADER AT,1,"@"
 361      014000BF 
ARM GAS  forth.s 			page 74


 362 198c 3668     		LDR	TOS,[TOS]
 363 198e FBE6     		_NEXT 
 364              	
 365              	/*******************************************
 366              	    C!	  ( c b -- )
 367              	 	Pop the data stack to byte memory.
 368              	*******************************************/
 369 1990 88190000 		_HEADER CSTOR,2,"C!"
 369      02432100 
 370 1998 57F8045B 		LDR	WP,[DSP],#4
 371 199c 3570     		STRB WP,[TOS]
 372 199e 57F8046B 		_POP
 373 19a2 F1E6     		_NEXT
 374              	
 375              	/*********************************************
 376              	    C@	  ( b -- c )
 377              	 	Push byte memory location to the data stack.
 378              	**********************************************/
 379 19a4 94190000 		_HEADER CAT,2,"C@"
 379      02434000 
 380 19ac 3678     		LDRB	TOS,[TOS]
 381 19ae EBE6     		_NEXT 
 382              	
 383              	/*********************************************
 384              	    R>	  ( -- w )
 385              	 	Pop the return stack to the data stack.
 386              	**********************************************/
 387 19b0 A8190000 		_HEADER RFROM,2,"R>"
 387      02523E00 
 388 19b8 47F8046D 		_PUSH
 389 19bc 58F8046B 		LDR	TOS,[RSP],#4
 390 19c0 E2E6     		_NEXT 
 391              	
 392              	/************************************************
 393              	    R@	  ( -- w )
 394              	 	Copy top of return stack to the data stack.
 395              	************************************************/
 396 19c2 B4190000 		_HEADER RAT,2,"R@"
 396      02524000 
 396      00BF
 397 19cc 47F8046D 		_PUSH
 398 19d0 D8F80060 		LDR	TOS,[RSP]
 399 19d4 D8E6     		_NEXT 
 400              	
 401              	/***********************************************
 402              	    >R	  ( w -- )
 403              	 	Push the data stack to the return stack.
 404              	************************************************/
 405 19d6 C6190000 		_HEADER TOR,2,">R"
 405      023E5200 
 405      00BF
 406 19e0 48F8046D 		STR	TOS,[RSP,#-4]!
 407 19e4 57F8046B 		_POP
 408 19e8 CEE6     		_NEXT
 409              	
 410              	/*******************************
 411              	//	RP! ( u -- )
ARM GAS  forth.s 			page 75


 412              	// initialize RPP with u 
 413              	*******************************/
 414 19ea DA190000 		_HEADER RPSTOR,3,"RP!"
 414      03525021 
 414      00BF
 415 19f4 B046     		MOV RSP,TOS 
 416 19f6 57F8046B 		_POP  
 417 19fa C5E6     		_NEXT 
 418              	
 419              	/********************************
 420              		SP! ( u -- )
 421              	 initialize SPP with u 
 422              	********************************/
 423 19fc EE190000 		_HEADER SPSTOR,3,"SP!"
 423      03535021 
 424 1a04 3746     		MOV DSP,TOS 
 425 1a06 86EA0606 		EOR TOS,TOS,TOS 
 426 1a0a BDE6     		_NEXT 
 427              	
 428              	/**************************************
 429              	    SP@	 ( -- a )
 430              	 	Push the current data stack pointer.
 431              	***************************************/
 432 1a0c 001A0000 		_HEADER SPAT,3,"SP@"
 432      03535040 
 433 1a14 47F8046D 		_PUSH
 434 1a18 3E46     		MOV	TOS,DSP
 435 1a1a B5E6     		_NEXT
 436              	
 437              	/********************************
 438              	    DROP	( w -- )
 439              	 	Discard top stack item.
 440              	********************************/
 441 1a1c 101A0000 		_HEADER DROP,4,"DROP"
 441      0444524F 
 441      500000BF 
 442 1a28 57F8046B 		_POP
 443 1a2c ACE6     		_NEXT 
 444              	
 445              	/*********************************
 446              	    DUP	 ( w -- w w )
 447              	 	Duplicate the top stack item.
 448              	*********************************/
 449 1a2e 201A0000 		_HEADER DUPP,3,"DUP"
 449      03445550 
 449      00BF
 450 1a38 47F8046D 		_PUSH
 451 1a3c A4E6     		_NEXT 
 452              	
 453              	/**********************************
 454              	    SWAP	( w1 w2 -- w2 w1 )
 455              	 	Exchange top two stack items.
 456              	**********************************/
 457 1a3e 321A0000 		_HEADER SWAP,4,"SWAP"
 457      04535741 
 457      5000
 458 1a48 3D68     		LDR	WP,[DSP]
ARM GAS  forth.s 			page 76


 459 1a4a 3E60     		STR	TOS,[DSP]
 460 1a4c 2E46     		MOV	TOS,WP
 461 1a4e 9BE6     		_NEXT 
 462              	
 463              	/***********************************
 464              	    OVER	( w1 w2 -- w1 w2 w1 )
 465              	 	Copy second stack item to top.
 466              	***********************************/
 467 1a50 421A0000 		_HEADER OVER,4,"OVER"
 467      044F5645 
 467      520000BF 
 468 1a5c 47F8046D 		_PUSH
 469 1a60 7E68     		LDR	TOS,[DSP,#4]
 470 1a62 91E6     		_NEXT 
 471              	
 472              	/***********************************
 473              	    0<	  ( n -- t )
 474              	 	Return true if n is negative.
 475              	***********************************/
 476 1a64 541A0000 		_HEADER ZLESS,2,"0<"
 476      02303C00 
 477 1a6c 4FEAE676 		ASR TOS,#31
 478 1a70 8AE6     		_NEXT 
 479              	
 480              	/********************************
 481              	    AND	 ( w w -- w )
 482              	 	Bitwise AND.
 483              	********************************/
 484 1a72 681A0000 		_HEADER ANDD,3,"AND"
 484      03414E44 
 484      00BF
 485 1a7c 57F8045B 		LDR	WP,[DSP],#4
 486 1a80 06EA0506 		AND	TOS,TOS,WP
 487 1a84 80E6     		_NEXT 
 488              	
 489              	/******************************
 490              	    OR	  ( w w -- w )
 491              	 	Bitwise inclusive OR.
 492              	******************************/
 493 1a86 761A0000 		_HEADER ORR,2,"OR"
 493      024F5200 
 493      00BF
 494 1a90 57F8045B 		LDR	WP,[DSP],#4
 495 1a94 46EA0506 		ORR	TOS,TOS,WP
 496 1a98 76E6     		_NEXT 
 497              	
 498              	/*****************************
 499              	    XOR	 ( w w -- w )
 500              	 	Bitwise exclusive OR.
 501              	*****************************/
 502 1a9a 8A1A0000 		_HEADER XORR,3,"XOR"
 502      03584F52 
 502      00BF
 503 1aa4 57F8045B 		LDR	WP,[DSP],#4
 504 1aa8 86EA0506 		EOR	TOS,TOS,WP
 505 1aac 6CE6     		_NEXT 
 506              	
ARM GAS  forth.s 			page 77


 507              	/**************************************************
 508              	    UM+	 ( w w -- w cy )
 509              	 	Add two numbers, return the sum and carry flag.
 510              	***************************************************/
 511 1aae 9E1A0000 		_HEADER UPLUS,3,"UM+"
 511      03554D2B 
 511      00BF
 512 1ab8 3D68     		LDR	WP,[DSP]
 513 1aba AD19     		ADDS	WP,WP,TOS
 514 1abc 4FF00006 		MOV	TOS,#0
 515 1ac0 46F10006 		ADC	TOS,TOS,#0
 516 1ac4 3D60     		STR	WP,[DSP]
 517 1ac6 5FE6     		_NEXT 
 518              	
 519              	/*********************************
 520              	    RSHIFT	 ( w # -- w )
 521              	 	arithmetic Right shift # bits.
 522              	**********************************/
 523 1ac8 B21A0000 		_HEADER RSHIFT,6,"RSHIFT"
 523      06525348 
 523      49465400 
 524 1ad4 57F8045B 		LDR	WP,[DSP],#4
 525 1ad8 45FA06F6 		MOV	TOS,WP,ASR TOS
 526 1adc 54E6     		_NEXT 
 527              	
 528              	/****************************
 529              	    LSHIFT	 ( w # -- w )
 530              	 	Right shift # bits.
 531              	****************************/
 532 1ade CC1A0000 		_HEADER LSHIFT,6,"LSHIFT"
 532      064C5348 
 532      49465400 
 532      00BF
 533 1aec 57F8045B 		LDR	WP,[DSP],#4
 534 1af0 05FA06F6 		MOV	TOS,WP,LSL TOS
 535 1af4 48E6     		_NEXT
 536              	
 537              	/*************************
 538              	    +	 ( w w -- w )
 539              	 	Add.
 540              	*************************/
 541 1af6 E21A0000 		_HEADER PLUS,1,"+"
 541      012B
 542 1afc 57F8045B 		LDR	WP,[DSP],#4
 543 1b00 2E44     		ADD	TOS,TOS,WP
 544 1b02 41E6     		_NEXT 
 545              	
 546              	/************************
 547              	    -	 ( w w -- w )
 548              	 	Subtract.
 549              	************************/
 550 1b04 FA1A0000 		_HEADER SUBB,1,"-"
 550      012D00BF 
 551 1b0c 57F8045B 		LDR	WP,[DSP],#4
 552 1b10 C6EB0506 		RSB	TOS,TOS,WP
 553 1b14 38E6     		_NEXT 
 554              	
ARM GAS  forth.s 			page 78


 555              	/************************
 556              	    *	 ( w w -- w )
 557              	 	Multiply.
 558              	***********************/
 559 1b16 081B0000 		_HEADER STAR,1,"*"
 559      012A
 560 1b1c 57F8045B 		LDR	WP,[DSP],#4
 561 1b20 05FB06F6 		MUL	TOS,WP,TOS
 562 1b24 30E6     		_NEXT 
 563              	
 564              	/***************************
 565              	    UM*	 ( w w -- ud )
 566              	 	Unsigned multiply.
 567              	****************************/
 568 1b26 1A1B0000 		_HEADER UMSTA,3,"UM*"
 568      03554D2A 
 568      00BF
 569 1b30 3D68     		LDR	WP,[DSP]
 570 1b32 A6FB0523 		UMULL	T2,T3,TOS,WP
 571 1b36 3A60     		STR	T2,[DSP]
 572 1b38 1E46     		MOV	TOS,T3
 573 1b3a 25E6     		_NEXT 
 574              	
 575              	/***************************
 576              	    M*	 ( w w -- d )
 577              	 	signed multiply.
 578              	***************************/
 579 1b3c 2A1B0000 		_HEADER MSTAR,2,"M*"
 579      024D2A00 
 580 1b44 3D68     		LDR	WP,[DSP]
 581 1b46 86FB0523 		SMULL	T2,T3,TOS,WP
 582 1b4a 3A60     		STR	T2,[DSP]
 583 1b4c 1E46     		MOV	TOS,T3
 584 1b4e 1BE6     		_NEXT 
 585              	
 586              	/***************************
 587              	    1+	 ( w -- w+1 )
 588              	 	Add 1.
 589              	***************************/
 590 1b50 401B0000 		_HEADER ONEP,2,"1+"
 590      02312B00 
 591 1b58 06F10106 		ADD	TOS,TOS,#1
 592 1b5c 14E6     		_NEXT 
 593              	
 594              	/***************************
 595              	    1-	 ( w -- w-1 )
 596              	 	Subtract 1.
 597              	***************************/
 598 1b5e 541B0000 		_HEADER ONEM,2,"1-"
 598      02312D00 
 598      00BF
 599 1b68 A6F10106 		SUB	TOS,TOS,#1
 600 1b6c 0CE6     		_NEXT 
 601              	
 602              	/***************************
 603              	    2+	 ( w -- w+2 )
 604              	 	Add 2.
ARM GAS  forth.s 			page 79


 605              	**************************/
 606 1b6e 621B0000 		_HEADER TWOP,2,"2+"
 606      02322B00 
 606      00BF
 607 1b78 06F10206 		ADD	TOS,TOS,#2
 608 1b7c 04E6     		_NEXT
 609              	
 610              	/**************************
 611              	    2-	 ( w -- w-2 )
 612              	 	Subtract 2.
 613              	**************************/
 614 1b7e 721B0000 		_HEADER TWOM,2,"2-"
 614      02322D00 
 614      00BF
 615 1b88 A6F10206 		SUB	TOS,TOS,#2
 616 1b8c FCE5     		_NEXT
 617              	
 618              	/***************************
 619              	    CELL+	( w -- w+4 )
 620              	 	Add CELLL.
 621              	***************************/
 622 1b8e 821B0000 		_HEADER CELLP,5,"CELL+"
 622      0543454C 
 622      4C2B
 623 1b98 06F10406 		ADD	TOS,TOS,#CELLL
 624 1b9c F4E5     		_NEXT
 625              	
 626              	/***************************
 627              	    CELL-	( w -- w-4 )
 628              	 	Subtract CELLL.
 629              	**************************/
 630 1b9e 921B0000 		_HEADER CELLM,5,"CELL-"
 630      0543454C 
 630      4C2D
 631 1ba8 A6F10406 		SUB	TOS,TOS,#CELLL
 632 1bac ECE5     		_NEXT
 633              	
 634              	/**************************** 
 635              	    BL	( -- 32 )
 636              	 	Blank (ASCII space).
 637              	*****************************/
 638 1bae A21B0000 		_HEADER BLANK,2,"BL"
 638      02424C00 
 638      00BF
 639 1bb8 47F8046D 		_PUSH
 640 1bbc 4FF02006 		MOV	TOS,#32
 641 1bc0 E2E5     		_NEXT 
 642              	
 643              	/**************************
 644              	    CELLS	( w -- w*4 )
 645              	 	Multiply CELLL 
 646              	***************************/
 647 1bc2 B21B0000 		_HEADER CELLS,5,"CELLS"
 647      0543454C 
 647      4C53
 648 1bcc 4FEA8606 		LSL TOS,#2
 649 1bd0 DAE5     		_NEXT
ARM GAS  forth.s 			page 80


 650              	
 651              	/***************************
 652              	    CELL/	( w -- w/4 )
 653              	 	Divide by CELLL.
 654              	***************************/
 655 1bd2 C61B0000 		_HEADER CELLSL,5,"CELL/"
 655      0543454C 
 655      4C2F
 656 1bdc 4FEAA606 		ASR TOS,#2
 657 1be0 D2E5     		_NEXT
 658              	
 659              	/*************************
 660              	    2*	( w -- w*2 )
 661              	 	Multiply 2.
 662              	*************************/
 663 1be2 D61B0000 		_HEADER TWOST,2,"2*"
 663      02322A00 
 663      00BF
 664 1bec 4FEA4606 		MOV	TOS,TOS,LSL#1
 665 1bf0 CAE5     		_NEXT
 666              	
 667              	/*************************
 668              	    2/	( w -- w/2 )
 669              	 	Divide by 2.
 670              	***********************/
 671 1bf2 E61B0000 		_HEADER TWOSL,2,"2/"
 671      02322F00 
 671      00BF
 672 1bfc 4FEA6606 		MOV	TOS,TOS,ASR#1
 673 1c00 C2E5     		_NEXT
 674              	
 675              	/****************************
 676              	    ?DUP	( w -- w w | 0 )
 677              	 	Conditional duplicate.
 678              	*****************************/
 679 1c02 F61B0000 		_HEADER QDUP,4,"?DUP"
 679      043F4455 
 679      5000
 680 1c0c 3500     		MOVS	WP,TOS
 681 1c0e 18BF     		IT NE 
 682 1c10 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 683 1c14 B8E5     		_NEXT
 684              	
 685              	/***********************************
 686              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 687              	 	Rotate top 3 items.
 688              	*************************************/
 689 1c16 061C0000 		_HEADER ROT,3,"ROT"
 689      03524F54 
 689      00BF
 690 1c20 3868     		LDR	T0,[DSP]  // w2 
 691 1c22 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 692 1c24 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 693 1c26 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 694 1c28 AEE5     		_NEXT
 695              	
 696              	/*********************************
ARM GAS  forth.s 			page 81


 697              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 698              	 left rotate top 3 elements 
 699              	********************************/
 700 1c2a 1A1C0000 		_HEADER NROT,4,"-ROT"
 700      042D524F 
 700      5400
 701 1c34 7868     		LDR T0,[DSP,#4]
 702 1c36 7E60     		STR TOS,[DSP,#4]	
 703 1c38 3E68     		LDR TOS,[DSP]
 704 1c3a 3860     		STR T0,[DSP]
 705 1c3c A4E5     		_NEXT 
 706              	
 707              	/*********************************
 708              	    2DROP	( w1 w2 -- )
 709              	 	Drop top 2 items.
 710              	*********************************/
 711 1c3e 2E1C0000 		_HEADER DDROP,5,"2DROP"
 711      05324452 
 711      4F50
 712 1c48 57F8046B 		_POP
 713 1c4c 57F8046B 		_POP
 714 1c50 9AE5     		_NEXT 
 715              	
 716              	/********************************
 717              		3DROP ( w1 w2 w3 -- )
 718              		drop top 3 items 
 719              	********************************/
 720 1c52 421C0000 		_HEADER TDROP,5,"3DROP"
 720      05334452 
 720      4F50
 721 1c5c 07F10807 	    add DSP,#8 
 722 1c60 57F8046B 	    _POP 
 723 1c64 90E5     	    _NEXT 
 724              	
 725              	/***********************************
 726              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 727              	 	Duplicate top 2 items.
 728              	************************************/
 729 1c66 561C0000 		_HEADER DDUP,4,"2DUP"
 729      04324455 
 729      5000
 730 1c70 3868     		LDR	T0,[DSP] // w1
 731 1c72 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 732 1c76 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 733 1c7a 85E5     		_NEXT
 734              	
 735              	/******************************
 736              	    D+	( d1 d2 -- d3 )
 737              	 	Add top 2 double numbers.
 738              	******************************/
 739 1c7c 6A1C0000 		_HEADER DPLUS,2,"D+"
 739      02442B00 
 740 1c84 57F8045B 		LDR	WP,[DSP],#4
 741 1c88 57F8042B 		LDR	T2,[DSP],#4
 742 1c8c 3B68     		LDR	T3,[DSP]
 743 1c8e ED18     		ADDS	WP,WP,T3
 744 1c90 3D60     		STR	WP,[DSP]
ARM GAS  forth.s 			page 82


 745 1c92 46EB0206 		ADC	TOS,TOS,T2
 746 1c96 77E5     		_NEXT
 747              	
 748              	/*****************************
 749              	    NOT	 ( w -- !w )
 750              	 	1"s complement.
 751              	*****************************/
 752 1c98 801C0000 		_HEADER INVER,3,"NOT"
 752      034E4F54 
 753 1ca0 6FEA0606 		MVN	TOS,TOS
 754 1ca4 70E5     		_NEXT
 755              	
 756              	/*****************************
 757              	    NEGATE	( w -- -w )
 758              	 	2's complement.
 759              	***************************/
 760 1ca6 9C1C0000 		_HEADER NEGAT,6,"NEGATE"
 760      064E4547 
 760      41544500 
 760      00BF
 761 1cb4 C6F10006 		RSB	TOS,TOS,#0
 762 1cb8 66E5     		_NEXT
 763              	
 764              	/***************************
 765              	    ABS	 ( w -- |w| )
 766              	 	Absolute.
 767              	**************************/
 768 1cba AA1C0000 		_HEADER ABSS,3,"ABS"
 768      03414253 
 768      00BF
 769 1cc4 16F0004F 		TST	TOS,#0x80000000
 770 1cc8 18BF     		IT NE
 771 1cca 7642     	    RSBNE   TOS,TOS,#0
 772 1ccc 5CE5     		_NEXT
 773              	
 774              	/*******************
 775              	  0= ( w -- f )
 776              	 TOS==0?
 777              	*******************/
 778 1cce BE1C0000 		_HEADER ZEQUAL,2,"0="
 778      02303D00 
 778      00BF
 779 1cd8 16B9     		cbnz TOS,1f
 780 1cda 4FF0FF36 		mov TOS,#-1
 781 1cde 53E5     		_NEXT 
 782 1ce0 86EA0606 	1:  eor TOS,TOS,TOS  
 783 1ce4 50E5     		_NEXT 	
 784              	
 785              	/*********************
 786              	    =	 ( w w -- t )
 787              	 	Equal?
 788              	*********************/
 789 1ce6 D21C0000 		_HEADER EQUAL,1,"="
 789      013D
 790 1cec 57F8045B 		LDR	WP,[DSP],#4
 791 1cf0 AE42     		CMP	TOS,WP
 792 1cf2 0CBF     		ITE EQ 
ARM GAS  forth.s 			page 83


 793 1cf4 6FF00006 	    MVNEQ	TOS,#0
 794 1cf8 0026     		MOVNE	TOS,#0
 795 1cfa 45E5     		_NEXT
 796              	
 797              	/************************
 798              	    U<	 ( w w -- t )
 799              	 	Unsigned less?
 800              	*************************/
 801 1cfc EA1C0000 		_HEADER ULESS,2,"U<"
 801      02553C00 
 802 1d04 57F8045B 		LDR	WP,[DSP],#4
 803 1d08 B542     		CMP	WP,TOS
 804 1d0a 34BF     		ITE CC 
 805 1d0c 6FF00006 		MVNCC	TOS,#0
 806 1d10 0026     		MOVCS	TOS,#0
 807 1d12 39E5     		_NEXT
 808              	
 809              	/**********************
 810              	    <	( w w -- t )
 811              	 	Less?
 812              	**********************/
 813 1d14 001D0000 		_HEADER LESS,1,"<"
 813      013C00BF 
 814 1d1c 57F8045B 		LDR	WP,[DSP],#4
 815 1d20 B542     		CMP	WP,TOS
 816 1d22 B4BF     	    ITE LT
 817 1d24 6FF00006 		MVNLT	TOS,#0
 818 1d28 0026     		MOVGE	TOS,#0
 819 1d2a 2DE5     		_NEXT 
 820              	
 821              	/***********************
 822              	    >	( w w -- t )
 823              	 	greater?
 824              	***********************/
 825 1d2c 181D0000 		_HEADER GREAT,1,">"
 825      013E00BF 
 826 1d34 57F8045B 		LDR	WP,[DSP],#4
 827 1d38 B542     		CMP	WP,TOS
 828 1d3a CCBF     		ITE GT
 829 1d3c 6FF00006 	    MVNGT	TOS,#0
 830 1d40 0026     		MOVLE	TOS,#0
 831 1d42 21E5     		_NEXT
 832              	
 833              	/***************************
 834              	    MAX	 ( w w -- max )
 835              	 	Leave maximum.
 836              	***************************/
 837 1d44 301D0000 		_HEADER MAX,3,"MAX"
 837      034D4158 
 838 1d4c 57F8045B 		LDR	WP,[DSP],#4
 839 1d50 B542     		CMP	WP,TOS
 840 1d52 C8BF     		IT GT 
 841 1d54 2E46     		MOVGT	TOS,WP
 842 1d56 17E5     		_NEXT 
 843              	
 844              	/**************************
 845              	    MIN	 ( w w -- min )
ARM GAS  forth.s 			page 84


 846              	 	Leave minimum.
 847              	**************************/
 848 1d58 481D0000 		_HEADER MIN,3,"MIN"
 848      034D494E 
 849 1d60 57F8045B 		LDR	WP,[DSP],#4
 850 1d64 B542     		CMP	WP,TOS
 851 1d66 B8BF     		IT LT
 852 1d68 2E46     		MOVLT	TOS,WP
 853 1d6a 0DE5     		_NEXT
 854              	
 855              	/***********************
 856              	    +!	 ( w a -- )
 857              	 	Add to memory.
 858              	***********************/
 859 1d6c 5C1D0000 		_HEADER PSTOR,2,"+!"
 859      022B2100 
 860 1d74 57F8045B 		LDR	WP,[DSP],#4
 861 1d78 3268     		LDR	T2,[TOS]
 862 1d7a 2A44     		ADD	T2,T2,WP
 863 1d7c 3260     		STR	T2,[TOS]
 864 1d7e 57F8046B 		_POP
 865 1d82 01E5     		_NEXT
 866              	
 867              	/************************
 868              	    2!	 ( d a -- )
 869              	 	Store double number.
 870              	*************************/
 871 1d84 701D0000 		_HEADER DSTOR,2,"2!"
 871      02322100 
 872 1d8c 57F8045B 		LDR	WP,[DSP],#4
 873 1d90 57F8042B 		LDR	T2,[DSP],#4
 874 1d94 46F8045B 		STR	WP,[TOS],#4
 875 1d98 3260     		STR	T2,[TOS]
 876 1d9a 57F8046B 		_POP
 877 1d9e F3E4     		_NEXT
 878              	
 879              	/************************
 880              	    2@	 ( a -- d )
 881              	 	Fetch double number.
 882              	************************/
 883 1da0 881D0000 		_HEADER DAT,2,"D@"
 883      02444000 
 884 1da8 7568     		LDR	WP,[TOS,#4]
 885 1daa 47F8045D 		STR	WP,[DSP,#-4]!
 886 1dae 3668     		LDR	TOS,[TOS]
 887 1db0 EAE4     		_NEXT
 888              	
 889              	/***************************
 890              	    COUNT	( b -- b+1 c )
 891              	 	Fetch length of string.
 892              	****************************/
 893 1db2 A41D0000 		_HEADER COUNT,5,"COUNT"
 893      05434F55 
 893      4E54
 894 1dbc 16F8015B 		LDRB	WP,[TOS],#1
 895 1dc0 47F8046D 		_PUSH
 896 1dc4 2E46     		MOV	TOS,WP
ARM GAS  forth.s 			page 85


 897 1dc6 DFE4     		_NEXT
 898              	
 899              	/******************************
 900              	    DNEGATE	( d -- -d )
 901              	 	Negate double number.
 902              	**************************/
 903 1dc8 B61D0000 		_HEADER DNEGA,7,"DNEGATE"
 903      07444E45 
 903      47415445 
 904 1dd4 3D68     		LDR	WP,[DSP]
 905 1dd6 A2EB0202 		SUB	T2,T2,T2
 906 1dda 551B     		SUBS WP,T2,WP
 907 1ddc 62EB0606 		SBC	TOS,T2,TOS
 908 1de0 3D60     		STR	WP,[DSP]
 909 1de2 D1E4     		_NEXT
 910              	
 911              	/******************************
 912              	  System and user variables
 913              	******************************/
 914              	
 915              	/*******************************
 916              	  doVAR	( -- a )
 917              	  Run time routine for VARIABLE and CREATE.
 918              	hidden word used by compiler
 919              	********************************/
 920              	DOVAR:
 921 1de4 47F8046D 		_PUSH
 922 1de8 6646     		MOV TOS,IP
 923 1dea 0CF1040C 		ADD IP,IP,#4 
 924 1dee CEE4     		B UNNEST 
 925              	
 926              	/**********************************
 927              	    doCON	( -- a ) 
 928              	 	Run time routine for CONSTANT.
 929              	hidden word used by compiler 
 930              	***********************************/
 931              	DOCON:
 932 1df0 47F8046D 		_PUSH
 933 1df4 5CF8046B 		LDR.W TOS,[IP],#4 
 934 1df8 C9E4     		B UNNEST 
 935              	
 936              	/***********************
 937              	  system variables 
 938              	***********************/
 939              	
 940              	/**************************
 941              	 SEED ( -- a)
 942              	 return PRNG seed address 
 943              	**************************/
 944 1dfa CC1D0000 		_HEADER SEED,4,"SEED"
 944      04534545 
 944      4400
 945 1e04 47F8046D 		_PUSH 
 946 1e08 04F10406 		ADD TOS,UP,#RNDSEED
 947 1e0c BCE4     		_NEXT 	
 948              	
 949              	/****************************************
ARM GAS  forth.s 			page 86


 950              	  MSEC ( -- a)
 951              	 return address of milliseconds counter
 952              	****************************************/
 953 1e0e FE1D0000 		_HEADER MSEC,4,"MSEC"
 953      044D5345 
 953      4300
 954 1e18 47F8046D 	    _PUSH
 955 1e1c 04F10806 	    ADD TOS,UP,#TICKS
 956 1e20 B2E4     	    _NEXT 
 957              	
 958              	/*************************
 959              	 TIMER ( -- a )
 960              	 count down timer 
 961              	**********************/
 962 1e22 121E0000 		_HEADER TIMER,5,"TIMER"
 962      0554494D 
 962      4552
 963 1e2c 47F8046D 		 _PUSH 
 964 1e30 04F10C06 	    ADD TOS,UP,#CD_TIMER
 965 1e34 A8E4     	    _NEXT
 966              	
 967              	/*****************************
 968              	    'BOOT	 ( -- a )
 969              	 	boot up application vector 
 970              	*****************************/
 971 1e36 261E0000 		_HEADER TBOOT,5,"'BOOT"
 971      0527424F 
 971      4F54
 972 1e40 47F8046D 		_PUSH
 973 1e44 04F11006 		ADD	TOS,UP,#BOOT 
 974 1e48 9EE4     		_NEXT
 975              		
 976              	/********************************************	
 977              	    BASE	( -- a )
 978              	 	Storage of the radix base for numeric I/O.
 979              	**********************************************/
 980 1e4a 3A1E0000 		_HEADER BASE,4,"BASE"
 980      04424153 
 980      4500
 981 1e54 47F8046D 		_PUSH
 982 1e58 04F11C06 		ADD	TOS,UP,#NBASE
 983 1e5c 94E4     		_NEXT
 984              	
 985              	/*****************************************************
 986              	    temp	 ( -- a )
 987              	 	A temporary storage location used in parse and find.
 988              	hidden word for internal use
 989              	********************************************************/
 990              	TEMP:
 991 1e5e 47F8046D 		_PUSH
 992 1e62 04F12006 		ADD	TOS,UP,#TMP
 993 1e66 8FE4     		_NEXT
 994              	
 995              	/*******************************************
 996              	    SPAN	( -- a )
 997              	 	Hold character count received by EXPECT.
 998              	********************************************/
ARM GAS  forth.s 			page 87


 999 1e68 4E1E0000 		_HEADER SPAN,4,"SPAN"
 999      04535041 
 999      4E0000BF 
 1000 1e74 47F8046D 		_PUSH
 1001 1e78 04F12406 		ADD	TOS,UP,#CSPAN
 1002 1e7c 84E4     		_NEXT
 1003              	
 1004              	/***********************************************************
 1005              	    >IN	 ( -- a )
 1006              	 	Hold the character pointer while parsing input stream.
 1007              	***********************************************************/
 1008 1e7e 6C1E0000 		_HEADER INN,3,">IN"
 1008      033E494E 
 1008      00BF
 1009 1e88 47F8046D 		_PUSH
 1010 1e8c 04F12806 		ADD	TOS,UP,#TOIN
 1011 1e90 7AE4     		_NEXT
 1012              	
 1013              	/**************************************
 1014              	    #TIB	( -- a )
 1015              	 	Hold the current count and address 
 1016              		of the terminal input buffer.
 1017              	**************************************/
 1018 1e92 821E0000 		_HEADER NTIB,4,"#TIB"
 1018      04235449 
 1018      4200
 1019 1e9c 47F8046D 		_PUSH
 1020 1ea0 04F12C06 		ADD	TOS,UP,#NTIBB
 1021 1ea4 70E4     		_NEXT
 1022              	
 1023              	/******************************
 1024              	    'EVAL	( -- a )
 1025              	 	Execution vector of EVAL.
 1026              	*******************************/
 1027 1ea6 961E0000 		_HEADER TEVAL,5,"'EVAL"
 1027      05274556 
 1027      414C
 1028 1eb0 47F8046D 		_PUSH
 1029 1eb4 04F13406 		ADD	TOS,UP,#EVAL
 1030 1eb8 66E4     		_NEXT
 1031              	
 1032              	/*********************************
 1033              	    HLD	 ( -- a )
 1034              	 	Hold a pointer in building a 
 1035              		numeric output string.
 1036              	*********************************/
 1037 1eba AA1E0000 		_HEADER HLD,3,"HLD"
 1037      03484C44 
 1037      00BF
 1038 1ec4 47F8046D 		_PUSH
 1039 1ec8 04F13806 		ADD	TOS,UP,#HOLD
 1040 1ecc 5CE4     		_NEXT
 1041              	
 1042              	/**********************************
 1043              	    CONTEXT	( -- a )
 1044              	 	A area to specify vocabulary 
 1045              		search order.
ARM GAS  forth.s 			page 88


 1046              	**********************************/
 1047 1ece BE1E0000 		_HEADER CNTXT,7,"CONTEXT"
 1047      07434F4E 
 1047      54455854 
 1047      00BF
 1048              	CRRNT:
 1049 1edc 47F8046D 		_PUSH
 1050 1ee0 04F13C06 		ADD	TOS,UP,#CTXT
 1051 1ee4 50E4     		_NEXT
 1052              	
 1053              	/******************************
 1054              	    CP	( -- a )
 1055              	 	Point to top name in RAM 
 1056              		vocabulary.
 1057              	******************************/
 1058 1ee6 D21E0000 		_HEADER CPP,2,"CP"
 1058      02435000 
 1058      00BF
 1059 1ef0 47F8046D 		_PUSH
 1060 1ef4 04F14406 		ADD	TOS,UP,#USER_CTOP
 1061 1ef8 46E4     		_NEXT
 1062              	
 1063              	/****************************
 1064              	   FCP ( -- a )
 1065              	  Point ot top of Forth 
 1066              	  system dictionary
 1067              	****************************/
 1068 1efa EA1E0000 		_HEADER FCP,3,"FCP"
 1068      03464350 
 1068      00BF
 1069 1f04 47F8046D 		_PUSH 
 1070 1f08 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1071 1f0c 3CE4     		_NEXT 
 1072              	
 1073              	/***************************
 1074              	    LAST	( -- a )
 1075              	 	Point to the last name 
 1076              		in the name dictionary.
 1077              	***************************/
 1078 1f0e FE1E0000 		_HEADER LAST,4,"LAST"
 1078      044C4153 
 1078      5400
 1079 1f18 47F8046D 		_PUSH
 1080 1f1c 04F14806 		ADD	TOS,UP,#LASTN
 1081 1f20 32E4     		_NEXT
 1082              	
 1083              	
 1084              	/***********************
 1085              		system constants 
 1086              	***********************/
 1087              	
 1088              	/********************************
 1089              		USER-BEGIN ( -- a )
 1090              	  where user area begin in RAM
 1091              	********************************/
 1092 1f22 121F0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1092      0A555345 
ARM GAS  forth.s 			page 89


 1092      522D4245 
 1092      47494E00 
 1092      00BF
 1093 1f34 47F8046D 		_PUSH 
 1094 1f38 004E     		ldr TOS,USR_BGN_ADR 
 1095 1f3a 25E4     		_NEXT 
 1096              	USR_BGN_ADR:
 1097 1f3c 12050020 	.word  DTOP 
 1098              	
 1099              	/*********************************
 1100              	  USER_END ( -- a )
 1101              	  where user area end in RAM 
 1102              	******************************/
 1103 1f40 261F0000 		_HEADER USER_END,8,"USER-END"
 1103      08555345 
 1103      522D454E 
 1103      440000BF 
 1104 1f50 47F8046D 		_PUSH 
 1105 1f54 004E     		ldr TOS,USER_END_ADR 
 1106 1f56 17E4     		_NEXT 
 1107              	USER_END_ADR:
 1108 1f58 FC800120 		.word DEND 
 1109              	
 1110              	
 1111              	/* *********************
 1112              	  Common functions
 1113              	***********************/
 1114              	
 1115              	/********************************
 1116              	    WITHIN	( u ul uh -- t )
 1117              	 	Return true if u is within 
 1118              		the range of ul and uh.
 1119              	********************************/
 1120 1f5c 441F0000 		_HEADER WITHI,6,"WITHIN"
 1120      06574954 
 1120      48494E00 
 1121 1f68 504700BF 		_NEST
 1122 1f6c 5D1A0000 		_ADR	OVER
 1123 1f70 0D1B0000 		_ADR	SUBB
 1124 1f74 E1190000 		_ADR	TOR
 1125 1f78 0D1B0000 		_ADR	SUBB
 1126 1f7c B9190000 		_ADR	RFROM
 1127 1f80 051D0000 		_ADR	ULESS
 1128 1f84 8F170000 		_UNNEST
 1129              	
 1130              	//  Divide
 1131              	
 1132              	/*************************************
 1133              	    UM/MOD	( udl udh u -- ur uq )
 1134              	 	Unsigned divide of a double by a 
 1135              		single. Return mod and quotient.
 1136              	**************************************/
 1137 1f88 601F0000 		_HEADER UMMOD,6,"UM/MOD"
 1137      06554D2F 
 1137      4D4F4400 
 1138 1f94 4FF00103 		MOV	T3,#1
 1139 1f98 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 90


 1140 1f9c 3A68     		LDR	T2,[DSP]
 1141              	UMMOD0:
 1142 1f9e 9218     		ADDS	T2,T2,T2
 1143 1fa0 6D41     		ADCS	WP,WP,WP
 1144 1fa2 04D3     		BCC	UMMOD1
 1145 1fa4 A5EB0605 		SUB	WP,WP,TOS
 1146 1fa8 02F10102 		ADD	T2,T2,#1
 1147 1fac 04E0     		B UMMOD2
 1148              	UMMOD1:
 1149 1fae AD1B     		SUBS	WP,WP,TOS 
 1150 1fb0 28BF     		IT CS 
 1151 1fb2 0132     		ADDCS	T2,T2,#1
 1152 1fb4 00D2     		BCS	UMMOD2
 1153 1fb6 3544     		ADD	WP,WP,TOS
 1154              	UMMOD2:
 1155 1fb8 DB18     		ADDS	T3,T3,T3
 1156 1fba F0D3     		BCC	UMMOD0
 1157 1fbc 1646     		MOV	TOS,T2
 1158 1fbe 3D60     		STR	WP,[DSP]
 1159 1fc0 FFF7E2BB 		_NEXT
 1160              	
 1161              	/****************************
 1162              	    M/MOD	( d n -- r q )
 1163              	 	Signed floored divide 
 1164              		of double by single. 
 1165              		Return mod and quotient.
 1166              	****************************/
 1167 1fc4 8C1F0000 		_HEADER MSMOD,5,"M/MOD"
 1167      054D2F4D 
 1167      4F4400BF 
 1168 1fd0 504700BF 		_NEST
 1169 1fd4 391A0000 		_ADR	DUPP
 1170 1fd8 6D1A0000 		_ADR	ZLESS
 1171 1fdc 391A0000 		_ADR	DUPP
 1172 1fe0 E1190000 		_ADR	TOR
 1173 1fe4 47190000 		_QBRAN MMOD1
 1173      FC1F0000 
 1174 1fec B51C0000 		_ADR	NEGAT
 1175 1ff0 E1190000 		_ADR	TOR
 1176 1ff4 D51D0000 		_ADR	DNEGA
 1177 1ff8 B9190000 		_ADR	RFROM
 1178              	MMOD1:
 1179 1ffc E1190000 		_ADR	TOR
 1180 2000 391A0000 		_ADR	DUPP
 1181 2004 6D1A0000 		_ADR	ZLESS
 1182 2008 47190000 		_QBRAN MMOD2
 1182      18200000 
 1183 2010 CD190000 		_ADR	RAT
 1184 2014 FD1A0000 		_ADR	PLUS
 1185              	MMOD2:
 1186 2018 B9190000 		_ADR	RFROM
 1187 201c 951F0000 		_ADR	UMMOD
 1188 2020 B9190000 		_ADR	RFROM
 1189 2024 47190000 		_QBRAN	MMOD3
 1189      38200000 
 1190 202c 491A0000 		_ADR	SWAP
 1191 2030 B51C0000 		_ADR	NEGAT
ARM GAS  forth.s 			page 91


 1192 2034 491A0000 		_ADR	SWAP
 1193              	MMOD3:   
 1194 2038 8F170000 		_UNNEST
 1195              	
 1196              	/****************************
 1197              	   /MOD	( n n -- r q )
 1198              		Signed divide. Return
 1199              		mod and quotient.
 1200              	****************************/
 1201 203c C81F0000 		_HEADER SLMOD,4,"/MOD"
 1201      042F4D4F 
 1201      440000BF 
 1202 2048 504700BF 		_NEST
 1203 204c 5D1A0000 		_ADR	OVER
 1204 2050 6D1A0000 		_ADR	ZLESS
 1205 2054 491A0000 		_ADR	SWAP
 1206 2058 D11F0000 		_ADR	MSMOD
 1207 205c 8F170000 		_UNNEST
 1208              	
 1209              	/**************************
 1210              	    MOD	 ( n n -- r )
 1211              	 	Signed divide. Return
 1212              		mod only.
 1213              	**************************/
 1214 2060 40200000 		_HEADER MODD,3,"MOD"
 1214      034D4F44 
 1215 2068 504700BF 		_NEST
 1216 206c 49200000 		_ADR	SLMOD
 1217 2070 291A0000 		_ADR	DROP
 1218 2074 8F170000 		_UNNEST
 1219              	
 1220              	/*************************
 1221              	    /	   ( n n -- q )
 1222              	 	Signed divide. Return
 1223              		quotient only.
 1224              	**************************/
 1225 2078 64200000 		_HEADER SLASH,1,"/"
 1225      012F00BF 
 1226 2080 504700BF 		_NEST
 1227 2084 49200000 		_ADR	SLMOD
 1228 2088 491A0000 		_ADR	SWAP
 1229 208c 291A0000 		_ADR	DROP
 1230 2090 8F170000 		_UNNEST
 1231              	
 1232              	//******************************
 1233              	//  */MOD	( n1 n2 n3 -- r q )
 1234              	/* 	Multiply n1 and n2, then 
 1235              		divide by n3. Return 
 1236              		mod and quotient.
 1237              	******************************/
 1238 2094 7C200000 		_HEADER SSMOD,5,"*/MOD"
 1238      052A2F4D 
 1238      4F4400BF 
 1239 20a0 504700BF 		_NEST
 1240 20a4 E1190000 		_ADR	TOR
 1241 20a8 451B0000 		_ADR	MSTAR
 1242 20ac B9190000 		_ADR	RFROM
ARM GAS  forth.s 			page 92


 1243 20b0 D11F0000 		_ADR	MSMOD
 1244 20b4 8F170000 		_UNNEST
 1245              	
 1246              	//*******************************
 1247              	//  */ ( n1 n2 n3 -- q )
 1248              	/* 	Multiply n1 by n2, then 
 1249              		divide by n3. Return quotient
 1250              		only.
 1251              	*******************************/
 1252 20b8 98200000 		_HEADER STASL,2,"*/"
 1252      022A2F00 
 1253 20c0 504700BF 		_NEST
 1254 20c4 A1200000 		_ADR	SSMOD
 1255 20c8 491A0000 		_ADR	SWAP
 1256 20cc 291A0000 		_ADR	DROP
 1257 20d0 8F170000 		_UNNEST
 1258              	
 1259              	/*******************
 1260              	  Miscellaneous
 1261              	*******************/
 1262              	
 1263              	/*************************
 1264              	    ALIGNED	( b -- a )
 1265              	 	Align address to the 
 1266              		cell boundary.
 1267              	**************************/
 1268 20d4 BC200000 		_HEADER ALGND,7,"ALIGNED"
 1268      07414C49 
 1268      474E4544 
 1269 20e0 06F10306 		ADD	TOS,TOS,#3
 1270 20e4 6FF00305 		MVN	WP,#3
 1271 20e8 06EA0506 		AND	TOS,TOS,WP
 1272 20ec FFF74CBB 		_NEXT
 1273              	
 1274              	/****************************
 1275              	    >CHAR	( c -- c )
 1276              	 	Filter non-printing 
 1277              		characters.
 1278              	****************************/
 1279 20f0 D8200000 		_HEADER TCHAR,5,">CHAR"
 1279      053E4348 
 1279      415200BF 
 1280 20fc 504700BF 		_NEST
 1281 2100 07190000 		_DOLIT  0x7F
 1281      7F000000 
 1282 2108 7D1A0000 		_ADR	ANDD
 1283 210c 391A0000 		_ADR	DUPP	// mask msb
 1284 2110 B91B0000 		_ADR	BLANK
 1285 2114 07190000 		_DOLIT 	127
 1285      7F000000 
 1286 211c 691F0000 		_ADR	WITHI	// check for printable
 1287 2120 A11C0000 		_ADR	INVER
 1288 2124 47190000 		_QBRAN	TCHA1
 1288      38210000 
 1289 212c 291A0000 		_ADR	DROP
 1290 2130 07190000 		_DOLIT 	'_'	// replace non-printables
 1290      5F000000 
ARM GAS  forth.s 			page 93


 1291              	TCHA1:
 1292 2138 8F170000 		  _UNNEST
 1293              	
 1294              	/************************
 1295              	    DEPTH	( -- n )
 1296              	 	Return the depth of
 1297              		the data stack.
 1298              	***********************/
 1299 213c F4200000 		_HEADER DEPTH,5,"DEPTH"
 1299      05444550 
 1299      544800BF 
 1300 2148 4FF47F42 		_MOV32 T2,SPP 
 1300      C2F20102 
 1301 2150 A2EB0702 		SUB	T2,T2,DSP
 1302 2154 47F8046D 		_PUSH
 1303 2158 4FEAA206 		ASR	TOS,T2,#2
 1304 215c FFF714BB 		_NEXT
 1305              	
 1306              	/*****************************
 1307              	    PICK	( ... +n -- ... w )
 1308              	 	Copy the nth stack item 
 1309              		to tos.
 1310              	******************************/
 1311 2160 40210000 		_HEADER PICK,4,"PICK"
 1311      04504943 
 1311      4B0000BF 
 1312 216c 504700BF 		_NEST
 1313 2170 591B0000 		_ADR	ONEP
 1314 2174 CD1B0000 		_ADR	CELLS
 1315 2178 151A0000 		_ADR	SPAT
 1316 217c FD1A0000 		_ADR	PLUS
 1317 2180 8D190000 		_ADR	AT
 1318 2184 8F170000 		_UNNEST
 1319              	
 1320              	/*********************
 1321              	  Memory access
 1322              	*********************/
 1323              	
 1324              	/*************************
 1325              	    HERE	( -- a )
 1326              	 	Return the top of
 1327              		the code dictionary.
 1328              	*************************/
 1329 2188 64210000 		_HEADER HERE,4,"HERE"
 1329      04484552 
 1329      450000BF 
 1330 2194 504700BF 		_NEST
 1331 2198 F11E0000 		_ADR	CPP
 1332 219c 8D190000 		_ADR	AT
 1333 21a0 8F170000 		_UNNEST
 1334              	
 1335              	/***************************	
 1336              	    PAD	 ( -- a )
 1337              	 	Return the address of 
 1338              		a temporary buffer.
 1339              	***************************/
 1340 21a4 8C210000 		_HEADER PAD,3,"PAD"
ARM GAS  forth.s 			page 94


 1340      03504144 
 1341 21ac 504700BF 		_NEST
 1342 21b0 95210000 		_ADR	HERE
 1343 21b4 07190000 		_DOLIT 80
 1343      50000000 
 1344 21bc FD1A0000 		_ADR PLUS 
 1345 21c0 8F170000 		_UNNEST
 1346              	
 1347              	/***********************
 1348              	    TIB	 ( -- a )
 1349              	 	Return the address 
 1350              		of the terminal 
 1351              		input buffer.
 1352              	************************/
 1353 21c4 A8210000 		_HEADER TIB,3,"TIB"
 1353      03544942 
 1354 21cc 47F8046D 		_PUSH
 1355 21d0 266B     		ldr TOS,[UP,#TIBUF]
 1356 21d2 FFF7D9BA 		_NEXT
 1357              	
 1358              	/*************************
 1359              	    @EXECUTE	( a -- )
 1360              	 	Execute vector stored
 1361              		in address a.
 1362              	*************************/
 1363 21d6 C8210000 		_HEADER ATEXE,8,"@EXECUTE"
 1363      08404558 
 1363      45435554 
 1363      4500
 1364 21e4 3500     		MOVS	WP,TOS
 1365 21e6 57F8046B 		_POP
 1366 21ea 2D68     		LDR	WP,[WP]
 1367 21ec 45F00105 		ORR	WP,WP,#1
 1368 21f0 18BF     	    IT NE 
 1369 21f2 2847     		BXNE	WP
 1370 21f4 FFF7C8BA 		_NEXT
 1371              	
 1372              	/*******************************
 1373              	    CMOVE	( b1 b2 u -- )
 1374              	 	Copy u bytes from b1 to b2.
 1375              	********************************/
 1376 21f8 DA210000 		_HEADER CMOVE,5,"CMOVE"
 1376      05434D4F 
 1376      564500BF 
 1377 2204 57F8042B 		LDR	T2,[DSP],#4
 1378 2208 57F8043B 		LDR	T3,[DSP],#4
 1379 220c 03E0     		B CMOV1
 1380              	CMOV0:
 1381 220e 13F8015B 		LDRB	WP,[T3],#1
 1382 2212 02F8015B 		STRB	WP,[T2],#1
 1383              	CMOV1:
 1384 2216 3600     		MOVS	TOS,TOS
 1385 2218 02D0     		BEQ	CMOV2
 1386 221a A6F10106 		SUB	TOS,TOS,#1
 1387 221e F6E7     		B CMOV0
 1388              	CMOV2:
 1389 2220 57F8046B 		_POP
ARM GAS  forth.s 			page 95


 1390 2224 FFF7B0BA 		_NEXT
 1391              	
 1392              	/***************************
 1393              	    MOVE	( a1 a2 u -- )
 1394              	 	Copy u words from a1 to a2.
 1395              	*******************************/
 1396 2228 FC210000 		_HEADER MOVE,4,"MOVE"
 1396      044D4F56 
 1396      450000BF 
 1397 2234 4FF00400 		MOV T0,#4 
 1398 2238 06F10306 		ADD TOS,#3 
 1399 223c 26F00306 		BIC TOS,#3
 1400 2240 57F8041B 		LDR	T1,[DSP],#4 // dest
 1401 2244 57F8042B 		LDR	T2,[DSP],#4 // src 
 1402 2248 8A42     		CMP T2,T1 
 1403 224a 08D5     		BPL MOVE1
 1404 224c 6FF00300 		MOV T0,#-4 
 1405 2250 3144     		ADD T1,TOS
 1406 2252 3244     		ADD T2,TOS 
 1407 2254 01E0     		B MOVE3
 1408              	MOVE0:
 1409 2256 1568     		LDR	WP,[T2]
 1410 2258 0D60     		STR	WP,[T1]
 1411              	MOVE3: 
 1412 225a 0144     		ADD T1,T0 
 1413 225c 0244     		ADD T2,T0 
 1414              	MOVE1:
 1415 225e 3600     		MOVS TOS,TOS
 1416 2260 02D0     		BEQ	MOVE2
 1417 2262 A6F10406 		SUB	TOS,TOS,#4
 1418 2266 F6E7     		B MOVE0
 1419              	MOVE2:
 1420 2268 57F8046B 		_POP
 1421 226c FFF78CBA 		_NEXT
 1422              	
 1423              	/**************************
 1424              	    FILL	( b u c -- )
 1425              	 	Fill u bytes of character
 1426              		c to area beginning at b.
 1427              	******************************/
 1428 2270 2C220000 		_HEADER FILL,4,"FILL"
 1428      0446494C 
 1428      4C0000BF 
 1429 227c 03CF     		LDMFD DSP!,{T0,T1} 
 1430 227e 0000     		MOVS T0,T0 
 1431 2280 03D0     		BEQ FILL2
 1432              	FILL1:
 1433 2282 01F8016B 		STRB	TOS,[T1],#1
 1434 2286 0138     		SUBS	T0,T0,#1
 1435 2288 FBD1     		BNE FILL1
 1436              	FILL2:
 1437 228a 57F8046B 		_POP
 1438 228e FFF77BBA 		_NEXT
 1439              	
 1440              	/*****************************
 1441              	    PACK$	( b u a -- a )
 1442              	 	Build a counted word with
ARM GAS  forth.s 			page 96


 1443              		u characters from b. 
 1444              		Null fill.
 1445              	*****************************/
 1446 2292 74220000 		_HEADER PACKS,5,"PACK$"
 1446      05504143 
 1446      4B24
 1447 229c 504700BF 		_NEST
 1448 22a0 E1200000 		_ADR	ALGND
 1449 22a4 391A0000 		_ADR	DUPP
 1450 22a8 E1190000 		_ADR	TOR			// strings only on cell boundary
 1451 22ac 5D1A0000 		_ADR	OVER
 1452 22b0 FD1A0000 		_ADR	PLUS
 1453 22b4 591B0000 		_ADR	ONEP
 1454 22b8 07190000 		_DOLIT 	0xFFFFFFFC
 1454      FCFFFFFF 
 1455 22c0 7D1A0000 		_ADR	ANDD			// count mod cell
 1456 22c4 07190000 		_DOLIT 	0
 1456      00000000 
 1457 22cc 491A0000 		_ADR	SWAP
 1458 22d0 79190000 		_ADR	STORE			// null fill cell
 1459 22d4 CD190000 		_ADR	RAT
 1460 22d8 711C0000 		_ADR	DDUP
 1461 22dc 99190000 		_ADR	CSTOR
 1462 22e0 591B0000 		_ADR	ONEP			// save count
 1463 22e4 491A0000 		_ADR	SWAP
 1464 22e8 05220000 		_ADR	CMOVE
 1465 22ec B9190000 		_ADR	RFROM
 1466 22f0 8F170000 		_UNNEST   			// move string
 1467              	
 1468              	/***********************************
 1469              	  Numeric output, single precision
 1470              	***********************************/
 1471              	
 1472              	/**************************
 1473              	    DIGIT	( u -- c )
 1474              	 	Convert digit u to 
 1475              		a character.
 1476              	***************************/
 1477 22f4 96220000 		_HEADER DIGIT,5,"DIGIT"
 1477      05444947 
 1477      495400BF 
 1478 2300 504700BF 		_NEST
 1479 2304 07190000 		_DOLIT 9
 1479      09000000 
 1480 230c 5D1A0000 		_ADR	OVER
 1481 2310 1D1D0000 		_ADR	LESS
 1482 2314 07190000 		_DOLIT	7
 1482      07000000 
 1483 231c 7D1A0000 		_ADR	ANDD
 1484 2320 FD1A0000 		_ADR	PLUS
 1485 2324 07190000 		_DOLIT	'0'
 1485      30000000 
 1486 232c FD1A0000 		_ADR	PLUS 
 1487 2330 8F170000 		_UNNEST
 1488              	
 1489              	/*********************************
 1490              	    EXTRACT	( n base -- n c )
ARM GAS  forth.s 			page 97


 1491              	 	Extract the least significant
 1492              		digit from n.
 1493              	**********************************/
 1494 2334 F8220000 		_HEADER EXTRC,7,"EXTRACT"
 1494      07455854 
 1494      52414354 
 1495 2340 504700BF 		_NEST
 1496 2344 07190000 		_DOLIT 0
 1496      00000000 
 1497 234c 491A0000 		_ADR	SWAP
 1498 2350 951F0000 		_ADR	UMMOD
 1499 2354 491A0000 		_ADR	SWAP
 1500 2358 01230000 		_ADR	DIGIT
 1501 235c 8F170000 		_UNNEST
 1502              	
 1503              	/***************************
 1504              	    <#	  ( -- )
 1505              	 	Initiate the numeric
 1506              		output process.
 1507              	****************************/
 1508 2360 38230000 		_HEADER BDIGS,2,"<#"
 1508      023C2300 
 1509 2368 504700BF 		_NEST
 1510 236c AD210000 		_ADR	PAD
 1511 2370 C51E0000 		_ADR	HLD
 1512 2374 79190000 		_ADR	STORE
 1513 2378 8F170000 		_UNNEST
 1514              	
 1515              	/*********************************
 1516              	    HOLD	( c -- )
 1517              	 	Insert a character into the 
 1518              		numeric output string.
 1519              	**********************************/
 1520 237c 64230000 		_HEADER HOLD,4,"HOLD"
 1520      04484F4C 
 1520      440000BF 
 1521 2388 504700BF 		_NEST
 1522 238c C51E0000 		_ADR	HLD
 1523 2390 8D190000 		_ADR	AT
 1524 2394 691B0000 		_ADR	ONEM
 1525 2398 391A0000 		_ADR	DUPP
 1526 239c C51E0000 		_ADR	HLD
 1527 23a0 79190000 		_ADR	STORE
 1528 23a4 99190000 		_ADR	CSTOR
 1529 23a8 8F170000 		_UNNEST
 1530              	
 1531              	/***********************
 1532              	    #	   ( u -- u )
 1533              	 	Extract one digit 
 1534              		from u and append 
 1535              		the digit to output 
 1536              		string.
 1537              	*************************/
 1538 23ac 80230000 		_HEADER DIG,1,"#"
 1538      012300BF 
 1539 23b4 504700BF 		_NEST
 1540 23b8 551E0000 		_ADR	BASE
ARM GAS  forth.s 			page 98


 1541 23bc 8D190000 		_ADR	AT
 1542 23c0 41230000 		_ADR	EXTRC
 1543 23c4 89230000 		_ADR	HOLD
 1544 23c8 8F170000 		_UNNEST
 1545              	
 1546              	/***************************
 1547              	    #S	  ( u -- 0 )
 1548              	 	Convert u until all 
 1549              		digits are added to 
 1550              		the output string.
 1551              	***************************/
 1552 23cc B0230000 		_HEADER DIGS,2,"#S"
 1552      02235300 
 1553 23d4 504700BF 		_NEST
 1554              	DIGS1:
 1555 23d8 B5230000 	    _ADR	DIG
 1556 23dc 391A0000 		_ADR	DUPP
 1557 23e0 47190000 		_QBRAN 	DIGS2
 1557      F0230000 
 1558 23e8 5B190000 		_BRAN	DIGS1
 1558      D8230000 
 1559              	DIGS2:
 1560 23f0 8F170000 		  _UNNEST
 1561              	
 1562              	/*********************
 1563              	    SIGN	( n -- )
 1564              	 	Add a minus sign
 1565              		to the numeric
 1566              		output string.
 1567              	*********************/
 1568 23f4 D0230000 		_HEADER SIGN,4,"SIGN"
 1568      04534947 
 1568      4E0000BF 
 1569 2400 504700BF 		_NEST
 1570 2404 6D1A0000 		_ADR	ZLESS
 1571 2408 47190000 		_QBRAN	SIGN1
 1571      1C240000 
 1572 2410 07190000 		_DOLIT '-'
 1572      2D000000 
 1573 2418 89230000 		_ADR	HOLD
 1574              	SIGN1:
 1575 241c 8F170000 		  _UNNEST
 1576              	
 1577              	/*************************
 1578              	    #>  ( w -- b u )
 1579              	 	Prepare the output 
 1580              		word to be TYPE'd.
 1581              	************************/
 1582 2420 F8230000 		_HEADER EDIGS,2,"#>"
 1582      02233E00 
 1583 2428 504700BF 		_NEST
 1584 242c 291A0000 		_ADR	DROP
 1585 2430 C51E0000 		_ADR	HLD
 1586 2434 8D190000 		_ADR	AT
 1587 2438 AD210000 		_ADR	PAD
 1588 243c 5D1A0000 		_ADR	OVER
 1589 2440 0D1B0000 		_ADR	SUBB
ARM GAS  forth.s 			page 99


 1590 2444 8F170000 		_UNNEST
 1591              	
 1592              	/**************************
 1593              	    str	 ( n -- b u )
 1594              	 	Convert a signed 
 1595              		integer to a numeric 
 1596              		string.
 1597              	hidden word used by compiler
 1598              	***************************/
 1599              	STRR:
 1600 2448 504700BF 		_NEST
 1601 244c 391A0000 		_ADR	DUPP
 1602 2450 E1190000 		_ADR	TOR
 1603 2454 C51C0000 		_ADR	ABSS
 1604 2458 69230000 		_ADR	BDIGS
 1605 245c D5230000 		_ADR	DIGS
 1606 2460 B9190000 		_ADR	RFROM
 1607 2464 01240000 		_ADR	SIGN
 1608 2468 29240000 		_ADR	EDIGS
 1609 246c 8F170000 		_UNNEST
 1610              	
 1611              	/*************************
 1612              	    HEX	 ( -- )
 1613              	 	Use radix 16 as 
 1614              		base for numeric 
 1615              		conversions.
 1616              	*************************/
 1617 2470 24240000 		_HEADER HEX,3,"HEX"
 1617      03484558 
 1618 2478 504700BF 		_NEST
 1619 247c 07190000 		_DOLIT 16
 1619      10000000 
 1620 2484 551E0000 		_ADR	BASE
 1621 2488 79190000 		_ADR	STORE
 1622 248c 8F170000 		_UNNEST
 1623              	
 1624              	/************************
 1625              	    DECIMAL	( -- )
 1626              	 	Use radix 10 as base
 1627              		for numeric conversions.
 1628              	*************************/
 1629 2490 74240000 		_HEADER DECIM,7,"DECIMAL"
 1629      07444543 
 1629      494D414C 
 1630 249c 504700BF 		_NEST
 1631 24a0 07190000 		_DOLIT 10
 1631      0A000000 
 1632 24a8 551E0000 		_ADR	BASE
 1633 24ac 79190000 		_ADR	STORE
 1634 24b0 8F170000 		_UNNEST
 1635              	
 1636              	/************************************
 1637              	  Numeric input, single precision
 1638              	***********************************/
 1639              	
 1640              	/***********************************
 1641              	    DIGIT?	( c base -- u t )
ARM GAS  forth.s 			page 100


 1642              	 	Convert a character to its 
 1643              		numeric value. A flag 
 1644              		indicates success.
 1645              	**********************************/
 1646 24b4 94240000 		_HEADER DIGTQ,6,"DIGIT?"
 1646      06444947 
 1646      49543F00 
 1647 24c0 504700BF 		_NEST
 1648 24c4 E1190000 		_ADR	TOR
 1649 24c8 07190000 		_DOLIT 	'0'
 1649      30000000 
 1650 24d0 0D1B0000 		_ADR	SUBB
 1651 24d4 07190000 		_DOLIT 9
 1651      09000000 
 1652 24dc 5D1A0000 		_ADR	OVER
 1653 24e0 1D1D0000 		_ADR	LESS
 1654 24e4 47190000 		_QBRAN	DGTQ1
 1654      0C250000 
 1655 24ec 07190000 		_DOLIT 7
 1655      07000000 
 1656 24f4 0D1B0000 		_ADR	SUBB
 1657 24f8 391A0000 		_ADR	DUPP
 1658 24fc 07190000 		_DOLIT	10
 1658      0A000000 
 1659 2504 1D1D0000 		_ADR	LESS
 1660 2508 911A0000 		_ADR	ORR
 1661              	DGTQ1:
 1662 250c 391A0000 		_ADR	DUPP
 1663 2510 B9190000 		_ADR	RFROM
 1664 2514 051D0000 		_ADR	ULESS
 1665 2518 8F170000 		_UNNEST
 1666              	
 1667              	/**********************************
 1668              	    NUMBER?	( a -- n T | a F )
 1669              	 	Convert a number word to 
 1670              		integer. Push a flag on tos.
 1671              	**********************************/
 1672 251c B8240000 		_HEADER NUMBQ,7,"NUMBER?"
 1672      074E554D 
 1672      4245523F 
 1673 2528 504700BF 		_NEST
 1674 252c 551E0000 		_ADR	BASE
 1675 2530 8D190000 		_ADR	AT
 1676 2534 E1190000 		_ADR	TOR
 1677 2538 07190000 		_DOLIT	0
 1677      00000000 
 1678 2540 5D1A0000 		_ADR	OVER
 1679 2544 BD1D0000 		_ADR	COUNT
 1680 2548 5D1A0000 		_ADR	OVER
 1681 254c AD190000 		_ADR	CAT
 1682 2550 07190000 		_DOLIT '$'
 1682      24000000 
 1683 2558 ED1C0000 		_ADR	EQUAL
 1684 255c 47190000 		_QBRAN	NUMQ1
 1684      78250000 
 1685 2564 79240000 		_ADR	HEX
 1686 2568 491A0000 		_ADR	SWAP
ARM GAS  forth.s 			page 101


 1687 256c 591B0000 		_ADR	ONEP
 1688 2570 491A0000 		_ADR	SWAP
 1689 2574 691B0000 		_ADR	ONEM
 1690              	NUMQ1:
 1691 2578 5D1A0000 		_ADR	OVER
 1692 257c AD190000 		_ADR	CAT
 1693 2580 07190000 		_DOLIT	'-'
 1693      2D000000 
 1694 2588 ED1C0000 		_ADR	EQUAL
 1695 258c E1190000 		_ADR	TOR
 1696 2590 491A0000 		_ADR	SWAP
 1697 2594 CD190000 		_ADR	RAT
 1698 2598 0D1B0000 		_ADR	SUBB
 1699 259c 491A0000 		_ADR	SWAP
 1700 25a0 CD190000 		_ADR	RAT
 1701 25a4 FD1A0000 		_ADR	PLUS
 1702 25a8 0D1C0000 		_ADR	QDUP
 1703 25ac 47190000 		_QBRAN	NUMQ6
 1703      40260000 
 1704 25b4 691B0000 		_ADR	ONEM
 1705 25b8 E1190000 		_ADR	TOR
 1706              	NUMQ2:
 1707 25bc 391A0000 		_ADR	DUPP
 1708 25c0 E1190000 		_ADR	TOR
 1709 25c4 AD190000 		_ADR	CAT
 1710 25c8 551E0000 		_ADR	BASE
 1711 25cc 8D190000 		_ADR	AT
 1712 25d0 C1240000 		_ADR	DIGTQ
 1713 25d4 47190000 		_QBRAN	NUMQ4
 1713      24260000 
 1714 25dc 491A0000 		_ADR	SWAP
 1715 25e0 551E0000 		_ADR	BASE
 1716 25e4 8D190000 		_ADR	AT
 1717 25e8 1D1B0000 		_ADR	STAR
 1718 25ec FD1A0000 		_ADR	PLUS
 1719 25f0 B9190000 		_ADR	RFROM
 1720 25f4 591B0000 		_ADR	ONEP
 1721 25f8 29190000 		_DONXT	NUMQ2
 1721      BC250000 
 1722 2600 CD190000 		_ADR	RAT
 1723 2604 491A0000 		_ADR	SWAP
 1724 2608 291A0000 		_ADR	DROP
 1725 260c 47190000 		_QBRAN	NUMQ3
 1725      18260000 
 1726 2614 B51C0000 		_ADR	NEGAT
 1727              	NUMQ3:
 1728 2618 491A0000 		_ADR	SWAP
 1729 261c 5B190000 		_BRAN	NUMQ5
 1729      3C260000 
 1730              	NUMQ4:
 1731 2624 B9190000 		_ADR	RFROM
 1732 2628 B9190000 		_ADR	RFROM
 1733 262c 491C0000 		_ADR	DDROP
 1734 2630 491C0000 		_ADR	DDROP
 1735 2634 07190000 		_DOLIT	0
 1735      00000000 
 1736              	NUMQ5:
ARM GAS  forth.s 			page 102


 1737 263c 391A0000 		_ADR	DUPP
 1738              	NUMQ6:
 1739 2640 B9190000 		_ADR	RFROM
 1740 2644 491C0000 		_ADR	DDROP
 1741 2648 B9190000 		_ADR	RFROM
 1742 264c 551E0000 		_ADR	BASE
 1743 2650 79190000 		_ADR	STORE
 1744 2654 8F170000 		_UNNEST
 1745              	
 1746              	/********************
 1747              	  console I/O
 1748              	********************/
 1749              	
 1750              	/**********************
 1751              	    SPACE	( -- )
 1752              	 	Send the blank 
 1753              		character to 
 1754              		the output device.
 1755              	************************/
 1756 2658 20250000 		_HEADER SPACE,5,"SPACE"
 1756      05535041 
 1756      434500BF 
 1757 2664 504700BF 		_NEST
 1758 2668 B91B0000 		_ADR	BLANK
 1759 266c 11180000 		_ADR	EMIT
 1760 2670 8F170000 		_UNNEST
 1761              	
 1762              	/***************************
 1763              	    SPACES	( +n -- )
 1764              	 	Send n spaces to the 
 1765              		output device.
 1766              	****************************/
 1767 2674 5C260000 		_HEADER SPACS,6,"SPACES"
 1767      06535041 
 1767      43455300 
 1768 2680 504700BF 		_NEST
 1769 2684 07190000 		_DOLIT	0
 1769      00000000 
 1770 268c 4D1D0000 		_ADR	MAX
 1771 2690 E1190000 		_ADR	TOR
 1772 2694 5B190000 		_BRAN	CHAR2
 1772      A0260000 
 1773              	CHAR1:
 1774 269c 65260000 		_ADR	SPACE
 1775              	CHAR2:
 1776 26a0 29190000 		_DONXT	CHAR1
 1776      9C260000 
 1777 26a8 8F170000 		_UNNEST
 1778              	
 1779              	/***********************
 1780              	    TYPE	( b u -- )
 1781              	 	Output u characters 
 1782              		from b.
 1783              	************************/
 1784 26ac 78260000 		_HEADER TYPEE,4,"TYPE"
 1784      04545950 
 1784      450000BF 
ARM GAS  forth.s 			page 103


 1785 26b8 504700BF 		_NEST
 1786 26bc E1190000 		_ADR  TOR   // ( a+1 -- R: u )
 1787 26c0 5B190000 		_BRAN	TYPE2
 1787      D4260000 
 1788              	TYPE1:  
 1789 26c8 BD1D0000 		_ADR  COUNT
 1790 26cc FD200000 		_ADR TCHAR
 1791 26d0 11180000 		_ADR EMIT
 1792              	TYPE2:  
 1793 26d4 29190000 		_DONXT	TYPE1
 1793      C8260000 
 1794 26dc 291A0000 		_ADR	DROP
 1795 26e0 8F170000 		_UNNEST
 1796              	
 1797              	/***************************
 1798              	    CR	  ( -- )
 1799              	 	Output a carriage return
 1800              		and a line feed.
 1801              	****************************/
 1802 26e4 B0260000 		_HEADER CR,2,"CR"
 1802      02435200 
 1803 26ec 504700BF 		_NEST
 1804 26f0 07190000 		_DOLIT	CRR
 1804      0D000000 
 1805 26f8 11180000 		_ADR	EMIT
 1806 26fc 07190000 		_DOLIT	LF
 1806      0A000000 
 1807 2704 11180000 		_ADR	EMIT
 1808 2708 8F170000 		_UNNEST
 1809              	
 1810              	/******************************************
 1811              	  do_$	( -- a )
 1812              	  Return the address of a compiled string.
 1813              	  adjust return address to skip over it.
 1814              	hidden word used by compiler. 
 1815              	******************************************/
 1816              	DOSTR:
 1817 270c 504700BF 		_NEST     
 1818              	/* compiled string address is 2 levels deep */
 1819 2710 B9190000 		_ADR	RFROM	// { -- a1 }
 1820 2714 B9190000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1821 2718 391A0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1822 271c BD1D0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1823 2720 FD1A0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1824 2724 E1200000 		_ADR	ALGND	//  end of string
 1825              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1826 2728 E1190000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1827 272c 491A0000 		_ADR	SWAP	//  count tugged
 1828 2730 E1190000 		_ADR	TOR     //  ( -- a2) is string address
 1829 2734 8F170000 		_UNNEST
 1830              	
 1831              	/******************************************
 1832              	    $"|	( -- a )
 1833              	 	Run time routine compiled by _". 
 1834              		Return address of a compiled string.
 1835              	hidden word used by compiler
 1836              	*****************************************/
ARM GAS  forth.s 			page 104


 1837              	STRQP:
 1838 2738 504700BF 		_NEST
 1839 273c 0D270000 		_ADR	DOSTR
 1840 2740 8F170000 		_UNNEST			// force a call to dostr
 1841              	
 1842              	/*******************************
 1843              	    .$	( a -- )
 1844              	 	Run time routine of ." 
 1845              		Output a compiled string.
 1846              	hidden word used by compiler
 1847              	*******************************/
 1848              	DOTST:
 1849 2744 504700BF 		_NEST
 1850 2748 BD1D0000 		_ADR	COUNT // ( -- a+1 c )
 1851 274c B9260000 		_ADR	TYPEE
 1852 2750 8F170000 		_UNNEST
 1853              	
 1854              	/**********************
 1855              	    ."|	( -- )
 1856              	 	Run time routine of ." 
 1857              		Output a compiled string.
 1858              	hidden word used by compiler
 1859              	*****************************/
 1860              	DOTQP:
 1861 2754 504700BF 		_NEST
 1862 2758 0D270000 		_ADR	DOSTR
 1863 275c 45270000 		_ADR	DOTST
 1864 2760 8F170000 		_UNNEST
 1865              	
 1866              	/******************************
 1867              	    .R	  ( n +n -- )
 1868              	 	Display an integer in a 
 1869              		field of n columns, 
 1870              		right justified.
 1871              	*******************************/
 1872 2764 E8260000 		_HEADER DOTR,2,".R"
 1872      022E5200 
 1873 276c 504700BF 		_NEST
 1874 2770 E1190000 		_ADR	TOR
 1875 2774 49240000 		_ADR	STRR
 1876 2778 B9190000 		_ADR	RFROM
 1877 277c 5D1A0000 		_ADR	OVER
 1878 2780 0D1B0000 		_ADR	SUBB
 1879 2784 81260000 		_ADR	SPACS
 1880 2788 B9260000 		_ADR	TYPEE
 1881 278c 8F170000 		_UNNEST
 1882              	
 1883              	/*************************
 1884              	    U.R	 ( u +n -- )
 1885              	 	Display an unsigned 
 1886              		integer in n column, 
 1887              		right justified.
 1888              	***************************/
 1889 2790 68270000 		_HEADER UDOTR,3,"U.R"
 1889      03552E52 
 1890 2798 504700BF 		_NEST
 1891 279c E1190000 		_ADR	TOR
ARM GAS  forth.s 			page 105


 1892 27a0 69230000 		_ADR	BDIGS
 1893 27a4 D5230000 		_ADR	DIGS
 1894 27a8 29240000 		_ADR	EDIGS
 1895 27ac B9190000 		_ADR	RFROM
 1896 27b0 5D1A0000 		_ADR	OVER
 1897 27b4 0D1B0000 		_ADR	SUBB
 1898 27b8 81260000 		_ADR	SPACS
 1899 27bc B9260000 		_ADR	TYPEE
 1900 27c0 8F170000 		_UNNEST
 1901              	
 1902              	/************************
 1903              	    U.	  ( u -- )
 1904              	 	Display an unsigned 
 1905              		integer in free format.
 1906              	***************************/
 1907 27c4 94270000 		_HEADER UDOT,2,"U."
 1907      02552E00 
 1908 27cc 504700BF 		_NEST
 1909 27d0 69230000 		_ADR	BDIGS
 1910 27d4 D5230000 		_ADR	DIGS
 1911 27d8 29240000 		_ADR	EDIGS
 1912 27dc 65260000 		_ADR	SPACE
 1913 27e0 B9260000 		_ADR	TYPEE
 1914 27e4 8F170000 		_UNNEST
 1915              	
 1916              	/************************
 1917              	    .	   ( w -- )
 1918              	 	Display an integer 
 1919              		in free format, 
 1920              		preceeded by a space.
 1921              	**************************/
 1922 27e8 C8270000 		_HEADER DOT,1,"."
 1922      012E00BF 
 1923 27f0 504700BF 		_NEST
 1924 27f4 551E0000 		_ADR	BASE
 1925 27f8 8D190000 		_ADR	AT
 1926 27fc 07190000 		_DOLIT 10
 1926      0A000000 
 1927 2804 A51A0000 		_ADR	XORR			// ?decimal
 1928 2808 47190000 		_QBRAN	DOT1
 1928      18280000 
 1929 2810 CD270000 		_ADR	UDOT
 1930 2814 8F170000 		_UNNEST			// no,display unsigned
 1931              	DOT1:
 1932 2818 49240000 	    _ADR	STRR
 1933 281c 65260000 		_ADR	SPACE
 1934 2820 B9260000 		_ADR	TYPEE
 1935 2824 8F170000 		_UNNEST			// yes, display signed
 1936              	
 1937              	/***********************
 1938              	    ?	   ( a -- )
 1939              	 	Display the contents
 1940              		in a memory cell.
 1941              	*************************/
 1942 2828 EC270000 		_HEADER QUEST,1,"?"
 1942      013F00BF 
 1943 2830 504700BF 		_NEST
ARM GAS  forth.s 			page 106


 1944 2834 8D190000 		_ADR	AT
 1945 2838 F1270000 		_ADR	DOT
 1946 283c 8F170000 		_UNNEST
 1947              	
 1948              	/**************
 1949              	  Parsing
 1950              	***************/
 1951              	
 1952              	/*********************************************
 1953              	    parse	( b u c -- b u delta //  string> )
 1954              	 	Scan word delimited by c. 
 1955              		Return found string and its offset.
 1956              	hidden word used by PARSE
 1957              	**********************************************/
 1958              	PARS:
 1959 2840 504700BF 		_NEST
 1960 2844 5F1E0000 		_ADR	TEMP
 1961 2848 79190000 		_ADR	STORE
 1962 284c 5D1A0000 		_ADR	OVER
 1963 2850 E1190000 		_ADR	TOR
 1964 2854 391A0000 		_ADR	DUPP
 1965 2858 47190000 		_QBRAN	PARS8
 1965      54290000 
 1966 2860 691B0000 		_ADR	ONEM
 1967 2864 5F1E0000 		_ADR	TEMP
 1968 2868 8D190000 		_ADR	AT
 1969 286c B91B0000 		_ADR	BLANK
 1970 2870 ED1C0000 		_ADR	EQUAL
 1971 2874 47190000 		_QBRAN	PARS3
 1971      C8280000 
 1972 287c E1190000 		_ADR	TOR
 1973              	PARS1:
 1974 2880 B91B0000 		_ADR	BLANK
 1975 2884 5D1A0000 		_ADR	OVER
 1976 2888 AD190000 		_ADR	CAT			// skip leading blanks 
 1977 288c 0D1B0000 		_ADR	SUBB
 1978 2890 6D1A0000 		_ADR	ZLESS
 1979 2894 A11C0000 		_ADR	INVER
 1980 2898 47190000 		_QBRAN	PARS2
 1980      C4280000 
 1981 28a0 591B0000 		_ADR	ONEP
 1982 28a4 29190000 		_DONXT	PARS1
 1982      80280000 
 1983 28ac B9190000 		_ADR	RFROM
 1984 28b0 291A0000 		_ADR	DROP
 1985 28b4 07190000 		_DOLIT	0
 1985      00000000 
 1986 28bc 391A0000 		_ADR	DUPP
 1987 28c0 8F170000 		_UNNEST
 1988              	PARS2:
 1989 28c4 B9190000 		_ADR	RFROM
 1990              	PARS3:
 1991 28c8 5D1A0000 		_ADR	OVER
 1992 28cc 491A0000 		_ADR	SWAP
 1993 28d0 E1190000 		_ADR	TOR
 1994              	PARS4:
 1995 28d4 5F1E0000 		_ADR	TEMP
ARM GAS  forth.s 			page 107


 1996 28d8 8D190000 		_ADR	AT
 1997 28dc 5D1A0000 		_ADR	OVER
 1998 28e0 AD190000 		_ADR	CAT
 1999 28e4 0D1B0000 		_ADR	SUBB			// scan for delimiter
 2000 28e8 5F1E0000 		_ADR	TEMP
 2001 28ec 8D190000 		_ADR	AT
 2002 28f0 B91B0000 		_ADR	BLANK
 2003 28f4 ED1C0000 		_ADR	EQUAL
 2004 28f8 47190000 		_QBRAN	PARS5
 2004      04290000 
 2005 2900 6D1A0000 		_ADR	ZLESS
 2006              	PARS5:
 2007 2904 47190000 		_QBRAN	PARS6
 2007      28290000 
 2008 290c 591B0000 		_ADR	ONEP
 2009 2910 29190000 		_DONXT	PARS4
 2009      D4280000 
 2010 2918 391A0000 		_ADR	DUPP
 2011 291c E1190000 		_ADR	TOR
 2012 2920 5B190000 		_BRAN	PARS7
 2012      3C290000 
 2013              	PARS6:
 2014 2928 B9190000 		_ADR	RFROM
 2015 292c 291A0000 		_ADR	DROP
 2016 2930 391A0000 		_ADR	DUPP
 2017 2934 591B0000 		_ADR	ONEP
 2018 2938 E1190000 		_ADR	TOR
 2019              	PARS7:
 2020 293c 5D1A0000 		_ADR	OVER
 2021 2940 0D1B0000 		_ADR	SUBB
 2022 2944 B9190000 		_ADR	RFROM
 2023 2948 B9190000 		_ADR	RFROM
 2024 294c 0D1B0000 		_ADR	SUBB
 2025 2950 8F170000 		_UNNEST
 2026              	PARS8:
 2027 2954 5D1A0000 		_ADR	OVER
 2028 2958 B9190000 		_ADR	RFROM
 2029 295c 0D1B0000 		_ADR	SUBB
 2030 2960 8F170000 		_UNNEST
 2031              	
 2032              	/************************************
 2033              	    PARSE	( c -- b u //  string> )
 2034              	 	Scan input stream and return 
 2035              		counted string delimited by c.
 2036              	************************************/
 2037 2964 2C280000 		_HEADER PARSE,5,"PARSE"
 2037      05504152 
 2037      534500BF 
 2038 2970 504700BF 		_NEST
 2039 2974 E1190000 		_ADR	TOR
 2040 2978 CD210000 		_ADR	TIB
 2041 297c 891E0000 		_ADR	INN
 2042 2980 8D190000 		_ADR	AT
 2043 2984 FD1A0000 		_ADR	PLUS			// current input buffer pointer
 2044 2988 9D1E0000 		_ADR	NTIB
 2045 298c 8D190000 		_ADR	AT
 2046 2990 891E0000 		_ADR	INN
ARM GAS  forth.s 			page 108


 2047 2994 8D190000 		_ADR	AT
 2048 2998 0D1B0000 		_ADR	SUBB			// remaining count
 2049 299c B9190000 		_ADR	RFROM
 2050 29a0 41280000 		_ADR	PARS
 2051 29a4 891E0000 		_ADR	INN
 2052 29a8 751D0000 		_ADR	PSTOR
 2053 29ac 8F170000 		_UNNEST
 2054              	
 2055              	/*******************************
 2056              	    .(	  ( -- )
 2057              	 	Output following string 
 2058              		up to next ) .
 2059              	******************************/
 2060 29b0 68290000 		_HEADER DOTPR,2,".("
 2060      022E2800 
 2061 29b8 504700BF 		_NEST
 2062 29bc 07190000 		_DOLIT	')'
 2062      29000000 
 2063 29c4 71290000 		_ADR	PARSE
 2064 29c8 B9260000 		_ADR	TYPEE
 2065 29cc 8F170000 		_UNNEST
 2066              	
 2067              	/************************
 2068              	    (	   ( -- )
 2069              	 	Ignore following 
 2070              		string up to next )
 2071              		A comment.
 2072              	************************/
 2073 29d0 B4290000 		_HEADER PAREN,1,"("
 2073      012800BF 
 2074 29d8 504700BF 		_NEST
 2075 29dc 07190000 		_DOLIT	')'
 2075      29000000 
 2076 29e4 71290000 		_ADR	PARSE
 2077 29e8 491C0000 		_ADR	DDROP
 2078 29ec 8F170000 		_UNNEST
 2079              	
 2080              	/*******************
 2081              	    \	   ( -- )
 2082              	 	Ignore following 
 2083              		text till the 
 2084              		end of line.
 2085              	********************/
 2086 29f0 D4290000 		_HEADER BKSLA,1,"\\"
 2086      015C00BF 
 2087 29f8 504700BF 		_NEST
 2088 29fc 9D1E0000 		_ADR	NTIB
 2089 2a00 8D190000 		_ADR	AT
 2090 2a04 891E0000 		_ADR	INN
 2091 2a08 79190000 		_ADR	STORE
 2092 2a0c 8F170000 		_UNNEST
 2093              	
 2094              	/******************************
 2095              	    CHAR	( -- c )
 2096              	 	Parse next word and
 2097              		return its first character.
 2098              	*******************************/
ARM GAS  forth.s 			page 109


 2099 2a10 F4290000 		_HEADER CHAR,4,"CHAR"
 2099      04434841 
 2099      520000BF 
 2100 2a1c 504700BF 		_NEST
 2101 2a20 B91B0000 		_ADR	BLANK
 2102 2a24 71290000 		_ADR	PARSE
 2103 2a28 291A0000 		_ADR	DROP
 2104 2a2c AD190000 		_ADR	CAT
 2105 2a30 8F170000 		_UNNEST
 2106              	
 2107              	/**********************************
 2108              	    WORD	( c -- a //  string> )
 2109              	 	Parse a word from input stream
 2110              		and copy it to code dictionary.
 2111              	***********************************/
 2112 2a34 142A0000 		_HEADER WORDD,4,"WORD"
 2112      04574F52 
 2112      440000BF 
 2113 2a40 504700BF 		_NEST
 2114 2a44 71290000 		_ADR	PARSE
 2115 2a48 95210000 		_ADR	HERE
 2116 2a4c 991B0000 		_ADR	CELLP
 2117 2a50 9D220000 		_ADR	PACKS
 2118 2a54 8F170000 		_UNNEST
 2119              	
 2120              	/********************************
 2121              	    TOKEN	( -- a //  string> )
 2122              	 	Parse a word from input 
 2123              		stream and copy it to 
 2124              		name dictionary.
 2125              	*********************************/
 2126 2a58 382A0000 		_HEADER TOKEN,5,"TOKEN"
 2126      05544F4B 
 2126      454E00BF 
 2127 2a64 504700BF 		_NEST
 2128 2a68 B91B0000 		_ADR	BLANK
 2129 2a6c 412A0000 		_ADR	WORDD
 2130 2a70 8F170000 		_UNNEST
 2131              	
 2132              	/**********************
 2133              	  Dictionary search
 2134              	***********************/
 2135              	
 2136              	/*************************
 2137              	    NAME>	( na -- ca )
 2138              	 	Return a code address
 2139              		given a name address.
 2140              	**************************/
 2141 2a74 5C2A0000 		_HEADER NAMET,5,"NAME>"
 2141      054E414D 
 2141      453E00BF 
 2142 2a80 504700BF 		_NEST
 2143 2a84 BD1D0000 		_ADR	COUNT
 2144 2a88 07190000 		_DOLIT	0x1F
 2144      1F000000 
 2145 2a90 7D1A0000 		_ADR	ANDD
 2146 2a94 FD1A0000 		_ADR	PLUS
ARM GAS  forth.s 			page 110


 2147 2a98 E1200000 		_ADR	ALGND
 2148 2a9c 8F170000 		_UNNEST
 2149              	
 2150              	/***************************************
 2151              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2152              	 	Compare u bytes in two strings. 
 2153              		Return 0 if identical.
 2154              	
 2155              	  Picatout 2020-12-01, 
 2156              	    Because of problem with .align 
 2157              		directive that doesn't fill 
 2158              		with zero's I had to change 
 2159              		the "SAME?" and "FIND" 
 2160              	 	words  to do a byte by byte comparison. 
 2161              	****************************************/
 2162 2aa0 782A0000 		_HEADER SAMEQ,5,"SAME?"
 2162      0553414D 
 2162      453F00BF 
 2163 2aac 504700BF 		_NEST
 2164 2ab0 E1190000 		_ADR	TOR
 2165 2ab4 5B190000 		_BRAN	SAME2
 2165      F82A0000 
 2166              	SAME1:
 2167 2abc 5D1A0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2168 2ac0 CD190000 		_ADR	RAT   // a1 a2 a1 u 
 2169 2ac4 FD1A0000 		_ADR	PLUS  // a1 a2 a1+u 
 2170 2ac8 AD190000 		_ADR	CAT	   // a1 a2 c1    		
 2171 2acc 5D1A0000 		_ADR	OVER  // a1 a2 c1 a2 
 2172 2ad0 CD190000 		_ADR	RAT    
 2173 2ad4 FD1A0000 		_ADR	PLUS    
 2174 2ad8 AD190000 		_ADR	CAT	  // a1 a2 c1 c2
 2175 2adc 0D1B0000 		_ADR	SUBB  
 2176 2ae0 0D1C0000 		_ADR	QDUP
 2177 2ae4 47190000 		_QBRAN	SAME2
 2177      F82A0000 
 2178 2aec B9190000 		_ADR	RFROM
 2179 2af0 291A0000 		_ADR	DROP
 2180 2af4 8F170000 		_UNNEST	// strings not equal
 2181              	SAME2:
 2182 2af8 29190000 		_DONXT	SAME1
 2182      BC2A0000 
 2183 2b00 07190000 		_DOLIT	0
 2183      00000000 
 2184 2b08 8F170000 		_UNNEST	// strings equal
 2185              	
 2186              	/***********************************
 2187              	    FIND	( a na -- ca na | a F )
 2188              	 	Search a vocabulary for a string.
 2189              		Return ca and na if succeeded.
 2190              	hidden word used by NAME?
 2191              	
 2192              	  Picatout 2020-12-01,  
 2193              		 Modified from original. 
 2194              	   See comment for word "SAME?" 
 2195              	************************************/
 2196              	FIND:
 2197 2b0c 504700BF 		_NEST
ARM GAS  forth.s 			page 111


 2198 2b10 491A0000 		_ADR	SWAP			// na a	
 2199 2b14 BD1D0000 		_ADR	COUNT			// na a+1 count
 2200 2b18 391A0000 		_ADR	DUPP 
 2201 2b1c 5F1E0000 		_ADR	TEMP
 2202 2b20 79190000 		_ADR	STORE			// na a+1 count 
 2203 2b24 E1190000 		_ADR  TOR		// na a+1  R: count  
 2204 2b28 491A0000 		_ADR	SWAP			// a+1 na
 2205              	FIND1:
 2206 2b2c 391A0000 		_ADR	DUPP			// a+1 na na
 2207 2b30 47190000 		_QBRAN	FIND6	// end of vocabulary
 2207      842B0000 
 2208 2b38 391A0000 		_ADR	DUPP			// a+1 na na
 2209 2b3c AD190000 		_ADR	CAT			// a+1 na name1
 2210 2b40 07190000 		_DOLIT	MASKK
 2210      1FFFFFFF 
 2211 2b48 7D1A0000 		_ADR	ANDD
 2212 2b4c CD190000 		_ADR	RAT			// a+1 na name1 count 
 2213 2b50 A51A0000 		_ADR	XORR			// a+1 na,  same length?
 2214 2b54 47190000 		_QBRAN	FIND2
 2214      6C2B0000 
 2215 2b5c A91B0000 		_ADR	CELLM			// a+1 la
 2216 2b60 8D190000 		_ADR	AT			// a+1 next_na
 2217 2b64 5B190000 		_BRAN	FIND1			// try next word
 2217      2C2B0000 
 2218              	FIND2:   
 2219 2b6c 591B0000 		_ADR	ONEP			// a+1 na+1
 2220 2b70 5F1E0000 		_ADR	TEMP
 2221 2b74 8D190000 		_ADR	AT			// a+1 na+1 count
 2222 2b78 AD2A0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2223              	FIND3:	
 2224 2b7c 5B190000 		_BRAN	FIND4
 2224      9C2B0000 
 2225              	FIND6:	
 2226 2b84 B9190000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2227 2b88 291A0000 		_ADR	DROP			// a+1 0
 2228 2b8c 491A0000 		_ADR	SWAP			// 0 a+1
 2229 2b90 691B0000 		_ADR	ONEM			// 0 a
 2230 2b94 491A0000 		_ADR	SWAP			// a 0 
 2231 2b98 8F170000 		_UNNEST			// return without a match
 2232              	FIND4:	
 2233 2b9c 47190000 		_QBRAN	FIND5			// a+1 na+1
 2233      B82B0000 
 2234 2ba4 691B0000 		_ADR	ONEM			// a+1 na
 2235 2ba8 A91B0000 		_ADR	CELLM			// a+4 la
 2236 2bac 8D190000 		_ADR	AT			// a+1 next_na
 2237 2bb0 5B190000 		_BRAN	FIND1			// compare next name
 2237      2C2B0000 
 2238              	FIND5:	
 2239 2bb8 B9190000 		_ADR	RFROM			// a+1 na+1 count
 2240 2bbc 291A0000 		_ADR	DROP			// a+1 na+1
 2241 2bc0 491A0000 		_ADR	SWAP			// na+1 a+1
 2242 2bc4 291A0000 		_ADR	DROP			// na+1
 2243 2bc8 691B0000 		_ADR	ONEM			// na
 2244 2bcc 391A0000 		_ADR	DUPP			// na na
 2245 2bd0 812A0000 		_ADR	NAMET			// na ca
 2246 2bd4 491A0000 		_ADR	SWAP			// ca na
 2247 2bd8 8F170000 		_UNNEST			//  return with a match
ARM GAS  forth.s 			page 112


 2248              	
 2249              	/********************************
 2250              	    NAME?	( a -- ca na | a F )
 2251              	 	Search all context vocabularies 
 2252              		for a string.
 2253              	***********************************/
 2254 2bdc A42A0000 		_HEADER NAMEQ,5,"NAME?"
 2254      054E414D 
 2254      453F00BF 
 2255 2be8 504700BF 		_NEST
 2256 2bec DD1E0000 		_ADR	CNTXT
 2257 2bf0 8D190000 		_ADR	AT
 2258 2bf4 0D2B0000 		_ADR	FIND
 2259 2bf8 8F170000 		_UNNEST
 2260              	
 2261              	/********************
 2262              	  console input
 2263              	********************/
 2264              	
 2265              	/**************************************
 2266              	   BKSP  ( bot eot cur -- bot eot cur )
 2267              	   Move cursor left by one character.
 2268              	hidden word used by KTAP
 2269              	***************************************/
 2270              	BKSP:
 2271 2bfc 504700BF 		_NEST
 2272 2c00 E1190000 		_ADR	TOR
 2273 2c04 5D1A0000 		_ADR	OVER
 2274 2c08 B9190000 		_ADR	RFROM
 2275 2c0c 491A0000 		_ADR	SWAP
 2276 2c10 5D1A0000 		_ADR	OVER
 2277 2c14 A51A0000 		_ADR	XORR
 2278 2c18 47190000 		_QBRAN	BACK1
 2278      442C0000 
 2279 2c20 07190000 		_DOLIT	BKSPP
 2279      08000000 
 2280 2c28 11180000 		_ADR	TECHO
 2281 2c2c 691B0000 		_ADR	ONEM
 2282 2c30 B91B0000 		_ADR	BLANK
 2283 2c34 11180000 		_ADR	TECHO
 2284 2c38 07190000 		_DOLIT	BKSPP
 2284      08000000 
 2285 2c40 11180000 		_ADR	TECHO
 2286              	BACK1:
 2287 2c44 8F170000 		  _UNNEST
 2288              	
 2289              	/****************************************
 2290              	   TAP	 ( bot eot cur c -- bot eot cur )
 2291              	   Accept and echo the key stroke 
 2292              	   and bump the cursor.
 2293              	hidden word used by KTAP 
 2294              	****************************************/
 2295              	TAP:
 2296 2c48 504700BF 		_NEST
 2297 2c4c 391A0000 		_ADR	DUPP
 2298 2c50 11180000 		_ADR	TECHO
 2299 2c54 5D1A0000 		_ADR	OVER
ARM GAS  forth.s 			page 113


 2300 2c58 99190000 		_ADR	CSTOR
 2301 2c5c 591B0000 		_ADR	ONEP
 2302 2c60 8F170000 		_UNNEST
 2303              	
 2304              	/*******************************************
 2305              	    kTAP	( bot eot cur c -- bot eot cur )
 2306              	 	Process a key stroke, CR or backspace.
 2307              	hidden word used by ACCEPT 
 2308              	*******************************************/
 2309              	KTAP:
 2310              	TTAP:
 2311 2c64 504700BF 		_NEST
 2312 2c68 391A0000 		_ADR	DUPP
 2313 2c6c 07190000 		_DOLIT	CRR
 2313      0D000000 
 2314 2c74 A51A0000 		_ADR	XORR
 2315 2c78 47190000 		_QBRAN  KTAP2
 2315      A82C0000 
 2316 2c80 07190000 		_DOLIT	BKSPP
 2316      08000000 
 2317 2c88 A51A0000 		_ADR	XORR
 2318 2c8c 47190000 		_QBRAN	KTAP1
 2318      A02C0000 
 2319 2c94 B91B0000 		_ADR	BLANK
 2320 2c98 492C0000 		_ADR	TAP
 2321 2c9c 8F170000 		_UNNEST
 2322              	//	.word	0			// patch
 2323              	KTAP1:
 2324 2ca0 FD2B0000 		_ADR	BKSP
 2325 2ca4 8F170000 		_UNNEST
 2326              	KTAP2:
 2327 2ca8 291A0000 		_ADR	DROP
 2328 2cac 491A0000 		_ADR	SWAP
 2329 2cb0 291A0000 		_ADR	DROP
 2330 2cb4 391A0000 		_ADR	DUPP
 2331 2cb8 8F170000 		_UNNEST
 2332              	
 2333              	/************************************
 2334              	    ACCEPT	( b u -- b u )
 2335              	 	Accept characters to input 
 2336              		buffer. Return with actual count.
 2337              	*************************************/
 2338 2cbc E02B0000 		_HEADER ACCEP,6,"ACCEPT"
 2338      06414343 
 2338      45505400 
 2339 2cc8 504700BF 		_NEST
 2340 2ccc 5D1A0000 		_ADR	OVER
 2341 2cd0 FD1A0000 		_ADR	PLUS
 2342 2cd4 5D1A0000 		_ADR	OVER
 2343              	ACCP1:
 2344 2cd8 711C0000 		_ADR	DDUP
 2345 2cdc A51A0000 		_ADR	XORR
 2346 2ce0 47190000 		_QBRAN	ACCP4
 2346      202D0000 
 2347 2ce8 ED170000 		_ADR	KEY
 2348 2cec 391A0000 		_ADR	DUPP
 2349 2cf0 B91B0000 		_ADR	BLANK
ARM GAS  forth.s 			page 114


 2350 2cf4 07190000 		_DOLIT 127
 2350      7F000000 
 2351 2cfc 691F0000 		_ADR	WITHI
 2352 2d00 47190000 		_QBRAN	ACCP2
 2352      142D0000 
 2353 2d08 492C0000 		_ADR	TAP
 2354 2d0c 5B190000 		_BRAN	ACCP3
 2354      182D0000 
 2355              	ACCP2:
 2356 2d14 652C0000 		_ADR	KTAP
 2357              	ACCP3:	  
 2358 2d18 5B190000 		_BRAN	ACCP1
 2358      D82C0000 
 2359              	ACCP4:
 2360 2d20 291A0000 		_ADR	DROP
 2361 2d24 5D1A0000 		_ADR	OVER
 2362 2d28 0D1B0000 		_ADR	SUBB
 2363 2d2c 8F170000 		_UNNEST
 2364              	
 2365              	/*****************************
 2366              	    QUERY	( -- )
 2367              	 	Accept input stream 
 2368              		to terminal input buffer.
 2369              	******************************/
 2370 2d30 C02C0000 		_HEADER QUERY,5,"QUERY"
 2370      05515545 
 2370      525900BF 
 2371 2d3c 504700BF 		_NEST
 2372 2d40 CD210000 		_ADR	TIB
 2373 2d44 07190000 		_DOLIT 80
 2373      50000000 
 2374 2d4c C92C0000 		_ADR	ACCEP
 2375 2d50 9D1E0000 		_ADR	NTIB
 2376 2d54 79190000 		_ADR	STORE
 2377 2d58 291A0000 		_ADR	DROP
 2378 2d5c 07190000 		_DOLIT	0
 2378      00000000 
 2379 2d64 891E0000 		_ADR	INN
 2380 2d68 79190000 		_ADR	STORE
 2381 2d6c 8F170000 		_UNNEST
 2382              	
 2383              	/********************
 2384              	  Error handling
 2385              	********************/
 2386              	
 2387              	/*********************
 2388              	    ABORT	( a -- )
 2389              	 	Reset data stack 
 2390              		and jump to QUIT.
 2391              	**********************/
 2392 2d70 342D0000 		_HEADER ABORT,5,"ABORT"
 2392      0541424F 
 2392      525400BF 
 2393 2d7c 504700BF 		_NEST
 2394              	ABORT1:
 2395 2d80 65260000 		_ADR	SPACE
 2396 2d84 BD1D0000 		_ADR	COUNT
ARM GAS  forth.s 			page 115


 2397 2d88 B9260000 		_ADR	TYPEE
 2398 2d8c 07190000 		_DOLIT	0X3F
 2398      3F000000 
 2399 2d94 11180000 		_ADR	EMIT
 2400 2d98 ED260000 		_ADR	CR
 2401 2d9c 052F0000 		_ADR	PRESE
 2402 2da0 5B190000 		_BRAN	QUIT
 2402      242F0000 
 2403              	
 2404              	/*******************************
 2405              	    _abort"	( f -- )
 2406              	 	Run time routine of ABORT"
 2407              		Abort with a message.
 2408              	hidden used by compiler 
 2409              	********************************/
 2410              	ABORQ:
 2411 2da8 504700BF 		_NEST
 2412 2dac 0D270000 		_ADR	DOSTR
 2413 2db0 491A0000 		_ADR	SWAP 
 2414 2db4 47190000 		_QBRAN	1f	// text flag
 2414      C42D0000 
 2415 2dbc 5B190000 		_BRAN	ABORT1
 2415      802D0000 
 2416              	1:
 2417 2dc4 291A0000 		_ADR	DROP
 2418 2dc8 8F170000 		_UNNEST			// drop error
 2419              	
 2420              	/************************
 2421              	  The text interpreter
 2422              	************************/
 2423              	
 2424              	/***************************
 2425              	    $INTERPRET  ( a -- )
 2426              	 	Interpret a word. 
 2427              		If failed, try to 
 2428              		convert it to an integer.
 2429              	******************************/
 2430 2dcc 742D0000 		_HEADER INTER,10,"$INTERPRET"
 2430      0A24494E 
 2430      54455250 
 2430      52455400 
 2431 2ddc 504700BF 		_NEST
 2432 2de0 E92B0000 		_ADR	NAMEQ
 2433 2de4 0D1C0000 		_ADR	QDUP	// ?defined
 2434 2de8 47190000 		_QBRAN	INTE1
 2434      1C2E0000 
 2435 2df0 8D190000 		_ADR	AT
 2436 2df4 07190000 		_DOLIT	COMPO
 2436      40000000 
 2437 2dfc 7D1A0000 		_ADR	ANDD	// ?compile only lexicon bits
 2438 2e00 A92D0000 		_ABORQ	13," compile only"
 2438      0D20636F 
 2438      6D70696C 
 2438      65206F6E 
 2438      6C7900BF 
 2439 2e14 1D190000 		_ADR	EXECU
 2440 2e18 8F170000 		_UNNEST			// execute defined word
ARM GAS  forth.s 			page 116


 2441              	INTE1:
 2442 2e1c 29250000 		_ADR	NUMBQ
 2443 2e20 47190000 		_QBRAN	INTE2
 2443      2C2E0000 
 2444 2e28 8F170000 		_UNNEST
 2445              	INTE2:
 2446 2e2c 7D2D0000 		_ADR	ABORT	// error
 2447              	
 2448              	/******************************
 2449              	    [	   ( -- )
 2450              	 	Start the text interpreter.
 2451              	*******************************/
 2452 2e30 D02D0000 		_HEADER LBRAC,1,"["
 2452      015B00BF 
 2453 2e38 504700BF 		_NEST
 2454 2e3c 07190000 		_DOLIT	INTER
 2454      DC2D0000 
 2455 2e44 B11E0000 		_ADR	TEVAL
 2456 2e48 79190000 		_ADR	STORE
 2457 2e4c 8F170000 		_UNNEST
 2458              	
 2459              	/**********************
 2460              	    .OK	 ( -- )
 2461              	 	Display "ok" only 
 2462              		while interpreting.
 2463              	************************/
 2464 2e50 342E0000 		_HEADER DOTOK,3,".OK"
 2464      032E4F4B 
 2465 2e58 504700BF 		_NEST
 2466 2e5c 07190000 		_DOLIT	INTER
 2466      DC2D0000 
 2467 2e64 B11E0000 		_ADR	TEVAL
 2468 2e68 8D190000 		_ADR	AT
 2469 2e6c ED1C0000 		_ADR	EQUAL
 2470 2e70 47190000 		_QBRAN	DOTO1
 2470      802E0000 
 2471 2e78 55270000 		_DOTQP	3," ok"
 2471      03206F6B 
 2472              	DOTO1:
 2473 2e80 ED260000 		_ADR	CR
 2474 2e84 8F170000 		_UNNEST
 2475              	
 2476              	/*************************
 2477              	    ?STACK	( -- )
 2478              	 	Abort if the data 
 2479              		stack underflows.
 2480              	************************/
 2481 2e88 542E0000 		_HEADER QSTAC,6,"?STACK"
 2481      063F5354 
 2481      41434B00 
 2482 2e94 504700BF 		_NEST
 2483 2e98 49210000 		_ADR	DEPTH
 2484 2e9c 6D1A0000 		_ADR	ZLESS	// check only for underflow
 2485 2ea0 A92D0000 		_ABORQ	9,"underflow"
 2485      09756E64 
 2485      6572666C 
 2485      6F7700BF 
ARM GAS  forth.s 			page 117


 2486 2eb0 8F170000 		_UNNEST
 2487              	
 2488              	/*******************
 2489              	    EVAL	( -- )
 2490              	 	Interpret the 
 2491              		input stream.
 2492              	*******************/
 2493 2eb4 8C2E0000 		_HEADER EVAL,4,"EVAL"
 2493      04455641 
 2493      4C0000BF 
 2494 2ec0 504700BF 		_NEST
 2495              	EVAL1:
 2496 2ec4 652A0000 	    _ADR	TOKEN
 2497 2ec8 391A0000 		_ADR	DUPP
 2498 2ecc AD190000 		_ADR	CAT	// ?input stream empty
 2499 2ed0 47190000 		_QBRAN	EVAL2
 2499      EC2E0000 
 2500 2ed8 B11E0000 		_ADR	TEVAL
 2501 2edc E5210000 		_ADR	ATEXE
 2502 2ee0 952E0000 		_ADR	QSTAC	// evaluate input, check stack
 2503 2ee4 5B190000 		_BRAN	EVAL1
 2503      C42E0000 
 2504              	EVAL2:
 2505 2eec 291A0000 		_ADR	DROP
 2506 2ef0 592E0000 		_ADR	DOTOK
 2507 2ef4 8F170000 		_UNNEST	// prompt
 2508              	
 2509              	/**********************************
 2510              	    PRESET	( -- )
 2511              	 	Reset data stack pointer 
 2512              		and the terminal input buffer.
 2513              	**********************************/
 2514 2ef8 B82E0000 		_HEADER PRESE,6,"PRESET"
 2514      06505245 
 2514      53455400 
 2515 2f04 504700BF 		_NEST 
 2516 2f08 07190000 		_DOLIT SPP 
 2516      00FF0120 
 2517 2f10 051A0000 		_ADR SPSTOR 
 2518 2f14 8F170000 		_UNNEST 
 2519              	
 2520              	/*********************
 2521              	    QUIT	( -- )
 2522              	 	Reset return stack 
 2523              		pointer and start 
 2524              		text interpreter.
 2525              	***********************/
 2526 2f18 FC2E0000 		_HEADER QUIT,4,"QUIT"
 2526      04515549 
 2526      540000BF 
 2527 2f24 07190000 		_DOLIT RPP 
 2527      80FF0120 
 2528 2f2c F5190000 		_ADR RPSTOR 
 2529              	QUIT1:
 2530 2f30 392E0000 		_ADR	LBRAC			// start interpretation
 2531              	QUIT2:
 2532 2f34 3D2D0000 		_ADR	QUERY			// get input
ARM GAS  forth.s 			page 118


 2533 2f38 C12E0000 		_ADR	EVAL
 2534 2f3c 5B190000 		_BRAN	QUIT2	// continue till error
 2534      342F0000 
 2535              	
 2536              	/***************************
 2537              		FORGET ( <string> -- )
 2538              		forget all definition 
 2539              		starting at <string>
 2540              	****************************/
 2541 2f44 1C2F0000 		_HEADER FORGET,6,"FORGET"
 2541      06464F52 
 2541      47455400 
 2542 2f50 504700BF 		_NEST 
 2543 2f54 652A0000 		_ADR TOKEN 
 2544 2f58 391A0000 		_ADR DUPP 
 2545 2f5c 47190000 		_QBRAN 9f 
 2545      982F0000 
 2546 2f64 E92B0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2547 2f68 0D1C0000 		_ADR QDUP 
 2548 2f6c 47190000 		_QBRAN 8f
 2548      942F0000 
 2549 2f74 A91B0000 		_ADR CELLM // ( ca la )
 2550 2f78 391A0000 		_ADR DUPP 
 2551 2f7c F11E0000 		_ADR CPP   
 2552 2f80 79190000 		_ADR STORE
 2553 2f84 8D190000 		_ADR AT 
 2554 2f88 191F0000 		_ADR LAST 
 2555 2f8c 79190000 		_ADR STORE
 2556 2f90 FD330000 		_ADR OVERT 
 2557 2f94 291A0000 	8:  _ADR DROP 
 2558 2f98 8F170000 	9:	_UNNEST 
 2559              	
 2560              		.p2align 2 
 2561              	
 2562              	/*****************
 2563              	  The compiler
 2564              	******************/
 2565              	
 2566              	/**************************************
 2567              	    '	   ( -- ca )
 2568              	 	Search context vocabularies 
 2569              		for the next word in input stream.
 2570              	***************************************/
 2571 2f9c 482F0000 		_HEADER TICK,1,"'"
 2571      012700BF 
 2572 2fa4 504700BF 		_NEST
 2573 2fa8 652A0000 		_ADR	TOKEN
 2574 2fac E92B0000 		_ADR	NAMEQ	// ?defined
 2575 2fb0 47190000 		_QBRAN	TICK1
 2575      BC2F0000 
 2576 2fb8 8F170000 		_UNNEST	// yes, push code address
 2577              	TICK1:	
 2578 2fbc 7D2D0000 		_ADR ABORT	// no, error
 2579              	
 2580              	/***********************
 2581              	    ALLOT	( n -- )
 2582              	 	Allocate n bytes to 
ARM GAS  forth.s 			page 119


 2583              		the ram area.
 2584              	************************/
 2585 2fc0 A02F0000 		_HEADER ALLOT,5,"ALLOT"
 2585      05414C4C 
 2585      4F5400BF 
 2586 2fcc 504700BF 		_NEST
 2587 2fd0 F11E0000 		_ADR	CPP
 2588 2fd4 751D0000 		_ADR	PSTOR
 2589 2fd8 8F170000 		_UNNEST			// adjust code pointer
 2590              	
 2591              	/******************************
 2592              	    ,	   ( w -- )
 2593              	 	Compile an integer 
 2594              		into the code dictionary.
 2595              	******************************/
 2596 2fdc C42F0000 		_HEADER COMMA,1,","
 2596      012C00BF 
 2597 2fe4 504700BF 		_NEST
 2598 2fe8 95210000 		_ADR	HERE
 2599 2fec 391A0000 		_ADR	DUPP
 2600 2ff0 991B0000 		_ADR	CELLP	// cell boundary
 2601 2ff4 F11E0000 		_ADR	CPP
 2602 2ff8 79190000 		_ADR	STORE
 2603 2ffc 79190000 		_ADR	STORE
 2604 3000 8F170000 		_UNNEST	// adjust code pointer, compile
 2605              		.p2align 2 
 2606              	
 2607              	/************************************
 2608              	    [COMPILE]   ( -- //  string> )
 2609              	 	Compile the next immediate word 
 2610              		into code dictionary.
 2611              	*************************************/
 2612 3004 E02F0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2612      895B434F 
 2612      4D50494C 
 2612      455D00BF 
 2613 3014 504700BF 		_NEST
 2614 3018 A52F0000 		_ADR	TICK
 2615 301c E52F0000 		_ADR	COMMA
 2616 3020 8F170000 		_UNNEST
 2617              	
 2618              	/****************************
 2619              	    COMPILE	( -- )
 2620              	 	Compile the next address 
 2621              		in colon list to code 
 2622              		dictionary.
 2623              	*******************************/
 2624 3024 08300000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2624      47434F4D 
 2624      50494C45 
 2625 3030 504700BF 		_NEST
 2626 3034 B9190000 		_ADR	RFROM
 2627 3038 391A0000 		_ADR	DUPP 
 2628 303c 8D190000 		_ADR	AT
 2629 3040 07190000 		_DOLIT 1 
 2629      01000000 
 2630 3048 911A0000 		_ADR	ORR 
ARM GAS  forth.s 			page 120


 2631 304c E52F0000 		_ADR	COMMA 
 2632 3050 991B0000 		_ADR	CELLP 
 2633 3054 E1190000 		_ADR	TOR 
 2634 3058 8F170000 		_UNNEST	// adjust return address
 2635              	
 2636              	/*************************
 2637              	    LITERAL	( w -- )
 2638              	 	Compile tos to code 
 2639              		dictionary as an 
 2640              		integer literal.
 2641              	***************************/
 2642 305c 28300000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2642      874C4954 
 2642      4552414C 
 2643 3068 504700BF 		_NEST
 2644 306c 07190000 		_COMPI	DOLIT
 2644      06190000 
 2644      59340000 
 2645 3078 E52F0000 		_ADR	COMMA
 2646 307c 8F170000 		_UNNEST
 2647              	
 2648              	/********************
 2649              	    $,"	( -- )
 2650              	 	Compile a literal 
 2651              		string up to next " .
 2652              	hidden word 
 2653              	************************/
 2654              	STRCQ:
 2655 3080 504700BF 		_NEST
 2656 3084 07190000 		_DOLIT -4
 2656      FCFFFFFF 
 2657 308c F11E0000 		_ADR	CPP
 2658 3090 751D0000 		_ADR	PSTOR
 2659 3094 07190000 		_DOLIT	'\"'
 2659      22000000 
 2660 309c 412A0000 		_ADR	WORDD			// move word to code dictionary
 2661 30a0 BD1D0000 		_ADR	COUNT
 2662 30a4 FD1A0000 		_ADR	PLUS
 2663 30a8 E1200000 		_ADR	ALGND			// calculate aligned end of string
 2664 30ac F11E0000 		_ADR	CPP
 2665 30b0 79190000 		_ADR	STORE
 2666 30b4 8F170000 		_UNNEST 			// adjust the code pointer
 2667              	
 2668              	/*******************
 2669              	//  Structures
 2670              	*******************/
 2671              	
 2672              	/*************************
 2673              	    FOR	 ( -- a )
 2674              	 	Start a FOR-NEXT loop 
 2675              		structure in a colon 
 2676              		definition.
 2677              	**************************/
 2678 30b8 60300000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2678      C3464F52 
 2679 30c0 504700BF 		_NEST
 2680 30c4 07190000 		_COMPI	TOR
ARM GAS  forth.s 			page 121


 2680      E0190000 
 2680      59340000 
 2681 30d0 95210000 		_ADR	HERE
 2682 30d4 8F170000 		_UNNEST
 2683              	
 2684              	/**********************
 2685              	    BEGIN	( -- a )
 2686              	 	Start an infinite 
 2687              		or indefinite 
 2688              		loop structure.
 2689              	************************/
 2690 30d8 BC300000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2690      C5424547 
 2690      494E00BF 
 2691 30e4 504700BF 		_NEST
 2692 30e8 95210000 		_ADR	HERE
 2693 30ec 8F170000 		_UNNEST
 2694              		.p2align 2 
 2695              	
 2696              	/********************
 2697              	    NEXT	( a -- )
 2698              	 	Terminate a FOR-NEXT
 2699              		loop structure.
 2700              	**************************/
 2701 30f0 DC300000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2701      C44E4558 
 2701      540000BF 
 2702 30fc 504700BF 		_NEST
 2703 3100 07190000 		_COMPI	DONXT
 2703      28190000 
 2703      59340000 
 2704 310c E52F0000 		_ADR	COMMA
 2705 3110 8F170000 		_UNNEST
 2706              	
 2707              	/**********************
 2708              	    UNTIL	( a -- )
 2709              	 	Terminate a BEGIN-UNTIL
 2710              		indefinite loop structure.
 2711              	******************************/
 2712 3114 F4300000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2712      C5554E54 
 2712      494C00BF 
 2713 3120 504700BF 		_NEST
 2714 3124 07190000 		_COMPI	QBRAN
 2714      46190000 
 2714      59340000 
 2715 3130 E52F0000 		_ADR	COMMA
 2716 3134 8F170000 		_UNNEST
 2717              	
 2718              	/**********************
 2719              	    AGAIN	( a -- )
 2720              	 	Terminate a BEGIN-AGAIN
 2721              		infinite loop structure.
 2722              	*****************************/
 2723 3138 18310000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2723      C5414741 
 2723      494E00BF 
ARM GAS  forth.s 			page 122


 2724 3144 504700BF 		_NEST
 2725 3148 07190000 		_COMPI	BRAN
 2725      5A190000 
 2725      59340000 
 2726 3154 E52F0000 		_ADR	COMMA
 2727 3158 8F170000 		_UNNEST
 2728              	
 2729              	/************************
 2730              	    IF	  ( -- A )
 2731              	 	Begin a conditional
 2732              		branch structure.
 2733              	**************************/
 2734 315c 3C310000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2734      C2494600 
 2735 3164 504700BF 		_NEST
 2736 3168 07190000 		_COMPI	QBRAN
 2736      46190000 
 2736      59340000 
 2737 3174 95210000 		_ADR	HERE
 2738 3178 07190000 		_DOLIT	4
 2738      04000000 
 2739 3180 F11E0000 		_ADR	CPP
 2740 3184 751D0000 		_ADR	PSTOR
 2741 3188 8F170000 		_UNNEST
 2742              	
 2743              	/*************************
 2744              	    AHEAD	( -- A )
 2745              	 	Compile a forward 
 2746              		branch instruction.
 2747              	*************************/
 2748 318c 60310000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2748      C5414845 
 2748      414400BF 
 2749 3198 504700BF 		_NEST
 2750 319c 07190000 		_COMPI	BRAN
 2750      5A190000 
 2750      59340000 
 2751 31a8 95210000 		_ADR	HERE
 2752 31ac 07190000 		_DOLIT	4
 2752      04000000 
 2753 31b4 F11E0000 		_ADR	CPP
 2754 31b8 751D0000 		_ADR	PSTOR
 2755 31bc 8F170000 		_UNNEST
 2756              	
 2757              	/**************************
 2758              	    REPEAT	( A a -- )
 2759              	 	Terminate a BEGIN-WHILE-REPEAT
 2760              		indefinite loop.
 2761              	**********************************/
 2762 31c0 90310000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2762      C6524550 
 2762      45415400 
 2763 31cc 504700BF 		_NEST
 2764 31d0 45310000 		_ADR	AGAIN
 2765 31d4 95210000 		_ADR	HERE
 2766 31d8 491A0000 		_ADR	SWAP
 2767 31dc 79190000 		_ADR	STORE
ARM GAS  forth.s 			page 123


 2768 31e0 8F170000 		_UNNEST
 2769              	
 2770              	/*********************
 2771              	    THEN	( A -- )
 2772              	 	Terminate a conditional
 2773              		branch structure.
 2774              	*****************************/
 2775 31e4 C4310000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2775      C4544845 
 2775      4E0000BF 
 2776 31f0 504700BF 		_NEST
 2777 31f4 95210000 		_ADR	HERE
 2778 31f8 491A0000 		_ADR	SWAP
 2779 31fc 79190000 		_ADR	STORE
 2780 3200 8F170000 		_UNNEST
 2781              	
 2782              	/***************************
 2783              	    AFT	 ( a -- a A )
 2784              	 	Jump to THEN in a 
 2785              		FOR-AFT-THEN-NEXT loop 
 2786              		the first time through.
 2787              	*****************************/
 2788 3204 E8310000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2788      C3414654 
 2789 320c 504700BF 		_NEST
 2790 3210 291A0000 		_ADR	DROP
 2791 3214 99310000 		_ADR	AHEAD
 2792 3218 E5300000 		_ADR	BEGIN
 2793 321c 491A0000 		_ADR	SWAP
 2794 3220 8F170000 		_UNNEST
 2795              	
 2796              	/**********************
 2797              	    ELSE	( A -- A )
 2798              	 	Start the false 
 2799              		clause in an 
 2800              		IF-ELSE-THEN structure.
 2801              	****************************/
 2802 3224 08320000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 2802      C4454C53 
 2802      450000BF 
 2803 3230 504700BF 		_NEST
 2804 3234 99310000 		_ADR	AHEAD
 2805 3238 491A0000 		_ADR	SWAP
 2806 323c F1310000 		_ADR	THENN
 2807 3240 8F170000 		_UNNEST
 2808              	
 2809              	/**************************
 2810              	    WHILE	( a -- A a )
 2811              	 	Conditional branch out 
 2812              		of a BEGIN-WHILE-REPEAT loop.
 2813              	*********************************/
 2814 3244 28320000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 2814      C5574849 
 2814      4C4500BF 
 2815 3250 504700BF 		_NEST
 2816 3254 65310000 		_ADR	IFF
 2817 3258 491A0000 		_ADR	SWAP
ARM GAS  forth.s 			page 124


 2818 325c 8F170000 		_UNNEST
 2819              	
 2820              	/***********************************
 2821              	    ABORT"	( -- //  string> )
 2822              	 	Conditional abort with an 
 2823              		error message.
 2824              	***********************************/
 2825 3260 48320000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 2825      8641424F 
 2825      52542200 
 2826 326c 504700BF 		_NEST
 2827 3270 07190000 		_COMPI	ABORQ
 2827      A82D0000 
 2827      59340000 
 2828 327c 81300000 		_ADR	STRCQ
 2829 3280 8F170000 		_UNNEST
 2830              	
 2831              	/******************************
 2832              	    $"	( -- //  string> )
 2833              	 	Compile an inline 
 2834              		word literal.
 2835              	*****************************/
 2836 3284 64320000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 2836      C2242200 
 2837 328c 504700BF 		_NEST
 2838 3290 07190000 		_COMPI	STRQP
 2838      38270000 
 2838      59340000 
 2839 329c 81300000 		_ADR	STRCQ
 2840 32a0 8F170000 		_UNNEST
 2841              	
 2842              	/******************************
 2843              	    ."	( -- //  string> )
 2844              	 	Compile an inline word
 2845              		literal to be typed out 
 2846              		at run time.
 2847              	*******************************/
 2848 32a4 88320000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 2848      C22E2200 
 2849 32ac 504700BF 		_NEST
 2850 32b0 07190000 		_COMPI	DOTQP
 2850      54270000 
 2850      59340000 
 2851 32bc 81300000 		_ADR	STRCQ
 2852 32c0 8F170000 		_UNNEST
 2853              	
 2854              	/*********************
 2855              	  Name compiler
 2856              	***********************/
 2857              	
 2858              	/**************************
 2859              	    ?UNIQUE	( a -- a )
 2860              	 	Display a warning 
 2861              		message if the word 
 2862              		already exists.
 2863              	**************************/
 2864 32c4 A8320000 		_HEADER UNIQU,7,"?UNIQUE"
ARM GAS  forth.s 			page 125


 2864      073F554E 
 2864      49515545 
 2865 32d0 504700BF 		_NEST
 2866 32d4 391A0000 		_ADR	DUPP
 2867 32d8 E92B0000 		_ADR	NAMEQ			// ?name exists
 2868 32dc 47190000 		_QBRAN	UNIQ1	// redefinitions are OK
 2868      FC320000 
 2869 32e4 55270000 		_DOTQP	7," reDef "		// but warn the user
 2869      07207265 
 2869      44656620 
 2870 32f0 5D1A0000 		_ADR	OVER
 2871 32f4 BD1D0000 		_ADR	COUNT
 2872 32f8 B9260000 		_ADR	TYPEE			// just in case its not planned
 2873              	UNIQ1:
 2874 32fc 291A0000 		_ADR	DROP
 2875 3300 8F170000 		_UNNEST
 2876              	
 2877              	/***********************
 2878              	    $,n	 ( na -- )
 2879              	 	Build a new dictionary 
 2880              		name using the data at na.
 2881              	hidden word 
 2882              	*******************************/
 2883              	SNAME:
 2884 3304 504700BF 		_NEST
 2885 3308 391A0000 		_ADR	DUPP			//  na na
 2886 330c AD190000 		_ADR	CAT			//  ?null input
 2887 3310 47190000 		_QBRAN	SNAM1
 2887      4C330000 
 2888 3318 D1320000 		_ADR	UNIQU			//  na
 2889 331c 191F0000 		_ADR	LAST			//  na last
 2890 3320 8D190000 		_ADR	AT			//  na la
 2891 3324 E52F0000 		_ADR	COMMA			//  na
 2892 3328 391A0000 		_ADR	DUPP			//  na na
 2893 332c 191F0000 		_ADR	LAST			//  na na last
 2894 3330 79190000 		_ADR	STORE			//  na , save na for vocabulary link
 2895 3334 BD1D0000 		_ADR	COUNT			//  na+1 count
 2896 3338 FD1A0000 		_ADR	PLUS			//  na+1+count
 2897 333c E1200000 		_ADR	ALGND			//  word boundary
 2898 3340 F11E0000 		_ADR	CPP
 2899 3344 79190000 		_ADR	STORE			//  top of dictionary now
 2900 3348 8F170000 		_UNNEST
 2901              	SNAM1:
 2902 334c 39270000 		_ADR	STRQP
 2903 3350 07       		.byte	7
 2904 3351 206E616D 		.ascii " name? "
 2904      653F20
 2905 3358 7D2D0000 		_ADR	ABORT
 2906              	
 2907              	/************************
 2908              	    $COMPILE	( a -- )
 2909              	 	Compile next word to 
 2910              		code dictionary as 
 2911              		a token or literal.
 2912              	**************************/
 2913 335c C8320000 		_HEADER SCOMP,8,"$COMPILE"
 2913      0824434F 
ARM GAS  forth.s 			page 126


 2913      4D50494C 
 2913      450000BF 
 2914 336c 504700BF 		_NEST
 2915 3370 E92B0000 		_ADR	NAMEQ
 2916 3374 0D1C0000 		_ADR	QDUP	// defined?
 2917 3378 47190000 		_QBRAN	SCOM2
 2917      A8330000 
 2918 3380 8D190000 		_ADR	AT
 2919 3384 07190000 		_DOLIT	IMEDD
 2919      80000000 
 2920 338c 7D1A0000 		_ADR	ANDD	// immediate?
 2921 3390 47190000 		_QBRAN	SCOM1
 2921      A0330000 
 2922 3398 1D190000 		_ADR	EXECU
 2923 339c 8F170000 		_UNNEST			// it's immediate, execute
 2924              	SCOM1:
 2925 33a0 59340000 		_ADR	CALLC			// it's not immediate, compile
 2926 33a4 8F170000 		_UNNEST	
 2927              	SCOM2:
 2928 33a8 29250000 		_ADR	NUMBQ
 2929 33ac 47190000 		_QBRAN	SCOM3
 2929      BC330000 
 2930 33b4 69300000 		_ADR	LITER
 2931 33b8 8F170000 		_UNNEST			// compile number as integer
 2932              	SCOM3: // compilation abort 
 2933 33bc C5330000 		_ADR COLON_ABORT 
 2934 33c0 7D2D0000 		_ADR	ABORT			// error
 2935              	
 2936              	/********************************
 2937              	 before aborting a compilation 
 2938              	 reset HERE and LAST
 2939              	 to previous values. 
 2940              	*******************************/
 2941              	COLON_ABORT:
 2942 33c4 504700BF 		_NEST 
 2943 33c8 191F0000 		_ADR LAST 
 2944 33cc 8D190000 		_ADR AT 
 2945 33d0 A91B0000 		_ADR CELLM 
 2946 33d4 391A0000 		_ADR DUPP 
 2947 33d8 F11E0000 		_ADR CPP  
 2948 33dc 79190000 		_ADR STORE 
 2949 33e0 8D190000 		_ADR AT 
 2950 33e4 191F0000 		_ADR LAST 
 2951 33e8 79190000 		_ADR STORE 
 2952 33ec 8F170000 		_UNNEST 
 2953              	
 2954              	/*********************
 2955              	    OVERT	( -- )
 2956              	 	Link a new word 
 2957              		into the current 
 2958              		vocabulary.
 2959              	**********************/
 2960 33f0 60330000 		_HEADER OVERT,5,"OVERT"
 2960      054F5645 
 2960      525400BF 
 2961 33fc 504700BF 		_NEST
 2962 3400 191F0000 		_ADR	LAST
ARM GAS  forth.s 			page 127


 2963 3404 8D190000 		_ADR	AT
 2964 3408 DD1E0000 		_ADR	CNTXT
 2965 340c 79190000 		_ADR	STORE
 2966 3410 8F170000 		_UNNEST
 2967              	
 2968              	/**********************
 2969              	    ;  ( -- )
 2970              	 	Terminate a colon
 2971              		definition.
 2972              	***********************/
 2973 3414 F4330000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 2973      C13B00BF 
 2974 341c 504700BF 		_NEST
 2975 3420 07190000 		_DOLIT	UNNEST
 2975      8E170000 
 2976 3428 59340000 		_ADR	CALLC
 2977 342c 392E0000 		_ADR	LBRAC
 2978 3430 FD330000 		_ADR	OVERT
 2979 3434 8F170000 		_UNNEST
 2980              	
 2981              	/******************
 2982              	    ]	   ( -- )
 2983              	 	Start compiling 
 2984              		the words in 
 2985              		the input stream.
 2986              	*********************/
 2987 3438 18340000 		_HEADER RBRAC,1,"]"
 2987      015D00BF 
 2988 3440 504700BF 		_NEST
 2989 3444 07190000 		_DOLIT	SCOMP
 2989      6C330000 
 2990 344c B11E0000 		_ADR	TEVAL
 2991 3450 79190000 		_ADR	STORE
 2992 3454 8F170000 		_UNNEST
 2993              	
 2994              	/*********************
 2995              	    BL.W	( ca -- )
 2996              	 	compile ca.
 2997              	hidden word used by compiler
 2998              	*****************************/
 2999              	CALLC:
 3000 3458 504700BF 		_NEST
 3001 345c 07190000 		_DOLIT 1 
 3001      01000000 
 3002 3464 911A0000 		_ADR ORR 
 3003 3468 E52F0000 		_ADR COMMA  
 3004 346c 8F170000 		_UNNEST 
 3005              	
 3006              	
 3007              	/*************************
 3008              	 	:	( -- //  string> )
 3009              	 	Start a new colon 
 3010              		definition using 
 3011              		next word as its name.
 3012              	**************************/
 3013 3470 3C340000 		_HEADER COLON,1,":"
 3013      013A00BF 
ARM GAS  forth.s 			page 128


 3014 3478 504700BF 		_NEST
 3015 347c 652A0000 		_ADR	TOKEN
 3016 3480 05330000 		_ADR	SNAME
 3017 3484 99170000 		_ADR	COMPI_NEST 
 3018 3488 41340000 		_ADR	RBRAC
 3019 348c 8F170000 		_UNNEST
 3020              	
 3021              	/*************************
 3022              	    IMMEDIATE   ( -- )
 3023              	 	Make the last compiled 
 3024              		word an immediate word.
 3025              	***************************/
 3026 3490 74340000 		_HEADER IMMED,9,"IMMEDIATE"
 3026      09494D4D 
 3026      45444941 
 3026      544500BF 
 3027 34a0 504700BF 		_NEST
 3028 34a4 07190000 		_DOLIT	IMEDD
 3028      80000000 
 3029 34ac 191F0000 		_ADR	LAST
 3030 34b0 8D190000 		_ADR	AT
 3031 34b4 8D190000 		_ADR	AT
 3032 34b8 911A0000 		_ADR	ORR
 3033 34bc 191F0000 		_ADR	LAST
 3034 34c0 8D190000 		_ADR	AT
 3035 34c4 79190000 		_ADR	STORE
 3036 34c8 8F170000 		_UNNEST
 3037              	
 3038              	/******************
 3039              	  Defining words
 3040              	******************/
 3041              	
 3042              	/***********************************
 3043              	    CONSTANT	( u -- //  string> )
 3044              	 	Compile a new constant.
 3045              	************************************/
 3046 34cc 94340000 		_HEADER CONST,8,"CONSTANT"
 3046      08434F4E 
 3046      5354414E 
 3046      540000BF 
 3047 34dc 504700BF 		_NEST 
 3048 34e0 652A0000 		_ADR	TOKEN
 3049 34e4 05330000 		_ADR	SNAME
 3050 34e8 FD330000 		_ADR	OVERT
 3051 34ec 99170000 		_ADR	COMPI_NEST
 3052 34f0 07190000 		_DOLIT	DOCON
 3052      F01D0000 
 3053 34f8 59340000 		_ADR	CALLC
 3054 34fc E52F0000 		_ADR	COMMA
 3055 3500 07190000 		_DOLIT	UNNEST 
 3055      8E170000 
 3056 3508 59340000 		_ADR	CALLC  
 3057 350c 8F170000 		_UNNEST
 3058              	
 3059              		.p2align 2 
 3060              	/****************************************
 3061              	 doDOES> ( -- a )
ARM GAS  forth.s 			page 129


 3062              	 runtime action of DOES> 
 3063              	 leave parameter field address on stack 
 3064              	hidden word used by compiler 
 3065              	***************************************/
 3066              	DODOES:
 3067 3510 504700BF 		_NEST 
 3068 3514 B9190000 		_ADR	RFROM
 3069 3518 991B0000 		_ADR	CELLP 
 3070 351c 591B0000 		_ADR	ONEP  
 3071 3520 191F0000 		_ADR LAST 
 3072 3524 8D190000 		_ADR AT
 3073 3528 812A0000 		_ADR NAMET 
 3074 352c 991B0000 		_ADR CELLP 
 3075 3530 79190000 		_ADR STORE  
 3076 3534 8F170000 		_UNNEST 
 3077              	
 3078              		.p2align 2
 3079              	/**********************
 3080              	  DOES> ( -- )
 3081              	  compile time action
 3082              	*************************/
 3083 3538 D0340000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3083      C5444F45 
 3083      533E00BF 
 3084 3544 504700BF 		_NEST 
 3085 3548 07190000 		_DOLIT DODOES 
 3085      10350000 
 3086 3550 59340000 		_ADR CALLC 
 3087 3554 07190000 		_DOLIT	UNNEST
 3087      8E170000 
 3088 355c 59340000 		_ADR	CALLC 
 3089 3560 99170000 		_ADR COMPI_NEST
 3090 3564 07190000 		_DOLIT RFROM 
 3090      B8190000 
 3091 356c 59340000 		_ADR	CALLC
 3092 3570 8F170000 		_UNNEST 
 3093              	
 3094              	
 3095              	/****************************
 3096              	  DEFER@ ( "name" -- a )
 3097              	  return value of code field 
 3098              	  of defered function. 
 3099              	******************************/
 3100 3574 3C350000 		_HEADER DEFERAT,6,"DEFER@"
 3100      06444546 
 3100      45524000 
 3101 3580 504700BF 		_NEST 
 3102 3584 A52F0000 		_ADR TICK
 3103 3588 991B0000 		_ADR CELLP 
 3104 358c 8D190000 		_ADR AT 
 3105 3590 691B0000 		_ADR ONEM 
 3106 3594 8F170000 		_UNNEST 
 3107              	
 3108              	/*********************************
 3109              	 DEFER! ( "name1" "name2" -- )
 3110              	 assign an action to a defered word 
 3111              	************************************/
ARM GAS  forth.s 			page 130


 3112 3598 78350000 		_HEADER DEFERSTO,6,"DEFER!"
 3112      06444546 
 3112      45522100 
 3113 35a4 504700BF 		_NEST 
 3114 35a8 A52F0000 		_ADR TICK 
 3115 35ac 591B0000 		_ADR ONEP 
 3116 35b0 A52F0000 		_ADR TICK 
 3117 35b4 991B0000 		_ADR CELLP 
 3118 35b8 79190000 		_ADR STORE 
 3119 35bc 8F170000 		_UNNEST
 3120              	
 3121              	/****************************
 3122              	  DEFER ( "name" -- )
 3123              	  create a defered definition
 3124              	*****************************/
 3125 35c0 9C350000 		_HEADER DEFER,5,"DEFER"
 3125      05444546 
 3125      455200BF 
 3126 35cc 504700BF 		_NEST 
 3127 35d0 1D360000 		_ADR CREAT 
 3128 35d4 07190000 		_DOLIT UNNEST 
 3128      8E170000 
 3129 35dc 59340000 		_ADR CALLC 
 3130 35e0 07190000 		_DOLIT DEFER_NOP
 3130      04360000 
 3131 35e8 591B0000 		_ADR ONEP 
 3132 35ec 191F0000 		_ADR LAST 
 3133 35f0 8D190000 		_ADR AT 
 3134 35f4 812A0000 		_ADR NAMET 
 3135 35f8 991B0000 		_ADR CELLP 
 3136 35fc 79190000 		_ADR STORE 
 3137 3600 8F170000 		_UNNEST 
 3138              	DEFER_NOP:
 3139 3604 504700BF 		_NEST  
 3140 3608 05190000 		_ADR NOP 
 3141 360c 8F170000 		_UNNEST 
 3142              	
 3143              	/******************************
 3144              	    CREATE	( -- //  string> )
 3145              	 	Compile a new array entry 
 3146              		without allocating code space.
 3147              	***********************************/
 3148 3610 C4350000 		_HEADER CREAT,6,"CREATE"
 3148      06435245 
 3148      41544500 
 3149 361c 504700BF 		_NEST 
 3150 3620 652A0000 		_ADR	TOKEN
 3151 3624 05330000 		_ADR	SNAME
 3152 3628 FD330000 		_ADR	OVERT
 3153 362c 99170000 		_ADR	COMPI_NEST 
 3154 3630 07190000 		_DOLIT	DOVAR
 3154      E41D0000 
 3155 3638 59340000 		_ADR	CALLC
 3156 363c 8F170000 		_UNNEST
 3157              	
 3158              	/*******************************
 3159              	    VARIABLE	( -- //  string> )
ARM GAS  forth.s 			page 131


 3160              	 	Compile a new variable 
 3161              		initialized to 0.
 3162              	***********************************/
 3163 3640 14360000 		_HEADER VARIA,8,"VARIABLE"
 3163      08564152 
 3163      4941424C 
 3163      450000BF 
 3164 3650 504700BF 		_NEST
 3165 3654 1D360000 		_ADR	CREAT
 3166 3658 07190000 		_DOLIT	0
 3166      00000000 
 3167 3660 E52F0000 		_ADR	COMMA
 3168 3664 07190000 		_DOLIT UNNEST
 3168      8E170000 
 3169 366c 59340000 		_ADR	CALLC  
 3170 3670 8F170000 		_UNNEST
 3171              	
 3172              	/***********
 3173              	  Tools
 3174              	***********/
 3175              	
 3176              	/*************************
 3177              	    dm+	 ( a u -- a )
 3178              	 	Dump u bytes from , 
 3179              		leaving a+u on the stack.
 3180              	hidden word used by DUMP 
 3181              	****************************/
 3182              	DMP:
 3183 3674 504700BF 		_NEST
 3184 3678 5D1A0000 		_ADR	OVER
 3185 367c 07190000 		_DOLIT	4
 3185      04000000 
 3186 3684 99270000 		_ADR	UDOTR			// display address
 3187 3688 65260000 		_ADR	SPACE
 3188 368c E1190000 		_ADR	TOR			// start count down loop
 3189 3690 5B190000 		_BRAN	PDUM2			// skip first pass
 3189      B0360000 
 3190              	PDUM1:
 3191 3698 391A0000 	  _ADR	DUPP
 3192 369c AD190000 		_ADR	CAT
 3193 36a0 07190000 		_DOLIT	3
 3193      03000000 
 3194 36a8 99270000 		_ADR	UDOTR			// display numeric data
 3195 36ac 591B0000 		_ADR	ONEP			// increment address
 3196              	PDUM2:
 3197 36b0 29190000 	  _ADR	DONXT
 3198 36b4 98360000 		.word	PDUM1	// loop till done
 3199 36b8 8F170000 		_UNNEST
 3200              		.p2align 2 
 3201              	//    DUMP	( a u -- )
 3202              	// 	Dump u bytes from a, in a formatted manner.
 3203              	
 3204              	/**********************
 3205              		DUMP ( a n -- )
 3206              		hex dump memory 
 3207              	*********************/
 3208 36bc 44360000 		_HEADER DUMP,4,"DUMP"
ARM GAS  forth.s 			page 132


 3208      0444554D 
 3208      500000BF 
 3209 36c8 504700BF 		_NEST
 3210 36cc 551E0000 		_ADR	BASE
 3211 36d0 8D190000 		_ADR	AT
 3212 36d4 E1190000 		_ADR	TOR
 3213 36d8 79240000 		_ADR	HEX			// save radix,set hex
 3214 36dc 07190000 		_DOLIT	16
 3214      10000000 
 3215 36e4 81200000 		_ADR	SLASH			// change count to lines
 3216 36e8 E1190000 		_ADR	TOR
 3217 36ec 5B190000 		_BRAN	DUMP4			// start count down loop
 3217      1C370000 
 3218              	DUMP1:
 3219 36f4 ED260000 	  _ADR	CR
 3220 36f8 07190000 		_DOLIT	16
 3220      10000000 
 3221 3700 711C0000 		_ADR	DDUP
 3222 3704 75360000 		_ADR	DMP			// display numeric
 3223 3708 211C0000 		_ADR	ROT
 3224 370c 211C0000 		_ADR	ROT
 3225 3710 65260000 		_ADR	SPACE
 3226 3714 65260000 		_ADR	SPACE
 3227 3718 B9260000 		_ADR	TYPEE			// display printable characters
 3228              	DUMP4:
 3229 371c 29190000 	  _DONXT	DUMP1	// loop till done
 3229      F4360000 
 3230              	DUMP3:
 3231 3724 291A0000 		_ADR	DROP
 3232 3728 B9190000 		_ADR	RFROM
 3233 372c 551E0000 		_ADR	BASE
 3234 3730 79190000 		_ADR	STORE			// restore radix
 3235 3734 8F170000 		_UNNEST
 3236              	
 3237              	/**********************
 3238              	   .S	  ( ... -- ... )
 3239              	 	Display the contents 
 3240              		of the data stack.
 3241              	*************************/
 3242 3738 C0360000 		_HEADER DOTS,2,".S"
 3242      022E5300 
 3243 3740 504700BF 		_NEST
 3244 3744 65260000 		_ADR	SPACE
 3245 3748 49210000 		_ADR	DEPTH			// stack depth
 3246 374c E1190000 		_ADR	TOR			// start count down loop
 3247 3750 5B190000 		_BRAN	DOTS2			// skip first pass
 3247      64370000 
 3248              	DOTS1:
 3249 3758 CD190000 		_ADR	RAT
 3250 375c 6D210000 		_ADR	PICK
 3251 3760 F1270000 		_ADR	DOT			// index stack, display contents
 3252              	DOTS2:
 3253 3764 29190000 		_DONXT	DOTS1	// loop till done
 3253      58370000 
 3254 376c 65260000 		_ADR	SPACE
 3255 3770 8F170000 		_UNNEST
 3256              	
ARM GAS  forth.s 			page 133


 3257              	/*****************************
 3258              	    >NAME	( ca -- na | F )
 3259              	 	Convert code address 
 3260              		to a name address.
 3261              	*****************************/
 3262 3774 3C370000 		_HEADER TNAME,5,">NAME"
 3262      053E4E41 
 3262      4D4500BF 
 3263 3780 504700BF 		_NEST
 3264 3784 E1190000 		_ADR	TOR			//  
 3265 3788 DD1E0000 		_ADR	CNTXT			//  va
 3266 378c 8D190000 		_ADR	AT			//  na
 3267              	TNAM1:
 3268 3790 391A0000 		_ADR	DUPP			//  na na
 3269 3794 47190000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3269      C4370000 
 3270 379c 391A0000 		_ADR	DUPP			//  na na
 3271 37a0 812A0000 		_ADR	NAMET			//  na ca
 3272 37a4 CD190000 		_ADR	RAT			//  na ca code
 3273 37a8 A51A0000 		_ADR	XORR			//  na f --
 3274 37ac 47190000 		_QBRAN	TNAM2
 3274      C4370000 
 3275 37b4 A91B0000 		_ADR	CELLM			//  la 
 3276 37b8 8D190000 		_ADR	AT			//  next_na
 3277 37bc 5B190000 		_BRAN	TNAM1
 3277      90370000 
 3278              	TNAM2:	
 3279 37c4 B9190000 		_ADR	RFROM
 3280 37c8 291A0000 		_ADR	DROP			//  0|na --
 3281 37cc 8F170000 		_UNNEST			// 0
 3282              	
 3283              	/********************************
 3284              	    .ID	 ( na -- )
 3285              	 	Display the name at address.
 3286              	********************************/
 3287 37d0 78370000 		_HEADER DOTID,3,".ID"
 3287      032E4944 
 3288 37d8 504700BF 		_NEST
 3289 37dc 0D1C0000 		_ADR	QDUP			// if zero no name
 3290 37e0 47190000 		_QBRAN	DOTI1
 3290      00380000 
 3291 37e8 BD1D0000 		_ADR	COUNT
 3292 37ec 07190000 		_DOLIT	0x1F
 3292      1F000000 
 3293 37f4 7D1A0000 		_ADR	ANDD			// mask lexicon bits
 3294 37f8 B9260000 		_ADR	TYPEE
 3295 37fc 8F170000 		_UNNEST			// display name string
 3296              	DOTI1:
 3297 3800 55270000 		_DOTQP	9," {noName}"
 3297      09207B6E 
 3297      6F4E616D 
 3297      657D00BF 
 3298 3810 8F170000 		_UNNEST
 3299              	
 3300              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3301              	.if WANT_SEE 
 3302              	/*******************************
ARM GAS  forth.s 			page 134


 3303              	    SEE	 ( -- //  string> )
 3304              	 	A simple decompiler.
 3305              	*******************************/
 3306              		_HEADER SEE,3,"SEE"
 3307              		_NEST
 3308              		_ADR	TICK	//  ca --, starting address
 3309              		_ADR	CR	
 3310              		_DOLIT	20
 3311              		_ADR	TOR
 3312              	SEE1:
 3313              		_ADR	CELLP			//  a
 3314              		_ADR	DUPP			//  a a
 3315              		_ADR	DECOMP		//  a
 3316              		_DONXT	SEE1
 3317              		_ADR	DROP
 3318              		_UNNEST
 3319              	
 3320              	/*************************
 3321              	 	DECOMPILE ( a -- )
 3322              	 	Convert code in a.  
 3323              		Display name of command or as data.
 3324              	*************************************/
 3325              		_HEADER DECOMP,9,"DECOMPILE"
 3326              		_NEST
 3327              		_ADR	DUPP			//  a a
 3328              	// 	_ADR	TOR			//  a
 3329              		_ADR	AT			//  a code
 3330              		_ADR	DUPP			//  a code code
 3331              		_DOLIT	0xF800D000 //0xF800F800
 3332              		_ADR	ANDD
 3333              		_DOLIT	0xF000D000 //0xF800F000
 3334              		_ADR	EQUAL			//  a code ?
 3335              		_ADR	INVER 
 3336              		_QBRAN	DECOM2	//  not a command
 3337              		//  a valid_code --, extract address and display name
 3338              		MOVW	IP,#0xFFE
 3339              		MOV	WP,TOS
 3340              		LSL	TOS,TOS,#21		//  get bits 22-12
 3341              		ASR	TOS,TOS,#9		//  with sign extension
 3342              		LSR	WP,WP,#15		//  get bits 11-1
 3343              		AND	WP,WP,IP		//  retain only bits 11-1
 3344              		ORR	TOS,TOS,WP		//  get bits 22-1
 3345              		NOP
 3346              		_ADR	OVER			//  a offset a
 3347              		_ADR	PLUS			//  a target-4
 3348              		_ADR	CELLP			//  a target
 3349              		_ADR	TNAME			//  a na/0 --, is it a name?
 3350              		_ADR	QDUP			//  name address or zero
 3351              		_QBRAN	DECOM1
 3352              		_ADR	SPACE			//  a na
 3353              		_ADR	DOTID			//  a --, display name
 3354              	// 	_ADR	RFROM			//  a
 3355              		_ADR	DROP
 3356              		_UNNEST
 3357              	DECOM1:	// _ADR	RFROM		//  a
 3358              		_ADR	AT			//  data
 3359              		_ADR	UDOT			//  display data
ARM GAS  forth.s 			page 135


 3360              		_UNNEST
 3361              	DECOM2:
 3362              		_ADR	UDOT
 3363              	// 	_ADR	RFROM
 3364              		_ADR	DROP
 3365              		_UNNEST
 3366              	.endif 
 3367              	
 3368              	/*********************
 3369              	    WORDS	( -- )
 3370              	 	Display the names 
 3371              		in the context vocabulary.
 3372              	*******************************/
 3373 3814 D4370000 		_HEADER WORDS,5,"WORDS"
 3373      05574F52 
 3373      445300BF 
 3374 3820 504700BF 		_NEST
 3375 3824 ED260000 		_ADR	CR
 3376 3828 DD1E0000 		_ADR	CNTXT
 3377 382c 8D190000 		_ADR	AT			// only in context
 3378              	WORS1:
 3379 3830 0D1C0000 		_ADR	QDUP			// ?at end of list
 3380 3834 47190000 		_QBRAN	WORS2
 3380      58380000 
 3381 383c 391A0000 		_ADR	DUPP
 3382 3840 65260000 		_ADR	SPACE
 3383 3844 D9370000 		_ADR	DOTID			// display a name
 3384 3848 A91B0000 		_ADR	CELLM
 3385 384c 8D190000 		_ADR	AT
 3386 3850 5B190000 		_BRAN	WORS1
 3386      30380000 
 3387              	WORS2:
 3388 3858 8F170000 		_UNNEST
 3389              	
 3390              	/****************
 3391              	  cold start
 3392              	*****************/
 3393              	
 3394              	/**********************************
 3395              	    VER	 ( -- n )
 3396              	 	Return the version 
 3397              		number of this implementation.
 3398              	hidden word used by COLD
 3399              	**********************************/
 3400              	VERSN:
 3401 385c 504700BF 		_NEST
 3402 3860 07190000 		_DOLIT	VER*256+EXT
 3402      00010000 
 3403 3868 8F170000 		_UNNEST
 3404              	
 3405              	/*********************
 3406              	    hi	  ( -- )
 3407              	 	Display the sign-on 
 3408              		message.
 3409              	***********************/
 3410 386c 18380000 		_HEADER HI,2,"HI"
 3410      02484900 
ARM GAS  forth.s 			page 136


 3411 3874 504700BF 		_NEST
 3412 3878 ED260000 		_ADR	CR	// initialize I/O
 3413 387c 55270000 		_DOTQP	17, "beyond Jupiter, v" 
 3413      11626579 
 3413      6F6E6420 
 3413      4A757069 
 3413      7465722C 
 3414 3894 551E0000 		_ADR	BASE
 3415 3898 8D190000 		_ADR	AT
 3416 389c 79240000 		_ADR	HEX	// save radix
 3417 38a0 5D380000 		_ADR	VERSN
 3418 38a4 69230000 		_ADR	BDIGS
 3419 38a8 B5230000 		_ADR	DIG
 3420 38ac B5230000 		_ADR	DIG
 3421 38b0 07190000 		_DOLIT	'.'
 3421      2E000000 
 3422 38b8 89230000 		_ADR	HOLD
 3423 38bc D5230000 		_ADR	DIGS
 3424 38c0 29240000 		_ADR	EDIGS
 3425 38c4 B9260000 		_ADR	TYPEE	// format version number
 3426 38c8 551E0000 		_ADR	BASE
 3427 38cc 79190000 		_ADR	STORE
 3428 38d0 ED260000 		_ADR	CR
 3429 38d4 8F170000 		_UNNEST			// restore radix
 3430              	
 3431              	/**********************
 3432              	 check if PS2 keyboard 
 3433              	 present.
 3434              	**********************/
 3435              	PS2_QUERY:
 3436 38d8 504700BF 		_NEST 
 3437 38dc 8D150000 		_ADR KBD_RST
 3438 38e0 07190000 		_DOLIT BAT_OK 
 3438      AA000000 
 3439 38e8 A51A0000 		_ADR XORR  
 3440 38ec 47190000 		_QBRAN 9f  
 3440      20390000 
 3441              	// no ps2 keyboard 
 3442              	// swith to serial console
 3443 38f4 ED260000 		_ADR CR 
 3444 38f8 55270000 		_DOTQP 25,"no PS2 keyboard detected."
 3444      196E6F20 
 3444      50533220 
 3444      6B657962 
 3444      6F617264 
 3445 3918 B9050000 		_ADR SERIAL 
 3446 391c D1050000 		_ADR CONSOLE 
 3447 3920 8F170000 	9:	_UNNEST 
 3448              	
 3449              	/*************************
 3450              	   check PA8 to 
 3451              	   select console 
 3452              	   PA8 -> low  LOCAL 
 3453              	   PA8 -> high SERIAL 
 3454              	*************************/
 3455              	IF_SENSE:
 3456 3924 504700BF 		_NEST 
ARM GAS  forth.s 			page 137


 3457 3928 A1050000 		_ADR LOCAL 
 3458 392c 07190000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3458      10000240 
 3459 3934 8D190000 		_ADR AT 
 3460 3938 07190000 		_DOLIT (1<<8)
 3460      00010000 
 3461 3940 7D1A0000 		_ADR ANDD 
 3462 3944 47190000 		_QBRAN 9f 
 3462      50390000 
 3463 394c 591B0000 		_ADR ONEP 
 3464 3950 D1050000 	9:  _ADR CONSOLE 
 3465 3954 8F170000 		_UNNEST 
 3466              	
 3467              	
 3468              	/********************
 3469              	    COLD	( -- )
 3470              	 	The high level cold 
 3471              		start sequence.
 3472              	**************************/
 3473 3958 70380000 		.word	LINK 
 3474              		LINK = . 
 3475 395c 04       	_LASTN:	.byte  4
 3476 395d 434F4C44 		.ascii "COLD"
 3477 3961 0000BF   		.p2align 2	
 3478              	COLD:
 3479 3964 00B5FCF7 		_CALL forth_init 
 3479      FFFB5DF8 
 3479      04EB
 3480 396e DFF854C0 		ldr IP,=COLD1 
 3481 3972 FDF709BF 		_NEXT
 3482 3976 00BF     		.p2align 2 
 3483              	COLD1:
 3484 3978 07190000 		_DOLIT  0 
 3484      00000000 
 3485 3980 DD180000 		_ADR ULED // turn off user LED 
 3486 3984 07190000 		_DOLIT	UZERO
 3486      F4030000 
 3487 398c 07190000 		_DOLIT	UPP
 3487      00000020 
 3488 3994 07190000 		_DOLIT	ULAST-UZERO
 3488      A8000000 
 3489 399c 35220000 		_ADR	MOVE 			// initialize user area
 3490 39a0 052F0000 		_ADR	PRESE			// initialize stack and TIB
 3491 39a4 25390000 		_ADR	IF_SENSE 
 3492 39a8 D9380000 		_ADR 	PS2_QUERY  
 3493 39ac 411E0000 		_ADR	TBOOT
 3494 39b0 E5210000 		_ADR	ATEXE			// application boot
 3495 39b4 FD330000 		_ADR	OVERT
 3496 39b8 5B190000 		_BRAN	QUIT			// start interpretation
 3496      242F0000 
 3497              	COLD2:
 3498              		.p2align 2 	
 3499              	CTOP:
 3500 39c0 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3501              	
 3502              	
 3503 39c4 78390000 	  .end 
ARM GAS  forth.s 			page 138


ARM GAS  forth.s 			page 139


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 140


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
ARM GAS  forth.s 			page 141


     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:181    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:182    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:183    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:184    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:185    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:186    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:187    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:188    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:189    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:190    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:191    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:192    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:193    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:194    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:195    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:196    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:197    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:198    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:199    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:200    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:201    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:202    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:203    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:204    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:205    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:206    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:207    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:208    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:209    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:210    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:211    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:212    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:213    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:214    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:215    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:216    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:217    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:218    *ABS*:0000000000000314 NVIC_IABR5
ARM GAS  forth.s 			page 142


     stm32f411ce.inc:219    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:220    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:222    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:225    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:226    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:227    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:228    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:229    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:230    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:231    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:232    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:233    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:236    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:237    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:238    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:239    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:240    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:241    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:244    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:245    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:246    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:247    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:248    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:249    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:261    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:272    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:278    *ABS*:000000000000003a DMAS2_IRQ
ARM GAS  forth.s 			page 143


     stm32f411ce.inc:279    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:280    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:281    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:282    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:288    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:289    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:290    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:294    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:295    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:296    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:297    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:299    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:300    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:301    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:302    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:306    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:309    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:310    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:311    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:312    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:313    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:314    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:315    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:316    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:317    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:318    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:319    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:320    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:321    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:322    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:323    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:324    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:325    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:326    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:327    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:328    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:331    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:333    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:334    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:335    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:336    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:337    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:338    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:339    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:342    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:344    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:345    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:346    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:347    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:348    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:349    *ABS*:0000000000000014 EXTI_PR
ARM GAS  forth.s 			page 144


          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
             forth.s:2493   .text:0000000000002ec0 EVAL
             forth.s:1520   .text:0000000000002388 HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
ARM GAS  forth.s 			page 145


          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:122    .text:00000000000007c8 tv_out_isr
          ser-term.s:35     .text:00000000000004ac uart_rx_handler
           ps2_kbd.s:77     .text:000000000000109c kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:97     .text:0000000000001788 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2514   .text:0000000000002f04 PRESE
             forth.s:280    .text:0000000000001906 DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:893    .text:0000000000001dbc COUNT
             forth.s:1784   .text:00000000000026b8 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:449    .text:0000000000001a38 DUPP
             forth.s:405    .text:00000000000019e0 TOR
             forth.s:980    .text:0000000000001e54 BASE
             forth.s:351    .text:0000000000001978 STORE
             forth.s:1922   .text:00000000000027f0 DOT
             forth.s:387    .text:00000000000019b8 RFROM
             forth.s:484    .text:0000000000001a7c ANDD
             forth.s:321    .text:0000000000001946 QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:165    .text:0000000000001810 EMIT
             forth.s:1756   .text:0000000000002664 SPACE
              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:1802   .text:00000000000026ec CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:384    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004da ser_init
             tvout.s:66     .text:0000000000000718 tv_init
           ps2_kbd.s:306    .text:00000000000012bc kbd_init
         spi-flash.s:39     .text:00000000000016b4 flash_spi_init
             forth.s:3478   .text:0000000000003964 COLD
             forth.s:93     .text:0000000000001780 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
ARM GAS  forth.s 			page 146


              init.s:474    .text:0000000000000332 gpio_config
              init.s:549    .text:00000000000003de gpio_out
              init.s:409    .text:00000000000002a8 nvic_set_priority
              init.s:564    .text:00000000000003f4 UZERO
              init.s:600    .text:000000000000049c ULAST
              init.s:418    .text:00000000000002c0 negative_irq
              init.s:430    .text:00000000000002da nvic_enable_irq
              init.s:447    .text:0000000000000304 nvic_disable_irq
              init.s:511    .text:000000000000039a input_pull
              init.s:504    .text:0000000000000388 output_type
              init.s:527    .text:00000000000003b0 gpio_speed
              init.s:565    .text:00000000000003f4 $d
             forth.s:3410   .text:0000000000003874 HI
           ps2_kbd.s:391    .text:00000000000013a8 PS2_QKEY
             tvout.s:550    .text:0000000000000c80 TV_EMIT
             forth.s:2430   .text:0000000000002ddc INTER
             forth.s:3475   .text:000000000000395c _LASTN
             forth.s:3499   .text:00000000000039c0 CTOP
             forth.s:3474   .text:000000000000395c LINK
              init.s:605    .text:000000000000049c $d
          ser-term.s:33     .text:00000000000004ac $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000532 $d
          ser-term.s:90     .text:0000000000000536 _SER_QKEY
          ser-term.s:90     .text:0000000000000540 SER_QKEY
          ser-term.s:110    .text:000000000000056c $d
          ser-term.s:110    .text:0000000000000570 _SER_EMIT
          ser-term.s:110    .text:000000000000057c SER_EMIT
          ser-term.s:124    .text:0000000000000596 $d
          ser-term.s:124    .text:000000000000059a _LOCAL
          ser-term.s:124    .text:00000000000005a0 $t
          ser-term.s:124    .text:00000000000005a0 LOCAL
          ser-term.s:133    .text:00000000000005ac $d
          ser-term.s:133    .text:00000000000005b0 _SERIAL
          ser-term.s:133    .text:00000000000005b8 SERIAL
          ser-term.s:142    .text:00000000000005c4 $d
          ser-term.s:142    .text:00000000000005c8 _CONSOLE
          ser-term.s:142    .text:00000000000005d0 $t
          ser-term.s:142    .text:00000000000005d0 CONSOLE
          ser-term.s:164    .text:00000000000005f0 $d
          ser-term.s:164    .text:00000000000005f4 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000600 ANSI_PARAM
          ser-term.s:166    .text:0000000000000604 $d
             forth.s:590    .text:0000000000001b58 ONEP
             forth.s:1201   .text:0000000000002048 SLMOD
             forth.s:679    .text:0000000000001c0c QDUP
             forth.s:336    .text:000000000000195a BRAN
             forth.s:541    .text:0000000000001afc PLUS
             forth.s:598    .text:0000000000001b68 ONEM
             forth.s:100    .text:000000000000178e UNNEST
          ser-term.s:191    .text:0000000000000670 _ANSI_ESC
          ser-term.s:191    .text:0000000000000678 ANSI_ESC
          ser-term.s:193    .text:000000000000067c $d
          ser-term.s:203    .text:000000000000069c _SER_AT
          ser-term.s:203    .text:00000000000006a4 SER_AT
          ser-term.s:205    .text:00000000000006a8 $d
             forth.s:457    .text:0000000000001a48 SWAP
ARM GAS  forth.s 			page 147


          ser-term.s:219    .text:00000000000006d8 _SER_CLS
          ser-term.s:219    .text:00000000000006e0 $t
          ser-term.s:219    .text:00000000000006e0 SER_CLS
          ser-term.s:221    .text:00000000000006e4 $d
          ser-term.s:228    .text:0000000000000708 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:66     .text:0000000000000718 $t
             tvout.s:141    .text:00000000000007f4 state_vsync
             tvout.s:182    .text:0000000000000848 state_pre_video
             tvout.s:193    .text:000000000000085a state_video_out
             tvout.s:223    .text:00000000000008b2 state_post_video
             tvout.s:240    .text:00000000000008d8 tv_isr_exit
             tvout.s:171    .text:000000000000082e sync_end
             tvout.s:232    .text:00000000000008c4 frame_end
             tvout.s:250    .text:00000000000008da $d
             tvout.s:250    .text:00000000000008de _BACKCOLOR
             tvout.s:250    .text:00000000000008ec BACKCOLOR
             tvout.s:257    .text:00000000000008f8 $d
             tvout.s:257    .text:00000000000008fc _PENCOLOR
             tvout.s:257    .text:0000000000000906 $t
             tvout.s:257    .text:0000000000000908 PENCOLOR
             tvout.s:264    .text:0000000000000914 $d
             tvout.s:264    .text:0000000000000918 _CURSOR_COL
             tvout.s:264    .text:0000000000000920 CURSOR_COL
             tvout.s:271    .text:000000000000092c $d
             tvout.s:271    .text:0000000000000930 _CURSOR_ROW
             tvout.s:271    .text:0000000000000934 $t
             tvout.s:271    .text:0000000000000934 CURSOR_ROW
             tvout.s:278    .text:0000000000000940 $d
             tvout.s:278    .text:0000000000000944 _ROWY
             tvout.s:278    .text:000000000000094a $t
             tvout.s:278    .text:000000000000094c ROWY
             tvout.s:285    .text:0000000000000958 $d
ARM GAS  forth.s 			page 148


             tvout.s:285    .text:000000000000095c _COLX
             tvout.s:285    .text:0000000000000962 $t
             tvout.s:285    .text:0000000000000964 COLX
             tvout.s:292    .text:0000000000000970 $d
             tvout.s:292    .text:0000000000000974 _FONT
             tvout.s:292    .text:000000000000097c FONT
             tvout.s:725    .rodata:0000000000000000 font_6x8
             tvout.s:299    .text:0000000000000988 $d
             tvout.s:299    .text:000000000000098c _VIDBUFF
             tvout.s:299    .text:0000000000000994 $t
             tvout.s:299    .text:0000000000000994 VIDBUFF
             tvout.s:311    .text:000000000000099e $d
             tvout.s:311    .text:00000000000009a2 _PLOT
             tvout.s:311    .text:00000000000009a8 PLOT
             tvout.s:359    .text:0000000000000a2c plot_op
             tvout.s:327    .text:00000000000009d4 op_back
             tvout.s:336    .text:00000000000009ee op_pen
             tvout.s:345    .text:0000000000000a08 op_invert
             tvout.s:349    .text:0000000000000a10 op_xor
             tvout.s:359    .text:0000000000000a2c $d
             tvout.s:364    .text:0000000000000a34 _VSYNC
             tvout.s:364    .text:0000000000000a3a $t
             tvout.s:364    .text:0000000000000a3c VSYNC
             tvout.s:372    .text:0000000000000a46 $d
             tvout.s:372    .text:0000000000000a4a _CLS
             tvout.s:372    .text:0000000000000a4e $t
             tvout.s:372    .text:0000000000000a50 CLS
             tvout.s:396    .text:0000000000000a92 $d
             tvout.s:396    .text:0000000000000a96 _CLRLINE
             tvout.s:396    .text:0000000000000a9e $t
             tvout.s:396    .text:0000000000000aa0 CLRLINE
             tvout.s:398    .text:0000000000000aa4 $d
             forth.s:559    .text:0000000000001b1c STAR
             forth.s:1428   .text:000000000000227c FILL
             tvout.s:413    .text:0000000000000ad8 _SCROLLUP
             tvout.s:413    .text:0000000000000ae4 SCROLLUP
             tvout.s:415    .text:0000000000000ae8 $d
             forth.s:550    .text:0000000000001b0c SUBB
             forth.s:1396   .text:0000000000002234 MOVE
             tvout.s:434    .text:0000000000000b30 _SCROLLDOWN
             tvout.s:434    .text:0000000000000b3c SCROLLDOWN
             tvout.s:436    .text:0000000000000b40 $d
             tvout.s:453    .text:0000000000000b80 _TV_CRLF
             tvout.s:453    .text:0000000000000b88 $t
             tvout.s:453    .text:0000000000000b88 TV_CRLF
             tvout.s:468    .text:0000000000000baa $d
             tvout.s:468    .text:0000000000000bae _RIGHT
             tvout.s:468    .text:0000000000000bb4 $t
             tvout.s:468    .text:0000000000000bb4 RIGHT
             tvout.s:481    .text:0000000000000bc8 $d
             tvout.s:481    .text:0000000000000bcc _LEFT
             tvout.s:481    .text:0000000000000bd4 LEFT
             tvout.s:496    .text:0000000000000bfc FONT_PIXEL
             tvout.s:503    .text:0000000000000c0c INCR_X
             tvout.s:510    .text:0000000000000c18 NEXT_PIXEL
             tvout.s:519    .text:0000000000000c20 CHAR_ROW
             tvout.s:521    .text:0000000000000c24 $d
ARM GAS  forth.s 			page 149


             forth.s:729    .text:0000000000001c70 DDUP
             forth.s:396    .text:00000000000019cc RAT
             forth.s:302    .text:0000000000001928 DONXT
             forth.s:720    .text:0000000000001c5c TDROP
             tvout.s:538    .text:0000000000000c60 CHAR_FONT
             tvout.s:539    .text:0000000000000c60 $t
             tvout.s:550    .text:0000000000000c74 $d
             tvout.s:550    .text:0000000000000c78 _TV_EMIT
             tvout.s:550    .text:0000000000000c80 $t
             tvout.s:552    .text:0000000000000c84 $d
             forth.s:801    .text:0000000000001d04 ULESS
             tvout.s:580    .text:0000000000000d08 CTRL_KEY
             forth.s:361    .text:000000000000198c AT
             forth.s:689    .text:0000000000001c20 ROT
             forth.s:379    .text:00000000000019ac CAT
             tvout.s:647    .text:0000000000000df0 SHOW_CURSOR
             tvout.s:678    .text:0000000000000e78 HIDE_CURSOR
             forth.s:789    .text:0000000000001cec EQUAL
             tvout.s:637    .text:0000000000000dd0 BACK_SPACE
             forth.s:441    .text:0000000000001a28 DROP
             tvout.s:605    .text:0000000000000d78 CAR_RET
             tvout.s:616    .text:0000000000000d90 LN_FEED
             tvout.s:606    .text:0000000000000d78 $t
             tvout.s:607    .text:0000000000000d7c $d
             tvout.s:617    .text:0000000000000d90 $t
             tvout.s:618    .text:0000000000000d94 $d
             forth.s:502    .text:0000000000001aa4 XORR
             tvout.s:638    .text:0000000000000dd0 $t
             tvout.s:639    .text:0000000000000dd4 $d
             tvout.s:647    .text:0000000000000de4 _SHOW_CURSOR
             tvout.s:647    .text:0000000000000df0 $t
             tvout.s:650    .text:0000000000000df4 $d
             forth.s:671    .text:0000000000001bfc TWOSL
             forth.s:369    .text:0000000000001998 CSTOR
             forth.s:711    .text:0000000000001c48 DDROP
             tvout.s:678    .text:0000000000000e6c _HIDE_CURSOR
             tvout.s:678    .text:0000000000000e78 $t
             tvout.s:681    .text:0000000000000e7c $d
             forth.s:532    .text:0000000000001aec LSHIFT
             forth.s:493    .text:0000000000001a90 ORR
             tvout.s:691    .text:0000000000000ea4 _TV_AT
             tvout.s:691    .text:0000000000000eaa $t
             tvout.s:691    .text:0000000000000eac TV_AT
             tvout.s:706    .text:0000000000000ed0 $d
             tvout.s:706    .text:0000000000000ed4 _INPUT
             tvout.s:706    .text:0000000000000eda $t
             tvout.s:706    .text:0000000000000edc INPUT
             tvout.s:708    .text:0000000000000ee0 $d
             forth.s:1340   .text:00000000000021ac PAD
             forth.s:2338   .text:0000000000002cc8 ACCEP
             forth.s:467    .text:0000000000001a5c OVER
             tvout.s:721    .rodata:0000000000000000 $d
             tvout.s:826    .text:0000000000000f0c $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
ARM GAS  forth.s 			page 150


       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
ARM GAS  forth.s 			page 151


       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
ARM GAS  forth.s 			page 152


       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f18 sc_ascii
         mcSaite.inc:100    .text:0000000000000fcc shifted
         mcSaite.inc:151    .text:000000000000102c altchar
         mcSaite.inc:167    .text:000000000000103c extended
         mcSaite.inc:191    .text:0000000000001064 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000c KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000b KBD_CLOCK_PIN
           ps2_kbd.s:77     .text:000000000000109a $t
           ps2_kbd.s:178    .text:00000000000011c6 send_bit
           ps2_kbd.s:106    .text:00000000000010fc start_bit
           ps2_kbd.s:117    .text:0000000000001120 parity_bit
           ps2_kbd.s:124    .text:0000000000001134 stop_bit
           ps2_kbd.s:151    .text:000000000000118a store_code
           ps2_kbd.s:252    .text:000000000000125a do_async_key
           ps2_kbd.s:203    .text:000000000000120a send_parity
           ps2_kbd.s:210    .text:000000000000121c send_stop
           ps2_kbd.s:217    .text:0000000000001226 rx_ack_bit
           ps2_kbd.s:235    .text:0000000000001246 is_async_key
           ps2_kbd.s:285    .text:00000000000012aa async_keys
           ps2_kbd.s:373    .text:000000000000137e table_scan
           ps2_kbd.s:259    .text:000000000000126c set_async_key
           ps2_kbd.s:294    .text:00000000000012b8 async_jump
           ps2_kbd.s:264    .text:000000000000127a shift_key
           ps2_kbd.s:272    .text:000000000000128a set_reset
           ps2_kbd.s:267    .text:0000000000001280 ctrl_key
           ps2_kbd.s:270    .text:0000000000001286 alt_key
           ps2_kbd.s:286    .text:00000000000012aa $d
           ps2_kbd.s:335    .text:000000000000132a $d
           ps2_kbd.s:335    .text:000000000000132e _KEY_ASYNC
ARM GAS  forth.s 			page 153


           ps2_kbd.s:335    .text:0000000000001338 $t
           ps2_kbd.s:335    .text:0000000000001338 KEY_ASYNC
           ps2_kbd.s:345    .text:0000000000001346 keycode
           ps2_kbd.s:360    .text:000000000000136e wait_code
           ps2_kbd.s:391    .text:0000000000001398 $d
           ps2_kbd.s:391    .text:000000000000139c _PS2_QKEY
           ps2_kbd.s:411    .text:00000000000013f4 inkey_exit
           ps2_kbd.s:413    .text:00000000000013f6 pause_key
           ps2_kbd.s:422    .text:000000000000140a do_modifiers
           ps2_kbd.s:431    .text:0000000000001422 shift_down
           ps2_kbd.s:435    .text:0000000000001428 altchar_down
           ps2_kbd.s:439    .text:000000000000142e ctrl_down
           ps2_kbd.s:447    .text:000000000000144a do_capslock
           ps2_kbd.s:473    .text:000000000000146e kbd_send
           ps2_kbd.s:548    .text:0000000000001562 kbd_clear_queue
           ps2_kbd.s:562    .text:0000000000001580 $d
           ps2_kbd.s:562    .text:0000000000001584 _KBD_RST
           ps2_kbd.s:562    .text:000000000000158c $t
           ps2_kbd.s:562    .text:000000000000158c KBD_RST
           ps2_kbd.s:586    .text:00000000000015d4 $d
           ps2_kbd.s:586    .text:00000000000015d8 _KBD_LED
           ps2_kbd.s:586    .text:00000000000015e0 $t
           ps2_kbd.s:586    .text:00000000000015e0 KBD_LED
           ps2_kbd.s:611    .text:0000000000001632 $d
           ps2_kbd.s:611    .text:0000000000001636 _CAPS_LED
           ps2_kbd.s:611    .text:0000000000001640 CAPS_LED
           ps2_kbd.s:628    .text:0000000000001668 $d
           ps2_kbd.s:628    .text:000000000000166c _WKEY
           ps2_kbd.s:628    .text:0000000000001678 WKEY
           ps2_kbd.s:630    .text:000000000000167c $d
           ps2_kbd.s:635    .text:0000000000001694 $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016b4 $t
         spi-flash.s:68     .text:000000000000171e $d
         spi-flash.s:68     .text:0000000000001722 _CHIPSEL
         spi-flash.s:68     .text:000000000000172c CHIPSEL
         spi-flash.s:80     .text:0000000000001748 $d
         spi-flash.s:80     .text:000000000000174c _CHIPDSEL
         spi-flash.s:80     .text:0000000000001756 $t
         spi-flash.s:80     .text:0000000000001758 CHIPDSEL
             forth.s:83     .text:0000000000001774 TPUSH
             forth.s:88     .text:000000000000177a TPOP
             forth.s:113    .text:0000000000001798 COMPI_NEST
             forth.s:126    .text:00000000000017b6 TSTDIN
             forth.s:133    .text:00000000000017c0 TSTDOUT
             forth.s:142    .text:00000000000017ca $d
             forth.s:142    .text:00000000000017ce _QKEY
             forth.s:142    .text:00000000000017d4 QKEY
             forth.s:143    .text:00000000000017d4 QRX
             forth.s:145    .text:00000000000017d8 $d
             forth.s:1363   .text:00000000000021e4 ATEXE
             forth.s:153    .text:00000000000017e8 _KEY
             forth.s:153    .text:00000000000017ec $t
             forth.s:153    .text:00000000000017ec KEY
ARM GAS  forth.s 			page 154


             forth.s:155    .text:00000000000017f0 KEY1
             forth.s:156    .text:00000000000017f0 $d
             forth.s:165    .text:0000000000001808 _EMIT
             forth.s:166    .text:0000000000001810 TECHO
             forth.s:168    .text:0000000000001814 $d
             forth.s:202    .text:0000000000001824 _RAND
             forth.s:202    .text:000000000000182c RAND
             forth.s:204    .text:0000000000001830 $d
             forth.s:768    .text:0000000000001cc4 ABSS
             forth.s:944    .text:0000000000001e04 SEED
             forth.s:523    .text:0000000000001ad4 RSHIFT
             forth.s:1214   .text:0000000000002068 MODD
             forth.s:233    .text:00000000000018a0 _PAUSE
             forth.s:233    .text:00000000000018a6 $t
             forth.s:233    .text:00000000000018a8 PAUSE
             forth.s:235    .text:00000000000018ac $d
             forth.s:962    .text:0000000000001e2c TIMER
             forth.s:237    .text:00000000000018b4 PAUSE_LOOP
             forth.s:242    .text:00000000000018cc PAUSE_EXIT
             forth.s:249    .text:00000000000018d4 _ULED
             forth.s:249    .text:00000000000018dc ULED
             forth.s:258    .text:00000000000018f8 ULED_OFF
             forth.s:272    .text:00000000000018fc $d
             forth.s:272    .text:0000000000001900 _NOP
             forth.s:272    .text:0000000000001904 $t
             forth.s:272    .text:0000000000001904 NOP
             forth.s:289    .text:0000000000001910 $d
             forth.s:289    .text:0000000000001914 _EXECU
             forth.s:289    .text:000000000000191c $t
             forth.s:289    .text:000000000000191c EXECU
             forth.s:309    .text:0000000000001938 NEXT1
             forth.s:327    .text:0000000000001954 QBRAN1
             forth.s:344    .text:0000000000001960 $d
             forth.s:344    .text:0000000000001964 _EXIT
             forth.s:344    .text:000000000000196c EXIT
             forth.s:345    .text:000000000000196c $d
             forth.s:351    .text:0000000000001974 _STORE
             forth.s:351    .text:0000000000001976 $t
             forth.s:361    .text:0000000000001984 $d
             forth.s:361    .text:0000000000001988 _AT
             forth.s:361    .text:000000000000198a $t
             forth.s:369    .text:0000000000001990 $d
             forth.s:369    .text:0000000000001994 _CSTOR
             forth.s:379    .text:00000000000019a4 $d
             forth.s:379    .text:00000000000019a8 _CAT
             forth.s:387    .text:00000000000019b0 $d
             forth.s:387    .text:00000000000019b4 _RFROM
             forth.s:396    .text:00000000000019c2 $d
             forth.s:396    .text:00000000000019c6 _RAT
             forth.s:405    .text:00000000000019d6 $d
             forth.s:405    .text:00000000000019da _TOR
             forth.s:414    .text:00000000000019ea $d
             forth.s:414    .text:00000000000019ee _RPSTOR
             forth.s:414    .text:00000000000019f2 $t
             forth.s:414    .text:00000000000019f4 RPSTOR
             forth.s:423    .text:00000000000019fc $d
             forth.s:423    .text:0000000000001a00 _SPSTOR
ARM GAS  forth.s 			page 155


             forth.s:423    .text:0000000000001a04 $t
             forth.s:423    .text:0000000000001a04 SPSTOR
             forth.s:432    .text:0000000000001a0c $d
             forth.s:432    .text:0000000000001a10 _SPAT
             forth.s:432    .text:0000000000001a14 $t
             forth.s:432    .text:0000000000001a14 SPAT
             forth.s:441    .text:0000000000001a1c $d
             forth.s:441    .text:0000000000001a20 _DROP
             forth.s:449    .text:0000000000001a2e $d
             forth.s:449    .text:0000000000001a32 _DUPP
             forth.s:449    .text:0000000000001a36 $t
             forth.s:457    .text:0000000000001a3e $d
             forth.s:457    .text:0000000000001a42 _SWAP
             forth.s:467    .text:0000000000001a50 $d
             forth.s:467    .text:0000000000001a54 _OVER
             forth.s:476    .text:0000000000001a64 $d
             forth.s:476    .text:0000000000001a68 _ZLESS
             forth.s:476    .text:0000000000001a6c ZLESS
             forth.s:484    .text:0000000000001a72 $d
             forth.s:484    .text:0000000000001a76 _ANDD
             forth.s:484    .text:0000000000001a7a $t
             forth.s:493    .text:0000000000001a86 $d
             forth.s:493    .text:0000000000001a8a _ORR
             forth.s:502    .text:0000000000001a9a $d
             forth.s:502    .text:0000000000001a9e _XORR
             forth.s:502    .text:0000000000001aa2 $t
             forth.s:511    .text:0000000000001aae $d
             forth.s:511    .text:0000000000001ab2 _UPLUS
             forth.s:511    .text:0000000000001ab6 $t
             forth.s:511    .text:0000000000001ab8 UPLUS
             forth.s:523    .text:0000000000001ac8 $d
             forth.s:523    .text:0000000000001acc _RSHIFT
             forth.s:532    .text:0000000000001ade $d
             forth.s:532    .text:0000000000001ae2 _LSHIFT
             forth.s:541    .text:0000000000001af6 $d
             forth.s:541    .text:0000000000001afa _PLUS
             forth.s:541    .text:0000000000001afc $t
             forth.s:550    .text:0000000000001b04 $d
             forth.s:550    .text:0000000000001b08 _SUBB
             forth.s:550    .text:0000000000001b0a $t
             forth.s:559    .text:0000000000001b16 $d
             forth.s:559    .text:0000000000001b1a _STAR
             forth.s:559    .text:0000000000001b1c $t
             forth.s:568    .text:0000000000001b26 $d
             forth.s:568    .text:0000000000001b2a _UMSTA
             forth.s:568    .text:0000000000001b2e $t
             forth.s:568    .text:0000000000001b30 UMSTA
             forth.s:579    .text:0000000000001b3c $d
             forth.s:579    .text:0000000000001b40 _MSTAR
             forth.s:579    .text:0000000000001b44 MSTAR
             forth.s:590    .text:0000000000001b50 $d
             forth.s:590    .text:0000000000001b54 _ONEP
             forth.s:598    .text:0000000000001b5e $d
             forth.s:598    .text:0000000000001b62 _ONEM
             forth.s:606    .text:0000000000001b6e $d
             forth.s:606    .text:0000000000001b72 _TWOP
             forth.s:606    .text:0000000000001b78 TWOP
ARM GAS  forth.s 			page 156


             forth.s:614    .text:0000000000001b7e $d
             forth.s:614    .text:0000000000001b82 _TWOM
             forth.s:614    .text:0000000000001b88 TWOM
             forth.s:622    .text:0000000000001b8e $d
             forth.s:622    .text:0000000000001b92 _CELLP
             forth.s:622    .text:0000000000001b98 $t
             forth.s:622    .text:0000000000001b98 CELLP
             forth.s:630    .text:0000000000001b9e $d
             forth.s:630    .text:0000000000001ba2 _CELLM
             forth.s:630    .text:0000000000001ba8 $t
             forth.s:630    .text:0000000000001ba8 CELLM
             forth.s:638    .text:0000000000001bae $d
             forth.s:638    .text:0000000000001bb2 _BLANK
             forth.s:638    .text:0000000000001bb8 BLANK
             forth.s:647    .text:0000000000001bc2 $d
             forth.s:647    .text:0000000000001bc6 _CELLS
             forth.s:647    .text:0000000000001bcc $t
             forth.s:647    .text:0000000000001bcc CELLS
             forth.s:655    .text:0000000000001bd2 $d
             forth.s:655    .text:0000000000001bd6 _CELLSL
             forth.s:655    .text:0000000000001bdc $t
             forth.s:655    .text:0000000000001bdc CELLSL
             forth.s:663    .text:0000000000001be2 $d
             forth.s:663    .text:0000000000001be6 _TWOST
             forth.s:663    .text:0000000000001bec TWOST
             forth.s:671    .text:0000000000001bf2 $d
             forth.s:671    .text:0000000000001bf6 _TWOSL
             forth.s:679    .text:0000000000001c02 $d
             forth.s:679    .text:0000000000001c06 _QDUP
             forth.s:689    .text:0000000000001c16 $d
             forth.s:689    .text:0000000000001c1a _ROT
             forth.s:689    .text:0000000000001c1e $t
             forth.s:700    .text:0000000000001c2a $d
             forth.s:700    .text:0000000000001c2e _NROT
             forth.s:700    .text:0000000000001c34 NROT
             forth.s:711    .text:0000000000001c3e $d
             forth.s:711    .text:0000000000001c42 _DDROP
             forth.s:711    .text:0000000000001c48 $t
             forth.s:720    .text:0000000000001c52 $d
             forth.s:720    .text:0000000000001c56 _TDROP
             forth.s:720    .text:0000000000001c5c $t
             forth.s:729    .text:0000000000001c66 $d
             forth.s:729    .text:0000000000001c6a _DDUP
             forth.s:739    .text:0000000000001c7c $d
             forth.s:739    .text:0000000000001c80 _DPLUS
             forth.s:739    .text:0000000000001c84 DPLUS
             forth.s:752    .text:0000000000001c98 $d
             forth.s:752    .text:0000000000001c9c _INVER
             forth.s:752    .text:0000000000001ca0 $t
             forth.s:752    .text:0000000000001ca0 INVER
             forth.s:760    .text:0000000000001ca6 $d
             forth.s:760    .text:0000000000001caa _NEGAT
             forth.s:760    .text:0000000000001cb4 NEGAT
             forth.s:768    .text:0000000000001cba $d
             forth.s:768    .text:0000000000001cbe _ABSS
             forth.s:768    .text:0000000000001cc2 $t
             forth.s:778    .text:0000000000001cce $d
ARM GAS  forth.s 			page 157


             forth.s:778    .text:0000000000001cd2 _ZEQUAL
             forth.s:778    .text:0000000000001cd8 ZEQUAL
             forth.s:789    .text:0000000000001ce6 $d
             forth.s:789    .text:0000000000001cea _EQUAL
             forth.s:789    .text:0000000000001cec $t
             forth.s:801    .text:0000000000001cfc $d
             forth.s:801    .text:0000000000001d00 _ULESS
             forth.s:813    .text:0000000000001d14 $d
             forth.s:813    .text:0000000000001d18 _LESS
             forth.s:813    .text:0000000000001d1a $t
             forth.s:813    .text:0000000000001d1c LESS
             forth.s:825    .text:0000000000001d2c $d
             forth.s:825    .text:0000000000001d30 _GREAT
             forth.s:825    .text:0000000000001d32 $t
             forth.s:825    .text:0000000000001d34 GREAT
             forth.s:837    .text:0000000000001d44 $d
             forth.s:837    .text:0000000000001d48 _MAX
             forth.s:837    .text:0000000000001d4c $t
             forth.s:837    .text:0000000000001d4c MAX
             forth.s:848    .text:0000000000001d58 $d
             forth.s:848    .text:0000000000001d5c _MIN
             forth.s:848    .text:0000000000001d60 $t
             forth.s:848    .text:0000000000001d60 MIN
             forth.s:859    .text:0000000000001d6c $d
             forth.s:859    .text:0000000000001d70 _PSTOR
             forth.s:859    .text:0000000000001d74 PSTOR
             forth.s:871    .text:0000000000001d84 $d
             forth.s:871    .text:0000000000001d88 _DSTOR
             forth.s:871    .text:0000000000001d8c DSTOR
             forth.s:883    .text:0000000000001da0 $d
             forth.s:883    .text:0000000000001da4 _DAT
             forth.s:883    .text:0000000000001da8 DAT
             forth.s:893    .text:0000000000001db2 $d
             forth.s:893    .text:0000000000001db6 _COUNT
             forth.s:893    .text:0000000000001dbc $t
             forth.s:903    .text:0000000000001dc8 $d
             forth.s:903    .text:0000000000001dcc _DNEGA
             forth.s:903    .text:0000000000001dd4 $t
             forth.s:903    .text:0000000000001dd4 DNEGA
             forth.s:920    .text:0000000000001de4 DOVAR
             forth.s:931    .text:0000000000001df0 DOCON
             forth.s:944    .text:0000000000001dfa $d
             forth.s:944    .text:0000000000001dfe _SEED
             forth.s:953    .text:0000000000001e0e $d
             forth.s:953    .text:0000000000001e12 _MSEC
             forth.s:953    .text:0000000000001e18 MSEC
             forth.s:962    .text:0000000000001e22 $d
             forth.s:962    .text:0000000000001e26 _TIMER
             forth.s:962    .text:0000000000001e2c $t
             forth.s:971    .text:0000000000001e36 $d
             forth.s:971    .text:0000000000001e3a _TBOOT
             forth.s:971    .text:0000000000001e40 $t
             forth.s:971    .text:0000000000001e40 TBOOT
             forth.s:980    .text:0000000000001e4a $d
             forth.s:980    .text:0000000000001e4e _BASE
             forth.s:990    .text:0000000000001e5e TEMP
             forth.s:999    .text:0000000000001e68 $d
ARM GAS  forth.s 			page 158


             forth.s:999    .text:0000000000001e6c _SPAN
             forth.s:999    .text:0000000000001e74 SPAN
             forth.s:1008   .text:0000000000001e7e $d
             forth.s:1008   .text:0000000000001e82 _INN
             forth.s:1008   .text:0000000000001e86 $t
             forth.s:1008   .text:0000000000001e88 INN
             forth.s:1018   .text:0000000000001e92 $d
             forth.s:1018   .text:0000000000001e96 _NTIB
             forth.s:1018   .text:0000000000001e9c NTIB
             forth.s:1027   .text:0000000000001ea6 $d
             forth.s:1027   .text:0000000000001eaa _TEVAL
             forth.s:1027   .text:0000000000001eb0 $t
             forth.s:1027   .text:0000000000001eb0 TEVAL
             forth.s:1037   .text:0000000000001eba $d
             forth.s:1037   .text:0000000000001ebe _HLD
             forth.s:1037   .text:0000000000001ec2 $t
             forth.s:1037   .text:0000000000001ec4 HLD
             forth.s:1047   .text:0000000000001ece $d
             forth.s:1047   .text:0000000000001ed2 _CNTXT
             forth.s:1047   .text:0000000000001eda $t
             forth.s:1047   .text:0000000000001edc CNTXT
             forth.s:1048   .text:0000000000001edc CRRNT
             forth.s:1058   .text:0000000000001ee6 $d
             forth.s:1058   .text:0000000000001eea _CPP
             forth.s:1058   .text:0000000000001ef0 CPP
             forth.s:1068   .text:0000000000001efa $d
             forth.s:1068   .text:0000000000001efe _FCP
             forth.s:1068   .text:0000000000001f02 $t
             forth.s:1068   .text:0000000000001f04 FCP
             forth.s:1078   .text:0000000000001f0e $d
             forth.s:1078   .text:0000000000001f12 _LAST
             forth.s:1078   .text:0000000000001f18 LAST
             forth.s:1092   .text:0000000000001f22 $d
             forth.s:1092   .text:0000000000001f26 _USER_BEGIN
             forth.s:1092   .text:0000000000001f34 USER_BEGIN
             forth.s:1096   .text:0000000000001f3c USR_BGN_ADR
             forth.s:1097   .text:0000000000001f3c $d
             forth.s:1103   .text:0000000000001f44 _USER_END
             forth.s:1103   .text:0000000000001f50 USER_END
             forth.s:1107   .text:0000000000001f58 USER_END_ADR
             forth.s:1108   .text:0000000000001f58 $d
             forth.s:1120   .text:0000000000001f60 _WITHI
             forth.s:1120   .text:0000000000001f68 WITHI
             forth.s:1122   .text:0000000000001f6c $d
             forth.s:1137   .text:0000000000001f8c _UMMOD
             forth.s:1137   .text:0000000000001f94 UMMOD
             forth.s:1141   .text:0000000000001f9e UMMOD0
             forth.s:1148   .text:0000000000001fae UMMOD1
             forth.s:1154   .text:0000000000001fb8 UMMOD2
             forth.s:1167   .text:0000000000001fc4 $d
             forth.s:1167   .text:0000000000001fc8 _MSMOD
             forth.s:1167   .text:0000000000001fce $t
             forth.s:1167   .text:0000000000001fd0 MSMOD
             forth.s:1169   .text:0000000000001fd4 $d
             forth.s:1178   .text:0000000000001ffc MMOD1
             forth.s:1185   .text:0000000000002018 MMOD2
             forth.s:1193   .text:0000000000002038 MMOD3
ARM GAS  forth.s 			page 159


             forth.s:1201   .text:0000000000002040 _SLMOD
             forth.s:1203   .text:000000000000204c $d
             forth.s:1214   .text:0000000000002064 _MODD
             forth.s:1214   .text:0000000000002068 $t
             forth.s:1216   .text:000000000000206c $d
             forth.s:1225   .text:000000000000207c _SLASH
             forth.s:1225   .text:000000000000207e $t
             forth.s:1225   .text:0000000000002080 SLASH
             forth.s:1227   .text:0000000000002084 $d
             forth.s:1238   .text:0000000000002098 _SSMOD
             forth.s:1238   .text:000000000000209e $t
             forth.s:1238   .text:00000000000020a0 SSMOD
             forth.s:1240   .text:00000000000020a4 $d
             forth.s:1252   .text:00000000000020bc _STASL
             forth.s:1252   .text:00000000000020c0 STASL
             forth.s:1254   .text:00000000000020c4 $d
             forth.s:1268   .text:00000000000020d8 _ALGND
             forth.s:1268   .text:00000000000020e0 $t
             forth.s:1268   .text:00000000000020e0 ALGND
             forth.s:1279   .text:00000000000020f0 $d
             forth.s:1279   .text:00000000000020f4 _TCHAR
             forth.s:1279   .text:00000000000020fa $t
             forth.s:1279   .text:00000000000020fc TCHAR
             forth.s:1281   .text:0000000000002100 $d
             forth.s:1291   .text:0000000000002138 TCHA1
             forth.s:1299   .text:0000000000002140 _DEPTH
             forth.s:1299   .text:0000000000002146 $t
             forth.s:1299   .text:0000000000002148 DEPTH
             forth.s:1311   .text:0000000000002160 $d
             forth.s:1311   .text:0000000000002164 _PICK
             forth.s:1311   .text:000000000000216c PICK
             forth.s:1313   .text:0000000000002170 $d
             forth.s:1329   .text:000000000000218c _HERE
             forth.s:1329   .text:0000000000002194 HERE
             forth.s:1331   .text:0000000000002198 $d
             forth.s:1340   .text:00000000000021a8 _PAD
             forth.s:1340   .text:00000000000021ac $t
             forth.s:1342   .text:00000000000021b0 $d
             forth.s:1353   .text:00000000000021c8 _TIB
             forth.s:1353   .text:00000000000021cc $t
             forth.s:1353   .text:00000000000021cc TIB
             forth.s:1363   .text:00000000000021d6 $d
             forth.s:1363   .text:00000000000021da _ATEXE
             forth.s:1376   .text:00000000000021f8 $d
             forth.s:1376   .text:00000000000021fc _CMOVE
             forth.s:1376   .text:0000000000002202 $t
             forth.s:1376   .text:0000000000002204 CMOVE
             forth.s:1383   .text:0000000000002216 CMOV1
             forth.s:1380   .text:000000000000220e CMOV0
             forth.s:1388   .text:0000000000002220 CMOV2
             forth.s:1396   .text:0000000000002228 $d
             forth.s:1396   .text:000000000000222c _MOVE
             forth.s:1414   .text:000000000000225e MOVE1
             forth.s:1411   .text:000000000000225a MOVE3
             forth.s:1408   .text:0000000000002256 MOVE0
             forth.s:1419   .text:0000000000002268 MOVE2
             forth.s:1428   .text:0000000000002270 $d
ARM GAS  forth.s 			page 160


             forth.s:1428   .text:0000000000002274 _FILL
             forth.s:1436   .text:000000000000228a FILL2
             forth.s:1432   .text:0000000000002282 FILL1
             forth.s:1446   .text:0000000000002292 $d
             forth.s:1446   .text:0000000000002296 _PACKS
             forth.s:1446   .text:000000000000229c $t
             forth.s:1446   .text:000000000000229c PACKS
             forth.s:1448   .text:00000000000022a0 $d
             forth.s:1477   .text:00000000000022f8 _DIGIT
             forth.s:1477   .text:00000000000022fe $t
             forth.s:1477   .text:0000000000002300 DIGIT
             forth.s:1479   .text:0000000000002304 $d
             forth.s:1494   .text:0000000000002338 _EXTRC
             forth.s:1494   .text:0000000000002340 $t
             forth.s:1494   .text:0000000000002340 EXTRC
             forth.s:1496   .text:0000000000002344 $d
             forth.s:1508   .text:0000000000002364 _BDIGS
             forth.s:1508   .text:0000000000002368 BDIGS
             forth.s:1510   .text:000000000000236c $d
             forth.s:1520   .text:0000000000002380 _HOLD
             forth.s:1522   .text:000000000000238c $d
             forth.s:1538   .text:00000000000023b0 _DIG
             forth.s:1538   .text:00000000000023b2 $t
             forth.s:1538   .text:00000000000023b4 DIG
             forth.s:1540   .text:00000000000023b8 $d
             forth.s:1552   .text:00000000000023d0 _DIGS
             forth.s:1552   .text:00000000000023d4 DIGS
             forth.s:1554   .text:00000000000023d8 DIGS1
             forth.s:1555   .text:00000000000023d8 $d
             forth.s:1559   .text:00000000000023f0 DIGS2
             forth.s:1568   .text:00000000000023f8 _SIGN
             forth.s:1568   .text:0000000000002400 SIGN
             forth.s:1570   .text:0000000000002404 $d
             forth.s:1574   .text:000000000000241c SIGN1
             forth.s:1582   .text:0000000000002424 _EDIGS
             forth.s:1582   .text:0000000000002428 EDIGS
             forth.s:1584   .text:000000000000242c $d
             forth.s:1599   .text:0000000000002448 STRR
             forth.s:1600   .text:0000000000002448 $t
             forth.s:1601   .text:000000000000244c $d
             forth.s:1617   .text:0000000000002474 _HEX
             forth.s:1617   .text:0000000000002478 $t
             forth.s:1617   .text:0000000000002478 HEX
             forth.s:1619   .text:000000000000247c $d
             forth.s:1629   .text:0000000000002494 _DECIM
             forth.s:1629   .text:000000000000249c $t
             forth.s:1629   .text:000000000000249c DECIM
             forth.s:1631   .text:00000000000024a0 $d
             forth.s:1646   .text:00000000000024b8 _DIGTQ
             forth.s:1646   .text:00000000000024c0 DIGTQ
             forth.s:1648   .text:00000000000024c4 $d
             forth.s:1661   .text:000000000000250c DGTQ1
             forth.s:1672   .text:0000000000002520 _NUMBQ
             forth.s:1672   .text:0000000000002528 $t
             forth.s:1672   .text:0000000000002528 NUMBQ
             forth.s:1674   .text:000000000000252c $d
             forth.s:1690   .text:0000000000002578 NUMQ1
ARM GAS  forth.s 			page 161


             forth.s:1738   .text:0000000000002640 NUMQ6
             forth.s:1706   .text:00000000000025bc NUMQ2
             forth.s:1730   .text:0000000000002624 NUMQ4
             forth.s:1727   .text:0000000000002618 NUMQ3
             forth.s:1736   .text:000000000000263c NUMQ5
             forth.s:1756   .text:000000000000265c _SPACE
             forth.s:1756   .text:0000000000002662 $t
             forth.s:1758   .text:0000000000002668 $d
             forth.s:1767   .text:0000000000002678 _SPACS
             forth.s:1767   .text:0000000000002680 SPACS
             forth.s:1769   .text:0000000000002684 $d
             forth.s:1775   .text:00000000000026a0 CHAR2
             forth.s:1773   .text:000000000000269c CHAR1
             forth.s:1784   .text:00000000000026b0 _TYPEE
             forth.s:1786   .text:00000000000026bc $d
             forth.s:1792   .text:00000000000026d4 TYPE2
             forth.s:1788   .text:00000000000026c8 TYPE1
             forth.s:1802   .text:00000000000026e8 _CR
             forth.s:1804   .text:00000000000026f0 $d
             forth.s:1816   .text:000000000000270c DOSTR
             forth.s:1817   .text:000000000000270c $t
             forth.s:1819   .text:0000000000002710 $d
             forth.s:1837   .text:0000000000002738 STRQP
             forth.s:1838   .text:0000000000002738 $t
             forth.s:1839   .text:000000000000273c $d
             forth.s:1848   .text:0000000000002744 DOTST
             forth.s:1849   .text:0000000000002744 $t
             forth.s:1850   .text:0000000000002748 $d
             forth.s:1860   .text:0000000000002754 DOTQP
             forth.s:1861   .text:0000000000002754 $t
             forth.s:1862   .text:0000000000002758 $d
             forth.s:1872   .text:0000000000002768 _DOTR
             forth.s:1872   .text:000000000000276c DOTR
             forth.s:1874   .text:0000000000002770 $d
             forth.s:1889   .text:0000000000002794 _UDOTR
             forth.s:1889   .text:0000000000002798 $t
             forth.s:1889   .text:0000000000002798 UDOTR
             forth.s:1891   .text:000000000000279c $d
             forth.s:1907   .text:00000000000027c8 _UDOT
             forth.s:1907   .text:00000000000027cc UDOT
             forth.s:1909   .text:00000000000027d0 $d
             forth.s:1922   .text:00000000000027ec _DOT
             forth.s:1922   .text:00000000000027ee $t
             forth.s:1924   .text:00000000000027f4 $d
             forth.s:1931   .text:0000000000002818 DOT1
             forth.s:1942   .text:000000000000282c _QUEST
             forth.s:1942   .text:000000000000282e $t
             forth.s:1942   .text:0000000000002830 QUEST
             forth.s:1944   .text:0000000000002834 $d
             forth.s:1958   .text:0000000000002840 PARS
             forth.s:1959   .text:0000000000002840 $t
             forth.s:1960   .text:0000000000002844 $d
             forth.s:2026   .text:0000000000002954 PARS8
             forth.s:1990   .text:00000000000028c8 PARS3
             forth.s:1973   .text:0000000000002880 PARS1
             forth.s:1988   .text:00000000000028c4 PARS2
             forth.s:1994   .text:00000000000028d4 PARS4
ARM GAS  forth.s 			page 162


             forth.s:2006   .text:0000000000002904 PARS5
             forth.s:2013   .text:0000000000002928 PARS6
             forth.s:2019   .text:000000000000293c PARS7
             forth.s:2037   .text:0000000000002968 _PARSE
             forth.s:2037   .text:000000000000296e $t
             forth.s:2037   .text:0000000000002970 PARSE
             forth.s:2039   .text:0000000000002974 $d
             forth.s:2060   .text:00000000000029b4 _DOTPR
             forth.s:2060   .text:00000000000029b8 DOTPR
             forth.s:2062   .text:00000000000029bc $d
             forth.s:2073   .text:00000000000029d4 _PAREN
             forth.s:2073   .text:00000000000029d6 $t
             forth.s:2073   .text:00000000000029d8 PAREN
             forth.s:2075   .text:00000000000029dc $d
             forth.s:2086   .text:00000000000029f4 _BKSLA
             forth.s:2086   .text:00000000000029f6 $t
             forth.s:2086   .text:00000000000029f8 BKSLA
             forth.s:2088   .text:00000000000029fc $d
             forth.s:2099   .text:0000000000002a14 _CHAR
             forth.s:2099   .text:0000000000002a1c CHAR
             forth.s:2101   .text:0000000000002a20 $d
             forth.s:2112   .text:0000000000002a38 _WORDD
             forth.s:2112   .text:0000000000002a40 WORDD
             forth.s:2114   .text:0000000000002a44 $d
             forth.s:2126   .text:0000000000002a5c _TOKEN
             forth.s:2126   .text:0000000000002a62 $t
             forth.s:2126   .text:0000000000002a64 TOKEN
             forth.s:2128   .text:0000000000002a68 $d
             forth.s:2141   .text:0000000000002a78 _NAMET
             forth.s:2141   .text:0000000000002a7e $t
             forth.s:2141   .text:0000000000002a80 NAMET
             forth.s:2143   .text:0000000000002a84 $d
             forth.s:2162   .text:0000000000002aa4 _SAMEQ
             forth.s:2162   .text:0000000000002aaa $t
             forth.s:2162   .text:0000000000002aac SAMEQ
             forth.s:2164   .text:0000000000002ab0 $d
             forth.s:2181   .text:0000000000002af8 SAME2
             forth.s:2166   .text:0000000000002abc SAME1
             forth.s:2196   .text:0000000000002b0c FIND
             forth.s:2197   .text:0000000000002b0c $t
             forth.s:2198   .text:0000000000002b10 $d
             forth.s:2205   .text:0000000000002b2c FIND1
             forth.s:2225   .text:0000000000002b84 FIND6
             forth.s:2218   .text:0000000000002b6c FIND2
             forth.s:2223   .text:0000000000002b7c FIND3
             forth.s:2232   .text:0000000000002b9c FIND4
             forth.s:2238   .text:0000000000002bb8 FIND5
             forth.s:2254   .text:0000000000002be0 _NAMEQ
             forth.s:2254   .text:0000000000002be6 $t
             forth.s:2254   .text:0000000000002be8 NAMEQ
             forth.s:2256   .text:0000000000002bec $d
             forth.s:2270   .text:0000000000002bfc BKSP
             forth.s:2271   .text:0000000000002bfc $t
             forth.s:2272   .text:0000000000002c00 $d
             forth.s:2286   .text:0000000000002c44 BACK1
             forth.s:2295   .text:0000000000002c48 TAP
             forth.s:2296   .text:0000000000002c48 $t
ARM GAS  forth.s 			page 163


             forth.s:2297   .text:0000000000002c4c $d
             forth.s:2309   .text:0000000000002c64 KTAP
             forth.s:2310   .text:0000000000002c64 TTAP
             forth.s:2311   .text:0000000000002c64 $t
             forth.s:2312   .text:0000000000002c68 $d
             forth.s:2326   .text:0000000000002ca8 KTAP2
             forth.s:2323   .text:0000000000002ca0 KTAP1
             forth.s:2338   .text:0000000000002cc0 _ACCEP
             forth.s:2340   .text:0000000000002ccc $d
             forth.s:2343   .text:0000000000002cd8 ACCP1
             forth.s:2359   .text:0000000000002d20 ACCP4
             forth.s:2355   .text:0000000000002d14 ACCP2
             forth.s:2357   .text:0000000000002d18 ACCP3
             forth.s:2370   .text:0000000000002d34 _QUERY
             forth.s:2370   .text:0000000000002d3a $t
             forth.s:2370   .text:0000000000002d3c QUERY
             forth.s:2372   .text:0000000000002d40 $d
             forth.s:2392   .text:0000000000002d74 _ABORT
             forth.s:2392   .text:0000000000002d7a $t
             forth.s:2392   .text:0000000000002d7c ABORT
             forth.s:2394   .text:0000000000002d80 ABORT1
             forth.s:2395   .text:0000000000002d80 $d
             forth.s:2526   .text:0000000000002f24 QUIT
             forth.s:2410   .text:0000000000002da8 ABORQ
             forth.s:2411   .text:0000000000002da8 $t
             forth.s:2412   .text:0000000000002dac $d
             forth.s:2430   .text:0000000000002dd0 _INTER
             forth.s:2432   .text:0000000000002de0 $d
             forth.s:2441   .text:0000000000002e1c INTE1
             forth.s:2438   .text:0000000000002e12 $t
             forth.s:2439   .text:0000000000002e14 $d
             forth.s:2445   .text:0000000000002e2c INTE2
             forth.s:2452   .text:0000000000002e34 _LBRAC
             forth.s:2452   .text:0000000000002e36 $t
             forth.s:2452   .text:0000000000002e38 LBRAC
             forth.s:2454   .text:0000000000002e3c $d
             forth.s:2464   .text:0000000000002e54 _DOTOK
             forth.s:2464   .text:0000000000002e58 $t
             forth.s:2464   .text:0000000000002e58 DOTOK
             forth.s:2466   .text:0000000000002e5c $d
             forth.s:2472   .text:0000000000002e80 DOTO1
             forth.s:2473   .text:0000000000002e80 $d
             forth.s:2481   .text:0000000000002e8c _QSTAC
             forth.s:2481   .text:0000000000002e94 QSTAC
             forth.s:2483   .text:0000000000002e98 $d
             forth.s:2485   .text:0000000000002eae $t
             forth.s:2486   .text:0000000000002eb0 $d
             forth.s:2493   .text:0000000000002eb8 _EVAL
             forth.s:2495   .text:0000000000002ec4 EVAL1
             forth.s:2496   .text:0000000000002ec4 $d
             forth.s:2504   .text:0000000000002eec EVAL2
             forth.s:2514   .text:0000000000002efc _PRESE
             forth.s:2516   .text:0000000000002f08 $d
             forth.s:2526   .text:0000000000002f1c _QUIT
             forth.s:2527   .text:0000000000002f24 $d
             forth.s:2529   .text:0000000000002f30 QUIT1
             forth.s:2531   .text:0000000000002f34 QUIT2
ARM GAS  forth.s 			page 164


             forth.s:2541   .text:0000000000002f48 _FORGET
             forth.s:2541   .text:0000000000002f50 FORGET
             forth.s:2543   .text:0000000000002f54 $d
             forth.s:2960   .text:00000000000033fc OVERT
             forth.s:2571   .text:0000000000002f9c $d
             forth.s:2571   .text:0000000000002fa0 _TICK
             forth.s:2571   .text:0000000000002fa2 $t
             forth.s:2571   .text:0000000000002fa4 TICK
             forth.s:2573   .text:0000000000002fa8 $d
             forth.s:2577   .text:0000000000002fbc TICK1
             forth.s:2585   .text:0000000000002fc4 _ALLOT
             forth.s:2585   .text:0000000000002fca $t
             forth.s:2585   .text:0000000000002fcc ALLOT
             forth.s:2587   .text:0000000000002fd0 $d
             forth.s:2596   .text:0000000000002fe0 _COMMA
             forth.s:2596   .text:0000000000002fe2 $t
             forth.s:2596   .text:0000000000002fe4 COMMA
             forth.s:2598   .text:0000000000002fe8 $d
             forth.s:2612   .text:0000000000003004 $d
             forth.s:2612   .text:0000000000003008 _BCOMP
             forth.s:2612   .text:0000000000003012 $t
             forth.s:2612   .text:0000000000003014 BCOMP
             forth.s:2614   .text:0000000000003018 $d
             forth.s:2624   .text:0000000000003028 _COMPI
             forth.s:2624   .text:0000000000003030 $t
             forth.s:2624   .text:0000000000003030 COMPI
             forth.s:2626   .text:0000000000003034 $d
             forth.s:2642   .text:0000000000003060 _LITER
             forth.s:2642   .text:0000000000003068 $t
             forth.s:2642   .text:0000000000003068 LITER
             forth.s:2644   .text:000000000000306c $d
             forth.s:2999   .text:0000000000003458 CALLC
             forth.s:2654   .text:0000000000003080 STRCQ
             forth.s:2655   .text:0000000000003080 $t
             forth.s:2656   .text:0000000000003084 $d
             forth.s:2678   .text:00000000000030bc _FOR
             forth.s:2678   .text:00000000000030c0 $t
             forth.s:2678   .text:00000000000030c0 FOR
             forth.s:2680   .text:00000000000030c4 $d
             forth.s:2690   .text:00000000000030dc _BEGIN
             forth.s:2690   .text:00000000000030e2 $t
             forth.s:2690   .text:00000000000030e4 BEGIN
             forth.s:2692   .text:00000000000030e8 $d
             forth.s:2701   .text:00000000000030f0 $d
             forth.s:2701   .text:00000000000030f4 _FNEXT
             forth.s:2701   .text:00000000000030fc FNEXT
             forth.s:2703   .text:0000000000003100 $d
             forth.s:2712   .text:0000000000003118 _UNTIL
             forth.s:2712   .text:000000000000311e $t
             forth.s:2712   .text:0000000000003120 UNTIL
             forth.s:2714   .text:0000000000003124 $d
             forth.s:2723   .text:000000000000313c _AGAIN
             forth.s:2723   .text:0000000000003142 $t
             forth.s:2723   .text:0000000000003144 AGAIN
             forth.s:2725   .text:0000000000003148 $d
             forth.s:2734   .text:0000000000003160 _IFF
             forth.s:2734   .text:0000000000003164 IFF
ARM GAS  forth.s 			page 165


             forth.s:2736   .text:0000000000003168 $d
             forth.s:2748   .text:0000000000003190 _AHEAD
             forth.s:2748   .text:0000000000003196 $t
             forth.s:2748   .text:0000000000003198 AHEAD
             forth.s:2750   .text:000000000000319c $d
             forth.s:2762   .text:00000000000031c4 _REPEA
             forth.s:2762   .text:00000000000031cc REPEA
             forth.s:2764   .text:00000000000031d0 $d
             forth.s:2775   .text:00000000000031e8 _THENN
             forth.s:2775   .text:00000000000031f0 THENN
             forth.s:2777   .text:00000000000031f4 $d
             forth.s:2788   .text:0000000000003208 _AFT
             forth.s:2788   .text:000000000000320c $t
             forth.s:2788   .text:000000000000320c AFT
             forth.s:2790   .text:0000000000003210 $d
             forth.s:2802   .text:0000000000003228 _ELSEE
             forth.s:2802   .text:0000000000003230 ELSEE
             forth.s:2804   .text:0000000000003234 $d
             forth.s:2814   .text:0000000000003248 _WHILE
             forth.s:2814   .text:000000000000324e $t
             forth.s:2814   .text:0000000000003250 WHILE
             forth.s:2816   .text:0000000000003254 $d
             forth.s:2825   .text:0000000000003264 _ABRTQ
             forth.s:2825   .text:000000000000326c ABRTQ
             forth.s:2827   .text:0000000000003270 $d
             forth.s:2836   .text:0000000000003288 _STRQ
             forth.s:2836   .text:000000000000328c STRQ
             forth.s:2838   .text:0000000000003290 $d
             forth.s:2848   .text:00000000000032a8 _DOTQ
             forth.s:2848   .text:00000000000032ac DOTQ
             forth.s:2850   .text:00000000000032b0 $d
             forth.s:2864   .text:00000000000032c8 _UNIQU
             forth.s:2864   .text:00000000000032d0 $t
             forth.s:2864   .text:00000000000032d0 UNIQU
             forth.s:2866   .text:00000000000032d4 $d
             forth.s:2873   .text:00000000000032fc UNIQ1
             forth.s:2870   .text:00000000000032f0 $d
             forth.s:2883   .text:0000000000003304 SNAME
             forth.s:2884   .text:0000000000003304 $t
             forth.s:2885   .text:0000000000003308 $d
             forth.s:2901   .text:000000000000334c SNAM1
             forth.s:2913   .text:0000000000003360 _SCOMP
             forth.s:2913   .text:000000000000336c SCOMP
             forth.s:2915   .text:0000000000003370 $d
             forth.s:2927   .text:00000000000033a8 SCOM2
             forth.s:2924   .text:00000000000033a0 SCOM1
             forth.s:2932   .text:00000000000033bc SCOM3
             forth.s:2941   .text:00000000000033c4 COLON_ABORT
             forth.s:2942   .text:00000000000033c4 $t
             forth.s:2943   .text:00000000000033c8 $d
             forth.s:2960   .text:00000000000033f4 _OVERT
             forth.s:2960   .text:00000000000033fa $t
             forth.s:2962   .text:0000000000003400 $d
             forth.s:2973   .text:0000000000003418 _SEMIS
             forth.s:2973   .text:000000000000341a $t
             forth.s:2973   .text:000000000000341c SEMIS
             forth.s:2975   .text:0000000000003420 $d
ARM GAS  forth.s 			page 166


             forth.s:2987   .text:000000000000343c _RBRAC
             forth.s:2987   .text:000000000000343e $t
             forth.s:2987   .text:0000000000003440 RBRAC
             forth.s:2989   .text:0000000000003444 $d
             forth.s:3000   .text:0000000000003458 $t
             forth.s:3001   .text:000000000000345c $d
             forth.s:3013   .text:0000000000003474 _COLON
             forth.s:3013   .text:0000000000003476 $t
             forth.s:3013   .text:0000000000003478 COLON
             forth.s:3015   .text:000000000000347c $d
             forth.s:3026   .text:0000000000003494 _IMMED
             forth.s:3026   .text:000000000000349e $t
             forth.s:3026   .text:00000000000034a0 IMMED
             forth.s:3028   .text:00000000000034a4 $d
             forth.s:3046   .text:00000000000034d0 _CONST
             forth.s:3046   .text:00000000000034dc CONST
             forth.s:3048   .text:00000000000034e0 $d
             forth.s:3059   .text:0000000000003510 $t
             forth.s:3066   .text:0000000000003510 DODOES
             forth.s:3068   .text:0000000000003514 $d
             forth.s:3083   .text:0000000000003538 $d
             forth.s:3083   .text:000000000000353c _DOES
             forth.s:3083   .text:0000000000003542 $t
             forth.s:3083   .text:0000000000003544 DOES
             forth.s:3085   .text:0000000000003548 $d
             forth.s:3100   .text:0000000000003578 _DEFERAT
             forth.s:3100   .text:0000000000003580 DEFERAT
             forth.s:3102   .text:0000000000003584 $d
             forth.s:3112   .text:000000000000359c _DEFERSTO
             forth.s:3112   .text:00000000000035a4 DEFERSTO
             forth.s:3114   .text:00000000000035a8 $d
             forth.s:3125   .text:00000000000035c4 _DEFER
             forth.s:3125   .text:00000000000035ca $t
             forth.s:3125   .text:00000000000035cc DEFER
             forth.s:3127   .text:00000000000035d0 $d
             forth.s:3148   .text:000000000000361c CREAT
             forth.s:3138   .text:0000000000003604 DEFER_NOP
             forth.s:3139   .text:0000000000003604 $t
             forth.s:3140   .text:0000000000003608 $d
             forth.s:3148   .text:0000000000003614 _CREAT
             forth.s:3150   .text:0000000000003620 $d
             forth.s:3163   .text:0000000000003644 _VARIA
             forth.s:3163   .text:0000000000003650 VARIA
             forth.s:3165   .text:0000000000003654 $d
             forth.s:3182   .text:0000000000003674 DMP
             forth.s:3183   .text:0000000000003674 $t
             forth.s:3184   .text:0000000000003678 $d
             forth.s:3196   .text:00000000000036b0 PDUM2
             forth.s:3190   .text:0000000000003698 PDUM1
             forth.s:3208   .text:00000000000036bc $d
             forth.s:3208   .text:00000000000036c0 _DUMP
             forth.s:3208   .text:00000000000036c8 DUMP
             forth.s:3210   .text:00000000000036cc $d
             forth.s:3228   .text:000000000000371c DUMP4
             forth.s:3218   .text:00000000000036f4 DUMP1
             forth.s:3230   .text:0000000000003724 DUMP3
             forth.s:3242   .text:000000000000373c _DOTS
ARM GAS  forth.s 			page 167


             forth.s:3242   .text:0000000000003740 DOTS
             forth.s:3244   .text:0000000000003744 $d
             forth.s:3252   .text:0000000000003764 DOTS2
             forth.s:3248   .text:0000000000003758 DOTS1
             forth.s:3262   .text:0000000000003778 _TNAME
             forth.s:3262   .text:000000000000377e $t
             forth.s:3262   .text:0000000000003780 TNAME
             forth.s:3264   .text:0000000000003784 $d
             forth.s:3267   .text:0000000000003790 TNAM1
             forth.s:3278   .text:00000000000037c4 TNAM2
             forth.s:3287   .text:00000000000037d4 _DOTID
             forth.s:3287   .text:00000000000037d8 $t
             forth.s:3287   .text:00000000000037d8 DOTID
             forth.s:3289   .text:00000000000037dc $d
             forth.s:3296   .text:0000000000003800 DOTI1
             forth.s:3297   .text:000000000000380e $t
             forth.s:3298   .text:0000000000003810 $d
             forth.s:3300   *ABS*:0000000000000000 WANT_SEE
             forth.s:3373   .text:0000000000003818 _WORDS
             forth.s:3373   .text:000000000000381e $t
             forth.s:3373   .text:0000000000003820 WORDS
             forth.s:3375   .text:0000000000003824 $d
             forth.s:3378   .text:0000000000003830 WORS1
             forth.s:3387   .text:0000000000003858 WORS2
             forth.s:3400   .text:000000000000385c VERSN
             forth.s:3401   .text:000000000000385c $t
             forth.s:3402   .text:0000000000003860 $d
             forth.s:3410   .text:0000000000003870 _HI
             forth.s:3412   .text:0000000000003878 $d
             forth.s:3413   .text:0000000000003892 $t
             forth.s:3414   .text:0000000000003894 $d
             forth.s:3435   .text:00000000000038d8 PS2_QUERY
             forth.s:3436   .text:00000000000038d8 $t
             forth.s:3437   .text:00000000000038dc $d
             forth.s:3444   .text:0000000000003916 $t
             forth.s:3445   .text:0000000000003918 $d
             forth.s:3455   .text:0000000000003924 IF_SENSE
             forth.s:3456   .text:0000000000003924 $t
             forth.s:3457   .text:0000000000003928 $d
             forth.s:3483   .text:0000000000003978 COLD1
             forth.s:3484   .text:0000000000003978 $d
             forth.s:3497   .text:00000000000039c0 COLD2
             forth.s:3500   .text:00000000000039c0 $d
             forth.s:3503   .text:00000000000039c4 $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:000000000000053f $d
          ser-term.s:90     .text:0000000000000540 $t
          ser-term.s:110    .text:0000000000000579 $d
          ser-term.s:110    .text:000000000000057a $t
          ser-term.s:133    .text:00000000000005b7 $d
          ser-term.s:133    .text:00000000000005b8 $t
          ser-term.s:164    .text:00000000000005ff $d
          ser-term.s:164    .text:0000000000000600 $t
          ser-term.s:191    .text:0000000000000675 $d
          ser-term.s:191    .text:0000000000000676 $t
          ser-term.s:203    .text:00000000000006a3 $d
ARM GAS  forth.s 			page 168


          ser-term.s:203    .text:00000000000006a4 $t
             tvout.s:250    .text:00000000000008e9 $d
             tvout.s:250    .text:00000000000008ea $t
             tvout.s:264    .text:000000000000091f $d
             tvout.s:264    .text:0000000000000920 $t
             tvout.s:292    .text:0000000000000979 $d
             tvout.s:292    .text:000000000000097a $t
             tvout.s:311    .text:00000000000009a7 $d
             tvout.s:311    .text:00000000000009a8 $t
             tvout.s:413    .text:0000000000000ae1 $d
             tvout.s:413    .text:0000000000000ae2 $t
             tvout.s:434    .text:0000000000000b3b $d
             tvout.s:434    .text:0000000000000b3c $t
             tvout.s:481    .text:0000000000000bd1 $d
             tvout.s:481    .text:0000000000000bd2 $t
           ps2_kbd.s:306    .text:00000000000012bb $d
           ps2_kbd.s:306    .text:00000000000012bc $t
           ps2_kbd.s:391    .text:00000000000013a5 $d
           ps2_kbd.s:391    .text:00000000000013a6 $t
           ps2_kbd.s:611    .text:000000000000163f $d
           ps2_kbd.s:611    .text:0000000000001640 $t
           ps2_kbd.s:628    .text:0000000000001675 $d
           ps2_kbd.s:628    .text:0000000000001676 $t
         spi-flash.s:68     .text:000000000000172b $d
         spi-flash.s:68     .text:000000000000172c $t
             forth.s:142    .text:00000000000017d3 $d
             forth.s:142    .text:00000000000017d4 $t
             forth.s:165    .text:000000000000180d $d
             forth.s:165    .text:000000000000180e $t
             forth.s:202    .text:000000000000182b $d
             forth.s:202    .text:000000000000182c $t
             forth.s:249    .text:00000000000018d9 $d
             forth.s:249    .text:00000000000018da $t
             forth.s:344    .text:0000000000001969 $d
             forth.s:344    .text:000000000000196a $t
             forth.s:369    .text:0000000000001997 $d
             forth.s:369    .text:0000000000001998 $t
             forth.s:379    .text:00000000000019ab $d
             forth.s:379    .text:00000000000019ac $t
             forth.s:387    .text:00000000000019b7 $d
             forth.s:387    .text:00000000000019b8 $t
             forth.s:396    .text:00000000000019c9 $d
             forth.s:396    .text:00000000000019ca $t
             forth.s:405    .text:00000000000019dd $d
             forth.s:405    .text:00000000000019de $t
             forth.s:441    .text:0000000000001a25 $d
             forth.s:441    .text:0000000000001a26 $t
             forth.s:457    .text:0000000000001a47 $d
             forth.s:457    .text:0000000000001a48 $t
             forth.s:467    .text:0000000000001a59 $d
             forth.s:467    .text:0000000000001a5a $t
             forth.s:476    .text:0000000000001a6b $d
             forth.s:476    .text:0000000000001a6c $t
             forth.s:493    .text:0000000000001a8d $d
             forth.s:493    .text:0000000000001a8e $t
             forth.s:523    .text:0000000000001ad3 $d
             forth.s:523    .text:0000000000001ad4 $t
ARM GAS  forth.s 			page 169


             forth.s:532    .text:0000000000001ae9 $d
             forth.s:532    .text:0000000000001aea $t
             forth.s:579    .text:0000000000001b43 $d
             forth.s:579    .text:0000000000001b44 $t
             forth.s:590    .text:0000000000001b57 $d
             forth.s:590    .text:0000000000001b58 $t
             forth.s:598    .text:0000000000001b65 $d
             forth.s:598    .text:0000000000001b66 $t
             forth.s:606    .text:0000000000001b75 $d
             forth.s:606    .text:0000000000001b76 $t
             forth.s:614    .text:0000000000001b85 $d
             forth.s:614    .text:0000000000001b86 $t
             forth.s:638    .text:0000000000001bb5 $d
             forth.s:638    .text:0000000000001bb6 $t
             forth.s:663    .text:0000000000001be9 $d
             forth.s:663    .text:0000000000001bea $t
             forth.s:671    .text:0000000000001bf9 $d
             forth.s:671    .text:0000000000001bfa $t
             forth.s:679    .text:0000000000001c0b $d
             forth.s:679    .text:0000000000001c0c $t
             forth.s:700    .text:0000000000001c33 $d
             forth.s:700    .text:0000000000001c34 $t
             forth.s:729    .text:0000000000001c6f $d
             forth.s:729    .text:0000000000001c70 $t
             forth.s:739    .text:0000000000001c83 $d
             forth.s:739    .text:0000000000001c84 $t
             forth.s:760    .text:0000000000001cb1 $d
             forth.s:760    .text:0000000000001cb2 $t
             forth.s:778    .text:0000000000001cd5 $d
             forth.s:778    .text:0000000000001cd6 $t
             forth.s:801    .text:0000000000001d03 $d
             forth.s:801    .text:0000000000001d04 $t
             forth.s:859    .text:0000000000001d73 $d
             forth.s:859    .text:0000000000001d74 $t
             forth.s:871    .text:0000000000001d8b $d
             forth.s:871    .text:0000000000001d8c $t
             forth.s:883    .text:0000000000001da7 $d
             forth.s:883    .text:0000000000001da8 $t
             forth.s:944    .text:0000000000001e03 $d
             forth.s:944    .text:0000000000001e04 $t
             forth.s:953    .text:0000000000001e17 $d
             forth.s:953    .text:0000000000001e18 $t
             forth.s:980    .text:0000000000001e53 $d
             forth.s:980    .text:0000000000001e54 $t
             forth.s:999    .text:0000000000001e71 $d
             forth.s:999    .text:0000000000001e72 $t
             forth.s:1018   .text:0000000000001e9b $d
             forth.s:1018   .text:0000000000001e9c $t
             forth.s:1058   .text:0000000000001eed $d
             forth.s:1058   .text:0000000000001eee $t
             forth.s:1078   .text:0000000000001f17 $d
             forth.s:1078   .text:0000000000001f18 $t
             forth.s:1092   .text:0000000000001f31 $d
             forth.s:1092   .text:0000000000001f32 $t
             forth.s:1103   .text:0000000000001f4d $d
             forth.s:1103   .text:0000000000001f4e $t
             forth.s:1120   .text:0000000000001f67 $d
ARM GAS  forth.s 			page 170


             forth.s:1120   .text:0000000000001f68 $t
             forth.s:1137   .text:0000000000001f93 $d
             forth.s:1137   .text:0000000000001f94 $t
             forth.s:1201   .text:0000000000002045 $d
             forth.s:1201   .text:0000000000002046 $t
             forth.s:1252   .text:00000000000020bf $d
             forth.s:1252   .text:00000000000020c0 $t
             forth.s:1311   .text:0000000000002169 $d
             forth.s:1311   .text:000000000000216a $t
             forth.s:1329   .text:0000000000002191 $d
             forth.s:1329   .text:0000000000002192 $t
             forth.s:1363   .text:00000000000021e3 $d
             forth.s:1363   .text:00000000000021e4 $t
             forth.s:1396   .text:0000000000002231 $d
             forth.s:1396   .text:0000000000002232 $t
             forth.s:1428   .text:0000000000002279 $d
             forth.s:1428   .text:000000000000227a $t
             forth.s:1508   .text:0000000000002367 $d
             forth.s:1508   .text:0000000000002368 $t
             forth.s:1520   .text:0000000000002385 $d
             forth.s:1520   .text:0000000000002386 $t
             forth.s:1552   .text:00000000000023d3 $d
             forth.s:1552   .text:00000000000023d4 $t
             forth.s:1568   .text:00000000000023fd $d
             forth.s:1568   .text:00000000000023fe $t
             forth.s:1582   .text:0000000000002427 $d
             forth.s:1582   .text:0000000000002428 $t
             forth.s:1646   .text:00000000000024bf $d
             forth.s:1646   .text:00000000000024c0 $t
             forth.s:1767   .text:000000000000267f $d
             forth.s:1767   .text:0000000000002680 $t
             forth.s:1784   .text:00000000000026b5 $d
             forth.s:1784   .text:00000000000026b6 $t
             forth.s:1802   .text:00000000000026eb $d
             forth.s:1802   .text:00000000000026ec $t
             forth.s:1872   .text:000000000000276b $d
             forth.s:1872   .text:000000000000276c $t
             forth.s:1907   .text:00000000000027cb $d
             forth.s:1907   .text:00000000000027cc $t
             forth.s:2060   .text:00000000000029b7 $d
             forth.s:2060   .text:00000000000029b8 $t
             forth.s:2099   .text:0000000000002a19 $d
             forth.s:2099   .text:0000000000002a1a $t
             forth.s:2112   .text:0000000000002a3d $d
             forth.s:2112   .text:0000000000002a3e $t
             forth.s:2338   .text:0000000000002cc7 $d
             forth.s:2338   .text:0000000000002cc8 $t
             forth.s:2430   .text:0000000000002ddb $d
             forth.s:2430   .text:0000000000002ddc $t
             forth.s:2481   .text:0000000000002e93 $d
             forth.s:2481   .text:0000000000002e94 $t
             forth.s:2493   .text:0000000000002ebd $d
             forth.s:2493   .text:0000000000002ebe $t
             forth.s:2514   .text:0000000000002f03 $d
             forth.s:2514   .text:0000000000002f04 $t
             forth.s:2526   .text:0000000000002f21 $d
             forth.s:2526   .text:0000000000002f22 $t
ARM GAS  forth.s 			page 171


             forth.s:2541   .text:0000000000002f4f $d
             forth.s:2541   .text:0000000000002f50 $t
             forth.s:2701   .text:00000000000030f9 $d
             forth.s:2701   .text:00000000000030fa $t
             forth.s:2734   .text:0000000000003163 $d
             forth.s:2734   .text:0000000000003164 $t
             forth.s:2762   .text:00000000000031cb $d
             forth.s:2762   .text:00000000000031cc $t
             forth.s:2775   .text:00000000000031ed $d
             forth.s:2775   .text:00000000000031ee $t
             forth.s:2802   .text:000000000000322d $d
             forth.s:2802   .text:000000000000322e $t
             forth.s:2825   .text:000000000000326b $d
             forth.s:2825   .text:000000000000326c $t
             forth.s:2836   .text:000000000000328b $d
             forth.s:2836   .text:000000000000328c $t
             forth.s:2848   .text:00000000000032ab $d
             forth.s:2848   .text:00000000000032ac $t
             forth.s:2913   .text:0000000000003369 $d
             forth.s:2913   .text:000000000000336a $t
             forth.s:3046   .text:00000000000034d9 $d
             forth.s:3046   .text:00000000000034da $t
             forth.s:3100   .text:000000000000357f $d
             forth.s:3100   .text:0000000000003580 $t
             forth.s:3112   .text:00000000000035a3 $d
             forth.s:3112   .text:00000000000035a4 $t
             forth.s:3148   .text:000000000000361b $d
             forth.s:3148   .text:000000000000361c $t
             forth.s:3163   .text:000000000000364d $d
             forth.s:3163   .text:000000000000364e $t
             forth.s:3208   .text:00000000000036c5 $d
             forth.s:3208   .text:00000000000036c6 $t
             forth.s:3242   .text:000000000000373f $d
             forth.s:3242   .text:0000000000003740 $t
             forth.s:3410   .text:0000000000003873 $d
             forth.s:3410   .text:0000000000003874 $t
             forth.s:3477   .text:0000000000003961 $d
             forth.s:3477   .text:0000000000003962 $t

UNDEFINED SYMBOLS
_mstack
