ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
ARM GAS  forth.s 			page 10


 108              	  .equ VFPSW, PEN_COLOR+4 
 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
ARM GAS  forth.s 			page 12


 222              		// from a code word   
 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
ARM GAS  forth.s 			page 13


  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
ARM GAS  forth.s 			page 14


 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      CBF95DF8 
 157      04EB
 158 000a DFF8CCC6 	  ldr IP,=dh
 159 000e 02F0E7BA 	  b INEXT  
 160              	dh:
 161 0012 49420000 	  _ADR PRESE
 162 0016 01390000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 31260000 	  _ADR CFSR 
 164 0038 21290000 	  _ADR DUPP
 165 003c 9D280000 	  _ADR TOR 
 166 0040 A7270000 	  _DOLIT 16 
 166      10000000 
 167 0048 152E0000 	  _ADR BASE 
 168 004c 19280000 	  _ADR STORE 
 169 0050 85390000 	  _ADR UDOT 
 170 0054 01390000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 59280000 	  _ADR RFROM
 172 0068 A7270000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 65290000 	  _ADR ANDD
 174 0074 E7270000 	  _QBRAN 1f
 174      94000000 
 175 007c 55260000 	  _ADR BFAR
 176 0080 A7270000 	  _DOLIT ','
 176      2C000000 
 177 0088 B1260000 	  _ADR EMIT 
 178 008c 11380000 	  _ADR SPACE 
ARM GAS  forth.s 			page 15


 179 0090 85390000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 01390000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 F51D0000 	  _ADR FPSCR
 184 00a8 85390000 	  _ADR UDOT 
 185              	1:
 186 00ac 39030000 	  _ADR reset_mcu 
 187              	
 188              	  
 189              	
 190              	/*********************************
 191              	   fpu exception 
 192              	*********************************/
 193              	  .type fpu_exception, %function 
 194              	  .global fpu_exception 
 195              	  .p2align 2 
 196              	fpu_exception:
 197 00b0 4FF00000 	  _MOV32 r0,RAM_END 
 197      C2F20200 
 198 00b8 8546     	  mov sp,r0 
 199 00ba DFF820C6 	  ldr IP,=fpu_except 
 200 00be 02F08FBA 	  b INEXT 
 201              	fpu_except:  
 202 00c2 49420000 	  _ADR PRESE
 203 00c6 99380000 	  _ADR CR  
 204 00ca A7270000 	  _DOLIT 16 
 204      10000000 
 205 00d2 152E0000 	  _ADR BASE 
 206 00d6 19280000 	  _ADR STORE 
 207 00da 01390000 	  _DOTQP 21 , "fpu exception FPSCR: "
 207      15667075 
 207      20657863 
 207      65707469 
 207      6F6E2046 
 208 00f4 F51D0000 	  _ADR FPSCR 
 209 00f8 85390000 	  _ADR UDOT 
 210 00fc 99380000 	  _ADR CR 
 211 0100 39030000 	  _ADR reset_mcu 
 212              	
 213              	
 214              	
 215              	/*********************************
 216              	  non maskable interrupt handler
 217              	  irq -14 
 218              	*********************************/
 219              	  .type nmi_handler, %function
 220              	  .p2align 2
 221              	  .global nmi_handler 
 222              	nmi_handler:
 223 0104 DFF8D8C5 	  ldr IP,=nmi_hl 
 224 0108 02F06ABA 	  b  INEXT
 225              	nmi_hl:
 226 010c 49420000 	  _ADR PRESE 
ARM GAS  forth.s 			page 16


 227 0110 99380000 	  _ADR CR 
 228 0114 01390000 	  _DOTQP  25 , "not managed nmi exception"
 228      196E6F74 
 228      206D616E 
 228      61676564 
 228      206E6D69 
 229 0134 99380000 	  _ADR CR 
 230 0138 C1400000 	  _ADR ABORT 
 231              	   
 232              	
 233              	/***********************************
 234              	   hard fault handler
 235              	   irq -13
 236              	***********************************/
 237              	  .type hardfault_handler, %function
 238              	  .p2align 2
 239              	  .global hardfault_handler 
 240              	hardfault_handler:
 241 013c 4FF00000 	  _MOV32 r0,RAM_END 
 241      C2F20200 
 242 0144 8546     	  mov sp,r0 
 243 0146 DFF89CC5 	  ldr IP,=hardfault_hl 
 244 014a 02F049BA 	  b INEXT
 245              	hardfault_hl:
 246 014e 49420000 	  _ADR PRESE
 247 0152 99380000 	  _ADR CR  
 248 0156 01390000 	  _DOTQP  20 , "hard fault exception"
 248      14686172 
 248      64206661 
 248      756C7420 
 248      65786365 
 249 0170 99380000 	  _ADR CR 
 250 0174 39030000 	  _ADR reset_mcu
 251              	
 252              	/***********************************
 253              	   memory manager fault 
 254              	   irq -12 
 255              	************************************/
 256              	  .type memfault_handler, %function
 257              	  .p2align 2
 258              	  .global memfault_handler 
 259              	memfault_handler:
 260 0178 4FF00000 	  _MOV32 r0,RAM_END 
 260      C2F20200 
 261 0180 8546     	  mov sp,r0 
 262 0182 DFF864C5 	  ldr IP,=memfault_hl 
 263 0186 02F02BBA 	  b INEXT 
 264              	memfault_hl: 
 265 018a 49420000 	  _ADR PRESE
 266 018e 99380000 	  _ADR CR  
 267 0192 01390000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 267      216D656D 
 267      6F727920 
 267      6D616E61 
 267      67657220 
 268 01b8 A7270000 	  _DOLIT 16 
 268      10000000 
ARM GAS  forth.s 			page 17


 269 01c0 152E0000 	  _ADR BASE 
 270 01c4 19280000 	  _ADR STORE   
 271 01c8 31260000 	  _ADR CFSR
 272 01cc A7270000 	  _DOLIT 255 
 272      FF000000 
 273 01d4 65290000 	  _ADR ANDD 
 274 01d8 85390000 	  _ADR UDOT 
 275 01dc 99380000 	  _ADR CR 
 276 01e0 39030000 	  _ADR reset_mcu 
 277              	
 278              	
 279              	/************************************
 280              	   bus fault 
 281              	   irq -11 
 282              	***********************************/
 283              	  .type busfault_handler, %function
 284              	  .p2align 2
 285              	  .global busfault_handler 
 286              	busfault_handler:
 287 01e4 4FF00000 	  _MOV32 r0,RAM_END 
 287      C2F20200 
 288 01ec 8546     	  mov sp,r0 
 289 01ee DFF8FCC4 	  ldr IP,=busfault_hl 
 290 01f2 02F0F5B9 	  b INEXT 
 291              	busfault_hl:
 292 01f6 49420000 	  _ADR PRESE
 293 01fa A7270000 	  _DOLIT 1 
 293      01000000 
 294 0202 7D270000 	  _ADR ULED 
 295 0206 A7270000 	  _DOLIT  100 
 295      64000000 
 296 020e D12D0000 	  _ADR MSEC 
 297 0212 55260000 	  _ADR BFAR 
 298 0216 31260000 	  _ADR CFSR 
 299 021a 99380000 	  _ADR CR  
 300 021e 01390000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 300      1B627573 
 300      20666175 
 300      6C742065 
 300      78636570 
 301 0240 A7270000 	  _DOLIT 16 
 301      10000000 
 302 0248 152E0000 	  _ADR BASE 
 303 024c 19280000 	  _ADR STORE   
 304 0250 A7270000 	  _DOLIT 0XFF00 
 304      00FF0000 
 305 0258 65290000 	  _ADR ANDD   
 306 025c 85390000 	  _ADR UDOT 
 307 0260 01390000 	  _DOTQP 7 , " BFAR: "
 307      07204246 
 307      41523A20 
 308 026c 85390000 	  _ADR UDOT 
 309 0270 99380000 	  _ADR CR 
 310 0274 39030000 	  _ADR reset_mcu  
 311              	
 312              	/************************************
 313              	    usage fault
ARM GAS  forth.s 			page 18


 314              	    irq -10 
 315              	************************************/
 316              	  .type usagefault_handler, %function
 317              	  .p2align 2
 318              	  .global usagefault_handler 
 319              	usagefault_handler:
 320 0278 4FF00000 	  _MOV32 r0,RAM_END 
 320      C2F20200 
 321 0280 8546     	  mov sp,r0 
 322 0282 DFF86CC4 	  ldr IP,=usagefault_hl
 323 0286 02F0ABB9 	  b INEXT 
 324              	usagefault_hl:
 325 028a 49420000 	  _ADR PRESE
 326 028e 99380000 	  _ADR CR  
 327 0292 01390000 	  _DOTQP  23 , "usage exception, UFSR: "
 327      17757361 
 327      67652065 
 327      78636570 
 327      74696F6E 
 328 02b0 A7270000 	  _DOLIT 16 
 328      10000000 
 329 02b8 152E0000 	  _ADR BASE 
 330 02bc 19280000 	  _ADR STORE   
 331 02c0 31260000 	  _ADR CFSR
 332 02c4 A7270000 	  _DOLIT 16 
 332      10000000 
 333 02cc BD290000 	  _ADR RSHIFT 
 334 02d0 85390000 	  _ADR UDOT 
 335 02d4 99380000 	  _ADR CR 
 336 02d8 39030000 	  _ADR reset_mcu  
 337              	
 338              	
 339              	/*********************************
 340              		system milliseconds counter
 341              	*********************************/	
 342              	  .type systick_handler, %function
 343              	  .p2align 2 
 344              	  .global systick_handler
 345              	systick_handler:
 346 02dc 4FF00003 	  _MOV32 r3,UPP
 346      C2F20003 
 347 02e4 9868     	  ldr r0,[r3,#TICKS]  
 348 02e6 00F10100 	  add r0,#1
 349 02ea 9860     	  str r0,[r3,#TICKS]
 350 02ec D868     	  ldr r0,[r3,#CD_TIMER]
 351 02ee 10B1     	  cbz r0, systick_exit
 352 02f0 A0F10100 	  sub r0,#1
 353 02f4 D860     	  str r0,[r3,#CD_TIMER]
 354              	systick_exit:
 355 02f6 7047     	  bx lr
 356              	
 357              	user_reboot:
 358 02f8 00B500F0 	   _CALL forth_init 
 358      4FF85DF8 
 358      04EB
 359 0302 DFF8F0C3 	  ldr IP,=ur
 360 0306 02F06BB9 	  b INEXT  
ARM GAS  forth.s 			page 19


 361              	ur:
 362 030a 49420000 	  _ADR PRESE
 363 030e 99380000 	  _ADR CR   
 364 0312 A7270000 		_DOLIT user_reboot_msg
 364      28030000 
 365 031a 752D0000 		_ADR COUNT 
 366 031e 65380000 	  _ADR TYPEE 
 367 0322 39030000 	  _ADR reset_mcu 
 368              	
 369 0326 00BF     		.p2align 2 
 370              	user_reboot_msg:
 371 0328 0C       		.byte 12
 372 0329 75736572 		.ascii "user reboot!"
 372      20726562 
 372      6F6F7421 
 373 0335 0000BF   		.p2align 2 
 374              	
 375              	reset_mcu:
 376 0338 4FF48050 	  _MOV32 r0,UART 
 376      C4F20100 
 377 0340 0168     	1: ldr r1,[r0,#USART_SR]
 378 0342 11F0400F 	  tst r1,#(1<<6)
 379 0346 FBD0     	  beq 1b
 380 0348 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 380      CEF20000 
 381 0350 C168     		ldr r1,[r0,#SCB_AIRCR]
 382 0352 41F00401 		orr r1,#(1<<2)
 383 0356 C0F2FA51 		movt r1,#SCB_VECTKEY
 384 035a C160     		str r1,[r0,#SCB_AIRCR]
 385 035c FEE7     		b . 
 386              	
 387              	/**************************************
 388              	  reset_handler execute at MCU reset
 389              	***************************************/
 390              	  .type  reset_handler, %function
 391 035e 00BF     	  .p2align 2 
 392              	  .global reset_handler
 393              	reset_handler:
 394 0360 4FF00000 		_MOV32 r0,RAM_END
 394      C2F20200 
 395 0368 8546     		mov sp,r0 
 396              	// enable memory, bus and usage exceptions  
 397 036a 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 397      CEF20000 
 398 0372 81EA0101 	  eor r1,r1 
 399 0376 C0F20701 	  movt r1,#7 
 400 037a 4162     	  str r1,[r0,#SCB_SHCSR]
 401 037c FFF7FEFF 		bl	remap 
 402 0380 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 403 0384 01F019FD 	  bl  fpu_init 
 404 0388 00F0D1F9 		bl  ser_init
 405 038c FFF7FEFF 	 	bl	tv_init
 406 0390 FFF7FEFF 	  bl  kbd_init
 407 0394 01F0D6FA 	  bl  flash_spi_init   
 408 0398 04F082BE 		b COLD 
 409              	
 410              	
ARM GAS  forth.s 			page 20


 411              	
 412              		.type forth_init, %function 
 413              	  .p2align 2 
 414              	forth_init:
 415 039c 4FF00004 		_MOV32 UP,UPP 
 415      C2F20004 
 416 03a4 4FF68067 		_MOV32 DSP,SPP
 416      C2F20107 
 417 03ac 4FF47F48 		_MOV32 RSP,RPP
 417      C2F20108 
 418 03b4 DFF840A3 	  ldr INX,=NEST
 419 03b8 4AF0010A 	  orr INX,#1 
 420 03bc 86EA0606 		EOR TOS,TOS  
 421 03c0 7047     		_RET 
 422              	
 423              	
 424              	
 425              	  .type init_devices, %function
 426 03c2 00BF     	  .p2align 2 
 427              	init_devices:
 428              	/* init clock to HSE 96 Mhz */
 429              	/* set 3 wait states in FLASH_ACR_LATENCY */
 430 03c4 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 430      C4F20200 
 431 03cc 4FF00301 	  mov r1,#3 
 432 03d0 0160     	  str r1,[r0,#FLASH_ACR]
 433              	/* configure clock for HSE, 25 Mhz crystal */
 434              	/* enable HSE in RCC_CR */
 435 03d2 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 435      C4F20200 
 436 03da 0168     	  ldr r1,[r0,#RCC_CR]
 437 03dc 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 438 03e0 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 439              	/* wait HSERDY loop */
 440              	wait_hserdy:
 441 03e2 0168     	  ldr r1,[r0,#RCC_CR]
 442 03e4 11F4003F 	  tst r1,#(1<<17)
 443 03e8 FBD0     	  beq wait_hserdy
 444              	
 445              	/************************************************* 
 446              	   configure PLL  and source 
 447              	   SYSCLOCK=96 Mhz
 448              	   select HSE as  PLL source clock
 449              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 450              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 451              	****************************************************/
 452              	  /* set RCC_PLLCFGR */
 453 03ea 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 453      C4F20200 
 454 03f2 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 454      C0F24041 
 455 03fa 4160     	  str r1,[r0,#RCC_PLLCFGR]
 456              	  /* enable PLL */
 457 03fc 0168     	  ldr r1,[r0,#RCC_CR]
 458 03fe 41F08071 	  orr r1, #(1<<24)
 459 0402 0160     	  str r1,[r0,#RCC_CR]
 460              	/* wait for PLLRDY */
ARM GAS  forth.s 			page 21


 461              	wait_pllrdy:
 462 0404 0168     	  ldr r1,[r0,#RCC_CR]
 463 0406 11F0007F 	  tst r1,#(1<<25)
 464 040a FBD1     	  bne wait_pllrdy 
 465              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 466 040c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 466      C0F21901 
 467 0414 8160     	  str r1,[r0,#RCC_CFGR]
 468              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 469 0416 8168     	  ldr r1,[r0,#RCC_CFGR]
 470 0418 41F00201 	  orr r1,#2
 471 041c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 472              	/* wait for SWS==2 */
 473              	wait_sws:
 474 041e 8168     	  ldr r1,[r0,#RCC_CFGR]
 475 0420 11F0080F 	  tst r1,#(2<<2)
 476 0424 FBD0     	  beq wait_sws
 477              	/* now sysclock is 96 Mhz */
 478              	
 479              	
 480              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 481 0426 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 482 042a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 483 042c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 484 0430 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 485              	/* configure GPIOC:13 as output for user LED */
 486 0432 4FF40060 	  _MOV32 r0,LED_GPIO 
 486      C4F20200 
 487 043a 4FF00D01 	  mov r1,#LED_PIN
 488 043e 4FF01102 	  mov r2,#OUTPUT_OD 
 489 0442 00B500F0 	  _CALL gpio_config 
 489      8FF85DF8 
 489      04EB
 490 044c 4FF00102 	  mov r2,#1
 491 0450 00B500F0 	  _CALL gpio_out 
 491      DEF85DF8 
 491      04EB
 492              	/* enable compensation CELL for fast I/O */
 493 045a 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 493      C4F20101 
 494 0462 4FF00100 		mov r0,#1 
 495 0466 0862     		str r0,[R1,#SYSCFG_CMPCR]
 496              	/* wait for ready bit */ 
 497 0468 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 498 046a 10F4807F 	    tst r0,#(1<<8)
 499 046e FBD0     		beq 1b 	
 500              	
 501              	
 502              	/* configure systicks for 1msec ticks */
 503              	// set priority to 15 (lowest)
 504 0470 4FF0FF30 	  mov r0,#STCK_IRQ
 505 0474 4FF00F01 	  mov r1,#15 
 506 0478 00B500F0 	  _CALL nvic_set_priority
 506      2FF85DF8 
 506      04EB
 507 0482 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 507      CEF20000 
ARM GAS  forth.s 			page 22


 508 048a 47F2FF61 	  _MOV32 r1,95999 
 508      C0F20101 
 509 0492 4160     	  str r1,[r0,#STK_LOAD]
 510 0494 4FF00701 	  mov r1,#7
 511 0498 0160     	  str r1,[r0,STK_CTL]
 512 049a 7047     	  _RET  
 513              	
 514              	
 515              	/* copy system variables to RAM */ 
 516              		.type remap, %function 
 517              	    .global remap 
 518              	remap:
 519              	// copy system to RAM 	
 520 049c 4FF00000 		_MOV32 r0,RAM_ADR 
 520      C2F20000 
 521 04a4 9549     		ldr r1,=UZERO 
 522 04a6 4FF0B002 		mov r2,#ULAST-UZERO 
 523 04aa 02F10302 		add r2,r2,#3
 524 04ae 22F00302 		and r2,r2,#~3 
 525 04b2 51F8043B 	1:	ldr r3,[r1],#4 
 526 04b6 40F8043B 		str r3,[r0],#4 
 527 04ba 043A     		subs R2,#4 
 528 04bc F9D1     		bne 1b
 529              	// zero end of RAM 
 530 04be 4FF00002 		_MOV32 r2,RAM_END 
 530      C2F20202 
 531 04c6 83EA0303 		eor r3,r3,r3 
 532 04ca 40F8043B 	2:  str r3,[r0],#4
 533 04ce 9042     		cmp r0,r2 
 534 04d0 FBDB     		blt 2b 
 535 04d2 4FF00004 		_MOV32 UP,RAM_ADR  
 535      C2F20004 
 536 04da 7047     		_RET 
 537              	
 538              	// set irq priority 
 539              	// 0 highest 
 540              	// 15 lowest
 541              	// input: r0 IRQn  
 542              	//        r1  ipr 
 543              	nvic_set_priority:
 544 04dc 08B4     	    push {r3}
 545 04de 0028     	    cmp r0,#0 
 546 04e0 08D4     	    bmi negative_irq 
 547 04e2 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 547      CEF20003 
 548 04ea 4FEA0111 	    lsl r1,#4 
 549 04ee 1954     	    strb r1,[r3,r0]
 550 04f0 08BC     	    pop {r3}
 551 04f2 7047     	    _RET 
 552              	negative_irq:
 553 04f4 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 553      CEF20003 
 554 04fc 00F00F00 	    and r0,#0XF 
 555 0500 A0F10400 	    sub r0,#4 
 556 0504 4FEA0111 	    lsl r1,#4 
 557 0508 1954     	    strb r1,[r3,r0]
 558 050a 08BC     	    pop {r3}
ARM GAS  forth.s 			page 23


 559 050c 7047     	    _RET 
 560              	
 561              	
 562              	// enable interrupt in nvic 
 563              	// input: r0 = IRQn 
 564              	nvic_enable_irq: 
 565 050e 0EB4     	    push {r1,r2,r3}
 566 0510 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 566      CEF20003 
 567 0518 0146     	    mov r1,r0 
 568 051a 4FEA5111 	    lsr r1,#5  
 569 051e 4FEA8101 	    lsl r1,#2  // ISERn  
 570 0522 00F01F00 	    and r0,#31 // bit#
 571 0526 4FF00102 	    mov r2,#1 
 572 052a 02FA00F2 	    lsl r2,r0
 573 052e 72B6     	    cpsid I
 574 0530 5A50     	    str r2,[r3,r1]
 575 0532 62B6     	    cpsie I 
 576 0534 0EBC     	    pop {r1,r2,r3}
 577 0536 7047     	    _RET 
 578              	
 579              	// disable interrupt in nvic
 580              	// input: r0 = IRQn
 581              	nvic_disable_irq:
 582 0538 0EB4     	    push {r1,r2,r3}
 583 053a 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 583      CEF20003 
 584 0542 0146     	    mov r1,r0 
 585 0544 4FEA5111 	    lsr r1,#5  
 586 0548 4FEA8101 	    lsl r1,#2  // ISERn
 587 054c 00F01F00 	    and r0,#31 // bit#
 588 0550 4FF00102 	    mov r2,#1 
 589 0554 02FA00F2 	    lsl r2,r0
 590 0558 5A50     	    str r2,[r3,r1]
 591 055a BFF34F8F 	    dsb 
 592 055e BFF36F8F 	    isb 
 593 0562 0EBC     	    pop {r1,r2,r3}
 594 0564 7047     	    _RET 
 595              	
 596              	/**********************************
 597              	  gpio_config 
 598              	  Configure gpio mode 
 599              	  input:
 600              	    r0   GPIOx 
 601              	    r1   pin 
 602              	    r2   mode 
 603              	  output:
 604              	    none 
 605              	  use:
 606              	    r3,r5,r11  
 607              	**********************************/
 608              	gpio_config:
 609 0566 2DE92808 	    push {r3,r5,r11}
 610              	//  clear registers field 
 611 056a 4FF00105 	    mov r5,#1
 612 056e 05FA01F5 	    lsl r5,r1
 613 0572 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
ARM GAS  forth.s 			page 24


 614 0576 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 615 0578 03EA0503 	    and r3,r5 
 616 057c 4360     	    str r3,[r0,#GPIO_OTYPER]
 617 057e 4FF00305 	    mov r5,#3 
 618 0582 4FF0020B 	    mov r11,#2 
 619 0586 01FB0BFB 	    mul r11,r1 
 620 058a 05FA0BF5 	    lsl r5,r11 
 621 058e 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 622 0592 0368     	    ldr r3,[r0,#GPIO_MODER]
 623 0594 03EA0503 	    and r3,r5 
 624 0598 0360     	    str r3,[r0,#GPIO_MODER]
 625 059a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 626 059c 03EA0503 	    and r3,r5 
 627 05a0 C360     	    str r3,[r0,#GPIO_PUPDR]
 628              	// set mode register, r2 low nibble  
 629 05a2 02F00305 	    and r5,r2,#3    
 630 05a6 05FA0BF5 	    lsl r5,r11 // mode 
 631 05aa 0368     	    ldr r3,[r0,#GPIO_MODER]
 632 05ac 43EA0503 	    orr r3,r5 
 633 05b0 0360     	    str r3,[r0,#GPIO_MODER]
 634 05b2 032A     	    cmp r2,#3
 635 05b4 13D0     	    beq 9f // analog input 
 636 05b6 12F00305 	    ands r5,r2,#3 
 637 05ba 08D0     	    beq input_pull 
 638              	output_type:
 639 05bc 4FEA1212 	    lsr r2,#4 
 640 05c0 02FA01F2 	    lsl r2,r1 // 1 bit field 
 641 05c4 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 642 05c6 43EA0203 	    orr r3,r2 
 643 05ca 4360     	    str r3,[r0,#GPIO_OTYPER]
 644 05cc 07E0     	    b 9f 
 645              	input_pull:
 646 05ce C368     	    ldr r3,[r0,#GPIO_PUPDR]
 647 05d0 4FEA1212 	    lsr r2,#4 
 648 05d4 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 649 05d8 43EA0203 	    orr r3,r2 
 650 05dc C360     	    str r3,[r0,#GPIO_PUPDR]
 651 05de BDE82808 	9:  pop {r3,r5,r11}
 652 05e2 7047     	    _RET 
 653              	
 654              	// configure gpio speed 
 655              	// input:
 656              	//    r0   GPIO_BASE_ADR 
 657              	//    r1   pin 
 658              	//    r2   speed
 659              	// use:
 660              	//  r3,r5,r11 
 661              	gpio_speed:
 662 05e4 2DE92808 	    push {r3,r5,r11}
 663 05e8 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 664 05ea 4FF00305 	    mov r5,#3
 665 05ee 4FF0020B 	    mov r11,#2 
 666 05f2 01FB0BFB 	    mul r11,r1 
 667 05f6 05FA0BF5 	    lsl r5,r11
 668 05fa 6FEA0505 	    mvn r5,r5 
 669 05fe 03EA0503 	    and r3,r5   
 670 0602 02FA0BF2 	    lsl r2,r11  
ARM GAS  forth.s 			page 25


 671 0606 43EA0203 	    orr r3,r2 
 672 060a 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 673 060c BDE82808 	    pop {r3,r5,r11}
 674 0610 7047     	    _RET
 675              	
 676              	/**************************** 
 677              	  gpio_out port,pin,0|1
 678              	  input:
 679              	    r0   gpio_base_adr 
 680              	    r1   pin 
 681              	    r2   data 0|1 
 682              	**************************/
 683              	gpio_out:
 684 0612 08B4     	    push {r3}
 685 0614 4FF00103 	    mov r3,#1 
 686 0618 03FA01F3 	    lsl r3,r1 
 687 061c 0AB9     	    cbnz r2, 1f 
 688 061e 4FEA0343 	    lsl r3,#16 
 689 0622 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 690 0624 08BC     	    pop {r3}
 691 0626 7047     	    _RET 
 692              	
 693              	/******************************************************
 694              	*  COLD start moves the following to USER variables.
 695              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 696              	******************************************************/
 697              		.p2align 2
 698              	UZERO:
 699 0628 00000000 		.word 0  			/*Reserved */
 700 062c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 701 0630 00000000 		.word 0      /* TICKS */
 702 0634 00000000 	    .word 0     /* CD_TIMER */
 703 0638 B04F0000 		.word HI_BOTH  /*'BOOT */
 704 063c 2C160000 		.word PS2_QKEY /* query for character */
 705 0640 F40E0000 	  .word TV_EMIT  /* char output device */
 706 0644 0A000000 	  .word BASEE 	/*BASE */
 707 0648 00000000 		.word 0			/*tmp */
 708 064c 00000000 		.word 0			/*SPAN */
 709 0650 00000000 		.word 0			/*>IN */
 710 0654 00000000 		.word 0			/*#TIB */
 711 0658 80FE0120 		.word TIBB	/*TIBU */
 712 065c 20410000 		.word INTER	/*'EVAL */
 713 0660 00000000 		.word 0			/*HLD */
 714 0664 98500000 		.word _LASTN	/*CONTEXT */
 715 0668 00510000 		.word CTOP  	/* FCP end of system dictionnary */
 716 066c D84A0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 717 0670 98500000 		.word _LASTN	/*LAST word in dictionary */
 718 0674 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 718      00000000 
 718      00000000 
 718      00000000 
 719 0684 00000000 		.word 0  /* RX_HEAD */
 720 0688 00000000 		.word 0  /* RX_TAIL */ 
 721 068c 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 722 0690 00000000 		.word 0  /* VID_STATE, video state */  
 723 0694 00000000 	    .word 0  /* VID_FIELD, field */
 724 0698 80800120 		.word VID_BUFF /* video_buffer address */ 
ARM GAS  forth.s 			page 26


 725 069c 00000000 	    .word 0 /* kbd struct */
 726 06a0 00000000 		.space KBD_QUEUE_SIZE,0  
 726      00000000 
 726      00000000 
 726      00000000 
 727 06b0 00000000 		.word 0  /* kbd queue head */
 728 06b4 00000000 		.word 0 /* kbd queue tail */ 
 729 06b8 00000000 	    .word 0 /* tv cursor row */
 730 06bc 00000000 	    .word 0 /* tv cursor column */ 
 731 06c0 00000000 	    .word 0 /* tv back color */
 732 06c4 07000000 	    .word 7 /* tv font color */
 733 06c8 00000000 	    .word 0 /* FPSW */
 734 06cc 00000000 	    .word 0 /* FBASE */ 
 735 06d0 00000000 	    .word 0,0 
 735      00000000 
 736              	ULAST:
 737              	
 738              	// used by _HEADER macro 
 739              	// to link names field
 740              	// in dictionary  
 741 06d8 12000000 	    .equ LINK, 0 
 741      C2000000 
 741      0C010000 
 741      4E010000 
 741      8A010000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
ARM GAS  forth.s 			page 27


  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0700 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0708 1868     		ldr r0,[r3,#USART_SR]
  38 070a 5968     		ldr r1,[r3,#USART_DR]
  39 070c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0710 0CD0     		beq 2f // no char received 
  41 0712 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0716 3FF4EFAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 071a 04F14C00 		add r0,UP,#RX_QUEUE
  44 071e 226E     		ldr r2,[UP,#RX_TAIL]
  45 0720 8154     		strb r1,[r0,r2]
  46 0722 02F10102 		add r2,#1 
  47 0726 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 072a 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 072c 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 072e 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0736 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0738 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 073c 01EA0201 	  and r1,r1,r2
  62 0740 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0744 41EA0201 	  orr r1,r1,r2 
  64 0748 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 074a 4FF4EE61 	  mov r1,#0x77<<4 
  67 074e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0750 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0758 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 075c 8160     	  str r1,[r0,#USART_BRR]
  73 075e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0762 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0764 4FF02500 	  mov r0,#USART1_IRQ 
  77 0768 4FF00701 	  mov r1,#7
  78 076c 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0776 4FF02500 	  mov r0,#USART1_IRQ 
  81 077a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FE5DF8 
  81      04EB
  82 0784 7047     	  _RET  
ARM GAS  forth.s 			page 28


  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0786 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0794 47F8046D 		_PUSH
  92 0798 206E     		ldr T0,[UP,#RX_TAIL] 
  93 079a E16D     		ldr T1,[UP,#RX_HEAD]
  94 079c 90EA0106 		eors TOS,T0,T1 
  95 07a0 0CD0     		beq 1f
  96 07a2 04F14C00 		add T0,UP,#RX_QUEUE 
  97 07a6 0844     		add T0,T1 
  98 07a8 0678     		ldrb TOS,[T0]
  99 07aa 01F10101 		add T1,#1 
 100 07ae 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 07b2 E165     		str T1,[UP,#RX_HEAD]
 102 07b4 47F8046D 		_PUSH 
 103 07b8 4FF0FF36 		mov TOS,#-1
 104 07bc 01F010BF 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 07c0 8A070000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 07d0 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 07d8 2868     	1:  ldr T0,[WP,#USART_SR]
 113 07da 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 07de FBD0     		beq 1b 
 115 07e0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 07e2 57F8046B 		_POP
 117 07e6 01F0FBBE 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 07ea C4070000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 07f4 47F8046D 	        _PUSH 
 126 07f8 4FF00006 	        mov TOS,#0
 127 07fc 01F0F0BE 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
ARM GAS  forth.s 			page 29


 131              	    constant: serial console id 
 132              	****************************************/
 133 0800 EE070000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 080c 47F8046D 	        _PUSH 
 135 0810 4FF00106 	        mov TOS,#1
 136 0814 01F0E4BE 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0818 04080000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0824 3046     	        mov T0,TOS
 144 0826 57F8046B 	        _POP 
 145 082a 50B1     	        cbz T0, 4f 
 146              	// serial console 
 147 082c 5048     	        ldr T0,=SER_QKEY 
 148 082e 6061     	        str T0,[UP,#STDIN]
 149 0830 5048     	        ldr T0,=SER_EMIT
 150 0832 A061     	        str T0,[UP,#STDOUT]
 151 0834 504D45F0 	        _CALL_COLWORD READY 
 151      010504F0 
 151      1FBC
 152 083e 01F0CFBE 	        _NEXT 
 153              	4: // local console 
 154 0842 4E48     	        ldr T0,=PS2_QKEY
 155 0844 6061     	        str T0,[UP,#STDIN]
 156 0846 4E48     	        ldr T0,=TV_EMIT
 157 0848 A061     	        str T0,[UP,#STDOUT]
 158 084a 4B4D45F0 	        _CALL_COLWORD READY 
 158      010504F0 
 158      14BC
 159 0854 01F0C4BE 	        _NEXT 
 160              	
 161              	/*******************************
 162              	    ANSI-PARAM ( n -- )
 163              	    convert and transmit 
 164              	    ANSI ESC[  parameter 
 165              	*******************************/
 166 0858 1C080000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 166      0A414E53 
 166      492D5041 
 166      52414D00 
 167 0868 504700BF 	      _NEST 
 168 086c A7270000 	      _DOLIT -1 // c 
 168      FFFFFFFF 
 169 0874 412A0000 	1:    _ADR ONEP  // c+1
 170 0878 9D280000 	      _ADR TOR   
 171 087c A7270000 	      _DOLIT 10 
 171      0A000000 
 172 0884 45310000 	      _ADR SLMOD // r q  
 173 0888 F52A0000 	      _ADR QDUP  // r q q | r 0  
 174 088c E7270000 	      _QBRAN 2f  // r 0 
ARM GAS  forth.s 			page 30


 174      A0080000 
 175 0894 59280000 	      _ADR RFROM // r q c 
 176 0898 FB270000 	      _BRAN 1b
 176      74080000 
 177 08a0 A7270000 	2:    _DOLIT '0'  
 177      30000000 
 178 08a8 E5290000 	      _ADR PLUS 
 179 08ac B1260000 	      _ADR EMIT 
 180 08b0 59280000 	      _ADR RFROM 
 181 08b4 F52A0000 	      _ADR QDUP 
 182 08b8 E7270000 	      _QBRAN 3f
 182      D0080000 
 183 08c0 512A0000 	      _ADR ONEM 
 184 08c4 9D280000 	      _ADR TOR 
 185 08c8 FB270000 	      _BRAN 2b 
 185      A0080000 
 186              	3:    
 187 08d0 E7250000 	      _UNNEST 
 188              	
 189              	/******************************
 190              	    ESC[ 
 191              	    send ANSI escape sequence
 192              	*******************************/
 193 08d4 5C080000 	      _HEADER ANSI_ESC,4,"ESC["
 193      04455343 
 193      5B0000BF 
 194 08e0 504700BF 	      _NEST 
 195 08e4 A7270000 	      _DOLIT 27 
 195      1B000000 
 196 08ec B1260000 	      _ADR EMIT 
 197 08f0 A7270000 	      _DOLIT '['
 197      5B000000 
 198 08f8 B1260000 	      _ADR EMIT 
 199 08fc E7250000 	      _UNNEST 
 200              	
 201              	/*************************************
 202              	    SER-AT ( line col -- )
 203              	    move cursor on serial console
 204              	*************************************/
 205 0900 D8080000 	      _HEADER SER_AT,6,"SER-AT"
 205      06534552 
 205      2D415400 
 206 090c 504700BF 	      _NEST
 207 0910 E1080000 	      _ADR ANSI_ESC
 208 0914 31290000 	      _ADR SWAP 
 209 0918 69080000 	      _ADR ANSI_PARAM 
 210 091c A7270000 	      _DOLIT ';'
 210      3B000000 
 211 0924 B1260000 	      _ADR EMIT
 212 0928 69080000 	      _ADR ANSI_PARAM
 213 092c A7270000 	      _DOLIT 'H'
 213      48000000 
 214 0934 B1260000 	      _ADR EMIT 
 215 0938 E7250000 	      _UNNEST 
 216              	
 217              	/****************************
 218              	    SER-CLS ( -- )
ARM GAS  forth.s 			page 31


 219              	    serial clear screeen 
 220              	****************************/
 221 093c 04090000 	    _HEADER SER_CLS,7,"SER-CLS"
 221      07534552 
 221      2D434C53 
 222 0948 504700BF 	    _NEST
 223 094c A7270000 	    _DOLIT 1 
 223      01000000 
 224 0954 21290000 	    _ADR DUPP 
 225 0958 0D090000 	    _ADR SER_AT  
 226 095c E1080000 	    _ADR ANSI_ESC
 227 0960 A7270000 	    _DOLIT 'J'
 227      4A000000 
 228 0968 B1260000 	    _ADR EMIT 
 229 096c E7250000 	    _UNNEST 
 230 0970 94070000 	
 230      D0070000 
 230      7C500000 
 230      2C160000 
 230      F40E0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
ARM GAS  forth.s 			page 32


   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
ARM GAS  forth.s 			page 33


  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0984 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 098c 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 098e 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0996 41EA0201 	  orr r1,r2
  82 099a 0160     	  str r1,[r0,#GPIO_MODER]
  83 099c 81EA0101 	  eor r1,r1 
  84 09a0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 09a2 4FF00101 	  mov r1,#1 // pin 1 
  88 09a6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 09aa 00B5FFF7 	  _CALL gpio_config 
  89      DBFD5DF8 
  89      04EB
  90 09b4 4FF00101 	  mov r1,#1 
  91 09b8 4FF00202 	  mov r2,#2
  92 09bc 00B5FFF7 	  _CALL gpio_speed 
  92      11FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 09c6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 09c8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 09cc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 09ce 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 09d6 4FF00200 	  mov r0,#2 
 100 09da 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 09dc 41EA0001 	  orr r1,r0 
 102 09e0 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 09e2 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 09ea 41F2D470 	  mov r0,#HPER
 106 09ee D062     	  str r0,[r2,#TIM_ARR]
 107 09f0 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 09f4 D063     	  str r0,[r2,#TIM_CCR3]
 109 09f6 4FF4E170 	  mov r0,#HPULSE 
 110 09fa 1064     	  str r0,[r2,#TIM_CCR4]  
 111 09fc 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0a00 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0a02 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0a06 1062     	  str r0,[r2,#TIM_CCER]
 115 0a08 4FF00100 	  mov r0,#1 
ARM GAS  forth.s 			page 34


 116 0a0c D060     	  str r0,[r2,#TIM_DIER]
 117 0a0e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0a10 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0a14 4FF00201 	  mov r1,#2
 121 0a18 00B5FFF7 	  _CALL nvic_set_priority
 121      5FFD5DF8 
 121      04EB
 122 0a22 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0a26 00B5FFF7 	  _CALL nvic_enable_irq
 123      71FD5DF8 
 123      04EB
 124 0a30 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0a32 00BF     	  _GBL_FUNC tv_out_isr
 132 0a34 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0a3c 81EA0101 	  eor T1,T1
 134 0a40 0161     	  str T1,[T0,#TIM_SR]
 135 0a42 616E     	  ldr T1,[UP,#VID_CNTR]
 136 0a44 01F10101 	  add T1,#1 
 137 0a48 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0a4a A26E     	  ldr T2,[UP,#VID_STATE]
 140 0a4c 002A     	  cmp T2,#ST_VSYNC 
 141 0a4e 07D0     	  beq state_vsync
 142 0a50 012A     	  cmp T2,#ST_PREVID 
 143 0a52 2FD0     	  beq state_pre_video 
 144 0a54 022A     	  cmp T2,#ST_VIDEO 
 145 0a56 36D0     	  beq state_video_out 
 146 0a58 032A     	  cmp T2,#ST_POSTVID 
 147 0a5a 63D0     	  beq state_post_video
 148 0a5c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0a60 0129     	  cmp T1,#1
 152 0a62 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0a64 4FF0DB01 	  mov T1,#SERRATION
 155 0a68 0164     	  str T1,[T0,#TIM_CCR4]
 156 0a6a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0a6e C162     	  str T1,[T0,#TIM_ARR]
 158 0a70 6BE0     	  b tv_isr_exit 
 159 0a72 0729     	1: cmp T1,#7
 160 0a74 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0a76 40F62821 	  mov T1,#VSYNC_PULSE
 163 0a7a 0164     	  str T1,[T0,#TIM_CCR4]
 164 0a7c 65E0     	  b tv_isr_exit
 165 0a7e 0D29     	2: cmp T1,#13
 166 0a80 03D1     	   bne 3f  
 167              	// set vertical post-sync    
ARM GAS  forth.s 			page 35


 168 0a82 4FF0DB01 	   mov T1,#SERRATION 
 169 0a86 0164     	   str T1,[T0,#TIM_CCR4]
 170 0a88 5FE0     	   b tv_isr_exit   
 171 0a8a 1229     	3: cmp T1,#18
 172 0a8c 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0a8e E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0a90 0029     	   cmp T1,#ODD_FIELD  
 176 0a92 5AD0     	   beq tv_isr_exit 
 177 0a94 01E0     	   b sync_end 
 178 0a96 1329     	4: cmp T1,#19 
 179 0a98 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0a9a 4FF00901 	   mov T1,#9
 182 0a9e 6166     	   str T1,[UP,#VID_CNTR]
 183 0aa0 4FF4E171 	   mov T1,#HPULSE 
 184 0aa4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0aa6 41F2D471 	   mov T1,#HPER 
 186 0aaa C162     	   str T1,[T0,#TIM_ARR] 
 187 0aac 4FF00101 	   mov T1,#ST_PREVID 
 188 0ab0 A166     	   str T1,[UP,#VID_STATE]
 189 0ab2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ab4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ab6 48D4     	   bmi tv_isr_exit 
 194 0ab8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0abc A166     	   str T1,[UP,#VID_STATE]
 196 0abe 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0ac2 C160     	   str T1,[T0,#TIM_DIER]
 198 0ac4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0ac6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ac8 06D9     	   bls 1f 
 205 0aca 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ace A166     	   str T1,[UP,#VID_STATE]
 207 0ad0 4FF00101 	   mov T1,#1 
 208 0ad4 C160     	   str T1,[T0,#TIM_DIER]
 209 0ad6 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ad8 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ada A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ade 4FF0A003 	   mov T3,#160
 214 0ae2 03FB01F1 	   mul T1,T3 
 215 0ae6 0844     	   add T0,T1  
 216 0ae8 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0af0 10F8012B 	2: ldrb T2,[T0],#1 
 222 0af4 4FEA0222 	   lsl T2,#8 
 223 0af8 8A82     	   strh T2,[T1,#GPIO_ODR]
ARM GAS  forth.s 			page 36


 224 0afa AFF30080 	   nop.w 
 225 0afe AFF30080 	   nop.w
 226 0b02 AFF30080 	   nop.w 
 227 0b06 AFF30080 	   nop.w 
 228 0b0a 4FEA0212 	   lsl T2,#4  
 229 0b0e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0b10 AFF30080 	   nop.w
 231 0b14 AFF30080 	   nop.w  
 232 0b18 013B     	   subs T3,#1
 233 0b1a E9D1     	   bne 2b  
 234 0b1c 4FF47022 	   mov T2,#(15<<16) 
 235 0b20 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0b22 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0b24 4FF48372 	   mov T2,#262
 239 0b28 9142     	   cmp T1,T2
 240 0b2a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0b2c E16E     	   ldr T1,[UP,VID_FIELD]
 243 0b2e 11B9     	   cbnz T1, frame_end 
 244 0b30 40F6E931 	   mov T1,#SYNC_LINE
 245 0b34 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0b36 4FF00001 	   mov T1,#ST_VSYNC 
 248 0b3a A166     	   str T1,[UP,#VID_STATE]
 249 0b3c 81EA0101 	   eor T1,T1 
 250 0b40 6166     	   str T1,[UP,#VID_CNTR]
 251 0b42 E16E     	   ldr T1,[UP,#VID_FIELD]
 252 0b44 6FEA0101 	   mvn T1,T1  
 253 0b48 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0b4a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0b4c 40090000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0b5c 47F8046D 		_PUSH 
 266 0b60 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0b64 01F03CBD 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0b68 500B0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0b78 47F8046D 		_PUSH 
 273 0b7c 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0b80 01F02EBD 		_NEXT 
ARM GAS  forth.s 			page 37


 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0b84 6C0B0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0b90 47F8046D 	  _PUSH 
 280 0b94 04F19406 	  ADD TOS,UP,#COL 
 281 0b98 01F022BD 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0b9c 880B0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0ba4 47F8046D 	  _PUSH 
 287 0ba8 04F19006 	  ADD TOS,UP,#ROW 
 288 0bac 01F018BD 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0bb0 A00B0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0bbc 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0bc0 00FB06F6 	  mul TOS,T0 
 295 0bc4 01F00CBD 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0bc8 B40B0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0bd4 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0bd8 00FB06F6 	  mul TOS,T0 
 302 0bdc 01F000BD 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0be0 CC0B0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0bec 47F8046D 	  _PUSH 
 308 0bf0 DFF88C65 	  ldr TOS,=font_6x8 
 309 0bf4 01F0F4BC 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0bf8 E40B0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0c04 47F8046D 	  _PUSH 
 315 0c08 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0c0a 01F0E9BC 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
ARM GAS  forth.s 			page 38


 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0c0e FC0B0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0c18 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0c1a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0c1e 02FB00F0 	    mul T0,T2 
 330 0c22 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0c26 1044     	    add T0,T2 
 332 0c28 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0c2a 0344     	    add T3,T0 // T3 -> byte address 
 334 0c2c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0c2e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0c32 11F0010F 	    tst T1,#1 
 337 0c36 01D0     	    beq 1f 
 338 0c38 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0c3c DFF84405 	1:  ldr T0,=plot_op 
 340 0c40 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0c44 05EA0205 	    and WP,T2 // mask out nibble 
 343 0c48 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 0c4c 11F0010F 	    tst T1,#1 
 345 0c50 01D1     	    bne 1f 
 346 0c52 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0c56 45EA0005 	1:  orr WP,T0  
 348 0c5a 1D70     	    strb WP,[T3]
 349 0c5c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0c5e 05EA0205 	    and WP,T2 
 352 0c62 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0c66 11F0010F 	    tst T1,#1
 354 0c6a 01D1     	    bne 1f 
 355 0c6c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0c70 45EA0005 	1:	orr WP,T0 
 357 0c74 1D70     	    strb WP,[T3]
 358 0c76 0DE0     	    b 9f 
 359              	op_invert:
 360 0c78 85EA0205 	    eor WP,T2 
 361 0c7c 1D70     	    strb WP,[T3]
 362 0c7e 09E0     	    b 9f 
 363              	op_xor:
 364 0c80 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0c84 11F0010F 	    tst T1,#1 
 366 0c88 01D1     	    bne 1f 
 367 0c8a 4FEA0010 	    lsl T0,#4 
 368 0c8e 85EA0005 	1:  eor WP,T0 
 369 0c92 1D70     	    strb WP,[T3]
 370 0c94 57F8046B 	9:  _POP 
 371 0c98 01F0A2BC 	    _NEXT 
 372              	
 373 0c9c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
ARM GAS  forth.s 			page 39


 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ca0 120C0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0cac 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0cae 0028     	    cmp T0,#0
 381 0cb0 FCD1     	    bne 1b
 382 0cb2 01F095BC 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0cb6 A40C0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0cc0 80EA0000 	    eor T0,T0 
 388 0cc4 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0cc8 40EA0100 	    orr T0,T1 
 390 0ccc 4FEA0111 	    lsl T1,#4 
 391 0cd0 40EA0100 	    orr T0,T1 
 392 0cd4 4FEA0021 	    lsl T1,T0,#8 
 393 0cd8 40EA0100 	    orr T0,T1 
 394 0cdc 4FEA0041 	    lsl T1,T0,#16
 395 0ce0 40EA0100 	    orr T0,T1 
 396 0ce4 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0ce8 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0cea 5050     	1:	str T0,[T2,T1]
 399 0cec 0439     	    subs T1,#4
 400 0cee FCD1     	    bne 1b
 401 0cf0 1060     	    str T0,[T2]
 402 0cf2 80EA0000 	    eor T0,T0 
 403 0cf6 C4F89000 	    str T0,[UP,#ROW]
 404 0cfa C4F89400 	    str T0,[UP,#COL]
 405 0cfe 01F06FBC 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0d02 BA0C0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0d10 504700BF 	  _NEST
 412 0d14 A7270000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0d1c 21290000 	  _ADR DUPP  
 414 0d20 9D280000 	  _ADR TOR 
 415 0d24 052A0000 	  _ADR STAR
 416 0d28 050C0000 	  _ADR VIDBUFF
 417 0d2c E5290000 	  _ADR PLUS
 418 0d30 59280000 	  _ADR RFROM   
 419 0d34 A7270000 	  _DOLIT 0 
 419      00000000 
 420 0d3c 79330000 	  _ADR FILL 
 421 0d40 E7250000 	  _UNNEST 
 422              	
 423              	/**********************************
ARM GAS  forth.s 			page 40


 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0d44 060D0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0d54 504700BF 	    _NEST 
 429 0d58 050C0000 	    _ADR VIDBUFF 
 430 0d5c 21290000 	    _ADR DUPP 
 431 0d60 A7270000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0d68 21290000 	    _ADR DUPP 
 433 0d6c 9D280000 	    _ADR TOR 
 434 0d70 E5290000 	    _ADR PLUS 
 435 0d74 31290000 	    _ADR SWAP 
 436 0d78 A7270000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0d80 59280000 	    _ADR RFROM  
 438 0d84 F5290000 	    _ADR SUBB 
 439 0d88 31330000 	    _ADR MOVE
 440 0d8c A7270000 	    _DOLIT 24 
 440      18000000 
 441 0d94 110D0000 	    _ADR CLRLINE 
 442 0d98 E7250000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0d9c 480D0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0dac 504700BF 	    _NEST 
 450 0db0 050C0000 	    _ADR VIDBUFF
 451 0db4 21290000 	    _ADR DUPP 
 452 0db8 A7270000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0dc0 E5290000 	    _ADR PLUS 
 454 0dc4 A7270000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0dcc A7270000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0dd4 F5290000 	    _ADR SUBB  
 457 0dd8 31330000 	    _ADR MOVE
 458 0ddc A7270000 	    _DOLIT 0 
 458      00000000 
 459 0de4 110D0000 	    _ADR CLRLINE
 460 0de8 E7250000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0dec A00D0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
ARM GAS  forth.s 			page 41


 467      0754562D 
 467      43524C46 
 468 0df8 E34D     	    ldr WP,=SCROLLUP 
 469 0dfa 45F00105 	    orr WP,#1
 470 0dfe 80EA0000 	    eor T0,T0 
 471 0e02 C4F89400 	    str T0,[UP,#COL]
 472 0e06 D4F89000 	    ldr T0,[UP,#ROW]
 473 0e0a 1828     	    cmp T0,#24 
 474 0e0c A2D0     	    beq SCROLLUP  
 475 0e0e 00F10100 	    add T0,#1 
 476 0e12 C4F89000 	    str T0,[UP,#ROW]
 477 0e16 01F0E3BB 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0e1a F00D0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0e24 D4F89400 	  ldr T0,[UP,#COL]
 484 0e28 00F10100 	  add T0,#1
 485 0e2c 3528     	  cmp T0,#53
 486 0e2e E3D5     	  bpl TV_CRLF  
 487 0e30 C4F89400 	  str T0,[UP,#COL]
 488 0e34 01F0D4BB 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0e38 1E0E0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0e44 D4F89400 	    ldr T0,[UP,#COL]
 497 0e48 28B1     	    cbz T0,1f 
 498 0e4a A0F10100 	    sub T0,#1 
 499 0e4e C4F89400 	    str T0,[UP,#COL]
 500 0e52 01F0C5BB 	    _NEXT 
 501 0e56 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0e5a 38B1     	    cbz T0,9f
 503 0e5c A0F10100 	    sub T0,#1
 504 0e60 C4F89000 	    str T0,[UP,#ROW]
 505 0e64 4FF03400 	    mov T0,#52 
 506 0e68 C4F89400 	    str T0,[UP,#COL]
 507 0e6c 01F0B8BB 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0e70 4FF08000 	    mov T0,#128 
 513 0e74 06EA0006 	    and TOS,T0 
 514 0e78 4FEAD616 	    lsr TOS,#7
 515 0e7c 01F0B0BB 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
ARM GAS  forth.s 			page 42


 519 0e80 3868     	  ldr T0,[DSP]
 520 0e82 00F10100 	  add T0,#1 
 521 0e86 3860     	  str T0,[DSP]
 522 0e88 01F0AABB 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0e8c 4FEA4606 	    lsl TOS,#1
 527 0e90 01F0A6BB 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0e94 504700BF 	    _NEST 
 536 0e98 A7270000 	    _DOLIT 5 
 536      05000000 
 537 0ea0 9D280000 	    _ADR TOR 
 538 0ea4 9D280000 	1:  _ADR TOR 
 539 0ea8 592B0000 	    _ADR DDUP 
 540 0eac 89280000 	    _ADR RAT
 541 0eb0 710E0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0eb4 190C0000 	    _ADR PLOT 
 543 0eb8 810E0000 	    _ADR INCR_X 
 544 0ebc 59280000 	    _ADR RFROM 
 545 0ec0 8D0E0000 	    _ADR NEXT_PIXEL
 546 0ec4 C9270000 	    _DONXT 1b
 546      A40E0000 
 547 0ecc 452B0000 	    _ADR TDROP 
 548 0ed0 E7250000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0ed4 A6F12006 	   sub TOS,#32
 553 0ed8 4FF00800 	   mov T0,#8 
 554 0edc 00FB06F6 	   mul TOS,T0 
 555 0ee0 A748     	   ldr T0,=font_6x8
 556 0ee2 0644     	   add TOS,T0 
 557 0ee4 01F07CBB 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0ee8 3C0E0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0ef4 504700BF 	    _NEST
 565 0ef8 21290000 	    _ADR DUPP 
 566 0efc A7270000 	    _DOLIT 32 
 566      20000000 
 567 0f04 A52C0000 	    _ADR ULESS
 568 0f08 E7270000 	    _QBRAN 1f
 568      180F0000 
 569 0f10 FB270000 	    _BRAN CTRL_KEY
ARM GAS  forth.s 			page 43


 569      7C0F0000 
 570 0f18 D50E0000 	1:  _ADR CHAR_FONT 
 571 0f1c 910B0000 	    _ADR CURSOR_COL 
 572 0f20 2D280000 	    _ADR AT
 573 0f24 D50B0000 	    _ADR COLX  // x coord 
 574 0f28 A50B0000 	    _ADR CURSOR_ROW 
 575 0f2c 2D280000 	    _ADR AT    
 576 0f30 BD0B0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0f34 092B0000 	    _ADR ROT  // TEST 
 578 0f38 A7270000 	    _DOLIT 7   
 578      07000000 
 579 0f40 9D280000 	    _ADR TOR  
 580 0f44 9D280000 	1:  _ADR TOR  // { x y }
 581 0f48 592B0000 	    _ADR DDUP  // { x y x y }
 582 0f4c 89280000 	    _ADR RAT 
 583 0f50 4D280000 	    _ADR CAT   // { x y x y r }
 584 0f54 950E0000 	    _ADR CHAR_ROW 
 585 0f58 412A0000 	    _ADR ONEP // {x y' }
 586 0f5c 59280000 	    _ADR RFROM 
 587 0f60 412A0000 	    _ADR ONEP // {x y' c-adr' }
 588 0f64 C9270000 	    _DONXT 1b
 588      440F0000 
 589 0f6c 452B0000 	    _ADR TDROP  
 590 0f70 250E0000 	    _ADR RIGHT
 591 0f74 65100000 	9:  _ADR SHOW_CURSOR 
 592 0f78 E7250000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0f7c ED100000 	    _ADR HIDE_CURSOR
 595 0f80 21290000 	    _ADR DUPP 
 596 0f84 A7270000 	    _DOLIT BKSPP  
 596      08000000 
 597 0f8c 6D2C0000 	    _ADR EQUAL 
 598 0f90 E7270000 	    _QBRAN 1f 
 598      A80F0000 
 599 0f98 45100000 	    _ADR BACK_SPACE 
 600 0f9c 11290000 	8:  _ADR DROP 
 601 0fa0 FB270000 	    _BRAN 9b 
 601      740F0000 
 602 0fa8 21290000 	1:  _ADR DUPP 
 603 0fac A7270000 	    _DOLIT CRR 
 603      0D000000 
 604 0fb4 6D2C0000 	    _ADR EQUAL 
 605 0fb8 E7270000 	    _QBRAN 1f 
 605      CC0F0000 
 606 0fc0 ED0F0000 	    _ADR CAR_RET
 607 0fc4 FB270000 	    _BRAN 8b
 607      9C0F0000 
 608 0fcc A7270000 	1:  _DOLIT LF 
 608      0A000000 
 609 0fd4 6D2C0000 	    _ADR EQUAL 
 610 0fd8 E7270000 	    _QBRAN 9b 
 610      740F0000 
 611 0fe0 05100000 	    _ADR LN_FEED
 612 0fe4 FB270000 	    _BRAN 9b  
 612      740F0000 
 613              	
 614              	/*******************************
ARM GAS  forth.s 			page 44


 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0fec 504700BF 	   _NEST
 620 0ff0 A7270000 	   _DOLIT 0 
 620      00000000 
 621 0ff8 910B0000 	   _ADR CURSOR_COL 
 622 0ffc 19280000 	   _ADR STORE 
 623 1000 E7250000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1004 504700BF 	    _NEST 
 631 1008 A50B0000 	    _ADR CURSOR_ROW 
 632 100c 2D280000 	    _ADR AT 
 633 1010 21290000 	    _ADR DUPP 
 634 1014 A7270000 	    _DOLIT 24 
 634      18000000 
 635 101c 8D290000 	    _ADR XORR 
 636 1020 E7270000 	    _QBRAN 1f
 636      38100000 
 637 1028 412A0000 	    _ADR ONEP 
 638 102c A50B0000 	    _ADR CURSOR_ROW 
 639 1030 19280000 	    _ADR STORE 
 640 1034 E7250000 	    _UNNEST    
 641 1038 11290000 	1:  _ADR DROP 
 642 103c 550D0000 	    _ADR SCROLLUP 
 643 1040 E7250000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1044 504700BF 	  _NEST 
 652 1048 450E0000 	  _ADR LEFT 
 653 104c 65100000 	  _ADR SHOW_CURSOR
 654 1050 E7250000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1054 EC0E0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1064 504700BF 	    _NEST 
 663 1068 A7270000 	    _DOLIT 0xFF
 663      FF000000 
 664 1070 A50B0000 	0:  _ADR CURSOR_ROW
ARM GAS  forth.s 			page 45


 665 1074 2D280000 	    _ADR AT  
 666 1078 412A0000 	    _ADR ONEP 
 667 107c BD0B0000 	    _ADR ROWY 
 668 1080 A7270000 	    _DOLIT BPR
 668      A0000000 
 669 1088 052A0000 	    _ADR STAR
 670 108c A7270000 	    _DOLIT BPR  
 670      A0000000 
 671 1094 F5290000 	    _ADR SUBB 
 672 1098 910B0000 	    _ADR CURSOR_COL
 673 109c 2D280000 	    _ADR AT 
 674 10a0 D50B0000 	    _ADR COLX 
 675 10a4 E52A0000 	    _ADR TWOSL  
 676 10a8 E5290000 	    _ADR PLUS
 677 10ac 050C0000 	    _ADR VIDBUFF
 678 10b0 E5290000 	    _ADR PLUS
 679 10b4 A7270000 	    _DOLIT 2
 679      02000000 
 680 10bc 9D280000 	    _ADR TOR  
 681 10c0 592B0000 	1:  _ADR DDUP 
 682 10c4 39280000 	    _ADR CSTOR 
 683 10c8 412A0000 	    _ADR ONEP 
 684 10cc C9270000 	    _DONXT 1b
 684      C0100000 
 685 10d4 312B0000 	2:  _ADR DDROP // drop 3 elements 
 686 10d8 E7250000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 10dc 58100000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 10ec 504700BF 	    _NEST 
 694 10f0 5D0B0000 	    _ADR BACKCOLOR 
 695 10f4 2D280000 	    _ADR AT 
 696 10f8 21290000 	    _ADR DUPP  
 697 10fc A7270000 	    _DOLIT 4 
 697      04000000 
 698 1104 D5290000 	    _ADR LSHIFT 
 699 1108 79290000 	    _ADR ORR 
 700 110c FB270000 	    _BRAN 0b
 700      70100000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1114 E0100000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1120 352E     	    cmp TOS,#53
 706 1122 01D4     	    bmi 1f 
 707 1124 4FF03406 	    mov TOS,#52
 708 1128 C4F89460 	1:  str TOS,[UP,#COL]
 709 112c 57F8046B 	    _POP
 710 1130 192E     	    cmp TOS,#25
ARM GAS  forth.s 			page 46


 711 1132 01D4     	    bmi 1f 
 712 1134 4FF01806 	    mov TOS,#24 
 713 1138 C4F89060 	1:  str TOS,[UP,#ROW]
 714 113c 57F8046B 	    _POP 
 715 1140 01F04EBA 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1144 18110000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1150 504700BF 	    _NEST 
 721 1154 A9320000 	    _ADR PAD 
 722 1158 21290000 	    _ADR DUPP 
 723 115c 412A0000 	    _ADR ONEP 
 724 1160 A7270000 	    _DOLIT 53
 724      35000000 
 725 1168 0D400000 	    _ADR ACCEP
 726 116c 31290000 	    _ADR SWAP 
 727 1170 11290000 	    _ADR DROP 
 728 1174 45290000 	    _ADR OVER 
 729 1178 39280000 	    _ADR CSTOR  
 730 117c E7250000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
ARM GAS  forth.s 			page 47


 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
ARM GAS  forth.s 			page 48


 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
ARM GAS  forth.s 			page 49


 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
ARM GAS  forth.s 			page 50


 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
ARM GAS  forth.s 			page 51


  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
ARM GAS  forth.s 			page 52


  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
ARM GAS  forth.s 			page 53


 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 118c 1C61     	   .byte 0x1c,'a' 
   9 118e 3262     	   .byte 0x32,'b'
  10 1190 2163     	   .byte 0x21,'c'
  11 1192 2364     	   .byte 0x23,'d'
  12 1194 2465     	   .byte 0x24,'e'
  13 1196 2B66     	   .byte 0x2b,'f'
  14 1198 3467     	   .byte 0x34,'g'
  15 119a 3368     	   .byte 0x33,'h'
  16 119c 4369     	   .byte 0x43,'i'
  17 119e 3B6A     	   .byte 0x3B,'j'
  18 11a0 426B     	   .byte 0x42,'k'
  19 11a2 4B6C     	   .byte 0x4b,'l'
  20 11a4 3A6D     	   .byte 0x3a,'m'
  21 11a6 316E     	   .byte 0x31,'n'
  22 11a8 446F     	   .byte 0x44,'o'
  23 11aa 4D70     	   .byte 0x4d,'p'
  24 11ac 1571     	   .byte 0x15,'q'
  25 11ae 2D72     	   .byte 0x2d,'r'
  26 11b0 1B73     	   .byte 0x1b,'s'
  27 11b2 2C74     	   .byte 0x2c,'t'
  28 11b4 3C75     	   .byte 0x3c,'u'
  29 11b6 2A76     	   .byte 0x2a,'v'
  30 11b8 1D77     	   .byte 0x1d,'w'
  31 11ba 2278     	   .byte 0x22,'x'
  32 11bc 3579     	   .byte 0x35,'y'
  33 11be 1A7A     	   .byte 0x1a,'z'
  34 11c0 4530     	   .byte 0x45,'0'
ARM GAS  forth.s 			page 54


  35 11c2 1631     	   .byte 0x16,'1'
  36 11c4 1E32     	   .byte 0x1e,'2'
  37 11c6 2633     	   .byte 0x26,'3'
  38 11c8 2534     	   .byte 0x25,'4'
  39 11ca 2E35     	   .byte 0x2e,'5'
  40 11cc 3636     	   .byte 0x36,'6'
  41 11ce 3D37     	   .byte 0x3d,'7'
  42 11d0 3E38     	   .byte 0x3e,'8'
  43 11d2 4639     	   .byte 0x46,'9'
  44 11d4 0E60     	   .byte 0x0e,'`'
  45 11d6 4E2D     	   .byte 0x4e,'-'
  46 11d8 553D     	   .byte 0x55,'='
  47 11da 5D5C     	   .byte 0x5d,'\\'
  48 11dc 545B     	   .byte 0x54,'['
  49 11de 5B5D     	   .byte 0x5b,']'
  50 11e0 4C3B     	   .byte 0x4c,';'
  51 11e2 5227     	   .byte 0x52,'\''
  52 11e4 412C     	   .byte 0x41,','
  53 11e6 492E     	   .byte 0x49,'.'
  54 11e8 7C2A     	   .byte 0x7c,'*'
  55 11ea 792B     	   .byte 0x79,'+'
  56 11ec 2920     	   .byte 0x29,' '
  57 11ee 5A0D     	   .byte SC_ENTER,CRR 
  58 11f0 6608     	   .byte SC_BKSP,BKSPP 
  59 11f2 0D09     	   .byte SC_TAB,9
  60 11f4 761B     	   .byte SC_ESC,27
  61 11f6 119E     	   .byte SC_LALT,VK_LALT 
  62 11f8 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 11fa 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 11fc 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 11fe 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1200 5800     	   .byte SC_CAPS,0
  67 1202 0580     	   .byte SC_F1,VK_F1
  68 1204 0681     	   .byte SC_F2,VK_F2
  69 1206 0482     	   .byte SC_F3,VK_F3
  70 1208 0C83     	   .byte SC_F4,VK_F4
  71 120a 0384     	   .byte SC_F5,VK_F5
  72 120c 0B85     	   .byte SC_F6,VK_F6
  73 120e 8386     	   .byte SC_F7,VK_F7
  74 1210 0A87     	   .byte SC_F8,VK_F8
  75 1212 0188     	   .byte SC_F9,VK_F9
  76 1214 098A     	   .byte SC_F10,VK_F10
  77 1216 788B     	   .byte SC_F11,VK_F11
  78 1218 078C     	   .byte SC_F12,VK_F12
  79 121a 7030     	   .byte SC_KP0,'0'
  80 121c 6931     	   .byte SC_KP1,'1'
  81 121e 7232     	   .byte SC_KP2,'2'
  82 1220 7A33     	   .byte SC_KP3,'3'
  83 1222 6B34     	   .byte SC_KP4,'4'
  84 1224 7335     	   .byte SC_KP5,'5'
  85 1226 7436     	   .byte SC_KP6,'6'
  86 1228 6C37     	   .byte SC_KP7,'7'
  87 122a 7538     	   .byte SC_KP8,'8'
  88 122c 7D39     	   .byte SC_KP9,'9'
  89 122e 7C2A     	   .byte SC_KPMUL,'*'
  90 1230 4A2F     	   .byte SC_KPDIV,'/'
  91 1232 792B     	   .byte SC_KPPLUS,'+'
ARM GAS  forth.s 			page 55


  92 1234 7B2D     	   .byte SC_KPMINUS,'-'
  93 1236 712E     	   .byte SC_KPDOT,'.'
  94 1238 5A0D     	   .byte SC_KPENTER,'\r'
  95 123a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 123c AAAA     	   .byte BAT_OK,BAT_OK  
  97 123e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1240 6141     	   .byte 'a','A'
 102 1242 6242     	   .byte 'b','B'
 103 1244 6343     	   .byte 'c','C'
 104 1246 6444     	   .byte 'd','D'
 105 1248 6545     	   .byte 'e','E'
 106 124a 6646     	   .byte 'f','F'
 107 124c 6747     	   .byte 'g','G'
 108 124e 6848     	   .byte 'h','H'
 109 1250 6949     	   .byte 'i','I'
 110 1252 6A4A     	   .byte 'j','J'
 111 1254 6B4B     	   .byte 'k','K'
 112 1256 6C4C     	   .byte 'l','L'
 113 1258 6D4D     	   .byte 'm','M'
 114 125a 6E4E     	   .byte 'n','N'
 115 125c 6F4F     	   .byte 'o','O'
 116 125e 7050     	   .byte 'p','P'
 117 1260 7151     	   .byte 'q','Q'
 118 1262 7252     	   .byte 'r','R'
 119 1264 7353     	   .byte 's','S'
 120 1266 7454     	   .byte 't','T'
 121 1268 7555     	   .byte 'u','U'
 122 126a 7656     	   .byte 'v','V'
 123 126c 7757     	   .byte 'w','W'
 124 126e 7858     	   .byte 'x','X'
 125 1270 7959     	   .byte 'y','Y'
 126 1272 7A5A     	   .byte 'z','Z'
 127 1274 3121     	   .byte '1','!'
 128 1276 3240     	   .byte '2','@'
 129 1278 3323     	   .byte '3','#'
 130 127a 3424     	   .byte '4','$'
 131 127c 3525     	   .byte '5','%'
 132 127e 365E     	   .byte '6','^'
 133 1280 3726     	   .byte '7','&'
 134 1282 382A     	   .byte '8','*'
 135 1284 3928     	   .byte '9','('
 136 1286 3029     	   .byte '0',')'
 137 1288 2D5F     	   .byte '-','_'
 138 128a 3D2B     	   .byte '=','+'
 139 128c 607E     	   .byte '`','~'
 140 128e 2722     	   .byte '\'','"'
 141 1290 2C3C     	   .byte ',','<'
 142 1292 2E3E     	   .byte '.','>'
 143 1294 2F3F     	   .byte '/','?'
 144 1296 5C7C     	   .byte '\\','|'
 145 1298 3B3A     	   .byte ';',':'
 146 129a 5B7B     	   .byte '[','{'
 147 129c 5D7D     	   .byte ']','}'
 148 129e 0000     	   .byte 0,0
ARM GAS  forth.s 			page 56


 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 12a0 315C     	   .byte '1','\\'
 153 12a2 3240     	   .byte '2','@'
 154 12a4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 12a6 363F     	   .byte '6','?'
 158 12a8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 12aa 397B     	   .byte '9','{'
 161 12ac 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 12ae 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 12b0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 12b2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 12b4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 12b6 11A3     	    .byte SC_RALT,VK_RALT
 172 12b8 2F97     	    .byte SC_APPS,VK_APPS
 173 12ba 758D     	    .byte SC_UP,VK_UP
 174 12bc 728E     	    .byte SC_DOWN,VK_DOWN
 175 12be 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 12c0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 12c2 7095     	    .byte SC_INSERT,VK_INSERT
 178 12c4 6C91     	    .byte SC_HOME,VK_HOME
 179 12c6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 12c8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 12ca 717F     	    .byte SC_DEL,VK_DELETE
 182 12cc 6992     	    .byte SC_END,VK_END
 183 12ce 4A2F     	    .byte SC_KPDIV,'/'
 184 12d0 5A0D     	    .byte SC_KPENTER,'\r'
 185 12d2 1200     	    .byte 0x12,0
 186 12d4 7C00     	    .byte 0x7c,0
 187 12d6 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 12d8 6303     	   .byte 'c', VK_CTRL_C 
 193 12da 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 12dc 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 12de 27A2     	   .byte SC_RGUI,VK_RGUI
 196 12e0 11A3     	   .byte SC_RALT,VK_RALT
 197 12e2 2F97     	   .byte SC_APPS,VK_APPS
 198 12e4 7095     	   .byte SC_INSERT,VK_INSERT
 199 12e6 6C91     	   .byte SC_HOME,VK_HOME
 200 12e8 7D93     	   .byte SC_PGUP,VK_PGUP
 201 12ea 717F     	   .byte SC_DEL,VK_DELETE
 202 12ec 6992     	   .byte SC_END,VK_END
 203 12ee 7A94     	   .byte SC_PGDN,VK_PGDN
 204 12f0 758D     	   .byte SC_UP,VK_UP
 205 12f2 6B8F     	   .byte SC_LEFT,VK_LEFT
ARM GAS  forth.s 			page 57


 206 12f4 728E     	   .byte SC_DOWN,VK_DOWN
 207 12f6 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 12f8 4A2F     	   .byte SC_KPDIV,'/'
 209 12fa 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 12fc 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 12fe 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1300 119E     	   .byte SC_LALT,VK_LALT
 213 1302 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1304 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1306 761B     	   .byte SC_ESC,VK_ESC
 216 1308 779A     	   .byte SC_NUM,VK_NLOCK
 217 130a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 130c 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 130e 00BF     	    _GBL_FUNC kbd_isr 
  79 1310 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
ARM GAS  forth.s 			page 58


  79      C4F20102 
  80 1318 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 131c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 131e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1326 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 132a 10F0020F 	    tst r0,#KBD_TX 
  85 132e 40F08480 	    bne send_bit  
  86 1332 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1334 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1338 01F10102 	    add r2,r1,#1
  89 133c 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 1340 0029     	    cmp r1,#0
  91 1342 15D0     	    beq start_bit 
  92 1344 0929     	    cmp r1,#9 
  93 1346 25D0     	    beq parity_bit 
  94 1348 0A29     	    cmp r1,#10 
  95 134a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 134c 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1350 4FEA5202 	    lsr r2,#1 
  99 1354 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1358 07D0     	    beq 1f 
 101 135a 42F08002 	    orr r2,#(1<<7)
 102 135e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 1362 00F10100 	    add r0,#1 
 104 1366 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 136a 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 136e 63E0     	    b 9f         
 107              	start_bit:
 108 1370 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1374 60D1     	    bne 9f // not a start bit 
 110 1376 80EA0000 	    eor r0,r0 
 111 137a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 137e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 1382 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1386 6FF00101 	    mvn r1,#1
 115 138a 00EA0100 	    and r0,r1 // clear error flag 
 116 138e 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 1392 51E0     	    b 9f 
 118              	parity_bit:
 119 1394 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1398 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 139c 4CD0     	    beq 9f  
 122 139e 01F10101 	    add r1,#1 
 123 13a2 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 13a6 47E0     	    b 9f      
 125              	stop_bit:
 126 13a8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 13ac 40D0     	    beq 8f // error stop bit expected 
 128 13ae 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 13b2 11F0010F 	    tst r1,#1 
 130 13b6 3BD0     	    beq 8f // error parity
 131 13b8 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 13bc 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 13c0 E028     	    cmp r0,#XT_KEY
 134 13c2 04D1     	    bne 1f
ARM GAS  forth.s 			page 59


 135 13c4 41F04001 	    orr r1,#KBD_F_XT
 136 13c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 13cc 30E0     	    b 8f  
 138 13ce 11F0800F 	1:  tst r1,#KBD_F_REL
 139 13d2 14D0     	    beq store_code
 140 13d4 5828     	    cmp r0,#SC_CAPS
 141 13d6 04D1     	    bne 1f
 142 13d8 81F00401 	    eor r1,#KBD_F_CAPS
 143 13dc 41F00101 	    orr r1,#KBD_F_CTGL 
 144 13e0 06E0     	    b 2f 
 145 13e2 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 13ec 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 13f0 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 13f4 01EA0201 	    and r1,r2
 149 13f8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 13fc 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 13fe F028     	    cmp r0,#KEY_REL
 154 1400 04D1     	    bne 1f
 155              	// set release flags 
 156 1402 41F08001 	    orr r1,#KBD_F_REL 
 157 1406 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 140a 11E0     	    b 8f     
 159 140c 0146     	1:  mov r1,r0 
 160 140e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1418 0AD1     	    bne 8f // was async key 
 162 141a D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 141e 04F17802 	    add r2,UP,#KBD_QUEUE
 164 1422 1154     	    strb r1,[r2,r0]
 165 1424 00F10100 	    add r0,#1
 166 1428 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 142c 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 1430 80EA0000 	8:  eor r0,r0 
 169 1434 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 1438 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 143a 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 143e 01F10100 	    add r0,r1,#1
 182 1442 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 1446 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 144a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 144e 0829     	1:  cmp r1,#8 
 187 1450 15D0     	    beq send_parity 
ARM GAS  forth.s 			page 60


 188 1452 0929     	    cmp r1,#9 
 189 1454 1CD0     	    beq send_stop
 190 1456 0A29     	    cmp r1,#10
 191 1458 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 145a 10F0010F 	    tst r0,#1
 194 145e 4FEA5000 	    lsr r0,#1
 195 1462 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 1466 02D1     	    bne 1f 
 197 1468 4FEA0242 	    lsl r2,#16
 198 146c 05E0     	    b 2f  
 199 146e 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1472 00F10100 	    add r0,#1 
 201 1476 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 147a 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 147c 1CE0     	    b 9f 
 204              	send_parity:
 205 147e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 1482 10F0010F 	    tst r0,#1
 207 1486 01D0     	    beq 1f 
 208 1488 4FEA0242 	    lsl r2,#16
 209 148c 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 148e 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1490 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1492 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1496 1960     	    str r1,[r3,#GPIO_MODER]
 217 1498 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 149a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 149e 6FF00201 	    mvn r1,#KBD_TX 
 221 14a2 00EA0100 	    and r0,r1 
 222 14a6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 14a8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 14ac 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 14b0 80EA0000 	    eor r0,r0 
 226 14b4 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 14b8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 14ba 02B4     	    push {r1}
 238 14bc DFF86414 	    ldr r1,=async_keys
 239 14c0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 14ca 02BC     	    pop {r1}
 241 14cc 7047     	    _RET 
 242              	
ARM GAS  forth.s 			page 61


 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 14ce 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 14d8 FF28     	    cmp r0,#255
 256 14da 01D1     	    bne set_async_key 
 257 14dc 0020     	    movs r0,#0 
 258 14de 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 14e0 06B4     	    push {r1,r2}
 262 14e2 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 14e6 DFF84014 	    ldr r1,=async_jump 
 264 14ea D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 14ee 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 14f2 04E0     	    b set_reset
 268              	ctrl_key:
 269 14f4 4FF01000 	    mov r0,#KBD_F_CTRL
 270 14f8 01E0     	    b set_reset 
 271              	alt_key:
 272 14fa 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 14fe 12F0800F 	    tst r2,#KBD_F_REL 
 275 1502 04D0     	    beq 1f 
 276 1504 6FEA0000 	    mvn r0,r0
 277 1508 02EA0002 	    and r2,r0
 278 150c 01E0     	    b 2f
 279 150e 42EA0002 	1:  orr r2,r0 
 280 1512 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1516 5FF0FF30 	    movs r0,#-1
 282 151a 06BC     	9:  pop {r1,r2}
 283 151c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 151e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1520 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1522 1401     	    .byte SC_LCTRL,1  // left control 
 290 1524 1401     	    .byte SC_RCTRL,1  // right control 
 291 1526 1102     	    .byte SC_LALT,2  // left alt 
 292 1528 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 152a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 152c 00       	    .byte 0 // shift  key 
 297 152d 03       	    .byte (ctrl_key-shift_key)/2
ARM GAS  forth.s 			page 62


 298 152e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 152f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1530 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1538 1846     	    mov r0,r3 
 311 153a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 153e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1542 00B5FFF7 	    _CALL gpio_config
 313      0FF85DF8 
 313      04EB
 314 154c 1846     	    mov r0,r3 
 315 154e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1552 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1556 00B5FFF7 	    _CALL gpio_config
 317      05F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1560 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1568 4FF40050 	    mov r0,#(2<<12)
 321 156c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 156e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 1576 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 157a 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 157c D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 157e 80EA0000 	   eor r0,r0 
 328 1582 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 1586 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 158a 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 158e 4FF00101 	   mov r1,#1 
 333 1592 00B5FEF7 	   _CALL nvic_set_priority
 333      A2FF5DF8 
 333      04EB
 334 159c 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 15a0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      B4FF5DF8 
 335      04EB
 336 15aa 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 15ac 48110000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
ARM GAS  forth.s 			page 63


 341 15bc 47F8046D 	    _PUSH 
 342 15c0 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 15c4 06F0FC06 	    and TOS,#0xFC  
 344 15c8 01F00AB8 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 15cc 0EB4     	    push {T1,T2,T3}
 352 15ce 80EA0000 	    eor T0,T0  
 353 15d2 04F17803 	    add T3,UP,#KBD_QUEUE
 354 15d6 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 15da D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 15de 9142     	    cmp T1,T2 
 357 15e0 06D0     	    beq 2f  
 358 15e2 585C     	    ldrb T0,[T3,T1]
 359 15e4 01F10101 	    add T1,#1 
 360 15e8 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 15ec C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 15f0 0EBC     	2:  pop {T1,T2,T3}
 363 15f2 7047     	    _RET 
 364              	
 365              	wait_code:
 366 15f4 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 15fe 0000     	    movs T0,T0
 368 1600 F8D0     	    beq wait_code  
 369 1602 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1604 04B4     	    push {T2}
 380 1606 11F8012B 	1:  ldrb T2,[T1],#1
 381 160a 22B1     	    cbz T2,2f 
 382 160c 8242     	    cmp T2,T0
 383 160e 02D0     	    beq 2f 
 384 1610 01F10101 	    add T1,#1 
 385 1614 F7E7     	    b 1b 
 386 1616 0878     	2:  ldrb T0,[T1]
 387 1618 0000     	    movs T0,T0 // set/reset zero flag 
 388 161a 04BC     	9:  pop {T2}
 389 161c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
ARM GAS  forth.s 			page 64


 396 161e B0150000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 162c 47F8046D 	    _PUSH 
 398 1630 86EA0606 	    eor TOS,TOS 
 399 1634 BD49     	    ldr T1,=sc_ascii // translation table
 400 1636 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 163a 4FF04002 	    mov T2,#KBD_F_XT 
 402 163e 1042     	    tst T0,T2
 403 1640 00D0     	    beq 1f
 404 1642 BB49     	    ldr T1,=extended // extended code translation
 405 1644 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 164e 98B1     	    cbz T0,inkey_exit
 407 1650 E128     	    cmp T0,#XT2_KEY // pause 
 408 1652 13D0     	    beq pause_key
 409 1654 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 165e 0646     	    mov TOS,T0
 411 1660 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 166a 032E     	    cmp TOS,#VK_CTRL_C 
 413 166c 3EF444AE 	    beq user_reboot 
 414 1670 47F8046D 	    _PUSH 
 415 1674 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1678 00F0B2BF 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 167c 4FF00701 	    mov T1,#7 
 420 1680 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 168a 0139     	    subs T1,#1
 422 168c F8D1     	    bne 1b 
 423 168e 00F0A7BF 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1692 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1696 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 169a 06D1     	    bne shift_down 
 431 169c 10F0200F 	    tst T0,#KBD_F_ALT  
 432 16a0 06D1     	    bne altchar_down 
 433 16a2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 16a6 06D1     	    bne ctrl_down 
 435 16a8 0DE0     	    b 9f 
 436              	shift_down:
 437 16aa 3046     	    mov T0,TOS 
 438 16ac A149     	    ldr T1,=shifted 
 439 16ae 04E0     	    b 8f 
 440              	altchar_down:
 441 16b0 3046     	    mov T0,TOS 
ARM GAS  forth.s 			page 65


 442 16b2 A149     	    ldr T1,=altchar
 443 16b4 01E0     	    b 8f
 444              	ctrl_down:
 445 16b6 3046     	    mov T0,TOS 
 446 16b8 A049     	    ldr T1,=controls 
 447 16ba 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 16c4 0646     	    mov TOS,T0
 449 16c6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 16d0 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 16d2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 16d6 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 16da 0BD0     	    beq 9f 
 456 16dc 412E     	    cmp TOS,#'A'
 457 16de 09D4     	    bmi 9f 
 458 16e0 5B2E     	    cmp TOS,#'Z'+1 
 459 16e2 03D4     	    bmi 3f 
 460 16e4 612E     	    cmp TOS,#'a'
 461 16e6 05D4     	    bmi 9f 
 462 16e8 7B2E     	    cmp TOS,#'z'+1
 463 16ea 03D5     	    bpl 9f 
 464 16ec 4FF02000 	3:  mov T0,#(1<<5)
 465 16f0 86EA0006 	    eor TOS,T0 
 466 16f4 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 16f6 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 16f8 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 16fa 0128     	    cmp r0,ST_PREVID 
 484 16fc FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 16fe 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1702 00B5FEF7 	    _CALL nvic_disable_irq
 487      18FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 170c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1714 1846     	    mov r0,r3 
 491 1716 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
ARM GAS  forth.s 			page 66


 492 171a 4FF01102 	    mov r2,#OUTPUT_OD
 493 171e 00B5FEF7 	    _CALL gpio_config 
 493      21FF5DF8 
 493      04EB
 494 1728 1846     	    mov r0,r3 
 495 172a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 172e 82EA0202 	    eor r2,r2 
 497 1732 00B5FEF7 	    _CALL gpio_out 
 497      6DFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 173c 4FF4E150 	    mov r0,#150*48
 500 1740 0138     	1:  subs r0,#1 
 501 1742 FDD1     	    bne 1b
 502 1744 01BC     	    pop {r0}
 503 1746 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 174a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 174e 40F00200 	    orr r0,#KBD_TX 
 506 1752 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 1756 80EA0000 	    eor r0,r0 
 508 175a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 175e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1762 1846     	    mov r0,r3 
 513 1764 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1768 4FF01102 	    mov r2,#OUTPUT_OD 
 515 176c 00B5FEF7 	    _CALL gpio_config 
 515      FAFE5DF8 
 515      04EB
 516 1776 1846     	    mov r0,r3 
 517 1778 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 177c 82EA0202 	    eor r2,r2 
 519 1780 00B5FEF7 	    _CALL gpio_out
 519      46FF5DF8 
 519      04EB
 520              	// release clock line 
 521 178a 1846     	    mov r0,r3 
 522 178c 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1790 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1794 00B5FEF7 	    _CALL gpio_config
 524      E6FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 179e 4FF00A00 	    mov r0,#10
 528 17a2 E060     	    str r0,[UP,#CD_TIMER]
 529 17a4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 17a6 20B1     	    cbz r0, 4f 
 531 17a8 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 17ac 10F0020F 	    tst r0,#KBD_TX
 533 17b0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 17b2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 17b6 00B5FEF7 	    _CALL nvic_enable_irq
 536      A9FE5DF8 
 536      04EB
ARM GAS  forth.s 			page 67


 537 17c0 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 17c4 20F00201 	    bic r1,r0,#KBD_TX
 539 17c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 17cc 00F00200 	    and r0,#KBD_TX
 541 17d0 48B1     	    cbz r0, 5f
 542 17d2 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 17d4 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 17d8 1960     	    str r1,[r3,#GPIO_MODER]
 545 17da 80EA0000 	    eor r0,r0 
 546 17de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 17e2 6FEA0000 	    mvn r0,r0   
 548 17e6 0EBC     	5:  pop {r1,r2,r3}
 549 17e8 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 17ea 80EA0000 	    eor T0,T0 
 555 17ee C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 17f2 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 17f6 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 17fa 6FF00301 	    mvn T1,#3
 559 17fe 00EA0100 	    and T0,T1 
 560 1802 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1806 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1808 22160000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1814 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1818 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1822 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1824 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 182e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1838 FE28     	    cmp r0,KBD_CMD_RESEND
 574 183a EBD0     	    beq 1b 
 575 183c 4FF4FA70 	    mov T0,#500 
 576 1840 E060     	    str T0,[UP,#CD_TIMER]
 577 1842 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 184c 10B9     	    cbnz T0,3f
 579 184e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1850 0028     	    cmp T0,#0 
 581 1852 F6D1     	    bne 2b 
 582 1854 47F8046D 	3:  _PUSH 
 583 1858 0646     	    mov TOS,T0  
ARM GAS  forth.s 			page 68


 584 185a 00F0C1BE 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 185e 0C180000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 186c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1876 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 187a 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1884 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 188e FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1890 ECD0     	    beq 1b
 598 1892 FA28     	    cmp T0,#KBD_ACK  
 599 1894 F6D1     	    bne 2b 
 600 1896 3046     	2:  mov T0,TOS 
 601 1898 00F00700 	    and T0,#7 
 602 189c 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 18a6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 18b0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 18b2 F0D0     	    beq 2b
 606 18b4 FA28     	    cmp T0,#KBD_ACK 
 607 18b6 F6D1     	    bne 3b  
 608 18b8 57F8046B 	    _POP 
 609 18bc 00F090BE 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 18c0 62180000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 18d0 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 18d4 10F0010F 	    tst T0,#1
 619 18d8 01D1     	    bne 1f 
 620 18da 00F081BE 	    _NEXT 
 621 18de 47F8046D 	1: _PUSH 
 622 18e2 6FF00101 	    mvn T1,#1 
 623 18e6 00EA0100 	    and T0,T1 
 624 18ea 84F87600 	    strb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 69


 625 18ee 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 18f2 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 18fa C4180000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1908 504700BF 	    _NEST
 635 190c D1180000 	1:  _ADR CAPS_LED  
 636 1910 2D160000 	    _ADR PS2_QKEY 
 637 1914 F52A0000 	    _ADR QDUP 
 638 1918 E7270000 	    _QBRAN 1b  
 638      0C190000 
 639 1920 E7250000 	    _UNNEST 
 640 1924 1E150000 	
 640      2C150000 
 640      8C110000 
 640      B0120000 
 640      40120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
ARM GAS  forth.s 			page 70


  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1944 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 194c 0346     	    mov r3,r0 
  44 194e 4FF00401 	    mov r1,#PIN_F_SC 
  45 1952 4FF00102 	    mov r2,#OUTPUT_PP
  46 1956 00B5FEF7 	    _CALL gpio_config 
  46      05FE5DF8 
  46      04EB
  47 1960 1846     	    mov r0,r3 
  48 1962 4FF00401 	    mov r1,#PIN_F_SC  
  49 1966 4FF00102 	    MOV r2,#1
  50 196a 00B5FEF7 	    _CALL gpio_out 
  50      51FE5DF8 
  50      04EB
  51 1974 1846     	    mov r0,r3 
  52 1976 4FF00501 	    mov r1,#PIN_SCK  
  53 197a 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 197e 00B5FEF7 	    _CALL gpio_config 
  54      F1FD5DF8 
  54      04EB
  55 1988 1846     	    mov r0,r3 
  56 198a 4FF00701 	    mov r1,#PIN_MOSI 
  57 198e 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1992 00B5FEF7 	    _CALL gpio_config 
  58      E7FD5DF8 
  58      04EB
  59 199c 1846     	    mov r0,r3
  60 199e 4FF00601 	    mov r1,#PIN_MISO
  61 19a2 4FF00202 	    mov r2,#INPUT_AFO  
  62 19a6 00B5FEF7 	    _CALL gpio_config
  62      DDFD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 19b0 4CF6AA40 	    mov r0,#0xCCAA
  65 19b4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 19b6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 19be 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 19c0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 19c4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 19c6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 19ce 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 19d2 0180     	    strh r1,[r0,#SPI_CR1]
  73 19d4 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 19d6 80EA0000 	    eor r0,r0 
  75 19da C5F25050 	    movt r0,#0x5550 
  76 19de 40EA0100 	    orr r0,r1 
ARM GAS  forth.s 			page 71


  77 19e2 1862     	    str r0,[r3,#GPIO_AFRL]
  78 19e4 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 19e6 FE180000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 19f4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 19fc 4FF00401 	    mov r1,#PIN_F_SC 
  88 1a00 4FF00002 	    mov r2,#0 
  89 1a04 00B5FEF7 	    _CALL gpio_out 
  89      04FE5DF8 
  89      04EB
  90 1a0e 00F0E7BD 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1a12 EA190000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1a20 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1a28 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1a2a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1a2e FBD1     	    bne 1b 
 102 1a30 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1a38 4FF00401 	    mov r1,#PIN_F_SC 
 104 1a3c 4FF00102 	    mov r2,#1 
 105 1a40 00B5FEF7 	    _CALL gpio_out 
 105      E6FD5DF8 
 105      04EB
 106 1a4a 00F0C9BD 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1a4e 161A0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1a5c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1a64 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1a66 11F0020F 	    tst T1,#(1<<1) //TXE
ARM GAS  forth.s 			page 72


 117 1a6a FBD0     	    beq 0b 
 118 1a6c 6FF00001 	    mvn T1,#0 
 119 1a70 0173     	    strb T1,[T0,#SPI_DR]
 120 1a72 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1a74 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1a78 FBD0     	    beq 1b     
 123              	2:  
 124 1a7a 47F8046D 	    _PUSH 
 125 1a7e 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1a80 00F0AEBD 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1a84 521A0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1a90 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1a98 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1a9a 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1a9e FBD0     	    beq 0b 
 138 1aa0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1aa2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1aa4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1aa8 FBD0     	    beq 1b 
 142 1aaa 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1aac 57F8046B 	    _POP 
 144 1ab0 00F096BD 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ab4 881A0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1ac0 504700BF 	    _NEST 
 153 1ac4 F5190000 	    _ADR CHIP_SEL 
 154 1ac8 A7270000 	    _DOLIT 4
 154      04000000 
 155 1ad0 911A0000 	    _ADR WR_BYTE
 156 1ad4 211A0000 	    _ADR CHIP_DSEL
 157 1ad8 E7250000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1adc B81A0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1ae8 504700BF 	    _NEST 
 165 1aec F5190000 	    _ADR CHIP_SEL 
ARM GAS  forth.s 			page 73


 166 1af0 A7270000 	    _DOLIT 6 
 166      06000000 
 167 1af8 911A0000 	    _ADR WR_BYTE 
 168 1afc 211A0000 	    _ADR CHIP_DSEL 
 169 1b00 E7250000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1b04 E01A0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1b10 504700BF 	    _NEST
 177 1b14 F5190000 	    _ADR CHIP_SEL  
 178 1b18 A7270000 	    _DOLIT sr_cmd 
 178      381B0000 
 179 1b20 E5290000 	    _ADR PLUS 
 180 1b24 4D280000 	    _ADR CAT
 181 1b28 911A0000 	    _ADR WR_BYTE
 182 1b2c 5D1A0000 	    _ADR RD_BYTE
 183 1b30 211A0000 	    _ADR CHIP_DSEL  
 184 1b34 E7250000 	    _UNNEST 
 185 1b38 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1b3b 081B0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1b48 504700BF 	    _NEST 
 193 1b4c 21290000 	    _ADR DUPP 
 194 1b50 A7270000 	    _DOLIT 16
 194      10000000 
 195 1b58 BD290000 	    _ADR RSHIFT 
 196 1b5c 911A0000 	    _ADR WR_BYTE 
 197 1b60 21290000 	    _ADR DUPP
 198 1b64 A7270000 	    _DOLIT 8 
 198      08000000 
 199 1b6c BD290000 	    _ADR RSHIFT 
 200 1b70 911A0000 	    _ADR WR_BYTE 
 201 1b74 911A0000 	    _ADR WR_BYTE 
 202 1b78 E7250000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1b7c 3F1B0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1b8c 504700BF 	    _NEST 
 210 1b90 A7270000 	1:  _DOLIT 0 
ARM GAS  forth.s 			page 74


 210      00000000 
 211 1b98 111B0000 	    _ADR RD_SR 
 212 1b9c A7270000 	    _DOLIT 3 
 212      03000000 
 213 1ba4 65290000 	    _ADR ANDD 
 214 1ba8 E7270000 	    _QBRAN 2f
 214      B81B0000 
 215 1bb0 FB270000 	    _BRAN 1b
 215      901B0000 
 216 1bb8 E7250000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1bbc 801B0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1bcc 504700BF 	    _NEST 
 225 1bd0 E91A0000 	    _ADR WR_ENBL
 226 1bd4 F5190000 	    _ADR CHIP_SEL 
 227 1bd8 A7270000 	    _DOLIT 0x20 
 227      20000000 
 228 1be0 911A0000 	    _ADR WR_BYTE 
 229 1be4 491B0000 	    _ADR SEND_ADR
 230 1be8 211A0000 	    _ADR CHIP_DSEL 
 231 1bec 8D1B0000 	    _ADR WAIT_DONE 
 232 1bf0 E7250000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1bf4 C01B0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1c04 504700BF 	    _NEST 
 240 1c08 E91A0000 	    _ADR WR_ENBL 
 241 1c0c F5190000 	    _ADR CHIP_SEL
 242 1c10 A7270000 	    _DOLIT 0x60
 242      60000000 
 243 1c18 A7270000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1c20 911A0000 	    _ADR WR_BYTE 
 245 1c24 911A0000 	    _ADR WR_BYTE 
 246 1c28 211A0000 	    _ADR CHIP_DSEL 
 247 1c2c 8D1B0000 	    _ADR WAIT_DONE
 248 1c30 E7250000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
ARM GAS  forth.s 			page 75


 255              	******************************/
 256 1c34 F81B0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1c40 504700BF 	    _NEST
 258 1c44 F5190000 	    _ADR CHIP_SEL 
 259 1c48 A7270000 	    _DOLIT 3 
 259      03000000 
 260 1c50 911A0000 	    _ADR WR_BYTE 
 261 1c54 491B0000 	    _ADR SEND_ADR
 262 1c58 9D280000 	    _ADR TOR   
 263 1c5c FB270000 	    _BRAN 2f
 263      741C0000 
 264 1c64 5D1A0000 	1:  _ADR RD_BYTE
 265 1c68 45290000 	    _ADR OVER 
 266 1c6c 39280000 	    _ADR CSTOR
 267 1c70 412A0000 	    _ADR ONEP 
 268 1c74 C9270000 	2:  _DONXT 1b
 268      641C0000 
 269 1c7c 11290000 	    _ADR DROP 
 270 1c80 211A0000 	    _ADR CHIP_DSEL 
 271 1c84 E7250000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1c88 381C0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1c94 504700BF 	    _NEST 
 280 1c98 E91A0000 	    _ADR WR_ENBL
 281 1c9c F5190000 	    _ADR CHIP_SEL
 282 1ca0 A7270000 	    _DOLIT 2 
 282      02000000 
 283 1ca8 911A0000 	    _ADR WR_BYTE 
 284 1cac 491B0000 	    _ADR SEND_ADR
 285 1cb0 9D280000 	    _ADR TOR
 286 1cb4 FB270000 	    _BRAN 2f 
 286      D41C0000 
 287 1cbc 21290000 	1:  _ADR DUPP 
 288 1cc0 4D280000 	    _ADR CAT 
 289 1cc4 21290000 	    _ADR DUPP 
 290 1cc8 253A0000 	    _ADR HDOT
 291 1ccc 911A0000 	    _ADR WR_BYTE 
 292 1cd0 412A0000 	    _ADR ONEP
 293 1cd4 C9270000 	2:  _DONXT 1b 
 293      BC1C0000 
 294 1cdc 11290000 	    _ADR DROP
 295 1ce0 211A0000 	    _ADR CHIP_DSEL
 296 1ce4 8D1B0000 	    _ADR WAIT_DONE 
 297 1ce8 E7250000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
ARM GAS  forth.s 			page 76


 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1cec 8C1C0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1cfc 504700BF 	    _NEST 
 318              	    
 319 1d00 E7250000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1d04 F01C0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1d14 504700BF 	    _NEST 
 327              	
 328 1d18 E7250000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1d1c 081D0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1d24 504700BF 	    _NEST 
 336              	
 337 1d28 E7250000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1d2c 201D0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1d38 504700BF 	    _NEST 
 345              	
 346 1d3c E7250000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
ARM GAS  forth.s 			page 77


 350              	    load program from flash 
 351              	******************************/
 352 1d40 301D0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1d4c 504700BF 	    _NEST 
 354              	
 355 1d50 E7250000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	
  32 1d54 5F708930 	     .word  0x3089705F // 1e-9
  33 1d58 77CC2B32 	     .word  0x322BCC77 // 1e-8
  34 1d5c 95BFD633 	     .word  0x33D6BF95 // 1e-7
  35 1d60 BD378635 	     .word  0x358637BD // 1e-6 
  36 1d64 ACC52737 	     .word  0x3727C5AC // 1e-5 
  37 1d68 17B7D138 	     .word  0x38D1B717 // 1e-4 
  38 1d6c 6F12833A 	     .word  0x3A83126F // 1e-3 
  39 1d70 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  40 1d74 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  41              	p10:
  42 1d78 0000803F 	     .word  0x3F800000 // 1.0 
  43 1d7c 00002041 	     .word  0x41200000 // 1e1 
  44 1d80 0000C842 	     .word  0x42C80000 // 1e2 
  45 1d84 00007A44 	     .word  0x447A0000 // 1e3 
  46 1d88 00401C46 	     .word  0x461C4000 // 1e4 
ARM GAS  forth.s 			page 78


  47 1d8c 0050C347 	     .word  0x47C35000 // 1e5 
  48 1d90 00247449 	     .word  0x49742400 // 1e6 
  49 1d94 8096184B 	     .word  0x4B189680 // 1e7
  50 1d98 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  51 1d9c 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  52              	
  53              	/***********************
  54              	    PWR10 
  55              	    return powers of 10
  56              	    from 1e-7..1e7
  57              	***********************/    
  58 1da0 441D0000 	    _HEADER PWR10,5,"PWR10"
  58      05505752 
  58      313000BF 
  59 1dac 4FEA8606 	    lsl TOS,#2  
  60 1db0 EB48     	    ldr t0, =p10 
  61 1db2 0644     	    add TOS,TOS,T0
  62 1db4 3668     	    ldr TOS,[TOS]  
  63 1db6 00F013BC 	    _NEXT  
  64              	    
  65              	
  66              	
  67              	/*****************************
  68              	   initialize FPU
  69              	****************************/
  70              	fpu_init: 
  71 1dba DFF8A803 	   ldr.w r0,=CPACR 
  72 1dbe 0168     	   ldr R1,[R0]
  73 1dc0 41F47001 	   orr r1,r1,#(0xf<<20)
  74 1dc4 0160     	   str r1,[r0]
  75 1dc6 BFF34F8F 	   dsb 
  76 1dca 4FF00000 	   ldr r0,=FPCCR
  77 1dce 81EA0101 	   eor r1,r1 
  78 1dd2 0160     	   str r1,[r0]
  79 1dd4 BFF34F8F 	   dsb 
  80 1dd8 4FF05100 	   mov r0,#FPU_IRQ 
  81 1ddc 00B5FEF7 	   _CALL nvic_enable_irq
  81      96FB5DF8 
  81      04EB
  82 1de6 7047     	   _RET
  83              	
  84              	/***************************
  85              	   FPSCR ( -- u )
  86              	   stack fpu SCR register 
  87              	***************************/
  88 1de8 A41D0000 	   _HEADER FPSCR,5,"FPSCR"
  88      05465053 
  88      435200BF 
  89 1df4 47F8046D 	   _PUSH 
  90 1df8 F1EE106A 	   vmrs TOS,FPSCR
  91 1dfc BFF34F8F 	   dsb  
  92 1e00 EEE3     	   _NEXT 
  93              	
  94              	
  95              	/**************************
  96              	   CLR_FPSCR ( -- )
  97              	************************/
ARM GAS  forth.s 			page 79


  98 1e02 EC1D0000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
  98      09434C52 
  98      5F465053 
  98      4352
  99 1e10 80EA0000 	   eor T0,T0 
 100 1e14 E1EE100A 	   vmsr FPSCR,T0
 101 1e18 BFF34F8F 	   dsb 
 102 1e1c E0E3     	   _NEXT 
 103              	
 104              	
 105              	/*******************************
 106              	    >S0 variable ( f# --  )
 107              	    send float to fpu S0 
 108              	**********************************/
 109 1e1e 061E0000 	    _HEADER TOS0,3,">S0"
 109      033E5330 
 109      00BF
 110 1e28 00EE106A 	    vmov.f32 S0,TOS 
 111 1e2c 57F8046B 	    _POP 
 112 1e30 D6E3     	    _NEXT  
 113              	
 114              	/*******************************
 115              	    >S1 variable ( f# --  )
 116              	    send float to fpu S1 
 117              	**********************************/
 118 1e32 221E0000 	    _HEADER TOS1,3,">S1"
 118      033E5331 
 118      00BF
 119 1e3c 00EE906A 	    vmov.f32 S1,TOS 
 120 1e40 57F8046B 	    _POP 
 121 1e44 CCE3     	    _NEXT  
 122              	
 123              	/*******************************
 124              	    >S2 variable ( f# --  )
 125              	    send float to fpu S2 
 126              	**********************************/
 127 1e46 361E0000 	    _HEADER TOS2,3,">S2"
 127      033E5332 
 127      00BF
 128 1e50 01EE106A 	    vmov.f32 S2,TOS 
 129 1e54 57F8046B 	    _POP 
 130 1e58 C2E3     	    _NEXT  
 131              	
 132              	/*******************************
 133              	    S0>  ( -- f )
 134              	    push fpu S0 
 135              	*******************************/
 136 1e5a 4A1E0000 	    _HEADER S0FROM,3,"S0>"
 136      0353303E 
 136      00BF
 137 1e64 47F8046D 	    _PUSH 
 138 1e68 10EE106A 	    vmov.f32 TOS,S0 
 139 1e6c B8E3     	    _NEXT 
 140              	
 141              	/*******************************
 142              	    S1>  ( -- f )
 143              	    push fpu S1 
ARM GAS  forth.s 			page 80


 144              	*******************************/
 145 1e6e 5E1E0000 	    _HEADER S1FROM,3,"S1>"
 145      0353313E 
 145      00BF
 146 1e78 47F8046D 	    _PUSH 
 147 1e7c 10EE906A 	    vmov.f32 TOS,S1 
 148 1e80 AEE3     	    _NEXT 
 149              	
 150              	/*******************************
 151              	    S2>  ( -- f )
 152              	    push fpu S2 
 153              	*******************************/
 154 1e82 721E0000 	    _HEADER S2FROM,3,"S2>"
 154      0353323E 
 154      00BF
 155 1e8c 47F8046D 	    _PUSH 
 156 1e90 11EE106A 	    vmov.f32 TOS,S2 
 157 1e94 A4E3     	    _NEXT 
 158              	
 159              	
 160              	/*******************************
 161              	    F>S ( f -- n )
 162              	    convert float to integer 
 163              	    round to nearest integer 
 164              	*******************************/
 165 1e96 861E0000 	    _HEADER FTOS,3,"F>S"
 165      03463E53 
 165      00BF
 166 1ea0 00EE106A 	    vmov.f32 S0,TOS
 167 1ea4 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 168 1ea8 10EE106A 	    vmov.f32 TOS,s0 
 169 1eac 98E3     	    _NEXT 
 170              	    
 171              	/*******************************
 172              	    TRUNC (f - n )
 173              	    truncate float to integer 
 174              	*******************************/
 175 1eae 9A1E0000 	    _HEADER TRUNC,5,"TRUNC"
 175      05545255 
 175      4E43
 176 1eb8 00EE106A 	    vmov.f32 S0,TOS 
 177 1ebc BDEEC00A 	    vcvt.s32.f32 s0,s0 
 178 1ec0 10EE106A 	    vmov.f32 TOS,S0 
 179 1ec4 8CE3     	    _NEXT 
 180              	
 181              	/*******************************
 182              	    S>F ( s -- f )
 183              	    convert integer to float 
 184              	*******************************/
 185 1ec6 B21E0000 	    _HEADER STOF,3,"S>F" 
 185      03533E46 
 185      00BF
 186 1ed0 00EE106A 	    vmov.f32 S0,TOS
 187 1ed4 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 188 1ed8 10EE106A 	    vmov.f32 TOS,s0 
 189 1edc 80E3     	   _NEXT 
 190              	
ARM GAS  forth.s 			page 81


 191              	/*******************************
 192              	    F+ ( f1 f2 -- f1+f2 )
 193              	    add 2 floats 
 194              	*******************************/
 195 1ede CA1E0000 	    _HEADER FPLUS,2,"F+"
 195      02462B00 
 195      00BF
 196 1ee8 00EE106A 	   vmov.f32 s0,TOS 
 197 1eec 57F8046B 	   _POP 
 198 1ef0 00EE906A 	   vmov.f32 s1,TOS 
 199 1ef4 30EE200A 	   vadd.f32 s0,s0,s1 
 200 1ef8 10EE106A 	   vmov.f32 TOS,s0
 201 1efc 70E3     	   _NEXT 
 202              	
 203              	   
 204              	/*******************************
 205              	    F- ( f1 f2 -- f1-f2 )
 206              	    substract 2 float 
 207              	*******************************/
 208 1efe E21E0000 	    _HEADER FMINUS,2,"F-"
 208      02462D00 
 208      00BF
 209 1f08 00EE106A 	   vmov.f32 s0,TOS 
 210 1f0c 57F8046B 	   _POP 
 211 1f10 00EE906A 	   vmov.f32 s1,TOS 
 212 1f14 30EEC00A 	   vsub.f32 s0,s1,s0 
 213 1f18 10EE106A 	   vmov.f32 TOS,s0
 214 1f1c 60E3     	   _NEXT 
 215              	
 216              	
 217              	
 218              	/*******************************
 219              	    F* ( f1 f2 -- f1*f2 )
 220              	    multiply 2 float 
 221              	******************************/
 222 1f1e 021F0000 	   _HEADER FSTAR,2,"F*"
 222      02462A00 
 222      00BF
 223 1f28 00EE106A 	   vmov.f32 s0,TOS 
 224 1f2c 57F8046B 	   _POP 
 225 1f30 00EE906A 	   vmov.f32 s1,TOS 
 226 1f34 20EE800A 	   vmul.f32 s0,s1,s0 
 227 1f38 10EE106A 	   vmov.f32 TOS,s0
 228 1f3c 50E3     	   _NEXT 
 229              	
 230              	
 231              	/*******************************
 232              	    F/ ( f1 f2 -- f1/f2 )
 233              	    divide f1 by f2 
 234              	*******************************/
 235 1f3e 221F0000 	    _HEADER FSLH,2,"F/"
 235      02462F00 
 235      00BF
 236 1f48 00EE106A 	   vmov.f32 s0,TOS 
 237 1f4c 57F8046B 	   _POP 
 238 1f50 00EE906A 	   vmov.f32 s1,TOS 
 239 1f54 80EE800A 	   vdiv.f32 s0,s1,s0 
ARM GAS  forth.s 			page 82


 240 1f58 10EE106A 	   vmov.f32 TOS,s0
 241 1f5c 40E3     	   _NEXT 
 242              	
 243              	
 244              	/********************************
 245              	    FNEGATE ( f -- -f )
 246              	    negate floating point 
 247              	********************************/
 248 1f5e 421F0000 	    _HEADER FNEG,7,"FNEGATE"
 248      07464E45 
 248      47415445 
 248      00BF
 249 1f6c 00EE106A 	    vmov.f32 s0,TOS 
 250 1f70 B1EE400A 	    vneg.f32 S0,S0 
 251 1f74 10EE106A 	    vmov.f32 TOS,S0    
 252 1f78 32E3     	    _NEXT 
 253              	
 254              	/**********************************
 255              	    FABS ( f -- f )
 256              	    return absolute value 
 257              	******************************/
 258 1f7a 621F0000 	    _HEADER FABS,4,"FABS"
 258      04464142 
 258      5300
 259 1f84 80EA0000 	    eor T0,T0 
 260 1f88 6FEA0000 	    mvn T0,T0 
 261 1f8c 4FEA5000 	    lsr T0,#1 
 262 1f90 06EA0006 	    and TOS,T0 
 263 1f94 24E3     	    _NEXT 
 264              	
 265              	
 266              	/*****************************
 267              	     SQRT  ( f -- f )
 268              	     compute square root 
 269              	*****************************/
 270 1f96 7E1F0000 	     _HEADER SQRT,4,"SQRT"
 270      04535152 
 270      5400
 271 1fa0 00EE106A 	     vmov.f32 s0,TOS 
 272 1fa4 B1EEC00A 	     vsqrt.f32 s0,s0 
 273 1fa8 10EE106A 	     vmov.f32 TOS,s0 
 274 1fac 18E3     	     _NEXT 
 275              	
 276              	
 277              	/*****************************
 278              	   F0<   ( f -- flag )
 279              	*****************************/
 280 1fae 9A1F0000 	    _HEADER FZLESS,3,"F0<"
 280      0346303C 
 280      00BF
 281 1fb8 00EE106A 	    vmov.f32 s0,TOS 
 282 1fbc B5EE400A 	    vcmp.f32 s0, #0.0 
 283 1fc0 F1EE106A 	    vmrs TOS,FPSCR
 284 1fc4 BFF34F8F 	    dsb  
 285 1fc8 4FEAE676 	    asr TOS,#31   
 286 1fcc 08E3     	    _NEXT 
 287              	
ARM GAS  forth.s 			page 83


 288              	/*****************************
 289              	    F> ( f#1 f#2 -- flag )
 290              	    f#1>f#2 ? 
 291              	*****************************/
 292 1fce B21F0000 	    _HEADER FGREAT,2,"F>"
 292      02463E00 
 292      00BF
 293 1fd8 504700BF 	    _NEST 
 294 1fdc 091F0000 	    _ADR FMINUS
 295 1fe0 B91F0000 	    _ADR FZLESS
 296 1fe4 F12B0000 	    _ADR INVER     
 297 1fe8 E7250000 	    _UNNEST 
 298              	
 299              	/*****************************
 300              	    F< ( f#1 f#2 -- flag )
 301              	    f#1<f#2 ? 
 302              	*****************************/
 303 1fec D21F0000 	    _HEADER FLESS,2,"F<"
 303      02463C00 
 304 1ff4 504700BF 	    _NEST 
 305 1ff8 091F0000 	    _ADR FMINUS 
 306 1ffc B91F0000 	    _ADR FZLESS
 307 2000 E7250000 	    _UNNEST 
 308              	
 309              	
 310              	/*******************************
 311              	    FMIN ( f#1 f#2 -- smallest )
 312              	********************************/
 313 2004 F01F0000 	    _HEADER FMIN,4,"FMIN"
 313      04464D49 
 313      4E0000BF 
 314 2010 504700BF 	    _NEST 
 315 2014 45290000 	   _ADR OVER 
 316 2018 45290000 	   _ADR OVER 
 317 201c D91F0000 	   _ADR FGREAT 
 318 2020 E7270000 	   _QBRAN 1f 
 318      2C200000 
 319 2028 31290000 	   _ADR SWAP  
 320 202c 11290000 	1: _ADR DROP 
 321 2030 E7250000 	    _UNNEST 
 322              	
 323              	/*******************************
 324              	    FMAX (f#1 f#2 -- largest )
 325              	*******************************/
 326 2034 08200000 	    _HEADER FMAX,4,"FMAX"
 326      04464D41 
 326      580000BF 
 327 2040 504700BF 	    _NEST 
 328 2044 45290000 	    _ADR OVER 
 329 2048 45290000 	    _ADR OVER 
 330 204c F51F0000 	    _ADR FLESS 
 331 2050 E7270000 	    _QBRAN 1f
 331      5C200000 
 332 2058 31290000 	    _ADR SWAP   
 333 205c 11290000 	1:  _ADR DROP 
 334 2060 E7250000 	    _UNNEST 
 335              	
ARM GAS  forth.s 			page 84


 336              	
 337              	/*******************************
 338              	    FSIGN ( f -- n )
 339              	    return float sign 
 340              	*******************************/
 341 2064 38200000 	    _HEADER FSIGN,5,"FSIGN"
 341      05465349 
 341      474E00BF 
 342 2070 80EA0000 	    eor T0,T0 
 343 2074 C8F20000 	    movt T0,#0X8000
 344 2078 06EA0006 	    and TOS,T0
 345 207c 4FEAE676 	    asr TOS,#31  
 346 2080 AEE2     	    _NEXT 
 347              	
 348              	/*******************************
 349              	    FEXP ( f --  n )
 350              	    return binary exponent of f 
 351              	*******************************/
 352 2082 68200000 	    _HEADER FEXP,4,"FEXP"
 352      04464558 
 352      5000
 353 208c 4FF00000 	    _MOV32 T0,0X7F800000
 353      C7F68070 
 354 2094 06EA0006 	    and TOS,T0 
 355 2098 4FEAD656 	    lsr TOS,#23
 356 209c A6F17F06 	    sub TOS,#127 
 357 20a0 9EE2     	    _NEXT  
 358              	
 359              	/*******************************
 360              	   FMANT ( f -- n )
 361              	   return float mantisssa 
 362              	********************************/
 363 20a2 86200000 	    _HEADER FMANT,5,"FMANT"
 363      05464D41 
 363      4E54
 364 20ac 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 364      C0F27F00 
 365 20b4 06EA0006 	    AND TOS,T0 
 366 20b8 80EA0000 	    EOR T0,T0 
 367 20bc C0F28000 	    MOVT T0,0x80
 368 20c0 46EA0006 	    ORR TOS,T0 
 369 20c4 8CE2     	    _NEXT 
 370              	
 371              	
 372              	/*******************************
 373              	    PI  ( -- f )
 374              	    return 3.14159265
 375              	*******************************/
 376 20c6 A6200000 	    _HEADER PI,2,"PI"
 376      02504900 
 376      00BF
 377 20d0 47F8046D 	    _PUSH 
 378 20d4 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 378      C4F24906 
 379 20dc 80E2     	    _NEXT
 380              	 
 381              	/********************************
ARM GAS  forth.s 			page 85


 382              	    LOG2 ( -- f)
 383              	    return log10(2)
 384              	*******************************/
 385 20de CA200000 	    _HEADER LOG2,4,"LOG2"
 385      044C4F47 
 385      3200
 386 20e8 47F8046D 	    _PUSH 
 387 20ec 42F29A06 	    _MOV32 TOS,0x3E9A209A
 387      C3F69A66 
 388 20f4 74E2     	    _NEXT 
 389              	
 390              	/********************************
 391              	    LOG2>10 ( f -- exp )
 392              	    convert float base2 exponent 
 393              	    to base10
 394              	********************************/
 395 20f6 E2200000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 395      074C4F47 
 395      323E3130 
 395      00BF
 396 2104 504700BF 	    _NEST
 397 2108 8D200000 	    _ADR FEXP 
 398 210c D11E0000 	    _ADR STOF 
 399 2110 E9200000 	    _ADR LOG2
 400 2114 291F0000 	    _ADR FSTAR 
 401 2118 B91E0000 	    _ADR TRUNC  
 402 211c 21290000 	    _ADR DUPP 
 403 2120 55290000 	    _ADR ZLESS 
 404 2124 E7270000 	    _QBRAN 1f 
 404      30210000 
 405 212c 512A0000 	    _ADR ONEM
 406 2130 E7250000 	1:  _UNNEST 
 407              	
 408              	/********************************
 409              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 410              	    parse number, integer or float 
 411              	    if not a number return ( a 0 ) 
 412              	    if integer return ( int -1 ) 
 413              	    if float return ( float -2 )
 414              	**********************************/
 415 2134 FA200000 	    _HEADER NUMBER,6,"NUMBER"
 415      064E554D 
 415      42455200 
 416 2140 504700BF 	    _NEST 
 417 2144 FD360000 	    _ADR INTQ
 418 2148 F52A0000 	    _ADR QDUP 
 419 214c E7270000 	    _QBRAN 2f 
 419      58210000 
 420 2154 E7250000 	    _UNNEST 
 421 2158 51230000 	2:  _ADR FLOATQ
 422 215c E7250000 	    _UNNEST 
 422      781D0000 
 422      88ED00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
ARM GAS  forth.s 			page 86


   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/******************************************************
  25              	    powers of 10 used in parsing float numbers 
  26              	*******************************************************/    
  27              	
  28 2168 00002041 	powersof10:  .word  0x41200000  // 10.0 
  29 216c 0000C842 	             .word  0x42C80000  // 100.0
  30 2170 00401C46 	             .word  0x461C4000  // 10000.0 
  31 2174 20BCBE4C 	             .word  0x4CBEBC20  // 1.0e8
  32 2178 CA1B0E5A 	             .word  0x5A0E1BCA  // 1.0e16 
  33 217c AEC59D74 	             .word  0x749DC5AE  // 1.0e32 
  34              	
  35              	fzero =  0x0
  36              	fone =  0x3F800000
  37              	fminus1 = 0xBF800000
  38              	ften = 0x41200000 
  39              	
  40              	
  41              	// fetch element from powersof10 array 
  42              	power10: // ( idx -- f )
  43 2180 504700BF 	    _NEST 
  44 2184 A7270000 	    _DOLIT 2 
  44      02000000 
  45 218c D5290000 	    _ADR LSHIFT 
  46 2190 A7270000 	    _DOLIT powersof10
  46      68210000 
  47 2198 E5290000 	    _ADR PLUS 
  48 219c 2D280000 	    _ADR AT 
  49 21a0 E7250000 	    _UNNEST 
  50              	
  51              	
  52              	
  53              	
  54              	// check if exponent bit at idx position is 
  55              	// set or reset   
  56              	bit_state: // ( idx f e -- idx f bit )
  57 21a4 504700BF 	    _NEST 
  58 21a8 A7270000 	    _DOLIT 1  // idx f e 1
  58      01000000 
ARM GAS  forth.s 			page 87


  59 21b0 A7270000 	    _DOLIT 3  // idx f e 1 3 
  59      03000000 
  60 21b8 69320000 	    _ADR PICK  // idx f e 1 idx 
  61 21bc D5290000 	    _ADR LSHIFT // idx f e bit_mask 
  62 21c0 65290000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  63 21c4 E7250000 	    _UNNEST 
  64              	
  65              	// exponent adjustment 
  66              	// multiply or divide mantissa by exponent  
  67              	// if exponant < 0 divide 
  68              	// if exponant >0 multiply 
  69              	// 8f exponant == 0 done 
  70              	mult_div_exp: // ( e f  -- f )
  71 21c8 504700BF 	    _NEST 
  72 21cc 45290000 	    _ADR OVER  // e f e 
  73 21d0 E7270000 	    _QBRAN 4f // exp==0,  done 
  73      94220000 
  74 21d8 A7270000 	    _DOLIT 0  // e f idx  
  74      00000000 
  75 21e0 1D2B0000 	    _ADR NROT // idx e f
  76 21e4 31290000 	    _ADR SWAP // idx f e   
  77 21e8 21290000 	    _ADR DUPP  // idx f e e 
  78 21ec 55290000 	    _ADR ZLESS
  79 21f0 E7270000 	    _QBRAN pos_exp 
  79      48220000 
  80              	// negative exponent 
  81 21f8 152C0000 	    _ADR ABSS 
  82 21fc 9D280000 	    _ADR TOR //  -- idx f R: e 
  83              	div_loop:
  84 2200 89280000 	    _ADR RAT   // idx f e R: e 
  85 2204 A5210000 	    _ADR bit_state // idx f state 
  86 2208 E7270000 	    _QBRAN 1f   // bit reset 
  86      1C220000 
  87 2210 45290000 	    _ADR OVER 
  88 2214 81210000 	    _ADR power10 // idx f pwr10 R: e
  89 2218 491F0000 	    _ADR FSLH  // idx f R: e 
  90 221c 31290000 	1:  _ADR SWAP  // f idx R: e 
  91 2220 412A0000 	    _ADR ONEP   // F idx++ R: e 
  92 2224 31290000 	    _ADR SWAP   // idx f  
  93 2228 45290000 	    _ADR OVER   // idx f idx 
  94 222c A7270000 	    _DOLIT 5 
  94      05000000 
  95 2234 ED2C0000 	    _ADR GREAT  // idx > 5
  96 2238 E7270000 	    _QBRAN div_loop 
  96      00220000 
  97 2240 FB270000 	    _BRAN 3f 
  97      8C220000 
  98              	pos_exp: // positive exponent 
  99 2248 9D280000 	    _ADR TOR // idx f  R: e 
 100              	mult_loop:
 101 224c 89280000 	    _ADR RAT   // idx f e R: e 
 102 2250 A5210000 	    _ADR bit_state // idx f state 
 103 2254 E7270000 	    _QBRAN 1f   // bit reset 
 103      68220000 
 104 225c 45290000 	    _ADR OVER  
 105 2260 81210000 	    _ADR power10 // idx f pwr10 R: e
 106 2264 291F0000 	    _ADR FSTAR  // idx f R: e 
ARM GAS  forth.s 			page 88


 107 2268 31290000 	1:  _ADR SWAP  // f idx R: e 
 108 226c 412A0000 	    _ADR ONEP   // F idx++ R: e 
 109 2270 31290000 	    _ADR SWAP   // idx f  
 110 2274 45290000 	    _ADR OVER   // idx f idx 
 111 2278 A7270000 	    _DOLIT 5 
 111      05000000 
 112 2280 ED2C0000 	    _ADR GREAT  // idx > 5
 113 2284 E7270000 	    _QBRAN mult_loop 
 113      4C220000 
 114              	// adjustment done 
 115 228c 59280000 	3:  _ADR RFROM 
 116 2290 11290000 	    _ADR DROP 
 117 2294 31290000 	4:  _ADR SWAP 
 118 2298 11290000 	    _ADR DROP 
 119 229c E7250000 	    _UNNEST 
 120              	
 121              	// divide fraction by 
 122              	// 10^d 
 123              	div_fract: // ( d f -- f )
 124 22a0 504700BF 	    _NEST 
 125 22a4 31290000 	    _ADR SWAP  // -- f d 
 126 22a8 9D280000 	    _ADR TOR  // -- f R: d 
 127 22ac A7270000 	    _DOLIT fone  // -- f 1.0 R: d 
 127      0000803F 
 128 22b4 FB270000 	    _BRAN 2f 
 128      C8220000 
 129              	1: // create 10^d 
 130 22bc A7270000 	    _DOLIT ften 
 130      00002041 
 131 22c4 291F0000 	    _ADR FSTAR 
 132 22c8 C9270000 	2:  _DONXT 1b  
 132      BC220000 
 133 22d0 491F0000 	    _ADR FSLH
 134 22d4 E7250000 	    _UNNEST 
 135              	
 136              	/*****************************
 137              	   decimals ( a -- a+ fdec | a 0.0 )
 138              	   parse digits after '.' 
 139              	   convert to float 
 140              	*****************************/
 141              	decimals:
 142 22d8 504700BF 	    _NEST 
 143 22dc A7270000 	    _DOLIT 0
 143      00000000 
 144 22e4 21290000 	    _ADR DUPP
 145 22e8 092B0000 	    _ADR ROT
 146 22ec 39360000 	    _ADR PARSE_DIGITS // d n a+ 
 147 22f0 1D2B0000 	    _ADR NROT  // a d n 
 148 22f4 D11E0000 	    _ADR STOF  // convert integer n to float 
 149 22f8 A1220000 	    _ADR div_fract // a 0 a n/10^d 
 150 22fc E7250000 	    _UNNEST 
 151              	
 152              	
 153              	/************************************
 154              	   exponent ( a -- exp a+ )
 155              	   parse float exponent 
 156              	************************************/
ARM GAS  forth.s 			page 89


 157              	exponent: 
 158 2300 504700BF 	    _NEST 
 159 2304 B3360000 	    _ADR NEGQ 
 160 2308 9D280000 	    _ADR TOR 
 161 230c A7270000 	    _DOLIT 0 
 161      00000000 
 162 2314 21290000 	    _ADR DUPP 
 163 2318 092B0000 	    _ADR ROT 
 164 231c 39360000 	    _ADR PARSE_DIGITS // d n a  
 165 2320 1D2B0000 	    _ADR NROT 
 166 2324 31290000 	    _ADR SWAP 
 167 2328 11290000 	    _ADR DROP 
 168 232c 59280000 	    _ADR RFROM 
 169 2330 E7270000 	    _QBRAN 1f 
 169      3C230000 
 170 2338 052C0000 	    _ADR NEGAT 
 171 233c 31290000 	1:  _ADR SWAP 
 172 2340 E7250000 	    _UNNEST  // -- exp a+  
 173              	
 174              	
 175              	/**********************************
 176              	    FLOAT? ( a -- f# -2 | a 0 )
 177              	    parse float number 
 178              	    return a 0 if not float 
 179              	**********************************/
 180 2344 38210000 	    _HEADER FLOATQ,6,"FLOAT?"
 180      06464C4F 
 180      41543F00 
 181 2350 504700BF 	    _NEST
 182              	    // always use base 10 
 183              	    // hexadecimal float not accepted 
 184 2354 152E0000 	    _ADR BASE 
 185 2358 2D280000 	    _ADR AT 
 186 235c 9D280000 	    _ADR TOR 
 187              	    // use decimal base  
 188 2360 B9350000 	    _ADR DECIM 
 189 2364 A7270000 		_DOLIT	0      // failed flag   
 189      00000000 
 190 236c 45290000 		_ADR	OVER   // a 0 a     R: base
 191 2370 752D0000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 192 2374 11290000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 193              	// check for '-'|'+' save sign on R: 
 194 2378 B3360000 	    _ADR NEGQ 
 195 237c 9D280000 	    _ADR   TOR // -- ... a  R: base sign 
 196              	// if next char is digit parse integer part 
 197 2380 21290000 	    _ADR DUPP 
 198 2384 4D280000 	    _ADR CAT 
 199 2388 A7270000 	    _DOLIT 10 
 199      0A000000 
 200 2390 DD350000 	    _ADR DIGTQ // u t|f 
 201 2394 31290000 	    _ADR SWAP 
 202 2398 11290000 	    _ADR DROP  // drop u 
 203 239c E7270000 	    _QBRAN must_be_dot 
 203      F0230000 
 204              	// get integer part     
 205 23a4 A7270000 	    _DOLIT 0 
 205      00000000 
ARM GAS  forth.s 			page 90


 206 23ac 21290000 	    _ADR DUPP
 207 23b0 092B0000 	    _ADR ROT // a 0 0 0 a  
 208 23b4 39360000 	    _ADR PARSE_DIGITS // a 0 d n a 
 209 23b8 1D2B0000 	    _ADR NROT // ... a d n 
 210 23bc D11E0000 	    _ADR STOF  // convert n to float 
 211 23c0 9D280000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 212 23c4 11290000 	    _ADR DROP // d not needed
 213              	// if next char is 'E' get exponent 
 214 23c8 A7270000 	    _DOLIT 'E' 
 214      45000000 
 215 23d0 99360000 	    _ADR CHARQ 
 216 23d4 E7270000 	    _QBRAN 1f // next is decimal fraction  
 216      FC230000 
 217 23dc A7270000 	    _DOLIT fzero // no fraction 
 217      00000000 
 218 23e4 9D280000 	    _ADR TOR  // R: base sign fint 0.0
 219 23e8 FB270000 	    _BRAN 3f // get exponent   
 219      58240000 
 220              	// no integer part, next character must be '.' 
 221              	must_be_dot: 
 222 23f0 A7270000 	    _DOLIT fzero // integer part 0.0 
 222      00000000 
 223 23f8 9D280000 	    _ADR TOR  // R: base sign fint 
 224 23fc A7270000 	1:  _DOLIT '.' 
 224      2E000000 
 225 2404 99360000 	    _ADR CHARQ 
 226 2408 E7270000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 226      C8240000 
 227 2410 D9220000 	    _ADR decimals // -- a 0 a fdec 
 228 2414 9D280000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 229              	// if next char == 'E' there is an exponent 
 230              	// else no exponent, float completed 
 231 2418 A7270000 	    _DOLIT 'E' 
 231      45000000 
 232 2420 99360000 	    _ADR CHARQ 
 233 2424 E7270000 	    _QBRAN 1f
 233      34240000 
 234 242c FB270000 	    _BRAN 3f 
 234      58240000 
 235              	// no exponent, must be end of string 
 236 2434 4D280000 	1:   _ADR CAT 
 237 2438 E7270000 	    _QBRAN 1f 
 237      48240000 
 238 2440 FB270000 	    _BRAN error2 // error not end of string 
 238      DC240000 
 239 2448 9D280000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 240 244c 11290000 	    _ADR DROP 
 241 2450 FB270000 	    _BRAN build_float 
 241      90240000 
 242              	3: // get exponent 
 243 2458 01230000 	    _ADR exponent // a 0 exp a+ 
 244              	// must be end of string 
 245 245c 4D280000 	    _ADR CAT 
 246 2460 E7270000 	    _QBRAN 4f
 246      70240000 
 247 2468 FB270000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 247      DC240000 
ARM GAS  forth.s 			page 91


 248 2470 9D280000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 249 2474 312B0000 	    _ADR DDROP 
 250 2478 FB270000 	    _BRAN build_float     
 250      90240000 
 251              	5: // no exponent 
 252 2480 A7270000 	    _DOLIT 0 
 252      00000000 
 253 2488 9D280000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 254 248c 11290000 	    _ADR DROP 
 255              	build_float: // a 0 R: base sign fint fdec exp 
 256 2490 59280000 	    _ADR RFROM 
 257 2494 6D280000 	    _ADR DRFROM 
 258 2498 E91E0000 	    _ADR FPLUS 
 259 249c C9210000 	    _ADR mult_div_exp
 260 24a0 59280000 	    _ADR RFROM 
 261 24a4 E7270000 	    _QBRAN 1f 
 261      B8240000 
 262 24ac A7270000 	    _DOLIT fminus1
 262      000080BF 
 263 24b4 291F0000 	    _ADR FSTAR 
 264 24b8 A7270000 	1:  _DOLIT -2 
 264      FEFFFFFF 
 265 24c0 FB270000 	    _BRAN restore_base  
 265      EC240000 
 266              	error1: // a 0 a R: base sign fint 
 267 24c8 6D280000 	    _ADR DRFROM 
 268 24cc 312B0000 	    _ADR DDROP
 269 24d0 11290000 	    _ADR DROP  
 270 24d4 FB270000 	    _BRAN restore_base  
 270      EC240000 
 271              	error2: // a 0 a R: base sign fint fdec  
 272 24dc 6D280000 	    _ADR DRFROM 
 273 24e0 312B0000 	    _ADR DDROP  // a 0 a R: base sign
 274 24e4 59280000 	    _ADR RFROM  // a 0 a sign R: base  
 275 24e8 312B0000 	    _ADR DDROP  
 276              	restore_base: 
 277 24ec 59280000 	    _ADR RFROM 
 278 24f0 152E0000 	    _ADR BASE 
 279 24f4 19280000 	    _ADR STORE 
 280 24f8 E7250000 	    _UNNEST 
 281              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  forth.s 			page 92


  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	// used as multiply factor 
  27              	pwr10m9: 
  28 24fc 77CC2B32 	    .word 0x322BCC77  // 10e-9
  29 2500 95BFD633 	    .word 0x33D6BF95  // 10e-8
  30 2504 BD378635 	    .word 0x358637BD  // 10e-7
  31 2508 ACC52737 	    .word 0x3727C5AC  // 10eâ»6
  32 250c 17B7D138 	    .word 0x38D1B717  // 10e-5
  33 2510 6F12833A 	    .word 0x3A83126F  // 10e-4
  34 2514 0AD7233C 	    .word 0x3C23D70A  // 10e-3
  35 2518 CDCCCC3D 	    .word 0x3DCCCCCD  // 10e-2
  36 251c 0000803F 	    .word 0x3F800000  // 10e-1
  37              	pwr10e0:    
  38 2520 00002041 	    .word 0x41200000  // 10e0 
  39 2524 0000C842 	    .word 0x42C80000  // 10e1 
  40 2528 00007A44 	    .word 0x447A0000  // 10e2
  41 252c 00401C46 	    .word 0x461C4000  // 10e3 
  42 2530 0050C347 	    .word 0x47C35000  // 10e4 
  43 2534 00247449 	    .word 0x49742400  // 10e5 
  44 2538 8096184B 	    .word 0x4B189680  // 10e6 
  45 253c 20BCBE4C 	    .word 0x4CBEBC20  // 10e7 
  46 2540 286B6E4E 	    .word 0x4E6E6B28  // 10e8 
  47 2544 F9021550 	    .word 0x501502F9  // 10e8 
  48              	
  49              	
  50              	// used to round mantissa 
  51              	rounding:
  52 2548 FFEBAF2C 	    .word  0x2CAFEBFF // 0.5e-11f,   < 0.00001 
  53 254c FFE65B2E 	    .word  0x2E5BE6FF // 0.5e-10f,   0.00001 - 0.0001 
  54 2550 5F700930 	 	.word  0x3009705F // 0.5e-9f,   0.0001 - 0.001
  55 2554 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f,   0.001 - 0.01
  56 2558 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f,   0.01 - 0.1
  57 255c BD370635 	    .word  0x350637BD // 0.5e-6f,   0.1 - 1     
  58 2560 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f,   1 - 10    : 0.000005
  59 2564 17B75138 	    .word  0x3851B717 // 0.5e-4f,   10 - 100 
  60 2568 6F12033A 	 	.word  0x3A03126F // 0.5e-3f,   100 - 1000 
  61 256c 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f,   1000 - 10000 
  62 2570 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f,   10000 - 100000 
  63 2574 0000003F 	 	.word  0x3F000000 // 0.5e0f,    100000 - 1000000 
  64              	
  65              	
  66              	/***********************************
  67              	    E. ( f w -- )
  68              	    print in scientific notation 
  69              	    f -> float to print 
  70              	    w -> maximum string width
  71              	***********************************/
  72 2578 48230000 	    _HEADER EDOT,2,"E."
  72      02452E00 
ARM GAS  forth.s 			page 93


  73 2580 504700BF 	    _NEST
  74              	
  75 2584 E7250000 	    _UNNEST 
  76              	
  77              	
  78              	/***********************************
  79              	    F. ( f w -- )
  80              	    print in fixed point format 
  81              	    f -> float to print 
  82              	    w -> maximum string width 
  83              	***********************************/
  84 2588 7C250000 	    _HEADER FDOT,2,"F."
  84      02462E00 
  85 2590 504700BF 	    _NEST 
  86 2594 A7270000 	    _DOLIT 40 // width <= 40
  86      28000000 
  87 259c 192D0000 	    _ADR MIN 
  88 25a0 31290000 	    _ADR SWAP
  89 25a4 21290000 	    _ADR DUPP 
  90 25a8 8D200000 	    _ADR FEXP 
  91 25ac A7270000 	    _DOLIT 31 
  91      1F000000 
  92              	    
  93 25b4 E7250000 	    _UNNEST 
  94              	
  95              	
  96              	// convert integer to string 
  97              	// in buffer b 
  98              	// return pstr 
  99              	itoa: // ( s b -- pstr )
 100 25b8 504700BF 	    _NEST 
 101 25bc 912E0000 	    _ADR HLD 
 102 25c0 19280000 	    _ADR STORE 
 103 25c4 A7270000 	    _DOLIT 0  // convert to double 
 103      00000000 
 104 25cc C5340000 	    _ADR DIGS 
 105 25d0 01000000 	    _ADR 
****  Warning: missing operand; zero assumed
 106 25d4 E7250000 	    _UNNEST 
 107              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
ARM GAS  forth.s 			page 94


  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
ARM GAS  forth.s 			page 95


  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 25d8 48F804CD 		STMFD	RSP!,{IP}
  85 25dc 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 25e0 5CF8045B 		LDR WP,[IP],#4 
  89 25e4 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 25e6 58F804CB 		LDMFD RSP!,{IP}
  92 25ea 5CF8045B 		LDR WP,[IP],#4 
  93 25ee 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 25f0 04F14401 		add T1,UP,#USER_CTOP 
 105 25f4 0968     		ldr T1,[T1]
 106 25f6 44F25072 		mov T2,#0x4700+(10<<3)
 107 25fa 21F8022B 		strh T2,[T1],#2
 108 25fe 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 2602 21F8022B 		strh T2,[T1],#2 
 110 2606 04F14402 		add T2,UP,#USER_CTOP 
 111 260a 1160     		str T1,[T2]
 112 260c E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 260e 47F8046D 		_PUSH 
 118 2612 04F11406 		ADD TOS,UP,#STDIN 
 119 2616 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2618 47F8046D 		_PUSH 
 125 261c 04F11806 		ADD TOS,UP,#STDOUT
 126 2620 DEE7     		_NEXT 
 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
ARM GAS  forth.s 			page 96


 132 2622 8C250000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 2630 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 2638 47F8046D 	    _PUSH 
 135 263c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 263e 81EA0101 	    eor T1,T1 
 137 2642 8162     	    str T1,[T0,#SCB_CFSR]
 138 2644 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 2646 26260000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 2654 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 265c 47F8046D 		_PUSH 
 147 2660 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 2662 81EA0101 	    eor T1,T1 
 149 2666 8163     	    str T1,[T0,#SCB_BFAR]
 150 2668 BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 266a 4A260000 		_HEADER QKEY,4,"KEY?" 
 156      044B4559 
 156      3F00
 157 2674 504700BF 		_NEST 
 158 2678 0F260000 		_ADR TSTDIN // ' STDIN 
 159 267c E1320000 		_ADR ATEXE
 160 2680 E7250000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 2684 6E260000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 268c 504700BF 		_NEST
 168              	KEY1:
 169 2690 D1180000 		_ADR CAPS_LED 
 170 2694 75260000 		_ADR	QKEY 
 171 2698 E7270000 		_QBRAN	KEY1
 171      90260000 
 172 26a0 E7250000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
ARM GAS  forth.s 			page 97


 177              	**********************************************/
 178 26a4 88260000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 26b0 504700BF 		_NEST 
 180 26b4 19260000 		_ADR TSTDOUT 
 181 26b8 E1320000 		_ADR ATEXE 
 182 26bc E7250000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 26c0 A8260000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 26cc 504700BF 		_NEST
 216 26d0 152C0000 		_ADR ABSS   
 217 26d4 BD2D0000 		_ADR SEED 
 218 26d8 2D280000 		_ADR AT 
 219 26dc 21290000 		_ADR DUPP 
 220 26e0 A7270000 		_DOLIT 13
 220      0D000000 
 221 26e8 D5290000 		_ADR LSHIFT 
 222 26ec 8D290000 		_ADR XORR  
 223 26f0 21290000 		_ADR DUPP 
 224 26f4 A7270000 		_DOLIT 17 
 224      11000000 
 225 26fc BD290000 		_ADR RSHIFT 
 226 2700 8D290000 		_ADR XORR 
 227 2704 21290000 		_ADR DUPP
ARM GAS  forth.s 			page 98


 228 2708 A7270000 		_DOLIT 5 
 228      05000000 
 229 2710 D5290000 		_ADR LSHIFT 
 230 2714 8D290000 		_ADR XORR  
 231 2718 21290000 		_ADR DUPP 
 232 271c BD2D0000 		_ADR SEED 
 233 2720 19280000 		_ADR STORE 
 234 2724 A7270000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 272c 65290000 		_ADR ANDD 
 236 2730 31290000 		_ADR SWAP 
 237 2734 65310000 		_ADR MODD 
 238 2738 E7250000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 273c C4260000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 2748 504700BF 		_NEST 
 247 274c E52D0000 		_ADR TIMER 
 248 2750 19280000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2754 E52D0000 		_ADR TIMER 
 251 2758 2D280000 		_ADR AT 
 252 275c E7270000 		_QBRAN PAUSE_EXIT 
 252      6C270000 
 253 2764 FB270000 		_BRAN PAUSE_LOOP 
 253      54270000 
 254              	PAUSE_EXIT: 		
 255 276c E7250000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2770 40270000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 277c 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2780 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 2788 3600     		movs TOS,TOS 
 265 278a 57F8046B 		_POP
 266 278e 03D0     		beq ULED_OFF
 267 2790 4FEA0040 		lsl T0,#16 
 268 2794 8861     		str T0,[T1,#GPIO_BSRR]
 269 2796 23E7     		_NEXT 
 270              	ULED_OFF:
 271 2798 8861     		str T0,[T1,#GPIO_BSRR]
 272 279a 21E7     		_NEXT    
 273              	
 274              	
 275              		
ARM GAS  forth.s 			page 99


 276              	/***************
 277              	//  The kernel
 278              	***************/
 279              	
 280              	/********************
 281              	    NOP	( -- )
 282              	 	do nothing.
 283              	*********************/
 284 279c 74270000 		_HEADER NOP,3,"NOP"
 284      034E4F50 
 285 27a4 1CE7     		_NEXT 
 286              	 
 287              	/********************
 288              	    doLIT	( -- w )
 289              	 	Push an inline literal.
 290              	hidden word used by compiler 
 291              	*********************/
 292              	DOLIT:
 293 27a6 47F8046D 		_PUSH				//  store TOS on data stack
 294 27aa 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 295 27ae 17E7     		_NEXT 
 296              	
 297              	/*******************************
 298              	    EXECUTE	( ca -- )
 299              	 	Execute the word at ca.
 300              	*******************************/
 301 27b0 A0270000 		_HEADER EXECU,7,"EXECUTE"
 301      07455845 
 301      43555445 
 302 27bc 46F00105 		ORR	WP,TOS,#1 
 303 27c0 57F8046B 		_POP
 304 27c4 2847     		BX WP 
 305 27c6 0BE7     		_NEXT 
 306              	
 307              	/**********************************************************
 308              	    donext	( -- ) counter on R:
 309              	 	Run time code for the single index loop.
 310              	 	: next ( -- ) \ hilevel model
 311              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 312              	hidden word used by compiler 	  
 313              	*********************************************************/
 314              	DONXT:
 315 27c8 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 316 27cc 22B9     		CBNZ T2,NEXT1 
 317              		/* loop done */
 318 27ce 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 319 27d2 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 320 27d6 03E7     		_NEXT
 321              	NEXT1:
 322              		/* decrement loop counter */
 323 27d8 A2F10102 		SUB	T2,T2,#1
 324 27dc C8F80020 		STR	T2,[RSP]
 325 27e0 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 326 27e4 FCE6     		_NEXT 
 327              	
 328              	/**************************************
 329              	    ?branch	( f -- )
ARM GAS  forth.s 			page 100


 330              	 	Branch if flag is zero.
 331              	hiddend word used by compiler
 332              	**************************************/
 333              	QBRAN:
 334 27e6 3600     		MOVS	TOS,TOS
 335 27e8 57F8046B 		_POP
 336 27ec 02D1     		BNE	QBRAN1
 337 27ee DCF800C0 		LDR	IP,[IP]
 338 27f2 F5E6     		_NEXT
 339              	QBRAN1:
 340 27f4 0CF1040C 	 	ADD	IP,IP,#4
 341 27f8 F2E6     		_NEXT
 342              	
 343              	/***********************************
 344              	    branch	( -- )
 345              	 	Branch to an inline address.
 346              	hidden word used by compiler 
 347              	***********************************/
 348              	BRAN:
 349 27fa DCF800C0 		LDR	IP,[IP]
 350 27fe EFE6     		_NEXT
 351              	
 352              	/******************************************
 353              	    EXIT	(  -- )
 354              	 	Exit the currently executing command.
 355              	******************************************/
 356 2800 B4270000 		_HEADER EXIT,4,"EXIT"
 356      04455849 
 356      540000BF 
 357 280c E7250000 		_UNNEST
 358              	
 359              	/***********************************
 360              	    !	   ( w a -- )
 361              	 	Pop the data stack to memory.
 362              	************************************/
 363 2810 04280000 		_HEADER STORE,1,"!"
 363      012100BF 
 364 2818 57F8045B 		LDR	WP,[DSP],#4
 365 281c 3560     		STR	WP,[TOS]
 366 281e 57F8046B 		_POP
 367 2822 DDE6     		_NEXT 
 368              	
 369              	/********************************************
 370              	    @	   ( a -- w )
 371              	 	Push memory location to the data stack.
 372              	*********************************************/
 373 2824 14280000 		_HEADER AT,1,"@"
 373      014000BF 
 374 282c 3668     		LDR	TOS,[TOS]
 375 282e D7E6     		_NEXT 
 376              	
 377              	/*******************************************
 378              	    C!	  ( c b -- )
 379              	 	Pop the data stack to byte memory.
 380              	*******************************************/
 381 2830 28280000 		_HEADER CSTOR,2,"C!"
 381      02432100 
ARM GAS  forth.s 			page 101


 382 2838 57F8045B 		LDR	WP,[DSP],#4
 383 283c 3570     		STRB WP,[TOS]
 384 283e 57F8046B 		_POP
 385 2842 CDE6     		_NEXT
 386              	
 387              	/*********************************************
 388              	    C@	  ( b -- c )
 389              	 	Push byte memory location to the data stack.
 390              	**********************************************/
 391 2844 34280000 		_HEADER CAT,2,"C@"
 391      02434000 
 392 284c 3678     		LDRB	TOS,[TOS]
 393 284e C7E6     		_NEXT 
 394              	
 395              	
 396              	/*********************************************
 397              	    R>	  ( -- w  R: w -- ) 
 398              	 	push from rstack.
 399              	**********************************************/
 400 2850 48280000 		_HEADER RFROM,2,"R>"
 400      02523E00 
 401 2858 47F8046D 		_PUSH
 402 285c 58F8046B 		LDR	TOS,[RSP],#4
 403 2860 BEE6     		_NEXT 
 404              	
 405              	/***********************************************
 406              		2R> (  -- D ) R: D --  
 407              	    push a double from rstack 
 408              	***********************************************/
 409 2862 54280000 		_HEADER DRFROM,3,"2R>"
 409      0332523E 
 409      00BF
 410 286c 47F8046D 		_PUSH 
 411 2870 58F8046B 		LDR TOS,[RSP],#4 
 412 2874 47F8046D 		_PUSH 
 413 2878 58F8046B 		LDR TOS,[RSP],#4
 414 287c B0E6     		_NEXT 
 415              	
 416              	/************************************************
 417              	    R@	  ( -- w )
 418              	 	Copy top of return stack to the data stack.
 419              	************************************************/
 420 287e 66280000 		_HEADER RAT,2,"R@"
 420      02524000 
 420      00BF
 421 2888 47F8046D 		_PUSH
 422 288c D8F80060 		LDR	TOS,[RSP]
 423 2890 A6E6     		_NEXT 
 424              	
 425              	/***********************************************
 426              	    >R	  ( w -- ) R: -- w 
 427              	 	pop to rstack.
 428              	************************************************/
 429 2892 82280000 		_HEADER TOR,2,">R"
 429      023E5200 
 429      00BF
 430 289c 48F8046D 		STR	TOS,[RSP,#-4]!
ARM GAS  forth.s 			page 102


 431 28a0 57F8046B 		_POP
 432 28a4 9CE6     		_NEXT
 433              	
 434              	/*********************************************
 435              		2>R ( d -- ) R: -- d 
 436              		pop a double to rstack 
 437              	*********************************************/
 438 28a6 96280000 		_HEADER DTOR,3,"2>R"
 438      03323E52 
 438      00BF
 439 28b0 48F8046D 		STR TOS,[RSP,#-4]!
 440 28b4 57F8046B 	    _POP 
 441 28b8 48F8046D 		STR TOS,[RSP,#-4]!
 442 28bc 57F8046B 		_POP  
 443 28c0 8EE6     		_NEXT 	
 444              	
 445              	
 446              	/*******************************
 447              	//	RP! ( u -- )
 448              	// initialize RPP with u 
 449              	*******************************/
 450 28c2 AA280000 		_HEADER RPSTOR,3,"RP!"
 450      03525021 
 450      00BF
 451 28cc B046     		MOV RSP,TOS 
 452 28ce 57F8046B 		_POP  
 453 28d2 85E6     		_NEXT 
 454              	
 455              	/********************************
 456              		SP! ( u -- )
 457              	 initialize SPP with u 
 458              	********************************/
 459 28d4 C6280000 		_HEADER SPSTOR,3,"SP!"
 459      03535021 
 460 28dc 3746     		MOV DSP,TOS 
 461 28de 86EA0606 		EOR TOS,TOS,TOS 
 462 28e2 7DE6     		_NEXT 
 463              	
 464              	/**************************************
 465              	    SP@	 ( -- a )
 466              	 	Push the current data stack pointer.
 467              	***************************************/
 468 28e4 D8280000 		_HEADER SPAT,3,"SP@"
 468      03535040 
 469 28ec 47F8046D 		_PUSH
 470 28f0 3E46     		MOV	TOS,DSP
 471 28f2 75E6     		_NEXT
 472              	
 473              	/**************************************
 474              	   RP@ ( -- a )
 475              	   push current rstack pointer 
 476              	**************************************/
 477 28f4 E8280000 		_HEADER RPAT,3,"RP@"
 477      03525040 
 478 28fc 47F8046D 		_PUSH 
 479 2900 4646     		MOV TOS,RSP 
 480 2902 6DE6     		_NEXT 
ARM GAS  forth.s 			page 103


 481              	
 482              	/********************************
 483              	    DROP	( w -- )
 484              	 	Discard top stack item.
 485              	********************************/
 486 2904 F8280000 		_HEADER DROP,4,"DROP"
 486      0444524F 
 486      500000BF 
 487 2910 57F8046B 		_POP
 488 2914 64E6     		_NEXT 
 489              	
 490              	/*********************************
 491              	    DUP	 ( w -- w w )
 492              	 	Duplicate the top stack item.
 493              	*********************************/
 494 2916 08290000 		_HEADER DUPP,3,"DUP"
 494      03445550 
 494      00BF
 495 2920 47F8046D 		_PUSH
 496 2924 5CE6     		_NEXT 
 497              	
 498              	/**********************************
 499              	    SWAP	( w1 w2 -- w2 w1 )
 500              	 	Exchange top two stack items.
 501              	**********************************/
 502 2926 1A290000 		_HEADER SWAP,4,"SWAP"
 502      04535741 
 502      5000
 503 2930 3D68     		LDR	WP,[DSP]
 504 2932 3E60     		STR	TOS,[DSP]
 505 2934 2E46     		MOV	TOS,WP
 506 2936 53E6     		_NEXT 
 507              	
 508              	/***********************************
 509              	    OVER	( w1 w2 -- w1 w2 w1 )
 510              	 	Copy second stack item to top.
 511              	***********************************/
 512 2938 2A290000 		_HEADER OVER,4,"OVER"
 512      044F5645 
 512      520000BF 
 513 2944 47F8046D 		_PUSH
 514 2948 7E68     		LDR	TOS,[DSP,#4]
 515 294a 49E6     		_NEXT 
 516              	
 517              	/***********************************
 518              	    0<	  ( n -- t )
 519              	 	Return true if n is negative.
 520              	***********************************/
 521 294c 3C290000 		_HEADER ZLESS,2,"0<"
 521      02303C00 
 522 2954 4FEAE676 		ASR TOS,#31
 523 2958 42E6     		_NEXT 
 524              	
 525              	/********************************
 526              	    AND	 ( w w -- w )
 527              	 	Bitwise AND.
 528              	********************************/
ARM GAS  forth.s 			page 104


 529 295a 50290000 		_HEADER ANDD,3,"AND"
 529      03414E44 
 529      00BF
 530 2964 57F8045B 		LDR	WP,[DSP],#4
 531 2968 06EA0506 		AND	TOS,TOS,WP
 532 296c 38E6     		_NEXT 
 533              	
 534              	/******************************
 535              	    OR	  ( w w -- w )
 536              	 	Bitwise inclusive OR.
 537              	******************************/
 538 296e 5E290000 		_HEADER ORR,2,"OR"
 538      024F5200 
 538      00BF
 539 2978 57F8045B 		LDR	WP,[DSP],#4
 540 297c 46EA0506 		ORR	TOS,TOS,WP
 541 2980 2EE6     		_NEXT 
 542              	
 543              	/*****************************
 544              	    XOR	 ( w w -- w )
 545              	 	Bitwise exclusive OR.
 546              	*****************************/
 547 2982 72290000 		_HEADER XORR,3,"XOR"
 547      03584F52 
 547      00BF
 548 298c 57F8045B 		LDR	WP,[DSP],#4
 549 2990 86EA0506 		EOR	TOS,TOS,WP
 550 2994 24E6     		_NEXT 
 551              	
 552              	/**************************************************
 553              	    UM+	 ( w w -- w cy )
 554              	 	Add two numbers, return the sum and carry flag.
 555              	***************************************************/
 556 2996 86290000 		_HEADER UPLUS,3,"UM+"
 556      03554D2B 
 556      00BF
 557 29a0 3D68     		LDR	WP,[DSP]
 558 29a2 AD19     		ADDS	WP,WP,TOS
 559 29a4 4FF00006 		MOV	TOS,#0
 560 29a8 46F10006 		ADC	TOS,TOS,#0
 561 29ac 3D60     		STR	WP,[DSP]
 562 29ae 17E6     		_NEXT 
 563              	
 564              	/*********************************
 565              	    RSHIFT	 ( w # -- w )
 566              	 	arithmetic Right shift # bits.
 567              	**********************************/
 568 29b0 9A290000 		_HEADER RSHIFT,6,"RSHIFT"
 568      06525348 
 568      49465400 
 569 29bc 57F8045B 		LDR	WP,[DSP],#4
 570 29c0 45FA06F6 		MOV	TOS,WP,ASR TOS
 571 29c4 0CE6     		_NEXT 
 572              	
 573              	/****************************
 574              	    LSHIFT	 ( w # -- w )
 575              	 	Right shift # bits.
ARM GAS  forth.s 			page 105


 576              	****************************/
 577 29c6 B4290000 		_HEADER LSHIFT,6,"LSHIFT"
 577      064C5348 
 577      49465400 
 577      00BF
 578 29d4 57F8045B 		LDR	WP,[DSP],#4
 579 29d8 05FA06F6 		MOV	TOS,WP,LSL TOS
 580 29dc 00E6     		_NEXT
 581              	
 582              	/*************************
 583              	    +	 ( w w -- w )
 584              	 	Add.
 585              	*************************/
 586 29de CA290000 		_HEADER PLUS,1,"+"
 586      012B
 587 29e4 57F8045B 		LDR	WP,[DSP],#4
 588 29e8 2E44     		ADD	TOS,TOS,WP
 589 29ea F9E5     		_NEXT 
 590              	
 591              	/************************
 592              	    -	 ( w w -- w )
 593              	 	Subtract.
 594              	************************/
 595 29ec E2290000 		_HEADER SUBB,1,"-"
 595      012D00BF 
 596 29f4 57F8045B 		LDR	WP,[DSP],#4
 597 29f8 C6EB0506 		RSB	TOS,TOS,WP
 598 29fc F0E5     		_NEXT 
 599              	
 600              	/************************
 601              	    *	 ( w w -- w )
 602              	 	Multiply.
 603              	***********************/
 604 29fe F0290000 		_HEADER STAR,1,"*"
 604      012A
 605 2a04 57F8045B 		LDR	WP,[DSP],#4
 606 2a08 05FB06F6 		MUL	TOS,WP,TOS
 607 2a0c E8E5     		_NEXT 
 608              	
 609              	/***************************
 610              	    UM*	 ( w w -- ud )
 611              	 	Unsigned multiply.
 612              	****************************/
 613 2a0e 022A0000 		_HEADER UMSTA,3,"UM*"
 613      03554D2A 
 613      00BF
 614 2a18 3D68     		LDR	WP,[DSP]
 615 2a1a A6FB0523 		UMULL	T2,T3,TOS,WP
 616 2a1e 3A60     		STR	T2,[DSP]
 617 2a20 1E46     		MOV	TOS,T3
 618 2a22 DDE5     		_NEXT 
 619              	
 620              	/***************************
 621              	    M*	 ( w w -- d )
 622              	 	signed multiply.
 623              		hold double result
 624              	***************************/
ARM GAS  forth.s 			page 106


 625 2a24 122A0000 		_HEADER MSTAR,2,"M*"
 625      024D2A00 
 626 2a2c 3D68     		LDR	WP,[DSP]
 627 2a2e 86FB0523 		SMULL	T2,T3,TOS,WP
 628 2a32 3A60     		STR	T2,[DSP]
 629 2a34 1E46     		MOV	TOS,T3
 630 2a36 D3E5     		_NEXT 
 631              	
 632              	/***************************
 633              	    1+	 ( w -- w+1 )
 634              	 	Add 1.
 635              	***************************/
 636 2a38 282A0000 		_HEADER ONEP,2,"1+"
 636      02312B00 
 637 2a40 06F10106 		ADD	TOS,TOS,#1
 638 2a44 CCE5     		_NEXT 
 639              	
 640              	/***************************
 641              	    1-	 ( w -- w-1 )
 642              	 	Subtract 1.
 643              	***************************/
 644 2a46 3C2A0000 		_HEADER ONEM,2,"1-"
 644      02312D00 
 644      00BF
 645 2a50 A6F10106 		SUB	TOS,TOS,#1
 646 2a54 C4E5     		_NEXT 
 647              	
 648              	/***************************
 649              	    2+	 ( w -- w+2 )
 650              	 	Add 2.
 651              	**************************/
 652 2a56 4A2A0000 		_HEADER TWOP,2,"2+"
 652      02322B00 
 652      00BF
 653 2a60 06F10206 		ADD	TOS,TOS,#2
 654 2a64 BCE5     		_NEXT
 655              	
 656              	/**************************
 657              	    2-	 ( w -- w-2 )
 658              	 	Subtract 2.
 659              	**************************/
 660 2a66 5A2A0000 		_HEADER TWOM,2,"2-"
 660      02322D00 
 660      00BF
 661 2a70 A6F10206 		SUB	TOS,TOS,#2
 662 2a74 B4E5     		_NEXT
 663              	
 664              	/***************************
 665              	    CELL+	( w -- w+4 )
 666              	 	Add CELLL.
 667              	***************************/
 668 2a76 6A2A0000 		_HEADER CELLP,5,"CELL+"
 668      0543454C 
 668      4C2B
 669 2a80 06F10406 		ADD	TOS,TOS,#CELLL
 670 2a84 ACE5     		_NEXT
 671              	
ARM GAS  forth.s 			page 107


 672              	/***************************
 673              	    CELL-	( w -- w-4 )
 674              	 	Subtract CELLL.
 675              	**************************/
 676 2a86 7A2A0000 		_HEADER CELLM,5,"CELL-"
 676      0543454C 
 676      4C2D
 677 2a90 A6F10406 		SUB	TOS,TOS,#CELLL
 678 2a94 A4E5     		_NEXT
 679              	
 680              	/**************************** 
 681              	    BL	( -- 32 )
 682              	 	Blank (ASCII space).
 683              	*****************************/
 684 2a96 8A2A0000 		_HEADER BLANK,2,"BL"
 684      02424C00 
 684      00BF
 685 2aa0 47F8046D 		_PUSH
 686 2aa4 4FF02006 		MOV	TOS,#32
 687 2aa8 9AE5     		_NEXT 
 688              	
 689              	/**************************
 690              	    CELLS	( w -- w*4 )
 691              	 	Multiply CELLL 
 692              	***************************/
 693 2aaa 9A2A0000 		_HEADER CELLS,5,"CELLS"
 693      0543454C 
 693      4C53
 694 2ab4 4FEA8606 		LSL TOS,#2
 695 2ab8 92E5     		_NEXT
 696              	
 697              	/***************************
 698              	    CELL/	( w -- w/4 )
 699              	 	Divide by CELLL.
 700              	***************************/
 701 2aba AE2A0000 		_HEADER CELLSL,5,"CELL/"
 701      0543454C 
 701      4C2F
 702 2ac4 4FEAA606 		ASR TOS,#2
 703 2ac8 8AE5     		_NEXT
 704              	
 705              	/*************************
 706              	    2*	( w -- w*2 )
 707              	 	Multiply 2.
 708              	*************************/
 709 2aca BE2A0000 		_HEADER TWOST,2,"2*"
 709      02322A00 
 709      00BF
 710 2ad4 4FEA4606 		MOV	TOS,TOS,LSL#1
 711 2ad8 82E5     		_NEXT
 712              	
 713              	/*************************
 714              	    2/	( w -- w/2 )
 715              	 	Divide by 2.
 716              	***********************/
 717 2ada CE2A0000 		_HEADER TWOSL,2,"2/"
 717      02322F00 
ARM GAS  forth.s 			page 108


 717      00BF
 718 2ae4 4FEA6606 		MOV	TOS,TOS,ASR#1
 719 2ae8 7AE5     		_NEXT
 720              	
 721              	/****************************
 722              	    ?DUP	( w -- w w | 0 )
 723              	 	Conditional duplicate.
 724              	*****************************/
 725 2aea DE2A0000 		_HEADER QDUP,4,"?DUP"
 725      043F4455 
 725      5000
 726 2af4 3500     		MOVS	WP,TOS
 727 2af6 18BF     		IT NE 
 728 2af8 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 729 2afc 70E5     		_NEXT
 730              	
 731              	/***********************************
 732              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 733              	 	Rotate top 3 items.
 734              	*************************************/
 735 2afe EE2A0000 		_HEADER ROT,3,"ROT"
 735      03524F54 
 735      00BF
 736 2b08 3868     		LDR	T0,[DSP]  // w2 
 737 2b0a 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 738 2b0c 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 739 2b0e 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 740 2b10 66E5     		_NEXT
 741              	
 742              	/*********************************
 743              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 744              	 left rotate top 3 elements 
 745              	********************************/
 746 2b12 022B0000 		_HEADER NROT,4,"-ROT"
 746      042D524F 
 746      5400
 747 2b1c 7868     		LDR T0,[DSP,#4]
 748 2b1e 7E60     		STR TOS,[DSP,#4]	
 749 2b20 3E68     		LDR TOS,[DSP]
 750 2b22 3860     		STR T0,[DSP]
 751 2b24 5CE5     		_NEXT 
 752              	
 753              	/*********************************
 754              	    2DROP	( w1 w2 -- )
 755              	 	Drop top 2 items.
 756              	*********************************/
 757 2b26 162B0000 		_HEADER DDROP,5,"2DROP"
 757      05324452 
 757      4F50
 758 2b30 57F8046B 		_POP
 759 2b34 57F8046B 		_POP
 760 2b38 52E5     		_NEXT 
 761              	
 762              	/********************************
 763              		3DROP ( w1 w2 w3 -- )
 764              		drop top 3 items 
 765              	********************************/
ARM GAS  forth.s 			page 109


 766 2b3a 2A2B0000 		_HEADER TDROP,5,"3DROP"
 766      05334452 
 766      4F50
 767 2b44 07F10807 	    add DSP,#8 
 768 2b48 57F8046B 	    _POP 
 769 2b4c 48E5     	    _NEXT 
 770              	
 771              	/***********************************
 772              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 773              	 	Duplicate top 2 items.
 774              	************************************/
 775 2b4e 3E2B0000 		_HEADER DDUP,4,"2DUP"
 775      04324455 
 775      5000
 776 2b58 3868     		LDR	T0,[DSP] // w1
 777 2b5a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 778 2b5e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 779 2b62 3DE5     		_NEXT
 780              	
 781              	/******************************
 782              	    D+	( d1 d2 -- d3 )
 783              	 	Add top 2 double numbers.
 784              	******************************/
 785 2b64 522B0000 		_HEADER DPLUS,2,"D+"
 785      02442B00 
 786 2b6c 57F8045B 		LDR	WP,[DSP],#4
 787 2b70 57F8042B 		LDR	T2,[DSP],#4
 788 2b74 3B68     		LDR	T3,[DSP]
 789 2b76 ED18     		ADDS	WP,WP,T3
 790 2b78 3D60     		STR	WP,[DSP]
 791 2b7a 46EB0206 		ADC	TOS,TOS,T2
 792 2b7e 2FE5     		_NEXT
 793              	
 794              	/******************************
 795              		DABS ( d -- ud )
 796              		absolute value double 
 797              	*****************************/
 798 2b80 682B0000 		_HEADER DABS,4,"DABS"
 798      04444142 
 798      530000BF 
 799 2b8c 16F0004F 		tst TOS,#(1<<31)
 800 2b90 09D0     		beq 9f 
 801 2b92 6FEA0606 		mvn TOS,TOS 
 802 2b96 3D68     		ldr WP,[DSP]
 803 2b98 6FEA0505 		mvn WP,WP 
 804 2b9c 0135     		adds WP,#1
 805 2b9e 3D60     		str WP,[DSP]
 806 2ba0 01D3     		bcc 9f 
 807 2ba2 06F10106 		add TOS,#1 
 808 2ba6 1BE5     	9:	_NEXT 
 809              	
 810              	/*****************************
 811              	  UD> ( d1 d2 -- f )
 812              	  unsigned compare double d1 > d2 
 813              	******************************/
 814 2ba8 842B0000 		_HEADER UDGREAT,3,"UD>"
 814      0355443E 
ARM GAS  forth.s 			page 110


 815 2bb0 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 816 2bb4 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 817 2bb6 B042     		cmp T0,TOS 
 818 2bb8 02D8     		bhi 1f
 819 2bba 04D4     		bmi 2f  
 820 2bbc A942     		cmp T1,WP 
 821 2bbe 02D9     		bls 2f 
 822 2bc0 4FF0FF36 	1:	mov TOS,#-1 
 823 2bc4 0CE5     		_NEXT 
 824 2bc6 4FF00006 	2:  mov TOS,#0 
 825 2bca 09E5     		_NEXT 
 826              	
 827              	/******************************
 828              		D0= ( d -- f )
 829              		double 0= 
 830              	*****************************/
 831 2bcc AC2B0000 		_HEADER DZEQUAL,3,"D0="
 831      0344303D 
 832 2bd4 3046     		mov T0,TOS
 833 2bd6 57F8046B 		_POP 
 834 2bda 46EA0006 		orr TOS,T0 
 835 2bde 01D0     		beq 9f
 836 2be0 6FF00006 		mvn TOS,#0 
 837 2be4 FCE4     	9:	_NEXT 
 838              	
 839              	/*****************************
 840              	    NOT	 ( w -- !w )
 841              	 	1"s complement.
 842              	*****************************/
 843 2be6 D02B0000 		_HEADER INVER,3,"NOT"
 843      034E4F54 
 843      00BF
 844 2bf0 6FEA0606 		MVN	TOS,TOS
 845 2bf4 F4E4     		_NEXT
 846              	
 847              	/*****************************
 848              	    NEGATE	( w -- -w )
 849              	 	2's complement.
 850              	***************************/
 851 2bf6 EA2B0000 		_HEADER NEGAT,6,"NEGATE"
 851      064E4547 
 851      41544500 
 851      00BF
 852 2c04 C6F10006 		RSB	TOS,TOS,#0
 853 2c08 EAE4     		_NEXT
 854              	
 855              	/***************************
 856              	    ABS	 ( w -- |w| )
 857              	 	Absolute.
 858              	**************************/
 859 2c0a FA2B0000 		_HEADER ABSS,3,"ABS"
 859      03414253 
 859      00BF
 860 2c14 16F0004F 		TST	TOS,#0x80000000
 861 2c18 18BF     		IT NE
 862 2c1a 7642     	    RSBNE   TOS,TOS,#0
 863 2c1c E0E4     		_NEXT
ARM GAS  forth.s 			page 111


 864              	
 865              	/**************************
 866              		CLZ ( n - n )
 867              		count leading zeros 
 868              	**************************/
 869 2c1e 0E2C0000 		_HEADER CLZ,3,"CLZ"
 869      03434C5A 
 869      00BF
 870 2c28 B6FA86F6 		clz TOS,TOS 
 871 2c2c D8E4     		_NEXT 
 872              	
 873              	/*************************
 874              		CTZ ( n -- n )
 875              		count trailing zeros 
 876              	************************/
 877 2c2e 222C0000 		_HEADER CTZ,3,"CTZ"
 877      0343545A 
 877      00BF
 878 2c38 80EA0000 		eor T0,T0 
 879 2c3c 16F0010F 	1:  tst TOS,#1 
 880 2c40 04D1     		bne 2f 
 881 2c42 4FEA5606 		lsr TOS,#1 
 882 2c46 00F10100 		add T0,#1 
 883 2c4a F7E7     		b 1b 
 884 2c4c 0646     	2:  mov TOS,T0 
 885 2c4e C7E4     		_NEXT 
 886              	
 887              	
 888              	/*******************
 889              	  0= ( w -- f )
 890              	 TOS==0?
 891              	*******************/
 892 2c50 322C0000 		_HEADER ZEQUAL,2,"0="
 892      02303D00 
 893 2c58 16B9     		cbnz TOS,1f
 894 2c5a 4FF0FF36 		mov TOS,#-1
 895 2c5e BFE4     		_NEXT 
 896 2c60 86EA0606 	1:  eor TOS,TOS,TOS  
 897 2c64 BCE4     		_NEXT 	
 898              	
 899              	/*********************
 900              	    =	 ( w w -- t )
 901              	 	Equal?
 902              	*********************/
 903 2c66 542C0000 		_HEADER EQUAL,1,"="
 903      013D
 904 2c6c 57F8045B 		LDR	WP,[DSP],#4
 905 2c70 AE42     		CMP	TOS,WP
 906 2c72 0CBF     		ITE EQ 
 907 2c74 6FF00006 	    MVNEQ	TOS,#0
 908 2c78 0026     		MOVNE	TOS,#0
 909 2c7a B1E4     		_NEXT
 910              	
 911              	/************************
 912              		<> ( w w -- f )
 913              		different?
 914              	************************/
ARM GAS  forth.s 			page 112


 915 2c7c 6A2C0000 		_HEADER DIFF,2,"<>"
 915      023C3E00 
 916 2c84 3046     		mov T0,TOS 
 917 2c86 57F8046B 		_POP 
 918 2c8a 86EA0006 		eor TOS,T0
 919 2c8e B6FA86F0 		clz T0,TOS 
 920 2c92 06FA00F6 		lsl TOS,T0 
 921 2c96 4FEAE676 		asr TOS,#31 
 922 2c9a A1E4     		_NEXT 
 923              	
 924              	/************************
 925              	    U<	 ( w w -- t )
 926              	 	Unsigned less?
 927              	*************************/
 928 2c9c 802C0000 		_HEADER ULESS,2,"U<"
 928      02553C00 
 929 2ca4 57F8045B 		LDR	WP,[DSP],#4
 930 2ca8 B542     		CMP	WP,TOS
 931 2caa 34BF     		ITE CC 
 932 2cac 6FF00006 		MVNCC	TOS,#0
 933 2cb0 0026     		MOVCS	TOS,#0
 934 2cb2 95E4     		_NEXT
 935              	
 936              	/**********************
 937              	    <	( w w -- t )
 938              	 	Less?
 939              	**********************/
 940 2cb4 A02C0000 		_HEADER LESS,1,"<"
 940      013C00BF 
 941 2cbc 57F8045B 		LDR	WP,[DSP],#4
 942 2cc0 B542     		CMP	WP,TOS
 943 2cc2 B4BF     	    ITE LT
 944 2cc4 6FF00006 		MVNLT	TOS,#0
 945 2cc8 0026     		MOVGE	TOS,#0
 946 2cca 89E4     		_NEXT 
 947              	
 948              	/**********************
 949              		U> ( u u -- t|f )
 950              	    unsigned greater 
 951              	**********************/
 952 2ccc B82C0000 		_HEADER UGREAT,2,"U>"
 952      02553E00 
 953 2cd4 57F8045B 		LDR WP,[DSP],#4 
 954 2cd8 AE42     		CMP TOS,WP 
 955 2cda 34BF     		ITE CC  
 956 2cdc 6FF00006 		MVNCC TOS,#0 
 957 2ce0 0026     		MOVCS TOS,#0
 958 2ce2 7DE4     		_NEXT 
 959              	
 960              	/***********************
 961              	    >	( w w -- t )
 962              	 	greater?
 963              	***********************/
 964 2ce4 D02C0000 		_HEADER GREAT,1,">"
 964      013E00BF 
 965 2cec 57F8045B 		LDR	WP,[DSP],#4
 966 2cf0 B542     		CMP	WP,TOS
ARM GAS  forth.s 			page 113


 967 2cf2 CCBF     		ITE GT
 968 2cf4 6FF00006 	    MVNGT	TOS,#0
 969 2cf8 0026     		MOVLE	TOS,#0
 970 2cfa 71E4     		_NEXT
 971              	
 972              	/***************************
 973              	    MAX	 ( w w -- max )
 974              	 	Leave maximum.
 975              	***************************/
 976 2cfc E82C0000 		_HEADER MAX,3,"MAX"
 976      034D4158 
 977 2d04 57F8045B 		LDR	WP,[DSP],#4
 978 2d08 B542     		CMP	WP,TOS
 979 2d0a C8BF     		IT GT 
 980 2d0c 2E46     		MOVGT	TOS,WP
 981 2d0e 67E4     		_NEXT 
 982              	
 983              	/**************************
 984              	    MIN	 ( w w -- min )
 985              	 	Leave minimum.
 986              	**************************/
 987 2d10 002D0000 		_HEADER MIN,3,"MIN"
 987      034D494E 
 988 2d18 57F8045B 		LDR	WP,[DSP],#4
 989 2d1c B542     		CMP	WP,TOS
 990 2d1e B8BF     		IT LT
 991 2d20 2E46     		MOVLT	TOS,WP
 992 2d22 5DE4     		_NEXT
 993              	
 994              	/***********************
 995              	    +!	 ( w a -- )
 996              	 	Add to memory.
 997              	***********************/
 998 2d24 142D0000 		_HEADER PSTOR,2,"+!"
 998      022B2100 
 999 2d2c 57F8045B 		LDR	WP,[DSP],#4
 1000 2d30 3268     		LDR	T2,[TOS]
 1001 2d32 2A44     		ADD	T2,T2,WP
 1002 2d34 3260     		STR	T2,[TOS]
 1003 2d36 57F8046B 		_POP
 1004 2d3a 51E4     		_NEXT
 1005              	
 1006              	/************************
 1007              	    2!	 ( d a -- )
 1008              	 	Store double number.
 1009              	*************************/
 1010 2d3c 282D0000 		_HEADER DSTOR,2,"2!"
 1010      02322100 
 1011 2d44 57F8045B 		LDR	WP,[DSP],#4
 1012 2d48 57F8042B 		LDR	T2,[DSP],#4
 1013 2d4c 46F8045B 		STR	WP,[TOS],#4
 1014 2d50 3260     		STR	T2,[TOS]
 1015 2d52 57F8046B 		_POP
 1016 2d56 43E4     		_NEXT
 1017              	
 1018              	/************************
 1019              	    2@	 ( a -- d )
ARM GAS  forth.s 			page 114


 1020              	 	Fetch double number.
 1021              	************************/
 1022 2d58 402D0000 		_HEADER DAT,2,"D@"
 1022      02444000 
 1023 2d60 7568     		LDR	WP,[TOS,#4]
 1024 2d62 47F8045D 		STR	WP,[DSP,#-4]!
 1025 2d66 3668     		LDR	TOS,[TOS]
 1026 2d68 3AE4     		_NEXT
 1027              	
 1028              	/***************************
 1029              	    COUNT	( b -- b+1 c )
 1030              	 	Fetch length of string.
 1031              	****************************/
 1032 2d6a 5C2D0000 		_HEADER COUNT,5,"COUNT"
 1032      05434F55 
 1032      4E54
 1033 2d74 16F8015B 		LDRB	WP,[TOS],#1
 1034 2d78 47F8046D 		_PUSH
 1035 2d7c 2E46     		MOV	TOS,WP
 1036 2d7e 2FE4     		_NEXT
 1037              	
 1038              	/******************************
 1039              	    DNEGATE	( d -- -d )
 1040              	 	Negate double number.
 1041              	**************************/
 1042 2d80 6E2D0000 		_HEADER DNEGA,7,"DNEGATE"
 1042      07444E45 
 1042      47415445 
 1043 2d8c 3D68     		LDR	WP,[DSP]
 1044 2d8e A2EB0202 		SUB	T2,T2,T2
 1045 2d92 551B     		SUBS WP,T2,WP
 1046 2d94 62EB0606 		SBC	TOS,T2,TOS
 1047 2d98 3D60     		STR	WP,[DSP]
 1048 2d9a 21E4     		_NEXT
 1049              	
 1050              	/******************************
 1051              	  System and user variables
 1052              	******************************/
 1053              	
 1054              	/*******************************
 1055              	  doVAR	( -- a )
 1056              	  Run time routine for VARIABLE and CREATE.
 1057              	hidden word used by compiler
 1058              	********************************/
 1059              	DOVAR:
 1060 2d9c 47F8046D 		_PUSH
 1061 2da0 6646     		MOV TOS,IP
 1062 2da2 0CF1040C 		ADD IP,IP,#4 
 1063 2da6 1EE4     		B UNNEST 
 1064              	
 1065              	/**********************************
 1066              	    doCON	( -- a ) 
 1067              	 	Run time routine for CONSTANT.
 1068              	hidden word used by compiler 
 1069              	***********************************/
 1070              	DOCON:
 1071 2da8 47F8046D 		_PUSH
ARM GAS  forth.s 			page 115


 1072 2dac 5CF8046B 		LDR.W TOS,[IP],#4 
 1073 2db0 19E4     		B UNNEST 
 1074              	
 1075              	/***********************
 1076              	  system variables 
 1077              	***********************/
 1078              	
 1079              	/**************************
 1080              	 SEED ( -- a)
 1081              	 return PRNG seed address 
 1082              	**************************/
 1083 2db2 842D0000 		_HEADER SEED,4,"SEED"
 1083      04534545 
 1083      4400
 1084 2dbc 47F8046D 		_PUSH 
 1085 2dc0 04F10406 		ADD TOS,UP,#RNDSEED
 1086 2dc4 0CE4     		_NEXT 	
 1087              	
 1088              	/****************************************
 1089              	  MSEC ( -- a)
 1090              	 return address of milliseconds counter
 1091              	****************************************/
 1092 2dc6 B62D0000 		_HEADER MSEC,4,"MSEC"
 1092      044D5345 
 1092      4300
 1093 2dd0 47F8046D 	    _PUSH
 1094 2dd4 04F10806 	    ADD TOS,UP,#TICKS
 1095 2dd8 02E4     	    _NEXT 
 1096              	
 1097              	/*************************
 1098              	 TIMER ( -- a )
 1099              	 count down timer 
 1100              	**********************/
 1101 2dda CA2D0000 		_HEADER TIMER,5,"TIMER"
 1101      0554494D 
 1101      4552
 1102 2de4 47F8046D 		 _PUSH 
 1103 2de8 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1104 2dec FFF7F8BB 	    _NEXT
 1105              	
 1106              	/*****************************
 1107              	    'BOOT	 ( -- a )
 1108              	 	boot up application vector 
 1109              	*****************************/
 1110 2df0 DE2D0000 		_HEADER TBOOT,5,"'BOOT"
 1110      0527424F 
 1110      4F5400BF 
 1111 2dfc 47F8046D 		_PUSH
 1112 2e00 04F11006 		ADD	TOS,UP,#BOOT 
 1113 2e04 FFF7ECBB 		_NEXT
 1114              		
 1115              	/********************************************	
 1116              	    BASE	( -- a )
 1117              	 	Storage of the radix base for numeric I/O.
 1118              	**********************************************/
 1119 2e08 F42D0000 		_HEADER BASE,4,"BASE"
 1119      04424153 
ARM GAS  forth.s 			page 116


 1119      450000BF 
 1120 2e14 47F8046D 		_PUSH
 1121 2e18 04F11C06 		ADD	TOS,UP,#NBASE
 1122 2e1c FFF7E0BB 		_NEXT
 1123              	
 1124              	/*****************************************************
 1125              	    temp	 ( -- a )
 1126              	 	A temporary storage location used in parse and find.
 1127              	hidden word for internal use
 1128              	********************************************************/
 1129              	TEMP:
 1130 2e20 47F8046D 		_PUSH
 1131 2e24 04F12006 		ADD	TOS,UP,#TMP
 1132 2e28 FFF7DABB 		_NEXT
 1133              	
 1134              	/*******************************************
 1135              	    SPAN	( -- a )
 1136              	 	Hold character count received by EXPECT.
 1137              	********************************************/
 1138 2e2c 0C2E0000 		_HEADER SPAN,4,"SPAN"
 1138      04535041 
 1138      4E0000BF 
 1139 2e38 47F8046D 		_PUSH
 1140 2e3c 04F12406 		ADD	TOS,UP,#CSPAN
 1141 2e40 FFF7CEBB 		_NEXT
 1142              	
 1143              	/***********************************************************
 1144              	    >IN	 ( -- a )
 1145              	 	Hold the character pointer while parsing input stream.
 1146              	***********************************************************/
 1147 2e44 302E0000 		_HEADER INN,3,">IN"
 1147      033E494E 
 1148 2e4c 47F8046D 		_PUSH
 1149 2e50 04F12806 		ADD	TOS,UP,#TOIN
 1150 2e54 FFF7C4BB 		_NEXT
 1151              	
 1152              	/**************************************
 1153              	    #TIB	( -- a )
 1154              	 	Hold the current count and address 
 1155              		of the terminal input buffer.
 1156              	**************************************/
 1157 2e58 482E0000 		_HEADER NTIB,4,"#TIB"
 1157      04235449 
 1157      420000BF 
 1158 2e64 47F8046D 		_PUSH
 1159 2e68 04F12C06 		ADD	TOS,UP,#NTIBB
 1160 2e6c FFF7B8BB 		_NEXT
 1161              	
 1162              	/******************************
 1163              	    'EVAL	( -- a )
 1164              	 	Execution vector of EVAL.
 1165              	*******************************/
 1166 2e70 5C2E0000 		_HEADER TEVAL,5,"'EVAL"
 1166      05274556 
 1166      414C00BF 
 1167 2e7c 47F8046D 		_PUSH
 1168 2e80 04F13406 		ADD	TOS,UP,#EVAL
ARM GAS  forth.s 			page 117


 1169 2e84 FFF7ACBB 		_NEXT
 1170              	
 1171              	/*********************************
 1172              	    HLD	 ( -- a )
 1173              	 	Hold a pointer in building a 
 1174              		numeric output string.
 1175              	*********************************/
 1176 2e88 742E0000 		_HEADER HLD,3,"HLD"
 1176      03484C44 
 1177 2e90 47F8046D 		_PUSH
 1178 2e94 04F13806 		ADD	TOS,UP,#VHOLD
 1179 2e98 FFF7A2BB 		_NEXT
 1180              	
 1181              	/**********************************
 1182              	    CONTEXT	( -- a )
 1183              	 	A area to specify vocabulary 
 1184              		search order.
 1185              	**********************************/
 1186 2e9c 8C2E0000 		_HEADER CNTXT,7,"CONTEXT"
 1186      07434F4E 
 1186      54455854 
 1187              	CRRNT:
 1188 2ea8 47F8046D 		_PUSH
 1189 2eac 04F13C06 		ADD	TOS,UP,#CTXT
 1190 2eb0 FFF796BB 		_NEXT
 1191              	
 1192              	/******************************
 1193              	    CP	( -- a )
 1194              	 	Point to top name in RAM 
 1195              		vocabulary.
 1196              	******************************/
 1197 2eb4 A02E0000 		_HEADER CPP,2,"CP"
 1197      02435000 
 1198 2ebc 47F8046D 		_PUSH
 1199 2ec0 04F14406 		ADD	TOS,UP,#USER_CTOP
 1200 2ec4 FFF78CBB 		_NEXT
 1201              	
 1202              	/****************************
 1203              	   FCP ( -- a )
 1204              	  Point ot top of Forth 
 1205              	  system dictionary
 1206              	****************************/
 1207 2ec8 B82E0000 		_HEADER FCP,3,"FCP"
 1207      03464350 
 1208 2ed0 47F8046D 		_PUSH 
 1209 2ed4 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1210 2ed8 FFF782BB 		_NEXT 
 1211              	
 1212              	/***************************
 1213              	    LAST	( -- a )
 1214              	 	Point to the last name 
 1215              		in the name dictionary.
 1216              	***************************/
 1217 2edc CC2E0000 		_HEADER LAST,4,"LAST"
 1217      044C4153 
 1217      540000BF 
 1218 2ee8 47F8046D 		_PUSH
ARM GAS  forth.s 			page 118


 1219 2eec 04F14806 		ADD	TOS,UP,#LASTN
 1220 2ef0 FFF776BB 		_NEXT
 1221              	
 1222              	
 1223              	/***********************
 1224              		system constants 
 1225              	***********************/
 1226              	
 1227              	/********************************
 1228              		USER-BEGIN ( -- a )
 1229              	  where user area begin in RAM
 1230              	********************************/
 1231 2ef4 E02E0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1231      0A555345 
 1231      522D4245 
 1231      47494E00 
 1232 2f04 47F8046D 		_PUSH 
 1233 2f08 DFF80460 		ldr TOS,USR_BGN_ADR 
 1234 2f0c FFF768BB 		_NEXT 
 1235              	USR_BGN_ADR:
 1236 2f10 12050020 	.word  DTOP 
 1237              	
 1238              	/*********************************
 1239              	  USER_END ( -- a )
 1240              	  where user area end in RAM 
 1241              	******************************/
 1242 2f14 F82E0000 		_HEADER USER_END,8,"USER-END"
 1242      08555345 
 1242      522D454E 
 1242      440000BF 
 1243 2f24 47F8046D 		_PUSH 
 1244 2f28 DFF80460 		ldr TOS,USER_END_ADR 
 1245 2f2c FFF758BB 		_NEXT 
 1246              	USER_END_ADR:
 1247 2f30 7C800120 		.word DEND 
 1248              	
 1249              	
 1250              	/* *********************
 1251              	  Common functions
 1252              	***********************/
 1253              	
 1254              	/********************************
 1255              	    WITHIN	( u ul uh -- t )
 1256              	 	Return true if u is within 
 1257              		the range of ul and uh.
 1258              	********************************/
 1259 2f34 182F0000 		_HEADER WITHI,6,"WITHIN"
 1259      06574954 
 1259      48494E00 
 1260 2f40 504700BF 		_NEST
 1261 2f44 45290000 		_ADR	OVER
 1262 2f48 F5290000 		_ADR	SUBB
 1263 2f4c 9D280000 		_ADR	TOR
 1264 2f50 F5290000 		_ADR	SUBB
 1265 2f54 59280000 		_ADR	RFROM
 1266 2f58 A52C0000 		_ADR	ULESS
 1267 2f5c E7250000 		_UNNEST
ARM GAS  forth.s 			page 119


 1268              	
 1269              	//  Divide
 1270              	
 1271              	/*************************************
 1272              	    UM/MOD	( udl udh u -- ur uq )
 1273              	 	Unsigned divide of a double by a 
 1274              		single. Return mod and quotient.
 1275              	**************************************/
 1276 2f60 382F0000 		_HEADER UMMOD,6,"UM/MOD"
 1276      06554D2F 
 1276      4D4F4400 
 1277 2f6c 4FF00103 		MOV	T3,#1
 1278 2f70 57F8045B 		LDR	WP,[DSP],#4
 1279 2f74 3A68     		LDR	T2,[DSP]
 1280              	UMMOD0:
 1281 2f76 9218     		ADDS	T2,T2,T2
 1282 2f78 6D41     		ADCS	WP,WP,WP
 1283 2f7a 04D3     		BCC	UMMOD1
 1284 2f7c A5EB0605 		SUB	WP,WP,TOS
 1285 2f80 02F10102 		ADD	T2,T2,#1
 1286 2f84 04E0     		B UMMOD2
 1287              	UMMOD1:
 1288 2f86 AD1B     		SUBS	WP,WP,TOS 
 1289 2f88 28BF     		IT CS 
 1290 2f8a 0132     		ADDCS	T2,T2,#1
 1291 2f8c 00D2     		BCS	UMMOD2
 1292 2f8e 3544     		ADD	WP,WP,TOS
 1293              	UMMOD2:
 1294 2f90 DB18     		ADDS	T3,T3,T3
 1295 2f92 F0D3     		BCC	UMMOD0
 1296 2f94 1646     		MOV	TOS,T2
 1297 2f96 3D60     		STR	WP,[DSP]
 1298 2f98 FFF722BB 		_NEXT
 1299              	
 1300              	/****************************
 1301              	    M/MOD	( d n -- r q )
 1302              	 	Signed floored divide 
 1303              		of double by single. 
 1304              		Return mod and quotient.
 1305              	****************************/
 1306 2f9c 642F0000 		_HEADER MSMOD,5,"M/MOD"
 1306      054D2F4D 
 1306      4F4400BF 
 1307 2fa8 504700BF 		_NEST
 1308 2fac 21290000 		_ADR	DUPP
 1309 2fb0 55290000 		_ADR	ZLESS
 1310 2fb4 21290000 		_ADR	DUPP
 1311 2fb8 9D280000 		_ADR	TOR
 1312 2fbc E7270000 		_QBRAN MMOD1
 1312      D42F0000 
 1313 2fc4 052C0000 		_ADR	NEGAT
 1314 2fc8 9D280000 		_ADR	TOR
 1315 2fcc 8D2D0000 		_ADR	DNEGA
 1316 2fd0 59280000 		_ADR	RFROM
 1317              	MMOD1:
 1318 2fd4 9D280000 		_ADR	TOR
 1319 2fd8 21290000 		_ADR	DUPP
ARM GAS  forth.s 			page 120


 1320 2fdc 55290000 		_ADR	ZLESS
 1321 2fe0 E7270000 		_QBRAN MMOD2
 1321      F02F0000 
 1322 2fe8 89280000 		_ADR	RAT
 1323 2fec E5290000 		_ADR	PLUS
 1324              	MMOD2:
 1325 2ff0 59280000 		_ADR	RFROM
 1326 2ff4 6D2F0000 		_ADR	UMMOD
 1327 2ff8 59280000 		_ADR	RFROM
 1328 2ffc E7270000 		_QBRAN	MMOD3
 1328      10300000 
 1329 3004 31290000 		_ADR	SWAP
 1330 3008 052C0000 		_ADR	NEGAT
 1331 300c 31290000 		_ADR	SWAP
 1332              	MMOD3:   
 1333 3010 E7250000 		_UNNEST
 1334              	
 1335              	/****************************
 1336              		S>D ( n -- d )
 1337              		convert single to double 
 1338              	*****************************/
 1339 3014 A02F0000 		_HEADER STOD,3,"S>D"
 1339      03533E44 
 1340 301c 47F8046D 		_PUSH 
 1341 3020 4FEAE676 		ASR TOS,#31
 1342 3024 FFF7DCBA 		_NEXT 
 1343              	
 1344              	/****************************
 1345              		D2* ( d -- d<<1 )
 1346              		double * 2 
 1347              	***************************/
 1348 3028 18300000 		_HEADER D2STAR,3,"D2*"
 1348      0344322A 
 1349 3030 3868     		ldr T0,[DSP]
 1350 3032 4000     		lsls T0,#1
 1351 3034 3860     		str T0,[DSP]
 1352 3036 4FEA4606 		lsl TOS,#1
 1353 303a 46F10006 		adc TOS,#0
 1354 303e FFF7CFBA 		_NEXT 
 1355              	
 1356              	/****************************
 1357              		D2/  ( d -- d>>1 )
 1358              		double signed divide by 2 
 1359              	*****************************/
 1360 3042 2C300000 		_HEADER D2SL,3,"D2/"
 1360      0344322F 
 1360      00BF
 1361 304c 3868     		ldr T0,[DSP]
 1362 304e 7610     		asrs TOS,#1
 1363 3050 4FEA3000 		rrx T0,T0 
 1364 3054 3860     		str T0,[DSP]
 1365 3056 FFF7C3BA 		_NEXT 
 1366              	
 1367              	/***************************
 1368              		D/MOD  ( d+ n+ - r+ qd+ )
 1369              		unsigned double division
 1370              		and modulo 
ARM GAS  forth.s 			page 121


 1371              		output:
 1372              			qd+ = d+ / n+
 1373              			r+ = qd+ - (d+ * n+ )
 1374              	***************************/
 1375 305a 46300000 		_HEADER DSLMOD,5,"D/MOD"
 1375      05442F4D 
 1375      4F44
 1376 3064 3D68     		ldr WP,[DSP]  // d+ high 
 1377 3066 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1378 3068 4FF02002 		mov T2,#32 // shift counter  
 1379 306c 81EA0101 		eor T1,T1 // quotient T0:T1  
 1380 3070 25B9     		cbnz WP,1f    
 1381 3072 82EA0202 		eor T2,T2 // nos shifting required 
 1382 3076 0546     		mov WP,T0 
 1383 3078 80EA0000 		eor T0,T0 
 1384 307c 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1385 307e 15F0004F 	    tst WP,#(1<<31) 
 1386 3082 06D1     		bne 2f
 1387 3084 4918     		adds T1,T1,T1 
 1388 3086 4041     		adcs T0,T0,T0 
 1389 3088 45EB0505 		adc WP,WP,WP 
 1390 308c A2F10102 		sub T2,#1 
 1391 3090 F4E7     		b 1b 
 1392 3092 B5FBF6F3 	2:  udiv T3,WP,TOS
 1393 3096 41EA0301 		orr T1,T3   // append partial quotient 
 1394 309a 06FB03F3 		mul T3,TOS
 1395 309e A5EB0305 		sub WP,T3 //remainder 
 1396 30a2 02B1     		cbz T2,8f 
 1397 30a4 EAE7     		b 1b 
 1398 30a6 7D60     	8:	str WP,[DSP,#4] // remainder 
 1399 30a8 3960     		str T1,[DSP]  // q lo 
 1400 30aa 0646     		mov TOS,T0  // q hi 		
 1401 30ac FFF798BA 		_NEXT 
 1402              	
 1403              	
 1404              	/****************************
 1405              		D/  ( ud u -- udq )
 1406              		divide unsigned double 
 1407              		by unsigned single 
 1408              		return double quotient
 1409              		rounded to nearest integer 
 1410              	****************************/
 1411 30b0 5E300000 		_HEADER DSLASH,2,"D/"
 1411      02442F00 
 1412 30b8 504700BF 		_NEST 
 1413 30bc 21290000 		_ADR DUPP 
 1414 30c0 A7270000 		_DOLIT 1 
 1414      01000000 
 1415 30c8 BD290000 		_ADR RSHIFT 
 1416 30cc 9D280000 		_ADR TOR 
 1417 30d0 65300000 		_ADR DSLMOD 
 1418 30d4 092B0000 		_ADR ROT 
 1419 30d8 59280000 		_ADR RFROM 
 1420 30dc ED2C0000 		_ADR GREAT 
 1421 30e0 E7270000 		_QBRAN 9f
 1421      F8300000 
 1422 30e8 A7270000 		_DOLIT 1 
ARM GAS  forth.s 			page 122


 1422      01000000 
 1423 30f0 1D300000 		_ADR STOD 
 1424 30f4 6D2B0000 		_ADR DPLUS 
 1425 30f8 E7250000 	9:	_UNNEST 
 1426              	
 1427              	
 1428              	/****************************
 1429              		D* ( d s -- d )
 1430              	    multiply a double 
 1431              		by a single 
 1432              	****************************/
 1433 30fc B4300000 		_HEADER DSTAR,2,"D*"
 1433      02442A00 
 1434              	/*
 1435              		_NEST 
 1436              		_ADR NROT 
 1437              		_ADR DUPP 
 1438              		_ADR TOR 
 1439              		_ADR DABS
 1440              		_ADR SWAP  
 1441              		_ADR ROT   
 1442              		_ADR DUPP
 1443              		_ADR TOR
 1444              		_ADR MSTAR
 1445              		_ADR ROT
 1446              		_ADR RFROM 
 1447              		_ADR STAR 
 1448              		_ADR PLUS
 1449              		_ADR RFROM 
 1450              		_ADR ZLESS 
 1451              		_QBRAN 9f
 1452              		_ADR DNEGA   
 1453              	9:	_UNNEST 
 1454              	*/
 1455 3104 57F8040B 		ldr T0,[DSP],#4
 1456 3108 3968     		ldr T1,[DSP]
 1457 310a 3860     		str T0,[DSP] 
 1458 310c 83EA0303 		eor T3,T3 
 1459 3110 10F0004F 		tst T0,#(1<<31)
 1460 3114 02D0     		beq 1f 
 1461              		// DNEGATE 
 1462 3116 591A     		subs T1,T3,T1  
 1463 3118 63EB0000 		sbc T0,T3,T0 
 1464 311c 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1465 3120 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1466 3124 0E44     		add TOS,T1  // TOS:T2 product  
 1467 3126 3868     		ldr r0,[DSP]
 1468 3128 10F0004F 		tst T0,#(1<<31)
 1469 312c 02D0     		beq 2f 
 1470              		// DNEGATE product 
 1471 312e 9A1A     		subs T2,T3,T2  
 1472 3130 63EB0606 		sbc TOS,T3,TOS 
 1473 3134 3A60     	2:  str T2,[DSP]
 1474 3136 FFF753BA 		_NEXT 
 1475              	
 1476              	
 1477              	/****************************
ARM GAS  forth.s 			page 123


 1478              	   /MOD	( n n -- r q )
 1479              		Signed divide. Return
 1480              		mod and quotient.
 1481              	****************************/
 1482 313a 00310000 		_HEADER SLMOD,4,"/MOD"
 1482      042F4D4F 
 1482      4400
 1483 3144 504700BF 		_NEST
 1484 3148 45290000 		_ADR	OVER
 1485 314c 55290000 		_ADR	ZLESS
 1486 3150 31290000 		_ADR	SWAP
 1487 3154 A92F0000 		_ADR	MSMOD
 1488 3158 E7250000 		_UNNEST
 1489              	
 1490              	/**************************
 1491              	    MOD	 ( n n -- r )
 1492              	 	Signed divide. Return
 1493              		mod only.
 1494              	**************************/
 1495 315c 3E310000 		_HEADER MODD,3,"MOD"
 1495      034D4F44 
 1496 3164 504700BF 		_NEST
 1497 3168 45310000 		_ADR	SLMOD
 1498 316c 11290000 		_ADR	DROP
 1499 3170 E7250000 		_UNNEST
 1500              	
 1501              	/*************************
 1502              	    /	   ( n n -- q )
 1503              	 	Signed divide. Return
 1504              		quotient only.
 1505              	**************************/
 1506 3174 60310000 		_HEADER SLASH,1,"/"
 1506      012F00BF 
 1507 317c 504700BF 		_NEST
 1508 3180 45310000 		_ADR	SLMOD
 1509 3184 31290000 		_ADR	SWAP
 1510 3188 11290000 		_ADR	DROP
 1511 318c E7250000 		_UNNEST
 1512              	
 1513              	//******************************
 1514              	//  */MOD	( n1 n2 n3 -- r q )
 1515              	/* 	Multiply n1 and n2, then 
 1516              		divide by n3. Return 
 1517              		mod and quotient.
 1518              	******************************/
 1519 3190 78310000 		_HEADER SSMOD,5,"*/MOD"
 1519      052A2F4D 
 1519      4F4400BF 
 1520 319c 504700BF 		_NEST
 1521 31a0 9D280000 		_ADR	TOR
 1522 31a4 2D2A0000 		_ADR	MSTAR
 1523 31a8 59280000 		_ADR	RFROM
 1524 31ac A92F0000 		_ADR	MSMOD
 1525 31b0 E7250000 		_UNNEST
 1526              	
 1527              	//*******************************
 1528              	//  */ ( n1 n2 n3 -- q )
ARM GAS  forth.s 			page 124


 1529              	/* 	Multiply n1 by n2, then 
 1530              		divide by n3. Return quotient
 1531              		only.
 1532              	*******************************/
 1533 31b4 94310000 		_HEADER STASL,2,"*/"
 1533      022A2F00 
 1534 31bc 504700BF 		_NEST
 1535 31c0 9D310000 		_ADR	SSMOD
 1536 31c4 31290000 		_ADR	SWAP
 1537 31c8 11290000 		_ADR	DROP
 1538 31cc E7250000 		_UNNEST
 1539              	
 1540              	/*******************
 1541              	  Miscellaneous
 1542              	*******************/
 1543              	
 1544              	/*************************
 1545              	    ALIGNED	( b -- a )
 1546              	 	Align address to the 
 1547              		cell boundary.
 1548              	**************************/
 1549 31d0 B8310000 		_HEADER ALGND,7,"ALIGNED"
 1549      07414C49 
 1549      474E4544 
 1550 31dc 06F10306 		ADD	TOS,TOS,#3
 1551 31e0 6FF00305 		MVN	WP,#3
 1552 31e4 06EA0506 		AND	TOS,TOS,WP
 1553 31e8 FFF7FAB9 		_NEXT
 1554              	
 1555              	/****************************
 1556              	    >CHAR	( c -- c )
 1557              	 	Filter non-printing 
 1558              		characters.
 1559              	****************************/
 1560 31ec D4310000 		_HEADER TCHAR,5,">CHAR"
 1560      053E4348 
 1560      415200BF 
 1561 31f8 504700BF 		_NEST
 1562 31fc A7270000 		_DOLIT  0x7F
 1562      7F000000 
 1563 3204 65290000 		_ADR	ANDD
 1564 3208 21290000 		_ADR	DUPP	// mask msb
 1565 320c A12A0000 		_ADR	BLANK
 1566 3210 A7270000 		_DOLIT 	127
 1566      7F000000 
 1567 3218 412F0000 		_ADR	WITHI	// check for printable
 1568 321c F12B0000 		_ADR	INVER
 1569 3220 E7270000 		_QBRAN	TCHA1
 1569      34320000 
 1570 3228 11290000 		_ADR	DROP
 1571 322c A7270000 		_DOLIT 	'_'	// replace non-printables
 1571      5F000000 
 1572              	TCHA1:
 1573 3234 E7250000 		  _UNNEST
 1574              	
 1575              	/************************
 1576              	    DEPTH	( -- n )
ARM GAS  forth.s 			page 125


 1577              	 	Return the depth of
 1578              		the data stack.
 1579              	***********************/
 1580 3238 F0310000 		_HEADER DEPTH,5,"DEPTH"
 1580      05444550 
 1580      544800BF 
 1581 3244 4FF68062 		_MOV32 T2,SPP 
 1581      C2F20102 
 1582 324c A2EB0702 		SUB	T2,T2,DSP
 1583 3250 47F8046D 		_PUSH
 1584 3254 4FEAA206 		ASR	TOS,T2,#2
 1585 3258 FFF7C2B9 		_NEXT
 1586              	
 1587              	/*****************************
 1588              	    PICK	( ... +n -- ... w )
 1589              	 	Copy the nth stack item 
 1590              		to tos.
 1591              	******************************/
 1592 325c 3C320000 		_HEADER PICK,4,"PICK"
 1592      04504943 
 1592      4B0000BF 
 1593 3268 504700BF 		_NEST
 1594 326c 412A0000 		_ADR	ONEP
 1595 3270 B52A0000 		_ADR	CELLS
 1596 3274 ED280000 		_ADR	SPAT
 1597 3278 E5290000 		_ADR	PLUS
 1598 327c 2D280000 		_ADR	AT
 1599 3280 E7250000 		_UNNEST
 1600              	
 1601              	/*********************
 1602              	  Memory access
 1603              	*********************/
 1604              	
 1605              	/*************************
 1606              	    HERE	( -- a )
 1607              	 	Return the top of
 1608              		the code dictionary.
 1609              	*************************/
 1610 3284 60320000 		_HEADER HERE,4,"HERE"
 1610      04484552 
 1610      450000BF 
 1611 3290 504700BF 		_NEST
 1612 3294 BD2E0000 		_ADR	CPP
 1613 3298 2D280000 		_ADR	AT
 1614 329c E7250000 		_UNNEST
 1615              	
 1616              	/***************************	
 1617              	    PAD	 ( -- a )
 1618              	 	Return the address of 
 1619              		a temporary buffer.
 1620              	***************************/
 1621 32a0 88320000 		_HEADER PAD,3,"PAD"
 1621      03504144 
 1622 32a8 504700BF 		_NEST
 1623 32ac 91320000 		_ADR	HERE
 1624 32b0 A7270000 		_DOLIT 80
 1624      50000000 
ARM GAS  forth.s 			page 126


 1625 32b8 E5290000 		_ADR PLUS 
 1626 32bc E7250000 		_UNNEST
 1627              	
 1628              	/***********************
 1629              	    TIB	 ( -- a )
 1630              	 	Return the address 
 1631              		of the terminal 
 1632              		input buffer.
 1633              	************************/
 1634 32c0 A4320000 		_HEADER TIB,3,"TIB"
 1634      03544942 
 1635 32c8 47F8046D 		_PUSH
 1636 32cc 266B     		ldr TOS,[UP,#TIBUF]
 1637 32ce FFF787B9 		_NEXT
 1638              	
 1639              	/*************************
 1640              	    @EXECUTE	( a -- )
 1641              	 	Execute vector stored
 1642              		in address a.
 1643              	*************************/
 1644 32d2 C4320000 		_HEADER ATEXE,8,"@EXECUTE"
 1644      08404558 
 1644      45435554 
 1644      4500
 1645 32e0 3500     		MOVS	WP,TOS
 1646 32e2 57F8046B 		_POP
 1647 32e6 2D68     		LDR	WP,[WP]
 1648 32e8 45F00105 		ORR	WP,WP,#1
 1649 32ec 18BF     	    IT NE 
 1650 32ee 2847     		BXNE	WP
 1651 32f0 FFF776B9 		_NEXT
 1652              	
 1653              	/*******************************
 1654              	    CMOVE	( b1 b2 u -- )
 1655              	 	Copy u bytes from b1 to b2.
 1656              	********************************/
 1657 32f4 D6320000 		_HEADER CMOVE,5,"CMOVE"
 1657      05434D4F 
 1657      564500BF 
 1658 3300 57F8042B 		LDR	T2,[DSP],#4
 1659 3304 57F8043B 		LDR	T3,[DSP],#4
 1660 3308 03E0     		B CMOV1
 1661              	CMOV0:
 1662 330a 13F8015B 		LDRB	WP,[T3],#1
 1663 330e 02F8015B 		STRB	WP,[T2],#1
 1664              	CMOV1:
 1665 3312 3600     		MOVS	TOS,TOS
 1666 3314 02D0     		BEQ	CMOV2
 1667 3316 A6F10106 		SUB	TOS,TOS,#1
 1668 331a F6E7     		B CMOV0
 1669              	CMOV2:
 1670 331c 57F8046B 		_POP
 1671 3320 FFF75EB9 		_NEXT
 1672              	
 1673              	/***************************
 1674              	    MOVE	( a1 a2 u -- )
 1675              	 	Copy u words from a1 to a2.
ARM GAS  forth.s 			page 127


 1676              	*******************************/
 1677 3324 F8320000 		_HEADER MOVE,4,"MOVE"
 1677      044D4F56 
 1677      450000BF 
 1678 3330 4FF00400 		MOV T0,#4 
 1679 3334 06F10306 		ADD TOS,#3 
 1680 3338 26F00306 		BIC TOS,#3
 1681 333c 57F8041B 		LDR	T1,[DSP],#4 // dest
 1682 3340 57F8042B 		LDR	T2,[DSP],#4 // src 
 1683 3344 8A42     		CMP T2,T1 
 1684 3346 08D5     		BPL MOVE1
 1685 3348 6FF00300 		MOV T0,#-4 
 1686 334c 3144     		ADD T1,TOS
 1687 334e 3244     		ADD T2,TOS 
 1688 3350 01E0     		B MOVE3
 1689              	MOVE0:
 1690 3352 1568     		LDR	WP,[T2]
 1691 3354 0D60     		STR	WP,[T1]
 1692              	MOVE3: 
 1693 3356 0144     		ADD T1,T0 
 1694 3358 0244     		ADD T2,T0 
 1695              	MOVE1:
 1696 335a 3600     		MOVS TOS,TOS
 1697 335c 02D0     		BEQ	MOVE2
 1698 335e A6F10406 		SUB	TOS,TOS,#4
 1699 3362 F6E7     		B MOVE0
 1700              	MOVE2:
 1701 3364 57F8046B 		_POP
 1702 3368 FFF73AB9 		_NEXT
 1703              	
 1704              	/**************************
 1705              	    FILL	( b u c -- )
 1706              	 	Fill u bytes of character
 1707              		c to area beginning at b.
 1708              	******************************/
 1709 336c 28330000 		_HEADER FILL,4,"FILL"
 1709      0446494C 
 1709      4C0000BF 
 1710 3378 03CF     		LDMFD DSP!,{T0,T1} 
 1711 337a 0000     		MOVS T0,T0 
 1712 337c 03D0     		BEQ FILL2
 1713              	FILL1:
 1714 337e 01F8016B 		STRB	TOS,[T1],#1
 1715 3382 0138     		SUBS	T0,T0,#1
 1716 3384 FBD1     		BNE FILL1
 1717              	FILL2:
 1718 3386 57F8046B 		_POP
 1719 338a FFF729B9 		_NEXT
 1720              	
 1721              	/*****************************
 1722              	    PACK$	( b u a -- a )
 1723              	 	Build a counted word with
 1724              		u characters from b. 
 1725              		Null fill.
 1726              	*****************************/
 1727 338e 70330000 		_HEADER PACKS,5,"PACK$"
 1727      05504143 
ARM GAS  forth.s 			page 128


 1727      4B24
 1728 3398 504700BF 		_NEST
 1729 339c DD310000 		_ADR	ALGND
 1730 33a0 21290000 		_ADR	DUPP
 1731 33a4 9D280000 		_ADR	TOR		// strings only on cell boundary
 1732 33a8 45290000 		_ADR	OVER
 1733 33ac E5290000 		_ADR	PLUS
 1734 33b0 412A0000 		_ADR	ONEP 
 1735 33b4 A7270000 		_DOLIT 	0xFFFFFFFC
 1735      FCFFFFFF 
 1736 33bc 65290000 		_ADR	ANDD			// count mod cell
 1737 33c0 A7270000 		_DOLIT 	0
 1737      00000000 
 1738 33c8 31290000 		_ADR	SWAP
 1739 33cc 19280000 		_ADR	STORE			// null fill cell
 1740 33d0 89280000 		_ADR	RAT
 1741 33d4 592B0000 		_ADR	DDUP
 1742 33d8 39280000 		_ADR	CSTOR
 1743 33dc 412A0000 		_ADR	ONEP			// save count
 1744 33e0 31290000 		_ADR	SWAP
 1745 33e4 01330000 		_ADR	CMOVE
 1746 33e8 59280000 		_ADR	RFROM
 1747 33ec E7250000 		_UNNEST   			// move string
 1748              	
 1749              	/***********************************
 1750              	  Numeric output, single precision
 1751              	***********************************/
 1752              	
 1753              	/**************************
 1754              	    DIGIT	( u -- c )
 1755              	 	Convert digit u to 
 1756              		a character.
 1757              	***************************/
 1758 33f0 92330000 		_HEADER DIGIT,5,"DIGIT"
 1758      05444947 
 1758      495400BF 
 1759 33fc 504700BF 		_NEST
 1760 3400 A7270000 		_DOLIT 9
 1760      09000000 
 1761 3408 45290000 		_ADR	OVER
 1762 340c BD2C0000 		_ADR	LESS
 1763 3410 A7270000 		_DOLIT	7
 1763      07000000 
 1764 3418 65290000 		_ADR	ANDD
 1765 341c E5290000 		_ADR	PLUS
 1766 3420 A7270000 		_DOLIT	'0'
 1766      30000000 
 1767 3428 E5290000 		_ADR	PLUS 
 1768 342c E7250000 		_UNNEST
 1769              	
 1770              	/*********************************
 1771              	    EXTRACT	( ud base -- ud c )
 1772              	 	Extract the least significant
 1773              		digit from positive double.
 1774              	**********************************/
 1775 3430 F4330000 		_HEADER EXTRC,7,"EXTRACT"
 1775      07455854 
ARM GAS  forth.s 			page 129


 1775      52414354 
 1776 343c 504700BF 		_NEST
 1777 3440 65300000 		_ADR	DSLMOD
 1778 3444 092B0000 		_ADR	ROT
 1779 3448 FD330000 		_ADR	DIGIT
 1780 344c E7250000 		_UNNEST
 1781              	
 1782              	/***************************
 1783              	    <#	  ( -- )
 1784              	 	Initiate the numeric
 1785              		output process.
 1786              	****************************/
 1787 3450 34340000 		_HEADER BDIGS,2,"<#"
 1787      023C2300 
 1788 3458 504700BF 		_NEST
 1789 345c A9320000 		_ADR	PAD
 1790 3460 912E0000 		_ADR	HLD
 1791 3464 19280000 		_ADR	STORE
 1792 3468 E7250000 		_UNNEST
 1793              	
 1794              	/*********************************
 1795              	    HOLD	( c -- )
 1796              	 	Insert a character into the 
 1797              		numeric output string.
 1798              	**********************************/
 1799 346c 54340000 		_HEADER HOLD,4,"HOLD"
 1799      04484F4C 
 1799      440000BF 
 1800 3478 504700BF 		_NEST
 1801 347c 912E0000 		_ADR	HLD
 1802 3480 2D280000 		_ADR	AT
 1803 3484 512A0000 		_ADR	ONEM
 1804 3488 21290000 		_ADR	DUPP
 1805 348c 912E0000 		_ADR	HLD
 1806 3490 19280000 		_ADR	STORE
 1807 3494 39280000 		_ADR	CSTOR
 1808 3498 E7250000 		_UNNEST
 1809              	
 1810              	/***********************
 1811              	    #	   ( ud -- ud )
 1812              	 	Extract one digit 
 1813              		from ud and append 
 1814              		the digit to output 
 1815              		string.
 1816              	*************************/
 1817 349c 70340000 		_HEADER DIG,1,"#"
 1817      012300BF 
 1818 34a4 504700BF 		_NEST
 1819 34a8 152E0000 		_ADR	BASE
 1820 34ac 2D280000 		_ADR	AT
 1821 34b0 3D340000 		_ADR	EXTRC
 1822 34b4 79340000 		_ADR	HOLD
 1823 34b8 E7250000 		_UNNEST
 1824              	
 1825              	/***************************
 1826              	    #S	  ( ud -- 0 )
 1827              	 	Convert ud until all 
ARM GAS  forth.s 			page 130


 1828              		digits are added to 
 1829              		the output string.
 1830              	***************************/
 1831 34bc A0340000 		_HEADER DIGS,2,"#S"
 1831      02235300 
 1832 34c4 504700BF 		_NEST
 1833              	DIGS1:
 1834 34c8 A5340000 	    _ADR	DIG
 1835 34cc 592B0000 		_ADR	DDUP
 1836 34d0 79290000 		_ADR    ORR 
 1837 34d4 E7270000 		_QBRAN 	DIGS2
 1837      E4340000 
 1838 34dc FB270000 		_BRAN	DIGS1
 1838      C8340000 
 1839              	DIGS2:
 1840 34e4 11290000 		 _ADR DROP 
 1841 34e8 E7250000 		 _UNNEST
 1842              	
 1843              	/*********************
 1844              	    SIGN	( n -- )
 1845              	 	Add a minus sign
 1846              		to the numeric
 1847              		output string.
 1848              	*********************/
 1849 34ec C0340000 		_HEADER SIGN,4,"SIGN"
 1849      04534947 
 1849      4E0000BF 
 1850 34f8 504700BF 		_NEST
 1851 34fc 55290000 		_ADR	ZLESS
 1852 3500 E7270000 		_QBRAN	SIGN1
 1852      14350000 
 1853 3508 A7270000 		_DOLIT '-'
 1853      2D000000 
 1854 3510 79340000 		_ADR	HOLD
 1855              	SIGN1:
 1856 3514 E7250000 		  _UNNEST
 1857              	
 1858              	/*************************
 1859              	    #>  ( w -- b u )
 1860              	 	Prepare the output 
 1861              		word to be TYPE'd.
 1862              	************************/
 1863 3518 F0340000 		_HEADER EDIGS,2,"#>"
 1863      02233E00 
 1864 3520 504700BF 		_NEST
 1865 3524 11290000 		_ADR	DROP
 1866 3528 912E0000 		_ADR	HLD
 1867 352c 2D280000 		_ADR	AT
 1868 3530 A9320000 		_ADR	PAD
 1869 3534 45290000 		_ADR	OVER
 1870 3538 F5290000 		_ADR	SUBB
 1871 353c E7250000 		_UNNEST
 1872              	
 1873              	/**************************
 1874              	    str	 ( n -- b u )
 1875              	 	Convert a signed 
 1876              		integer to a numeric 
ARM GAS  forth.s 			page 131


 1877              		string.
 1878              	hidden word used by compiler
 1879              	***************************/
 1880              	STRR:
 1881 3540 504700BF 		_NEST
 1882 3544 1D300000 		_ADR 	STOD 
 1883 3548 21290000 		_ADR	DUPP
 1884 354c 9D280000 		_ADR	TOR
 1885 3550 8D2B0000 		_ADR	DABS
 1886 3554 59340000 		_ADR	BDIGS
 1887 3558 C5340000 		_ADR	DIGS
 1888 355c 59280000 		_ADR	RFROM
 1889 3560 F9340000 		_ADR	SIGN
 1890 3564 21350000 		_ADR	EDIGS
 1891 3568 E7250000 		_UNNEST
 1892              	
 1893              	/*************************
 1894              	    HEX	 ( -- )
 1895              	 	Use radix 16 as 
 1896              		base for numeric 
 1897              		conversions.
 1898              	*************************/
 1899 356c 1C350000 		_HEADER HEX,3,"HEX"
 1899      03484558 
 1900 3574 504700BF 		_NEST
 1901 3578 A7270000 		_DOLIT 16
 1901      10000000 
 1902 3580 152E0000 		_ADR	BASE
 1903 3584 19280000 		_ADR	STORE
 1904 3588 E7250000 		_UNNEST
 1905              	
 1906              	/**************************
 1907              		BIN ( -- )
 1908              		Use radix 2 as 
 1909              		base for numeric 
 1910              		conversion 
 1911              	**************************/
 1912 358c 70350000 		_HEADER BIN,3,"BIN"
 1912      0342494E 
 1913 3594 504700BF 		_NEST 
 1914 3598 A7270000 		_DOLIT 2 
 1914      02000000 
 1915 35a0 152E0000 		_ADR BASE 
 1916 35a4 19280000 		_ADR STORE
 1917 35a8 E7250000 		_UNNEST 
 1918              	
 1919              	/************************
 1920              	    DECIMAL	( -- )
 1921              	 	Use radix 10 as base
 1922              		for numeric conversions.
 1923              	*************************/
 1924 35ac 90350000 		_HEADER DECIM,7,"DECIMAL"
 1924      07444543 
 1924      494D414C 
 1925 35b8 504700BF 		_NEST
 1926 35bc A7270000 		_DOLIT 10
 1926      0A000000 
ARM GAS  forth.s 			page 132


 1927 35c4 152E0000 		_ADR	BASE
 1928 35c8 19280000 		_ADR	STORE
 1929 35cc E7250000 		_UNNEST
 1930              	
 1931              	/************************************
 1932              	  Numeric input, single precision
 1933              	***********************************/
 1934              	
 1935              	/***********************************
 1936              	    DIGIT?	( c base -- u t )
 1937              	 	Convert a character to its 
 1938              		numeric value. A flag 
 1939              		indicates success.
 1940              	**********************************/
 1941 35d0 B0350000 		_HEADER DIGTQ,6,"DIGIT?"
 1941      06444947 
 1941      49543F00 
 1942 35dc 504700BF 		_NEST
 1943 35e0 9D280000 		_ADR	TOR
 1944 35e4 A7270000 		_DOLIT 	'0'
 1944      30000000 
 1945 35ec F5290000 		_ADR	SUBB
 1946 35f0 A7270000 		_DOLIT 9
 1946      09000000 
 1947 35f8 45290000 		_ADR	OVER
 1948 35fc BD2C0000 		_ADR	LESS
 1949 3600 E7270000 		_QBRAN	DGTQ1
 1949      28360000 
 1950 3608 A7270000 		_DOLIT 7
 1950      07000000 
 1951 3610 F5290000 		_ADR	SUBB
 1952 3614 21290000 		_ADR	DUPP
 1953 3618 A7270000 		_DOLIT	10
 1953      0A000000 
 1954 3620 BD2C0000 		_ADR	LESS
 1955 3624 79290000 		_ADR	ORR
 1956              	DGTQ1:
 1957 3628 21290000 		_ADR	DUPP
 1958 362c 59280000 		_ADR	RFROM
 1959 3630 A52C0000 		_ADR	ULESS
 1960 3634 E7250000 		_UNNEST
 1961              	
 1962              	/***********************************
 1963              	 parse digits 
 1964              	  d digits count 
 1965              	  n parsed integer
 1966              	  a+ updated pointer  
 1967              	************************************/
 1968              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1969 3638 504700BF 	    _NEST
 1970 363c 152E0000 	    _ADR BASE 
 1971 3640 2D280000 	    _ADR AT 
 1972 3644 9D280000 	    _ADR TOR  
 1973 3648 752D0000 	1:  _ADR COUNT 
 1974 364c 89280000 	    _ADR RAT 
 1975 3650 DD350000 	    _ADR DIGTQ
 1976 3654 E7270000 	    _QBRAN 2f
ARM GAS  forth.s 			page 133


 1976      84360000 
 1977 365c 092B0000 	    _ADR ROT 
 1978 3660 89280000 	    _ADR RAT 
 1979 3664 052A0000 	    _ADR STAR 
 1980 3668 E5290000 	    _ADR PLUS
 1981 366c 31290000 	    _ADR SWAP 
 1982 3670 092B0000 	    _ADR ROT 
 1983 3674 412A0000 	    _ADR ONEP 
 1984 3678 1D2B0000 	    _ADR NROT
 1985 367c FB270000 	    _BRAN 1b 
 1985      48360000 
 1986 3684 11290000 	2:  _ADR DROP 
 1987 3688 512A0000 	    _ADR ONEM  // decrement a 
 1988 368c 59280000 	    _ADR RFROM 
 1989 3690 11290000 	    _ADR DROP 
 1990 3694 E7250000 	    _UNNEST 
 1991              	
 1992              	/**************************
 1993              	 CHAR? 
 1994              	 check for charcter c 
 1995              	 move pointer if *a==c  
 1996              	**************************/
 1997              	CHARQ: // ( a c -- a+ t | a f )
 1998 3698 3868     	    ldr T0,[DSP]
 1999 369a 10F8011B 	    ldrb T1,[T0],#1 
 2000 369e 3246     	    mov T2,TOS 
 2001 36a0 86EA0606 	    eor TOS,TOS
 2002 36a4 9142     	    cmp T1,T2
 2003 36a6 02D1     	    bne 1f 
 2004 36a8 3860     	    str T0,[DSP]
 2005 36aa 6FEA0606 	    mvn TOS,TOS  
 2006 36ae FEF797BF 	1:  _NEXT
 2007              	
 2008              	/*********************************
 2009              	   NEG? ( a -- a|a+  f|t )
 2010              	   skip '-'|'+' return -1 if '-' 
 2011              	   else return 0 
 2012              	*********************************/
 2013              	NEGQ: 
 2014 36b2 504700BF 	    _NEST 
 2015 36b6 A7270000 	    _DOLIT '-' 
 2015      2D000000 
 2016 36be 99360000 	    _ADR CHARQ
 2017 36c2 21290000 	    _ADR DUPP  
 2018 36c6 E7270000 	    _QBRAN 1f
 2018      D6360000 
 2019 36ce FB270000 	    _BRAN 2f
 2019      EE360000 
 2020 36d6 31290000 	1:  _ADR SWAP 
 2021 36da A7270000 	    _DOLIT '+'
 2021      2B000000 
 2022 36e2 99360000 	    _ADR CHARQ
 2023 36e6 11290000 	    _ADR DROP  
 2024 36ea 31290000 		_ADR SWAP 
 2025 36ee E7250000 	2:  _UNNEST 
 2026              	
 2027              	
ARM GAS  forth.s 			page 134


 2028              	/**********************************
 2029              	    INT?	( a -- n T | a F )
 2030              	 	parse string  at 'a' for 
 2031              		integer. Push a flag on TOS.
 2032              		integer form:
 2033              			[-]hex_digit+  | 
 2034              			$[-]hex_digit+ |
 2035              			%[-]bin_digit+ | 
 2036              			[-]dec_digit+ 
 2037              	**********************************/
 2038 36f2 D4350000 		_HEADER INTQ,4,"INT?"
 2038      04494E54 
 2038      3F00
 2039 36fc 504700BF 		_NEST
 2040              	// save BASE 	
 2041 3700 152E0000 		_ADR	BASE
 2042 3704 2D280000 		_ADR	AT
 2043 3708 9D280000 		_ADR	TOR
 2044 370c A7270000 		_DOLIT	0      // a 0 
 2044      00000000 
 2045 3714 45290000 		_ADR	OVER   // a 0 a 
 2046 3718 752D0000 		_ADR	COUNT  // a 0 a+ cnt 
 2047 371c 31290000 		_ADR    SWAP   
 2048 3720 A7270000 		_DOLIT  '$' 
 2048      24000000 
 2049 3728 99360000 		_ADR    CHARQ 
 2050 372c E7270000 		_QBRAN  0f 
 2050      40370000 
 2051              	// hexadecimal number 
 2052 3734 75350000 		_ADR    HEX
 2053 3738 FB270000 		_BRAN   1f 
 2053      58370000 
 2054 3740 A7270000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2054      25000000 
 2055 3748 99360000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2056 374c E7270000 		_QBRAN  2f
 2056      64370000 
 2057 3754 95350000 		_ADR	BIN 
 2058              	1:	// decrement cnt 
 2059 3758 31290000 	    _ADR	SWAP 
 2060 375c 512A0000 		_ADR	ONEM 
 2061 3760 31290000 		_ADR	SWAP  // -- a 0 cnt- a  
 2062              	2: // check if negative number 
 2063 3764 21290000 		_ADR    DUPP 
 2064 3768 B3360000 		_ADR    NEGQ 
 2065 376c 9D280000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2066 3770 21290000 		_ADR    DUPP 
 2067 3774 092B0000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2068 3778 F5290000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2069 377c E7270000 		_QBRAN  2f  
 2069      90370000 
 2070 3784 31290000 		_ADR    SWAP  // -- a 0 a cnt 
 2071 3788 512A0000 		_ADR    ONEM  // -- a 0 a cnt--
 2072 378c 31290000 		_ADR    SWAP   
 2073 3790 31290000 	2:  _ADR    SWAP 
 2074 3794 9D280000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2075 3798 A7270000 		_DOLIT  0
ARM GAS  forth.s 			page 135


 2075      00000000 
 2076 37a0 21290000 		_ADR	DUPP 
 2077 37a4 092B0000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2078 37a8 39360000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2079 37ac 11290000 		_ADR	DROP // a 0 d n 
 2080 37b0 31290000 		_ADR	SWAP  // a 0 n d 
 2081 37b4 59280000 		_ADR	RFROM // a 0 n d cnt  
 2082 37b8 6D2C0000 		_ADR	EQUAL // d == cnt ? 
 2083 37bc E7270000 		_QBRAN  5f // digits left, not an integer 
 2083      EC370000 
 2084 37c4 59280000 	2:	_ADR	RFROM  // sign 
 2085 37c8 E7270000 		_QBRAN  3f   // positive integer 
 2085      D4370000 
 2086 37d0 052C0000 		_ADR	NEGAT
 2087              	3:	
 2088 37d4 1D2B0000 		_ADR	NROT  // n a 0 
 2089 37d8 312B0000 		_ADR	DDROP // n  
 2090 37dc A7270000 		_DOLIT  -1    // n -1 
 2090      FFFFFFFF 
 2091 37e4 FB270000 		_BRAN   7f  
 2091      F4370000 
 2092 37ec 59280000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2093 37f0 312B0000 	    _ADR	DDROP 
 2094              	7: // restore BASE 
 2095 37f4 59280000 		_ADR	RFROM
 2096 37f8 152E0000 		_ADR	BASE
 2097 37fc 19280000 		_ADR	STORE
 2098 3800 E7250000 		_UNNEST
 2099              	
 2100              	
 2101              	/********************
 2102              	  console I/O
 2103              	********************/
 2104              	
 2105              	/**********************
 2106              	    SPACE	( -- )
 2107              	 	Send the blank 
 2108              		character to 
 2109              		the output device.
 2110              	************************/
 2111 3804 F6360000 		_HEADER SPACE,5,"SPACE"
 2111      05535041 
 2111      434500BF 
 2112 3810 504700BF 		_NEST
 2113 3814 A12A0000 		_ADR	BLANK
 2114 3818 B1260000 		_ADR	EMIT
 2115 381c E7250000 		_UNNEST
 2116              	
 2117              	/***************************
 2118              	    SPACES	( +n -- )
 2119              	 	Send n spaces to the 
 2120              		output device.
 2121              	****************************/
 2122 3820 08380000 		_HEADER SPACS,6,"SPACES"
 2122      06535041 
 2122      43455300 
 2123 382c 504700BF 		_NEST
ARM GAS  forth.s 			page 136


 2124 3830 A7270000 		_DOLIT	0
 2124      00000000 
 2125 3838 052D0000 		_ADR	MAX
 2126 383c 9D280000 		_ADR	TOR
 2127 3840 FB270000 		_BRAN	CHAR2
 2127      4C380000 
 2128              	CHAR1:
 2129 3848 11380000 		_ADR	SPACE
 2130              	CHAR2:
 2131 384c C9270000 		_DONXT	CHAR1
 2131      48380000 
 2132 3854 E7250000 		_UNNEST
 2133              	
 2134              	/***********************
 2135              	    TYPE	( b u -- )
 2136              	 	Output u characters 
 2137              		from b.
 2138              	************************/
 2139 3858 24380000 		_HEADER TYPEE,4,"TYPE"
 2139      04545950 
 2139      450000BF 
 2140 3864 504700BF 		_NEST
 2141 3868 9D280000 		_ADR  TOR   // ( a+1 -- R: u )
 2142 386c FB270000 		_BRAN	TYPE2
 2142      80380000 
 2143              	TYPE1:  
 2144 3874 752D0000 		_ADR  COUNT
 2145 3878 F9310000 		_ADR TCHAR
 2146 387c B1260000 		_ADR EMIT
 2147              	TYPE2:  
 2148 3880 C9270000 		_DONXT	TYPE1
 2148      74380000 
 2149 3888 11290000 		_ADR	DROP
 2150 388c E7250000 		_UNNEST
 2151              	
 2152              	/***************************
 2153              	    CR	  ( -- )
 2154              	 	Output a carriage return
 2155              		and a line feed.
 2156              	****************************/
 2157 3890 5C380000 		_HEADER CR,2,"CR"
 2157      02435200 
 2158 3898 504700BF 		_NEST
 2159 389c A7270000 		_DOLIT	CRR
 2159      0D000000 
 2160 38a4 B1260000 		_ADR	EMIT
 2161 38a8 A7270000 		_DOLIT	LF
 2161      0A000000 
 2162 38b0 B1260000 		_ADR	EMIT
 2163 38b4 E7250000 		_UNNEST
 2164              	
 2165              	/******************************************
 2166              	  do_$	( -- a )
 2167              	  Return the address of a compiled string.
 2168              	  adjust return address to skip over it.
 2169              	hidden word used by compiler. 
 2170              	******************************************/
ARM GAS  forth.s 			page 137


 2171              	DOSTR:
 2172 38b8 504700BF 		_NEST     
 2173              	/* compiled string address is 2 levels deep */
 2174 38bc 59280000 		_ADR	RFROM	// { -- a1 }
 2175 38c0 59280000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2176 38c4 21290000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2177 38c8 752D0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2178 38cc E5290000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2179 38d0 DD310000 		_ADR	ALGND	//  end of string
 2180              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2181 38d4 9D280000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2182 38d8 31290000 		_ADR	SWAP	//  count tugged
 2183 38dc 9D280000 		_ADR	TOR     //  ( -- a2) is string address
 2184 38e0 E7250000 		_UNNEST
 2185              	
 2186              	/******************************************
 2187              	    $"|	( -- a )
 2188              	 	Run time routine compiled by _". 
 2189              		Return address of a compiled string.
 2190              	hidden word used by compiler
 2191              	*****************************************/
 2192              	STRQP:
 2193 38e4 504700BF 		_NEST
 2194 38e8 B9380000 		_ADR	DOSTR
 2195 38ec E7250000 		_UNNEST			// force a call to dostr
 2196              	
 2197              	/*******************************
 2198              	    .$	( a -- )
 2199              	 	Run time routine of ." 
 2200              		Output a compiled string.
 2201              	hidden word used by compiler
 2202              	*******************************/
 2203              	DOTST:
 2204 38f0 504700BF 		_NEST
 2205 38f4 752D0000 		_ADR	COUNT // ( -- a+1 c )
 2206 38f8 65380000 		_ADR	TYPEE
 2207 38fc E7250000 		_UNNEST
 2208              	
 2209              	/**********************
 2210              	    ."|	( -- )
 2211              	 	Run time routine of ." 
 2212              		Output a compiled string.
 2213              	hidden word used by compiler
 2214              	*****************************/
 2215              	DOTQP:
 2216 3900 504700BF 		_NEST
 2217 3904 B9380000 		_ADR	DOSTR
 2218 3908 F1380000 		_ADR	DOTST
 2219 390c E7250000 		_UNNEST
 2220              	
 2221              	/******************************
 2222              	    .R	  ( n +n -- )
 2223              	 	Display an integer in a 
 2224              		field of n columns, 
 2225              		right justified.
 2226              	*******************************/
 2227 3910 94380000 		_HEADER DOTR,2,".R"
ARM GAS  forth.s 			page 138


 2227      022E5200 
 2228 3918 504700BF 		_NEST
 2229 391c 9D280000 		_ADR	TOR
 2230 3920 41350000 		_ADR	STRR
 2231 3924 59280000 		_ADR	RFROM
 2232 3928 45290000 		_ADR	OVER
 2233 392c F5290000 		_ADR	SUBB
 2234 3930 2D380000 		_ADR	SPACS
 2235 3934 65380000 		_ADR	TYPEE
 2236 3938 E7250000 		_UNNEST
 2237              	
 2238              	/*************************
 2239              	    U.R	 ( u +n -- )
 2240              	 	Display an unsigned 
 2241              		integer in n column, 
 2242              		right justified.
 2243              	***************************/
 2244 393c 14390000 		_HEADER UDOTR,3,"U.R"
 2244      03552E52 
 2245 3944 504700BF 		_NEST
 2246 3948 31290000 		_ADR	SWAP 
 2247 394c 1D300000 		_ADR 	STOD 
 2248 3950 092B0000 		_ADR	ROT 
 2249 3954 9D280000 		_ADR	TOR
 2250 3958 59340000 		_ADR	BDIGS
 2251 395c C5340000 		_ADR	DIGS
 2252 3960 21350000 		_ADR	EDIGS
 2253 3964 59280000 		_ADR	RFROM
 2254 3968 45290000 		_ADR	OVER
 2255 396c F5290000 		_ADR	SUBB
 2256 3970 2D380000 		_ADR	SPACS
 2257 3974 65380000 		_ADR	TYPEE
 2258 3978 E7250000 		_UNNEST
 2259              	
 2260              	/************************
 2261              	    U.	  ( u -- )
 2262              	 	Display an unsigned 
 2263              		integer in free format.
 2264              	***************************/
 2265 397c 40390000 		_HEADER UDOT,2,"U."
 2265      02552E00 
 2266 3984 504700BF 		_NEST
 2267 3988 1D300000 		_ADR 	STOD 
 2268 398c 59340000 		_ADR	BDIGS
 2269 3990 C5340000 		_ADR	DIGS
 2270 3994 21350000 		_ADR	EDIGS
 2271 3998 11380000 		_ADR	SPACE
 2272 399c 65380000 		_ADR	TYPEE
 2273 39a0 E7250000 		_UNNEST
 2274              	
 2275              	/************************
 2276              	    .	   ( w -- )
 2277              	 	Display an integer 
 2278              		in free format, 
 2279              		preceeded by a space.
 2280              	**************************/
 2281 39a4 80390000 		_HEADER DOT,1,"."
ARM GAS  forth.s 			page 139


 2281      012E00BF 
 2282 39ac 504700BF 		_NEST
 2283 39b0 152E0000 		_ADR	BASE
 2284 39b4 2D280000 		_ADR	AT
 2285 39b8 A7270000 		_DOLIT 10
 2285      0A000000 
 2286 39c0 8D290000 		_ADR	XORR			// ?decimal
 2287 39c4 E7270000 		_QBRAN	DOT1
 2287      D4390000 
 2288 39cc 85390000 		_ADR	UDOT
 2289 39d0 E7250000 		_UNNEST			// no,display unsigned
 2290              	DOT1:
 2291 39d4 41350000 	    _ADR	STRR
 2292 39d8 11380000 		_ADR	SPACE
 2293 39dc 65380000 		_ADR	TYPEE
 2294 39e0 E7250000 		_UNNEST			// yes, display signed
 2295              	
 2296              	/*************************
 2297              	   D. ( d -- )
 2298              	   display double integer 
 2299              	**************************/
 2300 39e4 A8390000 		_HEADER DDOT,2,"D."
 2300      02442E00 
 2301 39ec 504700BF 		_NEST 
 2302 39f0 21290000 		_ADR DUPP 
 2303 39f4 9D280000 		_ADR TOR 
 2304 39f8 8D2B0000 		_ADR DABS 
 2305 39fc 59340000 		_ADR BDIGS
 2306 3a00 C5340000 		_ADR DIGS 
 2307 3a04 59280000 		_ADR RFROM
 2308 3a08 F9340000 		_ADR SIGN 
 2309 3a0c 21350000 		_ADR EDIGS
 2310 3a10 11380000 		_ADR SPACE 
 2311 3a14 65380000 		_ADR TYPEE 
 2312 3a18 E7250000 		_UNNEST 
 2313              	
 2314              	
 2315              	/***********************
 2316              		H. ( w -- )
 2317              		display integer 
 2318              		in hexadecimal 
 2319              	*********************/
 2320 3a1c E8390000 		_HEADER HDOT,2,"H."
 2320      02482E00 
 2321 3a24 504700BF 		_NEST 
 2322 3a28 152E0000 		_ADR BASE
 2323 3a2c 2D280000 		_ADR AT 
 2324 3a30 31290000 		_ADR SWAP
 2325 3a34 75350000 		_ADR HEX
 2326 3a38 A7270000 		_DOLIT 0 
 2326      00000000 
 2327 3a40 59340000 		_ADR BDIGS
 2328 3a44 C5340000 		_ADR DIGS
 2329 3a48 21350000 		_ADR EDIGS
 2330 3a4c 11380000 		_ADR SPACE
 2331 3a50 A7270000 		_DOLIT '$'
 2331      24000000 
ARM GAS  forth.s 			page 140


 2332 3a58 B1260000 		_ADR EMIT 
 2333 3a5c 65380000 		_ADR TYPEE
 2334 3a60 152E0000 		_ADR BASE
 2335 3a64 19280000 		_ADR STORE  
 2336 3a68 E7250000 		_UNNEST 
 2337              	
 2338              	
 2339              	/***********************
 2340              	    ?	   ( a -- )
 2341              	 	Display the contents
 2342              		in a memory cell.
 2343              	*************************/
 2344 3a6c 203A0000 		_HEADER QUEST,1,"?"
 2344      013F00BF 
 2345 3a74 504700BF 		_NEST
 2346 3a78 2D280000 		_ADR	AT
 2347 3a7c AD390000 		_ADR	DOT
 2348 3a80 E7250000 		_UNNEST
 2349              	
 2350              	/**************
 2351              	  Parsing
 2352              	***************/
 2353              	
 2354              	/*********************************************
 2355              	    parse	( b u c -- b u delta //  string> )
 2356              	 	Scan word delimited by c. 
 2357              		Return found string and its offset.
 2358              	hidden word used by PARSE
 2359              	**********************************************/
 2360              	PARS:
 2361 3a84 504700BF 		_NEST
 2362 3a88 212E0000 		_ADR	TEMP
 2363 3a8c 19280000 		_ADR	STORE
 2364 3a90 45290000 		_ADR	OVER
 2365 3a94 9D280000 		_ADR	TOR
 2366 3a98 21290000 		_ADR	DUPP
 2367 3a9c E7270000 		_QBRAN	PARS8
 2367      983B0000 
 2368 3aa4 512A0000 		_ADR	ONEM
 2369 3aa8 212E0000 		_ADR	TEMP
 2370 3aac 2D280000 		_ADR	AT
 2371 3ab0 A12A0000 		_ADR	BLANK
 2372 3ab4 6D2C0000 		_ADR	EQUAL
 2373 3ab8 E7270000 		_QBRAN	PARS3
 2373      0C3B0000 
 2374 3ac0 9D280000 		_ADR	TOR
 2375              	PARS1:
 2376 3ac4 A12A0000 		_ADR	BLANK
 2377 3ac8 45290000 		_ADR	OVER
 2378 3acc 4D280000 		_ADR	CAT	 // skip leading blanks 
 2379 3ad0 F5290000 		_ADR	SUBB
 2380 3ad4 55290000 		_ADR	ZLESS
 2381 3ad8 F12B0000 		_ADR	INVER
 2382 3adc E7270000 		_QBRAN	PARS2
 2382      083B0000 
 2383 3ae4 412A0000 		_ADR	ONEP
 2384 3ae8 C9270000 		_DONXT	PARS1
ARM GAS  forth.s 			page 141


 2384      C43A0000 
 2385 3af0 59280000 		_ADR	RFROM
 2386 3af4 11290000 		_ADR	DROP
 2387 3af8 A7270000 		_DOLIT	0
 2387      00000000 
 2388 3b00 21290000 		_ADR	DUPP
 2389 3b04 E7250000 		_UNNEST
 2390              	PARS2:
 2391 3b08 59280000 		_ADR	RFROM
 2392              	PARS3:
 2393 3b0c 45290000 		_ADR	OVER
 2394 3b10 31290000 		_ADR	SWAP
 2395 3b14 9D280000 		_ADR	TOR
 2396              	PARS4:
 2397 3b18 212E0000 		_ADR	TEMP
 2398 3b1c 2D280000 		_ADR	AT
 2399 3b20 45290000 		_ADR	OVER
 2400 3b24 4D280000 		_ADR	CAT
 2401 3b28 F5290000 		_ADR	SUBB // scan for delimiter
 2402 3b2c 212E0000 		_ADR	TEMP
 2403 3b30 2D280000 		_ADR	AT
 2404 3b34 A12A0000 		_ADR	BLANK
 2405 3b38 6D2C0000 		_ADR	EQUAL
 2406 3b3c E7270000 		_QBRAN	PARS5
 2406      483B0000 
 2407 3b44 55290000 		_ADR	ZLESS
 2408              	PARS5:
 2409 3b48 E7270000 		_QBRAN	PARS6
 2409      6C3B0000 
 2410 3b50 412A0000 		_ADR	ONEP
 2411 3b54 C9270000 		_DONXT	PARS4
 2411      183B0000 
 2412 3b5c 21290000 		_ADR	DUPP
 2413 3b60 9D280000 		_ADR	TOR
 2414 3b64 FB270000 		_BRAN	PARS7
 2414      803B0000 
 2415              	PARS6:
 2416 3b6c 59280000 		_ADR	RFROM
 2417 3b70 11290000 		_ADR	DROP
 2418 3b74 21290000 		_ADR	DUPP
 2419 3b78 412A0000 		_ADR	ONEP
 2420 3b7c 9D280000 		_ADR	TOR
 2421              	PARS7:
 2422 3b80 45290000 		_ADR	OVER
 2423 3b84 F5290000 		_ADR	SUBB
 2424 3b88 59280000 		_ADR	RFROM
 2425 3b8c 59280000 		_ADR	RFROM
 2426 3b90 F5290000 		_ADR	SUBB
 2427 3b94 E7250000 		_UNNEST
 2428              	PARS8:
 2429 3b98 45290000 		_ADR	OVER
 2430 3b9c 59280000 		_ADR	RFROM
 2431 3ba0 F5290000 		_ADR	SUBB
 2432 3ba4 E7250000 		_UNNEST
 2433              	
 2434              	/************************************
 2435              	    PARSE	( c -- b u //  string> )
ARM GAS  forth.s 			page 142


 2436              	 	Scan input stream and return 
 2437              		counted string delimited by c.
 2438              	************************************/
 2439 3ba8 703A0000 		_HEADER PARSE,5,"PARSE"
 2439      05504152 
 2439      534500BF 
 2440 3bb4 504700BF 		_NEST
 2441 3bb8 9D280000 		_ADR	TOR
 2442 3bbc C9320000 		_ADR	TIB
 2443 3bc0 4D2E0000 		_ADR	INN
 2444 3bc4 2D280000 		_ADR	AT
 2445 3bc8 E5290000 		_ADR	PLUS			// current input buffer pointer
 2446 3bcc 652E0000 		_ADR	NTIB
 2447 3bd0 2D280000 		_ADR	AT
 2448 3bd4 4D2E0000 		_ADR	INN
 2449 3bd8 2D280000 		_ADR	AT
 2450 3bdc F5290000 		_ADR	SUBB			// remaining count
 2451 3be0 59280000 		_ADR	RFROM
 2452 3be4 853A0000 		_ADR	PARS
 2453 3be8 4D2E0000 		_ADR	INN
 2454 3bec 2D2D0000 		_ADR	PSTOR
 2455 3bf0 E7250000 		_UNNEST
 2456              	
 2457              	/*******************************
 2458              	    .(	  ( -- )
 2459              	 	Output following string 
 2460              		up to next ) .
 2461              	******************************/
 2462 3bf4 AC3B0000 		_HEADER DOTPR,2,".("
 2462      022E2800 
 2463 3bfc 504700BF 		_NEST
 2464 3c00 A7270000 		_DOLIT	')'
 2464      29000000 
 2465 3c08 B53B0000 		_ADR	PARSE
 2466 3c0c 65380000 		_ADR	TYPEE
 2467 3c10 E7250000 		_UNNEST
 2468              	
 2469              	/************************
 2470              	    (	   ( -- )
 2471              	 	Ignore following 
 2472              		string up to next )
 2473              		A comment.
 2474              	************************/
 2475 3c14 F83B0000 		_HEADER PAREN,IMEDD+1,"("
 2475      812800BF 
 2476 3c1c 504700BF 		_NEST
 2477 3c20 A7270000 		_DOLIT	')'
 2477      29000000 
 2478 3c28 B53B0000 		_ADR	PARSE
 2479 3c2c 312B0000 		_ADR	DDROP
 2480 3c30 E7250000 		_UNNEST
 2481              	
 2482              	/*******************
 2483              	    \	   ( -- )
 2484              	 	Ignore following 
 2485              		text till the 
 2486              		end of line.
ARM GAS  forth.s 			page 143


 2487              	********************/
 2488 3c34 183C0000 		_HEADER BKSLA,IMEDD+1,"\\"
 2488      815C00BF 
 2489 3c3c 504700BF 		_NEST
 2490 3c40 652E0000 		_ADR	NTIB
 2491 3c44 2D280000 		_ADR	AT
 2492 3c48 4D2E0000 		_ADR	INN
 2493 3c4c 19280000 		_ADR	STORE
 2494 3c50 E7250000 		_UNNEST
 2495              	
 2496              	/******************************
 2497              	    CHAR	( -- c )
 2498              	 	Parse next word and
 2499              		return its first character.
 2500              	*******************************/
 2501 3c54 383C0000 		_HEADER CHAR,4,"CHAR"
 2501      04434841 
 2501      520000BF 
 2502 3c60 504700BF 		_NEST
 2503 3c64 A12A0000 		_ADR	BLANK
 2504 3c68 B53B0000 		_ADR	PARSE
 2505 3c6c 11290000 		_ADR	DROP
 2506 3c70 4D280000 		_ADR	CAT
 2507 3c74 E7250000 		_UNNEST
 2508              	
 2509              	/**********************************
 2510              		[CHAR] ( -- c )
 2511              		immediate version of CHAR 
 2512              	**********************************/
 2513 3c78 583C0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2513      C65B4348 
 2513      41525D00 
 2514 3c84 504700BF 		_NEST 
 2515 3c88 613C0000 		_ADR CHAR
 2516 3c8c AD430000 		_ADR LITER 
 2517 3c90 E7250000 		_UNNEST 
 2518              	
 2519              	/**********************************
 2520              	    WORD	( c -- a //  string> )
 2521              	 	Parse a word from input stream
 2522              		and copy it to code dictionary.
 2523              	***********************************/
 2524 3c94 7C3C0000 		_HEADER WORDD,4,"WORD"
 2524      04574F52 
 2524      440000BF 
 2525 3ca0 504700BF 		_NEST
 2526 3ca4 B53B0000 		_ADR	PARSE
 2527 3ca8 91320000 		_ADR	HERE
 2528 3cac 812A0000 		_ADR	CELLP
 2529 3cb0 99330000 		_ADR	PACKS
 2530 3cb4 E7250000 		_UNNEST
 2531              	
 2532              	/********************************
 2533              	    TOKEN	( -- a //  string> )
 2534              	 	Parse a word from input 
 2535              		stream and copy it to 
 2536              		name dictionary.
ARM GAS  forth.s 			page 144


 2537              	*********************************/
 2538 3cb8 983C0000 		_HEADER TOKEN,5,"TOKEN"
 2538      05544F4B 
 2538      454E00BF 
 2539 3cc4 504700BF 		_NEST
 2540 3cc8 A12A0000 		_ADR	BLANK
 2541 3ccc A13C0000 		_ADR	WORDD
 2542 3cd0 B93E0000 		_ADR	UPPER 
 2543 3cd4 E7250000 		_UNNEST
 2544              	
 2545              	/**********************
 2546              	  Dictionary search
 2547              	***********************/
 2548              	
 2549              	/*************************
 2550              	    NAME>	( na -- ca )
 2551              	 	Return a code address
 2552              		given a name address.
 2553              	**************************/
 2554 3cd8 BC3C0000 		_HEADER NAMET,5,"NAME>"
 2554      054E414D 
 2554      453E00BF 
 2555 3ce4 504700BF 		_NEST
 2556 3ce8 752D0000 		_ADR	COUNT
 2557 3cec A7270000 		_DOLIT	0x1F
 2557      1F000000 
 2558 3cf4 65290000 		_ADR	ANDD
 2559 3cf8 E5290000 		_ADR	PLUS
 2560 3cfc DD310000 		_ADR	ALGND
 2561 3d00 E7250000 		_UNNEST
 2562              	
 2563              	/***************************************
 2564              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2565              	 	Compare u bytes in two strings. 
 2566              		Return 0 if identical.
 2567              	
 2568              	  Picatout 2020-12-01, 
 2569              	    Because of problem with .align 
 2570              		directive that doesn't fill 
 2571              		with zero's I had to change 
 2572              		the "SAME?" and "FIND" 
 2573              	 	words  to do a byte by byte comparison. 
 2574              	****************************************/
 2575 3d04 DC3C0000 		_HEADER SAMEQ,5,"SAME?"
 2575      0553414D 
 2575      453F00BF 
 2576 3d10 504700BF 		_NEST
 2577 3d14 9D280000 		_ADR	TOR
 2578 3d18 FB270000 		_BRAN	SAME2
 2578      5C3D0000 
 2579              	SAME1:
 2580 3d20 45290000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2581 3d24 89280000 		_ADR	RAT   // a1 a2 a1 u 
 2582 3d28 E5290000 		_ADR	PLUS  // a1 a2 a1+u 
 2583 3d2c 4D280000 		_ADR	CAT	   // a1 a2 c1    		
 2584 3d30 45290000 		_ADR	OVER  // a1 a2 c1 a2 
 2585 3d34 89280000 		_ADR	RAT    
ARM GAS  forth.s 			page 145


 2586 3d38 E5290000 		_ADR	PLUS    
 2587 3d3c 4D280000 		_ADR	CAT	  // a1 a2 c1 c2
 2588 3d40 F5290000 		_ADR	SUBB  
 2589 3d44 F52A0000 		_ADR	QDUP
 2590 3d48 E7270000 		_QBRAN	SAME2
 2590      5C3D0000 
 2591 3d50 59280000 		_ADR	RFROM
 2592 3d54 11290000 		_ADR	DROP
 2593 3d58 E7250000 		_UNNEST	// strings not equal
 2594              	SAME2:
 2595 3d5c C9270000 		_DONXT	SAME1
 2595      203D0000 
 2596 3d64 A7270000 		_DOLIT	0
 2596      00000000 
 2597 3d6c E7250000 		_UNNEST	// strings equal
 2598              	
 2599              	/***********************************
 2600              	    FIND	( a na -- ca na | a F )
 2601              	 	Search a vocabulary for a string.
 2602              		Return ca and na if succeeded.
 2603              	hidden word used by NAME?
 2604              	
 2605              	  Picatout 2020-12-01,  
 2606              		 Modified from original. 
 2607              	   See comment for word "SAME?" 
 2608              	************************************/
 2609              	FIND:
 2610 3d70 504700BF 		_NEST
 2611 3d74 31290000 		_ADR	SWAP			// na a	
 2612 3d78 752D0000 		_ADR	COUNT			// na a+1 count
 2613 3d7c 21290000 		_ADR	DUPP 
 2614 3d80 212E0000 		_ADR	TEMP
 2615 3d84 19280000 		_ADR	STORE			// na a+1 count 
 2616 3d88 9D280000 		_ADR  TOR		// na a+1  R: count  
 2617 3d8c 31290000 		_ADR	SWAP			// a+1 na
 2618              	FIND1:
 2619 3d90 21290000 		_ADR	DUPP			// a+1 na na
 2620 3d94 E7270000 		_QBRAN	FIND6	// end of vocabulary
 2620      E83D0000 
 2621 3d9c 21290000 		_ADR	DUPP			// a+1 na na
 2622 3da0 4D280000 		_ADR	CAT			// a+1 na name1
 2623 3da4 A7270000 		_DOLIT	MASKK
 2623      1FFFFFFF 
 2624 3dac 65290000 		_ADR	ANDD
 2625 3db0 89280000 		_ADR	RAT			// a+1 na name1 count 
 2626 3db4 8D290000 		_ADR	XORR			// a+1 na,  same length?
 2627 3db8 E7270000 		_QBRAN	FIND2
 2627      D03D0000 
 2628 3dc0 912A0000 		_ADR	CELLM			// a+1 la
 2629 3dc4 2D280000 		_ADR	AT			// a+1 next_na
 2630 3dc8 FB270000 		_BRAN	FIND1			// try next word
 2630      903D0000 
 2631              	FIND2:   
 2632 3dd0 412A0000 		_ADR	ONEP			// a+1 na+1
 2633 3dd4 212E0000 		_ADR	TEMP
 2634 3dd8 2D280000 		_ADR	AT			// a+1 na+1 count
 2635 3ddc 113D0000 		_ADR	SAMEQ		// a+1 na+1 ? 
ARM GAS  forth.s 			page 146


 2636              	FIND3:	
 2637 3de0 FB270000 		_BRAN	FIND4
 2637      003E0000 
 2638              	FIND6:	
 2639 3de8 59280000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2640 3dec 11290000 		_ADR	DROP			// a+1 0
 2641 3df0 31290000 		_ADR	SWAP			// 0 a+1
 2642 3df4 512A0000 		_ADR	ONEM			// 0 a
 2643 3df8 31290000 		_ADR	SWAP			// a 0 
 2644 3dfc E7250000 		_UNNEST			// return without a match
 2645              	FIND4:	
 2646 3e00 E7270000 		_QBRAN	FIND5			// a+1 na+1
 2646      1C3E0000 
 2647 3e08 512A0000 		_ADR	ONEM			// a+1 na
 2648 3e0c 912A0000 		_ADR	CELLM			// a+4 la
 2649 3e10 2D280000 		_ADR	AT			// a+1 next_na
 2650 3e14 FB270000 		_BRAN	FIND1			// compare next name
 2650      903D0000 
 2651              	FIND5:	
 2652 3e1c 59280000 		_ADR	RFROM			// a+1 na+1 count
 2653 3e20 11290000 		_ADR	DROP			// a+1 na+1
 2654 3e24 31290000 		_ADR	SWAP			// na+1 a+1
 2655 3e28 11290000 		_ADR	DROP			// na+1
 2656 3e2c 512A0000 		_ADR	ONEM			// na
 2657 3e30 21290000 		_ADR	DUPP			// na na
 2658 3e34 E53C0000 		_ADR	NAMET			// na ca
 2659 3e38 31290000 		_ADR	SWAP			// ca na
 2660 3e3c E7250000 		_UNNEST			//  return with a match
 2661              	
 2662              	/********************************
 2663              	    NAME?	( a -- ca na | a F )
 2664              	 	Search all context vocabularies 
 2665              		for a string.
 2666              	***********************************/
 2667 3e40 083D0000 		_HEADER NAMEQ,5,"NAME?"
 2667      054E414D 
 2667      453F00BF 
 2668 3e4c 504700BF 		_NEST
 2669 3e50 A92E0000 		_ADR	CNTXT
 2670 3e54 2D280000 		_ADR	AT
 2671 3e58 713D0000 		_ADR	FIND
 2672 3e5c E7250000 		_UNNEST
 2673              	
 2674              	/********************
 2675              	  console input
 2676              	********************/
 2677              	
 2678              	/****************************
 2679              		ASCIZ ( a -- a+ )
 2680              		convert counted string to 
 2681              		null terminated string 
 2682              		in pad.
 2683              	*****************************/
 2684 3e60 443E0000 		_HEADER ASCIZ,5,"ASCIZ" 
 2684      05415343 
 2684      495A00BF 
 2685 3e6c 504700BF 		_NEST 
ARM GAS  forth.s 			page 147


 2686 3e70 752D0000 		_ADR COUNT
 2687 3e74 21290000 		_ADR DUPP
 2688 3e78 9D280000 		_ADR TOR 
 2689 3e7c A9320000 		_ADR PAD 
 2690 3e80 31290000 		_ADR SWAP
 2691 3e84 31330000 		_ADR MOVE  
 2692 3e88 A9320000 		_ADR PAD 
 2693 3e8c 59280000 		_ADR RFROM
 2694 3e90 E5290000 		_ADR PLUS 
 2695 3e94 A7270000 		_DOLIT 0 
 2695      00000000 
 2696 3e9c 31290000 		_ADR SWAP  
 2697 3ea0 39280000 		_ADR CSTOR
 2698 3ea4 A9320000 		_ADR PAD   
 2699 3ea8 E7250000 		_UNNEST 
 2700              	
 2701              	/***********************
 2702              		UPPER (cstring -- cstring )
 2703              		convert to upper case in situ
 2704              	*******************************/
 2705 3eac 643E0000 		_HEADER UPPER,5,"UPPER"
 2705      05555050 
 2705      455200BF 
 2706 3eb8 504700BF 		_NEST 
 2707 3ebc 21290000 		_ADR DUPP 
 2708 3ec0 9D280000 		_ADR TOR 
 2709 3ec4 752D0000 		_ADR COUNT
 2710 3ec8 A7270000 		_DOLIT 0x1f
 2710      1F000000 
 2711 3ed0 65290000 		_ADR ANDD
 2712 3ed4 9D280000 		_ADR TOR 
 2713 3ed8 FB270000 		_BRAN 3f
 2713      2C3F0000 
 2714 3ee0 21290000 	1:  _ADR DUPP 
 2715 3ee4 752D0000 		_ADR COUNT 
 2716 3ee8 21290000 		_ADR DUPP 
 2717 3eec A7270000 		_DOLIT 'a'-1
 2717      60000000 
 2718 3ef4 ED2C0000 		_ADR GREAT
 2719 3ef8 E7270000 		_QBRAN 2f 
 2719      243F0000 
 2720 3f00 21290000 		_ADR DUPP 
 2721 3f04 A7270000 		_DOLIT 'z'+1 
 2721      7B000000 
 2722 3f0c BD2C0000 		_ADR LESS 
 2723 3f10 E7270000 		_QBRAN 2f 
 2723      243F0000 
 2724 3f18 A7270000 		_DOLIT 0x5f  
 2724      5F000000 
 2725 3f20 65290000 		_ADR ANDD
 2726 3f24 092B0000 	2:	_ADR ROT
 2727 3f28 39280000 		_ADR CSTOR
 2728 3f2c C9270000 	3:  _DONXT 1b
 2728      E03E0000 
 2729 3f34 11290000 		_ADR DROP 
 2730 3f38 59280000 		_ADR RFROM
 2731 3f3c E7250000 		_UNNEST 
ARM GAS  forth.s 			page 148


 2732              	
 2733              	/**************************************
 2734              	   BKSP  ( bot eot cur -- bot eot cur )
 2735              	   Move cursor left by one character.
 2736              	hidden word used by KTAP
 2737              	***************************************/
 2738              	BKSP:
 2739 3f40 504700BF 		_NEST
 2740 3f44 9D280000 		_ADR	TOR
 2741 3f48 45290000 		_ADR	OVER
 2742 3f4c 59280000 		_ADR	RFROM
 2743 3f50 31290000 		_ADR	SWAP
 2744 3f54 45290000 		_ADR	OVER
 2745 3f58 8D290000 		_ADR	XORR
 2746 3f5c E7270000 		_QBRAN	BACK1
 2746      883F0000 
 2747 3f64 A7270000 		_DOLIT	BKSPP
 2747      08000000 
 2748 3f6c B1260000 		_ADR	EMIT
 2749 3f70 512A0000 		_ADR	ONEM
 2750 3f74 A12A0000 		_ADR	BLANK
 2751 3f78 B1260000 		_ADR	EMIT
 2752 3f7c A7270000 		_DOLIT	BKSPP
 2752      08000000 
 2753 3f84 B1260000 		_ADR	EMIT
 2754              	BACK1:
 2755 3f88 E7250000 		  _UNNEST
 2756              	
 2757              	/****************************************
 2758              	   TAP	 ( bot eot cur c -- bot eot cur )
 2759              	   Accept and echo the key stroke 
 2760              	   and bump the cursor.
 2761              	hidden word used by KTAP 
 2762              	****************************************/
 2763              	TAP:
 2764 3f8c 504700BF 		_NEST
 2765 3f90 21290000 		_ADR	DUPP
 2766 3f94 B1260000 		_ADR	EMIT
 2767 3f98 45290000 		_ADR	OVER
 2768 3f9c 39280000 		_ADR	CSTOR
 2769 3fa0 412A0000 		_ADR	ONEP
 2770 3fa4 E7250000 		_UNNEST
 2771              	
 2772              	
 2773              	/*******************************************
 2774              	    kTAP	( bot eot cur c -- bot eot cur )
 2775              	 	Process a key stroke, CR or backspace.
 2776              	hidden word used by ACCEPT 
 2777              	*******************************************/
 2778              	KTAP:
 2779              	TTAP:
 2780 3fa8 504700BF 		_NEST
 2781 3fac 21290000 		_ADR	DUPP
 2782 3fb0 A7270000 		_DOLIT	CRR
 2782      0D000000 
 2783 3fb8 8D290000 		_ADR	XORR
 2784 3fbc E7270000 		_QBRAN  KTAP2
ARM GAS  forth.s 			page 149


 2784      EC3F0000 
 2785 3fc4 A7270000 		_DOLIT	BKSPP
 2785      08000000 
 2786 3fcc 8D290000 		_ADR	XORR
 2787 3fd0 E7270000 		_QBRAN	KTAP1
 2787      E43F0000 
 2788 3fd8 A12A0000 		_ADR	BLANK
 2789 3fdc 8D3F0000 		_ADR	TAP
 2790 3fe0 E7250000 		_UNNEST
 2791              	//	.word	0			// patch
 2792              	KTAP1:
 2793 3fe4 413F0000 		_ADR	BKSP
 2794 3fe8 E7250000 		_UNNEST
 2795              	KTAP2:
 2796 3fec 11290000 		_ADR	DROP
 2797 3ff0 31290000 		_ADR	SWAP
 2798 3ff4 11290000 		_ADR	DROP
 2799 3ff8 21290000 		_ADR	DUPP
 2800 3ffc E7250000 		_UNNEST
 2801              	
 2802              	/************************************
 2803              	    ACCEPT	( b u -- b u )
 2804              	 	Accept characters to input 
 2805              		buffer. Return with actual count.
 2806              	*************************************/
 2807 4000 B03E0000 		_HEADER ACCEP,6,"ACCEPT"
 2807      06414343 
 2807      45505400 
 2808 400c 504700BF 		_NEST
 2809 4010 45290000 		_ADR	OVER
 2810 4014 E5290000 		_ADR	PLUS
 2811 4018 45290000 		_ADR	OVER
 2812              	ACCP1:
 2813 401c 592B0000 		_ADR	DDUP
 2814 4020 8D290000 		_ADR	XORR
 2815 4024 E7270000 		_QBRAN	ACCP4
 2815      64400000 
 2816 402c 8D260000 		_ADR	KEY
 2817 4030 21290000 		_ADR	DUPP
 2818 4034 A12A0000 		_ADR	BLANK
 2819 4038 A7270000 		_DOLIT 127
 2819      7F000000 
 2820 4040 412F0000 		_ADR	WITHI
 2821 4044 E7270000 		_QBRAN	ACCP2
 2821      58400000 
 2822 404c 8D3F0000 		_ADR	TAP
 2823 4050 FB270000 		_BRAN	ACCP3
 2823      5C400000 
 2824              	ACCP2:
 2825 4058 A93F0000 		_ADR	KTAP
 2826              	ACCP3:	  
 2827 405c FB270000 		_BRAN	ACCP1
 2827      1C400000 
 2828              	ACCP4:
 2829 4064 11290000 		_ADR	DROP
 2830 4068 45290000 		_ADR	OVER
 2831 406c F5290000 		_ADR	SUBB
ARM GAS  forth.s 			page 150


 2832 4070 E7250000 		_UNNEST
 2833              	
 2834              	/*****************************
 2835              	    QUERY	( -- )
 2836              	 	Accept input stream 
 2837              		to terminal input buffer.
 2838              	******************************/
 2839 4074 04400000 		_HEADER QUERY,5,"QUERY"
 2839      05515545 
 2839      525900BF 
 2840 4080 504700BF 		_NEST
 2841 4084 C9320000 		_ADR	TIB
 2842 4088 A7270000 		_DOLIT 80
 2842      50000000 
 2843 4090 0D400000 		_ADR	ACCEP
 2844 4094 652E0000 		_ADR	NTIB
 2845 4098 19280000 		_ADR	STORE
 2846 409c 11290000 		_ADR	DROP
 2847 40a0 A7270000 		_DOLIT	0
 2847      00000000 
 2848 40a8 4D2E0000 		_ADR	INN
 2849 40ac 19280000 		_ADR	STORE
 2850 40b0 E7250000 		_UNNEST
 2851              	
 2852              	/********************
 2853              	  Error handling
 2854              	********************/
 2855              	
 2856              	/*********************
 2857              	    ABORT	( a -- )
 2858              	 	Reset data stack 
 2859              		and jump to QUIT.
 2860              	**********************/
 2861 40b4 78400000 		_HEADER ABORT,5,"ABORT"
 2861      0541424F 
 2861      525400BF 
 2862 40c0 504700BF 		_NEST
 2863              	ABORT1:
 2864 40c4 11380000 		_ADR	SPACE
 2865 40c8 752D0000 		_ADR	COUNT
 2866 40cc 65380000 		_ADR	TYPEE
 2867 40d0 A7270000 		_DOLIT	0X3F
 2867      3F000000 
 2868 40d8 B1260000 		_ADR	EMIT
 2869 40dc 99380000 		_ADR	CR
 2870 40e0 49420000 		_ADR	PRESE
 2871 40e4 FB270000 		_BRAN	QUIT
 2871      68420000 
 2872              	
 2873              	/*******************************
 2874              	    _abort"	( f -- )
 2875              	 	Run time routine of ABORT"
 2876              		Abort with a message.
 2877              	hidden used by compiler 
 2878              	********************************/
 2879              	ABORQ:
 2880 40ec 504700BF 		_NEST
ARM GAS  forth.s 			page 151


 2881 40f0 B9380000 		_ADR	DOSTR
 2882 40f4 31290000 		_ADR	SWAP 
 2883 40f8 E7270000 		_QBRAN	1f	// text flag
 2883      08410000 
 2884 4100 FB270000 		_BRAN	ABORT1
 2884      C4400000 
 2885              	1:
 2886 4108 11290000 		_ADR	DROP
 2887 410c E7250000 		_UNNEST			// drop error
 2888              	
 2889              	/************************
 2890              	  The text interpreter
 2891              	************************/
 2892              	
 2893              	/***************************
 2894              	    $INTERPRET  ( a -- )
 2895              	 	Interpret a word. 
 2896              		If failed, try to 
 2897              		convert it to an integer.
 2898              	******************************/
 2899 4110 B8400000 		_HEADER INTER,10,"$INTERPRET"
 2899      0A24494E 
 2899      54455250 
 2899      52455400 
 2900 4120 504700BF 		_NEST
 2901 4124 4D3E0000 		_ADR	NAMEQ
 2902 4128 F52A0000 		_ADR	QDUP	// ?defined
 2903 412c E7270000 		_QBRAN	INTE1
 2903      60410000 
 2904 4134 2D280000 		_ADR	AT
 2905 4138 A7270000 		_DOLIT	COMPO
 2905      40000000 
 2906 4140 65290000 		_ADR	ANDD	// ?compile only lexicon bits
 2907 4144 ED400000 		_ABORQ	13," compile only"
 2907      0D20636F 
 2907      6D70696C 
 2907      65206F6E 
 2907      6C7900BF 
 2908 4158 BD270000 		_ADR	EXECU
 2909 415c E7250000 		_UNNEST			// execute defined word
 2910              	INTE1:
 2911 4160 41210000 		_ADR	NUMBER 
 2912 4164 E7270000 		_QBRAN	INTE2
 2912      70410000 
 2913 416c E7250000 		_UNNEST
 2914              	INTE2:
 2915 4170 C1400000 		_ADR	ABORT	// error
 2916              	
 2917              	/******************************
 2918              	    [	   ( -- )
 2919              	 	Start the text interpreter.
 2920              	*******************************/
 2921 4174 14410000 		_HEADER LBRAC,IMEDD+1,"["
 2921      815B00BF 
 2922 417c 504700BF 		_NEST
 2923 4180 A7270000 		_DOLIT	INTER
 2923      20410000 
ARM GAS  forth.s 			page 152


 2924 4188 7D2E0000 		_ADR	TEVAL
 2925 418c 19280000 		_ADR	STORE
 2926 4190 E7250000 		_UNNEST
 2927              	
 2928              	/**********************
 2929              	    .OK	 ( -- )
 2930              	 	Display "ok" only 
 2931              		while interpreting.
 2932              	************************/
 2933 4194 78410000 		_HEADER DOTOK,3,".OK"
 2933      032E4F4B 
 2934 419c 504700BF 		_NEST
 2935 41a0 A7270000 		_DOLIT	INTER
 2935      20410000 
 2936 41a8 7D2E0000 		_ADR	TEVAL
 2937 41ac 2D280000 		_ADR	AT
 2938 41b0 6D2C0000 		_ADR	EQUAL
 2939 41b4 E7270000 		_QBRAN	DOTO1
 2939      C4410000 
 2940 41bc 01390000 		_DOTQP	3," ok"
 2940      03206F6B 
 2941              	DOTO1:
 2942 41c4 99380000 		_ADR	CR
 2943 41c8 E7250000 		_UNNEST
 2944              	
 2945              	/*************************
 2946              	    ?STACK	( -- )
 2947              	 	Abort if the data 
 2948              		stack underflows.
 2949              	************************/
 2950 41cc 98410000 		_HEADER QSTAC,6,"?STACK"
 2950      063F5354 
 2950      41434B00 
 2951 41d8 504700BF 		_NEST
 2952 41dc 45320000 		_ADR	DEPTH
 2953 41e0 55290000 		_ADR	ZLESS	// check only for underflow
 2954 41e4 ED400000 		_ABORQ	9,"underflow"
 2954      09756E64 
 2954      6572666C 
 2954      6F7700BF 
 2955 41f4 E7250000 		_UNNEST
 2956              	
 2957              	/*******************
 2958              	    EVAL	( -- )
 2959              	 	Interpret the 
 2960              		input stream.
 2961              	*******************/
 2962 41f8 D0410000 		_HEADER EVAL,4,"EVAL"
 2962      04455641 
 2962      4C0000BF 
 2963 4204 504700BF 		_NEST
 2964              	EVAL1:
 2965 4208 C53C0000 	    _ADR	TOKEN
 2966 420c 21290000 		_ADR	DUPP
 2967 4210 4D280000 		_ADR	CAT	// ?input stream empty
 2968 4214 E7270000 		_QBRAN	EVAL2
 2968      30420000 
ARM GAS  forth.s 			page 153


 2969 421c 7D2E0000 		_ADR	TEVAL
 2970 4220 E1320000 		_ADR	ATEXE
 2971 4224 D9410000 		_ADR	QSTAC	// evaluate input, check stack
 2972 4228 FB270000 		_BRAN	EVAL1
 2972      08420000 
 2973              	EVAL2:
 2974 4230 11290000 		_ADR	DROP
 2975 4234 9D410000 		_ADR	DOTOK
 2976 4238 E7250000 		_UNNEST	// prompt
 2977              	
 2978              	/**********************************
 2979              	    PRESET	( -- )
 2980              	 	Reset data stack pointer 
 2981              		and the terminal input buffer.
 2982              	**********************************/
 2983 423c FC410000 		_HEADER PRESE,6,"PRESET"
 2983      06505245 
 2983      53455400 
 2984 4248 504700BF 		_NEST 
 2985 424c A7270000 		_DOLIT SPP 
 2985      80FE0120 
 2986 4254 DD280000 		_ADR SPSTOR 
 2987 4258 E7250000 		_UNNEST 
 2988              	
 2989              	/*********************
 2990              	    QUIT	( -- )
 2991              	 	Reset return stack 
 2992              		pointer and start 
 2993              		text interpreter.
 2994              	***********************/
 2995 425c 40420000 		_HEADER QUIT,4,"QUIT"
 2995      04515549 
 2995      540000BF 
 2996 4268 A7270000 		_DOLIT RPP 
 2996      00FF0120 
 2997 4270 CD280000 		_ADR RPSTOR 
 2998              	QUIT1:
 2999 4274 7D410000 		_ADR	LBRAC			// start interpretation
 3000              	QUIT2:
 3001 4278 81400000 		_ADR	QUERY			// get input
 3002 427c 05420000 		_ADR	EVAL
 3003 4280 FB270000 		_BRAN	QUIT2	// continue till error
 3003      78420000 
 3004              	
 3005              	/***************************
 3006              		FORGET ( <string> -- )
 3007              		forget all definition 
 3008              		starting at <string>
 3009              	****************************/
 3010 4288 60420000 		_HEADER FORGET,6,"FORGET"
 3010      06464F52 
 3010      47455400 
 3011 4294 504700BF 		_NEST 
 3012 4298 C53C0000 		_ADR TOKEN 
 3013 429c 21290000 		_ADR DUPP 
 3014 42a0 E7270000 		_QBRAN 9f 
 3014      DC420000 
ARM GAS  forth.s 			page 154


 3015 42a8 4D3E0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3016 42ac F52A0000 		_ADR QDUP 
 3017 42b0 E7270000 		_QBRAN 8f
 3017      D8420000 
 3018 42b8 912A0000 		_ADR CELLM // ( ca la )
 3019 42bc 21290000 		_ADR DUPP 
 3020 42c0 BD2E0000 		_ADR CPP   
 3021 42c4 19280000 		_ADR STORE
 3022 42c8 2D280000 		_ADR AT 
 3023 42cc E92E0000 		_ADR LAST 
 3024 42d0 19280000 		_ADR STORE
 3025 42d4 31480000 		_ADR OVERT 
 3026 42d8 11290000 	8:  _ADR DROP 
 3027 42dc E7250000 	9:	_UNNEST 
 3028              	
 3029              		.p2align 2 
 3030              	
 3031              	/*****************
 3032              	  The compiler
 3033              	******************/
 3034              	
 3035              	/**************************************
 3036              	    '	   ( -- ca )
 3037              	 	Search context vocabularies 
 3038              		for the next word in input stream.
 3039              	***************************************/
 3040 42e0 8C420000 		_HEADER TICK,1,"'"
 3040      012700BF 
 3041 42e8 504700BF 		_NEST
 3042 42ec C53C0000 		_ADR	TOKEN
 3043 42f0 4D3E0000 		_ADR	NAMEQ	// ?defined
 3044 42f4 E7270000 		_QBRAN	TICK1
 3044      00430000 
 3045 42fc E7250000 		_UNNEST	// yes, push code address
 3046              	TICK1:	
 3047 4300 C1400000 		_ADR ABORT	// no, error
 3048              	
 3049              	/***********************
 3050              	    ALLOT	( n -- )
 3051              	 	Allocate n bytes to 
 3052              		the ram area.
 3053              	************************/
 3054 4304 E4420000 		_HEADER ALLOT,5,"ALLOT"
 3054      05414C4C 
 3054      4F5400BF 
 3055 4310 504700BF 		_NEST
 3056 4314 BD2E0000 		_ADR	CPP
 3057 4318 2D2D0000 		_ADR	PSTOR
 3058 431c E7250000 		_UNNEST			// adjust code pointer
 3059              	
 3060              	/******************************
 3061              	    ,	   ( w -- )
 3062              	 	Compile an integer 
 3063              		into the code dictionary.
 3064              	******************************/
 3065 4320 08430000 		_HEADER COMMA,1,","
 3065      012C00BF 
ARM GAS  forth.s 			page 155


 3066 4328 504700BF 		_NEST
 3067 432c 91320000 		_ADR	HERE
 3068 4330 21290000 		_ADR	DUPP
 3069 4334 812A0000 		_ADR	CELLP	// cell boundary
 3070 4338 BD2E0000 		_ADR	CPP
 3071 433c 19280000 		_ADR	STORE
 3072 4340 19280000 		_ADR	STORE
 3073 4344 E7250000 		_UNNEST	// adjust code pointer, compile
 3074              		.p2align 2 
 3075              	
 3076              	/************************************
 3077              	    [COMPILE]   ( -- //  string> )
 3078              	 	Compile the next immediate word 
 3079              		into code dictionary.
 3080              	*************************************/
 3081 4348 24430000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3081      895B434F 
 3081      4D50494C 
 3081      455D00BF 
 3082 4358 504700BF 		_NEST
 3083 435c E9420000 		_ADR	TICK
 3084 4360 29430000 		_ADR	COMMA
 3085 4364 E7250000 		_UNNEST
 3086              	
 3087              	/****************************
 3088              	    COMPILE	( -- )
 3089              	 	Compile the next address 
 3090              		in colon list to code 
 3091              		dictionary.
 3092              	*******************************/
 3093 4368 4C430000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3093      47434F4D 
 3093      50494C45 
 3094 4374 504700BF 		_NEST
 3095 4378 59280000 		_ADR	RFROM
 3096 437c 21290000 		_ADR	DUPP 
 3097 4380 2D280000 		_ADR	AT
 3098 4384 A7270000 		_DOLIT 1 
 3098      01000000 
 3099 438c 79290000 		_ADR	ORR 
 3100 4390 29430000 		_ADR	COMMA 
 3101 4394 812A0000 		_ADR	CELLP 
 3102 4398 9D280000 		_ADR	TOR 
 3103 439c E7250000 		_UNNEST	// adjust return address
 3104              	
 3105              	/*************************
 3106              	    LITERAL	( w -- )
 3107              	 	Compile tos to code 
 3108              		dictionary as an 
 3109              		integer literal.
 3110              	***************************/
 3111 43a0 6C430000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3111      874C4954 
 3111      4552414C 
 3112 43ac 504700BF 		_NEST
 3113 43b0 A7270000 		_COMPI	DOLIT
 3113      A6270000 
ARM GAS  forth.s 			page 156


 3113      8D480000 
 3114 43bc 29430000 		_ADR	COMMA
 3115 43c0 E7250000 		_UNNEST
 3116              	
 3117              	/********************
 3118              	    $,"	( -- )
 3119              	 	Compile a literal 
 3120              		string up to next " .
 3121              	hidden word 
 3122              	************************/
 3123              	STRCQ:
 3124 43c4 504700BF 		_NEST
 3125 43c8 A7270000 		_DOLIT -4
 3125      FCFFFFFF 
 3126 43d0 BD2E0000 		_ADR	CPP
 3127 43d4 2D2D0000 		_ADR	PSTOR
 3128 43d8 A7270000 		_DOLIT	'\"'
 3128      22000000 
 3129 43e0 A13C0000 		_ADR	WORDD			// move word to code dictionary
 3130 43e4 752D0000 		_ADR	COUNT
 3131 43e8 E5290000 		_ADR	PLUS
 3132 43ec DD310000 		_ADR	ALGND			// calculate aligned end of string
 3133 43f0 BD2E0000 		_ADR	CPP
 3134 43f4 19280000 		_ADR	STORE
 3135 43f8 E7250000 		_UNNEST 			// adjust the code pointer
 3136              	
 3137              	/*******************
 3138              	   Structures
 3139              	*******************/
 3140              	
 3141              	/*************************
 3142              	    FOR	 ( -- a )
 3143              	 	Start a FOR-NEXT loop 
 3144              		structure in a colon 
 3145              		definition.
 3146              	**************************/
 3147 43fc A4430000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3147      C3464F52 
 3148 4404 504700BF 		_NEST
 3149 4408 A7270000 		_COMPI	TOR
 3149      9C280000 
 3149      8D480000 
 3150 4414 91320000 		_ADR	HERE
 3151 4418 E7250000 		_UNNEST
 3152              	
 3153              	/********************************
 3154              		DO ( limit start -- )
 3155              		initialise a DO...LOOP 
 3156              		or DO...+LOOP 
 3157              	********************************/
 3158 441c 00440000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3158      C2444F00 
 3159 4424 504700BF 		_NEST
 3160 4428 A7270000 		_COMPI SWAP
 3160      30290000 
 3160      8D480000 
 3161 4434 A7270000 		_COMPI TOR 
ARM GAS  forth.s 			page 157


 3161      9C280000 
 3161      8D480000 
 3162 4440 A7270000 		_COMPI TOR 
 3162      9C280000 
 3162      8D480000 
 3163 444c 91320000 		_ADR HERE 
 3164 4450 E7250000 		_UNNEST 
 3165              	
 3166              	DOPLOOP: // ( n -- R: counter limit )
 3167 4454 B8E80300 		ldmfd RSP!,{T0,T1}
 3168 4458 3044     		add T0,TOS 
 3169 445a 28E90300 		stmfd RSP!,{T0,T1}
 3170 445e 8842     		cmp T0,T1 
 3171 4460 05D4     		bmi 9f 
 3172 4462 08F10808 		add RSP,#8
 3173 4466 0CF1040C 		add IP,#4
 3174 446a FEF7B9B8 		_NEXT 
 3175 446e DCF800C0 	9:  ldr IP,[IP]
 3176 4472 FEF7B5B8 		_NEXT 
 3177              		
 3178              	/***************************
 3179              		+LOOP ( a -- )
 3180              		increment counter 
 3181              		end loop if countr>limit
 3182              	****************************/
 3183 4476 20440000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3183      C52B4C4F 
 3183      4F50
 3184 4480 504700BF 		_NEST 
 3185 4484 A7270000 		_COMPI DOPLOOP 
 3185      54440000 
 3185      8D480000 
 3186 4490 29430000 		_ADR COMMA
 3187 4494 E7250000 		_UNNEST 
 3188              	
 3189              	DOLOOP: // ( -- R: counter limit )
 3190 4498 D8F80000 		ldr T0,[RSP]
 3191 449c 00F10100 		add T0,#1
 3192 44a0 C8F80000 		str T0,[RSP]
 3193 44a4 D8F80410 		ldr T1,[RSP,#4]
 3194 44a8 8842     		cmp T0,T1 
 3195 44aa 05D4     		bmi 9f
 3196 44ac 08F10808 		add RSP,#8  // counter and limit  
 3197 44b0 0CF1040C 		add IP,IP,#4 // skip loop address 
 3198 44b4 FEF794B8 		_NEXT 
 3199 44b8 DCF800C0 	9:  ldr IP,[IP]
 3200 44bc FEF790B8 		_NEXT 
 3201              	
 3202              	
 3203              	/********************************
 3204              		LOOP ( a -- )
 3205              		increment counter 
 3206              		end loop if >= limit 
 3207              	*********************************/
 3208 44c0 7A440000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3208      C44C4F4F 
 3208      500000BF 
ARM GAS  forth.s 			page 158


 3209 44cc 504700BF 		_NEST 
 3210 44d0 A7270000 		_COMPI DOLOOP
 3210      98440000 
 3210      8D480000 
 3211 44dc 29430000 		_ADR COMMA 
 3212 44e0 E7250000 		_UNNEST 
 3213              	
 3214              	
 3215              	/**********************
 3216              	    BEGIN	( -- a )
 3217              	 	Start an infinite 
 3218              		or indefinite 
 3219              		loop structure.
 3220              	************************/
 3221 44e4 C4440000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3221      C5424547 
 3221      494E00BF 
 3222 44f0 504700BF 		_NEST
 3223 44f4 91320000 		_ADR	HERE
 3224 44f8 E7250000 		_UNNEST
 3225              		.p2align 2 
 3226              	
 3227              	/********************
 3228              	    NEXT	( a -- )
 3229              	 	Terminate a FOR-NEXT
 3230              		loop structure.
 3231              	**************************/
 3232 44fc E8440000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3232      C44E4558 
 3232      540000BF 
 3233 4508 504700BF 		_NEST
 3234 450c A7270000 		_COMPI	DONXT
 3234      C8270000 
 3234      8D480000 
 3235 4518 29430000 		_ADR	COMMA
 3236 451c E7250000 		_UNNEST
 3237              	
 3238              	/***************************
 3239              		I ( -- n )
 3240              		stack for loop counter 
 3241              	***************************/
 3242 4520 00450000 		_HEADER I,1+COMPO,"I"
 3242      414900BF 
 3243 4528 47F8046D 		_PUSH 
 3244 452c D8F80060 		ldr TOS,[RSP]
 3245 4530 FEF756B8 		_NEXT 
 3246              	
 3247              	/****************************
 3248              		J ( -- n )
 3249              		stack outer loop counter 
 3250              	****************************/
 3251 4534 24450000 		_HEADER J,1,"J"
 3251      014A00BF 
 3252 453c 47F8046D 		_PUSH 
 3253 4540 D8F80460 		ldr TOS,[RSP,#4]
 3254 4544 FEF74CB8 		_NEXT 
 3255              	
ARM GAS  forth.s 			page 159


 3256              	/**********************
 3257              	    UNTIL	( a -- )
 3258              	 	Terminate a BEGIN-UNTIL
 3259              		indefinite loop structure.
 3260              	******************************/
 3261 4548 38450000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3261      C5554E54 
 3261      494C00BF 
 3262 4554 504700BF 		_NEST
 3263 4558 A7270000 		_COMPI	QBRAN
 3263      E6270000 
 3263      8D480000 
 3264 4564 29430000 		_ADR	COMMA
 3265 4568 E7250000 		_UNNEST
 3266              	
 3267              	/**********************
 3268              	    AGAIN	( a -- )
 3269              	 	Terminate a BEGIN-AGAIN
 3270              		infinite loop structure.
 3271              	*****************************/
 3272 456c 4C450000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3272      C5414741 
 3272      494E00BF 
 3273 4578 504700BF 		_NEST
 3274 457c A7270000 		_COMPI	BRAN
 3274      FA270000 
 3274      8D480000 
 3275 4588 29430000 		_ADR	COMMA
 3276 458c E7250000 		_UNNEST
 3277              	
 3278              	/************************
 3279              	    IF	  ( -- A )
 3280              	 	Begin a conditional
 3281              		branch structure.
 3282              	**************************/
 3283 4590 70450000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3283      C2494600 
 3284 4598 504700BF 		_NEST
 3285 459c A7270000 		_COMPI	QBRAN
 3285      E6270000 
 3285      8D480000 
 3286 45a8 91320000 		_ADR	HERE
 3287 45ac A7270000 		_DOLIT	4
 3287      04000000 
 3288 45b4 BD2E0000 		_ADR	CPP
 3289 45b8 2D2D0000 		_ADR	PSTOR
 3290 45bc E7250000 		_UNNEST
 3291              	
 3292              	/*************************
 3293              	    AHEAD	( -- A )
 3294              	 	Compile a forward 
 3295              		branch instruction.
 3296              	*************************/
 3297 45c0 94450000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3297      C5414845 
 3297      414400BF 
 3298 45cc 504700BF 		_NEST
ARM GAS  forth.s 			page 160


 3299 45d0 A7270000 		_COMPI	BRAN
 3299      FA270000 
 3299      8D480000 
 3300 45dc 91320000 		_ADR	HERE
 3301 45e0 A7270000 		_DOLIT	4
 3301      04000000 
 3302 45e8 BD2E0000 		_ADR	CPP
 3303 45ec 2D2D0000 		_ADR	PSTOR
 3304 45f0 E7250000 		_UNNEST
 3305              	
 3306              	/**************************
 3307              	    REPEAT	( A a -- )
 3308              	 	Terminate a BEGIN-WHILE-REPEAT
 3309              		indefinite loop.
 3310              	**********************************/
 3311 45f4 C4450000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3311      C6524550 
 3311      45415400 
 3312 4600 504700BF 		_NEST
 3313 4604 79450000 		_ADR	AGAIN
 3314 4608 91320000 		_ADR	HERE
 3315 460c 31290000 		_ADR	SWAP
 3316 4610 19280000 		_ADR	STORE
 3317 4614 E7250000 		_UNNEST
 3318              	
 3319              	/*********************
 3320              	    THEN	( A -- )
 3321              	 	Terminate a conditional
 3322              		branch structure.
 3323              	*****************************/
 3324 4618 F8450000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3324      C4544845 
 3324      4E0000BF 
 3325 4624 504700BF 		_NEST
 3326 4628 91320000 		_ADR	HERE
 3327 462c 31290000 		_ADR	SWAP
 3328 4630 19280000 		_ADR	STORE
 3329 4634 E7250000 		_UNNEST
 3330              	
 3331              	/***************************
 3332              	    AFT	 ( a -- a A )
 3333              	 	Jump to THEN in a 
 3334              		FOR-AFT-THEN-NEXT loop 
 3335              		the first time through.
 3336              	*****************************/
 3337 4638 1C460000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3337      C3414654 
 3338 4640 504700BF 		_NEST
 3339 4644 11290000 		_ADR	DROP
 3340 4648 CD450000 		_ADR	AHEAD
 3341 464c F1440000 		_ADR	BEGIN
 3342 4650 31290000 		_ADR	SWAP
 3343 4654 E7250000 		_UNNEST
 3344              	
 3345              	/**********************
 3346              	    ELSE	( A -- A )
 3347              	 	Start the false 
ARM GAS  forth.s 			page 161


 3348              		clause in an 
 3349              		IF-ELSE-THEN structure.
 3350              	****************************/
 3351 4658 3C460000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3351      C4454C53 
 3351      450000BF 
 3352 4664 504700BF 		_NEST
 3353 4668 CD450000 		_ADR	AHEAD
 3354 466c 31290000 		_ADR	SWAP
 3355 4670 25460000 		_ADR	THENN
 3356 4674 E7250000 		_UNNEST
 3357              	
 3358              	/**************************
 3359              	    WHILE	( a -- A a )
 3360              	 	Conditional branch out 
 3361              		of a BEGIN-WHILE-REPEAT loop.
 3362              	*********************************/
 3363 4678 5C460000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3363      C5574849 
 3363      4C4500BF 
 3364 4684 504700BF 		_NEST
 3365 4688 99450000 		_ADR	IFF
 3366 468c 31290000 		_ADR	SWAP
 3367 4690 E7250000 		_UNNEST
 3368              	
 3369              	/***********************************
 3370              	    ABORT"	( -- //  string> )
 3371              	 	Conditional abort with an 
 3372              		error message.
 3373              	***********************************/
 3374 4694 7C460000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3374      8641424F 
 3374      52542200 
 3375 46a0 504700BF 		_NEST
 3376 46a4 A7270000 		_COMPI	ABORQ
 3376      EC400000 
 3376      8D480000 
 3377 46b0 C5430000 		_ADR	STRCQ
 3378 46b4 E7250000 		_UNNEST
 3379              	
 3380              	/******************************
 3381              	    $"	( -- //  string> )
 3382              	 	Compile an inline 
 3383              		word literal.
 3384              	*****************************/
 3385 46b8 98460000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3385      C2242200 
 3386 46c0 504700BF 		_NEST
 3387 46c4 A7270000 		_COMPI	STRQP
 3387      E4380000 
 3387      8D480000 
 3388 46d0 C5430000 		_ADR	STRCQ
 3389 46d4 E7250000 		_UNNEST
 3390              	
 3391              	/******************************
 3392              	    ."	( -- //  string> )
 3393              	 	Compile an inline word
ARM GAS  forth.s 			page 162


 3394              		literal to be typed out 
 3395              		at run time.
 3396              	*******************************/
 3397 46d8 BC460000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3397      C22E2200 
 3398 46e0 504700BF 		_NEST
 3399 46e4 A7270000 		_COMPI	DOTQP
 3399      00390000 
 3399      8D480000 
 3400 46f0 C5430000 		_ADR	STRCQ
 3401 46f4 E7250000 		_UNNEST
 3402              	
 3403              	/*********************
 3404              	  Name compiler
 3405              	***********************/
 3406              	
 3407              	/**************************
 3408              	    ?UNIQUE	( a -- a )
 3409              	 	Display a warning 
 3410              		message if the word 
 3411              		already exists.
 3412              	**************************/
 3413 46f8 DC460000 		_HEADER UNIQU,7,"?UNIQUE"
 3413      073F554E 
 3413      49515545 
 3414 4704 504700BF 		_NEST
 3415 4708 21290000 		_ADR	DUPP
 3416 470c 4D3E0000 		_ADR	NAMEQ			// ?name exists
 3417 4710 E7270000 		_QBRAN	UNIQ1	// redefinitions are OK
 3417      30470000 
 3418 4718 01390000 		_DOTQP	7," reDef "		// but warn the user
 3418      07207265 
 3418      44656620 
 3419 4724 45290000 		_ADR	OVER
 3420 4728 752D0000 		_ADR	COUNT
 3421 472c 65380000 		_ADR	TYPEE			// just in case its not planned
 3422              	UNIQ1:
 3423 4730 11290000 		_ADR	DROP
 3424 4734 E7250000 		_UNNEST
 3425              	
 3426              	/***********************
 3427              	    $,n	 ( na -- )
 3428              	 	Build a new dictionary 
 3429              		name using the data at na.
 3430              	hidden word 
 3431              	*******************************/
 3432              	SNAME:
 3433 4738 504700BF 		_NEST
 3434 473c 21290000 		_ADR	DUPP			//  na na
 3435 4740 4D280000 		_ADR	CAT			//  ?null input
 3436 4744 E7270000 		_QBRAN	SNAM1
 3436      80470000 
 3437 474c 05470000 		_ADR	UNIQU			//  na
 3438 4750 E92E0000 		_ADR	LAST			//  na last
 3439 4754 2D280000 		_ADR	AT			//  na la
 3440 4758 29430000 		_ADR	COMMA			//  na
 3441 475c 21290000 		_ADR	DUPP			//  na na
ARM GAS  forth.s 			page 163


 3442 4760 E92E0000 		_ADR	LAST			//  na na last
 3443 4764 19280000 		_ADR	STORE			//  na , save na for vocabulary link
 3444 4768 752D0000 		_ADR	COUNT			//  na+1 count
 3445 476c E5290000 		_ADR	PLUS			//  na+1+count
 3446 4770 DD310000 		_ADR	ALGND			//  word boundary
 3447 4774 BD2E0000 		_ADR	CPP
 3448 4778 19280000 		_ADR	STORE			//  top of dictionary now
 3449 477c E7250000 		_UNNEST
 3450              	SNAM1:
 3451 4780 E5380000 		_ADR	STRQP
 3452 4784 07       		.byte	7
 3453 4785 206E616D 		.ascii " name? "
 3453      653F20
 3454 478c C1400000 		_ADR	ABORT
 3455              	
 3456              	/************************
 3457              	    $COMPILE	( a -- )
 3458              	 	Compile next word to 
 3459              		code dictionary as 
 3460              		a token or literal.
 3461              	**************************/
 3462 4790 FC460000 		_HEADER SCOMP,8,"$COMPILE"
 3462      0824434F 
 3462      4D50494C 
 3462      450000BF 
 3463 47a0 504700BF 		_NEST
 3464 47a4 4D3E0000 		_ADR	NAMEQ
 3465 47a8 F52A0000 		_ADR	QDUP	// defined?
 3466 47ac E7270000 		_QBRAN	SCOM2
 3466      DC470000 
 3467 47b4 2D280000 		_ADR	AT
 3468 47b8 A7270000 		_DOLIT	IMEDD
 3468      80000000 
 3469 47c0 65290000 		_ADR	ANDD	// immediate?
 3470 47c4 E7270000 		_QBRAN	SCOM1
 3470      D4470000 
 3471 47cc BD270000 		_ADR	EXECU
 3472 47d0 E7250000 		_UNNEST			// it's immediate, execute
 3473              	SCOM1:
 3474 47d4 8D480000 		_ADR	CALLC			// it's not immediate, compile
 3475 47d8 E7250000 		_UNNEST	
 3476              	SCOM2:
 3477 47dc 41210000 		_ADR	NUMBER 
 3478 47e0 E7270000 		_QBRAN	SCOM3
 3478      F0470000 
 3479 47e8 AD430000 		_ADR	LITER
 3480 47ec E7250000 		_UNNEST			// compile number as integer
 3481              	SCOM3: // compilation abort 
 3482 47f0 F9470000 		_ADR COLON_ABORT 
 3483 47f4 C1400000 		_ADR	ABORT			// error
 3484              	
 3485              	/********************************
 3486              	 before aborting a compilation 
 3487              	 reset HERE and LAST
 3488              	 to previous values. 
 3489              	*******************************/
 3490              	COLON_ABORT:
ARM GAS  forth.s 			page 164


 3491 47f8 504700BF 		_NEST 
 3492 47fc E92E0000 		_ADR LAST 
 3493 4800 2D280000 		_ADR AT 
 3494 4804 912A0000 		_ADR CELLM 
 3495 4808 21290000 		_ADR DUPP 
 3496 480c BD2E0000 		_ADR CPP  
 3497 4810 19280000 		_ADR STORE 
 3498 4814 2D280000 		_ADR AT 
 3499 4818 E92E0000 		_ADR LAST 
 3500 481c 19280000 		_ADR STORE 
 3501 4820 E7250000 		_UNNEST 
 3502              	
 3503              	/*********************
 3504              	    OVERT	( -- )
 3505              	 	Link a new word 
 3506              		into the current 
 3507              		vocabulary.
 3508              	**********************/
 3509 4824 94470000 		_HEADER OVERT,5,"OVERT"
 3509      054F5645 
 3509      525400BF 
 3510 4830 504700BF 		_NEST
 3511 4834 E92E0000 		_ADR	LAST
 3512 4838 2D280000 		_ADR	AT
 3513 483c A92E0000 		_ADR	CNTXT
 3514 4840 19280000 		_ADR	STORE
 3515 4844 E7250000 		_UNNEST
 3516              	
 3517              	/**********************
 3518              	    ;  ( -- )
 3519              	 	Terminate a colon
 3520              		definition.
 3521              	***********************/
 3522 4848 28480000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3522      C13B00BF 
 3523 4850 504700BF 		_NEST
 3524 4854 A7270000 		_DOLIT	UNNEST
 3524      E6250000 
 3525 485c 8D480000 		_ADR	CALLC
 3526 4860 7D410000 		_ADR	LBRAC
 3527 4864 31480000 		_ADR	OVERT
 3528 4868 E7250000 		_UNNEST
 3529              	
 3530              	/******************
 3531              	    ]	   ( -- )
 3532              	 	Start compiling 
 3533              		the words in 
 3534              		the input stream.
 3535              	*********************/
 3536 486c 4C480000 		_HEADER RBRAC,1,"]"
 3536      015D00BF 
 3537 4874 504700BF 		_NEST
 3538 4878 A7270000 		_DOLIT	SCOMP
 3538      A0470000 
 3539 4880 7D2E0000 		_ADR	TEVAL
 3540 4884 19280000 		_ADR	STORE
 3541 4888 E7250000 		_UNNEST
ARM GAS  forth.s 			page 165


 3542              	
 3543              	/*********************
 3544              	    BL.W	( ca -- )
 3545              	 	compile ca.
 3546              	hidden word used by compiler
 3547              	*****************************/
 3548              	CALLC:
 3549 488c 504700BF 		_NEST
 3550 4890 A7270000 		_DOLIT 1 
 3550      01000000 
 3551 4898 79290000 		_ADR ORR 
 3552 489c 29430000 		_ADR COMMA  
 3553 48a0 E7250000 		_UNNEST 
 3554              	
 3555              	
 3556              	/*************************
 3557              	 	:	( -- //  string> )
 3558              	 	Start a new colon 
 3559              		definition using 
 3560              		next word as its name.
 3561              	**************************/
 3562 48a4 70480000 		_HEADER COLON,1,":"
 3562      013A00BF 
 3563 48ac 504700BF 		_NEST
 3564 48b0 C53C0000 		_ADR	TOKEN
 3565 48b4 39470000 		_ADR	SNAME
 3566 48b8 F1250000 		_ADR	COMPI_NEST 
 3567 48bc 75480000 		_ADR	RBRAC
 3568 48c0 E7250000 		_UNNEST
 3569              	
 3570              	/*************************
 3571              	    IMMEDIATE   ( -- )
 3572              	 	Make the last compiled 
 3573              		word an immediate word.
 3574              	***************************/
 3575 48c4 A8480000 		_HEADER IMMED,9,"IMMEDIATE"
 3575      09494D4D 
 3575      45444941 
 3575      544500BF 
 3576 48d4 504700BF 		_NEST
 3577 48d8 A7270000 		_DOLIT	IMEDD
 3577      80000000 
 3578 48e0 E92E0000 		_ADR	LAST
 3579 48e4 2D280000 		_ADR	AT
 3580 48e8 2D280000 		_ADR	AT
 3581 48ec 79290000 		_ADR	ORR
 3582 48f0 E92E0000 		_ADR	LAST
 3583 48f4 2D280000 		_ADR	AT
 3584 48f8 19280000 		_ADR	STORE
 3585 48fc E7250000 		_UNNEST
 3586              	
 3587              	/******************
 3588              	  Defining words
 3589              	******************/
 3590              	
 3591              	/***********************************
 3592              	    CONSTANT	( u -- //  string> )
ARM GAS  forth.s 			page 166


 3593              	 	Compile a new constant.
 3594              	************************************/
 3595 4900 C8480000 		_HEADER CONST,8,"CONSTANT"
 3595      08434F4E 
 3595      5354414E 
 3595      540000BF 
 3596 4910 504700BF 		_NEST 
 3597 4914 C53C0000 		_ADR	TOKEN
 3598 4918 39470000 		_ADR	SNAME
 3599 491c 31480000 		_ADR	OVERT
 3600 4920 F1250000 		_ADR	COMPI_NEST
 3601 4924 A7270000 		_DOLIT	DOCON
 3601      A82D0000 
 3602 492c 8D480000 		_ADR	CALLC
 3603 4930 29430000 		_ADR	COMMA
 3604 4934 A7270000 		_DOLIT	UNNEST 
 3604      E6250000 
 3605 493c 8D480000 		_ADR	CALLC  
 3606 4940 E7250000 		_UNNEST
 3607              	
 3608              		.p2align 2 
 3609              	/****************************************
 3610              	 doDOES> ( -- a )
 3611              	 runtime action of 		 
 3612              	 leave parameter field address on stack 
 3613              	hidden word used by compiler 
 3614              	***************************************/
 3615              	DODOES:
 3616 4944 504700BF 		_NEST 
 3617 4948 59280000 		_ADR	RFROM
 3618 494c 812A0000 		_ADR	CELLP 
 3619 4950 412A0000 		_ADR	ONEP  
 3620 4954 E92E0000 		_ADR LAST 
 3621 4958 2D280000 		_ADR AT
 3622 495c E53C0000 		_ADR NAMET 
 3623 4960 812A0000 		_ADR CELLP 
 3624 4964 19280000 		_ADR STORE  
 3625 4968 E7250000 		_UNNEST 
 3626              	
 3627              		.p2align 2
 3628              	/**********************
 3629              	  DOES> ( -- )
 3630              	  compile time action
 3631              	*************************/
 3632 496c 04490000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3632      C5444F45 
 3632      533E00BF 
 3633 4978 504700BF 		_NEST 
 3634 497c A7270000 		_DOLIT DODOES 
 3634      44490000 
 3635 4984 8D480000 		_ADR CALLC 
 3636 4988 A7270000 		_DOLIT	UNNEST
 3636      E6250000 
 3637 4990 8D480000 		_ADR	CALLC 
 3638 4994 F1250000 		_ADR COMPI_NEST
 3639 4998 A7270000 		_DOLIT RFROM 
 3639      58280000 
ARM GAS  forth.s 			page 167


 3640 49a0 8D480000 		_ADR	CALLC
 3641 49a4 E7250000 		_UNNEST 
 3642              	
 3643              	
 3644              	/****************************
 3645              	  DEFER@ ( "name" -- a )
 3646              	  return value of code field 
 3647              	  of defered function. 
 3648              	******************************/
 3649 49a8 70490000 		_HEADER DEFERAT,6,"DEFER@"
 3649      06444546 
 3649      45524000 
 3650 49b4 504700BF 		_NEST 
 3651 49b8 E9420000 		_ADR TICK
 3652 49bc 812A0000 		_ADR CELLP 
 3653 49c0 2D280000 		_ADR AT 
 3654 49c4 512A0000 		_ADR ONEM 
 3655 49c8 E7250000 		_UNNEST 
 3656              	
 3657              	/*********************************
 3658              	 DEFER! ( "name1" "name2" -- )
 3659              	 assign an action to a defered word 
 3660              	************************************/
 3661 49cc AC490000 		_HEADER DEFERSTO,6,"DEFER!"
 3661      06444546 
 3661      45522100 
 3662 49d8 504700BF 		_NEST 
 3663 49dc E9420000 		_ADR TICK 
 3664 49e0 412A0000 		_ADR ONEP 
 3665 49e4 E9420000 		_ADR TICK 
 3666 49e8 812A0000 		_ADR CELLP 
 3667 49ec 19280000 		_ADR STORE 
 3668 49f0 E7250000 		_UNNEST
 3669              	
 3670              	/****************************
 3671              	  DEFER ( "name" -- )
 3672              	  create a defered definition
 3673              	*****************************/
 3674 49f4 D0490000 		_HEADER DEFER,5,"DEFER"
 3674      05444546 
 3674      455200BF 
 3675 4a00 504700BF 		_NEST 
 3676 4a04 514A0000 		_ADR CREAT 
 3677 4a08 A7270000 		_DOLIT UNNEST 
 3677      E6250000 
 3678 4a10 8D480000 		_ADR CALLC 
 3679 4a14 A7270000 		_DOLIT DEFER_NOP
 3679      384A0000 
 3680 4a1c 412A0000 		_ADR ONEP 
 3681 4a20 E92E0000 		_ADR LAST 
 3682 4a24 2D280000 		_ADR AT 
 3683 4a28 E53C0000 		_ADR NAMET 
 3684 4a2c 812A0000 		_ADR CELLP 
 3685 4a30 19280000 		_ADR STORE 
 3686 4a34 E7250000 		_UNNEST 
 3687              	DEFER_NOP:
 3688 4a38 504700BF 		_NEST  
ARM GAS  forth.s 			page 168


 3689 4a3c A5270000 		_ADR NOP 
 3690 4a40 E7250000 		_UNNEST 
 3691              	
 3692              	/******************************
 3693              	    CREATE	( -- //  string> )
 3694              	 	Compile a new array entry 
 3695              		without allocating code space.
 3696              	***********************************/
 3697 4a44 F8490000 		_HEADER CREAT,6,"CREATE"
 3697      06435245 
 3697      41544500 
 3698 4a50 504700BF 		_NEST 
 3699 4a54 C53C0000 		_ADR	TOKEN
 3700 4a58 39470000 		_ADR	SNAME
 3701 4a5c 31480000 		_ADR	OVERT
 3702 4a60 F1250000 		_ADR	COMPI_NEST 
 3703 4a64 A7270000 		_DOLIT	DOVAR
 3703      9C2D0000 
 3704 4a6c 8D480000 		_ADR	CALLC
 3705 4a70 E7250000 		_UNNEST
 3706              	
 3707              	/*******************************
 3708              	    VARIABLE	( -- //  string> )
 3709              	 	Compile a new variable 
 3710              		initialized to 0.
 3711              	***********************************/
 3712 4a74 484A0000 		_HEADER VARIA,8,"VARIABLE"
 3712      08564152 
 3712      4941424C 
 3712      450000BF 
 3713 4a84 504700BF 		_NEST
 3714 4a88 514A0000 		_ADR	CREAT
 3715 4a8c A7270000 		_DOLIT	0
 3715      00000000 
 3716 4a94 29430000 		_ADR	COMMA
 3717 4a98 A7270000 		_DOLIT UNNEST
 3717      E6250000 
 3718 4aa0 8D480000 		_ADR	CALLC  
 3719 4aa4 E7250000 		_UNNEST
 3720              	
 3721              	
 3722              	/***********
 3723              	  Tools
 3724              	***********/
 3725              	
 3726              	/*************************
 3727              	    dm+	 ( a u -- a )
 3728              	 	Dump u bytes from , 
 3729              		leaving a+u on the stack.
 3730              	hidden word used by DUMP 
 3731              	****************************/
 3732              	DMP:
 3733 4aa8 504700BF 		_NEST
 3734 4aac 45290000 		_ADR	OVER
 3735 4ab0 A7270000 		_DOLIT	4
 3735      04000000 
 3736 4ab8 45390000 		_ADR	UDOTR			// display address
ARM GAS  forth.s 			page 169


 3737 4abc 11380000 		_ADR	SPACE
 3738 4ac0 9D280000 		_ADR	TOR			// start count down loop
 3739 4ac4 FB270000 		_BRAN	PDUM2			// skip first pass
 3739      E44A0000 
 3740              	PDUM1:
 3741 4acc 21290000 	  _ADR	DUPP
 3742 4ad0 4D280000 		_ADR	CAT
 3743 4ad4 A7270000 		_DOLIT	3
 3743      03000000 
 3744 4adc 45390000 		_ADR	UDOTR			// display numeric data
 3745 4ae0 412A0000 		_ADR	ONEP			// increment address
 3746              	PDUM2:
 3747 4ae4 C9270000 	  _ADR	DONXT
 3748 4ae8 CC4A0000 		.word	PDUM1	// loop till done
 3749 4aec E7250000 		_UNNEST
 3750              		.p2align 2 
 3751              	//    DUMP	( a u -- )
 3752              	// 	Dump u bytes from a, in a formatted manner.
 3753              	
 3754              	/**********************
 3755              		DUMP ( a n -- )
 3756              		hex dump memory 
 3757              	*********************/
 3758 4af0 784A0000 		_HEADER DUMP,4,"DUMP"
 3758      0444554D 
 3758      500000BF 
 3759 4afc 504700BF 		_NEST
 3760 4b00 A7270000 		_DOLIT  15 
 3760      0F000000 
 3761 4b08 E5290000 		_ADR    PLUS 
 3762 4b0c A7270000 		_DOLIT  0xFFFFFFF0 
 3762      F0FFFFFF 
 3763 4b14 65290000 		_ADR    ANDD 
 3764 4b18 31290000 		_ADR    SWAP 
 3765 4b1c A7270000 		_DOLIT  0xFFFFFFFC
 3765      FCFFFFFF 
 3766 4b24 65290000 		_ADR    ANDD 
 3767 4b28 31290000 		_ADR    SWAP 
 3768 4b2c 152E0000 		_ADR	BASE
 3769 4b30 2D280000 		_ADR	AT
 3770 4b34 9D280000 		_ADR	TOR
 3771 4b38 75350000 		_ADR	HEX			// save radix,set hex
 3772 4b3c A7270000 		_DOLIT	16
 3772      10000000 
 3773 4b44 7D310000 		_ADR	SLASH			// change count to lines
 3774 4b48 9D280000 		_ADR	TOR
 3775 4b4c FB270000 		_BRAN	DUMP4			// start count down loop
 3775      7C4B0000 
 3776              	DUMP1:
 3777 4b54 99380000 	    _ADR	CR
 3778 4b58 A7270000 		_DOLIT	16
 3778      10000000 
 3779 4b60 592B0000 		_ADR	DDUP
 3780 4b64 A94A0000 		_ADR	DMP			// display numeric
 3781 4b68 092B0000 		_ADR	ROT
 3782 4b6c 092B0000 		_ADR	ROT
 3783 4b70 11380000 		_ADR	SPACE
ARM GAS  forth.s 			page 170


 3784 4b74 11380000 		_ADR	SPACE
 3785 4b78 65380000 		_ADR	TYPEE			// display printable characters
 3786              	DUMP4:
 3787 4b7c C9270000 	  _DONXT	DUMP1	// loop till done
 3787      544B0000 
 3788              	DUMP3:
 3789 4b84 11290000 		_ADR	DROP
 3790 4b88 59280000 		_ADR	RFROM
 3791 4b8c 152E0000 		_ADR	BASE
 3792 4b90 19280000 		_ADR	STORE			// restore radix
 3793 4b94 E7250000 		_UNNEST
 3794              	
 3795              	/*******************************
 3796              	   TRACE. display in hexadecimal
 3797              	   TRACE. use a different buffer 
 3798              	   than DOT  to avoid current 
 3799              	   display overwrite.
 3800              	*******************************/ 
 3801              	TDOT: // ( u -- )
 3802 4b98 504700BF 		_NEST 
 3803 4b9c 152E0000 		_ADR BASE 
 3804 4ba0 2D280000 		_ADR AT 
 3805 4ba4 9D280000 		_ADR TOR
 3806 4ba8 75350000 		_ADR HEX  
 3807 4bac 912E0000 		_ADR HLD 
 3808 4bb0 2D280000 		_ADR AT 
 3809 4bb4 9D280000 		_ADR TOR   // R: base *hold 
 3810 4bb8 91320000 		_ADR HERE 
 3811 4bbc A7270000 		_DOLIT 160 
 3811      A0000000 
 3812 4bc4 E5290000 		_ADR PLUS
 3813 4bc8 21290000 		_ADR DUPP 
 3814 4bcc 9D280000 		_ADR TOR  
 3815 4bd0 912E0000 		_ADR HLD 
 3816 4bd4 19280000 		_ADR STORE
 3817 4bd8 1D300000 		_ADR STOD 
 3818 4bdc C5340000 		_ADR DIGS  
 3819 4be0 11290000 		_ADR DROP
 3820 4be4 A7270000 		_DOLIT '$'
 3820      24000000 
 3821 4bec 79340000 		_ADR HOLD 
 3822 4bf0 912E0000 		_ADR HLD 
 3823 4bf4 2D280000 		_ADR AT
 3824 4bf8 59280000 		_ADR RFROM   
 3825 4bfc 45290000 		_ADR OVER 
 3826 4c00 F5290000 		_ADR SUBB 
 3827 4c04 11380000 		_ADR SPACE 
 3828 4c08 65380000 		_ADR TYPEE 
 3829 4c0c 59280000 		_ADR RFROM 
 3830 4c10 912E0000 		_ADR HLD 
 3831 4c14 19280000 		_ADR STORE 
 3832 4c18 59280000 		_ADR RFROM 
 3833 4c1c 152E0000 		_ADR BASE 
 3834 4c20 19280000 		_ADR STORE 
 3835 4c24 E7250000 		_UNNEST 
 3836              	
 3837              	/**********************
ARM GAS  forth.s 			page 171


 3838              	   .S	  ( ... -- ... )
 3839              	 	Display the contents 
 3840              		of the data stack.
 3841              	*************************/
 3842 4c28 F44A0000 		_HEADER DOTS,2,".S"
 3842      022E5300 
 3843 4c30 504700BF 		_NEST
 3844 4c34 45320000 		_ADR	DEPTH	// stack depth
 3845 4c38 9D280000 		_ADR	TOR		// start count down loop
 3846 4c3c FB270000 		_BRAN	DOTS2  // skip first pass
 3846      504C0000 
 3847              	DOTS1:
 3848 4c44 89280000 		_ADR	RAT
 3849 4c48 69320000 		_ADR	PICK
 3850 4c4c 994B0000 		_ADR	TDOT // index stack, display contents
 3851              	DOTS2:
 3852 4c50 C9270000 		_DONXT	DOTS1 // loop till done
 3852      444C0000 
 3853 4c58 99380000 		_ADR	CR 
 3854 4c5c E7250000 		_UNNEST
 3855              	
 3856              	RBASE: 
 3857 4c60 47F8046D 		_PUSH 
 3858 4c64 4FF47F46 		_MOV32 TOS,RPP 
 3858      C2F20106 
 3859 4c6c FDF7B8BC 		_NEXT 
 3860              	
 3861              	
 3862              	/**************************
 3863              	  R.  display return stack 
 3864              	**************************/
 3865              	RDOT: 
 3866 4c70 504700BF 		_NEST 
 3867 4c74 614C0000 		_ADR RBASE
 3868 4c78 FD280000 		_ADR RPAT 
 3869 4c7c F5290000 		_ADR SUBB
 3870 4c80 C52A0000 		_ADR CELLSL   
 3871 4c84 A7270000 		_DOLIT 2
 3871      02000000 
 3872 4c8c F5290000 		_ADR SUBB 
 3873 4c90 9D280000 		_ADR TOR
 3874 4c94 614C0000 		_ADR RBASE 
 3875 4c98 912A0000 	1:	_ADR CELLM 
 3876 4c9c 21290000 		_ADR DUPP 
 3877 4ca0 2D280000 		_ADR AT 
 3878 4ca4 994B0000 		_ADR TDOT 
 3879 4ca8 59280000 		_ADR RFROM   
 3880 4cac 512A0000 		_ADR ONEM 
 3881 4cb0 21290000 		_ADR DUPP
 3882 4cb4 9D280000 		_ADR TOR 
 3883 4cb8 592C0000 		_ADR ZEQUAL   
 3884 4cbc E7270000 		_QBRAN 1b
 3884      984C0000 
 3885 4cc4 59280000 		_ADR RFROM  
 3886 4cc8 312B0000 		_ADR DDROP
 3887 4ccc 99380000 		_ADR CR   
 3888 4cd0 E7250000 		_UNNEST 
ARM GAS  forth.s 			page 172


 3889              	
 3890              	/**************************
 3891              		TRACE ( -- )
 3892              		display stacks content 
 3893              	**************************/
 3894 4cd4 2C4C0000 		_HEADER TRACE,5,"TRACE"
 3894      05545241 
 3894      434500BF 
 3895 4ce0 504700BF 		_NEST
 3896 4ce4 99380000 		_ADR CR 
 3897 4ce8 A7270000 		_DOLIT '>' 
 3897      3E000000 
 3898 4cf0 A7270000 		_DOLIT 'S'
 3898      53000000 
 3899 4cf8 B1260000 		_ADR EMIT 
 3900 4cfc B1260000 		_ADR EMIT  
 3901 4d00 314C0000 		_ADR DOTS
 3902 4d04 A7270000 		_DOLIT '>'
 3902      3E000000 
 3903 4d0c A7270000 		_DOLIT 'R'
 3903      52000000 
 3904 4d14 B1260000 		_ADR EMIT 
 3905 4d18 B1260000 		_ADR EMIT 
 3906 4d1c 714C0000 		_ADR RDOT 
 3907 4d20 E7250000 		_UNNEST 
 3908              	
 3909              	
 3910              	/*****************************
 3911              	    >NAME	( ca -- na | F )
 3912              	 	Convert code address 
 3913              		to a name address.
 3914              	*****************************/
 3915 4d24 D84C0000 		_HEADER TNAME,5,">NAME"
 3915      053E4E41 
 3915      4D4500BF 
 3916 4d30 504700BF 		_NEST
 3917 4d34 9D280000 		_ADR	TOR			//  
 3918 4d38 A92E0000 		_ADR	CNTXT			//  va
 3919 4d3c 2D280000 		_ADR	AT			//  na
 3920              	TNAM1:
 3921 4d40 21290000 		_ADR	DUPP			//  na na
 3922 4d44 E7270000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3922      744D0000 
 3923 4d4c 21290000 		_ADR	DUPP			//  na na
 3924 4d50 E53C0000 		_ADR	NAMET			//  na ca
 3925 4d54 89280000 		_ADR	RAT			//  na ca code
 3926 4d58 8D290000 		_ADR	XORR			//  na f --
 3927 4d5c E7270000 		_QBRAN	TNAM2
 3927      744D0000 
 3928 4d64 912A0000 		_ADR	CELLM			//  la 
 3929 4d68 2D280000 		_ADR	AT			//  next_na
 3930 4d6c FB270000 		_BRAN	TNAM1
 3930      404D0000 
 3931              	TNAM2:	
 3932 4d74 59280000 		_ADR	RFROM
 3933 4d78 11290000 		_ADR	DROP			//  0|na --
 3934 4d7c E7250000 		_UNNEST			// 0
ARM GAS  forth.s 			page 173


 3935              	
 3936              	/********************************
 3937              	    .ID	 ( na -- )
 3938              	 	Display the name at address.
 3939              	********************************/
 3940 4d80 284D0000 		_HEADER DOTID,3,".ID"
 3940      032E4944 
 3941 4d88 504700BF 		_NEST
 3942 4d8c F52A0000 		_ADR	QDUP			// if zero no name
 3943 4d90 E7270000 		_QBRAN	DOTI1
 3943      B04D0000 
 3944 4d98 752D0000 		_ADR	COUNT
 3945 4d9c A7270000 		_DOLIT	0x1F
 3945      1F000000 
 3946 4da4 65290000 		_ADR	ANDD			// mask lexicon bits
 3947 4da8 65380000 		_ADR	TYPEE
 3948 4dac E7250000 		_UNNEST			// display name string
 3949              	DOTI1:
 3950 4db0 01390000 		_DOTQP	9," {noName}"
 3950      09207B6E 
 3950      6F4E616D 
 3950      657D00BF 
 3951 4dc0 E7250000 		_UNNEST
 3952              	
 3953              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3954              	.if WANT_SEE 
 3955              	/*******************************
 3956              	    SEE	 ( -- //  string> )
 3957              	 	A simple decompiler.
 3958              	*******************************/
 3959              		_HEADER SEE,3,"SEE"
 3960              		_NEST
 3961              		_ADR	TICK	//  ca --, starting address
 3962              		_ADR	CR	
 3963              		_DOLIT	20
 3964              		_ADR	TOR
 3965              	SEE1:
 3966              		_ADR	CELLP			//  a
 3967              		_ADR	DUPP			//  a a
 3968              		_ADR	DECOMP		//  a
 3969              		_DONXT	SEE1
 3970              		_ADR	DROP
 3971              		_UNNEST
 3972              	
 3973              	/*************************
 3974              	 	DECOMPILE ( a -- )
 3975              	 	Convert code in a.  
 3976              		Display name of command or as data.
 3977              	*************************************/
 3978              		_HEADER DECOMP,9,"DECOMPILE"
 3979              		_NEST
 3980              		_ADR	DUPP			//  a a
 3981              	// 	_ADR	TOR			//  a
 3982              		_ADR	AT			//  a code
 3983              		_ADR	DUPP			//  a code code
 3984              		_DOLIT	0xF800D000 //0xF800F800
 3985              		_ADR	ANDD
ARM GAS  forth.s 			page 174


 3986              		_DOLIT	0xF000D000 //0xF800F000
 3987              		_ADR	EQUAL			//  a code ?
 3988              		_ADR	INVER 
 3989              		_QBRAN	DECOM2	//  not a command
 3990              		//  a valid_code --, extract address and display name
 3991              		MOVW	IP,#0xFFE
 3992              		MOV	WP,TOS
 3993              		LSL	TOS,TOS,#21		//  get bits 22-12
 3994              		ASR	TOS,TOS,#9		//  with sign extension
 3995              		LSR	WP,WP,#15		//  get bits 11-1
 3996              		AND	WP,WP,IP		//  retain only bits 11-1
 3997              		ORR	TOS,TOS,WP		//  get bits 22-1
 3998              		NOP
 3999              		_ADR	OVER			//  a offset a
 4000              		_ADR	PLUS			//  a target-4
 4001              		_ADR	CELLP			//  a target
 4002              		_ADR	TNAME			//  a na/0 --, is it a name?
 4003              		_ADR	QDUP			//  name address or zero
 4004              		_QBRAN	DECOM1
 4005              		_ADR	SPACE			//  a na
 4006              		_ADR	DOTID			//  a --, display name
 4007              	// 	_ADR	RFROM			//  a
 4008              		_ADR	DROP
 4009              		_UNNEST
 4010              	DECOM1:	// _ADR	RFROM		//  a
 4011              		_ADR	AT			//  data
 4012              		_ADR	UDOT			//  display data
 4013              		_UNNEST
 4014              	DECOM2:
 4015              		_ADR	UDOT
 4016              	// 	_ADR	RFROM
 4017              		_ADR	DROP
 4018              		_UNNEST
 4019              	.endif 
 4020              	
 4021              	/**********************
 4022              		VLIST ( -- )
 4023              		WORDS alias 
 4024              		+ display words count 
 4025              	**********************/
 4026 4dc4 844D0000 		_HEADER VLIST,5,"VLIST"
 4026      05564C49 
 4026      535400BF 
 4027 4dd0 504700BF 		_NEST 
 4028 4dd4 F54D0000 		_ADR WORDS
 4029 4dd8 99380000 		_ADR CR 
 4030 4ddc 394E0000 		_ADR WC
 4031 4de0 AD390000 		_ADR DOT    
 4032 4de4 E7250000 		_UNNEST 
 4033              	
 4034              	/*********************
 4035              	    WORDS	( -- )
 4036              	 	Display the names 
 4037              		in the context vocabulary.
 4038              	*******************************/
 4039 4de8 C84D0000 		_HEADER WORDS,5,"WORDS"
 4039      05574F52 
ARM GAS  forth.s 			page 175


 4039      445300BF 
 4040 4df4 504700BF 		_NEST
 4041 4df8 99380000 		_ADR	CR
 4042 4dfc A92E0000 		_ADR	CNTXT
 4043 4e00 2D280000 		_ADR	AT			// only in context
 4044              	WORS1:
 4045 4e04 F52A0000 		_ADR	QDUP			// ?at end of list
 4046 4e08 E7270000 		_QBRAN	WORS2
 4046      2C4E0000 
 4047 4e10 21290000 		_ADR	DUPP
 4048 4e14 11380000 		_ADR	SPACE
 4049 4e18 894D0000 		_ADR	DOTID			// display a name
 4050 4e1c 912A0000 		_ADR	CELLM
 4051 4e20 2D280000 		_ADR	AT
 4052 4e24 FB270000 		_BRAN	WORS1
 4052      044E0000 
 4053              	WORS2:
 4054 4e2c E7250000 		_UNNEST
 4055              	
 4056              	/*****************************
 4057              		WC ( - n )
 4058              		count words in dictionary 
 4059              	******************************/
 4060 4e30 EC4D0000 		_HEADER WC,2,"WC"
 4060      02574300 
 4061 4e38 504700BF 		_NEST 
 4062 4e3c A7270000 		_DOLIT 0 
 4062      00000000 
 4063 4e44 E92E0000 		_ADR LAST
 4064 4e48 2D280000 	1:	_ADR AT
 4065 4e4c F52A0000 		_ADR QDUP
 4066 4e50 E7270000 		_QBRAN 9f
 4066      704E0000 
 4067 4e58 31290000 		_ADR SWAP
 4068 4e5c 412A0000 		_ADR ONEP
 4069 4e60 31290000 		_ADR SWAP
 4070 4e64 912A0000 		_ADR CELLM
 4071 4e68 FB270000 		_BRAN 1b
 4071      484E0000 
 4072 4e70 E7250000 	9:	_UNNEST 
 4073              	
 4074              	/*************************
 4075              		MARK <string> ( -- )
 4076              	    create forget point 
 4077              		in dictionary 
 4078              	*************************/	
 4079 4e74 344E0000 		_HEADER MARK,4,"MARK"
 4079      044D4152 
 4079      4B0000BF 
 4080 4e80 504700BF 		_NEST
 4081 4e84 514A0000 		_ADR CREAT 
 4082 4e88 45490000 		_ADR DODOES 
 4083 4e8c E7250000 		_UNNEST
 4084 4e90 504700BF 		_NEST  
 4085 4e94 59280000 		_ADR RFROM 
 4086 4e98 A7270000 		_DOLIT 8
 4086      08000000 
ARM GAS  forth.s 			page 176


 4087 4ea0 F5290000 		_ADR SUBB
 4088 4ea4 314D0000 		_ADR TNAME
 4089 4ea8 912A0000 		_ADR CELLM
 4090 4eac 2D280000 		_ADR AT  
 4091 4eb0 E92E0000 		_ADR LAST 
 4092 4eb4 19280000 		_ADR STORE 
 4093 4eb8 31480000 		_ADR OVERT
 4094 4ebc E7250000 		_UNNEST 
 4095              	
 4096              	/*********************************
 4097              		ARRAY "name" ( n -- )
 4098              	    create an array of n elements 
 4099              	*********************************/
 4100 4ec0 784E0000 		_HEADER ARRAY,5,"ARRAY"
 4100      05415252 
 4100      415900BF 
 4101 4ecc 504700BF 		_NEST 
 4102 4ed0 C53C0000 		_ADR	TOKEN
 4103 4ed4 39470000 		_ADR	SNAME
 4104 4ed8 31480000 		_ADR	OVERT
 4105 4edc F1250000 		_ADR	COMPI_NEST
 4106 4ee0 A7270000 		_DOLIT	DO_ARRAY
 4106      0C4F0000 
 4107 4ee8 8D480000 		_ADR	CALLC
 4108 4eec A7270000 		_DOLIT	UNNEST 
 4108      E6250000 
 4109 4ef4 8D480000 		_ADR	CALLC  
 4110 4ef8 A7270000 		_DOLIT  4 
 4110      04000000 
 4111 4f00 052A0000 		_ADR    STAR 
 4112 4f04 11430000 		_ADR    ALLOT 
 4113 4f08 E7250000 		_UNNEST 	
 4114              	
 4115              	DO_ARRAY:
 4116 4f0c 504700BF 		_NEST  
 4117 4f10 A7270000 		_DOLIT 4 
 4117      04000000 
 4118 4f18 052A0000 		_ADR STAR  
 4119 4f1c 89280000 		_ADR RAT  
 4120 4f20 812A0000 		_ADR CELLP 
 4121 4f24 E5290000 		_ADR PLUS  
 4122 4f28 E7250000 		_UNNEST 
 4123              	
 4124              	/****************
 4125              	  cold start
 4126              	*****************/
 4127              	
 4128              	/**********************************
 4129              	    VER	 ( -- n )
 4130              	 	Return the version 
 4131              		number of this implementation.
 4132              	hidden word used by COLD
 4133              	**********************************/
 4134              	VERSN:
 4135 4f2c 504700BF 		_NEST
 4136 4f30 A7270000 		_DOLIT	VER*256+EXT
 4136      00010000 
ARM GAS  forth.s 			page 177


 4137 4f38 E7250000 		_UNNEST
 4138              	
 4139              	/*********************
 4140              	    hi	  ( -- )
 4141              	 	Display the sign-on 
 4142              		message.
 4143              	***********************/
 4144 4f3c C44E0000 		_HEADER HI,2,"HI"
 4144      02484900 
 4145 4f44 504700BF 		_NEST
 4146 4f48 99380000 		_ADR	CR	// initialize I/O
 4147 4f4c 01390000 		_DOTQP	17, "beyond Jupiter, v" 
 4147      11626579 
 4147      6F6E6420 
 4147      4A757069 
 4147      7465722C 
 4148 4f64 152E0000 		_ADR	BASE
 4149 4f68 2D280000 		_ADR	AT
 4150 4f6c 75350000 		_ADR	HEX	// save radix
 4151 4f70 2D4F0000 		_ADR	VERSN
 4152 4f74 59340000 		_ADR	BDIGS
 4153 4f78 A7270000 		_DOLIT  0 
 4153      00000000 
 4154 4f80 A5340000 		_ADR	DIG
 4155 4f84 A5340000 		_ADR	DIG
 4156 4f88 A7270000 		_DOLIT	'.'
 4156      2E000000 
 4157 4f90 79340000 		_ADR	HOLD
 4158 4f94 C5340000 		_ADR	DIGS
 4159 4f98 21350000 		_ADR	EDIGS
 4160 4f9c 65380000 		_ADR	TYPEE	// format version number
 4161 4fa0 152E0000 		_ADR	BASE
 4162 4fa4 19280000 		_ADR	STORE
 4163 4fa8 99380000 		_ADR	CR
 4164 4fac E7250000 		_UNNEST			// restore radix
 4165              	
 4166              	/***********************
 4167              	   HI_BOTH ( -- )
 4168              	   display sign-on 
 4169              	   on both CONSOLE
 4170              	***********************/
 4171              	HI_BOTH:
 4172 4fb0 504700BF 	    _NEST 
 4173 4fb4 F5070000 		_ADR LOCAL 
 4174 4fb8 25080000 		_ADR CONSOLE 
 4175 4fbc 454F0000 		_ADR HI 
 4176 4fc0 0D080000 		_ADR SERIAL 
 4177 4fc4 25080000 		_ADR CONSOLE 
 4178 4fc8 454F0000 		_ADR HI
 4179 4fcc E7250000 		_UNNEST 
 4180              	
 4181              	/**********************
 4182              	 check if PS2 keyboard 
 4183              	 present.
 4184              	**********************/
 4185              	PS2_QUERY: 
 4186 4fd0 504700BF 		_NEST 
ARM GAS  forth.s 			page 178


 4187 4fd4 A7270000 		_DOLIT 400 
 4187      90010000 
 4188 4fdc 49270000 		_ADR PAUSE
 4189 4fe0 2D160000 		_ADR PS2_QKEY
 4190 4fe4 E7270000 		_QBRAN 1f
 4190      00500000 
 4191 4fec A7270000 		_DOLIT BAT_OK 
 4191      AA000000 
 4192 4ff4 8D290000 		_ADR XORR 
 4193 4ff8 E7270000 		_QBRAN 9f 
 4193      44500000 
 4194 5000 15180000 	1:	_ADR KBD_RST
 4195 5004 A7270000 		_DOLIT BAT_OK 
 4195      AA000000 
 4196 500c 8D290000 		_ADR XORR  
 4197 5010 E7270000 		_QBRAN 9f  
 4197      44500000 
 4198              	// no ps2 keyboard 
 4199              	// swith to serial console
 4200 5018 99380000 		_ADR CR 
 4201 501c 01390000 		_DOTQP 25,"no PS2 keyboard detected."
 4201      196E6F20 
 4201      50533220 
 4201      6B657962 
 4201      6F617264 
 4202 503c 0D080000 		_ADR SERIAL 
 4203 5040 25080000 		_ADR CONSOLE 
 4204 5044 E7250000 	9:	_UNNEST 
 4205              	
 4206              	/*************************
 4207              	   check PA8 to 
 4208              	   select console 
 4209              	   PA8 -> low  LOCAL 
 4210              	   PA8 -> high SERIAL 
 4211              	*************************/
 4212              	IF_SENSE:
 4213 5048 504700BF 		_NEST 
 4214 504c F5070000 		_ADR LOCAL 
 4215 5050 A7270000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4215      10000240 
 4216 5058 2D280000 		_ADR AT 
 4217 505c A7270000 		_DOLIT (1<<8)
 4217      00010000 
 4218 5064 65290000 		_ADR ANDD 
 4219 5068 E7270000 		_QBRAN 9f 
 4219      74500000 
 4220 5070 412A0000 		_ADR ONEP 
 4221 5074 25080000 	9:  _ADR CONSOLE 
 4222 5078 E7250000 		_UNNEST 
 4223              	
 4224              	/****************************
 4225              	   display READY on active
 4226              	   console
 4227              	***************************/
 4228              	READY:
 4229 507c 504700BF 	    _NEST 
 4230 5080 01390000 		_DOTQP 5,"READY"
ARM GAS  forth.s 			page 179


 4230      05524541 
 4230      445900BF 
 4231 508c 99380000 		_ADR  CR 
 4232 5090 E7250000 	    _UNNEST 
 4233              	
 4234              	/********************
 4235              	    COLD	( -- )
 4236              	 	The high level cold 
 4237              		start sequence.
 4238              	**************************/
 4239 5094 404F0000 		.word	LINK 
 4240              		LINK = . 
 4241 5098 04       	_LASTN:	.byte  4
 4242 5099 434F4C44 		.ascii "COLD"
 4243 509d 0000BF   		.p2align 2	
 4244              	COLD:
 4245 50a0 00B5FBF7 		_CALL forth_init 
 4245      7BF95DF8 
 4245      04EB
 4246 50aa DFF858C0 		ldr IP,=COLD1 
 4247 50ae FDF797BA 		_NEXT
 4248 50b2 00BF     		.p2align 2 
 4249              	COLD1:
 4250 50b4 A7270000 		_DOLIT  0 
 4250      00000000 
 4251 50bc 7D270000 		_ADR ULED // turn off user LED 
 4252 50c0 A7270000 		_DOLIT	UZERO
 4252      28060000 
 4253 50c8 A7270000 		_DOLIT	UPP
 4253      00000020 
 4254 50d0 A7270000 		_DOLIT	ULAST-UZERO
 4254      B0000000 
 4255 50d8 31330000 		_ADR	MOVE 			// initialize user area
 4256 50dc 49420000 		_ADR	PRESE			// initialize stack and TIB
 4257 50e0 C11A0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4258 50e4 D14F0000 		_ADR 	PS2_QUERY  
 4259 50e8 FD2D0000 		_ADR	TBOOT
 4260 50ec E1320000 		_ADR	ATEXE			// application boot
 4261 50f0 31480000 		_ADR	OVERT
 4262 50f4 49500000 		_ADR	IF_SENSE
 4263 50f8 FB270000 		_BRAN	QUIT			// start interpretation
 4263      68420000 
 4264              	COLD2:
 4265              		.p2align 2 	
 4266              	CTOP:
 4267 5100 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4268              	
 4269              	
 4270 5104 B4500000 	  .end 
ARM GAS  forth.s 			page 180


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 181


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 182


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 183


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 184


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 185


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 186


             forth.s:2962   .text:0000000000004204 EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:393    .text:0000000000000360 reset_handler
              init.s:222    .text:0000000000000104 nmi_handler
              init.s:240    .text:000000000000013c hardfault_handler
              init.s:259    .text:0000000000000178 memfault_handler
              init.s:286    .text:00000000000001e4 busfault_handler
              init.s:319    .text:0000000000000278 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:345    .text:00000000000002dc systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000a34 tv_out_isr
          ser-term.s:35     .text:0000000000000700 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001310 kbd_isr
              init.s:196    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:414    .text:000000000000039c forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:00000000000025e0 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2983   .text:0000000000004248 PRESE
             forth.s:2215   .text:0000000000003900 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:0000000000002630 CFSR
             forth.s:494    .text:0000000000002920 DUPP
             forth.s:429    .text:000000000000289c TOR
             forth.s:292    .text:00000000000027a6 DOLIT
             forth.s:1119   .text:0000000000002e14 BASE
             forth.s:363    .text:0000000000002818 STORE
             forth.s:2265   .text:0000000000003984 UDOT
ARM GAS  forth.s 			page 187


              init.s:171    .text:0000000000000064 $d
             forth.s:400    .text:0000000000002858 RFROM
             forth.s:529    .text:0000000000002964 ANDD
             forth.s:333    .text:00000000000027e6 QBRAN
             forth.s:144    .text:0000000000002654 BFAR
             forth.s:178    .text:00000000000026b0 EMIT
             forth.s:2111   .text:0000000000003810 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:88     .text:0000000000001df4 FPSCR
              init.s:375    .text:0000000000000338 reset_mcu
              init.s:195    .text:00000000000000b0 $t
              init.s:201    .text:00000000000000c2 fpu_except
              init.s:202    .text:00000000000000c2 $d
             forth.s:2157   .text:0000000000003898 CR
              init.s:208    .text:00000000000000f4 $d
              init.s:220    .text:0000000000000104 $t
              init.s:225    .text:000000000000010c nmi_hl
              init.s:226    .text:000000000000010c $d
              init.s:228    .text:0000000000000132 $t
              init.s:229    .text:0000000000000134 $d
             forth.s:2861   .text:00000000000040c0 ABORT
              init.s:238    .text:000000000000013c $t
              init.s:245    .text:000000000000014e hardfault_hl
              init.s:246    .text:000000000000014e $d
              init.s:249    .text:0000000000000170 $d
              init.s:257    .text:0000000000000178 $t
              init.s:264    .text:000000000000018a memfault_hl
              init.s:265    .text:000000000000018a $d
              init.s:268    .text:00000000000001b8 $d
              init.s:284    .text:00000000000001e4 $t
              init.s:291    .text:00000000000001f6 busfault_hl
              init.s:292    .text:00000000000001f6 $d
             forth.s:261    .text:000000000000277c ULED
             forth.s:1092   .text:0000000000002dd0 MSEC
              init.s:300    .text:000000000000023e $t
              init.s:301    .text:0000000000000240 $d
              init.s:308    .text:000000000000026c $d
              init.s:317    .text:0000000000000278 $t
              init.s:324    .text:000000000000028a usagefault_hl
              init.s:325    .text:000000000000028a $d
              init.s:327    .text:00000000000002ae $t
              init.s:328    .text:00000000000002b0 $d
             forth.s:568    .text:00000000000029bc RSHIFT
              init.s:343    .text:00000000000002dc $t
              init.s:354    .text:00000000000002f6 systick_exit
              init.s:357    .text:00000000000002f8 user_reboot
              init.s:361    .text:000000000000030a ur
              init.s:362    .text:000000000000030a $d
              init.s:370    .text:0000000000000328 user_reboot_msg
             forth.s:1032   .text:0000000000002d74 COUNT
             forth.s:2139   .text:0000000000003864 TYPEE
              init.s:369    .text:0000000000000326 $t
              init.s:371    .text:0000000000000328 $d
              init.s:518    .text:000000000000049c remap
              init.s:427    .text:00000000000003c4 init_devices
               fpu.s:70     .text:0000000000001dba fpu_init
ARM GAS  forth.s 			page 188


          ser-term.s:56     .text:000000000000072e ser_init
             tvout.s:74     .text:0000000000000984 tv_init
           ps2_kbd.s:307    .text:0000000000001530 kbd_init
         spi-flash.s:41     .text:0000000000001944 flash_spi_init
             forth.s:4244   .text:00000000000050a0 COLD
             forth.s:83     .text:00000000000025d8 NEST
              init.s:440    .text:00000000000003e2 wait_hserdy
              init.s:461    .text:0000000000000404 wait_pllrdy
              init.s:473    .text:000000000000041e wait_sws
              init.s:608    .text:0000000000000566 gpio_config
              init.s:683    .text:0000000000000612 gpio_out
              init.s:543    .text:00000000000004dc nvic_set_priority
              init.s:698    .text:0000000000000628 UZERO
              init.s:736    .text:00000000000006d8 ULAST
              init.s:552    .text:00000000000004f4 negative_irq
              init.s:564    .text:000000000000050e nvic_enable_irq
              init.s:581    .text:0000000000000538 nvic_disable_irq
              init.s:645    .text:00000000000005ce input_pull
              init.s:638    .text:00000000000005bc output_type
              init.s:661    .text:00000000000005e4 gpio_speed
              init.s:699    .text:0000000000000628 $d
             forth.s:4171   .text:0000000000004fb0 HI_BOTH
           ps2_kbd.s:396    .text:000000000000162c PS2_QKEY
             tvout.s:563    .text:0000000000000ef4 TV_EMIT
             forth.s:2899   .text:0000000000004120 INTER
             forth.s:4241   .text:0000000000005098 _LASTN
             forth.s:4266   .text:0000000000005100 CTOP
             forth.s:4240   .text:0000000000005098 LINK
              init.s:741    .text:00000000000006d8 $d
          ser-term.s:33     .text:0000000000000700 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000786 $d
          ser-term.s:90     .text:000000000000078a _SER_QKEY
          ser-term.s:90     .text:0000000000000794 SER_QKEY
          ser-term.s:110    .text:00000000000007c0 $d
          ser-term.s:110    .text:00000000000007c4 _SER_EMIT
          ser-term.s:110    .text:00000000000007d0 SER_EMIT
          ser-term.s:124    .text:00000000000007ea $d
          ser-term.s:124    .text:00000000000007ee _LOCAL
          ser-term.s:124    .text:00000000000007f4 $t
          ser-term.s:124    .text:00000000000007f4 LOCAL
          ser-term.s:133    .text:0000000000000800 $d
          ser-term.s:133    .text:0000000000000804 _SERIAL
          ser-term.s:133    .text:000000000000080c SERIAL
          ser-term.s:142    .text:0000000000000818 $d
          ser-term.s:142    .text:000000000000081c _CONSOLE
          ser-term.s:142    .text:0000000000000824 $t
          ser-term.s:142    .text:0000000000000824 CONSOLE
             forth.s:4228   .text:000000000000507c READY
          ser-term.s:166    .text:0000000000000858 $d
          ser-term.s:166    .text:000000000000085c _ANSI_PARAM
          ser-term.s:166    .text:0000000000000868 ANSI_PARAM
          ser-term.s:168    .text:000000000000086c $d
             forth.s:636    .text:0000000000002a40 ONEP
             forth.s:1482   .text:0000000000003144 SLMOD
             forth.s:725    .text:0000000000002af4 QDUP
             forth.s:348    .text:00000000000027fa BRAN
ARM GAS  forth.s 			page 189


             forth.s:586    .text:00000000000029e4 PLUS
             forth.s:644    .text:0000000000002a50 ONEM
             forth.s:90     .text:00000000000025e6 UNNEST
          ser-term.s:193    .text:00000000000008d8 _ANSI_ESC
          ser-term.s:193    .text:00000000000008e0 ANSI_ESC
          ser-term.s:195    .text:00000000000008e4 $d
          ser-term.s:205    .text:0000000000000904 _SER_AT
          ser-term.s:205    .text:000000000000090c SER_AT
          ser-term.s:207    .text:0000000000000910 $d
             forth.s:502    .text:0000000000002930 SWAP
          ser-term.s:221    .text:0000000000000940 _SER_CLS
          ser-term.s:221    .text:0000000000000948 $t
          ser-term.s:221    .text:0000000000000948 SER_CLS
          ser-term.s:223    .text:000000000000094c $d
          ser-term.s:230    .text:0000000000000970 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000984 $t
             tvout.s:150    .text:0000000000000a60 state_vsync
             tvout.s:191    .text:0000000000000ab4 state_pre_video
             tvout.s:202    .text:0000000000000ac6 state_video_out
             tvout.s:237    .text:0000000000000b24 state_post_video
             tvout.s:254    .text:0000000000000b4a tv_isr_exit
             tvout.s:180    .text:0000000000000a9a sync_end
             tvout.s:246    .text:0000000000000b36 frame_end
             tvout.s:264    .text:0000000000000b4c $d
             tvout.s:264    .text:0000000000000b50 _BACKCOLOR
             tvout.s:264    .text:0000000000000b5c BACKCOLOR
             tvout.s:271    .text:0000000000000b68 $d
ARM GAS  forth.s 			page 190


             tvout.s:271    .text:0000000000000b6c _PENCOLOR
             tvout.s:271    .text:0000000000000b76 $t
             tvout.s:271    .text:0000000000000b78 PENCOLOR
             tvout.s:278    .text:0000000000000b84 $d
             tvout.s:278    .text:0000000000000b88 _CURSOR_COL
             tvout.s:278    .text:0000000000000b90 CURSOR_COL
             tvout.s:285    .text:0000000000000b9c $d
             tvout.s:285    .text:0000000000000ba0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000ba4 $t
             tvout.s:285    .text:0000000000000ba4 CURSOR_ROW
             tvout.s:292    .text:0000000000000bb0 $d
             tvout.s:292    .text:0000000000000bb4 _ROWY
             tvout.s:292    .text:0000000000000bba $t
             tvout.s:292    .text:0000000000000bbc ROWY
             tvout.s:299    .text:0000000000000bc8 $d
             tvout.s:299    .text:0000000000000bcc _COLX
             tvout.s:299    .text:0000000000000bd2 $t
             tvout.s:299    .text:0000000000000bd4 COLX
             tvout.s:306    .text:0000000000000be0 $d
             tvout.s:306    .text:0000000000000be4 _FONT
             tvout.s:306    .text:0000000000000bec FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000bf8 $d
             tvout.s:313    .text:0000000000000bfc _VIDBUFF
             tvout.s:313    .text:0000000000000c04 $t
             tvout.s:313    .text:0000000000000c04 VIDBUFF
             tvout.s:325    .text:0000000000000c0e $d
             tvout.s:325    .text:0000000000000c12 _PLOT
             tvout.s:325    .text:0000000000000c18 PLOT
             tvout.s:373    .text:0000000000000c9c plot_op
             tvout.s:341    .text:0000000000000c44 op_back
             tvout.s:350    .text:0000000000000c5e op_pen
             tvout.s:359    .text:0000000000000c78 op_invert
             tvout.s:363    .text:0000000000000c80 op_xor
             tvout.s:373    .text:0000000000000c9c $d
             tvout.s:378    .text:0000000000000ca4 _VSYNC
             tvout.s:378    .text:0000000000000caa $t
             tvout.s:378    .text:0000000000000cac VSYNC
             tvout.s:386    .text:0000000000000cb6 $d
             tvout.s:386    .text:0000000000000cba _CLS
             tvout.s:386    .text:0000000000000cbe $t
             tvout.s:386    .text:0000000000000cc0 CLS
             tvout.s:410    .text:0000000000000d02 $d
             tvout.s:410    .text:0000000000000d06 _CLRLINE
             tvout.s:410    .text:0000000000000d0e $t
             tvout.s:410    .text:0000000000000d10 CLRLINE
             tvout.s:412    .text:0000000000000d14 $d
             forth.s:604    .text:0000000000002a04 STAR
             forth.s:1709   .text:0000000000003378 FILL
             tvout.s:427    .text:0000000000000d48 _SCROLLUP
             tvout.s:427    .text:0000000000000d54 SCROLLUP
             tvout.s:429    .text:0000000000000d58 $d
             forth.s:595    .text:00000000000029f4 SUBB
             forth.s:1677   .text:0000000000003330 MOVE
             tvout.s:448    .text:0000000000000da0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000dac SCROLLDOWN
             tvout.s:450    .text:0000000000000db0 $d
ARM GAS  forth.s 			page 191


             tvout.s:467    .text:0000000000000df0 _TV_CRLF
             tvout.s:467    .text:0000000000000df8 $t
             tvout.s:467    .text:0000000000000df8 TV_CRLF
             tvout.s:482    .text:0000000000000e1a $d
             tvout.s:482    .text:0000000000000e1e _RIGHT
             tvout.s:482    .text:0000000000000e24 $t
             tvout.s:482    .text:0000000000000e24 RIGHT
             tvout.s:495    .text:0000000000000e38 $d
             tvout.s:495    .text:0000000000000e3c _LEFT
             tvout.s:495    .text:0000000000000e44 LEFT
             tvout.s:511    .text:0000000000000e70 FONT_PIXEL
             tvout.s:518    .text:0000000000000e80 INCR_X
             tvout.s:525    .text:0000000000000e8c NEXT_PIXEL
             tvout.s:534    .text:0000000000000e94 CHAR_ROW
             tvout.s:536    .text:0000000000000e98 $d
             forth.s:775    .text:0000000000002b58 DDUP
             forth.s:420    .text:0000000000002888 RAT
             forth.s:314    .text:00000000000027c8 DONXT
             forth.s:766    .text:0000000000002b44 TDROP
             tvout.s:551    .text:0000000000000ed4 CHAR_FONT
             tvout.s:552    .text:0000000000000ed4 $t
             tvout.s:563    .text:0000000000000ee8 $d
             tvout.s:563    .text:0000000000000eec _TV_EMIT
             tvout.s:563    .text:0000000000000ef4 $t
             tvout.s:565    .text:0000000000000ef8 $d
             forth.s:928    .text:0000000000002ca4 ULESS
             tvout.s:593    .text:0000000000000f7c CTRL_KEY
             forth.s:373    .text:000000000000282c AT
             forth.s:735    .text:0000000000002b08 ROT
             forth.s:391    .text:000000000000284c CAT
             tvout.s:660    .text:0000000000001064 SHOW_CURSOR
             tvout.s:691    .text:00000000000010ec HIDE_CURSOR
             forth.s:903    .text:0000000000002c6c EQUAL
             tvout.s:650    .text:0000000000001044 BACK_SPACE
             forth.s:486    .text:0000000000002910 DROP
             tvout.s:618    .text:0000000000000fec CAR_RET
             tvout.s:629    .text:0000000000001004 LN_FEED
             tvout.s:619    .text:0000000000000fec $t
             tvout.s:620    .text:0000000000000ff0 $d
             tvout.s:630    .text:0000000000001004 $t
             tvout.s:631    .text:0000000000001008 $d
             forth.s:547    .text:000000000000298c XORR
             tvout.s:651    .text:0000000000001044 $t
             tvout.s:652    .text:0000000000001048 $d
             tvout.s:660    .text:0000000000001058 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001064 $t
             tvout.s:663    .text:0000000000001068 $d
             forth.s:717    .text:0000000000002ae4 TWOSL
             forth.s:381    .text:0000000000002838 CSTOR
             forth.s:757    .text:0000000000002b30 DDROP
             tvout.s:691    .text:00000000000010e0 _HIDE_CURSOR
             tvout.s:691    .text:00000000000010ec $t
             tvout.s:694    .text:00000000000010f0 $d
             forth.s:577    .text:00000000000029d4 LSHIFT
             forth.s:538    .text:0000000000002978 ORR
             tvout.s:704    .text:0000000000001118 _TV_AT
             tvout.s:704    .text:000000000000111e $t
ARM GAS  forth.s 			page 192


             tvout.s:704    .text:0000000000001120 TV_AT
             tvout.s:719    .text:0000000000001144 $d
             tvout.s:719    .text:0000000000001148 _INPUT
             tvout.s:719    .text:000000000000114e $t
             tvout.s:719    .text:0000000000001150 INPUT
             tvout.s:721    .text:0000000000001154 $d
             forth.s:1621   .text:00000000000032a8 PAD
             forth.s:2807   .text:000000000000400c ACCEP
             forth.s:512    .text:0000000000002944 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001180 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
ARM GAS  forth.s 			page 193


       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
ARM GAS  forth.s 			page 194


       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:000000000000118c sc_ascii
         mcSaite.inc:100    .text:0000000000001240 shifted
         mcSaite.inc:151    .text:00000000000012a0 altchar
         mcSaite.inc:167    .text:00000000000012b0 extended
         mcSaite.inc:191    .text:00000000000012d8 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000130e $t
           ps2_kbd.s:179    .text:000000000000143a send_bit
           ps2_kbd.s:107    .text:0000000000001370 start_bit
           ps2_kbd.s:118    .text:0000000000001394 parity_bit
           ps2_kbd.s:125    .text:00000000000013a8 stop_bit
           ps2_kbd.s:152    .text:00000000000013fe store_code
ARM GAS  forth.s 			page 195


           ps2_kbd.s:253    .text:00000000000014ce do_async_key
           ps2_kbd.s:204    .text:000000000000147e send_parity
           ps2_kbd.s:211    .text:0000000000001490 send_stop
           ps2_kbd.s:218    .text:000000000000149a rx_ack_bit
           ps2_kbd.s:236    .text:00000000000014ba is_async_key
           ps2_kbd.s:286    .text:000000000000151e async_keys
           ps2_kbd.s:378    .text:0000000000001604 table_scan
           ps2_kbd.s:260    .text:00000000000014e0 set_async_key
           ps2_kbd.s:295    .text:000000000000152c async_jump
           ps2_kbd.s:265    .text:00000000000014ee shift_key
           ps2_kbd.s:273    .text:00000000000014fe set_reset
           ps2_kbd.s:268    .text:00000000000014f4 ctrl_key
           ps2_kbd.s:271    .text:00000000000014fa alt_key
           ps2_kbd.s:287    .text:000000000000151e $d
           ps2_kbd.s:340    .text:00000000000015ac $d
           ps2_kbd.s:340    .text:00000000000015b0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000015ba $t
           ps2_kbd.s:340    .text:00000000000015bc KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000015cc keycode
           ps2_kbd.s:365    .text:00000000000015f4 wait_code
           ps2_kbd.s:396    .text:000000000000161e $d
           ps2_kbd.s:396    .text:0000000000001622 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001678 inkey_exit
           ps2_kbd.s:418    .text:000000000000167c pause_key
           ps2_kbd.s:427    .text:0000000000001692 do_modifiers
           ps2_kbd.s:436    .text:00000000000016aa shift_down
           ps2_kbd.s:440    .text:00000000000016b0 altchar_down
           ps2_kbd.s:444    .text:00000000000016b6 ctrl_down
           ps2_kbd.s:452    .text:00000000000016d2 do_capslock
           ps2_kbd.s:478    .text:00000000000016f6 kbd_send
           ps2_kbd.s:553    .text:00000000000017ea kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001808 $d
           ps2_kbd.s:567    .text:000000000000180c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001814 $t
           ps2_kbd.s:567    .text:0000000000001814 KBD_RST
           ps2_kbd.s:591    .text:000000000000185e $d
           ps2_kbd.s:591    .text:0000000000001862 _KBD_LED
           ps2_kbd.s:591    .text:000000000000186a $t
           ps2_kbd.s:591    .text:000000000000186c KBD_LED
           ps2_kbd.s:616    .text:00000000000018c0 $d
           ps2_kbd.s:616    .text:00000000000018c4 _CAPS_LED
           ps2_kbd.s:616    .text:00000000000018d0 CAPS_LED
           ps2_kbd.s:633    .text:00000000000018fa $d
           ps2_kbd.s:633    .text:00000000000018fe _WKEY
           ps2_kbd.s:633    .text:0000000000001908 WKEY
           ps2_kbd.s:635    .text:000000000000190c $d
           ps2_kbd.s:640    .text:0000000000001924 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001944 $t
         spi-flash.s:85     .text:00000000000019e6 $d
         spi-flash.s:85     .text:00000000000019ea _CHIP_SEL
         spi-flash.s:85     .text:00000000000019f4 CHIP_SEL
         spi-flash.s:97     .text:0000000000001a12 $d
         spi-flash.s:97     .text:0000000000001a16 _CHIP_DSEL
ARM GAS  forth.s 			page 196


         spi-flash.s:97     .text:0000000000001a20 $t
         spi-flash.s:97     .text:0000000000001a20 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001a4e $d
         spi-flash.s:113    .text:0000000000001a52 _RD_BYTE
         spi-flash.s:113    .text:0000000000001a5a $t
         spi-flash.s:113    .text:0000000000001a5c RD_BYTE
         spi-flash.s:133    .text:0000000000001a84 $d
         spi-flash.s:133    .text:0000000000001a88 _WR_BYTE
         spi-flash.s:133    .text:0000000000001a90 $t
         spi-flash.s:133    .text:0000000000001a90 WR_BYTE
         spi-flash.s:151    .text:0000000000001ab4 $d
         spi-flash.s:151    .text:0000000000001ab8 _WR_DIS
         spi-flash.s:151    .text:0000000000001ac0 WR_DIS
         spi-flash.s:153    .text:0000000000001ac4 $d
         spi-flash.s:163    .text:0000000000001ae0 _WR_ENBL
         spi-flash.s:163    .text:0000000000001ae8 $t
         spi-flash.s:163    .text:0000000000001ae8 WR_ENBL
         spi-flash.s:165    .text:0000000000001aec $d
         spi-flash.s:175    .text:0000000000001b08 _RD_SR
         spi-flash.s:175    .text:0000000000001b0e $t
         spi-flash.s:175    .text:0000000000001b10 RD_SR
         spi-flash.s:177    .text:0000000000001b14 $d
         spi-flash.s:185    .text:0000000000001b38 sr_cmd
         spi-flash.s:191    .text:0000000000001b3f _SEND_ADR
         spi-flash.s:191    .text:0000000000001b48 $t
         spi-flash.s:191    .text:0000000000001b48 SEND_ADR
         spi-flash.s:193    .text:0000000000001b4c $d
         spi-flash.s:208    .text:0000000000001b80 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001b8a $t
         spi-flash.s:208    .text:0000000000001b8c WAIT_DONE
         spi-flash.s:210    .text:0000000000001b90 $d
         spi-flash.s:223    .text:0000000000001bc0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001bca $t
         spi-flash.s:223    .text:0000000000001bcc ERASE_BLK
         spi-flash.s:225    .text:0000000000001bd0 $d
         spi-flash.s:238    .text:0000000000001bf8 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001c04 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001c08 $d
         spi-flash.s:256    .text:0000000000001c38 _RD_BLK
         spi-flash.s:256    .text:0000000000001c40 RD_BLK
         spi-flash.s:258    .text:0000000000001c44 $d
         spi-flash.s:278    .text:0000000000001c8c _WR_BLK
         spi-flash.s:278    .text:0000000000001c94 WR_BLK
         spi-flash.s:280    .text:0000000000001c98 $d
             forth.s:2320   .text:0000000000003a24 HDOT
         spi-flash.s:316    .text:0000000000001cf0 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001cfc $t
         spi-flash.s:316    .text:0000000000001cfc SEARCH_FILE
         spi-flash.s:319    .text:0000000000001d00 $d
         spi-flash.s:325    .text:0000000000001d08 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001d14 ERASE_FILE
         spi-flash.s:328    .text:0000000000001d18 $d
         spi-flash.s:334    .text:0000000000001d20 _DIR
         spi-flash.s:334    .text:0000000000001d24 $t
         spi-flash.s:334    .text:0000000000001d24 DIR
         spi-flash.s:337    .text:0000000000001d28 $d
         spi-flash.s:343    .text:0000000000001d30 _SAVE
ARM GAS  forth.s 			page 197


         spi-flash.s:343    .text:0000000000001d38 SAVE
         spi-flash.s:346    .text:0000000000001d3c $d
         spi-flash.s:352    .text:0000000000001d44 _LOAD
         spi-flash.s:352    .text:0000000000001d4c LOAD
         spi-flash.s:355    .text:0000000000001d50 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:41     .text:0000000000001d78 p10
               fpu.s:58     .text:0000000000001da4 _PWR10
               fpu.s:58     .text:0000000000001daa $t
               fpu.s:58     .text:0000000000001dac PWR10
               fpu.s:88     .text:0000000000001de8 $d
               fpu.s:88     .text:0000000000001dec _FPSCR
               fpu.s:88     .text:0000000000001df2 $t
               fpu.s:98     .text:0000000000001e02 $d
               fpu.s:98     .text:0000000000001e06 _CLR_FPSCR
               fpu.s:98     .text:0000000000001e10 $t
               fpu.s:98     .text:0000000000001e10 CLR_FPSCR
               fpu.s:109    .text:0000000000001e1e $d
               fpu.s:109    .text:0000000000001e22 _TOS0
               fpu.s:109    .text:0000000000001e26 $t
               fpu.s:109    .text:0000000000001e28 TOS0
               fpu.s:118    .text:0000000000001e32 $d
               fpu.s:118    .text:0000000000001e36 _TOS1
               fpu.s:118    .text:0000000000001e3a $t
               fpu.s:118    .text:0000000000001e3c TOS1
               fpu.s:127    .text:0000000000001e46 $d
               fpu.s:127    .text:0000000000001e4a _TOS2
               fpu.s:127    .text:0000000000001e4e $t
               fpu.s:127    .text:0000000000001e50 TOS2
               fpu.s:136    .text:0000000000001e5a $d
               fpu.s:136    .text:0000000000001e5e _S0FROM
               fpu.s:136    .text:0000000000001e62 $t
               fpu.s:136    .text:0000000000001e64 S0FROM
               fpu.s:145    .text:0000000000001e6e $d
               fpu.s:145    .text:0000000000001e72 _S1FROM
               fpu.s:145    .text:0000000000001e76 $t
               fpu.s:145    .text:0000000000001e78 S1FROM
               fpu.s:154    .text:0000000000001e82 $d
               fpu.s:154    .text:0000000000001e86 _S2FROM
               fpu.s:154    .text:0000000000001e8a $t
               fpu.s:154    .text:0000000000001e8c S2FROM
               fpu.s:165    .text:0000000000001e96 $d
               fpu.s:165    .text:0000000000001e9a _FTOS
               fpu.s:165    .text:0000000000001e9e $t
               fpu.s:165    .text:0000000000001ea0 FTOS
               fpu.s:175    .text:0000000000001eae $d
               fpu.s:175    .text:0000000000001eb2 _TRUNC
               fpu.s:175    .text:0000000000001eb8 $t
               fpu.s:175    .text:0000000000001eb8 TRUNC
               fpu.s:185    .text:0000000000001ec6 $d
               fpu.s:185    .text:0000000000001eca _STOF
               fpu.s:185    .text:0000000000001ece $t
               fpu.s:185    .text:0000000000001ed0 STOF
               fpu.s:195    .text:0000000000001ede $d
               fpu.s:195    .text:0000000000001ee2 _FPLUS
ARM GAS  forth.s 			page 198


               fpu.s:195    .text:0000000000001ee8 FPLUS
               fpu.s:208    .text:0000000000001efe $d
               fpu.s:208    .text:0000000000001f02 _FMINUS
               fpu.s:208    .text:0000000000001f08 FMINUS
               fpu.s:222    .text:0000000000001f1e $d
               fpu.s:222    .text:0000000000001f22 _FSTAR
               fpu.s:222    .text:0000000000001f28 FSTAR
               fpu.s:235    .text:0000000000001f3e $d
               fpu.s:235    .text:0000000000001f42 _FSLH
               fpu.s:235    .text:0000000000001f48 FSLH
               fpu.s:248    .text:0000000000001f5e $d
               fpu.s:248    .text:0000000000001f62 _FNEG
               fpu.s:248    .text:0000000000001f6a $t
               fpu.s:248    .text:0000000000001f6c FNEG
               fpu.s:258    .text:0000000000001f7a $d
               fpu.s:258    .text:0000000000001f7e _FABS
               fpu.s:258    .text:0000000000001f84 FABS
               fpu.s:270    .text:0000000000001f96 $d
               fpu.s:270    .text:0000000000001f9a _SQRT
               fpu.s:270    .text:0000000000001fa0 SQRT
               fpu.s:280    .text:0000000000001fae $d
               fpu.s:280    .text:0000000000001fb2 _FZLESS
               fpu.s:280    .text:0000000000001fb6 $t
               fpu.s:280    .text:0000000000001fb8 FZLESS
               fpu.s:292    .text:0000000000001fce $d
               fpu.s:292    .text:0000000000001fd2 _FGREAT
               fpu.s:292    .text:0000000000001fd8 FGREAT
               fpu.s:294    .text:0000000000001fdc $d
             forth.s:843    .text:0000000000002bf0 INVER
               fpu.s:303    .text:0000000000001ff0 _FLESS
               fpu.s:303    .text:0000000000001ff4 FLESS
               fpu.s:305    .text:0000000000001ff8 $d
               fpu.s:313    .text:0000000000002008 _FMIN
               fpu.s:313    .text:0000000000002010 FMIN
               fpu.s:315    .text:0000000000002014 $d
               fpu.s:326    .text:0000000000002038 _FMAX
               fpu.s:326    .text:0000000000002040 FMAX
               fpu.s:328    .text:0000000000002044 $d
               fpu.s:341    .text:0000000000002068 _FSIGN
               fpu.s:341    .text:000000000000206e $t
               fpu.s:341    .text:0000000000002070 FSIGN
               fpu.s:352    .text:0000000000002082 $d
               fpu.s:352    .text:0000000000002086 _FEXP
               fpu.s:352    .text:000000000000208c FEXP
               fpu.s:363    .text:00000000000020a2 $d
               fpu.s:363    .text:00000000000020a6 _FMANT
               fpu.s:363    .text:00000000000020ac $t
               fpu.s:363    .text:00000000000020ac FMANT
               fpu.s:376    .text:00000000000020c6 $d
               fpu.s:376    .text:00000000000020ca _PI
               fpu.s:376    .text:00000000000020d0 PI
               fpu.s:385    .text:00000000000020de $d
               fpu.s:385    .text:00000000000020e2 _LOG2
               fpu.s:385    .text:00000000000020e8 LOG2
               fpu.s:395    .text:00000000000020f6 $d
               fpu.s:395    .text:00000000000020fa _LOG2TO10
               fpu.s:395    .text:0000000000002102 $t
ARM GAS  forth.s 			page 199


               fpu.s:395    .text:0000000000002104 LOG2TO10
               fpu.s:397    .text:0000000000002108 $d
             forth.s:521    .text:0000000000002954 ZLESS
               fpu.s:415    .text:0000000000002138 _NUMBER
               fpu.s:415    .text:0000000000002140 NUMBER
               fpu.s:417    .text:0000000000002144 $d
             forth.s:2038   .text:00000000000036fc INTQ
            strtof.s:180    .text:0000000000002350 FLOATQ
               fpu.s:422    .text:0000000000002160 $d
            strtof.s:28     .text:0000000000002168 powersof10
            strtof.s:35     *ABS*:0000000000000000 fzero
            strtof.s:36     *ABS*:000000003f800000 fone
            strtof.s:37     *ABS*:00000000bf800000 fminus1
            strtof.s:38     *ABS*:0000000041200000 ften
            strtof.s:42     .text:0000000000002180 power10
            strtof.s:43     .text:0000000000002180 $t
            strtof.s:44     .text:0000000000002184 $d
            strtof.s:56     .text:00000000000021a4 bit_state
            strtof.s:57     .text:00000000000021a4 $t
            strtof.s:58     .text:00000000000021a8 $d
             forth.s:1592   .text:0000000000003268 PICK
            strtof.s:70     .text:00000000000021c8 mult_div_exp
            strtof.s:71     .text:00000000000021c8 $t
            strtof.s:72     .text:00000000000021cc $d
             forth.s:746    .text:0000000000002b1c NROT
            strtof.s:98     .text:0000000000002248 pos_exp
             forth.s:859    .text:0000000000002c14 ABSS
            strtof.s:83     .text:0000000000002200 div_loop
             forth.s:964    .text:0000000000002cec GREAT
            strtof.s:100    .text:000000000000224c mult_loop
            strtof.s:123    .text:00000000000022a0 div_fract
            strtof.s:124    .text:00000000000022a0 $t
            strtof.s:125    .text:00000000000022a4 $d
            strtof.s:141    .text:00000000000022d8 decimals
            strtof.s:142    .text:00000000000022d8 $t
            strtof.s:143    .text:00000000000022dc $d
             forth.s:1968   .text:0000000000003638 PARSE_DIGITS
            strtof.s:157    .text:0000000000002300 exponent
            strtof.s:158    .text:0000000000002300 $t
            strtof.s:159    .text:0000000000002304 $d
             forth.s:2013   .text:00000000000036b2 NEGQ
             forth.s:851    .text:0000000000002c04 NEGAT
            strtof.s:180    .text:0000000000002348 _FLOATQ
            strtof.s:184    .text:0000000000002354 $d
             forth.s:1924   .text:00000000000035b8 DECIM
             forth.s:1941   .text:00000000000035dc DIGTQ
            strtof.s:221    .text:00000000000023f0 must_be_dot
             forth.s:1997   .text:0000000000003698 CHARQ
            strtof.s:266    .text:00000000000024c8 error1
            strtof.s:271    .text:00000000000024dc error2
            strtof.s:255    .text:0000000000002490 build_float
             forth.s:409    .text:000000000000286c DRFROM
            strtof.s:276    .text:00000000000024ec restore_base
              ftoa.s:27     .text:00000000000024fc pwr10m9
              ftoa.s:37     .text:0000000000002520 pwr10e0
              ftoa.s:51     .text:0000000000002548 rounding
              ftoa.s:72     .text:000000000000257c _EDOT
ARM GAS  forth.s 			page 200


              ftoa.s:72     .text:0000000000002580 EDOT
              ftoa.s:75     .text:0000000000002584 $d
              ftoa.s:84     .text:000000000000258c _FDOT
              ftoa.s:84     .text:0000000000002590 FDOT
              ftoa.s:86     .text:0000000000002594 $d
             forth.s:987    .text:0000000000002d18 MIN
              ftoa.s:99     .text:00000000000025b8 itoa
              ftoa.s:100    .text:00000000000025b8 $t
              ftoa.s:101    .text:00000000000025bc $d
             forth.s:1176   .text:0000000000002e90 HLD
             forth.s:1831   .text:00000000000034c4 DIGS
             forth.s:80     .text:00000000000025d8 $t
             forth.s:103    .text:00000000000025f0 COMPI_NEST
             forth.s:116    .text:000000000000260e TSTDIN
             forth.s:123    .text:0000000000002618 TSTDOUT
             forth.s:132    .text:0000000000002622 $d
             forth.s:132    .text:0000000000002626 _CFSR
             forth.s:144    .text:0000000000002646 $d
             forth.s:144    .text:000000000000264a _BFAR
             forth.s:156    .text:000000000000266a $d
             forth.s:156    .text:000000000000266e _QKEY
             forth.s:156    .text:0000000000002674 QKEY
             forth.s:158    .text:0000000000002678 $d
             forth.s:1644   .text:00000000000032e0 ATEXE
             forth.s:166    .text:0000000000002688 _KEY
             forth.s:166    .text:000000000000268c $t
             forth.s:166    .text:000000000000268c KEY
             forth.s:168    .text:0000000000002690 KEY1
             forth.s:169    .text:0000000000002690 $d
             forth.s:178    .text:00000000000026a8 _EMIT
             forth.s:180    .text:00000000000026b4 $d
             forth.s:214    .text:00000000000026c4 _RAND
             forth.s:214    .text:00000000000026cc RAND
             forth.s:216    .text:00000000000026d0 $d
             forth.s:1083   .text:0000000000002dbc SEED
             forth.s:1495   .text:0000000000003164 MODD
             forth.s:245    .text:0000000000002740 _PAUSE
             forth.s:245    .text:0000000000002746 $t
             forth.s:245    .text:0000000000002748 PAUSE
             forth.s:247    .text:000000000000274c $d
             forth.s:1101   .text:0000000000002de4 TIMER
             forth.s:249    .text:0000000000002754 PAUSE_LOOP
             forth.s:254    .text:000000000000276c PAUSE_EXIT
             forth.s:261    .text:0000000000002774 _ULED
             forth.s:270    .text:0000000000002798 ULED_OFF
             forth.s:284    .text:000000000000279c $d
             forth.s:284    .text:00000000000027a0 _NOP
             forth.s:284    .text:00000000000027a4 $t
             forth.s:284    .text:00000000000027a4 NOP
             forth.s:301    .text:00000000000027b0 $d
             forth.s:301    .text:00000000000027b4 _EXECU
             forth.s:301    .text:00000000000027bc $t
             forth.s:301    .text:00000000000027bc EXECU
             forth.s:321    .text:00000000000027d8 NEXT1
             forth.s:339    .text:00000000000027f4 QBRAN1
             forth.s:356    .text:0000000000002800 $d
             forth.s:356    .text:0000000000002804 _EXIT
ARM GAS  forth.s 			page 201


             forth.s:356    .text:000000000000280c EXIT
             forth.s:357    .text:000000000000280c $d
             forth.s:363    .text:0000000000002814 _STORE
             forth.s:363    .text:0000000000002816 $t
             forth.s:373    .text:0000000000002824 $d
             forth.s:373    .text:0000000000002828 _AT
             forth.s:373    .text:000000000000282a $t
             forth.s:381    .text:0000000000002830 $d
             forth.s:381    .text:0000000000002834 _CSTOR
             forth.s:391    .text:0000000000002844 $d
             forth.s:391    .text:0000000000002848 _CAT
             forth.s:400    .text:0000000000002850 $d
             forth.s:400    .text:0000000000002854 _RFROM
             forth.s:409    .text:0000000000002862 $d
             forth.s:409    .text:0000000000002866 _DRFROM
             forth.s:409    .text:000000000000286a $t
             forth.s:420    .text:000000000000287e $d
             forth.s:420    .text:0000000000002882 _RAT
             forth.s:429    .text:0000000000002892 $d
             forth.s:429    .text:0000000000002896 _TOR
             forth.s:438    .text:00000000000028a6 $d
             forth.s:438    .text:00000000000028aa _DTOR
             forth.s:438    .text:00000000000028ae $t
             forth.s:438    .text:00000000000028b0 DTOR
             forth.s:450    .text:00000000000028c2 $d
             forth.s:450    .text:00000000000028c6 _RPSTOR
             forth.s:450    .text:00000000000028ca $t
             forth.s:450    .text:00000000000028cc RPSTOR
             forth.s:459    .text:00000000000028d4 $d
             forth.s:459    .text:00000000000028d8 _SPSTOR
             forth.s:459    .text:00000000000028dc $t
             forth.s:459    .text:00000000000028dc SPSTOR
             forth.s:468    .text:00000000000028e4 $d
             forth.s:468    .text:00000000000028e8 _SPAT
             forth.s:468    .text:00000000000028ec $t
             forth.s:468    .text:00000000000028ec SPAT
             forth.s:477    .text:00000000000028f4 $d
             forth.s:477    .text:00000000000028f8 _RPAT
             forth.s:477    .text:00000000000028fc $t
             forth.s:477    .text:00000000000028fc RPAT
             forth.s:486    .text:0000000000002904 $d
             forth.s:486    .text:0000000000002908 _DROP
             forth.s:494    .text:0000000000002916 $d
             forth.s:494    .text:000000000000291a _DUPP
             forth.s:494    .text:000000000000291e $t
             forth.s:502    .text:0000000000002926 $d
             forth.s:502    .text:000000000000292a _SWAP
             forth.s:512    .text:0000000000002938 $d
             forth.s:512    .text:000000000000293c _OVER
             forth.s:521    .text:000000000000294c $d
             forth.s:521    .text:0000000000002950 _ZLESS
             forth.s:529    .text:000000000000295a $d
             forth.s:529    .text:000000000000295e _ANDD
             forth.s:529    .text:0000000000002962 $t
             forth.s:538    .text:000000000000296e $d
             forth.s:538    .text:0000000000002972 _ORR
             forth.s:547    .text:0000000000002982 $d
ARM GAS  forth.s 			page 202


             forth.s:547    .text:0000000000002986 _XORR
             forth.s:547    .text:000000000000298a $t
             forth.s:556    .text:0000000000002996 $d
             forth.s:556    .text:000000000000299a _UPLUS
             forth.s:556    .text:000000000000299e $t
             forth.s:556    .text:00000000000029a0 UPLUS
             forth.s:568    .text:00000000000029b0 $d
             forth.s:568    .text:00000000000029b4 _RSHIFT
             forth.s:577    .text:00000000000029c6 $d
             forth.s:577    .text:00000000000029ca _LSHIFT
             forth.s:586    .text:00000000000029de $d
             forth.s:586    .text:00000000000029e2 _PLUS
             forth.s:586    .text:00000000000029e4 $t
             forth.s:595    .text:00000000000029ec $d
             forth.s:595    .text:00000000000029f0 _SUBB
             forth.s:595    .text:00000000000029f2 $t
             forth.s:604    .text:00000000000029fe $d
             forth.s:604    .text:0000000000002a02 _STAR
             forth.s:604    .text:0000000000002a04 $t
             forth.s:613    .text:0000000000002a0e $d
             forth.s:613    .text:0000000000002a12 _UMSTA
             forth.s:613    .text:0000000000002a16 $t
             forth.s:613    .text:0000000000002a18 UMSTA
             forth.s:625    .text:0000000000002a24 $d
             forth.s:625    .text:0000000000002a28 _MSTAR
             forth.s:625    .text:0000000000002a2c MSTAR
             forth.s:636    .text:0000000000002a38 $d
             forth.s:636    .text:0000000000002a3c _ONEP
             forth.s:644    .text:0000000000002a46 $d
             forth.s:644    .text:0000000000002a4a _ONEM
             forth.s:652    .text:0000000000002a56 $d
             forth.s:652    .text:0000000000002a5a _TWOP
             forth.s:652    .text:0000000000002a60 TWOP
             forth.s:660    .text:0000000000002a66 $d
             forth.s:660    .text:0000000000002a6a _TWOM
             forth.s:660    .text:0000000000002a70 TWOM
             forth.s:668    .text:0000000000002a76 $d
             forth.s:668    .text:0000000000002a7a _CELLP
             forth.s:668    .text:0000000000002a80 $t
             forth.s:668    .text:0000000000002a80 CELLP
             forth.s:676    .text:0000000000002a86 $d
             forth.s:676    .text:0000000000002a8a _CELLM
             forth.s:676    .text:0000000000002a90 $t
             forth.s:676    .text:0000000000002a90 CELLM
             forth.s:684    .text:0000000000002a96 $d
             forth.s:684    .text:0000000000002a9a _BLANK
             forth.s:684    .text:0000000000002aa0 BLANK
             forth.s:693    .text:0000000000002aaa $d
             forth.s:693    .text:0000000000002aae _CELLS
             forth.s:693    .text:0000000000002ab4 $t
             forth.s:693    .text:0000000000002ab4 CELLS
             forth.s:701    .text:0000000000002aba $d
             forth.s:701    .text:0000000000002abe _CELLSL
             forth.s:701    .text:0000000000002ac4 $t
             forth.s:701    .text:0000000000002ac4 CELLSL
             forth.s:709    .text:0000000000002aca $d
             forth.s:709    .text:0000000000002ace _TWOST
ARM GAS  forth.s 			page 203


             forth.s:709    .text:0000000000002ad4 TWOST
             forth.s:717    .text:0000000000002ada $d
             forth.s:717    .text:0000000000002ade _TWOSL
             forth.s:725    .text:0000000000002aea $d
             forth.s:725    .text:0000000000002aee _QDUP
             forth.s:735    .text:0000000000002afe $d
             forth.s:735    .text:0000000000002b02 _ROT
             forth.s:735    .text:0000000000002b06 $t
             forth.s:746    .text:0000000000002b12 $d
             forth.s:746    .text:0000000000002b16 _NROT
             forth.s:757    .text:0000000000002b26 $d
             forth.s:757    .text:0000000000002b2a _DDROP
             forth.s:757    .text:0000000000002b30 $t
             forth.s:766    .text:0000000000002b3a $d
             forth.s:766    .text:0000000000002b3e _TDROP
             forth.s:766    .text:0000000000002b44 $t
             forth.s:775    .text:0000000000002b4e $d
             forth.s:775    .text:0000000000002b52 _DDUP
             forth.s:785    .text:0000000000002b64 $d
             forth.s:785    .text:0000000000002b68 _DPLUS
             forth.s:785    .text:0000000000002b6c DPLUS
             forth.s:798    .text:0000000000002b80 $d
             forth.s:798    .text:0000000000002b84 _DABS
             forth.s:798    .text:0000000000002b8c DABS
             forth.s:814    .text:0000000000002ba8 $d
             forth.s:814    .text:0000000000002bac _UDGREAT
             forth.s:814    .text:0000000000002bb0 $t
             forth.s:814    .text:0000000000002bb0 UDGREAT
             forth.s:831    .text:0000000000002bcc $d
             forth.s:831    .text:0000000000002bd0 _DZEQUAL
             forth.s:831    .text:0000000000002bd4 $t
             forth.s:831    .text:0000000000002bd4 DZEQUAL
             forth.s:843    .text:0000000000002be6 $d
             forth.s:843    .text:0000000000002bea _INVER
             forth.s:843    .text:0000000000002bee $t
             forth.s:851    .text:0000000000002bf6 $d
             forth.s:851    .text:0000000000002bfa _NEGAT
             forth.s:859    .text:0000000000002c0a $d
             forth.s:859    .text:0000000000002c0e _ABSS
             forth.s:859    .text:0000000000002c12 $t
             forth.s:869    .text:0000000000002c1e $d
             forth.s:869    .text:0000000000002c22 _CLZ
             forth.s:869    .text:0000000000002c26 $t
             forth.s:869    .text:0000000000002c28 CLZ
             forth.s:877    .text:0000000000002c2e $d
             forth.s:877    .text:0000000000002c32 _CTZ
             forth.s:877    .text:0000000000002c36 $t
             forth.s:877    .text:0000000000002c38 CTZ
             forth.s:892    .text:0000000000002c50 $d
             forth.s:892    .text:0000000000002c54 _ZEQUAL
             forth.s:892    .text:0000000000002c58 ZEQUAL
             forth.s:903    .text:0000000000002c66 $d
             forth.s:903    .text:0000000000002c6a _EQUAL
             forth.s:903    .text:0000000000002c6c $t
             forth.s:915    .text:0000000000002c7c $d
             forth.s:915    .text:0000000000002c80 _DIFF
             forth.s:915    .text:0000000000002c84 DIFF
ARM GAS  forth.s 			page 204


             forth.s:928    .text:0000000000002c9c $d
             forth.s:928    .text:0000000000002ca0 _ULESS
             forth.s:940    .text:0000000000002cb4 $d
             forth.s:940    .text:0000000000002cb8 _LESS
             forth.s:940    .text:0000000000002cba $t
             forth.s:940    .text:0000000000002cbc LESS
             forth.s:952    .text:0000000000002ccc $d
             forth.s:952    .text:0000000000002cd0 _UGREAT
             forth.s:952    .text:0000000000002cd4 UGREAT
             forth.s:964    .text:0000000000002ce4 $d
             forth.s:964    .text:0000000000002ce8 _GREAT
             forth.s:964    .text:0000000000002cea $t
             forth.s:976    .text:0000000000002cfc $d
             forth.s:976    .text:0000000000002d00 _MAX
             forth.s:976    .text:0000000000002d04 $t
             forth.s:976    .text:0000000000002d04 MAX
             forth.s:987    .text:0000000000002d10 $d
             forth.s:987    .text:0000000000002d14 _MIN
             forth.s:987    .text:0000000000002d18 $t
             forth.s:998    .text:0000000000002d24 $d
             forth.s:998    .text:0000000000002d28 _PSTOR
             forth.s:998    .text:0000000000002d2c PSTOR
             forth.s:1010   .text:0000000000002d3c $d
             forth.s:1010   .text:0000000000002d40 _DSTOR
             forth.s:1010   .text:0000000000002d44 DSTOR
             forth.s:1022   .text:0000000000002d58 $d
             forth.s:1022   .text:0000000000002d5c _DAT
             forth.s:1022   .text:0000000000002d60 DAT
             forth.s:1032   .text:0000000000002d6a $d
             forth.s:1032   .text:0000000000002d6e _COUNT
             forth.s:1032   .text:0000000000002d74 $t
             forth.s:1042   .text:0000000000002d80 $d
             forth.s:1042   .text:0000000000002d84 _DNEGA
             forth.s:1042   .text:0000000000002d8c $t
             forth.s:1042   .text:0000000000002d8c DNEGA
             forth.s:1059   .text:0000000000002d9c DOVAR
             forth.s:1070   .text:0000000000002da8 DOCON
             forth.s:1083   .text:0000000000002db2 $d
             forth.s:1083   .text:0000000000002db6 _SEED
             forth.s:1092   .text:0000000000002dc6 $d
             forth.s:1092   .text:0000000000002dca _MSEC
             forth.s:1101   .text:0000000000002dda $d
             forth.s:1101   .text:0000000000002dde _TIMER
             forth.s:1101   .text:0000000000002de4 $t
             forth.s:1110   .text:0000000000002df0 $d
             forth.s:1110   .text:0000000000002df4 _TBOOT
             forth.s:1110   .text:0000000000002dfa $t
             forth.s:1110   .text:0000000000002dfc TBOOT
             forth.s:1119   .text:0000000000002e08 $d
             forth.s:1119   .text:0000000000002e0c _BASE
             forth.s:1129   .text:0000000000002e20 TEMP
             forth.s:1138   .text:0000000000002e2c $d
             forth.s:1138   .text:0000000000002e30 _SPAN
             forth.s:1138   .text:0000000000002e38 SPAN
             forth.s:1147   .text:0000000000002e44 $d
             forth.s:1147   .text:0000000000002e48 _INN
             forth.s:1147   .text:0000000000002e4c $t
ARM GAS  forth.s 			page 205


             forth.s:1147   .text:0000000000002e4c INN
             forth.s:1157   .text:0000000000002e58 $d
             forth.s:1157   .text:0000000000002e5c _NTIB
             forth.s:1157   .text:0000000000002e64 NTIB
             forth.s:1166   .text:0000000000002e70 $d
             forth.s:1166   .text:0000000000002e74 _TEVAL
             forth.s:1166   .text:0000000000002e7a $t
             forth.s:1166   .text:0000000000002e7c TEVAL
             forth.s:1176   .text:0000000000002e88 $d
             forth.s:1176   .text:0000000000002e8c _HLD
             forth.s:1176   .text:0000000000002e90 $t
             forth.s:1186   .text:0000000000002e9c $d
             forth.s:1186   .text:0000000000002ea0 _CNTXT
             forth.s:1186   .text:0000000000002ea8 $t
             forth.s:1186   .text:0000000000002ea8 CNTXT
             forth.s:1187   .text:0000000000002ea8 CRRNT
             forth.s:1197   .text:0000000000002eb4 $d
             forth.s:1197   .text:0000000000002eb8 _CPP
             forth.s:1197   .text:0000000000002ebc CPP
             forth.s:1207   .text:0000000000002ec8 $d
             forth.s:1207   .text:0000000000002ecc _FCP
             forth.s:1207   .text:0000000000002ed0 $t
             forth.s:1207   .text:0000000000002ed0 FCP
             forth.s:1217   .text:0000000000002edc $d
             forth.s:1217   .text:0000000000002ee0 _LAST
             forth.s:1217   .text:0000000000002ee8 LAST
             forth.s:1231   .text:0000000000002ef4 $d
             forth.s:1231   .text:0000000000002ef8 _USER_BEGIN
             forth.s:1231   .text:0000000000002f04 USER_BEGIN
             forth.s:1235   .text:0000000000002f10 USR_BGN_ADR
             forth.s:1236   .text:0000000000002f10 $d
             forth.s:1242   .text:0000000000002f18 _USER_END
             forth.s:1242   .text:0000000000002f24 USER_END
             forth.s:1246   .text:0000000000002f30 USER_END_ADR
             forth.s:1247   .text:0000000000002f30 $d
             forth.s:1259   .text:0000000000002f38 _WITHI
             forth.s:1259   .text:0000000000002f40 WITHI
             forth.s:1261   .text:0000000000002f44 $d
             forth.s:1276   .text:0000000000002f64 _UMMOD
             forth.s:1276   .text:0000000000002f6c UMMOD
             forth.s:1280   .text:0000000000002f76 UMMOD0
             forth.s:1287   .text:0000000000002f86 UMMOD1
             forth.s:1293   .text:0000000000002f90 UMMOD2
             forth.s:1306   .text:0000000000002f9c $d
             forth.s:1306   .text:0000000000002fa0 _MSMOD
             forth.s:1306   .text:0000000000002fa6 $t
             forth.s:1306   .text:0000000000002fa8 MSMOD
             forth.s:1308   .text:0000000000002fac $d
             forth.s:1317   .text:0000000000002fd4 MMOD1
             forth.s:1324   .text:0000000000002ff0 MMOD2
             forth.s:1332   .text:0000000000003010 MMOD3
             forth.s:1339   .text:0000000000003018 _STOD
             forth.s:1339   .text:000000000000301c $t
             forth.s:1339   .text:000000000000301c STOD
             forth.s:1348   .text:0000000000003028 $d
             forth.s:1348   .text:000000000000302c _D2STAR
             forth.s:1348   .text:0000000000003030 $t
ARM GAS  forth.s 			page 206


             forth.s:1348   .text:0000000000003030 D2STAR
             forth.s:1360   .text:0000000000003042 $d
             forth.s:1360   .text:0000000000003046 _D2SL
             forth.s:1360   .text:000000000000304a $t
             forth.s:1360   .text:000000000000304c D2SL
             forth.s:1375   .text:000000000000305a $d
             forth.s:1375   .text:000000000000305e _DSLMOD
             forth.s:1375   .text:0000000000003064 $t
             forth.s:1375   .text:0000000000003064 DSLMOD
             forth.s:1411   .text:00000000000030b0 $d
             forth.s:1411   .text:00000000000030b4 _DSLASH
             forth.s:1411   .text:00000000000030b8 DSLASH
             forth.s:1413   .text:00000000000030bc $d
             forth.s:1433   .text:0000000000003100 _DSTAR
             forth.s:1433   .text:0000000000003104 DSTAR
             forth.s:1482   .text:000000000000313a $d
             forth.s:1482   .text:000000000000313e _SLMOD
             forth.s:1484   .text:0000000000003148 $d
             forth.s:1495   .text:0000000000003160 _MODD
             forth.s:1495   .text:0000000000003164 $t
             forth.s:1497   .text:0000000000003168 $d
             forth.s:1506   .text:0000000000003178 _SLASH
             forth.s:1506   .text:000000000000317a $t
             forth.s:1506   .text:000000000000317c SLASH
             forth.s:1508   .text:0000000000003180 $d
             forth.s:1519   .text:0000000000003194 _SSMOD
             forth.s:1519   .text:000000000000319a $t
             forth.s:1519   .text:000000000000319c SSMOD
             forth.s:1521   .text:00000000000031a0 $d
             forth.s:1533   .text:00000000000031b8 _STASL
             forth.s:1533   .text:00000000000031bc STASL
             forth.s:1535   .text:00000000000031c0 $d
             forth.s:1549   .text:00000000000031d4 _ALGND
             forth.s:1549   .text:00000000000031dc $t
             forth.s:1549   .text:00000000000031dc ALGND
             forth.s:1560   .text:00000000000031ec $d
             forth.s:1560   .text:00000000000031f0 _TCHAR
             forth.s:1560   .text:00000000000031f6 $t
             forth.s:1560   .text:00000000000031f8 TCHAR
             forth.s:1562   .text:00000000000031fc $d
             forth.s:1572   .text:0000000000003234 TCHA1
             forth.s:1580   .text:000000000000323c _DEPTH
             forth.s:1580   .text:0000000000003242 $t
             forth.s:1580   .text:0000000000003244 DEPTH
             forth.s:1592   .text:000000000000325c $d
             forth.s:1592   .text:0000000000003260 _PICK
             forth.s:1594   .text:000000000000326c $d
             forth.s:1610   .text:0000000000003288 _HERE
             forth.s:1610   .text:0000000000003290 HERE
             forth.s:1612   .text:0000000000003294 $d
             forth.s:1621   .text:00000000000032a4 _PAD
             forth.s:1621   .text:00000000000032a8 $t
             forth.s:1623   .text:00000000000032ac $d
             forth.s:1634   .text:00000000000032c4 _TIB
             forth.s:1634   .text:00000000000032c8 $t
             forth.s:1634   .text:00000000000032c8 TIB
             forth.s:1644   .text:00000000000032d2 $d
ARM GAS  forth.s 			page 207


             forth.s:1644   .text:00000000000032d6 _ATEXE
             forth.s:1657   .text:00000000000032f4 $d
             forth.s:1657   .text:00000000000032f8 _CMOVE
             forth.s:1657   .text:00000000000032fe $t
             forth.s:1657   .text:0000000000003300 CMOVE
             forth.s:1664   .text:0000000000003312 CMOV1
             forth.s:1661   .text:000000000000330a CMOV0
             forth.s:1669   .text:000000000000331c CMOV2
             forth.s:1677   .text:0000000000003324 $d
             forth.s:1677   .text:0000000000003328 _MOVE
             forth.s:1695   .text:000000000000335a MOVE1
             forth.s:1692   .text:0000000000003356 MOVE3
             forth.s:1689   .text:0000000000003352 MOVE0
             forth.s:1700   .text:0000000000003364 MOVE2
             forth.s:1709   .text:000000000000336c $d
             forth.s:1709   .text:0000000000003370 _FILL
             forth.s:1717   .text:0000000000003386 FILL2
             forth.s:1713   .text:000000000000337e FILL1
             forth.s:1727   .text:000000000000338e $d
             forth.s:1727   .text:0000000000003392 _PACKS
             forth.s:1727   .text:0000000000003398 $t
             forth.s:1727   .text:0000000000003398 PACKS
             forth.s:1729   .text:000000000000339c $d
             forth.s:1758   .text:00000000000033f4 _DIGIT
             forth.s:1758   .text:00000000000033fa $t
             forth.s:1758   .text:00000000000033fc DIGIT
             forth.s:1760   .text:0000000000003400 $d
             forth.s:1775   .text:0000000000003434 _EXTRC
             forth.s:1775   .text:000000000000343c $t
             forth.s:1775   .text:000000000000343c EXTRC
             forth.s:1777   .text:0000000000003440 $d
             forth.s:1787   .text:0000000000003454 _BDIGS
             forth.s:1787   .text:0000000000003458 BDIGS
             forth.s:1789   .text:000000000000345c $d
             forth.s:1799   .text:0000000000003470 _HOLD
             forth.s:1799   .text:0000000000003478 HOLD
             forth.s:1801   .text:000000000000347c $d
             forth.s:1817   .text:00000000000034a0 _DIG
             forth.s:1817   .text:00000000000034a2 $t
             forth.s:1817   .text:00000000000034a4 DIG
             forth.s:1819   .text:00000000000034a8 $d
             forth.s:1831   .text:00000000000034c0 _DIGS
             forth.s:1833   .text:00000000000034c8 DIGS1
             forth.s:1834   .text:00000000000034c8 $d
             forth.s:1839   .text:00000000000034e4 DIGS2
             forth.s:1849   .text:00000000000034f0 _SIGN
             forth.s:1849   .text:00000000000034f8 SIGN
             forth.s:1851   .text:00000000000034fc $d
             forth.s:1855   .text:0000000000003514 SIGN1
             forth.s:1863   .text:000000000000351c _EDIGS
             forth.s:1863   .text:0000000000003520 EDIGS
             forth.s:1865   .text:0000000000003524 $d
             forth.s:1880   .text:0000000000003540 STRR
             forth.s:1881   .text:0000000000003540 $t
             forth.s:1882   .text:0000000000003544 $d
             forth.s:1899   .text:0000000000003570 _HEX
             forth.s:1899   .text:0000000000003574 $t
ARM GAS  forth.s 			page 208


             forth.s:1899   .text:0000000000003574 HEX
             forth.s:1901   .text:0000000000003578 $d
             forth.s:1912   .text:0000000000003590 _BIN
             forth.s:1912   .text:0000000000003594 $t
             forth.s:1912   .text:0000000000003594 BIN
             forth.s:1914   .text:0000000000003598 $d
             forth.s:1924   .text:00000000000035b0 _DECIM
             forth.s:1924   .text:00000000000035b8 $t
             forth.s:1926   .text:00000000000035bc $d
             forth.s:1941   .text:00000000000035d4 _DIGTQ
             forth.s:1943   .text:00000000000035e0 $d
             forth.s:1956   .text:0000000000003628 DGTQ1
             forth.s:1969   .text:0000000000003638 $t
             forth.s:1970   .text:000000000000363c $d
             forth.s:1998   .text:0000000000003698 $t
             forth.s:2015   .text:00000000000036b6 $d
             forth.s:2038   .text:00000000000036f6 _INTQ
             forth.s:2041   .text:0000000000003700 $d
             forth.s:2111   .text:0000000000003808 _SPACE
             forth.s:2111   .text:000000000000380e $t
             forth.s:2113   .text:0000000000003814 $d
             forth.s:2122   .text:0000000000003824 _SPACS
             forth.s:2122   .text:000000000000382c SPACS
             forth.s:2124   .text:0000000000003830 $d
             forth.s:2130   .text:000000000000384c CHAR2
             forth.s:2128   .text:0000000000003848 CHAR1
             forth.s:2139   .text:000000000000385c _TYPEE
             forth.s:2141   .text:0000000000003868 $d
             forth.s:2147   .text:0000000000003880 TYPE2
             forth.s:2143   .text:0000000000003874 TYPE1
             forth.s:2157   .text:0000000000003894 _CR
             forth.s:2159   .text:000000000000389c $d
             forth.s:2171   .text:00000000000038b8 DOSTR
             forth.s:2172   .text:00000000000038b8 $t
             forth.s:2174   .text:00000000000038bc $d
             forth.s:2192   .text:00000000000038e4 STRQP
             forth.s:2193   .text:00000000000038e4 $t
             forth.s:2194   .text:00000000000038e8 $d
             forth.s:2203   .text:00000000000038f0 DOTST
             forth.s:2204   .text:00000000000038f0 $t
             forth.s:2205   .text:00000000000038f4 $d
             forth.s:2216   .text:0000000000003900 $t
             forth.s:2217   .text:0000000000003904 $d
             forth.s:2227   .text:0000000000003914 _DOTR
             forth.s:2227   .text:0000000000003918 DOTR
             forth.s:2229   .text:000000000000391c $d
             forth.s:2244   .text:0000000000003940 _UDOTR
             forth.s:2244   .text:0000000000003944 $t
             forth.s:2244   .text:0000000000003944 UDOTR
             forth.s:2246   .text:0000000000003948 $d
             forth.s:2265   .text:0000000000003980 _UDOT
             forth.s:2267   .text:0000000000003988 $d
             forth.s:2281   .text:00000000000039a8 _DOT
             forth.s:2281   .text:00000000000039aa $t
             forth.s:2281   .text:00000000000039ac DOT
             forth.s:2283   .text:00000000000039b0 $d
             forth.s:2290   .text:00000000000039d4 DOT1
ARM GAS  forth.s 			page 209


             forth.s:2300   .text:00000000000039e8 _DDOT
             forth.s:2300   .text:00000000000039ec DDOT
             forth.s:2302   .text:00000000000039f0 $d
             forth.s:2320   .text:0000000000003a20 _HDOT
             forth.s:2322   .text:0000000000003a28 $d
             forth.s:2344   .text:0000000000003a70 _QUEST
             forth.s:2344   .text:0000000000003a72 $t
             forth.s:2344   .text:0000000000003a74 QUEST
             forth.s:2346   .text:0000000000003a78 $d
             forth.s:2360   .text:0000000000003a84 PARS
             forth.s:2361   .text:0000000000003a84 $t
             forth.s:2362   .text:0000000000003a88 $d
             forth.s:2428   .text:0000000000003b98 PARS8
             forth.s:2392   .text:0000000000003b0c PARS3
             forth.s:2375   .text:0000000000003ac4 PARS1
             forth.s:2390   .text:0000000000003b08 PARS2
             forth.s:2396   .text:0000000000003b18 PARS4
             forth.s:2408   .text:0000000000003b48 PARS5
             forth.s:2415   .text:0000000000003b6c PARS6
             forth.s:2421   .text:0000000000003b80 PARS7
             forth.s:2439   .text:0000000000003bac _PARSE
             forth.s:2439   .text:0000000000003bb2 $t
             forth.s:2439   .text:0000000000003bb4 PARSE
             forth.s:2441   .text:0000000000003bb8 $d
             forth.s:2462   .text:0000000000003bf8 _DOTPR
             forth.s:2462   .text:0000000000003bfc DOTPR
             forth.s:2464   .text:0000000000003c00 $d
             forth.s:2475   .text:0000000000003c18 _PAREN
             forth.s:2475   .text:0000000000003c1a $t
             forth.s:2475   .text:0000000000003c1c PAREN
             forth.s:2477   .text:0000000000003c20 $d
             forth.s:2488   .text:0000000000003c38 _BKSLA
             forth.s:2488   .text:0000000000003c3a $t
             forth.s:2488   .text:0000000000003c3c BKSLA
             forth.s:2490   .text:0000000000003c40 $d
             forth.s:2501   .text:0000000000003c58 _CHAR
             forth.s:2501   .text:0000000000003c60 CHAR
             forth.s:2503   .text:0000000000003c64 $d
             forth.s:2513   .text:0000000000003c7c _IMCHAR
             forth.s:2513   .text:0000000000003c84 IMCHAR
             forth.s:2515   .text:0000000000003c88 $d
             forth.s:3111   .text:00000000000043ac LITER
             forth.s:2524   .text:0000000000003c98 _WORDD
             forth.s:2524   .text:0000000000003ca0 WORDD
             forth.s:2526   .text:0000000000003ca4 $d
             forth.s:2538   .text:0000000000003cbc _TOKEN
             forth.s:2538   .text:0000000000003cc2 $t
             forth.s:2538   .text:0000000000003cc4 TOKEN
             forth.s:2540   .text:0000000000003cc8 $d
             forth.s:2705   .text:0000000000003eb8 UPPER
             forth.s:2554   .text:0000000000003cdc _NAMET
             forth.s:2554   .text:0000000000003ce2 $t
             forth.s:2554   .text:0000000000003ce4 NAMET
             forth.s:2556   .text:0000000000003ce8 $d
             forth.s:2575   .text:0000000000003d08 _SAMEQ
             forth.s:2575   .text:0000000000003d0e $t
             forth.s:2575   .text:0000000000003d10 SAMEQ
ARM GAS  forth.s 			page 210


             forth.s:2577   .text:0000000000003d14 $d
             forth.s:2594   .text:0000000000003d5c SAME2
             forth.s:2579   .text:0000000000003d20 SAME1
             forth.s:2609   .text:0000000000003d70 FIND
             forth.s:2610   .text:0000000000003d70 $t
             forth.s:2611   .text:0000000000003d74 $d
             forth.s:2618   .text:0000000000003d90 FIND1
             forth.s:2638   .text:0000000000003de8 FIND6
             forth.s:2631   .text:0000000000003dd0 FIND2
             forth.s:2636   .text:0000000000003de0 FIND3
             forth.s:2645   .text:0000000000003e00 FIND4
             forth.s:2651   .text:0000000000003e1c FIND5
             forth.s:2667   .text:0000000000003e44 _NAMEQ
             forth.s:2667   .text:0000000000003e4a $t
             forth.s:2667   .text:0000000000003e4c NAMEQ
             forth.s:2669   .text:0000000000003e50 $d
             forth.s:2684   .text:0000000000003e64 _ASCIZ
             forth.s:2684   .text:0000000000003e6a $t
             forth.s:2684   .text:0000000000003e6c ASCIZ
             forth.s:2686   .text:0000000000003e70 $d
             forth.s:2705   .text:0000000000003eb0 _UPPER
             forth.s:2705   .text:0000000000003eb6 $t
             forth.s:2707   .text:0000000000003ebc $d
             forth.s:2738   .text:0000000000003f40 BKSP
             forth.s:2739   .text:0000000000003f40 $t
             forth.s:2740   .text:0000000000003f44 $d
             forth.s:2754   .text:0000000000003f88 BACK1
             forth.s:2763   .text:0000000000003f8c TAP
             forth.s:2764   .text:0000000000003f8c $t
             forth.s:2765   .text:0000000000003f90 $d
             forth.s:2778   .text:0000000000003fa8 KTAP
             forth.s:2779   .text:0000000000003fa8 TTAP
             forth.s:2780   .text:0000000000003fa8 $t
             forth.s:2781   .text:0000000000003fac $d
             forth.s:2795   .text:0000000000003fec KTAP2
             forth.s:2792   .text:0000000000003fe4 KTAP1
             forth.s:2807   .text:0000000000004004 _ACCEP
             forth.s:2809   .text:0000000000004010 $d
             forth.s:2812   .text:000000000000401c ACCP1
             forth.s:2828   .text:0000000000004064 ACCP4
             forth.s:2824   .text:0000000000004058 ACCP2
             forth.s:2826   .text:000000000000405c ACCP3
             forth.s:2839   .text:0000000000004078 _QUERY
             forth.s:2839   .text:000000000000407e $t
             forth.s:2839   .text:0000000000004080 QUERY
             forth.s:2841   .text:0000000000004084 $d
             forth.s:2861   .text:00000000000040b8 _ABORT
             forth.s:2861   .text:00000000000040be $t
             forth.s:2863   .text:00000000000040c4 ABORT1
             forth.s:2864   .text:00000000000040c4 $d
             forth.s:2995   .text:0000000000004268 QUIT
             forth.s:2879   .text:00000000000040ec ABORQ
             forth.s:2880   .text:00000000000040ec $t
             forth.s:2881   .text:00000000000040f0 $d
             forth.s:2899   .text:0000000000004114 _INTER
             forth.s:2901   .text:0000000000004124 $d
             forth.s:2910   .text:0000000000004160 INTE1
ARM GAS  forth.s 			page 211


             forth.s:2907   .text:0000000000004156 $t
             forth.s:2908   .text:0000000000004158 $d
             forth.s:2914   .text:0000000000004170 INTE2
             forth.s:2921   .text:0000000000004178 _LBRAC
             forth.s:2921   .text:000000000000417a $t
             forth.s:2921   .text:000000000000417c LBRAC
             forth.s:2923   .text:0000000000004180 $d
             forth.s:2933   .text:0000000000004198 _DOTOK
             forth.s:2933   .text:000000000000419c $t
             forth.s:2933   .text:000000000000419c DOTOK
             forth.s:2935   .text:00000000000041a0 $d
             forth.s:2941   .text:00000000000041c4 DOTO1
             forth.s:2942   .text:00000000000041c4 $d
             forth.s:2950   .text:00000000000041d0 _QSTAC
             forth.s:2950   .text:00000000000041d8 QSTAC
             forth.s:2952   .text:00000000000041dc $d
             forth.s:2954   .text:00000000000041f2 $t
             forth.s:2955   .text:00000000000041f4 $d
             forth.s:2962   .text:00000000000041fc _EVAL
             forth.s:2964   .text:0000000000004208 EVAL1
             forth.s:2965   .text:0000000000004208 $d
             forth.s:2973   .text:0000000000004230 EVAL2
             forth.s:2983   .text:0000000000004240 _PRESE
             forth.s:2985   .text:000000000000424c $d
             forth.s:2995   .text:0000000000004260 _QUIT
             forth.s:2996   .text:0000000000004268 $d
             forth.s:2998   .text:0000000000004274 QUIT1
             forth.s:3000   .text:0000000000004278 QUIT2
             forth.s:3010   .text:000000000000428c _FORGET
             forth.s:3010   .text:0000000000004294 FORGET
             forth.s:3012   .text:0000000000004298 $d
             forth.s:3509   .text:0000000000004830 OVERT
             forth.s:3040   .text:00000000000042e0 $d
             forth.s:3040   .text:00000000000042e4 _TICK
             forth.s:3040   .text:00000000000042e6 $t
             forth.s:3040   .text:00000000000042e8 TICK
             forth.s:3042   .text:00000000000042ec $d
             forth.s:3046   .text:0000000000004300 TICK1
             forth.s:3054   .text:0000000000004308 _ALLOT
             forth.s:3054   .text:000000000000430e $t
             forth.s:3054   .text:0000000000004310 ALLOT
             forth.s:3056   .text:0000000000004314 $d
             forth.s:3065   .text:0000000000004324 _COMMA
             forth.s:3065   .text:0000000000004326 $t
             forth.s:3065   .text:0000000000004328 COMMA
             forth.s:3067   .text:000000000000432c $d
             forth.s:3081   .text:0000000000004348 $d
             forth.s:3081   .text:000000000000434c _BCOMP
             forth.s:3081   .text:0000000000004356 $t
             forth.s:3081   .text:0000000000004358 BCOMP
             forth.s:3083   .text:000000000000435c $d
             forth.s:3093   .text:000000000000436c _COMPI
             forth.s:3093   .text:0000000000004374 $t
             forth.s:3093   .text:0000000000004374 COMPI
             forth.s:3095   .text:0000000000004378 $d
             forth.s:3111   .text:00000000000043a4 _LITER
             forth.s:3111   .text:00000000000043ac $t
ARM GAS  forth.s 			page 212


             forth.s:3113   .text:00000000000043b0 $d
             forth.s:3548   .text:000000000000488c CALLC
             forth.s:3123   .text:00000000000043c4 STRCQ
             forth.s:3124   .text:00000000000043c4 $t
             forth.s:3125   .text:00000000000043c8 $d
             forth.s:3147   .text:0000000000004400 _FOR
             forth.s:3147   .text:0000000000004404 $t
             forth.s:3147   .text:0000000000004404 FOR
             forth.s:3149   .text:0000000000004408 $d
             forth.s:3158   .text:0000000000004420 _DO
             forth.s:3158   .text:0000000000004424 DO
             forth.s:3160   .text:0000000000004428 $d
             forth.s:3166   .text:0000000000004454 DOPLOOP
             forth.s:3167   .text:0000000000004454 $t
             forth.s:3183   .text:0000000000004476 $d
             forth.s:3183   .text:000000000000447a _PLOOP
             forth.s:3183   .text:0000000000004480 $t
             forth.s:3183   .text:0000000000004480 PLOOP
             forth.s:3185   .text:0000000000004484 $d
             forth.s:3189   .text:0000000000004498 DOLOOP
             forth.s:3190   .text:0000000000004498 $t
             forth.s:3208   .text:00000000000044c0 $d
             forth.s:3208   .text:00000000000044c4 _LOOP
             forth.s:3208   .text:00000000000044cc LOOP
             forth.s:3210   .text:00000000000044d0 $d
             forth.s:3221   .text:00000000000044e8 _BEGIN
             forth.s:3221   .text:00000000000044ee $t
             forth.s:3221   .text:00000000000044f0 BEGIN
             forth.s:3223   .text:00000000000044f4 $d
             forth.s:3232   .text:00000000000044fc $d
             forth.s:3232   .text:0000000000004500 _FNEXT
             forth.s:3232   .text:0000000000004508 FNEXT
             forth.s:3234   .text:000000000000450c $d
             forth.s:3242   .text:0000000000004524 _I
             forth.s:3242   .text:0000000000004526 $t
             forth.s:3242   .text:0000000000004528 I
             forth.s:3251   .text:0000000000004534 $d
             forth.s:3251   .text:0000000000004538 _J
             forth.s:3251   .text:000000000000453a $t
             forth.s:3251   .text:000000000000453c J
             forth.s:3261   .text:0000000000004548 $d
             forth.s:3261   .text:000000000000454c _UNTIL
             forth.s:3261   .text:0000000000004552 $t
             forth.s:3261   .text:0000000000004554 UNTIL
             forth.s:3263   .text:0000000000004558 $d
             forth.s:3272   .text:0000000000004570 _AGAIN
             forth.s:3272   .text:0000000000004576 $t
             forth.s:3272   .text:0000000000004578 AGAIN
             forth.s:3274   .text:000000000000457c $d
             forth.s:3283   .text:0000000000004594 _IFF
             forth.s:3283   .text:0000000000004598 IFF
             forth.s:3285   .text:000000000000459c $d
             forth.s:3297   .text:00000000000045c4 _AHEAD
             forth.s:3297   .text:00000000000045ca $t
             forth.s:3297   .text:00000000000045cc AHEAD
             forth.s:3299   .text:00000000000045d0 $d
             forth.s:3311   .text:00000000000045f8 _REPEA
ARM GAS  forth.s 			page 213


             forth.s:3311   .text:0000000000004600 REPEA
             forth.s:3313   .text:0000000000004604 $d
             forth.s:3324   .text:000000000000461c _THENN
             forth.s:3324   .text:0000000000004624 THENN
             forth.s:3326   .text:0000000000004628 $d
             forth.s:3337   .text:000000000000463c _AFT
             forth.s:3337   .text:0000000000004640 $t
             forth.s:3337   .text:0000000000004640 AFT
             forth.s:3339   .text:0000000000004644 $d
             forth.s:3351   .text:000000000000465c _ELSEE
             forth.s:3351   .text:0000000000004664 ELSEE
             forth.s:3353   .text:0000000000004668 $d
             forth.s:3363   .text:000000000000467c _WHILE
             forth.s:3363   .text:0000000000004682 $t
             forth.s:3363   .text:0000000000004684 WHILE
             forth.s:3365   .text:0000000000004688 $d
             forth.s:3374   .text:0000000000004698 _ABRTQ
             forth.s:3374   .text:00000000000046a0 ABRTQ
             forth.s:3376   .text:00000000000046a4 $d
             forth.s:3385   .text:00000000000046bc _STRQ
             forth.s:3385   .text:00000000000046c0 STRQ
             forth.s:3387   .text:00000000000046c4 $d
             forth.s:3397   .text:00000000000046dc _DOTQ
             forth.s:3397   .text:00000000000046e0 DOTQ
             forth.s:3399   .text:00000000000046e4 $d
             forth.s:3413   .text:00000000000046fc _UNIQU
             forth.s:3413   .text:0000000000004704 $t
             forth.s:3413   .text:0000000000004704 UNIQU
             forth.s:3415   .text:0000000000004708 $d
             forth.s:3422   .text:0000000000004730 UNIQ1
             forth.s:3419   .text:0000000000004724 $d
             forth.s:3432   .text:0000000000004738 SNAME
             forth.s:3433   .text:0000000000004738 $t
             forth.s:3434   .text:000000000000473c $d
             forth.s:3450   .text:0000000000004780 SNAM1
             forth.s:3462   .text:0000000000004794 _SCOMP
             forth.s:3462   .text:00000000000047a0 SCOMP
             forth.s:3464   .text:00000000000047a4 $d
             forth.s:3476   .text:00000000000047dc SCOM2
             forth.s:3473   .text:00000000000047d4 SCOM1
             forth.s:3481   .text:00000000000047f0 SCOM3
             forth.s:3490   .text:00000000000047f8 COLON_ABORT
             forth.s:3491   .text:00000000000047f8 $t
             forth.s:3492   .text:00000000000047fc $d
             forth.s:3509   .text:0000000000004828 _OVERT
             forth.s:3509   .text:000000000000482e $t
             forth.s:3511   .text:0000000000004834 $d
             forth.s:3522   .text:000000000000484c _SEMIS
             forth.s:3522   .text:000000000000484e $t
             forth.s:3522   .text:0000000000004850 SEMIS
             forth.s:3524   .text:0000000000004854 $d
             forth.s:3536   .text:0000000000004870 _RBRAC
             forth.s:3536   .text:0000000000004872 $t
             forth.s:3536   .text:0000000000004874 RBRAC
             forth.s:3538   .text:0000000000004878 $d
             forth.s:3549   .text:000000000000488c $t
             forth.s:3550   .text:0000000000004890 $d
ARM GAS  forth.s 			page 214


             forth.s:3562   .text:00000000000048a8 _COLON
             forth.s:3562   .text:00000000000048aa $t
             forth.s:3562   .text:00000000000048ac COLON
             forth.s:3564   .text:00000000000048b0 $d
             forth.s:3575   .text:00000000000048c8 _IMMED
             forth.s:3575   .text:00000000000048d2 $t
             forth.s:3575   .text:00000000000048d4 IMMED
             forth.s:3577   .text:00000000000048d8 $d
             forth.s:3595   .text:0000000000004904 _CONST
             forth.s:3595   .text:0000000000004910 CONST
             forth.s:3597   .text:0000000000004914 $d
             forth.s:3608   .text:0000000000004944 $t
             forth.s:3615   .text:0000000000004944 DODOES
             forth.s:3617   .text:0000000000004948 $d
             forth.s:3632   .text:000000000000496c $d
             forth.s:3632   .text:0000000000004970 _DOES
             forth.s:3632   .text:0000000000004976 $t
             forth.s:3632   .text:0000000000004978 DOES
             forth.s:3634   .text:000000000000497c $d
             forth.s:3649   .text:00000000000049ac _DEFERAT
             forth.s:3649   .text:00000000000049b4 DEFERAT
             forth.s:3651   .text:00000000000049b8 $d
             forth.s:3661   .text:00000000000049d0 _DEFERSTO
             forth.s:3661   .text:00000000000049d8 DEFERSTO
             forth.s:3663   .text:00000000000049dc $d
             forth.s:3674   .text:00000000000049f8 _DEFER
             forth.s:3674   .text:00000000000049fe $t
             forth.s:3674   .text:0000000000004a00 DEFER
             forth.s:3676   .text:0000000000004a04 $d
             forth.s:3697   .text:0000000000004a50 CREAT
             forth.s:3687   .text:0000000000004a38 DEFER_NOP
             forth.s:3688   .text:0000000000004a38 $t
             forth.s:3689   .text:0000000000004a3c $d
             forth.s:3697   .text:0000000000004a48 _CREAT
             forth.s:3699   .text:0000000000004a54 $d
             forth.s:3712   .text:0000000000004a78 _VARIA
             forth.s:3712   .text:0000000000004a84 VARIA
             forth.s:3714   .text:0000000000004a88 $d
             forth.s:3732   .text:0000000000004aa8 DMP
             forth.s:3733   .text:0000000000004aa8 $t
             forth.s:3734   .text:0000000000004aac $d
             forth.s:3746   .text:0000000000004ae4 PDUM2
             forth.s:3740   .text:0000000000004acc PDUM1
             forth.s:3758   .text:0000000000004af0 $d
             forth.s:3758   .text:0000000000004af4 _DUMP
             forth.s:3758   .text:0000000000004afc DUMP
             forth.s:3760   .text:0000000000004b00 $d
             forth.s:3786   .text:0000000000004b7c DUMP4
             forth.s:3776   .text:0000000000004b54 DUMP1
             forth.s:3788   .text:0000000000004b84 DUMP3
             forth.s:3801   .text:0000000000004b98 TDOT
             forth.s:3802   .text:0000000000004b98 $t
             forth.s:3803   .text:0000000000004b9c $d
             forth.s:3842   .text:0000000000004c2c _DOTS
             forth.s:3842   .text:0000000000004c30 DOTS
             forth.s:3844   .text:0000000000004c34 $d
             forth.s:3851   .text:0000000000004c50 DOTS2
ARM GAS  forth.s 			page 215


             forth.s:3847   .text:0000000000004c44 DOTS1
             forth.s:3856   .text:0000000000004c60 RBASE
             forth.s:3857   .text:0000000000004c60 $t
             forth.s:3865   .text:0000000000004c70 RDOT
             forth.s:3867   .text:0000000000004c74 $d
             forth.s:3894   .text:0000000000004cd8 _TRACE
             forth.s:3894   .text:0000000000004cde $t
             forth.s:3894   .text:0000000000004ce0 TRACE
             forth.s:3896   .text:0000000000004ce4 $d
             forth.s:3915   .text:0000000000004d28 _TNAME
             forth.s:3915   .text:0000000000004d2e $t
             forth.s:3915   .text:0000000000004d30 TNAME
             forth.s:3917   .text:0000000000004d34 $d
             forth.s:3920   .text:0000000000004d40 TNAM1
             forth.s:3931   .text:0000000000004d74 TNAM2
             forth.s:3940   .text:0000000000004d84 _DOTID
             forth.s:3940   .text:0000000000004d88 $t
             forth.s:3940   .text:0000000000004d88 DOTID
             forth.s:3942   .text:0000000000004d8c $d
             forth.s:3949   .text:0000000000004db0 DOTI1
             forth.s:3950   .text:0000000000004dbe $t
             forth.s:3951   .text:0000000000004dc0 $d
             forth.s:3953   *ABS*:0000000000000000 WANT_SEE
             forth.s:4026   .text:0000000000004dc8 _VLIST
             forth.s:4026   .text:0000000000004dce $t
             forth.s:4026   .text:0000000000004dd0 VLIST
             forth.s:4028   .text:0000000000004dd4 $d
             forth.s:4039   .text:0000000000004df4 WORDS
             forth.s:4060   .text:0000000000004e38 WC
             forth.s:4039   .text:0000000000004dec _WORDS
             forth.s:4039   .text:0000000000004df2 $t
             forth.s:4041   .text:0000000000004df8 $d
             forth.s:4044   .text:0000000000004e04 WORS1
             forth.s:4053   .text:0000000000004e2c WORS2
             forth.s:4060   .text:0000000000004e34 _WC
             forth.s:4062   .text:0000000000004e3c $d
             forth.s:4079   .text:0000000000004e78 _MARK
             forth.s:4079   .text:0000000000004e80 MARK
             forth.s:4081   .text:0000000000004e84 $d
             forth.s:4084   .text:0000000000004e90 $t
             forth.s:4085   .text:0000000000004e94 $d
             forth.s:4100   .text:0000000000004ec4 _ARRAY
             forth.s:4100   .text:0000000000004eca $t
             forth.s:4100   .text:0000000000004ecc ARRAY
             forth.s:4102   .text:0000000000004ed0 $d
             forth.s:4115   .text:0000000000004f0c DO_ARRAY
             forth.s:4116   .text:0000000000004f0c $t
             forth.s:4117   .text:0000000000004f10 $d
             forth.s:4134   .text:0000000000004f2c VERSN
             forth.s:4135   .text:0000000000004f2c $t
             forth.s:4136   .text:0000000000004f30 $d
             forth.s:4144   .text:0000000000004f40 _HI
             forth.s:4144   .text:0000000000004f44 HI
             forth.s:4146   .text:0000000000004f48 $d
             forth.s:4147   .text:0000000000004f62 $t
             forth.s:4148   .text:0000000000004f64 $d
             forth.s:4172   .text:0000000000004fb0 $t
ARM GAS  forth.s 			page 216


             forth.s:4173   .text:0000000000004fb4 $d
             forth.s:4185   .text:0000000000004fd0 PS2_QUERY
             forth.s:4186   .text:0000000000004fd0 $t
             forth.s:4187   .text:0000000000004fd4 $d
             forth.s:4201   .text:000000000000503a $t
             forth.s:4202   .text:000000000000503c $d
             forth.s:4212   .text:0000000000005048 IF_SENSE
             forth.s:4213   .text:0000000000005048 $t
             forth.s:4214   .text:000000000000504c $d
             forth.s:4229   .text:000000000000507c $t
             forth.s:4230   .text:0000000000005080 $d
             forth.s:4230   .text:000000000000508a $t
             forth.s:4231   .text:000000000000508c $d
             forth.s:4249   .text:00000000000050b4 COLD1
             forth.s:4250   .text:00000000000050b4 $d
             forth.s:4264   .text:0000000000005100 COLD2
             forth.s:4267   .text:0000000000005100 $d
             forth.s:4270   .text:0000000000005104 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:248    .text:000000000000016f $d
              init.s:373    .text:0000000000000335 $d
              init.s:373    .text:0000000000000336 $t
          ser-term.s:90     .text:0000000000000793 $d
          ser-term.s:90     .text:0000000000000794 $t
          ser-term.s:110    .text:00000000000007cd $d
          ser-term.s:110    .text:00000000000007ce $t
          ser-term.s:133    .text:000000000000080b $d
          ser-term.s:133    .text:000000000000080c $t
          ser-term.s:166    .text:0000000000000867 $d
          ser-term.s:166    .text:0000000000000868 $t
          ser-term.s:193    .text:00000000000008dd $d
          ser-term.s:193    .text:00000000000008de $t
          ser-term.s:205    .text:000000000000090b $d
          ser-term.s:205    .text:000000000000090c $t
             tvout.s:264    .text:0000000000000b5b $d
             tvout.s:264    .text:0000000000000b5c $t
             tvout.s:278    .text:0000000000000b8f $d
             tvout.s:278    .text:0000000000000b90 $t
             tvout.s:306    .text:0000000000000be9 $d
             tvout.s:306    .text:0000000000000bea $t
             tvout.s:325    .text:0000000000000c17 $d
             tvout.s:325    .text:0000000000000c18 $t
             tvout.s:427    .text:0000000000000d51 $d
             tvout.s:427    .text:0000000000000d52 $t
             tvout.s:448    .text:0000000000000dab $d
             tvout.s:448    .text:0000000000000dac $t
             tvout.s:495    .text:0000000000000e41 $d
             tvout.s:495    .text:0000000000000e42 $t
           ps2_kbd.s:307    .text:000000000000152f $d
           ps2_kbd.s:307    .text:0000000000001530 $t
           ps2_kbd.s:396    .text:000000000000162b $d
           ps2_kbd.s:396    .text:000000000000162c $t
           ps2_kbd.s:616    .text:00000000000018cd $d
           ps2_kbd.s:616    .text:00000000000018ce $t
           ps2_kbd.s:633    .text:0000000000001907 $d
           ps2_kbd.s:633    .text:0000000000001908 $t
ARM GAS  forth.s 			page 217


         spi-flash.s:85     .text:00000000000019f3 $d
         spi-flash.s:85     .text:00000000000019f4 $t
         spi-flash.s:151    .text:0000000000001abf $d
         spi-flash.s:151    .text:0000000000001ac0 $t
         spi-flash.s:238    .text:0000000000001c03 $d
         spi-flash.s:238    .text:0000000000001c04 $t
         spi-flash.s:256    .text:0000000000001c3f $d
         spi-flash.s:256    .text:0000000000001c40 $t
         spi-flash.s:278    .text:0000000000001c93 $d
         spi-flash.s:278    .text:0000000000001c94 $t
         spi-flash.s:325    .text:0000000000001d13 $d
         spi-flash.s:325    .text:0000000000001d14 $t
         spi-flash.s:343    .text:0000000000001d35 $d
         spi-flash.s:343    .text:0000000000001d36 $t
         spi-flash.s:352    .text:0000000000001d49 $d
         spi-flash.s:352    .text:0000000000001d4a $t
               fpu.s:195    .text:0000000000001ee5 $d
               fpu.s:195    .text:0000000000001ee6 $t
               fpu.s:208    .text:0000000000001f05 $d
               fpu.s:208    .text:0000000000001f06 $t
               fpu.s:222    .text:0000000000001f25 $d
               fpu.s:222    .text:0000000000001f26 $t
               fpu.s:235    .text:0000000000001f45 $d
               fpu.s:235    .text:0000000000001f46 $t
               fpu.s:258    .text:0000000000001f83 $d
               fpu.s:258    .text:0000000000001f84 $t
               fpu.s:270    .text:0000000000001f9f $d
               fpu.s:270    .text:0000000000001fa0 $t
               fpu.s:292    .text:0000000000001fd5 $d
               fpu.s:292    .text:0000000000001fd6 $t
               fpu.s:303    .text:0000000000001ff3 $d
               fpu.s:303    .text:0000000000001ff4 $t
               fpu.s:313    .text:000000000000200d $d
               fpu.s:313    .text:000000000000200e $t
               fpu.s:326    .text:000000000000203d $d
               fpu.s:326    .text:000000000000203e $t
               fpu.s:352    .text:000000000000208b $d
               fpu.s:352    .text:000000000000208c $t
               fpu.s:376    .text:00000000000020cd $d
               fpu.s:376    .text:00000000000020ce $t
               fpu.s:385    .text:00000000000020e7 $d
               fpu.s:385    .text:00000000000020e8 $t
               fpu.s:415    .text:000000000000213f $d
               fpu.s:415    .text:0000000000002140 $t
            strtof.s:180    .text:000000000000234f $d
            strtof.s:180    .text:0000000000002350 $t
              ftoa.s:72     .text:000000000000257f $d
              ftoa.s:72     .text:0000000000002580 $t
              ftoa.s:84     .text:000000000000258f $d
              ftoa.s:84     .text:0000000000002590 $t
             forth.s:132    .text:000000000000262d $d
             forth.s:132    .text:000000000000262e $t
             forth.s:144    .text:0000000000002651 $d
             forth.s:144    .text:0000000000002652 $t
             forth.s:156    .text:0000000000002673 $d
             forth.s:156    .text:0000000000002674 $t
             forth.s:178    .text:00000000000026ad $d
ARM GAS  forth.s 			page 218


             forth.s:178    .text:00000000000026ae $t
             forth.s:214    .text:00000000000026cb $d
             forth.s:214    .text:00000000000026cc $t
             forth.s:261    .text:0000000000002779 $d
             forth.s:261    .text:000000000000277a $t
             forth.s:356    .text:0000000000002809 $d
             forth.s:356    .text:000000000000280a $t
             forth.s:381    .text:0000000000002837 $d
             forth.s:381    .text:0000000000002838 $t
             forth.s:391    .text:000000000000284b $d
             forth.s:391    .text:000000000000284c $t
             forth.s:400    .text:0000000000002857 $d
             forth.s:400    .text:0000000000002858 $t
             forth.s:420    .text:0000000000002885 $d
             forth.s:420    .text:0000000000002886 $t
             forth.s:429    .text:0000000000002899 $d
             forth.s:429    .text:000000000000289a $t
             forth.s:486    .text:000000000000290d $d
             forth.s:486    .text:000000000000290e $t
             forth.s:502    .text:000000000000292f $d
             forth.s:502    .text:0000000000002930 $t
             forth.s:512    .text:0000000000002941 $d
             forth.s:512    .text:0000000000002942 $t
             forth.s:521    .text:0000000000002953 $d
             forth.s:521    .text:0000000000002954 $t
             forth.s:538    .text:0000000000002975 $d
             forth.s:538    .text:0000000000002976 $t
             forth.s:568    .text:00000000000029bb $d
             forth.s:568    .text:00000000000029bc $t
             forth.s:577    .text:00000000000029d1 $d
             forth.s:577    .text:00000000000029d2 $t
             forth.s:625    .text:0000000000002a2b $d
             forth.s:625    .text:0000000000002a2c $t
             forth.s:636    .text:0000000000002a3f $d
             forth.s:636    .text:0000000000002a40 $t
             forth.s:644    .text:0000000000002a4d $d
             forth.s:644    .text:0000000000002a4e $t
             forth.s:652    .text:0000000000002a5d $d
             forth.s:652    .text:0000000000002a5e $t
             forth.s:660    .text:0000000000002a6d $d
             forth.s:660    .text:0000000000002a6e $t
             forth.s:684    .text:0000000000002a9d $d
             forth.s:684    .text:0000000000002a9e $t
             forth.s:709    .text:0000000000002ad1 $d
             forth.s:709    .text:0000000000002ad2 $t
             forth.s:717    .text:0000000000002ae1 $d
             forth.s:717    .text:0000000000002ae2 $t
             forth.s:725    .text:0000000000002af3 $d
             forth.s:725    .text:0000000000002af4 $t
             forth.s:746    .text:0000000000002b1b $d
             forth.s:746    .text:0000000000002b1c $t
             forth.s:775    .text:0000000000002b57 $d
             forth.s:775    .text:0000000000002b58 $t
             forth.s:785    .text:0000000000002b6b $d
             forth.s:785    .text:0000000000002b6c $t
             forth.s:798    .text:0000000000002b89 $d
             forth.s:798    .text:0000000000002b8a $t
ARM GAS  forth.s 			page 219


             forth.s:851    .text:0000000000002c01 $d
             forth.s:851    .text:0000000000002c02 $t
             forth.s:892    .text:0000000000002c57 $d
             forth.s:892    .text:0000000000002c58 $t
             forth.s:915    .text:0000000000002c83 $d
             forth.s:915    .text:0000000000002c84 $t
             forth.s:928    .text:0000000000002ca3 $d
             forth.s:928    .text:0000000000002ca4 $t
             forth.s:952    .text:0000000000002cd3 $d
             forth.s:952    .text:0000000000002cd4 $t
             forth.s:998    .text:0000000000002d2b $d
             forth.s:998    .text:0000000000002d2c $t
             forth.s:1010   .text:0000000000002d43 $d
             forth.s:1010   .text:0000000000002d44 $t
             forth.s:1022   .text:0000000000002d5f $d
             forth.s:1022   .text:0000000000002d60 $t
             forth.s:1083   .text:0000000000002dbb $d
             forth.s:1083   .text:0000000000002dbc $t
             forth.s:1092   .text:0000000000002dcf $d
             forth.s:1092   .text:0000000000002dd0 $t
             forth.s:1119   .text:0000000000002e11 $d
             forth.s:1119   .text:0000000000002e12 $t
             forth.s:1138   .text:0000000000002e35 $d
             forth.s:1138   .text:0000000000002e36 $t
             forth.s:1157   .text:0000000000002e61 $d
             forth.s:1157   .text:0000000000002e62 $t
             forth.s:1197   .text:0000000000002ebb $d
             forth.s:1197   .text:0000000000002ebc $t
             forth.s:1217   .text:0000000000002ee5 $d
             forth.s:1217   .text:0000000000002ee6 $t
             forth.s:1231   .text:0000000000002f03 $d
             forth.s:1231   .text:0000000000002f04 $t
             forth.s:1242   .text:0000000000002f21 $d
             forth.s:1242   .text:0000000000002f22 $t
             forth.s:1259   .text:0000000000002f3f $d
             forth.s:1259   .text:0000000000002f40 $t
             forth.s:1276   .text:0000000000002f6b $d
             forth.s:1276   .text:0000000000002f6c $t
             forth.s:1411   .text:00000000000030b7 $d
             forth.s:1411   .text:00000000000030b8 $t
             forth.s:1433   .text:0000000000003103 $d
             forth.s:1433   .text:0000000000003104 $t
             forth.s:1482   .text:0000000000003143 $d
             forth.s:1482   .text:0000000000003144 $t
             forth.s:1533   .text:00000000000031bb $d
             forth.s:1533   .text:00000000000031bc $t
             forth.s:1592   .text:0000000000003265 $d
             forth.s:1592   .text:0000000000003266 $t
             forth.s:1610   .text:000000000000328d $d
             forth.s:1610   .text:000000000000328e $t
             forth.s:1644   .text:00000000000032df $d
             forth.s:1644   .text:00000000000032e0 $t
             forth.s:1677   .text:000000000000332d $d
             forth.s:1677   .text:000000000000332e $t
             forth.s:1709   .text:0000000000003375 $d
             forth.s:1709   .text:0000000000003376 $t
             forth.s:1787   .text:0000000000003457 $d
ARM GAS  forth.s 			page 220


             forth.s:1787   .text:0000000000003458 $t
             forth.s:1799   .text:0000000000003475 $d
             forth.s:1799   .text:0000000000003476 $t
             forth.s:1831   .text:00000000000034c3 $d
             forth.s:1831   .text:00000000000034c4 $t
             forth.s:1849   .text:00000000000034f5 $d
             forth.s:1849   .text:00000000000034f6 $t
             forth.s:1863   .text:000000000000351f $d
             forth.s:1863   .text:0000000000003520 $t
             forth.s:1941   .text:00000000000035db $d
             forth.s:1941   .text:00000000000035dc $t
             forth.s:2038   .text:00000000000036fb $d
             forth.s:2038   .text:00000000000036fc $t
             forth.s:2122   .text:000000000000382b $d
             forth.s:2122   .text:000000000000382c $t
             forth.s:2139   .text:0000000000003861 $d
             forth.s:2139   .text:0000000000003862 $t
             forth.s:2157   .text:0000000000003897 $d
             forth.s:2157   .text:0000000000003898 $t
             forth.s:2227   .text:0000000000003917 $d
             forth.s:2227   .text:0000000000003918 $t
             forth.s:2265   .text:0000000000003983 $d
             forth.s:2265   .text:0000000000003984 $t
             forth.s:2300   .text:00000000000039eb $d
             forth.s:2300   .text:00000000000039ec $t
             forth.s:2320   .text:0000000000003a23 $d
             forth.s:2320   .text:0000000000003a24 $t
             forth.s:2462   .text:0000000000003bfb $d
             forth.s:2462   .text:0000000000003bfc $t
             forth.s:2501   .text:0000000000003c5d $d
             forth.s:2501   .text:0000000000003c5e $t
             forth.s:2513   .text:0000000000003c83 $d
             forth.s:2513   .text:0000000000003c84 $t
             forth.s:2524   .text:0000000000003c9d $d
             forth.s:2524   .text:0000000000003c9e $t
             forth.s:2807   .text:000000000000400b $d
             forth.s:2807   .text:000000000000400c $t
             forth.s:2899   .text:000000000000411f $d
             forth.s:2899   .text:0000000000004120 $t
             forth.s:2950   .text:00000000000041d7 $d
             forth.s:2950   .text:00000000000041d8 $t
             forth.s:2962   .text:0000000000004201 $d
             forth.s:2962   .text:0000000000004202 $t
             forth.s:2983   .text:0000000000004247 $d
             forth.s:2983   .text:0000000000004248 $t
             forth.s:2995   .text:0000000000004265 $d
             forth.s:2995   .text:0000000000004266 $t
             forth.s:3010   .text:0000000000004293 $d
             forth.s:3010   .text:0000000000004294 $t
             forth.s:3158   .text:0000000000004423 $d
             forth.s:3158   .text:0000000000004424 $t
             forth.s:3208   .text:00000000000044c9 $d
             forth.s:3208   .text:00000000000044ca $t
             forth.s:3232   .text:0000000000004505 $d
             forth.s:3232   .text:0000000000004506 $t
             forth.s:3283   .text:0000000000004597 $d
             forth.s:3283   .text:0000000000004598 $t
ARM GAS  forth.s 			page 221


             forth.s:3311   .text:00000000000045ff $d
             forth.s:3311   .text:0000000000004600 $t
             forth.s:3324   .text:0000000000004621 $d
             forth.s:3324   .text:0000000000004622 $t
             forth.s:3351   .text:0000000000004661 $d
             forth.s:3351   .text:0000000000004662 $t
             forth.s:3374   .text:000000000000469f $d
             forth.s:3374   .text:00000000000046a0 $t
             forth.s:3385   .text:00000000000046bf $d
             forth.s:3385   .text:00000000000046c0 $t
             forth.s:3397   .text:00000000000046df $d
             forth.s:3397   .text:00000000000046e0 $t
             forth.s:3462   .text:000000000000479d $d
             forth.s:3462   .text:000000000000479e $t
             forth.s:3595   .text:000000000000490d $d
             forth.s:3595   .text:000000000000490e $t
             forth.s:3649   .text:00000000000049b3 $d
             forth.s:3649   .text:00000000000049b4 $t
             forth.s:3661   .text:00000000000049d7 $d
             forth.s:3661   .text:00000000000049d8 $t
             forth.s:3697   .text:0000000000004a4f $d
             forth.s:3697   .text:0000000000004a50 $t
             forth.s:3712   .text:0000000000004a81 $d
             forth.s:3712   .text:0000000000004a82 $t
             forth.s:3758   .text:0000000000004af9 $d
             forth.s:3758   .text:0000000000004afa $t
             forth.s:3842   .text:0000000000004c2f $d
             forth.s:3842   .text:0000000000004c30 $t
             forth.s:4060   .text:0000000000004e37 $d
             forth.s:4060   .text:0000000000004e38 $t
             forth.s:4079   .text:0000000000004e7d $d
             forth.s:4079   .text:0000000000004e7e $t
             forth.s:4144   .text:0000000000004f43 $d
             forth.s:4144   .text:0000000000004f44 $t
             forth.s:4243   .text:000000000000509d $d
             forth.s:4243   .text:000000000000509e $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
