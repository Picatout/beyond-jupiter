ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
ARM GAS  forth.s 			page 4


 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0x400 
 203              	   .equ NVIC_STIR, 0xE00 
 204              	
 205              	/* TIMERS registers */
 206              	.equ TIM1_BASE_ADR,0x40010000
 207              	.equ TIM9_BASE_ADR,0x40010400
 208              	.equ TIM10_BASE_ADR,0x40010800
 209              	.equ TIM11_BASE_ADR,0x40010C00
 210              	
 211              	.equ TIM2_BASE_ADR,0x40000000
 212              	.equ TIM3_BASE_ADR,0x40000400
 213              	.equ TIM4_BASE_ADR,0x40000800
 214              	.equ TIM5_BASE_ADR,0x40000C00
 215              	
 216              	/* TIMER1 */
 217              	.equ TIM1_RCR,48 
 218              	.equ TIM1_BDTR,68 
 219              	
 220              	/* TIMER2..TIMER5 */
 221              	.equ TIM_CR1,0
 222              	.equ TIM_CR2,4
 223              	.equ TIM_SMCR,8
 224              	.equ TIM_DIER,12
 225              	.equ TIM_SR,16
 226              	.equ TIM_EGR,20
 227              	.equ TIM_CCMR1,24
 228              	.equ TIM_CCMR2,28
 229              	.equ TIM_CCER,32
 230              	.equ TIM_CNT,36
 231              	.equ TIM_PSC,40
 232              	.equ TIM_ARR,44
 233              	.equ TIM_CCR1,52
 234              	.equ TIM_CCR2,56
 235              	.equ TIM_CCR3,60
 236              	.equ TIM_CCR4,64
 237              	.equ TIM_DCR,72
 238              	.equ TIM_DMAR,76
 239              	.equ TIM2_OR,80
 240              	.equ TIM5_OR,80 
 241              	
 242              	/* SYSCFG registers */
 243              	.equ SYSCFG_BASE_ADR, 0x40013800
 244              	
 245              	.equ SYSCFG_MEMRMP,0
 246              	.equ SYSCFG_PMC,4
 247              	.equ SYSCFG_EXTICR1,8
 248              	.equ SYSCFG_EXTICR2,12
 249              	.equ SYSCFG_EXTICR3,16
 250              	.equ SYSCFG_EXTICR4,20
 251              	.equ SYSCFG_CMPCR,32
 252              	
 253              	/* EXTI registers */
 254              	.equ EXTI_BASE_ADR, 0x40013C00
 255              	
ARM GAS  forth.s 			page 6


 256              	.equ EXTI_IMR,0
 257              	.equ EXTI_EMR,4
 258              	.equ EXTI_RTSR,8
 259              	.equ EXTI_FTSR,12
 260              	.equ EXTI_SWIER,16
 261              	.equ EXTI_PR,20
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 7


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ NBASE, BOOT+4  // numeric conversion base 
  78              	  .equ TMP, NBASE+4   // temporary variable
  79              	  .equ SPAN, TMP+4  // character count received by expect  
  80              	  .equ TOIN, SPAN+4  // >IN  parse pointer in TIB
  81              	  .equ NTIB, TOIN+4  // #TIB  characters in TIB 
  82              	  .equ TIBUF, NTIB+4   // TIB buffer address 
  83              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  84              	  .equ HLD, EVAL+4   // hold pointer 
  85              	  .equ CTXT, HLD+4  // context pointer 
  86              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  87              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  88              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  89              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  90              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  91              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  92              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  93              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  94              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  95              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  96              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  97              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  98              	  .equ KBD_QUEUE_SIZE, 16 
  99              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 100              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 101              	  .equ KBD_QTAIL,KBD_QHEAD+4
 102              	  .equ ROW,KBD_QTAIL+4 
 103              	  .equ COL,ROW+4 
 104              	  .equ BK_COLOR,COL+4 
 105              	  .equ PEN_COLOR,BK_COLOR+4
 106              	
 107              	/***********************************************
ARM GAS  forth.s 			page 8


 108              	* MACROS
 109              	*	Assemble inline direct threaded code ending.
 110              	***********************************************/
 111              		.macro _CALL fn /* low level routine call */ 
 112              	 	PUSH {LR}
 113              		BL \fn  
 114              		POP {LR}
 115              		.endm
 116              		
 117              		.macro _RET /* exit sub-routine */ 
 118              		BX LR 
 119              		.endm 
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.word LINK 
 124              			.equ LINK , . 
 125              		_\label: .byte \nlen    // name field
 126              			.ascii "\name"
 127              			.p2align 2 
 128              		\label:   // code field 
 129              		.endm 
 130              		
 131              	
 132              	// local function header 
 133              		.macro _FUNC label 
 134              		.section .text, "ax", %progbits 
 135              		.p2align 2 
 136              		.type \label, %function  
 137              		\label:
 138              		.endm 
 139              	
 140              	// global function header 
 141              		.macro _GBL_FUNC label 
 142              		.global \label 
 143              		_FUNC \label 
 144              		.endm 
 145              	
 146              	
 147              	// load large constant to register 
 148              		.macro _MOV32 r, value 
 149              		mov \r,#(\value&0xffff)
 150              		movt \r,#(\value>>16)
 151              		.endm 
 152              	
 153              		.macro _NEXT /* direct jump INEXT */ 
 154              		B INEXT   
 155              		.endm 
 156              	
 157              	 	.macro	_NEST /*start high level word */
 158              		BX INX  
 159              		NOP.N 
 160              		.endm
 161              	
 162              		.macro _ADR label 
 163              		.word 1+\label  
 164              		.endm 
ARM GAS  forth.s 			page 9


 165              	
 166              	 	.macro	_UNNEST	/*end high level word */
 167              		_ADR UNNEST 
 168              		.endm
 169              	
 170              	 	.macro	_DOLIT u /*long literals */
 171              		_ADR	DOLIT
 172              		.word	\u 
 173              		.endm
 174              	
 175              		.macro _DOTQP len, text 
 176              		_ADR DOTQP 
 177              		.byte \len 
 178              		.ascii "\text" 
 179              		.p2align 2 
 180              		.endm
 181              	
 182              		.macro _COMPI name 
 183              		_DOLIT \name 
 184              		_ADR CALLC 
 185              		.endm 
 186              	
 187              		.macro _ABORQ len,name 
 188              		_ADR ABORQ 
 189              		.byte \len 
 190              		.ascii "\name"
 191              		.p2align 2 
 192              		.endm
 193              	
 194              		.macro _BRAN label 
 195              		_ADR BRAN 
 196              		.word \label 
 197              		.endm 
 198              	
 199              		.macro _QBRAN label 
 200              		_ADR QBRAN 
 201              		.word \label
 202              		.endm 
 203              	
 204              		.macro _DONXT label 
 205              		_ADR DONXT
 206              		.word \label 
 207              		.endm 
 208              	
 209              	 	.macro	_PUSH	/*push TOS on data stack*/
 210              		STR	TOS,[DSP,#-4]!
 211              		.endm
 212              	
 213              	 	.macro	_POP /*pop data stack to TOS */
 214              		LDR	TOS,[DSP],#4
 215              		.endm
  32              	
  33              	/*************************************
  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
ARM GAS  forth.s 			page 10


  38              	
  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      kbd_isr         /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
ARM GAS  forth.s 			page 11


  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
ARM GAS  forth.s 			page 12


 148              	
 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .text, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 014D     		ldr r5,exception_msg 
 159 0002 00F047F8 		bl uart_puts 
 160 0006 31E0     		b reset_mcu    
 161              	  .size  default_handler, .-default_handler
 162              	exception_msg:
 163 0008 0C000000 		.word .+4 
 164 000c 12       		.byte 18
 165 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 165      65707469 
 165      6F6E2072 
 165      65626F6F 
 165      7421
 166 001f 00       		.p2align 2
 167              	
 168              	/*********************************
 169              		system milliseconds counter
 170              	*********************************/	
 171              	  .type systick_handler, %function
 172              	  .p2align 2 
 173              	  .global systick_handler
 174              	systick_handler:
 175 0020 4FF00003 	  _MOV32 r3,UPP
 175      C2F20003 
 176 0028 9868     	  ldr r0,[r3,#TICKS]  
 177 002a 00F10100 	  add r0,#1
 178 002e 9860     	  str r0,[r3,#TICKS]
 179 0030 D868     	  ldr r0,[r3,#CD_TIMER]
 180 0032 10B1     	  cbz r0, systick_exit
 181 0034 A0F10100 	  sub r0,#1
 182 0038 D860     	  str r0,[r3,#CD_TIMER]
 183              	systick_exit:
 184 003a 7047     	  bx lr
 185              	
 186              	/**************************
 187              		UART RX handler
 188              	**************************/
 189              		.p2align 2
 190              		.type uart_rx_handler, %function
 191              	uart_rx_handler:
 192 003c 4FF48053 		_MOV32 r3,UART 
 192      C4F20103 
 193 0044 1868     		ldr r0,[r3,#USART_SR]
 194 0046 5968     		ldr r1,[r3,#USART_DR]
 195 0048 10F0200F 		tst r0,#(1<<5) // RXNE 
 196 004c 0AD0     		beq 2f // no char received 
 197 004e 0329     		cmp r1,#3
 198 0050 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
ARM GAS  forth.s 			page 13


 199 0052 04F14400 		add r0,UP,#RX_QUEUE
 200 0056 A26D     		ldr r2,[UP,#RX_TAIL]
 201 0058 8154     		strb r1,[r0,r2]
 202 005a 02F10102 		add r2,#1 
 203 005e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
 204 0062 A265     		str r2,[UP,#RX_TAIL]
 205              	2:	
 206 0064 7047     		bx lr 
 207              	
 208              	user_reboot:
 209 0066 064D     		ldr r5,user_reboot_msg
 210 0068 00F014F8 		bl uart_puts 
 211              	reset_mcu: 
 212 006c 0348     		ldr r0,scb_adr 
 213 006e C168     		ldr r1,[r0,#SCB_AIRCR]
 214 0070 41F00401 		orr r1,#(1<<2)
 215 0074 C0F2FA51 		movt r1,#SCB_VECTKEY
 216 0078 C160     		str r1,[r0,#SCB_AIRCR]
 217 007a FEE7     		b . 
 218              		.p2align 2 
 219              	scb_adr:
 220 007c 00ED00E0 		.word SCB_BASE_ADR 
 221              	user_reboot_msg:
 222 0080 84000000 		.word .+4
 223 0084 0D       		.byte 13 
 224 0085 0D757365 		.ascii "\ruser reboot!"
 224      72207265 
 224      626F6F74 
 224      21
 225 0092 00BF     		.p2align 2 
 226              	
 227              	   
 228              	// send counted string to uart 
 229              	// input: r5 string* 
 230              		.type uart_puts,%function 
 231              	uart_puts:
 232 0094 4FF48050 		_MOV32 r0,UART 
 232      C4F20100 
 233 009c 15F8011B 		ldrb r1,[r5],#1 // string length
 234 00a0 0940     		ands r1,r1
 235 00a2 0CD0     	1:	beq 9f 
 236 00a4 0268     	2:  ldr r2,[r0,#USART_SR]
 237 00a6 12F08002 		ands r2,#0x80 
 238 00aa FBD0     		beq 2b 	
 239 00ac 15F8012B 		ldrb r2,[r5],#1
 240 00b0 0271     		strb r2,[r0,#USART_DR]
 241 00b2 0139     		subs r1,r1,#1 
 242 00b4 F6D1     		bne 2b 
 243 00b6 0268     	3:	ldr r2,[r0,#USART_SR]
 244 00b8 12F04002 		ands r2,#(1<<6)
 245 00bc FBD0     		beq 3b 
 246 00be 7047     	9:  bx lr 
 247              	
 248              	
 249              	/**************************************
 250              	  reset_handler execute at MCU reset
 251              	***************************************/
ARM GAS  forth.s 			page 14


 252              	  .type  reset_handler, %function
 253              	  .p2align 2 
 254              	  .global reset_handler
 255              	reset_handler:
 256 00c0 4FF00000 		_MOV32 r0,RAM_END
 256      C2F20200 
 257 00c8 8546     		mov sp,r0  
 258 00ca FFF7FEFF 		bl	remap 
 259 00ce 00F033F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 260 00d2 00F093F8 		bl  uart_init
 261 00d6 FFF7FEFF 		bl	tv_init 
 262 00da 00F019F8 		bl forth_init 
 263              	/****** test code ******/
 264 00de 4FF40143 		_MOV32 T3,VID_BUFF 
 264      C2F20103 
 265 00e6 4FF4FA42 		mov T2,#32000
 266 00ea 80EA0000 		eor T0,T0 
 267 00ee 4FF00A01 	1:  mov T1,#10
 268 00f2 03F8010B 	2:	strb T0,[T3],#1
 269 00f6 0139     		subs T1,#1 
 270 00f8 FBD1     		bne 2b  
 271 00fa 00F11100 		add T0,#0x11
 272 00fe 10F00F0F 		tst T0,#15
 273 0102 01D1     		bne 3f
 274 0104 80EA0000 		eor T0,T0
 275 0108 0A3A     	3:  subs T2,#10 
 276 010a F0D1     		bne 1b 
 277              	/***** end test code ****/
 278 010c 02F0D6BB 		b COLD 
 279              	
 280              	
 281              	
 282              		.type forth_init, %function 
 283              	forth_init:
 284 0110 4FF00004 		_MOV32 UP,UPP 
 284      C2F20004 
 285 0118 4FF47F47 		_MOV32 DSP,SPP
 285      C2F20107 
 286 0120 4FF68078 		_MOV32 RSP,RPP
 286      C2F20108 
 287 0128 DFF8FCA1 	  ldr INX,=NEST
 288 012c 4AF0010A 	  orr INX,#1 
 289 0130 86EA0606 		EOR TOS,TOS  
 290 0134 7047     		_RET 
 291              	
 292              	/************
 293              	// test code 
 294              		.type echo, %function 
 295              	ECHO:
 296              		.word KEY,EMIT,BRANCH,echo  
 297              	
 298              		.type blink, %function 
 299              	blink:
 300              		_MOV32 r0,GPIOC_BASE_ADR
 301              	0:	mov r4,#1<<LED_PIN 
 302              		str r4,[r0,GPIO_BSRR]
 303              		mov	r4,#500
ARM GAS  forth.s 			page 15


 304              		str r4,[R3,#TIMER] 
 305              		_CALL timeout
 306              		mov r4,#1<<(LED_PIN+16)
 307              		str r4,[r0,#GPIO_BSRR]
 308              		mov	r4,#500
 309              		str r4,[R3,#TIMER] 
 310              		_CALL timeout 
 311              		b 0b 
 312              	
 313              		.type timeout, %function 
 314              	timeout:
 315              		ldr r4,[r3,#TIMER]
 316              		orrs r4,r4
 317              		bne timeout 
 318              		bx lr 
 319              	***** end test code *****/
 320              	
 321              	  .type init_devices, %function
 322 0136 00BF     	  .p2align 2 
 323              	init_devices:
 324              	/* init clock to HSE 96 Mhz */
 325              	/* set 3 wait states in FLASH_ACR_LATENCY */
 326 0138 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 326      C4F20200 
 327 0140 4FF00301 	  mov r1,#3 
 328 0144 0160     	  str r1,[r0,#FLASH_ACR]
 329              	/* configure clock for HSE, 25 Mhz crystal */
 330              	/* enable HSE in RCC_CR */
 331 0146 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 331      C4F20200 
 332 014e 0168     	  ldr r1,[r0,#RCC_CR]
 333 0150 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 334 0154 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 335              	/* wait HSERDY loop */
 336              	wait_hserdy:
 337 0156 0168     	  ldr r1,[r0,#RCC_CR]
 338 0158 11F4003F 	  tst r1,#(1<<17)
 339 015c FBD0     	  beq wait_hserdy
 340              	
 341              	/************************************************* 
 342              	   configure PLL  and source 
 343              	   SYSCLOCK=96 Mhz
 344              	   select HSE as  PLL source clock
 345              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 346              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 347              	****************************************************/
 348              	  /* set RCC_PLLCFGR */
 349 015e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 349      C4F20200 
 350 0166 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 350      C0F24041 
 351 016e 4160     	  str r1,[r0,#RCC_PLLCFGR]
 352              	  /* enable PLL */
 353 0170 0168     	  ldr r1,[r0,#RCC_CR]
 354 0172 41F08071 	  orr r1, #(1<<24)
 355 0176 0160     	  str r1,[r0,#RCC_CR]
 356              	/* wait for PLLRDY */
ARM GAS  forth.s 			page 16


 357              	wait_pllrdy:
 358 0178 0168     	  ldr r1,[r0,#RCC_CR]
 359 017a 11F0007F 	  tst r1,#(1<<25)
 360 017e FBD1     	  bne wait_pllrdy 
 361              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 362 0180 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 362      C0F21901 
 363 0188 8160     	  str r1,[r0,#RCC_CFGR]
 364              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 365 018a 8168     	  ldr r1,[r0,#RCC_CFGR]
 366 018c 41F00201 	  orr r1,#2
 367 0190 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 368              	/* wait for SWS==2 */
 369              	wait_sws:
 370 0192 8168     	  ldr r1,[r0,#RCC_CFGR]
 371 0194 11F0080F 	  tst r1,#(2<<2)
 372 0198 FBD0     	  beq wait_sws
 373              	/* now sysclock is 96 Mhz */
 374              	
 375              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 376 019a 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 377 019e 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 378 01a0 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 379 01a4 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 380              	/* configure GPIOC:13 as output for user LED */
 381 01a6 4FF40060 	  _MOV32 r0,LED_GPIO 
 381      C4F20200 
 382 01ae 0168     	  ldr r1,[r0,#GPIO_MODER]
 383 01b0 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 384 01b4 01EA0201 	  and r1,r1,r2
 385 01b8 41F08061 	  orr r1,#(1<<(2*LED_PIN))
 386 01bc 0160     	  str r1,[r0,#GPIO_MODER]
 387 01be 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 388 01c0 41F40051 	  orr r1,#(1<<LED_PIN)
 389 01c4 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 390 01c6 81EA0101 	  eor r1,r1 
 391 01ca 8182     	  strh r1,[r0,#GPIO_ODR]	
 392              	/* enable compensation CELL for fast I/O */
 393 01cc 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 393      C4F20101 
 394 01d4 4FF00100 		mov r0,#1 
 395 01d8 0862     		str r0,[R1,#SYSCFG_CMPCR]
 396              	/* wait for ready bit */ 
 397 01da 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 398 01dc 10F4807F 	    tst r0,#(1<<8)
 399 01e0 FBD0     		beq 1b 	
 400              	
 401              	
 402              	/* configure systicks for 1msec ticks */
 403 01e2 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 403      CEF20000 
 404 01ea 47F2FF61 	  _MOV32 r1,95999 
 404      C0F20101 
 405 01f2 4160     	  str r1,[r0,#STK_LOAD]
 406 01f4 4FF00701 	  mov r1,#7
 407 01f8 0160     	  str r1,[r0,STK_CTL]
 408 01fa 7047     	  _RET  
ARM GAS  forth.s 			page 17


 409              	
 410              	/*******************************
 411              	  initialize UART peripheral 
 412              	********************************/
 413              		.type uart_init, %function
 414              	uart_init:
 415              	/* set GPIOA PIN 9, uart TX  */
 416 01fc 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 416      C4F20200 
 417 0204 0168     	  ldr r1,[r0,#GPIO_MODER]
 418 0206 6FF47012 	  mvn r2,#0xf<<(2*9)
 419 020a 01EA0201 	  and r1,r1,r2
 420 020e 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 421 0212 41EA0201 	  orr r1,r1,r2 
 422 0216 0160     	  str r1,[r0,#GPIO_MODER]
 423              	/* select alternate functions USART1==AF07 */ 
 424 0218 4FF4EE61 	  mov r1,#0x77<<4 
 425 021c 4162     	  str r1,[r0,#GPIO_AFRH]
 426              	/* configure USART1 registers */
 427 021e 4FF48050 	  _MOV32 r0,UART 
 427      C4F20100 
 428              	/* BAUD rate */
 429 0226 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 430 022a 8160     	  str r1,[r0,#USART_BRR]
 431 022c 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 432 0230 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 433              	/* enable interrupt in NVIC */
 434 0232 4FF46040 	  _MOV32 r0,NVIC_BASE_ADR
 434      CEF20000 
 435 023a D0F80411 	  ldr r1,[r0,#NVIC_ISER1]
 436 023e 41F02001 	  orr r1,#32   
 437 0242 C0F80411 	  str r1,[r0,#NVIC_ISER1]
 438 0246 7047     	  bx lr 
 439              	
 440              	/* copy system variables to RAM */ 
 441              		.type remap, %function 
 442              	    .global remap 
 443              	remap:
 444              	// copy system to RAM 	
 445 0248 4FF00000 		_MOV32 r0,RAM_ADR 
 445      C2F20000 
 446 0250 3649     		ldr r1,=UZERO 
 447 0252 4FF0A002 		mov r2,#ULAST-UZERO 
 448 0256 02F10302 		add r2,r2,#3
 449 025a 22F00302 		and r2,r2,#~3 
 450 025e 51F8043B 	1:	ldr r3,[r1],#4 
 451 0262 40F8043B 		str r3,[r0],#4 
 452 0266 043A     		subs R2,#4 
 453 0268 F9D1     		bne 1b
 454              	// zero end of RAM 
 455 026a 4FF00002 		_MOV32 r2,RAM_END 
 455      C2F20202 
 456 0272 83EA0303 		eor r3,r3,r3 
 457 0276 40F8043B 	2:  str r3,[r0],#4
 458 027a 9042     		cmp r0,r2 
 459 027c FBDB     		blt 2b 
 460 027e 4FF00004 		_MOV32 UP,RAM_ADR  
ARM GAS  forth.s 			page 18


 460      C2F20004 
 461 0286 7047     		_RET 
 462              	
 463              	/******************************************************
 464              	*  COLD start moves the following to USER variables.
 465              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 466              	******************************************************/
 467              		.p2align 2
 468              	UZERO:
 469 0288 00000000 		.word 0  			/*Reserved */
 470 028c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 471 0290 00000000 		.word 0      /* TICKS */
 472 0294 00000000 	    .word 0     /* CD_TIMER */
 473 0298 4C280000 		.word HI  /*'BOOT */
 474 029c 0A000000 		.word BASEE 	/*BASE */
 475 02a0 00000000 		.word 0			/*tmp */
 476 02a4 00000000 		.word 0			/*SPAN */
 477 02a8 00000000 		.word 0			/*>IN */
 478 02ac 00000000 		.word 0			/*#TIB */
 479 02b0 00FF0120 		.word TIBB	/*TIBU */
 480 02b4 681D0000 		.word INTER	/*'EVAL */
 481 02b8 00000000 		.word 0			/*HLD */
 482 02bc B4280000 		.word _LASTN	/*CONTEXT */
 483 02c0 10290000 		.word CTOP  	/* FCP end of system dictionnary */
 484 02c4 88260020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 485 02c8 B4280000 		.word _LASTN	/*LAST word in dictionary */
 486 02cc 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 486      00000000 
 486      00000000 
 486      00000000 
 487 02dc 00000000 		.word 0  /* RX_HEAD */
 488 02e0 00000000 		.word 0  /* RX_TAIL */ 
 489 02e4 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 490 02e8 00000000 		.word 0  /* VID_STATE, video state */  
 491 02ec 00000000 	    .word 0  /* VID_FIELD, field */
 492 02f0 00810120 		.word VID_BUFF /* video_buffer address */ 
 493 02f4 00000000 	    .word 0 /* kbd struct */
 494 02f8 00000000 		.space KBD_QUEUE_SIZE,0  
 494      00000000 
 494      00000000 
 494      00000000 
 495 0308 00000000 		.word 0  /* kbd queue head */
 496 030c 00000000 		.word 0 /* kbd queue tail */ 
 497 0310 00000000 	    .word 0 /* tv cursor row */
 498 0314 00000000 	    .word 0 /* tv cursor column */ 
 499 0318 00000000 	    .word 0 /* tv back color */
 500 031c 07000000 	    .word 7 /* tv font color */
 501 0320 00000000 	    .word 0,0 
 501      00000000 
 502              	ULAST:
 503 0328 DC060000 	
 503      88020000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
ARM GAS  forth.s 			page 19


   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp 
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	  .include "tvout.inc"
   1              	
   2              	  .equ HRES, 320  // horizontal resolution
   3              	  .equ VRES, 200   // vertical resolution
   4              	  .equ BPP, 4     // bits per pixel
   5              	  .equ BPR, (HRES*BPP/8)  // bytes per row
   6              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ LEFT_MARGIN, (750) 
  37              	  .equ VIDEO_FIRST_LINE, 40
  38              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  39              	  .equ VIDEO_DELAY,(FCLK/1000000*10-1) // 10µSec
  40              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  41              	
  42              	// video state 
  43              	  .equ ST_VSYNC, 0 
  44              	  .equ ST_PREVID,1 
  45              	  .equ ST_VIDEO,2 
  46              	  .equ ST_POSTVID,3    
  47              	// field 
  48              	   .equ ODD_FIELD,0 
  49              	   .equ EVEN_FIELD,-1
  50              	
  51              	/*******************************************************
  52              	NOTES:
  53              	 1) Values computed for a 96Mhz sysclock 
  54              	 2) Video sync output on PB1 use T3_CH4
  55              	 3) video out trigger TIMER3 CH3 
  56              	********************************************************/
ARM GAS  forth.s 			page 20


  57              	
  58              	/**************************************
  59              	  initialize TIMER3 CH4 to generate tv_out
  60              	  synchronization signal.
  61              	**************************************/ 
  62              	  _GBL_FUNC tv_init
  63              	// configure PA0:3 as OUTPUT_OD 
  64 0330 4FF00002 	  _MOV32 r2,GPIOA_BASE_ADR 
  64      C4F20202 
  65 0338 1168     	  ldr r1,[r2,#GPIO_MODER]
  66 033a 4FF05500 	  mov r0,#0x55
  67 033e 41EA0001 	  orr r1,r0
  68 0342 1160     	  str r1,[r2,#GPIO_MODER]
  69              	//  mov r0,#15 
  70              	//  ldr r1,[r2,#GPIO_OTYPER]
  71              	//  orr r1,r0 
  72              	//  str r1,[r2,#GPIO_OTYPER]
  73              	//  str r1,[r2,#GPIO_BSRR]
  74              	//  ldr r1,[r2,GPIO_OSPEEDR]
  75              	//  lsl r0,#1 // fast speed  
  76              	//  orr r1,r0 
  77              	//  str r1,[r2,#GPIO_OSPEEDR]
  78 0344 80EA0000 	  eor r0,r0 
  79 0348 5061     	  str r0,[r2,#GPIO_ODR]  
  80              	// configure PB1 as OUTPUT_AFPP 
  81              	// this is TIM3_CC4 output compare 
  82 034a 02F58062 	  add r2,#0x400 // GPIOB_BASE_ADR
  83 034e 4FF00800 	  mov r0,(2<<2) // alternate function output 
  84 0352 1168     	  ldr r1,[r2,#GPIO_MODER]
  85 0354 41EA0001 	  orr r1,r0 
  86 0358 1060     	  str r0,[r2,#GPIO_MODER] // output AFPP
  87 035a 9168     	  ldr r1,[r2,#GPIO_OSPEEDR]
  88 035c 41EA0001 	  orr r1,r0 
  89 0360 9160     	  str r1,[r2,#GPIO_OSPEEDR] // 2= fast speed 
  90 0362 4FEA8000 	  lsl r0,#2 // alternate function 2 on BP1==TIM3_CH4 
  91 0366 116A     	  ldr r1,[r2,#GPIO_AFRL]
  92 0368 41EA0001 	  orr r1,r0 
  93 036c 1162     	  str r1,[r2,#GPIO_AFRL]
  94              	// enable peripheral clock 
  95 036e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  95      C4F20202 
  96 0376 4FF00200 	  mov r0,#2 
  97 037a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  98 037c 41EA0001 	  orr r1,r0 
  99 0380 1164     	  str r1,[r2,#RCC_APB1ENR]
 100              	// configure TIMER3   
 101 0382 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 101      C4F20002 
 102 038a 41F2D470 	  mov r0,#HPER
 103 038e D062     	  str r0,[r2,#TIM_ARR]
 104 0390 40F2BF30 	  mov r0,#VIDEO_DELAY 
 105 0394 D063     	  str r0,[r2,#TIM_CCR3]
 106 0396 4FF4E170 	  mov r0,#HPULSE 
 107 039a 1064     	  str r0,[r2,#TIM_CCR4]  
 108 039c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 109 03a0 D061     	  str r0,[r2,#TIM_CCMR2]
 110 03a2 4FF48850 	  mov r0,#(1<<12)+(1<<8)
ARM GAS  forth.s 			page 21


 111 03a6 1062     	  str r0,[r2,#TIM_CCER]
 112 03a8 4FF00100 	  mov r0,#1 
 113 03ac D060     	  str r0,[r2,#TIM_DIER]
 114 03ae 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 115              	// enable interrupt in NVIC controller 
 116 03b0 4FEA4070 	  lsl r0,#29 // IRQ29
 117 03b4 4FF46042 	  _MOV32 r2,NVIC_BASE_ADR
 117      CEF20002 
 118 03bc D2F80011 	  ldr r1,[r2,#NVIC_ISER0]
 119 03c0 41EA0001 	  orr r1,r0 
 120 03c4 C2F80011 	  str r1,[r2,#NVIC_ISER0]
 121 03c8 7047     	  _RET
 122              	
 123              	/*************************************
 124              	  TIMER3 interrupt for tv_out
 125              	  T1 line # 
 126              	  T0 TIM3_BASE_ADR 
 127              	*************************************/
 128 03ca 00BF     	  _GBL_FUNC tv_out_isr
 129 03cc 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 129      C4F20000 
 130 03d4 81EA0101 	  eor T1,T1
 131 03d8 0161     	  str T1,[T0,#TIM_SR]
 132 03da E16D     	  ldr T1,[UP,#VID_CNTR]
 133 03dc 01F10101 	  add T1,#1 
 134 03e0 E165     	  str T1,[UP,#VID_CNTR]
 135              	/** machine state cases **/
 136 03e2 226E     	  ldr T2,[UP,#VID_STATE]
 137 03e4 002A     	  cmp T2,#ST_VSYNC 
 138 03e6 07D0     	  beq state_vsync
 139 03e8 012A     	  cmp T2,#ST_PREVID 
 140 03ea 2FD0     	  beq state_pre_video 
 141 03ec 022A     	  cmp T2,#ST_VIDEO 
 142 03ee 36D0     	  beq state_video_out 
 143 03f0 032A     	  cmp T2,#ST_POSTVID 
 144 03f2 60D0     	  beq state_post_video
 145 03f4 FFF7FEBF 	  b default_handler // invalid state 
 146              	/*** vertical sync state **/
 147              	state_vsync:
 148 03f8 0129     	  cmp T1,#1
 149 03fa 06D1     	  bne 1f 
 150              	/****** set vertical pre-sync  *****/
 151 03fc 4FF0DB01 	  mov T1,#SERRATION
 152 0400 0164     	  str T1,[T0,#TIM_CCR4]
 153 0402 40F6E931 	  mov T1,#SYNC_LINE 
 154 0406 C162     	  str T1,[T0,#TIM_ARR]
 155 0408 68E0     	  b tv_isr_exit 
 156 040a 0729     	1: cmp T1,#7
 157 040c 03D1     	  bne 2f 
 158              	// vertical sync pulse   
 159 040e 40F62821 	  mov T1,#VSYNC_PULSE
 160 0412 0164     	  str T1,[T0,#TIM_CCR4]
 161 0414 62E0     	  b tv_isr_exit
 162 0416 0D29     	2: cmp T1,#13
 163 0418 03D1     	   bne 3f  
 164              	// set vertical post-sync    
 165 041a 4FF0DB01 	   mov T1,#SERRATION 
ARM GAS  forth.s 			page 22


 166 041e 0164     	   str T1,[T0,#TIM_CCR4]
 167 0420 5CE0     	   b tv_isr_exit   
 168 0422 1229     	3: cmp T1,#18
 169 0424 03D1     	   bne 4f 
 170              	// if even field full line  
 171 0426 616E     	   ldr T1,[UP,#VID_FIELD]
 172 0428 0029     	   cmp T1,#ODD_FIELD  
 173 042a 57D0     	   beq tv_isr_exit 
 174 042c 01E0     	   b sync_end 
 175 042e 1329     	4: cmp T1,#19 
 176 0430 54D1     	   bne tv_isr_exit
 177              	sync_end: 
 178 0432 4FF00901 	   mov T1,#9
 179 0436 E165     	   str T1,[UP,#VID_CNTR]
 180 0438 4FF4E171 	   mov T1,#HPULSE 
 181 043c 0164     	   str T1,[T0,#TIM_CCR4] 
 182 043e 41F2D471 	   mov T1,#HPER 
 183 0442 C162     	   str T1,[T0,#TIM_ARR] 
 184 0444 4FF00101 	   mov T1,#ST_PREVID 
 185 0448 2166     	   str T1,[UP,#VID_STATE]
 186 044a 47E0     	   b tv_isr_exit 
 187              	/*****************************/
 188              	state_pre_video:
 189 044c 2829     	   cmp T1,#VIDEO_FIRST_LINE
 190 044e 45D4     	   bmi tv_isr_exit 
 191 0450 4FF00201 	   mov T1,#ST_VIDEO 
 192 0454 2166     	   str T1,[UP,#VID_STATE]
 193 0456 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 194 045a C160     	   str T1,[T0,#TIM_DIER]
 195 045c 3EE0     	   b tv_isr_exit 
 196              	/**************************
 197              	    VIDEO OUTPUT 
 198              	**************************/   
 199              	state_video_out:
 200 045e F029     	   cmp T1,#VIDEO_LAST_LINE 
 201 0460 06D4     	   bmi 1f 
 202 0462 4FF00301 	   mov T1,#ST_POSTVID 
 203 0466 2166     	   str T1,[UP,#VID_STATE]
 204 0468 4FF00101 	   mov T1,#1 
 205 046c C160     	   str T1,[T0,#TIM_DIER]
 206 046e 35E0     	   b tv_isr_exit 
 207              	1: // video output
 208 0470 A06E     	   ldr T0,[UP,#VID_BUFFER]
 209 0472 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 210 0476 4FF0A003 	   mov T3,#160
 211 047a 03FB01F1 	   mul T1,T3 
 212 047e 0844     	   add T0,T1  
 213 0480 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 213      C4F20201 
 214 0488 0278     	2: ldrb T2,[T0]
 215 048a 4FEA1212 	   lsr T2,#4 
 216 048e 4A61     	   str T2,[T1,#GPIO_ODR]
 217 0490 AFF30080 	   nop.w
 218 0494 AFF30080 	   nop.w 
 219 0498 10F8012B 	   ldrb T2,[T0],#1
 220 049c 02F00F02 	   and T2,#15 
 221 04a0 4A61     	   str T2,[T1,#GPIO_ODR]
ARM GAS  forth.s 			page 23


 222 04a2 AFF30080 	   nop.w
 223 04a6 AFF30080 	   nop.w  
 224 04aa 013B     	   subs T3,#1
 225 04ac ECD1     	   bne 2b  
 226 04ae 4FF47022 	   mov T2,#(15<<16) 
 227 04b2 8A61     	   str T2,[T1,#GPIO_BSRR]
 228 04b4 12E0     	   b tv_isr_exit 
 229              	state_post_video:
 230 04b6 4FF48372 	   mov T2,#262
 231 04ba 9142     	   cmp T1,T2
 232 04bc 0ED4     	   bmi tv_isr_exit     
 233              	// odd field line 262 half line 
 234 04be 616E     	   ldr T1,[UP,VID_FIELD]
 235 04c0 11B9     	   cbnz T1, frame_end 
 236 04c2 40F6E931 	   mov T1,#SYNC_LINE
 237 04c6 C162     	   str T1,[T0,#TIM_ARR]      
 238              	frame_end: 
 239 04c8 4FF00001 	   mov T1,#ST_VSYNC 
 240 04cc 2166     	   str T1,[UP,#VID_STATE]
 241 04ce 81EA0101 	   eor T1,T1 
 242 04d2 E165     	   str T1,[UP,#VID_CNTR]
 243 04d4 616E     	   ldr T1,[UP,#VID_FIELD]
 244 04d6 6FEA0101 	   mvn T1,T1  
 245 04da 6166     	   str T1,[UP,#VID_FIELD]
 246              	tv_isr_exit: 
 247 04dc 7047     	   _RET   
 248              	
 249              	/***************************
 250              	    FORTH WORDS 
 251              	***************************/
 252              	    .equ LINK, 0 
 253              	
 254              	// PLOT ( x y op -- )
 255              	// draw a pixel 
 256              	//    0 back color 
 257              	//    1 pen color 
 258              	//    2 invert (pen -> back | back -> pen )
 259              	//    3 xor pen color  
 260 04de 00000000 	    _HEADER PLOT,4,"PLOT"
 260      04504C4F 
 260      5400
 261 04e8 3046     	    mov T0,TOS // op 
 262 04ea 06CF     	    ldmfd DSP!,{T1,T2} // T1=y,T2=x 
 263 04ec 4FF0A003 	    mov T3,#BPR // bytes per row  
 264 04f0 03FB01F1 	    mul T1,T3 
 265 04f4 4FEA5205 	    lsr WP,T2,#1 
 266 04f8 2944     	    add T1,WP 
 267 04fa A36E     	    ldr T3,[UP,#VID_BUFFER] 
 268 04fc 5D5C     	    ldrb WP,[T3,T1] // byte in buffer 2 pixels 
 269 04fe 4FF00F06 	    mov TOS,#15 // AND mask 
 270 0502 12F0010F 	    tst T2,#1 
 271 0506 01D0     	    beq 1f 
 272 0508 4FEA0616 	    lsl TOS,#4 // mask out low nibble for odd pixel  
 273 050c 30B1     	1:	cbz T0,op_back 
 274 050e 0128     	    cmp T0,#1 
 275 0510 11D0     	    beq op_pen 
 276 0512 0228     	    cmp T0,#2 
ARM GAS  forth.s 			page 24


 277 0514 1CD0     	    beq op_invert 
 278 0516 0328     	    cmp T0,#3 
 279 0518 33D0     	    beq op_xor
 280 051a 3CE0     	    b 9f   
 281              	op_back:
 282 051c 05EA0605 	    and WP,TOS // mask out nibble 
 283 0520 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 284 0524 12F0010F 	    tst T2,#1 
 285 0528 01D1     	    bne 1f 
 286 052a 4FEA0010 	    lsl T0,#4 // high nibble  
 287 052e 45EA0005 	1:  orr WP,T0  
 288 0532 5D54     	    strb WP,[T3,T1]
 289 0534 2FE0     	    b 9f 
 290              	op_pen: 
 291 0536 05EA0605 	    and WP,TOS 
 292 053a 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 293 053e 12F0010F 	    tst T2,#1
 294 0542 01D1     	    bne 1f 
 295 0544 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 296 0548 45EA0005 	1:	orr WP,T0 
 297 054c 5D54     	    strb WP,[T3,T1]
 298 054e 22E0     	    b 9f 
 299              	op_invert:
 300 0550 05EA0605 	    and WP,TOS 
 301 0554 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 302 0558 12F0010F 	    tst T2,#1 
 303 055c 01D1     	    bne 1f 
 304 055e 4FEA0010 	    lsl T0,#4 
 305 0562 8542     	1:  cmp WP,T0
 306 0564 06D1     	    bne 2f 
 307 0566 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 308 056a 12F0010F 	    tst T2,#1 
 309 056e 01D1     	    bne 2f 
 310 0570 4FEA0010 	    lsl T0,#4
 311 0574 5D5C     	2:  ldrb WP,[T3,T1]
 312 0576 05EA0605 	    and WP,TOS 
 313 057a 45EA0005 	    orr WP,T0 
 314 057e 5D54     	    strb WP,[T3,T1]
 315 0580 09E0     	    b 9f 
 316              	op_xor:
 317 0582 D4F89400 	    ldr T0,[UP,#PEN_COLOR]
 318 0586 12F0010F 	    tst T2,#1 
 319 058a 01D1     	    bne 1f 
 320 058c 4FEA0010 	    lsl T0,#4 
 321 0590 85EA0005 	1:  eor WP,T0 
 322 0594 5D54     	    strb WP,[T3,T1]
 323 0596 57F8046B 	9:  _POP 
 324 059a A3E0     	    _NEXT 
 325              	
 326              	
 327              	// CLS ( -- )
 328              	// clear TV screen 
 329 059c E2040000 		_HEADER CLS,3,"CLS"
 329      03434C53 
 330 05a4 80EA0000 		eor T0,T0 
 331 05a8 94F89010 		ldrb T1,[UP,#BK_COLOR]
 332 05ac 40EA0100 		orr T0,T1 
ARM GAS  forth.s 			page 25


 333 05b0 4FEA0111 		lsl T1,#4 
 334 05b4 40EA0100 		orr T0,T1 
 335 05b8 4FEA0021 		lsl T1,T0,#8 
 336 05bc 40EA0100 		orr T0,T1 
 337 05c0 4FEA0041 		lsl T1,T0,#16
 338 05c4 40EA0100 		orr T0,T1 
 339 05c8 47F6FC41 		mov T1,#VIDEO_BUFFER_SIZE-4   
 340 05cc A26E     		ldr T2,[UP,#VID_BUFFER]
 341 05ce 5050     	1:	str T0,[T2,T1]
 342 05d0 0439     		subs T1,#4
 343 05d2 FCD1     		bne 1b
 344 05d4 1060     		str T0,[T2]
 345 05d6 85E0     		_NEXT 
 346              	
 347              	
 348              	
 349              	
 350              	/**********************************
 351              	   put_char 
 352              	   draw character in video buffer
 353              	   input:
 354              	      r0 character 
 355              	
 356              	**********************************/
 357              	      _FUNC put_char 
 358              	
 359 05d8 7047     	      _RET 
 360              	
 361              	
 362              		.section .rodata 
 363              		.p2align 2
 364              	/********************************************
 365              	    TV font  ASCII 6 pixels x 8 pixels 
 366              	********************************************/
 367              	  .equ CHAR_WIDTH, 6 
 368              	  .equ CHAR_HEIGHT, 8
 369              	  
 370              	font_6x8:
 371 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 371      00000000 
 372 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 372      20002000 
 373 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 373      00000000 
 374 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 374      F8505000 
 375 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 375      28F02000 
 376 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 376      40981800 
 377 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 377      A8906800 
 378 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 378      00000000 
 379 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 379      40201000 
 380 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
ARM GAS  forth.s 			page 26


 380      10204000 
 381 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 381      A8200000 
 382 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 382      20200000 
 383 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 383      60204000 
 384 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 384      00000000 
 385 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 385      00606000 
 386 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 386      40800000 
 387 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 387      C8887000 
 388 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 388      2020F800 
 389 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 389      4080F800 
 390 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 390      0808F000 
 391 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 391      F8101000 
 392 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 392      0808F000 
 393 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 393      88887000 
 394 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 394      40404000 
 395 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 395      88887000 
 396 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 396      08087000 
 397 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 397      60600000 
 398 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 398      60204000 
 399 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 399      40201000 
 400 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 400      F8000000 
 401 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 401      10204000 
 402 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 402      20002000 
 403 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 403      A8A87000 
 404 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 404      88888800 
 405 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 405      8888F000 
 406 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 406      80807800 
 407 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 407      8888F000 
 408 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 408      8080F800 
ARM GAS  forth.s 			page 27


 409 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 409      80808000 
 410 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 410      88887000 
 411 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 411      88888800 
 412 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 412      20207000 
 413 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 413      08906000 
 414 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 414      A0908800 
 415 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 415      8080F800 
 416 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 416      88888800 
 417 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 417      98888800 
 418 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 418      88887000 
 419 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 419      80808000 
 420 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 420      A8987800 
 421 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 421      A0908800 
 422 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 422      0808F000 
 423 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 423      20202000 
 424 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 424      88887000 
 425 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 425      88502000 
 426 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 426      A8D88800 
 427 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 427      50888800 
 428 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 428      20202000 
 429 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 429      8080F800 
 430 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 430      40406000 
 431 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 431      10080000 
 432 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 432      08081800 
 433 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 433      00000000 
 434 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 434      0000F800 
 435 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 435      00000000 
 436 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 436      78887800 
 437 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
ARM GAS  forth.s 			page 28


 437      C888F000 
 438 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 438      80887000 
 439 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 439      98887800 
 440 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 440      F8807000 
 441 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 441      40404000 
 442 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 442      88780870 
 443 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 443      88888800 
 444 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 444      20202000 
 445 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 445      10906000 
 446 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 446      C0A09000 
 447 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 447      20207000 
 448 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 448      A8888800 
 449 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 449      88888800 
 450 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 450      88887000 
 451 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 451      88F08080 
 452 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 452      90B05018 
 453 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 453      80808000 
 454 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 454      7008F000 
 455 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 455      40483000 
 456 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 456      88986800 
 457 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 457      88502000 
 458 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 458      A8A85000 
 459 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 459      20508800 
 460 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 460      88780870 
 461 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 461      2040F800 
 462 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 462      40402000 
 463 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 463      20202000 
 464 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 464      20204000 
 465 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 465      10000000 
ARM GAS  forth.s 			page 29


 466 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 466      FCFCFCFC 
 467 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 467      10204000 
 468 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 468      40201000 
 469 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 469      20200000 
 470 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 470      A8702000 
 471 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 471      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	
  36              	/**********************************
  37              	  keyboard structure 
  38              	
  39              	struct {
  40              	    byte bitcntr; received bit counter 
  41              	    byte rxshift; shiftin keycode 
  42              	    byte flags; flags 
  43              	    byte ones; count bits to 1 
  44              	    }
  45              	
ARM GAS  forth.s 			page 30


  46              	flags 
  47              	   :0 -> parity error flags 
  48              	**********************************/
  49              	    .equ KBD_F_PAR_ERR,1
  50              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  51              	    .equ KBD_RXSHIFT,KBD_STRUCT+1
  52              	    .equ KBD_BITCNTR,KBD_STRUCT 
  53              	    .equ KBD_ONES,KBD_STRUCT+3 
  54              	
  55              	/**********************************
  56              	    kbd_isr
  57              	    interrupt service routine 
  58              	    EXTI0 connected to keyboard 
  59              	    clock signal and triggered 
  60              	    on falling edge 
  61              	**********************************/
  62 05da 00BF     	    _GBL_FUNC kbd_isr 
  63 05dc 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  63      C4F20102 
  64 05e4 4FF00100 	    mov r0,#1 
  65 05e8 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  66 05ea 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  66      C4F20202 
  67 05f2 108A     	    ldrh r0,[r2,#GPIO_IDR]
  68 05f4 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  69 05f8 0029     	    cmp r1,#0 
  70 05fa 19D0     	    beq start_bit 
  71 05fc 0929     	    cmp r1,#9 
  72 05fe 22D0     	    beq parity_bit 
  73 0600 0A29     	    cmp r1,#10 
  74 0602 31D0     	    beq stop_bit 
  75 0604 94F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  76 0608 4FEA5202 	    lsr r2,#1 
  77 060c 10F4805F 	    tst r0,#(1<<12) // data bit 
  78 0610 07D0     	    beq 1f 
  79 0612 42F08002 	    orr r2,#(1<<7)
  80 0616 94F86F00 	    ldrb r0,[UP,#KBD_ONES]
  81 061a 00F10100 	    add r0,#1 
  82 061e 84F86F00 	    strb r0,[UP,#KBD_ONES]
  83 0622 84F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
  84 0626 01F10101 	    add r1,#1 
  85 062a 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  86 062e 31E0     	    b 9f         
  87              	start_bit:
  88 0630 01F10101 	    add r1,#1 
  89 0634 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  90 0638 81EA0101 	    eor r1,r1 
  91 063c 84F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
  92 0640 84F86F10 	    strb r1,[UP,#KBD_ONES]
  93 0644 26E0     	    b 9f 
  94              	parity_bit:
  95 0646 D4F86F10 	    ldr r1,[UP,#KBD_ONES]
  96 064a 10F4805F 	    tst r0,#(1<<12)
  97 064e 01D0     	    beq 1f 
  98 0650 01F10101 	    add r1,#1 
  99 0654 11F0010F 	1:  tst r1,#1 
 100 0658 1CD1     	    bne 9f      
ARM GAS  forth.s 			page 31


 101              	2: // parity error
 102 065a 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 103 065e 41F00101 	    orr r1,#KBD_F_PAR_ERR // parity error flags 
 104 0662 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 105 0666 15E0     	    b 9f      
 106              	stop_bit:
 107 0668 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 108 066c 11F0010F 	    tst r1,#KBD_F_PAR_ERR 
 109 0670 10D1     	    bne 9f // drop this code 
 110              	// store code in queue 
 111 0672 D4F88410 	    ldr r1,[UP,#KBD_QTAIL]
 112 0676 04F17002 	    add r2,UP,#KBD_QUEUE
 113 067a 94F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 114 067e 5054     	    strb r0,[r2,r1]
 115 0680 01F10101 	    add r1,#1
 116 0684 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 117 0688 84F88410 	    strb r1,[UP,#KBD_QTAIL]
 118 068c 80EA0000 	    eor r0,r0 
 119 0690 A4F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 120 0694 7047     	9:  _RET 
 121              	    
 122              	/**********************************
 123              	    kbd_init 
 124              	    initialize keyboard 
 125              	    PS2 clock on PA11 
 126              	    PS2 data on PA12 
 127              	**********************************/
 128 0696 00BF     	    _GBL_FUNC kbd_init 
 129              	// configure EXTI0 on pin PA11 
 130 0698 4FF46052 	   _MOV32 r2,SYSCFG_BASE_ADR
 130      C4F20102 
 131 06a0 4FF00B00 	   mov r0,#11 
 132 06a4 9060     	   str r0,[R2,#SYSCFG_EXTICR1]
 133              	// interrupt triggered on falling edge 
 134 06a6 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 134      C4F20102 
 135 06ae 4FF00100 	   mov r0,#(1<<0)
 136 06b2 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI0 
 137 06b4 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 138              	// enable interrupt EXIT0 in NVIC 
 139 06b6 4FF04000 	   mov r0,#(1<<6) // IRQ6
 140 06ba 4FF46042 	   _MOV32 r2,NVIC_BASE_ADR
 140      CEF20002 
 141 06c2 D2F80011 	   ldr r1,[r2,#NVIC_ISER0]
 142 06c6 41EA0001 	   orr r1,r0 
 143 06ca C2F80011 	   str r1,[r2,#NVIC_ISER0]
 144 06ce 7047     	   _RET 
 145              	
 146              	
 147              	
 148              	
   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
ARM GAS  forth.s 			page 32


   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R12	is used as IP , inner interpreter address pointer 
  12              	*   UP  IS used AS WP 
  13              	*	WP 	is used as UP , working register 
  14              	*	R8 	is used as link register by _NEST macro it is initialized 
  15              	*  		NEST address and MUST BE PRESERVED.
  16              	*
  17              	*     Use USART1 for console I/O
  18              	*     port config: 115200 8N1 
  19              	*     TX on  PA9,  RX on PA10  
  20              	*
  21              	*     eForth is executed from flash, not copied to RAM
  22              	*     eForth use main stack R13 as return stack (thread stack not used) 
  23              	*
  24              	*     Forth return stack is at end of RAM (addr=0x200020000) and reserve 512 bytes
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Version 5.02, 09oct04cht
  42              	*	fOR ADuC702x from Analog Devices
  43              	*	Version 6.01, 10apr08cht a
  44              	*	.p2align 2 to at91sam7x256
  45              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  46              	*	Running under uVision3 RealView from Keil
  47              	*	Version 7.01, 29jun14cht
  48              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  49              	*	.p2aligned to eForth 2 Model
  50              	*	Assembled to flash memory and executed therefrom.
  51              	*	Version 7.10, 30jun14cht
  52              	*	Flash memory mapped to Page 0 where codes are executed
  53              	*	Version 7.20, 02jul14cht
  54              	*	Irreducible Complexity
  55              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  56              	*	TURNKEY saves current application from RAM to flash.
  57              	*********************************************************/
  58              	
  59              		.syntax unified
  60              		.cpu cortex-m4
  61              		.fpu softvfp  
  62              		.thumb
  63              	
ARM GAS  forth.s 			page 33


  64              		.include "stm32f411ce.inc"
  65              		
  66              		.section .text, "ax", %progbits
  67              	
  68              	/***********************************
  69              	//  Start of eForth system 
  70              	***********************************/
  71              	
  72              		.p2align 2 
  73              	
  74              	// PUSH TOS, to be used in colon definition 
  75              	TPUSH:
  76 06d0 47F8046D 		_PUSH
  77 06d4 06E0     		_NEXT
  78              	
  79              	// POP TOS, to be used in colon defintion  
  80              	TPOP:
  81 06d6 57F8046B 		_POP 
  82 06da 03E0     		_NEXT
  83              	
  84              	// hi level word enter 
  85              	NEST: 
  86 06dc 48F804CD 		STMFD	RSP!,{IP}
  87 06e0 05F1030C 		ADD IP,WP,#3
  88              	// inner interprer
  89              	INEXT: 
  90 06e4 5CF8045B 		LDR WP,[IP],#4 
  91 06e8 2847     		BX WP  
  92              	UNNEST:
  93 06ea 58F804CB 		LDMFD RSP!,{IP}
  94 06ee 5CF8045B 		LDR WP,[IP],#4 
  95 06f2 2847     		BX WP  
  96              	
  97              		.p2align 2 
  98              	
  99              	// compile "BX 	R8" 
 100              	// this is the only way 
 101              	// a colon defintion in RAM 
 102              	// can jump to NEST
 103              	// R8 is initialized to NEST address 
 104              	// and must be preserved   
 105              	COMPI_NEST:
 106 06f4 04F13C01 		add T1,UP,#USER_CTOP 
 107 06f8 0968     		ldr T1,[T1]
 108 06fa 44F25072 		mov T2,#0x4700+(10<<3)
 109 06fe 21F8022B 		strh T2,[T1],#2
 110 0702 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 111 0706 21F8022B 		strh T2,[T1],#2 
 112 070a 04F13C02 		add T2,UP,#USER_CTOP 
 113 070e 1160     		str T1,[T2]
 114 0710 E8E7     		_NEXT  
 115              	
 116              	
 117              	// RANDOM ( n+ -- {0..n+ - 1} )
 118              	// return pseudo random number 
 119              	// REF: https://en.wikipedia.org/wiki/Xorshift
 120              	
ARM GAS  forth.s 			page 34


 121 0712 A0050000 		.word LINK 
 122 0716 06       	_RAND: .byte 6
 123 0717 52414E44 		.ascii "RANDOM"
 123      4F4D
 124 071d 0000BF   		.p2align 2 
 125              	RAND:
 126 0720 504700BF 		_NEST
 127 0724 ED0B0000 		_ADR ABSS   
 128 0728 2D0D0000 		_ADR SEED 
 129 072c DD080000 		_ADR AT 
 130 0730 89090000 		_ADR DUPP 
 131 0734 55080000 		_DOLIT 13
 131      0D000000 
 132 073c 3D0A0000 		_ADR LSHIFT 
 133 0740 F5090000 		_ADR XORR  
 134 0744 89090000 		_ADR DUPP 
 135 0748 55080000 		_DOLIT 17 
 135      11000000 
 136 0750 250A0000 		_ADR RSHIFT 
 137 0754 F5090000 		_ADR XORR 
 138 0758 89090000 		_ADR DUPP
 139 075c 55080000 		_DOLIT 5 
 139      05000000 
 140 0764 3D0A0000 		_ADR LSHIFT 
 141 0768 F5090000 		_ADR XORR  
 142 076c 89090000 		_ADR DUPP 
 143 0770 2D0D0000 		_ADR SEED 
 144 0774 C9080000 		_ADR STORE 
 145 0778 55080000 		_DOLIT 0x7FFFFFFF
 145      FFFFFF7F 
 146 0780 CD090000 		_ADR ANDD 
 147 0784 99090000 		_ADR SWAP 
 148 0788 DD0F0000 		_ADR MODD 
 149 078c EB060000 		_UNNEST 
 150              	
 151              	
 152              	// PAUSE ( u -- ) 
 153              	// suspend execution for u milliseconds
 154 0790 16070000 		.word _RAND
 155 0794 05       	_PAUSE: .byte 5
 156 0795 50415553 		.ascii "PAUSE"
 156      45
 157 079a 00BF     		.p2align 2
 158              	PAUSE:
 159 079c 504700BF 		_NEST 
 160 07a0 550D0000 		_ADR TIMER 
 161 07a4 C9080000 		_ADR STORE 
 162              	PAUSE_LOOP:
 163 07a8 550D0000 		_ADR TIMER 
 164 07ac DD080000 		_ADR AT 
 165 07b0 97080000 		_QBRAN PAUSE_EXIT 
 165      C0070000 
 166 07b8 AB080000 		_BRAN PAUSE_LOOP 
 166      A8070000 
 167              	PAUSE_EXIT: 		
 168 07c0 EB060000 		_UNNEST 
 169              	
ARM GAS  forth.s 			page 35


 170              	//  ULED ( T|F -- )
 171              	// control user LED, -1 ON, 0 OFF  
 172 07c4 94070000 		.word _PAUSE
 173 07c8 04       	_ULED: .byte 4
 174 07c9 554C4544 		.ascii "ULED"
 175 07cd 0000BF   		.p2align 2
 176              		.type ULED, %function 
 177              	ULED:
 178 07d0 4FF40050 		mov T0,#(1<<LED_PIN)
 179 07d4 4FF40061 		_MOV32 T1,LED_GPIO 
 179      C4F20201 
 180 07dc 3600     		movs TOS,TOS 
 181 07de 57F8046B 		_POP
 182 07e2 03D0     		beq ULED_OFF
 183 07e4 4FEA0040 		lsl T0,#16 
 184 07e8 8861     		str T0,[T1,#GPIO_BSRR]
 185 07ea 7BE7     		_NEXT 
 186              	ULED_OFF:
 187 07ec 8861     		str T0,[T1,#GPIO_BSRR]
 188 07ee 79E7     		_NEXT    
 189              	
 190              	//    ?KEY	 ( -- c T | F )
 191              	// 	Return input character and true, or a false if no input.
 192 07f0 C8070000 		.word	_ULED
 193 07f4 04       	_QRX:	.byte   4
 194 07f5 3F4B4559 		.ascii "?KEY"
 195 07f9 0000BF   		.p2align 2 
 196              	QKEY:
 197              	QRX: 
 198 07fc 47F8046D 		_PUSH
 199 0800 A06D     		ldr T0,[UP,#RX_TAIL] 
 200 0802 616D     		ldr T1,[UP,#RX_HEAD]
 201 0804 90EA0106 		eors TOS,T0,T1 
 202 0808 0CD0     		beq 1f
 203 080a 04F14400 		add T0,UP,#RX_QUEUE 
 204 080e 0844     		add T0,T1 
 205 0810 0678     		ldrb TOS,[T0]
 206 0812 01F10101 		add T1,#1 
 207 0816 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 208 081a 6165     		str T1,[UP,#RX_HEAD]
 209 081c 47F8046D 		_PUSH 
 210 0820 4FF0FF36 		mov TOS,#-1
 211 0824 5EE7     	1:	_NEXT 
 212              	
 213              	//    TX!	 ( c -- )
 214              	// 	Send character c to the output device.
 215              	
 216 0826 F4070000 		.word	_QRX
 217 082a 04       	_TXSTO:	.byte 4
 218 082b 454D4954 		.ascii "EMIT"
 219 082f 00       		.p2align 2 	
 220              	TXSTO:
 221              	EMIT:
 222              	TECHO:
 223 0830 4FF48055 		_MOV32 WP,UART 
 223      C4F20105 
 224 0838 2868     	1:  ldr T0,[WP,#USART_SR]
ARM GAS  forth.s 			page 36


 225 083a 10F0800F 	    tst T0,#0x80 // TXE flag 
 226 083e FBD0     		beq 1b 
 227 0840 2E71     		strb TOS,[WP,#USART_DR]	 
 228 0842 57F8046B 		_POP
 229 0846 4DE7     		_NEXT 
 230              		
 231              	/***************
 232              	//  The kernel
 233              	***************/
 234              	
 235              	//    NOP	( -- )
 236              	// 	do nothing.
 237              	
 238 0848 2A080000 		.word	_TXSTO
 239 084c 03       	_NOP:	.byte   3
 240 084d 4E4F50   		.ascii "NOP"
 241              		.p2align 2 	
 242              	NOP:
 243 0850 48E7     		_NEXT 
 244              	 
 245              	
 246              	//    doLIT	( -- w )
 247              	// 	Push an inline literal.
 248              	
 249              	// 	.word	_NOP
 250              	// _LIT	.byte   COMPO+5
 251              	// 	.ascii "doLIT"
 252 0852 00BF     	 	.p2align 2 	
 253              	DOLIT:
 254 0854 47F8046D 		_PUSH				//  store TOS on data stack
 255 0858 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 256 085c 42E7     		_NEXT 
 257              	
 258              	//    EXECUTE	( ca -- )
 259              	// 	Execute the word at ca.
 260              	
 261 085e 4C080000 		.word	_NOP
 262 0862 07       	_EXECU:	.byte   7
 263 0863 45584543 		.ascii "EXECUTE"
 263      555445
 264 086a 00BF     		.p2align 2 	
 265              	EXECU: 
 266 086c 46F00105 		ORR	WP,TOS,#1 
 267 0870 57F8046B 		_POP
 268 0874 2847     		BX WP 
 269 0876 35E7     		_NEXT 
 270              	
 271              	//    next	( -- ) counter on R:
 272              	// 	Run time code for the single index loop.
 273              	// 	: next ( -- ) \ hilevel model
 274              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 275              	
 276              	// 	.word	_EXECU
 277              	// _DONXT	.byte   COMPO+4
 278              	// 	.ascii "next"
 279              	// 	.p2align 2 	
 280              	DONXT:
ARM GAS  forth.s 			page 37


 281 0878 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 282 087c 22B9     		CBNZ T2,NEXT1 
 283              		/* loop done */
 284 087e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 285 0882 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 286 0886 2DE7     		_NEXT
 287              	NEXT1:
 288              		/* decrement loop counter */
 289 0888 A2F10102 		SUB	T2,T2,#1
 290 088c C8F80020 		STR	T2,[RSP]
 291 0890 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 292 0894 26E7     		_NEXT 
 293              	
 294              	//    ?branch	( f -- )
 295              	// 	Branch if flag is zero.
 296              	
 297              	// 	.word	_DONXT
 298              	// _QBRAN	.byte   COMPO+7
 299              	// 	.ascii "?branch"
 300              	// 	.p2align 2 	
 301              	QBRAN:
 302 0896 3600     		MOVS	TOS,TOS
 303 0898 57F8046B 		_POP
 304 089c 02D1     		BNE	QBRAN1
 305 089e DCF800C0 		LDR	IP,[IP]
 306 08a2 1FE7     		_NEXT
 307              	QBRAN1:
 308 08a4 0CF1040C 	 	ADD	IP,IP,#4
 309 08a8 1CE7     		_NEXT
 310              	
 311              	//    branch	( -- )
 312              	// 	Branch to an inline address.
 313              	
 314              	// 	.word	_QBRAN
 315              	// _BRAN	.byte   COMPO+6
 316              	// 	.ascii "branch"
 317              	// 	.p2align 2 	
 318              	BRAN:
 319 08aa DCF800C0 		LDR	IP,[IP]
 320 08ae 19E7     		_NEXT
 321              	
 322              	//    EXIT	(  -- )
 323              	// 	Exit the currently executing command.
 324              	
 325 08b0 62080000 		.word	_EXECU
 326 08b4 04       	_EXIT:	.byte   4
 327 08b5 45584954 		.ascii "EXIT"
 328 08b9 0000BF   		.p2align 2 	
 329              	EXIT:
 330 08bc EB060000 		_UNNEST
 331              	
 332              	//    !	   ( w a -- )
 333              	// 	Pop the data stack to memory.
 334              	
 335 08c0 B4080000 		.word	_EXIT
 336 08c4 01       	_STORE:	.byte   1
 337 08c5 21       		.ascii "!"
ARM GAS  forth.s 			page 38


 338 08c6 00BF     		.p2align 2 	
 339              	STORE:
 340 08c8 57F8045B 		LDR	WP,[DSP],#4
 341 08cc 3560     		STR	WP,[TOS]
 342 08ce 57F8046B 		_POP
 343 08d2 07E7     		_NEXT 
 344              	
 345              	//    @	   ( a -- w )
 346              	// 	Push memory location to the data stack.
 347              	
 348 08d4 C4080000 		.word	_STORE
 349 08d8 01       	_AT:	.byte   1
 350 08d9 40       		.ascii "@"
 351 08da 00BF     		.p2align 2 	
 352              	AT:
 353 08dc 3668     		LDR	TOS,[TOS]
 354 08de 01E7     		_NEXT 
 355              	
 356              	//    C!	  ( c b -- )
 357              	// 	Pop the data stack to byte memory.
 358              	
 359 08e0 D8080000 		.word	_AT
 360 08e4 02       	_CSTOR:	.byte   2
 361 08e5 4321     		.ascii "C!"
 362 08e7 00       		.p2align 2 	
 363              	CSTOR:
 364 08e8 57F8045B 		LDR	WP,[DSP],#4
 365 08ec 3570     		STRB WP,[TOS]
 366 08ee 57F8046B 		_POP
 367 08f2 F7E6     		_NEXT
 368              	
 369              	//    C@	  ( b -- c )
 370              	// 	Push byte memory location to the data stack.
 371              	
 372 08f4 E4080000 		.word	_CSTOR
 373 08f8 02       	_CAT:	.byte   2
 374 08f9 4340     		.ascii "C@"
 375 08fb 00       		.p2align 2 	
 376              	CAT:
 377 08fc 3678     		LDRB	TOS,[TOS]
 378 08fe F1E6     		_NEXT 
 379              	
 380              	//    R>	  ( -- w )
 381              	// 	Pop the return stack to the data stack.
 382              	
 383 0900 F8080000 		.word	_CAT
 384 0904 02       	_RFROM:	.byte   2
 385 0905 523E     		.ascii "R>"
 386 0907 00       		.p2align 2 	
 387              	RFROM:
 388 0908 47F8046D 		_PUSH
 389 090c 58F8046B 		LDR	TOS,[RSP],#4
 390 0910 E8E6     		_NEXT 
 391              	
 392              	//    R@	  ( -- w )
 393              	// 	Copy top of return stack to the data stack.
 394              	
ARM GAS  forth.s 			page 39


 395 0912 04090000 		.word	_RFROM
 396 0916 02       	_RAT:	.byte   2
 397 0917 5240     		.ascii "R@"
 398 0919 0000BF   		.p2align 2 	
 399              	RAT:
 400 091c 47F8046D 		_PUSH
 401 0920 D8F80060 		LDR	TOS,[RSP]
 402 0924 DEE6     		_NEXT 
 403              	
 404              	//    >R	  ( w -- )
 405              	// 	Push the data stack to the return stack.
 406              	
 407 0926 16090000 		.word	_RAT
 408 092a 42       	_TOR:	.byte   COMPO+2
 409 092b 3E52     		.ascii ">R"
 410 092d 0000BF   		.p2align 2 	
 411              	TOR:
 412 0930 48F8046D 		STR	TOS,[RSP,#-4]!
 413 0934 57F8046B 		_POP
 414 0938 D4E6     		_NEXT
 415              	
 416              	//	RP! ( u -- )
 417              	// initialize RPP with u 
 418 093a 2A090000 		.word _TOR 
 419 093e 03       	_RPSTOR: .byte 3 
 420 093f 525021   		.ascii "RP!" 
 421 0942 00BF     		.p2align 2 
 422              	RPSTOR:
 423 0944 B046     		MOV RSP,TOS 
 424 0946 57F8046B 		_POP  
 425 094a CBE6     		_NEXT 
 426              	
 427              	
 428              	//	SP! ( u -- )
 429              	// initialize SPP with u 
 430 094c 3E090000 		.word _RPSTOR  
 431 0950 03       	_SPSTOR: .byte 3 
 432 0951 535021   		.ascii "SP!" 
 433              		.p2align 2 
 434              	SPSTOR:
 435 0954 3746     		MOV DSP,TOS 
 436 0956 86EA0606 		EOR TOS,TOS,TOS 
 437 095a C3E6     		_NEXT 
 438              	
 439              	//    SP@	 ( -- a )
 440              	// 	Push the current data stack pointer.
 441              	
 442 095c 50090000 		.word	_SPSTOR
 443 0960 03       	_SPAT:	.byte   3
 444 0961 535040   		.ascii "SP@"
 445              		.p2align 2 	
 446              	SPAT:
 447 0964 47F8046D 		_PUSH
 448 0968 3E46     		MOV	TOS,DSP
 449 096a BBE6     		_NEXT
 450              	
 451              	//    DROP	( w -- )
ARM GAS  forth.s 			page 40


 452              	// 	Discard top stack item.
 453              	
 454 096c 60090000 		.word	_SPAT
 455 0970 04       	_DROP:	.byte   4
 456 0971 44524F50 		.ascii "DROP"
 457 0975 0000BF   		.p2align 2 	
 458              	DROP:
 459 0978 57F8046B 		_POP
 460 097c B2E6     		_NEXT 
 461              	
 462              	//    DUP	 ( w -- w w )
 463              	// 	Duplicate the top stack item.
 464              	
 465 097e 70090000 		.word	_DROP
 466 0982 03       	_DUPP:	.byte   3
 467 0983 445550   		.ascii "DUP"
 468 0986 00BF     		.p2align 2 	
 469              	DUPP:
 470 0988 47F8046D 		_PUSH
 471 098c AAE6     		_NEXT 
 472              	
 473              	//    SWAP	( w1 w2 -- w2 w1 )
 474              	// 	Exchange top two stack items.
 475              	
 476 098e 82090000 		.word	_DUPP
 477 0992 04       	_SWAP:	.byte   4
 478 0993 53574150 		.ascii "SWAP"
 479 0997 00       		.p2align 2 	
 480              	SWAP:
 481 0998 3D68     		LDR	WP,[DSP]
 482 099a 3E60     		STR	TOS,[DSP]
 483 099c 2E46     		MOV	TOS,WP
 484 099e A1E6     		_NEXT 
 485              	
 486              	//    OVER	( w1 w2 -- w1 w2 w1 )
 487              	// 	Copy second stack item to top.
 488              	
 489 09a0 92090000 		.word	_SWAP
 490 09a4 04       	_OVER:	.byte   4
 491 09a5 4F564552 		.ascii "OVER"
 492 09a9 0000BF   		.p2align 2 	
 493              	OVER:
 494 09ac 47F8046D 		_PUSH
 495 09b0 7E68     		LDR	TOS,[DSP,#4]
 496 09b2 97E6     		_NEXT 
 497              	
 498              	//    0<	  ( n -- t )
 499              	// 	Return true if n is negative.
 500              	
 501 09b4 A4090000 		.word	_OVER
 502 09b8 02       	_ZLESS:	.byte   2
 503 09b9 303C     		.ascii "0<"
 504 09bb 00       		.p2align 2 	
 505              	ZLESS:
 506              	//	MOV	WP,#0
 507              	//	ADD	TOS,WP,TOS,ASR #32
 508 09bc 4FEAE676 		ASR TOS,#31
ARM GAS  forth.s 			page 41


 509 09c0 90E6     		_NEXT 
 510              	
 511              	//    AND	 ( w w -- w )
 512              	// 	Bitwise AND.
 513              	
 514 09c2 B8090000 		.word	_ZLESS
 515 09c6 03       	_ANDD:	.byte   3
 516 09c7 414E44   		.ascii "AND"
 517 09ca 00BF     		.p2align 2 	
 518              	ANDD:
 519 09cc 57F8045B 		LDR	WP,[DSP],#4
 520 09d0 06EA0506 		AND	TOS,TOS,WP
 521 09d4 86E6     		_NEXT 
 522              	
 523              	//    OR	  ( w w -- w )
 524              	// 	Bitwise inclusive OR.
 525              	
 526 09d6 C6090000 		.word	_ANDD
 527 09da 02       	_ORR:	.byte   2
 528 09db 4F52     		.ascii "OR"
 529 09dd 0000BF   		.p2align 2 	
 530              	ORR:
 531 09e0 57F8045B 		LDR	WP,[DSP],#4
 532 09e4 46EA0506 		ORR	TOS,TOS,WP
 533 09e8 7CE6     		_NEXT 
 534              	
 535              	//    XOR	 ( w w -- w )
 536              	// 	Bitwise exclusive OR.
 537              	
 538 09ea DA090000 		.word	_ORR
 539 09ee 03       	_XORR:	.byte   3
 540 09ef 584F52   		.ascii "XOR"
 541 09f2 00BF     		.p2align 2 	
 542              	XORR:
 543 09f4 57F8045B 		LDR	WP,[DSP],#4
 544 09f8 86EA0506 		EOR	TOS,TOS,WP
 545 09fc 72E6     		_NEXT 
 546              	
 547              	//    UM+	 ( w w -- w cy )
 548              	// 	Add two numbers, return the sum and carry flag.
 549              	
 550 09fe EE090000 		.word	_XORR
 551 0a02 03       	_UPLUS:	.byte   3
 552 0a03 554D2B   		.ascii "UM+"
 553 0a06 00BF     		.p2align 2 	
 554              	UPLUS:
 555 0a08 3D68     		LDR	WP,[DSP]
 556 0a0a AD19     		ADDS	WP,WP,TOS
 557 0a0c 4FF00006 		MOV	TOS,#0
 558 0a10 46F10006 		ADC	TOS,TOS,#0
 559 0a14 3D60     		STR	WP,[DSP]
 560 0a16 65E6     		_NEXT 
 561              	
 562              	//    RSHIFT	 ( w # -- w )
 563              	// 	arithmetic Right shift # bits.
 564              	
 565 0a18 020A0000 		.word	_UPLUS
ARM GAS  forth.s 			page 42


 566 0a1c 06       	_RSHIFT:	.byte   6
 567 0a1d 52534849 		.ascii "RSHIFT"
 567      4654
 568 0a23 00       		.p2align 2 	
 569              	RSHIFT:
 570 0a24 57F8045B 		LDR	WP,[DSP],#4
 571 0a28 45FA06F6 		MOV	TOS,WP,ASR TOS
 572 0a2c 5AE6     		_NEXT 
 573              	
 574              	//    LSHIFT	 ( w # -- w )
 575              	// 	Right shift # bits.
 576              	
 577 0a2e 1C0A0000 		.word	_RSHIFT
 578 0a32 06       	_LSHIFT:	.byte   6
 579 0a33 4C534849 		.ascii "LSHIFT"
 579      4654
 580 0a39 0000BF   		.p2align 2 	
 581              	LSHIFT:
 582 0a3c 57F8045B 		LDR	WP,[DSP],#4
 583 0a40 05FA06F6 		MOV	TOS,WP,LSL TOS
 584 0a44 4EE6     		_NEXT
 585              	
 586              	//    +	 ( w w -- w )
 587              	// 	Add.
 588              	
 589 0a46 320A0000 		.word	_LSHIFT
 590 0a4a 01       	_PLUS:	.byte   1
 591 0a4b 2B       		.ascii "+"
 592              		.p2align 2 	
 593              	PLUS:
 594 0a4c 57F8045B 		LDR	WP,[DSP],#4
 595 0a50 2E44     		ADD	TOS,TOS,WP
 596 0a52 47E6     		_NEXT 
 597              	
 598              	//    -	 ( w w -- w )
 599              	// 	Subtract.
 600              	
 601 0a54 4A0A0000 		.word	_PLUS
 602 0a58 01       	_SUBB:	.byte   1
 603 0a59 2D       		.ascii "-"
 604 0a5a 00BF     		.p2align 2 	
 605              	SUBB:
 606 0a5c 57F8045B 		LDR	WP,[DSP],#4
 607 0a60 C6EB0506 		RSB	TOS,TOS,WP
 608 0a64 3EE6     		_NEXT 
 609              	
 610              	//    *	 ( w w -- w )
 611              	// 	Multiply.
 612              	
 613 0a66 580A0000 		.word	_SUBB
 614 0a6a 01       	_STAR:	.byte   1
 615 0a6b 2A       		.ascii "*"
 616              		.p2align 2 	
 617              	STAR:
 618 0a6c 57F8045B 		LDR	WP,[DSP],#4
 619 0a70 05FB06F6 		MUL	TOS,WP,TOS
 620 0a74 36E6     		_NEXT 
ARM GAS  forth.s 			page 43


 621              	
 622              	//    UM*	 ( w w -- ud )
 623              	// 	Unsigned multiply.
 624              	
 625 0a76 6A0A0000 		.word	_STAR
 626 0a7a 03       	_UMSTA:	.byte   3
 627 0a7b 554D2A   		.ascii "UM*"
 628 0a7e 00BF     		.p2align 2 	
 629              	UMSTA:
 630 0a80 3D68     		LDR	WP,[DSP]
 631 0a82 A6FB0523 		UMULL	T2,T3,TOS,WP
 632 0a86 3A60     		STR	T2,[DSP]
 633 0a88 1E46     		MOV	TOS,T3
 634 0a8a 2BE6     		_NEXT 
 635              	
 636              	//    M*	 ( w w -- d )
 637              	// 	signed multiply.
 638              	
 639 0a8c 7A0A0000 		.word	_UMSTA
 640 0a90 02       	_MSTAR:	.byte   2
 641 0a91 4D2A     		.ascii "M*"
 642 0a93 00       		.p2align 2 	
 643              	MSTAR:
 644 0a94 3D68     		LDR	WP,[DSP]
 645 0a96 86FB0523 		SMULL	T2,T3,TOS,WP
 646 0a9a 3A60     		STR	T2,[DSP]
 647 0a9c 1E46     		MOV	TOS,T3
 648 0a9e 21E6     		_NEXT 
 649              	
 650              	//    1+	 ( w -- w+1 )
 651              	// 	Add 1.
 652              	
 653 0aa0 900A0000 		.word	_MSTAR
 654 0aa4 02       	_ONEP:	.byte   2
 655 0aa5 312B     		.ascii "1+"
 656 0aa7 00       		.p2align 2 	
 657              	ONEP:
 658 0aa8 06F10106 		ADD	TOS,TOS,#1
 659 0aac 1AE6     		_NEXT 
 660              	
 661              	//    1-	 ( w -- w-1 )
 662              	// 	Subtract 1.
 663              	
 664 0aae A40A0000 		.word	_ONEP
 665 0ab2 02       	_ONEM:	.byte   2
 666 0ab3 312D     		.ascii "1-"
 667 0ab5 0000BF   		.p2align 2 	
 668              	ONEM:
 669 0ab8 A6F10106 		SUB	TOS,TOS,#1
 670 0abc 12E6     		_NEXT 
 671              	
 672              	//    2+	 ( w -- w+2 )
 673              	// 	Add 1.
 674              	
 675 0abe B20A0000 		.word	_ONEM
 676 0ac2 02       	_TWOP:	.byte   2
 677 0ac3 322B     		.ascii "2+"
ARM GAS  forth.s 			page 44


 678 0ac5 0000BF   		.p2align 2 	
 679              	TWOP:
 680 0ac8 06F10206 		ADD	TOS,TOS,#2
 681 0acc 0AE6     		_NEXT
 682              	
 683              	//    2-	 ( w -- w-2 )
 684              	// 	Subtract 2.
 685              	
 686 0ace C20A0000 		.word	_TWOP
 687 0ad2 02       	_TWOM:	.byte   2
 688 0ad3 322D     		.ascii "2-"
 689 0ad5 0000BF   		.p2align 2 	
 690              	TWOM:
 691 0ad8 A6F10206 		SUB	TOS,TOS,#2
 692 0adc 02E6     		_NEXT
 693              	
 694              	//    CELL+	( w -- w+4 )
 695              	// 	Add CELLL.
 696              	
 697 0ade D20A0000 		.word	_TWOM
 698 0ae2 05       	_CELLP:	.byte   5
 699 0ae3 43454C4C 		.ascii "CELL+"
 699      2B
 700              		.p2align 2 	
 701              	CELLP:
 702 0ae8 06F10406 		ADD	TOS,TOS,#CELLL
 703 0aec FAE5     		_NEXT
 704              	
 705              	//    CELL-	( w -- w-4 )
 706              	// 	Subtract CELLL.
 707              	
 708 0aee E20A0000 		.word	_CELLP
 709 0af2 05       	_CELLM:	.byte   5
 710 0af3 43454C4C 		.ascii "CELL-"
 710      2D
 711              		.p2align 2 	
 712              	CELLM:
 713 0af8 A6F10406 		SUB	TOS,TOS,#CELLL
 714 0afc F2E5     		_NEXT
 715              	 
 716              	//    BL	( -- 32 )
 717              	// 	Blank (ASCII space).
 718              	
 719 0afe F20A0000 		.word	_CELLM
 720 0b02 02       	_BLANK:	.byte   2
 721 0b03 424C     		.ascii "BL"
 722 0b05 0000BF   		.p2align 2 	
 723              	BLANK:
 724 0b08 47F8046D 		_PUSH
 725 0b0c 4FF02006 		MOV	TOS,#32
 726 0b10 E8E5     		_NEXT 
 727              	
 728              	//    CELLS	( w -- w*4 )
 729              	// 	Multiply 4.
 730              	
 731 0b12 020B0000 		.word	_BLANK
 732 0b16 05       	_CELLS:	.byte   5
ARM GAS  forth.s 			page 45


 733 0b17 43454C4C 		.ascii "CELLS"
 733      53
 734              		.p2align 2 	
 735              	CELLS:
 736 0b1c 4FEA8606 		MOV	TOS,TOS,LSL#2
 737 0b20 E0E5     		_NEXT
 738              	
 739              	//    CELL/	( w -- w/4 )
 740              	// 	Divide by 4.
 741              	
 742 0b22 160B0000 		.word	_CELLS
 743 0b26 05       	_CELLSL:	.byte   5
 744 0b27 43454C4C 		.ascii "CELL/"
 744      2F
 745              		.p2align 2 	
 746              	CELLSL:
 747 0b2c 4FEAA606 		MOV	TOS,TOS,ASR#2
 748 0b30 D8E5     		_NEXT
 749              	
 750              	//    2*	( w -- w*2 )
 751              	// 	Multiply 2.
 752              	
 753 0b32 260B0000 		.word	_CELLSL
 754 0b36 02       	_TWOST:	.byte   2
 755 0b37 322A     		.ascii "2*"
 756 0b39 0000BF   		.p2align 2 	
 757              	TWOST:
 758 0b3c 4FEA4606 		MOV	TOS,TOS,LSL#1
 759 0b40 D0E5     		_NEXT
 760              	
 761              	//    2/	( w -- w/2 )
 762              	// 	Divide by 2.
 763              	
 764 0b42 360B0000 		.word	_TWOST
 765 0b46 02       	_TWOSL:	.byte   2
 766 0b47 322F     		.ascii "2/"
 767 0b49 0000BF   		.p2align 2 	
 768              	TWOSL:
 769 0b4c 4FEA6606 		MOV	TOS,TOS,ASR#1
 770 0b50 C8E5     		_NEXT
 771              	
 772              	//    ?DUP	( w -- w w | 0 )
 773              	// 	Conditional duplicate.
 774              	
 775 0b52 460B0000 		.word	_TWOSL
 776 0b56 04       	_QDUP:	.byte   4
 777 0b57 3F445550 		.ascii "?DUP"
 778 0b5b 00       		.p2align 2 	
 779              	QDUP:
 780 0b5c 3500     		MOVS	WP,TOS
 781 0b5e 18BF     		IT NE 
 782 0b60 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 783 0b64 BEE5     		_NEXT
 784              	
 785              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 786              	// 	Rotate top 3 items.
 787              	
ARM GAS  forth.s 			page 46


 788 0b66 560B0000 		.word	_QDUP
 789 0b6a 03       	_ROT:	.byte   3
 790 0b6b 524F54   		.ascii "ROT"
 791 0b6e 00BF     		.p2align 2 	
 792              	ROT:
 793 0b70 3868     		LDR	T0,[DSP]  // w2 
 794 0b72 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 795 0b74 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 796 0b76 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 797 0b78 B4E5     		_NEXT
 798              	
 799              	//    2DROP	( w1 w2 -- )
 800              	// 	Drop top 2 items.
 801              	
 802 0b7a 6A0B0000 		.word	_ROT
 803 0b7e 05       	_DDROP:	.byte   5
 804 0b7f 3244524F 		.ascii "2DROP"
 804      50
 805              		.p2align 2 	
 806              	DDROP:
 807 0b84 57F8046B 		_POP
 808 0b88 57F8046B 		_POP
 809 0b8c AAE5     		_NEXT 
 810              	
 811              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 812              	// 	Duplicate top 2 items.
 813              	
 814 0b8e 7E0B0000 		.word	_DDROP
 815 0b92 04       	_DDUP:	.byte   4
 816 0b93 32445550 		.ascii "2DUP"
 817 0b97 00       		.p2align 2 	
 818              	DDUP:
 819 0b98 3868     		LDR	T0,[DSP] // w1
 820 0b9a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 821 0b9e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 822 0ba2 9FE5     		_NEXT
 823              	
 824              	//    D+	( d1 d2 -- d3 )
 825              	// 	Add top 2 double numbers.
 826              	
 827 0ba4 920B0000 		.word	_DDUP
 828 0ba8 02       	_DPLUS:	.byte   2
 829 0ba9 442B     		.ascii "D+"
 830 0bab 00       		.p2align 2 	
 831              	DPLUS:
 832 0bac 57F8045B 		LDR	WP,[DSP],#4
 833 0bb0 57F8042B 		LDR	T2,[DSP],#4
 834 0bb4 3B68     		LDR	T3,[DSP]
 835 0bb6 ED18     		ADDS	WP,WP,T3
 836 0bb8 3D60     		STR	WP,[DSP]
 837 0bba 46EB0206 		ADC	TOS,TOS,T2
 838 0bbe 91E5     		_NEXT
 839              	
 840              	//    NOT	 ( w -- !w )
 841              	// 	1"s complement.
 842              	
 843 0bc0 A80B0000 		.word	_DPLUS
ARM GAS  forth.s 			page 47


 844 0bc4 03       	_INVER:	.byte   3
 845 0bc5 4E4F54   		.ascii "NOT"
 846              		.p2align 2 	
 847              	INVER:
 848 0bc8 6FEA0606 		MVN	TOS,TOS
 849 0bcc 8AE5     		_NEXT
 850              	
 851              	//    NEGATE	( w -- -w )
 852              	// 	2's complement.
 853              	
 854 0bce C40B0000 		.word	_INVER
 855 0bd2 06       	_NEGAT:	.byte   6
 856 0bd3 4E454741 		.ascii "NEGATE"
 856      5445
 857 0bd9 0000BF   		.p2align 2 	
 858              	NEGAT:
 859 0bdc C6F10006 		RSB	TOS,TOS,#0
 860 0be0 80E5     		_NEXT
 861              	
 862              	//    ABS	 ( w -- |w| )
 863              	// 	Absolute.
 864              	
 865 0be2 D20B0000 		.word	_NEGAT
 866 0be6 03       	_ABSS:	.byte   3
 867 0be7 414253   		.ascii "ABS"
 868 0bea 00BF     		.p2align 2 	
 869              	ABSS:
 870 0bec 16F0004F 		TST	TOS,#0x80000000
 871 0bf0 18BF     		IT NE
 872 0bf2 7642     	    RSBNE   TOS,TOS,#0
 873 0bf4 76E5     		_NEXT
 874              	
 875              	//  0= ( w -- f )
 876              	// TOS==0?
 877              	
 878 0bf6 E60B0000 		.word _ABSS
 879 0bfa 02       	_ZEQUAL: .byte 2
 880 0bfb 303D     		.ascii "0="
 881 0bfd 0000BF   		.p2align 2
 882              	ZEQUAL:
 883 0c00 16B9     		cbnz TOS,1f
 884 0c02 4FF0FF36 		mov TOS,#-1
 885 0c06 6DE5     		_NEXT 
 886 0c08 86EA0606 	1:  eor TOS,TOS,TOS  
 887 0c0c 6AE5     		_NEXT 	
 888              	
 889              	//    =	 ( w w -- t )
 890              	// 	Equal?
 891              	
 892 0c0e FA0B0000 		.word	_ZEQUAL
 893 0c12 01       	_EQUAL:	.byte   1
 894 0c13 3D       		.ascii "="
 895              		.p2align 2 	
 896              	EQUAL:
 897 0c14 57F8045B 		LDR	WP,[DSP],#4
 898 0c18 AE42     		CMP	TOS,WP
 899 0c1a 0CBF     		ITE EQ 
ARM GAS  forth.s 			page 48


 900 0c1c 6FF00006 	    MVNEQ	TOS,#0
 901 0c20 0026     		MOVNE	TOS,#0
 902 0c22 5FE5     		_NEXT
 903              	
 904              	//    U<	 ( w w -- t )
 905              	// 	Unsigned less?
 906              	
 907 0c24 120C0000 		.word	_EQUAL
 908 0c28 02       	_ULESS:	.byte   2
 909 0c29 553C     		.ascii "U<"
 910 0c2b 00       		.p2align 2 	
 911              	ULESS:
 912 0c2c 57F8045B 		LDR	WP,[DSP],#4
 913 0c30 B542     		CMP	WP,TOS
 914 0c32 34BF     		ITE CC 
 915 0c34 6FF00006 		MVNCC	TOS,#0
 916 0c38 0026     		MOVCS	TOS,#0
 917 0c3a 53E5     		_NEXT
 918              	
 919              	//    <	( w w -- t )
 920              	// 	Less?
 921              	
 922 0c3c 280C0000 		.word	_ULESS
 923 0c40 01       	_LESS:	.byte   1
 924 0c41 3C       		.ascii "<"
 925 0c42 00BF     		.p2align 2 	
 926              	LESS:
 927 0c44 57F8045B 		LDR	WP,[DSP],#4
 928 0c48 B542     		CMP	WP,TOS
 929 0c4a B4BF     	    ITE LT
 930 0c4c 6FF00006 		MVNLT	TOS,#0
 931 0c50 0026     		MOVGE	TOS,#0
 932 0c52 47E5     		_NEXT 
 933              	
 934              	//    >	( w w -- t )
 935              	// 	greater?
 936              	
 937 0c54 400C0000 		.word	_LESS
 938 0c58 01       	_GREAT:	.byte   1
 939 0c59 3E       		.ascii ">"
 940 0c5a 00BF     		.p2align 2 	
 941              	GREAT:
 942 0c5c 57F8045B 		LDR	WP,[DSP],#4
 943 0c60 B542     		CMP	WP,TOS
 944 0c62 CCBF     		ITE GT
 945 0c64 6FF00006 	    MVNGT	TOS,#0
 946 0c68 0026     		MOVLE	TOS,#0
 947 0c6a 3BE5     		_NEXT
 948              	
 949              	//    MAX	 ( w w -- max )
 950              	// 	Leave maximum.
 951              	
 952 0c6c 580C0000 		.word	_GREAT
 953 0c70 03       	_MAX:	.byte   3
 954 0c71 4D4158   		.ascii "MAX"
 955              		.p2align 2 	
 956              	MAX:
ARM GAS  forth.s 			page 49


 957 0c74 57F8045B 		LDR	WP,[DSP],#4
 958 0c78 B542     		CMP	WP,TOS
 959 0c7a C8BF     		IT GT 
 960 0c7c 2E46     		MOVGT	TOS,WP
 961 0c7e 31E5     		_NEXT 
 962              	
 963              	//    MIN	 ( w w -- min )
 964              	// 	Leave minimum.
 965              	
 966 0c80 700C0000 		.word	_MAX
 967 0c84 03       	_MIN:	.byte   3
 968 0c85 4D494E   		.ascii "MIN"
 969              		.p2align 2 	
 970              	MIN:
 971 0c88 57F8045B 		LDR	WP,[DSP],#4
 972 0c8c B542     		CMP	WP,TOS
 973 0c8e B8BF     		IT LT
 974 0c90 2E46     		MOVLT	TOS,WP
 975 0c92 27E5     		_NEXT
 976              	
 977              	//    +!	 ( w a -- )
 978              	// 	Add to memory.
 979              	
 980 0c94 840C0000 		.word	_MIN
 981 0c98 02       	_PSTOR:	.byte   2
 982 0c99 2B21     		.ascii "+!"
 983 0c9b 00       		.p2align 2 	
 984              	PSTOR:
 985 0c9c 57F8045B 		LDR	WP,[DSP],#4
 986 0ca0 3268     		LDR	T2,[TOS]
 987 0ca2 2A44     		ADD	T2,T2,WP
 988 0ca4 3260     		STR	T2,[TOS]
 989 0ca6 57F8046B 		_POP
 990 0caa 1BE5     		_NEXT
 991              	
 992              	//    2!	 ( d a -- )
 993              	// 	Store double number.
 994              	
 995 0cac 980C0000 		.word	_PSTOR
 996 0cb0 02       	_DSTOR:	.byte   2
 997 0cb1 3221     		.ascii "2!"
 998 0cb3 00       		.p2align 2 	
 999              	DSTOR:
 1000 0cb4 57F8045B 		LDR	WP,[DSP],#4
 1001 0cb8 57F8042B 		LDR	T2,[DSP],#4
 1002 0cbc 46F8045B 		STR	WP,[TOS],#4
 1003 0cc0 3260     		STR	T2,[TOS]
 1004 0cc2 57F8046B 		_POP
 1005 0cc6 0DE5     		_NEXT
 1006              	
 1007              	//    2@	 ( a -- d )
 1008              	// 	Fetch double number.
 1009              	
 1010 0cc8 B00C0000 		.word	_DSTOR
 1011 0ccc 02       	_DAT:	.byte   2
 1012 0ccd 3240     		.ascii "2@"
 1013 0ccf 00       		.p2align 2 	
ARM GAS  forth.s 			page 50


 1014              	DAT:
 1015 0cd0 7568     		LDR	WP,[TOS,#4]
 1016 0cd2 47F8045D 		STR	WP,[DSP,#-4]!
 1017 0cd6 3668     		LDR	TOS,[TOS]
 1018 0cd8 04E5     		_NEXT
 1019              	
 1020              	//    COUNT	( b -- b+1 c )
 1021              	// 	Fetch length of string.
 1022              	
 1023 0cda CC0C0000 		.word	_DAT
 1024 0cde 05       	_COUNT:	.byte   5
 1025 0cdf 434F554E 		.ascii "COUNT"
 1025      54
 1026              		.p2align 2 	
 1027              	COUNT:
 1028 0ce4 16F8015B 		LDRB	WP,[TOS],#1
 1029 0ce8 47F8046D 		_PUSH
 1030 0cec 2E46     		MOV	TOS,WP
 1031 0cee F9E4     		_NEXT
 1032              	
 1033              	//    DNEGATE	( d -- -d )
 1034              	// 	Negate double number.
 1035              	
 1036 0cf0 DE0C0000 		.word	_COUNT
 1037 0cf4 07       	_DNEGA:	.byte   7
 1038 0cf5 444E4547 		.ascii "DNEGATE"
 1038      415445
 1039              		.p2align 2 	
 1040              	DNEGA:
 1041 0cfc 3D68     		LDR	WP,[DSP]
 1042 0cfe A2EB0202 		SUB	T2,T2,T2
 1043 0d02 551B     		SUBS WP,T2,WP
 1044 0d04 62EB0606 		SBC	TOS,T2,TOS
 1045 0d08 3D60     		STR	WP,[DSP]
 1046 0d0a EBE4     		_NEXT
 1047              	
 1048              	// **************************************************************************
 1049              	//  System and user variables
 1050              	
 1051              	//    doVAR	( -- a )
 1052              	// 	Run time routine for VARIABLE and CREATE.
 1053              	
 1054              	// 	.word	_DNEGA
 1055              	// _DOVAR	.byte  COMPO+5
 1056              	// 	.ascii "doVAR"
 1057              	// 	.p2align 2 	
 1058              	DOVAR:
 1059 0d0c 47F8046D 		_PUSH
 1060 0d10 6646     		MOV TOS,IP
 1061 0d12 0CF1040C 		ADD IP,IP,#4 
 1062 0d16 E8E4     		B UNNEST 
 1063              	
 1064              	//    doCON	( -- a ) 
 1065              	// 	Run time routine for CONSTANT.
 1066              	
 1067              	// 	.word	_DOVAR
 1068              	// _DOCON	.byte  COMPO+5
ARM GAS  forth.s 			page 51


 1069              	// 	.ascii "doCON"
 1070              	// 	.p2align 2 	
 1071              	DOCON:
 1072 0d18 47F8046D 		_PUSH
 1073 0d1c 5CF8046B 		LDR.W TOS,[IP],#4 
 1074 0d20 E3E4     		B UNNEST 
 1075              	
 1076              	/***********************
 1077              	  system variables 
 1078              	***********************/
 1079              	
 1080              	 // SEED ( -- a)
 1081              	 // return PRNG seed address 
 1082              	
 1083 0d22 F40C0000 		.word _DNEGA
 1084 0d26 04       	_SEED: .byte 4
 1085 0d27 53454544 		.ascii "SEED"
 1086 0d2b 00       		.p2align 2
 1087              	SEED:
 1088 0d2c 47F8046D 		_PUSH 
 1089 0d30 04F10406 		ADD TOS,UP,#RNDSEED
 1090 0d34 D6E4     		_NEXT 	
 1091              	
 1092              	//  MSEC ( -- a)
 1093              	// return address of milliseconds counter
 1094 0d36 260D0000 	  .word _SEED 
 1095 0d3a 04       	_MSEC: .byte 4
 1096 0d3b 4D534543 	  .ascii "MSEC"
 1097 0d3f 00       	  .p2align 2 
 1098              	MSEC:
 1099 0d40 47F8046D 	  _PUSH
 1100 0d44 04F10806 	  ADD TOS,UP,#TICKS
 1101 0d48 CCE4     	  _NEXT 
 1102              	
 1103              	// TIMER ( -- a )
 1104              	// count down timer 
 1105 0d4a 3A0D0000 	  .word _MSEC
 1106 0d4e 05       	_TIMER:  .byte 5
 1107 0d4f 54494D45 	  .ascii "TIMER"
 1107      52
 1108              	  .p2align 2 
 1109              	TIMER:
 1110 0d54 47F8046D 	  _PUSH 
 1111 0d58 04F10C06 	  ADD TOS,UP,#CD_TIMER
 1112 0d5c C2E4     	  _NEXT
 1113              	
 1114              	//    'BOOT	 ( -- a )
 1115              	// 	Application.
 1116              	
 1117 0d5e 4E0D0000 		.word	_TIMER
 1118 0d62 05       	_TBOOT:	.byte   5
 1119 0d63 27424F4F 		.ascii "'BOOT"
 1119      54
 1120              		.p2align 2 	
 1121              	TBOOT:
 1122 0d68 47F8046D 		_PUSH
 1123 0d6c 04F11006 		ADD	TOS,UP,#BOOT 
ARM GAS  forth.s 			page 52


 1124 0d70 B8E4     		_NEXT
 1125              		
 1126              	//    BASE	( -- a )
 1127              	// 	Storage of the radix base for numeric I/O.
 1128              	
 1129 0d72 620D0000 		.word	_TBOOT
 1130 0d76 04       	_BASE:	.byte   4
 1131 0d77 42415345 		.ascii "BASE"
 1132 0d7b 00       		.p2align 2 	
 1133              	BASE:
 1134 0d7c 47F8046D 		_PUSH
 1135 0d80 04F11406 		ADD	TOS,UP,#NBASE
 1136 0d84 AEE4     		_NEXT
 1137              	
 1138              	//    tmp	 ( -- a )
 1139              	// 	A temporary storage location used in parse and find.
 1140              	
 1141              	// 	.word	_BASE
 1142              	// _TEMP	.byte   COMPO+3
 1143              	// 	.ascii "tmp"
 1144              	// 	.p2align 2 	
 1145              	TEMP:
 1146 0d86 47F8046D 		_PUSH
 1147 0d8a 04F11806 		ADD	TOS,UP,#TMP
 1148 0d8e A9E4     		_NEXT
 1149              	
 1150              	//    SPAN	( -- a )
 1151              	// 	Hold character count received by EXPECT.
 1152              	
 1153 0d90 760D0000 		.word	_BASE
 1154 0d94 04       	_SPAN:	.byte   4
 1155 0d95 5350414E 		.ascii "SPAN"
 1156 0d99 0000BF   		.p2align 2 	
 1157              	SPAN:
 1158 0d9c 47F8046D 		_PUSH
 1159 0da0 04F69C56 		ADD	TOS,UP,#SPAN
 1160 0da4 9EE4     		_NEXT
 1161              	
 1162              	//    >IN	 ( -- a )
 1163              	// 	Hold the character pointer while parsing input stream.
 1164              	
 1165 0da6 940D0000 		.word	_SPAN
 1166 0daa 03       	_INN:	.byte   3
 1167 0dab 3E494E   		.ascii ">IN"
 1168 0dae 00BF     		.p2align 2 	
 1169              	INN:
 1170 0db0 47F8046D 		_PUSH
 1171 0db4 04F12006 		ADD	TOS,UP,#TOIN
 1172 0db8 94E4     		_NEXT
 1173              	
 1174              	//    #TIB	( -- a )
 1175              	// 	Hold the current count and address of the terminal input buffer.
 1176              	
 1177 0dba AA0D0000 		.word	_INN
 1178 0dbe 04       	_NTIB:	.byte   4
 1179 0dbf 23544942 		.ascii "#TIB"
 1180 0dc3 00       		.p2align 2 	
ARM GAS  forth.s 			page 53


 1181              	NTIB:
 1182 0dc4 47F8046D 		_PUSH
 1183 0dc8 04F6C456 		ADD	TOS,UP,#NTIB
 1184 0dcc 8AE4     		_NEXT
 1185              	
 1186              	//    'EVAL	( -- a )
 1187              	// 	Execution vector of EVAL.
 1188              	
 1189 0dce BE0D0000 		.word	_NTIB
 1190 0dd2 05       	_TEVAL:	.byte   5
 1191 0dd3 27455641 		.ascii "'EVAL"
 1191      4C
 1192              		.p2align 2 	
 1193              	TEVAL:
 1194 0dd8 47F8046D 		_PUSH
 1195 0ddc 04F12C06 		ADD	TOS,UP,#EVAL
 1196 0de0 80E4     		_NEXT
 1197              	
 1198              	//    HLD	 ( -- a )
 1199              	// 	Hold a pointer in building a numeric output string.
 1200              	
 1201 0de2 D20D0000 		.word	_TEVAL
 1202 0de6 03       	_HLD:	.byte   3
 1203 0de7 484C44   		.ascii "HLD"
 1204 0dea 00BF     		.p2align 2 	
 1205              	HLD:
 1206 0dec 47F8046D 		_PUSH
 1207 0df0 04F6EC56 		ADD	TOS,UP,#HLD
 1208 0df4 76E4     		_NEXT
 1209              	
 1210              	//    CONTEXT	( -- a )
 1211              	// 	A area to specify vocabulary search order.
 1212              	
 1213 0df6 E60D0000 		.word	_HLD
 1214 0dfa 07       	_CNTXT:	.byte   7
 1215 0dfb 434F4E54 		.ascii "CONTEXT"
 1215      455854
 1216 0e02 00BF     		.p2align 2 	
 1217              	CNTXT:
 1218              	CRRNT:
 1219 0e04 47F8046D 		_PUSH
 1220 0e08 04F13406 		ADD	TOS,UP,#CTXT
 1221 0e0c 6AE4     		_NEXT
 1222              	
 1223              	//    CP	( -- a )
 1224              	// 	Point to top name in RAM vocabulary.
 1225              	
 1226 0e0e FA0D0000 		.word	_CNTXT
 1227 0e12 02       	_CP:	.byte   2
 1228 0e13 4350     		.ascii "CP"
 1229 0e15 0000BF   		.p2align 2 	
 1230              	CPP:
 1231 0e18 47F8046D 		_PUSH
 1232 0e1c 04F13C06 		ADD	TOS,UP,#USER_CTOP
 1233 0e20 60E4     		_NEXT
 1234              	
 1235              	//   FCP ( -- a )
ARM GAS  forth.s 			page 54


 1236              	//  Point ot top of Forth system dictionary
 1237 0e22 120E0000 		.word _CP
 1238 0e26 03       	_FCP: .byte 3            
 1239 0e27 464350   		.ascii "FCP"
 1240 0e2a 00BF     		.p2align 2 
 1241              	FCP: 
 1242 0e2c 47F8046D 		_PUSH 
 1243 0e30 04F13806 		ADD TOS,UP,#FORTH_CTOP 
 1244 0e34 56E4     		_NEXT 
 1245              	
 1246              	//    LAST	( -- a )
 1247              	// 	Point to the last name in the name dictionary.
 1248              	
 1249 0e36 260E0000 		.word	_FCP
 1250 0e3a 04       	_LAST:	.byte   4
 1251 0e3b 4C415354 		.ascii "LAST"
 1252 0e3f 00       		.p2align 2 	
 1253              	LAST:
 1254 0e40 47F8046D 		_PUSH
 1255 0e44 04F14006 		ADD	TOS,UP,#LASTN
 1256 0e48 4CE4     		_NEXT
 1257              	
 1258              	// BACK-COLOR ( -- a )
 1259              	//   back color variable 
 1260 0e4a 3A0E0000 	   .word _LAST 
 1261 0e4e 0A       	_BACKCOLOR: .byte 10 
 1262 0e4f 4241434B 		.ascii "BACK-COLOR"
 1262      2D434F4C 
 1262      4F52
 1263 0e59 0000BF   		.p2align 2 
 1264              	BACKCOLOR:   
 1265 0e5c 47F8046D 		_PUSH 
 1266 0e60 04F19006 		ADD TOS,UP,#BK_COLOR
 1267 0e64 3EE4     		_NEXT
 1268              	
 1269              	// PEN-COLOR ( -- a )
 1270              	// pen color variable 
 1271 0e66 4E0E0000 	    .word _BACKCOLOR 
 1272 0e6a 09       	_PENCOLOR: .byte 9
 1273 0e6b 50454E2D 		.ascii "PEN-COLOR"
 1273      434F4C4F 
 1273      52
 1274              		.p2align 2 
 1275              	PENCOLOR: 
 1276 0e74 47F8046D 		_PUSH 
 1277 0e78 04F19406 		ADD TOS,UP,#PEN_COLOR
 1278 0e7c 32E4     		_NEXT 
 1279              	
 1280              	//	FTRACE ( -- a )
 1281              	// return trace flag address 
 1282 0e7e 6A0E0000 		.word _PENCOLOR   
 1283 0e82 06       	_FTRACE: .byte 6
 1284 0e83 46545241 		.ascii "FTRACE"
 1284      4345
 1285 0e89 0000BF   		.p2align 2 
 1286              	FTRACE:	
 1287 0e8c 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 55


 1288 0e90 04F68C66 		ADD TOS,UP,#FTRACE 
 1289 0e94 26E4     		_NEXT 
 1290              	
 1291              	/***********************
 1292              		system constants 
 1293              	***********************/
 1294              	
 1295              	//	USER_BEGIN ( -- a )
 1296              	//  where user area begin in RAM
 1297 0e96 820E0000 		.word _FTRACE
 1298 0e9a 0A       	_USER_BGN: .byte 10
 1299 0e9b 55534552 		.ascii "USER_BEGIN"
 1299      5F424547 
 1299      494E
 1300 0ea5 0000BF   		.p2align 2
 1301              	USER_BEGIN:
 1302 0ea8 47F8046D 		_PUSH 
 1303 0eac 004E     		ldr TOS,USR_BGN_ADR 
 1304 0eae 19E4     		_NEXT 
 1305              	USR_BGN_ADR:
 1306 0eb0 12050020 	.word  DTOP 
 1307              	
 1308              	//  USER_END ( -- a )
 1309              	//  where user area end in RAM 
 1310 0eb4 9A0E0000 		.word _USER_BGN
 1311 0eb8 08       	_USER_END: .byte 8 
 1312 0eb9 55534552 		.ascii "USER_END" 
 1312      5F454E44 
 1313 0ec1 0000BF   		.p2align 2 
 1314              	USER_END:
 1315 0ec4 47F8046D 		_PUSH 
 1316 0ec8 004E     		ldr TOS,USER_END_ADR 
 1317 0eca 0BE4     		_NEXT 
 1318              	USER_END_ADR:
 1319 0ecc FC800120 		.word DEND 
 1320              	
 1321              	
 1322              	/* *********************
 1323              	  Common functions
 1324              	***********************/
 1325              	
 1326              	//    WITHIN	( u ul uh -- t )
 1327              	// 	Return true if u is within the range of ul and uh.
 1328              	
 1329 0ed0 B80E0000 		.word	_USER_END 
 1330 0ed4 06       	_WITHI:	.byte   6
 1331 0ed5 57495448 		.ascii "WITHIN"
 1331      494E
 1332 0edb 00       		.p2align 2 	
 1333              	WITHI:
 1334 0edc 504700BF 		_NEST
 1335 0ee0 AD090000 		_ADR	OVER
 1336 0ee4 5D0A0000 		_ADR	SUBB
 1337 0ee8 31090000 		_ADR	TOR
 1338 0eec 5D0A0000 		_ADR	SUBB
 1339 0ef0 09090000 		_ADR	RFROM
 1340 0ef4 2D0C0000 		_ADR	ULESS
ARM GAS  forth.s 			page 56


 1341 0ef8 EB060000 		_UNNEST
 1342              	
 1343              	//  Divide
 1344              	
 1345              	//    UM/MOD	( udl udh u -- ur uq )
 1346              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1347              	
 1348 0efc D40E0000 		.word	_WITHI
 1349 0f00 06       	_UMMOD:	.byte   6
 1350 0f01 554D2F4D 		.ascii "UM/MOD"
 1350      4F44
 1351 0f07 00       		.p2align 2 	
 1352              	UMMOD:
 1353 0f08 4FF00103 		MOV	T3,#1
 1354 0f0c 57F8045B 		LDR	WP,[DSP],#4
 1355 0f10 3A68     		LDR	T2,[DSP]
 1356              	UMMOD0:
 1357 0f12 9218     		ADDS	T2,T2,T2
 1358 0f14 6D41     		ADCS	WP,WP,WP
 1359 0f16 04D3     		BCC	UMMOD1
 1360 0f18 A5EB0605 		SUB	WP,WP,TOS
 1361 0f1c 02F10102 		ADD	T2,T2,#1
 1362 0f20 04E0     		B UMMOD2
 1363              	UMMOD1:
 1364 0f22 AD1B     		SUBS	WP,WP,TOS 
 1365 0f24 28BF     		IT CS 
 1366 0f26 0132     		ADDCS	T2,T2,#1
 1367 0f28 00D2     		BCS	UMMOD2
 1368 0f2a 3544     		ADD	WP,WP,TOS
 1369              	UMMOD2:
 1370 0f2c DB18     		ADDS	T3,T3,T3
 1371 0f2e F0D3     		BCC	UMMOD0
 1372 0f30 1646     		MOV	TOS,T2
 1373 0f32 3D60     		STR	WP,[DSP]
 1374 0f34 FFF7D6BB 		_NEXT
 1375              	
 1376              	//    M/MOD	( d n -- r q )
 1377              	// 	Signed floored divide of double by single. Return mod and quotient.
 1378              	
 1379 0f38 000F0000 		.word	_UMMOD
 1380 0f3c 05       	_MSMOD:	.byte  5
 1381 0f3d 4D2F4D4F 		.ascii "M/MOD"
 1381      44
 1382 0f42 00BF     		.p2align 2 	
 1383              	MSMOD:	
 1384 0f44 504700BF 		_NEST
 1385 0f48 89090000 		_ADR	DUPP
 1386 0f4c BD090000 		_ADR	ZLESS
 1387 0f50 89090000 		_ADR	DUPP
 1388 0f54 31090000 		_ADR	TOR
 1389 0f58 97080000 		_QBRAN MMOD1
 1389      700F0000 
 1390 0f60 DD0B0000 		_ADR	NEGAT
 1391 0f64 31090000 		_ADR	TOR
 1392 0f68 FD0C0000 		_ADR	DNEGA
 1393 0f6c 09090000 		_ADR	RFROM
 1394              	MMOD1:
ARM GAS  forth.s 			page 57


 1395 0f70 31090000 		_ADR	TOR
 1396 0f74 89090000 		_ADR	DUPP
 1397 0f78 BD090000 		_ADR	ZLESS
 1398 0f7c 97080000 		_QBRAN MMOD2
 1398      8C0F0000 
 1399 0f84 1D090000 		_ADR	RAT
 1400 0f88 4D0A0000 		_ADR	PLUS
 1401              	MMOD2:
 1402 0f8c 09090000 		_ADR	RFROM
 1403 0f90 090F0000 		_ADR	UMMOD
 1404 0f94 09090000 		_ADR	RFROM
 1405 0f98 97080000 		_QBRAN	MMOD3
 1405      AC0F0000 
 1406 0fa0 99090000 		_ADR	SWAP
 1407 0fa4 DD0B0000 		_ADR	NEGAT
 1408 0fa8 99090000 		_ADR	SWAP
 1409              	MMOD3:   
 1410 0fac EB060000 		_UNNEST
 1411              	
 1412              	//    /MOD	( n n -- r q )
 1413              	// 	Signed divide. Return mod and quotient.
 1414              	
 1415 0fb0 3C0F0000 		.word	_MSMOD
 1416 0fb4 04       	_SLMOD:	.byte   4
 1417 0fb5 2F4D4F44 		.ascii "/MOD"
 1418 0fb9 0000BF   		.p2align 2 	
 1419              	SLMOD:
 1420 0fbc 504700BF 		_NEST
 1421 0fc0 AD090000 		_ADR	OVER
 1422 0fc4 BD090000 		_ADR	ZLESS
 1423 0fc8 99090000 		_ADR	SWAP
 1424 0fcc 450F0000 		_ADR	MSMOD
 1425 0fd0 EB060000 		_UNNEST
 1426              	
 1427              	//    MOD	 ( n n -- r )
 1428              	// 	Signed divide. Return mod only.
 1429              	
 1430 0fd4 B40F0000 		.word	_SLMOD
 1431 0fd8 03       	_MODD:	.byte  3
 1432 0fd9 4D4F44   		.ascii "MOD"
 1433              		.p2align 2 	
 1434              	MODD:
 1435 0fdc 504700BF 		_NEST
 1436 0fe0 BD0F0000 		_ADR	SLMOD
 1437 0fe4 79090000 		_ADR	DROP
 1438 0fe8 EB060000 		_UNNEST
 1439              	
 1440              	//    /	   ( n n -- q )
 1441              	// 	Signed divide. Return quotient only.
 1442              	
 1443 0fec D80F0000 		.word	_MODD
 1444 0ff0 01       	_SLASH:	.byte  1
 1445 0ff1 2F       		.ascii "/"
 1446 0ff2 00BF     		.p2align 2 	
 1447              	SLASH:
 1448 0ff4 504700BF 		_NEST
 1449 0ff8 BD0F0000 		_ADR	SLMOD
ARM GAS  forth.s 			page 58


 1450 0ffc 99090000 		_ADR	SWAP
 1451 1000 79090000 		_ADR	DROP
 1452 1004 EB060000 		_UNNEST
 1453              	
 1454              	//    */MOD	( n1 n2 n3 -- r q )
 1455              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1456              	
 1457 1008 F00F0000 		.word	_SLASH
 1458 100c 05       	_SSMOD:	.byte  5
 1459 100d 2A2F4D4F 		.ascii "*/MOD"
 1459      44
 1460 1012 00BF     		.p2align 2 	
 1461              	SSMOD:
 1462 1014 504700BF 		_NEST
 1463 1018 31090000 		_ADR	TOR
 1464 101c 950A0000 		_ADR	MSTAR
 1465 1020 09090000 		_ADR	RFROM
 1466 1024 450F0000 		_ADR	MSMOD
 1467 1028 EB060000 		_UNNEST
 1468              	
 1469              	//    */	  ( n1 n2 n3 -- q )
 1470              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1471              	
 1472 102c 0C100000 		.word	_SSMOD
 1473 1030 02       	_STASL:	.byte  2
 1474 1031 2A2F     		.ascii "*/"
 1475 1033 00       		.p2align 2 	
 1476              	STASL:
 1477 1034 504700BF 		_NEST
 1478 1038 15100000 		_ADR	SSMOD
 1479 103c 99090000 		_ADR	SWAP
 1480 1040 79090000 		_ADR	DROP
 1481 1044 EB060000 		_UNNEST
 1482              	
 1483              	// **************************************************************************
 1484              	//  Miscellaneous
 1485              	
 1486              	//    ALIGNED	( b -- a )
 1487              	// 	Align address to the cell boundary.
 1488              	
 1489 1048 30100000 		.word	_STASL
 1490 104c 07       	_ALGND:	.byte   7
 1491 104d 414C4947 		.ascii "ALIGNED"
 1491      4E4544
 1492              		.p2align 2 	
 1493              	ALGND:
 1494 1054 06F10306 		ADD	TOS,TOS,#3
 1495 1058 6FF00305 		MVN	WP,#3
 1496 105c 06EA0506 		AND	TOS,TOS,WP
 1497 1060 FFF740BB 		_NEXT
 1498              	
 1499              	//    >CHAR	( c -- c )
 1500              	// 	Filter non-printing characters.
 1501              	
 1502 1064 4C100000 		.word	_ALGND
 1503 1068 05       	_TCHAR:	.byte  5
 1504 1069 3E434841 		.ascii ">CHAR"
ARM GAS  forth.s 			page 59


 1504      52
 1505 106e 00BF     		.p2align 2 	
 1506              	TCHAR:
 1507 1070 504700BF 		_NEST
 1508 1074 55080000 		_DOLIT  0x7F
 1508      7F000000 
 1509 107c CD090000 		_ADR	ANDD
 1510 1080 89090000 		_ADR	DUPP	// mask msb
 1511 1084 090B0000 		_ADR	BLANK
 1512 1088 55080000 		_DOLIT 	127
 1512      7F000000 
 1513 1090 DD0E0000 		_ADR	WITHI	// check for printable
 1514 1094 C90B0000 		_ADR	INVER
 1515 1098 97080000 		_QBRAN	TCHA1
 1515      AC100000 
 1516 10a0 79090000 		_ADR	DROP
 1517 10a4 55080000 		_DOLIT 	'_'	// replace non-printables
 1517      5F000000 
 1518              	TCHA1:
 1519 10ac EB060000 		  _UNNEST
 1520              	
 1521              	//    DEPTH	( -- n )
 1522              	// 	Return the depth of the data stack.
 1523              	
 1524 10b0 68100000 		.word	_TCHAR
 1525 10b4 05       	_DEPTH:	.byte  5
 1526 10b5 44455054 		.ascii "DEPTH"
 1526      48
 1527 10ba 00BF     		.p2align 2 	
 1528              	DEPTH:
 1529 10bc 4FF47F42 		_MOV32 T2,SPP 
 1529      C2F20102 
 1530 10c4 A2EB0702 		SUB	T2,T2,DSP
 1531 10c8 47F8046D 		_PUSH
 1532 10cc 4FEAA206 		ASR	TOS,T2,#2
 1533 10d0 FFF708BB 		_NEXT
 1534              	
 1535              	//    PICK	( ... +n -- ... w )
 1536              	// 	Copy the nth stack item to tos.
 1537              	
 1538 10d4 B4100000 		.word	_DEPTH
 1539 10d8 04       	_PICK:	.byte  4
 1540 10d9 5049434B 		.ascii "PICK"
 1541 10dd 0000BF   		.p2align 2 	
 1542              	PICK:
 1543 10e0 504700BF 		_NEST
 1544 10e4 A90A0000 		_ADR	ONEP
 1545 10e8 1D0B0000 		_ADR	CELLS
 1546 10ec 65090000 		_ADR	SPAT
 1547 10f0 4D0A0000 		_ADR	PLUS
 1548 10f4 DD080000 		_ADR	AT
 1549 10f8 EB060000 		_UNNEST
 1550              	
 1551              	// **************************************************************************
 1552              	//  Memory access
 1553              	
 1554              	//    HERE	( -- a )
ARM GAS  forth.s 			page 60


 1555              	// 	Return the top of the code dictionary.
 1556              	
 1557 10fc D8100000 		.word	_PICK
 1558 1100 04       	_HERE:	.byte  4
 1559 1101 48455245 		.ascii "HERE"
 1560 1105 0000BF   		.p2align 2 	
 1561              	HERE:
 1562 1108 504700BF 		_NEST
 1563 110c 190E0000 		_ADR	CPP
 1564 1110 DD080000 		_ADR	AT
 1565 1114 EB060000 		_UNNEST
 1566              		
 1567              	//    PAD	 ( -- a )
 1568              	// 	Return the address of a temporary buffer.
 1569              	
 1570 1118 00110000 		.word	_HERE
 1571 111c 03       	_PAD:	.byte  3
 1572 111d 504144   		.ascii "PAD"
 1573              		.p2align 2 	
 1574              	PAD:
 1575 1120 504700BF 		_NEST
 1576 1124 09110000 		_ADR	HERE
 1577 1128 55080000 		_DOLIT 80
 1577      50000000 
 1578 1130 4D0A0000 		_ADR PLUS 
 1579 1134 EB060000 		_UNNEST
 1580              	
 1581              	//    TIB	 ( -- a )
 1582              	// 	Return the address of the terminal input buffer.
 1583              	
 1584 1138 1C110000 		.word	_PAD
 1585 113c 03       	_TIB:	.byte  3
 1586 113d 544942   		.ascii "TIB"
 1587              		.p2align 2 	
 1588              	TIB:
 1589 1140 47F8046D 		_PUSH
 1590 1144 A66A     		ldr TOS,[UP,#TIBUF]
 1591 1146 FFF7CDBA 		_NEXT
 1592              	
 1593              	//    @EXECUTE	( a -- )
 1594              	// 	Execute vector stored in address a.
 1595              	
 1596 114a 3C110000 		.word	_TIB
 1597 114e 08       	_ATEXE:	.byte   8
 1598 114f 40455845 		.ascii "@EXECUTE"
 1598      43555445 
 1599 1157 00       		.p2align 2 	
 1600              	ATEXE: 
 1601 1158 3500     		MOVS	WP,TOS
 1602 115a 57F8046B 		_POP
 1603 115e 2D68     		LDR	WP,[WP]
 1604 1160 45F00105 		ORR	WP,WP,#1
 1605 1164 18BF     	    IT NE 
 1606 1166 2847     		BXNE	WP
 1607 1168 FFF7BCBA 		_NEXT
 1608              	
 1609              	//    CMOVE	( b1 b2 u -- )
ARM GAS  forth.s 			page 61


 1610              	// 	Copy u bytes from b1 to b2.
 1611              	
 1612 116c 4E110000 		.word	_ATEXE
 1613 1170 05       	_CMOVE:	.byte   5
 1614 1171 434D4F56 		.ascii "CMOVE"
 1614      45
 1615 1176 00BF     		.p2align 2 	
 1616              	CMOVE:
 1617 1178 57F8042B 		LDR	T2,[DSP],#4
 1618 117c 57F8043B 		LDR	T3,[DSP],#4
 1619 1180 03E0     		B CMOV1
 1620              	CMOV0:
 1621 1182 13F8015B 		LDRB	WP,[T3],#1
 1622 1186 02F8015B 		STRB	WP,[T2],#1
 1623              	CMOV1:
 1624 118a 3600     		MOVS	TOS,TOS
 1625 118c 02D0     		BEQ	CMOV2
 1626 118e A6F10106 		SUB	TOS,TOS,#1
 1627 1192 F6E7     		B CMOV0
 1628              	CMOV2:
 1629 1194 57F8046B 		_POP
 1630 1198 FFF7A4BA 		_NEXT
 1631              	
 1632              	//    MOVE	( a1 a2 u -- )
 1633              	// 	Copy u words from a1 to a2.
 1634              	
 1635 119c 70110000 		.word	_CMOVE
 1636 11a0 04       	_MOVE:	.byte   4
 1637 11a1 4D4F5645 		.ascii "MOVE"
 1638 11a5 0000BF   		.p2align 2 	
 1639              	MOVE:
 1640 11a8 26F00306 		AND	TOS,TOS,#-4
 1641 11ac 57F8042B 		LDR	T2,[DSP],#4
 1642 11b0 57F8043B 		LDR	T3,[DSP],#4
 1643 11b4 03E0     		B MOVE1
 1644              	MOVE0:
 1645 11b6 53F8045B 		LDR	WP,[T3],#4
 1646 11ba 42F8045B 		STR	WP,[T2],#4
 1647              	MOVE1:
 1648 11be 3600     		MOVS	TOS,TOS
 1649 11c0 02D0     		BEQ	MOVE2
 1650 11c2 A6F10406 		SUB	TOS,TOS,#4
 1651 11c6 F6E7     		B MOVE0
 1652              	MOVE2:
 1653 11c8 57F8046B 		_POP
 1654 11cc FFF78ABA 		_NEXT
 1655              	
 1656              	//    FILL	( b u c -- )
 1657              	// 	Fill u bytes of character c to area beginning at b.
 1658              	
 1659 11d0 A0110000 		.word	_MOVE
 1660 11d4 04       	_FILL:	.byte   4
 1661 11d5 46494C4C 		.ascii "FILL"
 1662 11d9 0000BF   		.p2align 2 	
 1663              	FILL:
 1664 11dc 57F8042B 		LDR	T2,[DSP],#4
 1665 11e0 57F8043B 		LDR	T3,[DSP],#4
ARM GAS  forth.s 			page 62


 1666              	FILL0:
 1667 11e4 00E0     		B FILL1
 1668 11e6 3646     		MOV	TOS,TOS
 1669              	FILL1:
 1670 11e8 03F8016B 		STRB	TOS,[T3],#1
 1671 11ec 1200     		MOVS	T2,T2
 1672 11ee 02D0     		BEQ	FILL2
 1673 11f0 A2F10102 		SUB	T2,T2,#1
 1674 11f4 F6E7     		B FILL0
 1675              	FILL2:
 1676 11f6 57F8046B 		_POP
 1677 11fa FFF773BA 		_NEXT
 1678              	
 1679              	//    PACK$	( b u a -- a )
 1680              	// 	Build a counted word with u characters from b. Null fill.
 1681              	
 1682 11fe D4110000 		.word	_FILL
 1683 1202 05       	_PACKS:	.byte  5
 1684 1203 5041434B 		.ascii "PACK$$"
 1684      2424
 1685 1209 0000BF   		.p2align 2 	
 1686              	PACKS:
 1687 120c 504700BF 		_NEST
 1688 1210 55100000 		_ADR	ALGND
 1689 1214 89090000 		_ADR	DUPP
 1690 1218 31090000 		_ADR	TOR			// strings only on cell boundary
 1691 121c AD090000 		_ADR	OVER
 1692 1220 4D0A0000 		_ADR	PLUS
 1693 1224 A90A0000 		_ADR	ONEP
 1694 1228 55080000 		_DOLIT 	0xFFFFFFFC
 1694      FCFFFFFF 
 1695 1230 CD090000 		_ADR	ANDD			// count mod cell
 1696 1234 55080000 		_DOLIT 	0
 1696      00000000 
 1697 123c 99090000 		_ADR	SWAP
 1698 1240 C9080000 		_ADR	STORE			// null fill cell
 1699 1244 1D090000 		_ADR	RAT
 1700 1248 990B0000 		_ADR	DDUP
 1701 124c E9080000 		_ADR	CSTOR
 1702 1250 A90A0000 		_ADR	ONEP			// save count
 1703 1254 99090000 		_ADR	SWAP
 1704 1258 79110000 		_ADR	CMOVE
 1705 125c 09090000 		_ADR	RFROM
 1706 1260 EB060000 		_UNNEST   			// move string
 1707              	
 1708              	// **************************************************************************
 1709              	//  Numeric output, single precision
 1710              	
 1711              	//    DIGIT	( u -- c )
 1712              	// 	Convert digit u to a character.
 1713              	
 1714 1264 02120000 		.word	_PACKS
 1715 1268 05       	_DIGIT:	.byte  5
 1716 1269 44494749 		.ascii "DIGIT"
 1716      54
 1717 126e 00BF     		.p2align 2 	
 1718              	DIGIT:
ARM GAS  forth.s 			page 63


 1719 1270 504700BF 		_NEST
 1720 1274 55080000 		_DOLIT 9
 1720      09000000 
 1721 127c AD090000 		_ADR	OVER
 1722 1280 450C0000 		_ADR	LESS
 1723 1284 55080000 		_DOLIT	7
 1723      07000000 
 1724 128c CD090000 		_ADR	ANDD
 1725 1290 4D0A0000 		_ADR	PLUS
 1726 1294 55080000 		_DOLIT	'0'
 1726      30000000 
 1727 129c 4D0A0000 		_ADR	PLUS 
 1728 12a0 EB060000 		_UNNEST
 1729              	
 1730              	//    EXTRACT	( n base -- n c )
 1731              	// 	Extract the least significant digit from n.
 1732              	
 1733 12a4 68120000 		.word	_DIGIT
 1734 12a8 07       	_EXTRC:	.byte  7
 1735 12a9 45585452 		.ascii "EXTRACT"
 1735      414354
 1736              		.p2align 2 	
 1737              	EXTRC:
 1738 12b0 504700BF 		_NEST
 1739 12b4 55080000 		_DOLIT 0
 1739      00000000 
 1740 12bc 99090000 		_ADR	SWAP
 1741 12c0 090F0000 		_ADR	UMMOD
 1742 12c4 99090000 		_ADR	SWAP
 1743 12c8 71120000 		_ADR	DIGIT
 1744 12cc EB060000 		_UNNEST
 1745              	
 1746              	//    <#	  ( -- )
 1747              	// 	Initiate the numeric output process.
 1748              	
 1749 12d0 A8120000 		.word	_EXTRC
 1750 12d4 02       	_BDIGS:	.byte  2
 1751 12d5 3C23     		.ascii "<#"
 1752 12d7 00       		.p2align 2 	
 1753              	BDIGS:
 1754 12d8 504700BF 		_NEST
 1755 12dc 21110000 		_ADR	PAD
 1756 12e0 ED0D0000 		_ADR	HLD
 1757 12e4 C9080000 		_ADR	STORE
 1758 12e8 EB060000 		_UNNEST
 1759              	
 1760              	//    HOLD	( c -- )
 1761              	// 	Insert a character into the numeric output string.
 1762              	
 1763 12ec D4120000 		.word	_BDIGS
 1764 12f0 04       	_HOLD:	.byte  4
 1765 12f1 484F4C44 		.ascii "HOLD"
 1766 12f5 0000BF   		.p2align 2 	
 1767              	HOLD:
 1768 12f8 504700BF 		_NEST
 1769 12fc ED0D0000 		_ADR	HLD
 1770 1300 DD080000 		_ADR	AT
ARM GAS  forth.s 			page 64


 1771 1304 B90A0000 		_ADR	ONEM
 1772 1308 89090000 		_ADR	DUPP
 1773 130c ED0D0000 		_ADR	HLD
 1774 1310 C9080000 		_ADR	STORE
 1775 1314 E9080000 		_ADR	CSTOR
 1776 1318 EB060000 		_UNNEST
 1777              	
 1778              	//    #	   ( u -- u )
 1779              	// 	Extract one digit from u and append the digit to output string.
 1780              	
 1781 131c F0120000 		.word	_HOLD
 1782 1320 01       	_DIG:	.byte  1
 1783 1321 23       		.ascii "#"
 1784 1322 00BF     		.p2align 2 	
 1785              	DIG:
 1786 1324 504700BF 		_NEST
 1787 1328 7D0D0000 		_ADR	BASE
 1788 132c DD080000 		_ADR	AT
 1789 1330 B1120000 		_ADR	EXTRC
 1790 1334 F9120000 		_ADR	HOLD
 1791 1338 EB060000 		_UNNEST
 1792              	
 1793              	//    #S	  ( u -- 0 )
 1794              	// 	Convert u until all digits are added to the output string.
 1795              	
 1796 133c 20130000 		.word	_DIG
 1797 1340 02       	_DIGS:	.byte  2
 1798 1341 2353     		.ascii "#S"
 1799 1343 00       		.p2align 2 	
 1800              	DIGS:
 1801 1344 504700BF 		_NEST
 1802              	DIGS1:
 1803 1348 25130000 	    _ADR	DIG
 1804 134c 89090000 		_ADR	DUPP
 1805 1350 97080000 		_QBRAN 	DIGS2
 1805      60130000 
 1806 1358 AB080000 		_BRAN	DIGS1
 1806      48130000 
 1807              	DIGS2:
 1808 1360 EB060000 		  _UNNEST
 1809              	
 1810              	//    SIGN	( n -- )
 1811              	// 	Add a minus sign to the numeric output string.
 1812              	
 1813 1364 40130000 		.word	_DIGS
 1814 1368 04       	_SIGN:	.byte  4
 1815 1369 5349474E 		.ascii "SIGN"
 1816 136d 0000BF   		.p2align 2 	
 1817              	SIGN:
 1818 1370 504700BF 		_NEST
 1819 1374 BD090000 		_ADR	ZLESS
 1820 1378 97080000 		_QBRAN	SIGN1
 1820      8C130000 
 1821 1380 55080000 		_DOLIT '-'
 1821      2D000000 
 1822 1388 F9120000 		_ADR	HOLD
 1823              	SIGN1:
ARM GAS  forth.s 			page 65


 1824 138c EB060000 		  _UNNEST
 1825              	
 1826              	//    #>	  ( w -- b u )
 1827              	// 	Prepare the output word to be TYPE'd.
 1828              	
 1829 1390 68130000 		.word	_SIGN
 1830 1394 02       	_EDIGS:	.byte  2
 1831 1395 233E     		.ascii "#>"
 1832 1397 00       		.p2align 2 	
 1833              	EDIGS:
 1834 1398 504700BF 		_NEST
 1835 139c 79090000 		_ADR	DROP
 1836 13a0 ED0D0000 		_ADR	HLD
 1837 13a4 DD080000 		_ADR	AT
 1838 13a8 21110000 		_ADR	PAD
 1839 13ac AD090000 		_ADR	OVER
 1840 13b0 5D0A0000 		_ADR	SUBB
 1841 13b4 EB060000 		_UNNEST
 1842              	
 1843              	//    str	 ( n -- b u )
 1844              	// 	Convert a signed integer to a numeric string.
 1845              	
 1846              	// 	.word	_EDIGS
 1847              	// _STRR	.byte  3
 1848              	// 	.ascii "str"
 1849              	// 	.p2align 2 	
 1850              	STRR:
 1851 13b8 504700BF 		_NEST
 1852 13bc 89090000 		_ADR	DUPP
 1853 13c0 31090000 		_ADR	TOR
 1854 13c4 ED0B0000 		_ADR	ABSS
 1855 13c8 D9120000 		_ADR	BDIGS
 1856 13cc 45130000 		_ADR	DIGS
 1857 13d0 09090000 		_ADR	RFROM
 1858 13d4 71130000 		_ADR	SIGN
 1859 13d8 99130000 		_ADR	EDIGS
 1860 13dc EB060000 		_UNNEST
 1861              	
 1862              	//    HEX	 ( -- )
 1863              	// 	Use radix 16 as base for numeric conversions.
 1864              	
 1865 13e0 94130000 		.word	_EDIGS
 1866 13e4 03       	_HEX:	.byte  3
 1867 13e5 484558   		.ascii "HEX"
 1868              		.p2align 2 	
 1869              	HEX:
 1870 13e8 504700BF 		_NEST
 1871 13ec 55080000 		_DOLIT 16
 1871      10000000 
 1872 13f4 7D0D0000 		_ADR	BASE
 1873 13f8 C9080000 		_ADR	STORE
 1874 13fc EB060000 		_UNNEST
 1875              	
 1876              	//    DECIMAL	( -- )
 1877              	// 	Use radix 10 as base for numeric conversions.
 1878              	
 1879 1400 E4130000 		.word	_HEX
ARM GAS  forth.s 			page 66


 1880 1404 07       	_DECIM:	.byte  7
 1881 1405 44454349 		.ascii "DECIMAL"
 1881      4D414C
 1882              		.p2align 2 	
 1883              	DECIM:
 1884 140c 504700BF 		_NEST
 1885 1410 55080000 		_DOLIT 10
 1885      0A000000 
 1886 1418 7D0D0000 		_ADR	BASE
 1887 141c C9080000 		_ADR	STORE
 1888 1420 EB060000 		_UNNEST
 1889              	
 1890              	// **************************************************************************
 1891              	//  Numeric input, single precision
 1892              	
 1893              	//    DIGIT?	( c base -- u t )
 1894              	// 	Convert a character to its numeric value. A flag indicates success.
 1895              	
 1896 1424 04140000 		.word	_DECIM
 1897 1428 06       	_DIGTQ:	.byte  6
 1898 1429 44494749 		.ascii "DIGIT?"
 1898      543F
 1899 142f 00       		.p2align 2 	
 1900              	DIGTQ:
 1901 1430 504700BF 		_NEST
 1902 1434 31090000 		_ADR	TOR
 1903 1438 55080000 		_DOLIT 	'0'
 1903      30000000 
 1904 1440 5D0A0000 		_ADR	SUBB
 1905 1444 55080000 		_DOLIT 9
 1905      09000000 
 1906 144c AD090000 		_ADR	OVER
 1907 1450 450C0000 		_ADR	LESS
 1908 1454 97080000 		_QBRAN	DGTQ1
 1908      7C140000 
 1909 145c 55080000 		_DOLIT 7
 1909      07000000 
 1910 1464 5D0A0000 		_ADR	SUBB
 1911 1468 89090000 		_ADR	DUPP
 1912 146c 55080000 		_DOLIT	10
 1912      0A000000 
 1913 1474 450C0000 		_ADR	LESS
 1914 1478 E1090000 		_ADR	ORR
 1915              	DGTQ1:
 1916 147c 89090000 		_ADR	DUPP
 1917 1480 09090000 		_ADR	RFROM
 1918 1484 2D0C0000 		_ADR	ULESS
 1919 1488 EB060000 		_UNNEST
 1920              	
 1921              	//    NUMBER?	( a -- n T | a F )
 1922              	// 	Convert a number word to integer. Push a flag on tos.
 1923              	
 1924 148c 28140000 		.word	_DIGTQ
 1925 1490 07       	_NUMBQ:	.byte  7
 1926 1491 4E554D42 		.ascii "NUMBER?"
 1926      45523F
 1927              		.p2align 2 	
ARM GAS  forth.s 			page 67


 1928              	NUMBQ:
 1929 1498 504700BF 		_NEST
 1930 149c 7D0D0000 		_ADR	BASE
 1931 14a0 DD080000 		_ADR	AT
 1932 14a4 31090000 		_ADR	TOR
 1933 14a8 55080000 		_DOLIT	0
 1933      00000000 
 1934 14b0 AD090000 		_ADR	OVER
 1935 14b4 E50C0000 		_ADR	COUNT
 1936 14b8 AD090000 		_ADR	OVER
 1937 14bc FD080000 		_ADR	CAT
 1938 14c0 55080000 		_DOLIT '$'
 1938      24000000 
 1939 14c8 150C0000 		_ADR	EQUAL
 1940 14cc 97080000 		_QBRAN	NUMQ1
 1940      E8140000 
 1941 14d4 E9130000 		_ADR	HEX
 1942 14d8 99090000 		_ADR	SWAP
 1943 14dc A90A0000 		_ADR	ONEP
 1944 14e0 99090000 		_ADR	SWAP
 1945 14e4 B90A0000 		_ADR	ONEM
 1946              	NUMQ1:
 1947 14e8 AD090000 		_ADR	OVER
 1948 14ec FD080000 		_ADR	CAT
 1949 14f0 55080000 		_DOLIT	'-'
 1949      2D000000 
 1950 14f8 150C0000 		_ADR	EQUAL
 1951 14fc 31090000 		_ADR	TOR
 1952 1500 99090000 		_ADR	SWAP
 1953 1504 1D090000 		_ADR	RAT
 1954 1508 5D0A0000 		_ADR	SUBB
 1955 150c 99090000 		_ADR	SWAP
 1956 1510 1D090000 		_ADR	RAT
 1957 1514 4D0A0000 		_ADR	PLUS
 1958 1518 5D0B0000 		_ADR	QDUP
 1959 151c 97080000 		_QBRAN	NUMQ6
 1959      B0150000 
 1960 1524 B90A0000 		_ADR	ONEM
 1961 1528 31090000 		_ADR	TOR
 1962              	NUMQ2:
 1963 152c 89090000 		_ADR	DUPP
 1964 1530 31090000 		_ADR	TOR
 1965 1534 FD080000 		_ADR	CAT
 1966 1538 7D0D0000 		_ADR	BASE
 1967 153c DD080000 		_ADR	AT
 1968 1540 31140000 		_ADR	DIGTQ
 1969 1544 97080000 		_QBRAN	NUMQ4
 1969      94150000 
 1970 154c 99090000 		_ADR	SWAP
 1971 1550 7D0D0000 		_ADR	BASE
 1972 1554 DD080000 		_ADR	AT
 1973 1558 6D0A0000 		_ADR	STAR
 1974 155c 4D0A0000 		_ADR	PLUS
 1975 1560 09090000 		_ADR	RFROM
 1976 1564 A90A0000 		_ADR	ONEP
 1977 1568 79080000 		_DONXT	NUMQ2
 1977      2C150000 
ARM GAS  forth.s 			page 68


 1978 1570 1D090000 		_ADR	RAT
 1979 1574 99090000 		_ADR	SWAP
 1980 1578 79090000 		_ADR	DROP
 1981 157c 97080000 		_QBRAN	NUMQ3
 1981      88150000 
 1982 1584 DD0B0000 		_ADR	NEGAT
 1983              	NUMQ3:
 1984 1588 99090000 		_ADR	SWAP
 1985 158c AB080000 		_BRAN	NUMQ5
 1985      AC150000 
 1986              	NUMQ4:
 1987 1594 09090000 		_ADR	RFROM
 1988 1598 09090000 		_ADR	RFROM
 1989 159c 850B0000 		_ADR	DDROP
 1990 15a0 850B0000 		_ADR	DDROP
 1991 15a4 55080000 		_DOLIT	0
 1991      00000000 
 1992              	NUMQ5:
 1993 15ac 89090000 		_ADR	DUPP
 1994              	NUMQ6:
 1995 15b0 09090000 		_ADR	RFROM
 1996 15b4 850B0000 		_ADR	DDROP
 1997 15b8 09090000 		_ADR	RFROM
 1998 15bc 7D0D0000 		_ADR	BASE
 1999 15c0 C9080000 		_ADR	STORE
 2000 15c4 EB060000 		_UNNEST
 2001              	
 2002              	// **************************************************************************
 2003              	//  Basic I/O
 2004              	
 2005              	//    KEY	 ( -- c )
 2006              	// 	Wait for and return an input character.
 2007              	
 2008 15c8 90140000 		.word	_NUMBQ
 2009 15cc 03       	_KEY:	.byte  3
 2010 15cd 4B4559   		.ascii "KEY"
 2011              		.p2align 2 	
 2012              	KEY:
 2013 15d0 504700BF 		_NEST
 2014              	KEY1:
 2015 15d4 FD070000 		_ADR	QRX
 2016 15d8 97080000 		_QBRAN	KEY1
 2016      D4150000 
 2017 15e0 EB060000 		_UNNEST
 2018              	
 2019              	//    SPACE	( -- )
 2020              	// 	Send the blank character to the output device.
 2021              	
 2022 15e4 CC150000 		.word	_KEY
 2023 15e8 05       	_SPACE:	.byte  5
 2024 15e9 53504143 		.ascii "SPACE"
 2024      45
 2025 15ee 00BF     		.p2align 2 	
 2026              	SPACE:
 2027 15f0 504700BF 		_NEST
 2028 15f4 090B0000 		_ADR	BLANK
 2029 15f8 31080000 		_ADR	EMIT
ARM GAS  forth.s 			page 69


 2030 15fc EB060000 		_UNNEST
 2031              	
 2032              	//    SPACES	( +n -- )
 2033              	// 	Send n spaces to the output device.
 2034              	
 2035 1600 E8150000 		.word	_SPACE
 2036 1604 06       	_SPACS:	.byte  6
 2037 1605 53504143 		.ascii "SPACES"
 2037      4553
 2038 160b 00       		.p2align 2 	
 2039              	SPACS:
 2040 160c 504700BF 		_NEST
 2041 1610 55080000 		_DOLIT	0
 2041      00000000 
 2042 1618 750C0000 		_ADR	MAX
 2043 161c 31090000 		_ADR	TOR
 2044 1620 AB080000 		_BRAN	CHAR2
 2044      2C160000 
 2045              	CHAR1:
 2046 1628 F1150000 		_ADR	SPACE
 2047              	CHAR2:
 2048 162c 79080000 		_DONXT	CHAR1
 2048      28160000 
 2049 1634 EB060000 		_UNNEST
 2050              	
 2051              	//    TYPE	( b u -- )
 2052              	// 	Output u characters from b.
 2053              	
 2054 1638 04160000 		.word	_SPACS
 2055 163c 04       	_TYPEE:	.byte	4
 2056 163d 54595045 		.ascii "TYPE"
 2057 1641 0000BF   		.p2align 2 	
 2058              	TYPEE:
 2059 1644 504700BF 		_NEST
 2060 1648 31090000 		_ADR  TOR   // ( a+1 -- R: u )
 2061 164c AB080000 		_BRAN	TYPE2
 2061      60160000 
 2062              	TYPE1:  
 2063 1654 E50C0000 		_ADR  COUNT
 2064 1658 71100000 		_ADR TCHAR
 2065 165c 31080000 		_ADR EMIT
 2066              	TYPE2:  
 2067 1660 79080000 		_DONXT	TYPE1
 2067      54160000 
 2068 1668 79090000 		_ADR	DROP
 2069 166c EB060000 		_UNNEST
 2070              	
 2071              	//    CR	  ( -- )
 2072              	// 	Output a carriage return and a line feed.
 2073              	
 2074 1670 3C160000 		.word	_TYPEE
 2075 1674 02       	_CR:	.byte  2
 2076 1675 4352     		.ascii "CR"
 2077 1677 00       		.p2align 2 	
 2078              	CR:
 2079 1678 504700BF 		_NEST
 2080 167c 55080000 		_DOLIT	CRR
ARM GAS  forth.s 			page 70


 2080      0D000000 
 2081 1684 31080000 		_ADR	EMIT
 2082 1688 55080000 		_DOLIT	LF
 2082      0A000000 
 2083 1690 31080000 		_ADR	EMIT
 2084 1694 EB060000 		_UNNEST
 2085              	
 2086              	//    do_$	( -- a )
 2087              	// 	Return the address of a compiled string.
 2088              	//  adjust return address to skip over it.
 2089              	
 2090              	// 	.word	_CR
 2091              	// _DOSTR	.byte  COMPO+3
 2092              	// 	.ascii "do$$"
 2093              	// 	.p2align 2 	
 2094              	DOSTR:
 2095 1698 504700BF 		_NEST     
 2096              	/* compiled string address is 2 levels deep */
 2097 169c 09090000 		_ADR	RFROM	// { -- a1 }
 2098 16a0 09090000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2099 16a4 89090000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2100 16a8 E50C0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2101 16ac 4D0A0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2102 16b0 55100000 		_ADR	ALGND	//  end of string
 2103              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2104 16b4 31090000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2105 16b8 99090000 		_ADR	SWAP	//  count tugged
 2106 16bc 31090000 		_ADR	TOR     //  ( -- a2) is string address
 2107 16c0 EB060000 		_UNNEST
 2108              	
 2109              	//    $"|	( -- a )
 2110              	// 	Run time routine compiled by _". Return address of a compiled string.
 2111              	
 2112              	// 	.word	_DOSTR
 2113              	// _STRQP	.byte  COMPO+3
 2114              	// 	.ascii "$\"|"
 2115              	// 	.p2align 2 	
 2116              	STRQP:
 2117 16c4 504700BF 		_NEST
 2118 16c8 99160000 		_ADR	DOSTR
 2119 16cc EB060000 		_UNNEST			// force a call to dostr
 2120              	
 2121              	//    .$	( a -- )
 2122              	// 	Run time routine of ." . Output a compiled string.
 2123              	
 2124              	// 	.word	_STRQP
 2125              	// _DOTST	.byte  COMPO+2
 2126              	// 	.ascii ".$$"
 2127              	// 	.p2align 2 	
 2128              	DOTST:
 2129 16d0 504700BF 		_NEST
 2130 16d4 E50C0000 		_ADR	COUNT // ( -- a+1 c )
 2131 16d8 45160000 		_ADR	TYPEE
 2132 16dc EB060000 		_UNNEST
 2133              	
 2134              	//    ."|	( -- )
 2135              	// 	Run time routine of ." . Output a compiled string.
ARM GAS  forth.s 			page 71


 2136              	
 2137              	// 	.word	_DOTST
 2138              	// _DOTQP	.byte  COMPO+3
 2139              	// 	.ascii ".""|"
 2140              	// 	.p2align 2 	
 2141              	DOTQP:
 2142 16e0 504700BF 		_NEST
 2143 16e4 99160000 		_ADR	DOSTR
 2144 16e8 D1160000 		_ADR	DOTST
 2145 16ec EB060000 		_UNNEST
 2146              	
 2147              	//    .R	  ( n +n -- )
 2148              	// 	Display an integer in a field of n columns, right justified.
 2149              	
 2150 16f0 74160000 		.word	_CR
 2151 16f4 02       	_DOTR:	.byte  2
 2152 16f5 2E52     		.ascii ".R"
 2153 16f7 00       		.p2align 2 	
 2154              	DOTR:
 2155 16f8 504700BF 		_NEST
 2156 16fc 31090000 		_ADR	TOR
 2157 1700 B9130000 		_ADR	STRR
 2158 1704 09090000 		_ADR	RFROM
 2159 1708 AD090000 		_ADR	OVER
 2160 170c 5D0A0000 		_ADR	SUBB
 2161 1710 0D160000 		_ADR	SPACS
 2162 1714 45160000 		_ADR	TYPEE
 2163 1718 EB060000 		_UNNEST
 2164              	
 2165              	//    U.R	 ( u +n -- )
 2166              	// 	Display an unsigned integer in n column, right justified.
 2167              	
 2168 171c F4160000 		.word	_DOTR
 2169 1720 03       	_UDOTR:	.byte  3
 2170 1721 552E52   		.ascii "U.R"
 2171              		.p2align 2 	
 2172              	UDOTR:
 2173 1724 504700BF 		_NEST
 2174 1728 31090000 		_ADR	TOR
 2175 172c D9120000 		_ADR	BDIGS
 2176 1730 45130000 		_ADR	DIGS
 2177 1734 99130000 		_ADR	EDIGS
 2178 1738 09090000 		_ADR	RFROM
 2179 173c AD090000 		_ADR	OVER
 2180 1740 5D0A0000 		_ADR	SUBB
 2181 1744 0D160000 		_ADR	SPACS
 2182 1748 45160000 		_ADR	TYPEE
 2183 174c EB060000 		_UNNEST
 2184              	
 2185              	//    U.	  ( u -- )
 2186              	// 	Display an unsigned integer in free format.
 2187              	
 2188 1750 20170000 		.word	_UDOTR
 2189 1754 02       	_UDOT:	.byte  2
 2190 1755 552E     		.ascii "U."
 2191 1757 00       		.p2align 2 	
 2192              	UDOT:
ARM GAS  forth.s 			page 72


 2193 1758 504700BF 		_NEST
 2194 175c D9120000 		_ADR	BDIGS
 2195 1760 45130000 		_ADR	DIGS
 2196 1764 99130000 		_ADR	EDIGS
 2197 1768 F1150000 		_ADR	SPACE
 2198 176c 45160000 		_ADR	TYPEE
 2199 1770 EB060000 		_UNNEST
 2200              	
 2201              	//    .	   ( w -- )
 2202              	// 	Display an integer in free format, preceeded by a space.
 2203              	
 2204 1774 54170000 		.word	_UDOT
 2205 1778 01       	_DOT:	.byte  1
 2206 1779 2E       		.ascii "."
 2207 177a 00BF     		.p2align 2 	
 2208              	DOT:
 2209 177c 504700BF 		_NEST
 2210 1780 7D0D0000 		_ADR	BASE
 2211 1784 DD080000 		_ADR	AT
 2212 1788 55080000 		_DOLIT 10
 2212      0A000000 
 2213 1790 F5090000 		_ADR	XORR			// ?decimal
 2214 1794 97080000 		_QBRAN	DOT1
 2214      A4170000 
 2215 179c 59170000 		_ADR	UDOT
 2216 17a0 EB060000 		_UNNEST			// no,display unsigned
 2217              	DOT1:
 2218 17a4 B9130000 	    _ADR	STRR
 2219 17a8 F1150000 		_ADR	SPACE
 2220 17ac 45160000 		_ADR	TYPEE
 2221 17b0 EB060000 		_UNNEST			// yes, display signed
 2222              	
 2223              	//    ?	   ( a -- )
 2224              	// 	Display the contents in a memory cell.
 2225              	
 2226 17b4 78170000 		.word	_DOT
 2227 17b8 01       	_QUEST:	.byte  1
 2228 17b9 3F       		.ascii "?"
 2229 17ba 00BF     		.p2align 2 	
 2230              	QUEST:
 2231 17bc 504700BF 		_NEST
 2232 17c0 DD080000 		_ADR	AT
 2233 17c4 7D170000 		_ADR	DOT
 2234 17c8 EB060000 		_UNNEST
 2235              	
 2236              	// **************************************************************************
 2237              	//  Parsing
 2238              	
 2239              	//    parse	( b u c -- b u delta //  string> )
 2240              	// 	Scan word delimited by c. Return found string and its offset.
 2241              	
 2242              	// 	.word	_QUEST
 2243              	// _PARS	.byte  5
 2244              	// 	.ascii "parse"
 2245              	// 	.p2align 2 	
 2246              	PARS:
 2247 17cc 504700BF 		_NEST
ARM GAS  forth.s 			page 73


 2248 17d0 870D0000 		_ADR	TEMP
 2249 17d4 C9080000 		_ADR	STORE
 2250 17d8 AD090000 		_ADR	OVER
 2251 17dc 31090000 		_ADR	TOR
 2252 17e0 89090000 		_ADR	DUPP
 2253 17e4 97080000 		_QBRAN	PARS8
 2253      E0180000 
 2254 17ec B90A0000 		_ADR	ONEM
 2255 17f0 870D0000 		_ADR	TEMP
 2256 17f4 DD080000 		_ADR	AT
 2257 17f8 090B0000 		_ADR	BLANK
 2258 17fc 150C0000 		_ADR	EQUAL
 2259 1800 97080000 		_QBRAN	PARS3
 2259      54180000 
 2260 1808 31090000 		_ADR	TOR
 2261              	PARS1:
 2262 180c 090B0000 		_ADR	BLANK
 2263 1810 AD090000 		_ADR	OVER
 2264 1814 FD080000 		_ADR	CAT			// skip leading blanks 
 2265 1818 5D0A0000 		_ADR	SUBB
 2266 181c BD090000 		_ADR	ZLESS
 2267 1820 C90B0000 		_ADR	INVER
 2268 1824 97080000 		_QBRAN	PARS2
 2268      50180000 
 2269 182c A90A0000 		_ADR	ONEP
 2270 1830 79080000 		_DONXT	PARS1
 2270      0C180000 
 2271 1838 09090000 		_ADR	RFROM
 2272 183c 79090000 		_ADR	DROP
 2273 1840 55080000 		_DOLIT	0
 2273      00000000 
 2274 1848 89090000 		_ADR	DUPP
 2275 184c EB060000 		_UNNEST
 2276              	PARS2:
 2277 1850 09090000 		_ADR	RFROM
 2278              	PARS3:
 2279 1854 AD090000 		_ADR	OVER
 2280 1858 99090000 		_ADR	SWAP
 2281 185c 31090000 		_ADR	TOR
 2282              	PARS4:
 2283 1860 870D0000 		_ADR	TEMP
 2284 1864 DD080000 		_ADR	AT
 2285 1868 AD090000 		_ADR	OVER
 2286 186c FD080000 		_ADR	CAT
 2287 1870 5D0A0000 		_ADR	SUBB			// scan for delimiter
 2288 1874 870D0000 		_ADR	TEMP
 2289 1878 DD080000 		_ADR	AT
 2290 187c 090B0000 		_ADR	BLANK
 2291 1880 150C0000 		_ADR	EQUAL
 2292 1884 97080000 		_QBRAN	PARS5
 2292      90180000 
 2293 188c BD090000 		_ADR	ZLESS
 2294              	PARS5:
 2295 1890 97080000 		_QBRAN	PARS6
 2295      B4180000 
 2296 1898 A90A0000 		_ADR	ONEP
 2297 189c 79080000 		_DONXT	PARS4
ARM GAS  forth.s 			page 74


 2297      60180000 
 2298 18a4 89090000 		_ADR	DUPP
 2299 18a8 31090000 		_ADR	TOR
 2300 18ac AB080000 		_BRAN	PARS7
 2300      C8180000 
 2301              	PARS6:
 2302 18b4 09090000 		_ADR	RFROM
 2303 18b8 79090000 		_ADR	DROP
 2304 18bc 89090000 		_ADR	DUPP
 2305 18c0 A90A0000 		_ADR	ONEP
 2306 18c4 31090000 		_ADR	TOR
 2307              	PARS7:
 2308 18c8 AD090000 		_ADR	OVER
 2309 18cc 5D0A0000 		_ADR	SUBB
 2310 18d0 09090000 		_ADR	RFROM
 2311 18d4 09090000 		_ADR	RFROM
 2312 18d8 5D0A0000 		_ADR	SUBB
 2313 18dc EB060000 		_UNNEST
 2314              	PARS8:
 2315 18e0 AD090000 		_ADR	OVER
 2316 18e4 09090000 		_ADR	RFROM
 2317 18e8 5D0A0000 		_ADR	SUBB
 2318 18ec EB060000 		_UNNEST
 2319              	
 2320              	//    PARSE	( c -- b u //  string> )
 2321              	// 	Scan input stream and return counted string delimited by c.
 2322              	
 2323 18f0 B8170000 		.word	_QUEST
 2324 18f4 05       	_PARSE:	.byte  5
 2325 18f5 50415253 		.ascii "PARSE"
 2325      45
 2326 18fa 00BF     		.p2align 2 	
 2327              	PARSE:
 2328 18fc 504700BF 		_NEST
 2329 1900 31090000 		_ADR	TOR
 2330 1904 41110000 		_ADR	TIB
 2331 1908 B10D0000 		_ADR	INN
 2332 190c DD080000 		_ADR	AT
 2333 1910 4D0A0000 		_ADR	PLUS			// current input buffer pointer
 2334 1914 C50D0000 		_ADR	NTIB
 2335 1918 DD080000 		_ADR	AT
 2336 191c B10D0000 		_ADR	INN
 2337 1920 DD080000 		_ADR	AT
 2338 1924 5D0A0000 		_ADR	SUBB			// remaining count
 2339 1928 09090000 		_ADR	RFROM
 2340 192c CD170000 		_ADR	PARS
 2341 1930 B10D0000 		_ADR	INN
 2342 1934 9D0C0000 		_ADR	PSTOR
 2343 1938 EB060000 		_UNNEST
 2344              	
 2345              	//    .(	  ( -- )
 2346              	// 	Output following string up to next ) .
 2347              	
 2348 193c F4180000 		.word	_PARSE
 2349 1940 82       	_DOTPR:	.byte  IMEDD+2
 2350 1941 2E28     		.ascii ".("
 2351 1943 00       		.p2align 2 	
ARM GAS  forth.s 			page 75


 2352              	DOTPR:
 2353 1944 504700BF 		_NEST
 2354 1948 55080000 		_DOLIT	')'
 2354      29000000 
 2355 1950 FD180000 		_ADR	PARSE
 2356 1954 45160000 		_ADR	TYPEE
 2357 1958 EB060000 		_UNNEST
 2358              	
 2359              	//    (	   ( -- )
 2360              	// 	Ignore following string up to next ) . A comment.
 2361              	
 2362 195c 40190000 		.word	_DOTPR
 2363 1960 81       	_PAREN:	.byte  IMEDD+1
 2364 1961 28       		.ascii "("
 2365 1962 00BF     		.p2align 2 	
 2366              	PAREN:
 2367 1964 504700BF 		_NEST
 2368 1968 55080000 		_DOLIT	')'
 2368      29000000 
 2369 1970 FD180000 		_ADR	PARSE
 2370 1974 850B0000 		_ADR	DDROP
 2371 1978 EB060000 		_UNNEST
 2372              	
 2373              	//    \	   ( -- )
 2374              	// 	Ignore following text till the end of line.
 2375              	
 2376 197c 60190000 		.word	_PAREN
 2377 1980 81       	_BKSLA:	.byte  IMEDD+1
 2378 1981 5C       		.byte	'\\'
 2379 1982 00BF     		.p2align 2 	
 2380              	BKSLA:
 2381 1984 504700BF 		_NEST
 2382 1988 C50D0000 		_ADR	NTIB
 2383 198c DD080000 		_ADR	AT
 2384 1990 B10D0000 		_ADR	INN
 2385 1994 C9080000 		_ADR	STORE
 2386 1998 EB060000 		_UNNEST
 2387              	
 2388              	//    CHAR	( -- c )
 2389              	// 	Parse next word and return its first character.
 2390              	
 2391 199c 80190000 		.word	_BKSLA
 2392 19a0 04       	_CHAR:	.byte  4
 2393 19a1 43484152 		.ascii "CHAR"
 2394 19a5 0000BF   		.p2align 2 	
 2395              	CHAR:
 2396 19a8 504700BF 		_NEST
 2397 19ac 090B0000 		_ADR	BLANK
 2398 19b0 FD180000 		_ADR	PARSE
 2399 19b4 79090000 		_ADR	DROP
 2400 19b8 FD080000 		_ADR	CAT
 2401 19bc EB060000 		_UNNEST
 2402              	
 2403              	//    WORD	( c -- a //  string> )
 2404              	// 	Parse a word from input stream and copy it to code dictionary.
 2405              	
 2406 19c0 A0190000 		.word	_CHAR
ARM GAS  forth.s 			page 76


 2407 19c4 04       	_WORDD:	.byte  4
 2408 19c5 574F5244 		.ascii "WORD"
 2409 19c9 0000BF   		.p2align 2 	
 2410              	WORDD:
 2411 19cc 504700BF 		_NEST
 2412 19d0 FD180000 		_ADR	PARSE
 2413 19d4 09110000 		_ADR	HERE
 2414 19d8 E90A0000 		_ADR	CELLP
 2415 19dc 0D120000 		_ADR	PACKS
 2416 19e0 EB060000 		_UNNEST
 2417              	
 2418              	//    TOKEN	( -- a //  string> )
 2419              	// 	Parse a word from input stream and copy it to name dictionary.
 2420              	
 2421 19e4 C4190000 		.word	_WORDD
 2422 19e8 05       	_TOKEN:	.byte  5
 2423 19e9 544F4B45 		.ascii "TOKEN"
 2423      4E
 2424 19ee 00BF     		.p2align 2 	
 2425              	TOKEN:
 2426 19f0 504700BF 		_NEST
 2427 19f4 090B0000 		_ADR	BLANK
 2428 19f8 CD190000 		_ADR	WORDD
 2429 19fc EB060000 		_UNNEST
 2430              	
 2431              	// **************************************************************************
 2432              	//  Dictionary search
 2433              	
 2434              	//    NAME>	( na -- ca )
 2435              	// 	Return a code address given a name address.
 2436              	
 2437 1a00 E8190000 		.word	_TOKEN
 2438 1a04 05       	_NAMET:	.byte  5
 2439 1a05 4E414D45 		.ascii "NAME>"
 2439      3E
 2440 1a0a 00BF     		.p2align 2 	
 2441              	NAMET:
 2442 1a0c 504700BF 		_NEST
 2443 1a10 E50C0000 		_ADR	COUNT
 2444 1a14 55080000 		_DOLIT	0x1F
 2444      1F000000 
 2445 1a1c CD090000 		_ADR	ANDD
 2446 1a20 4D0A0000 		_ADR	PLUS
 2447 1a24 55100000 		_ADR	ALGND
 2448 1a28 EB060000 		_UNNEST
 2449              	
 2450              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2451              	// 	Compare u bytes in two strings. Return 0 if identical.
 2452              	//
 2453              	//  Picatout 2020-12-01, 
 2454              	//      Because of problem with .align directive that
 2455              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2456              	// 		words  to do a byte by byte comparison. 
 2457              	//
 2458 1a2c 041A0000 		.word	_NAMET
 2459 1a30 05       	_SAMEQ:	.byte  5
 2460 1a31 53414D45 		.ascii "SAME?"
ARM GAS  forth.s 			page 77


 2460      3F
 2461 1a36 00BF     		.p2align 2	
 2462              	SAMEQ:
 2463 1a38 504700BF 		_NEST
 2464 1a3c 31090000 		_ADR	TOR
 2465 1a40 AB080000 		_BRAN	SAME2
 2465      841A0000 
 2466              	SAME1:
 2467 1a48 AD090000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2468 1a4c 1D090000 		_ADR	RAT   // a1 a2 a1 u 
 2469 1a50 4D0A0000 		_ADR	PLUS  // a1 a2 a1+u 
 2470 1a54 FD080000 		_ADR	CAT	   // a1 a2 c1    		
 2471 1a58 AD090000 		_ADR	OVER  // a1 a2 c1 a2 
 2472 1a5c 1D090000 		_ADR	RAT    
 2473 1a60 4D0A0000 		_ADR	PLUS    
 2474 1a64 FD080000 		_ADR	CAT	  // a1 a2 c1 c2
 2475 1a68 5D0A0000 		_ADR	SUBB  
 2476 1a6c 5D0B0000 		_ADR	QDUP
 2477 1a70 97080000 		_QBRAN	SAME2
 2477      841A0000 
 2478 1a78 09090000 		_ADR	RFROM
 2479 1a7c 79090000 		_ADR	DROP
 2480 1a80 EB060000 		_UNNEST	// strings not equal
 2481              	SAME2:
 2482 1a84 79080000 		_DONXT	SAME1
 2482      481A0000 
 2483 1a8c 55080000 		_DOLIT	0
 2483      00000000 
 2484 1a94 EB060000 		_UNNEST	// strings equal
 2485              	
 2486              	//    find	( a na -- ca na | a F )
 2487              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2488              	
 2489              	//  Picatout 2020-12-01,  
 2490              	//		Modified from original. See comment for word "SAME?" 
 2491              	
 2492              	// 	.word	_SAMEQ
 2493              	// _FIND	.byte  4
 2494              	// 	.ascii "find"
 2495              	// 	.p2align 2 	
 2496              	FIND:
 2497 1a98 504700BF 		_NEST
 2498 1a9c 99090000 		_ADR	SWAP			// na a	
 2499 1aa0 E50C0000 		_ADR	COUNT			// na a+1 count
 2500 1aa4 89090000 		_ADR	DUPP 
 2501 1aa8 870D0000 		_ADR	TEMP
 2502 1aac C9080000 		_ADR	STORE			// na a+1 count 
 2503 1ab0 31090000 		_ADR  TOR		// na a+1  R: count  
 2504 1ab4 99090000 		_ADR	SWAP			// a+1 na
 2505              	FIND1:
 2506 1ab8 89090000 		_ADR	DUPP			// a+1 na na
 2507 1abc 97080000 		_QBRAN	FIND6	// end of vocabulary
 2507      101B0000 
 2508 1ac4 89090000 		_ADR	DUPP			// a+1 na na
 2509 1ac8 FD080000 		_ADR	CAT			// a+1 na name1
 2510 1acc 55080000 		_DOLIT	MASKK
 2510      1FFFFFFF 
ARM GAS  forth.s 			page 78


 2511 1ad4 CD090000 		_ADR	ANDD
 2512 1ad8 1D090000 		_ADR	RAT			// a+1 na name1 count 
 2513 1adc F5090000 		_ADR	XORR			// a+1 na,  same length?
 2514 1ae0 97080000 		_QBRAN	FIND2
 2514      F81A0000 
 2515 1ae8 F90A0000 		_ADR	CELLM			// a+1 la
 2516 1aec DD080000 		_ADR	AT			// a+1 next_na
 2517 1af0 AB080000 		_BRAN	FIND1			// try next word
 2517      B81A0000 
 2518              	FIND2:   
 2519 1af8 A90A0000 		_ADR	ONEP			// a+1 na+1
 2520 1afc 870D0000 		_ADR	TEMP
 2521 1b00 DD080000 		_ADR	AT			// a+1 na+1 count
 2522 1b04 391A0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2523              	FIND3:	
 2524 1b08 AB080000 		_BRAN	FIND4
 2524      281B0000 
 2525              	FIND6:	
 2526 1b10 09090000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2527 1b14 79090000 		_ADR	DROP			// a+1 0
 2528 1b18 99090000 		_ADR	SWAP			// 0 a+1
 2529 1b1c B90A0000 		_ADR	ONEM			// 0 a
 2530 1b20 99090000 		_ADR	SWAP			// a 0 
 2531 1b24 EB060000 		_UNNEST			// return without a match
 2532              	FIND4:	
 2533 1b28 97080000 		_QBRAN	FIND5			// a+1 na+1
 2533      441B0000 
 2534 1b30 B90A0000 		_ADR	ONEM			// a+1 na
 2535 1b34 F90A0000 		_ADR	CELLM			// a+4 la
 2536 1b38 DD080000 		_ADR	AT			// a+1 next_na
 2537 1b3c AB080000 		_BRAN	FIND1			// compare next name
 2537      B81A0000 
 2538              	FIND5:	
 2539 1b44 09090000 		_ADR	RFROM			// a+1 na+1 count
 2540 1b48 79090000 		_ADR	DROP			// a+1 na+1
 2541 1b4c 99090000 		_ADR	SWAP			// na+1 a+1
 2542 1b50 79090000 		_ADR	DROP			// na+1
 2543 1b54 B90A0000 		_ADR	ONEM			// na
 2544 1b58 89090000 		_ADR	DUPP			// na na
 2545 1b5c 0D1A0000 		_ADR	NAMET			// na ca
 2546 1b60 99090000 		_ADR	SWAP			// ca na
 2547 1b64 EB060000 		_UNNEST			//  return with a match
 2548              	
 2549              	//    NAME?	( a -- ca na | a F )
 2550              	// 	Search all context vocabularies for a string.
 2551              	
 2552 1b68 301A0000 		.word	_SAMEQ
 2553 1b6c 05       	_NAMEQ:	.byte  5
 2554 1b6d 4E414D45 		.ascii "NAME?"
 2554      3F
 2555 1b72 00BF     		.p2align 2 	
 2556              	NAMEQ:
 2557 1b74 504700BF 		_NEST
 2558 1b78 050E0000 		_ADR	CNTXT
 2559 1b7c DD080000 		_ADR	AT
 2560 1b80 991A0000 		_ADR	FIND
 2561 1b84 EB060000 		_UNNEST
ARM GAS  forth.s 			page 79


 2562              	
 2563              	// **************************************************************************
 2564              	//  Terminal input
 2565              	
 2566              	//    	  ( bot eot cur -- bot eot cur )
 2567              	// 	Backup the cursor by one character.
 2568              	
 2569              	// 	.word	_NAMEQ
 2570              	// _BKSP	.byte  2
 2571              	// 	.ascii "^H"
 2572              	// 	.p2align 2 	
 2573              	BKSP:
 2574 1b88 504700BF 		_NEST
 2575 1b8c 31090000 		_ADR	TOR
 2576 1b90 AD090000 		_ADR	OVER
 2577 1b94 09090000 		_ADR	RFROM
 2578 1b98 99090000 		_ADR	SWAP
 2579 1b9c AD090000 		_ADR	OVER
 2580 1ba0 F5090000 		_ADR	XORR
 2581 1ba4 97080000 		_QBRAN	BACK1
 2581      D01B0000 
 2582 1bac 55080000 		_DOLIT	BKSPP
 2582      08000000 
 2583 1bb4 31080000 		_ADR	TECHO
 2584 1bb8 B90A0000 		_ADR	ONEM
 2585 1bbc 090B0000 		_ADR	BLANK
 2586 1bc0 31080000 		_ADR	TECHO
 2587 1bc4 55080000 		_DOLIT	BKSPP
 2587      08000000 
 2588 1bcc 31080000 		_ADR	TECHO
 2589              	BACK1:
 2590 1bd0 EB060000 		  _UNNEST
 2591              	
 2592              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2593              	// 	Accept and echo the key stroke and bump the cursor.
 2594              	
 2595              	// 	.word	_BKSP
 2596              	// _TAP	.byte  3
 2597              	// 	.ascii "TAP"
 2598              	// 	.p2align 2 	
 2599              	TAP:
 2600 1bd4 504700BF 		_NEST
 2601 1bd8 89090000 		_ADR	DUPP
 2602 1bdc 31080000 		_ADR	TECHO
 2603 1be0 AD090000 		_ADR	OVER
 2604 1be4 E9080000 		_ADR	CSTOR
 2605 1be8 A90A0000 		_ADR	ONEP
 2606 1bec EB060000 		_UNNEST
 2607              	
 2608              	//    kTAP	( bot eot cur c -- bot eot cur )
 2609              	// 	Process a key stroke, CR or backspace.
 2610              	
 2611              	// 	.word	_TAP
 2612              	// _KTAP	.byte  4
 2613              	// 	.ascii "kTAP"
 2614              	// 	.p2align 2 	
 2615              	KTAP:
ARM GAS  forth.s 			page 80


 2616              	TTAP:
 2617 1bf0 504700BF 		_NEST
 2618 1bf4 89090000 		_ADR	DUPP
 2619 1bf8 55080000 		_DOLIT	CRR
 2619      0D000000 
 2620 1c00 F5090000 		_ADR	XORR
 2621 1c04 97080000 		_QBRAN  KTAP2
 2621      341C0000 
 2622 1c0c 55080000 		_DOLIT	BKSPP
 2622      08000000 
 2623 1c14 F5090000 		_ADR	XORR
 2624 1c18 97080000 		_QBRAN	KTAP1
 2624      2C1C0000 
 2625 1c20 090B0000 		_ADR	BLANK
 2626 1c24 D51B0000 		_ADR	TAP
 2627 1c28 EB060000 		_UNNEST
 2628              	//	.word	0			// patch
 2629              	KTAP1:
 2630 1c2c 891B0000 		_ADR	BKSP
 2631 1c30 EB060000 		_UNNEST
 2632              	KTAP2:
 2633 1c34 79090000 		_ADR	DROP
 2634 1c38 99090000 		_ADR	SWAP
 2635 1c3c 79090000 		_ADR	DROP
 2636 1c40 89090000 		_ADR	DUPP
 2637 1c44 EB060000 		_UNNEST
 2638              	
 2639              	//    ACCEPT	( b u -- b u )
 2640              	// 	Accept characters to input buffer. Return with actual count.
 2641              	
 2642 1c48 6C1B0000 		.word	_NAMEQ
 2643 1c4c 06       	_ACCEP:	.byte  6
 2644 1c4d 41434345 		.ascii "ACCEPT"
 2644      5054
 2645 1c53 00       		.p2align 2 	
 2646              	ACCEP:
 2647 1c54 504700BF 		_NEST
 2648 1c58 AD090000 		_ADR	OVER
 2649 1c5c 4D0A0000 		_ADR	PLUS
 2650 1c60 AD090000 		_ADR	OVER
 2651              	ACCP1:
 2652 1c64 990B0000 		_ADR	DDUP
 2653 1c68 F5090000 		_ADR	XORR
 2654 1c6c 97080000 		_QBRAN	ACCP4
 2654      AC1C0000 
 2655 1c74 D1150000 		_ADR	KEY
 2656 1c78 89090000 		_ADR	DUPP
 2657 1c7c 090B0000 		_ADR	BLANK
 2658 1c80 55080000 		_DOLIT 127
 2658      7F000000 
 2659 1c88 DD0E0000 		_ADR	WITHI
 2660 1c8c 97080000 		_QBRAN	ACCP2
 2660      A01C0000 
 2661 1c94 D51B0000 		_ADR	TAP
 2662 1c98 AB080000 		_BRAN	ACCP3
 2662      A41C0000 
 2663              	ACCP2:
ARM GAS  forth.s 			page 81


 2664 1ca0 F11B0000 		_ADR	KTAP
 2665              	ACCP3:	  
 2666 1ca4 AB080000 		_BRAN	ACCP1
 2666      641C0000 
 2667              	ACCP4:
 2668 1cac 79090000 		_ADR	DROP
 2669 1cb0 AD090000 		_ADR	OVER
 2670 1cb4 5D0A0000 		_ADR	SUBB
 2671 1cb8 EB060000 		_UNNEST
 2672              	
 2673              	//    QUERY	( -- )
 2674              	// 	Accept input stream to terminal input buffer.
 2675              	
 2676 1cbc 4C1C0000 		.word	_ACCEP
 2677 1cc0 05       	_QUERY:	.byte  5
 2678 1cc1 51554552 		.ascii "QUERY"
 2678      59
 2679 1cc6 00BF     		.p2align 2 	
 2680              	QUERY:
 2681 1cc8 504700BF 		_NEST
 2682 1ccc 41110000 		_ADR	TIB
 2683 1cd0 55080000 		_DOLIT 80
 2683      50000000 
 2684 1cd8 551C0000 		_ADR	ACCEP
 2685 1cdc C50D0000 		_ADR	NTIB
 2686 1ce0 C9080000 		_ADR	STORE
 2687 1ce4 79090000 		_ADR	DROP
 2688 1ce8 55080000 		_DOLIT	0
 2688      00000000 
 2689 1cf0 B10D0000 		_ADR	INN
 2690 1cf4 C9080000 		_ADR	STORE
 2691 1cf8 EB060000 		_UNNEST
 2692              	
 2693              	// **************************************************************************
 2694              	//  Error handling
 2695              	
 2696              	//    ABORT	( a -- )
 2697              	// 	Reset data stack and jump to QUIT.
 2698              	
 2699 1cfc C01C0000 		.word	_QUERY
 2700 1d00 05       	_ABORT:	.byte  5
 2701 1d01 41424F52 		.ascii "ABORT"
 2701      54
 2702 1d06 00BF     		.p2align 2 	
 2703              	ABORT:
 2704 1d08 504700BF 		_NEST
 2705              	ABORT1:
 2706 1d0c F1150000 		_ADR	SPACE
 2707 1d10 E50C0000 		_ADR	COUNT
 2708 1d14 45160000 		_ADR	TYPEE
 2709 1d18 55080000 		_DOLIT	0X3F
 2709      3F000000 
 2710 1d20 31080000 		_ADR	EMIT
 2711 1d24 79160000 		_ADR	CR
 2712 1d28 911E0000 		_ADR	PRESE
 2713 1d2c AB080000 		_BRAN	QUIT
 2713      B01E0000 
ARM GAS  forth.s 			page 82


 2714              	
 2715              	//    _abort"	( f -- )
 2716              	// 	Run time routine of ABORT" . Abort with a message.
 2717              	
 2718              	// 	.word	_ABORT
 2719              	// _ABORQ	.byte  COMPO+6
 2720              	// 	.ascii "abort\""
 2721              	// 	.p2align 2 	
 2722              	ABORQ:
 2723 1d34 504700BF 		_NEST
 2724 1d38 99160000 		_ADR	DOSTR
 2725 1d3c 99090000 		_ADR	SWAP 
 2726 1d40 97080000 		_QBRAN	1f	// text flag
 2726      501D0000 
 2727 1d48 AB080000 		_BRAN	ABORT1
 2727      0C1D0000 
 2728              	1:
 2729 1d50 79090000 		_ADR	DROP
 2730 1d54 EB060000 		_UNNEST			// drop error
 2731              	
 2732              	// **************************************************************************
 2733              	//  The text interpreter
 2734              	
 2735              	//    $INTERPRET  ( a -- )
 2736              	// 	Interpret a word. If failed, try to convert it to an integer.
 2737              	
 2738 1d58 001D0000 		.word	_ABORT
 2739 1d5c 0A       	_INTER:	.byte  10
 2740 1d5d 2424494E 		.ascii "$$INTERPRET"
 2740      54455250 
 2740      524554
 2741              		.p2align 2 	
 2742              	INTER:
 2743 1d68 504700BF 		_NEST
 2744 1d6c 751B0000 		_ADR	NAMEQ
 2745 1d70 5D0B0000 		_ADR	QDUP	// ?defined
 2746 1d74 97080000 		_QBRAN	INTE1
 2746      A81D0000 
 2747 1d7c DD080000 		_ADR	AT
 2748 1d80 55080000 		_DOLIT	COMPO
 2748      40000000 
 2749 1d88 CD090000 		_ADR	ANDD	// ?compile only lexicon bits
 2750 1d8c 351D0000 		_ABORQ	13," compile only"
 2750      0D20636F 
 2750      6D70696C 
 2750      65206F6E 
 2750      6C7900BF 
 2751 1da0 6D080000 		_ADR	EXECU
 2752 1da4 EB060000 		_UNNEST			// execute defined word
 2753              	INTE1:
 2754 1da8 99140000 		_ADR	NUMBQ
 2755 1dac 97080000 		_QBRAN	INTE2
 2755      B81D0000 
 2756 1db4 EB060000 		_UNNEST
 2757              	INTE2:
 2758 1db8 091D0000 		_ADR	ABORT	// error
 2759              	
ARM GAS  forth.s 			page 83


 2760              	//    [	   ( -- )
 2761              	// 	Start the text interpreter.
 2762              	
 2763 1dbc 5C1D0000 		.word	_INTER
 2764 1dc0 81       	_LBRAC:	.byte  IMEDD+1
 2765 1dc1 5B       		.ascii "["
 2766 1dc2 00BF     		.p2align 2 	
 2767              	LBRAC:
 2768 1dc4 504700BF 		_NEST
 2769 1dc8 55080000 		_DOLIT	INTER
 2769      681D0000 
 2770 1dd0 D90D0000 		_ADR	TEVAL
 2771 1dd4 C9080000 		_ADR	STORE
 2772 1dd8 EB060000 		_UNNEST
 2773              	
 2774              	//    .OK	 ( -- )
 2775              	// 	Display "ok" only while interpreting.
 2776              	
 2777 1ddc C01D0000 		.word	_LBRAC
 2778 1de0 03       	_DOTOK:	.byte  3
 2779 1de1 2E4F4B   		.ascii ".OK"
 2780              		.p2align 2 	
 2781              	DOTOK:
 2782 1de4 504700BF 		_NEST
 2783 1de8 55080000 		_DOLIT	INTER
 2783      681D0000 
 2784 1df0 D90D0000 		_ADR	TEVAL
 2785 1df4 DD080000 		_ADR	AT
 2786 1df8 150C0000 		_ADR	EQUAL
 2787 1dfc 97080000 		_QBRAN	DOTO1
 2787      0C1E0000 
 2788 1e04 E1160000 		_DOTQP	3," ok"
 2788      03206F6B 
 2789              	DOTO1:
 2790 1e0c 79160000 		_ADR	CR
 2791 1e10 EB060000 		_UNNEST
 2792              	
 2793              	//    ?STACK	( -- )
 2794              	// 	Abort if the data stack underflows.
 2795              	
 2796 1e14 E01D0000 		.word	_DOTOK
 2797 1e18 06       	_QSTAC:	.byte  6
 2798 1e19 3F535441 		.ascii "?STACK"
 2798      434B
 2799 1e1f 00       		.p2align 2 	
 2800              	QSTAC:
 2801 1e20 504700BF 		_NEST
 2802 1e24 BD100000 		_ADR	DEPTH
 2803 1e28 BD090000 		_ADR	ZLESS	// check only for underflow
 2804 1e2c 351D0000 		_ABORQ	9,"underflow"
 2804      09756E64 
 2804      6572666C 
 2804      6F7700BF 
 2805 1e3c EB060000 		_UNNEST
 2806              	
 2807              	//    EVAL	( -- )
 2808              	// 	Interpret the input stream.
ARM GAS  forth.s 			page 84


 2809              	
 2810 1e40 181E0000 		.word	_QSTAC
 2811 1e44 04       	_EVAL:	.byte  4
 2812 1e45 4556414C 		.ascii "EVAL"
 2813 1e49 0000BF   		.p2align 2 	
 2814              	EVAL:
 2815 1e4c 504700BF 		_NEST
 2816              	EVAL1:
 2817 1e50 F1190000 	    _ADR	TOKEN
 2818 1e54 89090000 		_ADR	DUPP
 2819 1e58 FD080000 		_ADR	CAT	// ?input stream empty
 2820 1e5c 97080000 		_QBRAN	EVAL2
 2820      781E0000 
 2821 1e64 D90D0000 		_ADR	TEVAL
 2822 1e68 59110000 		_ADR	ATEXE
 2823 1e6c 211E0000 		_ADR	QSTAC	// evaluate input, check stack
 2824 1e70 AB080000 		_BRAN	EVAL1
 2824      501E0000 
 2825              	EVAL2:
 2826 1e78 79090000 		_ADR	DROP
 2827 1e7c E51D0000 		_ADR	DOTOK
 2828 1e80 EB060000 		_UNNEST	// prompt
 2829              	
 2830              	//    PRESET	( -- )
 2831              	// 	Reset data stack pointer and the terminal input buffer.
 2832              	
 2833 1e84 441E0000 		.word	_EVAL
 2834 1e88 06       	_PRESE:	.byte  6
 2835 1e89 50524553 		.ascii "PRESET"
 2835      4554
 2836 1e8f 00       		.p2align 2 	
 2837              	PRESE:
 2838 1e90 504700BF 		_NEST 
 2839 1e94 55080000 		_DOLIT SPP 
 2839      00FF0120 
 2840 1e9c 55090000 		_ADR SPSTOR 
 2841 1ea0 EB060000 		_UNNEST 
 2842              	
 2843              	//    QUIT	( -- )
 2844              	// 	Reset return stack pointer and start text interpreter.
 2845              	
 2846 1ea4 881E0000 		.word	_PRESE
 2847 1ea8 04       	_QUIT:	.byte  4
 2848 1ea9 51554954 		.ascii "QUIT"
 2849 1ead 0000BF   		.p2align 2 	
 2850              	QUIT:
 2851 1eb0 55080000 		_DOLIT RPP 
 2851      80FF0120 
 2852 1eb8 45090000 		_ADR RPSTOR 
 2853              	QUIT1:
 2854 1ebc C51D0000 		_ADR	LBRAC			// start interpretation
 2855              	QUIT2:
 2856 1ec0 C91C0000 		_ADR	QUERY			// get input
 2857 1ec4 4D1E0000 		_ADR	EVAL
 2858 1ec8 AB080000 		_BRAN	QUIT2	// continue till error
 2858      C01E0000 
 2859              	
ARM GAS  forth.s 			page 85


 2860 1ed0 A81E0000 		.word _QUIT
 2861 1ed4 06       	_FORGET: .byte 6 
 2862 1ed5 464F5247 		.ascii "FORGET"
 2862      4554
 2863 1edb 00       		.p2align 2
 2864              	FORGET:
 2865 1edc 504700BF 		_NEST 
 2866 1ee0 F1190000 		_ADR TOKEN 
 2867 1ee4 89090000 		_ADR DUPP 
 2868 1ee8 97080000 		_QBRAN 9f 
 2868      241F0000 
 2869 1ef0 751B0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2870 1ef4 5D0B0000 		_ADR QDUP 
 2871 1ef8 97080000 		_QBRAN 8f
 2871      201F0000 
 2872 1f00 F90A0000 		_ADR CELLM // ( ca la )
 2873 1f04 89090000 		_ADR DUPP 
 2874 1f08 190E0000 		_ADR CPP   
 2875 1f0c C9080000 		_ADR STORE
 2876 1f10 DD080000 		_ADR AT 
 2877 1f14 410E0000 		_ADR LAST 
 2878 1f18 C9080000 		_ADR STORE
 2879 1f1c 89230000 		_ADR OVERT 
 2880 1f20 79090000 	8:  _ADR DROP 
 2881 1f24 EB060000 	9:	_UNNEST 
 2882              	
 2883              		.p2align 2 
 2884              	
 2885              	// **************************************************************************
 2886              	//  The compiler
 2887              	
 2888              	//    '	   ( -- ca )
 2889              	// 	Search context vocabularies for the next word in input stream.
 2890              	
 2891 1f28 D41E0000 		.word	_FORGET
 2892 1f2c 01       	_TICK:	.byte  1
 2893 1f2d 27       		.ascii "'"
 2894 1f2e 00BF     		.p2align 2 	
 2895              	TICK:
 2896 1f30 504700BF 		_NEST
 2897 1f34 F1190000 		_ADR	TOKEN
 2898 1f38 751B0000 		_ADR	NAMEQ	// ?defined
 2899 1f3c 97080000 		_QBRAN	TICK1
 2899      481F0000 
 2900 1f44 EB060000 		_UNNEST	// yes, push code address
 2901              	TICK1:	
 2902 1f48 091D0000 		_ADR ABORT	// no, error
 2903              	
 2904              	//    ALLOT	( n -- )
 2905              	// 	Allocate n bytes to the ram area.
 2906              	
 2907 1f4c 2C1F0000 		.word	_TICK
 2908 1f50 05       	_ALLOT:	.byte  5
 2909 1f51 414C4C4F 		.ascii "ALLOT"
 2909      54
 2910 1f56 00BF     		.p2align 2 	
 2911              	ALLOT:
ARM GAS  forth.s 			page 86


 2912 1f58 504700BF 		_NEST
 2913 1f5c 190E0000 		_ADR	CPP
 2914 1f60 9D0C0000 		_ADR	PSTOR
 2915 1f64 EB060000 		_UNNEST			// adjust code pointer
 2916              	
 2917              	//    ,	   ( w -- )
 2918              	// 	Compile an integer into the code dictionary.
 2919              	
 2920 1f68 501F0000 		.word	_ALLOT
 2921 1f6c 012C     	_COMMA:	.byte  1,','
 2922 1f6e 00BF     		.p2align 2 	
 2923              	COMMA:
 2924 1f70 504700BF 		_NEST
 2925 1f74 09110000 		_ADR	HERE
 2926 1f78 89090000 		_ADR	DUPP
 2927 1f7c E90A0000 		_ADR	CELLP	// cell boundary
 2928 1f80 190E0000 		_ADR	CPP
 2929 1f84 C9080000 		_ADR	STORE
 2930 1f88 C9080000 		_ADR	STORE
 2931 1f8c EB060000 		_UNNEST	// adjust code pointer, compile
 2932              		.p2align 2 
 2933              	//    [COMPILE]   ( -- //  string> )
 2934              	// 	Compile the next immediate word into code dictionary.
 2935              	
 2936 1f90 6C1F0000 		.word	_COMMA
 2937 1f94 89       	_BCOMP:	.byte  IMEDD+9
 2938 1f95 5B434F4D 		.ascii "[COMPILE]"
 2938      50494C45 
 2938      5D
 2939 1f9e 00BF     		.p2align 2 	
 2940              	BCOMP:
 2941 1fa0 504700BF 		_NEST
 2942 1fa4 311F0000 		_ADR	TICK
 2943 1fa8 711F0000 		_ADR	COMMA
 2944 1fac EB060000 		_UNNEST
 2945              	
 2946              	//    COMPILE	( -- )
 2947              	// 	Compile the next address in colon list to code dictionary.
 2948              	
 2949 1fb0 941F0000 		.word	_BCOMP
 2950 1fb4 47       	_COMPI:	.byte  COMPO+7
 2951 1fb5 434F4D50 		.ascii "COMPILE"
 2951      494C45
 2952              		.p2align 2 	
 2953              	COMPI:
 2954 1fbc 504700BF 		_NEST
 2955 1fc0 09090000 		_ADR	RFROM
 2956 1fc4 89090000 		_ADR	DUPP 
 2957 1fc8 DD080000 		_ADR	AT
 2958 1fcc 55080000 		_DOLIT 1 
 2958      01000000 
 2959 1fd4 E1090000 		_ADR	ORR 
 2960 1fd8 711F0000 		_ADR	COMMA 
 2961 1fdc E90A0000 		_ADR	CELLP 
 2962 1fe0 31090000 		_ADR	TOR 
 2963 1fe4 EB060000 		_UNNEST			// adjust return address
 2964              	
ARM GAS  forth.s 			page 87


 2965              	//    LITERAL	( w -- )
 2966              	// 	Compile tos to code dictionary as an integer literal.
 2967              	
 2968 1fe8 B41F0000 		.word	_COMPI
 2969 1fec 87       	_LITER:	.byte  IMEDD+7
 2970 1fed 4C495445 		.ascii "LITERAL"
 2970      52414C
 2971              		.p2align 2 	
 2972              	LITER:
 2973 1ff4 504700BF 		_NEST
 2974 1ff8 55080000 		_COMPI	DOLIT
 2974      54080000 
 2974      E5230000 
 2975 2004 711F0000 		_ADR	COMMA
 2976 2008 EB060000 		_UNNEST
 2977              	
 2978              	//    $,"	( -- )
 2979              	// 	Compile a literal string up to next " .
 2980              	
 2981              	// 	.word	_LITER
 2982              	// _STRCQ	.byte  3
 2983              	// 	.ascii "$,\""
 2984              	// 	.p2align 2 	
 2985              	STRCQ:
 2986 200c 504700BF 		_NEST
 2987 2010 55080000 		_DOLIT -4
 2987      FCFFFFFF 
 2988 2018 190E0000 		_ADR	CPP
 2989 201c 9D0C0000 		_ADR	PSTOR
 2990 2020 55080000 		_DOLIT	'\"'
 2990      22000000 
 2991 2028 CD190000 		_ADR	WORDD			// move word to code dictionary
 2992 202c E50C0000 		_ADR	COUNT
 2993 2030 4D0A0000 		_ADR	PLUS
 2994 2034 55100000 		_ADR	ALGND			// calculate aligned end of string
 2995 2038 190E0000 		_ADR	CPP
 2996 203c C9080000 		_ADR	STORE
 2997 2040 EB060000 		_UNNEST 			// adjust the code pointer
 2998              	
 2999              	/*******************
 3000              	//  Structures
 3001              	*******************/
 3002              	//    FOR	 ( -- a )
 3003              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3004              	
 3005 2044 EC1F0000 		.word	_LITER
 3006 2048 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3007 2049 464F52   		.ascii "FOR"
 3008              		.p2align 2 	
 3009              	FOR:
 3010 204c 504700BF 		_NEST
 3011 2050 55080000 		_COMPI	TOR
 3011      30090000 
 3011      E5230000 
 3012 205c 09110000 		_ADR	HERE
 3013 2060 EB060000 		_UNNEST
 3014              	
ARM GAS  forth.s 			page 88


 3015              	//    BEGIN	( -- a )
 3016              	// 	Start an infinite or indefinite loop structure.
 3017              	
 3018 2064 48200000 		.word	_FOR
 3019 2068 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3020 2069 42454749 		.ascii "BEGIN"
 3020      4E
 3021 206e 00BF     		.p2align 2 	
 3022              	BEGIN:
 3023 2070 504700BF 		_NEST
 3024 2074 09110000 		_ADR	HERE
 3025 2078 EB060000 		_UNNEST
 3026              		.p2align 2 
 3027              	
 3028              	//    NEXT	( a -- )
 3029              	// 	Terminate a FOR-NEXT loop structure.
 3030 207c 68200000 		.word	_BEGIN
 3031 2080 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3032 2081 4E455854 		.ascii "NEXT"
 3033 2085 0000BF   		.p2align 2 	
 3034              	FNEXT:
 3035 2088 504700BF 		_NEST
 3036 208c 55080000 		_COMPI	DONXT
 3036      78080000 
 3036      E5230000 
 3037 2098 711F0000 		_ADR	COMMA
 3038 209c EB060000 		_UNNEST
 3039              	
 3040              	//    UNTIL	( a -- )
 3041              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3042              	
 3043 20a0 80200000 		.word	_FNEXT
 3044 20a4 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3045 20a5 554E5449 		.ascii "UNTIL"
 3045      4C
 3046 20aa 00BF     		.p2align 2 	
 3047              	UNTIL:
 3048 20ac 504700BF 		_NEST
 3049 20b0 55080000 		_COMPI	QBRAN
 3049      96080000 
 3049      E5230000 
 3050 20bc 711F0000 		_ADR	COMMA
 3051 20c0 EB060000 		_UNNEST
 3052              	
 3053              	//    AGAIN	( a -- )
 3054              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3055              	
 3056 20c4 A4200000 		.word	_UNTIL
 3057 20c8 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3058 20c9 41474149 		.ascii "AGAIN"
 3058      4E
 3059 20ce 00BF     		.p2align 2 	
 3060              	AGAIN:
 3061 20d0 504700BF 		_NEST
 3062 20d4 55080000 		_COMPI	BRAN
 3062      AA080000 
 3062      E5230000 
ARM GAS  forth.s 			page 89


 3063 20e0 711F0000 		_ADR	COMMA
 3064 20e4 EB060000 		_UNNEST
 3065              	
 3066              	//    IF	  ( -- A )
 3067              	// 	Begin a conditional branch structure.
 3068              	
 3069 20e8 C8200000 		.word	_AGAIN
 3070 20ec C2       	_IFF:	.byte  COMPO+IMEDD+2
 3071 20ed 4946     		.ascii "IF"
 3072 20ef 00       		.p2align 2 	
 3073              	IFF:
 3074 20f0 504700BF 		_NEST
 3075 20f4 55080000 		_COMPI	QBRAN
 3075      96080000 
 3075      E5230000 
 3076 2100 09110000 		_ADR	HERE
 3077 2104 55080000 		_DOLIT	4
 3077      04000000 
 3078 210c 190E0000 		_ADR	CPP
 3079 2110 9D0C0000 		_ADR	PSTOR
 3080 2114 EB060000 		_UNNEST
 3081              	
 3082              	//    AHEAD	( -- A )
 3083              	// 	Compile a forward branch instruction.
 3084              	
 3085 2118 EC200000 		.word	_IFF
 3086 211c C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3087 211d 41484541 		.ascii "AHEAD"
 3087      44
 3088 2122 00BF     		.p2align 2 	
 3089              	AHEAD:
 3090 2124 504700BF 		_NEST
 3091 2128 55080000 		_COMPI	BRAN
 3091      AA080000 
 3091      E5230000 
 3092 2134 09110000 		_ADR	HERE
 3093 2138 55080000 		_DOLIT	4
 3093      04000000 
 3094 2140 190E0000 		_ADR	CPP
 3095 2144 9D0C0000 		_ADR	PSTOR
 3096 2148 EB060000 		_UNNEST
 3097              	
 3098              	//    REPEAT	( A a -- )
 3099              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3100              	
 3101 214c 1C210000 		.word	_AHEAD
 3102 2150 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3103 2151 52455045 		.ascii "REPEAT"
 3103      4154
 3104 2157 00       		.p2align 2 	
 3105              	REPEA:
 3106 2158 504700BF 		_NEST
 3107 215c D1200000 		_ADR	AGAIN
 3108 2160 09110000 		_ADR	HERE
 3109 2164 99090000 		_ADR	SWAP
 3110 2168 C9080000 		_ADR	STORE
 3111 216c EB060000 		_UNNEST
ARM GAS  forth.s 			page 90


 3112              	
 3113              	//    THEN	( A -- )
 3114              	// 	Terminate a conditional branch structure.
 3115              	
 3116 2170 50210000 		.word	_REPEA
 3117 2174 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3118 2175 5448454E 		.ascii "THEN"
 3119 2179 0000BF   		.p2align 2 	
 3120              	THENN:
 3121 217c 504700BF 		_NEST
 3122 2180 09110000 		_ADR	HERE
 3123 2184 99090000 		_ADR	SWAP
 3124 2188 C9080000 		_ADR	STORE
 3125 218c EB060000 		_UNNEST
 3126              	
 3127              	//    AFT	 ( a -- a A )
 3128              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3129              	
 3130 2190 74210000 		.word	_THENN
 3131 2194 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3132 2195 414654   		.ascii "AFT"
 3133              		.p2align 2 	
 3134              	AFT:
 3135 2198 504700BF 		_NEST
 3136 219c 79090000 		_ADR	DROP
 3137 21a0 25210000 		_ADR	AHEAD
 3138 21a4 71200000 		_ADR	BEGIN
 3139 21a8 99090000 		_ADR	SWAP
 3140 21ac EB060000 		_UNNEST
 3141              	
 3142              	//    ELSE	( A -- A )
 3143              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3144              	
 3145 21b0 94210000 		.word	_AFT
 3146 21b4 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3147 21b5 454C5345 		.ascii "ELSE"
 3148 21b9 0000BF   		.p2align 2 	
 3149              	ELSEE:
 3150 21bc 504700BF 		_NEST
 3151 21c0 25210000 		_ADR	AHEAD
 3152 21c4 99090000 		_ADR	SWAP
 3153 21c8 7D210000 		_ADR	THENN
 3154 21cc EB060000 		_UNNEST
 3155              	
 3156              	//    WHILE	( a -- A a )
 3157              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3158              	
 3159 21d0 B4210000 		.word	_ELSEE
 3160 21d4 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3161 21d5 5748494C 		.ascii "WHILE"
 3161      45
 3162 21da 00BF     		.p2align 2 	
 3163              	WHILE:
 3164 21dc 504700BF 		_NEST
 3165 21e0 F1200000 		_ADR	IFF
 3166 21e4 99090000 		_ADR	SWAP
 3167 21e8 EB060000 		_UNNEST
ARM GAS  forth.s 			page 91


 3168              	
 3169              	//    ABORT"	( -- //  string> )
 3170              	// 	Conditional abort with an error message.
 3171              	
 3172 21ec D4210000 		.word	_WHILE
 3173 21f0 86       	_ABRTQ:	.byte  IMEDD+6
 3174 21f1 41424F52 		.ascii "ABORT\""
 3174      5422
 3175 21f7 00       		.p2align 2 	
 3176              	ABRTQ:
 3177 21f8 504700BF 		_NEST
 3178 21fc 55080000 		_COMPI	ABORQ
 3178      341D0000 
 3178      E5230000 
 3179 2208 0D200000 		_ADR	STRCQ
 3180 220c EB060000 		_UNNEST
 3181              	
 3182              	//    $"	( -- //  string> )
 3183              	// 	Compile an inline word literal.
 3184              	
 3185 2210 F0210000 		.word	_ABRTQ
 3186 2214 82       	_STRQ:	.byte  IMEDD+2
 3187 2215 2422     		.ascii	"$\""
 3188 2217 00       		.p2align 2 	
 3189              	STRQ:
 3190 2218 504700BF 		_NEST
 3191 221c 55080000 		_COMPI	STRQP
 3191      C4160000 
 3191      E5230000 
 3192 2228 0D200000 		_ADR	STRCQ
 3193 222c EB060000 		_UNNEST
 3194              	
 3195              	//    ."	( -- //  string> )
 3196              	// 	Compile an inline word  literal to be typed out at run time.
 3197              	
 3198 2230 14220000 		.word	_STRQ
 3199 2234 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3200 2235 2E22     		.ascii	".\""
 3201 2237 00       		.p2align 2 	
 3202              	DOTQ:
 3203 2238 504700BF 		_NEST
 3204 223c 55080000 		_COMPI	DOTQP
 3204      E0160000 
 3204      E5230000 
 3205 2248 0D200000 		_ADR	STRCQ
 3206 224c EB060000 		_UNNEST
 3207              	
 3208              	// **************************************************************************
 3209              	//  Name compiler
 3210              	
 3211              	//    ?UNIQUE	( a -- a )
 3212              	// 	Display a warning message if the word already exists.
 3213              	
 3214 2250 34220000 		.word	_DOTQ
 3215 2254 07       	_UNIQU:	.byte  7
 3216 2255 3F554E49 		.ascii "?UNIQUE"
 3216      515545
ARM GAS  forth.s 			page 92


 3217              		.p2align 2 	
 3218              	UNIQU:
 3219 225c 504700BF 		_NEST
 3220 2260 89090000 		_ADR	DUPP
 3221 2264 751B0000 		_ADR	NAMEQ			// ?name exists
 3222 2268 97080000 		_QBRAN	UNIQ1	// redefinitions are OK
 3222      88220000 
 3223 2270 E1160000 		_DOTQP	7," reDef "		// but warn the user
 3223      07207265 
 3223      44656620 
 3224 227c AD090000 		_ADR	OVER
 3225 2280 E50C0000 		_ADR	COUNT
 3226 2284 45160000 		_ADR	TYPEE			// just in case its not planned
 3227              	UNIQ1:
 3228 2288 79090000 		_ADR	DROP
 3229 228c EB060000 		_UNNEST
 3230              	
 3231              	//    $,n	 ( na -- )
 3232              	// 	Build a new dictionary name using the data at na.
 3233              	
 3234              	// 	.word	_UNIQU
 3235              	// _SNAME	.byte  3
 3236              	// 	.ascii "$,n"
 3237              	// 	.p2align 2 	
 3238              	SNAME:
 3239 2290 504700BF 		_NEST
 3240 2294 89090000 		_ADR	DUPP			//  na na
 3241 2298 FD080000 		_ADR	CAT			//  ?null input
 3242 229c 97080000 		_QBRAN	SNAM1
 3242      D8220000 
 3243 22a4 5D220000 		_ADR	UNIQU			//  na
 3244 22a8 410E0000 		_ADR	LAST			//  na last
 3245 22ac DD080000 		_ADR	AT			//  na la
 3246 22b0 711F0000 		_ADR	COMMA			//  na
 3247 22b4 89090000 		_ADR	DUPP			//  na na
 3248 22b8 410E0000 		_ADR	LAST			//  na na last
 3249 22bc C9080000 		_ADR	STORE			//  na , save na for vocabulary link
 3250 22c0 E50C0000 		_ADR	COUNT			//  na+1 count
 3251 22c4 4D0A0000 		_ADR	PLUS			//  na+1+count
 3252 22c8 55100000 		_ADR	ALGND			//  word boundary
 3253 22cc 190E0000 		_ADR	CPP
 3254 22d0 C9080000 		_ADR	STORE			//  top of dictionary now
 3255 22d4 EB060000 		_UNNEST
 3256              	SNAM1:
 3257 22d8 C5160000 		_ADR	STRQP
 3258 22dc 07       		.byte	7
 3259 22dd 206E616D 		.ascii " name? "
 3259      653F20
 3260 22e4 091D0000 		_ADR	ABORT
 3261              	
 3262              	//    $COMPILE	( a -- )
 3263              	// 	Compile next word to code dictionary as a token or literal.
 3264              	
 3265 22e8 54220000 		.word	_UNIQU
 3266 22ec 08       	_SCOMP:	.byte  8
 3267 22ed 24434F4D 		.ascii "$COMPILE"
 3267      50494C45 
ARM GAS  forth.s 			page 93


 3268 22f5 0000BF   		.p2align 2 	
 3269              	SCOMP:
 3270 22f8 504700BF 		_NEST
 3271 22fc 751B0000 		_ADR	NAMEQ
 3272 2300 5D0B0000 		_ADR	QDUP	// defined?
 3273 2304 97080000 		_QBRAN	SCOM2
 3273      34230000 
 3274 230c DD080000 		_ADR	AT
 3275 2310 55080000 		_DOLIT	IMEDD
 3275      80000000 
 3276 2318 CD090000 		_ADR	ANDD	// immediate?
 3277 231c 97080000 		_QBRAN	SCOM1
 3277      2C230000 
 3278 2324 6D080000 		_ADR	EXECU
 3279 2328 EB060000 		_UNNEST			// it's immediate, execute
 3280              	SCOM1:
 3281 232c E5230000 		_ADR	CALLC			// it's not immediate, compile
 3282 2330 EB060000 		_UNNEST	
 3283              	SCOM2:
 3284 2334 99140000 		_ADR	NUMBQ
 3285 2338 97080000 		_QBRAN	SCOM3
 3285      48230000 
 3286 2340 F51F0000 		_ADR	LITER
 3287 2344 EB060000 		_UNNEST			// compile number as integer
 3288              	SCOM3: // compilation abort 
 3289 2348 51230000 		_ADR COLON_ABORT 
 3290 234c 091D0000 		_ADR	ABORT			// error
 3291              	
 3292              	// before aborting a compilation 
 3293              	// reset HERE and LAST
 3294              	// to previous values. 
 3295              	COLON_ABORT:
 3296 2350 504700BF 		_NEST 
 3297 2354 410E0000 		_ADR LAST 
 3298 2358 DD080000 		_ADR AT 
 3299 235c F90A0000 		_ADR CELLM 
 3300 2360 89090000 		_ADR DUPP 
 3301 2364 190E0000 		_ADR CPP  
 3302 2368 C9080000 		_ADR STORE 
 3303 236c DD080000 		_ADR AT 
 3304 2370 410E0000 		_ADR LAST 
 3305 2374 C9080000 		_ADR STORE 
 3306 2378 EB060000 		_UNNEST 
 3307              	
 3308              	//    OVERT	( -- )
 3309              	// 	Link a new word into the current vocabulary.
 3310              	
 3311 237c EC220000 		.word	_SCOMP
 3312 2380 05       	_OVERT:	.byte  5
 3313 2381 4F564552 		.ascii "OVERT"
 3313      54
 3314 2386 00BF     		.p2align 2 	
 3315              	OVERT:
 3316 2388 504700BF 		_NEST
 3317 238c 410E0000 		_ADR	LAST
 3318 2390 DD080000 		_ADR	AT
 3319 2394 050E0000 		_ADR	CNTXT
ARM GAS  forth.s 			page 94


 3320 2398 C9080000 		_ADR	STORE
 3321 239c EB060000 		_UNNEST
 3322              	
 3323              	//    ; 	   ( -- )
 3324              	// 	Terminate a colon definition.
 3325              	
 3326 23a0 80230000 		.word	_OVERT
 3327 23a4 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3328 23a5 3B       		.ascii ";"
 3329 23a6 00BF     		.p2align 2 	
 3330              	SEMIS:
 3331 23a8 504700BF 		_NEST
 3332 23ac 55080000 		_DOLIT	UNNEST
 3332      EA060000 
 3333 23b4 E5230000 		_ADR	CALLC
 3334 23b8 C51D0000 		_ADR	LBRAC
 3335 23bc 89230000 		_ADR	OVERT
 3336 23c0 EB060000 		_UNNEST
 3337              	
 3338              	//    ]	   ( -- )
 3339              	// 	Start compiling the words in the input stream.
 3340              	
 3341 23c4 A4230000 		.word	_SEMIS
 3342 23c8 01       	_RBRAC:	.byte  1
 3343 23c9 5D       		.ascii "]"
 3344 23ca 00BF     		.p2align 2 	
 3345              	RBRAC:
 3346 23cc 504700BF 		_NEST
 3347 23d0 55080000 		_DOLIT	SCOMP
 3347      F8220000 
 3348 23d8 D90D0000 		_ADR	TEVAL
 3349 23dc C9080000 		_ADR	STORE
 3350 23e0 EB060000 		_UNNEST
 3351              	
 3352              	//    BL.W	( ca -- )
 3353              	// 	compile ca.
 3354              	
 3355              	// 	.word	_RBRAC
 3356              	// _CALLC	.byte  5
 3357              	// 	.ascii "call,"
 3358              	// 	.p2align 2 	
 3359              	CALLC:
 3360 23e4 504700BF 		_NEST
 3361 23e8 55080000 		_DOLIT 1 
 3361      01000000 
 3362 23f0 E1090000 		_ADR ORR 
 3363 23f4 711F0000 		_ADR COMMA  
 3364 23f8 EB060000 		_UNNEST 
 3365              	
 3366              	
 3367              	// 	:	( -- //  string> )
 3368              	// 	Start a new colon definition using next word as its name.
 3369              	
 3370 23fc C8230000 		.word	_RBRAC
 3371 2400 01       	_COLON:	.byte  1
 3372 2401 3A       		.ascii ":"
 3373 2402 00BF     		.p2align 2 	
ARM GAS  forth.s 			page 95


 3374              	COLON:
 3375 2404 504700BF 		_NEST
 3376 2408 F1190000 		_ADR	TOKEN
 3377 240c 91220000 		_ADR	SNAME
 3378 2410 F5060000 		_ADR	COMPI_NEST 
 3379 2414 CD230000 		_ADR	RBRAC
 3380 2418 EB060000 		_UNNEST
 3381              	
 3382              	//    IMMEDIATE   ( -- )
 3383              	// 	Make the last compiled word an immediate word.
 3384              	
 3385 241c 00240000 		.word	_COLON
 3386 2420 09       	_IMMED:	.byte  9
 3387 2421 494D4D45 		.ascii "IMMEDIATE"
 3387      44494154 
 3387      45
 3388 242a 00BF     		.p2align 2 	
 3389              	IMMED:
 3390 242c 504700BF 		_NEST
 3391 2430 55080000 		_DOLIT	IMEDD
 3391      80000000 
 3392 2438 410E0000 		_ADR	LAST
 3393 243c DD080000 		_ADR	AT
 3394 2440 DD080000 		_ADR	AT
 3395 2444 E1090000 		_ADR	ORR
 3396 2448 410E0000 		_ADR	LAST
 3397 244c DD080000 		_ADR	AT
 3398 2450 C9080000 		_ADR	STORE
 3399 2454 EB060000 		_UNNEST
 3400              	
 3401              	// **************************************************************************
 3402              	//  Defining words
 3403              	
 3404              	//    CONSTANT	( u -- //  string> )
 3405              	// 	Compile a new constant.
 3406              	
 3407 2458 20240000 		.word	_IMMED
 3408 245c 08       	_CONST:	.byte  8
 3409 245d 434F4E53 		.ascii "CONSTANT"
 3409      54414E54 
 3410 2465 0000BF   		.p2align 2 	
 3411              	CONST:
 3412 2468 504700BF 		_NEST 
 3413 246c F1190000 		_ADR	TOKEN
 3414 2470 91220000 		_ADR	SNAME
 3415 2474 89230000 		_ADR	OVERT
 3416 2478 F5060000 		_ADR	COMPI_NEST
 3417 247c 55080000 		_DOLIT	DOCON
 3417      180D0000 
 3418 2484 E5230000 		_ADR	CALLC
 3419 2488 711F0000 		_ADR	COMMA
 3420 248c 55080000 		_DOLIT	UNNEST 
 3420      EA060000 
 3421 2494 E5230000 		_ADR	CALLC  
 3422 2498 EB060000 		_UNNEST
 3423              	
 3424              		.p2align 2 
ARM GAS  forth.s 			page 96


 3425              	// doDOES> ( -- a )
 3426              	// runtime action of DOES> 
 3427              	// leave parameter field address on stack 
 3428              	DODOES:
 3429 249c 504700BF 		_NEST 
 3430 24a0 09090000 		_ADR	RFROM
 3431 24a4 E90A0000 		_ADR	CELLP 
 3432 24a8 A90A0000 		_ADR	ONEP  
 3433 24ac 410E0000 		_ADR LAST 
 3434 24b0 DD080000 		_ADR AT
 3435 24b4 0D1A0000 		_ADR NAMET 
 3436 24b8 E90A0000 		_ADR CELLP 
 3437 24bc C9080000 		_ADR STORE  
 3438 24c0 EB060000 		_UNNEST 
 3439              	
 3440              		.p2align 2
 3441              	//  DOES> ( -- )
 3442              	//  compile time action 
 3443 24c4 5C240000 		.word _CONST   
 3444 24c8 C5       	_DOES: .byte IMEDD+COMPO+5 
 3445 24c9 444F4553 		.ascii "DOES>"
 3445      3E
 3446 24ce 00BF     		.p2align 2
 3447              	DOES: 
 3448 24d0 504700BF 		_NEST 
 3449 24d4 55080000 		_DOLIT DODOES 
 3449      9C240000 
 3450 24dc E5230000 		_ADR CALLC 
 3451 24e0 55080000 		_DOLIT	UNNEST
 3451      EA060000 
 3452 24e8 E5230000 		_ADR	CALLC 
 3453 24ec F5060000 		_ADR COMPI_NEST
 3454 24f0 55080000 		_DOLIT RFROM 
 3454      08090000 
 3455 24f8 E5230000 		_ADR	CALLC
 3456 24fc EB060000 		_UNNEST 
 3457              	
 3458              	
 3459              	
 3460              	//  DEFER@ ( "name" -- a )
 3461              	//  return value of code field of defered function. 
 3462 2500 C8240000 		.word _DOES 
 3463 2504 06       	_DEFERAT: .byte 6 
 3464 2505 44454645 		.ascii "DEFER@"
 3464      5240
 3465 250b 00       		.p2align 2 
 3466              	DEFERAT: 
 3467 250c 504700BF 		_NEST 
 3468 2510 311F0000 		_ADR TICK
 3469 2514 E90A0000 		_ADR CELLP 
 3470 2518 DD080000 		_ADR AT 
 3471 251c B90A0000 		_ADR ONEM 
 3472 2520 EB060000 		_UNNEST 
 3473              	
 3474              	// DEFER! ( "name1" "name2" -- )
 3475              	// assign an action to a defered word 
 3476 2524 04250000 		.word _DEFERAT 
ARM GAS  forth.s 			page 97


 3477 2528 06       	_DEFERSTO: .byte 6 
 3478 2529 44454645 		.ascii "DEFER!" 
 3478      5221
 3479 252f 00       		.p2align 2 
 3480              	DEFERSTO:
 3481 2530 504700BF 		_NEST 
 3482 2534 311F0000 		_ADR TICK 
 3483 2538 A90A0000 		_ADR ONEP 
 3484 253c 311F0000 		_ADR TICK 
 3485 2540 E90A0000 		_ADR CELLP 
 3486 2544 C9080000 		_ADR STORE 
 3487 2548 EB060000 		_UNNEST
 3488              	
 3489              	//  DEFER ( "name" -- )
 3490              	//  create a defered definition
 3491 254c 28250000 		.word _DEFERSTO  
 3492 2550 05       	_DEFER: .byte 5 
 3493 2551 44454645 		.ascii "DEFER"
 3493      52
 3494 2556 00BF     		.p2align 2
 3495              	DEFER:
 3496 2558 504700BF 		_NEST 
 3497 255c A9250000 		_ADR CREAT 
 3498 2560 55080000 		_DOLIT UNNEST 
 3498      EA060000 
 3499 2568 E5230000 		_ADR CALLC 
 3500 256c 55080000 		_DOLIT DEFER_NOP
 3500      90250000 
 3501 2574 A90A0000 		_ADR ONEP 
 3502 2578 410E0000 		_ADR LAST 
 3503 257c DD080000 		_ADR AT 
 3504 2580 0D1A0000 		_ADR NAMET 
 3505 2584 E90A0000 		_ADR CELLP 
 3506 2588 C9080000 		_ADR STORE 
 3507 258c EB060000 		_UNNEST 
 3508              	DEFER_NOP:
 3509 2590 504700BF 		_NEST  
 3510 2594 51080000 		_ADR NOP 
 3511 2598 EB060000 		_UNNEST 
 3512              	
 3513              	//    CREATE	( -- //  string> )
 3514              	// 	Compile a new array entry without allocating code space.
 3515              	
 3516 259c 50250000 		.word	_DEFER 
 3517 25a0 06       	_CREAT:	.byte  6
 3518 25a1 43524541 		.ascii "CREATE"
 3518      5445
 3519 25a7 00       		.p2align 2 	
 3520              	CREAT:
 3521 25a8 504700BF 		_NEST 
 3522 25ac F1190000 		_ADR	TOKEN
 3523 25b0 91220000 		_ADR	SNAME
 3524 25b4 89230000 		_ADR	OVERT
 3525 25b8 F5060000 		_ADR	COMPI_NEST 
 3526 25bc 55080000 		_DOLIT	DOVAR
 3526      0C0D0000 
 3527 25c4 E5230000 		_ADR	CALLC
ARM GAS  forth.s 			page 98


 3528 25c8 EB060000 		_UNNEST
 3529              	
 3530              	//    VARIABLE	( -- //  string> )
 3531              	// 	Compile a new variable initialized to 0.
 3532              	
 3533 25cc A0250000 		.word	_CREAT
 3534 25d0 08       	_VARIA:	.byte  8
 3535 25d1 56415249 		.ascii "VARIABLE"
 3535      41424C45 
 3536 25d9 0000BF   		.p2align 2 	
 3537              	VARIA:
 3538 25dc 504700BF 		_NEST
 3539 25e0 A9250000 		_ADR	CREAT
 3540 25e4 55080000 		_DOLIT	0
 3540      00000000 
 3541 25ec 711F0000 		_ADR	COMMA
 3542 25f0 55080000 		_DOLIT UNNEST
 3542      EA060000 
 3543 25f8 E5230000 		_ADR	CALLC  
 3544 25fc EB060000 		_UNNEST
 3545              	
 3546              	// **************************************************************************
 3547              	//  Tools
 3548              	
 3549              	//  TRACE ( f -- )
 3550              	// enable or disable tracing 
 3551 2600 D0250000 		.word _VARIA 
 3552 2604 05       	_TRACE: .byte 5
 3553 2605 54524143 		.ascii "TRACE"
 3553      45
 3554 260a 00BF     		.p2align 2
 3555              	TRACE: 
 3556 260c 504700BF 		_NEST 
 3557 2610 8D0E0000 		_ADR FTRACE 
 3558 2614 C9080000 		_ADR STORE 
 3559 2618 EB060000 		_UNNEST 
 3560              	
 3561              	// TR_PRINT ( ca -- )
 3562              	// print name from ca  
 3563 261c 04260000 		.word _TRACE 
 3564 2620 07       	_DBG_PRT: .byte 7 
 3565 2621 4442475F 		.ascii "DBG_PRT"
 3565      505254
 3566              	DBG_PRT:
 3567 2628 504700BF 		_NEST 
 3568 262c 59270000 		_ADR TNAME 
 3569 2630 5D0B0000 		_ADR QDUP 
 3570 2634 97080000 		_QBRAN 1f 
 3570      48260000 
 3571 263c E50C0000 		_ADR COUNT 
 3572 2640 45160000 		_ADR TYPEE 
 3573 2644 79160000 		_ADR CR
 3574              	1:  	
 3575 2648 EB060000 		_UNNEST 
 3576              	
 3577              	//    dm+	 ( a u -- a )
 3578              	// 	Dump u bytes from , leaving a+u on the stack.
ARM GAS  forth.s 			page 99


 3579              	
 3580              	// 	.word	_TRACE
 3581              	// _DMP	.byte  3
 3582              	// 	.ascii "dm+"
 3583              	// 	.p2align 2 	
 3584              	DMP:
 3585 264c 504700BF 		_NEST
 3586 2650 AD090000 		_ADR	OVER
 3587 2654 55080000 		_DOLIT	4
 3587      04000000 
 3588 265c 25170000 		_ADR	UDOTR			// display address
 3589 2660 F1150000 		_ADR	SPACE
 3590 2664 31090000 		_ADR	TOR			// start count down loop
 3591 2668 AB080000 		_BRAN	PDUM2			// skip first pass
 3591      88260000 
 3592              	PDUM1:
 3593 2670 89090000 	  _ADR	DUPP
 3594 2674 FD080000 		_ADR	CAT
 3595 2678 55080000 		_DOLIT	3
 3595      03000000 
 3596 2680 25170000 		_ADR	UDOTR			// display numeric data
 3597 2684 A90A0000 		_ADR	ONEP			// increment address
 3598              	PDUM2:
 3599 2688 79080000 	  _ADR	DONXT
 3600 268c 70260000 		.word	PDUM1	// loop till done
 3601 2690 EB060000 		_UNNEST
 3602              		.p2align 2 
 3603              	//    DUMP	( a u -- )
 3604              	// 	Dump u bytes from a, in a formatted manner.
 3605              	
 3606 2694 D0250000 		.word	_VARIA
 3607 2698 04       	_DUMP:	.byte  4
 3608 2699 44554D50 		.ascii "DUMP"
 3609 269d 0000BF   		.p2align 2 	
 3610              	DUMP:
 3611 26a0 504700BF 		_NEST
 3612 26a4 7D0D0000 		_ADR	BASE
 3613 26a8 DD080000 		_ADR	AT
 3614 26ac 31090000 		_ADR	TOR
 3615 26b0 E9130000 		_ADR	HEX			// save radix,set hex
 3616 26b4 55080000 		_DOLIT	16
 3616      10000000 
 3617 26bc F50F0000 		_ADR	SLASH			// change count to lines
 3618 26c0 31090000 		_ADR	TOR
 3619 26c4 AB080000 		_BRAN	DUMP4			// start count down loop
 3619      F4260000 
 3620              	DUMP1:
 3621 26cc 79160000 	  _ADR	CR
 3622 26d0 55080000 		_DOLIT	16
 3622      10000000 
 3623 26d8 990B0000 		_ADR	DDUP
 3624 26dc 4D260000 		_ADR	DMP			// display numeric
 3625 26e0 710B0000 		_ADR	ROT
 3626 26e4 710B0000 		_ADR	ROT
 3627 26e8 F1150000 		_ADR	SPACE
 3628 26ec F1150000 		_ADR	SPACE
 3629 26f0 45160000 		_ADR	TYPEE			// display printable characters
ARM GAS  forth.s 			page 100


 3630              	DUMP4:
 3631 26f4 79080000 	  _DONXT	DUMP1	// loop till done
 3631      CC260000 
 3632              	DUMP3:
 3633 26fc 79090000 		_ADR	DROP
 3634 2700 09090000 		_ADR	RFROM
 3635 2704 7D0D0000 		_ADR	BASE
 3636 2708 C9080000 		_ADR	STORE			// restore radix
 3637 270c EB060000 		_UNNEST
 3638              	
 3639              	//    .S	  ( ... -- ... )
 3640              	// 	Display the contents of the data stack.
 3641              	
 3642 2710 98260000 		.word	_DUMP
 3643              	_DOTS:
 3644 2714 02       		.byte  2
 3645 2715 2E53     		.ascii ".S"
 3646 2717 00       		.p2align 2 	
 3647              	DOTS:
 3648 2718 504700BF 		_NEST
 3649 271c F1150000 		_ADR	SPACE
 3650 2720 BD100000 		_ADR	DEPTH			// stack depth
 3651 2724 31090000 		_ADR	TOR			// start count down loop
 3652 2728 AB080000 		_BRAN	DOTS2			// skip first pass
 3652      3C270000 
 3653              	DOTS1:
 3654 2730 1D090000 		_ADR	RAT
 3655 2734 E1100000 		_ADR	PICK
 3656 2738 7D170000 		_ADR	DOT			// index stack, display contents
 3657              	DOTS2:
 3658 273c 79080000 		_DONXT	DOTS1	// loop till done
 3658      30270000 
 3659 2744 F1150000 		_ADR	SPACE
 3660 2748 EB060000 		_UNNEST
 3661              	
 3662              	//    >NAME	( ca -- na | F )
 3663              	// 	Convert code address to a name address.
 3664              	
 3665 274c 14270000 		.word	_DOTS
 3666 2750 05       	_TNAME:	.byte  5
 3667 2751 3E4E414D 		.ascii ">NAME"
 3667      45
 3668 2756 00BF     		.p2align 2 	
 3669              	TNAME:
 3670 2758 504700BF 		_NEST
 3671 275c 31090000 		_ADR	TOR			//  
 3672 2760 050E0000 		_ADR	CNTXT			//  va
 3673 2764 DD080000 		_ADR	AT			//  na
 3674              	TNAM1:
 3675 2768 89090000 		_ADR	DUPP			//  na na
 3676 276c 97080000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3676      9C270000 
 3677 2774 89090000 		_ADR	DUPP			//  na na
 3678 2778 0D1A0000 		_ADR	NAMET			//  na ca
 3679 277c 1D090000 		_ADR	RAT			//  na ca code
 3680 2780 F5090000 		_ADR	XORR			//  na f --
 3681 2784 97080000 		_QBRAN	TNAM2
ARM GAS  forth.s 			page 101


 3681      9C270000 
 3682 278c F90A0000 		_ADR	CELLM			//  la 
 3683 2790 DD080000 		_ADR	AT			//  next_na
 3684 2794 AB080000 		_BRAN	TNAM1
 3684      68270000 
 3685              	TNAM2:	
 3686 279c 09090000 		_ADR	RFROM
 3687 27a0 79090000 		_ADR	DROP			//  0|na --
 3688 27a4 EB060000 		_UNNEST			// 0
 3689              	
 3690              	//    .ID	 ( na -- )
 3691              	// 	Display the name at address.
 3692              	
 3693 27a8 50270000 		.word	_TNAME
 3694 27ac 03       	_DOTID:	.byte  3
 3695 27ad 2E4944   		.ascii ".ID"
 3696              		.p2align 2 	
 3697              	DOTID:
 3698 27b0 504700BF 		_NEST
 3699 27b4 5D0B0000 		_ADR	QDUP			// if zero no name
 3700 27b8 97080000 		_QBRAN	DOTI1
 3700      D8270000 
 3701 27c0 E50C0000 		_ADR	COUNT
 3702 27c4 55080000 		_DOLIT	0x1F
 3702      1F000000 
 3703 27cc CD090000 		_ADR	ANDD			// mask lexicon bits
 3704 27d0 45160000 		_ADR	TYPEE
 3705 27d4 EB060000 		_UNNEST			// display name string
 3706              	DOTI1:
 3707 27d8 E1160000 		_DOTQP	9," {noName}"
 3707      09207B6E 
 3707      6F4E616D 
 3707      657D00BF 
 3708 27e8 EB060000 		_UNNEST
 3709              	
 3710              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3711              	.if WANT_SEE 
 3712              	//    SEE	 ( -- //  string> )
 3713              	// 	A simple decompiler.
 3714              	
 3715              		.word	_DOTID
 3716              	_SEE:	.byte  3
 3717              		.ascii "SEE"
 3718              		.p2align 2 	
 3719              	SEE:
 3720              		_NEST
 3721              		_ADR	TICK	//  ca --, starting address
 3722              		_ADR	CR	
 3723              		_DOLIT	20
 3724              		_ADR	TOR
 3725              	SEE1:
 3726              		_ADR	CELLP			//  a
 3727              		_ADR	DUPP			//  a a
 3728              		_ADR	DECOMP		//  a
 3729              		_DONXT	SEE1
 3730              		_ADR	DROP
 3731              		_UNNEST
ARM GAS  forth.s 			page 102


 3732              	
 3733              	// 	DECOMPILE ( a -- )
 3734              	// 	Convert code in a.  Display name of command or as data.
 3735              	
 3736              		.word	_SEE
 3737              	_DECOM:	.byte  9
 3738              		.ascii "DECOMPILE"
 3739              		.p2align 2 
 3740              		
 3741              	DECOMP:	
 3742              		_NEST
 3743              		_ADR	DUPP			//  a a
 3744              	// 	_ADR	TOR			//  a
 3745              		_ADR	AT			//  a code
 3746              		_ADR	DUPP			//  a code code
 3747              		_DOLIT	0xF800D000 //0xF800F800
 3748              		_ADR	ANDD
 3749              		_DOLIT	0xF000D000 //0xF800F000
 3750              		_ADR	EQUAL			//  a code ?
 3751              		_ADR	INVER 
 3752              		_QBRAN	DECOM2	//  not a command
 3753              		//  a valid_code --, extract address and display name
 3754              		MOVW	IP,#0xFFE
 3755              		MOV	WP,TOS
 3756              		LSL	TOS,TOS,#21		//  get bits 22-12
 3757              		ASR	TOS,TOS,#9		//  with sign extension
 3758              		LSR	WP,WP,#15		//  get bits 11-1
 3759              		AND	WP,WP,IP		//  retain only bits 11-1
 3760              		ORR	TOS,TOS,WP		//  get bits 22-1
 3761              		NOP
 3762              		_ADR	OVER			//  a offset a
 3763              		_ADR	PLUS			//  a target-4
 3764              		_ADR	CELLP			//  a target
 3765              		_ADR	TNAME			//  a na/0 --, is it a name?
 3766              		_ADR	QDUP			//  name address or zero
 3767              		_QBRAN	DECOM1
 3768              		_ADR	SPACE			//  a na
 3769              		_ADR	DOTID			//  a --, display name
 3770              	// 	_ADR	RFROM			//  a
 3771              		_ADR	DROP
 3772              		_UNNEST
 3773              	DECOM1:	// _ADR	RFROM		//  a
 3774              		_ADR	AT			//  data
 3775              		_ADR	UDOT			//  display data
 3776              		_UNNEST
 3777              	DECOM2:
 3778              		_ADR	UDOT
 3779              	// 	_ADR	RFROM
 3780              		_ADR	DROP
 3781              		_UNNEST
 3782              	
 3783              	//    WORDS	( -- )
 3784              	// 	Display the names in the context vocabulary.
 3785              	
 3786              		.word	_DECOM
 3787              	.else 
 3788 27ec AC270000 		.word _DOTID 
ARM GAS  forth.s 			page 103


 3789              	.endif 
 3790 27f0 05       	_WORDS:	.byte  5
 3791 27f1 574F5244 		.ascii "WORDS"
 3791      53
 3792 27f6 00BF     		.p2align 2 	
 3793              	WORDS:
 3794 27f8 504700BF 		_NEST
 3795 27fc 79160000 		_ADR	CR
 3796 2800 050E0000 		_ADR	CNTXT
 3797 2804 DD080000 		_ADR	AT			// only in context
 3798              	WORS1:
 3799 2808 5D0B0000 		_ADR	QDUP			// ?at end of list
 3800 280c 97080000 		_QBRAN	WORS2
 3800      30280000 
 3801 2814 89090000 		_ADR	DUPP
 3802 2818 F1150000 		_ADR	SPACE
 3803 281c B1270000 		_ADR	DOTID			// display a name
 3804 2820 F90A0000 		_ADR	CELLM
 3805 2824 DD080000 		_ADR	AT
 3806 2828 AB080000 		_BRAN	WORS1
 3806      08280000 
 3807              	WORS2:
 3808 2830 EB060000 		_UNNEST
 3809              	
 3810              	// **************************************************************************
 3811              	//  cold start
 3812              	
 3813              	//    VER	 ( -- n )
 3814              	// 	Return the version number of this implementation.
 3815              	
 3816              	// 	.word	_WORDS
 3817              	// _VERSN	.byte  3
 3818              	// 	.ascii "VER"
 3819              	// 	.p2align 2 	
 3820              	VERSN:
 3821 2834 504700BF 		_NEST
 3822 2838 55080000 		_DOLIT	VER*256+EXT
 3822      00010000 
 3823 2840 EB060000 		_UNNEST
 3824              	
 3825              	//    hi	  ( -- )
 3826              	// 	Display the sign-on message of eForth.
 3827              	
 3828 2844 F0270000 		.word	_WORDS
 3829 2848 02       	_HI:	.byte  2
 3830 2849 4849     		.ascii "HI"
 3831 284b 00       		.p2align 2
 3832              	
 3833              	HI:
 3834 284c 504700BF 		_NEST
 3835 2850 79160000 		_ADR	CR	// initialize I/O
 3836 2854 E1160000 		_DOTQP	17, "beyond Jupiter, v" 
 3836      11626579 
 3836      6F6E6420 
 3836      4A757069 
 3836      7465722C 
 3837 286c 7D0D0000 		_ADR	BASE
ARM GAS  forth.s 			page 104


 3838 2870 DD080000 		_ADR	AT
 3839 2874 E9130000 		_ADR	HEX	// save radix
 3840 2878 35280000 		_ADR	VERSN
 3841 287c D9120000 		_ADR	BDIGS
 3842 2880 25130000 		_ADR	DIG
 3843 2884 25130000 		_ADR	DIG
 3844 2888 55080000 		_DOLIT	'.'
 3844      2E000000 
 3845 2890 F9120000 		_ADR	HOLD
 3846 2894 45130000 		_ADR	DIGS
 3847 2898 99130000 		_ADR	EDIGS
 3848 289c 45160000 		_ADR	TYPEE	// format version number
 3849 28a0 7D0D0000 		_ADR	BASE
 3850 28a4 C9080000 		_ADR	STORE
 3851 28a8 79160000 		_ADR	CR
 3852 28ac EB060000 		_UNNEST			// restore radix
 3853              	
 3854              	//    COLD	( -- )
 3855              	// 	The high level cold start sequence.
 3856              	
 3857 28b0 48280000 		.word	_HI
 3858 28b4 04       	_LASTN:	.byte  4
 3859 28b5 434F4C44 		.ascii "COLD"
 3860 28b9 0000BF   		.p2align 2	
 3861              	COLD:
 3862 28bc 00B5FDF7 		_CALL forth_init 
 3862      27FC5DF8 
 3862      04EB
 3863 28c6 DFF84CC0 		ldr IP,=COLD1 
 3864 28ca FDF70BBF 		_NEXT
 3865 28ce 00BF     		.p2align 2 
 3866              	COLD1:
 3867 28d0 55080000 		_DOLIT  0 
 3867      00000000 
 3868 28d8 01000000 		_ADR ULED // turn off user LED 
 3869 28dc 55080000 		_DOLIT	UZERO
 3869      88020000 
 3870 28e4 55080000 		_DOLIT	UPP
 3870      00000020 
 3871 28ec 55080000 		_DOLIT	ULAST-UZERO
 3871      A0000000 
 3872 28f4 A9110000 		_ADR	MOVE 			// initialize user area
 3873 28f8 911E0000 		_ADR	PRESE			// initialize stack and TIB
 3874 28fc 690D0000 		_ADR	TBOOT
 3875 2900 59110000 		_ADR	ATEXE			// application boot
 3876 2904 89230000 		_ADR	OVERT
 3877 2908 AB080000 		_BRAN	QUIT			// start interpretation
 3877      B01E0000 
 3878              	COLD2:
 3879              		.p2align 2 	
 3880              	CTOP:
 3881 2910 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3882              	
 3883              	
 3884 2914 D0280000 	  .end 
ARM GAS  forth.s 			page 105


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 106


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  forth.s 			page 107


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:0000000000000400 NVIC_IPR_BASE
     stm32f411ce.inc:203    *ABS*:0000000000000e00 NVIC_STIR
     stm32f411ce.inc:206    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:207    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:208    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:209    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:211    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:212    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:213    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:214    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:217    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:218    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:221    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:222    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:223    *ABS*:0000000000000008 TIM_SMCR
ARM GAS  forth.s 			page 108


     stm32f411ce.inc:224    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:225    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:226    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:227    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:228    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:229    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:230    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:231    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:232    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:233    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:234    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:235    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:236    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:237    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:238    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:239    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:240    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:243    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:245    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:246    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:247    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:248    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:249    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:250    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:251    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:254    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:256    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:257    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:258    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:259    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:260    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:261    *ABS*:0000000000000014 EXTI_PR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
ARM GAS  forth.s 			page 109


          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 NBASE
          macros.inc:78     *ABS*:0000000000000018 TMP
             forth.s:1157   .text:0000000000000d9c SPAN
          macros.inc:80     *ABS*:0000000000000020 TOIN
             forth.s:1181   .text:0000000000000dc4 NTIB
          macros.inc:82     *ABS*:0000000000000028 TIBUF
             forth.s:2814   .text:0000000000001e4c EVAL
             forth.s:1205   .text:0000000000000dec HLD
          macros.inc:85     *ABS*:0000000000000034 CTXT
          macros.inc:86     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:87     *ABS*:000000000000003c USER_CTOP
          macros.inc:88     *ABS*:0000000000000040 LASTN
          macros.inc:89     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:90     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:91     *ABS*:0000000000000054 RX_HEAD
          macros.inc:92     *ABS*:0000000000000058 RX_TAIL
          macros.inc:93     *ABS*:000000000000005c VID_CNTR
          macros.inc:94     *ABS*:0000000000000060 VID_STATE
          macros.inc:95     *ABS*:0000000000000064 VID_FIELD
          macros.inc:96     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:97     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:98     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:99     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:100    *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:101    *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:102    *ABS*:0000000000000088 ROW
          macros.inc:103    *ABS*:000000000000008c COL
          macros.inc:104    *ABS*:0000000000000090 BK_COLOR
          macros.inc:105    *ABS*:0000000000000094 PEN_COLOR
              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:255    .text:00000000000000c0 reset_handler
              init.s:157    .text:0000000000000000 default_handler
              init.s:174    .text:0000000000000020 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
           ps2_kbd.s:62     .text:00000000000005dc kbd_isr
             tvout.s:128    .text:00000000000003cc tv_out_isr
              init.s:191    .text:000000000000003c uart_rx_handler
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .text:0000000000000000 $t
              init.s:162    .text:0000000000000008 exception_msg
              init.s:231    .text:0000000000000094 uart_puts
              init.s:211    .text:000000000000006c reset_mcu
              init.s:163    .text:0000000000000008 $d
              init.s:183    .text:000000000000003a systick_exit
              init.s:208    .text:0000000000000066 user_reboot
              init.s:221    .text:0000000000000080 user_reboot_msg
              init.s:219    .text:000000000000007c scb_adr
              init.s:220    .text:000000000000007c $d
              init.s:225    .text:0000000000000092 $t
              init.s:443    .text:0000000000000248 remap
              init.s:323    .text:0000000000000138 init_devices
              init.s:414    .text:00000000000001fc uart_init
             tvout.s:62     .text:0000000000000330 tv_init
ARM GAS  forth.s 			page 110


              init.s:283    .text:0000000000000110 forth_init
             forth.s:3861   .text:00000000000028bc COLD
             forth.s:85     .text:00000000000006dc NEST
              init.s:336    .text:0000000000000156 wait_hserdy
              init.s:357    .text:0000000000000178 wait_pllrdy
              init.s:369    .text:0000000000000192 wait_sws
              init.s:468    .text:0000000000000288 UZERO
              init.s:502    .text:0000000000000328 ULAST
              init.s:469    .text:0000000000000288 $d
             forth.s:3833   .text:000000000000284c HI
             forth.s:2742   .text:0000000000001d68 INTER
             forth.s:3858   .text:00000000000028b4 _LASTN
             forth.s:3880   .text:0000000000002910 CTOP
              init.s:503    .text:0000000000000328 $d
           tvout.inc:2      *ABS*:0000000000000140 HRES
           tvout.inc:3      *ABS*:00000000000000c8 VRES
           tvout.inc:4      *ABS*:0000000000000004 BPP
           tvout.inc:5      *ABS*:00000000000000a0 BPR
           tvout.inc:6      *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:37     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:38     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:39     *ABS*:00000000000003bf VIDEO_DELAY
             tvout.s:40     *ABS*:000000000000173f VIDEO_END
             tvout.s:43     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:44     *ABS*:0000000000000001 ST_PREVID
             tvout.s:45     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:46     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:48     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:49     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:62     .text:0000000000000330 $t
             tvout.s:147    .text:00000000000003f8 state_vsync
             tvout.s:188    .text:000000000000044c state_pre_video
             tvout.s:199    .text:000000000000045e state_video_out
             tvout.s:229    .text:00000000000004b6 state_post_video
             tvout.s:246    .text:00000000000004dc tv_isr_exit
             tvout.s:177    .text:0000000000000432 sync_end
             tvout.s:238    .text:00000000000004c8 frame_end
             tvout.s:329    .text:00000000000005a0 LINK
             tvout.s:260    .text:00000000000004de $d
             tvout.s:260    .text:00000000000004e2 _PLOT
             tvout.s:260    .text:00000000000004e8 PLOT
             tvout.s:281    .text:000000000000051c op_back
             tvout.s:290    .text:0000000000000536 op_pen
             tvout.s:299    .text:0000000000000550 op_invert
             tvout.s:316    .text:0000000000000582 op_xor
             forth.s:89     .text:00000000000006e4 INEXT
             tvout.s:329    .text:000000000000059c $d
             tvout.s:329    .text:00000000000005a0 _CLS
             tvout.s:329    .text:00000000000005a4 $t
ARM GAS  forth.s 			page 111


             tvout.s:329    .text:00000000000005a4 CLS
             tvout.s:357    .text:00000000000005d8 put_char
             tvout.s:363    .rodata:0000000000000000 $d
             tvout.s:367    *ABS*:0000000000000006 CHAR_WIDTH
             tvout.s:368    *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:370    .rodata:0000000000000000 font_6x8
           ps2_kbd.s:49     *ABS*:0000000000000001 KBD_F_PAR_ERR
           ps2_kbd.s:50     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:51     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:52     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:53     *ABS*:000000000000006f KBD_ONES
           ps2_kbd.s:87     .text:0000000000000630 start_bit
           ps2_kbd.s:94     .text:0000000000000646 parity_bit
           ps2_kbd.s:106    .text:0000000000000668 stop_bit
           ps2_kbd.s:128    .text:0000000000000698 kbd_init
             forth.s:75     .text:00000000000006d0 TPUSH
             forth.s:80     .text:00000000000006d6 TPOP
             forth.s:92     .text:00000000000006ea UNNEST
             forth.s:105    .text:00000000000006f4 COMPI_NEST
             forth.s:121    .text:0000000000000712 $d
             forth.s:122    .text:0000000000000716 _RAND
             forth.s:125    .text:0000000000000720 RAND
             forth.s:127    .text:0000000000000724 $d
             forth.s:869    .text:0000000000000bec ABSS
             forth.s:1087   .text:0000000000000d2c SEED
             forth.s:352    .text:00000000000008dc AT
             forth.s:469    .text:0000000000000988 DUPP
             forth.s:253    .text:0000000000000854 DOLIT
             forth.s:581    .text:0000000000000a3c LSHIFT
             forth.s:542    .text:00000000000009f4 XORR
             forth.s:569    .text:0000000000000a24 RSHIFT
             forth.s:339    .text:00000000000008c8 STORE
             forth.s:518    .text:00000000000009cc ANDD
             forth.s:480    .text:0000000000000998 SWAP
             forth.s:1434   .text:0000000000000fdc MODD
             forth.s:155    .text:0000000000000794 _PAUSE
             forth.s:157    .text:000000000000079a $t
             forth.s:158    .text:000000000000079c PAUSE
             forth.s:160    .text:00000000000007a0 $d
             forth.s:1109   .text:0000000000000d54 TIMER
             forth.s:162    .text:00000000000007a8 PAUSE_LOOP
             forth.s:301    .text:0000000000000896 QBRAN
             forth.s:167    .text:00000000000007c0 PAUSE_EXIT
             forth.s:318    .text:00000000000008aa BRAN
             forth.s:173    .text:00000000000007c8 _ULED
             forth.s:177    .text:00000000000007d0 ULED
             forth.s:186    .text:00000000000007ec ULED_OFF
             forth.s:192    .text:00000000000007f0 $d
             forth.s:193    .text:00000000000007f4 _QRX
             forth.s:196    .text:00000000000007fc QKEY
             forth.s:197    .text:00000000000007fc QRX
             forth.s:216    .text:0000000000000826 $d
             forth.s:217    .text:000000000000082a _TXSTO
             forth.s:220    .text:0000000000000830 TXSTO
             forth.s:221    .text:0000000000000830 EMIT
             forth.s:222    .text:0000000000000830 TECHO
             forth.s:238    .text:0000000000000848 $d
ARM GAS  forth.s 			page 112


             forth.s:239    .text:000000000000084c _NOP
             forth.s:241    .text:0000000000000850 $t
             forth.s:242    .text:0000000000000850 NOP
             forth.s:261    .text:000000000000085e $d
             forth.s:262    .text:0000000000000862 _EXECU
             forth.s:264    .text:000000000000086a $t
             forth.s:265    .text:000000000000086c EXECU
             forth.s:280    .text:0000000000000878 DONXT
             forth.s:287    .text:0000000000000888 NEXT1
             forth.s:307    .text:00000000000008a4 QBRAN1
             forth.s:325    .text:00000000000008b0 $d
             forth.s:326    .text:00000000000008b4 _EXIT
             forth.s:329    .text:00000000000008bc EXIT
             forth.s:330    .text:00000000000008bc $d
             forth.s:336    .text:00000000000008c4 _STORE
             forth.s:338    .text:00000000000008c6 $t
             forth.s:348    .text:00000000000008d4 $d
             forth.s:349    .text:00000000000008d8 _AT
             forth.s:351    .text:00000000000008da $t
             forth.s:359    .text:00000000000008e0 $d
             forth.s:360    .text:00000000000008e4 _CSTOR
             forth.s:363    .text:00000000000008e8 CSTOR
             forth.s:372    .text:00000000000008f4 $d
             forth.s:373    .text:00000000000008f8 _CAT
             forth.s:376    .text:00000000000008fc CAT
             forth.s:383    .text:0000000000000900 $d
             forth.s:384    .text:0000000000000904 _RFROM
             forth.s:387    .text:0000000000000908 RFROM
             forth.s:395    .text:0000000000000912 $d
             forth.s:396    .text:0000000000000916 _RAT
             forth.s:399    .text:000000000000091c RAT
             forth.s:407    .text:0000000000000926 $d
             forth.s:408    .text:000000000000092a _TOR
             forth.s:411    .text:0000000000000930 TOR
             forth.s:418    .text:000000000000093a $d
             forth.s:419    .text:000000000000093e _RPSTOR
             forth.s:421    .text:0000000000000942 $t
             forth.s:422    .text:0000000000000944 RPSTOR
             forth.s:430    .text:000000000000094c $d
             forth.s:431    .text:0000000000000950 _SPSTOR
             forth.s:433    .text:0000000000000954 $t
             forth.s:434    .text:0000000000000954 SPSTOR
             forth.s:442    .text:000000000000095c $d
             forth.s:443    .text:0000000000000960 _SPAT
             forth.s:445    .text:0000000000000964 $t
             forth.s:446    .text:0000000000000964 SPAT
             forth.s:454    .text:000000000000096c $d
             forth.s:455    .text:0000000000000970 _DROP
             forth.s:458    .text:0000000000000978 DROP
             forth.s:465    .text:000000000000097e $d
             forth.s:466    .text:0000000000000982 _DUPP
             forth.s:468    .text:0000000000000986 $t
             forth.s:476    .text:000000000000098e $d
             forth.s:477    .text:0000000000000992 _SWAP
             forth.s:489    .text:00000000000009a0 $d
             forth.s:490    .text:00000000000009a4 _OVER
             forth.s:493    .text:00000000000009ac OVER
ARM GAS  forth.s 			page 113


             forth.s:501    .text:00000000000009b4 $d
             forth.s:502    .text:00000000000009b8 _ZLESS
             forth.s:505    .text:00000000000009bc ZLESS
             forth.s:514    .text:00000000000009c2 $d
             forth.s:515    .text:00000000000009c6 _ANDD
             forth.s:517    .text:00000000000009ca $t
             forth.s:526    .text:00000000000009d6 $d
             forth.s:527    .text:00000000000009da _ORR
             forth.s:530    .text:00000000000009e0 ORR
             forth.s:538    .text:00000000000009ea $d
             forth.s:539    .text:00000000000009ee _XORR
             forth.s:541    .text:00000000000009f2 $t
             forth.s:550    .text:00000000000009fe $d
             forth.s:551    .text:0000000000000a02 _UPLUS
             forth.s:553    .text:0000000000000a06 $t
             forth.s:554    .text:0000000000000a08 UPLUS
             forth.s:565    .text:0000000000000a18 $d
             forth.s:566    .text:0000000000000a1c _RSHIFT
             forth.s:577    .text:0000000000000a2e $d
             forth.s:578    .text:0000000000000a32 _LSHIFT
             forth.s:589    .text:0000000000000a46 $d
             forth.s:590    .text:0000000000000a4a _PLUS
             forth.s:592    .text:0000000000000a4c $t
             forth.s:593    .text:0000000000000a4c PLUS
             forth.s:601    .text:0000000000000a54 $d
             forth.s:602    .text:0000000000000a58 _SUBB
             forth.s:604    .text:0000000000000a5a $t
             forth.s:605    .text:0000000000000a5c SUBB
             forth.s:613    .text:0000000000000a66 $d
             forth.s:614    .text:0000000000000a6a _STAR
             forth.s:616    .text:0000000000000a6c $t
             forth.s:617    .text:0000000000000a6c STAR
             forth.s:625    .text:0000000000000a76 $d
             forth.s:626    .text:0000000000000a7a _UMSTA
             forth.s:628    .text:0000000000000a7e $t
             forth.s:629    .text:0000000000000a80 UMSTA
             forth.s:639    .text:0000000000000a8c $d
             forth.s:640    .text:0000000000000a90 _MSTAR
             forth.s:643    .text:0000000000000a94 MSTAR
             forth.s:653    .text:0000000000000aa0 $d
             forth.s:654    .text:0000000000000aa4 _ONEP
             forth.s:657    .text:0000000000000aa8 ONEP
             forth.s:664    .text:0000000000000aae $d
             forth.s:665    .text:0000000000000ab2 _ONEM
             forth.s:668    .text:0000000000000ab8 ONEM
             forth.s:675    .text:0000000000000abe $d
             forth.s:676    .text:0000000000000ac2 _TWOP
             forth.s:679    .text:0000000000000ac8 TWOP
             forth.s:686    .text:0000000000000ace $d
             forth.s:687    .text:0000000000000ad2 _TWOM
             forth.s:690    .text:0000000000000ad8 TWOM
             forth.s:697    .text:0000000000000ade $d
             forth.s:698    .text:0000000000000ae2 _CELLP
             forth.s:700    .text:0000000000000ae8 $t
             forth.s:701    .text:0000000000000ae8 CELLP
             forth.s:708    .text:0000000000000aee $d
             forth.s:709    .text:0000000000000af2 _CELLM
ARM GAS  forth.s 			page 114


             forth.s:711    .text:0000000000000af8 $t
             forth.s:712    .text:0000000000000af8 CELLM
             forth.s:719    .text:0000000000000afe $d
             forth.s:720    .text:0000000000000b02 _BLANK
             forth.s:723    .text:0000000000000b08 BLANK
             forth.s:731    .text:0000000000000b12 $d
             forth.s:732    .text:0000000000000b16 _CELLS
             forth.s:734    .text:0000000000000b1c $t
             forth.s:735    .text:0000000000000b1c CELLS
             forth.s:742    .text:0000000000000b22 $d
             forth.s:743    .text:0000000000000b26 _CELLSL
             forth.s:745    .text:0000000000000b2c $t
             forth.s:746    .text:0000000000000b2c CELLSL
             forth.s:753    .text:0000000000000b32 $d
             forth.s:754    .text:0000000000000b36 _TWOST
             forth.s:757    .text:0000000000000b3c TWOST
             forth.s:764    .text:0000000000000b42 $d
             forth.s:765    .text:0000000000000b46 _TWOSL
             forth.s:768    .text:0000000000000b4c TWOSL
             forth.s:775    .text:0000000000000b52 $d
             forth.s:776    .text:0000000000000b56 _QDUP
             forth.s:779    .text:0000000000000b5c QDUP
             forth.s:788    .text:0000000000000b66 $d
             forth.s:789    .text:0000000000000b6a _ROT
             forth.s:791    .text:0000000000000b6e $t
             forth.s:792    .text:0000000000000b70 ROT
             forth.s:802    .text:0000000000000b7a $d
             forth.s:803    .text:0000000000000b7e _DDROP
             forth.s:805    .text:0000000000000b84 $t
             forth.s:806    .text:0000000000000b84 DDROP
             forth.s:814    .text:0000000000000b8e $d
             forth.s:815    .text:0000000000000b92 _DDUP
             forth.s:818    .text:0000000000000b98 DDUP
             forth.s:827    .text:0000000000000ba4 $d
             forth.s:828    .text:0000000000000ba8 _DPLUS
             forth.s:831    .text:0000000000000bac DPLUS
             forth.s:843    .text:0000000000000bc0 $d
             forth.s:844    .text:0000000000000bc4 _INVER
             forth.s:846    .text:0000000000000bc8 $t
             forth.s:847    .text:0000000000000bc8 INVER
             forth.s:854    .text:0000000000000bce $d
             forth.s:855    .text:0000000000000bd2 _NEGAT
             forth.s:858    .text:0000000000000bdc NEGAT
             forth.s:865    .text:0000000000000be2 $d
             forth.s:866    .text:0000000000000be6 _ABSS
             forth.s:868    .text:0000000000000bea $t
             forth.s:878    .text:0000000000000bf6 $d
             forth.s:879    .text:0000000000000bfa _ZEQUAL
             forth.s:882    .text:0000000000000c00 ZEQUAL
             forth.s:892    .text:0000000000000c0e $d
             forth.s:893    .text:0000000000000c12 _EQUAL
             forth.s:895    .text:0000000000000c14 $t
             forth.s:896    .text:0000000000000c14 EQUAL
             forth.s:907    .text:0000000000000c24 $d
             forth.s:908    .text:0000000000000c28 _ULESS
             forth.s:911    .text:0000000000000c2c ULESS
             forth.s:922    .text:0000000000000c3c $d
ARM GAS  forth.s 			page 115


             forth.s:923    .text:0000000000000c40 _LESS
             forth.s:925    .text:0000000000000c42 $t
             forth.s:926    .text:0000000000000c44 LESS
             forth.s:937    .text:0000000000000c54 $d
             forth.s:938    .text:0000000000000c58 _GREAT
             forth.s:940    .text:0000000000000c5a $t
             forth.s:941    .text:0000000000000c5c GREAT
             forth.s:952    .text:0000000000000c6c $d
             forth.s:953    .text:0000000000000c70 _MAX
             forth.s:955    .text:0000000000000c74 $t
             forth.s:956    .text:0000000000000c74 MAX
             forth.s:966    .text:0000000000000c80 $d
             forth.s:967    .text:0000000000000c84 _MIN
             forth.s:969    .text:0000000000000c88 $t
             forth.s:970    .text:0000000000000c88 MIN
             forth.s:980    .text:0000000000000c94 $d
             forth.s:981    .text:0000000000000c98 _PSTOR
             forth.s:984    .text:0000000000000c9c PSTOR
             forth.s:995    .text:0000000000000cac $d
             forth.s:996    .text:0000000000000cb0 _DSTOR
             forth.s:999    .text:0000000000000cb4 DSTOR
             forth.s:1010   .text:0000000000000cc8 $d
             forth.s:1011   .text:0000000000000ccc _DAT
             forth.s:1014   .text:0000000000000cd0 DAT
             forth.s:1023   .text:0000000000000cda $d
             forth.s:1024   .text:0000000000000cde _COUNT
             forth.s:1026   .text:0000000000000ce4 $t
             forth.s:1027   .text:0000000000000ce4 COUNT
             forth.s:1036   .text:0000000000000cf0 $d
             forth.s:1037   .text:0000000000000cf4 _DNEGA
             forth.s:1039   .text:0000000000000cfc $t
             forth.s:1040   .text:0000000000000cfc DNEGA
             forth.s:1058   .text:0000000000000d0c DOVAR
             forth.s:1071   .text:0000000000000d18 DOCON
             forth.s:1083   .text:0000000000000d22 $d
             forth.s:1084   .text:0000000000000d26 _SEED
             forth.s:1094   .text:0000000000000d36 $d
             forth.s:1095   .text:0000000000000d3a _MSEC
             forth.s:1098   .text:0000000000000d40 MSEC
             forth.s:1105   .text:0000000000000d4a $d
             forth.s:1106   .text:0000000000000d4e _TIMER
             forth.s:1108   .text:0000000000000d54 $t
             forth.s:1117   .text:0000000000000d5e $d
             forth.s:1118   .text:0000000000000d62 _TBOOT
             forth.s:1120   .text:0000000000000d68 $t
             forth.s:1121   .text:0000000000000d68 TBOOT
             forth.s:1129   .text:0000000000000d72 $d
             forth.s:1130   .text:0000000000000d76 _BASE
             forth.s:1133   .text:0000000000000d7c BASE
             forth.s:1145   .text:0000000000000d86 TEMP
             forth.s:1153   .text:0000000000000d90 $d
             forth.s:1154   .text:0000000000000d94 _SPAN
             forth.s:1165   .text:0000000000000da6 $d
             forth.s:1166   .text:0000000000000daa _INN
             forth.s:1168   .text:0000000000000dae $t
             forth.s:1169   .text:0000000000000db0 INN
             forth.s:1177   .text:0000000000000dba $d
ARM GAS  forth.s 			page 116


             forth.s:1178   .text:0000000000000dbe _NTIB
             forth.s:1189   .text:0000000000000dce $d
             forth.s:1190   .text:0000000000000dd2 _TEVAL
             forth.s:1192   .text:0000000000000dd8 $t
             forth.s:1193   .text:0000000000000dd8 TEVAL
             forth.s:1201   .text:0000000000000de2 $d
             forth.s:1202   .text:0000000000000de6 _HLD
             forth.s:1204   .text:0000000000000dea $t
             forth.s:1213   .text:0000000000000df6 $d
             forth.s:1214   .text:0000000000000dfa _CNTXT
             forth.s:1216   .text:0000000000000e02 $t
             forth.s:1217   .text:0000000000000e04 CNTXT
             forth.s:1218   .text:0000000000000e04 CRRNT
             forth.s:1226   .text:0000000000000e0e $d
             forth.s:1227   .text:0000000000000e12 _CP
             forth.s:1230   .text:0000000000000e18 CPP
             forth.s:1237   .text:0000000000000e22 $d
             forth.s:1238   .text:0000000000000e26 _FCP
             forth.s:1240   .text:0000000000000e2a $t
             forth.s:1241   .text:0000000000000e2c FCP
             forth.s:1249   .text:0000000000000e36 $d
             forth.s:1250   .text:0000000000000e3a _LAST
             forth.s:1253   .text:0000000000000e40 LAST
             forth.s:1260   .text:0000000000000e4a $d
             forth.s:1261   .text:0000000000000e4e _BACKCOLOR
             forth.s:1264   .text:0000000000000e5c BACKCOLOR
             forth.s:1271   .text:0000000000000e66 $d
             forth.s:1272   .text:0000000000000e6a _PENCOLOR
             forth.s:1274   .text:0000000000000e74 $t
             forth.s:1275   .text:0000000000000e74 PENCOLOR
             forth.s:1282   .text:0000000000000e7e $d
             forth.s:1283   .text:0000000000000e82 _FTRACE
             forth.s:1286   .text:0000000000000e8c FTRACE
             forth.s:1297   .text:0000000000000e96 $d
             forth.s:1298   .text:0000000000000e9a _USER_BGN
             forth.s:1301   .text:0000000000000ea8 USER_BEGIN
             forth.s:1305   .text:0000000000000eb0 USR_BGN_ADR
             forth.s:1306   .text:0000000000000eb0 $d
             forth.s:1311   .text:0000000000000eb8 _USER_END
             forth.s:1314   .text:0000000000000ec4 USER_END
             forth.s:1318   .text:0000000000000ecc USER_END_ADR
             forth.s:1319   .text:0000000000000ecc $d
             forth.s:1330   .text:0000000000000ed4 _WITHI
             forth.s:1333   .text:0000000000000edc WITHI
             forth.s:1335   .text:0000000000000ee0 $d
             forth.s:1349   .text:0000000000000f00 _UMMOD
             forth.s:1352   .text:0000000000000f08 UMMOD
             forth.s:1356   .text:0000000000000f12 UMMOD0
             forth.s:1363   .text:0000000000000f22 UMMOD1
             forth.s:1369   .text:0000000000000f2c UMMOD2
             forth.s:1379   .text:0000000000000f38 $d
             forth.s:1380   .text:0000000000000f3c _MSMOD
             forth.s:1382   .text:0000000000000f42 $t
             forth.s:1383   .text:0000000000000f44 MSMOD
             forth.s:1385   .text:0000000000000f48 $d
             forth.s:1394   .text:0000000000000f70 MMOD1
             forth.s:1401   .text:0000000000000f8c MMOD2
ARM GAS  forth.s 			page 117


             forth.s:1409   .text:0000000000000fac MMOD3
             forth.s:1416   .text:0000000000000fb4 _SLMOD
             forth.s:1419   .text:0000000000000fbc SLMOD
             forth.s:1421   .text:0000000000000fc0 $d
             forth.s:1431   .text:0000000000000fd8 _MODD
             forth.s:1433   .text:0000000000000fdc $t
             forth.s:1436   .text:0000000000000fe0 $d
             forth.s:1444   .text:0000000000000ff0 _SLASH
             forth.s:1446   .text:0000000000000ff2 $t
             forth.s:1447   .text:0000000000000ff4 SLASH
             forth.s:1449   .text:0000000000000ff8 $d
             forth.s:1458   .text:000000000000100c _SSMOD
             forth.s:1460   .text:0000000000001012 $t
             forth.s:1461   .text:0000000000001014 SSMOD
             forth.s:1463   .text:0000000000001018 $d
             forth.s:1473   .text:0000000000001030 _STASL
             forth.s:1476   .text:0000000000001034 STASL
             forth.s:1478   .text:0000000000001038 $d
             forth.s:1490   .text:000000000000104c _ALGND
             forth.s:1492   .text:0000000000001054 $t
             forth.s:1493   .text:0000000000001054 ALGND
             forth.s:1502   .text:0000000000001064 $d
             forth.s:1503   .text:0000000000001068 _TCHAR
             forth.s:1505   .text:000000000000106e $t
             forth.s:1506   .text:0000000000001070 TCHAR
             forth.s:1508   .text:0000000000001074 $d
             forth.s:1518   .text:00000000000010ac TCHA1
             forth.s:1525   .text:00000000000010b4 _DEPTH
             forth.s:1527   .text:00000000000010ba $t
             forth.s:1528   .text:00000000000010bc DEPTH
             forth.s:1538   .text:00000000000010d4 $d
             forth.s:1539   .text:00000000000010d8 _PICK
             forth.s:1542   .text:00000000000010e0 PICK
             forth.s:1544   .text:00000000000010e4 $d
             forth.s:1558   .text:0000000000001100 _HERE
             forth.s:1561   .text:0000000000001108 HERE
             forth.s:1563   .text:000000000000110c $d
             forth.s:1571   .text:000000000000111c _PAD
             forth.s:1573   .text:0000000000001120 $t
             forth.s:1574   .text:0000000000001120 PAD
             forth.s:1576   .text:0000000000001124 $d
             forth.s:1585   .text:000000000000113c _TIB
             forth.s:1587   .text:0000000000001140 $t
             forth.s:1588   .text:0000000000001140 TIB
             forth.s:1596   .text:000000000000114a $d
             forth.s:1597   .text:000000000000114e _ATEXE
             forth.s:1600   .text:0000000000001158 ATEXE
             forth.s:1612   .text:000000000000116c $d
             forth.s:1613   .text:0000000000001170 _CMOVE
             forth.s:1615   .text:0000000000001176 $t
             forth.s:1616   .text:0000000000001178 CMOVE
             forth.s:1623   .text:000000000000118a CMOV1
             forth.s:1620   .text:0000000000001182 CMOV0
             forth.s:1628   .text:0000000000001194 CMOV2
             forth.s:1635   .text:000000000000119c $d
             forth.s:1636   .text:00000000000011a0 _MOVE
             forth.s:1639   .text:00000000000011a8 MOVE
ARM GAS  forth.s 			page 118


             forth.s:1647   .text:00000000000011be MOVE1
             forth.s:1644   .text:00000000000011b6 MOVE0
             forth.s:1652   .text:00000000000011c8 MOVE2
             forth.s:1659   .text:00000000000011d0 $d
             forth.s:1660   .text:00000000000011d4 _FILL
             forth.s:1663   .text:00000000000011dc FILL
             forth.s:1666   .text:00000000000011e4 FILL0
             forth.s:1669   .text:00000000000011e8 FILL1
             forth.s:1675   .text:00000000000011f6 FILL2
             forth.s:1682   .text:00000000000011fe $d
             forth.s:1683   .text:0000000000001202 _PACKS
             forth.s:1686   .text:000000000000120c PACKS
             forth.s:1688   .text:0000000000001210 $d
             forth.s:1715   .text:0000000000001268 _DIGIT
             forth.s:1717   .text:000000000000126e $t
             forth.s:1718   .text:0000000000001270 DIGIT
             forth.s:1720   .text:0000000000001274 $d
             forth.s:1734   .text:00000000000012a8 _EXTRC
             forth.s:1736   .text:00000000000012b0 $t
             forth.s:1737   .text:00000000000012b0 EXTRC
             forth.s:1739   .text:00000000000012b4 $d
             forth.s:1750   .text:00000000000012d4 _BDIGS
             forth.s:1753   .text:00000000000012d8 BDIGS
             forth.s:1755   .text:00000000000012dc $d
             forth.s:1764   .text:00000000000012f0 _HOLD
             forth.s:1767   .text:00000000000012f8 HOLD
             forth.s:1769   .text:00000000000012fc $d
             forth.s:1782   .text:0000000000001320 _DIG
             forth.s:1784   .text:0000000000001322 $t
             forth.s:1785   .text:0000000000001324 DIG
             forth.s:1787   .text:0000000000001328 $d
             forth.s:1797   .text:0000000000001340 _DIGS
             forth.s:1800   .text:0000000000001344 DIGS
             forth.s:1802   .text:0000000000001348 DIGS1
             forth.s:1803   .text:0000000000001348 $d
             forth.s:1807   .text:0000000000001360 DIGS2
             forth.s:1814   .text:0000000000001368 _SIGN
             forth.s:1817   .text:0000000000001370 SIGN
             forth.s:1819   .text:0000000000001374 $d
             forth.s:1823   .text:000000000000138c SIGN1
             forth.s:1830   .text:0000000000001394 _EDIGS
             forth.s:1833   .text:0000000000001398 EDIGS
             forth.s:1835   .text:000000000000139c $d
             forth.s:1850   .text:00000000000013b8 STRR
             forth.s:1851   .text:00000000000013b8 $t
             forth.s:1852   .text:00000000000013bc $d
             forth.s:1866   .text:00000000000013e4 _HEX
             forth.s:1868   .text:00000000000013e8 $t
             forth.s:1869   .text:00000000000013e8 HEX
             forth.s:1871   .text:00000000000013ec $d
             forth.s:1880   .text:0000000000001404 _DECIM
             forth.s:1882   .text:000000000000140c $t
             forth.s:1883   .text:000000000000140c DECIM
             forth.s:1885   .text:0000000000001410 $d
             forth.s:1897   .text:0000000000001428 _DIGTQ
             forth.s:1900   .text:0000000000001430 DIGTQ
             forth.s:1902   .text:0000000000001434 $d
ARM GAS  forth.s 			page 119


             forth.s:1915   .text:000000000000147c DGTQ1
             forth.s:1925   .text:0000000000001490 _NUMBQ
             forth.s:1927   .text:0000000000001498 $t
             forth.s:1928   .text:0000000000001498 NUMBQ
             forth.s:1930   .text:000000000000149c $d
             forth.s:1946   .text:00000000000014e8 NUMQ1
             forth.s:1994   .text:00000000000015b0 NUMQ6
             forth.s:1962   .text:000000000000152c NUMQ2
             forth.s:1986   .text:0000000000001594 NUMQ4
             forth.s:1983   .text:0000000000001588 NUMQ3
             forth.s:1992   .text:00000000000015ac NUMQ5
             forth.s:2009   .text:00000000000015cc _KEY
             forth.s:2011   .text:00000000000015d0 $t
             forth.s:2012   .text:00000000000015d0 KEY
             forth.s:2014   .text:00000000000015d4 KEY1
             forth.s:2015   .text:00000000000015d4 $d
             forth.s:2023   .text:00000000000015e8 _SPACE
             forth.s:2025   .text:00000000000015ee $t
             forth.s:2026   .text:00000000000015f0 SPACE
             forth.s:2028   .text:00000000000015f4 $d
             forth.s:2036   .text:0000000000001604 _SPACS
             forth.s:2039   .text:000000000000160c SPACS
             forth.s:2041   .text:0000000000001610 $d
             forth.s:2047   .text:000000000000162c CHAR2
             forth.s:2045   .text:0000000000001628 CHAR1
             forth.s:2055   .text:000000000000163c _TYPEE
             forth.s:2058   .text:0000000000001644 TYPEE
             forth.s:2060   .text:0000000000001648 $d
             forth.s:2066   .text:0000000000001660 TYPE2
             forth.s:2062   .text:0000000000001654 TYPE1
             forth.s:2075   .text:0000000000001674 _CR
             forth.s:2078   .text:0000000000001678 CR
             forth.s:2080   .text:000000000000167c $d
             forth.s:2094   .text:0000000000001698 DOSTR
             forth.s:2095   .text:0000000000001698 $t
             forth.s:2097   .text:000000000000169c $d
             forth.s:2116   .text:00000000000016c4 STRQP
             forth.s:2117   .text:00000000000016c4 $t
             forth.s:2118   .text:00000000000016c8 $d
             forth.s:2128   .text:00000000000016d0 DOTST
             forth.s:2129   .text:00000000000016d0 $t
             forth.s:2130   .text:00000000000016d4 $d
             forth.s:2141   .text:00000000000016e0 DOTQP
             forth.s:2142   .text:00000000000016e0 $t
             forth.s:2143   .text:00000000000016e4 $d
             forth.s:2151   .text:00000000000016f4 _DOTR
             forth.s:2154   .text:00000000000016f8 DOTR
             forth.s:2156   .text:00000000000016fc $d
             forth.s:2169   .text:0000000000001720 _UDOTR
             forth.s:2171   .text:0000000000001724 $t
             forth.s:2172   .text:0000000000001724 UDOTR
             forth.s:2174   .text:0000000000001728 $d
             forth.s:2189   .text:0000000000001754 _UDOT
             forth.s:2192   .text:0000000000001758 UDOT
             forth.s:2194   .text:000000000000175c $d
             forth.s:2205   .text:0000000000001778 _DOT
             forth.s:2207   .text:000000000000177a $t
ARM GAS  forth.s 			page 120


             forth.s:2208   .text:000000000000177c DOT
             forth.s:2210   .text:0000000000001780 $d
             forth.s:2217   .text:00000000000017a4 DOT1
             forth.s:2227   .text:00000000000017b8 _QUEST
             forth.s:2229   .text:00000000000017ba $t
             forth.s:2230   .text:00000000000017bc QUEST
             forth.s:2232   .text:00000000000017c0 $d
             forth.s:2246   .text:00000000000017cc PARS
             forth.s:2247   .text:00000000000017cc $t
             forth.s:2248   .text:00000000000017d0 $d
             forth.s:2314   .text:00000000000018e0 PARS8
             forth.s:2278   .text:0000000000001854 PARS3
             forth.s:2261   .text:000000000000180c PARS1
             forth.s:2276   .text:0000000000001850 PARS2
             forth.s:2282   .text:0000000000001860 PARS4
             forth.s:2294   .text:0000000000001890 PARS5
             forth.s:2301   .text:00000000000018b4 PARS6
             forth.s:2307   .text:00000000000018c8 PARS7
             forth.s:2324   .text:00000000000018f4 _PARSE
             forth.s:2326   .text:00000000000018fa $t
             forth.s:2327   .text:00000000000018fc PARSE
             forth.s:2329   .text:0000000000001900 $d
             forth.s:2349   .text:0000000000001940 _DOTPR
             forth.s:2352   .text:0000000000001944 DOTPR
             forth.s:2354   .text:0000000000001948 $d
             forth.s:2363   .text:0000000000001960 _PAREN
             forth.s:2365   .text:0000000000001962 $t
             forth.s:2366   .text:0000000000001964 PAREN
             forth.s:2368   .text:0000000000001968 $d
             forth.s:2377   .text:0000000000001980 _BKSLA
             forth.s:2379   .text:0000000000001982 $t
             forth.s:2380   .text:0000000000001984 BKSLA
             forth.s:2382   .text:0000000000001988 $d
             forth.s:2392   .text:00000000000019a0 _CHAR
             forth.s:2395   .text:00000000000019a8 CHAR
             forth.s:2397   .text:00000000000019ac $d
             forth.s:2407   .text:00000000000019c4 _WORDD
             forth.s:2410   .text:00000000000019cc WORDD
             forth.s:2412   .text:00000000000019d0 $d
             forth.s:2422   .text:00000000000019e8 _TOKEN
             forth.s:2424   .text:00000000000019ee $t
             forth.s:2425   .text:00000000000019f0 TOKEN
             forth.s:2427   .text:00000000000019f4 $d
             forth.s:2438   .text:0000000000001a04 _NAMET
             forth.s:2440   .text:0000000000001a0a $t
             forth.s:2441   .text:0000000000001a0c NAMET
             forth.s:2443   .text:0000000000001a10 $d
             forth.s:2459   .text:0000000000001a30 _SAMEQ
             forth.s:2461   .text:0000000000001a36 $t
             forth.s:2462   .text:0000000000001a38 SAMEQ
             forth.s:2464   .text:0000000000001a3c $d
             forth.s:2481   .text:0000000000001a84 SAME2
             forth.s:2466   .text:0000000000001a48 SAME1
             forth.s:2496   .text:0000000000001a98 FIND
             forth.s:2497   .text:0000000000001a98 $t
             forth.s:2498   .text:0000000000001a9c $d
             forth.s:2505   .text:0000000000001ab8 FIND1
ARM GAS  forth.s 			page 121


             forth.s:2525   .text:0000000000001b10 FIND6
             forth.s:2518   .text:0000000000001af8 FIND2
             forth.s:2523   .text:0000000000001b08 FIND3
             forth.s:2532   .text:0000000000001b28 FIND4
             forth.s:2538   .text:0000000000001b44 FIND5
             forth.s:2553   .text:0000000000001b6c _NAMEQ
             forth.s:2555   .text:0000000000001b72 $t
             forth.s:2556   .text:0000000000001b74 NAMEQ
             forth.s:2558   .text:0000000000001b78 $d
             forth.s:2573   .text:0000000000001b88 BKSP
             forth.s:2574   .text:0000000000001b88 $t
             forth.s:2575   .text:0000000000001b8c $d
             forth.s:2589   .text:0000000000001bd0 BACK1
             forth.s:2599   .text:0000000000001bd4 TAP
             forth.s:2600   .text:0000000000001bd4 $t
             forth.s:2601   .text:0000000000001bd8 $d
             forth.s:2615   .text:0000000000001bf0 KTAP
             forth.s:2616   .text:0000000000001bf0 TTAP
             forth.s:2617   .text:0000000000001bf0 $t
             forth.s:2618   .text:0000000000001bf4 $d
             forth.s:2632   .text:0000000000001c34 KTAP2
             forth.s:2629   .text:0000000000001c2c KTAP1
             forth.s:2643   .text:0000000000001c4c _ACCEP
             forth.s:2646   .text:0000000000001c54 ACCEP
             forth.s:2648   .text:0000000000001c58 $d
             forth.s:2651   .text:0000000000001c64 ACCP1
             forth.s:2667   .text:0000000000001cac ACCP4
             forth.s:2663   .text:0000000000001ca0 ACCP2
             forth.s:2665   .text:0000000000001ca4 ACCP3
             forth.s:2677   .text:0000000000001cc0 _QUERY
             forth.s:2679   .text:0000000000001cc6 $t
             forth.s:2680   .text:0000000000001cc8 QUERY
             forth.s:2682   .text:0000000000001ccc $d
             forth.s:2700   .text:0000000000001d00 _ABORT
             forth.s:2702   .text:0000000000001d06 $t
             forth.s:2703   .text:0000000000001d08 ABORT
             forth.s:2705   .text:0000000000001d0c ABORT1
             forth.s:2706   .text:0000000000001d0c $d
             forth.s:2837   .text:0000000000001e90 PRESE
             forth.s:2850   .text:0000000000001eb0 QUIT
             forth.s:2722   .text:0000000000001d34 ABORQ
             forth.s:2723   .text:0000000000001d34 $t
             forth.s:2724   .text:0000000000001d38 $d
             forth.s:2739   .text:0000000000001d5c _INTER
             forth.s:2741   .text:0000000000001d68 $t
             forth.s:2744   .text:0000000000001d6c $d
             forth.s:2753   .text:0000000000001da8 INTE1
             forth.s:2750   .text:0000000000001d9e $t
             forth.s:2751   .text:0000000000001da0 $d
             forth.s:2757   .text:0000000000001db8 INTE2
             forth.s:2764   .text:0000000000001dc0 _LBRAC
             forth.s:2766   .text:0000000000001dc2 $t
             forth.s:2767   .text:0000000000001dc4 LBRAC
             forth.s:2769   .text:0000000000001dc8 $d
             forth.s:2778   .text:0000000000001de0 _DOTOK
             forth.s:2780   .text:0000000000001de4 $t
             forth.s:2781   .text:0000000000001de4 DOTOK
ARM GAS  forth.s 			page 122


             forth.s:2783   .text:0000000000001de8 $d
             forth.s:2789   .text:0000000000001e0c DOTO1
             forth.s:2790   .text:0000000000001e0c $d
             forth.s:2797   .text:0000000000001e18 _QSTAC
             forth.s:2800   .text:0000000000001e20 QSTAC
             forth.s:2802   .text:0000000000001e24 $d
             forth.s:2804   .text:0000000000001e3a $t
             forth.s:2805   .text:0000000000001e3c $d
             forth.s:2811   .text:0000000000001e44 _EVAL
             forth.s:2816   .text:0000000000001e50 EVAL1
             forth.s:2817   .text:0000000000001e50 $d
             forth.s:2825   .text:0000000000001e78 EVAL2
             forth.s:2834   .text:0000000000001e88 _PRESE
             forth.s:2839   .text:0000000000001e94 $d
             forth.s:2847   .text:0000000000001ea8 _QUIT
             forth.s:2851   .text:0000000000001eb0 $d
             forth.s:2853   .text:0000000000001ebc QUIT1
             forth.s:2855   .text:0000000000001ec0 QUIT2
             forth.s:2861   .text:0000000000001ed4 _FORGET
             forth.s:2864   .text:0000000000001edc FORGET
             forth.s:2866   .text:0000000000001ee0 $d
             forth.s:3315   .text:0000000000002388 OVERT
             forth.s:2891   .text:0000000000001f28 $d
             forth.s:2892   .text:0000000000001f2c _TICK
             forth.s:2894   .text:0000000000001f2e $t
             forth.s:2895   .text:0000000000001f30 TICK
             forth.s:2897   .text:0000000000001f34 $d
             forth.s:2901   .text:0000000000001f48 TICK1
             forth.s:2908   .text:0000000000001f50 _ALLOT
             forth.s:2910   .text:0000000000001f56 $t
             forth.s:2911   .text:0000000000001f58 ALLOT
             forth.s:2913   .text:0000000000001f5c $d
             forth.s:2921   .text:0000000000001f6c _COMMA
             forth.s:2922   .text:0000000000001f6e $t
             forth.s:2923   .text:0000000000001f70 COMMA
             forth.s:2925   .text:0000000000001f74 $d
             forth.s:2936   .text:0000000000001f90 $d
             forth.s:2937   .text:0000000000001f94 _BCOMP
             forth.s:2939   .text:0000000000001f9e $t
             forth.s:2940   .text:0000000000001fa0 BCOMP
             forth.s:2942   .text:0000000000001fa4 $d
             forth.s:2950   .text:0000000000001fb4 _COMPI
             forth.s:2952   .text:0000000000001fbc $t
             forth.s:2953   .text:0000000000001fbc COMPI
             forth.s:2955   .text:0000000000001fc0 $d
             forth.s:2969   .text:0000000000001fec _LITER
             forth.s:2971   .text:0000000000001ff4 $t
             forth.s:2972   .text:0000000000001ff4 LITER
             forth.s:2974   .text:0000000000001ff8 $d
             forth.s:3359   .text:00000000000023e4 CALLC
             forth.s:2985   .text:000000000000200c STRCQ
             forth.s:2986   .text:000000000000200c $t
             forth.s:2987   .text:0000000000002010 $d
             forth.s:3006   .text:0000000000002048 _FOR
             forth.s:3008   .text:000000000000204c $t
             forth.s:3009   .text:000000000000204c FOR
             forth.s:3011   .text:0000000000002050 $d
ARM GAS  forth.s 			page 123


             forth.s:3019   .text:0000000000002068 _BEGIN
             forth.s:3021   .text:000000000000206e $t
             forth.s:3022   .text:0000000000002070 BEGIN
             forth.s:3024   .text:0000000000002074 $d
             forth.s:3030   .text:000000000000207c $d
             forth.s:3031   .text:0000000000002080 _FNEXT
             forth.s:3034   .text:0000000000002088 FNEXT
             forth.s:3036   .text:000000000000208c $d
             forth.s:3044   .text:00000000000020a4 _UNTIL
             forth.s:3046   .text:00000000000020aa $t
             forth.s:3047   .text:00000000000020ac UNTIL
             forth.s:3049   .text:00000000000020b0 $d
             forth.s:3057   .text:00000000000020c8 _AGAIN
             forth.s:3059   .text:00000000000020ce $t
             forth.s:3060   .text:00000000000020d0 AGAIN
             forth.s:3062   .text:00000000000020d4 $d
             forth.s:3070   .text:00000000000020ec _IFF
             forth.s:3073   .text:00000000000020f0 IFF
             forth.s:3075   .text:00000000000020f4 $d
             forth.s:3086   .text:000000000000211c _AHEAD
             forth.s:3088   .text:0000000000002122 $t
             forth.s:3089   .text:0000000000002124 AHEAD
             forth.s:3091   .text:0000000000002128 $d
             forth.s:3102   .text:0000000000002150 _REPEA
             forth.s:3105   .text:0000000000002158 REPEA
             forth.s:3107   .text:000000000000215c $d
             forth.s:3117   .text:0000000000002174 _THENN
             forth.s:3120   .text:000000000000217c THENN
             forth.s:3122   .text:0000000000002180 $d
             forth.s:3131   .text:0000000000002194 _AFT
             forth.s:3133   .text:0000000000002198 $t
             forth.s:3134   .text:0000000000002198 AFT
             forth.s:3136   .text:000000000000219c $d
             forth.s:3146   .text:00000000000021b4 _ELSEE
             forth.s:3149   .text:00000000000021bc ELSEE
             forth.s:3151   .text:00000000000021c0 $d
             forth.s:3160   .text:00000000000021d4 _WHILE
             forth.s:3162   .text:00000000000021da $t
             forth.s:3163   .text:00000000000021dc WHILE
             forth.s:3165   .text:00000000000021e0 $d
             forth.s:3173   .text:00000000000021f0 _ABRTQ
             forth.s:3176   .text:00000000000021f8 ABRTQ
             forth.s:3178   .text:00000000000021fc $d
             forth.s:3186   .text:0000000000002214 _STRQ
             forth.s:3189   .text:0000000000002218 STRQ
             forth.s:3191   .text:000000000000221c $d
             forth.s:3199   .text:0000000000002234 _DOTQ
             forth.s:3202   .text:0000000000002238 DOTQ
             forth.s:3204   .text:000000000000223c $d
             forth.s:3215   .text:0000000000002254 _UNIQU
             forth.s:3217   .text:000000000000225c $t
             forth.s:3218   .text:000000000000225c UNIQU
             forth.s:3220   .text:0000000000002260 $d
             forth.s:3227   .text:0000000000002288 UNIQ1
             forth.s:3224   .text:000000000000227c $d
             forth.s:3238   .text:0000000000002290 SNAME
             forth.s:3239   .text:0000000000002290 $t
ARM GAS  forth.s 			page 124


             forth.s:3240   .text:0000000000002294 $d
             forth.s:3256   .text:00000000000022d8 SNAM1
             forth.s:3266   .text:00000000000022ec _SCOMP
             forth.s:3269   .text:00000000000022f8 SCOMP
             forth.s:3271   .text:00000000000022fc $d
             forth.s:3283   .text:0000000000002334 SCOM2
             forth.s:3280   .text:000000000000232c SCOM1
             forth.s:3288   .text:0000000000002348 SCOM3
             forth.s:3295   .text:0000000000002350 COLON_ABORT
             forth.s:3296   .text:0000000000002350 $t
             forth.s:3297   .text:0000000000002354 $d
             forth.s:3312   .text:0000000000002380 _OVERT
             forth.s:3314   .text:0000000000002386 $t
             forth.s:3317   .text:000000000000238c $d
             forth.s:3327   .text:00000000000023a4 _SEMIS
             forth.s:3329   .text:00000000000023a6 $t
             forth.s:3330   .text:00000000000023a8 SEMIS
             forth.s:3332   .text:00000000000023ac $d
             forth.s:3342   .text:00000000000023c8 _RBRAC
             forth.s:3344   .text:00000000000023ca $t
             forth.s:3345   .text:00000000000023cc RBRAC
             forth.s:3347   .text:00000000000023d0 $d
             forth.s:3360   .text:00000000000023e4 $t
             forth.s:3361   .text:00000000000023e8 $d
             forth.s:3371   .text:0000000000002400 _COLON
             forth.s:3373   .text:0000000000002402 $t
             forth.s:3374   .text:0000000000002404 COLON
             forth.s:3376   .text:0000000000002408 $d
             forth.s:3386   .text:0000000000002420 _IMMED
             forth.s:3388   .text:000000000000242a $t
             forth.s:3389   .text:000000000000242c IMMED
             forth.s:3391   .text:0000000000002430 $d
             forth.s:3408   .text:000000000000245c _CONST
             forth.s:3411   .text:0000000000002468 CONST
             forth.s:3413   .text:000000000000246c $d
             forth.s:3424   .text:000000000000249c $t
             forth.s:3428   .text:000000000000249c DODOES
             forth.s:3430   .text:00000000000024a0 $d
             forth.s:3443   .text:00000000000024c4 $d
             forth.s:3444   .text:00000000000024c8 _DOES
             forth.s:3446   .text:00000000000024ce $t
             forth.s:3447   .text:00000000000024d0 DOES
             forth.s:3449   .text:00000000000024d4 $d
             forth.s:3463   .text:0000000000002504 _DEFERAT
             forth.s:3466   .text:000000000000250c DEFERAT
             forth.s:3468   .text:0000000000002510 $d
             forth.s:3477   .text:0000000000002528 _DEFERSTO
             forth.s:3480   .text:0000000000002530 DEFERSTO
             forth.s:3482   .text:0000000000002534 $d
             forth.s:3492   .text:0000000000002550 _DEFER
             forth.s:3494   .text:0000000000002556 $t
             forth.s:3495   .text:0000000000002558 DEFER
             forth.s:3497   .text:000000000000255c $d
             forth.s:3520   .text:00000000000025a8 CREAT
             forth.s:3508   .text:0000000000002590 DEFER_NOP
             forth.s:3509   .text:0000000000002590 $t
             forth.s:3510   .text:0000000000002594 $d
ARM GAS  forth.s 			page 125


             forth.s:3517   .text:00000000000025a0 _CREAT
             forth.s:3522   .text:00000000000025ac $d
             forth.s:3534   .text:00000000000025d0 _VARIA
             forth.s:3537   .text:00000000000025dc VARIA
             forth.s:3539   .text:00000000000025e0 $d
             forth.s:3552   .text:0000000000002604 _TRACE
             forth.s:3554   .text:000000000000260a $t
             forth.s:3555   .text:000000000000260c TRACE
             forth.s:3557   .text:0000000000002610 $d
             forth.s:3564   .text:0000000000002620 _DBG_PRT
             forth.s:3566   .text:0000000000002628 DBG_PRT
             forth.s:3567   .text:0000000000002628 $t
             forth.s:3568   .text:000000000000262c $d
             forth.s:3669   .text:0000000000002758 TNAME
             forth.s:3584   .text:000000000000264c DMP
             forth.s:3585   .text:000000000000264c $t
             forth.s:3586   .text:0000000000002650 $d
             forth.s:3598   .text:0000000000002688 PDUM2
             forth.s:3592   .text:0000000000002670 PDUM1
             forth.s:3606   .text:0000000000002694 $d
             forth.s:3607   .text:0000000000002698 _DUMP
             forth.s:3610   .text:00000000000026a0 DUMP
             forth.s:3612   .text:00000000000026a4 $d
             forth.s:3630   .text:00000000000026f4 DUMP4
             forth.s:3620   .text:00000000000026cc DUMP1
             forth.s:3632   .text:00000000000026fc DUMP3
             forth.s:3643   .text:0000000000002714 _DOTS
             forth.s:3647   .text:0000000000002718 DOTS
             forth.s:3649   .text:000000000000271c $d
             forth.s:3657   .text:000000000000273c DOTS2
             forth.s:3653   .text:0000000000002730 DOTS1
             forth.s:3666   .text:0000000000002750 _TNAME
             forth.s:3668   .text:0000000000002756 $t
             forth.s:3671   .text:000000000000275c $d
             forth.s:3674   .text:0000000000002768 TNAM1
             forth.s:3685   .text:000000000000279c TNAM2
             forth.s:3694   .text:00000000000027ac _DOTID
             forth.s:3696   .text:00000000000027b0 $t
             forth.s:3697   .text:00000000000027b0 DOTID
             forth.s:3699   .text:00000000000027b4 $d
             forth.s:3706   .text:00000000000027d8 DOTI1
             forth.s:3707   .text:00000000000027e6 $t
             forth.s:3708   .text:00000000000027e8 $d
             forth.s:3710   *ABS*:0000000000000000 WANT_SEE
             forth.s:3790   .text:00000000000027f0 _WORDS
             forth.s:3792   .text:00000000000027f6 $t
             forth.s:3793   .text:00000000000027f8 WORDS
             forth.s:3795   .text:00000000000027fc $d
             forth.s:3798   .text:0000000000002808 WORS1
             forth.s:3807   .text:0000000000002830 WORS2
             forth.s:3820   .text:0000000000002834 VERSN
             forth.s:3821   .text:0000000000002834 $t
             forth.s:3822   .text:0000000000002838 $d
             forth.s:3829   .text:0000000000002848 _HI
             forth.s:3835   .text:0000000000002850 $d
             forth.s:3836   .text:000000000000286a $t
             forth.s:3837   .text:000000000000286c $d
ARM GAS  forth.s 			page 126


             forth.s:3866   .text:00000000000028d0 COLD1
             forth.s:3867   .text:00000000000028d0 $d
             forth.s:3878   .text:0000000000002910 COLD2
             forth.s:3881   .text:0000000000002910 $d
             forth.s:3884   .text:0000000000002914 $d
              init.s:166    .text:000000000000001f $d
              init.s:166    .text:0000000000000020 $t
             tvout.s:260    .text:00000000000004e7 $d
             tvout.s:260    .text:00000000000004e8 $t
             forth.s:124    .text:000000000000071d $d
             forth.s:124    .text:000000000000071e $t
             forth.s:175    .text:00000000000007cd $d
             forth.s:175    .text:00000000000007ce $t
             forth.s:195    .text:00000000000007f9 $d
             forth.s:195    .text:00000000000007fa $t
             forth.s:219    .text:000000000000082f $d
             forth.s:219    .text:0000000000000830 $t
             forth.s:328    .text:00000000000008b9 $d
             forth.s:328    .text:00000000000008ba $t
             forth.s:362    .text:00000000000008e7 $d
             forth.s:362    .text:00000000000008e8 $t
             forth.s:375    .text:00000000000008fb $d
             forth.s:375    .text:00000000000008fc $t
             forth.s:386    .text:0000000000000907 $d
             forth.s:386    .text:0000000000000908 $t
             forth.s:398    .text:0000000000000919 $d
             forth.s:398    .text:000000000000091a $t
             forth.s:410    .text:000000000000092d $d
             forth.s:410    .text:000000000000092e $t
             forth.s:457    .text:0000000000000975 $d
             forth.s:457    .text:0000000000000976 $t
             forth.s:479    .text:0000000000000997 $d
             forth.s:479    .text:0000000000000998 $t
             forth.s:492    .text:00000000000009a9 $d
             forth.s:492    .text:00000000000009aa $t
             forth.s:504    .text:00000000000009bb $d
             forth.s:504    .text:00000000000009bc $t
             forth.s:529    .text:00000000000009dd $d
             forth.s:529    .text:00000000000009de $t
             forth.s:568    .text:0000000000000a23 $d
             forth.s:568    .text:0000000000000a24 $t
             forth.s:580    .text:0000000000000a39 $d
             forth.s:580    .text:0000000000000a3a $t
             forth.s:642    .text:0000000000000a93 $d
             forth.s:642    .text:0000000000000a94 $t
             forth.s:656    .text:0000000000000aa7 $d
             forth.s:656    .text:0000000000000aa8 $t
             forth.s:667    .text:0000000000000ab5 $d
             forth.s:667    .text:0000000000000ab6 $t
             forth.s:678    .text:0000000000000ac5 $d
             forth.s:678    .text:0000000000000ac6 $t
             forth.s:689    .text:0000000000000ad5 $d
             forth.s:689    .text:0000000000000ad6 $t
             forth.s:722    .text:0000000000000b05 $d
             forth.s:722    .text:0000000000000b06 $t
             forth.s:756    .text:0000000000000b39 $d
             forth.s:756    .text:0000000000000b3a $t
ARM GAS  forth.s 			page 127


             forth.s:767    .text:0000000000000b49 $d
             forth.s:767    .text:0000000000000b4a $t
             forth.s:778    .text:0000000000000b5b $d
             forth.s:778    .text:0000000000000b5c $t
             forth.s:817    .text:0000000000000b97 $d
             forth.s:817    .text:0000000000000b98 $t
             forth.s:830    .text:0000000000000bab $d
             forth.s:830    .text:0000000000000bac $t
             forth.s:857    .text:0000000000000bd9 $d
             forth.s:857    .text:0000000000000bda $t
             forth.s:881    .text:0000000000000bfd $d
             forth.s:881    .text:0000000000000bfe $t
             forth.s:910    .text:0000000000000c2b $d
             forth.s:910    .text:0000000000000c2c $t
             forth.s:983    .text:0000000000000c9b $d
             forth.s:983    .text:0000000000000c9c $t
             forth.s:998    .text:0000000000000cb3 $d
             forth.s:998    .text:0000000000000cb4 $t
             forth.s:1013   .text:0000000000000ccf $d
             forth.s:1013   .text:0000000000000cd0 $t
             forth.s:1086   .text:0000000000000d2b $d
             forth.s:1086   .text:0000000000000d2c $t
             forth.s:1097   .text:0000000000000d3f $d
             forth.s:1097   .text:0000000000000d40 $t
             forth.s:1132   .text:0000000000000d7b $d
             forth.s:1132   .text:0000000000000d7c $t
             forth.s:1156   .text:0000000000000d99 $d
             forth.s:1156   .text:0000000000000d9a $t
             forth.s:1180   .text:0000000000000dc3 $d
             forth.s:1180   .text:0000000000000dc4 $t
             forth.s:1229   .text:0000000000000e15 $d
             forth.s:1229   .text:0000000000000e16 $t
             forth.s:1252   .text:0000000000000e3f $d
             forth.s:1252   .text:0000000000000e40 $t
             forth.s:1263   .text:0000000000000e59 $d
             forth.s:1263   .text:0000000000000e5a $t
             forth.s:1285   .text:0000000000000e89 $d
             forth.s:1285   .text:0000000000000e8a $t
             forth.s:1300   .text:0000000000000ea5 $d
             forth.s:1300   .text:0000000000000ea6 $t
             forth.s:1313   .text:0000000000000ec1 $d
             forth.s:1313   .text:0000000000000ec2 $t
             forth.s:1332   .text:0000000000000edb $d
             forth.s:1332   .text:0000000000000edc $t
             forth.s:1351   .text:0000000000000f07 $d
             forth.s:1351   .text:0000000000000f08 $t
             forth.s:1418   .text:0000000000000fb9 $d
             forth.s:1418   .text:0000000000000fba $t
             forth.s:1475   .text:0000000000001033 $d
             forth.s:1475   .text:0000000000001034 $t
             forth.s:1541   .text:00000000000010dd $d
             forth.s:1541   .text:00000000000010de $t
             forth.s:1560   .text:0000000000001105 $d
             forth.s:1560   .text:0000000000001106 $t
             forth.s:1599   .text:0000000000001157 $d
             forth.s:1599   .text:0000000000001158 $t
             forth.s:1638   .text:00000000000011a5 $d
ARM GAS  forth.s 			page 128


             forth.s:1638   .text:00000000000011a6 $t
             forth.s:1662   .text:00000000000011d9 $d
             forth.s:1662   .text:00000000000011da $t
             forth.s:1685   .text:0000000000001209 $d
             forth.s:1685   .text:000000000000120a $t
             forth.s:1752   .text:00000000000012d7 $d
             forth.s:1752   .text:00000000000012d8 $t
             forth.s:1766   .text:00000000000012f5 $d
             forth.s:1766   .text:00000000000012f6 $t
             forth.s:1799   .text:0000000000001343 $d
             forth.s:1799   .text:0000000000001344 $t
             forth.s:1816   .text:000000000000136d $d
             forth.s:1816   .text:000000000000136e $t
             forth.s:1832   .text:0000000000001397 $d
             forth.s:1832   .text:0000000000001398 $t
             forth.s:1899   .text:000000000000142f $d
             forth.s:1899   .text:0000000000001430 $t
             forth.s:2038   .text:000000000000160b $d
             forth.s:2038   .text:000000000000160c $t
             forth.s:2057   .text:0000000000001641 $d
             forth.s:2057   .text:0000000000001642 $t
             forth.s:2077   .text:0000000000001677 $d
             forth.s:2077   .text:0000000000001678 $t
             forth.s:2153   .text:00000000000016f7 $d
             forth.s:2153   .text:00000000000016f8 $t
             forth.s:2191   .text:0000000000001757 $d
             forth.s:2191   .text:0000000000001758 $t
             forth.s:2351   .text:0000000000001943 $d
             forth.s:2351   .text:0000000000001944 $t
             forth.s:2394   .text:00000000000019a5 $d
             forth.s:2394   .text:00000000000019a6 $t
             forth.s:2409   .text:00000000000019c9 $d
             forth.s:2409   .text:00000000000019ca $t
             forth.s:2645   .text:0000000000001c53 $d
             forth.s:2645   .text:0000000000001c54 $t
             forth.s:2799   .text:0000000000001e1f $d
             forth.s:2799   .text:0000000000001e20 $t
             forth.s:2813   .text:0000000000001e49 $d
             forth.s:2813   .text:0000000000001e4a $t
             forth.s:2836   .text:0000000000001e8f $d
             forth.s:2836   .text:0000000000001e90 $t
             forth.s:2849   .text:0000000000001ead $d
             forth.s:2849   .text:0000000000001eae $t
             forth.s:2863   .text:0000000000001edb $d
             forth.s:2863   .text:0000000000001edc $t
             forth.s:3033   .text:0000000000002085 $d
             forth.s:3033   .text:0000000000002086 $t
             forth.s:3072   .text:00000000000020ef $d
             forth.s:3072   .text:00000000000020f0 $t
             forth.s:3104   .text:0000000000002157 $d
             forth.s:3104   .text:0000000000002158 $t
             forth.s:3119   .text:0000000000002179 $d
             forth.s:3119   .text:000000000000217a $t
             forth.s:3148   .text:00000000000021b9 $d
             forth.s:3148   .text:00000000000021ba $t
             forth.s:3175   .text:00000000000021f7 $d
             forth.s:3175   .text:00000000000021f8 $t
ARM GAS  forth.s 			page 129


             forth.s:3188   .text:0000000000002217 $d
             forth.s:3188   .text:0000000000002218 $t
             forth.s:3201   .text:0000000000002237 $d
             forth.s:3201   .text:0000000000002238 $t
             forth.s:3268   .text:00000000000022f5 $d
             forth.s:3268   .text:00000000000022f6 $t
             forth.s:3410   .text:0000000000002465 $d
             forth.s:3410   .text:0000000000002466 $t
             forth.s:3465   .text:000000000000250b $d
             forth.s:3465   .text:000000000000250c $t
             forth.s:3479   .text:000000000000252f $d
             forth.s:3479   .text:0000000000002530 $t
             forth.s:3519   .text:00000000000025a7 $d
             forth.s:3519   .text:00000000000025a8 $t
             forth.s:3536   .text:00000000000025d9 $d
             forth.s:3536   .text:00000000000025da $t
             forth.s:3609   .text:000000000000269d $d
             forth.s:3609   .text:000000000000269e $t
             forth.s:3646   .text:0000000000002717 $d
             forth.s:3646   .text:0000000000002718 $t
             forth.s:3831   .text:000000000000284b $d
             forth.s:3831   .text:000000000000284c $t
             forth.s:3860   .text:00000000000028b9 $d
             forth.s:3860   .text:00000000000028ba $t

UNDEFINED SYMBOLS
_mstack
