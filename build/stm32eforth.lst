ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
ARM GAS  forth.s 			page 4


 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0xE000E400 
 203              	
 204              	/* TIMERS registers */
 205              	.equ TIM1_BASE_ADR,0x40010000
 206              	.equ TIM9_BASE_ADR,0x40010400
 207              	.equ TIM10_BASE_ADR,0x40010800
 208              	.equ TIM11_BASE_ADR,0x40010C00
 209              	
 210              	.equ TIM2_BASE_ADR,0x40000000
 211              	.equ TIM3_BASE_ADR,0x40000400
 212              	.equ TIM4_BASE_ADR,0x40000800
 213              	.equ TIM5_BASE_ADR,0x40000C00
 214              	
 215              	/* TIMER1 */
 216              	.equ TIM1_RCR,48 
 217              	.equ TIM1_BDTR,68 
 218              	
 219              	/* TIMER2..TIMER5 */
 220              	.equ TIM_CR1,0
 221              	.equ TIM_CR2,4
 222              	.equ TIM_SMCR,8
 223              	.equ TIM_DIER,12
 224              	.equ TIM_SR,16
 225              	.equ TIM_EGR,20
 226              	.equ TIM_CCMR1,24
 227              	.equ TIM_CCMR2,28
 228              	.equ TIM_CCER,32
 229              	.equ TIM_CNT,36
 230              	.equ TIM_PSC,40
 231              	.equ TIM_ARR,44
 232              	.equ TIM_CCR1,52
 233              	.equ TIM_CCR2,56
 234              	.equ TIM_CCR3,60
 235              	.equ TIM_CCR4,64
 236              	.equ TIM_DCR,72
 237              	.equ TIM_DMAR,76
 238              	.equ TIM2_OR,80
 239              	.equ TIM5_OR,80 
 240              	
 241              	/* SYSCFG registers */
 242              	.equ SYSCFG_BASE_ADR, 0x40013800
 243              	
 244              	.equ SYSCFG_MEMRMP,0
 245              	.equ SYSCFG_PMC,4
 246              	.equ SYSCFG_EXTICR1,8
 247              	.equ SYSCFG_EXTICR2,12
 248              	.equ SYSCFG_EXTICR3,16
 249              	.equ SYSCFG_EXTICR4,20
 250              	.equ SYSCFG_CMPCR,32
 251              	
 252              	/* EXTI registers */
 253              	.equ EXTI_BASE_ADR, 0x40013C00
 254              	
 255              	.equ EXTI_IMR,0
ARM GAS  forth.s 			page 6


 256              	.equ EXTI_EMR,4
 257              	.equ EXTI_RTSR,8
 258              	.equ EXTI_FTSR,12
 259              	.equ EXTI_SWIER,16
 260              	.equ EXTI_PR,20
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
ARM GAS  forth.s 			page 7


  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ NBASE, BOOT+4  // numeric conversion base 
  78              	  .equ TMP, NBASE+4   // temporary variable
  79              	  .equ CSPAN, TMP+4  // character count received by expect  
  80              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  81              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  82              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  83              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  84              	  .equ HOLD, EVAL+4   // hold pointer 
  85              	  .equ CTXT, HOLD+4  // context pointer 
  86              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  87              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  88              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  89              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  90              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  91              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  92              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  93              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  94              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  95              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  96              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  97              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  98              	  .equ KBD_QUEUE_SIZE, 16 
  99              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 100              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 101              	  .equ KBD_QTAIL,KBD_QHEAD+4
 102              	  .equ ROW,KBD_QTAIL+4 
 103              	  .equ COL,ROW+4 
 104              	  .equ BK_COLOR,COL+4 
 105              	  .equ PEN_COLOR,BK_COLOR+4
 106              	
 107              	/***********************************************
 108              	* MACROS
ARM GAS  forth.s 			page 8


 109              	*	Assemble inline direct threaded code ending.
 110              	***********************************************/
 111              		.macro _CALL fn /* low level routine call */ 
 112              	 	PUSH {LR}
 113              		BL \fn  
 114              		POP {LR}
 115              		.endm
 116              		
 117              		.macro _RET /* exit sub-routine */ 
 118              		BX LR 
 119              		.endm 
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.word LINK 
 124              			.equ LINK , . 
 125              		_\label: .byte \nlen    // name field
 126              			.ascii "\name"
 127              			.p2align 2 
 128              		\label:   // code field 
 129              		.endm 
 130              		
 131              	
 132              	// local function header 
 133              		.macro _FUNC label 
 134              		.section .text, "ax", %progbits 
 135              		.p2align 2 
 136              		.type \label, %function  
 137              		\label:
 138              		.endm 
 139              	
 140              	// global function header 
 141              		.macro _GBL_FUNC label 
 142              		.global \label 
 143              		_FUNC \label 
 144              		.endm 
 145              	
 146              	
 147              	// load large constant to register 
 148              		.macro _MOV32 r, value 
 149              		mov \r,#(\value&0xffff)
 150              		movt \r,#(\value>>16)
 151              		.endm 
 152              	
 153              		.macro _NEXT /* direct jump INEXT */ 
 154              		B INEXT   
 155              		.endm 
 156              	
 157              	 	.macro	_NEST /*start high level word */
 158              		BX INX  
 159              		NOP.N 
 160              		.endm
 161              	
 162              		.macro _ADR label 
 163              		.word 1+\label  
 164              		.endm 
 165              	
ARM GAS  forth.s 			page 9


 166              	 	.macro	_UNNEST	/*end high level word */
 167              		_ADR UNNEST 
 168              		.endm
 169              	
 170              	 	.macro	_DOLIT u /*long literals */
 171              		_ADR	DOLIT
 172              		.word	\u 
 173              		.endm
 174              	
 175              		.macro _DOTQP len, text 
 176              		_ADR DOTQP 
 177              		.byte \len 
 178              		.ascii "\text" 
 179              		.p2align 2 
 180              		.endm
 181              	
 182              		.macro _COMPI name 
 183              		_DOLIT \name 
 184              		_ADR CALLC 
 185              		.endm 
 186              	
 187              		.macro _ABORQ len,name 
 188              		_ADR ABORQ 
 189              		.byte \len 
 190              		.ascii "\name"
 191              		.p2align 2 
 192              		.endm
 193              	
 194              		.macro _BRAN label 
 195              		_ADR BRAN 
 196              		.word \label 
 197              		.endm 
 198              	
 199              		.macro _QBRAN label 
 200              		_ADR QBRAN 
 201              		.word \label
 202              		.endm 
 203              	
 204              		.macro _DONXT label 
 205              		_ADR DONXT
 206              		.word \label 
 207              		.endm 
 208              	
 209              	 	.macro	_PUSH	/*push TOS on data stack*/
 210              		STR	TOS,[DSP,#-4]!
 211              		.endm
 212              	
 213              	 	.macro	_POP /*pop data stack to TOS */
 214              		LDR	TOS,[DSP],#4
 215              		.endm
  32              	
  33              	/*************************************
  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
  38              	
ARM GAS  forth.s 			page 10


  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      kbd_isr         /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
ARM GAS  forth.s 			page 11


  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
 148              	
ARM GAS  forth.s 			page 12


 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .text, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 014D     		ldr r5,exception_msg 
 159 0002 00F047F8 		bl uart_puts 
 160 0006 31E0     		b reset_mcu    
 161              	  .size  default_handler, .-default_handler
 162              	exception_msg:
 163 0008 0C000000 		.word .+4 
 164 000c 12       		.byte 18
 165 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 165      65707469 
 165      6F6E2072 
 165      65626F6F 
 165      7421
 166 001f 00       		.p2align 2
 167              	
 168              	/*********************************
 169              		system milliseconds counter
 170              	*********************************/	
 171              	  .type systick_handler, %function
 172              	  .p2align 2 
 173              	  .global systick_handler
 174              	systick_handler:
 175 0020 4FF00003 	  _MOV32 r3,UPP
 175      C2F20003 
 176 0028 9868     	  ldr r0,[r3,#TICKS]  
 177 002a 00F10100 	  add r0,#1
 178 002e 9860     	  str r0,[r3,#TICKS]
 179 0030 D868     	  ldr r0,[r3,#CD_TIMER]
 180 0032 10B1     	  cbz r0, systick_exit
 181 0034 A0F10100 	  sub r0,#1
 182 0038 D860     	  str r0,[r3,#CD_TIMER]
 183              	systick_exit:
 184 003a 7047     	  bx lr
 185              	
 186              	/**************************
 187              		UART RX handler
 188              	**************************/
 189              		.p2align 2
 190              		.type uart_rx_handler, %function
 191              	uart_rx_handler:
 192 003c 4FF48053 		_MOV32 r3,UART 
 192      C4F20103 
 193 0044 1868     		ldr r0,[r3,#USART_SR]
 194 0046 5968     		ldr r1,[r3,#USART_DR]
 195 0048 10F0200F 		tst r0,#(1<<5) // RXNE 
 196 004c 0AD0     		beq 2f // no char received 
 197 004e 0329     		cmp r1,#3
 198 0050 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
 199 0052 04F14400 		add r0,UP,#RX_QUEUE
ARM GAS  forth.s 			page 13


 200 0056 A26D     		ldr r2,[UP,#RX_TAIL]
 201 0058 8154     		strb r1,[r0,r2]
 202 005a 02F10102 		add r2,#1 
 203 005e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
 204 0062 A265     		str r2,[UP,#RX_TAIL]
 205              	2:	
 206 0064 7047     		bx lr 
 207              	
 208              	user_reboot:
 209 0066 064D     		ldr r5,user_reboot_msg
 210 0068 00F014F8 		bl uart_puts 
 211              	reset_mcu: 
 212 006c 0348     		ldr r0,scb_adr 
 213 006e C168     		ldr r1,[r0,#SCB_AIRCR]
 214 0070 41F00401 		orr r1,#(1<<2)
 215 0074 C0F2FA51 		movt r1,#SCB_VECTKEY
 216 0078 C160     		str r1,[r0,#SCB_AIRCR]
 217 007a FEE7     		b . 
 218              		.p2align 2 
 219              	scb_adr:
 220 007c 00ED00E0 		.word SCB_BASE_ADR 
 221              	user_reboot_msg:
 222 0080 84000000 		.word .+4
 223 0084 0D       		.byte 13 
 224 0085 0D757365 		.ascii "\ruser reboot!"
 224      72207265 
 224      626F6F74 
 224      21
 225 0092 00BF     		.p2align 2 
 226              	
 227              	   
 228              	// send counted string to uart 
 229              	// input: r5 string* 
 230              		.type uart_puts,%function 
 231              	uart_puts:
 232 0094 4FF48050 		_MOV32 r0,UART 
 232      C4F20100 
 233 009c 15F8011B 		ldrb r1,[r5],#1 // string length
 234 00a0 0940     		ands r1,r1
 235 00a2 0CD0     	1:	beq 9f 
 236 00a4 0268     	2:  ldr r2,[r0,#USART_SR]
 237 00a6 12F08002 		ands r2,#0x80 
 238 00aa FBD0     		beq 2b 	
 239 00ac 15F8012B 		ldrb r2,[r5],#1
 240 00b0 0271     		strb r2,[r0,#USART_DR]
 241 00b2 0139     		subs r1,r1,#1 
 242 00b4 F6D1     		bne 2b 
 243 00b6 0268     	3:	ldr r2,[r0,#USART_SR]
 244 00b8 12F04002 		ands r2,#(1<<6)
 245 00bc FBD0     		beq 3b 
 246 00be 7047     	9:  bx lr 
 247              	
 248              	
 249              	/**************************************
 250              	  reset_handler execute at MCU reset
 251              	***************************************/
 252              	  .type  reset_handler, %function
ARM GAS  forth.s 			page 14


 253              	  .p2align 2 
 254              	  .global reset_handler
 255              	reset_handler:
 256 00c0 4FF00000 		_MOV32 r0,RAM_END
 256      C2F20200 
 257 00c8 8546     		mov sp,r0  
 258 00ca FFF7FEFF 		bl	remap 
 259 00ce 00F033F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 260 00d2 00F09AF8 		bl  uart_init
 261 00d6 FFF7FEFF 		bl	tv_init 
 262 00da 00F019F8 		bl forth_init 
 263              	/****** test code ******/
 264 00de 4FF40143 		_MOV32 T3,VID_BUFF 
 264      C2F20103 
 265 00e6 4FF4FA42 		mov T2,#32000
 266 00ea 80EA0000 		eor T0,T0 
 267 00ee 4FF00A01 	1:  mov T1,#10
 268 00f2 03F8010B 	2:	strb T0,[T3],#1
 269 00f6 0139     		subs T1,#1 
 270 00f8 FBD1     		bne 2b  
 271 00fa 00F11100 		add T0,#0x11
 272 00fe 10F00F0F 		tst T0,#15
 273 0102 01D1     		bne 3f
 274 0104 80EA0000 		eor T0,T0
 275 0108 0A3A     	3:  subs T2,#10 
 276 010a F0D1     		bne 1b 
 277              	/***** end test code ****/
 278 010c 02F0D6BC 		b COLD 
 279              	
 280              	
 281              	
 282              		.type forth_init, %function 
 283              	forth_init:
 284 0110 4FF00004 		_MOV32 UP,UPP 
 284      C2F20004 
 285 0118 4FF47F47 		_MOV32 DSP,SPP
 285      C2F20107 
 286 0120 4FF68078 		_MOV32 RSP,RPP
 286      C2F20108 
 287 0128 DFF80CA2 	  ldr INX,=NEST
 288 012c 4AF0010A 	  orr INX,#1 
 289 0130 86EA0606 		EOR TOS,TOS  
 290 0134 7047     		_RET 
 291              	
 292              	/************
 293              	// test code 
 294              		.type echo, %function 
 295              	ECHO:
 296              		.word KEY,EMIT,BRANCH,echo  
 297              	
 298              		.type blink, %function 
 299              	blink:
 300              		_MOV32 r0,GPIOC_BASE_ADR
 301              	0:	mov r4,#1<<LED_PIN 
 302              		str r4,[r0,GPIO_BSRR]
 303              		mov	r4,#500
 304              		str r4,[R3,#TIMER] 
ARM GAS  forth.s 			page 15


 305              		_CALL timeout
 306              		mov r4,#1<<(LED_PIN+16)
 307              		str r4,[r0,#GPIO_BSRR]
 308              		mov	r4,#500
 309              		str r4,[R3,#TIMER] 
 310              		_CALL timeout 
 311              		b 0b 
 312              	
 313              		.type timeout, %function 
 314              	timeout:
 315              		ldr r4,[r3,#TIMER]
 316              		orrs r4,r4
 317              		bne timeout 
 318              		bx lr 
 319              	***** end test code *****/
 320              	
 321              	  .type init_devices, %function
 322 0136 00BF     	  .p2align 2 
 323              	init_devices:
 324              	/* init clock to HSE 96 Mhz */
 325              	/* set 3 wait states in FLASH_ACR_LATENCY */
 326 0138 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 326      C4F20200 
 327 0140 4FF00301 	  mov r1,#3 
 328 0144 0160     	  str r1,[r0,#FLASH_ACR]
 329              	/* configure clock for HSE, 25 Mhz crystal */
 330              	/* enable HSE in RCC_CR */
 331 0146 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 331      C4F20200 
 332 014e 0168     	  ldr r1,[r0,#RCC_CR]
 333 0150 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 334 0154 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 335              	/* wait HSERDY loop */
 336              	wait_hserdy:
 337 0156 0168     	  ldr r1,[r0,#RCC_CR]
 338 0158 11F4003F 	  tst r1,#(1<<17)
 339 015c FBD0     	  beq wait_hserdy
 340              	
 341              	/************************************************* 
 342              	   configure PLL  and source 
 343              	   SYSCLOCK=96 Mhz
 344              	   select HSE as  PLL source clock
 345              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 346              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 347              	****************************************************/
 348              	  /* set RCC_PLLCFGR */
 349 015e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 349      C4F20200 
 350 0166 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 350      C0F24041 
 351 016e 4160     	  str r1,[r0,#RCC_PLLCFGR]
 352              	  /* enable PLL */
 353 0170 0168     	  ldr r1,[r0,#RCC_CR]
 354 0172 41F08071 	  orr r1, #(1<<24)
 355 0176 0160     	  str r1,[r0,#RCC_CR]
 356              	/* wait for PLLRDY */
 357              	wait_pllrdy:
ARM GAS  forth.s 			page 16


 358 0178 0168     	  ldr r1,[r0,#RCC_CR]
 359 017a 11F0007F 	  tst r1,#(1<<25)
 360 017e FBD1     	  bne wait_pllrdy 
 361              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 362 0180 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 362      C0F21901 
 363 0188 8160     	  str r1,[r0,#RCC_CFGR]
 364              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 365 018a 8168     	  ldr r1,[r0,#RCC_CFGR]
 366 018c 41F00201 	  orr r1,#2
 367 0190 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 368              	/* wait for SWS==2 */
 369              	wait_sws:
 370 0192 8168     	  ldr r1,[r0,#RCC_CFGR]
 371 0194 11F0080F 	  tst r1,#(2<<2)
 372 0198 FBD0     	  beq wait_sws
 373              	/* now sysclock is 96 Mhz */
 374              	
 375              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 376 019a 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 377 019e 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 378 01a0 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 379 01a4 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 380              	/* configure GPIOC:13 as output for user LED */
 381 01a6 4FF40060 	  _MOV32 r0,LED_GPIO 
 381      C4F20200 
 382 01ae 0168     	  ldr r1,[r0,#GPIO_MODER]
 383 01b0 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 384 01b4 01EA0201 	  and r1,r1,r2
 385 01b8 41F08061 	  orr r1,#(1<<(2*LED_PIN))
 386 01bc 0160     	  str r1,[r0,#GPIO_MODER]
 387 01be 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 388 01c0 41F40051 	  orr r1,#(1<<LED_PIN)
 389 01c4 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 390 01c6 81EA0101 	  eor r1,r1 
 391 01ca 8182     	  strh r1,[r0,#GPIO_ODR]	
 392              	/* enable compensation CELL for fast I/O */
 393 01cc 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 393      C4F20101 
 394 01d4 4FF00100 		mov r0,#1 
 395 01d8 0862     		str r0,[R1,#SYSCFG_CMPCR]
 396              	/* wait for ready bit */ 
 397 01da 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 398 01dc 10F4807F 	    tst r0,#(1<<8)
 399 01e0 FBD0     		beq 1b 	
 400              	
 401              	
 402              	/* configure systicks for 1msec ticks */
 403              	// set priority to 15 (lowest)
 404 01e2 4FF46440 	  _MOV32 r0,NVIC_IPR_BASE
 404      CEF20000 
 405 01ea 4FF0F001 	  mov r1,#15<<4
 406 01ee 0176     	  strb r1,[r0,#24]
 407 01f0 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 407      CEF20000 
 408 01f8 47F2FF61 	  _MOV32 r1,95999 
 408      C0F20101 
ARM GAS  forth.s 			page 17


 409 0200 4160     	  str r1,[r0,#STK_LOAD]
 410 0202 4FF00701 	  mov r1,#7
 411 0206 0160     	  str r1,[r0,STK_CTL]
 412 0208 7047     	  _RET  
 413              	
 414              	/*******************************
 415              	  initialize UART peripheral 
 416              	********************************/
 417              		.type uart_init, %function
 418              	uart_init:
 419              	/* set GPIOA PIN 9, uart TX  */
 420 020a 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 420      C4F20200 
 421 0212 0168     	  ldr r1,[r0,#GPIO_MODER]
 422 0214 6FF47012 	  mvn r2,#0xf<<(2*9)
 423 0218 01EA0201 	  and r1,r1,r2
 424 021c 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 425 0220 41EA0201 	  orr r1,r1,r2 
 426 0224 0160     	  str r1,[r0,#GPIO_MODER]
 427              	/* select alternate functions USART1==AF07 */ 
 428 0226 4FF4EE61 	  mov r1,#0x77<<4 
 429 022a 4162     	  str r1,[r0,#GPIO_AFRH]
 430              	/* configure USART1 registers */
 431 022c 4FF48050 	  _MOV32 r0,UART 
 431      C4F20100 
 432              	/* BAUD rate */
 433 0234 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 434 0238 8160     	  str r1,[r0,#USART_BRR]
 435 023a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 436 023e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 437              	/* enable interrupt in NVIC */
 438 0240 4FF46040 	  _MOV32 r0,NVIC_BASE_ADR
 438      CEF20000 
 439 0248 D0F80411 	  ldr r1,[r0,#NVIC_ISER1]
 440 024c 41F02001 	  orr r1,#32   
 441 0250 C0F80411 	  str r1,[r0,#NVIC_ISER1]
 442 0254 7047     	  bx lr 
 443              	
 444              	/* copy system variables to RAM */ 
 445              		.type remap, %function 
 446              	    .global remap 
 447              	remap:
 448              	// copy system to RAM 	
 449 0256 4FF00000 		_MOV32 r0,RAM_ADR 
 449      C2F20000 
 450 025e 3749     		ldr r1,=UZERO 
 451 0260 4FF0A002 		mov r2,#ULAST-UZERO 
 452 0264 02F10302 		add r2,r2,#3
 453 0268 22F00302 		and r2,r2,#~3 
 454 026c 51F8043B 	1:	ldr r3,[r1],#4 
 455 0270 40F8043B 		str r3,[r0],#4 
 456 0274 043A     		subs R2,#4 
 457 0276 F9D1     		bne 1b
 458              	// zero end of RAM 
 459 0278 4FF00002 		_MOV32 r2,RAM_END 
 459      C2F20202 
 460 0280 83EA0303 		eor r3,r3,r3 
ARM GAS  forth.s 			page 18


 461 0284 40F8043B 	2:  str r3,[r0],#4
 462 0288 9042     		cmp r0,r2 
 463 028a FBDB     		blt 2b 
 464 028c 4FF00004 		_MOV32 UP,RAM_ADR  
 464      C2F20004 
 465 0294 7047     		_RET 
 466              	
 467              	/******************************************************
 468              	*  COLD start moves the following to USER variables.
 469              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 470              	******************************************************/
 471 0296 00BF     		.p2align 2
 472              	UZERO:
 473 0298 00000000 		.word 0  			/*Reserved */
 474 029c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 475 02a0 00000000 		.word 0      /* TICKS */
 476 02a4 00000000 	    .word 0     /* CD_TIMER */
 477 02a8 4C2A0000 		.word HI  /*'BOOT */
 478 02ac 0A000000 		.word BASEE 	/*BASE */
 479 02b0 00000000 		.word 0			/*tmp */
 480 02b4 00000000 		.word 0			/*SPAN */
 481 02b8 00000000 		.word 0			/*>IN */
 482 02bc 00000000 		.word 0			/*#TIB */
 483 02c0 00FF0120 		.word TIBB	/*TIBU */
 484 02c4 B41F0000 		.word INTER	/*'EVAL */
 485 02c8 00000000 		.word 0			/*HLD */
 486 02cc B42A0000 		.word _LASTN	/*CONTEXT */
 487 02d0 102B0000 		.word CTOP  	/* FCP end of system dictionnary */
 488 02d4 78280020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 489 02d8 B42A0000 		.word _LASTN	/*LAST word in dictionary */
 490 02dc 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 490      00000000 
 490      00000000 
 490      00000000 
 491 02ec 00000000 		.word 0  /* RX_HEAD */
 492 02f0 00000000 		.word 0  /* RX_TAIL */ 
 493 02f4 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 494 02f8 00000000 		.word 0  /* VID_STATE, video state */  
 495 02fc 00000000 	    .word 0  /* VID_FIELD, field */
 496 0300 00810120 		.word VID_BUFF /* video_buffer address */ 
 497 0304 00000000 	    .word 0 /* kbd struct */
 498 0308 00000000 		.space KBD_QUEUE_SIZE,0  
 498      00000000 
 498      00000000 
 498      00000000 
 499 0318 00000000 		.word 0  /* kbd queue head */
 500 031c 00000000 		.word 0 /* kbd queue tail */ 
 501 0320 00000000 	    .word 0 /* tv cursor row */
 502 0324 00000000 	    .word 0 /* tv cursor column */ 
 503 0328 00000000 	    .word 0 /* tv back color */
 504 032c 07000000 	    .word 7 /* tv font color */
 505 0330 00000000 	    .word 0,0 
 505      00000000 
 506              	ULAST:
 507 0338 58090000 	
 507      98020000 
   1              	/*****************************************************
ARM GAS  forth.s 			page 19


   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp 
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	  .include "tvout.inc"
   1              	
   2              	  .equ HRES, 320  // horizontal resolution
   3              	  .equ VRES, 200   // vertical resolution
   4              	  .equ BPP, 4     // bits per pixel
   5              	  .equ BPR, (HRES*BPP/8)  // bytes per row
   6              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
   7              	
   8              	  .equ CHAR_WIDTH, 6 
   9              	  .equ CHAR_HEIGHT, 8
  10              	  
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ LEFT_MARGIN, (750) 
  37              	  .equ VIDEO_FIRST_LINE, 40
  38              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  39              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14µSec
  40              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  41              	
  42              	// video state 
  43              	  .equ ST_VSYNC, 0 
  44              	  .equ ST_PREVID,1 
  45              	  .equ ST_VIDEO,2 
  46              	  .equ ST_POSTVID,3    
  47              	// field 
  48              	   .equ ODD_FIELD,0 
ARM GAS  forth.s 			page 20


  49              	   .equ EVEN_FIELD,-1
  50              	
  51              	/*******************************************************
  52              	NOTES:
  53              	 1) Values computed for a 96Mhz sysclock 
  54              	 2) Video sync output on PB1 use T3_CH4
  55              	 3) video out trigger TIMER3 CH3 
  56              	********************************************************/
  57              	
  58              	/**************************************
  59              	  initialize TIMER3 CH4 to generate tv_out
  60              	  synchronization signal.
  61              	**************************************/ 
  62              	  _GBL_FUNC tv_init
  63              	// configure PA0:3 as OUTPUT_OD 
  64 0340 4FF00002 	  _MOV32 r2,GPIOA_BASE_ADR 
  64      C4F20202 
  65 0348 1168     	  ldr r1,[r2,#GPIO_MODER]
  66 034a 4FF05500 	  mov r0,#0x55
  67 034e 41EA0001 	  orr r1,r0
  68 0352 1160     	  str r1,[r2,#GPIO_MODER]
  69              	//  mov r0,#15 
  70              	//  ldr r1,[r2,#GPIO_OTYPER]
  71              	//  orr r1,r0 
  72              	//  str r1,[r2,#GPIO_OTYPER]
  73              	//  str r1,[r2,#GPIO_BSRR]
  74              	//  ldr r1,[r2,GPIO_OSPEEDR]
  75              	//  lsl r0,#1 // fast speed  
  76              	//  orr r1,r0 
  77              	//  str r1,[r2,#GPIO_OSPEEDR]
  78 0354 80EA0000 	  eor r0,r0 
  79 0358 5061     	  str r0,[r2,#GPIO_ODR]  
  80              	// configure PB1 as OUTPUT_AFPP 
  81              	// this is TIM3_CC4 output compare 
  82 035a 02F58062 	  add r2,#0x400 // GPIOB_BASE_ADR
  83 035e 4FF00800 	  mov r0,(2<<2) // alternate function output 
  84 0362 1168     	  ldr r1,[r2,#GPIO_MODER]
  85 0364 41EA0001 	  orr r1,r0 
  86 0368 1060     	  str r0,[r2,#GPIO_MODER] // output AFPP
  87 036a 9168     	  ldr r1,[r2,#GPIO_OSPEEDR]
  88 036c 41EA0001 	  orr r1,r0 
  89 0370 9160     	  str r1,[r2,#GPIO_OSPEEDR] // 2= fast speed 
  90 0372 4FEA8000 	  lsl r0,#2 // alternate function 2 on BP1==TIM3_CH4 
  91 0376 116A     	  ldr r1,[r2,#GPIO_AFRL]
  92 0378 41EA0001 	  orr r1,r0 
  93 037c 1162     	  str r1,[r2,#GPIO_AFRL]
  94              	// enable peripheral clock 
  95 037e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  95      C4F20202 
  96 0386 4FF00200 	  mov r0,#2 
  97 038a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  98 038c 41EA0001 	  orr r1,r0 
  99 0390 1164     	  str r1,[r2,#RCC_APB1ENR]
 100              	// configure TIMER3   
 101 0392 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 101      C4F20002 
 102 039a 41F2D470 	  mov r0,#HPER
ARM GAS  forth.s 			page 21


 103 039e D062     	  str r0,[r2,#TIM_ARR]
 104 03a0 40F23F50 	  mov r0,#VIDEO_DELAY 
 105 03a4 D063     	  str r0,[r2,#TIM_CCR3]
 106 03a6 4FF4E170 	  mov r0,#HPULSE 
 107 03aa 1064     	  str r0,[r2,#TIM_CCR4]  
 108 03ac 47F27000 	  mov r0,#(7<<12)+(7<<4)
 109 03b0 D061     	  str r0,[r2,#TIM_CCMR2]
 110 03b2 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 111 03b6 1062     	  str r0,[r2,#TIM_CCER]
 112 03b8 4FF00100 	  mov r0,#1 
 113 03bc D060     	  str r0,[r2,#TIM_DIER]
 114 03be 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 115              	// enable interrupt in NVIC controller 
 116 03c0 4FEA4070 	  lsl r0,#29 // IRQ29
 117 03c4 4FF46042 	  _MOV32 r2,NVIC_BASE_ADR
 117      CEF20002 
 118 03cc D2F80011 	  ldr r1,[r2,#NVIC_ISER0]
 119 03d0 41EA0001 	  orr r1,r0 
 120 03d4 C2F80011 	  str r1,[r2,#NVIC_ISER0]
 121 03d8 7047     	  _RET
 122              	
 123              	/*************************************
 124              	  TIMER3 interrupt for tv_out
 125              	  T1 line # 
 126              	  T0 TIM3_BASE_ADR 
 127              	*************************************/
 128 03da 00BF     	  _GBL_FUNC tv_out_isr
 129 03dc 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 129      C4F20000 
 130 03e4 81EA0101 	  eor T1,T1
 131 03e8 0161     	  str T1,[T0,#TIM_SR]
 132 03ea E16D     	  ldr T1,[UP,#VID_CNTR]
 133 03ec 01F10101 	  add T1,#1 
 134 03f0 E165     	  str T1,[UP,#VID_CNTR]
 135              	/** machine state cases **/
 136 03f2 226E     	  ldr T2,[UP,#VID_STATE]
 137 03f4 002A     	  cmp T2,#ST_VSYNC 
 138 03f6 07D0     	  beq state_vsync
 139 03f8 012A     	  cmp T2,#ST_PREVID 
 140 03fa 2FD0     	  beq state_pre_video 
 141 03fc 022A     	  cmp T2,#ST_VIDEO 
 142 03fe 36D0     	  beq state_video_out 
 143 0400 032A     	  cmp T2,#ST_POSTVID 
 144 0402 60D0     	  beq state_post_video
 145 0404 FFF7FEBF 	  b default_handler // invalid state 
 146              	/*** vertical sync state **/
 147              	state_vsync:
 148 0408 0129     	  cmp T1,#1
 149 040a 06D1     	  bne 1f 
 150              	/****** set vertical pre-sync  *****/
 151 040c 4FF0DB01 	  mov T1,#SERRATION
 152 0410 0164     	  str T1,[T0,#TIM_CCR4]
 153 0412 40F6E931 	  mov T1,#SYNC_LINE 
 154 0416 C162     	  str T1,[T0,#TIM_ARR]
 155 0418 68E0     	  b tv_isr_exit 
 156 041a 0729     	1: cmp T1,#7
 157 041c 03D1     	  bne 2f 
ARM GAS  forth.s 			page 22


 158              	// vertical sync pulse   
 159 041e 40F62821 	  mov T1,#VSYNC_PULSE
 160 0422 0164     	  str T1,[T0,#TIM_CCR4]
 161 0424 62E0     	  b tv_isr_exit
 162 0426 0D29     	2: cmp T1,#13
 163 0428 03D1     	   bne 3f  
 164              	// set vertical post-sync    
 165 042a 4FF0DB01 	   mov T1,#SERRATION 
 166 042e 0164     	   str T1,[T0,#TIM_CCR4]
 167 0430 5CE0     	   b tv_isr_exit   
 168 0432 1229     	3: cmp T1,#18
 169 0434 03D1     	   bne 4f 
 170              	// if even field full line  
 171 0436 616E     	   ldr T1,[UP,#VID_FIELD]
 172 0438 0029     	   cmp T1,#ODD_FIELD  
 173 043a 57D0     	   beq tv_isr_exit 
 174 043c 01E0     	   b sync_end 
 175 043e 1329     	4: cmp T1,#19 
 176 0440 54D1     	   bne tv_isr_exit
 177              	sync_end: 
 178 0442 4FF00901 	   mov T1,#9
 179 0446 E165     	   str T1,[UP,#VID_CNTR]
 180 0448 4FF4E171 	   mov T1,#HPULSE 
 181 044c 0164     	   str T1,[T0,#TIM_CCR4] 
 182 044e 41F2D471 	   mov T1,#HPER 
 183 0452 C162     	   str T1,[T0,#TIM_ARR] 
 184 0454 4FF00101 	   mov T1,#ST_PREVID 
 185 0458 2166     	   str T1,[UP,#VID_STATE]
 186 045a 47E0     	   b tv_isr_exit 
 187              	/*****************************/
 188              	state_pre_video:
 189 045c 2829     	   cmp T1,#VIDEO_FIRST_LINE
 190 045e 45D4     	   bmi tv_isr_exit 
 191 0460 4FF00201 	   mov T1,#ST_VIDEO 
 192 0464 2166     	   str T1,[UP,#VID_STATE]
 193 0466 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 194 046a C160     	   str T1,[T0,#TIM_DIER]
 195 046c 3EE0     	   b tv_isr_exit 
 196              	/**************************
 197              	    VIDEO OUTPUT 
 198              	**************************/   
 199              	state_video_out:
 200 046e F029     	   cmp T1,#VIDEO_LAST_LINE 
 201 0470 06D9     	   bls 1f 
 202 0472 4FF00301 	   mov T1,#ST_POSTVID 
 203 0476 2166     	   str T1,[UP,#VID_STATE]
 204 0478 4FF00101 	   mov T1,#1 
 205 047c C160     	   str T1,[T0,#TIM_DIER]
 206 047e 35E0     	   b tv_isr_exit 
 207              	1: // video output
 208 0480 A06E     	   ldr T0,[UP,#VID_BUFFER]
 209 0482 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 210 0486 4FF0A003 	   mov T3,#160
 211 048a 03FB01F1 	   mul T1,T3 
 212 048e 0844     	   add T0,T1  
 213 0490 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 213      C4F20201 
ARM GAS  forth.s 			page 23


 214 0498 0278     	2: ldrb T2,[T0]
 215 049a 4FEA1212 	   lsr T2,#4 
 216 049e 4A61     	   str T2,[T1,#GPIO_ODR]
 217 04a0 AFF30080 	   nop.w
 218 04a4 AFF30080 	   nop.w 
 219 04a8 10F8012B 	   ldrb T2,[T0],#1
 220 04ac 02F00F02 	   and T2,#15 
 221 04b0 4A61     	   str T2,[T1,#GPIO_ODR]
 222 04b2 AFF30080 	   nop.w
 223 04b6 AFF30080 	   nop.w  
 224 04ba 013B     	   subs T3,#1
 225 04bc ECD1     	   bne 2b  
 226 04be 4FF47022 	   mov T2,#(15<<16) 
 227 04c2 8A61     	   str T2,[T1,#GPIO_BSRR]
 228 04c4 12E0     	   b tv_isr_exit 
 229              	state_post_video:
 230 04c6 4FF48372 	   mov T2,#262
 231 04ca 9142     	   cmp T1,T2
 232 04cc 0ED4     	   bmi tv_isr_exit     
 233              	// odd field line 262 half line 
 234 04ce 616E     	   ldr T1,[UP,VID_FIELD]
 235 04d0 11B9     	   cbnz T1, frame_end 
 236 04d2 40F6E931 	   mov T1,#SYNC_LINE
 237 04d6 C162     	   str T1,[T0,#TIM_ARR]      
 238              	frame_end: 
 239 04d8 4FF00001 	   mov T1,#ST_VSYNC 
 240 04dc 2166     	   str T1,[UP,#VID_STATE]
 241 04de 81EA0101 	   eor T1,T1 
 242 04e2 E165     	   str T1,[UP,#VID_CNTR]
 243 04e4 616E     	   ldr T1,[UP,#VID_FIELD]
 244 04e6 6FEA0101 	   mvn T1,T1  
 245 04ea 6166     	   str T1,[UP,#VID_FIELD]
 246              	tv_isr_exit: 
 247 04ec 7047     	   _RET   
 248              	
 249              	
 250              	/***************************
 251              	    FORTH WORDS 
 252              	***************************/
 253              	    .equ LINK, 0 
 254              	
 255              	// BACK-COLOR ( -- a )
 256              	//   back color variable 
 257 04ee 00000000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 257      0A424143 
 257      4B2D434F 
 257      4C4F5200 
 257      00BF
 258 0500 47F8046D 		_PUSH 
 259 0504 04F19006 		ADD TOS,UP,#BK_COLOR
 260 0508 2AE2     		_NEXT
 261              	
 262              	// PEN-COLOR ( -- a )
 263              	// pen color variable 
 264 050a F2040000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 264      0950454E 
 264      2D434F4C 
ARM GAS  forth.s 			page 24


 264      4F52
 265 0518 47F8046D 		_PUSH 
 266 051c 04F19406 		ADD TOS,UP,#PEN_COLOR
 267 0520 1EE2     		_NEXT 
 268              	
 269              	// COLUMN ( -- a )
 270              	// cursor column variable 
 271 0522 0E050000 	  _HEADER COLUMN,6,"COLUMN"
 271      06434F4C 
 271      554D4E00 
 271      00BF
 272 0530 47F8046D 	  _PUSH 
 273 0534 04F18C06 	  ADD TOS,UP,#COL 
 274 0538 12E2     	  _NEXT 
 275              	
 276              	// ROW ( -- a )
 277              	// cursor row 
 278 053a 26050000 	  _HEADER CURSOR_ROW,3,"ROW"
 278      03524F57 
 278      00BF
 279 0544 47F8046D 	  _PUSH 
 280 0548 04F18806 	  ADD TOS,UP,#ROW 
 281 054c 08E2     	  _NEXT 
 282              	
 283              	// ROW>Y ( n1 - n2 )
 284              	// convert cursor row to y coord 
 285 054e 3E050000 	  _HEADER ROWY,5,"ROW>Y"
 285      05524F57 
 285      3E59
 286 0558 4FF00800 	  mov T0,#CHAR_HEIGHT
 287 055c 00FB06F6 	  mul TOS,T0 
 288 0560 FEE1     	  _NEXT 
 289              	
 290              	// COL>X ( n1 -- n2 )
 291              	// convert cursor column to x coord 
 292 0562 52050000 	  _HEADER COLX,5,"COL>X" 
 292      05434F4C 
 292      3E58
 293 056c 4FF00600 	  mov T0,#CHAR_WIDTH 
 294 0570 00FB06F6 	  mul TOS,T0 
 295 0574 F4E1     	  _NEXT 
 296              	
 297              	// FONT ( -- a )
 298              	// return address of font table
 299 0576 66050000 	  _HEADER FONT,4,"FONT" 
 299      04464F4E 
 299      5400
 300 0580 47F8046D 	  _PUSH 
 301 0584 B14E     	  ldr TOS,=font_6x8 
 302 0586 EBE1     	  _NEXT 
 303              	
 304              	// VIDBUFF ( -- a )
 305              	// address of video buffer 
 306 0588 7A050000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 306      07564944 
 306      42554646 
 307 0594 47F8046D 	  _PUSH 
ARM GAS  forth.s 			page 25


 308 0598 A66E     	  LDR TOS,[UP,#VID_BUFFER]
 309 059a E1E1     	  _NEXT 
 310              	
 311              	
 312              	// PLOT ( x y op -- )
 313              	// draw a pixel 
 314              	//    0 back color 
 315              	//    1 pen color 
 316              	//    2 invert (invert color pixels )
 317              	//    3 xor pen color  
 318 059c 8C050000 	    _HEADER PLOT,4,"PLOT"
 318      04504C4F 
 318      540000BF 
 319              	// compute video buffer byte address from coords
 320 05a8 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 321 05aa 4FF0A002 	    mov T2,#BPR // bytes per row  
 322 05ae 02FB00F0 	    mul T0,T2 
 323 05b2 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 324 05b6 1044     	    add T0,T2 
 325 05b8 A36E     	    ldr T3,[UP,#VID_BUFFER] 
 326 05ba 0344     	    add T3,T0 // T3 -> byte address 
 327 05bc 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 328 05be 4FF00F02 	    mov T2,#15 // AND mask 
 329 05c2 11F0010F 	    tst T1,#1 
 330 05c6 01D0     	    beq 1f 
 331 05c8 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 332 05cc A048     	1:  ldr T0,=plot_op 
 333 05ce D0E806F0 	    tbb [T0,TOS]
 334              	op_back:
 335 05d2 05EA0205 	    and WP,T2 // mask out nibble 
 336 05d6 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 337 05da 11F0010F 	    tst T1,#1 
 338 05de 01D1     	    bne 1f 
 339 05e0 4FEA0010 	    lsl T0,#4 // high nibble  
 340 05e4 45EA0005 	1:  orr WP,T0  
 341 05e8 1D70     	    strb WP,[T3]
 342 05ea 1AE0     	    b 9f 
 343              	op_pen: 
 344 05ec 05EA0205 	    and WP,T2 
 345 05f0 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 346 05f4 11F0010F 	    tst T1,#1
 347 05f8 01D1     	    bne 1f 
 348 05fa 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 349 05fe 45EA0005 	1:	orr WP,T0 
 350 0602 1D70     	    strb WP,[T3]
 351 0604 0DE0     	    b 9f 
 352              	op_invert:
 353 0606 85EA0205 	    eor WP,T2 
 354 060a 1D70     	    strb WP,[T3]
 355 060c 09E0     	    b 9f 
 356              	op_xor:
 357 060e D4F89400 	    ldr T0,[UP,#PEN_COLOR]
 358 0612 11F0010F 	    tst T1,#1 
 359 0616 01D1     	    bne 1f 
 360 0618 4FEA0010 	    lsl T0,#4 
 361 061c 85EA0005 	1:  eor WP,T0 
 362 0620 1D70     	    strb WP,[T3]
ARM GAS  forth.s 			page 26


 363 0622 57F8046B 	9:  _POP 
 364 0626 9BE1     	    _NEXT 
 365              	
 366 0628 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 367              	
 368              	
 369              	// VSYNC ( -- )
 370              	// wait vertical sync phase 
 371 062c A0050000 	    _HEADER VSYNC,5,"VSYNC"
 371      05565359 
 371      4E4300BF 
 372 0638 E06D     	1:  ldr T0,[UP,#VID_CNTR]
 373 063a 0028     	    cmp T0,#0
 374 063c FCD1     	    bne 1b
 375 063e 8FE1     	    _NEXT 
 376              	
 377              	// CLS ( -- )
 378              	// clear TV screen 
 379 0640 30060000 	    _HEADER CLS,3,"CLS"
 379      03434C53 
 380 0648 80EA0000 	    eor T0,T0 
 381 064c 94F89010 	    ldrb T1,[UP,#BK_COLOR]
 382 0650 40EA0100 	    orr T0,T1 
 383 0654 4FEA0111 	    lsl T1,#4 
 384 0658 40EA0100 	    orr T0,T1 
 385 065c 4FEA0021 	    lsl T1,T0,#8 
 386 0660 40EA0100 	    orr T0,T1 
 387 0664 4FEA0041 	    lsl T1,T0,#16
 388 0668 40EA0100 	    orr T0,T1 
 389 066c 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 390 0670 A26E     	    ldr T2,[UP,#VID_BUFFER]
 391 0672 5050     	1:	str T0,[T2,T1]
 392 0674 0439     	    subs T1,#4
 393 0676 FCD1     	    bne 1b
 394 0678 1060     	    str T0,[T2]
 395 067a 80EA0000 	    eor T0,T0 
 396 067e C4F88800 	    str T0,[UP,#ROW]
 397 0682 C4F88C00 	    str T0,[UP,#COL]
 398 0686 6BE1     	    _NEXT 
 399              	
 400              	
 401              	// CLRLINE ( n -- )
 402              	// clear text line 
 403 0688 44060000 	  _HEADER CLRLINE,7,"CLRLINE"
 403      07434C52 
 403      4C494E45 
 404 0694 504700BF 	  _NEST
 405 0698 D10A0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 405      00050000 
 406 06a0 050C0000 	  _ADR DUPP  
 407 06a4 AD0B0000 	  _ADR TOR 
 408 06a8 E90C0000 	  _ADR STAR
 409 06ac 95050000 	  _ADR VIDBUFF
 410 06b0 C90C0000 	  _ADR PLUS
 411 06b4 850B0000 	  _ADR RFROM   
 412 06b8 D10A0000 	  _DOLIT 0 
 412      00000000 
ARM GAS  forth.s 			page 27


 413 06c0 35140000 	  _ADR FILL 
 414 06c4 67090000 	  _UNNEST 
 415              	
 416              	// SCROLLUP ( -- )
 417              	// scroll up tv screen 1 char height 
 418 06c8 8C060000 	  _HEADER SCROLLUP,8,"SCROLLUP"
 418      08534352 
 418      4F4C4C55 
 418      500000BF 
 419 06d8 504700BF 	  _NEST 
 420 06dc 95050000 	  _ADR VIDBUFF 
 421 06e0 050C0000 	  _ADR DUPP 
 422 06e4 D10A0000 	  _DOLIT BPR*CHAR_HEIGHT 
 422      00050000 
 423 06ec 050C0000 	  _ADR DUPP 
 424 06f0 AD0B0000 	  _ADR TOR 
 425 06f4 C90C0000 	  _ADR PLUS 
 426 06f8 150C0000 	  _ADR SWAP 
 427 06fc D10A0000 	  _DOLIT VIDEO_BUFFER_SIZE 
 427      007D0000 
 428 0704 850B0000 	  _ADR RFROM  
 429 0708 D90C0000 	  _ADR SUBB 
 430 070c 01140000 	  _ADR MOVE
 431 0710 D10A0000 	  _DOLIT 24 
 431      18000000 
 432 0718 95060000 	  _ADR CLRLINE 
 433 071c 67090000 	  _UNNEST 
 434              	
 435              	//  RIGHT ( -- )
 436              	// move cursor 1 char. right 
 437 0720 CC060000 	  _HEADER RIGHT,5,"RIGHT"
 437      05524947 
 437      485400BF 
 438 072c D4F88C00 	  ldr T0,[UP,#COL]
 439 0730 00F10100 	  add T0,#1
 440 0734 3528     	  cmp T0,#53
 441 0736 02D5     	  bpl 1f 
 442 0738 C4F88C00 	  str T0,[UP,#COL]
 443 073c 10E1     	  _NEXT 
 444 073e 80EA0000 	1: eor T0,T0 
 445 0742 C4F88C00 	  str T0,[UP,#COL]
 446 0746 D4F88800 	  ldr T0,[UP,#ROW]
 447 074a 1828     	  cmp T0,#24
 448 074c 04D0     	  beq 2f 
 449 074e 00F10100 	  add T0,#1 
 450 0752 C4F88800 	  str T0,[UP,#ROW]
 451 0756 03E1     	  _NEXT 
 452              	// calling a colon word 
 453              	// from a code word   
 454 0758 48F804CD 	2: STMFD	RSP!,{IP}
 455 075c DFF8F4C0 	   ldr IP,=3f 
 456 0760 FEE0     	   b INEXT 
 457              	3: 
 458 0762 D9060000 	  _ADR SCROLLUP 
 459 0766 67090000 	  _UNNEST  
 460              	
 461              	// extract font pixel 
ARM GAS  forth.s 			page 28


 462              	FONT_PIXEL: // ( r -- 0|1 )
 463 076a 4FF08000 	    mov T0,#128 
 464 076e 06EA0006 	    and TOS,T0 
 465 0772 4FEAD616 	    lsr TOS,#7
 466 0776 F3E0     	    _NEXT 
 467              	
 468              	// increment x coord 
 469              	INCR_X: // ( x y -- x' y )
 470 0778 3868     	  ldr T0,[DSP]
 471 077a 00F10100 	  add T0,#1 
 472 077e 3860     	  str T0,[DSP]
 473 0780 EEE0     	  _NEXT 
 474              	
 475              	// shift font row data
 476              	NEXT_PIXEL:
 477 0782 4FEA4606 	    lsl TOS,#1
 478 0786 EBE0     	    _NEXT 
 479              	
 480              	
 481              	// CHAR_ROW 
 482              	// plot character row 
 483              	// {x y r -- }
 484              	//  _HEADER CHAR_ROW,7,"CHARROW"
 485              	CHAR_ROW:  
 486 0788 504700BF 	    _NEST 
 487 078c D10A0000 	    _DOLIT 5 
 487      05000000 
 488 0794 AD0B0000 	    _ADR TOR 
 489 0798 AD0B0000 	1:  _ADR TOR 
 490 079c 3D0E0000 	    _ADR DDUP 
 491 07a0 990B0000 	    _ADR RAT
 492 07a4 6B070000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 493 07a8 A9050000 	    _ADR PLOT 
 494 07ac 79070000 	    _ADR INCR_X 
 495 07b0 850B0000 	    _ADR RFROM 
 496 07b4 83070000 	    _ADR NEXT_PIXEL
 497              	    //_DOLIT 1 
 498              	    //_ADR LSHIFT 
 499 07b8 F50A0000 	    _DONXT 1b
 499      98070000 
 500 07c0 290E0000 	    _ADR TDROP 
 501 07c4 67090000 	    _UNNEST 
 502              	
 503              	
 504              	CHAR_FONT: // ( c -- c-adr )
 505 07c8 A6F12006 	   sub TOS,#32
 506 07cc 4FF00800 	   mov T0,#8 
 507 07d0 00FB06F6 	   mul TOS,T0 
 508 07d4 1D48     	   ldr T0,=font_6x8
 509 07d6 0644     	   add TOS,T0 
 510 07d8 C2E0     	   _NEXT 
 511              	
 512              	/**********************************
 513              	   TV-PUTC ( c -- )
 514              	   draw character in video buffer
 515              	**********************************/
 516 07da 24070000 	    _HEADER TVPUTC,7,"TV-PUTC"
ARM GAS  forth.s 			page 29


 516      0754562D 
 516      50555443 
 516      00BF
 517 07e8 504700BF 	    _NEST 
 518 07ec C9070000 	    _ADR CHAR_FONT 
 519 07f0 31050000 	    _ADR COLUMN 
 520 07f4 590B0000 	    _ADR AT
 521 07f8 6D050000 	    _ADR COLX  // x coord 
 522 07fc 45050000 	    _ADR CURSOR_ROW 
 523 0800 590B0000 	    _ADR AT    
 524 0804 59050000 	    _ADR ROWY  // {c-adr x y -- } 
 525 0808 ED0D0000 	    _ADR ROT  // TEST 
 526 080c D10A0000 	    _DOLIT 7   
 526      07000000 
 527 0814 AD0B0000 	    _ADR TOR  
 528 0818 AD0B0000 	1:  _ADR TOR  // { x y }
 529 081c 3D0E0000 	    _ADR DDUP  // { x y x y }
 530 0820 990B0000 	    _ADR RAT 
 531 0824 790B0000 	    _ADR CAT   // { x y x y r }
 532 0828 89070000 	    _ADR CHAR_ROW 
 533 082c 250D0000 	    _ADR ONEP // {x y' }
 534 0830 850B0000 	    _ADR RFROM 
 535 0834 250D0000 	    _ADR ONEP // {x y' c-adr' }
 536 0838 F50A0000 	    _DONXT 1b
 536      18080000 
 537 0840 290E0000 	    _ADR TDROP  
 538 0844 2D070000 	    _ADR RIGHT
 539 0848 67090000 	    _UNNEST  
 540              	
 541              	
 542              		.section .rodata 
 543              		.p2align 2
 544              	/********************************************
 545              	    TV font  ASCII 6 pixels x 8 pixels 
 546              	********************************************/
 547              	font_6x8:
 548 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 548      00000000 
 549 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 549      20002000 
 550 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 550      00000000 
 551 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 551      F8505000 
 552 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 552      28F02000 
 553 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 553      40981800 
 554 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 554      A8906800 
 555 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 555      00000000 
 556 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 556      40201000 
 557 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 557      10204000 
 558 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
ARM GAS  forth.s 			page 30


 558      A8200000 
 559 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 559      20200000 
 560 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 560      60204000 
 561 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 561      00000000 
 562 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 562      00606000 
 563 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 563      40800000 
 564 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 564      C8887000 
 565 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 565      2020F800 
 566 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 566      4080F800 
 567 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 567      0808F000 
 568 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 568      F8101000 
 569 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 569      0808F000 
 570 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 570      88887000 
 571 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 571      40404000 
 572 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 572      88887000 
 573 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 573      08087000 
 574 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 574      60600000 
 575 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 575      60204000 
 576 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 576      40201000 
 577 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 577      F8000000 
 578 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 578      10204000 
 579 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 579      20002000 
 580 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 580      A8A87000 
 581 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 581      88888800 
 582 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 582      8888F000 
 583 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 583      80807800 
 584 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 584      8888F000 
 585 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 585      8080F800 
 586 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 586      80808000 
ARM GAS  forth.s 			page 31


 587 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 587      88887000 
 588 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 588      88888800 
 589 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 589      20207000 
 590 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 590      08906000 
 591 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 591      A0908800 
 592 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 592      8080F800 
 593 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 593      88888800 
 594 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 594      98888800 
 595 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 595      88887000 
 596 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 596      80808000 
 597 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 597      A8987800 
 598 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 598      A0908800 
 599 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 599      0808F000 
 600 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 600      20202000 
 601 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 601      88887000 
 602 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 602      88502000 
 603 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 603      A8D88800 
 604 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 604      50888800 
 605 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 605      20202000 
 606 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 606      8080F800 
 607 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 607      40406000 
 608 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 608      10080000 
 609 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 609      08081800 
 610 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 610      00000000 
 611 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 611      0000F800 
 612 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 612      00000000 
 613 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 613      78887800 
 614 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 614      C888F000 
 615 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
ARM GAS  forth.s 			page 32


 615      80887000 
 616 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 616      98887800 
 617 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 617      F8807000 
 618 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 618      40404000 
 619 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 619      88780870 
 620 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 620      88888800 
 621 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 621      20202000 
 622 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 622      10906000 
 623 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 623      C0A09000 
 624 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 624      20207000 
 625 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 625      A8888800 
 626 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 626      88888800 
 627 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 627      88887000 
 628 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 628      88F08080 
 629 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 629      90B05018 
 630 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 630      80808000 
 631 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 631      7008F000 
 632 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 632      40483000 
 633 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 633      88986800 
 634 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 634      88502000 
 635 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 635      A8A85000 
 636 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 636      20508800 
 637 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 637      88780870 
 638 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 638      2040F800 
 639 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 639      40402000 
 640 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 640      20202000 
 641 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 641      20204000 
 642 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 642      10000000 
 643 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 643      FCFCFCFC 
ARM GAS  forth.s 			page 33


 644 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 644      10204000 
 645 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 645      40201000 
 646 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 646      20200000 
 647 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 647      A8702000 
 648 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 648      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	
  36              	/**********************************
  37              	  keyboard structure 
  38              	
  39              	struct {
  40              	    byte bitcntr; received bit counter 
  41              	    byte rxshift; shiftin keycode 
  42              	    byte flags; flags 
  43              	    byte ones; count bits to 1 
  44              	    }
  45              	
  46              	flags 
  47              	   :0 -> parity error flags 
ARM GAS  forth.s 			page 34


  48              	**********************************/
  49              	    .equ KBD_F_PAR_ERR,1
  50              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  51              	    .equ KBD_RXSHIFT,KBD_STRUCT+1
  52              	    .equ KBD_BITCNTR,KBD_STRUCT 
  53              	    .equ KBD_ONES,KBD_STRUCT+3 
  54              	
  55              	/**********************************
  56              	    kbd_isr
  57              	    interrupt service routine 
  58              	    EXTI0 connected to keyboard 
  59              	    clock signal and triggered 
  60              	    on falling edge 
  61              	**********************************/
  62              	    _GBL_FUNC kbd_isr 
  63 0858 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  63      C4F20102 
  64 0860 4FF00100 	    mov r0,#1 
  65 0864 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  66 0866 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  66      C4F20202 
  67 086e 108A     	    ldrh r0,[r2,#GPIO_IDR]
  68 0870 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  69 0874 0029     	    cmp r1,#0 
  70 0876 19D0     	    beq start_bit 
  71 0878 0929     	    cmp r1,#9 
  72 087a 22D0     	    beq parity_bit 
  73 087c 0A29     	    cmp r1,#10 
  74 087e 31D0     	    beq stop_bit 
  75 0880 94F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  76 0884 4FEA5202 	    lsr r2,#1 
  77 0888 10F4805F 	    tst r0,#(1<<12) // data bit 
  78 088c 07D0     	    beq 1f 
  79 088e 42F08002 	    orr r2,#(1<<7)
  80 0892 94F86F00 	    ldrb r0,[UP,#KBD_ONES]
  81 0896 00F10100 	    add r0,#1 
  82 089a 84F86F00 	    strb r0,[UP,#KBD_ONES]
  83 089e 84F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
  84 08a2 01F10101 	    add r1,#1 
  85 08a6 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  86 08aa 31E0     	    b 9f         
  87              	start_bit:
  88 08ac 01F10101 	    add r1,#1 
  89 08b0 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  90 08b4 81EA0101 	    eor r1,r1 
  91 08b8 84F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
  92 08bc 84F86F10 	    strb r1,[UP,#KBD_ONES]
  93 08c0 26E0     	    b 9f 
  94              	parity_bit:
  95 08c2 D4F86F10 	    ldr r1,[UP,#KBD_ONES]
  96 08c6 10F4805F 	    tst r0,#(1<<12)
  97 08ca 01D0     	    beq 1f 
  98 08cc 01F10101 	    add r1,#1 
  99 08d0 11F0010F 	1:  tst r1,#1 
 100 08d4 1CD1     	    bne 9f      
 101              	2: // parity error
 102 08d6 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 35


 103 08da 41F00101 	    orr r1,#KBD_F_PAR_ERR // parity error flags 
 104 08de 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 105 08e2 15E0     	    b 9f      
 106              	stop_bit:
 107 08e4 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 108 08e8 11F0010F 	    tst r1,#KBD_F_PAR_ERR 
 109 08ec 10D1     	    bne 9f // drop this code 
 110              	// store code in queue 
 111 08ee D4F88410 	    ldr r1,[UP,#KBD_QTAIL]
 112 08f2 04F17002 	    add r2,UP,#KBD_QUEUE
 113 08f6 94F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 114 08fa 5054     	    strb r0,[r2,r1]
 115 08fc 01F10101 	    add r1,#1
 116 0900 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 117 0904 84F88410 	    strb r1,[UP,#KBD_QTAIL]
 118 0908 80EA0000 	    eor r0,r0 
 119 090c A4F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 120 0910 7047     	9:  _RET 
 121              	    
 122              	/**********************************
 123              	    kbd_init 
 124              	    initialize keyboard 
 125              	    PS2 clock on PA11 
 126              	    PS2 data on PA12 
 127              	**********************************/
 128 0912 00BF     	    _GBL_FUNC kbd_init 
 129              	// configure EXTI0 on pin PA11 
 130 0914 4FF46052 	   _MOV32 r2,SYSCFG_BASE_ADR
 130      C4F20102 
 131 091c 4FF00B00 	   mov r0,#11 
 132 0920 9060     	   str r0,[R2,#SYSCFG_EXTICR1]
 133              	// interrupt triggered on falling edge 
 134 0922 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 134      C4F20102 
 135 092a 4FF00100 	   mov r0,#(1<<0)
 136 092e 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI0 
 137 0930 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 138              	// enable interrupt EXIT0 in NVIC 
 139 0932 4FF04000 	   mov r0,#(1<<6) // IRQ6
 140 0936 4FF46042 	   _MOV32 r2,NVIC_BASE_ADR
 140      CEF20002 
 141 093e D2F80011 	   ldr r1,[r2,#NVIC_ISER0]
 142 0942 41EA0001 	   orr r1,r0 
 143 0946 C2F80011 	   str r1,[r2,#NVIC_ISER0]
 144 094a 7047     	   _RET 
 145              	
 146              	
 147              	
 148              	
   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
ARM GAS  forth.s 			page 36


   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R12	is used as IP , inner interpreter address pointer 
  12              	*   UP  IS used AS WP 
  13              	*	WP 	is used as UP , working register 
  14              	*	R8 	is used as link register by _NEST macro it is initialized 
  15              	*  		NEST address and MUST BE PRESERVED.
  16              	*
  17              	*     Use USART1 for console I/O
  18              	*     port config: 115200 8N1 
  19              	*     TX on  PA9,  RX on PA10  
  20              	*
  21              	*     eForth is executed from flash, not copied to RAM
  22              	*     eForth use main stack R13 as return stack (thread stack not used) 
  23              	*
  24              	*     Forth return stack is at end of RAM (addr=0x200020000) and reserve 512 bytes
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Version 5.02, 09oct04cht
  42              	*	fOR ADuC702x from Analog Devices
  43              	*	Version 6.01, 10apr08cht a
  44              	*	.p2align 2 to at91sam7x256
  45              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  46              	*	Running under uVision3 RealView from Keil
  47              	*	Version 7.01, 29jun14cht
  48              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  49              	*	.p2aligned to eForth 2 Model
  50              	*	Assembled to flash memory and executed therefrom.
  51              	*	Version 7.10, 30jun14cht
  52              	*	Flash memory mapped to Page 0 where codes are executed
  53              	*	Version 7.20, 02jul14cht
  54              	*	Irreducible Complexity
  55              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  56              	*	TURNKEY saves current application from RAM to flash.
  57              	*********************************************************/
  58              	
  59              		.syntax unified
  60              		.cpu cortex-m4
  61              		.fpu softvfp  
  62              		.thumb
  63              	
  64              		.include "stm32f411ce.inc"
  65              		
ARM GAS  forth.s 			page 37


  66              		.section .text, "ax", %progbits
  67              	
  68              	/***********************************
  69              	//  Start of eForth system 
  70              	***********************************/
  71              	
  72              		.p2align 2 
  73              	
  74              	// PUSH TOS, to be used in colon definition 
  75              	TPUSH:
  76 094c 47F8046D 		_PUSH
  77 0950 06E0     		_NEXT
  78              	
  79              	// POP TOS, to be used in colon defintion  
  80              	TPOP:
  81 0952 57F8046B 		_POP 
  82 0956 03E0     		_NEXT
  83              	
  84              	// hi level word enter 
  85              	NEST: 
  86 0958 48F804CD 		STMFD	RSP!,{IP}
  87 095c 05F1030C 		ADD IP,WP,#3
  88              	// inner interprer
  89              	INEXT: 
  90 0960 5CF8045B 		LDR WP,[IP],#4 
  91 0964 2847     		BX WP  
  92              	UNNEST:
  93 0966 58F804CB 		LDMFD RSP!,{IP}
  94 096a 5CF8045B 		LDR WP,[IP],#4 
  95 096e 2847     		BX WP  
  96              	
  97              		.p2align 2 
  98              	
  99              	// compile "BX 	R8" 
 100              	// this is the only way 
 101              	// a colon defintion in RAM 
 102              	// can jump to NEST
 103              	// R8 is initialized to NEST address 
 104              	// and must be preserved   
 105              	COMPI_NEST:
 106 0970 04F13C01 		add T1,UP,#USER_CTOP 
 107 0974 0968     		ldr T1,[T1]
 108 0976 44F25072 		mov T2,#0x4700+(10<<3)
 109 097a 21F8022B 		strh T2,[T1],#2
 110 097e 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 111 0982 21F8022B 		strh T2,[T1],#2 
 112 0986 04F13C02 		add T2,UP,#USER_CTOP 
 113 098a 1160     		str T1,[T2]
 114 098c E8E7     		_NEXT  
 115              	
 116              	
 117              	// RANDOM ( n+ -- {0..n+ - 1} )
 118              	// return pseudo random number 
 119              	// REF: https://en.wikipedia.org/wiki/Xorshift
 120              	
 121 098e DE070000 		.word LINK 
 122 0992 06       	_RAND: .byte 6
ARM GAS  forth.s 			page 38


 123 0993 52414E44 		.ascii "RANDOM"
 123      4F4D
 124 0999 0000BF   		.p2align 2 
 125              	RAND:
 126 099c 504700BF 		_NEST
 127 09a0 910E0000 		_ADR ABSS   
 128 09a4 D10F0000 		_ADR SEED 
 129 09a8 590B0000 		_ADR AT 
 130 09ac 050C0000 		_ADR DUPP 
 131 09b0 D10A0000 		_DOLIT 13
 131      0D000000 
 132 09b8 B90C0000 		_ADR LSHIFT 
 133 09bc 710C0000 		_ADR XORR  
 134 09c0 050C0000 		_ADR DUPP 
 135 09c4 D10A0000 		_DOLIT 17 
 135      11000000 
 136 09cc A10C0000 		_ADR RSHIFT 
 137 09d0 710C0000 		_ADR XORR 
 138 09d4 050C0000 		_ADR DUPP
 139 09d8 D10A0000 		_DOLIT 5 
 139      05000000 
 140 09e0 B90C0000 		_ADR LSHIFT 
 141 09e4 710C0000 		_ADR XORR  
 142 09e8 050C0000 		_ADR DUPP 
 143 09ec D10F0000 		_ADR SEED 
 144 09f0 450B0000 		_ADR STORE 
 145 09f4 D10A0000 		_DOLIT 0x7FFFFFFF
 145      FFFFFF7F 
 146 09fc 490C0000 		_ADR ANDD 
 147 0a00 150C0000 		_ADR SWAP 
 148 0a04 35120000 		_ADR MODD 
 149 0a08 67090000 		_UNNEST 
 150              	
 151              	
 152              	// PAUSE ( u -- ) 
 153              	// suspend execution for u milliseconds
 154 0a0c 92090000 		.word _RAND
 155 0a10 05       	_PAUSE: .byte 5
 156 0a11 50415553 		.ascii "PAUSE"
 156      45
 157 0a16 00BF     		.p2align 2
 158              	PAUSE:
 159 0a18 504700BF 		_NEST 
 160 0a1c F90F0000 		_ADR TIMER 
 161 0a20 450B0000 		_ADR STORE 
 162              	PAUSE_LOOP:
 163 0a24 F90F0000 		_ADR TIMER 
 164 0a28 590B0000 		_ADR AT 
 165 0a2c 130B0000 		_QBRAN PAUSE_EXIT 
 165      3C0A0000 
 166 0a34 270B0000 		_BRAN PAUSE_LOOP 
 166      240A0000 
 167              	PAUSE_EXIT: 		
 168 0a3c 67090000 		_UNNEST 
 169              	
 170              	//  ULED ( T|F -- )
 171              	// control user LED, -1 ON, 0 OFF  
ARM GAS  forth.s 			page 39


 172 0a40 100A0000 		.word _PAUSE
 173 0a44 04       	_ULED: .byte 4
 174 0a45 554C4544 		.ascii "ULED"
 175 0a49 0000BF   		.p2align 2
 176              		.type ULED, %function 
 177              	ULED:
 178 0a4c 4FF40050 		mov T0,#(1<<LED_PIN)
 179 0a50 4FF40061 		_MOV32 T1,LED_GPIO 
 179      C4F20201 
 180 0a58 3600     		movs TOS,TOS 
 181 0a5a 57F8046B 		_POP
 182 0a5e 03D0     		beq ULED_OFF
 183 0a60 4FEA0040 		lsl T0,#16 
 184 0a64 8861     		str T0,[T1,#GPIO_BSRR]
 185 0a66 7BE7     		_NEXT 
 186              	ULED_OFF:
 187 0a68 8861     		str T0,[T1,#GPIO_BSRR]
 188 0a6a 79E7     		_NEXT    
 189              	
 190              	//    ?KEY	 ( -- c T | F )
 191              	// 	Return input character and true, or a false if no input.
 192 0a6c 440A0000 		.word	_ULED
 193 0a70 04       	_QRX:	.byte   4
 194 0a71 3F4B4559 		.ascii "?KEY"
 195 0a75 0000BF   		.p2align 2 
 196              	QKEY:
 197              	QRX: 
 198 0a78 47F8046D 		_PUSH
 199 0a7c A06D     		ldr T0,[UP,#RX_TAIL] 
 200 0a7e 616D     		ldr T1,[UP,#RX_HEAD]
 201 0a80 90EA0106 		eors TOS,T0,T1 
 202 0a84 0CD0     		beq 1f
 203 0a86 04F14400 		add T0,UP,#RX_QUEUE 
 204 0a8a 0844     		add T0,T1 
 205 0a8c 0678     		ldrb TOS,[T0]
 206 0a8e 01F10101 		add T1,#1 
 207 0a92 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 208 0a96 6165     		str T1,[UP,#RX_HEAD]
 209 0a98 47F8046D 		_PUSH 
 210 0a9c 4FF0FF36 		mov TOS,#-1
 211 0aa0 5EE7     	1:	_NEXT 
 212              	
 213              	//    TX!	 ( c -- )
 214              	// 	Send character c to the output device.
 215              	
 216 0aa2 700A0000 		.word	_QRX
 217 0aa6 04       	_TXSTO:	.byte 4
 218 0aa7 454D4954 		.ascii "EMIT"
 219 0aab 00       		.p2align 2 	
 220              	TXSTO:
 221              	EMIT:
 222              	TECHO:
 223 0aac 4FF48055 		_MOV32 WP,UART 
 223      C4F20105 
 224 0ab4 2868     	1:  ldr T0,[WP,#USART_SR]
 225 0ab6 10F0800F 	    tst T0,#0x80 // TXE flag 
 226 0aba FBD0     		beq 1b 
ARM GAS  forth.s 			page 40


 227 0abc 2E71     		strb TOS,[WP,#USART_DR]	 
 228 0abe 57F8046B 		_POP
 229 0ac2 4DE7     		_NEXT 
 230              		
 231              	/***************
 232              	//  The kernel
 233              	***************/
 234              	
 235              	//    NOP	( -- )
 236              	// 	do nothing.
 237              	
 238 0ac4 A60A0000 		.word	_TXSTO
 239 0ac8 03       	_NOP:	.byte   3
 240 0ac9 4E4F50   		.ascii "NOP"
 241              		.p2align 2 	
 242              	NOP:
 243 0acc 48E7     		_NEXT 
 244              	 
 245              	
 246              	//    doLIT	( -- w )
 247              	// 	Push an inline literal.
 248              	
 249              	// 	.word	_NOP
 250              	// _LIT	.byte   COMPO+5
 251              	// 	.ascii "doLIT"
 252 0ace 00BF     	 	.p2align 2 	
 253              	DOLIT:
 254 0ad0 47F8046D 		_PUSH				//  store TOS on data stack
 255 0ad4 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 256 0ad8 42E7     		_NEXT 
 257              	
 258              	//    EXECUTE	( ca -- )
 259              	// 	Execute the word at ca.
 260              	
 261 0ada C80A0000 		.word	_NOP
 262 0ade 07       	_EXECU:	.byte   7
 263 0adf 45584543 		.ascii "EXECUTE"
 263      555445
 264 0ae6 00BF     		.p2align 2 	
 265              	EXECU: 
 266 0ae8 46F00105 		ORR	WP,TOS,#1 
 267 0aec 57F8046B 		_POP
 268 0af0 2847     		BX WP 
 269 0af2 35E7     		_NEXT 
 270              	
 271              	//    next	( -- ) counter on R:
 272              	// 	Run time code for the single index loop.
 273              	// 	: next ( -- ) \ hilevel model
 274              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 275              	
 276              	// 	.word	_EXECU
 277              	// _DONXT	.byte   COMPO+4
 278              	// 	.ascii "next"
 279              	// 	.p2align 2 	
 280              	DONXT:
 281 0af4 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 282 0af8 22B9     		CBNZ T2,NEXT1 
ARM GAS  forth.s 			page 41


 283              		/* loop done */
 284 0afa 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 285 0afe 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 286 0b02 2DE7     		_NEXT
 287              	NEXT1:
 288              		/* decrement loop counter */
 289 0b04 A2F10102 		SUB	T2,T2,#1
 290 0b08 C8F80020 		STR	T2,[RSP]
 291 0b0c DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 292 0b10 26E7     		_NEXT 
 293              	
 294              	//    ?branch	( f -- )
 295              	// 	Branch if flag is zero.
 296              	
 297              	// 	.word	_DONXT
 298              	// _QBRAN	.byte   COMPO+7
 299              	// 	.ascii "?branch"
 300              	// 	.p2align 2 	
 301              	QBRAN:
 302 0b12 3600     		MOVS	TOS,TOS
 303 0b14 57F8046B 		_POP
 304 0b18 02D1     		BNE	QBRAN1
 305 0b1a DCF800C0 		LDR	IP,[IP]
 306 0b1e 1FE7     		_NEXT
 307              	QBRAN1:
 308 0b20 0CF1040C 	 	ADD	IP,IP,#4
 309 0b24 1CE7     		_NEXT
 310              	
 311              	//    branch	( -- )
 312              	// 	Branch to an inline address.
 313              	
 314              	// 	.word	_QBRAN
 315              	// _BRAN	.byte   COMPO+6
 316              	// 	.ascii "branch"
 317              	// 	.p2align 2 	
 318              	BRAN:
 319 0b26 DCF800C0 		LDR	IP,[IP]
 320 0b2a 19E7     		_NEXT
 321              	
 322              	//    EXIT	(  -- )
 323              	// 	Exit the currently executing command.
 324              	
 325 0b2c DE0A0000 		.word	_EXECU
 326 0b30 04       	_EXIT:	.byte   4
 327 0b31 45584954 		.ascii "EXIT"
 328 0b35 0000BF   		.p2align 2 	
 329              	EXIT:
 330 0b38 67090000 		_UNNEST
 331              	
 332              	//    !	   ( w a -- )
 333              	// 	Pop the data stack to memory.
 334              	
 335 0b3c 300B0000 		.word	_EXIT
 336 0b40 01       	_STORE:	.byte   1
 337 0b41 21       		.ascii "!"
 338 0b42 00BF     		.p2align 2 	
 339              	STORE:
ARM GAS  forth.s 			page 42


 340 0b44 57F8045B 		LDR	WP,[DSP],#4
 341 0b48 3560     		STR	WP,[TOS]
 342 0b4a 57F8046B 		_POP
 343 0b4e 07E7     		_NEXT 
 344              	
 345              	//    @	   ( a -- w )
 346              	// 	Push memory location to the data stack.
 347              	
 348 0b50 400B0000 		.word	_STORE
 349 0b54 01       	_AT:	.byte   1
 350 0b55 40       		.ascii "@"
 351 0b56 00BF     		.p2align 2 	
 352              	AT:
 353 0b58 3668     		LDR	TOS,[TOS]
 354 0b5a 01E7     		_NEXT 
 355              	
 356              	//    C!	  ( c b -- )
 357              	// 	Pop the data stack to byte memory.
 358              	
 359 0b5c 540B0000 		.word	_AT
 360 0b60 02       	_CSTOR:	.byte   2
 361 0b61 4321     		.ascii "C!"
 362 0b63 00       		.p2align 2 	
 363              	CSTOR:
 364 0b64 57F8045B 		LDR	WP,[DSP],#4
 365 0b68 3570     		STRB WP,[TOS]
 366 0b6a 57F8046B 		_POP
 367 0b6e F7E6     		_NEXT
 368              	
 369              	//    C@	  ( b -- c )
 370              	// 	Push byte memory location to the data stack.
 371              	
 372 0b70 600B0000 		.word	_CSTOR
 373 0b74 02       	_CAT:	.byte   2
 374 0b75 4340     		.ascii "C@"
 375 0b77 00       		.p2align 2 	
 376              	CAT:
 377 0b78 3678     		LDRB	TOS,[TOS]
 378 0b7a F1E6     		_NEXT 
 379              	
 380              	//    R>	  ( -- w )
 381              	// 	Pop the return stack to the data stack.
 382              	
 383 0b7c 740B0000 		.word	_CAT
 384 0b80 02       	_RFROM:	.byte   2
 385 0b81 523E     		.ascii "R>"
 386 0b83 00       		.p2align 2 	
 387              	RFROM:
 388 0b84 47F8046D 		_PUSH
 389 0b88 58F8046B 		LDR	TOS,[RSP],#4
 390 0b8c E8E6     		_NEXT 
 391              	
 392              	//    R@	  ( -- w )
 393              	// 	Copy top of return stack to the data stack.
 394              	
 395 0b8e 800B0000 		.word	_RFROM
 396 0b92 02       	_RAT:	.byte   2
ARM GAS  forth.s 			page 43


 397 0b93 5240     		.ascii "R@"
 398 0b95 0000BF   		.p2align 2 	
 399              	RAT:
 400 0b98 47F8046D 		_PUSH
 401 0b9c D8F80060 		LDR	TOS,[RSP]
 402 0ba0 DEE6     		_NEXT 
 403              	
 404              	//    >R	  ( w -- )
 405              	// 	Push the data stack to the return stack.
 406              	
 407 0ba2 920B0000 		.word	_RAT
 408 0ba6 42       	_TOR:	.byte   COMPO+2
 409 0ba7 3E52     		.ascii ">R"
 410 0ba9 0000BF   		.p2align 2 	
 411              	TOR:
 412 0bac 48F8046D 		STR	TOS,[RSP,#-4]!
 413 0bb0 57F8046B 		_POP
 414 0bb4 D4E6     		_NEXT
 415              	
 416              	//	RP! ( u -- )
 417              	// initialize RPP with u 
 418 0bb6 A60B0000 		.word _TOR 
 419 0bba 03       	_RPSTOR: .byte 3 
 420 0bbb 525021   		.ascii "RP!" 
 421 0bbe 00BF     		.p2align 2 
 422              	RPSTOR:
 423 0bc0 B046     		MOV RSP,TOS 
 424 0bc2 57F8046B 		_POP  
 425 0bc6 CBE6     		_NEXT 
 426              	
 427              	
 428              	//	SP! ( u -- )
 429              	// initialize SPP with u 
 430 0bc8 BA0B0000 		.word _RPSTOR  
 431 0bcc 03       	_SPSTOR: .byte 3 
 432 0bcd 535021   		.ascii "SP!" 
 433              		.p2align 2 
 434              	SPSTOR:
 435 0bd0 3746     		MOV DSP,TOS 
 436 0bd2 86EA0606 		EOR TOS,TOS,TOS 
 437 0bd6 C3E6     		_NEXT 
 438              	
 439              	//    SP@	 ( -- a )
 440              	// 	Push the current data stack pointer.
 441              	
 442 0bd8 CC0B0000 		.word	_SPSTOR
 443 0bdc 03       	_SPAT:	.byte   3
 444 0bdd 535040   		.ascii "SP@"
 445              		.p2align 2 	
 446              	SPAT:
 447 0be0 47F8046D 		_PUSH
 448 0be4 3E46     		MOV	TOS,DSP
 449 0be6 BBE6     		_NEXT
 450              	
 451              	//    DROP	( w -- )
 452              	// 	Discard top stack item.
 453              	
ARM GAS  forth.s 			page 44


 454 0be8 DC0B0000 		.word	_SPAT
 455 0bec 04       	_DROP:	.byte   4
 456 0bed 44524F50 		.ascii "DROP"
 457 0bf1 0000BF   		.p2align 2 	
 458              	DROP:
 459 0bf4 57F8046B 		_POP
 460 0bf8 B2E6     		_NEXT 
 461              	
 462              	//    DUP	 ( w -- w w )
 463              	// 	Duplicate the top stack item.
 464              	
 465 0bfa EC0B0000 		.word	_DROP
 466 0bfe 03       	_DUPP:	.byte   3
 467 0bff 445550   		.ascii "DUP"
 468 0c02 00BF     		.p2align 2 	
 469              	DUPP:
 470 0c04 47F8046D 		_PUSH
 471 0c08 AAE6     		_NEXT 
 472              	
 473              	//    SWAP	( w1 w2 -- w2 w1 )
 474              	// 	Exchange top two stack items.
 475              	
 476 0c0a FE0B0000 		.word	_DUPP
 477 0c0e 04       	_SWAP:	.byte   4
 478 0c0f 53574150 		.ascii "SWAP"
 479 0c13 00       		.p2align 2 	
 480              	SWAP:
 481 0c14 3D68     		LDR	WP,[DSP]
 482 0c16 3E60     		STR	TOS,[DSP]
 483 0c18 2E46     		MOV	TOS,WP
 484 0c1a A1E6     		_NEXT 
 485              	
 486              	//    OVER	( w1 w2 -- w1 w2 w1 )
 487              	// 	Copy second stack item to top.
 488              	
 489 0c1c 0E0C0000 		.word	_SWAP
 490 0c20 04       	_OVER:	.byte   4
 491 0c21 4F564552 		.ascii "OVER"
 492 0c25 0000BF   		.p2align 2 	
 493              	OVER:
 494 0c28 47F8046D 		_PUSH
 495 0c2c 7E68     		LDR	TOS,[DSP,#4]
 496 0c2e 97E6     		_NEXT 
 497              	
 498              	//    0<	  ( n -- t )
 499              	// 	Return true if n is negative.
 500              	
 501 0c30 200C0000 		.word	_OVER
 502 0c34 02       	_ZLESS:	.byte   2
 503 0c35 303C     		.ascii "0<"
 504 0c37 00       		.p2align 2 	
 505              	ZLESS:
 506              	//	MOV	WP,#0
 507              	//	ADD	TOS,WP,TOS,ASR #32
 508 0c38 4FEAE676 		ASR TOS,#31
 509 0c3c 90E6     		_NEXT 
 510              	
ARM GAS  forth.s 			page 45


 511              	//    AND	 ( w w -- w )
 512              	// 	Bitwise AND.
 513              	
 514 0c3e 340C0000 		.word	_ZLESS
 515 0c42 03       	_ANDD:	.byte   3
 516 0c43 414E44   		.ascii "AND"
 517 0c46 00BF     		.p2align 2 	
 518              	ANDD:
 519 0c48 57F8045B 		LDR	WP,[DSP],#4
 520 0c4c 06EA0506 		AND	TOS,TOS,WP
 521 0c50 86E6     		_NEXT 
 522              	
 523              	//    OR	  ( w w -- w )
 524              	// 	Bitwise inclusive OR.
 525              	
 526 0c52 420C0000 		.word	_ANDD
 527 0c56 02       	_ORR:	.byte   2
 528 0c57 4F52     		.ascii "OR"
 529 0c59 0000BF   		.p2align 2 	
 530              	ORR:
 531 0c5c 57F8045B 		LDR	WP,[DSP],#4
 532 0c60 46EA0506 		ORR	TOS,TOS,WP
 533 0c64 7CE6     		_NEXT 
 534              	
 535              	//    XOR	 ( w w -- w )
 536              	// 	Bitwise exclusive OR.
 537              	
 538 0c66 560C0000 		.word	_ORR
 539 0c6a 03       	_XORR:	.byte   3
 540 0c6b 584F52   		.ascii "XOR"
 541 0c6e 00BF     		.p2align 2 	
 542              	XORR:
 543 0c70 57F8045B 		LDR	WP,[DSP],#4
 544 0c74 86EA0506 		EOR	TOS,TOS,WP
 545 0c78 72E6     		_NEXT 
 546              	
 547              	//    UM+	 ( w w -- w cy )
 548              	// 	Add two numbers, return the sum and carry flag.
 549              	
 550 0c7a 6A0C0000 		.word	_XORR
 551 0c7e 03       	_UPLUS:	.byte   3
 552 0c7f 554D2B   		.ascii "UM+"
 553 0c82 00BF     		.p2align 2 	
 554              	UPLUS:
 555 0c84 3D68     		LDR	WP,[DSP]
 556 0c86 AD19     		ADDS	WP,WP,TOS
 557 0c88 4FF00006 		MOV	TOS,#0
 558 0c8c 46F10006 		ADC	TOS,TOS,#0
 559 0c90 3D60     		STR	WP,[DSP]
 560 0c92 65E6     		_NEXT 
 561              	
 562              	//    RSHIFT	 ( w # -- w )
 563              	// 	arithmetic Right shift # bits.
 564              	
 565 0c94 7E0C0000 		.word	_UPLUS
 566 0c98 06       	_RSHIFT:	.byte   6
 567 0c99 52534849 		.ascii "RSHIFT"
ARM GAS  forth.s 			page 46


 567      4654
 568 0c9f 00       		.p2align 2 	
 569              	RSHIFT:
 570 0ca0 57F8045B 		LDR	WP,[DSP],#4
 571 0ca4 45FA06F6 		MOV	TOS,WP,ASR TOS
 572 0ca8 5AE6     		_NEXT 
 573              	
 574              	//    LSHIFT	 ( w # -- w )
 575              	// 	Right shift # bits.
 576              	
 577 0caa 980C0000 		.word	_RSHIFT
 578 0cae 06       	_LSHIFT:	.byte   6
 579 0caf 4C534849 		.ascii "LSHIFT"
 579      4654
 580 0cb5 0000BF   		.p2align 2 	
 581              	LSHIFT:
 582 0cb8 57F8045B 		LDR	WP,[DSP],#4
 583 0cbc 05FA06F6 		MOV	TOS,WP,LSL TOS
 584 0cc0 4EE6     		_NEXT
 585              	
 586              	//    +	 ( w w -- w )
 587              	// 	Add.
 588              	
 589 0cc2 AE0C0000 		.word	_LSHIFT
 590 0cc6 01       	_PLUS:	.byte   1
 591 0cc7 2B       		.ascii "+"
 592              		.p2align 2 	
 593              	PLUS:
 594 0cc8 57F8045B 		LDR	WP,[DSP],#4
 595 0ccc 2E44     		ADD	TOS,TOS,WP
 596 0cce 47E6     		_NEXT 
 597              	
 598              	//    -	 ( w w -- w )
 599              	// 	Subtract.
 600              	
 601 0cd0 C60C0000 		.word	_PLUS
 602 0cd4 01       	_SUBB:	.byte   1
 603 0cd5 2D       		.ascii "-"
 604 0cd6 00BF     		.p2align 2 	
 605              	SUBB:
 606 0cd8 57F8045B 		LDR	WP,[DSP],#4
 607 0cdc C6EB0506 		RSB	TOS,TOS,WP
 608 0ce0 3EE6     		_NEXT 
 609              	
 610              	//    *	 ( w w -- w )
 611              	// 	Multiply.
 612              	
 613 0ce2 D40C0000 		.word	_SUBB
 614 0ce6 01       	_STAR:	.byte   1
 615 0ce7 2A       		.ascii "*"
 616              		.p2align 2 	
 617              	STAR:
 618 0ce8 57F8045B 		LDR	WP,[DSP],#4
 619 0cec 05FB06F6 		MUL	TOS,WP,TOS
 620 0cf0 36E6     		_NEXT 
 621              	
 622              	//    UM*	 ( w w -- ud )
ARM GAS  forth.s 			page 47


 623              	// 	Unsigned multiply.
 624              	
 625 0cf2 E60C0000 		.word	_STAR
 626 0cf6 03       	_UMSTA:	.byte   3
 627 0cf7 554D2A   		.ascii "UM*"
 628 0cfa 00BF     		.p2align 2 	
 629              	UMSTA:
 630 0cfc 3D68     		LDR	WP,[DSP]
 631 0cfe A6FB0523 		UMULL	T2,T3,TOS,WP
 632 0d02 3A60     		STR	T2,[DSP]
 633 0d04 1E46     		MOV	TOS,T3
 634 0d06 2BE6     		_NEXT 
 635              	
 636              	//    M*	 ( w w -- d )
 637              	// 	signed multiply.
 638              	
 639 0d08 F60C0000 		.word	_UMSTA
 640 0d0c 02       	_MSTAR:	.byte   2
 641 0d0d 4D2A     		.ascii "M*"
 642 0d0f 00       		.p2align 2 	
 643              	MSTAR:
 644 0d10 3D68     		LDR	WP,[DSP]
 645 0d12 86FB0523 		SMULL	T2,T3,TOS,WP
 646 0d16 3A60     		STR	T2,[DSP]
 647 0d18 1E46     		MOV	TOS,T3
 648 0d1a 21E6     		_NEXT 
 649              	
 650              	//    1+	 ( w -- w+1 )
 651              	// 	Add 1.
 652              	
 653 0d1c 0C0D0000 		.word	_MSTAR
 654 0d20 02       	_ONEP:	.byte   2
 655 0d21 312B     		.ascii "1+"
 656 0d23 00       		.p2align 2 	
 657              	ONEP:
 658 0d24 06F10106 		ADD	TOS,TOS,#1
 659 0d28 1AE6     		_NEXT 
 660              	
 661              	//    1-	 ( w -- w-1 )
 662              	// 	Subtract 1.
 663              	
 664 0d2a 200D0000 		.word	_ONEP
 665 0d2e 02       	_ONEM:	.byte   2
 666 0d2f 312D     		.ascii "1-"
 667 0d31 0000BF   		.p2align 2 	
 668              	ONEM:
 669 0d34 A6F10106 		SUB	TOS,TOS,#1
 670 0d38 12E6     		_NEXT 
 671              	
 672              	//    2+	 ( w -- w+2 )
 673              	// 	Add 1.
 674              	
 675 0d3a 2E0D0000 		.word	_ONEM
 676 0d3e 02       	_TWOP:	.byte   2
 677 0d3f 322B     		.ascii "2+"
 678 0d41 0000BF   		.p2align 2 	
 679              	TWOP:
ARM GAS  forth.s 			page 48


 680 0d44 06F10206 		ADD	TOS,TOS,#2
 681 0d48 0AE6     		_NEXT
 682              	
 683              	//    2-	 ( w -- w-2 )
 684              	// 	Subtract 2.
 685              	
 686 0d4a 3E0D0000 		.word	_TWOP
 687 0d4e 02       	_TWOM:	.byte   2
 688 0d4f 322D     		.ascii "2-"
 689 0d51 0000BF   		.p2align 2 	
 690              	TWOM:
 691 0d54 A6F10206 		SUB	TOS,TOS,#2
 692 0d58 02E6     		_NEXT
 693              	
 694              	//    CELL+	( w -- w+4 )
 695              	// 	Add CELLL.
 696              	
 697 0d5a 4E0D0000 		.word	_TWOM
 698 0d5e 05       	_CELLP:	.byte   5
 699 0d5f 43454C4C 		.ascii "CELL+"
 699      2B
 700              		.p2align 2 	
 701              	CELLP:
 702 0d64 06F10406 		ADD	TOS,TOS,#CELLL
 703 0d68 FAE5     		_NEXT
 704              	
 705              	//    CELL-	( w -- w-4 )
 706              	// 	Subtract CELLL.
 707              	
 708 0d6a 5E0D0000 		.word	_CELLP
 709 0d6e 05       	_CELLM:	.byte   5
 710 0d6f 43454C4C 		.ascii "CELL-"
 710      2D
 711              		.p2align 2 	
 712              	CELLM:
 713 0d74 A6F10406 		SUB	TOS,TOS,#CELLL
 714 0d78 F2E5     		_NEXT
 715              	 
 716              	//    BL	( -- 32 )
 717              	// 	Blank (ASCII space).
 718              	
 719 0d7a 6E0D0000 		.word	_CELLM
 720 0d7e 02       	_BLANK:	.byte   2
 721 0d7f 424C     		.ascii "BL"
 722 0d81 0000BF   		.p2align 2 	
 723              	BLANK:
 724 0d84 47F8046D 		_PUSH
 725 0d88 4FF02006 		MOV	TOS,#32
 726 0d8c E8E5     		_NEXT 
 727              	
 728              	//    CELLS	( w -- w*4 )
 729              	// 	Multiply 4.
 730              	
 731 0d8e 7E0D0000 		.word	_BLANK
 732 0d92 05       	_CELLS:	.byte   5
 733 0d93 43454C4C 		.ascii "CELLS"
 733      53
ARM GAS  forth.s 			page 49


 734              		.p2align 2 	
 735              	CELLS:
 736 0d98 4FEA8606 		MOV	TOS,TOS,LSL#2
 737 0d9c E0E5     		_NEXT
 738              	
 739              	//    CELL/	( w -- w/4 )
 740              	// 	Divide by 4.
 741              	
 742 0d9e 920D0000 		.word	_CELLS
 743 0da2 05       	_CELLSL:	.byte   5
 744 0da3 43454C4C 		.ascii "CELL/"
 744      2F
 745              		.p2align 2 	
 746              	CELLSL:
 747 0da8 4FEAA606 		MOV	TOS,TOS,ASR#2
 748 0dac D8E5     		_NEXT
 749              	
 750              	//    2*	( w -- w*2 )
 751              	// 	Multiply 2.
 752              	
 753 0dae A20D0000 		.word	_CELLSL
 754 0db2 02       	_TWOST:	.byte   2
 755 0db3 322A     		.ascii "2*"
 756 0db5 0000BF   		.p2align 2 	
 757              	TWOST:
 758 0db8 4FEA4606 		MOV	TOS,TOS,LSL#1
 759 0dbc D0E5     		_NEXT
 760              	
 761              	//    2/	( w -- w/2 )
 762              	// 	Divide by 2.
 763              	
 764 0dbe B20D0000 		.word	_TWOST
 765 0dc2 02       	_TWOSL:	.byte   2
 766 0dc3 322F     		.ascii "2/"
 767 0dc5 0000BF   		.p2align 2 	
 768              	TWOSL:
 769 0dc8 4FEA6606 		MOV	TOS,TOS,ASR#1
 770 0dcc C8E5     		_NEXT
 771              	
 772              	//    ?DUP	( w -- w w | 0 )
 773              	// 	Conditional duplicate.
 774              	
 775 0dce C20D0000 		.word	_TWOSL
 776 0dd2 04       	_QDUP:	.byte   4
 777 0dd3 3F445550 		.ascii "?DUP"
 778 0dd7 00       		.p2align 2 	
 779              	QDUP:
 780 0dd8 3500     		MOVS	WP,TOS
 781 0dda 18BF     		IT NE 
 782 0ddc 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 783 0de0 BEE5     		_NEXT
 784              	
 785              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 786              	// 	Rotate top 3 items.
 787              	
 788 0de2 D20D0000 		.word	_QDUP
 789 0de6 03       	_ROT:	.byte   3
ARM GAS  forth.s 			page 50


 790 0de7 524F54   		.ascii "ROT"
 791 0dea 00BF     		.p2align 2 	
 792              	ROT:
 793 0dec 3868     		LDR	T0,[DSP]  // w2 
 794 0dee 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 795 0df0 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 796 0df2 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 797 0df4 B4E5     		_NEXT
 798              	
 799              	// -ROT ( w1 w2 w3 -- w3 w1 w2 )
 800              	// left rotate top 3 elements 
 801 0df6 E60D0000 		.word _ROT 
 802 0dfa 04       	_NROT: .byte 4 
 803 0dfb 2D524F54 		.ascii "-ROT"
 804 0dff 00       		.p2align 2 
 805              	NROT:
 806 0e00 7868     		LDR T0,[DSP,#4]
 807 0e02 7E60     		STR TOS,[DSP,#4]	
 808 0e04 3E68     		LDR TOS,[DSP]
 809 0e06 3860     		STR T0,[DSP]
 810 0e08 AAE5     		_NEXT 
 811              	
 812              	//    2DROP	( w1 w2 -- )
 813              	// 	Drop top 2 items.
 814              	
 815 0e0a FA0D0000 		.word	_NROT
 816 0e0e 05       	_DDROP:	.byte   5
 817 0e0f 3244524F 		.ascii "2DROP"
 817      50
 818              		.p2align 2 	
 819              	DDROP:
 820 0e14 57F8046B 		_POP
 821 0e18 57F8046B 		_POP
 822 0e1c A0E5     		_NEXT 
 823              	
 824 0e1e 0E0E0000 		.word _DDROP 
 825 0e22 05       	_TDROP: .byte 5 
 826 0e23 3344524F 		.ascii "3DROP"
 826      50
 827              		.p2align 2
 828              	TDROP:
 829 0e28 07F10807 	    add DSP,#8 
 830 0e2c 57F8046B 	    _POP 
 831 0e30 96E5     	    _NEXT 
 832              	
 833              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 834              	// 	Duplicate top 2 items.
 835              	
 836 0e32 220E0000 		.word	_TDROP
 837 0e36 04       	_DDUP:	.byte   4
 838 0e37 32445550 		.ascii "2DUP"
 839 0e3b 00       		.p2align 2 	
 840              	DDUP:
 841 0e3c 3868     		LDR	T0,[DSP] // w1
 842 0e3e 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 843 0e42 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 844 0e46 8BE5     		_NEXT
ARM GAS  forth.s 			page 51


 845              	
 846              	//    D+	( d1 d2 -- d3 )
 847              	// 	Add top 2 double numbers.
 848              	
 849 0e48 360E0000 		.word	_DDUP
 850 0e4c 02       	_DPLUS:	.byte   2
 851 0e4d 442B     		.ascii "D+"
 852 0e4f 00       		.p2align 2 	
 853              	DPLUS:
 854 0e50 57F8045B 		LDR	WP,[DSP],#4
 855 0e54 57F8042B 		LDR	T2,[DSP],#4
 856 0e58 3B68     		LDR	T3,[DSP]
 857 0e5a ED18     		ADDS	WP,WP,T3
 858 0e5c 3D60     		STR	WP,[DSP]
 859 0e5e 46EB0206 		ADC	TOS,TOS,T2
 860 0e62 7DE5     		_NEXT
 861              	
 862              	//    NOT	 ( w -- !w )
 863              	// 	1"s complement.
 864              	
 865 0e64 4C0E0000 		.word	_DPLUS
 866 0e68 03       	_INVER:	.byte   3
 867 0e69 4E4F54   		.ascii "NOT"
 868              		.p2align 2 	
 869              	INVER:
 870 0e6c 6FEA0606 		MVN	TOS,TOS
 871 0e70 76E5     		_NEXT
 872              	
 873              	//    NEGATE	( w -- -w )
 874              	// 	2's complement.
 875              	
 876 0e72 680E0000 		.word	_INVER
 877 0e76 06       	_NEGAT:	.byte   6
 878 0e77 4E454741 		.ascii "NEGATE"
 878      5445
 879 0e7d 0000BF   		.p2align 2 	
 880              	NEGAT:
 881 0e80 C6F10006 		RSB	TOS,TOS,#0
 882 0e84 6CE5     		_NEXT
 883              	
 884              	//    ABS	 ( w -- |w| )
 885              	// 	Absolute.
 886              	
 887 0e86 760E0000 		.word	_NEGAT
 888 0e8a 03       	_ABSS:	.byte   3
 889 0e8b 414253   		.ascii "ABS"
 890 0e8e 00BF     		.p2align 2 	
 891              	ABSS:
 892 0e90 16F0004F 		TST	TOS,#0x80000000
 893 0e94 18BF     		IT NE
 894 0e96 7642     	    RSBNE   TOS,TOS,#0
 895 0e98 62E5     		_NEXT
 896              	
 897              	//  0= ( w -- f )
 898              	// TOS==0?
 899              	
 900 0e9a 8A0E0000 		.word _ABSS
ARM GAS  forth.s 			page 52


 901 0e9e 02       	_ZEQUAL: .byte 2
 902 0e9f 303D     		.ascii "0="
 903 0ea1 0000BF   		.p2align 2
 904              	ZEQUAL:
 905 0ea4 16B9     		cbnz TOS,1f
 906 0ea6 4FF0FF36 		mov TOS,#-1
 907 0eaa 59E5     		_NEXT 
 908 0eac 86EA0606 	1:  eor TOS,TOS,TOS  
 909 0eb0 56E5     		_NEXT 	
 910              	
 911              	//    =	 ( w w -- t )
 912              	// 	Equal?
 913              	
 914 0eb2 9E0E0000 		.word	_ZEQUAL
 915 0eb6 01       	_EQUAL:	.byte   1
 916 0eb7 3D       		.ascii "="
 917              		.p2align 2 	
 918              	EQUAL:
 919 0eb8 57F8045B 		LDR	WP,[DSP],#4
 920 0ebc AE42     		CMP	TOS,WP
 921 0ebe 0CBF     		ITE EQ 
 922 0ec0 6FF00006 	    MVNEQ	TOS,#0
 923 0ec4 0026     		MOVNE	TOS,#0
 924 0ec6 4BE5     		_NEXT
 925              	
 926              	//    U<	 ( w w -- t )
 927              	// 	Unsigned less?
 928              	
 929 0ec8 B60E0000 		.word	_EQUAL
 930 0ecc 02       	_ULESS:	.byte   2
 931 0ecd 553C     		.ascii "U<"
 932 0ecf 00       		.p2align 2 	
 933              	ULESS:
 934 0ed0 57F8045B 		LDR	WP,[DSP],#4
 935 0ed4 B542     		CMP	WP,TOS
 936 0ed6 34BF     		ITE CC 
 937 0ed8 6FF00006 		MVNCC	TOS,#0
 938 0edc 0026     		MOVCS	TOS,#0
 939 0ede 3FE5     		_NEXT
 940              	
 941              	//    <	( w w -- t )
 942              	// 	Less?
 943              	
 944 0ee0 CC0E0000 		.word	_ULESS
 945 0ee4 01       	_LESS:	.byte   1
 946 0ee5 3C       		.ascii "<"
 947 0ee6 00BF     		.p2align 2 	
 948              	LESS:
 949 0ee8 57F8045B 		LDR	WP,[DSP],#4
 950 0eec B542     		CMP	WP,TOS
 951 0eee B4BF     	    ITE LT
 952 0ef0 6FF00006 		MVNLT	TOS,#0
 953 0ef4 0026     		MOVGE	TOS,#0
 954 0ef6 33E5     		_NEXT 
 955              	
 956              	//    >	( w w -- t )
 957              	// 	greater?
ARM GAS  forth.s 			page 53


 958              	
 959 0ef8 E40E0000 		.word	_LESS
 960 0efc 01       	_GREAT:	.byte   1
 961 0efd 3E       		.ascii ">"
 962 0efe 00BF     		.p2align 2 	
 963              	GREAT:
 964 0f00 57F8045B 		LDR	WP,[DSP],#4
 965 0f04 B542     		CMP	WP,TOS
 966 0f06 CCBF     		ITE GT
 967 0f08 6FF00006 	    MVNGT	TOS,#0
 968 0f0c 0026     		MOVLE	TOS,#0
 969 0f0e 27E5     		_NEXT
 970              	
 971              	//    MAX	 ( w w -- max )
 972              	// 	Leave maximum.
 973              	
 974 0f10 FC0E0000 		.word	_GREAT
 975 0f14 03       	_MAX:	.byte   3
 976 0f15 4D4158   		.ascii "MAX"
 977              		.p2align 2 	
 978              	MAX:
 979 0f18 57F8045B 		LDR	WP,[DSP],#4
 980 0f1c B542     		CMP	WP,TOS
 981 0f1e C8BF     		IT GT 
 982 0f20 2E46     		MOVGT	TOS,WP
 983 0f22 1DE5     		_NEXT 
 984              	
 985              	//    MIN	 ( w w -- min )
 986              	// 	Leave minimum.
 987              	
 988 0f24 140F0000 		.word	_MAX
 989 0f28 03       	_MIN:	.byte   3
 990 0f29 4D494E   		.ascii "MIN"
 991              		.p2align 2 	
 992              	MIN:
 993 0f2c 57F8045B 		LDR	WP,[DSP],#4
 994 0f30 B542     		CMP	WP,TOS
 995 0f32 B8BF     		IT LT
 996 0f34 2E46     		MOVLT	TOS,WP
 997 0f36 13E5     		_NEXT
 998              	
 999              	//    +!	 ( w a -- )
 1000              	// 	Add to memory.
 1001              	
 1002 0f38 280F0000 		.word	_MIN
 1003 0f3c 02       	_PSTOR:	.byte   2
 1004 0f3d 2B21     		.ascii "+!"
 1005 0f3f 00       		.p2align 2 	
 1006              	PSTOR:
 1007 0f40 57F8045B 		LDR	WP,[DSP],#4
 1008 0f44 3268     		LDR	T2,[TOS]
 1009 0f46 2A44     		ADD	T2,T2,WP
 1010 0f48 3260     		STR	T2,[TOS]
 1011 0f4a 57F8046B 		_POP
 1012 0f4e 07E5     		_NEXT
 1013              	
 1014              	//    2!	 ( d a -- )
ARM GAS  forth.s 			page 54


 1015              	// 	Store double number.
 1016              	
 1017 0f50 3C0F0000 		.word	_PSTOR
 1018 0f54 02       	_DSTOR:	.byte   2
 1019 0f55 3221     		.ascii "2!"
 1020 0f57 00       		.p2align 2 	
 1021              	DSTOR:
 1022 0f58 57F8045B 		LDR	WP,[DSP],#4
 1023 0f5c 57F8042B 		LDR	T2,[DSP],#4
 1024 0f60 46F8045B 		STR	WP,[TOS],#4
 1025 0f64 3260     		STR	T2,[TOS]
 1026 0f66 57F8046B 		_POP
 1027 0f6a F9E4     		_NEXT
 1028              	
 1029              	//    2@	 ( a -- d )
 1030              	// 	Fetch double number.
 1031              	
 1032 0f6c 540F0000 		.word	_DSTOR
 1033 0f70 02       	_DAT:	.byte   2
 1034 0f71 3240     		.ascii "2@"
 1035 0f73 00       		.p2align 2 	
 1036              	DAT:
 1037 0f74 7568     		LDR	WP,[TOS,#4]
 1038 0f76 47F8045D 		STR	WP,[DSP,#-4]!
 1039 0f7a 3668     		LDR	TOS,[TOS]
 1040 0f7c F0E4     		_NEXT
 1041              	
 1042              	//    COUNT	( b -- b+1 c )
 1043              	// 	Fetch length of string.
 1044              	
 1045 0f7e 700F0000 		.word	_DAT
 1046 0f82 05       	_COUNT:	.byte   5
 1047 0f83 434F554E 		.ascii "COUNT"
 1047      54
 1048              		.p2align 2 	
 1049              	COUNT:
 1050 0f88 16F8015B 		LDRB	WP,[TOS],#1
 1051 0f8c 47F8046D 		_PUSH
 1052 0f90 2E46     		MOV	TOS,WP
 1053 0f92 E5E4     		_NEXT
 1054              	
 1055              	//    DNEGATE	( d -- -d )
 1056              	// 	Negate double number.
 1057              	
 1058 0f94 820F0000 		.word	_COUNT
 1059 0f98 07       	_DNEGA:	.byte   7
 1060 0f99 444E4547 		.ascii "DNEGATE"
 1060      415445
 1061              		.p2align 2 	
 1062              	DNEGA:
 1063 0fa0 3D68     		LDR	WP,[DSP]
 1064 0fa2 A2EB0202 		SUB	T2,T2,T2
 1065 0fa6 551B     		SUBS WP,T2,WP
 1066 0fa8 62EB0606 		SBC	TOS,T2,TOS
 1067 0fac 3D60     		STR	WP,[DSP]
 1068 0fae D7E4     		_NEXT
 1069              	
ARM GAS  forth.s 			page 55


 1070              	// **************************************************************************
 1071              	//  System and user variables
 1072              	
 1073              	//    doVAR	( -- a )
 1074              	// 	Run time routine for VARIABLE and CREATE.
 1075              	
 1076              	// 	.word	_DNEGA
 1077              	// _DOVAR	.byte  COMPO+5
 1078              	// 	.ascii "doVAR"
 1079              	// 	.p2align 2 	
 1080              	DOVAR:
 1081 0fb0 47F8046D 		_PUSH
 1082 0fb4 6646     		MOV TOS,IP
 1083 0fb6 0CF1040C 		ADD IP,IP,#4 
 1084 0fba D4E4     		B UNNEST 
 1085              	
 1086              	//    doCON	( -- a ) 
 1087              	// 	Run time routine for CONSTANT.
 1088              	
 1089              	// 	.word	_DOVAR
 1090              	// _DOCON	.byte  COMPO+5
 1091              	// 	.ascii "doCON"
 1092              	// 	.p2align 2 	
 1093              	DOCON:
 1094 0fbc 47F8046D 		_PUSH
 1095 0fc0 5CF8046B 		LDR.W TOS,[IP],#4 
 1096 0fc4 CFE4     		B UNNEST 
 1097              	
 1098              	/***********************
 1099              	  system variables 
 1100              	***********************/
 1101              	
 1102              	 // SEED ( -- a)
 1103              	 // return PRNG seed address 
 1104              	
 1105 0fc6 980F0000 		.word _DNEGA
 1106 0fca 04       	_SEED: .byte 4
 1107 0fcb 53454544 		.ascii "SEED"
 1108 0fcf 00       		.p2align 2
 1109              	SEED:
 1110 0fd0 47F8046D 		_PUSH 
 1111 0fd4 04F10406 		ADD TOS,UP,#RNDSEED
 1112 0fd8 C2E4     		_NEXT 	
 1113              	
 1114              	//  MSEC ( -- a)
 1115              	// return address of milliseconds counter
 1116 0fda CA0F0000 	  .word _SEED 
 1117 0fde 04       	_MSEC: .byte 4
 1118 0fdf 4D534543 	  .ascii "MSEC"
 1119 0fe3 00       	  .p2align 2 
 1120              	MSEC:
 1121 0fe4 47F8046D 	  _PUSH
 1122 0fe8 04F10806 	  ADD TOS,UP,#TICKS
 1123 0fec B8E4     	  _NEXT 
 1124              	
 1125              	// TIMER ( -- a )
 1126              	// count down timer 
ARM GAS  forth.s 			page 56


 1127 0fee DE0F0000 	  .word _MSEC
 1128 0ff2 05       	_TIMER:  .byte 5
 1129 0ff3 54494D45 	  .ascii "TIMER"
 1129      52
 1130              	  .p2align 2 
 1131              	TIMER:
 1132 0ff8 47F8046D 	  _PUSH 
 1133 0ffc 04F10C06 	  ADD TOS,UP,#CD_TIMER
 1134 1000 AEE4     	  _NEXT
 1135              	
 1136              	//    'BOOT	 ( -- a )
 1137              	// 	Application.
 1138              	
 1139 1002 F20F0000 		.word	_TIMER
 1140 1006 05       	_TBOOT:	.byte   5
 1141 1007 27424F4F 		.ascii "'BOOT"
 1141      54
 1142              		.p2align 2 	
 1143              	TBOOT:
 1144 100c 47F8046D 		_PUSH
 1145 1010 04F11006 		ADD	TOS,UP,#BOOT 
 1146 1014 A4E4     		_NEXT
 1147              		
 1148              	//    BASE	( -- a )
 1149              	// 	Storage of the radix base for numeric I/O.
 1150              	
 1151 1016 06100000 		.word	_TBOOT
 1152 101a 04       	_BASE:	.byte   4
 1153 101b 42415345 		.ascii "BASE"
 1154 101f 00       		.p2align 2 	
 1155              	BASE:
 1156 1020 47F8046D 		_PUSH
 1157 1024 04F11406 		ADD	TOS,UP,#NBASE
 1158 1028 9AE4     		_NEXT
 1159              	
 1160              	//    tmp	 ( -- a )
 1161              	// 	A temporary storage location used in parse and find.
 1162              	
 1163              	// 	.word	_BASE
 1164              	// _TEMP	.byte   COMPO+3
 1165              	// 	.ascii "tmp"
 1166              	// 	.p2align 2 	
 1167              	TEMP:
 1168 102a 47F8046D 		_PUSH
 1169 102e 04F11806 		ADD	TOS,UP,#TMP
 1170 1032 95E4     		_NEXT
 1171              	
 1172              	//    SPAN	( -- a )
 1173              	// 	Hold character count received by EXPECT.
 1174              	
 1175 1034 1A100000 		.word	_BASE
 1176 1038 04       	_SPAN:	.byte   4
 1177 1039 5350414E 		.ascii "SPAN"
 1178 103d 0000BF   		.p2align 2 	
 1179              	SPAN:
 1180 1040 47F8046D 		_PUSH
 1181 1044 04F11C06 		ADD	TOS,UP,#CSPAN
ARM GAS  forth.s 			page 57


 1182 1048 8AE4     		_NEXT
 1183              	
 1184              	//    >IN	 ( -- a )
 1185              	// 	Hold the character pointer while parsing input stream.
 1186              	
 1187 104a 38100000 		.word	_SPAN
 1188 104e 03       	_INN:	.byte   3
 1189 104f 3E494E   		.ascii ">IN"
 1190 1052 00BF     		.p2align 2 	
 1191              	INN:
 1192 1054 47F8046D 		_PUSH
 1193 1058 04F12006 		ADD	TOS,UP,#TOIN
 1194 105c 80E4     		_NEXT
 1195              	
 1196              	//    #TIB	( -- a )
 1197              	// 	Hold the current count and address of the terminal input buffer.
 1198              	
 1199 105e 4E100000 		.word	_INN
 1200 1062 04       	_NTIB:	.byte   4
 1201 1063 23544942 		.ascii "#TIB"
 1202 1067 00       		.p2align 2 	
 1203              	NTIB:
 1204 1068 47F8046D 		_PUSH
 1205 106c 04F12406 		ADD	TOS,UP,#NTIBB
 1206 1070 76E4     		_NEXT
 1207              	
 1208              	//    'EVAL	( -- a )
 1209              	// 	Execution vector of EVAL.
 1210              	
 1211 1072 62100000 		.word	_NTIB
 1212 1076 05       	_TEVAL:	.byte   5
 1213 1077 27455641 		.ascii "'EVAL"
 1213      4C
 1214              		.p2align 2 	
 1215              	TEVAL:
 1216 107c 47F8046D 		_PUSH
 1217 1080 04F12C06 		ADD	TOS,UP,#EVAL
 1218 1084 6CE4     		_NEXT
 1219              	
 1220              	//    HLD	 ( -- a )
 1221              	// 	Hold a pointer in building a numeric output string.
 1222              	
 1223 1086 76100000 		.word	_TEVAL
 1224 108a 03       	_HLD:	.byte   3
 1225 108b 484C44   		.ascii "HLD"
 1226 108e 00BF     		.p2align 2 	
 1227              	HLD:
 1228 1090 47F8046D 		_PUSH
 1229 1094 04F13006 		ADD	TOS,UP,#HOLD
 1230 1098 62E4     		_NEXT
 1231              	
 1232              	//    CONTEXT	( -- a )
 1233              	// 	A area to specify vocabulary search order.
 1234              	
 1235 109a 8A100000 		.word	_HLD
 1236 109e 07       	_CNTXT:	.byte   7
 1237 109f 434F4E54 		.ascii "CONTEXT"
ARM GAS  forth.s 			page 58


 1237      455854
 1238 10a6 00BF     		.p2align 2 	
 1239              	CNTXT:
 1240              	CRRNT:
 1241 10a8 47F8046D 		_PUSH
 1242 10ac 04F13406 		ADD	TOS,UP,#CTXT
 1243 10b0 56E4     		_NEXT
 1244              	
 1245              	//    CP	( -- a )
 1246              	// 	Point to top name in RAM vocabulary.
 1247              	
 1248 10b2 9E100000 		.word	_CNTXT
 1249 10b6 02       	_CP:	.byte   2
 1250 10b7 4350     		.ascii "CP"
 1251 10b9 0000BF   		.p2align 2 	
 1252              	CPP:
 1253 10bc 47F8046D 		_PUSH
 1254 10c0 04F13C06 		ADD	TOS,UP,#USER_CTOP
 1255 10c4 4CE4     		_NEXT
 1256              	
 1257              	//   FCP ( -- a )
 1258              	//  Point ot top of Forth system dictionary
 1259 10c6 B6100000 		.word _CP
 1260 10ca 03       	_FCP: .byte 3            
 1261 10cb 464350   		.ascii "FCP"
 1262 10ce 00BF     		.p2align 2 
 1263              	FCP: 
 1264 10d0 47F8046D 		_PUSH 
 1265 10d4 04F13806 		ADD TOS,UP,#FORTH_CTOP 
 1266 10d8 42E4     		_NEXT 
 1267              	
 1268              	//    LAST	( -- a )
 1269              	// 	Point to the last name in the name dictionary.
 1270              	
 1271 10da CA100000 		.word	_FCP
 1272 10de 04       	_LAST:	.byte   4
 1273 10df 4C415354 		.ascii "LAST"
 1274 10e3 00       		.p2align 2 	
 1275              	LAST:
 1276 10e4 47F8046D 		_PUSH
 1277 10e8 04F14006 		ADD	TOS,UP,#LASTN
 1278 10ec 38E4     		_NEXT
 1279              	
 1280              	
 1281              	/***********************
 1282              		system constants 
 1283              	***********************/
 1284              	
 1285              	//	USER_BEGIN ( -- a )
 1286              	//  where user area begin in RAM
 1287 10ee DE100000 		.word _LAST
 1288 10f2 0A       	_USER_BGN: .byte 10
 1289 10f3 55534552 		.ascii "USER_BEGIN"
 1289      5F424547 
 1289      494E
 1290 10fd 0000BF   		.p2align 2
 1291              	USER_BEGIN:
ARM GAS  forth.s 			page 59


 1292 1100 47F8046D 		_PUSH 
 1293 1104 004E     		ldr TOS,USR_BGN_ADR 
 1294 1106 2BE4     		_NEXT 
 1295              	USR_BGN_ADR:
 1296 1108 12050020 	.word  DTOP 
 1297              	
 1298              	//  USER_END ( -- a )
 1299              	//  where user area end in RAM 
 1300 110c F2100000 		.word _USER_BGN
 1301 1110 08       	_USER_END: .byte 8 
 1302 1111 55534552 		.ascii "USER_END" 
 1302      5F454E44 
 1303 1119 0000BF   		.p2align 2 
 1304              	USER_END:
 1305 111c 47F8046D 		_PUSH 
 1306 1120 004E     		ldr TOS,USER_END_ADR 
 1307 1122 1DE4     		_NEXT 
 1308              	USER_END_ADR:
 1309 1124 FC800120 		.word DEND 
 1310              	
 1311              	
 1312              	/* *********************
 1313              	  Common functions
 1314              	***********************/
 1315              	
 1316              	//    WITHIN	( u ul uh -- t )
 1317              	// 	Return true if u is within the range of ul and uh.
 1318              	
 1319 1128 10110000 		.word	_USER_END 
 1320 112c 06       	_WITHI:	.byte   6
 1321 112d 57495448 		.ascii "WITHIN"
 1321      494E
 1322 1133 00       		.p2align 2 	
 1323              	WITHI:
 1324 1134 504700BF 		_NEST
 1325 1138 290C0000 		_ADR	OVER
 1326 113c D90C0000 		_ADR	SUBB
 1327 1140 AD0B0000 		_ADR	TOR
 1328 1144 D90C0000 		_ADR	SUBB
 1329 1148 850B0000 		_ADR	RFROM
 1330 114c D10E0000 		_ADR	ULESS
 1331 1150 67090000 		_UNNEST
 1332              	
 1333              	//  Divide
 1334              	
 1335              	//    UM/MOD	( udl udh u -- ur uq )
 1336              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1337              	
 1338 1154 2C110000 		.word	_WITHI
 1339 1158 06       	_UMMOD:	.byte   6
 1340 1159 554D2F4D 		.ascii "UM/MOD"
 1340      4F44
 1341 115f 00       		.p2align 2 	
 1342              	UMMOD:
 1343 1160 4FF00103 		MOV	T3,#1
 1344 1164 57F8045B 		LDR	WP,[DSP],#4
 1345 1168 3A68     		LDR	T2,[DSP]
ARM GAS  forth.s 			page 60


 1346              	UMMOD0:
 1347 116a 9218     		ADDS	T2,T2,T2
 1348 116c 6D41     		ADCS	WP,WP,WP
 1349 116e 04D3     		BCC	UMMOD1
 1350 1170 A5EB0605 		SUB	WP,WP,TOS
 1351 1174 02F10102 		ADD	T2,T2,#1
 1352 1178 04E0     		B UMMOD2
 1353              	UMMOD1:
 1354 117a AD1B     		SUBS	WP,WP,TOS 
 1355 117c 28BF     		IT CS 
 1356 117e 0132     		ADDCS	T2,T2,#1
 1357 1180 00D2     		BCS	UMMOD2
 1358 1182 3544     		ADD	WP,WP,TOS
 1359              	UMMOD2:
 1360 1184 DB18     		ADDS	T3,T3,T3
 1361 1186 F0D3     		BCC	UMMOD0
 1362 1188 1646     		MOV	TOS,T2
 1363 118a 3D60     		STR	WP,[DSP]
 1364 118c FFF7E8BB 		_NEXT
 1365              	
 1366              	//    M/MOD	( d n -- r q )
 1367              	// 	Signed floored divide of double by single. Return mod and quotient.
 1368              	
 1369 1190 58110000 		.word	_UMMOD
 1370 1194 05       	_MSMOD:	.byte  5
 1371 1195 4D2F4D4F 		.ascii "M/MOD"
 1371      44
 1372 119a 00BF     		.p2align 2 	
 1373              	MSMOD:	
 1374 119c 504700BF 		_NEST
 1375 11a0 050C0000 		_ADR	DUPP
 1376 11a4 390C0000 		_ADR	ZLESS
 1377 11a8 050C0000 		_ADR	DUPP
 1378 11ac AD0B0000 		_ADR	TOR
 1379 11b0 130B0000 		_QBRAN MMOD1
 1379      C8110000 
 1380 11b8 810E0000 		_ADR	NEGAT
 1381 11bc AD0B0000 		_ADR	TOR
 1382 11c0 A10F0000 		_ADR	DNEGA
 1383 11c4 850B0000 		_ADR	RFROM
 1384              	MMOD1:
 1385 11c8 AD0B0000 		_ADR	TOR
 1386 11cc 050C0000 		_ADR	DUPP
 1387 11d0 390C0000 		_ADR	ZLESS
 1388 11d4 130B0000 		_QBRAN MMOD2
 1388      E4110000 
 1389 11dc 990B0000 		_ADR	RAT
 1390 11e0 C90C0000 		_ADR	PLUS
 1391              	MMOD2:
 1392 11e4 850B0000 		_ADR	RFROM
 1393 11e8 61110000 		_ADR	UMMOD
 1394 11ec 850B0000 		_ADR	RFROM
 1395 11f0 130B0000 		_QBRAN	MMOD3
 1395      04120000 
 1396 11f8 150C0000 		_ADR	SWAP
 1397 11fc 810E0000 		_ADR	NEGAT
 1398 1200 150C0000 		_ADR	SWAP
ARM GAS  forth.s 			page 61


 1399              	MMOD3:   
 1400 1204 67090000 		_UNNEST
 1401              	
 1402              	//    /MOD	( n n -- r q )
 1403              	// 	Signed divide. Return mod and quotient.
 1404              	
 1405 1208 94110000 		.word	_MSMOD
 1406 120c 04       	_SLMOD:	.byte   4
 1407 120d 2F4D4F44 		.ascii "/MOD"
 1408 1211 0000BF   		.p2align 2 	
 1409              	SLMOD:
 1410 1214 504700BF 		_NEST
 1411 1218 290C0000 		_ADR	OVER
 1412 121c 390C0000 		_ADR	ZLESS
 1413 1220 150C0000 		_ADR	SWAP
 1414 1224 9D110000 		_ADR	MSMOD
 1415 1228 67090000 		_UNNEST
 1416              	
 1417              	//    MOD	 ( n n -- r )
 1418              	// 	Signed divide. Return mod only.
 1419              	
 1420 122c 0C120000 		.word	_SLMOD
 1421 1230 03       	_MODD:	.byte  3
 1422 1231 4D4F44   		.ascii "MOD"
 1423              		.p2align 2 	
 1424              	MODD:
 1425 1234 504700BF 		_NEST
 1426 1238 15120000 		_ADR	SLMOD
 1427 123c F50B0000 		_ADR	DROP
 1428 1240 67090000 		_UNNEST
 1429              	
 1430              	//    /	   ( n n -- q )
 1431              	// 	Signed divide. Return quotient only.
 1432              	
 1433 1244 30120000 		.word	_MODD
 1434 1248 01       	_SLASH:	.byte  1
 1435 1249 2F       		.ascii "/"
 1436 124a 00BF     		.p2align 2 	
 1437              	SLASH:
 1438 124c 504700BF 		_NEST
 1439 1250 15120000 		_ADR	SLMOD
 1440 1254 150C0000 		_ADR	SWAP
 1441 1258 F50B0000 		_ADR	DROP
 1442 125c 67090000 		_UNNEST
 1443              	
 1444              	//    */MOD	( n1 n2 n3 -- r q )
 1445              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1446              	
 1447 1260 48120000 		.word	_SLASH
 1448 1264 05       	_SSMOD:	.byte  5
 1449 1265 2A2F4D4F 		.ascii "*/MOD"
 1449      44
 1450 126a 00BF     		.p2align 2 	
 1451              	SSMOD:
 1452 126c 504700BF 		_NEST
 1453 1270 AD0B0000 		_ADR	TOR
 1454 1274 110D0000 		_ADR	MSTAR
ARM GAS  forth.s 			page 62


 1455 1278 850B0000 		_ADR	RFROM
 1456 127c 9D110000 		_ADR	MSMOD
 1457 1280 67090000 		_UNNEST
 1458              	
 1459              	//    */	  ( n1 n2 n3 -- q )
 1460              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1461              	
 1462 1284 64120000 		.word	_SSMOD
 1463 1288 02       	_STASL:	.byte  2
 1464 1289 2A2F     		.ascii "*/"
 1465 128b 00       		.p2align 2 	
 1466              	STASL:
 1467 128c 504700BF 		_NEST
 1468 1290 6D120000 		_ADR	SSMOD
 1469 1294 150C0000 		_ADR	SWAP
 1470 1298 F50B0000 		_ADR	DROP
 1471 129c 67090000 		_UNNEST
 1472              	
 1473              	// **************************************************************************
 1474              	//  Miscellaneous
 1475              	
 1476              	//    ALIGNED	( b -- a )
 1477              	// 	Align address to the cell boundary.
 1478              	
 1479 12a0 88120000 		.word	_STASL
 1480 12a4 07       	_ALGND:	.byte   7
 1481 12a5 414C4947 		.ascii "ALIGNED"
 1481      4E4544
 1482              		.p2align 2 	
 1483              	ALGND:
 1484 12ac 06F10306 		ADD	TOS,TOS,#3
 1485 12b0 6FF00305 		MVN	WP,#3
 1486 12b4 06EA0506 		AND	TOS,TOS,WP
 1487 12b8 FFF752BB 		_NEXT
 1488              	
 1489              	//    >CHAR	( c -- c )
 1490              	// 	Filter non-printing characters.
 1491              	
 1492 12bc A4120000 		.word	_ALGND
 1493 12c0 05       	_TCHAR:	.byte  5
 1494 12c1 3E434841 		.ascii ">CHAR"
 1494      52
 1495 12c6 00BF     		.p2align 2 	
 1496              	TCHAR:
 1497 12c8 504700BF 		_NEST
 1498 12cc D10A0000 		_DOLIT  0x7F
 1498      7F000000 
 1499 12d4 490C0000 		_ADR	ANDD
 1500 12d8 050C0000 		_ADR	DUPP	// mask msb
 1501 12dc 850D0000 		_ADR	BLANK
 1502 12e0 D10A0000 		_DOLIT 	127
 1502      7F000000 
 1503 12e8 35110000 		_ADR	WITHI	// check for printable
 1504 12ec 6D0E0000 		_ADR	INVER
 1505 12f0 130B0000 		_QBRAN	TCHA1
 1505      04130000 
 1506 12f8 F50B0000 		_ADR	DROP
ARM GAS  forth.s 			page 63


 1507 12fc D10A0000 		_DOLIT 	'_'	// replace non-printables
 1507      5F000000 
 1508              	TCHA1:
 1509 1304 67090000 		  _UNNEST
 1510              	
 1511              	//    DEPTH	( -- n )
 1512              	// 	Return the depth of the data stack.
 1513              	
 1514 1308 C0120000 		.word	_TCHAR
 1515 130c 05       	_DEPTH:	.byte  5
 1516 130d 44455054 		.ascii "DEPTH"
 1516      48
 1517 1312 00BF     		.p2align 2 	
 1518              	DEPTH:
 1519 1314 4FF47F42 		_MOV32 T2,SPP 
 1519      C2F20102 
 1520 131c A2EB0702 		SUB	T2,T2,DSP
 1521 1320 47F8046D 		_PUSH
 1522 1324 4FEAA206 		ASR	TOS,T2,#2
 1523 1328 FFF71ABB 		_NEXT
 1524              	
 1525              	//    PICK	( ... +n -- ... w )
 1526              	// 	Copy the nth stack item to tos.
 1527              	
 1528 132c 0C130000 		.word	_DEPTH
 1529 1330 04       	_PICK:	.byte  4
 1530 1331 5049434B 		.ascii "PICK"
 1531 1335 0000BF   		.p2align 2 	
 1532              	PICK:
 1533 1338 504700BF 		_NEST
 1534 133c 250D0000 		_ADR	ONEP
 1535 1340 990D0000 		_ADR	CELLS
 1536 1344 E10B0000 		_ADR	SPAT
 1537 1348 C90C0000 		_ADR	PLUS
 1538 134c 590B0000 		_ADR	AT
 1539 1350 67090000 		_UNNEST
 1540              	
 1541              	// **************************************************************************
 1542              	//  Memory access
 1543              	
 1544              	//    HERE	( -- a )
 1545              	// 	Return the top of the code dictionary.
 1546              	
 1547 1354 30130000 		.word	_PICK
 1548 1358 04       	_HERE:	.byte  4
 1549 1359 48455245 		.ascii "HERE"
 1550 135d 0000BF   		.p2align 2 	
 1551              	HERE:
 1552 1360 504700BF 		_NEST
 1553 1364 BD100000 		_ADR	CPP
 1554 1368 590B0000 		_ADR	AT
 1555 136c 67090000 		_UNNEST
 1556              		
 1557              	//    PAD	 ( -- a )
 1558              	// 	Return the address of a temporary buffer.
 1559              	
 1560 1370 58130000 		.word	_HERE
ARM GAS  forth.s 			page 64


 1561 1374 03       	_PAD:	.byte  3
 1562 1375 504144   		.ascii "PAD"
 1563              		.p2align 2 	
 1564              	PAD:
 1565 1378 504700BF 		_NEST
 1566 137c 61130000 		_ADR	HERE
 1567 1380 D10A0000 		_DOLIT 80
 1567      50000000 
 1568 1388 C90C0000 		_ADR PLUS 
 1569 138c 67090000 		_UNNEST
 1570              	
 1571              	//    TIB	 ( -- a )
 1572              	// 	Return the address of the terminal input buffer.
 1573              	
 1574 1390 74130000 		.word	_PAD
 1575 1394 03       	_TIB:	.byte  3
 1576 1395 544942   		.ascii "TIB"
 1577              		.p2align 2 	
 1578              	TIB:
 1579 1398 47F8046D 		_PUSH
 1580 139c A66A     		ldr TOS,[UP,#TIBUF]
 1581 139e FFF7DFBA 		_NEXT
 1582              	
 1583              	//    @EXECUTE	( a -- )
 1584              	// 	Execute vector stored in address a.
 1585              	
 1586 13a2 94130000 		.word	_TIB
 1587 13a6 08       	_ATEXE:	.byte   8
 1588 13a7 40455845 		.ascii "@EXECUTE"
 1588      43555445 
 1589 13af 00       		.p2align 2 	
 1590              	ATEXE: 
 1591 13b0 3500     		MOVS	WP,TOS
 1592 13b2 57F8046B 		_POP
 1593 13b6 2D68     		LDR	WP,[WP]
 1594 13b8 45F00105 		ORR	WP,WP,#1
 1595 13bc 18BF     	    IT NE 
 1596 13be 2847     		BXNE	WP
 1597 13c0 FFF7CEBA 		_NEXT
 1598              	
 1599              	//    CMOVE	( b1 b2 u -- )
 1600              	// 	Copy u bytes from b1 to b2.
 1601              	
 1602 13c4 A6130000 		.word	_ATEXE
 1603 13c8 05       	_CMOVE:	.byte   5
 1604 13c9 434D4F56 		.ascii "CMOVE"
 1604      45
 1605 13ce 00BF     		.p2align 2 	
 1606              	CMOVE:
 1607 13d0 57F8042B 		LDR	T2,[DSP],#4
 1608 13d4 57F8043B 		LDR	T3,[DSP],#4
 1609 13d8 03E0     		B CMOV1
 1610              	CMOV0:
 1611 13da 13F8015B 		LDRB	WP,[T3],#1
 1612 13de 02F8015B 		STRB	WP,[T2],#1
 1613              	CMOV1:
 1614 13e2 3600     		MOVS	TOS,TOS
ARM GAS  forth.s 			page 65


 1615 13e4 02D0     		BEQ	CMOV2
 1616 13e6 A6F10106 		SUB	TOS,TOS,#1
 1617 13ea F6E7     		B CMOV0
 1618              	CMOV2:
 1619 13ec 57F8046B 		_POP
 1620 13f0 FFF7B6BA 		_NEXT
 1621              	
 1622              	//    MOVE	( a1 a2 u -- )
 1623              	// 	Copy u words from a1 to a2.
 1624              	
 1625 13f4 C8130000 		.word	_CMOVE
 1626 13f8 04       	_MOVE:	.byte   4
 1627 13f9 4D4F5645 		.ascii "MOVE"
 1628 13fd 0000BF   		.p2align 2 	
 1629              	MOVE:
 1630 1400 26F00306 		AND	TOS,TOS,#-4
 1631 1404 57F8042B 		LDR	T2,[DSP],#4
 1632 1408 57F8043B 		LDR	T3,[DSP],#4
 1633 140c 03E0     		B MOVE1
 1634              	MOVE0:
 1635 140e 53F8045B 		LDR	WP,[T3],#4
 1636 1412 42F8045B 		STR	WP,[T2],#4
 1637              	MOVE1:
 1638 1416 3600     		MOVS	TOS,TOS
 1639 1418 02D0     		BEQ	MOVE2
 1640 141a A6F10406 		SUB	TOS,TOS,#4
 1641 141e F6E7     		B MOVE0
 1642              	MOVE2:
 1643 1420 57F8046B 		_POP
 1644 1424 FFF79CBA 		_NEXT
 1645              	
 1646              	//    FILL	( b u c -- )
 1647              	// 	Fill u bytes of character c to area beginning at b.
 1648              	
 1649 1428 F8130000 		.word	_MOVE
 1650 142c 04       	_FILL:	.byte   4
 1651 142d 46494C4C 		.ascii "FILL"
 1652 1431 0000BF   		.p2align 2 	
 1653              	FILL:
 1654 1434 03CF     		LDMFD DSP!,{T0,T1} 
 1655 1436 0000     		MOVS T0,T0 
 1656 1438 03D0     		BEQ FILL2
 1657              	FILL1:
 1658 143a 01F8016B 		STRB	TOS,[T1],#1
 1659 143e 0138     		SUBS	T0,T0,#1
 1660 1440 FBD1     		BNE FILL1
 1661              	FILL2:
 1662 1442 57F8046B 		_POP
 1663 1446 FFF78BBA 		_NEXT
 1664              	
 1665              	//    PACK$	( b u a -- a )
 1666              	// 	Build a counted word with u characters from b. Null fill.
 1667              	
 1668 144a 2C140000 		.word	_FILL
 1669 144e 05       	_PACKS:	.byte  5
 1670 144f 5041434B 		.ascii "PACK$$"
 1670      2424
ARM GAS  forth.s 			page 66


 1671 1455 0000BF   		.p2align 2 	
 1672              	PACKS:
 1673 1458 504700BF 		_NEST
 1674 145c AD120000 		_ADR	ALGND
 1675 1460 050C0000 		_ADR	DUPP
 1676 1464 AD0B0000 		_ADR	TOR			// strings only on cell boundary
 1677 1468 290C0000 		_ADR	OVER
 1678 146c C90C0000 		_ADR	PLUS
 1679 1470 250D0000 		_ADR	ONEP
 1680 1474 D10A0000 		_DOLIT 	0xFFFFFFFC
 1680      FCFFFFFF 
 1681 147c 490C0000 		_ADR	ANDD			// count mod cell
 1682 1480 D10A0000 		_DOLIT 	0
 1682      00000000 
 1683 1488 150C0000 		_ADR	SWAP
 1684 148c 450B0000 		_ADR	STORE			// null fill cell
 1685 1490 990B0000 		_ADR	RAT
 1686 1494 3D0E0000 		_ADR	DDUP
 1687 1498 650B0000 		_ADR	CSTOR
 1688 149c 250D0000 		_ADR	ONEP			// save count
 1689 14a0 150C0000 		_ADR	SWAP
 1690 14a4 D1130000 		_ADR	CMOVE
 1691 14a8 850B0000 		_ADR	RFROM
 1692 14ac 67090000 		_UNNEST   			// move string
 1693              	
 1694              	// **************************************************************************
 1695              	//  Numeric output, single precision
 1696              	
 1697              	//    DIGIT	( u -- c )
 1698              	// 	Convert digit u to a character.
 1699              	
 1700 14b0 4E140000 		.word	_PACKS
 1701 14b4 05       	_DIGIT:	.byte  5
 1702 14b5 44494749 		.ascii "DIGIT"
 1702      54
 1703 14ba 00BF     		.p2align 2 	
 1704              	DIGIT:
 1705 14bc 504700BF 		_NEST
 1706 14c0 D10A0000 		_DOLIT 9
 1706      09000000 
 1707 14c8 290C0000 		_ADR	OVER
 1708 14cc E90E0000 		_ADR	LESS
 1709 14d0 D10A0000 		_DOLIT	7
 1709      07000000 
 1710 14d8 490C0000 		_ADR	ANDD
 1711 14dc C90C0000 		_ADR	PLUS
 1712 14e0 D10A0000 		_DOLIT	'0'
 1712      30000000 
 1713 14e8 C90C0000 		_ADR	PLUS 
 1714 14ec 67090000 		_UNNEST
 1715              	
 1716              	//    EXTRACT	( n base -- n c )
 1717              	// 	Extract the least significant digit from n.
 1718              	
 1719 14f0 B4140000 		.word	_DIGIT
 1720 14f4 07       	_EXTRC:	.byte  7
 1721 14f5 45585452 		.ascii "EXTRACT"
ARM GAS  forth.s 			page 67


 1721      414354
 1722              		.p2align 2 	
 1723              	EXTRC:
 1724 14fc 504700BF 		_NEST
 1725 1500 D10A0000 		_DOLIT 0
 1725      00000000 
 1726 1508 150C0000 		_ADR	SWAP
 1727 150c 61110000 		_ADR	UMMOD
 1728 1510 150C0000 		_ADR	SWAP
 1729 1514 BD140000 		_ADR	DIGIT
 1730 1518 67090000 		_UNNEST
 1731              	
 1732              	//    <#	  ( -- )
 1733              	// 	Initiate the numeric output process.
 1734              	
 1735 151c F4140000 		.word	_EXTRC
 1736 1520 02       	_BDIGS:	.byte  2
 1737 1521 3C23     		.ascii "<#"
 1738 1523 00       		.p2align 2 	
 1739              	BDIGS:
 1740 1524 504700BF 		_NEST
 1741 1528 79130000 		_ADR	PAD
 1742 152c 91100000 		_ADR	HLD
 1743 1530 450B0000 		_ADR	STORE
 1744 1534 67090000 		_UNNEST
 1745              	
 1746              	//    HOLD	( c -- )
 1747              	// 	Insert a character into the numeric output string.
 1748              	
 1749 1538 20150000 		.word	_BDIGS
 1750 153c 04       	_HOLD:	.byte  4
 1751 153d 484F4C44 		.ascii "HOLD"
 1752 1541 0000BF   		.p2align 2 	
 1753              	HOLD:
 1754 1544 504700BF 		_NEST
 1755 1548 91100000 		_ADR	HLD
 1756 154c 590B0000 		_ADR	AT
 1757 1550 350D0000 		_ADR	ONEM
 1758 1554 050C0000 		_ADR	DUPP
 1759 1558 91100000 		_ADR	HLD
 1760 155c 450B0000 		_ADR	STORE
 1761 1560 650B0000 		_ADR	CSTOR
 1762 1564 67090000 		_UNNEST
 1763              	
 1764              	//    #	   ( u -- u )
 1765              	// 	Extract one digit from u and append the digit to output string.
 1766              	
 1767 1568 3C150000 		.word	_HOLD
 1768 156c 01       	_DIG:	.byte  1
 1769 156d 23       		.ascii "#"
 1770 156e 00BF     		.p2align 2 	
 1771              	DIG:
 1772 1570 504700BF 		_NEST
 1773 1574 21100000 		_ADR	BASE
 1774 1578 590B0000 		_ADR	AT
 1775 157c FD140000 		_ADR	EXTRC
 1776 1580 45150000 		_ADR	HOLD
ARM GAS  forth.s 			page 68


 1777 1584 67090000 		_UNNEST
 1778              	
 1779              	//    #S	  ( u -- 0 )
 1780              	// 	Convert u until all digits are added to the output string.
 1781              	
 1782 1588 6C150000 		.word	_DIG
 1783 158c 02       	_DIGS:	.byte  2
 1784 158d 2353     		.ascii "#S"
 1785 158f 00       		.p2align 2 	
 1786              	DIGS:
 1787 1590 504700BF 		_NEST
 1788              	DIGS1:
 1789 1594 71150000 	    _ADR	DIG
 1790 1598 050C0000 		_ADR	DUPP
 1791 159c 130B0000 		_QBRAN 	DIGS2
 1791      AC150000 
 1792 15a4 270B0000 		_BRAN	DIGS1
 1792      94150000 
 1793              	DIGS2:
 1794 15ac 67090000 		  _UNNEST
 1795              	
 1796              	//    SIGN	( n -- )
 1797              	// 	Add a minus sign to the numeric output string.
 1798              	
 1799 15b0 8C150000 		.word	_DIGS
 1800 15b4 04       	_SIGN:	.byte  4
 1801 15b5 5349474E 		.ascii "SIGN"
 1802 15b9 0000BF   		.p2align 2 	
 1803              	SIGN:
 1804 15bc 504700BF 		_NEST
 1805 15c0 390C0000 		_ADR	ZLESS
 1806 15c4 130B0000 		_QBRAN	SIGN1
 1806      D8150000 
 1807 15cc D10A0000 		_DOLIT '-'
 1807      2D000000 
 1808 15d4 45150000 		_ADR	HOLD
 1809              	SIGN1:
 1810 15d8 67090000 		  _UNNEST
 1811              	
 1812              	//    #>	  ( w -- b u )
 1813              	// 	Prepare the output word to be TYPE'd.
 1814              	
 1815 15dc B4150000 		.word	_SIGN
 1816 15e0 02       	_EDIGS:	.byte  2
 1817 15e1 233E     		.ascii "#>"
 1818 15e3 00       		.p2align 2 	
 1819              	EDIGS:
 1820 15e4 504700BF 		_NEST
 1821 15e8 F50B0000 		_ADR	DROP
 1822 15ec 91100000 		_ADR	HLD
 1823 15f0 590B0000 		_ADR	AT
 1824 15f4 79130000 		_ADR	PAD
 1825 15f8 290C0000 		_ADR	OVER
 1826 15fc D90C0000 		_ADR	SUBB
 1827 1600 67090000 		_UNNEST
 1828              	
 1829              	//    str	 ( n -- b u )
ARM GAS  forth.s 			page 69


 1830              	// 	Convert a signed integer to a numeric string.
 1831              	
 1832              	// 	.word	_EDIGS
 1833              	// _STRR	.byte  3
 1834              	// 	.ascii "str"
 1835              	// 	.p2align 2 	
 1836              	STRR:
 1837 1604 504700BF 		_NEST
 1838 1608 050C0000 		_ADR	DUPP
 1839 160c AD0B0000 		_ADR	TOR
 1840 1610 910E0000 		_ADR	ABSS
 1841 1614 25150000 		_ADR	BDIGS
 1842 1618 91150000 		_ADR	DIGS
 1843 161c 850B0000 		_ADR	RFROM
 1844 1620 BD150000 		_ADR	SIGN
 1845 1624 E5150000 		_ADR	EDIGS
 1846 1628 67090000 		_UNNEST
 1847              	
 1848              	//    HEX	 ( -- )
 1849              	// 	Use radix 16 as base for numeric conversions.
 1850              	
 1851 162c E0150000 		.word	_EDIGS
 1852 1630 03       	_HEX:	.byte  3
 1853 1631 484558   		.ascii "HEX"
 1854              		.p2align 2 	
 1855              	HEX:
 1856 1634 504700BF 		_NEST
 1857 1638 D10A0000 		_DOLIT 16
 1857      10000000 
 1858 1640 21100000 		_ADR	BASE
 1859 1644 450B0000 		_ADR	STORE
 1860 1648 67090000 		_UNNEST
 1861              	
 1862              	//    DECIMAL	( -- )
 1863              	// 	Use radix 10 as base for numeric conversions.
 1864              	
 1865 164c 30160000 		.word	_HEX
 1866 1650 07       	_DECIM:	.byte  7
 1867 1651 44454349 		.ascii "DECIMAL"
 1867      4D414C
 1868              		.p2align 2 	
 1869              	DECIM:
 1870 1658 504700BF 		_NEST
 1871 165c D10A0000 		_DOLIT 10
 1871      0A000000 
 1872 1664 21100000 		_ADR	BASE
 1873 1668 450B0000 		_ADR	STORE
 1874 166c 67090000 		_UNNEST
 1875              	
 1876              	// **************************************************************************
 1877              	//  Numeric input, single precision
 1878              	
 1879              	//    DIGIT?	( c base -- u t )
 1880              	// 	Convert a character to its numeric value. A flag indicates success.
 1881              	
 1882 1670 50160000 		.word	_DECIM
 1883 1674 06       	_DIGTQ:	.byte  6
ARM GAS  forth.s 			page 70


 1884 1675 44494749 		.ascii "DIGIT?"
 1884      543F
 1885 167b 00       		.p2align 2 	
 1886              	DIGTQ:
 1887 167c 504700BF 		_NEST
 1888 1680 AD0B0000 		_ADR	TOR
 1889 1684 D10A0000 		_DOLIT 	'0'
 1889      30000000 
 1890 168c D90C0000 		_ADR	SUBB
 1891 1690 D10A0000 		_DOLIT 9
 1891      09000000 
 1892 1698 290C0000 		_ADR	OVER
 1893 169c E90E0000 		_ADR	LESS
 1894 16a0 130B0000 		_QBRAN	DGTQ1
 1894      C8160000 
 1895 16a8 D10A0000 		_DOLIT 7
 1895      07000000 
 1896 16b0 D90C0000 		_ADR	SUBB
 1897 16b4 050C0000 		_ADR	DUPP
 1898 16b8 D10A0000 		_DOLIT	10
 1898      0A000000 
 1899 16c0 E90E0000 		_ADR	LESS
 1900 16c4 5D0C0000 		_ADR	ORR
 1901              	DGTQ1:
 1902 16c8 050C0000 		_ADR	DUPP
 1903 16cc 850B0000 		_ADR	RFROM
 1904 16d0 D10E0000 		_ADR	ULESS
 1905 16d4 67090000 		_UNNEST
 1906              	
 1907              	//    NUMBER?	( a -- n T | a F )
 1908              	// 	Convert a number word to integer. Push a flag on tos.
 1909              	
 1910 16d8 74160000 		.word	_DIGTQ
 1911 16dc 07       	_NUMBQ:	.byte  7
 1912 16dd 4E554D42 		.ascii "NUMBER?"
 1912      45523F
 1913              		.p2align 2 	
 1914              	NUMBQ:
 1915 16e4 504700BF 		_NEST
 1916 16e8 21100000 		_ADR	BASE
 1917 16ec 590B0000 		_ADR	AT
 1918 16f0 AD0B0000 		_ADR	TOR
 1919 16f4 D10A0000 		_DOLIT	0
 1919      00000000 
 1920 16fc 290C0000 		_ADR	OVER
 1921 1700 890F0000 		_ADR	COUNT
 1922 1704 290C0000 		_ADR	OVER
 1923 1708 790B0000 		_ADR	CAT
 1924 170c D10A0000 		_DOLIT '$'
 1924      24000000 
 1925 1714 B90E0000 		_ADR	EQUAL
 1926 1718 130B0000 		_QBRAN	NUMQ1
 1926      34170000 
 1927 1720 35160000 		_ADR	HEX
 1928 1724 150C0000 		_ADR	SWAP
 1929 1728 250D0000 		_ADR	ONEP
 1930 172c 150C0000 		_ADR	SWAP
ARM GAS  forth.s 			page 71


 1931 1730 350D0000 		_ADR	ONEM
 1932              	NUMQ1:
 1933 1734 290C0000 		_ADR	OVER
 1934 1738 790B0000 		_ADR	CAT
 1935 173c D10A0000 		_DOLIT	'-'
 1935      2D000000 
 1936 1744 B90E0000 		_ADR	EQUAL
 1937 1748 AD0B0000 		_ADR	TOR
 1938 174c 150C0000 		_ADR	SWAP
 1939 1750 990B0000 		_ADR	RAT
 1940 1754 D90C0000 		_ADR	SUBB
 1941 1758 150C0000 		_ADR	SWAP
 1942 175c 990B0000 		_ADR	RAT
 1943 1760 C90C0000 		_ADR	PLUS
 1944 1764 D90D0000 		_ADR	QDUP
 1945 1768 130B0000 		_QBRAN	NUMQ6
 1945      FC170000 
 1946 1770 350D0000 		_ADR	ONEM
 1947 1774 AD0B0000 		_ADR	TOR
 1948              	NUMQ2:
 1949 1778 050C0000 		_ADR	DUPP
 1950 177c AD0B0000 		_ADR	TOR
 1951 1780 790B0000 		_ADR	CAT
 1952 1784 21100000 		_ADR	BASE
 1953 1788 590B0000 		_ADR	AT
 1954 178c 7D160000 		_ADR	DIGTQ
 1955 1790 130B0000 		_QBRAN	NUMQ4
 1955      E0170000 
 1956 1798 150C0000 		_ADR	SWAP
 1957 179c 21100000 		_ADR	BASE
 1958 17a0 590B0000 		_ADR	AT
 1959 17a4 E90C0000 		_ADR	STAR
 1960 17a8 C90C0000 		_ADR	PLUS
 1961 17ac 850B0000 		_ADR	RFROM
 1962 17b0 250D0000 		_ADR	ONEP
 1963 17b4 F50A0000 		_DONXT	NUMQ2
 1963      78170000 
 1964 17bc 990B0000 		_ADR	RAT
 1965 17c0 150C0000 		_ADR	SWAP
 1966 17c4 F50B0000 		_ADR	DROP
 1967 17c8 130B0000 		_QBRAN	NUMQ3
 1967      D4170000 
 1968 17d0 810E0000 		_ADR	NEGAT
 1969              	NUMQ3:
 1970 17d4 150C0000 		_ADR	SWAP
 1971 17d8 270B0000 		_BRAN	NUMQ5
 1971      F8170000 
 1972              	NUMQ4:
 1973 17e0 850B0000 		_ADR	RFROM
 1974 17e4 850B0000 		_ADR	RFROM
 1975 17e8 150E0000 		_ADR	DDROP
 1976 17ec 150E0000 		_ADR	DDROP
 1977 17f0 D10A0000 		_DOLIT	0
 1977      00000000 
 1978              	NUMQ5:
 1979 17f8 050C0000 		_ADR	DUPP
 1980              	NUMQ6:
ARM GAS  forth.s 			page 72


 1981 17fc 850B0000 		_ADR	RFROM
 1982 1800 150E0000 		_ADR	DDROP
 1983 1804 850B0000 		_ADR	RFROM
 1984 1808 21100000 		_ADR	BASE
 1985 180c 450B0000 		_ADR	STORE
 1986 1810 67090000 		_UNNEST
 1987              	
 1988              	// **************************************************************************
 1989              	//  Basic I/O
 1990              	
 1991              	//    KEY	 ( -- c )
 1992              	// 	Wait for and return an input character.
 1993              	
 1994 1814 DC160000 		.word	_NUMBQ
 1995 1818 03       	_KEY:	.byte  3
 1996 1819 4B4559   		.ascii "KEY"
 1997              		.p2align 2 	
 1998              	KEY:
 1999 181c 504700BF 		_NEST
 2000              	KEY1:
 2001 1820 790A0000 		_ADR	QRX
 2002 1824 130B0000 		_QBRAN	KEY1
 2002      20180000 
 2003 182c 67090000 		_UNNEST
 2004              	
 2005              	//    SPACE	( -- )
 2006              	// 	Send the blank character to the output device.
 2007              	
 2008 1830 18180000 		.word	_KEY
 2009 1834 05       	_SPACE:	.byte  5
 2010 1835 53504143 		.ascii "SPACE"
 2010      45
 2011 183a 00BF     		.p2align 2 	
 2012              	SPACE:
 2013 183c 504700BF 		_NEST
 2014 1840 850D0000 		_ADR	BLANK
 2015 1844 AD0A0000 		_ADR	EMIT
 2016 1848 67090000 		_UNNEST
 2017              	
 2018              	//    SPACES	( +n -- )
 2019              	// 	Send n spaces to the output device.
 2020              	
 2021 184c 34180000 		.word	_SPACE
 2022 1850 06       	_SPACS:	.byte  6
 2023 1851 53504143 		.ascii "SPACES"
 2023      4553
 2024 1857 00       		.p2align 2 	
 2025              	SPACS:
 2026 1858 504700BF 		_NEST
 2027 185c D10A0000 		_DOLIT	0
 2027      00000000 
 2028 1864 190F0000 		_ADR	MAX
 2029 1868 AD0B0000 		_ADR	TOR
 2030 186c 270B0000 		_BRAN	CHAR2
 2030      78180000 
 2031              	CHAR1:
 2032 1874 3D180000 		_ADR	SPACE
ARM GAS  forth.s 			page 73


 2033              	CHAR2:
 2034 1878 F50A0000 		_DONXT	CHAR1
 2034      74180000 
 2035 1880 67090000 		_UNNEST
 2036              	
 2037              	//    TYPE	( b u -- )
 2038              	// 	Output u characters from b.
 2039              	
 2040 1884 50180000 		.word	_SPACS
 2041 1888 04       	_TYPEE:	.byte	4
 2042 1889 54595045 		.ascii "TYPE"
 2043 188d 0000BF   		.p2align 2 	
 2044              	TYPEE:
 2045 1890 504700BF 		_NEST
 2046 1894 AD0B0000 		_ADR  TOR   // ( a+1 -- R: u )
 2047 1898 270B0000 		_BRAN	TYPE2
 2047      AC180000 
 2048              	TYPE1:  
 2049 18a0 890F0000 		_ADR  COUNT
 2050 18a4 C9120000 		_ADR TCHAR
 2051 18a8 AD0A0000 		_ADR EMIT
 2052              	TYPE2:  
 2053 18ac F50A0000 		_DONXT	TYPE1
 2053      A0180000 
 2054 18b4 F50B0000 		_ADR	DROP
 2055 18b8 67090000 		_UNNEST
 2056              	
 2057              	//    CR	  ( -- )
 2058              	// 	Output a carriage return and a line feed.
 2059              	
 2060 18bc 88180000 		.word	_TYPEE
 2061 18c0 02       	_CR:	.byte  2
 2062 18c1 4352     		.ascii "CR"
 2063 18c3 00       		.p2align 2 	
 2064              	CR:
 2065 18c4 504700BF 		_NEST
 2066 18c8 D10A0000 		_DOLIT	CRR
 2066      0D000000 
 2067 18d0 AD0A0000 		_ADR	EMIT
 2068 18d4 D10A0000 		_DOLIT	LF
 2068      0A000000 
 2069 18dc AD0A0000 		_ADR	EMIT
 2070 18e0 67090000 		_UNNEST
 2071              	
 2072              	//    do_$	( -- a )
 2073              	// 	Return the address of a compiled string.
 2074              	//  adjust return address to skip over it.
 2075              	
 2076              	// 	.word	_CR
 2077              	// _DOSTR	.byte  COMPO+3
 2078              	// 	.ascii "do$$"
 2079              	// 	.p2align 2 	
 2080              	DOSTR:
 2081 18e4 504700BF 		_NEST     
 2082              	/* compiled string address is 2 levels deep */
 2083 18e8 850B0000 		_ADR	RFROM	// { -- a1 }
 2084 18ec 850B0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
ARM GAS  forth.s 			page 74


 2085 18f0 050C0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2086 18f4 890F0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2087 18f8 C90C0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2088 18fc AD120000 		_ADR	ALGND	//  end of string
 2089              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2090 1900 AD0B0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2091 1904 150C0000 		_ADR	SWAP	//  count tugged
 2092 1908 AD0B0000 		_ADR	TOR     //  ( -- a2) is string address
 2093 190c 67090000 		_UNNEST
 2094              	
 2095              	//    $"|	( -- a )
 2096              	// 	Run time routine compiled by _". Return address of a compiled string.
 2097              	
 2098              	// 	.word	_DOSTR
 2099              	// _STRQP	.byte  COMPO+3
 2100              	// 	.ascii "$\"|"
 2101              	// 	.p2align 2 	
 2102              	STRQP:
 2103 1910 504700BF 		_NEST
 2104 1914 E5180000 		_ADR	DOSTR
 2105 1918 67090000 		_UNNEST			// force a call to dostr
 2106              	
 2107              	//    .$	( a -- )
 2108              	// 	Run time routine of ." . Output a compiled string.
 2109              	
 2110              	// 	.word	_STRQP
 2111              	// _DOTST	.byte  COMPO+2
 2112              	// 	.ascii ".$$"
 2113              	// 	.p2align 2 	
 2114              	DOTST:
 2115 191c 504700BF 		_NEST
 2116 1920 890F0000 		_ADR	COUNT // ( -- a+1 c )
 2117 1924 91180000 		_ADR	TYPEE
 2118 1928 67090000 		_UNNEST
 2119              	
 2120              	//    ."|	( -- )
 2121              	// 	Run time routine of ." . Output a compiled string.
 2122              	
 2123              	// 	.word	_DOTST
 2124              	// _DOTQP	.byte  COMPO+3
 2125              	// 	.ascii ".""|"
 2126              	// 	.p2align 2 	
 2127              	DOTQP:
 2128 192c 504700BF 		_NEST
 2129 1930 E5180000 		_ADR	DOSTR
 2130 1934 1D190000 		_ADR	DOTST
 2131 1938 67090000 		_UNNEST
 2132              	
 2133              	//    .R	  ( n +n -- )
 2134              	// 	Display an integer in a field of n columns, right justified.
 2135              	
 2136 193c C0180000 		.word	_CR
 2137 1940 02       	_DOTR:	.byte  2
 2138 1941 2E52     		.ascii ".R"
 2139 1943 00       		.p2align 2 	
 2140              	DOTR:
 2141 1944 504700BF 		_NEST
ARM GAS  forth.s 			page 75


 2142 1948 AD0B0000 		_ADR	TOR
 2143 194c 05160000 		_ADR	STRR
 2144 1950 850B0000 		_ADR	RFROM
 2145 1954 290C0000 		_ADR	OVER
 2146 1958 D90C0000 		_ADR	SUBB
 2147 195c 59180000 		_ADR	SPACS
 2148 1960 91180000 		_ADR	TYPEE
 2149 1964 67090000 		_UNNEST
 2150              	
 2151              	//    U.R	 ( u +n -- )
 2152              	// 	Display an unsigned integer in n column, right justified.
 2153              	
 2154 1968 40190000 		.word	_DOTR
 2155 196c 03       	_UDOTR:	.byte  3
 2156 196d 552E52   		.ascii "U.R"
 2157              		.p2align 2 	
 2158              	UDOTR:
 2159 1970 504700BF 		_NEST
 2160 1974 AD0B0000 		_ADR	TOR
 2161 1978 25150000 		_ADR	BDIGS
 2162 197c 91150000 		_ADR	DIGS
 2163 1980 E5150000 		_ADR	EDIGS
 2164 1984 850B0000 		_ADR	RFROM
 2165 1988 290C0000 		_ADR	OVER
 2166 198c D90C0000 		_ADR	SUBB
 2167 1990 59180000 		_ADR	SPACS
 2168 1994 91180000 		_ADR	TYPEE
 2169 1998 67090000 		_UNNEST
 2170              	
 2171              	//    U.	  ( u -- )
 2172              	// 	Display an unsigned integer in free format.
 2173              	
 2174 199c 6C190000 		.word	_UDOTR
 2175 19a0 02       	_UDOT:	.byte  2
 2176 19a1 552E     		.ascii "U."
 2177 19a3 00       		.p2align 2 	
 2178              	UDOT:
 2179 19a4 504700BF 		_NEST
 2180 19a8 25150000 		_ADR	BDIGS
 2181 19ac 91150000 		_ADR	DIGS
 2182 19b0 E5150000 		_ADR	EDIGS
 2183 19b4 3D180000 		_ADR	SPACE
 2184 19b8 91180000 		_ADR	TYPEE
 2185 19bc 67090000 		_UNNEST
 2186              	
 2187              	//    .	   ( w -- )
 2188              	// 	Display an integer in free format, preceeded by a space.
 2189              	
 2190 19c0 A0190000 		.word	_UDOT
 2191 19c4 01       	_DOT:	.byte  1
 2192 19c5 2E       		.ascii "."
 2193 19c6 00BF     		.p2align 2 	
 2194              	DOT:
 2195 19c8 504700BF 		_NEST
 2196 19cc 21100000 		_ADR	BASE
 2197 19d0 590B0000 		_ADR	AT
 2198 19d4 D10A0000 		_DOLIT 10
ARM GAS  forth.s 			page 76


 2198      0A000000 
 2199 19dc 710C0000 		_ADR	XORR			// ?decimal
 2200 19e0 130B0000 		_QBRAN	DOT1
 2200      F0190000 
 2201 19e8 A5190000 		_ADR	UDOT
 2202 19ec 67090000 		_UNNEST			// no,display unsigned
 2203              	DOT1:
 2204 19f0 05160000 	    _ADR	STRR
 2205 19f4 3D180000 		_ADR	SPACE
 2206 19f8 91180000 		_ADR	TYPEE
 2207 19fc 67090000 		_UNNEST			// yes, display signed
 2208              	
 2209              	//    ?	   ( a -- )
 2210              	// 	Display the contents in a memory cell.
 2211              	
 2212 1a00 C4190000 		.word	_DOT
 2213 1a04 01       	_QUEST:	.byte  1
 2214 1a05 3F       		.ascii "?"
 2215 1a06 00BF     		.p2align 2 	
 2216              	QUEST:
 2217 1a08 504700BF 		_NEST
 2218 1a0c 590B0000 		_ADR	AT
 2219 1a10 C9190000 		_ADR	DOT
 2220 1a14 67090000 		_UNNEST
 2221              	
 2222              	// **************************************************************************
 2223              	//  Parsing
 2224              	
 2225              	//    parse	( b u c -- b u delta //  string> )
 2226              	// 	Scan word delimited by c. Return found string and its offset.
 2227              	
 2228              	// 	.word	_QUEST
 2229              	// _PARS	.byte  5
 2230              	// 	.ascii "parse"
 2231              	// 	.p2align 2 	
 2232              	PARS:
 2233 1a18 504700BF 		_NEST
 2234 1a1c 2B100000 		_ADR	TEMP
 2235 1a20 450B0000 		_ADR	STORE
 2236 1a24 290C0000 		_ADR	OVER
 2237 1a28 AD0B0000 		_ADR	TOR
 2238 1a2c 050C0000 		_ADR	DUPP
 2239 1a30 130B0000 		_QBRAN	PARS8
 2239      2C1B0000 
 2240 1a38 350D0000 		_ADR	ONEM
 2241 1a3c 2B100000 		_ADR	TEMP
 2242 1a40 590B0000 		_ADR	AT
 2243 1a44 850D0000 		_ADR	BLANK
 2244 1a48 B90E0000 		_ADR	EQUAL
 2245 1a4c 130B0000 		_QBRAN	PARS3
 2245      A01A0000 
 2246 1a54 AD0B0000 		_ADR	TOR
 2247              	PARS1:
 2248 1a58 850D0000 		_ADR	BLANK
 2249 1a5c 290C0000 		_ADR	OVER
 2250 1a60 790B0000 		_ADR	CAT			// skip leading blanks 
 2251 1a64 D90C0000 		_ADR	SUBB
ARM GAS  forth.s 			page 77


 2252 1a68 390C0000 		_ADR	ZLESS
 2253 1a6c 6D0E0000 		_ADR	INVER
 2254 1a70 130B0000 		_QBRAN	PARS2
 2254      9C1A0000 
 2255 1a78 250D0000 		_ADR	ONEP
 2256 1a7c F50A0000 		_DONXT	PARS1
 2256      581A0000 
 2257 1a84 850B0000 		_ADR	RFROM
 2258 1a88 F50B0000 		_ADR	DROP
 2259 1a8c D10A0000 		_DOLIT	0
 2259      00000000 
 2260 1a94 050C0000 		_ADR	DUPP
 2261 1a98 67090000 		_UNNEST
 2262              	PARS2:
 2263 1a9c 850B0000 		_ADR	RFROM
 2264              	PARS3:
 2265 1aa0 290C0000 		_ADR	OVER
 2266 1aa4 150C0000 		_ADR	SWAP
 2267 1aa8 AD0B0000 		_ADR	TOR
 2268              	PARS4:
 2269 1aac 2B100000 		_ADR	TEMP
 2270 1ab0 590B0000 		_ADR	AT
 2271 1ab4 290C0000 		_ADR	OVER
 2272 1ab8 790B0000 		_ADR	CAT
 2273 1abc D90C0000 		_ADR	SUBB			// scan for delimiter
 2274 1ac0 2B100000 		_ADR	TEMP
 2275 1ac4 590B0000 		_ADR	AT
 2276 1ac8 850D0000 		_ADR	BLANK
 2277 1acc B90E0000 		_ADR	EQUAL
 2278 1ad0 130B0000 		_QBRAN	PARS5
 2278      DC1A0000 
 2279 1ad8 390C0000 		_ADR	ZLESS
 2280              	PARS5:
 2281 1adc 130B0000 		_QBRAN	PARS6
 2281      001B0000 
 2282 1ae4 250D0000 		_ADR	ONEP
 2283 1ae8 F50A0000 		_DONXT	PARS4
 2283      AC1A0000 
 2284 1af0 050C0000 		_ADR	DUPP
 2285 1af4 AD0B0000 		_ADR	TOR
 2286 1af8 270B0000 		_BRAN	PARS7
 2286      141B0000 
 2287              	PARS6:
 2288 1b00 850B0000 		_ADR	RFROM
 2289 1b04 F50B0000 		_ADR	DROP
 2290 1b08 050C0000 		_ADR	DUPP
 2291 1b0c 250D0000 		_ADR	ONEP
 2292 1b10 AD0B0000 		_ADR	TOR
 2293              	PARS7:
 2294 1b14 290C0000 		_ADR	OVER
 2295 1b18 D90C0000 		_ADR	SUBB
 2296 1b1c 850B0000 		_ADR	RFROM
 2297 1b20 850B0000 		_ADR	RFROM
 2298 1b24 D90C0000 		_ADR	SUBB
 2299 1b28 67090000 		_UNNEST
 2300              	PARS8:
 2301 1b2c 290C0000 		_ADR	OVER
ARM GAS  forth.s 			page 78


 2302 1b30 850B0000 		_ADR	RFROM
 2303 1b34 D90C0000 		_ADR	SUBB
 2304 1b38 67090000 		_UNNEST
 2305              	
 2306              	//    PARSE	( c -- b u //  string> )
 2307              	// 	Scan input stream and return counted string delimited by c.
 2308              	
 2309 1b3c 041A0000 		.word	_QUEST
 2310 1b40 05       	_PARSE:	.byte  5
 2311 1b41 50415253 		.ascii "PARSE"
 2311      45
 2312 1b46 00BF     		.p2align 2 	
 2313              	PARSE:
 2314 1b48 504700BF 		_NEST
 2315 1b4c AD0B0000 		_ADR	TOR
 2316 1b50 99130000 		_ADR	TIB
 2317 1b54 55100000 		_ADR	INN
 2318 1b58 590B0000 		_ADR	AT
 2319 1b5c C90C0000 		_ADR	PLUS			// current input buffer pointer
 2320 1b60 69100000 		_ADR	NTIB
 2321 1b64 590B0000 		_ADR	AT
 2322 1b68 55100000 		_ADR	INN
 2323 1b6c 590B0000 		_ADR	AT
 2324 1b70 D90C0000 		_ADR	SUBB			// remaining count
 2325 1b74 850B0000 		_ADR	RFROM
 2326 1b78 191A0000 		_ADR	PARS
 2327 1b7c 55100000 		_ADR	INN
 2328 1b80 410F0000 		_ADR	PSTOR
 2329 1b84 67090000 		_UNNEST
 2330              	
 2331              	//    .(	  ( -- )
 2332              	// 	Output following string up to next ) .
 2333              	
 2334 1b88 401B0000 		.word	_PARSE
 2335 1b8c 82       	_DOTPR:	.byte  IMEDD+2
 2336 1b8d 2E28     		.ascii ".("
 2337 1b8f 00       		.p2align 2 	
 2338              	DOTPR:
 2339 1b90 504700BF 		_NEST
 2340 1b94 D10A0000 		_DOLIT	')'
 2340      29000000 
 2341 1b9c 491B0000 		_ADR	PARSE
 2342 1ba0 91180000 		_ADR	TYPEE
 2343 1ba4 67090000 		_UNNEST
 2344              	
 2345              	//    (	   ( -- )
 2346              	// 	Ignore following string up to next ) . A comment.
 2347              	
 2348 1ba8 8C1B0000 		.word	_DOTPR
 2349 1bac 81       	_PAREN:	.byte  IMEDD+1
 2350 1bad 28       		.ascii "("
 2351 1bae 00BF     		.p2align 2 	
 2352              	PAREN:
 2353 1bb0 504700BF 		_NEST
 2354 1bb4 D10A0000 		_DOLIT	')'
 2354      29000000 
 2355 1bbc 491B0000 		_ADR	PARSE
ARM GAS  forth.s 			page 79


 2356 1bc0 150E0000 		_ADR	DDROP
 2357 1bc4 67090000 		_UNNEST
 2358              	
 2359              	//    \	   ( -- )
 2360              	// 	Ignore following text till the end of line.
 2361              	
 2362 1bc8 AC1B0000 		.word	_PAREN
 2363 1bcc 81       	_BKSLA:	.byte  IMEDD+1
 2364 1bcd 5C       		.byte	'\\'
 2365 1bce 00BF     		.p2align 2 	
 2366              	BKSLA:
 2367 1bd0 504700BF 		_NEST
 2368 1bd4 69100000 		_ADR	NTIB
 2369 1bd8 590B0000 		_ADR	AT
 2370 1bdc 55100000 		_ADR	INN
 2371 1be0 450B0000 		_ADR	STORE
 2372 1be4 67090000 		_UNNEST
 2373              	
 2374              	//    CHAR	( -- c )
 2375              	// 	Parse next word and return its first character.
 2376              	
 2377 1be8 CC1B0000 		.word	_BKSLA
 2378 1bec 04       	_CHAR:	.byte  4
 2379 1bed 43484152 		.ascii "CHAR"
 2380 1bf1 0000BF   		.p2align 2 	
 2381              	CHAR:
 2382 1bf4 504700BF 		_NEST
 2383 1bf8 850D0000 		_ADR	BLANK
 2384 1bfc 491B0000 		_ADR	PARSE
 2385 1c00 F50B0000 		_ADR	DROP
 2386 1c04 790B0000 		_ADR	CAT
 2387 1c08 67090000 		_UNNEST
 2388              	
 2389              	//    WORD	( c -- a //  string> )
 2390              	// 	Parse a word from input stream and copy it to code dictionary.
 2391              	
 2392 1c0c EC1B0000 		.word	_CHAR
 2393 1c10 04       	_WORDD:	.byte  4
 2394 1c11 574F5244 		.ascii "WORD"
 2395 1c15 0000BF   		.p2align 2 	
 2396              	WORDD:
 2397 1c18 504700BF 		_NEST
 2398 1c1c 491B0000 		_ADR	PARSE
 2399 1c20 61130000 		_ADR	HERE
 2400 1c24 650D0000 		_ADR	CELLP
 2401 1c28 59140000 		_ADR	PACKS
 2402 1c2c 67090000 		_UNNEST
 2403              	
 2404              	//    TOKEN	( -- a //  string> )
 2405              	// 	Parse a word from input stream and copy it to name dictionary.
 2406              	
 2407 1c30 101C0000 		.word	_WORDD
 2408 1c34 05       	_TOKEN:	.byte  5
 2409 1c35 544F4B45 		.ascii "TOKEN"
 2409      4E
 2410 1c3a 00BF     		.p2align 2 	
 2411              	TOKEN:
ARM GAS  forth.s 			page 80


 2412 1c3c 504700BF 		_NEST
 2413 1c40 850D0000 		_ADR	BLANK
 2414 1c44 191C0000 		_ADR	WORDD
 2415 1c48 67090000 		_UNNEST
 2416              	
 2417              	// **************************************************************************
 2418              	//  Dictionary search
 2419              	
 2420              	//    NAME>	( na -- ca )
 2421              	// 	Return a code address given a name address.
 2422              	
 2423 1c4c 341C0000 		.word	_TOKEN
 2424 1c50 05       	_NAMET:	.byte  5
 2425 1c51 4E414D45 		.ascii "NAME>"
 2425      3E
 2426 1c56 00BF     		.p2align 2 	
 2427              	NAMET:
 2428 1c58 504700BF 		_NEST
 2429 1c5c 890F0000 		_ADR	COUNT
 2430 1c60 D10A0000 		_DOLIT	0x1F
 2430      1F000000 
 2431 1c68 490C0000 		_ADR	ANDD
 2432 1c6c C90C0000 		_ADR	PLUS
 2433 1c70 AD120000 		_ADR	ALGND
 2434 1c74 67090000 		_UNNEST
 2435              	
 2436              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2437              	// 	Compare u bytes in two strings. Return 0 if identical.
 2438              	//
 2439              	//  Picatout 2020-12-01, 
 2440              	//      Because of problem with .align directive that
 2441              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2442              	// 		words  to do a byte by byte comparison. 
 2443              	//
 2444 1c78 501C0000 		.word	_NAMET
 2445 1c7c 05       	_SAMEQ:	.byte  5
 2446 1c7d 53414D45 		.ascii "SAME?"
 2446      3F
 2447 1c82 00BF     		.p2align 2	
 2448              	SAMEQ:
 2449 1c84 504700BF 		_NEST
 2450 1c88 AD0B0000 		_ADR	TOR
 2451 1c8c 270B0000 		_BRAN	SAME2
 2451      D01C0000 
 2452              	SAME1:
 2453 1c94 290C0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2454 1c98 990B0000 		_ADR	RAT   // a1 a2 a1 u 
 2455 1c9c C90C0000 		_ADR	PLUS  // a1 a2 a1+u 
 2456 1ca0 790B0000 		_ADR	CAT	   // a1 a2 c1    		
 2457 1ca4 290C0000 		_ADR	OVER  // a1 a2 c1 a2 
 2458 1ca8 990B0000 		_ADR	RAT    
 2459 1cac C90C0000 		_ADR	PLUS    
 2460 1cb0 790B0000 		_ADR	CAT	  // a1 a2 c1 c2
 2461 1cb4 D90C0000 		_ADR	SUBB  
 2462 1cb8 D90D0000 		_ADR	QDUP
 2463 1cbc 130B0000 		_QBRAN	SAME2
 2463      D01C0000 
ARM GAS  forth.s 			page 81


 2464 1cc4 850B0000 		_ADR	RFROM
 2465 1cc8 F50B0000 		_ADR	DROP
 2466 1ccc 67090000 		_UNNEST	// strings not equal
 2467              	SAME2:
 2468 1cd0 F50A0000 		_DONXT	SAME1
 2468      941C0000 
 2469 1cd8 D10A0000 		_DOLIT	0
 2469      00000000 
 2470 1ce0 67090000 		_UNNEST	// strings equal
 2471              	
 2472              	//    find	( a na -- ca na | a F )
 2473              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2474              	
 2475              	//  Picatout 2020-12-01,  
 2476              	//		Modified from original. See comment for word "SAME?" 
 2477              	
 2478              	// 	.word	_SAMEQ
 2479              	// _FIND	.byte  4
 2480              	// 	.ascii "find"
 2481              	// 	.p2align 2 	
 2482              	FIND:
 2483 1ce4 504700BF 		_NEST
 2484 1ce8 150C0000 		_ADR	SWAP			// na a	
 2485 1cec 890F0000 		_ADR	COUNT			// na a+1 count
 2486 1cf0 050C0000 		_ADR	DUPP 
 2487 1cf4 2B100000 		_ADR	TEMP
 2488 1cf8 450B0000 		_ADR	STORE			// na a+1 count 
 2489 1cfc AD0B0000 		_ADR  TOR		// na a+1  R: count  
 2490 1d00 150C0000 		_ADR	SWAP			// a+1 na
 2491              	FIND1:
 2492 1d04 050C0000 		_ADR	DUPP			// a+1 na na
 2493 1d08 130B0000 		_QBRAN	FIND6	// end of vocabulary
 2493      5C1D0000 
 2494 1d10 050C0000 		_ADR	DUPP			// a+1 na na
 2495 1d14 790B0000 		_ADR	CAT			// a+1 na name1
 2496 1d18 D10A0000 		_DOLIT	MASKK
 2496      1FFFFFFF 
 2497 1d20 490C0000 		_ADR	ANDD
 2498 1d24 990B0000 		_ADR	RAT			// a+1 na name1 count 
 2499 1d28 710C0000 		_ADR	XORR			// a+1 na,  same length?
 2500 1d2c 130B0000 		_QBRAN	FIND2
 2500      441D0000 
 2501 1d34 750D0000 		_ADR	CELLM			// a+1 la
 2502 1d38 590B0000 		_ADR	AT			// a+1 next_na
 2503 1d3c 270B0000 		_BRAN	FIND1			// try next word
 2503      041D0000 
 2504              	FIND2:   
 2505 1d44 250D0000 		_ADR	ONEP			// a+1 na+1
 2506 1d48 2B100000 		_ADR	TEMP
 2507 1d4c 590B0000 		_ADR	AT			// a+1 na+1 count
 2508 1d50 851C0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2509              	FIND3:	
 2510 1d54 270B0000 		_BRAN	FIND4
 2510      741D0000 
 2511              	FIND6:	
 2512 1d5c 850B0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2513 1d60 F50B0000 		_ADR	DROP			// a+1 0
ARM GAS  forth.s 			page 82


 2514 1d64 150C0000 		_ADR	SWAP			// 0 a+1
 2515 1d68 350D0000 		_ADR	ONEM			// 0 a
 2516 1d6c 150C0000 		_ADR	SWAP			// a 0 
 2517 1d70 67090000 		_UNNEST			// return without a match
 2518              	FIND4:	
 2519 1d74 130B0000 		_QBRAN	FIND5			// a+1 na+1
 2519      901D0000 
 2520 1d7c 350D0000 		_ADR	ONEM			// a+1 na
 2521 1d80 750D0000 		_ADR	CELLM			// a+4 la
 2522 1d84 590B0000 		_ADR	AT			// a+1 next_na
 2523 1d88 270B0000 		_BRAN	FIND1			// compare next name
 2523      041D0000 
 2524              	FIND5:	
 2525 1d90 850B0000 		_ADR	RFROM			// a+1 na+1 count
 2526 1d94 F50B0000 		_ADR	DROP			// a+1 na+1
 2527 1d98 150C0000 		_ADR	SWAP			// na+1 a+1
 2528 1d9c F50B0000 		_ADR	DROP			// na+1
 2529 1da0 350D0000 		_ADR	ONEM			// na
 2530 1da4 050C0000 		_ADR	DUPP			// na na
 2531 1da8 591C0000 		_ADR	NAMET			// na ca
 2532 1dac 150C0000 		_ADR	SWAP			// ca na
 2533 1db0 67090000 		_UNNEST			//  return with a match
 2534              	
 2535              	//    NAME?	( a -- ca na | a F )
 2536              	// 	Search all context vocabularies for a string.
 2537              	
 2538 1db4 7C1C0000 		.word	_SAMEQ
 2539 1db8 05       	_NAMEQ:	.byte  5
 2540 1db9 4E414D45 		.ascii "NAME?"
 2540      3F
 2541 1dbe 00BF     		.p2align 2 	
 2542              	NAMEQ:
 2543 1dc0 504700BF 		_NEST
 2544 1dc4 A9100000 		_ADR	CNTXT
 2545 1dc8 590B0000 		_ADR	AT
 2546 1dcc E51C0000 		_ADR	FIND
 2547 1dd0 67090000 		_UNNEST
 2548              	
 2549              	// **************************************************************************
 2550              	//  Terminal input
 2551              	
 2552              	//    	  ( bot eot cur -- bot eot cur )
 2553              	// 	Backup the cursor by one character.
 2554              	
 2555              	// 	.word	_NAMEQ
 2556              	// _BKSP	.byte  2
 2557              	// 	.ascii "^H"
 2558              	// 	.p2align 2 	
 2559              	BKSP:
 2560 1dd4 504700BF 		_NEST
 2561 1dd8 AD0B0000 		_ADR	TOR
 2562 1ddc 290C0000 		_ADR	OVER
 2563 1de0 850B0000 		_ADR	RFROM
 2564 1de4 150C0000 		_ADR	SWAP
 2565 1de8 290C0000 		_ADR	OVER
 2566 1dec 710C0000 		_ADR	XORR
 2567 1df0 130B0000 		_QBRAN	BACK1
ARM GAS  forth.s 			page 83


 2567      1C1E0000 
 2568 1df8 D10A0000 		_DOLIT	BKSPP
 2568      08000000 
 2569 1e00 AD0A0000 		_ADR	TECHO
 2570 1e04 350D0000 		_ADR	ONEM
 2571 1e08 850D0000 		_ADR	BLANK
 2572 1e0c AD0A0000 		_ADR	TECHO
 2573 1e10 D10A0000 		_DOLIT	BKSPP
 2573      08000000 
 2574 1e18 AD0A0000 		_ADR	TECHO
 2575              	BACK1:
 2576 1e1c 67090000 		  _UNNEST
 2577              	
 2578              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2579              	// 	Accept and echo the key stroke and bump the cursor.
 2580              	
 2581              	// 	.word	_BKSP
 2582              	// _TAP	.byte  3
 2583              	// 	.ascii "TAP"
 2584              	// 	.p2align 2 	
 2585              	TAP:
 2586 1e20 504700BF 		_NEST
 2587 1e24 050C0000 		_ADR	DUPP
 2588 1e28 AD0A0000 		_ADR	TECHO
 2589 1e2c 290C0000 		_ADR	OVER
 2590 1e30 650B0000 		_ADR	CSTOR
 2591 1e34 250D0000 		_ADR	ONEP
 2592 1e38 67090000 		_UNNEST
 2593              	
 2594              	//    kTAP	( bot eot cur c -- bot eot cur )
 2595              	// 	Process a key stroke, CR or backspace.
 2596              	
 2597              	// 	.word	_TAP
 2598              	// _KTAP	.byte  4
 2599              	// 	.ascii "kTAP"
 2600              	// 	.p2align 2 	
 2601              	KTAP:
 2602              	TTAP:
 2603 1e3c 504700BF 		_NEST
 2604 1e40 050C0000 		_ADR	DUPP
 2605 1e44 D10A0000 		_DOLIT	CRR
 2605      0D000000 
 2606 1e4c 710C0000 		_ADR	XORR
 2607 1e50 130B0000 		_QBRAN  KTAP2
 2607      801E0000 
 2608 1e58 D10A0000 		_DOLIT	BKSPP
 2608      08000000 
 2609 1e60 710C0000 		_ADR	XORR
 2610 1e64 130B0000 		_QBRAN	KTAP1
 2610      781E0000 
 2611 1e6c 850D0000 		_ADR	BLANK
 2612 1e70 211E0000 		_ADR	TAP
 2613 1e74 67090000 		_UNNEST
 2614              	//	.word	0			// patch
 2615              	KTAP1:
 2616 1e78 D51D0000 		_ADR	BKSP
 2617 1e7c 67090000 		_UNNEST
ARM GAS  forth.s 			page 84


 2618              	KTAP2:
 2619 1e80 F50B0000 		_ADR	DROP
 2620 1e84 150C0000 		_ADR	SWAP
 2621 1e88 F50B0000 		_ADR	DROP
 2622 1e8c 050C0000 		_ADR	DUPP
 2623 1e90 67090000 		_UNNEST
 2624              	
 2625              	//    ACCEPT	( b u -- b u )
 2626              	// 	Accept characters to input buffer. Return with actual count.
 2627              	
 2628 1e94 B81D0000 		.word	_NAMEQ
 2629 1e98 06       	_ACCEP:	.byte  6
 2630 1e99 41434345 		.ascii "ACCEPT"
 2630      5054
 2631 1e9f 00       		.p2align 2 	
 2632              	ACCEP:
 2633 1ea0 504700BF 		_NEST
 2634 1ea4 290C0000 		_ADR	OVER
 2635 1ea8 C90C0000 		_ADR	PLUS
 2636 1eac 290C0000 		_ADR	OVER
 2637              	ACCP1:
 2638 1eb0 3D0E0000 		_ADR	DDUP
 2639 1eb4 710C0000 		_ADR	XORR
 2640 1eb8 130B0000 		_QBRAN	ACCP4
 2640      F81E0000 
 2641 1ec0 1D180000 		_ADR	KEY
 2642 1ec4 050C0000 		_ADR	DUPP
 2643 1ec8 850D0000 		_ADR	BLANK
 2644 1ecc D10A0000 		_DOLIT 127
 2644      7F000000 
 2645 1ed4 35110000 		_ADR	WITHI
 2646 1ed8 130B0000 		_QBRAN	ACCP2
 2646      EC1E0000 
 2647 1ee0 211E0000 		_ADR	TAP
 2648 1ee4 270B0000 		_BRAN	ACCP3
 2648      F01E0000 
 2649              	ACCP2:
 2650 1eec 3D1E0000 		_ADR	KTAP
 2651              	ACCP3:	  
 2652 1ef0 270B0000 		_BRAN	ACCP1
 2652      B01E0000 
 2653              	ACCP4:
 2654 1ef8 F50B0000 		_ADR	DROP
 2655 1efc 290C0000 		_ADR	OVER
 2656 1f00 D90C0000 		_ADR	SUBB
 2657 1f04 67090000 		_UNNEST
 2658              	
 2659              	//    QUERY	( -- )
 2660              	// 	Accept input stream to terminal input buffer.
 2661              	
 2662 1f08 981E0000 		.word	_ACCEP
 2663 1f0c 05       	_QUERY:	.byte  5
 2664 1f0d 51554552 		.ascii "QUERY"
 2664      59
 2665 1f12 00BF     		.p2align 2 	
 2666              	QUERY:
 2667 1f14 504700BF 		_NEST
ARM GAS  forth.s 			page 85


 2668 1f18 99130000 		_ADR	TIB
 2669 1f1c D10A0000 		_DOLIT 80
 2669      50000000 
 2670 1f24 A11E0000 		_ADR	ACCEP
 2671 1f28 69100000 		_ADR	NTIB
 2672 1f2c 450B0000 		_ADR	STORE
 2673 1f30 F50B0000 		_ADR	DROP
 2674 1f34 D10A0000 		_DOLIT	0
 2674      00000000 
 2675 1f3c 55100000 		_ADR	INN
 2676 1f40 450B0000 		_ADR	STORE
 2677 1f44 67090000 		_UNNEST
 2678              	
 2679              	// **************************************************************************
 2680              	//  Error handling
 2681              	
 2682              	//    ABORT	( a -- )
 2683              	// 	Reset data stack and jump to QUIT.
 2684              	
 2685 1f48 0C1F0000 		.word	_QUERY
 2686 1f4c 05       	_ABORT:	.byte  5
 2687 1f4d 41424F52 		.ascii "ABORT"
 2687      54
 2688 1f52 00BF     		.p2align 2 	
 2689              	ABORT:
 2690 1f54 504700BF 		_NEST
 2691              	ABORT1:
 2692 1f58 3D180000 		_ADR	SPACE
 2693 1f5c 890F0000 		_ADR	COUNT
 2694 1f60 91180000 		_ADR	TYPEE
 2695 1f64 D10A0000 		_DOLIT	0X3F
 2695      3F000000 
 2696 1f6c AD0A0000 		_ADR	EMIT
 2697 1f70 C5180000 		_ADR	CR
 2698 1f74 DD200000 		_ADR	PRESE
 2699 1f78 270B0000 		_BRAN	QUIT
 2699      FC200000 
 2700              	
 2701              	//    _abort"	( f -- )
 2702              	// 	Run time routine of ABORT" . Abort with a message.
 2703              	
 2704              	// 	.word	_ABORT
 2705              	// _ABORQ	.byte  COMPO+6
 2706              	// 	.ascii "abort\""
 2707              	// 	.p2align 2 	
 2708              	ABORQ:
 2709 1f80 504700BF 		_NEST
 2710 1f84 E5180000 		_ADR	DOSTR
 2711 1f88 150C0000 		_ADR	SWAP 
 2712 1f8c 130B0000 		_QBRAN	1f	// text flag
 2712      9C1F0000 
 2713 1f94 270B0000 		_BRAN	ABORT1
 2713      581F0000 
 2714              	1:
 2715 1f9c F50B0000 		_ADR	DROP
 2716 1fa0 67090000 		_UNNEST			// drop error
 2717              	
ARM GAS  forth.s 			page 86


 2718              	// **************************************************************************
 2719              	//  The text interpreter
 2720              	
 2721              	//    $INTERPRET  ( a -- )
 2722              	// 	Interpret a word. If failed, try to convert it to an integer.
 2723              	
 2724 1fa4 4C1F0000 		.word	_ABORT
 2725 1fa8 0A       	_INTER:	.byte  10
 2726 1fa9 2424494E 		.ascii "$$INTERPRET"
 2726      54455250 
 2726      524554
 2727              		.p2align 2 	
 2728              	INTER:
 2729 1fb4 504700BF 		_NEST
 2730 1fb8 C11D0000 		_ADR	NAMEQ
 2731 1fbc D90D0000 		_ADR	QDUP	// ?defined
 2732 1fc0 130B0000 		_QBRAN	INTE1
 2732      F41F0000 
 2733 1fc8 590B0000 		_ADR	AT
 2734 1fcc D10A0000 		_DOLIT	COMPO
 2734      40000000 
 2735 1fd4 490C0000 		_ADR	ANDD	// ?compile only lexicon bits
 2736 1fd8 811F0000 		_ABORQ	13," compile only"
 2736      0D20636F 
 2736      6D70696C 
 2736      65206F6E 
 2736      6C7900BF 
 2737 1fec E90A0000 		_ADR	EXECU
 2738 1ff0 67090000 		_UNNEST			// execute defined word
 2739              	INTE1:
 2740 1ff4 E5160000 		_ADR	NUMBQ
 2741 1ff8 130B0000 		_QBRAN	INTE2
 2741      04200000 
 2742 2000 67090000 		_UNNEST
 2743              	INTE2:
 2744 2004 551F0000 		_ADR	ABORT	// error
 2745              	
 2746              	//    [	   ( -- )
 2747              	// 	Start the text interpreter.
 2748              	
 2749 2008 A81F0000 		.word	_INTER
 2750 200c 81       	_LBRAC:	.byte  IMEDD+1
 2751 200d 5B       		.ascii "["
 2752 200e 00BF     		.p2align 2 	
 2753              	LBRAC:
 2754 2010 504700BF 		_NEST
 2755 2014 D10A0000 		_DOLIT	INTER
 2755      B41F0000 
 2756 201c 7D100000 		_ADR	TEVAL
 2757 2020 450B0000 		_ADR	STORE
 2758 2024 67090000 		_UNNEST
 2759              	
 2760              	//    .OK	 ( -- )
 2761              	// 	Display "ok" only while interpreting.
 2762              	
 2763 2028 0C200000 		.word	_LBRAC
 2764 202c 03       	_DOTOK:	.byte  3
ARM GAS  forth.s 			page 87


 2765 202d 2E4F4B   		.ascii ".OK"
 2766              		.p2align 2 	
 2767              	DOTOK:
 2768 2030 504700BF 		_NEST
 2769 2034 D10A0000 		_DOLIT	INTER
 2769      B41F0000 
 2770 203c 7D100000 		_ADR	TEVAL
 2771 2040 590B0000 		_ADR	AT
 2772 2044 B90E0000 		_ADR	EQUAL
 2773 2048 130B0000 		_QBRAN	DOTO1
 2773      58200000 
 2774 2050 2D190000 		_DOTQP	3," ok"
 2774      03206F6B 
 2775              	DOTO1:
 2776 2058 C5180000 		_ADR	CR
 2777 205c 67090000 		_UNNEST
 2778              	
 2779              	//    ?STACK	( -- )
 2780              	// 	Abort if the data stack underflows.
 2781              	
 2782 2060 2C200000 		.word	_DOTOK
 2783 2064 06       	_QSTAC:	.byte  6
 2784 2065 3F535441 		.ascii "?STACK"
 2784      434B
 2785 206b 00       		.p2align 2 	
 2786              	QSTAC:
 2787 206c 504700BF 		_NEST
 2788 2070 15130000 		_ADR	DEPTH
 2789 2074 390C0000 		_ADR	ZLESS	// check only for underflow
 2790 2078 811F0000 		_ABORQ	9,"underflow"
 2790      09756E64 
 2790      6572666C 
 2790      6F7700BF 
 2791 2088 67090000 		_UNNEST
 2792              	
 2793              	//    EVAL	( -- )
 2794              	// 	Interpret the input stream.
 2795              	
 2796 208c 64200000 		.word	_QSTAC
 2797 2090 04       	_EVAL:	.byte  4
 2798 2091 4556414C 		.ascii "EVAL"
 2799 2095 0000BF   		.p2align 2 	
 2800              	EVAL:
 2801 2098 504700BF 		_NEST
 2802              	EVAL1:
 2803 209c 3D1C0000 	    _ADR	TOKEN
 2804 20a0 050C0000 		_ADR	DUPP
 2805 20a4 790B0000 		_ADR	CAT	// ?input stream empty
 2806 20a8 130B0000 		_QBRAN	EVAL2
 2806      C4200000 
 2807 20b0 7D100000 		_ADR	TEVAL
 2808 20b4 B1130000 		_ADR	ATEXE
 2809 20b8 6D200000 		_ADR	QSTAC	// evaluate input, check stack
 2810 20bc 270B0000 		_BRAN	EVAL1
 2810      9C200000 
 2811              	EVAL2:
 2812 20c4 F50B0000 		_ADR	DROP
ARM GAS  forth.s 			page 88


 2813 20c8 31200000 		_ADR	DOTOK
 2814 20cc 67090000 		_UNNEST	// prompt
 2815              	
 2816              	//    PRESET	( -- )
 2817              	// 	Reset data stack pointer and the terminal input buffer.
 2818              	
 2819 20d0 90200000 		.word	_EVAL
 2820 20d4 06       	_PRESE:	.byte  6
 2821 20d5 50524553 		.ascii "PRESET"
 2821      4554
 2822 20db 00       		.p2align 2 	
 2823              	PRESE:
 2824 20dc 504700BF 		_NEST 
 2825 20e0 D10A0000 		_DOLIT SPP 
 2825      00FF0120 
 2826 20e8 D10B0000 		_ADR SPSTOR 
 2827 20ec 67090000 		_UNNEST 
 2828              	
 2829              	//    QUIT	( -- )
 2830              	// 	Reset return stack pointer and start text interpreter.
 2831              	
 2832 20f0 D4200000 		.word	_PRESE
 2833 20f4 04       	_QUIT:	.byte  4
 2834 20f5 51554954 		.ascii "QUIT"
 2835 20f9 0000BF   		.p2align 2 	
 2836              	QUIT:
 2837 20fc D10A0000 		_DOLIT RPP 
 2837      80FF0120 
 2838 2104 C10B0000 		_ADR RPSTOR 
 2839              	QUIT1:
 2840 2108 11200000 		_ADR	LBRAC			// start interpretation
 2841              	QUIT2:
 2842 210c 151F0000 		_ADR	QUERY			// get input
 2843 2110 99200000 		_ADR	EVAL
 2844 2114 270B0000 		_BRAN	QUIT2	// continue till error
 2844      0C210000 
 2845              	
 2846 211c F4200000 		.word _QUIT
 2847 2120 06       	_FORGET: .byte 6 
 2848 2121 464F5247 		.ascii "FORGET"
 2848      4554
 2849 2127 00       		.p2align 2
 2850              	FORGET:
 2851 2128 504700BF 		_NEST 
 2852 212c 3D1C0000 		_ADR TOKEN 
 2853 2130 050C0000 		_ADR DUPP 
 2854 2134 130B0000 		_QBRAN 9f 
 2854      70210000 
 2855 213c C11D0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2856 2140 D90D0000 		_ADR QDUP 
 2857 2144 130B0000 		_QBRAN 8f
 2857      6C210000 
 2858 214c 750D0000 		_ADR CELLM // ( ca la )
 2859 2150 050C0000 		_ADR DUPP 
 2860 2154 BD100000 		_ADR CPP   
 2861 2158 450B0000 		_ADR STORE
 2862 215c 590B0000 		_ADR AT 
ARM GAS  forth.s 			page 89


 2863 2160 E5100000 		_ADR LAST 
 2864 2164 450B0000 		_ADR STORE
 2865 2168 D5250000 		_ADR OVERT 
 2866 216c F50B0000 	8:  _ADR DROP 
 2867 2170 67090000 	9:	_UNNEST 
 2868              	
 2869              		.p2align 2 
 2870              	
 2871              	// **************************************************************************
 2872              	//  The compiler
 2873              	
 2874              	//    '	   ( -- ca )
 2875              	// 	Search context vocabularies for the next word in input stream.
 2876              	
 2877 2174 20210000 		.word	_FORGET
 2878 2178 01       	_TICK:	.byte  1
 2879 2179 27       		.ascii "'"
 2880 217a 00BF     		.p2align 2 	
 2881              	TICK:
 2882 217c 504700BF 		_NEST
 2883 2180 3D1C0000 		_ADR	TOKEN
 2884 2184 C11D0000 		_ADR	NAMEQ	// ?defined
 2885 2188 130B0000 		_QBRAN	TICK1
 2885      94210000 
 2886 2190 67090000 		_UNNEST	// yes, push code address
 2887              	TICK1:	
 2888 2194 551F0000 		_ADR ABORT	// no, error
 2889              	
 2890              	//    ALLOT	( n -- )
 2891              	// 	Allocate n bytes to the ram area.
 2892              	
 2893 2198 78210000 		.word	_TICK
 2894 219c 05       	_ALLOT:	.byte  5
 2895 219d 414C4C4F 		.ascii "ALLOT"
 2895      54
 2896 21a2 00BF     		.p2align 2 	
 2897              	ALLOT:
 2898 21a4 504700BF 		_NEST
 2899 21a8 BD100000 		_ADR	CPP
 2900 21ac 410F0000 		_ADR	PSTOR
 2901 21b0 67090000 		_UNNEST			// adjust code pointer
 2902              	
 2903              	//    ,	   ( w -- )
 2904              	// 	Compile an integer into the code dictionary.
 2905              	
 2906 21b4 9C210000 		.word	_ALLOT
 2907 21b8 012C     	_COMMA:	.byte  1,','
 2908 21ba 00BF     		.p2align 2 	
 2909              	COMMA:
 2910 21bc 504700BF 		_NEST
 2911 21c0 61130000 		_ADR	HERE
 2912 21c4 050C0000 		_ADR	DUPP
 2913 21c8 650D0000 		_ADR	CELLP	// cell boundary
 2914 21cc BD100000 		_ADR	CPP
 2915 21d0 450B0000 		_ADR	STORE
 2916 21d4 450B0000 		_ADR	STORE
 2917 21d8 67090000 		_UNNEST	// adjust code pointer, compile
ARM GAS  forth.s 			page 90


 2918              		.p2align 2 
 2919              	//    [COMPILE]   ( -- //  string> )
 2920              	// 	Compile the next immediate word into code dictionary.
 2921              	
 2922 21dc B8210000 		.word	_COMMA
 2923 21e0 89       	_BCOMP:	.byte  IMEDD+9
 2924 21e1 5B434F4D 		.ascii "[COMPILE]"
 2924      50494C45 
 2924      5D
 2925 21ea 00BF     		.p2align 2 	
 2926              	BCOMP:
 2927 21ec 504700BF 		_NEST
 2928 21f0 7D210000 		_ADR	TICK
 2929 21f4 BD210000 		_ADR	COMMA
 2930 21f8 67090000 		_UNNEST
 2931              	
 2932              	//    COMPILE	( -- )
 2933              	// 	Compile the next address in colon list to code dictionary.
 2934              	
 2935 21fc E0210000 		.word	_BCOMP
 2936 2200 47       	_COMPI:	.byte  COMPO+7
 2937 2201 434F4D50 		.ascii "COMPILE"
 2937      494C45
 2938              		.p2align 2 	
 2939              	COMPI:
 2940 2208 504700BF 		_NEST
 2941 220c 850B0000 		_ADR	RFROM
 2942 2210 050C0000 		_ADR	DUPP 
 2943 2214 590B0000 		_ADR	AT
 2944 2218 D10A0000 		_DOLIT 1 
 2944      01000000 
 2945 2220 5D0C0000 		_ADR	ORR 
 2946 2224 BD210000 		_ADR	COMMA 
 2947 2228 650D0000 		_ADR	CELLP 
 2948 222c AD0B0000 		_ADR	TOR 
 2949 2230 67090000 		_UNNEST			// adjust return address
 2950              	
 2951              	//    LITERAL	( w -- )
 2952              	// 	Compile tos to code dictionary as an integer literal.
 2953              	
 2954 2234 00220000 		.word	_COMPI
 2955 2238 87       	_LITER:	.byte  IMEDD+7
 2956 2239 4C495445 		.ascii "LITERAL"
 2956      52414C
 2957              		.p2align 2 	
 2958              	LITER:
 2959 2240 504700BF 		_NEST
 2960 2244 D10A0000 		_COMPI	DOLIT
 2960      D00A0000 
 2960      31260000 
 2961 2250 BD210000 		_ADR	COMMA
 2962 2254 67090000 		_UNNEST
 2963              	
 2964              	//    $,"	( -- )
 2965              	// 	Compile a literal string up to next " .
 2966              	
 2967              	// 	.word	_LITER
ARM GAS  forth.s 			page 91


 2968              	// _STRCQ	.byte  3
 2969              	// 	.ascii "$,\""
 2970              	// 	.p2align 2 	
 2971              	STRCQ:
 2972 2258 504700BF 		_NEST
 2973 225c D10A0000 		_DOLIT -4
 2973      FCFFFFFF 
 2974 2264 BD100000 		_ADR	CPP
 2975 2268 410F0000 		_ADR	PSTOR
 2976 226c D10A0000 		_DOLIT	'\"'
 2976      22000000 
 2977 2274 191C0000 		_ADR	WORDD			// move word to code dictionary
 2978 2278 890F0000 		_ADR	COUNT
 2979 227c C90C0000 		_ADR	PLUS
 2980 2280 AD120000 		_ADR	ALGND			// calculate aligned end of string
 2981 2284 BD100000 		_ADR	CPP
 2982 2288 450B0000 		_ADR	STORE
 2983 228c 67090000 		_UNNEST 			// adjust the code pointer
 2984              	
 2985              	/*******************
 2986              	//  Structures
 2987              	*******************/
 2988              	//    FOR	 ( -- a )
 2989              	// 	Start a FOR-NEXT loop structure in a colon definition.
 2990              	
 2991 2290 38220000 		.word	_LITER
 2992 2294 C3       	_FOR:	.byte  COMPO+IMEDD+3
 2993 2295 464F52   		.ascii "FOR"
 2994              		.p2align 2 	
 2995              	FOR:
 2996 2298 504700BF 		_NEST
 2997 229c D10A0000 		_COMPI	TOR
 2997      AC0B0000 
 2997      31260000 
 2998 22a8 61130000 		_ADR	HERE
 2999 22ac 67090000 		_UNNEST
 3000              	
 3001              	//    BEGIN	( -- a )
 3002              	// 	Start an infinite or indefinite loop structure.
 3003              	
 3004 22b0 94220000 		.word	_FOR
 3005 22b4 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3006 22b5 42454749 		.ascii "BEGIN"
 3006      4E
 3007 22ba 00BF     		.p2align 2 	
 3008              	BEGIN:
 3009 22bc 504700BF 		_NEST
 3010 22c0 61130000 		_ADR	HERE
 3011 22c4 67090000 		_UNNEST
 3012              		.p2align 2 
 3013              	
 3014              	//    NEXT	( a -- )
 3015              	// 	Terminate a FOR-NEXT loop structure.
 3016 22c8 B4220000 		.word	_BEGIN
 3017 22cc C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3018 22cd 4E455854 		.ascii "NEXT"
 3019 22d1 0000BF   		.p2align 2 	
ARM GAS  forth.s 			page 92


 3020              	FNEXT:
 3021 22d4 504700BF 		_NEST
 3022 22d8 D10A0000 		_COMPI	DONXT
 3022      F40A0000 
 3022      31260000 
 3023 22e4 BD210000 		_ADR	COMMA
 3024 22e8 67090000 		_UNNEST
 3025              	
 3026              	//    UNTIL	( a -- )
 3027              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3028              	
 3029 22ec CC220000 		.word	_FNEXT
 3030 22f0 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3031 22f1 554E5449 		.ascii "UNTIL"
 3031      4C
 3032 22f6 00BF     		.p2align 2 	
 3033              	UNTIL:
 3034 22f8 504700BF 		_NEST
 3035 22fc D10A0000 		_COMPI	QBRAN
 3035      120B0000 
 3035      31260000 
 3036 2308 BD210000 		_ADR	COMMA
 3037 230c 67090000 		_UNNEST
 3038              	
 3039              	//    AGAIN	( a -- )
 3040              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3041              	
 3042 2310 F0220000 		.word	_UNTIL
 3043 2314 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3044 2315 41474149 		.ascii "AGAIN"
 3044      4E
 3045 231a 00BF     		.p2align 2 	
 3046              	AGAIN:
 3047 231c 504700BF 		_NEST
 3048 2320 D10A0000 		_COMPI	BRAN
 3048      260B0000 
 3048      31260000 
 3049 232c BD210000 		_ADR	COMMA
 3050 2330 67090000 		_UNNEST
 3051              	
 3052              	//    IF	  ( -- A )
 3053              	// 	Begin a conditional branch structure.
 3054              	
 3055 2334 14230000 		.word	_AGAIN
 3056 2338 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3057 2339 4946     		.ascii "IF"
 3058 233b 00       		.p2align 2 	
 3059              	IFF:
 3060 233c 504700BF 		_NEST
 3061 2340 D10A0000 		_COMPI	QBRAN
 3061      120B0000 
 3061      31260000 
 3062 234c 61130000 		_ADR	HERE
 3063 2350 D10A0000 		_DOLIT	4
 3063      04000000 
 3064 2358 BD100000 		_ADR	CPP
 3065 235c 410F0000 		_ADR	PSTOR
ARM GAS  forth.s 			page 93


 3066 2360 67090000 		_UNNEST
 3067              	
 3068              	//    AHEAD	( -- A )
 3069              	// 	Compile a forward branch instruction.
 3070              	
 3071 2364 38230000 		.word	_IFF
 3072 2368 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3073 2369 41484541 		.ascii "AHEAD"
 3073      44
 3074 236e 00BF     		.p2align 2 	
 3075              	AHEAD:
 3076 2370 504700BF 		_NEST
 3077 2374 D10A0000 		_COMPI	BRAN
 3077      260B0000 
 3077      31260000 
 3078 2380 61130000 		_ADR	HERE
 3079 2384 D10A0000 		_DOLIT	4
 3079      04000000 
 3080 238c BD100000 		_ADR	CPP
 3081 2390 410F0000 		_ADR	PSTOR
 3082 2394 67090000 		_UNNEST
 3083              	
 3084              	//    REPEAT	( A a -- )
 3085              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3086              	
 3087 2398 68230000 		.word	_AHEAD
 3088 239c C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3089 239d 52455045 		.ascii "REPEAT"
 3089      4154
 3090 23a3 00       		.p2align 2 	
 3091              	REPEA:
 3092 23a4 504700BF 		_NEST
 3093 23a8 1D230000 		_ADR	AGAIN
 3094 23ac 61130000 		_ADR	HERE
 3095 23b0 150C0000 		_ADR	SWAP
 3096 23b4 450B0000 		_ADR	STORE
 3097 23b8 67090000 		_UNNEST
 3098              	
 3099              	//    THEN	( A -- )
 3100              	// 	Terminate a conditional branch structure.
 3101              	
 3102 23bc 9C230000 		.word	_REPEA
 3103 23c0 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3104 23c1 5448454E 		.ascii "THEN"
 3105 23c5 0000BF   		.p2align 2 	
 3106              	THENN:
 3107 23c8 504700BF 		_NEST
 3108 23cc 61130000 		_ADR	HERE
 3109 23d0 150C0000 		_ADR	SWAP
 3110 23d4 450B0000 		_ADR	STORE
 3111 23d8 67090000 		_UNNEST
 3112              	
 3113              	//    AFT	 ( a -- a A )
 3114              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3115              	
 3116 23dc C0230000 		.word	_THENN
 3117 23e0 C3       	_AFT:	.byte  COMPO+IMEDD+3
ARM GAS  forth.s 			page 94


 3118 23e1 414654   		.ascii "AFT"
 3119              		.p2align 2 	
 3120              	AFT:
 3121 23e4 504700BF 		_NEST
 3122 23e8 F50B0000 		_ADR	DROP
 3123 23ec 71230000 		_ADR	AHEAD
 3124 23f0 BD220000 		_ADR	BEGIN
 3125 23f4 150C0000 		_ADR	SWAP
 3126 23f8 67090000 		_UNNEST
 3127              	
 3128              	//    ELSE	( A -- A )
 3129              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3130              	
 3131 23fc E0230000 		.word	_AFT
 3132 2400 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3133 2401 454C5345 		.ascii "ELSE"
 3134 2405 0000BF   		.p2align 2 	
 3135              	ELSEE:
 3136 2408 504700BF 		_NEST
 3137 240c 71230000 		_ADR	AHEAD
 3138 2410 150C0000 		_ADR	SWAP
 3139 2414 C9230000 		_ADR	THENN
 3140 2418 67090000 		_UNNEST
 3141              	
 3142              	//    WHILE	( a -- A a )
 3143              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3144              	
 3145 241c 00240000 		.word	_ELSEE
 3146 2420 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3147 2421 5748494C 		.ascii "WHILE"
 3147      45
 3148 2426 00BF     		.p2align 2 	
 3149              	WHILE:
 3150 2428 504700BF 		_NEST
 3151 242c 3D230000 		_ADR	IFF
 3152 2430 150C0000 		_ADR	SWAP
 3153 2434 67090000 		_UNNEST
 3154              	
 3155              	//    ABORT"	( -- //  string> )
 3156              	// 	Conditional abort with an error message.
 3157              	
 3158 2438 20240000 		.word	_WHILE
 3159 243c 86       	_ABRTQ:	.byte  IMEDD+6
 3160 243d 41424F52 		.ascii "ABORT\""
 3160      5422
 3161 2443 00       		.p2align 2 	
 3162              	ABRTQ:
 3163 2444 504700BF 		_NEST
 3164 2448 D10A0000 		_COMPI	ABORQ
 3164      801F0000 
 3164      31260000 
 3165 2454 59220000 		_ADR	STRCQ
 3166 2458 67090000 		_UNNEST
 3167              	
 3168              	//    $"	( -- //  string> )
 3169              	// 	Compile an inline word literal.
 3170              	
ARM GAS  forth.s 			page 95


 3171 245c 3C240000 		.word	_ABRTQ
 3172 2460 82       	_STRQ:	.byte  IMEDD+2
 3173 2461 2422     		.ascii	"$\""
 3174 2463 00       		.p2align 2 	
 3175              	STRQ:
 3176 2464 504700BF 		_NEST
 3177 2468 D10A0000 		_COMPI	STRQP
 3177      10190000 
 3177      31260000 
 3178 2474 59220000 		_ADR	STRCQ
 3179 2478 67090000 		_UNNEST
 3180              	
 3181              	//    ."	( -- //  string> )
 3182              	// 	Compile an inline word  literal to be typed out at run time.
 3183              	
 3184 247c 60240000 		.word	_STRQ
 3185 2480 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3186 2481 2E22     		.ascii	".\""
 3187 2483 00       		.p2align 2 	
 3188              	DOTQ:
 3189 2484 504700BF 		_NEST
 3190 2488 D10A0000 		_COMPI	DOTQP
 3190      2C190000 
 3190      31260000 
 3191 2494 59220000 		_ADR	STRCQ
 3192 2498 67090000 		_UNNEST
 3193              	
 3194              	// **************************************************************************
 3195              	//  Name compiler
 3196              	
 3197              	//    ?UNIQUE	( a -- a )
 3198              	// 	Display a warning message if the word already exists.
 3199              	
 3200 249c 80240000 		.word	_DOTQ
 3201 24a0 07       	_UNIQU:	.byte  7
 3202 24a1 3F554E49 		.ascii "?UNIQUE"
 3202      515545
 3203              		.p2align 2 	
 3204              	UNIQU:
 3205 24a8 504700BF 		_NEST
 3206 24ac 050C0000 		_ADR	DUPP
 3207 24b0 C11D0000 		_ADR	NAMEQ			// ?name exists
 3208 24b4 130B0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3208      D4240000 
 3209 24bc 2D190000 		_DOTQP	7," reDef "		// but warn the user
 3209      07207265 
 3209      44656620 
 3210 24c8 290C0000 		_ADR	OVER
 3211 24cc 890F0000 		_ADR	COUNT
 3212 24d0 91180000 		_ADR	TYPEE			// just in case its not planned
 3213              	UNIQ1:
 3214 24d4 F50B0000 		_ADR	DROP
 3215 24d8 67090000 		_UNNEST
 3216              	
 3217              	//    $,n	 ( na -- )
 3218              	// 	Build a new dictionary name using the data at na.
 3219              	
ARM GAS  forth.s 			page 96


 3220              	// 	.word	_UNIQU
 3221              	// _SNAME	.byte  3
 3222              	// 	.ascii "$,n"
 3223              	// 	.p2align 2 	
 3224              	SNAME:
 3225 24dc 504700BF 		_NEST
 3226 24e0 050C0000 		_ADR	DUPP			//  na na
 3227 24e4 790B0000 		_ADR	CAT			//  ?null input
 3228 24e8 130B0000 		_QBRAN	SNAM1
 3228      24250000 
 3229 24f0 A9240000 		_ADR	UNIQU			//  na
 3230 24f4 E5100000 		_ADR	LAST			//  na last
 3231 24f8 590B0000 		_ADR	AT			//  na la
 3232 24fc BD210000 		_ADR	COMMA			//  na
 3233 2500 050C0000 		_ADR	DUPP			//  na na
 3234 2504 E5100000 		_ADR	LAST			//  na na last
 3235 2508 450B0000 		_ADR	STORE			//  na , save na for vocabulary link
 3236 250c 890F0000 		_ADR	COUNT			//  na+1 count
 3237 2510 C90C0000 		_ADR	PLUS			//  na+1+count
 3238 2514 AD120000 		_ADR	ALGND			//  word boundary
 3239 2518 BD100000 		_ADR	CPP
 3240 251c 450B0000 		_ADR	STORE			//  top of dictionary now
 3241 2520 67090000 		_UNNEST
 3242              	SNAM1:
 3243 2524 11190000 		_ADR	STRQP
 3244 2528 07       		.byte	7
 3245 2529 206E616D 		.ascii " name? "
 3245      653F20
 3246 2530 551F0000 		_ADR	ABORT
 3247              	
 3248              	//    $COMPILE	( a -- )
 3249              	// 	Compile next word to code dictionary as a token or literal.
 3250              	
 3251 2534 A0240000 		.word	_UNIQU
 3252 2538 08       	_SCOMP:	.byte  8
 3253 2539 24434F4D 		.ascii "$COMPILE"
 3253      50494C45 
 3254 2541 0000BF   		.p2align 2 	
 3255              	SCOMP:
 3256 2544 504700BF 		_NEST
 3257 2548 C11D0000 		_ADR	NAMEQ
 3258 254c D90D0000 		_ADR	QDUP	// defined?
 3259 2550 130B0000 		_QBRAN	SCOM2
 3259      80250000 
 3260 2558 590B0000 		_ADR	AT
 3261 255c D10A0000 		_DOLIT	IMEDD
 3261      80000000 
 3262 2564 490C0000 		_ADR	ANDD	// immediate?
 3263 2568 130B0000 		_QBRAN	SCOM1
 3263      78250000 
 3264 2570 E90A0000 		_ADR	EXECU
 3265 2574 67090000 		_UNNEST			// it's immediate, execute
 3266              	SCOM1:
 3267 2578 31260000 		_ADR	CALLC			// it's not immediate, compile
 3268 257c 67090000 		_UNNEST	
 3269              	SCOM2:
 3270 2580 E5160000 		_ADR	NUMBQ
ARM GAS  forth.s 			page 97


 3271 2584 130B0000 		_QBRAN	SCOM3
 3271      94250000 
 3272 258c 41220000 		_ADR	LITER
 3273 2590 67090000 		_UNNEST			// compile number as integer
 3274              	SCOM3: // compilation abort 
 3275 2594 9D250000 		_ADR COLON_ABORT 
 3276 2598 551F0000 		_ADR	ABORT			// error
 3277              	
 3278              	// before aborting a compilation 
 3279              	// reset HERE and LAST
 3280              	// to previous values. 
 3281              	COLON_ABORT:
 3282 259c 504700BF 		_NEST 
 3283 25a0 E5100000 		_ADR LAST 
 3284 25a4 590B0000 		_ADR AT 
 3285 25a8 750D0000 		_ADR CELLM 
 3286 25ac 050C0000 		_ADR DUPP 
 3287 25b0 BD100000 		_ADR CPP  
 3288 25b4 450B0000 		_ADR STORE 
 3289 25b8 590B0000 		_ADR AT 
 3290 25bc E5100000 		_ADR LAST 
 3291 25c0 450B0000 		_ADR STORE 
 3292 25c4 67090000 		_UNNEST 
 3293              	
 3294              	//    OVERT	( -- )
 3295              	// 	Link a new word into the current vocabulary.
 3296              	
 3297 25c8 38250000 		.word	_SCOMP
 3298 25cc 05       	_OVERT:	.byte  5
 3299 25cd 4F564552 		.ascii "OVERT"
 3299      54
 3300 25d2 00BF     		.p2align 2 	
 3301              	OVERT:
 3302 25d4 504700BF 		_NEST
 3303 25d8 E5100000 		_ADR	LAST
 3304 25dc 590B0000 		_ADR	AT
 3305 25e0 A9100000 		_ADR	CNTXT
 3306 25e4 450B0000 		_ADR	STORE
 3307 25e8 67090000 		_UNNEST
 3308              	
 3309              	//    ; 	   ( -- )
 3310              	// 	Terminate a colon definition.
 3311              	
 3312 25ec CC250000 		.word	_OVERT
 3313 25f0 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3314 25f1 3B       		.ascii ";"
 3315 25f2 00BF     		.p2align 2 	
 3316              	SEMIS:
 3317 25f4 504700BF 		_NEST
 3318 25f8 D10A0000 		_DOLIT	UNNEST
 3318      66090000 
 3319 2600 31260000 		_ADR	CALLC
 3320 2604 11200000 		_ADR	LBRAC
 3321 2608 D5250000 		_ADR	OVERT
 3322 260c 67090000 		_UNNEST
 3323              	
 3324              	//    ]	   ( -- )
ARM GAS  forth.s 			page 98


 3325              	// 	Start compiling the words in the input stream.
 3326              	
 3327 2610 F0250000 		.word	_SEMIS
 3328 2614 01       	_RBRAC:	.byte  1
 3329 2615 5D       		.ascii "]"
 3330 2616 00BF     		.p2align 2 	
 3331              	RBRAC:
 3332 2618 504700BF 		_NEST
 3333 261c D10A0000 		_DOLIT	SCOMP
 3333      44250000 
 3334 2624 7D100000 		_ADR	TEVAL
 3335 2628 450B0000 		_ADR	STORE
 3336 262c 67090000 		_UNNEST
 3337              	
 3338              	//    BL.W	( ca -- )
 3339              	// 	compile ca.
 3340              	
 3341              	// 	.word	_RBRAC
 3342              	// _CALLC	.byte  5
 3343              	// 	.ascii "call,"
 3344              	// 	.p2align 2 	
 3345              	CALLC:
 3346 2630 504700BF 		_NEST
 3347 2634 D10A0000 		_DOLIT 1 
 3347      01000000 
 3348 263c 5D0C0000 		_ADR ORR 
 3349 2640 BD210000 		_ADR COMMA  
 3350 2644 67090000 		_UNNEST 
 3351              	
 3352              	
 3353              	// 	:	( -- //  string> )
 3354              	// 	Start a new colon definition using next word as its name.
 3355              	
 3356 2648 14260000 		.word	_RBRAC
 3357 264c 01       	_COLON:	.byte  1
 3358 264d 3A       		.ascii ":"
 3359 264e 00BF     		.p2align 2 	
 3360              	COLON:
 3361 2650 504700BF 		_NEST
 3362 2654 3D1C0000 		_ADR	TOKEN
 3363 2658 DD240000 		_ADR	SNAME
 3364 265c 71090000 		_ADR	COMPI_NEST 
 3365 2660 19260000 		_ADR	RBRAC
 3366 2664 67090000 		_UNNEST
 3367              	
 3368              	//    IMMEDIATE   ( -- )
 3369              	// 	Make the last compiled word an immediate word.
 3370              	
 3371 2668 4C260000 		.word	_COLON
 3372 266c 09       	_IMMED:	.byte  9
 3373 266d 494D4D45 		.ascii "IMMEDIATE"
 3373      44494154 
 3373      45
 3374 2676 00BF     		.p2align 2 	
 3375              	IMMED:
 3376 2678 504700BF 		_NEST
 3377 267c D10A0000 		_DOLIT	IMEDD
ARM GAS  forth.s 			page 99


 3377      80000000 
 3378 2684 E5100000 		_ADR	LAST
 3379 2688 590B0000 		_ADR	AT
 3380 268c 590B0000 		_ADR	AT
 3381 2690 5D0C0000 		_ADR	ORR
 3382 2694 E5100000 		_ADR	LAST
 3383 2698 590B0000 		_ADR	AT
 3384 269c 450B0000 		_ADR	STORE
 3385 26a0 67090000 		_UNNEST
 3386              	
 3387              	// **************************************************************************
 3388              	//  Defining words
 3389              	
 3390              	//    CONSTANT	( u -- //  string> )
 3391              	// 	Compile a new constant.
 3392              	
 3393 26a4 6C260000 		.word	_IMMED
 3394 26a8 08       	_CONST:	.byte  8
 3395 26a9 434F4E53 		.ascii "CONSTANT"
 3395      54414E54 
 3396 26b1 0000BF   		.p2align 2 	
 3397              	CONST:
 3398 26b4 504700BF 		_NEST 
 3399 26b8 3D1C0000 		_ADR	TOKEN
 3400 26bc DD240000 		_ADR	SNAME
 3401 26c0 D5250000 		_ADR	OVERT
 3402 26c4 71090000 		_ADR	COMPI_NEST
 3403 26c8 D10A0000 		_DOLIT	DOCON
 3403      BC0F0000 
 3404 26d0 31260000 		_ADR	CALLC
 3405 26d4 BD210000 		_ADR	COMMA
 3406 26d8 D10A0000 		_DOLIT	UNNEST 
 3406      66090000 
 3407 26e0 31260000 		_ADR	CALLC  
 3408 26e4 67090000 		_UNNEST
 3409              	
 3410              		.p2align 2 
 3411              	// doDOES> ( -- a )
 3412              	// runtime action of DOES> 
 3413              	// leave parameter field address on stack 
 3414              	DODOES:
 3415 26e8 504700BF 		_NEST 
 3416 26ec 850B0000 		_ADR	RFROM
 3417 26f0 650D0000 		_ADR	CELLP 
 3418 26f4 250D0000 		_ADR	ONEP  
 3419 26f8 E5100000 		_ADR LAST 
 3420 26fc 590B0000 		_ADR AT
 3421 2700 591C0000 		_ADR NAMET 
 3422 2704 650D0000 		_ADR CELLP 
 3423 2708 450B0000 		_ADR STORE  
 3424 270c 67090000 		_UNNEST 
 3425              	
 3426              		.p2align 2
 3427              	//  DOES> ( -- )
 3428              	//  compile time action 
 3429 2710 A8260000 		.word _CONST   
 3430 2714 C5       	_DOES: .byte IMEDD+COMPO+5 
ARM GAS  forth.s 			page 100


 3431 2715 444F4553 		.ascii "DOES>"
 3431      3E
 3432 271a 00BF     		.p2align 2
 3433              	DOES: 
 3434 271c 504700BF 		_NEST 
 3435 2720 D10A0000 		_DOLIT DODOES 
 3435      E8260000 
 3436 2728 31260000 		_ADR CALLC 
 3437 272c D10A0000 		_DOLIT	UNNEST
 3437      66090000 
 3438 2734 31260000 		_ADR	CALLC 
 3439 2738 71090000 		_ADR COMPI_NEST
 3440 273c D10A0000 		_DOLIT RFROM 
 3440      840B0000 
 3441 2744 31260000 		_ADR	CALLC
 3442 2748 67090000 		_UNNEST 
 3443              	
 3444              	
 3445              	
 3446              	//  DEFER@ ( "name" -- a )
 3447              	//  return value of code field of defered function. 
 3448 274c 14270000 		.word _DOES 
 3449 2750 06       	_DEFERAT: .byte 6 
 3450 2751 44454645 		.ascii "DEFER@"
 3450      5240
 3451 2757 00       		.p2align 2 
 3452              	DEFERAT: 
 3453 2758 504700BF 		_NEST 
 3454 275c 7D210000 		_ADR TICK
 3455 2760 650D0000 		_ADR CELLP 
 3456 2764 590B0000 		_ADR AT 
 3457 2768 350D0000 		_ADR ONEM 
 3458 276c 67090000 		_UNNEST 
 3459              	
 3460              	// DEFER! ( "name1" "name2" -- )
 3461              	// assign an action to a defered word 
 3462 2770 50270000 		.word _DEFERAT 
 3463 2774 06       	_DEFERSTO: .byte 6 
 3464 2775 44454645 		.ascii "DEFER!" 
 3464      5221
 3465 277b 00       		.p2align 2 
 3466              	DEFERSTO:
 3467 277c 504700BF 		_NEST 
 3468 2780 7D210000 		_ADR TICK 
 3469 2784 250D0000 		_ADR ONEP 
 3470 2788 7D210000 		_ADR TICK 
 3471 278c 650D0000 		_ADR CELLP 
 3472 2790 450B0000 		_ADR STORE 
 3473 2794 67090000 		_UNNEST
 3474              	
 3475              	//  DEFER ( "name" -- )
 3476              	//  create a defered definition
 3477 2798 74270000 		.word _DEFERSTO  
 3478 279c 05       	_DEFER: .byte 5 
 3479 279d 44454645 		.ascii "DEFER"
 3479      52
 3480 27a2 00BF     		.p2align 2
ARM GAS  forth.s 			page 101


 3481              	DEFER:
 3482 27a4 504700BF 		_NEST 
 3483 27a8 F5270000 		_ADR CREAT 
 3484 27ac D10A0000 		_DOLIT UNNEST 
 3484      66090000 
 3485 27b4 31260000 		_ADR CALLC 
 3486 27b8 D10A0000 		_DOLIT DEFER_NOP
 3486      DC270000 
 3487 27c0 250D0000 		_ADR ONEP 
 3488 27c4 E5100000 		_ADR LAST 
 3489 27c8 590B0000 		_ADR AT 
 3490 27cc 591C0000 		_ADR NAMET 
 3491 27d0 650D0000 		_ADR CELLP 
 3492 27d4 450B0000 		_ADR STORE 
 3493 27d8 67090000 		_UNNEST 
 3494              	DEFER_NOP:
 3495 27dc 504700BF 		_NEST  
 3496 27e0 CD0A0000 		_ADR NOP 
 3497 27e4 67090000 		_UNNEST 
 3498              	
 3499              	//    CREATE	( -- //  string> )
 3500              	// 	Compile a new array entry without allocating code space.
 3501              	
 3502 27e8 9C270000 		.word	_DEFER 
 3503 27ec 06       	_CREAT:	.byte  6
 3504 27ed 43524541 		.ascii "CREATE"
 3504      5445
 3505 27f3 00       		.p2align 2 	
 3506              	CREAT:
 3507 27f4 504700BF 		_NEST 
 3508 27f8 3D1C0000 		_ADR	TOKEN
 3509 27fc DD240000 		_ADR	SNAME
 3510 2800 D5250000 		_ADR	OVERT
 3511 2804 71090000 		_ADR	COMPI_NEST 
 3512 2808 D10A0000 		_DOLIT	DOVAR
 3512      B00F0000 
 3513 2810 31260000 		_ADR	CALLC
 3514 2814 67090000 		_UNNEST
 3515              	
 3516              	//    VARIABLE	( -- //  string> )
 3517              	// 	Compile a new variable initialized to 0.
 3518              	
 3519 2818 EC270000 		.word	_CREAT
 3520 281c 08       	_VARIA:	.byte  8
 3521 281d 56415249 		.ascii "VARIABLE"
 3521      41424C45 
 3522 2825 0000BF   		.p2align 2 	
 3523              	VARIA:
 3524 2828 504700BF 		_NEST
 3525 282c F5270000 		_ADR	CREAT
 3526 2830 D10A0000 		_DOLIT	0
 3526      00000000 
 3527 2838 BD210000 		_ADR	COMMA
 3528 283c D10A0000 		_DOLIT UNNEST
 3528      66090000 
 3529 2844 31260000 		_ADR	CALLC  
 3530 2848 67090000 		_UNNEST
ARM GAS  forth.s 			page 102


 3531              	
 3532              	// **************************************************************************
 3533              	//  Tools
 3534              	
 3535              	//    dm+	 ( a u -- a )
 3536              	// 	Dump u bytes from , leaving a+u on the stack.
 3537              	
 3538              	// 	.word	_VARIA 
 3539              	// _DMP	.byte  3
 3540              	// 	.ascii "dm+"
 3541              	// 	.p2align 2 	
 3542              	DMP:
 3543 284c 504700BF 		_NEST
 3544 2850 290C0000 		_ADR	OVER
 3545 2854 D10A0000 		_DOLIT	4
 3545      04000000 
 3546 285c 71190000 		_ADR	UDOTR			// display address
 3547 2860 3D180000 		_ADR	SPACE
 3548 2864 AD0B0000 		_ADR	TOR			// start count down loop
 3549 2868 270B0000 		_BRAN	PDUM2			// skip first pass
 3549      88280000 
 3550              	PDUM1:
 3551 2870 050C0000 	  _ADR	DUPP
 3552 2874 790B0000 		_ADR	CAT
 3553 2878 D10A0000 		_DOLIT	3
 3553      03000000 
 3554 2880 71190000 		_ADR	UDOTR			// display numeric data
 3555 2884 250D0000 		_ADR	ONEP			// increment address
 3556              	PDUM2:
 3557 2888 F50A0000 	  _ADR	DONXT
 3558 288c 70280000 		.word	PDUM1	// loop till done
 3559 2890 67090000 		_UNNEST
 3560              		.p2align 2 
 3561              	//    DUMP	( a u -- )
 3562              	// 	Dump u bytes from a, in a formatted manner.
 3563              	
 3564 2894 1C280000 		.word	_VARIA
 3565 2898 04       	_DUMP:	.byte  4
 3566 2899 44554D50 		.ascii "DUMP"
 3567 289d 0000BF   		.p2align 2 	
 3568              	DUMP:
 3569 28a0 504700BF 		_NEST
 3570 28a4 21100000 		_ADR	BASE
 3571 28a8 590B0000 		_ADR	AT
 3572 28ac AD0B0000 		_ADR	TOR
 3573 28b0 35160000 		_ADR	HEX			// save radix,set hex
 3574 28b4 D10A0000 		_DOLIT	16
 3574      10000000 
 3575 28bc 4D120000 		_ADR	SLASH			// change count to lines
 3576 28c0 AD0B0000 		_ADR	TOR
 3577 28c4 270B0000 		_BRAN	DUMP4			// start count down loop
 3577      F4280000 
 3578              	DUMP1:
 3579 28cc C5180000 	  _ADR	CR
 3580 28d0 D10A0000 		_DOLIT	16
 3580      10000000 
 3581 28d8 3D0E0000 		_ADR	DDUP
ARM GAS  forth.s 			page 103


 3582 28dc 4D280000 		_ADR	DMP			// display numeric
 3583 28e0 ED0D0000 		_ADR	ROT
 3584 28e4 ED0D0000 		_ADR	ROT
 3585 28e8 3D180000 		_ADR	SPACE
 3586 28ec 3D180000 		_ADR	SPACE
 3587 28f0 91180000 		_ADR	TYPEE			// display printable characters
 3588              	DUMP4:
 3589 28f4 F50A0000 	  _DONXT	DUMP1	// loop till done
 3589      CC280000 
 3590              	DUMP3:
 3591 28fc F50B0000 		_ADR	DROP
 3592 2900 850B0000 		_ADR	RFROM
 3593 2904 21100000 		_ADR	BASE
 3594 2908 450B0000 		_ADR	STORE			// restore radix
 3595 290c 67090000 		_UNNEST
 3596              	
 3597              	//    .S	  ( ... -- ... )
 3598              	// 	Display the contents of the data stack.
 3599              	
 3600 2910 98280000 		.word	_DUMP
 3601              	_DOTS:
 3602 2914 02       		.byte  2
 3603 2915 2E53     		.ascii ".S"
 3604 2917 00       		.p2align 2 	
 3605              	DOTS:
 3606 2918 504700BF 		_NEST
 3607 291c 3D180000 		_ADR	SPACE
 3608 2920 15130000 		_ADR	DEPTH			// stack depth
 3609 2924 AD0B0000 		_ADR	TOR			// start count down loop
 3610 2928 270B0000 		_BRAN	DOTS2			// skip first pass
 3610      3C290000 
 3611              	DOTS1:
 3612 2930 990B0000 		_ADR	RAT
 3613 2934 39130000 		_ADR	PICK
 3614 2938 C9190000 		_ADR	DOT			// index stack, display contents
 3615              	DOTS2:
 3616 293c F50A0000 		_DONXT	DOTS1	// loop till done
 3616      30290000 
 3617 2944 3D180000 		_ADR	SPACE
 3618 2948 67090000 		_UNNEST
 3619              	
 3620              	//    >NAME	( ca -- na | F )
 3621              	// 	Convert code address to a name address.
 3622              	
 3623 294c 14290000 		.word	_DOTS
 3624 2950 05       	_TNAME:	.byte  5
 3625 2951 3E4E414D 		.ascii ">NAME"
 3625      45
 3626 2956 00BF     		.p2align 2 	
 3627              	TNAME:
 3628 2958 504700BF 		_NEST
 3629 295c AD0B0000 		_ADR	TOR			//  
 3630 2960 A9100000 		_ADR	CNTXT			//  va
 3631 2964 590B0000 		_ADR	AT			//  na
 3632              	TNAM1:
 3633 2968 050C0000 		_ADR	DUPP			//  na na
 3634 296c 130B0000 		_QBRAN	TNAM2	//  vocabulary end, no match
ARM GAS  forth.s 			page 104


 3634      9C290000 
 3635 2974 050C0000 		_ADR	DUPP			//  na na
 3636 2978 591C0000 		_ADR	NAMET			//  na ca
 3637 297c 990B0000 		_ADR	RAT			//  na ca code
 3638 2980 710C0000 		_ADR	XORR			//  na f --
 3639 2984 130B0000 		_QBRAN	TNAM2
 3639      9C290000 
 3640 298c 750D0000 		_ADR	CELLM			//  la 
 3641 2990 590B0000 		_ADR	AT			//  next_na
 3642 2994 270B0000 		_BRAN	TNAM1
 3642      68290000 
 3643              	TNAM2:	
 3644 299c 850B0000 		_ADR	RFROM
 3645 29a0 F50B0000 		_ADR	DROP			//  0|na --
 3646 29a4 67090000 		_UNNEST			// 0
 3647              	
 3648              	//    .ID	 ( na -- )
 3649              	// 	Display the name at address.
 3650              	
 3651 29a8 50290000 		.word	_TNAME
 3652 29ac 03       	_DOTID:	.byte  3
 3653 29ad 2E4944   		.ascii ".ID"
 3654              		.p2align 2 	
 3655              	DOTID:
 3656 29b0 504700BF 		_NEST
 3657 29b4 D90D0000 		_ADR	QDUP			// if zero no name
 3658 29b8 130B0000 		_QBRAN	DOTI1
 3658      D8290000 
 3659 29c0 890F0000 		_ADR	COUNT
 3660 29c4 D10A0000 		_DOLIT	0x1F
 3660      1F000000 
 3661 29cc 490C0000 		_ADR	ANDD			// mask lexicon bits
 3662 29d0 91180000 		_ADR	TYPEE
 3663 29d4 67090000 		_UNNEST			// display name string
 3664              	DOTI1:
 3665 29d8 2D190000 		_DOTQP	9," {noName}"
 3665      09207B6E 
 3665      6F4E616D 
 3665      657D00BF 
 3666 29e8 67090000 		_UNNEST
 3667              	
 3668              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3669              	.if WANT_SEE 
 3670              	//    SEE	 ( -- //  string> )
 3671              	// 	A simple decompiler.
 3672              	
 3673              		.word	_DOTID
 3674              	_SEE:	.byte  3
 3675              		.ascii "SEE"
 3676              		.p2align 2 	
 3677              	SEE:
 3678              		_NEST
 3679              		_ADR	TICK	//  ca --, starting address
 3680              		_ADR	CR	
 3681              		_DOLIT	20
 3682              		_ADR	TOR
 3683              	SEE1:
ARM GAS  forth.s 			page 105


 3684              		_ADR	CELLP			//  a
 3685              		_ADR	DUPP			//  a a
 3686              		_ADR	DECOMP		//  a
 3687              		_DONXT	SEE1
 3688              		_ADR	DROP
 3689              		_UNNEST
 3690              	
 3691              	// 	DECOMPILE ( a -- )
 3692              	// 	Convert code in a.  Display name of command or as data.
 3693              	
 3694              		.word	_SEE
 3695              	_DECOM:	.byte  9
 3696              		.ascii "DECOMPILE"
 3697              		.p2align 2 
 3698              		
 3699              	DECOMP:	
 3700              		_NEST
 3701              		_ADR	DUPP			//  a a
 3702              	// 	_ADR	TOR			//  a
 3703              		_ADR	AT			//  a code
 3704              		_ADR	DUPP			//  a code code
 3705              		_DOLIT	0xF800D000 //0xF800F800
 3706              		_ADR	ANDD
 3707              		_DOLIT	0xF000D000 //0xF800F000
 3708              		_ADR	EQUAL			//  a code ?
 3709              		_ADR	INVER 
 3710              		_QBRAN	DECOM2	//  not a command
 3711              		//  a valid_code --, extract address and display name
 3712              		MOVW	IP,#0xFFE
 3713              		MOV	WP,TOS
 3714              		LSL	TOS,TOS,#21		//  get bits 22-12
 3715              		ASR	TOS,TOS,#9		//  with sign extension
 3716              		LSR	WP,WP,#15		//  get bits 11-1
 3717              		AND	WP,WP,IP		//  retain only bits 11-1
 3718              		ORR	TOS,TOS,WP		//  get bits 22-1
 3719              		NOP
 3720              		_ADR	OVER			//  a offset a
 3721              		_ADR	PLUS			//  a target-4
 3722              		_ADR	CELLP			//  a target
 3723              		_ADR	TNAME			//  a na/0 --, is it a name?
 3724              		_ADR	QDUP			//  name address or zero
 3725              		_QBRAN	DECOM1
 3726              		_ADR	SPACE			//  a na
 3727              		_ADR	DOTID			//  a --, display name
 3728              	// 	_ADR	RFROM			//  a
 3729              		_ADR	DROP
 3730              		_UNNEST
 3731              	DECOM1:	// _ADR	RFROM		//  a
 3732              		_ADR	AT			//  data
 3733              		_ADR	UDOT			//  display data
 3734              		_UNNEST
 3735              	DECOM2:
 3736              		_ADR	UDOT
 3737              	// 	_ADR	RFROM
 3738              		_ADR	DROP
 3739              		_UNNEST
 3740              	
ARM GAS  forth.s 			page 106


 3741              	//    WORDS	( -- )
 3742              	// 	Display the names in the context vocabulary.
 3743              	
 3744              		.word	_DECOM
 3745              	.else 
 3746 29ec AC290000 		.word _DOTID 
 3747              	.endif 
 3748 29f0 05       	_WORDS:	.byte  5
 3749 29f1 574F5244 		.ascii "WORDS"
 3749      53
 3750 29f6 00BF     		.p2align 2 	
 3751              	WORDS:
 3752 29f8 504700BF 		_NEST
 3753 29fc C5180000 		_ADR	CR
 3754 2a00 A9100000 		_ADR	CNTXT
 3755 2a04 590B0000 		_ADR	AT			// only in context
 3756              	WORS1:
 3757 2a08 D90D0000 		_ADR	QDUP			// ?at end of list
 3758 2a0c 130B0000 		_QBRAN	WORS2
 3758      302A0000 
 3759 2a14 050C0000 		_ADR	DUPP
 3760 2a18 3D180000 		_ADR	SPACE
 3761 2a1c B1290000 		_ADR	DOTID			// display a name
 3762 2a20 750D0000 		_ADR	CELLM
 3763 2a24 590B0000 		_ADR	AT
 3764 2a28 270B0000 		_BRAN	WORS1
 3764      082A0000 
 3765              	WORS2:
 3766 2a30 67090000 		_UNNEST
 3767              	
 3768              	// **************************************************************************
 3769              	//  cold start
 3770              	
 3771              	//    VER	 ( -- n )
 3772              	// 	Return the version number of this implementation.
 3773              	
 3774              	// 	.word	_WORDS
 3775              	// _VERSN	.byte  3
 3776              	// 	.ascii "VER"
 3777              	// 	.p2align 2 	
 3778              	VERSN:
 3779 2a34 504700BF 		_NEST
 3780 2a38 D10A0000 		_DOLIT	VER*256+EXT
 3780      00010000 
 3781 2a40 67090000 		_UNNEST
 3782              	
 3783              	//    hi	  ( -- )
 3784              	// 	Display the sign-on message of eForth.
 3785              	
 3786 2a44 F0290000 		.word	_WORDS
 3787 2a48 02       	_HI:	.byte  2
 3788 2a49 4849     		.ascii "HI"
 3789 2a4b 00       		.p2align 2
 3790              	
 3791              	HI:
 3792 2a4c 504700BF 		_NEST
 3793 2a50 C5180000 		_ADR	CR	// initialize I/O
ARM GAS  forth.s 			page 107


 3794 2a54 2D190000 		_DOTQP	17, "beyond Jupiter, v" 
 3794      11626579 
 3794      6F6E6420 
 3794      4A757069 
 3794      7465722C 
 3795 2a6c 21100000 		_ADR	BASE
 3796 2a70 590B0000 		_ADR	AT
 3797 2a74 35160000 		_ADR	HEX	// save radix
 3798 2a78 352A0000 		_ADR	VERSN
 3799 2a7c 25150000 		_ADR	BDIGS
 3800 2a80 71150000 		_ADR	DIG
 3801 2a84 71150000 		_ADR	DIG
 3802 2a88 D10A0000 		_DOLIT	'.'
 3802      2E000000 
 3803 2a90 45150000 		_ADR	HOLD
 3804 2a94 91150000 		_ADR	DIGS
 3805 2a98 E5150000 		_ADR	EDIGS
 3806 2a9c 91180000 		_ADR	TYPEE	// format version number
 3807 2aa0 21100000 		_ADR	BASE
 3808 2aa4 450B0000 		_ADR	STORE
 3809 2aa8 C5180000 		_ADR	CR
 3810 2aac 67090000 		_UNNEST			// restore radix
 3811              	
 3812              	//    COLD	( -- )
 3813              	// 	The high level cold start sequence.
 3814              	
 3815 2ab0 482A0000 		.word	_HI
 3816 2ab4 04       	_LASTN:	.byte  4
 3817 2ab5 434F4C44 		.ascii "COLD"
 3818 2ab9 0000BF   		.p2align 2	
 3819              	COLD:
 3820 2abc 00B5FDF7 		_CALL forth_init 
 3820      27FB5DF8 
 3820      04EB
 3821 2ac6 DFF84CC0 		ldr IP,=COLD1 
 3822 2aca FDF749BF 		_NEXT
 3823 2ace 00BF     		.p2align 2 
 3824              	COLD1:
 3825 2ad0 D10A0000 		_DOLIT  0 
 3825      00000000 
 3826 2ad8 01000000 		_ADR ULED // turn off user LED 
 3827 2adc D10A0000 		_DOLIT	UZERO
 3827      98020000 
 3828 2ae4 D10A0000 		_DOLIT	UPP
 3828      00000020 
 3829 2aec D10A0000 		_DOLIT	ULAST-UZERO
 3829      A0000000 
 3830 2af4 01140000 		_ADR	MOVE 			// initialize user area
 3831 2af8 DD200000 		_ADR	PRESE			// initialize stack and TIB
 3832 2afc 0D100000 		_ADR	TBOOT
 3833 2b00 B1130000 		_ADR	ATEXE			// application boot
 3834 2b04 D5250000 		_ADR	OVERT
 3835 2b08 270B0000 		_BRAN	QUIT			// start interpretation
 3835      FC200000 
 3836              	COLD2:
 3837              		.p2align 2 	
 3838              	CTOP:
ARM GAS  forth.s 			page 108


 3839 2b10 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3840              	
 3841              	
 3842 2b14 D02A0000 	  .end 
ARM GAS  forth.s 			page 109


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 110


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  forth.s 			page 111


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:205    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:206    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:207    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:208    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:210    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:211    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:212    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:213    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:216    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:217    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:220    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:221    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:222    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:223    *ABS*:000000000000000c TIM_DIER
ARM GAS  forth.s 			page 112


     stm32f411ce.inc:224    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:225    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:226    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:227    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:228    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:229    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:230    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:231    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:232    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:233    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:234    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:235    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:236    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:237    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:238    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:239    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:242    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:244    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:245    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:246    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:247    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:248    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:249    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:250    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:253    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:255    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:256    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:257    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:258    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:259    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:260    *ABS*:0000000000000014 EXTI_PR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
ARM GAS  forth.s 			page 113


          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 NBASE
          macros.inc:78     *ABS*:0000000000000018 TMP
          macros.inc:79     *ABS*:000000000000001c CSPAN
          macros.inc:80     *ABS*:0000000000000020 TOIN
          macros.inc:81     *ABS*:0000000000000024 NTIBB
          macros.inc:82     *ABS*:0000000000000028 TIBUF
             forth.s:2800   .text:0000000000002098 EVAL
             forth.s:1753   .text:0000000000001544 HOLD
          macros.inc:85     *ABS*:0000000000000034 CTXT
          macros.inc:86     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:87     *ABS*:000000000000003c USER_CTOP
          macros.inc:88     *ABS*:0000000000000040 LASTN
          macros.inc:89     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:90     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:91     *ABS*:0000000000000054 RX_HEAD
          macros.inc:92     *ABS*:0000000000000058 RX_TAIL
          macros.inc:93     *ABS*:000000000000005c VID_CNTR
          macros.inc:94     *ABS*:0000000000000060 VID_STATE
          macros.inc:95     *ABS*:0000000000000064 VID_FIELD
          macros.inc:96     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:97     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:98     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:99     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:100    *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:101    *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:102    *ABS*:0000000000000088 ROW
          macros.inc:103    *ABS*:000000000000008c COL
          macros.inc:104    *ABS*:0000000000000090 BK_COLOR
          macros.inc:105    *ABS*:0000000000000094 PEN_COLOR
              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:255    .text:00000000000000c0 reset_handler
              init.s:157    .text:0000000000000000 default_handler
              init.s:174    .text:0000000000000020 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
           ps2_kbd.s:62     .text:0000000000000858 kbd_isr
             tvout.s:128    .text:00000000000003dc tv_out_isr
              init.s:191    .text:000000000000003c uart_rx_handler
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .text:0000000000000000 $t
              init.s:162    .text:0000000000000008 exception_msg
              init.s:231    .text:0000000000000094 uart_puts
              init.s:211    .text:000000000000006c reset_mcu
              init.s:163    .text:0000000000000008 $d
              init.s:183    .text:000000000000003a systick_exit
              init.s:208    .text:0000000000000066 user_reboot
              init.s:221    .text:0000000000000080 user_reboot_msg
              init.s:219    .text:000000000000007c scb_adr
              init.s:220    .text:000000000000007c $d
              init.s:225    .text:0000000000000092 $t
              init.s:447    .text:0000000000000256 remap
              init.s:323    .text:0000000000000138 init_devices
              init.s:418    .text:000000000000020a uart_init
             tvout.s:62     .text:0000000000000340 tv_init
              init.s:283    .text:0000000000000110 forth_init
ARM GAS  forth.s 			page 114


             forth.s:3819   .text:0000000000002abc COLD
             forth.s:85     .text:0000000000000958 NEST
              init.s:336    .text:0000000000000156 wait_hserdy
              init.s:357    .text:0000000000000178 wait_pllrdy
              init.s:369    .text:0000000000000192 wait_sws
              init.s:472    .text:0000000000000298 UZERO
              init.s:506    .text:0000000000000338 ULAST
              init.s:473    .text:0000000000000298 $d
             forth.s:3791   .text:0000000000002a4c HI
             forth.s:2728   .text:0000000000001fb4 INTER
             forth.s:3816   .text:0000000000002ab4 _LASTN
             forth.s:3838   .text:0000000000002b10 CTOP
              init.s:507    .text:0000000000000338 $d
           tvout.inc:2      *ABS*:0000000000000140 HRES
           tvout.inc:3      *ABS*:00000000000000c8 VRES
           tvout.inc:4      *ABS*:0000000000000004 BPP
           tvout.inc:5      *ABS*:00000000000000a0 BPR
           tvout.inc:6      *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:8      *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:9      *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:37     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:38     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:39     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:40     *ABS*:000000000000173f VIDEO_END
             tvout.s:43     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:44     *ABS*:0000000000000001 ST_PREVID
             tvout.s:45     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:46     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:48     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:49     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:62     .text:0000000000000340 $t
             tvout.s:147    .text:0000000000000408 state_vsync
             tvout.s:188    .text:000000000000045c state_pre_video
             tvout.s:199    .text:000000000000046e state_video_out
             tvout.s:229    .text:00000000000004c6 state_post_video
             tvout.s:246    .text:00000000000004ec tv_isr_exit
             tvout.s:177    .text:0000000000000442 sync_end
             tvout.s:238    .text:00000000000004d8 frame_end
             tvout.s:516    .text:00000000000007de LINK
             tvout.s:257    .text:00000000000004ee $d
             tvout.s:257    .text:00000000000004f2 _BACKCOLOR
             tvout.s:257    .text:0000000000000500 BACKCOLOR
             forth.s:89     .text:0000000000000960 INEXT
             tvout.s:264    .text:000000000000050a $d
             tvout.s:264    .text:000000000000050e _PENCOLOR
             tvout.s:264    .text:0000000000000518 $t
             tvout.s:264    .text:0000000000000518 PENCOLOR
             tvout.s:271    .text:0000000000000522 $d
             tvout.s:271    .text:0000000000000526 _COLUMN
ARM GAS  forth.s 			page 115


             tvout.s:271    .text:0000000000000530 COLUMN
             tvout.s:278    .text:000000000000053a $d
             tvout.s:278    .text:000000000000053e _CURSOR_ROW
             tvout.s:278    .text:0000000000000542 $t
             tvout.s:278    .text:0000000000000544 CURSOR_ROW
             tvout.s:285    .text:000000000000054e $d
             tvout.s:285    .text:0000000000000552 _ROWY
             tvout.s:285    .text:0000000000000558 $t
             tvout.s:285    .text:0000000000000558 ROWY
             tvout.s:292    .text:0000000000000562 $d
             tvout.s:292    .text:0000000000000566 _COLX
             tvout.s:292    .text:000000000000056c $t
             tvout.s:292    .text:000000000000056c COLX
             tvout.s:299    .text:0000000000000576 $d
             tvout.s:299    .text:000000000000057a _FONT
             tvout.s:299    .text:0000000000000580 FONT
             tvout.s:547    .rodata:0000000000000000 font_6x8
             tvout.s:306    .text:0000000000000588 $d
             tvout.s:306    .text:000000000000058c _VIDBUFF
             tvout.s:306    .text:0000000000000594 $t
             tvout.s:306    .text:0000000000000594 VIDBUFF
             tvout.s:318    .text:000000000000059c $d
             tvout.s:318    .text:00000000000005a0 _PLOT
             tvout.s:318    .text:00000000000005a8 PLOT
             tvout.s:366    .text:0000000000000628 plot_op
             tvout.s:334    .text:00000000000005d2 op_back
             tvout.s:343    .text:00000000000005ec op_pen
             tvout.s:352    .text:0000000000000606 op_invert
             tvout.s:356    .text:000000000000060e op_xor
             tvout.s:366    .text:0000000000000628 $d
             tvout.s:371    .text:0000000000000630 _VSYNC
             tvout.s:371    .text:0000000000000636 $t
             tvout.s:371    .text:0000000000000638 VSYNC
             tvout.s:379    .text:0000000000000640 $d
             tvout.s:379    .text:0000000000000644 _CLS
             tvout.s:379    .text:0000000000000648 $t
             tvout.s:379    .text:0000000000000648 CLS
             tvout.s:403    .text:0000000000000688 $d
             tvout.s:403    .text:000000000000068c _CLRLINE
             tvout.s:403    .text:0000000000000694 $t
             tvout.s:403    .text:0000000000000694 CLRLINE
             tvout.s:405    .text:0000000000000698 $d
             forth.s:253    .text:0000000000000ad0 DOLIT
             forth.s:469    .text:0000000000000c04 DUPP
             forth.s:411    .text:0000000000000bac TOR
             forth.s:617    .text:0000000000000ce8 STAR
             forth.s:593    .text:0000000000000cc8 PLUS
             forth.s:387    .text:0000000000000b84 RFROM
             forth.s:1653   .text:0000000000001434 FILL
             forth.s:92     .text:0000000000000966 UNNEST
             tvout.s:418    .text:00000000000006cc _SCROLLUP
             tvout.s:418    .text:00000000000006d8 SCROLLUP
             tvout.s:420    .text:00000000000006dc $d
             forth.s:480    .text:0000000000000c14 SWAP
             forth.s:605    .text:0000000000000cd8 SUBB
             forth.s:1629   .text:0000000000001400 MOVE
             tvout.s:437    .text:0000000000000724 _RIGHT
ARM GAS  forth.s 			page 116


             tvout.s:437    .text:000000000000072a $t
             tvout.s:437    .text:000000000000072c RIGHT
             tvout.s:458    .text:0000000000000762 $d
             tvout.s:462    .text:000000000000076a FONT_PIXEL
             tvout.s:463    .text:000000000000076a $t
             tvout.s:469    .text:0000000000000778 INCR_X
             tvout.s:476    .text:0000000000000782 NEXT_PIXEL
             tvout.s:485    .text:0000000000000788 CHAR_ROW
             tvout.s:487    .text:000000000000078c $d
             forth.s:840    .text:0000000000000e3c DDUP
             forth.s:399    .text:0000000000000b98 RAT
             forth.s:280    .text:0000000000000af4 DONXT
             forth.s:828    .text:0000000000000e28 TDROP
             tvout.s:504    .text:00000000000007c8 CHAR_FONT
             tvout.s:505    .text:00000000000007c8 $t
             tvout.s:516    .text:00000000000007da $d
             tvout.s:516    .text:00000000000007de _TVPUTC
             tvout.s:516    .text:00000000000007e6 $t
             tvout.s:516    .text:00000000000007e8 TVPUTC
             tvout.s:518    .text:00000000000007ec $d
             forth.s:352    .text:0000000000000b58 AT
             forth.s:792    .text:0000000000000dec ROT
             forth.s:376    .text:0000000000000b78 CAT
             forth.s:657    .text:0000000000000d24 ONEP
             tvout.s:543    .rodata:0000000000000000 $d
             tvout.s:648    .text:000000000000084c $d
           ps2_kbd.s:49     *ABS*:0000000000000001 KBD_F_PAR_ERR
           ps2_kbd.s:50     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:51     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:52     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:53     *ABS*:000000000000006f KBD_ONES
           ps2_kbd.s:62     .text:0000000000000858 $t
           ps2_kbd.s:87     .text:00000000000008ac start_bit
           ps2_kbd.s:94     .text:00000000000008c2 parity_bit
           ps2_kbd.s:106    .text:00000000000008e4 stop_bit
           ps2_kbd.s:128    .text:0000000000000914 kbd_init
             forth.s:75     .text:000000000000094c TPUSH
             forth.s:80     .text:0000000000000952 TPOP
             forth.s:105    .text:0000000000000970 COMPI_NEST
             forth.s:121    .text:000000000000098e $d
             forth.s:122    .text:0000000000000992 _RAND
             forth.s:125    .text:000000000000099c RAND
             forth.s:127    .text:00000000000009a0 $d
             forth.s:891    .text:0000000000000e90 ABSS
             forth.s:1109   .text:0000000000000fd0 SEED
             forth.s:581    .text:0000000000000cb8 LSHIFT
             forth.s:542    .text:0000000000000c70 XORR
             forth.s:569    .text:0000000000000ca0 RSHIFT
             forth.s:339    .text:0000000000000b44 STORE
             forth.s:518    .text:0000000000000c48 ANDD
             forth.s:1424   .text:0000000000001234 MODD
             forth.s:155    .text:0000000000000a10 _PAUSE
             forth.s:157    .text:0000000000000a16 $t
             forth.s:158    .text:0000000000000a18 PAUSE
             forth.s:160    .text:0000000000000a1c $d
             forth.s:1131   .text:0000000000000ff8 TIMER
             forth.s:162    .text:0000000000000a24 PAUSE_LOOP
ARM GAS  forth.s 			page 117


             forth.s:301    .text:0000000000000b12 QBRAN
             forth.s:167    .text:0000000000000a3c PAUSE_EXIT
             forth.s:318    .text:0000000000000b26 BRAN
             forth.s:173    .text:0000000000000a44 _ULED
             forth.s:177    .text:0000000000000a4c ULED
             forth.s:186    .text:0000000000000a68 ULED_OFF
             forth.s:192    .text:0000000000000a6c $d
             forth.s:193    .text:0000000000000a70 _QRX
             forth.s:196    .text:0000000000000a78 QKEY
             forth.s:197    .text:0000000000000a78 QRX
             forth.s:216    .text:0000000000000aa2 $d
             forth.s:217    .text:0000000000000aa6 _TXSTO
             forth.s:220    .text:0000000000000aac TXSTO
             forth.s:221    .text:0000000000000aac EMIT
             forth.s:222    .text:0000000000000aac TECHO
             forth.s:238    .text:0000000000000ac4 $d
             forth.s:239    .text:0000000000000ac8 _NOP
             forth.s:241    .text:0000000000000acc $t
             forth.s:242    .text:0000000000000acc NOP
             forth.s:261    .text:0000000000000ada $d
             forth.s:262    .text:0000000000000ade _EXECU
             forth.s:264    .text:0000000000000ae6 $t
             forth.s:265    .text:0000000000000ae8 EXECU
             forth.s:287    .text:0000000000000b04 NEXT1
             forth.s:307    .text:0000000000000b20 QBRAN1
             forth.s:325    .text:0000000000000b2c $d
             forth.s:326    .text:0000000000000b30 _EXIT
             forth.s:329    .text:0000000000000b38 EXIT
             forth.s:330    .text:0000000000000b38 $d
             forth.s:336    .text:0000000000000b40 _STORE
             forth.s:338    .text:0000000000000b42 $t
             forth.s:348    .text:0000000000000b50 $d
             forth.s:349    .text:0000000000000b54 _AT
             forth.s:351    .text:0000000000000b56 $t
             forth.s:359    .text:0000000000000b5c $d
             forth.s:360    .text:0000000000000b60 _CSTOR
             forth.s:363    .text:0000000000000b64 CSTOR
             forth.s:372    .text:0000000000000b70 $d
             forth.s:373    .text:0000000000000b74 _CAT
             forth.s:383    .text:0000000000000b7c $d
             forth.s:384    .text:0000000000000b80 _RFROM
             forth.s:395    .text:0000000000000b8e $d
             forth.s:396    .text:0000000000000b92 _RAT
             forth.s:407    .text:0000000000000ba2 $d
             forth.s:408    .text:0000000000000ba6 _TOR
             forth.s:418    .text:0000000000000bb6 $d
             forth.s:419    .text:0000000000000bba _RPSTOR
             forth.s:421    .text:0000000000000bbe $t
             forth.s:422    .text:0000000000000bc0 RPSTOR
             forth.s:430    .text:0000000000000bc8 $d
             forth.s:431    .text:0000000000000bcc _SPSTOR
             forth.s:433    .text:0000000000000bd0 $t
             forth.s:434    .text:0000000000000bd0 SPSTOR
             forth.s:442    .text:0000000000000bd8 $d
             forth.s:443    .text:0000000000000bdc _SPAT
             forth.s:445    .text:0000000000000be0 $t
             forth.s:446    .text:0000000000000be0 SPAT
ARM GAS  forth.s 			page 118


             forth.s:454    .text:0000000000000be8 $d
             forth.s:455    .text:0000000000000bec _DROP
             forth.s:458    .text:0000000000000bf4 DROP
             forth.s:465    .text:0000000000000bfa $d
             forth.s:466    .text:0000000000000bfe _DUPP
             forth.s:468    .text:0000000000000c02 $t
             forth.s:476    .text:0000000000000c0a $d
             forth.s:477    .text:0000000000000c0e _SWAP
             forth.s:489    .text:0000000000000c1c $d
             forth.s:490    .text:0000000000000c20 _OVER
             forth.s:493    .text:0000000000000c28 OVER
             forth.s:501    .text:0000000000000c30 $d
             forth.s:502    .text:0000000000000c34 _ZLESS
             forth.s:505    .text:0000000000000c38 ZLESS
             forth.s:514    .text:0000000000000c3e $d
             forth.s:515    .text:0000000000000c42 _ANDD
             forth.s:517    .text:0000000000000c46 $t
             forth.s:526    .text:0000000000000c52 $d
             forth.s:527    .text:0000000000000c56 _ORR
             forth.s:530    .text:0000000000000c5c ORR
             forth.s:538    .text:0000000000000c66 $d
             forth.s:539    .text:0000000000000c6a _XORR
             forth.s:541    .text:0000000000000c6e $t
             forth.s:550    .text:0000000000000c7a $d
             forth.s:551    .text:0000000000000c7e _UPLUS
             forth.s:553    .text:0000000000000c82 $t
             forth.s:554    .text:0000000000000c84 UPLUS
             forth.s:565    .text:0000000000000c94 $d
             forth.s:566    .text:0000000000000c98 _RSHIFT
             forth.s:577    .text:0000000000000caa $d
             forth.s:578    .text:0000000000000cae _LSHIFT
             forth.s:589    .text:0000000000000cc2 $d
             forth.s:590    .text:0000000000000cc6 _PLUS
             forth.s:592    .text:0000000000000cc8 $t
             forth.s:601    .text:0000000000000cd0 $d
             forth.s:602    .text:0000000000000cd4 _SUBB
             forth.s:604    .text:0000000000000cd6 $t
             forth.s:613    .text:0000000000000ce2 $d
             forth.s:614    .text:0000000000000ce6 _STAR
             forth.s:616    .text:0000000000000ce8 $t
             forth.s:625    .text:0000000000000cf2 $d
             forth.s:626    .text:0000000000000cf6 _UMSTA
             forth.s:628    .text:0000000000000cfa $t
             forth.s:629    .text:0000000000000cfc UMSTA
             forth.s:639    .text:0000000000000d08 $d
             forth.s:640    .text:0000000000000d0c _MSTAR
             forth.s:643    .text:0000000000000d10 MSTAR
             forth.s:653    .text:0000000000000d1c $d
             forth.s:654    .text:0000000000000d20 _ONEP
             forth.s:664    .text:0000000000000d2a $d
             forth.s:665    .text:0000000000000d2e _ONEM
             forth.s:668    .text:0000000000000d34 ONEM
             forth.s:675    .text:0000000000000d3a $d
             forth.s:676    .text:0000000000000d3e _TWOP
             forth.s:679    .text:0000000000000d44 TWOP
             forth.s:686    .text:0000000000000d4a $d
             forth.s:687    .text:0000000000000d4e _TWOM
ARM GAS  forth.s 			page 119


             forth.s:690    .text:0000000000000d54 TWOM
             forth.s:697    .text:0000000000000d5a $d
             forth.s:698    .text:0000000000000d5e _CELLP
             forth.s:700    .text:0000000000000d64 $t
             forth.s:701    .text:0000000000000d64 CELLP
             forth.s:708    .text:0000000000000d6a $d
             forth.s:709    .text:0000000000000d6e _CELLM
             forth.s:711    .text:0000000000000d74 $t
             forth.s:712    .text:0000000000000d74 CELLM
             forth.s:719    .text:0000000000000d7a $d
             forth.s:720    .text:0000000000000d7e _BLANK
             forth.s:723    .text:0000000000000d84 BLANK
             forth.s:731    .text:0000000000000d8e $d
             forth.s:732    .text:0000000000000d92 _CELLS
             forth.s:734    .text:0000000000000d98 $t
             forth.s:735    .text:0000000000000d98 CELLS
             forth.s:742    .text:0000000000000d9e $d
             forth.s:743    .text:0000000000000da2 _CELLSL
             forth.s:745    .text:0000000000000da8 $t
             forth.s:746    .text:0000000000000da8 CELLSL
             forth.s:753    .text:0000000000000dae $d
             forth.s:754    .text:0000000000000db2 _TWOST
             forth.s:757    .text:0000000000000db8 TWOST
             forth.s:764    .text:0000000000000dbe $d
             forth.s:765    .text:0000000000000dc2 _TWOSL
             forth.s:768    .text:0000000000000dc8 TWOSL
             forth.s:775    .text:0000000000000dce $d
             forth.s:776    .text:0000000000000dd2 _QDUP
             forth.s:779    .text:0000000000000dd8 QDUP
             forth.s:788    .text:0000000000000de2 $d
             forth.s:789    .text:0000000000000de6 _ROT
             forth.s:791    .text:0000000000000dea $t
             forth.s:801    .text:0000000000000df6 $d
             forth.s:802    .text:0000000000000dfa _NROT
             forth.s:805    .text:0000000000000e00 NROT
             forth.s:815    .text:0000000000000e0a $d
             forth.s:816    .text:0000000000000e0e _DDROP
             forth.s:818    .text:0000000000000e14 $t
             forth.s:819    .text:0000000000000e14 DDROP
             forth.s:824    .text:0000000000000e1e $d
             forth.s:825    .text:0000000000000e22 _TDROP
             forth.s:827    .text:0000000000000e28 $t
             forth.s:836    .text:0000000000000e32 $d
             forth.s:837    .text:0000000000000e36 _DDUP
             forth.s:849    .text:0000000000000e48 $d
             forth.s:850    .text:0000000000000e4c _DPLUS
             forth.s:853    .text:0000000000000e50 DPLUS
             forth.s:865    .text:0000000000000e64 $d
             forth.s:866    .text:0000000000000e68 _INVER
             forth.s:868    .text:0000000000000e6c $t
             forth.s:869    .text:0000000000000e6c INVER
             forth.s:876    .text:0000000000000e72 $d
             forth.s:877    .text:0000000000000e76 _NEGAT
             forth.s:880    .text:0000000000000e80 NEGAT
             forth.s:887    .text:0000000000000e86 $d
             forth.s:888    .text:0000000000000e8a _ABSS
             forth.s:890    .text:0000000000000e8e $t
ARM GAS  forth.s 			page 120


             forth.s:900    .text:0000000000000e9a $d
             forth.s:901    .text:0000000000000e9e _ZEQUAL
             forth.s:904    .text:0000000000000ea4 ZEQUAL
             forth.s:914    .text:0000000000000eb2 $d
             forth.s:915    .text:0000000000000eb6 _EQUAL
             forth.s:917    .text:0000000000000eb8 $t
             forth.s:918    .text:0000000000000eb8 EQUAL
             forth.s:929    .text:0000000000000ec8 $d
             forth.s:930    .text:0000000000000ecc _ULESS
             forth.s:933    .text:0000000000000ed0 ULESS
             forth.s:944    .text:0000000000000ee0 $d
             forth.s:945    .text:0000000000000ee4 _LESS
             forth.s:947    .text:0000000000000ee6 $t
             forth.s:948    .text:0000000000000ee8 LESS
             forth.s:959    .text:0000000000000ef8 $d
             forth.s:960    .text:0000000000000efc _GREAT
             forth.s:962    .text:0000000000000efe $t
             forth.s:963    .text:0000000000000f00 GREAT
             forth.s:974    .text:0000000000000f10 $d
             forth.s:975    .text:0000000000000f14 _MAX
             forth.s:977    .text:0000000000000f18 $t
             forth.s:978    .text:0000000000000f18 MAX
             forth.s:988    .text:0000000000000f24 $d
             forth.s:989    .text:0000000000000f28 _MIN
             forth.s:991    .text:0000000000000f2c $t
             forth.s:992    .text:0000000000000f2c MIN
             forth.s:1002   .text:0000000000000f38 $d
             forth.s:1003   .text:0000000000000f3c _PSTOR
             forth.s:1006   .text:0000000000000f40 PSTOR
             forth.s:1017   .text:0000000000000f50 $d
             forth.s:1018   .text:0000000000000f54 _DSTOR
             forth.s:1021   .text:0000000000000f58 DSTOR
             forth.s:1032   .text:0000000000000f6c $d
             forth.s:1033   .text:0000000000000f70 _DAT
             forth.s:1036   .text:0000000000000f74 DAT
             forth.s:1045   .text:0000000000000f7e $d
             forth.s:1046   .text:0000000000000f82 _COUNT
             forth.s:1048   .text:0000000000000f88 $t
             forth.s:1049   .text:0000000000000f88 COUNT
             forth.s:1058   .text:0000000000000f94 $d
             forth.s:1059   .text:0000000000000f98 _DNEGA
             forth.s:1061   .text:0000000000000fa0 $t
             forth.s:1062   .text:0000000000000fa0 DNEGA
             forth.s:1080   .text:0000000000000fb0 DOVAR
             forth.s:1093   .text:0000000000000fbc DOCON
             forth.s:1105   .text:0000000000000fc6 $d
             forth.s:1106   .text:0000000000000fca _SEED
             forth.s:1116   .text:0000000000000fda $d
             forth.s:1117   .text:0000000000000fde _MSEC
             forth.s:1120   .text:0000000000000fe4 MSEC
             forth.s:1127   .text:0000000000000fee $d
             forth.s:1128   .text:0000000000000ff2 _TIMER
             forth.s:1130   .text:0000000000000ff8 $t
             forth.s:1139   .text:0000000000001002 $d
             forth.s:1140   .text:0000000000001006 _TBOOT
             forth.s:1142   .text:000000000000100c $t
             forth.s:1143   .text:000000000000100c TBOOT
ARM GAS  forth.s 			page 121


             forth.s:1151   .text:0000000000001016 $d
             forth.s:1152   .text:000000000000101a _BASE
             forth.s:1155   .text:0000000000001020 BASE
             forth.s:1167   .text:000000000000102a TEMP
             forth.s:1175   .text:0000000000001034 $d
             forth.s:1176   .text:0000000000001038 _SPAN
             forth.s:1179   .text:0000000000001040 SPAN
             forth.s:1187   .text:000000000000104a $d
             forth.s:1188   .text:000000000000104e _INN
             forth.s:1190   .text:0000000000001052 $t
             forth.s:1191   .text:0000000000001054 INN
             forth.s:1199   .text:000000000000105e $d
             forth.s:1200   .text:0000000000001062 _NTIB
             forth.s:1203   .text:0000000000001068 NTIB
             forth.s:1211   .text:0000000000001072 $d
             forth.s:1212   .text:0000000000001076 _TEVAL
             forth.s:1214   .text:000000000000107c $t
             forth.s:1215   .text:000000000000107c TEVAL
             forth.s:1223   .text:0000000000001086 $d
             forth.s:1224   .text:000000000000108a _HLD
             forth.s:1226   .text:000000000000108e $t
             forth.s:1227   .text:0000000000001090 HLD
             forth.s:1235   .text:000000000000109a $d
             forth.s:1236   .text:000000000000109e _CNTXT
             forth.s:1238   .text:00000000000010a6 $t
             forth.s:1239   .text:00000000000010a8 CNTXT
             forth.s:1240   .text:00000000000010a8 CRRNT
             forth.s:1248   .text:00000000000010b2 $d
             forth.s:1249   .text:00000000000010b6 _CP
             forth.s:1252   .text:00000000000010bc CPP
             forth.s:1259   .text:00000000000010c6 $d
             forth.s:1260   .text:00000000000010ca _FCP
             forth.s:1262   .text:00000000000010ce $t
             forth.s:1263   .text:00000000000010d0 FCP
             forth.s:1271   .text:00000000000010da $d
             forth.s:1272   .text:00000000000010de _LAST
             forth.s:1275   .text:00000000000010e4 LAST
             forth.s:1287   .text:00000000000010ee $d
             forth.s:1288   .text:00000000000010f2 _USER_BGN
             forth.s:1291   .text:0000000000001100 USER_BEGIN
             forth.s:1295   .text:0000000000001108 USR_BGN_ADR
             forth.s:1296   .text:0000000000001108 $d
             forth.s:1301   .text:0000000000001110 _USER_END
             forth.s:1304   .text:000000000000111c USER_END
             forth.s:1308   .text:0000000000001124 USER_END_ADR
             forth.s:1309   .text:0000000000001124 $d
             forth.s:1320   .text:000000000000112c _WITHI
             forth.s:1323   .text:0000000000001134 WITHI
             forth.s:1325   .text:0000000000001138 $d
             forth.s:1339   .text:0000000000001158 _UMMOD
             forth.s:1342   .text:0000000000001160 UMMOD
             forth.s:1346   .text:000000000000116a UMMOD0
             forth.s:1353   .text:000000000000117a UMMOD1
             forth.s:1359   .text:0000000000001184 UMMOD2
             forth.s:1369   .text:0000000000001190 $d
             forth.s:1370   .text:0000000000001194 _MSMOD
             forth.s:1372   .text:000000000000119a $t
ARM GAS  forth.s 			page 122


             forth.s:1373   .text:000000000000119c MSMOD
             forth.s:1375   .text:00000000000011a0 $d
             forth.s:1384   .text:00000000000011c8 MMOD1
             forth.s:1391   .text:00000000000011e4 MMOD2
             forth.s:1399   .text:0000000000001204 MMOD3
             forth.s:1406   .text:000000000000120c _SLMOD
             forth.s:1409   .text:0000000000001214 SLMOD
             forth.s:1411   .text:0000000000001218 $d
             forth.s:1421   .text:0000000000001230 _MODD
             forth.s:1423   .text:0000000000001234 $t
             forth.s:1426   .text:0000000000001238 $d
             forth.s:1434   .text:0000000000001248 _SLASH
             forth.s:1436   .text:000000000000124a $t
             forth.s:1437   .text:000000000000124c SLASH
             forth.s:1439   .text:0000000000001250 $d
             forth.s:1448   .text:0000000000001264 _SSMOD
             forth.s:1450   .text:000000000000126a $t
             forth.s:1451   .text:000000000000126c SSMOD
             forth.s:1453   .text:0000000000001270 $d
             forth.s:1463   .text:0000000000001288 _STASL
             forth.s:1466   .text:000000000000128c STASL
             forth.s:1468   .text:0000000000001290 $d
             forth.s:1480   .text:00000000000012a4 _ALGND
             forth.s:1482   .text:00000000000012ac $t
             forth.s:1483   .text:00000000000012ac ALGND
             forth.s:1492   .text:00000000000012bc $d
             forth.s:1493   .text:00000000000012c0 _TCHAR
             forth.s:1495   .text:00000000000012c6 $t
             forth.s:1496   .text:00000000000012c8 TCHAR
             forth.s:1498   .text:00000000000012cc $d
             forth.s:1508   .text:0000000000001304 TCHA1
             forth.s:1515   .text:000000000000130c _DEPTH
             forth.s:1517   .text:0000000000001312 $t
             forth.s:1518   .text:0000000000001314 DEPTH
             forth.s:1528   .text:000000000000132c $d
             forth.s:1529   .text:0000000000001330 _PICK
             forth.s:1532   .text:0000000000001338 PICK
             forth.s:1534   .text:000000000000133c $d
             forth.s:1548   .text:0000000000001358 _HERE
             forth.s:1551   .text:0000000000001360 HERE
             forth.s:1553   .text:0000000000001364 $d
             forth.s:1561   .text:0000000000001374 _PAD
             forth.s:1563   .text:0000000000001378 $t
             forth.s:1564   .text:0000000000001378 PAD
             forth.s:1566   .text:000000000000137c $d
             forth.s:1575   .text:0000000000001394 _TIB
             forth.s:1577   .text:0000000000001398 $t
             forth.s:1578   .text:0000000000001398 TIB
             forth.s:1586   .text:00000000000013a2 $d
             forth.s:1587   .text:00000000000013a6 _ATEXE
             forth.s:1590   .text:00000000000013b0 ATEXE
             forth.s:1602   .text:00000000000013c4 $d
             forth.s:1603   .text:00000000000013c8 _CMOVE
             forth.s:1605   .text:00000000000013ce $t
             forth.s:1606   .text:00000000000013d0 CMOVE
             forth.s:1613   .text:00000000000013e2 CMOV1
             forth.s:1610   .text:00000000000013da CMOV0
ARM GAS  forth.s 			page 123


             forth.s:1618   .text:00000000000013ec CMOV2
             forth.s:1625   .text:00000000000013f4 $d
             forth.s:1626   .text:00000000000013f8 _MOVE
             forth.s:1637   .text:0000000000001416 MOVE1
             forth.s:1634   .text:000000000000140e MOVE0
             forth.s:1642   .text:0000000000001420 MOVE2
             forth.s:1649   .text:0000000000001428 $d
             forth.s:1650   .text:000000000000142c _FILL
             forth.s:1661   .text:0000000000001442 FILL2
             forth.s:1657   .text:000000000000143a FILL1
             forth.s:1668   .text:000000000000144a $d
             forth.s:1669   .text:000000000000144e _PACKS
             forth.s:1672   .text:0000000000001458 PACKS
             forth.s:1674   .text:000000000000145c $d
             forth.s:1701   .text:00000000000014b4 _DIGIT
             forth.s:1703   .text:00000000000014ba $t
             forth.s:1704   .text:00000000000014bc DIGIT
             forth.s:1706   .text:00000000000014c0 $d
             forth.s:1720   .text:00000000000014f4 _EXTRC
             forth.s:1722   .text:00000000000014fc $t
             forth.s:1723   .text:00000000000014fc EXTRC
             forth.s:1725   .text:0000000000001500 $d
             forth.s:1736   .text:0000000000001520 _BDIGS
             forth.s:1739   .text:0000000000001524 BDIGS
             forth.s:1741   .text:0000000000001528 $d
             forth.s:1750   .text:000000000000153c _HOLD
             forth.s:1755   .text:0000000000001548 $d
             forth.s:1768   .text:000000000000156c _DIG
             forth.s:1770   .text:000000000000156e $t
             forth.s:1771   .text:0000000000001570 DIG
             forth.s:1773   .text:0000000000001574 $d
             forth.s:1783   .text:000000000000158c _DIGS
             forth.s:1786   .text:0000000000001590 DIGS
             forth.s:1788   .text:0000000000001594 DIGS1
             forth.s:1789   .text:0000000000001594 $d
             forth.s:1793   .text:00000000000015ac DIGS2
             forth.s:1800   .text:00000000000015b4 _SIGN
             forth.s:1803   .text:00000000000015bc SIGN
             forth.s:1805   .text:00000000000015c0 $d
             forth.s:1809   .text:00000000000015d8 SIGN1
             forth.s:1816   .text:00000000000015e0 _EDIGS
             forth.s:1819   .text:00000000000015e4 EDIGS
             forth.s:1821   .text:00000000000015e8 $d
             forth.s:1836   .text:0000000000001604 STRR
             forth.s:1837   .text:0000000000001604 $t
             forth.s:1838   .text:0000000000001608 $d
             forth.s:1852   .text:0000000000001630 _HEX
             forth.s:1854   .text:0000000000001634 $t
             forth.s:1855   .text:0000000000001634 HEX
             forth.s:1857   .text:0000000000001638 $d
             forth.s:1866   .text:0000000000001650 _DECIM
             forth.s:1868   .text:0000000000001658 $t
             forth.s:1869   .text:0000000000001658 DECIM
             forth.s:1871   .text:000000000000165c $d
             forth.s:1883   .text:0000000000001674 _DIGTQ
             forth.s:1886   .text:000000000000167c DIGTQ
             forth.s:1888   .text:0000000000001680 $d
ARM GAS  forth.s 			page 124


             forth.s:1901   .text:00000000000016c8 DGTQ1
             forth.s:1911   .text:00000000000016dc _NUMBQ
             forth.s:1913   .text:00000000000016e4 $t
             forth.s:1914   .text:00000000000016e4 NUMBQ
             forth.s:1916   .text:00000000000016e8 $d
             forth.s:1932   .text:0000000000001734 NUMQ1
             forth.s:1980   .text:00000000000017fc NUMQ6
             forth.s:1948   .text:0000000000001778 NUMQ2
             forth.s:1972   .text:00000000000017e0 NUMQ4
             forth.s:1969   .text:00000000000017d4 NUMQ3
             forth.s:1978   .text:00000000000017f8 NUMQ5
             forth.s:1995   .text:0000000000001818 _KEY
             forth.s:1997   .text:000000000000181c $t
             forth.s:1998   .text:000000000000181c KEY
             forth.s:2000   .text:0000000000001820 KEY1
             forth.s:2001   .text:0000000000001820 $d
             forth.s:2009   .text:0000000000001834 _SPACE
             forth.s:2011   .text:000000000000183a $t
             forth.s:2012   .text:000000000000183c SPACE
             forth.s:2014   .text:0000000000001840 $d
             forth.s:2022   .text:0000000000001850 _SPACS
             forth.s:2025   .text:0000000000001858 SPACS
             forth.s:2027   .text:000000000000185c $d
             forth.s:2033   .text:0000000000001878 CHAR2
             forth.s:2031   .text:0000000000001874 CHAR1
             forth.s:2041   .text:0000000000001888 _TYPEE
             forth.s:2044   .text:0000000000001890 TYPEE
             forth.s:2046   .text:0000000000001894 $d
             forth.s:2052   .text:00000000000018ac TYPE2
             forth.s:2048   .text:00000000000018a0 TYPE1
             forth.s:2061   .text:00000000000018c0 _CR
             forth.s:2064   .text:00000000000018c4 CR
             forth.s:2066   .text:00000000000018c8 $d
             forth.s:2080   .text:00000000000018e4 DOSTR
             forth.s:2081   .text:00000000000018e4 $t
             forth.s:2083   .text:00000000000018e8 $d
             forth.s:2102   .text:0000000000001910 STRQP
             forth.s:2103   .text:0000000000001910 $t
             forth.s:2104   .text:0000000000001914 $d
             forth.s:2114   .text:000000000000191c DOTST
             forth.s:2115   .text:000000000000191c $t
             forth.s:2116   .text:0000000000001920 $d
             forth.s:2127   .text:000000000000192c DOTQP
             forth.s:2128   .text:000000000000192c $t
             forth.s:2129   .text:0000000000001930 $d
             forth.s:2137   .text:0000000000001940 _DOTR
             forth.s:2140   .text:0000000000001944 DOTR
             forth.s:2142   .text:0000000000001948 $d
             forth.s:2155   .text:000000000000196c _UDOTR
             forth.s:2157   .text:0000000000001970 $t
             forth.s:2158   .text:0000000000001970 UDOTR
             forth.s:2160   .text:0000000000001974 $d
             forth.s:2175   .text:00000000000019a0 _UDOT
             forth.s:2178   .text:00000000000019a4 UDOT
             forth.s:2180   .text:00000000000019a8 $d
             forth.s:2191   .text:00000000000019c4 _DOT
             forth.s:2193   .text:00000000000019c6 $t
ARM GAS  forth.s 			page 125


             forth.s:2194   .text:00000000000019c8 DOT
             forth.s:2196   .text:00000000000019cc $d
             forth.s:2203   .text:00000000000019f0 DOT1
             forth.s:2213   .text:0000000000001a04 _QUEST
             forth.s:2215   .text:0000000000001a06 $t
             forth.s:2216   .text:0000000000001a08 QUEST
             forth.s:2218   .text:0000000000001a0c $d
             forth.s:2232   .text:0000000000001a18 PARS
             forth.s:2233   .text:0000000000001a18 $t
             forth.s:2234   .text:0000000000001a1c $d
             forth.s:2300   .text:0000000000001b2c PARS8
             forth.s:2264   .text:0000000000001aa0 PARS3
             forth.s:2247   .text:0000000000001a58 PARS1
             forth.s:2262   .text:0000000000001a9c PARS2
             forth.s:2268   .text:0000000000001aac PARS4
             forth.s:2280   .text:0000000000001adc PARS5
             forth.s:2287   .text:0000000000001b00 PARS6
             forth.s:2293   .text:0000000000001b14 PARS7
             forth.s:2310   .text:0000000000001b40 _PARSE
             forth.s:2312   .text:0000000000001b46 $t
             forth.s:2313   .text:0000000000001b48 PARSE
             forth.s:2315   .text:0000000000001b4c $d
             forth.s:2335   .text:0000000000001b8c _DOTPR
             forth.s:2338   .text:0000000000001b90 DOTPR
             forth.s:2340   .text:0000000000001b94 $d
             forth.s:2349   .text:0000000000001bac _PAREN
             forth.s:2351   .text:0000000000001bae $t
             forth.s:2352   .text:0000000000001bb0 PAREN
             forth.s:2354   .text:0000000000001bb4 $d
             forth.s:2363   .text:0000000000001bcc _BKSLA
             forth.s:2365   .text:0000000000001bce $t
             forth.s:2366   .text:0000000000001bd0 BKSLA
             forth.s:2368   .text:0000000000001bd4 $d
             forth.s:2378   .text:0000000000001bec _CHAR
             forth.s:2381   .text:0000000000001bf4 CHAR
             forth.s:2383   .text:0000000000001bf8 $d
             forth.s:2393   .text:0000000000001c10 _WORDD
             forth.s:2396   .text:0000000000001c18 WORDD
             forth.s:2398   .text:0000000000001c1c $d
             forth.s:2408   .text:0000000000001c34 _TOKEN
             forth.s:2410   .text:0000000000001c3a $t
             forth.s:2411   .text:0000000000001c3c TOKEN
             forth.s:2413   .text:0000000000001c40 $d
             forth.s:2424   .text:0000000000001c50 _NAMET
             forth.s:2426   .text:0000000000001c56 $t
             forth.s:2427   .text:0000000000001c58 NAMET
             forth.s:2429   .text:0000000000001c5c $d
             forth.s:2445   .text:0000000000001c7c _SAMEQ
             forth.s:2447   .text:0000000000001c82 $t
             forth.s:2448   .text:0000000000001c84 SAMEQ
             forth.s:2450   .text:0000000000001c88 $d
             forth.s:2467   .text:0000000000001cd0 SAME2
             forth.s:2452   .text:0000000000001c94 SAME1
             forth.s:2482   .text:0000000000001ce4 FIND
             forth.s:2483   .text:0000000000001ce4 $t
             forth.s:2484   .text:0000000000001ce8 $d
             forth.s:2491   .text:0000000000001d04 FIND1
ARM GAS  forth.s 			page 126


             forth.s:2511   .text:0000000000001d5c FIND6
             forth.s:2504   .text:0000000000001d44 FIND2
             forth.s:2509   .text:0000000000001d54 FIND3
             forth.s:2518   .text:0000000000001d74 FIND4
             forth.s:2524   .text:0000000000001d90 FIND5
             forth.s:2539   .text:0000000000001db8 _NAMEQ
             forth.s:2541   .text:0000000000001dbe $t
             forth.s:2542   .text:0000000000001dc0 NAMEQ
             forth.s:2544   .text:0000000000001dc4 $d
             forth.s:2559   .text:0000000000001dd4 BKSP
             forth.s:2560   .text:0000000000001dd4 $t
             forth.s:2561   .text:0000000000001dd8 $d
             forth.s:2575   .text:0000000000001e1c BACK1
             forth.s:2585   .text:0000000000001e20 TAP
             forth.s:2586   .text:0000000000001e20 $t
             forth.s:2587   .text:0000000000001e24 $d
             forth.s:2601   .text:0000000000001e3c KTAP
             forth.s:2602   .text:0000000000001e3c TTAP
             forth.s:2603   .text:0000000000001e3c $t
             forth.s:2604   .text:0000000000001e40 $d
             forth.s:2618   .text:0000000000001e80 KTAP2
             forth.s:2615   .text:0000000000001e78 KTAP1
             forth.s:2629   .text:0000000000001e98 _ACCEP
             forth.s:2632   .text:0000000000001ea0 ACCEP
             forth.s:2634   .text:0000000000001ea4 $d
             forth.s:2637   .text:0000000000001eb0 ACCP1
             forth.s:2653   .text:0000000000001ef8 ACCP4
             forth.s:2649   .text:0000000000001eec ACCP2
             forth.s:2651   .text:0000000000001ef0 ACCP3
             forth.s:2663   .text:0000000000001f0c _QUERY
             forth.s:2665   .text:0000000000001f12 $t
             forth.s:2666   .text:0000000000001f14 QUERY
             forth.s:2668   .text:0000000000001f18 $d
             forth.s:2686   .text:0000000000001f4c _ABORT
             forth.s:2688   .text:0000000000001f52 $t
             forth.s:2689   .text:0000000000001f54 ABORT
             forth.s:2691   .text:0000000000001f58 ABORT1
             forth.s:2692   .text:0000000000001f58 $d
             forth.s:2823   .text:00000000000020dc PRESE
             forth.s:2836   .text:00000000000020fc QUIT
             forth.s:2708   .text:0000000000001f80 ABORQ
             forth.s:2709   .text:0000000000001f80 $t
             forth.s:2710   .text:0000000000001f84 $d
             forth.s:2725   .text:0000000000001fa8 _INTER
             forth.s:2727   .text:0000000000001fb4 $t
             forth.s:2730   .text:0000000000001fb8 $d
             forth.s:2739   .text:0000000000001ff4 INTE1
             forth.s:2736   .text:0000000000001fea $t
             forth.s:2737   .text:0000000000001fec $d
             forth.s:2743   .text:0000000000002004 INTE2
             forth.s:2750   .text:000000000000200c _LBRAC
             forth.s:2752   .text:000000000000200e $t
             forth.s:2753   .text:0000000000002010 LBRAC
             forth.s:2755   .text:0000000000002014 $d
             forth.s:2764   .text:000000000000202c _DOTOK
             forth.s:2766   .text:0000000000002030 $t
             forth.s:2767   .text:0000000000002030 DOTOK
ARM GAS  forth.s 			page 127


             forth.s:2769   .text:0000000000002034 $d
             forth.s:2775   .text:0000000000002058 DOTO1
             forth.s:2776   .text:0000000000002058 $d
             forth.s:2783   .text:0000000000002064 _QSTAC
             forth.s:2786   .text:000000000000206c QSTAC
             forth.s:2788   .text:0000000000002070 $d
             forth.s:2790   .text:0000000000002086 $t
             forth.s:2791   .text:0000000000002088 $d
             forth.s:2797   .text:0000000000002090 _EVAL
             forth.s:2802   .text:000000000000209c EVAL1
             forth.s:2803   .text:000000000000209c $d
             forth.s:2811   .text:00000000000020c4 EVAL2
             forth.s:2820   .text:00000000000020d4 _PRESE
             forth.s:2825   .text:00000000000020e0 $d
             forth.s:2833   .text:00000000000020f4 _QUIT
             forth.s:2837   .text:00000000000020fc $d
             forth.s:2839   .text:0000000000002108 QUIT1
             forth.s:2841   .text:000000000000210c QUIT2
             forth.s:2847   .text:0000000000002120 _FORGET
             forth.s:2850   .text:0000000000002128 FORGET
             forth.s:2852   .text:000000000000212c $d
             forth.s:3301   .text:00000000000025d4 OVERT
             forth.s:2877   .text:0000000000002174 $d
             forth.s:2878   .text:0000000000002178 _TICK
             forth.s:2880   .text:000000000000217a $t
             forth.s:2881   .text:000000000000217c TICK
             forth.s:2883   .text:0000000000002180 $d
             forth.s:2887   .text:0000000000002194 TICK1
             forth.s:2894   .text:000000000000219c _ALLOT
             forth.s:2896   .text:00000000000021a2 $t
             forth.s:2897   .text:00000000000021a4 ALLOT
             forth.s:2899   .text:00000000000021a8 $d
             forth.s:2907   .text:00000000000021b8 _COMMA
             forth.s:2908   .text:00000000000021ba $t
             forth.s:2909   .text:00000000000021bc COMMA
             forth.s:2911   .text:00000000000021c0 $d
             forth.s:2922   .text:00000000000021dc $d
             forth.s:2923   .text:00000000000021e0 _BCOMP
             forth.s:2925   .text:00000000000021ea $t
             forth.s:2926   .text:00000000000021ec BCOMP
             forth.s:2928   .text:00000000000021f0 $d
             forth.s:2936   .text:0000000000002200 _COMPI
             forth.s:2938   .text:0000000000002208 $t
             forth.s:2939   .text:0000000000002208 COMPI
             forth.s:2941   .text:000000000000220c $d
             forth.s:2955   .text:0000000000002238 _LITER
             forth.s:2957   .text:0000000000002240 $t
             forth.s:2958   .text:0000000000002240 LITER
             forth.s:2960   .text:0000000000002244 $d
             forth.s:3345   .text:0000000000002630 CALLC
             forth.s:2971   .text:0000000000002258 STRCQ
             forth.s:2972   .text:0000000000002258 $t
             forth.s:2973   .text:000000000000225c $d
             forth.s:2992   .text:0000000000002294 _FOR
             forth.s:2994   .text:0000000000002298 $t
             forth.s:2995   .text:0000000000002298 FOR
             forth.s:2997   .text:000000000000229c $d
ARM GAS  forth.s 			page 128


             forth.s:3005   .text:00000000000022b4 _BEGIN
             forth.s:3007   .text:00000000000022ba $t
             forth.s:3008   .text:00000000000022bc BEGIN
             forth.s:3010   .text:00000000000022c0 $d
             forth.s:3016   .text:00000000000022c8 $d
             forth.s:3017   .text:00000000000022cc _FNEXT
             forth.s:3020   .text:00000000000022d4 FNEXT
             forth.s:3022   .text:00000000000022d8 $d
             forth.s:3030   .text:00000000000022f0 _UNTIL
             forth.s:3032   .text:00000000000022f6 $t
             forth.s:3033   .text:00000000000022f8 UNTIL
             forth.s:3035   .text:00000000000022fc $d
             forth.s:3043   .text:0000000000002314 _AGAIN
             forth.s:3045   .text:000000000000231a $t
             forth.s:3046   .text:000000000000231c AGAIN
             forth.s:3048   .text:0000000000002320 $d
             forth.s:3056   .text:0000000000002338 _IFF
             forth.s:3059   .text:000000000000233c IFF
             forth.s:3061   .text:0000000000002340 $d
             forth.s:3072   .text:0000000000002368 _AHEAD
             forth.s:3074   .text:000000000000236e $t
             forth.s:3075   .text:0000000000002370 AHEAD
             forth.s:3077   .text:0000000000002374 $d
             forth.s:3088   .text:000000000000239c _REPEA
             forth.s:3091   .text:00000000000023a4 REPEA
             forth.s:3093   .text:00000000000023a8 $d
             forth.s:3103   .text:00000000000023c0 _THENN
             forth.s:3106   .text:00000000000023c8 THENN
             forth.s:3108   .text:00000000000023cc $d
             forth.s:3117   .text:00000000000023e0 _AFT
             forth.s:3119   .text:00000000000023e4 $t
             forth.s:3120   .text:00000000000023e4 AFT
             forth.s:3122   .text:00000000000023e8 $d
             forth.s:3132   .text:0000000000002400 _ELSEE
             forth.s:3135   .text:0000000000002408 ELSEE
             forth.s:3137   .text:000000000000240c $d
             forth.s:3146   .text:0000000000002420 _WHILE
             forth.s:3148   .text:0000000000002426 $t
             forth.s:3149   .text:0000000000002428 WHILE
             forth.s:3151   .text:000000000000242c $d
             forth.s:3159   .text:000000000000243c _ABRTQ
             forth.s:3162   .text:0000000000002444 ABRTQ
             forth.s:3164   .text:0000000000002448 $d
             forth.s:3172   .text:0000000000002460 _STRQ
             forth.s:3175   .text:0000000000002464 STRQ
             forth.s:3177   .text:0000000000002468 $d
             forth.s:3185   .text:0000000000002480 _DOTQ
             forth.s:3188   .text:0000000000002484 DOTQ
             forth.s:3190   .text:0000000000002488 $d
             forth.s:3201   .text:00000000000024a0 _UNIQU
             forth.s:3203   .text:00000000000024a8 $t
             forth.s:3204   .text:00000000000024a8 UNIQU
             forth.s:3206   .text:00000000000024ac $d
             forth.s:3213   .text:00000000000024d4 UNIQ1
             forth.s:3210   .text:00000000000024c8 $d
             forth.s:3224   .text:00000000000024dc SNAME
             forth.s:3225   .text:00000000000024dc $t
ARM GAS  forth.s 			page 129


             forth.s:3226   .text:00000000000024e0 $d
             forth.s:3242   .text:0000000000002524 SNAM1
             forth.s:3252   .text:0000000000002538 _SCOMP
             forth.s:3255   .text:0000000000002544 SCOMP
             forth.s:3257   .text:0000000000002548 $d
             forth.s:3269   .text:0000000000002580 SCOM2
             forth.s:3266   .text:0000000000002578 SCOM1
             forth.s:3274   .text:0000000000002594 SCOM3
             forth.s:3281   .text:000000000000259c COLON_ABORT
             forth.s:3282   .text:000000000000259c $t
             forth.s:3283   .text:00000000000025a0 $d
             forth.s:3298   .text:00000000000025cc _OVERT
             forth.s:3300   .text:00000000000025d2 $t
             forth.s:3303   .text:00000000000025d8 $d
             forth.s:3313   .text:00000000000025f0 _SEMIS
             forth.s:3315   .text:00000000000025f2 $t
             forth.s:3316   .text:00000000000025f4 SEMIS
             forth.s:3318   .text:00000000000025f8 $d
             forth.s:3328   .text:0000000000002614 _RBRAC
             forth.s:3330   .text:0000000000002616 $t
             forth.s:3331   .text:0000000000002618 RBRAC
             forth.s:3333   .text:000000000000261c $d
             forth.s:3346   .text:0000000000002630 $t
             forth.s:3347   .text:0000000000002634 $d
             forth.s:3357   .text:000000000000264c _COLON
             forth.s:3359   .text:000000000000264e $t
             forth.s:3360   .text:0000000000002650 COLON
             forth.s:3362   .text:0000000000002654 $d
             forth.s:3372   .text:000000000000266c _IMMED
             forth.s:3374   .text:0000000000002676 $t
             forth.s:3375   .text:0000000000002678 IMMED
             forth.s:3377   .text:000000000000267c $d
             forth.s:3394   .text:00000000000026a8 _CONST
             forth.s:3397   .text:00000000000026b4 CONST
             forth.s:3399   .text:00000000000026b8 $d
             forth.s:3410   .text:00000000000026e8 $t
             forth.s:3414   .text:00000000000026e8 DODOES
             forth.s:3416   .text:00000000000026ec $d
             forth.s:3429   .text:0000000000002710 $d
             forth.s:3430   .text:0000000000002714 _DOES
             forth.s:3432   .text:000000000000271a $t
             forth.s:3433   .text:000000000000271c DOES
             forth.s:3435   .text:0000000000002720 $d
             forth.s:3449   .text:0000000000002750 _DEFERAT
             forth.s:3452   .text:0000000000002758 DEFERAT
             forth.s:3454   .text:000000000000275c $d
             forth.s:3463   .text:0000000000002774 _DEFERSTO
             forth.s:3466   .text:000000000000277c DEFERSTO
             forth.s:3468   .text:0000000000002780 $d
             forth.s:3478   .text:000000000000279c _DEFER
             forth.s:3480   .text:00000000000027a2 $t
             forth.s:3481   .text:00000000000027a4 DEFER
             forth.s:3483   .text:00000000000027a8 $d
             forth.s:3506   .text:00000000000027f4 CREAT
             forth.s:3494   .text:00000000000027dc DEFER_NOP
             forth.s:3495   .text:00000000000027dc $t
             forth.s:3496   .text:00000000000027e0 $d
ARM GAS  forth.s 			page 130


             forth.s:3503   .text:00000000000027ec _CREAT
             forth.s:3508   .text:00000000000027f8 $d
             forth.s:3520   .text:000000000000281c _VARIA
             forth.s:3523   .text:0000000000002828 VARIA
             forth.s:3525   .text:000000000000282c $d
             forth.s:3542   .text:000000000000284c DMP
             forth.s:3543   .text:000000000000284c $t
             forth.s:3544   .text:0000000000002850 $d
             forth.s:3556   .text:0000000000002888 PDUM2
             forth.s:3550   .text:0000000000002870 PDUM1
             forth.s:3564   .text:0000000000002894 $d
             forth.s:3565   .text:0000000000002898 _DUMP
             forth.s:3568   .text:00000000000028a0 DUMP
             forth.s:3570   .text:00000000000028a4 $d
             forth.s:3588   .text:00000000000028f4 DUMP4
             forth.s:3578   .text:00000000000028cc DUMP1
             forth.s:3590   .text:00000000000028fc DUMP3
             forth.s:3601   .text:0000000000002914 _DOTS
             forth.s:3605   .text:0000000000002918 DOTS
             forth.s:3607   .text:000000000000291c $d
             forth.s:3615   .text:000000000000293c DOTS2
             forth.s:3611   .text:0000000000002930 DOTS1
             forth.s:3624   .text:0000000000002950 _TNAME
             forth.s:3626   .text:0000000000002956 $t
             forth.s:3627   .text:0000000000002958 TNAME
             forth.s:3629   .text:000000000000295c $d
             forth.s:3632   .text:0000000000002968 TNAM1
             forth.s:3643   .text:000000000000299c TNAM2
             forth.s:3652   .text:00000000000029ac _DOTID
             forth.s:3654   .text:00000000000029b0 $t
             forth.s:3655   .text:00000000000029b0 DOTID
             forth.s:3657   .text:00000000000029b4 $d
             forth.s:3664   .text:00000000000029d8 DOTI1
             forth.s:3665   .text:00000000000029e6 $t
             forth.s:3666   .text:00000000000029e8 $d
             forth.s:3668   *ABS*:0000000000000000 WANT_SEE
             forth.s:3748   .text:00000000000029f0 _WORDS
             forth.s:3750   .text:00000000000029f6 $t
             forth.s:3751   .text:00000000000029f8 WORDS
             forth.s:3753   .text:00000000000029fc $d
             forth.s:3756   .text:0000000000002a08 WORS1
             forth.s:3765   .text:0000000000002a30 WORS2
             forth.s:3778   .text:0000000000002a34 VERSN
             forth.s:3779   .text:0000000000002a34 $t
             forth.s:3780   .text:0000000000002a38 $d
             forth.s:3787   .text:0000000000002a48 _HI
             forth.s:3793   .text:0000000000002a50 $d
             forth.s:3794   .text:0000000000002a6a $t
             forth.s:3795   .text:0000000000002a6c $d
             forth.s:3824   .text:0000000000002ad0 COLD1
             forth.s:3825   .text:0000000000002ad0 $d
             forth.s:3836   .text:0000000000002b10 COLD2
             forth.s:3839   .text:0000000000002b10 $d
             forth.s:3842   .text:0000000000002b14 $d
              init.s:166    .text:000000000000001f $d
              init.s:166    .text:0000000000000020 $t
             tvout.s:257    .text:00000000000004fd $d
ARM GAS  forth.s 			page 131


             tvout.s:257    .text:00000000000004fe $t
             tvout.s:271    .text:000000000000052d $d
             tvout.s:271    .text:000000000000052e $t
             tvout.s:299    .text:000000000000057f $d
             tvout.s:299    .text:0000000000000580 $t
             tvout.s:318    .text:00000000000005a5 $d
             tvout.s:318    .text:00000000000005a6 $t
             tvout.s:418    .text:00000000000006d5 $d
             tvout.s:418    .text:00000000000006d6 $t
             forth.s:124    .text:0000000000000999 $d
             forth.s:124    .text:000000000000099a $t
             forth.s:175    .text:0000000000000a49 $d
             forth.s:175    .text:0000000000000a4a $t
             forth.s:195    .text:0000000000000a75 $d
             forth.s:195    .text:0000000000000a76 $t
             forth.s:219    .text:0000000000000aab $d
             forth.s:219    .text:0000000000000aac $t
             forth.s:328    .text:0000000000000b35 $d
             forth.s:328    .text:0000000000000b36 $t
             forth.s:362    .text:0000000000000b63 $d
             forth.s:362    .text:0000000000000b64 $t
             forth.s:375    .text:0000000000000b77 $d
             forth.s:375    .text:0000000000000b78 $t
             forth.s:386    .text:0000000000000b83 $d
             forth.s:386    .text:0000000000000b84 $t
             forth.s:398    .text:0000000000000b95 $d
             forth.s:398    .text:0000000000000b96 $t
             forth.s:410    .text:0000000000000ba9 $d
             forth.s:410    .text:0000000000000baa $t
             forth.s:457    .text:0000000000000bf1 $d
             forth.s:457    .text:0000000000000bf2 $t
             forth.s:479    .text:0000000000000c13 $d
             forth.s:479    .text:0000000000000c14 $t
             forth.s:492    .text:0000000000000c25 $d
             forth.s:492    .text:0000000000000c26 $t
             forth.s:504    .text:0000000000000c37 $d
             forth.s:504    .text:0000000000000c38 $t
             forth.s:529    .text:0000000000000c59 $d
             forth.s:529    .text:0000000000000c5a $t
             forth.s:568    .text:0000000000000c9f $d
             forth.s:568    .text:0000000000000ca0 $t
             forth.s:580    .text:0000000000000cb5 $d
             forth.s:580    .text:0000000000000cb6 $t
             forth.s:642    .text:0000000000000d0f $d
             forth.s:642    .text:0000000000000d10 $t
             forth.s:656    .text:0000000000000d23 $d
             forth.s:656    .text:0000000000000d24 $t
             forth.s:667    .text:0000000000000d31 $d
             forth.s:667    .text:0000000000000d32 $t
             forth.s:678    .text:0000000000000d41 $d
             forth.s:678    .text:0000000000000d42 $t
             forth.s:689    .text:0000000000000d51 $d
             forth.s:689    .text:0000000000000d52 $t
             forth.s:722    .text:0000000000000d81 $d
             forth.s:722    .text:0000000000000d82 $t
             forth.s:756    .text:0000000000000db5 $d
             forth.s:756    .text:0000000000000db6 $t
ARM GAS  forth.s 			page 132


             forth.s:767    .text:0000000000000dc5 $d
             forth.s:767    .text:0000000000000dc6 $t
             forth.s:778    .text:0000000000000dd7 $d
             forth.s:778    .text:0000000000000dd8 $t
             forth.s:804    .text:0000000000000dff $d
             forth.s:804    .text:0000000000000e00 $t
             forth.s:839    .text:0000000000000e3b $d
             forth.s:839    .text:0000000000000e3c $t
             forth.s:852    .text:0000000000000e4f $d
             forth.s:852    .text:0000000000000e50 $t
             forth.s:879    .text:0000000000000e7d $d
             forth.s:879    .text:0000000000000e7e $t
             forth.s:903    .text:0000000000000ea1 $d
             forth.s:903    .text:0000000000000ea2 $t
             forth.s:932    .text:0000000000000ecf $d
             forth.s:932    .text:0000000000000ed0 $t
             forth.s:1005   .text:0000000000000f3f $d
             forth.s:1005   .text:0000000000000f40 $t
             forth.s:1020   .text:0000000000000f57 $d
             forth.s:1020   .text:0000000000000f58 $t
             forth.s:1035   .text:0000000000000f73 $d
             forth.s:1035   .text:0000000000000f74 $t
             forth.s:1108   .text:0000000000000fcf $d
             forth.s:1108   .text:0000000000000fd0 $t
             forth.s:1119   .text:0000000000000fe3 $d
             forth.s:1119   .text:0000000000000fe4 $t
             forth.s:1154   .text:000000000000101f $d
             forth.s:1154   .text:0000000000001020 $t
             forth.s:1178   .text:000000000000103d $d
             forth.s:1178   .text:000000000000103e $t
             forth.s:1202   .text:0000000000001067 $d
             forth.s:1202   .text:0000000000001068 $t
             forth.s:1251   .text:00000000000010b9 $d
             forth.s:1251   .text:00000000000010ba $t
             forth.s:1274   .text:00000000000010e3 $d
             forth.s:1274   .text:00000000000010e4 $t
             forth.s:1290   .text:00000000000010fd $d
             forth.s:1290   .text:00000000000010fe $t
             forth.s:1303   .text:0000000000001119 $d
             forth.s:1303   .text:000000000000111a $t
             forth.s:1322   .text:0000000000001133 $d
             forth.s:1322   .text:0000000000001134 $t
             forth.s:1341   .text:000000000000115f $d
             forth.s:1341   .text:0000000000001160 $t
             forth.s:1408   .text:0000000000001211 $d
             forth.s:1408   .text:0000000000001212 $t
             forth.s:1465   .text:000000000000128b $d
             forth.s:1465   .text:000000000000128c $t
             forth.s:1531   .text:0000000000001335 $d
             forth.s:1531   .text:0000000000001336 $t
             forth.s:1550   .text:000000000000135d $d
             forth.s:1550   .text:000000000000135e $t
             forth.s:1589   .text:00000000000013af $d
             forth.s:1589   .text:00000000000013b0 $t
             forth.s:1628   .text:00000000000013fd $d
             forth.s:1628   .text:00000000000013fe $t
             forth.s:1652   .text:0000000000001431 $d
ARM GAS  forth.s 			page 133


             forth.s:1652   .text:0000000000001432 $t
             forth.s:1671   .text:0000000000001455 $d
             forth.s:1671   .text:0000000000001456 $t
             forth.s:1738   .text:0000000000001523 $d
             forth.s:1738   .text:0000000000001524 $t
             forth.s:1752   .text:0000000000001541 $d
             forth.s:1752   .text:0000000000001542 $t
             forth.s:1785   .text:000000000000158f $d
             forth.s:1785   .text:0000000000001590 $t
             forth.s:1802   .text:00000000000015b9 $d
             forth.s:1802   .text:00000000000015ba $t
             forth.s:1818   .text:00000000000015e3 $d
             forth.s:1818   .text:00000000000015e4 $t
             forth.s:1885   .text:000000000000167b $d
             forth.s:1885   .text:000000000000167c $t
             forth.s:2024   .text:0000000000001857 $d
             forth.s:2024   .text:0000000000001858 $t
             forth.s:2043   .text:000000000000188d $d
             forth.s:2043   .text:000000000000188e $t
             forth.s:2063   .text:00000000000018c3 $d
             forth.s:2063   .text:00000000000018c4 $t
             forth.s:2139   .text:0000000000001943 $d
             forth.s:2139   .text:0000000000001944 $t
             forth.s:2177   .text:00000000000019a3 $d
             forth.s:2177   .text:00000000000019a4 $t
             forth.s:2337   .text:0000000000001b8f $d
             forth.s:2337   .text:0000000000001b90 $t
             forth.s:2380   .text:0000000000001bf1 $d
             forth.s:2380   .text:0000000000001bf2 $t
             forth.s:2395   .text:0000000000001c15 $d
             forth.s:2395   .text:0000000000001c16 $t
             forth.s:2631   .text:0000000000001e9f $d
             forth.s:2631   .text:0000000000001ea0 $t
             forth.s:2785   .text:000000000000206b $d
             forth.s:2785   .text:000000000000206c $t
             forth.s:2799   .text:0000000000002095 $d
             forth.s:2799   .text:0000000000002096 $t
             forth.s:2822   .text:00000000000020db $d
             forth.s:2822   .text:00000000000020dc $t
             forth.s:2835   .text:00000000000020f9 $d
             forth.s:2835   .text:00000000000020fa $t
             forth.s:2849   .text:0000000000002127 $d
             forth.s:2849   .text:0000000000002128 $t
             forth.s:3019   .text:00000000000022d1 $d
             forth.s:3019   .text:00000000000022d2 $t
             forth.s:3058   .text:000000000000233b $d
             forth.s:3058   .text:000000000000233c $t
             forth.s:3090   .text:00000000000023a3 $d
             forth.s:3090   .text:00000000000023a4 $t
             forth.s:3105   .text:00000000000023c5 $d
             forth.s:3105   .text:00000000000023c6 $t
             forth.s:3134   .text:0000000000002405 $d
             forth.s:3134   .text:0000000000002406 $t
             forth.s:3161   .text:0000000000002443 $d
             forth.s:3161   .text:0000000000002444 $t
             forth.s:3174   .text:0000000000002463 $d
             forth.s:3174   .text:0000000000002464 $t
ARM GAS  forth.s 			page 134


             forth.s:3187   .text:0000000000002483 $d
             forth.s:3187   .text:0000000000002484 $t
             forth.s:3254   .text:0000000000002541 $d
             forth.s:3254   .text:0000000000002542 $t
             forth.s:3396   .text:00000000000026b1 $d
             forth.s:3396   .text:00000000000026b2 $t
             forth.s:3451   .text:0000000000002757 $d
             forth.s:3451   .text:0000000000002758 $t
             forth.s:3465   .text:000000000000277b $d
             forth.s:3465   .text:000000000000277c $t
             forth.s:3505   .text:00000000000027f3 $d
             forth.s:3505   .text:00000000000027f4 $t
             forth.s:3522   .text:0000000000002825 $d
             forth.s:3522   .text:0000000000002826 $t
             forth.s:3567   .text:000000000000289d $d
             forth.s:3567   .text:000000000000289e $t
             forth.s:3604   .text:0000000000002917 $d
             forth.s:3604   .text:0000000000002918 $t
             forth.s:3789   .text:0000000000002a4b $d
             forth.s:3789   .text:0000000000002a4c $t
             forth.s:3818   .text:0000000000002ab9 $d
             forth.s:3818   .text:0000000000002aba $t

UNDEFINED SYMBOLS
_mstack
