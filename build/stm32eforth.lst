ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ BCHAR, NBASE+4   // display base character flag 
  81              	  .equ TMP, BCHAR+4   // temporary variable
  82              	  .equ CSPAN, TMP+4  // character count received by expect  
  83              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  84              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  85              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  86              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  87              	  .equ VHOLD, EVAL+4   // hold pointer 
  88              	  .equ CTXT, VHOLD+4  // context pointer 
  89              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  90              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  91              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  92              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  93              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  94              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  95              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  96              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  97              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  98              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  99              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 100              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 101              	  .equ KBD_QUEUE_SIZE, 16 
 102              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 103              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 104              	  .equ KBD_QTAIL,KBD_QHEAD+4
 105              	  .equ ROW,KBD_QTAIL+4 
 106              	  .equ COL,ROW+4 
 107              	  .equ BK_COLOR,COL+4 
ARM GAS  forth.s 			page 10


 108              	  .equ PEN_COLOR,BK_COLOR+4
 109              	  .equ VFPSW, PEN_COLOR+4 
 110              	  .equ VFBASE, VFPSW+4 
 111              	
 112              	/***********************************************
 113              	* MACROS
 114              	*	Assemble inline direct threaded code ending.
 115              	***********************************************/
 116              		.macro _CALL fn /* low level routine call */ 
 117              	 	PUSH {LR}
 118              		BL \fn  
 119              		POP {LR}
 120              		.endm
 121              		
 122              		.macro _RET /* exit sub-routine */ 
 123              		BX LR 
 124              		.endm 
 125              	
 126              		// dictionary header  
 127              		.macro _HEADER  label, nlen, name
 128              			.word LINK 
 129              			.equ LINK , . 
 130              		_\label: .byte \nlen    // name field
 131              			.ascii "\name"
 132              			.p2align 2 
 133              		\label:   // code field 
 134              		.endm 
 135              		
 136              	
 137              	// local function header 
 138              		.macro _FUNC label 
 139              		.section .text, "ax", %progbits 
 140              		.p2align 2 
 141              		.type \label, %function  
 142              		\label:
 143              		.endm 
 144              	
 145              	// global function header 
 146              		.macro _GBL_FUNC label 
 147              		.global \label 
 148              		_FUNC \label 
 149              		.endm 
 150              	
 151              	
 152              	// load large constant to register 
 153              		.macro _MOV32 r, value 
 154              		mov \r,#(\value&0xffff)
 155              		movt \r,#(\value>>16)
 156              		.endm 
 157              	
 158              		.macro _NEXT /* direct jump INEXT */ 
 159              		B INEXT   
 160              		.endm 
 161              	
 162              	 	.macro	_NEST /*start high level word */
 163              		BX INX  
 164              		NOP.N 
ARM GAS  forth.s 			page 11


 165              		.endm
 166              	
 167              		.macro _ADR label 
 168              		.word 1+\label  
 169              		.endm 
 170              	
 171              	 	.macro	_UNNEST	/*end high level word */
 172              		_ADR UNNEST 
 173              		.endm
 174              	
 175              	 	.macro	_DOLIT u /*long literals */
 176              		_ADR	DOLIT
 177              		.word	\u 
 178              		.endm
 179              	
 180              		.macro _DOTQP len, text 
 181              		_ADR DOTQP 
 182              		.byte \len 
 183              		.ascii "\text" 
 184              		.p2align 2 
 185              		.endm
 186              	
 187              		.macro _COMPI name 
 188              		_DOLIT \name 
 189              		_ADR CALLC 
 190              		.endm 
 191              	
 192              		.macro _ABORQ len,name 
 193              		_ADR ABORQ 
 194              		.byte \len 
 195              		.ascii "\name"
 196              		.p2align 2 
 197              		.endm
 198              	
 199              		.macro _BRAN label 
 200              		_ADR BRAN 
 201              		.word \label 
 202              		.endm 
 203              	
 204              		.macro _QBRAN label 
 205              		_ADR QBRAN 
 206              		.word \label
 207              		.endm 
 208              	
 209              		.macro _DONXT label 
 210              		_ADR DONXT
 211              		.word \label 
 212              		.endm 
 213              	
 214              	 	.macro	_PUSH	/*push TOS on data stack*/
 215              		STR	TOS,[DSP,#-4]!
 216              		.endm
 217              	
 218              	 	.macro	_POP /*pop data stack to TOS */
 219              		LDR	TOS,[DSP],#4
 220              		.endm
 221              	
ARM GAS  forth.s 			page 12


 222              		// calling a colon word 
 223              		// from a code word   
 224              		.macro _CALL_COLWORD target 
 225              	    ldr WP,=\target 
 226              		orr WP,#1
 227              		b \target  
 228              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
ARM GAS  forth.s 			page 13


  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
ARM GAS  forth.s 			page 14


 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      7BFA5DF8 
 157      04EB
 158 000a DFF860C8 	  ldr IP,=dh
 159 000e 02F007BD 	  b INEXT  
 160              	dh:
 161 0012 C1470000 	  _ADR PRESE
 162 0016 C53D0000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 712A0000 	  _ADR CFSR 
 164 0038 612D0000 	  _ADR DUPP
 165 003c DD2C0000 	  _ADR TOR 
 166 0040 E72B0000 	  _DOLIT 16 
 166      10000000 
 167 0048 55320000 	  _ADR BASE 
 168 004c 592C0000 	  _ADR STORE 
 169 0050 C13E0000 	  _ADR UDOT 
 170 0054 C53D0000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 992C0000 	  _ADR RFROM
 172 0068 E72B0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 A52D0000 	  _ADR ANDD
 174 0074 272C0000 	  _QBRAN 1f
 174      94000000 
 175 007c 952A0000 	  _ADR BFAR
 176 0080 E72B0000 	  _DOLIT ','
 176      2C000000 
 177 0088 F12A0000 	  _ADR EMIT 
ARM GAS  forth.s 			page 15


 178 008c D53C0000 	  _ADR SPACE 
 179 0090 C13E0000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 C53D0000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 711F0000 	  _ADR FPSCR
 184 00a8 C13E0000 	  _ADR UDOT 
 185              	1:
 186 00ac 99040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F0EFFA 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF8ACC7 	  ldr IP,=fpu_except
 202 00c4 02F0ACBC 	  b INEXT 
 203              	fpu_except:  
 204 00c8 5D3D0000 	  _ADR CR 
 205 00cc 55320000 	  _ADR BASE 
 206 00d0 6D2C0000 	  _ADR AT 
 207 00d4 DD2C0000 	  _ADR TOR  
 208 00d8 E72B0000 	  _DOLIT 16 
 208      10000000 
 209 00e0 55320000 	  _ADR BASE 
 210 00e4 592C0000 	  _ADR STORE
 211 00e8 E72B0000 	  _DOLIT 4 
 211      04000000 
 212 00f0 352E0000 	  _ADR SUBB  
 213 00f4 C53D0000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 F53E0000 	  _ADR DOT 
 215 0104 C53D0000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 711F0000 	  _ADR FPSCR 
 217 0124 612D0000 	  _ADR DUPP 
 218 0128 F53E0000 	  _ADR DOT
 219 012c 352F0000 	  _ADR QDUP 
 220 0130 272C0000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 E72B0000 	  _DOLIT ',' 
 221      2C000000 
ARM GAS  forth.s 			page 16


 222 0140 F12A0000 	  _ADR EMIT 
 223 0144 E72B0000 	  _DOLIT ' ' 
 223      20000000 
 224 014c F12A0000 	  _ADR EMIT
 225 0150 612D0000 	  _ADR DUPP 
 226 0154 E72B0000 	  _DOLIT 0x10 
 226      10000000 
 227 015c A52D0000 	  _ADR ANDD
 228 0160 352F0000 	  _ADR QDUP  
 229 0164 272C0000 	  _QBRAN 1f 
 229      84010000 
 230 016c E72B0000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 252E0000 	  _ADR PLUS 
 232 0178 6D2C0000 	  _ADR AT 
 233 017c B5310000 	  _ADR COUNT 
 234 0180 293D0000 	  _ADR TYPEE
 235 0184 E72B0000 	1: _DOLIT 15 
 235      0F000000 
 236 018c A52D0000 	  _ADR ANDD
 237 0190 69300000 	  _ADR CLZ 
 238 0194 E72B0000 	  _DOLIT 31 
 238      1F000000 
 239 019c 712D0000 	  _ADR SWAP 
 240 01a0 352E0000 	  _ADR SUBB 
 241 01a4 E72B0000 	  _DOLIT 2 
 241      02000000 
 242 01ac 152E0000 	  _ADR LSHIFT 
 243 01b0 E72B0000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 252E0000 	  _ADR PLUS 
 245 01bc 6D2C0000 	  _ADR AT 
 246 01c0 B5310000 	  _ADR COUNT 
 247 01c4 293D0000 	  _ADR TYPEE 
 248 01c8 5D3D0000 	2: _ADR CR 
 249 01cc E72B0000 	  _DOLIT 0
 249      00000000 
 250 01d4 911F0000 	  _ADR CLR_FPSCR 
 251 01d8 992C0000 	  _ADR RFROM  
 252 01dc 55320000 	  _ADR BASE 
 253 01e0 592C0000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF888C6 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F036FA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
ARM GAS  forth.s 			page 17


 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF810C6 	  ldr IP,=nmi_hl 
 306 0268 02F0DABB 	  b  INEXT
 307              	nmi_hl:
 308 026c C1470000 	  _ADR PRESE 
ARM GAS  forth.s 			page 18


 309 0270 5D3D0000 	  _ADR CR 
 310 0274 C53D0000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 5D3D0000 	  _ADR CR 
 312 0298 39460000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF8D4C5 	  ldr IP,=hardfault_hl 
 326 02aa 02F0B9BB 	  b INEXT
 327              	hardfault_hl:
 328 02ae C1470000 	  _ADR PRESE
 329 02b2 5D3D0000 	  _ADR CR  
 330 02b6 C53D0000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 5D3D0000 	  _ADR CR 
 332 02d4 99040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF89CC5 	  ldr IP,=memfault_hl 
 345 02e6 02F09BBB 	  b INEXT 
 346              	memfault_hl: 
 347 02ea C1470000 	  _ADR PRESE
 348 02ee 5D3D0000 	  _ADR CR  
 349 02f2 C53D0000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 E72B0000 	  _DOLIT 16 
 350      10000000 
ARM GAS  forth.s 			page 19


 351 0320 55320000 	  _ADR BASE 
 352 0324 592C0000 	  _ADR STORE   
 353 0328 712A0000 	  _ADR CFSR
 354 032c E72B0000 	  _DOLIT 255 
 354      FF000000 
 355 0334 A52D0000 	  _ADR ANDD 
 356 0338 C13E0000 	  _ADR UDOT 
 357 033c 5D3D0000 	  _ADR CR 
 358 0340 99040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF834C5 	  ldr IP,=busfault_hl 
 372 0352 02F065BB 	  b INEXT 
 373              	busfault_hl:
 374 0356 C1470000 	  _ADR PRESE
 375 035a E72B0000 	  _DOLIT 1 
 375      01000000 
 376 0362 BD2B0000 	  _ADR ULED 
 377 0366 E72B0000 	  _DOLIT  100 
 377      64000000 
 378 036e 11320000 	  _ADR MSEC 
 379 0372 952A0000 	  _ADR BFAR 
 380 0376 712A0000 	  _ADR CFSR 
 381 037a 5D3D0000 	  _ADR CR  
 382 037e C53D0000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 E72B0000 	  _DOLIT 16 
 383      10000000 
 384 03a8 55320000 	  _ADR BASE 
 385 03ac 592C0000 	  _ADR STORE   
 386 03b0 E72B0000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 A52D0000 	  _ADR ANDD   
 388 03bc C13E0000 	  _ADR UDOT 
 389 03c0 C53D0000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc C13E0000 	  _ADR UDOT 
 391 03d0 5D3D0000 	  _ADR CR 
 392 03d4 99040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
ARM GAS  forth.s 			page 20


 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF8A4C4 	  ldr IP,=usagefault_hl
 405 03e6 02F01BBB 	  b INEXT 
 406              	usagefault_hl:
 407 03ea C1470000 	  _ADR PRESE
 408 03ee 5D3D0000 	  _ADR CR  
 409 03f2 C53D0000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 E72B0000 	  _DOLIT 16 
 410      10000000 
 411 0418 55320000 	  _ADR BASE 
 412 041c 592C0000 	  _ADR STORE   
 413 0420 712A0000 	  _ADR CFSR
 414 0424 E72B0000 	  _DOLIT 16 
 414      10000000 
 415 042c FD2D0000 	  _ADR RSHIFT 
 416 0430 C13E0000 	  _ADR UDOT 
 417 0434 5D3D0000 	  _ADR CR 
 418 0438 99040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/*********************************
 422              		system milliseconds counter
 423              	*********************************/	
 424              	  .type systick_handler, %function
 425              	  .p2align 2 
 426              	  .global systick_handler
 427              	systick_handler:
 428 043c 4FF00003 	  _MOV32 r3,UPP
 428      C2F20003 
 429 0444 9868     	  ldr r0,[r3,#TICKS]  
 430 0446 00F10100 	  add r0,#1
 431 044a 9860     	  str r0,[r3,#TICKS]
 432 044c D868     	  ldr r0,[r3,#CD_TIMER]
 433 044e 10B1     	  cbz r0, systick_exit
 434 0450 A0F10100 	  sub r0,#1
 435 0454 D860     	  str r0,[r3,#CD_TIMER]
 436              	systick_exit:
 437 0456 7047     	  bx lr
 438              	
 439              	user_reboot:
 440 0458 00B500F0 	   _CALL forth_init 
 440      4FF85DF8 
 440      04EB
 441 0462 DFF828C4 	  ldr IP,=ur
 442 0466 02F0DBBA 	  b INEXT  
ARM GAS  forth.s 			page 21


 443              	ur:
 444 046a C1470000 	  _ADR PRESE
 445 046e 5D3D0000 	  _ADR CR   
 446 0472 E72B0000 		_DOLIT user_reboot_msg
 446      88040000 
 447 047a B5310000 		_ADR COUNT 
 448 047e 293D0000 	  _ADR TYPEE 
 449 0482 99040000 	  _ADR reset_mcu 
 450              	
 451 0486 00BF     		.p2align 2 
 452              	user_reboot_msg:
 453 0488 0C       		.byte 12
 454 0489 75736572 		.ascii "user reboot!"
 454      20726562 
 454      6F6F7421 
 455 0495 0000BF   		.p2align 2 
 456              	
 457              	reset_mcu:
 458 0498 4FF48050 	  _MOV32 r0,UART 
 458      C4F20100 
 459 04a0 0168     	1: ldr r1,[r0,#USART_SR]
 460 04a2 11F0400F 	  tst r1,#(1<<6)
 461 04a6 FBD0     	  beq 1b
 462 04a8 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 462      CEF20000 
 463 04b0 C168     		ldr r1,[r0,#SCB_AIRCR]
 464 04b2 41F00401 		orr r1,#(1<<2)
 465 04b6 C0F2FA51 		movt r1,#SCB_VECTKEY
 466 04ba C160     		str r1,[r0,#SCB_AIRCR]
 467 04bc FEE7     		b . 
 468              	
 469              	/**************************************
 470              	  reset_handler execute at MCU reset
 471              	***************************************/
 472              	  .type  reset_handler, %function
 473 04be 00BF     	  .p2align 2 
 474              	  .global reset_handler
 475              	reset_handler:
 476 04c0 4FF00000 		_MOV32 r0,RAM_END
 476      C2F20200 
 477 04c8 8546     		mov sp,r0 
 478              	// enable memory, bus and usage exceptions  
 479 04ca 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 479      CEF20000 
 480 04d2 81EA0101 	  eor r1,r1 
 481 04d6 C0F20701 	  movt r1,#7 
 482 04da 4162     	  str r1,[r0,#SCB_SHCSR]
 483 04dc FFF7FEFF 		bl	remap 
 484 04e0 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 485 04e4 01F029FD 	  bl  fpu_init 
 486 04e8 00F0EDF9 		bl  ser_init
 487 04ec FFF7FEFF 	 	bl	tv_init
 488 04f0 FFF7FEFF 	  bl  kbd_init
 489 04f4 01F0E6FA 	  bl  flash_spi_init   
 490 04f8 05F0A8B8 		b COLD 
 491              	
 492              	
ARM GAS  forth.s 			page 22


 493              	
 494              		.type forth_init, %function 
 495              	  .p2align 2 
 496              	forth_init:
 497 04fc 4FF00004 		_MOV32 UP,UPP 
 497      C2F20004 
 498 0504 4FF68067 		_MOV32 DSP,SPP
 498      C2F20107 
 499 050c 4FF47F48 		_MOV32 RSP,RPP
 499      C2F20108 
 500 0514 DFF878A3 	  ldr INX,=NEST
 501 0518 4AF0010A 	  orr INX,#1 
 502 051c 86EA0606 		EOR TOS,TOS  
 503 0520 7047     		_RET 
 504              	
 505              	
 506              	
 507              	  .type init_devices, %function
 508 0522 00BF     	  .p2align 2 
 509              	init_devices:
 510              	/* init clock to HSE 96 Mhz */
 511              	/* set 3 wait states in FLASH_ACR_LATENCY */
 512 0524 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 512      C4F20200 
 513 052c 4FF00301 	  mov r1,#3 
 514 0530 0160     	  str r1,[r0,#FLASH_ACR]
 515              	/* configure clock for HSE, 25 Mhz crystal */
 516              	/* enable HSE in RCC_CR */
 517 0532 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 517      C4F20200 
 518 053a 0168     	  ldr r1,[r0,#RCC_CR]
 519 053c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 520 0540 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 521              	/* wait HSERDY loop */
 522              	wait_hserdy:
 523 0542 0168     	  ldr r1,[r0,#RCC_CR]
 524 0544 11F4003F 	  tst r1,#(1<<17)
 525 0548 FBD0     	  beq wait_hserdy
 526              	
 527              	/************************************************* 
 528              	   configure PLL  and source 
 529              	   SYSCLOCK=96 Mhz
 530              	   select HSE as  PLL source clock
 531              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 532              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 533              	****************************************************/
 534              	  /* set RCC_PLLCFGR */
 535 054a 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 535      C4F20200 
 536 0552 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 536      C0F24041 
 537 055a 4160     	  str r1,[r0,#RCC_PLLCFGR]
 538              	  /* enable PLL */
 539 055c 0168     	  ldr r1,[r0,#RCC_CR]
 540 055e 41F08071 	  orr r1, #(1<<24)
 541 0562 0160     	  str r1,[r0,#RCC_CR]
 542              	/* wait for PLLRDY */
ARM GAS  forth.s 			page 23


 543              	wait_pllrdy:
 544 0564 0168     	  ldr r1,[r0,#RCC_CR]
 545 0566 11F0007F 	  tst r1,#(1<<25)
 546 056a FBD1     	  bne wait_pllrdy 
 547              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 548 056c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 548      C0F21901 
 549 0574 8160     	  str r1,[r0,#RCC_CFGR]
 550              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 551 0576 8168     	  ldr r1,[r0,#RCC_CFGR]
 552 0578 41F00201 	  orr r1,#2
 553 057c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 554              	/* wait for SWS==2 */
 555              	wait_sws:
 556 057e 8168     	  ldr r1,[r0,#RCC_CFGR]
 557 0580 11F0080F 	  tst r1,#(2<<2)
 558 0584 FBD0     	  beq wait_sws
 559              	/* now sysclock is 96 Mhz */
 560              	
 561              	
 562              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 563 0586 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 564 058a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 565 058c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 566 0590 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 567              	/* configure GPIOC:13 as output for user LED */
 568 0592 4FF40060 	  _MOV32 r0,LED_GPIO 
 568      C4F20200 
 569 059a 4FF00D01 	  mov r1,#LED_PIN
 570 059e 4FF01102 	  mov r2,#OUTPUT_OD 
 571 05a2 00B500F0 	  _CALL gpio_config 
 571      A6F85DF8 
 571      04EB
 572 05ac 4FF00102 	  mov r2,#1
 573 05b0 00B500F0 	  _CALL gpio_out 
 573      F5F85DF8 
 573      04EB
 574              	/* enable compensation CELL for fast I/O */
 575 05ba 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 575      C4F20101 
 576 05c2 4FF00100 		mov r0,#1 
 577 05c6 0862     		str r0,[R1,#SYSCFG_CMPCR]
 578              	/* wait for ready bit */ 
 579 05c8 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 580 05ca 10F4807F 	    tst r0,#(1<<8)
 581 05ce FBD0     		beq 1b 	
 582              	
 583              	
 584              	/* configure systicks for 1msec ticks */
 585              	// set priority to 15 (lowest)
 586 05d0 4FF0FF30 	  mov r0,#STCK_IRQ
 587 05d4 4FF00F01 	  mov r1,#15 
 588 05d8 00B500F0 	  _CALL nvic_set_priority
 588      2FF85DF8 
 588      04EB
 589 05e2 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 589      CEF20000 
ARM GAS  forth.s 			page 24


 590 05ea 47F2FF61 	  _MOV32 r1,95999 
 590      C0F20101 
 591 05f2 4160     	  str r1,[r0,#STK_LOAD]
 592 05f4 4FF00701 	  mov r1,#7
 593 05f8 0160     	  str r1,[r0,STK_CTL]
 594 05fa 7047     	  _RET  
 595              	
 596              	
 597              	/* copy system variables to RAM */ 
 598              		.type remap, %function 
 599              	    .global remap 
 600              	remap:
 601              	// copy system to RAM 	
 602 05fc 4FF00000 		_MOV32 r0,RAM_ADR 
 602      C2F20000 
 603 0604 A349     		ldr r1,=UZERO 
 604 0606 4FF0B402 		mov r2,#ULAST-UZERO 
 605 060a 02F10302 		add r2,r2,#3
 606 060e 22F00302 		and r2,r2,#~3 
 607 0612 51F8043B 	1:	ldr r3,[r1],#4 
 608 0616 40F8043B 		str r3,[r0],#4 
 609 061a 043A     		subs R2,#4 
 610 061c F9D1     		bne 1b
 611              	// zero end of RAM 
 612 061e 4FF00002 		_MOV32 r2,RAM_END 
 612      C2F20202 
 613 0626 83EA0303 		eor r3,r3,r3 
 614 062a 40F8043B 	2:  str r3,[r0],#4
 615 062e 9042     		cmp r0,r2 
 616 0630 FBDB     		blt 2b 
 617 0632 4FF00004 		_MOV32 UP,RAM_ADR  
 617      C2F20004 
 618 063a 7047     		_RET 
 619              	
 620              	// set irq priority 
 621              	// 0 highest 
 622              	// 15 lowest
 623              	// input: r0 IRQn  
 624              	//        r1  ipr 
 625              	nvic_set_priority:
 626 063c 08B4     	    push {r3}
 627 063e 0028     	    cmp r0,#0 
 628 0640 08D4     	    bmi negative_irq 
 629 0642 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 629      CEF20003 
 630 064a 4FEA0111 	    lsl r1,#4 
 631 064e 1954     	    strb r1,[r3,r0]
 632 0650 08BC     	    pop {r3}
 633 0652 7047     	    _RET 
 634              	negative_irq:
 635 0654 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 635      CEF20003 
 636 065c 00F00F00 	    and r0,#0XF 
 637 0660 A0F10400 	    sub r0,#4 
 638 0664 4FEA0111 	    lsl r1,#4 
 639 0668 1954     	    strb r1,[r3,r0]
 640 066a 08BC     	    pop {r3}
ARM GAS  forth.s 			page 25


 641 066c 7047     	    _RET 
 642              	
 643              	
 644              	// enable interrupt in nvic 
 645              	// input: r0 = IRQn 
 646              	nvic_enable_irq: 
 647 066e 0EB4     	    push {r1,r2,r3}
 648 0670 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 648      CEF20003 
 649 0678 0146     	    mov r1,r0 
 650 067a 4FEA5111 	    lsr r1,#5  
 651 067e 4FEA8101 	    lsl r1,#2  // ISERn  
 652 0682 00F01F00 	    and r0,#31 // bit#
 653 0686 4FF00102 	    mov r2,#1 
 654 068a 02FA00F2 	    lsl r2,r0
 655 068e 72B6     	    cpsid I
 656 0690 5A50     	    str r2,[r3,r1]
 657 0692 62B6     	    cpsie I 
 658 0694 0EBC     	    pop {r1,r2,r3}
 659 0696 7047     	    _RET 
 660              	
 661              	// disable interrupt in nvic
 662              	// input: r0 = IRQn
 663              	nvic_disable_irq:
 664 0698 0EB4     	    push {r1,r2,r3}
 665 069a 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 665      CEF20003 
 666 06a2 0146     	    mov r1,r0 
 667 06a4 4FEA5111 	    lsr r1,#5  
 668 06a8 4FEA8101 	    lsl r1,#2  // ISERn
 669 06ac 00F01F00 	    and r0,#31 // bit#
 670 06b0 4FF00102 	    mov r2,#1 
 671 06b4 02FA00F2 	    lsl r2,r0
 672 06b8 5A50     	    str r2,[r3,r1]
 673 06ba BFF34F8F 	    dsb 
 674 06be BFF36F8F 	    isb 
 675 06c2 0EBC     	    pop {r1,r2,r3}
 676 06c4 7047     	    _RET 
 677              	
 678              	// clear interrupt pending flag 
 679              	// input: r0 = IRQn
 680              	nvic_clear_irq_pending:
 681 06c6 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 681      CEF20003 
 682 06ce 0EB4     	    push {r1,r2,r3}
 683 06d0 0146     	    mov r1,r0 
 684 06d2 4FEA5111 	    lsr r1,#5 
 685 06d6 4FEA8101 	    lsl r1,#2  // IABRn
 686 06da 00F01F00 	    and r0,#31 // bit#
 687 06de 4FF00102 	    mov r2,#1 
 688 06e2 02FA00F2 	    lsl r2,r0
 689 06e6 5A50     	    str r2,[r3,r1]
 690 06e8 BFF34F8F 	    dsb 
 691 06ec BFF36F8F 	    isb 
 692 06f0 0EBC     	    pop {r1,r2,r3}
 693 06f2 7047     	    _RET 
 694              	
ARM GAS  forth.s 			page 26


 695              	
 696              	/**********************************
 697              	  gpio_config 
 698              	  Configure gpio mode 
 699              	  input:
 700              	    r0   GPIOx 
 701              	    r1   pin 
 702              	    r2   mode 
 703              	  output:
 704              	    none 
 705              	  use:
 706              	    r3,r5,r11  
 707              	**********************************/
 708              	gpio_config:
 709 06f4 2DE92808 	    push {r3,r5,r11}
 710              	//  clear registers field 
 711 06f8 4FF00105 	    mov r5,#1
 712 06fc 05FA01F5 	    lsl r5,r1
 713 0700 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 714 0704 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 715 0706 03EA0503 	    and r3,r5 
 716 070a 4360     	    str r3,[r0,#GPIO_OTYPER]
 717 070c 4FF00305 	    mov r5,#3 
 718 0710 4FF0020B 	    mov r11,#2 
 719 0714 01FB0BFB 	    mul r11,r1 
 720 0718 05FA0BF5 	    lsl r5,r11 
 721 071c 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 722 0720 0368     	    ldr r3,[r0,#GPIO_MODER]
 723 0722 03EA0503 	    and r3,r5 
 724 0726 0360     	    str r3,[r0,#GPIO_MODER]
 725 0728 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 726 072a 03EA0503 	    and r3,r5 
 727 072e C360     	    str r3,[r0,#GPIO_PUPDR]
 728              	// set mode register, r2 low nibble  
 729 0730 02F00305 	    and r5,r2,#3    
 730 0734 05FA0BF5 	    lsl r5,r11 // mode 
 731 0738 0368     	    ldr r3,[r0,#GPIO_MODER]
 732 073a 43EA0503 	    orr r3,r5 
 733 073e 0360     	    str r3,[r0,#GPIO_MODER]
 734 0740 032A     	    cmp r2,#3
 735 0742 13D0     	    beq 9f // analog input 
 736 0744 12F00305 	    ands r5,r2,#3 
 737 0748 08D0     	    beq input_pull 
 738              	output_type:
 739 074a 4FEA1212 	    lsr r2,#4 
 740 074e 02FA01F2 	    lsl r2,r1 // 1 bit field 
 741 0752 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 742 0754 43EA0203 	    orr r3,r2 
 743 0758 4360     	    str r3,[r0,#GPIO_OTYPER]
 744 075a 07E0     	    b 9f 
 745              	input_pull:
 746 075c C368     	    ldr r3,[r0,#GPIO_PUPDR]
 747 075e 4FEA1212 	    lsr r2,#4 
 748 0762 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 749 0766 43EA0203 	    orr r3,r2 
 750 076a C360     	    str r3,[r0,#GPIO_PUPDR]
 751 076c BDE82808 	9:  pop {r3,r5,r11}
ARM GAS  forth.s 			page 27


 752 0770 7047     	    _RET 
 753              	
 754              	// configure gpio speed 
 755              	// input:
 756              	//    r0   GPIO_BASE_ADR 
 757              	//    r1   pin 
 758              	//    r2   speed
 759              	// use:
 760              	//  r3,r5,r11 
 761              	gpio_speed:
 762 0772 2DE92808 	    push {r3,r5,r11}
 763 0776 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 764 0778 4FF00305 	    mov r5,#3
 765 077c 4FF0020B 	    mov r11,#2 
 766 0780 01FB0BFB 	    mul r11,r1 
 767 0784 05FA0BF5 	    lsl r5,r11
 768 0788 6FEA0505 	    mvn r5,r5 
 769 078c 03EA0503 	    and r3,r5   
 770 0790 02FA0BF2 	    lsl r2,r11  
 771 0794 43EA0203 	    orr r3,r2 
 772 0798 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 773 079a BDE82808 	    pop {r3,r5,r11}
 774 079e 7047     	    _RET
 775              	
 776              	/**************************** 
 777              	  gpio_out port,pin,0|1
 778              	  input:
 779              	    r0   gpio_base_adr 
 780              	    r1   pin 
 781              	    r2   data 0|1 
 782              	**************************/
 783              	gpio_out:
 784 07a0 08B4     	    push {r3}
 785 07a2 4FF00103 	    mov r3,#1 
 786 07a6 03FA01F3 	    lsl r3,r1 
 787 07aa 0AB9     	    cbnz r2, 1f 
 788 07ac 4FEA0343 	    lsl r3,#16 
 789 07b0 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 790 07b2 08BC     	    pop {r3}
 791 07b4 7047     	    _RET 
 792              	
 793              	/******************************************************
 794              	*  COLD start moves the following to USER variables.
 795              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 796              	******************************************************/
 797 07b6 00BF     		.p2align 2
 798              	UZERO:
 799 07b8 00000000 		.word 0  			/*Reserved */
 800 07bc 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 801 07c0 00000000 		.word 0      /* TICKS */
 802 07c4 00000000 	    .word 0     /* CD_TIMER */
 803 07c8 5C550000 		.word HI_BOTH  /*'BOOT */
 804 07cc AC170000 		.word PS2_QKEY /* query for character */
 805 07d0 74100000 	  .word TV_EMIT  /* char output device */
 806 07d4 0A000000 	  .word BASEE 	/*BASE */
 807 07d8 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 808 07dc 00000000 		.word 0			/*tmp */
ARM GAS  forth.s 			page 28


 809 07e0 00000000 		.word 0			/*SPAN */
 810 07e4 00000000 		.word 0			/*>IN */
 811 07e8 00000000 		.word 0			/*#TIB */
 812 07ec 80FE0120 		.word TIBB	/*TIBU */
 813 07f0 98460000 		.word INTER	/*'EVAL */
 814 07f4 00000000 		.word 0			/*HLD */
 815 07f8 44560000 		.word _LASTN	/*CONTEXT */
 816 07fc B0560000 		.word CTOP  	/* FCP end of system dictionnary */
 817 0800 F84E0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 818 0804 44560000 		.word _LASTN	/*LAST word in dictionary */
 819 0808 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 819      00000000 
 819      00000000 
 819      00000000 
 820 0818 00000000 		.word 0  /* RX_HEAD */
 821 081c 00000000 		.word 0  /* RX_TAIL */ 
 822 0820 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 823 0824 00000000 		.word 0  /* VID_STATE, video state */  
 824 0828 00000000 	    .word 0  /* VID_FIELD, field */
 825 082c 80800120 		.word VID_BUFF /* video_buffer address */ 
 826 0830 00000000 	    .word 0 /* kbd struct */
 827 0834 00000000 		.space KBD_QUEUE_SIZE,0  
 827      00000000 
 827      00000000 
 827      00000000 
 828 0844 00000000 		.word 0  /* kbd queue head */
 829 0848 00000000 		.word 0 /* kbd queue tail */ 
 830 084c 00000000 	    .word 0 /* tv cursor row */
 831 0850 00000000 	    .word 0 /* tv cursor column */ 
 832 0854 00000000 	    .word 0 /* tv back color */
 833 0858 07000000 	    .word 7 /* tv font color */
 834 085c 00000000 	    .word 0 /* FPSW */
 835 0860 00000000 	    .word 0 /* FBASE */ 
 836 0864 00000000 	    .word 0,0 
 836      00000000 
 837              	ULAST:
 838              	
 839              	// used by _HEADER macro 
 840              	// to link names field
 841              	// in dictionary  
 842 086c 12000000 	    .equ LINK, 0 
 842      C8000000 
 842      E0470000 
 842      6C020000 
 842      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  forth.s 			page 29


  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0898 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 08a0 1868     		ldr r0,[r3,#USART_SR]
  38 08a2 5968     		ldr r1,[r3,#USART_DR]
  39 08a4 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 08a8 0CD0     		beq 2f // no char received 
  41 08aa B1F1030F 		cmp r1,#VK_CTRL_C 
  42 08ae 3FF4D3AD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 08b2 04F15000 		add r0,UP,#RX_QUEUE
  44 08b6 626E     		ldr r2,[UP,#RX_TAIL]
  45 08b8 8154     		strb r1,[r0,r2]
  46 08ba 02F10102 		add r2,#1 
  47 08be 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 08c2 6266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 08c4 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 08c6 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 08ce 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 08d0 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 08d4 01EA0201 	  and r1,r1,r2
  62 08d8 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 08dc 41EA0201 	  orr r1,r1,r2 
  64 08e0 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 08e2 4FF4EE61 	  mov r1,#0x77<<4 
  67 08e6 4162     	  str r1,[r0,#GPIO_AFRH]
ARM GAS  forth.s 			page 30


  68              	/* configure USART1 registers */
  69 08e8 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 08f0 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 08f4 8160     	  str r1,[r0,#USART_BRR]
  73 08f6 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 08fa C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 08fc 4FF02500 	  mov r0,#USART1_IRQ 
  77 0900 4FF00701 	  mov r1,#7
  78 0904 00B5FFF7 	  _CALL nvic_set_priority
  78      99FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 090e 4FF02500 	  mov r0,#USART1_IRQ 
  81 0912 00B5FFF7 	  _CALL nvic_enable_irq  
  81      ABFE5DF8 
  81      04EB
  82 091c 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 091e 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 092c 47F8046D 		_PUSH
  92 0930 606E     		ldr T0,[UP,#RX_TAIL] 
  93 0932 216E     		ldr T1,[UP,#RX_HEAD]
  94 0934 90EA0106 		eors TOS,T0,T1 
  95 0938 0CD0     		beq 1f
  96 093a 04F15000 		add T0,UP,#RX_QUEUE 
  97 093e 0844     		add T0,T1 
  98 0940 0678     		ldrb TOS,[T0]
  99 0942 01F10101 		add T1,#1 
 100 0946 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 094a 2166     		str T1,[UP,#RX_HEAD]
 102 094c 47F8046D 		_PUSH 
 103 0950 4FF0FF36 		mov TOS,#-1
 104 0954 02F064B8 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0958 22090000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0968 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0970 2868     	1:  ldr T0,[WP,#USART_SR]
ARM GAS  forth.s 			page 31


 113 0972 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0976 FBD0     		beq 1b 
 115 0978 2E71     		strb TOS,[WP,#USART_DR]	 
 116 097a 57F8046B 		_POP
 117 097e 02F04FB8 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0982 5C090000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 098c 47F8046D 	        _PUSH 
 126 0990 4FF00006 	        mov TOS,#0
 127 0994 02F044B8 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0998 86090000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 09a4 47F8046D 	        _PUSH 
 135 09a8 4FF00106 	        mov TOS,#1
 136 09ac 02F038B8 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 09b0 9C090000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 09bc 3046     	        mov T0,TOS
 144 09be 57F8046B 	        _POP 
 145 09c2 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 09c4 4B48     	        ldr T0,=SER_QKEY 
 148 09c6 6061     	        str T0,[UP,#STDIN]
 149 09c8 4B48     	        ldr T0,=SER_EMIT
 150 09ca A061     	        str T0,[UP,#STDOUT]
 151 09cc 02F028B8 	        _NEXT 
 152              	4: // local console 
 153 09d0 4A48     	        ldr T0,=PS2_QKEY
 154 09d2 6061     	        str T0,[UP,#STDIN]
 155 09d4 4A48     	        ldr T0,=TV_EMIT
 156 09d6 A061     	        str T0,[UP,#STDOUT]
 157 09d8 02F022B8 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
ARM GAS  forth.s 			page 32


 164 09dc B4090000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 09ec 504700BF 	      _NEST 
 166 09f0 E72B0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 09f8 812E0000 	1:    _ADR ONEP  // c+1
 168 09fc DD2C0000 	      _ADR TOR   
 169 0a00 E72B0000 	      _DOLIT 10 
 169      0A000000 
 170 0a08 9D350000 	      _ADR SLMOD // r q  
 171 0a0c 352F0000 	      _ADR QDUP  // r q q | r 0  
 172 0a10 272C0000 	      _QBRAN 2f  // r 0 
 172      240A0000 
 173 0a18 992C0000 	      _ADR RFROM // r q c 
 174 0a1c 3B2C0000 	      _BRAN 1b
 174      F8090000 
 175 0a24 E72B0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0a2c 252E0000 	      _ADR PLUS 
 177 0a30 F12A0000 	      _ADR EMIT 
 178 0a34 992C0000 	      _ADR RFROM 
 179 0a38 352F0000 	      _ADR QDUP 
 180 0a3c 272C0000 	      _QBRAN 3f
 180      540A0000 
 181 0a44 912E0000 	      _ADR ONEM 
 182 0a48 DD2C0000 	      _ADR TOR 
 183 0a4c 3B2C0000 	      _BRAN 2b 
 183      240A0000 
 184              	3:    
 185 0a54 272A0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0a58 E0090000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0a64 504700BF 	      _NEST 
 193 0a68 E72B0000 	      _DOLIT 27 
 193      1B000000 
 194 0a70 F12A0000 	      _ADR EMIT 
 195 0a74 E72B0000 	      _DOLIT '['
 195      5B000000 
 196 0a7c F12A0000 	      _ADR EMIT 
 197 0a80 272A0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0a84 5C0A0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0a90 504700BF 	      _NEST
ARM GAS  forth.s 			page 33


 205 0a94 650A0000 	      _ADR ANSI_ESC
 206 0a98 712D0000 	      _ADR SWAP 
 207 0a9c ED090000 	      _ADR ANSI_PARAM 
 208 0aa0 E72B0000 	      _DOLIT ';'
 208      3B000000 
 209 0aa8 F12A0000 	      _ADR EMIT
 210 0aac ED090000 	      _ADR ANSI_PARAM
 211 0ab0 E72B0000 	      _DOLIT 'H'
 211      48000000 
 212 0ab8 F12A0000 	      _ADR EMIT 
 213 0abc 272A0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0ac0 880A0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0acc 504700BF 	    _NEST
 221 0ad0 E72B0000 	    _DOLIT 1 
 221      01000000 
 222 0ad8 612D0000 	    _ADR DUPP 
 223 0adc 910A0000 	    _ADR SER_AT  
 224 0ae0 650A0000 	    _ADR ANSI_ESC
 225 0ae4 E72B0000 	    _DOLIT 'J'
 225      4A000000 
 226 0aec F12A0000 	    _ADR EMIT 
 227 0af0 272A0000 	    _UNNEST 
 228 0af4 2C090000 	
 228      68090000 
 228      AC170000 
 228      74100000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
ARM GAS  forth.s 			page 34


  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
ARM GAS  forth.s 			page 35


  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0b04 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0b0c 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0b0e 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0b16 41EA0201 	  orr r1,r2
  82 0b1a 0160     	  str r1,[r0,#GPIO_MODER]
  83 0b1c 81EA0101 	  eor r1,r1 
  84 0b20 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0b22 4FF00101 	  mov r1,#1 // pin 1 
  88 0b26 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0b2a 00B5FFF7 	  _CALL gpio_config 
  89      E2FD5DF8 
  89      04EB
  90 0b34 4FF00101 	  mov r1,#1 
  91 0b38 4FF00202 	  mov r2,#2
  92 0b3c 00B5FFF7 	  _CALL gpio_speed 
  92      18FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0b46 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0b48 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0b4c 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0b4e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0b56 4FF00200 	  mov r0,#2 
 100 0b5a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0b5c 41EA0001 	  orr r1,r0 
 102 0b60 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
ARM GAS  forth.s 			page 36


 104 0b62 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0b6a 41F2D470 	  mov r0,#HPER
 106 0b6e D062     	  str r0,[r2,#TIM_ARR]
 107 0b70 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0b74 D063     	  str r0,[r2,#TIM_CCR3]
 109 0b76 4FF4E170 	  mov r0,#HPULSE 
 110 0b7a 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0b7c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0b80 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0b82 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0b86 1062     	  str r0,[r2,#TIM_CCER]
 115 0b88 4FF00100 	  mov r0,#1 
 116 0b8c D060     	  str r0,[r2,#TIM_DIER]
 117 0b8e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0b90 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0b94 4FF00201 	  mov r1,#2
 121 0b98 00B5FFF7 	  _CALL nvic_set_priority
 121      4FFD5DF8 
 121      04EB
 122 0ba2 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0ba6 00B5FFF7 	  _CALL nvic_enable_irq
 123      61FD5DF8 
 123      04EB
 124 0bb0 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0bb2 00BF     	  _GBL_FUNC tv_out_isr
 132 0bb4 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0bbc 81EA0101 	  eor T1,T1
 134 0bc0 0161     	  str T1,[T0,#TIM_SR]
 135 0bc2 A16E     	  ldr T1,[UP,#VID_CNTR]
 136 0bc4 01F10101 	  add T1,#1 
 137 0bc8 A166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0bca E26E     	  ldr T2,[UP,#VID_STATE]
 140 0bcc 002A     	  cmp T2,#ST_VSYNC 
 141 0bce 07D0     	  beq state_vsync
 142 0bd0 012A     	  cmp T2,#ST_PREVID 
 143 0bd2 2FD0     	  beq state_pre_video 
 144 0bd4 022A     	  cmp T2,#ST_VIDEO 
 145 0bd6 36D0     	  beq state_video_out 
 146 0bd8 032A     	  cmp T2,#ST_POSTVID 
 147 0bda 63D0     	  beq state_post_video
 148 0bdc FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0be0 0129     	  cmp T1,#1
 152 0be2 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0be4 4FF0DB01 	  mov T1,#SERRATION
ARM GAS  forth.s 			page 37


 155 0be8 0164     	  str T1,[T0,#TIM_CCR4]
 156 0bea 40F6E931 	  mov T1,#SYNC_LINE 
 157 0bee C162     	  str T1,[T0,#TIM_ARR]
 158 0bf0 6BE0     	  b tv_isr_exit 
 159 0bf2 0729     	1: cmp T1,#7
 160 0bf4 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0bf6 40F62821 	  mov T1,#VSYNC_PULSE
 163 0bfa 0164     	  str T1,[T0,#TIM_CCR4]
 164 0bfc 65E0     	  b tv_isr_exit
 165 0bfe 0D29     	2: cmp T1,#13
 166 0c00 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0c02 4FF0DB01 	   mov T1,#SERRATION 
 169 0c06 0164     	   str T1,[T0,#TIM_CCR4]
 170 0c08 5FE0     	   b tv_isr_exit   
 171 0c0a 1229     	3: cmp T1,#18
 172 0c0c 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0c0e 216F     	   ldr T1,[UP,#VID_FIELD]
 175 0c10 0029     	   cmp T1,#ODD_FIELD  
 176 0c12 5AD0     	   beq tv_isr_exit 
 177 0c14 01E0     	   b sync_end 
 178 0c16 1329     	4: cmp T1,#19 
 179 0c18 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0c1a 4FF00901 	   mov T1,#9
 182 0c1e A166     	   str T1,[UP,#VID_CNTR]
 183 0c20 4FF4E171 	   mov T1,#HPULSE 
 184 0c24 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0c26 41F2D471 	   mov T1,#HPER 
 186 0c2a C162     	   str T1,[T0,#TIM_ARR] 
 187 0c2c 4FF00101 	   mov T1,#ST_PREVID 
 188 0c30 E166     	   str T1,[UP,#VID_STATE]
 189 0c32 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0c34 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0c36 48D4     	   bmi tv_isr_exit 
 194 0c38 4FF00201 	   mov T1,#ST_VIDEO 
 195 0c3c E166     	   str T1,[UP,#VID_STATE]
 196 0c3e 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0c42 C160     	   str T1,[T0,#TIM_DIER]
 198 0c44 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0c46 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0c48 06D9     	   bls 1f 
 205 0c4a 4FF00301 	   mov T1,#ST_POSTVID 
 206 0c4e E166     	   str T1,[UP,#VID_STATE]
 207 0c50 4FF00101 	   mov T1,#1 
 208 0c54 C160     	   str T1,[T0,#TIM_DIER]
 209 0c56 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0c58 606F     	   ldr T0,[UP,#VID_BUFFER]
ARM GAS  forth.s 			page 38


 212 0c5a A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0c5e 4FF0A003 	   mov T3,#160
 214 0c62 03FB01F1 	   mul T1,T3 
 215 0c66 0844     	   add T0,T1  
 216 0c68 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0c70 10F8012B 	2: ldrb T2,[T0],#1 
 222 0c74 4FEA0222 	   lsl T2,#8 
 223 0c78 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0c7a AFF30080 	   nop.w 
 225 0c7e AFF30080 	   nop.w
 226 0c82 AFF30080 	   nop.w 
 227 0c86 AFF30080 	   nop.w 
 228 0c8a 4FEA0212 	   lsl T2,#4  
 229 0c8e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0c90 AFF30080 	   nop.w
 231 0c94 AFF30080 	   nop.w  
 232 0c98 013B     	   subs T3,#1
 233 0c9a E9D1     	   bne 2b  
 234 0c9c 4FF47022 	   mov T2,#(15<<16) 
 235 0ca0 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0ca2 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0ca4 4FF48372 	   mov T2,#262
 239 0ca8 9142     	   cmp T1,T2
 240 0caa 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0cac 216F     	   ldr T1,[UP,VID_FIELD]
 243 0cae 11B9     	   cbnz T1, frame_end 
 244 0cb0 40F6E931 	   mov T1,#SYNC_LINE
 245 0cb4 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0cb6 4FF00001 	   mov T1,#ST_VSYNC 
 248 0cba E166     	   str T1,[UP,#VID_STATE]
 249 0cbc 81EA0101 	   eor T1,T1 
 250 0cc0 A166     	   str T1,[UP,#VID_CNTR]
 251 0cc2 216F     	   ldr T1,[UP,#VID_FIELD]
 252 0cc4 6FEA0101 	   mvn T1,T1  
 253 0cc8 2167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0cca 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0ccc C40A0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
ARM GAS  forth.s 			page 39


 265 0cdc 47F8046D 		_PUSH 
 266 0ce0 04F19C06 		ADD TOS,UP,#BK_COLOR
 267 0ce4 01F09CBE 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0ce8 D00C0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0cf8 47F8046D 		_PUSH 
 273 0cfc 04F1A006 		ADD TOS,UP,#PEN_COLOR
 274 0d00 01F08EBE 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0d04 EC0C0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0d10 47F8046D 	  _PUSH 
 280 0d14 04F19806 	  ADD TOS,UP,#COL 
 281 0d18 01F082BE 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0d1c 080D0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0d24 47F8046D 	  _PUSH 
 287 0d28 04F19406 	  ADD TOS,UP,#ROW 
 288 0d2c 01F078BE 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0d30 200D0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0d3c 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0d40 00FB06F6 	  mul TOS,T0 
 295 0d44 01F06CBE 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0d48 340D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0d54 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0d58 00FB06F6 	  mul TOS,T0 
 302 0d5c 01F060BE 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0d60 4C0D0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0d6c 47F8046D 	  _PUSH 
 308 0d70 DFF88C65 	  ldr TOS,=font_6x8 
 309 0d74 01F054BE 	  _NEXT 
ARM GAS  forth.s 			page 40


 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0d78 640D0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0d84 47F8046D 	  _PUSH 
 315 0d88 666F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0d8a 01F049BE 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0d8e 7C0D0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0d98 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0d9a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0d9e 02FB00F0 	    mul T0,T2 
 330 0da2 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0da6 1044     	    add T0,T2 
 332 0da8 636F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0daa 0344     	    add T3,T0 // T3 -> byte address 
 334 0dac 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0dae 4FF00F02 	    mov T2,#15 // AND mask 
 336 0db2 11F0010F 	    tst T1,#1 
 337 0db6 01D0     	    beq 1f 
 338 0db8 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0dbc DFF84405 	1:  ldr T0,=plot_op 
 340 0dc0 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0dc4 05EA0205 	    and WP,T2 // mask out nibble 
 343 0dc8 94F89C00 	    ldrb T0,[UP,#BK_COLOR]
 344 0dcc 11F0010F 	    tst T1,#1 
 345 0dd0 01D1     	    bne 1f 
 346 0dd2 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0dd6 45EA0005 	1:  orr WP,T0  
 348 0dda 1D70     	    strb WP,[T3]
 349 0ddc 1AE0     	    b 9f 
 350              	op_pen: 
 351 0dde 05EA0205 	    and WP,T2 
 352 0de2 94F8A000 	    ldrb T0,[UP,#PEN_COLOR]
 353 0de6 11F0010F 	    tst T1,#1
 354 0dea 01D1     	    bne 1f 
 355 0dec 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0df0 45EA0005 	1:	orr WP,T0 
 357 0df4 1D70     	    strb WP,[T3]
 358 0df6 0DE0     	    b 9f 
 359              	op_invert:
 360 0df8 85EA0205 	    eor WP,T2 
 361 0dfc 1D70     	    strb WP,[T3]
 362 0dfe 09E0     	    b 9f 
ARM GAS  forth.s 			page 41


 363              	op_xor:
 364 0e00 D4F8A000 	    ldr T0,[UP,#PEN_COLOR]
 365 0e04 11F0010F 	    tst T1,#1 
 366 0e08 01D1     	    bne 1f 
 367 0e0a 4FEA0010 	    lsl T0,#4 
 368 0e0e 85EA0005 	1:  eor WP,T0 
 369 0e12 1D70     	    strb WP,[T3]
 370 0e14 57F8046B 	9:  _POP 
 371 0e18 01F002BE 	    _NEXT 
 372              	
 373 0e1c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0e20 920D0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0e2c A06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0e2e 0028     	    cmp T0,#0
 381 0e30 FCD1     	    bne 1b
 382 0e32 01F0F5BD 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0e36 240E0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0e40 80EA0000 	    eor T0,T0 
 388 0e44 94F89C10 	    ldrb T1,[UP,#BK_COLOR]
 389 0e48 40EA0100 	    orr T0,T1 
 390 0e4c 4FEA0111 	    lsl T1,#4 
 391 0e50 40EA0100 	    orr T0,T1 
 392 0e54 4FEA0021 	    lsl T1,T0,#8 
 393 0e58 40EA0100 	    orr T0,T1 
 394 0e5c 4FEA0041 	    lsl T1,T0,#16
 395 0e60 40EA0100 	    orr T0,T1 
 396 0e64 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0e68 626F     	    ldr T2,[UP,#VID_BUFFER]
 398 0e6a 5050     	1:	str T0,[T2,T1]
 399 0e6c 0439     	    subs T1,#4
 400 0e6e FCD1     	    bne 1b
 401 0e70 1060     	    str T0,[T2]
 402 0e72 80EA0000 	    eor T0,T0 
 403 0e76 C4F89400 	    str T0,[UP,#ROW]
 404 0e7a C4F89800 	    str T0,[UP,#COL]
 405 0e7e 01F0CFBD 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0e82 3A0E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0e90 504700BF 	  _NEST
 412 0e94 E72B0000 	  _DOLIT (BPR*CHAR_HEIGHT)
ARM GAS  forth.s 			page 42


 412      00050000 
 413 0e9c 612D0000 	  _ADR DUPP  
 414 0ea0 DD2C0000 	  _ADR TOR 
 415 0ea4 452E0000 	  _ADR STAR
 416 0ea8 850D0000 	  _ADR VIDBUFF
 417 0eac 252E0000 	  _ADR PLUS
 418 0eb0 992C0000 	  _ADR RFROM   
 419 0eb4 E72B0000 	  _DOLIT 0 
 419      00000000 
 420 0ebc D1370000 	  _ADR FILL 
 421 0ec0 272A0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0ec4 860E0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0ed4 504700BF 	    _NEST 
 429 0ed8 850D0000 	    _ADR VIDBUFF 
 430 0edc 612D0000 	    _ADR DUPP 
 431 0ee0 E72B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0ee8 612D0000 	    _ADR DUPP 
 433 0eec DD2C0000 	    _ADR TOR 
 434 0ef0 252E0000 	    _ADR PLUS 
 435 0ef4 712D0000 	    _ADR SWAP 
 436 0ef8 E72B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0f00 992C0000 	    _ADR RFROM  
 438 0f04 352E0000 	    _ADR SUBB 
 439 0f08 89370000 	    _ADR MOVE
 440 0f0c E72B0000 	    _DOLIT 24 
 440      18000000 
 441 0f14 910E0000 	    _ADR CLRLINE 
 442 0f18 272A0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0f1c C80E0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0f2c 504700BF 	    _NEST 
 450 0f30 850D0000 	    _ADR VIDBUFF
 451 0f34 612D0000 	    _ADR DUPP 
 452 0f38 E72B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0f40 252E0000 	    _ADR PLUS 
 454 0f44 E72B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0f4c E72B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
ARM GAS  forth.s 			page 43


 456 0f54 352E0000 	    _ADR SUBB  
 457 0f58 89370000 	    _ADR MOVE
 458 0f5c E72B0000 	    _DOLIT 0 
 458      00000000 
 459 0f64 910E0000 	    _ADR CLRLINE
 460 0f68 272A0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0f6c 200F0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0f78 E34D     	    ldr WP,=SCROLLUP 
 469 0f7a 45F00105 	    orr WP,#1
 470 0f7e 80EA0000 	    eor T0,T0 
 471 0f82 C4F89800 	    str T0,[UP,#COL]
 472 0f86 D4F89400 	    ldr T0,[UP,#ROW]
 473 0f8a 1828     	    cmp T0,#24 
 474 0f8c A2D0     	    beq SCROLLUP  
 475 0f8e 00F10100 	    add T0,#1 
 476 0f92 C4F89400 	    str T0,[UP,#ROW]
 477 0f96 01F043BD 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0f9a 700F0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0fa4 D4F89800 	  ldr T0,[UP,#COL]
 484 0fa8 00F10100 	  add T0,#1
 485 0fac 3528     	  cmp T0,#53
 486 0fae E3D5     	  bpl TV_CRLF  
 487 0fb0 C4F89800 	  str T0,[UP,#COL]
 488 0fb4 01F034BD 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0fb8 9E0F0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0fc4 D4F89800 	    ldr T0,[UP,#COL]
 497 0fc8 28B1     	    cbz T0,1f 
 498 0fca A0F10100 	    sub T0,#1 
 499 0fce C4F89800 	    str T0,[UP,#COL]
 500 0fd2 01F025BD 	    _NEXT 
 501 0fd6 D4F89400 	1:  ldr T0,[UP,#ROW]
 502 0fda 38B1     	    cbz T0,9f
 503 0fdc A0F10100 	    sub T0,#1
 504 0fe0 C4F89400 	    str T0,[UP,#ROW]
 505 0fe4 4FF03400 	    mov T0,#52 
ARM GAS  forth.s 			page 44


 506 0fe8 C4F89800 	    str T0,[UP,#COL]
 507 0fec 01F018BD 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0ff0 4FF08000 	    mov T0,#128 
 513 0ff4 06EA0006 	    and TOS,T0 
 514 0ff8 4FEAD616 	    lsr TOS,#7
 515 0ffc 01F010BD 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 1000 3868     	  ldr T0,[DSP]
 520 1002 00F10100 	  add T0,#1 
 521 1006 3860     	  str T0,[DSP]
 522 1008 01F00ABD 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 100c 4FEA4606 	    lsl TOS,#1
 527 1010 01F006BD 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 1014 504700BF 	    _NEST 
 536 1018 E72B0000 	    _DOLIT 5 
 536      05000000 
 537 1020 DD2C0000 	    _ADR TOR 
 538 1024 DD2C0000 	1:  _ADR TOR 
 539 1028 992F0000 	    _ADR DDUP 
 540 102c C92C0000 	    _ADR RAT
 541 1030 F10F0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 1034 990D0000 	    _ADR PLOT 
 543 1038 01100000 	    _ADR INCR_X 
 544 103c 992C0000 	    _ADR RFROM 
 545 1040 0D100000 	    _ADR NEXT_PIXEL
 546 1044 092C0000 	    _DONXT 1b
 546      24100000 
 547 104c 852F0000 	    _ADR TDROP 
 548 1050 272A0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 1054 A6F12006 	   sub TOS,#32
 553 1058 4FF00800 	   mov T0,#8 
 554 105c 00FB06F6 	   mul TOS,T0 
 555 1060 A748     	   ldr T0,=font_6x8
 556 1062 0644     	   add TOS,T0 
 557 1064 01F0DCBC 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
ARM GAS  forth.s 			page 45


 561              	   draw character in video buffer
 562              	**********************************/
 563 1068 BC0F0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 1074 504700BF 	    _NEST
 565 1078 612D0000 	    _ADR DUPP 
 566 107c E72B0000 	    _DOLIT 32 
 566      20000000 
 567 1084 E5300000 	    _ADR ULESS
 568 1088 272C0000 	    _QBRAN 1f
 568      98100000 
 569 1090 3B2C0000 	    _BRAN CTRL_KEY
 569      FC100000 
 570 1098 55100000 	1:  _ADR CHAR_FONT 
 571 109c 110D0000 	    _ADR CURSOR_COL 
 572 10a0 6D2C0000 	    _ADR AT
 573 10a4 550D0000 	    _ADR COLX  // x coord 
 574 10a8 250D0000 	    _ADR CURSOR_ROW 
 575 10ac 6D2C0000 	    _ADR AT    
 576 10b0 3D0D0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 10b4 492F0000 	    _ADR ROT  // TEST 
 578 10b8 E72B0000 	    _DOLIT 7   
 578      07000000 
 579 10c0 DD2C0000 	    _ADR TOR  
 580 10c4 DD2C0000 	1:  _ADR TOR  // { x y }
 581 10c8 992F0000 	    _ADR DDUP  // { x y x y }
 582 10cc C92C0000 	    _ADR RAT 
 583 10d0 8D2C0000 	    _ADR CAT   // { x y x y r }
 584 10d4 15100000 	    _ADR CHAR_ROW 
 585 10d8 812E0000 	    _ADR ONEP // {x y' }
 586 10dc 992C0000 	    _ADR RFROM 
 587 10e0 812E0000 	    _ADR ONEP // {x y' c-adr' }
 588 10e4 092C0000 	    _DONXT 1b
 588      C4100000 
 589 10ec 852F0000 	    _ADR TDROP  
 590 10f0 A50F0000 	    _ADR RIGHT
 591 10f4 E5110000 	9:  _ADR SHOW_CURSOR 
 592 10f8 272A0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 10fc 6D120000 	    _ADR HIDE_CURSOR
 595 1100 612D0000 	    _ADR DUPP 
 596 1104 E72B0000 	    _DOLIT BKSPP  
 596      08000000 
 597 110c AD300000 	    _ADR EQUAL 
 598 1110 272C0000 	    _QBRAN 1f 
 598      28110000 
 599 1118 C5110000 	    _ADR BACK_SPACE 
 600 111c 512D0000 	8:  _ADR DROP 
 601 1120 3B2C0000 	    _BRAN 9b 
 601      F4100000 
 602 1128 612D0000 	1:  _ADR DUPP 
 603 112c E72B0000 	    _DOLIT CRR 
 603      0D000000 
 604 1134 AD300000 	    _ADR EQUAL 
 605 1138 272C0000 	    _QBRAN 1f 
 605      4C110000 
ARM GAS  forth.s 			page 46


 606 1140 6D110000 	    _ADR CAR_RET
 607 1144 3B2C0000 	    _BRAN 8b
 607      1C110000 
 608 114c E72B0000 	1:  _DOLIT LF 
 608      0A000000 
 609 1154 AD300000 	    _ADR EQUAL 
 610 1158 272C0000 	    _QBRAN 9b 
 610      F4100000 
 611 1160 85110000 	    _ADR LN_FEED
 612 1164 3B2C0000 	    _BRAN 9b  
 612      F4100000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 116c 504700BF 	   _NEST
 620 1170 E72B0000 	   _DOLIT 0 
 620      00000000 
 621 1178 110D0000 	   _ADR CURSOR_COL 
 622 117c 592C0000 	   _ADR STORE 
 623 1180 272A0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1184 504700BF 	    _NEST 
 631 1188 250D0000 	    _ADR CURSOR_ROW 
 632 118c 6D2C0000 	    _ADR AT 
 633 1190 612D0000 	    _ADR DUPP 
 634 1194 E72B0000 	    _DOLIT 24 
 634      18000000 
 635 119c CD2D0000 	    _ADR XORR 
 636 11a0 272C0000 	    _QBRAN 1f
 636      B8110000 
 637 11a8 812E0000 	    _ADR ONEP 
 638 11ac 250D0000 	    _ADR CURSOR_ROW 
 639 11b0 592C0000 	    _ADR STORE 
 640 11b4 272A0000 	    _UNNEST    
 641 11b8 512D0000 	1:  _ADR DROP 
 642 11bc D50E0000 	    _ADR SCROLLUP 
 643 11c0 272A0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 11c4 504700BF 	  _NEST 
 652 11c8 C50F0000 	  _ADR LEFT 
 653 11cc E5110000 	  _ADR SHOW_CURSOR
 654 11d0 272A0000 	9: _UNNEST    
 655              	
ARM GAS  forth.s 			page 47


 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 11d4 6C100000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 11e4 504700BF 	    _NEST 
 663 11e8 E72B0000 	    _DOLIT 0xFF
 663      FF000000 
 664 11f0 250D0000 	0:  _ADR CURSOR_ROW
 665 11f4 6D2C0000 	    _ADR AT  
 666 11f8 812E0000 	    _ADR ONEP 
 667 11fc 3D0D0000 	    _ADR ROWY 
 668 1200 E72B0000 	    _DOLIT BPR
 668      A0000000 
 669 1208 452E0000 	    _ADR STAR
 670 120c E72B0000 	    _DOLIT BPR  
 670      A0000000 
 671 1214 352E0000 	    _ADR SUBB 
 672 1218 110D0000 	    _ADR CURSOR_COL
 673 121c 6D2C0000 	    _ADR AT 
 674 1220 550D0000 	    _ADR COLX 
 675 1224 252F0000 	    _ADR TWOSL  
 676 1228 252E0000 	    _ADR PLUS
 677 122c 850D0000 	    _ADR VIDBUFF
 678 1230 252E0000 	    _ADR PLUS
 679 1234 E72B0000 	    _DOLIT 2
 679      02000000 
 680 123c DD2C0000 	    _ADR TOR  
 681 1240 992F0000 	1:  _ADR DDUP 
 682 1244 792C0000 	    _ADR CSTOR 
 683 1248 812E0000 	    _ADR ONEP 
 684 124c 092C0000 	    _DONXT 1b
 684      40120000 
 685 1254 712F0000 	2:  _ADR DDROP // drop 3 elements 
 686 1258 272A0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 125c D8110000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 126c 504700BF 	    _NEST 
 694 1270 DD0C0000 	    _ADR BACKCOLOR 
 695 1274 6D2C0000 	    _ADR AT 
 696 1278 612D0000 	    _ADR DUPP  
 697 127c E72B0000 	    _DOLIT 4 
 697      04000000 
 698 1284 152E0000 	    _ADR LSHIFT 
 699 1288 B92D0000 	    _ADR ORR 
 700 128c 3B2C0000 	    _BRAN 0b
ARM GAS  forth.s 			page 48


 700      F0110000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1294 60120000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 12a0 352E     	    cmp TOS,#53
 706 12a2 01D4     	    bmi 1f 
 707 12a4 4FF03406 	    mov TOS,#52
 708 12a8 C4F89860 	1:  str TOS,[UP,#COL]
 709 12ac 57F8046B 	    _POP
 710 12b0 192E     	    cmp TOS,#25
 711 12b2 01D4     	    bmi 1f 
 712 12b4 4FF01806 	    mov TOS,#24 
 713 12b8 C4F89460 	1:  str TOS,[UP,#ROW]
 714 12bc 57F8046B 	    _POP 
 715 12c0 01F0AEBB 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 12c4 98120000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 12d0 504700BF 	    _NEST 
 721 12d4 01370000 	    _ADR PAD 
 722 12d8 612D0000 	    _ADR DUPP 
 723 12dc 812E0000 	    _ADR ONEP 
 724 12e0 E72B0000 	    _DOLIT 53
 724      35000000 
 725 12e8 85450000 	    _ADR ACCEP
 726 12ec 712D0000 	    _ADR SWAP 
 727 12f0 512D0000 	    _ADR DROP 
 728 12f4 852D0000 	    _ADR OVER 
 729 12f8 792C0000 	    _ADR CSTOR  
 730 12fc 272A0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
ARM GAS  forth.s 			page 49


 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
ARM GAS  forth.s 			page 50


 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
ARM GAS  forth.s 			page 51


 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
ARM GAS  forth.s 			page 52


 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
ARM GAS  forth.s 			page 53


   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
ARM GAS  forth.s 			page 54


  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
ARM GAS  forth.s 			page 55


 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 130c 1C61     	   .byte 0x1c,'a' 
   9 130e 3262     	   .byte 0x32,'b'
  10 1310 2163     	   .byte 0x21,'c'
  11 1312 2364     	   .byte 0x23,'d'
  12 1314 2465     	   .byte 0x24,'e'
  13 1316 2B66     	   .byte 0x2b,'f'
  14 1318 3467     	   .byte 0x34,'g'
  15 131a 3368     	   .byte 0x33,'h'
  16 131c 4369     	   .byte 0x43,'i'
  17 131e 3B6A     	   .byte 0x3B,'j'
  18 1320 426B     	   .byte 0x42,'k'
  19 1322 4B6C     	   .byte 0x4b,'l'
  20 1324 3A6D     	   .byte 0x3a,'m'
  21 1326 316E     	   .byte 0x31,'n'
ARM GAS  forth.s 			page 56


  22 1328 446F     	   .byte 0x44,'o'
  23 132a 4D70     	   .byte 0x4d,'p'
  24 132c 1571     	   .byte 0x15,'q'
  25 132e 2D72     	   .byte 0x2d,'r'
  26 1330 1B73     	   .byte 0x1b,'s'
  27 1332 2C74     	   .byte 0x2c,'t'
  28 1334 3C75     	   .byte 0x3c,'u'
  29 1336 2A76     	   .byte 0x2a,'v'
  30 1338 1D77     	   .byte 0x1d,'w'
  31 133a 2278     	   .byte 0x22,'x'
  32 133c 3579     	   .byte 0x35,'y'
  33 133e 1A7A     	   .byte 0x1a,'z'
  34 1340 4530     	   .byte 0x45,'0'
  35 1342 1631     	   .byte 0x16,'1'
  36 1344 1E32     	   .byte 0x1e,'2'
  37 1346 2633     	   .byte 0x26,'3'
  38 1348 2534     	   .byte 0x25,'4'
  39 134a 2E35     	   .byte 0x2e,'5'
  40 134c 3636     	   .byte 0x36,'6'
  41 134e 3D37     	   .byte 0x3d,'7'
  42 1350 3E38     	   .byte 0x3e,'8'
  43 1352 4639     	   .byte 0x46,'9'
  44 1354 0E60     	   .byte 0x0e,'`'
  45 1356 4E2D     	   .byte 0x4e,'-'
  46 1358 553D     	   .byte 0x55,'='
  47 135a 5D5C     	   .byte 0x5d,'\\'
  48 135c 545B     	   .byte 0x54,'['
  49 135e 5B5D     	   .byte 0x5b,']'
  50 1360 4C3B     	   .byte 0x4c,';'
  51 1362 5227     	   .byte 0x52,'\''
  52 1364 412C     	   .byte 0x41,','
  53 1366 492E     	   .byte 0x49,'.'
  54 1368 7C2A     	   .byte 0x7c,'*'
  55 136a 792B     	   .byte 0x79,'+'
  56 136c 2920     	   .byte 0x29,' '
  57 136e 5A0D     	   .byte SC_ENTER,CRR 
  58 1370 6608     	   .byte SC_BKSP,BKSPP 
  59 1372 0D09     	   .byte SC_TAB,9
  60 1374 761B     	   .byte SC_ESC,27
  61 1376 119E     	   .byte SC_LALT,VK_LALT 
  62 1378 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 137a 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 137c 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 137e 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1380 5800     	   .byte SC_CAPS,0
  67 1382 0580     	   .byte SC_F1,VK_F1
  68 1384 0681     	   .byte SC_F2,VK_F2
  69 1386 0482     	   .byte SC_F3,VK_F3
  70 1388 0C83     	   .byte SC_F4,VK_F4
  71 138a 0384     	   .byte SC_F5,VK_F5
  72 138c 0B85     	   .byte SC_F6,VK_F6
  73 138e 8386     	   .byte SC_F7,VK_F7
  74 1390 0A87     	   .byte SC_F8,VK_F8
  75 1392 0188     	   .byte SC_F9,VK_F9
  76 1394 098A     	   .byte SC_F10,VK_F10
  77 1396 788B     	   .byte SC_F11,VK_F11
  78 1398 078C     	   .byte SC_F12,VK_F12
ARM GAS  forth.s 			page 57


  79 139a 7030     	   .byte SC_KP0,'0'
  80 139c 6931     	   .byte SC_KP1,'1'
  81 139e 7232     	   .byte SC_KP2,'2'
  82 13a0 7A33     	   .byte SC_KP3,'3'
  83 13a2 6B34     	   .byte SC_KP4,'4'
  84 13a4 7335     	   .byte SC_KP5,'5'
  85 13a6 7436     	   .byte SC_KP6,'6'
  86 13a8 6C37     	   .byte SC_KP7,'7'
  87 13aa 7538     	   .byte SC_KP8,'8'
  88 13ac 7D39     	   .byte SC_KP9,'9'
  89 13ae 7C2A     	   .byte SC_KPMUL,'*'
  90 13b0 4A2F     	   .byte SC_KPDIV,'/'
  91 13b2 792B     	   .byte SC_KPPLUS,'+'
  92 13b4 7B2D     	   .byte SC_KPMINUS,'-'
  93 13b6 712E     	   .byte SC_KPDOT,'.'
  94 13b8 5A0D     	   .byte SC_KPENTER,'\r'
  95 13ba FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 13bc AAAA     	   .byte BAT_OK,BAT_OK  
  97 13be 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 13c0 6141     	   .byte 'a','A'
 102 13c2 6242     	   .byte 'b','B'
 103 13c4 6343     	   .byte 'c','C'
 104 13c6 6444     	   .byte 'd','D'
 105 13c8 6545     	   .byte 'e','E'
 106 13ca 6646     	   .byte 'f','F'
 107 13cc 6747     	   .byte 'g','G'
 108 13ce 6848     	   .byte 'h','H'
 109 13d0 6949     	   .byte 'i','I'
 110 13d2 6A4A     	   .byte 'j','J'
 111 13d4 6B4B     	   .byte 'k','K'
 112 13d6 6C4C     	   .byte 'l','L'
 113 13d8 6D4D     	   .byte 'm','M'
 114 13da 6E4E     	   .byte 'n','N'
 115 13dc 6F4F     	   .byte 'o','O'
 116 13de 7050     	   .byte 'p','P'
 117 13e0 7151     	   .byte 'q','Q'
 118 13e2 7252     	   .byte 'r','R'
 119 13e4 7353     	   .byte 's','S'
 120 13e6 7454     	   .byte 't','T'
 121 13e8 7555     	   .byte 'u','U'
 122 13ea 7656     	   .byte 'v','V'
 123 13ec 7757     	   .byte 'w','W'
 124 13ee 7858     	   .byte 'x','X'
 125 13f0 7959     	   .byte 'y','Y'
 126 13f2 7A5A     	   .byte 'z','Z'
 127 13f4 3121     	   .byte '1','!'
 128 13f6 3240     	   .byte '2','@'
 129 13f8 3323     	   .byte '3','#'
 130 13fa 3424     	   .byte '4','$'
 131 13fc 3525     	   .byte '5','%'
 132 13fe 365E     	   .byte '6','^'
 133 1400 3726     	   .byte '7','&'
 134 1402 382A     	   .byte '8','*'
 135 1404 3928     	   .byte '9','('
ARM GAS  forth.s 			page 58


 136 1406 3029     	   .byte '0',')'
 137 1408 2D5F     	   .byte '-','_'
 138 140a 3D2B     	   .byte '=','+'
 139 140c 607E     	   .byte '`','~'
 140 140e 2722     	   .byte '\'','"'
 141 1410 2C3C     	   .byte ',','<'
 142 1412 2E3E     	   .byte '.','>'
 143 1414 2F3F     	   .byte '/','?'
 144 1416 5C7C     	   .byte '\\','|'
 145 1418 3B3A     	   .byte ';',':'
 146 141a 5B7B     	   .byte '[','{'
 147 141c 5D7D     	   .byte ']','}'
 148 141e 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1420 315C     	   .byte '1','\\'
 153 1422 3240     	   .byte '2','@'
 154 1424 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 1426 363F     	   .byte '6','?'
 158 1428 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 142a 397B     	   .byte '9','{'
 161 142c 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 142e 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 1430 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 1432 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1434 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 1436 11A3     	    .byte SC_RALT,VK_RALT
 172 1438 2F97     	    .byte SC_APPS,VK_APPS
 173 143a 758D     	    .byte SC_UP,VK_UP
 174 143c 728E     	    .byte SC_DOWN,VK_DOWN
 175 143e 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 1440 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 1442 7095     	    .byte SC_INSERT,VK_INSERT
 178 1444 6C91     	    .byte SC_HOME,VK_HOME
 179 1446 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1448 7A94     	    .byte SC_PGDN,VK_PGDN
 181 144a 717F     	    .byte SC_DEL,VK_DELETE
 182 144c 6992     	    .byte SC_END,VK_END
 183 144e 4A2F     	    .byte SC_KPDIV,'/'
 184 1450 5A0D     	    .byte SC_KPENTER,'\r'
 185 1452 1200     	    .byte 0x12,0
 186 1454 7C00     	    .byte 0x7c,0
 187 1456 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1458 6303     	   .byte 'c', VK_CTRL_C 
ARM GAS  forth.s 			page 59


 193 145a 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 145c 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 145e 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1460 11A3     	   .byte SC_RALT,VK_RALT
 197 1462 2F97     	   .byte SC_APPS,VK_APPS
 198 1464 7095     	   .byte SC_INSERT,VK_INSERT
 199 1466 6C91     	   .byte SC_HOME,VK_HOME
 200 1468 7D93     	   .byte SC_PGUP,VK_PGUP
 201 146a 717F     	   .byte SC_DEL,VK_DELETE
 202 146c 6992     	   .byte SC_END,VK_END
 203 146e 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1470 758D     	   .byte SC_UP,VK_UP
 205 1472 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1474 728E     	   .byte SC_DOWN,VK_DOWN
 207 1476 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1478 4A2F     	   .byte SC_KPDIV,'/'
 209 147a 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 147c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 147e 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1480 119E     	   .byte SC_LALT,VK_LALT
 213 1482 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1484 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1486 761B     	   .byte SC_ESC,VK_ESC
 216 1488 779A     	   .byte SC_NUM,VK_NLOCK
 217 148a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 148c 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
ARM GAS  forth.s 			page 60


  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 148e 00BF     	    _GBL_FUNC kbd_isr 
  79 1490 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1498 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 149c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 149e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 14a6 D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
  84 14aa 10F0020F 	    tst r0,#KBD_TX 
  85 14ae 40F08480 	    bne send_bit  
  86 14b2 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 14b4 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 14b8 01F10102 	    add r2,r1,#1
  89 14bc 84F87820 	    strb r2,[UP,#KBD_BITCNTR]
  90 14c0 0029     	    cmp r1,#0
  91 14c2 15D0     	    beq start_bit 
  92 14c4 0929     	    cmp r1,#9 
  93 14c6 25D0     	    beq parity_bit 
  94 14c8 0A29     	    cmp r1,#10 
  95 14ca 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 14cc 94F87920 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 14d0 4FEA5202 	    lsr r2,#1 
  99 14d4 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 14d8 07D0     	    beq 1f 
 101 14da 42F08002 	    orr r2,#(1<<7)
 102 14de 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 103 14e2 00F10100 	    add r0,#1 
 104 14e6 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 105 14ea 84F87920 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 14ee 63E0     	    b 9f         
 107              	start_bit:
 108 14f0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 14f4 60D1     	    bne 9f // not a start bit 
 110 14f6 80EA0000 	    eor r0,r0 
 111 14fa 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 112 14fe 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 113 1502 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1506 6FF00101 	    mvn r1,#1
 115 150a 00EA0100 	    and r0,r1 // clear error flag 
 116 150e 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 117 1512 51E0     	    b 9f 
 118              	parity_bit:
 119 1514 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 120 1518 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 151c 4CD0     	    beq 9f  
ARM GAS  forth.s 			page 61


 122 151e 01F10101 	    add r1,#1 
 123 1522 84F87B10 	    strb r1,[UP,#KBD_PARITY]  
 124 1526 47E0     	    b 9f      
 125              	stop_bit:
 126 1528 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 152c 40D0     	    beq 8f // error stop bit expected 
 128 152e 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 129 1532 11F0010F 	    tst r1,#1 
 130 1536 3BD0     	    beq 8f // error parity
 131 1538 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 153c 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 1540 E028     	    cmp r0,#XT_KEY
 134 1542 04D1     	    bne 1f
 135 1544 41F04001 	    orr r1,#KBD_F_XT
 136 1548 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 137 154c 30E0     	    b 8f  
 138 154e 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1552 14D0     	    beq store_code
 140 1554 5828     	    cmp r0,#SC_CAPS
 141 1556 04D1     	    bne 1f
 142 1558 81F00401 	    eor r1,#KBD_F_CAPS
 143 155c 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1560 06E0     	    b 2f 
 145 1562 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 156c 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1570 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1574 01EA0201 	    and r1,r2
 149 1578 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 150 157c 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 157e F028     	    cmp r0,#KEY_REL
 154 1580 04D1     	    bne 1f
 155              	// set release flags 
 156 1582 41F08001 	    orr r1,#KBD_F_REL 
 157 1586 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 158 158a 11E0     	    b 8f     
 159 158c 0146     	1:  mov r1,r0 
 160 158e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1598 0AD1     	    bne 8f // was async key 
 162 159a D4F89000 	    ldr r0,[UP,#KBD_QTAIL]
 163 159e 04F17C02 	    add r2,UP,#KBD_QUEUE
 164 15a2 1154     	    strb r1,[r2,r0]
 165 15a4 00F10100 	    add r0,#1
 166 15a8 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 15ac 84F89000 	    strb r0,[UP,#KBD_QTAIL]
 168 15b0 80EA0000 	8:  eor r0,r0 
 169 15b4 A4F87800 	    strh r0,[UP,#KBD_BITCNTR]
 170 15b8 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
ARM GAS  forth.s 			page 62


 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 15ba 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 15be 01F10100 	    add r0,r1,#1
 182 15c2 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 183 15c6 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 15ca 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 15ce 0829     	1:  cmp r1,#8 
 187 15d0 15D0     	    beq send_parity 
 188 15d2 0929     	    cmp r1,#9 
 189 15d4 1CD0     	    beq send_stop
 190 15d6 0A29     	    cmp r1,#10
 191 15d8 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 15da 10F0010F 	    tst r0,#1
 194 15de 4FEA5000 	    lsr r0,#1
 195 15e2 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 196 15e6 02D1     	    bne 1f 
 197 15e8 4FEA0242 	    lsl r2,#16
 198 15ec 05E0     	    b 2f  
 199 15ee 94F87B00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 15f2 00F10100 	    add r0,#1 
 201 15f6 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 202 15fa 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 15fc 1CE0     	    b 9f 
 204              	send_parity:
 205 15fe 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 206 1602 10F0010F 	    tst r0,#1
 207 1606 01D0     	    beq 1f 
 208 1608 4FEA0242 	    lsl r2,#16
 209 160c 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 160e 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1610 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1612 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1616 1960     	    str r1,[r3,#GPIO_MODER]
 217 1618 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 161a 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 161e 6FF00201 	    mvn r1,#KBD_TX 
 221 1622 00EA0100 	    and r0,r1 
 222 1626 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 1628 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 162c 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 225 1630 80EA0000 	    eor r0,r0 
 226 1634 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1638 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
ARM GAS  forth.s 			page 63


 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 163a 02B4     	    push {r1}
 238 163c DFF86414 	    ldr r1,=async_keys
 239 1640 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 164a 02BC     	    pop {r1}
 241 164c 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 164e 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1658 FF28     	    cmp r0,#255
 256 165a 01D1     	    bne set_async_key 
 257 165c 0020     	    movs r0,#0 
 258 165e 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1660 06B4     	    push {r1,r2}
 262 1662 94F87A20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1666 DFF84014 	    ldr r1,=async_jump 
 264 166a D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 166e 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1672 04E0     	    b set_reset
 268              	ctrl_key:
 269 1674 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1678 01E0     	    b set_reset 
 271              	alt_key:
 272 167a 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 167e 12F0800F 	    tst r2,#KBD_F_REL 
 275 1682 04D0     	    beq 1f 
 276 1684 6FEA0000 	    mvn r0,r0
 277 1688 02EA0002 	    and r2,r0
 278 168c 01E0     	    b 2f
 279 168e 42EA0002 	1:  orr r2,r0 
 280 1692 84F87A20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1696 5FF0FF30 	    movs r0,#-1
 282 169a 06BC     	9:  pop {r1,r2}
 283 169c 7047     	    _RET 
 284              	
ARM GAS  forth.s 			page 64


 285              	// asynchronous key table 
 286              	async_keys:
 287 169e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 16a0 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 16a2 1401     	    .byte SC_LCTRL,1  // left control 
 290 16a4 1401     	    .byte SC_RCTRL,1  // right control 
 291 16a6 1102     	    .byte SC_LALT,2  // left alt 
 292 16a8 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 16aa 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 16ac 00       	    .byte 0 // shift  key 
 297 16ad 03       	    .byte (ctrl_key-shift_key)/2
 298 16ae 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 16af 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 16b0 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 16b8 1846     	    mov r0,r3 
 311 16ba 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 16be 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 16c2 00B5FFF7 	    _CALL gpio_config
 313      16F85DF8 
 313      04EB
 314 16cc 1846     	    mov r0,r3 
 315 16ce 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 16d2 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 16d6 00B5FFF7 	    _CALL gpio_config
 317      0CF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 16e0 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 16e8 4FF40050 	    mov r0,#(2<<12)
 321 16ec 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 16ee 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 16f6 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 16fa 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 16fc D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 16fe 80EA0000 	   eor r0,r0 
 328 1702 C4F88C00 	   str r0,[UP,#KBD_QHEAD]
 329 1706 C4F89000 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 170a 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 170e 4FF00101 	   mov r1,#1 
 333 1712 00B5FEF7 	   _CALL nvic_set_priority
 333      92FF5DF8 
ARM GAS  forth.s 			page 65


 333      04EB
 334 171c 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1720 00B5FEF7 	   _CALL nvic_enable_irq 
 335      A4FF5DF8 
 335      04EB
 336 172a 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 172c C8120000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 173c 47F8046D 	    _PUSH 
 342 1740 94F87A60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 1744 06F0FC06 	    and TOS,#0xFC  
 344 1748 01F06AB9 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 174c 0EB4     	    push {T1,T2,T3}
 352 174e 80EA0000 	    eor T0,T0  
 353 1752 04F17C03 	    add T3,UP,#KBD_QUEUE
 354 1756 D4F88C10 	    ldr T1,[UP,#KBD_QHEAD]
 355 175a D4F89020 	    ldr T2,[UP,#KBD_QTAIL]
 356 175e 9142     	    cmp T1,T2 
 357 1760 06D0     	    beq 2f  
 358 1762 585C     	    ldrb T0,[T3,T1]
 359 1764 01F10101 	    add T1,#1 
 360 1768 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 176c C4F88C10 	    str T1,[UP,#KBD_QHEAD]
 362 1770 0EBC     	2:  pop {T1,T2,T3}
 363 1772 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1774 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 177e 0000     	    movs T0,T0
 368 1780 F8D0     	    beq wait_code  
 369 1782 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1784 04B4     	    push {T2}
 380 1786 11F8012B 	1:  ldrb T2,[T1],#1
 381 178a 22B1     	    cbz T2,2f 
 382 178c 8242     	    cmp T2,T0
ARM GAS  forth.s 			page 66


 383 178e 02D0     	    beq 2f 
 384 1790 01F10101 	    add T1,#1 
 385 1794 F7E7     	    b 1b 
 386 1796 0878     	2:  ldrb T0,[T1]
 387 1798 0000     	    movs T0,T0 // set/reset zero flag 
 388 179a 04BC     	9:  pop {T2}
 389 179c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 179e 30170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 17ac 47F8046D 	    _PUSH 
 398 17b0 86EA0606 	    eor TOS,TOS 
 399 17b4 BD49     	    ldr T1,=sc_ascii // translation table
 400 17b6 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 17ba 4FF04002 	    mov T2,#KBD_F_XT 
 402 17be 1042     	    tst T0,T2
 403 17c0 00D0     	    beq 1f
 404 17c2 BB49     	    ldr T1,=extended // extended code translation
 405 17c4 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 17ce 98B1     	    cbz T0,inkey_exit
 407 17d0 E128     	    cmp T0,#XT2_KEY // pause 
 408 17d2 13D0     	    beq pause_key
 409 17d4 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 17de 0646     	    mov TOS,T0
 411 17e0 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 17ea 032E     	    cmp TOS,#VK_CTRL_C 
 413 17ec 3EF434AE 	    beq user_reboot 
 414 17f0 47F8046D 	    _PUSH 
 415 17f4 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 17f8 01F012B9 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 17fc 4FF00701 	    mov T1,#7 
 420 1800 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 180a 0139     	    subs T1,#1
 422 180c F8D1     	    bne 1b 
 423 180e 01F007B9 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1812 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 67


 429 1816 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 181a 06D1     	    bne shift_down 
 431 181c 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1820 06D1     	    bne altchar_down 
 433 1822 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1826 06D1     	    bne ctrl_down 
 435 1828 0DE0     	    b 9f 
 436              	shift_down:
 437 182a 3046     	    mov T0,TOS 
 438 182c A149     	    ldr T1,=shifted 
 439 182e 04E0     	    b 8f 
 440              	altchar_down:
 441 1830 3046     	    mov T0,TOS 
 442 1832 A149     	    ldr T1,=altchar
 443 1834 01E0     	    b 8f
 444              	ctrl_down:
 445 1836 3046     	    mov T0,TOS 
 446 1838 A049     	    ldr T1,=controls 
 447 183a 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1844 0646     	    mov TOS,T0
 449 1846 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1850 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1852 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1856 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 185a 0BD0     	    beq 9f 
 456 185c 412E     	    cmp TOS,#'A'
 457 185e 09D4     	    bmi 9f 
 458 1860 5B2E     	    cmp TOS,#'Z'+1 
 459 1862 03D4     	    bmi 3f 
 460 1864 612E     	    cmp TOS,#'a'
 461 1866 05D4     	    bmi 9f 
 462 1868 7B2E     	    cmp TOS,#'z'+1
 463 186a 03D5     	    bpl 9f 
 464 186c 4FF02000 	3:  mov T0,#(1<<5)
 465 1870 86EA0006 	    eor TOS,T0 
 466 1874 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1876 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
ARM GAS  forth.s 			page 68


 482 1878 E06E     	1:  ldr r0,[UP,#VID_STATE]
 483 187a 0128     	    cmp r0,ST_PREVID 
 484 187c FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 187e 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1882 00B5FEF7 	    _CALL nvic_disable_irq
 487      08FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 188c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1894 1846     	    mov r0,r3 
 491 1896 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 189a 4FF01102 	    mov r2,#OUTPUT_OD
 493 189e 00B5FEF7 	    _CALL gpio_config 
 493      28FF5DF8 
 493      04EB
 494 18a8 1846     	    mov r0,r3 
 495 18aa 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 18ae 82EA0202 	    eor r2,r2 
 497 18b2 00B5FEF7 	    _CALL gpio_out 
 497      74FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 18bc 4FF4E150 	    mov r0,#150*48
 500 18c0 0138     	1:  subs r0,#1 
 501 18c2 FDD1     	    bne 1b
 502 18c4 01BC     	    pop {r0}
 503 18c6 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 504 18ca D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
 505 18ce 40F00200 	    orr r0,#KBD_TX 
 506 18d2 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 507 18d6 80EA0000 	    eor r0,r0 
 508 18da 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 509 18de 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 18e2 1846     	    mov r0,r3 
 513 18e4 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 18e8 4FF01102 	    mov r2,#OUTPUT_OD 
 515 18ec 00B5FEF7 	    _CALL gpio_config 
 515      01FF5DF8 
 515      04EB
 516 18f6 1846     	    mov r0,r3 
 517 18f8 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 18fc 82EA0202 	    eor r2,r2 
 519 1900 00B5FEF7 	    _CALL gpio_out
 519      4DFF5DF8 
 519      04EB
 520              	// release clock line 
 521 190a 1846     	    mov r0,r3 
 522 190c 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1910 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1914 00B5FEF7 	    _CALL gpio_config
 524      EDFE5DF8 
 524      04EB
 525              	// wait send completed
ARM GAS  forth.s 			page 69


 526              	//  expire after 10 msec 
 527 191e 4FF00A00 	    mov r0,#10
 528 1922 E060     	    str r0,[UP,#CD_TIMER]
 529 1924 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1926 20B1     	    cbz r0, 4f 
 531 1928 94F87A00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 192c 10F0020F 	    tst r0,#KBD_TX
 533 1930 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1932 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1936 00B5FEF7 	    _CALL nvic_enable_irq
 536      99FE5DF8 
 536      04EB
 537 1940 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1944 20F00201 	    bic r1,r0,#KBD_TX
 539 1948 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 540 194c 00F00200 	    and r0,#KBD_TX
 541 1950 48B1     	    cbz r0, 5f
 542 1952 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1954 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1958 1960     	    str r1,[r3,#GPIO_MODER]
 545 195a 80EA0000 	    eor r0,r0 
 546 195e 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1962 6FEA0000 	    mvn r0,r0   
 548 1966 0EBC     	5:  pop {r1,r2,r3}
 549 1968 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 196a 80EA0000 	    eor T0,T0 
 555 196e C4F88C00 	    str T0,[UP,#KBD_QHEAD]
 556 1972 C4F89000 	    str T0,[UP,#KBD_QTAIL]
 557 1976 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 197a 6FF00301 	    mvn T1,#3
 559 197e 00EA0100 	    and T0,T1 
 560 1982 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 561 1986 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1988 A2170000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1994 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1998 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 19a2 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 19a4 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 19ae 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
ARM GAS  forth.s 			page 70


 573 19b8 FE28     	    cmp r0,KBD_CMD_RESEND
 574 19ba EBD0     	    beq 1b 
 575 19bc 4FF4FA70 	    mov T0,#500 
 576 19c0 E060     	    str T0,[UP,#CD_TIMER]
 577 19c2 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 19cc 10B9     	    cbnz T0,3f
 579 19ce E068     	    ldr T0,[UP,#CD_TIMER]
 580 19d0 0028     	    cmp T0,#0 
 581 19d2 F6D1     	    bne 2b 
 582 19d4 47F8046D 	3:  _PUSH 
 583 19d8 0646     	    mov TOS,T0  
 584 19da 01F021B8 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 19de 8C190000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 19ec 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 19f6 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 19fa 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1a04 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1a0e FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1a10 ECD0     	    beq 1b
 598 1a12 FA28     	    cmp T0,#KBD_ACK  
 599 1a14 F6D1     	    bne 2b 
 600 1a16 3046     	2:  mov T0,TOS 
 601 1a18 00F00700 	    and T0,#7 
 602 1a1c 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1a26 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1a30 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1a32 F0D0     	    beq 2b
 606 1a34 FA28     	    cmp T0,#KBD_ACK 
 607 1a36 F6D1     	    bne 3b  
 608 1a38 57F8046B 	    _POP 
 609 1a3c 00F0F0BF 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
ARM GAS  forth.s 			page 71


 615              	**************************/
 616 1a40 E2190000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1a50 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1a54 10F0010F 	    tst T0,#1
 619 1a58 01D1     	    bne 1f 
 620 1a5a 00F0E1BF 	    _NEXT 
 621 1a5e 47F8046D 	1: _PUSH 
 622 1a62 6FF00101 	    mvn T1,#1 
 623 1a66 00EA0100 	    and T0,T1 
 624 1a6a 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 625 1a6e 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1a72 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1a7a 441A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1a88 504700BF 	    _NEST
 635 1a8c 511A0000 	1:  _ADR CAPS_LED  
 636 1a90 AD170000 	    _ADR PS2_QKEY 
 637 1a94 352F0000 	    _ADR QDUP 
 638 1a98 272C0000 	    _QBRAN 1b  
 638      8C1A0000 
 639 1aa0 272A0000 	    _UNNEST 
 640 1aa4 9E160000 	
 640      AC160000 
 640      0C130000 
 640      30140000 
 640      C0130000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
ARM GAS  forth.s 			page 72


  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1ac4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1acc 0346     	    mov r3,r0 
  44 1ace 4FF00401 	    mov r1,#PIN_F_SC 
  45 1ad2 4FF00102 	    mov r2,#OUTPUT_PP
  46 1ad6 00B5FEF7 	    _CALL gpio_config 
  46      0CFE5DF8 
  46      04EB
  47 1ae0 1846     	    mov r0,r3 
  48 1ae2 4FF00401 	    mov r1,#PIN_F_SC  
  49 1ae6 4FF00102 	    MOV r2,#1
  50 1aea 00B5FEF7 	    _CALL gpio_out 
  50      58FE5DF8 
  50      04EB
  51 1af4 1846     	    mov r0,r3 
  52 1af6 4FF00501 	    mov r1,#PIN_SCK  
  53 1afa 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1afe 00B5FEF7 	    _CALL gpio_config 
  54      F8FD5DF8 
  54      04EB
  55 1b08 1846     	    mov r0,r3 
  56 1b0a 4FF00701 	    mov r1,#PIN_MOSI 
  57 1b0e 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1b12 00B5FEF7 	    _CALL gpio_config 
  58      EEFD5DF8 
  58      04EB
  59 1b1c 1846     	    mov r0,r3
  60 1b1e 4FF00601 	    mov r1,#PIN_MISO
  61 1b22 4FF00202 	    mov r2,#INPUT_AFO  
  62 1b26 00B5FEF7 	    _CALL gpio_config
  62      E4FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1b30 4CF6AA40 	    mov r0,#0xCCAA
  65 1b34 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
ARM GAS  forth.s 			page 73


  66 1b36 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1b3e 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1b40 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1b44 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1b46 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1b4e 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1b52 0180     	    strh r1,[r0,#SPI_CR1]
  73 1b54 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1b56 80EA0000 	    eor r0,r0 
  75 1b5a C5F25050 	    movt r0,#0x5550 
  76 1b5e 40EA0100 	    orr r0,r1 
  77 1b62 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1b64 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1b66 7E1A0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1b74 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1b7c 4FF00401 	    mov r1,#PIN_F_SC 
  88 1b80 4FF00002 	    mov r2,#0 
  89 1b84 00B5FEF7 	    _CALL gpio_out 
  89      0BFE5DF8 
  89      04EB
  90 1b8e 00F047BF 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1b92 6A1B0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1ba0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1ba8 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1baa 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1bae FBD1     	    bne 1b 
 102 1bb0 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1bb8 4FF00401 	    mov r1,#PIN_F_SC 
 104 1bbc 4FF00102 	    mov r2,#1 
 105 1bc0 00B5FEF7 	    _CALL gpio_out 
 105      EDFD5DF8 
 105      04EB
 106 1bca 00F029BF 	    _NEXT 
 107              	
ARM GAS  forth.s 			page 74


 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1bce 961B0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1bdc 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1be4 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1be6 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1bea FBD0     	    beq 0b 
 118 1bec 6FF00001 	    mvn T1,#0 
 119 1bf0 0173     	    strb T1,[T0,#SPI_DR]
 120 1bf2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1bf4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1bf8 FBD0     	    beq 1b     
 123              	2:  
 124 1bfa 47F8046D 	    _PUSH 
 125 1bfe 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1c00 00F00EBF 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1c04 D21B0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1c10 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1c18 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1c1a 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1c1e FBD0     	    beq 0b 
 138 1c20 0673     	    strb TOS,[T0,#SPI_DR]
 139 1c22 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1c24 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1c28 FBD0     	    beq 1b 
 142 1c2a 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1c2c 57F8046B 	    _POP 
 144 1c30 00F0F6BE 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1c34 081C0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1c40 504700BF 	    _NEST 
 153 1c44 751B0000 	    _ADR CHIP_SEL 
 154 1c48 E72B0000 	    _DOLIT 4
 154      04000000 
ARM GAS  forth.s 			page 75


 155 1c50 111C0000 	    _ADR WR_BYTE
 156 1c54 A11B0000 	    _ADR CHIP_DSEL
 157 1c58 272A0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1c5c 381C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1c68 504700BF 	    _NEST 
 165 1c6c 751B0000 	    _ADR CHIP_SEL 
 166 1c70 E72B0000 	    _DOLIT 6 
 166      06000000 
 167 1c78 111C0000 	    _ADR WR_BYTE 
 168 1c7c A11B0000 	    _ADR CHIP_DSEL 
 169 1c80 272A0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1c84 601C0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1c90 504700BF 	    _NEST
 177 1c94 751B0000 	    _ADR CHIP_SEL  
 178 1c98 E72B0000 	    _DOLIT sr_cmd 
 178      B81C0000 
 179 1ca0 252E0000 	    _ADR PLUS 
 180 1ca4 8D2C0000 	    _ADR CAT
 181 1ca8 111C0000 	    _ADR WR_BYTE
 182 1cac DD1B0000 	    _ADR RD_BYTE
 183 1cb0 A11B0000 	    _ADR CHIP_DSEL  
 184 1cb4 272A0000 	    _UNNEST 
 185 1cb8 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1cbb 881C0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1cc8 504700BF 	    _NEST 
 193 1ccc 612D0000 	    _ADR DUPP 
 194 1cd0 E72B0000 	    _DOLIT 16
 194      10000000 
 195 1cd8 FD2D0000 	    _ADR RSHIFT 
 196 1cdc 111C0000 	    _ADR WR_BYTE 
 197 1ce0 612D0000 	    _ADR DUPP
 198 1ce4 E72B0000 	    _DOLIT 8 
 198      08000000 
 199 1cec FD2D0000 	    _ADR RSHIFT 
 200 1cf0 111C0000 	    _ADR WR_BYTE 
ARM GAS  forth.s 			page 76


 201 1cf4 111C0000 	    _ADR WR_BYTE 
 202 1cf8 272A0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1cfc BF1C0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1d0c 504700BF 	    _NEST 
 210 1d10 E72B0000 	1:  _DOLIT 0 
 210      00000000 
 211 1d18 911C0000 	    _ADR RD_SR 
 212 1d1c E72B0000 	    _DOLIT 3 
 212      03000000 
 213 1d24 A52D0000 	    _ADR ANDD 
 214 1d28 272C0000 	    _QBRAN 2f
 214      381D0000 
 215 1d30 3B2C0000 	    _BRAN 1b
 215      101D0000 
 216 1d38 272A0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1d3c 001D0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1d4c 504700BF 	    _NEST 
 225 1d50 691C0000 	    _ADR WR_ENBL
 226 1d54 751B0000 	    _ADR CHIP_SEL 
 227 1d58 E72B0000 	    _DOLIT 0x20 
 227      20000000 
 228 1d60 111C0000 	    _ADR WR_BYTE 
 229 1d64 C91C0000 	    _ADR SEND_ADR
 230 1d68 A11B0000 	    _ADR CHIP_DSEL 
 231 1d6c 0D1D0000 	    _ADR WAIT_DONE 
 232 1d70 272A0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1d74 401D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1d84 504700BF 	    _NEST 
 240 1d88 691C0000 	    _ADR WR_ENBL 
 241 1d8c 751B0000 	    _ADR CHIP_SEL
 242 1d90 E72B0000 	    _DOLIT 0x60
 242      60000000 
ARM GAS  forth.s 			page 77


 243 1d98 E72B0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1da0 111C0000 	    _ADR WR_BYTE 
 245 1da4 111C0000 	    _ADR WR_BYTE 
 246 1da8 A11B0000 	    _ADR CHIP_DSEL 
 247 1dac 0D1D0000 	    _ADR WAIT_DONE
 248 1db0 272A0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1db4 781D0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1dc0 504700BF 	    _NEST
 258 1dc4 751B0000 	    _ADR CHIP_SEL 
 259 1dc8 E72B0000 	    _DOLIT 3 
 259      03000000 
 260 1dd0 111C0000 	    _ADR WR_BYTE 
 261 1dd4 C91C0000 	    _ADR SEND_ADR
 262 1dd8 DD2C0000 	    _ADR TOR   
 263 1ddc 3B2C0000 	    _BRAN 2f
 263      F41D0000 
 264 1de4 DD1B0000 	1:  _ADR RD_BYTE
 265 1de8 852D0000 	    _ADR OVER 
 266 1dec 792C0000 	    _ADR CSTOR
 267 1df0 812E0000 	    _ADR ONEP 
 268 1df4 092C0000 	2:  _DONXT 1b
 268      E41D0000 
 269 1dfc 512D0000 	    _ADR DROP 
 270 1e00 A11B0000 	    _ADR CHIP_DSEL 
 271 1e04 272A0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1e08 B81D0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1e14 504700BF 	    _NEST 
 280 1e18 691C0000 	    _ADR WR_ENBL
 281 1e1c 751B0000 	    _ADR CHIP_SEL
 282 1e20 E72B0000 	    _DOLIT 2 
 282      02000000 
 283 1e28 111C0000 	    _ADR WR_BYTE 
 284 1e2c C91C0000 	    _ADR SEND_ADR
 285 1e30 DD2C0000 	    _ADR TOR
 286 1e34 3B2C0000 	    _BRAN 2f 
 286      541E0000 
 287 1e3c 612D0000 	1:  _ADR DUPP 
 288 1e40 8D2C0000 	    _ADR CAT 
 289 1e44 612D0000 	    _ADR DUPP 
ARM GAS  forth.s 			page 78


 290 1e48 9D3F0000 	    _ADR HDOT
 291 1e4c 111C0000 	    _ADR WR_BYTE 
 292 1e50 812E0000 	    _ADR ONEP
 293 1e54 092C0000 	2:  _DONXT 1b 
 293      3C1E0000 
 294 1e5c 512D0000 	    _ADR DROP
 295 1e60 A11B0000 	    _ADR CHIP_DSEL
 296 1e64 0D1D0000 	    _ADR WAIT_DONE 
 297 1e68 272A0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1e6c 0C1E0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1e7c 504700BF 	    _NEST 
 318              	    
 319 1e80 272A0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1e84 701E0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1e94 504700BF 	    _NEST 
 327              	
 328 1e98 272A0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1e9c 881E0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1ea4 504700BF 	    _NEST 
 336              	
 337 1ea8 272A0000 	    _UNNEST 
 338              	
ARM GAS  forth.s 			page 79


 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1eac A01E0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1eb8 504700BF 	    _NEST 
 345              	
 346 1ebc 272A0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1ec0 B01E0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1ecc 504700BF 	    _NEST 
 354              	
 355 1ed0 272A0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1ed4 5F708930 	     .word  0x3089705F // 1e-9
ARM GAS  forth.s 			page 80


  34 1ed8 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1edc 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1ee0 BD378635 	     .word  0x358637BD // 1e-6 
  37 1ee4 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1ee8 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1eec 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1ef0 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1ef4 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1ef8 0000803F 	     .word  0x3F800000 // 1.0 
  44 1efc 00002041 	     .word  0x41200000 // 1e1 
  45 1f00 0000C842 	     .word  0x42C80000 // 1e2 
  46 1f04 00007A44 	     .word  0x447A0000 // 1e3 
  47 1f08 00401C46 	     .word  0x461C4000 // 1e4 
  48 1f0c 0050C347 	     .word  0x47C35000 // 1e5 
  49 1f10 00247449 	     .word  0x49742400 // 1e6 
  50 1f14 8096184B 	     .word  0x4B189680 // 1e7
  51 1f18 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1f1c 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10 
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1f20 C41E0000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 1f2c 4FEA8606 	    lsl TOS,#2  
  61 1f30 E648     	    ldr t0, =p10 
  62 1f32 0644     	    add TOS,TOS,T0
  63 1f34 3668     	    ldr TOS,[TOS]  
  64 1f36 00F073BD 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1f3a DFF89403 	   ldr.w r0,=CPACR 
  73 1f3e 0168     	   ldr R1,[R0]
  74 1f40 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1f44 0160     	   str r1,[r0]
  76 1f46 BFF34F8F 	   dsb 
  77 1f4a E248     	   ldr r0,=FPC_BASE_ADR
  78 1f4c 81EA0101 	   eor r1,r1 
  79 1f50 0160     	   str r1,[r0,FPCCR]
  80 1f52 BFF34F8F 	   dsb
  81 1f56 4FF05100 	   mov r0,#FPU_IRQ 
  82 1f5a 00B5FEF7 	   _CALL nvic_enable_irq
  82      87FB5DF8 
  82      04EB
  83 1f64 7047     	   _RET
  84              	
  85              	/***************************
  86              	   FPSCR ( -- u )
ARM GAS  forth.s 			page 81


  87              	   stack fpu SCR register 
  88              	***************************/
  89 1f66 241F0000 	   _HEADER FPSCR,5,"FPSCR"
  89      05465053 
  89      4352
  90 1f70 47F8046D 	   _PUSH 
  91 1f74 F1EE106A 	   vmrs TOS,FPSCR
  92 1f78 BFF34F8F 	   dsb  
  93 1f7c 00F050BD 	   _NEXT 
  94              	
  95              	
  96              	/**************************
  97              	   CLR_FPSCR ( mask -- )
  98              	   clear FPSCR bits 
  99              	input:
 100              	    mask  and mask 
 101              	************************/
 102 1f80 6A1F0000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
 102      09434C52 
 102      5F465053 
 102      435200BF 
 103 1f90 F1EE100A 	   vmrs T0,FPSCR 
 104 1f94 BFF34F8F 	   dsb 
 105 1f98 06EA0006 	   and TOS,T0  
 106 1f9c E1EE106A 	   vmsr FPSCR,TOS 
 107 1fa0 BFF34F8F 	   dsb 
 108 1fa4 00F03CBD 	   _NEXT 
 109              	
 110              	
 111              	/*******************************
 112              	    >S0 variable ( f# --  )
 113              	    send float to fpu S0 
 114              	**********************************/
 115 1fa8 841F0000 	    _HEADER TOS0,3,">S0"
 115      033E5330 
 116 1fb0 00EE106A 	    vmov.f32 S0,TOS 
 117 1fb4 57F8046B 	    _POP 
 118 1fb8 00F032BD 	    _NEXT  
 119              	
 120              	/*******************************
 121              	    >S1 variable ( f# --  )
 122              	    send float to fpu S1 
 123              	**********************************/
 124 1fbc AC1F0000 	    _HEADER TOS1,3,">S1"
 124      033E5331 
 125 1fc4 00EE906A 	    vmov.f32 S1,TOS 
 126 1fc8 57F8046B 	    _POP 
 127 1fcc 00F028BD 	    _NEXT  
 128              	
 129              	/*******************************
 130              	    >S2 variable ( f# --  )
 131              	    send float to fpu S2 
 132              	**********************************/
 133 1fd0 C01F0000 	    _HEADER TOS2,3,">S2"
 133      033E5332 
 134 1fd8 01EE106A 	    vmov.f32 S2,TOS 
 135 1fdc 57F8046B 	    _POP 
ARM GAS  forth.s 			page 82


 136 1fe0 00F01EBD 	    _NEXT  
 137              	
 138              	/*******************************
 139              	    S0>  ( -- f )
 140              	    push fpu S0 
 141              	*******************************/
 142 1fe4 D41F0000 	    _HEADER S0FROM,3,"S0>"
 142      0353303E 
 143 1fec 47F8046D 	    _PUSH 
 144 1ff0 10EE106A 	    vmov.f32 TOS,S0 
 145 1ff4 00F014BD 	    _NEXT 
 146              	
 147              	/*******************************
 148              	    S1>  ( -- f )
 149              	    push fpu S1 
 150              	*******************************/
 151 1ff8 E81F0000 	    _HEADER S1FROM,3,"S1>"
 151      0353313E 
 152 2000 47F8046D 	    _PUSH 
 153 2004 10EE906A 	    vmov.f32 TOS,S1 
 154 2008 00F00ABD 	    _NEXT 
 155              	
 156              	/*******************************
 157              	    S2>  ( -- f )
 158              	    push fpu S2 
 159              	*******************************/
 160 200c FC1F0000 	    _HEADER S2FROM,3,"S2>"
 160      0353323E 
 161 2014 47F8046D 	    _PUSH 
 162 2018 11EE106A 	    vmov.f32 TOS,S2 
 163 201c 00F000BD 	    _NEXT 
 164              	
 165              	
 166              	/*******************************
 167              	    F>S ( f -- n )
 168              	    convert float to integer 
 169              	    round to nearest integer 
 170              	*******************************/
 171 2020 10200000 	    _HEADER FTOS,3,"F>S"
 171      03463E53 
 172 2028 00EE106A 	    vmov.f32 S0,TOS
 173 202c BDEE400A 	    vcvtr.s32.f32 s0,s0 
 174 2030 10EE106A 	    vmov.f32 TOS,s0 
 175 2034 00F0F4BC 	    _NEXT 
 176              	    
 177              	/*******************************
 178              	    TRUNC (f - n )
 179              	    truncate float to integer 
 180              	*******************************/
 181 2038 24200000 	    _HEADER TRUNC,5,"TRUNC"
 181      05545255 
 181      4E4300BF 
 182 2044 00EE106A 	    vmov.f32 S0,TOS 
 183 2048 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 184 204c 10EE106A 	    vmov.f32 TOS,S0 
 185 2050 00F0E6BC 	    _NEXT 
 186              	
ARM GAS  forth.s 			page 83


 187              	/*******************************
 188              	    S>F ( s -- f )
 189              	    convert integer to float 
 190              	*******************************/
 191 2054 3C200000 	    _HEADER STOF,3,"S>F" 
 191      03533E46 
 192 205c 00EE106A 	    vmov.f32 S0,TOS
 193 2060 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 194 2064 10EE106A 	    vmov.f32 TOS,s0 
 195 2068 00F0DABC 	   _NEXT 
 196              	
 197              	/*******************************
 198              	    F+ ( f1 f2 -- f1+f2 )
 199              	    add 2 floats 
 200              	*******************************/
 201 206c 58200000 	    _HEADER FPLUS,2,"F+"
 201      02462B00 
 202 2074 00EE106A 	   vmov.f32 s0,TOS 
 203 2078 57F8046B 	   _POP 
 204 207c 00EE906A 	   vmov.f32 s1,TOS 
 205 2080 30EE200A 	   vadd.f32 s0,s0,s1 
 206 2084 10EE106A 	   vmov.f32 TOS,s0
 207 2088 00F0CABC 	   _NEXT 
 208              	
 209              	   
 210              	/*******************************
 211              	    F- ( f1 f2 -- f1-f2 )
 212              	    substract 2 float 
 213              	*******************************/
 214 208c 70200000 	    _HEADER FSUBB,2,"F-"
 214      02462D00 
 215 2094 00EE106A 	   vmov.f32 s0,TOS 
 216 2098 57F8046B 	   _POP 
 217 209c 00EE906A 	   vmov.f32 s1,TOS 
 218 20a0 30EEC00A 	   vsub.f32 s0,s1,s0 
 219 20a4 10EE106A 	   vmov.f32 TOS,s0
 220 20a8 00F0BABC 	   _NEXT 
 221              	
 222              	
 223              	
 224              	/*******************************
 225              	    F* ( f1 f2 -- f1*f2 )
 226              	    multiply 2 float 
 227              	******************************/
 228 20ac 90200000 	   _HEADER FSTAR,2,"F*"
 228      02462A00 
 229 20b4 00EE106A 	   vmov.f32 s0,TOS 
 230 20b8 57F8046B 	   _POP 
 231 20bc 00EE906A 	   vmov.f32 s1,TOS 
 232 20c0 20EE800A 	   vmul.f32 s0,s1,s0 
 233 20c4 10EE106A 	   vmov.f32 TOS,s0
 234 20c8 00F0AABC 	   _NEXT 
 235              	
 236              	
 237              	/*******************************
 238              	    F/ ( f1 f2 -- f1/f2 )
 239              	    divide f1 by f2 
ARM GAS  forth.s 			page 84


 240              	*******************************/
 241 20cc B0200000 	    _HEADER FSLH,2,"F/"
 241      02462F00 
 242 20d4 00EE106A 	   vmov.f32 s0,TOS 
 243 20d8 57F8046B 	   _POP 
 244 20dc 00EE906A 	   vmov.f32 s1,TOS 
 245 20e0 80EE800A 	   vdiv.f32 s0,s1,s0 
 246 20e4 10EE106A 	   vmov.f32 TOS,s0
 247 20e8 00F09ABC 	   _NEXT 
 248              	
 249              	
 250              	/********************************
 251              	    FNEGATE ( f -- -f )
 252              	    negate floating point 
 253              	********************************/
 254 20ec D0200000 	    _HEADER FNEG,7,"FNEGATE"
 254      07464E45 
 254      47415445 
 255 20f8 00EE106A 	    vmov.f32 s0,TOS 
 256 20fc B1EE400A 	    vneg.f32 S0,S0 
 257 2100 10EE106A 	    vmov.f32 TOS,S0    
 258 2104 00F08CBC 	    _NEXT 
 259              	
 260              	/**********************************
 261              	    FABS ( f -- f )
 262              	    return absolute value 
 263              	******************************/
 264 2108 F0200000 	    _HEADER FABS,4,"FABS"
 264      04464142 
 264      530000BF 
 265 2114 80EA0000 	    eor T0,T0 
 266 2118 6FEA0000 	    mvn T0,T0 
 267 211c 4FEA5000 	    lsr T0,#1 
 268 2120 06EA0006 	    and TOS,T0 
 269 2124 00F07CBC 	    _NEXT 
 270              	
 271              	
 272              	/*****************************
 273              	     SQRT  ( f -- f )
 274              	     compute square root 
 275              	*****************************/
 276 2128 0C210000 	     _HEADER SQRT,4,"SQRT"
 276      04535152 
 276      540000BF 
 277 2134 00EE106A 	     vmov.f32 s0,TOS 
 278 2138 B1EEC00A 	     vsqrt.f32 s0,s0 
 279 213c 10EE106A 	     vmov.f32 TOS,s0 
 280 2140 00F06EBC 	     _NEXT 
 281              	
 282              	
 283              	/*****************************
 284              	   F0<   ( f -- flag )
 285              	*****************************/
 286 2144 2C210000 	    _HEADER FZLESS,3,"F0<"
 286      0346303C 
 287 214c 00EE106A 	    vmov.f32 s0,TOS 
 288 2150 B5EE400A 	    vcmp.f32 s0, #0.0 
ARM GAS  forth.s 			page 85


 289 2154 F1EE106A 	    vmrs TOS,FPSCR
 290 2158 BFF34F8F 	    dsb  
 291 215c 4FEAE676 	    asr TOS,#31   
 292 2160 00F05EBC 	    _NEXT 
 293              	
 294              	/*****************************
 295              	    F> ( f#1 f#2 -- flag )
 296              	    f#1>f#2 ? 
 297              	*****************************/
 298 2164 48210000 	    _HEADER FGREAT,2,"F>"
 298      02463E00 
 299 216c 504700BF 	    _NEST 
 300 2170 95200000 	    _ADR FSUBB
 301 2174 4D210000 	    _ADR FZLESS
 302 2178 31300000 	    _ADR INVER     
 303 217c 272A0000 	    _UNNEST 
 304              	
 305              	/*****************************
 306              	    F< ( f#1 f#2 -- flag )
 307              	    f#1<f#2 ? 
 308              	*****************************/
 309 2180 68210000 	    _HEADER FLESS,2,"F<"
 309      02463C00 
 310 2188 504700BF 	    _NEST 
 311 218c 95200000 	    _ADR FSUBB 
 312 2190 4D210000 	    _ADR FZLESS
 313 2194 272A0000 	    _UNNEST 
 314              	
 315              	
 316              	/*******************************
 317              	    FMIN ( f#1 f#2 -- smallest )
 318              	********************************/
 319 2198 84210000 	    _HEADER FMIN,4,"FMIN"
 319      04464D49 
 319      4E0000BF 
 320 21a4 504700BF 	    _NEST 
 321 21a8 852D0000 	   _ADR OVER 
 322 21ac 852D0000 	   _ADR OVER 
 323 21b0 6D210000 	   _ADR FGREAT 
 324 21b4 272C0000 	   _QBRAN 1f 
 324      C0210000 
 325 21bc 712D0000 	   _ADR SWAP  
 326 21c0 512D0000 	1: _ADR DROP 
 327 21c4 272A0000 	    _UNNEST 
 328              	
 329              	/*******************************
 330              	    FMAX (f#1 f#2 -- largest )
 331              	*******************************/
 332 21c8 9C210000 	    _HEADER FMAX,4,"FMAX"
 332      04464D41 
 332      580000BF 
 333 21d4 504700BF 	    _NEST 
 334 21d8 852D0000 	    _ADR OVER 
 335 21dc 852D0000 	    _ADR OVER 
 336 21e0 89210000 	    _ADR FLESS 
 337 21e4 272C0000 	    _QBRAN 1f
 337      F0210000 
ARM GAS  forth.s 			page 86


 338 21ec 712D0000 	    _ADR SWAP   
 339 21f0 512D0000 	1:  _ADR DROP 
 340 21f4 272A0000 	    _UNNEST 
 341              	
 342              	
 343              	/*******************************
 344              	    FSIGN ( f -- n )
 345              	    return float sign 
 346              	*******************************/
 347 21f8 CC210000 	    _HEADER FSIGN,5,"FSIGN"
 347      05465349 
 347      474E00BF 
 348 2204 80EA0000 	    eor T0,T0 
 349 2208 C8F20000 	    movt T0,#0X8000
 350 220c 06EA0006 	    and TOS,T0
 351 2210 4FEAE676 	    asr TOS,#31  
 352 2214 00F004BC 	    _NEXT 
 353              	
 354              	/*******************************
 355              	    FEXP ( f --  n )
 356              	    return binary exponent of f 
 357              	*******************************/
 358 2218 FC210000 	    _HEADER FEXP,4,"FEXP"
 358      04464558 
 358      500000BF 
 359 2224 4FF00000 	    _MOV32 T0,0X7F800000
 359      C7F68070 
 360 222c 06EA0006 	    and TOS,T0 
 361 2230 4FEAD656 	    lsr TOS,#23
 362 2234 A6F17F06 	    sub TOS,#127 
 363 2238 F2E3     	    _NEXT  
 364              	
 365              	/*******************************
 366              	   FMANT ( f -- n )
 367              	   return float mantisssa 
 368              	********************************/
 369 223a 1C220000 	    _HEADER FMANT,5,"FMANT"
 369      05464D41 
 369      4E54
 370 2244 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 370      C0F27F00 
 371 224c 06EA0006 	    AND TOS,T0 
 372 2250 80EA0000 	    EOR T0,T0 
 373 2254 C0F28000 	    MOVT T0,0x80
 374 2258 46EA0006 	    ORR TOS,T0 
 375 225c E0E3     	    _NEXT 
 376              	
 377              	
 378              	/*******************************
 379              	    PI  ( -- f )
 380              	    return 3.14159265
 381              	*******************************/
 382 225e 3E220000 	    _HEADER PI,2,"PI"
 382      02504900 
 382      00BF
 383 2268 47F8046D 	    _PUSH 
 384 226c 40F6DB76 	    _MOV32 TOS, 0x40490FDB
ARM GAS  forth.s 			page 87


 384      C4F24906 
 385 2274 D4E3     	    _NEXT
 386              	 
 387              	/********************************
 388              	    LOG2 ( -- f)
 389              	    return log10(2)
 390              	*******************************/
 391 2276 62220000 	    _HEADER LOG2,4,"LOG2"
 391      044C4F47 
 391      3200
 392 2280 47F8046D 	    _PUSH 
 393 2284 42F29A06 	    _MOV32 TOS,0x3E9A209A
 393      C3F69A66 
 394 228c C8E3     	    _NEXT 
 395              	
 396              	/********************************
 397              	    LOG2>10 ( f -- exp )
 398              	    convert float base2 exponent 
 399              	    to base10
 400              	********************************/
 401 228e 7A220000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 401      074C4F47 
 401      323E3130 
 401      00BF
 402 229c 504700BF 	    _NEST
 403 22a0 25220000 	    _ADR FEXP 
 404 22a4 5D200000 	    _ADR STOF 
 405 22a8 81220000 	    _ADR LOG2
 406 22ac B5200000 	    _ADR FSTAR 
 407 22b0 45200000 	    _ADR TRUNC  
 408 22b4 612D0000 	    _ADR DUPP 
 409 22b8 952D0000 	    _ADR ZLESS 
 410 22bc 272C0000 	    _QBRAN 1f 
 410      C8220000 
 411 22c4 912E0000 	    _ADR ONEM
 412 22c8 272A0000 	1:  _UNNEST 
 413 22cc F81E0000 	
 413      88ED00E0 
 413      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
ARM GAS  forth.s 			page 88


  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 22d8 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 22dc 0000C842 	            .word  0x42C80000  // 100.0
  31 22e0 00401C46 	            .word  0x461C4000  // 10000.0 
  32 22e4 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 22e8 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 22ec AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 22f0 504700BF 	    _NEST 
  45 22f4 E72B0000 	    _DOLIT 2 
  45      02000000 
  46 22fc 152E0000 	    _ADR LSHIFT 
  47 2300 E72B0000 	    _DOLIT p10p2n 
  47      D8220000 
  48 2308 252E0000 	    _ADR PLUS 
  49 230c 6D2C0000 	    _ADR AT 
  50 2310 272A0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 2314 504700BF 	    _NEST 
  59 2318 E72B0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 2320 E72B0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2328 C1360000 	    _ADR PICK  // idx f e 1 idx 
  62 232c 152E0000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2330 A52D0000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2334 272A0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
ARM GAS  forth.s 			page 89


  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2338 504700BF 	    _NEST 
  78 233c DD2C0000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2340 C92C0000 	    _ADR RAT   // idx f e R: e 
  81 2344 15230000 	    _ADR bit_state // idx f state 
  82 2348 272C0000 	    _QBRAN 1f   // bit reset 
  82      5C230000 
  83 2350 852D0000 	    _ADR OVER 
  84 2354 F1220000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2358 D5200000 	    _ADR FSLH  // idx f R: e 
  86 235c 712D0000 	1:  _ADR SWAP  // f idx R: e 
  87 2360 812E0000 	    _ADR ONEP   // F idx++ R: e 
  88 2364 712D0000 	    _ADR SWAP   // idx f  
  89 2368 852D0000 	    _ADR OVER   // idx f idx 
  90 236c E72B0000 	    _DOLIT 5 
  90      05000000 
  91 2374 2D310000 	    _ADR GREAT  // idx > 5
  92 2378 272C0000 	    _QBRAN div_loop 
  92      40230000 
  93 2380 992C0000 	    _ADR RFROM 
  94 2384 512D0000 	    _ADR DROP 
  95 2388 272A0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 238c 504700BF 	    _NEST 
 109 2390 DD2C0000 	    _ADR TOR 
 110              	mult_loop:
 111 2394 C92C0000 	    _ADR RAT   // idx f e R: e 
 112 2398 15230000 	    _ADR bit_state // idx f state 
 113 239c 272C0000 	    _QBRAN 1f   // bit reset 
 113      B0230000 
 114 23a4 852D0000 	    _ADR OVER  
 115 23a8 F1220000 	    _ADR p10p2at // idx f pwr10 R: e
 116 23ac B5200000 	    _ADR FSTAR  // idx f R: e 
 117 23b0 712D0000 	1:  _ADR SWAP  // f idx R: e 
 118 23b4 812E0000 	    _ADR ONEP   // F idx++ R: e 
 119 23b8 712D0000 	    _ADR SWAP   // idx f  
 120 23bc 852D0000 	    _ADR OVER   // idx f idx 
 121 23c0 E72B0000 	    _DOLIT 5 
 121      05000000 
 122 23c8 2D310000 	    _ADR GREAT  // idx > 5
 123 23cc 272C0000 	    _QBRAN mult_loop 
ARM GAS  forth.s 			page 90


 123      94230000 
 124 23d4 992C0000 	    _ADR RFROM 
 125 23d8 512D0000 	    _ADR DROP 
 126 23dc 272A0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 23e0 504700BF 	    _NEST 
 136 23e4 852D0000 	    _ADR OVER  // e f e 
 137 23e8 272C0000 	    _QBRAN 3f // exp==0,  done 
 137      24240000 
 138 23f0 E72B0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 23f8 5D2F0000 	    _ADR NROT // idx e f
 140 23fc 712D0000 	    _ADR SWAP // idx f e   
 141 2400 612D0000 	    _ADR DUPP  // idx f e e 
 142 2404 952D0000 	    _ADR ZLESS
 143 2408 272C0000 	    _QBRAN pos_exp 
 143      20240000 
 144              	// negative exponent 
 145 2410 55300000 	    _ADR ABSS 
 146 2414 39230000 	    _ADR mant_div 
 147 2418 3B2C0000 	    _BRAN 3f 
 147      24240000 
 148              	pos_exp: // positive exponent 
 149 2420 8D230000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2424 712D0000 	3:  _ADR SWAP 
 152 2428 512D0000 	    _ADR DROP 
 153 242c 272A0000 	    _UNNEST 
 154              	
 155              	
 156              	/*****************************
 157              	   decimals ( a -- a+ fdec | a 0.0 )
 158              	   parse digits after '.' 
 159              	   convert to float 
 160              	*****************************/
 161              	decimals:
 162 2430 504700BF 	    _NEST 
 163 2434 E72B0000 	    _DOLIT 0
 163      00000000 
 164 243c 612D0000 	    _ADR DUPP
 165 2440 492F0000 	    _ADR ROT
 166 2444 913A0000 	    _ADR PARSE_DIGITS // d n a+ 
 167 2448 5D2F0000 	    _ADR NROT  // a d n 
 168 244c 5D200000 	    _ADR STOF  // convert integer n to float 
 169 2450 712D0000 	    _ADR SWAP
 170 2454 E72B0000 	    _DOLIT 9 
 170      09000000 
 171 245c 59310000 	    _ADR MIN 
 172 2460 2D1F0000 	    _ADR PWR10 
 173 2464 D5200000 	    _ADR FSLH 
ARM GAS  forth.s 			page 91


 174 2468 272A0000 	    _UNNEST 
 175              	
 176              	
 177              	/************************************
 178              	   exponent ( a -- exp a+ )
 179              	   parse float exponent 
 180              	************************************/
 181              	exponent: 
 182 246c 504700BF 	    _NEST 
 183 2470 4B3B0000 	    _ADR NEGQ 
 184 2474 DD2C0000 	    _ADR TOR 
 185 2478 E72B0000 	    _DOLIT 0 
 185      00000000 
 186 2480 612D0000 	    _ADR DUPP 
 187 2484 492F0000 	    _ADR ROT 
 188 2488 913A0000 	    _ADR PARSE_DIGITS // d n a  
 189 248c 5D2F0000 	    _ADR NROT 
 190 2490 712D0000 	    _ADR SWAP 
 191 2494 512D0000 	    _ADR DROP 
 192 2498 992C0000 	    _ADR RFROM 
 193 249c 272C0000 	    _QBRAN 1f 
 193      A8240000 
 194 24a4 45300000 	    _ADR NEGAT 
 195 24a8 712D0000 	1:  _ADR SWAP 
 196 24ac 272A0000 	    _UNNEST  // -- exp a+  
 197              	
 198              	
 199              	/**********************************
 200              	    FLOAT? ( a -- f# -2 | a 0 )
 201              	    parse float number 
 202              	    return a 0 if not float 
 203              	**********************************/
 204 24b0 92220000 	    _HEADER FLOATQ,6,"FLOAT?"
 204      06464C4F 
 204      41543F00 
 205 24bc 504700BF 	    _NEST
 206              	    // always use base 10 
 207              	    // hexadecimal float not accepted 
 208 24c0 55320000 	    _ADR BASE 
 209 24c4 6D2C0000 	    _ADR AT 
 210 24c8 DD2C0000 	    _ADR TOR 
 211              	    // use decimal base  
 212 24cc 113A0000 	    _ADR DECIM 
 213 24d0 E72B0000 		_DOLIT	0      // failed flag   
 213      00000000 
 214 24d8 852D0000 		_ADR	OVER   // a 0 a     R: base
 215 24dc B5310000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 216 24e0 512D0000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 217              	// check for '-'|'+' save sign on R: 
 218 24e4 4B3B0000 	    _ADR NEGQ 
 219 24e8 DD2C0000 	    _ADR   TOR // -- ... a  R: base sign 
 220              	// if next char is digit parse integer part 
 221 24ec 612D0000 	    _ADR DUPP 
 222 24f0 8D2C0000 	    _ADR CAT 
 223 24f4 E72B0000 	    _DOLIT 10 
 223      0A000000 
 224 24fc 353A0000 	    _ADR DIGTQ // u t|f 
ARM GAS  forth.s 			page 92


 225 2500 712D0000 	    _ADR SWAP 
 226 2504 512D0000 	    _ADR DROP  // drop u 
 227 2508 272C0000 	    _QBRAN must_be_dot 
 227      5C250000 
 228              	// get integer part     
 229 2510 E72B0000 	    _DOLIT 0 
 229      00000000 
 230 2518 612D0000 	    _ADR DUPP
 231 251c 492F0000 	    _ADR ROT // a 0 0 0 a  
 232 2520 913A0000 	    _ADR PARSE_DIGITS // a 0 d n a 
 233 2524 5D2F0000 	    _ADR NROT // ... a d n 
 234 2528 5D200000 	    _ADR STOF  // convert n to float 
 235 252c DD2C0000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 236 2530 512D0000 	    _ADR DROP // d not needed
 237              	// if next char is 'E' get exponent 
 238 2534 E72B0000 	    _DOLIT 'E' 
 238      45000000 
 239 253c 313B0000 	    _ADR CHARQ 
 240 2540 272C0000 	    _QBRAN 1f // next is decimal fraction  
 240      68250000 
 241 2548 E72B0000 	    _DOLIT fzero // no fraction 
 241      00000000 
 242 2550 DD2C0000 	    _ADR TOR  // R: base sign fint 0.0
 243 2554 3B2C0000 	    _BRAN 3f // get exponent   
 243      C4250000 
 244              	// no integer part, next character must be '.' 
 245              	must_be_dot: 
 246 255c E72B0000 	    _DOLIT fzero // integer part 0.0 
 246      00000000 
 247 2564 DD2C0000 	    _ADR TOR  // R: base sign fint 
 248 2568 E72B0000 	1:  _DOLIT '.' 
 248      2E000000 
 249 2570 313B0000 	    _ADR CHARQ 
 250 2574 272C0000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 250      34260000 
 251 257c 31240000 	    _ADR decimals // -- a 0 a fdec 
 252 2580 DD2C0000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 253              	// if next char == 'E' there is an exponent 
 254              	// else no exponent, float completed 
 255 2584 E72B0000 	    _DOLIT 'E' 
 255      45000000 
 256 258c 313B0000 	    _ADR CHARQ 
 257 2590 272C0000 	    _QBRAN 1f
 257      A0250000 
 258 2598 3B2C0000 	    _BRAN 3f 
 258      C4250000 
 259              	// no exponent, must be end of string 
 260 25a0 8D2C0000 	1:   _ADR CAT 
 261 25a4 272C0000 	    _QBRAN 1f 
 261      B4250000 
 262 25ac 3B2C0000 	    _BRAN error2 // error not end of string 
 262      48260000 
 263 25b4 DD2C0000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 264 25b8 512D0000 	    _ADR DROP 
 265 25bc 3B2C0000 	    _BRAN build_float 
 265      FC250000 
 266              	3: // get exponent 
ARM GAS  forth.s 			page 93


 267 25c4 6D240000 	    _ADR exponent // a 0 exp a+ 
 268              	// must be end of string 
 269 25c8 8D2C0000 	    _ADR CAT 
 270 25cc 272C0000 	    _QBRAN 4f
 270      DC250000 
 271 25d4 3B2C0000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 271      48260000 
 272 25dc DD2C0000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 273 25e0 712F0000 	    _ADR DDROP 
 274 25e4 3B2C0000 	    _BRAN build_float     
 274      FC250000 
 275              	5: // no exponent 
 276 25ec E72B0000 	    _DOLIT 0 
 276      00000000 
 277 25f4 DD2C0000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 278 25f8 512D0000 	    _ADR DROP 
 279              	build_float: // a 0 R: base sign fint fdec exp 
 280 25fc 992C0000 	    _ADR RFROM 
 281 2600 AD2C0000 	    _ADR DRFROM 
 282 2604 75200000 	    _ADR FPLUS 
 283 2608 E1230000 	    _ADR exp_adjust
 284 260c 992C0000 	    _ADR RFROM 
 285 2610 272C0000 	    _QBRAN 1f 
 285      24260000 
 286 2618 E72B0000 	    _DOLIT fminus1
 286      000080BF 
 287 2620 B5200000 	    _ADR FSTAR 
 288 2624 E72B0000 	1:  _DOLIT -2 
 288      FEFFFFFF 
 289 262c 3B2C0000 	    _BRAN restore_base  
 289      58260000 
 290              	error1: // a 0 a R: base sign fint 
 291 2634 AD2C0000 	    _ADR DRFROM 
 292 2638 712F0000 	    _ADR DDROP
 293 263c 512D0000 	    _ADR DROP  
 294 2640 3B2C0000 	    _BRAN restore_base  
 294      58260000 
 295              	error2: // a 0 a R: base sign fint fdec  
 296 2648 AD2C0000 	    _ADR DRFROM 
 297 264c 712F0000 	    _ADR DDROP  // a 0 a R: base sign
 298 2650 992C0000 	    _ADR RFROM  // a 0 a sign R: base  
 299 2654 712F0000 	    _ADR DDROP  
 300              	restore_base: 
 301 2658 992C0000 	    _ADR RFROM 
 302 265c 55320000 	    _ADR BASE 
 303 2660 592C0000 	    _ADR STORE 
 304 2664 272A0000 	    _UNNEST 
 305              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
ARM GAS  forth.s 			page 94


  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 2668 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 266c CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2670 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2674 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2678 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 267c ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2680 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2684 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2688 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 268c B4240000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 2698 504700BF 	    _NEST
  50 269c E72B0000 	    _DOLIT 1  
  50      01000000 
  51 26a4 45310000 	    _ADR MAX  
  52 26a8 E72B0000 	    _DOLIT 8
  52      08000000 
  53 26b0 59310000 	    _ADR MIN 
  54 26b4 E72B0000 	    _DOLIT 2 
  54      02000000 
  55 26bc 152E0000 	    _ADR LSHIFT 
  56 26c0 E72B0000 	    _DOLIT rounding 
  56      68260000 
  57 26c8 252E0000 	    _ADR PLUS 
  58 26cc 6D2C0000 	    _ADR AT   
  59 26d0 75200000 	    _ADR FPLUS 
  60 26d4 272A0000 	    _UNNEST 
ARM GAS  forth.s 			page 95


  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 26d8 90260000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 26e0 57F8040B 	    ldr T0,[DSP],#4
  69 26e4 3070     	    strb T0,[TOS]  
  70 26e6 06F10106 	    add TOS,#1
  71 26ea 99E1     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 26ec 504700BF 	    _NEST 
  81 26f0 DD2C0000 	    _ADR TOR  // >R ( i r: b )
  82 26f4 75340000 	    _ADR STOD // ( dbl r: b )
  83 26f8 612D0000 	    _ADR DUPP // ( dbl i r: b )
  84 26fc DD2C0000 	    _ADR TOR  // ( dbl r: b sign )
  85 2700 CD2F0000 	    _ADR DABS 
  86 2704 B1380000 	    _ADR BDIGS 
  87 2708 1D390000 	    _ADR DIGS 
  88 270c 992C0000 	    _ADR RFROM 
  89 2710 51390000 	    _ADR SIGN 
  90 2714 79390000 	    _ADR EDIGS // ( -- p u )
  91 2718 612D0000 	    _ADR DUPP  
  92 271c 5D2F0000 	    _ADR NROT // -rot ( -- u p u )
  93 2720 C92C0000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2724 712D0000 	    _ADR SWAP // ( -- u p b u )
  95 2728 59370000 	    _ADR CMOVE // ( -- u ) 
  96 272c 612D0000 	    _ADR DUPP  // ( -- u u )
  97 2730 992C0000 	    _ADR RFROM // ( -- u u b )
  98 2734 252E0000 	    _ADR PLUS  // ( -- u b+ )
  99 2738 712D0000 	    _ADR SWAP  // ( -- b+ u )
 100 273c 272A0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	\ SCALEUP ( f1 -- m f2 ) 
 105              	\ multiply fraction until 
 106              	\ f1 >= 0.1
 107              	\ input: 
 108              	\   f1  float
 109              	\ output:
 110              	\   m  log10 exponent 
 111              	\   f2  >= 0.1 
 112              	*************************/
 113              	//    _HEADER SCALEUP,7,"SCALEUP" 
 114              	SCALEUP:
 115 2740 504700BF 	    _NEST 
 116 2744 E72B0000 	    _DOLIT 0   // m 
ARM GAS  forth.s 			page 96


 116      00000000 
 117 274c 712D0000 	    _ADR SWAP  // m f1 
 118 2750 612D0000 	1:  _ADR DUPP 
 119 2754 E72B0000 	    _DOLIT onetenth 
 119      CDCCCC3D 
 120 275c 89210000 	    _ADR FLESS
 121 2760 272C0000 	    _QBRAN 2f
 121      88270000 
 122 2768 E72B0000 	    _DOLIT ten 
 122      00002041 
 123 2770 B5200000 	    _ADR FSTAR
 124              	    // decrement m   
 125 2774 712D0000 	    _ADR SWAP
 126 2778 912E0000 	    _ADR ONEM 
 127 277c 712D0000 	    _ADR SWAP 
 128 2780 3B2C0000 	    _BRAN 1b
 128      50270000 
 129 2788 272A0000 	2:  _UNNEST 
 130              	
 131              	/******************************
 132              	\ SCALEDOWN ( d f1 -- m d f2 )
 133              	\ divide by 10.0 until 
 134              	\ f < 10^d 
 135              	******************************/
 136              	//    _HEADER SCALEDOWN,9,"SCALEDOWN"
 137              	SCALEDOWN: // ( d f1 -- m d f2 )
 138 278c 504700BF 	    _NEST 
 139 2790 852D0000 	    _ADR OVER 
 140 2794 2D1F0000 	    _ADR PWR10
 141 2798 E72B0000 	    _DOLIT 0x31ABCC77 // 0.5e-8
 141      77CCAB31 
 142 27a0 95200000 	    _ADR FSUBB 
 143 27a4 DD2C0000 	    _ADR TOR
 144 27a8 E72B0000 	    _DOLIT 0 
 144      00000000 
 145 27b0 712D0000 	    _ADR SWAP // d 0 f1 r: pwr10  
 146 27b4 612D0000 	1:  _ADR DUPP
 147 27b8 C92C0000 	    _ADR RAT 
 148 27bc 6D210000 	    _ADR FGREAT 
 149 27c0 272C0000 	    _QBRAN 2f
 149      E8270000 
 150 27c8 E72B0000 	    _DOLIT ten 
 150      00002041 
 151 27d0 D5200000 	    _ADR FSLH 
 152              	    // increment m 
 153 27d4 712D0000 	    _ADR SWAP 
 154 27d8 812E0000 	    _ADR ONEP 
 155 27dc 712D0000 	    _ADR SWAP 
 156 27e0 3B2C0000 	    _BRAN 1b   
 156      B4270000 
 157 27e8 992C0000 	2:  _ADR RFROM 
 158 27ec 512D0000 	    _ADR DROP
 159 27f0 712D0000 	    _ADR SWAP // ( -- d f m ) 
 160 27f4 5D2F0000 	    _ADR NROT // ( -- m d f )
 161 27f8 272A0000 	    _UNNEST 
 162              	
 163              	
ARM GAS  forth.s 			page 97


 164              	/***************************
 165              	convert exponant of float 
 166              	    EPART ( m b -- b+ )
 167              	input: 
 168              	    m   decimal exponent 
 169              	    b   string buffer 
 170              	output:
 171              	    b+   adjusted pointer 
 172              	****************************/
 173              	//    _HEADER EPART,5,"EPART"
 174              	EPART:
 175 27fc 504700BF 	    _NEST
 176 2800 712D0000 	    _ADR SWAP
 177 2804 352F0000 	    _ADR QDUP    
 178 2808 272C0000 	    _QBRAN 2f 
 178      2C280000 
 179 2810 712D0000 	    _ADR SWAP 
 180 2814 E72B0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 180      45000000 
 181 281c 712D0000 	    _ADR SWAP  
 182 2820 E1260000 	    _ADR CSTOP // c!+ ( -- m b ) 
 183 2824 ED260000 	    _ADR ITOA // ( i b -- b u )
 184 2828 512D0000 	    _ADR DROP // ( -- b+ )     
 185 282c 272A0000 	2:  _UNNEST 
 186              	
 187              	
 188              	/***************************
 189              	conver fraction part of float 
 190              	    FPART ( d f b -- b+ )
 191              	input:
 192              	    d   digit left to display 
 193              	    f   float to convert
 194              	    b   string* buffer  
 195              	output:
 196              	    b+  updated string* 
 197              	****************************/
 198              	//    _HEADER FPART,5,"FPART"
 199              	FPART:
 200 2830 504700BF 	    _NEST
 201 2834 E72B0000 	    _DOLIT '.' 
 201      2E000000 
 202 283c 712D0000 	    _ADR SWAP 
 203 2840 E1260000 	    _ADR CSTOP 
 204 2844 DD2C0000 	    _ADR TOR // >r ( d f r: b ) 
 205              	    // round to next digit 
 206 2848 852D0000 	    _ADR OVER 
 207 284c 99260000 	    _ADR ROUND 
 208 2850 712D0000 	1:  _ADR SWAP  
 209 2854 352F0000 	    _ADR QDUP 
 210 2858 272C0000 	    _QBRAN 2f
 210      A8280000 
 211 2860 912E0000 	    _ADR ONEM // 1- ( -- f d- r: b )
 212 2864 712D0000 	    _ADR SWAP // swap ( -- d f r: b )
 213 2868 E72B0000 	    _DOLIT ten // ( d f 10.0 ) 
 213      00002041 
 214 2870 B5200000 	    _ADR FSTAR // f*
 215 2874 612D0000 	    _ADR DUPP  
ARM GAS  forth.s 			page 98


 216 2878 45200000 	    _ADR TRUNC // d f i
 217 287c 612D0000 	    _ADR DUPP  // d f i i  
 218 2880 E72B0000 	    _DOLIT '0' 
 218      30000000 
 219 2888 252E0000 	    _ADR PLUS 
 220 288c 992C0000 	    _ADR RFROM // R> ( d f c b )
 221 2890 E1260000 	    _ADR CSTOP // ( d f i b+ )
 222 2894 DD2C0000 	    _ADR TOR  // >r ( -- d f i r: b )
 223 2898 5D200000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 224 289c 95200000 	    _ADR FSUBB 
 225 28a0 3B2C0000 	    _BRAN 1b 
 225      50280000 
 226 28a8 512D0000 	2:  _ADR DROP 
 227 28ac 992C0000 	    _ADR RFROM 
 228 28b0 272A0000 	    _UNNEST 
 229              	
 230              	/***************************
 231              	 convert integer part of float 
 232              	    IPART ( d f b -- m d f b )
 233              	input:
 234              	    d   digit# to display 
 235              	    f   float to convert 
 236              	    b   string* buffer 
 237              	output:
 238              	    m   decimal exponent 
 239              	    d   digit# to display left 
 240              	    f   float fraction 
 241              	    b   update str* 
 242              	****************************/
 243              	//    _HEADER IPART,5,"IPART"
 244              	IPART: 
 245 28b4 504700BF 	    _NEST 
 246 28b8 DD2C0000 	    _ADR TOR // ( -- d f r: b )
 247 28bc 612D0000 	    _ADR DUPP 
 248 28c0 E72B0000 	    _DOLIT fone 
 248      0000803F 
 249 28c8 89210000 	    _ADR FLESS 
 250 28cc 272C0000 	    _QBRAN 1f 
 250      08290000 
 251 28d4 E72B0000 	    _DOLIT '0' 
 251      30000000 
 252 28dc 992C0000 	    _ADR RFROM 
 253 28e0 E1260000 	    _ADR CSTOP 
 254 28e4 DD2C0000 	    _ADR TOR 
 255 28e8 41270000 	    _ADR SCALEUP 
 256 28ec 712D0000 	    _ADR SWAP 
 257 28f0 5D2F0000 	    _ADR NROT 
 258              	    // decrement d 
 259 28f4 712D0000 	    _ADR SWAP 
 260 28f8 912E0000 	    _ADR ONEM 
 261 28fc 712D0000 	    _ADR SWAP 
 262 2900 992C0000 	    _ADR RFROM // r> ( -- m d f b )  
 263 2904 272A0000 	    _UNNEST 
 264 2908 8D270000 	1:  _ADR SCALEDOWN // ( -- m d f r: b)
 265 290c 612D0000 	    _ADR DUPP  // ( -- m d f f r: b )
 266 2910 45200000 	    _ADR TRUNC // ( -- m d f i r: b )
 267 2914 612D0000 	    _ADR DUPP  // ( -- m d f i i r: b )
ARM GAS  forth.s 			page 99


 268 2918 DD2C0000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 269 291c 5D200000 	    _ADR STOF  // ( -- m d f f )
 270 2920 95200000 	    _ADR FSUBB // ( -- m d f r: b i )
 271 2924 992C0000 	    _ADR RFROM // ( -- m d f i r: b )
 272 2928 992C0000 	    _ADR RFROM  // ( -- m d f i b )  
 273 292c ED260000 	    _ADR ITOA // -- m d f b u )
 274 2930 DD2C0000 	    _ADR TOR  // >r ( -- m d f b r: u )
 275 2934 492F0000 	    _ADR ROT
 276 2938 992C0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 277 293c 352E0000 	    _ADR SUBB // ( -- m f b d- )
 278 2940 5D2F0000 	    _ADR NROT // ( -- m d f b )
 279 2944 272A0000 	    _UNNEST
 280              	
 281              	
 282              	/***************************************
 283              	\  f>a ( d f b -- b u )
 284              	\ convert float to string
 285              	\ input: 
 286              	\   b  output buffer  
 287              	\   d n# of digits [1..7] to convert 
 288              	\   f float to convert 
 289              	\  output: 
 290              	\   b output buffer 
 291              	\    u length of string 
 292              	****************************************/
 293 2948 DC260000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 293      03463E41 
 294 2950 504700BF 	    _NEST 
 295 2954 612D0000 	    _ADR DUPP // dup ( -- d f b b )
 296 2958 DD2C0000 	    _ADR TOR // >r   ( d f b r: b )  
 297              	    // store space first buffer char. 
 298 295c E12E0000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 299 2960 712D0000 	    _ADR SWAP 
 300 2964 E1260000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 301              	    // check float sign 
 302 2968 852D0000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 303 296c 05220000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 304 2970 272C0000 	    _QBRAN 1f  // 0branch 1f 
 304      88290000 
 305              	    // negative number add '-' to buffer 
 306 2978 E72B0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 306      2D000000 
 307 2980 712D0000 	    _ADR SWAP 
 308 2984 E1260000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 309 2988 B5280000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 310 298c 31280000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 311 2990 FD270000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 312 2994 C92C0000 	    _ADR RAT 
 313 2998 352E0000 	    _ADR SUBB 
 314 299c 992C0000 	    _ADR RFROM 
 315 29a0 712D0000 	    _ADR SWAP 
 316 29a4 272A0000 	    _UNNEST 
 317              	
 318              	
 319              	/***********************************
 320              	    F. (  f d -- )
 321              	    print float32 number  
ARM GAS  forth.s 			page 100


 322              	    f -> float to print 
 323              	    d -> string digits# 
 324              	***********************************/
 325 29a8 4C290000 	    _HEADER FDOT,2,"F."
 325      02462E00 
 326 29b0 504700BF 	    _NEST 
 327              	    // limit digits range [1..7]
 328 29b4 E72B0000 	    _DOLIT 1 
 328      01000000 
 329 29bc 45310000 	    _ADR MAX 
 330 29c0 E72B0000 	    _DOLIT 7 
 330      07000000 
 331 29c8 59310000 	    _ADR MIN
 332 29cc 712D0000 	    _ADR SWAP // ( -- d f )
 333              	    // allocate convertion buffer 
 334 29d0 E9360000 	    _ADR HERE
 335 29d4 DD2C0000 	    _ADR TOR  
 336 29d8 E72B0000 	    _DOLIT 16 
 336      10000000 
 337 29e0 89480000 	    _ADR ALLOT 
 338              	    // fill it with zero's 
 339 29e4 C92C0000 	    _ADR RAT 
 340 29e8 E72B0000 	    _DOLIT 16 
 340      10000000 
 341 29f0 E72B0000 	    _DOLIT 0 
 341      00000000 
 342 29f8 D1370000 	    _ADR FILL 
 343 29fc 992C0000 	    _ADR RFROM // ( d f b )
 344 2a00 51290000 	    _ADR FTOA 
 345 2a04 293D0000 	    _ADR TYPEE 
 346              	    // free buffer 
 347 2a08 E72B0000 	    _DOLIT -16 
 347      F0FFFFFF 
 348 2a10 89480000 	    _ADR ALLOT
 349 2a14 272A0000 	    _UNNEST 
 350              	
 351              	
 352              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
ARM GAS  forth.s 			page 101


  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
ARM GAS  forth.s 			page 102


  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2a18 48F804CD 		STMFD	RSP!,{IP}
  85 2a1c 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2a20 5CF8045B 		LDR WP,[IP],#4 
  89 2a24 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2a26 58F804CB 		LDMFD RSP!,{IP}
  92 2a2a 5CF8045B 		LDR WP,[IP],#4 
  93 2a2e 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2a30 04F14801 		add T1,UP,#USER_CTOP 
 105 2a34 0968     		ldr T1,[T1]
 106 2a36 44F25072 		mov T2,#0x4700+(10<<3)
 107 2a3a 21F8022B 		strh T2,[T1],#2
 108 2a3e 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 2a42 21F8022B 		strh T2,[T1],#2 
 110 2a46 04F14802 		add T2,UP,#USER_CTOP 
 111 2a4a 1160     		str T1,[T2]
 112 2a4c E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 2a4e 47F8046D 		_PUSH 
 118 2a52 04F11406 		ADD TOS,UP,#STDIN 
 119 2a56 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2a58 47F8046D 		_PUSH 
 125 2a5c 04F11806 		ADD TOS,UP,#STDOUT
 126 2a60 DEE7     		_NEXT 
 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 2a62 AC290000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
ARM GAS  forth.s 			page 103


 132      46535200 
 132      00BF
 133 2a70 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 2a78 47F8046D 	    _PUSH 
 135 2a7c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 2a7e 81EA0101 	    eor T1,T1 
 137 2a82 8162     	    str T1,[T0,#SCB_CFSR]
 138 2a84 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 2a86 662A0000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 2a94 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 2a9c 47F8046D 		_PUSH 
 147 2aa0 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 2aa2 81EA0101 	    eor T1,T1 
 149 2aa6 8163     	    str T1,[T0,#SCB_BFAR]
 150 2aa8 BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 2aaa 8A2A0000 		_HEADER QKEY,4,"KEY?" 
 156      044B4559 
 156      3F00
 157 2ab4 504700BF 		_NEST 
 158 2ab8 4F2A0000 		_ADR TSTDIN // ' STDIN 
 159 2abc 39370000 		_ADR ATEXE
 160 2ac0 272A0000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 2ac4 AE2A0000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 2acc 504700BF 		_NEST
 168              	KEY1:
 169 2ad0 511A0000 		_ADR CAPS_LED 
 170 2ad4 B52A0000 		_ADR	QKEY 
 171 2ad8 272C0000 		_QBRAN	KEY1
 171      D02A0000 
 172 2ae0 272A0000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 2ae4 C82A0000 		_HEADER EMIT,4,"EMIT"
ARM GAS  forth.s 			page 104


 178      04454D49 
 178      540000BF 
 179 2af0 504700BF 		_NEST 
 180 2af4 592A0000 		_ADR TSTDOUT 
 181 2af8 39370000 		_ADR ATEXE 
 182 2afc 272A0000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 2b00 E82A0000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 2b0c 504700BF 		_NEST
 216 2b10 55300000 		_ADR ABSS   
 217 2b14 FD310000 		_ADR SEED 
 218 2b18 6D2C0000 		_ADR AT 
 219 2b1c 612D0000 		_ADR DUPP 
 220 2b20 E72B0000 		_DOLIT 13
 220      0D000000 
 221 2b28 152E0000 		_ADR LSHIFT 
 222 2b2c CD2D0000 		_ADR XORR  
 223 2b30 612D0000 		_ADR DUPP 
 224 2b34 E72B0000 		_DOLIT 17 
 224      11000000 
 225 2b3c FD2D0000 		_ADR RSHIFT 
 226 2b40 CD2D0000 		_ADR XORR 
 227 2b44 612D0000 		_ADR DUPP
 228 2b48 E72B0000 		_DOLIT 5 
 228      05000000 
ARM GAS  forth.s 			page 105


 229 2b50 152E0000 		_ADR LSHIFT 
 230 2b54 CD2D0000 		_ADR XORR  
 231 2b58 612D0000 		_ADR DUPP 
 232 2b5c FD310000 		_ADR SEED 
 233 2b60 592C0000 		_ADR STORE 
 234 2b64 E72B0000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 2b6c A52D0000 		_ADR ANDD 
 236 2b70 712D0000 		_ADR SWAP 
 237 2b74 BD350000 		_ADR MODD 
 238 2b78 272A0000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 2b7c 042B0000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 2b88 504700BF 		_NEST 
 247 2b8c 25320000 		_ADR TIMER 
 248 2b90 592C0000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2b94 25320000 		_ADR TIMER 
 251 2b98 6D2C0000 		_ADR AT 
 252 2b9c 272C0000 		_QBRAN PAUSE_EXIT 
 252      AC2B0000 
 253 2ba4 3B2C0000 		_BRAN PAUSE_LOOP 
 253      942B0000 
 254              	PAUSE_EXIT: 		
 255 2bac 272A0000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2bb0 802B0000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 2bbc 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2bc0 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 2bc8 3600     		movs TOS,TOS 
 265 2bca 57F8046B 		_POP
 266 2bce 03D0     		beq ULED_OFF
 267 2bd0 4FEA0040 		lsl T0,#16 
 268 2bd4 8861     		str T0,[T1,#GPIO_BSRR]
 269 2bd6 23E7     		_NEXT 
 270              	ULED_OFF:
 271 2bd8 8861     		str T0,[T1,#GPIO_BSRR]
 272 2bda 21E7     		_NEXT    
 273              	
 274              	
 275              		
 276              	/***************
 277              	//  The kernel
ARM GAS  forth.s 			page 106


 278              	***************/
 279              	
 280              	/********************
 281              	    NOP	( -- )
 282              	 	do nothing.
 283              	*********************/
 284 2bdc B42B0000 		_HEADER NOP,3,"NOP"
 284      034E4F50 
 285 2be4 1CE7     		_NEXT 
 286              	 
 287              	/********************
 288              	    doLIT	( -- w )
 289              	 	Push an inline literal.
 290              	hidden word used by compiler 
 291              	*********************/
 292              	DOLIT:
 293 2be6 47F8046D 		_PUSH				//  store TOS on data stack
 294 2bea 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 295 2bee 17E7     		_NEXT 
 296              	
 297              	/*******************************
 298              	    EXECUTE	( ca -- )
 299              	 	Execute the word at ca.
 300              	*******************************/
 301 2bf0 E02B0000 		_HEADER EXECU,7,"EXECUTE"
 301      07455845 
 301      43555445 
 302 2bfc 46F00105 		ORR	WP,TOS,#1 
 303 2c00 57F8046B 		_POP
 304 2c04 2847     		BX WP 
 305 2c06 0BE7     		_NEXT 
 306              	
 307              	/**********************************************************
 308              	    donext	( -- ) counter on R:
 309              	 	Run time code for the single index loop.
 310              	 	: next ( -- ) \ hilevel model
 311              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 312              	hidden word used by compiler 	  
 313              	*********************************************************/
 314              	DONXT:
 315 2c08 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 316 2c0c 22B9     		CBNZ T2,NEXT1 
 317              		/* loop done */
 318 2c0e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 319 2c12 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 320 2c16 03E7     		_NEXT
 321              	NEXT1:
 322              		/* decrement loop counter */
 323 2c18 A2F10102 		SUB	T2,T2,#1
 324 2c1c C8F80020 		STR	T2,[RSP]
 325 2c20 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 326 2c24 FCE6     		_NEXT 
 327              	
 328              	/**************************************
 329              	    ?branch	( f -- )
 330              	 	Branch if flag is zero.
 331              	hiddend word used by compiler
ARM GAS  forth.s 			page 107


 332              	**************************************/
 333              	QBRAN:
 334 2c26 3600     		MOVS	TOS,TOS
 335 2c28 57F8046B 		_POP
 336 2c2c 02D1     		BNE	QBRAN1
 337 2c2e DCF800C0 		LDR	IP,[IP]
 338 2c32 F5E6     		_NEXT
 339              	QBRAN1:
 340 2c34 0CF1040C 	 	ADD	IP,IP,#4
 341 2c38 F2E6     		_NEXT
 342              	
 343              	/***********************************
 344              	    branch	( -- )
 345              	 	Branch to an inline address.
 346              	hidden word used by compiler 
 347              	***********************************/
 348              	BRAN:
 349 2c3a DCF800C0 		LDR	IP,[IP]
 350 2c3e EFE6     		_NEXT
 351              	
 352              	/******************************************
 353              	    EXIT	(  -- )
 354              	 	Exit the currently executing command.
 355              	******************************************/
 356 2c40 F42B0000 		_HEADER EXIT,4,"EXIT"
 356      04455849 
 356      540000BF 
 357 2c4c 272A0000 		_UNNEST
 358              	
 359              	/***********************************
 360              	    !	   ( w a -- )
 361              	 	Pop the data stack to memory.
 362              	************************************/
 363 2c50 442C0000 		_HEADER STORE,1,"!"
 363      012100BF 
 364 2c58 57F8045B 		LDR	WP,[DSP],#4
 365 2c5c 3560     		STR	WP,[TOS]
 366 2c5e 57F8046B 		_POP
 367 2c62 DDE6     		_NEXT 
 368              	
 369              	/********************************************
 370              	    @	   ( a -- w )
 371              	 	Push memory location to the data stack.
 372              	*********************************************/
 373 2c64 542C0000 		_HEADER AT,1,"@"
 373      014000BF 
 374 2c6c 3668     		LDR	TOS,[TOS]
 375 2c6e D7E6     		_NEXT 
 376              	
 377              	/*******************************************
 378              	    C!	  ( c b -- )
 379              	 	Pop the data stack to byte memory.
 380              	*******************************************/
 381 2c70 682C0000 		_HEADER CSTOR,2,"C!"
 381      02432100 
 382 2c78 57F8045B 		LDR	WP,[DSP],#4
 383 2c7c 3570     		STRB WP,[TOS]
ARM GAS  forth.s 			page 108


 384 2c7e 57F8046B 		_POP
 385 2c82 CDE6     		_NEXT
 386              	
 387              	/*********************************************
 388              	    C@	  ( b -- c )
 389              	 	Push byte memory location to the data stack.
 390              	**********************************************/
 391 2c84 742C0000 		_HEADER CAT,2,"C@"
 391      02434000 
 392 2c8c 3678     		LDRB	TOS,[TOS]
 393 2c8e C7E6     		_NEXT 
 394              	
 395              	
 396              	/*********************************************
 397              	    R>	  ( -- w  R: w -- ) 
 398              	 	push from rstack.
 399              	**********************************************/
 400 2c90 882C0000 		_HEADER RFROM,2,"R>"
 400      02523E00 
 401 2c98 47F8046D 		_PUSH
 402 2c9c 58F8046B 		LDR	TOS,[RSP],#4
 403 2ca0 BEE6     		_NEXT 
 404              	
 405              	/***********************************************
 406              		2R> (  -- D ) R: D --  
 407              	    push a double from rstack 
 408              	***********************************************/
 409 2ca2 942C0000 		_HEADER DRFROM,3,"2R>"
 409      0332523E 
 409      00BF
 410 2cac 47F8046D 		_PUSH 
 411 2cb0 58F8046B 		LDR TOS,[RSP],#4 
 412 2cb4 47F8046D 		_PUSH 
 413 2cb8 58F8046B 		LDR TOS,[RSP],#4
 414 2cbc B0E6     		_NEXT 
 415              	
 416              	/************************************************
 417              	    R@	  ( -- w )
 418              	 	Copy top of return stack to the data stack.
 419              	************************************************/
 420 2cbe A62C0000 		_HEADER RAT,2,"R@"
 420      02524000 
 420      00BF
 421 2cc8 47F8046D 		_PUSH
 422 2ccc D8F80060 		LDR	TOS,[RSP]
 423 2cd0 A6E6     		_NEXT 
 424              	
 425              	/***********************************************
 426              	    >R	  ( w -- ) R: -- w 
 427              	 	pop to rstack.
 428              	************************************************/
 429 2cd2 C22C0000 		_HEADER TOR,2,">R"
 429      023E5200 
 429      00BF
 430 2cdc 48F8046D 		STR	TOS,[RSP,#-4]!
 431 2ce0 57F8046B 		_POP
 432 2ce4 9CE6     		_NEXT
ARM GAS  forth.s 			page 109


 433              	
 434              	/*********************************************
 435              		2>R ( d -- ) R: -- d 
 436              		pop a double to rstack 
 437              	*********************************************/
 438 2ce6 D62C0000 		_HEADER DTOR,3,"2>R"
 438      03323E52 
 438      00BF
 439 2cf0 48F8046D 		STR TOS,[RSP,#-4]!
 440 2cf4 57F8046B 	    _POP 
 441 2cf8 48F8046D 		STR TOS,[RSP,#-4]!
 442 2cfc 57F8046B 		_POP  
 443 2d00 8EE6     		_NEXT 	
 444              	
 445              	
 446              	/*******************************
 447              	//	RP! ( u -- )
 448              	// initialize RPP with u 
 449              	*******************************/
 450 2d02 EA2C0000 		_HEADER RPSTOR,3,"RP!"
 450      03525021 
 450      00BF
 451 2d0c B046     		MOV RSP,TOS 
 452 2d0e 57F8046B 		_POP  
 453 2d12 85E6     		_NEXT 
 454              	
 455              	/********************************
 456              		SP! ( u -- )
 457              	 initialize SPP with u 
 458              	********************************/
 459 2d14 062D0000 		_HEADER SPSTOR,3,"SP!"
 459      03535021 
 460 2d1c 3746     		MOV DSP,TOS 
 461 2d1e 86EA0606 		EOR TOS,TOS,TOS 
 462 2d22 7DE6     		_NEXT 
 463              	
 464              	/**************************************
 465              	    SP@	 ( -- a )
 466              	 	Push the current data stack pointer.
 467              	***************************************/
 468 2d24 182D0000 		_HEADER SPAT,3,"SP@"
 468      03535040 
 469 2d2c 47F8046D 		_PUSH
 470 2d30 3E46     		MOV	TOS,DSP
 471 2d32 75E6     		_NEXT
 472              	
 473              	/**************************************
 474              	   RP@ ( -- a )
 475              	   push current rstack pointer 
 476              	**************************************/
 477 2d34 282D0000 		_HEADER RPAT,3,"RP@"
 477      03525040 
 478 2d3c 47F8046D 		_PUSH 
 479 2d40 4646     		MOV TOS,RSP 
 480 2d42 6DE6     		_NEXT 
 481              	
 482              	/********************************
ARM GAS  forth.s 			page 110


 483              	    DROP	( w -- )
 484              	 	Discard top stack item.
 485              	********************************/
 486 2d44 382D0000 		_HEADER DROP,4,"DROP"
 486      0444524F 
 486      500000BF 
 487 2d50 57F8046B 		_POP
 488 2d54 64E6     		_NEXT 
 489              	
 490              	/*********************************
 491              	    DUP	 ( w -- w w )
 492              	 	Duplicate the top stack item.
 493              	*********************************/
 494 2d56 482D0000 		_HEADER DUPP,3,"DUP"
 494      03445550 
 494      00BF
 495 2d60 47F8046D 		_PUSH
 496 2d64 5CE6     		_NEXT 
 497              	
 498              	/**********************************
 499              	    SWAP	( w1 w2 -- w2 w1 )
 500              	 	Exchange top two stack items.
 501              	**********************************/
 502 2d66 5A2D0000 		_HEADER SWAP,4,"SWAP"
 502      04535741 
 502      5000
 503 2d70 3D68     		LDR	WP,[DSP]
 504 2d72 3E60     		STR	TOS,[DSP]
 505 2d74 2E46     		MOV	TOS,WP
 506 2d76 53E6     		_NEXT 
 507              	
 508              	/***********************************
 509              	    OVER	( w1 w2 -- w1 w2 w1 )
 510              	 	Copy second stack item to top.
 511              	***********************************/
 512 2d78 6A2D0000 		_HEADER OVER,4,"OVER"
 512      044F5645 
 512      520000BF 
 513 2d84 47F8046D 		_PUSH
 514 2d88 7E68     		LDR	TOS,[DSP,#4]
 515 2d8a 49E6     		_NEXT 
 516              	
 517              	/***********************************
 518              	    0<	  ( n -- t )
 519              	 	Return true if n is negative.
 520              	***********************************/
 521 2d8c 7C2D0000 		_HEADER ZLESS,2,"0<"
 521      02303C00 
 522 2d94 4FEAE676 		ASR TOS,#31
 523 2d98 42E6     		_NEXT 
 524              	
 525              	/********************************
 526              	    AND	 ( w w -- w )
 527              	 	Bitwise AND.
 528              	********************************/
 529 2d9a 902D0000 		_HEADER ANDD,3,"AND"
 529      03414E44 
ARM GAS  forth.s 			page 111


 529      00BF
 530 2da4 57F8045B 		LDR	WP,[DSP],#4
 531 2da8 06EA0506 		AND	TOS,TOS,WP
 532 2dac 38E6     		_NEXT 
 533              	
 534              	/******************************
 535              	    OR	  ( w w -- w )
 536              	 	Bitwise inclusive OR.
 537              	******************************/
 538 2dae 9E2D0000 		_HEADER ORR,2,"OR"
 538      024F5200 
 538      00BF
 539 2db8 57F8045B 		LDR	WP,[DSP],#4
 540 2dbc 46EA0506 		ORR	TOS,TOS,WP
 541 2dc0 2EE6     		_NEXT 
 542              	
 543              	/*****************************
 544              	    XOR	 ( w w -- w )
 545              	 	Bitwise exclusive OR.
 546              	*****************************/
 547 2dc2 B22D0000 		_HEADER XORR,3,"XOR"
 547      03584F52 
 547      00BF
 548 2dcc 57F8045B 		LDR	WP,[DSP],#4
 549 2dd0 86EA0506 		EOR	TOS,TOS,WP
 550 2dd4 24E6     		_NEXT 
 551              	
 552              	/**************************************************
 553              	    UM+	 ( w w -- w cy )
 554              	 	Add two numbers, return the sum and carry flag.
 555              	***************************************************/
 556 2dd6 C62D0000 		_HEADER UPLUS,3,"UM+"
 556      03554D2B 
 556      00BF
 557 2de0 3D68     		LDR	WP,[DSP]
 558 2de2 AD19     		ADDS	WP,WP,TOS
 559 2de4 4FF00006 		MOV	TOS,#0
 560 2de8 46F10006 		ADC	TOS,TOS,#0
 561 2dec 3D60     		STR	WP,[DSP]
 562 2dee 17E6     		_NEXT 
 563              	
 564              	/*********************************
 565              	    RSHIFT	 ( w # -- w )
 566              	 	arithmetic Right shift # bits.
 567              	**********************************/
 568 2df0 DA2D0000 		_HEADER RSHIFT,6,"RSHIFT"
 568      06525348 
 568      49465400 
 569 2dfc 57F8045B 		LDR	WP,[DSP],#4
 570 2e00 45FA06F6 		MOV	TOS,WP,ASR TOS
 571 2e04 0CE6     		_NEXT 
 572              	
 573              	/****************************
 574              	    LSHIFT	 ( w # -- w )
 575              	 	Right shift # bits.
 576              	****************************/
 577 2e06 F42D0000 		_HEADER LSHIFT,6,"LSHIFT"
ARM GAS  forth.s 			page 112


 577      064C5348 
 577      49465400 
 577      00BF
 578 2e14 57F8045B 		LDR	WP,[DSP],#4
 579 2e18 05FA06F6 		MOV	TOS,WP,LSL TOS
 580 2e1c 00E6     		_NEXT
 581              	
 582              	/*************************
 583              	    +	 ( w w -- w )
 584              	 	Add.
 585              	*************************/
 586 2e1e 0A2E0000 		_HEADER PLUS,1,"+"
 586      012B
 587 2e24 57F8045B 		LDR	WP,[DSP],#4
 588 2e28 2E44     		ADD	TOS,TOS,WP
 589 2e2a F9E5     		_NEXT 
 590              	
 591              	/************************
 592              	    -	 ( w w -- w )
 593              	 	Subtract.
 594              	************************/
 595 2e2c 222E0000 		_HEADER SUBB,1,"-"
 595      012D00BF 
 596 2e34 57F8045B 		LDR	WP,[DSP],#4
 597 2e38 C6EB0506 		RSB	TOS,TOS,WP
 598 2e3c F0E5     		_NEXT 
 599              	
 600              	/************************
 601              	    *	 ( w w -- w )
 602              	 	Multiply.
 603              	***********************/
 604 2e3e 302E0000 		_HEADER STAR,1,"*"
 604      012A
 605 2e44 57F8045B 		LDR	WP,[DSP],#4
 606 2e48 05FB06F6 		MUL	TOS,WP,TOS
 607 2e4c E8E5     		_NEXT 
 608              	
 609              	/***************************
 610              	    UM*	 ( w w -- ud )
 611              	 	Unsigned multiply.
 612              	****************************/
 613 2e4e 422E0000 		_HEADER UMSTA,3,"UM*"
 613      03554D2A 
 613      00BF
 614 2e58 3D68     		LDR	WP,[DSP]
 615 2e5a A6FB0523 		UMULL	T2,T3,TOS,WP
 616 2e5e 3A60     		STR	T2,[DSP]
 617 2e60 1E46     		MOV	TOS,T3
 618 2e62 DDE5     		_NEXT 
 619              	
 620              	/***************************
 621              	    M*	 ( w w -- d )
 622              	 	signed multiply.
 623              		hold double result
 624              	***************************/
 625 2e64 522E0000 		_HEADER MSTAR,2,"M*"
 625      024D2A00 
ARM GAS  forth.s 			page 113


 626 2e6c 3D68     		LDR	WP,[DSP]
 627 2e6e 86FB0523 		SMULL	T2,T3,TOS,WP
 628 2e72 3A60     		STR	T2,[DSP]
 629 2e74 1E46     		MOV	TOS,T3
 630 2e76 D3E5     		_NEXT 
 631              	
 632              	/***************************
 633              	    1+	 ( w -- w+1 )
 634              	 	Add 1.
 635              	***************************/
 636 2e78 682E0000 		_HEADER ONEP,2,"1+"
 636      02312B00 
 637 2e80 06F10106 		ADD	TOS,TOS,#1
 638 2e84 CCE5     		_NEXT 
 639              	
 640              	/***************************
 641              	    1-	 ( w -- w-1 )
 642              	 	Subtract 1.
 643              	***************************/
 644 2e86 7C2E0000 		_HEADER ONEM,2,"1-"
 644      02312D00 
 644      00BF
 645 2e90 A6F10106 		SUB	TOS,TOS,#1
 646 2e94 C4E5     		_NEXT 
 647              	
 648              	/***************************
 649              	    2+	 ( w -- w+2 )
 650              	 	Add 2.
 651              	**************************/
 652 2e96 8A2E0000 		_HEADER TWOP,2,"2+"
 652      02322B00 
 652      00BF
 653 2ea0 06F10206 		ADD	TOS,TOS,#2
 654 2ea4 BCE5     		_NEXT
 655              	
 656              	/**************************
 657              	    2-	 ( w -- w-2 )
 658              	 	Subtract 2.
 659              	**************************/
 660 2ea6 9A2E0000 		_HEADER TWOM,2,"2-"
 660      02322D00 
 660      00BF
 661 2eb0 A6F10206 		SUB	TOS,TOS,#2
 662 2eb4 B4E5     		_NEXT
 663              	
 664              	/***************************
 665              	    CELL+	( w -- w+4 )
 666              	 	Add CELLL.
 667              	***************************/
 668 2eb6 AA2E0000 		_HEADER CELLP,5,"CELL+"
 668      0543454C 
 668      4C2B
 669 2ec0 06F10406 		ADD	TOS,TOS,#CELLL
 670 2ec4 ACE5     		_NEXT
 671              	
 672              	/***************************
 673              	    CELL-	( w -- w-4 )
ARM GAS  forth.s 			page 114


 674              	 	Subtract CELLL.
 675              	**************************/
 676 2ec6 BA2E0000 		_HEADER CELLM,5,"CELL-"
 676      0543454C 
 676      4C2D
 677 2ed0 A6F10406 		SUB	TOS,TOS,#CELLL
 678 2ed4 A4E5     		_NEXT
 679              	
 680              	/**************************** 
 681              	    BL	( -- 32 )
 682              	 	Blank (ASCII space).
 683              	*****************************/
 684 2ed6 CA2E0000 		_HEADER BLANK,2,"BL"
 684      02424C00 
 684      00BF
 685 2ee0 47F8046D 		_PUSH
 686 2ee4 4FF02006 		MOV	TOS,#32
 687 2ee8 9AE5     		_NEXT 
 688              	
 689              	/**************************
 690              	    CELLS	( w -- w*4 )
 691              	 	Multiply CELLL 
 692              	***************************/
 693 2eea DA2E0000 		_HEADER CELLS,5,"CELLS"
 693      0543454C 
 693      4C53
 694 2ef4 4FEA8606 		LSL TOS,#2
 695 2ef8 92E5     		_NEXT
 696              	
 697              	/***************************
 698              	    CELL/	( w -- w/4 )
 699              	 	Divide by CELLL.
 700              	***************************/
 701 2efa EE2E0000 		_HEADER CELLSL,5,"CELL/"
 701      0543454C 
 701      4C2F
 702 2f04 4FEAA606 		ASR TOS,#2
 703 2f08 8AE5     		_NEXT
 704              	
 705              	/*************************
 706              	    2*	( w -- w*2 )
 707              	 	Multiply 2.
 708              	*************************/
 709 2f0a FE2E0000 		_HEADER TWOST,2,"2*"
 709      02322A00 
 709      00BF
 710 2f14 4FEA4606 		MOV	TOS,TOS,LSL#1
 711 2f18 82E5     		_NEXT
 712              	
 713              	/*************************
 714              	    2/	( w -- w/2 )
 715              	 	Divide by 2.
 716              	***********************/
 717 2f1a 0E2F0000 		_HEADER TWOSL,2,"2/"
 717      02322F00 
 717      00BF
 718 2f24 4FEA6606 		MOV	TOS,TOS,ASR#1
ARM GAS  forth.s 			page 115


 719 2f28 7AE5     		_NEXT
 720              	
 721              	/****************************
 722              	    ?DUP	( w -- w w | 0 )
 723              	 	Conditional duplicate.
 724              	*****************************/
 725 2f2a 1E2F0000 		_HEADER QDUP,4,"?DUP"
 725      043F4455 
 725      5000
 726 2f34 3500     		MOVS	WP,TOS
 727 2f36 18BF     		IT NE 
 728 2f38 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 729 2f3c 70E5     		_NEXT
 730              	
 731              	/***********************************
 732              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 733              	 	Rotate top 3 items.
 734              	*************************************/
 735 2f3e 2E2F0000 		_HEADER ROT,3,"ROT"
 735      03524F54 
 735      00BF
 736 2f48 3868     		LDR	T0,[DSP]  // w2 
 737 2f4a 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 738 2f4c 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 739 2f4e 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 740 2f50 66E5     		_NEXT
 741              	
 742              	/*********************************
 743              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 744              	 left rotate top 3 elements 
 745              	********************************/
 746 2f52 422F0000 		_HEADER NROT,4,"-ROT"
 746      042D524F 
 746      5400
 747 2f5c 7868     		LDR T0,[DSP,#4]
 748 2f5e 7E60     		STR TOS,[DSP,#4]	
 749 2f60 3E68     		LDR TOS,[DSP]
 750 2f62 3860     		STR T0,[DSP]
 751 2f64 5CE5     		_NEXT 
 752              	
 753              	/*********************************
 754              	    2DROP	( w1 w2 -- )
 755              	 	Drop top 2 items.
 756              	*********************************/
 757 2f66 562F0000 		_HEADER DDROP,5,"2DROP"
 757      05324452 
 757      4F50
 758 2f70 57F8046B 		_POP
 759 2f74 57F8046B 		_POP
 760 2f78 52E5     		_NEXT 
 761              	
 762              	/********************************
 763              		3DROP ( w1 w2 w3 -- )
 764              		drop top 3 items 
 765              	********************************/
 766 2f7a 6A2F0000 		_HEADER TDROP,5,"3DROP"
 766      05334452 
ARM GAS  forth.s 			page 116


 766      4F50
 767 2f84 07F10807 	    add DSP,#8 
 768 2f88 57F8046B 	    _POP 
 769 2f8c 48E5     	    _NEXT 
 770              	
 771              	/***********************************
 772              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 773              	 	Duplicate top 2 items.
 774              	************************************/
 775 2f8e 7E2F0000 		_HEADER DDUP,4,"2DUP"
 775      04324455 
 775      5000
 776 2f98 3868     		LDR	T0,[DSP] // w1
 777 2f9a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 778 2f9e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 779 2fa2 3DE5     		_NEXT
 780              	
 781              	/******************************
 782              	    D+	( d1 d2 -- d3 )
 783              	 	Add top 2 double numbers.
 784              	******************************/
 785 2fa4 922F0000 		_HEADER DPLUS,2,"D+"
 785      02442B00 
 786 2fac 57F8045B 		LDR	WP,[DSP],#4
 787 2fb0 57F8042B 		LDR	T2,[DSP],#4
 788 2fb4 3B68     		LDR	T3,[DSP]
 789 2fb6 ED18     		ADDS	WP,WP,T3
 790 2fb8 3D60     		STR	WP,[DSP]
 791 2fba 46EB0206 		ADC	TOS,TOS,T2
 792 2fbe 2FE5     		_NEXT
 793              	
 794              	/******************************
 795              		DABS ( d -- ud )
 796              		absolute value double 
 797              	*****************************/
 798 2fc0 A82F0000 		_HEADER DABS,4,"DABS"
 798      04444142 
 798      530000BF 
 799 2fcc 16F0004F 		tst TOS,#(1<<31)
 800 2fd0 09D0     		beq 9f 
 801 2fd2 6FEA0606 		mvn TOS,TOS 
 802 2fd6 3D68     		ldr WP,[DSP]
 803 2fd8 6FEA0505 		mvn WP,WP 
 804 2fdc 0135     		adds WP,#1
 805 2fde 3D60     		str WP,[DSP]
 806 2fe0 01D3     		bcc 9f 
 807 2fe2 06F10106 		add TOS,#1 
 808 2fe6 1BE5     	9:	_NEXT 
 809              	
 810              	/*****************************
 811              	  UD> ( d1 d2 -- f )
 812              	  unsigned compare double d1 > d2 
 813              	******************************/
 814 2fe8 C42F0000 		_HEADER UDGREAT,3,"UD>"
 814      0355443E 
 815 2ff0 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 816 2ff4 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
ARM GAS  forth.s 			page 117


 817 2ff6 B042     		cmp T0,TOS 
 818 2ff8 02D8     		bhi 1f
 819 2ffa 04D4     		bmi 2f  
 820 2ffc A942     		cmp T1,WP 
 821 2ffe 02D9     		bls 2f 
 822 3000 4FF0FF36 	1:	mov TOS,#-1 
 823 3004 0CE5     		_NEXT 
 824 3006 4FF00006 	2:  mov TOS,#0 
 825 300a 09E5     		_NEXT 
 826              	
 827              	/******************************
 828              		D0= ( d -- f )
 829              		double 0= 
 830              	*****************************/
 831 300c EC2F0000 		_HEADER DZEQUAL,3,"D0="
 831      0344303D 
 832 3014 3046     		mov T0,TOS
 833 3016 57F8046B 		_POP 
 834 301a 46EA0006 		orr TOS,T0 
 835 301e 01D0     		beq 9f
 836 3020 6FF00006 		mvn TOS,#0 
 837 3024 FCE4     	9:	_NEXT 
 838              	
 839              	/*****************************
 840              	    NOT	 ( w -- !w )
 841              	 	1"s complement.
 842              	*****************************/
 843 3026 10300000 		_HEADER INVER,3,"NOT"
 843      034E4F54 
 843      00BF
 844 3030 6FEA0606 		MVN	TOS,TOS
 845 3034 F4E4     		_NEXT
 846              	
 847              	/*****************************
 848              	    NEGATE	( w -- -w )
 849              	 	2's complement.
 850              	***************************/
 851 3036 2A300000 		_HEADER NEGAT,6,"NEGATE"
 851      064E4547 
 851      41544500 
 851      00BF
 852 3044 C6F10006 		RSB	TOS,TOS,#0
 853 3048 EAE4     		_NEXT
 854              	
 855              	/***************************
 856              	    ABS	 ( w -- |w| )
 857              	 	Absolute.
 858              	**************************/
 859 304a 3A300000 		_HEADER ABSS,3,"ABS"
 859      03414253 
 859      00BF
 860 3054 16F0004F 		TST	TOS,#0x80000000
 861 3058 18BF     		IT NE
 862 305a 7642     	    RSBNE   TOS,TOS,#0
 863 305c E0E4     		_NEXT
 864              	
 865              	/**************************
ARM GAS  forth.s 			page 118


 866              		CLZ ( n - n )
 867              		count leading zeros 
 868              	**************************/
 869 305e 4E300000 		_HEADER CLZ,3,"CLZ"
 869      03434C5A 
 869      00BF
 870 3068 B6FA86F6 		clz TOS,TOS 
 871 306c D8E4     		_NEXT 
 872              	
 873              	/*************************
 874              		CTZ ( n -- n )
 875              		count trailing zeros 
 876              	************************/
 877 306e 62300000 		_HEADER CTZ,3,"CTZ"
 877      0343545A 
 877      00BF
 878 3078 80EA0000 		eor T0,T0 
 879 307c 16F0010F 	1:  tst TOS,#1 
 880 3080 04D1     		bne 2f 
 881 3082 4FEA5606 		lsr TOS,#1 
 882 3086 00F10100 		add T0,#1 
 883 308a F7E7     		b 1b 
 884 308c 0646     	2:  mov TOS,T0 
 885 308e C7E4     		_NEXT 
 886              	
 887              	
 888              	/*******************
 889              	  0= ( w -- f )
 890              	 TOS==0?
 891              	*******************/
 892 3090 72300000 		_HEADER ZEQUAL,2,"0="
 892      02303D00 
 893 3098 16B9     		cbnz TOS,1f
 894 309a 4FF0FF36 		mov TOS,#-1
 895 309e BFE4     		_NEXT 
 896 30a0 86EA0606 	1:  eor TOS,TOS,TOS  
 897 30a4 BCE4     		_NEXT 	
 898              	
 899              	/*********************
 900              	    =	 ( w w -- t )
 901              	 	Equal?
 902              	*********************/
 903 30a6 94300000 		_HEADER EQUAL,1,"="
 903      013D
 904 30ac 57F8045B 		LDR	WP,[DSP],#4
 905 30b0 AE42     		CMP	TOS,WP
 906 30b2 0CBF     		ITE EQ 
 907 30b4 6FF00006 	    MVNEQ	TOS,#0
 908 30b8 0026     		MOVNE	TOS,#0
 909 30ba B1E4     		_NEXT
 910              	
 911              	/************************
 912              		<> ( w w -- f )
 913              		different?
 914              	************************/
 915 30bc AA300000 		_HEADER DIFF,2,"<>"
 915      023C3E00 
ARM GAS  forth.s 			page 119


 916 30c4 3046     		mov T0,TOS 
 917 30c6 57F8046B 		_POP 
 918 30ca 86EA0006 		eor TOS,T0
 919 30ce B6FA86F0 		clz T0,TOS 
 920 30d2 06FA00F6 		lsl TOS,T0 
 921 30d6 4FEAE676 		asr TOS,#31 
 922 30da A1E4     		_NEXT 
 923              	
 924              	/************************
 925              	    U<	 ( w w -- t )
 926              	 	Unsigned less?
 927              	*************************/
 928 30dc C0300000 		_HEADER ULESS,2,"U<"
 928      02553C00 
 929 30e4 57F8045B 		LDR	WP,[DSP],#4
 930 30e8 B542     		CMP	WP,TOS
 931 30ea 34BF     		ITE CC 
 932 30ec 6FF00006 		MVNCC	TOS,#0
 933 30f0 0026     		MOVCS	TOS,#0
 934 30f2 95E4     		_NEXT
 935              	
 936              	/**********************
 937              	    <	( w w -- t )
 938              	 	Less?
 939              	**********************/
 940 30f4 E0300000 		_HEADER LESS,1,"<"
 940      013C00BF 
 941 30fc 57F8045B 		LDR	WP,[DSP],#4
 942 3100 B542     		CMP	WP,TOS
 943 3102 B4BF     	    ITE LT
 944 3104 6FF00006 		MVNLT	TOS,#0
 945 3108 0026     		MOVGE	TOS,#0
 946 310a 89E4     		_NEXT 
 947              	
 948              	/**********************
 949              		U> ( u u -- t|f )
 950              	    unsigned greater 
 951              	**********************/
 952 310c F8300000 		_HEADER UGREAT,2,"U>"
 952      02553E00 
 953 3114 57F8045B 		LDR WP,[DSP],#4 
 954 3118 AE42     		CMP TOS,WP 
 955 311a 34BF     		ITE CC  
 956 311c 6FF00006 		MVNCC TOS,#0 
 957 3120 0026     		MOVCS TOS,#0
 958 3122 7DE4     		_NEXT 
 959              	
 960              	/***********************
 961              	    >	( w w -- t )
 962              	 	greater?
 963              	***********************/
 964 3124 10310000 		_HEADER GREAT,1,">"
 964      013E00BF 
 965 312c 57F8045B 		LDR	WP,[DSP],#4
 966 3130 B542     		CMP	WP,TOS
 967 3132 CCBF     		ITE GT
 968 3134 6FF00006 	    MVNGT	TOS,#0
ARM GAS  forth.s 			page 120


 969 3138 0026     		MOVLE	TOS,#0
 970 313a 71E4     		_NEXT
 971              	
 972              	/***************************
 973              	    MAX	 ( w w -- max )
 974              	 	Leave maximum.
 975              	***************************/
 976 313c 28310000 		_HEADER MAX,3,"MAX"
 976      034D4158 
 977 3144 57F8045B 		LDR	WP,[DSP],#4
 978 3148 B542     		CMP	WP,TOS
 979 314a C8BF     		IT GT 
 980 314c 2E46     		MOVGT	TOS,WP
 981 314e 67E4     		_NEXT 
 982              	
 983              	/**************************
 984              	    MIN	 ( w w -- min )
 985              	 	Leave minimum.
 986              	**************************/
 987 3150 40310000 		_HEADER MIN,3,"MIN"
 987      034D494E 
 988 3158 57F8045B 		LDR	WP,[DSP],#4
 989 315c B542     		CMP	WP,TOS
 990 315e B8BF     		IT LT
 991 3160 2E46     		MOVLT	TOS,WP
 992 3162 5DE4     		_NEXT
 993              	
 994              	/***********************
 995              	    +!	 ( w a -- )
 996              	 	Add to memory.
 997              	***********************/
 998 3164 54310000 		_HEADER PSTOR,2,"+!"
 998      022B2100 
 999 316c 57F8045B 		LDR	WP,[DSP],#4
 1000 3170 3268     		LDR	T2,[TOS]
 1001 3172 2A44     		ADD	T2,T2,WP
 1002 3174 3260     		STR	T2,[TOS]
 1003 3176 57F8046B 		_POP
 1004 317a 51E4     		_NEXT
 1005              	
 1006              	/************************
 1007              	    2!	 ( d a -- )
 1008              	 	Store double number.
 1009              	*************************/
 1010 317c 68310000 		_HEADER DSTOR,2,"2!"
 1010      02322100 
 1011 3184 57F8045B 		LDR	WP,[DSP],#4
 1012 3188 57F8042B 		LDR	T2,[DSP],#4
 1013 318c 46F8045B 		STR	WP,[TOS],#4
 1014 3190 3260     		STR	T2,[TOS]
 1015 3192 57F8046B 		_POP
 1016 3196 43E4     		_NEXT
 1017              	
 1018              	/************************
 1019              	    2@	 ( a -- d )
 1020              	 	Fetch double number.
 1021              	************************/
ARM GAS  forth.s 			page 121


 1022 3198 80310000 		_HEADER DAT,2,"D@"
 1022      02444000 
 1023 31a0 7568     		LDR	WP,[TOS,#4]
 1024 31a2 47F8045D 		STR	WP,[DSP,#-4]!
 1025 31a6 3668     		LDR	TOS,[TOS]
 1026 31a8 3AE4     		_NEXT
 1027              	
 1028              	/***************************
 1029              	    COUNT	( b -- b+1 c )
 1030              	 	Fetch length of string.
 1031              	****************************/
 1032 31aa 9C310000 		_HEADER COUNT,5,"COUNT"
 1032      05434F55 
 1032      4E54
 1033 31b4 16F8015B 		LDRB	WP,[TOS],#1
 1034 31b8 47F8046D 		_PUSH
 1035 31bc 2E46     		MOV	TOS,WP
 1036 31be 2FE4     		_NEXT
 1037              	
 1038              	/******************************
 1039              	    DNEGATE	( d -- -d )
 1040              	 	Negate double number.
 1041              	**************************/
 1042 31c0 AE310000 		_HEADER DNEGA,7,"DNEGATE"
 1042      07444E45 
 1042      47415445 
 1043 31cc 3D68     		LDR	WP,[DSP]
 1044 31ce A2EB0202 		SUB	T2,T2,T2
 1045 31d2 551B     		SUBS WP,T2,WP
 1046 31d4 62EB0606 		SBC	TOS,T2,TOS
 1047 31d8 3D60     		STR	WP,[DSP]
 1048 31da 21E4     		_NEXT
 1049              	
 1050              	/******************************
 1051              	  System and user variables
 1052              	******************************/
 1053              	
 1054              	/*******************************
 1055              	  doVAR	( -- a )
 1056              	  Run time routine for VARIABLE and CREATE.
 1057              	hidden word used by compiler
 1058              	********************************/
 1059              	DOVAR:
 1060 31dc 47F8046D 		_PUSH
 1061 31e0 6646     		MOV TOS,IP
 1062 31e2 0CF1040C 		ADD IP,IP,#4 
 1063 31e6 1EE4     		B UNNEST 
 1064              	
 1065              	/**********************************
 1066              	    doCON	( -- a ) 
 1067              	 	Run time routine for CONSTANT.
 1068              	hidden word used by compiler 
 1069              	***********************************/
 1070              	DOCON:
 1071 31e8 47F8046D 		_PUSH
 1072 31ec 5CF8046B 		LDR.W TOS,[IP],#4 
 1073 31f0 19E4     		B UNNEST 
ARM GAS  forth.s 			page 122


 1074              	
 1075              	/***********************
 1076              	  system variables 
 1077              	***********************/
 1078              	
 1079              	/**************************
 1080              	 SEED ( -- a)
 1081              	 return PRNG seed address 
 1082              	**************************/
 1083 31f2 C4310000 		_HEADER SEED,4,"SEED"
 1083      04534545 
 1083      4400
 1084 31fc 47F8046D 		_PUSH 
 1085 3200 04F10406 		ADD TOS,UP,#RNDSEED
 1086 3204 0CE4     		_NEXT 	
 1087              	
 1088              	/****************************************
 1089              	  MSEC ( -- a)
 1090              	 return address of milliseconds counter
 1091              	****************************************/
 1092 3206 F6310000 		_HEADER MSEC,4,"MSEC"
 1092      044D5345 
 1092      4300
 1093 3210 47F8046D 	    _PUSH
 1094 3214 04F10806 	    ADD TOS,UP,#TICKS
 1095 3218 02E4     	    _NEXT 
 1096              	
 1097              	/*************************
 1098              	 TIMER ( -- a )
 1099              	 count down timer 
 1100              	**********************/
 1101 321a 0A320000 		_HEADER TIMER,5,"TIMER"
 1101      0554494D 
 1101      4552
 1102 3224 47F8046D 		 _PUSH 
 1103 3228 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1104 322c FFF7F8BB 	    _NEXT
 1105              	
 1106              	/*****************************
 1107              	    'BOOT	 ( -- a )
 1108              	 	boot up application vector 
 1109              	*****************************/
 1110 3230 1E320000 		_HEADER TBOOT,5,"'BOOT"
 1110      0527424F 
 1110      4F5400BF 
 1111 323c 47F8046D 		_PUSH
 1112 3240 04F11006 		ADD	TOS,UP,#BOOT 
 1113 3244 FFF7ECBB 		_NEXT
 1114              		
 1115              	/********************************************	
 1116              	    BASE	( -- a )
 1117              	 	Storage of the radix base for numeric I/O.
 1118              	**********************************************/
 1119 3248 34320000 		_HEADER BASE,4,"BASE"
 1119      04424153 
 1119      450000BF 
 1120 3254 47F8046D 		_PUSH
ARM GAS  forth.s 			page 123


 1121 3258 04F11C06 		ADD	TOS,UP,#NBASE
 1122 325c FFF7E0BB 		_NEXT
 1123              	
 1124              	/***********************************************
 1125              		BCHAR ( -- flag )
 1126              		indicate if the base character must be output
 1127              		with numeric conversion 
 1128              	************************************************/
 1129 3260 4C320000 			_HEADER BCHR,5,"BCHAR"
 1129      05424348 
 1129      415200BF 
 1130 326c 47F8046D 			_PUSH 
 1131 3270 04F12006 			ADD TOS,UP,#BCHAR 
 1132 3274 FFF7D4BB 			_NEXT 
 1133              	
 1134              	/*****************************************************
 1135              	    temp	 ( -- a )
 1136              	 	A temporary storage location used in parse and find.
 1137              	hidden word for internal use
 1138              	********************************************************/
 1139              	TEMP:
 1140 3278 47F8046D 		_PUSH
 1141 327c 04F12406 		ADD	TOS,UP,#TMP
 1142 3280 FFF7CEBB 		_NEXT
 1143              	
 1144              	/*******************************************
 1145              	    SPAN	( -- a )
 1146              	 	Hold character count received by EXPECT.
 1147              	********************************************/
 1148 3284 64320000 		_HEADER SPAN,4,"SPAN"
 1148      04535041 
 1148      4E0000BF 
 1149 3290 47F8046D 		_PUSH
 1150 3294 04F12806 		ADD	TOS,UP,#CSPAN
 1151 3298 FFF7C2BB 		_NEXT
 1152              	
 1153              	/***********************************************************
 1154              	    >IN	 ( -- a )
 1155              	 	Hold the character pointer while parsing input stream.
 1156              	***********************************************************/
 1157 329c 88320000 		_HEADER INN,3,">IN"
 1157      033E494E 
 1158 32a4 47F8046D 		_PUSH
 1159 32a8 04F12C06 		ADD	TOS,UP,#TOIN
 1160 32ac FFF7B8BB 		_NEXT
 1161              	
 1162              	/**************************************
 1163              	    #TIB	( -- a )
 1164              	 	Hold the current count and address 
 1165              		of the terminal input buffer.
 1166              	**************************************/
 1167 32b0 A0320000 		_HEADER NTIB,4,"#TIB"
 1167      04235449 
 1167      420000BF 
 1168 32bc 47F8046D 		_PUSH
 1169 32c0 04F13006 		ADD	TOS,UP,#NTIBB
 1170 32c4 FFF7ACBB 		_NEXT
ARM GAS  forth.s 			page 124


 1171              	
 1172              	/******************************
 1173              	    'EVAL	( -- a )
 1174              	 	Execution vector of EVAL.
 1175              	*******************************/
 1176 32c8 B4320000 		_HEADER TEVAL,5,"'EVAL"
 1176      05274556 
 1176      414C00BF 
 1177 32d4 47F8046D 		_PUSH
 1178 32d8 04F13806 		ADD	TOS,UP,#EVAL
 1179 32dc FFF7A0BB 		_NEXT
 1180              	
 1181              	/*********************************
 1182              	    HLD	 ( -- a )
 1183              	 	Hold a pointer in building a 
 1184              		numeric output string.
 1185              	*********************************/
 1186 32e0 CC320000 		_HEADER HLD,3,"HLD"
 1186      03484C44 
 1187 32e8 47F8046D 		_PUSH
 1188 32ec 04F13C06 		ADD	TOS,UP,#VHOLD
 1189 32f0 FFF796BB 		_NEXT
 1190              	
 1191              	/**********************************
 1192              	    CONTEXT	( -- a )
 1193              	 	A area to specify vocabulary 
 1194              		search order.
 1195              	**********************************/
 1196 32f4 E4320000 		_HEADER CNTXT,7,"CONTEXT"
 1196      07434F4E 
 1196      54455854 
 1197              	CRRNT:
 1198 3300 47F8046D 		_PUSH
 1199 3304 04F14006 		ADD	TOS,UP,#CTXT
 1200 3308 FFF78ABB 		_NEXT
 1201              	
 1202              	/******************************
 1203              	    CP	( -- a )
 1204              	 	Point to top name in RAM 
 1205              		vocabulary.
 1206              	******************************/
 1207 330c F8320000 		_HEADER CPP,2,"CP"
 1207      02435000 
 1208 3314 47F8046D 		_PUSH
 1209 3318 04F14806 		ADD	TOS,UP,#USER_CTOP
 1210 331c FFF780BB 		_NEXT
 1211              	
 1212              	/****************************
 1213              	   FCP ( -- a )
 1214              	  Point ot top of Forth 
 1215              	  system dictionary
 1216              	****************************/
 1217 3320 10330000 		_HEADER FCP,3,"FCP"
 1217      03464350 
 1218 3328 47F8046D 		_PUSH 
 1219 332c 04F14406 		ADD TOS,UP,#FORTH_CTOP 
 1220 3330 FFF776BB 		_NEXT 
ARM GAS  forth.s 			page 125


 1221              	
 1222              	/***************************
 1223              	    LAST	( -- a )
 1224              	 	Point to the last name 
 1225              		in the name dictionary.
 1226              	***************************/
 1227 3334 24330000 		_HEADER LAST,4,"LAST"
 1227      044C4153 
 1227      540000BF 
 1228 3340 47F8046D 		_PUSH
 1229 3344 04F14C06 		ADD	TOS,UP,#LASTN
 1230 3348 FFF76ABB 		_NEXT
 1231              	
 1232              	
 1233              	/***********************
 1234              		system constants 
 1235              	***********************/
 1236              	
 1237              	/********************************
 1238              		USER-BEGIN ( -- a )
 1239              	  where user area begin in RAM
 1240              	********************************/
 1241 334c 38330000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1241      0A555345 
 1241      522D4245 
 1241      47494E00 
 1242 335c 47F8046D 		_PUSH 
 1243 3360 DFF80460 		ldr TOS,USR_BGN_ADR 
 1244 3364 FFF75CBB 		_NEXT 
 1245              	USR_BGN_ADR:
 1246 3368 12050020 	.word  DTOP 
 1247              	
 1248              	/*********************************
 1249              	  USER_END ( -- a )
 1250              	  where user area end in RAM 
 1251              	******************************/
 1252 336c 50330000 		_HEADER USER_END,8,"USER-END"
 1252      08555345 
 1252      522D454E 
 1252      440000BF 
 1253 337c 47F8046D 		_PUSH 
 1254 3380 DFF80460 		ldr TOS,USER_END_ADR 
 1255 3384 FFF74CBB 		_NEXT 
 1256              	USER_END_ADR:
 1257 3388 7C800120 		.word DEND 
 1258              	
 1259              	
 1260              	/* *********************
 1261              	  Common functions
 1262              	***********************/
 1263              	
 1264              	/********************************
 1265              	    WITHIN	( u ul uh -- t )
 1266              	 	Return true if u is within 
 1267              		the range of ul and uh.
 1268              	********************************/
 1269 338c 70330000 		_HEADER WITHI,6,"WITHIN"
ARM GAS  forth.s 			page 126


 1269      06574954 
 1269      48494E00 
 1270 3398 504700BF 		_NEST
 1271 339c 852D0000 		_ADR	OVER
 1272 33a0 352E0000 		_ADR	SUBB
 1273 33a4 DD2C0000 		_ADR	TOR
 1274 33a8 352E0000 		_ADR	SUBB
 1275 33ac 992C0000 		_ADR	RFROM
 1276 33b0 E5300000 		_ADR	ULESS
 1277 33b4 272A0000 		_UNNEST
 1278              	
 1279              	//  Divide
 1280              	
 1281              	/*************************************
 1282              	    UM/MOD	( udl udh u -- ur uq )
 1283              	 	Unsigned divide of a double by a 
 1284              		single. Return mod and quotient.
 1285              	**************************************/
 1286 33b8 90330000 		_HEADER UMMOD,6,"UM/MOD"
 1286      06554D2F 
 1286      4D4F4400 
 1287 33c4 4FF00103 		MOV	T3,#1
 1288 33c8 57F8045B 		LDR	WP,[DSP],#4
 1289 33cc 3A68     		LDR	T2,[DSP]
 1290              	UMMOD0:
 1291 33ce 9218     		ADDS	T2,T2,T2
 1292 33d0 6D41     		ADCS	WP,WP,WP
 1293 33d2 04D3     		BCC	UMMOD1
 1294 33d4 A5EB0605 		SUB	WP,WP,TOS
 1295 33d8 02F10102 		ADD	T2,T2,#1
 1296 33dc 04E0     		B UMMOD2
 1297              	UMMOD1:
 1298 33de AD1B     		SUBS	WP,WP,TOS 
 1299 33e0 28BF     		IT CS 
 1300 33e2 0132     		ADDCS	T2,T2,#1
 1301 33e4 00D2     		BCS	UMMOD2
 1302 33e6 3544     		ADD	WP,WP,TOS
 1303              	UMMOD2:
 1304 33e8 DB18     		ADDS	T3,T3,T3
 1305 33ea F0D3     		BCC	UMMOD0
 1306 33ec 1646     		MOV	TOS,T2
 1307 33ee 3D60     		STR	WP,[DSP]
 1308 33f0 FFF716BB 		_NEXT
 1309              	
 1310              	/****************************
 1311              	    M/MOD	( d n -- r q )
 1312              	 	Signed floored divide 
 1313              		of double by single. 
 1314              		Return mod and quotient.
 1315              	****************************/
 1316 33f4 BC330000 		_HEADER MSMOD,5,"M/MOD"
 1316      054D2F4D 
 1316      4F4400BF 
 1317 3400 504700BF 		_NEST
 1318 3404 612D0000 		_ADR	DUPP
 1319 3408 952D0000 		_ADR	ZLESS
 1320 340c 612D0000 		_ADR	DUPP
ARM GAS  forth.s 			page 127


 1321 3410 DD2C0000 		_ADR	TOR
 1322 3414 272C0000 		_QBRAN MMOD1
 1322      2C340000 
 1323 341c 45300000 		_ADR	NEGAT
 1324 3420 DD2C0000 		_ADR	TOR
 1325 3424 CD310000 		_ADR	DNEGA
 1326 3428 992C0000 		_ADR	RFROM
 1327              	MMOD1:
 1328 342c DD2C0000 		_ADR	TOR
 1329 3430 612D0000 		_ADR	DUPP
 1330 3434 952D0000 		_ADR	ZLESS
 1331 3438 272C0000 		_QBRAN MMOD2
 1331      48340000 
 1332 3440 C92C0000 		_ADR	RAT
 1333 3444 252E0000 		_ADR	PLUS
 1334              	MMOD2:
 1335 3448 992C0000 		_ADR	RFROM
 1336 344c C5330000 		_ADR	UMMOD
 1337 3450 992C0000 		_ADR	RFROM
 1338 3454 272C0000 		_QBRAN	MMOD3
 1338      68340000 
 1339 345c 712D0000 		_ADR	SWAP
 1340 3460 45300000 		_ADR	NEGAT
 1341 3464 712D0000 		_ADR	SWAP
 1342              	MMOD3:   
 1343 3468 272A0000 		_UNNEST
 1344              	
 1345              	/****************************
 1346              		S>D ( n -- d )
 1347              		convert single to double 
 1348              	*****************************/
 1349 346c F8330000 		_HEADER STOD,3,"S>D"
 1349      03533E44 
 1350 3474 47F8046D 		_PUSH 
 1351 3478 4FEAE676 		ASR TOS,#31
 1352 347c FFF7D0BA 		_NEXT 
 1353              	
 1354              	/****************************
 1355              		D2* ( d -- d<<1 )
 1356              		double * 2 
 1357              	***************************/
 1358 3480 70340000 		_HEADER D2STAR,3,"D2*"
 1358      0344322A 
 1359 3488 3868     		ldr T0,[DSP]
 1360 348a 4000     		lsls T0,#1
 1361 348c 3860     		str T0,[DSP]
 1362 348e 4FEA4606 		lsl TOS,#1
 1363 3492 46F10006 		adc TOS,#0
 1364 3496 FFF7C3BA 		_NEXT 
 1365              	
 1366              	/****************************
 1367              		D2/  ( d -- d>>1 )
 1368              		double signed divide by 2 
 1369              	*****************************/
 1370 349a 84340000 		_HEADER D2SL,3,"D2/"
 1370      0344322F 
 1370      00BF
ARM GAS  forth.s 			page 128


 1371 34a4 3868     		ldr T0,[DSP]
 1372 34a6 7610     		asrs TOS,#1
 1373 34a8 4FEA3000 		rrx T0,T0 
 1374 34ac 3860     		str T0,[DSP]
 1375 34ae FFF7B7BA 		_NEXT 
 1376              	
 1377              	/***************************
 1378              		D/MOD  ( d+ n+ - r+ qd+ )
 1379              		unsigned double division
 1380              		and modulo 
 1381              		output:
 1382              			qd+ = d+ / n+
 1383              			r+ = qd+ - (d+ * n+ )
 1384              	***************************/
 1385 34b2 9E340000 		_HEADER DSLMOD,5,"D/MOD"
 1385      05442F4D 
 1385      4F44
 1386 34bc 3D68     		ldr WP,[DSP]  // d+ high 
 1387 34be 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1388 34c0 4FF02002 		mov T2,#32 // shift counter  
 1389 34c4 81EA0101 		eor T1,T1 // quotient T0:T1  
 1390 34c8 25B9     		cbnz WP,1f    
 1391 34ca 82EA0202 		eor T2,T2 // nos shifting required 
 1392 34ce 0546     		mov WP,T0 
 1393 34d0 80EA0000 		eor T0,T0 
 1394 34d4 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1395 34d6 15F0004F 	    tst WP,#(1<<31) 
 1396 34da 06D1     		bne 2f
 1397 34dc 4918     		adds T1,T1,T1 
 1398 34de 4041     		adcs T0,T0,T0 
 1399 34e0 45EB0505 		adc WP,WP,WP 
 1400 34e4 A2F10102 		sub T2,#1 
 1401 34e8 F4E7     		b 1b 
 1402 34ea B5FBF6F3 	2:  udiv T3,WP,TOS
 1403 34ee 41EA0301 		orr T1,T3   // append partial quotient 
 1404 34f2 06FB03F3 		mul T3,TOS
 1405 34f6 A5EB0305 		sub WP,T3 //remainder 
 1406 34fa 02B1     		cbz T2,8f 
 1407 34fc EAE7     		b 1b 
 1408 34fe 7D60     	8:	str WP,[DSP,#4] // remainder 
 1409 3500 3960     		str T1,[DSP]  // q lo 
 1410 3502 0646     		mov TOS,T0  // q hi 		
 1411 3504 FFF78CBA 		_NEXT 
 1412              	
 1413              	
 1414              	/****************************
 1415              		D/  ( ud u -- udq )
 1416              		divide unsigned double 
 1417              		by unsigned single 
 1418              		return double quotient
 1419              		rounded to nearest integer 
 1420              	****************************/
 1421 3508 B6340000 		_HEADER DSLASH,2,"D/"
 1421      02442F00 
 1422 3510 504700BF 		_NEST 
 1423 3514 612D0000 		_ADR DUPP 
 1424 3518 E72B0000 		_DOLIT 1 
ARM GAS  forth.s 			page 129


 1424      01000000 
 1425 3520 FD2D0000 		_ADR RSHIFT 
 1426 3524 DD2C0000 		_ADR TOR 
 1427 3528 BD340000 		_ADR DSLMOD 
 1428 352c 492F0000 		_ADR ROT 
 1429 3530 992C0000 		_ADR RFROM 
 1430 3534 2D310000 		_ADR GREAT 
 1431 3538 272C0000 		_QBRAN 9f
 1431      50350000 
 1432 3540 E72B0000 		_DOLIT 1 
 1432      01000000 
 1433 3548 75340000 		_ADR STOD 
 1434 354c AD2F0000 		_ADR DPLUS 
 1435 3550 272A0000 	9:	_UNNEST 
 1436              	
 1437              	
 1438              	/****************************
 1439              		D* ( d s -- d )
 1440              	    multiply a double 
 1441              		by a single 
 1442              	****************************/
 1443 3554 0C350000 		_HEADER DSTAR,2,"D*"
 1443      02442A00 
 1444              	/*
 1445              		_NEST 
 1446              		_ADR NROT 
 1447              		_ADR DUPP 
 1448              		_ADR TOR 
 1449              		_ADR DABS
 1450              		_ADR SWAP  
 1451              		_ADR ROT   
 1452              		_ADR DUPP
 1453              		_ADR TOR
 1454              		_ADR MSTAR
 1455              		_ADR ROT
 1456              		_ADR RFROM 
 1457              		_ADR STAR 
 1458              		_ADR PLUS
 1459              		_ADR RFROM 
 1460              		_ADR ZLESS 
 1461              		_QBRAN 9f
 1462              		_ADR DNEGA   
 1463              	9:	_UNNEST 
 1464              	*/
 1465 355c 57F8040B 		ldr T0,[DSP],#4
 1466 3560 3968     		ldr T1,[DSP]
 1467 3562 3860     		str T0,[DSP] 
 1468 3564 83EA0303 		eor T3,T3 
 1469 3568 10F0004F 		tst T0,#(1<<31)
 1470 356c 02D0     		beq 1f 
 1471              		// DNEGATE 
 1472 356e 591A     		subs T1,T3,T1  
 1473 3570 63EB0000 		sbc T0,T3,T0 
 1474 3574 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1475 3578 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1476 357c 0E44     		add TOS,T1  // TOS:T2 product  
 1477 357e 3868     		ldr r0,[DSP]
ARM GAS  forth.s 			page 130


 1478 3580 10F0004F 		tst T0,#(1<<31)
 1479 3584 02D0     		beq 2f 
 1480              		// DNEGATE product 
 1481 3586 9A1A     		subs T2,T3,T2  
 1482 3588 63EB0606 		sbc TOS,T3,TOS 
 1483 358c 3A60     	2:  str T2,[DSP]
 1484 358e FFF747BA 		_NEXT 
 1485              	
 1486              	
 1487              	/****************************
 1488              	   /MOD	( n n -- r q )
 1489              		Signed divide. Return
 1490              		mod and quotient.
 1491              	****************************/
 1492 3592 58350000 		_HEADER SLMOD,4,"/MOD"
 1492      042F4D4F 
 1492      4400
 1493 359c 504700BF 		_NEST
 1494 35a0 852D0000 		_ADR	OVER
 1495 35a4 952D0000 		_ADR	ZLESS
 1496 35a8 712D0000 		_ADR	SWAP
 1497 35ac 01340000 		_ADR	MSMOD
 1498 35b0 272A0000 		_UNNEST
 1499              	
 1500              	/**************************
 1501              	    MOD	 ( n n -- r )
 1502              	 	Signed divide. Return
 1503              		mod only.
 1504              	**************************/
 1505 35b4 96350000 		_HEADER MODD,3,"MOD"
 1505      034D4F44 
 1506 35bc 504700BF 		_NEST
 1507 35c0 9D350000 		_ADR	SLMOD
 1508 35c4 512D0000 		_ADR	DROP
 1509 35c8 272A0000 		_UNNEST
 1510              	
 1511              	/*************************
 1512              	    /	   ( n n -- q )
 1513              	 	Signed divide. Return
 1514              		quotient only.
 1515              	**************************/
 1516 35cc B8350000 		_HEADER SLASH,1,"/"
 1516      012F00BF 
 1517 35d4 504700BF 		_NEST
 1518 35d8 9D350000 		_ADR	SLMOD
 1519 35dc 712D0000 		_ADR	SWAP
 1520 35e0 512D0000 		_ADR	DROP
 1521 35e4 272A0000 		_UNNEST
 1522              	
 1523              	//******************************
 1524              	//  */MOD	( n1 n2 n3 -- r q )
 1525              	/* 	Multiply n1 and n2, then 
 1526              		divide by n3. Return 
 1527              		mod and quotient.
 1528              	******************************/
 1529 35e8 D0350000 		_HEADER SSMOD,5,"*/MOD"
 1529      052A2F4D 
ARM GAS  forth.s 			page 131


 1529      4F4400BF 
 1530 35f4 504700BF 		_NEST
 1531 35f8 DD2C0000 		_ADR	TOR
 1532 35fc 6D2E0000 		_ADR	MSTAR
 1533 3600 992C0000 		_ADR	RFROM
 1534 3604 01340000 		_ADR	MSMOD
 1535 3608 272A0000 		_UNNEST
 1536              	
 1537              	//*******************************
 1538              	//  */ ( n1 n2 n3 -- q )
 1539              	/* 	Multiply n1 by n2, then 
 1540              		divide by n3. Return quotient
 1541              		only.
 1542              	*******************************/
 1543 360c EC350000 		_HEADER STASL,2,"*/"
 1543      022A2F00 
 1544 3614 504700BF 		_NEST
 1545 3618 F5350000 		_ADR	SSMOD
 1546 361c 712D0000 		_ADR	SWAP
 1547 3620 512D0000 		_ADR	DROP
 1548 3624 272A0000 		_UNNEST
 1549              	
 1550              	/*******************
 1551              	  Miscellaneous
 1552              	*******************/
 1553              	
 1554              	/*************************
 1555              	    ALIGNED	( b -- a )
 1556              	 	Align address to the 
 1557              		cell boundary.
 1558              	**************************/
 1559 3628 10360000 		_HEADER ALGND,7,"ALIGNED"
 1559      07414C49 
 1559      474E4544 
 1560 3634 06F10306 		ADD	TOS,TOS,#3
 1561 3638 6FF00305 		MVN	WP,#3
 1562 363c 06EA0506 		AND	TOS,TOS,WP
 1563 3640 FFF7EEB9 		_NEXT
 1564              	
 1565              	/****************************
 1566              	    >CHAR	( c -- c )
 1567              	 	Filter non-printing 
 1568              		characters.
 1569              	****************************/
 1570 3644 2C360000 		_HEADER TCHAR,5,">CHAR"
 1570      053E4348 
 1570      415200BF 
 1571 3650 504700BF 		_NEST
 1572 3654 E72B0000 		_DOLIT  0x7F
 1572      7F000000 
 1573 365c A52D0000 		_ADR	ANDD
 1574 3660 612D0000 		_ADR	DUPP	// mask msb
 1575 3664 E12E0000 		_ADR	BLANK
 1576 3668 E72B0000 		_DOLIT 	127
 1576      7F000000 
 1577 3670 99330000 		_ADR	WITHI	// check for printable
 1578 3674 31300000 		_ADR	INVER
ARM GAS  forth.s 			page 132


 1579 3678 272C0000 		_QBRAN	TCHA1
 1579      8C360000 
 1580 3680 512D0000 		_ADR	DROP
 1581 3684 E72B0000 		_DOLIT 	'_'	// replace non-printables
 1581      5F000000 
 1582              	TCHA1:
 1583 368c 272A0000 		  _UNNEST
 1584              	
 1585              	/************************
 1586              	    DEPTH	( -- n )
 1587              	 	Return the depth of
 1588              		the data stack.
 1589              	***********************/
 1590 3690 48360000 		_HEADER DEPTH,5,"DEPTH"
 1590      05444550 
 1590      544800BF 
 1591 369c 4FF68062 		_MOV32 T2,SPP 
 1591      C2F20102 
 1592 36a4 A2EB0702 		SUB	T2,T2,DSP
 1593 36a8 47F8046D 		_PUSH
 1594 36ac 4FEAA206 		ASR	TOS,T2,#2
 1595 36b0 FFF7B6B9 		_NEXT
 1596              	
 1597              	/*****************************
 1598              	    PICK	( ... +n -- ... w )
 1599              	 	Copy the nth stack item 
 1600              		to tos.
 1601              	******************************/
 1602 36b4 94360000 		_HEADER PICK,4,"PICK"
 1602      04504943 
 1602      4B0000BF 
 1603 36c0 504700BF 		_NEST
 1604 36c4 812E0000 		_ADR	ONEP
 1605 36c8 F52E0000 		_ADR	CELLS
 1606 36cc 2D2D0000 		_ADR	SPAT
 1607 36d0 252E0000 		_ADR	PLUS
 1608 36d4 6D2C0000 		_ADR	AT
 1609 36d8 272A0000 		_UNNEST
 1610              	
 1611              	/*********************
 1612              	  Memory access
 1613              	*********************/
 1614              	
 1615              	/*************************
 1616              	    HERE	( -- a )
 1617              	 	Return the top of
 1618              		the code dictionary.
 1619              	*************************/
 1620 36dc B8360000 		_HEADER HERE,4,"HERE"
 1620      04484552 
 1620      450000BF 
 1621 36e8 504700BF 		_NEST
 1622 36ec 15330000 		_ADR	CPP
 1623 36f0 6D2C0000 		_ADR	AT
 1624 36f4 272A0000 		_UNNEST
 1625              	
 1626              	/***************************	
ARM GAS  forth.s 			page 133


 1627              	    PAD	 ( -- a )
 1628              	 	Return the address of 
 1629              		a temporary buffer.
 1630              	***************************/
 1631 36f8 E0360000 		_HEADER PAD,3,"PAD"
 1631      03504144 
 1632 3700 504700BF 		_NEST
 1633 3704 E9360000 		_ADR	HERE
 1634 3708 E72B0000 		_DOLIT 80
 1634      50000000 
 1635 3710 252E0000 		_ADR PLUS 
 1636 3714 272A0000 		_UNNEST
 1637              	
 1638              	/***********************
 1639              	    TIB	 ( -- a )
 1640              	 	Return the address 
 1641              		of the terminal 
 1642              		input buffer.
 1643              	************************/
 1644 3718 FC360000 		_HEADER TIB,3,"TIB"
 1644      03544942 
 1645 3720 47F8046D 		_PUSH
 1646 3724 666B     		ldr TOS,[UP,#TIBUF]
 1647 3726 FFF77BB9 		_NEXT
 1648              	
 1649              	/*************************
 1650              	    @EXECUTE	( a -- )
 1651              	 	Execute vector stored
 1652              		in address a.
 1653              	*************************/
 1654 372a 1C370000 		_HEADER ATEXE,8,"@EXECUTE"
 1654      08404558 
 1654      45435554 
 1654      4500
 1655 3738 3500     		MOVS	WP,TOS
 1656 373a 57F8046B 		_POP
 1657 373e 2D68     		LDR	WP,[WP]
 1658 3740 45F00105 		ORR	WP,WP,#1
 1659 3744 18BF     	    IT NE 
 1660 3746 2847     		BXNE	WP
 1661 3748 FFF76AB9 		_NEXT
 1662              	
 1663              	/*******************************
 1664              	    CMOVE	( b1 b2 u -- )
 1665              	 	Copy u bytes from b1 to b2.
 1666              	********************************/
 1667 374c 2E370000 		_HEADER CMOVE,5,"CMOVE"
 1667      05434D4F 
 1667      564500BF 
 1668 3758 57F8042B 		LDR	T2,[DSP],#4
 1669 375c 57F8043B 		LDR	T3,[DSP],#4
 1670 3760 03E0     		B CMOV1
 1671              	CMOV0:
 1672 3762 13F8015B 		LDRB	WP,[T3],#1
 1673 3766 02F8015B 		STRB	WP,[T2],#1
 1674              	CMOV1:
 1675 376a 3600     		MOVS	TOS,TOS
ARM GAS  forth.s 			page 134


 1676 376c 02D0     		BEQ	CMOV2
 1677 376e A6F10106 		SUB	TOS,TOS,#1
 1678 3772 F6E7     		B CMOV0
 1679              	CMOV2:
 1680 3774 57F8046B 		_POP
 1681 3778 FFF752B9 		_NEXT
 1682              	
 1683              	/***************************
 1684              	    MOVE	( a1 a2 u -- )
 1685              	 	Copy u words from a1 to a2.
 1686              	*******************************/
 1687 377c 50370000 		_HEADER MOVE,4,"MOVE"
 1687      044D4F56 
 1687      450000BF 
 1688 3788 4FF00400 		MOV T0,#4 
 1689 378c 06F10306 		ADD TOS,#3 
 1690 3790 26F00306 		BIC TOS,#3
 1691 3794 57F8041B 		LDR	T1,[DSP],#4 // dest
 1692 3798 57F8042B 		LDR	T2,[DSP],#4 // src 
 1693 379c 8A42     		CMP T2,T1 
 1694 379e 08D5     		BPL MOVE1
 1695 37a0 6FF00300 		MOV T0,#-4 
 1696 37a4 3144     		ADD T1,TOS
 1697 37a6 3244     		ADD T2,TOS 
 1698 37a8 01E0     		B MOVE3
 1699              	MOVE0:
 1700 37aa 1568     		LDR	WP,[T2]
 1701 37ac 0D60     		STR	WP,[T1]
 1702              	MOVE3: 
 1703 37ae 0144     		ADD T1,T0 
 1704 37b0 0244     		ADD T2,T0 
 1705              	MOVE1:
 1706 37b2 3600     		MOVS TOS,TOS
 1707 37b4 02D0     		BEQ	MOVE2
 1708 37b6 A6F10406 		SUB	TOS,TOS,#4
 1709 37ba F6E7     		B MOVE0
 1710              	MOVE2:
 1711 37bc 57F8046B 		_POP
 1712 37c0 FFF72EB9 		_NEXT
 1713              	
 1714              	/**************************
 1715              	    FILL	( b u c -- )
 1716              	 	Fill u bytes of character
 1717              		c to area beginning at b.
 1718              	******************************/
 1719 37c4 80370000 		_HEADER FILL,4,"FILL"
 1719      0446494C 
 1719      4C0000BF 
 1720 37d0 03CF     		LDMFD DSP!,{T0,T1} 
 1721 37d2 0000     		MOVS T0,T0 
 1722 37d4 03D0     		BEQ FILL2
 1723              	FILL1:
 1724 37d6 01F8016B 		STRB	TOS,[T1],#1
 1725 37da 0138     		SUBS	T0,T0,#1
 1726 37dc FBD1     		BNE FILL1
 1727              	FILL2:
 1728 37de 57F8046B 		_POP
ARM GAS  forth.s 			page 135


 1729 37e2 FFF71DB9 		_NEXT
 1730              	
 1731              	/*****************************
 1732              	    PACK$	( b u a -- a )
 1733              	 	Build a counted word with
 1734              		u characters from b. 
 1735              		Null fill.
 1736              	*****************************/
 1737 37e6 C8370000 		_HEADER PACKS,5,"PACK$"
 1737      05504143 
 1737      4B24
 1738 37f0 504700BF 		_NEST
 1739 37f4 35360000 		_ADR	ALGND
 1740 37f8 612D0000 		_ADR	DUPP
 1741 37fc DD2C0000 		_ADR	TOR		// strings only on cell boundary
 1742 3800 852D0000 		_ADR	OVER
 1743 3804 252E0000 		_ADR	PLUS
 1744 3808 812E0000 		_ADR	ONEP 
 1745 380c E72B0000 		_DOLIT 	0xFFFFFFFC
 1745      FCFFFFFF 
 1746 3814 A52D0000 		_ADR	ANDD			// count mod cell
 1747 3818 E72B0000 		_DOLIT 	0
 1747      00000000 
 1748 3820 712D0000 		_ADR	SWAP
 1749 3824 592C0000 		_ADR	STORE			// null fill cell
 1750 3828 C92C0000 		_ADR	RAT
 1751 382c 992F0000 		_ADR	DDUP
 1752 3830 792C0000 		_ADR	CSTOR
 1753 3834 812E0000 		_ADR	ONEP			// save count
 1754 3838 712D0000 		_ADR	SWAP
 1755 383c 59370000 		_ADR	CMOVE
 1756 3840 992C0000 		_ADR	RFROM
 1757 3844 272A0000 		_UNNEST   			// move string
 1758              	
 1759              	/***********************************
 1760              	  Numeric output, single precision
 1761              	***********************************/
 1762              	
 1763              	/**************************
 1764              	    DIGIT	( u -- c )
 1765              	 	Convert digit u to 
 1766              		a character.
 1767              	***************************/
 1768 3848 EA370000 		_HEADER DIGIT,5,"DIGIT"
 1768      05444947 
 1768      495400BF 
 1769 3854 504700BF 		_NEST
 1770 3858 E72B0000 		_DOLIT 9
 1770      09000000 
 1771 3860 852D0000 		_ADR	OVER
 1772 3864 FD300000 		_ADR	LESS
 1773 3868 E72B0000 		_DOLIT	7
 1773      07000000 
 1774 3870 A52D0000 		_ADR	ANDD
 1775 3874 252E0000 		_ADR	PLUS
 1776 3878 E72B0000 		_DOLIT	'0'
 1776      30000000 
ARM GAS  forth.s 			page 136


 1777 3880 252E0000 		_ADR	PLUS 
 1778 3884 272A0000 		_UNNEST
 1779              	
 1780              	/*********************************
 1781              	    EXTRACT	( ud base -- ud c )
 1782              	 	Extract the least significant
 1783              		digit from positive double.
 1784              	**********************************/
 1785 3888 4C380000 		_HEADER EXTRC,7,"EXTRACT"
 1785      07455854 
 1785      52414354 
 1786 3894 504700BF 		_NEST
 1787 3898 BD340000 		_ADR	DSLMOD
 1788 389c 492F0000 		_ADR	ROT
 1789 38a0 55380000 		_ADR	DIGIT
 1790 38a4 272A0000 		_UNNEST
 1791              	
 1792              	/***************************
 1793              	    <#	  ( -- )
 1794              	 	Initiate the numeric
 1795              		output process.
 1796              	****************************/
 1797 38a8 8C380000 		_HEADER BDIGS,2,"<#"
 1797      023C2300 
 1798 38b0 504700BF 		_NEST
 1799 38b4 01370000 		_ADR	PAD
 1800 38b8 E9320000 		_ADR	HLD
 1801 38bc 592C0000 		_ADR	STORE
 1802 38c0 272A0000 		_UNNEST
 1803              	
 1804              	/*********************************
 1805              	    HOLD	( c -- )
 1806              	 	Insert a character into the 
 1807              		numeric output string.
 1808              	**********************************/
 1809 38c4 AC380000 		_HEADER HOLD,4,"HOLD"
 1809      04484F4C 
 1809      440000BF 
 1810 38d0 504700BF 		_NEST
 1811 38d4 E9320000 		_ADR	HLD
 1812 38d8 6D2C0000 		_ADR	AT
 1813 38dc 912E0000 		_ADR	ONEM
 1814 38e0 612D0000 		_ADR	DUPP
 1815 38e4 E9320000 		_ADR	HLD
 1816 38e8 592C0000 		_ADR	STORE
 1817 38ec 792C0000 		_ADR	CSTOR
 1818 38f0 272A0000 		_UNNEST
 1819              	
 1820              	/***********************
 1821              	    #	   ( ud -- ud )
 1822              	 	Extract one digit 
 1823              		from ud and append 
 1824              		the digit to output 
 1825              		string.
 1826              	*************************/
 1827 38f4 C8380000 		_HEADER DIG,1,"#"
 1827      012300BF 
ARM GAS  forth.s 			page 137


 1828 38fc 504700BF 		_NEST
 1829 3900 55320000 		_ADR	BASE
 1830 3904 6D2C0000 		_ADR	AT
 1831 3908 95380000 		_ADR	EXTRC
 1832 390c D1380000 		_ADR	HOLD
 1833 3910 272A0000 		_UNNEST
 1834              	
 1835              	/***************************
 1836              	    #S	  ( ud -- 0 )
 1837              	 	Convert ud until all 
 1838              		digits are added to 
 1839              		the output string.
 1840              	***************************/
 1841 3914 F8380000 		_HEADER DIGS,2,"#S"
 1841      02235300 
 1842 391c 504700BF 		_NEST
 1843              	DIGS1:
 1844 3920 FD380000 	    _ADR	DIG
 1845 3924 992F0000 		_ADR	DDUP
 1846 3928 B92D0000 		_ADR    ORR 
 1847 392c 272C0000 		_QBRAN 	DIGS2
 1847      3C390000 
 1848 3934 3B2C0000 		_BRAN	DIGS1
 1848      20390000 
 1849              	DIGS2:
 1850 393c 512D0000 		 _ADR DROP 
 1851 3940 272A0000 		 _UNNEST
 1852              	
 1853              	/*********************
 1854              	    SIGN	( n -- )
 1855              	 	Add a minus sign
 1856              		to the numeric
 1857              		output string.
 1858              	*********************/
 1859 3944 18390000 		_HEADER SIGN,4,"SIGN"
 1859      04534947 
 1859      4E0000BF 
 1860 3950 504700BF 		_NEST
 1861 3954 952D0000 		_ADR	ZLESS
 1862 3958 272C0000 		_QBRAN	SIGN1
 1862      6C390000 
 1863 3960 E72B0000 		_DOLIT '-'
 1863      2D000000 
 1864 3968 D1380000 		_ADR	HOLD
 1865              	SIGN1:
 1866 396c 272A0000 		  _UNNEST
 1867              	
 1868              	/*************************
 1869              	    #>  ( w -- b u )
 1870              	 	Prepare the output 
 1871              		word to be TYPE'd.
 1872              	************************/
 1873 3970 48390000 		_HEADER EDIGS,2,"#>"
 1873      02233E00 
 1874 3978 504700BF 		_NEST
 1875 397c 512D0000 		_ADR	DROP
 1876 3980 E9320000 		_ADR	HLD
ARM GAS  forth.s 			page 138


 1877 3984 6D2C0000 		_ADR	AT
 1878 3988 01370000 		_ADR	PAD
 1879 398c 852D0000 		_ADR	OVER
 1880 3990 352E0000 		_ADR	SUBB
 1881 3994 272A0000 		_UNNEST
 1882              	
 1883              	/**************************
 1884              	    str	 ( n -- b u )
 1885              	 	Convert a signed 
 1886              		integer to a numeric 
 1887              		string.
 1888              	hidden word used by compiler
 1889              	***************************/
 1890              	STRR:
 1891 3998 504700BF 		_NEST
 1892 399c 75340000 		_ADR 	STOD 
 1893 39a0 612D0000 		_ADR	DUPP
 1894 39a4 DD2C0000 		_ADR	TOR
 1895 39a8 CD2F0000 		_ADR	DABS
 1896 39ac B1380000 		_ADR	BDIGS
 1897 39b0 1D390000 		_ADR	DIGS
 1898 39b4 992C0000 		_ADR	RFROM
 1899 39b8 51390000 		_ADR	SIGN
 1900 39bc 79390000 		_ADR	EDIGS
 1901 39c0 272A0000 		_UNNEST
 1902              	
 1903              	/*************************
 1904              	    HEX	 ( -- )
 1905              	 	Use radix 16 as 
 1906              		base for numeric 
 1907              		conversions.
 1908              	*************************/
 1909 39c4 74390000 		_HEADER HEX,3,"HEX"
 1909      03484558 
 1910 39cc 504700BF 		_NEST
 1911 39d0 E72B0000 		_DOLIT 16
 1911      10000000 
 1912 39d8 55320000 		_ADR	BASE
 1913 39dc 592C0000 		_ADR	STORE
 1914 39e0 272A0000 		_UNNEST
 1915              	
 1916              	/**************************
 1917              		BIN ( -- )
 1918              		Use radix 2 as 
 1919              		base for numeric 
 1920              		conversion 
 1921              	**************************/
 1922 39e4 C8390000 		_HEADER BIN,3,"BIN"
 1922      0342494E 
 1923 39ec 504700BF 		_NEST 
 1924 39f0 E72B0000 		_DOLIT 2 
 1924      02000000 
 1925 39f8 55320000 		_ADR BASE 
 1926 39fc 592C0000 		_ADR STORE
 1927 3a00 272A0000 		_UNNEST 
 1928              	
 1929              	/************************
ARM GAS  forth.s 			page 139


 1930              	    DECIMAL	( -- )
 1931              	 	Use radix 10 as base
 1932              		for numeric conversions.
 1933              	*************************/
 1934 3a04 E8390000 		_HEADER DECIM,7,"DECIMAL"
 1934      07444543 
 1934      494D414C 
 1935 3a10 504700BF 		_NEST
 1936 3a14 E72B0000 		_DOLIT 10
 1936      0A000000 
 1937 3a1c 55320000 		_ADR	BASE
 1938 3a20 592C0000 		_ADR	STORE
 1939 3a24 272A0000 		_UNNEST
 1940              	
 1941              	/************************************
 1942              	  Numeric input, single precision
 1943              	***********************************/
 1944              	
 1945              	/***********************************
 1946              	    DIGIT?	( c base -- u t )
 1947              	 	Convert a character to its 
 1948              		numeric value. A flag 
 1949              		indicates success.
 1950              	**********************************/
 1951 3a28 083A0000 		_HEADER DIGTQ,6,"DIGIT?"
 1951      06444947 
 1951      49543F00 
 1952 3a34 504700BF 		_NEST
 1953 3a38 DD2C0000 		_ADR	TOR
 1954 3a3c E72B0000 		_DOLIT 	'0'
 1954      30000000 
 1955 3a44 352E0000 		_ADR	SUBB
 1956 3a48 E72B0000 		_DOLIT 9
 1956      09000000 
 1957 3a50 852D0000 		_ADR	OVER
 1958 3a54 FD300000 		_ADR	LESS
 1959 3a58 272C0000 		_QBRAN	DGTQ1
 1959      803A0000 
 1960 3a60 E72B0000 		_DOLIT 7
 1960      07000000 
 1961 3a68 352E0000 		_ADR	SUBB
 1962 3a6c 612D0000 		_ADR	DUPP
 1963 3a70 E72B0000 		_DOLIT	10
 1963      0A000000 
 1964 3a78 FD300000 		_ADR	LESS
 1965 3a7c B92D0000 		_ADR	ORR
 1966              	DGTQ1:
 1967 3a80 612D0000 		_ADR	DUPP
 1968 3a84 992C0000 		_ADR	RFROM
 1969 3a88 E5300000 		_ADR	ULESS
 1970 3a8c 272A0000 		_UNNEST
 1971              	
 1972              	/***********************************
 1973              	 parse digits of positive integer 
 1974              	  d digits count 
 1975              	  n parsed integer
 1976              	  a+ updated pointer  
ARM GAS  forth.s 			page 140


 1977              	************************************/
 1978              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1979 3a90 504700BF 	    _NEST
 1980 3a94 55320000 	    _ADR BASE 
 1981 3a98 6D2C0000 	    _ADR AT 
 1982 3a9c DD2C0000 	    _ADR TOR
 1983 3aa0 B5310000 	1:  _ADR COUNT 
 1984 3aa4 C92C0000 	    _ADR RAT 
 1985 3aa8 353A0000 	    _ADR DIGTQ // d n a c f 
 1986 3aac 272C0000 	    _QBRAN 4f
 1986      1C3B0000 
 1987 3ab4 492F0000 	    _ADR ROT 
 1988 3ab8 C92C0000 		_ADR RAT 
 1989 3abc 592E0000 	    _ADR UMSTA 
 1990 3ac0 272C0000 		_QBRAN 2f // overflow control
 1990      D03A0000 
 1991 3ac8 3B2C0000 		_BRAN 3f 
 1991      043B0000 
 1992 3ad0 612D0000 	2:	_ADR DUPP 
 1993 3ad4 952D0000 		_ADR ZLESS // if 0< is overflow 
 1994 3ad8 272C0000 		_QBRAN 2f 
 1994      E83A0000 
 1995 3ae0 3B2C0000 		_BRAN 3f 
 1995      043B0000 
 1996 3ae8 252E0000 	2:  _ADR PLUS // d a n 
 1997 3aec 712D0000 	    _ADR SWAP // d n a  
 1998 3af0 492F0000 	    _ADR ROT 
 1999 3af4 812E0000 	    _ADR ONEP 
 2000 3af8 5D2F0000 	    _ADR NROT
 2001 3afc 3B2C0000 	    _BRAN 1b 
 2001      A03A0000 
 2002 3b04 65460000 	3:  _ABORQ 16, " number too big "
 2002      10206E75 
 2002      6D626572 
 2002      20746F6F 
 2002      20626967 
 2003 3b1c 512D0000 	4:  _ADR DROP 
 2004 3b20 912E0000 	    _ADR ONEM  // decrement a 
 2005 3b24 992C0000 	    _ADR RFROM 
 2006 3b28 512D0000 	    _ADR DROP 
 2007 3b2c 272A0000 	    _UNNEST 
 2008              	
 2009              	/**************************
 2010              	 CHAR? 
 2011              	 check for charcter c 
 2012              	 move pointer if *a==c  
 2013              	**************************/
 2014              	CHARQ: // ( a c -- a+ t | a f )
 2015 3b30 3868     	    ldr T0,[DSP]
 2016 3b32 10F8011B 	    ldrb T1,[T0],#1 
 2017 3b36 3246     	    mov T2,TOS 
 2018 3b38 86EA0606 	    eor TOS,TOS
 2019 3b3c 9142     	    cmp T1,T2
 2020 3b3e 02D1     	    bne 1f 
 2021 3b40 3860     	    str T0,[DSP]
 2022 3b42 6FEA0606 	    mvn TOS,TOS  
 2023 3b46 FEF76BBF 	1:  _NEXT
ARM GAS  forth.s 			page 141


 2024              	
 2025              	/*********************************
 2026              	   NEG? ( a -- a|a+  f|t )
 2027              	   skip '-'|'+' return -1 if '-' 
 2028              	   else return 0 
 2029              	*********************************/
 2030              	NEGQ: 
 2031 3b4a 504700BF 	    _NEST 
 2032 3b4e E72B0000 	    _DOLIT '-' 
 2032      2D000000 
 2033 3b56 313B0000 	    _ADR CHARQ
 2034 3b5a 612D0000 	    _ADR DUPP  
 2035 3b5e 272C0000 	    _QBRAN 1f
 2035      6E3B0000 
 2036 3b66 3B2C0000 	    _BRAN 2f
 2036      863B0000 
 2037 3b6e 712D0000 	1:  _ADR SWAP 
 2038 3b72 E72B0000 	    _DOLIT '+'
 2038      2B000000 
 2039 3b7a 313B0000 	    _ADR CHARQ
 2040 3b7e 512D0000 	    _ADR DROP  
 2041 3b82 712D0000 		_ADR SWAP 
 2042 3b86 272A0000 	2:  _UNNEST 
 2043              	
 2044              	
 2045              	/**********************************
 2046              	    INT?	( a -- n T | a F )
 2047              	 	parse string  at 'a' for 
 2048              		integer. Push a flag on TOS.
 2049              		integer form:
 2050              			[-]hex_digit+  | 
 2051              			$[-]hex_digit+ |
 2052              			%[-]bin_digit+ | 
 2053              			[-]dec_digit+ 
 2054              	**********************************/
 2055 3b8a 2C3A0000 		_HEADER INTQ,4,"INT?"
 2055      04494E54 
 2055      3F00
 2056 3b94 504700BF 		_NEST
 2057              	// save BASE 	
 2058 3b98 55320000 		_ADR	BASE
 2059 3b9c 6D2C0000 		_ADR	AT
 2060 3ba0 DD2C0000 		_ADR	TOR
 2061 3ba4 E72B0000 		_DOLIT	0      // a 0 
 2061      00000000 
 2062 3bac 852D0000 		_ADR	OVER   // a 0 a 
 2063 3bb0 B5310000 		_ADR	COUNT  // a 0 a+ cnt 
 2064 3bb4 712D0000 		_ADR    SWAP   
 2065 3bb8 E72B0000 		_DOLIT  '$' 
 2065      24000000 
 2066 3bc0 313B0000 		_ADR    CHARQ 
 2067 3bc4 272C0000 		_QBRAN  0f 
 2067      D83B0000 
 2068              	// hexadecimal number 
 2069 3bcc CD390000 		_ADR    HEX
 2070 3bd0 3B2C0000 		_BRAN   1f 
 2070      F03B0000 
ARM GAS  forth.s 			page 142


 2071 3bd8 E72B0000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2071      25000000 
 2072 3be0 313B0000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2073 3be4 272C0000 		_QBRAN  2f
 2073      FC3B0000 
 2074 3bec ED390000 		_ADR	BIN 
 2075              	1:	// decrement cnt 
 2076 3bf0 712D0000 	    _ADR	SWAP 
 2077 3bf4 912E0000 		_ADR	ONEM 
 2078 3bf8 712D0000 		_ADR	SWAP  // -- a 0 cnt- a  
 2079              	2: // check if negative number 
 2080 3bfc 612D0000 		_ADR    DUPP 
 2081 3c00 4B3B0000 		_ADR    NEGQ 
 2082 3c04 DD2C0000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2083 3c08 612D0000 		_ADR    DUPP 
 2084 3c0c 492F0000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2085 3c10 352E0000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2086 3c14 272C0000 		_QBRAN  2f  
 2086      283C0000 
 2087 3c1c 712D0000 		_ADR    SWAP  // -- a 0 a cnt 
 2088 3c20 912E0000 		_ADR    ONEM  // -- a 0 a cnt--
 2089 3c24 712D0000 		_ADR    SWAP   
 2090 3c28 712D0000 	2:  _ADR    SWAP 
 2091 3c2c DD2C0000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2092 3c30 E72B0000 		_DOLIT  0
 2092      00000000 
 2093 3c38 612D0000 		_ADR	DUPP 
 2094 3c3c 492F0000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2095 3c40 913A0000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2096 3c44 512D0000 		_ADR	DROP // a 0 d n 
 2097 3c48 712D0000 		_ADR	SWAP  // a 0 n d 
 2098 3c4c 992C0000 		_ADR	RFROM // a 0 n d cnt  
 2099 3c50 AD300000 		_ADR	EQUAL // d == cnt ? 
 2100 3c54 272C0000 		_QBRAN  5f // digits left, not an integer 
 2100      843C0000 
 2101 3c5c 992C0000 	2:	_ADR	RFROM  // sign 
 2102 3c60 272C0000 		_QBRAN  3f   // positive integer 
 2102      6C3C0000 
 2103 3c68 45300000 		_ADR	NEGAT
 2104              	3:	
 2105 3c6c 5D2F0000 		_ADR	NROT  // n a 0 
 2106 3c70 712F0000 		_ADR	DDROP // n  
 2107 3c74 E72B0000 		_DOLIT  -1    // n -1 
 2107      FFFFFFFF 
 2108 3c7c 3B2C0000 		_BRAN   7f  
 2108      8C3C0000 
 2109 3c84 992C0000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2110 3c88 712F0000 	    _ADR	DDROP 
 2111              	7: // restore BASE 
 2112 3c8c 992C0000 		_ADR	RFROM
 2113 3c90 55320000 		_ADR	BASE
 2114 3c94 592C0000 		_ADR	STORE
 2115 3c98 272A0000 		_UNNEST
 2116              	
 2117              	/********************************
 2118              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 2119              	    parse number, integer or float 
ARM GAS  forth.s 			page 143


 2120              	    if not a number return ( a 0 ) 
 2121              	    if integer return ( int -1 ) 
 2122              	    if float return ( float -2 )
 2123              	**********************************/
 2124 3c9c 8E3B0000 	    _HEADER NUMBER,6,"NUMBER"
 2124      064E554D 
 2124      42455200 
 2125 3ca8 504700BF 	    _NEST 
 2126 3cac 953B0000 	    _ADR INTQ
 2127 3cb0 352F0000 	    _ADR QDUP 
 2128 3cb4 272C0000 	    _QBRAN 2f 
 2128      C03C0000 
 2129 3cbc 272A0000 	    _UNNEST 
 2130 3cc0 BD240000 	2:  _ADR FLOATQ
 2131 3cc4 272A0000 	    _UNNEST 
 2132              	
 2133              	
 2134              	/********************
 2135              	  console I/O
 2136              	********************/
 2137              	
 2138              	/**********************
 2139              	    SPACE	( -- )
 2140              	 	Send the blank 
 2141              		character to 
 2142              		the output device.
 2143              	************************/
 2144 3cc8 A03C0000 		_HEADER SPACE,5,"SPACE"
 2144      05535041 
 2144      434500BF 
 2145 3cd4 504700BF 		_NEST
 2146 3cd8 E12E0000 		_ADR	BLANK
 2147 3cdc F12A0000 		_ADR	EMIT
 2148 3ce0 272A0000 		_UNNEST
 2149              	
 2150              	/***************************
 2151              	    SPACES	( +n -- )
 2152              	 	Send n spaces to the 
 2153              		output device.
 2154              	****************************/
 2155 3ce4 CC3C0000 		_HEADER SPACS,6,"SPACES"
 2155      06535041 
 2155      43455300 
 2156 3cf0 504700BF 		_NEST
 2157 3cf4 E72B0000 		_DOLIT	0
 2157      00000000 
 2158 3cfc 45310000 		_ADR	MAX
 2159 3d00 DD2C0000 		_ADR	TOR
 2160 3d04 3B2C0000 		_BRAN	CHAR2
 2160      103D0000 
 2161              	CHAR1:
 2162 3d0c D53C0000 		_ADR	SPACE
 2163              	CHAR2:
 2164 3d10 092C0000 		_DONXT	CHAR1
 2164      0C3D0000 
 2165 3d18 272A0000 		_UNNEST
 2166              	
ARM GAS  forth.s 			page 144


 2167              	/***********************
 2168              	    TYPE	( b u -- )
 2169              	 	Output u characters 
 2170              		from b.
 2171              	************************/
 2172 3d1c E83C0000 		_HEADER TYPEE,4,"TYPE"
 2172      04545950 
 2172      450000BF 
 2173 3d28 504700BF 		_NEST
 2174 3d2c DD2C0000 		_ADR  TOR   // ( a+1 -- R: u )
 2175 3d30 3B2C0000 		_BRAN	TYPE2
 2175      443D0000 
 2176              	TYPE1:  
 2177 3d38 B5310000 		_ADR  COUNT
 2178 3d3c 51360000 		_ADR TCHAR
 2179 3d40 F12A0000 		_ADR EMIT
 2180              	TYPE2:  
 2181 3d44 092C0000 		_DONXT	TYPE1
 2181      383D0000 
 2182 3d4c 512D0000 		_ADR	DROP
 2183 3d50 272A0000 		_UNNEST
 2184              	
 2185              	/***************************
 2186              	    CR	  ( -- )
 2187              	 	Output a carriage return
 2188              		and a line feed.
 2189              	****************************/
 2190 3d54 203D0000 		_HEADER CR,2,"CR"
 2190      02435200 
 2191 3d5c 504700BF 		_NEST
 2192 3d60 E72B0000 		_DOLIT	CRR
 2192      0D000000 
 2193 3d68 F12A0000 		_ADR	EMIT
 2194 3d6c E72B0000 		_DOLIT	LF
 2194      0A000000 
 2195 3d74 F12A0000 		_ADR	EMIT
 2196 3d78 272A0000 		_UNNEST
 2197              	
 2198              	/******************************************
 2199              	  do_$	( -- a )
 2200              	  Return the address of a compiled string.
 2201              	  adjust return address to skip over it.
 2202              	hidden word used by compiler. 
 2203              	******************************************/
 2204              	DOSTR:
 2205 3d7c 504700BF 		_NEST     
 2206              	/* compiled string address is 2 levels deep */
 2207 3d80 992C0000 		_ADR	RFROM	// { -- a1 }
 2208 3d84 992C0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2209 3d88 612D0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2210 3d8c B5310000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2211 3d90 252E0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2212 3d94 35360000 		_ADR	ALGND	//  end of string
 2213              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2214 3d98 DD2C0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2215 3d9c 712D0000 		_ADR	SWAP	//  count tugged
 2216 3da0 DD2C0000 		_ADR	TOR     //  ( -- a2) is string address
ARM GAS  forth.s 			page 145


 2217 3da4 272A0000 		_UNNEST
 2218              	
 2219              	/******************************************
 2220              	    $"|	( -- a )
 2221              	 	Run time routine compiled by _". 
 2222              		Return address of a compiled string.
 2223              	hidden word used by compiler
 2224              	*****************************************/
 2225              	STRQP:
 2226 3da8 504700BF 		_NEST
 2227 3dac 7D3D0000 		_ADR	DOSTR
 2228 3db0 272A0000 		_UNNEST			// force a call to dostr
 2229              	
 2230              	/*******************************
 2231              	    .$	( a -- )
 2232              	 	Run time routine of ." 
 2233              		Output a compiled string.
 2234              	hidden word used by compiler
 2235              	*******************************/
 2236              	DOTST:
 2237 3db4 504700BF 		_NEST
 2238 3db8 B5310000 		_ADR	COUNT // ( -- a+1 c )
 2239 3dbc 293D0000 		_ADR	TYPEE
 2240 3dc0 272A0000 		_UNNEST
 2241              	
 2242              	/**********************
 2243              	    ."|	( -- )
 2244              	 	Run time routine of ." 
 2245              		Output a compiled string.
 2246              	hidden word used by compiler
 2247              	*****************************/
 2248              	DOTQP:
 2249 3dc4 504700BF 		_NEST
 2250 3dc8 7D3D0000 		_ADR	DOSTR
 2251 3dcc B53D0000 		_ADR	DOTST
 2252 3dd0 272A0000 		_UNNEST
 2253              	
 2254              	/*************************
 2255              		LPAD  ( n+ -- )
 2256              		emit n spaceS + 
 2257              		base character  
 2258              		16 -> $
 2259              		 2 -> %
 2260              		 other -> none 
 2261              	*************************/
 2262              	LPAD:
 2263 3dd4 504700BF 		_NEST 
 2264 3dd8 6D320000 		_ADR BCHR 
 2265 3ddc 6D2C0000 		_ADR  AT 
 2266 3de0 272C0000 		_QBRAN 3f 
 2266      4C3E0000 
 2267 3de8 55320000 		_ADR BASE 
 2268 3dec 6D2C0000 		_ADR AT 
 2269 3df0 612D0000 		_ADR DUPP 
 2270 3df4 E72B0000 		_DOLIT 16
 2270      10000000 
 2271 3dfc AD300000 		_ADR EQUAL 
ARM GAS  forth.s 			page 146


 2272 3e00 272C0000 		_QBRAN 1f
 2272      283E0000 
 2273 3e08 512D0000 		_ADR DROP 
 2274 3e0c E72B0000 		_DOLIT '$'
 2274      24000000 
 2275 3e14 712D0000 	0:	_ADR  SWAP 
 2276 3e18 912E0000 		_ADR  ONEM 
 2277 3e1c F13C0000 		_ADR  SPACS 
 2278 3e20 F12A0000 		_ADR  EMIT 
 2279 3e24 272A0000 		_UNNEST 
 2280 3e28 E72B0000 	1:  _DOLIT 2 
 2280      02000000 
 2281 3e30 AD300000 		_ADR EQUAL 
 2282 3e34 272C0000 		_QBRAN 3f
 2282      4C3E0000 
 2283 3e3c E72B0000 		_DOLIT '%'
 2283      25000000 
 2284 3e44 3B2C0000 		_BRAN 0b   	
 2284      143E0000 
 2285 3e4c F13C0000 	3:	_ADR  SPACS 
 2286 3e50 272A0000 		_UNNEST 
 2287              	
 2288              	
 2289              	/******************************
 2290              	    .R	  ( n +n -- )
 2291              	 	Display an integer in a 
 2292              		field of n columns, 
 2293              		right justified.
 2294              	*******************************/
 2295 3e54 583D0000 		_HEADER DOTR,2,".R"
 2295      022E5200 
 2296 3e5c 504700BF 		_NEST
 2297 3e60 DD2C0000 		_ADR	TOR
 2298 3e64 75340000 		_ADR    STOD 
 2299 3e68 453F0000 		_ADR	DTOA 
 2300 3e6c 992C0000 		_ADR	RFROM
 2301 3e70 852D0000 		_ADR	OVER
 2302 3e74 352E0000 		_ADR	SUBB
 2303 3e78 D53D0000 		_ADR    LPAD  
 2304 3e7c 293D0000 		_ADR	TYPEE
 2305 3e80 272A0000 		_UNNEST
 2306              	
 2307              	
 2308              	/*************************
 2309              	    U.R	 ( u +n -- )
 2310              	 	Display an unsigned 
 2311              		integer in n column, 
 2312              		right justified.
 2313              	***************************/
 2314 3e84 583E0000 		_HEADER UDOTR,3,"U.R"
 2314      03552E52 
 2315 3e8c 504700BF 		_NEST
 2316 3e90 DD2C0000 		_ADR    TOR 
 2317 3e94 E72B0000 		_DOLIT  0
 2317      00000000 
 2318 3e9c 453F0000 		_ADR    DTOA 
 2319 3ea0 992C0000 		_ADR	RFROM
ARM GAS  forth.s 			page 147


 2320 3ea4 852D0000 		_ADR	OVER
 2321 3ea8 352E0000 		_ADR	SUBB
 2322 3eac D53D0000 		_ADR    LPAD  
 2323 3eb0 293D0000 		_ADR	TYPEE
 2324 3eb4 272A0000 		_UNNEST
 2325              	
 2326              	
 2327              	/************************
 2328              	    U.	  ( u -- )
 2329              	 	Display an unsigned 
 2330              		integer in free format.
 2331              	***************************/
 2332 3eb8 883E0000 		_HEADER UDOT,2,"U."
 2332      02552E00 
 2333 3ec0 504700BF 		_NEST
 2334 3ec4 E72B0000 		_DOLIT  0 
 2334      00000000 
 2335 3ecc B1380000 		_ADR	BDIGS
 2336 3ed0 1D390000 		_ADR	DIGS
 2337 3ed4 79390000 		_ADR	EDIGS
 2338 3ed8 E72B0000 		_DOLIT  1 
 2338      01000000 
 2339 3ee0 D53D0000 		_ADR	LPAD  
 2340 3ee4 293D0000 		_ADR	TYPEE
 2341 3ee8 272A0000 		_UNNEST
 2342              	
 2343              	
 2344              	/************************
 2345              	    .	   ( w -- )
 2346              	 	Display an integer 
 2347              		in free format, 
 2348              		preceeded by a space.
 2349              	**************************/
 2350 3eec BC3E0000 		_HEADER DOT,1,"."
 2350      012E00BF 
 2351 3ef4 504700BF 		_NEST
 2352 3ef8 D53C0000 		_ADR    SPACE 
 2353 3efc 55320000 		_ADR	BASE
 2354 3f00 6D2C0000 		_ADR	AT
 2355 3f04 E72B0000 	1:	_DOLIT  10
 2355      0A000000 
 2356 3f0c CD2D0000 		_ADR	XORR	// decimal base?
 2357 3f10 272C0000 		_QBRAN	DOT1
 2357      203F0000 
 2358 3f18 C13E0000 		_ADR	UDOT    // no,display unsigned
 2359 3f1c 272A0000 		_UNNEST			
 2360              	DOT1:
 2361 3f20 75340000 		_ADR    STOD 
 2362 3f24 453F0000 	    _ADR	DTOA
 2363 3f28 E72B0000 		_DOLIT  1 
 2363      01000000 
 2364 3f30 D53D0000 		_ADR	LPAD  
 2365 3f34 293D0000 	1:	_ADR	TYPEE
 2366 3f38 272A0000 		_UNNEST			// yes, display signed
 2367              	
 2368              	
 2369              	/*************************
ARM GAS  forth.s 			page 148


 2370              	  D>A ( d -- p u )
 2371              	  convert double integer to 
 2372              	  ASCII string in pad  
 2373              	input:
 2374              		d    int64 to convert 
 2375              	output:
 2376              		p     pointer to string  
 2377              		u     string length 
 2378              	**************************/
 2379 3f3c F03E0000 		_HEADER DTOA,3,"D>A" 
 2379      03443E41 
 2380 3f44 504700BF 		_NEST
 2381 3f48 612D0000 	    _ADR DUPP 
 2382 3f4c DD2C0000 		_ADR TOR 
 2383 3f50 CD2F0000 		_ADR DABS 
 2384 3f54 B1380000 		_ADR BDIGS
 2385 3f58 1D390000 		_ADR DIGS 
 2386 3f5c 992C0000 		_ADR RFROM 
 2387 3f60 51390000 		_ADR SIGN  
 2388 3f64 79390000 		_ADR EDIGS 
 2389 3f68 272A0000 		_UNNEST 
 2390              	
 2391              	
 2392              	/*************************
 2393              	   D. ( d -- )
 2394              	   display double integer 
 2395              	**************************/
 2396 3f6c 403F0000 		_HEADER DDOT,2,"D."
 2396      02442E00 
 2397 3f74 504700BF 		_NEST
 2398 3f78 D53C0000 		_ADR SPACE 
 2399 3f7c 453F0000 		_ADR DTOA 
 2400 3f80 E72B0000 		_DOLIT 1
 2400      01000000 
 2401 3f88 D53D0000 		_ADR LPAD 
 2402 3f8c 293D0000 		_ADR TYPEE
 2403 3f90 272A0000 		_UNNEST 
 2404              	
 2405              	
 2406              	
 2407              	/***********************
 2408              		H. ( w -- )
 2409              		display integer 
 2410              		in hexadecimal 
 2411              	*********************/
 2412 3f94 703F0000 		_HEADER HDOT,2,"H."
 2412      02482E00 
 2413 3f9c 504700BF 		_NEST 
 2414 3fa0 55320000 		_ADR BASE
 2415 3fa4 6D2C0000 		_ADR AT 
 2416 3fa8 712D0000 		_ADR SWAP
 2417 3fac CD390000 		_ADR HEX
 2418 3fb0 E72B0000 		_DOLIT 0 
 2418      00000000 
 2419 3fb8 B1380000 		_ADR BDIGS
 2420 3fbc 1D390000 		_ADR DIGS
 2421 3fc0 79390000 		_ADR EDIGS
ARM GAS  forth.s 			page 149


 2422 3fc4 D53C0000 		_ADR SPACE
 2423 3fc8 E72B0000 		_DOLIT '$'
 2423      24000000 
 2424 3fd0 F12A0000 		_ADR EMIT 
 2425 3fd4 293D0000 		_ADR TYPEE
 2426 3fd8 55320000 		_ADR BASE
 2427 3fdc 592C0000 		_ADR STORE  
 2428 3fe0 272A0000 		_UNNEST 
 2429              	
 2430              	
 2431              	/***********************
 2432              	    ?	   ( a -- )
 2433              	 	Display the contents
 2434              		in a memory cell.
 2435              	*************************/
 2436 3fe4 983F0000 		_HEADER QUEST,1,"?"
 2436      013F00BF 
 2437 3fec 504700BF 		_NEST
 2438 3ff0 6D2C0000 		_ADR	AT
 2439 3ff4 F53E0000 		_ADR	DOT
 2440 3ff8 272A0000 		_UNNEST
 2441              	
 2442              	/**************
 2443              	  Parsing
 2444              	***************/
 2445              	
 2446              	/*********************************************
 2447              	    parse	( b u c -- b u delta //  string> )
 2448              	 	Scan word delimited by c. 
 2449              		Return found string and its offset.
 2450              	hidden word used by PARSE
 2451              	**********************************************/
 2452              	PARS:
 2453 3ffc 504700BF 		_NEST
 2454 4000 79320000 		_ADR	TEMP
 2455 4004 592C0000 		_ADR	STORE
 2456 4008 852D0000 		_ADR	OVER
 2457 400c DD2C0000 		_ADR	TOR
 2458 4010 612D0000 		_ADR	DUPP
 2459 4014 272C0000 		_QBRAN	PARS8
 2459      10410000 
 2460 401c 912E0000 		_ADR	ONEM
 2461 4020 79320000 		_ADR	TEMP
 2462 4024 6D2C0000 		_ADR	AT
 2463 4028 E12E0000 		_ADR	BLANK
 2464 402c AD300000 		_ADR	EQUAL
 2465 4030 272C0000 		_QBRAN	PARS3
 2465      84400000 
 2466 4038 DD2C0000 		_ADR	TOR
 2467              	PARS1:
 2468 403c E12E0000 		_ADR	BLANK
 2469 4040 852D0000 		_ADR	OVER
 2470 4044 8D2C0000 		_ADR	CAT	 // skip leading blanks 
 2471 4048 352E0000 		_ADR	SUBB
 2472 404c 952D0000 		_ADR	ZLESS
 2473 4050 31300000 		_ADR	INVER
 2474 4054 272C0000 		_QBRAN	PARS2
ARM GAS  forth.s 			page 150


 2474      80400000 
 2475 405c 812E0000 		_ADR	ONEP
 2476 4060 092C0000 		_DONXT	PARS1
 2476      3C400000 
 2477 4068 992C0000 		_ADR	RFROM
 2478 406c 512D0000 		_ADR	DROP
 2479 4070 E72B0000 		_DOLIT	0
 2479      00000000 
 2480 4078 612D0000 		_ADR	DUPP
 2481 407c 272A0000 		_UNNEST
 2482              	PARS2:
 2483 4080 992C0000 		_ADR	RFROM
 2484              	PARS3:
 2485 4084 852D0000 		_ADR	OVER
 2486 4088 712D0000 		_ADR	SWAP
 2487 408c DD2C0000 		_ADR	TOR
 2488              	PARS4:
 2489 4090 79320000 		_ADR	TEMP
 2490 4094 6D2C0000 		_ADR	AT
 2491 4098 852D0000 		_ADR	OVER
 2492 409c 8D2C0000 		_ADR	CAT
 2493 40a0 352E0000 		_ADR	SUBB // scan for delimiter
 2494 40a4 79320000 		_ADR	TEMP
 2495 40a8 6D2C0000 		_ADR	AT
 2496 40ac E12E0000 		_ADR	BLANK
 2497 40b0 AD300000 		_ADR	EQUAL
 2498 40b4 272C0000 		_QBRAN	PARS5
 2498      C0400000 
 2499 40bc 952D0000 		_ADR	ZLESS
 2500              	PARS5:
 2501 40c0 272C0000 		_QBRAN	PARS6
 2501      E4400000 
 2502 40c8 812E0000 		_ADR	ONEP
 2503 40cc 092C0000 		_DONXT	PARS4
 2503      90400000 
 2504 40d4 612D0000 		_ADR	DUPP
 2505 40d8 DD2C0000 		_ADR	TOR
 2506 40dc 3B2C0000 		_BRAN	PARS7
 2506      F8400000 
 2507              	PARS6:
 2508 40e4 992C0000 		_ADR	RFROM
 2509 40e8 512D0000 		_ADR	DROP
 2510 40ec 612D0000 		_ADR	DUPP
 2511 40f0 812E0000 		_ADR	ONEP
 2512 40f4 DD2C0000 		_ADR	TOR
 2513              	PARS7:
 2514 40f8 852D0000 		_ADR	OVER
 2515 40fc 352E0000 		_ADR	SUBB
 2516 4100 992C0000 		_ADR	RFROM
 2517 4104 992C0000 		_ADR	RFROM
 2518 4108 352E0000 		_ADR	SUBB
 2519 410c 272A0000 		_UNNEST
 2520              	PARS8:
 2521 4110 852D0000 		_ADR	OVER
 2522 4114 992C0000 		_ADR	RFROM
 2523 4118 352E0000 		_ADR	SUBB
 2524 411c 272A0000 		_UNNEST
ARM GAS  forth.s 			page 151


 2525              	
 2526              	/************************************
 2527              	    PARSE	( c -- b u //  string> )
 2528              	 	Scan input stream and return 
 2529              		counted string delimited by c.
 2530              	************************************/
 2531 4120 E83F0000 		_HEADER PARSE,5,"PARSE"
 2531      05504152 
 2531      534500BF 
 2532 412c 504700BF 		_NEST
 2533 4130 DD2C0000 		_ADR	TOR
 2534 4134 21370000 		_ADR	TIB
 2535 4138 A5320000 		_ADR	INN
 2536 413c 6D2C0000 		_ADR	AT
 2537 4140 252E0000 		_ADR	PLUS			// current input buffer pointer
 2538 4144 BD320000 		_ADR	NTIB
 2539 4148 6D2C0000 		_ADR	AT
 2540 414c A5320000 		_ADR	INN
 2541 4150 6D2C0000 		_ADR	AT
 2542 4154 352E0000 		_ADR	SUBB			// remaining count
 2543 4158 992C0000 		_ADR	RFROM
 2544 415c FD3F0000 		_ADR	PARS
 2545 4160 A5320000 		_ADR	INN
 2546 4164 6D310000 		_ADR	PSTOR
 2547 4168 272A0000 		_UNNEST
 2548              	
 2549              	/*******************************
 2550              	    .(	  ( -- )
 2551              	 	Output following string 
 2552              		up to next ) .
 2553              	******************************/
 2554 416c 24410000 		_HEADER DOTPR,2,".("
 2554      022E2800 
 2555 4174 504700BF 		_NEST
 2556 4178 E72B0000 		_DOLIT	')'
 2556      29000000 
 2557 4180 2D410000 		_ADR	PARSE
 2558 4184 293D0000 		_ADR	TYPEE
 2559 4188 272A0000 		_UNNEST
 2560              	
 2561              	/************************
 2562              	    (	   ( -- )
 2563              	 	Ignore following 
 2564              		string up to next )
 2565              		A comment.
 2566              	************************/
 2567 418c 70410000 		_HEADER PAREN,IMEDD+1,"("
 2567      812800BF 
 2568 4194 504700BF 		_NEST
 2569 4198 E72B0000 		_DOLIT	')'
 2569      29000000 
 2570 41a0 2D410000 		_ADR	PARSE
 2571 41a4 712F0000 		_ADR	DDROP
 2572 41a8 272A0000 		_UNNEST
 2573              	
 2574              	/*******************
 2575              	    \	   ( -- )
ARM GAS  forth.s 			page 152


 2576              	 	Ignore following 
 2577              		text till the 
 2578              		end of line.
 2579              	********************/
 2580 41ac 90410000 		_HEADER BKSLA,IMEDD+1,"\\"
 2580      815C00BF 
 2581 41b4 504700BF 		_NEST
 2582 41b8 BD320000 		_ADR	NTIB
 2583 41bc 6D2C0000 		_ADR	AT
 2584 41c0 A5320000 		_ADR	INN
 2585 41c4 592C0000 		_ADR	STORE
 2586 41c8 272A0000 		_UNNEST
 2587              	
 2588              	/******************************
 2589              	    CHAR	( -- c )
 2590              	 	Parse next word and
 2591              		return its first character.
 2592              	*******************************/
 2593 41cc B0410000 		_HEADER CHAR,4,"CHAR"
 2593      04434841 
 2593      520000BF 
 2594 41d8 504700BF 		_NEST
 2595 41dc E12E0000 		_ADR	BLANK
 2596 41e0 2D410000 		_ADR	PARSE
 2597 41e4 512D0000 		_ADR	DROP
 2598 41e8 8D2C0000 		_ADR	CAT
 2599 41ec 272A0000 		_UNNEST
 2600              	
 2601              	/**********************************
 2602              		[CHAR] ( -- c )
 2603              		immediate version of CHAR 
 2604              	**********************************/
 2605 41f0 D0410000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2605      C65B4348 
 2605      41525D00 
 2606 41fc 504700BF 		_NEST 
 2607 4200 D9410000 		_ADR CHAR
 2608 4204 25490000 		_ADR LITER 
 2609 4208 272A0000 		_UNNEST 
 2610              	
 2611              	/**********************************
 2612              	    WORD	( c -- a //  string> )
 2613              	 	Parse a word from input stream
 2614              		and copy it to code dictionary.
 2615              	***********************************/
 2616 420c F4410000 		_HEADER WORDD,4,"WORD"
 2616      04574F52 
 2616      440000BF 
 2617 4218 504700BF 		_NEST
 2618 421c 2D410000 		_ADR	PARSE
 2619 4220 E9360000 		_ADR	HERE
 2620 4224 C12E0000 		_ADR	CELLP
 2621 4228 F1370000 		_ADR	PACKS
 2622 422c 272A0000 		_UNNEST
 2623              	
 2624              	/********************************
 2625              	    TOKEN	( -- a //  string> )
ARM GAS  forth.s 			page 153


 2626              	 	Parse a word from input 
 2627              		stream and copy it to 
 2628              		name dictionary.
 2629              	*********************************/
 2630 4230 10420000 		_HEADER TOKEN,5,"TOKEN"
 2630      05544F4B 
 2630      454E00BF 
 2631 423c 504700BF 		_NEST
 2632 4240 E12E0000 		_ADR	BLANK
 2633 4244 19420000 		_ADR	WORDD
 2634 4248 31440000 		_ADR	UPPER 
 2635 424c 272A0000 		_UNNEST
 2636              	
 2637              	/**********************
 2638              	  Dictionary search
 2639              	***********************/
 2640              	
 2641              	/*************************
 2642              	    NAME>	( na -- ca )
 2643              	 	Return a code address
 2644              		given a name address.
 2645              	**************************/
 2646 4250 34420000 		_HEADER NAMET,5,"NAME>"
 2646      054E414D 
 2646      453E00BF 
 2647 425c 504700BF 		_NEST
 2648 4260 B5310000 		_ADR	COUNT
 2649 4264 E72B0000 		_DOLIT	0x1F
 2649      1F000000 
 2650 426c A52D0000 		_ADR	ANDD
 2651 4270 252E0000 		_ADR	PLUS
 2652 4274 35360000 		_ADR	ALGND
 2653 4278 272A0000 		_UNNEST
 2654              	
 2655              	/***************************************
 2656              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2657              	 	Compare u bytes in two strings. 
 2658              		Return 0 if identical.
 2659              	
 2660              	  Picatout 2020-12-01, 
 2661              	    Because of problem with .align 
 2662              		directive that doesn't fill 
 2663              		with zero's I had to change 
 2664              		the "SAME?" and "FIND" 
 2665              	 	words  to do a byte by byte comparison. 
 2666              	****************************************/
 2667 427c 54420000 		_HEADER SAMEQ,5,"SAME?"
 2667      0553414D 
 2667      453F00BF 
 2668 4288 504700BF 		_NEST
 2669 428c DD2C0000 		_ADR	TOR
 2670 4290 3B2C0000 		_BRAN	SAME2
 2670      D4420000 
 2671              	SAME1:
 2672 4298 852D0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2673 429c C92C0000 		_ADR	RAT   // a1 a2 a1 u 
 2674 42a0 252E0000 		_ADR	PLUS  // a1 a2 a1+u 
ARM GAS  forth.s 			page 154


 2675 42a4 8D2C0000 		_ADR	CAT	   // a1 a2 c1    		
 2676 42a8 852D0000 		_ADR	OVER  // a1 a2 c1 a2 
 2677 42ac C92C0000 		_ADR	RAT    
 2678 42b0 252E0000 		_ADR	PLUS    
 2679 42b4 8D2C0000 		_ADR	CAT	  // a1 a2 c1 c2
 2680 42b8 352E0000 		_ADR	SUBB  
 2681 42bc 352F0000 		_ADR	QDUP
 2682 42c0 272C0000 		_QBRAN	SAME2
 2682      D4420000 
 2683 42c8 992C0000 		_ADR	RFROM
 2684 42cc 512D0000 		_ADR	DROP
 2685 42d0 272A0000 		_UNNEST	// strings not equal
 2686              	SAME2:
 2687 42d4 092C0000 		_DONXT	SAME1
 2687      98420000 
 2688 42dc E72B0000 		_DOLIT	0
 2688      00000000 
 2689 42e4 272A0000 		_UNNEST	// strings equal
 2690              	
 2691              	/***********************************
 2692              	    FIND	( a na -- ca na | a F )
 2693              	 	Search a vocabulary for a string.
 2694              		Return ca and na if succeeded.
 2695              	hidden word used by NAME?
 2696              	
 2697              	  Picatout 2020-12-01,  
 2698              		 Modified from original. 
 2699              	   See comment for word "SAME?" 
 2700              	************************************/
 2701              	FIND:
 2702 42e8 504700BF 		_NEST
 2703 42ec 712D0000 		_ADR	SWAP			// na a	
 2704 42f0 B5310000 		_ADR	COUNT			// na a+1 count
 2705 42f4 612D0000 		_ADR	DUPP 
 2706 42f8 79320000 		_ADR	TEMP
 2707 42fc 592C0000 		_ADR	STORE			// na a+1 count 
 2708 4300 DD2C0000 		_ADR  TOR		// na a+1  R: count  
 2709 4304 712D0000 		_ADR	SWAP			// a+1 na
 2710              	FIND1:
 2711 4308 612D0000 		_ADR	DUPP			// a+1 na na
 2712 430c 272C0000 		_QBRAN	FIND6	// end of vocabulary
 2712      60430000 
 2713 4314 612D0000 		_ADR	DUPP			// a+1 na na
 2714 4318 8D2C0000 		_ADR	CAT			// a+1 na name1
 2715 431c E72B0000 		_DOLIT	MASKK
 2715      1FFFFFFF 
 2716 4324 A52D0000 		_ADR	ANDD
 2717 4328 C92C0000 		_ADR	RAT			// a+1 na name1 count 
 2718 432c CD2D0000 		_ADR	XORR			// a+1 na,  same length?
 2719 4330 272C0000 		_QBRAN	FIND2
 2719      48430000 
 2720 4338 D12E0000 		_ADR	CELLM			// a+1 la
 2721 433c 6D2C0000 		_ADR	AT			// a+1 next_na
 2722 4340 3B2C0000 		_BRAN	FIND1			// try next word
 2722      08430000 
 2723              	FIND2:   
 2724 4348 812E0000 		_ADR	ONEP			// a+1 na+1
ARM GAS  forth.s 			page 155


 2725 434c 79320000 		_ADR	TEMP
 2726 4350 6D2C0000 		_ADR	AT			// a+1 na+1 count
 2727 4354 89420000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2728              	FIND3:	
 2729 4358 3B2C0000 		_BRAN	FIND4
 2729      78430000 
 2730              	FIND6:	
 2731 4360 992C0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2732 4364 512D0000 		_ADR	DROP			// a+1 0
 2733 4368 712D0000 		_ADR	SWAP			// 0 a+1
 2734 436c 912E0000 		_ADR	ONEM			// 0 a
 2735 4370 712D0000 		_ADR	SWAP			// a 0 
 2736 4374 272A0000 		_UNNEST			// return without a match
 2737              	FIND4:	
 2738 4378 272C0000 		_QBRAN	FIND5			// a+1 na+1
 2738      94430000 
 2739 4380 912E0000 		_ADR	ONEM			// a+1 na
 2740 4384 D12E0000 		_ADR	CELLM			// a+4 la
 2741 4388 6D2C0000 		_ADR	AT			// a+1 next_na
 2742 438c 3B2C0000 		_BRAN	FIND1			// compare next name
 2742      08430000 
 2743              	FIND5:	
 2744 4394 992C0000 		_ADR	RFROM			// a+1 na+1 count
 2745 4398 512D0000 		_ADR	DROP			// a+1 na+1
 2746 439c 712D0000 		_ADR	SWAP			// na+1 a+1
 2747 43a0 512D0000 		_ADR	DROP			// na+1
 2748 43a4 912E0000 		_ADR	ONEM			// na
 2749 43a8 612D0000 		_ADR	DUPP			// na na
 2750 43ac 5D420000 		_ADR	NAMET			// na ca
 2751 43b0 712D0000 		_ADR	SWAP			// ca na
 2752 43b4 272A0000 		_UNNEST			//  return with a match
 2753              	
 2754              	/********************************
 2755              	    NAME?	( a -- ca na | a F )
 2756              	 	Search all context vocabularies 
 2757              		for a string.
 2758              	***********************************/
 2759 43b8 80420000 		_HEADER NAMEQ,5,"NAME?"
 2759      054E414D 
 2759      453F00BF 
 2760 43c4 504700BF 		_NEST
 2761 43c8 01330000 		_ADR	CNTXT
 2762 43cc 6D2C0000 		_ADR	AT
 2763 43d0 E9420000 		_ADR	FIND
 2764 43d4 272A0000 		_UNNEST
 2765              	
 2766              	/********************
 2767              	  console input
 2768              	********************/
 2769              	
 2770              	/****************************
 2771              		ASCIZ ( a -- a+ )
 2772              		convert counted string to 
 2773              		null terminated string 
 2774              		in pad.
 2775              	*****************************/
 2776 43d8 BC430000 		_HEADER ASCIZ,5,"ASCIZ" 
ARM GAS  forth.s 			page 156


 2776      05415343 
 2776      495A00BF 
 2777 43e4 504700BF 		_NEST 
 2778 43e8 B5310000 		_ADR COUNT
 2779 43ec 612D0000 		_ADR DUPP
 2780 43f0 DD2C0000 		_ADR TOR 
 2781 43f4 01370000 		_ADR PAD 
 2782 43f8 712D0000 		_ADR SWAP
 2783 43fc 89370000 		_ADR MOVE  
 2784 4400 01370000 		_ADR PAD 
 2785 4404 992C0000 		_ADR RFROM
 2786 4408 252E0000 		_ADR PLUS 
 2787 440c E72B0000 		_DOLIT 0 
 2787      00000000 
 2788 4414 712D0000 		_ADR SWAP  
 2789 4418 792C0000 		_ADR CSTOR
 2790 441c 01370000 		_ADR PAD   
 2791 4420 272A0000 		_UNNEST 
 2792              	
 2793              	/***********************
 2794              		UPPER (cstring -- cstring )
 2795              		convert to upper case in situ
 2796              	*******************************/
 2797 4424 DC430000 		_HEADER UPPER,5,"UPPER"
 2797      05555050 
 2797      455200BF 
 2798 4430 504700BF 		_NEST 
 2799 4434 612D0000 		_ADR DUPP 
 2800 4438 DD2C0000 		_ADR TOR 
 2801 443c B5310000 		_ADR COUNT
 2802 4440 E72B0000 		_DOLIT 0x1f
 2802      1F000000 
 2803 4448 A52D0000 		_ADR ANDD
 2804 444c DD2C0000 		_ADR TOR 
 2805 4450 3B2C0000 		_BRAN 3f
 2805      A4440000 
 2806 4458 612D0000 	1:  _ADR DUPP 
 2807 445c B5310000 		_ADR COUNT 
 2808 4460 612D0000 		_ADR DUPP 
 2809 4464 E72B0000 		_DOLIT 'a'-1
 2809      60000000 
 2810 446c 2D310000 		_ADR GREAT
 2811 4470 272C0000 		_QBRAN 2f 
 2811      9C440000 
 2812 4478 612D0000 		_ADR DUPP 
 2813 447c E72B0000 		_DOLIT 'z'+1 
 2813      7B000000 
 2814 4484 FD300000 		_ADR LESS 
 2815 4488 272C0000 		_QBRAN 2f 
 2815      9C440000 
 2816 4490 E72B0000 		_DOLIT 0x5f  
 2816      5F000000 
 2817 4498 A52D0000 		_ADR ANDD
 2818 449c 492F0000 	2:	_ADR ROT
 2819 44a0 792C0000 		_ADR CSTOR
 2820 44a4 092C0000 	3:  _DONXT 1b
 2820      58440000 
ARM GAS  forth.s 			page 157


 2821 44ac 512D0000 		_ADR DROP 
 2822 44b0 992C0000 		_ADR RFROM
 2823 44b4 272A0000 		_UNNEST 
 2824              	
 2825              	/**************************************
 2826              	   BKSP  ( bot eot cur -- bot eot cur )
 2827              	   Move cursor left by one character.
 2828              	hidden word used by KTAP
 2829              	***************************************/
 2830              	BKSP:
 2831 44b8 504700BF 		_NEST
 2832 44bc DD2C0000 		_ADR	TOR
 2833 44c0 852D0000 		_ADR	OVER
 2834 44c4 992C0000 		_ADR	RFROM
 2835 44c8 712D0000 		_ADR	SWAP
 2836 44cc 852D0000 		_ADR	OVER
 2837 44d0 CD2D0000 		_ADR	XORR
 2838 44d4 272C0000 		_QBRAN	BACK1
 2838      00450000 
 2839 44dc E72B0000 		_DOLIT	BKSPP
 2839      08000000 
 2840 44e4 F12A0000 		_ADR	EMIT
 2841 44e8 912E0000 		_ADR	ONEM
 2842 44ec E12E0000 		_ADR	BLANK
 2843 44f0 F12A0000 		_ADR	EMIT
 2844 44f4 E72B0000 		_DOLIT	BKSPP
 2844      08000000 
 2845 44fc F12A0000 		_ADR	EMIT
 2846              	BACK1:
 2847 4500 272A0000 		  _UNNEST
 2848              	
 2849              	/****************************************
 2850              	   TAP	 ( bot eot cur c -- bot eot cur )
 2851              	   Accept and echo the key stroke 
 2852              	   and bump the cursor.
 2853              	hidden word used by KTAP 
 2854              	****************************************/
 2855              	TAP:
 2856 4504 504700BF 		_NEST
 2857 4508 612D0000 		_ADR	DUPP
 2858 450c F12A0000 		_ADR	EMIT
 2859 4510 852D0000 		_ADR	OVER
 2860 4514 792C0000 		_ADR	CSTOR
 2861 4518 812E0000 		_ADR	ONEP
 2862 451c 272A0000 		_UNNEST
 2863              	
 2864              	
 2865              	/*******************************************
 2866              	    kTAP	( bot eot cur c -- bot eot cur )
 2867              	 	Process a key stroke, CR or backspace.
 2868              	hidden word used by ACCEPT 
 2869              	*******************************************/
 2870              	KTAP:
 2871              	TTAP:
 2872 4520 504700BF 		_NEST
 2873 4524 612D0000 		_ADR	DUPP
 2874 4528 E72B0000 		_DOLIT	CRR
ARM GAS  forth.s 			page 158


 2874      0D000000 
 2875 4530 CD2D0000 		_ADR	XORR
 2876 4534 272C0000 		_QBRAN  KTAP2
 2876      64450000 
 2877 453c E72B0000 		_DOLIT	BKSPP
 2877      08000000 
 2878 4544 CD2D0000 		_ADR	XORR
 2879 4548 272C0000 		_QBRAN	KTAP1
 2879      5C450000 
 2880 4550 E12E0000 		_ADR	BLANK
 2881 4554 05450000 		_ADR	TAP
 2882 4558 272A0000 		_UNNEST
 2883              	//	.word	0			// patch
 2884              	KTAP1:
 2885 455c B9440000 		_ADR	BKSP
 2886 4560 272A0000 		_UNNEST
 2887              	KTAP2:
 2888 4564 512D0000 		_ADR	DROP
 2889 4568 712D0000 		_ADR	SWAP
 2890 456c 512D0000 		_ADR	DROP
 2891 4570 612D0000 		_ADR	DUPP
 2892 4574 272A0000 		_UNNEST
 2893              	
 2894              	/************************************
 2895              	    ACCEPT	( b u -- b u )
 2896              	 	Accept characters to input 
 2897              		buffer. Return with actual count.
 2898              	*************************************/
 2899 4578 28440000 		_HEADER ACCEP,6,"ACCEPT"
 2899      06414343 
 2899      45505400 
 2900 4584 504700BF 		_NEST
 2901 4588 852D0000 		_ADR	OVER
 2902 458c 252E0000 		_ADR	PLUS
 2903 4590 852D0000 		_ADR	OVER
 2904              	ACCP1:
 2905 4594 992F0000 		_ADR	DDUP
 2906 4598 CD2D0000 		_ADR	XORR
 2907 459c 272C0000 		_QBRAN	ACCP4
 2907      DC450000 
 2908 45a4 CD2A0000 		_ADR	KEY
 2909 45a8 612D0000 		_ADR	DUPP
 2910 45ac E12E0000 		_ADR	BLANK
 2911 45b0 E72B0000 		_DOLIT 127
 2911      7F000000 
 2912 45b8 99330000 		_ADR	WITHI
 2913 45bc 272C0000 		_QBRAN	ACCP2
 2913      D0450000 
 2914 45c4 05450000 		_ADR	TAP
 2915 45c8 3B2C0000 		_BRAN	ACCP3
 2915      D4450000 
 2916              	ACCP2:
 2917 45d0 21450000 		_ADR	KTAP
 2918              	ACCP3:	  
 2919 45d4 3B2C0000 		_BRAN	ACCP1
 2919      94450000 
 2920              	ACCP4:
ARM GAS  forth.s 			page 159


 2921 45dc 512D0000 		_ADR	DROP
 2922 45e0 852D0000 		_ADR	OVER
 2923 45e4 352E0000 		_ADR	SUBB
 2924 45e8 272A0000 		_UNNEST
 2925              	
 2926              	/*****************************
 2927              	    QUERY	( -- )
 2928              	 	Accept input stream 
 2929              		to terminal input buffer.
 2930              	******************************/
 2931 45ec 7C450000 		_HEADER QUERY,5,"QUERY"
 2931      05515545 
 2931      525900BF 
 2932 45f8 504700BF 		_NEST
 2933 45fc 21370000 		_ADR	TIB
 2934 4600 E72B0000 		_DOLIT 80
 2934      50000000 
 2935 4608 85450000 		_ADR	ACCEP
 2936 460c BD320000 		_ADR	NTIB
 2937 4610 592C0000 		_ADR	STORE
 2938 4614 512D0000 		_ADR	DROP
 2939 4618 E72B0000 		_DOLIT	0
 2939      00000000 
 2940 4620 A5320000 		_ADR	INN
 2941 4624 592C0000 		_ADR	STORE
 2942 4628 272A0000 		_UNNEST
 2943              	
 2944              	/********************
 2945              	  Error handling
 2946              	********************/
 2947              	
 2948              	/*********************
 2949              	    ABORT	( a -- )
 2950              	 	Reset data stack 
 2951              		and jump to QUIT.
 2952              	**********************/
 2953 462c F0450000 		_HEADER ABORT,5,"ABORT"
 2953      0541424F 
 2953      525400BF 
 2954 4638 504700BF 		_NEST
 2955              	ABORT1:
 2956 463c D53C0000 		_ADR	SPACE
 2957 4640 B5310000 		_ADR	COUNT
 2958 4644 293D0000 		_ADR	TYPEE
 2959 4648 E72B0000 		_DOLIT	0X3F
 2959      3F000000 
 2960 4650 F12A0000 		_ADR	EMIT
 2961 4654 5D3D0000 		_ADR	CR
 2962 4658 C1470000 		_ADR	PRESE
 2963 465c 3B2C0000 		_BRAN	QUIT
 2963      E0470000 
 2964              	
 2965              	/*******************************
 2966              	    _abort"	( f -- )
 2967              	 	Run time routine of ABORT"
 2968              		Abort with a message.
 2969              	hidden used by compiler 
ARM GAS  forth.s 			page 160


 2970              	********************************/
 2971              	ABORQ:
 2972 4664 504700BF 		_NEST
 2973 4668 7D3D0000 		_ADR	DOSTR
 2974 466c 712D0000 		_ADR	SWAP 
 2975 4670 272C0000 		_QBRAN	1f	// text flag
 2975      80460000 
 2976 4678 3B2C0000 		_BRAN	ABORT1
 2976      3C460000 
 2977              	1:
 2978 4680 512D0000 		_ADR	DROP
 2979 4684 272A0000 		_UNNEST			// drop error
 2980              	
 2981              	/************************
 2982              	  The text interpreter
 2983              	************************/
 2984              	
 2985              	/***************************
 2986              	    $INTERPRET  ( a -- )
 2987              	 	Interpret a word. 
 2988              		If failed, try to 
 2989              		convert it to an integer.
 2990              	******************************/
 2991 4688 30460000 		_HEADER INTER,10,"$INTERPRET"
 2991      0A24494E 
 2991      54455250 
 2991      52455400 
 2992 4698 504700BF 		_NEST
 2993 469c C5430000 		_ADR	NAMEQ
 2994 46a0 352F0000 		_ADR	QDUP	// ?defined
 2995 46a4 272C0000 		_QBRAN	INTE1
 2995      D8460000 
 2996 46ac 6D2C0000 		_ADR	AT
 2997 46b0 E72B0000 		_DOLIT	COMPO
 2997      40000000 
 2998 46b8 A52D0000 		_ADR	ANDD	// ?compile only lexicon bits
 2999 46bc 65460000 		_ABORQ	13," compile only"
 2999      0D20636F 
 2999      6D70696C 
 2999      65206F6E 
 2999      6C7900BF 
 3000 46d0 FD2B0000 		_ADR	EXECU
 3001 46d4 272A0000 		_UNNEST			// execute defined word
 3002              	INTE1:
 3003 46d8 A93C0000 		_ADR	NUMBER 
 3004 46dc 272C0000 		_QBRAN	INTE2
 3004      E8460000 
 3005 46e4 272A0000 		_UNNEST
 3006              	INTE2:
 3007 46e8 39460000 		_ADR	ABORT	// error
 3008              	
 3009              	/******************************
 3010              	    [	   ( -- )
 3011              	 	Start the text interpreter.
 3012              	*******************************/
 3013 46ec 8C460000 		_HEADER LBRAC,IMEDD+1,"["
 3013      815B00BF 
ARM GAS  forth.s 			page 161


 3014 46f4 504700BF 		_NEST
 3015 46f8 E72B0000 		_DOLIT	INTER
 3015      98460000 
 3016 4700 D5320000 		_ADR	TEVAL
 3017 4704 592C0000 		_ADR	STORE
 3018 4708 272A0000 		_UNNEST
 3019              	
 3020              	/**********************
 3021              	    .OK	 ( -- )
 3022              	 	Display "ok" only 
 3023              		while interpreting.
 3024              	************************/
 3025 470c F0460000 		_HEADER DOTOK,3,".OK"
 3025      032E4F4B 
 3026 4714 504700BF 		_NEST
 3027 4718 E72B0000 		_DOLIT	INTER
 3027      98460000 
 3028 4720 D5320000 		_ADR	TEVAL
 3029 4724 6D2C0000 		_ADR	AT
 3030 4728 AD300000 		_ADR	EQUAL
 3031 472c 272C0000 		_QBRAN	DOTO1
 3031      3C470000 
 3032 4734 C53D0000 		_DOTQP	3," ok"
 3032      03206F6B 
 3033              	DOTO1:
 3034 473c 5D3D0000 		_ADR	CR
 3035 4740 272A0000 		_UNNEST
 3036              	
 3037              	/*************************
 3038              	    ?STACK	( -- )
 3039              	 	Abort if the data 
 3040              		stack underflows.
 3041              	************************/
 3042 4744 10470000 		_HEADER QSTAC,6,"?STACK"
 3042      063F5354 
 3042      41434B00 
 3043 4750 504700BF 		_NEST
 3044 4754 9D360000 		_ADR	DEPTH
 3045 4758 952D0000 		_ADR	ZLESS	// check only for underflow
 3046 475c 65460000 		_ABORQ	9,"underflow"
 3046      09756E64 
 3046      6572666C 
 3046      6F7700BF 
 3047 476c 272A0000 		_UNNEST
 3048              	
 3049              	/*******************
 3050              	    EVAL	( -- )
 3051              	 	Interpret the 
 3052              		input stream.
 3053              	*******************/
 3054 4770 48470000 		_HEADER EVAL,4,"EVAL"
 3054      04455641 
 3054      4C0000BF 
 3055 477c 504700BF 		_NEST
 3056              	EVAL1:
 3057 4780 3D420000 	    _ADR	TOKEN
 3058 4784 612D0000 		_ADR	DUPP
ARM GAS  forth.s 			page 162


 3059 4788 8D2C0000 		_ADR	CAT	// ?input stream empty
 3060 478c 272C0000 		_QBRAN	EVAL2
 3060      A8470000 
 3061 4794 D5320000 		_ADR	TEVAL
 3062 4798 39370000 		_ADR	ATEXE
 3063 479c 51470000 		_ADR	QSTAC	// evaluate input, check stack
 3064 47a0 3B2C0000 		_BRAN	EVAL1
 3064      80470000 
 3065              	EVAL2:
 3066 47a8 512D0000 		_ADR	DROP
 3067 47ac 15470000 		_ADR	DOTOK
 3068 47b0 272A0000 		_UNNEST	// prompt
 3069              	
 3070              	/**********************************
 3071              	    PRESET	( -- )
 3072              	 	Reset data stack pointer 
 3073              		and the terminal input buffer.
 3074              	**********************************/
 3075 47b4 74470000 		_HEADER PRESE,6,"PRESET"
 3075      06505245 
 3075      53455400 
 3076 47c0 504700BF 		_NEST 
 3077 47c4 E72B0000 		_DOLIT SPP 
 3077      80FE0120 
 3078 47cc 1D2D0000 		_ADR SPSTOR 
 3079 47d0 272A0000 		_UNNEST 
 3080              	
 3081              	/*********************
 3082              	    QUIT	( -- )
 3083              	 	Reset return stack 
 3084              		pointer and start 
 3085              		text interpreter.
 3086              	***********************/
 3087 47d4 B8470000 		_HEADER QUIT,4,"QUIT"
 3087      04515549 
 3087      540000BF 
 3088 47e0 E72B0000 		_DOLIT RPP 
 3088      00FF0120 
 3089 47e8 0D2D0000 		_ADR RPSTOR 
 3090              	QUIT1:
 3091 47ec F5460000 		_ADR	LBRAC			// start interpretation
 3092              	QUIT2:
 3093 47f0 F9450000 		_ADR	QUERY			// get input
 3094 47f4 7D470000 		_ADR	EVAL
 3095 47f8 3B2C0000 		_BRAN	QUIT2	// continue till error
 3095      F0470000 
 3096              	
 3097              	/***************************
 3098              		FORGET ( <string> -- )
 3099              		forget all definition 
 3100              		starting at <string>
 3101              	****************************/
 3102 4800 D8470000 		_HEADER FORGET,6,"FORGET"
 3102      06464F52 
 3102      47455400 
 3103 480c 504700BF 		_NEST 
 3104 4810 3D420000 		_ADR TOKEN 
ARM GAS  forth.s 			page 163


 3105 4814 612D0000 		_ADR DUPP 
 3106 4818 272C0000 		_QBRAN 9f 
 3106      54480000 
 3107 4820 C5430000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3108 4824 352F0000 		_ADR QDUP 
 3109 4828 272C0000 		_QBRAN 8f
 3109      50480000 
 3110 4830 D12E0000 		_ADR CELLM // ( ca la )
 3111 4834 612D0000 		_ADR DUPP 
 3112 4838 15330000 		_ADR CPP   
 3113 483c 592C0000 		_ADR STORE
 3114 4840 6D2C0000 		_ADR AT 
 3115 4844 41330000 		_ADR LAST 
 3116 4848 592C0000 		_ADR STORE
 3117 484c AD4D0000 		_ADR OVERT 
 3118 4850 512D0000 	8:  _ADR DROP 
 3119 4854 272A0000 	9:	_UNNEST 
 3120              	
 3121              		.p2align 2 
 3122              	
 3123              	/*****************
 3124              	  The compiler
 3125              	******************/
 3126              	
 3127              	/**************************************
 3128              	    '	   ( -- ca )
 3129              	 	Search context vocabularies 
 3130              		for the next word in input stream.
 3131              	***************************************/
 3132 4858 04480000 		_HEADER TICK,1,"'"
 3132      012700BF 
 3133 4860 504700BF 		_NEST
 3134 4864 3D420000 		_ADR	TOKEN
 3135 4868 C5430000 		_ADR	NAMEQ	// ?defined
 3136 486c 272C0000 		_QBRAN	TICK1
 3136      78480000 
 3137 4874 272A0000 		_UNNEST	// yes, push code address
 3138              	TICK1:	
 3139 4878 39460000 		_ADR ABORT	// no, error
 3140              	
 3141              	/***********************
 3142              	    ALLOT	( n -- )
 3143              	 	Allocate n bytes to 
 3144              		the ram area.
 3145              	************************/
 3146 487c 5C480000 		_HEADER ALLOT,5,"ALLOT"
 3146      05414C4C 
 3146      4F5400BF 
 3147 4888 504700BF 		_NEST
 3148 488c 15330000 		_ADR	CPP
 3149 4890 6D310000 		_ADR	PSTOR
 3150 4894 272A0000 		_UNNEST			// adjust code pointer
 3151              	
 3152              	/******************************
 3153              	    ,	   ( w -- )
 3154              	 	Compile an integer 
 3155              		into the code dictionary.
ARM GAS  forth.s 			page 164


 3156              	******************************/
 3157 4898 80480000 		_HEADER COMMA,1,","
 3157      012C00BF 
 3158 48a0 504700BF 		_NEST
 3159 48a4 E9360000 		_ADR	HERE
 3160 48a8 612D0000 		_ADR	DUPP
 3161 48ac C12E0000 		_ADR	CELLP	// cell boundary
 3162 48b0 15330000 		_ADR	CPP
 3163 48b4 592C0000 		_ADR	STORE
 3164 48b8 592C0000 		_ADR	STORE
 3165 48bc 272A0000 		_UNNEST	// adjust code pointer, compile
 3166              		.p2align 2 
 3167              	
 3168              	/************************************
 3169              	    [COMPILE]   ( -- //  string> )
 3170              	 	Compile the next immediate word 
 3171              		into code dictionary.
 3172              	*************************************/
 3173 48c0 9C480000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3173      895B434F 
 3173      4D50494C 
 3173      455D00BF 
 3174 48d0 504700BF 		_NEST
 3175 48d4 61480000 		_ADR	TICK
 3176 48d8 A1480000 		_ADR	COMMA
 3177 48dc 272A0000 		_UNNEST
 3178              	
 3179              	/****************************
 3180              	    COMPILE	( -- )
 3181              	 	Compile the next address 
 3182              		in colon list to code 
 3183              		dictionary.
 3184              	*******************************/
 3185 48e0 C4480000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3185      47434F4D 
 3185      50494C45 
 3186 48ec 504700BF 		_NEST
 3187 48f0 992C0000 		_ADR	RFROM
 3188 48f4 612D0000 		_ADR	DUPP 
 3189 48f8 6D2C0000 		_ADR	AT
 3190 48fc E72B0000 		_DOLIT 1 
 3190      01000000 
 3191 4904 B92D0000 		_ADR	ORR 
 3192 4908 A1480000 		_ADR	COMMA 
 3193 490c C12E0000 		_ADR	CELLP 
 3194 4910 DD2C0000 		_ADR	TOR 
 3195 4914 272A0000 		_UNNEST	// adjust return address
 3196              	
 3197              	/*************************
 3198              	    LITERAL	( w -- )
 3199              	 	Compile tos to code 
 3200              		dictionary as an 
 3201              		integer literal.
 3202              	***************************/
 3203 4918 E4480000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3203      874C4954 
 3203      4552414C 
ARM GAS  forth.s 			page 165


 3204 4924 504700BF 		_NEST
 3205 4928 E72B0000 		_COMPI	DOLIT
 3205      E62B0000 
 3205      094E0000 
 3206 4934 A1480000 		_ADR	COMMA
 3207 4938 272A0000 		_UNNEST
 3208              	
 3209              	/********************
 3210              	    $,"	( -- )
 3211              	 	Compile a literal 
 3212              		string up to next " .
 3213              	hidden word 
 3214              	************************/
 3215              	STRCQ:
 3216 493c 504700BF 		_NEST
 3217 4940 E72B0000 		_DOLIT -4
 3217      FCFFFFFF 
 3218 4948 15330000 		_ADR	CPP
 3219 494c 6D310000 		_ADR	PSTOR
 3220 4950 E72B0000 		_DOLIT	'\"'
 3220      22000000 
 3221 4958 19420000 		_ADR	WORDD			// move word to code dictionary
 3222 495c B5310000 		_ADR	COUNT
 3223 4960 252E0000 		_ADR	PLUS
 3224 4964 35360000 		_ADR	ALGND			// calculate aligned end of string
 3225 4968 15330000 		_ADR	CPP
 3226 496c 592C0000 		_ADR	STORE
 3227 4970 272A0000 		_UNNEST 			// adjust the code pointer
 3228              	
 3229              	/*******************
 3230              	   Structures
 3231              	*******************/
 3232              	
 3233              	/*************************
 3234              	    FOR	 ( -- a )
 3235              	 	Start a FOR-NEXT loop 
 3236              		structure in a colon 
 3237              		definition.
 3238              	**************************/
 3239 4974 1C490000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3239      C3464F52 
 3240 497c 504700BF 		_NEST
 3241 4980 E72B0000 		_COMPI	TOR
 3241      DC2C0000 
 3241      094E0000 
 3242 498c E9360000 		_ADR	HERE
 3243 4990 272A0000 		_UNNEST
 3244              	
 3245              	/********************************
 3246              		DO ( limit start -- )
 3247              		initialise a DO...LOOP 
 3248              		or DO...+LOOP 
 3249              	********************************/
 3250 4994 78490000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3250      C2444F00 
 3251 499c 504700BF 		_NEST
 3252 49a0 E72B0000 		_COMPI SWAP
ARM GAS  forth.s 			page 166


 3252      702D0000 
 3252      094E0000 
 3253 49ac E72B0000 		_COMPI TOR 
 3253      DC2C0000 
 3253      094E0000 
 3254 49b8 E72B0000 		_COMPI TOR 
 3254      DC2C0000 
 3254      094E0000 
 3255 49c4 E9360000 		_ADR HERE 
 3256 49c8 272A0000 		_UNNEST 
 3257              	
 3258              	DOPLOOP: // ( n -- R: counter limit )
 3259 49cc B8E80300 		ldmfd RSP!,{T0,T1}
 3260 49d0 3044     		add T0,TOS 
 3261 49d2 28E90300 		stmfd RSP!,{T0,T1}
 3262 49d6 8842     		cmp T0,T1 
 3263 49d8 05D4     		bmi 9f 
 3264 49da 08F10808 		add RSP,#8
 3265 49de 0CF1040C 		add IP,#4
 3266 49e2 FEF71DB8 		_NEXT 
 3267 49e6 DCF800C0 	9:  ldr IP,[IP]
 3268 49ea FEF719B8 		_NEXT 
 3269              		
 3270              	/***************************
 3271              		+LOOP ( a -- )
 3272              		increment counter 
 3273              		end loop if countr>limit
 3274              	****************************/
 3275 49ee 98490000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3275      C52B4C4F 
 3275      4F50
 3276 49f8 504700BF 		_NEST 
 3277 49fc E72B0000 		_COMPI DOPLOOP 
 3277      CC490000 
 3277      094E0000 
 3278 4a08 A1480000 		_ADR COMMA
 3279 4a0c 272A0000 		_UNNEST 
 3280              	
 3281              	DOLOOP: // ( -- R: counter limit )
 3282 4a10 D8F80000 		ldr T0,[RSP]
 3283 4a14 00F10100 		add T0,#1
 3284 4a18 C8F80000 		str T0,[RSP]
 3285 4a1c D8F80410 		ldr T1,[RSP,#4]
 3286 4a20 8842     		cmp T0,T1 
 3287 4a22 05D4     		bmi 9f
 3288 4a24 08F10808 		add RSP,#8  // counter and limit  
 3289 4a28 0CF1040C 		add IP,IP,#4 // skip loop address 
 3290 4a2c FDF7F8BF 		_NEXT 
 3291 4a30 DCF800C0 	9:  ldr IP,[IP]
 3292 4a34 FDF7F4BF 		_NEXT 
 3293              	
 3294              	
 3295              	/********************************
 3296              		LOOP ( a -- )
 3297              		increment counter 
 3298              		end loop if >= limit 
 3299              	*********************************/
ARM GAS  forth.s 			page 167


 3300 4a38 F2490000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3300      C44C4F4F 
 3300      500000BF 
 3301 4a44 504700BF 		_NEST 
 3302 4a48 E72B0000 		_COMPI DOLOOP
 3302      104A0000 
 3302      094E0000 
 3303 4a54 A1480000 		_ADR COMMA 
 3304 4a58 272A0000 		_UNNEST 
 3305              	
 3306              	
 3307              	/**********************
 3308              	    BEGIN	( -- a )
 3309              	 	Start an infinite 
 3310              		or indefinite 
 3311              		loop structure.
 3312              	************************/
 3313 4a5c 3C4A0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3313      C5424547 
 3313      494E00BF 
 3314 4a68 504700BF 		_NEST
 3315 4a6c E9360000 		_ADR	HERE
 3316 4a70 272A0000 		_UNNEST
 3317              		.p2align 2 
 3318              	
 3319              	/********************
 3320              	    NEXT	( a -- )
 3321              	 	Terminate a FOR-NEXT
 3322              		loop structure.
 3323              	**************************/
 3324 4a74 604A0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3324      C44E4558 
 3324      540000BF 
 3325 4a80 504700BF 		_NEST
 3326 4a84 E72B0000 		_COMPI	DONXT
 3326      082C0000 
 3326      094E0000 
 3327 4a90 A1480000 		_ADR	COMMA
 3328 4a94 272A0000 		_UNNEST
 3329              	
 3330              	/***************************
 3331              		I ( -- n )
 3332              		stack for loop counter 
 3333              	***************************/
 3334 4a98 784A0000 		_HEADER I,1+COMPO,"I"
 3334      414900BF 
 3335 4aa0 47F8046D 		_PUSH 
 3336 4aa4 D8F80060 		ldr TOS,[RSP]
 3337 4aa8 FDF7BABF 		_NEXT 
 3338              	
 3339              	/****************************
 3340              		J ( -- n )
 3341              		stack outer loop counter 
 3342              	****************************/
 3343 4aac 9C4A0000 		_HEADER J,1,"J"
 3343      014A00BF 
 3344 4ab4 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 168


 3345 4ab8 D8F80460 		ldr TOS,[RSP,#4]
 3346 4abc FDF7B0BF 		_NEXT 
 3347              	
 3348              	/**********************
 3349              	    UNTIL	( a -- )
 3350              	 	Terminate a BEGIN-UNTIL
 3351              		indefinite loop structure.
 3352              	******************************/
 3353 4ac0 B04A0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3353      C5554E54 
 3353      494C00BF 
 3354 4acc 504700BF 		_NEST
 3355 4ad0 E72B0000 		_COMPI	QBRAN
 3355      262C0000 
 3355      094E0000 
 3356 4adc A1480000 		_ADR	COMMA
 3357 4ae0 272A0000 		_UNNEST
 3358              	
 3359              	/**********************
 3360              	    AGAIN	( a -- )
 3361              	 	Terminate a BEGIN-AGAIN
 3362              		infinite loop structure.
 3363              	*****************************/
 3364 4ae4 C44A0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3364      C5414741 
 3364      494E00BF 
 3365 4af0 504700BF 		_NEST
 3366 4af4 E72B0000 		_COMPI	BRAN
 3366      3A2C0000 
 3366      094E0000 
 3367 4b00 A1480000 		_ADR	COMMA
 3368 4b04 272A0000 		_UNNEST
 3369              	
 3370              	/************************
 3371              	    IF	  ( -- A )
 3372              	 	Begin a conditional
 3373              		branch structure.
 3374              	**************************/
 3375 4b08 E84A0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3375      C2494600 
 3376 4b10 504700BF 		_NEST
 3377 4b14 E72B0000 		_COMPI	QBRAN
 3377      262C0000 
 3377      094E0000 
 3378 4b20 E9360000 		_ADR	HERE
 3379 4b24 E72B0000 		_DOLIT	4
 3379      04000000 
 3380 4b2c 15330000 		_ADR	CPP
 3381 4b30 6D310000 		_ADR	PSTOR
 3382 4b34 272A0000 		_UNNEST
 3383              	
 3384              	/*************************
 3385              	    AHEAD	( -- A )
 3386              	 	Compile a forward 
 3387              		branch instruction.
 3388              	*************************/
 3389 4b38 0C4B0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
ARM GAS  forth.s 			page 169


 3389      C5414845 
 3389      414400BF 
 3390 4b44 504700BF 		_NEST
 3391 4b48 E72B0000 		_COMPI	BRAN
 3391      3A2C0000 
 3391      094E0000 
 3392 4b54 E9360000 		_ADR	HERE
 3393 4b58 E72B0000 		_DOLIT	4
 3393      04000000 
 3394 4b60 15330000 		_ADR	CPP
 3395 4b64 6D310000 		_ADR	PSTOR
 3396 4b68 272A0000 		_UNNEST
 3397              	
 3398              	/**************************
 3399              	    REPEAT	( A a -- )
 3400              	 	Terminate a BEGIN-WHILE-REPEAT
 3401              		indefinite loop.
 3402              	**********************************/
 3403 4b6c 3C4B0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3403      C6524550 
 3403      45415400 
 3404 4b78 504700BF 		_NEST
 3405 4b7c F14A0000 		_ADR	AGAIN
 3406 4b80 E9360000 		_ADR	HERE
 3407 4b84 712D0000 		_ADR	SWAP
 3408 4b88 592C0000 		_ADR	STORE
 3409 4b8c 272A0000 		_UNNEST
 3410              	
 3411              	/*********************
 3412              	    THEN	( A -- )
 3413              	 	Terminate a conditional
 3414              		branch structure.
 3415              	*****************************/
 3416 4b90 704B0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3416      C4544845 
 3416      4E0000BF 
 3417 4b9c 504700BF 		_NEST
 3418 4ba0 E9360000 		_ADR	HERE
 3419 4ba4 712D0000 		_ADR	SWAP
 3420 4ba8 592C0000 		_ADR	STORE
 3421 4bac 272A0000 		_UNNEST
 3422              	
 3423              	/***************************
 3424              	    AFT	 ( a -- a A )
 3425              	 	Jump to THEN in a 
 3426              		FOR-AFT-THEN-NEXT loop 
 3427              		the first time through.
 3428              	*****************************/
 3429 4bb0 944B0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3429      C3414654 
 3430 4bb8 504700BF 		_NEST
 3431 4bbc 512D0000 		_ADR	DROP
 3432 4bc0 454B0000 		_ADR	AHEAD
 3433 4bc4 694A0000 		_ADR	BEGIN
 3434 4bc8 712D0000 		_ADR	SWAP
 3435 4bcc 272A0000 		_UNNEST
 3436              	
ARM GAS  forth.s 			page 170


 3437              	/**********************
 3438              	    ELSE	( A -- A )
 3439              	 	Start the false 
 3440              		clause in an 
 3441              		IF-ELSE-THEN structure.
 3442              	****************************/
 3443 4bd0 B44B0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3443      C4454C53 
 3443      450000BF 
 3444 4bdc 504700BF 		_NEST
 3445 4be0 454B0000 		_ADR	AHEAD
 3446 4be4 712D0000 		_ADR	SWAP
 3447 4be8 9D4B0000 		_ADR	THENN
 3448 4bec 272A0000 		_UNNEST
 3449              	
 3450              	/**************************
 3451              	    WHILE	( a -- A a )
 3452              	 	Conditional branch out 
 3453              		of a BEGIN-WHILE-REPEAT loop.
 3454              	*********************************/
 3455 4bf0 D44B0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3455      C5574849 
 3455      4C4500BF 
 3456 4bfc 504700BF 		_NEST
 3457 4c00 114B0000 		_ADR	IFF
 3458 4c04 712D0000 		_ADR	SWAP
 3459 4c08 272A0000 		_UNNEST
 3460              	
 3461              	/***********************************
 3462              	    ABORT"	( -- //  string> )
 3463              	 	Conditional abort with an 
 3464              		error message.
 3465              	***********************************/
 3466 4c0c F44B0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3466      8641424F 
 3466      52542200 
 3467 4c18 504700BF 		_NEST
 3468 4c1c E72B0000 		_COMPI	ABORQ
 3468      64460000 
 3468      094E0000 
 3469 4c28 3D490000 		_ADR	STRCQ
 3470 4c2c 272A0000 		_UNNEST
 3471              	
 3472              	/******************************
 3473              	    $"	( -- //  string> )
 3474              	 	Compile an inline 
 3475              		word literal.
 3476              	*****************************/
 3477 4c30 104C0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3477      C2242200 
 3478 4c38 504700BF 		_NEST
 3479 4c3c E72B0000 		_COMPI	STRQP
 3479      A83D0000 
 3479      094E0000 
 3480 4c48 3D490000 		_ADR	STRCQ
 3481 4c4c 272A0000 		_UNNEST
 3482              	
ARM GAS  forth.s 			page 171


 3483              	/******************************
 3484              	    ."	( -- //  string> )
 3485              	 	Compile an inline word
 3486              		literal to be typed out 
 3487              		at run time.
 3488              	*******************************/
 3489 4c50 344C0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3489      C22E2200 
 3490 4c58 504700BF 		_NEST
 3491 4c5c E72B0000 		_COMPI	DOTQP
 3491      C43D0000 
 3491      094E0000 
 3492 4c68 3D490000 		_ADR	STRCQ
 3493 4c6c 272A0000 		_UNNEST
 3494              	
 3495              	/*********************
 3496              	  Name compiler
 3497              	***********************/
 3498              	
 3499              	/**************************
 3500              	    ?UNIQUE	( a -- a )
 3501              	 	Display a warning 
 3502              		message if the word 
 3503              		already exists.
 3504              	**************************/
 3505 4c70 544C0000 		_HEADER UNIQU,7,"?UNIQUE"
 3505      073F554E 
 3505      49515545 
 3506 4c7c 504700BF 		_NEST
 3507 4c80 612D0000 		_ADR	DUPP
 3508 4c84 C5430000 		_ADR	NAMEQ			// ?name exists
 3509 4c88 272C0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3509      A84C0000 
 3510 4c90 C53D0000 		_DOTQP	7," reDef "		// but warn the user
 3510      07207265 
 3510      44656620 
 3511 4c9c 852D0000 		_ADR	OVER
 3512 4ca0 B5310000 		_ADR	COUNT
 3513 4ca4 293D0000 		_ADR	TYPEE			// just in case its not planned
 3514              	UNIQ1:
 3515 4ca8 512D0000 		_ADR	DROP
 3516 4cac 272A0000 		_UNNEST
 3517              	
 3518              	/***********************
 3519              	    $,n	 ( na -- )
 3520              	 	Build a new dictionary 
 3521              		name using the data at na.
 3522              	hidden word 
 3523              	*******************************/
 3524              	SNAME:
 3525 4cb0 504700BF 		_NEST
 3526 4cb4 612D0000 		_ADR	DUPP			//  na na
 3527 4cb8 8D2C0000 		_ADR	CAT			//  ?null input
 3528 4cbc 272C0000 		_QBRAN	SNAM1
 3528      F84C0000 
 3529 4cc4 7D4C0000 		_ADR	UNIQU			//  na
 3530 4cc8 41330000 		_ADR	LAST			//  na last
ARM GAS  forth.s 			page 172


 3531 4ccc 6D2C0000 		_ADR	AT			//  na la
 3532 4cd0 A1480000 		_ADR	COMMA			//  na
 3533 4cd4 612D0000 		_ADR	DUPP			//  na na
 3534 4cd8 41330000 		_ADR	LAST			//  na na last
 3535 4cdc 592C0000 		_ADR	STORE			//  na , save na for vocabulary link
 3536 4ce0 B5310000 		_ADR	COUNT			//  na+1 count
 3537 4ce4 252E0000 		_ADR	PLUS			//  na+1+count
 3538 4ce8 35360000 		_ADR	ALGND			//  word boundary
 3539 4cec 15330000 		_ADR	CPP
 3540 4cf0 592C0000 		_ADR	STORE			//  top of dictionary now
 3541 4cf4 272A0000 		_UNNEST
 3542              	SNAM1:
 3543 4cf8 A93D0000 		_ADR	STRQP
 3544 4cfc 07       		.byte	7
 3545 4cfd 206E616D 		.ascii " name? "
 3545      653F20
 3546 4d04 39460000 		_ADR	ABORT
 3547              	
 3548              	/************************
 3549              	    $COMPILE	( a -- )
 3550              	 	Compile next word to 
 3551              		code dictionary as 
 3552              		a token or literal.
 3553              	**************************/
 3554 4d08 744C0000 		_HEADER SCOMP,8,"$COMPILE"
 3554      0824434F 
 3554      4D50494C 
 3554      450000BF 
 3555 4d18 504700BF 		_NEST
 3556 4d1c C5430000 		_ADR	NAMEQ
 3557 4d20 352F0000 		_ADR	QDUP	// defined?
 3558 4d24 272C0000 		_QBRAN	SCOM2
 3558      544D0000 
 3559 4d2c 6D2C0000 		_ADR	AT
 3560 4d30 E72B0000 		_DOLIT	IMEDD
 3560      80000000 
 3561 4d38 A52D0000 		_ADR	ANDD	// immediate?
 3562 4d3c 272C0000 		_QBRAN	SCOM1
 3562      4C4D0000 
 3563 4d44 FD2B0000 		_ADR	EXECU
 3564 4d48 272A0000 		_UNNEST			// it's immediate, execute
 3565              	SCOM1:
 3566 4d4c 094E0000 		_ADR	CALLC			// it's not immediate, compile
 3567 4d50 272A0000 		_UNNEST	
 3568              	SCOM2:
 3569 4d54 A93C0000 		_ADR	NUMBER 
 3570 4d58 272C0000 		_QBRAN	SCOM3
 3570      684D0000 
 3571 4d60 25490000 		_ADR	LITER
 3572 4d64 272A0000 		_UNNEST			// compile number as integer
 3573              	SCOM3: // compilation abort 
 3574 4d68 714D0000 		_ADR COLON_ABORT 
 3575 4d6c 39460000 		_ADR	ABORT			// error
 3576              	
 3577              	/********************************
 3578              	 before aborting a compilation 
 3579              	 reset HERE and LAST
ARM GAS  forth.s 			page 173


 3580              	 to previous values. 
 3581              	*******************************/
 3582              	COLON_ABORT:
 3583 4d70 504700BF 		_NEST 
 3584 4d74 41330000 		_ADR LAST 
 3585 4d78 6D2C0000 		_ADR AT 
 3586 4d7c D12E0000 		_ADR CELLM 
 3587 4d80 612D0000 		_ADR DUPP 
 3588 4d84 15330000 		_ADR CPP  
 3589 4d88 592C0000 		_ADR STORE 
 3590 4d8c 6D2C0000 		_ADR AT 
 3591 4d90 41330000 		_ADR LAST 
 3592 4d94 592C0000 		_ADR STORE 
 3593 4d98 AD4D0000 		_ADR OVERT 
 3594 4d9c 272A0000 		_UNNEST 
 3595              	
 3596              	/*********************
 3597              	    OVERT	( -- )
 3598              	 	Link a new word 
 3599              		into the current 
 3600              		vocabulary.
 3601              	**********************/
 3602 4da0 0C4D0000 		_HEADER OVERT,5,"OVERT"
 3602      054F5645 
 3602      525400BF 
 3603 4dac 504700BF 		_NEST
 3604 4db0 41330000 		_ADR	LAST
 3605 4db4 6D2C0000 		_ADR	AT
 3606 4db8 01330000 		_ADR	CNTXT
 3607 4dbc 592C0000 		_ADR	STORE
 3608 4dc0 272A0000 		_UNNEST
 3609              	
 3610              	/**********************
 3611              	    ;  ( -- )
 3612              	 	Terminate a colon
 3613              		definition.
 3614              	***********************/
 3615 4dc4 A44D0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3615      C13B00BF 
 3616 4dcc 504700BF 		_NEST
 3617 4dd0 E72B0000 		_DOLIT	UNNEST
 3617      262A0000 
 3618 4dd8 094E0000 		_ADR	CALLC
 3619 4ddc F5460000 		_ADR	LBRAC
 3620 4de0 AD4D0000 		_ADR	OVERT
 3621 4de4 272A0000 		_UNNEST
 3622              	
 3623              	/******************
 3624              	    ]	   ( -- )
 3625              	 	Start compiling 
 3626              		the words in 
 3627              		the input stream.
 3628              	*********************/
 3629 4de8 C84D0000 		_HEADER RBRAC,1,"]"
 3629      015D00BF 
 3630 4df0 504700BF 		_NEST
 3631 4df4 E72B0000 		_DOLIT	SCOMP
ARM GAS  forth.s 			page 174


 3631      184D0000 
 3632 4dfc D5320000 		_ADR	TEVAL
 3633 4e00 592C0000 		_ADR	STORE
 3634 4e04 272A0000 		_UNNEST
 3635              	
 3636              	/*********************
 3637              	    BL.W	( ca -- )
 3638              	 	compile ca.
 3639              	hidden word used by compiler
 3640              	*****************************/
 3641              	CALLC:
 3642 4e08 504700BF 		_NEST
 3643 4e0c E72B0000 		_DOLIT 1 
 3643      01000000 
 3644 4e14 B92D0000 		_ADR ORR 
 3645 4e18 A1480000 		_ADR COMMA  
 3646 4e1c 272A0000 		_UNNEST 
 3647              	
 3648              	
 3649              	/*************************
 3650              	 	:	( -- //  string> )
 3651              	 	Start a new colon 
 3652              		definition using 
 3653              		next word as its name.
 3654              	**************************/
 3655 4e20 EC4D0000 		_HEADER COLON,1,":"
 3655      013A00BF 
 3656 4e28 504700BF 		_NEST
 3657 4e2c 3D420000 		_ADR	TOKEN
 3658 4e30 B14C0000 		_ADR	SNAME
 3659 4e34 AD4D0000 		_ADR    OVERT 
 3660 4e38 312A0000 		_ADR	COMPI_NEST 
 3661 4e3c F14D0000 		_ADR	RBRAC
 3662 4e40 272A0000 		_UNNEST
 3663              	
 3664              	/*************************
 3665              	    IMMEDIATE   ( -- )
 3666              	 	Make the last compiled 
 3667              		word an immediate word.
 3668              	***************************/
 3669 4e44 244E0000 		_HEADER IMMED,9,"IMMEDIATE"
 3669      09494D4D 
 3669      45444941 
 3669      544500BF 
 3670 4e54 504700BF 		_NEST
 3671 4e58 E72B0000 		_DOLIT	IMEDD
 3671      80000000 
 3672 4e60 41330000 		_ADR	LAST
 3673 4e64 6D2C0000 		_ADR	AT
 3674 4e68 6D2C0000 		_ADR	AT
 3675 4e6c B92D0000 		_ADR	ORR
 3676 4e70 41330000 		_ADR	LAST
 3677 4e74 6D2C0000 		_ADR	AT
 3678 4e78 592C0000 		_ADR	STORE
 3679 4e7c 272A0000 		_UNNEST
 3680              	
 3681              	/******************
ARM GAS  forth.s 			page 175


 3682              	  Defining words
 3683              	******************/
 3684              	
 3685              	/***********************************
 3686              	    CONSTANT	( u -- //  string> )
 3687              	 	Compile a new constant.
 3688              	************************************/
 3689 4e80 484E0000 		_HEADER CONST,8,"CONSTANT"
 3689      08434F4E 
 3689      5354414E 
 3689      540000BF 
 3690 4e90 504700BF 		_NEST 
 3691 4e94 3D420000 		_ADR	TOKEN
 3692 4e98 B14C0000 		_ADR	SNAME
 3693 4e9c AD4D0000 		_ADR	OVERT
 3694 4ea0 312A0000 		_ADR	COMPI_NEST
 3695 4ea4 E72B0000 		_DOLIT	DOCON
 3695      E8310000 
 3696 4eac 094E0000 		_ADR	CALLC
 3697 4eb0 A1480000 		_ADR	COMMA
 3698 4eb4 E72B0000 		_DOLIT	UNNEST 
 3698      262A0000 
 3699 4ebc 094E0000 		_ADR	CALLC  
 3700 4ec0 272A0000 		_UNNEST
 3701              	
 3702              		.p2align 2 
 3703              	/****************************************
 3704              	 doDOES> ( -- a )
 3705              	 runtime action of 		 
 3706              	 leave parameter field address on stack 
 3707              	hidden word used by compiler 
 3708              	***************************************/
 3709              	DODOES:
 3710 4ec4 504700BF 		_NEST 
 3711 4ec8 992C0000 		_ADR	RFROM
 3712 4ecc C12E0000 		_ADR	CELLP 
 3713 4ed0 812E0000 		_ADR	ONEP  
 3714 4ed4 41330000 		_ADR LAST 
 3715 4ed8 6D2C0000 		_ADR AT
 3716 4edc 5D420000 		_ADR NAMET 
 3717 4ee0 C12E0000 		_ADR CELLP 
 3718 4ee4 592C0000 		_ADR STORE  
 3719 4ee8 272A0000 		_UNNEST 
 3720              	
 3721              		.p2align 2
 3722              	/**********************
 3723              	  DOES> ( -- )
 3724              	  compile time action
 3725              	*************************/
 3726 4eec 844E0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3726      C5444F45 
 3726      533E00BF 
 3727 4ef8 504700BF 		_NEST 
 3728 4efc E72B0000 		_DOLIT DODOES 
 3728      C44E0000 
 3729 4f04 094E0000 		_ADR CALLC 
 3730 4f08 E72B0000 		_DOLIT	UNNEST
ARM GAS  forth.s 			page 176


 3730      262A0000 
 3731 4f10 094E0000 		_ADR	CALLC 
 3732 4f14 312A0000 		_ADR COMPI_NEST
 3733 4f18 E72B0000 		_DOLIT RFROM 
 3733      982C0000 
 3734 4f20 094E0000 		_ADR	CALLC
 3735 4f24 272A0000 		_UNNEST 
 3736              	
 3737              	
 3738              	/****************************
 3739              	  DEFER@ ( "name" -- a )
 3740              	  return value of code field 
 3741              	  of defered function. 
 3742              	******************************/
 3743 4f28 F04E0000 		_HEADER DEFERAT,6,"DEFER@"
 3743      06444546 
 3743      45524000 
 3744 4f34 504700BF 		_NEST 
 3745 4f38 61480000 		_ADR TICK
 3746 4f3c C12E0000 		_ADR CELLP 
 3747 4f40 6D2C0000 		_ADR AT 
 3748 4f44 912E0000 		_ADR ONEM 
 3749 4f48 272A0000 		_UNNEST 
 3750              	
 3751              	/*********************************
 3752              	 DEFER! ( "name1" "name2" -- )
 3753              	 assign an action to a defered word 
 3754              	************************************/
 3755 4f4c 2C4F0000 		_HEADER DEFERSTO,6,"DEFER!"
 3755      06444546 
 3755      45522100 
 3756 4f58 504700BF 		_NEST 
 3757 4f5c 61480000 		_ADR TICK 
 3758 4f60 812E0000 		_ADR ONEP 
 3759 4f64 61480000 		_ADR TICK 
 3760 4f68 C12E0000 		_ADR CELLP 
 3761 4f6c 592C0000 		_ADR STORE 
 3762 4f70 272A0000 		_UNNEST
 3763              	
 3764              	/****************************
 3765              	  DEFER ( "name" -- )
 3766              	  create a defered definition
 3767              	*****************************/
 3768 4f74 504F0000 		_HEADER DEFER,5,"DEFER"
 3768      05444546 
 3768      455200BF 
 3769 4f80 504700BF 		_NEST 
 3770 4f84 D14F0000 		_ADR CREAT 
 3771 4f88 E72B0000 		_DOLIT UNNEST 
 3771      262A0000 
 3772 4f90 094E0000 		_ADR CALLC 
 3773 4f94 E72B0000 		_DOLIT DEFER_NOP
 3773      B84F0000 
 3774 4f9c 812E0000 		_ADR ONEP 
 3775 4fa0 41330000 		_ADR LAST 
 3776 4fa4 6D2C0000 		_ADR AT 
 3777 4fa8 5D420000 		_ADR NAMET 
ARM GAS  forth.s 			page 177


 3778 4fac C12E0000 		_ADR CELLP 
 3779 4fb0 592C0000 		_ADR STORE 
 3780 4fb4 272A0000 		_UNNEST 
 3781              	DEFER_NOP:
 3782 4fb8 504700BF 		_NEST  
 3783 4fbc E52B0000 		_ADR NOP 
 3784 4fc0 272A0000 		_UNNEST 
 3785              	
 3786              	/******************************
 3787              	    CREATE	( -- //  string> )
 3788              	 	Compile a new array entry 
 3789              		without allocating code space.
 3790              	***********************************/
 3791 4fc4 784F0000 		_HEADER CREAT,6,"CREATE"
 3791      06435245 
 3791      41544500 
 3792 4fd0 504700BF 		_NEST 
 3793 4fd4 3D420000 		_ADR	TOKEN
 3794 4fd8 B14C0000 		_ADR	SNAME
 3795 4fdc AD4D0000 		_ADR	OVERT
 3796 4fe0 312A0000 		_ADR	COMPI_NEST 
 3797 4fe4 E72B0000 		_DOLIT	DOVAR
 3797      DC310000 
 3798 4fec 094E0000 		_ADR	CALLC
 3799 4ff0 272A0000 		_UNNEST
 3800              	
 3801              	/*******************************
 3802              	    VARIABLE	( -- //  string> )
 3803              	 	Compile a new variable 
 3804              		initialized to 0.
 3805              	***********************************/
 3806 4ff4 C84F0000 		_HEADER VARIA,8,"VARIABLE"
 3806      08564152 
 3806      4941424C 
 3806      450000BF 
 3807 5004 504700BF 		_NEST
 3808 5008 D14F0000 		_ADR	CREAT
 3809 500c E72B0000 		_DOLIT	0
 3809      00000000 
 3810 5014 A1480000 		_ADR	COMMA
 3811 5018 E72B0000 		_DOLIT UNNEST
 3811      262A0000 
 3812 5020 094E0000 		_ADR	CALLC  
 3813 5024 272A0000 		_UNNEST
 3814              	
 3815              	
 3816              	/***********
 3817              	  Tools
 3818              	***********/
 3819              	
 3820              	/*************************
 3821              	    dm+	 ( a u -- a )
 3822              	 	Dump u bytes from a , 
 3823              		leaving a+u on the stack.
 3824              		hidden word used by DUMP 
 3825              	****************************/
 3826              	DMP:
ARM GAS  forth.s 			page 178


 3827 5028 504700BF 		_NEST
 3828 502c 852D0000 		_ADR	OVER
 3829 5030 E72B0000 		_DOLIT	4
 3829      04000000 
 3830 5038 8D3E0000 		_ADR	UDOTR			// display address
 3831 503c E72B0000 		_DOLIT  0         // don't show base char 
 3831      00000000 
 3832 5044 6D320000 		_ADR    BCHR
 3833 5048 612D0000 		_ADR    DUPP
 3834 504c 6D2C0000 		_ADR    AT 
 3835 5050 DD2C0000 		_ADR    TOR      // save original value of BCHAR 
 3836 5054 592C0000 		_ADR    STORE 
 3837 5058 D53C0000 		_ADR	SPACE
 3838 505c DD2C0000 		_ADR	TOR			// start count down loop
 3839 5060 3B2C0000 		_BRAN	PDUM2			// skip first pass
 3839      80500000 
 3840              	PDUM1:
 3841 5068 612D0000 	    _ADR	DUPP
 3842 506c 8D2C0000 		_ADR	CAT
 3843 5070 E72B0000 		_DOLIT	3
 3843      03000000 
 3844 5078 8D3E0000 		_ADR	UDOTR			// display numeric data
 3845 507c 812E0000 		_ADR	ONEP			// increment address
 3846              	PDUM2:
 3847 5080 092C0000 	    _ADR	DONXT
 3848 5084 68500000 		.word	PDUM1	// loop till done
 3849 5088 992C0000 		_ADR    RFROM   // restore BCHAR value 
 3850 508c 6D320000 		_ADR    BCHR 
 3851 5090 592C0000 		_ADR    STORE 
 3852 5094 272A0000 		_UNNEST
 3853              		.p2align 2 
 3854              	//    DUMP	( a u -- )
 3855              	// 	Dump u bytes from a, in a formatted manner.
 3856              	
 3857              	/**********************
 3858              		DUMP ( a n -- )
 3859              		hex dump memory 
 3860              	*********************/
 3861 5098 F84F0000 		_HEADER DUMP,4,"DUMP"
 3861      0444554D 
 3861      500000BF 
 3862 50a4 504700BF 		_NEST
 3863 50a8 E72B0000 		_DOLIT  15 
 3863      0F000000 
 3864 50b0 252E0000 		_ADR    PLUS 
 3865 50b4 E72B0000 		_DOLIT  0xFFFFFFF0 
 3865      F0FFFFFF 
 3866 50bc A52D0000 		_ADR    ANDD 
 3867 50c0 712D0000 		_ADR    SWAP 
 3868 50c4 E72B0000 		_DOLIT  0xFFFFFFFC
 3868      FCFFFFFF 
 3869 50cc A52D0000 		_ADR    ANDD 
 3870 50d0 712D0000 		_ADR    SWAP 
 3871 50d4 55320000 		_ADR	BASE
 3872 50d8 6D2C0000 		_ADR	AT
 3873 50dc DD2C0000 		_ADR	TOR
 3874 50e0 CD390000 		_ADR	HEX			// save radix,set hex
ARM GAS  forth.s 			page 179


 3875 50e4 E72B0000 		_DOLIT	16
 3875      10000000 
 3876 50ec D5350000 		_ADR	SLASH			// change count to lines
 3877 50f0 DD2C0000 		_ADR	TOR
 3878 50f4 3B2C0000 		_BRAN	DUMP4			// start count down loop
 3878      24510000 
 3879              	DUMP1:
 3880 50fc 5D3D0000 	    _ADR	CR
 3881 5100 E72B0000 		_DOLIT	16
 3881      10000000 
 3882 5108 992F0000 		_ADR	DDUP
 3883 510c 29500000 		_ADR	DMP			// display numeric
 3884 5110 492F0000 		_ADR	ROT
 3885 5114 492F0000 		_ADR	ROT
 3886 5118 D53C0000 		_ADR	SPACE
 3887 511c D53C0000 		_ADR	SPACE
 3888 5120 293D0000 		_ADR	TYPEE			// display printable characters
 3889              	DUMP4:
 3890 5124 092C0000 	  _DONXT	DUMP1	// loop till done
 3890      FC500000 
 3891              	DUMP3:
 3892 512c 512D0000 		_ADR	DROP
 3893 5130 992C0000 		_ADR	RFROM
 3894 5134 55320000 		_ADR	BASE
 3895 5138 592C0000 		_ADR	STORE			// restore radix
 3896 513c 272A0000 		_UNNEST
 3897              	
 3898              	/*******************************
 3899              	   TRACE. display in hexadecimal
 3900              	   TRACE. use a different buffer 
 3901              	   than DOT  to avoid current 
 3902              	   display overwrite.
 3903              	*******************************/ 
 3904              	TDOT: // ( u -- )
 3905 5140 504700BF 		_NEST 
 3906 5144 55320000 		_ADR BASE 
 3907 5148 6D2C0000 		_ADR AT 
 3908 514c DD2C0000 		_ADR TOR
 3909 5150 CD390000 		_ADR HEX  
 3910 5154 E9320000 		_ADR HLD 
 3911 5158 6D2C0000 		_ADR AT 
 3912 515c DD2C0000 		_ADR TOR   // R: base *hold 
 3913 5160 E9360000 		_ADR HERE 
 3914 5164 E72B0000 		_DOLIT 160 
 3914      A0000000 
 3915 516c 252E0000 		_ADR PLUS
 3916 5170 612D0000 		_ADR DUPP 
 3917 5174 DD2C0000 		_ADR TOR  
 3918 5178 E9320000 		_ADR HLD 
 3919 517c 592C0000 		_ADR STORE
 3920 5180 E72B0000 		_DOLIT 0  
 3920      00000000 
 3921 5188 1D390000 		_ADR DIGS  
 3922 518c 512D0000 		_ADR DROP
 3923 5190 E72B0000 		_DOLIT '$'
 3923      24000000 
 3924 5198 D1380000 		_ADR HOLD 
ARM GAS  forth.s 			page 180


 3925 519c E9320000 		_ADR HLD 
 3926 51a0 6D2C0000 		_ADR AT
 3927 51a4 992C0000 		_ADR RFROM   
 3928 51a8 852D0000 		_ADR OVER 
 3929 51ac 352E0000 		_ADR SUBB 
 3930 51b0 D53C0000 		_ADR SPACE 
 3931 51b4 293D0000 		_ADR TYPEE 
 3932 51b8 992C0000 		_ADR RFROM 
 3933 51bc E9320000 		_ADR HLD 
 3934 51c0 592C0000 		_ADR STORE 
 3935 51c4 992C0000 		_ADR RFROM 
 3936 51c8 55320000 		_ADR BASE 
 3937 51cc 592C0000 		_ADR STORE 
 3938 51d0 272A0000 		_UNNEST 
 3939              	
 3940              	/**********************
 3941              	   .S	  ( ... -- ... )
 3942              	 	Display the contents 
 3943              		of the data stack.
 3944              	*************************/
 3945 51d4 9C500000 		_HEADER DOTS,2,".S"
 3945      022E5300 
 3946 51dc 504700BF 		_NEST
 3947 51e0 9D360000 		_ADR	DEPTH	// stack depth
 3948 51e4 DD2C0000 		_ADR	TOR		// start count down loop
 3949 51e8 3B2C0000 		_BRAN	DOTS2  // skip first pass
 3949      FC510000 
 3950              	DOTS1:
 3951 51f0 C92C0000 		_ADR	RAT
 3952 51f4 C1360000 		_ADR	PICK
 3953 51f8 41510000 		_ADR	TDOT // index stack, display contents
 3954              	DOTS2:
 3955 51fc 092C0000 		_DONXT	DOTS1 // loop till done
 3955      F0510000 
 3956 5204 5D3D0000 		_ADR	CR 
 3957 5208 272A0000 		_UNNEST
 3958              	
 3959              	RBASE: 
 3960 520c 47F8046D 		_PUSH 
 3961 5210 4FF47F46 		_MOV32 TOS,RPP 
 3961      C2F20106 
 3962 5218 FDF702BC 		_NEXT 
 3963              	
 3964              	
 3965              	/**************************
 3966              	  R.  display return stack 
 3967              	**************************/
 3968              	RDOT: 
 3969 521c 504700BF 		_NEST 
 3970 5220 0D520000 		_ADR RBASE
 3971 5224 3D2D0000 		_ADR RPAT 
 3972 5228 352E0000 		_ADR SUBB
 3973 522c 052F0000 		_ADR CELLSL   
 3974 5230 E72B0000 		_DOLIT 2
 3974      02000000 
 3975 5238 352E0000 		_ADR SUBB 
 3976 523c DD2C0000 		_ADR TOR
ARM GAS  forth.s 			page 181


 3977 5240 0D520000 		_ADR RBASE 
 3978 5244 D12E0000 	1:	_ADR CELLM 
 3979 5248 612D0000 		_ADR DUPP 
 3980 524c 6D2C0000 		_ADR AT 
 3981 5250 41510000 		_ADR TDOT 
 3982 5254 992C0000 		_ADR RFROM   
 3983 5258 912E0000 		_ADR ONEM 
 3984 525c 612D0000 		_ADR DUPP
 3985 5260 DD2C0000 		_ADR TOR 
 3986 5264 99300000 		_ADR ZEQUAL   
 3987 5268 272C0000 		_QBRAN 1b
 3987      44520000 
 3988 5270 992C0000 		_ADR RFROM  
 3989 5274 712F0000 		_ADR DDROP
 3990 5278 5D3D0000 		_ADR CR   
 3991 527c 272A0000 		_UNNEST 
 3992              	
 3993              	/**************************
 3994              		TRACE ( -- )
 3995              		display stacks content 
 3996              	**************************/
 3997 5280 D8510000 		_HEADER TRACE,5,"TRACE"
 3997      05545241 
 3997      434500BF 
 3998 528c 504700BF 		_NEST
 3999 5290 5D3D0000 		_ADR CR 
 4000 5294 E72B0000 		_DOLIT '>' 
 4000      3E000000 
 4001 529c E72B0000 		_DOLIT 'S'
 4001      53000000 
 4002 52a4 F12A0000 		_ADR EMIT 
 4003 52a8 F12A0000 		_ADR EMIT  
 4004 52ac DD510000 		_ADR DOTS
 4005 52b0 E72B0000 		_DOLIT '>'
 4005      3E000000 
 4006 52b8 E72B0000 		_DOLIT 'R'
 4006      52000000 
 4007 52c0 F12A0000 		_ADR EMIT 
 4008 52c4 F12A0000 		_ADR EMIT 
 4009 52c8 1D520000 		_ADR RDOT 
 4010 52cc 272A0000 		_UNNEST 
 4011              	
 4012              	
 4013              	/*****************************
 4014              	    >NAME	( ca -- na | F )
 4015              	 	Convert code address 
 4016              		to a name address.
 4017              	*****************************/
 4018 52d0 84520000 		_HEADER TNAME,5,">NAME"
 4018      053E4E41 
 4018      4D4500BF 
 4019 52dc 504700BF 		_NEST
 4020 52e0 DD2C0000 		_ADR	TOR			//  
 4021 52e4 01330000 		_ADR	CNTXT			//  va
 4022 52e8 6D2C0000 		_ADR	AT			//  na
 4023              	TNAM1:
 4024 52ec 612D0000 		_ADR	DUPP			//  na na
ARM GAS  forth.s 			page 182


 4025 52f0 272C0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4025      20530000 
 4026 52f8 612D0000 		_ADR	DUPP			//  na na
 4027 52fc 5D420000 		_ADR	NAMET			//  na ca
 4028 5300 C92C0000 		_ADR	RAT			//  na ca code
 4029 5304 CD2D0000 		_ADR	XORR			//  na f --
 4030 5308 272C0000 		_QBRAN	TNAM2
 4030      20530000 
 4031 5310 D12E0000 		_ADR	CELLM			//  la 
 4032 5314 6D2C0000 		_ADR	AT			//  next_na
 4033 5318 3B2C0000 		_BRAN	TNAM1
 4033      EC520000 
 4034              	TNAM2:	
 4035 5320 992C0000 		_ADR	RFROM
 4036 5324 512D0000 		_ADR	DROP			//  0|na --
 4037 5328 272A0000 		_UNNEST			// 0
 4038              	
 4039              	/********************************
 4040              	    .ID	 ( na -- )
 4041              	 	Display the name at address.
 4042              	********************************/
 4043 532c D4520000 		_HEADER DOTID,3,".ID"
 4043      032E4944 
 4044 5334 504700BF 		_NEST
 4045 5338 352F0000 		_ADR	QDUP			// if zero no name
 4046 533c 272C0000 		_QBRAN	DOTI1
 4046      5C530000 
 4047 5344 B5310000 		_ADR	COUNT
 4048 5348 E72B0000 		_DOLIT	0x1F
 4048      1F000000 
 4049 5350 A52D0000 		_ADR	ANDD			// mask lexicon bits
 4050 5354 293D0000 		_ADR	TYPEE
 4051 5358 272A0000 		_UNNEST			// display name string
 4052              	DOTI1:
 4053 535c C53D0000 		_DOTQP	9," {noName}"
 4053      09207B6E 
 4053      6F4E616D 
 4053      657D00BF 
 4054 536c 272A0000 		_UNNEST
 4055              	
 4056              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4057              	.if WANT_SEE 
 4058              	/*******************************
 4059              	    SEE	 ( -- //  string> )
 4060              	 	A simple decompiler.
 4061              	*******************************/
 4062              		_HEADER SEE,3,"SEE"
 4063              		_NEST
 4064              		_ADR	TICK	//  ca --, starting address
 4065              		_ADR	CR	
 4066              		_DOLIT	20
 4067              		_ADR	TOR
 4068              	SEE1:
 4069              		_ADR	CELLP			//  a
 4070              		_ADR	DUPP			//  a a
 4071              		_ADR	DECOMP		//  a
 4072              		_DONXT	SEE1
ARM GAS  forth.s 			page 183


 4073              		_ADR	DROP
 4074              		_UNNEST
 4075              	
 4076              	/*************************
 4077              	 	DECOMPILE ( a -- )
 4078              	 	Convert code in a.  
 4079              		Display name of command or as data.
 4080              	*************************************/
 4081              		_HEADER DECOMP,9,"DECOMPILE"
 4082              		_NEST
 4083              		_ADR	DUPP			//  a a
 4084              	// 	_ADR	TOR			//  a
 4085              		_ADR	AT			//  a code
 4086              		_ADR	DUPP			//  a code code
 4087              		_DOLIT	0xF800D000 //0xF800F800
 4088              		_ADR	ANDD
 4089              		_DOLIT	0xF000D000 //0xF800F000
 4090              		_ADR	EQUAL			//  a code ?
 4091              		_ADR	INVER 
 4092              		_QBRAN	DECOM2	//  not a command
 4093              		//  a valid_code --, extract address and display name
 4094              		MOVW	IP,#0xFFE
 4095              		MOV	WP,TOS
 4096              		LSL	TOS,TOS,#21		//  get bits 22-12
 4097              		ASR	TOS,TOS,#9		//  with sign extension
 4098              		LSR	WP,WP,#15		//  get bits 11-1
 4099              		AND	WP,WP,IP		//  retain only bits 11-1
 4100              		ORR	TOS,TOS,WP		//  get bits 22-1
 4101              		NOP
 4102              		_ADR	OVER			//  a offset a
 4103              		_ADR	PLUS			//  a target-4
 4104              		_ADR	CELLP			//  a target
 4105              		_ADR	TNAME			//  a na/0 --, is it a name?
 4106              		_ADR	QDUP			//  name address or zero
 4107              		_QBRAN	DECOM1
 4108              		_ADR	SPACE			//  a na
 4109              		_ADR	DOTID			//  a --, display name
 4110              	// 	_ADR	RFROM			//  a
 4111              		_ADR	DROP
 4112              		_UNNEST
 4113              	DECOM1:	// _ADR	RFROM		//  a
 4114              		_ADR	AT			//  data
 4115              		_ADR	UDOT			//  display data
 4116              		_UNNEST
 4117              	DECOM2:
 4118              		_ADR	UDOT
 4119              	// 	_ADR	RFROM
 4120              		_ADR	DROP
 4121              		_UNNEST
 4122              	.endif 
 4123              	
 4124              	/**********************
 4125              		VLIST ( -- )
 4126              		WORDS alias 
 4127              		+ display words count 
 4128              	**********************/
 4129 5370 30530000 		_HEADER VLIST,5,"VLIST"
ARM GAS  forth.s 			page 184


 4129      05564C49 
 4129      535400BF 
 4130 537c 504700BF 		_NEST 
 4131 5380 A1530000 		_ADR WORDS
 4132 5384 5D3D0000 		_ADR CR 
 4133 5388 E5530000 		_ADR WC
 4134 538c F53E0000 		_ADR DOT    
 4135 5390 272A0000 		_UNNEST 
 4136              	
 4137              	/*********************
 4138              	    WORDS	( -- )
 4139              	 	Display the names 
 4140              		in the context vocabulary.
 4141              	*******************************/
 4142 5394 74530000 		_HEADER WORDS,5,"WORDS"
 4142      05574F52 
 4142      445300BF 
 4143 53a0 504700BF 		_NEST
 4144 53a4 5D3D0000 		_ADR	CR
 4145 53a8 01330000 		_ADR	CNTXT
 4146 53ac 6D2C0000 		_ADR	AT			// only in context
 4147              	WORS1:
 4148 53b0 352F0000 		_ADR	QDUP			// ?at end of list
 4149 53b4 272C0000 		_QBRAN	WORS2
 4149      D8530000 
 4150 53bc 612D0000 		_ADR	DUPP
 4151 53c0 D53C0000 		_ADR	SPACE
 4152 53c4 35530000 		_ADR	DOTID			// display a name
 4153 53c8 D12E0000 		_ADR	CELLM
 4154 53cc 6D2C0000 		_ADR	AT
 4155 53d0 3B2C0000 		_BRAN	WORS1
 4155      B0530000 
 4156              	WORS2:
 4157 53d8 272A0000 		_UNNEST
 4158              	
 4159              	/*****************************
 4160              		WC ( - n )
 4161              		count words in dictionary 
 4162              	******************************/
 4163 53dc 98530000 		_HEADER WC,2,"WC"
 4163      02574300 
 4164 53e4 504700BF 		_NEST 
 4165 53e8 E72B0000 		_DOLIT 0 
 4165      00000000 
 4166 53f0 41330000 		_ADR LAST
 4167 53f4 6D2C0000 	1:	_ADR AT
 4168 53f8 352F0000 		_ADR QDUP
 4169 53fc 272C0000 		_QBRAN 9f
 4169      1C540000 
 4170 5404 712D0000 		_ADR SWAP
 4171 5408 812E0000 		_ADR ONEP
 4172 540c 712D0000 		_ADR SWAP
 4173 5410 D12E0000 		_ADR CELLM
 4174 5414 3B2C0000 		_BRAN 1b
 4174      F4530000 
 4175 541c 272A0000 	9:	_UNNEST 
 4176              	
ARM GAS  forth.s 			page 185


 4177              	/*************************
 4178              		MARK <string> ( -- )
 4179              	    create forget point 
 4180              		in dictionary 
 4181              	*************************/	
 4182 5420 E0530000 		_HEADER MARK,4,"MARK"
 4182      044D4152 
 4182      4B0000BF 
 4183 542c 504700BF 		_NEST
 4184 5430 D14F0000 		_ADR CREAT 
 4185 5434 C54E0000 		_ADR DODOES 
 4186 5438 272A0000 		_UNNEST
 4187 543c 504700BF 		_NEST  
 4188 5440 992C0000 		_ADR RFROM 
 4189 5444 E72B0000 		_DOLIT 8
 4189      08000000 
 4190 544c 352E0000 		_ADR SUBB
 4191 5450 DD520000 		_ADR TNAME
 4192 5454 D12E0000 		_ADR CELLM
 4193 5458 6D2C0000 		_ADR AT  
 4194 545c 41330000 		_ADR LAST 
 4195 5460 592C0000 		_ADR STORE 
 4196 5464 AD4D0000 		_ADR OVERT
 4197 5468 272A0000 		_UNNEST 
 4198              	
 4199              	/*********************************
 4200              		ARRAY "name" ( n -- )
 4201              	    create an array of n elements 
 4202              	*********************************/
 4203 546c 24540000 		_HEADER ARRAY,5,"ARRAY"
 4203      05415252 
 4203      415900BF 
 4204 5478 504700BF 		_NEST 
 4205 547c 3D420000 		_ADR	TOKEN
 4206 5480 B14C0000 		_ADR	SNAME
 4207 5484 AD4D0000 		_ADR	OVERT
 4208 5488 312A0000 		_ADR	COMPI_NEST
 4209 548c E72B0000 		_DOLIT	DO_ARRAY
 4209      B8540000 
 4210 5494 094E0000 		_ADR	CALLC
 4211 5498 E72B0000 		_DOLIT	UNNEST 
 4211      262A0000 
 4212 54a0 094E0000 		_ADR	CALLC  
 4213 54a4 E72B0000 		_DOLIT  4 
 4213      04000000 
 4214 54ac 452E0000 		_ADR    STAR 
 4215 54b0 89480000 		_ADR    ALLOT 
 4216 54b4 272A0000 		_UNNEST 	
 4217              	
 4218              	// does> du array
 4219              	DO_ARRAY:
 4220 54b8 504700BF 		_NEST  
 4221 54bc E72B0000 		_DOLIT 4 
 4221      04000000 
 4222 54c4 452E0000 		_ADR STAR  
 4223 54c8 C92C0000 		_ADR RAT  
 4224 54cc C12E0000 		_ADR CELLP 
ARM GAS  forth.s 			page 186


 4225 54d0 252E0000 		_ADR PLUS  
 4226 54d4 272A0000 		_UNNEST 
 4227              	
 4228              	
 4229              	/****************
 4230              	  cold start
 4231              	*****************/
 4232              	
 4233              	/**********************************
 4234              	    VER	 ( -- n )
 4235              	 	Return the version 
 4236              		number of this implementation.
 4237              	hidden word used by COLD
 4238              	**********************************/
 4239              	VERSN:
 4240 54d8 504700BF 		_NEST
 4241 54dc E72B0000 		_DOLIT	VER*256+EXT
 4241      00010000 
 4242 54e4 272A0000 		_UNNEST
 4243              	
 4244              	/*********************
 4245              	    hi	  ( -- )
 4246              	 	Display the sign-on 
 4247              		message.
 4248              	***********************/
 4249 54e8 70540000 		_HEADER HI,2,"HI"
 4249      02484900 
 4250 54f0 504700BF 		_NEST
 4251 54f4 5D3D0000 		_ADR	CR	// initialize I/O
 4252 54f8 C53D0000 		_DOTQP	17, "beyond Jupiter, v" 
 4252      11626579 
 4252      6F6E6420 
 4252      4A757069 
 4252      7465722C 
 4253 5510 55320000 		_ADR	BASE
 4254 5514 6D2C0000 		_ADR	AT
 4255 5518 CD390000 		_ADR	HEX	// save radix
 4256 551c D9540000 		_ADR	VERSN
 4257 5520 B1380000 		_ADR	BDIGS
 4258 5524 E72B0000 		_DOLIT  0 
 4258      00000000 
 4259 552c FD380000 		_ADR	DIG
 4260 5530 FD380000 		_ADR	DIG
 4261 5534 E72B0000 		_DOLIT	'.'
 4261      2E000000 
 4262 553c D1380000 		_ADR	HOLD
 4263 5540 1D390000 		_ADR	DIGS
 4264 5544 79390000 		_ADR	EDIGS
 4265 5548 293D0000 		_ADR	TYPEE	// format version number
 4266 554c 55320000 		_ADR	BASE
 4267 5550 592C0000 		_ADR	STORE
 4268 5554 5D3D0000 		_ADR	CR
 4269 5558 272A0000 		_UNNEST			// restore radix
 4270              	
 4271              	/***********************
 4272              	   HI_BOTH ( -- )
 4273              	   display sign-on 
ARM GAS  forth.s 			page 187


 4274              	   on both CONSOLE
 4275              	***********************/
 4276              	HI_BOTH:
 4277 555c 504700BF 	    _NEST 
 4278 5560 8D090000 		_ADR LOCAL 
 4279 5564 BD090000 		_ADR CONSOLE 
 4280 5568 F1540000 		_ADR HI 
 4281 556c A5090000 		_ADR SERIAL 
 4282 5570 BD090000 		_ADR CONSOLE 
 4283 5574 F1540000 		_ADR HI
 4284 5578 272A0000 		_UNNEST 
 4285              	
 4286              	/**********************
 4287              	 check if PS2 keyboard 
 4288              	 present.
 4289              	**********************/
 4290              	PS2_QUERY: 
 4291 557c 504700BF 		_NEST 
 4292 5580 E72B0000 		_DOLIT 400 
 4292      90010000 
 4293 5588 892B0000 		_ADR PAUSE
 4294 558c AD170000 		_ADR PS2_QKEY
 4295 5590 272C0000 		_QBRAN 1f
 4295      AC550000 
 4296 5598 E72B0000 		_DOLIT BAT_OK 
 4296      AA000000 
 4297 55a0 CD2D0000 		_ADR XORR 
 4298 55a4 272C0000 		_QBRAN 9f 
 4298      F0550000 
 4299 55ac 95190000 	1:	_ADR KBD_RST
 4300 55b0 E72B0000 		_DOLIT BAT_OK 
 4300      AA000000 
 4301 55b8 CD2D0000 		_ADR XORR  
 4302 55bc 272C0000 		_QBRAN 9f  
 4302      F0550000 
 4303              	// no ps2 keyboard 
 4304              	// swith to serial console
 4305 55c4 5D3D0000 		_ADR CR 
 4306 55c8 C53D0000 		_DOTQP 25,"no PS2 keyboard detected."
 4306      196E6F20 
 4306      50533220 
 4306      6B657962 
 4306      6F617264 
 4307 55e8 A5090000 		_ADR SERIAL 
 4308 55ec BD090000 		_ADR CONSOLE 
 4309 55f0 272A0000 	9:	_UNNEST 
 4310              	
 4311              	/*************************
 4312              	   check PA8 to 
 4313              	   select console 
 4314              	   PA8 -> low  LOCAL 
 4315              	   PA8 -> high SERIAL 
 4316              	*************************/
 4317              	IF_SENSE:
 4318 55f4 504700BF 		_NEST 
 4319 55f8 8D090000 		_ADR LOCAL 
 4320 55fc E72B0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
ARM GAS  forth.s 			page 188


 4320      10000240 
 4321 5604 6D2C0000 		_ADR AT 
 4322 5608 E72B0000 		_DOLIT (1<<8)
 4322      00010000 
 4323 5610 A52D0000 		_ADR ANDD 
 4324 5614 272C0000 		_QBRAN 9f 
 4324      20560000 
 4325 561c 812E0000 		_ADR ONEP 
 4326 5620 BD090000 	9:  _ADR CONSOLE 
 4327 5624 272A0000 		_UNNEST 
 4328              	
 4329              	/****************************
 4330              	   display READY on active
 4331              	   console
 4332              	***************************/
 4333              	READY:
 4334 5628 504700BF 	    _NEST 
 4335 562c C53D0000 		_DOTQP 5,"READY"
 4335      05524541 
 4335      445900BF 
 4336 5638 5D3D0000 		_ADR  CR 
 4337 563c 272A0000 	    _UNNEST 
 4338              	
 4339              	/********************
 4340              	    COLD	( -- )
 4341              	 	The high level cold 
 4342              		start sequence.
 4343              	**************************/
 4344 5640 EC540000 		.word	LINK 
 4345              		LINK = . 
 4346 5644 04       	_LASTN:	.byte  4
 4347 5645 434F4C44 		.ascii "COLD"
 4348 5649 0000BF   		.p2align 2	
 4349              	COLD:
 4350 564c 00B5FAF7 		_CALL forth_init 
 4350      55FF5DF8 
 4350      04EB
 4351 5656 DFF85CC0 		ldr IP,=COLD1 
 4352 565a FDF7E1B9 		_NEXT
 4353 565e 00BF     		.p2align 2 
 4354              	COLD1:
 4355 5660 E72B0000 		_DOLIT  0 
 4355      00000000 
 4356 5668 BD2B0000 		_ADR ULED // turn off user LED 
 4357 566c E72B0000 		_DOLIT	UZERO
 4357      B8070000 
 4358 5674 E72B0000 		_DOLIT	UPP
 4358      00000020 
 4359 567c E72B0000 		_DOLIT	ULAST-UZERO
 4359      B4000000 
 4360 5684 89370000 		_ADR	MOVE 			// initialize user area
 4361 5688 C1470000 		_ADR	PRESE			// initialize stack and TIB
 4362 568c 411C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4363 5690 7D550000 		_ADR 	PS2_QUERY  
 4364 5694 3D320000 		_ADR	TBOOT
 4365 5698 39370000 		_ADR	ATEXE			// application boot
 4366 569c AD4D0000 		_ADR	OVERT
ARM GAS  forth.s 			page 189


 4367 56a0 F5550000 		_ADR	IF_SENSE
 4368 56a4 29560000 		_ADR    READY 
 4369 56a8 3B2C0000 		_BRAN	QUIT			// start interpretation
 4369      E0470000 
 4370              	COLD2:
 4371              		.p2align 2 	
 4372              	CTOP:
 4373 56b0 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4374              	
 4375              	
 4376 56b4 60560000 	  .end 
ARM GAS  forth.s 			page 190


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 191


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 192


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 193


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 194


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 195


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 BCHAR
          macros.inc:81     *ABS*:0000000000000024 TMP
          macros.inc:82     *ABS*:0000000000000028 CSPAN
          macros.inc:83     *ABS*:000000000000002c TOIN
ARM GAS  forth.s 			page 196


          macros.inc:84     *ABS*:0000000000000030 NTIBB
          macros.inc:85     *ABS*:0000000000000034 TIBUF
             forth.s:3054   .text:000000000000477c EVAL
          macros.inc:87     *ABS*:000000000000003c VHOLD
          macros.inc:88     *ABS*:0000000000000040 CTXT
          macros.inc:89     *ABS*:0000000000000044 FORTH_CTOP
          macros.inc:90     *ABS*:0000000000000048 USER_CTOP
          macros.inc:91     *ABS*:000000000000004c LASTN
          macros.inc:92     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:93     *ABS*:0000000000000050 RX_QUEUE
          macros.inc:94     *ABS*:0000000000000060 RX_HEAD
          macros.inc:95     *ABS*:0000000000000064 RX_TAIL
          macros.inc:96     *ABS*:0000000000000068 VID_CNTR
          macros.inc:97     *ABS*:000000000000006c VID_STATE
          macros.inc:98     *ABS*:0000000000000070 VID_FIELD
          macros.inc:99     *ABS*:0000000000000074 VID_BUFFER
          macros.inc:100    *ABS*:0000000000000078 KBD_STRUCT
          macros.inc:101    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:102    *ABS*:000000000000007c KBD_QUEUE
          macros.inc:103    *ABS*:000000000000008c KBD_QHEAD
          macros.inc:104    *ABS*:0000000000000090 KBD_QTAIL
          macros.inc:105    *ABS*:0000000000000094 ROW
          macros.inc:106    *ABS*:0000000000000098 COL
          macros.inc:107    *ABS*:000000000000009c BK_COLOR
          macros.inc:108    *ABS*:00000000000000a0 PEN_COLOR
          macros.inc:109    *ABS*:00000000000000a4 VFPSW
          macros.inc:110    *ABS*:00000000000000a8 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:475    .text:00000000000004c0 reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:427    .text:000000000000043c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000bb4 tv_out_isr
          ser-term.s:35     .text:0000000000000898 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001490 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:496    .text:00000000000004fc forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002a20 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3075   .text:00000000000047c0 PRESE
             forth.s:2248   .text:0000000000003dc4 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:0000000000002a70 CFSR
             forth.s:494    .text:0000000000002d60 DUPP
             forth.s:429    .text:0000000000002cdc TOR
             forth.s:292    .text:0000000000002be6 DOLIT
             forth.s:1119   .text:0000000000003254 BASE
ARM GAS  forth.s 			page 197


             forth.s:363    .text:0000000000002c58 STORE
             forth.s:2332   .text:0000000000003ec0 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:400    .text:0000000000002c98 RFROM
             forth.s:529    .text:0000000000002da4 ANDD
             forth.s:333    .text:0000000000002c26 QBRAN
             forth.s:144    .text:0000000000002a94 BFAR
             forth.s:178    .text:0000000000002af0 EMIT
             forth.s:2144   .text:0000000000003cd4 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:89     .text:0000000000001f70 FPSCR
              init.s:457    .text:0000000000000498 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:663    .text:0000000000000698 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2190   .text:0000000000003d5c CR
             forth.s:373    .text:0000000000002c6c AT
             forth.s:595    .text:0000000000002e34 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2350   .text:0000000000003ef4 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:725    .text:0000000000002f34 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:586    .text:0000000000002e24 PLUS
             forth.s:1032   .text:00000000000031b4 COUNT
             forth.s:2172   .text:0000000000003d28 TYPEE
             forth.s:869    .text:0000000000003068 CLZ
             forth.s:502    .text:0000000000002d70 SWAP
             forth.s:577    .text:0000000000002e14 LSHIFT
               fpu.s:102    .text:0000000000001f90 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3087   .text:00000000000047e0 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:646    .text:000000000000066e nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:2953   .text:0000000000004638 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
ARM GAS  forth.s 			page 198


              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:261    .text:0000000000002bbc ULED
             forth.s:1092   .text:0000000000003210 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:568    .text:0000000000002dfc RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:436    .text:0000000000000456 systick_exit
              init.s:439    .text:0000000000000458 user_reboot
              init.s:443    .text:000000000000046a ur
              init.s:444    .text:000000000000046a $d
              init.s:452    .text:0000000000000488 user_reboot_msg
              init.s:451    .text:0000000000000486 $t
              init.s:453    .text:0000000000000488 $d
              init.s:600    .text:00000000000005fc remap
              init.s:509    .text:0000000000000524 init_devices
               fpu.s:71     .text:0000000000001f3a fpu_init
          ser-term.s:56     .text:00000000000008c6 ser_init
             tvout.s:74     .text:0000000000000b04 tv_init
           ps2_kbd.s:307    .text:00000000000016b0 kbd_init
         spi-flash.s:41     .text:0000000000001ac4 flash_spi_init
             forth.s:4349   .text:000000000000564c COLD
             forth.s:83     .text:0000000000002a18 NEST
              init.s:522    .text:0000000000000542 wait_hserdy
              init.s:543    .text:0000000000000564 wait_pllrdy
              init.s:555    .text:000000000000057e wait_sws
              init.s:708    .text:00000000000006f4 gpio_config
              init.s:783    .text:00000000000007a0 gpio_out
              init.s:625    .text:000000000000063c nvic_set_priority
              init.s:798    .text:00000000000007b8 UZERO
              init.s:837    .text:000000000000086c ULAST
              init.s:634    .text:0000000000000654 negative_irq
              init.s:680    .text:00000000000006c6 nvic_clear_irq_pending
              init.s:745    .text:000000000000075c input_pull
              init.s:738    .text:000000000000074a output_type
              init.s:761    .text:0000000000000772 gpio_speed
              init.s:799    .text:00000000000007b8 $d
             forth.s:4276   .text:000000000000555c HI_BOTH
           ps2_kbd.s:396    .text:00000000000017ac PS2_QKEY
             tvout.s:563    .text:0000000000001074 TV_EMIT
             forth.s:2991   .text:0000000000004698 INTER
             forth.s:4346   .text:0000000000005644 _LASTN
             forth.s:4372   .text:00000000000056b0 CTOP
             forth.s:4345   .text:0000000000005644 LINK
              init.s:842    .text:000000000000086c $d
ARM GAS  forth.s 			page 199


          ser-term.s:33     .text:0000000000000898 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:000000000000091e $d
          ser-term.s:90     .text:0000000000000922 _SER_QKEY
          ser-term.s:90     .text:000000000000092c SER_QKEY
          ser-term.s:110    .text:0000000000000958 $d
          ser-term.s:110    .text:000000000000095c _SER_EMIT
          ser-term.s:110    .text:0000000000000968 SER_EMIT
          ser-term.s:124    .text:0000000000000982 $d
          ser-term.s:124    .text:0000000000000986 _LOCAL
          ser-term.s:124    .text:000000000000098c $t
          ser-term.s:124    .text:000000000000098c LOCAL
          ser-term.s:133    .text:0000000000000998 $d
          ser-term.s:133    .text:000000000000099c _SERIAL
          ser-term.s:133    .text:00000000000009a4 SERIAL
          ser-term.s:142    .text:00000000000009b0 $d
          ser-term.s:142    .text:00000000000009b4 _CONSOLE
          ser-term.s:142    .text:00000000000009bc $t
          ser-term.s:142    .text:00000000000009bc CONSOLE
          ser-term.s:164    .text:00000000000009dc $d
          ser-term.s:164    .text:00000000000009e0 _ANSI_PARAM
          ser-term.s:164    .text:00000000000009ec ANSI_PARAM
          ser-term.s:166    .text:00000000000009f0 $d
             forth.s:636    .text:0000000000002e80 ONEP
             forth.s:1492   .text:000000000000359c SLMOD
             forth.s:348    .text:0000000000002c3a BRAN
             forth.s:644    .text:0000000000002e90 ONEM
             forth.s:90     .text:0000000000002a26 UNNEST
          ser-term.s:191    .text:0000000000000a5c _ANSI_ESC
          ser-term.s:191    .text:0000000000000a64 ANSI_ESC
          ser-term.s:193    .text:0000000000000a68 $d
          ser-term.s:203    .text:0000000000000a88 _SER_AT
          ser-term.s:203    .text:0000000000000a90 SER_AT
          ser-term.s:205    .text:0000000000000a94 $d
          ser-term.s:219    .text:0000000000000ac4 _SER_CLS
          ser-term.s:219    .text:0000000000000acc $t
          ser-term.s:219    .text:0000000000000acc SER_CLS
          ser-term.s:221    .text:0000000000000ad0 $d
          ser-term.s:228    .text:0000000000000af4 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
ARM GAS  forth.s 			page 200


             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000b04 $t
             tvout.s:150    .text:0000000000000be0 state_vsync
             tvout.s:191    .text:0000000000000c34 state_pre_video
             tvout.s:202    .text:0000000000000c46 state_video_out
             tvout.s:237    .text:0000000000000ca4 state_post_video
             tvout.s:254    .text:0000000000000cca tv_isr_exit
             tvout.s:180    .text:0000000000000c1a sync_end
             tvout.s:246    .text:0000000000000cb6 frame_end
             tvout.s:264    .text:0000000000000ccc $d
             tvout.s:264    .text:0000000000000cd0 _BACKCOLOR
             tvout.s:264    .text:0000000000000cdc BACKCOLOR
             tvout.s:271    .text:0000000000000ce8 $d
             tvout.s:271    .text:0000000000000cec _PENCOLOR
             tvout.s:271    .text:0000000000000cf6 $t
             tvout.s:271    .text:0000000000000cf8 PENCOLOR
             tvout.s:278    .text:0000000000000d04 $d
             tvout.s:278    .text:0000000000000d08 _CURSOR_COL
             tvout.s:278    .text:0000000000000d10 CURSOR_COL
             tvout.s:285    .text:0000000000000d1c $d
             tvout.s:285    .text:0000000000000d20 _CURSOR_ROW
             tvout.s:285    .text:0000000000000d24 $t
             tvout.s:285    .text:0000000000000d24 CURSOR_ROW
             tvout.s:292    .text:0000000000000d30 $d
             tvout.s:292    .text:0000000000000d34 _ROWY
             tvout.s:292    .text:0000000000000d3a $t
             tvout.s:292    .text:0000000000000d3c ROWY
             tvout.s:299    .text:0000000000000d48 $d
             tvout.s:299    .text:0000000000000d4c _COLX
             tvout.s:299    .text:0000000000000d52 $t
             tvout.s:299    .text:0000000000000d54 COLX
             tvout.s:306    .text:0000000000000d60 $d
             tvout.s:306    .text:0000000000000d64 _FONT
             tvout.s:306    .text:0000000000000d6c FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000d78 $d
             tvout.s:313    .text:0000000000000d7c _VIDBUFF
             tvout.s:313    .text:0000000000000d84 $t
             tvout.s:313    .text:0000000000000d84 VIDBUFF
             tvout.s:325    .text:0000000000000d8e $d
             tvout.s:325    .text:0000000000000d92 _PLOT
             tvout.s:325    .text:0000000000000d98 PLOT
             tvout.s:373    .text:0000000000000e1c plot_op
             tvout.s:341    .text:0000000000000dc4 op_back
             tvout.s:350    .text:0000000000000dde op_pen
             tvout.s:359    .text:0000000000000df8 op_invert
ARM GAS  forth.s 			page 201


             tvout.s:363    .text:0000000000000e00 op_xor
             tvout.s:373    .text:0000000000000e1c $d
             tvout.s:378    .text:0000000000000e24 _VSYNC
             tvout.s:378    .text:0000000000000e2a $t
             tvout.s:378    .text:0000000000000e2c VSYNC
             tvout.s:386    .text:0000000000000e36 $d
             tvout.s:386    .text:0000000000000e3a _CLS
             tvout.s:386    .text:0000000000000e3e $t
             tvout.s:386    .text:0000000000000e40 CLS
             tvout.s:410    .text:0000000000000e82 $d
             tvout.s:410    .text:0000000000000e86 _CLRLINE
             tvout.s:410    .text:0000000000000e8e $t
             tvout.s:410    .text:0000000000000e90 CLRLINE
             tvout.s:412    .text:0000000000000e94 $d
             forth.s:604    .text:0000000000002e44 STAR
             forth.s:1719   .text:00000000000037d0 FILL
             tvout.s:427    .text:0000000000000ec8 _SCROLLUP
             tvout.s:427    .text:0000000000000ed4 SCROLLUP
             tvout.s:429    .text:0000000000000ed8 $d
             forth.s:1687   .text:0000000000003788 MOVE
             tvout.s:448    .text:0000000000000f20 _SCROLLDOWN
             tvout.s:448    .text:0000000000000f2c SCROLLDOWN
             tvout.s:450    .text:0000000000000f30 $d
             tvout.s:467    .text:0000000000000f70 _TV_CRLF
             tvout.s:467    .text:0000000000000f78 $t
             tvout.s:467    .text:0000000000000f78 TV_CRLF
             tvout.s:482    .text:0000000000000f9a $d
             tvout.s:482    .text:0000000000000f9e _RIGHT
             tvout.s:482    .text:0000000000000fa4 $t
             tvout.s:482    .text:0000000000000fa4 RIGHT
             tvout.s:495    .text:0000000000000fb8 $d
             tvout.s:495    .text:0000000000000fbc _LEFT
             tvout.s:495    .text:0000000000000fc4 LEFT
             tvout.s:511    .text:0000000000000ff0 FONT_PIXEL
             tvout.s:518    .text:0000000000001000 INCR_X
             tvout.s:525    .text:000000000000100c NEXT_PIXEL
             tvout.s:534    .text:0000000000001014 CHAR_ROW
             tvout.s:536    .text:0000000000001018 $d
             forth.s:775    .text:0000000000002f98 DDUP
             forth.s:420    .text:0000000000002cc8 RAT
             forth.s:314    .text:0000000000002c08 DONXT
             forth.s:766    .text:0000000000002f84 TDROP
             tvout.s:551    .text:0000000000001054 CHAR_FONT
             tvout.s:552    .text:0000000000001054 $t
             tvout.s:563    .text:0000000000001068 $d
             tvout.s:563    .text:000000000000106c _TV_EMIT
             tvout.s:563    .text:0000000000001074 $t
             tvout.s:565    .text:0000000000001078 $d
             forth.s:928    .text:00000000000030e4 ULESS
             tvout.s:593    .text:00000000000010fc CTRL_KEY
             forth.s:735    .text:0000000000002f48 ROT
             forth.s:391    .text:0000000000002c8c CAT
             tvout.s:660    .text:00000000000011e4 SHOW_CURSOR
             tvout.s:691    .text:000000000000126c HIDE_CURSOR
             forth.s:903    .text:00000000000030ac EQUAL
             tvout.s:650    .text:00000000000011c4 BACK_SPACE
             forth.s:486    .text:0000000000002d50 DROP
ARM GAS  forth.s 			page 202


             tvout.s:618    .text:000000000000116c CAR_RET
             tvout.s:629    .text:0000000000001184 LN_FEED
             tvout.s:619    .text:000000000000116c $t
             tvout.s:620    .text:0000000000001170 $d
             tvout.s:630    .text:0000000000001184 $t
             tvout.s:631    .text:0000000000001188 $d
             forth.s:547    .text:0000000000002dcc XORR
             tvout.s:651    .text:00000000000011c4 $t
             tvout.s:652    .text:00000000000011c8 $d
             tvout.s:660    .text:00000000000011d8 _SHOW_CURSOR
             tvout.s:660    .text:00000000000011e4 $t
             tvout.s:663    .text:00000000000011e8 $d
             forth.s:717    .text:0000000000002f24 TWOSL
             forth.s:381    .text:0000000000002c78 CSTOR
             forth.s:757    .text:0000000000002f70 DDROP
             tvout.s:691    .text:0000000000001260 _HIDE_CURSOR
             tvout.s:691    .text:000000000000126c $t
             tvout.s:694    .text:0000000000001270 $d
             forth.s:538    .text:0000000000002db8 ORR
             tvout.s:704    .text:0000000000001298 _TV_AT
             tvout.s:704    .text:000000000000129e $t
             tvout.s:704    .text:00000000000012a0 TV_AT
             tvout.s:719    .text:00000000000012c4 $d
             tvout.s:719    .text:00000000000012c8 _INPUT
             tvout.s:719    .text:00000000000012ce $t
             tvout.s:719    .text:00000000000012d0 INPUT
             tvout.s:721    .text:00000000000012d4 $d
             forth.s:1631   .text:0000000000003700 PAD
             forth.s:2899   .text:0000000000004584 ACCEP
             forth.s:512    .text:0000000000002d84 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001300 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
ARM GAS  forth.s 			page 203


       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
ARM GAS  forth.s 			page 204


       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:000000000000130c sc_ascii
         mcSaite.inc:100    .text:00000000000013c0 shifted
         mcSaite.inc:151    .text:0000000000001420 altchar
         mcSaite.inc:167    .text:0000000000001430 extended
         mcSaite.inc:191    .text:0000000000001458 controls
ARM GAS  forth.s 			page 205


           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007a KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000079 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000078 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007b KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000148e $t
           ps2_kbd.s:179    .text:00000000000015ba send_bit
           ps2_kbd.s:107    .text:00000000000014f0 start_bit
           ps2_kbd.s:118    .text:0000000000001514 parity_bit
           ps2_kbd.s:125    .text:0000000000001528 stop_bit
           ps2_kbd.s:152    .text:000000000000157e store_code
           ps2_kbd.s:253    .text:000000000000164e do_async_key
           ps2_kbd.s:204    .text:00000000000015fe send_parity
           ps2_kbd.s:211    .text:0000000000001610 send_stop
           ps2_kbd.s:218    .text:000000000000161a rx_ack_bit
           ps2_kbd.s:236    .text:000000000000163a is_async_key
           ps2_kbd.s:286    .text:000000000000169e async_keys
           ps2_kbd.s:378    .text:0000000000001784 table_scan
           ps2_kbd.s:260    .text:0000000000001660 set_async_key
           ps2_kbd.s:295    .text:00000000000016ac async_jump
           ps2_kbd.s:265    .text:000000000000166e shift_key
           ps2_kbd.s:273    .text:000000000000167e set_reset
           ps2_kbd.s:268    .text:0000000000001674 ctrl_key
           ps2_kbd.s:271    .text:000000000000167a alt_key
           ps2_kbd.s:287    .text:000000000000169e $d
           ps2_kbd.s:340    .text:000000000000172c $d
           ps2_kbd.s:340    .text:0000000000001730 _KEY_ASYNC
           ps2_kbd.s:340    .text:000000000000173a $t
           ps2_kbd.s:340    .text:000000000000173c KEY_ASYNC
           ps2_kbd.s:350    .text:000000000000174c keycode
           ps2_kbd.s:365    .text:0000000000001774 wait_code
           ps2_kbd.s:396    .text:000000000000179e $d
           ps2_kbd.s:396    .text:00000000000017a2 _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000017f8 inkey_exit
           ps2_kbd.s:418    .text:00000000000017fc pause_key
           ps2_kbd.s:427    .text:0000000000001812 do_modifiers
           ps2_kbd.s:436    .text:000000000000182a shift_down
           ps2_kbd.s:440    .text:0000000000001830 altchar_down
           ps2_kbd.s:444    .text:0000000000001836 ctrl_down
           ps2_kbd.s:452    .text:0000000000001852 do_capslock
           ps2_kbd.s:478    .text:0000000000001876 kbd_send
           ps2_kbd.s:553    .text:000000000000196a kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001988 $d
           ps2_kbd.s:567    .text:000000000000198c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001994 $t
           ps2_kbd.s:567    .text:0000000000001994 KBD_RST
           ps2_kbd.s:591    .text:00000000000019de $d
ARM GAS  forth.s 			page 206


           ps2_kbd.s:591    .text:00000000000019e2 _KBD_LED
           ps2_kbd.s:591    .text:00000000000019ea $t
           ps2_kbd.s:591    .text:00000000000019ec KBD_LED
           ps2_kbd.s:616    .text:0000000000001a40 $d
           ps2_kbd.s:616    .text:0000000000001a44 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001a50 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001a7a $d
           ps2_kbd.s:633    .text:0000000000001a7e _WKEY
           ps2_kbd.s:633    .text:0000000000001a88 WKEY
           ps2_kbd.s:635    .text:0000000000001a8c $d
           ps2_kbd.s:640    .text:0000000000001aa4 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001ac4 $t
         spi-flash.s:85     .text:0000000000001b66 $d
         spi-flash.s:85     .text:0000000000001b6a _CHIP_SEL
         spi-flash.s:85     .text:0000000000001b74 CHIP_SEL
         spi-flash.s:97     .text:0000000000001b92 $d
         spi-flash.s:97     .text:0000000000001b96 _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001ba0 $t
         spi-flash.s:97     .text:0000000000001ba0 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001bce $d
         spi-flash.s:113    .text:0000000000001bd2 _RD_BYTE
         spi-flash.s:113    .text:0000000000001bda $t
         spi-flash.s:113    .text:0000000000001bdc RD_BYTE
         spi-flash.s:133    .text:0000000000001c04 $d
         spi-flash.s:133    .text:0000000000001c08 _WR_BYTE
         spi-flash.s:133    .text:0000000000001c10 $t
         spi-flash.s:133    .text:0000000000001c10 WR_BYTE
         spi-flash.s:151    .text:0000000000001c34 $d
         spi-flash.s:151    .text:0000000000001c38 _WR_DIS
         spi-flash.s:151    .text:0000000000001c40 WR_DIS
         spi-flash.s:153    .text:0000000000001c44 $d
         spi-flash.s:163    .text:0000000000001c60 _WR_ENBL
         spi-flash.s:163    .text:0000000000001c68 $t
         spi-flash.s:163    .text:0000000000001c68 WR_ENBL
         spi-flash.s:165    .text:0000000000001c6c $d
         spi-flash.s:175    .text:0000000000001c88 _RD_SR
         spi-flash.s:175    .text:0000000000001c8e $t
         spi-flash.s:175    .text:0000000000001c90 RD_SR
         spi-flash.s:177    .text:0000000000001c94 $d
         spi-flash.s:185    .text:0000000000001cb8 sr_cmd
         spi-flash.s:191    .text:0000000000001cbf _SEND_ADR
         spi-flash.s:191    .text:0000000000001cc8 $t
         spi-flash.s:191    .text:0000000000001cc8 SEND_ADR
         spi-flash.s:193    .text:0000000000001ccc $d
         spi-flash.s:208    .text:0000000000001d00 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001d0a $t
         spi-flash.s:208    .text:0000000000001d0c WAIT_DONE
         spi-flash.s:210    .text:0000000000001d10 $d
         spi-flash.s:223    .text:0000000000001d40 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001d4a $t
         spi-flash.s:223    .text:0000000000001d4c ERASE_BLK
         spi-flash.s:225    .text:0000000000001d50 $d
         spi-flash.s:238    .text:0000000000001d78 _ERASE_CHIP
ARM GAS  forth.s 			page 207


         spi-flash.s:238    .text:0000000000001d84 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001d88 $d
         spi-flash.s:256    .text:0000000000001db8 _RD_BLK
         spi-flash.s:256    .text:0000000000001dc0 RD_BLK
         spi-flash.s:258    .text:0000000000001dc4 $d
         spi-flash.s:278    .text:0000000000001e0c _WR_BLK
         spi-flash.s:278    .text:0000000000001e14 WR_BLK
         spi-flash.s:280    .text:0000000000001e18 $d
             forth.s:2412   .text:0000000000003f9c HDOT
         spi-flash.s:316    .text:0000000000001e70 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001e7c $t
         spi-flash.s:316    .text:0000000000001e7c SEARCH_FILE
         spi-flash.s:319    .text:0000000000001e80 $d
         spi-flash.s:325    .text:0000000000001e88 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001e94 ERASE_FILE
         spi-flash.s:328    .text:0000000000001e98 $d
         spi-flash.s:334    .text:0000000000001ea0 _DIR
         spi-flash.s:334    .text:0000000000001ea4 $t
         spi-flash.s:334    .text:0000000000001ea4 DIR
         spi-flash.s:337    .text:0000000000001ea8 $d
         spi-flash.s:343    .text:0000000000001eb0 _SAVE
         spi-flash.s:343    .text:0000000000001eb8 SAVE
         spi-flash.s:346    .text:0000000000001ebc $d
         spi-flash.s:352    .text:0000000000001ec4 _LOAD
         spi-flash.s:352    .text:0000000000001ecc LOAD
         spi-flash.s:355    .text:0000000000001ed0 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001ef8 p10
               fpu.s:59     .text:0000000000001f24 _PWR10
               fpu.s:59     .text:0000000000001f2a $t
               fpu.s:59     .text:0000000000001f2c PWR10
               fpu.s:89     .text:0000000000001f66 $d
               fpu.s:89     .text:0000000000001f6a _FPSCR
               fpu.s:89     .text:0000000000001f70 $t
               fpu.s:102    .text:0000000000001f80 $d
               fpu.s:102    .text:0000000000001f84 _CLR_FPSCR
               fpu.s:102    .text:0000000000001f8e $t
               fpu.s:115    .text:0000000000001fa8 $d
               fpu.s:115    .text:0000000000001fac _TOS0
               fpu.s:115    .text:0000000000001fb0 $t
               fpu.s:115    .text:0000000000001fb0 TOS0
               fpu.s:124    .text:0000000000001fbc $d
               fpu.s:124    .text:0000000000001fc0 _TOS1
               fpu.s:124    .text:0000000000001fc4 $t
               fpu.s:124    .text:0000000000001fc4 TOS1
               fpu.s:133    .text:0000000000001fd0 $d
               fpu.s:133    .text:0000000000001fd4 _TOS2
               fpu.s:133    .text:0000000000001fd8 $t
               fpu.s:133    .text:0000000000001fd8 TOS2
               fpu.s:142    .text:0000000000001fe4 $d
               fpu.s:142    .text:0000000000001fe8 _S0FROM
               fpu.s:142    .text:0000000000001fec $t
               fpu.s:142    .text:0000000000001fec S0FROM
               fpu.s:151    .text:0000000000001ff8 $d
ARM GAS  forth.s 			page 208


               fpu.s:151    .text:0000000000001ffc _S1FROM
               fpu.s:151    .text:0000000000002000 $t
               fpu.s:151    .text:0000000000002000 S1FROM
               fpu.s:160    .text:000000000000200c $d
               fpu.s:160    .text:0000000000002010 _S2FROM
               fpu.s:160    .text:0000000000002014 $t
               fpu.s:160    .text:0000000000002014 S2FROM
               fpu.s:171    .text:0000000000002020 $d
               fpu.s:171    .text:0000000000002024 _FTOS
               fpu.s:171    .text:0000000000002028 $t
               fpu.s:171    .text:0000000000002028 FTOS
               fpu.s:181    .text:0000000000002038 $d
               fpu.s:181    .text:000000000000203c _TRUNC
               fpu.s:181    .text:0000000000002042 $t
               fpu.s:181    .text:0000000000002044 TRUNC
               fpu.s:191    .text:0000000000002054 $d
               fpu.s:191    .text:0000000000002058 _STOF
               fpu.s:191    .text:000000000000205c $t
               fpu.s:191    .text:000000000000205c STOF
               fpu.s:201    .text:000000000000206c $d
               fpu.s:201    .text:0000000000002070 _FPLUS
               fpu.s:201    .text:0000000000002074 FPLUS
               fpu.s:214    .text:000000000000208c $d
               fpu.s:214    .text:0000000000002090 _FSUBB
               fpu.s:214    .text:0000000000002094 FSUBB
               fpu.s:228    .text:00000000000020ac $d
               fpu.s:228    .text:00000000000020b0 _FSTAR
               fpu.s:228    .text:00000000000020b4 FSTAR
               fpu.s:241    .text:00000000000020cc $d
               fpu.s:241    .text:00000000000020d0 _FSLH
               fpu.s:241    .text:00000000000020d4 FSLH
               fpu.s:254    .text:00000000000020ec $d
               fpu.s:254    .text:00000000000020f0 _FNEG
               fpu.s:254    .text:00000000000020f8 $t
               fpu.s:254    .text:00000000000020f8 FNEG
               fpu.s:264    .text:0000000000002108 $d
               fpu.s:264    .text:000000000000210c _FABS
               fpu.s:264    .text:0000000000002114 FABS
               fpu.s:276    .text:0000000000002128 $d
               fpu.s:276    .text:000000000000212c _SQRT
               fpu.s:276    .text:0000000000002134 SQRT
               fpu.s:286    .text:0000000000002144 $d
               fpu.s:286    .text:0000000000002148 _FZLESS
               fpu.s:286    .text:000000000000214c $t
               fpu.s:286    .text:000000000000214c FZLESS
               fpu.s:298    .text:0000000000002164 $d
               fpu.s:298    .text:0000000000002168 _FGREAT
               fpu.s:298    .text:000000000000216c FGREAT
               fpu.s:300    .text:0000000000002170 $d
             forth.s:843    .text:0000000000003030 INVER
               fpu.s:309    .text:0000000000002184 _FLESS
               fpu.s:309    .text:0000000000002188 FLESS
               fpu.s:311    .text:000000000000218c $d
               fpu.s:319    .text:000000000000219c _FMIN
               fpu.s:319    .text:00000000000021a4 FMIN
               fpu.s:321    .text:00000000000021a8 $d
               fpu.s:332    .text:00000000000021cc _FMAX
ARM GAS  forth.s 			page 209


               fpu.s:332    .text:00000000000021d4 FMAX
               fpu.s:334    .text:00000000000021d8 $d
               fpu.s:347    .text:00000000000021fc _FSIGN
               fpu.s:347    .text:0000000000002202 $t
               fpu.s:347    .text:0000000000002204 FSIGN
               fpu.s:358    .text:0000000000002218 $d
               fpu.s:358    .text:000000000000221c _FEXP
               fpu.s:358    .text:0000000000002224 FEXP
               fpu.s:369    .text:000000000000223a $d
               fpu.s:369    .text:000000000000223e _FMANT
               fpu.s:369    .text:0000000000002244 $t
               fpu.s:369    .text:0000000000002244 FMANT
               fpu.s:382    .text:000000000000225e $d
               fpu.s:382    .text:0000000000002262 _PI
               fpu.s:382    .text:0000000000002268 PI
               fpu.s:391    .text:0000000000002276 $d
               fpu.s:391    .text:000000000000227a _LOG2
               fpu.s:391    .text:0000000000002280 LOG2
               fpu.s:401    .text:000000000000228e $d
               fpu.s:401    .text:0000000000002292 _LOG2TO10
               fpu.s:401    .text:000000000000229a $t
               fpu.s:401    .text:000000000000229c LOG2TO10
               fpu.s:403    .text:00000000000022a0 $d
             forth.s:521    .text:0000000000002d94 ZLESS
               fpu.s:413    .text:00000000000022cc $d
            strtof.s:29     .text:00000000000022d8 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000022f0 p10p2at
            strtof.s:44     .text:00000000000022f0 $t
            strtof.s:45     .text:00000000000022f4 $d
            strtof.s:57     .text:0000000000002314 bit_state
            strtof.s:58     .text:0000000000002314 $t
            strtof.s:59     .text:0000000000002318 $d
             forth.s:1602   .text:00000000000036c0 PICK
            strtof.s:76     .text:0000000000002338 mant_div
            strtof.s:77     .text:0000000000002338 $t
            strtof.s:78     .text:000000000000233c $d
            strtof.s:79     .text:0000000000002340 div_loop
             forth.s:964    .text:000000000000312c GREAT
            strtof.s:107    .text:000000000000238c mant_mult
            strtof.s:108    .text:000000000000238c $t
            strtof.s:109    .text:0000000000002390 $d
            strtof.s:110    .text:0000000000002394 mult_loop
            strtof.s:134    .text:00000000000023e0 exp_adjust
            strtof.s:135    .text:00000000000023e0 $t
            strtof.s:136    .text:00000000000023e4 $d
             forth.s:746    .text:0000000000002f5c NROT
            strtof.s:148    .text:0000000000002420 pos_exp
             forth.s:859    .text:0000000000003054 ABSS
            strtof.s:161    .text:0000000000002430 decimals
            strtof.s:162    .text:0000000000002430 $t
            strtof.s:163    .text:0000000000002434 $d
             forth.s:1978   .text:0000000000003a90 PARSE_DIGITS
             forth.s:987    .text:0000000000003158 MIN
ARM GAS  forth.s 			page 210


            strtof.s:181    .text:000000000000246c exponent
            strtof.s:182    .text:000000000000246c $t
            strtof.s:183    .text:0000000000002470 $d
             forth.s:2030   .text:0000000000003b4a NEGQ
             forth.s:851    .text:0000000000003044 NEGAT
            strtof.s:204    .text:00000000000024b4 _FLOATQ
            strtof.s:204    .text:00000000000024bc FLOATQ
            strtof.s:208    .text:00000000000024c0 $d
             forth.s:1934   .text:0000000000003a10 DECIM
             forth.s:1951   .text:0000000000003a34 DIGTQ
            strtof.s:245    .text:000000000000255c must_be_dot
             forth.s:2014   .text:0000000000003b30 CHARQ
            strtof.s:290    .text:0000000000002634 error1
            strtof.s:295    .text:0000000000002648 error2
            strtof.s:279    .text:00000000000025fc build_float
             forth.s:409    .text:0000000000002cac DRFROM
            strtof.s:300    .text:0000000000002658 restore_base
              ftoa.s:28     .text:0000000000002668 rounding
              ftoa.s:48     .text:0000000000002690 _ROUND
              ftoa.s:48     .text:0000000000002696 $t
              ftoa.s:48     .text:0000000000002698 ROUND
              ftoa.s:50     .text:000000000000269c $d
             forth.s:976    .text:0000000000003144 MAX
              ftoa.s:67     .text:00000000000026dc _CSTOP
              ftoa.s:67     .text:00000000000026e0 $t
              ftoa.s:67     .text:00000000000026e0 CSTOP
              ftoa.s:79     .text:00000000000026ec ITOA
              ftoa.s:81     .text:00000000000026f0 $d
             forth.s:1349   .text:0000000000003474 STOD
             forth.s:798    .text:0000000000002fcc DABS
             forth.s:1797   .text:00000000000038b0 BDIGS
             forth.s:1841   .text:000000000000391c DIGS
             forth.s:1859   .text:0000000000003950 SIGN
             forth.s:1873   .text:0000000000003978 EDIGS
             forth.s:1667   .text:0000000000003758 CMOVE
              ftoa.s:114    .text:0000000000002740 SCALEUP
              ftoa.s:115    .text:0000000000002740 $t
              ftoa.s:116    .text:0000000000002744 $d
              ftoa.s:137    .text:000000000000278c SCALEDOWN
              ftoa.s:138    .text:000000000000278c $t
              ftoa.s:139    .text:0000000000002790 $d
              ftoa.s:174    .text:00000000000027fc EPART
              ftoa.s:175    .text:00000000000027fc $t
              ftoa.s:176    .text:0000000000002800 $d
              ftoa.s:199    .text:0000000000002830 FPART
              ftoa.s:200    .text:0000000000002830 $t
              ftoa.s:201    .text:0000000000002834 $d
              ftoa.s:244    .text:00000000000028b4 IPART
              ftoa.s:245    .text:00000000000028b4 $t
              ftoa.s:246    .text:00000000000028b8 $d
              ftoa.s:293    .text:000000000000294c _FTOA
              ftoa.s:293    .text:0000000000002950 $t
              ftoa.s:293    .text:0000000000002950 FTOA
              ftoa.s:295    .text:0000000000002954 $d
             forth.s:684    .text:0000000000002ee0 BLANK
              ftoa.s:325    .text:00000000000029ac _FDOT
              ftoa.s:325    .text:00000000000029b0 FDOT
ARM GAS  forth.s 			page 211


              ftoa.s:328    .text:00000000000029b4 $d
             forth.s:1620   .text:00000000000036e8 HERE
             forth.s:3146   .text:0000000000004888 ALLOT
             forth.s:80     .text:0000000000002a18 $t
             forth.s:103    .text:0000000000002a30 COMPI_NEST
             forth.s:116    .text:0000000000002a4e TSTDIN
             forth.s:123    .text:0000000000002a58 TSTDOUT
             forth.s:132    .text:0000000000002a62 $d
             forth.s:132    .text:0000000000002a66 _CFSR
             forth.s:144    .text:0000000000002a86 $d
             forth.s:144    .text:0000000000002a8a _BFAR
             forth.s:156    .text:0000000000002aaa $d
             forth.s:156    .text:0000000000002aae _QKEY
             forth.s:156    .text:0000000000002ab4 QKEY
             forth.s:158    .text:0000000000002ab8 $d
             forth.s:1654   .text:0000000000003738 ATEXE
             forth.s:166    .text:0000000000002ac8 _KEY
             forth.s:166    .text:0000000000002acc $t
             forth.s:166    .text:0000000000002acc KEY
             forth.s:168    .text:0000000000002ad0 KEY1
             forth.s:169    .text:0000000000002ad0 $d
             forth.s:178    .text:0000000000002ae8 _EMIT
             forth.s:180    .text:0000000000002af4 $d
             forth.s:214    .text:0000000000002b04 _RAND
             forth.s:214    .text:0000000000002b0c RAND
             forth.s:216    .text:0000000000002b10 $d
             forth.s:1083   .text:00000000000031fc SEED
             forth.s:1505   .text:00000000000035bc MODD
             forth.s:245    .text:0000000000002b80 _PAUSE
             forth.s:245    .text:0000000000002b86 $t
             forth.s:245    .text:0000000000002b88 PAUSE
             forth.s:247    .text:0000000000002b8c $d
             forth.s:1101   .text:0000000000003224 TIMER
             forth.s:249    .text:0000000000002b94 PAUSE_LOOP
             forth.s:254    .text:0000000000002bac PAUSE_EXIT
             forth.s:261    .text:0000000000002bb4 _ULED
             forth.s:270    .text:0000000000002bd8 ULED_OFF
             forth.s:284    .text:0000000000002bdc $d
             forth.s:284    .text:0000000000002be0 _NOP
             forth.s:284    .text:0000000000002be4 $t
             forth.s:284    .text:0000000000002be4 NOP
             forth.s:301    .text:0000000000002bf0 $d
             forth.s:301    .text:0000000000002bf4 _EXECU
             forth.s:301    .text:0000000000002bfc $t
             forth.s:301    .text:0000000000002bfc EXECU
             forth.s:321    .text:0000000000002c18 NEXT1
             forth.s:339    .text:0000000000002c34 QBRAN1
             forth.s:356    .text:0000000000002c40 $d
             forth.s:356    .text:0000000000002c44 _EXIT
             forth.s:356    .text:0000000000002c4c EXIT
             forth.s:357    .text:0000000000002c4c $d
             forth.s:363    .text:0000000000002c54 _STORE
             forth.s:363    .text:0000000000002c56 $t
             forth.s:373    .text:0000000000002c64 $d
             forth.s:373    .text:0000000000002c68 _AT
             forth.s:373    .text:0000000000002c6a $t
             forth.s:381    .text:0000000000002c70 $d
ARM GAS  forth.s 			page 212


             forth.s:381    .text:0000000000002c74 _CSTOR
             forth.s:391    .text:0000000000002c84 $d
             forth.s:391    .text:0000000000002c88 _CAT
             forth.s:400    .text:0000000000002c90 $d
             forth.s:400    .text:0000000000002c94 _RFROM
             forth.s:409    .text:0000000000002ca2 $d
             forth.s:409    .text:0000000000002ca6 _DRFROM
             forth.s:409    .text:0000000000002caa $t
             forth.s:420    .text:0000000000002cbe $d
             forth.s:420    .text:0000000000002cc2 _RAT
             forth.s:429    .text:0000000000002cd2 $d
             forth.s:429    .text:0000000000002cd6 _TOR
             forth.s:438    .text:0000000000002ce6 $d
             forth.s:438    .text:0000000000002cea _DTOR
             forth.s:438    .text:0000000000002cee $t
             forth.s:438    .text:0000000000002cf0 DTOR
             forth.s:450    .text:0000000000002d02 $d
             forth.s:450    .text:0000000000002d06 _RPSTOR
             forth.s:450    .text:0000000000002d0a $t
             forth.s:450    .text:0000000000002d0c RPSTOR
             forth.s:459    .text:0000000000002d14 $d
             forth.s:459    .text:0000000000002d18 _SPSTOR
             forth.s:459    .text:0000000000002d1c $t
             forth.s:459    .text:0000000000002d1c SPSTOR
             forth.s:468    .text:0000000000002d24 $d
             forth.s:468    .text:0000000000002d28 _SPAT
             forth.s:468    .text:0000000000002d2c $t
             forth.s:468    .text:0000000000002d2c SPAT
             forth.s:477    .text:0000000000002d34 $d
             forth.s:477    .text:0000000000002d38 _RPAT
             forth.s:477    .text:0000000000002d3c $t
             forth.s:477    .text:0000000000002d3c RPAT
             forth.s:486    .text:0000000000002d44 $d
             forth.s:486    .text:0000000000002d48 _DROP
             forth.s:494    .text:0000000000002d56 $d
             forth.s:494    .text:0000000000002d5a _DUPP
             forth.s:494    .text:0000000000002d5e $t
             forth.s:502    .text:0000000000002d66 $d
             forth.s:502    .text:0000000000002d6a _SWAP
             forth.s:512    .text:0000000000002d78 $d
             forth.s:512    .text:0000000000002d7c _OVER
             forth.s:521    .text:0000000000002d8c $d
             forth.s:521    .text:0000000000002d90 _ZLESS
             forth.s:529    .text:0000000000002d9a $d
             forth.s:529    .text:0000000000002d9e _ANDD
             forth.s:529    .text:0000000000002da2 $t
             forth.s:538    .text:0000000000002dae $d
             forth.s:538    .text:0000000000002db2 _ORR
             forth.s:547    .text:0000000000002dc2 $d
             forth.s:547    .text:0000000000002dc6 _XORR
             forth.s:547    .text:0000000000002dca $t
             forth.s:556    .text:0000000000002dd6 $d
             forth.s:556    .text:0000000000002dda _UPLUS
             forth.s:556    .text:0000000000002dde $t
             forth.s:556    .text:0000000000002de0 UPLUS
             forth.s:568    .text:0000000000002df0 $d
             forth.s:568    .text:0000000000002df4 _RSHIFT
ARM GAS  forth.s 			page 213


             forth.s:577    .text:0000000000002e06 $d
             forth.s:577    .text:0000000000002e0a _LSHIFT
             forth.s:586    .text:0000000000002e1e $d
             forth.s:586    .text:0000000000002e22 _PLUS
             forth.s:586    .text:0000000000002e24 $t
             forth.s:595    .text:0000000000002e2c $d
             forth.s:595    .text:0000000000002e30 _SUBB
             forth.s:595    .text:0000000000002e32 $t
             forth.s:604    .text:0000000000002e3e $d
             forth.s:604    .text:0000000000002e42 _STAR
             forth.s:604    .text:0000000000002e44 $t
             forth.s:613    .text:0000000000002e4e $d
             forth.s:613    .text:0000000000002e52 _UMSTA
             forth.s:613    .text:0000000000002e56 $t
             forth.s:613    .text:0000000000002e58 UMSTA
             forth.s:625    .text:0000000000002e64 $d
             forth.s:625    .text:0000000000002e68 _MSTAR
             forth.s:625    .text:0000000000002e6c MSTAR
             forth.s:636    .text:0000000000002e78 $d
             forth.s:636    .text:0000000000002e7c _ONEP
             forth.s:644    .text:0000000000002e86 $d
             forth.s:644    .text:0000000000002e8a _ONEM
             forth.s:652    .text:0000000000002e96 $d
             forth.s:652    .text:0000000000002e9a _TWOP
             forth.s:652    .text:0000000000002ea0 TWOP
             forth.s:660    .text:0000000000002ea6 $d
             forth.s:660    .text:0000000000002eaa _TWOM
             forth.s:660    .text:0000000000002eb0 TWOM
             forth.s:668    .text:0000000000002eb6 $d
             forth.s:668    .text:0000000000002eba _CELLP
             forth.s:668    .text:0000000000002ec0 $t
             forth.s:668    .text:0000000000002ec0 CELLP
             forth.s:676    .text:0000000000002ec6 $d
             forth.s:676    .text:0000000000002eca _CELLM
             forth.s:676    .text:0000000000002ed0 $t
             forth.s:676    .text:0000000000002ed0 CELLM
             forth.s:684    .text:0000000000002ed6 $d
             forth.s:684    .text:0000000000002eda _BLANK
             forth.s:693    .text:0000000000002eea $d
             forth.s:693    .text:0000000000002eee _CELLS
             forth.s:693    .text:0000000000002ef4 $t
             forth.s:693    .text:0000000000002ef4 CELLS
             forth.s:701    .text:0000000000002efa $d
             forth.s:701    .text:0000000000002efe _CELLSL
             forth.s:701    .text:0000000000002f04 $t
             forth.s:701    .text:0000000000002f04 CELLSL
             forth.s:709    .text:0000000000002f0a $d
             forth.s:709    .text:0000000000002f0e _TWOST
             forth.s:709    .text:0000000000002f14 TWOST
             forth.s:717    .text:0000000000002f1a $d
             forth.s:717    .text:0000000000002f1e _TWOSL
             forth.s:725    .text:0000000000002f2a $d
             forth.s:725    .text:0000000000002f2e _QDUP
             forth.s:735    .text:0000000000002f3e $d
             forth.s:735    .text:0000000000002f42 _ROT
             forth.s:735    .text:0000000000002f46 $t
             forth.s:746    .text:0000000000002f52 $d
ARM GAS  forth.s 			page 214


             forth.s:746    .text:0000000000002f56 _NROT
             forth.s:757    .text:0000000000002f66 $d
             forth.s:757    .text:0000000000002f6a _DDROP
             forth.s:757    .text:0000000000002f70 $t
             forth.s:766    .text:0000000000002f7a $d
             forth.s:766    .text:0000000000002f7e _TDROP
             forth.s:766    .text:0000000000002f84 $t
             forth.s:775    .text:0000000000002f8e $d
             forth.s:775    .text:0000000000002f92 _DDUP
             forth.s:785    .text:0000000000002fa4 $d
             forth.s:785    .text:0000000000002fa8 _DPLUS
             forth.s:785    .text:0000000000002fac DPLUS
             forth.s:798    .text:0000000000002fc0 $d
             forth.s:798    .text:0000000000002fc4 _DABS
             forth.s:814    .text:0000000000002fe8 $d
             forth.s:814    .text:0000000000002fec _UDGREAT
             forth.s:814    .text:0000000000002ff0 $t
             forth.s:814    .text:0000000000002ff0 UDGREAT
             forth.s:831    .text:000000000000300c $d
             forth.s:831    .text:0000000000003010 _DZEQUAL
             forth.s:831    .text:0000000000003014 $t
             forth.s:831    .text:0000000000003014 DZEQUAL
             forth.s:843    .text:0000000000003026 $d
             forth.s:843    .text:000000000000302a _INVER
             forth.s:843    .text:000000000000302e $t
             forth.s:851    .text:0000000000003036 $d
             forth.s:851    .text:000000000000303a _NEGAT
             forth.s:859    .text:000000000000304a $d
             forth.s:859    .text:000000000000304e _ABSS
             forth.s:859    .text:0000000000003052 $t
             forth.s:869    .text:000000000000305e $d
             forth.s:869    .text:0000000000003062 _CLZ
             forth.s:869    .text:0000000000003066 $t
             forth.s:877    .text:000000000000306e $d
             forth.s:877    .text:0000000000003072 _CTZ
             forth.s:877    .text:0000000000003076 $t
             forth.s:877    .text:0000000000003078 CTZ
             forth.s:892    .text:0000000000003090 $d
             forth.s:892    .text:0000000000003094 _ZEQUAL
             forth.s:892    .text:0000000000003098 ZEQUAL
             forth.s:903    .text:00000000000030a6 $d
             forth.s:903    .text:00000000000030aa _EQUAL
             forth.s:903    .text:00000000000030ac $t
             forth.s:915    .text:00000000000030bc $d
             forth.s:915    .text:00000000000030c0 _DIFF
             forth.s:915    .text:00000000000030c4 DIFF
             forth.s:928    .text:00000000000030dc $d
             forth.s:928    .text:00000000000030e0 _ULESS
             forth.s:940    .text:00000000000030f4 $d
             forth.s:940    .text:00000000000030f8 _LESS
             forth.s:940    .text:00000000000030fa $t
             forth.s:940    .text:00000000000030fc LESS
             forth.s:952    .text:000000000000310c $d
             forth.s:952    .text:0000000000003110 _UGREAT
             forth.s:952    .text:0000000000003114 UGREAT
             forth.s:964    .text:0000000000003124 $d
             forth.s:964    .text:0000000000003128 _GREAT
ARM GAS  forth.s 			page 215


             forth.s:964    .text:000000000000312a $t
             forth.s:976    .text:000000000000313c $d
             forth.s:976    .text:0000000000003140 _MAX
             forth.s:976    .text:0000000000003144 $t
             forth.s:987    .text:0000000000003150 $d
             forth.s:987    .text:0000000000003154 _MIN
             forth.s:987    .text:0000000000003158 $t
             forth.s:998    .text:0000000000003164 $d
             forth.s:998    .text:0000000000003168 _PSTOR
             forth.s:998    .text:000000000000316c PSTOR
             forth.s:1010   .text:000000000000317c $d
             forth.s:1010   .text:0000000000003180 _DSTOR
             forth.s:1010   .text:0000000000003184 DSTOR
             forth.s:1022   .text:0000000000003198 $d
             forth.s:1022   .text:000000000000319c _DAT
             forth.s:1022   .text:00000000000031a0 DAT
             forth.s:1032   .text:00000000000031aa $d
             forth.s:1032   .text:00000000000031ae _COUNT
             forth.s:1032   .text:00000000000031b4 $t
             forth.s:1042   .text:00000000000031c0 $d
             forth.s:1042   .text:00000000000031c4 _DNEGA
             forth.s:1042   .text:00000000000031cc $t
             forth.s:1042   .text:00000000000031cc DNEGA
             forth.s:1059   .text:00000000000031dc DOVAR
             forth.s:1070   .text:00000000000031e8 DOCON
             forth.s:1083   .text:00000000000031f2 $d
             forth.s:1083   .text:00000000000031f6 _SEED
             forth.s:1092   .text:0000000000003206 $d
             forth.s:1092   .text:000000000000320a _MSEC
             forth.s:1101   .text:000000000000321a $d
             forth.s:1101   .text:000000000000321e _TIMER
             forth.s:1101   .text:0000000000003224 $t
             forth.s:1110   .text:0000000000003230 $d
             forth.s:1110   .text:0000000000003234 _TBOOT
             forth.s:1110   .text:000000000000323a $t
             forth.s:1110   .text:000000000000323c TBOOT
             forth.s:1119   .text:0000000000003248 $d
             forth.s:1119   .text:000000000000324c _BASE
             forth.s:1129   .text:0000000000003260 $d
             forth.s:1129   .text:0000000000003264 _BCHR
             forth.s:1129   .text:000000000000326a $t
             forth.s:1129   .text:000000000000326c BCHR
             forth.s:1139   .text:0000000000003278 TEMP
             forth.s:1148   .text:0000000000003284 $d
             forth.s:1148   .text:0000000000003288 _SPAN
             forth.s:1148   .text:0000000000003290 SPAN
             forth.s:1157   .text:000000000000329c $d
             forth.s:1157   .text:00000000000032a0 _INN
             forth.s:1157   .text:00000000000032a4 $t
             forth.s:1157   .text:00000000000032a4 INN
             forth.s:1167   .text:00000000000032b0 $d
             forth.s:1167   .text:00000000000032b4 _NTIB
             forth.s:1167   .text:00000000000032bc NTIB
             forth.s:1176   .text:00000000000032c8 $d
             forth.s:1176   .text:00000000000032cc _TEVAL
             forth.s:1176   .text:00000000000032d2 $t
             forth.s:1176   .text:00000000000032d4 TEVAL
ARM GAS  forth.s 			page 216


             forth.s:1186   .text:00000000000032e0 $d
             forth.s:1186   .text:00000000000032e4 _HLD
             forth.s:1186   .text:00000000000032e8 $t
             forth.s:1186   .text:00000000000032e8 HLD
             forth.s:1196   .text:00000000000032f4 $d
             forth.s:1196   .text:00000000000032f8 _CNTXT
             forth.s:1196   .text:0000000000003300 $t
             forth.s:1196   .text:0000000000003300 CNTXT
             forth.s:1197   .text:0000000000003300 CRRNT
             forth.s:1207   .text:000000000000330c $d
             forth.s:1207   .text:0000000000003310 _CPP
             forth.s:1207   .text:0000000000003314 CPP
             forth.s:1217   .text:0000000000003320 $d
             forth.s:1217   .text:0000000000003324 _FCP
             forth.s:1217   .text:0000000000003328 $t
             forth.s:1217   .text:0000000000003328 FCP
             forth.s:1227   .text:0000000000003334 $d
             forth.s:1227   .text:0000000000003338 _LAST
             forth.s:1227   .text:0000000000003340 LAST
             forth.s:1241   .text:000000000000334c $d
             forth.s:1241   .text:0000000000003350 _USER_BEGIN
             forth.s:1241   .text:000000000000335c USER_BEGIN
             forth.s:1245   .text:0000000000003368 USR_BGN_ADR
             forth.s:1246   .text:0000000000003368 $d
             forth.s:1252   .text:0000000000003370 _USER_END
             forth.s:1252   .text:000000000000337c USER_END
             forth.s:1256   .text:0000000000003388 USER_END_ADR
             forth.s:1257   .text:0000000000003388 $d
             forth.s:1269   .text:0000000000003390 _WITHI
             forth.s:1269   .text:0000000000003398 WITHI
             forth.s:1271   .text:000000000000339c $d
             forth.s:1286   .text:00000000000033bc _UMMOD
             forth.s:1286   .text:00000000000033c4 UMMOD
             forth.s:1290   .text:00000000000033ce UMMOD0
             forth.s:1297   .text:00000000000033de UMMOD1
             forth.s:1303   .text:00000000000033e8 UMMOD2
             forth.s:1316   .text:00000000000033f4 $d
             forth.s:1316   .text:00000000000033f8 _MSMOD
             forth.s:1316   .text:00000000000033fe $t
             forth.s:1316   .text:0000000000003400 MSMOD
             forth.s:1318   .text:0000000000003404 $d
             forth.s:1327   .text:000000000000342c MMOD1
             forth.s:1334   .text:0000000000003448 MMOD2
             forth.s:1342   .text:0000000000003468 MMOD3
             forth.s:1349   .text:0000000000003470 _STOD
             forth.s:1349   .text:0000000000003474 $t
             forth.s:1358   .text:0000000000003480 $d
             forth.s:1358   .text:0000000000003484 _D2STAR
             forth.s:1358   .text:0000000000003488 $t
             forth.s:1358   .text:0000000000003488 D2STAR
             forth.s:1370   .text:000000000000349a $d
             forth.s:1370   .text:000000000000349e _D2SL
             forth.s:1370   .text:00000000000034a2 $t
             forth.s:1370   .text:00000000000034a4 D2SL
             forth.s:1385   .text:00000000000034b2 $d
             forth.s:1385   .text:00000000000034b6 _DSLMOD
             forth.s:1385   .text:00000000000034bc $t
ARM GAS  forth.s 			page 217


             forth.s:1385   .text:00000000000034bc DSLMOD
             forth.s:1421   .text:0000000000003508 $d
             forth.s:1421   .text:000000000000350c _DSLASH
             forth.s:1421   .text:0000000000003510 DSLASH
             forth.s:1423   .text:0000000000003514 $d
             forth.s:1443   .text:0000000000003558 _DSTAR
             forth.s:1443   .text:000000000000355c DSTAR
             forth.s:1492   .text:0000000000003592 $d
             forth.s:1492   .text:0000000000003596 _SLMOD
             forth.s:1494   .text:00000000000035a0 $d
             forth.s:1505   .text:00000000000035b8 _MODD
             forth.s:1505   .text:00000000000035bc $t
             forth.s:1507   .text:00000000000035c0 $d
             forth.s:1516   .text:00000000000035d0 _SLASH
             forth.s:1516   .text:00000000000035d2 $t
             forth.s:1516   .text:00000000000035d4 SLASH
             forth.s:1518   .text:00000000000035d8 $d
             forth.s:1529   .text:00000000000035ec _SSMOD
             forth.s:1529   .text:00000000000035f2 $t
             forth.s:1529   .text:00000000000035f4 SSMOD
             forth.s:1531   .text:00000000000035f8 $d
             forth.s:1543   .text:0000000000003610 _STASL
             forth.s:1543   .text:0000000000003614 STASL
             forth.s:1545   .text:0000000000003618 $d
             forth.s:1559   .text:000000000000362c _ALGND
             forth.s:1559   .text:0000000000003634 $t
             forth.s:1559   .text:0000000000003634 ALGND
             forth.s:1570   .text:0000000000003644 $d
             forth.s:1570   .text:0000000000003648 _TCHAR
             forth.s:1570   .text:000000000000364e $t
             forth.s:1570   .text:0000000000003650 TCHAR
             forth.s:1572   .text:0000000000003654 $d
             forth.s:1582   .text:000000000000368c TCHA1
             forth.s:1590   .text:0000000000003694 _DEPTH
             forth.s:1590   .text:000000000000369a $t
             forth.s:1590   .text:000000000000369c DEPTH
             forth.s:1602   .text:00000000000036b4 $d
             forth.s:1602   .text:00000000000036b8 _PICK
             forth.s:1604   .text:00000000000036c4 $d
             forth.s:1620   .text:00000000000036e0 _HERE
             forth.s:1622   .text:00000000000036ec $d
             forth.s:1631   .text:00000000000036fc _PAD
             forth.s:1631   .text:0000000000003700 $t
             forth.s:1633   .text:0000000000003704 $d
             forth.s:1644   .text:000000000000371c _TIB
             forth.s:1644   .text:0000000000003720 $t
             forth.s:1644   .text:0000000000003720 TIB
             forth.s:1654   .text:000000000000372a $d
             forth.s:1654   .text:000000000000372e _ATEXE
             forth.s:1667   .text:000000000000374c $d
             forth.s:1667   .text:0000000000003750 _CMOVE
             forth.s:1667   .text:0000000000003756 $t
             forth.s:1674   .text:000000000000376a CMOV1
             forth.s:1671   .text:0000000000003762 CMOV0
             forth.s:1679   .text:0000000000003774 CMOV2
             forth.s:1687   .text:000000000000377c $d
             forth.s:1687   .text:0000000000003780 _MOVE
ARM GAS  forth.s 			page 218


             forth.s:1705   .text:00000000000037b2 MOVE1
             forth.s:1702   .text:00000000000037ae MOVE3
             forth.s:1699   .text:00000000000037aa MOVE0
             forth.s:1710   .text:00000000000037bc MOVE2
             forth.s:1719   .text:00000000000037c4 $d
             forth.s:1719   .text:00000000000037c8 _FILL
             forth.s:1727   .text:00000000000037de FILL2
             forth.s:1723   .text:00000000000037d6 FILL1
             forth.s:1737   .text:00000000000037e6 $d
             forth.s:1737   .text:00000000000037ea _PACKS
             forth.s:1737   .text:00000000000037f0 $t
             forth.s:1737   .text:00000000000037f0 PACKS
             forth.s:1739   .text:00000000000037f4 $d
             forth.s:1768   .text:000000000000384c _DIGIT
             forth.s:1768   .text:0000000000003852 $t
             forth.s:1768   .text:0000000000003854 DIGIT
             forth.s:1770   .text:0000000000003858 $d
             forth.s:1785   .text:000000000000388c _EXTRC
             forth.s:1785   .text:0000000000003894 $t
             forth.s:1785   .text:0000000000003894 EXTRC
             forth.s:1787   .text:0000000000003898 $d
             forth.s:1797   .text:00000000000038ac _BDIGS
             forth.s:1799   .text:00000000000038b4 $d
             forth.s:1809   .text:00000000000038c8 _HOLD
             forth.s:1809   .text:00000000000038d0 HOLD
             forth.s:1811   .text:00000000000038d4 $d
             forth.s:1827   .text:00000000000038f8 _DIG
             forth.s:1827   .text:00000000000038fa $t
             forth.s:1827   .text:00000000000038fc DIG
             forth.s:1829   .text:0000000000003900 $d
             forth.s:1841   .text:0000000000003918 _DIGS
             forth.s:1843   .text:0000000000003920 DIGS1
             forth.s:1844   .text:0000000000003920 $d
             forth.s:1849   .text:000000000000393c DIGS2
             forth.s:1859   .text:0000000000003948 _SIGN
             forth.s:1861   .text:0000000000003954 $d
             forth.s:1865   .text:000000000000396c SIGN1
             forth.s:1873   .text:0000000000003974 _EDIGS
             forth.s:1875   .text:000000000000397c $d
             forth.s:1890   .text:0000000000003998 STRR
             forth.s:1891   .text:0000000000003998 $t
             forth.s:1892   .text:000000000000399c $d
             forth.s:1909   .text:00000000000039c8 _HEX
             forth.s:1909   .text:00000000000039cc $t
             forth.s:1909   .text:00000000000039cc HEX
             forth.s:1911   .text:00000000000039d0 $d
             forth.s:1922   .text:00000000000039e8 _BIN
             forth.s:1922   .text:00000000000039ec $t
             forth.s:1922   .text:00000000000039ec BIN
             forth.s:1924   .text:00000000000039f0 $d
             forth.s:1934   .text:0000000000003a08 _DECIM
             forth.s:1934   .text:0000000000003a10 $t
             forth.s:1936   .text:0000000000003a14 $d
             forth.s:1951   .text:0000000000003a2c _DIGTQ
             forth.s:1953   .text:0000000000003a38 $d
             forth.s:1966   .text:0000000000003a80 DGTQ1
             forth.s:1979   .text:0000000000003a90 $t
ARM GAS  forth.s 			page 219


             forth.s:1980   .text:0000000000003a94 $d
             forth.s:2971   .text:0000000000004664 ABORQ
             forth.s:2003   .text:0000000000003b1c $d
             forth.s:2015   .text:0000000000003b30 $t
             forth.s:2032   .text:0000000000003b4e $d
             forth.s:2055   .text:0000000000003b8e _INTQ
             forth.s:2055   .text:0000000000003b94 INTQ
             forth.s:2058   .text:0000000000003b98 $d
             forth.s:2124   .text:0000000000003ca0 _NUMBER
             forth.s:2124   .text:0000000000003ca8 NUMBER
             forth.s:2126   .text:0000000000003cac $d
             forth.s:2144   .text:0000000000003ccc _SPACE
             forth.s:2144   .text:0000000000003cd2 $t
             forth.s:2146   .text:0000000000003cd8 $d
             forth.s:2155   .text:0000000000003ce8 _SPACS
             forth.s:2155   .text:0000000000003cf0 SPACS
             forth.s:2157   .text:0000000000003cf4 $d
             forth.s:2163   .text:0000000000003d10 CHAR2
             forth.s:2161   .text:0000000000003d0c CHAR1
             forth.s:2172   .text:0000000000003d20 _TYPEE
             forth.s:2174   .text:0000000000003d2c $d
             forth.s:2180   .text:0000000000003d44 TYPE2
             forth.s:2176   .text:0000000000003d38 TYPE1
             forth.s:2190   .text:0000000000003d58 _CR
             forth.s:2192   .text:0000000000003d60 $d
             forth.s:2204   .text:0000000000003d7c DOSTR
             forth.s:2205   .text:0000000000003d7c $t
             forth.s:2207   .text:0000000000003d80 $d
             forth.s:2225   .text:0000000000003da8 STRQP
             forth.s:2226   .text:0000000000003da8 $t
             forth.s:2227   .text:0000000000003dac $d
             forth.s:2236   .text:0000000000003db4 DOTST
             forth.s:2237   .text:0000000000003db4 $t
             forth.s:2238   .text:0000000000003db8 $d
             forth.s:2249   .text:0000000000003dc4 $t
             forth.s:2250   .text:0000000000003dc8 $d
             forth.s:2262   .text:0000000000003dd4 LPAD
             forth.s:2263   .text:0000000000003dd4 $t
             forth.s:2264   .text:0000000000003dd8 $d
             forth.s:2295   .text:0000000000003e58 _DOTR
             forth.s:2295   .text:0000000000003e5c DOTR
             forth.s:2297   .text:0000000000003e60 $d
             forth.s:2379   .text:0000000000003f44 DTOA
             forth.s:2314   .text:0000000000003e88 _UDOTR
             forth.s:2314   .text:0000000000003e8c $t
             forth.s:2314   .text:0000000000003e8c UDOTR
             forth.s:2316   .text:0000000000003e90 $d
             forth.s:2332   .text:0000000000003ebc _UDOT
             forth.s:2334   .text:0000000000003ec4 $d
             forth.s:2350   .text:0000000000003ef0 _DOT
             forth.s:2350   .text:0000000000003ef2 $t
             forth.s:2352   .text:0000000000003ef8 $d
             forth.s:2360   .text:0000000000003f20 DOT1
             forth.s:2379   .text:0000000000003f40 _DTOA
             forth.s:2379   .text:0000000000003f44 $t
             forth.s:2381   .text:0000000000003f48 $d
             forth.s:2396   .text:0000000000003f70 _DDOT
ARM GAS  forth.s 			page 220


             forth.s:2396   .text:0000000000003f74 DDOT
             forth.s:2398   .text:0000000000003f78 $d
             forth.s:2412   .text:0000000000003f98 _HDOT
             forth.s:2414   .text:0000000000003fa0 $d
             forth.s:2436   .text:0000000000003fe8 _QUEST
             forth.s:2436   .text:0000000000003fea $t
             forth.s:2436   .text:0000000000003fec QUEST
             forth.s:2438   .text:0000000000003ff0 $d
             forth.s:2452   .text:0000000000003ffc PARS
             forth.s:2453   .text:0000000000003ffc $t
             forth.s:2454   .text:0000000000004000 $d
             forth.s:2520   .text:0000000000004110 PARS8
             forth.s:2484   .text:0000000000004084 PARS3
             forth.s:2467   .text:000000000000403c PARS1
             forth.s:2482   .text:0000000000004080 PARS2
             forth.s:2488   .text:0000000000004090 PARS4
             forth.s:2500   .text:00000000000040c0 PARS5
             forth.s:2507   .text:00000000000040e4 PARS6
             forth.s:2513   .text:00000000000040f8 PARS7
             forth.s:2531   .text:0000000000004124 _PARSE
             forth.s:2531   .text:000000000000412a $t
             forth.s:2531   .text:000000000000412c PARSE
             forth.s:2533   .text:0000000000004130 $d
             forth.s:2554   .text:0000000000004170 _DOTPR
             forth.s:2554   .text:0000000000004174 DOTPR
             forth.s:2556   .text:0000000000004178 $d
             forth.s:2567   .text:0000000000004190 _PAREN
             forth.s:2567   .text:0000000000004192 $t
             forth.s:2567   .text:0000000000004194 PAREN
             forth.s:2569   .text:0000000000004198 $d
             forth.s:2580   .text:00000000000041b0 _BKSLA
             forth.s:2580   .text:00000000000041b2 $t
             forth.s:2580   .text:00000000000041b4 BKSLA
             forth.s:2582   .text:00000000000041b8 $d
             forth.s:2593   .text:00000000000041d0 _CHAR
             forth.s:2593   .text:00000000000041d8 CHAR
             forth.s:2595   .text:00000000000041dc $d
             forth.s:2605   .text:00000000000041f4 _IMCHAR
             forth.s:2605   .text:00000000000041fc IMCHAR
             forth.s:2607   .text:0000000000004200 $d
             forth.s:3203   .text:0000000000004924 LITER
             forth.s:2616   .text:0000000000004210 _WORDD
             forth.s:2616   .text:0000000000004218 WORDD
             forth.s:2618   .text:000000000000421c $d
             forth.s:2630   .text:0000000000004234 _TOKEN
             forth.s:2630   .text:000000000000423a $t
             forth.s:2630   .text:000000000000423c TOKEN
             forth.s:2632   .text:0000000000004240 $d
             forth.s:2797   .text:0000000000004430 UPPER
             forth.s:2646   .text:0000000000004254 _NAMET
             forth.s:2646   .text:000000000000425a $t
             forth.s:2646   .text:000000000000425c NAMET
             forth.s:2648   .text:0000000000004260 $d
             forth.s:2667   .text:0000000000004280 _SAMEQ
             forth.s:2667   .text:0000000000004286 $t
             forth.s:2667   .text:0000000000004288 SAMEQ
             forth.s:2669   .text:000000000000428c $d
ARM GAS  forth.s 			page 221


             forth.s:2686   .text:00000000000042d4 SAME2
             forth.s:2671   .text:0000000000004298 SAME1
             forth.s:2701   .text:00000000000042e8 FIND
             forth.s:2702   .text:00000000000042e8 $t
             forth.s:2703   .text:00000000000042ec $d
             forth.s:2710   .text:0000000000004308 FIND1
             forth.s:2730   .text:0000000000004360 FIND6
             forth.s:2723   .text:0000000000004348 FIND2
             forth.s:2728   .text:0000000000004358 FIND3
             forth.s:2737   .text:0000000000004378 FIND4
             forth.s:2743   .text:0000000000004394 FIND5
             forth.s:2759   .text:00000000000043bc _NAMEQ
             forth.s:2759   .text:00000000000043c2 $t
             forth.s:2759   .text:00000000000043c4 NAMEQ
             forth.s:2761   .text:00000000000043c8 $d
             forth.s:2776   .text:00000000000043dc _ASCIZ
             forth.s:2776   .text:00000000000043e2 $t
             forth.s:2776   .text:00000000000043e4 ASCIZ
             forth.s:2778   .text:00000000000043e8 $d
             forth.s:2797   .text:0000000000004428 _UPPER
             forth.s:2797   .text:000000000000442e $t
             forth.s:2799   .text:0000000000004434 $d
             forth.s:2830   .text:00000000000044b8 BKSP
             forth.s:2831   .text:00000000000044b8 $t
             forth.s:2832   .text:00000000000044bc $d
             forth.s:2846   .text:0000000000004500 BACK1
             forth.s:2855   .text:0000000000004504 TAP
             forth.s:2856   .text:0000000000004504 $t
             forth.s:2857   .text:0000000000004508 $d
             forth.s:2870   .text:0000000000004520 KTAP
             forth.s:2871   .text:0000000000004520 TTAP
             forth.s:2872   .text:0000000000004520 $t
             forth.s:2873   .text:0000000000004524 $d
             forth.s:2887   .text:0000000000004564 KTAP2
             forth.s:2884   .text:000000000000455c KTAP1
             forth.s:2899   .text:000000000000457c _ACCEP
             forth.s:2901   .text:0000000000004588 $d
             forth.s:2904   .text:0000000000004594 ACCP1
             forth.s:2920   .text:00000000000045dc ACCP4
             forth.s:2916   .text:00000000000045d0 ACCP2
             forth.s:2918   .text:00000000000045d4 ACCP3
             forth.s:2931   .text:00000000000045f0 _QUERY
             forth.s:2931   .text:00000000000045f6 $t
             forth.s:2931   .text:00000000000045f8 QUERY
             forth.s:2933   .text:00000000000045fc $d
             forth.s:2953   .text:0000000000004630 _ABORT
             forth.s:2953   .text:0000000000004636 $t
             forth.s:2955   .text:000000000000463c ABORT1
             forth.s:2956   .text:000000000000463c $d
             forth.s:2972   .text:0000000000004664 $t
             forth.s:2973   .text:0000000000004668 $d
             forth.s:2991   .text:000000000000468c _INTER
             forth.s:2993   .text:000000000000469c $d
             forth.s:3002   .text:00000000000046d8 INTE1
             forth.s:2999   .text:00000000000046ce $t
             forth.s:3000   .text:00000000000046d0 $d
             forth.s:3006   .text:00000000000046e8 INTE2
ARM GAS  forth.s 			page 222


             forth.s:3013   .text:00000000000046f0 _LBRAC
             forth.s:3013   .text:00000000000046f2 $t
             forth.s:3013   .text:00000000000046f4 LBRAC
             forth.s:3015   .text:00000000000046f8 $d
             forth.s:3025   .text:0000000000004710 _DOTOK
             forth.s:3025   .text:0000000000004714 $t
             forth.s:3025   .text:0000000000004714 DOTOK
             forth.s:3027   .text:0000000000004718 $d
             forth.s:3033   .text:000000000000473c DOTO1
             forth.s:3034   .text:000000000000473c $d
             forth.s:3042   .text:0000000000004748 _QSTAC
             forth.s:3042   .text:0000000000004750 QSTAC
             forth.s:3044   .text:0000000000004754 $d
             forth.s:3046   .text:000000000000476a $t
             forth.s:3047   .text:000000000000476c $d
             forth.s:3054   .text:0000000000004774 _EVAL
             forth.s:3056   .text:0000000000004780 EVAL1
             forth.s:3057   .text:0000000000004780 $d
             forth.s:3065   .text:00000000000047a8 EVAL2
             forth.s:3075   .text:00000000000047b8 _PRESE
             forth.s:3077   .text:00000000000047c4 $d
             forth.s:3087   .text:00000000000047d8 _QUIT
             forth.s:3088   .text:00000000000047e0 $d
             forth.s:3090   .text:00000000000047ec QUIT1
             forth.s:3092   .text:00000000000047f0 QUIT2
             forth.s:3102   .text:0000000000004804 _FORGET
             forth.s:3102   .text:000000000000480c FORGET
             forth.s:3104   .text:0000000000004810 $d
             forth.s:3602   .text:0000000000004dac OVERT
             forth.s:3132   .text:0000000000004858 $d
             forth.s:3132   .text:000000000000485c _TICK
             forth.s:3132   .text:000000000000485e $t
             forth.s:3132   .text:0000000000004860 TICK
             forth.s:3134   .text:0000000000004864 $d
             forth.s:3138   .text:0000000000004878 TICK1
             forth.s:3146   .text:0000000000004880 _ALLOT
             forth.s:3146   .text:0000000000004886 $t
             forth.s:3148   .text:000000000000488c $d
             forth.s:3157   .text:000000000000489c _COMMA
             forth.s:3157   .text:000000000000489e $t
             forth.s:3157   .text:00000000000048a0 COMMA
             forth.s:3159   .text:00000000000048a4 $d
             forth.s:3173   .text:00000000000048c0 $d
             forth.s:3173   .text:00000000000048c4 _BCOMP
             forth.s:3173   .text:00000000000048ce $t
             forth.s:3173   .text:00000000000048d0 BCOMP
             forth.s:3175   .text:00000000000048d4 $d
             forth.s:3185   .text:00000000000048e4 _COMPI
             forth.s:3185   .text:00000000000048ec $t
             forth.s:3185   .text:00000000000048ec COMPI
             forth.s:3187   .text:00000000000048f0 $d
             forth.s:3203   .text:000000000000491c _LITER
             forth.s:3203   .text:0000000000004924 $t
             forth.s:3205   .text:0000000000004928 $d
             forth.s:3641   .text:0000000000004e08 CALLC
             forth.s:3215   .text:000000000000493c STRCQ
             forth.s:3216   .text:000000000000493c $t
ARM GAS  forth.s 			page 223


             forth.s:3217   .text:0000000000004940 $d
             forth.s:3239   .text:0000000000004978 _FOR
             forth.s:3239   .text:000000000000497c $t
             forth.s:3239   .text:000000000000497c FOR
             forth.s:3241   .text:0000000000004980 $d
             forth.s:3250   .text:0000000000004998 _DO
             forth.s:3250   .text:000000000000499c DO
             forth.s:3252   .text:00000000000049a0 $d
             forth.s:3258   .text:00000000000049cc DOPLOOP
             forth.s:3259   .text:00000000000049cc $t
             forth.s:3275   .text:00000000000049ee $d
             forth.s:3275   .text:00000000000049f2 _PLOOP
             forth.s:3275   .text:00000000000049f8 $t
             forth.s:3275   .text:00000000000049f8 PLOOP
             forth.s:3277   .text:00000000000049fc $d
             forth.s:3281   .text:0000000000004a10 DOLOOP
             forth.s:3282   .text:0000000000004a10 $t
             forth.s:3300   .text:0000000000004a38 $d
             forth.s:3300   .text:0000000000004a3c _LOOP
             forth.s:3300   .text:0000000000004a44 LOOP
             forth.s:3302   .text:0000000000004a48 $d
             forth.s:3313   .text:0000000000004a60 _BEGIN
             forth.s:3313   .text:0000000000004a66 $t
             forth.s:3313   .text:0000000000004a68 BEGIN
             forth.s:3315   .text:0000000000004a6c $d
             forth.s:3324   .text:0000000000004a74 $d
             forth.s:3324   .text:0000000000004a78 _FNEXT
             forth.s:3324   .text:0000000000004a80 FNEXT
             forth.s:3326   .text:0000000000004a84 $d
             forth.s:3334   .text:0000000000004a9c _I
             forth.s:3334   .text:0000000000004a9e $t
             forth.s:3334   .text:0000000000004aa0 I
             forth.s:3343   .text:0000000000004aac $d
             forth.s:3343   .text:0000000000004ab0 _J
             forth.s:3343   .text:0000000000004ab2 $t
             forth.s:3343   .text:0000000000004ab4 J
             forth.s:3353   .text:0000000000004ac0 $d
             forth.s:3353   .text:0000000000004ac4 _UNTIL
             forth.s:3353   .text:0000000000004aca $t
             forth.s:3353   .text:0000000000004acc UNTIL
             forth.s:3355   .text:0000000000004ad0 $d
             forth.s:3364   .text:0000000000004ae8 _AGAIN
             forth.s:3364   .text:0000000000004aee $t
             forth.s:3364   .text:0000000000004af0 AGAIN
             forth.s:3366   .text:0000000000004af4 $d
             forth.s:3375   .text:0000000000004b0c _IFF
             forth.s:3375   .text:0000000000004b10 IFF
             forth.s:3377   .text:0000000000004b14 $d
             forth.s:3389   .text:0000000000004b3c _AHEAD
             forth.s:3389   .text:0000000000004b42 $t
             forth.s:3389   .text:0000000000004b44 AHEAD
             forth.s:3391   .text:0000000000004b48 $d
             forth.s:3403   .text:0000000000004b70 _REPEA
             forth.s:3403   .text:0000000000004b78 REPEA
             forth.s:3405   .text:0000000000004b7c $d
             forth.s:3416   .text:0000000000004b94 _THENN
             forth.s:3416   .text:0000000000004b9c THENN
ARM GAS  forth.s 			page 224


             forth.s:3418   .text:0000000000004ba0 $d
             forth.s:3429   .text:0000000000004bb4 _AFT
             forth.s:3429   .text:0000000000004bb8 $t
             forth.s:3429   .text:0000000000004bb8 AFT
             forth.s:3431   .text:0000000000004bbc $d
             forth.s:3443   .text:0000000000004bd4 _ELSEE
             forth.s:3443   .text:0000000000004bdc ELSEE
             forth.s:3445   .text:0000000000004be0 $d
             forth.s:3455   .text:0000000000004bf4 _WHILE
             forth.s:3455   .text:0000000000004bfa $t
             forth.s:3455   .text:0000000000004bfc WHILE
             forth.s:3457   .text:0000000000004c00 $d
             forth.s:3466   .text:0000000000004c10 _ABRTQ
             forth.s:3466   .text:0000000000004c18 ABRTQ
             forth.s:3468   .text:0000000000004c1c $d
             forth.s:3477   .text:0000000000004c34 _STRQ
             forth.s:3477   .text:0000000000004c38 STRQ
             forth.s:3479   .text:0000000000004c3c $d
             forth.s:3489   .text:0000000000004c54 _DOTQ
             forth.s:3489   .text:0000000000004c58 DOTQ
             forth.s:3491   .text:0000000000004c5c $d
             forth.s:3505   .text:0000000000004c74 _UNIQU
             forth.s:3505   .text:0000000000004c7c $t
             forth.s:3505   .text:0000000000004c7c UNIQU
             forth.s:3507   .text:0000000000004c80 $d
             forth.s:3514   .text:0000000000004ca8 UNIQ1
             forth.s:3511   .text:0000000000004c9c $d
             forth.s:3524   .text:0000000000004cb0 SNAME
             forth.s:3525   .text:0000000000004cb0 $t
             forth.s:3526   .text:0000000000004cb4 $d
             forth.s:3542   .text:0000000000004cf8 SNAM1
             forth.s:3554   .text:0000000000004d0c _SCOMP
             forth.s:3554   .text:0000000000004d18 SCOMP
             forth.s:3556   .text:0000000000004d1c $d
             forth.s:3568   .text:0000000000004d54 SCOM2
             forth.s:3565   .text:0000000000004d4c SCOM1
             forth.s:3573   .text:0000000000004d68 SCOM3
             forth.s:3582   .text:0000000000004d70 COLON_ABORT
             forth.s:3583   .text:0000000000004d70 $t
             forth.s:3584   .text:0000000000004d74 $d
             forth.s:3602   .text:0000000000004da4 _OVERT
             forth.s:3602   .text:0000000000004daa $t
             forth.s:3604   .text:0000000000004db0 $d
             forth.s:3615   .text:0000000000004dc8 _SEMIS
             forth.s:3615   .text:0000000000004dca $t
             forth.s:3615   .text:0000000000004dcc SEMIS
             forth.s:3617   .text:0000000000004dd0 $d
             forth.s:3629   .text:0000000000004dec _RBRAC
             forth.s:3629   .text:0000000000004dee $t
             forth.s:3629   .text:0000000000004df0 RBRAC
             forth.s:3631   .text:0000000000004df4 $d
             forth.s:3642   .text:0000000000004e08 $t
             forth.s:3643   .text:0000000000004e0c $d
             forth.s:3655   .text:0000000000004e24 _COLON
             forth.s:3655   .text:0000000000004e26 $t
             forth.s:3655   .text:0000000000004e28 COLON
             forth.s:3657   .text:0000000000004e2c $d
ARM GAS  forth.s 			page 225


             forth.s:3669   .text:0000000000004e48 _IMMED
             forth.s:3669   .text:0000000000004e52 $t
             forth.s:3669   .text:0000000000004e54 IMMED
             forth.s:3671   .text:0000000000004e58 $d
             forth.s:3689   .text:0000000000004e84 _CONST
             forth.s:3689   .text:0000000000004e90 CONST
             forth.s:3691   .text:0000000000004e94 $d
             forth.s:3702   .text:0000000000004ec4 $t
             forth.s:3709   .text:0000000000004ec4 DODOES
             forth.s:3711   .text:0000000000004ec8 $d
             forth.s:3726   .text:0000000000004eec $d
             forth.s:3726   .text:0000000000004ef0 _DOES
             forth.s:3726   .text:0000000000004ef6 $t
             forth.s:3726   .text:0000000000004ef8 DOES
             forth.s:3728   .text:0000000000004efc $d
             forth.s:3743   .text:0000000000004f2c _DEFERAT
             forth.s:3743   .text:0000000000004f34 DEFERAT
             forth.s:3745   .text:0000000000004f38 $d
             forth.s:3755   .text:0000000000004f50 _DEFERSTO
             forth.s:3755   .text:0000000000004f58 DEFERSTO
             forth.s:3757   .text:0000000000004f5c $d
             forth.s:3768   .text:0000000000004f78 _DEFER
             forth.s:3768   .text:0000000000004f7e $t
             forth.s:3768   .text:0000000000004f80 DEFER
             forth.s:3770   .text:0000000000004f84 $d
             forth.s:3791   .text:0000000000004fd0 CREAT
             forth.s:3781   .text:0000000000004fb8 DEFER_NOP
             forth.s:3782   .text:0000000000004fb8 $t
             forth.s:3783   .text:0000000000004fbc $d
             forth.s:3791   .text:0000000000004fc8 _CREAT
             forth.s:3793   .text:0000000000004fd4 $d
             forth.s:3806   .text:0000000000004ff8 _VARIA
             forth.s:3806   .text:0000000000005004 VARIA
             forth.s:3808   .text:0000000000005008 $d
             forth.s:3826   .text:0000000000005028 DMP
             forth.s:3827   .text:0000000000005028 $t
             forth.s:3828   .text:000000000000502c $d
             forth.s:3846   .text:0000000000005080 PDUM2
             forth.s:3840   .text:0000000000005068 PDUM1
             forth.s:3861   .text:0000000000005098 $d
             forth.s:3861   .text:000000000000509c _DUMP
             forth.s:3861   .text:00000000000050a4 DUMP
             forth.s:3863   .text:00000000000050a8 $d
             forth.s:3889   .text:0000000000005124 DUMP4
             forth.s:3879   .text:00000000000050fc DUMP1
             forth.s:3891   .text:000000000000512c DUMP3
             forth.s:3904   .text:0000000000005140 TDOT
             forth.s:3905   .text:0000000000005140 $t
             forth.s:3906   .text:0000000000005144 $d
             forth.s:3945   .text:00000000000051d8 _DOTS
             forth.s:3945   .text:00000000000051dc DOTS
             forth.s:3947   .text:00000000000051e0 $d
             forth.s:3954   .text:00000000000051fc DOTS2
             forth.s:3950   .text:00000000000051f0 DOTS1
             forth.s:3959   .text:000000000000520c RBASE
             forth.s:3960   .text:000000000000520c $t
             forth.s:3968   .text:000000000000521c RDOT
ARM GAS  forth.s 			page 226


             forth.s:3970   .text:0000000000005220 $d
             forth.s:3997   .text:0000000000005284 _TRACE
             forth.s:3997   .text:000000000000528a $t
             forth.s:3997   .text:000000000000528c TRACE
             forth.s:3999   .text:0000000000005290 $d
             forth.s:4018   .text:00000000000052d4 _TNAME
             forth.s:4018   .text:00000000000052da $t
             forth.s:4018   .text:00000000000052dc TNAME
             forth.s:4020   .text:00000000000052e0 $d
             forth.s:4023   .text:00000000000052ec TNAM1
             forth.s:4034   .text:0000000000005320 TNAM2
             forth.s:4043   .text:0000000000005330 _DOTID
             forth.s:4043   .text:0000000000005334 $t
             forth.s:4043   .text:0000000000005334 DOTID
             forth.s:4045   .text:0000000000005338 $d
             forth.s:4052   .text:000000000000535c DOTI1
             forth.s:4053   .text:000000000000536a $t
             forth.s:4054   .text:000000000000536c $d
             forth.s:4056   *ABS*:0000000000000000 WANT_SEE
             forth.s:4129   .text:0000000000005374 _VLIST
             forth.s:4129   .text:000000000000537a $t
             forth.s:4129   .text:000000000000537c VLIST
             forth.s:4131   .text:0000000000005380 $d
             forth.s:4142   .text:00000000000053a0 WORDS
             forth.s:4163   .text:00000000000053e4 WC
             forth.s:4142   .text:0000000000005398 _WORDS
             forth.s:4142   .text:000000000000539e $t
             forth.s:4144   .text:00000000000053a4 $d
             forth.s:4147   .text:00000000000053b0 WORS1
             forth.s:4156   .text:00000000000053d8 WORS2
             forth.s:4163   .text:00000000000053e0 _WC
             forth.s:4165   .text:00000000000053e8 $d
             forth.s:4182   .text:0000000000005424 _MARK
             forth.s:4182   .text:000000000000542c MARK
             forth.s:4184   .text:0000000000005430 $d
             forth.s:4187   .text:000000000000543c $t
             forth.s:4188   .text:0000000000005440 $d
             forth.s:4203   .text:0000000000005470 _ARRAY
             forth.s:4203   .text:0000000000005476 $t
             forth.s:4203   .text:0000000000005478 ARRAY
             forth.s:4205   .text:000000000000547c $d
             forth.s:4219   .text:00000000000054b8 DO_ARRAY
             forth.s:4220   .text:00000000000054b8 $t
             forth.s:4221   .text:00000000000054bc $d
             forth.s:4239   .text:00000000000054d8 VERSN
             forth.s:4240   .text:00000000000054d8 $t
             forth.s:4241   .text:00000000000054dc $d
             forth.s:4249   .text:00000000000054ec _HI
             forth.s:4249   .text:00000000000054f0 HI
             forth.s:4251   .text:00000000000054f4 $d
             forth.s:4252   .text:000000000000550e $t
             forth.s:4253   .text:0000000000005510 $d
             forth.s:4277   .text:000000000000555c $t
             forth.s:4278   .text:0000000000005560 $d
             forth.s:4290   .text:000000000000557c PS2_QUERY
             forth.s:4291   .text:000000000000557c $t
             forth.s:4292   .text:0000000000005580 $d
ARM GAS  forth.s 			page 227


             forth.s:4306   .text:00000000000055e6 $t
             forth.s:4307   .text:00000000000055e8 $d
             forth.s:4317   .text:00000000000055f4 IF_SENSE
             forth.s:4318   .text:00000000000055f4 $t
             forth.s:4319   .text:00000000000055f8 $d
             forth.s:4333   .text:0000000000005628 READY
             forth.s:4334   .text:0000000000005628 $t
             forth.s:4335   .text:000000000000562c $d
             forth.s:4335   .text:0000000000005636 $t
             forth.s:4336   .text:0000000000005638 $d
             forth.s:4354   .text:0000000000005660 COLD1
             forth.s:4355   .text:0000000000005660 $d
             forth.s:4370   .text:00000000000056b0 COLD2
             forth.s:4373   .text:00000000000056b0 $d
             forth.s:4376   .text:00000000000056b4 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:455    .text:0000000000000495 $d
              init.s:455    .text:0000000000000496 $t
          ser-term.s:90     .text:000000000000092b $d
          ser-term.s:90     .text:000000000000092c $t
          ser-term.s:110    .text:0000000000000965 $d
          ser-term.s:110    .text:0000000000000966 $t
          ser-term.s:133    .text:00000000000009a3 $d
          ser-term.s:133    .text:00000000000009a4 $t
          ser-term.s:164    .text:00000000000009eb $d
          ser-term.s:164    .text:00000000000009ec $t
          ser-term.s:191    .text:0000000000000a61 $d
          ser-term.s:191    .text:0000000000000a62 $t
          ser-term.s:203    .text:0000000000000a8f $d
          ser-term.s:203    .text:0000000000000a90 $t
             tvout.s:264    .text:0000000000000cdb $d
             tvout.s:264    .text:0000000000000cdc $t
             tvout.s:278    .text:0000000000000d0f $d
             tvout.s:278    .text:0000000000000d10 $t
             tvout.s:306    .text:0000000000000d69 $d
             tvout.s:306    .text:0000000000000d6a $t
             tvout.s:325    .text:0000000000000d97 $d
             tvout.s:325    .text:0000000000000d98 $t
             tvout.s:427    .text:0000000000000ed1 $d
             tvout.s:427    .text:0000000000000ed2 $t
             tvout.s:448    .text:0000000000000f2b $d
             tvout.s:448    .text:0000000000000f2c $t
             tvout.s:495    .text:0000000000000fc1 $d
             tvout.s:495    .text:0000000000000fc2 $t
           ps2_kbd.s:307    .text:00000000000016af $d
           ps2_kbd.s:307    .text:00000000000016b0 $t
           ps2_kbd.s:396    .text:00000000000017ab $d
           ps2_kbd.s:396    .text:00000000000017ac $t
ARM GAS  forth.s 			page 228


           ps2_kbd.s:616    .text:0000000000001a4d $d
           ps2_kbd.s:616    .text:0000000000001a4e $t
           ps2_kbd.s:633    .text:0000000000001a87 $d
           ps2_kbd.s:633    .text:0000000000001a88 $t
         spi-flash.s:85     .text:0000000000001b73 $d
         spi-flash.s:85     .text:0000000000001b74 $t
         spi-flash.s:151    .text:0000000000001c3f $d
         spi-flash.s:151    .text:0000000000001c40 $t
         spi-flash.s:238    .text:0000000000001d83 $d
         spi-flash.s:238    .text:0000000000001d84 $t
         spi-flash.s:256    .text:0000000000001dbf $d
         spi-flash.s:256    .text:0000000000001dc0 $t
         spi-flash.s:278    .text:0000000000001e13 $d
         spi-flash.s:278    .text:0000000000001e14 $t
         spi-flash.s:325    .text:0000000000001e93 $d
         spi-flash.s:325    .text:0000000000001e94 $t
         spi-flash.s:343    .text:0000000000001eb5 $d
         spi-flash.s:343    .text:0000000000001eb6 $t
         spi-flash.s:352    .text:0000000000001ec9 $d
         spi-flash.s:352    .text:0000000000001eca $t
               fpu.s:201    .text:0000000000002073 $d
               fpu.s:201    .text:0000000000002074 $t
               fpu.s:214    .text:0000000000002093 $d
               fpu.s:214    .text:0000000000002094 $t
               fpu.s:228    .text:00000000000020b3 $d
               fpu.s:228    .text:00000000000020b4 $t
               fpu.s:241    .text:00000000000020d3 $d
               fpu.s:241    .text:00000000000020d4 $t
               fpu.s:264    .text:0000000000002111 $d
               fpu.s:264    .text:0000000000002112 $t
               fpu.s:276    .text:0000000000002131 $d
               fpu.s:276    .text:0000000000002132 $t
               fpu.s:298    .text:000000000000216b $d
               fpu.s:298    .text:000000000000216c $t
               fpu.s:309    .text:0000000000002187 $d
               fpu.s:309    .text:0000000000002188 $t
               fpu.s:319    .text:00000000000021a1 $d
               fpu.s:319    .text:00000000000021a2 $t
               fpu.s:332    .text:00000000000021d1 $d
               fpu.s:332    .text:00000000000021d2 $t
               fpu.s:358    .text:0000000000002221 $d
               fpu.s:358    .text:0000000000002222 $t
               fpu.s:382    .text:0000000000002265 $d
               fpu.s:382    .text:0000000000002266 $t
               fpu.s:391    .text:000000000000227f $d
               fpu.s:391    .text:0000000000002280 $t
            strtof.s:204    .text:00000000000024bb $d
            strtof.s:204    .text:00000000000024bc $t
              ftoa.s:325    .text:00000000000029af $d
              ftoa.s:325    .text:00000000000029b0 $t
             forth.s:132    .text:0000000000002a6d $d
             forth.s:132    .text:0000000000002a6e $t
             forth.s:144    .text:0000000000002a91 $d
             forth.s:144    .text:0000000000002a92 $t
             forth.s:156    .text:0000000000002ab3 $d
             forth.s:156    .text:0000000000002ab4 $t
             forth.s:178    .text:0000000000002aed $d
ARM GAS  forth.s 			page 229


             forth.s:178    .text:0000000000002aee $t
             forth.s:214    .text:0000000000002b0b $d
             forth.s:214    .text:0000000000002b0c $t
             forth.s:261    .text:0000000000002bb9 $d
             forth.s:261    .text:0000000000002bba $t
             forth.s:356    .text:0000000000002c49 $d
             forth.s:356    .text:0000000000002c4a $t
             forth.s:381    .text:0000000000002c77 $d
             forth.s:381    .text:0000000000002c78 $t
             forth.s:391    .text:0000000000002c8b $d
             forth.s:391    .text:0000000000002c8c $t
             forth.s:400    .text:0000000000002c97 $d
             forth.s:400    .text:0000000000002c98 $t
             forth.s:420    .text:0000000000002cc5 $d
             forth.s:420    .text:0000000000002cc6 $t
             forth.s:429    .text:0000000000002cd9 $d
             forth.s:429    .text:0000000000002cda $t
             forth.s:486    .text:0000000000002d4d $d
             forth.s:486    .text:0000000000002d4e $t
             forth.s:502    .text:0000000000002d6f $d
             forth.s:502    .text:0000000000002d70 $t
             forth.s:512    .text:0000000000002d81 $d
             forth.s:512    .text:0000000000002d82 $t
             forth.s:521    .text:0000000000002d93 $d
             forth.s:521    .text:0000000000002d94 $t
             forth.s:538    .text:0000000000002db5 $d
             forth.s:538    .text:0000000000002db6 $t
             forth.s:568    .text:0000000000002dfb $d
             forth.s:568    .text:0000000000002dfc $t
             forth.s:577    .text:0000000000002e11 $d
             forth.s:577    .text:0000000000002e12 $t
             forth.s:625    .text:0000000000002e6b $d
             forth.s:625    .text:0000000000002e6c $t
             forth.s:636    .text:0000000000002e7f $d
             forth.s:636    .text:0000000000002e80 $t
             forth.s:644    .text:0000000000002e8d $d
             forth.s:644    .text:0000000000002e8e $t
             forth.s:652    .text:0000000000002e9d $d
             forth.s:652    .text:0000000000002e9e $t
             forth.s:660    .text:0000000000002ead $d
             forth.s:660    .text:0000000000002eae $t
             forth.s:684    .text:0000000000002edd $d
             forth.s:684    .text:0000000000002ede $t
             forth.s:709    .text:0000000000002f11 $d
             forth.s:709    .text:0000000000002f12 $t
             forth.s:717    .text:0000000000002f21 $d
             forth.s:717    .text:0000000000002f22 $t
             forth.s:725    .text:0000000000002f33 $d
             forth.s:725    .text:0000000000002f34 $t
             forth.s:746    .text:0000000000002f5b $d
             forth.s:746    .text:0000000000002f5c $t
             forth.s:775    .text:0000000000002f97 $d
             forth.s:775    .text:0000000000002f98 $t
             forth.s:785    .text:0000000000002fab $d
             forth.s:785    .text:0000000000002fac $t
             forth.s:798    .text:0000000000002fc9 $d
             forth.s:798    .text:0000000000002fca $t
ARM GAS  forth.s 			page 230


             forth.s:851    .text:0000000000003041 $d
             forth.s:851    .text:0000000000003042 $t
             forth.s:892    .text:0000000000003097 $d
             forth.s:892    .text:0000000000003098 $t
             forth.s:915    .text:00000000000030c3 $d
             forth.s:915    .text:00000000000030c4 $t
             forth.s:928    .text:00000000000030e3 $d
             forth.s:928    .text:00000000000030e4 $t
             forth.s:952    .text:0000000000003113 $d
             forth.s:952    .text:0000000000003114 $t
             forth.s:998    .text:000000000000316b $d
             forth.s:998    .text:000000000000316c $t
             forth.s:1010   .text:0000000000003183 $d
             forth.s:1010   .text:0000000000003184 $t
             forth.s:1022   .text:000000000000319f $d
             forth.s:1022   .text:00000000000031a0 $t
             forth.s:1083   .text:00000000000031fb $d
             forth.s:1083   .text:00000000000031fc $t
             forth.s:1092   .text:000000000000320f $d
             forth.s:1092   .text:0000000000003210 $t
             forth.s:1119   .text:0000000000003251 $d
             forth.s:1119   .text:0000000000003252 $t
             forth.s:1148   .text:000000000000328d $d
             forth.s:1148   .text:000000000000328e $t
             forth.s:1167   .text:00000000000032b9 $d
             forth.s:1167   .text:00000000000032ba $t
             forth.s:1207   .text:0000000000003313 $d
             forth.s:1207   .text:0000000000003314 $t
             forth.s:1227   .text:000000000000333d $d
             forth.s:1227   .text:000000000000333e $t
             forth.s:1241   .text:000000000000335b $d
             forth.s:1241   .text:000000000000335c $t
             forth.s:1252   .text:0000000000003379 $d
             forth.s:1252   .text:000000000000337a $t
             forth.s:1269   .text:0000000000003397 $d
             forth.s:1269   .text:0000000000003398 $t
             forth.s:1286   .text:00000000000033c3 $d
             forth.s:1286   .text:00000000000033c4 $t
             forth.s:1421   .text:000000000000350f $d
             forth.s:1421   .text:0000000000003510 $t
             forth.s:1443   .text:000000000000355b $d
             forth.s:1443   .text:000000000000355c $t
             forth.s:1492   .text:000000000000359b $d
             forth.s:1492   .text:000000000000359c $t
             forth.s:1543   .text:0000000000003613 $d
             forth.s:1543   .text:0000000000003614 $t
             forth.s:1602   .text:00000000000036bd $d
             forth.s:1602   .text:00000000000036be $t
             forth.s:1620   .text:00000000000036e5 $d
             forth.s:1620   .text:00000000000036e6 $t
             forth.s:1654   .text:0000000000003737 $d
             forth.s:1654   .text:0000000000003738 $t
             forth.s:1687   .text:0000000000003785 $d
             forth.s:1687   .text:0000000000003786 $t
             forth.s:1719   .text:00000000000037cd $d
             forth.s:1719   .text:00000000000037ce $t
             forth.s:1797   .text:00000000000038af $d
ARM GAS  forth.s 			page 231


             forth.s:1797   .text:00000000000038b0 $t
             forth.s:1809   .text:00000000000038cd $d
             forth.s:1809   .text:00000000000038ce $t
             forth.s:1841   .text:000000000000391b $d
             forth.s:1841   .text:000000000000391c $t
             forth.s:1859   .text:000000000000394d $d
             forth.s:1859   .text:000000000000394e $t
             forth.s:1873   .text:0000000000003977 $d
             forth.s:1873   .text:0000000000003978 $t
             forth.s:1951   .text:0000000000003a33 $d
             forth.s:1951   .text:0000000000003a34 $t
             forth.s:2002   .text:0000000000003b19 $d
             forth.s:2002   .text:0000000000003b1a $t
             forth.s:2055   .text:0000000000003b93 $d
             forth.s:2055   .text:0000000000003b94 $t
             forth.s:2124   .text:0000000000003ca7 $d
             forth.s:2124   .text:0000000000003ca8 $t
             forth.s:2155   .text:0000000000003cef $d
             forth.s:2155   .text:0000000000003cf0 $t
             forth.s:2172   .text:0000000000003d25 $d
             forth.s:2172   .text:0000000000003d26 $t
             forth.s:2190   .text:0000000000003d5b $d
             forth.s:2190   .text:0000000000003d5c $t
             forth.s:2295   .text:0000000000003e5b $d
             forth.s:2295   .text:0000000000003e5c $t
             forth.s:2332   .text:0000000000003ebf $d
             forth.s:2332   .text:0000000000003ec0 $t
             forth.s:2396   .text:0000000000003f73 $d
             forth.s:2396   .text:0000000000003f74 $t
             forth.s:2412   .text:0000000000003f9b $d
             forth.s:2412   .text:0000000000003f9c $t
             forth.s:2554   .text:0000000000004173 $d
             forth.s:2554   .text:0000000000004174 $t
             forth.s:2593   .text:00000000000041d5 $d
             forth.s:2593   .text:00000000000041d6 $t
             forth.s:2605   .text:00000000000041fb $d
             forth.s:2605   .text:00000000000041fc $t
             forth.s:2616   .text:0000000000004215 $d
             forth.s:2616   .text:0000000000004216 $t
             forth.s:2899   .text:0000000000004583 $d
             forth.s:2899   .text:0000000000004584 $t
             forth.s:2991   .text:0000000000004697 $d
             forth.s:2991   .text:0000000000004698 $t
             forth.s:3042   .text:000000000000474f $d
             forth.s:3042   .text:0000000000004750 $t
             forth.s:3054   .text:0000000000004779 $d
             forth.s:3054   .text:000000000000477a $t
             forth.s:3075   .text:00000000000047bf $d
             forth.s:3075   .text:00000000000047c0 $t
             forth.s:3087   .text:00000000000047dd $d
             forth.s:3087   .text:00000000000047de $t
             forth.s:3102   .text:000000000000480b $d
             forth.s:3102   .text:000000000000480c $t
             forth.s:3250   .text:000000000000499b $d
             forth.s:3250   .text:000000000000499c $t
             forth.s:3300   .text:0000000000004a41 $d
             forth.s:3300   .text:0000000000004a42 $t
ARM GAS  forth.s 			page 232


             forth.s:3324   .text:0000000000004a7d $d
             forth.s:3324   .text:0000000000004a7e $t
             forth.s:3375   .text:0000000000004b0f $d
             forth.s:3375   .text:0000000000004b10 $t
             forth.s:3403   .text:0000000000004b77 $d
             forth.s:3403   .text:0000000000004b78 $t
             forth.s:3416   .text:0000000000004b99 $d
             forth.s:3416   .text:0000000000004b9a $t
             forth.s:3443   .text:0000000000004bd9 $d
             forth.s:3443   .text:0000000000004bda $t
             forth.s:3466   .text:0000000000004c17 $d
             forth.s:3466   .text:0000000000004c18 $t
             forth.s:3477   .text:0000000000004c37 $d
             forth.s:3477   .text:0000000000004c38 $t
             forth.s:3489   .text:0000000000004c57 $d
             forth.s:3489   .text:0000000000004c58 $t
             forth.s:3554   .text:0000000000004d15 $d
             forth.s:3554   .text:0000000000004d16 $t
             forth.s:3689   .text:0000000000004e8d $d
             forth.s:3689   .text:0000000000004e8e $t
             forth.s:3743   .text:0000000000004f33 $d
             forth.s:3743   .text:0000000000004f34 $t
             forth.s:3755   .text:0000000000004f57 $d
             forth.s:3755   .text:0000000000004f58 $t
             forth.s:3791   .text:0000000000004fcf $d
             forth.s:3791   .text:0000000000004fd0 $t
             forth.s:3806   .text:0000000000005001 $d
             forth.s:3806   .text:0000000000005002 $t
             forth.s:3861   .text:00000000000050a1 $d
             forth.s:3861   .text:00000000000050a2 $t
             forth.s:3945   .text:00000000000051db $d
             forth.s:3945   .text:00000000000051dc $t
             forth.s:4163   .text:00000000000053e3 $d
             forth.s:4163   .text:00000000000053e4 $t
             forth.s:4182   .text:0000000000005429 $d
             forth.s:4182   .text:000000000000542a $t
             forth.s:4249   .text:00000000000054ef $d
             forth.s:4249   .text:00000000000054f0 $t
             forth.s:4348   .text:0000000000005649 $d
             forth.s:4348   .text:000000000000564a $t

UNDEFINED SYMBOLS
_mstack
