ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
ARM GAS  forth.s 			page 4


 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0xE000E400 
 203              	
 204              	/*  IRQ number */
 205              	   .equ NMI_IRQ, (-14) // non maskable
 206              	   .equ HF_IRQ, (-13)  // hard fault
 207              	   .equ MM_IRQ, (-12)  // memory Management
 208              	   .equ BF_IRQ, (-11)  // bus fault 
 209              	   .equ UF_IRQ, (-10)  // usage fault 
 210              	   .equ SVC_IRQ, (-5)  // service call 
 211              	   .equ DM_IRQ, (-4)  // debug monitor
 212              	   .equ PSV_IRQ, (-2) // pending service 
 213              	   .equ STCK_IRQ, (-1) // systick 
 214              	   .equ WWDG_IRQ, (0) // window watchdog 
 215              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 216              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 217              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 218              	   .equ FLASH_IRQ, (4) // flash global 
 219              	   .equ RCC_IRQ, (5)  // real time clock 
 220              	   .equ EXTI0_IRQ, (6) // 
 221              	   .equ EXTI1_IRQ, (7)
 222              	   .equ EXTI2_IRQ, (8)
 223              	   .equ EXTI3_IRQ, (9)
 224              	   .equ EXTI4_IRQ, (10)
 225              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 226              	   .equ DMA1S1_IRQ, (12)
 227              	   .equ DMA1S2_IRQ, (13)
 228              	   .equ DMA1S3_IRQ, (14)
 229              	   .equ DMA1S4_IRQ, (15)
 230              	   .equ DMA1S5_IRQ, (16)
 231              	   .equ DMA1S6_IRQ, (17)
 232              	   .equ ADC_IRQ, (18)
 233              	   .equ EXIT9_5_IRQ, (23)
 234              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 235              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 236              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 237              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 238              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 239              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 240              	   .equ TIM4_IRQ, (30) // TIMER4 global
 241              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 242              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 243              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 244              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 245              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 246              	   .equ SPI2_IRQ, (36)  // SPI2 global
 247              	   .equ USART1_IRQ, (37) // USART1 global
 248              	   .equ USART2_IRQ, (38) // USART2 global
 249              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 250              	   .equ EXTI17_IRQ, (41)
 251              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 252              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 253              	   .equ SDIO_IRQ, (49) // SDIO global
 254              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 255              	   .equ SPI3_IRQ, (51)
ARM GAS  forth.s 			page 6


 256              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 257              	   .equ DMA2S1_IRQ, (57) 
 258              	   .equ DMAS2_IRQ, (58)
 259              	   .equ DMAS3_IRQ, (59)
 260              	   .equ DMAS4_IRQ, (60)
 261              	   .equ OTG_FS_IRQ, (67)
 262              	   .equ DMA2S5_IRQ, (68)
 263              	   .equ DMA2S6_IRQ, (69)
 264              	   .equ DMA2S7_IRQ, (70)
 265              	   .equ USART6_IRQ, (71)
 266              	   .equ I2C3EV_IRQ, (72)
 267              	   .equ I2C3ER_IRQ, (73)
 268              	   .equ FPU_IRQ, (81) // FPU global
 269              	   .equ SPI4_IRQ, (84)
 270              	   .equ SPI5_IRQ, (85)
 271              	   
 272              	
 273              	/* TIMERS registers */
 274              	.equ TIM1_BASE_ADR,0x40010000
 275              	.equ TIM9_BASE_ADR,0x40010400
 276              	.equ TIM10_BASE_ADR,0x40010800
 277              	.equ TIM11_BASE_ADR,0x40010C00
 278              	
 279              	.equ TIM2_BASE_ADR,0x40000000
 280              	.equ TIM3_BASE_ADR,0x40000400
 281              	.equ TIM4_BASE_ADR,0x40000800
 282              	.equ TIM5_BASE_ADR,0x40000C00
 283              	
 284              	/* TIMER1 */
 285              	.equ TIM1_RCR,48 
 286              	.equ TIM1_BDTR,68 
 287              	
 288              	/* TIMER2..TIMER5 */
 289              	.equ TIM_CR1,0
 290              	.equ TIM_CR2,4
 291              	.equ TIM_SMCR,8
 292              	.equ TIM_DIER,12
 293              	.equ TIM_SR,16
 294              	.equ TIM_EGR,20
 295              	.equ TIM_CCMR1,24
 296              	.equ TIM_CCMR2,28
 297              	.equ TIM_CCER,32
 298              	.equ TIM_CNT,36
 299              	.equ TIM_PSC,40
 300              	.equ TIM_ARR,44
 301              	.equ TIM_CCR1,52
 302              	.equ TIM_CCR2,56
 303              	.equ TIM_CCR3,60
 304              	.equ TIM_CCR4,64
 305              	.equ TIM_DCR,72
 306              	.equ TIM_DMAR,76
 307              	.equ TIM2_OR,80
 308              	.equ TIM5_OR,80 
 309              	
 310              	/* SYSCFG registers */
 311              	.equ SYSCFG_BASE_ADR, 0x40013800
 312              	
ARM GAS  forth.s 			page 7


 313              	.equ SYSCFG_MEMRMP,0
 314              	.equ SYSCFG_PMC,4
 315              	.equ SYSCFG_EXTICR1,8
 316              	.equ SYSCFG_EXTICR2,12
 317              	.equ SYSCFG_EXTICR3,16
 318              	.equ SYSCFG_EXTICR4,20
 319              	.equ SYSCFG_CMPCR,32
 320              	
 321              	/* EXTI registers */
 322              	.equ EXTI_BASE_ADR, 0x40013C00
 323              	
 324              	.equ EXTI_IMR,0
 325              	.equ EXTI_EMR,4
 326              	.equ EXTI_RTSR,8
 327              	.equ EXTI_FTSR,12
 328              	.equ EXTI_SWIER,16
 329              	.equ EXTI_PR,20
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
ARM GAS  forth.s 			page 8


  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ NBASE, BOOT+4  // numeric conversion base 
  78              	  .equ TMP, NBASE+4   // temporary variable
  79              	  .equ CSPAN, TMP+4  // character count received by expect  
  80              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  81              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  82              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  83              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  84              	  .equ HOLD, EVAL+4   // hold pointer 
  85              	  .equ CTXT, HOLD+4  // context pointer 
  86              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  87              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  88              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  89              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  90              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  91              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  92              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  93              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  94              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  95              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  96              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
ARM GAS  forth.s 			page 9


  97              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  98              	  .equ KBD_QUEUE_SIZE, 16 
  99              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 100              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 101              	  .equ KBD_QTAIL,KBD_QHEAD+4
 102              	  .equ ROW,KBD_QTAIL+4 
 103              	  .equ COL,ROW+4 
 104              	  .equ BK_COLOR,COL+4 
 105              	  .equ PEN_COLOR,BK_COLOR+4
 106              	
 107              	/***********************************************
 108              	* MACROS
 109              	*	Assemble inline direct threaded code ending.
 110              	***********************************************/
 111              		.macro _CALL fn /* low level routine call */ 
 112              	 	PUSH {LR}
 113              		BL \fn  
 114              		POP {LR}
 115              		.endm
 116              		
 117              		.macro _RET /* exit sub-routine */ 
 118              		BX LR 
 119              		.endm 
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.word LINK 
 124              			.equ LINK , . 
 125              		_\label: .byte \nlen    // name field
 126              			.ascii "\name"
 127              			.p2align 2 
 128              		\label:   // code field 
 129              		.endm 
 130              		
 131              	
 132              	// local function header 
 133              		.macro _FUNC label 
 134              		.section .text, "ax", %progbits 
 135              		.p2align 2 
 136              		.type \label, %function  
 137              		\label:
 138              		.endm 
 139              	
 140              	// global function header 
 141              		.macro _GBL_FUNC label 
 142              		.global \label 
 143              		_FUNC \label 
 144              		.endm 
 145              	
 146              	
 147              	// load large constant to register 
 148              		.macro _MOV32 r, value 
 149              		mov \r,#(\value&0xffff)
 150              		movt \r,#(\value>>16)
 151              		.endm 
 152              	
 153              		.macro _NEXT /* direct jump INEXT */ 
ARM GAS  forth.s 			page 10


 154              		B INEXT   
 155              		.endm 
 156              	
 157              	 	.macro	_NEST /*start high level word */
 158              		BX INX  
 159              		NOP.N 
 160              		.endm
 161              	
 162              		.macro _ADR label 
 163              		.word 1+\label  
 164              		.endm 
 165              	
 166              	 	.macro	_UNNEST	/*end high level word */
 167              		_ADR UNNEST 
 168              		.endm
 169              	
 170              	 	.macro	_DOLIT u /*long literals */
 171              		_ADR	DOLIT
 172              		.word	\u 
 173              		.endm
 174              	
 175              		.macro _DOTQP len, text 
 176              		_ADR DOTQP 
 177              		.byte \len 
 178              		.ascii "\text" 
 179              		.p2align 2 
 180              		.endm
 181              	
 182              		.macro _COMPI name 
 183              		_DOLIT \name 
 184              		_ADR CALLC 
 185              		.endm 
 186              	
 187              		.macro _ABORQ len,name 
 188              		_ADR ABORQ 
 189              		.byte \len 
 190              		.ascii "\name"
 191              		.p2align 2 
 192              		.endm
 193              	
 194              		.macro _BRAN label 
 195              		_ADR BRAN 
 196              		.word \label 
 197              		.endm 
 198              	
 199              		.macro _QBRAN label 
 200              		_ADR QBRAN 
 201              		.word \label
 202              		.endm 
 203              	
 204              		.macro _DONXT label 
 205              		_ADR DONXT
 206              		.word \label 
 207              		.endm 
 208              	
 209              	 	.macro	_PUSH	/*push TOS on data stack*/
 210              		STR	TOS,[DSP,#-4]!
ARM GAS  forth.s 			page 11


 211              		.endm
 212              	
 213              	 	.macro	_POP /*pop data stack to TOS */
 214              		LDR	TOS,[DSP],#4
 215              		.endm
  32              	
  33              	/*************************************
  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
  38              	
  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
ARM GAS  forth.s 			page 12


  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
ARM GAS  forth.s 			page 13


 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
 148              	
 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .text, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 014D     		ldr r5,exception_msg 
 159 0002 00F049F8 		bl uart_puts 
 160 0006 31E0     		b reset_mcu    
 161              	  .size  default_handler, .-default_handler
 162              	exception_msg:
 163 0008 0C000000 		.word .+4 
 164 000c 12       		.byte 18
 165 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 165      65707469 
 165      6F6E2072 
 165      65626F6F 
 165      7421
 166 001f 00       		.p2align 2
 167              	
 168              	/*********************************
 169              		system milliseconds counter
 170              	*********************************/	
 171              	  .type systick_handler, %function
 172              	  .p2align 2 
 173              	  .global systick_handler
 174              	systick_handler:
 175 0020 4FF00003 	  _MOV32 r3,UPP
 175      C2F20003 
 176 0028 9868     	  ldr r0,[r3,#TICKS]  
 177 002a 00F10100 	  add r0,#1
 178 002e 9860     	  str r0,[r3,#TICKS]
 179 0030 D868     	  ldr r0,[r3,#CD_TIMER]
 180 0032 10B1     	  cbz r0, systick_exit
 181 0034 A0F10100 	  sub r0,#1
 182 0038 D860     	  str r0,[r3,#CD_TIMER]
 183              	systick_exit:
 184 003a 7047     	  bx lr
 185              	
 186              	/**************************
 187              		UART RX handler
 188              	**************************/
ARM GAS  forth.s 			page 14


 189              		.p2align 2
 190              		.type uart_rx_handler, %function
 191              	uart_rx_handler:
 192 003c 4FF48053 		_MOV32 r3,UART 
 192      C4F20103 
 193 0044 1868     		ldr r0,[r3,#USART_SR]
 194 0046 5968     		ldr r1,[r3,#USART_DR]
 195 0048 10F0200F 		tst r0,#(1<<5) // RXNE 
 196 004c 0AD0     		beq 2f // no char received 
 197 004e 0329     		cmp r1,#3
 198 0050 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
 199 0052 04F14400 		add r0,UP,#RX_QUEUE
 200 0056 A26D     		ldr r2,[UP,#RX_TAIL]
 201 0058 8154     		strb r1,[r0,r2]
 202 005a 02F10102 		add r2,#1 
 203 005e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
 204 0062 A265     		str r2,[UP,#RX_TAIL]
 205              	2:	
 206 0064 7047     		bx lr 
 207              	
 208              	user_reboot:
 209 0066 074D     		ldr r5,user_reboot_msg
 210 0068 00F016F8 		bl uart_puts 
 211              	reset_mcu:
 212 006c 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 212      CEF20000 
 213 0074 C168     		ldr r1,[r0,#SCB_AIRCR]
 214 0076 41F00401 		orr r1,#(1<<2)
 215 007a C0F2FA51 		movt r1,#SCB_VECTKEY
 216 007e C160     		str r1,[r0,#SCB_AIRCR]
 217 0080 FEE7     		b . 
 218 0082 00BF     		.p2align 2 
 219              	user_reboot_msg:
 220 0084 88000000 		.word .+4
 221 0088 0D       		.byte 13 
 222 0089 0D757365 		.ascii "\ruser reboot!"
 222      72207265 
 222      626F6F74 
 222      21
 223 0096 00BF     		.p2align 2 
 224              	
 225              	   
 226              	// send counted string to uart 
 227              	// input: r5 string* 
 228              		.type uart_puts,%function 
 229              	uart_puts:
 230 0098 4FF48050 		_MOV32 r0,UART 
 230      C4F20100 
 231 00a0 15F8011B 		ldrb r1,[r5],#1 // string length
 232 00a4 0940     		ands r1,r1
 233 00a6 0CD0     	1:	beq 9f 
 234 00a8 0268     	2:  ldr r2,[r0,#USART_SR]
 235 00aa 12F08002 		ands r2,#0x80 
 236 00ae FBD0     		beq 2b 	
 237 00b0 15F8012B 		ldrb r2,[r5],#1
 238 00b4 0271     		strb r2,[r0,#USART_DR]
 239 00b6 0139     		subs r1,r1,#1 
ARM GAS  forth.s 			page 15


 240 00b8 F6D1     		bne 2b 
 241 00ba 0268     	3:	ldr r2,[r0,#USART_SR]
 242 00bc 12F04002 		ands r2,#(1<<6)
 243 00c0 FBD0     		beq 3b 
 244 00c2 7047     	9:  bx lr 
 245              	
 246              	
 247              	/**************************************
 248              	  reset_handler execute at MCU reset
 249              	***************************************/
 250              	  .type  reset_handler, %function
 251              	  .p2align 2 
 252              	  .global reset_handler
 253              	reset_handler:
 254 00c4 4FF00000 		_MOV32 r0,RAM_END
 254      C2F20200 
 255 00cc 8546     		mov sp,r0  
 256 00ce FFF7FEFF 		bl	remap 
 257 00d2 00F01FF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 258 00d6 00F088F8 		bl  uart_init
 259 00da FFF7FEFF 		bl	tv_init
 260 00de FFF7FEFF 	  bl  kbd_init  
 261 00e2 00F003F8 		bl forth_init 
 262 00e6 02F0B7BD 		b COLD 
 263              	
 264              	
 265              	
 266              		.type forth_init, %function 
 267 00ea 00BF     	  .p2align 2 
 268              	forth_init:
 269 00ec 4FF00004 		_MOV32 UP,UPP 
 269      C2F20004 
 270 00f4 4FF47F47 		_MOV32 DSP,SPP
 270      C2F20107 
 271 00fc 4FF68078 		_MOV32 RSP,RPP
 271      C2F20108 
 272 0104 DFF8A4A2 	  ldr INX,=NEST
 273 0108 4AF0010A 	  orr INX,#1 
 274 010c 86EA0606 		EOR TOS,TOS  
 275 0110 7047     		_RET 
 276              	
 277              	
 278              	
 279              	  .type init_devices, %function
 280 0112 00BF     	  .p2align 2 
 281              	init_devices:
 282              	/* init clock to HSE 96 Mhz */
 283              	/* set 3 wait states in FLASH_ACR_LATENCY */
 284 0114 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 284      C4F20200 
 285 011c 4FF00301 	  mov r1,#3 
 286 0120 0160     	  str r1,[r0,#FLASH_ACR]
 287              	/* configure clock for HSE, 25 Mhz crystal */
 288              	/* enable HSE in RCC_CR */
 289 0122 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 289      C4F20200 
 290 012a 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  forth.s 			page 16


 291 012c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 292 0130 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 293              	/* wait HSERDY loop */
 294              	wait_hserdy:
 295 0132 0168     	  ldr r1,[r0,#RCC_CR]
 296 0134 11F4003F 	  tst r1,#(1<<17)
 297 0138 FBD0     	  beq wait_hserdy
 298              	
 299              	/************************************************* 
 300              	   configure PLL  and source 
 301              	   SYSCLOCK=96 Mhz
 302              	   select HSE as  PLL source clock
 303              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 304              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 305              	****************************************************/
 306              	  /* set RCC_PLLCFGR */
 307 013a 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 307      C4F20200 
 308 0142 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 308      C0F24041 
 309 014a 4160     	  str r1,[r0,#RCC_PLLCFGR]
 310              	  /* enable PLL */
 311 014c 0168     	  ldr r1,[r0,#RCC_CR]
 312 014e 41F08071 	  orr r1, #(1<<24)
 313 0152 0160     	  str r1,[r0,#RCC_CR]
 314              	/* wait for PLLRDY */
 315              	wait_pllrdy:
 316 0154 0168     	  ldr r1,[r0,#RCC_CR]
 317 0156 11F0007F 	  tst r1,#(1<<25)
 318 015a FBD1     	  bne wait_pllrdy 
 319              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 320 015c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 320      C0F21901 
 321 0164 8160     	  str r1,[r0,#RCC_CFGR]
 322              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 323 0166 8168     	  ldr r1,[r0,#RCC_CFGR]
 324 0168 41F00201 	  orr r1,#2
 325 016c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 326              	/* wait for SWS==2 */
 327              	wait_sws:
 328 016e 8168     	  ldr r1,[r0,#RCC_CFGR]
 329 0170 11F0080F 	  tst r1,#(2<<2)
 330 0174 FBD0     	  beq wait_sws
 331              	/* now sysclock is 96 Mhz */
 332              	
 333              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 334 0176 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 335 017a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 336 017c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 337 0180 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 338              	/* configure GPIOC:13 as output for user LED */
 339 0182 4FF40060 	  _MOV32 r0,LED_GPIO 
 339      C4F20200 
 340 018a 0168     	  ldr r1,[r0,#GPIO_MODER]
 341 018c 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 342 0190 01EA0201 	  and r1,r1,r2
 343 0194 41F08061 	  orr r1,#(1<<(2*LED_PIN))
ARM GAS  forth.s 			page 17


 344 0198 0160     	  str r1,[r0,#GPIO_MODER]
 345 019a 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 346 019c 41F40051 	  orr r1,#(1<<LED_PIN)
 347 01a0 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 348 01a2 81EA0101 	  eor r1,r1 
 349 01a6 8182     	  strh r1,[r0,#GPIO_ODR]	
 350              	/* enable compensation CELL for fast I/O */
 351 01a8 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 351      C4F20101 
 352 01b0 4FF00100 		mov r0,#1 
 353 01b4 0862     		str r0,[R1,#SYSCFG_CMPCR]
 354              	/* wait for ready bit */ 
 355 01b6 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 356 01b8 10F4807F 	    tst r0,#(1<<8)
 357 01bc FBD0     		beq 1b 	
 358              	
 359              	
 360              	/* configure systicks for 1msec ticks */
 361              	// set priority to 15 (lowest)
 362 01be 4FF0FF30 	  mov r0,#STCK_IRQ
 363 01c2 4FF00F01 	  mov r1,#15 
 364 01c6 00B500F0 	  _CALL nvic_set_priority
 364      5BF85DF8 
 364      04EB
 365 01d0 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 365      CEF20000 
 366 01d8 47F2FF61 	  _MOV32 r1,95999 
 366      C0F20101 
 367 01e0 4160     	  str r1,[r0,#STK_LOAD]
 368 01e2 4FF00701 	  mov r1,#7
 369 01e6 0160     	  str r1,[r0,STK_CTL]
 370 01e8 7047     	  _RET  
 371              	
 372              	/*******************************
 373              	  initialize UART peripheral 
 374              	********************************/
 375              		.type uart_init, %function
 376              	uart_init:
 377              	/* set GPIOA PIN 9, uart TX  */
 378 01ea 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 378      C4F20200 
 379 01f2 0168     	  ldr r1,[r0,#GPIO_MODER]
 380 01f4 6FF47012 	  mvn r2,#0xf<<(2*9)
 381 01f8 01EA0201 	  and r1,r1,r2
 382 01fc 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 383 0200 41EA0201 	  orr r1,r1,r2 
 384 0204 0160     	  str r1,[r0,#GPIO_MODER]
 385              	/* select alternate functions USART1==AF07 */ 
 386 0206 4FF4EE61 	  mov r1,#0x77<<4 
 387 020a 4162     	  str r1,[r0,#GPIO_AFRH]
 388              	/* configure USART1 registers */
 389 020c 4FF48050 	  _MOV32 r0,UART 
 389      C4F20100 
 390              	/* BAUD rate */
 391 0214 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 392 0218 8160     	  str r1,[r0,#USART_BRR]
 393 021a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
ARM GAS  forth.s 			page 18


 394 021e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 395              	/* set interrupt priority */
 396 0220 4FF02500 	  mov r0,#USART1_IRQ 
 397 0224 4FF00101 	  mov r1,#1 
 398 0228 00B500F0 	  _CALL nvic_set_priority
 398      2AF85DF8 
 398      04EB
 399              	/* enable interrupt in NVIC */
 400 0232 4FF02500 	  mov r0,#USART1_IRQ 
 401 0236 00B500F0 	  _CALL nvic_enable_irq  
 401      3CF85DF8 
 401      04EB
 402 0240 7047     	  _RET  
 403              	
 404              	/* copy system variables to RAM */ 
 405              		.type remap, %function 
 406              	    .global remap 
 407              	remap:
 408              	// copy system to RAM 	
 409 0242 4FF00000 		_MOV32 r0,RAM_ADR 
 409      C2F20000 
 410 024a 5949     		ldr r1,=UZERO 
 411 024c 4FF0A002 		mov r2,#ULAST-UZERO 
 412 0250 02F10302 		add r2,r2,#3
 413 0254 22F00302 		and r2,r2,#~3 
 414 0258 51F8043B 	1:	ldr r3,[r1],#4 
 415 025c 40F8043B 		str r3,[r0],#4 
 416 0260 043A     		subs R2,#4 
 417 0262 F9D1     		bne 1b
 418              	// zero end of RAM 
 419 0264 4FF00002 		_MOV32 r2,RAM_END 
 419      C2F20202 
 420 026c 83EA0303 		eor r3,r3,r3 
 421 0270 40F8043B 	2:  str r3,[r0],#4
 422 0274 9042     		cmp r0,r2 
 423 0276 FBDB     		blt 2b 
 424 0278 4FF00004 		_MOV32 UP,RAM_ADR  
 424      C2F20004 
 425 0280 7047     		_RET 
 426              	
 427              	// set irq priority 
 428              	// 0 highest 
 429              	// 15 lowest
 430              	// input: r0 IRQn  
 431              	//        r1  ipr 
 432              	nvic_set_priority:
 433 0282 08B4     	    push {r3}
 434 0284 0028     	    cmp r0,#0 
 435 0286 08D4     	    bmi negative_irq 
 436 0288 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 436      CEF20003 
 437 0290 4FEA0111 	    lsl r1,#4 
 438 0294 1954     	    strb r1,[r3,r0]
 439 0296 08BC     	    pop {r3}
 440 0298 7047     	    _RET 
 441              	negative_irq:
 442 029a 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
ARM GAS  forth.s 			page 19


 442      CEF20003 
 443 02a2 00F00F00 	    and r0,#0XF 
 444 02a6 A0F10400 	    sub r0,#4 
 445 02aa 4FEA0111 	    lsl r1,#4 
 446 02ae 1954     	    strb r1,[r3,r0]
 447 02b0 08BC     	    pop {r3}
 448 02b2 7047     	    _RET 
 449              	
 450              	
 451              	// enable interrupt in nvic 
 452              	// input: r0 = IRQn 
 453              	nvic_enable_irq: 
 454 02b4 0EB4     	    push {r1,r2,r3}
 455 02b6 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 455      CEF20003 
 456 02be 0146     	    mov r1,r0 
 457 02c0 4FEA5111 	    lsr r1,#5  
 458 02c4 4FEA8101 	    lsl r1,#2  // ISERn  
 459 02c8 00F01F00 	    and r0,#31 // bit#
 460 02cc 4FF00102 	    mov r2,#1 
 461 02d0 02FA00F2 	    lsl r2,r0
 462 02d4 5858     	    ldr r0,[r3,r1]
 463 02d6 40EA0200 	    orr r0,r2  
 464 02da 5850     	    str r0,[r3,r1]
 465 02dc 0EBC     	    pop {r1,r2,r3}
 466 02de 7047     	    _RET 
 467              	
 468              	// disable interrupt in nvic
 469              	// input: r0 = IRQn
 470              	nvic_disable_irq:
 471 02e0 0EB4     	    push {r1,r2,r3}
 472 02e2 4EF28010 	    _MOV32 T0,(NVIC_BASE_ADR+NVIC_ICER0)
 472      CEF20000 
 473 02ea 0146     	    mov r1,r0 
 474 02ec 4FEA5111 	    lsr r1,#5  
 475 02f0 4FEA8101 	    lsl r1,#2  // ISERn
 476 02f4 00F01F00 	    and r0,#31 // bit#
 477 02f8 4FF00102 	    mov r2,#1 
 478 02fc 02FA00F2 	    lsl r2,r0
 479 0300 5858     	    ldr r0,[r3,r1]
 480 0302 40EA0200 	    orr r0,r2  
 481 0306 5850     	    str r0,[r3,r1]
 482 0308 0EBC     	    pop {r1,r2,r3}
 483 030a 7047     	    _RET 
 484              	
 485              	
 486              	/******************************************************
 487              	*  COLD start moves the following to USER variables.
 488              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 489              	******************************************************/
 490              		.p2align 2
 491              	UZERO:
 492 030c 00000000 		.word 0  			/*Reserved */
 493 0310 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 494 0314 00000000 		.word 0      /* TICKS */
 495 0318 00000000 	    .word 0     /* CD_TIMER */
 496 031c E82B0000 		.word HI  /*'BOOT */
ARM GAS  forth.s 			page 20


 497 0320 0A000000 		.word BASEE 	/*BASE */
 498 0324 00000000 		.word 0			/*tmp */
 499 0328 00000000 		.word 0			/*SPAN */
 500 032c 00000000 		.word 0			/*>IN */
 501 0330 00000000 		.word 0			/*#TIB */
 502 0334 00FF0120 		.word TIBB	/*TIBU */
 503 0338 50210000 		.word INTER	/*'EVAL */
 504 033c 00000000 		.word 0			/*HLD */
 505 0340 502C0000 		.word _LASTN	/*CONTEXT */
 506 0344 AC2C0000 		.word CTOP  	/* FCP end of system dictionnary */
 507 0348 A0290020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 508 034c 502C0000 		.word _LASTN	/*LAST word in dictionary */
 509 0350 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 509      00000000 
 509      00000000 
 509      00000000 
 510 0360 00000000 		.word 0  /* RX_HEAD */
 511 0364 00000000 		.word 0  /* RX_TAIL */ 
 512 0368 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 513 036c 00000000 		.word 0  /* VID_STATE, video state */  
 514 0370 00000000 	    .word 0  /* VID_FIELD, field */
 515 0374 00810120 		.word VID_BUFF /* video_buffer address */ 
 516 0378 00000000 	    .word 0 /* kbd struct */
 517 037c 00000000 		.space KBD_QUEUE_SIZE,0  
 517      00000000 
 517      00000000 
 517      00000000 
 518 038c 00000000 		.word 0  /* kbd queue head */
 519 0390 00000000 		.word 0 /* kbd queue tail */ 
 520 0394 00000000 	    .word 0 /* tv cursor row */
 521 0398 00000000 	    .word 0 /* tv cursor column */ 
 522 039c 00000000 	    .word 0 /* tv back color */
 523 03a0 07000000 	    .word 7 /* tv font color */
 524 03a4 00000000 	    .word 0,0 
 524      00000000 
 525              	ULAST:
 526 03ac F40A0000 	
 526      0C030000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
ARM GAS  forth.s 			page 21


  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp 
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	  .include "tvout.inc"
   1              	
   2              	  .equ HRES, 320  // horizontal resolution
   3              	  .equ VRES, 200   // vertical resolution
   4              	  .equ BPP, 4     // bits per pixel
   5              	  .equ BPR, (HRES*BPP/8)  // bytes per row
   6              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
   7              	
   8              	  .equ CHAR_WIDTH, 6 
   9              	  .equ CHAR_HEIGHT, 8
  10              	  
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ LEFT_MARGIN, (750) 
  37              	  .equ VIDEO_FIRST_LINE, 40
  38              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  39              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14µSec
  40              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  41              	
  42              	// video state 
  43              	  .equ ST_VSYNC, 0 
  44              	  .equ ST_PREVID,1 
  45              	  .equ ST_VIDEO,2 
  46              	  .equ ST_POSTVID,3    
  47              	// field 
  48              	   .equ ODD_FIELD,0 
  49              	   .equ EVEN_FIELD,-1
  50              	
  51              	/*******************************************************
  52              	NOTES:
  53              	 1) Values computed for a 96Mhz sysclock 
  54              	 2) Video sync output on PB1 use T3_CH4
  55              	 3) video out trigger TIMER3 CH3 
  56              	********************************************************/
  57              	
  58              	/**************************************
  59              	  initialize TIMER3 CH4 to generate tv_out
  60              	  synchronization signal.
  61              	**************************************/ 
  62              	  _GBL_FUNC tv_init
  63              	// configure PA0:3 as OUTPUT_OD 
  64 03b4 4FF00002 	  _MOV32 r2,GPIOA_BASE_ADR 
  64      C4F20202 
  65 03bc 1168     	  ldr r1,[r2,#GPIO_MODER]
ARM GAS  forth.s 			page 22


  66 03be 4FF05500 	  mov r0,#0x55
  67 03c2 41EA0001 	  orr r1,r0
  68 03c6 1160     	  str r1,[r2,#GPIO_MODER]
  69              	//  mov r0,#15 
  70              	//  ldr r1,[r2,#GPIO_OTYPER]
  71              	//  orr r1,r0 
  72              	//  str r1,[r2,#GPIO_OTYPER]
  73              	//  str r1,[r2,#GPIO_BSRR]
  74              	//  ldr r1,[r2,GPIO_OSPEEDR]
  75              	//  lsl r0,#1 // fast speed  
  76              	//  orr r1,r0 
  77              	//  str r1,[r2,#GPIO_OSPEEDR]
  78 03c8 80EA0000 	  eor r0,r0 
  79 03cc 5061     	  str r0,[r2,#GPIO_ODR]  
  80              	// configure PB1 as OUTPUT_AFPP 
  81              	// this is TIM3_CC4 output compare 
  82 03ce 02F58062 	  add r2,#0x400 // GPIOB_BASE_ADR
  83 03d2 4FF00800 	  mov r0,(2<<2) // alternate function output 
  84 03d6 1168     	  ldr r1,[r2,#GPIO_MODER]
  85 03d8 41EA0001 	  orr r1,r0 
  86 03dc 1060     	  str r0,[r2,#GPIO_MODER] // output AFPP
  87 03de 9168     	  ldr r1,[r2,#GPIO_OSPEEDR]
  88 03e0 41EA0001 	  orr r1,r0 
  89 03e4 9160     	  str r1,[r2,#GPIO_OSPEEDR] // 2= fast speed 
  90 03e6 4FEA8000 	  lsl r0,#2 // alternate function 2 on BP1==TIM3_CH4 
  91 03ea 116A     	  ldr r1,[r2,#GPIO_AFRL]
  92 03ec 41EA0001 	  orr r1,r0 
  93 03f0 1162     	  str r1,[r2,#GPIO_AFRL]
  94              	// enable peripheral clock 
  95 03f2 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  95      C4F20202 
  96 03fa 4FF00200 	  mov r0,#2 
  97 03fe 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  98 0400 41EA0001 	  orr r1,r0 
  99 0404 1164     	  str r1,[r2,#RCC_APB1ENR]
 100              	// configure TIMER3   
 101 0406 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 101      C4F20002 
 102 040e 41F2D470 	  mov r0,#HPER
 103 0412 D062     	  str r0,[r2,#TIM_ARR]
 104 0414 40F23F50 	  mov r0,#VIDEO_DELAY 
 105 0418 D063     	  str r0,[r2,#TIM_CCR3]
 106 041a 4FF4E170 	  mov r0,#HPULSE 
 107 041e 1064     	  str r0,[r2,#TIM_CCR4]  
 108 0420 47F27000 	  mov r0,#(7<<12)+(7<<4)
 109 0424 D061     	  str r0,[r2,#TIM_CCMR2]
 110 0426 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 111 042a 1062     	  str r0,[r2,#TIM_CCER]
 112 042c 4FF00100 	  mov r0,#1 
 113 0430 D060     	  str r0,[r2,#TIM_DIER]
 114 0432 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 115              	// enable interrupt in NVIC controller 
 116 0434 4FF01D00 	  mov r0,#TIM3_IRQ 
 117 0438 4FF00101 	  mov r1,#1
 118 043c 00B5FFF7 	  _CALL nvic_set_priority
 118      20FF5DF8 
 118      04EB
ARM GAS  forth.s 			page 23


 119 0446 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 044a 00B5FFF7 	  _CALL nvic_enable_irq
 120      32FF5DF8 
 120      04EB
 121 0454 7047     	  _RET
 122              	
 123              	/*************************************
 124              	  TIMER3 interrupt for tv_out
 125              	  T1 line # 
 126              	  T0 TIM3_BASE_ADR 
 127              	*************************************/
 128 0456 00BF     	  _GBL_FUNC tv_out_isr
 129 0458 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 129      C4F20000 
 130 0460 81EA0101 	  eor T1,T1
 131 0464 0161     	  str T1,[T0,#TIM_SR]
 132 0466 E16D     	  ldr T1,[UP,#VID_CNTR]
 133 0468 01F10101 	  add T1,#1 
 134 046c E165     	  str T1,[UP,#VID_CNTR]
 135              	/** machine state cases **/
 136 046e 226E     	  ldr T2,[UP,#VID_STATE]
 137 0470 002A     	  cmp T2,#ST_VSYNC 
 138 0472 07D0     	  beq state_vsync
 139 0474 012A     	  cmp T2,#ST_PREVID 
 140 0476 2FD0     	  beq state_pre_video 
 141 0478 022A     	  cmp T2,#ST_VIDEO 
 142 047a 36D0     	  beq state_video_out 
 143 047c 032A     	  cmp T2,#ST_POSTVID 
 144 047e 60D0     	  beq state_post_video
 145 0480 FFF7FEBF 	  b default_handler // invalid state 
 146              	/*** vertical sync state **/
 147              	state_vsync:
 148 0484 0129     	  cmp T1,#1
 149 0486 06D1     	  bne 1f 
 150              	/****** set vertical pre-sync  *****/
 151 0488 4FF0DB01 	  mov T1,#SERRATION
 152 048c 0164     	  str T1,[T0,#TIM_CCR4]
 153 048e 40F6E931 	  mov T1,#SYNC_LINE 
 154 0492 C162     	  str T1,[T0,#TIM_ARR]
 155 0494 68E0     	  b tv_isr_exit 
 156 0496 0729     	1: cmp T1,#7
 157 0498 03D1     	  bne 2f 
 158              	// vertical sync pulse   
 159 049a 40F62821 	  mov T1,#VSYNC_PULSE
 160 049e 0164     	  str T1,[T0,#TIM_CCR4]
 161 04a0 62E0     	  b tv_isr_exit
 162 04a2 0D29     	2: cmp T1,#13
 163 04a4 03D1     	   bne 3f  
 164              	// set vertical post-sync    
 165 04a6 4FF0DB01 	   mov T1,#SERRATION 
 166 04aa 0164     	   str T1,[T0,#TIM_CCR4]
 167 04ac 5CE0     	   b tv_isr_exit   
 168 04ae 1229     	3: cmp T1,#18
 169 04b0 03D1     	   bne 4f 
 170              	// if even field full line  
 171 04b2 616E     	   ldr T1,[UP,#VID_FIELD]
 172 04b4 0029     	   cmp T1,#ODD_FIELD  
ARM GAS  forth.s 			page 24


 173 04b6 57D0     	   beq tv_isr_exit 
 174 04b8 01E0     	   b sync_end 
 175 04ba 1329     	4: cmp T1,#19 
 176 04bc 54D1     	   bne tv_isr_exit
 177              	sync_end: 
 178 04be 4FF00901 	   mov T1,#9
 179 04c2 E165     	   str T1,[UP,#VID_CNTR]
 180 04c4 4FF4E171 	   mov T1,#HPULSE 
 181 04c8 0164     	   str T1,[T0,#TIM_CCR4] 
 182 04ca 41F2D471 	   mov T1,#HPER 
 183 04ce C162     	   str T1,[T0,#TIM_ARR] 
 184 04d0 4FF00101 	   mov T1,#ST_PREVID 
 185 04d4 2166     	   str T1,[UP,#VID_STATE]
 186 04d6 47E0     	   b tv_isr_exit 
 187              	/*****************************/
 188              	state_pre_video:
 189 04d8 2829     	   cmp T1,#VIDEO_FIRST_LINE
 190 04da 45D4     	   bmi tv_isr_exit 
 191 04dc 4FF00201 	   mov T1,#ST_VIDEO 
 192 04e0 2166     	   str T1,[UP,#VID_STATE]
 193 04e2 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 194 04e6 C160     	   str T1,[T0,#TIM_DIER]
 195 04e8 3EE0     	   b tv_isr_exit 
 196              	/**************************
 197              	    VIDEO OUTPUT 
 198              	**************************/   
 199              	state_video_out:
 200 04ea F029     	   cmp T1,#VIDEO_LAST_LINE 
 201 04ec 06D9     	   bls 1f 
 202 04ee 4FF00301 	   mov T1,#ST_POSTVID 
 203 04f2 2166     	   str T1,[UP,#VID_STATE]
 204 04f4 4FF00101 	   mov T1,#1 
 205 04f8 C160     	   str T1,[T0,#TIM_DIER]
 206 04fa 35E0     	   b tv_isr_exit 
 207              	1: // video output
 208 04fc A06E     	   ldr T0,[UP,#VID_BUFFER]
 209 04fe A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 210 0502 4FF0A003 	   mov T3,#160
 211 0506 03FB01F1 	   mul T1,T3 
 212 050a 0844     	   add T0,T1  
 213 050c 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 213      C4F20201 
 214 0514 0278     	2: ldrb T2,[T0]
 215 0516 4FEA1212 	   lsr T2,#4 
 216 051a 4A61     	   str T2,[T1,#GPIO_ODR]
 217 051c AFF30080 	   nop.w
 218 0520 AFF30080 	   nop.w 
 219 0524 10F8012B 	   ldrb T2,[T0],#1
 220 0528 02F00F02 	   and T2,#15 
 221 052c 4A61     	   str T2,[T1,#GPIO_ODR]
 222 052e AFF30080 	   nop.w
 223 0532 AFF30080 	   nop.w  
 224 0536 013B     	   subs T3,#1
 225 0538 ECD1     	   bne 2b  
 226 053a 4FF47022 	   mov T2,#(15<<16) 
 227 053e 8A61     	   str T2,[T1,#GPIO_BSRR]
 228 0540 12E0     	   b tv_isr_exit 
ARM GAS  forth.s 			page 25


 229              	state_post_video:
 230 0542 4FF48372 	   mov T2,#262
 231 0546 9142     	   cmp T1,T2
 232 0548 0ED4     	   bmi tv_isr_exit     
 233              	// odd field line 262 half line 
 234 054a 616E     	   ldr T1,[UP,VID_FIELD]
 235 054c 11B9     	   cbnz T1, frame_end 
 236 054e 40F6E931 	   mov T1,#SYNC_LINE
 237 0552 C162     	   str T1,[T0,#TIM_ARR]      
 238              	frame_end: 
 239 0554 4FF00001 	   mov T1,#ST_VSYNC 
 240 0558 2166     	   str T1,[UP,#VID_STATE]
 241 055a 81EA0101 	   eor T1,T1 
 242 055e E165     	   str T1,[UP,#VID_CNTR]
 243 0560 616E     	   ldr T1,[UP,#VID_FIELD]
 244 0562 6FEA0101 	   mvn T1,T1  
 245 0566 6166     	   str T1,[UP,#VID_FIELD]
 246              	tv_isr_exit: 
 247 0568 7047     	   _RET   
 248              	
 249              	
 250              	/***************************
 251              	    FORTH WORDS 
 252              	***************************/
 253              	    .equ LINK, 0 
 254              	
 255              	// BACK-COLOR ( -- a )
 256              	//   back color variable 
 257 056a 00000000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 257      0A424143 
 257      4B2D434F 
 257      4C4F5200 
 257      00BF
 258 057c 47F8046D 		_PUSH 
 259 0580 04F19006 		ADD TOS,UP,#BK_COLOR
 260 0584 BAE2     		_NEXT
 261              	
 262              	// PEN-COLOR ( -- a )
 263              	// pen color variable 
 264 0586 6E050000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 264      0950454E 
 264      2D434F4C 
 264      4F52
 265 0594 47F8046D 		_PUSH 
 266 0598 04F19406 		ADD TOS,UP,#PEN_COLOR
 267 059c AEE2     		_NEXT 
 268              	
 269              	// COLUMN ( -- a )
 270              	// cursor column variable 
 271 059e 8A050000 	  _HEADER COLUMN,6,"COLUMN"
 271      06434F4C 
 271      554D4E00 
 271      00BF
 272 05ac 47F8046D 	  _PUSH 
 273 05b0 04F18C06 	  ADD TOS,UP,#COL 
 274 05b4 A2E2     	  _NEXT 
 275              	
ARM GAS  forth.s 			page 26


 276              	// ROW ( -- a )
 277              	// cursor row 
 278 05b6 A2050000 	  _HEADER CURSOR_ROW,3,"ROW"
 278      03524F57 
 278      00BF
 279 05c0 47F8046D 	  _PUSH 
 280 05c4 04F18806 	  ADD TOS,UP,#ROW 
 281 05c8 98E2     	  _NEXT 
 282              	
 283              	// ROW>Y ( n1 - n2 )
 284              	// convert cursor row to y coord 
 285 05ca BA050000 	  _HEADER ROWY,5,"ROW>Y"
 285      05524F57 
 285      3E59
 286 05d4 4FF00800 	  mov T0,#CHAR_HEIGHT
 287 05d8 00FB06F6 	  mul TOS,T0 
 288 05dc 8EE2     	  _NEXT 
 289              	
 290              	// COL>X ( n1 -- n2 )
 291              	// convert cursor column to x coord 
 292 05de CE050000 	  _HEADER COLX,5,"COL>X" 
 292      05434F4C 
 292      3E58
 293 05e8 4FF00600 	  mov T0,#CHAR_WIDTH 
 294 05ec 00FB06F6 	  mul TOS,T0 
 295 05f0 84E2     	  _NEXT 
 296              	
 297              	// FONT ( -- a )
 298              	// return address of font table
 299 05f2 E2050000 	  _HEADER FONT,4,"FONT" 
 299      04464F4E 
 299      5400
 300 05fc 47F8046D 	  _PUSH 
 301 0600 DC4E     	  ldr TOS,=font_6x8 
 302 0602 7BE2     	  _NEXT 
 303              	
 304              	// VIDBUFF ( -- a )
 305              	// address of video buffer 
 306 0604 F6050000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 306      07564944 
 306      42554646 
 307 0610 47F8046D 	  _PUSH 
 308 0614 A66E     	  LDR TOS,[UP,#VID_BUFFER]
 309 0616 71E2     	  _NEXT 
 310              	
 311              	
 312              	// PLOT ( x y op -- )
 313              	// draw a pixel 
 314              	//    0 back color 
 315              	//    1 pen color 
 316              	//    2 invert (invert color pixels )
 317              	//    3 xor pen color  
 318 0618 08060000 	    _HEADER PLOT,4,"PLOT"
 318      04504C4F 
 318      540000BF 
 319              	// compute video buffer byte address from coords
 320 0624 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
ARM GAS  forth.s 			page 27


 321 0626 4FF0A002 	    mov T2,#BPR // bytes per row  
 322 062a 02FB00F0 	    mul T0,T2 
 323 062e 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 324 0632 1044     	    add T0,T2 
 325 0634 A36E     	    ldr T3,[UP,#VID_BUFFER] 
 326 0636 0344     	    add T3,T0 // T3 -> byte address 
 327 0638 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 328 063a 4FF00F02 	    mov T2,#15 // AND mask 
 329 063e 11F0010F 	    tst T1,#1 
 330 0642 01D0     	    beq 1f 
 331 0644 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 332 0648 CB48     	1:  ldr T0,=plot_op 
 333 064a D0E806F0 	    tbb [T0,TOS]
 334              	op_back:
 335 064e 05EA0205 	    and WP,T2 // mask out nibble 
 336 0652 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 337 0656 11F0010F 	    tst T1,#1 
 338 065a 01D1     	    bne 1f 
 339 065c 4FEA0010 	    lsl T0,#4 // high nibble  
 340 0660 45EA0005 	1:  orr WP,T0  
 341 0664 1D70     	    strb WP,[T3]
 342 0666 1AE0     	    b 9f 
 343              	op_pen: 
 344 0668 05EA0205 	    and WP,T2 
 345 066c 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 346 0670 11F0010F 	    tst T1,#1
 347 0674 01D1     	    bne 1f 
 348 0676 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 349 067a 45EA0005 	1:	orr WP,T0 
 350 067e 1D70     	    strb WP,[T3]
 351 0680 0DE0     	    b 9f 
 352              	op_invert:
 353 0682 85EA0205 	    eor WP,T2 
 354 0686 1D70     	    strb WP,[T3]
 355 0688 09E0     	    b 9f 
 356              	op_xor:
 357 068a D4F89400 	    ldr T0,[UP,#PEN_COLOR]
 358 068e 11F0010F 	    tst T1,#1 
 359 0692 01D1     	    bne 1f 
 360 0694 4FEA0010 	    lsl T0,#4 
 361 0698 85EA0005 	1:  eor WP,T0 
 362 069c 1D70     	    strb WP,[T3]
 363 069e 57F8046B 	9:  _POP 
 364 06a2 2BE2     	    _NEXT 
 365              	
 366 06a4 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 367              	
 368              	
 369              	// VSYNC ( -- )
 370              	// wait vertical sync phase 
 371 06a8 1C060000 	    _HEADER VSYNC,5,"VSYNC"
 371      05565359 
 371      4E4300BF 
 372 06b4 E06D     	1:  ldr T0,[UP,#VID_CNTR]
 373 06b6 0028     	    cmp T0,#0
 374 06b8 FCD1     	    bne 1b
 375 06ba 1FE2     	    _NEXT 
ARM GAS  forth.s 			page 28


 376              	
 377              	// CLS ( -- )
 378              	// clear TV screen 
 379 06bc AC060000 	    _HEADER CLS,3,"CLS"
 379      03434C53 
 380 06c4 80EA0000 	    eor T0,T0 
 381 06c8 94F89010 	    ldrb T1,[UP,#BK_COLOR]
 382 06cc 40EA0100 	    orr T0,T1 
 383 06d0 4FEA0111 	    lsl T1,#4 
 384 06d4 40EA0100 	    orr T0,T1 
 385 06d8 4FEA0021 	    lsl T1,T0,#8 
 386 06dc 40EA0100 	    orr T0,T1 
 387 06e0 4FEA0041 	    lsl T1,T0,#16
 388 06e4 40EA0100 	    orr T0,T1 
 389 06e8 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 390 06ec A26E     	    ldr T2,[UP,#VID_BUFFER]
 391 06ee 5050     	1:	str T0,[T2,T1]
 392 06f0 0439     	    subs T1,#4
 393 06f2 FCD1     	    bne 1b
 394 06f4 1060     	    str T0,[T2]
 395 06f6 80EA0000 	    eor T0,T0 
 396 06fa C4F88800 	    str T0,[UP,#ROW]
 397 06fe C4F88C00 	    str T0,[UP,#COL]
 398 0702 FBE1     	    _NEXT 
 399              	
 400              	
 401              	// CLRLINE ( n -- )
 402              	// clear text line 
 403 0704 C0060000 	  _HEADER CLRLINE,7,"CLRLINE"
 403      07434C52 
 403      4C494E45 
 404 0710 504700BF 	  _NEST
 405 0714 6D0C0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 405      00050000 
 406 071c A10D0000 	  _ADR DUPP  
 407 0720 490D0000 	  _ADR TOR 
 408 0724 850E0000 	  _ADR STAR
 409 0728 11060000 	  _ADR VIDBUFF
 410 072c 650E0000 	  _ADR PLUS
 411 0730 210D0000 	  _ADR RFROM   
 412 0734 6D0C0000 	  _DOLIT 0 
 412      00000000 
 413 073c D1150000 	  _ADR FILL 
 414 0740 030B0000 	  _UNNEST 
 415              	
 416              	// SCROLLUP ( -- )
 417              	// scroll up tv screen 1 char height 
 418 0744 08070000 	  _HEADER SCROLLUP,8,"SCROLLUP"
 418      08534352 
 418      4F4C4C55 
 418      500000BF 
 419 0754 504700BF 	  _NEST 
 420 0758 11060000 	  _ADR VIDBUFF 
 421 075c A10D0000 	  _ADR DUPP 
 422 0760 6D0C0000 	  _DOLIT BPR*CHAR_HEIGHT 
 422      00050000 
 423 0768 A10D0000 	  _ADR DUPP 
ARM GAS  forth.s 			page 29


 424 076c 490D0000 	  _ADR TOR 
 425 0770 650E0000 	  _ADR PLUS 
 426 0774 B10D0000 	  _ADR SWAP 
 427 0778 6D0C0000 	  _DOLIT VIDEO_BUFFER_SIZE 
 427      007D0000 
 428 0780 210D0000 	  _ADR RFROM  
 429 0784 750E0000 	  _ADR SUBB 
 430 0788 9D150000 	  _ADR MOVE
 431 078c 6D0C0000 	  _DOLIT 24 
 431      18000000 
 432 0794 11070000 	  _ADR CLRLINE 
 433 0798 030B0000 	  _UNNEST 
 434              	
 435              	//  RIGHT ( -- )
 436              	// move cursor 1 char. right 
 437 079c 48070000 	  _HEADER RIGHT,5,"RIGHT"
 437      05524947 
 437      485400BF 
 438 07a8 D4F88C00 	  ldr T0,[UP,#COL]
 439 07ac 00F10100 	  add T0,#1
 440 07b0 3528     	  cmp T0,#53
 441 07b2 07D5     	  bpl TVCR  
 442 07b4 C4F88C00 	  str T0,[UP,#COL]
 443 07b8 A0E1     	  _NEXT 
 444              	
 445              	
 446              	// TV-CR 
 447              	// carriage return line feed 
 448 07ba A0070000 	  _HEADER TVCR,5,"TV-CR"
 448      0554562D 
 448      4352
 449 07c4 80EA0000 	  eor T0,T0 
 450 07c8 C4F88C00 	  str T0,[UP,#COL]
 451 07cc D4F88800 	  ldr T0,[UP,#ROW]
 452 07d0 1828     	  cmp T0,#24
 453 07d2 04D0     	  beq 2f 
 454 07d4 00F10100 	  add T0,#1 
 455 07d8 C4F88800 	  str T0,[UP,#ROW]
 456 07dc 8EE1     	  _NEXT 
 457              	// calling a colon word 
 458              	// from a code word   
 459 07de 48F804CD 	2: STMFD	RSP!,{IP}
 460 07e2 DFF898C1 	   ldr IP,=3f 
 461 07e6 89E1     	   b INEXT 
 462              	3: 
 463 07e8 55070000 	  _ADR SCROLLUP 
 464 07ec 030B0000 	  _UNNEST  
 465              	
 466              	
 467              	// extract font pixel 
 468              	FONT_PIXEL: // ( r -- 0|1 )
 469 07f0 4FF08000 	    mov T0,#128 
 470 07f4 06EA0006 	    and TOS,T0 
 471 07f8 4FEAD616 	    lsr TOS,#7
 472 07fc 7EE1     	    _NEXT 
 473              	
 474              	// increment x coord 
ARM GAS  forth.s 			page 30


 475              	INCR_X: // ( x y -- x' y )
 476 07fe 3868     	  ldr T0,[DSP]
 477 0800 00F10100 	  add T0,#1 
 478 0804 3860     	  str T0,[DSP]
 479 0806 79E1     	  _NEXT 
 480              	
 481              	// shift font row data
 482              	NEXT_PIXEL:
 483 0808 4FEA4606 	    lsl TOS,#1
 484 080c 76E1     	    _NEXT 
 485              	
 486              	
 487              	// CHAR_ROW 
 488              	// plot character row 
 489              	// {x y r -- }
 490              	//  _HEADER CHAR_ROW,7,"CHARROW"
 491              	CHAR_ROW:  
 492 080e 504700BF 	    _NEST 
 493 0812 6D0C0000 	    _DOLIT 5 
 493      05000000 
 494 081a 490D0000 	    _ADR TOR 
 495 081e 490D0000 	1:  _ADR TOR 
 496 0822 D90F0000 	    _ADR DDUP 
 497 0826 350D0000 	    _ADR RAT
 498 082a F1070000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 499 082e 25060000 	    _ADR PLOT 
 500 0832 FF070000 	    _ADR INCR_X 
 501 0836 210D0000 	    _ADR RFROM 
 502 083a 09080000 	    _ADR NEXT_PIXEL
 503              	    //_DOLIT 1 
 504              	    //_ADR LSHIFT 
 505 083e 910C0000 	    _DONXT 1b
 505      1E080000 
 506 0846 C50F0000 	    _ADR TDROP 
 507 084a 030B0000 	    _UNNEST 
 508              	
 509              	
 510              	CHAR_FONT: // ( c -- c-adr )
 511 084e A6F12006 	   sub TOS,#32
 512 0852 4FF00800 	   mov T0,#8 
 513 0856 00FB06F6 	   mul TOS,T0 
 514 085a 4648     	   ldr T0,=font_6x8
 515 085c 0644     	   add TOS,T0 
 516 085e 4DE1     	   _NEXT 
 517              	
 518              	/**********************************
 519              	   TV-PUTC ( c -- )
 520              	   draw character in video buffer
 521              	**********************************/
 522 0860 BE070000 	    _HEADER TVPUTC,7,"TV-PUTC"
 522      0754562D 
 522      50555443 
 523 086c 504700BF 	    _NEST 
 524 0870 4F080000 	    _ADR CHAR_FONT 
 525 0874 AD050000 	    _ADR COLUMN 
 526 0878 F50C0000 	    _ADR AT
 527 087c E9050000 	    _ADR COLX  // x coord 
ARM GAS  forth.s 			page 31


 528 0880 C1050000 	    _ADR CURSOR_ROW 
 529 0884 F50C0000 	    _ADR AT    
 530 0888 D5050000 	    _ADR ROWY  // {c-adr x y -- } 
 531 088c 890F0000 	    _ADR ROT  // TEST 
 532 0890 6D0C0000 	    _DOLIT 7   
 532      07000000 
 533 0898 490D0000 	    _ADR TOR  
 534 089c 490D0000 	1:  _ADR TOR  // { x y }
 535 08a0 D90F0000 	    _ADR DDUP  // { x y x y }
 536 08a4 350D0000 	    _ADR RAT 
 537 08a8 150D0000 	    _ADR CAT   // { x y x y r }
 538 08ac 0F080000 	    _ADR CHAR_ROW 
 539 08b0 C10E0000 	    _ADR ONEP // {x y' }
 540 08b4 210D0000 	    _ADR RFROM 
 541 08b8 C10E0000 	    _ADR ONEP // {x y' c-adr' }
 542 08bc 910C0000 	    _DONXT 1b
 542      9C080000 
 543 08c4 C50F0000 	    _ADR TDROP  
 544 08c8 A9070000 	    _ADR RIGHT
 545 08cc 030B0000 	    _UNNEST  
 546              	
 547              	// PRINT ( cstr -- )
 548              	// print counted string 
 549 08d0 64080000 	    _HEADER PRINT,5,"PRINT"
 549      05505249 
 549      4E5400BF 
 550 08dc 504700BF 	    _NEST 
 551 08e0 25110000 	    _ADR COUNT 
 552 08e4 D10E0000 	    _ADR ONEM 
 553 08e8 490D0000 	    _ADR TOR 
 554 08ec A10D0000 	1:  _ADR DUPP 
 555 08f0 150D0000 	    _ADR CAT 
 556 08f4 6D080000 	    _ADR TVPUTC 
 557 08f8 C10E0000 	    _ADR ONEP 
 558 08fc 910C0000 	    _DONXT 1b 
 558      EC080000 
 559 0904 910D0000 	    _ADR DROP 
 560 0908 030B0000 	    _UNNEST 
 561              	
 562              	// CURPOS ( line col -- )
 563              	// set text cursor position 
 564 090c D4080000 	    _HEADER CURPOS,6,"CURPOS"
 564      06435552 
 564      504F5300 
 565 0918 352E     	    cmp TOS,#53
 566 091a 01D4     	    bmi 1f 
 567 091c 4FF03406 	    mov TOS,#52
 568 0920 C4F88C60 	1:  str TOS,[UP,#COL]
 569 0924 57F8046B 	    _POP
 570 0928 192E     	    cmp TOS,#25
 571 092a 01D4     	    bmi 1f 
 572 092c 4FF01806 	    mov TOS,#24 
 573 0930 C4F88860 	1:  str TOS,[UP,#ROW]
 574 0934 57F8046B 	    _POP 
 575 0938 E0E0     	    _NEXT 
 576              	
 577              	// INPUT ( -- c-adr )
ARM GAS  forth.s 			page 32


 578              	// input a string in pad 
 579 093a 10090000 	    _HEADER INPUT,5,"INPUT"
 579      05494E50 
 579      5554
 580 0944 504700BF 	    _NEST 
 581 0948 15150000 	    _ADR PAD 
 582 094c A10D0000 	    _ADR DUPP 
 583 0950 C10E0000 	    _ADR ONEP 
 584 0954 6D0C0000 	    _DOLIT 53
 584      35000000 
 585 095c 3D200000 	    _ADR ACCEP
 586 0960 B10D0000 	    _ADR SWAP 
 587 0964 910D0000 	    _ADR DROP 
 588 0968 C50D0000 	    _ADR OVER 
 589 096c 010D0000 	    _ADR CSTOR  
 590 0970 030B0000 	    _UNNEST 
 591              	
 592              	
 593              		.section .rodata 
 594              		.p2align 2
 595              	/********************************************
 596              	    TV font  ASCII 6 pixels x 8 pixels 
 597              	********************************************/
 598              	font_6x8:
 599 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 599      00000000 
 600 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 600      20002000 
 601 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 601      00000000 
 602 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 602      F8505000 
 603 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 603      28F02000 
 604 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 604      40981800 
 605 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 605      A8906800 
 606 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 606      00000000 
 607 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 607      40201000 
 608 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 608      10204000 
 609 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 609      A8200000 
 610 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 610      20200000 
 611 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 611      60204000 
 612 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 612      00000000 
 613 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 613      00606000 
 614 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 614      40800000 
 615 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
ARM GAS  forth.s 			page 33


 615      C8887000 
 616 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 616      2020F800 
 617 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 617      4080F800 
 618 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 618      0808F000 
 619 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 619      F8101000 
 620 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 620      0808F000 
 621 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 621      88887000 
 622 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 622      40404000 
 623 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 623      88887000 
 624 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 624      08087000 
 625 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 625      60600000 
 626 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 626      60204000 
 627 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 627      40201000 
 628 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 628      F8000000 
 629 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 629      10204000 
 630 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 630      20002000 
 631 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 631      A8A87000 
 632 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 632      88888800 
 633 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 633      8888F000 
 634 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 634      80807800 
 635 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 635      8888F000 
 636 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 636      8080F800 
 637 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 637      80808000 
 638 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 638      88887000 
 639 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 639      88888800 
 640 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 640      20207000 
 641 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 641      08906000 
 642 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 642      A0908800 
 643 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 643      8080F800 
ARM GAS  forth.s 			page 34


 644 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 644      88888800 
 645 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 645      98888800 
 646 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 646      88887000 
 647 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 647      80808000 
 648 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 648      A8987800 
 649 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 649      A0908800 
 650 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 650      0808F000 
 651 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 651      20202000 
 652 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 652      88887000 
 653 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 653      88502000 
 654 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 654      A8D88800 
 655 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 655      50888800 
 656 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 656      20202000 
 657 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 657      8080F800 
 658 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 658      40406000 
 659 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 659      10080000 
 660 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 660      08081800 
 661 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 661      00000000 
 662 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 662      0000F800 
 663 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 663      00000000 
 664 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 664      78887800 
 665 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 665      C888F000 
 666 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 666      80887000 
 667 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 667      98887800 
 668 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 668      F8807000 
 669 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 669      40404000 
 670 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 670      88780870 
 671 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 671      88888800 
 672 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
ARM GAS  forth.s 			page 35


 672      20202000 
 673 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 673      10906000 
 674 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 674      C0A09000 
 675 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 675      20207000 
 676 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 676      A8888800 
 677 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 677      88888800 
 678 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 678      88887000 
 679 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 679      88F08080 
 680 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 680      90B05018 
 681 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 681      80808000 
 682 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 682      7008F000 
 683 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 683      40483000 
 684 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 684      88986800 
 685 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 685      88502000 
 686 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 686      A8A85000 
 687 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 687      20508800 
 688 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 688      88780870 
 689 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 689      2040F800 
 690 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 690      40402000 
 691 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 691      20202000 
 692 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 692      20204000 
 693 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 693      10000000 
 694 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 694      FCFCFCFC 
 695 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 695      10204000 
 696 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 696      40201000 
 697 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 697      20200000 
 698 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 698      A8702000 
 699 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 699      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
ARM GAS  forth.s 			page 36


   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	
  36              	/**********************************
  37              	  keyboard structure 
  38              	
  39              	struct {
  40              	    byte bitcntr; received bit counter 
  41              	    byte rxshift; shiftin keycode 
  42              	    byte flags; flags 
  43              	    byte parity; count parity bits 
  44              	    }
  45              	
  46              	flags 
  47              	   :0 -> parity error flags 
  48              	**********************************/
  49              	    .equ KBD_PAR_ERR,1
  50              	    .equ KBD_FRAME_ERR,2
  51              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  52              	    .equ KBD_RXSHIFT,KBD_STRUCT+1
  53              	    .equ KBD_BITCNTR,KBD_STRUCT 
  54              	    .equ KBD_PARITY,KBD_STRUCT+3 
  55              	
  56              	/**********************************
  57              	    kbd_isr
  58              	    interrupt service routine 
  59              	    EXTI0 connected to keyboard 
ARM GAS  forth.s 			page 37


  60              	    clock signal and triggered 
  61              	    on falling edge 
  62              	**********************************/
  63              	    _GBL_FUNC kbd_isr 
  64 0980 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  64      C4F20102 
  65 0988 4FF40060 	    mov r0,#(1<<11) 
  66 098c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  67 098e 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  67      C4F20202 
  68 0996 108A     	    ldrh r0,[r2,#GPIO_IDR]
  69 0998 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  70 099c 0029     	    cmp r1,#0 
  71 099e 19D0     	    beq start_bit 
  72 09a0 0929     	    cmp r1,#9 
  73 09a2 25D0     	    beq parity_bit 
  74 09a4 0A29     	    cmp r1,#10 
  75 09a6 33D0     	    beq stop_bit 
  76              	    // data bit 
  77 09a8 94F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  78 09ac 4FEA5202 	    lsr r2,#1 
  79 09b0 10F4805F 	    tst r0,#(1<<12) // data bit 
  80 09b4 07D0     	    beq 1f 
  81 09b6 42F08002 	    orr r2,#(1<<7)
  82 09ba 94F86F00 	    ldrb r0,[UP,#KBD_PARITY]
  83 09be 00F10100 	    add r0,#1 
  84 09c2 84F86F00 	    strb r0,[UP,#KBD_PARITY]
  85 09c6 84F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
  86 09ca 01F10101 	    add r1,#1 
  87 09ce 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  88 09d2 3EE0     	    b 9f         
  89              	start_bit:
  90 09d4 10F4805F 	    tst r0,#(1<<12) 
  91 09d8 3BD1     	    bne 9f // not a start bit 
  92 09da 01F10101 	    add r1,#1 
  93 09de 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  94 09e2 81EA0101 	    eor r1,r1 
  95 09e6 84F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
  96 09ea 84F86F10 	    strb r1,[UP,#KBD_PARITY]
  97 09ee 30E0     	    b 9f 
  98              	parity_bit:
  99 09f0 94F86F10 	    ldrb r1,[UP,#KBD_PARITY]
 100 09f4 10F4805F 	    tst r0,#(1<<12)
 101 09f8 03D0     	    beq 1f  
 102 09fa 01F10101 	    add r1,#1 
 103 09fe 84F86F10 	    strb r1,[UP,#KBD_PARITY]  
 104 0a02 94F86C10 	1:  ldrb r1,[UP,#KBD_BITCNTR]
 105 0a06 01F10101 	    add r1,#1
 106 0a0a 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]    
 107 0a0e 20E0     	    b 9f      
 108              	stop_bit:
 109 0a10 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 110 0a14 10F4805F 	    tst r0,#(1<<12)
 111 0a18 12D0     	    beq 2f
 112 0a1a 94F86F10 	    ldrb r1,[UP,#KBD_PARITY]
 113 0a1e 11F0010F 	    tst r1,#1 
 114 0a22 12D0     	    beq 8f // parity error 
ARM GAS  forth.s 			page 38


 115              	// store code in queue 
 116 0a24 D4F88410 	    ldr r1,[UP,#KBD_QTAIL]
 117 0a28 04F17002 	    add r2,UP,#KBD_QUEUE
 118 0a2c 94F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 119 0a30 5054     	    strb r0,[r2,r1]
 120 0a32 01F10101 	    add r1,#1
 121 0a36 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 122 0a3a 84F88410 	    strb r1,[UP,#KBD_QTAIL]
 123 0a3e 04E0     	    b 8f 
 124              	2:  // framing error 
 125 0a40 41F00201 	    orr r1,#KBD_FRAME_ERR   
 126 0a44 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 127 0a48 FFE7     	    b 8f 
 128 0a4a 80EA0000 	8:  eor r0,r0 
 129 0a4e A4F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 130 0a52 7047     	9:  _RET 
 131              	    
 132              	/**********************************
 133              	    kbd_init 
 134              	    initialize keyboard 
 135              	    PS2 clock on PA11 
 136              	    PS2 data on PA12 
 137              	**********************************/
 138              	    _GBL_FUNC kbd_init 
 139              	// interrupt triggered on falling edge 
 140 0a54 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 140      C4F20102 
 141 0a5c 4FF40060 	   mov r0,#(1<<11)
 142 0a60 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 143 0a62 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 144              	// enable interrupt EXTI15_10_IRQ in NVIC 
 145 0a64 4FF02800 	   mov r0,#EXTI15_10_IRQ
 146 0a68 00B5FFF7 	   _CALL nvic_enable_irq 
 146      23FC5DF8 
 146      04EB
 147 0a72 7047     	   _RET 
 148              	
 149              	
 150              	// KEY-ERR? ( -- 0|1|2)
 151              	// report keyboard error 
 152 0a74 3E090000 	    _HEADER KEYERRQ,8,"KEY-ERR?"
 152      084B4559 
 152      2D455252 
 152      3F0000BF 
 153 0a84 47F8046D 	    _PUSH 
 154 0a88 94F86E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 155 0a8c 06F00306 	    and TOS,#3 
 156 0a90 34E0     	    _NEXT     
 157              	
 158              	// KEY-RST-ERR ( -- )
 159              	// reset keyboard error flags 
 160 0a92 780A0000 	    _HEADER KEY_RST_ERR,11,"KEY-RST-ERR"
 160      0B4B4559 
 160      2D525354 
 160      2D455252 
 160      00BF
 161 0aa4 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 39


 162 0aa8 00F0FC00 	    and T0,#0xFC 
 163 0aac 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 164 0ab0 24E0     	    _NEXT 
 165              	
 166              	// KEYCODE ( -- c )
 167              	// extract keyboard scancode from queue.
 168 0ab2 960A0000 	    _HEADER KEYCODE,7,"KEYCODE"
 168      074B4559 
 168      434F4445 
 168      00BF
 169 0ac0 47F8046D 	    _PUSH
 170 0ac4 86EA0606 	    eor TOS,TOS  
 171 0ac8 04F17003 	    add T3,UP,#KBD_QUEUE
 172 0acc D4F88000 	    ldr T0,[UP,#KBD_QHEAD]
 173 0ad0 D4F88410 	    ldr T1,[UP,#KBD_QTAIL]
 174 0ad4 8842     	    cmp T0,T1 
 175 0ad6 06D0     	    beq 2f  
 176 0ad8 1E5C     	    ldrb TOS,[T3,T0]
 177 0ada 00F10100 	    add T0,#1 
 178 0ade 00F00F00 	    and T0,#KBD_QUEUE_SIZE-1
 179 0ae2 C4F88000 	    str T0,[UP,#KBD_QHEAD]
 180 0ae6 09E0     	2:  _NEXT 
 181              	
   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R12	is used as IP , inner interpreter address pointer 
  12              	*   UP  IS used AS WP 
  13              	*	WP 	is used as UP , working register 
  14              	*	R8 	is used as link register by _NEST macro it is initialized 
  15              	*  		NEST address and MUST BE PRESERVED.
  16              	*
  17              	*     Use USART1 for console I/O
  18              	*     port config: 115200 8N1 
  19              	*     TX on  PA9,  RX on PA10  
  20              	*
  21              	*     eForth is executed from flash, not copied to RAM
  22              	*     eForth use main stack R13 as return stack (thread stack not used) 
  23              	*
  24              	*     Forth return stack is at end of RAM (addr=0x200020000) and reserve 512 bytes
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
ARM GAS  forth.s 			page 40


  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Version 5.02, 09oct04cht
  42              	*	fOR ADuC702x from Analog Devices
  43              	*	Version 6.01, 10apr08cht a
  44              	*	.p2align 2 to at91sam7x256
  45              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  46              	*	Running under uVision3 RealView from Keil
  47              	*	Version 7.01, 29jun14cht
  48              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  49              	*	.p2aligned to eForth 2 Model
  50              	*	Assembled to flash memory and executed therefrom.
  51              	*	Version 7.10, 30jun14cht
  52              	*	Flash memory mapped to Page 0 where codes are executed
  53              	*	Version 7.20, 02jul14cht
  54              	*	Irreducible Complexity
  55              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  56              	*	TURNKEY saves current application from RAM to flash.
  57              	*********************************************************/
  58              	
  59              		.syntax unified
  60              		.cpu cortex-m4
  61              		.fpu softvfp  
  62              		.thumb
  63              	
  64              		.include "stm32f411ce.inc"
  65              		
  66              		.section .text, "ax", %progbits
  67              	
  68              	/***********************************
  69              	//  Start of eForth system 
  70              	***********************************/
  71              	
  72              		.p2align 2 
  73              	
  74              	// PUSH TOS, to be used in colon definition 
  75              	TPUSH:
  76 0ae8 47F8046D 		_PUSH
  77 0aec 06E0     		_NEXT
  78              	
  79              	// POP TOS, to be used in colon defintion  
  80              	TPOP:
  81 0aee 57F8046B 		_POP 
  82 0af2 03E0     		_NEXT
  83              	
  84              	// hi level word enter 
  85              	NEST: 
  86 0af4 48F804CD 		STMFD	RSP!,{IP}
  87 0af8 05F1030C 		ADD IP,WP,#3
  88              	// inner interprer
  89              	INEXT: 
  90 0afc 5CF8045B 		LDR WP,[IP],#4 
  91 0b00 2847     		BX WP  
ARM GAS  forth.s 			page 41


  92              	UNNEST:
  93 0b02 58F804CB 		LDMFD RSP!,{IP}
  94 0b06 5CF8045B 		LDR WP,[IP],#4 
  95 0b0a 2847     		BX WP  
  96              	
  97              		.p2align 2 
  98              	
  99              	// compile "BX 	R8" 
 100              	// this is the only way 
 101              	// a colon defintion in RAM 
 102              	// can jump to NEST
 103              	// R8 is initialized to NEST address 
 104              	// and must be preserved   
 105              	COMPI_NEST:
 106 0b0c 04F13C01 		add T1,UP,#USER_CTOP 
 107 0b10 0968     		ldr T1,[T1]
 108 0b12 44F25072 		mov T2,#0x4700+(10<<3)
 109 0b16 21F8022B 		strh T2,[T1],#2
 110 0b1a 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 111 0b1e 21F8022B 		strh T2,[T1],#2 
 112 0b22 04F13C02 		add T2,UP,#USER_CTOP 
 113 0b26 1160     		str T1,[T2]
 114 0b28 E8E7     		_NEXT  
 115              	
 116              	
 117              	// RANDOM ( n+ -- {0..n+ - 1} )
 118              	// return pseudo random number 
 119              	// REF: https://en.wikipedia.org/wiki/Xorshift
 120              	
 121 0b2a B60A0000 		.word LINK 
 122 0b2e 06       	_RAND: .byte 6
 123 0b2f 52414E44 		.ascii "RANDOM"
 123      4F4D
 124 0b35 0000BF   		.p2align 2 
 125              	RAND:
 126 0b38 504700BF 		_NEST
 127 0b3c 2D100000 		_ADR ABSS   
 128 0b40 6D110000 		_ADR SEED 
 129 0b44 F50C0000 		_ADR AT 
 130 0b48 A10D0000 		_ADR DUPP 
 131 0b4c 6D0C0000 		_DOLIT 13
 131      0D000000 
 132 0b54 550E0000 		_ADR LSHIFT 
 133 0b58 0D0E0000 		_ADR XORR  
 134 0b5c A10D0000 		_ADR DUPP 
 135 0b60 6D0C0000 		_DOLIT 17 
 135      11000000 
 136 0b68 3D0E0000 		_ADR RSHIFT 
 137 0b6c 0D0E0000 		_ADR XORR 
 138 0b70 A10D0000 		_ADR DUPP
 139 0b74 6D0C0000 		_DOLIT 5 
 139      05000000 
 140 0b7c 550E0000 		_ADR LSHIFT 
 141 0b80 0D0E0000 		_ADR XORR  
 142 0b84 A10D0000 		_ADR DUPP 
 143 0b88 6D110000 		_ADR SEED 
 144 0b8c E10C0000 		_ADR STORE 
ARM GAS  forth.s 			page 42


 145 0b90 6D0C0000 		_DOLIT 0x7FFFFFFF
 145      FFFFFF7F 
 146 0b98 E50D0000 		_ADR ANDD 
 147 0b9c B10D0000 		_ADR SWAP 
 148 0ba0 D1130000 		_ADR MODD 
 149 0ba4 030B0000 		_UNNEST 
 150              	
 151              	
 152              	// PAUSE ( u -- ) 
 153              	// suspend execution for u milliseconds
 154 0ba8 2E0B0000 		.word _RAND
 155 0bac 05       	_PAUSE: .byte 5
 156 0bad 50415553 		.ascii "PAUSE"
 156      45
 157 0bb2 00BF     		.p2align 2
 158              	PAUSE:
 159 0bb4 504700BF 		_NEST 
 160 0bb8 95110000 		_ADR TIMER 
 161 0bbc E10C0000 		_ADR STORE 
 162              	PAUSE_LOOP:
 163 0bc0 95110000 		_ADR TIMER 
 164 0bc4 F50C0000 		_ADR AT 
 165 0bc8 AF0C0000 		_QBRAN PAUSE_EXIT 
 165      D80B0000 
 166 0bd0 C30C0000 		_BRAN PAUSE_LOOP 
 166      C00B0000 
 167              	PAUSE_EXIT: 		
 168 0bd8 030B0000 		_UNNEST 
 169              	
 170              	//  ULED ( T|F -- )
 171              	// control user LED, -1 ON, 0 OFF  
 172 0bdc AC0B0000 		.word _PAUSE
 173 0be0 04       	_ULED: .byte 4
 174 0be1 554C4544 		.ascii "ULED"
 175 0be5 0000BF   		.p2align 2
 176              		.type ULED, %function 
 177              	ULED:
 178 0be8 4FF40050 		mov T0,#(1<<LED_PIN)
 179 0bec 4FF40061 		_MOV32 T1,LED_GPIO 
 179      C4F20201 
 180 0bf4 3600     		movs TOS,TOS 
 181 0bf6 57F8046B 		_POP
 182 0bfa 03D0     		beq ULED_OFF
 183 0bfc 4FEA0040 		lsl T0,#16 
 184 0c00 8861     		str T0,[T1,#GPIO_BSRR]
 185 0c02 7BE7     		_NEXT 
 186              	ULED_OFF:
 187 0c04 8861     		str T0,[T1,#GPIO_BSRR]
 188 0c06 79E7     		_NEXT    
 189              	
 190              	//    ?KEY	 ( -- c T | F )
 191              	// 	Return input character and true, or a false if no input.
 192 0c08 E00B0000 		.word	_ULED
 193 0c0c 04       	_QRX:	.byte   4
 194 0c0d 3F4B4559 		.ascii "?KEY"
 195 0c11 0000BF   		.p2align 2 
 196              	QKEY:
ARM GAS  forth.s 			page 43


 197              	QRX: 
 198 0c14 47F8046D 		_PUSH
 199 0c18 A06D     		ldr T0,[UP,#RX_TAIL] 
 200 0c1a 616D     		ldr T1,[UP,#RX_HEAD]
 201 0c1c 90EA0106 		eors TOS,T0,T1 
 202 0c20 0CD0     		beq 1f
 203 0c22 04F14400 		add T0,UP,#RX_QUEUE 
 204 0c26 0844     		add T0,T1 
 205 0c28 0678     		ldrb TOS,[T0]
 206 0c2a 01F10101 		add T1,#1 
 207 0c2e 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 208 0c32 6165     		str T1,[UP,#RX_HEAD]
 209 0c34 47F8046D 		_PUSH 
 210 0c38 4FF0FF36 		mov TOS,#-1
 211 0c3c 5EE7     	1:	_NEXT 
 212              	
 213              	//    TX!	 ( c -- )
 214              	// 	Send character c to the output device.
 215              	
 216 0c3e 0C0C0000 		.word	_QRX
 217 0c42 04       	_TXSTO:	.byte 4
 218 0c43 454D4954 		.ascii "EMIT"
 219 0c47 00       		.p2align 2 	
 220              	TXSTO:
 221              	EMIT:
 222              	TECHO:
 223 0c48 4FF48055 		_MOV32 WP,UART 
 223      C4F20105 
 224 0c50 2868     	1:  ldr T0,[WP,#USART_SR]
 225 0c52 10F0800F 	    tst T0,#0x80 // TXE flag 
 226 0c56 FBD0     		beq 1b 
 227 0c58 2E71     		strb TOS,[WP,#USART_DR]	 
 228 0c5a 57F8046B 		_POP
 229 0c5e 4DE7     		_NEXT 
 230              		
 231              	/***************
 232              	//  The kernel
 233              	***************/
 234              	
 235              	//    NOP	( -- )
 236              	// 	do nothing.
 237              	
 238 0c60 420C0000 		.word	_TXSTO
 239 0c64 03       	_NOP:	.byte   3
 240 0c65 4E4F50   		.ascii "NOP"
 241              		.p2align 2 	
 242              	NOP:
 243 0c68 48E7     		_NEXT 
 244              	 
 245              	
 246              	//    doLIT	( -- w )
 247              	// 	Push an inline literal.
 248              	
 249              	// 	.word	_NOP
 250              	// _LIT	.byte   COMPO+5
 251              	// 	.ascii "doLIT"
 252 0c6a 00BF     	 	.p2align 2 	
ARM GAS  forth.s 			page 44


 253              	DOLIT:
 254 0c6c 47F8046D 		_PUSH				//  store TOS on data stack
 255 0c70 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 256 0c74 42E7     		_NEXT 
 257              	
 258              	//    EXECUTE	( ca -- )
 259              	// 	Execute the word at ca.
 260              	
 261 0c76 640C0000 		.word	_NOP
 262 0c7a 07       	_EXECU:	.byte   7
 263 0c7b 45584543 		.ascii "EXECUTE"
 263      555445
 264 0c82 00BF     		.p2align 2 	
 265              	EXECU: 
 266 0c84 46F00105 		ORR	WP,TOS,#1 
 267 0c88 57F8046B 		_POP
 268 0c8c 2847     		BX WP 
 269 0c8e 35E7     		_NEXT 
 270              	
 271              	//    next	( -- ) counter on R:
 272              	// 	Run time code for the single index loop.
 273              	// 	: next ( -- ) \ hilevel model
 274              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 275              	
 276              	// 	.word	_EXECU
 277              	// _DONXT	.byte   COMPO+4
 278              	// 	.ascii "next"
 279              	// 	.p2align 2 	
 280              	DONXT:
 281 0c90 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 282 0c94 22B9     		CBNZ T2,NEXT1 
 283              		/* loop done */
 284 0c96 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 285 0c9a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 286 0c9e 2DE7     		_NEXT
 287              	NEXT1:
 288              		/* decrement loop counter */
 289 0ca0 A2F10102 		SUB	T2,T2,#1
 290 0ca4 C8F80020 		STR	T2,[RSP]
 291 0ca8 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 292 0cac 26E7     		_NEXT 
 293              	
 294              	//    ?branch	( f -- )
 295              	// 	Branch if flag is zero.
 296              	
 297              	// 	.word	_DONXT
 298              	// _QBRAN	.byte   COMPO+7
 299              	// 	.ascii "?branch"
 300              	// 	.p2align 2 	
 301              	QBRAN:
 302 0cae 3600     		MOVS	TOS,TOS
 303 0cb0 57F8046B 		_POP
 304 0cb4 02D1     		BNE	QBRAN1
 305 0cb6 DCF800C0 		LDR	IP,[IP]
 306 0cba 1FE7     		_NEXT
 307              	QBRAN1:
 308 0cbc 0CF1040C 	 	ADD	IP,IP,#4
ARM GAS  forth.s 			page 45


 309 0cc0 1CE7     		_NEXT
 310              	
 311              	//    branch	( -- )
 312              	// 	Branch to an inline address.
 313              	
 314              	// 	.word	_QBRAN
 315              	// _BRAN	.byte   COMPO+6
 316              	// 	.ascii "branch"
 317              	// 	.p2align 2 	
 318              	BRAN:
 319 0cc2 DCF800C0 		LDR	IP,[IP]
 320 0cc6 19E7     		_NEXT
 321              	
 322              	//    EXIT	(  -- )
 323              	// 	Exit the currently executing command.
 324              	
 325 0cc8 7A0C0000 		.word	_EXECU
 326 0ccc 04       	_EXIT:	.byte   4
 327 0ccd 45584954 		.ascii "EXIT"
 328 0cd1 0000BF   		.p2align 2 	
 329              	EXIT:
 330 0cd4 030B0000 		_UNNEST
 331              	
 332              	//    !	   ( w a -- )
 333              	// 	Pop the data stack to memory.
 334              	
 335 0cd8 CC0C0000 		.word	_EXIT
 336 0cdc 01       	_STORE:	.byte   1
 337 0cdd 21       		.ascii "!"
 338 0cde 00BF     		.p2align 2 	
 339              	STORE:
 340 0ce0 57F8045B 		LDR	WP,[DSP],#4
 341 0ce4 3560     		STR	WP,[TOS]
 342 0ce6 57F8046B 		_POP
 343 0cea 07E7     		_NEXT 
 344              	
 345              	//    @	   ( a -- w )
 346              	// 	Push memory location to the data stack.
 347              	
 348 0cec DC0C0000 		.word	_STORE
 349 0cf0 01       	_AT:	.byte   1
 350 0cf1 40       		.ascii "@"
 351 0cf2 00BF     		.p2align 2 	
 352              	AT:
 353 0cf4 3668     		LDR	TOS,[TOS]
 354 0cf6 01E7     		_NEXT 
 355              	
 356              	//    C!	  ( c b -- )
 357              	// 	Pop the data stack to byte memory.
 358              	
 359 0cf8 F00C0000 		.word	_AT
 360 0cfc 02       	_CSTOR:	.byte   2
 361 0cfd 4321     		.ascii "C!"
 362 0cff 00       		.p2align 2 	
 363              	CSTOR:
 364 0d00 57F8045B 		LDR	WP,[DSP],#4
 365 0d04 3570     		STRB WP,[TOS]
ARM GAS  forth.s 			page 46


 366 0d06 57F8046B 		_POP
 367 0d0a F7E6     		_NEXT
 368              	
 369              	//    C@	  ( b -- c )
 370              	// 	Push byte memory location to the data stack.
 371              	
 372 0d0c FC0C0000 		.word	_CSTOR
 373 0d10 02       	_CAT:	.byte   2
 374 0d11 4340     		.ascii "C@"
 375 0d13 00       		.p2align 2 	
 376              	CAT:
 377 0d14 3678     		LDRB	TOS,[TOS]
 378 0d16 F1E6     		_NEXT 
 379              	
 380              	//    R>	  ( -- w )
 381              	// 	Pop the return stack to the data stack.
 382              	
 383 0d18 100D0000 		.word	_CAT
 384 0d1c 02       	_RFROM:	.byte   2
 385 0d1d 523E     		.ascii "R>"
 386 0d1f 00       		.p2align 2 	
 387              	RFROM:
 388 0d20 47F8046D 		_PUSH
 389 0d24 58F8046B 		LDR	TOS,[RSP],#4
 390 0d28 E8E6     		_NEXT 
 391              	
 392              	//    R@	  ( -- w )
 393              	// 	Copy top of return stack to the data stack.
 394              	
 395 0d2a 1C0D0000 		.word	_RFROM
 396 0d2e 02       	_RAT:	.byte   2
 397 0d2f 5240     		.ascii "R@"
 398 0d31 0000BF   		.p2align 2 	
 399              	RAT:
 400 0d34 47F8046D 		_PUSH
 401 0d38 D8F80060 		LDR	TOS,[RSP]
 402 0d3c DEE6     		_NEXT 
 403              	
 404              	//    >R	  ( w -- )
 405              	// 	Push the data stack to the return stack.
 406              	
 407 0d3e 2E0D0000 		.word	_RAT
 408 0d42 42       	_TOR:	.byte   COMPO+2
 409 0d43 3E52     		.ascii ">R"
 410 0d45 0000BF   		.p2align 2 	
 411              	TOR:
 412 0d48 48F8046D 		STR	TOS,[RSP,#-4]!
 413 0d4c 57F8046B 		_POP
 414 0d50 D4E6     		_NEXT
 415              	
 416              	//	RP! ( u -- )
 417              	// initialize RPP with u 
 418 0d52 420D0000 		.word _TOR 
 419 0d56 03       	_RPSTOR: .byte 3 
 420 0d57 525021   		.ascii "RP!" 
 421 0d5a 00BF     		.p2align 2 
 422              	RPSTOR:
ARM GAS  forth.s 			page 47


 423 0d5c B046     		MOV RSP,TOS 
 424 0d5e 57F8046B 		_POP  
 425 0d62 CBE6     		_NEXT 
 426              	
 427              	
 428              	//	SP! ( u -- )
 429              	// initialize SPP with u 
 430 0d64 560D0000 		.word _RPSTOR  
 431 0d68 03       	_SPSTOR: .byte 3 
 432 0d69 535021   		.ascii "SP!" 
 433              		.p2align 2 
 434              	SPSTOR:
 435 0d6c 3746     		MOV DSP,TOS 
 436 0d6e 86EA0606 		EOR TOS,TOS,TOS 
 437 0d72 C3E6     		_NEXT 
 438              	
 439              	//    SP@	 ( -- a )
 440              	// 	Push the current data stack pointer.
 441              	
 442 0d74 680D0000 		.word	_SPSTOR
 443 0d78 03       	_SPAT:	.byte   3
 444 0d79 535040   		.ascii "SP@"
 445              		.p2align 2 	
 446              	SPAT:
 447 0d7c 47F8046D 		_PUSH
 448 0d80 3E46     		MOV	TOS,DSP
 449 0d82 BBE6     		_NEXT
 450              	
 451              	//    DROP	( w -- )
 452              	// 	Discard top stack item.
 453              	
 454 0d84 780D0000 		.word	_SPAT
 455 0d88 04       	_DROP:	.byte   4
 456 0d89 44524F50 		.ascii "DROP"
 457 0d8d 0000BF   		.p2align 2 	
 458              	DROP:
 459 0d90 57F8046B 		_POP
 460 0d94 B2E6     		_NEXT 
 461              	
 462              	//    DUP	 ( w -- w w )
 463              	// 	Duplicate the top stack item.
 464              	
 465 0d96 880D0000 		.word	_DROP
 466 0d9a 03       	_DUPP:	.byte   3
 467 0d9b 445550   		.ascii "DUP"
 468 0d9e 00BF     		.p2align 2 	
 469              	DUPP:
 470 0da0 47F8046D 		_PUSH
 471 0da4 AAE6     		_NEXT 
 472              	
 473              	//    SWAP	( w1 w2 -- w2 w1 )
 474              	// 	Exchange top two stack items.
 475              	
 476 0da6 9A0D0000 		.word	_DUPP
 477 0daa 04       	_SWAP:	.byte   4
 478 0dab 53574150 		.ascii "SWAP"
 479 0daf 00       		.p2align 2 	
ARM GAS  forth.s 			page 48


 480              	SWAP:
 481 0db0 3D68     		LDR	WP,[DSP]
 482 0db2 3E60     		STR	TOS,[DSP]
 483 0db4 2E46     		MOV	TOS,WP
 484 0db6 A1E6     		_NEXT 
 485              	
 486              	//    OVER	( w1 w2 -- w1 w2 w1 )
 487              	// 	Copy second stack item to top.
 488              	
 489 0db8 AA0D0000 		.word	_SWAP
 490 0dbc 04       	_OVER:	.byte   4
 491 0dbd 4F564552 		.ascii "OVER"
 492 0dc1 0000BF   		.p2align 2 	
 493              	OVER:
 494 0dc4 47F8046D 		_PUSH
 495 0dc8 7E68     		LDR	TOS,[DSP,#4]
 496 0dca 97E6     		_NEXT 
 497              	
 498              	//    0<	  ( n -- t )
 499              	// 	Return true if n is negative.
 500              	
 501 0dcc BC0D0000 		.word	_OVER
 502 0dd0 02       	_ZLESS:	.byte   2
 503 0dd1 303C     		.ascii "0<"
 504 0dd3 00       		.p2align 2 	
 505              	ZLESS:
 506              	//	MOV	WP,#0
 507              	//	ADD	TOS,WP,TOS,ASR #32
 508 0dd4 4FEAE676 		ASR TOS,#31
 509 0dd8 90E6     		_NEXT 
 510              	
 511              	//    AND	 ( w w -- w )
 512              	// 	Bitwise AND.
 513              	
 514 0dda D00D0000 		.word	_ZLESS
 515 0dde 03       	_ANDD:	.byte   3
 516 0ddf 414E44   		.ascii "AND"
 517 0de2 00BF     		.p2align 2 	
 518              	ANDD:
 519 0de4 57F8045B 		LDR	WP,[DSP],#4
 520 0de8 06EA0506 		AND	TOS,TOS,WP
 521 0dec 86E6     		_NEXT 
 522              	
 523              	//    OR	  ( w w -- w )
 524              	// 	Bitwise inclusive OR.
 525              	
 526 0dee DE0D0000 		.word	_ANDD
 527 0df2 02       	_ORR:	.byte   2
 528 0df3 4F52     		.ascii "OR"
 529 0df5 0000BF   		.p2align 2 	
 530              	ORR:
 531 0df8 57F8045B 		LDR	WP,[DSP],#4
 532 0dfc 46EA0506 		ORR	TOS,TOS,WP
 533 0e00 7CE6     		_NEXT 
 534              	
 535              	//    XOR	 ( w w -- w )
 536              	// 	Bitwise exclusive OR.
ARM GAS  forth.s 			page 49


 537              	
 538 0e02 F20D0000 		.word	_ORR
 539 0e06 03       	_XORR:	.byte   3
 540 0e07 584F52   		.ascii "XOR"
 541 0e0a 00BF     		.p2align 2 	
 542              	XORR:
 543 0e0c 57F8045B 		LDR	WP,[DSP],#4
 544 0e10 86EA0506 		EOR	TOS,TOS,WP
 545 0e14 72E6     		_NEXT 
 546              	
 547              	//    UM+	 ( w w -- w cy )
 548              	// 	Add two numbers, return the sum and carry flag.
 549              	
 550 0e16 060E0000 		.word	_XORR
 551 0e1a 03       	_UPLUS:	.byte   3
 552 0e1b 554D2B   		.ascii "UM+"
 553 0e1e 00BF     		.p2align 2 	
 554              	UPLUS:
 555 0e20 3D68     		LDR	WP,[DSP]
 556 0e22 AD19     		ADDS	WP,WP,TOS
 557 0e24 4FF00006 		MOV	TOS,#0
 558 0e28 46F10006 		ADC	TOS,TOS,#0
 559 0e2c 3D60     		STR	WP,[DSP]
 560 0e2e 65E6     		_NEXT 
 561              	
 562              	//    RSHIFT	 ( w # -- w )
 563              	// 	arithmetic Right shift # bits.
 564              	
 565 0e30 1A0E0000 		.word	_UPLUS
 566 0e34 06       	_RSHIFT:	.byte   6
 567 0e35 52534849 		.ascii "RSHIFT"
 567      4654
 568 0e3b 00       		.p2align 2 	
 569              	RSHIFT:
 570 0e3c 57F8045B 		LDR	WP,[DSP],#4
 571 0e40 45FA06F6 		MOV	TOS,WP,ASR TOS
 572 0e44 5AE6     		_NEXT 
 573              	
 574              	//    LSHIFT	 ( w # -- w )
 575              	// 	Right shift # bits.
 576              	
 577 0e46 340E0000 		.word	_RSHIFT
 578 0e4a 06       	_LSHIFT:	.byte   6
 579 0e4b 4C534849 		.ascii "LSHIFT"
 579      4654
 580 0e51 0000BF   		.p2align 2 	
 581              	LSHIFT:
 582 0e54 57F8045B 		LDR	WP,[DSP],#4
 583 0e58 05FA06F6 		MOV	TOS,WP,LSL TOS
 584 0e5c 4EE6     		_NEXT
 585              	
 586              	//    +	 ( w w -- w )
 587              	// 	Add.
 588              	
 589 0e5e 4A0E0000 		.word	_LSHIFT
 590 0e62 01       	_PLUS:	.byte   1
 591 0e63 2B       		.ascii "+"
ARM GAS  forth.s 			page 50


 592              		.p2align 2 	
 593              	PLUS:
 594 0e64 57F8045B 		LDR	WP,[DSP],#4
 595 0e68 2E44     		ADD	TOS,TOS,WP
 596 0e6a 47E6     		_NEXT 
 597              	
 598              	//    -	 ( w w -- w )
 599              	// 	Subtract.
 600              	
 601 0e6c 620E0000 		.word	_PLUS
 602 0e70 01       	_SUBB:	.byte   1
 603 0e71 2D       		.ascii "-"
 604 0e72 00BF     		.p2align 2 	
 605              	SUBB:
 606 0e74 57F8045B 		LDR	WP,[DSP],#4
 607 0e78 C6EB0506 		RSB	TOS,TOS,WP
 608 0e7c 3EE6     		_NEXT 
 609              	
 610              	//    *	 ( w w -- w )
 611              	// 	Multiply.
 612              	
 613 0e7e 700E0000 		.word	_SUBB
 614 0e82 01       	_STAR:	.byte   1
 615 0e83 2A       		.ascii "*"
 616              		.p2align 2 	
 617              	STAR:
 618 0e84 57F8045B 		LDR	WP,[DSP],#4
 619 0e88 05FB06F6 		MUL	TOS,WP,TOS
 620 0e8c 36E6     		_NEXT 
 621              	
 622              	//    UM*	 ( w w -- ud )
 623              	// 	Unsigned multiply.
 624              	
 625 0e8e 820E0000 		.word	_STAR
 626 0e92 03       	_UMSTA:	.byte   3
 627 0e93 554D2A   		.ascii "UM*"
 628 0e96 00BF     		.p2align 2 	
 629              	UMSTA:
 630 0e98 3D68     		LDR	WP,[DSP]
 631 0e9a A6FB0523 		UMULL	T2,T3,TOS,WP
 632 0e9e 3A60     		STR	T2,[DSP]
 633 0ea0 1E46     		MOV	TOS,T3
 634 0ea2 2BE6     		_NEXT 
 635              	
 636              	//    M*	 ( w w -- d )
 637              	// 	signed multiply.
 638              	
 639 0ea4 920E0000 		.word	_UMSTA
 640 0ea8 02       	_MSTAR:	.byte   2
 641 0ea9 4D2A     		.ascii "M*"
 642 0eab 00       		.p2align 2 	
 643              	MSTAR:
 644 0eac 3D68     		LDR	WP,[DSP]
 645 0eae 86FB0523 		SMULL	T2,T3,TOS,WP
 646 0eb2 3A60     		STR	T2,[DSP]
 647 0eb4 1E46     		MOV	TOS,T3
 648 0eb6 21E6     		_NEXT 
ARM GAS  forth.s 			page 51


 649              	
 650              	//    1+	 ( w -- w+1 )
 651              	// 	Add 1.
 652              	
 653 0eb8 A80E0000 		.word	_MSTAR
 654 0ebc 02       	_ONEP:	.byte   2
 655 0ebd 312B     		.ascii "1+"
 656 0ebf 00       		.p2align 2 	
 657              	ONEP:
 658 0ec0 06F10106 		ADD	TOS,TOS,#1
 659 0ec4 1AE6     		_NEXT 
 660              	
 661              	//    1-	 ( w -- w-1 )
 662              	// 	Subtract 1.
 663              	
 664 0ec6 BC0E0000 		.word	_ONEP
 665 0eca 02       	_ONEM:	.byte   2
 666 0ecb 312D     		.ascii "1-"
 667 0ecd 0000BF   		.p2align 2 	
 668              	ONEM:
 669 0ed0 A6F10106 		SUB	TOS,TOS,#1
 670 0ed4 12E6     		_NEXT 
 671              	
 672              	//    2+	 ( w -- w+2 )
 673              	// 	Add 1.
 674              	
 675 0ed6 CA0E0000 		.word	_ONEM
 676 0eda 02       	_TWOP:	.byte   2
 677 0edb 322B     		.ascii "2+"
 678 0edd 0000BF   		.p2align 2 	
 679              	TWOP:
 680 0ee0 06F10206 		ADD	TOS,TOS,#2
 681 0ee4 0AE6     		_NEXT
 682              	
 683              	//    2-	 ( w -- w-2 )
 684              	// 	Subtract 2.
 685              	
 686 0ee6 DA0E0000 		.word	_TWOP
 687 0eea 02       	_TWOM:	.byte   2
 688 0eeb 322D     		.ascii "2-"
 689 0eed 0000BF   		.p2align 2 	
 690              	TWOM:
 691 0ef0 A6F10206 		SUB	TOS,TOS,#2
 692 0ef4 02E6     		_NEXT
 693              	
 694              	//    CELL+	( w -- w+4 )
 695              	// 	Add CELLL.
 696              	
 697 0ef6 EA0E0000 		.word	_TWOM
 698 0efa 05       	_CELLP:	.byte   5
 699 0efb 43454C4C 		.ascii "CELL+"
 699      2B
 700              		.p2align 2 	
 701              	CELLP:
 702 0f00 06F10406 		ADD	TOS,TOS,#CELLL
 703 0f04 FAE5     		_NEXT
 704              	
ARM GAS  forth.s 			page 52


 705              	//    CELL-	( w -- w-4 )
 706              	// 	Subtract CELLL.
 707              	
 708 0f06 FA0E0000 		.word	_CELLP
 709 0f0a 05       	_CELLM:	.byte   5
 710 0f0b 43454C4C 		.ascii "CELL-"
 710      2D
 711              		.p2align 2 	
 712              	CELLM:
 713 0f10 A6F10406 		SUB	TOS,TOS,#CELLL
 714 0f14 F2E5     		_NEXT
 715              	 
 716              	//    BL	( -- 32 )
 717              	// 	Blank (ASCII space).
 718              	
 719 0f16 0A0F0000 		.word	_CELLM
 720 0f1a 02       	_BLANK:	.byte   2
 721 0f1b 424C     		.ascii "BL"
 722 0f1d 0000BF   		.p2align 2 	
 723              	BLANK:
 724 0f20 47F8046D 		_PUSH
 725 0f24 4FF02006 		MOV	TOS,#32
 726 0f28 E8E5     		_NEXT 
 727              	
 728              	//    CELLS	( w -- w*4 )
 729              	// 	Multiply 4.
 730              	
 731 0f2a 1A0F0000 		.word	_BLANK
 732 0f2e 05       	_CELLS:	.byte   5
 733 0f2f 43454C4C 		.ascii "CELLS"
 733      53
 734              		.p2align 2 	
 735              	CELLS:
 736 0f34 4FEA8606 		MOV	TOS,TOS,LSL#2
 737 0f38 E0E5     		_NEXT
 738              	
 739              	//    CELL/	( w -- w/4 )
 740              	// 	Divide by 4.
 741              	
 742 0f3a 2E0F0000 		.word	_CELLS
 743 0f3e 05       	_CELLSL:	.byte   5
 744 0f3f 43454C4C 		.ascii "CELL/"
 744      2F
 745              		.p2align 2 	
 746              	CELLSL:
 747 0f44 4FEAA606 		MOV	TOS,TOS,ASR#2
 748 0f48 D8E5     		_NEXT
 749              	
 750              	//    2*	( w -- w*2 )
 751              	// 	Multiply 2.
 752              	
 753 0f4a 3E0F0000 		.word	_CELLSL
 754 0f4e 02       	_TWOST:	.byte   2
 755 0f4f 322A     		.ascii "2*"
 756 0f51 0000BF   		.p2align 2 	
 757              	TWOST:
 758 0f54 4FEA4606 		MOV	TOS,TOS,LSL#1
ARM GAS  forth.s 			page 53


 759 0f58 D0E5     		_NEXT
 760              	
 761              	//    2/	( w -- w/2 )
 762              	// 	Divide by 2.
 763              	
 764 0f5a 4E0F0000 		.word	_TWOST
 765 0f5e 02       	_TWOSL:	.byte   2
 766 0f5f 322F     		.ascii "2/"
 767 0f61 0000BF   		.p2align 2 	
 768              	TWOSL:
 769 0f64 4FEA6606 		MOV	TOS,TOS,ASR#1
 770 0f68 C8E5     		_NEXT
 771              	
 772              	//    ?DUP	( w -- w w | 0 )
 773              	// 	Conditional duplicate.
 774              	
 775 0f6a 5E0F0000 		.word	_TWOSL
 776 0f6e 04       	_QDUP:	.byte   4
 777 0f6f 3F445550 		.ascii "?DUP"
 778 0f73 00       		.p2align 2 	
 779              	QDUP:
 780 0f74 3500     		MOVS	WP,TOS
 781 0f76 18BF     		IT NE 
 782 0f78 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 783 0f7c BEE5     		_NEXT
 784              	
 785              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 786              	// 	Rotate top 3 items.
 787              	
 788 0f7e 6E0F0000 		.word	_QDUP
 789 0f82 03       	_ROT:	.byte   3
 790 0f83 524F54   		.ascii "ROT"
 791 0f86 00BF     		.p2align 2 	
 792              	ROT:
 793 0f88 3868     		LDR	T0,[DSP]  // w2 
 794 0f8a 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 795 0f8c 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 796 0f8e 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 797 0f90 B4E5     		_NEXT
 798              	
 799              	// -ROT ( w1 w2 w3 -- w3 w1 w2 )
 800              	// left rotate top 3 elements 
 801 0f92 820F0000 		.word _ROT 
 802 0f96 04       	_NROT: .byte 4 
 803 0f97 2D524F54 		.ascii "-ROT"
 804 0f9b 00       		.p2align 2 
 805              	NROT:
 806 0f9c 7868     		LDR T0,[DSP,#4]
 807 0f9e 7E60     		STR TOS,[DSP,#4]	
 808 0fa0 3E68     		LDR TOS,[DSP]
 809 0fa2 3860     		STR T0,[DSP]
 810 0fa4 AAE5     		_NEXT 
 811              	
 812              	//    2DROP	( w1 w2 -- )
 813              	// 	Drop top 2 items.
 814              	
 815 0fa6 960F0000 		.word	_NROT
ARM GAS  forth.s 			page 54


 816 0faa 05       	_DDROP:	.byte   5
 817 0fab 3244524F 		.ascii "2DROP"
 817      50
 818              		.p2align 2 	
 819              	DDROP:
 820 0fb0 57F8046B 		_POP
 821 0fb4 57F8046B 		_POP
 822 0fb8 A0E5     		_NEXT 
 823              	
 824 0fba AA0F0000 		.word _DDROP 
 825 0fbe 05       	_TDROP: .byte 5 
 826 0fbf 3344524F 		.ascii "3DROP"
 826      50
 827              		.p2align 2
 828              	TDROP:
 829 0fc4 07F10807 	    add DSP,#8 
 830 0fc8 57F8046B 	    _POP 
 831 0fcc 96E5     	    _NEXT 
 832              	
 833              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 834              	// 	Duplicate top 2 items.
 835              	
 836 0fce BE0F0000 		.word	_TDROP
 837 0fd2 04       	_DDUP:	.byte   4
 838 0fd3 32445550 		.ascii "2DUP"
 839 0fd7 00       		.p2align 2 	
 840              	DDUP:
 841 0fd8 3868     		LDR	T0,[DSP] // w1
 842 0fda 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 843 0fde 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 844 0fe2 8BE5     		_NEXT
 845              	
 846              	//    D+	( d1 d2 -- d3 )
 847              	// 	Add top 2 double numbers.
 848              	
 849 0fe4 D20F0000 		.word	_DDUP
 850 0fe8 02       	_DPLUS:	.byte   2
 851 0fe9 442B     		.ascii "D+"
 852 0feb 00       		.p2align 2 	
 853              	DPLUS:
 854 0fec 57F8045B 		LDR	WP,[DSP],#4
 855 0ff0 57F8042B 		LDR	T2,[DSP],#4
 856 0ff4 3B68     		LDR	T3,[DSP]
 857 0ff6 ED18     		ADDS	WP,WP,T3
 858 0ff8 3D60     		STR	WP,[DSP]
 859 0ffa 46EB0206 		ADC	TOS,TOS,T2
 860 0ffe 7DE5     		_NEXT
 861              	
 862              	//    NOT	 ( w -- !w )
 863              	// 	1"s complement.
 864              	
 865 1000 E80F0000 		.word	_DPLUS
 866 1004 03       	_INVER:	.byte   3
 867 1005 4E4F54   		.ascii "NOT"
 868              		.p2align 2 	
 869              	INVER:
 870 1008 6FEA0606 		MVN	TOS,TOS
ARM GAS  forth.s 			page 55


 871 100c 76E5     		_NEXT
 872              	
 873              	//    NEGATE	( w -- -w )
 874              	// 	2's complement.
 875              	
 876 100e 04100000 		.word	_INVER
 877 1012 06       	_NEGAT:	.byte   6
 878 1013 4E454741 		.ascii "NEGATE"
 878      5445
 879 1019 0000BF   		.p2align 2 	
 880              	NEGAT:
 881 101c C6F10006 		RSB	TOS,TOS,#0
 882 1020 6CE5     		_NEXT
 883              	
 884              	//    ABS	 ( w -- |w| )
 885              	// 	Absolute.
 886              	
 887 1022 12100000 		.word	_NEGAT
 888 1026 03       	_ABSS:	.byte   3
 889 1027 414253   		.ascii "ABS"
 890 102a 00BF     		.p2align 2 	
 891              	ABSS:
 892 102c 16F0004F 		TST	TOS,#0x80000000
 893 1030 18BF     		IT NE
 894 1032 7642     	    RSBNE   TOS,TOS,#0
 895 1034 62E5     		_NEXT
 896              	
 897              	//  0= ( w -- f )
 898              	// TOS==0?
 899              	
 900 1036 26100000 		.word _ABSS
 901 103a 02       	_ZEQUAL: .byte 2
 902 103b 303D     		.ascii "0="
 903 103d 0000BF   		.p2align 2
 904              	ZEQUAL:
 905 1040 16B9     		cbnz TOS,1f
 906 1042 4FF0FF36 		mov TOS,#-1
 907 1046 59E5     		_NEXT 
 908 1048 86EA0606 	1:  eor TOS,TOS,TOS  
 909 104c 56E5     		_NEXT 	
 910              	
 911              	//    =	 ( w w -- t )
 912              	// 	Equal?
 913              	
 914 104e 3A100000 		.word	_ZEQUAL
 915 1052 01       	_EQUAL:	.byte   1
 916 1053 3D       		.ascii "="
 917              		.p2align 2 	
 918              	EQUAL:
 919 1054 57F8045B 		LDR	WP,[DSP],#4
 920 1058 AE42     		CMP	TOS,WP
 921 105a 0CBF     		ITE EQ 
 922 105c 6FF00006 	    MVNEQ	TOS,#0
 923 1060 0026     		MOVNE	TOS,#0
 924 1062 4BE5     		_NEXT
 925              	
 926              	//    U<	 ( w w -- t )
ARM GAS  forth.s 			page 56


 927              	// 	Unsigned less?
 928              	
 929 1064 52100000 		.word	_EQUAL
 930 1068 02       	_ULESS:	.byte   2
 931 1069 553C     		.ascii "U<"
 932 106b 00       		.p2align 2 	
 933              	ULESS:
 934 106c 57F8045B 		LDR	WP,[DSP],#4
 935 1070 B542     		CMP	WP,TOS
 936 1072 34BF     		ITE CC 
 937 1074 6FF00006 		MVNCC	TOS,#0
 938 1078 0026     		MOVCS	TOS,#0
 939 107a 3FE5     		_NEXT
 940              	
 941              	//    <	( w w -- t )
 942              	// 	Less?
 943              	
 944 107c 68100000 		.word	_ULESS
 945 1080 01       	_LESS:	.byte   1
 946 1081 3C       		.ascii "<"
 947 1082 00BF     		.p2align 2 	
 948              	LESS:
 949 1084 57F8045B 		LDR	WP,[DSP],#4
 950 1088 B542     		CMP	WP,TOS
 951 108a B4BF     	    ITE LT
 952 108c 6FF00006 		MVNLT	TOS,#0
 953 1090 0026     		MOVGE	TOS,#0
 954 1092 33E5     		_NEXT 
 955              	
 956              	//    >	( w w -- t )
 957              	// 	greater?
 958              	
 959 1094 80100000 		.word	_LESS
 960 1098 01       	_GREAT:	.byte   1
 961 1099 3E       		.ascii ">"
 962 109a 00BF     		.p2align 2 	
 963              	GREAT:
 964 109c 57F8045B 		LDR	WP,[DSP],#4
 965 10a0 B542     		CMP	WP,TOS
 966 10a2 CCBF     		ITE GT
 967 10a4 6FF00006 	    MVNGT	TOS,#0
 968 10a8 0026     		MOVLE	TOS,#0
 969 10aa 27E5     		_NEXT
 970              	
 971              	//    MAX	 ( w w -- max )
 972              	// 	Leave maximum.
 973              	
 974 10ac 98100000 		.word	_GREAT
 975 10b0 03       	_MAX:	.byte   3
 976 10b1 4D4158   		.ascii "MAX"
 977              		.p2align 2 	
 978              	MAX:
 979 10b4 57F8045B 		LDR	WP,[DSP],#4
 980 10b8 B542     		CMP	WP,TOS
 981 10ba C8BF     		IT GT 
 982 10bc 2E46     		MOVGT	TOS,WP
 983 10be 1DE5     		_NEXT 
ARM GAS  forth.s 			page 57


 984              	
 985              	//    MIN	 ( w w -- min )
 986              	// 	Leave minimum.
 987              	
 988 10c0 B0100000 		.word	_MAX
 989 10c4 03       	_MIN:	.byte   3
 990 10c5 4D494E   		.ascii "MIN"
 991              		.p2align 2 	
 992              	MIN:
 993 10c8 57F8045B 		LDR	WP,[DSP],#4
 994 10cc B542     		CMP	WP,TOS
 995 10ce B8BF     		IT LT
 996 10d0 2E46     		MOVLT	TOS,WP
 997 10d2 13E5     		_NEXT
 998              	
 999              	//    +!	 ( w a -- )
 1000              	// 	Add to memory.
 1001              	
 1002 10d4 C4100000 		.word	_MIN
 1003 10d8 02       	_PSTOR:	.byte   2
 1004 10d9 2B21     		.ascii "+!"
 1005 10db 00       		.p2align 2 	
 1006              	PSTOR:
 1007 10dc 57F8045B 		LDR	WP,[DSP],#4
 1008 10e0 3268     		LDR	T2,[TOS]
 1009 10e2 2A44     		ADD	T2,T2,WP
 1010 10e4 3260     		STR	T2,[TOS]
 1011 10e6 57F8046B 		_POP
 1012 10ea 07E5     		_NEXT
 1013              	
 1014              	//    2!	 ( d a -- )
 1015              	// 	Store double number.
 1016              	
 1017 10ec D8100000 		.word	_PSTOR
 1018 10f0 02       	_DSTOR:	.byte   2
 1019 10f1 3221     		.ascii "2!"
 1020 10f3 00       		.p2align 2 	
 1021              	DSTOR:
 1022 10f4 57F8045B 		LDR	WP,[DSP],#4
 1023 10f8 57F8042B 		LDR	T2,[DSP],#4
 1024 10fc 46F8045B 		STR	WP,[TOS],#4
 1025 1100 3260     		STR	T2,[TOS]
 1026 1102 57F8046B 		_POP
 1027 1106 F9E4     		_NEXT
 1028              	
 1029              	//    2@	 ( a -- d )
 1030              	// 	Fetch double number.
 1031              	
 1032 1108 F0100000 		.word	_DSTOR
 1033 110c 02       	_DAT:	.byte   2
 1034 110d 3240     		.ascii "2@"
 1035 110f 00       		.p2align 2 	
 1036              	DAT:
 1037 1110 7568     		LDR	WP,[TOS,#4]
 1038 1112 47F8045D 		STR	WP,[DSP,#-4]!
 1039 1116 3668     		LDR	TOS,[TOS]
 1040 1118 F0E4     		_NEXT
ARM GAS  forth.s 			page 58


 1041              	
 1042              	//    COUNT	( b -- b+1 c )
 1043              	// 	Fetch length of string.
 1044              	
 1045 111a 0C110000 		.word	_DAT
 1046 111e 05       	_COUNT:	.byte   5
 1047 111f 434F554E 		.ascii "COUNT"
 1047      54
 1048              		.p2align 2 	
 1049              	COUNT:
 1050 1124 16F8015B 		LDRB	WP,[TOS],#1
 1051 1128 47F8046D 		_PUSH
 1052 112c 2E46     		MOV	TOS,WP
 1053 112e E5E4     		_NEXT
 1054              	
 1055              	//    DNEGATE	( d -- -d )
 1056              	// 	Negate double number.
 1057              	
 1058 1130 1E110000 		.word	_COUNT
 1059 1134 07       	_DNEGA:	.byte   7
 1060 1135 444E4547 		.ascii "DNEGATE"
 1060      415445
 1061              		.p2align 2 	
 1062              	DNEGA:
 1063 113c 3D68     		LDR	WP,[DSP]
 1064 113e A2EB0202 		SUB	T2,T2,T2
 1065 1142 551B     		SUBS WP,T2,WP
 1066 1144 62EB0606 		SBC	TOS,T2,TOS
 1067 1148 3D60     		STR	WP,[DSP]
 1068 114a D7E4     		_NEXT
 1069              	
 1070              	// **************************************************************************
 1071              	//  System and user variables
 1072              	
 1073              	//    doVAR	( -- a )
 1074              	// 	Run time routine for VARIABLE and CREATE.
 1075              	
 1076              	// 	.word	_DNEGA
 1077              	// _DOVAR	.byte  COMPO+5
 1078              	// 	.ascii "doVAR"
 1079              	// 	.p2align 2 	
 1080              	DOVAR:
 1081 114c 47F8046D 		_PUSH
 1082 1150 6646     		MOV TOS,IP
 1083 1152 0CF1040C 		ADD IP,IP,#4 
 1084 1156 D4E4     		B UNNEST 
 1085              	
 1086              	//    doCON	( -- a ) 
 1087              	// 	Run time routine for CONSTANT.
 1088              	
 1089              	// 	.word	_DOVAR
 1090              	// _DOCON	.byte  COMPO+5
 1091              	// 	.ascii "doCON"
 1092              	// 	.p2align 2 	
 1093              	DOCON:
 1094 1158 47F8046D 		_PUSH
 1095 115c 5CF8046B 		LDR.W TOS,[IP],#4 
ARM GAS  forth.s 			page 59


 1096 1160 CFE4     		B UNNEST 
 1097              	
 1098              	/***********************
 1099              	  system variables 
 1100              	***********************/
 1101              	
 1102              	 // SEED ( -- a)
 1103              	 // return PRNG seed address 
 1104              	
 1105 1162 34110000 		.word _DNEGA
 1106 1166 04       	_SEED: .byte 4
 1107 1167 53454544 		.ascii "SEED"
 1108 116b 00       		.p2align 2
 1109              	SEED:
 1110 116c 47F8046D 		_PUSH 
 1111 1170 04F10406 		ADD TOS,UP,#RNDSEED
 1112 1174 C2E4     		_NEXT 	
 1113              	
 1114              	//  MSEC ( -- a)
 1115              	// return address of milliseconds counter
 1116 1176 66110000 	  .word _SEED 
 1117 117a 04       	_MSEC: .byte 4
 1118 117b 4D534543 	  .ascii "MSEC"
 1119 117f 00       	  .p2align 2 
 1120              	MSEC:
 1121 1180 47F8046D 	  _PUSH
 1122 1184 04F10806 	  ADD TOS,UP,#TICKS
 1123 1188 B8E4     	  _NEXT 
 1124              	
 1125              	// TIMER ( -- a )
 1126              	// count down timer 
 1127 118a 7A110000 	  .word _MSEC
 1128 118e 05       	_TIMER:  .byte 5
 1129 118f 54494D45 	  .ascii "TIMER"
 1129      52
 1130              	  .p2align 2 
 1131              	TIMER:
 1132 1194 47F8046D 	  _PUSH 
 1133 1198 04F10C06 	  ADD TOS,UP,#CD_TIMER
 1134 119c AEE4     	  _NEXT
 1135              	
 1136              	//    'BOOT	 ( -- a )
 1137              	// 	Application.
 1138              	
 1139 119e 8E110000 		.word	_TIMER
 1140 11a2 05       	_TBOOT:	.byte   5
 1141 11a3 27424F4F 		.ascii "'BOOT"
 1141      54
 1142              		.p2align 2 	
 1143              	TBOOT:
 1144 11a8 47F8046D 		_PUSH
 1145 11ac 04F11006 		ADD	TOS,UP,#BOOT 
 1146 11b0 A4E4     		_NEXT
 1147              		
 1148              	//    BASE	( -- a )
 1149              	// 	Storage of the radix base for numeric I/O.
 1150              	
ARM GAS  forth.s 			page 60


 1151 11b2 A2110000 		.word	_TBOOT
 1152 11b6 04       	_BASE:	.byte   4
 1153 11b7 42415345 		.ascii "BASE"
 1154 11bb 00       		.p2align 2 	
 1155              	BASE:
 1156 11bc 47F8046D 		_PUSH
 1157 11c0 04F11406 		ADD	TOS,UP,#NBASE
 1158 11c4 9AE4     		_NEXT
 1159              	
 1160              	//    tmp	 ( -- a )
 1161              	// 	A temporary storage location used in parse and find.
 1162              	
 1163              	// 	.word	_BASE
 1164              	// _TEMP	.byte   COMPO+3
 1165              	// 	.ascii "tmp"
 1166              	// 	.p2align 2 	
 1167              	TEMP:
 1168 11c6 47F8046D 		_PUSH
 1169 11ca 04F11806 		ADD	TOS,UP,#TMP
 1170 11ce 95E4     		_NEXT
 1171              	
 1172              	//    SPAN	( -- a )
 1173              	// 	Hold character count received by EXPECT.
 1174              	
 1175 11d0 B6110000 		.word	_BASE
 1176 11d4 04       	_SPAN:	.byte   4
 1177 11d5 5350414E 		.ascii "SPAN"
 1178 11d9 0000BF   		.p2align 2 	
 1179              	SPAN:
 1180 11dc 47F8046D 		_PUSH
 1181 11e0 04F11C06 		ADD	TOS,UP,#CSPAN
 1182 11e4 8AE4     		_NEXT
 1183              	
 1184              	//    >IN	 ( -- a )
 1185              	// 	Hold the character pointer while parsing input stream.
 1186              	
 1187 11e6 D4110000 		.word	_SPAN
 1188 11ea 03       	_INN:	.byte   3
 1189 11eb 3E494E   		.ascii ">IN"
 1190 11ee 00BF     		.p2align 2 	
 1191              	INN:
 1192 11f0 47F8046D 		_PUSH
 1193 11f4 04F12006 		ADD	TOS,UP,#TOIN
 1194 11f8 80E4     		_NEXT
 1195              	
 1196              	//    #TIB	( -- a )
 1197              	// 	Hold the current count and address of the terminal input buffer.
 1198              	
 1199 11fa EA110000 		.word	_INN
 1200 11fe 04       	_NTIB:	.byte   4
 1201 11ff 23544942 		.ascii "#TIB"
 1202 1203 00       		.p2align 2 	
 1203              	NTIB:
 1204 1204 47F8046D 		_PUSH
 1205 1208 04F12406 		ADD	TOS,UP,#NTIBB
 1206 120c 76E4     		_NEXT
 1207              	
ARM GAS  forth.s 			page 61


 1208              	//    'EVAL	( -- a )
 1209              	// 	Execution vector of EVAL.
 1210              	
 1211 120e FE110000 		.word	_NTIB
 1212 1212 05       	_TEVAL:	.byte   5
 1213 1213 27455641 		.ascii "'EVAL"
 1213      4C
 1214              		.p2align 2 	
 1215              	TEVAL:
 1216 1218 47F8046D 		_PUSH
 1217 121c 04F12C06 		ADD	TOS,UP,#EVAL
 1218 1220 6CE4     		_NEXT
 1219              	
 1220              	//    HLD	 ( -- a )
 1221              	// 	Hold a pointer in building a numeric output string.
 1222              	
 1223 1222 12120000 		.word	_TEVAL
 1224 1226 03       	_HLD:	.byte   3
 1225 1227 484C44   		.ascii "HLD"
 1226 122a 00BF     		.p2align 2 	
 1227              	HLD:
 1228 122c 47F8046D 		_PUSH
 1229 1230 04F13006 		ADD	TOS,UP,#HOLD
 1230 1234 62E4     		_NEXT
 1231              	
 1232              	//    CONTEXT	( -- a )
 1233              	// 	A area to specify vocabulary search order.
 1234              	
 1235 1236 26120000 		.word	_HLD
 1236 123a 07       	_CNTXT:	.byte   7
 1237 123b 434F4E54 		.ascii "CONTEXT"
 1237      455854
 1238 1242 00BF     		.p2align 2 	
 1239              	CNTXT:
 1240              	CRRNT:
 1241 1244 47F8046D 		_PUSH
 1242 1248 04F13406 		ADD	TOS,UP,#CTXT
 1243 124c 56E4     		_NEXT
 1244              	
 1245              	//    CP	( -- a )
 1246              	// 	Point to top name in RAM vocabulary.
 1247              	
 1248 124e 3A120000 		.word	_CNTXT
 1249 1252 02       	_CP:	.byte   2
 1250 1253 4350     		.ascii "CP"
 1251 1255 0000BF   		.p2align 2 	
 1252              	CPP:
 1253 1258 47F8046D 		_PUSH
 1254 125c 04F13C06 		ADD	TOS,UP,#USER_CTOP
 1255 1260 4CE4     		_NEXT
 1256              	
 1257              	//   FCP ( -- a )
 1258              	//  Point ot top of Forth system dictionary
 1259 1262 52120000 		.word _CP
 1260 1266 03       	_FCP: .byte 3            
 1261 1267 464350   		.ascii "FCP"
 1262 126a 00BF     		.p2align 2 
ARM GAS  forth.s 			page 62


 1263              	FCP: 
 1264 126c 47F8046D 		_PUSH 
 1265 1270 04F13806 		ADD TOS,UP,#FORTH_CTOP 
 1266 1274 42E4     		_NEXT 
 1267              	
 1268              	//    LAST	( -- a )
 1269              	// 	Point to the last name in the name dictionary.
 1270              	
 1271 1276 66120000 		.word	_FCP
 1272 127a 04       	_LAST:	.byte   4
 1273 127b 4C415354 		.ascii "LAST"
 1274 127f 00       		.p2align 2 	
 1275              	LAST:
 1276 1280 47F8046D 		_PUSH
 1277 1284 04F14006 		ADD	TOS,UP,#LASTN
 1278 1288 38E4     		_NEXT
 1279              	
 1280              	
 1281              	/***********************
 1282              		system constants 
 1283              	***********************/
 1284              	
 1285              	//	USER_BEGIN ( -- a )
 1286              	//  where user area begin in RAM
 1287 128a 7A120000 		.word _LAST
 1288 128e 0A       	_USER_BGN: .byte 10
 1289 128f 55534552 		.ascii "USER_BEGIN"
 1289      5F424547 
 1289      494E
 1290 1299 0000BF   		.p2align 2
 1291              	USER_BEGIN:
 1292 129c 47F8046D 		_PUSH 
 1293 12a0 004E     		ldr TOS,USR_BGN_ADR 
 1294 12a2 2BE4     		_NEXT 
 1295              	USR_BGN_ADR:
 1296 12a4 12050020 	.word  DTOP 
 1297              	
 1298              	//  USER_END ( -- a )
 1299              	//  where user area end in RAM 
 1300 12a8 8E120000 		.word _USER_BGN
 1301 12ac 08       	_USER_END: .byte 8 
 1302 12ad 55534552 		.ascii "USER_END" 
 1302      5F454E44 
 1303 12b5 0000BF   		.p2align 2 
 1304              	USER_END:
 1305 12b8 47F8046D 		_PUSH 
 1306 12bc 004E     		ldr TOS,USER_END_ADR 
 1307 12be 1DE4     		_NEXT 
 1308              	USER_END_ADR:
 1309 12c0 FC800120 		.word DEND 
 1310              	
 1311              	
 1312              	/* *********************
 1313              	  Common functions
 1314              	***********************/
 1315              	
 1316              	//    WITHIN	( u ul uh -- t )
ARM GAS  forth.s 			page 63


 1317              	// 	Return true if u is within the range of ul and uh.
 1318              	
 1319 12c4 AC120000 		.word	_USER_END 
 1320 12c8 06       	_WITHI:	.byte   6
 1321 12c9 57495448 		.ascii "WITHIN"
 1321      494E
 1322 12cf 00       		.p2align 2 	
 1323              	WITHI:
 1324 12d0 504700BF 		_NEST
 1325 12d4 C50D0000 		_ADR	OVER
 1326 12d8 750E0000 		_ADR	SUBB
 1327 12dc 490D0000 		_ADR	TOR
 1328 12e0 750E0000 		_ADR	SUBB
 1329 12e4 210D0000 		_ADR	RFROM
 1330 12e8 6D100000 		_ADR	ULESS
 1331 12ec 030B0000 		_UNNEST
 1332              	
 1333              	//  Divide
 1334              	
 1335              	//    UM/MOD	( udl udh u -- ur uq )
 1336              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1337              	
 1338 12f0 C8120000 		.word	_WITHI
 1339 12f4 06       	_UMMOD:	.byte   6
 1340 12f5 554D2F4D 		.ascii "UM/MOD"
 1340      4F44
 1341 12fb 00       		.p2align 2 	
 1342              	UMMOD:
 1343 12fc 4FF00103 		MOV	T3,#1
 1344 1300 57F8045B 		LDR	WP,[DSP],#4
 1345 1304 3A68     		LDR	T2,[DSP]
 1346              	UMMOD0:
 1347 1306 9218     		ADDS	T2,T2,T2
 1348 1308 6D41     		ADCS	WP,WP,WP
 1349 130a 04D3     		BCC	UMMOD1
 1350 130c A5EB0605 		SUB	WP,WP,TOS
 1351 1310 02F10102 		ADD	T2,T2,#1
 1352 1314 04E0     		B UMMOD2
 1353              	UMMOD1:
 1354 1316 AD1B     		SUBS	WP,WP,TOS 
 1355 1318 28BF     		IT CS 
 1356 131a 0132     		ADDCS	T2,T2,#1
 1357 131c 00D2     		BCS	UMMOD2
 1358 131e 3544     		ADD	WP,WP,TOS
 1359              	UMMOD2:
 1360 1320 DB18     		ADDS	T3,T3,T3
 1361 1322 F0D3     		BCC	UMMOD0
 1362 1324 1646     		MOV	TOS,T2
 1363 1326 3D60     		STR	WP,[DSP]
 1364 1328 FFF7E8BB 		_NEXT
 1365              	
 1366              	//    M/MOD	( d n -- r q )
 1367              	// 	Signed floored divide of double by single. Return mod and quotient.
 1368              	
 1369 132c F4120000 		.word	_UMMOD
 1370 1330 05       	_MSMOD:	.byte  5
 1371 1331 4D2F4D4F 		.ascii "M/MOD"
ARM GAS  forth.s 			page 64


 1371      44
 1372 1336 00BF     		.p2align 2 	
 1373              	MSMOD:	
 1374 1338 504700BF 		_NEST
 1375 133c A10D0000 		_ADR	DUPP
 1376 1340 D50D0000 		_ADR	ZLESS
 1377 1344 A10D0000 		_ADR	DUPP
 1378 1348 490D0000 		_ADR	TOR
 1379 134c AF0C0000 		_QBRAN MMOD1
 1379      64130000 
 1380 1354 1D100000 		_ADR	NEGAT
 1381 1358 490D0000 		_ADR	TOR
 1382 135c 3D110000 		_ADR	DNEGA
 1383 1360 210D0000 		_ADR	RFROM
 1384              	MMOD1:
 1385 1364 490D0000 		_ADR	TOR
 1386 1368 A10D0000 		_ADR	DUPP
 1387 136c D50D0000 		_ADR	ZLESS
 1388 1370 AF0C0000 		_QBRAN MMOD2
 1388      80130000 
 1389 1378 350D0000 		_ADR	RAT
 1390 137c 650E0000 		_ADR	PLUS
 1391              	MMOD2:
 1392 1380 210D0000 		_ADR	RFROM
 1393 1384 FD120000 		_ADR	UMMOD
 1394 1388 210D0000 		_ADR	RFROM
 1395 138c AF0C0000 		_QBRAN	MMOD3
 1395      A0130000 
 1396 1394 B10D0000 		_ADR	SWAP
 1397 1398 1D100000 		_ADR	NEGAT
 1398 139c B10D0000 		_ADR	SWAP
 1399              	MMOD3:   
 1400 13a0 030B0000 		_UNNEST
 1401              	
 1402              	//    /MOD	( n n -- r q )
 1403              	// 	Signed divide. Return mod and quotient.
 1404              	
 1405 13a4 30130000 		.word	_MSMOD
 1406 13a8 04       	_SLMOD:	.byte   4
 1407 13a9 2F4D4F44 		.ascii "/MOD"
 1408 13ad 0000BF   		.p2align 2 	
 1409              	SLMOD:
 1410 13b0 504700BF 		_NEST
 1411 13b4 C50D0000 		_ADR	OVER
 1412 13b8 D50D0000 		_ADR	ZLESS
 1413 13bc B10D0000 		_ADR	SWAP
 1414 13c0 39130000 		_ADR	MSMOD
 1415 13c4 030B0000 		_UNNEST
 1416              	
 1417              	//    MOD	 ( n n -- r )
 1418              	// 	Signed divide. Return mod only.
 1419              	
 1420 13c8 A8130000 		.word	_SLMOD
 1421 13cc 03       	_MODD:	.byte  3
 1422 13cd 4D4F44   		.ascii "MOD"
 1423              		.p2align 2 	
 1424              	MODD:
ARM GAS  forth.s 			page 65


 1425 13d0 504700BF 		_NEST
 1426 13d4 B1130000 		_ADR	SLMOD
 1427 13d8 910D0000 		_ADR	DROP
 1428 13dc 030B0000 		_UNNEST
 1429              	
 1430              	//    /	   ( n n -- q )
 1431              	// 	Signed divide. Return quotient only.
 1432              	
 1433 13e0 CC130000 		.word	_MODD
 1434 13e4 01       	_SLASH:	.byte  1
 1435 13e5 2F       		.ascii "/"
 1436 13e6 00BF     		.p2align 2 	
 1437              	SLASH:
 1438 13e8 504700BF 		_NEST
 1439 13ec B1130000 		_ADR	SLMOD
 1440 13f0 B10D0000 		_ADR	SWAP
 1441 13f4 910D0000 		_ADR	DROP
 1442 13f8 030B0000 		_UNNEST
 1443              	
 1444              	//    */MOD	( n1 n2 n3 -- r q )
 1445              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1446              	
 1447 13fc E4130000 		.word	_SLASH
 1448 1400 05       	_SSMOD:	.byte  5
 1449 1401 2A2F4D4F 		.ascii "*/MOD"
 1449      44
 1450 1406 00BF     		.p2align 2 	
 1451              	SSMOD:
 1452 1408 504700BF 		_NEST
 1453 140c 490D0000 		_ADR	TOR
 1454 1410 AD0E0000 		_ADR	MSTAR
 1455 1414 210D0000 		_ADR	RFROM
 1456 1418 39130000 		_ADR	MSMOD
 1457 141c 030B0000 		_UNNEST
 1458              	
 1459              	//    */	  ( n1 n2 n3 -- q )
 1460              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1461              	
 1462 1420 00140000 		.word	_SSMOD
 1463 1424 02       	_STASL:	.byte  2
 1464 1425 2A2F     		.ascii "*/"
 1465 1427 00       		.p2align 2 	
 1466              	STASL:
 1467 1428 504700BF 		_NEST
 1468 142c 09140000 		_ADR	SSMOD
 1469 1430 B10D0000 		_ADR	SWAP
 1470 1434 910D0000 		_ADR	DROP
 1471 1438 030B0000 		_UNNEST
 1472              	
 1473              	// **************************************************************************
 1474              	//  Miscellaneous
 1475              	
 1476              	//    ALIGNED	( b -- a )
 1477              	// 	Align address to the cell boundary.
 1478              	
 1479 143c 24140000 		.word	_STASL
 1480 1440 07       	_ALGND:	.byte   7
ARM GAS  forth.s 			page 66


 1481 1441 414C4947 		.ascii "ALIGNED"
 1481      4E4544
 1482              		.p2align 2 	
 1483              	ALGND:
 1484 1448 06F10306 		ADD	TOS,TOS,#3
 1485 144c 6FF00305 		MVN	WP,#3
 1486 1450 06EA0506 		AND	TOS,TOS,WP
 1487 1454 FFF752BB 		_NEXT
 1488              	
 1489              	//    >CHAR	( c -- c )
 1490              	// 	Filter non-printing characters.
 1491              	
 1492 1458 40140000 		.word	_ALGND
 1493 145c 05       	_TCHAR:	.byte  5
 1494 145d 3E434841 		.ascii ">CHAR"
 1494      52
 1495 1462 00BF     		.p2align 2 	
 1496              	TCHAR:
 1497 1464 504700BF 		_NEST
 1498 1468 6D0C0000 		_DOLIT  0x7F
 1498      7F000000 
 1499 1470 E50D0000 		_ADR	ANDD
 1500 1474 A10D0000 		_ADR	DUPP	// mask msb
 1501 1478 210F0000 		_ADR	BLANK
 1502 147c 6D0C0000 		_DOLIT 	127
 1502      7F000000 
 1503 1484 D1120000 		_ADR	WITHI	// check for printable
 1504 1488 09100000 		_ADR	INVER
 1505 148c AF0C0000 		_QBRAN	TCHA1
 1505      A0140000 
 1506 1494 910D0000 		_ADR	DROP
 1507 1498 6D0C0000 		_DOLIT 	'_'	// replace non-printables
 1507      5F000000 
 1508              	TCHA1:
 1509 14a0 030B0000 		  _UNNEST
 1510              	
 1511              	//    DEPTH	( -- n )
 1512              	// 	Return the depth of the data stack.
 1513              	
 1514 14a4 5C140000 		.word	_TCHAR
 1515 14a8 05       	_DEPTH:	.byte  5
 1516 14a9 44455054 		.ascii "DEPTH"
 1516      48
 1517 14ae 00BF     		.p2align 2 	
 1518              	DEPTH:
 1519 14b0 4FF47F42 		_MOV32 T2,SPP 
 1519      C2F20102 
 1520 14b8 A2EB0702 		SUB	T2,T2,DSP
 1521 14bc 47F8046D 		_PUSH
 1522 14c0 4FEAA206 		ASR	TOS,T2,#2
 1523 14c4 FFF71ABB 		_NEXT
 1524              	
 1525              	//    PICK	( ... +n -- ... w )
 1526              	// 	Copy the nth stack item to tos.
 1527              	
 1528 14c8 A8140000 		.word	_DEPTH
 1529 14cc 04       	_PICK:	.byte  4
ARM GAS  forth.s 			page 67


 1530 14cd 5049434B 		.ascii "PICK"
 1531 14d1 0000BF   		.p2align 2 	
 1532              	PICK:
 1533 14d4 504700BF 		_NEST
 1534 14d8 C10E0000 		_ADR	ONEP
 1535 14dc 350F0000 		_ADR	CELLS
 1536 14e0 7D0D0000 		_ADR	SPAT
 1537 14e4 650E0000 		_ADR	PLUS
 1538 14e8 F50C0000 		_ADR	AT
 1539 14ec 030B0000 		_UNNEST
 1540              	
 1541              	// **************************************************************************
 1542              	//  Memory access
 1543              	
 1544              	//    HERE	( -- a )
 1545              	// 	Return the top of the code dictionary.
 1546              	
 1547 14f0 CC140000 		.word	_PICK
 1548 14f4 04       	_HERE:	.byte  4
 1549 14f5 48455245 		.ascii "HERE"
 1550 14f9 0000BF   		.p2align 2 	
 1551              	HERE:
 1552 14fc 504700BF 		_NEST
 1553 1500 59120000 		_ADR	CPP
 1554 1504 F50C0000 		_ADR	AT
 1555 1508 030B0000 		_UNNEST
 1556              		
 1557              	//    PAD	 ( -- a )
 1558              	// 	Return the address of a temporary buffer.
 1559              	
 1560 150c F4140000 		.word	_HERE
 1561 1510 03       	_PAD:	.byte  3
 1562 1511 504144   		.ascii "PAD"
 1563              		.p2align 2 	
 1564              	PAD:
 1565 1514 504700BF 		_NEST
 1566 1518 FD140000 		_ADR	HERE
 1567 151c 6D0C0000 		_DOLIT 80
 1567      50000000 
 1568 1524 650E0000 		_ADR PLUS 
 1569 1528 030B0000 		_UNNEST
 1570              	
 1571              	//    TIB	 ( -- a )
 1572              	// 	Return the address of the terminal input buffer.
 1573              	
 1574 152c 10150000 		.word	_PAD
 1575 1530 03       	_TIB:	.byte  3
 1576 1531 544942   		.ascii "TIB"
 1577              		.p2align 2 	
 1578              	TIB:
 1579 1534 47F8046D 		_PUSH
 1580 1538 A66A     		ldr TOS,[UP,#TIBUF]
 1581 153a FFF7DFBA 		_NEXT
 1582              	
 1583              	//    @EXECUTE	( a -- )
 1584              	// 	Execute vector stored in address a.
 1585              	
ARM GAS  forth.s 			page 68


 1586 153e 30150000 		.word	_TIB
 1587 1542 08       	_ATEXE:	.byte   8
 1588 1543 40455845 		.ascii "@EXECUTE"
 1588      43555445 
 1589 154b 00       		.p2align 2 	
 1590              	ATEXE: 
 1591 154c 3500     		MOVS	WP,TOS
 1592 154e 57F8046B 		_POP
 1593 1552 2D68     		LDR	WP,[WP]
 1594 1554 45F00105 		ORR	WP,WP,#1
 1595 1558 18BF     	    IT NE 
 1596 155a 2847     		BXNE	WP
 1597 155c FFF7CEBA 		_NEXT
 1598              	
 1599              	//    CMOVE	( b1 b2 u -- )
 1600              	// 	Copy u bytes from b1 to b2.
 1601              	
 1602 1560 42150000 		.word	_ATEXE
 1603 1564 05       	_CMOVE:	.byte   5
 1604 1565 434D4F56 		.ascii "CMOVE"
 1604      45
 1605 156a 00BF     		.p2align 2 	
 1606              	CMOVE:
 1607 156c 57F8042B 		LDR	T2,[DSP],#4
 1608 1570 57F8043B 		LDR	T3,[DSP],#4
 1609 1574 03E0     		B CMOV1
 1610              	CMOV0:
 1611 1576 13F8015B 		LDRB	WP,[T3],#1
 1612 157a 02F8015B 		STRB	WP,[T2],#1
 1613              	CMOV1:
 1614 157e 3600     		MOVS	TOS,TOS
 1615 1580 02D0     		BEQ	CMOV2
 1616 1582 A6F10106 		SUB	TOS,TOS,#1
 1617 1586 F6E7     		B CMOV0
 1618              	CMOV2:
 1619 1588 57F8046B 		_POP
 1620 158c FFF7B6BA 		_NEXT
 1621              	
 1622              	//    MOVE	( a1 a2 u -- )
 1623              	// 	Copy u words from a1 to a2.
 1624              	
 1625 1590 64150000 		.word	_CMOVE
 1626 1594 04       	_MOVE:	.byte   4
 1627 1595 4D4F5645 		.ascii "MOVE"
 1628 1599 0000BF   		.p2align 2 	
 1629              	MOVE:
 1630 159c 26F00306 		AND	TOS,TOS,#-4
 1631 15a0 57F8042B 		LDR	T2,[DSP],#4
 1632 15a4 57F8043B 		LDR	T3,[DSP],#4
 1633 15a8 03E0     		B MOVE1
 1634              	MOVE0:
 1635 15aa 53F8045B 		LDR	WP,[T3],#4
 1636 15ae 42F8045B 		STR	WP,[T2],#4
 1637              	MOVE1:
 1638 15b2 3600     		MOVS	TOS,TOS
 1639 15b4 02D0     		BEQ	MOVE2
 1640 15b6 A6F10406 		SUB	TOS,TOS,#4
ARM GAS  forth.s 			page 69


 1641 15ba F6E7     		B MOVE0
 1642              	MOVE2:
 1643 15bc 57F8046B 		_POP
 1644 15c0 FFF79CBA 		_NEXT
 1645              	
 1646              	//    FILL	( b u c -- )
 1647              	// 	Fill u bytes of character c to area beginning at b.
 1648              	
 1649 15c4 94150000 		.word	_MOVE
 1650 15c8 04       	_FILL:	.byte   4
 1651 15c9 46494C4C 		.ascii "FILL"
 1652 15cd 0000BF   		.p2align 2 	
 1653              	FILL:
 1654 15d0 03CF     		LDMFD DSP!,{T0,T1} 
 1655 15d2 0000     		MOVS T0,T0 
 1656 15d4 03D0     		BEQ FILL2
 1657              	FILL1:
 1658 15d6 01F8016B 		STRB	TOS,[T1],#1
 1659 15da 0138     		SUBS	T0,T0,#1
 1660 15dc FBD1     		BNE FILL1
 1661              	FILL2:
 1662 15de 57F8046B 		_POP
 1663 15e2 FFF78BBA 		_NEXT
 1664              	
 1665              	//    PACK$	( b u a -- a )
 1666              	// 	Build a counted word with u characters from b. Null fill.
 1667              	
 1668 15e6 C8150000 		.word	_FILL
 1669 15ea 05       	_PACKS:	.byte  5
 1670 15eb 5041434B 		.ascii "PACK$$"
 1670      2424
 1671 15f1 0000BF   		.p2align 2 	
 1672              	PACKS:
 1673 15f4 504700BF 		_NEST
 1674 15f8 49140000 		_ADR	ALGND
 1675 15fc A10D0000 		_ADR	DUPP
 1676 1600 490D0000 		_ADR	TOR			// strings only on cell boundary
 1677 1604 C50D0000 		_ADR	OVER
 1678 1608 650E0000 		_ADR	PLUS
 1679 160c C10E0000 		_ADR	ONEP
 1680 1610 6D0C0000 		_DOLIT 	0xFFFFFFFC
 1680      FCFFFFFF 
 1681 1618 E50D0000 		_ADR	ANDD			// count mod cell
 1682 161c 6D0C0000 		_DOLIT 	0
 1682      00000000 
 1683 1624 B10D0000 		_ADR	SWAP
 1684 1628 E10C0000 		_ADR	STORE			// null fill cell
 1685 162c 350D0000 		_ADR	RAT
 1686 1630 D90F0000 		_ADR	DDUP
 1687 1634 010D0000 		_ADR	CSTOR
 1688 1638 C10E0000 		_ADR	ONEP			// save count
 1689 163c B10D0000 		_ADR	SWAP
 1690 1640 6D150000 		_ADR	CMOVE
 1691 1644 210D0000 		_ADR	RFROM
 1692 1648 030B0000 		_UNNEST   			// move string
 1693              	
 1694              	// **************************************************************************
ARM GAS  forth.s 			page 70


 1695              	//  Numeric output, single precision
 1696              	
 1697              	//    DIGIT	( u -- c )
 1698              	// 	Convert digit u to a character.
 1699              	
 1700 164c EA150000 		.word	_PACKS
 1701 1650 05       	_DIGIT:	.byte  5
 1702 1651 44494749 		.ascii "DIGIT"
 1702      54
 1703 1656 00BF     		.p2align 2 	
 1704              	DIGIT:
 1705 1658 504700BF 		_NEST
 1706 165c 6D0C0000 		_DOLIT 9
 1706      09000000 
 1707 1664 C50D0000 		_ADR	OVER
 1708 1668 85100000 		_ADR	LESS
 1709 166c 6D0C0000 		_DOLIT	7
 1709      07000000 
 1710 1674 E50D0000 		_ADR	ANDD
 1711 1678 650E0000 		_ADR	PLUS
 1712 167c 6D0C0000 		_DOLIT	'0'
 1712      30000000 
 1713 1684 650E0000 		_ADR	PLUS 
 1714 1688 030B0000 		_UNNEST
 1715              	
 1716              	//    EXTRACT	( n base -- n c )
 1717              	// 	Extract the least significant digit from n.
 1718              	
 1719 168c 50160000 		.word	_DIGIT
 1720 1690 07       	_EXTRC:	.byte  7
 1721 1691 45585452 		.ascii "EXTRACT"
 1721      414354
 1722              		.p2align 2 	
 1723              	EXTRC:
 1724 1698 504700BF 		_NEST
 1725 169c 6D0C0000 		_DOLIT 0
 1725      00000000 
 1726 16a4 B10D0000 		_ADR	SWAP
 1727 16a8 FD120000 		_ADR	UMMOD
 1728 16ac B10D0000 		_ADR	SWAP
 1729 16b0 59160000 		_ADR	DIGIT
 1730 16b4 030B0000 		_UNNEST
 1731              	
 1732              	//    <#	  ( -- )
 1733              	// 	Initiate the numeric output process.
 1734              	
 1735 16b8 90160000 		.word	_EXTRC
 1736 16bc 02       	_BDIGS:	.byte  2
 1737 16bd 3C23     		.ascii "<#"
 1738 16bf 00       		.p2align 2 	
 1739              	BDIGS:
 1740 16c0 504700BF 		_NEST
 1741 16c4 15150000 		_ADR	PAD
 1742 16c8 2D120000 		_ADR	HLD
 1743 16cc E10C0000 		_ADR	STORE
 1744 16d0 030B0000 		_UNNEST
 1745              	
ARM GAS  forth.s 			page 71


 1746              	//    HOLD	( c -- )
 1747              	// 	Insert a character into the numeric output string.
 1748              	
 1749 16d4 BC160000 		.word	_BDIGS
 1750 16d8 04       	_HOLD:	.byte  4
 1751 16d9 484F4C44 		.ascii "HOLD"
 1752 16dd 0000BF   		.p2align 2 	
 1753              	HOLD:
 1754 16e0 504700BF 		_NEST
 1755 16e4 2D120000 		_ADR	HLD
 1756 16e8 F50C0000 		_ADR	AT
 1757 16ec D10E0000 		_ADR	ONEM
 1758 16f0 A10D0000 		_ADR	DUPP
 1759 16f4 2D120000 		_ADR	HLD
 1760 16f8 E10C0000 		_ADR	STORE
 1761 16fc 010D0000 		_ADR	CSTOR
 1762 1700 030B0000 		_UNNEST
 1763              	
 1764              	//    #	   ( u -- u )
 1765              	// 	Extract one digit from u and append the digit to output string.
 1766              	
 1767 1704 D8160000 		.word	_HOLD
 1768 1708 01       	_DIG:	.byte  1
 1769 1709 23       		.ascii "#"
 1770 170a 00BF     		.p2align 2 	
 1771              	DIG:
 1772 170c 504700BF 		_NEST
 1773 1710 BD110000 		_ADR	BASE
 1774 1714 F50C0000 		_ADR	AT
 1775 1718 99160000 		_ADR	EXTRC
 1776 171c E1160000 		_ADR	HOLD
 1777 1720 030B0000 		_UNNEST
 1778              	
 1779              	//    #S	  ( u -- 0 )
 1780              	// 	Convert u until all digits are added to the output string.
 1781              	
 1782 1724 08170000 		.word	_DIG
 1783 1728 02       	_DIGS:	.byte  2
 1784 1729 2353     		.ascii "#S"
 1785 172b 00       		.p2align 2 	
 1786              	DIGS:
 1787 172c 504700BF 		_NEST
 1788              	DIGS1:
 1789 1730 0D170000 	    _ADR	DIG
 1790 1734 A10D0000 		_ADR	DUPP
 1791 1738 AF0C0000 		_QBRAN 	DIGS2
 1791      48170000 
 1792 1740 C30C0000 		_BRAN	DIGS1
 1792      30170000 
 1793              	DIGS2:
 1794 1748 030B0000 		  _UNNEST
 1795              	
 1796              	//    SIGN	( n -- )
 1797              	// 	Add a minus sign to the numeric output string.
 1798              	
 1799 174c 28170000 		.word	_DIGS
 1800 1750 04       	_SIGN:	.byte  4
ARM GAS  forth.s 			page 72


 1801 1751 5349474E 		.ascii "SIGN"
 1802 1755 0000BF   		.p2align 2 	
 1803              	SIGN:
 1804 1758 504700BF 		_NEST
 1805 175c D50D0000 		_ADR	ZLESS
 1806 1760 AF0C0000 		_QBRAN	SIGN1
 1806      74170000 
 1807 1768 6D0C0000 		_DOLIT '-'
 1807      2D000000 
 1808 1770 E1160000 		_ADR	HOLD
 1809              	SIGN1:
 1810 1774 030B0000 		  _UNNEST
 1811              	
 1812              	//    #>	  ( w -- b u )
 1813              	// 	Prepare the output word to be TYPE'd.
 1814              	
 1815 1778 50170000 		.word	_SIGN
 1816 177c 02       	_EDIGS:	.byte  2
 1817 177d 233E     		.ascii "#>"
 1818 177f 00       		.p2align 2 	
 1819              	EDIGS:
 1820 1780 504700BF 		_NEST
 1821 1784 910D0000 		_ADR	DROP
 1822 1788 2D120000 		_ADR	HLD
 1823 178c F50C0000 		_ADR	AT
 1824 1790 15150000 		_ADR	PAD
 1825 1794 C50D0000 		_ADR	OVER
 1826 1798 750E0000 		_ADR	SUBB
 1827 179c 030B0000 		_UNNEST
 1828              	
 1829              	//    str	 ( n -- b u )
 1830              	// 	Convert a signed integer to a numeric string.
 1831              	
 1832              	// 	.word	_EDIGS
 1833              	// _STRR	.byte  3
 1834              	// 	.ascii "str"
 1835              	// 	.p2align 2 	
 1836              	STRR:
 1837 17a0 504700BF 		_NEST
 1838 17a4 A10D0000 		_ADR	DUPP
 1839 17a8 490D0000 		_ADR	TOR
 1840 17ac 2D100000 		_ADR	ABSS
 1841 17b0 C1160000 		_ADR	BDIGS
 1842 17b4 2D170000 		_ADR	DIGS
 1843 17b8 210D0000 		_ADR	RFROM
 1844 17bc 59170000 		_ADR	SIGN
 1845 17c0 81170000 		_ADR	EDIGS
 1846 17c4 030B0000 		_UNNEST
 1847              	
 1848              	//    HEX	 ( -- )
 1849              	// 	Use radix 16 as base for numeric conversions.
 1850              	
 1851 17c8 7C170000 		.word	_EDIGS
 1852 17cc 03       	_HEX:	.byte  3
 1853 17cd 484558   		.ascii "HEX"
 1854              		.p2align 2 	
 1855              	HEX:
ARM GAS  forth.s 			page 73


 1856 17d0 504700BF 		_NEST
 1857 17d4 6D0C0000 		_DOLIT 16
 1857      10000000 
 1858 17dc BD110000 		_ADR	BASE
 1859 17e0 E10C0000 		_ADR	STORE
 1860 17e4 030B0000 		_UNNEST
 1861              	
 1862              	//    DECIMAL	( -- )
 1863              	// 	Use radix 10 as base for numeric conversions.
 1864              	
 1865 17e8 CC170000 		.word	_HEX
 1866 17ec 07       	_DECIM:	.byte  7
 1867 17ed 44454349 		.ascii "DECIMAL"
 1867      4D414C
 1868              		.p2align 2 	
 1869              	DECIM:
 1870 17f4 504700BF 		_NEST
 1871 17f8 6D0C0000 		_DOLIT 10
 1871      0A000000 
 1872 1800 BD110000 		_ADR	BASE
 1873 1804 E10C0000 		_ADR	STORE
 1874 1808 030B0000 		_UNNEST
 1875              	
 1876              	// **************************************************************************
 1877              	//  Numeric input, single precision
 1878              	
 1879              	//    DIGIT?	( c base -- u t )
 1880              	// 	Convert a character to its numeric value. A flag indicates success.
 1881              	
 1882 180c EC170000 		.word	_DECIM
 1883 1810 06       	_DIGTQ:	.byte  6
 1884 1811 44494749 		.ascii "DIGIT?"
 1884      543F
 1885 1817 00       		.p2align 2 	
 1886              	DIGTQ:
 1887 1818 504700BF 		_NEST
 1888 181c 490D0000 		_ADR	TOR
 1889 1820 6D0C0000 		_DOLIT 	'0'
 1889      30000000 
 1890 1828 750E0000 		_ADR	SUBB
 1891 182c 6D0C0000 		_DOLIT 9
 1891      09000000 
 1892 1834 C50D0000 		_ADR	OVER
 1893 1838 85100000 		_ADR	LESS
 1894 183c AF0C0000 		_QBRAN	DGTQ1
 1894      64180000 
 1895 1844 6D0C0000 		_DOLIT 7
 1895      07000000 
 1896 184c 750E0000 		_ADR	SUBB
 1897 1850 A10D0000 		_ADR	DUPP
 1898 1854 6D0C0000 		_DOLIT	10
 1898      0A000000 
 1899 185c 85100000 		_ADR	LESS
 1900 1860 F90D0000 		_ADR	ORR
 1901              	DGTQ1:
 1902 1864 A10D0000 		_ADR	DUPP
 1903 1868 210D0000 		_ADR	RFROM
ARM GAS  forth.s 			page 74


 1904 186c 6D100000 		_ADR	ULESS
 1905 1870 030B0000 		_UNNEST
 1906              	
 1907              	//    NUMBER?	( a -- n T | a F )
 1908              	// 	Convert a number word to integer. Push a flag on tos.
 1909              	
 1910 1874 10180000 		.word	_DIGTQ
 1911 1878 07       	_NUMBQ:	.byte  7
 1912 1879 4E554D42 		.ascii "NUMBER?"
 1912      45523F
 1913              		.p2align 2 	
 1914              	NUMBQ:
 1915 1880 504700BF 		_NEST
 1916 1884 BD110000 		_ADR	BASE
 1917 1888 F50C0000 		_ADR	AT
 1918 188c 490D0000 		_ADR	TOR
 1919 1890 6D0C0000 		_DOLIT	0
 1919      00000000 
 1920 1898 C50D0000 		_ADR	OVER
 1921 189c 25110000 		_ADR	COUNT
 1922 18a0 C50D0000 		_ADR	OVER
 1923 18a4 150D0000 		_ADR	CAT
 1924 18a8 6D0C0000 		_DOLIT '$'
 1924      24000000 
 1925 18b0 55100000 		_ADR	EQUAL
 1926 18b4 AF0C0000 		_QBRAN	NUMQ1
 1926      D0180000 
 1927 18bc D1170000 		_ADR	HEX
 1928 18c0 B10D0000 		_ADR	SWAP
 1929 18c4 C10E0000 		_ADR	ONEP
 1930 18c8 B10D0000 		_ADR	SWAP
 1931 18cc D10E0000 		_ADR	ONEM
 1932              	NUMQ1:
 1933 18d0 C50D0000 		_ADR	OVER
 1934 18d4 150D0000 		_ADR	CAT
 1935 18d8 6D0C0000 		_DOLIT	'-'
 1935      2D000000 
 1936 18e0 55100000 		_ADR	EQUAL
 1937 18e4 490D0000 		_ADR	TOR
 1938 18e8 B10D0000 		_ADR	SWAP
 1939 18ec 350D0000 		_ADR	RAT
 1940 18f0 750E0000 		_ADR	SUBB
 1941 18f4 B10D0000 		_ADR	SWAP
 1942 18f8 350D0000 		_ADR	RAT
 1943 18fc 650E0000 		_ADR	PLUS
 1944 1900 750F0000 		_ADR	QDUP
 1945 1904 AF0C0000 		_QBRAN	NUMQ6
 1945      98190000 
 1946 190c D10E0000 		_ADR	ONEM
 1947 1910 490D0000 		_ADR	TOR
 1948              	NUMQ2:
 1949 1914 A10D0000 		_ADR	DUPP
 1950 1918 490D0000 		_ADR	TOR
 1951 191c 150D0000 		_ADR	CAT
 1952 1920 BD110000 		_ADR	BASE
 1953 1924 F50C0000 		_ADR	AT
 1954 1928 19180000 		_ADR	DIGTQ
ARM GAS  forth.s 			page 75


 1955 192c AF0C0000 		_QBRAN	NUMQ4
 1955      7C190000 
 1956 1934 B10D0000 		_ADR	SWAP
 1957 1938 BD110000 		_ADR	BASE
 1958 193c F50C0000 		_ADR	AT
 1959 1940 850E0000 		_ADR	STAR
 1960 1944 650E0000 		_ADR	PLUS
 1961 1948 210D0000 		_ADR	RFROM
 1962 194c C10E0000 		_ADR	ONEP
 1963 1950 910C0000 		_DONXT	NUMQ2
 1963      14190000 
 1964 1958 350D0000 		_ADR	RAT
 1965 195c B10D0000 		_ADR	SWAP
 1966 1960 910D0000 		_ADR	DROP
 1967 1964 AF0C0000 		_QBRAN	NUMQ3
 1967      70190000 
 1968 196c 1D100000 		_ADR	NEGAT
 1969              	NUMQ3:
 1970 1970 B10D0000 		_ADR	SWAP
 1971 1974 C30C0000 		_BRAN	NUMQ5
 1971      94190000 
 1972              	NUMQ4:
 1973 197c 210D0000 		_ADR	RFROM
 1974 1980 210D0000 		_ADR	RFROM
 1975 1984 B10F0000 		_ADR	DDROP
 1976 1988 B10F0000 		_ADR	DDROP
 1977 198c 6D0C0000 		_DOLIT	0
 1977      00000000 
 1978              	NUMQ5:
 1979 1994 A10D0000 		_ADR	DUPP
 1980              	NUMQ6:
 1981 1998 210D0000 		_ADR	RFROM
 1982 199c B10F0000 		_ADR	DDROP
 1983 19a0 210D0000 		_ADR	RFROM
 1984 19a4 BD110000 		_ADR	BASE
 1985 19a8 E10C0000 		_ADR	STORE
 1986 19ac 030B0000 		_UNNEST
 1987              	
 1988              	// **************************************************************************
 1989              	//  Basic I/O
 1990              	
 1991              	//    KEY	 ( -- c )
 1992              	// 	Wait for and return an input character.
 1993              	
 1994 19b0 78180000 		.word	_NUMBQ
 1995 19b4 03       	_KEY:	.byte  3
 1996 19b5 4B4559   		.ascii "KEY"
 1997              		.p2align 2 	
 1998              	KEY:
 1999 19b8 504700BF 		_NEST
 2000              	KEY1:
 2001 19bc 150C0000 		_ADR	QRX
 2002 19c0 AF0C0000 		_QBRAN	KEY1
 2002      BC190000 
 2003 19c8 030B0000 		_UNNEST
 2004              	
 2005              	//    SPACE	( -- )
ARM GAS  forth.s 			page 76


 2006              	// 	Send the blank character to the output device.
 2007              	
 2008 19cc B4190000 		.word	_KEY
 2009 19d0 05       	_SPACE:	.byte  5
 2010 19d1 53504143 		.ascii "SPACE"
 2010      45
 2011 19d6 00BF     		.p2align 2 	
 2012              	SPACE:
 2013 19d8 504700BF 		_NEST
 2014 19dc 210F0000 		_ADR	BLANK
 2015 19e0 490C0000 		_ADR	EMIT
 2016 19e4 030B0000 		_UNNEST
 2017              	
 2018              	//    SPACES	( +n -- )
 2019              	// 	Send n spaces to the output device.
 2020              	
 2021 19e8 D0190000 		.word	_SPACE
 2022 19ec 06       	_SPACS:	.byte  6
 2023 19ed 53504143 		.ascii "SPACES"
 2023      4553
 2024 19f3 00       		.p2align 2 	
 2025              	SPACS:
 2026 19f4 504700BF 		_NEST
 2027 19f8 6D0C0000 		_DOLIT	0
 2027      00000000 
 2028 1a00 B5100000 		_ADR	MAX
 2029 1a04 490D0000 		_ADR	TOR
 2030 1a08 C30C0000 		_BRAN	CHAR2
 2030      141A0000 
 2031              	CHAR1:
 2032 1a10 D9190000 		_ADR	SPACE
 2033              	CHAR2:
 2034 1a14 910C0000 		_DONXT	CHAR1
 2034      101A0000 
 2035 1a1c 030B0000 		_UNNEST
 2036              	
 2037              	//    TYPE	( b u -- )
 2038              	// 	Output u characters from b.
 2039              	
 2040 1a20 EC190000 		.word	_SPACS
 2041 1a24 04       	_TYPEE:	.byte	4
 2042 1a25 54595045 		.ascii "TYPE"
 2043 1a29 0000BF   		.p2align 2 	
 2044              	TYPEE:
 2045 1a2c 504700BF 		_NEST
 2046 1a30 490D0000 		_ADR  TOR   // ( a+1 -- R: u )
 2047 1a34 C30C0000 		_BRAN	TYPE2
 2047      481A0000 
 2048              	TYPE1:  
 2049 1a3c 25110000 		_ADR  COUNT
 2050 1a40 65140000 		_ADR TCHAR
 2051 1a44 490C0000 		_ADR EMIT
 2052              	TYPE2:  
 2053 1a48 910C0000 		_DONXT	TYPE1
 2053      3C1A0000 
 2054 1a50 910D0000 		_ADR	DROP
 2055 1a54 030B0000 		_UNNEST
ARM GAS  forth.s 			page 77


 2056              	
 2057              	//    CR	  ( -- )
 2058              	// 	Output a carriage return and a line feed.
 2059              	
 2060 1a58 241A0000 		.word	_TYPEE
 2061 1a5c 02       	_CR:	.byte  2
 2062 1a5d 4352     		.ascii "CR"
 2063 1a5f 00       		.p2align 2 	
 2064              	CR:
 2065 1a60 504700BF 		_NEST
 2066 1a64 6D0C0000 		_DOLIT	CRR
 2066      0D000000 
 2067 1a6c 490C0000 		_ADR	EMIT
 2068 1a70 6D0C0000 		_DOLIT	LF
 2068      0A000000 
 2069 1a78 490C0000 		_ADR	EMIT
 2070 1a7c 030B0000 		_UNNEST
 2071              	
 2072              	//    do_$	( -- a )
 2073              	// 	Return the address of a compiled string.
 2074              	//  adjust return address to skip over it.
 2075              	
 2076              	// 	.word	_CR
 2077              	// _DOSTR	.byte  COMPO+3
 2078              	// 	.ascii "do$$"
 2079              	// 	.p2align 2 	
 2080              	DOSTR:
 2081 1a80 504700BF 		_NEST     
 2082              	/* compiled string address is 2 levels deep */
 2083 1a84 210D0000 		_ADR	RFROM	// { -- a1 }
 2084 1a88 210D0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2085 1a8c A10D0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2086 1a90 25110000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2087 1a94 650E0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2088 1a98 49140000 		_ADR	ALGND	//  end of string
 2089              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2090 1a9c 490D0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2091 1aa0 B10D0000 		_ADR	SWAP	//  count tugged
 2092 1aa4 490D0000 		_ADR	TOR     //  ( -- a2) is string address
 2093 1aa8 030B0000 		_UNNEST
 2094              	
 2095              	//    $"|	( -- a )
 2096              	// 	Run time routine compiled by _". Return address of a compiled string.
 2097              	
 2098              	// 	.word	_DOSTR
 2099              	// _STRQP	.byte  COMPO+3
 2100              	// 	.ascii "$\"|"
 2101              	// 	.p2align 2 	
 2102              	STRQP:
 2103 1aac 504700BF 		_NEST
 2104 1ab0 811A0000 		_ADR	DOSTR
 2105 1ab4 030B0000 		_UNNEST			// force a call to dostr
 2106              	
 2107              	//    .$	( a -- )
 2108              	// 	Run time routine of ." . Output a compiled string.
 2109              	
 2110              	// 	.word	_STRQP
ARM GAS  forth.s 			page 78


 2111              	// _DOTST	.byte  COMPO+2
 2112              	// 	.ascii ".$$"
 2113              	// 	.p2align 2 	
 2114              	DOTST:
 2115 1ab8 504700BF 		_NEST
 2116 1abc 25110000 		_ADR	COUNT // ( -- a+1 c )
 2117 1ac0 2D1A0000 		_ADR	TYPEE
 2118 1ac4 030B0000 		_UNNEST
 2119              	
 2120              	//    ."|	( -- )
 2121              	// 	Run time routine of ." . Output a compiled string.
 2122              	
 2123              	// 	.word	_DOTST
 2124              	// _DOTQP	.byte  COMPO+3
 2125              	// 	.ascii ".""|"
 2126              	// 	.p2align 2 	
 2127              	DOTQP:
 2128 1ac8 504700BF 		_NEST
 2129 1acc 811A0000 		_ADR	DOSTR
 2130 1ad0 B91A0000 		_ADR	DOTST
 2131 1ad4 030B0000 		_UNNEST
 2132              	
 2133              	//    .R	  ( n +n -- )
 2134              	// 	Display an integer in a field of n columns, right justified.
 2135              	
 2136 1ad8 5C1A0000 		.word	_CR
 2137 1adc 02       	_DOTR:	.byte  2
 2138 1add 2E52     		.ascii ".R"
 2139 1adf 00       		.p2align 2 	
 2140              	DOTR:
 2141 1ae0 504700BF 		_NEST
 2142 1ae4 490D0000 		_ADR	TOR
 2143 1ae8 A1170000 		_ADR	STRR
 2144 1aec 210D0000 		_ADR	RFROM
 2145 1af0 C50D0000 		_ADR	OVER
 2146 1af4 750E0000 		_ADR	SUBB
 2147 1af8 F5190000 		_ADR	SPACS
 2148 1afc 2D1A0000 		_ADR	TYPEE
 2149 1b00 030B0000 		_UNNEST
 2150              	
 2151              	//    U.R	 ( u +n -- )
 2152              	// 	Display an unsigned integer in n column, right justified.
 2153              	
 2154 1b04 DC1A0000 		.word	_DOTR
 2155 1b08 03       	_UDOTR:	.byte  3
 2156 1b09 552E52   		.ascii "U.R"
 2157              		.p2align 2 	
 2158              	UDOTR:
 2159 1b0c 504700BF 		_NEST
 2160 1b10 490D0000 		_ADR	TOR
 2161 1b14 C1160000 		_ADR	BDIGS
 2162 1b18 2D170000 		_ADR	DIGS
 2163 1b1c 81170000 		_ADR	EDIGS
 2164 1b20 210D0000 		_ADR	RFROM
 2165 1b24 C50D0000 		_ADR	OVER
 2166 1b28 750E0000 		_ADR	SUBB
 2167 1b2c F5190000 		_ADR	SPACS
ARM GAS  forth.s 			page 79


 2168 1b30 2D1A0000 		_ADR	TYPEE
 2169 1b34 030B0000 		_UNNEST
 2170              	
 2171              	//    U.	  ( u -- )
 2172              	// 	Display an unsigned integer in free format.
 2173              	
 2174 1b38 081B0000 		.word	_UDOTR
 2175 1b3c 02       	_UDOT:	.byte  2
 2176 1b3d 552E     		.ascii "U."
 2177 1b3f 00       		.p2align 2 	
 2178              	UDOT:
 2179 1b40 504700BF 		_NEST
 2180 1b44 C1160000 		_ADR	BDIGS
 2181 1b48 2D170000 		_ADR	DIGS
 2182 1b4c 81170000 		_ADR	EDIGS
 2183 1b50 D9190000 		_ADR	SPACE
 2184 1b54 2D1A0000 		_ADR	TYPEE
 2185 1b58 030B0000 		_UNNEST
 2186              	
 2187              	//    .	   ( w -- )
 2188              	// 	Display an integer in free format, preceeded by a space.
 2189              	
 2190 1b5c 3C1B0000 		.word	_UDOT
 2191 1b60 01       	_DOT:	.byte  1
 2192 1b61 2E       		.ascii "."
 2193 1b62 00BF     		.p2align 2 	
 2194              	DOT:
 2195 1b64 504700BF 		_NEST
 2196 1b68 BD110000 		_ADR	BASE
 2197 1b6c F50C0000 		_ADR	AT
 2198 1b70 6D0C0000 		_DOLIT 10
 2198      0A000000 
 2199 1b78 0D0E0000 		_ADR	XORR			// ?decimal
 2200 1b7c AF0C0000 		_QBRAN	DOT1
 2200      8C1B0000 
 2201 1b84 411B0000 		_ADR	UDOT
 2202 1b88 030B0000 		_UNNEST			// no,display unsigned
 2203              	DOT1:
 2204 1b8c A1170000 	    _ADR	STRR
 2205 1b90 D9190000 		_ADR	SPACE
 2206 1b94 2D1A0000 		_ADR	TYPEE
 2207 1b98 030B0000 		_UNNEST			// yes, display signed
 2208              	
 2209              	//    ?	   ( a -- )
 2210              	// 	Display the contents in a memory cell.
 2211              	
 2212 1b9c 601B0000 		.word	_DOT
 2213 1ba0 01       	_QUEST:	.byte  1
 2214 1ba1 3F       		.ascii "?"
 2215 1ba2 00BF     		.p2align 2 	
 2216              	QUEST:
 2217 1ba4 504700BF 		_NEST
 2218 1ba8 F50C0000 		_ADR	AT
 2219 1bac 651B0000 		_ADR	DOT
 2220 1bb0 030B0000 		_UNNEST
 2221              	
 2222              	// **************************************************************************
ARM GAS  forth.s 			page 80


 2223              	//  Parsing
 2224              	
 2225              	//    parse	( b u c -- b u delta //  string> )
 2226              	// 	Scan word delimited by c. Return found string and its offset.
 2227              	
 2228              	// 	.word	_QUEST
 2229              	// _PARS	.byte  5
 2230              	// 	.ascii "parse"
 2231              	// 	.p2align 2 	
 2232              	PARS:
 2233 1bb4 504700BF 		_NEST
 2234 1bb8 C7110000 		_ADR	TEMP
 2235 1bbc E10C0000 		_ADR	STORE
 2236 1bc0 C50D0000 		_ADR	OVER
 2237 1bc4 490D0000 		_ADR	TOR
 2238 1bc8 A10D0000 		_ADR	DUPP
 2239 1bcc AF0C0000 		_QBRAN	PARS8
 2239      C81C0000 
 2240 1bd4 D10E0000 		_ADR	ONEM
 2241 1bd8 C7110000 		_ADR	TEMP
 2242 1bdc F50C0000 		_ADR	AT
 2243 1be0 210F0000 		_ADR	BLANK
 2244 1be4 55100000 		_ADR	EQUAL
 2245 1be8 AF0C0000 		_QBRAN	PARS3
 2245      3C1C0000 
 2246 1bf0 490D0000 		_ADR	TOR
 2247              	PARS1:
 2248 1bf4 210F0000 		_ADR	BLANK
 2249 1bf8 C50D0000 		_ADR	OVER
 2250 1bfc 150D0000 		_ADR	CAT			// skip leading blanks 
 2251 1c00 750E0000 		_ADR	SUBB
 2252 1c04 D50D0000 		_ADR	ZLESS
 2253 1c08 09100000 		_ADR	INVER
 2254 1c0c AF0C0000 		_QBRAN	PARS2
 2254      381C0000 
 2255 1c14 C10E0000 		_ADR	ONEP
 2256 1c18 910C0000 		_DONXT	PARS1
 2256      F41B0000 
 2257 1c20 210D0000 		_ADR	RFROM
 2258 1c24 910D0000 		_ADR	DROP
 2259 1c28 6D0C0000 		_DOLIT	0
 2259      00000000 
 2260 1c30 A10D0000 		_ADR	DUPP
 2261 1c34 030B0000 		_UNNEST
 2262              	PARS2:
 2263 1c38 210D0000 		_ADR	RFROM
 2264              	PARS3:
 2265 1c3c C50D0000 		_ADR	OVER
 2266 1c40 B10D0000 		_ADR	SWAP
 2267 1c44 490D0000 		_ADR	TOR
 2268              	PARS4:
 2269 1c48 C7110000 		_ADR	TEMP
 2270 1c4c F50C0000 		_ADR	AT
 2271 1c50 C50D0000 		_ADR	OVER
 2272 1c54 150D0000 		_ADR	CAT
 2273 1c58 750E0000 		_ADR	SUBB			// scan for delimiter
 2274 1c5c C7110000 		_ADR	TEMP
ARM GAS  forth.s 			page 81


 2275 1c60 F50C0000 		_ADR	AT
 2276 1c64 210F0000 		_ADR	BLANK
 2277 1c68 55100000 		_ADR	EQUAL
 2278 1c6c AF0C0000 		_QBRAN	PARS5
 2278      781C0000 
 2279 1c74 D50D0000 		_ADR	ZLESS
 2280              	PARS5:
 2281 1c78 AF0C0000 		_QBRAN	PARS6
 2281      9C1C0000 
 2282 1c80 C10E0000 		_ADR	ONEP
 2283 1c84 910C0000 		_DONXT	PARS4
 2283      481C0000 
 2284 1c8c A10D0000 		_ADR	DUPP
 2285 1c90 490D0000 		_ADR	TOR
 2286 1c94 C30C0000 		_BRAN	PARS7
 2286      B01C0000 
 2287              	PARS6:
 2288 1c9c 210D0000 		_ADR	RFROM
 2289 1ca0 910D0000 		_ADR	DROP
 2290 1ca4 A10D0000 		_ADR	DUPP
 2291 1ca8 C10E0000 		_ADR	ONEP
 2292 1cac 490D0000 		_ADR	TOR
 2293              	PARS7:
 2294 1cb0 C50D0000 		_ADR	OVER
 2295 1cb4 750E0000 		_ADR	SUBB
 2296 1cb8 210D0000 		_ADR	RFROM
 2297 1cbc 210D0000 		_ADR	RFROM
 2298 1cc0 750E0000 		_ADR	SUBB
 2299 1cc4 030B0000 		_UNNEST
 2300              	PARS8:
 2301 1cc8 C50D0000 		_ADR	OVER
 2302 1ccc 210D0000 		_ADR	RFROM
 2303 1cd0 750E0000 		_ADR	SUBB
 2304 1cd4 030B0000 		_UNNEST
 2305              	
 2306              	//    PARSE	( c -- b u //  string> )
 2307              	// 	Scan input stream and return counted string delimited by c.
 2308              	
 2309 1cd8 A01B0000 		.word	_QUEST
 2310 1cdc 05       	_PARSE:	.byte  5
 2311 1cdd 50415253 		.ascii "PARSE"
 2311      45
 2312 1ce2 00BF     		.p2align 2 	
 2313              	PARSE:
 2314 1ce4 504700BF 		_NEST
 2315 1ce8 490D0000 		_ADR	TOR
 2316 1cec 35150000 		_ADR	TIB
 2317 1cf0 F1110000 		_ADR	INN
 2318 1cf4 F50C0000 		_ADR	AT
 2319 1cf8 650E0000 		_ADR	PLUS			// current input buffer pointer
 2320 1cfc 05120000 		_ADR	NTIB
 2321 1d00 F50C0000 		_ADR	AT
 2322 1d04 F1110000 		_ADR	INN
 2323 1d08 F50C0000 		_ADR	AT
 2324 1d0c 750E0000 		_ADR	SUBB			// remaining count
 2325 1d10 210D0000 		_ADR	RFROM
 2326 1d14 B51B0000 		_ADR	PARS
ARM GAS  forth.s 			page 82


 2327 1d18 F1110000 		_ADR	INN
 2328 1d1c DD100000 		_ADR	PSTOR
 2329 1d20 030B0000 		_UNNEST
 2330              	
 2331              	//    .(	  ( -- )
 2332              	// 	Output following string up to next ) .
 2333              	
 2334 1d24 DC1C0000 		.word	_PARSE
 2335 1d28 82       	_DOTPR:	.byte  IMEDD+2
 2336 1d29 2E28     		.ascii ".("
 2337 1d2b 00       		.p2align 2 	
 2338              	DOTPR:
 2339 1d2c 504700BF 		_NEST
 2340 1d30 6D0C0000 		_DOLIT	')'
 2340      29000000 
 2341 1d38 E51C0000 		_ADR	PARSE
 2342 1d3c 2D1A0000 		_ADR	TYPEE
 2343 1d40 030B0000 		_UNNEST
 2344              	
 2345              	//    (	   ( -- )
 2346              	// 	Ignore following string up to next ) . A comment.
 2347              	
 2348 1d44 281D0000 		.word	_DOTPR
 2349 1d48 81       	_PAREN:	.byte  IMEDD+1
 2350 1d49 28       		.ascii "("
 2351 1d4a 00BF     		.p2align 2 	
 2352              	PAREN:
 2353 1d4c 504700BF 		_NEST
 2354 1d50 6D0C0000 		_DOLIT	')'
 2354      29000000 
 2355 1d58 E51C0000 		_ADR	PARSE
 2356 1d5c B10F0000 		_ADR	DDROP
 2357 1d60 030B0000 		_UNNEST
 2358              	
 2359              	//    \	   ( -- )
 2360              	// 	Ignore following text till the end of line.
 2361              	
 2362 1d64 481D0000 		.word	_PAREN
 2363 1d68 81       	_BKSLA:	.byte  IMEDD+1
 2364 1d69 5C       		.byte	'\\'
 2365 1d6a 00BF     		.p2align 2 	
 2366              	BKSLA:
 2367 1d6c 504700BF 		_NEST
 2368 1d70 05120000 		_ADR	NTIB
 2369 1d74 F50C0000 		_ADR	AT
 2370 1d78 F1110000 		_ADR	INN
 2371 1d7c E10C0000 		_ADR	STORE
 2372 1d80 030B0000 		_UNNEST
 2373              	
 2374              	//    CHAR	( -- c )
 2375              	// 	Parse next word and return its first character.
 2376              	
 2377 1d84 681D0000 		.word	_BKSLA
 2378 1d88 04       	_CHAR:	.byte  4
 2379 1d89 43484152 		.ascii "CHAR"
 2380 1d8d 0000BF   		.p2align 2 	
 2381              	CHAR:
ARM GAS  forth.s 			page 83


 2382 1d90 504700BF 		_NEST
 2383 1d94 210F0000 		_ADR	BLANK
 2384 1d98 E51C0000 		_ADR	PARSE
 2385 1d9c 910D0000 		_ADR	DROP
 2386 1da0 150D0000 		_ADR	CAT
 2387 1da4 030B0000 		_UNNEST
 2388              	
 2389              	//    WORD	( c -- a //  string> )
 2390              	// 	Parse a word from input stream and copy it to code dictionary.
 2391              	
 2392 1da8 881D0000 		.word	_CHAR
 2393 1dac 04       	_WORDD:	.byte  4
 2394 1dad 574F5244 		.ascii "WORD"
 2395 1db1 0000BF   		.p2align 2 	
 2396              	WORDD:
 2397 1db4 504700BF 		_NEST
 2398 1db8 E51C0000 		_ADR	PARSE
 2399 1dbc FD140000 		_ADR	HERE
 2400 1dc0 010F0000 		_ADR	CELLP
 2401 1dc4 F5150000 		_ADR	PACKS
 2402 1dc8 030B0000 		_UNNEST
 2403              	
 2404              	//    TOKEN	( -- a //  string> )
 2405              	// 	Parse a word from input stream and copy it to name dictionary.
 2406              	
 2407 1dcc AC1D0000 		.word	_WORDD
 2408 1dd0 05       	_TOKEN:	.byte  5
 2409 1dd1 544F4B45 		.ascii "TOKEN"
 2409      4E
 2410 1dd6 00BF     		.p2align 2 	
 2411              	TOKEN:
 2412 1dd8 504700BF 		_NEST
 2413 1ddc 210F0000 		_ADR	BLANK
 2414 1de0 B51D0000 		_ADR	WORDD
 2415 1de4 030B0000 		_UNNEST
 2416              	
 2417              	// **************************************************************************
 2418              	//  Dictionary search
 2419              	
 2420              	//    NAME>	( na -- ca )
 2421              	// 	Return a code address given a name address.
 2422              	
 2423 1de8 D01D0000 		.word	_TOKEN
 2424 1dec 05       	_NAMET:	.byte  5
 2425 1ded 4E414D45 		.ascii "NAME>"
 2425      3E
 2426 1df2 00BF     		.p2align 2 	
 2427              	NAMET:
 2428 1df4 504700BF 		_NEST
 2429 1df8 25110000 		_ADR	COUNT
 2430 1dfc 6D0C0000 		_DOLIT	0x1F
 2430      1F000000 
 2431 1e04 E50D0000 		_ADR	ANDD
 2432 1e08 650E0000 		_ADR	PLUS
 2433 1e0c 49140000 		_ADR	ALGND
 2434 1e10 030B0000 		_UNNEST
 2435              	
ARM GAS  forth.s 			page 84


 2436              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2437              	// 	Compare u bytes in two strings. Return 0 if identical.
 2438              	//
 2439              	//  Picatout 2020-12-01, 
 2440              	//      Because of problem with .align directive that
 2441              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2442              	// 		words  to do a byte by byte comparison. 
 2443              	//
 2444 1e14 EC1D0000 		.word	_NAMET
 2445 1e18 05       	_SAMEQ:	.byte  5
 2446 1e19 53414D45 		.ascii "SAME?"
 2446      3F
 2447 1e1e 00BF     		.p2align 2	
 2448              	SAMEQ:
 2449 1e20 504700BF 		_NEST
 2450 1e24 490D0000 		_ADR	TOR
 2451 1e28 C30C0000 		_BRAN	SAME2
 2451      6C1E0000 
 2452              	SAME1:
 2453 1e30 C50D0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2454 1e34 350D0000 		_ADR	RAT   // a1 a2 a1 u 
 2455 1e38 650E0000 		_ADR	PLUS  // a1 a2 a1+u 
 2456 1e3c 150D0000 		_ADR	CAT	   // a1 a2 c1    		
 2457 1e40 C50D0000 		_ADR	OVER  // a1 a2 c1 a2 
 2458 1e44 350D0000 		_ADR	RAT    
 2459 1e48 650E0000 		_ADR	PLUS    
 2460 1e4c 150D0000 		_ADR	CAT	  // a1 a2 c1 c2
 2461 1e50 750E0000 		_ADR	SUBB  
 2462 1e54 750F0000 		_ADR	QDUP
 2463 1e58 AF0C0000 		_QBRAN	SAME2
 2463      6C1E0000 
 2464 1e60 210D0000 		_ADR	RFROM
 2465 1e64 910D0000 		_ADR	DROP
 2466 1e68 030B0000 		_UNNEST	// strings not equal
 2467              	SAME2:
 2468 1e6c 910C0000 		_DONXT	SAME1
 2468      301E0000 
 2469 1e74 6D0C0000 		_DOLIT	0
 2469      00000000 
 2470 1e7c 030B0000 		_UNNEST	// strings equal
 2471              	
 2472              	//    find	( a na -- ca na | a F )
 2473              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2474              	
 2475              	//  Picatout 2020-12-01,  
 2476              	//		Modified from original. See comment for word "SAME?" 
 2477              	
 2478              	// 	.word	_SAMEQ
 2479              	// _FIND	.byte  4
 2480              	// 	.ascii "find"
 2481              	// 	.p2align 2 	
 2482              	FIND:
 2483 1e80 504700BF 		_NEST
 2484 1e84 B10D0000 		_ADR	SWAP			// na a	
 2485 1e88 25110000 		_ADR	COUNT			// na a+1 count
 2486 1e8c A10D0000 		_ADR	DUPP 
 2487 1e90 C7110000 		_ADR	TEMP
ARM GAS  forth.s 			page 85


 2488 1e94 E10C0000 		_ADR	STORE			// na a+1 count 
 2489 1e98 490D0000 		_ADR  TOR		// na a+1  R: count  
 2490 1e9c B10D0000 		_ADR	SWAP			// a+1 na
 2491              	FIND1:
 2492 1ea0 A10D0000 		_ADR	DUPP			// a+1 na na
 2493 1ea4 AF0C0000 		_QBRAN	FIND6	// end of vocabulary
 2493      F81E0000 
 2494 1eac A10D0000 		_ADR	DUPP			// a+1 na na
 2495 1eb0 150D0000 		_ADR	CAT			// a+1 na name1
 2496 1eb4 6D0C0000 		_DOLIT	MASKK
 2496      1FFFFFFF 
 2497 1ebc E50D0000 		_ADR	ANDD
 2498 1ec0 350D0000 		_ADR	RAT			// a+1 na name1 count 
 2499 1ec4 0D0E0000 		_ADR	XORR			// a+1 na,  same length?
 2500 1ec8 AF0C0000 		_QBRAN	FIND2
 2500      E01E0000 
 2501 1ed0 110F0000 		_ADR	CELLM			// a+1 la
 2502 1ed4 F50C0000 		_ADR	AT			// a+1 next_na
 2503 1ed8 C30C0000 		_BRAN	FIND1			// try next word
 2503      A01E0000 
 2504              	FIND2:   
 2505 1ee0 C10E0000 		_ADR	ONEP			// a+1 na+1
 2506 1ee4 C7110000 		_ADR	TEMP
 2507 1ee8 F50C0000 		_ADR	AT			// a+1 na+1 count
 2508 1eec 211E0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2509              	FIND3:	
 2510 1ef0 C30C0000 		_BRAN	FIND4
 2510      101F0000 
 2511              	FIND6:	
 2512 1ef8 210D0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2513 1efc 910D0000 		_ADR	DROP			// a+1 0
 2514 1f00 B10D0000 		_ADR	SWAP			// 0 a+1
 2515 1f04 D10E0000 		_ADR	ONEM			// 0 a
 2516 1f08 B10D0000 		_ADR	SWAP			// a 0 
 2517 1f0c 030B0000 		_UNNEST			// return without a match
 2518              	FIND4:	
 2519 1f10 AF0C0000 		_QBRAN	FIND5			// a+1 na+1
 2519      2C1F0000 
 2520 1f18 D10E0000 		_ADR	ONEM			// a+1 na
 2521 1f1c 110F0000 		_ADR	CELLM			// a+4 la
 2522 1f20 F50C0000 		_ADR	AT			// a+1 next_na
 2523 1f24 C30C0000 		_BRAN	FIND1			// compare next name
 2523      A01E0000 
 2524              	FIND5:	
 2525 1f2c 210D0000 		_ADR	RFROM			// a+1 na+1 count
 2526 1f30 910D0000 		_ADR	DROP			// a+1 na+1
 2527 1f34 B10D0000 		_ADR	SWAP			// na+1 a+1
 2528 1f38 910D0000 		_ADR	DROP			// na+1
 2529 1f3c D10E0000 		_ADR	ONEM			// na
 2530 1f40 A10D0000 		_ADR	DUPP			// na na
 2531 1f44 F51D0000 		_ADR	NAMET			// na ca
 2532 1f48 B10D0000 		_ADR	SWAP			// ca na
 2533 1f4c 030B0000 		_UNNEST			//  return with a match
 2534              	
 2535              	//    NAME?	( a -- ca na | a F )
 2536              	// 	Search all context vocabularies for a string.
 2537              	
ARM GAS  forth.s 			page 86


 2538 1f50 181E0000 		.word	_SAMEQ
 2539 1f54 05       	_NAMEQ:	.byte  5
 2540 1f55 4E414D45 		.ascii "NAME?"
 2540      3F
 2541 1f5a 00BF     		.p2align 2 	
 2542              	NAMEQ:
 2543 1f5c 504700BF 		_NEST
 2544 1f60 45120000 		_ADR	CNTXT
 2545 1f64 F50C0000 		_ADR	AT
 2546 1f68 811E0000 		_ADR	FIND
 2547 1f6c 030B0000 		_UNNEST
 2548              	
 2549              	// **************************************************************************
 2550              	//  Terminal input
 2551              	
 2552              	//    	  ( bot eot cur -- bot eot cur )
 2553              	// 	Backup the cursor by one character.
 2554              	
 2555              	// 	.word	_NAMEQ
 2556              	// _BKSP	.byte  2
 2557              	// 	.ascii "^H"
 2558              	// 	.p2align 2 	
 2559              	BKSP:
 2560 1f70 504700BF 		_NEST
 2561 1f74 490D0000 		_ADR	TOR
 2562 1f78 C50D0000 		_ADR	OVER
 2563 1f7c 210D0000 		_ADR	RFROM
 2564 1f80 B10D0000 		_ADR	SWAP
 2565 1f84 C50D0000 		_ADR	OVER
 2566 1f88 0D0E0000 		_ADR	XORR
 2567 1f8c AF0C0000 		_QBRAN	BACK1
 2567      B81F0000 
 2568 1f94 6D0C0000 		_DOLIT	BKSPP
 2568      08000000 
 2569 1f9c 490C0000 		_ADR	TECHO
 2570 1fa0 D10E0000 		_ADR	ONEM
 2571 1fa4 210F0000 		_ADR	BLANK
 2572 1fa8 490C0000 		_ADR	TECHO
 2573 1fac 6D0C0000 		_DOLIT	BKSPP
 2573      08000000 
 2574 1fb4 490C0000 		_ADR	TECHO
 2575              	BACK1:
 2576 1fb8 030B0000 		  _UNNEST
 2577              	
 2578              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2579              	// 	Accept and echo the key stroke and bump the cursor.
 2580              	
 2581              	// 	.word	_BKSP
 2582              	// _TAP	.byte  3
 2583              	// 	.ascii "TAP"
 2584              	// 	.p2align 2 	
 2585              	TAP:
 2586 1fbc 504700BF 		_NEST
 2587 1fc0 A10D0000 		_ADR	DUPP
 2588 1fc4 490C0000 		_ADR	TECHO
 2589 1fc8 C50D0000 		_ADR	OVER
 2590 1fcc 010D0000 		_ADR	CSTOR
ARM GAS  forth.s 			page 87


 2591 1fd0 C10E0000 		_ADR	ONEP
 2592 1fd4 030B0000 		_UNNEST
 2593              	
 2594              	//    kTAP	( bot eot cur c -- bot eot cur )
 2595              	// 	Process a key stroke, CR or backspace.
 2596              	
 2597              	// 	.word	_TAP
 2598              	// _KTAP	.byte  4
 2599              	// 	.ascii "kTAP"
 2600              	// 	.p2align 2 	
 2601              	KTAP:
 2602              	TTAP:
 2603 1fd8 504700BF 		_NEST
 2604 1fdc A10D0000 		_ADR	DUPP
 2605 1fe0 6D0C0000 		_DOLIT	CRR
 2605      0D000000 
 2606 1fe8 0D0E0000 		_ADR	XORR
 2607 1fec AF0C0000 		_QBRAN  KTAP2
 2607      1C200000 
 2608 1ff4 6D0C0000 		_DOLIT	BKSPP
 2608      08000000 
 2609 1ffc 0D0E0000 		_ADR	XORR
 2610 2000 AF0C0000 		_QBRAN	KTAP1
 2610      14200000 
 2611 2008 210F0000 		_ADR	BLANK
 2612 200c BD1F0000 		_ADR	TAP
 2613 2010 030B0000 		_UNNEST
 2614              	//	.word	0			// patch
 2615              	KTAP1:
 2616 2014 711F0000 		_ADR	BKSP
 2617 2018 030B0000 		_UNNEST
 2618              	KTAP2:
 2619 201c 910D0000 		_ADR	DROP
 2620 2020 B10D0000 		_ADR	SWAP
 2621 2024 910D0000 		_ADR	DROP
 2622 2028 A10D0000 		_ADR	DUPP
 2623 202c 030B0000 		_UNNEST
 2624              	
 2625              	//    ACCEPT	( b u -- b u )
 2626              	// 	Accept characters to input buffer. Return with actual count.
 2627              	
 2628 2030 541F0000 		.word	_NAMEQ
 2629 2034 06       	_ACCEP:	.byte  6
 2630 2035 41434345 		.ascii "ACCEPT"
 2630      5054
 2631 203b 00       		.p2align 2 	
 2632              	ACCEP:
 2633 203c 504700BF 		_NEST
 2634 2040 C50D0000 		_ADR	OVER
 2635 2044 650E0000 		_ADR	PLUS
 2636 2048 C50D0000 		_ADR	OVER
 2637              	ACCP1:
 2638 204c D90F0000 		_ADR	DDUP
 2639 2050 0D0E0000 		_ADR	XORR
 2640 2054 AF0C0000 		_QBRAN	ACCP4
 2640      94200000 
 2641 205c B9190000 		_ADR	KEY
ARM GAS  forth.s 			page 88


 2642 2060 A10D0000 		_ADR	DUPP
 2643 2064 210F0000 		_ADR	BLANK
 2644 2068 6D0C0000 		_DOLIT 127
 2644      7F000000 
 2645 2070 D1120000 		_ADR	WITHI
 2646 2074 AF0C0000 		_QBRAN	ACCP2
 2646      88200000 
 2647 207c BD1F0000 		_ADR	TAP
 2648 2080 C30C0000 		_BRAN	ACCP3
 2648      8C200000 
 2649              	ACCP2:
 2650 2088 D91F0000 		_ADR	KTAP
 2651              	ACCP3:	  
 2652 208c C30C0000 		_BRAN	ACCP1
 2652      4C200000 
 2653              	ACCP4:
 2654 2094 910D0000 		_ADR	DROP
 2655 2098 C50D0000 		_ADR	OVER
 2656 209c 750E0000 		_ADR	SUBB
 2657 20a0 030B0000 		_UNNEST
 2658              	
 2659              	//    QUERY	( -- )
 2660              	// 	Accept input stream to terminal input buffer.
 2661              	
 2662 20a4 34200000 		.word	_ACCEP
 2663 20a8 05       	_QUERY:	.byte  5
 2664 20a9 51554552 		.ascii "QUERY"
 2664      59
 2665 20ae 00BF     		.p2align 2 	
 2666              	QUERY:
 2667 20b0 504700BF 		_NEST
 2668 20b4 35150000 		_ADR	TIB
 2669 20b8 6D0C0000 		_DOLIT 80
 2669      50000000 
 2670 20c0 3D200000 		_ADR	ACCEP
 2671 20c4 05120000 		_ADR	NTIB
 2672 20c8 E10C0000 		_ADR	STORE
 2673 20cc 910D0000 		_ADR	DROP
 2674 20d0 6D0C0000 		_DOLIT	0
 2674      00000000 
 2675 20d8 F1110000 		_ADR	INN
 2676 20dc E10C0000 		_ADR	STORE
 2677 20e0 030B0000 		_UNNEST
 2678              	
 2679              	// **************************************************************************
 2680              	//  Error handling
 2681              	
 2682              	//    ABORT	( a -- )
 2683              	// 	Reset data stack and jump to QUIT.
 2684              	
 2685 20e4 A8200000 		.word	_QUERY
 2686 20e8 05       	_ABORT:	.byte  5
 2687 20e9 41424F52 		.ascii "ABORT"
 2687      54
 2688 20ee 00BF     		.p2align 2 	
 2689              	ABORT:
 2690 20f0 504700BF 		_NEST
ARM GAS  forth.s 			page 89


 2691              	ABORT1:
 2692 20f4 D9190000 		_ADR	SPACE
 2693 20f8 25110000 		_ADR	COUNT
 2694 20fc 2D1A0000 		_ADR	TYPEE
 2695 2100 6D0C0000 		_DOLIT	0X3F
 2695      3F000000 
 2696 2108 490C0000 		_ADR	EMIT
 2697 210c 611A0000 		_ADR	CR
 2698 2110 79220000 		_ADR	PRESE
 2699 2114 C30C0000 		_BRAN	QUIT
 2699      98220000 
 2700              	
 2701              	//    _abort"	( f -- )
 2702              	// 	Run time routine of ABORT" . Abort with a message.
 2703              	
 2704              	// 	.word	_ABORT
 2705              	// _ABORQ	.byte  COMPO+6
 2706              	// 	.ascii "abort\""
 2707              	// 	.p2align 2 	
 2708              	ABORQ:
 2709 211c 504700BF 		_NEST
 2710 2120 811A0000 		_ADR	DOSTR
 2711 2124 B10D0000 		_ADR	SWAP 
 2712 2128 AF0C0000 		_QBRAN	1f	// text flag
 2712      38210000 
 2713 2130 C30C0000 		_BRAN	ABORT1
 2713      F4200000 
 2714              	1:
 2715 2138 910D0000 		_ADR	DROP
 2716 213c 030B0000 		_UNNEST			// drop error
 2717              	
 2718              	// **************************************************************************
 2719              	//  The text interpreter
 2720              	
 2721              	//    $INTERPRET  ( a -- )
 2722              	// 	Interpret a word. If failed, try to convert it to an integer.
 2723              	
 2724 2140 E8200000 		.word	_ABORT
 2725 2144 0A       	_INTER:	.byte  10
 2726 2145 2424494E 		.ascii "$$INTERPRET"
 2726      54455250 
 2726      524554
 2727              		.p2align 2 	
 2728              	INTER:
 2729 2150 504700BF 		_NEST
 2730 2154 5D1F0000 		_ADR	NAMEQ
 2731 2158 750F0000 		_ADR	QDUP	// ?defined
 2732 215c AF0C0000 		_QBRAN	INTE1
 2732      90210000 
 2733 2164 F50C0000 		_ADR	AT
 2734 2168 6D0C0000 		_DOLIT	COMPO
 2734      40000000 
 2735 2170 E50D0000 		_ADR	ANDD	// ?compile only lexicon bits
 2736 2174 1D210000 		_ABORQ	13," compile only"
 2736      0D20636F 
 2736      6D70696C 
 2736      65206F6E 
ARM GAS  forth.s 			page 90


 2736      6C7900BF 
 2737 2188 850C0000 		_ADR	EXECU
 2738 218c 030B0000 		_UNNEST			// execute defined word
 2739              	INTE1:
 2740 2190 81180000 		_ADR	NUMBQ
 2741 2194 AF0C0000 		_QBRAN	INTE2
 2741      A0210000 
 2742 219c 030B0000 		_UNNEST
 2743              	INTE2:
 2744 21a0 F1200000 		_ADR	ABORT	// error
 2745              	
 2746              	//    [	   ( -- )
 2747              	// 	Start the text interpreter.
 2748              	
 2749 21a4 44210000 		.word	_INTER
 2750 21a8 81       	_LBRAC:	.byte  IMEDD+1
 2751 21a9 5B       		.ascii "["
 2752 21aa 00BF     		.p2align 2 	
 2753              	LBRAC:
 2754 21ac 504700BF 		_NEST
 2755 21b0 6D0C0000 		_DOLIT	INTER
 2755      50210000 
 2756 21b8 19120000 		_ADR	TEVAL
 2757 21bc E10C0000 		_ADR	STORE
 2758 21c0 030B0000 		_UNNEST
 2759              	
 2760              	//    .OK	 ( -- )
 2761              	// 	Display "ok" only while interpreting.
 2762              	
 2763 21c4 A8210000 		.word	_LBRAC
 2764 21c8 03       	_DOTOK:	.byte  3
 2765 21c9 2E4F4B   		.ascii ".OK"
 2766              		.p2align 2 	
 2767              	DOTOK:
 2768 21cc 504700BF 		_NEST
 2769 21d0 6D0C0000 		_DOLIT	INTER
 2769      50210000 
 2770 21d8 19120000 		_ADR	TEVAL
 2771 21dc F50C0000 		_ADR	AT
 2772 21e0 55100000 		_ADR	EQUAL
 2773 21e4 AF0C0000 		_QBRAN	DOTO1
 2773      F4210000 
 2774 21ec C91A0000 		_DOTQP	3," ok"
 2774      03206F6B 
 2775              	DOTO1:
 2776 21f4 611A0000 		_ADR	CR
 2777 21f8 030B0000 		_UNNEST
 2778              	
 2779              	//    ?STACK	( -- )
 2780              	// 	Abort if the data stack underflows.
 2781              	
 2782 21fc C8210000 		.word	_DOTOK
 2783 2200 06       	_QSTAC:	.byte  6
 2784 2201 3F535441 		.ascii "?STACK"
 2784      434B
 2785 2207 00       		.p2align 2 	
 2786              	QSTAC:
ARM GAS  forth.s 			page 91


 2787 2208 504700BF 		_NEST
 2788 220c B1140000 		_ADR	DEPTH
 2789 2210 D50D0000 		_ADR	ZLESS	// check only for underflow
 2790 2214 1D210000 		_ABORQ	9,"underflow"
 2790      09756E64 
 2790      6572666C 
 2790      6F7700BF 
 2791 2224 030B0000 		_UNNEST
 2792              	
 2793              	//    EVAL	( -- )
 2794              	// 	Interpret the input stream.
 2795              	
 2796 2228 00220000 		.word	_QSTAC
 2797 222c 04       	_EVAL:	.byte  4
 2798 222d 4556414C 		.ascii "EVAL"
 2799 2231 0000BF   		.p2align 2 	
 2800              	EVAL:
 2801 2234 504700BF 		_NEST
 2802              	EVAL1:
 2803 2238 D91D0000 	    _ADR	TOKEN
 2804 223c A10D0000 		_ADR	DUPP
 2805 2240 150D0000 		_ADR	CAT	// ?input stream empty
 2806 2244 AF0C0000 		_QBRAN	EVAL2
 2806      60220000 
 2807 224c 19120000 		_ADR	TEVAL
 2808 2250 4D150000 		_ADR	ATEXE
 2809 2254 09220000 		_ADR	QSTAC	// evaluate input, check stack
 2810 2258 C30C0000 		_BRAN	EVAL1
 2810      38220000 
 2811              	EVAL2:
 2812 2260 910D0000 		_ADR	DROP
 2813 2264 CD210000 		_ADR	DOTOK
 2814 2268 030B0000 		_UNNEST	// prompt
 2815              	
 2816              	//    PRESET	( -- )
 2817              	// 	Reset data stack pointer and the terminal input buffer.
 2818              	
 2819 226c 2C220000 		.word	_EVAL
 2820 2270 06       	_PRESE:	.byte  6
 2821 2271 50524553 		.ascii "PRESET"
 2821      4554
 2822 2277 00       		.p2align 2 	
 2823              	PRESE:
 2824 2278 504700BF 		_NEST 
 2825 227c 6D0C0000 		_DOLIT SPP 
 2825      00FF0120 
 2826 2284 6D0D0000 		_ADR SPSTOR 
 2827 2288 030B0000 		_UNNEST 
 2828              	
 2829              	//    QUIT	( -- )
 2830              	// 	Reset return stack pointer and start text interpreter.
 2831              	
 2832 228c 70220000 		.word	_PRESE
 2833 2290 04       	_QUIT:	.byte  4
 2834 2291 51554954 		.ascii "QUIT"
 2835 2295 0000BF   		.p2align 2 	
 2836              	QUIT:
ARM GAS  forth.s 			page 92


 2837 2298 6D0C0000 		_DOLIT RPP 
 2837      80FF0120 
 2838 22a0 5D0D0000 		_ADR RPSTOR 
 2839              	QUIT1:
 2840 22a4 AD210000 		_ADR	LBRAC			// start interpretation
 2841              	QUIT2:
 2842 22a8 B1200000 		_ADR	QUERY			// get input
 2843 22ac 35220000 		_ADR	EVAL
 2844 22b0 C30C0000 		_BRAN	QUIT2	// continue till error
 2844      A8220000 
 2845              	
 2846 22b8 90220000 		.word _QUIT
 2847 22bc 06       	_FORGET: .byte 6 
 2848 22bd 464F5247 		.ascii "FORGET"
 2848      4554
 2849 22c3 00       		.p2align 2
 2850              	FORGET:
 2851 22c4 504700BF 		_NEST 
 2852 22c8 D91D0000 		_ADR TOKEN 
 2853 22cc A10D0000 		_ADR DUPP 
 2854 22d0 AF0C0000 		_QBRAN 9f 
 2854      0C230000 
 2855 22d8 5D1F0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2856 22dc 750F0000 		_ADR QDUP 
 2857 22e0 AF0C0000 		_QBRAN 8f
 2857      08230000 
 2858 22e8 110F0000 		_ADR CELLM // ( ca la )
 2859 22ec A10D0000 		_ADR DUPP 
 2860 22f0 59120000 		_ADR CPP   
 2861 22f4 E10C0000 		_ADR STORE
 2862 22f8 F50C0000 		_ADR AT 
 2863 22fc 81120000 		_ADR LAST 
 2864 2300 E10C0000 		_ADR STORE
 2865 2304 71270000 		_ADR OVERT 
 2866 2308 910D0000 	8:  _ADR DROP 
 2867 230c 030B0000 	9:	_UNNEST 
 2868              	
 2869              		.p2align 2 
 2870              	
 2871              	// **************************************************************************
 2872              	//  The compiler
 2873              	
 2874              	//    '	   ( -- ca )
 2875              	// 	Search context vocabularies for the next word in input stream.
 2876              	
 2877 2310 BC220000 		.word	_FORGET
 2878 2314 01       	_TICK:	.byte  1
 2879 2315 27       		.ascii "'"
 2880 2316 00BF     		.p2align 2 	
 2881              	TICK:
 2882 2318 504700BF 		_NEST
 2883 231c D91D0000 		_ADR	TOKEN
 2884 2320 5D1F0000 		_ADR	NAMEQ	// ?defined
 2885 2324 AF0C0000 		_QBRAN	TICK1
 2885      30230000 
 2886 232c 030B0000 		_UNNEST	// yes, push code address
 2887              	TICK1:	
ARM GAS  forth.s 			page 93


 2888 2330 F1200000 		_ADR ABORT	// no, error
 2889              	
 2890              	//    ALLOT	( n -- )
 2891              	// 	Allocate n bytes to the ram area.
 2892              	
 2893 2334 14230000 		.word	_TICK
 2894 2338 05       	_ALLOT:	.byte  5
 2895 2339 414C4C4F 		.ascii "ALLOT"
 2895      54
 2896 233e 00BF     		.p2align 2 	
 2897              	ALLOT:
 2898 2340 504700BF 		_NEST
 2899 2344 59120000 		_ADR	CPP
 2900 2348 DD100000 		_ADR	PSTOR
 2901 234c 030B0000 		_UNNEST			// adjust code pointer
 2902              	
 2903              	//    ,	   ( w -- )
 2904              	// 	Compile an integer into the code dictionary.
 2905              	
 2906 2350 38230000 		.word	_ALLOT
 2907 2354 012C     	_COMMA:	.byte  1,','
 2908 2356 00BF     		.p2align 2 	
 2909              	COMMA:
 2910 2358 504700BF 		_NEST
 2911 235c FD140000 		_ADR	HERE
 2912 2360 A10D0000 		_ADR	DUPP
 2913 2364 010F0000 		_ADR	CELLP	// cell boundary
 2914 2368 59120000 		_ADR	CPP
 2915 236c E10C0000 		_ADR	STORE
 2916 2370 E10C0000 		_ADR	STORE
 2917 2374 030B0000 		_UNNEST	// adjust code pointer, compile
 2918              		.p2align 2 
 2919              	//    [COMPILE]   ( -- //  string> )
 2920              	// 	Compile the next immediate word into code dictionary.
 2921              	
 2922 2378 54230000 		.word	_COMMA
 2923 237c 89       	_BCOMP:	.byte  IMEDD+9
 2924 237d 5B434F4D 		.ascii "[COMPILE]"
 2924      50494C45 
 2924      5D
 2925 2386 00BF     		.p2align 2 	
 2926              	BCOMP:
 2927 2388 504700BF 		_NEST
 2928 238c 19230000 		_ADR	TICK
 2929 2390 59230000 		_ADR	COMMA
 2930 2394 030B0000 		_UNNEST
 2931              	
 2932              	//    COMPILE	( -- )
 2933              	// 	Compile the next address in colon list to code dictionary.
 2934              	
 2935 2398 7C230000 		.word	_BCOMP
 2936 239c 47       	_COMPI:	.byte  COMPO+7
 2937 239d 434F4D50 		.ascii "COMPILE"
 2937      494C45
 2938              		.p2align 2 	
 2939              	COMPI:
 2940 23a4 504700BF 		_NEST
ARM GAS  forth.s 			page 94


 2941 23a8 210D0000 		_ADR	RFROM
 2942 23ac A10D0000 		_ADR	DUPP 
 2943 23b0 F50C0000 		_ADR	AT
 2944 23b4 6D0C0000 		_DOLIT 1 
 2944      01000000 
 2945 23bc F90D0000 		_ADR	ORR 
 2946 23c0 59230000 		_ADR	COMMA 
 2947 23c4 010F0000 		_ADR	CELLP 
 2948 23c8 490D0000 		_ADR	TOR 
 2949 23cc 030B0000 		_UNNEST			// adjust return address
 2950              	
 2951              	//    LITERAL	( w -- )
 2952              	// 	Compile tos to code dictionary as an integer literal.
 2953              	
 2954 23d0 9C230000 		.word	_COMPI
 2955 23d4 87       	_LITER:	.byte  IMEDD+7
 2956 23d5 4C495445 		.ascii "LITERAL"
 2956      52414C
 2957              		.p2align 2 	
 2958              	LITER:
 2959 23dc 504700BF 		_NEST
 2960 23e0 6D0C0000 		_COMPI	DOLIT
 2960      6C0C0000 
 2960      CD270000 
 2961 23ec 59230000 		_ADR	COMMA
 2962 23f0 030B0000 		_UNNEST
 2963              	
 2964              	//    $,"	( -- )
 2965              	// 	Compile a literal string up to next " .
 2966              	
 2967              	// 	.word	_LITER
 2968              	// _STRCQ	.byte  3
 2969              	// 	.ascii "$,\""
 2970              	// 	.p2align 2 	
 2971              	STRCQ:
 2972 23f4 504700BF 		_NEST
 2973 23f8 6D0C0000 		_DOLIT -4
 2973      FCFFFFFF 
 2974 2400 59120000 		_ADR	CPP
 2975 2404 DD100000 		_ADR	PSTOR
 2976 2408 6D0C0000 		_DOLIT	'\"'
 2976      22000000 
 2977 2410 B51D0000 		_ADR	WORDD			// move word to code dictionary
 2978 2414 25110000 		_ADR	COUNT
 2979 2418 650E0000 		_ADR	PLUS
 2980 241c 49140000 		_ADR	ALGND			// calculate aligned end of string
 2981 2420 59120000 		_ADR	CPP
 2982 2424 E10C0000 		_ADR	STORE
 2983 2428 030B0000 		_UNNEST 			// adjust the code pointer
 2984              	
 2985              	/*******************
 2986              	//  Structures
 2987              	*******************/
 2988              	//    FOR	 ( -- a )
 2989              	// 	Start a FOR-NEXT loop structure in a colon definition.
 2990              	
 2991 242c D4230000 		.word	_LITER
ARM GAS  forth.s 			page 95


 2992 2430 C3       	_FOR:	.byte  COMPO+IMEDD+3
 2993 2431 464F52   		.ascii "FOR"
 2994              		.p2align 2 	
 2995              	FOR:
 2996 2434 504700BF 		_NEST
 2997 2438 6D0C0000 		_COMPI	TOR
 2997      480D0000 
 2997      CD270000 
 2998 2444 FD140000 		_ADR	HERE
 2999 2448 030B0000 		_UNNEST
 3000              	
 3001              	//    BEGIN	( -- a )
 3002              	// 	Start an infinite or indefinite loop structure.
 3003              	
 3004 244c 30240000 		.word	_FOR
 3005 2450 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3006 2451 42454749 		.ascii "BEGIN"
 3006      4E
 3007 2456 00BF     		.p2align 2 	
 3008              	BEGIN:
 3009 2458 504700BF 		_NEST
 3010 245c FD140000 		_ADR	HERE
 3011 2460 030B0000 		_UNNEST
 3012              		.p2align 2 
 3013              	
 3014              	//    NEXT	( a -- )
 3015              	// 	Terminate a FOR-NEXT loop structure.
 3016 2464 50240000 		.word	_BEGIN
 3017 2468 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3018 2469 4E455854 		.ascii "NEXT"
 3019 246d 0000BF   		.p2align 2 	
 3020              	FNEXT:
 3021 2470 504700BF 		_NEST
 3022 2474 6D0C0000 		_COMPI	DONXT
 3022      900C0000 
 3022      CD270000 
 3023 2480 59230000 		_ADR	COMMA
 3024 2484 030B0000 		_UNNEST
 3025              	
 3026              	//    UNTIL	( a -- )
 3027              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3028              	
 3029 2488 68240000 		.word	_FNEXT
 3030 248c C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3031 248d 554E5449 		.ascii "UNTIL"
 3031      4C
 3032 2492 00BF     		.p2align 2 	
 3033              	UNTIL:
 3034 2494 504700BF 		_NEST
 3035 2498 6D0C0000 		_COMPI	QBRAN
 3035      AE0C0000 
 3035      CD270000 
 3036 24a4 59230000 		_ADR	COMMA
 3037 24a8 030B0000 		_UNNEST
 3038              	
 3039              	//    AGAIN	( a -- )
 3040              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
ARM GAS  forth.s 			page 96


 3041              	
 3042 24ac 8C240000 		.word	_UNTIL
 3043 24b0 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3044 24b1 41474149 		.ascii "AGAIN"
 3044      4E
 3045 24b6 00BF     		.p2align 2 	
 3046              	AGAIN:
 3047 24b8 504700BF 		_NEST
 3048 24bc 6D0C0000 		_COMPI	BRAN
 3048      C20C0000 
 3048      CD270000 
 3049 24c8 59230000 		_ADR	COMMA
 3050 24cc 030B0000 		_UNNEST
 3051              	
 3052              	//    IF	  ( -- A )
 3053              	// 	Begin a conditional branch structure.
 3054              	
 3055 24d0 B0240000 		.word	_AGAIN
 3056 24d4 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3057 24d5 4946     		.ascii "IF"
 3058 24d7 00       		.p2align 2 	
 3059              	IFF:
 3060 24d8 504700BF 		_NEST
 3061 24dc 6D0C0000 		_COMPI	QBRAN
 3061      AE0C0000 
 3061      CD270000 
 3062 24e8 FD140000 		_ADR	HERE
 3063 24ec 6D0C0000 		_DOLIT	4
 3063      04000000 
 3064 24f4 59120000 		_ADR	CPP
 3065 24f8 DD100000 		_ADR	PSTOR
 3066 24fc 030B0000 		_UNNEST
 3067              	
 3068              	//    AHEAD	( -- A )
 3069              	// 	Compile a forward branch instruction.
 3070              	
 3071 2500 D4240000 		.word	_IFF
 3072 2504 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3073 2505 41484541 		.ascii "AHEAD"
 3073      44
 3074 250a 00BF     		.p2align 2 	
 3075              	AHEAD:
 3076 250c 504700BF 		_NEST
 3077 2510 6D0C0000 		_COMPI	BRAN
 3077      C20C0000 
 3077      CD270000 
 3078 251c FD140000 		_ADR	HERE
 3079 2520 6D0C0000 		_DOLIT	4
 3079      04000000 
 3080 2528 59120000 		_ADR	CPP
 3081 252c DD100000 		_ADR	PSTOR
 3082 2530 030B0000 		_UNNEST
 3083              	
 3084              	//    REPEAT	( A a -- )
 3085              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3086              	
 3087 2534 04250000 		.word	_AHEAD
ARM GAS  forth.s 			page 97


 3088 2538 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3089 2539 52455045 		.ascii "REPEAT"
 3089      4154
 3090 253f 00       		.p2align 2 	
 3091              	REPEA:
 3092 2540 504700BF 		_NEST
 3093 2544 B9240000 		_ADR	AGAIN
 3094 2548 FD140000 		_ADR	HERE
 3095 254c B10D0000 		_ADR	SWAP
 3096 2550 E10C0000 		_ADR	STORE
 3097 2554 030B0000 		_UNNEST
 3098              	
 3099              	//    THEN	( A -- )
 3100              	// 	Terminate a conditional branch structure.
 3101              	
 3102 2558 38250000 		.word	_REPEA
 3103 255c C4       	_THENN:	.byte  COMPO+IMEDD+4
 3104 255d 5448454E 		.ascii "THEN"
 3105 2561 0000BF   		.p2align 2 	
 3106              	THENN:
 3107 2564 504700BF 		_NEST
 3108 2568 FD140000 		_ADR	HERE
 3109 256c B10D0000 		_ADR	SWAP
 3110 2570 E10C0000 		_ADR	STORE
 3111 2574 030B0000 		_UNNEST
 3112              	
 3113              	//    AFT	 ( a -- a A )
 3114              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3115              	
 3116 2578 5C250000 		.word	_THENN
 3117 257c C3       	_AFT:	.byte  COMPO+IMEDD+3
 3118 257d 414654   		.ascii "AFT"
 3119              		.p2align 2 	
 3120              	AFT:
 3121 2580 504700BF 		_NEST
 3122 2584 910D0000 		_ADR	DROP
 3123 2588 0D250000 		_ADR	AHEAD
 3124 258c 59240000 		_ADR	BEGIN
 3125 2590 B10D0000 		_ADR	SWAP
 3126 2594 030B0000 		_UNNEST
 3127              	
 3128              	//    ELSE	( A -- A )
 3129              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3130              	
 3131 2598 7C250000 		.word	_AFT
 3132 259c C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3133 259d 454C5345 		.ascii "ELSE"
 3134 25a1 0000BF   		.p2align 2 	
 3135              	ELSEE:
 3136 25a4 504700BF 		_NEST
 3137 25a8 0D250000 		_ADR	AHEAD
 3138 25ac B10D0000 		_ADR	SWAP
 3139 25b0 65250000 		_ADR	THENN
 3140 25b4 030B0000 		_UNNEST
 3141              	
 3142              	//    WHILE	( a -- A a )
 3143              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
ARM GAS  forth.s 			page 98


 3144              	
 3145 25b8 9C250000 		.word	_ELSEE
 3146 25bc C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3147 25bd 5748494C 		.ascii "WHILE"
 3147      45
 3148 25c2 00BF     		.p2align 2 	
 3149              	WHILE:
 3150 25c4 504700BF 		_NEST
 3151 25c8 D9240000 		_ADR	IFF
 3152 25cc B10D0000 		_ADR	SWAP
 3153 25d0 030B0000 		_UNNEST
 3154              	
 3155              	//    ABORT"	( -- //  string> )
 3156              	// 	Conditional abort with an error message.
 3157              	
 3158 25d4 BC250000 		.word	_WHILE
 3159 25d8 86       	_ABRTQ:	.byte  IMEDD+6
 3160 25d9 41424F52 		.ascii "ABORT\""
 3160      5422
 3161 25df 00       		.p2align 2 	
 3162              	ABRTQ:
 3163 25e0 504700BF 		_NEST
 3164 25e4 6D0C0000 		_COMPI	ABORQ
 3164      1C210000 
 3164      CD270000 
 3165 25f0 F5230000 		_ADR	STRCQ
 3166 25f4 030B0000 		_UNNEST
 3167              	
 3168              	//    $"	( -- //  string> )
 3169              	// 	Compile an inline word literal.
 3170              	
 3171 25f8 D8250000 		.word	_ABRTQ
 3172 25fc C2       	_STRQ:	.byte  IMEDD+COMPO+2
 3173 25fd 2422     		.ascii	"$\""
 3174 25ff 00       		.p2align 2 	
 3175              	STRQ:
 3176 2600 504700BF 		_NEST
 3177 2604 6D0C0000 		_COMPI	STRQP
 3177      AC1A0000 
 3177      CD270000 
 3178 2610 F5230000 		_ADR	STRCQ
 3179 2614 030B0000 		_UNNEST
 3180              	
 3181              	//    ."	( -- //  string> )
 3182              	// 	Compile an inline word  literal to be typed out at run time.
 3183              	
 3184 2618 FC250000 		.word	_STRQ
 3185 261c C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3186 261d 2E22     		.ascii	".\""
 3187 261f 00       		.p2align 2 	
 3188              	DOTQ:
 3189 2620 504700BF 		_NEST
 3190 2624 6D0C0000 		_COMPI	DOTQP
 3190      C81A0000 
 3190      CD270000 
 3191 2630 F5230000 		_ADR	STRCQ
 3192 2634 030B0000 		_UNNEST
ARM GAS  forth.s 			page 99


 3193              	
 3194              	// **************************************************************************
 3195              	//  Name compiler
 3196              	
 3197              	//    ?UNIQUE	( a -- a )
 3198              	// 	Display a warning message if the word already exists.
 3199              	
 3200 2638 1C260000 		.word	_DOTQ
 3201 263c 07       	_UNIQU:	.byte  7
 3202 263d 3F554E49 		.ascii "?UNIQUE"
 3202      515545
 3203              		.p2align 2 	
 3204              	UNIQU:
 3205 2644 504700BF 		_NEST
 3206 2648 A10D0000 		_ADR	DUPP
 3207 264c 5D1F0000 		_ADR	NAMEQ			// ?name exists
 3208 2650 AF0C0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3208      70260000 
 3209 2658 C91A0000 		_DOTQP	7," reDef "		// but warn the user
 3209      07207265 
 3209      44656620 
 3210 2664 C50D0000 		_ADR	OVER
 3211 2668 25110000 		_ADR	COUNT
 3212 266c 2D1A0000 		_ADR	TYPEE			// just in case its not planned
 3213              	UNIQ1:
 3214 2670 910D0000 		_ADR	DROP
 3215 2674 030B0000 		_UNNEST
 3216              	
 3217              	//    $,n	 ( na -- )
 3218              	// 	Build a new dictionary name using the data at na.
 3219              	
 3220              	// 	.word	_UNIQU
 3221              	// _SNAME	.byte  3
 3222              	// 	.ascii "$,n"
 3223              	// 	.p2align 2 	
 3224              	SNAME:
 3225 2678 504700BF 		_NEST
 3226 267c A10D0000 		_ADR	DUPP			//  na na
 3227 2680 150D0000 		_ADR	CAT			//  ?null input
 3228 2684 AF0C0000 		_QBRAN	SNAM1
 3228      C0260000 
 3229 268c 45260000 		_ADR	UNIQU			//  na
 3230 2690 81120000 		_ADR	LAST			//  na last
 3231 2694 F50C0000 		_ADR	AT			//  na la
 3232 2698 59230000 		_ADR	COMMA			//  na
 3233 269c A10D0000 		_ADR	DUPP			//  na na
 3234 26a0 81120000 		_ADR	LAST			//  na na last
 3235 26a4 E10C0000 		_ADR	STORE			//  na , save na for vocabulary link
 3236 26a8 25110000 		_ADR	COUNT			//  na+1 count
 3237 26ac 650E0000 		_ADR	PLUS			//  na+1+count
 3238 26b0 49140000 		_ADR	ALGND			//  word boundary
 3239 26b4 59120000 		_ADR	CPP
 3240 26b8 E10C0000 		_ADR	STORE			//  top of dictionary now
 3241 26bc 030B0000 		_UNNEST
 3242              	SNAM1:
 3243 26c0 AD1A0000 		_ADR	STRQP
 3244 26c4 07       		.byte	7
ARM GAS  forth.s 			page 100


 3245 26c5 206E616D 		.ascii " name? "
 3245      653F20
 3246 26cc F1200000 		_ADR	ABORT
 3247              	
 3248              	//    $COMPILE	( a -- )
 3249              	// 	Compile next word to code dictionary as a token or literal.
 3250              	
 3251 26d0 3C260000 		.word	_UNIQU
 3252 26d4 08       	_SCOMP:	.byte  8
 3253 26d5 24434F4D 		.ascii "$COMPILE"
 3253      50494C45 
 3254 26dd 0000BF   		.p2align 2 	
 3255              	SCOMP:
 3256 26e0 504700BF 		_NEST
 3257 26e4 5D1F0000 		_ADR	NAMEQ
 3258 26e8 750F0000 		_ADR	QDUP	// defined?
 3259 26ec AF0C0000 		_QBRAN	SCOM2
 3259      1C270000 
 3260 26f4 F50C0000 		_ADR	AT
 3261 26f8 6D0C0000 		_DOLIT	IMEDD
 3261      80000000 
 3262 2700 E50D0000 		_ADR	ANDD	// immediate?
 3263 2704 AF0C0000 		_QBRAN	SCOM1
 3263      14270000 
 3264 270c 850C0000 		_ADR	EXECU
 3265 2710 030B0000 		_UNNEST			// it's immediate, execute
 3266              	SCOM1:
 3267 2714 CD270000 		_ADR	CALLC			// it's not immediate, compile
 3268 2718 030B0000 		_UNNEST	
 3269              	SCOM2:
 3270 271c 81180000 		_ADR	NUMBQ
 3271 2720 AF0C0000 		_QBRAN	SCOM3
 3271      30270000 
 3272 2728 DD230000 		_ADR	LITER
 3273 272c 030B0000 		_UNNEST			// compile number as integer
 3274              	SCOM3: // compilation abort 
 3275 2730 39270000 		_ADR COLON_ABORT 
 3276 2734 F1200000 		_ADR	ABORT			// error
 3277              	
 3278              	// before aborting a compilation 
 3279              	// reset HERE and LAST
 3280              	// to previous values. 
 3281              	COLON_ABORT:
 3282 2738 504700BF 		_NEST 
 3283 273c 81120000 		_ADR LAST 
 3284 2740 F50C0000 		_ADR AT 
 3285 2744 110F0000 		_ADR CELLM 
 3286 2748 A10D0000 		_ADR DUPP 
 3287 274c 59120000 		_ADR CPP  
 3288 2750 E10C0000 		_ADR STORE 
 3289 2754 F50C0000 		_ADR AT 
 3290 2758 81120000 		_ADR LAST 
 3291 275c E10C0000 		_ADR STORE 
 3292 2760 030B0000 		_UNNEST 
 3293              	
 3294              	//    OVERT	( -- )
 3295              	// 	Link a new word into the current vocabulary.
ARM GAS  forth.s 			page 101


 3296              	
 3297 2764 D4260000 		.word	_SCOMP
 3298 2768 05       	_OVERT:	.byte  5
 3299 2769 4F564552 		.ascii "OVERT"
 3299      54
 3300 276e 00BF     		.p2align 2 	
 3301              	OVERT:
 3302 2770 504700BF 		_NEST
 3303 2774 81120000 		_ADR	LAST
 3304 2778 F50C0000 		_ADR	AT
 3305 277c 45120000 		_ADR	CNTXT
 3306 2780 E10C0000 		_ADR	STORE
 3307 2784 030B0000 		_UNNEST
 3308              	
 3309              	//    ; 	   ( -- )
 3310              	// 	Terminate a colon definition.
 3311              	
 3312 2788 68270000 		.word	_OVERT
 3313 278c C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3314 278d 3B       		.ascii ";"
 3315 278e 00BF     		.p2align 2 	
 3316              	SEMIS:
 3317 2790 504700BF 		_NEST
 3318 2794 6D0C0000 		_DOLIT	UNNEST
 3318      020B0000 
 3319 279c CD270000 		_ADR	CALLC
 3320 27a0 AD210000 		_ADR	LBRAC
 3321 27a4 71270000 		_ADR	OVERT
 3322 27a8 030B0000 		_UNNEST
 3323              	
 3324              	//    ]	   ( -- )
 3325              	// 	Start compiling the words in the input stream.
 3326              	
 3327 27ac 8C270000 		.word	_SEMIS
 3328 27b0 01       	_RBRAC:	.byte  1
 3329 27b1 5D       		.ascii "]"
 3330 27b2 00BF     		.p2align 2 	
 3331              	RBRAC:
 3332 27b4 504700BF 		_NEST
 3333 27b8 6D0C0000 		_DOLIT	SCOMP
 3333      E0260000 
 3334 27c0 19120000 		_ADR	TEVAL
 3335 27c4 E10C0000 		_ADR	STORE
 3336 27c8 030B0000 		_UNNEST
 3337              	
 3338              	//    BL.W	( ca -- )
 3339              	// 	compile ca.
 3340              	
 3341              	// 	.word	_RBRAC
 3342              	// _CALLC	.byte  5
 3343              	// 	.ascii "call,"
 3344              	// 	.p2align 2 	
 3345              	CALLC:
 3346 27cc 504700BF 		_NEST
 3347 27d0 6D0C0000 		_DOLIT 1 
 3347      01000000 
 3348 27d8 F90D0000 		_ADR ORR 
ARM GAS  forth.s 			page 102


 3349 27dc 59230000 		_ADR COMMA  
 3350 27e0 030B0000 		_UNNEST 
 3351              	
 3352              	
 3353              	// 	:	( -- //  string> )
 3354              	// 	Start a new colon definition using next word as its name.
 3355              	
 3356 27e4 B0270000 		.word	_RBRAC
 3357 27e8 01       	_COLON:	.byte  1
 3358 27e9 3A       		.ascii ":"
 3359 27ea 00BF     		.p2align 2 	
 3360              	COLON:
 3361 27ec 504700BF 		_NEST
 3362 27f0 D91D0000 		_ADR	TOKEN
 3363 27f4 79260000 		_ADR	SNAME
 3364 27f8 0D0B0000 		_ADR	COMPI_NEST 
 3365 27fc B5270000 		_ADR	RBRAC
 3366 2800 030B0000 		_UNNEST
 3367              	
 3368              	//    IMMEDIATE   ( -- )
 3369              	// 	Make the last compiled word an immediate word.
 3370              	
 3371 2804 E8270000 		.word	_COLON
 3372 2808 09       	_IMMED:	.byte  9
 3373 2809 494D4D45 		.ascii "IMMEDIATE"
 3373      44494154 
 3373      45
 3374 2812 00BF     		.p2align 2 	
 3375              	IMMED:
 3376 2814 504700BF 		_NEST
 3377 2818 6D0C0000 		_DOLIT	IMEDD
 3377      80000000 
 3378 2820 81120000 		_ADR	LAST
 3379 2824 F50C0000 		_ADR	AT
 3380 2828 F50C0000 		_ADR	AT
 3381 282c F90D0000 		_ADR	ORR
 3382 2830 81120000 		_ADR	LAST
 3383 2834 F50C0000 		_ADR	AT
 3384 2838 E10C0000 		_ADR	STORE
 3385 283c 030B0000 		_UNNEST
 3386              	
 3387              	// **************************************************************************
 3388              	//  Defining words
 3389              	
 3390              	//    CONSTANT	( u -- //  string> )
 3391              	// 	Compile a new constant.
 3392              	
 3393 2840 08280000 		.word	_IMMED
 3394 2844 08       	_CONST:	.byte  8
 3395 2845 434F4E53 		.ascii "CONSTANT"
 3395      54414E54 
 3396 284d 0000BF   		.p2align 2 	
 3397              	CONST:
 3398 2850 504700BF 		_NEST 
 3399 2854 D91D0000 		_ADR	TOKEN
 3400 2858 79260000 		_ADR	SNAME
 3401 285c 71270000 		_ADR	OVERT
ARM GAS  forth.s 			page 103


 3402 2860 0D0B0000 		_ADR	COMPI_NEST
 3403 2864 6D0C0000 		_DOLIT	DOCON
 3403      58110000 
 3404 286c CD270000 		_ADR	CALLC
 3405 2870 59230000 		_ADR	COMMA
 3406 2874 6D0C0000 		_DOLIT	UNNEST 
 3406      020B0000 
 3407 287c CD270000 		_ADR	CALLC  
 3408 2880 030B0000 		_UNNEST
 3409              	
 3410              		.p2align 2 
 3411              	// doDOES> ( -- a )
 3412              	// runtime action of DOES> 
 3413              	// leave parameter field address on stack 
 3414              	DODOES:
 3415 2884 504700BF 		_NEST 
 3416 2888 210D0000 		_ADR	RFROM
 3417 288c 010F0000 		_ADR	CELLP 
 3418 2890 C10E0000 		_ADR	ONEP  
 3419 2894 81120000 		_ADR LAST 
 3420 2898 F50C0000 		_ADR AT
 3421 289c F51D0000 		_ADR NAMET 
 3422 28a0 010F0000 		_ADR CELLP 
 3423 28a4 E10C0000 		_ADR STORE  
 3424 28a8 030B0000 		_UNNEST 
 3425              	
 3426              		.p2align 2
 3427              	//  DOES> ( -- )
 3428              	//  compile time action 
 3429 28ac 44280000 		.word _CONST   
 3430 28b0 C5       	_DOES: .byte IMEDD+COMPO+5 
 3431 28b1 444F4553 		.ascii "DOES>"
 3431      3E
 3432 28b6 00BF     		.p2align 2
 3433              	DOES: 
 3434 28b8 504700BF 		_NEST 
 3435 28bc 6D0C0000 		_DOLIT DODOES 
 3435      84280000 
 3436 28c4 CD270000 		_ADR CALLC 
 3437 28c8 6D0C0000 		_DOLIT	UNNEST
 3437      020B0000 
 3438 28d0 CD270000 		_ADR	CALLC 
 3439 28d4 0D0B0000 		_ADR COMPI_NEST
 3440 28d8 6D0C0000 		_DOLIT RFROM 
 3440      200D0000 
 3441 28e0 CD270000 		_ADR	CALLC
 3442 28e4 030B0000 		_UNNEST 
 3443              	
 3444              	
 3445              	
 3446              	//  DEFER@ ( "name" -- a )
 3447              	//  return value of code field of defered function. 
 3448 28e8 B0280000 		.word _DOES 
 3449 28ec 06       	_DEFERAT: .byte 6 
 3450 28ed 44454645 		.ascii "DEFER@"
 3450      5240
 3451 28f3 00       		.p2align 2 
ARM GAS  forth.s 			page 104


 3452              	DEFERAT: 
 3453 28f4 504700BF 		_NEST 
 3454 28f8 19230000 		_ADR TICK
 3455 28fc 010F0000 		_ADR CELLP 
 3456 2900 F50C0000 		_ADR AT 
 3457 2904 D10E0000 		_ADR ONEM 
 3458 2908 030B0000 		_UNNEST 
 3459              	
 3460              	// DEFER! ( "name1" "name2" -- )
 3461              	// assign an action to a defered word 
 3462 290c EC280000 		.word _DEFERAT 
 3463 2910 06       	_DEFERSTO: .byte 6 
 3464 2911 44454645 		.ascii "DEFER!" 
 3464      5221
 3465 2917 00       		.p2align 2 
 3466              	DEFERSTO:
 3467 2918 504700BF 		_NEST 
 3468 291c 19230000 		_ADR TICK 
 3469 2920 C10E0000 		_ADR ONEP 
 3470 2924 19230000 		_ADR TICK 
 3471 2928 010F0000 		_ADR CELLP 
 3472 292c E10C0000 		_ADR STORE 
 3473 2930 030B0000 		_UNNEST
 3474              	
 3475              	//  DEFER ( "name" -- )
 3476              	//  create a defered definition
 3477 2934 10290000 		.word _DEFERSTO  
 3478 2938 05       	_DEFER: .byte 5 
 3479 2939 44454645 		.ascii "DEFER"
 3479      52
 3480 293e 00BF     		.p2align 2
 3481              	DEFER:
 3482 2940 504700BF 		_NEST 
 3483 2944 91290000 		_ADR CREAT 
 3484 2948 6D0C0000 		_DOLIT UNNEST 
 3484      020B0000 
 3485 2950 CD270000 		_ADR CALLC 
 3486 2954 6D0C0000 		_DOLIT DEFER_NOP
 3486      78290000 
 3487 295c C10E0000 		_ADR ONEP 
 3488 2960 81120000 		_ADR LAST 
 3489 2964 F50C0000 		_ADR AT 
 3490 2968 F51D0000 		_ADR NAMET 
 3491 296c 010F0000 		_ADR CELLP 
 3492 2970 E10C0000 		_ADR STORE 
 3493 2974 030B0000 		_UNNEST 
 3494              	DEFER_NOP:
 3495 2978 504700BF 		_NEST  
 3496 297c 690C0000 		_ADR NOP 
 3497 2980 030B0000 		_UNNEST 
 3498              	
 3499              	//    CREATE	( -- //  string> )
 3500              	// 	Compile a new array entry without allocating code space.
 3501              	
 3502 2984 38290000 		.word	_DEFER 
 3503 2988 06       	_CREAT:	.byte  6
 3504 2989 43524541 		.ascii "CREATE"
ARM GAS  forth.s 			page 105


 3504      5445
 3505 298f 00       		.p2align 2 	
 3506              	CREAT:
 3507 2990 504700BF 		_NEST 
 3508 2994 D91D0000 		_ADR	TOKEN
 3509 2998 79260000 		_ADR	SNAME
 3510 299c 71270000 		_ADR	OVERT
 3511 29a0 0D0B0000 		_ADR	COMPI_NEST 
 3512 29a4 6D0C0000 		_DOLIT	DOVAR
 3512      4C110000 
 3513 29ac CD270000 		_ADR	CALLC
 3514 29b0 030B0000 		_UNNEST
 3515              	
 3516              	//    VARIABLE	( -- //  string> )
 3517              	// 	Compile a new variable initialized to 0.
 3518              	
 3519 29b4 88290000 		.word	_CREAT
 3520 29b8 08       	_VARIA:	.byte  8
 3521 29b9 56415249 		.ascii "VARIABLE"
 3521      41424C45 
 3522 29c1 0000BF   		.p2align 2 	
 3523              	VARIA:
 3524 29c4 504700BF 		_NEST
 3525 29c8 91290000 		_ADR	CREAT
 3526 29cc 6D0C0000 		_DOLIT	0
 3526      00000000 
 3527 29d4 59230000 		_ADR	COMMA
 3528 29d8 6D0C0000 		_DOLIT UNNEST
 3528      020B0000 
 3529 29e0 CD270000 		_ADR	CALLC  
 3530 29e4 030B0000 		_UNNEST
 3531              	
 3532              	// **************************************************************************
 3533              	//  Tools
 3534              	
 3535              	//    dm+	 ( a u -- a )
 3536              	// 	Dump u bytes from , leaving a+u on the stack.
 3537              	
 3538              	// 	.word	_VARIA 
 3539              	// _DMP	.byte  3
 3540              	// 	.ascii "dm+"
 3541              	// 	.p2align 2 	
 3542              	DMP:
 3543 29e8 504700BF 		_NEST
 3544 29ec C50D0000 		_ADR	OVER
 3545 29f0 6D0C0000 		_DOLIT	4
 3545      04000000 
 3546 29f8 0D1B0000 		_ADR	UDOTR			// display address
 3547 29fc D9190000 		_ADR	SPACE
 3548 2a00 490D0000 		_ADR	TOR			// start count down loop
 3549 2a04 C30C0000 		_BRAN	PDUM2			// skip first pass
 3549      242A0000 
 3550              	PDUM1:
 3551 2a0c A10D0000 	  _ADR	DUPP
 3552 2a10 150D0000 		_ADR	CAT
 3553 2a14 6D0C0000 		_DOLIT	3
 3553      03000000 
ARM GAS  forth.s 			page 106


 3554 2a1c 0D1B0000 		_ADR	UDOTR			// display numeric data
 3555 2a20 C10E0000 		_ADR	ONEP			// increment address
 3556              	PDUM2:
 3557 2a24 910C0000 	  _ADR	DONXT
 3558 2a28 0C2A0000 		.word	PDUM1	// loop till done
 3559 2a2c 030B0000 		_UNNEST
 3560              		.p2align 2 
 3561              	//    DUMP	( a u -- )
 3562              	// 	Dump u bytes from a, in a formatted manner.
 3563              	
 3564 2a30 B8290000 		.word	_VARIA
 3565 2a34 04       	_DUMP:	.byte  4
 3566 2a35 44554D50 		.ascii "DUMP"
 3567 2a39 0000BF   		.p2align 2 	
 3568              	DUMP:
 3569 2a3c 504700BF 		_NEST
 3570 2a40 BD110000 		_ADR	BASE
 3571 2a44 F50C0000 		_ADR	AT
 3572 2a48 490D0000 		_ADR	TOR
 3573 2a4c D1170000 		_ADR	HEX			// save radix,set hex
 3574 2a50 6D0C0000 		_DOLIT	16
 3574      10000000 
 3575 2a58 E9130000 		_ADR	SLASH			// change count to lines
 3576 2a5c 490D0000 		_ADR	TOR
 3577 2a60 C30C0000 		_BRAN	DUMP4			// start count down loop
 3577      902A0000 
 3578              	DUMP1:
 3579 2a68 611A0000 	  _ADR	CR
 3580 2a6c 6D0C0000 		_DOLIT	16
 3580      10000000 
 3581 2a74 D90F0000 		_ADR	DDUP
 3582 2a78 E9290000 		_ADR	DMP			// display numeric
 3583 2a7c 890F0000 		_ADR	ROT
 3584 2a80 890F0000 		_ADR	ROT
 3585 2a84 D9190000 		_ADR	SPACE
 3586 2a88 D9190000 		_ADR	SPACE
 3587 2a8c 2D1A0000 		_ADR	TYPEE			// display printable characters
 3588              	DUMP4:
 3589 2a90 910C0000 	  _DONXT	DUMP1	// loop till done
 3589      682A0000 
 3590              	DUMP3:
 3591 2a98 910D0000 		_ADR	DROP
 3592 2a9c 210D0000 		_ADR	RFROM
 3593 2aa0 BD110000 		_ADR	BASE
 3594 2aa4 E10C0000 		_ADR	STORE			// restore radix
 3595 2aa8 030B0000 		_UNNEST
 3596              	
 3597              	//    .S	  ( ... -- ... )
 3598              	// 	Display the contents of the data stack.
 3599              	
 3600 2aac 342A0000 		.word	_DUMP
 3601              	_DOTS:
 3602 2ab0 02       		.byte  2
 3603 2ab1 2E53     		.ascii ".S"
 3604 2ab3 00       		.p2align 2 	
 3605              	DOTS:
 3606 2ab4 504700BF 		_NEST
ARM GAS  forth.s 			page 107


 3607 2ab8 D9190000 		_ADR	SPACE
 3608 2abc B1140000 		_ADR	DEPTH			// stack depth
 3609 2ac0 490D0000 		_ADR	TOR			// start count down loop
 3610 2ac4 C30C0000 		_BRAN	DOTS2			// skip first pass
 3610      D82A0000 
 3611              	DOTS1:
 3612 2acc 350D0000 		_ADR	RAT
 3613 2ad0 D5140000 		_ADR	PICK
 3614 2ad4 651B0000 		_ADR	DOT			// index stack, display contents
 3615              	DOTS2:
 3616 2ad8 910C0000 		_DONXT	DOTS1	// loop till done
 3616      CC2A0000 
 3617 2ae0 D9190000 		_ADR	SPACE
 3618 2ae4 030B0000 		_UNNEST
 3619              	
 3620              	//    >NAME	( ca -- na | F )
 3621              	// 	Convert code address to a name address.
 3622              	
 3623 2ae8 B02A0000 		.word	_DOTS
 3624 2aec 05       	_TNAME:	.byte  5
 3625 2aed 3E4E414D 		.ascii ">NAME"
 3625      45
 3626 2af2 00BF     		.p2align 2 	
 3627              	TNAME:
 3628 2af4 504700BF 		_NEST
 3629 2af8 490D0000 		_ADR	TOR			//  
 3630 2afc 45120000 		_ADR	CNTXT			//  va
 3631 2b00 F50C0000 		_ADR	AT			//  na
 3632              	TNAM1:
 3633 2b04 A10D0000 		_ADR	DUPP			//  na na
 3634 2b08 AF0C0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3634      382B0000 
 3635 2b10 A10D0000 		_ADR	DUPP			//  na na
 3636 2b14 F51D0000 		_ADR	NAMET			//  na ca
 3637 2b18 350D0000 		_ADR	RAT			//  na ca code
 3638 2b1c 0D0E0000 		_ADR	XORR			//  na f --
 3639 2b20 AF0C0000 		_QBRAN	TNAM2
 3639      382B0000 
 3640 2b28 110F0000 		_ADR	CELLM			//  la 
 3641 2b2c F50C0000 		_ADR	AT			//  next_na
 3642 2b30 C30C0000 		_BRAN	TNAM1
 3642      042B0000 
 3643              	TNAM2:	
 3644 2b38 210D0000 		_ADR	RFROM
 3645 2b3c 910D0000 		_ADR	DROP			//  0|na --
 3646 2b40 030B0000 		_UNNEST			// 0
 3647              	
 3648              	//    .ID	 ( na -- )
 3649              	// 	Display the name at address.
 3650              	
 3651 2b44 EC2A0000 		.word	_TNAME
 3652 2b48 03       	_DOTID:	.byte  3
 3653 2b49 2E4944   		.ascii ".ID"
 3654              		.p2align 2 	
 3655              	DOTID:
 3656 2b4c 504700BF 		_NEST
 3657 2b50 750F0000 		_ADR	QDUP			// if zero no name
ARM GAS  forth.s 			page 108


 3658 2b54 AF0C0000 		_QBRAN	DOTI1
 3658      742B0000 
 3659 2b5c 25110000 		_ADR	COUNT
 3660 2b60 6D0C0000 		_DOLIT	0x1F
 3660      1F000000 
 3661 2b68 E50D0000 		_ADR	ANDD			// mask lexicon bits
 3662 2b6c 2D1A0000 		_ADR	TYPEE
 3663 2b70 030B0000 		_UNNEST			// display name string
 3664              	DOTI1:
 3665 2b74 C91A0000 		_DOTQP	9," {noName}"
 3665      09207B6E 
 3665      6F4E616D 
 3665      657D00BF 
 3666 2b84 030B0000 		_UNNEST
 3667              	
 3668              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3669              	.if WANT_SEE 
 3670              	//    SEE	 ( -- //  string> )
 3671              	// 	A simple decompiler.
 3672              	
 3673              		.word	_DOTID
 3674              	_SEE:	.byte  3
 3675              		.ascii "SEE"
 3676              		.p2align 2 	
 3677              	SEE:
 3678              		_NEST
 3679              		_ADR	TICK	//  ca --, starting address
 3680              		_ADR	CR	
 3681              		_DOLIT	20
 3682              		_ADR	TOR
 3683              	SEE1:
 3684              		_ADR	CELLP			//  a
 3685              		_ADR	DUPP			//  a a
 3686              		_ADR	DECOMP		//  a
 3687              		_DONXT	SEE1
 3688              		_ADR	DROP
 3689              		_UNNEST
 3690              	
 3691              	// 	DECOMPILE ( a -- )
 3692              	// 	Convert code in a.  Display name of command or as data.
 3693              	
 3694              		.word	_SEE
 3695              	_DECOM:	.byte  9
 3696              		.ascii "DECOMPILE"
 3697              		.p2align 2 
 3698              		
 3699              	DECOMP:	
 3700              		_NEST
 3701              		_ADR	DUPP			//  a a
 3702              	// 	_ADR	TOR			//  a
 3703              		_ADR	AT			//  a code
 3704              		_ADR	DUPP			//  a code code
 3705              		_DOLIT	0xF800D000 //0xF800F800
 3706              		_ADR	ANDD
 3707              		_DOLIT	0xF000D000 //0xF800F000
 3708              		_ADR	EQUAL			//  a code ?
 3709              		_ADR	INVER 
ARM GAS  forth.s 			page 109


 3710              		_QBRAN	DECOM2	//  not a command
 3711              		//  a valid_code --, extract address and display name
 3712              		MOVW	IP,#0xFFE
 3713              		MOV	WP,TOS
 3714              		LSL	TOS,TOS,#21		//  get bits 22-12
 3715              		ASR	TOS,TOS,#9		//  with sign extension
 3716              		LSR	WP,WP,#15		//  get bits 11-1
 3717              		AND	WP,WP,IP		//  retain only bits 11-1
 3718              		ORR	TOS,TOS,WP		//  get bits 22-1
 3719              		NOP
 3720              		_ADR	OVER			//  a offset a
 3721              		_ADR	PLUS			//  a target-4
 3722              		_ADR	CELLP			//  a target
 3723              		_ADR	TNAME			//  a na/0 --, is it a name?
 3724              		_ADR	QDUP			//  name address or zero
 3725              		_QBRAN	DECOM1
 3726              		_ADR	SPACE			//  a na
 3727              		_ADR	DOTID			//  a --, display name
 3728              	// 	_ADR	RFROM			//  a
 3729              		_ADR	DROP
 3730              		_UNNEST
 3731              	DECOM1:	// _ADR	RFROM		//  a
 3732              		_ADR	AT			//  data
 3733              		_ADR	UDOT			//  display data
 3734              		_UNNEST
 3735              	DECOM2:
 3736              		_ADR	UDOT
 3737              	// 	_ADR	RFROM
 3738              		_ADR	DROP
 3739              		_UNNEST
 3740              	
 3741              	//    WORDS	( -- )
 3742              	// 	Display the names in the context vocabulary.
 3743              	
 3744              		.word	_DECOM
 3745              	.else 
 3746 2b88 482B0000 		.word _DOTID 
 3747              	.endif 
 3748 2b8c 05       	_WORDS:	.byte  5
 3749 2b8d 574F5244 		.ascii "WORDS"
 3749      53
 3750 2b92 00BF     		.p2align 2 	
 3751              	WORDS:
 3752 2b94 504700BF 		_NEST
 3753 2b98 611A0000 		_ADR	CR
 3754 2b9c 45120000 		_ADR	CNTXT
 3755 2ba0 F50C0000 		_ADR	AT			// only in context
 3756              	WORS1:
 3757 2ba4 750F0000 		_ADR	QDUP			// ?at end of list
 3758 2ba8 AF0C0000 		_QBRAN	WORS2
 3758      CC2B0000 
 3759 2bb0 A10D0000 		_ADR	DUPP
 3760 2bb4 D9190000 		_ADR	SPACE
 3761 2bb8 4D2B0000 		_ADR	DOTID			// display a name
 3762 2bbc 110F0000 		_ADR	CELLM
 3763 2bc0 F50C0000 		_ADR	AT
 3764 2bc4 C30C0000 		_BRAN	WORS1
ARM GAS  forth.s 			page 110


 3764      A42B0000 
 3765              	WORS2:
 3766 2bcc 030B0000 		_UNNEST
 3767              	
 3768              	// **************************************************************************
 3769              	//  cold start
 3770              	
 3771              	//    VER	 ( -- n )
 3772              	// 	Return the version number of this implementation.
 3773              	
 3774              	// 	.word	_WORDS
 3775              	// _VERSN	.byte  3
 3776              	// 	.ascii "VER"
 3777              	// 	.p2align 2 	
 3778              	VERSN:
 3779 2bd0 504700BF 		_NEST
 3780 2bd4 6D0C0000 		_DOLIT	VER*256+EXT
 3780      00010000 
 3781 2bdc 030B0000 		_UNNEST
 3782              	
 3783              	//    hi	  ( -- )
 3784              	// 	Display the sign-on message of eForth.
 3785              	
 3786 2be0 8C2B0000 		.word	_WORDS
 3787 2be4 02       	_HI:	.byte  2
 3788 2be5 4849     		.ascii "HI"
 3789 2be7 00       		.p2align 2
 3790              	
 3791              	HI:
 3792 2be8 504700BF 		_NEST
 3793 2bec 611A0000 		_ADR	CR	// initialize I/O
 3794 2bf0 C91A0000 		_DOTQP	17, "beyond Jupiter, v" 
 3794      11626579 
 3794      6F6E6420 
 3794      4A757069 
 3794      7465722C 
 3795 2c08 BD110000 		_ADR	BASE
 3796 2c0c F50C0000 		_ADR	AT
 3797 2c10 D1170000 		_ADR	HEX	// save radix
 3798 2c14 D12B0000 		_ADR	VERSN
 3799 2c18 C1160000 		_ADR	BDIGS
 3800 2c1c 0D170000 		_ADR	DIG
 3801 2c20 0D170000 		_ADR	DIG
 3802 2c24 6D0C0000 		_DOLIT	'.'
 3802      2E000000 
 3803 2c2c E1160000 		_ADR	HOLD
 3804 2c30 2D170000 		_ADR	DIGS
 3805 2c34 81170000 		_ADR	EDIGS
 3806 2c38 2D1A0000 		_ADR	TYPEE	// format version number
 3807 2c3c BD110000 		_ADR	BASE
 3808 2c40 E10C0000 		_ADR	STORE
 3809 2c44 611A0000 		_ADR	CR
 3810 2c48 030B0000 		_UNNEST			// restore radix
 3811              	
 3812              	//    COLD	( -- )
 3813              	// 	The high level cold start sequence.
 3814              	
ARM GAS  forth.s 			page 111


 3815 2c4c E42B0000 		.word	_HI
 3816 2c50 04       	_LASTN:	.byte  4
 3817 2c51 434F4C44 		.ascii "COLD"
 3818 2c55 0000BF   		.p2align 2	
 3819              	COLD:
 3820 2c58 00B5FDF7 		_CALL forth_init 
 3820      47FA5DF8 
 3820      04EB
 3821 2c62 DFF84CC0 		ldr IP,=COLD1 
 3822 2c66 FDF749BF 		_NEXT
 3823 2c6a 00BF     		.p2align 2 
 3824              	COLD1:
 3825 2c6c 6D0C0000 		_DOLIT  0 
 3825      00000000 
 3826 2c74 01000000 		_ADR ULED // turn off user LED 
 3827 2c78 6D0C0000 		_DOLIT	UZERO
 3827      0C030000 
 3828 2c80 6D0C0000 		_DOLIT	UPP
 3828      00000020 
 3829 2c88 6D0C0000 		_DOLIT	ULAST-UZERO
 3829      A0000000 
 3830 2c90 9D150000 		_ADR	MOVE 			// initialize user area
 3831 2c94 79220000 		_ADR	PRESE			// initialize stack and TIB
 3832 2c98 A9110000 		_ADR	TBOOT
 3833 2c9c 4D150000 		_ADR	ATEXE			// application boot
 3834 2ca0 71270000 		_ADR	OVERT
 3835 2ca4 C30C0000 		_BRAN	QUIT			// start interpretation
 3835      98220000 
 3836              	COLD2:
 3837              		.p2align 2 	
 3838              	CTOP:
 3839 2cac FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3840              	
 3841              	
 3842 2cb0 6C2C0000 	  .end 
ARM GAS  forth.s 			page 112


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 113


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  forth.s 			page 114


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:205    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:206    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:207    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:208    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:209    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:210    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:211    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:212    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:213    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:214    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:215    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:216    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:217    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:218    *ABS*:0000000000000004 FLASH_IRQ
ARM GAS  forth.s 			page 115


     stm32f411ce.inc:219    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:220    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:221    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:222    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:223    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:224    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:225    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:226    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:227    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:228    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:229    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:230    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:231    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:232    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:233    *ABS*:0000000000000017 EXIT9_5_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:236    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:237    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:238    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:239    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:240    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:241    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:251    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:252    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:256    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:257    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:274    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:275    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:276    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:277    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:279    *ABS*:0000000040000000 TIM2_BASE_ADR
ARM GAS  forth.s 			page 116


     stm32f411ce.inc:280    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:281    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:282    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:285    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:286    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:289    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:290    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:291    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:292    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:293    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:294    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:295    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:296    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:297    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:298    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:299    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:300    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:301    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:302    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:303    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:304    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:305    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:306    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:307    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:308    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:311    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:313    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:314    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:315    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:316    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:317    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:318    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:319    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:322    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:324    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:325    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:326    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:327    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:328    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:329    *ABS*:0000000000000014 EXTI_PR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
ARM GAS  forth.s 			page 117


          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 NBASE
          macros.inc:78     *ABS*:0000000000000018 TMP
          macros.inc:79     *ABS*:000000000000001c CSPAN
          macros.inc:80     *ABS*:0000000000000020 TOIN
          macros.inc:81     *ABS*:0000000000000024 NTIBB
          macros.inc:82     *ABS*:0000000000000028 TIBUF
             forth.s:2800   .text:0000000000002234 EVAL
             forth.s:1753   .text:00000000000016e0 HOLD
          macros.inc:85     *ABS*:0000000000000034 CTXT
          macros.inc:86     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:87     *ABS*:000000000000003c USER_CTOP
          macros.inc:88     *ABS*:0000000000000040 LASTN
          macros.inc:89     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:90     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:91     *ABS*:0000000000000054 RX_HEAD
          macros.inc:92     *ABS*:0000000000000058 RX_TAIL
          macros.inc:93     *ABS*:000000000000005c VID_CNTR
          macros.inc:94     *ABS*:0000000000000060 VID_STATE
          macros.inc:95     *ABS*:0000000000000064 VID_FIELD
          macros.inc:96     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:97     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:98     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:99     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:100    *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:101    *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:102    *ABS*:0000000000000088 ROW
          macros.inc:103    *ABS*:000000000000008c COL
          macros.inc:104    *ABS*:0000000000000090 BK_COLOR
          macros.inc:105    *ABS*:0000000000000094 PEN_COLOR
              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:253    .text:00000000000000c4 reset_handler
              init.s:157    .text:0000000000000000 default_handler
              init.s:174    .text:0000000000000020 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
             tvout.s:128    .text:0000000000000458 tv_out_isr
              init.s:191    .text:000000000000003c uart_rx_handler
           ps2_kbd.s:63     .text:0000000000000980 kbd_isr
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .text:0000000000000000 $t
              init.s:162    .text:0000000000000008 exception_msg
              init.s:229    .text:0000000000000098 uart_puts
              init.s:211    .text:000000000000006c reset_mcu
              init.s:163    .text:0000000000000008 $d
              init.s:183    .text:000000000000003a systick_exit
              init.s:208    .text:0000000000000066 user_reboot
ARM GAS  forth.s 			page 118


              init.s:219    .text:0000000000000084 user_reboot_msg
              init.s:220    .text:0000000000000084 $d
              init.s:223    .text:0000000000000096 $t
              init.s:407    .text:0000000000000242 remap
              init.s:281    .text:0000000000000114 init_devices
              init.s:376    .text:00000000000001ea uart_init
             tvout.s:62     .text:00000000000003b4 tv_init
           ps2_kbd.s:138    .text:0000000000000a54 kbd_init
              init.s:268    .text:00000000000000ec forth_init
             forth.s:3819   .text:0000000000002c58 COLD
             forth.s:85     .text:0000000000000af4 NEST
              init.s:294    .text:0000000000000132 wait_hserdy
              init.s:315    .text:0000000000000154 wait_pllrdy
              init.s:327    .text:000000000000016e wait_sws
              init.s:432    .text:0000000000000282 nvic_set_priority
              init.s:453    .text:00000000000002b4 nvic_enable_irq
              init.s:491    .text:000000000000030c UZERO
              init.s:525    .text:00000000000003ac ULAST
              init.s:441    .text:000000000000029a negative_irq
              init.s:470    .text:00000000000002e0 nvic_disable_irq
              init.s:492    .text:000000000000030c $d
             forth.s:3791   .text:0000000000002be8 HI
             forth.s:2728   .text:0000000000002150 INTER
             forth.s:3816   .text:0000000000002c50 _LASTN
             forth.s:3838   .text:0000000000002cac CTOP
              init.s:526    .text:00000000000003ac $d
           tvout.inc:2      *ABS*:0000000000000140 HRES
           tvout.inc:3      *ABS*:00000000000000c8 VRES
           tvout.inc:4      *ABS*:0000000000000004 BPP
           tvout.inc:5      *ABS*:00000000000000a0 BPR
           tvout.inc:6      *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:8      *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:9      *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:37     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:38     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:39     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:40     *ABS*:000000000000173f VIDEO_END
             tvout.s:43     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:44     *ABS*:0000000000000001 ST_PREVID
             tvout.s:45     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:46     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:48     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:49     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:62     .text:00000000000003b4 $t
             tvout.s:147    .text:0000000000000484 state_vsync
             tvout.s:188    .text:00000000000004d8 state_pre_video
             tvout.s:199    .text:00000000000004ea state_video_out
             tvout.s:229    .text:0000000000000542 state_post_video
             tvout.s:246    .text:0000000000000568 tv_isr_exit
ARM GAS  forth.s 			page 119


             tvout.s:177    .text:00000000000004be sync_end
             tvout.s:238    .text:0000000000000554 frame_end
           ps2_kbd.s:168    .text:0000000000000ab6 LINK
             tvout.s:257    .text:000000000000056a $d
             tvout.s:257    .text:000000000000056e _BACKCOLOR
             tvout.s:257    .text:000000000000057c BACKCOLOR
             forth.s:89     .text:0000000000000afc INEXT
             tvout.s:264    .text:0000000000000586 $d
             tvout.s:264    .text:000000000000058a _PENCOLOR
             tvout.s:264    .text:0000000000000594 $t
             tvout.s:264    .text:0000000000000594 PENCOLOR
             tvout.s:271    .text:000000000000059e $d
             tvout.s:271    .text:00000000000005a2 _COLUMN
             tvout.s:271    .text:00000000000005ac COLUMN
             tvout.s:278    .text:00000000000005b6 $d
             tvout.s:278    .text:00000000000005ba _CURSOR_ROW
             tvout.s:278    .text:00000000000005be $t
             tvout.s:278    .text:00000000000005c0 CURSOR_ROW
             tvout.s:285    .text:00000000000005ca $d
             tvout.s:285    .text:00000000000005ce _ROWY
             tvout.s:285    .text:00000000000005d4 $t
             tvout.s:285    .text:00000000000005d4 ROWY
             tvout.s:292    .text:00000000000005de $d
             tvout.s:292    .text:00000000000005e2 _COLX
             tvout.s:292    .text:00000000000005e8 $t
             tvout.s:292    .text:00000000000005e8 COLX
             tvout.s:299    .text:00000000000005f2 $d
             tvout.s:299    .text:00000000000005f6 _FONT
             tvout.s:299    .text:00000000000005fc FONT
             tvout.s:598    .rodata:0000000000000000 font_6x8
             tvout.s:306    .text:0000000000000604 $d
             tvout.s:306    .text:0000000000000608 _VIDBUFF
             tvout.s:306    .text:0000000000000610 $t
             tvout.s:306    .text:0000000000000610 VIDBUFF
             tvout.s:318    .text:0000000000000618 $d
             tvout.s:318    .text:000000000000061c _PLOT
             tvout.s:318    .text:0000000000000624 PLOT
             tvout.s:366    .text:00000000000006a4 plot_op
             tvout.s:334    .text:000000000000064e op_back
             tvout.s:343    .text:0000000000000668 op_pen
             tvout.s:352    .text:0000000000000682 op_invert
             tvout.s:356    .text:000000000000068a op_xor
             tvout.s:366    .text:00000000000006a4 $d
             tvout.s:371    .text:00000000000006ac _VSYNC
             tvout.s:371    .text:00000000000006b2 $t
             tvout.s:371    .text:00000000000006b4 VSYNC
             tvout.s:379    .text:00000000000006bc $d
             tvout.s:379    .text:00000000000006c0 _CLS
             tvout.s:379    .text:00000000000006c4 $t
             tvout.s:379    .text:00000000000006c4 CLS
             tvout.s:403    .text:0000000000000704 $d
             tvout.s:403    .text:0000000000000708 _CLRLINE
             tvout.s:403    .text:0000000000000710 $t
             tvout.s:403    .text:0000000000000710 CLRLINE
             tvout.s:405    .text:0000000000000714 $d
             forth.s:253    .text:0000000000000c6c DOLIT
             forth.s:469    .text:0000000000000da0 DUPP
ARM GAS  forth.s 			page 120


             forth.s:411    .text:0000000000000d48 TOR
             forth.s:617    .text:0000000000000e84 STAR
             forth.s:593    .text:0000000000000e64 PLUS
             forth.s:387    .text:0000000000000d20 RFROM
             forth.s:1653   .text:00000000000015d0 FILL
             forth.s:92     .text:0000000000000b02 UNNEST
             tvout.s:418    .text:0000000000000748 _SCROLLUP
             tvout.s:418    .text:0000000000000754 SCROLLUP
             tvout.s:420    .text:0000000000000758 $d
             forth.s:480    .text:0000000000000db0 SWAP
             forth.s:605    .text:0000000000000e74 SUBB
             forth.s:1629   .text:000000000000159c MOVE
             tvout.s:437    .text:00000000000007a0 _RIGHT
             tvout.s:437    .text:00000000000007a6 $t
             tvout.s:437    .text:00000000000007a8 RIGHT
             tvout.s:448    .text:00000000000007c4 TVCR
             tvout.s:448    .text:00000000000007ba $d
             tvout.s:448    .text:00000000000007be _TVCR
             tvout.s:448    .text:00000000000007c4 $t
             tvout.s:463    .text:00000000000007e8 $d
             tvout.s:468    .text:00000000000007f0 FONT_PIXEL
             tvout.s:469    .text:00000000000007f0 $t
             tvout.s:475    .text:00000000000007fe INCR_X
             tvout.s:482    .text:0000000000000808 NEXT_PIXEL
             tvout.s:491    .text:000000000000080e CHAR_ROW
             tvout.s:493    .text:0000000000000812 $d
             forth.s:840    .text:0000000000000fd8 DDUP
             forth.s:399    .text:0000000000000d34 RAT
             forth.s:280    .text:0000000000000c90 DONXT
             forth.s:828    .text:0000000000000fc4 TDROP
             tvout.s:510    .text:000000000000084e CHAR_FONT
             tvout.s:511    .text:000000000000084e $t
             tvout.s:522    .text:0000000000000860 $d
             tvout.s:522    .text:0000000000000864 _TVPUTC
             tvout.s:522    .text:000000000000086c $t
             tvout.s:522    .text:000000000000086c TVPUTC
             tvout.s:524    .text:0000000000000870 $d
             forth.s:352    .text:0000000000000cf4 AT
             forth.s:792    .text:0000000000000f88 ROT
             forth.s:376    .text:0000000000000d14 CAT
             forth.s:657    .text:0000000000000ec0 ONEP
             tvout.s:549    .text:00000000000008d4 _PRINT
             tvout.s:549    .text:00000000000008da $t
             tvout.s:549    .text:00000000000008dc PRINT
             tvout.s:551    .text:00000000000008e0 $d
             forth.s:1049   .text:0000000000001124 COUNT
             forth.s:668    .text:0000000000000ed0 ONEM
             forth.s:458    .text:0000000000000d90 DROP
             tvout.s:564    .text:0000000000000910 _CURPOS
             tvout.s:564    .text:0000000000000918 CURPOS
             tvout.s:579    .text:000000000000093a $d
             tvout.s:579    .text:000000000000093e _INPUT
             tvout.s:579    .text:0000000000000944 $t
             tvout.s:579    .text:0000000000000944 INPUT
             tvout.s:581    .text:0000000000000948 $d
             forth.s:1564   .text:0000000000001514 PAD
             forth.s:2632   .text:000000000000203c ACCEP
ARM GAS  forth.s 			page 121


             forth.s:493    .text:0000000000000dc4 OVER
             forth.s:363    .text:0000000000000d00 CSTOR
             tvout.s:594    .rodata:0000000000000000 $d
             tvout.s:699    .text:0000000000000974 $d
           ps2_kbd.s:49     *ABS*:0000000000000001 KBD_PAR_ERR
           ps2_kbd.s:50     *ABS*:0000000000000002 KBD_FRAME_ERR
           ps2_kbd.s:51     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:52     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:53     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:54     *ABS*:000000000000006f KBD_PARITY
           ps2_kbd.s:63     .text:0000000000000980 $t
           ps2_kbd.s:89     .text:00000000000009d4 start_bit
           ps2_kbd.s:98     .text:00000000000009f0 parity_bit
           ps2_kbd.s:108    .text:0000000000000a10 stop_bit
           ps2_kbd.s:152    .text:0000000000000a74 $d
           ps2_kbd.s:152    .text:0000000000000a78 _KEYERRQ
           ps2_kbd.s:152    .text:0000000000000a84 KEYERRQ
           ps2_kbd.s:160    .text:0000000000000a92 $d
           ps2_kbd.s:160    .text:0000000000000a96 _KEY_RST_ERR
           ps2_kbd.s:160    .text:0000000000000aa2 $t
           ps2_kbd.s:160    .text:0000000000000aa4 KEY_RST_ERR
           ps2_kbd.s:168    .text:0000000000000ab2 $d
           ps2_kbd.s:168    .text:0000000000000ab6 _KEYCODE
           ps2_kbd.s:168    .text:0000000000000abe $t
           ps2_kbd.s:168    .text:0000000000000ac0 KEYCODE
             forth.s:75     .text:0000000000000ae8 TPUSH
             forth.s:80     .text:0000000000000aee TPOP
             forth.s:105    .text:0000000000000b0c COMPI_NEST
             forth.s:121    .text:0000000000000b2a $d
             forth.s:122    .text:0000000000000b2e _RAND
             forth.s:125    .text:0000000000000b38 RAND
             forth.s:127    .text:0000000000000b3c $d
             forth.s:891    .text:000000000000102c ABSS
             forth.s:1109   .text:000000000000116c SEED
             forth.s:581    .text:0000000000000e54 LSHIFT
             forth.s:542    .text:0000000000000e0c XORR
             forth.s:569    .text:0000000000000e3c RSHIFT
             forth.s:339    .text:0000000000000ce0 STORE
             forth.s:518    .text:0000000000000de4 ANDD
             forth.s:1424   .text:00000000000013d0 MODD
             forth.s:155    .text:0000000000000bac _PAUSE
             forth.s:157    .text:0000000000000bb2 $t
             forth.s:158    .text:0000000000000bb4 PAUSE
             forth.s:160    .text:0000000000000bb8 $d
             forth.s:1131   .text:0000000000001194 TIMER
             forth.s:162    .text:0000000000000bc0 PAUSE_LOOP
             forth.s:301    .text:0000000000000cae QBRAN
             forth.s:167    .text:0000000000000bd8 PAUSE_EXIT
             forth.s:318    .text:0000000000000cc2 BRAN
             forth.s:173    .text:0000000000000be0 _ULED
             forth.s:177    .text:0000000000000be8 ULED
             forth.s:186    .text:0000000000000c04 ULED_OFF
             forth.s:192    .text:0000000000000c08 $d
             forth.s:193    .text:0000000000000c0c _QRX
             forth.s:196    .text:0000000000000c14 QKEY
             forth.s:197    .text:0000000000000c14 QRX
             forth.s:216    .text:0000000000000c3e $d
ARM GAS  forth.s 			page 122


             forth.s:217    .text:0000000000000c42 _TXSTO
             forth.s:220    .text:0000000000000c48 TXSTO
             forth.s:221    .text:0000000000000c48 EMIT
             forth.s:222    .text:0000000000000c48 TECHO
             forth.s:238    .text:0000000000000c60 $d
             forth.s:239    .text:0000000000000c64 _NOP
             forth.s:241    .text:0000000000000c68 $t
             forth.s:242    .text:0000000000000c68 NOP
             forth.s:261    .text:0000000000000c76 $d
             forth.s:262    .text:0000000000000c7a _EXECU
             forth.s:264    .text:0000000000000c82 $t
             forth.s:265    .text:0000000000000c84 EXECU
             forth.s:287    .text:0000000000000ca0 NEXT1
             forth.s:307    .text:0000000000000cbc QBRAN1
             forth.s:325    .text:0000000000000cc8 $d
             forth.s:326    .text:0000000000000ccc _EXIT
             forth.s:329    .text:0000000000000cd4 EXIT
             forth.s:330    .text:0000000000000cd4 $d
             forth.s:336    .text:0000000000000cdc _STORE
             forth.s:338    .text:0000000000000cde $t
             forth.s:348    .text:0000000000000cec $d
             forth.s:349    .text:0000000000000cf0 _AT
             forth.s:351    .text:0000000000000cf2 $t
             forth.s:359    .text:0000000000000cf8 $d
             forth.s:360    .text:0000000000000cfc _CSTOR
             forth.s:372    .text:0000000000000d0c $d
             forth.s:373    .text:0000000000000d10 _CAT
             forth.s:383    .text:0000000000000d18 $d
             forth.s:384    .text:0000000000000d1c _RFROM
             forth.s:395    .text:0000000000000d2a $d
             forth.s:396    .text:0000000000000d2e _RAT
             forth.s:407    .text:0000000000000d3e $d
             forth.s:408    .text:0000000000000d42 _TOR
             forth.s:418    .text:0000000000000d52 $d
             forth.s:419    .text:0000000000000d56 _RPSTOR
             forth.s:421    .text:0000000000000d5a $t
             forth.s:422    .text:0000000000000d5c RPSTOR
             forth.s:430    .text:0000000000000d64 $d
             forth.s:431    .text:0000000000000d68 _SPSTOR
             forth.s:433    .text:0000000000000d6c $t
             forth.s:434    .text:0000000000000d6c SPSTOR
             forth.s:442    .text:0000000000000d74 $d
             forth.s:443    .text:0000000000000d78 _SPAT
             forth.s:445    .text:0000000000000d7c $t
             forth.s:446    .text:0000000000000d7c SPAT
             forth.s:454    .text:0000000000000d84 $d
             forth.s:455    .text:0000000000000d88 _DROP
             forth.s:465    .text:0000000000000d96 $d
             forth.s:466    .text:0000000000000d9a _DUPP
             forth.s:468    .text:0000000000000d9e $t
             forth.s:476    .text:0000000000000da6 $d
             forth.s:477    .text:0000000000000daa _SWAP
             forth.s:489    .text:0000000000000db8 $d
             forth.s:490    .text:0000000000000dbc _OVER
             forth.s:501    .text:0000000000000dcc $d
             forth.s:502    .text:0000000000000dd0 _ZLESS
             forth.s:505    .text:0000000000000dd4 ZLESS
ARM GAS  forth.s 			page 123


             forth.s:514    .text:0000000000000dda $d
             forth.s:515    .text:0000000000000dde _ANDD
             forth.s:517    .text:0000000000000de2 $t
             forth.s:526    .text:0000000000000dee $d
             forth.s:527    .text:0000000000000df2 _ORR
             forth.s:530    .text:0000000000000df8 ORR
             forth.s:538    .text:0000000000000e02 $d
             forth.s:539    .text:0000000000000e06 _XORR
             forth.s:541    .text:0000000000000e0a $t
             forth.s:550    .text:0000000000000e16 $d
             forth.s:551    .text:0000000000000e1a _UPLUS
             forth.s:553    .text:0000000000000e1e $t
             forth.s:554    .text:0000000000000e20 UPLUS
             forth.s:565    .text:0000000000000e30 $d
             forth.s:566    .text:0000000000000e34 _RSHIFT
             forth.s:577    .text:0000000000000e46 $d
             forth.s:578    .text:0000000000000e4a _LSHIFT
             forth.s:589    .text:0000000000000e5e $d
             forth.s:590    .text:0000000000000e62 _PLUS
             forth.s:592    .text:0000000000000e64 $t
             forth.s:601    .text:0000000000000e6c $d
             forth.s:602    .text:0000000000000e70 _SUBB
             forth.s:604    .text:0000000000000e72 $t
             forth.s:613    .text:0000000000000e7e $d
             forth.s:614    .text:0000000000000e82 _STAR
             forth.s:616    .text:0000000000000e84 $t
             forth.s:625    .text:0000000000000e8e $d
             forth.s:626    .text:0000000000000e92 _UMSTA
             forth.s:628    .text:0000000000000e96 $t
             forth.s:629    .text:0000000000000e98 UMSTA
             forth.s:639    .text:0000000000000ea4 $d
             forth.s:640    .text:0000000000000ea8 _MSTAR
             forth.s:643    .text:0000000000000eac MSTAR
             forth.s:653    .text:0000000000000eb8 $d
             forth.s:654    .text:0000000000000ebc _ONEP
             forth.s:664    .text:0000000000000ec6 $d
             forth.s:665    .text:0000000000000eca _ONEM
             forth.s:675    .text:0000000000000ed6 $d
             forth.s:676    .text:0000000000000eda _TWOP
             forth.s:679    .text:0000000000000ee0 TWOP
             forth.s:686    .text:0000000000000ee6 $d
             forth.s:687    .text:0000000000000eea _TWOM
             forth.s:690    .text:0000000000000ef0 TWOM
             forth.s:697    .text:0000000000000ef6 $d
             forth.s:698    .text:0000000000000efa _CELLP
             forth.s:700    .text:0000000000000f00 $t
             forth.s:701    .text:0000000000000f00 CELLP
             forth.s:708    .text:0000000000000f06 $d
             forth.s:709    .text:0000000000000f0a _CELLM
             forth.s:711    .text:0000000000000f10 $t
             forth.s:712    .text:0000000000000f10 CELLM
             forth.s:719    .text:0000000000000f16 $d
             forth.s:720    .text:0000000000000f1a _BLANK
             forth.s:723    .text:0000000000000f20 BLANK
             forth.s:731    .text:0000000000000f2a $d
             forth.s:732    .text:0000000000000f2e _CELLS
             forth.s:734    .text:0000000000000f34 $t
ARM GAS  forth.s 			page 124


             forth.s:735    .text:0000000000000f34 CELLS
             forth.s:742    .text:0000000000000f3a $d
             forth.s:743    .text:0000000000000f3e _CELLSL
             forth.s:745    .text:0000000000000f44 $t
             forth.s:746    .text:0000000000000f44 CELLSL
             forth.s:753    .text:0000000000000f4a $d
             forth.s:754    .text:0000000000000f4e _TWOST
             forth.s:757    .text:0000000000000f54 TWOST
             forth.s:764    .text:0000000000000f5a $d
             forth.s:765    .text:0000000000000f5e _TWOSL
             forth.s:768    .text:0000000000000f64 TWOSL
             forth.s:775    .text:0000000000000f6a $d
             forth.s:776    .text:0000000000000f6e _QDUP
             forth.s:779    .text:0000000000000f74 QDUP
             forth.s:788    .text:0000000000000f7e $d
             forth.s:789    .text:0000000000000f82 _ROT
             forth.s:791    .text:0000000000000f86 $t
             forth.s:801    .text:0000000000000f92 $d
             forth.s:802    .text:0000000000000f96 _NROT
             forth.s:805    .text:0000000000000f9c NROT
             forth.s:815    .text:0000000000000fa6 $d
             forth.s:816    .text:0000000000000faa _DDROP
             forth.s:818    .text:0000000000000fb0 $t
             forth.s:819    .text:0000000000000fb0 DDROP
             forth.s:824    .text:0000000000000fba $d
             forth.s:825    .text:0000000000000fbe _TDROP
             forth.s:827    .text:0000000000000fc4 $t
             forth.s:836    .text:0000000000000fce $d
             forth.s:837    .text:0000000000000fd2 _DDUP
             forth.s:849    .text:0000000000000fe4 $d
             forth.s:850    .text:0000000000000fe8 _DPLUS
             forth.s:853    .text:0000000000000fec DPLUS
             forth.s:865    .text:0000000000001000 $d
             forth.s:866    .text:0000000000001004 _INVER
             forth.s:868    .text:0000000000001008 $t
             forth.s:869    .text:0000000000001008 INVER
             forth.s:876    .text:000000000000100e $d
             forth.s:877    .text:0000000000001012 _NEGAT
             forth.s:880    .text:000000000000101c NEGAT
             forth.s:887    .text:0000000000001022 $d
             forth.s:888    .text:0000000000001026 _ABSS
             forth.s:890    .text:000000000000102a $t
             forth.s:900    .text:0000000000001036 $d
             forth.s:901    .text:000000000000103a _ZEQUAL
             forth.s:904    .text:0000000000001040 ZEQUAL
             forth.s:914    .text:000000000000104e $d
             forth.s:915    .text:0000000000001052 _EQUAL
             forth.s:917    .text:0000000000001054 $t
             forth.s:918    .text:0000000000001054 EQUAL
             forth.s:929    .text:0000000000001064 $d
             forth.s:930    .text:0000000000001068 _ULESS
             forth.s:933    .text:000000000000106c ULESS
             forth.s:944    .text:000000000000107c $d
             forth.s:945    .text:0000000000001080 _LESS
             forth.s:947    .text:0000000000001082 $t
             forth.s:948    .text:0000000000001084 LESS
             forth.s:959    .text:0000000000001094 $d
ARM GAS  forth.s 			page 125


             forth.s:960    .text:0000000000001098 _GREAT
             forth.s:962    .text:000000000000109a $t
             forth.s:963    .text:000000000000109c GREAT
             forth.s:974    .text:00000000000010ac $d
             forth.s:975    .text:00000000000010b0 _MAX
             forth.s:977    .text:00000000000010b4 $t
             forth.s:978    .text:00000000000010b4 MAX
             forth.s:988    .text:00000000000010c0 $d
             forth.s:989    .text:00000000000010c4 _MIN
             forth.s:991    .text:00000000000010c8 $t
             forth.s:992    .text:00000000000010c8 MIN
             forth.s:1002   .text:00000000000010d4 $d
             forth.s:1003   .text:00000000000010d8 _PSTOR
             forth.s:1006   .text:00000000000010dc PSTOR
             forth.s:1017   .text:00000000000010ec $d
             forth.s:1018   .text:00000000000010f0 _DSTOR
             forth.s:1021   .text:00000000000010f4 DSTOR
             forth.s:1032   .text:0000000000001108 $d
             forth.s:1033   .text:000000000000110c _DAT
             forth.s:1036   .text:0000000000001110 DAT
             forth.s:1045   .text:000000000000111a $d
             forth.s:1046   .text:000000000000111e _COUNT
             forth.s:1048   .text:0000000000001124 $t
             forth.s:1058   .text:0000000000001130 $d
             forth.s:1059   .text:0000000000001134 _DNEGA
             forth.s:1061   .text:000000000000113c $t
             forth.s:1062   .text:000000000000113c DNEGA
             forth.s:1080   .text:000000000000114c DOVAR
             forth.s:1093   .text:0000000000001158 DOCON
             forth.s:1105   .text:0000000000001162 $d
             forth.s:1106   .text:0000000000001166 _SEED
             forth.s:1116   .text:0000000000001176 $d
             forth.s:1117   .text:000000000000117a _MSEC
             forth.s:1120   .text:0000000000001180 MSEC
             forth.s:1127   .text:000000000000118a $d
             forth.s:1128   .text:000000000000118e _TIMER
             forth.s:1130   .text:0000000000001194 $t
             forth.s:1139   .text:000000000000119e $d
             forth.s:1140   .text:00000000000011a2 _TBOOT
             forth.s:1142   .text:00000000000011a8 $t
             forth.s:1143   .text:00000000000011a8 TBOOT
             forth.s:1151   .text:00000000000011b2 $d
             forth.s:1152   .text:00000000000011b6 _BASE
             forth.s:1155   .text:00000000000011bc BASE
             forth.s:1167   .text:00000000000011c6 TEMP
             forth.s:1175   .text:00000000000011d0 $d
             forth.s:1176   .text:00000000000011d4 _SPAN
             forth.s:1179   .text:00000000000011dc SPAN
             forth.s:1187   .text:00000000000011e6 $d
             forth.s:1188   .text:00000000000011ea _INN
             forth.s:1190   .text:00000000000011ee $t
             forth.s:1191   .text:00000000000011f0 INN
             forth.s:1199   .text:00000000000011fa $d
             forth.s:1200   .text:00000000000011fe _NTIB
             forth.s:1203   .text:0000000000001204 NTIB
             forth.s:1211   .text:000000000000120e $d
             forth.s:1212   .text:0000000000001212 _TEVAL
ARM GAS  forth.s 			page 126


             forth.s:1214   .text:0000000000001218 $t
             forth.s:1215   .text:0000000000001218 TEVAL
             forth.s:1223   .text:0000000000001222 $d
             forth.s:1224   .text:0000000000001226 _HLD
             forth.s:1226   .text:000000000000122a $t
             forth.s:1227   .text:000000000000122c HLD
             forth.s:1235   .text:0000000000001236 $d
             forth.s:1236   .text:000000000000123a _CNTXT
             forth.s:1238   .text:0000000000001242 $t
             forth.s:1239   .text:0000000000001244 CNTXT
             forth.s:1240   .text:0000000000001244 CRRNT
             forth.s:1248   .text:000000000000124e $d
             forth.s:1249   .text:0000000000001252 _CP
             forth.s:1252   .text:0000000000001258 CPP
             forth.s:1259   .text:0000000000001262 $d
             forth.s:1260   .text:0000000000001266 _FCP
             forth.s:1262   .text:000000000000126a $t
             forth.s:1263   .text:000000000000126c FCP
             forth.s:1271   .text:0000000000001276 $d
             forth.s:1272   .text:000000000000127a _LAST
             forth.s:1275   .text:0000000000001280 LAST
             forth.s:1287   .text:000000000000128a $d
             forth.s:1288   .text:000000000000128e _USER_BGN
             forth.s:1291   .text:000000000000129c USER_BEGIN
             forth.s:1295   .text:00000000000012a4 USR_BGN_ADR
             forth.s:1296   .text:00000000000012a4 $d
             forth.s:1301   .text:00000000000012ac _USER_END
             forth.s:1304   .text:00000000000012b8 USER_END
             forth.s:1308   .text:00000000000012c0 USER_END_ADR
             forth.s:1309   .text:00000000000012c0 $d
             forth.s:1320   .text:00000000000012c8 _WITHI
             forth.s:1323   .text:00000000000012d0 WITHI
             forth.s:1325   .text:00000000000012d4 $d
             forth.s:1339   .text:00000000000012f4 _UMMOD
             forth.s:1342   .text:00000000000012fc UMMOD
             forth.s:1346   .text:0000000000001306 UMMOD0
             forth.s:1353   .text:0000000000001316 UMMOD1
             forth.s:1359   .text:0000000000001320 UMMOD2
             forth.s:1369   .text:000000000000132c $d
             forth.s:1370   .text:0000000000001330 _MSMOD
             forth.s:1372   .text:0000000000001336 $t
             forth.s:1373   .text:0000000000001338 MSMOD
             forth.s:1375   .text:000000000000133c $d
             forth.s:1384   .text:0000000000001364 MMOD1
             forth.s:1391   .text:0000000000001380 MMOD2
             forth.s:1399   .text:00000000000013a0 MMOD3
             forth.s:1406   .text:00000000000013a8 _SLMOD
             forth.s:1409   .text:00000000000013b0 SLMOD
             forth.s:1411   .text:00000000000013b4 $d
             forth.s:1421   .text:00000000000013cc _MODD
             forth.s:1423   .text:00000000000013d0 $t
             forth.s:1426   .text:00000000000013d4 $d
             forth.s:1434   .text:00000000000013e4 _SLASH
             forth.s:1436   .text:00000000000013e6 $t
             forth.s:1437   .text:00000000000013e8 SLASH
             forth.s:1439   .text:00000000000013ec $d
             forth.s:1448   .text:0000000000001400 _SSMOD
ARM GAS  forth.s 			page 127


             forth.s:1450   .text:0000000000001406 $t
             forth.s:1451   .text:0000000000001408 SSMOD
             forth.s:1453   .text:000000000000140c $d
             forth.s:1463   .text:0000000000001424 _STASL
             forth.s:1466   .text:0000000000001428 STASL
             forth.s:1468   .text:000000000000142c $d
             forth.s:1480   .text:0000000000001440 _ALGND
             forth.s:1482   .text:0000000000001448 $t
             forth.s:1483   .text:0000000000001448 ALGND
             forth.s:1492   .text:0000000000001458 $d
             forth.s:1493   .text:000000000000145c _TCHAR
             forth.s:1495   .text:0000000000001462 $t
             forth.s:1496   .text:0000000000001464 TCHAR
             forth.s:1498   .text:0000000000001468 $d
             forth.s:1508   .text:00000000000014a0 TCHA1
             forth.s:1515   .text:00000000000014a8 _DEPTH
             forth.s:1517   .text:00000000000014ae $t
             forth.s:1518   .text:00000000000014b0 DEPTH
             forth.s:1528   .text:00000000000014c8 $d
             forth.s:1529   .text:00000000000014cc _PICK
             forth.s:1532   .text:00000000000014d4 PICK
             forth.s:1534   .text:00000000000014d8 $d
             forth.s:1548   .text:00000000000014f4 _HERE
             forth.s:1551   .text:00000000000014fc HERE
             forth.s:1553   .text:0000000000001500 $d
             forth.s:1561   .text:0000000000001510 _PAD
             forth.s:1563   .text:0000000000001514 $t
             forth.s:1566   .text:0000000000001518 $d
             forth.s:1575   .text:0000000000001530 _TIB
             forth.s:1577   .text:0000000000001534 $t
             forth.s:1578   .text:0000000000001534 TIB
             forth.s:1586   .text:000000000000153e $d
             forth.s:1587   .text:0000000000001542 _ATEXE
             forth.s:1590   .text:000000000000154c ATEXE
             forth.s:1602   .text:0000000000001560 $d
             forth.s:1603   .text:0000000000001564 _CMOVE
             forth.s:1605   .text:000000000000156a $t
             forth.s:1606   .text:000000000000156c CMOVE
             forth.s:1613   .text:000000000000157e CMOV1
             forth.s:1610   .text:0000000000001576 CMOV0
             forth.s:1618   .text:0000000000001588 CMOV2
             forth.s:1625   .text:0000000000001590 $d
             forth.s:1626   .text:0000000000001594 _MOVE
             forth.s:1637   .text:00000000000015b2 MOVE1
             forth.s:1634   .text:00000000000015aa MOVE0
             forth.s:1642   .text:00000000000015bc MOVE2
             forth.s:1649   .text:00000000000015c4 $d
             forth.s:1650   .text:00000000000015c8 _FILL
             forth.s:1661   .text:00000000000015de FILL2
             forth.s:1657   .text:00000000000015d6 FILL1
             forth.s:1668   .text:00000000000015e6 $d
             forth.s:1669   .text:00000000000015ea _PACKS
             forth.s:1672   .text:00000000000015f4 PACKS
             forth.s:1674   .text:00000000000015f8 $d
             forth.s:1701   .text:0000000000001650 _DIGIT
             forth.s:1703   .text:0000000000001656 $t
             forth.s:1704   .text:0000000000001658 DIGIT
ARM GAS  forth.s 			page 128


             forth.s:1706   .text:000000000000165c $d
             forth.s:1720   .text:0000000000001690 _EXTRC
             forth.s:1722   .text:0000000000001698 $t
             forth.s:1723   .text:0000000000001698 EXTRC
             forth.s:1725   .text:000000000000169c $d
             forth.s:1736   .text:00000000000016bc _BDIGS
             forth.s:1739   .text:00000000000016c0 BDIGS
             forth.s:1741   .text:00000000000016c4 $d
             forth.s:1750   .text:00000000000016d8 _HOLD
             forth.s:1755   .text:00000000000016e4 $d
             forth.s:1768   .text:0000000000001708 _DIG
             forth.s:1770   .text:000000000000170a $t
             forth.s:1771   .text:000000000000170c DIG
             forth.s:1773   .text:0000000000001710 $d
             forth.s:1783   .text:0000000000001728 _DIGS
             forth.s:1786   .text:000000000000172c DIGS
             forth.s:1788   .text:0000000000001730 DIGS1
             forth.s:1789   .text:0000000000001730 $d
             forth.s:1793   .text:0000000000001748 DIGS2
             forth.s:1800   .text:0000000000001750 _SIGN
             forth.s:1803   .text:0000000000001758 SIGN
             forth.s:1805   .text:000000000000175c $d
             forth.s:1809   .text:0000000000001774 SIGN1
             forth.s:1816   .text:000000000000177c _EDIGS
             forth.s:1819   .text:0000000000001780 EDIGS
             forth.s:1821   .text:0000000000001784 $d
             forth.s:1836   .text:00000000000017a0 STRR
             forth.s:1837   .text:00000000000017a0 $t
             forth.s:1838   .text:00000000000017a4 $d
             forth.s:1852   .text:00000000000017cc _HEX
             forth.s:1854   .text:00000000000017d0 $t
             forth.s:1855   .text:00000000000017d0 HEX
             forth.s:1857   .text:00000000000017d4 $d
             forth.s:1866   .text:00000000000017ec _DECIM
             forth.s:1868   .text:00000000000017f4 $t
             forth.s:1869   .text:00000000000017f4 DECIM
             forth.s:1871   .text:00000000000017f8 $d
             forth.s:1883   .text:0000000000001810 _DIGTQ
             forth.s:1886   .text:0000000000001818 DIGTQ
             forth.s:1888   .text:000000000000181c $d
             forth.s:1901   .text:0000000000001864 DGTQ1
             forth.s:1911   .text:0000000000001878 _NUMBQ
             forth.s:1913   .text:0000000000001880 $t
             forth.s:1914   .text:0000000000001880 NUMBQ
             forth.s:1916   .text:0000000000001884 $d
             forth.s:1932   .text:00000000000018d0 NUMQ1
             forth.s:1980   .text:0000000000001998 NUMQ6
             forth.s:1948   .text:0000000000001914 NUMQ2
             forth.s:1972   .text:000000000000197c NUMQ4
             forth.s:1969   .text:0000000000001970 NUMQ3
             forth.s:1978   .text:0000000000001994 NUMQ5
             forth.s:1995   .text:00000000000019b4 _KEY
             forth.s:1997   .text:00000000000019b8 $t
             forth.s:1998   .text:00000000000019b8 KEY
             forth.s:2000   .text:00000000000019bc KEY1
             forth.s:2001   .text:00000000000019bc $d
             forth.s:2009   .text:00000000000019d0 _SPACE
ARM GAS  forth.s 			page 129


             forth.s:2011   .text:00000000000019d6 $t
             forth.s:2012   .text:00000000000019d8 SPACE
             forth.s:2014   .text:00000000000019dc $d
             forth.s:2022   .text:00000000000019ec _SPACS
             forth.s:2025   .text:00000000000019f4 SPACS
             forth.s:2027   .text:00000000000019f8 $d
             forth.s:2033   .text:0000000000001a14 CHAR2
             forth.s:2031   .text:0000000000001a10 CHAR1
             forth.s:2041   .text:0000000000001a24 _TYPEE
             forth.s:2044   .text:0000000000001a2c TYPEE
             forth.s:2046   .text:0000000000001a30 $d
             forth.s:2052   .text:0000000000001a48 TYPE2
             forth.s:2048   .text:0000000000001a3c TYPE1
             forth.s:2061   .text:0000000000001a5c _CR
             forth.s:2064   .text:0000000000001a60 CR
             forth.s:2066   .text:0000000000001a64 $d
             forth.s:2080   .text:0000000000001a80 DOSTR
             forth.s:2081   .text:0000000000001a80 $t
             forth.s:2083   .text:0000000000001a84 $d
             forth.s:2102   .text:0000000000001aac STRQP
             forth.s:2103   .text:0000000000001aac $t
             forth.s:2104   .text:0000000000001ab0 $d
             forth.s:2114   .text:0000000000001ab8 DOTST
             forth.s:2115   .text:0000000000001ab8 $t
             forth.s:2116   .text:0000000000001abc $d
             forth.s:2127   .text:0000000000001ac8 DOTQP
             forth.s:2128   .text:0000000000001ac8 $t
             forth.s:2129   .text:0000000000001acc $d
             forth.s:2137   .text:0000000000001adc _DOTR
             forth.s:2140   .text:0000000000001ae0 DOTR
             forth.s:2142   .text:0000000000001ae4 $d
             forth.s:2155   .text:0000000000001b08 _UDOTR
             forth.s:2157   .text:0000000000001b0c $t
             forth.s:2158   .text:0000000000001b0c UDOTR
             forth.s:2160   .text:0000000000001b10 $d
             forth.s:2175   .text:0000000000001b3c _UDOT
             forth.s:2178   .text:0000000000001b40 UDOT
             forth.s:2180   .text:0000000000001b44 $d
             forth.s:2191   .text:0000000000001b60 _DOT
             forth.s:2193   .text:0000000000001b62 $t
             forth.s:2194   .text:0000000000001b64 DOT
             forth.s:2196   .text:0000000000001b68 $d
             forth.s:2203   .text:0000000000001b8c DOT1
             forth.s:2213   .text:0000000000001ba0 _QUEST
             forth.s:2215   .text:0000000000001ba2 $t
             forth.s:2216   .text:0000000000001ba4 QUEST
             forth.s:2218   .text:0000000000001ba8 $d
             forth.s:2232   .text:0000000000001bb4 PARS
             forth.s:2233   .text:0000000000001bb4 $t
             forth.s:2234   .text:0000000000001bb8 $d
             forth.s:2300   .text:0000000000001cc8 PARS8
             forth.s:2264   .text:0000000000001c3c PARS3
             forth.s:2247   .text:0000000000001bf4 PARS1
             forth.s:2262   .text:0000000000001c38 PARS2
             forth.s:2268   .text:0000000000001c48 PARS4
             forth.s:2280   .text:0000000000001c78 PARS5
             forth.s:2287   .text:0000000000001c9c PARS6
ARM GAS  forth.s 			page 130


             forth.s:2293   .text:0000000000001cb0 PARS7
             forth.s:2310   .text:0000000000001cdc _PARSE
             forth.s:2312   .text:0000000000001ce2 $t
             forth.s:2313   .text:0000000000001ce4 PARSE
             forth.s:2315   .text:0000000000001ce8 $d
             forth.s:2335   .text:0000000000001d28 _DOTPR
             forth.s:2338   .text:0000000000001d2c DOTPR
             forth.s:2340   .text:0000000000001d30 $d
             forth.s:2349   .text:0000000000001d48 _PAREN
             forth.s:2351   .text:0000000000001d4a $t
             forth.s:2352   .text:0000000000001d4c PAREN
             forth.s:2354   .text:0000000000001d50 $d
             forth.s:2363   .text:0000000000001d68 _BKSLA
             forth.s:2365   .text:0000000000001d6a $t
             forth.s:2366   .text:0000000000001d6c BKSLA
             forth.s:2368   .text:0000000000001d70 $d
             forth.s:2378   .text:0000000000001d88 _CHAR
             forth.s:2381   .text:0000000000001d90 CHAR
             forth.s:2383   .text:0000000000001d94 $d
             forth.s:2393   .text:0000000000001dac _WORDD
             forth.s:2396   .text:0000000000001db4 WORDD
             forth.s:2398   .text:0000000000001db8 $d
             forth.s:2408   .text:0000000000001dd0 _TOKEN
             forth.s:2410   .text:0000000000001dd6 $t
             forth.s:2411   .text:0000000000001dd8 TOKEN
             forth.s:2413   .text:0000000000001ddc $d
             forth.s:2424   .text:0000000000001dec _NAMET
             forth.s:2426   .text:0000000000001df2 $t
             forth.s:2427   .text:0000000000001df4 NAMET
             forth.s:2429   .text:0000000000001df8 $d
             forth.s:2445   .text:0000000000001e18 _SAMEQ
             forth.s:2447   .text:0000000000001e1e $t
             forth.s:2448   .text:0000000000001e20 SAMEQ
             forth.s:2450   .text:0000000000001e24 $d
             forth.s:2467   .text:0000000000001e6c SAME2
             forth.s:2452   .text:0000000000001e30 SAME1
             forth.s:2482   .text:0000000000001e80 FIND
             forth.s:2483   .text:0000000000001e80 $t
             forth.s:2484   .text:0000000000001e84 $d
             forth.s:2491   .text:0000000000001ea0 FIND1
             forth.s:2511   .text:0000000000001ef8 FIND6
             forth.s:2504   .text:0000000000001ee0 FIND2
             forth.s:2509   .text:0000000000001ef0 FIND3
             forth.s:2518   .text:0000000000001f10 FIND4
             forth.s:2524   .text:0000000000001f2c FIND5
             forth.s:2539   .text:0000000000001f54 _NAMEQ
             forth.s:2541   .text:0000000000001f5a $t
             forth.s:2542   .text:0000000000001f5c NAMEQ
             forth.s:2544   .text:0000000000001f60 $d
             forth.s:2559   .text:0000000000001f70 BKSP
             forth.s:2560   .text:0000000000001f70 $t
             forth.s:2561   .text:0000000000001f74 $d
             forth.s:2575   .text:0000000000001fb8 BACK1
             forth.s:2585   .text:0000000000001fbc TAP
             forth.s:2586   .text:0000000000001fbc $t
             forth.s:2587   .text:0000000000001fc0 $d
             forth.s:2601   .text:0000000000001fd8 KTAP
ARM GAS  forth.s 			page 131


             forth.s:2602   .text:0000000000001fd8 TTAP
             forth.s:2603   .text:0000000000001fd8 $t
             forth.s:2604   .text:0000000000001fdc $d
             forth.s:2618   .text:000000000000201c KTAP2
             forth.s:2615   .text:0000000000002014 KTAP1
             forth.s:2629   .text:0000000000002034 _ACCEP
             forth.s:2634   .text:0000000000002040 $d
             forth.s:2637   .text:000000000000204c ACCP1
             forth.s:2653   .text:0000000000002094 ACCP4
             forth.s:2649   .text:0000000000002088 ACCP2
             forth.s:2651   .text:000000000000208c ACCP3
             forth.s:2663   .text:00000000000020a8 _QUERY
             forth.s:2665   .text:00000000000020ae $t
             forth.s:2666   .text:00000000000020b0 QUERY
             forth.s:2668   .text:00000000000020b4 $d
             forth.s:2686   .text:00000000000020e8 _ABORT
             forth.s:2688   .text:00000000000020ee $t
             forth.s:2689   .text:00000000000020f0 ABORT
             forth.s:2691   .text:00000000000020f4 ABORT1
             forth.s:2692   .text:00000000000020f4 $d
             forth.s:2823   .text:0000000000002278 PRESE
             forth.s:2836   .text:0000000000002298 QUIT
             forth.s:2708   .text:000000000000211c ABORQ
             forth.s:2709   .text:000000000000211c $t
             forth.s:2710   .text:0000000000002120 $d
             forth.s:2725   .text:0000000000002144 _INTER
             forth.s:2727   .text:0000000000002150 $t
             forth.s:2730   .text:0000000000002154 $d
             forth.s:2739   .text:0000000000002190 INTE1
             forth.s:2736   .text:0000000000002186 $t
             forth.s:2737   .text:0000000000002188 $d
             forth.s:2743   .text:00000000000021a0 INTE2
             forth.s:2750   .text:00000000000021a8 _LBRAC
             forth.s:2752   .text:00000000000021aa $t
             forth.s:2753   .text:00000000000021ac LBRAC
             forth.s:2755   .text:00000000000021b0 $d
             forth.s:2764   .text:00000000000021c8 _DOTOK
             forth.s:2766   .text:00000000000021cc $t
             forth.s:2767   .text:00000000000021cc DOTOK
             forth.s:2769   .text:00000000000021d0 $d
             forth.s:2775   .text:00000000000021f4 DOTO1
             forth.s:2776   .text:00000000000021f4 $d
             forth.s:2783   .text:0000000000002200 _QSTAC
             forth.s:2786   .text:0000000000002208 QSTAC
             forth.s:2788   .text:000000000000220c $d
             forth.s:2790   .text:0000000000002222 $t
             forth.s:2791   .text:0000000000002224 $d
             forth.s:2797   .text:000000000000222c _EVAL
             forth.s:2802   .text:0000000000002238 EVAL1
             forth.s:2803   .text:0000000000002238 $d
             forth.s:2811   .text:0000000000002260 EVAL2
             forth.s:2820   .text:0000000000002270 _PRESE
             forth.s:2825   .text:000000000000227c $d
             forth.s:2833   .text:0000000000002290 _QUIT
             forth.s:2837   .text:0000000000002298 $d
             forth.s:2839   .text:00000000000022a4 QUIT1
             forth.s:2841   .text:00000000000022a8 QUIT2
ARM GAS  forth.s 			page 132


             forth.s:2847   .text:00000000000022bc _FORGET
             forth.s:2850   .text:00000000000022c4 FORGET
             forth.s:2852   .text:00000000000022c8 $d
             forth.s:3301   .text:0000000000002770 OVERT
             forth.s:2877   .text:0000000000002310 $d
             forth.s:2878   .text:0000000000002314 _TICK
             forth.s:2880   .text:0000000000002316 $t
             forth.s:2881   .text:0000000000002318 TICK
             forth.s:2883   .text:000000000000231c $d
             forth.s:2887   .text:0000000000002330 TICK1
             forth.s:2894   .text:0000000000002338 _ALLOT
             forth.s:2896   .text:000000000000233e $t
             forth.s:2897   .text:0000000000002340 ALLOT
             forth.s:2899   .text:0000000000002344 $d
             forth.s:2907   .text:0000000000002354 _COMMA
             forth.s:2908   .text:0000000000002356 $t
             forth.s:2909   .text:0000000000002358 COMMA
             forth.s:2911   .text:000000000000235c $d
             forth.s:2922   .text:0000000000002378 $d
             forth.s:2923   .text:000000000000237c _BCOMP
             forth.s:2925   .text:0000000000002386 $t
             forth.s:2926   .text:0000000000002388 BCOMP
             forth.s:2928   .text:000000000000238c $d
             forth.s:2936   .text:000000000000239c _COMPI
             forth.s:2938   .text:00000000000023a4 $t
             forth.s:2939   .text:00000000000023a4 COMPI
             forth.s:2941   .text:00000000000023a8 $d
             forth.s:2955   .text:00000000000023d4 _LITER
             forth.s:2957   .text:00000000000023dc $t
             forth.s:2958   .text:00000000000023dc LITER
             forth.s:2960   .text:00000000000023e0 $d
             forth.s:3345   .text:00000000000027cc CALLC
             forth.s:2971   .text:00000000000023f4 STRCQ
             forth.s:2972   .text:00000000000023f4 $t
             forth.s:2973   .text:00000000000023f8 $d
             forth.s:2992   .text:0000000000002430 _FOR
             forth.s:2994   .text:0000000000002434 $t
             forth.s:2995   .text:0000000000002434 FOR
             forth.s:2997   .text:0000000000002438 $d
             forth.s:3005   .text:0000000000002450 _BEGIN
             forth.s:3007   .text:0000000000002456 $t
             forth.s:3008   .text:0000000000002458 BEGIN
             forth.s:3010   .text:000000000000245c $d
             forth.s:3016   .text:0000000000002464 $d
             forth.s:3017   .text:0000000000002468 _FNEXT
             forth.s:3020   .text:0000000000002470 FNEXT
             forth.s:3022   .text:0000000000002474 $d
             forth.s:3030   .text:000000000000248c _UNTIL
             forth.s:3032   .text:0000000000002492 $t
             forth.s:3033   .text:0000000000002494 UNTIL
             forth.s:3035   .text:0000000000002498 $d
             forth.s:3043   .text:00000000000024b0 _AGAIN
             forth.s:3045   .text:00000000000024b6 $t
             forth.s:3046   .text:00000000000024b8 AGAIN
             forth.s:3048   .text:00000000000024bc $d
             forth.s:3056   .text:00000000000024d4 _IFF
             forth.s:3059   .text:00000000000024d8 IFF
ARM GAS  forth.s 			page 133


             forth.s:3061   .text:00000000000024dc $d
             forth.s:3072   .text:0000000000002504 _AHEAD
             forth.s:3074   .text:000000000000250a $t
             forth.s:3075   .text:000000000000250c AHEAD
             forth.s:3077   .text:0000000000002510 $d
             forth.s:3088   .text:0000000000002538 _REPEA
             forth.s:3091   .text:0000000000002540 REPEA
             forth.s:3093   .text:0000000000002544 $d
             forth.s:3103   .text:000000000000255c _THENN
             forth.s:3106   .text:0000000000002564 THENN
             forth.s:3108   .text:0000000000002568 $d
             forth.s:3117   .text:000000000000257c _AFT
             forth.s:3119   .text:0000000000002580 $t
             forth.s:3120   .text:0000000000002580 AFT
             forth.s:3122   .text:0000000000002584 $d
             forth.s:3132   .text:000000000000259c _ELSEE
             forth.s:3135   .text:00000000000025a4 ELSEE
             forth.s:3137   .text:00000000000025a8 $d
             forth.s:3146   .text:00000000000025bc _WHILE
             forth.s:3148   .text:00000000000025c2 $t
             forth.s:3149   .text:00000000000025c4 WHILE
             forth.s:3151   .text:00000000000025c8 $d
             forth.s:3159   .text:00000000000025d8 _ABRTQ
             forth.s:3162   .text:00000000000025e0 ABRTQ
             forth.s:3164   .text:00000000000025e4 $d
             forth.s:3172   .text:00000000000025fc _STRQ
             forth.s:3175   .text:0000000000002600 STRQ
             forth.s:3177   .text:0000000000002604 $d
             forth.s:3185   .text:000000000000261c _DOTQ
             forth.s:3188   .text:0000000000002620 DOTQ
             forth.s:3190   .text:0000000000002624 $d
             forth.s:3201   .text:000000000000263c _UNIQU
             forth.s:3203   .text:0000000000002644 $t
             forth.s:3204   .text:0000000000002644 UNIQU
             forth.s:3206   .text:0000000000002648 $d
             forth.s:3213   .text:0000000000002670 UNIQ1
             forth.s:3210   .text:0000000000002664 $d
             forth.s:3224   .text:0000000000002678 SNAME
             forth.s:3225   .text:0000000000002678 $t
             forth.s:3226   .text:000000000000267c $d
             forth.s:3242   .text:00000000000026c0 SNAM1
             forth.s:3252   .text:00000000000026d4 _SCOMP
             forth.s:3255   .text:00000000000026e0 SCOMP
             forth.s:3257   .text:00000000000026e4 $d
             forth.s:3269   .text:000000000000271c SCOM2
             forth.s:3266   .text:0000000000002714 SCOM1
             forth.s:3274   .text:0000000000002730 SCOM3
             forth.s:3281   .text:0000000000002738 COLON_ABORT
             forth.s:3282   .text:0000000000002738 $t
             forth.s:3283   .text:000000000000273c $d
             forth.s:3298   .text:0000000000002768 _OVERT
             forth.s:3300   .text:000000000000276e $t
             forth.s:3303   .text:0000000000002774 $d
             forth.s:3313   .text:000000000000278c _SEMIS
             forth.s:3315   .text:000000000000278e $t
             forth.s:3316   .text:0000000000002790 SEMIS
             forth.s:3318   .text:0000000000002794 $d
ARM GAS  forth.s 			page 134


             forth.s:3328   .text:00000000000027b0 _RBRAC
             forth.s:3330   .text:00000000000027b2 $t
             forth.s:3331   .text:00000000000027b4 RBRAC
             forth.s:3333   .text:00000000000027b8 $d
             forth.s:3346   .text:00000000000027cc $t
             forth.s:3347   .text:00000000000027d0 $d
             forth.s:3357   .text:00000000000027e8 _COLON
             forth.s:3359   .text:00000000000027ea $t
             forth.s:3360   .text:00000000000027ec COLON
             forth.s:3362   .text:00000000000027f0 $d
             forth.s:3372   .text:0000000000002808 _IMMED
             forth.s:3374   .text:0000000000002812 $t
             forth.s:3375   .text:0000000000002814 IMMED
             forth.s:3377   .text:0000000000002818 $d
             forth.s:3394   .text:0000000000002844 _CONST
             forth.s:3397   .text:0000000000002850 CONST
             forth.s:3399   .text:0000000000002854 $d
             forth.s:3410   .text:0000000000002884 $t
             forth.s:3414   .text:0000000000002884 DODOES
             forth.s:3416   .text:0000000000002888 $d
             forth.s:3429   .text:00000000000028ac $d
             forth.s:3430   .text:00000000000028b0 _DOES
             forth.s:3432   .text:00000000000028b6 $t
             forth.s:3433   .text:00000000000028b8 DOES
             forth.s:3435   .text:00000000000028bc $d
             forth.s:3449   .text:00000000000028ec _DEFERAT
             forth.s:3452   .text:00000000000028f4 DEFERAT
             forth.s:3454   .text:00000000000028f8 $d
             forth.s:3463   .text:0000000000002910 _DEFERSTO
             forth.s:3466   .text:0000000000002918 DEFERSTO
             forth.s:3468   .text:000000000000291c $d
             forth.s:3478   .text:0000000000002938 _DEFER
             forth.s:3480   .text:000000000000293e $t
             forth.s:3481   .text:0000000000002940 DEFER
             forth.s:3483   .text:0000000000002944 $d
             forth.s:3506   .text:0000000000002990 CREAT
             forth.s:3494   .text:0000000000002978 DEFER_NOP
             forth.s:3495   .text:0000000000002978 $t
             forth.s:3496   .text:000000000000297c $d
             forth.s:3503   .text:0000000000002988 _CREAT
             forth.s:3508   .text:0000000000002994 $d
             forth.s:3520   .text:00000000000029b8 _VARIA
             forth.s:3523   .text:00000000000029c4 VARIA
             forth.s:3525   .text:00000000000029c8 $d
             forth.s:3542   .text:00000000000029e8 DMP
             forth.s:3543   .text:00000000000029e8 $t
             forth.s:3544   .text:00000000000029ec $d
             forth.s:3556   .text:0000000000002a24 PDUM2
             forth.s:3550   .text:0000000000002a0c PDUM1
             forth.s:3564   .text:0000000000002a30 $d
             forth.s:3565   .text:0000000000002a34 _DUMP
             forth.s:3568   .text:0000000000002a3c DUMP
             forth.s:3570   .text:0000000000002a40 $d
             forth.s:3588   .text:0000000000002a90 DUMP4
             forth.s:3578   .text:0000000000002a68 DUMP1
             forth.s:3590   .text:0000000000002a98 DUMP3
             forth.s:3601   .text:0000000000002ab0 _DOTS
ARM GAS  forth.s 			page 135


             forth.s:3605   .text:0000000000002ab4 DOTS
             forth.s:3607   .text:0000000000002ab8 $d
             forth.s:3615   .text:0000000000002ad8 DOTS2
             forth.s:3611   .text:0000000000002acc DOTS1
             forth.s:3624   .text:0000000000002aec _TNAME
             forth.s:3626   .text:0000000000002af2 $t
             forth.s:3627   .text:0000000000002af4 TNAME
             forth.s:3629   .text:0000000000002af8 $d
             forth.s:3632   .text:0000000000002b04 TNAM1
             forth.s:3643   .text:0000000000002b38 TNAM2
             forth.s:3652   .text:0000000000002b48 _DOTID
             forth.s:3654   .text:0000000000002b4c $t
             forth.s:3655   .text:0000000000002b4c DOTID
             forth.s:3657   .text:0000000000002b50 $d
             forth.s:3664   .text:0000000000002b74 DOTI1
             forth.s:3665   .text:0000000000002b82 $t
             forth.s:3666   .text:0000000000002b84 $d
             forth.s:3668   *ABS*:0000000000000000 WANT_SEE
             forth.s:3748   .text:0000000000002b8c _WORDS
             forth.s:3750   .text:0000000000002b92 $t
             forth.s:3751   .text:0000000000002b94 WORDS
             forth.s:3753   .text:0000000000002b98 $d
             forth.s:3756   .text:0000000000002ba4 WORS1
             forth.s:3765   .text:0000000000002bcc WORS2
             forth.s:3778   .text:0000000000002bd0 VERSN
             forth.s:3779   .text:0000000000002bd0 $t
             forth.s:3780   .text:0000000000002bd4 $d
             forth.s:3787   .text:0000000000002be4 _HI
             forth.s:3793   .text:0000000000002bec $d
             forth.s:3794   .text:0000000000002c06 $t
             forth.s:3795   .text:0000000000002c08 $d
             forth.s:3824   .text:0000000000002c6c COLD1
             forth.s:3825   .text:0000000000002c6c $d
             forth.s:3836   .text:0000000000002cac COLD2
             forth.s:3839   .text:0000000000002cac $d
             forth.s:3842   .text:0000000000002cb0 $d
              init.s:166    .text:000000000000001f $d
              init.s:166    .text:0000000000000020 $t
             tvout.s:257    .text:0000000000000579 $d
             tvout.s:257    .text:000000000000057a $t
             tvout.s:271    .text:00000000000005a9 $d
             tvout.s:271    .text:00000000000005aa $t
             tvout.s:299    .text:00000000000005fb $d
             tvout.s:299    .text:00000000000005fc $t
             tvout.s:318    .text:0000000000000621 $d
             tvout.s:318    .text:0000000000000622 $t
             tvout.s:418    .text:0000000000000751 $d
             tvout.s:418    .text:0000000000000752 $t
             tvout.s:564    .text:0000000000000917 $d
             tvout.s:564    .text:0000000000000918 $t
           ps2_kbd.s:152    .text:0000000000000a81 $d
           ps2_kbd.s:152    .text:0000000000000a82 $t
             forth.s:124    .text:0000000000000b35 $d
             forth.s:124    .text:0000000000000b36 $t
             forth.s:175    .text:0000000000000be5 $d
             forth.s:175    .text:0000000000000be6 $t
             forth.s:195    .text:0000000000000c11 $d
ARM GAS  forth.s 			page 136


             forth.s:195    .text:0000000000000c12 $t
             forth.s:219    .text:0000000000000c47 $d
             forth.s:219    .text:0000000000000c48 $t
             forth.s:328    .text:0000000000000cd1 $d
             forth.s:328    .text:0000000000000cd2 $t
             forth.s:362    .text:0000000000000cff $d
             forth.s:362    .text:0000000000000d00 $t
             forth.s:375    .text:0000000000000d13 $d
             forth.s:375    .text:0000000000000d14 $t
             forth.s:386    .text:0000000000000d1f $d
             forth.s:386    .text:0000000000000d20 $t
             forth.s:398    .text:0000000000000d31 $d
             forth.s:398    .text:0000000000000d32 $t
             forth.s:410    .text:0000000000000d45 $d
             forth.s:410    .text:0000000000000d46 $t
             forth.s:457    .text:0000000000000d8d $d
             forth.s:457    .text:0000000000000d8e $t
             forth.s:479    .text:0000000000000daf $d
             forth.s:479    .text:0000000000000db0 $t
             forth.s:492    .text:0000000000000dc1 $d
             forth.s:492    .text:0000000000000dc2 $t
             forth.s:504    .text:0000000000000dd3 $d
             forth.s:504    .text:0000000000000dd4 $t
             forth.s:529    .text:0000000000000df5 $d
             forth.s:529    .text:0000000000000df6 $t
             forth.s:568    .text:0000000000000e3b $d
             forth.s:568    .text:0000000000000e3c $t
             forth.s:580    .text:0000000000000e51 $d
             forth.s:580    .text:0000000000000e52 $t
             forth.s:642    .text:0000000000000eab $d
             forth.s:642    .text:0000000000000eac $t
             forth.s:656    .text:0000000000000ebf $d
             forth.s:656    .text:0000000000000ec0 $t
             forth.s:667    .text:0000000000000ecd $d
             forth.s:667    .text:0000000000000ece $t
             forth.s:678    .text:0000000000000edd $d
             forth.s:678    .text:0000000000000ede $t
             forth.s:689    .text:0000000000000eed $d
             forth.s:689    .text:0000000000000eee $t
             forth.s:722    .text:0000000000000f1d $d
             forth.s:722    .text:0000000000000f1e $t
             forth.s:756    .text:0000000000000f51 $d
             forth.s:756    .text:0000000000000f52 $t
             forth.s:767    .text:0000000000000f61 $d
             forth.s:767    .text:0000000000000f62 $t
             forth.s:778    .text:0000000000000f73 $d
             forth.s:778    .text:0000000000000f74 $t
             forth.s:804    .text:0000000000000f9b $d
             forth.s:804    .text:0000000000000f9c $t
             forth.s:839    .text:0000000000000fd7 $d
             forth.s:839    .text:0000000000000fd8 $t
             forth.s:852    .text:0000000000000feb $d
             forth.s:852    .text:0000000000000fec $t
             forth.s:879    .text:0000000000001019 $d
             forth.s:879    .text:000000000000101a $t
             forth.s:903    .text:000000000000103d $d
             forth.s:903    .text:000000000000103e $t
ARM GAS  forth.s 			page 137


             forth.s:932    .text:000000000000106b $d
             forth.s:932    .text:000000000000106c $t
             forth.s:1005   .text:00000000000010db $d
             forth.s:1005   .text:00000000000010dc $t
             forth.s:1020   .text:00000000000010f3 $d
             forth.s:1020   .text:00000000000010f4 $t
             forth.s:1035   .text:000000000000110f $d
             forth.s:1035   .text:0000000000001110 $t
             forth.s:1108   .text:000000000000116b $d
             forth.s:1108   .text:000000000000116c $t
             forth.s:1119   .text:000000000000117f $d
             forth.s:1119   .text:0000000000001180 $t
             forth.s:1154   .text:00000000000011bb $d
             forth.s:1154   .text:00000000000011bc $t
             forth.s:1178   .text:00000000000011d9 $d
             forth.s:1178   .text:00000000000011da $t
             forth.s:1202   .text:0000000000001203 $d
             forth.s:1202   .text:0000000000001204 $t
             forth.s:1251   .text:0000000000001255 $d
             forth.s:1251   .text:0000000000001256 $t
             forth.s:1274   .text:000000000000127f $d
             forth.s:1274   .text:0000000000001280 $t
             forth.s:1290   .text:0000000000001299 $d
             forth.s:1290   .text:000000000000129a $t
             forth.s:1303   .text:00000000000012b5 $d
             forth.s:1303   .text:00000000000012b6 $t
             forth.s:1322   .text:00000000000012cf $d
             forth.s:1322   .text:00000000000012d0 $t
             forth.s:1341   .text:00000000000012fb $d
             forth.s:1341   .text:00000000000012fc $t
             forth.s:1408   .text:00000000000013ad $d
             forth.s:1408   .text:00000000000013ae $t
             forth.s:1465   .text:0000000000001427 $d
             forth.s:1465   .text:0000000000001428 $t
             forth.s:1531   .text:00000000000014d1 $d
             forth.s:1531   .text:00000000000014d2 $t
             forth.s:1550   .text:00000000000014f9 $d
             forth.s:1550   .text:00000000000014fa $t
             forth.s:1589   .text:000000000000154b $d
             forth.s:1589   .text:000000000000154c $t
             forth.s:1628   .text:0000000000001599 $d
             forth.s:1628   .text:000000000000159a $t
             forth.s:1652   .text:00000000000015cd $d
             forth.s:1652   .text:00000000000015ce $t
             forth.s:1671   .text:00000000000015f1 $d
             forth.s:1671   .text:00000000000015f2 $t
             forth.s:1738   .text:00000000000016bf $d
             forth.s:1738   .text:00000000000016c0 $t
             forth.s:1752   .text:00000000000016dd $d
             forth.s:1752   .text:00000000000016de $t
             forth.s:1785   .text:000000000000172b $d
             forth.s:1785   .text:000000000000172c $t
             forth.s:1802   .text:0000000000001755 $d
             forth.s:1802   .text:0000000000001756 $t
             forth.s:1818   .text:000000000000177f $d
             forth.s:1818   .text:0000000000001780 $t
             forth.s:1885   .text:0000000000001817 $d
ARM GAS  forth.s 			page 138


             forth.s:1885   .text:0000000000001818 $t
             forth.s:2024   .text:00000000000019f3 $d
             forth.s:2024   .text:00000000000019f4 $t
             forth.s:2043   .text:0000000000001a29 $d
             forth.s:2043   .text:0000000000001a2a $t
             forth.s:2063   .text:0000000000001a5f $d
             forth.s:2063   .text:0000000000001a60 $t
             forth.s:2139   .text:0000000000001adf $d
             forth.s:2139   .text:0000000000001ae0 $t
             forth.s:2177   .text:0000000000001b3f $d
             forth.s:2177   .text:0000000000001b40 $t
             forth.s:2337   .text:0000000000001d2b $d
             forth.s:2337   .text:0000000000001d2c $t
             forth.s:2380   .text:0000000000001d8d $d
             forth.s:2380   .text:0000000000001d8e $t
             forth.s:2395   .text:0000000000001db1 $d
             forth.s:2395   .text:0000000000001db2 $t
             forth.s:2631   .text:000000000000203b $d
             forth.s:2631   .text:000000000000203c $t
             forth.s:2785   .text:0000000000002207 $d
             forth.s:2785   .text:0000000000002208 $t
             forth.s:2799   .text:0000000000002231 $d
             forth.s:2799   .text:0000000000002232 $t
             forth.s:2822   .text:0000000000002277 $d
             forth.s:2822   .text:0000000000002278 $t
             forth.s:2835   .text:0000000000002295 $d
             forth.s:2835   .text:0000000000002296 $t
             forth.s:2849   .text:00000000000022c3 $d
             forth.s:2849   .text:00000000000022c4 $t
             forth.s:3019   .text:000000000000246d $d
             forth.s:3019   .text:000000000000246e $t
             forth.s:3058   .text:00000000000024d7 $d
             forth.s:3058   .text:00000000000024d8 $t
             forth.s:3090   .text:000000000000253f $d
             forth.s:3090   .text:0000000000002540 $t
             forth.s:3105   .text:0000000000002561 $d
             forth.s:3105   .text:0000000000002562 $t
             forth.s:3134   .text:00000000000025a1 $d
             forth.s:3134   .text:00000000000025a2 $t
             forth.s:3161   .text:00000000000025df $d
             forth.s:3161   .text:00000000000025e0 $t
             forth.s:3174   .text:00000000000025ff $d
             forth.s:3174   .text:0000000000002600 $t
             forth.s:3187   .text:000000000000261f $d
             forth.s:3187   .text:0000000000002620 $t
             forth.s:3254   .text:00000000000026dd $d
             forth.s:3254   .text:00000000000026de $t
             forth.s:3396   .text:000000000000284d $d
             forth.s:3396   .text:000000000000284e $t
             forth.s:3451   .text:00000000000028f3 $d
             forth.s:3451   .text:00000000000028f4 $t
             forth.s:3465   .text:0000000000002917 $d
             forth.s:3465   .text:0000000000002918 $t
             forth.s:3505   .text:000000000000298f $d
             forth.s:3505   .text:0000000000002990 $t
             forth.s:3522   .text:00000000000029c1 $d
             forth.s:3522   .text:00000000000029c2 $t
ARM GAS  forth.s 			page 139


             forth.s:3567   .text:0000000000002a39 $d
             forth.s:3567   .text:0000000000002a3a $t
             forth.s:3604   .text:0000000000002ab3 $d
             forth.s:3604   .text:0000000000002ab4 $t
             forth.s:3789   .text:0000000000002be7 $d
             forth.s:3789   .text:0000000000002be8 $t
             forth.s:3818   .text:0000000000002c55 $d
             forth.s:3818   .text:0000000000002c56 $t

UNDEFINED SYMBOLS
_mstack
