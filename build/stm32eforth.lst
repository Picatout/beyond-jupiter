ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ WB_BUFF, VID_BUFF-4096 /* flash memory write back buffer */ 
  54              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  55              		.equ DTOP,  RAM_ADR+0x512 
  56              		.equ DEND , WB_BUFF-4  /*usable RAM end */
  57              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  58              	
  59              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  60              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  61              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  62              	
  63              		.equ CELLL ,	4	/*size of a cell */
  64              		.equ BASEE ,	10	/*default radix */
  65              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  66              	
  67              		.equ BKSPP ,	8	/*backspace */
  68              		.equ LF ,	10	  /*line feed */
  69              		.equ CRR ,	13	/*carriage return */
  70              		.equ ERR ,	27	/*error escape */
  71              		.equ TIC ,	39	/*tick */
  72              	
  73              	/*************************************
  74              	   system variables offset from UPP
  75              	*************************************/
  76              	  .equ RNDSEED, 4    // prng seed 
  77              	  .equ TICKS, RNDSEED+4  // millseconds counter
  78              	  .equ CD_TIMER, TICKS+4  // count down timer
  79              	  .equ BOOT, CD_TIMER+4  // boot program address
  80              	  .equ STDIN, BOOT+4   //character ouput device 
  81              	  .equ STDOUT, STDIN+4 // character input device 
  82              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  83              	  .equ BCHAR, NBASE+4   // display base character flag 
  84              	  .equ TMP, BCHAR+4   // temporary variable
  85              	  .equ CSPAN, TMP+4  // character count received by expect  
  86              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  87              	  .equ SRC, TOIN+4    // SOURCE 
  88              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  89              	  .equ TIBUF, SRC+4   // TIB buffer address 
  90              	  .equ SRCID, TIBUF+4  // evaluation source string or user interface
  91              	  .equ EVAL, SRCID+4  // eval|compile vector 
  92              	  .equ VHOLD, EVAL+4   // hold pointer 
  93              	  .equ CTXT, VHOLD+4  // context pointer 
  94              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  95              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  96              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  97              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  98              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  99              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
 100              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
 101              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 102              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 103              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 104              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 105              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 106              	  .equ KBD_QUEUE_SIZE, 16 
 107              	  .equ KBD_QUEUE, KBD_STRUCT+4 
ARM GAS  forth.s 			page 10


 108              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 109              	  .equ KBD_QTAIL,KBD_QHEAD+4
 110              	  .equ ROW,KBD_QTAIL+4 
 111              	  .equ COL,ROW+4 
 112              	  .equ BK_COLOR,COL+4 
 113              	  .equ PEN_COLOR,BK_COLOR+4
 114              	  .equ VFPSW, PEN_COLOR+4 
 115              	  .equ VFBASE, VFPSW+4 
 116              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 117              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 118              	
 119              	
 120              	/***********************************************
 121              	* MACROS
 122              	*	Assemble inline direct threaded code ending.
 123              	***********************************************/
 124              		.macro _CALL fn /* low level routine call */ 
 125              	 	PUSH {LR}
 126              		BL \fn  
 127              		POP {LR}
 128              		.endm
 129              		
 130              		.macro _RET /* exit sub-routine */ 
 131              		BX LR 
 132              		.endm 
 133              	
 134              		// dictionary header  
 135              		.macro _HEADER  label, nlen, name
 136              			.word LINK 
 137              			.equ LINK , . 
 138              		_\label: .byte \nlen    // name field
 139              			.ascii "\name"
 140              			.p2align 2 
 141              		\label:   // code field 
 142              		.endm 
 143              		
 144              	
 145              	// local function header 
 146              		.macro _FUNC label 
 147              		.section .text, "ax", %progbits 
 148              		.p2align 2 
 149              		.type \label, %function  
 150              		\label:
 151              		.endm 
 152              	
 153              	// global function header 
 154              		.macro _GBL_FUNC label 
 155              		.global \label 
 156              		_FUNC \label 
 157              		.endm 
 158              	
 159              	
 160              	// load large constant to register 
 161              		.macro _MOV32 r, value 
 162              		mov \r,#(\value&0xffff)
 163              		movt \r,#(\value>>16)
 164              		.endm 
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _NEXT /* direct jump INEXT */ 
 167              		B INEXT   
 168              		.endm 
 169              	
 170              	 	.macro	_NEST /*start high level word */
 171              		BX INX  
 172              		NOP.N 
 173              		.endm
 174              	
 175              		.macro _ADR label 
 176              		.word 1+\label  
 177              		.endm 
 178              	
 179              	 	.macro	_UNNEST	/*end high level word */
 180              		_ADR UNNEST 
 181              		.endm
 182              	
 183              	 	.macro	_DOLIT u /*long literals */
 184              		_ADR	DOLIT
 185              		.word	\u 
 186              		.endm
 187              	
 188              		.macro _DOTQP len, text 
 189              		_ADR DOTQP 
 190              		.byte \len 
 191              		.ascii "\text" 
 192              		.p2align 2 
 193              		.endm
 194              	
 195              		// POSTPONE COMPILE 
 196              		.macro _COMPI name 
 197              		_DOLIT	\name + 1
 198              		_ADR	COMMA 
 199              		.endm 
 200              	
 201              		.macro _ABORQ len,name 
 202              		_ADR ABORQ 
 203              		.byte \len 
 204              		.ascii "\name"
 205              		.p2align 2 
 206              		.endm
 207              	
 208              		.macro _BRAN label 
 209              		_ADR BRAN 
 210              		.word \label 
 211              		.endm 
 212              	
 213              		.macro _QBRAN label 
 214              		_ADR QBRAN 
 215              		.word \label
 216              		.endm 
 217              	
 218              		.macro _TBRAN label 
 219              		_ADR TBRAN 
 220              		.word \label 
 221              		.endm 
ARM GAS  forth.s 			page 12


 222              	
 223              		.macro _DONXT label 
 224              		_ADR DONXT
 225              		.word \label 
 226              		.endm 
 227              	
 228              	 	.macro	_PUSH	/*push TOS on data stack*/
 229              		STR	TOS,[DSP,#-4]!
 230              		.endm
 231              	
 232              	 	.macro	_POP /*pop data stack to TOS */
 233              		LDR	TOS,[DSP],#4
 234              		.endm
 235              	
 236              		// calling a colon word 
 237              		// from a code word   
 238              		.macro _CALL_COLWORD target 
 239              	    ldr WP,=\target 
 240              		orr WP,#1
 241              		b \target  
 242              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
ARM GAS  forth.s 			page 13


  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
ARM GAS  forth.s 			page 14


 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF818C9 	  ldr IP,=dh
 159 000e 02F0ABBF 	  b INEXT  
 160              	dh:
 161 0012 D1520000 	  _ADR PRESE
 162 0016 ED460000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 B52F0000 	  _ADR CFSR 
 164 0038 49330000 	  _ADR DUPP
 165 003c B5320000 	  _ADR TOR 
 166 0040 8F310000 	  _DOLIT 16 
 166      10000000 
 167 0048 A5390000 	  _ADR BASE 
 168 004c 11320000 	  _ADR STORE 
 169 0050 E9470000 	  _ADR UDOT 
ARM GAS  forth.s 			page 15


 170 0054 ED460000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 51320000 	  _ADR RFROM
 172 0068 8F310000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 05340000 	  _ADR ANDD
 174 0074 CF310000 	  _QBRAN 1f
 174      94000000 
 175 007c D52F0000 	  _ADR BFAR
 176 0080 8F310000 	  _DOLIT ','
 176      2C000000 
 177 0088 31300000 	  _ADR EMIT 
 178 008c D5450000 	  _ADR SPACE 
 179 0090 E9470000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 ED460000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 C1220000 	  _ADR FPSCR
 184 00a8 E9470000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF864C8 	  ldr IP,=fpu_except
 202 00c4 02F050BF 	  b INEXT 
 203              	fpu_except:  
 204 00c8 91460000 	  _ADR CR 
 205 00cc A5390000 	  _ADR BASE 
 206 00d0 25320000 	  _ADR AT 
 207 00d4 B5320000 	  _ADR TOR  
 208 00d8 8F310000 	  _DOLIT 16 
 208      10000000 
 209 00e0 A5390000 	  _ADR BASE 
 210 00e4 11320000 	  _ADR STORE
 211 00e8 8F310000 	  _DOLIT 4 
 211      04000000 
 212 00f0 95340000 	  _ADR SUBB  
 213 00f4 ED460000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
ARM GAS  forth.s 			page 16


 214 0100 1D480000 	  _ADR DOT 
 215 0104 ED460000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 C1220000 	  _ADR FPSCR 
 217 0124 49330000 	  _ADR DUPP 
 218 0128 1D480000 	  _ADR DOT
 219 012c 95350000 	  _ADR QDUP 
 220 0130 CF310000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 8F310000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 31300000 	  _ADR EMIT 
 223 0144 8F310000 	  _DOLIT ' ' 
 223      20000000 
 224 014c 31300000 	  _ADR EMIT
 225 0150 49330000 	  _ADR DUPP 
 226 0154 8F310000 	  _DOLIT 0x10 
 226      10000000 
 227 015c 05340000 	  _ADR ANDD
 228 0160 95350000 	  _ADR QDUP  
 229 0164 CF310000 	  _QBRAN 1f 
 229      84010000 
 230 016c 8F310000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 85340000 	  _ADR PLUS 
 232 0178 25320000 	  _ADR AT 
 233 017c F9380000 	  _ADR COUNT 
 234 0180 29460000 	  _ADR TYPEE
 235 0184 8F310000 	1: _DOLIT 15 
 235      0F000000 
 236 018c 05340000 	  _ADR ANDD
 237 0190 51370000 	  _ADR CLZ 
 238 0194 8F310000 	  _DOLIT 31 
 238      1F000000 
 239 019c 59330000 	  _ADR SWAP 
 240 01a0 95340000 	  _ADR SUBB 
 241 01a4 8F310000 	  _DOLIT 2 
 241      02000000 
 242 01ac 75340000 	  _ADR LSHIFT 
 243 01b0 8F310000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 85340000 	  _ADR PLUS 
 245 01bc 25320000 	  _ADR AT 
 246 01c0 F9380000 	  _ADR COUNT 
 247 01c4 29460000 	  _ADR TYPEE 
 248 01c8 91460000 	2: _ADR CR 
 249 01cc 8F310000 	  _DOLIT 0
 249      00000000 
 250 01d4 E1220000 	  _ADR CLR_FPSCR 
 251 01d8 51320000 	  _ADR RFROM  
 252 01dc A5390000 	  _ADR BASE 
 253 01e0 11320000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
ARM GAS  forth.s 			page 17


 256              	exit_fpu_isr:
 257 01e8 DFF840C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
ARM GAS  forth.s 			page 18


 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C8C6 	  ldr IP,=nmi_hl 
 306 0268 02F07EBE 	  b  INEXT
 307              	nmi_hl:
 308 026c D1520000 	  _ADR PRESE 
 309 0270 91460000 	  _ADR CR 
 310 0274 ED460000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 91460000 	  _ADR CR 
 312 0298 59500000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF88CC6 	  ldr IP,=hardfault_hl 
 326 02aa 02F05DBE 	  b INEXT
 327              	hardfault_hl:
 328 02ae D1520000 	  _ADR PRESE
 329 02b2 91460000 	  _ADR CR  
 330 02b6 ED460000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 91460000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
ARM GAS  forth.s 			page 19


 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF854C6 	  ldr IP,=memfault_hl 
 345 02e6 02F03FBE 	  b INEXT 
 346              	memfault_hl: 
 347 02ea D1520000 	  _ADR PRESE
 348 02ee 91460000 	  _ADR CR  
 349 02f2 ED460000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 8F310000 	  _DOLIT 16 
 350      10000000 
 351 0320 A5390000 	  _ADR BASE 
 352 0324 11320000 	  _ADR STORE   
 353 0328 B52F0000 	  _ADR CFSR
 354 032c 8F310000 	  _DOLIT 255 
 354      FF000000 
 355 0334 05340000 	  _ADR ANDD 
 356 0338 E9470000 	  _ADR UDOT 
 357 033c 91460000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8ECC5 	  ldr IP,=busfault_hl 
 372 0352 02F009BE 	  b INEXT 
 373              	busfault_hl:
 374 0356 D1520000 	  _ADR PRESE
 375 035a 8F310000 	  _DOLIT 1 
 375      01000000 
 376 0362 F9300000 	  _ADR ULED 
 377 0366 8F310000 	  _DOLIT  100 
 377      64000000 
 378 036e 61390000 	  _ADR MSEC 
 379 0372 D52F0000 	  _ADR BFAR 
 380 0376 B52F0000 	  _ADR CFSR 
 381 037a 91460000 	  _ADR CR  
 382 037e ED460000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 8F310000 	  _DOLIT 16 
 383      10000000 
 384 03a8 A5390000 	  _ADR BASE 
ARM GAS  forth.s 			page 20


 385 03ac 11320000 	  _ADR STORE   
 386 03b0 8F310000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 05340000 	  _ADR ANDD   
 388 03bc E9470000 	  _ADR UDOT 
 389 03c0 ED460000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc E9470000 	  _ADR UDOT 
 391 03d0 91460000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF85CC5 	  ldr IP,=usagefault_hl
 405 03e6 02F0BFBD 	  b INEXT 
 406              	usagefault_hl:
 407 03ea D1520000 	  _ADR PRESE
 408 03ee 91460000 	  _ADR CR  
 409 03f2 ED460000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 8F310000 	  _DOLIT 16 
 410      10000000 
 411 0418 A5390000 	  _ADR BASE 
 412 041c 11320000 	  _ADR STORE   
 413 0420 B52F0000 	  _ADR CFSR
 414 0424 8F310000 	  _DOLIT 16 
 414      10000000 
 415 042c 5D340000 	  _ADR RSHIFT 
 416 0430 E9470000 	  _ADR UDOT 
 417 0434 91460000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8B000 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
ARM GAS  forth.s 			page 21


 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8B000 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8B000 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF8A0C4 	  ldr IP,=ur
 474 04a4 02F060BD 	  b INEXT  
 475              	ur:
 476 04a8 D1520000 	  _ADR PRESE
 477 04ac 91460000 	  _ADR CR   
 478 04b0 8F310000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 F9380000 		_ADR COUNT 
 480 04bc 29460000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
ARM GAS  forth.s 			page 22


 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F09FFE 	  bl  fpu_init 
 518 0524 00F009FB 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F002FC 	  bl  flash_spi_init   
 522 0534 06F026B9 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF6B067 		_MOV32 DSP,SPP
 530      C2F20107 
ARM GAS  forth.s 			page 23


 531 0548 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8F4A3 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
ARM GAS  forth.s 			page 24


 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
ARM GAS  forth.s 			page 25


 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A649     		ldr r1,=UZERO 
 674 06b2 4FF0C002 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
ARM GAS  forth.s 			page 26


 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
ARM GAS  forth.s 			page 27


 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
ARM GAS  forth.s 			page 28


 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
ARM GAS  forth.s 			page 29


 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 94660000 		.word HI_BOTH  /*'BOOT */
 874 0878 201A0000 		.word PS2_QKEY /* query for character */
 875 087c E8120000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 B0FE0120 		.word TIBB	/*TIBU */
 883 089c 00000000 	  .word 0     // SRCID 
 884 08a0 08510000 		.word INTER	/*'EVAL */
 885 08a4 00000000 		.word 0			/*HLD */
 886 08a8 7C670000 		.word _LASTN	/*CONTEXT */
 887 08ac E8670000 		.word CTOP  	/* FCP end of system dictionnary */
 888 08b0 845F0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 889 08b4 7C670000 		.word _LASTN	/*LAST word in dictionary */
 890 08b8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 890      00000000 
 890      00000000 
 890      00000000 
 891 08c8 00000000 		.word 0  /* RX_HEAD */
 892 08cc 00000000 		.word 0  /* RX_TAIL */ 
 893 08d0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 894 08d4 00000000 		.word 0  /* VID_STATE, video state */  
ARM GAS  forth.s 			page 30


 895 08d8 00000000 	    .word 0  /* VID_FIELD, field */
 896 08dc 30810120 		.word VID_BUFF /* video_buffer address */ 
 897 08e0 00000000 	    .word 0 /* kbd struct */
 898 08e4 00000000 		.space KBD_QUEUE_SIZE,0  
 898      00000000 
 898      00000000 
 898      00000000 
 899 08f4 00000000 		.word 0  /* kbd queue head */
 900 08f8 00000000 		.word 0 /* kbd queue tail */ 
 901 08fc 00000000 	    .word 0 /* tv cursor row */
 902 0900 00000000 	    .word 0 /* tv cursor column */ 
 903 0904 00000000 	    .word 0 /* tv back color */
 904 0908 07000000 	    .word 7 /* tv font color */
 905 090c 00000000 	    .word 0 /* FPSW */
 906 0910 00000000 	    .word 0 /* FBASE */ 
 907 0914 00000000 	    .word 0 /* BEEP_DTMR */
 908 0918 00000000 	    .word 0 /* CSTATE */ 
 909 091c 00000000 	    .word 0,0 
 909      00000000 
 910              	
 911              	ULAST:
 912              	
 913              	// used by _HEADER macro 
 914              	// to link names field
 915              	// in dictionary  
 916 0924 12000000 	    .equ LINK, 0 
 916      C8000000 
 916      E8520000 
 916      6C020000 
 916      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	    ENVIRONMENT? 
  22              	    constants 
  23              	    vocabulary separate from 
  24              	    main dictionary  
  25              	*******************************/
  26              	
  27              	
ARM GAS  forth.s 			page 31


  28              	/*******************************
  29              	    ENVIRONMENT? 
  30              	    ( c-addr u -- false | i * x true ) 
  31              	********************************/
  32 0950 00000000 	    _HEADER ENVQ,12,"ENVIRONMENT?"
  32      0C454E56 
  32      49524F4E 
  32      4D454E54 
  32      3F0000BF 
  33 0964 504700BF 	    _NEST 
  34              	    // save normal context 
  35 0968 513A0000 	    _ADR CNTXT 
  36 096c 25320000 	    _ADR AT 
  37 0970 B5320000 	    _ADR TOR 
  38              	    // set environment context 
  39 0974 8F310000 	    _DOLIT _ENVLASTN  
  39      EA0A0000 
  40 097c 513A0000 	    _ADR   CNTXT 
  41 0980 11320000 	    _ADR   STORE 
  42              	    // search string 
  43 0984 29330000 	    _ADR   DROP 
  44 0988 F1340000 	    _ADR   ONEM 
  45 098c 494D0000 	    _ADR   NAMEQ
  46 0990 49330000 	    _ADR   DUPP 
  47 0994 CF310000 	    _QBRAN  1f
  47      AC090000 
  48 099c 29330000 	    _ADR   DROP 
  49 09a0 A5310000 	    _ADR   EXECU 
  50 09a4 F7310000 	    _BRAN  2f
  50      B4090000 
  51 09ac 59330000 	1:  _ADR  SWAP 
  52 09b0 29330000 	    _ADR  DROP 
  53              	2:  // restore normal context 
  54 09b4 51320000 	    _ADR RFROM
  55 09b8 513A0000 	    _ADR CNTXT 
  56 09bc 11320000 	    _ADR STORE 
  57 09c0 6F2F0000 	    _UNNEST 
  58              	
  59              	
  60              	    .equ ENVLNK , 0 
  61              	
  62              		// dictionary header  
  63              		.macro _ENV_HEADER  label, nlen, name
  64              			.word ENVLNK 
  65              			.equ ENVLNK , . 
  66              		_\label: .byte \nlen    // name field
  67              			.ascii "\name"
  68              			.p2align 2 
  69              		\label:   // code field 
  70              		.endm 
  71              		
  72              	
  73              	/***********************************
  74              	    envronment constants 
  75              	***********************************/
  76              	
  77              	/**********************************
ARM GAS  forth.s 			page 32


  78              	    /COUNTED-STRING ( -- 255 t )
  79              	constant:
  80              	    255 maximum counted string length
  81              	*************************************/
  82 09c4 00000000 	    _ENV_HEADER CNTDSTR,15,"/COUNTED-STRING"
  82      0F2F434F 
  82      554E5445 
  82      442D5354 
  82      52494E47 
  83 09d8 47F8046D 	    _PUSH 
  84 09dc 4FF0FF06 	    MOV  TOS,#255
  85 09e0 8EE0     	    B flag_true
  86              	
  87              	
  88              	/******************************************
  89              	    /HOLD  ( -- 80 t )
  90              	    size of the pictured numeric 
  91              	    output string buffer, in characters
  92              	constant:
  93              	    80 bytes   
  94              	*******************************************/
  95 09e2 C8090000 	    _ENV_HEADER SLHOLD,5,"/HOLD"
  95      052F484F 
  95      4C44
  96 09ec 47F8046D 	    _PUSH
  97 09f0 4FF05006 	    MOV TOS,#80
  98 09f4 84E0     	    B flag_true
  99              	
 100              	/***************************************
 101              	    /PAD ( -- 80 t )	
 102              	    size of the scratch area 
 103              	    pointed to by PAD, in characters
 104              	constant: 
 105              	    80 bytes 
 106              	***************************************/
 107 09f6 E6090000 	    _ENV_HEADER SLPAD,4,"/PAD"
 107      042F5041 
 107      4400
 108 0a00 47F8046D 	    _PUSH 
 109 0a04 4FF05006 	    MOV TOS,#80
 110 0a08 7AE0     	    B flag_true
 111              	
 112              	/**************************************
 113              	    ADDRESS-UNIT-BITS ( -- 32 t )
 114              	    size of one address unit, in bits
 115              	constant:
 116              	    32 bits
 117              	**************************************/
 118 0a0a FA090000 	    _ENV_HEADER ADRBITS,17,"ADDRESS-UNIT-BITS"
 118      11414444 
 118      52455353 
 118      2D554E49 
 118      542D4249 
 119 0a20 47F8046D 	    _PUSH 
 120 0a24 4FF02006 	    MOV TOS,#32
 121 0a28 6AE0     	    B flag_true
 122              	
ARM GAS  forth.s 			page 33


 123              	/***************************************
 124              	    FLOORED	( -- t ) 
 125              	    flag true if floored division 
 126              	    is the default
 127              	constant:
 128              	    true 
 129              	***************************************/
 130 0a2a 0E0A0000 	    _ENV_HEADER FLOORED,7,"FLOORED"
 130      07464C4F 
 130      4F524544 
 130      00BF
 131 0a38 62E0     	    b flag_true
 132              	
 133              	/*************************************
 134              	    MAX-CHAR  ( -- 127 -1 t )
 135              	    maximum value of any character in 
 136              	    the implementation-defined 
 137              	    character set.
 138              	constant:
 139              	    127 
 140              	*************************************/
 141 0a3a 2E0A0000 	    _ENV_HEADER MAXCHAR,8,"MAX-CHAR"
 141      084D4158 
 141      2D434841 
 141      5200
 142 0a48 47F8046D 	    _PUSH 
 143 0a4c 4FF07F06 	    MOV TOS,#127 
 144 0a50 56E0     	    b flag_true 
 145              	
 146              	/************************************
 147              	    MAX-D	(-- 0xffffffff 0x7fffffff t )
 148              	    largest usable signed double number
 149              	constant:
 150              	    0x7FFF_FFFF_FFFF_FFFF 
 151              	************************************/
 152 0a52 3E0A0000 	    _ENV_HEADER MAXD,5,"MAX-D"
 152      054D4158 
 152      2D44
 153 0a5c 47F8046D 	    _PUSH 
 154 0a60 4FF6FF76 	    _MOV32 TOS,0xFFFFFFFF 
 154      CFF6FF76 
 155 0a68 47F8046D 	    _PUSH
 156 0a6c 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 156      C7F6FF76 
 157 0a74 44E0     	    B flag_true
 158              	
 159              	/************************************
 160              	    MAX-N ( -- 0x7FFFFFFF t ) 
 161              	    largest usable signed integer
 162              	constant:
 163              	    0x7FFFFFFF
 164              	*************************************/
 165 0a76 560A0000 	    _ENV_HEADER MAXN,5,"MAX-N"
 165      054D4158 
 165      2D4E
 166 0a80 47F8046D 	    _PUSH 
 167 0a84 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
ARM GAS  forth.s 			page 34


 167      C7F6FF76 
 168 0a8c 38E0     	    B flag_true 
 169              	
 170              	/************************************
 171              	    MAX-U ( -- 0xFFFFFFFF t ) 
 172              	    largest usable unsigned integer
 173              	constant:
 174              	    0xFFFFFFFF 
 175              	************************************/
 176 0a8e 7A0A0000 	    _ENV_HEADER MAXU,5,"MAX-U"
 176      054D4158 
 176      2D55
 177 0a98 47F8046D 	    _PUSH 
 178 0a9c 4FF0FF36 	    MOV TOS,#-1 
 179 0aa0 2EE0     	    B flag_true 
 180              	
 181              	/**********************************
 182              	    MAX-UD ( -- 0xFFFFFFFF 0xFFFFFFFFF t )
 183              	    largest usable unsigned double number
 184              	constant:
 185              	    0xFFFF_FFFF_FFFF_FFFF 
 186              	*************************************/
 187 0aa2 920A0000 	    _ENV_HEADER MAXUD,6,"MAX-UD"
 187      064D4158 
 187      2D554400 
 187      00BF
 188 0ab0 47F8046D 	    _PUSH 
 189 0ab4 4FF0FF36 	    MOV  TOS,#-1 
 190 0ab8 47F8046D 	    _PUSH 
 191 0abc 4FF0FF36 	    MOV TOS,#-1 
 192 0ac0 1EE0     	    B flag_true
 193              	
 194              	/*************************************
 195              	    RETURN-STACK-CELLS ( -- 32 t )
 196              	    maximum size of the return stack, 
 197              	    in cells
 198              	constant:
 199              	    32 cells 
 200              	************************************/
 201 0ac2 A60A0000 	    _ENV_HEADER RSTKCELLS,18,"RETURN-STACK-CELLS"
 201      12524554 
 201      55524E2D 
 201      53544143 
 201      4B2D4345 
 202 0adc 47F8046D 	    _PUSH 
 203 0ae0 4FF02006 	    MOV TOS,#32 
 204 0ae4 0CE0     	    B flag_true
 205              	
 206              	/*************************************
 207              	    STACK-CELLS ( -- 32 t ) 
 208              	    maximum size of the data stack, 
 209              	    in cells
 210              	constant:
 211              	    32 cells 
 212              	*************************************/
 213 0ae6 C60A0000 		.word	ENVLNK 
 214              		ENVLINK = . 
ARM GAS  forth.s 			page 35


 215 0aea 0B       	_ENVLASTN:	.byte 11
 216 0aeb 53544143 		.ascii "STACK-CELLS"
 216      4B2D4345 
 216      4C4C53
 217 0af6 00BF     		.p2align 2	
 218              	STKCELLS: 
 219 0af8 47F8046D 	    _PUSH 
 220 0afc 4FF02006 	    MOV TOS,#32 
 221              	//    B flag_true 
 222              	
 223              	flag_true:
 224 0b00 47F8046D 	    _PUSH 
 225 0b04 4FF0FF36 	    MOV TOS,#-1 
 226 0b08 02F02EBA 	    _NEXT 
 227              	
 228              	
 229              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0b0c 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0b14 1868     		ldr r0,[r3,#USART_SR]
  38 0b16 5968     		ldr r1,[r3,#USART_DR]
  39 0b18 10F0200F 		tst r0,#(1<<5) // RXNE 
ARM GAS  forth.s 			page 36


  40 0b1c 0CD0     		beq 2f // no char received 
  41 0b1e B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0b22 3FF4B8AC 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0b26 04F15400 		add r0,UP,#RX_QUEUE
  44 0b2a A26E     		ldr r2,[UP,#RX_TAIL]
  45 0b2c 8154     		strb r1,[r0,r2]
  46 0b2e 02F10102 		add r2,#1 
  47 0b32 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0b36 A266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0b38 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0b3a 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0b42 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0b44 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0b48 01EA0201 	  and r1,r1,r2
  62 0b4c 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0b50 41EA0201 	  orr r1,r1,r2 
  64 0b54 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0b56 4FF4EE61 	  mov r1,#0x77<<4 
  67 0b5a 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0b5c 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0b64 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0b68 8160     	  str r1,[r0,#USART_BRR]
  73 0b6a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0b6e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0b70 4FF02500 	  mov r0,#USART1_IRQ 
  77 0b74 4FF00701 	  mov r1,#7
  78 0b78 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FD5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0b82 4FF02500 	  mov r0,#USART1_IRQ 
  81 0b86 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FD5DF8 
  81      04EB
  82 0b90 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0b92 54090000 	    _HEADER SER_QKEY,8,"SER-KEY?"
ARM GAS  forth.s 			page 37


  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0ba0 47F8046D 		_PUSH
  92 0ba4 A06E     		ldr T0,[UP,#RX_TAIL] 
  93 0ba6 616E     		ldr T1,[UP,#RX_HEAD]
  94 0ba8 90EA0106 		eors TOS,T0,T1 
  95 0bac 0CD0     		beq 1f
  96 0bae 04F15400 		add T0,UP,#RX_QUEUE 
  97 0bb2 0844     		add T0,T1 
  98 0bb4 0678     		ldrb TOS,[T0]
  99 0bb6 01F10101 		add T1,#1 
 100 0bba 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0bbe 6166     		str T1,[UP,#RX_HEAD]
 102 0bc0 47F8046D 		_PUSH 
 103 0bc4 4FF0FF36 		mov TOS,#-1
 104 0bc8 02F0CEB9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0bcc 960B0000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0bdc 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0be4 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0be6 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0bea FBD0     		beq 1b 
 115 0bec 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0bee 57F8046B 		_POP
 117 0bf2 02F0B9B9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0bf6 D00B0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0c00 47F8046D 	        _PUSH 
 126 0c04 4FF00006 	        mov TOS,#0
 127 0c08 02F0AEB9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0c0c FA0B0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0c18 47F8046D 	        _PUSH 
 135 0c1c 4FF00106 	        mov TOS,#1
 136 0c20 02F0A2B9 	        _NEXT 
ARM GAS  forth.s 			page 38


 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0c24 100C0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0c30 3046     	        mov T0,TOS
 144 0c32 57F8046B 	        _POP 
 145 0c36 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0c38 4B48     	        ldr T0,=SER_QKEY 
 148 0c3a 6061     	        str T0,[UP,#STDIN]
 149 0c3c 4B48     	        ldr T0,=SER_EMIT
 150 0c3e A061     	        str T0,[UP,#STDOUT]
 151 0c40 02F092B9 	        _NEXT 
 152              	4: // local console 
 153 0c44 4A48     	        ldr T0,=PS2_QKEY
 154 0c46 6061     	        str T0,[UP,#STDIN]
 155 0c48 4A48     	        ldr T0,=TV_EMIT
 156 0c4a A061     	        str T0,[UP,#STDOUT]
 157 0c4c 02F08CB9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0c50 280C0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0c60 504700BF 	      _NEST 
 166 0c64 8F310000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0c6c E1340000 	1:    _ADR ONEP  // c+1
 168 0c70 B5320000 	      _ADR TOR   
 169 0c74 8F310000 	      _DOLIT 10 
 169      0A000000 
 170 0c7c FD3D0000 	      _ADR SLMOD // r q  
 171 0c80 95350000 	      _ADR QDUP  // r q q | r 0  
 172 0c84 CF310000 	      _QBRAN 2f  // r 0 
 172      980C0000 
 173 0c8c 51320000 	      _ADR RFROM // r q c 
 174 0c90 F7310000 	      _BRAN 1b
 174      6C0C0000 
 175 0c98 8F310000 	2:    _DOLIT '0'  
 175      30000000 
 176 0ca0 85340000 	      _ADR PLUS 
 177 0ca4 31300000 	      _ADR EMIT 
 178 0ca8 51320000 	      _ADR RFROM 
 179 0cac 95350000 	      _ADR QDUP 
 180 0cb0 CF310000 	      _QBRAN 3f
 180      C80C0000 
 181 0cb8 F1340000 	      _ADR ONEM 
 182 0cbc B5320000 	      _ADR TOR 
ARM GAS  forth.s 			page 39


 183 0cc0 F7310000 	      _BRAN 2b 
 183      980C0000 
 184              	3:    
 185 0cc8 6F2F0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0ccc 540C0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0cd8 504700BF 	      _NEST 
 193 0cdc 8F310000 	      _DOLIT 27 
 193      1B000000 
 194 0ce4 31300000 	      _ADR EMIT 
 195 0ce8 8F310000 	      _DOLIT '['
 195      5B000000 
 196 0cf0 31300000 	      _ADR EMIT 
 197 0cf4 6F2F0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0cf8 D00C0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0d04 504700BF 	      _NEST
 205 0d08 D90C0000 	      _ADR ANSI_ESC
 206 0d0c 59330000 	      _ADR SWAP 
 207 0d10 610C0000 	      _ADR ANSI_PARAM 
 208 0d14 8F310000 	      _DOLIT ';'
 208      3B000000 
 209 0d1c 31300000 	      _ADR EMIT
 210 0d20 610C0000 	      _ADR ANSI_PARAM
 211 0d24 8F310000 	      _DOLIT 'H'
 211      48000000 
 212 0d2c 31300000 	      _ADR EMIT 
 213 0d30 6F2F0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0d34 FC0C0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0d40 504700BF 	    _NEST
 221 0d44 8F310000 	    _DOLIT 1 
 221      01000000 
 222 0d4c 49330000 	    _ADR DUPP 
 223 0d50 050D0000 	    _ADR SER_AT  
 224 0d54 D90C0000 	    _ADR ANSI_ESC
 225 0d58 8F310000 	    _DOLIT 'J'
 225      4A000000 
 226 0d60 31300000 	    _ADR EMIT 
ARM GAS  forth.s 			page 40


 227 0d64 6F2F0000 	    _UNNEST 
 228 0d68 A00B0000 	
 228      DC0B0000 
 228      201A0000 
 228      E8120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	  .equ HRES, 320  // horizontal resolution
  20              	  .equ VRES, 200   // vertical resolution
  21              	  .equ BPP, 4     // bits per pixel
ARM GAS  forth.s 			page 41


  22              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  23              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  24              	
  25              	  .equ CHAR_WIDTH, 6 
  26              	  .equ CHAR_HEIGHT, 8
  27              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0d78 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0d80 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0d82 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
ARM GAS  forth.s 			page 42


  81 0d8a 41EA0201 	  orr r1,r2
  82 0d8e 0160     	  str r1,[r0,#GPIO_MODER]
  83 0d90 81EA0101 	  eor r1,r1 
  84 0d94 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0d96 4FF00101 	  mov r1,#1 // pin 1 
  88 0d9a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0d9e 00B5FFF7 	  _CALL gpio_config 
  89      FEFC5DF8 
  89      04EB
  90 0da8 4FF00101 	  mov r1,#1 
  91 0dac 4FF00202 	  mov r2,#2
  92 0db0 00B5FFF7 	  _CALL gpio_speed 
  92      34FD5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0dba 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0dbc 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0dc0 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0dc2 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0dca 4FF00200 	  mov r0,#2 
 100 0dce 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0dd0 41EA0001 	  orr r1,r0 
 102 0dd4 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0dd6 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0dde 41F2D470 	  mov r0,#HPER
 106 0de2 D062     	  str r0,[r2,#TIM_ARR]
 107 0de4 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0de8 D063     	  str r0,[r2,#TIM_CCR3]
 109 0dea 4FF4E170 	  mov r0,#HPULSE 
 110 0dee 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0df0 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0df4 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0df6 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0dfa 1062     	  str r0,[r2,#TIM_CCER]
 115 0dfc 4FF00100 	  mov r0,#1 
 116 0e00 D060     	  str r0,[r2,#TIM_DIER]
 117 0e02 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0e04 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0e08 4FF00201 	  mov r1,#2
 121 0e0c 00B5FFF7 	  _CALL nvic_set_priority
 121      6BFC5DF8 
 121      04EB
 122 0e16 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0e1a 00B5FFF7 	  _CALL nvic_enable_irq
 123      7DFC5DF8 
 123      04EB
 124 0e24 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
ARM GAS  forth.s 			page 43


 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0e26 00BF     	  _GBL_FUNC tv_out_isr
 132 0e28 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0e30 81EA0101 	  eor T1,T1
 134 0e34 0161     	  str T1,[T0,#TIM_SR]
 135 0e36 E16E     	  ldr T1,[UP,#VID_CNTR]
 136 0e38 01F10101 	  add T1,#1 
 137 0e3c E166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0e3e 226F     	  ldr T2,[UP,#VID_STATE]
 140 0e40 002A     	  cmp T2,#ST_VSYNC 
 141 0e42 07D0     	  beq state_vsync
 142 0e44 012A     	  cmp T2,#ST_PREVID 
 143 0e46 2FD0     	  beq state_pre_video 
 144 0e48 022A     	  cmp T2,#ST_VIDEO 
 145 0e4a 36D0     	  beq state_video_out 
 146 0e4c 032A     	  cmp T2,#ST_POSTVID 
 147 0e4e 63D0     	  beq state_post_video
 148 0e50 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0e54 0129     	  cmp T1,#1
 152 0e56 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0e58 4FF0DB01 	  mov T1,#SERRATION
 155 0e5c 0164     	  str T1,[T0,#TIM_CCR4]
 156 0e5e 40F6E931 	  mov T1,#SYNC_LINE 
 157 0e62 C162     	  str T1,[T0,#TIM_ARR]
 158 0e64 6BE0     	  b tv_isr_exit 
 159 0e66 0729     	1: cmp T1,#7
 160 0e68 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0e6a 40F62821 	  mov T1,#VSYNC_PULSE
 163 0e6e 0164     	  str T1,[T0,#TIM_CCR4]
 164 0e70 65E0     	  b tv_isr_exit
 165 0e72 0D29     	2: cmp T1,#13
 166 0e74 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0e76 4FF0DB01 	   mov T1,#SERRATION 
 169 0e7a 0164     	   str T1,[T0,#TIM_CCR4]
 170 0e7c 5FE0     	   b tv_isr_exit   
 171 0e7e 1229     	3: cmp T1,#18
 172 0e80 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0e82 616F     	   ldr T1,[UP,#VID_FIELD]
 175 0e84 0029     	   cmp T1,#ODD_FIELD  
 176 0e86 5AD0     	   beq tv_isr_exit 
 177 0e88 01E0     	   b sync_end 
 178 0e8a 1329     	4: cmp T1,#19 
 179 0e8c 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0e8e 4FF00901 	   mov T1,#9
 182 0e92 E166     	   str T1,[UP,#VID_CNTR]
 183 0e94 4FF4E171 	   mov T1,#HPULSE 
ARM GAS  forth.s 			page 44


 184 0e98 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0e9a 41F2D471 	   mov T1,#HPER 
 186 0e9e C162     	   str T1,[T0,#TIM_ARR] 
 187 0ea0 4FF00101 	   mov T1,#ST_PREVID 
 188 0ea4 2167     	   str T1,[UP,#VID_STATE]
 189 0ea6 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ea8 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0eaa 48D4     	   bmi tv_isr_exit 
 194 0eac 4FF00201 	   mov T1,#ST_VIDEO 
 195 0eb0 2167     	   str T1,[UP,#VID_STATE]
 196 0eb2 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0eb6 C160     	   str T1,[T0,#TIM_DIER]
 198 0eb8 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0eba F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ebc 06D9     	   bls 1f 
 205 0ebe 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ec2 2167     	   str T1,[UP,#VID_STATE]
 207 0ec4 4FF00101 	   mov T1,#1 
 208 0ec8 C160     	   str T1,[T0,#TIM_DIER]
 209 0eca 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ecc A06F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ece A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ed2 4FF0A003 	   mov T3,#BPR 
 214 0ed6 03FB01F1 	   mul T1,T3 
 215 0eda 0844     	   add T0,T1  
 216 0edc 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0ee4 10F8012B 	2: ldrb T2,[T0],#1 
 222 0ee8 4FEA0222 	   lsl T2,#8 
 223 0eec 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0eee AFF30080 	   nop.w 
 225 0ef2 AFF30080 	   nop.w
 226 0ef6 AFF30080 	   nop.w 
 227 0efa AFF30080 	   nop.w 
 228 0efe 4FEA0212 	   lsl T2,#4  
 229 0f02 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0f04 AFF30080 	   nop.w
 231 0f08 AFF30080 	   nop.w  
 232 0f0c 013B     	   subs T3,#1
 233 0f0e E9D1     	   bne 2b  
 234 0f10 4FF47022 	   mov T2,#(15<<16) 
 235 0f14 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0f16 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0f18 4FF48372 	   mov T2,#262
 239 0f1c 9142     	   cmp T1,T2
ARM GAS  forth.s 			page 45


 240 0f1e 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0f20 616F     	   ldr T1,[UP,VID_FIELD]
 243 0f22 11B9     	   cbnz T1, frame_end 
 244 0f24 40F6E931 	   mov T1,#SYNC_LINE
 245 0f28 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0f2a 4FF00001 	   mov T1,#ST_VSYNC 
 248 0f2e 2167     	   str T1,[UP,#VID_STATE]
 249 0f30 81EA0101 	   eor T1,T1 
 250 0f34 E166     	   str T1,[UP,#VID_CNTR]
 251 0f36 616F     	   ldr T1,[UP,#VID_FIELD]
 252 0f38 6FEA0101 	   mvn T1,T1  
 253 0f3c 6167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0f3e 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0f40 380D0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0f50 47F8046D 		_PUSH 
 266 0f54 04F1A006 		ADD TOS,UP,#BK_COLOR
 267 0f58 02F006B8 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0f5c 440F0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0f6c 47F8046D 		_PUSH 
 273 0f70 04F1A406 		ADD TOS,UP,#PEN_COLOR
 274 0f74 01F0F8BF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0f78 600F0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0f84 47F8046D 	  _PUSH 
 280 0f88 04F19C06 	  ADD TOS,UP,#COL 
 281 0f8c 01F0ECBF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0f90 7C0F0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0f98 47F8046D 	  _PUSH 
 287 0f9c 04F19806 	  ADD TOS,UP,#ROW 
ARM GAS  forth.s 			page 46


 288 0fa0 01F0E2BF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0fa4 940F0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0fb0 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0fb4 00FB06F6 	  mul TOS,T0 
 295 0fb8 01F0D6BF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0fbc A80F0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0fc8 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0fcc 00FB06F6 	  mul TOS,T0 
 302 0fd0 01F0CABF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0fd4 C00F0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0fe0 47F8046D 	  _PUSH 
 308 0fe4 DFF88C65 	  ldr TOS,=font_6x8 
 309 0fe8 01F0BEBF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0fec D80F0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0ff8 47F8046D 	  _PUSH 
 315 0ffc A66F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0ffe 01F0B3BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 1002 F00F0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 100c 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 100e 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 1012 02FB00F0 	    mul T0,T2 
 330 1016 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 101a 1044     	    add T0,T2 
 332 101c A36F     	    ldr T3,[UP,#VID_BUFFER] 
 333 101e 0344     	    add T3,T0 // T3 -> byte address 
 334 1020 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
ARM GAS  forth.s 			page 47


 335 1022 4FF00F02 	    mov T2,#15 // AND mask 
 336 1026 11F0010F 	    tst T1,#1 
 337 102a 01D0     	    beq 1f 
 338 102c 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 1030 DFF84405 	1:  ldr T0,=plot_op 
 340 1034 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 1038 05EA0205 	    and WP,T2 // mask out nibble 
 343 103c 94F8A000 	    ldrb T0,[UP,#BK_COLOR]
 344 1040 11F0010F 	    tst T1,#1 
 345 1044 01D1     	    bne 1f 
 346 1046 4FEA0010 	    lsl T0,#4 // high nibble  
 347 104a 45EA0005 	1:  orr WP,T0  
 348 104e 1D70     	    strb WP,[T3]
 349 1050 1AE0     	    b 9f 
 350              	op_pen: 
 351 1052 05EA0205 	    and WP,T2 
 352 1056 94F8A400 	    ldrb T0,[UP,#PEN_COLOR]
 353 105a 11F0010F 	    tst T1,#1
 354 105e 01D1     	    bne 1f 
 355 1060 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 1064 45EA0005 	1:	orr WP,T0 
 357 1068 1D70     	    strb WP,[T3]
 358 106a 0DE0     	    b 9f 
 359              	op_invert:
 360 106c 85EA0205 	    eor WP,T2 
 361 1070 1D70     	    strb WP,[T3]
 362 1072 09E0     	    b 9f 
 363              	op_xor:
 364 1074 D4F8A400 	    ldr T0,[UP,#PEN_COLOR]
 365 1078 11F0010F 	    tst T1,#1 
 366 107c 01D1     	    bne 1f 
 367 107e 4FEA0010 	    lsl T0,#4 
 368 1082 85EA0005 	1:  eor WP,T0 
 369 1086 1D70     	    strb WP,[T3]
 370 1088 57F8046B 	9:  _POP 
 371 108c 01F06CBF 	    _NEXT 
 372              	
 373 1090 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 1094 06100000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 10a0 E06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 10a2 0028     	    cmp T0,#0
 381 10a4 FCD1     	    bne 1b
 382 10a6 01F05FBF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 10aa 98100000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 10b4 80EA0000 	    eor T0,T0 
ARM GAS  forth.s 			page 48


 388 10b8 94F8A010 	    ldrb T1,[UP,#BK_COLOR]
 389 10bc 40EA0100 	    orr T0,T1 
 390 10c0 4FEA0111 	    lsl T1,#4 
 391 10c4 40EA0100 	    orr T0,T1 
 392 10c8 4FEA0021 	    lsl T1,T0,#8 
 393 10cc 40EA0100 	    orr T0,T1 
 394 10d0 4FEA0041 	    lsl T1,T0,#16
 395 10d4 40EA0100 	    orr T0,T1 
 396 10d8 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 10dc A26F     	    ldr T2,[UP,#VID_BUFFER]
 398 10de 5050     	1:	str T0,[T2,T1]
 399 10e0 0439     	    subs T1,#4
 400 10e2 FCD1     	    bne 1b
 401 10e4 1060     	    str T0,[T2]
 402 10e6 80EA0000 	    eor T0,T0 
 403 10ea C4F89800 	    str T0,[UP,#ROW]
 404 10ee C4F89C00 	    str T0,[UP,#COL]
 405 10f2 01F039BF 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 10f6 AE100000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 1104 504700BF 	  _NEST
 412 1108 8F310000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 1110 49330000 	  _ADR DUPP  
 414 1114 B5320000 	  _ADR TOR 
 415 1118 A5340000 	  _ADR STAR
 416 111c F90F0000 	  _ADR VIDBUFF
 417 1120 85340000 	  _ADR PLUS
 418 1124 51320000 	  _ADR RFROM   
 419 1128 8F310000 	  _DOLIT 0 
 419      00000000 
 420 1130 CD400000 	  _ADR FILL 
 421 1134 6F2F0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 1138 FA100000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 1148 504700BF 	    _NEST 
 429 114c F90F0000 	    _ADR VIDBUFF 
 430 1150 49330000 	    _ADR DUPP 
 431 1154 8F310000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 115c 49330000 	    _ADR DUPP 
 433 1160 B5320000 	    _ADR TOR 
 434 1164 85340000 	    _ADR PLUS 
 435 1168 59330000 	    _ADR SWAP 
ARM GAS  forth.s 			page 49


 436 116c 8F310000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 1174 51320000 	    _ADR RFROM  
 438 1178 95340000 	    _ADR SUBB 
 439 117c 85400000 	    _ADR WMOVE
 440 1180 8F310000 	    _DOLIT 24 
 440      18000000 
 441 1188 05110000 	    _ADR CLRLINE 
 442 118c 6F2F0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 1190 3C110000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 11a0 504700BF 	    _NEST 
 450 11a4 F90F0000 	    _ADR VIDBUFF
 451 11a8 49330000 	    _ADR DUPP 
 452 11ac 8F310000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 11b4 85340000 	    _ADR PLUS 
 454 11b8 8F310000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 11c0 8F310000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 11c8 95340000 	    _ADR SUBB  
 457 11cc 85400000 	    _ADR WMOVE
 458 11d0 8F310000 	    _DOLIT 0 
 458      00000000 
 459 11d8 05110000 	    _ADR CLRLINE
 460 11dc 6F2F0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 11e0 94110000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 11ec E34D     	    ldr WP,=SCROLLUP 
 469 11ee 45F00105 	    orr WP,#1
 470 11f2 80EA0000 	    eor T0,T0 
 471 11f6 C4F89C00 	    str T0,[UP,#COL]
 472 11fa D4F89800 	    ldr T0,[UP,#ROW]
 473 11fe 1828     	    cmp T0,#24 
 474 1200 A2D0     	    beq SCROLLUP  
 475 1202 00F10100 	    add T0,#1 
 476 1206 C4F89800 	    str T0,[UP,#ROW]
 477 120a 01F0ADBE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
ARM GAS  forth.s 			page 50


 482 120e E4110000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 1218 D4F89C00 	  ldr T0,[UP,#COL]
 484 121c 00F10100 	  add T0,#1
 485 1220 3528     	  cmp T0,#53
 486 1222 E3D5     	  bpl TV_CRLF  
 487 1224 C4F89C00 	  str T0,[UP,#COL]
 488 1228 01F09EBE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 122c 12120000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1238 D4F89C00 	    ldr T0,[UP,#COL]
 497 123c 28B1     	    cbz T0,1f 
 498 123e A0F10100 	    sub T0,#1 
 499 1242 C4F89C00 	    str T0,[UP,#COL]
 500 1246 01F08FBE 	    _NEXT 
 501 124a D4F89800 	1:  ldr T0,[UP,#ROW]
 502 124e 38B1     	    cbz T0,9f
 503 1250 A0F10100 	    sub T0,#1
 504 1254 C4F89800 	    str T0,[UP,#ROW]
 505 1258 4FF03400 	    mov T0,#52 
 506 125c C4F89C00 	    str T0,[UP,#COL]
 507 1260 01F082BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 1264 4FF08000 	    mov T0,#128 
 513 1268 06EA0006 	    and TOS,T0 
 514 126c 4FEAD616 	    lsr TOS,#7
 515 1270 01F07ABE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 1274 3868     	  ldr T0,[DSP]
 520 1276 00F10100 	  add T0,#1 
 521 127a 3860     	  str T0,[DSP]
 522 127c 01F074BE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 1280 4FEA4606 	    lsl TOS,#1
 527 1284 01F070BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
ARM GAS  forth.s 			page 51


 535 1288 504700BF 	    _NEST 
 536 128c 8F310000 	    _DOLIT 5 
 536      05000000 
 537 1294 B5320000 	    _ADR TOR 
 538 1298 B5320000 	1:  _ADR TOR 
 539 129c 7D360000 	    _ADR DDUP 
 540 12a0 85320000 	    _ADR RAT
 541 12a4 65120000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 12a8 0D100000 	    _ADR PLOT 
 543 12ac 75120000 	    _ADR INCR_X 
 544 12b0 51320000 	    _ADR RFROM 
 545 12b4 81120000 	    _ADR NEXT_PIXEL
 546 12b8 B1310000 	    _DONXT 1b
 546      98120000 
 547 12c0 69360000 	    _ADR TDROP 
 548 12c4 6F2F0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 12c8 A6F12006 	   sub TOS,#32
 553 12cc 4FF00800 	   mov T0,#8 
 554 12d0 00FB06F6 	   mul TOS,T0 
 555 12d4 A748     	   ldr T0,=font_6x8
 556 12d6 0644     	   add TOS,T0 
 557 12d8 01F046BE 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 12dc 30120000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 12e8 504700BF 	    _NEST
 565 12ec 49330000 	    _ADR DUPP 
 566 12f0 8F310000 	    _DOLIT 32 
 566      20000000 
 567 12f8 0D380000 	    _ADR ULESS
 568 12fc CF310000 	    _QBRAN 1f
 568      0C130000 
 569 1304 F7310000 	    _BRAN CTRL_KEY
 569      70130000 
 570 130c C9120000 	1:  _ADR CHAR_FONT 
 571 1310 850F0000 	    _ADR CURSOR_COL 
 572 1314 25320000 	    _ADR AT
 573 1318 C90F0000 	    _ADR COLX  // x coord 
 574 131c 990F0000 	    _ADR CURSOR_ROW 
 575 1320 25320000 	    _ADR AT    
 576 1324 B10F0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1328 2D360000 	    _ADR ROT  // TEST 
 578 132c 8F310000 	    _DOLIT 7   
 578      07000000 
 579 1334 B5320000 	    _ADR TOR  
 580 1338 B5320000 	1:  _ADR TOR  // { x y }
 581 133c 7D360000 	    _ADR DDUP  // { x y x y }
 582 1340 85320000 	    _ADR RAT 
 583 1344 45320000 	    _ADR CAT   // { x y x y r }
ARM GAS  forth.s 			page 52


 584 1348 89120000 	    _ADR CHAR_ROW 
 585 134c E1340000 	    _ADR ONEP // {x y' }
 586 1350 51320000 	    _ADR RFROM 
 587 1354 E1340000 	    _ADR ONEP // {x y' c-adr' }
 588 1358 B1310000 	    _DONXT 1b
 588      38130000 
 589 1360 69360000 	    _ADR TDROP  
 590 1364 19120000 	    _ADR RIGHT
 591 1368 59140000 	9:  _ADR SHOW_CURSOR 
 592 136c 6F2F0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 1370 E1140000 	    _ADR HIDE_CURSOR
 595 1374 49330000 	    _ADR DUPP 
 596 1378 8F310000 	    _DOLIT BKSPP  
 596      08000000 
 597 1380 CD370000 	    _ADR EQUAL 
 598 1384 CF310000 	    _QBRAN 1f 
 598      9C130000 
 599 138c 39140000 	    _ADR BACK_SPACE 
 600 1390 29330000 	8:  _ADR DROP 
 601 1394 F7310000 	    _BRAN 9b 
 601      68130000 
 602 139c 49330000 	1:  _ADR DUPP 
 603 13a0 8F310000 	    _DOLIT CRR 
 603      0D000000 
 604 13a8 CD370000 	    _ADR EQUAL 
 605 13ac CF310000 	    _QBRAN 1f 
 605      C0130000 
 606 13b4 E1130000 	    _ADR CAR_RET
 607 13b8 F7310000 	    _BRAN 8b
 607      90130000 
 608 13c0 8F310000 	1:  _DOLIT LF 
 608      0A000000 
 609 13c8 CD370000 	    _ADR EQUAL 
 610 13cc CF310000 	    _QBRAN 9b 
 610      68130000 
 611 13d4 F9130000 	    _ADR LN_FEED
 612 13d8 F7310000 	    _BRAN 9b  
 612      68130000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 13e0 504700BF 	   _NEST
 620 13e4 8F310000 	   _DOLIT 0 
 620      00000000 
 621 13ec 850F0000 	   _ADR CURSOR_COL 
 622 13f0 11320000 	   _ADR STORE 
 623 13f4 6F2F0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
ARM GAS  forth.s 			page 53


 630 13f8 504700BF 	    _NEST 
 631 13fc 990F0000 	    _ADR CURSOR_ROW 
 632 1400 25320000 	    _ADR AT 
 633 1404 49330000 	    _ADR DUPP 
 634 1408 8F310000 	    _DOLIT 24 
 634      18000000 
 635 1410 2D340000 	    _ADR XORR 
 636 1414 CF310000 	    _QBRAN 1f
 636      2C140000 
 637 141c E1340000 	    _ADR ONEP 
 638 1420 990F0000 	    _ADR CURSOR_ROW 
 639 1424 11320000 	    _ADR STORE 
 640 1428 6F2F0000 	    _UNNEST    
 641 142c 29330000 	1:  _ADR DROP 
 642 1430 49110000 	    _ADR SCROLLUP 
 643 1434 6F2F0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1438 504700BF 	  _NEST 
 652 143c 39120000 	  _ADR LEFT 
 653 1440 59140000 	  _ADR SHOW_CURSOR
 654 1444 6F2F0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1448 E0120000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1458 504700BF 	    _NEST 
 663 145c 8F310000 	    _DOLIT 0xFF
 663      FF000000 
 664 1464 990F0000 	0:  _ADR CURSOR_ROW
 665 1468 25320000 	    _ADR AT  
 666 146c E1340000 	    _ADR ONEP 
 667 1470 B10F0000 	    _ADR ROWY 
 668 1474 8F310000 	    _DOLIT BPR
 668      A0000000 
 669 147c A5340000 	    _ADR STAR
 670 1480 8F310000 	    _DOLIT BPR  
 670      A0000000 
 671 1488 95340000 	    _ADR SUBB 
 672 148c 850F0000 	    _ADR CURSOR_COL
 673 1490 25320000 	    _ADR AT 
 674 1494 C90F0000 	    _ADR COLX 
 675 1498 85350000 	    _ADR TWOSL  
 676 149c 85340000 	    _ADR PLUS
 677 14a0 F90F0000 	    _ADR VIDBUFF
 678 14a4 85340000 	    _ADR PLUS
ARM GAS  forth.s 			page 54


 679 14a8 8F310000 	    _DOLIT 2
 679      02000000 
 680 14b0 B5320000 	    _ADR TOR  
 681 14b4 7D360000 	1:  _ADR DDUP 
 682 14b8 31320000 	    _ADR CSTOR 
 683 14bc E1340000 	    _ADR ONEP 
 684 14c0 B1310000 	    _DONXT 1b
 684      B4140000 
 685 14c8 55360000 	2:  _ADR DDROP // drop 3 elements 
 686 14cc 6F2F0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 14d0 4C140000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 14e0 504700BF 	    _NEST 
 694 14e4 510F0000 	    _ADR BACKCOLOR 
 695 14e8 25320000 	    _ADR AT 
 696 14ec 49330000 	    _ADR DUPP  
 697 14f0 8F310000 	    _DOLIT 4 
 697      04000000 
 698 14f8 75340000 	    _ADR LSHIFT 
 699 14fc 19340000 	    _ADR ORR 
 700 1500 F7310000 	    _BRAN 0b
 700      64140000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1508 D4140000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1514 352E     	    cmp TOS,#53
 706 1516 01D4     	    bmi 1f 
 707 1518 4FF03406 	    mov TOS,#52
 708 151c C4F89C60 	1:  str TOS,[UP,#COL]
 709 1520 57F8046B 	    _POP
 710 1524 192E     	    cmp TOS,#25
 711 1526 01D4     	    bmi 1f 
 712 1528 4FF01806 	    mov TOS,#24 
 713 152c C4F89860 	1:  str TOS,[UP,#ROW]
 714 1530 57F8046B 	    _POP 
 715 1534 01F018BD 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1538 0C150000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1544 504700BF 	    _NEST 
 721 1548 AD3F0000 	    _ADR PAD 
 722 154c 49330000 	    _ADR DUPP 
 723 1550 E1340000 	    _ADR ONEP 
 724 1554 8F310000 	    _DOLIT 53
ARM GAS  forth.s 			page 55


 724      35000000 
 725 155c 094F0000 	    _ADR ACCEP
 726 1560 59330000 	    _ADR SWAP 
 727 1564 29330000 	    _ADR DROP 
 728 1568 89330000 	    _ADR OVER 
 729 156c 31320000 	    _ADR CSTOR  
 730 1570 6F2F0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
ARM GAS  forth.s 			page 56


 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
ARM GAS  forth.s 			page 57


 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
ARM GAS  forth.s 			page 58


 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
ARM GAS  forth.s 			page 59


  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
ARM GAS  forth.s 			page 60


  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
ARM GAS  forth.s 			page 61


  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
ARM GAS  forth.s 			page 62


 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 1580 1C61     	   .byte 0x1c,'a' 
   9 1582 3262     	   .byte 0x32,'b'
  10 1584 2163     	   .byte 0x21,'c'
  11 1586 2364     	   .byte 0x23,'d'
  12 1588 2465     	   .byte 0x24,'e'
  13 158a 2B66     	   .byte 0x2b,'f'
  14 158c 3467     	   .byte 0x34,'g'
  15 158e 3368     	   .byte 0x33,'h'
  16 1590 4369     	   .byte 0x43,'i'
  17 1592 3B6A     	   .byte 0x3B,'j'
  18 1594 426B     	   .byte 0x42,'k'
  19 1596 4B6C     	   .byte 0x4b,'l'
  20 1598 3A6D     	   .byte 0x3a,'m'
  21 159a 316E     	   .byte 0x31,'n'
  22 159c 446F     	   .byte 0x44,'o'
  23 159e 4D70     	   .byte 0x4d,'p'
  24 15a0 1571     	   .byte 0x15,'q'
  25 15a2 2D72     	   .byte 0x2d,'r'
  26 15a4 1B73     	   .byte 0x1b,'s'
  27 15a6 2C74     	   .byte 0x2c,'t'
  28 15a8 3C75     	   .byte 0x3c,'u'
  29 15aa 2A76     	   .byte 0x2a,'v'
  30 15ac 1D77     	   .byte 0x1d,'w'
  31 15ae 2278     	   .byte 0x22,'x'
  32 15b0 3579     	   .byte 0x35,'y'
  33 15b2 1A7A     	   .byte 0x1a,'z'
  34 15b4 4530     	   .byte 0x45,'0'
  35 15b6 1631     	   .byte 0x16,'1'
  36 15b8 1E32     	   .byte 0x1e,'2'
  37 15ba 2633     	   .byte 0x26,'3'
  38 15bc 2534     	   .byte 0x25,'4'
  39 15be 2E35     	   .byte 0x2e,'5'
  40 15c0 3636     	   .byte 0x36,'6'
  41 15c2 3D37     	   .byte 0x3d,'7'
  42 15c4 3E38     	   .byte 0x3e,'8'
  43 15c6 4639     	   .byte 0x46,'9'
  44 15c8 0E60     	   .byte 0x0e,'`'
  45 15ca 4E2D     	   .byte 0x4e,'-'
  46 15cc 553D     	   .byte 0x55,'='
  47 15ce 5D5C     	   .byte 0x5d,'\\'
  48 15d0 545B     	   .byte 0x54,'['
  49 15d2 5B5D     	   .byte 0x5b,']'
  50 15d4 4C3B     	   .byte 0x4c,';'
ARM GAS  forth.s 			page 63


  51 15d6 5227     	   .byte 0x52,'\''
  52 15d8 412C     	   .byte 0x41,','
  53 15da 492E     	   .byte 0x49,'.'
  54 15dc 7C2A     	   .byte 0x7c,'*'
  55 15de 792B     	   .byte 0x79,'+'
  56 15e0 2920     	   .byte 0x29,' '
  57 15e2 5A0D     	   .byte SC_ENTER,CRR 
  58 15e4 6608     	   .byte SC_BKSP,BKSPP 
  59 15e6 0D09     	   .byte SC_TAB,9
  60 15e8 761B     	   .byte SC_ESC,27
  61 15ea 119E     	   .byte SC_LALT,VK_LALT 
  62 15ec 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 15ee 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 15f0 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 15f2 779A     	   .byte SC_NUM,VK_NLOCK 
  66 15f4 5800     	   .byte SC_CAPS,0
  67 15f6 0580     	   .byte SC_F1,VK_F1
  68 15f8 0681     	   .byte SC_F2,VK_F2
  69 15fa 0482     	   .byte SC_F3,VK_F3
  70 15fc 0C83     	   .byte SC_F4,VK_F4
  71 15fe 0384     	   .byte SC_F5,VK_F5
  72 1600 0B85     	   .byte SC_F6,VK_F6
  73 1602 8386     	   .byte SC_F7,VK_F7
  74 1604 0A87     	   .byte SC_F8,VK_F8
  75 1606 0188     	   .byte SC_F9,VK_F9
  76 1608 098A     	   .byte SC_F10,VK_F10
  77 160a 788B     	   .byte SC_F11,VK_F11
  78 160c 078C     	   .byte SC_F12,VK_F12
  79 160e 7030     	   .byte SC_KP0,'0'
  80 1610 6931     	   .byte SC_KP1,'1'
  81 1612 7232     	   .byte SC_KP2,'2'
  82 1614 7A33     	   .byte SC_KP3,'3'
  83 1616 6B34     	   .byte SC_KP4,'4'
  84 1618 7335     	   .byte SC_KP5,'5'
  85 161a 7436     	   .byte SC_KP6,'6'
  86 161c 6C37     	   .byte SC_KP7,'7'
  87 161e 7538     	   .byte SC_KP8,'8'
  88 1620 7D39     	   .byte SC_KP9,'9'
  89 1622 7C2A     	   .byte SC_KPMUL,'*'
  90 1624 4A2F     	   .byte SC_KPDIV,'/'
  91 1626 792B     	   .byte SC_KPPLUS,'+'
  92 1628 7B2D     	   .byte SC_KPMINUS,'-'
  93 162a 712E     	   .byte SC_KPDOT,'.'
  94 162c 5A0D     	   .byte SC_KPENTER,'\r'
  95 162e FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1630 AAAA     	   .byte BAT_OK,BAT_OK  
  97 1632 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1634 6141     	   .byte 'a','A'
 102 1636 6242     	   .byte 'b','B'
 103 1638 6343     	   .byte 'c','C'
 104 163a 6444     	   .byte 'd','D'
 105 163c 6545     	   .byte 'e','E'
 106 163e 6646     	   .byte 'f','F'
 107 1640 6747     	   .byte 'g','G'
ARM GAS  forth.s 			page 64


 108 1642 6848     	   .byte 'h','H'
 109 1644 6949     	   .byte 'i','I'
 110 1646 6A4A     	   .byte 'j','J'
 111 1648 6B4B     	   .byte 'k','K'
 112 164a 6C4C     	   .byte 'l','L'
 113 164c 6D4D     	   .byte 'm','M'
 114 164e 6E4E     	   .byte 'n','N'
 115 1650 6F4F     	   .byte 'o','O'
 116 1652 7050     	   .byte 'p','P'
 117 1654 7151     	   .byte 'q','Q'
 118 1656 7252     	   .byte 'r','R'
 119 1658 7353     	   .byte 's','S'
 120 165a 7454     	   .byte 't','T'
 121 165c 7555     	   .byte 'u','U'
 122 165e 7656     	   .byte 'v','V'
 123 1660 7757     	   .byte 'w','W'
 124 1662 7858     	   .byte 'x','X'
 125 1664 7959     	   .byte 'y','Y'
 126 1666 7A5A     	   .byte 'z','Z'
 127 1668 3121     	   .byte '1','!'
 128 166a 3240     	   .byte '2','@'
 129 166c 3323     	   .byte '3','#'
 130 166e 3424     	   .byte '4','$'
 131 1670 3525     	   .byte '5','%'
 132 1672 365E     	   .byte '6','^'
 133 1674 3726     	   .byte '7','&'
 134 1676 382A     	   .byte '8','*'
 135 1678 3928     	   .byte '9','('
 136 167a 3029     	   .byte '0',')'
 137 167c 2D5F     	   .byte '-','_'
 138 167e 3D2B     	   .byte '=','+'
 139 1680 607E     	   .byte '`','~'
 140 1682 2722     	   .byte '\'','"'
 141 1684 2C3C     	   .byte ',','<'
 142 1686 2E3E     	   .byte '.','>'
 143 1688 2F3F     	   .byte '/','?'
 144 168a 5C7C     	   .byte '\\','|'
 145 168c 3B3A     	   .byte ';',':'
 146 168e 5B7B     	   .byte '[','{'
 147 1690 5D7D     	   .byte ']','}'
 148 1692 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1694 315C     	   .byte '1','\\'
 153 1696 3240     	   .byte '2','@'
 154 1698 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 169a 363F     	   .byte '6','?'
 158 169c 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 169e 397B     	   .byte '9','{'
 161 16a0 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 16a2 0000     	   .byte 0,0
ARM GAS  forth.s 			page 65


 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 16a4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 16a6 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 16a8 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 16aa 11A3     	    .byte SC_RALT,VK_RALT
 172 16ac 2F97     	    .byte SC_APPS,VK_APPS
 173 16ae 758D     	    .byte SC_UP,VK_UP
 174 16b0 728E     	    .byte SC_DOWN,VK_DOWN
 175 16b2 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 16b4 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 16b6 7095     	    .byte SC_INSERT,VK_INSERT
 178 16b8 6C91     	    .byte SC_HOME,VK_HOME
 179 16ba 7D93     	    .byte SC_PGUP,VK_PGUP
 180 16bc 7A94     	    .byte SC_PGDN,VK_PGDN
 181 16be 717F     	    .byte SC_DEL,VK_DELETE
 182 16c0 6992     	    .byte SC_END,VK_END
 183 16c2 4A2F     	    .byte SC_KPDIV,'/'
 184 16c4 5A0D     	    .byte SC_KPENTER,'\r'
 185 16c6 1200     	    .byte 0x12,0
 186 16c8 7C00     	    .byte 0x7c,0
 187 16ca 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 16cc 6303     	   .byte 'c', VK_CTRL_C 
 193 16ce 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 16d0 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 16d2 27A2     	   .byte SC_RGUI,VK_RGUI
 196 16d4 11A3     	   .byte SC_RALT,VK_RALT
 197 16d6 2F97     	   .byte SC_APPS,VK_APPS
 198 16d8 7095     	   .byte SC_INSERT,VK_INSERT
 199 16da 6C91     	   .byte SC_HOME,VK_HOME
 200 16dc 7D93     	   .byte SC_PGUP,VK_PGUP
 201 16de 717F     	   .byte SC_DEL,VK_DELETE
 202 16e0 6992     	   .byte SC_END,VK_END
 203 16e2 7A94     	   .byte SC_PGDN,VK_PGDN
 204 16e4 758D     	   .byte SC_UP,VK_UP
 205 16e6 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 16e8 728E     	   .byte SC_DOWN,VK_DOWN
 207 16ea 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 16ec 4A2F     	   .byte SC_KPDIV,'/'
 209 16ee 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 16f0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 16f2 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 16f4 119E     	   .byte SC_LALT,VK_LALT
 213 16f6 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 16f8 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 16fa 761B     	   .byte SC_ESC,VK_ESC
 216 16fc 779A     	   .byte SC_NUM,VK_NLOCK
 217 16fe 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1700 0000     	   .byte 0,0
 219              	
 220              	
  38              	
ARM GAS  forth.s 			page 66


  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 1702 00BF     	    _GBL_FUNC kbd_isr 
  79 1704 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 170c 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1710 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 1712 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 171a D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
  84 171e 10F0020F 	    tst r0,#KBD_TX 
  85 1722 40F08480 	    bne send_bit  
  86 1726 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1728 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 172c 01F10102 	    add r2,r1,#1
  89 1730 84F87C20 	    strb r2,[UP,#KBD_BITCNTR]
  90 1734 0029     	    cmp r1,#0
  91 1736 15D0     	    beq start_bit 
  92 1738 0929     	    cmp r1,#9 
  93 173a 25D0     	    beq parity_bit 
ARM GAS  forth.s 			page 67


  94 173c 0A29     	    cmp r1,#10 
  95 173e 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 1740 94F87D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1744 4FEA5202 	    lsr r2,#1 
  99 1748 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 174c 07D0     	    beq 1f 
 101 174e 42F08002 	    orr r2,#(1<<7)
 102 1752 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1756 00F10100 	    add r0,#1 
 104 175a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 105 175e 84F87D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1762 63E0     	    b 9f         
 107              	start_bit:
 108 1764 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1768 60D1     	    bne 9f // not a start bit 
 110 176a 80EA0000 	    eor r0,r0 
 111 176e 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 112 1772 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 113 1776 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 177a 6FF00101 	    mvn r1,#1
 115 177e 00EA0100 	    and r0,r1 // clear error flag 
 116 1782 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 117 1786 51E0     	    b 9f 
 118              	parity_bit:
 119 1788 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 120 178c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1790 4CD0     	    beq 9f  
 122 1792 01F10101 	    add r1,#1 
 123 1796 84F87F10 	    strb r1,[UP,#KBD_PARITY]  
 124 179a 47E0     	    b 9f      
 125              	stop_bit:
 126 179c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 17a0 40D0     	    beq 8f // error stop bit expected 
 128 17a2 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 129 17a6 11F0010F 	    tst r1,#1 
 130 17aa 3BD0     	    beq 8f // error parity
 131 17ac 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 17b0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 17b4 E028     	    cmp r0,#XT_KEY
 134 17b6 04D1     	    bne 1f
 135 17b8 41F04001 	    orr r1,#KBD_F_XT
 136 17bc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 137 17c0 30E0     	    b 8f  
 138 17c2 11F0800F 	1:  tst r1,#KBD_F_REL
 139 17c6 14D0     	    beq store_code
 140 17c8 5828     	    cmp r0,#SC_CAPS
 141 17ca 04D1     	    bne 1f
 142 17cc 81F00401 	    eor r1,#KBD_F_CAPS
 143 17d0 41F00101 	    orr r1,#KBD_F_CTGL 
 144 17d4 06E0     	    b 2f 
 145 17d6 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 17e0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 17e4 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 17e8 01EA0201 	    and r1,r2
ARM GAS  forth.s 			page 68


 149 17ec 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 150 17f0 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 17f2 F028     	    cmp r0,#KEY_REL
 154 17f4 04D1     	    bne 1f
 155              	// set release flags 
 156 17f6 41F08001 	    orr r1,#KBD_F_REL 
 157 17fa 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 158 17fe 11E0     	    b 8f     
 159 1800 0146     	1:  mov r1,r0 
 160 1802 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 180c 0AD1     	    bne 8f // was async key 
 162 180e D4F89400 	    ldr r0,[UP,#KBD_QTAIL]
 163 1812 04F18002 	    add r2,UP,#KBD_QUEUE
 164 1816 1154     	    strb r1,[r2,r0]
 165 1818 00F10100 	    add r0,#1
 166 181c 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1820 84F89400 	    strb r0,[UP,#KBD_QTAIL]
 168 1824 80EA0000 	8:  eor r0,r0 
 169 1828 A4F87C00 	    strh r0,[UP,#KBD_BITCNTR]
 170 182c 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 182e 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 1832 01F10100 	    add r0,r1,#1
 182 1836 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 183 183a 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 183e 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 1842 0829     	1:  cmp r1,#8 
 187 1844 15D0     	    beq send_parity 
 188 1846 0929     	    cmp r1,#9 
 189 1848 1CD0     	    beq send_stop
 190 184a 0A29     	    cmp r1,#10
 191 184c 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 184e 10F0010F 	    tst r0,#1
 194 1852 4FEA5000 	    lsr r0,#1
 195 1856 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 196 185a 02D1     	    bne 1f 
 197 185c 4FEA0242 	    lsl r2,#16
 198 1860 05E0     	    b 2f  
 199 1862 94F87F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1866 00F10100 	    add r0,#1 
 201 186a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 202 186e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1870 1CE0     	    b 9f 
ARM GAS  forth.s 			page 69


 204              	send_parity:
 205 1872 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 206 1876 10F0010F 	    tst r0,#1
 207 187a 01D0     	    beq 1f 
 208 187c 4FEA0242 	    lsl r2,#16
 209 1880 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1882 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1884 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1886 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 188a 1960     	    str r1,[r3,#GPIO_MODER]
 217 188c 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 188e 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1892 6FF00201 	    mvn r1,#KBD_TX 
 221 1896 00EA0100 	    and r0,r1 
 222 189a 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 189c 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 18a0 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 225 18a4 80EA0000 	    eor r0,r0 
 226 18a8 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 227 18ac 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 18ae 02B4     	    push {r1}
 238 18b0 DFF86414 	    ldr r1,=async_keys
 239 18b4 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 18be 02BC     	    pop {r1}
 241 18c0 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 18c2 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 18cc FF28     	    cmp r0,#255
 256 18ce 01D1     	    bne set_async_key 
ARM GAS  forth.s 			page 70


 257 18d0 0020     	    movs r0,#0 
 258 18d2 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 18d4 06B4     	    push {r1,r2}
 262 18d6 94F87E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 18da DFF84014 	    ldr r1,=async_jump 
 264 18de D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 18e2 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 18e6 04E0     	    b set_reset
 268              	ctrl_key:
 269 18e8 4FF01000 	    mov r0,#KBD_F_CTRL
 270 18ec 01E0     	    b set_reset 
 271              	alt_key:
 272 18ee 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 18f2 12F0800F 	    tst r2,#KBD_F_REL 
 275 18f6 04D0     	    beq 1f 
 276 18f8 6FEA0000 	    mvn r0,r0
 277 18fc 02EA0002 	    and r2,r0
 278 1900 01E0     	    b 2f
 279 1902 42EA0002 	1:  orr r2,r0 
 280 1906 84F87E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 190a 5FF0FF30 	    movs r0,#-1
 282 190e 06BC     	9:  pop {r1,r2}
 283 1910 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1912 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1914 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1916 1401     	    .byte SC_LCTRL,1  // left control 
 290 1918 1401     	    .byte SC_RCTRL,1  // right control 
 291 191a 1102     	    .byte SC_LALT,2  // left alt 
 292 191c 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 191e 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1920 00       	    .byte 0 // shift  key 
 297 1921 03       	    .byte (ctrl_key-shift_key)/2
 298 1922 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1923 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1924 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 192c 1846     	    mov r0,r3 
 311 192e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 1932 4FF00002 	    mov r2,#INPUT_FLOAT 
ARM GAS  forth.s 			page 71


 313 1936 00B5FEF7 	    _CALL gpio_config
 313      32FF5DF8 
 313      04EB
 314 1940 1846     	    mov r0,r3 
 315 1942 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1946 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 194a 00B5FEF7 	    _CALL gpio_config
 317      28FF5DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1954 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 195c 4FF40050 	    mov r0,#(2<<12)
 321 1960 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1962 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 196a 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 196e 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1970 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1972 80EA0000 	   eor r0,r0 
 328 1976 C4F89000 	   str r0,[UP,#KBD_QHEAD]
 329 197a C4F89400 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 197e 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1982 4FF00101 	   mov r1,#1 
 333 1986 00B5FEF7 	   _CALL nvic_set_priority
 333      AEFE5DF8 
 333      04EB
 334 1990 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1994 00B5FEF7 	   _CALL nvic_enable_irq 
 335      C0FE5DF8 
 335      04EB
 336 199e 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 19a0 3C150000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 19b0 47F8046D 	    _PUSH 
 342 19b4 94F87E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 19b8 06F0FC06 	    and TOS,#0xFC  
 344 19bc 01F0D4BA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 19c0 0EB4     	    push {T1,T2,T3}
 352 19c2 80EA0000 	    eor T0,T0  
 353 19c6 04F18003 	    add T3,UP,#KBD_QUEUE
 354 19ca D4F89010 	    ldr T1,[UP,#KBD_QHEAD]
 355 19ce D4F89420 	    ldr T2,[UP,#KBD_QTAIL]
 356 19d2 9142     	    cmp T1,T2 
ARM GAS  forth.s 			page 72


 357 19d4 06D0     	    beq 2f  
 358 19d6 585C     	    ldrb T0,[T3,T1]
 359 19d8 01F10101 	    add T1,#1 
 360 19dc 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 19e0 C4F89010 	    str T1,[UP,#KBD_QHEAD]
 362 19e4 0EBC     	2:  pop {T1,T2,T3}
 363 19e6 7047     	    _RET 
 364              	
 365              	wait_code:
 366 19e8 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 19f2 0000     	    movs T0,T0
 368 19f4 F8D0     	    beq wait_code  
 369 19f6 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 19f8 04B4     	    push {T2}
 380 19fa 11F8012B 	1:  ldrb T2,[T1],#1
 381 19fe 22B1     	    cbz T2,2f 
 382 1a00 8242     	    cmp T2,T0
 383 1a02 02D0     	    beq 2f 
 384 1a04 01F10101 	    add T1,#1 
 385 1a08 F7E7     	    b 1b 
 386 1a0a 0878     	2:  ldrb T0,[T1]
 387 1a0c 0000     	    movs T0,T0 // set/reset zero flag 
 388 1a0e 04BC     	9:  pop {T2}
 389 1a10 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 1a12 A4190000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1a20 47F8046D 	    _PUSH 
 398 1a24 86EA0606 	    eor TOS,TOS 
 399 1a28 BD49     	    ldr T1,=sc_ascii // translation table
 400 1a2a 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 1a2e 4FF04002 	    mov T2,#KBD_F_XT 
 402 1a32 1042     	    tst T0,T2
 403 1a34 00D0     	    beq 1f
 404 1a36 BB49     	    ldr T1,=extended // extended code translation
 405 1a38 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 1a42 98B1     	    cbz T0,inkey_exit
ARM GAS  forth.s 			page 73


 407 1a44 E128     	    cmp T0,#XT2_KEY // pause 
 408 1a46 13D0     	    beq pause_key
 409 1a48 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1a52 0646     	    mov TOS,T0
 411 1a54 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1a5e 032E     	    cmp TOS,#VK_CTRL_C 
 413 1a60 3EF419AD 	    beq user_reboot 
 414 1a64 47F8046D 	    _PUSH 
 415 1a68 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1a6c 01F07CBA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1a70 4FF00701 	    mov T1,#7 
 420 1a74 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1a7e 0139     	    subs T1,#1
 422 1a80 F8D1     	    bne 1b 
 423 1a82 01F071BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1a86 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1a8a 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1a8e 06D1     	    bne shift_down 
 431 1a90 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1a94 06D1     	    bne altchar_down 
 433 1a96 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1a9a 06D1     	    bne ctrl_down 
 435 1a9c 0DE0     	    b 9f 
 436              	shift_down:
 437 1a9e 3046     	    mov T0,TOS 
 438 1aa0 A149     	    ldr T1,=shifted 
 439 1aa2 04E0     	    b 8f 
 440              	altchar_down:
 441 1aa4 3046     	    mov T0,TOS 
 442 1aa6 A149     	    ldr T1,=altchar
 443 1aa8 01E0     	    b 8f
 444              	ctrl_down:
 445 1aaa 3046     	    mov T0,TOS 
 446 1aac A049     	    ldr T1,=controls 
 447 1aae 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1ab8 0646     	    mov TOS,T0
 449 1aba 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1ac4 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1ac6 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 74


 454 1aca 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1ace 0BD0     	    beq 9f 
 456 1ad0 412E     	    cmp TOS,#'A'
 457 1ad2 09D4     	    bmi 9f 
 458 1ad4 5B2E     	    cmp TOS,#'Z'+1 
 459 1ad6 03D4     	    bmi 3f 
 460 1ad8 612E     	    cmp TOS,#'a'
 461 1ada 05D4     	    bmi 9f 
 462 1adc 7B2E     	    cmp TOS,#'z'+1
 463 1ade 03D5     	    bpl 9f 
 464 1ae0 4FF02000 	3:  mov T0,#(1<<5)
 465 1ae4 86EA0006 	    eor TOS,T0 
 466 1ae8 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1aea 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1aec 206F     	1:  ldr r0,[UP,#VID_STATE]
 483 1aee 0128     	    cmp r0,ST_PREVID 
 484 1af0 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 1af2 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1af6 00B5FEF7 	    _CALL nvic_disable_irq
 487      24FE5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1b00 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1b08 1846     	    mov r0,r3 
 491 1b0a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 1b0e 4FF01102 	    mov r2,#OUTPUT_OD
 493 1b12 00B5FEF7 	    _CALL gpio_config 
 493      44FE5DF8 
 493      04EB
 494 1b1c 1846     	    mov r0,r3 
 495 1b1e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 1b22 82EA0202 	    eor r2,r2 
 497 1b26 00B5FEF7 	    _CALL gpio_out 
 497      90FE5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1b30 4FF4E150 	    mov r0,#150*48
 500 1b34 0138     	1:  subs r0,#1 
 501 1b36 FDD1     	    bne 1b
 502 1b38 01BC     	    pop {r0}
 503 1b3a 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
ARM GAS  forth.s 			page 75


 504 1b3e D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
 505 1b42 40F00200 	    orr r0,#KBD_TX 
 506 1b46 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 507 1b4a 80EA0000 	    eor r0,r0 
 508 1b4e 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 509 1b52 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1b56 1846     	    mov r0,r3 
 513 1b58 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1b5c 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1b60 00B5FEF7 	    _CALL gpio_config 
 515      1DFE5DF8 
 515      04EB
 516 1b6a 1846     	    mov r0,r3 
 517 1b6c 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1b70 82EA0202 	    eor r2,r2 
 519 1b74 00B5FEF7 	    _CALL gpio_out
 519      69FE5DF8 
 519      04EB
 520              	// release clock line 
 521 1b7e 1846     	    mov r0,r3 
 522 1b80 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1b84 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1b88 00B5FEF7 	    _CALL gpio_config
 524      09FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1b92 4FF00A00 	    mov r0,#10
 528 1b96 E060     	    str r0,[UP,#CD_TIMER]
 529 1b98 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1b9a 20B1     	    cbz r0, 4f 
 531 1b9c 94F87E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1ba0 10F0020F 	    tst r0,#KBD_TX
 533 1ba4 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1ba6 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1baa 00B5FEF7 	    _CALL nvic_enable_irq
 536      B5FD5DF8 
 536      04EB
 537 1bb4 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1bb8 20F00201 	    bic r1,r0,#KBD_TX
 539 1bbc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 540 1bc0 00F00200 	    and r0,#KBD_TX
 541 1bc4 48B1     	    cbz r0, 5f
 542 1bc6 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1bc8 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1bcc 1960     	    str r1,[r3,#GPIO_MODER]
 545 1bce 80EA0000 	    eor r0,r0 
 546 1bd2 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1bd6 6FEA0000 	    mvn r0,r0   
 548 1bda 0EBC     	5:  pop {r1,r2,r3}
 549 1bdc 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
ARM GAS  forth.s 			page 76


 553              	kbd_clear_queue:
 554 1bde 80EA0000 	    eor T0,T0 
 555 1be2 C4F89000 	    str T0,[UP,#KBD_QHEAD]
 556 1be6 C4F89400 	    str T0,[UP,#KBD_QTAIL]
 557 1bea 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1bee 6FF00301 	    mvn T1,#3
 559 1bf2 00EA0100 	    and T0,T1 
 560 1bf6 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 561 1bfa 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1bfc 161A0000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1c08 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1c0c 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1c16 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1c18 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1c22 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1c2c FE28     	    cmp r0,KBD_CMD_RESEND
 574 1c2e EBD0     	    beq 1b 
 575 1c30 4FF4FA70 	    mov T0,#500 
 576 1c34 E060     	    str T0,[UP,#CD_TIMER]
 577 1c36 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1c40 10B9     	    cbnz T0,3f
 579 1c42 E068     	    ldr T0,[UP,#CD_TIMER]
 580 1c44 0028     	    cmp T0,#0 
 581 1c46 F6D1     	    bne 2b 
 582 1c48 47F8046D 	3:  _PUSH 
 583 1c4c 0646     	    mov TOS,T0  
 584 1c4e 01F08BB9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1c52 001C0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1c60 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1c6a 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1c6e 00B5FFF7 	    _CALL kbd_send 
ARM GAS  forth.s 			page 77


 594      3BFF5DF8 
 594      04EB
 595 1c78 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1c82 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1c84 ECD0     	    beq 1b
 598 1c86 FA28     	    cmp T0,#KBD_ACK  
 599 1c88 F6D1     	    bne 2b 
 600 1c8a 3046     	2:  mov T0,TOS 
 601 1c8c 00F00700 	    and T0,#7 
 602 1c90 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1c9a 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ca4 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ca6 F0D0     	    beq 2b
 606 1ca8 FA28     	    cmp T0,#KBD_ACK 
 607 1caa F6D1     	    bne 3b  
 608 1cac 57F8046B 	    _POP 
 609 1cb0 01F05AB9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1cb4 561C0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1cc4 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1cc8 10F0010F 	    tst T0,#1
 619 1ccc 01D1     	    bne 1f 
 620 1cce 01F04BB9 	    _NEXT 
 621 1cd2 47F8046D 	1: _PUSH 
 622 1cd6 6FF00101 	    mvn T1,#1 
 623 1cda 00EA0100 	    and T0,T1 
 624 1cde 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 625 1ce2 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1ce6 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1cee B81C0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1cfc 504700BF 	    _NEST
 635 1d00 C51C0000 	1:  _ADR CAPS_LED  
 636 1d04 211A0000 	    _ADR PS2_QKEY 
ARM GAS  forth.s 			page 78


 637 1d08 95350000 	    _ADR QDUP 
 638 1d0c CF310000 	    _QBRAN 1b  
 638      001D0000 
 639 1d14 6F2F0000 	    _UNNEST 
 640 1d18 12190000 	
 640      20190000 
 640      80150000 
 640      A4160000 
 640      34160000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	    FLASH_SECTOR_SIZE= 4096 
  34              	
  35              	/*****************************
  36              	  initialize SPI peripheral 
  37              	  pinout:
  38              	     PA4 F_CS 
  39              	     PA5 SCK 
  40              	     PA6 MISO 
  41              	     PA7 MOSI    
  42              	******************************/
  43              	flash_spi_init:
  44 1d38 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  44      C4F20200 
  45 1d40 0346     	    mov r3,r0 
  46 1d42 4FF00401 	    mov r1,#PIN_F_SC 
  47 1d46 4FF00102 	    mov r2,#OUTPUT_PP
ARM GAS  forth.s 			page 79


  48 1d4a 00B5FEF7 	    _CALL gpio_config 
  48      28FD5DF8 
  48      04EB
  49 1d54 1846     	    mov r0,r3 
  50 1d56 4FF00401 	    mov r1,#PIN_F_SC  
  51 1d5a 4FF00102 	    MOV r2,#1
  52 1d5e 00B5FEF7 	    _CALL gpio_out 
  52      74FD5DF8 
  52      04EB
  53 1d68 1846     	    mov r0,r3 
  54 1d6a 4FF00501 	    mov r1,#PIN_SCK  
  55 1d6e 4FF00202 	    mov r2,#OUTPUT_AFPP
  56 1d72 00B5FEF7 	    _CALL gpio_config 
  56      14FD5DF8 
  56      04EB
  57 1d7c 1846     	    mov r0,r3 
  58 1d7e 4FF00701 	    mov r1,#PIN_MOSI 
  59 1d82 4FF00202 	    mov r2,#OUTPUT_AFPP 
  60 1d86 00B5FEF7 	    _CALL gpio_config 
  60      0AFD5DF8 
  60      04EB
  61 1d90 1846     	    mov r0,r3
  62 1d92 4FF00601 	    mov r1,#PIN_MISO
  63 1d96 4FF00202 	    mov r2,#INPUT_AFO  
  64 1d9a 00B5FEF7 	    _CALL gpio_config
  64      00FD5DF8 
  64      04EB
  65              	// PA5:7 at max speed 
  66 1da4 4CF6AA40 	    mov r0,#0xCCAA
  67 1da8 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  68 1daa 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  68      C4F20200 
  69 1db2 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  70 1db4 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  71 1db8 4164     	    str r1,[r0,#RCC_APB2ENR]
  72 1dba 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  72      C4F20100 
  73 1dc2 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  74 1dc6 0180     	    strh r1,[r0,#SPI_CR1]
  75 1dc8 196A     	    ldr r1,[r3,#GPIO_AFRL]
  76 1dca 80EA0000 	    eor r0,r0 
  77 1dce C5F25050 	    movt r0,#0x5550 
  78 1dd2 40EA0100 	    orr r0,r1 
  79 1dd6 1862     	    str r0,[r3,#GPIO_AFRL]
  80 1dd8 7047     	    _RET 
  81              	
  82              	
  83              	/**********************
  84              	    CHIP-SEL ( -- )
  85              	    drive F_SC low 
  86              	*********************/
  87 1dda F21C0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  87      08434849 
  87      502D5345 
  87      4C00
  88 1de8 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  88      C4F20200 
ARM GAS  forth.s 			page 80


  89 1df0 4FF00401 	    mov r1,#PIN_F_SC 
  90 1df4 4FF00002 	    mov r2,#0 
  91 1df8 00B5FEF7 	    _CALL gpio_out 
  91      27FD5DF8 
  91      04EB
  92 1e02 01F0B1B8 	    _NEXT 
  93              	
  94              	
  95              	/*********************
  96              	    CHIP-DSEL 
  97              	    drive F_SC high 
  98              	*********************/
  99 1e06 DE1D0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  99      09434849 
  99      502D4453 
  99      454C
 100 1e14 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
 100      C4F20100 
 101 1e1c 0189     	1:  ldrh T1,[T0,#SPI_SR]
 102 1e1e 11F0800F 	    tst T1,(1<<7) // BSY 
 103 1e22 FBD1     	    bne 1b 
 104 1e24 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 104      C4F20200 
 105 1e2c 4FF00401 	    mov r1,#PIN_F_SC 
 106 1e30 4FF00102 	    mov r2,#1 
 107 1e34 00B5FEF7 	    _CALL gpio_out 
 107      09FD5DF8 
 107      04EB
 108 1e3e 01F093B8 	    _NEXT 
 109              	
 110              	
 111              	/****************************
 112              	    WB-BUFF ( -- a-adr )
 113              	    return address of 
 114              	    flash write back buffer 
 115              	****************************/
 116 1e42 0A1E0000 	    _HEADER WB_BUF,7,"WB-BUFF"
 116      0757422D 
 116      42554646 
 116      00BF
 117 1e50 47F8046D 	    _PUSH 
 118 1e54 47F23016 	    _MOV32     TOS,WB_BUFF
 118      C2F20106 
 119 1e5c 01F084B8 	    _NEXT
 120              	
 121              	/****************************
 122              	    RD-SECTOR ( a -- )
 123              	    read a W25Q128FV sector 
 124              	    in WB-BUFFER 
 125              	****************************/ 
 126 1e60 461E0000 	    _HEADER RD_SECT,9,"RD-SECTOR"
 126      0952442D 
 126      53454354 
 126      4F5200BF 
 127 1e70 504700BF 	    _NEST 
 128 1e74 8F310000 	    _DOLIT  WB_BUFF 
 128      30710120 
ARM GAS  forth.s 			page 81


 129 1e7c 8F310000 	    _DOLIT  FLASH_SECTOR_SIZE 
 129      00100000 
 130 1e84 2D360000 	    _ADR    ROT 
 131 1e88 F1200000 	    _ADR    RD_BLK 
 132 1e8c 6F2F0000 	    _UNNEST 
 133              	
 134              	/*****************************
 135              	    WR-SECTOR ( a -- )
 136              	    write WB-BUFF to W25Q128FV
 137              	    at address 'a' 
 138              	input:
 139              	    a   flash chip address
 140              	        a is sector aligned 
 141              	        The sector must be erased
 142              	******************************/
 143 1e90 641E0000 	    _HEADER WR_SECT,9,"WR-SECTOR"
 143      0957522D 
 143      53454354 
 143      4F5200BF 
 144 1ea0 504700BF 	    _NEST 
 145 1ea4 511E0000 	    _ADR    WB_BUF // a b
 146 1ea8 59330000 	    _ADR    SWAP   // b a 
 147 1eac 7D360000 	    _ADR    DDUP   // b a b a   
 148 1eb0 8F310000 	    _DOLIT  16 
 148      10000000 
 149 1eb8 B5320000 	    _ADR    TOR 
 150 1ebc F7310000 	    _BRAN   4f 
 150      E81E0000 
 151 1ec4 8F310000 	1:  _DOLIT  256
 151      00010000 
 152 1ecc 59330000 	    _ADR    SWAP  // b a b 256 a    
 153 1ed0 45210000 	    _ADR    WR_BLK  
 154 1ed4 8F310000 	    _DOLIT  256  //  b a 256 
 154      00010000 
 155 1edc 49330000 	    _ADR    DUPP  // b a 256 256  
 156 1ee0 91360000 	    _ADR    DPLUS // b+256 a+256
 157 1ee4 7D360000 	    _ADR    DDUP // b a b a 
 158 1ee8 B1310000 	4:  _DONXT  1b
 158      C41E0000 
 159 1ef0 55360000 	    _ADR    DDROP
 160 1ef4 55360000 	    _ADR    DDROP           
 161 1ef8 6F2F0000 	    _UNNEST 
 162              	
 163              	
 164              	/****************************
 165              	    RD-BYTE ( -- )
 166              	    read flash byte 
 167              	***************************/
 168 1efc 941E0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 168      0752442D 
 168      42595445 
 169 1f08 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 169      C4F20100 
 170 1f10 0189     	0:  ldrh T1,[T0,#SPI_SR]
 171 1f12 11F0020F 	    tst T1,#(1<<1) //TXE
 172 1f16 FBD0     	    beq 0b 
 173 1f18 6FF00001 	    mvn T1,#0 
ARM GAS  forth.s 			page 82


 174 1f1c 0173     	    strb T1,[T0,#SPI_DR]
 175 1f1e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 176 1f20 11F0010F 	    tst T1,#(1<<0) // RXNE  
 177 1f24 FBD0     	    beq 1b     
 178              	2:  
 179 1f26 47F8046D 	    _PUSH 
 180 1f2a 067B     	    ldrb TOS,[T0,#SPI_DR]
 181 1f2c 01F01CB8 	    _NEXT 
 182              	
 183              	
 184              	/*********************************
 185              	    WR-BYTE  ( c -- )
 186              	    write flash byte 
 187              	*************************/
 188 1f30 001F0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 188      0757522D 
 188      42595445 
 189 1f3c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 189      C4F20100 
 190 1f44 0189     	0:  ldrh T1,[T0,#SPI_SR]
 191 1f46 11F0020F 	    tst T1,#(1<<1) //TXE
 192 1f4a FBD0     	    beq 0b 
 193 1f4c 0673     	    strb TOS,[T0,#SPI_DR]
 194 1f4e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 195 1f50 11F0010F 	    tst T1,#(1<<0) // RXNE  
 196 1f54 FBD0     	    beq 1b 
 197 1f56 8189     	    ldrh T1,[T0,#SPI_DR]
 198 1f58 57F8046B 	    _POP 
 199 1f5c 01F004B8 	    _NEXT 
 200              	
 201              	/*************************
 202              	    WR-DIS ( -- )
 203              	    write disable 
 204              	    reset WEL bit 
 205              	*************************/
 206 1f60 341F0000 	    _HEADER WR_DIS,6,"WR-DIS"
 206      0657522D 
 206      44495300 
 207 1f6c 504700BF 	    _NEST 
 208 1f70 E91D0000 	    _ADR CHIP_SEL 
 209 1f74 8F310000 	    _DOLIT 4
 209      04000000 
 210 1f7c 3D1F0000 	    _ADR WR_BYTE
 211 1f80 151E0000 	    _ADR CHIP_DSEL
 212 1f84 6F2F0000 	    _UNNEST
 213              	
 214              	/*************************
 215              	    WR-ENBL ( -- )
 216              	    set WEL flag in SR0 
 217              	************************/
 218 1f88 641F0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 218      0757522D 
 218      454E424C 
 219 1f94 504700BF 	    _NEST 
 220 1f98 E91D0000 	    _ADR CHIP_SEL 
 221 1f9c 8F310000 	    _DOLIT 6 
 221      06000000 
ARM GAS  forth.s 			page 83


 222 1fa4 3D1F0000 	    _ADR WR_BYTE 
 223 1fa8 151E0000 	    _ADR CHIP_DSEL 
 224 1fac 6F2F0000 	    _UNNEST 
 225              	
 226              	/********************************
 227              	    RD-SR ( n -- c )
 228              	    read status register  
 229              	********************************/
 230 1fb0 8C1F0000 	    _HEADER RD_SR,5,"RD-SR"
 230      0552442D 
 230      535200BF 
 231 1fbc 504700BF 	    _NEST
 232 1fc0 E91D0000 	    _ADR CHIP_SEL  
 233 1fc4 8F310000 	    _DOLIT sr_cmd 
 233      E41F0000 
 234 1fcc 85340000 	    _ADR PLUS 
 235 1fd0 45320000 	    _ADR CAT
 236 1fd4 3D1F0000 	    _ADR WR_BYTE
 237 1fd8 091F0000 	    _ADR RD_BYTE
 238 1fdc 151E0000 	    _ADR CHIP_DSEL  
 239 1fe0 6F2F0000 	    _UNNEST 
 240 1fe4 053515   	sr_cmd: .byte 5,0x35,0x15      
 241              	
 242              	/*********************************
 243              	    SEND-ADR ( a -- )
 244              	    send 24 bits address 
 245              	*******************************/
 246 1fe7 B41F0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 246      0853454E 
 246      442D4144 
 246      52
 247 1ff4 504700BF 	    _NEST 
 248 1ff8 49330000 	    _ADR DUPP 
 249 1ffc 8F310000 	    _DOLIT 16
 249      10000000 
 250 2004 5D340000 	    _ADR RSHIFT 
 251 2008 3D1F0000 	    _ADR WR_BYTE 
 252 200c 49330000 	    _ADR DUPP
 253 2010 8F310000 	    _DOLIT 8 
 253      08000000 
 254 2018 5D340000 	    _ADR RSHIFT 
 255 201c 3D1F0000 	    _ADR WR_BYTE 
 256 2020 3D1F0000 	    _ADR WR_BYTE 
 257 2024 6F2F0000 	    _UNNEST 
 258              	
 259              	/**********************************
 260              	    WAIT-DONE ( -- )
 261              	    wait write operation completed 
 262              	**********************************/
 263 2028 EB1F0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 263      09574149 
 263      542D444F 
 263      4E4500BF 
 264 2038 504700BF 	    _NEST 
 265 203c 8F310000 	1:  _DOLIT 0 
 265      00000000 
 266 2044 BD1F0000 	    _ADR RD_SR 
ARM GAS  forth.s 			page 84


 267 2048 8F310000 	    _DOLIT 3 
 267      03000000 
 268 2050 05340000 	    _ADR ANDD 
 269 2054 CF310000 	    _QBRAN 2f
 269      64200000 
 270 205c F7310000 	    _BRAN 1b
 270      3C200000 
 271 2064 6F2F0000 	2:  _UNNEST 
 272              	
 273              	
 274              	/****************************
 275              	   ERASE-SECTOR ( a -- )
 276              	   erase 4Ko sector 
 277              	input:
 278              	    a     sector address on 
 279              	          flash memory.
 280              	***************************/
 281 2068 2C200000 	    _HEADER ERASE_SECT,12,"ERASE-SECTOR"
 281      0C455241 
 281      53452D53 
 281      4543544F 
 281      520000BF 
 282 207c 504700BF 	    _NEST 
 283 2080 951F0000 	    _ADR WR_ENBL
 284 2084 E91D0000 	    _ADR CHIP_SEL 
 285 2088 8F310000 	    _DOLIT 0x20 
 285      20000000 
 286 2090 3D1F0000 	    _ADR WR_BYTE 
 287 2094 F51F0000 	    _ADR SEND_ADR
 288 2098 151E0000 	    _ADR CHIP_DSEL 
 289 209c 39200000 	    _ADR WAIT_DONE 
 290 20a0 6F2F0000 	    _UNNEST 
 291              	
 292              	/******************************
 293              	    ERASE-CHIP ( -- )
 294              	    erase all data 
 295              	******************************/
 296 20a4 6C200000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 296      0A455241 
 296      53452D43 
 296      48495000 
 297 20b4 504700BF 	    _NEST 
 298 20b8 951F0000 	    _ADR WR_ENBL 
 299 20bc E91D0000 	    _ADR CHIP_SEL
 300 20c0 8F310000 	    _DOLIT 0x60
 300      60000000 
 301 20c8 8F310000 	    _DOLIT 0xC7 
 301      C7000000 
 302 20d0 3D1F0000 	    _ADR WR_BYTE 
 303 20d4 3D1F0000 	    _ADR WR_BYTE 
 304 20d8 151E0000 	    _ADR CHIP_DSEL 
 305 20dc 39200000 	    _ADR WAIT_DONE
 306 20e0 6F2F0000 	    _UNNEST 
 307              	
 308              	
 309              	/******************************
 310              	    RD-BLK ( buff n a --  )
ARM GAS  forth.s 			page 85


 311              	    read n bytes in buff 
 312              	    starting at address a  
 313              	******************************/
 314 20e4 A8200000 	    _HEADER RD_BLK,6,"RD-BLK"
 314      0652442D 
 314      424C4B00 
 315 20f0 504700BF 	    _NEST
 316 20f4 E91D0000 	    _ADR CHIP_SEL 
 317 20f8 8F310000 	    _DOLIT 3 
 317      03000000 
 318 2100 3D1F0000 	    _ADR WR_BYTE 
 319 2104 F51F0000 	    _ADR SEND_ADR
 320 2108 B5320000 	    _ADR TOR   
 321 210c F7310000 	    _BRAN 2f
 321      24210000 
 322 2114 091F0000 	1:  _ADR RD_BYTE
 323 2118 89330000 	    _ADR OVER 
 324 211c 31320000 	    _ADR CSTOR
 325 2120 E1340000 	    _ADR ONEP 
 326 2124 B1310000 	2:  _DONXT 1b
 326      14210000 
 327 212c 29330000 	    _ADR DROP 
 328 2130 151E0000 	    _ADR CHIP_DSEL 
 329 2134 6F2F0000 	    _UNNEST 
 330              	
 331              	/*****************************
 332              	    WR-BLK ( buff n a -- )
 333              	    write up to 256 bytes 
 334              	    in erased flash
 335              	****************************/
 336 2138 E8200000 	    _HEADER WR_BLK,6,"WR-BLK"
 336      0657522D 
 336      424C4B00 
 337 2144 504700BF 	    _NEST 
 338 2148 951F0000 	    _ADR WR_ENBL
 339 214c E91D0000 	    _ADR CHIP_SEL
 340 2150 8F310000 	    _DOLIT 2 
 340      02000000 
 341 2158 3D1F0000 	    _ADR WR_BYTE 
 342 215c F51F0000 	    _ADR SEND_ADR
 343 2160 B5320000 	    _ADR TOR
 344 2164 F7310000 	    _BRAN 2f 
 344      7C210000 
 345 216c 49330000 	1:  _ADR DUPP 
 346 2170 45320000 	    _ADR CAT 
 347              	//    _ADR DUPP 
 348              	//    _ADR HDOT
 349 2174 3D1F0000 	    _ADR WR_BYTE 
 350 2178 E1340000 	    _ADR ONEP
 351 217c B1310000 	2:  _DONXT 1b 
 351      6C210000 
 352 2184 29330000 	    _ADR DROP
 353 2188 151E0000 	    _ADR CHIP_DSEL
 354 218c 39200000 	    _ADR WAIT_DONE 
 355 2190 6F2F0000 	    _UNNEST
 356              	
 357              	
ARM GAS  forth.s 			page 86


 358              	/********************************
 359              	   FILES structures 
 360              	   -----------------
 361              	   name: 16 bytes null padded 
 362              	   size: 4 bytes
 363              	   sectors count: 4 bytes
 364              	   update counter: 4 bytes
 365              	   signature: IMAG for image files, DATA for others  
 366              	   sector size: 4KB 
 367              	   free sector: first byte 0xFF 
 368              	   erased file: first byte 0xFF
 369              	********************************/
 370              	
 371              	/*******************************
 372              	    SEARCH-FILE 'name' ( -- adr )
 373              	    search file in flash 
 374              	********************************/
 375 2194 3C210000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 375      0B534541 
 375      5243482D 
 375      46494C45 
 376 21a4 504700BF 	    _NEST 
 377              	    
 378 21a8 6F2F0000 	    _UNNEST 
 379              	
 380              	 /******************************
 381              	    ERASE-FILE 'name' ( -- )
 382              	    delete a file 
 383              	*******************************/
 384 21ac 98210000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 384      0A455241 
 384      53452D46 
 384      494C4500 
 385 21bc 504700BF 	    _NEST 
 386              	
 387 21c0 6F2F0000 	    _UNNEST 
 388              	
 389              	/*******************************
 390              	    DIR ( -- )
 391              	    print files list 
 392              	*******************************/
 393 21c4 B0210000 	    _HEADER DIR,3,"DIR"
 393      03444952 
 394 21cc 504700BF 	    _NEST 
 395              	
 396 21d0 6F2F0000 	    _UNNEST 
 397              	
 398              	/*******************************
 399              	    SAVE 'name' ( -- ) 
 400              	    save current data space image 
 401              	    on flash chip. 
 402              	    This file can be reloaded 
 403              	    using LOAD 
 404              	    This file as an IMAG signature  
 405              	********************************/
 406 21d4 C8210000 	    _HEADER SAVE,4,"SAVE"
 406      04534156 
ARM GAS  forth.s 			page 87


 406      450000BF 
 407 21e0 504700BF 	    _NEST 
 408              	
 409 21e4 6F2F0000 	    _UNNEST 
 410              	
 411              	
 412              	/*********************************
 413              	    LOAD 'name' ( i*x -- j*x )
 414              	    load image file previously saved 
 415              	    using SAVE. The file must 
 416              	    have an IMAG signature 
 417              	********************************/
 418 21e8 D8210000 	    _HEADER LOAD,4,"LOAD"
 418      044C4F41 
 418      440000BF 
 419 21f4 504700BF 	    _NEST 
 420              	
 421 21f8 6F2F0000 	    _UNNEST 
 422              	
 423              	    
 424              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 21fc 5F708930 	     .word  0x3089705F // 1e-9
  34 2200 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 2204 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 2208 BD378635 	     .word  0x358637BD // 1e-6 
ARM GAS  forth.s 			page 88


  37 220c ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 2210 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 2214 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 2218 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 221c CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 2220 0000803F 	     .word  0x3F800000 // 1.0 
  44 2224 00002041 	     .word  0x41200000 // 1e1 
  45 2228 0000C842 	     .word  0x42C80000 // 1e2 
  46 222c 00007A44 	     .word  0x447A0000 // 1e3 
  47 2230 00401C46 	     .word  0x461C4000 // 1e4 
  48 2234 0050C347 	     .word  0x47C35000 // 1e5 
  49 2238 00247449 	     .word  0x49742400 // 1e6 
  50 223c 8096184B 	     .word  0x4B189680 // 1e7
  51 2240 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 2244 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 2248 EC210000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 2254 4FEA8606 	    lsl TOS,#2  
  61 2258 FF48     	    ldr t0, =p10 
  62 225a 0644     	    add TOS,TOS,T0
  63 225c 3668     	    ldr TOS,[TOS]  
  64 225e 00F083BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 2262 DFF8F803 	   ldr.w r0,=CPACR 
  73 2266 0168     	   ldr R1,[R0]
  74 2268 41F47001 	   orr r1,r1,#(0xf<<20)
  75 226c 0160     	   str r1,[r0]
  76 226e BFF34F8F 	   dsb 
  77 2272 FB48     	   ldr r0,=FPC_BASE_ADR
  78 2274 81EA0101 	   eor r1,r1 
  79 2278 0160     	   str r1,[r0,FPCCR]
  80 227a BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 227e 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 2280 4C220000 	    _HEADER FDI,3,"FDI"
  90      03464449 
ARM GAS  forth.s 			page 89


  91 2288 4FF05100 	    mov r0,#FPU_IRQ 
  92 228c 00B5FEF7 	    _CALL nvic_disable_irq
  92      59FA5DF8 
  92      04EB
  93 2296 00F067BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 229a 84220000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 22a4 4FF05100 	    mov r0,#FPU_IRQ
 102 22a8 00B5FEF7 	    _CALL nvic_enable_irq
 102      36FA5DF8 
 102      04EB
 103 22b2 00F059BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 22b6 9E220000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 22c0 47F8046D 	   _PUSH 
 112 22c4 F1EE106A 	   vmrs TOS,FPSCR
 113 22c8 BFF34F8F 	   dsb  
 114 22cc 00F04CBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 22d0 BA220000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 22e0 F1EE100A 	   vmrs T0,FPSCR 
 125 22e4 BFF34F8F 	   dsb 
 126 22e8 06EA0006 	   and TOS,T0  
 127 22ec E1EE106A 	   vmsr FPSCR,TOS 
 128 22f0 BFF34F8F 	   dsb 
 129 22f4 00F038BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 22f8 D4220000 	    _HEADER TOS0,3,">S0"
ARM GAS  forth.s 			page 90


 136      033E5330 
 137 2300 00EE106A 	    vmov.f32 S0,TOS 
 138 2304 57F8046B 	    _POP 
 139 2308 00F02EBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 230c FC220000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 2314 00EE906A 	    vmov.f32 S1,TOS 
 147 2318 57F8046B 	    _POP 
 148 231c 00F024BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 2320 10230000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 2328 01EE106A 	    vmov.f32 S2,TOS 
 156 232c 57F8046B 	    _POP 
 157 2330 00F01ABE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
 163 2334 24230000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 233c 47F8046D 	    _PUSH 
 165 2340 10EE106A 	    vmov.f32 TOS,S0 
 166 2344 00F010BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 2348 38230000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 2350 47F8046D 	    _PUSH 
 174 2354 10EE906A 	    vmov.f32 TOS,S1 
 175 2358 00F006BE 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 235c 4C230000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 2364 47F8046D 	    _PUSH 
 183 2368 11EE106A 	    vmov.f32 TOS,S2 
 184 236c 00F0FCBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
ARM GAS  forth.s 			page 91


 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 2370 60230000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 2378 00EE106A 	    vmov.f32 S0,TOS
 194 237c BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 2380 10EE106A 	    vmov.f32 TOS,s0 
 196 2384 00F0F0BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 2388 74230000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 2394 00EE106A 	    vmov.f32 S0,TOS 
 204 2398 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 239c 10EE106A 	    vmov.f32 TOS,S0 
 206 23a0 00F0E2BD 	    _NEXT 
 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 23a4 8C230000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 23ac 00EE106A 	    vmov.f32 S0,TOS
 214 23b0 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 23b4 10EE106A 	    vmov.f32 TOS,s0 
 216 23b8 00F0D6BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 23bc A8230000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 23c4 00EE106A 	   vmov.f32 s0,TOS 
 224 23c8 57F8046B 	   _POP 
 225 23cc 00EE906A 	   vmov.f32 s1,TOS 
 226 23d0 30EE200A 	   vadd.f32 s0,s0,s1 
 227 23d4 10EE106A 	   vmov.f32 TOS,s0
 228 23d8 00F0C6BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 23dc C0230000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 23e4 00EE106A 	   vmov.f32 s0,TOS 
 237 23e8 57F8046B 	   _POP 
 238 23ec 00EE906A 	   vmov.f32 s1,TOS 
ARM GAS  forth.s 			page 92


 239 23f0 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 23f4 10EE106A 	   vmov.f32 TOS,s0
 241 23f8 00F0B6BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 23fc E0230000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 2404 00EE106A 	   vmov.f32 s0,TOS 
 251 2408 57F8046B 	   _POP 
 252 240c 00EE906A 	   vmov.f32 s1,TOS 
 253 2410 20EE800A 	   vmul.f32 s0,s1,s0 
 254 2414 10EE106A 	   vmov.f32 TOS,s0
 255 2418 00F0A6BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
 261              	*******************************/
 262 241c 00240000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 2424 00EE106A 	   vmov.f32 s0,TOS 
 264 2428 57F8046B 	   _POP 
 265 242c 00EE906A 	   vmov.f32 s1,TOS 
 266 2430 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 2434 10EE106A 	   vmov.f32 TOS,s0
 268 2438 00F096BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 243c 20240000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 2448 00EE106A 	    vmov.f32 s0,TOS 
 277 244c B1EE400A 	    vneg.f32 S0,S0 
 278 2450 10EE106A 	    vmov.f32 TOS,S0    
 279 2454 00F088BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 2458 40240000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 2464 80EA0000 	    eor T0,T0 
 287 2468 6FEA0000 	    mvn T0,T0 
 288 246c 4FEA5000 	    lsr T0,#1 
 289 2470 06EA0006 	    and TOS,T0 
ARM GAS  forth.s 			page 93


 290 2474 00F078BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 2478 5C240000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 2484 00EE106A 	     vmov.f32 s0,TOS 
 299 2488 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 248c 10EE106A 	     vmov.f32 TOS,s0 
 301 2490 00F06ABD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 2494 7C240000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 249c 00EE106A 	    vmov.f32 s0,TOS 
 309 24a0 B5EE400A 	    vcmp.f32 s0, #0.0 
 310 24a4 F1EE106A 	    vmrs TOS,FPSCR
 311 24a8 BFF34F8F 	    dsb  
 312 24ac 4FEAE676 	    asr TOS,#31   
 313 24b0 00F05ABD 	    _NEXT 
 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 24b4 98240000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 24bc 504700BF 	    _NEST 
 321 24c0 E5230000 	    _ADR FSUBB
 322 24c4 9D240000 	    _ADR FZLESS
 323 24c8 19370000 	    _ADR INVER     
 324 24cc 6F2F0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 24d0 B8240000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 24d8 504700BF 	    _NEST 
 332 24dc E5230000 	    _ADR FSUBB 
 333 24e0 9D240000 	    _ADR FZLESS
 334 24e4 6F2F0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 24e8 D4240000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
ARM GAS  forth.s 			page 94


 340      4E0000BF 
 341 24f4 504700BF 	    _NEST 
 342 24f8 89330000 	   _ADR OVER 
 343 24fc 89330000 	   _ADR OVER 
 344 2500 BD240000 	   _ADR FGREAT 
 345 2504 CF310000 	   _QBRAN 1f 
 345      10250000 
 346 250c 59330000 	   _ADR SWAP  
 347 2510 29330000 	1: _ADR DROP 
 348 2514 6F2F0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 2518 EC240000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 2524 504700BF 	    _NEST 
 355 2528 89330000 	    _ADR OVER 
 356 252c 89330000 	    _ADR OVER 
 357 2530 D9240000 	    _ADR FLESS 
 358 2534 CF310000 	    _QBRAN 1f
 358      40250000 
 359 253c 59330000 	    _ADR SWAP   
 360 2540 29330000 	1:  _ADR DROP 
 361 2544 6F2F0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 2548 1C250000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 2554 80EA0000 	    eor T0,T0 
 370 2558 C8F20000 	    movt T0,#0X8000
 371 255c 06EA0006 	    and TOS,T0
 372 2560 4FEAE676 	    asr TOS,#31  
 373 2564 00F000BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 2568 4C250000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 2574 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 257c 06EA0006 	    and TOS,T0 
 382 2580 4FEAD656 	    lsr TOS,#23
 383 2584 A6F17F06 	    sub TOS,#127 
 384 2588 00F0EEBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
ARM GAS  forth.s 			page 95


 388              	   return float mantisssa 
 389              	********************************/
 390 258c 6C250000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 2598 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 25a0 06EA0006 	    AND TOS,T0 
 393 25a4 80EA0000 	    EOR T0,T0 
 394 25a8 C0F28000 	    MOVT T0,0x80
 395 25ac 46EA0006 	    ORR TOS,T0 
 396 25b0 00F0DABC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 25b4 90250000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 25bc 47F8046D 	    _PUSH 
 405 25c0 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
 406 25c8 00F0CEBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
 412 25cc B8250000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 25d4 47F8046D 	    _PUSH 
 414 25d8 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 25e0 00F0C2BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 25e4 D0250000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 25f0 47F8046D 	    _PUSH 
 423 25f4 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 25fc 00F0B4BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 2600 E8250000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 260c 47F8046D 	    _PUSH 
ARM GAS  forth.s 			page 96


 433 2610 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 2618 00F0A6BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 261c 04260000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 2628 504700BF 	    _NEST
 443 262c 75250000 	    _ADR FEXP 
 444 2630 AD230000 	    _ADR STOF 
 445 2634 0D260000 	    _ADR LOG2
 446 2638 05240000 	    _ADR FSTAR 
 447 263c 95230000 	    _ADR TRUNC  
 448 2640 49330000 	    _ADR DUPP 
 449 2644 B9330000 	    _ADR ZLESS 
 450 2648 CF310000 	    _QBRAN 1f 
 450      54260000 
 451 2650 F1340000 	    _ADR ONEM
 452 2654 6F2F0000 	1:  _UNNEST 
 453 2658 20220000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 2664 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 2668 0000C842 	            .word  0x42C80000  // 100.0
ARM GAS  forth.s 			page 97


  31 266c 00401C46 	            .word  0x461C4000  // 10000.0 
  32 2670 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 2674 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 2678 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 267c 504700BF 	    _NEST 
  45 2680 8F310000 	    _DOLIT 2 
  45      02000000 
  46 2688 75340000 	    _ADR LSHIFT 
  47 268c 8F310000 	    _DOLIT p10p2n 
  47      64260000 
  48 2694 85340000 	    _ADR PLUS 
  49 2698 25320000 	    _ADR AT 
  50 269c 6F2F0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 26a0 504700BF 	    _NEST 
  59 26a4 8F310000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 26ac 8F310000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 26b4 613F0000 	    _ADR PICK  // idx f e 1 idx 
  62 26b8 75340000 	    _ADR LSHIFT // idx f e bit_mask 
  63 26bc 05340000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 26c0 6F2F0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 26c4 504700BF 	    _NEST 
  78 26c8 B5320000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 26cc 85320000 	    _ADR RAT   // idx f e R: e 
  81 26d0 A1260000 	    _ADR bit_state // idx f state 
  82 26d4 CF310000 	    _QBRAN 1f   // bit reset 
  82      E8260000 
ARM GAS  forth.s 			page 98


  83 26dc 89330000 	    _ADR OVER 
  84 26e0 7D260000 	    _ADR p10p2at // idx f pwr10 R: e
  85 26e4 25240000 	    _ADR FSLH  // idx f R: e 
  86 26e8 59330000 	1:  _ADR SWAP  // f idx R: e 
  87 26ec E1340000 	    _ADR ONEP   // F idx++ R: e 
  88 26f0 59330000 	    _ADR SWAP   // idx f  
  89 26f4 89330000 	    _ADR OVER   // idx f idx 
  90 26f8 8F310000 	    _DOLIT 5 
  90      05000000 
  91 2700 59380000 	    _ADR GREAT  // idx > 5
  92 2704 CF310000 	    _QBRAN div_loop 
  92      CC260000 
  93 270c 51320000 	    _ADR RFROM 
  94 2710 29330000 	    _ADR DROP 
  95 2714 6F2F0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 2718 504700BF 	    _NEST 
 109 271c B5320000 	    _ADR TOR 
 110              	mult_loop:
 111 2720 85320000 	    _ADR RAT   // idx f e R: e 
 112 2724 A1260000 	    _ADR bit_state // idx f state 
 113 2728 CF310000 	    _QBRAN 1f   // bit reset 
 113      3C270000 
 114 2730 89330000 	    _ADR OVER  
 115 2734 7D260000 	    _ADR p10p2at // idx f pwr10 R: e
 116 2738 05240000 	    _ADR FSTAR  // idx f R: e 
 117 273c 59330000 	1:  _ADR SWAP  // f idx R: e 
 118 2740 E1340000 	    _ADR ONEP   // F idx++ R: e 
 119 2744 59330000 	    _ADR SWAP   // idx f  
 120 2748 89330000 	    _ADR OVER   // idx f idx 
 121 274c 8F310000 	    _DOLIT 5 
 121      05000000 
 122 2754 59380000 	    _ADR GREAT  // idx > 5
 123 2758 CF310000 	    _QBRAN mult_loop 
 123      20270000 
 124 2760 51320000 	    _ADR RFROM 
 125 2764 29330000 	    _ADR DROP 
 126 2768 6F2F0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
ARM GAS  forth.s 			page 99


 135 276c 504700BF 	    _NEST 
 136 2770 89330000 	    _ADR OVER  // e f e 
 137 2774 CF310000 	    _QBRAN 3f // exp==0,  done 
 137      B0270000 
 138 277c 8F310000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 2784 41360000 	    _ADR NROT // idx e f
 140 2788 59330000 	    _ADR SWAP // idx f e   
 141 278c 49330000 	    _ADR DUPP  // idx f e e 
 142 2790 B9330000 	    _ADR ZLESS
 143 2794 CF310000 	    _QBRAN pos_exp 
 143      AC270000 
 144              	// negative exponent 
 145 279c 3D370000 	    _ADR ABSS 
 146 27a0 C5260000 	    _ADR mant_div 
 147 27a4 F7310000 	    _BRAN 3f 
 147      B0270000 
 148              	pos_exp: // positive exponent 
 149 27ac 19270000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 27b0 59330000 	3:  _ADR SWAP 
 152 27b4 29330000 	    _ADR DROP 
 153 27b8 6F2F0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
 159              	integer:
 160 27bc 504700BF 	    _NEST 
 161 27c0 8F310000 	    _DOLIT 0 
 161      00000000 
 162 27c8 49330000 	    _ADR DUPP 
 163 27cc 6D330000 	    _ADR DSWAP // 0 0 a cnt 
 164 27d0 09440000 	    _ADR TONBR // d a+ cnt- 
 165 27d4 C9320000 	    _ADR DTOR 
 166 27d8 29330000 	    _ADR DROP // drop hi word 
 167 27dc 65320000 	    _ADR DRFROM // i a+ cnt-  
 168 27e0 2D360000 	    _ADR ROT  // a+ cnt- i
 169 27e4 AD230000 	    _ADR STOF 
 170 27e8 6F2F0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 27ec 504700BF 	    _NEST 
 180 27f0 49330000 	    _ADR DUPP 
 181 27f4 B5320000 	    _ADR TOR 
 182 27f8 8F310000 	    _DOLIT 0
 182      00000000 
 183 2800 49330000 	    _ADR DUPP
 184 2804 6D330000 	    _ADR DSWAP 
 185 2808 09440000 	    _ADR TONBR // -- d a+ cnt-  
ARM GAS  forth.s 			page 100


 186 280c 6D330000 	    _ADR DSWAP  // a+ cnt- d
 187 2810 29330000 	    _ADR DROP   // a+ cnt- i 
 188 2814 AD230000 	    _ADR STOF  // convert integer to float 
 189 2818 51320000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 281c 8F310000 	    _DOLIT 2 
 190      02000000 
 191 2824 613F0000 	    _ADR  PICK  
 192 2828 95340000 	    _ADR SUBB 
 193 282c 8F310000 	    _DOLIT 9 
 193      09000000 
 194 2834 8D380000 	    _ADR MIN 
 195 2838 55220000 	    _ADR PWR10
 196 283c 25240000 	    _ADR FSLH  // a+ cnt- fdec 
 197 2840 6F2F0000 	    _UNNEST 
 198              	
 199              	
 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 2844 504700BF 	    _NEST 
 206 2848 9F440000 	    _ADR NEGQ 
 207 284c B5320000 	    _ADR TOR 
 208 2850 8F310000 	    _DOLIT 0 
 208      00000000 
 209 2858 49330000 	    _ADR DUPP 
 210 285c 6D330000 	    _ADR DSWAP // 0 0 a cnt  
 211 2860 09440000 	    _ADR TONBR // d a cnt   
 212 2864 6D330000 	    _ADR DSWAP
 213 2868 29330000 	    _ADR DROP  // hi word 
 214 286c 51320000 	    _ADR RFROM 
 215 2870 CF310000 	    _QBRAN 1f 
 215      7C280000 
 216 2878 2D370000 	    _ADR NEGAT 
 217              	1:  
 218 287c 6F2F0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 2880 20260000 	    _HEADER FLOATQ,6,"FLOAT?"
 226      06464C4F 
 226      41543F00 
 227 288c 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 2890 A5390000 	    _ADR BASE 
 231 2894 25320000 	    _ADR AT 
 232 2898 B5320000 	    _ADR TOR 
 233              	    // use decimal base  
 234 289c 7D430000 	    _ADR DECIM 
 235 28a0 8F310000 		_DOLIT	0      // failed flag   
 235      00000000 
ARM GAS  forth.s 			page 101


 236 28a8 89330000 		_ADR	OVER   // a 0 a     R: base
 237 28ac F9380000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 28b0 9F440000 	    _ADR   NEGQ
 240 28b4 B5320000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 28b8 49330000 	    _ADR   DUPP 
 242 28bc B5320000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 28c0 BD270000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 28c4 89330000 	    _ADR  OVER  
 245 28c8 51320000 	    _ADR  RFROM  
 246 28cc CD370000 	    _ADR  EQUAL
 247 28d0 59330000 	    _ADR  SWAP
 248 28d4 B5320000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 28d8 E3310000 	    _TBRAN expect_dot  
 249      10290000 
 250              	// must be '.' or 'E'     
 251 28e0 8F310000 	    _DOLIT '.' 
 251      2E000000 
 252 28e8 7D440000 	    _ADR CHARQ
 253 28ec E3310000 	    _TBRAN get_fraction  
 253      24290000 
 254 28f4 8F310000 	    _DOLIT 'E'
 254      45000000 
 255 28fc 7D440000 	    _ADR  CHARQ 
 256 2900 E3310000 	    _TBRAN get_exponent 
 256      78290000 
 257 2908 F7310000 	    _BRAN error2
 257      CC290000 
 258              	expect_dot:
 259 2910 8F310000 	    _DOLIT '.' 
 259      2E000000 
 260 2918 7D440000 	    _ADR CHARQ 
 261 291c CF310000 	    _QBRAN error2
 261      CC290000 
 262              	get_fraction:
 263 2924 89330000 	    _ADR OVER 
 264 2928 45320000 	    _ADR CAT 
 265 292c 8F310000 	    _DOLIT 10
 265      0A000000 
 266 2934 A1430000 	    _ADR DIGTQ 
 267 2938 59330000 	    _ADR SWAP 
 268 293c 29330000 	    _ADR DROP 
 269 2940 CF310000 	    _QBRAN error2       
 269      CC290000 
 270 2948 ED270000 	    _ADR decimals 
 271 294c B5320000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 272              	// if next char is 'E' get exponent 
 273 2950 8F310000 	    _DOLIT 'E' 
 273      45000000 
 274 2958 7D440000 	    _ADR CHARQ
 275 295c E3310000 	    _TBRAN get_exponent 
 275      78290000 
 276 2964 8F310000 	    _DOLIT fzero 
 276      00000000 
 277 296c B5320000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 278 2970 F7310000 	    _BRAN build_float
 278      8C290000 
ARM GAS  forth.s 			page 102


 279              	get_exponent: 
 280 2978 45280000 	    _ADR exponent // -- a 0 a+ cnt- exp
 281 297c B5320000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 282 2980 49330000 	    _ADR DUPP 
 283 2984 E3310000 	    _TBRAN error4   // count must be 0 
 283      EC290000 
 284              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 285 298c 55360000 	    _ADR DDROP 
 286 2990 55360000 	    _ADR DDROP 
 287 2994 51320000 	    _ADR RFROM 
 288 2998 65320000 	    _ADR DRFROM 
 289 299c C5230000 	    _ADR FPLUS 
 290 29a0 6D270000 	    _ADR exp_adjust
 291 29a4 51320000 	    _ADR RFROM 
 292 29a8 CF310000 	    _QBRAN 1f 
 292      BC290000 
 293 29b0 8F310000 	    _DOLIT fminus1
 293      000080BF 
 294 29b8 05240000 	    _ADR FSTAR 
 295 29bc 8F310000 	1:  _DOLIT -2 
 295      FEFFFFFF 
 296 29c4 F7310000 	    _BRAN restore_base  
 296      002A0000 
 297              	error2: // a 0 a cnt R: base sign fint 
 298 29cc 55360000 	    _ADR DDROP  
 299 29d0 F7310000 	    _BRAN e4  
 299      F8290000 
 300              	error3: // a 0 a cnt R: base sign fint fdec  
 301 29d8 55360000 	    _ADR DDROP  // a 0 a R: base sign
 302 29dc 51320000 	    _ADR RFROM 
 303 29e0 29330000 	    _ADR DROP 
 304 29e4 F7310000 	    _BRAN e4  
 304      F8290000 
 305              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 306 29ec 55360000 	    _ADR DDROP 
 307 29f0 65320000 	    _ADR DRFROM 
 308 29f4 55360000 	    _ADR DDROP 
 309 29f8 65320000 	e4: _ADR DRFROM 
 310 29fc 55360000 	    _ADR DDROP 
 311              	restore_base: 
 312 2a00 51320000 	    _ADR RFROM 
 313 2a04 A5390000 	    _ADR BASE 
 314 2a08 11320000 	    _ADR STORE 
 315 2a0c 6F2F0000 	    _UNNEST 
 316              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  forth.s 			page 103


  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 2a10 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2a14 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2a18 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2a1c 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2a20 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2a24 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2a28 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2a2c 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2a30 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2a34 84280000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 2a40 504700BF 	    _NEST
  50 2a44 8F310000 	    _DOLIT 1  
  50      01000000 
  51 2a4c 75380000 	    _ADR MAX  
  52 2a50 8F310000 	    _DOLIT 8
  52      08000000 
  53 2a58 8D380000 	    _ADR MIN 
  54 2a5c 8F310000 	    _DOLIT 2 
  54      02000000 
  55 2a64 75340000 	    _ADR LSHIFT 
  56 2a68 8F310000 	    _DOLIT rounding 
  56      102A0000 
  57 2a70 85340000 	    _ADR PLUS 
  58 2a74 25320000 	    _ADR AT   
  59 2a78 C5230000 	    _ADR FPLUS 
  60 2a7c 6F2F0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
ARM GAS  forth.s 			page 104


  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 2a80 382A0000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 2a88 57F8040B 	    ldr T0,[DSP],#4
  69 2a8c 3070     	    strb T0,[TOS]  
  70 2a8e 06F10106 	    add TOS,#1
  71 2a92 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 2a94 504700BF 	    _NEST 
  81 2a98 B5320000 	    _ADR TOR  // >R ( i r: b )
  82 2a9c D53C0000 	    _ADR STOD // ( dbl r: b )
  83 2aa0 49330000 	    _ADR DUPP // ( dbl i r: b )
  84 2aa4 B5320000 	    _ADR TOR  // ( dbl r: b sign )
  85 2aa8 B1360000 	    _ADR DABS 
  86 2aac E5410000 	    _ADR BDIGS 
  87 2ab0 89420000 	    _ADR DIGS 
  88 2ab4 51320000 	    _ADR RFROM 
  89 2ab8 BD420000 	    _ADR SIGN 
  90 2abc E5420000 	    _ADR EDIGS // ( -- p u )
  91 2ac0 49330000 	    _ADR DUPP  
  92 2ac4 41360000 	    _ADR NROT // -rot ( -- u p u )
  93 2ac8 85320000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2acc 59330000 	    _ADR SWAP // ( -- u p b u )
  95 2ad0 41400000 	    _ADR CMOVE // ( -- u ) 
  96 2ad4 49330000 	    _ADR DUPP  // ( -- u u )
  97 2ad8 51320000 	    _ADR RFROM // ( -- u u b )
  98 2adc 85340000 	    _ADR PLUS  // ( -- u b+ )
  99 2ae0 59330000 	    _ADR SWAP  // ( -- b+ u )
 100 2ae4 6F2F0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2ae8 842A0000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2af4 504700BF 	    _NEST 
 116 2af8 55220000 	    _ADR PWR10 
 117 2afc B5320000 	    _ADR TOR  // f2 r: f1 
ARM GAS  forth.s 			page 105


 118 2b00 8F310000 	    _DOLIT 0   // m 
 118      00000000 
 119 2b08 59330000 	    _ADR SWAP  // m f2 
 120 2b0c 49330000 	1:  _ADR DUPP 
 121 2b10 85320000 	    _ADR RAT 
 122 2b14 D9240000 	    _ADR FLESS
 123 2b18 CF310000 	    _QBRAN 2f
 123      402B0000 
 124 2b20 8F310000 	    _DOLIT ten 
 124      00002041 
 125 2b28 05240000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2b2c 59330000 	    _ADR SWAP
 128 2b30 F1340000 	    _ADR ONEM 
 129 2b34 59330000 	    _ADR SWAP 
 130 2b38 F7310000 	    _BRAN 1b
 130      0C2B0000 
 131 2b40 51320000 	2:  _ADR RFROM 
 132 2b44 29330000 	    _ADR DROP 
 133 2b48 59330000 	    _ADR SWAP 
 134 2b4c 6F2F0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 2b50 EC2A0000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 2b60 504700BF 	    _NEST 
 150 2b64 55220000 	    _ADR PWR10
 151 2b68 B5320000 	    _ADR TOR
 152 2b6c 8F310000 	    _DOLIT 0 
 152      00000000 
 153 2b74 59330000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 2b78 85320000 	1:  _ADR RAT   
 155 2b7c 89330000 	    _ADR OVER 
 156 2b80 BD240000 	    _ADR FGREAT 
 157 2b84 E3310000 	    _TBRAN 2f 
 157      AC2B0000 
 158 2b8c 8F310000 	    _DOLIT ten 
 158      00002041 
 159 2b94 25240000 	    _ADR FSLH 
 160              	    // increment m 
 161 2b98 59330000 	    _ADR SWAP 
 162 2b9c E1340000 	    _ADR ONEP 
 163 2ba0 59330000 	    _ADR SWAP 
 164 2ba4 F7310000 	    _BRAN 1b   
ARM GAS  forth.s 			page 106


 164      782B0000 
 165 2bac 51320000 	2:  _ADR RFROM 
 166 2bb0 29330000 	    _ADR DROP
 167 2bb4 59330000 	    _ADR SWAP 
 168 2bb8 6F2F0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2bbc 504700BF 	    _NEST
 183 2bc0 59330000 	    _ADR SWAP
 184 2bc4 95350000 	    _ADR QDUP    
 185 2bc8 CF310000 	    _QBRAN 2f 
 185      EC2B0000 
 186 2bd0 59330000 	    _ADR SWAP 
 187 2bd4 8F310000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2bdc 59330000 	    _ADR SWAP  
 189 2be0 892A0000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2be4 952A0000 	    _ADR ITOA // ( i b -- b u )
 191 2be8 29330000 	    _ADR DROP // ( -- b+ )     
 192 2bec 6F2F0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 2bf0 504700BF 	    _NEST
 208 2bf4 8F310000 	    _DOLIT 2 
 208      02000000 
 209 2bfc 613F0000 	    _ADR PICK 
 210 2c00 B9330000 	    _ADR ZLESS 
 211 2c04 CF310000 	    _QBRAN 1f 
 211      1C2C0000 
 212 2c0c B5320000 	    _ADR TOR 
 213 2c10 29330000 	    _ADR DROP 
 214 2c14 F7310000 	    _BRAN 2f 
 214      882C0000 
 215 2c1c 8F310000 	1:   _DOLIT '.' 
ARM GAS  forth.s 			page 107


 215      2E000000 
 216 2c24 59330000 	    _ADR SWAP 
 217 2c28 892A0000 	    _ADR CSTOP 
 218 2c2c B5320000 	    _ADR TOR // >r ( d f r: b ) 
 219 2c30 59330000 	1:  _ADR SWAP  
 220 2c34 95350000 	    _ADR QDUP 
 221 2c38 CF310000 	    _QBRAN 2f
 221      882C0000 
 222 2c40 F1340000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 2c44 59330000 	    _ADR SWAP // swap ( -- d f r: b )
 224 2c48 8F310000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 2c50 05240000 	    _ADR FSTAR // f*
 226 2c54 49330000 	    _ADR DUPP  
 227 2c58 95230000 	    _ADR TRUNC // d f i
 228 2c5c 49330000 	    _ADR DUPP  // d f i i  
 229 2c60 8F310000 	    _DOLIT '0' 
 229      30000000 
 230 2c68 85340000 	    _ADR PLUS 
 231 2c6c 51320000 	    _ADR RFROM // R> ( d f c b )
 232 2c70 892A0000 	    _ADR CSTOP // ( d f i b+ )
 233 2c74 B5320000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 2c78 AD230000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 2c7c E5230000 	    _ADR FSUBB 
 236 2c80 F7310000 	    _BRAN 1b 
 236      302C0000 
 237 2c88 29330000 	2:  _ADR DROP 
 238 2c8c 51320000 	    _ADR RFROM 
 239 2c90 6F2F0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2c94 504700BF 	    _NEST 
 257 2c98 B5320000 	    _ADR TOR // ( -- d f r: b )
 258 2c9c 49330000 	    _ADR DUPP 
 259 2ca0 8F310000 	    _DOLIT fone 
 259      0000803F 
 260 2ca8 D9240000 	    _ADR FLESS 
 261 2cac CF310000 	    _QBRAN 1f
 261      0C2D0000 
 262 2cb4 8F310000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2cbc F52A0000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2cc0 41360000 	    _ADR NROT
ARM GAS  forth.s 			page 108


 265 2cc4 89330000 	    _ADR OVER 
 266 2cc8 412A0000 	    _ADR ROUND
 267 2ccc 49330000 	    _ADR DUPP 
 268 2cd0 8F310000 	    _DOLIT fone 
 268      0000803F 
 269 2cd8 D9240000 	    _ADR FLESS 
 270 2cdc CF310000 	    _QBRAN 2f 
 270      182D0000 
 271              	    // first digit '0' 
 272 2ce4 8F310000 	    _DOLIT '0' 
 272      30000000 
 273 2cec 51320000 	    _ADR RFROM 
 274 2cf0 892A0000 	    _ADR CSTOP 
 275 2cf4 B5320000 	    _ADR TOR 
 276              	    // decrement d 
 277 2cf8 59330000 	    _ADR SWAP 
 278 2cfc F1340000 	    _ADR ONEM 
 279 2d00 59330000 	    _ADR SWAP 
 280 2d04 51320000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2d08 6F2F0000 	    _UNNEST 
 282 2d0c 89330000 	1:  _ADR OVER 
 283 2d10 612B0000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2d14 41360000 	    _ADR NROT   // m d f r: b 
 285 2d18 49330000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2d1c 95230000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2d20 49330000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2d24 B5320000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2d28 AD230000 	    _ADR STOF  // ( -- m d f f )
 290 2d2c E5230000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 2d30 51320000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2d34 51320000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2d38 952A0000 	    _ADR ITOA // -- m d f b u )
 294 2d3c B5320000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2d40 2D360000 	    _ADR ROT
 296 2d44 51320000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2d48 95340000 	    _ADR SUBB // ( -- m f b d- )
 298 2d4c 41360000 	    _ADR NROT // ( -- m d f b )
 299 2d50 6F2F0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2d54 542B0000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2d5c 504700BF 	    _NEST 
 315 2d60 89330000 	    _ADR OVER  
 316 2d64 75250000 	    _ADR FEXP 
 317 2d68 8F310000 	    _DOLIT 128 
ARM GAS  forth.s 			page 109


 317      80000000 
 318 2d70 CD370000 	    _ADR EQUAL 
 319 2d74 CF310000 	    _QBRAN 1f
 319      842D0000 
 320 2d7c F7310000 	    _BRAN nan 
 320      402E0000 
 321 2d84 49330000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2d88 B5320000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2d8c 41350000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2d90 59330000 	    _ADR SWAP 
 326 2d94 892A0000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2d98 89330000 	    _ADR OVER 
 328 2d9c CF310000 	    _QBRAN zdz // 0.0 
 328      F02D0000 
 329              	    // check float sign 
 330 2da4 89330000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2da8 55250000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2dac CF310000 	    _QBRAN 1f  // 0branch 1f 
 332      D02D0000 
 333              	    // negative number add '-' to buffer 
 334 2db4 59330000 	    _ADR SWAP 
 335 2db8 65240000 	    _ADR FABS 
 336 2dbc 59330000 	    _ADR SWAP 
 337 2dc0 8F310000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2dc8 59330000 	    _ADR SWAP 
 339 2dcc 892A0000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2dd0 952C0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 2dd4 F12B0000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2dd8 BD2B0000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2ddc 85320000 	    _ADR RAT 
 344 2de0 95340000 	    _ADR SUBB 
 345 2de4 51320000 	    _ADR RFROM 
 346 2de8 59330000 	    _ADR SWAP 
 347 2dec 6F2F0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2df0 B5320000 	     _ADR TOR 
 350 2df4 55360000 	     _ADR DDROP
 351 2df8 51320000 	     _ADR RFROM
 352 2dfc 8F310000 	     _DOLIT '0'
 352      30000000 
 353 2e04 59330000 	     _ADR SWAP 
 354 2e08 892A0000 	     _ADR CSTOP 
 355 2e0c 8F310000 	     _DOLIT '.'
 355      2E000000 
 356 2e14 59330000 	     _ADR SWAP 
 357 2e18 892A0000 	     _ADR CSTOP 
 358 2e1c 8F310000 	     _DOLIT '0'
 358      30000000 
 359 2e24 59330000 	     _ADR SWAP 
 360 2e28 892A0000 	     _ADR CSTOP 
 361 2e2c 29330000 	     _ADR DROP  
 362 2e30 51320000 	     _ADR RFROM 
 363 2e34 8F310000 	     _DOLIT 4 
 363      04000000 
 364 2e3c 6F2F0000 	     _UNNEST  
ARM GAS  forth.s 			page 110


 365              	nan: // not a number or infinity
 366 2e40 B5320000 	    _ADR TOR   // ( d f r: b )
 367 2e44 59330000 	    _ADR SWAP  // f d  
 368 2e48 29330000 	    _ADR DROP  // f 
 369 2e4c 41350000 	    _ADR BLANK  // f c 
 370 2e50 85320000 	    _ADR RAT    // f c b 
 371 2e54 892A0000 	    _ADR CSTOP  // f b+ 
 372 2e58 59330000 	    _ADR SWAP   // b+ f 
 373 2e5c 99250000 	    _ADR FMANT  // b+ mant
 374 2e60 8F310000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2e68 05340000 	    _ADR ANDD   
 376 2e6c CF310000 	    _QBRAN infinity 
 376      AC2E0000 
 377 2e74 8F310000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2e7c 59330000 	    _ADR SWAP   // c b+
 379 2e80 892A0000 	    _ADR CSTOP  // b+
 380 2e84 8F310000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2e8c 59330000 	    _ADR SWAP   // c b+ 
 382 2e90 892A0000 	    _ADR CSTOP  // b+
 383 2e94 8F310000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2e9c 59330000 	    _ADR SWAP   // c b+ 
 385 2ea0 892A0000 	    _ADR CSTOP  // b+
 386 2ea4 F7310000 	    _BRAN 1f 
 386      DC2E0000 
 387              	infinity:
 388 2eac 8F310000 	    _DOLIT 'I'
 388      49000000 
 389 2eb4 59330000 	    _ADR SWAP 
 390 2eb8 892A0000 	    _ADR CSTOP 
 391 2ebc 8F310000 	    _DOLIT 'N'
 391      4E000000 
 392 2ec4 59330000 	    _ADR SWAP 
 393 2ec8 892A0000 	    _ADR CSTOP 
 394 2ecc 8F310000 	    _DOLIT 'F'
 394      46000000 
 395 2ed4 59330000 	    _ADR SWAP 
 396 2ed8 892A0000 	    _ADR CSTOP 
 397              	1:
 398 2edc 29330000 	    _ADR DROP 
 399 2ee0 51320000 	    _ADR RFROM 
 400 2ee4 8F310000 	    _DOLIT 4 
 400      04000000 
 401 2eec 6F2F0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
ARM GAS  forth.s 			page 111


 412 2ef0 582D0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2ef8 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2efc 8F310000 	    _DOLIT 1 
 415      01000000 
 416 2f04 75380000 	    _ADR MAX 
 417 2f08 8F310000 	    _DOLIT 7 
 417      07000000 
 418 2f10 8D380000 	    _ADR MIN
 419 2f14 59330000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2f18 953F0000 	    _ADR HERE
 422 2f1c B5320000 	    _ADR TOR  
 423 2f20 8F310000 	    _DOLIT 16 
 423      10000000 
 424 2f28 15540000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2f2c 85320000 	    _ADR RAT 
 427 2f30 8F310000 	    _DOLIT 16 
 427      10000000 
 428 2f38 8F310000 	    _DOLIT 0 
 428      00000000 
 429 2f40 CD400000 	    _ADR FILL 
 430 2f44 51320000 	    _ADR RFROM // ( d f b )
 431 2f48 5D2D0000 	    _ADR FTOA 
 432 2f4c 29460000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 2f50 8F310000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 2f58 15540000 	    _ADR ALLOT
 436 2f5c 6F2F0000 	    _UNNEST
 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
ARM GAS  forth.s 			page 112


  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
ARM GAS  forth.s 			page 113


  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2f60 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2f64 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2f68 5CF8045B 		LDR WP,[IP],#4 
  89 2f6c 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2f6e 58F804CB 		LDMFD RSP!,{IP}
  92 2f72 5CF8045B 		LDR WP,[IP],#4 
  93 2f76 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2f78 04F14C01 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2f7c 0968     		ldr T1,[T1]     // address in here   
 107 2f7e 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 2f82 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2f86 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2f8a 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 2f8e 04F14C02 		add T2,UP,#USER_CTOP 
 112 2f92 1160     		str T1,[T2]  // save update HERE value 
 113 2f94 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2f96 47F8046D 		_PUSH 
 119 2f9a 04F11406 		ADD TOS,UP,#STDIN 
 120 2f9e E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2fa0 47F8046D 		_PUSH 
 126 2fa4 04F11806 		ADD TOS,UP,#STDOUT
 127 2fa8 DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2faa F42E0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
ARM GAS  forth.s 			page 114


 134 2fb4 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2fbc 47F8046D 	    _PUSH 
 136 2fc0 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2fc2 81EA0101 	    eor T1,T1 
 138 2fc6 8162     	    str T1,[T0,#SCB_CFSR]
 139 2fc8 CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2fca AE2F0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2fd4 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 2fdc 47F8046D 		_PUSH 
 148 2fe0 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2fe2 81EA0101 	    eor T1,T1 
 150 2fe6 8163     	    str T1,[T0,#SCB_BFAR]
 151 2fe8 BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 2fea CE2F0000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
 157      3F00
 158 2ff4 504700BF 		_NEST 
 159 2ff8 972F0000 		_ADR TSTDIN // ' STDIN 
 160 2ffc 21400000 		_ADR ATEXE
 161 3000 6F2F0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 3004 EE2F0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 300c 504700BF 		_NEST
 169              	KEY1:
 170 3010 C51C0000 		_ADR CAPS_LED 
 171 3014 F52F0000 		_ADR	QKEY 
 172 3018 CF310000 		_QBRAN	KEY1
 172      10300000 
 173              	/*  add this code to filter out control characters 	
 174              		_ADR    DUPP 
 175              		_DOLIT  13 
 176              		_ADR    EQUAL 
 177              		_TBRAN  KEY2 
 178              		_ADR    DUPP
 179              		_DOLIT  32 
 180              		_ADR    LESS 
 181              		_QBRAN  KEY2 
 182              		_ADR    DROP 
ARM GAS  forth.s 			page 115


 183              		_BRAN   KEY1 
 184              	*/ 
 185              	KEY2: 	
 186 3020 6F2F0000 		_UNNEST
 187              	
 188              	/**********************************************
 189              		EMIT ( c -- )
 190              		transmit a character to console 
 191              	**********************************************/
 192 3024 08300000 		_HEADER EMIT,4,"EMIT"
 192      04454D49 
 192      540000BF 
 193 3030 504700BF 		_NEST 
 194 3034 A12F0000 		_ADR TSTDOUT 
 195 3038 21400000 		_ADR ATEXE 
 196 303c 6F2F0000 		_UNNEST 
 197              	
 198              	
 199              	/************************************************
 200              	 GET-IP ( n - c )
 201              	 return interrupt priority of IRQn 
 202              	************************************************/
 203              	/*
 204              		_HEADER GETIP,6,"GET-IP" 
 205              		_NEST 
 206              		_ADR DUPP 
 207              		_ADR ZLESS
 208              		_QBRAN 1f 
 209              		_DOLIT 15
 210              		_ADR ANDD
 211              		_DOLIT 4
 212              		_ADR SUBB  
 213              		_DOLIT 0xE000ED18 
 214              		_BRAN 2f 
 215              	1:	_DOLIT 0xE000E400 
 216              	2:	_ADR PLUS 
 217              		_ADR CAT
 218              		_DOLIT 4 
 219              		_ADR RSHIFT 
 220              		_UNNEST 
 221              	*/
 222              	
 223              	/***********************************************
 224              	 RANDOM ( n+ -- {0..n+ - 1} )
 225              	 return pseudo random number 
 226              	 REF: https://en.wikipedia.org/wiki/Xorshift
 227              	************************************************/
 228 3040 28300000 		_HEADER RAND,6,"RANDOM"
 228      0652414E 
 228      444F4D00 
 229 304c 504700BF 		_NEST
 230 3050 3D370000 		_ADR ABSS   
 231 3054 49390000 		_ADR SEED 
 232 3058 25320000 		_ADR AT 
 233 305c 49330000 		_ADR DUPP 
 234 3060 8F310000 		_DOLIT 13
 234      0D000000 
ARM GAS  forth.s 			page 116


 235 3068 75340000 		_ADR LSHIFT 
 236 306c 2D340000 		_ADR XORR  
 237 3070 49330000 		_ADR DUPP 
 238 3074 8F310000 		_DOLIT 17 
 238      11000000 
 239 307c 5D340000 		_ADR RSHIFT 
 240 3080 2D340000 		_ADR XORR 
 241 3084 49330000 		_ADR DUPP
 242 3088 8F310000 		_DOLIT 5 
 242      05000000 
 243 3090 75340000 		_ADR LSHIFT 
 244 3094 2D340000 		_ADR XORR  
 245 3098 49330000 		_ADR DUPP 
 246 309c 49390000 		_ADR SEED 
 247 30a0 11320000 		_ADR STORE 
 248 30a4 8F310000 		_DOLIT 0x7FFFFFFF
 248      FFFFFF7F 
 249 30ac 05340000 		_ADR ANDD 
 250 30b0 59330000 		_ADR SWAP 
 251 30b4 1D3E0000 		_ADR MODD 
 252 30b8 6F2F0000 		_UNNEST 
 253              	
 254              	
 255              	/****************************************
 256              	 MS ( u -- ) 
 257              	 suspend execution for u milliseconds
 258              	****************************************/
 259 30bc 44300000 		_HEADER PAUSE,2,"MS"
 259      024D5300 
 260 30c4 504700BF 		_NEST 
 261 30c8 75390000 		_ADR TIMER 
 262 30cc 11320000 		_ADR STORE 
 263              	PAUSE_LOOP:
 264 30d0 75390000 		_ADR TIMER 
 265 30d4 25320000 		_ADR AT 
 266 30d8 CF310000 		_QBRAN PAUSE_EXIT 
 266      E8300000 
 267 30e0 F7310000 		_BRAN PAUSE_LOOP 
 267      D0300000 
 268              	PAUSE_EXIT: 		
 269 30e8 6F2F0000 		_UNNEST 
 270              	
 271              	/******************************************
 272              	  ULED ( T|F -- )
 273              	  control user LED, -1 ON, 0 OFF 
 274              	*******************************************/
 275 30ec C0300000 		_HEADER ULED,4,"ULED"
 275      04554C45 
 275      440000BF 
 276 30f8 4FF40050 		mov T0,#(1<<LED_PIN)
 277 30fc 4FF40061 		_MOV32 T1,LED_GPIO 
 277      C4F20201 
 278 3104 3600     		movs TOS,TOS 
 279 3106 57F8046B 		_POP
 280 310a 03D0     		beq ULED_OFF
 281 310c 4FEA0040 		lsl T0,#16 
 282 3110 8861     		str T0,[T1,#GPIO_BSRR]
ARM GAS  forth.s 			page 117


 283 3112 29E7     		_NEXT 
 284              	ULED_OFF:
 285 3114 8861     		str T0,[T1,#GPIO_BSRR]
 286 3116 27E7     		_NEXT    
 287              	
 288              	/**************************
 289              	   JOYSTK  ( -- u )
 290              	   read joystick port 
 291              	**************************/
 292 3118 F0300000 		_HEADER JOYSTK,6,"JOYSTK"
 292      064A4F59 
 292      53544B00 
 293 3124 504700BF 		_NEST 
 294 3128 8F310000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 294      10000240 
 295 3130 25320000 		_ADR AT 
 296 3134 8F310000 		_DOLIT 0x100f 
 296      0F100000 
 297 313c 05340000 		_ADR ANDD 
 298 3140 6F2F0000 		_UNNEST 
 299              	
 300              	/****************************
 301              		BEEP ( msec freq -- )
 302              	input:
 303              		freq  frequence hertz 
 304              		msec  durration in msec 
 305              	*****************************/
 306 3144 1C310000 		_HEADER BEEP,4,"BEEP"
 306      04424545 
 306      500000BF 
 307 3150 48F68050 		_MOV32 r0,6000000 // Fclk 
 307      C0F25B00 
 308 3158 B0FBF6F0 		udiv r0,r0,TOS
 309 315c 57F8046B 		_POP  
 310 3160 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 310      C4F20001 
 311 3168 C862     		str r0,[r1,#TIM_ARR]
 312 316a 4FEA5000 		lsr r0,#1
 313 316e 4863     		str r0,[r1,#TIM_CCR1]
 314 3170 4FF00100 		mov r0,#1 
 315 3174 0862     		str r0,[r1,#TIM_CCER]
 316 3176 0860     		str r0,[r1,#TIM_CR1]
 317 3178 C868     		ldr r0,[r1,#TIM_DIER]
 318 317a C4F8B060 		str TOS,[UP,#BEEP_DTMR]
 319 317e 57F8046B 		_POP
 320 3182 F1E6     		_NEXT 
 321              	
 322              	
 323              	/***************
 324              	//  The kernel
 325              	***************/
 326              	
 327              	/********************
 328              	    NOP	( -- )
 329              	 	do nothing.
 330              	*********************/
 331 3184 48310000 		_HEADER NOP,3,"NOP"
ARM GAS  forth.s 			page 118


 331      034E4F50 
 332 318c ECE6     		_NEXT
 333              		  
 334              	 
 335              	/********************
 336              	    doLIT	( -- w )
 337              	 	Push an inline literal.
 338              	hidden word used by compiler 
 339              	*********************/
 340              	DOLIT:
 341 318e 47F8046D 		_PUSH				//  store TOS on data stack
 342 3192 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 343 3196 E7E6     		_NEXT 
 344              	
 345              	/*******************************
 346              	    EXECUTE	( ca -- )
 347              	 	Execute the word at ca.
 348              	*******************************/
 349 3198 88310000 		_HEADER EXECU,7,"EXECUTE"
 349      07455845 
 349      43555445 
 350 31a4 46F00105 		ORR	WP,TOS,#1 
 351 31a8 57F8046B 		_POP
 352 31ac 2847     		BX WP 
 353 31ae DBE6     		_NEXT 
 354              	
 355              	/**********************************************************
 356              	    donext	( -- ) counter on R:
 357              	 	Run time code for the single index loop.
 358              	 	: next ( -- ) \ hilevel model
 359              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 360              	hidden word used by compiler 	  
 361              	*********************************************************/
 362              	DONXT:
 363 31b0 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 364 31b4 22B9     		CBNZ T2,NEXT1 
 365              		/* loop done */
 366 31b6 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 367 31ba 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 368 31be D3E6     		_NEXT
 369              	NEXT1:
 370              		/* decrement loop counter */
 371 31c0 A2F10102 		SUB	T2,T2,#1
 372 31c4 C8F80020 		STR	T2,[RSP]
 373 31c8 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 374 31cc CCE6     		_NEXT 
 375              	
 376              	/**************************************
 377              	    ?branch	( f -- )
 378              	 	Branch if flag is zero.
 379              	hiddend word used by compiler
 380              	**************************************/
 381              	QBRAN:
 382 31ce 3600     		MOVS	TOS,TOS
 383 31d0 57F8046B 		_POP
 384 31d4 02D1     		BNE	QBRAN1
 385 31d6 DCF800C0 		LDR	IP,[IP]
ARM GAS  forth.s 			page 119


 386 31da C5E6     		_NEXT
 387              	QBRAN1:
 388 31dc 0CF1040C 	 	ADD	IP,IP,#4
 389 31e0 C2E6     		_NEXT
 390              	
 391              	/***********************************
 392              		tbranch ( f -- )
 393              	    branch if flag is true 
 394              	***********************************/
 395              	TBRAN:
 396 31e2 3600     		MOVS TOS,TOS 
 397 31e4 57F8046B 		_POP 
 398 31e8 02D0     		BEQ 1f 
 399 31ea DCF800C0 		LDR IP,[IP]
 400 31ee BBE6     		_NEXT 
 401 31f0 0CF1040C 	1:  ADD IP,IP,#4
 402 31f4 B8E6     		_NEXT 
 403              	
 404              	
 405              	/***********************************
 406              	    branch	( -- )
 407              	 	Branch to an inline address.
 408              	hidden word used by compiler 
 409              	***********************************/
 410              	BRAN:
 411 31f6 DCF800C0 		LDR	IP,[IP]
 412 31fa B5E6     		_NEXT
 413              	
 414              	/******************************************
 415              	    EXIT	(  -- )
 416              	 	Exit the currently executing command.
 417              	******************************************/
 418 31fc 9C310000 		_HEADER EXIT,4,"EXIT"
 418      04455849 
 418      540000BF 
 419 3208 B1E6     		b UNNEST 
 420              	
 421              	
 422              	/***********************************
 423              	    !	   ( w a -- )
 424              	 	Pop the data stack to memory.
 425              	************************************/
 426 320a 00320000 		_HEADER STORE,1,"!"
 426      0121
 427 3210 57F8045B 		LDR	WP,[DSP],#4
 428 3214 3560     		STR	WP,[TOS]
 429 3216 57F8046B 		_POP
 430 321a A5E6     		_NEXT 
 431              	
 432              	/********************************************
 433              	    @	   ( a -- w )
 434              	 	Push memory location to the data stack.
 435              	*********************************************/
 436 321c 0E320000 		_HEADER AT,1,"@"
 436      014000BF 
 437 3224 3668     		LDR	TOS,[TOS]
 438 3226 9FE6     		_NEXT 
ARM GAS  forth.s 			page 120


 439              	
 440              	/*******************************************
 441              	    C!	  ( c b -- )
 442              	 	Pop the data stack to byte memory.
 443              	*******************************************/
 444 3228 20320000 		_HEADER CSTOR,2,"C!"
 444      02432100 
 445 3230 57F8045B 		LDR	WP,[DSP],#4
 446 3234 3570     		STRB WP,[TOS]
 447 3236 57F8046B 		_POP
 448 323a 95E6     		_NEXT
 449              	
 450              	/*********************************************
 451              	    C@	  ( b -- c )
 452              	 	Push byte memory location to the data stack.
 453              	**********************************************/
 454 323c 2C320000 		_HEADER CAT,2,"C@"
 454      02434000 
 455 3244 3678     		LDRB	TOS,[TOS]
 456 3246 8FE6     		_NEXT 
 457              	
 458              	
 459              	/*********************************************
 460              	    R>	  ( -- w  R: w -- ) 
 461              	 	push from rstack.
 462              	**********************************************/
 463 3248 40320000 		_HEADER RFROM,2,"R>"
 463      02523E00 
 464 3250 47F8046D 		_PUSH
 465 3254 58F8046B 		LDR	TOS,[RSP],#4
 466 3258 86E6     		_NEXT 
 467              	
 468              	/***********************************************
 469              		2R> (  -- x1 x2 ) R: x1 x2 --  
 470              	    push a double from rstack 
 471              	***********************************************/
 472 325a 4C320000 		_HEADER DRFROM,3,"2R>"
 472      0332523E 
 472      00BF
 473 3264 47F8046D 		_PUSH 
 474 3268 D8F80460 		LDR TOS,[RSP,#CELLL] 
 475 326c 47F8046D 		_PUSH 
 476 3270 D8F80060 		LDR TOS,[RSP]
 477 3274 08F10808 		ADD RSP,#2*CELLL 
 478 3278 76E6     		_NEXT 
 479              	
 480              	/************************************************
 481              	    R@	  ( -- w )
 482              	 	Copy top of return stack to the data stack.
 483              	************************************************/
 484 327a 5E320000 		_HEADER RAT,2,"R@"
 484      02524000 
 484      00BF
 485 3284 47F8046D 		_PUSH
 486 3288 D8F80060 		LDR	TOS,[RSP]
 487 328c 6CE6     		_NEXT 
 488              	
ARM GAS  forth.s 			page 121


 489              	/***********************************************
 490              		2R@ ( -- x2 x1 ) ( R: x1 x2 -- ) 
 491              		Copy 2 element of return stack to data stack
 492              	***********************************************/
 493 328e 7E320000 		_HEADER DRAT,3,"2R@"
 493      03325240 
 493      00BF
 494 3298 47F8046D 		_PUSH 
 495 329c D8F80460 		LDR TOS,[RSP,#CELLL] 
 496 32a0 47F8046D 		_PUSH 
 497 32a4 D8F80060 		LDR TOS,[RSP] 
 498 32a8 5EE6     		_NEXT 
 499              	
 500              	
 501              	/***********************************************
 502              	    >R	  ( w -- ) R: -- w 
 503              	 	pop to rstack.
 504              	************************************************/
 505 32aa 92320000 		_HEADER TOR,2,">R"
 505      023E5200 
 505      00BF
 506 32b4 48F8046D 		STR	TOS,[RSP,#-CELLL]!
 507 32b8 57F8046B 		_POP
 508 32bc 54E6     		_NEXT
 509              	
 510              	/*********************************************
 511              		2>R ( x1 x2 -- ) R: -- x1 x2  
 512              		pop a double to rstack 
 513              	*********************************************/
 514 32be AE320000 		_HEADER DTOR,3,"2>R"
 514      03323E52 
 514      00BF
 515 32c8 57F8040B 		LDR T0, [DSP],#CELLL
 516 32cc 48F8040D 		STR T0,[RSP,#-CELLL]!
 517 32d0 48F8046D 	 	STR TOS,[RSP,#-CELLL]!
 518 32d4 57F8046B 		_POP  
 519 32d8 46E6     		_NEXT 	
 520              	
 521              	
 522              	/*******************************
 523              	//	RP! ( u -- )
 524              	// initialize RPP with u 
 525              	*******************************/
 526 32da C2320000 		_HEADER RPSTOR,3,"RP!"
 526      03525021 
 526      00BF
 527 32e4 B046     		MOV RSP,TOS 
 528 32e6 57F8046B 		_POP  
 529 32ea 3DE6     		_NEXT 
 530              	
 531              	/********************************
 532              		SP! ( u -- )
 533              	 initialize SPP with u 
 534              	********************************/
 535 32ec DE320000 		_HEADER SPSTOR,3,"SP!"
 535      03535021 
 536 32f4 3746     		MOV DSP,TOS 
ARM GAS  forth.s 			page 122


 537 32f6 86EA0606 		EOR TOS,TOS,TOS 
 538 32fa 35E6     		_NEXT 
 539              	
 540              	/**************************************
 541              	    SP@	 ( -- a )
 542              	 	Push the current data stack pointer.
 543              	***************************************/
 544 32fc F0320000 		_HEADER SPAT,3,"SP@"
 544      03535040 
 545 3304 47F8046D 		_PUSH
 546 3308 3E46     		MOV	TOS,DSP
 547 330a 2DE6     		_NEXT
 548              	
 549              	/**************************************
 550              	   RP@ ( -- a )
 551              	   push current rstack pointer 
 552              	**************************************/
 553 330c 00330000 		_HEADER RPAT,3,"RP@"
 553      03525040 
 554 3314 47F8046D 		_PUSH 
 555 3318 4646     		MOV TOS,RSP 
 556 331a 25E6     		_NEXT 
 557              	
 558              	/********************************
 559              	    DROP	( w -- )
 560              	 	Discard top stack item.
 561              	********************************/
 562 331c 10330000 		_HEADER DROP,4,"DROP"
 562      0444524F 
 562      500000BF 
 563 3328 57F8046B 		_POP
 564 332c 1CE6     		_NEXT 
 565              	
 566              	/*********************************
 567              	CORE EXTENSION 
 568              		NIP ( x1 x2 -- x2 )
 569              		throw next element 
 570              	*********************************/
 571 332e 20330000 		_HEADER NIP,3,"NIP"
 571      034E4950 
 571      00BF
 572 3338 07F10407 		ADD DSP,#CELLL 
 573 333c 14E6     		_NEXT 
 574              	
 575              	/*********************************
 576              	    DUP	 ( w -- w w )
 577              	 	Duplicate the top stack item.
 578              	*********************************/
 579 333e 32330000 		_HEADER DUPP,3,"DUP"
 579      03445550 
 579      00BF
 580 3348 47F8046D 		_PUSH
 581 334c 0CE6     		_NEXT 
 582              	
 583              	/**********************************
 584              	    SWAP	( w1 w2 -- w2 w1 )
 585              	 	Exchange top two stack items.
ARM GAS  forth.s 			page 123


 586              	**********************************/
 587 334e 42330000 		_HEADER SWAP,4,"SWAP"
 587      04535741 
 587      5000
 588 3358 3D68     		LDR	WP,[DSP]
 589 335a 3E60     		STR	TOS,[DSP]
 590 335c 2E46     		MOV	TOS,WP
 591 335e 03E6     		_NEXT 
 592              	
 593              	/***********************************
 594              		2SWAP ( d2 d1 -- d1 d2 )
 595              		swap double integer 
 596              	***************************************/
 597 3360 52330000 		_HEADER DSWAP,5,"2SWAP"
 597      05325357 
 597      415000BF 
 598 336c 3046     		mov T0,TOS 
 599 336e 3968     		ldr T1,[DSP]
 600 3370 7E68     		ldr TOS,[DSP,#4]
 601 3372 BD68     		ldr WP,[DSP,#8]
 602 3374 3D60     		str WP,[DSP]
 603 3376 7860     		str T0,[DSP,#4]
 604 3378 B960     		str T1,[DSP,#8]
 605 337a F5E5     		_NEXT 
 606              	
 607              	
 608              	/***********************************
 609              	    OVER	( w1 w2 -- w1 w2 w1 )
 610              	 	Copy second stack item to top.
 611              	***********************************/
 612 337c 64330000 		_HEADER OVER,4,"OVER"
 612      044F5645 
 612      520000BF 
 613 3388 47F8046D 		_PUSH
 614 338c 7E68     		LDR	TOS,[DSP,#4]
 615 338e EBE5     		_NEXT 
 616              	
 617              	/***********************************
 618              		2OVER ( d2 d1 -- d2 d1 d2 )
 619              		copy a double integer to TOS 
 620              	**********************************************/
 621 3390 80330000 		_HEADER DOVER,5,"2OVER"
 621      05324F56 
 621      455200BF 
 622 339c 7868     		ldr T0,[DSP,#4]
 623 339e BD68     		ldr WP,[DSP,#8]
 624 33a0 47F8046D 		_PUSH 
 625 33a4 2E46     		mov TOS,WP 
 626 33a6 47F8046D 		_PUSH
 627 33aa 0646     		mov TOS,T0 
 628 33ac DCE5     		_NEXT 
 629              	
 630              	
 631              	/***********************************
 632              	    0<	  ( n -- t )
 633              	 	Return true if n is negative.
 634              	***********************************/
ARM GAS  forth.s 			page 124


 635 33ae 94330000 		_HEADER ZLESS,2,"0<"
 635      02303C00 
 635      00BF
 636 33b8 4FEAE676 		ASR TOS,#31
 637 33bc D4E5     		_NEXT 
 638              	
 639              	/**********************************
 640              		0> ( n -- flag )
 641              		true if n > 0 
 642              	**********************************/
 643 33be B2330000 		_HEADER ZGREAT,2,"0>"
 643      02303E00 
 643      00BF
 644 33c8 1EB1     		CBZ TOS, 1f
 645 33ca 4FEAE676 		ASR TOS,#31 
 646 33ce 6FEA0606 		MVN TOS,TOS 
 647 33d2 C9E5     	1:	_NEXT 
 648              	
 649              	
 650              	/**********************************
 651              		0<> ( n -- flag )
 652              	    true if n <> 0
 653              	*********************************/
 654 33d4 C2330000 		_HEADER ZNEQU,3,"0<>"
 654      03303C3E 
 655 33dc 0EB1     		CBZ TOS,1f
 656 33de 4FF0FF36 		MOV TOS,#-1
 657 33e2 C1E5     	1:	_NEXT
 658              	
 659              	
 660              	/*********************************
 661              		<>  ( x1 x2 -- flag )
 662              		true fi x1 <> x2 
 663              	********************************/
 664 33e4 D8330000 		_HEADER NEQU,2,"<>"
 664      023C3E00 
 665 33ec 57F8040B 		LDR T0,[DSP],#CELLL 
 666 33f0 4640     		EORS TOS,T0 
 667 33f2 01D0     		BEQ 1f
 668 33f4 4FF0FF36 		MOV TOS,#-1
 669 33f8 B6E5     	1:  _NEXT 
 670              	
 671              	
 672              	/********************************
 673              	    AND	 ( w w -- w )
 674              	 	Bitwise AND.
 675              	********************************/
 676 33fa E8330000 		_HEADER ANDD,3,"AND"
 676      03414E44 
 676      00BF
 677 3404 57F8045B 		LDR	WP,[DSP],#4
 678 3408 06EA0506 		AND	TOS,TOS,WP
 679 340c ACE5     		_NEXT 
 680              	
 681              	/******************************
 682              	    OR	  ( w w -- w )
 683              	 	Bitwise inclusive OR.
ARM GAS  forth.s 			page 125


 684              	******************************/
 685 340e FE330000 		_HEADER ORR,2,"OR"
 685      024F5200 
 685      00BF
 686 3418 57F8045B 		LDR	WP,[DSP],#4
 687 341c 46EA0506 		ORR	TOS,TOS,WP
 688 3420 A2E5     		_NEXT 
 689              	
 690              	/*****************************
 691              	    XOR	 ( w w -- w )
 692              	 	Bitwise exclusive OR.
 693              	*****************************/
 694 3422 12340000 		_HEADER XORR,3,"XOR"
 694      03584F52 
 694      00BF
 695 342c 57F8045B 		LDR	WP,[DSP],#4
 696 3430 86EA0506 		EOR	TOS,TOS,WP
 697 3434 98E5     		_NEXT 
 698              	
 699              	/**************************************************
 700              	    UM+	 ( w w -- w cy )
 701              	 	Add two numbers, return the sum and carry flag.
 702              	***************************************************/
 703 3436 26340000 		_HEADER UPLUS,3,"UM+"
 703      03554D2B 
 703      00BF
 704 3440 3D68     		LDR	WP,[DSP]
 705 3442 AD19     		ADDS	WP,WP,TOS
 706 3444 4FF00006 		MOV	TOS,#0
 707 3448 46F10006 		ADC	TOS,TOS,#0
 708 344c 3D60     		STR	WP,[DSP]
 709 344e 8BE5     		_NEXT 
 710              	
 711              	/*********************************
 712              	    RSHIFT	 ( w # -- w )
 713              	 	logical Right shift # bits.
 714              	**********************************/
 715 3450 3A340000 		_HEADER RSHIFT,6,"RSHIFT"
 715      06525348 
 715      49465400 
 716 345c 57F8045B 		LDR	WP,[DSP],#4
 717 3460 25FA06F6 		MOV	TOS,WP,LSR TOS
 718 3464 80E5     		_NEXT 
 719              	
 720              	/****************************
 721              	    LSHIFT	 ( w # -- w )
 722              	 	left shift # bits.
 723              	****************************/
 724 3466 54340000 		_HEADER LSHIFT,6,"LSHIFT"
 724      064C5348 
 724      49465400 
 724      00BF
 725 3474 57F8045B 		LDR	WP,[DSP],#4
 726 3478 05FA06F6 		MOV	TOS,WP,LSL TOS
 727 347c 74E5     		_NEXT
 728              	
 729              	/*************************
ARM GAS  forth.s 			page 126


 730              	    +	 ( w w -- w )
 731              	 	Add.
 732              	*************************/
 733 347e 6A340000 		_HEADER PLUS,1,"+"
 733      012B
 734 3484 57F8045B 		LDR	WP,[DSP],#4
 735 3488 2E44     		ADD	TOS,TOS,WP
 736 348a 6DE5     		_NEXT 
 737              	
 738              	/************************
 739              	    -	 ( w w -- w )
 740              	 	Subtract.
 741              	************************/
 742 348c 82340000 		_HEADER SUBB,1,"-"
 742      012D00BF 
 743 3494 57F8045B 		LDR	WP,[DSP],#4
 744 3498 C6EB0506 		RSB	TOS,TOS,WP
 745 349c 64E5     		_NEXT 
 746              	
 747              	/************************
 748              	    *	 ( w w -- w )
 749              	 	Multiply.
 750              	***********************/
 751 349e 90340000 		_HEADER STAR,1,"*"
 751      012A
 752 34a4 57F8045B 		LDR	WP,[DSP],#4
 753 34a8 05FB06F6 		MUL	TOS,WP,TOS
 754 34ac 5CE5     		_NEXT 
 755              	
 756              	/***************************
 757              	    UM*	 ( w w -- ud )
 758              	 	Unsigned multiply.
 759              	****************************/
 760 34ae A2340000 		_HEADER UMSTA,3,"UM*"
 760      03554D2A 
 760      00BF
 761 34b8 3D68     		LDR	WP,[DSP]
 762 34ba A6FB0523 		UMULL	T2,T3,TOS,WP
 763 34be 3A60     		STR	T2,[DSP]
 764 34c0 1E46     		MOV	TOS,T3
 765 34c2 51E5     		_NEXT 
 766              	
 767              	/***************************
 768              	    M*	 ( w w -- d )
 769              	 	signed multiply.
 770              		hold double result
 771              	***************************/
 772 34c4 B2340000 		_HEADER MSTAR,2,"M*"
 772      024D2A00 
 773 34cc 3D68     		LDR	WP,[DSP]
 774 34ce 86FB0523 		SMULL	T2,T3,TOS,WP
 775 34d2 3A60     		STR	T2,[DSP]
 776 34d4 1E46     		MOV	TOS,T3
 777 34d6 47E5     		_NEXT 
 778              	
 779              	/***************************
 780              	    1+	 ( w -- w+1 )
ARM GAS  forth.s 			page 127


 781              	 	Add 1.
 782              	***************************/
 783 34d8 C8340000 		_HEADER ONEP,2,"1+"
 783      02312B00 
 784 34e0 06F10106 		ADD	TOS,TOS,#1
 785 34e4 40E5     		_NEXT 
 786              	
 787              	/***************************
 788              	    1-	 ( w -- w-1 )
 789              	 	Subtract 1.
 790              	***************************/
 791 34e6 DC340000 		_HEADER ONEM,2,"1-"
 791      02312D00 
 791      00BF
 792 34f0 A6F10106 		SUB	TOS,TOS,#1
 793 34f4 38E5     		_NEXT 
 794              	
 795              	/***************************
 796              	    2+	 ( w -- w+2 )
 797              	 	Add 2.
 798              	**************************/
 799 34f6 EA340000 		_HEADER TWOP,2,"2+"
 799      02322B00 
 799      00BF
 800 3500 06F10206 		ADD	TOS,TOS,#2
 801 3504 30E5     		_NEXT
 802              	
 803              	/**************************
 804              	    2-	 ( w -- w-2 )
 805              	 	Subtract 2.
 806              	**************************/
 807 3506 FA340000 		_HEADER TWOM,2,"2-"
 807      02322D00 
 807      00BF
 808 3510 A6F10206 		SUB	TOS,TOS,#2
 809 3514 28E5     		_NEXT
 810              	
 811              	/***************************
 812              	    CELL+	( w -- w+4 )
 813              	 	Add CELLL.
 814              	***************************/
 815 3516 0A350000 		_HEADER CELLP,5,"CELL+"
 815      0543454C 
 815      4C2B
 816 3520 06F10406 		ADD	TOS,TOS,#CELLL
 817 3524 20E5     		_NEXT
 818              	
 819              	/***************************
 820              	    CELL-	( w -- w-4 )
 821              	 	Subtract CELLL.
 822              	**************************/
 823 3526 1A350000 		_HEADER CELLM,5,"CELL-"
 823      0543454C 
 823      4C2D
 824 3530 A6F10406 		SUB	TOS,TOS,#CELLL
 825 3534 18E5     		_NEXT
 826              	
ARM GAS  forth.s 			page 128


 827              	/**************************** 
 828              	    BL	( -- 32 )
 829              	 	Blank (ASCII space).
 830              	*****************************/
 831 3536 2A350000 		_HEADER BLANK,2,"BL"
 831      02424C00 
 831      00BF
 832 3540 47F8046D 		_PUSH
 833 3544 4FF02006 		MOV	TOS,#32
 834 3548 0EE5     		_NEXT 
 835              	
 836              	/**************************
 837              	    CELLS	( w -- w*4 )
 838              	 	Multiply CELLL 
 839              	***************************/
 840 354a 3A350000 		_HEADER CELLS,5,"CELLS"
 840      0543454C 
 840      4C53
 841 3554 4FEA8606 		LSL TOS,#2
 842 3558 06E5     		_NEXT
 843              	
 844              	/***************************
 845              	    CELL/	( w -- w/4 )
 846              	 	Divide by CELLL.
 847              	***************************/
 848 355a 4E350000 		_HEADER CELLSL,5,"CELL/"
 848      0543454C 
 848      4C2F
 849 3564 4FEAA606 		ASR TOS,#2
 850 3568 FEE4     		_NEXT
 851              	
 852              	/*************************
 853              	    2*	( w -- w*2 )
 854              	 	Multiply 2.
 855              	*************************/
 856 356a 5E350000 		_HEADER TWOST,2,"2*"
 856      02322A00 
 856      00BF
 857 3574 4FEA4606 		MOV	TOS,TOS,LSL#1
 858 3578 F6E4     		_NEXT
 859              	
 860              	/*************************
 861              	    2/	( w -- w/2 )
 862              	 	Divide by 2.
 863              	***********************/
 864 357a 6E350000 		_HEADER TWOSL,2,"2/"
 864      02322F00 
 864      00BF
 865 3584 4FEA6606 		MOV	TOS,TOS,ASR#1
 866 3588 EEE4     		_NEXT
 867              	
 868              	/****************************
 869              	    ?DUP	( w -- w w | 0 )
 870              	 	Conditional duplicate.
 871              	*****************************/
 872 358a 7E350000 		_HEADER QDUP,4,"?DUP"
 872      043F4455 
ARM GAS  forth.s 			page 129


 872      5000
 873 3594 3500     		MOVS	WP,TOS
 874 3596 18BF     		IT NE 
 875 3598 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 876 359c E4E4     		_NEXT
 877              	
 878              	/************************************
 879              	 CORE EXTENSION 
 880              		TUCK ( x1 x2 -- x2 x1 x2 )
 881              	***********************************/
 882 359e 8E350000 		_HEADER TUCK,4,"TUCK"
 882      04545543 
 882      4B00
 883 35a8 47F8046D 		_PUSH 
 884 35ac 7E68     		LDR TOS, [DSP,#CELLL]
 885 35ae DBE4     		_NEXT 
 886              	
 887              	/************************************
 888              	 CORE EXTENSION 
 889              		ROLL ( Xu Xu-1 .. X0 u -- Xu-1 ... X0 Xu )
 890              	**********************************************/
 891 35b0 A2350000 		_HEADER ROLL,4,"ROLL"
 891      04524F4C 
 891      4C0000BF 
 892 35bc 504700BF 		_NEST 
 893 35c0 95350000 		_ADR QDUP 
 894 35c4 CF310000 		_QBRAN 9f 
 894      20360000 
 895 35cc 49330000 		_ADR  DUPP 
 896 35d0 8F310000 		_DOLIT 1 
 896      01000000 
 897 35d8 CD370000 		_ADR   EQUAL 
 898 35dc CF310000 		_QBRAN 1f 
 898      F4350000 
 899 35e4 29330000 		_ADR  DROP 
 900 35e8 59330000 		_ADR  SWAP 
 901 35ec F7310000 		_BRAN 9f 
 901      20360000 
 902 35f4 B5320000 	1:  _ADR  TOR 	
 903 35f8 85320000 		_ADR  RAT
 904 35fc 613F0000 		_ADR  PICK 	
 905 3600 05330000 		_ADR  SPAT
 906 3604 49330000 		_ADR  DUPP 
 907 3608 21350000 		_ADR  CELLP 
 908 360c 51320000 		_ADR  RFROM
 909 3610 E1340000 		_ADR  ONEP  
 910 3614 55350000 		_ADR  CELLS 
 911 3618 85400000 		_ADR  WMOVE  
 912 361c 29330000 		_ADR  DROP 
 913 3620 6F2F0000 	9:	_UNNEST 
 914              	/*
 915              		MOV T0, TOS
 916              		CBZ T0, 9f 
 917              		MOV T1, T0   // COUNTER   
 918              		SUBB T0, #1 
 919              		SLL T0, #2 
 920              		_POP
ARM GAS  forth.s 			page 130


 921              		MOV T2, TOS 
 922              		LDR TOS,[DSP,T0]
 923              		MOV T2, [DSP,T0]
 924              		SUBS T1,#1
 925              		BEQ  9f 
 926              	
 927              	9:	_NEXT 
 928              	*/
 929              	
 930              	/***********************************
 931              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 932              	 	Rotate top 3 items.
 933              	*************************************/
 934 3624 B4350000 		_HEADER ROT,3,"ROT"
 934      03524F54 
 935 362c 3868     		LDR	T0,[DSP]  // w2 
 936 362e 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 937 3630 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 938 3632 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 939 3634 98E4     		_NEXT
 940              	
 941              	/*********************************
 942              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 943              	 left rotate top 3 elements 
 944              	********************************/
 945 3636 28360000 		_HEADER NROT,4,"-ROT"
 945      042D524F 
 945      5400
 946 3640 7868     		LDR T0,[DSP,#4]
 947 3642 7E60     		STR TOS,[DSP,#4]	
 948 3644 3E68     		LDR TOS,[DSP]
 949 3646 3860     		STR T0,[DSP]
 950 3648 8EE4     		_NEXT 
 951              	
 952              	/*********************************
 953              	    2DROP	( w1 w2 -- )
 954              	 	Drop top 2 items.
 955              	*********************************/
 956 364a 3A360000 		_HEADER DDROP,5,"2DROP"
 956      05324452 
 956      4F50
 957 3654 57F8046B 		_POP
 958 3658 57F8046B 		_POP
 959 365c 84E4     		_NEXT 
 960              	
 961              	/********************************
 962              		3DROP ( w1 w2 w3 -- )
 963              		drop top 3 items 
 964              	********************************/
 965 365e 4E360000 		_HEADER TDROP,5,"3DROP"
 965      05334452 
 965      4F50
 966 3668 07F10807 	    add DSP,#8 
 967 366c 57F8046B 	    _POP 
 968 3670 7AE4     	    _NEXT 
 969              	
 970              	/***********************************
ARM GAS  forth.s 			page 131


 971              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 972              	 	Duplicate top 2 items.
 973              	************************************/
 974 3672 62360000 		_HEADER DDUP,4,"2DUP"
 974      04324455 
 974      5000
 975 367c 3868     		LDR	T0,[DSP] // w1
 976 367e 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 977 3682 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 978 3686 6FE4     		_NEXT
 979              	
 980              	/******************************
 981              	    D+	( d1 d2 -- d3 )
 982              	 	Add top 2 double numbers.
 983              	******************************/
 984 3688 76360000 		_HEADER DPLUS,2,"D+"
 984      02442B00 
 985 3690 57F8045B 		LDR	WP,[DSP],#4
 986 3694 57F8042B 		LDR	T2,[DSP],#4
 987 3698 3B68     		LDR	T3,[DSP]
 988 369a ED18     		ADDS	WP,WP,T3
 989 369c 3D60     		STR	WP,[DSP]
 990 369e 46EB0206 		ADC	TOS,TOS,T2
 991 36a2 61E4     		_NEXT
 992              	
 993              	/******************************
 994              		DABS ( d -- ud )
 995              		absolute value double 
 996              	*****************************/
 997 36a4 8C360000 		_HEADER DABS,4,"DABS"
 997      04444142 
 997      530000BF 
 998 36b0 16F0004F 		tst TOS,#(1<<31)
 999 36b4 09D0     		beq 9f 
 1000 36b6 6FEA0606 		mvn TOS,TOS 
 1001 36ba 3D68     		ldr WP,[DSP]
 1002 36bc 6FEA0505 		mvn WP,WP 
 1003 36c0 0135     		adds WP,#1
 1004 36c2 3D60     		str WP,[DSP]
 1005 36c4 01D3     		bcc 9f 
 1006 36c6 06F10106 		add TOS,#1 
 1007 36ca 4DE4     	9:	_NEXT 
 1008              	
 1009              	/*****************************
 1010              	  UD> ( d1 d2 -- f )
 1011              	  unsigned compare double d1 > d2 
 1012              	******************************/
 1013 36cc A8360000 		_HEADER UDGREAT,3,"UD>"
 1013      0355443E 
 1014 36d4 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 1015 36d8 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 1016 36da B042     		cmp T0,TOS 
 1017 36dc 02D8     		bhi 1f
 1018 36de 04D4     		bmi 2f  
 1019 36e0 A942     		cmp T1,WP 
 1020 36e2 02D9     		bls 2f 
 1021 36e4 4FF0FF36 	1:	mov TOS,#-1 
ARM GAS  forth.s 			page 132


 1022 36e8 3EE4     		_NEXT 
 1023 36ea 4FF00006 	2:  mov TOS,#0 
 1024 36ee 3BE4     		_NEXT 
 1025              	
 1026              	/******************************
 1027              		D0= ( d -- f )
 1028              		double 0= 
 1029              	*****************************/
 1030 36f0 D0360000 		_HEADER DZEQUAL,3,"D0="
 1030      0344303D 
 1031 36f8 3046     		mov T0,TOS
 1032 36fa 57F8046B 		_POP 
 1033 36fe 46EA0006 		orr TOS,T0 
 1034 3702 01D0     		beq 9f
 1035 3704 6FF00006 		mvn TOS,#0 
 1036 3708 2EE4     	9:	_NEXT 
 1037              	
 1038              	/*****************************
 1039              	    INVERT	 ( w -- !w )
 1040              	 	1"s complement.
 1041              	*****************************/
 1042 370a F4360000 		_HEADER INVER,6,"INVERT"
 1042      06494E56 
 1042      45525400 
 1042      00BF
 1043 3718 6FEA0606 		MVN	TOS,TOS
 1044 371c 24E4     		_NEXT
 1045              	
 1046              	/*****************************
 1047              	    NEGATE	( w -- -w )
 1048              	 	2's complement.
 1049              	***************************/
 1050 371e 0E370000 		_HEADER NEGAT,6,"NEGATE"
 1050      064E4547 
 1050      41544500 
 1050      00BF
 1051 372c C6F10006 		RSB	TOS,TOS,#0
 1052 3730 1AE4     		_NEXT
 1053              	
 1054              	/***************************
 1055              	    ABS	 ( w -- |w| )
 1056              	 	Absolute.
 1057              	**************************/
 1058 3732 22370000 		_HEADER ABSS,3,"ABS"
 1058      03414253 
 1058      00BF
 1059 373c 16F0004F 		TST	TOS,#0x80000000
 1060 3740 18BF     		IT NE
 1061 3742 7642     	    RSBNE   TOS,TOS,#0
 1062 3744 10E4     		_NEXT
 1063              	
 1064              	/**************************
 1065              		CLZ ( n - n )
 1066              		count leading zeros 
 1067              	**************************/
 1068 3746 36370000 		_HEADER CLZ,3,"CLZ"
 1068      03434C5A 
ARM GAS  forth.s 			page 133


 1068      00BF
 1069 3750 B6FA86F6 		clz TOS,TOS 
 1070 3754 08E4     		_NEXT 
 1071              	
 1072              	/*************************
 1073              		CTZ ( n -- n )
 1074              		count trailing zeros 
 1075              	************************/
 1076 3756 4A370000 		_HEADER CTZ,3,"CTZ"
 1076      0343545A 
 1076      00BF
 1077 3760 80EA0000 		eor T0,T0 
 1078 3764 16F0010F 	1:  tst TOS,#1 
 1079 3768 04D1     		bne 2f 
 1080 376a 4FEA5606 		lsr TOS,#1 
 1081 376e 00F10100 		add T0,#1 
 1082 3772 F7E7     		b 1b 
 1083 3774 0646     	2:  mov TOS,T0 
 1084 3776 FFF7F7BB 		_NEXT 
 1085              	
 1086              	/**********************
 1087              	CORE EXTENSION 
 1088              		FALSE ( -- 0 )
 1089              		return false flag 
 1090              	***********************/
 1091 377a 5A370000 		_HEADER FALSE,5,"FALSE"
 1091      0546414C 
 1091      5345
 1092 3784 47F8046D 		_PUSH 
 1093 3788 86EA0606 		EOR TOS,TOS 
 1094 378c FFF7ECBB 		_NEXT 
 1095              	
 1096              	/**********************
 1097              	CORE EXTENSION 
 1098              		TRUE ( -- -1 )
 1099              		return true flag 
 1100              	***********************/
 1101 3790 7E370000 		_HEADER TRUE,4,"TRUE"
 1101      04545255 
 1101      450000BF 
 1102 379c 47F8046D 		_PUSH 
 1103 37a0 86EA0606 		EOR TOS,TOS
 1104 37a4 6FEA0606 		MVN TOS,TOS 
 1105 37a8 FFF7DEBB 		_NEXT 
 1106              	
 1107              	
 1108              	/*******************
 1109              	  0= ( w -- f )
 1110              	 TOS==0?
 1111              	*******************/
 1112 37ac 94370000 		_HEADER ZEQUAL,2,"0="
 1112      02303D00 
 1113 37b4 1EB9     		cbnz TOS,1f
 1114 37b6 4FF0FF36 		mov TOS,#-1
 1115 37ba FFF7D5BB 		_NEXT 
 1116 37be 86EA0606 	1:  eor TOS,TOS,TOS  
 1117 37c2 FFF7D1BB 		_NEXT 	
ARM GAS  forth.s 			page 134


 1118              	
 1119              	/*********************
 1120              	    =	 ( w w -- t )
 1121              	 	Equal?
 1122              	*********************/
 1123 37c6 B0370000 		_HEADER EQUAL,1,"="
 1123      013D
 1124 37cc 57F8045B 		LDR	WP,[DSP],#4
 1125 37d0 AE42     		CMP	TOS,WP
 1126 37d2 0CBF     		ITE EQ 
 1127 37d4 6FF00006 	    MVNEQ	TOS,#0
 1128 37d8 0026     		MOVNE	TOS,#0
 1129 37da FFF7C5BB 		_NEXT
 1130              	
 1131              	/************************
 1132              		<> ( w w -- f )
 1133              		different?
 1134              	************************/
 1135 37de CA370000 		_HEADER DIFF,2,"<>"
 1135      023C3E00 
 1135      00BF
 1136 37e8 3046     		mov T0,TOS 
 1137 37ea 57F8046B 		_POP 
 1138 37ee 86EA0006 		eor TOS,T0
 1139 37f2 B6FA86F0 		clz T0,TOS 
 1140 37f6 06FA00F6 		lsl TOS,T0 
 1141 37fa 4FEAE676 		asr TOS,#31 
 1142 37fe FFF7B3BB 		_NEXT 
 1143              	
 1144              	/************************
 1145              	    U<	 ( w w -- t )
 1146              	 	Unsigned less?
 1147              	*************************/
 1148 3802 E2370000 		_HEADER ULESS,2,"U<"
 1148      02553C00 
 1148      00BF
 1149 380c 57F8045B 		LDR	WP,[DSP],#4
 1150 3810 B542     		CMP	WP,TOS
 1151 3812 34BF     		ITE CC 
 1152 3814 6FF00006 		MVNCC	TOS,#0
 1153 3818 0026     		MOVCS	TOS,#0
 1154 381a FFF7A5BB 		_NEXT
 1155              	
 1156              	/**********************
 1157              	    <	( w w -- t )
 1158              	 	Less?
 1159              	**********************/
 1160 381e 06380000 		_HEADER LESS,1,"<"
 1160      013C
 1161 3824 57F8045B 		LDR	WP,[DSP],#4
 1162 3828 B542     		CMP	WP,TOS
 1163 382a B4BF     	    ITE LT
 1164 382c 6FF00006 		MVNLT	TOS,#0
 1165 3830 0026     		MOVGE	TOS,#0
 1166 3832 FFF799BB 		_NEXT 
 1167              	
 1168              	/**********************
ARM GAS  forth.s 			page 135


 1169              		U> ( u u -- t|f )
 1170              	    unsigned greater 
 1171              	**********************/
 1172 3836 22380000 		_HEADER UGREAT,2,"U>"
 1172      02553E00 
 1172      00BF
 1173 3840 57F8045B 		LDR WP,[DSP],#4 
 1174 3844 AE42     		CMP TOS,WP 
 1175 3846 34BF     		ITE CC  
 1176 3848 6FF00006 		MVNCC TOS,#0 
 1177 384c 0026     		MOVCS TOS,#0
 1178 384e FFF78BBB 		_NEXT 
 1179              	
 1180              	/***********************
 1181              	    >	( w w -- t )
 1182              	 	greater?
 1183              	***********************/
 1184 3852 3A380000 		_HEADER GREAT,1,">"
 1184      013E
 1185 3858 57F8045B 		LDR	WP,[DSP],#4
 1186 385c B542     		CMP	WP,TOS
 1187 385e CCBF     		ITE GT
 1188 3860 6FF00006 	    MVNGT	TOS,#0
 1189 3864 0026     		MOVLE	TOS,#0
 1190 3866 FFF77FBB 		_NEXT
 1191              	
 1192              	/***************************
 1193              	    MAX	 ( w w -- max )
 1194              	 	Leave maximum.
 1195              	***************************/
 1196 386a 56380000 		_HEADER MAX,3,"MAX"
 1196      034D4158 
 1196      00BF
 1197 3874 57F8045B 		LDR	WP,[DSP],#4
 1198 3878 B542     		CMP	WP,TOS
 1199 387a C8BF     		IT GT 
 1200 387c 2E46     		MOVGT	TOS,WP
 1201 387e FFF773BB 		_NEXT 
 1202              	
 1203              	/**************************
 1204              	    MIN	 ( w w -- min )
 1205              	 	Leave minimum.
 1206              	**************************/
 1207 3882 6E380000 		_HEADER MIN,3,"MIN"
 1207      034D494E 
 1207      00BF
 1208 388c 57F8045B 		LDR	WP,[DSP],#4
 1209 3890 B542     		CMP	WP,TOS
 1210 3892 B8BF     		IT LT
 1211 3894 2E46     		MOVLT	TOS,WP
 1212 3896 FFF767BB 		_NEXT
 1213              	
 1214              	/***********************
 1215              	    +!	 ( w a -- )
 1216              	 	Add to memory.
 1217              	***********************/
 1218 389a 86380000 		_HEADER PSTOR,2,"+!"
ARM GAS  forth.s 			page 136


 1218      022B2100 
 1218      00BF
 1219 38a4 57F8045B 		LDR	WP,[DSP],#4
 1220 38a8 3268     		LDR	T2,[TOS]
 1221 38aa 2A44     		ADD	T2,T2,WP
 1222 38ac 3260     		STR	T2,[TOS]
 1223 38ae 57F8046B 		_POP
 1224 38b2 FFF759BB 		_NEXT
 1225              	
 1226              	/************************
 1227              	    2!	 ( d a -- )
 1228              	 	Store double number.
 1229              	*************************/
 1230 38b6 9E380000 		_HEADER DSTOR,2,"2!"
 1230      02322100 
 1230      00BF
 1231 38c0 57F8045B 		LDR	WP,[DSP],#4
 1232 38c4 57F8042B 		LDR	T2,[DSP],#4
 1233 38c8 46F8045B 		STR	WP,[TOS],#4
 1234 38cc 3260     		STR	T2,[TOS]
 1235 38ce 57F8046B 		_POP
 1236 38d2 FFF749BB 		_NEXT
 1237              	
 1238              	/************************
 1239              	    2@	 ( a -- d )
 1240              	 	Fetch double number.
 1241              	************************/
 1242 38d6 BA380000 		_HEADER DAT,2,"2@"
 1242      02324000 
 1242      00BF
 1243 38e0 7568     		LDR	WP,[TOS,#4]
 1244 38e2 47F8045D 		STR	WP,[DSP,#-4]!
 1245 38e6 3668     		LDR	TOS,[TOS]
 1246 38e8 FFF73EBB 		_NEXT
 1247              	
 1248              	/***************************
 1249              	    COUNT	( b -- b+1 c )
 1250              	 	Fetch length of string.
 1251              	****************************/
 1252 38ec DA380000 		_HEADER COUNT,5,"COUNT"
 1252      05434F55 
 1252      4E5400BF 
 1253 38f8 16F8015B 		LDRB	WP,[TOS],#1
 1254 38fc 47F8046D 		_PUSH
 1255 3900 2E46     		MOV	TOS,WP
 1256 3902 FFF731BB 		_NEXT
 1257              	
 1258              	/******************************
 1259              	    DNEGATE	( d -- -d )
 1260              	 	Negate double number.
 1261              	**************************/
 1262 3906 F0380000 		_HEADER DNEGA,7,"DNEGATE"
 1262      07444E45 
 1262      47415445 
 1262      00BF
 1263 3914 3D68     		LDR	WP,[DSP]
 1264 3916 A2EB0202 		SUB	T2,T2,T2
ARM GAS  forth.s 			page 137


 1265 391a 551B     		SUBS WP,T2,WP
 1266 391c 62EB0606 		SBC	TOS,T2,TOS
 1267 3920 3D60     		STR	WP,[DSP]
 1268 3922 FFF721BB 		_NEXT
 1269              	
 1270              	/******************************
 1271              	  System and user variables
 1272              	******************************/
 1273              	
 1274              	/***********************
 1275              	  system variables 
 1276              	***********************/
 1277              	
 1278              	/***********************
 1279              		STATE ( -- a )
 1280              		compilation state 
 1281              		0 -> interpret
 1282              		-1 -> compile 
 1283              	************************/
 1284 3926 0A390000 		_HEADER STATE,5,"STATE"
 1284      05535441 
 1284      5445
 1285 3930 47F8046D 		_PUSH 
 1286 3934 04F1B406 		ADD TOS,UP,#CSTATE 
 1287 3938 FFF716BB 		_NEXT 
 1288              	
 1289              	/**************************
 1290              	 SEED ( -- a)
 1291              	 return PRNG seed address 
 1292              	**************************/
 1293 393c 2A390000 		_HEADER SEED,4,"SEED"
 1293      04534545 
 1293      440000BF 
 1294 3948 47F8046D 		_PUSH 
 1295 394c 04F10406 		ADD TOS,UP,#RNDSEED
 1296 3950 FFF70ABB 		_NEXT 	
 1297              	
 1298              	/****************************************
 1299              	  TICKS ( -- u )
 1300              	 return milliseconds since last reset or
 1301              	 power up. 
 1302              	****************************************/
 1303 3954 40390000 		_HEADER MSEC,5,"TICKS"
 1303      05544943 
 1303      4B5300BF 
 1304 3960 47F8046D 	    _PUSH
 1305 3964 A668     	    LDR TOS,[UP,#TICKS]
 1306 3966 FFF7FFBA 	    _NEXT 
 1307              	
 1308              	/*************************
 1309              	 TIMER ( -- a )
 1310              	 count down timer 
 1311              	**********************/
 1312 396a 58390000 		_HEADER TIMER,5,"TIMER"
 1312      0554494D 
 1312      4552
 1313 3974 47F8046D 		 _PUSH 
ARM GAS  forth.s 			page 138


 1314 3978 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1315 397c FFF7F4BA 	    _NEXT
 1316              	
 1317              	/*****************************
 1318              	    'BOOT	 ( -- a )
 1319              	 	boot up application vector 
 1320              	*****************************/
 1321 3980 6E390000 		_HEADER TBOOT,5,"'BOOT"
 1321      0527424F 
 1321      4F5400BF 
 1322 398c 47F8046D 		_PUSH
 1323 3990 04F11006 		ADD	TOS,UP,#BOOT 
 1324 3994 FFF7E8BA 		_NEXT
 1325              		
 1326              	/********************************************	
 1327              	    BASE	( -- a )
 1328              	 	Storage of the radix base for numeric I/O.
 1329              	**********************************************/
 1330 3998 84390000 		_HEADER BASE,4,"BASE"
 1330      04424153 
 1330      450000BF 
 1331 39a4 47F8046D 		_PUSH
 1332 39a8 04F11C06 		ADD	TOS,UP,#NBASE
 1333 39ac FFF7DCBA 		_NEXT
 1334              	
 1335              	/***********************************************
 1336              		BCHAR ( -- flag )
 1337              		boolean variable
 1338              		if set base char include in convertion 
 1339              		of integer to string.  
 1340              	************************************************/
 1341 39b0 9C390000 			_HEADER BCHR,5,"BCHAR"
 1341      05424348 
 1341      415200BF 
 1342 39bc 47F8046D 			_PUSH 
 1343 39c0 04F12006 			ADD TOS,UP,#BCHAR 
 1344 39c4 FFF7D0BA 			_NEXT 
 1345              	
 1346              	/*****************************************************
 1347              	    temp	 ( -- a )
 1348              	 	A temporary storage location used in parse and find.
 1349              	hidden word for internal use
 1350              	********************************************************/
 1351              	TEMP:
 1352 39c8 47F8046D 		_PUSH
 1353 39cc 04F12406 		ADD	TOS,UP,#TMP
 1354 39d0 FFF7CABA 		_NEXT
 1355              	
 1356              	/*******************************************
 1357              	    SPAN	( -- a )
 1358              	 	Hold character count received by EXPECT.
 1359              	********************************************/
 1360 39d4 B4390000 		_HEADER SPAN,4,"SPAN"
 1360      04535041 
 1360      4E0000BF 
 1361 39e0 47F8046D 		_PUSH
 1362 39e4 04F12806 		ADD	TOS,UP,#CSPAN
ARM GAS  forth.s 			page 139


 1363 39e8 FFF7BEBA 		_NEXT
 1364              	
 1365              	/***********************************************************
 1366              	    >IN	 ( -- a )
 1367              	 	Hold the character pointer while parsing input stream.
 1368              	***********************************************************/
 1369 39ec D8390000 		_HEADER INN,3,">IN"
 1369      033E494E 
 1370 39f4 47F8046D 		_PUSH
 1371 39f8 04F12C06 		ADD	TOS,UP,#TOIN
 1372 39fc FFF7B4BA 		_NEXT
 1373              	
 1374              	/**************************************
 1375              	    #TIB	( -- a )
 1376              	 	Hold the current count and address 
 1377              		of the terminal input buffer.
 1378              	**************************************/
 1379 3a00 F0390000 		_HEADER NTIB,4,"#TIB"
 1379      04235449 
 1379      420000BF 
 1380 3a0c 47F8046D 		_PUSH
 1381 3a10 04F13006 		ADD	TOS,UP,#NTIBB
 1382 3a14 FFF7A8BA 		_NEXT
 1383              	
 1384              	/******************************
 1385              	    'EVAL	( -- a )
 1386              	 	Execution vector of EVAL.
 1387              	*******************************/
 1388 3a18 043A0000 		_HEADER TEVAL,5,"'EVAL"
 1388      05274556 
 1388      414C00BF 
 1389 3a24 47F8046D 		_PUSH
 1390 3a28 04F13C06 		ADD	TOS,UP,#EVAL
 1391 3a2c FFF79CBA 		_NEXT
 1392              	
 1393              	/*********************************
 1394              	    HLD	 ( -- a )
 1395              	 	Hold a pointer in building a 
 1396              		numeric output string.
 1397              	*********************************/
 1398 3a30 1C3A0000 		_HEADER HLD,3,"HLD"
 1398      03484C44 
 1399 3a38 47F8046D 		_PUSH
 1400 3a3c 04F14006 		ADD	TOS,UP,#VHOLD
 1401 3a40 FFF792BA 		_NEXT
 1402              	
 1403              	/**********************************
 1404              	    CONTEXT	( -- a )
 1405              	 	A area to specify vocabulary 
 1406              		search order.
 1407              	**********************************/
 1408 3a44 343A0000 		_HEADER CNTXT,7,"CONTEXT"
 1408      07434F4E 
 1408      54455854 
 1409              	CRRNT:
 1410 3a50 47F8046D 		_PUSH
 1411 3a54 04F14406 		ADD	TOS,UP,#CTXT
ARM GAS  forth.s 			page 140


 1412 3a58 FFF786BA 		_NEXT
 1413              	
 1414              	/******************************
 1415              	    CP	( -- a )
 1416              	 	Point to top free area  
 1417              		in user RAM. 
 1418              	******************************/
 1419 3a5c 483A0000 		_HEADER CPP,2,"CP"
 1419      02435000 
 1420 3a64 47F8046D 		_PUSH
 1421 3a68 04F14C06 		ADD	TOS,UP,#USER_CTOP
 1422 3a6c FFF77CBA 		_NEXT
 1423              	
 1424              	/*****************************
 1425              	CORE EXT 
 1426              		UNUSED ( -- n )
 1427              		return free bytes in 
 1428              		user RAM 
 1429              	*****************************/
 1430 3a70 603A0000 		_HEADER UNUSED,6,"UNUSED"
 1430      06554E55 
 1430      53454400 
 1431 3a7c 47F8046D 		_PUSH 
 1432 3a80 E06C     		LDR T0,[UP,#USER_CTOP]
 1433 3a82 47F22C16 		_MOV32 TOS,DEND 
 1433      C2F20106 
 1434 3a8a A6EB0006 		SUB TOS,T0 
 1435 3a8e FFF76BBA 		_NEXT 
 1436              	
 1437              	/****************************
 1438              	   FCP ( -- a )
 1439              	  Point ot top of Forth 
 1440              	  system dictionary
 1441              	****************************/
 1442 3a92 743A0000 		_HEADER FCP,3,"FCP"
 1442      03464350 
 1442      00BF
 1443 3a9c 47F8046D 		_PUSH 
 1444 3aa0 04F14806 		ADD TOS,UP,#FORTH_CTOP 
 1445 3aa4 FFF760BA 		_NEXT 
 1446              	
 1447              	/***************************
 1448              	    LAST	( -- a )
 1449              	 	Point to the last name 
 1450              		in the dictionary.
 1451              	***************************/
 1452 3aa8 963A0000 		_HEADER LAST,4,"LAST"
 1452      044C4153 
 1452      540000BF 
 1453 3ab4 47F8046D 		_PUSH
 1454 3ab8 04F15006 		ADD	TOS,UP,#LASTN
 1455 3abc FFF754BA 		_NEXT
 1456              	
 1457              	
 1458              	/***********************
 1459              		system constants 
 1460              	***********************/
ARM GAS  forth.s 			page 141


 1461              	
 1462              	/********************************
 1463              		USER-BEGIN ( -- a )
 1464              	  where user area begin in RAM
 1465              	********************************/
 1466 3ac0 AC3A0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1466      0A555345 
 1466      522D4245 
 1466      47494E00 
 1467 3ad0 47F8046D 		_PUSH 
 1468 3ad4 DFF80460 		ldr TOS,USR_BGN_ADR 
 1469 3ad8 FFF746BA 		_NEXT 
 1470              	USR_BGN_ADR:
 1471 3adc 12050020 	.word  DTOP 
 1472              	
 1473              	/*********************************
 1474              	  USER_END ( -- a )
 1475              	  where user area end in RAM 
 1476              	******************************/
 1477 3ae0 C43A0000 		_HEADER USER_END,8,"USER-END"
 1477      08555345 
 1477      522D454E 
 1477      440000BF 
 1478 3af0 47F8046D 		_PUSH 
 1479 3af4 DFF80460 		ldr TOS,USER_END_ADR 
 1480 3af8 FFF736BA 		_NEXT 
 1481              	USER_END_ADR:
 1482 3afc 2C710120 		.word DEND 
 1483              	
 1484              	/********************************
 1485              		MAX-INT ( -- n+ )
 1486              		maximum integer 
 1487              	*******************************/
 1488 3b00 E43A0000 		_HEADER MAXINT,7,"MAX-INT"
 1488      074D4158 
 1488      2D494E54 
 1489 3b0c 47F8046D 		_PUSH 
 1490 3b10 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
 1490      C7F6FF76 
 1491 3b18 FFF726BA 		_NEXT 
 1492              	
 1493              	/******************************
 1494              		MIN-INT ( -- n- )
 1495              		minimum integer 
 1496              	******************************/
 1497 3b1c 043B0000 		_HEADER MININT,7,"MIN-INT"
 1497      074D494E 
 1497      2D494E54 
 1498 3b28 47F8046D 		_PUSH 
 1499 3b2c 4FF00006 		_MOV32 TOS, 0x80000000
 1499      C8F20006 
 1500 3b34 FFF718BA 		_NEXT 
 1501              	
 1502              	/******************************
 1503              		MAX-UINT ( -- u )
 1504              		maximum unsigned integer 
 1505              	******************************/
ARM GAS  forth.s 			page 142


 1506 3b38 203B0000 		_HEADER MAXUINT,8,"MAX-UINT"
 1506      084D4158 
 1506      2D55494E 
 1506      540000BF 
 1507 3b48 47F8046D 		_PUSH
 1508 3b4c 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1508      CFF6FF76 
 1509 3b54 FFF708BA 		_NEXT 
 1510              	
 1511              	
 1512              	/* *********************
 1513              	  Common functions
 1514              	***********************/
 1515              	
 1516              	/********************************
 1517              	    WITHIN	( u ul uh -- t )
 1518              	 	Return true if u is within 
 1519              		the range of ul and uh.
 1520              	********************************/
 1521 3b58 3C3B0000 		_HEADER WITHI,6,"WITHIN"
 1521      06574954 
 1521      48494E00 
 1522 3b64 504700BF 		_NEST
 1523 3b68 89330000 		_ADR	OVER
 1524 3b6c 95340000 		_ADR	SUBB
 1525 3b70 B5320000 		_ADR	TOR
 1526 3b74 95340000 		_ADR	SUBB
 1527 3b78 51320000 		_ADR	RFROM
 1528 3b7c 0D380000 		_ADR	ULESS
 1529 3b80 6F2F0000 		_UNNEST
 1530              	
 1531              	//  Divide
 1532              	
 1533              	/*************************************
 1534              	    UM/MOD	( udl udh u -- ur uq )
 1535              	 	Unsigned divide of a double by a 
 1536              		single. Return mod and quotient.
 1537              	**************************************/
 1538 3b84 5C3B0000 		_HEADER UMMOD,6,"UM/MOD"
 1538      06554D2F 
 1538      4D4F4400 
 1539 3b90 4FF00103 		MOV	T3,#1
 1540 3b94 57F8045B 		LDR	WP,[DSP],#4
 1541 3b98 3A68     		LDR	T2,[DSP]
 1542              	UMMOD0:
 1543 3b9a 9218     		ADDS	T2,T2,T2
 1544 3b9c 6D41     		ADCS	WP,WP,WP
 1545 3b9e 04D3     		BCC	UMMOD1
 1546 3ba0 A5EB0605 		SUB	WP,WP,TOS
 1547 3ba4 02F10102 		ADD	T2,T2,#1
 1548 3ba8 04E0     		B UMMOD2
 1549              	UMMOD1:
 1550 3baa AD1B     		SUBS	WP,WP,TOS 
 1551 3bac 28BF     		IT CS 
 1552 3bae 0132     		ADDCS	T2,T2,#1
 1553 3bb0 00D2     		BCS	UMMOD2
 1554 3bb2 3544     		ADD	WP,WP,TOS
ARM GAS  forth.s 			page 143


 1555              	UMMOD2:
 1556 3bb4 DB18     		ADDS	T3,T3,T3
 1557 3bb6 F0D3     		BCC	UMMOD0
 1558 3bb8 1646     		MOV	TOS,T2
 1559 3bba 3D60     		STR	WP,[DSP]
 1560 3bbc FFF7D4B9 		_NEXT
 1561              	
 1562              	/****************************
 1563              	    FM/MOD	( d n -- r q )
 1564              	 	Signed floored divide 
 1565              		of double by single. 
 1566              		Return mod and quotient.
 1567              	****************************/
 1568 3bc0 883B0000 		_HEADER MSMOD,6,"FM/MOD"
 1568      06464D2F 
 1568      4D4F4400 
 1569 3bcc 504700BF 		_NEST
 1570 3bd0 49330000 		_ADR	DUPP
 1571 3bd4 B9330000 		_ADR	ZLESS
 1572 3bd8 49330000 		_ADR	DUPP
 1573 3bdc B5320000 		_ADR	TOR
 1574 3be0 CF310000 		_QBRAN MMOD1
 1574      F83B0000 
 1575 3be8 2D370000 		_ADR	NEGAT
 1576 3bec B5320000 		_ADR	TOR
 1577 3bf0 15390000 		_ADR	DNEGA
 1578 3bf4 51320000 		_ADR	RFROM
 1579              	MMOD1:
 1580 3bf8 B5320000 		_ADR	TOR
 1581 3bfc 49330000 		_ADR	DUPP
 1582 3c00 B9330000 		_ADR	ZLESS
 1583 3c04 CF310000 		_QBRAN MMOD2
 1583      143C0000 
 1584 3c0c 85320000 		_ADR	RAT
 1585 3c10 85340000 		_ADR	PLUS
 1586              	MMOD2:
 1587 3c14 51320000 		_ADR	RFROM
 1588 3c18 913B0000 		_ADR	UMMOD
 1589 3c1c 51320000 		_ADR	RFROM
 1590 3c20 CF310000 		_QBRAN	MMOD3
 1590      343C0000 
 1591 3c28 59330000 		_ADR	SWAP
 1592 3c2c 2D370000 		_ADR	NEGAT
 1593 3c30 59330000 		_ADR	SWAP
 1594              	MMOD3:   
 1595 3c34 6F2F0000 		_UNNEST
 1596              	
 1597              	/****************************
 1598              		SM/REM (d n1 -- n2 n3 )
 1599              	    symetric signed division 
 1600              		double by single 
 1601              	input:
 1602              		d   signed double 
 1603              		n1  signed single 
 1604              	output: 
 1605              		n2  signed remainder 
 1606              		n3  signed quotient 
ARM GAS  forth.s 			page 144


 1607              	****************************/
 1608 3c38 C43B0000 		_HEADER SMSLSHREM,6,"SM/REM"
 1608      06534D2F 
 1608      52454D00 
 1609 3c44 504700BF 		_NEST 
 1610 3c48 49330000 		_ADR DUPP 
 1611 3c4c B9330000 		_ADR ZLESS 
 1612 3c50 49330000 		_ADR DUPP 
 1613 3c54 B5320000 		_ADR TOR   // divisor sign 
 1614 3c58 CF310000 		_QBRAN 1f 
 1614      643C0000 
 1615 3c60 2D370000 		_ADR NEGAT 
 1616 3c64 89330000 	1:  _ADR OVER 
 1617 3c68 B9330000 		_ADR ZLESS 
 1618 3c6c 49330000 		_ADR DUPP 
 1619 3c70 B5320000 		_ADR TOR  // divident sign 
 1620 3c74 CF310000 		_QBRAN  1f 
 1620      883C0000 
 1621 3c7c B5320000 		_ADR TOR 
 1622 3c80 15390000 		_ADR DNEGA
 1623 3c84 51320000 		_ADR RFROM 
 1624 3c88 913B0000 	1:  _ADR UMMOD  // rem quot  
 1625 3c8c 51320000 		_ADR RFROM 
 1626 3c90 85320000 		_ADR RAT 
 1627 3c94 2D340000 		_ADR XORR
 1628 3c98 CF310000 		_QBRAN 1f
 1628      A43C0000 
 1629 3ca0 2D370000 		_ADR NEGAT 
 1630 3ca4 49330000 	1:  _ADR DUPP 
 1631 3ca8 B9330000 		_ADR ZLESS 
 1632 3cac 51320000 		_ADR RFROM 
 1633 3cb0 2D340000 		_ADR XORR 
 1634 3cb4 CF310000 		_QBRAN 1f 
 1634      C83C0000 
 1635 3cbc 59330000 		_ADR SWAP 
 1636 3cc0 2D370000 		_ADR NEGAT 
 1637 3cc4 59330000 	    _ADR SWAP 
 1638 3cc8 6F2F0000 	1:  _UNNEST 
 1639              	
 1640              	
 1641              	/****************************
 1642              		S>D ( n -- d )
 1643              		convert single to double 
 1644              	*****************************/
 1645 3ccc 3C3C0000 		_HEADER STOD,3,"S>D"
 1645      03533E44 
 1646 3cd4 47F8046D 		_PUSH 
 1647 3cd8 4FEAE676 		ASR TOS,#31
 1648 3cdc FFF744B9 		_NEXT 
 1649              	
 1650              	/****************************
 1651              		D2* ( d -- d<<1 )
 1652              		double * 2 
 1653              	***************************/
 1654 3ce0 D03C0000 		_HEADER D2STAR,3,"D2*"
 1654      0344322A 
 1655 3ce8 3868     		ldr T0,[DSP]
ARM GAS  forth.s 			page 145


 1656 3cea 4000     		lsls T0,#1
 1657 3cec 3860     		str T0,[DSP]
 1658 3cee 4FEA4606 		lsl TOS,#1
 1659 3cf2 46F10006 		adc TOS,#0
 1660 3cf6 FFF737B9 		_NEXT 
 1661              	
 1662              	/****************************
 1663              		D2/  ( d -- d>>1 )
 1664              		double signed divide by 2 
 1665              	*****************************/
 1666 3cfa E43C0000 		_HEADER D2SL,3,"D2/"
 1666      0344322F 
 1666      00BF
 1667 3d04 3868     		ldr T0,[DSP]
 1668 3d06 7610     		asrs TOS,#1
 1669 3d08 4FEA3000 		rrx T0,T0 
 1670 3d0c 3860     		str T0,[DSP]
 1671 3d0e FFF72BB9 		_NEXT 
 1672              	
 1673              	/***************************
 1674              		D/MOD  ( d+ n+ - r+ qd+ )
 1675              		unsigned double division
 1676              		and modulo 
 1677              		output:
 1678              			qd+ = d+ / n+
 1679              			r+ = qd+ - (d+ * n+ )
 1680              	***************************/
 1681 3d12 FE3C0000 		_HEADER DSLMOD,5,"D/MOD"
 1681      05442F4D 
 1681      4F44
 1682 3d1c 3D68     		ldr WP,[DSP]  // d+ high 
 1683 3d1e 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1684 3d20 4FF02002 		mov T2,#32 // shift counter  
 1685 3d24 81EA0101 		eor T1,T1 // quotient T0:T1  
 1686 3d28 25B9     		cbnz WP,1f    
 1687 3d2a 82EA0202 		eor T2,T2 // nos shifting required 
 1688 3d2e 0546     		mov WP,T0 
 1689 3d30 80EA0000 		eor T0,T0 
 1690 3d34 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1691 3d36 15F0004F 	    tst WP,#(1<<31) 
 1692 3d3a 06D1     		bne 2f
 1693 3d3c 4918     		adds T1,T1,T1 
 1694 3d3e 4041     		adcs T0,T0,T0 
 1695 3d40 45EB0505 		adc WP,WP,WP 
 1696 3d44 A2F10102 		sub T2,#1 
 1697 3d48 F4E7     		b 1b 
 1698 3d4a B5FBF6F3 	2:  udiv T3,WP,TOS
 1699 3d4e 41EA0301 		orr T1,T3   // append partial quotient 
 1700 3d52 06FB03F3 		mul T3,TOS
 1701 3d56 A5EB0305 		sub WP,T3 //remainder 
 1702 3d5a 02B1     		cbz T2,8f 
 1703 3d5c EAE7     		b 1b 
 1704 3d5e 7D60     	8:	str WP,[DSP,#4] // remainder 
 1705 3d60 3960     		str T1,[DSP]  // q lo 
 1706 3d62 0646     		mov TOS,T0  // q hi 		
 1707 3d64 FFF700B9 		_NEXT 
 1708              	
ARM GAS  forth.s 			page 146


 1709              	
 1710              	/****************************
 1711              		D/  ( ud u -- udq )
 1712              		divide unsigned double 
 1713              		by unsigned single 
 1714              		return double quotient
 1715              		rounded to nearest integer 
 1716              	****************************/
 1717 3d68 163D0000 		_HEADER DSLASH,2,"D/"
 1717      02442F00 
 1718 3d70 504700BF 		_NEST 
 1719 3d74 49330000 		_ADR DUPP 
 1720 3d78 8F310000 		_DOLIT 1 
 1720      01000000 
 1721 3d80 5D340000 		_ADR RSHIFT 
 1722 3d84 B5320000 		_ADR TOR 
 1723 3d88 1D3D0000 		_ADR DSLMOD 
 1724 3d8c 2D360000 		_ADR ROT 
 1725 3d90 51320000 		_ADR RFROM 
 1726 3d94 59380000 		_ADR GREAT 
 1727 3d98 CF310000 		_QBRAN 9f
 1727      B03D0000 
 1728 3da0 8F310000 		_DOLIT 1 
 1728      01000000 
 1729 3da8 D53C0000 		_ADR STOD 
 1730 3dac 91360000 		_ADR DPLUS 
 1731 3db0 6F2F0000 	9:	_UNNEST 
 1732              	
 1733              	
 1734              	/****************************
 1735              		D* ( d s -- d )
 1736              	    multiply a double 
 1737              		by a single 
 1738              	****************************/
 1739 3db4 6C3D0000 		_HEADER DSTAR,2,"D*"
 1739      02442A00 
 1740              	/*
 1741              		_NEST 
 1742              		_ADR NROT 
 1743              		_ADR DUPP 
 1744              		_ADR TOR 
 1745              		_ADR DABS
 1746              		_ADR SWAP  
 1747              		_ADR ROT   
 1748              		_ADR DUPP
 1749              		_ADR TOR
 1750              		_ADR MSTAR
 1751              		_ADR ROT
 1752              		_ADR RFROM 
 1753              		_ADR STAR 
 1754              		_ADR PLUS
 1755              		_ADR RFROM 
 1756              		_ADR ZLESS 
 1757              		_QBRAN 9f
 1758              		_ADR DNEGA   
 1759              	9:	_UNNEST 
 1760              	*/
ARM GAS  forth.s 			page 147


 1761 3dbc 57F8040B 		ldr T0,[DSP],#4
 1762 3dc0 3968     		ldr T1,[DSP]
 1763 3dc2 3860     		str T0,[DSP] 
 1764 3dc4 83EA0303 		eor T3,T3 
 1765 3dc8 10F0004F 		tst T0,#(1<<31)
 1766 3dcc 02D0     		beq 1f 
 1767              		// DNEGATE 
 1768 3dce 591A     		subs T1,T3,T1  
 1769 3dd0 63EB0000 		sbc T0,T3,T0 
 1770 3dd4 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1771 3dd8 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1772 3ddc 0E44     		add TOS,T1  // TOS:T2 product  
 1773 3dde 3868     		ldr r0,[DSP]
 1774 3de0 10F0004F 		tst T0,#(1<<31)
 1775 3de4 02D0     		beq 2f 
 1776              		// DNEGATE product 
 1777 3de6 9A1A     		subs T2,T3,T2  
 1778 3de8 63EB0606 		sbc TOS,T3,TOS 
 1779 3dec 3A60     	2:  str T2,[DSP]
 1780 3dee FFF7BBB8 		_NEXT 
 1781              	
 1782              	
 1783              	/****************************
 1784              	   /MOD	( n n -- r q )
 1785              		Signed divide. Return
 1786              		mod and quotient.
 1787              	****************************/
 1788 3df2 B83D0000 		_HEADER SLMOD,4,"/MOD"
 1788      042F4D4F 
 1788      4400
 1789 3dfc 504700BF 		_NEST
 1790 3e00 89330000 		_ADR	OVER
 1791 3e04 B9330000 		_ADR	ZLESS
 1792 3e08 59330000 		_ADR	SWAP
 1793 3e0c CD3B0000 		_ADR	MSMOD
 1794 3e10 6F2F0000 		_UNNEST
 1795              	
 1796              	/**************************
 1797              	    MOD	 ( n n -- r )
 1798              	 	Signed divide. Return
 1799              		mod only.
 1800              	**************************/
 1801 3e14 F63D0000 		_HEADER MODD,3,"MOD"
 1801      034D4F44 
 1802 3e1c 504700BF 		_NEST
 1803 3e20 FD3D0000 		_ADR	SLMOD
 1804 3e24 29330000 		_ADR	DROP
 1805 3e28 6F2F0000 		_UNNEST
 1806              	
 1807              	/*************************
 1808              	    /	   ( n n -- q )
 1809              	 	Signed divide. Return
 1810              		quotient only.
 1811              	**************************/
 1812 3e2c 183E0000 		_HEADER SLASH,1,"/"
 1812      012F00BF 
 1813 3e34 504700BF 		_NEST
ARM GAS  forth.s 			page 148


 1814 3e38 FD3D0000 		_ADR	SLMOD
 1815 3e3c 59330000 		_ADR	SWAP
 1816 3e40 29330000 		_ADR	DROP
 1817 3e44 6F2F0000 		_UNNEST
 1818              	
 1819              	//******************************
 1820              	//   */MOD	( n1 n2 n3 -- r q )
 1821              	/*   Multiply n1 and n2, then 
 1822              	   divide by n3. Return 
 1823              	   mod and quotient.
 1824              	******************************/
 1825 3e48 303E0000 		_HEADER SSMOD,5,"*/MOD"
 1825      052A2F4D 
 1825      4F4400BF 
 1826 3e54 504700BF 		_NEST
 1827 3e58 B5320000 		_ADR	TOR
 1828 3e5c CD340000 		_ADR	MSTAR
 1829 3e60 51320000 		_ADR	RFROM
 1830 3e64 CD3B0000 		_ADR	MSMOD
 1831 3e68 6F2F0000 		_UNNEST
 1832              	
 1833              	//*******************************
 1834              	//  */ ( n1 n2 n3 -- q )
 1835              	/* 	Multiply n1 by n2, then 
 1836              		divide by n3. Return quotient
 1837              		only.
 1838              	*******************************/
 1839 3e6c 4C3E0000 		_HEADER STASL,2,"*/"
 1839      022A2F00 
 1840 3e74 504700BF 		_NEST
 1841 3e78 553E0000 		_ADR	SSMOD
 1842 3e7c 59330000 		_ADR	SWAP
 1843 3e80 29330000 		_ADR	DROP
 1844 3e84 6F2F0000 		_UNNEST
 1845              	
 1846              	/*******************
 1847              	  Miscellaneous
 1848              	*******************/
 1849              	
 1850              	/*************************
 1851              		CHAR+ ( a -- a+ )
 1852              		increment a by one 
 1853              		char size unit. 
 1854              	*************************/
 1855 3e88 703E0000 		_HEADER CHARP,5,"CHAR+"
 1855      05434841 
 1855      522B00BF 
 1856 3e94 06F10106 		add TOS,#1
 1857 3e98 FFF766B8 		_NEXT 
 1858              	
 1859              	/*************************
 1860              		CHARS ( n1 -- n1 )
 1861              		address size of 
 1862              		n1 character
 1863              		same on this system 
 1864              	*************************/
 1865 3e9c 8C3E0000 		_HEADER CHARS,5,"CHARS"
ARM GAS  forth.s 			page 149


 1865      05434841 
 1865      525300BF 
 1866 3ea8 FFF75EB8 		_NEXT 
 1867              	
 1868              	
 1869              	
 1870              	/*************************
 1871              		ALIGN ( -- )
 1872              		align data pointer 
 1873              		to cell boundary 
 1874              	************************/
 1875 3eac A03E0000 		_HEADER ALIGN,5,"ALIGN"
 1875      05414C49 
 1875      474E00BF 
 1876 3eb8 E06C     		ldr T0,[UP,#USER_CTOP]
 1877 3eba 00F10300 		add T0,#(CELLL-1)
 1878 3ebe 20F00300 		and T0,#0xFFFFFFFC 
 1879 3ec2 E064     		str T0,[UP,#USER_CTOP]
 1880 3ec4 FFF750B8 		_NEXT 
 1881              	
 1882              	
 1883              	/*************************
 1884              	    ALIGNED	( b -- a )
 1885              	 	Align address to the 
 1886              		cell boundary.
 1887              	**************************/
 1888 3ec8 B03E0000 		_HEADER ALGND,7,"ALIGNED"
 1888      07414C49 
 1888      474E4544 
 1889 3ed4 06F10306 		ADD	TOS,TOS,#3
 1890 3ed8 6FF00305 		MVN	WP,#3
 1891 3edc 06EA0506 		AND	TOS,TOS,WP
 1892 3ee0 FFF742B8 		_NEXT
 1893              	
 1894              	/****************************
 1895              	    >CHAR	( c -- c )
 1896              	 	Filter non-printing 
 1897              		characters.
 1898              	****************************/
 1899 3ee4 CC3E0000 		_HEADER TCHAR,5,">CHAR"
 1899      053E4348 
 1899      415200BF 
 1900 3ef0 504700BF 		_NEST
 1901 3ef4 8F310000 		_DOLIT  0x7F
 1901      7F000000 
 1902 3efc 05340000 		_ADR	ANDD
 1903 3f00 49330000 		_ADR	DUPP	// mask msb
 1904 3f04 41350000 		_ADR	BLANK
 1905 3f08 8F310000 		_DOLIT 	127
 1905      7F000000 
 1906 3f10 653B0000 		_ADR	WITHI	// check for printable
 1907 3f14 19370000 		_ADR	INVER
 1908 3f18 CF310000 		_QBRAN	TCHA1
 1908      2C3F0000 
 1909 3f20 29330000 		_ADR	DROP
 1910 3f24 8F310000 		_DOLIT 	'_'	// replace non-printables
 1910      5F000000 
ARM GAS  forth.s 			page 150


 1911              	TCHA1:
 1912 3f2c 6F2F0000 		  _UNNEST
 1913              	
 1914              	/************************
 1915              	    DEPTH	( -- n )
 1916              	 	Return the depth of
 1917              		the data stack.
 1918              	***********************/
 1919 3f30 E83E0000 		_HEADER DEPTH,5,"DEPTH"
 1919      05444550 
 1919      544800BF 
 1920 3f3c 4FF6B062 		_MOV32 T2,SPP 
 1920      C2F20102 
 1921 3f44 A2EB0702 		SUB	T2,T2,DSP
 1922 3f48 47F8046D 		_PUSH
 1923 3f4c 4FEAA206 		ASR	TOS,T2,#2
 1924 3f50 FFF70AB8 		_NEXT
 1925              	
 1926              	/*****************************
 1927              	    PICK	( ... +n -- ... w )
 1928              	 	Copy the nth stack item 
 1929              		to tos.
 1930              	******************************/
 1931 3f54 343F0000 		_HEADER PICK,4,"PICK"
 1931      04504943 
 1931      4B0000BF 
 1932 3f60 4FEA8606 		lsl TOS,#2 
 1933 3f64 BE59     		ldr TOS,[DSP,TOS]
 1934 3f66 FEF7FFBF 		_NEXT 
 1935              	
 1936              	/*****************************
 1937              		PUT ( xn..x0 w i -- xi...x0 )
 1938              		put value w at position 
 1939              		xi on stack 
 1940              		i in range [0..n] 
 1941              	*****************************/
 1942 3f6a 583F0000 		_HEADER PUT,3,"PUT"
 1942      03505554 
 1942      00BF
 1943 3f74 3546     		mov WP,TOS 
 1944 3f76 57F8046B 		_POP 
 1945 3f7a 4FEA8505 		lsl WP,#2 
 1946 3f7e 7E51     		str TOS,[DSP,WP]
 1947 3f80 57F8046B 		_POP 
 1948 3f84 FEF7F0BF 		_NEXT 
 1949              	
 1950              	/*********************
 1951              	  Memory access
 1952              	*********************/
 1953              	
 1954              	/*************************
 1955              	    HERE	( -- a )
 1956              	 	Return the top of
 1957              		the code dictionary.
 1958              	*************************/
 1959 3f88 6E3F0000 		_HEADER HERE,4,"HERE"
 1959      04484552 
ARM GAS  forth.s 			page 151


 1959      450000BF 
 1960 3f94 504700BF 		_NEST
 1961 3f98 653A0000 		_ADR	CPP
 1962 3f9c 25320000 		_ADR	AT
 1963 3fa0 6F2F0000 		_UNNEST
 1964              	
 1965              	/***************************	
 1966              	    PAD	 ( -- a )
 1967              	 	Return the address of 
 1968              		a temporary buffer.
 1969              	***************************/
 1970 3fa4 8C3F0000 		_HEADER PAD,3,"PAD"
 1970      03504144 
 1971 3fac 504700BF 		_NEST
 1972 3fb0 953F0000 		_ADR	HERE
 1973 3fb4 8F310000 		_DOLIT 80
 1973      50000000 
 1974 3fbc 85340000 		_ADR PLUS 
 1975 3fc0 6F2F0000 		_UNNEST
 1976              	
 1977              	/***********************
 1978              	    TIB	 ( -- a )
 1979              	 	Return the address 
 1980              		of the terminal 
 1981              		input buffer.
 1982              	************************/
 1983 3fc4 A83F0000 		_HEADER TIB,3,"TIB"
 1983      03544942 
 1984 3fcc 47F8046D 		_PUSH
 1985 3fd0 666B     		ldr TOS,[UP,#TIBUF]
 1986 3fd2 FEF7C9BF 		_NEXT
 1987              	
 1988              	/*************************
 1989              		SOURCE-ID, ( -- 0 | -1 )
 1990              	output:
 1991              		-1 	String (via EVALUATE)	
 1992              		0 	User input device
 1993              	*****************************/
 1994 3fd6 C83F0000 		_HEADER SOURCID,9,"SOURCE-ID"
 1994      09534F55 
 1994      5243452D 
 1994      4944
 1995 3fe4 47F8046D 		_PUSH 
 1996 3fe8 A66B     		ldr TOS,[UP,#SRCID]
 1997 3fea FEF7BDBF 		_NEXT 
 1998              	
 1999              	
 2000              	/***********************************
 2001              		SOURCE ( -- a u )
 2002              	output:
 2003              		a  address of transaction buffer 
 2004              		u  # char in buffer 
 2005              	***********************************/
 2006 3fee DA3F0000 		_HEADER SOURCE,6,"SOURCE"
 2006      06534F55 
 2006      52434500 
 2006      00BF
ARM GAS  forth.s 			page 152


 2007 3ffc 504700BF 		_NEST 
 2008 4000 8F310000 		_DOLIT  UPP+SRC 
 2008      30000020 
 2009 4008 E1380000 		_ADR   DAT 
 2010 400c 6F2F0000 		_UNNEST 
 2011              	
 2012              	/*************************
 2013              	    @EXECUTE	( a -- )
 2014              	 	Execute vector stored
 2015              		in address a.
 2016              	*************************/
 2017 4010 F23F0000 		_HEADER ATEXE,8,"@EXECUTE"
 2017      08404558 
 2017      45435554 
 2017      450000BF 
 2018 4020 3500     		MOVS	WP,TOS
 2019 4022 57F8046B 		_POP
 2020 4026 2D68     		LDR	WP,[WP]
 2021 4028 45F00105 		ORR	WP,WP,#1
 2022 402c 18BF     	    IT NE 
 2023 402e 2847     		BXNE	WP
 2024 4030 FEF79ABF 		_NEXT
 2025              	
 2026              	/*******************************
 2027              	    CMOVE	( b1 b2 u -- )
 2028              	 	Copy u bytes from b1 to b2.
 2029              	********************************/
 2030 4034 14400000 		_HEADER CMOVE,5,"CMOVE"
 2030      05434D4F 
 2030      564500BF 
 2031 4040 012E     		CMP TOS,#1 
 2032 4042 0DD4     		BMI CMOV3 
 2033 4044 57F8042B 		LDR	T2,[DSP],#4
 2034 4048 57F8043B 		LDR	T3,[DSP],#4
 2035 404c 03E0     		B CMOV1
 2036              	CMOV0:
 2037 404e 13F8015B 		LDRB	WP,[T3],#1
 2038 4052 02F8015B 		STRB	WP,[T2],#1
 2039              	CMOV1:
 2040 4056 3600     		MOVS	TOS,TOS
 2041 4058 04D0     		BEQ	CMOV2
 2042 405a A6F10106 		SUB	TOS,TOS,#1
 2043 405e F6E7     		B CMOV0
 2044              	CMOV3: 
 2045 4060 07F10807 		ADD  DSP,#2*CELLL  
 2046              	CMOV2:
 2047 4064 57F8046B 		_POP
 2048 4068 FEF77EBF 		_NEXT
 2049              	
 2050              	/*********************************
 2051              		MOVE ( a1 a2 u -- )
 2052              		alias for CMOVE 
 2053              	*********************************/
 2054 406c 38400000 		_HEADER MOVE,4,"MOVE"
 2054      044D4F56 
 2054      450000BF 
 2055 4078 E2E7     		B CMOVE 
ARM GAS  forth.s 			page 153


 2056              	
 2057              	
 2058              	/***************************
 2059              	    WMOVE	( a1 a2 u -- )
 2060              	 	Copy u byte from a1 to a2
 2061              		round u to upper modulo 4 
 2062              	*******************************/
 2063 407a 70400000 		_HEADER WMOVE,5,"WMOVE"
 2063      05574D4F 
 2063      5645
 2064 4084 4FF00400 		MOV T0,#4
 2065 4088 06F10306 		ADD TOS,#3 
 2066 408c 26F00306 		BIC TOS,#3
 2067 4090 57F8041B 		LDR	T1,[DSP],#4 // dest
 2068 4094 57F8042B 		LDR	T2,[DSP],#4 // src 
 2069 4098 8A42     		CMP T2,T1 
 2070 409a 08D5     		BPL MOVE1
 2071 409c 6FF00300 		MOV T0,#-4 
 2072 40a0 3144     		ADD T1,TOS
 2073 40a2 3244     		ADD T2,TOS 
 2074 40a4 01E0     		B MOVE3
 2075              	MOVE0:
 2076 40a6 1568     		LDR	WP,[T2]
 2077 40a8 0D60     		STR	WP,[T1]
 2078              	MOVE3: 
 2079 40aa 0144     		ADD T1,T0 
 2080 40ac 0244     		ADD T2,T0 
 2081              	MOVE1:
 2082 40ae 3600     		MOVS TOS,TOS
 2083 40b0 02D0     		BEQ	MOVE2
 2084 40b2 A6F10406 		SUB	TOS,TOS,#4
 2085 40b6 F6E7     		B MOVE0
 2086              	MOVE2:
 2087 40b8 57F8046B 		_POP
 2088 40bc FEF754BF 		_NEXT
 2089              	
 2090              	/**************************
 2091              	    FILL	( b u c -- )
 2092              	 	Fill u bytes of character
 2093              		c to area beginning at b.
 2094              	******************************/
 2095 40c0 7E400000 		_HEADER FILL,4,"FILL"
 2095      0446494C 
 2095      4C0000BF 
 2096 40cc 03CF     		LDMFD DSP!,{T0,T1} 
 2097 40ce 0000     		MOVS T0,T0 
 2098 40d0 03D0     		BEQ FILL2
 2099              	FILL1:
 2100 40d2 01F8016B 		STRB	TOS,[T1],#1
 2101 40d6 0138     		SUBS	T0,T0,#1
 2102 40d8 FBD1     		BNE FILL1
 2103              	FILL2:
 2104 40da 57F8046B 		_POP
 2105 40de FEF743BF 		_NEXT
 2106              	
 2107              	/*****************************
 2108              	CORE EXTENSION 
ARM GAS  forth.s 			page 154


 2109              		ERASE ( a u -- )
 2110              		fill u bytes with zeros 
 2111              		starting at a 
 2112              	*****************************/
 2113 40e2 C4400000 		_HEADER ERASE,5,"ERASE"
 2113      05455241 
 2113      5345
 2114 40ec 504700BF 		_NEST 
 2115 40f0 49330000 		_ADR	DUPP 
 2116 40f4 C9330000 		_ADR	ZGREAT 
 2117 40f8 CF310000 		_QBRAN	1f 
 2117      10410000 
 2118 4100 8F310000 		_DOLIT	0 
 2118      00000000 
 2119 4108 CD400000 		_ADR	FILL 
 2120 410c 6F2F0000 		_UNNEST 
 2121 4110 55360000 	1:   _ADR	DDROP 
 2122 4114 6F2F0000 		_UNNEST 
 2123              	
 2124              	
 2125              	/*****************************
 2126              	    PACK$	( b u a -- a )
 2127              	 	Build a counted word with
 2128              		u characters from b. 
 2129              		Null fill.
 2130              	*****************************/
 2131 4118 E6400000 		_HEADER PACKS,5,"PACK$"
 2131      05504143 
 2131      4B2400BF 
 2132 4124 504700BF 		_NEST
 2133 4128 D53E0000 		_ADR	ALGND
 2134 412c 49330000 		_ADR	DUPP
 2135 4130 B5320000 		_ADR	TOR		// strings only on cell boundary
 2136 4134 89330000 		_ADR	OVER
 2137 4138 85340000 		_ADR	PLUS
 2138 413c E1340000 		_ADR	ONEP 
 2139 4140 8F310000 		_DOLIT 	0xFFFFFFFC
 2139      FCFFFFFF 
 2140 4148 05340000 		_ADR	ANDD			// count mod cell
 2141 414c 8F310000 		_DOLIT 	0
 2141      00000000 
 2142 4154 59330000 		_ADR	SWAP
 2143 4158 11320000 		_ADR	STORE			// null fill cell
 2144 415c 85320000 		_ADR	RAT
 2145 4160 7D360000 		_ADR	DDUP
 2146 4164 31320000 		_ADR	CSTOR
 2147 4168 E1340000 		_ADR	ONEP			// save count
 2148 416c 59330000 		_ADR	SWAP
 2149 4170 41400000 		_ADR	CMOVE
 2150 4174 51320000 		_ADR	RFROM
 2151 4178 6F2F0000 		_UNNEST   			// move string
 2152              	
 2153              	/***********************************
 2154              	  Numeric output, single precision
 2155              	***********************************/
 2156              	
 2157              	/**************************
ARM GAS  forth.s 			page 155


 2158              	    DIGIT	( u -- c )
 2159              	 	Convert digit u to 
 2160              		a character.
 2161              	***************************/
 2162 417c 1C410000 		_HEADER DIGIT,5,"DIGIT"
 2162      05444947 
 2162      495400BF 
 2163 4188 504700BF 		_NEST
 2164 418c 8F310000 		_DOLIT 9
 2164      09000000 
 2165 4194 89330000 		_ADR	OVER
 2166 4198 25380000 		_ADR	LESS
 2167 419c 8F310000 		_DOLIT	7
 2167      07000000 
 2168 41a4 05340000 		_ADR	ANDD
 2169 41a8 85340000 		_ADR	PLUS
 2170 41ac 8F310000 		_DOLIT	'0'
 2170      30000000 
 2171 41b4 85340000 		_ADR	PLUS 
 2172 41b8 6F2F0000 		_UNNEST
 2173              	
 2174              	/*********************************
 2175              	    EXTRACT	( ud base -- ud c )
 2176              	 	Extract the least significant
 2177              		digit from positive double.
 2178              	**********************************/
 2179 41bc 80410000 		_HEADER EXTRC,7,"EXTRACT"
 2179      07455854 
 2179      52414354 
 2180 41c8 504700BF 		_NEST
 2181 41cc 1D3D0000 		_ADR	DSLMOD
 2182 41d0 2D360000 		_ADR	ROT
 2183 41d4 89410000 		_ADR	DIGIT
 2184 41d8 6F2F0000 		_UNNEST
 2185              	
 2186              	/***************************
 2187              	    <#	  ( -- )
 2188              	 	Initiate the numeric
 2189              		output process.
 2190              	****************************/
 2191 41dc C0410000 		_HEADER BDIGS,2,"<#"
 2191      023C2300 
 2192 41e4 504700BF 		_NEST
 2193 41e8 AD3F0000 		_ADR	PAD
 2194 41ec 393A0000 		_ADR	HLD
 2195 41f0 11320000 		_ADR	STORE
 2196 41f4 6F2F0000 		_UNNEST
 2197              	
 2198              	/*********************************
 2199              	    HOLD	( c -- )
 2200              	 	Insert a character into the 
 2201              		numeric output string.
 2202              	**********************************/
 2203 41f8 E0410000 		_HEADER HOLD,4,"HOLD"
 2203      04484F4C 
 2203      440000BF 
 2204 4204 504700BF 		_NEST
ARM GAS  forth.s 			page 156


 2205 4208 393A0000 		_ADR	HLD
 2206 420c 25320000 		_ADR	AT
 2207 4210 F1340000 		_ADR	ONEM
 2208 4214 49330000 		_ADR	DUPP
 2209 4218 393A0000 		_ADR	HLD
 2210 421c 11320000 		_ADR	STORE
 2211 4220 31320000 		_ADR	CSTOR
 2212 4224 6F2F0000 		_UNNEST
 2213              	
 2214              	/********************************
 2215              	CORE EXTENSION 
 2216              		HOLDS ( c-addr u -- )
 2217              		add string to pictured 
 2218              		numeric output.
 2219              	*********************************/
 2220 4228 FC410000 		_HEADER HOLDS,5,"HOLDS" 
 2220      05484F4C 
 2220      445300BF 
 2221 4234 504700BF 		_NEST 
 2222 4238 393A0000 		_ADR	HLD   
 2223 423c 25320000 		_ADR	AT     // c-addr u a 
 2224 4240 89330000 		_ADR	OVER 
 2225 4244 95340000 		_ADR	SUBB 
 2226 4248 49330000 		_ADR	DUPP 
 2227 424c 393A0000 		_ADR	HLD 
 2228 4250 11320000 		_ADR	STORE
 2229 4254 59330000 		_ADR	SWAP  
 2230 4258 41400000 		_ADR	CMOVE  
 2231 425c 6F2F0000 		_UNNEST 
 2232              	
 2233              	
 2234              	/***********************
 2235              	    #	   ( ud -- ud )
 2236              	 	Extract one digit 
 2237              		from ud and append 
 2238              		the digit to output 
 2239              		string.
 2240              	*************************/
 2241 4260 2C420000 		_HEADER DIG,1,"#"
 2241      012300BF 
 2242 4268 504700BF 		_NEST
 2243 426c A5390000 		_ADR	BASE
 2244 4270 25320000 		_ADR	AT
 2245 4274 C9410000 		_ADR	EXTRC
 2246 4278 05420000 		_ADR	HOLD
 2247 427c 6F2F0000 		_UNNEST
 2248              	
 2249              	/***************************
 2250              	    #S	  ( ud -- 0 )
 2251              	 	Convert ud until all 
 2252              		digits are added to 
 2253              		the output string.
 2254              	***************************/
 2255 4280 64420000 		_HEADER DIGS,2,"#S"
 2255      02235300 
 2256 4288 504700BF 		_NEST
 2257              	DIGS1:
ARM GAS  forth.s 			page 157


 2258 428c 69420000 	    _ADR	DIG
 2259 4290 7D360000 		_ADR	DDUP
 2260 4294 19340000 		_ADR    ORR 
 2261 4298 CF310000 		_QBRAN 	DIGS2
 2261      A8420000 
 2262 42a0 F7310000 		_BRAN	DIGS1
 2262      8C420000 
 2263              	DIGS2:
 2264 42a8 29330000 		 _ADR DROP 
 2265 42ac 6F2F0000 		 _UNNEST
 2266              	
 2267              	/*********************
 2268              	    SIGN	( n -- )
 2269              	 	Add a minus sign
 2270              		to the numeric
 2271              		output string.
 2272              	*********************/
 2273 42b0 84420000 		_HEADER SIGN,4,"SIGN"
 2273      04534947 
 2273      4E0000BF 
 2274 42bc 504700BF 		_NEST
 2275 42c0 B9330000 		_ADR	ZLESS
 2276 42c4 CF310000 		_QBRAN	SIGN1
 2276      D8420000 
 2277 42cc 8F310000 		_DOLIT '-'
 2277      2D000000 
 2278 42d4 05420000 		_ADR	HOLD
 2279              	SIGN1:
 2280 42d8 6F2F0000 		  _UNNEST
 2281              	
 2282              	/*************************
 2283              	    #>  ( w -- b u )
 2284              	 	Prepare the output 
 2285              		word to be TYPE'd.
 2286              	************************/
 2287 42dc B4420000 		_HEADER EDIGS,2,"#>"
 2287      02233E00 
 2288 42e4 504700BF 		_NEST
 2289 42e8 29330000 		_ADR	DROP
 2290 42ec 393A0000 		_ADR	HLD
 2291 42f0 25320000 		_ADR	AT
 2292 42f4 AD3F0000 		_ADR	PAD
 2293 42f8 89330000 		_ADR	OVER
 2294 42fc 95340000 		_ADR	SUBB
 2295 4300 6F2F0000 		_UNNEST
 2296              	
 2297              	/**************************
 2298              	    str	 ( n -- b u )
 2299              	 	Convert a signed 
 2300              		integer to a numeric 
 2301              		string.
 2302              	hidden word used by compiler
 2303              	***************************/
 2304              	STRR:
 2305 4304 504700BF 		_NEST
 2306 4308 D53C0000 		_ADR 	STOD 
 2307 430c 49330000 		_ADR	DUPP
ARM GAS  forth.s 			page 158


 2308 4310 B5320000 		_ADR	TOR
 2309 4314 B1360000 		_ADR	DABS
 2310 4318 E5410000 		_ADR	BDIGS
 2311 431c 89420000 		_ADR	DIGS
 2312 4320 51320000 		_ADR	RFROM
 2313 4324 BD420000 		_ADR	SIGN
 2314 4328 E5420000 		_ADR	EDIGS
 2315 432c 6F2F0000 		_UNNEST
 2316              	
 2317              	/*************************
 2318              	    HEX	 ( -- )
 2319              	 	Use radix 16 as 
 2320              		base for numeric 
 2321              		conversions.
 2322              	*************************/
 2323 4330 E0420000 		_HEADER HEX,3,"HEX"
 2323      03484558 
 2324 4338 504700BF 		_NEST
 2325 433c 8F310000 		_DOLIT 16
 2325      10000000 
 2326 4344 A5390000 		_ADR	BASE
 2327 4348 11320000 		_ADR	STORE
 2328 434c 6F2F0000 		_UNNEST
 2329              	
 2330              	/**************************
 2331              		BIN ( -- )
 2332              		Use radix 2 as 
 2333              		base for numeric 
 2334              		conversion 
 2335              	**************************/
 2336 4350 34430000 		_HEADER BIN,3,"BIN"
 2336      0342494E 
 2337 4358 504700BF 		_NEST 
 2338 435c 8F310000 		_DOLIT 2 
 2338      02000000 
 2339 4364 A5390000 		_ADR BASE 
 2340 4368 11320000 		_ADR STORE
 2341 436c 6F2F0000 		_UNNEST 
 2342              	
 2343              	/************************
 2344              	    DECIMAL	( -- )
 2345              	 	Use radix 10 as base
 2346              		for numeric conversions.
 2347              	*************************/
 2348 4370 54430000 		_HEADER DECIM,7,"DECIMAL"
 2348      07444543 
 2348      494D414C 
 2349 437c 504700BF 		_NEST
 2350 4380 8F310000 		_DOLIT 10
 2350      0A000000 
 2351 4388 A5390000 		_ADR	BASE
 2352 438c 11320000 		_ADR	STORE
 2353 4390 6F2F0000 		_UNNEST
 2354              	
 2355              	/************************************
 2356              	  Numeric input
 2357              	***********************************/
ARM GAS  forth.s 			page 159


 2358              	
 2359              	/***********************************
 2360              	    DIGIT?	( c base -- u t )
 2361              	 	Convert a character to its 
 2362              		numeric value. A flag 
 2363              		indicates success.
 2364              	**********************************/
 2365 4394 74430000 		_HEADER DIGTQ,6,"DIGIT?"
 2365      06444947 
 2365      49543F00 
 2366 43a0 504700BF 		_NEST
 2367 43a4 B5320000 		_ADR	TOR
 2368 43a8 8F310000 		_DOLIT 	'0'
 2368      30000000 
 2369 43b0 95340000 		_ADR	SUBB
 2370 43b4 8F310000 		_DOLIT 9
 2370      09000000 
 2371 43bc 89330000 		_ADR	OVER
 2372 43c0 25380000 		_ADR	LESS
 2373 43c4 CF310000 		_QBRAN	DGTQ1
 2373      EC430000 
 2374 43cc 8F310000 		_DOLIT 7
 2374      07000000 
 2375 43d4 95340000 		_ADR	SUBB
 2376 43d8 49330000 		_ADR	DUPP
 2377 43dc 8F310000 		_DOLIT	10
 2377      0A000000 
 2378 43e4 25380000 		_ADR	LESS
 2379 43e8 19340000 		_ADR	ORR
 2380              	DGTQ1:
 2381 43ec 49330000 		_ADR	DUPP
 2382 43f0 51320000 		_ADR	RFROM
 2383 43f4 0D380000 		_ADR	ULESS
 2384 43f8 6F2F0000 		_UNNEST
 2385              	
 2386              	
 2387              	/*****************************************
 2388              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2389              	  convert unsigned double string 
 2390              	  to double integer adding to ud1 
 2391              	input:
 2392              		ud1  unsiged double 
 2393              		adr1  string address 
 2394              		u1    string length 
 2395              	outpout:
 2396              		ud2   modifield ud1 
 2397              		adr2  point to char not converted 
 2398              		u2    char left in string 
 2399              	**************************************/
 2400 43fc 98430000 		_HEADER TONBR,7,">NUMBER"
 2400      073E4E55 
 2400      4D424552 
 2401 4408 504700BF 		_NEST 
 2402 440c 49330000 		_ADR DUPP 
 2403 4410 CF310000 		_QBRAN 9f 
 2403      78440000 
 2404 4418 89330000 	1: 	_ADR OVER  // d a u a 
ARM GAS  forth.s 			page 160


 2405 441c 45320000 		_ADR CAT   // d  a u c 
 2406 4420 A5390000 		_ADR BASE   
 2407 4424 25320000 		_ADR AT      // d a u c base
 2408 4428 A1430000 		_ADR DIGTQ   // d a u n flag 
 2409 442c CF310000 		_QBRAN 8f
 2409      74440000 
 2410 4434 B5320000 		_ADR TOR   	 
 2411 4438 F1340000 		_ADR ONEM 
 2412 443c 6D330000 		_ADR DSWAP // a u d 
 2413 4440 A5390000 		_ADR BASE 
 2414 4444 25320000 		_ADR AT 
 2415 4448 BD3D0000 		_ADR DSTAR 
 2416 444c 51320000 		_ADR RFROM 
 2417 4450 8F310000 		_DOLIT 0    
 2417      00000000 
 2418 4458 91360000 		_ADR DPLUS 
 2419 445c 6D330000 		_ADR DSWAP 
 2420 4460 59330000 		_ADR SWAP 
 2421 4464 E1340000 		_ADR ONEP
 2422 4468 59330000 		_ADR SWAP  
 2423 446c F7310000 		_BRAN 1b 
 2423      18440000 
 2424 4474 29330000 	8:  _ADR DROP
 2425 4478 6F2F0000 	9:	_UNNEST 
 2426              	
 2427              	
 2428              	/**************************
 2429              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2430              	 check for charcter c 
 2431              	 move pointer if *a==c  
 2432              	**************************/
 2433              	CHARQ:
 2434 447c 7868     	    ldr T0,[DSP,#4]
 2435 447e 10F8011B 	    ldrb T1,[T0],#1 
 2436 4482 3246     	    mov T2,TOS 
 2437 4484 86EA0606 	    eor TOS,TOS
 2438 4488 9142     	    cmp T1,T2
 2439 448a 06D1     	    bne 1f 
 2440 448c 7860     	    str T0,[DSP,#4]
 2441 448e 3868     		ldr T0,[DSP]
 2442 4490 A0F10100 		sub T0,#1 
 2443 4494 3860     		str T0,[DSP]
 2444 4496 6FEA0606 	    mvn TOS,TOS  
 2445 449a FEF765BD 	1:  _NEXT
 2446              	
 2447              	
 2448              	/*********************************
 2449              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2450              	   skip '-'|'+' return -1 if '-' 
 2451              	   else return 0 
 2452              	*********************************/
 2453              	NEGQ: 
 2454 449e 47F8046D 		_PUSH 
 2455 44a2 86EA0606 		eor TOS,TOS // false flag 
 2456 44a6 7868     		ldr T0,[DSP,#4]
 2457 44a8 10F8011B 		ldrb T1,[T0],#1
 2458 44ac 2D29     		cmp T1,#'-' 
ARM GAS  forth.s 			page 161


 2459 44ae 02D0     		beq 1f
 2460 44b0 2B29     		cmp T1,#'+'
 2461 44b2 07D1     		bne 3f 
 2462 44b4 01E0     		b 2f 
 2463 44b6 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2464 44ba 7860     	2:	str T0,[DSP,#4]
 2465 44bc 3868     		ldr T0,[DSP]
 2466 44be A0F10100 		sub T0,#1 
 2467 44c2 3860     		str T0,[DSP]
 2468 44c4 FEF750BD 	3:	_NEXT 
 2469              	
 2470              	
 2471              	
 2472              	/**********************************
 2473              	    INT?	( a -- n T | a F )
 2474              	 	parse string  at 'a' for 
 2475              		integer. Push a flag on TOS.
 2476              		integer form:
 2477              			[-]hex_digit+  | 
 2478              			$[-]hex_digit+ |
 2479              			%[-]bin_digit+ | 
 2480              			[-]dec_digit+ 
 2481              	**********************************/
 2482 44c8 00440000 		_HEADER INTQ,4,"INT?"
 2482      04494E54 
 2482      3F0000BF 
 2483 44d4 504700BF 		_NEST
 2484              	// save BASE 	
 2485 44d8 A5390000 		_ADR	BASE
 2486 44dc 25320000 		_ADR	AT
 2487 44e0 B5320000 		_ADR	TOR
 2488 44e4 8F310000 		_DOLIT	0      // a 0 
 2488      00000000 
 2489 44ec 89330000 		_ADR	OVER   // a 0 a 
 2490 44f0 F9380000 		_ADR	COUNT  // a 0 a+ cnt 
 2491 44f4 8F310000 		_DOLIT  '$' 
 2491      24000000 
 2492 44fc 7D440000 		_ADR    CHARQ 
 2493 4500 CF310000 		_QBRAN  0f 
 2493      14450000 
 2494              	// hexadecimal number 
 2495 4508 39430000 		_ADR    HEX
 2496 450c F7310000 		_BRAN   2f 
 2496      2C450000 
 2497 4514 8F310000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2497      25000000 
 2498 451c 7D440000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2499 4520 CF310000 		_QBRAN  2f
 2499      2C450000 
 2500 4528 59430000 		_ADR	BIN 
 2501              	2: // check if negative number 
 2502 452c 9F440000 		_ADR    NEGQ 
 2503 4530 B5320000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2504 4534 8F310000 		_DOLIT  0
 2504      00000000 
 2505 453c 49330000 		_ADR	DUPP 
 2506 4540 6D330000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
ARM GAS  forth.s 			page 162


 2507 4544 09440000 		_ADR    TONBR // a 0 d a+ cnt 
 2508 4548 CF310000 		_QBRAN  2f
 2508      64450000 
 2509              	    // not an integer 
 2510 4550 51320000 		_ADR RFROM // a 0 d a sign  
 2511 4554 55360000 		_ADR DDROP 
 2512 4558 55360000 		_ADR DDROP 
 2513 455c F7310000 		_BRAN 7f 
 2513      8C450000 
 2514              	2: // valid integer 
 2515 4564 29330000 		_ADR	DROP // a 0 d
 2516 4568 6D330000 		_ADR    DSWAP 
 2517 456c 55360000 		_ADR    DDROP 
 2518 4570 29330000 		_ADR    DROP  // d>s 
 2519 4574 51320000 		_ADR    RFROM // n sign 
 2520 4578 CF310000 		_QBRAN  2f
 2520      84450000 
 2521 4580 2D370000 		_ADR    NEGAT   
 2522 4584 8F310000 	2:	_DOLIT  -1 
 2522      FFFFFFFF 
 2523              	7: // restore BASE 
 2524 458c 51320000 		_ADR	RFROM
 2525 4590 A5390000 		_ADR	BASE
 2526 4594 11320000 		_ADR	STORE
 2527 4598 6F2F0000 		_UNNEST
 2528              	
 2529              	
 2530              	/********************************
 2531              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2532              	    parse number, integer or float 
 2533              	    if not a number return ( a 0 ) 
 2534              	    if integer return ( int -1 ) 
 2535              	    if float return ( float -2 )
 2536              	**********************************/
 2537 459c CC440000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2537      074E554D 
 2537      4245523F 
 2538 45a8 504700BF 	    _NEST 
 2539 45ac D5440000 	    _ADR INTQ
 2540 45b0 95350000 	    _ADR QDUP 
 2541 45b4 CF310000 	    _QBRAN 2f 
 2541      C0450000 
 2542 45bc 6F2F0000 	    _UNNEST 
 2543 45c0 8D280000 	2:  _ADR FLOATQ
 2544 45c4 6F2F0000 	    _UNNEST 
 2545              	
 2546              	
 2547              	/********************
 2548              	  console I/O
 2549              	********************/
 2550              	
 2551              	/**********************
 2552              	    SPACE	( -- )
 2553              	 	Send the blank 
 2554              		character to 
 2555              		the output device.
 2556              	************************/
ARM GAS  forth.s 			page 163


 2557 45c8 A0450000 		_HEADER SPACE,5,"SPACE"
 2557      05535041 
 2557      434500BF 
 2558 45d4 504700BF 		_NEST
 2559 45d8 41350000 		_ADR	BLANK
 2560 45dc 31300000 		_ADR	EMIT
 2561 45e0 6F2F0000 		_UNNEST
 2562              	
 2563              	/***************************
 2564              	    SPACES	( +n -- )
 2565              	 	Send n spaces to the 
 2566              		output device.
 2567              	****************************/
 2568 45e4 CC450000 		_HEADER SPACS,6,"SPACES"
 2568      06535041 
 2568      43455300 
 2569 45f0 504700BF 		_NEST
 2570 45f4 8F310000 		_DOLIT	0
 2570      00000000 
 2571 45fc 75380000 		_ADR	MAX
 2572 4600 B5320000 		_ADR	TOR
 2573 4604 F7310000 		_BRAN	CHAR2
 2573      10460000 
 2574              	CHAR1:
 2575 460c D5450000 		_ADR	SPACE
 2576              	CHAR2:
 2577 4610 B1310000 		_DONXT	CHAR1
 2577      0C460000 
 2578 4618 6F2F0000 		_UNNEST
 2579              	
 2580              	/***********************
 2581              	    TYPE	( b u -- )
 2582              	 	Output u characters 
 2583              		from b.
 2584              	************************/
 2585 461c E8450000 		_HEADER TYPEE,4,"TYPE"
 2585      04545950 
 2585      450000BF 
 2586 4628 504700BF 		_NEST
 2587 462c B5320000 		_ADR  TOR   // ( a+1 -- R: u )
 2588 4630 F7310000 		_BRAN	TYPE2
 2588      44460000 
 2589              	TYPE1:  
 2590 4638 F9380000 		_ADR  COUNT
 2591 463c F13E0000 		_ADR TCHAR
 2592 4640 31300000 		_ADR EMIT
 2593              	TYPE2:  
 2594 4644 B1310000 		_DONXT	TYPE1
 2594      38460000 
 2595 464c 29330000 		_ADR	DROP
 2596 4650 6F2F0000 		_UNNEST
 2597              	
 2598              	/***************************
 2599              		\TYPE ( b u )
 2600              		like TYPE but without 
 2601              		filtering 
 2602              	***************************/
ARM GAS  forth.s 			page 164


 2603 4654 20460000 		_HEADER SLTYPE,5,"\\TYPE"
 2603      055C5459 
 2603      504500BF 
 2604 4660 504700BF 		_NEST 
 2605 4664 B5320000 		_ADR	TOR 
 2606 4668 F7310000 		_BRAN	2f 
 2606      78460000 
 2607 4670 F9380000 	1:	_ADR	COUNT 
 2608 4674 31300000 		_ADR	EMIT 
 2609 4678 B1310000 	2:  _DONXT	1b 
 2609      70460000 
 2610 4680 29330000 		_ADR	DROP 
 2611 4684 6F2F0000 		_UNNEST 
 2612              	
 2613              	
 2614              	
 2615              	/***************************
 2616              	    CR	  ( -- )
 2617              	 	Output a carriage return
 2618              		and a line feed.
 2619              	****************************/
 2620 4688 58460000 		_HEADER CR,2,"CR"
 2620      02435200 
 2621 4690 504700BF 		_NEST
 2622 4694 8F310000 		_DOLIT	CRR
 2622      0D000000 
 2623 469c 31300000 		_ADR	EMIT
 2624 46a0 8F310000 		_DOLIT	LF
 2624      0A000000 
 2625 46a8 31300000 		_ADR	EMIT
 2626 46ac 6F2F0000 		_UNNEST
 2627              	
 2628              	/******************************************
 2629              	  do_$	( -- a u )
 2630              	  Return the address of a compiled string.
 2631              	  adjust return address to skip over it.
 2632              	hidden word used by compiler. 
 2633              	******************************************/
 2634              	DOSTR:
 2635 46b0 504700BF 		_NEST     
 2636              	/* compiled string address is 2 levels deep */
 2637 46b4 51320000 		_ADR	RFROM	// { -- a1 }
 2638 46b8 51320000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2639 46bc 49330000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2640 46c0 F9380000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2641 46c4 85340000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2642 46c8 D53E0000 		_ADR	ALGND	//  end of string
 2643              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2644 46cc B5320000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2645 46d0 59330000 		_ADR	SWAP	//  count tugged
 2646 46d4 B5320000 		_ADR	TOR     //  ( -- a2) is string address
 2647 46d8 F9380000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2648 46dc 6F2F0000 		_UNNEST
 2649              	
 2650              	/******************************************
 2651              	    $"|	( -- a u )
 2652              	 	Run time routine compiled by _". 
ARM GAS  forth.s 			page 165


 2653              		Return address of a compiled string.
 2654              	hidden word used by compiler
 2655              	*****************************************/
 2656              	STRQP:
 2657 46e0 504700BF 		_NEST
 2658 46e4 B1460000 		_ADR	DOSTR
 2659 46e8 6F2F0000 		_UNNEST			// force a call to dostr
 2660              	
 2661              	
 2662              	/**********************
 2663              	    ."|	( -- )
 2664              	 	Run time routine of ." 
 2665              		Output a compiled string.
 2666              	hidden word used by compiler
 2667              	*****************************/
 2668              	DOTQP:
 2669 46ec 504700BF 		_NEST
 2670 46f0 B1460000 		_ADR	DOSTR
 2671 46f4 29460000 		_ADR	TYPEE 
 2672 46f8 6F2F0000 		_UNNEST
 2673              	
 2674              	/*************************
 2675              		LPAD  ( n+ -- )
 2676              		emit n spaceS + 
 2677              		base character  
 2678              		16 -> $
 2679              		 2 -> %
 2680              		 other -> none 
 2681              	*************************/
 2682              	LPAD:
 2683 46fc 504700BF 		_NEST 
 2684 4700 BD390000 		_ADR BCHR 
 2685 4704 25320000 		_ADR  AT 
 2686 4708 CF310000 		_QBRAN 3f 
 2686      74470000 
 2687 4710 A5390000 		_ADR BASE 
 2688 4714 25320000 		_ADR AT 
 2689 4718 49330000 		_ADR DUPP 
 2690 471c 8F310000 		_DOLIT 16
 2690      10000000 
 2691 4724 CD370000 		_ADR EQUAL 
 2692 4728 CF310000 		_QBRAN 1f
 2692      50470000 
 2693 4730 29330000 		_ADR DROP 
 2694 4734 8F310000 		_DOLIT '$'
 2694      24000000 
 2695 473c 59330000 	0:	_ADR  SWAP 
 2696 4740 F1340000 		_ADR  ONEM 
 2697 4744 F1450000 		_ADR  SPACS 
 2698 4748 31300000 		_ADR  EMIT 
 2699 474c 6F2F0000 		_UNNEST 
 2700 4750 8F310000 	1:  _DOLIT 2 
 2700      02000000 
 2701 4758 CD370000 		_ADR EQUAL 
 2702 475c CF310000 		_QBRAN 3f
 2702      74470000 
 2703 4764 8F310000 		_DOLIT '%'
ARM GAS  forth.s 			page 166


 2703      25000000 
 2704 476c F7310000 		_BRAN 0b   	
 2704      3C470000 
 2705 4774 F1450000 	3:	_ADR  SPACS 
 2706 4778 6F2F0000 		_UNNEST 
 2707              	
 2708              	
 2709              	/******************************
 2710              	    .R	  ( n +n -- )
 2711              	 	Display an integer in a 
 2712              		field of n columns, 
 2713              		right justified.
 2714              	*******************************/
 2715 477c 8C460000 		_HEADER DOTR,2,".R"
 2715      022E5200 
 2716 4784 504700BF 		_NEST
 2717 4788 B5320000 		_ADR	TOR
 2718 478c D53C0000 		_ADR    STOD 
 2719 4790 6D480000 		_ADR	DTOA 
 2720 4794 51320000 		_ADR	RFROM
 2721 4798 89330000 		_ADR	OVER
 2722 479c 95340000 		_ADR	SUBB
 2723 47a0 FD460000 		_ADR    LPAD  
 2724 47a4 29460000 		_ADR	TYPEE
 2725 47a8 6F2F0000 		_UNNEST
 2726              	
 2727              	
 2728              	/*************************
 2729              	    U.R	 ( u +n -- )
 2730              	 	Display an unsigned 
 2731              		integer in n column, 
 2732              		right justified.
 2733              	***************************/
 2734 47ac 80470000 		_HEADER UDOTR,3,"U.R"
 2734      03552E52 
 2735 47b4 504700BF 		_NEST
 2736 47b8 B5320000 		_ADR    TOR 
 2737 47bc 8F310000 		_DOLIT  0
 2737      00000000 
 2738 47c4 6D480000 		_ADR    DTOA 
 2739 47c8 51320000 		_ADR	RFROM
 2740 47cc 89330000 		_ADR	OVER
 2741 47d0 95340000 		_ADR	SUBB
 2742 47d4 FD460000 		_ADR    LPAD  
 2743 47d8 29460000 		_ADR	TYPEE
 2744 47dc 6F2F0000 		_UNNEST
 2745              	
 2746              	
 2747              	/************************
 2748              	    U.	  ( u -- )
 2749              	 	Display an unsigned 
 2750              		integer in free format.
 2751              	***************************/
 2752 47e0 B0470000 		_HEADER UDOT,2,"U."
 2752      02552E00 
 2753 47e8 504700BF 		_NEST
 2754 47ec 8F310000 		_DOLIT  0 
ARM GAS  forth.s 			page 167


 2754      00000000 
 2755 47f4 E5410000 		_ADR	BDIGS
 2756 47f8 89420000 		_ADR	DIGS
 2757 47fc E5420000 		_ADR	EDIGS
 2758 4800 8F310000 		_DOLIT  1 
 2758      01000000 
 2759 4808 FD460000 		_ADR	LPAD  
 2760 480c 29460000 		_ADR	TYPEE
 2761 4810 6F2F0000 		_UNNEST
 2762              	
 2763              	
 2764              	/************************
 2765              	    .	   ( w -- )
 2766              	 	Display an integer 
 2767              		in free format, 
 2768              		preceeded by a space.
 2769              	**************************/
 2770 4814 E4470000 		_HEADER DOT,1,"."
 2770      012E00BF 
 2771 481c 504700BF 		_NEST
 2772 4820 D5450000 		_ADR    SPACE 
 2773 4824 A5390000 		_ADR	BASE
 2774 4828 25320000 		_ADR	AT
 2775 482c 8F310000 	1:	_DOLIT  10
 2775      0A000000 
 2776 4834 2D340000 		_ADR	XORR	// decimal base?
 2777 4838 CF310000 		_QBRAN	DOT1
 2777      48480000 
 2778 4840 E9470000 		_ADR	UDOT    // no,display unsigned
 2779 4844 6F2F0000 		_UNNEST			
 2780              	DOT1:
 2781 4848 D53C0000 		_ADR    STOD 
 2782 484c 6D480000 	    _ADR	DTOA
 2783 4850 8F310000 		_DOLIT  1 
 2783      01000000 
 2784 4858 FD460000 		_ADR	LPAD  
 2785 485c 29460000 	1:	_ADR	TYPEE
 2786 4860 6F2F0000 		_UNNEST			// yes, display signed
 2787              	
 2788              	
 2789              	/*************************
 2790              	  D>A ( d -- p u )
 2791              	  convert double integer to 
 2792              	  ASCII string in pad  
 2793              	input:
 2794              		d    int64 to convert 
 2795              	output:
 2796              		p     pointer to string  
 2797              		u     string length 
 2798              	**************************/
 2799 4864 18480000 		_HEADER DTOA,3,"D>A" 
 2799      03443E41 
 2800 486c 504700BF 		_NEST
 2801 4870 49330000 	    _ADR DUPP 
 2802 4874 B5320000 		_ADR TOR 
 2803 4878 B1360000 		_ADR DABS 
 2804 487c E5410000 		_ADR BDIGS
ARM GAS  forth.s 			page 168


 2805 4880 89420000 		_ADR DIGS 
 2806 4884 51320000 		_ADR RFROM 
 2807 4888 BD420000 		_ADR SIGN  
 2808 488c E5420000 		_ADR EDIGS 
 2809 4890 6F2F0000 		_UNNEST 
 2810              	
 2811              	
 2812              	/*************************
 2813              	   D. ( d -- )
 2814              	   display double integer 
 2815              	**************************/
 2816 4894 68480000 		_HEADER DDOT,2,"D."
 2816      02442E00 
 2817 489c 504700BF 		_NEST
 2818 48a0 D5450000 		_ADR SPACE 
 2819 48a4 6D480000 		_ADR DTOA 
 2820 48a8 8F310000 		_DOLIT 1
 2820      01000000 
 2821 48b0 FD460000 		_ADR LPAD 
 2822 48b4 29460000 		_ADR TYPEE
 2823 48b8 6F2F0000 		_UNNEST 
 2824              	
 2825              	/**************************
 2826              		UD. ( d -- )
 2827              		display unsigned double
 2828              	**************************/
 2829 48bc 98480000 		_HEADER UDDOT,3,"UD."
 2829      0355442E 
 2830 48c4 504700BF 		_NEST
 2831 48c8 D5450000 		_ADR SPACE 
 2832 48cc E5410000 		_ADR BDIGS
 2833 48d0 89420000 		_ADR DIGS 
 2834 48d4 E5420000 		_ADR EDIGS 
 2835 48d8 8F310000 		_DOLIT 1
 2835      01000000 
 2836 48e0 FD460000 		_ADR LPAD 
 2837 48e4 29460000 		_ADR TYPEE
 2838 48e8 6F2F0000 		_UNNEST 
 2839              	
 2840              	
 2841              	
 2842              	/***********************
 2843              		H. ( w -- )
 2844              		display integer 
 2845              		in hexadecimal 
 2846              	*********************/
 2847 48ec C0480000 		_HEADER HDOT,2,"H."
 2847      02482E00 
 2848 48f4 504700BF 		_NEST 
 2849 48f8 A5390000 		_ADR BASE
 2850 48fc 25320000 		_ADR AT 
 2851 4900 59330000 		_ADR SWAP
 2852 4904 39430000 		_ADR HEX
 2853 4908 8F310000 		_DOLIT 0 
 2853      00000000 
 2854 4910 E5410000 		_ADR BDIGS
 2855 4914 89420000 		_ADR DIGS
ARM GAS  forth.s 			page 169


 2856 4918 E5420000 		_ADR EDIGS
 2857 491c D5450000 		_ADR SPACE
 2858 4920 8F310000 		_DOLIT '$'
 2858      24000000 
 2859 4928 31300000 		_ADR EMIT 
 2860 492c 29460000 		_ADR TYPEE
 2861 4930 A5390000 		_ADR BASE
 2862 4934 11320000 		_ADR STORE  
 2863 4938 6F2F0000 		_UNNEST 
 2864              	
 2865              	
 2866              	/***********************
 2867              	    ?	   ( a -- )
 2868              	 	Display the contents
 2869              		in a memory cell.
 2870              	*************************/
 2871 493c F0480000 		_HEADER QUEST,1,"?"
 2871      013F00BF 
 2872 4944 504700BF 		_NEST
 2873 4948 25320000 		_ADR	AT
 2874 494c 1D480000 		_ADR	DOT
 2875 4950 6F2F0000 		_UNNEST
 2876              	
 2877              	/**************
 2878              	  Parsing
 2879              	***************/
 2880              	
 2881              	/*********************************************
 2882              	    parse	( b u c -- b u delta //  string> )
 2883              	 	Scan word delimited by c. 
 2884              		Return found string and its offset.
 2885              	hidden word used by PARSE
 2886              	**********************************************/
 2887              	PARS:
 2888 4954 504700BF 		_NEST
 2889 4958 C9390000 		_ADR	TEMP
 2890 495c 11320000 		_ADR	STORE
 2891 4960 89330000 		_ADR	OVER
 2892 4964 B5320000 		_ADR	TOR
 2893 4968 49330000 		_ADR	DUPP
 2894 496c CF310000 		_QBRAN	PARS8
 2894      684A0000 
 2895 4974 F1340000 		_ADR	ONEM
 2896 4978 C9390000 		_ADR	TEMP
 2897 497c 25320000 		_ADR	AT
 2898 4980 41350000 		_ADR	BLANK
 2899 4984 CD370000 		_ADR	EQUAL
 2900 4988 CF310000 		_QBRAN	PARS3
 2900      DC490000 
 2901 4990 B5320000 		_ADR	TOR
 2902              	PARS1:
 2903 4994 41350000 		_ADR	BLANK
 2904 4998 89330000 		_ADR	OVER
 2905 499c 45320000 		_ADR	CAT	 // skip leading blanks 
 2906 49a0 95340000 		_ADR	SUBB
 2907 49a4 B9330000 		_ADR	ZLESS
 2908 49a8 19370000 		_ADR	INVER
ARM GAS  forth.s 			page 170


 2909 49ac CF310000 		_QBRAN	PARS2
 2909      D8490000 
 2910 49b4 E1340000 		_ADR	ONEP
 2911 49b8 B1310000 		_DONXT	PARS1
 2911      94490000 
 2912 49c0 51320000 		_ADR	RFROM
 2913 49c4 29330000 		_ADR	DROP
 2914 49c8 8F310000 		_DOLIT	0
 2914      00000000 
 2915 49d0 49330000 		_ADR	DUPP
 2916 49d4 6F2F0000 		_UNNEST
 2917              	PARS2:
 2918 49d8 51320000 		_ADR	RFROM
 2919              	PARS3:
 2920 49dc 89330000 		_ADR	OVER
 2921 49e0 59330000 		_ADR	SWAP
 2922 49e4 B5320000 		_ADR	TOR
 2923              	PARS4:
 2924 49e8 C9390000 		_ADR	TEMP
 2925 49ec 25320000 		_ADR	AT
 2926 49f0 89330000 		_ADR	OVER
 2927 49f4 45320000 		_ADR	CAT
 2928 49f8 95340000 		_ADR	SUBB // scan for delimiter
 2929 49fc C9390000 		_ADR	TEMP
 2930 4a00 25320000 		_ADR	AT
 2931 4a04 41350000 		_ADR	BLANK
 2932 4a08 CD370000 		_ADR	EQUAL
 2933 4a0c CF310000 		_QBRAN	PARS5
 2933      184A0000 
 2934 4a14 B9330000 		_ADR	ZLESS
 2935              	PARS5:
 2936 4a18 CF310000 		_QBRAN	PARS6
 2936      3C4A0000 
 2937 4a20 E1340000 		_ADR	ONEP
 2938 4a24 B1310000 		_DONXT	PARS4
 2938      E8490000 
 2939 4a2c 49330000 		_ADR	DUPP
 2940 4a30 B5320000 		_ADR	TOR
 2941 4a34 F7310000 		_BRAN	PARS7
 2941      504A0000 
 2942              	PARS6:
 2943 4a3c 51320000 		_ADR	RFROM
 2944 4a40 29330000 		_ADR	DROP
 2945 4a44 49330000 		_ADR	DUPP
 2946 4a48 E1340000 		_ADR	ONEP
 2947 4a4c B5320000 		_ADR	TOR
 2948              	PARS7:
 2949 4a50 89330000 		_ADR	OVER
 2950 4a54 95340000 		_ADR	SUBB
 2951 4a58 51320000 		_ADR	RFROM
 2952 4a5c 51320000 		_ADR	RFROM
 2953 4a60 95340000 		_ADR	SUBB
 2954 4a64 6F2F0000 		_UNNEST
 2955              	PARS8:
 2956 4a68 89330000 		_ADR	OVER
 2957 4a6c 51320000 		_ADR	RFROM
 2958 4a70 95340000 		_ADR	SUBB
ARM GAS  forth.s 			page 171


 2959 4a74 6F2F0000 		_UNNEST
 2960              	
 2961              	/************************************
 2962              	 CORE EXTENSION 
 2963              	    PARSE	( c -- b u //  string> )
 2964              	 	Scan input stream and return 
 2965              		counted string delimited by c.
 2966              	************************************/
 2967 4a78 40490000 		_HEADER PARSE,5,"PARSE"
 2967      05504152 
 2967      534500BF 
 2968 4a84 504700BF 		_NEST
 2969 4a88 B5320000 		_ADR	TOR
 2970 4a8c CD3F0000 		_ADR	TIB
 2971 4a90 F5390000 		_ADR	INN
 2972 4a94 25320000 		_ADR	AT
 2973 4a98 85340000 		_ADR	PLUS			// current input buffer pointer
 2974 4a9c 0D3A0000 		_ADR	NTIB
 2975 4aa0 25320000 		_ADR	AT
 2976 4aa4 F5390000 		_ADR	INN
 2977 4aa8 25320000 		_ADR	AT
 2978 4aac 95340000 		_ADR	SUBB			// remaining count
 2979 4ab0 51320000 		_ADR	RFROM
 2980 4ab4 55490000 		_ADR	PARS
 2981 4ab8 F5390000 		_ADR	INN
 2982 4abc A5380000 		_ADR	PSTOR
 2983 4ac0 6F2F0000 		_UNNEST
 2984              	
 2985              	/************************************
 2986              	 CORE EXTENSION 
 2987              		PARSE-NAME ( -- b u )
 2988              		space delimited parse input 
 2989              		buffer 
 2990              	*************************************/
 2991 4ac4 7C4A0000 		_HEADER PARSENAME,10,"PARSE-NAME"
 2991      0A504152 
 2991      53452D4E 
 2991      414D4500 
 2992 4ad4 504700BF 		_NEST 
 2993 4ad8 41350000 		_ADR	BLANK  
 2994 4adc 854A0000 		_ADR	PARSE 
 2995 4ae0 6F2F0000 		_UNNEST 
 2996              	
 2997              	
 2998              	/*******************************
 2999              	    .(	  ( -- )
 3000              	 	Output following string 
 3001              		up to next ) .
 3002              	******************************/
 3003 4ae4 C84A0000 		_HEADER DOTPR,IMEDD+2,".("
 3003      822E2800 
 3004 4aec 504700BF 		_NEST
 3005 4af0 8F310000 		_DOLIT	')'
 3005      29000000 
 3006 4af8 854A0000 		_ADR	PARSE
 3007 4afc 29460000 		_ADR	TYPEE
 3008 4b00 6F2F0000 		_UNNEST
ARM GAS  forth.s 			page 172


 3009              	
 3010              	/************************
 3011              	    (	   ( -- )
 3012              	 	Ignore following 
 3013              		string up to next )
 3014              		A comment.
 3015              	************************/
 3016 4b04 E84A0000 		_HEADER PAREN,IMEDD+1,"("
 3016      812800BF 
 3017 4b0c 504700BF 		_NEST
 3018 4b10 8F310000 		_DOLIT	')'
 3018      29000000 
 3019 4b18 854A0000 		_ADR	PARSE
 3020 4b1c 55360000 		_ADR	DDROP
 3021 4b20 6F2F0000 		_UNNEST
 3022              	
 3023              	/*******************
 3024              	    \	   ( -- )
 3025              	 	Ignore following 
 3026              		text till the 
 3027              		end of line.
 3028              	********************/
 3029 4b24 084B0000 		_HEADER BKSLA,IMEDD+1,"\\"
 3029      815C00BF 
 3030 4b2c 504700BF 		_NEST
 3031 4b30 0D3A0000 		_ADR	NTIB
 3032 4b34 25320000 		_ADR	AT
 3033 4b38 F5390000 		_ADR	INN
 3034 4b3c 11320000 		_ADR	STORE
 3035 4b40 6F2F0000 		_UNNEST
 3036              	
 3037              	/******************************
 3038              	    CHAR	( -- c )
 3039              	 	Parse next word and
 3040              		return its first character.
 3041              	*******************************/
 3042 4b44 284B0000 		_HEADER CHAR,4,"CHAR"
 3042      04434841 
 3042      520000BF 
 3043 4b50 504700BF 		_NEST
 3044 4b54 41350000 		_ADR	BLANK
 3045 4b58 854A0000 		_ADR	PARSE
 3046 4b5c 29330000 		_ADR	DROP
 3047 4b60 45320000 		_ADR	CAT
 3048 4b64 6F2F0000 		_UNNEST
 3049              	
 3050              	/**********************************
 3051              		[CHAR] ( -- c )
 3052              		immediate version of CHAR 
 3053              	**********************************/
 3054 4b68 484B0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 3054      C65B4348 
 3054      41525D00 
 3055 4b74 504700BF 		_NEST 
 3056 4b78 514B0000 		_ADR CHAR
 3057 4b7c D9540000 		_ADR LITER 
 3058 4b80 6F2F0000 		_UNNEST 
ARM GAS  forth.s 			page 173


 3059              	
 3060              	/**********************************
 3061              	    WORD	( c -- a //  string> )
 3062              	 	Parse a word from input stream
 3063              		and copy it to code dictionary.
 3064              	***********************************/
 3065 4b84 6C4B0000 		_HEADER WORDD,4,"WORD"
 3065      04574F52 
 3065      440000BF 
 3066 4b90 504700BF 		_NEST
 3067 4b94 854A0000 		_ADR	PARSE
 3068 4b98 953F0000 		_ADR	HERE
 3069 4b9c 21350000 		_ADR	CELLP
 3070 4ba0 25410000 		_ADR	PACKS
 3071 4ba4 6F2F0000 		_UNNEST
 3072              	
 3073              	/********************************
 3074              	    TOKEN	( -- a //  string> )
 3075              	 	Parse a word from input 
 3076              		stream and copy it to 
 3077              		name dictionary.
 3078              	*********************************/
 3079 4ba8 884B0000 		_HEADER TOKEN,5,"TOKEN"
 3079      05544F4B 
 3079      454E00BF 
 3080 4bb4 504700BF 		_NEST
 3081 4bb8 41350000 		_ADR	BLANK
 3082 4bbc 914B0000 		_ADR	WORDD
 3083 4bc0 B54D0000 		_ADR	UPPER 
 3084 4bc4 6F2F0000 		_UNNEST
 3085              	
 3086              	/**********************
 3087              	  Dictionary search
 3088              	***********************/
 3089              	
 3090              	/*************************
 3091              	    >CFA	( nfa -- cfa )
 3092              	 	Return a code field address
 3093              		given a name field address.
 3094              	**************************/
 3095 4bc8 AC4B0000 		_HEADER TOCFA,4,">CFA"
 3095      043E4346 
 3095      410000BF 
 3096 4bd4 504700BF 		_NEST
 3097 4bd8 F9380000 		_ADR	COUNT
 3098 4bdc 8F310000 		_DOLIT	0x1F
 3098      1F000000 
 3099 4be4 05340000 		_ADR	ANDD
 3100 4be8 85340000 		_ADR	PLUS
 3101 4bec D53E0000 		_ADR	ALGND
 3102 4bf0 8F310000 		_DOLIT  1
 3102      01000000 
 3103 4bf8 19340000 		_ADR    ORR    // set thum bit 
 3104 4bfc 6F2F0000 		_UNNEST
 3105              	
 3106              	/***************************************
 3107              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
ARM GAS  forth.s 			page 174


 3108              	 	Compare u bytes in two strings. 
 3109              		Return 0 if identical.
 3110              	
 3111              	  Picatout 2020-12-01, 
 3112              	    Because of problem with .align 
 3113              		directive that doesn't fill 
 3114              		with zero's I had to change 
 3115              		the "SAME?" and "SEARCH" 
 3116              	 	words  to do a byte by byte comparison. 
 3117              	****************************************/
 3118 4c00 CC4B0000 		_HEADER SAMEQ,5,"SAME?"
 3118      0553414D 
 3118      453F00BF 
 3119 4c0c 504700BF 		_NEST
 3120 4c10 B5320000 		_ADR	TOR
 3121 4c14 F7310000 		_BRAN	SAME2
 3121      584C0000 
 3122              	SAME1:
 3123 4c1c 89330000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 3124 4c20 85320000 		_ADR	RAT   // a1 a2 a1 u 
 3125 4c24 85340000 		_ADR	PLUS  // a1 a2 a1+u 
 3126 4c28 45320000 		_ADR	CAT	   // a1 a2 c1    		
 3127 4c2c 89330000 		_ADR	OVER  // a1 a2 c1 a2 
 3128 4c30 85320000 		_ADR	RAT    
 3129 4c34 85340000 		_ADR	PLUS    
 3130 4c38 45320000 		_ADR	CAT	  // a1 a2 c1 c2
 3131 4c3c 95340000 		_ADR	SUBB  
 3132 4c40 95350000 		_ADR	QDUP
 3133 4c44 CF310000 		_QBRAN	SAME2
 3133      584C0000 
 3134 4c4c 51320000 		_ADR	RFROM
 3135 4c50 29330000 		_ADR	DROP
 3136 4c54 6F2F0000 		_UNNEST	// strings not equal
 3137              	SAME2:
 3138 4c58 B1310000 		_DONXT	SAME1
 3138      1C4C0000 
 3139 4c60 8F310000 		_DOLIT	0
 3139      00000000 
 3140 4c68 6F2F0000 		_UNNEST	// strings equal
 3141              	
 3142              	/***********************************
 3143              	    SEARCH	( a na -- ca na | a F )
 3144              	 	Search a vocabulary for a string.
 3145              		Return ca and na if succeeded.
 3146              	hidden word used by NAME?
 3147              	
 3148              	  Picatout 2020-12-01,  
 3149              		 Modified from original. 
 3150              	   See comment for word "SAME?" 
 3151              	************************************/
 3152              	SEARCH:
 3153 4c6c 504700BF 		_NEST
 3154 4c70 59330000 		_ADR	SWAP			// na a	
 3155 4c74 F9380000 		_ADR	COUNT			// na a+1 count
 3156 4c78 49330000 		_ADR	DUPP 
 3157 4c7c C9390000 		_ADR	TEMP
 3158 4c80 11320000 		_ADR	STORE			// na a+1 count 
ARM GAS  forth.s 			page 175


 3159 4c84 B5320000 		_ADR  TOR		// na a+1  R: count  
 3160 4c88 59330000 		_ADR	SWAP			// a+1 na
 3161              	SEARCH1:
 3162 4c8c 49330000 		_ADR	DUPP			// a+1 na na
 3163 4c90 CF310000 		_QBRAN	SEARCH6	// end of vocabulary
 3163      E44C0000 
 3164 4c98 49330000 		_ADR	DUPP			// a+1 na na
 3165 4c9c 45320000 		_ADR	CAT			// a+1 na name1
 3166 4ca0 8F310000 		_DOLIT	MASKK
 3166      1FFFFFFF 
 3167 4ca8 05340000 		_ADR	ANDD
 3168 4cac 85320000 		_ADR	RAT			// a+1 na name1 count 
 3169 4cb0 2D340000 		_ADR	XORR			// a+1 na,  same length?
 3170 4cb4 CF310000 		_QBRAN	SEARCH2
 3170      CC4C0000 
 3171 4cbc 31350000 		_ADR	CELLM			// a+1 la
 3172 4cc0 25320000 		_ADR	AT			// a+1 next_na
 3173 4cc4 F7310000 		_BRAN	SEARCH1			// try next word
 3173      8C4C0000 
 3174              	SEARCH2:   
 3175 4ccc E1340000 		_ADR	ONEP			// a+1 na+1
 3176 4cd0 C9390000 		_ADR	TEMP
 3177 4cd4 25320000 		_ADR	AT			// a+1 na+1 count
 3178 4cd8 0D4C0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3179              	SEARCH3:	
 3180 4cdc F7310000 		_BRAN	SEARCH4
 3180      FC4C0000 
 3181              	SEARCH6:	
 3182 4ce4 51320000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3183 4ce8 29330000 		_ADR	DROP			// a+1 0
 3184 4cec 59330000 		_ADR	SWAP			// 0 a+1
 3185 4cf0 F1340000 		_ADR	ONEM			// 0 a
 3186 4cf4 59330000 		_ADR	SWAP			// a 0 
 3187 4cf8 6F2F0000 		_UNNEST			// return without a match
 3188              	SEARCH4:	
 3189 4cfc CF310000 		_QBRAN	SEARCH5			// a+1 na+1
 3189      184D0000 
 3190 4d04 F1340000 		_ADR	ONEM			// a+1 na
 3191 4d08 31350000 		_ADR	CELLM			// a+4 la
 3192 4d0c 25320000 		_ADR	AT			// a+1 next_na
 3193 4d10 F7310000 		_BRAN	SEARCH1			// compare next name
 3193      8C4C0000 
 3194              	SEARCH5:	
 3195 4d18 51320000 		_ADR	RFROM			// a+1 na+1 count
 3196 4d1c 29330000 		_ADR	DROP			// a+1 na+1
 3197 4d20 59330000 		_ADR	SWAP			// na+1 a+1
 3198 4d24 29330000 		_ADR	DROP			// na+1
 3199 4d28 F1340000 		_ADR	ONEM			// na
 3200 4d2c 49330000 		_ADR	DUPP			// na na
 3201 4d30 D54B0000 		_ADR	TOCFA			// na cfa
 3202 4d34 59330000 		_ADR	SWAP			// cfa na
 3203 4d38 6F2F0000 		_UNNEST			//  return with a match
 3204              	
 3205              	/********************************
 3206              	    NAME?	( a -- ca na | a F )
 3207              	 	Search all context vocabularies 
 3208              		for a string.
ARM GAS  forth.s 			page 176


 3209              	***********************************/
 3210 4d3c 044C0000 		_HEADER NAMEQ,5,"NAME?"
 3210      054E414D 
 3210      453F00BF 
 3211 4d48 504700BF 		_NEST
 3212 4d4c 513A0000 		_ADR	CNTXT
 3213 4d50 25320000 		_ADR	AT
 3214 4d54 6D4C0000 		_ADR	SEARCH
 3215 4d58 6F2F0000 		_UNNEST
 3216              	
 3217              	/********************
 3218              	  console input
 3219              	********************/
 3220              	
 3221              	/****************************
 3222              		ASCIZ ( a -- a+ )
 3223              		convert counted string to 
 3224              		null terminated string 
 3225              		in pad.
 3226              	*****************************/
 3227 4d5c 404D0000 		_HEADER ASCIZ,5,"ASCIZ" 
 3227      05415343 
 3227      495A00BF 
 3228 4d68 504700BF 		_NEST 
 3229 4d6c F9380000 		_ADR COUNT
 3230 4d70 49330000 		_ADR DUPP
 3231 4d74 B5320000 		_ADR TOR 
 3232 4d78 AD3F0000 		_ADR PAD 
 3233 4d7c 59330000 		_ADR SWAP
 3234 4d80 85400000 		_ADR WMOVE  
 3235 4d84 AD3F0000 		_ADR PAD 
 3236 4d88 51320000 		_ADR RFROM
 3237 4d8c 85340000 		_ADR PLUS 
 3238 4d90 8F310000 		_DOLIT 0 
 3238      00000000 
 3239 4d98 59330000 		_ADR SWAP  
 3240 4d9c 31320000 		_ADR CSTOR
 3241 4da0 AD3F0000 		_ADR PAD   
 3242 4da4 6F2F0000 		_UNNEST 
 3243              	
 3244              	/***********************
 3245              		UPPER (cstring -- cstring )
 3246              		convert to upper case in situ
 3247              	*******************************/
 3248 4da8 604D0000 		_HEADER UPPER,5,"UPPER"
 3248      05555050 
 3248      455200BF 
 3249 4db4 504700BF 		_NEST 
 3250 4db8 49330000 		_ADR DUPP 
 3251 4dbc B5320000 		_ADR TOR 
 3252 4dc0 F9380000 		_ADR COUNT
 3253 4dc4 8F310000 		_DOLIT 0x1f
 3253      1F000000 
 3254 4dcc 05340000 		_ADR ANDD
 3255 4dd0 B5320000 		_ADR TOR 
 3256 4dd4 F7310000 		_BRAN 3f
 3256      284E0000 
ARM GAS  forth.s 			page 177


 3257 4ddc 49330000 	1:  _ADR DUPP 
 3258 4de0 F9380000 		_ADR COUNT 
 3259 4de4 49330000 		_ADR DUPP 
 3260 4de8 8F310000 		_DOLIT 'a'-1
 3260      60000000 
 3261 4df0 59380000 		_ADR GREAT
 3262 4df4 CF310000 		_QBRAN 2f 
 3262      204E0000 
 3263 4dfc 49330000 		_ADR DUPP 
 3264 4e00 8F310000 		_DOLIT 'z'+1 
 3264      7B000000 
 3265 4e08 25380000 		_ADR LESS 
 3266 4e0c CF310000 		_QBRAN 2f 
 3266      204E0000 
 3267 4e14 8F310000 		_DOLIT 0x5f  
 3267      5F000000 
 3268 4e1c 05340000 		_ADR ANDD
 3269 4e20 2D360000 	2:	_ADR ROT
 3270 4e24 31320000 		_ADR CSTOR
 3271 4e28 B1310000 	3:  _DONXT 1b
 3271      DC4D0000 
 3272 4e30 29330000 		_ADR DROP 
 3273 4e34 51320000 		_ADR RFROM
 3274 4e38 6F2F0000 		_UNNEST 
 3275              	
 3276              	/**************************************
 3277              	   BKSP  ( bot eot cur -- bot eot cur )
 3278              	   Move cursor left by one character.
 3279              	hidden word used by KTAP
 3280              	***************************************/
 3281              	BKSP:
 3282 4e3c 504700BF 		_NEST
 3283 4e40 B5320000 		_ADR	TOR
 3284 4e44 89330000 		_ADR	OVER
 3285 4e48 51320000 		_ADR	RFROM
 3286 4e4c 59330000 		_ADR	SWAP
 3287 4e50 89330000 		_ADR	OVER
 3288 4e54 2D340000 		_ADR	XORR
 3289 4e58 CF310000 		_QBRAN	BACK1
 3289      844E0000 
 3290 4e60 8F310000 		_DOLIT	BKSPP
 3290      08000000 
 3291 4e68 31300000 		_ADR	EMIT
 3292 4e6c F1340000 		_ADR	ONEM
 3293 4e70 41350000 		_ADR	BLANK
 3294 4e74 31300000 		_ADR	EMIT
 3295 4e78 8F310000 		_DOLIT	BKSPP
 3295      08000000 
 3296 4e80 31300000 		_ADR	EMIT
 3297              	BACK1:
 3298 4e84 6F2F0000 		  _UNNEST
 3299              	
 3300              	/****************************************
 3301              	   TAP	 ( bot eot cur c -- bot eot cur )
 3302              	   Accept and echo the key stroke 
 3303              	   and bump the cursor.
 3304              	hidden word used by KTAP 
ARM GAS  forth.s 			page 178


 3305              	****************************************/
 3306              	TAP:
 3307 4e88 504700BF 		_NEST
 3308 4e8c 49330000 		_ADR	DUPP
 3309 4e90 31300000 		_ADR	EMIT
 3310 4e94 89330000 		_ADR	OVER
 3311 4e98 31320000 		_ADR	CSTOR
 3312 4e9c E1340000 		_ADR	ONEP
 3313 4ea0 6F2F0000 		_UNNEST
 3314              	
 3315              	
 3316              	/*******************************************
 3317              	    kTAP	( bot eot cur c -- bot eot cur )
 3318              	 	Process a key stroke, CR or backspace.
 3319              	hidden word used by ACCEPT 
 3320              	*******************************************/
 3321              	KTAP:
 3322              	TTAP:
 3323 4ea4 504700BF 		_NEST
 3324 4ea8 49330000 		_ADR	DUPP
 3325 4eac 8F310000 		_DOLIT	CRR
 3325      0D000000 
 3326 4eb4 2D340000 		_ADR	XORR
 3327 4eb8 CF310000 		_QBRAN  KTAP2
 3327      E84E0000 
 3328 4ec0 8F310000 		_DOLIT	BKSPP
 3328      08000000 
 3329 4ec8 2D340000 		_ADR	XORR
 3330 4ecc CF310000 		_QBRAN	KTAP1
 3330      E04E0000 
 3331 4ed4 41350000 		_ADR	BLANK
 3332 4ed8 894E0000 		_ADR	TAP
 3333 4edc 6F2F0000 		_UNNEST
 3334              	//	.word	0			// patch
 3335              	KTAP1:
 3336 4ee0 3D4E0000 		_ADR	BKSP
 3337 4ee4 6F2F0000 		_UNNEST
 3338              	KTAP2:
 3339 4ee8 29330000 		_ADR	DROP
 3340 4eec 59330000 		_ADR	SWAP
 3341 4ef0 29330000 		_ADR	DROP
 3342 4ef4 49330000 		_ADR	DUPP
 3343 4ef8 6F2F0000 		_UNNEST
 3344              	
 3345              	/************************************
 3346              	    ACCEPT	( b u -- b u )
 3347              	 	Accept characters to input 
 3348              		buffer. Return with actual count.
 3349              	*************************************/
 3350 4efc AC4D0000 		_HEADER ACCEP,6,"ACCEPT"
 3350      06414343 
 3350      45505400 
 3351 4f08 504700BF 		_NEST
 3352 4f0c 89330000 		_ADR	OVER
 3353 4f10 85340000 		_ADR	PLUS
 3354 4f14 89330000 		_ADR	OVER
 3355              	ACCP1:
ARM GAS  forth.s 			page 179


 3356 4f18 7D360000 		_ADR	DDUP
 3357 4f1c 2D340000 		_ADR	XORR
 3358 4f20 CF310000 		_QBRAN	ACCP4
 3358      604F0000 
 3359 4f28 0D300000 		_ADR	KEY
 3360 4f2c 49330000 		_ADR	DUPP
 3361 4f30 41350000 		_ADR	BLANK
 3362 4f34 8F310000 		_DOLIT 127
 3362      7F000000 
 3363 4f3c 653B0000 		_ADR	WITHI
 3364 4f40 CF310000 		_QBRAN	ACCP2
 3364      544F0000 
 3365 4f48 894E0000 		_ADR	TAP
 3366 4f4c F7310000 		_BRAN	ACCP3
 3366      584F0000 
 3367              	ACCP2:
 3368 4f54 A54E0000 		_ADR	KTAP
 3369              	ACCP3:	  
 3370 4f58 F7310000 		_BRAN	ACCP1
 3370      184F0000 
 3371              	ACCP4:
 3372 4f60 29330000 		_ADR	DROP
 3373 4f64 89330000 		_ADR	OVER
 3374 4f68 95340000 		_ADR	SUBB
 3375 4f6c 6F2F0000 		_UNNEST
 3376              	
 3377              	/*****************************
 3378              	    QUERY	( -- )
 3379              	 	Accept input stream 
 3380              		to terminal input buffer.
 3381              	******************************/
 3382 4f70 004F0000 		_HEADER QUERY,5,"QUERY"
 3382      05515545 
 3382      525900BF 
 3383 4f7c 504700BF 		_NEST
 3384 4f80 CD3F0000 		_ADR	TIB
 3385 4f84 8F310000 		_DOLIT 80
 3385      50000000 
 3386 4f8c 094F0000 		_ADR	ACCEP
 3387 4f90 0D3A0000 		_ADR	NTIB
 3388 4f94 11320000 		_ADR	STORE
 3389 4f98 29330000 		_ADR	DROP
 3390 4f9c 8F310000 		_DOLIT	0
 3390      00000000 
 3391 4fa4 F5390000 		_ADR	INN
 3392 4fa8 11320000 		_ADR	STORE
 3393 4fac 6F2F0000 		_UNNEST
 3394              	
 3395              	/*****************************
 3396              	  CORE EXT 
 3397              	  REFILL ( -- )
 3398              	  if SOURCE-ID== 0 call QUERY 
 3399              	  and return TRUE 
 3400              	  if SOURCE-ID=1 return FALSE 
 3401              	******************************/
 3402 4fb0 744F0000 		_HEADER REFILL,6,"REFILL"
 3402      06524546 
ARM GAS  forth.s 			page 180


 3402      494C4C00 
 3403 4fbc 504700BF 		_NEST 
 3404 4fc0 E53F0000 		_ADR	SOURCID 
 3405 4fc4 CF310000 		_QBRAN	1f
 3405      D44F0000 
 3406 4fcc 85370000 		_ADR	FALSE 
 3407 4fd0 6F2F0000 		_UNNEST 
 3408 4fd4 7D4F0000 	1:  _ADR	QUERY 
 3409 4fd8 9D370000 		_ADR	TRUE 
 3410 4fdc 6F2F0000 		_UNNEST 
 3411              	
 3412              	/*****************************
 3413              	  CORE EXT 
 3414              		SAVE-INPUT ( -- n )
 3415              		if SOURCE-ID=0 STACK >IN @ 
 3416              		if SOURCE-ID=1 do nothing 
 3417              	*****************************/
 3418 4fe0 B44F0000 		_HEADER SAVEINP,10,"SAVE-INPUT"
 3418      0A534156 
 3418      452D494E 
 3418      50555400 
 3419 4ff0 504700BF 		_NEST 
 3420 4ff4 E53F0000 		_ADR SOURCID 
 3421 4ff8 CF310000 		_QBRAN 1f 
 3421      04500000 
 3422 5000 6F2F0000 		_UNNEST 
 3423 5004 F5390000 	1:  _ADR	INN 
 3424 5008 25320000 		_ADR	AT 
 3425 500c 6F2F0000 		_UNNEST 
 3426              	
 3427              	/*****************************
 3428              	  CORE EXT 
 3429              		RESTORE-INPUT ( n -- flag )
 3430              		if SOURCE-ID=0 n -> >IN stack FALSE 
 3431              		if SOURCE-ID=1 stack TRUE 
 3432              	***************************************/
 3433 5010 E44F0000 		_HEADER RESTINP,13,"RESTORE-INPUT"
 3433      0D524553 
 3433      544F5245 
 3433      2D494E50 
 3433      555400BF 
 3434 5024 504700BF 		_NEST 
 3435 5028 E53F0000 		_ADR	SOURCID 
 3436 502c CF310000 		_QBRAN	1f
 3436      3C500000 
 3437 5034 9D370000 		_ADR	TRUE 
 3438 5038 6F2F0000 		_UNNEST 
 3439 503c F5390000 	1:  _ADR	INN  
 3440 5040 11320000 		_ADR	STORE 
 3441 5044 85370000 		_ADR	FALSE 
 3442 5048 6F2F0000 		_UNNEST 
 3443              	
 3444              	
 3445              	/********************
 3446              	  Error handling
 3447              	********************/
 3448              	
ARM GAS  forth.s 			page 181


 3449              	/*********************
 3450              	    ABORT	( a -- )
 3451              	 	Reset data stack 
 3452              		and jump to QUIT.
 3453              	**********************/
 3454 504c 14500000 		_HEADER ABORT,5,"ABORT"
 3454      0541424F 
 3454      525400BF 
 3455 5058 504700BF 		_NEST
 3456              	ABORT1: 
 3457 505c 65510000 		_ADR    LBRAC  
 3458 5060 D1520000 		_ADR	PRESE
 3459 5064 8F310000 		_DOLIT  0 
 3459      00000000 
 3460 506c 49330000 		_ADR    DUPP 
 3461 5070 8F310000 		_DOLIT  UPP+TOIN 
 3461      2C000020 
 3462 5078 C1380000 		_ADR    DSTOR 
 3463 507c 8F310000 		_DOLIT  TIBB 
 3463      B0FE0120 
 3464 5084 8F310000 		_DOLIT  UPP+TIBUF  
 3464      34000020 
 3465 508c 11320000 		_ADR    STORE 
 3466 5090 91460000 		_ADR    CR 
 3467 5094 F7310000 		_BRAN	QUIT
 3467      E8520000 
 3468              	
 3469              	
 3470              	/*******************************
 3471              		PRT_ABORT ( a -- )
 3472              	    print message and abort 
 3473              	input:
 3474              		a   address of counted string 	
 3475              	
 3476              	hidden word 
 3477              	*******************************/
 3478              	PRT_ABORT:
 3479 509c 504700BF 		_NEST 
 3480 50a0 D5450000 		_ADR SPACE 
 3481 50a4 F9380000 		_ADR COUNT 
 3482 50a8 29460000 		_ADR TYPEE 
 3483 50ac D5450000 		_ADR  SPACE 
 3484 50b0 8F310000 		_DOLIT '?'
 3484      3F000000 
 3485 50b8 31300000 		_ADR    EMIT 
 3486 50bc 91460000 		_ADR    CR 
 3487 50c0 F7310000 		_BRAN   ABORT1 
 3487      5C500000 
 3488              	
 3489              	
 3490              	
 3491              	
 3492              	/*******************************
 3493              	    _abort"	( f -- )
 3494              	 	Run time routine of ABORT"
 3495              		Abort with a message.
 3496              	hidden used by compiler 
ARM GAS  forth.s 			page 182


 3497              	********************************/
 3498              	ABORQ:
 3499 50c8 504700BF 		_NEST
 3500 50cc B1460000 		_ADR	DOSTR
 3501 50d0 2D360000 		_ADR	ROT  
 3502 50d4 CF310000 		_QBRAN	1f	// error flag
 3502      F0500000 
 3503 50dc D5450000 		_ADR    SPACE 
 3504 50e0 29460000 		_ADR    TYPEE
 3505 50e4 91460000 		_ADR    CR  
 3506 50e8 F7310000 		_BRAN   ABORT1
 3506      5C500000 
 3507              	1:
 3508 50f0 55360000 		_ADR	DDROP
 3509 50f4 6F2F0000 		_UNNEST			// drop message
 3510              	
 3511              	
 3512              	/************************
 3513              	  The text interpreter
 3514              	************************/
 3515              	
 3516              	/***************************
 3517              	    $INTERPRET  ( a -- )
 3518              	 	Interpret a word. 
 3519              		If failed, try to 
 3520              		convert it to an integer.
 3521              	******************************/
 3522 50f8 50500000 		_HEADER INTER,10,"$INTERPRET"
 3522      0A24494E 
 3522      54455250 
 3522      52455400 
 3523 5108 504700BF 		_NEST
 3524 510c 494D0000 		_ADR	NAMEQ
 3525 5110 95350000 		_ADR	QDUP	// ?defined
 3526 5114 CF310000 		_QBRAN	INTE1
 3526      48510000 
 3527 511c 25320000 		_ADR	AT
 3528 5120 8F310000 		_DOLIT	COMPO
 3528      40000000 
 3529 5128 05340000 		_ADR	ANDD	// ?compile only lexicon bits
 3530 512c C9500000 		_ABORQ	13," compile only"
 3530      0D20636F 
 3530      6D70696C 
 3530      65206F6E 
 3530      6C7900BF 
 3531 5140 A5310000 		_ADR	EXECU
 3532 5144 6F2F0000 		_UNNEST			// execute defined word
 3533              	INTE1:
 3534 5148 A9450000 		_ADR	NUMBERQ
 3535 514c CF310000 		_QBRAN	INTE2
 3535      58510000 
 3536 5154 6F2F0000 		_UNNEST
 3537              	INTE2:
 3538 5158 9D500000 		_ADR	PRT_ABORT	// error
 3539              	
 3540              	/******************************
 3541              	    [	   ( -- )
ARM GAS  forth.s 			page 183


 3542              	 	Start the text interpreter.
 3543              	*******************************/
 3544 515c FC500000 		_HEADER LBRAC,IMEDD+1,"["
 3544      815B00BF 
 3545 5164 504700BF 		_NEST
 3546 5168 8F310000 		_DOLIT	INTER
 3546      08510000 
 3547 5170 253A0000 		_ADR	TEVAL
 3548 5174 11320000 		_ADR	STORE
 3549 5178 8F310000 		_DOLIT  0 
 3549      00000000 
 3550 5180 31390000 		_ADR    STATE 
 3551 5184 11320000 		_ADR    STORE 
 3552 5188 6F2F0000 		_UNNEST
 3553              	
 3554              	/**********************
 3555              	    .OK	 ( -- )
 3556              	 	Display "ok" only 
 3557              		while interpreting.
 3558              	************************/
 3559 518c 60510000 		_HEADER DOTOK,3,".OK"
 3559      032E4F4B 
 3560 5194 504700BF 		_NEST
 3561 5198 8F310000 		_DOLIT	INTER
 3561      08510000 
 3562 51a0 253A0000 		_ADR	TEVAL
 3563 51a4 25320000 		_ADR	AT
 3564 51a8 CD370000 		_ADR	EQUAL
 3565 51ac CF310000 		_QBRAN	DOTO1
 3565      BC510000 
 3566 51b4 ED460000 		_DOTQP	3," ok"
 3566      03206F6B 
 3567              	DOTO1:
 3568 51bc 91460000 		_ADR	CR
 3569 51c0 6F2F0000 		_UNNEST
 3570              	
 3571              	/*************************
 3572              	    ?STACK	( -- )
 3573              	 	Abort if the data 
 3574              		stack underflows.
 3575              	************************/
 3576 51c4 90510000 		_HEADER QSTAC,6,"?STACK"
 3576      063F5354 
 3576      41434B00 
 3577 51d0 504700BF 		_NEST
 3578 51d4 3D3F0000 		_ADR	DEPTH
 3579 51d8 B9330000 		_ADR	ZLESS	// check only for underflow
 3580 51dc C9500000 		_ABORQ	9,"underflow"
 3580      09756E64 
 3580      6572666C 
 3580      6F7700BF 
 3581 51ec 6F2F0000 		_UNNEST
 3582              	
 3583              	/*******************
 3584              	    EVAL	( -- )
 3585              	 	Interpret the 
 3586              		input stream.
ARM GAS  forth.s 			page 184


 3587              	*******************/
 3588 51f0 C8510000 		_HEADER EVAL,4,"EVAL"
 3588      04455641 
 3588      4C0000BF 
 3589 51fc 504700BF 		_NEST
 3590              	EVAL1:
 3591 5200 B54B0000 	    _ADR	TOKEN
 3592 5204 49330000 		_ADR	DUPP
 3593 5208 45320000 		_ADR	CAT	// ?input stream empty
 3594 520c CF310000 		_QBRAN	EVAL2
 3594      28520000 
 3595 5214 253A0000 		_ADR	TEVAL
 3596 5218 21400000 		_ADR	ATEXE
 3597 521c D1510000 		_ADR	QSTAC	// evaluate input, check stack
 3598 5220 F7310000 		_BRAN	EVAL1
 3598      00520000 
 3599              	EVAL2:
 3600 5228 29330000 		_ADR	DROP
 3601 522c 95510000 		_ADR	DOTOK
 3602 5230 6F2F0000 		_UNNEST	// prompt
 3603              	
 3604              	
 3605              	/******************************
 3606              		EVALUATE ( ix* a u -- jx* )
 3607              	    interpret string 
 3608              	input:
 3609              	    ix*  argument required 
 3610              		a   address string to interpret 
 3611              		u   str length 
 3612              	output:
 3613              		jx*  evalution results 
 3614              	***********************************/
 3615 5234 F4510000 		_HEADER EVALUATE,8,"EVALUATE"
 3615      08455641 
 3615      4C554154 
 3615      450000BF 
 3616 5244 504700BF 		_NEST 
 3617              		// save original source specs
 3618 5248 8F310000 		_DOLIT UPP+TOIN 
 3618      2C000020 
 3619 5250 49330000 		_ADR   DUPP 
 3620 5254 25320000 		_ADR  AT 
 3621 5258 B5320000 		_ADR   TOR 
 3622 525c 8F310000 		_DOLIT  0
 3622      00000000 
 3623 5264 59330000 		_ADR  SWAP
 3624 5268 11320000 		_ADR   STORE 
 3625 526c 8F310000 		_DOLIT UPP+SRC 
 3625      30000020 
 3626 5274 E1380000 		_ADR   DAT 
 3627 5278 C9320000 		_ADR   DTOR 
 3628 527c 8F310000 		_DOLIT -1
 3628      FFFFFFFF 
 3629 5284 8F310000 		_DOLIT UPP+SRCID 
 3629      38000020 
 3630 528c 11320000 		_ADR   STORE 
 3631 5290 8F310000 		_DOLIT UPP+SRC 
ARM GAS  forth.s 			page 185


 3631      30000020 
 3632 5298 C1380000 		_ADR   DSTOR
 3633              		// clear BLK 
 3634 529c FD510000 		_ADR   EVAL 
 3635              	    // restore original source specs 
 3636 52a0 65320000 		_ADR   DRFROM 
 3637 52a4 8F310000 		_DOLIT UPP+SRC 
 3637      30000020 
 3638 52ac C1380000 		_ADR   DSTOR 
 3639 52b0 51320000 		_ADR   RFROM 
 3640 52b4 8F310000 		_DOLIT UPP+TOIN 
 3640      2C000020 
 3641 52bc 11320000 		_ADR   STORE 
 3642 52c0 6F2F0000 		_UNNEST 
 3643              	
 3644              	
 3645              	/**********************************
 3646              	    PRESET	( -- )
 3647              	 	Reset data stack pointer 
 3648              		and the terminal input buffer.
 3649              	**********************************/
 3650 52c4 38520000 		_HEADER PRESE,6,"PRESET"
 3650      06505245 
 3650      53455400 
 3651 52d0 4FF6B067 		_MOV32 DSP,SPP 
 3651      C2F20107 
 3652 52d8 FDF746BE 		_NEXT 
 3653              	
 3654              	
 3655              	/*********************
 3656              	    QUIT	( -- )
 3657              	 	Reset return stack 
 3658              		pointer and start 
 3659              		text interpreter.
 3660              	***********************/
 3661 52dc C8520000 		_HEADER QUIT,4,"QUIT"
 3661      04515549 
 3661      540000BF 
 3662 52e8 8F310000 		_DOLIT RPP 
 3662      80FF0120 
 3663 52f0 E5320000 		_ADR RPSTOR 
 3664              	QUIT1:
 3665 52f4 65510000 		_ADR	LBRAC			// start interpretation
 3666              	QUIT2:
 3667 52f8 7D4F0000 		_ADR	QUERY			// get input
 3668 52fc FD510000 		_ADR	EVAL
 3669 5300 F7310000 		_BRAN	QUIT2	// continue till error
 3669      F8520000 
 3670              	
 3671              	/***************************
 3672              		FORGET ( <string> -- )
 3673              		forget all definition 
 3674              		starting at <string>
 3675              	****************************/
 3676 5308 E0520000 		_HEADER FORGET,6,"FORGET"
 3676      06464F52 
 3676      47455400 
ARM GAS  forth.s 			page 186


 3677 5314 504700BF 		_NEST 
 3678 5318 B54B0000 		_ADR TOKEN 
 3679 531c 49330000 		_ADR DUPP 
 3680 5320 CF310000 		_QBRAN 9f 
 3680      5C530000 
 3681 5328 494D0000 		_ADR NAMEQ // ( a -- cfa na | a 0 )
 3682 532c 95350000 		_ADR QDUP 
 3683 5330 CF310000 		_QBRAN 8f
 3683      58530000 
 3684 5338 31350000 		_ADR CELLM // ( cfa la )
 3685 533c 49330000 		_ADR DUPP 
 3686 5340 653A0000 		_ADR CPP   
 3687 5344 11320000 		_ADR STORE
 3688 5348 25320000 		_ADR AT 
 3689 534c B53A0000 		_ADR LAST 
 3690 5350 11320000 		_ADR STORE
 3691 5354 A95D0000 		_ADR OVERT 
 3692 5358 29330000 	8:  _ADR DROP 
 3693 535c 6F2F0000 	9:	_UNNEST 
 3694              	
 3695              		.p2align 2 
 3696              	
 3697              	/*****************
 3698              	  The compiler
 3699              	******************/
 3700              	
 3701              	/**************************************
 3702              		POSTPONE <name> ( -- )
 3703              		use to compile immediate word 
 3704              	**************************************/
 3705 5360 0C530000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3705      C8504F53 
 3705      54504F4E 
 3705      450000BF 
 3706 5370 504700BF 		_NEST 
 3707 5374 AD530000 		_ADR ITICK
 3708 5378 295E0000 		_ADR CALLC  
 3709 537c 6F2F0000 		_UNNEST 
 3710              	
 3711              	
 3712              	/**************************************
 3713              	    '	   ( -- ca )
 3714              	 	Search context vocabularies 
 3715              		for the next word in input stream.
 3716              	***************************************/
 3717 5380 64530000 		_HEADER TICK,1,"'"
 3717      012700BF 
 3718 5388 504700BF 		_NEST
 3719 538c B54B0000 		_ADR	TOKEN
 3720 5390 494D0000 		_ADR	NAMEQ	// ?defined
 3721 5394 CF310000 		_QBRAN	TICK1
 3721      A0530000 
 3722 539c 6F2F0000 		_UNNEST	// yes, push code address
 3723              	TICK1:
 3724 53a0 9D500000 		_ADR PRT_ABORT	// error
 3725              	
 3726              	/*****************************************
ARM GAS  forth.s 			page 187


 3727              		['] ( -- ca )
 3728              		immediate version of ' 
 3729              	****************************************/
 3730 53a4 84530000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
 3730      C35B275D 
 3731 53ac 504700BF 		_NEST 
 3732 53b0 89530000 		_ADR TICK  
 3733 53b4 6F2F0000 		_UNNEST 
 3734              	
 3735              	
 3736              	/***********************************
 3737              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
 3738              		search all context for name at 
 3739              		c-adr 
 3740              	input:
 3741              		c-adr   name 
 3742              	output:
 3743              		c-adr  0   not found 
 3744              		xt 1   found word immediate 
 3745              		xt -1  found normal word 
 3746              	***********************************/
 3747 53b8 A8530000 		_HEADER FIND,4,"FIND"
 3747      0446494E 
 3747      440000BF 
 3748 53c4 504700BF 		_NEST 
 3749 53c8 494D0000 		_ADR NAMEQ 
 3750 53cc 49330000 		_ADR DUPP 
 3751 53d0 CF310000 		_QBRAN 9f
 3751      04540000 
 3752 53d8 45320000 		_ADR CAT 
 3753 53dc 8F310000 		_DOLIT IMEDD
 3753      80000000 
 3754 53e4 05340000 		_ADR ANDD 
 3755 53e8 8F310000 		_DOLIT 7 
 3755      07000000 
 3756 53f0 5D340000 		_ADR RSHIFT  
 3757 53f4 49330000 		_ADR DUPP 
 3758 53f8 E3310000 		_TBRAN 9f 
 3758      04540000 
 3759 5400 19370000 		_ADR INVER 
 3760 5404 6F2F0000 	9:	_UNNEST 
 3761              	
 3762              	
 3763              	
 3764              	/***********************
 3765              	    ALLOT	( n -- )
 3766              	 	Allocate n bytes to 
 3767              		the ram area.
 3768              	************************/
 3769 5408 BC530000 		_HEADER ALLOT,5,"ALLOT"
 3769      05414C4C 
 3769      4F5400BF 
 3770 5414 504700BF 		_NEST
 3771 5418 653A0000 		_ADR	CPP
 3772 541c A5380000 		_ADR	PSTOR
 3773 5420 6F2F0000 		_UNNEST			// adjust code pointer
 3774              	
ARM GAS  forth.s 			page 188


 3775              	/******************************
 3776              	    ,	   ( w -- )
 3777              	 	Compile an integer 
 3778              		into dataspace.
 3779              	******************************/
 3780 5424 0C540000 		_HEADER COMMA,1,","
 3780      012C00BF 
 3781 542c 504700BF 		_NEST
 3782 5430 953F0000 		_ADR	HERE
 3783 5434 49330000 		_ADR	DUPP
 3784 5438 21350000 		_ADR	CELLP	// cell boundary
 3785 543c 653A0000 		_ADR	CPP
 3786 5440 11320000 		_ADR	STORE
 3787 5444 11320000 		_ADR	STORE
 3788 5448 6F2F0000 		_UNNEST	// adjust code pointer, compile
 3789              		.p2align 2 
 3790              	
 3791              	/***********************************
 3792              		C, ( c -- )
 3793              		compile 1 character into 
 3794              		dataspace 
 3795              	************************************/
 3796 544c 28540000 		_HEADER CCOMMA,2,"C,"
 3796      02432C00 
 3797 5454 504700BF 		_NEST 
 3798 5458 953F0000 		_ADR 	HERE 
 3799 545c 49330000 		_ADR	DUPP 
 3800 5460 E1340000 		_ADR    ONEP 
 3801 5464 653A0000 		_ADR    CPP 
 3802 5468 11320000 		_ADR    STORE 
 3803 546c 31320000 		_ADR    CSTOR 
 3804 5470 6F2F0000 		_UNNEST 
 3805              	
 3806              	/************************************
 3807              	    [COMPILE]   ( -- //  string> )
 3808              	 	Compile the next immediate word 
 3809              		into code dictionary.
 3810              	*************************************/
 3811 5474 50540000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3811      895B434F 
 3811      4D50494C 
 3811      455D00BF 
 3812 5484 504700BF 		_NEST
 3813 5488 89530000 		_ADR	TICK
 3814 548c 2D540000 		_ADR	COMMA
 3815 5490 6F2F0000 		_UNNEST
 3816              	
 3817              	/****************************
 3818              	    COMPILE	( -- )
 3819              	 	Compile the next address 
 3820              		in colon list to code 
 3821              		dictionary.
 3822              	*******************************/
 3823 5494 78540000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3823      47434F4D 
 3823      50494C45 
 3824 54a0 504700BF 		_NEST
ARM GAS  forth.s 			page 189


 3825 54a4 51320000 		_ADR	RFROM
 3826 54a8 49330000 		_ADR	DUPP 
 3827 54ac 25320000 		_ADR	AT
 3828 54b0 8F310000 		_DOLIT 1 
 3828      01000000 
 3829 54b8 19340000 		_ADR	ORR 
 3830 54bc 2D540000 		_ADR	COMMA 
 3831 54c0 21350000 		_ADR	CELLP 
 3832 54c4 B5320000 		_ADR	TOR 
 3833 54c8 6F2F0000 		_UNNEST	// adjust return address
 3834              	
 3835              	/*************************
 3836              	    LITERAL	( w -- )
 3837              	 	Compile tos to code 
 3838              		dictionary as an 
 3839              		integer literal.
 3840              	***************************/
 3841 54cc 98540000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3841      874C4954 
 3841      4552414C 
 3842 54d8 504700BF 		_NEST
 3843 54dc 8F310000 		_COMPI	DOLIT
 3843      8F310000 
 3843      2D540000 
 3844 54e8 2D540000 		_ADR	COMMA
 3845 54ec 6F2F0000 		_UNNEST
 3846              	
 3847              	/********************
 3848              	    $,"	( -- )
 3849              	 	Compile a literal 
 3850              		string up to next " .
 3851              	hidden word 
 3852              	************************/
 3853              	STRCQ:
 3854 54f0 504700BF 		_NEST
 3855 54f4 8F310000 		_DOLIT -4
 3855      FCFFFFFF 
 3856 54fc 653A0000 		_ADR	CPP
 3857 5500 A5380000 		_ADR	PSTOR
 3858 5504 8F310000 		_DOLIT	'\"'
 3858      22000000 
 3859 550c 914B0000 		_ADR	WORDD	// move word to code dictionary
 3860 5510 F9380000 		_ADR	COUNT
 3861 5514 85340000 		_ADR	PLUS
 3862 5518 D53E0000 		_ADR	ALGND	// calculate aligned end of string
 3863 551c 653A0000 		_ADR	CPP
 3864 5520 11320000 		_ADR	STORE   // adjust the code pointer
 3865 5524 6F2F0000 		_UNNEST 			
 3866              	
 3867              	/*******************
 3868              	   Structures
 3869              	*******************/
 3870              	
 3871              	/*************************
 3872              	    FOR	 ( -- a )
 3873              	 	Start a FOR-NEXT loop 
 3874              		structure in a colon 
ARM GAS  forth.s 			page 190


 3875              		definition.
 3876              	**************************/
 3877 5528 D0540000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3877      C3464F52 
 3878 5530 504700BF 		_NEST
 3879 5534 8F310000 		_COMPI	TOR
 3879      B5320000 
 3879      2D540000 
 3880 5540 953F0000 		_ADR	HERE
 3881 5544 6F2F0000 		_UNNEST
 3882              	
 3883              	/********************************
 3884              		DO ( limit start -- a 0 )
 3885              		initialise a DO...LOOP 
 3886              		or DO...+LOOP 
 3887              	********************************/
 3888 5548 2C550000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3888      C2444F00 
 3889 5550 504700BF 		_NEST
 3890 5554 8F310000 		_COMPI DTOR 
 3890      C9320000 
 3890      2D540000 
 3891 5560 953F0000 		_ADR HERE 
 3892 5564 8F310000 		_DOLIT 0  // end marker used by resolve_leave 
 3892      00000000 
 3893 556c 6F2F0000 		_UNNEST 
 3894              		
 3895              	/******************************
 3896              		?DO ( limit start -- a )	
 3897              	    initialise conditional 
 3898              		?DO ... LOOP 	
 3899              		at run time abort loop 
 3900              		if limit = start 
 3901              	******************************/
 3902 5570 4C550000 		_HEADER QDO,COMPO+IMEDD+3,"?DO"
 3902      C33F444F 
 3903 5578 504700BF 		_NEST 
 3904 557c 8F310000 		_COMPI  DDUP
 3904      7D360000 
 3904      2D540000 
 3905 5588 8F310000 		_COMPI  EQUAL 
 3905      CD370000 
 3905      2D540000 
 3906 5594 8F310000 		_COMPI  QBRAN
 3906      CF310000 
 3906      2D540000 
 3907 55a0 953F0000 		_ADR    HERE 
 3908 55a4 8F310000 		_DOLIT  0 
 3908      00000000 
 3909 55ac 2D540000 		_ADR    COMMA 
 3910 55b0 8F310000 		_COMPI  DDROP  
 3910      55360000 
 3910      2D540000 
 3911 55bc 8F310000 		_COMPI  EXIT 
 3911      09320000 
 3911      2D540000 
 3912 55c8 953F0000 		_ADR    HERE 
ARM GAS  forth.s 			page 191


 3913 55cc 59330000 		_ADR    SWAP 
 3914 55d0 11320000 		_ADR    STORE  
 3915 55d4 51550000 		_ADR    DO 
 3916 55d8 6F2F0000 		_UNNEST 
 3917              	
 3918              	DOPLOOP: // ( n -- R: limit counter )
 3919 55dc 3246     		mov T2,TOS 
 3920 55de 57F8046B 		_POP 
 3921 55e2 B8E80300 		ldmfd RSP!,{T0,T1}
 3922 55e6 1044     		add T0,T2 
 3923 55e8 28E90300 		stmfd RSP!,{T0,T1}
 3924 55ec 8842     		cmp T0,T1 
 3925 55ee 05D4     		bmi 9f 
 3926 55f0 08F10808 		add RSP,#8
 3927 55f4 0CF1040C 		add IP,#4
 3928 55f8 FDF7B6BC 		_NEXT 
 3929 55fc DCF800C0 	9:  ldr IP,[IP]
 3930 5600 FDF7B2BC 		_NEXT 
 3931              	
 3932              	
 3933              	/***************************
 3934              		+LOOP ( a -- )
 3935              		increment counter 
 3936              		end loop if countr>limit
 3937              	****************************/
 3938 5604 74550000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3938      C52B4C4F 
 3938      4F5000BF 
 3939 5610 504700BF 		_NEST 
 3940 5614 8F310000 		_COMPI DOPLOOP 
 3940      DD550000 
 3940      2D540000 
 3941 5620 55560000 		_ADR resolve_leave 
 3942 5624 2D540000 		_ADR COMMA
 3943 5628 6F2F0000 		_UNNEST 
 3944              	
 3945              	DOLOOP: // ( -- R: limit counter )
 3946 562c D8F80000 		ldr T0,[RSP]
 3947 5630 00F10100 		add T0,#1
 3948 5634 C8F80000 		str T0,[RSP]
 3949 5638 D8F80410 		ldr T1,[RSP,#4]
 3950 563c 8842     		cmp T0,T1 
 3951 563e 05D4     		bmi 9f
 3952 5640 08F10808 		add RSP,#8  // drop counter and limit  
 3953 5644 0CF1040C 		add IP,IP,#4 // skip loop address 
 3954 5648 FDF78EBC 		_NEXT 
 3955 564c DCF800C0 	9:  ldr IP,[IP]
 3956 5650 FDF78ABC 		_NEXT 
 3957              	
 3958              	
 3959              	resolve_leave:
 3960 5654 504700BF 		_NEST
 3961 5658 95350000 	1:	_ADR QDUP 
 3962 565c CF310000 		_QBRAN 2f 
 3962      7C560000 
 3963 5664 953F0000 		_ADR HERE 
 3964 5668 21350000 		_ADR CELLP 
ARM GAS  forth.s 			page 192


 3965 566c 59330000 		_ADR SWAP 
 3966 5670 11320000 		_ADR STORE 
 3967 5674 F7310000 		_BRAN 1b 
 3967      58560000 
 3968              	2:
 3969 567c 6F2F0000 		_UNNEST 
 3970              	
 3971              	/********************************
 3972              		LOOP ( a -- )
 3973              		increment counter 
 3974              		end loop if >= limit 
 3975              	*********************************/
 3976 5680 08560000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3976      C44C4F4F 
 3976      500000BF 
 3977 568c 504700BF 		_NEST 
 3978 5690 8F310000 		_COMPI DOLOOP
 3978      2D560000 
 3978      2D540000 
 3979 569c 55560000 		_ADR resolve_leave 
 3980 56a0 2D540000 		_ADR COMMA  // resolve loop branch 
 3981 56a4 6F2F0000 		_UNNEST 
 3982              	
 3983              	/************************************
 3984              		UNLOOP ( -- ) ( R: limit count -- )
 3985              		remove loop parameters from rstack 
 3986              	****************************************/
 3987 56a8 84560000 		_HEADER UNLOOP,6,"UNLOOP"
 3987      06554E4C 
 3987      4F4F5000 
 3988 56b4 08F10808 		add RSP,#2*CELLL 
 3989 56b8 FDF756BC 		_NEXT 
 3990              	
 3991              	
 3992              	/*********************************
 3993              		LEAVE ( -- ) ( R: loop-sys -- ) 
 3994              		exit inner DO...LOOP 
 3995              	**********************************/
 3996 56bc AC560000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 3996      C54C4541 
 3996      564500BF 
 3997 56c8 504700BF 		_NEST 
 3998 56cc 8F310000 		_COMPI DOLEAVE
 3998      FD560000 
 3998      2D540000 
 3999 56d8 953F0000 		_ADR HERE
 4000 56dc 89330000 		_ADR OVER 
 4001 56e0 CF310000 		_QBRAN 1f
 4001      EC560000 
 4002 56e8 59330000 		_ADR SWAP 
 4003 56ec 8F310000 	1:	_DOLIT 0 
 4003      00000000 
 4004 56f4 2D540000 		_ADR COMMA   
 4005 56f8 6F2F0000 		_UNNEST 
 4006              	
 4007              	// LEAVE runtime
 4008              	// remove limit and counter from rstack  
ARM GAS  forth.s 			page 193


 4009              	DOLEAVE:
 4010 56fc 08F10808 		add RSP,#2*CELLL
 4011 5700 DCF800C0 		ldr IP,[IP] 
 4012 5704 FDF730BC 		_NEXT 
 4013              	
 4014              	
 4015              	/**********************
 4016              	    BEGIN	( -- a )
 4017              	 	Start an infinite 
 4018              		or indefinite 
 4019              		loop structure.
 4020              	************************/
 4021 5708 C0560000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 4021      C5424547 
 4021      494E00BF 
 4022 5714 504700BF 		_NEST
 4023 5718 953F0000 		_ADR	HERE
 4024 571c 6F2F0000 		_UNNEST
 4025              		.p2align 2 
 4026              	
 4027              	/********************
 4028              	    NEXT	( a -- )
 4029              	 	Terminate a FOR-NEXT
 4030              		loop structure.
 4031              	**************************/
 4032 5720 0C570000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 4032      C44E4558 
 4032      540000BF 
 4033 572c 504700BF 		_NEST
 4034 5730 8F310000 		_COMPI	DONXT
 4034      B1310000 
 4034      2D540000 
 4035 573c 2D540000 		_ADR	COMMA
 4036 5740 6F2F0000 		_UNNEST
 4037              	
 4038              	/***************************
 4039              		I ( -- n )
 4040              		stack for loop counter 
 4041              	***************************/
 4042 5744 24570000 		_HEADER I,1+COMPO,"I"
 4042      414900BF 
 4043 574c 47F8046D 		_PUSH 
 4044 5750 D8F80060 		ldr TOS,[RSP]
 4045 5754 FDF708BC 		_NEXT 
 4046              	
 4047              	/****************************
 4048              		J ( -- n )
 4049              		stack outer loop counter 
 4050              	****************************/
 4051 5758 48570000 		_HEADER J,1,"J"
 4051      014A00BF 
 4052 5760 47F8046D 		_PUSH 
 4053 5764 D8F80460 		ldr TOS,[RSP,#4]
 4054 5768 FDF7FEBB 		_NEXT 
 4055              	
 4056              	/**********************
 4057              	    UNTIL	( a -- )
ARM GAS  forth.s 			page 194


 4058              	 	Terminate a BEGIN-UNTIL
 4059              		indefinite loop structure.
 4060              	******************************/
 4061 576c 5C570000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 4061      C5554E54 
 4061      494C00BF 
 4062 5778 504700BF 		_NEST
 4063 577c 8F310000 		_COMPI	QBRAN
 4063      CF310000 
 4063      2D540000 
 4064 5788 2D540000 		_ADR	COMMA
 4065 578c 6F2F0000 		_UNNEST
 4066              	
 4067              	/**********************
 4068              	    AGAIN	( a -- )
 4069              	 	Terminate a BEGIN-AGAIN
 4070              		infinite loop structure.
 4071              	*****************************/
 4072 5790 70570000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 4072      C5414741 
 4072      494E00BF 
 4073 579c 504700BF 		_NEST
 4074 57a0 8F310000 		_COMPI	BRAN
 4074      F7310000 
 4074      2D540000 
 4075 57ac 2D540000 		_ADR	COMMA
 4076 57b0 6F2F0000 		_UNNEST
 4077              	
 4078              	/************************
 4079              	    IF	  ( -- A )
 4080              	 	Begin a conditional
 4081              		branch structure.
 4082              	**************************/
 4083 57b4 94570000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 4083      C2494600 
 4084 57bc 504700BF 		_NEST
 4085 57c0 8F310000 		_COMPI	QBRAN
 4085      CF310000 
 4085      2D540000 
 4086 57cc 953F0000 		_ADR	HERE
 4087 57d0 8F310000 		_DOLIT	4
 4087      04000000 
 4088 57d8 653A0000 		_ADR	CPP
 4089 57dc A5380000 		_ADR	PSTOR
 4090 57e0 6F2F0000 		_UNNEST
 4091              	
 4092              	/*************************
 4093              	    AHEAD	( -- A )
 4094              	 	Compile a forward 
 4095              		branch instruction.
 4096              	*************************/
 4097 57e4 B8570000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 4097      C5414845 
 4097      414400BF 
 4098 57f0 504700BF 		_NEST
 4099 57f4 8F310000 		_COMPI	BRAN
 4099      F7310000 
ARM GAS  forth.s 			page 195


 4099      2D540000 
 4100 5800 953F0000 		_ADR	HERE
 4101 5804 8F310000 		_DOLIT	4
 4101      04000000 
 4102 580c 653A0000 		_ADR	CPP
 4103 5810 A5380000 		_ADR	PSTOR
 4104 5814 6F2F0000 		_UNNEST
 4105              	
 4106              	/**************************
 4107              	    REPEAT	( A a -- )
 4108              	 	Terminate a BEGIN-WHILE-REPEAT
 4109              		indefinite loop.
 4110              	**********************************/
 4111 5818 E8570000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 4111      C6524550 
 4111      45415400 
 4112 5824 504700BF 		_NEST
 4113 5828 9D570000 		_ADR	AGAIN
 4114 582c 953F0000 		_ADR	HERE
 4115 5830 59330000 		_ADR	SWAP
 4116 5834 11320000 		_ADR	STORE
 4117 5838 6F2F0000 		_UNNEST
 4118              	
 4119              	/*********************
 4120              	    THEN	( A -- )
 4121              	 	Terminate a conditional
 4122              		branch structure.
 4123              	*****************************/
 4124 583c 1C580000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 4124      C4544845 
 4124      4E0000BF 
 4125 5848 504700BF 		_NEST
 4126 584c 953F0000 		_ADR	HERE
 4127 5850 59330000 		_ADR	SWAP
 4128 5854 11320000 		_ADR	STORE
 4129 5858 6F2F0000 		_UNNEST
 4130              	
 4131              	/***************************
 4132              	    AFT	 ( a -- a A )
 4133              	 	Jump to THEN in a 
 4134              		FOR-AFT-THEN-NEXT loop 
 4135              		the first time through.
 4136              	*****************************/
 4137 585c 40580000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 4137      C3414654 
 4138 5864 504700BF 		_NEST
 4139 5868 29330000 		_ADR	DROP
 4140 586c F1570000 		_ADR	AHEAD
 4141 5870 15570000 		_ADR	BEGIN
 4142 5874 59330000 		_ADR	SWAP
 4143 5878 6F2F0000 		_UNNEST
 4144              	
 4145              	/**********************
 4146              	    ELSE	( A -- A )
 4147              	 	Start the false 
 4148              		clause in an 
 4149              		IF-ELSE-THEN structure.
ARM GAS  forth.s 			page 196


 4150              	****************************/
 4151 587c 60580000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 4151      C4454C53 
 4151      450000BF 
 4152 5888 504700BF 		_NEST
 4153 588c F1570000 		_ADR	AHEAD
 4154 5890 59330000 		_ADR	SWAP
 4155 5894 49580000 		_ADR	THENN
 4156 5898 6F2F0000 		_UNNEST
 4157              	
 4158              	/**************************
 4159              	    WHILE	( a -- A a )
 4160              	 	Conditional branch out 
 4161              		of a BEGIN-WHILE-REPEAT loop.
 4162              	*********************************/
 4163 589c 80580000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 4163      C5574849 
 4163      4C4500BF 
 4164 58a8 504700BF 		_NEST
 4165 58ac BD570000 		_ADR	IFF
 4166 58b0 59330000 		_ADR	SWAP
 4167 58b4 6F2F0000 		_UNNEST
 4168              	
 4169              	/**********************************
 4170              		CASE ( -- 0 )
 4171              		put a 0 on stack as a marker 
 4172              		for end of BRANCH list to 
 4173              		resolve by ENDCASE 
 4174              	***********************************/
 4175 58b8 A0580000 		_HEADER CASE,COMPO+IMEDD+4,"CASE"
 4175      C4434153 
 4175      450000BF 
 4176 58c4 504700BF 		_NEST 
 4177 58c8 8F310000 		_DOLIT 0 
 4177      00000000 
 4178 58d0 6F2F0000 		_UNNEST 
 4179              	
 4180              	/**********************************
 4181              		OF ( -- a )
 4182              		compile code for value comparison
 4183              		and add address of slot to be 
 4184              		resolved by ENDOF 
 4185              	*********************************/
 4186 58d4 BC580000 		_HEADER OF,COMPO+IMEDD+2,"OF"
 4186      C24F4600 
 4187 58dc 504700BF 		_NEST 
 4188 58e0 8F310000 		_COMPI OVER 
 4188      89330000 
 4188      2D540000 
 4189 58ec 8F310000 		_COMPI EQUAL  
 4189      CD370000 
 4189      2D540000 
 4190 58f8 8F310000 		_COMPI QBRAN 
 4190      CF310000 
 4190      2D540000 
 4191 5904 953F0000 		_ADR	HERE  
 4192 5908 8F310000 		_DOLIT 0 
ARM GAS  forth.s 			page 197


 4192      00000000 
 4193 5910 2D540000 		_ADR COMMA 
 4194 5914 6F2F0000 		_UNNEST
 4195              	
 4196              	/**********************************
 4197              		ENDOF ( a1 -- a2 )
 4198              		resolve QBRAN of predecing OF 
 4199              		and add slot for forward BRANCH 
 4200              		to be resolved by ENDCASE 
 4201              	**********************************/
 4202 5918 D8580000 		_HEADER ENDOF,COMPO+IMEDD+5,"ENDOF"
 4202      C5454E44 
 4202      4F4600BF 
 4203 5924 504700BF 		_NEST
 4204 5928 8F310000 		_COMPI	BRAN 
 4204      F7310000 
 4204      2D540000 
 4205 5934 8F310000 		_DOLIT	0 
 4205      00000000 
 4206 593c 2D540000 		_ADR	COMMA 
 4207 5940 953F0000 		_ADR	HERE 
 4208 5944 59330000 		_ADR	SWAP 
 4209 5948 11320000 		_ADR	STORE 
 4210 594c 953F0000 		_ADR	HERE 
 4211 5950 31350000 		_ADR	CELLM 
 4212 5954 6F2F0000 		_UNNEST 
 4213              	
 4214              	/*************************************
 4215              		ENDCASE ( 0...a  -- )
 4216              		compile code for DROP 
 4217              		and resolve forward BRANCH 
 4218              		for each OF 
 4219              	*************************************/
 4220 5958 1C590000 		_HEADER ENDCASE,COMPO+IMEDD+7,"ENDCASE"
 4220      C7454E44 
 4220      43415345 
 4221 5964 504700BF 		_NEST 
 4222 5968 8F310000 		_COMPI DROP 
 4222      29330000 
 4222      2D540000 
 4223 5974 95350000 	1:	_ADR QDUP 
 4224 5978 CF310000 		_QBRAN 2f 
 4224      98590000 
 4225 5980 953F0000 		_ADR HERE
 4226 5984 31350000 		_ADR CELLM 	
 4227 5988 59330000 		_ADR SWAP 
 4228 598c 11320000 		_ADR STORE 
 4229 5990 F7310000 		_BRAN 1b 
 4229      74590000 
 4230              	2:
 4231 5998 6F2F0000 		_UNNEST 
 4232              	
 4233              	
 4234              	/**********************************
 4235              		RECURSE ( -- )
 4236              		compile recursive call to 
 4237              		actual defined word 
ARM GAS  forth.s 			page 198


 4238              	***********************************/
 4239 599c 5C590000 		_HEADER RECURSE,COMPO+IMEDD+7,"RECURSE"
 4239      C7524543 
 4239      55525345 
 4240 59a8 504700BF 		_NEST 
 4241 59ac B53A0000 		_ADR LAST
 4242 59b0 25320000 		_ADR AT  
 4243 59b4 D54B0000 		_ADR TOCFA 
 4244 59b8 2D540000 		_ADR COMMA  
 4245 59bc 6F2F0000 		_UNNEST 
 4246              	
 4247              	
 4248              	/***********************************
 4249              	    ABORT"	( -- //  string> )
 4250              	 	Conditional abort with an 
 4251              		error message.
 4252              	***********************************/
 4253 59c0 A0590000 		_HEADER ABRTQ,IMEDD+COMPO+6,"ABORT\""
 4253      C641424F 
 4253      52542200 
 4254 59cc 504700BF 		_NEST
 4255 59d0 8F310000 		_COMPI	ABORQ
 4255      C9500000 
 4255      2D540000 
 4256 59dc F1540000 		_ADR	STRCQ
 4257 59e0 6F2F0000 		_UNNEST
 4258              	
 4259              	/******************************
 4260              	    S"	( -- //  string> )
 4261              	 	Compile an inline 
 4262              		counted string. 
 4263              		at runtime: ( -- a u )
 4264              	*****************************/
 4265 59e4 C4590000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 4265      C2532200 
 4266 59ec 504700BF 		_NEST
 4267 59f0 8F310000 		_COMPI	STRQP
 4267      E1460000 
 4267      2D540000 
 4268 59fc F1540000 		_ADR	STRCQ
 4269 5a00 6F2F0000 		_UNNEST
 4270              	
 4271              	/********************************
 4272              	CORE EXT 
 4273              		S\" ( -- )
 4274              		compile and inline counted 
 4275              		string with escaped char.
 4276              	********************************/
 4277 5a04 E8590000 		_HEADER STRSLHQ,COMPO+IMEDD+3,"S\\\""
 4277      C3535C22 
 4278 5a0c 504700BF 		_NEST 
 4279 5a10 8F310000 		_COMPI	STRQP
 4279      E1460000 
 4279      2D540000 
 4280 5a1c 953F0000 		_ADR	HERE   
 4281 5a20 8F310000 		_DOLIT	0 
 4281      00000000 
ARM GAS  forth.s 			page 199


 4282 5a28 55540000 		_ADR	CCOMMA // space for count 
 4283 5a2c A95A0000 	1:	_ADR	GETC
 4284 5a30 95350000 		_ADR	QDUP 
 4285 5a34 CF310000 		_QBRAN  4f 
 4285      7C5A0000 
 4286 5a3c 49330000 		_ADR	DUPP 
 4287 5a40 8F310000 		_DOLIT	'\\' 
 4287      5C000000 
 4288 5a48 CD370000 		_ADR	EQUAL
 4289 5a4c CF310000 		_QBRAN	2f
 4289      605A0000 
 4290 5a54 C75A0000 		_ADR	ESCAPE
 4291 5a58 F7310000 		_BRAN	3f 
 4291      9C5A0000 
 4292 5a60 49330000 	2:  _ADR	DUPP 
 4293 5a64 8F310000 		_DOLIT	'"' 
 4293      22000000 
 4294 5a6c CD370000 		_ADR	EQUAL 
 4295 5a70 CF310000 		_QBRAN	3f
 4295      9C5A0000 
 4296 5a78 29330000 		_ADR	DROP 
 4297 5a7c 953F0000 	4:	_ADR	HERE 
 4298 5a80 89330000 		_ADR	OVER
 4299 5a84 E1340000 		_ADR	ONEP   
 4300 5a88 95340000 		_ADR	SUBB
 4301 5a8c 59330000 		_ADR	SWAP 
 4302 5a90 31320000 		_ADR	CSTOR  
 4303 5a94 B93E0000 		_ADR	ALIGN 
 4304 5a98 6F2F0000 		_UNNEST   
 4305              	3:	
 4306 5a9c 55540000 		_ADR	CCOMMA 
 4307 5aa0 F7310000 		_BRAN	1b 
 4307      2C5A0000 
 4308              	
 4309              	GETC: 
 4310 5aa8 606B     		ldr T0,[UP,#TIBUF]
 4311 5aaa E16A     		ldr T1,[UP,#TOIN]
 4312 5aac 226B     		ldr T2,[UP,#NTIBB]
 4313 5aae 47F8046D 		_PUSH
 4314 5ab2 4FF00006 		mov TOS,#0  
 4315 5ab6 9142     		cmp	T1,T2 
 4316 5ab8 03D0     		beq 1f 
 4317 5aba 465C     		Ldrb TOS,[T0,T1]
 4318 5abc 01F10101 		add  T1,#1 
 4319 5ac0 E162     		str T1,[UP,#TOIN]
 4320 5ac2 FDF751BA 	1:	_NEXT 
 4321              	
 4322              	// replace escaped character 
 4323              	ESCAPE: 
 4324 5ac6 504700BF 		_NEST 
 4325 5aca 29330000 		_ADR	DROP 
 4326 5ace A95A0000 		_ADR	GETC  
 4327 5ad2 49330000 		_ADR	DUPP
 4328 5ad6 CF310000 		_QBRAN  5f 
 4328      725B0000 
 4329 5ade 49330000 		_ADR	DUPP 
 4330 5ae2 8F310000 		_DOLIT	'"' 
ARM GAS  forth.s 			page 200


 4330      22000000 
 4331 5aea CD370000 		_ADR	EQUAL 
 4332 5aee CF310000 		_QBRAN  1f 
 4332      FA5A0000 
 4333 5af6 6F2F0000 		_UNNEST 
 4334 5afa 49330000 	1: 	_ADR	DUPP 
 4335 5afe 8F310000 		_DOLIT	'\\' 
 4335      5C000000 
 4336 5b06 CD370000 		_ADR	EQUAL 
 4337 5b0a CF310000 		_QBRAN  2f 
 4337      165B0000 
 4338 5b12 6F2F0000 		_UNNEST 	
 4339 5b16 8F310000 	2:	_DOLIT	0X20 
 4339      20000000 
 4340 5b1e 19340000 		_ADR	ORR   // convert to lower case 
 4341 5b22 49330000 		_ADR	DUPP 
 4342 5b26 8F310000 		_DOLIT	'x' 
 4342      78000000 
 4343 5b2e CD370000 		_ADR	EQUAL 
 4344 5b32 CF310000 		_QBRAN  3f 
 4344      425B0000 
 4345 5b3a 775B0000 		_ADR	PARSE_HEX 
 4346 5b3e 6F2F0000 		_UNNEST 
 4347 5b42 8F310000 	3:  _DOLIT	'a' 
 4347      61000000 
 4348 5b4a 95340000 		_ADR	SUBB
 4349 5b4e 49330000 		_ADR	DUPP 
 4350 5b52 B9330000 		_ADR	ZLESS 
 4351 5b56 CF310000 		_QBRAN	4f
 4351      625B0000 
 4352 5b5e 6F2F0000 		_UNNEST 
 4353 5b62 8F310000 	4:  _DOLIT	esc_char 
 4353      FA5B0000 
 4354 5b6a 85340000 		_ADR	PLUS 
 4355 5b6e 45320000 		_ADR	CAT 
 4356 5b72 6F2F0000 	5:	_UNNEST 
 4357              	
 4358              	PARSE_HEX:
 4359 5b76 504700BF 		_NEST 
 4360 5b7a 29330000 		_ADR 	DROP 
 4361 5b7e A95A0000 		_ADR	GETC 
 4362 5b82 49330000 		_ADR	DUPP 
 4363 5b86 CF310000 		_QBRAN	2f
 4363      BE5B0000 
 4364 5b8e C35B0000 		_ADR	TO_HEX 
 4365 5b92 8F310000 	1:	_DOLIT	16 
 4365      10000000 
 4366 5b9a A5340000 		_ADR	STAR 
 4367 5b9e B5320000 		_ADR	TOR 
 4368 5ba2 A95A0000 		_ADR	GETC
 4369 5ba6 49330000 		_ADR	DUPP 
 4370 5baa CF310000 		_QBRAN	3f 
 4370      B65B0000 
 4371 5bb2 C35B0000 		_ADR	TO_HEX 
 4372 5bb6 51320000 	3:	_ADR	RFROM 
 4373 5bba 85340000 		_ADR	PLUS 
 4374 5bbe 6F2F0000 	2:	_UNNEST 
ARM GAS  forth.s 			page 201


 4375              	
 4376              	
 4377              	TO_HEX: 
 4378 5bc2 504700BF 		_NEST 
 4379 5bc6 8F310000 		_DOLIT	'0' 
 4379      30000000 
 4380 5bce 95340000 		_ADR	SUBB 
 4381 5bd2 49330000 		_ADR	DUPP 
 4382 5bd6 8F310000 		_DOLIT	9 
 4382      09000000 
 4383 5bde 59380000 		_ADR	GREAT 
 4384 5be2 CF310000 		_QBRAN	1f 
 4384      F65B0000 
 4385 5bea 8F310000 		_DOLIT	7 
 4385      07000000 
 4386 5bf2 95340000 		_ADR	SUBB  
 4387              	1:
 4388 5bf6 6F2F0000 		_UNNEST 
 4389              	
 4390              	
 4391 5bfa 07086364 	esc_char:  .byte 7,8,'c','d',27,12,'g','h','i','j','k',10,13,10,'o','p',34,13,'s',9,'u',11,'x','y',
 4391      1B0C6768 
 4391      696A6B0A 
 4391      0D0A6F70 
 4391      220D7309 
 4392              	
 4393              	
 4394              	/********************
 4395              	    $,\"	( -- )
 4396              	 	Compile a literal 
 4397              		escaped string up to next " .
 4398              	hidden word 
 4399              	************************/
 4400              	STRCSLHQ:
 4401              	
 4402              	
 4403              	
 4404              	/********************************
 4405              	EXTENDED CORE 
 4406              		C" string" ( -- )
 4407              		Compile an inline counted 
 4408              		literal.
 4409              		at runtime ( -- a )
 4410              	*********************************/
 4411 5c13 085A0000 		_HEADER CSTRQ,IMEDD+COMPO+2,"C\""
 4411      C2432200 
 4411      BF
 4412 5c1c 504700BF 		_NEST 
 4413 5c20 8F310000 		_COMPI	STRQP
 4413      E1460000 
 4413      2D540000 
 4414 5c2c F1540000 		_ADR	STRCQ 
 4415 5c30 8F310000 		_COMPI	DROP 
 4415      29330000 
 4415      2D540000 
 4416 5c3c 8F310000 		_COMPI	ONEM  
 4416      F1340000 
ARM GAS  forth.s 			page 202


 4416      2D540000 
 4417 5c48 6F2F0000 		_UNNEST 
 4418              	
 4419              	
 4420              	/******************************
 4421              	    ."	( -- //  string> )
 4422              	 	Compile an inline word
 4423              		literal to be typed out 
 4424              		at run time.
 4425              	*******************************/
 4426 5c4c 175C0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 4426      C22E2200 
 4427 5c54 504700BF 		_NEST
 4428 5c58 8F310000 		_COMPI	DOTQP
 4428      ED460000 
 4428      2D540000 
 4429 5c64 F1540000 		_ADR	STRCQ
 4430 5c68 6F2F0000 		_UNNEST
 4431              	
 4432              	/*********************
 4433              	  Name compiler
 4434              	***********************/
 4435              	
 4436              	/**************************
 4437              	    ?UNIQUE	( a -- a )
 4438              	 	Display a warning 
 4439              		message if the word 
 4440              		already exists.
 4441              	**************************/
 4442 5c6c 505C0000 		_HEADER UNIQU,7,"?UNIQUE"
 4442      073F554E 
 4442      49515545 
 4443 5c78 504700BF 		_NEST
 4444 5c7c 49330000 		_ADR	DUPP
 4445 5c80 494D0000 		_ADR	NAMEQ			// ?name exists
 4446 5c84 CF310000 		_QBRAN	UNIQ1	// redefinitions are OK
 4446      A45C0000 
 4447 5c8c ED460000 		_DOTQP	7," reDef "		// but warn the user
 4447      07207265 
 4447      44656620 
 4448 5c98 89330000 		_ADR	OVER
 4449 5c9c F9380000 		_ADR	COUNT
 4450 5ca0 29460000 		_ADR	TYPEE			// just in case its not planned
 4451              	UNIQ1:
 4452 5ca4 29330000 		_ADR	DROP
 4453 5ca8 6F2F0000 		_UNNEST
 4454              	
 4455              	/***********************
 4456              	    $,n	 ( na -- )
 4457              	 	Build a new dictionary 
 4458              		name using the data at na.
 4459              	hidden word 
 4460              	*******************************/
 4461              	SNAME:
 4462 5cac 504700BF 		_NEST
 4463 5cb0 49330000 		_ADR	DUPP			//  na na
 4464 5cb4 45320000 		_ADR	CAT			//  ?null input
ARM GAS  forth.s 			page 203


 4465 5cb8 CF310000 		_QBRAN	SNAM1
 4465      F45C0000 
 4466 5cc0 795C0000 		_ADR	UNIQU			//  na
 4467 5cc4 B53A0000 		_ADR	LAST			//  na last
 4468 5cc8 25320000 		_ADR	AT			//  na la
 4469 5ccc 2D540000 		_ADR	COMMA			//  na
 4470 5cd0 49330000 		_ADR	DUPP			//  na na
 4471 5cd4 B53A0000 		_ADR	LAST			//  na na last
 4472 5cd8 11320000 		_ADR	STORE			//  na , save na for vocabulary link
 4473 5cdc F9380000 		_ADR	COUNT			//  na+1 count
 4474 5ce0 85340000 		_ADR	PLUS			//  na+1+count
 4475 5ce4 D53E0000 		_ADR	ALGND			//  word boundary
 4476 5ce8 653A0000 		_ADR	CPP
 4477 5cec 11320000 		_ADR	STORE			//  top of dictionary now
 4478 5cf0 6F2F0000 		_UNNEST
 4479              	SNAM1:
 4480 5cf4 E1460000 		_ADR	STRQP
 4481 5cf8 07       		.byte	7
 4482 5cf9 206E616D 		.ascii " name? "
 4482      653F20
 4483 5d00 9D500000 		_ADR	PRT_ABORT
 4484              	
 4485              	/************************
 4486              	    $COMPILE	( a -- )
 4487              	 	Compile next word to 
 4488              		code dictionary as 
 4489              		a token or literal.
 4490              	**************************/
 4491 5d04 705C0000 		_HEADER SCOMP,8,"$COMPILE"
 4491      0824434F 
 4491      4D50494C 
 4491      450000BF 
 4492 5d14 504700BF 		_NEST
 4493 5d18 494D0000 		_ADR	NAMEQ
 4494 5d1c 95350000 		_ADR	QDUP	// defined?
 4495 5d20 CF310000 		_QBRAN	SCOM2
 4495      505D0000 
 4496 5d28 25320000 		_ADR	AT
 4497 5d2c 8F310000 		_DOLIT	IMEDD
 4497      80000000 
 4498 5d34 05340000 		_ADR	ANDD	// immediate?
 4499 5d38 CF310000 		_QBRAN	SCOM1
 4499      485D0000 
 4500 5d40 A5310000 		_ADR	EXECU
 4501 5d44 6F2F0000 		_UNNEST			// it's immediate, execute
 4502              	SCOM1:
 4503 5d48 295E0000 		_ADR	CALLC			// it's not immediate, compile
 4504 5d4c 6F2F0000 		_UNNEST	
 4505              	SCOM2:
 4506 5d50 A9450000 		_ADR	NUMBERQ 
 4507 5d54 CF310000 		_QBRAN	SCOM3
 4507      645D0000 
 4508 5d5c D9540000 		_ADR	LITER
 4509 5d60 6F2F0000 		_UNNEST			// compile number as integer
 4510              	SCOM3: // compilation abort 
 4511 5d64 6D5D0000 		_ADR COLON_ABORT 
 4512 5d68 9D500000 		_ADR	PRT_ABORT			// error
ARM GAS  forth.s 			page 204


 4513              	
 4514              	/********************************
 4515              	 before aborting a compilation 
 4516              	 reset HERE and LAST
 4517              	 to previous values. 
 4518              	*******************************/
 4519              	COLON_ABORT:
 4520 5d6c 504700BF 		_NEST 
 4521 5d70 B53A0000 		_ADR LAST 
 4522 5d74 25320000 		_ADR AT 
 4523 5d78 31350000 		_ADR CELLM 
 4524 5d7c 49330000 		_ADR DUPP 
 4525 5d80 653A0000 		_ADR CPP  
 4526 5d84 11320000 		_ADR STORE 
 4527 5d88 25320000 		_ADR AT 
 4528 5d8c B53A0000 		_ADR LAST 
 4529 5d90 11320000 		_ADR STORE 
 4530 5d94 A95D0000 		_ADR OVERT 
 4531 5d98 6F2F0000 		_UNNEST 
 4532              	
 4533              	/*********************
 4534              	    OVERT	( -- )
 4535              	 	Link a new word 
 4536              		into the current 
 4537              		vocabulary.
 4538              	**********************/
 4539 5d9c 085D0000 		_HEADER OVERT,5,"OVERT"
 4539      054F5645 
 4539      525400BF 
 4540 5da8 504700BF 		_NEST
 4541 5dac B53A0000 		_ADR	LAST
 4542 5db0 25320000 		_ADR	AT
 4543 5db4 513A0000 		_ADR	CNTXT
 4544 5db8 11320000 		_ADR	STORE
 4545 5dbc 6F2F0000 		_UNNEST
 4546              	
 4547              	/**********************
 4548              	    ;  ( -- )
 4549              	 	Terminate a colon
 4550              		definition.
 4551              	***********************/
 4552 5dc0 A05D0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 4552      C13B00BF 
 4553 5dc8 504700BF 		_NEST
 4554 5dcc 8F310000 		_DOLIT	UNNEST
 4554      6E2F0000 
 4555 5dd4 295E0000 		_ADR	CALLC
 4556 5dd8 B93E0000 		_ADR    ALIGN 
 4557 5ddc 65510000 		_ADR	LBRAC
 4558 5de0 A95D0000 		_ADR	OVERT
 4559 5de4 6F2F0000 		_UNNEST
 4560              	
 4561              	/******************
 4562              	    ]	   ( -- )
 4563              	 	Start compiling 
 4564              		the words in 
 4565              		the input stream.
ARM GAS  forth.s 			page 205


 4566              	*********************/
 4567 5de8 C45D0000 		_HEADER RBRAC,1,"]"
 4567      015D00BF 
 4568 5df0 504700BF 		_NEST
 4569 5df4 8F310000 		_DOLIT	SCOMP
 4569      145D0000 
 4570 5dfc 253A0000 		_ADR	TEVAL
 4571 5e00 11320000 		_ADR	STORE
 4572 5e04 8F310000 		_DOLIT  -1
 4572      FFFFFFFF 
 4573 5e0c 31390000 		_ADR    STATE 
 4574 5e10 11320000 		_ADR    STORE 
 4575 5e14 6F2F0000 		_UNNEST
 4576              	
 4577              	/****************************
 4578              	    COMPILE,	( cfa -- )
 4579              	 	compile cfa.
 4580              	
 4581              	*****************************/
 4582 5e18 EC5D0000 		_HEADER CALLC,COMPO+IMEDD+8,"COMPILE,"
 4582      C8434F4D 
 4582      50494C45 
 4582      2C0000BF 
 4583 5e28 504700BF 		_NEST
 4584 5e2c 8F310000 		_DOLIT 1 
 4584      01000000 
 4585 5e34 19340000 		_ADR ORR 
 4586 5e38 2D540000 		_ADR COMMA  
 4587 5e3c 6F2F0000 		_UNNEST 
 4588              	
 4589              	
 4590              	/****************************
 4591              		BUFFER: "name" ( u -- )
 4592              		create a named buffer of 
 4593              		u bytes 
 4594              		0's the buffer. 
 4595              		at execution "name" return 
 4596              		buffer address 
 4597              	*****************************/
 4598 5e40 1C5E0000 		_HEADER BUFFERCOL,7,"BUFFER:"
 4598      07425546 
 4598      4645523A 
 4599 5e4c 504700BF 		_NEST 
 4600 5e50 79600000 		_ADR    CREAT
 4601 5e54 953F0000 		_ADR    HERE    // u a-adr 
 4602 5e58 89330000 		_ADR    OVER    // u a-adr u 
 4603 5e5c 15540000 		_ADR    ALLOT   // u a-adr
 4604 5e60 B93E0000 		_ADR	ALIGN 
 4605 5e64 59330000 		_ADR	SWAP    // a-adr u 
 4606 5e68 8F310000 		_DOLIT	0       // a-adr u 0 
 4606      00000000 
 4607 5e70 CD400000 		_ADR	FILL
 4608 5e74 6F2F0000 		_UNNEST 
 4609              	
 4610              	
 4611              	/*************************
 4612              	 	:	( -- //  string> )
ARM GAS  forth.s 			page 206


 4613              	 	Start a new colon 
 4614              		definition using 
 4615              		next word as its name.
 4616              	**************************/
 4617 5e78 445E0000 		_HEADER COLON,1,":"
 4617      013A00BF 
 4618 5e80 504700BF 		_NEST
 4619 5e84 B93E0000 		_ADR    ALIGN 
 4620 5e88 B54B0000 		_ADR	TOKEN
 4621 5e8c AD5C0000 		_ADR	SNAME
 4622 5e90 792F0000 		_ADR	COMPI_NEST 
 4623 5e94 F15D0000 		_ADR	RBRAC
 4624 5e98 6F2F0000 		_UNNEST
 4625              	
 4626              	/*************************
 4627              	    IMMEDIATE   ( -- )
 4628              	 	Make the last compiled 
 4629              		word an immediate word.
 4630              	***************************/
 4631 5e9c 7C5E0000 		_HEADER IMMED,9,"IMMEDIATE"
 4631      09494D4D 
 4631      45444941 
 4631      544500BF 
 4632 5eac 504700BF 		_NEST
 4633 5eb0 8F310000 		_DOLIT	IMEDD
 4633      80000000 
 4634 5eb8 B53A0000 		_ADR	LAST
 4635 5ebc 25320000 		_ADR	AT
 4636 5ec0 25320000 		_ADR	AT
 4637 5ec4 19340000 		_ADR	ORR
 4638 5ec8 B53A0000 		_ADR	LAST
 4639 5ecc 25320000 		_ADR	AT
 4640 5ed0 11320000 		_ADR	STORE
 4641 5ed4 6F2F0000 		_UNNEST
 4642              	
 4643              	/******************
 4644              	  Defining words
 4645              	******************/
 4646              	
 4647              		.p2align 2 
 4648              	/****************************************
 4649              	 doDOES> ( -- a )
 4650              	 runtime action of  DOES>		 
 4651              	hidden word used by compiler 
 4652              	***************************************/
 4653              	DODOES:
 4654 5ed8 504700BF 		_NEST 
 4655 5edc 85320000 		_ADR	RAT 
 4656 5ee0 21350000 		_ADR	CELLP 
 4657 5ee4 E1340000 		_ADR	ONEP  
 4658 5ee8 B53A0000 		_ADR	LAST 
 4659 5eec 25320000 		_ADR	AT
 4660 5ef0 D54B0000 		_ADR	TOCFA
 4661 5ef4 F1340000 		_ADR    ONEM  
 4662 5ef8 65640000 		_ADR	TOVECTOR  
 4663 5efc 11320000 		_ADR	STORE
 4664 5f00 6F2F0000 		_UNNEST 
ARM GAS  forth.s 			page 207


 4665              	
 4666              		.p2align 2
 4667              	/**********************
 4668              	  DOES> ( -- )
 4669              	  compile time action
 4670              	*************************/
 4671 5f04 A05E0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4671      C5444F45 
 4671      533E00BF 
 4672 5f10 504700BF 		_NEST 
 4673 5f14 8F310000 		_COMPI	DODOES 
 4673      D95E0000 
 4673      2D540000 
 4674 5f20 8F310000 		_COMPI	UNNEST 
 4674      6F2F0000 
 4674      2D540000 
 4675 5f2c 792F0000 		_ADR	COMPI_NEST
 4676 5f30 6F2F0000 	 	_UNNEST 
 4677              	
 4678              	
 4679              	/****************************
 4680              	  DEFER@ ( cfa1 -- cfa2 )
 4681              	
 4682              	******************************/
 4683 5f34 085F0000 		_HEADER DEFERAT,6,"DEFER@"
 4683      06444546 
 4683      45524000 
 4684 5f40 504700BF 		_NEST 
 4685 5f44 21350000 		_ADR CELLP 
 4686 5f48 25320000 		_ADR AT 
 4687 5f4c 6F2F0000 		_UNNEST 
 4688              	
 4689              	/*********************************
 4690              		ACTION-OF "name" ( -- xt )
 4691              		push the action token 
 4692              		of defered word "name" 
 4693              	*********************************/
 4694 5f50 385F0000 		_HEADER ACTIONOF,IMEDD+9,"ACTION-OF"
 4694      89414354 
 4694      494F4E2D 
 4694      4F4600BF 
 4695 5f60 504700BF 		_NEST 
 4696 5f64 89530000 		_ADR 	TICK  
 4697 5f68 415F0000 		_ADR 	DEFERAT 
 4698 5f6c 31390000 		_ADR    STATE 
 4699 5f70 25320000 		_ADR 	AT 
 4700 5f74 CF310000 		_QBRAN 	1f
 4700      805F0000 
 4701 5f7c 2D540000 		_ADR    COMMA 
 4702 5f80 6F2F0000 	1: 	_UNNEST 
 4703              	
 4704              	
 4705              	/*********************************
 4706              	 DEFER! ( cfa1 cfa2 -- )
 4707              	 assign an action to a defered word 
 4708              	************************************/
 4709 5f84 545F0000 		_HEADER DEFERSTO,6,"DEFER!"
ARM GAS  forth.s 			page 208


 4709      06444546 
 4709      45522100 
 4710 5f90 504700BF 		_NEST 
 4711 5f94 8F310000 		_DOLIT	-2 
 4711      FEFFFFFF 
 4712 5f9c 05340000 		_ADR	ANDD   // clear thumb bit of cfa2  
 4713 5fa0 21350000 		_ADR 	CELLP  // skip NEST 
 4714 5fa4 11320000 		_ADR STORE 
 4715 5fa8 6F2F0000 		_UNNEST
 4716              	
 4717              	/****************************
 4718              	  DEFER ( "name" -- )
 4719              	  create a defered definition
 4720              	*****************************/
 4721 5fac 885F0000 		_HEADER DEFER,5,"DEFER"
 4721      05444546 
 4721      455200BF 
 4722 5fb8 504700BF 		_NEST 
 4723 5fbc 815E0000 		_ADR COLON 
 4724              	// runtime code 
 4725 5fc0 8F310000 		_DOLIT NO_ACTION  
 4725      E05F0000 
 4726 5fc8 295E0000 		_ADR  CALLC 
 4727 5fcc 8F310000 		_DOLIT UNNEST 
 4727      6E2F0000 
 4728 5fd4 295E0000 		_ADR  CALLC
 4729              	// end of runtime code 	
 4730 5fd8 C95D0000 		_ADR  SEMIS  
 4731 5fdc 6F2F0000 		_UNNEST 
 4732              	
 4733              	NO_ACTION:
 4734 5fe0 504700BF 		_NEST 
 4735 5fe4 8F310000 		_DOLIT 1 
 4735      01000000 
 4736 5fec C9500000 		_ABORQ 15 , " no action set!"
 4736      0F206E6F 
 4736      20616374 
 4736      696F6E20 
 4736      73657421 
 4737 6000 6F2F0000 		_UNNEST 
 4738              	
 4739              	/*********************************
 4740              		:NONAME  ( -- xt )
 4741              		create a colon word without 
 4742              		name. 
 4743              	output:
 4744              		xt  exÃ©cution token of 
 4745              		new definition
 4746              	*********************************/
 4747 6004 B05F0000 		_HEADER NONAME,7,":NONAME"
 4747      073A4E4F 
 4747      4E414D45 
 4748 6010 504700BF 		_NEST 
 4749 6014 953F0000 		_ADR 	HERE 
 4750 6018 792F0000 		_ADR	COMPI_NEST 
 4751 601c F15D0000 		_ADR 	RBRAC
 4752 6020 6F2F0000 		_UNNEST 
ARM GAS  forth.s 			page 209


 4753              	
 4754              	/*******************************
 4755              		IS cccc ( cfa -- )
 4756              	input:
 4757              	   cccc  defered word name 
 4758              	   xt    execution token 
 4759              	   to be affected to the 
 4760              	   defered word.
 4761              	********************************/
 4762 6024 08600000 		_HEADER IS,IMEDD+2,"IS"
 4762      82495300 
 4763 602c 504700BF 		_NEST
 4764 6030 31390000 		_ADR STATE 
 4765 6034 25320000 		_ADR AT 
 4766 6038 CF310000 		_QBRAN 1f 
 4766      60600000 
 4767 6040 8F310000 		_DOLIT ITICK
 4767      AC530000 
 4768 6048 295E0000 		_ADR CALLC  
 4769 604c 8F310000 		_DOLIT DEFERSTO
 4769      905F0000 
 4770 6054 295E0000 		_ADR CALLC
 4771 6058 F7310000 		_BRAN 2f    
 4771      68600000 
 4772 6060 89530000 	1:  _ADR TICK 
 4773 6064 915F0000 		_ADR DEFERSTO 
 4774 6068 6F2F0000 	2:	_UNNEST 
 4775              	
 4776              	
 4777              	/******************************
 4778              	    CREATE	( -- //  string> )
 4779              	 	Compile a new array entry 
 4780              		without allocating code space.
 4781              	***********************************/
 4782 606c 28600000 		_HEADER CREAT,6,"CREATE"
 4782      06435245 
 4782      41544500 
 4783 6078 504700BF 		_NEST 
 4784 607c B93E0000 		_ADR	ALIGN 
 4785 6080 B54B0000 		_ADR	TOKEN
 4786 6084 AD5C0000 		_ADR	SNAME
 4787 6088 A95D0000 		_ADR	OVERT
 4788 608c 792F0000 		_ADR	COMPI_NEST 
 4789 6090 8F310000 		_COMPI	DOVAR
 4789      B9600000 
 4789      2D540000 
 4790 609c 8F310000 		_COMPI  NOP     // reserved slot  for DOES> vector   
 4790      8D310000 
 4790      2D540000 
 4791 60a8 8F310000 		_COMPI  UNNEST 
 4791      6F2F0000 
 4791      2D540000 
 4792 60b4 6F2F0000 		_UNNEST
 4793              	
 4794              	/*******************************
 4795              	  doVAR	( -- a )
 4796              	  Run time routine for VARIABLE and CREATE.
ARM GAS  forth.s 			page 210


 4797              	hidden word used by compiler
 4798              	********************************/
 4799              	DOVAR:
 4800 60b8 47F8046D 		_PUSH
 4801 60bc 6646     		MOV TOS,IP
 4802 60be 06F10806 		ADD TOS,#2*CELLL // >BODY 
 4803 60c2 FCF751BF 		_NEXT  
 4804              	
 4805              	
 4806              	/*******************************
 4807              	    VARIABLE	( -- //  string> )
 4808              	 	Compile a new variable 
 4809              		initialized to 0.
 4810              	***********************************/
 4811 60c6 70600000 		_HEADER VARIA,8,"VARIABLE"
 4811      08564152 
 4811      4941424C 
 4811      4500
 4812 60d4 504700BF 		_NEST
 4813 60d8 79600000 		_ADR	CREAT
 4814 60dc 8F310000 		_DOLIT	0
 4814      00000000 
 4815 60e4 2D540000 		_ADR	COMMA
 4816 60e8 6F2F0000 		_UNNEST
 4817              	
 4818              	/**********************************
 4819              	    doCON	( -- a ) 
 4820              	 	Run time routine for CONSTANT.
 4821              	hidden word used by compiler 
 4822              	***********************************/
 4823              	DOCON:
 4824 60ec 47F8046D 		_PUSH
 4825 60f0 5CF8046B 		LDR.W TOS,[IP],#4 
 4826 60f4 FCF73BBF 		B UNNEST 
 4827              	
 4828              	
 4829              	/***********************************
 4830              	CORE EXT 
 4831              		VALUE name ( x -- )
 4832              		create a value object and 
 4833              		assign x to it. 
 4834              	***********************************/
 4835 60f8 CA600000 		_HEADER VALUE,5,"VALUE" 
 4835      0556414C 
 4835      554500BF 
 4836 6104 504700BF 		_NEST 
 4837 6108 79600000 		_ADR CREAT 
 4838 610c 8F310000 		_DOLIT AT 
 4838      24320000 
 4839 6114 8F310000 		_DOLIT	1 
 4839      01000000 
 4840 611c 19340000 		_ADR	ORR 
 4841 6120 953F0000 		_ADR	HERE 
 4842 6124 8F310000 		_DOLIT	8 
 4842      08000000 
 4843 612c 95340000 		_ADR	SUBB 
 4844 6130 11320000 		_ADR	STORE 
ARM GAS  forth.s 			page 211


 4845 6134 2D540000 		_ADR	COMMA 
 4846 6138 6F2F0000 		_UNNEST 
 4847              	
 4848              	/***********************************
 4849              	CORE EXT 
 4850              		TO name ( x -- )
 4851              	    assign a new value to name 
 4852              	***********************************/
 4853 613c FC600000 		_HEADER TO,2,"TO"
 4853      02544F00 
 4854 6144 504700BF 		_NEST 
 4855 6148 89530000 		_ADR	TICK 
 4856 614c F1340000 		_ADR	ONEM 
 4857 6150 8F310000 		_DOLIT	4*CELLL
 4857      10000000 
 4858 6158 85340000 		_ADR	PLUS  
 4859 615c 11320000 		_ADR	STORE 
 4860 6160 6F2F0000 		_UNNEST 
 4861              	
 4862              	
 4863              	/***********************************
 4864              	    CONSTANT	( u -- //  string> )
 4865              	 	Compile a new constant.
 4866              	************************************/
 4867 6164 40610000 		_HEADER CONST,8,"CONSTANT"
 4867      08434F4E 
 4867      5354414E 
 4867      540000BF 
 4868 6174 504700BF 		_NEST 
 4869 6178 B54B0000 		_ADR	TOKEN
 4870 617c AD5C0000 		_ADR	SNAME
 4871 6180 A95D0000 		_ADR	OVERT
 4872 6184 792F0000 		_ADR	COMPI_NEST
 4873 6188 8F310000 		_DOLIT	DOCON
 4873      EC600000 
 4874 6190 295E0000 		_ADR	CALLC
 4875 6194 2D540000 		_ADR	COMMA
 4876 6198 8F310000 		_DOLIT	UNNEST 
 4876      6E2F0000 
 4877 61a0 295E0000 		_ADR	CALLC  
 4878 61a4 6F2F0000 		_UNNEST
 4879              	
 4880              	
 4881              	/***********
 4882              	  Tools
 4883              	***********/
 4884              	
 4885              	/*************************
 4886              	    dm+	 ( a u -- a )
 4887              	 	Dump u bytes from a , 
 4888              		leaving a+u on the stack.
 4889              		hidden word used by DUMP 
 4890              	****************************/
 4891              	DMP:
 4892 61a8 504700BF 		_NEST
 4893 61ac 89330000 		_ADR	OVER
 4894 61b0 8F310000 		_DOLIT	4
ARM GAS  forth.s 			page 212


 4894      04000000 
 4895 61b8 B5470000 		_ADR	UDOTR			// display address
 4896 61bc 8F310000 		_DOLIT  0         // don't show base char 
 4896      00000000 
 4897 61c4 BD390000 		_ADR    BCHR
 4898 61c8 49330000 		_ADR    DUPP
 4899 61cc 25320000 		_ADR    AT 
 4900 61d0 B5320000 		_ADR    TOR      // save original value of BCHAR 
 4901 61d4 11320000 		_ADR    STORE 
 4902 61d8 D5450000 		_ADR	SPACE
 4903 61dc B5320000 		_ADR	TOR			// start count down loop
 4904 61e0 F7310000 		_BRAN	PDUM2			// skip first pass
 4904      00620000 
 4905              	PDUM1:
 4906 61e8 49330000 	    _ADR	DUPP
 4907 61ec 45320000 		_ADR	CAT
 4908 61f0 8F310000 		_DOLIT	3
 4908      03000000 
 4909 61f8 B5470000 		_ADR	UDOTR			// display numeric data
 4910 61fc E1340000 		_ADR	ONEP			// increment address
 4911              	PDUM2:
 4912 6200 B1310000 	    _ADR	DONXT
 4913 6204 E8610000 		.word	PDUM1	// loop till done
 4914 6208 51320000 		_ADR    RFROM   // restore BCHAR value 
 4915 620c BD390000 		_ADR    BCHR 
 4916 6210 11320000 		_ADR    STORE 
 4917 6214 6F2F0000 		_UNNEST
 4918              		.p2align 2 
 4919              	//    DUMP	( a u -- )
 4920              	// 	Dump u bytes from a, in a formatted manner.
 4921              	
 4922              	/**********************
 4923              		DUMP ( a n -- )
 4924              		hex dump memory 
 4925              	*********************/
 4926 6218 68610000 		_HEADER DUMP,4,"DUMP"
 4926      0444554D 
 4926      500000BF 
 4927 6224 504700BF 		_NEST
 4928 6228 8F310000 		_DOLIT  15 
 4928      0F000000 
 4929 6230 85340000 		_ADR    PLUS 
 4930 6234 8F310000 		_DOLIT  0xFFFFFFF0 
 4930      F0FFFFFF 
 4931 623c 05340000 		_ADR    ANDD 
 4932 6240 59330000 		_ADR    SWAP 
 4933 6244 8F310000 		_DOLIT  0xFFFFFFFC
 4933      FCFFFFFF 
 4934 624c 05340000 		_ADR    ANDD 
 4935 6250 59330000 		_ADR    SWAP 
 4936 6254 A5390000 		_ADR	BASE
 4937 6258 25320000 		_ADR	AT
 4938 625c B5320000 		_ADR	TOR
 4939 6260 39430000 		_ADR	HEX			// save radix,set hex
 4940 6264 8F310000 		_DOLIT	16
 4940      10000000 
 4941 626c 353E0000 		_ADR	SLASH			// change count to lines
ARM GAS  forth.s 			page 213


 4942 6270 B5320000 		_ADR	TOR
 4943 6274 F7310000 		_BRAN	DUMP4			// start count down loop
 4943      A4620000 
 4944              	DUMP1:
 4945 627c 91460000 	    _ADR	CR
 4946 6280 8F310000 		_DOLIT	16
 4946      10000000 
 4947 6288 7D360000 		_ADR	DDUP
 4948 628c A9610000 		_ADR	DMP			// display numeric
 4949 6290 2D360000 		_ADR	ROT
 4950 6294 2D360000 		_ADR	ROT
 4951 6298 D5450000 		_ADR	SPACE
 4952 629c D5450000 		_ADR	SPACE
 4953 62a0 29460000 		_ADR	TYPEE			// display printable characters
 4954              	DUMP4:
 4955 62a4 B1310000 	  _DONXT	DUMP1	// loop till done
 4955      7C620000 
 4956              	DUMP3:
 4957 62ac 29330000 		_ADR	DROP
 4958 62b0 51320000 		_ADR	RFROM
 4959 62b4 A5390000 		_ADR	BASE
 4960 62b8 11320000 		_ADR	STORE			// restore radix
 4961 62bc 6F2F0000 		_UNNEST
 4962              	
 4963              	/*******************************
 4964              	   TRACE. display in hexadecimal
 4965              	   TRACE. use a different buffer 
 4966              	   than DOT  to avoid current 
 4967              	   display overwrite.
 4968              	*******************************/ 
 4969              	TDOT: // ( u -- )
 4970 62c0 504700BF 		_NEST 
 4971 62c4 A5390000 		_ADR BASE 
 4972 62c8 25320000 		_ADR AT 
 4973 62cc B5320000 		_ADR TOR
 4974 62d0 39430000 		_ADR HEX  
 4975 62d4 393A0000 		_ADR HLD 
 4976 62d8 25320000 		_ADR AT 
 4977 62dc B5320000 		_ADR TOR   // R: base *hold 
 4978 62e0 953F0000 		_ADR HERE 
 4979 62e4 8F310000 		_DOLIT 160 
 4979      A0000000 
 4980 62ec 85340000 		_ADR PLUS
 4981 62f0 49330000 		_ADR DUPP 
 4982 62f4 B5320000 		_ADR TOR  
 4983 62f8 393A0000 		_ADR HLD 
 4984 62fc 11320000 		_ADR STORE
 4985 6300 8F310000 		_DOLIT 0  
 4985      00000000 
 4986 6308 89420000 		_ADR DIGS  
 4987 630c 29330000 		_ADR DROP
 4988 6310 8F310000 		_DOLIT '$'
 4988      24000000 
 4989 6318 05420000 		_ADR HOLD 
 4990 631c 393A0000 		_ADR HLD 
 4991 6320 25320000 		_ADR AT
 4992 6324 51320000 		_ADR RFROM   
ARM GAS  forth.s 			page 214


 4993 6328 89330000 		_ADR OVER 
 4994 632c 95340000 		_ADR SUBB 
 4995 6330 D5450000 		_ADR SPACE 
 4996 6334 29460000 		_ADR TYPEE 
 4997 6338 51320000 		_ADR RFROM 
 4998 633c 393A0000 		_ADR HLD 
 4999 6340 11320000 		_ADR STORE 
 5000 6344 51320000 		_ADR RFROM 
 5001 6348 A5390000 		_ADR BASE 
 5002 634c 11320000 		_ADR STORE 
 5003 6350 6F2F0000 		_UNNEST 
 5004              	
 5005              	/**********************
 5006              	   .S	  ( ... -- ... )
 5007              	 	Display the contents 
 5008              		of the data stack.
 5009              	*************************/
 5010 6354 1C620000 		_HEADER DOTS,2,".S"
 5010      022E5300 
 5011 635c 504700BF 		_NEST
 5012 6360 3D3F0000 		_ADR	DEPTH	// stack depth
 5013 6364 B5320000 		_ADR	TOR		// start count down loop
 5014 6368 F7310000 		_BRAN	DOTS2  // skip first pass
 5014      7C630000 
 5015              	DOTS1:
 5016 6370 85320000 		_ADR	RAT
 5017 6374 613F0000 		_ADR	PICK
 5018 6378 C1620000 		_ADR	TDOT // index stack, display contents
 5019              	DOTS2:
 5020 637c B1310000 		_DONXT	DOTS1 // loop till done
 5020      70630000 
 5021 6384 91460000 		_ADR	CR 
 5022 6388 6F2F0000 		_UNNEST
 5023              	
 5024              	RBASE: 
 5025 638c 47F8046D 		_PUSH 
 5026 6390 4FF68076 		_MOV32 TOS,RPP 
 5026      C2F20106 
 5027 6398 FCF7E6BD 		_NEXT 
 5028              	
 5029              	
 5030              	/**************************
 5031              	  R.  display return stack 
 5032              	**************************/
 5033              	RDOT: 
 5034 639c 504700BF 		_NEST 
 5035 63a0 8D630000 		_ADR RBASE
 5036 63a4 15330000 		_ADR RPAT 
 5037 63a8 95340000 		_ADR SUBB
 5038 63ac 65350000 		_ADR CELLSL   
 5039 63b0 8F310000 		_DOLIT 2
 5039      02000000 
 5040 63b8 95340000 		_ADR SUBB 
 5041 63bc B5320000 		_ADR TOR
 5042 63c0 8D630000 		_ADR RBASE 
 5043 63c4 31350000 	1:	_ADR CELLM 
 5044 63c8 49330000 		_ADR DUPP 
ARM GAS  forth.s 			page 215


 5045 63cc 25320000 		_ADR AT 
 5046 63d0 C1620000 		_ADR TDOT 
 5047 63d4 51320000 		_ADR RFROM   
 5048 63d8 F1340000 		_ADR ONEM 
 5049 63dc 49330000 		_ADR DUPP
 5050 63e0 B5320000 		_ADR TOR 
 5051 63e4 B5370000 		_ADR ZEQUAL   
 5052 63e8 CF310000 		_QBRAN 1b
 5052      C4630000 
 5053 63f0 51320000 		_ADR RFROM  
 5054 63f4 55360000 		_ADR DDROP
 5055 63f8 91460000 		_ADR CR   
 5056 63fc 6F2F0000 		_UNNEST 
 5057              	
 5058              	/**************************
 5059              		TRACE ( -- )
 5060              		display stacks content 
 5061              	**************************/
 5062 6400 58630000 		_HEADER TRACE,5,"TRACE"
 5062      05545241 
 5062      434500BF 
 5063 640c 504700BF 		_NEST
 5064 6410 91460000 		_ADR CR 
 5065 6414 8F310000 		_DOLIT '>' 
 5065      3E000000 
 5066 641c 8F310000 		_DOLIT 'S'
 5066      53000000 
 5067 6424 31300000 		_ADR EMIT 
 5068 6428 31300000 		_ADR EMIT  
 5069 642c 5D630000 		_ADR DOTS
 5070 6430 8F310000 		_DOLIT '>'
 5070      3E000000 
 5071 6438 8F310000 		_DOLIT 'R'
 5071      52000000 
 5072 6440 31300000 		_ADR EMIT 
 5073 6444 31300000 		_ADR EMIT 
 5074 6448 9D630000 		_ADR RDOT 
 5075 644c 6F2F0000 		_UNNEST 
 5076              	
 5077              	
 5078              	/****************************
 5079              	  >BODY  ( xt -- adr )
 5080              	  get parameter field address
 5081              	  from code field address 
 5082              	****************************/
 5083 6450 04640000 		_HEADER TOBODY,5,">BODY"
 5083      053E424F 
 5083      445900BF 
 5084 645c 06F11006 		add TOS,#4*CELLL   
 5085 6460 FCF782BD 		_NEXT 		
 5086              	
 5087              	/*****************************
 5088              		>VECTOR ( xt -- adr )
 5089              		for words defined by 
 5090              		CREATE  return 
 5091              		address vector slot 
 5092              		for DOES> 
ARM GAS  forth.s 			page 216


 5093              	hidden word.	
 5094              	*****************************/
 5095              	TOVECTOR:
 5096 6464 06F10806 		add TOS,#2*CELLL
 5097 6468 FCF77EBD 		_NEXT 
 5098              	
 5099              	/*****************************
 5100              	    >NFA	( cfa -- nfa | F )
 5101              	 	Convert code address 
 5102              		to a name address.
 5103              	*****************************/
 5104 646c 54640000 		_HEADER TONFA,4,">NFA"
 5104      043E4E46 
 5104      410000BF 
 5105 6478 504700BF 		_NEST
 5106 647c B5320000 		_ADR	TOR			//  
 5107 6480 513A0000 		_ADR	CNTXT			//  va
 5108 6484 25320000 		_ADR	AT			//  nfa
 5109              	TNAM1:
 5110 6488 49330000 		_ADR	DUPP			//  nfa nfa
 5111 648c CF310000 		_QBRAN	TNAM2	//  vocabulary end, no match
 5111      BC640000 
 5112 6494 49330000 		_ADR	DUPP			//  nfa nfa
 5113 6498 D54B0000 		_ADR	TOCFA			//  nfa cfa
 5114 649c 85320000 		_ADR	RAT			//  nfa cfa code
 5115 64a0 2D340000 		_ADR	XORR			//  nfa f --
 5116 64a4 CF310000 		_QBRAN	TNAM2
 5116      BC640000 
 5117 64ac 31350000 		_ADR	CELLM			//  la 
 5118 64b0 25320000 		_ADR	AT			//  next_nfa
 5119 64b4 F7310000 		_BRAN	TNAM1
 5119      88640000 
 5120              	TNAM2:	
 5121 64bc 51320000 		_ADR	RFROM
 5122 64c0 29330000 		_ADR	DROP			//  0|nfa --
 5123 64c4 6F2F0000 		_UNNEST			// 0
 5124              	
 5125              	
 5126              	/********************************
 5127              	    .ID	 ( na -- )
 5128              	 	Display the name at address.
 5129              	********************************/
 5130 64c8 70640000 		_HEADER DOTID,3,".ID"
 5130      032E4944 
 5131 64d0 504700BF 		_NEST
 5132 64d4 95350000 		_ADR	QDUP			// if zero no name
 5133 64d8 CF310000 		_QBRAN	DOTI1
 5133      FC640000 
 5134 64e0 F9380000 		_ADR	COUNT
 5135 64e4 8F310000 		_DOLIT	0x1F
 5135      1F000000 
 5136 64ec 05340000 		_ADR	ANDD			// mask lexicon bits
 5137 64f0 D5450000 		_ADR	SPACE 
 5138 64f4 29460000 		_ADR	TYPEE
 5139 64f8 6F2F0000 		_UNNEST			// display name string
 5140              	DOTI1:
 5141 64fc ED460000 		_DOTQP	9," {noName}"
ARM GAS  forth.s 			page 217


 5141      09207B6E 
 5141      6F4E616D 
 5141      657D00BF 
 5142 650c 6F2F0000 		_UNNEST
 5143              	
 5144              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 5145              	.if WANT_SEE 
 5146              	/*******************************
 5147              	    SEE	 ( -- //  string> )
 5148              	 	A simple decompiler.
 5149              	*******************************/
 5150              		_HEADER SEE,3,"SEE"
 5151              		_NEST
 5152              		_ADR	TICK	//  ca --, starting address
 5153              		_ADR	CR	
 5154              		_DOLIT	20
 5155              		_ADR	TOR
 5156              	SEE1:
 5157              		_ADR	CELLP			//  a
 5158              		_ADR	DUPP			//  a a
 5159              		_ADR	DECOMP		//  a
 5160              		_DONXT	SEE1
 5161              		_ADR	DROP
 5162              		_UNNEST
 5163              	
 5164              	/*************************
 5165              	 	DECOMPILE ( a -- )
 5166              	 	Convert code in a.  
 5167              		Display name of command or as data.
 5168              	*************************************/
 5169              		_HEADER DECOMP,9,"DECOMPILE"
 5170              		_NEST
 5171              		_ADR	DUPP			//  a a
 5172              	// 	_ADR	TOR			//  a
 5173              		_ADR	AT			//  a code
 5174              		_ADR	DUPP			//  a code code
 5175              		_DOLIT	0xF800D000 //0xF800F800
 5176              		_ADR	ANDD
 5177              		_DOLIT	0xF000D000 //0xF800F000
 5178              		_ADR	EQUAL			//  a code ?
 5179              		_ADR	INVER 
 5180              		_QBRAN	DECOM2	//  not a command
 5181              		//  a valid_code --, extract address and display name
 5182              		MOVW	IP,#0xFFE
 5183              		MOV	WP,TOS
 5184              		LSL	TOS,TOS,#21		//  get bits 22-12
 5185              		ASR	TOS,TOS,#9		//  with sign extension
 5186              		LSR	WP,WP,#15		//  get bits 11-1
 5187              		AND	WP,WP,IP		//  retain only bits 11-1
 5188              		ORR	TOS,TOS,WP		//  get bits 22-1
 5189              		NOP
 5190              		_ADR	OVER			//  a offset a
 5191              		_ADR	PLUS			//  a target-4
 5192              		_ADR	CELLP			//  a target
 5193              		_ADR	TONFA			//  a na/0 --, is it a name?
 5194              		_ADR	QDUP			//  name address or zero
 5195              		_QBRAN	DECOM1
ARM GAS  forth.s 			page 218


 5196              		_ADR	SPACE			//  a na
 5197              		_ADR	DOTID			//  a --, display name
 5198              	// 	_ADR	RFROM			//  a
 5199              		_ADR	DROP
 5200              		_UNNEST
 5201              	DECOM1:	// _ADR	RFROM		//  a
 5202              		_ADR	AT			//  data
 5203              		_ADR	UDOT			//  display data
 5204              		_UNNEST
 5205              	DECOM2:
 5206              		_ADR	UDOT
 5207              	// 	_ADR	RFROM
 5208              		_ADR	DROP
 5209              		_UNNEST
 5210              	.endif 
 5211              	
 5212              	
 5213              	/*********************
 5214              	    WORDS	( -- )
 5215              	 	Display the names 
 5216              		in the context vocabulary.
 5217              	*******************************/
 5218 6510 CC640000 		_HEADER WORDS,5,"WORDS"
 5218      05574F52 
 5218      445300BF 
 5219 651c 504700BF 		_NEST
 5220 6520 91460000 		_ADR	CR
 5221 6524 513A0000 		_ADR	CNTXT
 5222 6528 25320000 		_ADR	AT			// only in context
 5223              	WORS1:
 5224 652c 95350000 		_ADR	QDUP			// ?at end of list
 5225 6530 CF310000 		_QBRAN	WORS2
 5225      54650000 
 5226 6538 49330000 		_ADR	DUPP
 5227 653c D5450000 		_ADR	SPACE
 5228 6540 D1640000 		_ADR	DOTID			// display a name
 5229 6544 31350000 		_ADR	CELLM
 5230 6548 25320000 		_ADR	AT
 5231 654c F7310000 		_BRAN	WORS1
 5231      2C650000 
 5232              	WORS2:
 5233 6554 6F2F0000 		_UNNEST
 5234              	
 5235              	
 5236              	/*************************
 5237              		MARKER <string> ( -- )
 5238              	    create forget point 
 5239              		in dictionary 
 5240              	*************************/	
 5241 6558 14650000 		_HEADER MARKER,6,"MARKER"
 5241      064D4152 
 5241      4B455200 
 5242 6564 504700BF 		_NEST
 5243 6568 79600000 		_ADR	CREAT 
 5244 656c D95E0000 		_ADR	DODOES
 5245 6570 6F2F0000 		_UNNEST 
 5246 6574 504700BF 		_NEST 
ARM GAS  forth.s 			page 219


 5247 6578 8F310000 		_DOLIT	4*CELLL  
 5247      10000000 
 5248 6580 95340000 		_ADR	SUBB
 5249 6584 E1340000 		_ADR	ONEP  
 5250 6588 79640000 		_ADR	TONFA 
 5251 658c 31350000 		_ADR	CELLM
 5252 6590 25320000 		_ADR	AT  
 5253 6594 B53A0000 		_ADR	LAST 
 5254 6598 11320000 		_ADR	STORE 
 5255 659c A95D0000 		_ADR	OVERT
 5256 65a0 6F2F0000 		_UNNEST 
 5257              	
 5258              	/*********************************
 5259              		ARRAY "name" ( n -- )
 5260              	    create an array of n elements 
 5261              	*********************************/
 5262 65a4 5C650000 		_HEADER ARRAY,5,"ARRAY"
 5262      05415252 
 5262      415900BF 
 5263 65b0 504700BF 		_NEST 
 5264 65b4 B54B0000 		_ADR	TOKEN
 5265 65b8 AD5C0000 		_ADR	SNAME
 5266 65bc A95D0000 		_ADR	OVERT
 5267 65c0 792F0000 		_ADR	COMPI_NEST
 5268 65c4 8F310000 		_DOLIT	DO_ARRAY
 5268      F0650000 
 5269 65cc 295E0000 		_ADR	CALLC
 5270 65d0 8F310000 		_DOLIT	UNNEST 
 5270      6E2F0000 
 5271 65d8 295E0000 		_ADR	CALLC  
 5272 65dc 8F310000 		_DOLIT  4 
 5272      04000000 
 5273 65e4 A5340000 		_ADR    STAR 
 5274 65e8 15540000 		_ADR    ALLOT 
 5275 65ec 6F2F0000 		_UNNEST 	
 5276              	
 5277              	// does> du array
 5278              	DO_ARRAY:
 5279 65f0 504700BF 		_NEST  
 5280 65f4 8F310000 		_DOLIT 4 
 5280      04000000 
 5281 65fc A5340000 		_ADR STAR  
 5282 6600 85320000 		_ADR RAT  
 5283 6604 21350000 		_ADR CELLP 
 5284 6608 85340000 		_ADR PLUS  
 5285 660c 6F2F0000 		_UNNEST 
 5286              	
 5287              	
 5288              	/****************
 5289              	  cold start
 5290              	*****************/
 5291              	
 5292              	/**********************************
 5293              	    VER	 ( -- n )
 5294              	 	Return the version 
 5295              		number of this implementation.
 5296              	hidden word used by COLD
ARM GAS  forth.s 			page 220


 5297              	**********************************/
 5298              	VERSN:
 5299 6610 504700BF 		_NEST
 5300 6614 8F310000 		_DOLIT	VER*256+EXT
 5300      00010000 
 5301 661c 6F2F0000 		_UNNEST
 5302              	
 5303              	/*********************
 5304              	    hi	  ( -- )
 5305              	 	Display the sign-on 
 5306              		message.
 5307              	***********************/
 5308 6620 A8650000 		_HEADER HI,2,"HI"
 5308      02484900 
 5309 6628 504700BF 		_NEST
 5310 662c 91460000 		_ADR	CR	// initialize I/O
 5311 6630 ED460000 		_DOTQP	17, "beyond Jupiter, v" 
 5311      11626579 
 5311      6F6E6420 
 5311      4A757069 
 5311      7465722C 
 5312 6648 A5390000 		_ADR	BASE
 5313 664c 25320000 		_ADR	AT
 5314 6650 39430000 		_ADR	HEX	// save radix
 5315 6654 11660000 		_ADR	VERSN
 5316 6658 E5410000 		_ADR	BDIGS
 5317 665c 8F310000 		_DOLIT  0 
 5317      00000000 
 5318 6664 69420000 		_ADR	DIG
 5319 6668 69420000 		_ADR	DIG
 5320 666c 8F310000 		_DOLIT	'.'
 5320      2E000000 
 5321 6674 05420000 		_ADR	HOLD
 5322 6678 89420000 		_ADR	DIGS
 5323 667c E5420000 		_ADR	EDIGS
 5324 6680 29460000 		_ADR	TYPEE	// format version number
 5325 6684 A5390000 		_ADR	BASE
 5326 6688 11320000 		_ADR	STORE
 5327 668c 91460000 		_ADR	CR
 5328 6690 6F2F0000 		_UNNEST			// restore radix
 5329              	
 5330              	/***********************
 5331              	   HI_BOTH ( -- )
 5332              	   display sign-on 
 5333              	   on both CONSOLE
 5334              	***********************/
 5335              	HI_BOTH:
 5336 6694 504700BF 	    _NEST 
 5337 6698 010C0000 		_ADR LOCAL 
 5338 669c 310C0000 		_ADR CONSOLE 
 5339 66a0 29660000 		_ADR HI 
 5340 66a4 190C0000 		_ADR SERIAL 
 5341 66a8 310C0000 		_ADR CONSOLE 
 5342 66ac 29660000 		_ADR HI
 5343 66b0 6F2F0000 		_UNNEST 
 5344              	
 5345              	/**********************
ARM GAS  forth.s 			page 221


 5346              	 check if PS2 keyboard 
 5347              	 present.
 5348              	**********************/
 5349              	PS2_QUERY: 
 5350 66b4 504700BF 		_NEST 
 5351 66b8 8F310000 		_DOLIT 400 
 5351      90010000 
 5352 66c0 C5300000 		_ADR PAUSE
 5353 66c4 211A0000 		_ADR PS2_QKEY
 5354 66c8 CF310000 		_QBRAN 1f
 5354      E4660000 
 5355 66d0 8F310000 		_DOLIT BAT_OK 
 5355      AA000000 
 5356 66d8 2D340000 		_ADR XORR 
 5357 66dc CF310000 		_QBRAN 9f 
 5357      28670000 
 5358 66e4 091C0000 	1:	_ADR KBD_RST
 5359 66e8 8F310000 		_DOLIT BAT_OK 
 5359      AA000000 
 5360 66f0 2D340000 		_ADR XORR  
 5361 66f4 CF310000 		_QBRAN 9f  
 5361      28670000 
 5362              	// no ps2 keyboard 
 5363              	// swith to serial console
 5364 66fc 91460000 		_ADR CR 
 5365 6700 ED460000 		_DOTQP 25,"no PS2 keyboard detected."
 5365      196E6F20 
 5365      50533220 
 5365      6B657962 
 5365      6F617264 
 5366 6720 190C0000 		_ADR SERIAL 
 5367 6724 310C0000 		_ADR CONSOLE 
 5368 6728 6F2F0000 	9:	_UNNEST 
 5369              	
 5370              	/*************************
 5371              	   check PA8 to 
 5372              	   select console 
 5373              	   PA8 -> low  LOCAL 
 5374              	   PA8 -> high SERIAL 
 5375              	*************************/
 5376              	IF_SENSE:
 5377 672c 504700BF 		_NEST 
 5378 6730 010C0000 		_ADR LOCAL 
 5379 6734 8F310000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 5379      10000240 
 5380 673c 25320000 		_ADR AT 
 5381 6740 8F310000 		_DOLIT (1<<8)
 5381      00010000 
 5382 6748 05340000 		_ADR ANDD 
 5383 674c CF310000 		_QBRAN 9f 
 5383      58670000 
 5384 6754 E1340000 		_ADR ONEP 
 5385 6758 310C0000 	9:  _ADR CONSOLE 
 5386 675c 6F2F0000 		_UNNEST 
 5387              	
 5388              	/****************************
 5389              	   display READY on active
ARM GAS  forth.s 			page 222


 5390              	   console
 5391              	***************************/
 5392              	READY:
 5393 6760 504700BF 	    _NEST 
 5394 6764 ED460000 		_DOTQP 5,"READY"
 5394      05524541 
 5394      445900BF 
 5395 6770 91460000 		_ADR  CR 
 5396 6774 6F2F0000 	    _UNNEST 
 5397              	
 5398              	/********************
 5399              	    COLD	( -- )
 5400              	 	The high level cold 
 5401              		start sequence.
 5402              	**************************/
 5403 6778 24660000 		.word	LINK 
 5404              		LINK = . 
 5405 677c 04       	_LASTN:	.byte  4
 5406 677d 434F4C44 		.ascii "COLD"
 5407 6781 0000BF   		.p2align 2	
 5408              	COLD:
 5409 6784 00B5F9F7 		_CALL forth_init 
 5409      D7FE5DF8 
 5409      04EB
 5410 678e DFF85CC0 		ldr IP,=COLD1 
 5411 6792 FCF7E9BB 		_NEXT
 5412 6796 00BF     		.p2align 2 
 5413              	COLD1:
 5414 6798 8F310000 		_DOLIT  0 
 5414      00000000 
 5415 67a0 F9300000 		_ADR ULED // turn off user LED 
 5416 67a4 8F310000 		_DOLIT	UZERO
 5416      64080000 
 5417 67ac 8F310000 		_DOLIT	UPP
 5417      00000020 
 5418 67b4 8F310000 		_DOLIT	ULAST-UZERO
 5418      C0000000 
 5419 67bc 85400000 		_ADR	WMOVE 			// initialize user area
 5420 67c0 D1520000 		_ADR	PRESE			// initialize stack and TIB
 5421 67c4 6D1F0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 5422 67c8 B5660000 		_ADR 	PS2_QUERY  
 5423 67cc 8D390000 		_ADR	TBOOT
 5424 67d0 21400000 		_ADR	ATEXE			// application boot
 5425 67d4 A95D0000 		_ADR	OVERT
 5426 67d8 2D670000 		_ADR	IF_SENSE
 5427 67dc 61670000 		_ADR    READY 
 5428 67e0 F7310000 		_BRAN	QUIT			// start interpretation
 5428      E8520000 
 5429              	COLD2:
 5430              		.p2align 2 	
 5431              	CTOP:
 5432 67e8 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 5433              	
 5434              	
 5435 67ec 98670000 	  .end 
ARM GAS  forth.s 			page 223


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 224


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 225


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 226


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 227


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 228


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020017130 WB_BUFF
          macros.inc:54     *ABS*:0000000020000000 UPP
          macros.inc:55     *ABS*:0000000020000512 DTOP
          macros.inc:56     *ABS*:000000002001712c DEND
          macros.inc:57     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:59     *ABS*:0000000000000040 COMPO
          macros.inc:60     *ABS*:0000000000000080 IMEDD
          macros.inc:61     *ABS*:00000000ffffff1f MASKK
          macros.inc:63     *ABS*:0000000000000004 CELLL
          macros.inc:64     *ABS*:000000000000000a BASEE
          macros.inc:65     *ABS*:0000000000000008 VOCSS
          macros.inc:67     *ABS*:0000000000000008 BKSPP
          macros.inc:68     *ABS*:000000000000000a LF
          macros.inc:69     *ABS*:000000000000000d CRR
          macros.inc:70     *ABS*:000000000000001b ERR
          macros.inc:71     *ABS*:0000000000000027 TIC
          macros.inc:76     *ABS*:0000000000000004 RNDSEED
          macros.inc:77     *ABS*:0000000000000008 TICKS
          macros.inc:78     *ABS*:000000000000000c CD_TIMER
          macros.inc:79     *ABS*:0000000000000010 BOOT
          macros.inc:80     *ABS*:0000000000000014 STDIN
          macros.inc:81     *ABS*:0000000000000018 STDOUT
          macros.inc:82     *ABS*:000000000000001c NBASE
          macros.inc:83     *ABS*:0000000000000020 BCHAR
          macros.inc:84     *ABS*:0000000000000024 TMP
ARM GAS  forth.s 			page 229


          macros.inc:85     *ABS*:0000000000000028 CSPAN
          macros.inc:86     *ABS*:000000000000002c TOIN
          macros.inc:87     *ABS*:0000000000000030 SRC
          macros.inc:88     *ABS*:0000000000000030 NTIBB
          macros.inc:89     *ABS*:0000000000000034 TIBUF
          macros.inc:90     *ABS*:0000000000000038 SRCID
             forth.s:3588   .text:00000000000051fc EVAL
          macros.inc:92     *ABS*:0000000000000040 VHOLD
          macros.inc:93     *ABS*:0000000000000044 CTXT
          macros.inc:94     *ABS*:0000000000000048 FORTH_CTOP
          macros.inc:95     *ABS*:000000000000004c USER_CTOP
          macros.inc:96     *ABS*:0000000000000050 LASTN
          macros.inc:97     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:98     *ABS*:0000000000000054 RX_QUEUE
          macros.inc:99     *ABS*:0000000000000064 RX_HEAD
          macros.inc:100    *ABS*:0000000000000068 RX_TAIL
          macros.inc:101    *ABS*:000000000000006c VID_CNTR
          macros.inc:102    *ABS*:0000000000000070 VID_STATE
          macros.inc:103    *ABS*:0000000000000074 VID_FIELD
          macros.inc:104    *ABS*:0000000000000078 VID_BUFFER
          macros.inc:105    *ABS*:000000000000007c KBD_STRUCT
          macros.inc:106    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:107    *ABS*:0000000000000080 KBD_QUEUE
          macros.inc:108    *ABS*:0000000000000090 KBD_QHEAD
          macros.inc:109    *ABS*:0000000000000094 KBD_QTAIL
          macros.inc:110    *ABS*:0000000000000098 ROW
          macros.inc:111    *ABS*:000000000000009c COL
          macros.inc:112    *ABS*:00000000000000a0 BK_COLOR
          macros.inc:113    *ABS*:00000000000000a4 PEN_COLOR
          macros.inc:114    *ABS*:00000000000000a8 VFPSW
          macros.inc:115    *ABS*:00000000000000ac VFBASE
          macros.inc:116    *ABS*:00000000000000b0 BEEP_DTMR
          macros.inc:117    *ABS*:00000000000000b4 CSTATE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000e28 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000b0c uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001704 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002f68 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3650   .text:00000000000052d0 PRESE
             forth.s:2668   .text:00000000000046ec DOTQP
ARM GAS  forth.s 			page 230


              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002fb4 CFSR
             forth.s:579    .text:0000000000003348 DUPP
             forth.s:505    .text:00000000000032b4 TOR
             forth.s:340    .text:000000000000318e DOLIT
             forth.s:1330   .text:00000000000039a4 BASE
             forth.s:426    .text:0000000000003210 STORE
             forth.s:2752   .text:00000000000047e8 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:463    .text:0000000000003250 RFROM
             forth.s:676    .text:0000000000003404 ANDD
             forth.s:381    .text:00000000000031ce QBRAN
             forth.s:145    .text:0000000000002fd4 BFAR
             forth.s:192    .text:0000000000003030 EMIT
             forth.s:2557   .text:00000000000045d4 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:00000000000022c0 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2620   .text:0000000000004690 CR
             forth.s:436    .text:0000000000003224 AT
             forth.s:742    .text:0000000000003494 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2770   .text:000000000000481c DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:872    .text:0000000000003594 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:733    .text:0000000000003484 PLUS
             forth.s:1252   .text:00000000000038f8 COUNT
             forth.s:2585   .text:0000000000004628 TYPEE
             forth.s:1068   .text:0000000000003750 CLZ
             forth.s:587    .text:0000000000003358 SWAP
             forth.s:724    .text:0000000000003474 LSHIFT
               fpu.s:123    .text:00000000000022e0 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3661   .text:00000000000052e8 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
ARM GAS  forth.s 			page 231


              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:3454   .text:0000000000005058 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:275    .text:00000000000030f8 ULED
             forth.s:1303   .text:0000000000003960 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:715    .text:000000000000345c RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:0000000000002262 fpu_init
          ser-term.s:56     .text:0000000000000b3a ser_init
             tvout.s:74     .text:0000000000000d78 tv_init
           ps2_kbd.s:307    .text:0000000000001924 kbd_init
         spi-flash.s:43     .text:0000000000001d38 flash_spi_init
             forth.s:5408   .text:0000000000006784 COLD
             forth.s:83     .text:0000000000002f60 NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:911    .text:0000000000000924 ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:5335   .text:0000000000006694 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001a20 PS2_QKEY
ARM GAS  forth.s 			page 232


             tvout.s:563    .text:00000000000012e8 TV_EMIT
             forth.s:3522   .text:0000000000005108 INTER
             forth.s:5405   .text:000000000000677c _LASTN
             forth.s:5431   .text:00000000000067e8 CTOP
             forth.s:5404   .text:000000000000677c LINK
              init.s:916    .text:0000000000000924 $d
       environment.s:32     .text:0000000000000954 _ENVQ
       environment.s:32     .text:0000000000000964 ENVQ
       environment.s:35     .text:0000000000000968 $d
             forth.s:1408   .text:0000000000003a50 CNTXT
       environment.s:215    .text:0000000000000aea _ENVLASTN
             forth.s:562    .text:0000000000003328 DROP
             forth.s:791    .text:00000000000034f0 ONEM
             forth.s:3210   .text:0000000000004d48 NAMEQ
             forth.s:349    .text:00000000000031a4 EXECU
             forth.s:410    .text:00000000000031f6 BRAN
             forth.s:90     .text:0000000000002f6e UNNEST
       environment.s:201    .text:0000000000000ac6 ENVLNK
       environment.s:82     .text:00000000000009c8 _CNTDSTR
       environment.s:82     .text:00000000000009d8 $t
       environment.s:82     .text:00000000000009d8 CNTDSTR
       environment.s:223    .text:0000000000000b00 flag_true
       environment.s:95     .text:00000000000009e2 $d
       environment.s:95     .text:00000000000009e6 _SLHOLD
       environment.s:95     .text:00000000000009ec $t
       environment.s:95     .text:00000000000009ec SLHOLD
       environment.s:107    .text:00000000000009f6 $d
       environment.s:107    .text:00000000000009fa _SLPAD
       environment.s:107    .text:0000000000000a00 SLPAD
       environment.s:118    .text:0000000000000a0a $d
       environment.s:118    .text:0000000000000a0e _ADRBITS
       environment.s:118    .text:0000000000000a20 $t
       environment.s:118    .text:0000000000000a20 ADRBITS
       environment.s:130    .text:0000000000000a2a $d
       environment.s:130    .text:0000000000000a2e _FLOORED
       environment.s:130    .text:0000000000000a36 $t
       environment.s:130    .text:0000000000000a38 FLOORED
       environment.s:141    .text:0000000000000a3a $d
       environment.s:141    .text:0000000000000a3e _MAXCHAR
       environment.s:141    .text:0000000000000a48 MAXCHAR
       environment.s:152    .text:0000000000000a52 $d
       environment.s:152    .text:0000000000000a56 _MAXD
       environment.s:152    .text:0000000000000a5c $t
       environment.s:152    .text:0000000000000a5c MAXD
       environment.s:165    .text:0000000000000a76 $d
       environment.s:165    .text:0000000000000a7a _MAXN
       environment.s:165    .text:0000000000000a80 $t
       environment.s:165    .text:0000000000000a80 MAXN
       environment.s:176    .text:0000000000000a8e $d
       environment.s:176    .text:0000000000000a92 _MAXU
       environment.s:176    .text:0000000000000a98 $t
       environment.s:176    .text:0000000000000a98 MAXU
       environment.s:187    .text:0000000000000aa2 $d
       environment.s:187    .text:0000000000000aa6 _MAXUD
       environment.s:187    .text:0000000000000ab0 MAXUD
       environment.s:201    .text:0000000000000ac2 $d
       environment.s:201    .text:0000000000000ac6 _RSTKCELLS
ARM GAS  forth.s 			page 233


       environment.s:201    .text:0000000000000adc RSTKCELLS
       environment.s:213    .text:0000000000000ae6 $d
       environment.s:214    .text:0000000000000aea ENVLINK
       environment.s:217    .text:0000000000000af6 $t
       environment.s:218    .text:0000000000000af8 STKCELLS
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000b92 $d
          ser-term.s:90     .text:0000000000000b96 _SER_QKEY
          ser-term.s:90     .text:0000000000000ba0 SER_QKEY
          ser-term.s:110    .text:0000000000000bcc $d
          ser-term.s:110    .text:0000000000000bd0 _SER_EMIT
          ser-term.s:110    .text:0000000000000bdc SER_EMIT
          ser-term.s:124    .text:0000000000000bf6 $d
          ser-term.s:124    .text:0000000000000bfa _LOCAL
          ser-term.s:124    .text:0000000000000c00 $t
          ser-term.s:124    .text:0000000000000c00 LOCAL
          ser-term.s:133    .text:0000000000000c0c $d
          ser-term.s:133    .text:0000000000000c10 _SERIAL
          ser-term.s:133    .text:0000000000000c18 SERIAL
          ser-term.s:142    .text:0000000000000c24 $d
          ser-term.s:142    .text:0000000000000c28 _CONSOLE
          ser-term.s:142    .text:0000000000000c30 $t
          ser-term.s:142    .text:0000000000000c30 CONSOLE
          ser-term.s:164    .text:0000000000000c50 $d
          ser-term.s:164    .text:0000000000000c54 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000c60 ANSI_PARAM
          ser-term.s:166    .text:0000000000000c64 $d
             forth.s:783    .text:00000000000034e0 ONEP
             forth.s:1788   .text:0000000000003dfc SLMOD
          ser-term.s:191    .text:0000000000000cd0 _ANSI_ESC
          ser-term.s:191    .text:0000000000000cd8 ANSI_ESC
          ser-term.s:193    .text:0000000000000cdc $d
          ser-term.s:203    .text:0000000000000cfc _SER_AT
          ser-term.s:203    .text:0000000000000d04 SER_AT
          ser-term.s:205    .text:0000000000000d08 $d
          ser-term.s:219    .text:0000000000000d38 _SER_CLS
          ser-term.s:219    .text:0000000000000d40 $t
          ser-term.s:219    .text:0000000000000d40 SER_CLS
          ser-term.s:221    .text:0000000000000d44 $d
          ser-term.s:228    .text:0000000000000d68 $d
           tvout.inc:19     *ABS*:0000000000000140 HRES
           tvout.inc:20     *ABS*:00000000000000c8 VRES
           tvout.inc:21     *ABS*:0000000000000004 BPP
           tvout.inc:22     *ABS*:00000000000000a0 BPR
           tvout.inc:23     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:25     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:26     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
ARM GAS  forth.s 			page 234


             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000d78 $t
             tvout.s:150    .text:0000000000000e54 state_vsync
             tvout.s:191    .text:0000000000000ea8 state_pre_video
             tvout.s:202    .text:0000000000000eba state_video_out
             tvout.s:237    .text:0000000000000f18 state_post_video
             tvout.s:254    .text:0000000000000f3e tv_isr_exit
             tvout.s:180    .text:0000000000000e8e sync_end
             tvout.s:246    .text:0000000000000f2a frame_end
             tvout.s:264    .text:0000000000000f40 $d
             tvout.s:264    .text:0000000000000f44 _BACKCOLOR
             tvout.s:264    .text:0000000000000f50 BACKCOLOR
             tvout.s:271    .text:0000000000000f5c $d
             tvout.s:271    .text:0000000000000f60 _PENCOLOR
             tvout.s:271    .text:0000000000000f6a $t
             tvout.s:271    .text:0000000000000f6c PENCOLOR
             tvout.s:278    .text:0000000000000f78 $d
             tvout.s:278    .text:0000000000000f7c _CURSOR_COL
             tvout.s:278    .text:0000000000000f84 CURSOR_COL
             tvout.s:285    .text:0000000000000f90 $d
             tvout.s:285    .text:0000000000000f94 _CURSOR_ROW
             tvout.s:285    .text:0000000000000f98 $t
             tvout.s:285    .text:0000000000000f98 CURSOR_ROW
             tvout.s:292    .text:0000000000000fa4 $d
             tvout.s:292    .text:0000000000000fa8 _ROWY
             tvout.s:292    .text:0000000000000fae $t
             tvout.s:292    .text:0000000000000fb0 ROWY
             tvout.s:299    .text:0000000000000fbc $d
             tvout.s:299    .text:0000000000000fc0 _COLX
             tvout.s:299    .text:0000000000000fc6 $t
             tvout.s:299    .text:0000000000000fc8 COLX
             tvout.s:306    .text:0000000000000fd4 $d
             tvout.s:306    .text:0000000000000fd8 _FONT
             tvout.s:306    .text:0000000000000fe0 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000fec $d
             tvout.s:313    .text:0000000000000ff0 _VIDBUFF
             tvout.s:313    .text:0000000000000ff8 $t
             tvout.s:313    .text:0000000000000ff8 VIDBUFF
             tvout.s:325    .text:0000000000001002 $d
             tvout.s:325    .text:0000000000001006 _PLOT
             tvout.s:325    .text:000000000000100c PLOT
             tvout.s:373    .text:0000000000001090 plot_op
             tvout.s:341    .text:0000000000001038 op_back
             tvout.s:350    .text:0000000000001052 op_pen
ARM GAS  forth.s 			page 235


             tvout.s:359    .text:000000000000106c op_invert
             tvout.s:363    .text:0000000000001074 op_xor
             tvout.s:373    .text:0000000000001090 $d
             tvout.s:378    .text:0000000000001098 _VSYNC
             tvout.s:378    .text:000000000000109e $t
             tvout.s:378    .text:00000000000010a0 VSYNC
             tvout.s:386    .text:00000000000010aa $d
             tvout.s:386    .text:00000000000010ae _CLS
             tvout.s:386    .text:00000000000010b2 $t
             tvout.s:386    .text:00000000000010b4 CLS
             tvout.s:410    .text:00000000000010f6 $d
             tvout.s:410    .text:00000000000010fa _CLRLINE
             tvout.s:410    .text:0000000000001102 $t
             tvout.s:410    .text:0000000000001104 CLRLINE
             tvout.s:412    .text:0000000000001108 $d
             forth.s:751    .text:00000000000034a4 STAR
             forth.s:2095   .text:00000000000040cc FILL
             tvout.s:427    .text:000000000000113c _SCROLLUP
             tvout.s:427    .text:0000000000001148 SCROLLUP
             tvout.s:429    .text:000000000000114c $d
             forth.s:2063   .text:0000000000004084 WMOVE
             tvout.s:448    .text:0000000000001194 _SCROLLDOWN
             tvout.s:448    .text:00000000000011a0 SCROLLDOWN
             tvout.s:450    .text:00000000000011a4 $d
             tvout.s:467    .text:00000000000011e4 _TV_CRLF
             tvout.s:467    .text:00000000000011ec $t
             tvout.s:467    .text:00000000000011ec TV_CRLF
             tvout.s:482    .text:000000000000120e $d
             tvout.s:482    .text:0000000000001212 _RIGHT
             tvout.s:482    .text:0000000000001218 $t
             tvout.s:482    .text:0000000000001218 RIGHT
             tvout.s:495    .text:000000000000122c $d
             tvout.s:495    .text:0000000000001230 _LEFT
             tvout.s:495    .text:0000000000001238 LEFT
             tvout.s:511    .text:0000000000001264 FONT_PIXEL
             tvout.s:518    .text:0000000000001274 INCR_X
             tvout.s:525    .text:0000000000001280 NEXT_PIXEL
             tvout.s:534    .text:0000000000001288 CHAR_ROW
             tvout.s:536    .text:000000000000128c $d
             forth.s:974    .text:000000000000367c DDUP
             forth.s:484    .text:0000000000003284 RAT
             forth.s:362    .text:00000000000031b0 DONXT
             forth.s:965    .text:0000000000003668 TDROP
             tvout.s:551    .text:00000000000012c8 CHAR_FONT
             tvout.s:552    .text:00000000000012c8 $t
             tvout.s:563    .text:00000000000012dc $d
             tvout.s:563    .text:00000000000012e0 _TV_EMIT
             tvout.s:563    .text:00000000000012e8 $t
             tvout.s:565    .text:00000000000012ec $d
             forth.s:1148   .text:000000000000380c ULESS
             tvout.s:593    .text:0000000000001370 CTRL_KEY
             forth.s:934    .text:000000000000362c ROT
             forth.s:454    .text:0000000000003244 CAT
             tvout.s:660    .text:0000000000001458 SHOW_CURSOR
             tvout.s:691    .text:00000000000014e0 HIDE_CURSOR
             forth.s:1123   .text:00000000000037cc EQUAL
             tvout.s:650    .text:0000000000001438 BACK_SPACE
ARM GAS  forth.s 			page 236


             tvout.s:618    .text:00000000000013e0 CAR_RET
             tvout.s:629    .text:00000000000013f8 LN_FEED
             tvout.s:619    .text:00000000000013e0 $t
             tvout.s:620    .text:00000000000013e4 $d
             tvout.s:630    .text:00000000000013f8 $t
             tvout.s:631    .text:00000000000013fc $d
             forth.s:694    .text:000000000000342c XORR
             tvout.s:651    .text:0000000000001438 $t
             tvout.s:652    .text:000000000000143c $d
             tvout.s:660    .text:000000000000144c _SHOW_CURSOR
             tvout.s:660    .text:0000000000001458 $t
             tvout.s:663    .text:000000000000145c $d
             forth.s:864    .text:0000000000003584 TWOSL
             forth.s:444    .text:0000000000003230 CSTOR
             forth.s:956    .text:0000000000003654 DDROP
             tvout.s:691    .text:00000000000014d4 _HIDE_CURSOR
             tvout.s:691    .text:00000000000014e0 $t
             tvout.s:694    .text:00000000000014e4 $d
             forth.s:685    .text:0000000000003418 ORR
             tvout.s:704    .text:000000000000150c _TV_AT
             tvout.s:704    .text:0000000000001512 $t
             tvout.s:704    .text:0000000000001514 TV_AT
             tvout.s:719    .text:0000000000001538 $d
             tvout.s:719    .text:000000000000153c _INPUT
             tvout.s:719    .text:0000000000001542 $t
             tvout.s:719    .text:0000000000001544 INPUT
             tvout.s:721    .text:0000000000001548 $d
             forth.s:1970   .text:0000000000003fac PAD
             forth.s:3350   .text:0000000000004f08 ACCEP
             forth.s:612    .text:0000000000003388 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001574 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
ARM GAS  forth.s 			page 237


       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
ARM GAS  forth.s 			page 238


       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000001580 sc_ascii
         mcSaite.inc:100    .text:0000000000001634 shifted
         mcSaite.inc:151    .text:0000000000001694 altchar
         mcSaite.inc:167    .text:00000000000016a4 extended
         mcSaite.inc:191    .text:00000000000016cc controls
ARM GAS  forth.s 			page 239


           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000007d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000007c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:0000000000001702 $t
           ps2_kbd.s:179    .text:000000000000182e send_bit
           ps2_kbd.s:107    .text:0000000000001764 start_bit
           ps2_kbd.s:118    .text:0000000000001788 parity_bit
           ps2_kbd.s:125    .text:000000000000179c stop_bit
           ps2_kbd.s:152    .text:00000000000017f2 store_code
           ps2_kbd.s:253    .text:00000000000018c2 do_async_key
           ps2_kbd.s:204    .text:0000000000001872 send_parity
           ps2_kbd.s:211    .text:0000000000001884 send_stop
           ps2_kbd.s:218    .text:000000000000188e rx_ack_bit
           ps2_kbd.s:236    .text:00000000000018ae is_async_key
           ps2_kbd.s:286    .text:0000000000001912 async_keys
           ps2_kbd.s:378    .text:00000000000019f8 table_scan
           ps2_kbd.s:260    .text:00000000000018d4 set_async_key
           ps2_kbd.s:295    .text:0000000000001920 async_jump
           ps2_kbd.s:265    .text:00000000000018e2 shift_key
           ps2_kbd.s:273    .text:00000000000018f2 set_reset
           ps2_kbd.s:268    .text:00000000000018e8 ctrl_key
           ps2_kbd.s:271    .text:00000000000018ee alt_key
           ps2_kbd.s:287    .text:0000000000001912 $d
           ps2_kbd.s:340    .text:00000000000019a0 $d
           ps2_kbd.s:340    .text:00000000000019a4 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000019ae $t
           ps2_kbd.s:340    .text:00000000000019b0 KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000019c0 keycode
           ps2_kbd.s:365    .text:00000000000019e8 wait_code
           ps2_kbd.s:396    .text:0000000000001a12 $d
           ps2_kbd.s:396    .text:0000000000001a16 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001a6c inkey_exit
           ps2_kbd.s:418    .text:0000000000001a70 pause_key
           ps2_kbd.s:427    .text:0000000000001a86 do_modifiers
           ps2_kbd.s:436    .text:0000000000001a9e shift_down
           ps2_kbd.s:440    .text:0000000000001aa4 altchar_down
           ps2_kbd.s:444    .text:0000000000001aaa ctrl_down
           ps2_kbd.s:452    .text:0000000000001ac6 do_capslock
           ps2_kbd.s:478    .text:0000000000001aea kbd_send
           ps2_kbd.s:553    .text:0000000000001bde kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001bfc $d
           ps2_kbd.s:567    .text:0000000000001c00 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001c08 $t
           ps2_kbd.s:567    .text:0000000000001c08 KBD_RST
           ps2_kbd.s:591    .text:0000000000001c52 $d
ARM GAS  forth.s 			page 240


           ps2_kbd.s:591    .text:0000000000001c56 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001c5e $t
           ps2_kbd.s:591    .text:0000000000001c60 KBD_LED
           ps2_kbd.s:616    .text:0000000000001cb4 $d
           ps2_kbd.s:616    .text:0000000000001cb8 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001cc4 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001cee $d
           ps2_kbd.s:633    .text:0000000000001cf2 _WKEY
           ps2_kbd.s:633    .text:0000000000001cfc WKEY
           ps2_kbd.s:635    .text:0000000000001d00 $d
           ps2_kbd.s:640    .text:0000000000001d18 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:33     *ABS*:0000000000001000 FLASH_SECTOR_SIZE
         spi-flash.s:44     .text:0000000000001d38 $t
         spi-flash.s:87     .text:0000000000001dda $d
         spi-flash.s:87     .text:0000000000001dde _CHIP_SEL
         spi-flash.s:87     .text:0000000000001de8 CHIP_SEL
         spi-flash.s:99     .text:0000000000001e06 $d
         spi-flash.s:99     .text:0000000000001e0a _CHIP_DSEL
         spi-flash.s:99     .text:0000000000001e14 $t
         spi-flash.s:99     .text:0000000000001e14 CHIP_DSEL
         spi-flash.s:116    .text:0000000000001e42 $d
         spi-flash.s:116    .text:0000000000001e46 _WB_BUF
         spi-flash.s:116    .text:0000000000001e4e $t
         spi-flash.s:116    .text:0000000000001e50 WB_BUF
         spi-flash.s:126    .text:0000000000001e60 $d
         spi-flash.s:126    .text:0000000000001e64 _RD_SECT
         spi-flash.s:126    .text:0000000000001e6e $t
         spi-flash.s:126    .text:0000000000001e70 RD_SECT
         spi-flash.s:128    .text:0000000000001e74 $d
         spi-flash.s:314    .text:00000000000020f0 RD_BLK
         spi-flash.s:143    .text:0000000000001e94 _WR_SECT
         spi-flash.s:143    .text:0000000000001e9e $t
         spi-flash.s:143    .text:0000000000001ea0 WR_SECT
         spi-flash.s:145    .text:0000000000001ea4 $d
         spi-flash.s:336    .text:0000000000002144 WR_BLK
             forth.s:984    .text:0000000000003690 DPLUS
         spi-flash.s:168    .text:0000000000001f00 _RD_BYTE
         spi-flash.s:168    .text:0000000000001f08 $t
         spi-flash.s:168    .text:0000000000001f08 RD_BYTE
         spi-flash.s:188    .text:0000000000001f30 $d
         spi-flash.s:188    .text:0000000000001f34 _WR_BYTE
         spi-flash.s:188    .text:0000000000001f3c $t
         spi-flash.s:188    .text:0000000000001f3c WR_BYTE
         spi-flash.s:206    .text:0000000000001f60 $d
         spi-flash.s:206    .text:0000000000001f64 _WR_DIS
         spi-flash.s:206    .text:0000000000001f6c WR_DIS
         spi-flash.s:208    .text:0000000000001f70 $d
         spi-flash.s:218    .text:0000000000001f8c _WR_ENBL
         spi-flash.s:218    .text:0000000000001f94 $t
         spi-flash.s:218    .text:0000000000001f94 WR_ENBL
         spi-flash.s:220    .text:0000000000001f98 $d
         spi-flash.s:230    .text:0000000000001fb4 _RD_SR
         spi-flash.s:230    .text:0000000000001fba $t
ARM GAS  forth.s 			page 241


         spi-flash.s:230    .text:0000000000001fbc RD_SR
         spi-flash.s:232    .text:0000000000001fc0 $d
         spi-flash.s:240    .text:0000000000001fe4 sr_cmd
         spi-flash.s:246    .text:0000000000001feb _SEND_ADR
         spi-flash.s:246    .text:0000000000001ff4 $t
         spi-flash.s:246    .text:0000000000001ff4 SEND_ADR
         spi-flash.s:248    .text:0000000000001ff8 $d
         spi-flash.s:263    .text:000000000000202c _WAIT_DONE
         spi-flash.s:263    .text:0000000000002036 $t
         spi-flash.s:263    .text:0000000000002038 WAIT_DONE
         spi-flash.s:265    .text:000000000000203c $d
         spi-flash.s:281    .text:000000000000206c _ERASE_SECT
         spi-flash.s:281    .text:000000000000207c ERASE_SECT
         spi-flash.s:283    .text:0000000000002080 $d
         spi-flash.s:296    .text:00000000000020a8 _ERASE_CHIP
         spi-flash.s:296    .text:00000000000020b4 ERASE_CHIP
         spi-flash.s:298    .text:00000000000020b8 $d
         spi-flash.s:314    .text:00000000000020e8 _RD_BLK
         spi-flash.s:316    .text:00000000000020f4 $d
         spi-flash.s:336    .text:000000000000213c _WR_BLK
         spi-flash.s:338    .text:0000000000002148 $d
         spi-flash.s:375    .text:0000000000002198 _SEARCH_FILE
         spi-flash.s:375    .text:00000000000021a4 $t
         spi-flash.s:375    .text:00000000000021a4 SEARCH_FILE
         spi-flash.s:378    .text:00000000000021a8 $d
         spi-flash.s:384    .text:00000000000021b0 _ERASE_FILE
         spi-flash.s:384    .text:00000000000021bc ERASE_FILE
         spi-flash.s:387    .text:00000000000021c0 $d
         spi-flash.s:393    .text:00000000000021c8 _DIR
         spi-flash.s:393    .text:00000000000021cc $t
         spi-flash.s:393    .text:00000000000021cc DIR
         spi-flash.s:396    .text:00000000000021d0 $d
         spi-flash.s:406    .text:00000000000021d8 _SAVE
         spi-flash.s:406    .text:00000000000021e0 SAVE
         spi-flash.s:409    .text:00000000000021e4 $d
         spi-flash.s:418    .text:00000000000021ec _LOAD
         spi-flash.s:418    .text:00000000000021f4 LOAD
         spi-flash.s:421    .text:00000000000021f8 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000002220 p10
               fpu.s:59     .text:000000000000224c _PWR10
               fpu.s:59     .text:0000000000002252 $t
               fpu.s:59     .text:0000000000002254 PWR10
               fpu.s:90     .text:0000000000002280 $d
               fpu.s:90     .text:0000000000002284 _FDI
               fpu.s:90     .text:0000000000002288 $t
               fpu.s:90     .text:0000000000002288 FDI
               fpu.s:100    .text:000000000000229a $d
               fpu.s:100    .text:000000000000229e _FEI
               fpu.s:100    .text:00000000000022a2 $t
               fpu.s:100    .text:00000000000022a4 FEI
               fpu.s:110    .text:00000000000022b6 $d
               fpu.s:110    .text:00000000000022ba _FPSCR
               fpu.s:110    .text:00000000000022c0 $t
ARM GAS  forth.s 			page 242


               fpu.s:123    .text:00000000000022d0 $d
               fpu.s:123    .text:00000000000022d4 _CLR_FPSCR
               fpu.s:123    .text:00000000000022de $t
               fpu.s:136    .text:00000000000022f8 $d
               fpu.s:136    .text:00000000000022fc _TOS0
               fpu.s:136    .text:0000000000002300 $t
               fpu.s:136    .text:0000000000002300 TOS0
               fpu.s:145    .text:000000000000230c $d
               fpu.s:145    .text:0000000000002310 _TOS1
               fpu.s:145    .text:0000000000002314 $t
               fpu.s:145    .text:0000000000002314 TOS1
               fpu.s:154    .text:0000000000002320 $d
               fpu.s:154    .text:0000000000002324 _TOS2
               fpu.s:154    .text:0000000000002328 $t
               fpu.s:154    .text:0000000000002328 TOS2
               fpu.s:163    .text:0000000000002334 $d
               fpu.s:163    .text:0000000000002338 _S0FROM
               fpu.s:163    .text:000000000000233c $t
               fpu.s:163    .text:000000000000233c S0FROM
               fpu.s:172    .text:0000000000002348 $d
               fpu.s:172    .text:000000000000234c _S1FROM
               fpu.s:172    .text:0000000000002350 $t
               fpu.s:172    .text:0000000000002350 S1FROM
               fpu.s:181    .text:000000000000235c $d
               fpu.s:181    .text:0000000000002360 _S2FROM
               fpu.s:181    .text:0000000000002364 $t
               fpu.s:181    .text:0000000000002364 S2FROM
               fpu.s:192    .text:0000000000002370 $d
               fpu.s:192    .text:0000000000002374 _FTOS
               fpu.s:192    .text:0000000000002378 $t
               fpu.s:192    .text:0000000000002378 FTOS
               fpu.s:202    .text:0000000000002388 $d
               fpu.s:202    .text:000000000000238c _TRUNC
               fpu.s:202    .text:0000000000002392 $t
               fpu.s:202    .text:0000000000002394 TRUNC
               fpu.s:212    .text:00000000000023a4 $d
               fpu.s:212    .text:00000000000023a8 _STOF
               fpu.s:212    .text:00000000000023ac $t
               fpu.s:212    .text:00000000000023ac STOF
               fpu.s:222    .text:00000000000023bc $d
               fpu.s:222    .text:00000000000023c0 _FPLUS
               fpu.s:222    .text:00000000000023c4 FPLUS
               fpu.s:235    .text:00000000000023dc $d
               fpu.s:235    .text:00000000000023e0 _FSUBB
               fpu.s:235    .text:00000000000023e4 FSUBB
               fpu.s:249    .text:00000000000023fc $d
               fpu.s:249    .text:0000000000002400 _FSTAR
               fpu.s:249    .text:0000000000002404 FSTAR
               fpu.s:262    .text:000000000000241c $d
               fpu.s:262    .text:0000000000002420 _FSLH
               fpu.s:262    .text:0000000000002424 FSLH
               fpu.s:275    .text:000000000000243c $d
               fpu.s:275    .text:0000000000002440 _FNEG
               fpu.s:275    .text:0000000000002448 $t
               fpu.s:275    .text:0000000000002448 FNEG
               fpu.s:285    .text:0000000000002458 $d
               fpu.s:285    .text:000000000000245c _FABS
ARM GAS  forth.s 			page 243


               fpu.s:285    .text:0000000000002464 FABS
               fpu.s:297    .text:0000000000002478 $d
               fpu.s:297    .text:000000000000247c _SQRT
               fpu.s:297    .text:0000000000002484 SQRT
               fpu.s:307    .text:0000000000002494 $d
               fpu.s:307    .text:0000000000002498 _FZLESS
               fpu.s:307    .text:000000000000249c $t
               fpu.s:307    .text:000000000000249c FZLESS
               fpu.s:319    .text:00000000000024b4 $d
               fpu.s:319    .text:00000000000024b8 _FGREAT
               fpu.s:319    .text:00000000000024bc FGREAT
               fpu.s:321    .text:00000000000024c0 $d
             forth.s:1042   .text:0000000000003718 INVER
               fpu.s:330    .text:00000000000024d4 _FLESS
               fpu.s:330    .text:00000000000024d8 FLESS
               fpu.s:332    .text:00000000000024dc $d
               fpu.s:340    .text:00000000000024ec _FMIN
               fpu.s:340    .text:00000000000024f4 FMIN
               fpu.s:342    .text:00000000000024f8 $d
               fpu.s:353    .text:000000000000251c _FMAX
               fpu.s:353    .text:0000000000002524 FMAX
               fpu.s:355    .text:0000000000002528 $d
               fpu.s:368    .text:000000000000254c _FSIGN
               fpu.s:368    .text:0000000000002552 $t
               fpu.s:368    .text:0000000000002554 FSIGN
               fpu.s:379    .text:0000000000002568 $d
               fpu.s:379    .text:000000000000256c _FEXP
               fpu.s:379    .text:0000000000002574 FEXP
               fpu.s:390    .text:000000000000258c $d
               fpu.s:390    .text:0000000000002590 _FMANT
               fpu.s:390    .text:0000000000002596 $t
               fpu.s:390    .text:0000000000002598 FMANT
               fpu.s:403    .text:00000000000025b4 $d
               fpu.s:403    .text:00000000000025b8 _PI
               fpu.s:403    .text:00000000000025bc PI
               fpu.s:412    .text:00000000000025cc $d
               fpu.s:412    .text:00000000000025d0 _LN2
               fpu.s:412    .text:00000000000025d4 $t
               fpu.s:412    .text:00000000000025d4 LN2
               fpu.s:421    .text:00000000000025e4 $d
               fpu.s:421    .text:00000000000025e8 _LN10
               fpu.s:421    .text:00000000000025f0 LN10
               fpu.s:431    .text:0000000000002600 $d
               fpu.s:431    .text:0000000000002604 _LOG2
               fpu.s:431    .text:000000000000260c LOG2
               fpu.s:441    .text:000000000000261c $d
               fpu.s:441    .text:0000000000002620 _LOG2TO10
               fpu.s:441    .text:0000000000002628 $t
               fpu.s:441    .text:0000000000002628 LOG2TO10
               fpu.s:443    .text:000000000000262c $d
             forth.s:635    .text:00000000000033b8 ZLESS
               fpu.s:453    .text:0000000000002658 $d
            strtof.s:29     .text:0000000000002664 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
ARM GAS  forth.s 			page 244


            strtof.s:43     .text:000000000000267c p10p2at
            strtof.s:44     .text:000000000000267c $t
            strtof.s:45     .text:0000000000002680 $d
            strtof.s:57     .text:00000000000026a0 bit_state
            strtof.s:58     .text:00000000000026a0 $t
            strtof.s:59     .text:00000000000026a4 $d
             forth.s:1931   .text:0000000000003f60 PICK
            strtof.s:76     .text:00000000000026c4 mant_div
            strtof.s:77     .text:00000000000026c4 $t
            strtof.s:78     .text:00000000000026c8 $d
            strtof.s:79     .text:00000000000026cc div_loop
             forth.s:1184   .text:0000000000003858 GREAT
            strtof.s:107    .text:0000000000002718 mant_mult
            strtof.s:108    .text:0000000000002718 $t
            strtof.s:109    .text:000000000000271c $d
            strtof.s:110    .text:0000000000002720 mult_loop
            strtof.s:134    .text:000000000000276c exp_adjust
            strtof.s:135    .text:000000000000276c $t
            strtof.s:136    .text:0000000000002770 $d
             forth.s:945    .text:0000000000003640 NROT
            strtof.s:148    .text:00000000000027ac pos_exp
             forth.s:1058   .text:000000000000373c ABSS
            strtof.s:159    .text:00000000000027bc integer
            strtof.s:160    .text:00000000000027bc $t
            strtof.s:161    .text:00000000000027c0 $d
             forth.s:597    .text:000000000000336c DSWAP
             forth.s:2400   .text:0000000000004408 TONBR
             forth.s:514    .text:00000000000032c8 DTOR
             forth.s:472    .text:0000000000003264 DRFROM
            strtof.s:178    .text:00000000000027ec decimals
            strtof.s:179    .text:00000000000027ec $t
            strtof.s:180    .text:00000000000027f0 $d
             forth.s:1207   .text:000000000000388c MIN
            strtof.s:204    .text:0000000000002844 exponent
            strtof.s:205    .text:0000000000002844 $t
            strtof.s:206    .text:0000000000002848 $d
             forth.s:2453   .text:000000000000449e NEGQ
             forth.s:1050   .text:000000000000372c NEGAT
            strtof.s:226    .text:0000000000002884 _FLOATQ
            strtof.s:226    .text:000000000000288c FLOATQ
            strtof.s:230    .text:0000000000002890 $d
             forth.s:2348   .text:000000000000437c DECIM
             forth.s:395    .text:00000000000031e2 TBRAN
            strtof.s:258    .text:0000000000002910 expect_dot
             forth.s:2433   .text:000000000000447c CHARQ
            strtof.s:262    .text:0000000000002924 get_fraction
            strtof.s:279    .text:0000000000002978 get_exponent
            strtof.s:297    .text:00000000000029cc error2
             forth.s:2365   .text:00000000000043a0 DIGTQ
            strtof.s:284    .text:000000000000298c build_float
            strtof.s:305    .text:00000000000029ec error4
            strtof.s:311    .text:0000000000002a00 restore_base
            strtof.s:309    .text:00000000000029f8 e4
            strtof.s:300    .text:00000000000029d8 error3
              ftoa.s:28     .text:0000000000002a10 rounding
              ftoa.s:48     .text:0000000000002a38 _ROUND
              ftoa.s:48     .text:0000000000002a3e $t
ARM GAS  forth.s 			page 245


              ftoa.s:48     .text:0000000000002a40 ROUND
              ftoa.s:50     .text:0000000000002a44 $d
             forth.s:1196   .text:0000000000003874 MAX
              ftoa.s:67     .text:0000000000002a84 _CSTOP
              ftoa.s:67     .text:0000000000002a88 $t
              ftoa.s:67     .text:0000000000002a88 CSTOP
              ftoa.s:79     .text:0000000000002a94 ITOA
              ftoa.s:81     .text:0000000000002a98 $d
             forth.s:1645   .text:0000000000003cd4 STOD
             forth.s:997    .text:00000000000036b0 DABS
             forth.s:2191   .text:00000000000041e4 BDIGS
             forth.s:2255   .text:0000000000004288 DIGS
             forth.s:2273   .text:00000000000042bc SIGN
             forth.s:2287   .text:00000000000042e4 EDIGS
             forth.s:2030   .text:0000000000004040 CMOVE
              ftoa.s:114    .text:0000000000002aec _SCALEUP
              ftoa.s:114    .text:0000000000002af4 $t
              ftoa.s:114    .text:0000000000002af4 SCALEUP
              ftoa.s:116    .text:0000000000002af8 $d
              ftoa.s:148    .text:0000000000002b54 _SCALEDOWN
              ftoa.s:148    .text:0000000000002b5e $t
              ftoa.s:148    .text:0000000000002b60 SCALEDOWN
              ftoa.s:150    .text:0000000000002b64 $d
              ftoa.s:181    .text:0000000000002bbc EPART
              ftoa.s:182    .text:0000000000002bbc $t
              ftoa.s:183    .text:0000000000002bc0 $d
              ftoa.s:206    .text:0000000000002bf0 FPART
              ftoa.s:207    .text:0000000000002bf0 $t
              ftoa.s:208    .text:0000000000002bf4 $d
              ftoa.s:255    .text:0000000000002c94 IPART
              ftoa.s:256    .text:0000000000002c94 $t
              ftoa.s:257    .text:0000000000002c98 $d
              ftoa.s:313    .text:0000000000002d58 _FTOA
              ftoa.s:313    .text:0000000000002d5c $t
              ftoa.s:313    .text:0000000000002d5c FTOA
              ftoa.s:315    .text:0000000000002d60 $d
              ftoa.s:365    .text:0000000000002e40 nan
             forth.s:831    .text:0000000000003540 BLANK
              ftoa.s:348    .text:0000000000002df0 zdz
              ftoa.s:387    .text:0000000000002eac infinity
              ftoa.s:412    .text:0000000000002ef4 _FDOT
              ftoa.s:412    .text:0000000000002ef8 FDOT
              ftoa.s:415    .text:0000000000002efc $d
             forth.s:1959   .text:0000000000003f94 HERE
             forth.s:3769   .text:0000000000005414 ALLOT
             forth.s:80     .text:0000000000002f60 $t
             forth.s:104    .text:0000000000002f78 COMPI_NEST
             forth.s:117    .text:0000000000002f96 TSTDIN
             forth.s:124    .text:0000000000002fa0 TSTDOUT
             forth.s:133    .text:0000000000002faa $d
             forth.s:133    .text:0000000000002fae _CFSR
             forth.s:145    .text:0000000000002fca $d
             forth.s:145    .text:0000000000002fce _BFAR
             forth.s:157    .text:0000000000002fea $d
             forth.s:157    .text:0000000000002fee _QKEY
             forth.s:157    .text:0000000000002ff4 QKEY
             forth.s:159    .text:0000000000002ff8 $d
ARM GAS  forth.s 			page 246


             forth.s:2017   .text:0000000000004020 ATEXE
             forth.s:167    .text:0000000000003008 _KEY
             forth.s:167    .text:000000000000300c $t
             forth.s:167    .text:000000000000300c KEY
             forth.s:169    .text:0000000000003010 KEY1
             forth.s:170    .text:0000000000003010 $d
             forth.s:185    .text:0000000000003020 KEY2
             forth.s:192    .text:0000000000003028 _EMIT
             forth.s:194    .text:0000000000003034 $d
             forth.s:228    .text:0000000000003044 _RAND
             forth.s:228    .text:000000000000304c RAND
             forth.s:230    .text:0000000000003050 $d
             forth.s:1293   .text:0000000000003948 SEED
             forth.s:1801   .text:0000000000003e1c MODD
             forth.s:259    .text:00000000000030c0 _PAUSE
             forth.s:259    .text:00000000000030c4 PAUSE
             forth.s:261    .text:00000000000030c8 $d
             forth.s:1312   .text:0000000000003974 TIMER
             forth.s:263    .text:00000000000030d0 PAUSE_LOOP
             forth.s:268    .text:00000000000030e8 PAUSE_EXIT
             forth.s:275    .text:00000000000030f0 _ULED
             forth.s:284    .text:0000000000003114 ULED_OFF
             forth.s:292    .text:0000000000003118 $d
             forth.s:292    .text:000000000000311c _JOYSTK
             forth.s:292    .text:0000000000003124 JOYSTK
             forth.s:294    .text:0000000000003128 $d
             forth.s:306    .text:0000000000003148 _BEEP
             forth.s:306    .text:0000000000003150 BEEP
             forth.s:331    .text:0000000000003184 $d
             forth.s:331    .text:0000000000003188 _NOP
             forth.s:331    .text:000000000000318c $t
             forth.s:331    .text:000000000000318c NOP
             forth.s:349    .text:0000000000003198 $d
             forth.s:349    .text:000000000000319c _EXECU
             forth.s:349    .text:00000000000031a4 $t
             forth.s:369    .text:00000000000031c0 NEXT1
             forth.s:387    .text:00000000000031dc QBRAN1
             forth.s:418    .text:00000000000031fc $d
             forth.s:418    .text:0000000000003200 _EXIT
             forth.s:418    .text:0000000000003208 EXIT
             forth.s:426    .text:000000000000320a $d
             forth.s:426    .text:000000000000320e _STORE
             forth.s:426    .text:0000000000003210 $t
             forth.s:436    .text:000000000000321c $d
             forth.s:436    .text:0000000000003220 _AT
             forth.s:436    .text:0000000000003222 $t
             forth.s:444    .text:0000000000003228 $d
             forth.s:444    .text:000000000000322c _CSTOR
             forth.s:454    .text:000000000000323c $d
             forth.s:454    .text:0000000000003240 _CAT
             forth.s:463    .text:0000000000003248 $d
             forth.s:463    .text:000000000000324c _RFROM
             forth.s:472    .text:000000000000325a $d
             forth.s:472    .text:000000000000325e _DRFROM
             forth.s:472    .text:0000000000003262 $t
             forth.s:484    .text:000000000000327a $d
             forth.s:484    .text:000000000000327e _RAT
ARM GAS  forth.s 			page 247


             forth.s:493    .text:000000000000328e $d
             forth.s:493    .text:0000000000003292 _DRAT
             forth.s:493    .text:0000000000003296 $t
             forth.s:493    .text:0000000000003298 DRAT
             forth.s:505    .text:00000000000032aa $d
             forth.s:505    .text:00000000000032ae _TOR
             forth.s:514    .text:00000000000032be $d
             forth.s:514    .text:00000000000032c2 _DTOR
             forth.s:514    .text:00000000000032c6 $t
             forth.s:526    .text:00000000000032da $d
             forth.s:526    .text:00000000000032de _RPSTOR
             forth.s:526    .text:00000000000032e2 $t
             forth.s:526    .text:00000000000032e4 RPSTOR
             forth.s:535    .text:00000000000032ec $d
             forth.s:535    .text:00000000000032f0 _SPSTOR
             forth.s:535    .text:00000000000032f4 $t
             forth.s:535    .text:00000000000032f4 SPSTOR
             forth.s:544    .text:00000000000032fc $d
             forth.s:544    .text:0000000000003300 _SPAT
             forth.s:544    .text:0000000000003304 $t
             forth.s:544    .text:0000000000003304 SPAT
             forth.s:553    .text:000000000000330c $d
             forth.s:553    .text:0000000000003310 _RPAT
             forth.s:553    .text:0000000000003314 $t
             forth.s:553    .text:0000000000003314 RPAT
             forth.s:562    .text:000000000000331c $d
             forth.s:562    .text:0000000000003320 _DROP
             forth.s:571    .text:000000000000332e $d
             forth.s:571    .text:0000000000003332 _NIP
             forth.s:571    .text:0000000000003336 $t
             forth.s:571    .text:0000000000003338 NIP
             forth.s:579    .text:000000000000333e $d
             forth.s:579    .text:0000000000003342 _DUPP
             forth.s:579    .text:0000000000003346 $t
             forth.s:587    .text:000000000000334e $d
             forth.s:587    .text:0000000000003352 _SWAP
             forth.s:597    .text:0000000000003360 $d
             forth.s:597    .text:0000000000003364 _DSWAP
             forth.s:597    .text:000000000000336a $t
             forth.s:612    .text:000000000000337c $d
             forth.s:612    .text:0000000000003380 _OVER
             forth.s:621    .text:0000000000003390 $d
             forth.s:621    .text:0000000000003394 _DOVER
             forth.s:621    .text:000000000000339a $t
             forth.s:621    .text:000000000000339c DOVER
             forth.s:635    .text:00000000000033ae $d
             forth.s:635    .text:00000000000033b2 _ZLESS
             forth.s:643    .text:00000000000033be $d
             forth.s:643    .text:00000000000033c2 _ZGREAT
             forth.s:643    .text:00000000000033c8 ZGREAT
             forth.s:654    .text:00000000000033d4 $d
             forth.s:654    .text:00000000000033d8 _ZNEQU
             forth.s:654    .text:00000000000033dc $t
             forth.s:654    .text:00000000000033dc ZNEQU
             forth.s:664    .text:00000000000033e4 $d
             forth.s:664    .text:00000000000033e8 _NEQU
             forth.s:664    .text:00000000000033ec NEQU
ARM GAS  forth.s 			page 248


             forth.s:676    .text:00000000000033fa $d
             forth.s:676    .text:00000000000033fe _ANDD
             forth.s:676    .text:0000000000003402 $t
             forth.s:685    .text:000000000000340e $d
             forth.s:685    .text:0000000000003412 _ORR
             forth.s:694    .text:0000000000003422 $d
             forth.s:694    .text:0000000000003426 _XORR
             forth.s:694    .text:000000000000342a $t
             forth.s:703    .text:0000000000003436 $d
             forth.s:703    .text:000000000000343a _UPLUS
             forth.s:703    .text:000000000000343e $t
             forth.s:703    .text:0000000000003440 UPLUS
             forth.s:715    .text:0000000000003450 $d
             forth.s:715    .text:0000000000003454 _RSHIFT
             forth.s:724    .text:0000000000003466 $d
             forth.s:724    .text:000000000000346a _LSHIFT
             forth.s:733    .text:000000000000347e $d
             forth.s:733    .text:0000000000003482 _PLUS
             forth.s:733    .text:0000000000003484 $t
             forth.s:742    .text:000000000000348c $d
             forth.s:742    .text:0000000000003490 _SUBB
             forth.s:742    .text:0000000000003492 $t
             forth.s:751    .text:000000000000349e $d
             forth.s:751    .text:00000000000034a2 _STAR
             forth.s:751    .text:00000000000034a4 $t
             forth.s:760    .text:00000000000034ae $d
             forth.s:760    .text:00000000000034b2 _UMSTA
             forth.s:760    .text:00000000000034b6 $t
             forth.s:760    .text:00000000000034b8 UMSTA
             forth.s:772    .text:00000000000034c4 $d
             forth.s:772    .text:00000000000034c8 _MSTAR
             forth.s:772    .text:00000000000034cc MSTAR
             forth.s:783    .text:00000000000034d8 $d
             forth.s:783    .text:00000000000034dc _ONEP
             forth.s:791    .text:00000000000034e6 $d
             forth.s:791    .text:00000000000034ea _ONEM
             forth.s:799    .text:00000000000034f6 $d
             forth.s:799    .text:00000000000034fa _TWOP
             forth.s:799    .text:0000000000003500 TWOP
             forth.s:807    .text:0000000000003506 $d
             forth.s:807    .text:000000000000350a _TWOM
             forth.s:807    .text:0000000000003510 TWOM
             forth.s:815    .text:0000000000003516 $d
             forth.s:815    .text:000000000000351a _CELLP
             forth.s:815    .text:0000000000003520 $t
             forth.s:815    .text:0000000000003520 CELLP
             forth.s:823    .text:0000000000003526 $d
             forth.s:823    .text:000000000000352a _CELLM
             forth.s:823    .text:0000000000003530 $t
             forth.s:823    .text:0000000000003530 CELLM
             forth.s:831    .text:0000000000003536 $d
             forth.s:831    .text:000000000000353a _BLANK
             forth.s:840    .text:000000000000354a $d
             forth.s:840    .text:000000000000354e _CELLS
             forth.s:840    .text:0000000000003554 $t
             forth.s:840    .text:0000000000003554 CELLS
             forth.s:848    .text:000000000000355a $d
ARM GAS  forth.s 			page 249


             forth.s:848    .text:000000000000355e _CELLSL
             forth.s:848    .text:0000000000003564 $t
             forth.s:848    .text:0000000000003564 CELLSL
             forth.s:856    .text:000000000000356a $d
             forth.s:856    .text:000000000000356e _TWOST
             forth.s:856    .text:0000000000003574 TWOST
             forth.s:864    .text:000000000000357a $d
             forth.s:864    .text:000000000000357e _TWOSL
             forth.s:872    .text:000000000000358a $d
             forth.s:872    .text:000000000000358e _QDUP
             forth.s:882    .text:000000000000359e $d
             forth.s:882    .text:00000000000035a2 _TUCK
             forth.s:882    .text:00000000000035a8 TUCK
             forth.s:891    .text:00000000000035b0 $d
             forth.s:891    .text:00000000000035b4 _ROLL
             forth.s:891    .text:00000000000035bc ROLL
             forth.s:893    .text:00000000000035c0 $d
             forth.s:934    .text:0000000000003628 _ROT
             forth.s:934    .text:000000000000362c $t
             forth.s:945    .text:0000000000003636 $d
             forth.s:945    .text:000000000000363a _NROT
             forth.s:956    .text:000000000000364a $d
             forth.s:956    .text:000000000000364e _DDROP
             forth.s:956    .text:0000000000003654 $t
             forth.s:965    .text:000000000000365e $d
             forth.s:965    .text:0000000000003662 _TDROP
             forth.s:965    .text:0000000000003668 $t
             forth.s:974    .text:0000000000003672 $d
             forth.s:974    .text:0000000000003676 _DDUP
             forth.s:984    .text:0000000000003688 $d
             forth.s:984    .text:000000000000368c _DPLUS
             forth.s:997    .text:00000000000036a4 $d
             forth.s:997    .text:00000000000036a8 _DABS
             forth.s:1013   .text:00000000000036cc $d
             forth.s:1013   .text:00000000000036d0 _UDGREAT
             forth.s:1013   .text:00000000000036d4 $t
             forth.s:1013   .text:00000000000036d4 UDGREAT
             forth.s:1030   .text:00000000000036f0 $d
             forth.s:1030   .text:00000000000036f4 _DZEQUAL
             forth.s:1030   .text:00000000000036f8 $t
             forth.s:1030   .text:00000000000036f8 DZEQUAL
             forth.s:1042   .text:000000000000370a $d
             forth.s:1042   .text:000000000000370e _INVER
             forth.s:1050   .text:000000000000371e $d
             forth.s:1050   .text:0000000000003722 _NEGAT
             forth.s:1058   .text:0000000000003732 $d
             forth.s:1058   .text:0000000000003736 _ABSS
             forth.s:1058   .text:000000000000373a $t
             forth.s:1068   .text:0000000000003746 $d
             forth.s:1068   .text:000000000000374a _CLZ
             forth.s:1068   .text:000000000000374e $t
             forth.s:1076   .text:0000000000003756 $d
             forth.s:1076   .text:000000000000375a _CTZ
             forth.s:1076   .text:000000000000375e $t
             forth.s:1076   .text:0000000000003760 CTZ
             forth.s:1091   .text:000000000000377a $d
             forth.s:1091   .text:000000000000377e _FALSE
ARM GAS  forth.s 			page 250


             forth.s:1091   .text:0000000000003784 $t
             forth.s:1091   .text:0000000000003784 FALSE
             forth.s:1101   .text:0000000000003790 $d
             forth.s:1101   .text:0000000000003794 _TRUE
             forth.s:1101   .text:000000000000379c TRUE
             forth.s:1112   .text:00000000000037ac $d
             forth.s:1112   .text:00000000000037b0 _ZEQUAL
             forth.s:1112   .text:00000000000037b4 ZEQUAL
             forth.s:1123   .text:00000000000037c6 $d
             forth.s:1123   .text:00000000000037ca _EQUAL
             forth.s:1123   .text:00000000000037cc $t
             forth.s:1135   .text:00000000000037de $d
             forth.s:1135   .text:00000000000037e2 _DIFF
             forth.s:1135   .text:00000000000037e8 DIFF
             forth.s:1148   .text:0000000000003802 $d
             forth.s:1148   .text:0000000000003806 _ULESS
             forth.s:1160   .text:000000000000381e $d
             forth.s:1160   .text:0000000000003822 _LESS
             forth.s:1160   .text:0000000000003824 $t
             forth.s:1160   .text:0000000000003824 LESS
             forth.s:1172   .text:0000000000003836 $d
             forth.s:1172   .text:000000000000383a _UGREAT
             forth.s:1172   .text:0000000000003840 UGREAT
             forth.s:1184   .text:0000000000003852 $d
             forth.s:1184   .text:0000000000003856 _GREAT
             forth.s:1184   .text:0000000000003858 $t
             forth.s:1196   .text:000000000000386a $d
             forth.s:1196   .text:000000000000386e _MAX
             forth.s:1196   .text:0000000000003872 $t
             forth.s:1207   .text:0000000000003882 $d
             forth.s:1207   .text:0000000000003886 _MIN
             forth.s:1207   .text:000000000000388a $t
             forth.s:1218   .text:000000000000389a $d
             forth.s:1218   .text:000000000000389e _PSTOR
             forth.s:1218   .text:00000000000038a4 PSTOR
             forth.s:1230   .text:00000000000038b6 $d
             forth.s:1230   .text:00000000000038ba _DSTOR
             forth.s:1230   .text:00000000000038c0 DSTOR
             forth.s:1242   .text:00000000000038d6 $d
             forth.s:1242   .text:00000000000038da _DAT
             forth.s:1242   .text:00000000000038e0 DAT
             forth.s:1252   .text:00000000000038ec $d
             forth.s:1252   .text:00000000000038f0 _COUNT
             forth.s:1252   .text:00000000000038f6 $t
             forth.s:1262   .text:0000000000003906 $d
             forth.s:1262   .text:000000000000390a _DNEGA
             forth.s:1262   .text:0000000000003912 $t
             forth.s:1262   .text:0000000000003914 DNEGA
             forth.s:1284   .text:0000000000003926 $d
             forth.s:1284   .text:000000000000392a _STATE
             forth.s:1284   .text:0000000000003930 $t
             forth.s:1284   .text:0000000000003930 STATE
             forth.s:1293   .text:000000000000393c $d
             forth.s:1293   .text:0000000000003940 _SEED
             forth.s:1303   .text:0000000000003954 $d
             forth.s:1303   .text:0000000000003958 _MSEC
             forth.s:1303   .text:000000000000395e $t
ARM GAS  forth.s 			page 251


             forth.s:1312   .text:000000000000396a $d
             forth.s:1312   .text:000000000000396e _TIMER
             forth.s:1312   .text:0000000000003974 $t
             forth.s:1321   .text:0000000000003980 $d
             forth.s:1321   .text:0000000000003984 _TBOOT
             forth.s:1321   .text:000000000000398a $t
             forth.s:1321   .text:000000000000398c TBOOT
             forth.s:1330   .text:0000000000003998 $d
             forth.s:1330   .text:000000000000399c _BASE
             forth.s:1341   .text:00000000000039b0 $d
             forth.s:1341   .text:00000000000039b4 _BCHR
             forth.s:1341   .text:00000000000039ba $t
             forth.s:1341   .text:00000000000039bc BCHR
             forth.s:1351   .text:00000000000039c8 TEMP
             forth.s:1360   .text:00000000000039d4 $d
             forth.s:1360   .text:00000000000039d8 _SPAN
             forth.s:1360   .text:00000000000039e0 SPAN
             forth.s:1369   .text:00000000000039ec $d
             forth.s:1369   .text:00000000000039f0 _INN
             forth.s:1369   .text:00000000000039f4 $t
             forth.s:1369   .text:00000000000039f4 INN
             forth.s:1379   .text:0000000000003a00 $d
             forth.s:1379   .text:0000000000003a04 _NTIB
             forth.s:1379   .text:0000000000003a0c NTIB
             forth.s:1388   .text:0000000000003a18 $d
             forth.s:1388   .text:0000000000003a1c _TEVAL
             forth.s:1388   .text:0000000000003a22 $t
             forth.s:1388   .text:0000000000003a24 TEVAL
             forth.s:1398   .text:0000000000003a30 $d
             forth.s:1398   .text:0000000000003a34 _HLD
             forth.s:1398   .text:0000000000003a38 $t
             forth.s:1398   .text:0000000000003a38 HLD
             forth.s:1408   .text:0000000000003a44 $d
             forth.s:1408   .text:0000000000003a48 _CNTXT
             forth.s:1408   .text:0000000000003a50 $t
             forth.s:1409   .text:0000000000003a50 CRRNT
             forth.s:1419   .text:0000000000003a5c $d
             forth.s:1419   .text:0000000000003a60 _CPP
             forth.s:1419   .text:0000000000003a64 CPP
             forth.s:1430   .text:0000000000003a70 $d
             forth.s:1430   .text:0000000000003a74 _UNUSED
             forth.s:1430   .text:0000000000003a7c UNUSED
             forth.s:1442   .text:0000000000003a92 $d
             forth.s:1442   .text:0000000000003a96 _FCP
             forth.s:1442   .text:0000000000003a9a $t
             forth.s:1442   .text:0000000000003a9c FCP
             forth.s:1452   .text:0000000000003aa8 $d
             forth.s:1452   .text:0000000000003aac _LAST
             forth.s:1452   .text:0000000000003ab4 LAST
             forth.s:1466   .text:0000000000003ac0 $d
             forth.s:1466   .text:0000000000003ac4 _USER_BEGIN
             forth.s:1466   .text:0000000000003ad0 USER_BEGIN
             forth.s:1470   .text:0000000000003adc USR_BGN_ADR
             forth.s:1471   .text:0000000000003adc $d
             forth.s:1477   .text:0000000000003ae4 _USER_END
             forth.s:1477   .text:0000000000003af0 USER_END
             forth.s:1481   .text:0000000000003afc USER_END_ADR
ARM GAS  forth.s 			page 252


             forth.s:1482   .text:0000000000003afc $d
             forth.s:1488   .text:0000000000003b04 _MAXINT
             forth.s:1488   .text:0000000000003b0c $t
             forth.s:1488   .text:0000000000003b0c MAXINT
             forth.s:1497   .text:0000000000003b1c $d
             forth.s:1497   .text:0000000000003b20 _MININT
             forth.s:1497   .text:0000000000003b28 $t
             forth.s:1497   .text:0000000000003b28 MININT
             forth.s:1506   .text:0000000000003b38 $d
             forth.s:1506   .text:0000000000003b3c _MAXUINT
             forth.s:1506   .text:0000000000003b48 MAXUINT
             forth.s:1521   .text:0000000000003b58 $d
             forth.s:1521   .text:0000000000003b5c _WITHI
             forth.s:1521   .text:0000000000003b64 WITHI
             forth.s:1523   .text:0000000000003b68 $d
             forth.s:1538   .text:0000000000003b88 _UMMOD
             forth.s:1538   .text:0000000000003b90 UMMOD
             forth.s:1542   .text:0000000000003b9a UMMOD0
             forth.s:1549   .text:0000000000003baa UMMOD1
             forth.s:1555   .text:0000000000003bb4 UMMOD2
             forth.s:1568   .text:0000000000003bc0 $d
             forth.s:1568   .text:0000000000003bc4 _MSMOD
             forth.s:1568   .text:0000000000003bcc MSMOD
             forth.s:1570   .text:0000000000003bd0 $d
             forth.s:1579   .text:0000000000003bf8 MMOD1
             forth.s:1586   .text:0000000000003c14 MMOD2
             forth.s:1594   .text:0000000000003c34 MMOD3
             forth.s:1608   .text:0000000000003c3c _SMSLSHREM
             forth.s:1608   .text:0000000000003c44 SMSLSHREM
             forth.s:1610   .text:0000000000003c48 $d
             forth.s:1645   .text:0000000000003cd0 _STOD
             forth.s:1645   .text:0000000000003cd4 $t
             forth.s:1654   .text:0000000000003ce0 $d
             forth.s:1654   .text:0000000000003ce4 _D2STAR
             forth.s:1654   .text:0000000000003ce8 $t
             forth.s:1654   .text:0000000000003ce8 D2STAR
             forth.s:1666   .text:0000000000003cfa $d
             forth.s:1666   .text:0000000000003cfe _D2SL
             forth.s:1666   .text:0000000000003d02 $t
             forth.s:1666   .text:0000000000003d04 D2SL
             forth.s:1681   .text:0000000000003d12 $d
             forth.s:1681   .text:0000000000003d16 _DSLMOD
             forth.s:1681   .text:0000000000003d1c $t
             forth.s:1681   .text:0000000000003d1c DSLMOD
             forth.s:1717   .text:0000000000003d68 $d
             forth.s:1717   .text:0000000000003d6c _DSLASH
             forth.s:1717   .text:0000000000003d70 DSLASH
             forth.s:1719   .text:0000000000003d74 $d
             forth.s:1739   .text:0000000000003db8 _DSTAR
             forth.s:1739   .text:0000000000003dbc DSTAR
             forth.s:1788   .text:0000000000003df2 $d
             forth.s:1788   .text:0000000000003df6 _SLMOD
             forth.s:1790   .text:0000000000003e00 $d
             forth.s:1801   .text:0000000000003e18 _MODD
             forth.s:1801   .text:0000000000003e1c $t
             forth.s:1803   .text:0000000000003e20 $d
             forth.s:1812   .text:0000000000003e30 _SLASH
ARM GAS  forth.s 			page 253


             forth.s:1812   .text:0000000000003e32 $t
             forth.s:1812   .text:0000000000003e34 SLASH
             forth.s:1814   .text:0000000000003e38 $d
             forth.s:1825   .text:0000000000003e4c _SSMOD
             forth.s:1825   .text:0000000000003e52 $t
             forth.s:1825   .text:0000000000003e54 SSMOD
             forth.s:1827   .text:0000000000003e58 $d
             forth.s:1839   .text:0000000000003e70 _STASL
             forth.s:1839   .text:0000000000003e74 STASL
             forth.s:1841   .text:0000000000003e78 $d
             forth.s:1855   .text:0000000000003e8c _CHARP
             forth.s:1855   .text:0000000000003e92 $t
             forth.s:1855   .text:0000000000003e94 CHARP
             forth.s:1865   .text:0000000000003e9c $d
             forth.s:1865   .text:0000000000003ea0 _CHARS
             forth.s:1865   .text:0000000000003ea6 $t
             forth.s:1865   .text:0000000000003ea8 CHARS
             forth.s:1875   .text:0000000000003eac $d
             forth.s:1875   .text:0000000000003eb0 _ALIGN
             forth.s:1875   .text:0000000000003eb6 $t
             forth.s:1875   .text:0000000000003eb8 ALIGN
             forth.s:1888   .text:0000000000003ec8 $d
             forth.s:1888   .text:0000000000003ecc _ALGND
             forth.s:1888   .text:0000000000003ed4 $t
             forth.s:1888   .text:0000000000003ed4 ALGND
             forth.s:1899   .text:0000000000003ee4 $d
             forth.s:1899   .text:0000000000003ee8 _TCHAR
             forth.s:1899   .text:0000000000003eee $t
             forth.s:1899   .text:0000000000003ef0 TCHAR
             forth.s:1901   .text:0000000000003ef4 $d
             forth.s:1911   .text:0000000000003f2c TCHA1
             forth.s:1919   .text:0000000000003f34 _DEPTH
             forth.s:1919   .text:0000000000003f3a $t
             forth.s:1919   .text:0000000000003f3c DEPTH
             forth.s:1931   .text:0000000000003f54 $d
             forth.s:1931   .text:0000000000003f58 _PICK
             forth.s:1942   .text:0000000000003f6a $d
             forth.s:1942   .text:0000000000003f6e _PUT
             forth.s:1942   .text:0000000000003f72 $t
             forth.s:1942   .text:0000000000003f74 PUT
             forth.s:1959   .text:0000000000003f88 $d
             forth.s:1959   .text:0000000000003f8c _HERE
             forth.s:1961   .text:0000000000003f98 $d
             forth.s:1970   .text:0000000000003fa8 _PAD
             forth.s:1970   .text:0000000000003fac $t
             forth.s:1972   .text:0000000000003fb0 $d
             forth.s:1983   .text:0000000000003fc8 _TIB
             forth.s:1983   .text:0000000000003fcc $t
             forth.s:1983   .text:0000000000003fcc TIB
             forth.s:1994   .text:0000000000003fd6 $d
             forth.s:1994   .text:0000000000003fda _SOURCID
             forth.s:1994   .text:0000000000003fe4 $t
             forth.s:1994   .text:0000000000003fe4 SOURCID
             forth.s:2006   .text:0000000000003fee $d
             forth.s:2006   .text:0000000000003ff2 _SOURCE
             forth.s:2006   .text:0000000000003ffc SOURCE
             forth.s:2008   .text:0000000000004000 $d
ARM GAS  forth.s 			page 254


             forth.s:2017   .text:0000000000004014 _ATEXE
             forth.s:2030   .text:0000000000004034 $d
             forth.s:2030   .text:0000000000004038 _CMOVE
             forth.s:2030   .text:000000000000403e $t
             forth.s:2044   .text:0000000000004060 CMOV3
             forth.s:2039   .text:0000000000004056 CMOV1
             forth.s:2036   .text:000000000000404e CMOV0
             forth.s:2046   .text:0000000000004064 CMOV2
             forth.s:2054   .text:000000000000406c $d
             forth.s:2054   .text:0000000000004070 _MOVE
             forth.s:2054   .text:0000000000004078 MOVE
             forth.s:2063   .text:000000000000407a $d
             forth.s:2063   .text:000000000000407e _WMOVE
             forth.s:2063   .text:0000000000004084 $t
             forth.s:2081   .text:00000000000040ae MOVE1
             forth.s:2078   .text:00000000000040aa MOVE3
             forth.s:2075   .text:00000000000040a6 MOVE0
             forth.s:2086   .text:00000000000040b8 MOVE2
             forth.s:2095   .text:00000000000040c0 $d
             forth.s:2095   .text:00000000000040c4 _FILL
             forth.s:2103   .text:00000000000040da FILL2
             forth.s:2099   .text:00000000000040d2 FILL1
             forth.s:2113   .text:00000000000040e2 $d
             forth.s:2113   .text:00000000000040e6 _ERASE
             forth.s:2113   .text:00000000000040ec $t
             forth.s:2113   .text:00000000000040ec ERASE
             forth.s:2115   .text:00000000000040f0 $d
             forth.s:2131   .text:000000000000411c _PACKS
             forth.s:2131   .text:0000000000004122 $t
             forth.s:2131   .text:0000000000004124 PACKS
             forth.s:2133   .text:0000000000004128 $d
             forth.s:2162   .text:0000000000004180 _DIGIT
             forth.s:2162   .text:0000000000004186 $t
             forth.s:2162   .text:0000000000004188 DIGIT
             forth.s:2164   .text:000000000000418c $d
             forth.s:2179   .text:00000000000041c0 _EXTRC
             forth.s:2179   .text:00000000000041c8 $t
             forth.s:2179   .text:00000000000041c8 EXTRC
             forth.s:2181   .text:00000000000041cc $d
             forth.s:2191   .text:00000000000041e0 _BDIGS
             forth.s:2193   .text:00000000000041e8 $d
             forth.s:2203   .text:00000000000041fc _HOLD
             forth.s:2203   .text:0000000000004204 HOLD
             forth.s:2205   .text:0000000000004208 $d
             forth.s:2220   .text:000000000000422c _HOLDS
             forth.s:2220   .text:0000000000004232 $t
             forth.s:2220   .text:0000000000004234 HOLDS
             forth.s:2222   .text:0000000000004238 $d
             forth.s:2241   .text:0000000000004264 _DIG
             forth.s:2241   .text:0000000000004266 $t
             forth.s:2241   .text:0000000000004268 DIG
             forth.s:2243   .text:000000000000426c $d
             forth.s:2255   .text:0000000000004284 _DIGS
             forth.s:2257   .text:000000000000428c DIGS1
             forth.s:2258   .text:000000000000428c $d
             forth.s:2263   .text:00000000000042a8 DIGS2
             forth.s:2273   .text:00000000000042b4 _SIGN
ARM GAS  forth.s 			page 255


             forth.s:2275   .text:00000000000042c0 $d
             forth.s:2279   .text:00000000000042d8 SIGN1
             forth.s:2287   .text:00000000000042e0 _EDIGS
             forth.s:2289   .text:00000000000042e8 $d
             forth.s:2304   .text:0000000000004304 STRR
             forth.s:2305   .text:0000000000004304 $t
             forth.s:2306   .text:0000000000004308 $d
             forth.s:2323   .text:0000000000004334 _HEX
             forth.s:2323   .text:0000000000004338 $t
             forth.s:2323   .text:0000000000004338 HEX
             forth.s:2325   .text:000000000000433c $d
             forth.s:2336   .text:0000000000004354 _BIN
             forth.s:2336   .text:0000000000004358 $t
             forth.s:2336   .text:0000000000004358 BIN
             forth.s:2338   .text:000000000000435c $d
             forth.s:2348   .text:0000000000004374 _DECIM
             forth.s:2348   .text:000000000000437c $t
             forth.s:2350   .text:0000000000004380 $d
             forth.s:2365   .text:0000000000004398 _DIGTQ
             forth.s:2367   .text:00000000000043a4 $d
             forth.s:2380   .text:00000000000043ec DGTQ1
             forth.s:2400   .text:0000000000004400 _TONBR
             forth.s:2400   .text:0000000000004408 $t
             forth.s:2402   .text:000000000000440c $d
             forth.s:2434   .text:000000000000447c $t
             forth.s:2482   .text:00000000000044c8 $d
             forth.s:2482   .text:00000000000044cc _INTQ
             forth.s:2482   .text:00000000000044d4 INTQ
             forth.s:2485   .text:00000000000044d8 $d
             forth.s:2537   .text:00000000000045a0 _NUMBERQ
             forth.s:2537   .text:00000000000045a8 $t
             forth.s:2537   .text:00000000000045a8 NUMBERQ
             forth.s:2539   .text:00000000000045ac $d
             forth.s:2557   .text:00000000000045cc _SPACE
             forth.s:2557   .text:00000000000045d2 $t
             forth.s:2559   .text:00000000000045d8 $d
             forth.s:2568   .text:00000000000045e8 _SPACS
             forth.s:2568   .text:00000000000045f0 SPACS
             forth.s:2570   .text:00000000000045f4 $d
             forth.s:2576   .text:0000000000004610 CHAR2
             forth.s:2574   .text:000000000000460c CHAR1
             forth.s:2585   .text:0000000000004620 _TYPEE
             forth.s:2587   .text:000000000000462c $d
             forth.s:2593   .text:0000000000004644 TYPE2
             forth.s:2589   .text:0000000000004638 TYPE1
             forth.s:2603   .text:0000000000004658 _SLTYPE
             forth.s:2603   .text:000000000000465e $t
             forth.s:2603   .text:0000000000004660 SLTYPE
             forth.s:2605   .text:0000000000004664 $d
             forth.s:2620   .text:000000000000468c _CR
             forth.s:2622   .text:0000000000004694 $d
             forth.s:2634   .text:00000000000046b0 DOSTR
             forth.s:2635   .text:00000000000046b0 $t
             forth.s:2637   .text:00000000000046b4 $d
             forth.s:2656   .text:00000000000046e0 STRQP
             forth.s:2657   .text:00000000000046e0 $t
             forth.s:2658   .text:00000000000046e4 $d
ARM GAS  forth.s 			page 256


             forth.s:2669   .text:00000000000046ec $t
             forth.s:2670   .text:00000000000046f0 $d
             forth.s:2682   .text:00000000000046fc LPAD
             forth.s:2683   .text:00000000000046fc $t
             forth.s:2684   .text:0000000000004700 $d
             forth.s:2715   .text:0000000000004780 _DOTR
             forth.s:2715   .text:0000000000004784 DOTR
             forth.s:2717   .text:0000000000004788 $d
             forth.s:2799   .text:000000000000486c DTOA
             forth.s:2734   .text:00000000000047b0 _UDOTR
             forth.s:2734   .text:00000000000047b4 $t
             forth.s:2734   .text:00000000000047b4 UDOTR
             forth.s:2736   .text:00000000000047b8 $d
             forth.s:2752   .text:00000000000047e4 _UDOT
             forth.s:2754   .text:00000000000047ec $d
             forth.s:2770   .text:0000000000004818 _DOT
             forth.s:2770   .text:000000000000481a $t
             forth.s:2772   .text:0000000000004820 $d
             forth.s:2780   .text:0000000000004848 DOT1
             forth.s:2799   .text:0000000000004868 _DTOA
             forth.s:2799   .text:000000000000486c $t
             forth.s:2801   .text:0000000000004870 $d
             forth.s:2816   .text:0000000000004898 _DDOT
             forth.s:2816   .text:000000000000489c DDOT
             forth.s:2818   .text:00000000000048a0 $d
             forth.s:2829   .text:00000000000048c0 _UDDOT
             forth.s:2829   .text:00000000000048c4 $t
             forth.s:2829   .text:00000000000048c4 UDDOT
             forth.s:2831   .text:00000000000048c8 $d
             forth.s:2847   .text:00000000000048f0 _HDOT
             forth.s:2847   .text:00000000000048f4 HDOT
             forth.s:2849   .text:00000000000048f8 $d
             forth.s:2871   .text:0000000000004940 _QUEST
             forth.s:2871   .text:0000000000004942 $t
             forth.s:2871   .text:0000000000004944 QUEST
             forth.s:2873   .text:0000000000004948 $d
             forth.s:2887   .text:0000000000004954 PARS
             forth.s:2888   .text:0000000000004954 $t
             forth.s:2889   .text:0000000000004958 $d
             forth.s:2955   .text:0000000000004a68 PARS8
             forth.s:2919   .text:00000000000049dc PARS3
             forth.s:2902   .text:0000000000004994 PARS1
             forth.s:2917   .text:00000000000049d8 PARS2
             forth.s:2923   .text:00000000000049e8 PARS4
             forth.s:2935   .text:0000000000004a18 PARS5
             forth.s:2942   .text:0000000000004a3c PARS6
             forth.s:2948   .text:0000000000004a50 PARS7
             forth.s:2967   .text:0000000000004a7c _PARSE
             forth.s:2967   .text:0000000000004a82 $t
             forth.s:2967   .text:0000000000004a84 PARSE
             forth.s:2969   .text:0000000000004a88 $d
             forth.s:2991   .text:0000000000004ac8 _PARSENAME
             forth.s:2991   .text:0000000000004ad4 PARSENAME
             forth.s:2993   .text:0000000000004ad8 $d
             forth.s:3003   .text:0000000000004ae8 _DOTPR
             forth.s:3003   .text:0000000000004aec DOTPR
             forth.s:3005   .text:0000000000004af0 $d
ARM GAS  forth.s 			page 257


             forth.s:3016   .text:0000000000004b08 _PAREN
             forth.s:3016   .text:0000000000004b0a $t
             forth.s:3016   .text:0000000000004b0c PAREN
             forth.s:3018   .text:0000000000004b10 $d
             forth.s:3029   .text:0000000000004b28 _BKSLA
             forth.s:3029   .text:0000000000004b2a $t
             forth.s:3029   .text:0000000000004b2c BKSLA
             forth.s:3031   .text:0000000000004b30 $d
             forth.s:3042   .text:0000000000004b48 _CHAR
             forth.s:3042   .text:0000000000004b50 CHAR
             forth.s:3044   .text:0000000000004b54 $d
             forth.s:3054   .text:0000000000004b6c _IMCHAR
             forth.s:3054   .text:0000000000004b74 IMCHAR
             forth.s:3056   .text:0000000000004b78 $d
             forth.s:3841   .text:00000000000054d8 LITER
             forth.s:3065   .text:0000000000004b88 _WORDD
             forth.s:3065   .text:0000000000004b90 WORDD
             forth.s:3067   .text:0000000000004b94 $d
             forth.s:3079   .text:0000000000004bac _TOKEN
             forth.s:3079   .text:0000000000004bb2 $t
             forth.s:3079   .text:0000000000004bb4 TOKEN
             forth.s:3081   .text:0000000000004bb8 $d
             forth.s:3248   .text:0000000000004db4 UPPER
             forth.s:3095   .text:0000000000004bcc _TOCFA
             forth.s:3095   .text:0000000000004bd4 TOCFA
             forth.s:3097   .text:0000000000004bd8 $d
             forth.s:3118   .text:0000000000004c04 _SAMEQ
             forth.s:3118   .text:0000000000004c0a $t
             forth.s:3118   .text:0000000000004c0c SAMEQ
             forth.s:3120   .text:0000000000004c10 $d
             forth.s:3137   .text:0000000000004c58 SAME2
             forth.s:3122   .text:0000000000004c1c SAME1
             forth.s:3152   .text:0000000000004c6c SEARCH
             forth.s:3153   .text:0000000000004c6c $t
             forth.s:3154   .text:0000000000004c70 $d
             forth.s:3161   .text:0000000000004c8c SEARCH1
             forth.s:3181   .text:0000000000004ce4 SEARCH6
             forth.s:3174   .text:0000000000004ccc SEARCH2
             forth.s:3179   .text:0000000000004cdc SEARCH3
             forth.s:3188   .text:0000000000004cfc SEARCH4
             forth.s:3194   .text:0000000000004d18 SEARCH5
             forth.s:3210   .text:0000000000004d40 _NAMEQ
             forth.s:3210   .text:0000000000004d46 $t
             forth.s:3212   .text:0000000000004d4c $d
             forth.s:3227   .text:0000000000004d60 _ASCIZ
             forth.s:3227   .text:0000000000004d66 $t
             forth.s:3227   .text:0000000000004d68 ASCIZ
             forth.s:3229   .text:0000000000004d6c $d
             forth.s:3248   .text:0000000000004dac _UPPER
             forth.s:3248   .text:0000000000004db2 $t
             forth.s:3250   .text:0000000000004db8 $d
             forth.s:3281   .text:0000000000004e3c BKSP
             forth.s:3282   .text:0000000000004e3c $t
             forth.s:3283   .text:0000000000004e40 $d
             forth.s:3297   .text:0000000000004e84 BACK1
             forth.s:3306   .text:0000000000004e88 TAP
             forth.s:3307   .text:0000000000004e88 $t
ARM GAS  forth.s 			page 258


             forth.s:3308   .text:0000000000004e8c $d
             forth.s:3321   .text:0000000000004ea4 KTAP
             forth.s:3322   .text:0000000000004ea4 TTAP
             forth.s:3323   .text:0000000000004ea4 $t
             forth.s:3324   .text:0000000000004ea8 $d
             forth.s:3338   .text:0000000000004ee8 KTAP2
             forth.s:3335   .text:0000000000004ee0 KTAP1
             forth.s:3350   .text:0000000000004f00 _ACCEP
             forth.s:3352   .text:0000000000004f0c $d
             forth.s:3355   .text:0000000000004f18 ACCP1
             forth.s:3371   .text:0000000000004f60 ACCP4
             forth.s:3367   .text:0000000000004f54 ACCP2
             forth.s:3369   .text:0000000000004f58 ACCP3
             forth.s:3382   .text:0000000000004f74 _QUERY
             forth.s:3382   .text:0000000000004f7a $t
             forth.s:3382   .text:0000000000004f7c QUERY
             forth.s:3384   .text:0000000000004f80 $d
             forth.s:3402   .text:0000000000004fb4 _REFILL
             forth.s:3402   .text:0000000000004fbc REFILL
             forth.s:3404   .text:0000000000004fc0 $d
             forth.s:3418   .text:0000000000004fe4 _SAVEINP
             forth.s:3418   .text:0000000000004ff0 SAVEINP
             forth.s:3420   .text:0000000000004ff4 $d
             forth.s:3433   .text:0000000000005014 _RESTINP
             forth.s:3433   .text:0000000000005022 $t
             forth.s:3433   .text:0000000000005024 RESTINP
             forth.s:3435   .text:0000000000005028 $d
             forth.s:3454   .text:0000000000005050 _ABORT
             forth.s:3454   .text:0000000000005056 $t
             forth.s:3456   .text:000000000000505c ABORT1
             forth.s:3457   .text:000000000000505c $d
             forth.s:3544   .text:0000000000005164 LBRAC
             forth.s:3478   .text:000000000000509c PRT_ABORT
             forth.s:3479   .text:000000000000509c $t
             forth.s:3480   .text:00000000000050a0 $d
             forth.s:3498   .text:00000000000050c8 ABORQ
             forth.s:3499   .text:00000000000050c8 $t
             forth.s:3500   .text:00000000000050cc $d
             forth.s:3522   .text:00000000000050fc _INTER
             forth.s:3524   .text:000000000000510c $d
             forth.s:3533   .text:0000000000005148 INTE1
             forth.s:3530   .text:000000000000513e $t
             forth.s:3531   .text:0000000000005140 $d
             forth.s:3537   .text:0000000000005158 INTE2
             forth.s:3544   .text:0000000000005160 _LBRAC
             forth.s:3544   .text:0000000000005162 $t
             forth.s:3546   .text:0000000000005168 $d
             forth.s:3559   .text:0000000000005190 _DOTOK
             forth.s:3559   .text:0000000000005194 $t
             forth.s:3559   .text:0000000000005194 DOTOK
             forth.s:3561   .text:0000000000005198 $d
             forth.s:3567   .text:00000000000051bc DOTO1
             forth.s:3568   .text:00000000000051bc $d
             forth.s:3576   .text:00000000000051c8 _QSTAC
             forth.s:3576   .text:00000000000051d0 QSTAC
             forth.s:3578   .text:00000000000051d4 $d
             forth.s:3580   .text:00000000000051ea $t
ARM GAS  forth.s 			page 259


             forth.s:3581   .text:00000000000051ec $d
             forth.s:3588   .text:00000000000051f4 _EVAL
             forth.s:3590   .text:0000000000005200 EVAL1
             forth.s:3591   .text:0000000000005200 $d
             forth.s:3599   .text:0000000000005228 EVAL2
             forth.s:3615   .text:0000000000005238 _EVALUATE
             forth.s:3615   .text:0000000000005244 EVALUATE
             forth.s:3618   .text:0000000000005248 $d
             forth.s:3650   .text:00000000000052c8 _PRESE
             forth.s:3661   .text:00000000000052dc $d
             forth.s:3661   .text:00000000000052e0 _QUIT
             forth.s:3662   .text:00000000000052e8 $d
             forth.s:3664   .text:00000000000052f4 QUIT1
             forth.s:3666   .text:00000000000052f8 QUIT2
             forth.s:3676   .text:000000000000530c _FORGET
             forth.s:3676   .text:0000000000005314 FORGET
             forth.s:3678   .text:0000000000005318 $d
             forth.s:4539   .text:0000000000005da8 OVERT
             forth.s:3705   .text:0000000000005360 $d
             forth.s:3705   .text:0000000000005364 _POSTPONE
             forth.s:3705   .text:0000000000005370 POSTPONE
             forth.s:3707   .text:0000000000005374 $d
             forth.s:3730   .text:00000000000053ac ITICK
             forth.s:4582   .text:0000000000005e28 CALLC
             forth.s:3717   .text:0000000000005384 _TICK
             forth.s:3717   .text:0000000000005386 $t
             forth.s:3717   .text:0000000000005388 TICK
             forth.s:3719   .text:000000000000538c $d
             forth.s:3723   .text:00000000000053a0 TICK1
             forth.s:3730   .text:00000000000053a8 _ITICK
             forth.s:3730   .text:00000000000053ac $t
             forth.s:3732   .text:00000000000053b0 $d
             forth.s:3747   .text:00000000000053bc _FIND
             forth.s:3747   .text:00000000000053c4 FIND
             forth.s:3749   .text:00000000000053c8 $d
             forth.s:3769   .text:000000000000540c _ALLOT
             forth.s:3769   .text:0000000000005412 $t
             forth.s:3771   .text:0000000000005418 $d
             forth.s:3780   .text:0000000000005428 _COMMA
             forth.s:3780   .text:000000000000542a $t
             forth.s:3780   .text:000000000000542c COMMA
             forth.s:3782   .text:0000000000005430 $d
             forth.s:3796   .text:000000000000544c $d
             forth.s:3796   .text:0000000000005450 _CCOMMA
             forth.s:3796   .text:0000000000005454 CCOMMA
             forth.s:3798   .text:0000000000005458 $d
             forth.s:3811   .text:0000000000005478 _BCOMP
             forth.s:3811   .text:0000000000005482 $t
             forth.s:3811   .text:0000000000005484 BCOMP
             forth.s:3813   .text:0000000000005488 $d
             forth.s:3823   .text:0000000000005498 _COMPI
             forth.s:3823   .text:00000000000054a0 $t
             forth.s:3823   .text:00000000000054a0 COMPI
             forth.s:3825   .text:00000000000054a4 $d
             forth.s:3841   .text:00000000000054d0 _LITER
             forth.s:3841   .text:00000000000054d8 $t
             forth.s:3843   .text:00000000000054dc $d
ARM GAS  forth.s 			page 260


             forth.s:3853   .text:00000000000054f0 STRCQ
             forth.s:3854   .text:00000000000054f0 $t
             forth.s:3855   .text:00000000000054f4 $d
             forth.s:3877   .text:000000000000552c _FOR
             forth.s:3877   .text:0000000000005530 $t
             forth.s:3877   .text:0000000000005530 FOR
             forth.s:3879   .text:0000000000005534 $d
             forth.s:3888   .text:000000000000554c _DO
             forth.s:3888   .text:0000000000005550 DO
             forth.s:3890   .text:0000000000005554 $d
             forth.s:3902   .text:0000000000005574 _QDO
             forth.s:3902   .text:0000000000005578 $t
             forth.s:3902   .text:0000000000005578 QDO
             forth.s:3904   .text:000000000000557c $d
             forth.s:3918   .text:00000000000055dc DOPLOOP
             forth.s:3919   .text:00000000000055dc $t
             forth.s:3938   .text:0000000000005604 $d
             forth.s:3938   .text:0000000000005608 _PLOOP
             forth.s:3938   .text:000000000000560e $t
             forth.s:3938   .text:0000000000005610 PLOOP
             forth.s:3940   .text:0000000000005614 $d
             forth.s:3959   .text:0000000000005654 resolve_leave
             forth.s:3945   .text:000000000000562c DOLOOP
             forth.s:3946   .text:000000000000562c $t
             forth.s:3961   .text:0000000000005658 $d
             forth.s:3976   .text:0000000000005684 _LOOP
             forth.s:3976   .text:000000000000568c LOOP
             forth.s:3978   .text:0000000000005690 $d
             forth.s:3987   .text:00000000000056ac _UNLOOP
             forth.s:3987   .text:00000000000056b4 UNLOOP
             forth.s:3996   .text:00000000000056bc $d
             forth.s:3996   .text:00000000000056c0 _LEAVE
             forth.s:3996   .text:00000000000056c6 $t
             forth.s:3996   .text:00000000000056c8 LEAVE
             forth.s:3998   .text:00000000000056cc $d
             forth.s:4009   .text:00000000000056fc DOLEAVE
             forth.s:4010   .text:00000000000056fc $t
             forth.s:4021   .text:0000000000005708 $d
             forth.s:4021   .text:000000000000570c _BEGIN
             forth.s:4021   .text:0000000000005712 $t
             forth.s:4021   .text:0000000000005714 BEGIN
             forth.s:4023   .text:0000000000005718 $d
             forth.s:4032   .text:0000000000005720 $d
             forth.s:4032   .text:0000000000005724 _FNEXT
             forth.s:4032   .text:000000000000572c FNEXT
             forth.s:4034   .text:0000000000005730 $d
             forth.s:4042   .text:0000000000005748 _I
             forth.s:4042   .text:000000000000574a $t
             forth.s:4042   .text:000000000000574c I
             forth.s:4051   .text:0000000000005758 $d
             forth.s:4051   .text:000000000000575c _J
             forth.s:4051   .text:000000000000575e $t
             forth.s:4051   .text:0000000000005760 J
             forth.s:4061   .text:000000000000576c $d
             forth.s:4061   .text:0000000000005770 _UNTIL
             forth.s:4061   .text:0000000000005776 $t
             forth.s:4061   .text:0000000000005778 UNTIL
ARM GAS  forth.s 			page 261


             forth.s:4063   .text:000000000000577c $d
             forth.s:4072   .text:0000000000005794 _AGAIN
             forth.s:4072   .text:000000000000579a $t
             forth.s:4072   .text:000000000000579c AGAIN
             forth.s:4074   .text:00000000000057a0 $d
             forth.s:4083   .text:00000000000057b8 _IFF
             forth.s:4083   .text:00000000000057bc IFF
             forth.s:4085   .text:00000000000057c0 $d
             forth.s:4097   .text:00000000000057e8 _AHEAD
             forth.s:4097   .text:00000000000057ee $t
             forth.s:4097   .text:00000000000057f0 AHEAD
             forth.s:4099   .text:00000000000057f4 $d
             forth.s:4111   .text:000000000000581c _REPEA
             forth.s:4111   .text:0000000000005824 REPEA
             forth.s:4113   .text:0000000000005828 $d
             forth.s:4124   .text:0000000000005840 _THENN
             forth.s:4124   .text:0000000000005848 THENN
             forth.s:4126   .text:000000000000584c $d
             forth.s:4137   .text:0000000000005860 _AFT
             forth.s:4137   .text:0000000000005864 $t
             forth.s:4137   .text:0000000000005864 AFT
             forth.s:4139   .text:0000000000005868 $d
             forth.s:4151   .text:0000000000005880 _ELSEE
             forth.s:4151   .text:0000000000005888 ELSEE
             forth.s:4153   .text:000000000000588c $d
             forth.s:4163   .text:00000000000058a0 _WHILE
             forth.s:4163   .text:00000000000058a6 $t
             forth.s:4163   .text:00000000000058a8 WHILE
             forth.s:4165   .text:00000000000058ac $d
             forth.s:4175   .text:00000000000058bc _CASE
             forth.s:4175   .text:00000000000058c4 CASE
             forth.s:4177   .text:00000000000058c8 $d
             forth.s:4186   .text:00000000000058d8 _OF
             forth.s:4186   .text:00000000000058dc OF
             forth.s:4188   .text:00000000000058e0 $d
             forth.s:4202   .text:000000000000591c _ENDOF
             forth.s:4202   .text:0000000000005922 $t
             forth.s:4202   .text:0000000000005924 ENDOF
             forth.s:4204   .text:0000000000005928 $d
             forth.s:4220   .text:000000000000595c _ENDCASE
             forth.s:4220   .text:0000000000005964 $t
             forth.s:4220   .text:0000000000005964 ENDCASE
             forth.s:4222   .text:0000000000005968 $d
             forth.s:4239   .text:00000000000059a0 _RECURSE
             forth.s:4239   .text:00000000000059a8 $t
             forth.s:4239   .text:00000000000059a8 RECURSE
             forth.s:4241   .text:00000000000059ac $d
             forth.s:4253   .text:00000000000059c4 _ABRTQ
             forth.s:4253   .text:00000000000059cc ABRTQ
             forth.s:4255   .text:00000000000059d0 $d
             forth.s:4265   .text:00000000000059e8 _STRQ
             forth.s:4265   .text:00000000000059ec STRQ
             forth.s:4267   .text:00000000000059f0 $d
             forth.s:4277   .text:0000000000005a08 _STRSLHQ
             forth.s:4277   .text:0000000000005a0c $t
             forth.s:4277   .text:0000000000005a0c STRSLHQ
             forth.s:4279   .text:0000000000005a10 $d
ARM GAS  forth.s 			page 262


             forth.s:4309   .text:0000000000005aa8 GETC
             forth.s:4323   .text:0000000000005ac6 ESCAPE
             forth.s:4310   .text:0000000000005aa8 $t
             forth.s:4325   .text:0000000000005aca $d
             forth.s:4358   .text:0000000000005b76 PARSE_HEX
             forth.s:4391   .text:0000000000005bfa esc_char
             forth.s:4359   .text:0000000000005b76 $t
             forth.s:4360   .text:0000000000005b7a $d
             forth.s:4377   .text:0000000000005bc2 TO_HEX
             forth.s:4378   .text:0000000000005bc2 $t
             forth.s:4379   .text:0000000000005bc6 $d
             forth.s:4400   .text:0000000000005c13 STRCSLHQ
             forth.s:4411   .text:0000000000005c17 _CSTRQ
             forth.s:4411   .text:0000000000005c1a $t
             forth.s:4411   .text:0000000000005c1c CSTRQ
             forth.s:4413   .text:0000000000005c20 $d
             forth.s:4426   .text:0000000000005c50 _DOTQ
             forth.s:4426   .text:0000000000005c54 DOTQ
             forth.s:4428   .text:0000000000005c58 $d
             forth.s:4442   .text:0000000000005c70 _UNIQU
             forth.s:4442   .text:0000000000005c78 $t
             forth.s:4442   .text:0000000000005c78 UNIQU
             forth.s:4444   .text:0000000000005c7c $d
             forth.s:4451   .text:0000000000005ca4 UNIQ1
             forth.s:4448   .text:0000000000005c98 $d
             forth.s:4461   .text:0000000000005cac SNAME
             forth.s:4462   .text:0000000000005cac $t
             forth.s:4463   .text:0000000000005cb0 $d
             forth.s:4479   .text:0000000000005cf4 SNAM1
             forth.s:4491   .text:0000000000005d08 _SCOMP
             forth.s:4491   .text:0000000000005d14 SCOMP
             forth.s:4493   .text:0000000000005d18 $d
             forth.s:4505   .text:0000000000005d50 SCOM2
             forth.s:4502   .text:0000000000005d48 SCOM1
             forth.s:4510   .text:0000000000005d64 SCOM3
             forth.s:4519   .text:0000000000005d6c COLON_ABORT
             forth.s:4520   .text:0000000000005d6c $t
             forth.s:4521   .text:0000000000005d70 $d
             forth.s:4539   .text:0000000000005da0 _OVERT
             forth.s:4539   .text:0000000000005da6 $t
             forth.s:4541   .text:0000000000005dac $d
             forth.s:4552   .text:0000000000005dc4 _SEMIS
             forth.s:4552   .text:0000000000005dc6 $t
             forth.s:4552   .text:0000000000005dc8 SEMIS
             forth.s:4554   .text:0000000000005dcc $d
             forth.s:4567   .text:0000000000005dec _RBRAC
             forth.s:4567   .text:0000000000005dee $t
             forth.s:4567   .text:0000000000005df0 RBRAC
             forth.s:4569   .text:0000000000005df4 $d
             forth.s:4582   .text:0000000000005e1c _CALLC
             forth.s:4584   .text:0000000000005e2c $d
             forth.s:4598   .text:0000000000005e44 _BUFFERCOL
             forth.s:4598   .text:0000000000005e4c $t
             forth.s:4598   .text:0000000000005e4c BUFFERCOL
             forth.s:4600   .text:0000000000005e50 $d
             forth.s:4782   .text:0000000000006078 CREAT
             forth.s:4617   .text:0000000000005e7c _COLON
ARM GAS  forth.s 			page 263


             forth.s:4617   .text:0000000000005e7e $t
             forth.s:4617   .text:0000000000005e80 COLON
             forth.s:4619   .text:0000000000005e84 $d
             forth.s:4631   .text:0000000000005ea0 _IMMED
             forth.s:4631   .text:0000000000005eaa $t
             forth.s:4631   .text:0000000000005eac IMMED
             forth.s:4633   .text:0000000000005eb0 $d
             forth.s:4647   .text:0000000000005ed8 $t
             forth.s:4653   .text:0000000000005ed8 DODOES
             forth.s:4655   .text:0000000000005edc $d
             forth.s:5095   .text:0000000000006464 TOVECTOR
             forth.s:4671   .text:0000000000005f04 $d
             forth.s:4671   .text:0000000000005f08 _DOES
             forth.s:4671   .text:0000000000005f0e $t
             forth.s:4671   .text:0000000000005f10 DOES
             forth.s:4673   .text:0000000000005f14 $d
             forth.s:4683   .text:0000000000005f38 _DEFERAT
             forth.s:4683   .text:0000000000005f40 DEFERAT
             forth.s:4685   .text:0000000000005f44 $d
             forth.s:4694   .text:0000000000005f54 _ACTIONOF
             forth.s:4694   .text:0000000000005f5e $t
             forth.s:4694   .text:0000000000005f60 ACTIONOF
             forth.s:4696   .text:0000000000005f64 $d
             forth.s:4709   .text:0000000000005f88 _DEFERSTO
             forth.s:4709   .text:0000000000005f90 DEFERSTO
             forth.s:4711   .text:0000000000005f94 $d
             forth.s:4721   .text:0000000000005fb0 _DEFER
             forth.s:4721   .text:0000000000005fb6 $t
             forth.s:4721   .text:0000000000005fb8 DEFER
             forth.s:4723   .text:0000000000005fbc $d
             forth.s:4733   .text:0000000000005fe0 NO_ACTION
             forth.s:4734   .text:0000000000005fe0 $t
             forth.s:4735   .text:0000000000005fe4 $d
             forth.s:4737   .text:0000000000006000 $d
             forth.s:4747   .text:0000000000006008 _NONAME
             forth.s:4747   .text:0000000000006010 $t
             forth.s:4747   .text:0000000000006010 NONAME
             forth.s:4749   .text:0000000000006014 $d
             forth.s:4762   .text:0000000000006028 _IS
             forth.s:4762   .text:000000000000602c IS
             forth.s:4764   .text:0000000000006030 $d
             forth.s:4782   .text:0000000000006070 _CREAT
             forth.s:4784   .text:000000000000607c $d
             forth.s:4799   .text:00000000000060b8 DOVAR
             forth.s:4800   .text:00000000000060b8 $t
             forth.s:4811   .text:00000000000060c6 $d
             forth.s:4811   .text:00000000000060ca _VARIA
             forth.s:4811   .text:00000000000060d4 VARIA
             forth.s:4813   .text:00000000000060d8 $d
             forth.s:4823   .text:00000000000060ec DOCON
             forth.s:4824   .text:00000000000060ec $t
             forth.s:4835   .text:00000000000060f8 $d
             forth.s:4835   .text:00000000000060fc _VALUE
             forth.s:4835   .text:0000000000006102 $t
             forth.s:4835   .text:0000000000006104 VALUE
             forth.s:4837   .text:0000000000006108 $d
             forth.s:4853   .text:0000000000006140 _TO
ARM GAS  forth.s 			page 264


             forth.s:4853   .text:0000000000006144 TO
             forth.s:4855   .text:0000000000006148 $d
             forth.s:4867   .text:0000000000006168 _CONST
             forth.s:4867   .text:0000000000006174 CONST
             forth.s:4869   .text:0000000000006178 $d
             forth.s:4891   .text:00000000000061a8 DMP
             forth.s:4892   .text:00000000000061a8 $t
             forth.s:4893   .text:00000000000061ac $d
             forth.s:4911   .text:0000000000006200 PDUM2
             forth.s:4905   .text:00000000000061e8 PDUM1
             forth.s:4926   .text:0000000000006218 $d
             forth.s:4926   .text:000000000000621c _DUMP
             forth.s:4926   .text:0000000000006224 DUMP
             forth.s:4928   .text:0000000000006228 $d
             forth.s:4954   .text:00000000000062a4 DUMP4
             forth.s:4944   .text:000000000000627c DUMP1
             forth.s:4956   .text:00000000000062ac DUMP3
             forth.s:4969   .text:00000000000062c0 TDOT
             forth.s:4970   .text:00000000000062c0 $t
             forth.s:4971   .text:00000000000062c4 $d
             forth.s:5010   .text:0000000000006358 _DOTS
             forth.s:5010   .text:000000000000635c DOTS
             forth.s:5012   .text:0000000000006360 $d
             forth.s:5019   .text:000000000000637c DOTS2
             forth.s:5015   .text:0000000000006370 DOTS1
             forth.s:5024   .text:000000000000638c RBASE
             forth.s:5025   .text:000000000000638c $t
             forth.s:5033   .text:000000000000639c RDOT
             forth.s:5035   .text:00000000000063a0 $d
             forth.s:5062   .text:0000000000006404 _TRACE
             forth.s:5062   .text:000000000000640a $t
             forth.s:5062   .text:000000000000640c TRACE
             forth.s:5064   .text:0000000000006410 $d
             forth.s:5083   .text:0000000000006454 _TOBODY
             forth.s:5083   .text:000000000000645a $t
             forth.s:5083   .text:000000000000645c TOBODY
             forth.s:5104   .text:000000000000646c $d
             forth.s:5104   .text:0000000000006470 _TONFA
             forth.s:5104   .text:0000000000006478 TONFA
             forth.s:5106   .text:000000000000647c $d
             forth.s:5109   .text:0000000000006488 TNAM1
             forth.s:5120   .text:00000000000064bc TNAM2
             forth.s:5130   .text:00000000000064cc _DOTID
             forth.s:5130   .text:00000000000064d0 $t
             forth.s:5130   .text:00000000000064d0 DOTID
             forth.s:5132   .text:00000000000064d4 $d
             forth.s:5140   .text:00000000000064fc DOTI1
             forth.s:5141   .text:000000000000650a $t
             forth.s:5142   .text:000000000000650c $d
             forth.s:5144   *ABS*:0000000000000000 WANT_SEE
             forth.s:5218   .text:0000000000006514 _WORDS
             forth.s:5218   .text:000000000000651a $t
             forth.s:5218   .text:000000000000651c WORDS
             forth.s:5220   .text:0000000000006520 $d
             forth.s:5223   .text:000000000000652c WORS1
             forth.s:5232   .text:0000000000006554 WORS2
             forth.s:5241   .text:000000000000655c _MARKER
ARM GAS  forth.s 			page 265


             forth.s:5241   .text:0000000000006564 MARKER
             forth.s:5243   .text:0000000000006568 $d
             forth.s:5246   .text:0000000000006574 $t
             forth.s:5247   .text:0000000000006578 $d
             forth.s:5262   .text:00000000000065a8 _ARRAY
             forth.s:5262   .text:00000000000065ae $t
             forth.s:5262   .text:00000000000065b0 ARRAY
             forth.s:5264   .text:00000000000065b4 $d
             forth.s:5278   .text:00000000000065f0 DO_ARRAY
             forth.s:5279   .text:00000000000065f0 $t
             forth.s:5280   .text:00000000000065f4 $d
             forth.s:5298   .text:0000000000006610 VERSN
             forth.s:5299   .text:0000000000006610 $t
             forth.s:5300   .text:0000000000006614 $d
             forth.s:5308   .text:0000000000006624 _HI
             forth.s:5308   .text:0000000000006628 HI
             forth.s:5310   .text:000000000000662c $d
             forth.s:5311   .text:0000000000006646 $t
             forth.s:5312   .text:0000000000006648 $d
             forth.s:5336   .text:0000000000006694 $t
             forth.s:5337   .text:0000000000006698 $d
             forth.s:5349   .text:00000000000066b4 PS2_QUERY
             forth.s:5350   .text:00000000000066b4 $t
             forth.s:5351   .text:00000000000066b8 $d
             forth.s:5365   .text:000000000000671e $t
             forth.s:5366   .text:0000000000006720 $d
             forth.s:5376   .text:000000000000672c IF_SENSE
             forth.s:5377   .text:000000000000672c $t
             forth.s:5378   .text:0000000000006730 $d
             forth.s:5392   .text:0000000000006760 READY
             forth.s:5393   .text:0000000000006760 $t
             forth.s:5394   .text:0000000000006764 $d
             forth.s:5394   .text:000000000000676e $t
             forth.s:5395   .text:0000000000006770 $d
             forth.s:5413   .text:0000000000006798 COLD1
             forth.s:5414   .text:0000000000006798 $d
             forth.s:5429   .text:00000000000067e8 COLD2
             forth.s:5432   .text:00000000000067e8 $d
             forth.s:5435   .text:00000000000067ec $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
       environment.s:32     .text:0000000000000961 $d
       environment.s:32     .text:0000000000000962 $t
       environment.s:107    .text:00000000000009ff $d
       environment.s:107    .text:0000000000000a00 $t
       environment.s:141    .text:0000000000000a47 $d
       environment.s:141    .text:0000000000000a48 $t
ARM GAS  forth.s 			page 266


       environment.s:187    .text:0000000000000aad $d
       environment.s:187    .text:0000000000000aae $t
       environment.s:201    .text:0000000000000ad9 $d
       environment.s:201    .text:0000000000000ada $t
          ser-term.s:90     .text:0000000000000b9f $d
          ser-term.s:90     .text:0000000000000ba0 $t
          ser-term.s:110    .text:0000000000000bd9 $d
          ser-term.s:110    .text:0000000000000bda $t
          ser-term.s:133    .text:0000000000000c17 $d
          ser-term.s:133    .text:0000000000000c18 $t
          ser-term.s:164    .text:0000000000000c5f $d
          ser-term.s:164    .text:0000000000000c60 $t
          ser-term.s:191    .text:0000000000000cd5 $d
          ser-term.s:191    .text:0000000000000cd6 $t
          ser-term.s:203    .text:0000000000000d03 $d
          ser-term.s:203    .text:0000000000000d04 $t
             tvout.s:264    .text:0000000000000f4f $d
             tvout.s:264    .text:0000000000000f50 $t
             tvout.s:278    .text:0000000000000f83 $d
             tvout.s:278    .text:0000000000000f84 $t
             tvout.s:306    .text:0000000000000fdd $d
             tvout.s:306    .text:0000000000000fde $t
             tvout.s:325    .text:000000000000100b $d
             tvout.s:325    .text:000000000000100c $t
             tvout.s:427    .text:0000000000001145 $d
             tvout.s:427    .text:0000000000001146 $t
             tvout.s:448    .text:000000000000119f $d
             tvout.s:448    .text:00000000000011a0 $t
             tvout.s:495    .text:0000000000001235 $d
             tvout.s:495    .text:0000000000001236 $t
           ps2_kbd.s:307    .text:0000000000001923 $d
           ps2_kbd.s:307    .text:0000000000001924 $t
           ps2_kbd.s:396    .text:0000000000001a1f $d
           ps2_kbd.s:396    .text:0000000000001a20 $t
           ps2_kbd.s:616    .text:0000000000001cc1 $d
           ps2_kbd.s:616    .text:0000000000001cc2 $t
           ps2_kbd.s:633    .text:0000000000001cfb $d
           ps2_kbd.s:633    .text:0000000000001cfc $t
         spi-flash.s:87     .text:0000000000001de7 $d
         spi-flash.s:87     .text:0000000000001de8 $t
         spi-flash.s:206    .text:0000000000001f6b $d
         spi-flash.s:206    .text:0000000000001f6c $t
         spi-flash.s:281    .text:0000000000002079 $d
         spi-flash.s:281    .text:000000000000207a $t
         spi-flash.s:296    .text:00000000000020b3 $d
         spi-flash.s:296    .text:00000000000020b4 $t
         spi-flash.s:314    .text:00000000000020ef $d
         spi-flash.s:314    .text:00000000000020f0 $t
         spi-flash.s:336    .text:0000000000002143 $d
         spi-flash.s:336    .text:0000000000002144 $t
         spi-flash.s:384    .text:00000000000021bb $d
         spi-flash.s:384    .text:00000000000021bc $t
         spi-flash.s:406    .text:00000000000021dd $d
         spi-flash.s:406    .text:00000000000021de $t
         spi-flash.s:418    .text:00000000000021f1 $d
         spi-flash.s:418    .text:00000000000021f2 $t
               fpu.s:222    .text:00000000000023c3 $d
ARM GAS  forth.s 			page 267


               fpu.s:222    .text:00000000000023c4 $t
               fpu.s:235    .text:00000000000023e3 $d
               fpu.s:235    .text:00000000000023e4 $t
               fpu.s:249    .text:0000000000002403 $d
               fpu.s:249    .text:0000000000002404 $t
               fpu.s:262    .text:0000000000002423 $d
               fpu.s:262    .text:0000000000002424 $t
               fpu.s:285    .text:0000000000002461 $d
               fpu.s:285    .text:0000000000002462 $t
               fpu.s:297    .text:0000000000002481 $d
               fpu.s:297    .text:0000000000002482 $t
               fpu.s:319    .text:00000000000024bb $d
               fpu.s:319    .text:00000000000024bc $t
               fpu.s:330    .text:00000000000024d7 $d
               fpu.s:330    .text:00000000000024d8 $t
               fpu.s:340    .text:00000000000024f1 $d
               fpu.s:340    .text:00000000000024f2 $t
               fpu.s:353    .text:0000000000002521 $d
               fpu.s:353    .text:0000000000002522 $t
               fpu.s:379    .text:0000000000002571 $d
               fpu.s:379    .text:0000000000002572 $t
               fpu.s:403    .text:00000000000025bb $d
               fpu.s:403    .text:00000000000025bc $t
               fpu.s:421    .text:00000000000025ed $d
               fpu.s:421    .text:00000000000025ee $t
               fpu.s:431    .text:0000000000002609 $d
               fpu.s:431    .text:000000000000260a $t
            strtof.s:226    .text:000000000000288b $d
            strtof.s:226    .text:000000000000288c $t
              ftoa.s:412    .text:0000000000002ef7 $d
              ftoa.s:412    .text:0000000000002ef8 $t
             forth.s:133    .text:0000000000002fb3 $d
             forth.s:133    .text:0000000000002fb4 $t
             forth.s:145    .text:0000000000002fd3 $d
             forth.s:145    .text:0000000000002fd4 $t
             forth.s:157    .text:0000000000002ff3 $d
             forth.s:157    .text:0000000000002ff4 $t
             forth.s:192    .text:000000000000302d $d
             forth.s:192    .text:000000000000302e $t
             forth.s:228    .text:000000000000304b $d
             forth.s:228    .text:000000000000304c $t
             forth.s:259    .text:00000000000030c3 $d
             forth.s:259    .text:00000000000030c4 $t
             forth.s:275    .text:00000000000030f5 $d
             forth.s:275    .text:00000000000030f6 $t
             forth.s:292    .text:0000000000003123 $d
             forth.s:292    .text:0000000000003124 $t
             forth.s:306    .text:000000000000314d $d
             forth.s:306    .text:000000000000314e $t
             forth.s:418    .text:0000000000003205 $d
             forth.s:418    .text:0000000000003206 $t
             forth.s:444    .text:000000000000322f $d
             forth.s:444    .text:0000000000003230 $t
             forth.s:454    .text:0000000000003243 $d
             forth.s:454    .text:0000000000003244 $t
             forth.s:463    .text:000000000000324f $d
             forth.s:463    .text:0000000000003250 $t
ARM GAS  forth.s 			page 268


             forth.s:484    .text:0000000000003281 $d
             forth.s:484    .text:0000000000003282 $t
             forth.s:505    .text:00000000000032b1 $d
             forth.s:505    .text:00000000000032b2 $t
             forth.s:562    .text:0000000000003325 $d
             forth.s:562    .text:0000000000003326 $t
             forth.s:587    .text:0000000000003357 $d
             forth.s:587    .text:0000000000003358 $t
             forth.s:612    .text:0000000000003385 $d
             forth.s:612    .text:0000000000003386 $t
             forth.s:635    .text:00000000000033b5 $d
             forth.s:635    .text:00000000000033b6 $t
             forth.s:643    .text:00000000000033c5 $d
             forth.s:643    .text:00000000000033c6 $t
             forth.s:664    .text:00000000000033eb $d
             forth.s:664    .text:00000000000033ec $t
             forth.s:685    .text:0000000000003415 $d
             forth.s:685    .text:0000000000003416 $t
             forth.s:715    .text:000000000000345b $d
             forth.s:715    .text:000000000000345c $t
             forth.s:724    .text:0000000000003471 $d
             forth.s:724    .text:0000000000003472 $t
             forth.s:772    .text:00000000000034cb $d
             forth.s:772    .text:00000000000034cc $t
             forth.s:783    .text:00000000000034df $d
             forth.s:783    .text:00000000000034e0 $t
             forth.s:791    .text:00000000000034ed $d
             forth.s:791    .text:00000000000034ee $t
             forth.s:799    .text:00000000000034fd $d
             forth.s:799    .text:00000000000034fe $t
             forth.s:807    .text:000000000000350d $d
             forth.s:807    .text:000000000000350e $t
             forth.s:831    .text:000000000000353d $d
             forth.s:831    .text:000000000000353e $t
             forth.s:856    .text:0000000000003571 $d
             forth.s:856    .text:0000000000003572 $t
             forth.s:864    .text:0000000000003581 $d
             forth.s:864    .text:0000000000003582 $t
             forth.s:872    .text:0000000000003593 $d
             forth.s:872    .text:0000000000003594 $t
             forth.s:882    .text:00000000000035a7 $d
             forth.s:882    .text:00000000000035a8 $t
             forth.s:891    .text:00000000000035b9 $d
             forth.s:891    .text:00000000000035ba $t
             forth.s:945    .text:000000000000363f $d
             forth.s:945    .text:0000000000003640 $t
             forth.s:974    .text:000000000000367b $d
             forth.s:974    .text:000000000000367c $t
             forth.s:984    .text:000000000000368f $d
             forth.s:984    .text:0000000000003690 $t
             forth.s:997    .text:00000000000036ad $d
             forth.s:997    .text:00000000000036ae $t
             forth.s:1042   .text:0000000000003715 $d
             forth.s:1042   .text:0000000000003716 $t
             forth.s:1050   .text:0000000000003729 $d
             forth.s:1050   .text:000000000000372a $t
             forth.s:1101   .text:0000000000003799 $d
ARM GAS  forth.s 			page 269


             forth.s:1101   .text:000000000000379a $t
             forth.s:1112   .text:00000000000037b3 $d
             forth.s:1112   .text:00000000000037b4 $t
             forth.s:1135   .text:00000000000037e5 $d
             forth.s:1135   .text:00000000000037e6 $t
             forth.s:1148   .text:0000000000003809 $d
             forth.s:1148   .text:000000000000380a $t
             forth.s:1172   .text:000000000000383d $d
             forth.s:1172   .text:000000000000383e $t
             forth.s:1218   .text:00000000000038a1 $d
             forth.s:1218   .text:00000000000038a2 $t
             forth.s:1230   .text:00000000000038bd $d
             forth.s:1230   .text:00000000000038be $t
             forth.s:1242   .text:00000000000038dd $d
             forth.s:1242   .text:00000000000038de $t
             forth.s:1293   .text:0000000000003945 $d
             forth.s:1293   .text:0000000000003946 $t
             forth.s:1330   .text:00000000000039a1 $d
             forth.s:1330   .text:00000000000039a2 $t
             forth.s:1360   .text:00000000000039dd $d
             forth.s:1360   .text:00000000000039de $t
             forth.s:1379   .text:0000000000003a09 $d
             forth.s:1379   .text:0000000000003a0a $t
             forth.s:1419   .text:0000000000003a63 $d
             forth.s:1419   .text:0000000000003a64 $t
             forth.s:1430   .text:0000000000003a7b $d
             forth.s:1430   .text:0000000000003a7c $t
             forth.s:1452   .text:0000000000003ab1 $d
             forth.s:1452   .text:0000000000003ab2 $t
             forth.s:1466   .text:0000000000003acf $d
             forth.s:1466   .text:0000000000003ad0 $t
             forth.s:1477   .text:0000000000003aed $d
             forth.s:1477   .text:0000000000003aee $t
             forth.s:1506   .text:0000000000003b45 $d
             forth.s:1506   .text:0000000000003b46 $t
             forth.s:1521   .text:0000000000003b63 $d
             forth.s:1521   .text:0000000000003b64 $t
             forth.s:1538   .text:0000000000003b8f $d
             forth.s:1538   .text:0000000000003b90 $t
             forth.s:1568   .text:0000000000003bcb $d
             forth.s:1568   .text:0000000000003bcc $t
             forth.s:1608   .text:0000000000003c43 $d
             forth.s:1608   .text:0000000000003c44 $t
             forth.s:1717   .text:0000000000003d6f $d
             forth.s:1717   .text:0000000000003d70 $t
             forth.s:1739   .text:0000000000003dbb $d
             forth.s:1739   .text:0000000000003dbc $t
             forth.s:1788   .text:0000000000003dfb $d
             forth.s:1788   .text:0000000000003dfc $t
             forth.s:1839   .text:0000000000003e73 $d
             forth.s:1839   .text:0000000000003e74 $t
             forth.s:1931   .text:0000000000003f5d $d
             forth.s:1931   .text:0000000000003f5e $t
             forth.s:1959   .text:0000000000003f91 $d
             forth.s:1959   .text:0000000000003f92 $t
             forth.s:2006   .text:0000000000003ff9 $d
             forth.s:2006   .text:0000000000003ffa $t
ARM GAS  forth.s 			page 270


             forth.s:2017   .text:000000000000401d $d
             forth.s:2017   .text:000000000000401e $t
             forth.s:2054   .text:0000000000004075 $d
             forth.s:2054   .text:0000000000004076 $t
             forth.s:2095   .text:00000000000040c9 $d
             forth.s:2095   .text:00000000000040ca $t
             forth.s:2191   .text:00000000000041e3 $d
             forth.s:2191   .text:00000000000041e4 $t
             forth.s:2203   .text:0000000000004201 $d
             forth.s:2203   .text:0000000000004202 $t
             forth.s:2255   .text:0000000000004287 $d
             forth.s:2255   .text:0000000000004288 $t
             forth.s:2273   .text:00000000000042b9 $d
             forth.s:2273   .text:00000000000042ba $t
             forth.s:2287   .text:00000000000042e3 $d
             forth.s:2287   .text:00000000000042e4 $t
             forth.s:2365   .text:000000000000439f $d
             forth.s:2365   .text:00000000000043a0 $t
             forth.s:2482   .text:00000000000044d1 $d
             forth.s:2482   .text:00000000000044d2 $t
             forth.s:2568   .text:00000000000045ef $d
             forth.s:2568   .text:00000000000045f0 $t
             forth.s:2585   .text:0000000000004625 $d
             forth.s:2585   .text:0000000000004626 $t
             forth.s:2620   .text:000000000000468f $d
             forth.s:2620   .text:0000000000004690 $t
             forth.s:2715   .text:0000000000004783 $d
             forth.s:2715   .text:0000000000004784 $t
             forth.s:2752   .text:00000000000047e7 $d
             forth.s:2752   .text:00000000000047e8 $t
             forth.s:2816   .text:000000000000489b $d
             forth.s:2816   .text:000000000000489c $t
             forth.s:2847   .text:00000000000048f3 $d
             forth.s:2847   .text:00000000000048f4 $t
             forth.s:2991   .text:0000000000004ad3 $d
             forth.s:2991   .text:0000000000004ad4 $t
             forth.s:3003   .text:0000000000004aeb $d
             forth.s:3003   .text:0000000000004aec $t
             forth.s:3042   .text:0000000000004b4d $d
             forth.s:3042   .text:0000000000004b4e $t
             forth.s:3054   .text:0000000000004b73 $d
             forth.s:3054   .text:0000000000004b74 $t
             forth.s:3065   .text:0000000000004b8d $d
             forth.s:3065   .text:0000000000004b8e $t
             forth.s:3095   .text:0000000000004bd1 $d
             forth.s:3095   .text:0000000000004bd2 $t
             forth.s:3350   .text:0000000000004f07 $d
             forth.s:3350   .text:0000000000004f08 $t
             forth.s:3402   .text:0000000000004fbb $d
             forth.s:3402   .text:0000000000004fbc $t
             forth.s:3418   .text:0000000000004fef $d
             forth.s:3418   .text:0000000000004ff0 $t
             forth.s:3522   .text:0000000000005107 $d
             forth.s:3522   .text:0000000000005108 $t
             forth.s:3576   .text:00000000000051cf $d
             forth.s:3576   .text:00000000000051d0 $t
             forth.s:3588   .text:00000000000051f9 $d
ARM GAS  forth.s 			page 271


             forth.s:3588   .text:00000000000051fa $t
             forth.s:3615   .text:0000000000005241 $d
             forth.s:3615   .text:0000000000005242 $t
             forth.s:3650   .text:00000000000052cf $d
             forth.s:3650   .text:00000000000052d0 $t
             forth.s:3661   .text:00000000000052e5 $d
             forth.s:3661   .text:00000000000052e6 $t
             forth.s:3676   .text:0000000000005313 $d
             forth.s:3676   .text:0000000000005314 $t
             forth.s:3705   .text:000000000000536d $d
             forth.s:3705   .text:000000000000536e $t
             forth.s:3747   .text:00000000000053c1 $d
             forth.s:3747   .text:00000000000053c2 $t
             forth.s:3796   .text:0000000000005453 $d
             forth.s:3796   .text:0000000000005454 $t
             forth.s:3888   .text:000000000000554f $d
             forth.s:3888   .text:0000000000005550 $t
             forth.s:3976   .text:0000000000005689 $d
             forth.s:3976   .text:000000000000568a $t
             forth.s:3987   .text:00000000000056b3 $d
             forth.s:3987   .text:00000000000056b4 $t
             forth.s:4032   .text:0000000000005729 $d
             forth.s:4032   .text:000000000000572a $t
             forth.s:4083   .text:00000000000057bb $d
             forth.s:4083   .text:00000000000057bc $t
             forth.s:4111   .text:0000000000005823 $d
             forth.s:4111   .text:0000000000005824 $t
             forth.s:4124   .text:0000000000005845 $d
             forth.s:4124   .text:0000000000005846 $t
             forth.s:4151   .text:0000000000005885 $d
             forth.s:4151   .text:0000000000005886 $t
             forth.s:4175   .text:00000000000058c1 $d
             forth.s:4175   .text:00000000000058c2 $t
             forth.s:4186   .text:00000000000058db $d
             forth.s:4186   .text:00000000000058dc $t
             forth.s:4253   .text:00000000000059cb $d
             forth.s:4253   .text:00000000000059cc $t
             forth.s:4265   .text:00000000000059eb $d
             forth.s:4265   .text:00000000000059ec $t
             forth.s:4426   .text:0000000000005c53 $d
             forth.s:4426   .text:0000000000005c54 $t
             forth.s:4491   .text:0000000000005d11 $d
             forth.s:4491   .text:0000000000005d12 $t
             forth.s:4582   .text:0000000000005e25 $d
             forth.s:4582   .text:0000000000005e26 $t
             forth.s:4683   .text:0000000000005f3f $d
             forth.s:4683   .text:0000000000005f40 $t
             forth.s:4709   .text:0000000000005f8f $d
             forth.s:4709   .text:0000000000005f90 $t
             forth.s:4762   .text:000000000000602b $d
             forth.s:4762   .text:000000000000602c $t
             forth.s:4782   .text:0000000000006077 $d
             forth.s:4782   .text:0000000000006078 $t
             forth.s:4811   .text:00000000000060d3 $d
             forth.s:4811   .text:00000000000060d4 $t
             forth.s:4853   .text:0000000000006143 $d
             forth.s:4853   .text:0000000000006144 $t
ARM GAS  forth.s 			page 272


             forth.s:4867   .text:0000000000006171 $d
             forth.s:4867   .text:0000000000006172 $t
             forth.s:4926   .text:0000000000006221 $d
             forth.s:4926   .text:0000000000006222 $t
             forth.s:5010   .text:000000000000635b $d
             forth.s:5010   .text:000000000000635c $t
             forth.s:5104   .text:0000000000006475 $d
             forth.s:5104   .text:0000000000006476 $t
             forth.s:5241   .text:0000000000006563 $d
             forth.s:5241   .text:0000000000006564 $t
             forth.s:5308   .text:0000000000006627 $d
             forth.s:5308   .text:0000000000006628 $t
             forth.s:5407   .text:0000000000006781 $d
             forth.s:5407   .text:0000000000006782 $t

UNDEFINED SYMBOLS
_mstack
