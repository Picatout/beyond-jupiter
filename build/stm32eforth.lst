ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  54              		.equ DTOP,  RAM_ADR+0x512 
  55              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  56              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  57              	
  58              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  59              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  60              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  61              	
  62              		.equ CELLL ,	4	/*size of a cell */
  63              		.equ BASEE ,	10	/*default radix */
  64              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  65              	
  66              		.equ BKSPP ,	8	/*backspace */
  67              		.equ LF ,	10	  /*line feed */
  68              		.equ CRR ,	13	/*carriage return */
  69              		.equ ERR ,	27	/*error escape */
  70              		.equ TIC ,	39	/*tick */
  71              	
  72              	/*************************************
  73              	   system variables offset from UPP
  74              	*************************************/
  75              	  .equ RNDSEED, 4    // prng seed 
  76              	  .equ TICKS, RNDSEED+4  // millseconds counter
  77              	  .equ CD_TIMER, TICKS+4  // count down timer
  78              	  .equ BOOT, CD_TIMER+4  // boot program address
  79              	  .equ STDIN, BOOT+4   //character ouput device 
  80              	  .equ STDOUT, STDIN+4 // character input device 
  81              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  82              	  .equ BCHAR, NBASE+4   // display base character flag 
  83              	  .equ TMP, BCHAR+4   // temporary variable
  84              	  .equ CSPAN, TMP+4  // character count received by expect  
  85              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  86              	  .equ SRC, TOIN+4    // SOURCE 
  87              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  88              	  .equ TIBUF, SRC+4   // TIB buffer address 
  89              	  .equ SRCID, TIBUF+4  // evaluation source string or user interface
  90              	  .equ EVAL, SRCID+4  // eval|compile vector 
  91              	  .equ VHOLD, EVAL+4   // hold pointer 
  92              	  .equ CTXT, VHOLD+4  // context pointer 
  93              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  94              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  95              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  96              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  97              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  98              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  99              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
 100              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 101              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 102              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 103              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 104              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 105              	  .equ KBD_QUEUE_SIZE, 16 
 106              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 107              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
ARM GAS  forth.s 			page 10


 108              	  .equ KBD_QTAIL,KBD_QHEAD+4
 109              	  .equ ROW,KBD_QTAIL+4 
 110              	  .equ COL,ROW+4 
 111              	  .equ BK_COLOR,COL+4 
 112              	  .equ PEN_COLOR,BK_COLOR+4
 113              	  .equ VFPSW, PEN_COLOR+4 
 114              	  .equ VFBASE, VFPSW+4 
 115              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 116              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 117              	
 118              	/***********************************************
 119              	* MACROS
 120              	*	Assemble inline direct threaded code ending.
 121              	***********************************************/
 122              		.macro _CALL fn /* low level routine call */ 
 123              	 	PUSH {LR}
 124              		BL \fn  
 125              		POP {LR}
 126              		.endm
 127              		
 128              		.macro _RET /* exit sub-routine */ 
 129              		BX LR 
 130              		.endm 
 131              	
 132              		// dictionary header  
 133              		.macro _HEADER  label, nlen, name
 134              			.word LINK 
 135              			.equ LINK , . 
 136              		_\label: .byte \nlen    // name field
 137              			.ascii "\name"
 138              			.p2align 2 
 139              		\label:   // code field 
 140              		.endm 
 141              		
 142              	
 143              	// local function header 
 144              		.macro _FUNC label 
 145              		.section .text, "ax", %progbits 
 146              		.p2align 2 
 147              		.type \label, %function  
 148              		\label:
 149              		.endm 
 150              	
 151              	// global function header 
 152              		.macro _GBL_FUNC label 
 153              		.global \label 
 154              		_FUNC \label 
 155              		.endm 
 156              	
 157              	
 158              	// load large constant to register 
 159              		.macro _MOV32 r, value 
 160              		mov \r,#(\value&0xffff)
 161              		movt \r,#(\value>>16)
 162              		.endm 
 163              	
 164              		.macro _NEXT /* direct jump INEXT */ 
ARM GAS  forth.s 			page 11


 165              		B INEXT   
 166              		.endm 
 167              	
 168              	 	.macro	_NEST /*start high level word */
 169              		BX INX  
 170              		NOP.N 
 171              		.endm
 172              	
 173              		.macro _ADR label 
 174              		.word 1+\label  
 175              		.endm 
 176              	
 177              	 	.macro	_UNNEST	/*end high level word */
 178              		_ADR UNNEST 
 179              		.endm
 180              	
 181              	 	.macro	_DOLIT u /*long literals */
 182              		_ADR	DOLIT
 183              		.word	\u 
 184              		.endm
 185              	
 186              		.macro _DOTQP len, text 
 187              		_ADR DOTQP 
 188              		.byte \len 
 189              		.ascii "\text" 
 190              		.p2align 2 
 191              		.endm
 192              	
 193              		.macro _COMPI name 
 194              		_DOLIT \name 
 195              		_ADR CALLC 
 196              		.endm 
 197              	
 198              		.macro _ABORQ len,name 
 199              		_ADR ABORQ 
 200              		.byte \len 
 201              		.ascii "\name"
 202              		.p2align 2 
 203              		.endm
 204              	
 205              		.macro _BRAN label 
 206              		_ADR BRAN 
 207              		.word \label 
 208              		.endm 
 209              	
 210              		.macro _QBRAN label 
 211              		_ADR QBRAN 
 212              		.word \label
 213              		.endm 
 214              	
 215              		.macro _TBRAN label 
 216              		_ADR TBRAN 
 217              		.word \label 
 218              		.endm 
 219              	
 220              		.macro _DONXT label 
 221              		_ADR DONXT
ARM GAS  forth.s 			page 12


 222              		.word \label 
 223              		.endm 
 224              	
 225              	 	.macro	_PUSH	/*push TOS on data stack*/
 226              		STR	TOS,[DSP,#-4]!
 227              		.endm
 228              	
 229              	 	.macro	_POP /*pop data stack to TOS */
 230              		LDR	TOS,[DSP],#4
 231              		.endm
 232              	
 233              		// calling a colon word 
 234              		// from a code word   
 235              		.macro _CALL_COLWORD target 
 236              	    ldr WP,=\target 
 237              		orr WP,#1
 238              		b \target  
 239              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
ARM GAS  forth.s 			page 13


  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
ARM GAS  forth.s 			page 14


 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF818C9 	  ldr IP,=dh
 159 000e 02F051BF 	  b INEXT  
 160              	dh:
 161 0012 894F0000 	  _ADR PRESE
 162 0016 89440000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 012F0000 	  _ADR CFSR 
 164 0038 69320000 	  _ADR DUPP
 165 003c E5310000 	  _ADR TOR 
 166 0040 DF300000 	  _DOLIT 16 
 166      10000000 
 167 0048 1D380000 	  _ADR BASE 
 168 004c 61310000 	  _ADR STORE 
 169 0050 85450000 	  _ADR UDOT 
 170 0054 89440000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
ARM GAS  forth.s 			page 15


 170      200000BF 
 171 0064 A1310000 	  _ADR RFROM
 172 0068 DF300000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 25330000 	  _ADR ANDD
 174 0074 1F310000 	  _QBRAN 1f
 174      94000000 
 175 007c 212F0000 	  _ADR BFAR
 176 0080 DF300000 	  _DOLIT ','
 176      2C000000 
 177 0088 7D2F0000 	  _ADR EMIT 
 178 008c A5430000 	  _ADR SPACE 
 179 0090 85450000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 89440000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 0D220000 	  _ADR FPSCR
 184 00a8 85450000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF864C8 	  ldr IP,=fpu_except
 202 00c4 02F0F6BE 	  b INEXT 
 203              	fpu_except:  
 204 00c8 2D440000 	  _ADR CR 
 205 00cc 1D380000 	  _ADR BASE 
 206 00d0 75310000 	  _ADR AT 
 207 00d4 E5310000 	  _ADR TOR  
 208 00d8 DF300000 	  _DOLIT 16 
 208      10000000 
 209 00e0 1D380000 	  _ADR BASE 
 210 00e4 61310000 	  _ADR STORE
 211 00e8 DF300000 	  _DOLIT 4 
 211      04000000 
 212 00f0 B5330000 	  _ADR SUBB  
 213 00f4 89440000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 B9450000 	  _ADR DOT 
 215 0104 89440000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
ARM GAS  forth.s 			page 16


 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 0D220000 	  _ADR FPSCR 
 217 0124 69320000 	  _ADR DUPP 
 218 0128 B9450000 	  _ADR DOT
 219 012c B5340000 	  _ADR QDUP 
 220 0130 1F310000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 DF300000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 7D2F0000 	  _ADR EMIT 
 223 0144 DF300000 	  _DOLIT ' ' 
 223      20000000 
 224 014c 7D2F0000 	  _ADR EMIT
 225 0150 69320000 	  _ADR DUPP 
 226 0154 DF300000 	  _DOLIT 0x10 
 226      10000000 
 227 015c 25330000 	  _ADR ANDD
 228 0160 B5340000 	  _ADR QDUP  
 229 0164 1F310000 	  _QBRAN 1f 
 229      84010000 
 230 016c DF300000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 A5330000 	  _ADR PLUS 
 232 0178 75310000 	  _ADR AT 
 233 017c 51370000 	  _ADR COUNT 
 234 0180 F9430000 	  _ADR TYPEE
 235 0184 DF300000 	1: _DOLIT 15 
 235      0F000000 
 236 018c 25330000 	  _ADR ANDD
 237 0190 ED350000 	  _ADR CLZ 
 238 0194 DF300000 	  _DOLIT 31 
 238      1F000000 
 239 019c 79320000 	  _ADR SWAP 
 240 01a0 B5330000 	  _ADR SUBB 
 241 01a4 DF300000 	  _DOLIT 2 
 241      02000000 
 242 01ac 95330000 	  _ADR LSHIFT 
 243 01b0 DF300000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 A5330000 	  _ADR PLUS 
 245 01bc 75310000 	  _ADR AT 
 246 01c0 51370000 	  _ADR COUNT 
 247 01c4 F9430000 	  _ADR TYPEE 
 248 01c8 2D440000 	2: _ADR CR 
 249 01cc DF300000 	  _DOLIT 0
 249      00000000 
 250 01d4 2D220000 	  _ADR CLR_FPSCR 
 251 01d8 A1310000 	  _ADR RFROM  
 252 01dc 1D380000 	  _ADR BASE 
 253 01e0 61310000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF840C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
ARM GAS  forth.s 			page 17


 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
ARM GAS  forth.s 			page 18


 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C8C6 	  ldr IP,=nmi_hl 
 306 0268 02F024BE 	  b  INEXT
 307              	nmi_hl:
 308 026c 894F0000 	  _ADR PRESE 
 309 0270 2D440000 	  _ADR CR 
 310 0274 89440000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 2D440000 	  _ADR CR 
 312 0298 2D4D0000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF88CC6 	  ldr IP,=hardfault_hl 
 326 02aa 02F003BE 	  b INEXT
 327              	hardfault_hl:
 328 02ae 894F0000 	  _ADR PRESE
 329 02b2 2D440000 	  _ADR CR  
 330 02b6 89440000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 2D440000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF854C6 	  ldr IP,=memfault_hl 
ARM GAS  forth.s 			page 19


 345 02e6 02F0E5BD 	  b INEXT 
 346              	memfault_hl: 
 347 02ea 894F0000 	  _ADR PRESE
 348 02ee 2D440000 	  _ADR CR  
 349 02f2 89440000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 DF300000 	  _DOLIT 16 
 350      10000000 
 351 0320 1D380000 	  _ADR BASE 
 352 0324 61310000 	  _ADR STORE   
 353 0328 012F0000 	  _ADR CFSR
 354 032c DF300000 	  _DOLIT 255 
 354      FF000000 
 355 0334 25330000 	  _ADR ANDD 
 356 0338 85450000 	  _ADR UDOT 
 357 033c 2D440000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8ECC5 	  ldr IP,=busfault_hl 
 372 0352 02F0AFBD 	  b INEXT 
 373              	busfault_hl:
 374 0356 894F0000 	  _ADR PRESE
 375 035a DF300000 	  _DOLIT 1 
 375      01000000 
 376 0362 49300000 	  _ADR ULED 
 377 0366 DF300000 	  _DOLIT  100 
 377      64000000 
 378 036e D5370000 	  _ADR MSEC 
 379 0372 212F0000 	  _ADR BFAR 
 380 0376 012F0000 	  _ADR CFSR 
 381 037a 2D440000 	  _ADR CR  
 382 037e 89440000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 DF300000 	  _DOLIT 16 
 383      10000000 
 384 03a8 1D380000 	  _ADR BASE 
 385 03ac 61310000 	  _ADR STORE   
 386 03b0 DF300000 	  _DOLIT 0XFF00 
 386      00FF0000 
ARM GAS  forth.s 			page 20


 387 03b8 25330000 	  _ADR ANDD   
 388 03bc 85450000 	  _ADR UDOT 
 389 03c0 89440000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc 85450000 	  _ADR UDOT 
 391 03d0 2D440000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF85CC5 	  ldr IP,=usagefault_hl
 405 03e6 02F065BD 	  b INEXT 
 406              	usagefault_hl:
 407 03ea 894F0000 	  _ADR PRESE
 408 03ee 2D440000 	  _ADR CR  
 409 03f2 89440000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 DF300000 	  _DOLIT 16 
 410      10000000 
 411 0418 1D380000 	  _ADR BASE 
 412 041c 61310000 	  _ADR STORE   
 413 0420 012F0000 	  _ADR CFSR
 414 0424 DF300000 	  _DOLIT 16 
 414      10000000 
 415 042c 7D330000 	  _ADR RSHIFT 
 416 0430 85450000 	  _ADR UDOT 
 417 0434 2D440000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8B000 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
ARM GAS  forth.s 			page 21


 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8B000 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8B000 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF8A0C4 	  ldr IP,=ur
 474 04a4 02F006BD 	  b INEXT  
 475              	ur:
 476 04a8 894F0000 	  _ADR PRESE
 477 04ac 2D440000 	  _ADR CR   
 478 04b0 DF300000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 51370000 		_ADR COUNT 
 480 04bc F9430000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
ARM GAS  forth.s 			page 22


 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F045FE 	  bl  fpu_init 
 518 0524 00F009FB 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F002FC 	  bl  flash_spi_init   
 522 0534 05F034BD 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF6B067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8F4A3 	  ldr INX,=NEST
ARM GAS  forth.s 			page 23


 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
ARM GAS  forth.s 			page 24


 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
ARM GAS  forth.s 			page 25


 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A649     		ldr r1,=UZERO 
 674 06b2 4FF0C002 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
ARM GAS  forth.s 			page 26


 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
ARM GAS  forth.s 			page 27


 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
ARM GAS  forth.s 			page 28


 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
ARM GAS  forth.s 			page 29


 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 B05E0000 		.word HI_BOTH  /*'BOOT */
 874 0878 201A0000 		.word PS2_QKEY /* query for character */
 875 087c E8120000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 B0FE0120 		.word TIBB	/*TIBU */
 883 089c 00000000 	  .word 0     // SRCID 
 884 08a0 AC4D0000 		.word INTER	/*'EVAL */
 885 08a4 00000000 		.word 0			/*HLD */
 886 08a8 985F0000 		.word _LASTN	/*CONTEXT */
 887 08ac 04600000 		.word CTOP  	/* FCP end of system dictionnary */
 888 08b0 A0570020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 889 08b4 985F0000 		.word _LASTN	/*LAST word in dictionary */
 890 08b8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 890      00000000 
 890      00000000 
 890      00000000 
 891 08c8 00000000 		.word 0  /* RX_HEAD */
 892 08cc 00000000 		.word 0  /* RX_TAIL */ 
 893 08d0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 894 08d4 00000000 		.word 0  /* VID_STATE, video state */  
 895 08d8 00000000 	    .word 0  /* VID_FIELD, field */
 896 08dc 30810120 		.word VID_BUFF /* video_buffer address */ 
 897 08e0 00000000 	    .word 0 /* kbd struct */
ARM GAS  forth.s 			page 30


 898 08e4 00000000 		.space KBD_QUEUE_SIZE,0  
 898      00000000 
 898      00000000 
 898      00000000 
 899 08f4 00000000 		.word 0  /* kbd queue head */
 900 08f8 00000000 		.word 0 /* kbd queue tail */ 
 901 08fc 00000000 	    .word 0 /* tv cursor row */
 902 0900 00000000 	    .word 0 /* tv cursor column */ 
 903 0904 00000000 	    .word 0 /* tv back color */
 904 0908 07000000 	    .word 7 /* tv font color */
 905 090c 00000000 	    .word 0 /* FPSW */
 906 0910 00000000 	    .word 0 /* FBASE */ 
 907 0914 00000000 	    .word 0 /* BEEP_DTMR */
 908 0918 00000000 	    .word 0 /* CSTATE */ 
 909 091c 00000000 	    .word 0,0 
 909      00000000 
 910              	ULAST:
 911              	
 912              	// used by _HEADER macro 
 913              	// to link names field
 914              	// in dictionary  
 915 0924 12000000 	    .equ LINK, 0 
 915      C8000000 
 915      C44F0000 
 915      6C020000 
 915      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	    ENVIRONMENT? 
  22              	    constants 
  23              	    vocabulary separate from 
  24              	    main dictionary  
  25              	*******************************/
  26              	
  27              	
  28              	/*******************************
  29              	    ENVIRONMENT? 
  30              	    ( c-addr u -- false | i * x true ) 
  31              	********************************/
ARM GAS  forth.s 			page 31


  32 0950 00000000 	    _HEADER ENVQ,12,"ENVIRONMENT?"
  32      0C454E56 
  32      49524F4E 
  32      4D454E54 
  32      3F0000BF 
  33 0964 504700BF 	    _NEST 
  34              	    // save normal context 
  35 0968 C9380000 	    _ADR CNTXT 
  36 096c 75310000 	    _ADR AT 
  37 0970 E5310000 	    _ADR TOR 
  38              	    // set environment context 
  39 0974 DF300000 	    _DOLIT _ENVLASTN  
  39      EA0A0000 
  40 097c C9380000 	    _ADR   CNTXT 
  41 0980 61310000 	    _ADR   STORE 
  42              	    // search string 
  43 0984 59320000 	    _ADR   DROP 
  44 0988 11340000 	    _ADR   ONEM 
  45 098c B94A0000 	    _ADR   NAMEQ
  46 0990 69320000 	    _ADR   DUPP 
  47 0994 1F310000 	    _QBRAN  1f
  47      AC090000 
  48 099c 59320000 	    _ADR   DROP 
  49 09a0 F5300000 	    _ADR   EXECU 
  50 09a4 47310000 	    _BRAN  2f
  50      B4090000 
  51 09ac 79320000 	1:  _ADR  SWAP 
  52 09b0 59320000 	    _ADR  DROP 
  53              	2:  // restore normal context 
  54 09b4 A1310000 	    _ADR RFROM
  55 09b8 C9380000 	    _ADR CNTXT 
  56 09bc 61310000 	    _ADR STORE 
  57 09c0 BB2E0000 	    _UNNEST 
  58              	
  59              	
  60              	    .equ ENVLNK , 0 
  61              	
  62              		// dictionary header  
  63              		.macro _ENV_HEADER  label, nlen, name
  64              			.word ENVLNK 
  65              			.equ ENVLNK , . 
  66              		_\label: .byte \nlen    // name field
  67              			.ascii "\name"
  68              			.p2align 2 
  69              		\label:   // code field 
  70              		.endm 
  71              		
  72              	
  73              	/***********************************
  74              	    envronment constants 
  75              	***********************************/
  76              	
  77              	/**********************************
  78              	    /COUNTED-STRING ( -- 255 t )
  79              	constant:
  80              	    255 maximum counted string length
  81              	*************************************/
ARM GAS  forth.s 			page 32


  82 09c4 00000000 	    _ENV_HEADER CNTDSTR,15,"/COUNTED-STRING"
  82      0F2F434F 
  82      554E5445 
  82      442D5354 
  82      52494E47 
  83 09d8 47F8046D 	    _PUSH 
  84 09dc 4FF0FF06 	    MOV  TOS,#255
  85 09e0 8EE0     	    B flag_true
  86              	
  87              	
  88              	/******************************************
  89              	    /HOLD  ( -- 80 t )
  90              	    size of the pictured numeric 
  91              	    output string buffer, in characters
  92              	constant:
  93              	    80 bytes   
  94              	*******************************************/
  95 09e2 C8090000 	    _ENV_HEADER SLHOLD,5,"/HOLD"
  95      052F484F 
  95      4C44
  96 09ec 47F8046D 	    _PUSH
  97 09f0 4FF05006 	    MOV TOS,#80
  98 09f4 84E0     	    B flag_true
  99              	
 100              	/***************************************
 101              	    /PAD ( -- 80 t )	
 102              	    size of the scratch area 
 103              	    pointed to by PAD, in characters
 104              	constant: 
 105              	    80 bytes 
 106              	***************************************/
 107 09f6 E6090000 	    _ENV_HEADER SLPAD,4,"/PAD"
 107      042F5041 
 107      4400
 108 0a00 47F8046D 	    _PUSH 
 109 0a04 4FF05006 	    MOV TOS,#80
 110 0a08 7AE0     	    B flag_true
 111              	
 112              	/**************************************
 113              	    ADDRESS-UNIT-BITS ( -- 32 t )
 114              	    size of one address unit, in bits
 115              	constant:
 116              	    32 bits
 117              	**************************************/
 118 0a0a FA090000 	    _ENV_HEADER ADRBITS,17,"ADDRESS-UNIT-BITS"
 118      11414444 
 118      52455353 
 118      2D554E49 
 118      542D4249 
 119 0a20 47F8046D 	    _PUSH 
 120 0a24 4FF02006 	    MOV TOS,#32
 121 0a28 6AE0     	    B flag_true
 122              	
 123              	/***************************************
 124              	    FLOORED	( -- t ) 
 125              	    flag true if floored division 
 126              	    is the default
ARM GAS  forth.s 			page 33


 127              	constant:
 128              	    true 
 129              	***************************************/
 130 0a2a 0E0A0000 	    _ENV_HEADER FLOORED,7,"FLOORED"
 130      07464C4F 
 130      4F524544 
 130      00BF
 131 0a38 62E0     	    b flag_true
 132              	
 133              	/*************************************
 134              	    MAX-CHAR  ( -- 127 -1 t )
 135              	    maximum value of any character in 
 136              	    the implementation-defined 
 137              	    character set.
 138              	constant:
 139              	    127 
 140              	*************************************/
 141 0a3a 2E0A0000 	    _ENV_HEADER MAXCHAR,8,"MAX-CHAR"
 141      084D4158 
 141      2D434841 
 141      5200
 142 0a48 47F8046D 	    _PUSH 
 143 0a4c 4FF07F06 	    MOV TOS,#127 
 144 0a50 56E0     	    b flag_true 
 145              	
 146              	/************************************
 147              	    MAX-D	(-- 0xffffffff 0x7fffffff t )
 148              	    largest usable signed double number
 149              	constant:
 150              	    0x7FFF_FFFF_FFFF_FFFF 
 151              	************************************/
 152 0a52 3E0A0000 	    _ENV_HEADER MAXD,5,"MAX-D"
 152      054D4158 
 152      2D44
 153 0a5c 47F8046D 	    _PUSH 
 154 0a60 4FF6FF76 	    _MOV32 TOS,0xFFFFFFFF 
 154      CFF6FF76 
 155 0a68 47F8046D 	    _PUSH
 156 0a6c 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 156      C7F6FF76 
 157 0a74 44E0     	    B flag_true
 158              	
 159              	/************************************
 160              	    MAX-N ( -- 0x7FFFFFFF t ) 
 161              	    largest usable signed integer
 162              	constant:
 163              	    0x7FFFFFFF
 164              	*************************************/
 165 0a76 560A0000 	    _ENV_HEADER MAXN,5,"MAX-N"
 165      054D4158 
 165      2D4E
 166 0a80 47F8046D 	    _PUSH 
 167 0a84 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 167      C7F6FF76 
 168 0a8c 38E0     	    B flag_true 
 169              	
 170              	/************************************
ARM GAS  forth.s 			page 34


 171              	    MAX-U ( -- 0xFFFFFFFF t ) 
 172              	    largest usable unsigned integer
 173              	constant:
 174              	    0xFFFFFFFF 
 175              	************************************/
 176 0a8e 7A0A0000 	    _ENV_HEADER MAXU,5,"MAX-U"
 176      054D4158 
 176      2D55
 177 0a98 47F8046D 	    _PUSH 
 178 0a9c 4FF0FF36 	    MOV TOS,#-1 
 179 0aa0 2EE0     	    B flag_true 
 180              	
 181              	/**********************************
 182              	    MAX-UD ( -- 0xFFFFFFFF 0xFFFFFFFFF t )
 183              	    largest usable unsigned double number
 184              	constant:
 185              	    0xFFFF_FFFF_FFFF_FFFF 
 186              	*************************************/
 187 0aa2 920A0000 	    _ENV_HEADER MAXUD,6,"MAX-UD"
 187      064D4158 
 187      2D554400 
 187      00BF
 188 0ab0 47F8046D 	    _PUSH 
 189 0ab4 4FF0FF36 	    MOV  TOS,#-1 
 190 0ab8 47F8046D 	    _PUSH 
 191 0abc 4FF0FF36 	    MOV TOS,#-1 
 192 0ac0 1EE0     	    B flag_true
 193              	
 194              	/*************************************
 195              	    RETURN-STACK-CELLS ( -- 32 t )
 196              	    maximum size of the return stack, 
 197              	    in cells
 198              	constant:
 199              	    32 cells 
 200              	************************************/
 201 0ac2 A60A0000 	    _ENV_HEADER RSTKCELLS,18,"RETURN-STACK-CELLS"
 201      12524554 
 201      55524E2D 
 201      53544143 
 201      4B2D4345 
 202 0adc 47F8046D 	    _PUSH 
 203 0ae0 4FF02006 	    MOV TOS,#32 
 204 0ae4 0CE0     	    B flag_true
 205              	
 206              	/*************************************
 207              	    STACK-CELLS ( -- 32 t ) 
 208              	    maximum size of the data stack, 
 209              	    in cells
 210              	constant:
 211              	    32 cells 
 212              	*************************************/
 213 0ae6 C60A0000 		.word	ENVLNK 
 214              		ENVLINK = . 
 215 0aea 0B       	_ENVLASTN:	.byte 11
 216 0aeb 53544143 		.ascii "STACK-CELLS"
 216      4B2D4345 
 216      4C4C53
ARM GAS  forth.s 			page 35


 217 0af6 00BF     		.p2align 2	
 218              	STKCELLS: 
 219 0af8 47F8046D 	    _PUSH 
 220 0afc 4FF02006 	    MOV TOS,#32 
 221              	//    B flag_true 
 222              	
 223              	flag_true:
 224 0b00 47F8046D 	    _PUSH 
 225 0b04 4FF0FF36 	    MOV TOS,#-1 
 226 0b08 02F0D4B9 	    _NEXT 
 227              	
 228              	
 229              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0b0c 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0b14 1868     		ldr r0,[r3,#USART_SR]
  38 0b16 5968     		ldr r1,[r3,#USART_DR]
  39 0b18 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0b1c 0CD0     		beq 2f // no char received 
  41 0b1e B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0b22 3FF4B8AC 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0b26 04F15400 		add r0,UP,#RX_QUEUE
ARM GAS  forth.s 			page 36


  44 0b2a A26E     		ldr r2,[UP,#RX_TAIL]
  45 0b2c 8154     		strb r1,[r0,r2]
  46 0b2e 02F10102 		add r2,#1 
  47 0b32 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0b36 A266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0b38 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0b3a 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0b42 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0b44 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0b48 01EA0201 	  and r1,r1,r2
  62 0b4c 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0b50 41EA0201 	  orr r1,r1,r2 
  64 0b54 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0b56 4FF4EE61 	  mov r1,#0x77<<4 
  67 0b5a 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0b5c 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0b64 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0b68 8160     	  str r1,[r0,#USART_BRR]
  73 0b6a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0b6e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0b70 4FF02500 	  mov r0,#USART1_IRQ 
  77 0b74 4FF00701 	  mov r1,#7
  78 0b78 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FD5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0b82 4FF02500 	  mov r0,#USART1_IRQ 
  81 0b86 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FD5DF8 
  81      04EB
  82 0b90 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0b92 54090000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0ba0 47F8046D 		_PUSH
ARM GAS  forth.s 			page 37


  92 0ba4 A06E     		ldr T0,[UP,#RX_TAIL] 
  93 0ba6 616E     		ldr T1,[UP,#RX_HEAD]
  94 0ba8 90EA0106 		eors TOS,T0,T1 
  95 0bac 0CD0     		beq 1f
  96 0bae 04F15400 		add T0,UP,#RX_QUEUE 
  97 0bb2 0844     		add T0,T1 
  98 0bb4 0678     		ldrb TOS,[T0]
  99 0bb6 01F10101 		add T1,#1 
 100 0bba 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0bbe 6166     		str T1,[UP,#RX_HEAD]
 102 0bc0 47F8046D 		_PUSH 
 103 0bc4 4FF0FF36 		mov TOS,#-1
 104 0bc8 02F074B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0bcc 960B0000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0bdc 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0be4 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0be6 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0bea FBD0     		beq 1b 
 115 0bec 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0bee 57F8046B 		_POP
 117 0bf2 02F05FB9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0bf6 D00B0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0c00 47F8046D 	        _PUSH 
 126 0c04 4FF00006 	        mov TOS,#0
 127 0c08 02F054B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0c0c FA0B0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0c18 47F8046D 	        _PUSH 
 135 0c1c 4FF00106 	        mov TOS,#1
 136 0c20 02F048B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
ARM GAS  forth.s 			page 38


 141              	****************************************/
 142 0c24 100C0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0c30 3046     	        mov T0,TOS
 144 0c32 57F8046B 	        _POP 
 145 0c36 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0c38 4B48     	        ldr T0,=SER_QKEY 
 148 0c3a 6061     	        str T0,[UP,#STDIN]
 149 0c3c 4B48     	        ldr T0,=SER_EMIT
 150 0c3e A061     	        str T0,[UP,#STDOUT]
 151 0c40 02F038B9 	        _NEXT 
 152              	4: // local console 
 153 0c44 4A48     	        ldr T0,=PS2_QKEY
 154 0c46 6061     	        str T0,[UP,#STDIN]
 155 0c48 4A48     	        ldr T0,=TV_EMIT
 156 0c4a A061     	        str T0,[UP,#STDOUT]
 157 0c4c 02F032B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0c50 280C0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0c60 504700BF 	      _NEST 
 166 0c64 DF300000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0c6c 01340000 	1:    _ADR ONEP  // c+1
 168 0c70 E5310000 	      _ADR TOR   
 169 0c74 DF300000 	      _DOLIT 10 
 169      0A000000 
 170 0c7c 513C0000 	      _ADR SLMOD // r q  
 171 0c80 B5340000 	      _ADR QDUP  // r q q | r 0  
 172 0c84 1F310000 	      _QBRAN 2f  // r 0 
 172      980C0000 
 173 0c8c A1310000 	      _ADR RFROM // r q c 
 174 0c90 47310000 	      _BRAN 1b
 174      6C0C0000 
 175 0c98 DF300000 	2:    _DOLIT '0'  
 175      30000000 
 176 0ca0 A5330000 	      _ADR PLUS 
 177 0ca4 7D2F0000 	      _ADR EMIT 
 178 0ca8 A1310000 	      _ADR RFROM 
 179 0cac B5340000 	      _ADR QDUP 
 180 0cb0 1F310000 	      _QBRAN 3f
 180      C80C0000 
 181 0cb8 11340000 	      _ADR ONEM 
 182 0cbc E5310000 	      _ADR TOR 
 183 0cc0 47310000 	      _BRAN 2b 
 183      980C0000 
 184              	3:    
 185 0cc8 BB2E0000 	      _UNNEST 
ARM GAS  forth.s 			page 39


 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0ccc 540C0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0cd8 504700BF 	      _NEST 
 193 0cdc DF300000 	      _DOLIT 27 
 193      1B000000 
 194 0ce4 7D2F0000 	      _ADR EMIT 
 195 0ce8 DF300000 	      _DOLIT '['
 195      5B000000 
 196 0cf0 7D2F0000 	      _ADR EMIT 
 197 0cf4 BB2E0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0cf8 D00C0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0d04 504700BF 	      _NEST
 205 0d08 D90C0000 	      _ADR ANSI_ESC
 206 0d0c 79320000 	      _ADR SWAP 
 207 0d10 610C0000 	      _ADR ANSI_PARAM 
 208 0d14 DF300000 	      _DOLIT ';'
 208      3B000000 
 209 0d1c 7D2F0000 	      _ADR EMIT
 210 0d20 610C0000 	      _ADR ANSI_PARAM
 211 0d24 DF300000 	      _DOLIT 'H'
 211      48000000 
 212 0d2c 7D2F0000 	      _ADR EMIT 
 213 0d30 BB2E0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0d34 FC0C0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0d40 504700BF 	    _NEST
 221 0d44 DF300000 	    _DOLIT 1 
 221      01000000 
 222 0d4c 69320000 	    _ADR DUPP 
 223 0d50 050D0000 	    _ADR SER_AT  
 224 0d54 D90C0000 	    _ADR ANSI_ESC
 225 0d58 DF300000 	    _DOLIT 'J'
 225      4A000000 
 226 0d60 7D2F0000 	    _ADR EMIT 
 227 0d64 BB2E0000 	    _UNNEST 
 228 0d68 A00B0000 	
 228      DC0B0000 
 228      201A0000 
ARM GAS  forth.s 			page 40


 228      E8120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
ARM GAS  forth.s 			page 41


  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0d78 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0d80 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0d82 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0d8a 41EA0201 	  orr r1,r2
  82 0d8e 0160     	  str r1,[r0,#GPIO_MODER]
  83 0d90 81EA0101 	  eor r1,r1 
ARM GAS  forth.s 			page 42


  84 0d94 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0d96 4FF00101 	  mov r1,#1 // pin 1 
  88 0d9a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0d9e 00B5FFF7 	  _CALL gpio_config 
  89      FEFC5DF8 
  89      04EB
  90 0da8 4FF00101 	  mov r1,#1 
  91 0dac 4FF00202 	  mov r2,#2
  92 0db0 00B5FFF7 	  _CALL gpio_speed 
  92      34FD5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0dba 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0dbc 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0dc0 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0dc2 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0dca 4FF00200 	  mov r0,#2 
 100 0dce 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0dd0 41EA0001 	  orr r1,r0 
 102 0dd4 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0dd6 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0dde 41F2D470 	  mov r0,#HPER
 106 0de2 D062     	  str r0,[r2,#TIM_ARR]
 107 0de4 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0de8 D063     	  str r0,[r2,#TIM_CCR3]
 109 0dea 4FF4E170 	  mov r0,#HPULSE 
 110 0dee 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0df0 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0df4 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0df6 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0dfa 1062     	  str r0,[r2,#TIM_CCER]
 115 0dfc 4FF00100 	  mov r0,#1 
 116 0e00 D060     	  str r0,[r2,#TIM_DIER]
 117 0e02 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0e04 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0e08 4FF00201 	  mov r1,#2
 121 0e0c 00B5FFF7 	  _CALL nvic_set_priority
 121      6BFC5DF8 
 121      04EB
 122 0e16 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0e1a 00B5FFF7 	  _CALL nvic_enable_irq
 123      7DFC5DF8 
 123      04EB
 124 0e24 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
ARM GAS  forth.s 			page 43


 131 0e26 00BF     	  _GBL_FUNC tv_out_isr
 132 0e28 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0e30 81EA0101 	  eor T1,T1
 134 0e34 0161     	  str T1,[T0,#TIM_SR]
 135 0e36 E16E     	  ldr T1,[UP,#VID_CNTR]
 136 0e38 01F10101 	  add T1,#1 
 137 0e3c E166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0e3e 226F     	  ldr T2,[UP,#VID_STATE]
 140 0e40 002A     	  cmp T2,#ST_VSYNC 
 141 0e42 07D0     	  beq state_vsync
 142 0e44 012A     	  cmp T2,#ST_PREVID 
 143 0e46 2FD0     	  beq state_pre_video 
 144 0e48 022A     	  cmp T2,#ST_VIDEO 
 145 0e4a 36D0     	  beq state_video_out 
 146 0e4c 032A     	  cmp T2,#ST_POSTVID 
 147 0e4e 63D0     	  beq state_post_video
 148 0e50 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0e54 0129     	  cmp T1,#1
 152 0e56 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0e58 4FF0DB01 	  mov T1,#SERRATION
 155 0e5c 0164     	  str T1,[T0,#TIM_CCR4]
 156 0e5e 40F6E931 	  mov T1,#SYNC_LINE 
 157 0e62 C162     	  str T1,[T0,#TIM_ARR]
 158 0e64 6BE0     	  b tv_isr_exit 
 159 0e66 0729     	1: cmp T1,#7
 160 0e68 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0e6a 40F62821 	  mov T1,#VSYNC_PULSE
 163 0e6e 0164     	  str T1,[T0,#TIM_CCR4]
 164 0e70 65E0     	  b tv_isr_exit
 165 0e72 0D29     	2: cmp T1,#13
 166 0e74 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0e76 4FF0DB01 	   mov T1,#SERRATION 
 169 0e7a 0164     	   str T1,[T0,#TIM_CCR4]
 170 0e7c 5FE0     	   b tv_isr_exit   
 171 0e7e 1229     	3: cmp T1,#18
 172 0e80 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0e82 616F     	   ldr T1,[UP,#VID_FIELD]
 175 0e84 0029     	   cmp T1,#ODD_FIELD  
 176 0e86 5AD0     	   beq tv_isr_exit 
 177 0e88 01E0     	   b sync_end 
 178 0e8a 1329     	4: cmp T1,#19 
 179 0e8c 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0e8e 4FF00901 	   mov T1,#9
 182 0e92 E166     	   str T1,[UP,#VID_CNTR]
 183 0e94 4FF4E171 	   mov T1,#HPULSE 
 184 0e98 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0e9a 41F2D471 	   mov T1,#HPER 
 186 0e9e C162     	   str T1,[T0,#TIM_ARR] 
ARM GAS  forth.s 			page 44


 187 0ea0 4FF00101 	   mov T1,#ST_PREVID 
 188 0ea4 2167     	   str T1,[UP,#VID_STATE]
 189 0ea6 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ea8 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0eaa 48D4     	   bmi tv_isr_exit 
 194 0eac 4FF00201 	   mov T1,#ST_VIDEO 
 195 0eb0 2167     	   str T1,[UP,#VID_STATE]
 196 0eb2 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0eb6 C160     	   str T1,[T0,#TIM_DIER]
 198 0eb8 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0eba F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ebc 06D9     	   bls 1f 
 205 0ebe 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ec2 2167     	   str T1,[UP,#VID_STATE]
 207 0ec4 4FF00101 	   mov T1,#1 
 208 0ec8 C160     	   str T1,[T0,#TIM_DIER]
 209 0eca 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ecc A06F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ece A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ed2 4FF0A003 	   mov T3,#160
 214 0ed6 03FB01F1 	   mul T1,T3 
 215 0eda 0844     	   add T0,T1  
 216 0edc 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0ee4 10F8012B 	2: ldrb T2,[T0],#1 
 222 0ee8 4FEA0222 	   lsl T2,#8 
 223 0eec 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0eee AFF30080 	   nop.w 
 225 0ef2 AFF30080 	   nop.w
 226 0ef6 AFF30080 	   nop.w 
 227 0efa AFF30080 	   nop.w 
 228 0efe 4FEA0212 	   lsl T2,#4  
 229 0f02 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0f04 AFF30080 	   nop.w
 231 0f08 AFF30080 	   nop.w  
 232 0f0c 013B     	   subs T3,#1
 233 0f0e E9D1     	   bne 2b  
 234 0f10 4FF47022 	   mov T2,#(15<<16) 
 235 0f14 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0f16 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0f18 4FF48372 	   mov T2,#262
 239 0f1c 9142     	   cmp T1,T2
 240 0f1e 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0f20 616F     	   ldr T1,[UP,VID_FIELD]
ARM GAS  forth.s 			page 45


 243 0f22 11B9     	   cbnz T1, frame_end 
 244 0f24 40F6E931 	   mov T1,#SYNC_LINE
 245 0f28 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0f2a 4FF00001 	   mov T1,#ST_VSYNC 
 248 0f2e 2167     	   str T1,[UP,#VID_STATE]
 249 0f30 81EA0101 	   eor T1,T1 
 250 0f34 E166     	   str T1,[UP,#VID_CNTR]
 251 0f36 616F     	   ldr T1,[UP,#VID_FIELD]
 252 0f38 6FEA0101 	   mvn T1,T1  
 253 0f3c 6167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0f3e 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0f40 380D0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0f50 47F8046D 		_PUSH 
 266 0f54 04F1A006 		ADD TOS,UP,#BK_COLOR
 267 0f58 01F0ACBF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0f5c 440F0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0f6c 47F8046D 		_PUSH 
 273 0f70 04F1A406 		ADD TOS,UP,#PEN_COLOR
 274 0f74 01F09EBF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0f78 600F0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0f84 47F8046D 	  _PUSH 
 280 0f88 04F19C06 	  ADD TOS,UP,#COL 
 281 0f8c 01F092BF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0f90 7C0F0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0f98 47F8046D 	  _PUSH 
 287 0f9c 04F19806 	  ADD TOS,UP,#ROW 
 288 0fa0 01F088BF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
ARM GAS  forth.s 			page 46


 291              	// convert cursor row to y coord 
 292 0fa4 940F0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0fb0 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0fb4 00FB06F6 	  mul TOS,T0 
 295 0fb8 01F07CBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0fbc A80F0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0fc8 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0fcc 00FB06F6 	  mul TOS,T0 
 302 0fd0 01F070BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0fd4 C00F0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0fe0 47F8046D 	  _PUSH 
 308 0fe4 DFF88C65 	  ldr TOS,=font_6x8 
 309 0fe8 01F064BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0fec D80F0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0ff8 47F8046D 	  _PUSH 
 315 0ffc A66F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0ffe 01F059BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 1002 F00F0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 100c 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 100e 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 1012 02FB00F0 	    mul T0,T2 
 330 1016 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 101a 1044     	    add T0,T2 
 332 101c A36F     	    ldr T3,[UP,#VID_BUFFER] 
 333 101e 0344     	    add T3,T0 // T3 -> byte address 
 334 1020 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 1022 4FF00F02 	    mov T2,#15 // AND mask 
 336 1026 11F0010F 	    tst T1,#1 
 337 102a 01D0     	    beq 1f 
ARM GAS  forth.s 			page 47


 338 102c 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 1030 DFF84405 	1:  ldr T0,=plot_op 
 340 1034 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 1038 05EA0205 	    and WP,T2 // mask out nibble 
 343 103c 94F8A000 	    ldrb T0,[UP,#BK_COLOR]
 344 1040 11F0010F 	    tst T1,#1 
 345 1044 01D1     	    bne 1f 
 346 1046 4FEA0010 	    lsl T0,#4 // high nibble  
 347 104a 45EA0005 	1:  orr WP,T0  
 348 104e 1D70     	    strb WP,[T3]
 349 1050 1AE0     	    b 9f 
 350              	op_pen: 
 351 1052 05EA0205 	    and WP,T2 
 352 1056 94F8A400 	    ldrb T0,[UP,#PEN_COLOR]
 353 105a 11F0010F 	    tst T1,#1
 354 105e 01D1     	    bne 1f 
 355 1060 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 1064 45EA0005 	1:	orr WP,T0 
 357 1068 1D70     	    strb WP,[T3]
 358 106a 0DE0     	    b 9f 
 359              	op_invert:
 360 106c 85EA0205 	    eor WP,T2 
 361 1070 1D70     	    strb WP,[T3]
 362 1072 09E0     	    b 9f 
 363              	op_xor:
 364 1074 D4F8A400 	    ldr T0,[UP,#PEN_COLOR]
 365 1078 11F0010F 	    tst T1,#1 
 366 107c 01D1     	    bne 1f 
 367 107e 4FEA0010 	    lsl T0,#4 
 368 1082 85EA0005 	1:  eor WP,T0 
 369 1086 1D70     	    strb WP,[T3]
 370 1088 57F8046B 	9:  _POP 
 371 108c 01F012BF 	    _NEXT 
 372              	
 373 1090 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 1094 06100000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 10a0 E06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 10a2 0028     	    cmp T0,#0
 381 10a4 FCD1     	    bne 1b
 382 10a6 01F005BF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 10aa 98100000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 10b4 80EA0000 	    eor T0,T0 
 388 10b8 94F8A010 	    ldrb T1,[UP,#BK_COLOR]
 389 10bc 40EA0100 	    orr T0,T1 
 390 10c0 4FEA0111 	    lsl T1,#4 
ARM GAS  forth.s 			page 48


 391 10c4 40EA0100 	    orr T0,T1 
 392 10c8 4FEA0021 	    lsl T1,T0,#8 
 393 10cc 40EA0100 	    orr T0,T1 
 394 10d0 4FEA0041 	    lsl T1,T0,#16
 395 10d4 40EA0100 	    orr T0,T1 
 396 10d8 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 10dc A26F     	    ldr T2,[UP,#VID_BUFFER]
 398 10de 5050     	1:	str T0,[T2,T1]
 399 10e0 0439     	    subs T1,#4
 400 10e2 FCD1     	    bne 1b
 401 10e4 1060     	    str T0,[T2]
 402 10e6 80EA0000 	    eor T0,T0 
 403 10ea C4F89800 	    str T0,[UP,#ROW]
 404 10ee C4F89C00 	    str T0,[UP,#COL]
 405 10f2 01F0DFBE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 10f6 AE100000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 1104 504700BF 	  _NEST
 412 1108 DF300000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 1110 69320000 	  _ADR DUPP  
 414 1114 E5310000 	  _ADR TOR 
 415 1118 C5330000 	  _ADR STAR
 416 111c F90F0000 	  _ADR VIDBUFF
 417 1120 A5330000 	  _ADR PLUS
 418 1124 A1310000 	  _ADR RFROM   
 419 1128 DF300000 	  _DOLIT 0 
 419      00000000 
 420 1130 0D3F0000 	  _ADR FILL 
 421 1134 BB2E0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 1138 FA100000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 1148 504700BF 	    _NEST 
 429 114c F90F0000 	    _ADR VIDBUFF 
 430 1150 69320000 	    _ADR DUPP 
 431 1154 DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 115c 69320000 	    _ADR DUPP 
 433 1160 E5310000 	    _ADR TOR 
 434 1164 A5330000 	    _ADR PLUS 
 435 1168 79320000 	    _ADR SWAP 
 436 116c DF300000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 1174 A1310000 	    _ADR RFROM  
ARM GAS  forth.s 			page 49


 438 1178 B5330000 	    _ADR SUBB 
 439 117c C53E0000 	    _ADR MOVE
 440 1180 DF300000 	    _DOLIT 24 
 440      18000000 
 441 1188 05110000 	    _ADR CLRLINE 
 442 118c BB2E0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 1190 3C110000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 11a0 504700BF 	    _NEST 
 450 11a4 F90F0000 	    _ADR VIDBUFF
 451 11a8 69320000 	    _ADR DUPP 
 452 11ac DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 11b4 A5330000 	    _ADR PLUS 
 454 11b8 DF300000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 11c0 DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 11c8 B5330000 	    _ADR SUBB  
 457 11cc C53E0000 	    _ADR MOVE
 458 11d0 DF300000 	    _DOLIT 0 
 458      00000000 
 459 11d8 05110000 	    _ADR CLRLINE
 460 11dc BB2E0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 11e0 94110000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 11ec E34D     	    ldr WP,=SCROLLUP 
 469 11ee 45F00105 	    orr WP,#1
 470 11f2 80EA0000 	    eor T0,T0 
 471 11f6 C4F89C00 	    str T0,[UP,#COL]
 472 11fa D4F89800 	    ldr T0,[UP,#ROW]
 473 11fe 1828     	    cmp T0,#24 
 474 1200 A2D0     	    beq SCROLLUP  
 475 1202 00F10100 	    add T0,#1 
 476 1206 C4F89800 	    str T0,[UP,#ROW]
 477 120a 01F053BE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 120e E4110000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
ARM GAS  forth.s 			page 50


 483 1218 D4F89C00 	  ldr T0,[UP,#COL]
 484 121c 00F10100 	  add T0,#1
 485 1220 3528     	  cmp T0,#53
 486 1222 E3D5     	  bpl TV_CRLF  
 487 1224 C4F89C00 	  str T0,[UP,#COL]
 488 1228 01F044BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 122c 12120000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1238 D4F89C00 	    ldr T0,[UP,#COL]
 497 123c 28B1     	    cbz T0,1f 
 498 123e A0F10100 	    sub T0,#1 
 499 1242 C4F89C00 	    str T0,[UP,#COL]
 500 1246 01F035BE 	    _NEXT 
 501 124a D4F89800 	1:  ldr T0,[UP,#ROW]
 502 124e 38B1     	    cbz T0,9f
 503 1250 A0F10100 	    sub T0,#1
 504 1254 C4F89800 	    str T0,[UP,#ROW]
 505 1258 4FF03400 	    mov T0,#52 
 506 125c C4F89C00 	    str T0,[UP,#COL]
 507 1260 01F028BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 1264 4FF08000 	    mov T0,#128 
 513 1268 06EA0006 	    and TOS,T0 
 514 126c 4FEAD616 	    lsr TOS,#7
 515 1270 01F020BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 1274 3868     	  ldr T0,[DSP]
 520 1276 00F10100 	  add T0,#1 
 521 127a 3860     	  str T0,[DSP]
 522 127c 01F01ABE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 1280 4FEA4606 	    lsl TOS,#1
 527 1284 01F016BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 1288 504700BF 	    _NEST 
 536 128c DF300000 	    _DOLIT 5 
 536      05000000 
ARM GAS  forth.s 			page 51


 537 1294 E5310000 	    _ADR TOR 
 538 1298 E5310000 	1:  _ADR TOR 
 539 129c 19350000 	    _ADR DDUP 
 540 12a0 D1310000 	    _ADR RAT
 541 12a4 65120000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 12a8 0D100000 	    _ADR PLOT 
 543 12ac 75120000 	    _ADR INCR_X 
 544 12b0 A1310000 	    _ADR RFROM 
 545 12b4 81120000 	    _ADR NEXT_PIXEL
 546 12b8 01310000 	    _DONXT 1b
 546      98120000 
 547 12c0 05350000 	    _ADR TDROP 
 548 12c4 BB2E0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 12c8 A6F12006 	   sub TOS,#32
 553 12cc 4FF00800 	   mov T0,#8 
 554 12d0 00FB06F6 	   mul TOS,T0 
 555 12d4 A748     	   ldr T0,=font_6x8
 556 12d6 0644     	   add TOS,T0 
 557 12d8 01F0ECBD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 12dc 30120000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 12e8 504700BF 	    _NEST
 565 12ec 69320000 	    _ADR DUPP 
 566 12f0 DF300000 	    _DOLIT 32 
 566      20000000 
 567 12f8 69360000 	    _ADR ULESS
 568 12fc 1F310000 	    _QBRAN 1f
 568      0C130000 
 569 1304 47310000 	    _BRAN CTRL_KEY
 569      70130000 
 570 130c C9120000 	1:  _ADR CHAR_FONT 
 571 1310 850F0000 	    _ADR CURSOR_COL 
 572 1314 75310000 	    _ADR AT
 573 1318 C90F0000 	    _ADR COLX  // x coord 
 574 131c 990F0000 	    _ADR CURSOR_ROW 
 575 1320 75310000 	    _ADR AT    
 576 1324 B10F0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1328 C9340000 	    _ADR ROT  // TEST 
 578 132c DF300000 	    _DOLIT 7   
 578      07000000 
 579 1334 E5310000 	    _ADR TOR  
 580 1338 E5310000 	1:  _ADR TOR  // { x y }
 581 133c 19350000 	    _ADR DDUP  // { x y x y }
 582 1340 D1310000 	    _ADR RAT 
 583 1344 95310000 	    _ADR CAT   // { x y x y r }
 584 1348 89120000 	    _ADR CHAR_ROW 
 585 134c 01340000 	    _ADR ONEP // {x y' }
 586 1350 A1310000 	    _ADR RFROM 
ARM GAS  forth.s 			page 52


 587 1354 01340000 	    _ADR ONEP // {x y' c-adr' }
 588 1358 01310000 	    _DONXT 1b
 588      38130000 
 589 1360 05350000 	    _ADR TDROP  
 590 1364 19120000 	    _ADR RIGHT
 591 1368 59140000 	9:  _ADR SHOW_CURSOR 
 592 136c BB2E0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 1370 E1140000 	    _ADR HIDE_CURSOR
 595 1374 69320000 	    _ADR DUPP 
 596 1378 DF300000 	    _DOLIT BKSPP  
 596      08000000 
 597 1380 31360000 	    _ADR EQUAL 
 598 1384 1F310000 	    _QBRAN 1f 
 598      9C130000 
 599 138c 39140000 	    _ADR BACK_SPACE 
 600 1390 59320000 	8:  _ADR DROP 
 601 1394 47310000 	    _BRAN 9b 
 601      68130000 
 602 139c 69320000 	1:  _ADR DUPP 
 603 13a0 DF300000 	    _DOLIT CRR 
 603      0D000000 
 604 13a8 31360000 	    _ADR EQUAL 
 605 13ac 1F310000 	    _QBRAN 1f 
 605      C0130000 
 606 13b4 E1130000 	    _ADR CAR_RET
 607 13b8 47310000 	    _BRAN 8b
 607      90130000 
 608 13c0 DF300000 	1:  _DOLIT LF 
 608      0A000000 
 609 13c8 31360000 	    _ADR EQUAL 
 610 13cc 1F310000 	    _QBRAN 9b 
 610      68130000 
 611 13d4 F9130000 	    _ADR LN_FEED
 612 13d8 47310000 	    _BRAN 9b  
 612      68130000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 13e0 504700BF 	   _NEST
 620 13e4 DF300000 	   _DOLIT 0 
 620      00000000 
 621 13ec 850F0000 	   _ADR CURSOR_COL 
 622 13f0 61310000 	   _ADR STORE 
 623 13f4 BB2E0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 13f8 504700BF 	    _NEST 
 631 13fc 990F0000 	    _ADR CURSOR_ROW 
 632 1400 75310000 	    _ADR AT 
ARM GAS  forth.s 			page 53


 633 1404 69320000 	    _ADR DUPP 
 634 1408 DF300000 	    _DOLIT 24 
 634      18000000 
 635 1410 4D330000 	    _ADR XORR 
 636 1414 1F310000 	    _QBRAN 1f
 636      2C140000 
 637 141c 01340000 	    _ADR ONEP 
 638 1420 990F0000 	    _ADR CURSOR_ROW 
 639 1424 61310000 	    _ADR STORE 
 640 1428 BB2E0000 	    _UNNEST    
 641 142c 59320000 	1:  _ADR DROP 
 642 1430 49110000 	    _ADR SCROLLUP 
 643 1434 BB2E0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1438 504700BF 	  _NEST 
 652 143c 39120000 	  _ADR LEFT 
 653 1440 59140000 	  _ADR SHOW_CURSOR
 654 1444 BB2E0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1448 E0120000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1458 504700BF 	    _NEST 
 663 145c DF300000 	    _DOLIT 0xFF
 663      FF000000 
 664 1464 990F0000 	0:  _ADR CURSOR_ROW
 665 1468 75310000 	    _ADR AT  
 666 146c 01340000 	    _ADR ONEP 
 667 1470 B10F0000 	    _ADR ROWY 
 668 1474 DF300000 	    _DOLIT BPR
 668      A0000000 
 669 147c C5330000 	    _ADR STAR
 670 1480 DF300000 	    _DOLIT BPR  
 670      A0000000 
 671 1488 B5330000 	    _ADR SUBB 
 672 148c 850F0000 	    _ADR CURSOR_COL
 673 1490 75310000 	    _ADR AT 
 674 1494 C90F0000 	    _ADR COLX 
 675 1498 A5340000 	    _ADR TWOSL  
 676 149c A5330000 	    _ADR PLUS
 677 14a0 F90F0000 	    _ADR VIDBUFF
 678 14a4 A5330000 	    _ADR PLUS
 679 14a8 DF300000 	    _DOLIT 2
 679      02000000 
 680 14b0 E5310000 	    _ADR TOR  
ARM GAS  forth.s 			page 54


 681 14b4 19350000 	1:  _ADR DDUP 
 682 14b8 81310000 	    _ADR CSTOR 
 683 14bc 01340000 	    _ADR ONEP 
 684 14c0 01310000 	    _DONXT 1b
 684      B4140000 
 685 14c8 F1340000 	2:  _ADR DDROP // drop 3 elements 
 686 14cc BB2E0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 14d0 4C140000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 14e0 504700BF 	    _NEST 
 694 14e4 510F0000 	    _ADR BACKCOLOR 
 695 14e8 75310000 	    _ADR AT 
 696 14ec 69320000 	    _ADR DUPP  
 697 14f0 DF300000 	    _DOLIT 4 
 697      04000000 
 698 14f8 95330000 	    _ADR LSHIFT 
 699 14fc 39330000 	    _ADR ORR 
 700 1500 47310000 	    _BRAN 0b
 700      64140000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1508 D4140000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1514 352E     	    cmp TOS,#53
 706 1516 01D4     	    bmi 1f 
 707 1518 4FF03406 	    mov TOS,#52
 708 151c C4F89C60 	1:  str TOS,[UP,#COL]
 709 1520 57F8046B 	    _POP
 710 1524 192E     	    cmp TOS,#25
 711 1526 01D4     	    bmi 1f 
 712 1528 4FF01806 	    mov TOS,#24 
 713 152c C4F89860 	1:  str TOS,[UP,#ROW]
 714 1530 57F8046B 	    _POP 
 715 1534 01F0BEBC 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1538 0C150000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1544 504700BF 	    _NEST 
 721 1548 013E0000 	    _ADR PAD 
 722 154c 69320000 	    _ADR DUPP 
 723 1550 01340000 	    _ADR ONEP 
 724 1554 DF300000 	    _DOLIT 53
 724      35000000 
 725 155c 794C0000 	    _ADR ACCEP
 726 1560 79320000 	    _ADR SWAP 
ARM GAS  forth.s 			page 55


 727 1564 59320000 	    _ADR DROP 
 728 1568 A9320000 	    _ADR OVER 
 729 156c 81310000 	    _ADR CSTOR  
 730 1570 BB2E0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
ARM GAS  forth.s 			page 56


 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
ARM GAS  forth.s 			page 57


 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
ARM GAS  forth.s 			page 58


 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
ARM GAS  forth.s 			page 59


  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
ARM GAS  forth.s 			page 60


  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
ARM GAS  forth.s 			page 61


  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
ARM GAS  forth.s 			page 62


 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 1580 1C61     	   .byte 0x1c,'a' 
   9 1582 3262     	   .byte 0x32,'b'
  10 1584 2163     	   .byte 0x21,'c'
  11 1586 2364     	   .byte 0x23,'d'
  12 1588 2465     	   .byte 0x24,'e'
  13 158a 2B66     	   .byte 0x2b,'f'
  14 158c 3467     	   .byte 0x34,'g'
  15 158e 3368     	   .byte 0x33,'h'
  16 1590 4369     	   .byte 0x43,'i'
  17 1592 3B6A     	   .byte 0x3B,'j'
  18 1594 426B     	   .byte 0x42,'k'
  19 1596 4B6C     	   .byte 0x4b,'l'
  20 1598 3A6D     	   .byte 0x3a,'m'
  21 159a 316E     	   .byte 0x31,'n'
  22 159c 446F     	   .byte 0x44,'o'
  23 159e 4D70     	   .byte 0x4d,'p'
  24 15a0 1571     	   .byte 0x15,'q'
  25 15a2 2D72     	   .byte 0x2d,'r'
  26 15a4 1B73     	   .byte 0x1b,'s'
  27 15a6 2C74     	   .byte 0x2c,'t'
  28 15a8 3C75     	   .byte 0x3c,'u'
  29 15aa 2A76     	   .byte 0x2a,'v'
  30 15ac 1D77     	   .byte 0x1d,'w'
  31 15ae 2278     	   .byte 0x22,'x'
  32 15b0 3579     	   .byte 0x35,'y'
  33 15b2 1A7A     	   .byte 0x1a,'z'
  34 15b4 4530     	   .byte 0x45,'0'
  35 15b6 1631     	   .byte 0x16,'1'
  36 15b8 1E32     	   .byte 0x1e,'2'
  37 15ba 2633     	   .byte 0x26,'3'
  38 15bc 2534     	   .byte 0x25,'4'
  39 15be 2E35     	   .byte 0x2e,'5'
  40 15c0 3636     	   .byte 0x36,'6'
  41 15c2 3D37     	   .byte 0x3d,'7'
  42 15c4 3E38     	   .byte 0x3e,'8'
  43 15c6 4639     	   .byte 0x46,'9'
  44 15c8 0E60     	   .byte 0x0e,'`'
  45 15ca 4E2D     	   .byte 0x4e,'-'
  46 15cc 553D     	   .byte 0x55,'='
  47 15ce 5D5C     	   .byte 0x5d,'\\'
  48 15d0 545B     	   .byte 0x54,'['
  49 15d2 5B5D     	   .byte 0x5b,']'
  50 15d4 4C3B     	   .byte 0x4c,';'
  51 15d6 5227     	   .byte 0x52,'\''
  52 15d8 412C     	   .byte 0x41,','
  53 15da 492E     	   .byte 0x49,'.'
ARM GAS  forth.s 			page 63


  54 15dc 7C2A     	   .byte 0x7c,'*'
  55 15de 792B     	   .byte 0x79,'+'
  56 15e0 2920     	   .byte 0x29,' '
  57 15e2 5A0D     	   .byte SC_ENTER,CRR 
  58 15e4 6608     	   .byte SC_BKSP,BKSPP 
  59 15e6 0D09     	   .byte SC_TAB,9
  60 15e8 761B     	   .byte SC_ESC,27
  61 15ea 119E     	   .byte SC_LALT,VK_LALT 
  62 15ec 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 15ee 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 15f0 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 15f2 779A     	   .byte SC_NUM,VK_NLOCK 
  66 15f4 5800     	   .byte SC_CAPS,0
  67 15f6 0580     	   .byte SC_F1,VK_F1
  68 15f8 0681     	   .byte SC_F2,VK_F2
  69 15fa 0482     	   .byte SC_F3,VK_F3
  70 15fc 0C83     	   .byte SC_F4,VK_F4
  71 15fe 0384     	   .byte SC_F5,VK_F5
  72 1600 0B85     	   .byte SC_F6,VK_F6
  73 1602 8386     	   .byte SC_F7,VK_F7
  74 1604 0A87     	   .byte SC_F8,VK_F8
  75 1606 0188     	   .byte SC_F9,VK_F9
  76 1608 098A     	   .byte SC_F10,VK_F10
  77 160a 788B     	   .byte SC_F11,VK_F11
  78 160c 078C     	   .byte SC_F12,VK_F12
  79 160e 7030     	   .byte SC_KP0,'0'
  80 1610 6931     	   .byte SC_KP1,'1'
  81 1612 7232     	   .byte SC_KP2,'2'
  82 1614 7A33     	   .byte SC_KP3,'3'
  83 1616 6B34     	   .byte SC_KP4,'4'
  84 1618 7335     	   .byte SC_KP5,'5'
  85 161a 7436     	   .byte SC_KP6,'6'
  86 161c 6C37     	   .byte SC_KP7,'7'
  87 161e 7538     	   .byte SC_KP8,'8'
  88 1620 7D39     	   .byte SC_KP9,'9'
  89 1622 7C2A     	   .byte SC_KPMUL,'*'
  90 1624 4A2F     	   .byte SC_KPDIV,'/'
  91 1626 792B     	   .byte SC_KPPLUS,'+'
  92 1628 7B2D     	   .byte SC_KPMINUS,'-'
  93 162a 712E     	   .byte SC_KPDOT,'.'
  94 162c 5A0D     	   .byte SC_KPENTER,'\r'
  95 162e FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1630 AAAA     	   .byte BAT_OK,BAT_OK  
  97 1632 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1634 6141     	   .byte 'a','A'
 102 1636 6242     	   .byte 'b','B'
 103 1638 6343     	   .byte 'c','C'
 104 163a 6444     	   .byte 'd','D'
 105 163c 6545     	   .byte 'e','E'
 106 163e 6646     	   .byte 'f','F'
 107 1640 6747     	   .byte 'g','G'
 108 1642 6848     	   .byte 'h','H'
 109 1644 6949     	   .byte 'i','I'
 110 1646 6A4A     	   .byte 'j','J'
ARM GAS  forth.s 			page 64


 111 1648 6B4B     	   .byte 'k','K'
 112 164a 6C4C     	   .byte 'l','L'
 113 164c 6D4D     	   .byte 'm','M'
 114 164e 6E4E     	   .byte 'n','N'
 115 1650 6F4F     	   .byte 'o','O'
 116 1652 7050     	   .byte 'p','P'
 117 1654 7151     	   .byte 'q','Q'
 118 1656 7252     	   .byte 'r','R'
 119 1658 7353     	   .byte 's','S'
 120 165a 7454     	   .byte 't','T'
 121 165c 7555     	   .byte 'u','U'
 122 165e 7656     	   .byte 'v','V'
 123 1660 7757     	   .byte 'w','W'
 124 1662 7858     	   .byte 'x','X'
 125 1664 7959     	   .byte 'y','Y'
 126 1666 7A5A     	   .byte 'z','Z'
 127 1668 3121     	   .byte '1','!'
 128 166a 3240     	   .byte '2','@'
 129 166c 3323     	   .byte '3','#'
 130 166e 3424     	   .byte '4','$'
 131 1670 3525     	   .byte '5','%'
 132 1672 365E     	   .byte '6','^'
 133 1674 3726     	   .byte '7','&'
 134 1676 382A     	   .byte '8','*'
 135 1678 3928     	   .byte '9','('
 136 167a 3029     	   .byte '0',')'
 137 167c 2D5F     	   .byte '-','_'
 138 167e 3D2B     	   .byte '=','+'
 139 1680 607E     	   .byte '`','~'
 140 1682 2722     	   .byte '\'','"'
 141 1684 2C3C     	   .byte ',','<'
 142 1686 2E3E     	   .byte '.','>'
 143 1688 2F3F     	   .byte '/','?'
 144 168a 5C7C     	   .byte '\\','|'
 145 168c 3B3A     	   .byte ';',':'
 146 168e 5B7B     	   .byte '[','{'
 147 1690 5D7D     	   .byte ']','}'
 148 1692 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1694 315C     	   .byte '1','\\'
 153 1696 3240     	   .byte '2','@'
 154 1698 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 169a 363F     	   .byte '6','?'
 158 169c 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 169e 397B     	   .byte '9','{'
 161 16a0 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 16a2 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
ARM GAS  forth.s 			page 65


 168 16a4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 16a6 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 16a8 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 16aa 11A3     	    .byte SC_RALT,VK_RALT
 172 16ac 2F97     	    .byte SC_APPS,VK_APPS
 173 16ae 758D     	    .byte SC_UP,VK_UP
 174 16b0 728E     	    .byte SC_DOWN,VK_DOWN
 175 16b2 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 16b4 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 16b6 7095     	    .byte SC_INSERT,VK_INSERT
 178 16b8 6C91     	    .byte SC_HOME,VK_HOME
 179 16ba 7D93     	    .byte SC_PGUP,VK_PGUP
 180 16bc 7A94     	    .byte SC_PGDN,VK_PGDN
 181 16be 717F     	    .byte SC_DEL,VK_DELETE
 182 16c0 6992     	    .byte SC_END,VK_END
 183 16c2 4A2F     	    .byte SC_KPDIV,'/'
 184 16c4 5A0D     	    .byte SC_KPENTER,'\r'
 185 16c6 1200     	    .byte 0x12,0
 186 16c8 7C00     	    .byte 0x7c,0
 187 16ca 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 16cc 6303     	   .byte 'c', VK_CTRL_C 
 193 16ce 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 16d0 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 16d2 27A2     	   .byte SC_RGUI,VK_RGUI
 196 16d4 11A3     	   .byte SC_RALT,VK_RALT
 197 16d6 2F97     	   .byte SC_APPS,VK_APPS
 198 16d8 7095     	   .byte SC_INSERT,VK_INSERT
 199 16da 6C91     	   .byte SC_HOME,VK_HOME
 200 16dc 7D93     	   .byte SC_PGUP,VK_PGUP
 201 16de 717F     	   .byte SC_DEL,VK_DELETE
 202 16e0 6992     	   .byte SC_END,VK_END
 203 16e2 7A94     	   .byte SC_PGDN,VK_PGDN
 204 16e4 758D     	   .byte SC_UP,VK_UP
 205 16e6 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 16e8 728E     	   .byte SC_DOWN,VK_DOWN
 207 16ea 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 16ec 4A2F     	   .byte SC_KPDIV,'/'
 209 16ee 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 16f0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 16f2 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 16f4 119E     	   .byte SC_LALT,VK_LALT
 213 16f6 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 16f8 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 16fa 761B     	   .byte SC_ESC,VK_ESC
 216 16fc 779A     	   .byte SC_NUM,VK_NLOCK
 217 16fe 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1700 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
ARM GAS  forth.s 			page 66


  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 1702 00BF     	    _GBL_FUNC kbd_isr 
  79 1704 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 170c 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1710 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 1712 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 171a D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
  84 171e 10F0020F 	    tst r0,#KBD_TX 
  85 1722 40F08480 	    bne send_bit  
  86 1726 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1728 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 172c 01F10102 	    add r2,r1,#1
  89 1730 84F87C20 	    strb r2,[UP,#KBD_BITCNTR]
  90 1734 0029     	    cmp r1,#0
  91 1736 15D0     	    beq start_bit 
  92 1738 0929     	    cmp r1,#9 
  93 173a 25D0     	    beq parity_bit 
  94 173c 0A29     	    cmp r1,#10 
  95 173e 2DD0     	    beq stop_bit 
  96              	    // data bit 
ARM GAS  forth.s 			page 67


  97 1740 94F87D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1744 4FEA5202 	    lsr r2,#1 
  99 1748 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 174c 07D0     	    beq 1f 
 101 174e 42F08002 	    orr r2,#(1<<7)
 102 1752 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1756 00F10100 	    add r0,#1 
 104 175a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 105 175e 84F87D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1762 63E0     	    b 9f         
 107              	start_bit:
 108 1764 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1768 60D1     	    bne 9f // not a start bit 
 110 176a 80EA0000 	    eor r0,r0 
 111 176e 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 112 1772 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 113 1776 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 177a 6FF00101 	    mvn r1,#1
 115 177e 00EA0100 	    and r0,r1 // clear error flag 
 116 1782 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 117 1786 51E0     	    b 9f 
 118              	parity_bit:
 119 1788 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 120 178c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1790 4CD0     	    beq 9f  
 122 1792 01F10101 	    add r1,#1 
 123 1796 84F87F10 	    strb r1,[UP,#KBD_PARITY]  
 124 179a 47E0     	    b 9f      
 125              	stop_bit:
 126 179c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 17a0 40D0     	    beq 8f // error stop bit expected 
 128 17a2 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 129 17a6 11F0010F 	    tst r1,#1 
 130 17aa 3BD0     	    beq 8f // error parity
 131 17ac 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 17b0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 17b4 E028     	    cmp r0,#XT_KEY
 134 17b6 04D1     	    bne 1f
 135 17b8 41F04001 	    orr r1,#KBD_F_XT
 136 17bc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 137 17c0 30E0     	    b 8f  
 138 17c2 11F0800F 	1:  tst r1,#KBD_F_REL
 139 17c6 14D0     	    beq store_code
 140 17c8 5828     	    cmp r0,#SC_CAPS
 141 17ca 04D1     	    bne 1f
 142 17cc 81F00401 	    eor r1,#KBD_F_CAPS
 143 17d0 41F00101 	    orr r1,#KBD_F_CTGL 
 144 17d4 06E0     	    b 2f 
 145 17d6 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 17e0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 17e4 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 17e8 01EA0201 	    and r1,r2
 149 17ec 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 150 17f0 18E0     	    b 8f
 151              	// store code in queue 
ARM GAS  forth.s 			page 68


 152              	store_code:
 153 17f2 F028     	    cmp r0,#KEY_REL
 154 17f4 04D1     	    bne 1f
 155              	// set release flags 
 156 17f6 41F08001 	    orr r1,#KBD_F_REL 
 157 17fa 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 158 17fe 11E0     	    b 8f     
 159 1800 0146     	1:  mov r1,r0 
 160 1802 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 180c 0AD1     	    bne 8f // was async key 
 162 180e D4F89400 	    ldr r0,[UP,#KBD_QTAIL]
 163 1812 04F18002 	    add r2,UP,#KBD_QUEUE
 164 1816 1154     	    strb r1,[r2,r0]
 165 1818 00F10100 	    add r0,#1
 166 181c 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1820 84F89400 	    strb r0,[UP,#KBD_QTAIL]
 168 1824 80EA0000 	8:  eor r0,r0 
 169 1828 A4F87C00 	    strh r0,[UP,#KBD_BITCNTR]
 170 182c 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 182e 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 1832 01F10100 	    add r0,r1,#1
 182 1836 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 183 183a 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 183e 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 1842 0829     	1:  cmp r1,#8 
 187 1844 15D0     	    beq send_parity 
 188 1846 0929     	    cmp r1,#9 
 189 1848 1CD0     	    beq send_stop
 190 184a 0A29     	    cmp r1,#10
 191 184c 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 184e 10F0010F 	    tst r0,#1
 194 1852 4FEA5000 	    lsr r0,#1
 195 1856 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 196 185a 02D1     	    bne 1f 
 197 185c 4FEA0242 	    lsl r2,#16
 198 1860 05E0     	    b 2f  
 199 1862 94F87F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1866 00F10100 	    add r0,#1 
 201 186a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 202 186e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1870 1CE0     	    b 9f 
 204              	send_parity:
 205 1872 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 206 1876 10F0010F 	    tst r0,#1
ARM GAS  forth.s 			page 69


 207 187a 01D0     	    beq 1f 
 208 187c 4FEA0242 	    lsl r2,#16
 209 1880 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1882 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1884 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1886 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 188a 1960     	    str r1,[r3,#GPIO_MODER]
 217 188c 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 188e 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1892 6FF00201 	    mvn r1,#KBD_TX 
 221 1896 00EA0100 	    and r0,r1 
 222 189a 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 189c 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 18a0 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 225 18a4 80EA0000 	    eor r0,r0 
 226 18a8 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 227 18ac 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 18ae 02B4     	    push {r1}
 238 18b0 DFF86414 	    ldr r1,=async_keys
 239 18b4 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 18be 02BC     	    pop {r1}
 241 18c0 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 18c2 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 18cc FF28     	    cmp r0,#255
 256 18ce 01D1     	    bne set_async_key 
 257 18d0 0020     	    movs r0,#0 
 258 18d2 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
ARM GAS  forth.s 			page 70


 260              	set_async_key:
 261 18d4 06B4     	    push {r1,r2}
 262 18d6 94F87E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 18da DFF84014 	    ldr r1,=async_jump 
 264 18de D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 18e2 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 18e6 04E0     	    b set_reset
 268              	ctrl_key:
 269 18e8 4FF01000 	    mov r0,#KBD_F_CTRL
 270 18ec 01E0     	    b set_reset 
 271              	alt_key:
 272 18ee 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 18f2 12F0800F 	    tst r2,#KBD_F_REL 
 275 18f6 04D0     	    beq 1f 
 276 18f8 6FEA0000 	    mvn r0,r0
 277 18fc 02EA0002 	    and r2,r0
 278 1900 01E0     	    b 2f
 279 1902 42EA0002 	1:  orr r2,r0 
 280 1906 84F87E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 190a 5FF0FF30 	    movs r0,#-1
 282 190e 06BC     	9:  pop {r1,r2}
 283 1910 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1912 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1914 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1916 1401     	    .byte SC_LCTRL,1  // left control 
 290 1918 1401     	    .byte SC_RCTRL,1  // right control 
 291 191a 1102     	    .byte SC_LALT,2  // left alt 
 292 191c 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 191e 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1920 00       	    .byte 0 // shift  key 
 297 1921 03       	    .byte (ctrl_key-shift_key)/2
 298 1922 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1923 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1924 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 192c 1846     	    mov r0,r3 
 311 192e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 1932 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1936 00B5FEF7 	    _CALL gpio_config
 313      32FF5DF8 
 313      04EB
ARM GAS  forth.s 			page 71


 314 1940 1846     	    mov r0,r3 
 315 1942 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1946 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 194a 00B5FEF7 	    _CALL gpio_config
 317      28FF5DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1954 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 195c 4FF40050 	    mov r0,#(2<<12)
 321 1960 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1962 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 196a 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 196e 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1970 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1972 80EA0000 	   eor r0,r0 
 328 1976 C4F89000 	   str r0,[UP,#KBD_QHEAD]
 329 197a C4F89400 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 197e 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1982 4FF00101 	   mov r1,#1 
 333 1986 00B5FEF7 	   _CALL nvic_set_priority
 333      AEFE5DF8 
 333      04EB
 334 1990 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1994 00B5FEF7 	   _CALL nvic_enable_irq 
 335      C0FE5DF8 
 335      04EB
 336 199e 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 19a0 3C150000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 19b0 47F8046D 	    _PUSH 
 342 19b4 94F87E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 19b8 06F0FC06 	    and TOS,#0xFC  
 344 19bc 01F07ABA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 19c0 0EB4     	    push {T1,T2,T3}
 352 19c2 80EA0000 	    eor T0,T0  
 353 19c6 04F18003 	    add T3,UP,#KBD_QUEUE
 354 19ca D4F89010 	    ldr T1,[UP,#KBD_QHEAD]
 355 19ce D4F89420 	    ldr T2,[UP,#KBD_QTAIL]
 356 19d2 9142     	    cmp T1,T2 
 357 19d4 06D0     	    beq 2f  
 358 19d6 585C     	    ldrb T0,[T3,T1]
 359 19d8 01F10101 	    add T1,#1 
ARM GAS  forth.s 			page 72


 360 19dc 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 19e0 C4F89010 	    str T1,[UP,#KBD_QHEAD]
 362 19e4 0EBC     	2:  pop {T1,T2,T3}
 363 19e6 7047     	    _RET 
 364              	
 365              	wait_code:
 366 19e8 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 19f2 0000     	    movs T0,T0
 368 19f4 F8D0     	    beq wait_code  
 369 19f6 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 19f8 04B4     	    push {T2}
 380 19fa 11F8012B 	1:  ldrb T2,[T1],#1
 381 19fe 22B1     	    cbz T2,2f 
 382 1a00 8242     	    cmp T2,T0
 383 1a02 02D0     	    beq 2f 
 384 1a04 01F10101 	    add T1,#1 
 385 1a08 F7E7     	    b 1b 
 386 1a0a 0878     	2:  ldrb T0,[T1]
 387 1a0c 0000     	    movs T0,T0 // set/reset zero flag 
 388 1a0e 04BC     	9:  pop {T2}
 389 1a10 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 1a12 A4190000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1a20 47F8046D 	    _PUSH 
 398 1a24 86EA0606 	    eor TOS,TOS 
 399 1a28 BD49     	    ldr T1,=sc_ascii // translation table
 400 1a2a 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 1a2e 4FF04002 	    mov T2,#KBD_F_XT 
 402 1a32 1042     	    tst T0,T2
 403 1a34 00D0     	    beq 1f
 404 1a36 BB49     	    ldr T1,=extended // extended code translation
 405 1a38 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 1a42 98B1     	    cbz T0,inkey_exit
 407 1a44 E128     	    cmp T0,#XT2_KEY // pause 
 408 1a46 13D0     	    beq pause_key
 409 1a48 00B5FFF7 	    _CALL table_scan 
ARM GAS  forth.s 			page 73


 409      D5FF5DF8 
 409      04EB
 410 1a52 0646     	    mov TOS,T0
 411 1a54 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1a5e 032E     	    cmp TOS,#VK_CTRL_C 
 413 1a60 3EF419AD 	    beq user_reboot 
 414 1a64 47F8046D 	    _PUSH 
 415 1a68 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1a6c 01F022BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1a70 4FF00701 	    mov T1,#7 
 420 1a74 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1a7e 0139     	    subs T1,#1
 422 1a80 F8D1     	    bne 1b 
 423 1a82 01F017BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1a86 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1a8a 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1a8e 06D1     	    bne shift_down 
 431 1a90 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1a94 06D1     	    bne altchar_down 
 433 1a96 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1a9a 06D1     	    bne ctrl_down 
 435 1a9c 0DE0     	    b 9f 
 436              	shift_down:
 437 1a9e 3046     	    mov T0,TOS 
 438 1aa0 A149     	    ldr T1,=shifted 
 439 1aa2 04E0     	    b 8f 
 440              	altchar_down:
 441 1aa4 3046     	    mov T0,TOS 
 442 1aa6 A149     	    ldr T1,=altchar
 443 1aa8 01E0     	    b 8f
 444              	ctrl_down:
 445 1aaa 3046     	    mov T0,TOS 
 446 1aac A049     	    ldr T1,=controls 
 447 1aae 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1ab8 0646     	    mov TOS,T0
 449 1aba 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1ac4 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1ac6 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1aca 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1ace 0BD0     	    beq 9f 
 456 1ad0 412E     	    cmp TOS,#'A'
ARM GAS  forth.s 			page 74


 457 1ad2 09D4     	    bmi 9f 
 458 1ad4 5B2E     	    cmp TOS,#'Z'+1 
 459 1ad6 03D4     	    bmi 3f 
 460 1ad8 612E     	    cmp TOS,#'a'
 461 1ada 05D4     	    bmi 9f 
 462 1adc 7B2E     	    cmp TOS,#'z'+1
 463 1ade 03D5     	    bpl 9f 
 464 1ae0 4FF02000 	3:  mov T0,#(1<<5)
 465 1ae4 86EA0006 	    eor TOS,T0 
 466 1ae8 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1aea 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1aec 206F     	1:  ldr r0,[UP,#VID_STATE]
 483 1aee 0128     	    cmp r0,ST_PREVID 
 484 1af0 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 1af2 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1af6 00B5FEF7 	    _CALL nvic_disable_irq
 487      24FE5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1b00 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1b08 1846     	    mov r0,r3 
 491 1b0a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 1b0e 4FF01102 	    mov r2,#OUTPUT_OD
 493 1b12 00B5FEF7 	    _CALL gpio_config 
 493      44FE5DF8 
 493      04EB
 494 1b1c 1846     	    mov r0,r3 
 495 1b1e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 1b22 82EA0202 	    eor r2,r2 
 497 1b26 00B5FEF7 	    _CALL gpio_out 
 497      90FE5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1b30 4FF4E150 	    mov r0,#150*48
 500 1b34 0138     	1:  subs r0,#1 
 501 1b36 FDD1     	    bne 1b
 502 1b38 01BC     	    pop {r0}
 503 1b3a 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 504 1b3e D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
 505 1b42 40F00200 	    orr r0,#KBD_TX 
 506 1b46 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 75


 507 1b4a 80EA0000 	    eor r0,r0 
 508 1b4e 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 509 1b52 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1b56 1846     	    mov r0,r3 
 513 1b58 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1b5c 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1b60 00B5FEF7 	    _CALL gpio_config 
 515      1DFE5DF8 
 515      04EB
 516 1b6a 1846     	    mov r0,r3 
 517 1b6c 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1b70 82EA0202 	    eor r2,r2 
 519 1b74 00B5FEF7 	    _CALL gpio_out
 519      69FE5DF8 
 519      04EB
 520              	// release clock line 
 521 1b7e 1846     	    mov r0,r3 
 522 1b80 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1b84 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1b88 00B5FEF7 	    _CALL gpio_config
 524      09FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1b92 4FF00A00 	    mov r0,#10
 528 1b96 E060     	    str r0,[UP,#CD_TIMER]
 529 1b98 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1b9a 20B1     	    cbz r0, 4f 
 531 1b9c 94F87E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1ba0 10F0020F 	    tst r0,#KBD_TX
 533 1ba4 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1ba6 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1baa 00B5FEF7 	    _CALL nvic_enable_irq
 536      B5FD5DF8 
 536      04EB
 537 1bb4 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1bb8 20F00201 	    bic r1,r0,#KBD_TX
 539 1bbc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 540 1bc0 00F00200 	    and r0,#KBD_TX
 541 1bc4 48B1     	    cbz r0, 5f
 542 1bc6 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1bc8 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1bcc 1960     	    str r1,[r3,#GPIO_MODER]
 545 1bce 80EA0000 	    eor r0,r0 
 546 1bd2 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1bd6 6FEA0000 	    mvn r0,r0   
 548 1bda 0EBC     	5:  pop {r1,r2,r3}
 549 1bdc 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1bde 80EA0000 	    eor T0,T0 
 555 1be2 C4F89000 	    str T0,[UP,#KBD_QHEAD]
ARM GAS  forth.s 			page 76


 556 1be6 C4F89400 	    str T0,[UP,#KBD_QTAIL]
 557 1bea 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1bee 6FF00301 	    mvn T1,#3
 559 1bf2 00EA0100 	    and T0,T1 
 560 1bf6 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 561 1bfa 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1bfc 161A0000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1c08 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1c0c 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1c16 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1c18 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1c22 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1c2c FE28     	    cmp r0,KBD_CMD_RESEND
 574 1c2e EBD0     	    beq 1b 
 575 1c30 4FF4FA70 	    mov T0,#500 
 576 1c34 E060     	    str T0,[UP,#CD_TIMER]
 577 1c36 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1c40 10B9     	    cbnz T0,3f
 579 1c42 E068     	    ldr T0,[UP,#CD_TIMER]
 580 1c44 0028     	    cmp T0,#0 
 581 1c46 F6D1     	    bne 2b 
 582 1c48 47F8046D 	3:  _PUSH 
 583 1c4c 0646     	    mov TOS,T0  
 584 1c4e 01F031B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1c52 001C0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1c60 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1c6a 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1c6e 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1c78 00B5FFF7 	2:  _CALL wait_code 
ARM GAS  forth.s 			page 77


 595      B5FE5DF8 
 595      04EB
 596 1c82 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1c84 ECD0     	    beq 1b
 598 1c86 FA28     	    cmp T0,#KBD_ACK  
 599 1c88 F6D1     	    bne 2b 
 600 1c8a 3046     	2:  mov T0,TOS 
 601 1c8c 00F00700 	    and T0,#7 
 602 1c90 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1c9a 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ca4 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ca6 F0D0     	    beq 2b
 606 1ca8 FA28     	    cmp T0,#KBD_ACK 
 607 1caa F6D1     	    bne 3b  
 608 1cac 57F8046B 	    _POP 
 609 1cb0 01F000B9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1cb4 561C0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1cc4 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1cc8 10F0010F 	    tst T0,#1
 619 1ccc 01D1     	    bne 1f 
 620 1cce 01F0F1B8 	    _NEXT 
 621 1cd2 47F8046D 	1: _PUSH 
 622 1cd6 6FF00101 	    mvn T1,#1 
 623 1cda 00EA0100 	    and T0,T1 
 624 1cde 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 625 1ce2 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1ce6 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1cee B81C0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1cfc 504700BF 	    _NEST
 635 1d00 C51C0000 	1:  _ADR CAPS_LED  
 636 1d04 211A0000 	    _ADR PS2_QKEY 
 637 1d08 B5340000 	    _ADR QDUP 
 638 1d0c 1F310000 	    _QBRAN 1b  
 638      001D0000 
ARM GAS  forth.s 			page 78


 639 1d14 BB2E0000 	    _UNNEST 
 640 1d18 12190000 	
 640      20190000 
 640      80150000 
 640      A4160000 
 640      34160000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1d38 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1d40 0346     	    mov r3,r0 
  44 1d42 4FF00401 	    mov r1,#PIN_F_SC 
  45 1d46 4FF00102 	    mov r2,#OUTPUT_PP
  46 1d4a 00B5FEF7 	    _CALL gpio_config 
  46      28FD5DF8 
  46      04EB
  47 1d54 1846     	    mov r0,r3 
  48 1d56 4FF00401 	    mov r1,#PIN_F_SC  
ARM GAS  forth.s 			page 79


  49 1d5a 4FF00102 	    MOV r2,#1
  50 1d5e 00B5FEF7 	    _CALL gpio_out 
  50      74FD5DF8 
  50      04EB
  51 1d68 1846     	    mov r0,r3 
  52 1d6a 4FF00501 	    mov r1,#PIN_SCK  
  53 1d6e 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1d72 00B5FEF7 	    _CALL gpio_config 
  54      14FD5DF8 
  54      04EB
  55 1d7c 1846     	    mov r0,r3 
  56 1d7e 4FF00701 	    mov r1,#PIN_MOSI 
  57 1d82 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1d86 00B5FEF7 	    _CALL gpio_config 
  58      0AFD5DF8 
  58      04EB
  59 1d90 1846     	    mov r0,r3
  60 1d92 4FF00601 	    mov r1,#PIN_MISO
  61 1d96 4FF00202 	    mov r2,#INPUT_AFO  
  62 1d9a 00B5FEF7 	    _CALL gpio_config
  62      00FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1da4 4CF6AA40 	    mov r0,#0xCCAA
  65 1da8 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1daa 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1db2 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1db4 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1db8 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1dba 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1dc2 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1dc6 0180     	    strh r1,[r0,#SPI_CR1]
  73 1dc8 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1dca 80EA0000 	    eor r0,r0 
  75 1dce C5F25050 	    movt r0,#0x5550 
  76 1dd2 40EA0100 	    orr r0,r1 
  77 1dd6 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1dd8 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1dda F21C0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1de8 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1df0 4FF00401 	    mov r1,#PIN_F_SC 
  88 1df4 4FF00002 	    mov r2,#0 
  89 1df8 00B5FEF7 	    _CALL gpio_out 
  89      27FD5DF8 
  89      04EB
ARM GAS  forth.s 			page 80


  90 1e02 01F057B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1e06 DE1D0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1e14 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1e1c 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1e1e 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1e22 FBD1     	    bne 1b 
 102 1e24 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1e2c 4FF00401 	    mov r1,#PIN_F_SC 
 104 1e30 4FF00102 	    mov r2,#1 
 105 1e34 00B5FEF7 	    _CALL gpio_out 
 105      09FD5DF8 
 105      04EB
 106 1e3e 01F039B8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1e42 0A1E0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1e50 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1e58 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1e5a 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1e5e FBD0     	    beq 0b 
 118 1e60 6FF00001 	    mvn T1,#0 
 119 1e64 0173     	    strb T1,[T0,#SPI_DR]
 120 1e66 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1e68 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1e6c FBD0     	    beq 1b     
 123              	2:  
 124 1e6e 47F8046D 	    _PUSH 
 125 1e72 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1e74 01F01EB8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1e78 461E0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
ARM GAS  forth.s 			page 81


 134 1e84 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1e8c 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1e8e 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1e92 FBD0     	    beq 0b 
 138 1e94 0673     	    strb TOS,[T0,#SPI_DR]
 139 1e96 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1e98 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1e9c FBD0     	    beq 1b 
 142 1e9e 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1ea0 57F8046B 	    _POP 
 144 1ea4 01F006B8 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ea8 7C1E0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1eb4 504700BF 	    _NEST 
 153 1eb8 E91D0000 	    _ADR CHIP_SEL 
 154 1ebc DF300000 	    _DOLIT 4
 154      04000000 
 155 1ec4 851E0000 	    _ADR WR_BYTE
 156 1ec8 151E0000 	    _ADR CHIP_DSEL
 157 1ecc BB2E0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1ed0 AC1E0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1edc 504700BF 	    _NEST 
 165 1ee0 E91D0000 	    _ADR CHIP_SEL 
 166 1ee4 DF300000 	    _DOLIT 6 
 166      06000000 
 167 1eec 851E0000 	    _ADR WR_BYTE 
 168 1ef0 151E0000 	    _ADR CHIP_DSEL 
 169 1ef4 BB2E0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1ef8 D41E0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1f04 504700BF 	    _NEST
 177 1f08 E91D0000 	    _ADR CHIP_SEL  
 178 1f0c DF300000 	    _DOLIT sr_cmd 
 178      2C1F0000 
 179 1f14 A5330000 	    _ADR PLUS 
 180 1f18 95310000 	    _ADR CAT
ARM GAS  forth.s 			page 82


 181 1f1c 851E0000 	    _ADR WR_BYTE
 182 1f20 511E0000 	    _ADR RD_BYTE
 183 1f24 151E0000 	    _ADR CHIP_DSEL  
 184 1f28 BB2E0000 	    _UNNEST 
 185 1f2c 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1f2f FC1E0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1f3c 504700BF 	    _NEST 
 193 1f40 69320000 	    _ADR DUPP 
 194 1f44 DF300000 	    _DOLIT 16
 194      10000000 
 195 1f4c 7D330000 	    _ADR RSHIFT 
 196 1f50 851E0000 	    _ADR WR_BYTE 
 197 1f54 69320000 	    _ADR DUPP
 198 1f58 DF300000 	    _DOLIT 8 
 198      08000000 
 199 1f60 7D330000 	    _ADR RSHIFT 
 200 1f64 851E0000 	    _ADR WR_BYTE 
 201 1f68 851E0000 	    _ADR WR_BYTE 
 202 1f6c BB2E0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1f70 331F0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1f80 504700BF 	    _NEST 
 210 1f84 DF300000 	1:  _DOLIT 0 
 210      00000000 
 211 1f8c 051F0000 	    _ADR RD_SR 
 212 1f90 DF300000 	    _DOLIT 3 
 212      03000000 
 213 1f98 25330000 	    _ADR ANDD 
 214 1f9c 1F310000 	    _QBRAN 2f
 214      AC1F0000 
 215 1fa4 47310000 	    _BRAN 1b
 215      841F0000 
 216 1fac BB2E0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1fb0 741F0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
ARM GAS  forth.s 			page 83


 223      4C4B00BF 
 224 1fc0 504700BF 	    _NEST 
 225 1fc4 DD1E0000 	    _ADR WR_ENBL
 226 1fc8 E91D0000 	    _ADR CHIP_SEL 
 227 1fcc DF300000 	    _DOLIT 0x20 
 227      20000000 
 228 1fd4 851E0000 	    _ADR WR_BYTE 
 229 1fd8 3D1F0000 	    _ADR SEND_ADR
 230 1fdc 151E0000 	    _ADR CHIP_DSEL 
 231 1fe0 811F0000 	    _ADR WAIT_DONE 
 232 1fe4 BB2E0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1fe8 B41F0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1ff8 504700BF 	    _NEST 
 240 1ffc DD1E0000 	    _ADR WR_ENBL 
 241 2000 E91D0000 	    _ADR CHIP_SEL
 242 2004 DF300000 	    _DOLIT 0x60
 242      60000000 
 243 200c DF300000 	    _DOLIT 0xC7 
 243      C7000000 
 244 2014 851E0000 	    _ADR WR_BYTE 
 245 2018 851E0000 	    _ADR WR_BYTE 
 246 201c 151E0000 	    _ADR CHIP_DSEL 
 247 2020 811F0000 	    _ADR WAIT_DONE
 248 2024 BB2E0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 2028 EC1F0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 2034 504700BF 	    _NEST
 258 2038 E91D0000 	    _ADR CHIP_SEL 
 259 203c DF300000 	    _DOLIT 3 
 259      03000000 
 260 2044 851E0000 	    _ADR WR_BYTE 
 261 2048 3D1F0000 	    _ADR SEND_ADR
 262 204c E5310000 	    _ADR TOR   
 263 2050 47310000 	    _BRAN 2f
 263      68200000 
 264 2058 511E0000 	1:  _ADR RD_BYTE
 265 205c A9320000 	    _ADR OVER 
 266 2060 81310000 	    _ADR CSTOR
 267 2064 01340000 	    _ADR ONEP 
 268 2068 01310000 	2:  _DONXT 1b
 268      58200000 
ARM GAS  forth.s 			page 84


 269 2070 59320000 	    _ADR DROP 
 270 2074 151E0000 	    _ADR CHIP_DSEL 
 271 2078 BB2E0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 207c 2C200000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 2088 504700BF 	    _NEST 
 280 208c DD1E0000 	    _ADR WR_ENBL
 281 2090 E91D0000 	    _ADR CHIP_SEL
 282 2094 DF300000 	    _DOLIT 2 
 282      02000000 
 283 209c 851E0000 	    _ADR WR_BYTE 
 284 20a0 3D1F0000 	    _ADR SEND_ADR
 285 20a4 E5310000 	    _ADR TOR
 286 20a8 47310000 	    _BRAN 2f 
 286      C8200000 
 287 20b0 69320000 	1:  _ADR DUPP 
 288 20b4 95310000 	    _ADR CAT 
 289 20b8 69320000 	    _ADR DUPP 
 290 20bc 91460000 	    _ADR HDOT
 291 20c0 851E0000 	    _ADR WR_BYTE 
 292 20c4 01340000 	    _ADR ONEP
 293 20c8 01310000 	2:  _DONXT 1b 
 293      B0200000 
 294 20d0 59320000 	    _ADR DROP
 295 20d4 151E0000 	    _ADR CHIP_DSEL
 296 20d8 811F0000 	    _ADR WAIT_DONE 
 297 20dc BB2E0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 20e0 80200000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 20f0 504700BF 	    _NEST 
ARM GAS  forth.s 			page 85


 318              	    
 319 20f4 BB2E0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 20f8 E4200000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 2108 504700BF 	    _NEST 
 327              	
 328 210c BB2E0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 2110 FC200000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 2118 504700BF 	    _NEST 
 336              	
 337 211c BB2E0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 2120 14210000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 212c 504700BF 	    _NEST 
 345              	
 346 2130 BB2E0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 2134 24210000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 2140 504700BF 	    _NEST 
 354              	
 355 2144 BB2E0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
ARM GAS  forth.s 			page 86


   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 2148 5F708930 	     .word  0x3089705F // 1e-9
  34 214c 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 2150 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 2154 BD378635 	     .word  0x358637BD // 1e-6 
  37 2158 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 215c 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 2160 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 2164 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 2168 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 216c 0000803F 	     .word  0x3F800000 // 1.0 
  44 2170 00002041 	     .word  0x41200000 // 1e1 
  45 2174 0000C842 	     .word  0x42C80000 // 1e2 
  46 2178 00007A44 	     .word  0x447A0000 // 1e3 
  47 217c 00401C46 	     .word  0x461C4000 // 1e4 
  48 2180 0050C347 	     .word  0x47C35000 // 1e5 
  49 2184 00247449 	     .word  0x49742400 // 1e6 
  50 2188 8096184B 	     .word  0x4B189680 // 1e7
  51 218c 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 2190 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 2194 38210000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 21a0 4FEA8606 	    lsl TOS,#2  
  61 21a4 FF48     	    ldr t0, =p10 
  62 21a6 0644     	    add TOS,TOS,T0
  63 21a8 3668     	    ldr TOS,[TOS]  
ARM GAS  forth.s 			page 87


  64 21aa 00F083BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 21ae DFF8F803 	   ldr.w r0,=CPACR 
  73 21b2 0168     	   ldr R1,[R0]
  74 21b4 41F47001 	   orr r1,r1,#(0xf<<20)
  75 21b8 0160     	   str r1,[r0]
  76 21ba BFF34F8F 	   dsb 
  77 21be FB48     	   ldr r0,=FPC_BASE_ADR
  78 21c0 81EA0101 	   eor r1,r1 
  79 21c4 0160     	   str r1,[r0,FPCCR]
  80 21c6 BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 21ca 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 21cc 98210000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 21d4 4FF05100 	    mov r0,#FPU_IRQ 
  92 21d8 00B5FEF7 	    _CALL nvic_disable_irq
  92      B3FA5DF8 
  92      04EB
  93 21e2 00F067BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 21e6 D0210000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 21f0 4FF05100 	    mov r0,#FPU_IRQ
 102 21f4 00B5FEF7 	    _CALL nvic_enable_irq
 102      90FA5DF8 
 102      04EB
 103 21fe 00F059BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 2202 EA210000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 220c 47F8046D 	   _PUSH 
ARM GAS  forth.s 			page 88


 112 2210 F1EE106A 	   vmrs TOS,FPSCR
 113 2214 BFF34F8F 	   dsb  
 114 2218 00F04CBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 221c 06220000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 222c F1EE100A 	   vmrs T0,FPSCR 
 125 2230 BFF34F8F 	   dsb 
 126 2234 06EA0006 	   and TOS,T0  
 127 2238 E1EE106A 	   vmsr FPSCR,TOS 
 128 223c BFF34F8F 	   dsb 
 129 2240 00F038BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2244 20220000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 224c 00EE106A 	    vmov.f32 S0,TOS 
 138 2250 57F8046B 	    _POP 
 139 2254 00F02EBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 2258 48220000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 2260 00EE906A 	    vmov.f32 S1,TOS 
 147 2264 57F8046B 	    _POP 
 148 2268 00F024BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 226c 5C220000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 2274 01EE106A 	    vmov.f32 S2,TOS 
 156 2278 57F8046B 	    _POP 
 157 227c 00F01ABE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
ARM GAS  forth.s 			page 89


 163 2280 70220000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 2288 47F8046D 	    _PUSH 
 165 228c 10EE106A 	    vmov.f32 TOS,S0 
 166 2290 00F010BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 2294 84220000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 229c 47F8046D 	    _PUSH 
 174 22a0 10EE906A 	    vmov.f32 TOS,S1 
 175 22a4 00F006BE 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 22a8 98220000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 22b0 47F8046D 	    _PUSH 
 183 22b4 11EE106A 	    vmov.f32 TOS,S2 
 184 22b8 00F0FCBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 22bc AC220000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 22c4 00EE106A 	    vmov.f32 S0,TOS
 194 22c8 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 22cc 10EE106A 	    vmov.f32 TOS,s0 
 196 22d0 00F0F0BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 22d4 C0220000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 22e0 00EE106A 	    vmov.f32 S0,TOS 
 204 22e4 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 22e8 10EE106A 	    vmov.f32 TOS,S0 
 206 22ec 00F0E2BD 	    _NEXT 
 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 22f0 D8220000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
ARM GAS  forth.s 			page 90


 213 22f8 00EE106A 	    vmov.f32 S0,TOS
 214 22fc B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 2300 10EE106A 	    vmov.f32 TOS,s0 
 216 2304 00F0D6BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 2308 F4220000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 2310 00EE106A 	   vmov.f32 s0,TOS 
 224 2314 57F8046B 	   _POP 
 225 2318 00EE906A 	   vmov.f32 s1,TOS 
 226 231c 30EE200A 	   vadd.f32 s0,s0,s1 
 227 2320 10EE106A 	   vmov.f32 TOS,s0
 228 2324 00F0C6BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 2328 0C230000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 2330 00EE106A 	   vmov.f32 s0,TOS 
 237 2334 57F8046B 	   _POP 
 238 2338 00EE906A 	   vmov.f32 s1,TOS 
 239 233c 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 2340 10EE106A 	   vmov.f32 TOS,s0
 241 2344 00F0B6BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 2348 2C230000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 2350 00EE106A 	   vmov.f32 s0,TOS 
 251 2354 57F8046B 	   _POP 
 252 2358 00EE906A 	   vmov.f32 s1,TOS 
 253 235c 20EE800A 	   vmul.f32 s0,s1,s0 
 254 2360 10EE106A 	   vmov.f32 TOS,s0
 255 2364 00F0A6BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
 261              	*******************************/
 262 2368 4C230000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 2370 00EE106A 	   vmov.f32 s0,TOS 
 264 2374 57F8046B 	   _POP 
 265 2378 00EE906A 	   vmov.f32 s1,TOS 
ARM GAS  forth.s 			page 91


 266 237c 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 2380 10EE106A 	   vmov.f32 TOS,s0
 268 2384 00F096BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 2388 6C230000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 2394 00EE106A 	    vmov.f32 s0,TOS 
 277 2398 B1EE400A 	    vneg.f32 S0,S0 
 278 239c 10EE106A 	    vmov.f32 TOS,S0    
 279 23a0 00F088BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 23a4 8C230000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 23b0 80EA0000 	    eor T0,T0 
 287 23b4 6FEA0000 	    mvn T0,T0 
 288 23b8 4FEA5000 	    lsr T0,#1 
 289 23bc 06EA0006 	    and TOS,T0 
 290 23c0 00F078BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 23c4 A8230000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 23d0 00EE106A 	     vmov.f32 s0,TOS 
 299 23d4 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 23d8 10EE106A 	     vmov.f32 TOS,s0 
 301 23dc 00F06ABD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 23e0 C8230000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 23e8 00EE106A 	    vmov.f32 s0,TOS 
 309 23ec B5EE400A 	    vcmp.f32 s0, #0.0 
 310 23f0 F1EE106A 	    vmrs TOS,FPSCR
 311 23f4 BFF34F8F 	    dsb  
 312 23f8 4FEAE676 	    asr TOS,#31   
 313 23fc 00F05ABD 	    _NEXT 
 314              	
 315              	/*****************************
ARM GAS  forth.s 			page 92


 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 2400 E4230000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 2408 504700BF 	    _NEST 
 321 240c 31230000 	    _ADR FSUBB
 322 2410 E9230000 	    _ADR FZLESS
 323 2414 B5350000 	    _ADR INVER     
 324 2418 BB2E0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 241c 04240000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2424 504700BF 	    _NEST 
 332 2428 31230000 	    _ADR FSUBB 
 333 242c E9230000 	    _ADR FZLESS
 334 2430 BB2E0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2434 20240000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 2440 504700BF 	    _NEST 
 342 2444 A9320000 	   _ADR OVER 
 343 2448 A9320000 	   _ADR OVER 
 344 244c 09240000 	   _ADR FGREAT 
 345 2450 1F310000 	   _QBRAN 1f 
 345      5C240000 
 346 2458 79320000 	   _ADR SWAP  
 347 245c 59320000 	1: _ADR DROP 
 348 2460 BB2E0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 2464 38240000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 2470 504700BF 	    _NEST 
 355 2474 A9320000 	    _ADR OVER 
 356 2478 A9320000 	    _ADR OVER 
 357 247c 25240000 	    _ADR FLESS 
 358 2480 1F310000 	    _QBRAN 1f
 358      8C240000 
 359 2488 79320000 	    _ADR SWAP   
 360 248c 59320000 	1:  _ADR DROP 
 361 2490 BB2E0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
ARM GAS  forth.s 			page 93


 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 2494 68240000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 24a0 80EA0000 	    eor T0,T0 
 370 24a4 C8F20000 	    movt T0,#0X8000
 371 24a8 06EA0006 	    and TOS,T0
 372 24ac 4FEAE676 	    asr TOS,#31  
 373 24b0 00F000BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 24b4 98240000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 24c0 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 24c8 06EA0006 	    and TOS,T0 
 382 24cc 4FEAD656 	    lsr TOS,#23
 383 24d0 A6F17F06 	    sub TOS,#127 
 384 24d4 00F0EEBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 24d8 B8240000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 24e4 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 24ec 06EA0006 	    AND TOS,T0 
 393 24f0 80EA0000 	    EOR T0,T0 
 394 24f4 C0F28000 	    MOVT T0,0x80
 395 24f8 46EA0006 	    ORR TOS,T0 
 396 24fc 00F0DABC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 2500 DC240000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 2508 47F8046D 	    _PUSH 
 405 250c 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
 406 2514 00F0CEBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
ARM GAS  forth.s 			page 94


 412 2518 04250000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 2520 47F8046D 	    _PUSH 
 414 2524 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 252c 00F0C2BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 2530 1C250000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 253c 47F8046D 	    _PUSH 
 423 2540 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 2548 00F0B4BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 254c 34250000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 2558 47F8046D 	    _PUSH 
 433 255c 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 2564 00F0A6BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 2568 50250000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 2574 504700BF 	    _NEST
 443 2578 C1240000 	    _ADR FEXP 
 444 257c F9220000 	    _ADR STOF 
 445 2580 59250000 	    _ADR LOG2
 446 2584 51230000 	    _ADR FSTAR 
 447 2588 E1220000 	    _ADR TRUNC  
 448 258c 69320000 	    _ADR DUPP 
 449 2590 D9320000 	    _ADR ZLESS 
 450 2594 1F310000 	    _QBRAN 1f 
 450      A0250000 
 451 259c 11340000 	    _ADR ONEM
 452 25a0 BB2E0000 	1:  _UNNEST 
 453 25a4 6C210000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
ARM GAS  forth.s 			page 95


   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 25b0 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 25b4 0000C842 	            .word  0x42C80000  // 100.0
  31 25b8 00401C46 	            .word  0x461C4000  // 10000.0 
  32 25bc 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 25c0 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 25c4 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 25c8 504700BF 	    _NEST 
  45 25cc DF300000 	    _DOLIT 2 
  45      02000000 
  46 25d4 95330000 	    _ADR LSHIFT 
  47 25d8 DF300000 	    _DOLIT p10p2n 
  47      B0250000 
  48 25e0 A5330000 	    _ADR PLUS 
  49 25e4 75310000 	    _ADR AT 
  50 25e8 BB2E0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
ARM GAS  forth.s 			page 96


  58 25ec 504700BF 	    _NEST 
  59 25f0 DF300000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 25f8 DF300000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2600 B53D0000 	    _ADR PICK  // idx f e 1 idx 
  62 2604 95330000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2608 25330000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 260c BB2E0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2610 504700BF 	    _NEST 
  78 2614 E5310000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2618 D1310000 	    _ADR RAT   // idx f e R: e 
  81 261c ED250000 	    _ADR bit_state // idx f state 
  82 2620 1F310000 	    _QBRAN 1f   // bit reset 
  82      34260000 
  83 2628 A9320000 	    _ADR OVER 
  84 262c C9250000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2630 71230000 	    _ADR FSLH  // idx f R: e 
  86 2634 79320000 	1:  _ADR SWAP  // f idx R: e 
  87 2638 01340000 	    _ADR ONEP   // F idx++ R: e 
  88 263c 79320000 	    _ADR SWAP   // idx f  
  89 2640 A9320000 	    _ADR OVER   // idx f idx 
  90 2644 DF300000 	    _DOLIT 5 
  90      05000000 
  91 264c B1360000 	    _ADR GREAT  // idx > 5
  92 2650 1F310000 	    _QBRAN div_loop 
  92      18260000 
  93 2658 A1310000 	    _ADR RFROM 
  94 265c 59320000 	    _ADR DROP 
  95 2660 BB2E0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 2664 504700BF 	    _NEST 
 109 2668 E5310000 	    _ADR TOR 
ARM GAS  forth.s 			page 97


 110              	mult_loop:
 111 266c D1310000 	    _ADR RAT   // idx f e R: e 
 112 2670 ED250000 	    _ADR bit_state // idx f state 
 113 2674 1F310000 	    _QBRAN 1f   // bit reset 
 113      88260000 
 114 267c A9320000 	    _ADR OVER  
 115 2680 C9250000 	    _ADR p10p2at // idx f pwr10 R: e
 116 2684 51230000 	    _ADR FSTAR  // idx f R: e 
 117 2688 79320000 	1:  _ADR SWAP  // f idx R: e 
 118 268c 01340000 	    _ADR ONEP   // F idx++ R: e 
 119 2690 79320000 	    _ADR SWAP   // idx f  
 120 2694 A9320000 	    _ADR OVER   // idx f idx 
 121 2698 DF300000 	    _DOLIT 5 
 121      05000000 
 122 26a0 B1360000 	    _ADR GREAT  // idx > 5
 123 26a4 1F310000 	    _QBRAN mult_loop 
 123      6C260000 
 124 26ac A1310000 	    _ADR RFROM 
 125 26b0 59320000 	    _ADR DROP 
 126 26b4 BB2E0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 26b8 504700BF 	    _NEST 
 136 26bc A9320000 	    _ADR OVER  // e f e 
 137 26c0 1F310000 	    _QBRAN 3f // exp==0,  done 
 137      FC260000 
 138 26c8 DF300000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 26d0 DD340000 	    _ADR NROT // idx e f
 140 26d4 79320000 	    _ADR SWAP // idx f e   
 141 26d8 69320000 	    _ADR DUPP  // idx f e e 
 142 26dc D9320000 	    _ADR ZLESS
 143 26e0 1F310000 	    _QBRAN pos_exp 
 143      F8260000 
 144              	// negative exponent 
 145 26e8 D9350000 	    _ADR ABSS 
 146 26ec 11260000 	    _ADR mant_div 
 147 26f0 47310000 	    _BRAN 3f 
 147      FC260000 
 148              	pos_exp: // positive exponent 
 149 26f8 65260000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 26fc 79320000 	3:  _ADR SWAP 
 152 2700 59320000 	    _ADR DROP 
 153 2704 BB2E0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
 159              	integer:
ARM GAS  forth.s 			page 98


 160 2708 504700BF 	    _NEST 
 161 270c DF300000 	    _DOLIT 0 
 161      00000000 
 162 2714 69320000 	    _ADR DUPP 
 163 2718 8D320000 	    _ADR DSWAP // 0 0 a cnt 
 164 271c D9410000 	    _ADR TONBR // d a+ cnt- 
 165 2720 F9310000 	    _ADR DTOR 
 166 2724 59320000 	    _ADR DROP // drop hi word 
 167 2728 B5310000 	    _ADR DRFROM // i a+ cnt-  
 168 272c C9340000 	    _ADR ROT  // a+ cnt- i
 169 2730 F9220000 	    _ADR STOF 
 170 2734 BB2E0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 2738 504700BF 	    _NEST 
 180 273c 69320000 	    _ADR DUPP 
 181 2740 E5310000 	    _ADR TOR 
 182 2744 DF300000 	    _DOLIT 0
 182      00000000 
 183 274c 69320000 	    _ADR DUPP
 184 2750 8D320000 	    _ADR DSWAP 
 185 2754 D9410000 	    _ADR TONBR // -- d a+ cnt-  
 186 2758 8D320000 	    _ADR DSWAP  // a+ cnt- d
 187 275c 59320000 	    _ADR DROP   // a+ cnt- i 
 188 2760 F9220000 	    _ADR STOF  // convert integer to float 
 189 2764 A1310000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 2768 DF300000 	    _DOLIT 2 
 190      02000000 
 191 2770 B53D0000 	    _ADR  PICK  
 192 2774 B5330000 	    _ADR SUBB 
 193 2778 DF300000 	    _DOLIT 9 
 193      09000000 
 194 2780 E5360000 	    _ADR MIN 
 195 2784 A1210000 	    _ADR PWR10
 196 2788 71230000 	    _ADR FSLH  // a+ cnt- fdec 
 197 278c BB2E0000 	    _UNNEST 
 198              	
 199              	
 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 2790 504700BF 	    _NEST 
 206 2794 6F420000 	    _ADR NEGQ 
 207 2798 E5310000 	    _ADR TOR 
 208 279c DF300000 	    _DOLIT 0 
 208      00000000 
 209 27a4 69320000 	    _ADR DUPP 
 210 27a8 8D320000 	    _ADR DSWAP // 0 0 a cnt  
 211 27ac D9410000 	    _ADR TONBR // d a cnt   
ARM GAS  forth.s 			page 99


 212 27b0 8D320000 	    _ADR DSWAP
 213 27b4 59320000 	    _ADR DROP  // hi word 
 214 27b8 A1310000 	    _ADR RFROM 
 215 27bc 1F310000 	    _QBRAN 1f 
 215      C8270000 
 216 27c4 C9350000 	    _ADR NEGAT 
 217              	1:  
 218 27c8 BB2E0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 27cc 6C250000 	    _HEADER FLOATQ,6,"FLOAT?"
 226      06464C4F 
 226      41543F00 
 227 27d8 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 27dc 1D380000 	    _ADR BASE 
 231 27e0 75310000 	    _ADR AT 
 232 27e4 E5310000 	    _ADR TOR 
 233              	    // use decimal base  
 234 27e8 4D410000 	    _ADR DECIM 
 235 27ec DF300000 		_DOLIT	0      // failed flag   
 235      00000000 
 236 27f4 A9320000 		_ADR	OVER   // a 0 a     R: base
 237 27f8 51370000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 27fc 6F420000 	    _ADR   NEGQ
 240 2800 E5310000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 2804 69320000 	    _ADR   DUPP 
 242 2808 E5310000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 280c 09270000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 2810 A9320000 	    _ADR  OVER  
 245 2814 A1310000 	    _ADR  RFROM  
 246 2818 31360000 	    _ADR  EQUAL
 247 281c 79320000 	    _ADR  SWAP
 248 2820 E5310000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 2824 33310000 	    _TBRAN expect_dot  
 249      5C280000 
 250              	// must be '.' or 'E'     
 251 282c DF300000 	    _DOLIT '.' 
 251      2E000000 
 252 2834 4D420000 	    _ADR CHARQ
 253 2838 33310000 	    _TBRAN get_fraction  
 253      70280000 
 254 2840 DF300000 	    _DOLIT 'E'
 254      45000000 
 255 2848 4D420000 	    _ADR  CHARQ 
 256 284c 33310000 	    _TBRAN get_exponent 
 256      C4280000 
 257 2854 47310000 	    _BRAN error2
 257      18290000 
 258              	expect_dot:
ARM GAS  forth.s 			page 100


 259 285c DF300000 	    _DOLIT '.' 
 259      2E000000 
 260 2864 4D420000 	    _ADR CHARQ 
 261 2868 1F310000 	    _QBRAN error2
 261      18290000 
 262              	get_fraction:
 263 2870 A9320000 	    _ADR OVER 
 264 2874 95310000 	    _ADR CAT 
 265 2878 DF300000 	    _DOLIT 10
 265      0A000000 
 266 2880 71410000 	    _ADR DIGTQ 
 267 2884 79320000 	    _ADR SWAP 
 268 2888 59320000 	    _ADR DROP 
 269 288c 1F310000 	    _QBRAN error2       
 269      18290000 
 270 2894 39270000 	    _ADR decimals 
 271 2898 E5310000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 272              	// if next char is 'E' get exponent 
 273 289c DF300000 	    _DOLIT 'E' 
 273      45000000 
 274 28a4 4D420000 	    _ADR CHARQ
 275 28a8 33310000 	    _TBRAN get_exponent 
 275      C4280000 
 276 28b0 DF300000 	    _DOLIT fzero 
 276      00000000 
 277 28b8 E5310000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 278 28bc 47310000 	    _BRAN build_float
 278      D8280000 
 279              	get_exponent: 
 280 28c4 91270000 	    _ADR exponent // -- a 0 a+ cnt- exp
 281 28c8 E5310000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 282 28cc 69320000 	    _ADR DUPP 
 283 28d0 33310000 	    _TBRAN error4   // count must be 0 
 283      38290000 
 284              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 285 28d8 F1340000 	    _ADR DDROP 
 286 28dc F1340000 	    _ADR DDROP 
 287 28e0 A1310000 	    _ADR RFROM 
 288 28e4 B5310000 	    _ADR DRFROM 
 289 28e8 11230000 	    _ADR FPLUS 
 290 28ec B9260000 	    _ADR exp_adjust
 291 28f0 A1310000 	    _ADR RFROM 
 292 28f4 1F310000 	    _QBRAN 1f 
 292      08290000 
 293 28fc DF300000 	    _DOLIT fminus1
 293      000080BF 
 294 2904 51230000 	    _ADR FSTAR 
 295 2908 DF300000 	1:  _DOLIT -2 
 295      FEFFFFFF 
 296 2910 47310000 	    _BRAN restore_base  
 296      4C290000 
 297              	error2: // a 0 a cnt R: base sign fint 
 298 2918 F1340000 	    _ADR DDROP  
 299 291c 47310000 	    _BRAN e4  
 299      44290000 
 300              	error3: // a 0 a cnt R: base sign fint fdec  
 301 2924 F1340000 	    _ADR DDROP  // a 0 a R: base sign
ARM GAS  forth.s 			page 101


 302 2928 A1310000 	    _ADR RFROM 
 303 292c 59320000 	    _ADR DROP 
 304 2930 47310000 	    _BRAN e4  
 304      44290000 
 305              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 306 2938 F1340000 	    _ADR DDROP 
 307 293c B5310000 	    _ADR DRFROM 
 308 2940 F1340000 	    _ADR DDROP 
 309 2944 B5310000 	e4: _ADR DRFROM 
 310 2948 F1340000 	    _ADR DDROP 
 311              	restore_base: 
 312 294c A1310000 	    _ADR RFROM 
 313 2950 1D380000 	    _ADR BASE 
 314 2954 61310000 	    _ADR STORE 
 315 2958 BB2E0000 	    _UNNEST 
 316              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 295c 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2960 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2964 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2968 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 296c 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2970 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2974 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2978 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 297c 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
ARM GAS  forth.s 			page 102


  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2980 D0270000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 298c 504700BF 	    _NEST
  50 2990 DF300000 	    _DOLIT 1  
  50      01000000 
  51 2998 CD360000 	    _ADR MAX  
  52 299c DF300000 	    _DOLIT 8
  52      08000000 
  53 29a4 E5360000 	    _ADR MIN 
  54 29a8 DF300000 	    _DOLIT 2 
  54      02000000 
  55 29b0 95330000 	    _ADR LSHIFT 
  56 29b4 DF300000 	    _DOLIT rounding 
  56      5C290000 
  57 29bc A5330000 	    _ADR PLUS 
  58 29c0 75310000 	    _ADR AT   
  59 29c4 11230000 	    _ADR FPLUS 
  60 29c8 BB2E0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 29cc 84290000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 29d4 57F8040B 	    ldr T0,[DSP],#4
  69 29d8 3070     	    strb T0,[TOS]  
  70 29da 06F10106 	    add TOS,#1
  71 29de 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 29e0 504700BF 	    _NEST 
  81 29e4 E5310000 	    _ADR TOR  // >R ( i r: b )
  82 29e8 293B0000 	    _ADR STOD // ( dbl r: b )
  83 29ec 69320000 	    _ADR DUPP // ( dbl i r: b )
  84 29f0 E5310000 	    _ADR TOR  // ( dbl r: b sign )
  85 29f4 4D350000 	    _ADR DABS 
  86 29f8 ED3F0000 	    _ADR BDIGS 
  87 29fc 59400000 	    _ADR DIGS 
  88 2a00 A1310000 	    _ADR RFROM 
  89 2a04 8D400000 	    _ADR SIGN 
  90 2a08 B5400000 	    _ADR EDIGS // ( -- p u )
  91 2a0c 69320000 	    _ADR DUPP  
ARM GAS  forth.s 			page 103


  92 2a10 DD340000 	    _ADR NROT // -rot ( -- u p u )
  93 2a14 D1310000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2a18 79320000 	    _ADR SWAP // ( -- u p b u )
  95 2a1c 953E0000 	    _ADR CMOVE // ( -- u ) 
  96 2a20 69320000 	    _ADR DUPP  // ( -- u u )
  97 2a24 A1310000 	    _ADR RFROM // ( -- u u b )
  98 2a28 A5330000 	    _ADR PLUS  // ( -- u b+ )
  99 2a2c 79320000 	    _ADR SWAP  // ( -- b+ u )
 100 2a30 BB2E0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2a34 D0290000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2a40 504700BF 	    _NEST 
 116 2a44 A1210000 	    _ADR PWR10 
 117 2a48 E5310000 	    _ADR TOR  // f2 r: f1 
 118 2a4c DF300000 	    _DOLIT 0   // m 
 118      00000000 
 119 2a54 79320000 	    _ADR SWAP  // m f2 
 120 2a58 69320000 	1:  _ADR DUPP 
 121 2a5c D1310000 	    _ADR RAT 
 122 2a60 25240000 	    _ADR FLESS
 123 2a64 1F310000 	    _QBRAN 2f
 123      8C2A0000 
 124 2a6c DF300000 	    _DOLIT ten 
 124      00002041 
 125 2a74 51230000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2a78 79320000 	    _ADR SWAP
 128 2a7c 11340000 	    _ADR ONEM 
 129 2a80 79320000 	    _ADR SWAP 
 130 2a84 47310000 	    _BRAN 1b
 130      582A0000 
 131 2a8c A1310000 	2:  _ADR RFROM 
 132 2a90 59320000 	    _ADR DROP 
 133 2a94 79320000 	    _ADR SWAP 
 134 2a98 BB2E0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
ARM GAS  forth.s 			page 104


 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 2a9c 382A0000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 2aac 504700BF 	    _NEST 
 150 2ab0 A1210000 	    _ADR PWR10
 151 2ab4 E5310000 	    _ADR TOR
 152 2ab8 DF300000 	    _DOLIT 0 
 152      00000000 
 153 2ac0 79320000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 2ac4 D1310000 	1:  _ADR RAT   
 155 2ac8 A9320000 	    _ADR OVER 
 156 2acc 09240000 	    _ADR FGREAT 
 157 2ad0 33310000 	    _TBRAN 2f 
 157      F82A0000 
 158 2ad8 DF300000 	    _DOLIT ten 
 158      00002041 
 159 2ae0 71230000 	    _ADR FSLH 
 160              	    // increment m 
 161 2ae4 79320000 	    _ADR SWAP 
 162 2ae8 01340000 	    _ADR ONEP 
 163 2aec 79320000 	    _ADR SWAP 
 164 2af0 47310000 	    _BRAN 1b   
 164      C42A0000 
 165 2af8 A1310000 	2:  _ADR RFROM 
 166 2afc 59320000 	    _ADR DROP
 167 2b00 79320000 	    _ADR SWAP 
 168 2b04 BB2E0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2b08 504700BF 	    _NEST
 183 2b0c 79320000 	    _ADR SWAP
 184 2b10 B5340000 	    _ADR QDUP    
 185 2b14 1F310000 	    _QBRAN 2f 
 185      382B0000 
 186 2b1c 79320000 	    _ADR SWAP 
 187 2b20 DF300000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2b28 79320000 	    _ADR SWAP  
 189 2b2c D5290000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2b30 E1290000 	    _ADR ITOA // ( i b -- b u )
ARM GAS  forth.s 			page 105


 191 2b34 59320000 	    _ADR DROP // ( -- b+ )     
 192 2b38 BB2E0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 2b3c 504700BF 	    _NEST
 208 2b40 DF300000 	    _DOLIT 2 
 208      02000000 
 209 2b48 B53D0000 	    _ADR PICK 
 210 2b4c D9320000 	    _ADR ZLESS 
 211 2b50 1F310000 	    _QBRAN 1f 
 211      682B0000 
 212 2b58 E5310000 	    _ADR TOR 
 213 2b5c 59320000 	    _ADR DROP 
 214 2b60 47310000 	    _BRAN 2f 
 214      D42B0000 
 215 2b68 DF300000 	1:   _DOLIT '.' 
 215      2E000000 
 216 2b70 79320000 	    _ADR SWAP 
 217 2b74 D5290000 	    _ADR CSTOP 
 218 2b78 E5310000 	    _ADR TOR // >r ( d f r: b ) 
 219 2b7c 79320000 	1:  _ADR SWAP  
 220 2b80 B5340000 	    _ADR QDUP 
 221 2b84 1F310000 	    _QBRAN 2f
 221      D42B0000 
 222 2b8c 11340000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 2b90 79320000 	    _ADR SWAP // swap ( -- d f r: b )
 224 2b94 DF300000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 2b9c 51230000 	    _ADR FSTAR // f*
 226 2ba0 69320000 	    _ADR DUPP  
 227 2ba4 E1220000 	    _ADR TRUNC // d f i
 228 2ba8 69320000 	    _ADR DUPP  // d f i i  
 229 2bac DF300000 	    _DOLIT '0' 
 229      30000000 
 230 2bb4 A5330000 	    _ADR PLUS 
 231 2bb8 A1310000 	    _ADR RFROM // R> ( d f c b )
 232 2bbc D5290000 	    _ADR CSTOP // ( d f i b+ )
 233 2bc0 E5310000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 2bc4 F9220000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 2bc8 31230000 	    _ADR FSUBB 
 236 2bcc 47310000 	    _BRAN 1b 
 236      7C2B0000 
 237 2bd4 59320000 	2:  _ADR DROP 
 238 2bd8 A1310000 	    _ADR RFROM 
 239 2bdc BB2E0000 	    _UNNEST 
ARM GAS  forth.s 			page 106


 240              	
 241              	/***************************
 242              	 convert integer part of float 
 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2be0 504700BF 	    _NEST 
 257 2be4 E5310000 	    _ADR TOR // ( -- d f r: b )
 258 2be8 69320000 	    _ADR DUPP 
 259 2bec DF300000 	    _DOLIT fone 
 259      0000803F 
 260 2bf4 25240000 	    _ADR FLESS 
 261 2bf8 1F310000 	    _QBRAN 1f
 261      582C0000 
 262 2c00 DF300000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2c08 412A0000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2c0c DD340000 	    _ADR NROT
 265 2c10 A9320000 	    _ADR OVER 
 266 2c14 8D290000 	    _ADR ROUND
 267 2c18 69320000 	    _ADR DUPP 
 268 2c1c DF300000 	    _DOLIT fone 
 268      0000803F 
 269 2c24 25240000 	    _ADR FLESS 
 270 2c28 1F310000 	    _QBRAN 2f 
 270      642C0000 
 271              	    // first digit '0' 
 272 2c30 DF300000 	    _DOLIT '0' 
 272      30000000 
 273 2c38 A1310000 	    _ADR RFROM 
 274 2c3c D5290000 	    _ADR CSTOP 
 275 2c40 E5310000 	    _ADR TOR 
 276              	    // decrement d 
 277 2c44 79320000 	    _ADR SWAP 
 278 2c48 11340000 	    _ADR ONEM 
 279 2c4c 79320000 	    _ADR SWAP 
 280 2c50 A1310000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2c54 BB2E0000 	    _UNNEST 
 282 2c58 A9320000 	1:  _ADR OVER 
 283 2c5c AD2A0000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2c60 DD340000 	    _ADR NROT   // m d f r: b 
 285 2c64 69320000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2c68 E1220000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2c6c 69320000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2c70 E5310000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2c74 F9220000 	    _ADR STOF  // ( -- m d f f )
 290 2c78 31230000 	    _ADR FSUBB // ( -- m d f r: b i )
ARM GAS  forth.s 			page 107


 291 2c7c A1310000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2c80 A1310000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2c84 E1290000 	    _ADR ITOA // -- m d f b u )
 294 2c88 E5310000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2c8c C9340000 	    _ADR ROT
 296 2c90 A1310000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2c94 B5330000 	    _ADR SUBB // ( -- m f b d- )
 298 2c98 DD340000 	    _ADR NROT // ( -- m d f b )
 299 2c9c BB2E0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2ca0 A02A0000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2ca8 504700BF 	    _NEST 
 315 2cac A9320000 	    _ADR OVER  
 316 2cb0 C1240000 	    _ADR FEXP 
 317 2cb4 DF300000 	    _DOLIT 128 
 317      80000000 
 318 2cbc 31360000 	    _ADR EQUAL 
 319 2cc0 1F310000 	    _QBRAN 1f
 319      D02C0000 
 320 2cc8 47310000 	    _BRAN nan 
 320      8C2D0000 
 321 2cd0 69320000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2cd4 E5310000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2cd8 61340000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2cdc 79320000 	    _ADR SWAP 
 326 2ce0 D5290000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2ce4 A9320000 	    _ADR OVER 
 328 2ce8 1F310000 	    _QBRAN zdz // 0.0 
 328      3C2D0000 
 329              	    // check float sign 
 330 2cf0 A9320000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2cf4 A1240000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2cf8 1F310000 	    _QBRAN 1f  // 0branch 1f 
 332      1C2D0000 
 333              	    // negative number add '-' to buffer 
 334 2d00 79320000 	    _ADR SWAP 
 335 2d04 B1230000 	    _ADR FABS 
 336 2d08 79320000 	    _ADR SWAP 
 337 2d0c DF300000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2d14 79320000 	    _ADR SWAP 
 339 2d18 D5290000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2d1c E12B0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
ARM GAS  forth.s 			page 108


 341 2d20 3D2B0000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2d24 092B0000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2d28 D1310000 	    _ADR RAT 
 344 2d2c B5330000 	    _ADR SUBB 
 345 2d30 A1310000 	    _ADR RFROM 
 346 2d34 79320000 	    _ADR SWAP 
 347 2d38 BB2E0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2d3c E5310000 	     _ADR TOR 
 350 2d40 F1340000 	     _ADR DDROP
 351 2d44 A1310000 	     _ADR RFROM
 352 2d48 DF300000 	     _DOLIT '0'
 352      30000000 
 353 2d50 79320000 	     _ADR SWAP 
 354 2d54 D5290000 	     _ADR CSTOP 
 355 2d58 DF300000 	     _DOLIT '.'
 355      2E000000 
 356 2d60 79320000 	     _ADR SWAP 
 357 2d64 D5290000 	     _ADR CSTOP 
 358 2d68 DF300000 	     _DOLIT '0'
 358      30000000 
 359 2d70 79320000 	     _ADR SWAP 
 360 2d74 D5290000 	     _ADR CSTOP 
 361 2d78 59320000 	     _ADR DROP  
 362 2d7c A1310000 	     _ADR RFROM 
 363 2d80 DF300000 	     _DOLIT 4 
 363      04000000 
 364 2d88 BB2E0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2d8c E5310000 	    _ADR TOR   // ( d f r: b )
 367 2d90 79320000 	    _ADR SWAP  // f d  
 368 2d94 59320000 	    _ADR DROP  // f 
 369 2d98 61340000 	    _ADR BLANK  // f c 
 370 2d9c D1310000 	    _ADR RAT    // f c b 
 371 2da0 D5290000 	    _ADR CSTOP  // f b+ 
 372 2da4 79320000 	    _ADR SWAP   // b+ f 
 373 2da8 E5240000 	    _ADR FMANT  // b+ mant
 374 2dac DF300000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2db4 25330000 	    _ADR ANDD   
 376 2db8 1F310000 	    _QBRAN infinity 
 376      F82D0000 
 377 2dc0 DF300000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2dc8 79320000 	    _ADR SWAP   // c b+
 379 2dcc D5290000 	    _ADR CSTOP  // b+
 380 2dd0 DF300000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2dd8 79320000 	    _ADR SWAP   // c b+ 
 382 2ddc D5290000 	    _ADR CSTOP  // b+
 383 2de0 DF300000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2de8 79320000 	    _ADR SWAP   // c b+ 
 385 2dec D5290000 	    _ADR CSTOP  // b+
 386 2df0 47310000 	    _BRAN 1f 
 386      282E0000 
 387              	infinity:
ARM GAS  forth.s 			page 109


 388 2df8 DF300000 	    _DOLIT 'I'
 388      49000000 
 389 2e00 79320000 	    _ADR SWAP 
 390 2e04 D5290000 	    _ADR CSTOP 
 391 2e08 DF300000 	    _DOLIT 'N'
 391      4E000000 
 392 2e10 79320000 	    _ADR SWAP 
 393 2e14 D5290000 	    _ADR CSTOP 
 394 2e18 DF300000 	    _DOLIT 'F'
 394      46000000 
 395 2e20 79320000 	    _ADR SWAP 
 396 2e24 D5290000 	    _ADR CSTOP 
 397              	1:
 398 2e28 59320000 	    _ADR DROP 
 399 2e2c A1310000 	    _ADR RFROM 
 400 2e30 DF300000 	    _DOLIT 4 
 400      04000000 
 401 2e38 BB2E0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2e3c A42C0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2e44 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2e48 DF300000 	    _DOLIT 1 
 415      01000000 
 416 2e50 CD360000 	    _ADR MAX 
 417 2e54 DF300000 	    _DOLIT 7 
 417      07000000 
 418 2e5c E5360000 	    _ADR MIN
 419 2e60 79320000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2e64 E93D0000 	    _ADR HERE
 422 2e68 E5310000 	    _ADR TOR  
 423 2e6c DF300000 	    _DOLIT 16 
 423      10000000 
 424 2e74 F1500000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2e78 D1310000 	    _ADR RAT 
 427 2e7c DF300000 	    _DOLIT 16 
 427      10000000 
 428 2e84 DF300000 	    _DOLIT 0 
 428      00000000 
 429 2e8c 0D3F0000 	    _ADR FILL 
 430 2e90 A1310000 	    _ADR RFROM // ( d f b )
 431 2e94 A92C0000 	    _ADR FTOA 
 432 2e98 F9430000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 2e9c DF300000 	    _DOLIT -16 
ARM GAS  forth.s 			page 110


 434      F0FFFFFF 
 435 2ea4 F1500000 	    _ADR ALLOT
 436 2ea8 BB2E0000 	    _UNNEST
 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
ARM GAS  forth.s 			page 111


  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2eac 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2eb0 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2eb4 5CF8045B 		LDR WP,[IP],#4 
  89 2eb8 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2eba 58F804CB 		LDMFD RSP!,{IP}
  92 2ebe 5CF8045B 		LDR WP,[IP],#4 
  93 2ec2 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2ec4 04F14C01 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2ec8 0968     		ldr T1,[T1]     // address in here   
 107 2eca 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
ARM GAS  forth.s 			page 112


 108 2ece 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2ed2 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2ed6 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 2eda 04F14C02 		add T2,UP,#USER_CTOP 
 112 2ede 1160     		str T1,[T2]  // save update HERE value 
 113 2ee0 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2ee2 47F8046D 		_PUSH 
 119 2ee6 04F11406 		ADD TOS,UP,#STDIN 
 120 2eea E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2eec 47F8046D 		_PUSH 
 126 2ef0 04F11806 		ADD TOS,UP,#STDOUT
 127 2ef4 DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2ef6 402E0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 2f00 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2f08 47F8046D 	    _PUSH 
 136 2f0c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2f0e 81EA0101 	    eor T1,T1 
 138 2f12 8162     	    str T1,[T0,#SCB_CFSR]
 139 2f14 CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2f16 FA2E0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2f20 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 2f28 47F8046D 		_PUSH 
 148 2f2c 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2f2e 81EA0101 	    eor T1,T1 
 150 2f32 8163     	    str T1,[T0,#SCB_BFAR]
 151 2f34 BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 2f36 1A2F0000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
ARM GAS  forth.s 			page 113


 157      3F00
 158 2f40 504700BF 		_NEST 
 159 2f44 E32E0000 		_ADR TSTDIN // ' STDIN 
 160 2f48 753E0000 		_ADR ATEXE
 161 2f4c BB2E0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 2f50 3A2F0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 2f58 504700BF 		_NEST
 169              	KEY1:
 170 2f5c C51C0000 		_ADR CAPS_LED 
 171 2f60 412F0000 		_ADR	QKEY 
 172 2f64 1F310000 		_QBRAN	KEY1
 172      5C2F0000 
 173 2f6c BB2E0000 		_UNNEST
 174              	
 175              	/**********************************************
 176              		EMIT ( c -- )
 177              		transmit a character to console 
 178              	**********************************************/
 179 2f70 542F0000 		_HEADER EMIT,4,"EMIT"
 179      04454D49 
 179      540000BF 
 180 2f7c 504700BF 		_NEST 
 181 2f80 ED2E0000 		_ADR TSTDOUT 
 182 2f84 753E0000 		_ADR ATEXE 
 183 2f88 BB2E0000 		_UNNEST 
 184              	
 185              	
 186              	/************************************************
 187              	 GET-IP ( n - c )
 188              	 return interrupt priority of IRQn 
 189              	************************************************/
 190              	/*
 191              		_HEADER GETIP,6,"GET-IP" 
 192              		_NEST 
 193              		_ADR DUPP 
 194              		_ADR ZLESS
 195              		_QBRAN 1f 
 196              		_DOLIT 15
 197              		_ADR ANDD
 198              		_DOLIT 4
 199              		_ADR SUBB  
 200              		_DOLIT 0xE000ED18 
 201              		_BRAN 2f 
 202              	1:	_DOLIT 0xE000E400 
 203              	2:	_ADR PLUS 
 204              		_ADR CAT
 205              		_DOLIT 4 
 206              		_ADR RSHIFT 
 207              		_UNNEST 
 208              	*/
 209              	
ARM GAS  forth.s 			page 114


 210              	/***********************************************
 211              	 RANDOM ( n+ -- {0..n+ - 1} )
 212              	 return pseudo random number 
 213              	 REF: https://en.wikipedia.org/wiki/Xorshift
 214              	************************************************/
 215 2f8c 742F0000 		_HEADER RAND,6,"RANDOM"
 215      0652414E 
 215      444F4D00 
 216 2f98 504700BF 		_NEST
 217 2f9c D9350000 		_ADR ABSS   
 218 2fa0 BD370000 		_ADR SEED 
 219 2fa4 75310000 		_ADR AT 
 220 2fa8 69320000 		_ADR DUPP 
 221 2fac DF300000 		_DOLIT 13
 221      0D000000 
 222 2fb4 95330000 		_ADR LSHIFT 
 223 2fb8 4D330000 		_ADR XORR  
 224 2fbc 69320000 		_ADR DUPP 
 225 2fc0 DF300000 		_DOLIT 17 
 225      11000000 
 226 2fc8 7D330000 		_ADR RSHIFT 
 227 2fcc 4D330000 		_ADR XORR 
 228 2fd0 69320000 		_ADR DUPP
 229 2fd4 DF300000 		_DOLIT 5 
 229      05000000 
 230 2fdc 95330000 		_ADR LSHIFT 
 231 2fe0 4D330000 		_ADR XORR  
 232 2fe4 69320000 		_ADR DUPP 
 233 2fe8 BD370000 		_ADR SEED 
 234 2fec 61310000 		_ADR STORE 
 235 2ff0 DF300000 		_DOLIT 0x7FFFFFFF
 235      FFFFFF7F 
 236 2ff8 25330000 		_ADR ANDD 
 237 2ffc 79320000 		_ADR SWAP 
 238 3000 713C0000 		_ADR MODD 
 239 3004 BB2E0000 		_UNNEST 
 240              	
 241              	
 242              	/****************************************
 243              	 PAUSE ( u -- ) 
 244              	 suspend execution for u milliseconds
 245              	****************************************/
 246 3008 902F0000 		_HEADER PAUSE,5,"PAUSE"
 246      05504155 
 246      534500BF 
 247 3014 504700BF 		_NEST 
 248 3018 ED370000 		_ADR TIMER 
 249 301c 61310000 		_ADR STORE 
 250              	PAUSE_LOOP:
 251 3020 ED370000 		_ADR TIMER 
 252 3024 75310000 		_ADR AT 
 253 3028 1F310000 		_QBRAN PAUSE_EXIT 
 253      38300000 
 254 3030 47310000 		_BRAN PAUSE_LOOP 
 254      20300000 
 255              	PAUSE_EXIT: 		
 256 3038 BB2E0000 		_UNNEST 
ARM GAS  forth.s 			page 115


 257              	
 258              	/******************************************
 259              	  ULED ( T|F -- )
 260              	  control user LED, -1 ON, 0 OFF 
 261              	*******************************************/
 262 303c 0C300000 		_HEADER ULED,4,"ULED"
 262      04554C45 
 262      440000BF 
 263 3048 4FF40050 		mov T0,#(1<<LED_PIN)
 264 304c 4FF40061 		_MOV32 T1,LED_GPIO 
 264      C4F20201 
 265 3054 3600     		movs TOS,TOS 
 266 3056 57F8046B 		_POP
 267 305a 03D0     		beq ULED_OFF
 268 305c 4FEA0040 		lsl T0,#16 
 269 3060 8861     		str T0,[T1,#GPIO_BSRR]
 270 3062 27E7     		_NEXT 
 271              	ULED_OFF:
 272 3064 8861     		str T0,[T1,#GPIO_BSRR]
 273 3066 25E7     		_NEXT    
 274              	
 275              	/**************************
 276              	   JOYSTK  ( -- u )
 277              	   read joystick port 
 278              	**************************/
 279 3068 40300000 		_HEADER JOYSTK,6,"JOYSTK"
 279      064A4F59 
 279      53544B00 
 280 3074 504700BF 		_NEST 
 281 3078 DF300000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 281      10000240 
 282 3080 75310000 		_ADR AT 
 283 3084 DF300000 		_DOLIT 0x100f 
 283      0F100000 
 284 308c 25330000 		_ADR ANDD 
 285 3090 BB2E0000 		_UNNEST 
 286              	
 287              	/****************************
 288              		BEEP ( msec freq -- )
 289              	input:
 290              		freq  frequence hertz 
 291              		msec  durration in msec 
 292              	*****************************/
 293 3094 6C300000 		_HEADER BEEP,4,"BEEP"
 293      04424545 
 293      500000BF 
 294 30a0 48F68050 		_MOV32 r0,6000000 // Fclk 
 294      C0F25B00 
 295 30a8 B0FBF6F0 		udiv r0,r0,TOS
 296 30ac 57F8046B 		_POP  
 297 30b0 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 297      C4F20001 
 298 30b8 C862     		str r0,[r1,#TIM_ARR]
 299 30ba 4FEA5000 		lsr r0,#1
 300 30be 4863     		str r0,[r1,#TIM_CCR1]
 301 30c0 4FF00100 		mov r0,#1 
 302 30c4 0862     		str r0,[r1,#TIM_CCER]
ARM GAS  forth.s 			page 116


 303 30c6 0860     		str r0,[r1,#TIM_CR1]
 304 30c8 C868     		ldr r0,[r1,#TIM_DIER]
 305 30ca C4F8B060 		str TOS,[UP,#BEEP_DTMR]
 306 30ce 57F8046B 		_POP
 307 30d2 EFE6     		_NEXT 
 308              	
 309              	
 310              	/***************
 311              	//  The kernel
 312              	***************/
 313              	
 314              	/********************
 315              	    NOP	( -- )
 316              	 	do nothing.
 317              	*********************/
 318 30d4 98300000 		_HEADER NOP,3,"NOP"
 318      034E4F50 
 319 30dc EAE6     		_NEXT 
 320              	 
 321              	/********************
 322              	    doLIT	( -- w )
 323              	 	Push an inline literal.
 324              	hidden word used by compiler 
 325              	*********************/
 326              	DOLIT:
 327 30de 47F8046D 		_PUSH				//  store TOS on data stack
 328 30e2 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 329 30e6 E5E6     		_NEXT 
 330              	
 331              	/*******************************
 332              	    EXECUTE	( ca -- )
 333              	 	Execute the word at ca.
 334              	*******************************/
 335 30e8 D8300000 		_HEADER EXECU,7,"EXECUTE"
 335      07455845 
 335      43555445 
 336 30f4 46F00105 		ORR	WP,TOS,#1 
 337 30f8 57F8046B 		_POP
 338 30fc 2847     		BX WP 
 339 30fe D9E6     		_NEXT 
 340              	
 341              	/**********************************************************
 342              	    donext	( -- ) counter on R:
 343              	 	Run time code for the single index loop.
 344              	 	: next ( -- ) \ hilevel model
 345              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 346              	hidden word used by compiler 	  
 347              	*********************************************************/
 348              	DONXT:
 349 3100 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 350 3104 22B9     		CBNZ T2,NEXT1 
 351              		/* loop done */
 352 3106 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 353 310a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 354 310e D1E6     		_NEXT
 355              	NEXT1:
 356              		/* decrement loop counter */
ARM GAS  forth.s 			page 117


 357 3110 A2F10102 		SUB	T2,T2,#1
 358 3114 C8F80020 		STR	T2,[RSP]
 359 3118 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 360 311c CAE6     		_NEXT 
 361              	
 362              	/**************************************
 363              	    ?branch	( f -- )
 364              	 	Branch if flag is zero.
 365              	hiddend word used by compiler
 366              	**************************************/
 367              	QBRAN:
 368 311e 3600     		MOVS	TOS,TOS
 369 3120 57F8046B 		_POP
 370 3124 02D1     		BNE	QBRAN1
 371 3126 DCF800C0 		LDR	IP,[IP]
 372 312a C3E6     		_NEXT
 373              	QBRAN1:
 374 312c 0CF1040C 	 	ADD	IP,IP,#4
 375 3130 C0E6     		_NEXT
 376              	
 377              	/***********************************
 378              		tbranch ( f -- )
 379              	    branch if flag is true 
 380              	***********************************/
 381              	TBRAN:
 382 3132 3600     		MOVS TOS,TOS 
 383 3134 57F8046B 		_POP 
 384 3138 02D0     		BEQ 1f 
 385 313a DCF800C0 		LDR IP,[IP]
 386 313e B9E6     		_NEXT 
 387 3140 0CF1040C 	1:  ADD IP,IP,#4
 388 3144 B6E6     		_NEXT 
 389              	
 390              	
 391              	/***********************************
 392              	    branch	( -- )
 393              	 	Branch to an inline address.
 394              	hidden word used by compiler 
 395              	***********************************/
 396              	BRAN:
 397 3146 DCF800C0 		LDR	IP,[IP]
 398 314a B3E6     		_NEXT
 399              	
 400              	/******************************************
 401              	    EXIT	(  -- )
 402              	 	Exit the currently executing command.
 403              	******************************************/
 404 314c EC300000 		_HEADER EXIT,4,"EXIT"
 404      04455849 
 404      540000BF 
 405 3158 AFE6     		b UNNEST 
 406              	
 407              	
 408              	/***********************************
 409              	    !	   ( w a -- )
 410              	 	Pop the data stack to memory.
 411              	************************************/
ARM GAS  forth.s 			page 118


 412 315a 50310000 		_HEADER STORE,1,"!"
 412      0121
 413 3160 57F8045B 		LDR	WP,[DSP],#4
 414 3164 3560     		STR	WP,[TOS]
 415 3166 57F8046B 		_POP
 416 316a A3E6     		_NEXT 
 417              	
 418              	/********************************************
 419              	    @	   ( a -- w )
 420              	 	Push memory location to the data stack.
 421              	*********************************************/
 422 316c 5E310000 		_HEADER AT,1,"@"
 422      014000BF 
 423 3174 3668     		LDR	TOS,[TOS]
 424 3176 9DE6     		_NEXT 
 425              	
 426              	/*******************************************
 427              	    C!	  ( c b -- )
 428              	 	Pop the data stack to byte memory.
 429              	*******************************************/
 430 3178 70310000 		_HEADER CSTOR,2,"C!"
 430      02432100 
 431 3180 57F8045B 		LDR	WP,[DSP],#4
 432 3184 3570     		STRB WP,[TOS]
 433 3186 57F8046B 		_POP
 434 318a 93E6     		_NEXT
 435              	
 436              	/*********************************************
 437              	    C@	  ( b -- c )
 438              	 	Push byte memory location to the data stack.
 439              	**********************************************/
 440 318c 7C310000 		_HEADER CAT,2,"C@"
 440      02434000 
 441 3194 3678     		LDRB	TOS,[TOS]
 442 3196 8DE6     		_NEXT 
 443              	
 444              	
 445              	/*********************************************
 446              	    R>	  ( -- w  R: w -- ) 
 447              	 	push from rstack.
 448              	**********************************************/
 449 3198 90310000 		_HEADER RFROM,2,"R>"
 449      02523E00 
 450 31a0 47F8046D 		_PUSH
 451 31a4 58F8046B 		LDR	TOS,[RSP],#4
 452 31a8 84E6     		_NEXT 
 453              	
 454              	/***********************************************
 455              		2R> (  -- D ) R: D --  
 456              	    push a double from rstack 
 457              	***********************************************/
 458 31aa 9C310000 		_HEADER DRFROM,3,"2R>"
 458      0332523E 
 458      00BF
 459 31b4 47F8046D 		_PUSH 
 460 31b8 58F8046B 		LDR TOS,[RSP],#4 
 461 31bc 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 119


 462 31c0 58F8046B 		LDR TOS,[RSP],#4
 463 31c4 76E6     		_NEXT 
 464              	
 465              	/************************************************
 466              	    R@	  ( -- w )
 467              	 	Copy top of return stack to the data stack.
 468              	************************************************/
 469 31c6 AE310000 		_HEADER RAT,2,"R@"
 469      02524000 
 469      00BF
 470 31d0 47F8046D 		_PUSH
 471 31d4 D8F80060 		LDR	TOS,[RSP]
 472 31d8 6CE6     		_NEXT 
 473              	
 474              	/***********************************************
 475              	    >R	  ( w -- ) R: -- w 
 476              	 	pop to rstack.
 477              	************************************************/
 478 31da CA310000 		_HEADER TOR,2,">R"
 478      023E5200 
 478      00BF
 479 31e4 48F8046D 		STR	TOS,[RSP,#-4]!
 480 31e8 57F8046B 		_POP
 481 31ec 62E6     		_NEXT
 482              	
 483              	/*********************************************
 484              		2>R ( d -- ) R: -- d 
 485              		pop a double to rstack 
 486              	*********************************************/
 487 31ee DE310000 		_HEADER DTOR,3,"2>R"
 487      03323E52 
 487      00BF
 488 31f8 48F8046D 		STR TOS,[RSP,#-4]!
 489 31fc 57F8046B 	    _POP 
 490 3200 48F8046D 		STR TOS,[RSP,#-4]!
 491 3204 57F8046B 		_POP  
 492 3208 54E6     		_NEXT 	
 493              	
 494              	
 495              	/*******************************
 496              	//	RP! ( u -- )
 497              	// initialize RPP with u 
 498              	*******************************/
 499 320a F2310000 		_HEADER RPSTOR,3,"RP!"
 499      03525021 
 499      00BF
 500 3214 B046     		MOV RSP,TOS 
 501 3216 57F8046B 		_POP  
 502 321a 4BE6     		_NEXT 
 503              	
 504              	/********************************
 505              		SP! ( u -- )
 506              	 initialize SPP with u 
 507              	********************************/
 508 321c 0E320000 		_HEADER SPSTOR,3,"SP!"
 508      03535021 
 509 3224 3746     		MOV DSP,TOS 
ARM GAS  forth.s 			page 120


 510 3226 86EA0606 		EOR TOS,TOS,TOS 
 511 322a 43E6     		_NEXT 
 512              	
 513              	/**************************************
 514              	    SP@	 ( -- a )
 515              	 	Push the current data stack pointer.
 516              	***************************************/
 517 322c 20320000 		_HEADER SPAT,3,"SP@"
 517      03535040 
 518 3234 47F8046D 		_PUSH
 519 3238 3E46     		MOV	TOS,DSP
 520 323a 3BE6     		_NEXT
 521              	
 522              	/**************************************
 523              	   RP@ ( -- a )
 524              	   push current rstack pointer 
 525              	**************************************/
 526 323c 30320000 		_HEADER RPAT,3,"RP@"
 526      03525040 
 527 3244 47F8046D 		_PUSH 
 528 3248 4646     		MOV TOS,RSP 
 529 324a 33E6     		_NEXT 
 530              	
 531              	/********************************
 532              	    DROP	( w -- )
 533              	 	Discard top stack item.
 534              	********************************/
 535 324c 40320000 		_HEADER DROP,4,"DROP"
 535      0444524F 
 535      500000BF 
 536 3258 57F8046B 		_POP
 537 325c 2AE6     		_NEXT 
 538              	
 539              	/*********************************
 540              	    DUP	 ( w -- w w )
 541              	 	Duplicate the top stack item.
 542              	*********************************/
 543 325e 50320000 		_HEADER DUPP,3,"DUP"
 543      03445550 
 543      00BF
 544 3268 47F8046D 		_PUSH
 545 326c 22E6     		_NEXT 
 546              	
 547              	/**********************************
 548              	    SWAP	( w1 w2 -- w2 w1 )
 549              	 	Exchange top two stack items.
 550              	**********************************/
 551 326e 62320000 		_HEADER SWAP,4,"SWAP"
 551      04535741 
 551      5000
 552 3278 3D68     		LDR	WP,[DSP]
 553 327a 3E60     		STR	TOS,[DSP]
 554 327c 2E46     		MOV	TOS,WP
 555 327e 19E6     		_NEXT 
 556              	
 557              	/***********************************
 558              		2SWAP ( d2 d1 -- d1 d2 )
ARM GAS  forth.s 			page 121


 559              		swap double integer 
 560              	***************************************/
 561 3280 72320000 		_HEADER DSWAP,5,"2SWAP"
 561      05325357 
 561      415000BF 
 562 328c 3046     		mov T0,TOS 
 563 328e 3968     		ldr T1,[DSP]
 564 3290 7E68     		ldr TOS,[DSP,#4]
 565 3292 BD68     		ldr WP,[DSP,#8]
 566 3294 3D60     		str WP,[DSP]
 567 3296 7860     		str T0,[DSP,#4]
 568 3298 B960     		str T1,[DSP,#8]
 569 329a 0BE6     		_NEXT 
 570              	
 571              	
 572              	/***********************************
 573              	    OVER	( w1 w2 -- w1 w2 w1 )
 574              	 	Copy second stack item to top.
 575              	***********************************/
 576 329c 84320000 		_HEADER OVER,4,"OVER"
 576      044F5645 
 576      520000BF 
 577 32a8 47F8046D 		_PUSH
 578 32ac 7E68     		LDR	TOS,[DSP,#4]
 579 32ae 01E6     		_NEXT 
 580              	
 581              	/***********************************
 582              		2OVER ( d2 d1 -- d2 d1 d2 )
 583              		copy a double integer to TOS 
 584              	**********************************************/
 585 32b0 A0320000 		_HEADER DOVER,5,"2OVER"
 585      05324F56 
 585      455200BF 
 586 32bc 7868     		ldr T0,[DSP,#4]
 587 32be BD68     		ldr WP,[DSP,#8]
 588 32c0 47F8046D 		_PUSH 
 589 32c4 2E46     		mov TOS,WP 
 590 32c6 47F8046D 		_PUSH
 591 32ca 0646     		mov TOS,T0 
 592 32cc F2E5     		_NEXT 
 593              	
 594              	
 595              	/***********************************
 596              	    0<	  ( n -- t )
 597              	 	Return true if n is negative.
 598              	***********************************/
 599 32ce B4320000 		_HEADER ZLESS,2,"0<"
 599      02303C00 
 599      00BF
 600 32d8 4FEAE676 		ASR TOS,#31
 601 32dc EAE5     		_NEXT 
 602              	
 603              	/**********************************
 604              		0> ( n -- flag )
 605              		true if n > 0 
 606              	**********************************/
 607 32de D2320000 		_HEADER ZGREAT,2,"0>"
ARM GAS  forth.s 			page 122


 607      02303E00 
 607      00BF
 608 32e8 1EB1     		CBZ TOS, 1f
 609 32ea 4FEAE676 		ASR TOS,#31 
 610 32ee 6FEA0606 		MVN TOS,TOS 
 611 32f2 DFE5     	1:	_NEXT 
 612              	
 613              	
 614              	/**********************************
 615              		0<> ( n -- flag )
 616              	    true if n <> 0
 617              	*********************************/
 618 32f4 E2320000 		_HEADER ZNEQU,3,"0<>"
 618      03303C3E 
 619 32fc 0EB1     		CBZ TOS,1f
 620 32fe 4FF0FF36 		MOV TOS,#-1
 621 3302 D7E5     	1:	_NEXT
 622              	
 623              	
 624              	/*********************************
 625              		<>  ( x1 x2 -- flag )
 626              		true fi x1 <> x2 
 627              	********************************/
 628 3304 F8320000 		_HEADER NEQU,2,"<>"
 628      023C3E00 
 629 330c 57F8040B 		LDR T0,[DSP],#CELLL 
 630 3310 4640     		EORS TOS,T0 
 631 3312 01D0     		BEQ 1f
 632 3314 4FF0FF36 		MOV TOS,#-1
 633 3318 CCE5     	1:  _NEXT 
 634              	
 635              	
 636              	/********************************
 637              	    AND	 ( w w -- w )
 638              	 	Bitwise AND.
 639              	********************************/
 640 331a 08330000 		_HEADER ANDD,3,"AND"
 640      03414E44 
 640      00BF
 641 3324 57F8045B 		LDR	WP,[DSP],#4
 642 3328 06EA0506 		AND	TOS,TOS,WP
 643 332c C2E5     		_NEXT 
 644              	
 645              	/******************************
 646              	    OR	  ( w w -- w )
 647              	 	Bitwise inclusive OR.
 648              	******************************/
 649 332e 1E330000 		_HEADER ORR,2,"OR"
 649      024F5200 
 649      00BF
 650 3338 57F8045B 		LDR	WP,[DSP],#4
 651 333c 46EA0506 		ORR	TOS,TOS,WP
 652 3340 B8E5     		_NEXT 
 653              	
 654              	/*****************************
 655              	    XOR	 ( w w -- w )
 656              	 	Bitwise exclusive OR.
ARM GAS  forth.s 			page 123


 657              	*****************************/
 658 3342 32330000 		_HEADER XORR,3,"XOR"
 658      03584F52 
 658      00BF
 659 334c 57F8045B 		LDR	WP,[DSP],#4
 660 3350 86EA0506 		EOR	TOS,TOS,WP
 661 3354 AEE5     		_NEXT 
 662              	
 663              	/**************************************************
 664              	    UM+	 ( w w -- w cy )
 665              	 	Add two numbers, return the sum and carry flag.
 666              	***************************************************/
 667 3356 46330000 		_HEADER UPLUS,3,"UM+"
 667      03554D2B 
 667      00BF
 668 3360 3D68     		LDR	WP,[DSP]
 669 3362 AD19     		ADDS	WP,WP,TOS
 670 3364 4FF00006 		MOV	TOS,#0
 671 3368 46F10006 		ADC	TOS,TOS,#0
 672 336c 3D60     		STR	WP,[DSP]
 673 336e A1E5     		_NEXT 
 674              	
 675              	/*********************************
 676              	    RSHIFT	 ( w # -- w )
 677              	 	logical Right shift # bits.
 678              	**********************************/
 679 3370 5A330000 		_HEADER RSHIFT,6,"RSHIFT"
 679      06525348 
 679      49465400 
 680 337c 57F8045B 		LDR	WP,[DSP],#4
 681 3380 25FA06F6 		MOV	TOS,WP,LSR TOS
 682 3384 96E5     		_NEXT 
 683              	
 684              	/****************************
 685              	    LSHIFT	 ( w # -- w )
 686              	 	left shift # bits.
 687              	****************************/
 688 3386 74330000 		_HEADER LSHIFT,6,"LSHIFT"
 688      064C5348 
 688      49465400 
 688      00BF
 689 3394 57F8045B 		LDR	WP,[DSP],#4
 690 3398 05FA06F6 		MOV	TOS,WP,LSL TOS
 691 339c 8AE5     		_NEXT
 692              	
 693              	/*************************
 694              	    +	 ( w w -- w )
 695              	 	Add.
 696              	*************************/
 697 339e 8A330000 		_HEADER PLUS,1,"+"
 697      012B
 698 33a4 57F8045B 		LDR	WP,[DSP],#4
 699 33a8 2E44     		ADD	TOS,TOS,WP
 700 33aa 83E5     		_NEXT 
 701              	
 702              	/************************
 703              	    -	 ( w w -- w )
ARM GAS  forth.s 			page 124


 704              	 	Subtract.
 705              	************************/
 706 33ac A2330000 		_HEADER SUBB,1,"-"
 706      012D00BF 
 707 33b4 57F8045B 		LDR	WP,[DSP],#4
 708 33b8 C6EB0506 		RSB	TOS,TOS,WP
 709 33bc 7AE5     		_NEXT 
 710              	
 711              	/************************
 712              	    *	 ( w w -- w )
 713              	 	Multiply.
 714              	***********************/
 715 33be B0330000 		_HEADER STAR,1,"*"
 715      012A
 716 33c4 57F8045B 		LDR	WP,[DSP],#4
 717 33c8 05FB06F6 		MUL	TOS,WP,TOS
 718 33cc 72E5     		_NEXT 
 719              	
 720              	/***************************
 721              	    UM*	 ( w w -- ud )
 722              	 	Unsigned multiply.
 723              	****************************/
 724 33ce C2330000 		_HEADER UMSTA,3,"UM*"
 724      03554D2A 
 724      00BF
 725 33d8 3D68     		LDR	WP,[DSP]
 726 33da A6FB0523 		UMULL	T2,T3,TOS,WP
 727 33de 3A60     		STR	T2,[DSP]
 728 33e0 1E46     		MOV	TOS,T3
 729 33e2 67E5     		_NEXT 
 730              	
 731              	/***************************
 732              	    M*	 ( w w -- d )
 733              	 	signed multiply.
 734              		hold double result
 735              	***************************/
 736 33e4 D2330000 		_HEADER MSTAR,2,"M*"
 736      024D2A00 
 737 33ec 3D68     		LDR	WP,[DSP]
 738 33ee 86FB0523 		SMULL	T2,T3,TOS,WP
 739 33f2 3A60     		STR	T2,[DSP]
 740 33f4 1E46     		MOV	TOS,T3
 741 33f6 5DE5     		_NEXT 
 742              	
 743              	/***************************
 744              	    1+	 ( w -- w+1 )
 745              	 	Add 1.
 746              	***************************/
 747 33f8 E8330000 		_HEADER ONEP,2,"1+"
 747      02312B00 
 748 3400 06F10106 		ADD	TOS,TOS,#1
 749 3404 56E5     		_NEXT 
 750              	
 751              	/***************************
 752              	    1-	 ( w -- w-1 )
 753              	 	Subtract 1.
 754              	***************************/
ARM GAS  forth.s 			page 125


 755 3406 FC330000 		_HEADER ONEM,2,"1-"
 755      02312D00 
 755      00BF
 756 3410 A6F10106 		SUB	TOS,TOS,#1
 757 3414 4EE5     		_NEXT 
 758              	
 759              	/***************************
 760              	    2+	 ( w -- w+2 )
 761              	 	Add 2.
 762              	**************************/
 763 3416 0A340000 		_HEADER TWOP,2,"2+"
 763      02322B00 
 763      00BF
 764 3420 06F10206 		ADD	TOS,TOS,#2
 765 3424 46E5     		_NEXT
 766              	
 767              	/**************************
 768              	    2-	 ( w -- w-2 )
 769              	 	Subtract 2.
 770              	**************************/
 771 3426 1A340000 		_HEADER TWOM,2,"2-"
 771      02322D00 
 771      00BF
 772 3430 A6F10206 		SUB	TOS,TOS,#2
 773 3434 3EE5     		_NEXT
 774              	
 775              	/***************************
 776              	    CELL+	( w -- w+4 )
 777              	 	Add CELLL.
 778              	***************************/
 779 3436 2A340000 		_HEADER CELLP,5,"CELL+"
 779      0543454C 
 779      4C2B
 780 3440 06F10406 		ADD	TOS,TOS,#CELLL
 781 3444 36E5     		_NEXT
 782              	
 783              	/***************************
 784              	    CELL-	( w -- w-4 )
 785              	 	Subtract CELLL.
 786              	**************************/
 787 3446 3A340000 		_HEADER CELLM,5,"CELL-"
 787      0543454C 
 787      4C2D
 788 3450 A6F10406 		SUB	TOS,TOS,#CELLL
 789 3454 2EE5     		_NEXT
 790              	
 791              	/**************************** 
 792              	    BL	( -- 32 )
 793              	 	Blank (ASCII space).
 794              	*****************************/
 795 3456 4A340000 		_HEADER BLANK,2,"BL"
 795      02424C00 
 795      00BF
 796 3460 47F8046D 		_PUSH
 797 3464 4FF02006 		MOV	TOS,#32
 798 3468 24E5     		_NEXT 
 799              	
ARM GAS  forth.s 			page 126


 800              	/**************************
 801              	    CELLS	( w -- w*4 )
 802              	 	Multiply CELLL 
 803              	***************************/
 804 346a 5A340000 		_HEADER CELLS,5,"CELLS"
 804      0543454C 
 804      4C53
 805 3474 4FEA8606 		LSL TOS,#2
 806 3478 1CE5     		_NEXT
 807              	
 808              	/***************************
 809              	    CELL/	( w -- w/4 )
 810              	 	Divide by CELLL.
 811              	***************************/
 812 347a 6E340000 		_HEADER CELLSL,5,"CELL/"
 812      0543454C 
 812      4C2F
 813 3484 4FEAA606 		ASR TOS,#2
 814 3488 14E5     		_NEXT
 815              	
 816              	/*************************
 817              	    2*	( w -- w*2 )
 818              	 	Multiply 2.
 819              	*************************/
 820 348a 7E340000 		_HEADER TWOST,2,"2*"
 820      02322A00 
 820      00BF
 821 3494 4FEA4606 		MOV	TOS,TOS,LSL#1
 822 3498 0CE5     		_NEXT
 823              	
 824              	/*************************
 825              	    2/	( w -- w/2 )
 826              	 	Divide by 2.
 827              	***********************/
 828 349a 8E340000 		_HEADER TWOSL,2,"2/"
 828      02322F00 
 828      00BF
 829 34a4 4FEA6606 		MOV	TOS,TOS,ASR#1
 830 34a8 04E5     		_NEXT
 831              	
 832              	/****************************
 833              	    ?DUP	( w -- w w | 0 )
 834              	 	Conditional duplicate.
 835              	*****************************/
 836 34aa 9E340000 		_HEADER QDUP,4,"?DUP"
 836      043F4455 
 836      5000
 837 34b4 3500     		MOVS	WP,TOS
 838 34b6 18BF     		IT NE 
 839 34b8 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 840 34bc FAE4     		_NEXT
 841              	
 842              	/***********************************
 843              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 844              	 	Rotate top 3 items.
 845              	*************************************/
 846 34be AE340000 		_HEADER ROT,3,"ROT"
ARM GAS  forth.s 			page 127


 846      03524F54 
 846      00BF
 847 34c8 3868     		LDR	T0,[DSP]  // w2 
 848 34ca 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 849 34cc 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 850 34ce 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 851 34d0 F0E4     		_NEXT
 852              	
 853              	/*********************************
 854              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 855              	 left rotate top 3 elements 
 856              	********************************/
 857 34d2 C2340000 		_HEADER NROT,4,"-ROT"
 857      042D524F 
 857      5400
 858 34dc 7868     		LDR T0,[DSP,#4]
 859 34de 7E60     		STR TOS,[DSP,#4]	
 860 34e0 3E68     		LDR TOS,[DSP]
 861 34e2 3860     		STR T0,[DSP]
 862 34e4 E6E4     		_NEXT 
 863              	
 864              	/*********************************
 865              	    2DROP	( w1 w2 -- )
 866              	 	Drop top 2 items.
 867              	*********************************/
 868 34e6 D6340000 		_HEADER DDROP,5,"2DROP"
 868      05324452 
 868      4F50
 869 34f0 57F8046B 		_POP
 870 34f4 57F8046B 		_POP
 871 34f8 DCE4     		_NEXT 
 872              	
 873              	/********************************
 874              		3DROP ( w1 w2 w3 -- )
 875              		drop top 3 items 
 876              	********************************/
 877 34fa EA340000 		_HEADER TDROP,5,"3DROP"
 877      05334452 
 877      4F50
 878 3504 07F10807 	    add DSP,#8 
 879 3508 57F8046B 	    _POP 
 880 350c D2E4     	    _NEXT 
 881              	
 882              	/***********************************
 883              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 884              	 	Duplicate top 2 items.
 885              	************************************/
 886 350e FE340000 		_HEADER DDUP,4,"2DUP"
 886      04324455 
 886      5000
 887 3518 3868     		LDR	T0,[DSP] // w1
 888 351a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 889 351e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 890 3522 C7E4     		_NEXT
 891              	
 892              	/******************************
 893              	    D+	( d1 d2 -- d3 )
ARM GAS  forth.s 			page 128


 894              	 	Add top 2 double numbers.
 895              	******************************/
 896 3524 12350000 		_HEADER DPLUS,2,"D+"
 896      02442B00 
 897 352c 57F8045B 		LDR	WP,[DSP],#4
 898 3530 57F8042B 		LDR	T2,[DSP],#4
 899 3534 3B68     		LDR	T3,[DSP]
 900 3536 ED18     		ADDS	WP,WP,T3
 901 3538 3D60     		STR	WP,[DSP]
 902 353a 46EB0206 		ADC	TOS,TOS,T2
 903 353e B9E4     		_NEXT
 904              	
 905              	/******************************
 906              		DABS ( d -- ud )
 907              		absolute value double 
 908              	*****************************/
 909 3540 28350000 		_HEADER DABS,4,"DABS"
 909      04444142 
 909      530000BF 
 910 354c 16F0004F 		tst TOS,#(1<<31)
 911 3550 09D0     		beq 9f 
 912 3552 6FEA0606 		mvn TOS,TOS 
 913 3556 3D68     		ldr WP,[DSP]
 914 3558 6FEA0505 		mvn WP,WP 
 915 355c 0135     		adds WP,#1
 916 355e 3D60     		str WP,[DSP]
 917 3560 01D3     		bcc 9f 
 918 3562 06F10106 		add TOS,#1 
 919 3566 A5E4     	9:	_NEXT 
 920              	
 921              	/*****************************
 922              	  UD> ( d1 d2 -- f )
 923              	  unsigned compare double d1 > d2 
 924              	******************************/
 925 3568 44350000 		_HEADER UDGREAT,3,"UD>"
 925      0355443E 
 926 3570 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 927 3574 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 928 3576 B042     		cmp T0,TOS 
 929 3578 02D8     		bhi 1f
 930 357a 04D4     		bmi 2f  
 931 357c A942     		cmp T1,WP 
 932 357e 02D9     		bls 2f 
 933 3580 4FF0FF36 	1:	mov TOS,#-1 
 934 3584 96E4     		_NEXT 
 935 3586 4FF00006 	2:  mov TOS,#0 
 936 358a 93E4     		_NEXT 
 937              	
 938              	/******************************
 939              		D0= ( d -- f )
 940              		double 0= 
 941              	*****************************/
 942 358c 6C350000 		_HEADER DZEQUAL,3,"D0="
 942      0344303D 
 943 3594 3046     		mov T0,TOS
 944 3596 57F8046B 		_POP 
 945 359a 46EA0006 		orr TOS,T0 
ARM GAS  forth.s 			page 129


 946 359e 01D0     		beq 9f
 947 35a0 6FF00006 		mvn TOS,#0 
 948 35a4 86E4     	9:	_NEXT 
 949              	
 950              	/*****************************
 951              	    INVERT	 ( w -- !w )
 952              	 	1"s complement.
 953              	*****************************/
 954 35a6 90350000 		_HEADER INVER,6,"INVERT"
 954      06494E56 
 954      45525400 
 954      00BF
 955 35b4 6FEA0606 		MVN	TOS,TOS
 956 35b8 7CE4     		_NEXT
 957              	
 958              	/*****************************
 959              	    NEGATE	( w -- -w )
 960              	 	2's complement.
 961              	***************************/
 962 35ba AA350000 		_HEADER NEGAT,6,"NEGATE"
 962      064E4547 
 962      41544500 
 962      00BF
 963 35c8 C6F10006 		RSB	TOS,TOS,#0
 964 35cc 72E4     		_NEXT
 965              	
 966              	/***************************
 967              	    ABS	 ( w -- |w| )
 968              	 	Absolute.
 969              	**************************/
 970 35ce BE350000 		_HEADER ABSS,3,"ABS"
 970      03414253 
 970      00BF
 971 35d8 16F0004F 		TST	TOS,#0x80000000
 972 35dc 18BF     		IT NE
 973 35de 7642     	    RSBNE   TOS,TOS,#0
 974 35e0 68E4     		_NEXT
 975              	
 976              	/**************************
 977              		CLZ ( n - n )
 978              		count leading zeros 
 979              	**************************/
 980 35e2 D2350000 		_HEADER CLZ,3,"CLZ"
 980      03434C5A 
 980      00BF
 981 35ec B6FA86F6 		clz TOS,TOS 
 982 35f0 60E4     		_NEXT 
 983              	
 984              	/*************************
 985              		CTZ ( n -- n )
 986              		count trailing zeros 
 987              	************************/
 988 35f2 E6350000 		_HEADER CTZ,3,"CTZ"
 988      0343545A 
 988      00BF
 989 35fc 80EA0000 		eor T0,T0 
 990 3600 16F0010F 	1:  tst TOS,#1 
ARM GAS  forth.s 			page 130


 991 3604 04D1     		bne 2f 
 992 3606 4FEA5606 		lsr TOS,#1 
 993 360a 00F10100 		add T0,#1 
 994 360e F7E7     		b 1b 
 995 3610 0646     	2:  mov TOS,T0 
 996 3612 4FE4     		_NEXT 
 997              	
 998              	
 999              	/*******************
 1000              	  0= ( w -- f )
 1001              	 TOS==0?
 1002              	*******************/
 1003 3614 F6350000 		_HEADER ZEQUAL,2,"0="
 1003      02303D00 
 1004 361c 16B9     		cbnz TOS,1f
 1005 361e 4FF0FF36 		mov TOS,#-1
 1006 3622 47E4     		_NEXT 
 1007 3624 86EA0606 	1:  eor TOS,TOS,TOS  
 1008 3628 44E4     		_NEXT 	
 1009              	
 1010              	/*********************
 1011              	    =	 ( w w -- t )
 1012              	 	Equal?
 1013              	*********************/
 1014 362a 18360000 		_HEADER EQUAL,1,"="
 1014      013D
 1015 3630 57F8045B 		LDR	WP,[DSP],#4
 1016 3634 AE42     		CMP	TOS,WP
 1017 3636 0CBF     		ITE EQ 
 1018 3638 6FF00006 	    MVNEQ	TOS,#0
 1019 363c 0026     		MOVNE	TOS,#0
 1020 363e 39E4     		_NEXT
 1021              	
 1022              	/************************
 1023              		<> ( w w -- f )
 1024              		different?
 1025              	************************/
 1026 3640 2E360000 		_HEADER DIFF,2,"<>"
 1026      023C3E00 
 1027 3648 3046     		mov T0,TOS 
 1028 364a 57F8046B 		_POP 
 1029 364e 86EA0006 		eor TOS,T0
 1030 3652 B6FA86F0 		clz T0,TOS 
 1031 3656 06FA00F6 		lsl TOS,T0 
 1032 365a 4FEAE676 		asr TOS,#31 
 1033 365e 29E4     		_NEXT 
 1034              	
 1035              	/************************
 1036              	    U<	 ( w w -- t )
 1037              	 	Unsigned less?
 1038              	*************************/
 1039 3660 44360000 		_HEADER ULESS,2,"U<"
 1039      02553C00 
 1040 3668 57F8045B 		LDR	WP,[DSP],#4
 1041 366c B542     		CMP	WP,TOS
 1042 366e 34BF     		ITE CC 
 1043 3670 6FF00006 		MVNCC	TOS,#0
ARM GAS  forth.s 			page 131


 1044 3674 0026     		MOVCS	TOS,#0
 1045 3676 1DE4     		_NEXT
 1046              	
 1047              	/**********************
 1048              	    <	( w w -- t )
 1049              	 	Less?
 1050              	**********************/
 1051 3678 64360000 		_HEADER LESS,1,"<"
 1051      013C00BF 
 1052 3680 57F8045B 		LDR	WP,[DSP],#4
 1053 3684 B542     		CMP	WP,TOS
 1054 3686 B4BF     	    ITE LT
 1055 3688 6FF00006 		MVNLT	TOS,#0
 1056 368c 0026     		MOVGE	TOS,#0
 1057 368e 11E4     		_NEXT 
 1058              	
 1059              	/**********************
 1060              		U> ( u u -- t|f )
 1061              	    unsigned greater 
 1062              	**********************/
 1063 3690 7C360000 		_HEADER UGREAT,2,"U>"
 1063      02553E00 
 1064 3698 57F8045B 		LDR WP,[DSP],#4 
 1065 369c AE42     		CMP TOS,WP 
 1066 369e 34BF     		ITE CC  
 1067 36a0 6FF00006 		MVNCC TOS,#0 
 1068 36a4 0026     		MOVCS TOS,#0
 1069 36a6 05E4     		_NEXT 
 1070              	
 1071              	/***********************
 1072              	    >	( w w -- t )
 1073              	 	greater?
 1074              	***********************/
 1075 36a8 94360000 		_HEADER GREAT,1,">"
 1075      013E00BF 
 1076 36b0 57F8045B 		LDR	WP,[DSP],#4
 1077 36b4 B542     		CMP	WP,TOS
 1078 36b6 CCBF     		ITE GT
 1079 36b8 6FF00006 	    MVNGT	TOS,#0
 1080 36bc 0026     		MOVLE	TOS,#0
 1081 36be FFF7F9BB 		_NEXT
 1082              	
 1083              	/***************************
 1084              	    MAX	 ( w w -- max )
 1085              	 	Leave maximum.
 1086              	***************************/
 1087 36c2 AC360000 		_HEADER MAX,3,"MAX"
 1087      034D4158 
 1087      00BF
 1088 36cc 57F8045B 		LDR	WP,[DSP],#4
 1089 36d0 B542     		CMP	WP,TOS
 1090 36d2 C8BF     		IT GT 
 1091 36d4 2E46     		MOVGT	TOS,WP
 1092 36d6 FFF7EDBB 		_NEXT 
 1093              	
 1094              	/**************************
 1095              	    MIN	 ( w w -- min )
ARM GAS  forth.s 			page 132


 1096              	 	Leave minimum.
 1097              	**************************/
 1098 36da C6360000 		_HEADER MIN,3,"MIN"
 1098      034D494E 
 1098      00BF
 1099 36e4 57F8045B 		LDR	WP,[DSP],#4
 1100 36e8 B542     		CMP	WP,TOS
 1101 36ea B8BF     		IT LT
 1102 36ec 2E46     		MOVLT	TOS,WP
 1103 36ee FFF7E1BB 		_NEXT
 1104              	
 1105              	/***********************
 1106              	    +!	 ( w a -- )
 1107              	 	Add to memory.
 1108              	***********************/
 1109 36f2 DE360000 		_HEADER PSTOR,2,"+!"
 1109      022B2100 
 1109      00BF
 1110 36fc 57F8045B 		LDR	WP,[DSP],#4
 1111 3700 3268     		LDR	T2,[TOS]
 1112 3702 2A44     		ADD	T2,T2,WP
 1113 3704 3260     		STR	T2,[TOS]
 1114 3706 57F8046B 		_POP
 1115 370a FFF7D3BB 		_NEXT
 1116              	
 1117              	/************************
 1118              	    2!	 ( d a -- )
 1119              	 	Store double number.
 1120              	*************************/
 1121 370e F6360000 		_HEADER DSTOR,2,"2!"
 1121      02322100 
 1121      00BF
 1122 3718 57F8045B 		LDR	WP,[DSP],#4
 1123 371c 57F8042B 		LDR	T2,[DSP],#4
 1124 3720 46F8045B 		STR	WP,[TOS],#4
 1125 3724 3260     		STR	T2,[TOS]
 1126 3726 57F8046B 		_POP
 1127 372a FFF7C3BB 		_NEXT
 1128              	
 1129              	/************************
 1130              	    2@	 ( a -- d )
 1131              	 	Fetch double number.
 1132              	************************/
 1133 372e 12370000 		_HEADER DAT,2,"2@"
 1133      02324000 
 1133      00BF
 1134 3738 7568     		LDR	WP,[TOS,#4]
 1135 373a 47F8045D 		STR	WP,[DSP,#-4]!
 1136 373e 3668     		LDR	TOS,[TOS]
 1137 3740 FFF7B8BB 		_NEXT
 1138              	
 1139              	/***************************
 1140              	    COUNT	( b -- b+1 c )
 1141              	 	Fetch length of string.
 1142              	****************************/
 1143 3744 32370000 		_HEADER COUNT,5,"COUNT"
 1143      05434F55 
ARM GAS  forth.s 			page 133


 1143      4E5400BF 
 1144 3750 16F8015B 		LDRB	WP,[TOS],#1
 1145 3754 47F8046D 		_PUSH
 1146 3758 2E46     		MOV	TOS,WP
 1147 375a FFF7ABBB 		_NEXT
 1148              	
 1149              	/******************************
 1150              	    DNEGATE	( d -- -d )
 1151              	 	Negate double number.
 1152              	**************************/
 1153 375e 48370000 		_HEADER DNEGA,7,"DNEGATE"
 1153      07444E45 
 1153      47415445 
 1153      00BF
 1154 376c 3D68     		LDR	WP,[DSP]
 1155 376e A2EB0202 		SUB	T2,T2,T2
 1156 3772 551B     		SUBS WP,T2,WP
 1157 3774 62EB0606 		SBC	TOS,T2,TOS
 1158 3778 3D60     		STR	WP,[DSP]
 1159 377a FFF79BBB 		_NEXT
 1160              	
 1161              	/******************************
 1162              	  System and user variables
 1163              	******************************/
 1164              	
 1165              	/*******************************
 1166              	  doVAR	( -- a )
 1167              	  Run time routine for VARIABLE and CREATE.
 1168              	hidden word used by compiler
 1169              	********************************/
 1170              	DOVAR:
 1171 377e 47F8046D 		_PUSH
 1172 3782 6646     		MOV TOS,IP
 1173 3784 0CF1040C 		ADD IP,IP,#4 
 1174 3788 FFF797BB 		B UNNEST 
 1175              	
 1176              	/**********************************
 1177              	    doCON	( -- a ) 
 1178              	 	Run time routine for CONSTANT.
 1179              	hidden word used by compiler 
 1180              	***********************************/
 1181              	DOCON:
 1182 378c 47F8046D 		_PUSH
 1183 3790 5CF8046B 		LDR.W TOS,[IP],#4 
 1184 3794 FFF791BB 		B UNNEST 
 1185              	
 1186              	/***********************
 1187              	  system variables 
 1188              	***********************/
 1189              	
 1190              	/***********************
 1191              		STATE ( -- a )
 1192              		compilation state 
 1193              		0 -> interpret
 1194              		-1 -> compile 
 1195              	************************/
 1196 3798 62370000 		_HEADER STATE,5,"STATE"
ARM GAS  forth.s 			page 134


 1196      05535441 
 1196      544500BF 
 1197 37a4 47F8046D 		_PUSH 
 1198 37a8 04F1B406 		ADD TOS,UP,#CSTATE 
 1199 37ac FFF782BB 		_NEXT 
 1200              	
 1201              	/**************************
 1202              	 SEED ( -- a)
 1203              	 return PRNG seed address 
 1204              	**************************/
 1205 37b0 9C370000 		_HEADER SEED,4,"SEED"
 1205      04534545 
 1205      440000BF 
 1206 37bc 47F8046D 		_PUSH 
 1207 37c0 04F10406 		ADD TOS,UP,#RNDSEED
 1208 37c4 FFF776BB 		_NEXT 	
 1209              	
 1210              	/****************************************
 1211              	  MSEC ( -- a)
 1212              	 return address of milliseconds counter
 1213              	****************************************/
 1214 37c8 B4370000 		_HEADER MSEC,4,"MSEC"
 1214      044D5345 
 1214      430000BF 
 1215 37d4 47F8046D 	    _PUSH
 1216 37d8 04F10806 	    ADD TOS,UP,#TICKS
 1217 37dc FFF76ABB 	    _NEXT 
 1218              	
 1219              	/*************************
 1220              	 TIMER ( -- a )
 1221              	 count down timer 
 1222              	**********************/
 1223 37e0 CC370000 		_HEADER TIMER,5,"TIMER"
 1223      0554494D 
 1223      455200BF 
 1224 37ec 47F8046D 		 _PUSH 
 1225 37f0 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1226 37f4 FFF75EBB 	    _NEXT
 1227              	
 1228              	/*****************************
 1229              	    'BOOT	 ( -- a )
 1230              	 	boot up application vector 
 1231              	*****************************/
 1232 37f8 E4370000 		_HEADER TBOOT,5,"'BOOT"
 1232      0527424F 
 1232      4F5400BF 
 1233 3804 47F8046D 		_PUSH
 1234 3808 04F11006 		ADD	TOS,UP,#BOOT 
 1235 380c FFF752BB 		_NEXT
 1236              		
 1237              	/********************************************	
 1238              	    BASE	( -- a )
 1239              	 	Storage of the radix base for numeric I/O.
 1240              	**********************************************/
 1241 3810 FC370000 		_HEADER BASE,4,"BASE"
 1241      04424153 
 1241      450000BF 
ARM GAS  forth.s 			page 135


 1242 381c 47F8046D 		_PUSH
 1243 3820 04F11C06 		ADD	TOS,UP,#NBASE
 1244 3824 FFF746BB 		_NEXT
 1245              	
 1246              	/***********************************************
 1247              		BCHAR ( -- flag )
 1248              		boolean variable
 1249              		if set base char include in convertion 
 1250              		of integer to string.  
 1251              	************************************************/
 1252 3828 14380000 			_HEADER BCHR,5,"BCHAR"
 1252      05424348 
 1252      415200BF 
 1253 3834 47F8046D 			_PUSH 
 1254 3838 04F12006 			ADD TOS,UP,#BCHAR 
 1255 383c FFF73ABB 			_NEXT 
 1256              	
 1257              	/*****************************************************
 1258              	    temp	 ( -- a )
 1259              	 	A temporary storage location used in parse and find.
 1260              	hidden word for internal use
 1261              	********************************************************/
 1262              	TEMP:
 1263 3840 47F8046D 		_PUSH
 1264 3844 04F12406 		ADD	TOS,UP,#TMP
 1265 3848 FFF734BB 		_NEXT
 1266              	
 1267              	/*******************************************
 1268              	    SPAN	( -- a )
 1269              	 	Hold character count received by EXPECT.
 1270              	********************************************/
 1271 384c 2C380000 		_HEADER SPAN,4,"SPAN"
 1271      04535041 
 1271      4E0000BF 
 1272 3858 47F8046D 		_PUSH
 1273 385c 04F12806 		ADD	TOS,UP,#CSPAN
 1274 3860 FFF728BB 		_NEXT
 1275              	
 1276              	/***********************************************************
 1277              	    >IN	 ( -- a )
 1278              	 	Hold the character pointer while parsing input stream.
 1279              	***********************************************************/
 1280 3864 50380000 		_HEADER INN,3,">IN"
 1280      033E494E 
 1281 386c 47F8046D 		_PUSH
 1282 3870 04F12C06 		ADD	TOS,UP,#TOIN
 1283 3874 FFF71EBB 		_NEXT
 1284              	
 1285              	/**************************************
 1286              	    #TIB	( -- a )
 1287              	 	Hold the current count and address 
 1288              		of the terminal input buffer.
 1289              	**************************************/
 1290 3878 68380000 		_HEADER NTIB,4,"#TIB"
 1290      04235449 
 1290      420000BF 
 1291 3884 47F8046D 		_PUSH
ARM GAS  forth.s 			page 136


 1292 3888 04F13006 		ADD	TOS,UP,#NTIBB
 1293 388c FFF712BB 		_NEXT
 1294              	
 1295              	/******************************
 1296              	    'EVAL	( -- a )
 1297              	 	Execution vector of EVAL.
 1298              	*******************************/
 1299 3890 7C380000 		_HEADER TEVAL,5,"'EVAL"
 1299      05274556 
 1299      414C00BF 
 1300 389c 47F8046D 		_PUSH
 1301 38a0 04F13C06 		ADD	TOS,UP,#EVAL
 1302 38a4 FFF706BB 		_NEXT
 1303              	
 1304              	/*********************************
 1305              	    HLD	 ( -- a )
 1306              	 	Hold a pointer in building a 
 1307              		numeric output string.
 1308              	*********************************/
 1309 38a8 94380000 		_HEADER HLD,3,"HLD"
 1309      03484C44 
 1310 38b0 47F8046D 		_PUSH
 1311 38b4 04F14006 		ADD	TOS,UP,#VHOLD
 1312 38b8 FFF7FCBA 		_NEXT
 1313              	
 1314              	/**********************************
 1315              	    CONTEXT	( -- a )
 1316              	 	A area to specify vocabulary 
 1317              		search order.
 1318              	**********************************/
 1319 38bc AC380000 		_HEADER CNTXT,7,"CONTEXT"
 1319      07434F4E 
 1319      54455854 
 1320              	CRRNT:
 1321 38c8 47F8046D 		_PUSH
 1322 38cc 04F14406 		ADD	TOS,UP,#CTXT
 1323 38d0 FFF7F0BA 		_NEXT
 1324              	
 1325              	/******************************
 1326              	    CP	( -- a )
 1327              	 	Point to top free area  
 1328              		in user RAM. 
 1329              	******************************/
 1330 38d4 C0380000 		_HEADER CPP,2,"CP"
 1330      02435000 
 1331 38dc 47F8046D 		_PUSH
 1332 38e0 04F14C06 		ADD	TOS,UP,#USER_CTOP
 1333 38e4 FFF7E6BA 		_NEXT
 1334              	
 1335              	/****************************
 1336              	   FCP ( -- a )
 1337              	  Point ot top of Forth 
 1338              	  system dictionary
 1339              	****************************/
 1340 38e8 D8380000 		_HEADER FCP,3,"FCP"
 1340      03464350 
 1341 38f0 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 137


 1342 38f4 04F14806 		ADD TOS,UP,#FORTH_CTOP 
 1343 38f8 FFF7DCBA 		_NEXT 
 1344              	
 1345              	/***************************
 1346              	    LAST	( -- a )
 1347              	 	Point to the last name 
 1348              		in the dictionary.
 1349              	***************************/
 1350 38fc EC380000 		_HEADER LAST,4,"LAST"
 1350      044C4153 
 1350      540000BF 
 1351 3908 47F8046D 		_PUSH
 1352 390c 04F15006 		ADD	TOS,UP,#LASTN
 1353 3910 FFF7D0BA 		_NEXT
 1354              	
 1355              	
 1356              	/***********************
 1357              		system constants 
 1358              	***********************/
 1359              	
 1360              	/********************************
 1361              		USER-BEGIN ( -- a )
 1362              	  where user area begin in RAM
 1363              	********************************/
 1364 3914 00390000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1364      0A555345 
 1364      522D4245 
 1364      47494E00 
 1365 3924 47F8046D 		_PUSH 
 1366 3928 DFF80460 		ldr TOS,USR_BGN_ADR 
 1367 392c FFF7C2BA 		_NEXT 
 1368              	USR_BGN_ADR:
 1369 3930 12050020 	.word  DTOP 
 1370              	
 1371              	/*********************************
 1372              	  USER_END ( -- a )
 1373              	  where user area end in RAM 
 1374              	******************************/
 1375 3934 18390000 		_HEADER USER_END,8,"USER-END"
 1375      08555345 
 1375      522D454E 
 1375      440000BF 
 1376 3944 47F8046D 		_PUSH 
 1377 3948 DFF80460 		ldr TOS,USER_END_ADR 
 1378 394c FFF7B2BA 		_NEXT 
 1379              	USER_END_ADR:
 1380 3950 2C810120 		.word DEND 
 1381              	
 1382              	/********************************
 1383              		MAX-INT ( -- n+ )
 1384              		maximum integer 
 1385              	*******************************/
 1386 3954 38390000 		_HEADER MAXINT,7,"MAX-INT"
 1386      074D4158 
 1386      2D494E54 
 1387 3960 47F8046D 		_PUSH 
 1388 3964 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
ARM GAS  forth.s 			page 138


 1388      C7F6FF76 
 1389 396c FFF7A2BA 		_NEXT 
 1390              	
 1391              	/******************************
 1392              		MIN-INT ( -- n- )
 1393              		minimum integer 
 1394              	******************************/
 1395 3970 58390000 		_HEADER MININT,7,"MIN-INT"
 1395      074D494E 
 1395      2D494E54 
 1396 397c 47F8046D 		_PUSH 
 1397 3980 4FF00006 		_MOV32 TOS, 0x80000000
 1397      C8F20006 
 1398 3988 FFF794BA 		_NEXT 
 1399              	
 1400              	/******************************
 1401              		MAX-UINT ( -- u )
 1402              		maximum unsigned integer 
 1403              	******************************/
 1404 398c 74390000 		_HEADER MAXUINT,8,"MAX-UINT"
 1404      084D4158 
 1404      2D55494E 
 1404      540000BF 
 1405 399c 47F8046D 		_PUSH
 1406 39a0 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1406      CFF6FF76 
 1407 39a8 FFF784BA 		_NEXT 
 1408              	
 1409              	
 1410              	/* *********************
 1411              	  Common functions
 1412              	***********************/
 1413              	
 1414              	/********************************
 1415              	    WITHIN	( u ul uh -- t )
 1416              	 	Return true if u is within 
 1417              		the range of ul and uh.
 1418              	********************************/
 1419 39ac 90390000 		_HEADER WITHI,6,"WITHIN"
 1419      06574954 
 1419      48494E00 
 1420 39b8 504700BF 		_NEST
 1421 39bc A9320000 		_ADR	OVER
 1422 39c0 B5330000 		_ADR	SUBB
 1423 39c4 E5310000 		_ADR	TOR
 1424 39c8 B5330000 		_ADR	SUBB
 1425 39cc A1310000 		_ADR	RFROM
 1426 39d0 69360000 		_ADR	ULESS
 1427 39d4 BB2E0000 		_UNNEST
 1428              	
 1429              	//  Divide
 1430              	
 1431              	/*************************************
 1432              	    UM/MOD	( udl udh u -- ur uq )
 1433              	 	Unsigned divide of a double by a 
 1434              		single. Return mod and quotient.
 1435              	**************************************/
ARM GAS  forth.s 			page 139


 1436 39d8 B0390000 		_HEADER UMMOD,6,"UM/MOD"
 1436      06554D2F 
 1436      4D4F4400 
 1437 39e4 4FF00103 		MOV	T3,#1
 1438 39e8 57F8045B 		LDR	WP,[DSP],#4
 1439 39ec 3A68     		LDR	T2,[DSP]
 1440              	UMMOD0:
 1441 39ee 9218     		ADDS	T2,T2,T2
 1442 39f0 6D41     		ADCS	WP,WP,WP
 1443 39f2 04D3     		BCC	UMMOD1
 1444 39f4 A5EB0605 		SUB	WP,WP,TOS
 1445 39f8 02F10102 		ADD	T2,T2,#1
 1446 39fc 04E0     		B UMMOD2
 1447              	UMMOD1:
 1448 39fe AD1B     		SUBS	WP,WP,TOS 
 1449 3a00 28BF     		IT CS 
 1450 3a02 0132     		ADDCS	T2,T2,#1
 1451 3a04 00D2     		BCS	UMMOD2
 1452 3a06 3544     		ADD	WP,WP,TOS
 1453              	UMMOD2:
 1454 3a08 DB18     		ADDS	T3,T3,T3
 1455 3a0a F0D3     		BCC	UMMOD0
 1456 3a0c 1646     		MOV	TOS,T2
 1457 3a0e 3D60     		STR	WP,[DSP]
 1458 3a10 FFF750BA 		_NEXT
 1459              	
 1460              	/****************************
 1461              	    FM/MOD	( d n -- r q )
 1462              	 	Signed floored divide 
 1463              		of double by single. 
 1464              		Return mod and quotient.
 1465              	****************************/
 1466 3a14 DC390000 		_HEADER MSMOD,6,"FM/MOD"
 1466      06464D2F 
 1466      4D4F4400 
 1467 3a20 504700BF 		_NEST
 1468 3a24 69320000 		_ADR	DUPP
 1469 3a28 D9320000 		_ADR	ZLESS
 1470 3a2c 69320000 		_ADR	DUPP
 1471 3a30 E5310000 		_ADR	TOR
 1472 3a34 1F310000 		_QBRAN MMOD1
 1472      4C3A0000 
 1473 3a3c C9350000 		_ADR	NEGAT
 1474 3a40 E5310000 		_ADR	TOR
 1475 3a44 6D370000 		_ADR	DNEGA
 1476 3a48 A1310000 		_ADR	RFROM
 1477              	MMOD1:
 1478 3a4c E5310000 		_ADR	TOR
 1479 3a50 69320000 		_ADR	DUPP
 1480 3a54 D9320000 		_ADR	ZLESS
 1481 3a58 1F310000 		_QBRAN MMOD2
 1481      683A0000 
 1482 3a60 D1310000 		_ADR	RAT
 1483 3a64 A5330000 		_ADR	PLUS
 1484              	MMOD2:
 1485 3a68 A1310000 		_ADR	RFROM
 1486 3a6c E5390000 		_ADR	UMMOD
ARM GAS  forth.s 			page 140


 1487 3a70 A1310000 		_ADR	RFROM
 1488 3a74 1F310000 		_QBRAN	MMOD3
 1488      883A0000 
 1489 3a7c 79320000 		_ADR	SWAP
 1490 3a80 C9350000 		_ADR	NEGAT
 1491 3a84 79320000 		_ADR	SWAP
 1492              	MMOD3:   
 1493 3a88 BB2E0000 		_UNNEST
 1494              	
 1495              	/****************************
 1496              		SM/REM (d n1 -- n2 n3 )
 1497              	    symetric signed division 
 1498              		double by single 
 1499              	input:
 1500              		d   signed double 
 1501              		n1  signed single 
 1502              	output: 
 1503              		n2  signed remainder 
 1504              		n3  signed quotient 
 1505              	****************************/
 1506 3a8c 183A0000 		_HEADER SMSLSHREM,6,"SM/REM"
 1506      06534D2F 
 1506      52454D00 
 1507 3a98 504700BF 		_NEST 
 1508 3a9c 69320000 		_ADR DUPP 
 1509 3aa0 D9320000 		_ADR ZLESS 
 1510 3aa4 69320000 		_ADR DUPP 
 1511 3aa8 E5310000 		_ADR TOR   // divisor sign 
 1512 3aac 1F310000 		_QBRAN 1f 
 1512      B83A0000 
 1513 3ab4 C9350000 		_ADR NEGAT 
 1514 3ab8 A9320000 	1:  _ADR OVER 
 1515 3abc D9320000 		_ADR ZLESS 
 1516 3ac0 69320000 		_ADR DUPP 
 1517 3ac4 E5310000 		_ADR TOR  // divident sign 
 1518 3ac8 1F310000 		_QBRAN  1f 
 1518      DC3A0000 
 1519 3ad0 E5310000 		_ADR TOR 
 1520 3ad4 6D370000 		_ADR DNEGA
 1521 3ad8 A1310000 		_ADR RFROM 
 1522 3adc E5390000 	1:  _ADR UMMOD  // rem quot  
 1523 3ae0 A1310000 		_ADR RFROM 
 1524 3ae4 D1310000 		_ADR RAT 
 1525 3ae8 4D330000 		_ADR XORR
 1526 3aec 1F310000 		_QBRAN 1f
 1526      F83A0000 
 1527 3af4 C9350000 		_ADR NEGAT 
 1528 3af8 69320000 	1:  _ADR DUPP 
 1529 3afc D9320000 		_ADR ZLESS 
 1530 3b00 A1310000 		_ADR RFROM 
 1531 3b04 4D330000 		_ADR XORR 
 1532 3b08 1F310000 		_QBRAN 1f 
 1532      1C3B0000 
 1533 3b10 79320000 		_ADR SWAP 
 1534 3b14 C9350000 		_ADR NEGAT 
 1535 3b18 79320000 	    _ADR SWAP 
 1536 3b1c BB2E0000 	1:  _UNNEST 
ARM GAS  forth.s 			page 141


 1537              	
 1538              	
 1539              	/****************************
 1540              		S>D ( n -- d )
 1541              		convert single to double 
 1542              	*****************************/
 1543 3b20 903A0000 		_HEADER STOD,3,"S>D"
 1543      03533E44 
 1544 3b28 47F8046D 		_PUSH 
 1545 3b2c 4FEAE676 		ASR TOS,#31
 1546 3b30 FFF7C0B9 		_NEXT 
 1547              	
 1548              	/****************************
 1549              		D2* ( d -- d<<1 )
 1550              		double * 2 
 1551              	***************************/
 1552 3b34 243B0000 		_HEADER D2STAR,3,"D2*"
 1552      0344322A 
 1553 3b3c 3868     		ldr T0,[DSP]
 1554 3b3e 4000     		lsls T0,#1
 1555 3b40 3860     		str T0,[DSP]
 1556 3b42 4FEA4606 		lsl TOS,#1
 1557 3b46 46F10006 		adc TOS,#0
 1558 3b4a FFF7B3B9 		_NEXT 
 1559              	
 1560              	/****************************
 1561              		D2/  ( d -- d>>1 )
 1562              		double signed divide by 2 
 1563              	*****************************/
 1564 3b4e 383B0000 		_HEADER D2SL,3,"D2/"
 1564      0344322F 
 1564      00BF
 1565 3b58 3868     		ldr T0,[DSP]
 1566 3b5a 7610     		asrs TOS,#1
 1567 3b5c 4FEA3000 		rrx T0,T0 
 1568 3b60 3860     		str T0,[DSP]
 1569 3b62 FFF7A7B9 		_NEXT 
 1570              	
 1571              	/***************************
 1572              		D/MOD  ( d+ n+ - r+ qd+ )
 1573              		unsigned double division
 1574              		and modulo 
 1575              		output:
 1576              			qd+ = d+ / n+
 1577              			r+ = qd+ - (d+ * n+ )
 1578              	***************************/
 1579 3b66 523B0000 		_HEADER DSLMOD,5,"D/MOD"
 1579      05442F4D 
 1579      4F44
 1580 3b70 3D68     		ldr WP,[DSP]  // d+ high 
 1581 3b72 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1582 3b74 4FF02002 		mov T2,#32 // shift counter  
 1583 3b78 81EA0101 		eor T1,T1 // quotient T0:T1  
 1584 3b7c 25B9     		cbnz WP,1f    
 1585 3b7e 82EA0202 		eor T2,T2 // nos shifting required 
 1586 3b82 0546     		mov WP,T0 
 1587 3b84 80EA0000 		eor T0,T0 
ARM GAS  forth.s 			page 142


 1588 3b88 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1589 3b8a 15F0004F 	    tst WP,#(1<<31) 
 1590 3b8e 06D1     		bne 2f
 1591 3b90 4918     		adds T1,T1,T1 
 1592 3b92 4041     		adcs T0,T0,T0 
 1593 3b94 45EB0505 		adc WP,WP,WP 
 1594 3b98 A2F10102 		sub T2,#1 
 1595 3b9c F4E7     		b 1b 
 1596 3b9e B5FBF6F3 	2:  udiv T3,WP,TOS
 1597 3ba2 41EA0301 		orr T1,T3   // append partial quotient 
 1598 3ba6 06FB03F3 		mul T3,TOS
 1599 3baa A5EB0305 		sub WP,T3 //remainder 
 1600 3bae 02B1     		cbz T2,8f 
 1601 3bb0 EAE7     		b 1b 
 1602 3bb2 7D60     	8:	str WP,[DSP,#4] // remainder 
 1603 3bb4 3960     		str T1,[DSP]  // q lo 
 1604 3bb6 0646     		mov TOS,T0  // q hi 		
 1605 3bb8 FFF77CB9 		_NEXT 
 1606              	
 1607              	
 1608              	/****************************
 1609              		D/  ( ud u -- udq )
 1610              		divide unsigned double 
 1611              		by unsigned single 
 1612              		return double quotient
 1613              		rounded to nearest integer 
 1614              	****************************/
 1615 3bbc 6A3B0000 		_HEADER DSLASH,2,"D/"
 1615      02442F00 
 1616 3bc4 504700BF 		_NEST 
 1617 3bc8 69320000 		_ADR DUPP 
 1618 3bcc DF300000 		_DOLIT 1 
 1618      01000000 
 1619 3bd4 7D330000 		_ADR RSHIFT 
 1620 3bd8 E5310000 		_ADR TOR 
 1621 3bdc 713B0000 		_ADR DSLMOD 
 1622 3be0 C9340000 		_ADR ROT 
 1623 3be4 A1310000 		_ADR RFROM 
 1624 3be8 B1360000 		_ADR GREAT 
 1625 3bec 1F310000 		_QBRAN 9f
 1625      043C0000 
 1626 3bf4 DF300000 		_DOLIT 1 
 1626      01000000 
 1627 3bfc 293B0000 		_ADR STOD 
 1628 3c00 2D350000 		_ADR DPLUS 
 1629 3c04 BB2E0000 	9:	_UNNEST 
 1630              	
 1631              	
 1632              	/****************************
 1633              		D* ( d s -- d )
 1634              	    multiply a double 
 1635              		by a single 
 1636              	****************************/
 1637 3c08 C03B0000 		_HEADER DSTAR,2,"D*"
 1637      02442A00 
 1638              	/*
 1639              		_NEST 
ARM GAS  forth.s 			page 143


 1640              		_ADR NROT 
 1641              		_ADR DUPP 
 1642              		_ADR TOR 
 1643              		_ADR DABS
 1644              		_ADR SWAP  
 1645              		_ADR ROT   
 1646              		_ADR DUPP
 1647              		_ADR TOR
 1648              		_ADR MSTAR
 1649              		_ADR ROT
 1650              		_ADR RFROM 
 1651              		_ADR STAR 
 1652              		_ADR PLUS
 1653              		_ADR RFROM 
 1654              		_ADR ZLESS 
 1655              		_QBRAN 9f
 1656              		_ADR DNEGA   
 1657              	9:	_UNNEST 
 1658              	*/
 1659 3c10 57F8040B 		ldr T0,[DSP],#4
 1660 3c14 3968     		ldr T1,[DSP]
 1661 3c16 3860     		str T0,[DSP] 
 1662 3c18 83EA0303 		eor T3,T3 
 1663 3c1c 10F0004F 		tst T0,#(1<<31)
 1664 3c20 02D0     		beq 1f 
 1665              		// DNEGATE 
 1666 3c22 591A     		subs T1,T3,T1  
 1667 3c24 63EB0000 		sbc T0,T3,T0 
 1668 3c28 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1669 3c2c 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1670 3c30 0E44     		add TOS,T1  // TOS:T2 product  
 1671 3c32 3868     		ldr r0,[DSP]
 1672 3c34 10F0004F 		tst T0,#(1<<31)
 1673 3c38 02D0     		beq 2f 
 1674              		// DNEGATE product 
 1675 3c3a 9A1A     		subs T2,T3,T2  
 1676 3c3c 63EB0606 		sbc TOS,T3,TOS 
 1677 3c40 3A60     	2:  str T2,[DSP]
 1678 3c42 FFF737B9 		_NEXT 
 1679              	
 1680              	
 1681              	/****************************
 1682              	   /MOD	( n n -- r q )
 1683              		Signed divide. Return
 1684              		mod and quotient.
 1685              	****************************/
 1686 3c46 0C3C0000 		_HEADER SLMOD,4,"/MOD"
 1686      042F4D4F 
 1686      4400
 1687 3c50 504700BF 		_NEST
 1688 3c54 A9320000 		_ADR	OVER
 1689 3c58 D9320000 		_ADR	ZLESS
 1690 3c5c 79320000 		_ADR	SWAP
 1691 3c60 213A0000 		_ADR	MSMOD
 1692 3c64 BB2E0000 		_UNNEST
 1693              	
 1694              	/**************************
ARM GAS  forth.s 			page 144


 1695              	    MOD	 ( n n -- r )
 1696              	 	Signed divide. Return
 1697              		mod only.
 1698              	**************************/
 1699 3c68 4A3C0000 		_HEADER MODD,3,"MOD"
 1699      034D4F44 
 1700 3c70 504700BF 		_NEST
 1701 3c74 513C0000 		_ADR	SLMOD
 1702 3c78 59320000 		_ADR	DROP
 1703 3c7c BB2E0000 		_UNNEST
 1704              	
 1705              	/*************************
 1706              	    /	   ( n n -- q )
 1707              	 	Signed divide. Return
 1708              		quotient only.
 1709              	**************************/
 1710 3c80 6C3C0000 		_HEADER SLASH,1,"/"
 1710      012F00BF 
 1711 3c88 504700BF 		_NEST
 1712 3c8c 513C0000 		_ADR	SLMOD
 1713 3c90 79320000 		_ADR	SWAP
 1714 3c94 59320000 		_ADR	DROP
 1715 3c98 BB2E0000 		_UNNEST
 1716              	
 1717              	//******************************
 1718              	//   */MOD	( n1 n2 n3 -- r q )
 1719              	/*   Multiply n1 and n2, then 
 1720              	   divide by n3. Return 
 1721              	   mod and quotient.
 1722              	******************************/
 1723 3c9c 843C0000 		_HEADER SSMOD,5,"*/MOD"
 1723      052A2F4D 
 1723      4F4400BF 
 1724 3ca8 504700BF 		_NEST
 1725 3cac E5310000 		_ADR	TOR
 1726 3cb0 ED330000 		_ADR	MSTAR
 1727 3cb4 A1310000 		_ADR	RFROM
 1728 3cb8 213A0000 		_ADR	MSMOD
 1729 3cbc BB2E0000 		_UNNEST
 1730              	
 1731              	//*******************************
 1732              	//  */ ( n1 n2 n3 -- q )
 1733              	/* 	Multiply n1 by n2, then 
 1734              		divide by n3. Return quotient
 1735              		only.
 1736              	*******************************/
 1737 3cc0 A03C0000 		_HEADER STASL,2,"*/"
 1737      022A2F00 
 1738 3cc8 504700BF 		_NEST
 1739 3ccc A93C0000 		_ADR	SSMOD
 1740 3cd0 79320000 		_ADR	SWAP
 1741 3cd4 59320000 		_ADR	DROP
 1742 3cd8 BB2E0000 		_UNNEST
 1743              	
 1744              	/*******************
 1745              	  Miscellaneous
 1746              	*******************/
ARM GAS  forth.s 			page 145


 1747              	
 1748              	/*************************
 1749              		CHAR+ ( a -- a+ )
 1750              		increment a by one 
 1751              		char size unit. 
 1752              	*************************/
 1753 3cdc C43C0000 		_HEADER CHARP,5,"CHAR+"
 1753      05434841 
 1753      522B00BF 
 1754 3ce8 06F10106 		add TOS,#1
 1755 3cec FFF7E2B8 		_NEXT 
 1756              	
 1757              	/*************************
 1758              		CHARS ( n1 -- n1 )
 1759              		address size of 
 1760              		n1 character
 1761              		same on this system 
 1762              	*************************/
 1763 3cf0 E03C0000 		_HEADER CHARS,5,"CHARS"
 1763      05434841 
 1763      525300BF 
 1764 3cfc FFF7DAB8 		_NEXT 
 1765              	
 1766              	
 1767              	
 1768              	/*************************
 1769              		ALIGN ( -- )
 1770              		align data pointer 
 1771              		to cell boundary 
 1772              	************************/
 1773 3d00 F43C0000 		_HEADER ALIGN,5,"ALIGN"
 1773      05414C49 
 1773      474E00BF 
 1774 3d0c E06C     		ldr T0,[UP,#USER_CTOP]
 1775 3d0e 00F10300 		add T0,#(CELLL-1)
 1776 3d12 20F00300 		and T0,#0xFFFFFFFC 
 1777 3d16 E064     		str T0,[UP,#USER_CTOP]
 1778 3d18 FFF7CCB8 		_NEXT 
 1779              	
 1780              	
 1781              	/*************************
 1782              	    ALIGNED	( b -- a )
 1783              	 	Align address to the 
 1784              		cell boundary.
 1785              	**************************/
 1786 3d1c 043D0000 		_HEADER ALGND,7,"ALIGNED"
 1786      07414C49 
 1786      474E4544 
 1787 3d28 06F10306 		ADD	TOS,TOS,#3
 1788 3d2c 6FF00305 		MVN	WP,#3
 1789 3d30 06EA0506 		AND	TOS,TOS,WP
 1790 3d34 FFF7BEB8 		_NEXT
 1791              	
 1792              	/****************************
 1793              	    >CHAR	( c -- c )
 1794              	 	Filter non-printing 
 1795              		characters.
ARM GAS  forth.s 			page 146


 1796              	****************************/
 1797 3d38 203D0000 		_HEADER TCHAR,5,">CHAR"
 1797      053E4348 
 1797      415200BF 
 1798 3d44 504700BF 		_NEST
 1799 3d48 DF300000 		_DOLIT  0x7F
 1799      7F000000 
 1800 3d50 25330000 		_ADR	ANDD
 1801 3d54 69320000 		_ADR	DUPP	// mask msb
 1802 3d58 61340000 		_ADR	BLANK
 1803 3d5c DF300000 		_DOLIT 	127
 1803      7F000000 
 1804 3d64 B9390000 		_ADR	WITHI	// check for printable
 1805 3d68 B5350000 		_ADR	INVER
 1806 3d6c 1F310000 		_QBRAN	TCHA1
 1806      803D0000 
 1807 3d74 59320000 		_ADR	DROP
 1808 3d78 DF300000 		_DOLIT 	'_'	// replace non-printables
 1808      5F000000 
 1809              	TCHA1:
 1810 3d80 BB2E0000 		  _UNNEST
 1811              	
 1812              	/************************
 1813              	    DEPTH	( -- n )
 1814              	 	Return the depth of
 1815              		the data stack.
 1816              	***********************/
 1817 3d84 3C3D0000 		_HEADER DEPTH,5,"DEPTH"
 1817      05444550 
 1817      544800BF 
 1818 3d90 4FF6B062 		_MOV32 T2,SPP 
 1818      C2F20102 
 1819 3d98 A2EB0702 		SUB	T2,T2,DSP
 1820 3d9c 47F8046D 		_PUSH
 1821 3da0 4FEAA206 		ASR	TOS,T2,#2
 1822 3da4 FFF786B8 		_NEXT
 1823              	
 1824              	/*****************************
 1825              	    PICK	( ... +n -- ... w )
 1826              	 	Copy the nth stack item 
 1827              		to tos.
 1828              	******************************/
 1829 3da8 883D0000 		_HEADER PICK,4,"PICK"
 1829      04504943 
 1829      4B0000BF 
 1830 3db4 4FEA8606 		lsl TOS,#2 
 1831 3db8 BE59     		ldr TOS,[DSP,TOS]
 1832 3dba FFF77BB8 		_NEXT 
 1833              	
 1834              	/*****************************
 1835              		PUT ( xn..x0 w i -- xi...x0 )
 1836              		put value w at position 
 1837              		xi on stack 
 1838              		i in range [0..n] 
 1839              	*****************************/
 1840 3dbe AC3D0000 		_HEADER PUT,3,"PUT"
 1840      03505554 
ARM GAS  forth.s 			page 147


 1840      00BF
 1841 3dc8 3546     		mov WP,TOS 
 1842 3dca 57F8046B 		_POP 
 1843 3dce 4FEA8505 		lsl WP,#2 
 1844 3dd2 7E51     		str TOS,[DSP,WP]
 1845 3dd4 57F8046B 		_POP 
 1846 3dd8 FFF76CB8 		_NEXT 
 1847              	
 1848              	/*********************
 1849              	  Memory access
 1850              	*********************/
 1851              	
 1852              	/*************************
 1853              	    HERE	( -- a )
 1854              	 	Return the top of
 1855              		the code dictionary.
 1856              	*************************/
 1857 3ddc C23D0000 		_HEADER HERE,4,"HERE"
 1857      04484552 
 1857      450000BF 
 1858 3de8 504700BF 		_NEST
 1859 3dec DD380000 		_ADR	CPP
 1860 3df0 75310000 		_ADR	AT
 1861 3df4 BB2E0000 		_UNNEST
 1862              	
 1863              	/***************************	
 1864              	    PAD	 ( -- a )
 1865              	 	Return the address of 
 1866              		a temporary buffer.
 1867              	***************************/
 1868 3df8 E03D0000 		_HEADER PAD,3,"PAD"
 1868      03504144 
 1869 3e00 504700BF 		_NEST
 1870 3e04 E93D0000 		_ADR	HERE
 1871 3e08 DF300000 		_DOLIT 80
 1871      50000000 
 1872 3e10 A5330000 		_ADR PLUS 
 1873 3e14 BB2E0000 		_UNNEST
 1874              	
 1875              	/***********************
 1876              	    TIB	 ( -- a )
 1877              	 	Return the address 
 1878              		of the terminal 
 1879              		input buffer.
 1880              	************************/
 1881 3e18 FC3D0000 		_HEADER TIB,3,"TIB"
 1881      03544942 
 1882 3e20 47F8046D 		_PUSH
 1883 3e24 666B     		ldr TOS,[UP,#TIBUF]
 1884 3e26 FFF745B8 		_NEXT
 1885              	
 1886              	/*************************
 1887              		SOURCE-ID, ( -- 0 | -1 )
 1888              	output:
 1889              		-1 	String (via EVALUATE)	
 1890              		0 	User input device
 1891              	*****************************/
ARM GAS  forth.s 			page 148


 1892 3e2a 1C3E0000 		_HEADER SOURCID,9,"SOURCE-ID"
 1892      09534F55 
 1892      5243452D 
 1892      4944
 1893 3e38 47F8046D 		_PUSH 
 1894 3e3c A66B     		ldr TOS,[UP,#SRCID]
 1895 3e3e FFF739B8 		_NEXT 
 1896              	
 1897              	
 1898              	/***********************************
 1899              		SOURCE ( -- a u )
 1900              	output:
 1901              		a  address of transaction buffer 
 1902              		u  # char in buffer 
 1903              	***********************************/
 1904 3e42 2E3E0000 		_HEADER SOURCE,6,"SOURCE"
 1904      06534F55 
 1904      52434500 
 1904      00BF
 1905 3e50 504700BF 		_NEST 
 1906 3e54 DF300000 		_DOLIT  UPP+SRC 
 1906      30000020 
 1907 3e5c 39370000 		_ADR   DAT 
 1908 3e60 BB2E0000 		_UNNEST 
 1909              	
 1910              	/*************************
 1911              	    @EXECUTE	( a -- )
 1912              	 	Execute vector stored
 1913              		in address a.
 1914              	*************************/
 1915 3e64 463E0000 		_HEADER ATEXE,8,"@EXECUTE"
 1915      08404558 
 1915      45435554 
 1915      450000BF 
 1916 3e74 3500     		MOVS	WP,TOS
 1917 3e76 57F8046B 		_POP
 1918 3e7a 2D68     		LDR	WP,[WP]
 1919 3e7c 45F00105 		ORR	WP,WP,#1
 1920 3e80 18BF     	    IT NE 
 1921 3e82 2847     		BXNE	WP
 1922 3e84 FFF716B8 		_NEXT
 1923              	
 1924              	/*******************************
 1925              	    CMOVE	( b1 b2 u -- )
 1926              	 	Copy u bytes from b1 to b2.
 1927              	********************************/
 1928 3e88 683E0000 		_HEADER CMOVE,5,"CMOVE"
 1928      05434D4F 
 1928      564500BF 
 1929 3e94 57F8042B 		LDR	T2,[DSP],#4
 1930 3e98 57F8043B 		LDR	T3,[DSP],#4
 1931 3e9c 03E0     		B CMOV1
 1932              	CMOV0:
 1933 3e9e 13F8015B 		LDRB	WP,[T3],#1
 1934 3ea2 02F8015B 		STRB	WP,[T2],#1
 1935              	CMOV1:
 1936 3ea6 3600     		MOVS	TOS,TOS
ARM GAS  forth.s 			page 149


 1937 3ea8 02D0     		BEQ	CMOV2
 1938 3eaa A6F10106 		SUB	TOS,TOS,#1
 1939 3eae F6E7     		B CMOV0
 1940              	CMOV2:
 1941 3eb0 57F8046B 		_POP
 1942 3eb4 FEF7FEBF 		_NEXT
 1943              	
 1944              	/***************************
 1945              	    MOVE	( a1 a2 u -- )
 1946              	 	Copy u words from a1 to a2.
 1947              	*******************************/
 1948 3eb8 8C3E0000 		_HEADER MOVE,4,"MOVE"
 1948      044D4F56 
 1948      450000BF 
 1949 3ec4 4FF00400 		MOV T0,#4 
 1950 3ec8 06F10306 		ADD TOS,#3 
 1951 3ecc 26F00306 		BIC TOS,#3
 1952 3ed0 57F8041B 		LDR	T1,[DSP],#4 // dest
 1953 3ed4 57F8042B 		LDR	T2,[DSP],#4 // src 
 1954 3ed8 8A42     		CMP T2,T1 
 1955 3eda 08D5     		BPL MOVE1
 1956 3edc 6FF00300 		MOV T0,#-4 
 1957 3ee0 3144     		ADD T1,TOS
 1958 3ee2 3244     		ADD T2,TOS 
 1959 3ee4 01E0     		B MOVE3
 1960              	MOVE0:
 1961 3ee6 1568     		LDR	WP,[T2]
 1962 3ee8 0D60     		STR	WP,[T1]
 1963              	MOVE3: 
 1964 3eea 0144     		ADD T1,T0 
 1965 3eec 0244     		ADD T2,T0 
 1966              	MOVE1:
 1967 3eee 3600     		MOVS TOS,TOS
 1968 3ef0 02D0     		BEQ	MOVE2
 1969 3ef2 A6F10406 		SUB	TOS,TOS,#4
 1970 3ef6 F6E7     		B MOVE0
 1971              	MOVE2:
 1972 3ef8 57F8046B 		_POP
 1973 3efc FEF7DABF 		_NEXT
 1974              	
 1975              	/**************************
 1976              	    FILL	( b u c -- )
 1977              	 	Fill u bytes of character
 1978              		c to area beginning at b.
 1979              	******************************/
 1980 3f00 BC3E0000 		_HEADER FILL,4,"FILL"
 1980      0446494C 
 1980      4C0000BF 
 1981 3f0c 03CF     		LDMFD DSP!,{T0,T1} 
 1982 3f0e 0000     		MOVS T0,T0 
 1983 3f10 03D0     		BEQ FILL2
 1984              	FILL1:
 1985 3f12 01F8016B 		STRB	TOS,[T1],#1
 1986 3f16 0138     		SUBS	T0,T0,#1
 1987 3f18 FBD1     		BNE FILL1
 1988              	FILL2:
 1989 3f1a 57F8046B 		_POP
ARM GAS  forth.s 			page 150


 1990 3f1e FEF7C9BF 		_NEXT
 1991              	
 1992              	/*****************************
 1993              	    PACK$	( b u a -- a )
 1994              	 	Build a counted word with
 1995              		u characters from b. 
 1996              		Null fill.
 1997              	*****************************/
 1998 3f22 043F0000 		_HEADER PACKS,5,"PACK$"
 1998      05504143 
 1998      4B24
 1999 3f2c 504700BF 		_NEST
 2000 3f30 293D0000 		_ADR	ALGND
 2001 3f34 69320000 		_ADR	DUPP
 2002 3f38 E5310000 		_ADR	TOR		// strings only on cell boundary
 2003 3f3c A9320000 		_ADR	OVER
 2004 3f40 A5330000 		_ADR	PLUS
 2005 3f44 01340000 		_ADR	ONEP 
 2006 3f48 DF300000 		_DOLIT 	0xFFFFFFFC
 2006      FCFFFFFF 
 2007 3f50 25330000 		_ADR	ANDD			// count mod cell
 2008 3f54 DF300000 		_DOLIT 	0
 2008      00000000 
 2009 3f5c 79320000 		_ADR	SWAP
 2010 3f60 61310000 		_ADR	STORE			// null fill cell
 2011 3f64 D1310000 		_ADR	RAT
 2012 3f68 19350000 		_ADR	DDUP
 2013 3f6c 81310000 		_ADR	CSTOR
 2014 3f70 01340000 		_ADR	ONEP			// save count
 2015 3f74 79320000 		_ADR	SWAP
 2016 3f78 953E0000 		_ADR	CMOVE
 2017 3f7c A1310000 		_ADR	RFROM
 2018 3f80 BB2E0000 		_UNNEST   			// move string
 2019              	
 2020              	/***********************************
 2021              	  Numeric output, single precision
 2022              	***********************************/
 2023              	
 2024              	/**************************
 2025              	    DIGIT	( u -- c )
 2026              	 	Convert digit u to 
 2027              		a character.
 2028              	***************************/
 2029 3f84 263F0000 		_HEADER DIGIT,5,"DIGIT"
 2029      05444947 
 2029      495400BF 
 2030 3f90 504700BF 		_NEST
 2031 3f94 DF300000 		_DOLIT 9
 2031      09000000 
 2032 3f9c A9320000 		_ADR	OVER
 2033 3fa0 81360000 		_ADR	LESS
 2034 3fa4 DF300000 		_DOLIT	7
 2034      07000000 
 2035 3fac 25330000 		_ADR	ANDD
 2036 3fb0 A5330000 		_ADR	PLUS
 2037 3fb4 DF300000 		_DOLIT	'0'
 2037      30000000 
ARM GAS  forth.s 			page 151


 2038 3fbc A5330000 		_ADR	PLUS 
 2039 3fc0 BB2E0000 		_UNNEST
 2040              	
 2041              	/*********************************
 2042              	    EXTRACT	( ud base -- ud c )
 2043              	 	Extract the least significant
 2044              		digit from positive double.
 2045              	**********************************/
 2046 3fc4 883F0000 		_HEADER EXTRC,7,"EXTRACT"
 2046      07455854 
 2046      52414354 
 2047 3fd0 504700BF 		_NEST
 2048 3fd4 713B0000 		_ADR	DSLMOD
 2049 3fd8 C9340000 		_ADR	ROT
 2050 3fdc 913F0000 		_ADR	DIGIT
 2051 3fe0 BB2E0000 		_UNNEST
 2052              	
 2053              	/***************************
 2054              	    <#	  ( -- )
 2055              	 	Initiate the numeric
 2056              		output process.
 2057              	****************************/
 2058 3fe4 C83F0000 		_HEADER BDIGS,2,"<#"
 2058      023C2300 
 2059 3fec 504700BF 		_NEST
 2060 3ff0 013E0000 		_ADR	PAD
 2061 3ff4 B1380000 		_ADR	HLD
 2062 3ff8 61310000 		_ADR	STORE
 2063 3ffc BB2E0000 		_UNNEST
 2064              	
 2065              	/*********************************
 2066              	    HOLD	( c -- )
 2067              	 	Insert a character into the 
 2068              		numeric output string.
 2069              	**********************************/
 2070 4000 E83F0000 		_HEADER HOLD,4,"HOLD"
 2070      04484F4C 
 2070      440000BF 
 2071 400c 504700BF 		_NEST
 2072 4010 B1380000 		_ADR	HLD
 2073 4014 75310000 		_ADR	AT
 2074 4018 11340000 		_ADR	ONEM
 2075 401c 69320000 		_ADR	DUPP
 2076 4020 B1380000 		_ADR	HLD
 2077 4024 61310000 		_ADR	STORE
 2078 4028 81310000 		_ADR	CSTOR
 2079 402c BB2E0000 		_UNNEST
 2080              	
 2081              	/***********************
 2082              	    #	   ( ud -- ud )
 2083              	 	Extract one digit 
 2084              		from ud and append 
 2085              		the digit to output 
 2086              		string.
 2087              	*************************/
 2088 4030 04400000 		_HEADER DIG,1,"#"
 2088      012300BF 
ARM GAS  forth.s 			page 152


 2089 4038 504700BF 		_NEST
 2090 403c 1D380000 		_ADR	BASE
 2091 4040 75310000 		_ADR	AT
 2092 4044 D13F0000 		_ADR	EXTRC
 2093 4048 0D400000 		_ADR	HOLD
 2094 404c BB2E0000 		_UNNEST
 2095              	
 2096              	/***************************
 2097              	    #S	  ( ud -- 0 )
 2098              	 	Convert ud until all 
 2099              		digits are added to 
 2100              		the output string.
 2101              	***************************/
 2102 4050 34400000 		_HEADER DIGS,2,"#S"
 2102      02235300 
 2103 4058 504700BF 		_NEST
 2104              	DIGS1:
 2105 405c 39400000 	    _ADR	DIG
 2106 4060 19350000 		_ADR	DDUP
 2107 4064 39330000 		_ADR    ORR 
 2108 4068 1F310000 		_QBRAN 	DIGS2
 2108      78400000 
 2109 4070 47310000 		_BRAN	DIGS1
 2109      5C400000 
 2110              	DIGS2:
 2111 4078 59320000 		 _ADR DROP 
 2112 407c BB2E0000 		 _UNNEST
 2113              	
 2114              	/*********************
 2115              	    SIGN	( n -- )
 2116              	 	Add a minus sign
 2117              		to the numeric
 2118              		output string.
 2119              	*********************/
 2120 4080 54400000 		_HEADER SIGN,4,"SIGN"
 2120      04534947 
 2120      4E0000BF 
 2121 408c 504700BF 		_NEST
 2122 4090 D9320000 		_ADR	ZLESS
 2123 4094 1F310000 		_QBRAN	SIGN1
 2123      A8400000 
 2124 409c DF300000 		_DOLIT '-'
 2124      2D000000 
 2125 40a4 0D400000 		_ADR	HOLD
 2126              	SIGN1:
 2127 40a8 BB2E0000 		  _UNNEST
 2128              	
 2129              	/*************************
 2130              	    #>  ( w -- b u )
 2131              	 	Prepare the output 
 2132              		word to be TYPE'd.
 2133              	************************/
 2134 40ac 84400000 		_HEADER EDIGS,2,"#>"
 2134      02233E00 
 2135 40b4 504700BF 		_NEST
 2136 40b8 59320000 		_ADR	DROP
 2137 40bc B1380000 		_ADR	HLD
ARM GAS  forth.s 			page 153


 2138 40c0 75310000 		_ADR	AT
 2139 40c4 013E0000 		_ADR	PAD
 2140 40c8 A9320000 		_ADR	OVER
 2141 40cc B5330000 		_ADR	SUBB
 2142 40d0 BB2E0000 		_UNNEST
 2143              	
 2144              	/**************************
 2145              	    str	 ( n -- b u )
 2146              	 	Convert a signed 
 2147              		integer to a numeric 
 2148              		string.
 2149              	hidden word used by compiler
 2150              	***************************/
 2151              	STRR:
 2152 40d4 504700BF 		_NEST
 2153 40d8 293B0000 		_ADR 	STOD 
 2154 40dc 69320000 		_ADR	DUPP
 2155 40e0 E5310000 		_ADR	TOR
 2156 40e4 4D350000 		_ADR	DABS
 2157 40e8 ED3F0000 		_ADR	BDIGS
 2158 40ec 59400000 		_ADR	DIGS
 2159 40f0 A1310000 		_ADR	RFROM
 2160 40f4 8D400000 		_ADR	SIGN
 2161 40f8 B5400000 		_ADR	EDIGS
 2162 40fc BB2E0000 		_UNNEST
 2163              	
 2164              	/*************************
 2165              	    HEX	 ( -- )
 2166              	 	Use radix 16 as 
 2167              		base for numeric 
 2168              		conversions.
 2169              	*************************/
 2170 4100 B0400000 		_HEADER HEX,3,"HEX"
 2170      03484558 
 2171 4108 504700BF 		_NEST
 2172 410c DF300000 		_DOLIT 16
 2172      10000000 
 2173 4114 1D380000 		_ADR	BASE
 2174 4118 61310000 		_ADR	STORE
 2175 411c BB2E0000 		_UNNEST
 2176              	
 2177              	/**************************
 2178              		BIN ( -- )
 2179              		Use radix 2 as 
 2180              		base for numeric 
 2181              		conversion 
 2182              	**************************/
 2183 4120 04410000 		_HEADER BIN,3,"BIN"
 2183      0342494E 
 2184 4128 504700BF 		_NEST 
 2185 412c DF300000 		_DOLIT 2 
 2185      02000000 
 2186 4134 1D380000 		_ADR BASE 
 2187 4138 61310000 		_ADR STORE
 2188 413c BB2E0000 		_UNNEST 
 2189              	
 2190              	/************************
ARM GAS  forth.s 			page 154


 2191              	    DECIMAL	( -- )
 2192              	 	Use radix 10 as base
 2193              		for numeric conversions.
 2194              	*************************/
 2195 4140 24410000 		_HEADER DECIM,7,"DECIMAL"
 2195      07444543 
 2195      494D414C 
 2196 414c 504700BF 		_NEST
 2197 4150 DF300000 		_DOLIT 10
 2197      0A000000 
 2198 4158 1D380000 		_ADR	BASE
 2199 415c 61310000 		_ADR	STORE
 2200 4160 BB2E0000 		_UNNEST
 2201              	
 2202              	/************************************
 2203              	  Numeric input
 2204              	***********************************/
 2205              	
 2206              	/***********************************
 2207              	    DIGIT?	( c base -- u t )
 2208              	 	Convert a character to its 
 2209              		numeric value. A flag 
 2210              		indicates success.
 2211              	**********************************/
 2212 4164 44410000 		_HEADER DIGTQ,6,"DIGIT?"
 2212      06444947 
 2212      49543F00 
 2213 4170 504700BF 		_NEST
 2214 4174 E5310000 		_ADR	TOR
 2215 4178 DF300000 		_DOLIT 	'0'
 2215      30000000 
 2216 4180 B5330000 		_ADR	SUBB
 2217 4184 DF300000 		_DOLIT 9
 2217      09000000 
 2218 418c A9320000 		_ADR	OVER
 2219 4190 81360000 		_ADR	LESS
 2220 4194 1F310000 		_QBRAN	DGTQ1
 2220      BC410000 
 2221 419c DF300000 		_DOLIT 7
 2221      07000000 
 2222 41a4 B5330000 		_ADR	SUBB
 2223 41a8 69320000 		_ADR	DUPP
 2224 41ac DF300000 		_DOLIT	10
 2224      0A000000 
 2225 41b4 81360000 		_ADR	LESS
 2226 41b8 39330000 		_ADR	ORR
 2227              	DGTQ1:
 2228 41bc 69320000 		_ADR	DUPP
 2229 41c0 A1310000 		_ADR	RFROM
 2230 41c4 69360000 		_ADR	ULESS
 2231 41c8 BB2E0000 		_UNNEST
 2232              	
 2233              	
 2234              	/*****************************************
 2235              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2236              	  convert unsigned double string 
 2237              	  to double integer adding to ud1 
ARM GAS  forth.s 			page 155


 2238              	input:
 2239              		ud1  unsiged double 
 2240              		adr1  string address 
 2241              		u1    string length 
 2242              	outpout:
 2243              		ud2   modifield ud1 
 2244              		adr2  point to char not converted 
 2245              		u2    char left in string 
 2246              	**************************************/
 2247 41cc 68410000 		_HEADER TONBR,7,">NUMBER"
 2247      073E4E55 
 2247      4D424552 
 2248 41d8 504700BF 		_NEST 
 2249 41dc 69320000 		_ADR DUPP 
 2250 41e0 1F310000 		_QBRAN 9f 
 2250      48420000 
 2251 41e8 A9320000 	1: 	_ADR OVER  // d a u a 
 2252 41ec 95310000 		_ADR CAT   // d  a u c 
 2253 41f0 1D380000 		_ADR BASE   
 2254 41f4 75310000 		_ADR AT      // d a u c base
 2255 41f8 71410000 		_ADR DIGTQ   // d a u n flag 
 2256 41fc 1F310000 		_QBRAN 8f
 2256      44420000 
 2257 4204 E5310000 		_ADR TOR   	 
 2258 4208 11340000 		_ADR ONEM 
 2259 420c 8D320000 		_ADR DSWAP // a u d 
 2260 4210 1D380000 		_ADR BASE 
 2261 4214 75310000 		_ADR AT 
 2262 4218 113C0000 		_ADR DSTAR 
 2263 421c A1310000 		_ADR RFROM 
 2264 4220 DF300000 		_DOLIT 0    
 2264      00000000 
 2265 4228 2D350000 		_ADR DPLUS 
 2266 422c 8D320000 		_ADR DSWAP 
 2267 4230 79320000 		_ADR SWAP 
 2268 4234 01340000 		_ADR ONEP
 2269 4238 79320000 		_ADR SWAP  
 2270 423c 47310000 		_BRAN 1b 
 2270      E8410000 
 2271 4244 59320000 	8:  _ADR DROP
 2272 4248 BB2E0000 	9:	_UNNEST 
 2273              	
 2274              	
 2275              	/**************************
 2276              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2277              	 check for charcter c 
 2278              	 move pointer if *a==c  
 2279              	**************************/
 2280              	CHARQ:
 2281 424c 7868     	    ldr T0,[DSP,#4]
 2282 424e 10F8011B 	    ldrb T1,[T0],#1 
 2283 4252 3246     	    mov T2,TOS 
 2284 4254 86EA0606 	    eor TOS,TOS
 2285 4258 9142     	    cmp T1,T2
 2286 425a 06D1     	    bne 1f 
 2287 425c 7860     	    str T0,[DSP,#4]
 2288 425e 3868     		ldr T0,[DSP]
ARM GAS  forth.s 			page 156


 2289 4260 A0F10100 		sub T0,#1 
 2290 4264 3860     		str T0,[DSP]
 2291 4266 6FEA0606 	    mvn TOS,TOS  
 2292 426a FEF723BE 	1:  _NEXT
 2293              	
 2294              	
 2295              	/*********************************
 2296              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2297              	   skip '-'|'+' return -1 if '-' 
 2298              	   else return 0 
 2299              	*********************************/
 2300              	NEGQ: 
 2301 426e 47F8046D 		_PUSH 
 2302 4272 86EA0606 		eor TOS,TOS // false flag 
 2303 4276 7868     		ldr T0,[DSP,#4]
 2304 4278 10F8011B 		ldrb T1,[T0],#1
 2305 427c 2D29     		cmp T1,#'-' 
 2306 427e 02D0     		beq 1f
 2307 4280 2B29     		cmp T1,#'+'
 2308 4282 07D1     		bne 3f 
 2309 4284 01E0     		b 2f 
 2310 4286 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2311 428a 7860     	2:	str T0,[DSP,#4]
 2312 428c 3868     		ldr T0,[DSP]
 2313 428e A0F10100 		sub T0,#1 
 2314 4292 3860     		str T0,[DSP]
 2315 4294 FEF70EBE 	3:	_NEXT 
 2316              	
 2317              	
 2318              	
 2319              	/**********************************
 2320              	    INT?	( a -- n T | a F )
 2321              	 	parse string  at 'a' for 
 2322              		integer. Push a flag on TOS.
 2323              		integer form:
 2324              			[-]hex_digit+  | 
 2325              			$[-]hex_digit+ |
 2326              			%[-]bin_digit+ | 
 2327              			[-]dec_digit+ 
 2328              	**********************************/
 2329 4298 D0410000 		_HEADER INTQ,4,"INT?"
 2329      04494E54 
 2329      3F0000BF 
 2330 42a4 504700BF 		_NEST
 2331              	// save BASE 	
 2332 42a8 1D380000 		_ADR	BASE
 2333 42ac 75310000 		_ADR	AT
 2334 42b0 E5310000 		_ADR	TOR
 2335 42b4 DF300000 		_DOLIT	0      // a 0 
 2335      00000000 
 2336 42bc A9320000 		_ADR	OVER   // a 0 a 
 2337 42c0 51370000 		_ADR	COUNT  // a 0 a+ cnt 
 2338 42c4 DF300000 		_DOLIT  '$' 
 2338      24000000 
 2339 42cc 4D420000 		_ADR    CHARQ 
 2340 42d0 1F310000 		_QBRAN  0f 
 2340      E4420000 
ARM GAS  forth.s 			page 157


 2341              	// hexadecimal number 
 2342 42d8 09410000 		_ADR    HEX
 2343 42dc 47310000 		_BRAN   2f 
 2343      FC420000 
 2344 42e4 DF300000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2344      25000000 
 2345 42ec 4D420000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2346 42f0 1F310000 		_QBRAN  2f
 2346      FC420000 
 2347 42f8 29410000 		_ADR	BIN 
 2348              	2: // check if negative number 
 2349 42fc 6F420000 		_ADR    NEGQ 
 2350 4300 E5310000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2351 4304 DF300000 		_DOLIT  0
 2351      00000000 
 2352 430c 69320000 		_ADR	DUPP 
 2353 4310 8D320000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
 2354 4314 D9410000 		_ADR    TONBR // a 0 d a+ cnt 
 2355 4318 1F310000 		_QBRAN  2f
 2355      34430000 
 2356              	    // not an integer 
 2357 4320 A1310000 		_ADR RFROM // a 0 d a sign  
 2358 4324 F1340000 		_ADR DDROP 
 2359 4328 F1340000 		_ADR DDROP 
 2360 432c 47310000 		_BRAN 7f 
 2360      5C430000 
 2361              	2: // valid integer 
 2362 4334 59320000 		_ADR	DROP // a 0 d
 2363 4338 8D320000 		_ADR    DSWAP 
 2364 433c F1340000 		_ADR    DDROP 
 2365 4340 59320000 		_ADR    DROP  // d>s 
 2366 4344 A1310000 		_ADR    RFROM // n sign 
 2367 4348 1F310000 		_QBRAN  2f
 2367      54430000 
 2368 4350 C9350000 		_ADR    NEGAT   
 2369 4354 DF300000 	2:	_DOLIT  -1 
 2369      FFFFFFFF 
 2370              	7: // restore BASE 
 2371 435c A1310000 		_ADR	RFROM
 2372 4360 1D380000 		_ADR	BASE
 2373 4364 61310000 		_ADR	STORE
 2374 4368 BB2E0000 		_UNNEST
 2375              	
 2376              	
 2377              	/********************************
 2378              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2379              	    parse number, integer or float 
 2380              	    if not a number return ( a 0 ) 
 2381              	    if integer return ( int -1 ) 
 2382              	    if float return ( float -2 )
 2383              	**********************************/
 2384 436c 9C420000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2384      074E554D 
 2384      4245523F 
 2385 4378 504700BF 	    _NEST 
 2386 437c A5420000 	    _ADR INTQ
 2387 4380 B5340000 	    _ADR QDUP 
ARM GAS  forth.s 			page 158


 2388 4384 1F310000 	    _QBRAN 2f 
 2388      90430000 
 2389 438c BB2E0000 	    _UNNEST 
 2390 4390 D9270000 	2:  _ADR FLOATQ
 2391 4394 BB2E0000 	    _UNNEST 
 2392              	
 2393              	
 2394              	/********************
 2395              	  console I/O
 2396              	********************/
 2397              	
 2398              	/**********************
 2399              	    SPACE	( -- )
 2400              	 	Send the blank 
 2401              		character to 
 2402              		the output device.
 2403              	************************/
 2404 4398 70430000 		_HEADER SPACE,5,"SPACE"
 2404      05535041 
 2404      434500BF 
 2405 43a4 504700BF 		_NEST
 2406 43a8 61340000 		_ADR	BLANK
 2407 43ac 7D2F0000 		_ADR	EMIT
 2408 43b0 BB2E0000 		_UNNEST
 2409              	
 2410              	/***************************
 2411              	    SPACES	( +n -- )
 2412              	 	Send n spaces to the 
 2413              		output device.
 2414              	****************************/
 2415 43b4 9C430000 		_HEADER SPACS,6,"SPACES"
 2415      06535041 
 2415      43455300 
 2416 43c0 504700BF 		_NEST
 2417 43c4 DF300000 		_DOLIT	0
 2417      00000000 
 2418 43cc CD360000 		_ADR	MAX
 2419 43d0 E5310000 		_ADR	TOR
 2420 43d4 47310000 		_BRAN	CHAR2
 2420      E0430000 
 2421              	CHAR1:
 2422 43dc A5430000 		_ADR	SPACE
 2423              	CHAR2:
 2424 43e0 01310000 		_DONXT	CHAR1
 2424      DC430000 
 2425 43e8 BB2E0000 		_UNNEST
 2426              	
 2427              	/***********************
 2428              	    TYPE	( b u -- )
 2429              	 	Output u characters 
 2430              		from b.
 2431              	************************/
 2432 43ec B8430000 		_HEADER TYPEE,4,"TYPE"
 2432      04545950 
 2432      450000BF 
 2433 43f8 504700BF 		_NEST
 2434 43fc E5310000 		_ADR  TOR   // ( a+1 -- R: u )
ARM GAS  forth.s 			page 159


 2435 4400 47310000 		_BRAN	TYPE2
 2435      14440000 
 2436              	TYPE1:  
 2437 4408 51370000 		_ADR  COUNT
 2438 440c 453D0000 		_ADR TCHAR
 2439 4410 7D2F0000 		_ADR EMIT
 2440              	TYPE2:  
 2441 4414 01310000 		_DONXT	TYPE1
 2441      08440000 
 2442 441c 59320000 		_ADR	DROP
 2443 4420 BB2E0000 		_UNNEST
 2444              	
 2445              	/***************************
 2446              	    CR	  ( -- )
 2447              	 	Output a carriage return
 2448              		and a line feed.
 2449              	****************************/
 2450 4424 F0430000 		_HEADER CR,2,"CR"
 2450      02435200 
 2451 442c 504700BF 		_NEST
 2452 4430 DF300000 		_DOLIT	CRR
 2452      0D000000 
 2453 4438 7D2F0000 		_ADR	EMIT
 2454 443c DF300000 		_DOLIT	LF
 2454      0A000000 
 2455 4444 7D2F0000 		_ADR	EMIT
 2456 4448 BB2E0000 		_UNNEST
 2457              	
 2458              	/******************************************
 2459              	  do_$	( -- a u )
 2460              	  Return the address of a compiled string.
 2461              	  adjust return address to skip over it.
 2462              	hidden word used by compiler. 
 2463              	******************************************/
 2464              	DOSTR:
 2465 444c 504700BF 		_NEST     
 2466              	/* compiled string address is 2 levels deep */
 2467 4450 A1310000 		_ADR	RFROM	// { -- a1 }
 2468 4454 A1310000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2469 4458 69320000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2470 445c 51370000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2471 4460 A5330000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2472 4464 293D0000 		_ADR	ALGND	//  end of string
 2473              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2474 4468 E5310000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2475 446c 79320000 		_ADR	SWAP	//  count tugged
 2476 4470 E5310000 		_ADR	TOR     //  ( -- a2) is string address
 2477 4474 51370000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2478 4478 BB2E0000 		_UNNEST
 2479              	
 2480              	/******************************************
 2481              	    $"|	( -- a u )
 2482              	 	Run time routine compiled by _". 
 2483              		Return address of a compiled string.
 2484              	hidden word used by compiler
 2485              	*****************************************/
 2486              	STRQP:
ARM GAS  forth.s 			page 160


 2487 447c 504700BF 		_NEST
 2488 4480 4D440000 		_ADR	DOSTR
 2489 4484 BB2E0000 		_UNNEST			// force a call to dostr
 2490              	
 2491              	
 2492              	/**********************
 2493              	    ."|	( -- )
 2494              	 	Run time routine of ." 
 2495              		Output a compiled string.
 2496              	hidden word used by compiler
 2497              	*****************************/
 2498              	DOTQP:
 2499 4488 504700BF 		_NEST
 2500 448c 4D440000 		_ADR	DOSTR
 2501 4490 F9430000 		_ADR	TYPEE 
 2502 4494 BB2E0000 		_UNNEST
 2503              	
 2504              	/*************************
 2505              		LPAD  ( n+ -- )
 2506              		emit n spaceS + 
 2507              		base character  
 2508              		16 -> $
 2509              		 2 -> %
 2510              		 other -> none 
 2511              	*************************/
 2512              	LPAD:
 2513 4498 504700BF 		_NEST 
 2514 449c 35380000 		_ADR BCHR 
 2515 44a0 75310000 		_ADR  AT 
 2516 44a4 1F310000 		_QBRAN 3f 
 2516      10450000 
 2517 44ac 1D380000 		_ADR BASE 
 2518 44b0 75310000 		_ADR AT 
 2519 44b4 69320000 		_ADR DUPP 
 2520 44b8 DF300000 		_DOLIT 16
 2520      10000000 
 2521 44c0 31360000 		_ADR EQUAL 
 2522 44c4 1F310000 		_QBRAN 1f
 2522      EC440000 
 2523 44cc 59320000 		_ADR DROP 
 2524 44d0 DF300000 		_DOLIT '$'
 2524      24000000 
 2525 44d8 79320000 	0:	_ADR  SWAP 
 2526 44dc 11340000 		_ADR  ONEM 
 2527 44e0 C1430000 		_ADR  SPACS 
 2528 44e4 7D2F0000 		_ADR  EMIT 
 2529 44e8 BB2E0000 		_UNNEST 
 2530 44ec DF300000 	1:  _DOLIT 2 
 2530      02000000 
 2531 44f4 31360000 		_ADR EQUAL 
 2532 44f8 1F310000 		_QBRAN 3f
 2532      10450000 
 2533 4500 DF300000 		_DOLIT '%'
 2533      25000000 
 2534 4508 47310000 		_BRAN 0b   	
 2534      D8440000 
 2535 4510 C1430000 	3:	_ADR  SPACS 
ARM GAS  forth.s 			page 161


 2536 4514 BB2E0000 		_UNNEST 
 2537              	
 2538              	
 2539              	/******************************
 2540              	    .R	  ( n +n -- )
 2541              	 	Display an integer in a 
 2542              		field of n columns, 
 2543              		right justified.
 2544              	*******************************/
 2545 4518 28440000 		_HEADER DOTR,2,".R"
 2545      022E5200 
 2546 4520 504700BF 		_NEST
 2547 4524 E5310000 		_ADR	TOR
 2548 4528 293B0000 		_ADR    STOD 
 2549 452c 09460000 		_ADR	DTOA 
 2550 4530 A1310000 		_ADR	RFROM
 2551 4534 A9320000 		_ADR	OVER
 2552 4538 B5330000 		_ADR	SUBB
 2553 453c 99440000 		_ADR    LPAD  
 2554 4540 F9430000 		_ADR	TYPEE
 2555 4544 BB2E0000 		_UNNEST
 2556              	
 2557              	
 2558              	/*************************
 2559              	    U.R	 ( u +n -- )
 2560              	 	Display an unsigned 
 2561              		integer in n column, 
 2562              		right justified.
 2563              	***************************/
 2564 4548 1C450000 		_HEADER UDOTR,3,"U.R"
 2564      03552E52 
 2565 4550 504700BF 		_NEST
 2566 4554 E5310000 		_ADR    TOR 
 2567 4558 DF300000 		_DOLIT  0
 2567      00000000 
 2568 4560 09460000 		_ADR    DTOA 
 2569 4564 A1310000 		_ADR	RFROM
 2570 4568 A9320000 		_ADR	OVER
 2571 456c B5330000 		_ADR	SUBB
 2572 4570 99440000 		_ADR    LPAD  
 2573 4574 F9430000 		_ADR	TYPEE
 2574 4578 BB2E0000 		_UNNEST
 2575              	
 2576              	
 2577              	/************************
 2578              	    U.	  ( u -- )
 2579              	 	Display an unsigned 
 2580              		integer in free format.
 2581              	***************************/
 2582 457c 4C450000 		_HEADER UDOT,2,"U."
 2582      02552E00 
 2583 4584 504700BF 		_NEST
 2584 4588 DF300000 		_DOLIT  0 
 2584      00000000 
 2585 4590 ED3F0000 		_ADR	BDIGS
 2586 4594 59400000 		_ADR	DIGS
 2587 4598 B5400000 		_ADR	EDIGS
ARM GAS  forth.s 			page 162


 2588 459c DF300000 		_DOLIT  1 
 2588      01000000 
 2589 45a4 99440000 		_ADR	LPAD  
 2590 45a8 F9430000 		_ADR	TYPEE
 2591 45ac BB2E0000 		_UNNEST
 2592              	
 2593              	
 2594              	/************************
 2595              	    .	   ( w -- )
 2596              	 	Display an integer 
 2597              		in free format, 
 2598              		preceeded by a space.
 2599              	**************************/
 2600 45b0 80450000 		_HEADER DOT,1,"."
 2600      012E00BF 
 2601 45b8 504700BF 		_NEST
 2602 45bc A5430000 		_ADR    SPACE 
 2603 45c0 1D380000 		_ADR	BASE
 2604 45c4 75310000 		_ADR	AT
 2605 45c8 DF300000 	1:	_DOLIT  10
 2605      0A000000 
 2606 45d0 4D330000 		_ADR	XORR	// decimal base?
 2607 45d4 1F310000 		_QBRAN	DOT1
 2607      E4450000 
 2608 45dc 85450000 		_ADR	UDOT    // no,display unsigned
 2609 45e0 BB2E0000 		_UNNEST			
 2610              	DOT1:
 2611 45e4 293B0000 		_ADR    STOD 
 2612 45e8 09460000 	    _ADR	DTOA
 2613 45ec DF300000 		_DOLIT  1 
 2613      01000000 
 2614 45f4 99440000 		_ADR	LPAD  
 2615 45f8 F9430000 	1:	_ADR	TYPEE
 2616 45fc BB2E0000 		_UNNEST			// yes, display signed
 2617              	
 2618              	
 2619              	/*************************
 2620              	  D>A ( d -- p u )
 2621              	  convert double integer to 
 2622              	  ASCII string in pad  
 2623              	input:
 2624              		d    int64 to convert 
 2625              	output:
 2626              		p     pointer to string  
 2627              		u     string length 
 2628              	**************************/
 2629 4600 B4450000 		_HEADER DTOA,3,"D>A" 
 2629      03443E41 
 2630 4608 504700BF 		_NEST
 2631 460c 69320000 	    _ADR DUPP 
 2632 4610 E5310000 		_ADR TOR 
 2633 4614 4D350000 		_ADR DABS 
 2634 4618 ED3F0000 		_ADR BDIGS
 2635 461c 59400000 		_ADR DIGS 
 2636 4620 A1310000 		_ADR RFROM 
 2637 4624 8D400000 		_ADR SIGN  
 2638 4628 B5400000 		_ADR EDIGS 
ARM GAS  forth.s 			page 163


 2639 462c BB2E0000 		_UNNEST 
 2640              	
 2641              	
 2642              	/*************************
 2643              	   D. ( d -- )
 2644              	   display double integer 
 2645              	**************************/
 2646 4630 04460000 		_HEADER DDOT,2,"D."
 2646      02442E00 
 2647 4638 504700BF 		_NEST
 2648 463c A5430000 		_ADR SPACE 
 2649 4640 09460000 		_ADR DTOA 
 2650 4644 DF300000 		_DOLIT 1
 2650      01000000 
 2651 464c 99440000 		_ADR LPAD 
 2652 4650 F9430000 		_ADR TYPEE
 2653 4654 BB2E0000 		_UNNEST 
 2654              	
 2655              	/**************************
 2656              		UD. ( d -- )
 2657              		display unsigned double
 2658              	**************************/
 2659 4658 34460000 		_HEADER UDDOT,3,"UD."
 2659      0355442E 
 2660 4660 504700BF 		_NEST
 2661 4664 A5430000 		_ADR SPACE 
 2662 4668 ED3F0000 		_ADR BDIGS
 2663 466c 59400000 		_ADR DIGS 
 2664 4670 B5400000 		_ADR EDIGS 
 2665 4674 DF300000 		_DOLIT 1
 2665      01000000 
 2666 467c 99440000 		_ADR LPAD 
 2667 4680 F9430000 		_ADR TYPEE
 2668 4684 BB2E0000 		_UNNEST 
 2669              	
 2670              	
 2671              	
 2672              	/***********************
 2673              		H. ( w -- )
 2674              		display integer 
 2675              		in hexadecimal 
 2676              	*********************/
 2677 4688 5C460000 		_HEADER HDOT,2,"H."
 2677      02482E00 
 2678 4690 504700BF 		_NEST 
 2679 4694 1D380000 		_ADR BASE
 2680 4698 75310000 		_ADR AT 
 2681 469c 79320000 		_ADR SWAP
 2682 46a0 09410000 		_ADR HEX
 2683 46a4 DF300000 		_DOLIT 0 
 2683      00000000 
 2684 46ac ED3F0000 		_ADR BDIGS
 2685 46b0 59400000 		_ADR DIGS
 2686 46b4 B5400000 		_ADR EDIGS
 2687 46b8 A5430000 		_ADR SPACE
 2688 46bc DF300000 		_DOLIT '$'
 2688      24000000 
ARM GAS  forth.s 			page 164


 2689 46c4 7D2F0000 		_ADR EMIT 
 2690 46c8 F9430000 		_ADR TYPEE
 2691 46cc 1D380000 		_ADR BASE
 2692 46d0 61310000 		_ADR STORE  
 2693 46d4 BB2E0000 		_UNNEST 
 2694              	
 2695              	
 2696              	/***********************
 2697              	    ?	   ( a -- )
 2698              	 	Display the contents
 2699              		in a memory cell.
 2700              	*************************/
 2701 46d8 8C460000 		_HEADER QUEST,1,"?"
 2701      013F00BF 
 2702 46e0 504700BF 		_NEST
 2703 46e4 75310000 		_ADR	AT
 2704 46e8 B9450000 		_ADR	DOT
 2705 46ec BB2E0000 		_UNNEST
 2706              	
 2707              	/**************
 2708              	  Parsing
 2709              	***************/
 2710              	
 2711              	/*********************************************
 2712              	    parse	( b u c -- b u delta //  string> )
 2713              	 	Scan word delimited by c. 
 2714              		Return found string and its offset.
 2715              	hidden word used by PARSE
 2716              	**********************************************/
 2717              	PARS:
 2718 46f0 504700BF 		_NEST
 2719 46f4 41380000 		_ADR	TEMP
 2720 46f8 61310000 		_ADR	STORE
 2721 46fc A9320000 		_ADR	OVER
 2722 4700 E5310000 		_ADR	TOR
 2723 4704 69320000 		_ADR	DUPP
 2724 4708 1F310000 		_QBRAN	PARS8
 2724      04480000 
 2725 4710 11340000 		_ADR	ONEM
 2726 4714 41380000 		_ADR	TEMP
 2727 4718 75310000 		_ADR	AT
 2728 471c 61340000 		_ADR	BLANK
 2729 4720 31360000 		_ADR	EQUAL
 2730 4724 1F310000 		_QBRAN	PARS3
 2730      78470000 
 2731 472c E5310000 		_ADR	TOR
 2732              	PARS1:
 2733 4730 61340000 		_ADR	BLANK
 2734 4734 A9320000 		_ADR	OVER
 2735 4738 95310000 		_ADR	CAT	 // skip leading blanks 
 2736 473c B5330000 		_ADR	SUBB
 2737 4740 D9320000 		_ADR	ZLESS
 2738 4744 B5350000 		_ADR	INVER
 2739 4748 1F310000 		_QBRAN	PARS2
 2739      74470000 
 2740 4750 01340000 		_ADR	ONEP
 2741 4754 01310000 		_DONXT	PARS1
ARM GAS  forth.s 			page 165


 2741      30470000 
 2742 475c A1310000 		_ADR	RFROM
 2743 4760 59320000 		_ADR	DROP
 2744 4764 DF300000 		_DOLIT	0
 2744      00000000 
 2745 476c 69320000 		_ADR	DUPP
 2746 4770 BB2E0000 		_UNNEST
 2747              	PARS2:
 2748 4774 A1310000 		_ADR	RFROM
 2749              	PARS3:
 2750 4778 A9320000 		_ADR	OVER
 2751 477c 79320000 		_ADR	SWAP
 2752 4780 E5310000 		_ADR	TOR
 2753              	PARS4:
 2754 4784 41380000 		_ADR	TEMP
 2755 4788 75310000 		_ADR	AT
 2756 478c A9320000 		_ADR	OVER
 2757 4790 95310000 		_ADR	CAT
 2758 4794 B5330000 		_ADR	SUBB // scan for delimiter
 2759 4798 41380000 		_ADR	TEMP
 2760 479c 75310000 		_ADR	AT
 2761 47a0 61340000 		_ADR	BLANK
 2762 47a4 31360000 		_ADR	EQUAL
 2763 47a8 1F310000 		_QBRAN	PARS5
 2763      B4470000 
 2764 47b0 D9320000 		_ADR	ZLESS
 2765              	PARS5:
 2766 47b4 1F310000 		_QBRAN	PARS6
 2766      D8470000 
 2767 47bc 01340000 		_ADR	ONEP
 2768 47c0 01310000 		_DONXT	PARS4
 2768      84470000 
 2769 47c8 69320000 		_ADR	DUPP
 2770 47cc E5310000 		_ADR	TOR
 2771 47d0 47310000 		_BRAN	PARS7
 2771      EC470000 
 2772              	PARS6:
 2773 47d8 A1310000 		_ADR	RFROM
 2774 47dc 59320000 		_ADR	DROP
 2775 47e0 69320000 		_ADR	DUPP
 2776 47e4 01340000 		_ADR	ONEP
 2777 47e8 E5310000 		_ADR	TOR
 2778              	PARS7:
 2779 47ec A9320000 		_ADR	OVER
 2780 47f0 B5330000 		_ADR	SUBB
 2781 47f4 A1310000 		_ADR	RFROM
 2782 47f8 A1310000 		_ADR	RFROM
 2783 47fc B5330000 		_ADR	SUBB
 2784 4800 BB2E0000 		_UNNEST
 2785              	PARS8:
 2786 4804 A9320000 		_ADR	OVER
 2787 4808 A1310000 		_ADR	RFROM
 2788 480c B5330000 		_ADR	SUBB
 2789 4810 BB2E0000 		_UNNEST
 2790              	
 2791              	/************************************
 2792              	    PARSE	( c -- b u //  string> )
ARM GAS  forth.s 			page 166


 2793              	 	Scan input stream and return 
 2794              		counted string delimited by c.
 2795              	************************************/
 2796 4814 DC460000 		_HEADER PARSE,5,"PARSE"
 2796      05504152 
 2796      534500BF 
 2797 4820 504700BF 		_NEST
 2798 4824 E5310000 		_ADR	TOR
 2799 4828 213E0000 		_ADR	TIB
 2800 482c 6D380000 		_ADR	INN
 2801 4830 75310000 		_ADR	AT
 2802 4834 A5330000 		_ADR	PLUS			// current input buffer pointer
 2803 4838 85380000 		_ADR	NTIB
 2804 483c 75310000 		_ADR	AT
 2805 4840 6D380000 		_ADR	INN
 2806 4844 75310000 		_ADR	AT
 2807 4848 B5330000 		_ADR	SUBB			// remaining count
 2808 484c A1310000 		_ADR	RFROM
 2809 4850 F1460000 		_ADR	PARS
 2810 4854 6D380000 		_ADR	INN
 2811 4858 FD360000 		_ADR	PSTOR
 2812 485c BB2E0000 		_UNNEST
 2813              	
 2814              	/*******************************
 2815              	    .(	  ( -- )
 2816              	 	Output following string 
 2817              		up to next ) .
 2818              	******************************/
 2819 4860 18480000 		_HEADER DOTPR,IMEDD+2,".("
 2819      822E2800 
 2820 4868 504700BF 		_NEST
 2821 486c DF300000 		_DOLIT	')'
 2821      29000000 
 2822 4874 21480000 		_ADR	PARSE
 2823 4878 F9430000 		_ADR	TYPEE
 2824 487c BB2E0000 		_UNNEST
 2825              	
 2826              	/************************
 2827              	    (	   ( -- )
 2828              	 	Ignore following 
 2829              		string up to next )
 2830              		A comment.
 2831              	************************/
 2832 4880 64480000 		_HEADER PAREN,IMEDD+1,"("
 2832      812800BF 
 2833 4888 504700BF 		_NEST
 2834 488c DF300000 		_DOLIT	')'
 2834      29000000 
 2835 4894 21480000 		_ADR	PARSE
 2836 4898 F1340000 		_ADR	DDROP
 2837 489c BB2E0000 		_UNNEST
 2838              	
 2839              	/*******************
 2840              	    \	   ( -- )
 2841              	 	Ignore following 
 2842              		text till the 
 2843              		end of line.
ARM GAS  forth.s 			page 167


 2844              	********************/
 2845 48a0 84480000 		_HEADER BKSLA,IMEDD+1,"\\"
 2845      815C00BF 
 2846 48a8 504700BF 		_NEST
 2847 48ac 85380000 		_ADR	NTIB
 2848 48b0 75310000 		_ADR	AT
 2849 48b4 6D380000 		_ADR	INN
 2850 48b8 61310000 		_ADR	STORE
 2851 48bc BB2E0000 		_UNNEST
 2852              	
 2853              	/******************************
 2854              	    CHAR	( -- c )
 2855              	 	Parse next word and
 2856              		return its first character.
 2857              	*******************************/
 2858 48c0 A4480000 		_HEADER CHAR,4,"CHAR"
 2858      04434841 
 2858      520000BF 
 2859 48cc 504700BF 		_NEST
 2860 48d0 61340000 		_ADR	BLANK
 2861 48d4 21480000 		_ADR	PARSE
 2862 48d8 59320000 		_ADR	DROP
 2863 48dc 95310000 		_ADR	CAT
 2864 48e0 BB2E0000 		_UNNEST
 2865              	
 2866              	/**********************************
 2867              		[CHAR] ( -- c )
 2868              		immediate version of CHAR 
 2869              	**********************************/
 2870 48e4 C4480000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2870      C65B4348 
 2870      41525D00 
 2871 48f0 504700BF 		_NEST 
 2872 48f4 CD480000 		_ADR CHAR
 2873 48f8 8D510000 		_ADR LITER 
 2874 48fc BB2E0000 		_UNNEST 
 2875              	
 2876              	/**********************************
 2877              	    WORD	( c -- a //  string> )
 2878              	 	Parse a word from input stream
 2879              		and copy it to code dictionary.
 2880              	***********************************/
 2881 4900 E8480000 		_HEADER WORDD,4,"WORD"
 2881      04574F52 
 2881      440000BF 
 2882 490c 504700BF 		_NEST
 2883 4910 21480000 		_ADR	PARSE
 2884 4914 E93D0000 		_ADR	HERE
 2885 4918 41340000 		_ADR	CELLP
 2886 491c 2D3F0000 		_ADR	PACKS
 2887 4920 BB2E0000 		_UNNEST
 2888              	
 2889              	/********************************
 2890              	    TOKEN	( -- a //  string> )
 2891              	 	Parse a word from input 
 2892              		stream and copy it to 
 2893              		name dictionary.
ARM GAS  forth.s 			page 168


 2894              	*********************************/
 2895 4924 04490000 		_HEADER TOKEN,5,"TOKEN"
 2895      05544F4B 
 2895      454E00BF 
 2896 4930 504700BF 		_NEST
 2897 4934 61340000 		_ADR	BLANK
 2898 4938 0D490000 		_ADR	WORDD
 2899 493c 254B0000 		_ADR	UPPER 
 2900 4940 BB2E0000 		_UNNEST
 2901              	
 2902              	/**********************
 2903              	  Dictionary search
 2904              	***********************/
 2905              	
 2906              	/*************************
 2907              	    NAME>	( na -- ca )
 2908              	 	Return a code address
 2909              		given a name address.
 2910              	**************************/
 2911 4944 28490000 		_HEADER NAMET,5,"NAME>"
 2911      054E414D 
 2911      453E00BF 
 2912 4950 504700BF 		_NEST
 2913 4954 51370000 		_ADR	COUNT
 2914 4958 DF300000 		_DOLIT	0x1F
 2914      1F000000 
 2915 4960 25330000 		_ADR	ANDD
 2916 4964 A5330000 		_ADR	PLUS
 2917 4968 293D0000 		_ADR	ALGND
 2918 496c BB2E0000 		_UNNEST
 2919              	
 2920              	/***************************************
 2921              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2922              	 	Compare u bytes in two strings. 
 2923              		Return 0 if identical.
 2924              	
 2925              	  Picatout 2020-12-01, 
 2926              	    Because of problem with .align 
 2927              		directive that doesn't fill 
 2928              		with zero's I had to change 
 2929              		the "SAME?" and "SEARCH" 
 2930              	 	words  to do a byte by byte comparison. 
 2931              	****************************************/
 2932 4970 48490000 		_HEADER SAMEQ,5,"SAME?"
 2932      0553414D 
 2932      453F00BF 
 2933 497c 504700BF 		_NEST
 2934 4980 E5310000 		_ADR	TOR
 2935 4984 47310000 		_BRAN	SAME2
 2935      C8490000 
 2936              	SAME1:
 2937 498c A9320000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2938 4990 D1310000 		_ADR	RAT   // a1 a2 a1 u 
 2939 4994 A5330000 		_ADR	PLUS  // a1 a2 a1+u 
 2940 4998 95310000 		_ADR	CAT	   // a1 a2 c1    		
 2941 499c A9320000 		_ADR	OVER  // a1 a2 c1 a2 
 2942 49a0 D1310000 		_ADR	RAT    
ARM GAS  forth.s 			page 169


 2943 49a4 A5330000 		_ADR	PLUS    
 2944 49a8 95310000 		_ADR	CAT	  // a1 a2 c1 c2
 2945 49ac B5330000 		_ADR	SUBB  
 2946 49b0 B5340000 		_ADR	QDUP
 2947 49b4 1F310000 		_QBRAN	SAME2
 2947      C8490000 
 2948 49bc A1310000 		_ADR	RFROM
 2949 49c0 59320000 		_ADR	DROP
 2950 49c4 BB2E0000 		_UNNEST	// strings not equal
 2951              	SAME2:
 2952 49c8 01310000 		_DONXT	SAME1
 2952      8C490000 
 2953 49d0 DF300000 		_DOLIT	0
 2953      00000000 
 2954 49d8 BB2E0000 		_UNNEST	// strings equal
 2955              	
 2956              	/***********************************
 2957              	    SEARCH	( a na -- ca na | a F )
 2958              	 	Search a vocabulary for a string.
 2959              		Return ca and na if succeeded.
 2960              	hidden word used by NAME?
 2961              	
 2962              	  Picatout 2020-12-01,  
 2963              		 Modified from original. 
 2964              	   See comment for word "SAME?" 
 2965              	************************************/
 2966              	SEARCH:
 2967 49dc 504700BF 		_NEST
 2968 49e0 79320000 		_ADR	SWAP			// na a	
 2969 49e4 51370000 		_ADR	COUNT			// na a+1 count
 2970 49e8 69320000 		_ADR	DUPP 
 2971 49ec 41380000 		_ADR	TEMP
 2972 49f0 61310000 		_ADR	STORE			// na a+1 count 
 2973 49f4 E5310000 		_ADR  TOR		// na a+1  R: count  
 2974 49f8 79320000 		_ADR	SWAP			// a+1 na
 2975              	SEARCH1:
 2976 49fc 69320000 		_ADR	DUPP			// a+1 na na
 2977 4a00 1F310000 		_QBRAN	SEARCH6	// end of vocabulary
 2977      544A0000 
 2978 4a08 69320000 		_ADR	DUPP			// a+1 na na
 2979 4a0c 95310000 		_ADR	CAT			// a+1 na name1
 2980 4a10 DF300000 		_DOLIT	MASKK
 2980      1FFFFFFF 
 2981 4a18 25330000 		_ADR	ANDD
 2982 4a1c D1310000 		_ADR	RAT			// a+1 na name1 count 
 2983 4a20 4D330000 		_ADR	XORR			// a+1 na,  same length?
 2984 4a24 1F310000 		_QBRAN	SEARCH2
 2984      3C4A0000 
 2985 4a2c 51340000 		_ADR	CELLM			// a+1 la
 2986 4a30 75310000 		_ADR	AT			// a+1 next_na
 2987 4a34 47310000 		_BRAN	SEARCH1			// try next word
 2987      FC490000 
 2988              	SEARCH2:   
 2989 4a3c 01340000 		_ADR	ONEP			// a+1 na+1
 2990 4a40 41380000 		_ADR	TEMP
 2991 4a44 75310000 		_ADR	AT			// a+1 na+1 count
 2992 4a48 7D490000 		_ADR	SAMEQ		// a+1 na+1 ? 
ARM GAS  forth.s 			page 170


 2993              	SEARCH3:	
 2994 4a4c 47310000 		_BRAN	SEARCH4
 2994      6C4A0000 
 2995              	SEARCH6:	
 2996 4a54 A1310000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2997 4a58 59320000 		_ADR	DROP			// a+1 0
 2998 4a5c 79320000 		_ADR	SWAP			// 0 a+1
 2999 4a60 11340000 		_ADR	ONEM			// 0 a
 3000 4a64 79320000 		_ADR	SWAP			// a 0 
 3001 4a68 BB2E0000 		_UNNEST			// return without a match
 3002              	SEARCH4:	
 3003 4a6c 1F310000 		_QBRAN	SEARCH5			// a+1 na+1
 3003      884A0000 
 3004 4a74 11340000 		_ADR	ONEM			// a+1 na
 3005 4a78 51340000 		_ADR	CELLM			// a+4 la
 3006 4a7c 75310000 		_ADR	AT			// a+1 next_na
 3007 4a80 47310000 		_BRAN	SEARCH1			// compare next name
 3007      FC490000 
 3008              	SEARCH5:	
 3009 4a88 A1310000 		_ADR	RFROM			// a+1 na+1 count
 3010 4a8c 59320000 		_ADR	DROP			// a+1 na+1
 3011 4a90 79320000 		_ADR	SWAP			// na+1 a+1
 3012 4a94 59320000 		_ADR	DROP			// na+1
 3013 4a98 11340000 		_ADR	ONEM			// na
 3014 4a9c 69320000 		_ADR	DUPP			// na na
 3015 4aa0 51490000 		_ADR	NAMET			// na ca
 3016 4aa4 79320000 		_ADR	SWAP			// ca na
 3017 4aa8 BB2E0000 		_UNNEST			//  return with a match
 3018              	
 3019              	/********************************
 3020              	    NAME?	( a -- ca na | a F )
 3021              	 	Search all context vocabularies 
 3022              		for a string.
 3023              	***********************************/
 3024 4aac 74490000 		_HEADER NAMEQ,5,"NAME?"
 3024      054E414D 
 3024      453F00BF 
 3025 4ab8 504700BF 		_NEST
 3026 4abc C9380000 		_ADR	CNTXT
 3027 4ac0 75310000 		_ADR	AT
 3028 4ac4 DD490000 		_ADR	SEARCH
 3029 4ac8 BB2E0000 		_UNNEST
 3030              	
 3031              	/********************
 3032              	  console input
 3033              	********************/
 3034              	
 3035              	/****************************
 3036              		ASCIZ ( a -- a+ )
 3037              		convert counted string to 
 3038              		null terminated string 
 3039              		in pad.
 3040              	*****************************/
 3041 4acc B04A0000 		_HEADER ASCIZ,5,"ASCIZ" 
 3041      05415343 
 3041      495A00BF 
 3042 4ad8 504700BF 		_NEST 
ARM GAS  forth.s 			page 171


 3043 4adc 51370000 		_ADR COUNT
 3044 4ae0 69320000 		_ADR DUPP
 3045 4ae4 E5310000 		_ADR TOR 
 3046 4ae8 013E0000 		_ADR PAD 
 3047 4aec 79320000 		_ADR SWAP
 3048 4af0 C53E0000 		_ADR MOVE  
 3049 4af4 013E0000 		_ADR PAD 
 3050 4af8 A1310000 		_ADR RFROM
 3051 4afc A5330000 		_ADR PLUS 
 3052 4b00 DF300000 		_DOLIT 0 
 3052      00000000 
 3053 4b08 79320000 		_ADR SWAP  
 3054 4b0c 81310000 		_ADR CSTOR
 3055 4b10 013E0000 		_ADR PAD   
 3056 4b14 BB2E0000 		_UNNEST 
 3057              	
 3058              	/***********************
 3059              		UPPER (cstring -- cstring )
 3060              		convert to upper case in situ
 3061              	*******************************/
 3062 4b18 D04A0000 		_HEADER UPPER,5,"UPPER"
 3062      05555050 
 3062      455200BF 
 3063 4b24 504700BF 		_NEST 
 3064 4b28 69320000 		_ADR DUPP 
 3065 4b2c E5310000 		_ADR TOR 
 3066 4b30 51370000 		_ADR COUNT
 3067 4b34 DF300000 		_DOLIT 0x1f
 3067      1F000000 
 3068 4b3c 25330000 		_ADR ANDD
 3069 4b40 E5310000 		_ADR TOR 
 3070 4b44 47310000 		_BRAN 3f
 3070      984B0000 
 3071 4b4c 69320000 	1:  _ADR DUPP 
 3072 4b50 51370000 		_ADR COUNT 
 3073 4b54 69320000 		_ADR DUPP 
 3074 4b58 DF300000 		_DOLIT 'a'-1
 3074      60000000 
 3075 4b60 B1360000 		_ADR GREAT
 3076 4b64 1F310000 		_QBRAN 2f 
 3076      904B0000 
 3077 4b6c 69320000 		_ADR DUPP 
 3078 4b70 DF300000 		_DOLIT 'z'+1 
 3078      7B000000 
 3079 4b78 81360000 		_ADR LESS 
 3080 4b7c 1F310000 		_QBRAN 2f 
 3080      904B0000 
 3081 4b84 DF300000 		_DOLIT 0x5f  
 3081      5F000000 
 3082 4b8c 25330000 		_ADR ANDD
 3083 4b90 C9340000 	2:	_ADR ROT
 3084 4b94 81310000 		_ADR CSTOR
 3085 4b98 01310000 	3:  _DONXT 1b
 3085      4C4B0000 
 3086 4ba0 59320000 		_ADR DROP 
 3087 4ba4 A1310000 		_ADR RFROM
 3088 4ba8 BB2E0000 		_UNNEST 
ARM GAS  forth.s 			page 172


 3089              	
 3090              	/**************************************
 3091              	   BKSP  ( bot eot cur -- bot eot cur )
 3092              	   Move cursor left by one character.
 3093              	hidden word used by KTAP
 3094              	***************************************/
 3095              	BKSP:
 3096 4bac 504700BF 		_NEST
 3097 4bb0 E5310000 		_ADR	TOR
 3098 4bb4 A9320000 		_ADR	OVER
 3099 4bb8 A1310000 		_ADR	RFROM
 3100 4bbc 79320000 		_ADR	SWAP
 3101 4bc0 A9320000 		_ADR	OVER
 3102 4bc4 4D330000 		_ADR	XORR
 3103 4bc8 1F310000 		_QBRAN	BACK1
 3103      F44B0000 
 3104 4bd0 DF300000 		_DOLIT	BKSPP
 3104      08000000 
 3105 4bd8 7D2F0000 		_ADR	EMIT
 3106 4bdc 11340000 		_ADR	ONEM
 3107 4be0 61340000 		_ADR	BLANK
 3108 4be4 7D2F0000 		_ADR	EMIT
 3109 4be8 DF300000 		_DOLIT	BKSPP
 3109      08000000 
 3110 4bf0 7D2F0000 		_ADR	EMIT
 3111              	BACK1:
 3112 4bf4 BB2E0000 		  _UNNEST
 3113              	
 3114              	/****************************************
 3115              	   TAP	 ( bot eot cur c -- bot eot cur )
 3116              	   Accept and echo the key stroke 
 3117              	   and bump the cursor.
 3118              	hidden word used by KTAP 
 3119              	****************************************/
 3120              	TAP:
 3121 4bf8 504700BF 		_NEST
 3122 4bfc 69320000 		_ADR	DUPP
 3123 4c00 7D2F0000 		_ADR	EMIT
 3124 4c04 A9320000 		_ADR	OVER
 3125 4c08 81310000 		_ADR	CSTOR
 3126 4c0c 01340000 		_ADR	ONEP
 3127 4c10 BB2E0000 		_UNNEST
 3128              	
 3129              	
 3130              	/*******************************************
 3131              	    kTAP	( bot eot cur c -- bot eot cur )
 3132              	 	Process a key stroke, CR or backspace.
 3133              	hidden word used by ACCEPT 
 3134              	*******************************************/
 3135              	KTAP:
 3136              	TTAP:
 3137 4c14 504700BF 		_NEST
 3138 4c18 69320000 		_ADR	DUPP
 3139 4c1c DF300000 		_DOLIT	CRR
 3139      0D000000 
 3140 4c24 4D330000 		_ADR	XORR
 3141 4c28 1F310000 		_QBRAN  KTAP2
ARM GAS  forth.s 			page 173


 3141      584C0000 
 3142 4c30 DF300000 		_DOLIT	BKSPP
 3142      08000000 
 3143 4c38 4D330000 		_ADR	XORR
 3144 4c3c 1F310000 		_QBRAN	KTAP1
 3144      504C0000 
 3145 4c44 61340000 		_ADR	BLANK
 3146 4c48 F94B0000 		_ADR	TAP
 3147 4c4c BB2E0000 		_UNNEST
 3148              	//	.word	0			// patch
 3149              	KTAP1:
 3150 4c50 AD4B0000 		_ADR	BKSP
 3151 4c54 BB2E0000 		_UNNEST
 3152              	KTAP2:
 3153 4c58 59320000 		_ADR	DROP
 3154 4c5c 79320000 		_ADR	SWAP
 3155 4c60 59320000 		_ADR	DROP
 3156 4c64 69320000 		_ADR	DUPP
 3157 4c68 BB2E0000 		_UNNEST
 3158              	
 3159              	/************************************
 3160              	    ACCEPT	( b u -- b u )
 3161              	 	Accept characters to input 
 3162              		buffer. Return with actual count.
 3163              	*************************************/
 3164 4c6c 1C4B0000 		_HEADER ACCEP,6,"ACCEPT"
 3164      06414343 
 3164      45505400 
 3165 4c78 504700BF 		_NEST
 3166 4c7c A9320000 		_ADR	OVER
 3167 4c80 A5330000 		_ADR	PLUS
 3168 4c84 A9320000 		_ADR	OVER
 3169              	ACCP1:
 3170 4c88 19350000 		_ADR	DDUP
 3171 4c8c 4D330000 		_ADR	XORR
 3172 4c90 1F310000 		_QBRAN	ACCP4
 3172      D04C0000 
 3173 4c98 592F0000 		_ADR	KEY
 3174 4c9c 69320000 		_ADR	DUPP
 3175 4ca0 61340000 		_ADR	BLANK
 3176 4ca4 DF300000 		_DOLIT 127
 3176      7F000000 
 3177 4cac B9390000 		_ADR	WITHI
 3178 4cb0 1F310000 		_QBRAN	ACCP2
 3178      C44C0000 
 3179 4cb8 F94B0000 		_ADR	TAP
 3180 4cbc 47310000 		_BRAN	ACCP3
 3180      C84C0000 
 3181              	ACCP2:
 3182 4cc4 154C0000 		_ADR	KTAP
 3183              	ACCP3:	  
 3184 4cc8 47310000 		_BRAN	ACCP1
 3184      884C0000 
 3185              	ACCP4:
 3186 4cd0 59320000 		_ADR	DROP
 3187 4cd4 A9320000 		_ADR	OVER
 3188 4cd8 B5330000 		_ADR	SUBB
ARM GAS  forth.s 			page 174


 3189 4cdc BB2E0000 		_UNNEST
 3190              	
 3191              	/*****************************
 3192              	    QUERY	( -- )
 3193              	 	Accept input stream 
 3194              		to terminal input buffer.
 3195              	******************************/
 3196 4ce0 704C0000 		_HEADER QUERY,5,"QUERY"
 3196      05515545 
 3196      525900BF 
 3197 4cec 504700BF 		_NEST
 3198 4cf0 213E0000 		_ADR	TIB
 3199 4cf4 DF300000 		_DOLIT 80
 3199      50000000 
 3200 4cfc 794C0000 		_ADR	ACCEP
 3201 4d00 85380000 		_ADR	NTIB
 3202 4d04 61310000 		_ADR	STORE
 3203 4d08 59320000 		_ADR	DROP
 3204 4d0c DF300000 		_DOLIT	0
 3204      00000000 
 3205 4d14 6D380000 		_ADR	INN
 3206 4d18 61310000 		_ADR	STORE
 3207 4d1c BB2E0000 		_UNNEST
 3208              	
 3209              	/********************
 3210              	  Error handling
 3211              	********************/
 3212              	
 3213              	/*********************
 3214              	    ABORT	( a -- )
 3215              	 	Reset data stack 
 3216              		and jump to QUIT.
 3217              	**********************/
 3218 4d20 E44C0000 		_HEADER ABORT,5,"ABORT"
 3218      0541424F 
 3218      525400BF 
 3219 4d2c 504700BF 		_NEST
 3220              	ABORT1: 
 3221 4d30 094E0000 		_ADR    LBRAC  
 3222 4d34 894F0000 		_ADR	PRESE
 3223 4d38 47310000 		_BRAN	QUIT
 3223      C44F0000 
 3224              	
 3225              	
 3226              	/*******************************
 3227              		PRT_ABORT ( a -- )
 3228              	    print message and abort 
 3229              	input:
 3230              		a   address of counted string 	
 3231              	
 3232              	hidden word 
 3233              	*******************************/
 3234              	PRT_ABORT:
 3235 4d40 504700BF 		_NEST 
 3236 4d44 A5430000 		_ADR SPACE 
 3237 4d48 51370000 		_ADR COUNT 
 3238 4d4c F9430000 		_ADR TYPEE 
ARM GAS  forth.s 			page 175


 3239 4d50 A5430000 		_ADR  SPACE 
 3240 4d54 DF300000 		_DOLIT '?'
 3240      3F000000 
 3241 4d5c 7D2F0000 		_ADR    EMIT 
 3242 4d60 2D440000 		_ADR    CR 
 3243 4d64 47310000 		_BRAN   ABORT1 
 3243      304D0000 
 3244              	
 3245              	
 3246              	
 3247              	
 3248              	/*******************************
 3249              	    _abort"	( f -- )
 3250              	 	Run time routine of ABORT"
 3251              		Abort with a message.
 3252              	hidden used by compiler 
 3253              	********************************/
 3254              	ABORQ:
 3255 4d6c 504700BF 		_NEST
 3256 4d70 4D440000 		_ADR	DOSTR
 3257 4d74 C9340000 		_ADR	ROT  
 3258 4d78 1F310000 		_QBRAN	1f	// error flag
 3258      944D0000 
 3259 4d80 A5430000 		_ADR    SPACE 
 3260 4d84 F9430000 		_ADR    TYPEE
 3261 4d88 2D440000 		_ADR    CR  
 3262 4d8c 47310000 		_BRAN   ABORT1
 3262      304D0000 
 3263              	1:
 3264 4d94 F1340000 		_ADR	DDROP
 3265 4d98 BB2E0000 		_UNNEST			// drop message
 3266              	
 3267              	
 3268              	/************************
 3269              	  The text interpreter
 3270              	************************/
 3271              	
 3272              	/***************************
 3273              	    $INTERPRET  ( a -- )
 3274              	 	Interpret a word. 
 3275              		If failed, try to 
 3276              		convert it to an integer.
 3277              	******************************/
 3278 4d9c 244D0000 		_HEADER INTER,10,"$INTERPRET"
 3278      0A24494E 
 3278      54455250 
 3278      52455400 
 3279 4dac 504700BF 		_NEST
 3280 4db0 B94A0000 		_ADR	NAMEQ
 3281 4db4 B5340000 		_ADR	QDUP	// ?defined
 3282 4db8 1F310000 		_QBRAN	INTE1
 3282      EC4D0000 
 3283 4dc0 75310000 		_ADR	AT
 3284 4dc4 DF300000 		_DOLIT	COMPO
 3284      40000000 
 3285 4dcc 25330000 		_ADR	ANDD	// ?compile only lexicon bits
 3286 4dd0 6D4D0000 		_ABORQ	13," compile only"
ARM GAS  forth.s 			page 176


 3286      0D20636F 
 3286      6D70696C 
 3286      65206F6E 
 3286      6C7900BF 
 3287 4de4 F5300000 		_ADR	EXECU
 3288 4de8 BB2E0000 		_UNNEST			// execute defined word
 3289              	INTE1:
 3290 4dec 79430000 		_ADR	NUMBERQ
 3291 4df0 1F310000 		_QBRAN	INTE2
 3291      FC4D0000 
 3292 4df8 BB2E0000 		_UNNEST
 3293              	INTE2:
 3294 4dfc 414D0000 		_ADR	PRT_ABORT	// error
 3295              	
 3296              	/******************************
 3297              	    [	   ( -- )
 3298              	 	Start the text interpreter.
 3299              	*******************************/
 3300 4e00 A04D0000 		_HEADER LBRAC,IMEDD+1,"["
 3300      815B00BF 
 3301 4e08 504700BF 		_NEST
 3302 4e0c DF300000 		_DOLIT	INTER
 3302      AC4D0000 
 3303 4e14 9D380000 		_ADR	TEVAL
 3304 4e18 61310000 		_ADR	STORE
 3305 4e1c DF300000 		_DOLIT  0 
 3305      00000000 
 3306 4e24 A5370000 		_ADR    STATE 
 3307 4e28 61310000 		_ADR    STORE 
 3308 4e2c BB2E0000 		_UNNEST
 3309              	
 3310              	/**********************
 3311              	    .OK	 ( -- )
 3312              	 	Display "ok" only 
 3313              		while interpreting.
 3314              	************************/
 3315 4e30 044E0000 		_HEADER DOTOK,3,".OK"
 3315      032E4F4B 
 3316 4e38 504700BF 		_NEST
 3317 4e3c DF300000 		_DOLIT	INTER
 3317      AC4D0000 
 3318 4e44 9D380000 		_ADR	TEVAL
 3319 4e48 75310000 		_ADR	AT
 3320 4e4c 31360000 		_ADR	EQUAL
 3321 4e50 1F310000 		_QBRAN	DOTO1
 3321      604E0000 
 3322 4e58 89440000 		_DOTQP	3," ok"
 3322      03206F6B 
 3323              	DOTO1:
 3324 4e60 2D440000 		_ADR	CR
 3325 4e64 BB2E0000 		_UNNEST
 3326              	
 3327              	/*************************
 3328              	    ?STACK	( -- )
 3329              	 	Abort if the data 
 3330              		stack underflows.
 3331              	************************/
ARM GAS  forth.s 			page 177


 3332 4e68 344E0000 		_HEADER QSTAC,6,"?STACK"
 3332      063F5354 
 3332      41434B00 
 3333 4e74 504700BF 		_NEST
 3334 4e78 913D0000 		_ADR	DEPTH
 3335 4e7c D9320000 		_ADR	ZLESS	// check only for underflow
 3336 4e80 6D4D0000 		_ABORQ	9,"underflow"
 3336      09756E64 
 3336      6572666C 
 3336      6F7700BF 
 3337 4e90 BB2E0000 		_UNNEST
 3338              	
 3339              	/*******************
 3340              	    EVAL	( -- )
 3341              	 	Interpret the 
 3342              		input stream.
 3343              	*******************/
 3344 4e94 6C4E0000 		_HEADER EVAL,4,"EVAL"
 3344      04455641 
 3344      4C0000BF 
 3345 4ea0 504700BF 		_NEST
 3346              	EVAL1:
 3347 4ea4 31490000 	    _ADR	TOKEN
 3348 4ea8 69320000 		_ADR	DUPP
 3349 4eac 95310000 		_ADR	CAT	// ?input stream empty
 3350 4eb0 1F310000 		_QBRAN	EVAL2
 3350      CC4E0000 
 3351 4eb8 9D380000 		_ADR	TEVAL
 3352 4ebc 753E0000 		_ADR	ATEXE
 3353 4ec0 754E0000 		_ADR	QSTAC	// evaluate input, check stack
 3354 4ec4 47310000 		_BRAN	EVAL1
 3354      A44E0000 
 3355              	EVAL2:
 3356 4ecc 59320000 		_ADR	DROP
 3357 4ed0 394E0000 		_ADR	DOTOK
 3358 4ed4 BB2E0000 		_UNNEST	// prompt
 3359              	
 3360              	
 3361              	/******************************
 3362              		EVALUATE ( ix* a u -- jx* )
 3363              	    interpret string 
 3364              	input:
 3365              	    ix*  argument required 
 3366              		a   address string to interpret 
 3367              		u   str length 
 3368              	output:
 3369              		jx*  evalution results 
 3370              	***********************************/
 3371 4ed8 984E0000 		_HEADER EVALUATE,8,"EVALUATE"
 3371      08455641 
 3371      4C554154 
 3371      450000BF 
 3372 4ee8 504700BF 		_NEST 
 3373              		// save original source specs
 3374 4eec DF300000 		_DOLIT UPP+TOIN 
 3374      2C000020 
 3375 4ef4 69320000 		_ADR   DUPP 
ARM GAS  forth.s 			page 178


 3376 4ef8 75310000 		_ADR  AT 
 3377 4efc E5310000 		_ADR   TOR 
 3378 4f00 DF300000 		_DOLIT  0
 3378      00000000 
 3379 4f08 79320000 		_ADR  SWAP
 3380 4f0c 61310000 		_ADR   STORE 
 3381 4f10 DF300000 		_DOLIT UPP+SRC 
 3381      30000020 
 3382 4f18 39370000 		_ADR   DAT 
 3383 4f1c F9310000 		_ADR   DTOR 
 3384 4f20 DF300000 		_DOLIT -1
 3384      FFFFFFFF 
 3385 4f28 DF300000 		_DOLIT UPP+SRCID 
 3385      38000020 
 3386 4f30 61310000 		_ADR   STORE 
 3387 4f34 DF300000 		_DOLIT UPP+SRC 
 3387      30000020 
 3388 4f3c 19370000 		_ADR   DSTOR
 3389 4f40 A14E0000 		_ADR   EVAL 
 3390              	    // restore original source specs 
 3391 4f44 B5310000 		_ADR   DRFROM 
 3392 4f48 DF300000 		_DOLIT UPP+SRC 
 3392      30000020 
 3393 4f50 19370000 		_ADR   DSTOR 
 3394 4f54 A1310000 		_ADR   RFROM 
 3395 4f58 DF300000 		_DOLIT UPP+TOIN 
 3395      2C000020 
 3396 4f60 61310000 		_ADR   STORE 
 3397 4f64 DF300000 		_DOLIT 0 
 3397      00000000 
 3398 4f6c DF300000 		_DOLIT UPP+SRCID 
 3398      38000020 
 3399 4f74 61310000 		_ADR   STORE 
 3400 4f78 BB2E0000 		_UNNEST 
 3401              	
 3402              	
 3403              	/**********************************
 3404              	    PRESET	( -- )
 3405              	 	Reset data stack pointer 
 3406              		and the terminal input buffer.
 3407              	**********************************/
 3408 4f7c DC4E0000 		_HEADER PRESE,6,"PRESET"
 3408      06505245 
 3408      53455400 
 3409 4f88 504700BF 		_NEST 
 3410 4f8c DF300000 		_DOLIT SPP 
 3410      B0FE0120 
 3411 4f94 25320000 		_ADR SPSTOR
 3412 4f98 DF300000 		_DOLIT TIBB        
 3412      B0FE0120 
 3413 4fa0 DF300000 		_DOLIT 0   
 3413      00000000 
 3414 4fa8 DF300000 		_DOLIT UPP+SRC  
 3414      30000020 
 3415 4fb0 19370000 		_ADR   DSTOR    
 3416 4fb4 BB2E0000 		_UNNEST 
 3417              	
ARM GAS  forth.s 			page 179


 3418              	/*********************
 3419              	    QUIT	( -- )
 3420              	 	Reset return stack 
 3421              		pointer and start 
 3422              		text interpreter.
 3423              	***********************/
 3424 4fb8 804F0000 		_HEADER QUIT,4,"QUIT"
 3424      04515549 
 3424      540000BF 
 3425 4fc4 DF300000 		_DOLIT RPP 
 3425      80FF0120 
 3426 4fcc 15320000 		_ADR RPSTOR 
 3427              	QUIT1:
 3428 4fd0 094E0000 		_ADR	LBRAC			// start interpretation
 3429              	QUIT2:
 3430 4fd4 ED4C0000 		_ADR	QUERY			// get input
 3431 4fd8 A14E0000 		_ADR	EVAL
 3432 4fdc 47310000 		_BRAN	QUIT2	// continue till error
 3432      D44F0000 
 3433              	
 3434              	/***************************
 3435              		FORGET ( <string> -- )
 3436              		forget all definition 
 3437              		starting at <string>
 3438              	****************************/
 3439 4fe4 BC4F0000 		_HEADER FORGET,6,"FORGET"
 3439      06464F52 
 3439      47455400 
 3440 4ff0 504700BF 		_NEST 
 3441 4ff4 31490000 		_ADR TOKEN 
 3442 4ff8 69320000 		_ADR DUPP 
 3443 4ffc 1F310000 		_QBRAN 9f 
 3443      38500000 
 3444 5004 B94A0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3445 5008 B5340000 		_ADR QDUP 
 3446 500c 1F310000 		_QBRAN 8f
 3446      34500000 
 3447 5014 51340000 		_ADR CELLM // ( ca la )
 3448 5018 69320000 		_ADR DUPP 
 3449 501c DD380000 		_ADR CPP   
 3450 5020 61310000 		_ADR STORE
 3451 5024 75310000 		_ADR AT 
 3452 5028 09390000 		_ADR LAST 
 3453 502c 61310000 		_ADR STORE
 3454 5030 DD560000 		_ADR OVERT 
 3455 5034 59320000 	8:  _ADR DROP 
 3456 5038 BB2E0000 	9:	_UNNEST 
 3457              	
 3458              		.p2align 2 
 3459              	
 3460              	/*****************
 3461              	  The compiler
 3462              	******************/
 3463              	
 3464              	/**************************************
 3465              		POSTPONE <name> ( -- )
 3466              		use to compile immediate word 
ARM GAS  forth.s 			page 180


 3467              	**************************************/
 3468 503c E84F0000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3468      C8504F53 
 3468      54504F4E 
 3468      450000BF 
 3469 504c 504700BF 		_NEST 
 3470 5050 89500000 		_ADR ITICK
 3471 5054 49570000 		_ADR CALLC  
 3472 5058 BB2E0000 		_UNNEST 
 3473              	
 3474              	
 3475              	/**************************************
 3476              	    '	   ( -- ca )
 3477              	 	Search context vocabularies 
 3478              		for the next word in input stream.
 3479              	***************************************/
 3480 505c 40500000 		_HEADER TICK,1,"'"
 3480      012700BF 
 3481 5064 504700BF 		_NEST
 3482 5068 31490000 		_ADR	TOKEN
 3483 506c B94A0000 		_ADR	NAMEQ	// ?defined
 3484 5070 1F310000 		_QBRAN	TICK1
 3484      7C500000 
 3485 5078 BB2E0000 		_UNNEST	// yes, push code address
 3486              	TICK1:
 3487 507c 414D0000 		_ADR PRT_ABORT	// error
 3488              	
 3489              	/*****************************************
 3490              		['] ( -- ca )
 3491              		immediate version of ' 
 3492              	****************************************/
 3493 5080 60500000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
 3493      C35B275D 
 3494 5088 504700BF 		_NEST 
 3495 508c 65500000 		_ADR TICK  
 3496 5090 BB2E0000 		_UNNEST 
 3497              	
 3498              	
 3499              	/***********************************
 3500              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
 3501              		search all context for name at 
 3502              		c-adr 
 3503              	input:
 3504              		c-adr   name 
 3505              	output:
 3506              		c-adr  0   not found 
 3507              		xt 1   found word immediate 
 3508              		xt -1  found normal word 
 3509              	***********************************/
 3510 5094 84500000 		_HEADER FIND,4,"FIND"
 3510      0446494E 
 3510      440000BF 
 3511 50a0 504700BF 		_NEST 
 3512 50a4 B94A0000 		_ADR NAMEQ 
 3513 50a8 69320000 		_ADR DUPP 
 3514 50ac 1F310000 		_QBRAN 9f
 3514      E0500000 
ARM GAS  forth.s 			page 181


 3515 50b4 95310000 		_ADR CAT 
 3516 50b8 DF300000 		_DOLIT IMEDD
 3516      80000000 
 3517 50c0 25330000 		_ADR ANDD 
 3518 50c4 DF300000 		_DOLIT 7 
 3518      07000000 
 3519 50cc 7D330000 		_ADR RSHIFT  
 3520 50d0 69320000 		_ADR DUPP 
 3521 50d4 33310000 		_TBRAN 9f 
 3521      E0500000 
 3522 50dc B5350000 		_ADR INVER 
 3523 50e0 BB2E0000 	9:	_UNNEST 
 3524              	
 3525              	
 3526              	
 3527              	/***********************
 3528              	    ALLOT	( n -- )
 3529              	 	Allocate n bytes to 
 3530              		the ram area.
 3531              	************************/
 3532 50e4 98500000 		_HEADER ALLOT,5,"ALLOT"
 3532      05414C4C 
 3532      4F5400BF 
 3533 50f0 504700BF 		_NEST
 3534 50f4 DD380000 		_ADR	CPP
 3535 50f8 FD360000 		_ADR	PSTOR
 3536 50fc BB2E0000 		_UNNEST			// adjust code pointer
 3537              	
 3538              	/******************************
 3539              	    ,	   ( w -- )
 3540              	 	Compile an integer 
 3541              		into the code dictionary.
 3542              	******************************/
 3543 5100 E8500000 		_HEADER COMMA,1,","
 3543      012C00BF 
 3544 5108 504700BF 		_NEST
 3545 510c E93D0000 		_ADR	HERE
 3546 5110 69320000 		_ADR	DUPP
 3547 5114 41340000 		_ADR	CELLP	// cell boundary
 3548 5118 DD380000 		_ADR	CPP
 3549 511c 61310000 		_ADR	STORE
 3550 5120 61310000 		_ADR	STORE
 3551 5124 BB2E0000 		_UNNEST	// adjust code pointer, compile
 3552              		.p2align 2 
 3553              	
 3554              	/************************************
 3555              	    [COMPILE]   ( -- //  string> )
 3556              	 	Compile the next immediate word 
 3557              		into code dictionary.
 3558              	*************************************/
 3559 5128 04510000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3559      895B434F 
 3559      4D50494C 
 3559      455D00BF 
 3560 5138 504700BF 		_NEST
 3561 513c 65500000 		_ADR	TICK
 3562 5140 09510000 		_ADR	COMMA
ARM GAS  forth.s 			page 182


 3563 5144 BB2E0000 		_UNNEST
 3564              	
 3565              	/****************************
 3566              	    COMPILE	( -- )
 3567              	 	Compile the next address 
 3568              		in colon list to code 
 3569              		dictionary.
 3570              	*******************************/
 3571 5148 2C510000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3571      47434F4D 
 3571      50494C45 
 3572 5154 504700BF 		_NEST
 3573 5158 A1310000 		_ADR	RFROM
 3574 515c 69320000 		_ADR	DUPP 
 3575 5160 75310000 		_ADR	AT
 3576 5164 DF300000 		_DOLIT 1 
 3576      01000000 
 3577 516c 39330000 		_ADR	ORR 
 3578 5170 09510000 		_ADR	COMMA 
 3579 5174 41340000 		_ADR	CELLP 
 3580 5178 E5310000 		_ADR	TOR 
 3581 517c BB2E0000 		_UNNEST	// adjust return address
 3582              	
 3583              	/*************************
 3584              	    LITERAL	( w -- )
 3585              	 	Compile tos to code 
 3586              		dictionary as an 
 3587              		integer literal.
 3588              	***************************/
 3589 5180 4C510000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3589      874C4954 
 3589      4552414C 
 3590 518c 504700BF 		_NEST
 3591 5190 DF300000 		_COMPI	DOLIT
 3591      DE300000 
 3591      49570000 
 3592 519c 09510000 		_ADR	COMMA
 3593 51a0 BB2E0000 		_UNNEST
 3594              	
 3595              	/********************
 3596              	    $,"	( -- )
 3597              	 	Compile a literal 
 3598              		string up to next " .
 3599              	hidden word 
 3600              	************************/
 3601              	STRCQ:
 3602 51a4 504700BF 		_NEST
 3603 51a8 DF300000 		_DOLIT -4
 3603      FCFFFFFF 
 3604 51b0 DD380000 		_ADR	CPP
 3605 51b4 FD360000 		_ADR	PSTOR
 3606 51b8 DF300000 		_DOLIT	'\"'
 3606      22000000 
 3607 51c0 0D490000 		_ADR	WORDD	// move word to code dictionary
 3608 51c4 51370000 		_ADR	COUNT
 3609 51c8 A5330000 		_ADR	PLUS
 3610 51cc 293D0000 		_ADR	ALGND	// calculate aligned end of string
ARM GAS  forth.s 			page 183


 3611 51d0 DD380000 		_ADR	CPP
 3612 51d4 61310000 		_ADR	STORE   // adjust the code pointer
 3613 51d8 BB2E0000 		_UNNEST 			
 3614              	
 3615              	/*******************
 3616              	   Structures
 3617              	*******************/
 3618              	
 3619              	/*************************
 3620              	    FOR	 ( -- a )
 3621              	 	Start a FOR-NEXT loop 
 3622              		structure in a colon 
 3623              		definition.
 3624              	**************************/
 3625 51dc 84510000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3625      C3464F52 
 3626 51e4 504700BF 		_NEST
 3627 51e8 DF300000 		_COMPI	TOR
 3627      E4310000 
 3627      49570000 
 3628 51f4 E93D0000 		_ADR	HERE
 3629 51f8 BB2E0000 		_UNNEST
 3630              	
 3631              	/********************************
 3632              		DO ( limit start -- )
 3633              		initialise a DO...LOOP 
 3634              		or DO...+LOOP 
 3635              	********************************/
 3636 51fc E0510000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3636      C2444F00 
 3637 5204 504700BF 		_NEST
 3638 5208 DF300000 		_COMPI SWAP
 3638      78320000 
 3638      49570000 
 3639 5214 DF300000 		_COMPI TOR 
 3639      E4310000 
 3639      49570000 
 3640 5220 DF300000 		_COMPI TOR 
 3640      E4310000 
 3640      49570000 
 3641 522c E93D0000 		_ADR HERE 
 3642 5230 DF300000 		_DOLIT 0  // end marker used by resolve_leave 
 3642      00000000 
 3643 5238 BB2E0000 		_UNNEST 
 3644              	
 3645              	DOPLOOP: // ( n -- R: limit counter )
 3646 523c 3246     		mov T2,TOS 
 3647 523e 57F8046B 		_POP 
 3648 5242 B8E80300 		ldmfd RSP!,{T0,T1}
 3649 5246 1044     		add T0,T2 
 3650 5248 28E90300 		stmfd RSP!,{T0,T1}
 3651 524c 8842     		cmp T0,T1 
 3652 524e 05D4     		bmi 9f 
 3653 5250 08F10808 		add RSP,#8
 3654 5254 0CF1040C 		add IP,#4
 3655 5258 FDF72CBE 		_NEXT 
 3656 525c DCF800C0 	9:  ldr IP,[IP]
ARM GAS  forth.s 			page 184


 3657 5260 FDF728BE 		_NEXT 
 3658              		
 3659              	/***************************
 3660              		+LOOP ( a -- )
 3661              		increment counter 
 3662              		end loop if countr>limit
 3663              	****************************/
 3664 5264 00520000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3664      C52B4C4F 
 3664      4F5000BF 
 3665 5270 504700BF 		_NEST 
 3666 5274 DF300000 		_COMPI DOPLOOP 
 3666      3C520000 
 3666      49570000 
 3667 5280 B5520000 		_ADR resolve_leave 
 3668 5284 09510000 		_ADR COMMA
 3669 5288 BB2E0000 		_UNNEST 
 3670              	
 3671              	DOLOOP: // ( -- R: limit counter )
 3672 528c D8F80000 		ldr T0,[RSP]
 3673 5290 00F10100 		add T0,#1
 3674 5294 C8F80000 		str T0,[RSP]
 3675 5298 D8F80410 		ldr T1,[RSP,#4]
 3676 529c 8842     		cmp T0,T1 
 3677 529e 05D4     		bmi 9f
 3678 52a0 08F10808 		add RSP,#8  // drop counter and limit  
 3679 52a4 0CF1040C 		add IP,IP,#4 // skip loop address 
 3680 52a8 FDF704BE 		_NEXT 
 3681 52ac DCF800C0 	9:  ldr IP,[IP]
 3682 52b0 FDF700BE 		_NEXT 
 3683              	
 3684              	
 3685              	resolve_leave:
 3686 52b4 504700BF 		_NEST
 3687 52b8 B5340000 	1:	_ADR QDUP 
 3688 52bc 1F310000 		_QBRAN 2f 
 3688      DC520000 
 3689 52c4 E93D0000 		_ADR HERE 
 3690 52c8 41340000 		_ADR CELLP 
 3691 52cc 79320000 		_ADR SWAP 
 3692 52d0 61310000 		_ADR STORE 
 3693 52d4 47310000 		_BRAN 1b 
 3693      B8520000 
 3694              	2:
 3695 52dc BB2E0000 		_UNNEST 
 3696              	
 3697              	/********************************
 3698              		LOOP ( a -- )
 3699              		increment counter 
 3700              		end loop if >= limit 
 3701              	*********************************/
 3702 52e0 68520000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3702      C44C4F4F 
 3702      500000BF 
 3703 52ec 504700BF 		_NEST 
 3704 52f0 DF300000 		_COMPI DOLOOP
 3704      8C520000 
ARM GAS  forth.s 			page 185


 3704      49570000 
 3705 52fc B5520000 		_ADR resolve_leave 
 3706 5300 09510000 		_ADR COMMA  // resolve loop branch 
 3707 5304 BB2E0000 		_UNNEST 
 3708              	
 3709              	/************************************
 3710              		UNLOOP ( -- ) ( R: limit count -- )
 3711              		remove loop parameters from rstack 
 3712              	****************************************/
 3713 5308 E4520000 		_HEADER UNLOOP,6,"UNLOOP"
 3713      06554E4C 
 3713      4F4F5000 
 3714 5314 08F10808 		add RSP,#2*CELLL 
 3715 5318 FDF7CCBD 		_NEXT 
 3716              	
 3717              	
 3718              	/*********************************
 3719              		LEAVE ( -- ) ( R: loop-sys -- ) 
 3720              		exit inner DO...LOOP 
 3721              	**********************************/
 3722 531c 0C530000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 3722      C54C4541 
 3722      564500BF 
 3723 5328 504700BF 		_NEST 
 3724 532c DF300000 		_COMPI DOLEAVE
 3724      5C530000 
 3724      49570000 
 3725 5338 E93D0000 		_ADR HERE
 3726 533c A9320000 		_ADR OVER 
 3727 5340 1F310000 		_QBRAN 1f
 3727      4C530000 
 3728 5348 79320000 		_ADR SWAP 
 3729 534c DF300000 	1:	_DOLIT 0 
 3729      00000000 
 3730 5354 09510000 		_ADR COMMA   
 3731 5358 BB2E0000 		_UNNEST 
 3732              	
 3733              	// LEAVE runtime
 3734              	// remove limit and counter from rstack  
 3735              	DOLEAVE:
 3736 535c 08F10808 		add RSP,#2*CELLL
 3737 5360 DCF800C0 		ldr IP,[IP] 
 3738 5364 FDF7A6BD 		_NEXT 
 3739              	
 3740              	
 3741              	/**********************
 3742              	    BEGIN	( -- a )
 3743              	 	Start an infinite 
 3744              		or indefinite 
 3745              		loop structure.
 3746              	************************/
 3747 5368 20530000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3747      C5424547 
 3747      494E00BF 
 3748 5374 504700BF 		_NEST
 3749 5378 E93D0000 		_ADR	HERE
 3750 537c BB2E0000 		_UNNEST
ARM GAS  forth.s 			page 186


 3751              		.p2align 2 
 3752              	
 3753              	/********************
 3754              	    NEXT	( a -- )
 3755              	 	Terminate a FOR-NEXT
 3756              		loop structure.
 3757              	**************************/
 3758 5380 6C530000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3758      C44E4558 
 3758      540000BF 
 3759 538c 504700BF 		_NEST
 3760 5390 DF300000 		_COMPI	DONXT
 3760      00310000 
 3760      49570000 
 3761 539c 09510000 		_ADR	COMMA
 3762 53a0 BB2E0000 		_UNNEST
 3763              	
 3764              	/***************************
 3765              		I ( -- n )
 3766              		stack for loop counter 
 3767              	***************************/
 3768 53a4 84530000 		_HEADER I,1+COMPO,"I"
 3768      414900BF 
 3769 53ac 47F8046D 		_PUSH 
 3770 53b0 D8F80060 		ldr TOS,[RSP]
 3771 53b4 FDF77EBD 		_NEXT 
 3772              	
 3773              	/****************************
 3774              		J ( -- n )
 3775              		stack outer loop counter 
 3776              	****************************/
 3777 53b8 A8530000 		_HEADER J,1,"J"
 3777      014A00BF 
 3778 53c0 47F8046D 		_PUSH 
 3779 53c4 D8F80460 		ldr TOS,[RSP,#4]
 3780 53c8 FDF774BD 		_NEXT 
 3781              	
 3782              	/**********************
 3783              	    UNTIL	( a -- )
 3784              	 	Terminate a BEGIN-UNTIL
 3785              		indefinite loop structure.
 3786              	******************************/
 3787 53cc BC530000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3787      C5554E54 
 3787      494C00BF 
 3788 53d8 504700BF 		_NEST
 3789 53dc DF300000 		_COMPI	QBRAN
 3789      1E310000 
 3789      49570000 
 3790 53e8 09510000 		_ADR	COMMA
 3791 53ec BB2E0000 		_UNNEST
 3792              	
 3793              	/**********************
 3794              	    AGAIN	( a -- )
 3795              	 	Terminate a BEGIN-AGAIN
 3796              		infinite loop structure.
 3797              	*****************************/
ARM GAS  forth.s 			page 187


 3798 53f0 D0530000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3798      C5414741 
 3798      494E00BF 
 3799 53fc 504700BF 		_NEST
 3800 5400 DF300000 		_COMPI	BRAN
 3800      46310000 
 3800      49570000 
 3801 540c 09510000 		_ADR	COMMA
 3802 5410 BB2E0000 		_UNNEST
 3803              	
 3804              	/************************
 3805              	    IF	  ( -- A )
 3806              	 	Begin a conditional
 3807              		branch structure.
 3808              	**************************/
 3809 5414 F4530000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3809      C2494600 
 3810 541c 504700BF 		_NEST
 3811 5420 DF300000 		_COMPI	QBRAN
 3811      1E310000 
 3811      49570000 
 3812 542c E93D0000 		_ADR	HERE
 3813 5430 DF300000 		_DOLIT	4
 3813      04000000 
 3814 5438 DD380000 		_ADR	CPP
 3815 543c FD360000 		_ADR	PSTOR
 3816 5440 BB2E0000 		_UNNEST
 3817              	
 3818              	/*************************
 3819              	    AHEAD	( -- A )
 3820              	 	Compile a forward 
 3821              		branch instruction.
 3822              	*************************/
 3823 5444 18540000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3823      C5414845 
 3823      414400BF 
 3824 5450 504700BF 		_NEST
 3825 5454 DF300000 		_COMPI	BRAN
 3825      46310000 
 3825      49570000 
 3826 5460 E93D0000 		_ADR	HERE
 3827 5464 DF300000 		_DOLIT	4
 3827      04000000 
 3828 546c DD380000 		_ADR	CPP
 3829 5470 FD360000 		_ADR	PSTOR
 3830 5474 BB2E0000 		_UNNEST
 3831              	
 3832              	/**************************
 3833              	    REPEAT	( A a -- )
 3834              	 	Terminate a BEGIN-WHILE-REPEAT
 3835              		indefinite loop.
 3836              	**********************************/
 3837 5478 48540000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3837      C6524550 
 3837      45415400 
 3838 5484 504700BF 		_NEST
 3839 5488 FD530000 		_ADR	AGAIN
ARM GAS  forth.s 			page 188


 3840 548c E93D0000 		_ADR	HERE
 3841 5490 79320000 		_ADR	SWAP
 3842 5494 61310000 		_ADR	STORE
 3843 5498 BB2E0000 		_UNNEST
 3844              	
 3845              	/*********************
 3846              	    THEN	( A -- )
 3847              	 	Terminate a conditional
 3848              		branch structure.
 3849              	*****************************/
 3850 549c 7C540000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3850      C4544845 
 3850      4E0000BF 
 3851 54a8 504700BF 		_NEST
 3852 54ac E93D0000 		_ADR	HERE
 3853 54b0 79320000 		_ADR	SWAP
 3854 54b4 61310000 		_ADR	STORE
 3855 54b8 BB2E0000 		_UNNEST
 3856              	
 3857              	/***************************
 3858              	    AFT	 ( a -- a A )
 3859              	 	Jump to THEN in a 
 3860              		FOR-AFT-THEN-NEXT loop 
 3861              		the first time through.
 3862              	*****************************/
 3863 54bc A0540000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3863      C3414654 
 3864 54c4 504700BF 		_NEST
 3865 54c8 59320000 		_ADR	DROP
 3866 54cc 51540000 		_ADR	AHEAD
 3867 54d0 75530000 		_ADR	BEGIN
 3868 54d4 79320000 		_ADR	SWAP
 3869 54d8 BB2E0000 		_UNNEST
 3870              	
 3871              	/**********************
 3872              	    ELSE	( A -- A )
 3873              	 	Start the false 
 3874              		clause in an 
 3875              		IF-ELSE-THEN structure.
 3876              	****************************/
 3877 54dc C0540000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3877      C4454C53 
 3877      450000BF 
 3878 54e8 504700BF 		_NEST
 3879 54ec 51540000 		_ADR	AHEAD
 3880 54f0 79320000 		_ADR	SWAP
 3881 54f4 A9540000 		_ADR	THENN
 3882 54f8 BB2E0000 		_UNNEST
 3883              	
 3884              	/**************************
 3885              	    WHILE	( a -- A a )
 3886              	 	Conditional branch out 
 3887              		of a BEGIN-WHILE-REPEAT loop.
 3888              	*********************************/
 3889 54fc E0540000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3889      C5574849 
 3889      4C4500BF 
ARM GAS  forth.s 			page 189


 3890 5508 504700BF 		_NEST
 3891 550c 1D540000 		_ADR	IFF
 3892 5510 79320000 		_ADR	SWAP
 3893 5514 BB2E0000 		_UNNEST
 3894              	
 3895              	/**********************************
 3896              		RECURSE ( -- )
 3897              		compile recursive call to 
 3898              		actual defined word 
 3899              	***********************************/
 3900 5518 00550000 		_HEADER RECURSE,COMPO+IMEDD+7,"RECURSE"
 3900      C7524543 
 3900      55525345 
 3901 5524 504700BF 		_NEST 
 3902 5528 09390000 		_ADR LAST
 3903 552c 75310000 		_ADR AT  
 3904 5530 51490000 		_ADR NAMET 
 3905 5534 49570000 		_ADR CALLC  
 3906 5538 BB2E0000 		_UNNEST 
 3907              	
 3908              	
 3909              	/***********************************
 3910              	    ABORT"	( -- //  string> )
 3911              	 	Conditional abort with an 
 3912              		error message.
 3913              	***********************************/
 3914 553c 1C550000 		_HEADER ABRTQ,IMEDD+COMPO+6,"ABORT\""
 3914      C641424F 
 3914      52542200 
 3915 5548 504700BF 		_NEST
 3916 554c DF300000 		_COMPI	ABORQ
 3916      6C4D0000 
 3916      49570000 
 3917 5558 A5510000 		_ADR	STRCQ
 3918 555c BB2E0000 		_UNNEST
 3919              	
 3920              	/******************************
 3921              	    S"	( -- //  string> )
 3922              	 	Compile an inline 
 3923              		word literal.
 3924              	*****************************/
 3925 5560 40550000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 3925      C2532200 
 3926 5568 504700BF 		_NEST
 3927 556c DF300000 		_COMPI	STRQP
 3927      7C440000 
 3927      49570000 
 3928 5578 A5510000 		_ADR	STRCQ
 3929 557c BB2E0000 		_UNNEST
 3930              	
 3931              	/******************************
 3932              	    ."	( -- //  string> )
 3933              	 	Compile an inline word
 3934              		literal to be typed out 
 3935              		at run time.
 3936              	*******************************/
 3937 5580 64550000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
ARM GAS  forth.s 			page 190


 3937      C22E2200 
 3938 5588 504700BF 		_NEST
 3939 558c DF300000 		_COMPI	DOTQP
 3939      88440000 
 3939      49570000 
 3940 5598 A5510000 		_ADR	STRCQ
 3941 559c BB2E0000 		_UNNEST
 3942              	
 3943              	/*********************
 3944              	  Name compiler
 3945              	***********************/
 3946              	
 3947              	/**************************
 3948              	    ?UNIQUE	( a -- a )
 3949              	 	Display a warning 
 3950              		message if the word 
 3951              		already exists.
 3952              	**************************/
 3953 55a0 84550000 		_HEADER UNIQU,7,"?UNIQUE"
 3953      073F554E 
 3953      49515545 
 3954 55ac 504700BF 		_NEST
 3955 55b0 69320000 		_ADR	DUPP
 3956 55b4 B94A0000 		_ADR	NAMEQ			// ?name exists
 3957 55b8 1F310000 		_QBRAN	UNIQ1	// redefinitions are OK
 3957      D8550000 
 3958 55c0 89440000 		_DOTQP	7," reDef "		// but warn the user
 3958      07207265 
 3958      44656620 
 3959 55cc A9320000 		_ADR	OVER
 3960 55d0 51370000 		_ADR	COUNT
 3961 55d4 F9430000 		_ADR	TYPEE			// just in case its not planned
 3962              	UNIQ1:
 3963 55d8 59320000 		_ADR	DROP
 3964 55dc BB2E0000 		_UNNEST
 3965              	
 3966              	/***********************
 3967              	    $,n	 ( na -- )
 3968              	 	Build a new dictionary 
 3969              		name using the data at na.
 3970              	hidden word 
 3971              	*******************************/
 3972              	SNAME:
 3973 55e0 504700BF 		_NEST
 3974 55e4 69320000 		_ADR	DUPP			//  na na
 3975 55e8 95310000 		_ADR	CAT			//  ?null input
 3976 55ec 1F310000 		_QBRAN	SNAM1
 3976      28560000 
 3977 55f4 AD550000 		_ADR	UNIQU			//  na
 3978 55f8 09390000 		_ADR	LAST			//  na last
 3979 55fc 75310000 		_ADR	AT			//  na la
 3980 5600 09510000 		_ADR	COMMA			//  na
 3981 5604 69320000 		_ADR	DUPP			//  na na
 3982 5608 09390000 		_ADR	LAST			//  na na last
 3983 560c 61310000 		_ADR	STORE			//  na , save na for vocabulary link
 3984 5610 51370000 		_ADR	COUNT			//  na+1 count
 3985 5614 A5330000 		_ADR	PLUS			//  na+1+count
ARM GAS  forth.s 			page 191


 3986 5618 293D0000 		_ADR	ALGND			//  word boundary
 3987 561c DD380000 		_ADR	CPP
 3988 5620 61310000 		_ADR	STORE			//  top of dictionary now
 3989 5624 BB2E0000 		_UNNEST
 3990              	SNAM1:
 3991 5628 7D440000 		_ADR	STRQP
 3992 562c 07       		.byte	7
 3993 562d 206E616D 		.ascii " name? "
 3993      653F20
 3994 5634 414D0000 		_ADR	PRT_ABORT
 3995              	
 3996              	/************************
 3997              	    $COMPILE	( a -- )
 3998              	 	Compile next word to 
 3999              		code dictionary as 
 4000              		a token or literal.
 4001              	**************************/
 4002 5638 A4550000 		_HEADER SCOMP,8,"$COMPILE"
 4002      0824434F 
 4002      4D50494C 
 4002      450000BF 
 4003 5648 504700BF 		_NEST
 4004 564c B94A0000 		_ADR	NAMEQ
 4005 5650 B5340000 		_ADR	QDUP	// defined?
 4006 5654 1F310000 		_QBRAN	SCOM2
 4006      84560000 
 4007 565c 75310000 		_ADR	AT
 4008 5660 DF300000 		_DOLIT	IMEDD
 4008      80000000 
 4009 5668 25330000 		_ADR	ANDD	// immediate?
 4010 566c 1F310000 		_QBRAN	SCOM1
 4010      7C560000 
 4011 5674 F5300000 		_ADR	EXECU
 4012 5678 BB2E0000 		_UNNEST			// it's immediate, execute
 4013              	SCOM1:
 4014 567c 49570000 		_ADR	CALLC			// it's not immediate, compile
 4015 5680 BB2E0000 		_UNNEST	
 4016              	SCOM2:
 4017 5684 79430000 		_ADR	NUMBERQ 
 4018 5688 1F310000 		_QBRAN	SCOM3
 4018      98560000 
 4019 5690 8D510000 		_ADR	LITER
 4020 5694 BB2E0000 		_UNNEST			// compile number as integer
 4021              	SCOM3: // compilation abort 
 4022 5698 A1560000 		_ADR COLON_ABORT 
 4023 569c 414D0000 		_ADR	PRT_ABORT			// error
 4024              	
 4025              	/********************************
 4026              	 before aborting a compilation 
 4027              	 reset HERE and LAST
 4028              	 to previous values. 
 4029              	*******************************/
 4030              	COLON_ABORT:
 4031 56a0 504700BF 		_NEST 
 4032 56a4 09390000 		_ADR LAST 
 4033 56a8 75310000 		_ADR AT 
 4034 56ac 51340000 		_ADR CELLM 
ARM GAS  forth.s 			page 192


 4035 56b0 69320000 		_ADR DUPP 
 4036 56b4 DD380000 		_ADR CPP  
 4037 56b8 61310000 		_ADR STORE 
 4038 56bc 75310000 		_ADR AT 
 4039 56c0 09390000 		_ADR LAST 
 4040 56c4 61310000 		_ADR STORE 
 4041 56c8 DD560000 		_ADR OVERT 
 4042 56cc BB2E0000 		_UNNEST 
 4043              	
 4044              	/*********************
 4045              	    OVERT	( -- )
 4046              	 	Link a new word 
 4047              		into the current 
 4048              		vocabulary.
 4049              	**********************/
 4050 56d0 3C560000 		_HEADER OVERT,5,"OVERT"
 4050      054F5645 
 4050      525400BF 
 4051 56dc 504700BF 		_NEST
 4052 56e0 09390000 		_ADR	LAST
 4053 56e4 75310000 		_ADR	AT
 4054 56e8 C9380000 		_ADR	CNTXT
 4055 56ec 61310000 		_ADR	STORE
 4056 56f0 BB2E0000 		_UNNEST
 4057              	
 4058              	/**********************
 4059              	    ;  ( -- )
 4060              	 	Terminate a colon
 4061              		definition.
 4062              	***********************/
 4063 56f4 D4560000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 4063      C13B00BF 
 4064 56fc 504700BF 		_NEST
 4065 5700 DF300000 		_DOLIT	UNNEST
 4065      BA2E0000 
 4066 5708 49570000 		_ADR	CALLC
 4067 570c 094E0000 		_ADR	LBRAC
 4068 5710 DD560000 		_ADR	OVERT
 4069 5714 BB2E0000 		_UNNEST
 4070              	
 4071              	/******************
 4072              	    ]	   ( -- )
 4073              	 	Start compiling 
 4074              		the words in 
 4075              		the input stream.
 4076              	*********************/
 4077 5718 F8560000 		_HEADER RBRAC,1,"]"
 4077      015D00BF 
 4078 5720 504700BF 		_NEST
 4079 5724 DF300000 		_DOLIT	SCOMP
 4079      48560000 
 4080 572c 9D380000 		_ADR	TEVAL
 4081 5730 61310000 		_ADR	STORE
 4082 5734 DF300000 		_DOLIT  -1
 4082      FFFFFFFF 
 4083 573c A5370000 		_ADR    STATE 
 4084 5740 61310000 		_ADR    STORE 
ARM GAS  forth.s 			page 193


 4085 5744 BB2E0000 		_UNNEST
 4086              	
 4087              	/****************************
 4088              	    CALLC	( ca -- )
 4089              	 	compile ca.
 4090              	hidden word used by compiler
 4091              	*****************************/
 4092              	CALLC:
 4093 5748 504700BF 		_NEST
 4094 574c DF300000 		_DOLIT 1 
 4094      01000000 
 4095 5754 39330000 		_ADR ORR 
 4096 5758 09510000 		_ADR COMMA  
 4097 575c BB2E0000 		_UNNEST 
 4098              	
 4099              	
 4100              	/*************************
 4101              	 	:	( -- //  string> )
 4102              	 	Start a new colon 
 4103              		definition using 
 4104              		next word as its name.
 4105              	**************************/
 4106 5760 1C570000 		_HEADER COLON,1,":"
 4106      013A00BF 
 4107 5768 504700BF 		_NEST
 4108 576c 31490000 		_ADR	TOKEN
 4109 5770 E1550000 		_ADR	SNAME
 4110 5774 DD560000 		_ADR    OVERT 
 4111 5778 C52E0000 		_ADR	COMPI_NEST 
 4112 577c 21570000 		_ADR	RBRAC
 4113 5780 BB2E0000 		_UNNEST
 4114              	
 4115              	/*************************
 4116              	    IMMEDIATE   ( -- )
 4117              	 	Make the last compiled 
 4118              		word an immediate word.
 4119              	***************************/
 4120 5784 64570000 		_HEADER IMMED,9,"IMMEDIATE"
 4120      09494D4D 
 4120      45444941 
 4120      544500BF 
 4121 5794 504700BF 		_NEST
 4122 5798 DF300000 		_DOLIT	IMEDD
 4122      80000000 
 4123 57a0 09390000 		_ADR	LAST
 4124 57a4 75310000 		_ADR	AT
 4125 57a8 75310000 		_ADR	AT
 4126 57ac 39330000 		_ADR	ORR
 4127 57b0 09390000 		_ADR	LAST
 4128 57b4 75310000 		_ADR	AT
 4129 57b8 61310000 		_ADR	STORE
 4130 57bc BB2E0000 		_UNNEST
 4131              	
 4132              	/******************
 4133              	  Defining words
 4134              	******************/
 4135              	
ARM GAS  forth.s 			page 194


 4136              	/***********************************
 4137              	    CONSTANT	( u -- //  string> )
 4138              	 	Compile a new constant.
 4139              	************************************/
 4140 57c0 88570000 		_HEADER CONST,8,"CONSTANT"
 4140      08434F4E 
 4140      5354414E 
 4140      540000BF 
 4141 57d0 504700BF 		_NEST 
 4142 57d4 31490000 		_ADR	TOKEN
 4143 57d8 E1550000 		_ADR	SNAME
 4144 57dc DD560000 		_ADR	OVERT
 4145 57e0 C52E0000 		_ADR	COMPI_NEST
 4146 57e4 DF300000 		_DOLIT	DOCON
 4146      8C370000 
 4147 57ec 49570000 		_ADR	CALLC
 4148 57f0 09510000 		_ADR	COMMA
 4149 57f4 DF300000 		_DOLIT	UNNEST 
 4149      BA2E0000 
 4150 57fc 49570000 		_ADR	CALLC  
 4151 5800 BB2E0000 		_UNNEST
 4152              	
 4153              		.p2align 2 
 4154              	/****************************************
 4155              	 doDOES> ( -- a )
 4156              	 runtime action of 		 
 4157              	 leave parameter field address on stack 
 4158              	hidden word used by compiler 
 4159              	***************************************/
 4160              	DODOES:
 4161 5804 504700BF 		_NEST 
 4162 5808 A1310000 		_ADR	RFROM
 4163 580c 41340000 		_ADR	CELLP 
 4164 5810 01340000 		_ADR	ONEP  
 4165 5814 09390000 		_ADR LAST 
 4166 5818 75310000 		_ADR AT
 4167 581c 51490000 		_ADR NAMET 
 4168 5820 41340000 		_ADR CELLP 
 4169 5824 61310000 		_ADR STORE  
 4170 5828 BB2E0000 		_UNNEST 
 4171              	
 4172              		.p2align 2
 4173              	/**********************
 4174              	  DOES> ( -- )
 4175              	  compile time action
 4176              	*************************/
 4177 582c C4570000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4177      C5444F45 
 4177      533E00BF 
 4178 5838 504700BF 		_NEST 
 4179 583c DF300000 		_DOLIT DODOES 
 4179      04580000 
 4180 5844 49570000 		_ADR CALLC 
 4181 5848 DF300000 		_DOLIT	UNNEST
 4181      BA2E0000 
 4182 5850 49570000 		_ADR	CALLC 
 4183 5854 C52E0000 		_ADR COMPI_NEST
ARM GAS  forth.s 			page 195


 4184 5858 DF300000 		_DOLIT RFROM 
 4184      A0310000 
 4185 5860 49570000 		_ADR	CALLC
 4186 5864 BB2E0000 		_UNNEST 
 4187              	
 4188              	
 4189              	/****************************
 4190              	  DEFER@ ( "name" -- a )
 4191              	  return value of code field 
 4192              	  of defered function. 
 4193              	******************************/
 4194 5868 30580000 		_HEADER DEFERAT,6,"DEFER@"
 4194      06444546 
 4194      45524000 
 4195 5874 504700BF 		_NEST 
 4196 5878 65500000 		_ADR TICK
 4197 587c 41340000 		_ADR CELLP 
 4198 5880 75310000 		_ADR AT 
 4199 5884 11340000 		_ADR ONEM 
 4200 5888 BB2E0000 		_UNNEST 
 4201              	
 4202              	/*********************************
 4203              	 DEFER! ( "name1" "name2" -- )
 4204              	 assign an action to a defered word 
 4205              	************************************/
 4206 588c 6C580000 		_HEADER DEFERSTO,6,"DEFER!"
 4206      06444546 
 4206      45522100 
 4207 5898 504700BF 		_NEST 
 4208 589c 65500000 		_ADR TICK 
 4209 58a0 01340000 		_ADR ONEP 
 4210 58a4 65500000 		_ADR TICK 
 4211 58a8 41340000 		_ADR CELLP 
 4212 58ac 61310000 		_ADR STORE 
 4213 58b0 BB2E0000 		_UNNEST
 4214              	
 4215              	/****************************
 4216              	  DEFER ( "name" -- )
 4217              	  create a defered definition
 4218              	*****************************/
 4219 58b4 90580000 		_HEADER DEFER,5,"DEFER"
 4219      05444546 
 4219      455200BF 
 4220 58c0 504700BF 		_NEST 
 4221 58c4 79590000 		_ADR CREAT 
 4222 58c8 DF300000 		_DOLIT UNNEST 
 4222      BA2E0000 
 4223 58d0 49570000 		_ADR CALLC 
 4224 58d4 DF300000 		_DOLIT DEFER_NOP
 4224      F8580000 
 4225 58dc 01340000 		_ADR ONEP 
 4226 58e0 09390000 		_ADR LAST 
 4227 58e4 75310000 		_ADR AT 
 4228 58e8 51490000 		_ADR NAMET 
 4229 58ec 41340000 		_ADR CELLP 
 4230 58f0 61310000 		_ADR STORE 
 4231 58f4 BB2E0000 		_UNNEST 
ARM GAS  forth.s 			page 196


 4232              	DEFER_NOP:
 4233 58f8 504700BF 		_NEST  
 4234 58fc DD300000 		_ADR NOP 
 4235 5900 BB2E0000 		_UNNEST 
 4236              	
 4237              	/*********************************
 4238              		:NONAME  ( -- xt )
 4239              		create a colon word without 
 4240              		name. 
 4241              	output:
 4242              		xt  exÃ©cution token of 
 4243              		new definition
 4244              	*********************************/
 4245 5904 B8580000 		_HEADER NONAME,7,":NONAME"
 4245      073A4E4F 
 4245      4E414D45 
 4246 5910 504700BF 		_NEST 
 4247 5914 E93D0000 		_ADR 	HERE 
 4248 5918 C52E0000 		_ADR	COMPI_NEST 
 4249 591c 21570000 		_ADR 	RBRAC
 4250 5920 BB2E0000 		_UNNEST 
 4251              	
 4252              	/*******************************
 4253              		IS cccc ( xt -- )
 4254              	input:
 4255              	   cccc  defered word name 
 4256              	   xt    execution token 
 4257              	   to be affected to the 
 4258              	   defered word.
 4259              	********************************/
 4260 5924 08590000 		_HEADER IS,IMEDD+2,"IS"
 4260      82495300 
 4261 592c 504700BF 		_NEST
 4262 5930 A5370000 		_ADR STATE 
 4263 5934 75310000 		_ADR AT 
 4264 5938 1F310000 		_QBRAN 1f 
 4264      60590000 
 4265 5940 DF300000 		_DOLIT ITICK
 4265      88500000 
 4266 5948 49570000 		_ADR CALLC  
 4267 594c DF300000 		_DOLIT DEFERSTO
 4267      98580000 
 4268 5954 49570000 		_ADR CALLC
 4269 5958 47310000 		_BRAN 2f    
 4269      68590000 
 4270 5960 65500000 	1:  _ADR TICK 
 4271 5964 99580000 		_ADR DEFERSTO 
 4272 5968 BB2E0000 	2:	_UNNEST 
 4273              	
 4274              	
 4275              	/******************************
 4276              	    CREATE	( -- //  string> )
 4277              	 	Compile a new array entry 
 4278              		without allocating code space.
 4279              	***********************************/
 4280 596c 28590000 		_HEADER CREAT,6,"CREATE"
 4280      06435245 
ARM GAS  forth.s 			page 197


 4280      41544500 
 4281 5978 504700BF 		_NEST 
 4282 597c 31490000 		_ADR	TOKEN
 4283 5980 E1550000 		_ADR	SNAME
 4284 5984 DD560000 		_ADR	OVERT
 4285 5988 C52E0000 		_ADR	COMPI_NEST 
 4286 598c DF300000 		_DOLIT	DOVAR
 4286      7E370000 
 4287 5994 49570000 		_ADR	CALLC
 4288 5998 BB2E0000 		_UNNEST
 4289              	
 4290              	/*******************************
 4291              	    VARIABLE	( -- //  string> )
 4292              	 	Compile a new variable 
 4293              		initialized to 0.
 4294              	***********************************/
 4295 599c 70590000 		_HEADER VARIA,8,"VARIABLE"
 4295      08564152 
 4295      4941424C 
 4295      450000BF 
 4296 59ac 504700BF 		_NEST
 4297 59b0 79590000 		_ADR	CREAT
 4298 59b4 DF300000 		_DOLIT	0
 4298      00000000 
 4299 59bc 09510000 		_ADR	COMMA
 4300 59c0 DF300000 		_DOLIT UNNEST
 4300      BA2E0000 
 4301 59c8 49570000 		_ADR	CALLC  
 4302 59cc BB2E0000 		_UNNEST
 4303              	
 4304              	
 4305              	/***********
 4306              	  Tools
 4307              	***********/
 4308              	
 4309              	/*************************
 4310              	    dm+	 ( a u -- a )
 4311              	 	Dump u bytes from a , 
 4312              		leaving a+u on the stack.
 4313              		hidden word used by DUMP 
 4314              	****************************/
 4315              	DMP:
 4316 59d0 504700BF 		_NEST
 4317 59d4 A9320000 		_ADR	OVER
 4318 59d8 DF300000 		_DOLIT	4
 4318      04000000 
 4319 59e0 51450000 		_ADR	UDOTR			// display address
 4320 59e4 DF300000 		_DOLIT  0         // don't show base char 
 4320      00000000 
 4321 59ec 35380000 		_ADR    BCHR
 4322 59f0 69320000 		_ADR    DUPP
 4323 59f4 75310000 		_ADR    AT 
 4324 59f8 E5310000 		_ADR    TOR      // save original value of BCHAR 
 4325 59fc 61310000 		_ADR    STORE 
 4326 5a00 A5430000 		_ADR	SPACE
 4327 5a04 E5310000 		_ADR	TOR			// start count down loop
 4328 5a08 47310000 		_BRAN	PDUM2			// skip first pass
ARM GAS  forth.s 			page 198


 4328      285A0000 
 4329              	PDUM1:
 4330 5a10 69320000 	    _ADR	DUPP
 4331 5a14 95310000 		_ADR	CAT
 4332 5a18 DF300000 		_DOLIT	3
 4332      03000000 
 4333 5a20 51450000 		_ADR	UDOTR			// display numeric data
 4334 5a24 01340000 		_ADR	ONEP			// increment address
 4335              	PDUM2:
 4336 5a28 01310000 	    _ADR	DONXT
 4337 5a2c 105A0000 		.word	PDUM1	// loop till done
 4338 5a30 A1310000 		_ADR    RFROM   // restore BCHAR value 
 4339 5a34 35380000 		_ADR    BCHR 
 4340 5a38 61310000 		_ADR    STORE 
 4341 5a3c BB2E0000 		_UNNEST
 4342              		.p2align 2 
 4343              	//    DUMP	( a u -- )
 4344              	// 	Dump u bytes from a, in a formatted manner.
 4345              	
 4346              	/**********************
 4347              		DUMP ( a n -- )
 4348              		hex dump memory 
 4349              	*********************/
 4350 5a40 A0590000 		_HEADER DUMP,4,"DUMP"
 4350      0444554D 
 4350      500000BF 
 4351 5a4c 504700BF 		_NEST
 4352 5a50 DF300000 		_DOLIT  15 
 4352      0F000000 
 4353 5a58 A5330000 		_ADR    PLUS 
 4354 5a5c DF300000 		_DOLIT  0xFFFFFFF0 
 4354      F0FFFFFF 
 4355 5a64 25330000 		_ADR    ANDD 
 4356 5a68 79320000 		_ADR    SWAP 
 4357 5a6c DF300000 		_DOLIT  0xFFFFFFFC
 4357      FCFFFFFF 
 4358 5a74 25330000 		_ADR    ANDD 
 4359 5a78 79320000 		_ADR    SWAP 
 4360 5a7c 1D380000 		_ADR	BASE
 4361 5a80 75310000 		_ADR	AT
 4362 5a84 E5310000 		_ADR	TOR
 4363 5a88 09410000 		_ADR	HEX			// save radix,set hex
 4364 5a8c DF300000 		_DOLIT	16
 4364      10000000 
 4365 5a94 893C0000 		_ADR	SLASH			// change count to lines
 4366 5a98 E5310000 		_ADR	TOR
 4367 5a9c 47310000 		_BRAN	DUMP4			// start count down loop
 4367      CC5A0000 
 4368              	DUMP1:
 4369 5aa4 2D440000 	    _ADR	CR
 4370 5aa8 DF300000 		_DOLIT	16
 4370      10000000 
 4371 5ab0 19350000 		_ADR	DDUP
 4372 5ab4 D1590000 		_ADR	DMP			// display numeric
 4373 5ab8 C9340000 		_ADR	ROT
 4374 5abc C9340000 		_ADR	ROT
 4375 5ac0 A5430000 		_ADR	SPACE
ARM GAS  forth.s 			page 199


 4376 5ac4 A5430000 		_ADR	SPACE
 4377 5ac8 F9430000 		_ADR	TYPEE			// display printable characters
 4378              	DUMP4:
 4379 5acc 01310000 	  _DONXT	DUMP1	// loop till done
 4379      A45A0000 
 4380              	DUMP3:
 4381 5ad4 59320000 		_ADR	DROP
 4382 5ad8 A1310000 		_ADR	RFROM
 4383 5adc 1D380000 		_ADR	BASE
 4384 5ae0 61310000 		_ADR	STORE			// restore radix
 4385 5ae4 BB2E0000 		_UNNEST
 4386              	
 4387              	/*******************************
 4388              	   TRACE. display in hexadecimal
 4389              	   TRACE. use a different buffer 
 4390              	   than DOT  to avoid current 
 4391              	   display overwrite.
 4392              	*******************************/ 
 4393              	TDOT: // ( u -- )
 4394 5ae8 504700BF 		_NEST 
 4395 5aec 1D380000 		_ADR BASE 
 4396 5af0 75310000 		_ADR AT 
 4397 5af4 E5310000 		_ADR TOR
 4398 5af8 09410000 		_ADR HEX  
 4399 5afc B1380000 		_ADR HLD 
 4400 5b00 75310000 		_ADR AT 
 4401 5b04 E5310000 		_ADR TOR   // R: base *hold 
 4402 5b08 E93D0000 		_ADR HERE 
 4403 5b0c DF300000 		_DOLIT 160 
 4403      A0000000 
 4404 5b14 A5330000 		_ADR PLUS
 4405 5b18 69320000 		_ADR DUPP 
 4406 5b1c E5310000 		_ADR TOR  
 4407 5b20 B1380000 		_ADR HLD 
 4408 5b24 61310000 		_ADR STORE
 4409 5b28 DF300000 		_DOLIT 0  
 4409      00000000 
 4410 5b30 59400000 		_ADR DIGS  
 4411 5b34 59320000 		_ADR DROP
 4412 5b38 DF300000 		_DOLIT '$'
 4412      24000000 
 4413 5b40 0D400000 		_ADR HOLD 
 4414 5b44 B1380000 		_ADR HLD 
 4415 5b48 75310000 		_ADR AT
 4416 5b4c A1310000 		_ADR RFROM   
 4417 5b50 A9320000 		_ADR OVER 
 4418 5b54 B5330000 		_ADR SUBB 
 4419 5b58 A5430000 		_ADR SPACE 
 4420 5b5c F9430000 		_ADR TYPEE 
 4421 5b60 A1310000 		_ADR RFROM 
 4422 5b64 B1380000 		_ADR HLD 
 4423 5b68 61310000 		_ADR STORE 
 4424 5b6c A1310000 		_ADR RFROM 
 4425 5b70 1D380000 		_ADR BASE 
 4426 5b74 61310000 		_ADR STORE 
 4427 5b78 BB2E0000 		_UNNEST 
 4428              	
ARM GAS  forth.s 			page 200


 4429              	/**********************
 4430              	   .S	  ( ... -- ... )
 4431              	 	Display the contents 
 4432              		of the data stack.
 4433              	*************************/
 4434 5b7c 445A0000 		_HEADER DOTS,2,".S"
 4434      022E5300 
 4435 5b84 504700BF 		_NEST
 4436 5b88 913D0000 		_ADR	DEPTH	// stack depth
 4437 5b8c E5310000 		_ADR	TOR		// start count down loop
 4438 5b90 47310000 		_BRAN	DOTS2  // skip first pass
 4438      A45B0000 
 4439              	DOTS1:
 4440 5b98 D1310000 		_ADR	RAT
 4441 5b9c B53D0000 		_ADR	PICK
 4442 5ba0 E95A0000 		_ADR	TDOT // index stack, display contents
 4443              	DOTS2:
 4444 5ba4 01310000 		_DONXT	DOTS1 // loop till done
 4444      985B0000 
 4445 5bac 2D440000 		_ADR	CR 
 4446 5bb0 BB2E0000 		_UNNEST
 4447              	
 4448              	RBASE: 
 4449 5bb4 47F8046D 		_PUSH 
 4450 5bb8 4FF68076 		_MOV32 TOS,RPP 
 4450      C2F20106 
 4451 5bc0 FDF778B9 		_NEXT 
 4452              	
 4453              	
 4454              	/**************************
 4455              	  R.  display return stack 
 4456              	**************************/
 4457              	RDOT: 
 4458 5bc4 504700BF 		_NEST 
 4459 5bc8 B55B0000 		_ADR RBASE
 4460 5bcc 45320000 		_ADR RPAT 
 4461 5bd0 B5330000 		_ADR SUBB
 4462 5bd4 85340000 		_ADR CELLSL   
 4463 5bd8 DF300000 		_DOLIT 2
 4463      02000000 
 4464 5be0 B5330000 		_ADR SUBB 
 4465 5be4 E5310000 		_ADR TOR
 4466 5be8 B55B0000 		_ADR RBASE 
 4467 5bec 51340000 	1:	_ADR CELLM 
 4468 5bf0 69320000 		_ADR DUPP 
 4469 5bf4 75310000 		_ADR AT 
 4470 5bf8 E95A0000 		_ADR TDOT 
 4471 5bfc A1310000 		_ADR RFROM   
 4472 5c00 11340000 		_ADR ONEM 
 4473 5c04 69320000 		_ADR DUPP
 4474 5c08 E5310000 		_ADR TOR 
 4475 5c0c 1D360000 		_ADR ZEQUAL   
 4476 5c10 1F310000 		_QBRAN 1b
 4476      EC5B0000 
 4477 5c18 A1310000 		_ADR RFROM  
 4478 5c1c F1340000 		_ADR DDROP
 4479 5c20 2D440000 		_ADR CR   
ARM GAS  forth.s 			page 201


 4480 5c24 BB2E0000 		_UNNEST 
 4481              	
 4482              	/**************************
 4483              		TRACE ( -- )
 4484              		display stacks content 
 4485              	**************************/
 4486 5c28 805B0000 		_HEADER TRACE,5,"TRACE"
 4486      05545241 
 4486      434500BF 
 4487 5c34 504700BF 		_NEST
 4488 5c38 2D440000 		_ADR CR 
 4489 5c3c DF300000 		_DOLIT '>' 
 4489      3E000000 
 4490 5c44 DF300000 		_DOLIT 'S'
 4490      53000000 
 4491 5c4c 7D2F0000 		_ADR EMIT 
 4492 5c50 7D2F0000 		_ADR EMIT  
 4493 5c54 855B0000 		_ADR DOTS
 4494 5c58 DF300000 		_DOLIT '>'
 4494      3E000000 
 4495 5c60 DF300000 		_DOLIT 'R'
 4495      52000000 
 4496 5c68 7D2F0000 		_ADR EMIT 
 4497 5c6c 7D2F0000 		_ADR EMIT 
 4498 5c70 C55B0000 		_ADR RDOT 
 4499 5c74 BB2E0000 		_UNNEST 
 4500              	
 4501              	
 4502              	/****************************
 4503              	  >BODY  ( xt -- adr )
 4504              	  get parameter field address
 4505              	  from code field address 
 4506              	****************************/
 4507 5c78 2C5C0000 		_HEADER TOBODY,5,">BODY"
 4507      053E424F 
 4507      445900BF 
 4508 5c84 06F10806 		add TOS,#8 
 4509 5c88 FDF714B9 		_NEXT 		
 4510              	
 4511              	/*****************************
 4512              	    >NAME	( ca -- na | F )
 4513              	 	Convert code address 
 4514              		to a name address.
 4515              	*****************************/
 4516 5c8c 7C5C0000 		_HEADER TNAME,5,">NAME"
 4516      053E4E41 
 4516      4D4500BF 
 4517 5c98 504700BF 		_NEST
 4518 5c9c E5310000 		_ADR	TOR			//  
 4519 5ca0 C9380000 		_ADR	CNTXT			//  va
 4520 5ca4 75310000 		_ADR	AT			//  na
 4521              	TNAM1:
 4522 5ca8 69320000 		_ADR	DUPP			//  na na
 4523 5cac 1F310000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4523      DC5C0000 
 4524 5cb4 69320000 		_ADR	DUPP			//  na na
 4525 5cb8 51490000 		_ADR	NAMET			//  na ca
ARM GAS  forth.s 			page 202


 4526 5cbc D1310000 		_ADR	RAT			//  na ca code
 4527 5cc0 4D330000 		_ADR	XORR			//  na f --
 4528 5cc4 1F310000 		_QBRAN	TNAM2
 4528      DC5C0000 
 4529 5ccc 51340000 		_ADR	CELLM			//  la 
 4530 5cd0 75310000 		_ADR	AT			//  next_na
 4531 5cd4 47310000 		_BRAN	TNAM1
 4531      A85C0000 
 4532              	TNAM2:	
 4533 5cdc A1310000 		_ADR	RFROM
 4534 5ce0 59320000 		_ADR	DROP			//  0|na --
 4535 5ce4 BB2E0000 		_UNNEST			// 0
 4536              	
 4537              	/********************************
 4538              	    .ID	 ( na -- )
 4539              	 	Display the name at address.
 4540              	********************************/
 4541 5ce8 905C0000 		_HEADER DOTID,3,".ID"
 4541      032E4944 
 4542 5cf0 504700BF 		_NEST
 4543 5cf4 B5340000 		_ADR	QDUP			// if zero no name
 4544 5cf8 1F310000 		_QBRAN	DOTI1
 4544      185D0000 
 4545 5d00 51370000 		_ADR	COUNT
 4546 5d04 DF300000 		_DOLIT	0x1F
 4546      1F000000 
 4547 5d0c 25330000 		_ADR	ANDD			// mask lexicon bits
 4548 5d10 F9430000 		_ADR	TYPEE
 4549 5d14 BB2E0000 		_UNNEST			// display name string
 4550              	DOTI1:
 4551 5d18 89440000 		_DOTQP	9," {noName}"
 4551      09207B6E 
 4551      6F4E616D 
 4551      657D00BF 
 4552 5d28 BB2E0000 		_UNNEST
 4553              	
 4554              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4555              	.if WANT_SEE 
 4556              	/*******************************
 4557              	    SEE	 ( -- //  string> )
 4558              	 	A simple decompiler.
 4559              	*******************************/
 4560              		_HEADER SEE,3,"SEE"
 4561              		_NEST
 4562              		_ADR	TICK	//  ca --, starting address
 4563              		_ADR	CR	
 4564              		_DOLIT	20
 4565              		_ADR	TOR
 4566              	SEE1:
 4567              		_ADR	CELLP			//  a
 4568              		_ADR	DUPP			//  a a
 4569              		_ADR	DECOMP		//  a
 4570              		_DONXT	SEE1
 4571              		_ADR	DROP
 4572              		_UNNEST
 4573              	
 4574              	/*************************
ARM GAS  forth.s 			page 203


 4575              	 	DECOMPILE ( a -- )
 4576              	 	Convert code in a.  
 4577              		Display name of command or as data.
 4578              	*************************************/
 4579              		_HEADER DECOMP,9,"DECOMPILE"
 4580              		_NEST
 4581              		_ADR	DUPP			//  a a
 4582              	// 	_ADR	TOR			//  a
 4583              		_ADR	AT			//  a code
 4584              		_ADR	DUPP			//  a code code
 4585              		_DOLIT	0xF800D000 //0xF800F800
 4586              		_ADR	ANDD
 4587              		_DOLIT	0xF000D000 //0xF800F000
 4588              		_ADR	EQUAL			//  a code ?
 4589              		_ADR	INVER 
 4590              		_QBRAN	DECOM2	//  not a command
 4591              		//  a valid_code --, extract address and display name
 4592              		MOVW	IP,#0xFFE
 4593              		MOV	WP,TOS
 4594              		LSL	TOS,TOS,#21		//  get bits 22-12
 4595              		ASR	TOS,TOS,#9		//  with sign extension
 4596              		LSR	WP,WP,#15		//  get bits 11-1
 4597              		AND	WP,WP,IP		//  retain only bits 11-1
 4598              		ORR	TOS,TOS,WP		//  get bits 22-1
 4599              		NOP
 4600              		_ADR	OVER			//  a offset a
 4601              		_ADR	PLUS			//  a target-4
 4602              		_ADR	CELLP			//  a target
 4603              		_ADR	TNAME			//  a na/0 --, is it a name?
 4604              		_ADR	QDUP			//  name address or zero
 4605              		_QBRAN	DECOM1
 4606              		_ADR	SPACE			//  a na
 4607              		_ADR	DOTID			//  a --, display name
 4608              	// 	_ADR	RFROM			//  a
 4609              		_ADR	DROP
 4610              		_UNNEST
 4611              	DECOM1:	// _ADR	RFROM		//  a
 4612              		_ADR	AT			//  data
 4613              		_ADR	UDOT			//  display data
 4614              		_UNNEST
 4615              	DECOM2:
 4616              		_ADR	UDOT
 4617              	// 	_ADR	RFROM
 4618              		_ADR	DROP
 4619              		_UNNEST
 4620              	.endif 
 4621              	
 4622              	
 4623              	/*********************
 4624              	    WORDS	( -- )
 4625              	 	Display the names 
 4626              		in the context vocabulary.
 4627              	*******************************/
 4628 5d2c EC5C0000 		_HEADER WORDS,5,"WORDS"
 4628      05574F52 
 4628      445300BF 
 4629 5d38 504700BF 		_NEST
ARM GAS  forth.s 			page 204


 4630 5d3c 2D440000 		_ADR	CR
 4631 5d40 C9380000 		_ADR	CNTXT
 4632 5d44 75310000 		_ADR	AT			// only in context
 4633              	WORS1:
 4634 5d48 B5340000 		_ADR	QDUP			// ?at end of list
 4635 5d4c 1F310000 		_QBRAN	WORS2
 4635      705D0000 
 4636 5d54 69320000 		_ADR	DUPP
 4637 5d58 A5430000 		_ADR	SPACE
 4638 5d5c F15C0000 		_ADR	DOTID			// display a name
 4639 5d60 51340000 		_ADR	CELLM
 4640 5d64 75310000 		_ADR	AT
 4641 5d68 47310000 		_BRAN	WORS1
 4641      485D0000 
 4642              	WORS2:
 4643 5d70 BB2E0000 		_UNNEST
 4644              	
 4645              	
 4646              	/*************************
 4647              		MARK <string> ( -- )
 4648              	    create forget point 
 4649              		in dictionary 
 4650              	*************************/	
 4651 5d74 305D0000 		_HEADER MARK,4,"MARK"
 4651      044D4152 
 4651      4B0000BF 
 4652 5d80 504700BF 		_NEST
 4653 5d84 79590000 		_ADR CREAT 
 4654 5d88 05580000 		_ADR DODOES 
 4655 5d8c BB2E0000 		_UNNEST
 4656 5d90 504700BF 		_NEST  
 4657 5d94 A1310000 		_ADR RFROM 
 4658 5d98 DF300000 		_DOLIT 8
 4658      08000000 
 4659 5da0 B5330000 		_ADR SUBB
 4660 5da4 995C0000 		_ADR TNAME
 4661 5da8 51340000 		_ADR CELLM
 4662 5dac 75310000 		_ADR AT  
 4663 5db0 09390000 		_ADR LAST 
 4664 5db4 61310000 		_ADR STORE 
 4665 5db8 DD560000 		_ADR OVERT
 4666 5dbc BB2E0000 		_UNNEST 
 4667              	
 4668              	/*********************************
 4669              		ARRAY "name" ( n -- )
 4670              	    create an array of n elements 
 4671              	*********************************/
 4672 5dc0 785D0000 		_HEADER ARRAY,5,"ARRAY"
 4672      05415252 
 4672      415900BF 
 4673 5dcc 504700BF 		_NEST 
 4674 5dd0 31490000 		_ADR	TOKEN
 4675 5dd4 E1550000 		_ADR	SNAME
 4676 5dd8 DD560000 		_ADR	OVERT
 4677 5ddc C52E0000 		_ADR	COMPI_NEST
 4678 5de0 DF300000 		_DOLIT	DO_ARRAY
 4678      0C5E0000 
ARM GAS  forth.s 			page 205


 4679 5de8 49570000 		_ADR	CALLC
 4680 5dec DF300000 		_DOLIT	UNNEST 
 4680      BA2E0000 
 4681 5df4 49570000 		_ADR	CALLC  
 4682 5df8 DF300000 		_DOLIT  4 
 4682      04000000 
 4683 5e00 C5330000 		_ADR    STAR 
 4684 5e04 F1500000 		_ADR    ALLOT 
 4685 5e08 BB2E0000 		_UNNEST 	
 4686              	
 4687              	// does> du array
 4688              	DO_ARRAY:
 4689 5e0c 504700BF 		_NEST  
 4690 5e10 DF300000 		_DOLIT 4 
 4690      04000000 
 4691 5e18 C5330000 		_ADR STAR  
 4692 5e1c D1310000 		_ADR RAT  
 4693 5e20 41340000 		_ADR CELLP 
 4694 5e24 A5330000 		_ADR PLUS  
 4695 5e28 BB2E0000 		_UNNEST 
 4696              	
 4697              	
 4698              	/****************
 4699              	  cold start
 4700              	*****************/
 4701              	
 4702              	/**********************************
 4703              	    VER	 ( -- n )
 4704              	 	Return the version 
 4705              		number of this implementation.
 4706              	hidden word used by COLD
 4707              	**********************************/
 4708              	VERSN:
 4709 5e2c 504700BF 		_NEST
 4710 5e30 DF300000 		_DOLIT	VER*256+EXT
 4710      00010000 
 4711 5e38 BB2E0000 		_UNNEST
 4712              	
 4713              	/*********************
 4714              	    hi	  ( -- )
 4715              	 	Display the sign-on 
 4716              		message.
 4717              	***********************/
 4718 5e3c C45D0000 		_HEADER HI,2,"HI"
 4718      02484900 
 4719 5e44 504700BF 		_NEST
 4720 5e48 2D440000 		_ADR	CR	// initialize I/O
 4721 5e4c 89440000 		_DOTQP	17, "beyond Jupiter, v" 
 4721      11626579 
 4721      6F6E6420 
 4721      4A757069 
 4721      7465722C 
 4722 5e64 1D380000 		_ADR	BASE
 4723 5e68 75310000 		_ADR	AT
 4724 5e6c 09410000 		_ADR	HEX	// save radix
 4725 5e70 2D5E0000 		_ADR	VERSN
 4726 5e74 ED3F0000 		_ADR	BDIGS
ARM GAS  forth.s 			page 206


 4727 5e78 DF300000 		_DOLIT  0 
 4727      00000000 
 4728 5e80 39400000 		_ADR	DIG
 4729 5e84 39400000 		_ADR	DIG
 4730 5e88 DF300000 		_DOLIT	'.'
 4730      2E000000 
 4731 5e90 0D400000 		_ADR	HOLD
 4732 5e94 59400000 		_ADR	DIGS
 4733 5e98 B5400000 		_ADR	EDIGS
 4734 5e9c F9430000 		_ADR	TYPEE	// format version number
 4735 5ea0 1D380000 		_ADR	BASE
 4736 5ea4 61310000 		_ADR	STORE
 4737 5ea8 2D440000 		_ADR	CR
 4738 5eac BB2E0000 		_UNNEST			// restore radix
 4739              	
 4740              	/***********************
 4741              	   HI_BOTH ( -- )
 4742              	   display sign-on 
 4743              	   on both CONSOLE
 4744              	***********************/
 4745              	HI_BOTH:
 4746 5eb0 504700BF 	    _NEST 
 4747 5eb4 010C0000 		_ADR LOCAL 
 4748 5eb8 310C0000 		_ADR CONSOLE 
 4749 5ebc 455E0000 		_ADR HI 
 4750 5ec0 190C0000 		_ADR SERIAL 
 4751 5ec4 310C0000 		_ADR CONSOLE 
 4752 5ec8 455E0000 		_ADR HI
 4753 5ecc BB2E0000 		_UNNEST 
 4754              	
 4755              	/**********************
 4756              	 check if PS2 keyboard 
 4757              	 present.
 4758              	**********************/
 4759              	PS2_QUERY: 
 4760 5ed0 504700BF 		_NEST 
 4761 5ed4 DF300000 		_DOLIT 400 
 4761      90010000 
 4762 5edc 15300000 		_ADR PAUSE
 4763 5ee0 211A0000 		_ADR PS2_QKEY
 4764 5ee4 1F310000 		_QBRAN 1f
 4764      005F0000 
 4765 5eec DF300000 		_DOLIT BAT_OK 
 4765      AA000000 
 4766 5ef4 4D330000 		_ADR XORR 
 4767 5ef8 1F310000 		_QBRAN 9f 
 4767      445F0000 
 4768 5f00 091C0000 	1:	_ADR KBD_RST
 4769 5f04 DF300000 		_DOLIT BAT_OK 
 4769      AA000000 
 4770 5f0c 4D330000 		_ADR XORR  
 4771 5f10 1F310000 		_QBRAN 9f  
 4771      445F0000 
 4772              	// no ps2 keyboard 
 4773              	// swith to serial console
 4774 5f18 2D440000 		_ADR CR 
 4775 5f1c 89440000 		_DOTQP 25,"no PS2 keyboard detected."
ARM GAS  forth.s 			page 207


 4775      196E6F20 
 4775      50533220 
 4775      6B657962 
 4775      6F617264 
 4776 5f3c 190C0000 		_ADR SERIAL 
 4777 5f40 310C0000 		_ADR CONSOLE 
 4778 5f44 BB2E0000 	9:	_UNNEST 
 4779              	
 4780              	/*************************
 4781              	   check PA8 to 
 4782              	   select console 
 4783              	   PA8 -> low  LOCAL 
 4784              	   PA8 -> high SERIAL 
 4785              	*************************/
 4786              	IF_SENSE:
 4787 5f48 504700BF 		_NEST 
 4788 5f4c 010C0000 		_ADR LOCAL 
 4789 5f50 DF300000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4789      10000240 
 4790 5f58 75310000 		_ADR AT 
 4791 5f5c DF300000 		_DOLIT (1<<8)
 4791      00010000 
 4792 5f64 25330000 		_ADR ANDD 
 4793 5f68 1F310000 		_QBRAN 9f 
 4793      745F0000 
 4794 5f70 01340000 		_ADR ONEP 
 4795 5f74 310C0000 	9:  _ADR CONSOLE 
 4796 5f78 BB2E0000 		_UNNEST 
 4797              	
 4798              	/****************************
 4799              	   display READY on active
 4800              	   console
 4801              	***************************/
 4802              	READY:
 4803 5f7c 504700BF 	    _NEST 
 4804 5f80 89440000 		_DOTQP 5,"READY"
 4804      05524541 
 4804      445900BF 
 4805 5f8c 2D440000 		_ADR  CR 
 4806 5f90 BB2E0000 	    _UNNEST 
 4807              	
 4808              	/********************
 4809              	    COLD	( -- )
 4810              	 	The high level cold 
 4811              		start sequence.
 4812              	**************************/
 4813 5f94 405E0000 		.word	LINK 
 4814              		LINK = . 
 4815 5f98 04       	_LASTN:	.byte  4
 4816 5f99 434F4C44 		.ascii "COLD"
 4817 5f9d 0000BF   		.p2align 2	
 4818              	COLD:
 4819 5fa0 00B5FAF7 		_CALL forth_init 
 4819      C9FA5DF8 
 4819      04EB
 4820 5faa DFF85CC0 		ldr IP,=COLD1 
 4821 5fae FCF781BF 		_NEXT
ARM GAS  forth.s 			page 208


 4822 5fb2 00BF     		.p2align 2 
 4823              	COLD1:
 4824 5fb4 DF300000 		_DOLIT  0 
 4824      00000000 
 4825 5fbc 49300000 		_ADR ULED // turn off user LED 
 4826 5fc0 DF300000 		_DOLIT	UZERO
 4826      64080000 
 4827 5fc8 DF300000 		_DOLIT	UPP
 4827      00000020 
 4828 5fd0 DF300000 		_DOLIT	ULAST-UZERO
 4828      C0000000 
 4829 5fd8 C53E0000 		_ADR	MOVE 			// initialize user area
 4830 5fdc 894F0000 		_ADR	PRESE			// initialize stack and TIB
 4831 5fe0 B51E0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4832 5fe4 D15E0000 		_ADR 	PS2_QUERY  
 4833 5fe8 05380000 		_ADR	TBOOT
 4834 5fec 753E0000 		_ADR	ATEXE			// application boot
 4835 5ff0 DD560000 		_ADR	OVERT
 4836 5ff4 495F0000 		_ADR	IF_SENSE
 4837 5ff8 7D5F0000 		_ADR    READY 
 4838 5ffc 47310000 		_BRAN	QUIT			// start interpretation
 4838      C44F0000 
 4839              	COLD2:
 4840              		.p2align 2 	
 4841              	CTOP:
 4842 6004 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4843              	
 4844              	
 4845 6008 B45F0000 	  .end 
ARM GAS  forth.s 			page 209


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 210


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 211


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 212


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 213


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 214


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020000000 UPP
          macros.inc:54     *ABS*:0000000020000512 DTOP
          macros.inc:55     *ABS*:000000002001812c DEND
          macros.inc:56     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:58     *ABS*:0000000000000040 COMPO
          macros.inc:59     *ABS*:0000000000000080 IMEDD
          macros.inc:60     *ABS*:00000000ffffff1f MASKK
          macros.inc:62     *ABS*:0000000000000004 CELLL
          macros.inc:63     *ABS*:000000000000000a BASEE
          macros.inc:64     *ABS*:0000000000000008 VOCSS
          macros.inc:66     *ABS*:0000000000000008 BKSPP
          macros.inc:67     *ABS*:000000000000000a LF
          macros.inc:68     *ABS*:000000000000000d CRR
          macros.inc:69     *ABS*:000000000000001b ERR
          macros.inc:70     *ABS*:0000000000000027 TIC
          macros.inc:75     *ABS*:0000000000000004 RNDSEED
          macros.inc:76     *ABS*:0000000000000008 TICKS
          macros.inc:77     *ABS*:000000000000000c CD_TIMER
          macros.inc:78     *ABS*:0000000000000010 BOOT
          macros.inc:79     *ABS*:0000000000000014 STDIN
          macros.inc:80     *ABS*:0000000000000018 STDOUT
          macros.inc:81     *ABS*:000000000000001c NBASE
          macros.inc:82     *ABS*:0000000000000020 BCHAR
          macros.inc:83     *ABS*:0000000000000024 TMP
          macros.inc:84     *ABS*:0000000000000028 CSPAN
ARM GAS  forth.s 			page 215


          macros.inc:85     *ABS*:000000000000002c TOIN
          macros.inc:86     *ABS*:0000000000000030 SRC
          macros.inc:87     *ABS*:0000000000000030 NTIBB
          macros.inc:88     *ABS*:0000000000000034 TIBUF
          macros.inc:89     *ABS*:0000000000000038 SRCID
             forth.s:3344   .text:0000000000004ea0 EVAL
          macros.inc:91     *ABS*:0000000000000040 VHOLD
          macros.inc:92     *ABS*:0000000000000044 CTXT
          macros.inc:93     *ABS*:0000000000000048 FORTH_CTOP
          macros.inc:94     *ABS*:000000000000004c USER_CTOP
          macros.inc:95     *ABS*:0000000000000050 LASTN
          macros.inc:96     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:97     *ABS*:0000000000000054 RX_QUEUE
          macros.inc:98     *ABS*:0000000000000064 RX_HEAD
          macros.inc:99     *ABS*:0000000000000068 RX_TAIL
          macros.inc:100    *ABS*:000000000000006c VID_CNTR
          macros.inc:101    *ABS*:0000000000000070 VID_STATE
          macros.inc:102    *ABS*:0000000000000074 VID_FIELD
          macros.inc:103    *ABS*:0000000000000078 VID_BUFFER
          macros.inc:104    *ABS*:000000000000007c KBD_STRUCT
          macros.inc:105    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:106    *ABS*:0000000000000080 KBD_QUEUE
          macros.inc:107    *ABS*:0000000000000090 KBD_QHEAD
          macros.inc:108    *ABS*:0000000000000094 KBD_QTAIL
          macros.inc:109    *ABS*:0000000000000098 ROW
          macros.inc:110    *ABS*:000000000000009c COL
          macros.inc:111    *ABS*:00000000000000a0 BK_COLOR
          macros.inc:112    *ABS*:00000000000000a4 PEN_COLOR
          macros.inc:113    *ABS*:00000000000000a8 VFPSW
          macros.inc:114    *ABS*:00000000000000ac VFBASE
          macros.inc:115    *ABS*:00000000000000b0 BEEP_DTMR
          macros.inc:116    *ABS*:00000000000000b4 CSTATE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000e28 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000b0c uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001704 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002eb4 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3408   .text:0000000000004f88 PRESE
             forth.s:2498   .text:0000000000004488 DOTQP
              init.s:162    .text:0000000000000032 $t
ARM GAS  forth.s 			page 216


              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002f00 CFSR
             forth.s:543    .text:0000000000003268 DUPP
             forth.s:478    .text:00000000000031e4 TOR
             forth.s:326    .text:00000000000030de DOLIT
             forth.s:1241   .text:000000000000381c BASE
             forth.s:412    .text:0000000000003160 STORE
             forth.s:2582   .text:0000000000004584 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:449    .text:00000000000031a0 RFROM
             forth.s:640    .text:0000000000003324 ANDD
             forth.s:367    .text:000000000000311e QBRAN
             forth.s:145    .text:0000000000002f20 BFAR
             forth.s:179    .text:0000000000002f7c EMIT
             forth.s:2404   .text:00000000000043a4 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:000000000000220c FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2450   .text:000000000000442c CR
             forth.s:422    .text:0000000000003174 AT
             forth.s:706    .text:00000000000033b4 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2600   .text:00000000000045b8 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:836    .text:00000000000034b4 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:697    .text:00000000000033a4 PLUS
             forth.s:1143   .text:0000000000003750 COUNT
             forth.s:2432   .text:00000000000043f8 TYPEE
             forth.s:980    .text:00000000000035ec CLZ
             forth.s:551    .text:0000000000003278 SWAP
             forth.s:688    .text:0000000000003394 LSHIFT
               fpu.s:123    .text:000000000000222c CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3424   .text:0000000000004fc4 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
ARM GAS  forth.s 			page 217


              init.s:311    .text:0000000000000294 $d
             forth.s:3218   .text:0000000000004d2c ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:262    .text:0000000000003048 ULED
             forth.s:1214   .text:00000000000037d4 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:679    .text:000000000000337c RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:00000000000021ae fpu_init
          ser-term.s:56     .text:0000000000000b3a ser_init
             tvout.s:74     .text:0000000000000d78 tv_init
           ps2_kbd.s:307    .text:0000000000001924 kbd_init
         spi-flash.s:41     .text:0000000000001d38 flash_spi_init
             forth.s:4818   .text:0000000000005fa0 COLD
             forth.s:83     .text:0000000000002eac NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:910    .text:0000000000000924 ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:4745   .text:0000000000005eb0 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001a20 PS2_QKEY
             tvout.s:563    .text:00000000000012e8 TV_EMIT
ARM GAS  forth.s 			page 218


             forth.s:3278   .text:0000000000004dac INTER
             forth.s:4815   .text:0000000000005f98 _LASTN
             forth.s:4841   .text:0000000000006004 CTOP
             forth.s:4814   .text:0000000000005f98 LINK
              init.s:915    .text:0000000000000924 $d
       environment.s:32     .text:0000000000000954 _ENVQ
       environment.s:32     .text:0000000000000964 ENVQ
       environment.s:35     .text:0000000000000968 $d
             forth.s:1319   .text:00000000000038c8 CNTXT
       environment.s:215    .text:0000000000000aea _ENVLASTN
             forth.s:535    .text:0000000000003258 DROP
             forth.s:755    .text:0000000000003410 ONEM
             forth.s:3024   .text:0000000000004ab8 NAMEQ
             forth.s:335    .text:00000000000030f4 EXECU
             forth.s:396    .text:0000000000003146 BRAN
             forth.s:90     .text:0000000000002eba UNNEST
       environment.s:201    .text:0000000000000ac6 ENVLNK
       environment.s:82     .text:00000000000009c8 _CNTDSTR
       environment.s:82     .text:00000000000009d8 $t
       environment.s:82     .text:00000000000009d8 CNTDSTR
       environment.s:223    .text:0000000000000b00 flag_true
       environment.s:95     .text:00000000000009e2 $d
       environment.s:95     .text:00000000000009e6 _SLHOLD
       environment.s:95     .text:00000000000009ec $t
       environment.s:95     .text:00000000000009ec SLHOLD
       environment.s:107    .text:00000000000009f6 $d
       environment.s:107    .text:00000000000009fa _SLPAD
       environment.s:107    .text:0000000000000a00 SLPAD
       environment.s:118    .text:0000000000000a0a $d
       environment.s:118    .text:0000000000000a0e _ADRBITS
       environment.s:118    .text:0000000000000a20 $t
       environment.s:118    .text:0000000000000a20 ADRBITS
       environment.s:130    .text:0000000000000a2a $d
       environment.s:130    .text:0000000000000a2e _FLOORED
       environment.s:130    .text:0000000000000a36 $t
       environment.s:130    .text:0000000000000a38 FLOORED
       environment.s:141    .text:0000000000000a3a $d
       environment.s:141    .text:0000000000000a3e _MAXCHAR
       environment.s:141    .text:0000000000000a48 MAXCHAR
       environment.s:152    .text:0000000000000a52 $d
       environment.s:152    .text:0000000000000a56 _MAXD
       environment.s:152    .text:0000000000000a5c $t
       environment.s:152    .text:0000000000000a5c MAXD
       environment.s:165    .text:0000000000000a76 $d
       environment.s:165    .text:0000000000000a7a _MAXN
       environment.s:165    .text:0000000000000a80 $t
       environment.s:165    .text:0000000000000a80 MAXN
       environment.s:176    .text:0000000000000a8e $d
       environment.s:176    .text:0000000000000a92 _MAXU
       environment.s:176    .text:0000000000000a98 $t
       environment.s:176    .text:0000000000000a98 MAXU
       environment.s:187    .text:0000000000000aa2 $d
       environment.s:187    .text:0000000000000aa6 _MAXUD
       environment.s:187    .text:0000000000000ab0 MAXUD
       environment.s:201    .text:0000000000000ac2 $d
       environment.s:201    .text:0000000000000ac6 _RSTKCELLS
       environment.s:201    .text:0000000000000adc RSTKCELLS
ARM GAS  forth.s 			page 219


       environment.s:213    .text:0000000000000ae6 $d
       environment.s:214    .text:0000000000000aea ENVLINK
       environment.s:217    .text:0000000000000af6 $t
       environment.s:218    .text:0000000000000af8 STKCELLS
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000b92 $d
          ser-term.s:90     .text:0000000000000b96 _SER_QKEY
          ser-term.s:90     .text:0000000000000ba0 SER_QKEY
          ser-term.s:110    .text:0000000000000bcc $d
          ser-term.s:110    .text:0000000000000bd0 _SER_EMIT
          ser-term.s:110    .text:0000000000000bdc SER_EMIT
          ser-term.s:124    .text:0000000000000bf6 $d
          ser-term.s:124    .text:0000000000000bfa _LOCAL
          ser-term.s:124    .text:0000000000000c00 $t
          ser-term.s:124    .text:0000000000000c00 LOCAL
          ser-term.s:133    .text:0000000000000c0c $d
          ser-term.s:133    .text:0000000000000c10 _SERIAL
          ser-term.s:133    .text:0000000000000c18 SERIAL
          ser-term.s:142    .text:0000000000000c24 $d
          ser-term.s:142    .text:0000000000000c28 _CONSOLE
          ser-term.s:142    .text:0000000000000c30 $t
          ser-term.s:142    .text:0000000000000c30 CONSOLE
          ser-term.s:164    .text:0000000000000c50 $d
          ser-term.s:164    .text:0000000000000c54 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000c60 ANSI_PARAM
          ser-term.s:166    .text:0000000000000c64 $d
             forth.s:747    .text:0000000000003400 ONEP
             forth.s:1686   .text:0000000000003c50 SLMOD
          ser-term.s:191    .text:0000000000000cd0 _ANSI_ESC
          ser-term.s:191    .text:0000000000000cd8 ANSI_ESC
          ser-term.s:193    .text:0000000000000cdc $d
          ser-term.s:203    .text:0000000000000cfc _SER_AT
          ser-term.s:203    .text:0000000000000d04 SER_AT
          ser-term.s:205    .text:0000000000000d08 $d
          ser-term.s:219    .text:0000000000000d38 _SER_CLS
          ser-term.s:219    .text:0000000000000d40 $t
          ser-term.s:219    .text:0000000000000d40 SER_CLS
          ser-term.s:221    .text:0000000000000d44 $d
          ser-term.s:228    .text:0000000000000d68 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
ARM GAS  forth.s 			page 220


             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000d78 $t
             tvout.s:150    .text:0000000000000e54 state_vsync
             tvout.s:191    .text:0000000000000ea8 state_pre_video
             tvout.s:202    .text:0000000000000eba state_video_out
             tvout.s:237    .text:0000000000000f18 state_post_video
             tvout.s:254    .text:0000000000000f3e tv_isr_exit
             tvout.s:180    .text:0000000000000e8e sync_end
             tvout.s:246    .text:0000000000000f2a frame_end
             tvout.s:264    .text:0000000000000f40 $d
             tvout.s:264    .text:0000000000000f44 _BACKCOLOR
             tvout.s:264    .text:0000000000000f50 BACKCOLOR
             tvout.s:271    .text:0000000000000f5c $d
             tvout.s:271    .text:0000000000000f60 _PENCOLOR
             tvout.s:271    .text:0000000000000f6a $t
             tvout.s:271    .text:0000000000000f6c PENCOLOR
             tvout.s:278    .text:0000000000000f78 $d
             tvout.s:278    .text:0000000000000f7c _CURSOR_COL
             tvout.s:278    .text:0000000000000f84 CURSOR_COL
             tvout.s:285    .text:0000000000000f90 $d
             tvout.s:285    .text:0000000000000f94 _CURSOR_ROW
             tvout.s:285    .text:0000000000000f98 $t
             tvout.s:285    .text:0000000000000f98 CURSOR_ROW
             tvout.s:292    .text:0000000000000fa4 $d
             tvout.s:292    .text:0000000000000fa8 _ROWY
             tvout.s:292    .text:0000000000000fae $t
             tvout.s:292    .text:0000000000000fb0 ROWY
             tvout.s:299    .text:0000000000000fbc $d
             tvout.s:299    .text:0000000000000fc0 _COLX
             tvout.s:299    .text:0000000000000fc6 $t
             tvout.s:299    .text:0000000000000fc8 COLX
             tvout.s:306    .text:0000000000000fd4 $d
             tvout.s:306    .text:0000000000000fd8 _FONT
             tvout.s:306    .text:0000000000000fe0 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000fec $d
             tvout.s:313    .text:0000000000000ff0 _VIDBUFF
             tvout.s:313    .text:0000000000000ff8 $t
             tvout.s:313    .text:0000000000000ff8 VIDBUFF
             tvout.s:325    .text:0000000000001002 $d
             tvout.s:325    .text:0000000000001006 _PLOT
             tvout.s:325    .text:000000000000100c PLOT
             tvout.s:373    .text:0000000000001090 plot_op
             tvout.s:341    .text:0000000000001038 op_back
             tvout.s:350    .text:0000000000001052 op_pen
             tvout.s:359    .text:000000000000106c op_invert
ARM GAS  forth.s 			page 221


             tvout.s:363    .text:0000000000001074 op_xor
             tvout.s:373    .text:0000000000001090 $d
             tvout.s:378    .text:0000000000001098 _VSYNC
             tvout.s:378    .text:000000000000109e $t
             tvout.s:378    .text:00000000000010a0 VSYNC
             tvout.s:386    .text:00000000000010aa $d
             tvout.s:386    .text:00000000000010ae _CLS
             tvout.s:386    .text:00000000000010b2 $t
             tvout.s:386    .text:00000000000010b4 CLS
             tvout.s:410    .text:00000000000010f6 $d
             tvout.s:410    .text:00000000000010fa _CLRLINE
             tvout.s:410    .text:0000000000001102 $t
             tvout.s:410    .text:0000000000001104 CLRLINE
             tvout.s:412    .text:0000000000001108 $d
             forth.s:715    .text:00000000000033c4 STAR
             forth.s:1980   .text:0000000000003f0c FILL
             tvout.s:427    .text:000000000000113c _SCROLLUP
             tvout.s:427    .text:0000000000001148 SCROLLUP
             tvout.s:429    .text:000000000000114c $d
             forth.s:1948   .text:0000000000003ec4 MOVE
             tvout.s:448    .text:0000000000001194 _SCROLLDOWN
             tvout.s:448    .text:00000000000011a0 SCROLLDOWN
             tvout.s:450    .text:00000000000011a4 $d
             tvout.s:467    .text:00000000000011e4 _TV_CRLF
             tvout.s:467    .text:00000000000011ec $t
             tvout.s:467    .text:00000000000011ec TV_CRLF
             tvout.s:482    .text:000000000000120e $d
             tvout.s:482    .text:0000000000001212 _RIGHT
             tvout.s:482    .text:0000000000001218 $t
             tvout.s:482    .text:0000000000001218 RIGHT
             tvout.s:495    .text:000000000000122c $d
             tvout.s:495    .text:0000000000001230 _LEFT
             tvout.s:495    .text:0000000000001238 LEFT
             tvout.s:511    .text:0000000000001264 FONT_PIXEL
             tvout.s:518    .text:0000000000001274 INCR_X
             tvout.s:525    .text:0000000000001280 NEXT_PIXEL
             tvout.s:534    .text:0000000000001288 CHAR_ROW
             tvout.s:536    .text:000000000000128c $d
             forth.s:886    .text:0000000000003518 DDUP
             forth.s:469    .text:00000000000031d0 RAT
             forth.s:348    .text:0000000000003100 DONXT
             forth.s:877    .text:0000000000003504 TDROP
             tvout.s:551    .text:00000000000012c8 CHAR_FONT
             tvout.s:552    .text:00000000000012c8 $t
             tvout.s:563    .text:00000000000012dc $d
             tvout.s:563    .text:00000000000012e0 _TV_EMIT
             tvout.s:563    .text:00000000000012e8 $t
             tvout.s:565    .text:00000000000012ec $d
             forth.s:1039   .text:0000000000003668 ULESS
             tvout.s:593    .text:0000000000001370 CTRL_KEY
             forth.s:846    .text:00000000000034c8 ROT
             forth.s:440    .text:0000000000003194 CAT
             tvout.s:660    .text:0000000000001458 SHOW_CURSOR
             tvout.s:691    .text:00000000000014e0 HIDE_CURSOR
             forth.s:1014   .text:0000000000003630 EQUAL
             tvout.s:650    .text:0000000000001438 BACK_SPACE
             tvout.s:618    .text:00000000000013e0 CAR_RET
ARM GAS  forth.s 			page 222


             tvout.s:629    .text:00000000000013f8 LN_FEED
             tvout.s:619    .text:00000000000013e0 $t
             tvout.s:620    .text:00000000000013e4 $d
             tvout.s:630    .text:00000000000013f8 $t
             tvout.s:631    .text:00000000000013fc $d
             forth.s:658    .text:000000000000334c XORR
             tvout.s:651    .text:0000000000001438 $t
             tvout.s:652    .text:000000000000143c $d
             tvout.s:660    .text:000000000000144c _SHOW_CURSOR
             tvout.s:660    .text:0000000000001458 $t
             tvout.s:663    .text:000000000000145c $d
             forth.s:828    .text:00000000000034a4 TWOSL
             forth.s:430    .text:0000000000003180 CSTOR
             forth.s:868    .text:00000000000034f0 DDROP
             tvout.s:691    .text:00000000000014d4 _HIDE_CURSOR
             tvout.s:691    .text:00000000000014e0 $t
             tvout.s:694    .text:00000000000014e4 $d
             forth.s:649    .text:0000000000003338 ORR
             tvout.s:704    .text:000000000000150c _TV_AT
             tvout.s:704    .text:0000000000001512 $t
             tvout.s:704    .text:0000000000001514 TV_AT
             tvout.s:719    .text:0000000000001538 $d
             tvout.s:719    .text:000000000000153c _INPUT
             tvout.s:719    .text:0000000000001542 $t
             tvout.s:719    .text:0000000000001544 INPUT
             tvout.s:721    .text:0000000000001548 $d
             forth.s:1868   .text:0000000000003e00 PAD
             forth.s:3164   .text:0000000000004c78 ACCEP
             forth.s:576    .text:00000000000032a8 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001574 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
ARM GAS  forth.s 			page 223


       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
ARM GAS  forth.s 			page 224


       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000001580 sc_ascii
         mcSaite.inc:100    .text:0000000000001634 shifted
         mcSaite.inc:151    .text:0000000000001694 altchar
         mcSaite.inc:167    .text:00000000000016a4 extended
         mcSaite.inc:191    .text:00000000000016cc controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
ARM GAS  forth.s 			page 225


           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000007d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000007c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:0000000000001702 $t
           ps2_kbd.s:179    .text:000000000000182e send_bit
           ps2_kbd.s:107    .text:0000000000001764 start_bit
           ps2_kbd.s:118    .text:0000000000001788 parity_bit
           ps2_kbd.s:125    .text:000000000000179c stop_bit
           ps2_kbd.s:152    .text:00000000000017f2 store_code
           ps2_kbd.s:253    .text:00000000000018c2 do_async_key
           ps2_kbd.s:204    .text:0000000000001872 send_parity
           ps2_kbd.s:211    .text:0000000000001884 send_stop
           ps2_kbd.s:218    .text:000000000000188e rx_ack_bit
           ps2_kbd.s:236    .text:00000000000018ae is_async_key
           ps2_kbd.s:286    .text:0000000000001912 async_keys
           ps2_kbd.s:378    .text:00000000000019f8 table_scan
           ps2_kbd.s:260    .text:00000000000018d4 set_async_key
           ps2_kbd.s:295    .text:0000000000001920 async_jump
           ps2_kbd.s:265    .text:00000000000018e2 shift_key
           ps2_kbd.s:273    .text:00000000000018f2 set_reset
           ps2_kbd.s:268    .text:00000000000018e8 ctrl_key
           ps2_kbd.s:271    .text:00000000000018ee alt_key
           ps2_kbd.s:287    .text:0000000000001912 $d
           ps2_kbd.s:340    .text:00000000000019a0 $d
           ps2_kbd.s:340    .text:00000000000019a4 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000019ae $t
           ps2_kbd.s:340    .text:00000000000019b0 KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000019c0 keycode
           ps2_kbd.s:365    .text:00000000000019e8 wait_code
           ps2_kbd.s:396    .text:0000000000001a12 $d
           ps2_kbd.s:396    .text:0000000000001a16 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001a6c inkey_exit
           ps2_kbd.s:418    .text:0000000000001a70 pause_key
           ps2_kbd.s:427    .text:0000000000001a86 do_modifiers
           ps2_kbd.s:436    .text:0000000000001a9e shift_down
           ps2_kbd.s:440    .text:0000000000001aa4 altchar_down
           ps2_kbd.s:444    .text:0000000000001aaa ctrl_down
           ps2_kbd.s:452    .text:0000000000001ac6 do_capslock
           ps2_kbd.s:478    .text:0000000000001aea kbd_send
           ps2_kbd.s:553    .text:0000000000001bde kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001bfc $d
           ps2_kbd.s:567    .text:0000000000001c00 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001c08 $t
           ps2_kbd.s:567    .text:0000000000001c08 KBD_RST
           ps2_kbd.s:591    .text:0000000000001c52 $d
           ps2_kbd.s:591    .text:0000000000001c56 _KBD_LED
ARM GAS  forth.s 			page 226


           ps2_kbd.s:591    .text:0000000000001c5e $t
           ps2_kbd.s:591    .text:0000000000001c60 KBD_LED
           ps2_kbd.s:616    .text:0000000000001cb4 $d
           ps2_kbd.s:616    .text:0000000000001cb8 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001cc4 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001cee $d
           ps2_kbd.s:633    .text:0000000000001cf2 _WKEY
           ps2_kbd.s:633    .text:0000000000001cfc WKEY
           ps2_kbd.s:635    .text:0000000000001d00 $d
           ps2_kbd.s:640    .text:0000000000001d18 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001d38 $t
         spi-flash.s:85     .text:0000000000001dda $d
         spi-flash.s:85     .text:0000000000001dde _CHIP_SEL
         spi-flash.s:85     .text:0000000000001de8 CHIP_SEL
         spi-flash.s:97     .text:0000000000001e06 $d
         spi-flash.s:97     .text:0000000000001e0a _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001e14 $t
         spi-flash.s:97     .text:0000000000001e14 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001e42 $d
         spi-flash.s:113    .text:0000000000001e46 _RD_BYTE
         spi-flash.s:113    .text:0000000000001e4e $t
         spi-flash.s:113    .text:0000000000001e50 RD_BYTE
         spi-flash.s:133    .text:0000000000001e78 $d
         spi-flash.s:133    .text:0000000000001e7c _WR_BYTE
         spi-flash.s:133    .text:0000000000001e84 $t
         spi-flash.s:133    .text:0000000000001e84 WR_BYTE
         spi-flash.s:151    .text:0000000000001ea8 $d
         spi-flash.s:151    .text:0000000000001eac _WR_DIS
         spi-flash.s:151    .text:0000000000001eb4 WR_DIS
         spi-flash.s:153    .text:0000000000001eb8 $d
         spi-flash.s:163    .text:0000000000001ed4 _WR_ENBL
         spi-flash.s:163    .text:0000000000001edc $t
         spi-flash.s:163    .text:0000000000001edc WR_ENBL
         spi-flash.s:165    .text:0000000000001ee0 $d
         spi-flash.s:175    .text:0000000000001efc _RD_SR
         spi-flash.s:175    .text:0000000000001f02 $t
         spi-flash.s:175    .text:0000000000001f04 RD_SR
         spi-flash.s:177    .text:0000000000001f08 $d
         spi-flash.s:185    .text:0000000000001f2c sr_cmd
         spi-flash.s:191    .text:0000000000001f33 _SEND_ADR
         spi-flash.s:191    .text:0000000000001f3c $t
         spi-flash.s:191    .text:0000000000001f3c SEND_ADR
         spi-flash.s:193    .text:0000000000001f40 $d
         spi-flash.s:208    .text:0000000000001f74 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001f7e $t
         spi-flash.s:208    .text:0000000000001f80 WAIT_DONE
         spi-flash.s:210    .text:0000000000001f84 $d
         spi-flash.s:223    .text:0000000000001fb4 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001fbe $t
         spi-flash.s:223    .text:0000000000001fc0 ERASE_BLK
         spi-flash.s:225    .text:0000000000001fc4 $d
         spi-flash.s:238    .text:0000000000001fec _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001ff8 ERASE_CHIP
ARM GAS  forth.s 			page 227


         spi-flash.s:240    .text:0000000000001ffc $d
         spi-flash.s:256    .text:000000000000202c _RD_BLK
         spi-flash.s:256    .text:0000000000002034 RD_BLK
         spi-flash.s:258    .text:0000000000002038 $d
         spi-flash.s:278    .text:0000000000002080 _WR_BLK
         spi-flash.s:278    .text:0000000000002088 WR_BLK
         spi-flash.s:280    .text:000000000000208c $d
             forth.s:2677   .text:0000000000004690 HDOT
         spi-flash.s:316    .text:00000000000020e4 _SEARCH_FILE
         spi-flash.s:316    .text:00000000000020f0 $t
         spi-flash.s:316    .text:00000000000020f0 SEARCH_FILE
         spi-flash.s:319    .text:00000000000020f4 $d
         spi-flash.s:325    .text:00000000000020fc _ERASE_FILE
         spi-flash.s:325    .text:0000000000002108 ERASE_FILE
         spi-flash.s:328    .text:000000000000210c $d
         spi-flash.s:334    .text:0000000000002114 _DIR
         spi-flash.s:334    .text:0000000000002118 $t
         spi-flash.s:334    .text:0000000000002118 DIR
         spi-flash.s:337    .text:000000000000211c $d
         spi-flash.s:343    .text:0000000000002124 _SAVE
         spi-flash.s:343    .text:000000000000212c SAVE
         spi-flash.s:346    .text:0000000000002130 $d
         spi-flash.s:352    .text:0000000000002138 _LOAD
         spi-flash.s:352    .text:0000000000002140 LOAD
         spi-flash.s:355    .text:0000000000002144 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:000000000000216c p10
               fpu.s:59     .text:0000000000002198 _PWR10
               fpu.s:59     .text:000000000000219e $t
               fpu.s:59     .text:00000000000021a0 PWR10
               fpu.s:90     .text:00000000000021cc $d
               fpu.s:90     .text:00000000000021d0 _FDI
               fpu.s:90     .text:00000000000021d4 $t
               fpu.s:90     .text:00000000000021d4 FDI
               fpu.s:100    .text:00000000000021e6 $d
               fpu.s:100    .text:00000000000021ea _FEI
               fpu.s:100    .text:00000000000021ee $t
               fpu.s:100    .text:00000000000021f0 FEI
               fpu.s:110    .text:0000000000002202 $d
               fpu.s:110    .text:0000000000002206 _FPSCR
               fpu.s:110    .text:000000000000220c $t
               fpu.s:123    .text:000000000000221c $d
               fpu.s:123    .text:0000000000002220 _CLR_FPSCR
               fpu.s:123    .text:000000000000222a $t
               fpu.s:136    .text:0000000000002244 $d
               fpu.s:136    .text:0000000000002248 _TOS0
               fpu.s:136    .text:000000000000224c $t
               fpu.s:136    .text:000000000000224c TOS0
               fpu.s:145    .text:0000000000002258 $d
               fpu.s:145    .text:000000000000225c _TOS1
               fpu.s:145    .text:0000000000002260 $t
               fpu.s:145    .text:0000000000002260 TOS1
               fpu.s:154    .text:000000000000226c $d
               fpu.s:154    .text:0000000000002270 _TOS2
ARM GAS  forth.s 			page 228


               fpu.s:154    .text:0000000000002274 $t
               fpu.s:154    .text:0000000000002274 TOS2
               fpu.s:163    .text:0000000000002280 $d
               fpu.s:163    .text:0000000000002284 _S0FROM
               fpu.s:163    .text:0000000000002288 $t
               fpu.s:163    .text:0000000000002288 S0FROM
               fpu.s:172    .text:0000000000002294 $d
               fpu.s:172    .text:0000000000002298 _S1FROM
               fpu.s:172    .text:000000000000229c $t
               fpu.s:172    .text:000000000000229c S1FROM
               fpu.s:181    .text:00000000000022a8 $d
               fpu.s:181    .text:00000000000022ac _S2FROM
               fpu.s:181    .text:00000000000022b0 $t
               fpu.s:181    .text:00000000000022b0 S2FROM
               fpu.s:192    .text:00000000000022bc $d
               fpu.s:192    .text:00000000000022c0 _FTOS
               fpu.s:192    .text:00000000000022c4 $t
               fpu.s:192    .text:00000000000022c4 FTOS
               fpu.s:202    .text:00000000000022d4 $d
               fpu.s:202    .text:00000000000022d8 _TRUNC
               fpu.s:202    .text:00000000000022de $t
               fpu.s:202    .text:00000000000022e0 TRUNC
               fpu.s:212    .text:00000000000022f0 $d
               fpu.s:212    .text:00000000000022f4 _STOF
               fpu.s:212    .text:00000000000022f8 $t
               fpu.s:212    .text:00000000000022f8 STOF
               fpu.s:222    .text:0000000000002308 $d
               fpu.s:222    .text:000000000000230c _FPLUS
               fpu.s:222    .text:0000000000002310 FPLUS
               fpu.s:235    .text:0000000000002328 $d
               fpu.s:235    .text:000000000000232c _FSUBB
               fpu.s:235    .text:0000000000002330 FSUBB
               fpu.s:249    .text:0000000000002348 $d
               fpu.s:249    .text:000000000000234c _FSTAR
               fpu.s:249    .text:0000000000002350 FSTAR
               fpu.s:262    .text:0000000000002368 $d
               fpu.s:262    .text:000000000000236c _FSLH
               fpu.s:262    .text:0000000000002370 FSLH
               fpu.s:275    .text:0000000000002388 $d
               fpu.s:275    .text:000000000000238c _FNEG
               fpu.s:275    .text:0000000000002394 $t
               fpu.s:275    .text:0000000000002394 FNEG
               fpu.s:285    .text:00000000000023a4 $d
               fpu.s:285    .text:00000000000023a8 _FABS
               fpu.s:285    .text:00000000000023b0 FABS
               fpu.s:297    .text:00000000000023c4 $d
               fpu.s:297    .text:00000000000023c8 _SQRT
               fpu.s:297    .text:00000000000023d0 SQRT
               fpu.s:307    .text:00000000000023e0 $d
               fpu.s:307    .text:00000000000023e4 _FZLESS
               fpu.s:307    .text:00000000000023e8 $t
               fpu.s:307    .text:00000000000023e8 FZLESS
               fpu.s:319    .text:0000000000002400 $d
               fpu.s:319    .text:0000000000002404 _FGREAT
               fpu.s:319    .text:0000000000002408 FGREAT
               fpu.s:321    .text:000000000000240c $d
             forth.s:954    .text:00000000000035b4 INVER
ARM GAS  forth.s 			page 229


               fpu.s:330    .text:0000000000002420 _FLESS
               fpu.s:330    .text:0000000000002424 FLESS
               fpu.s:332    .text:0000000000002428 $d
               fpu.s:340    .text:0000000000002438 _FMIN
               fpu.s:340    .text:0000000000002440 FMIN
               fpu.s:342    .text:0000000000002444 $d
               fpu.s:353    .text:0000000000002468 _FMAX
               fpu.s:353    .text:0000000000002470 FMAX
               fpu.s:355    .text:0000000000002474 $d
               fpu.s:368    .text:0000000000002498 _FSIGN
               fpu.s:368    .text:000000000000249e $t
               fpu.s:368    .text:00000000000024a0 FSIGN
               fpu.s:379    .text:00000000000024b4 $d
               fpu.s:379    .text:00000000000024b8 _FEXP
               fpu.s:379    .text:00000000000024c0 FEXP
               fpu.s:390    .text:00000000000024d8 $d
               fpu.s:390    .text:00000000000024dc _FMANT
               fpu.s:390    .text:00000000000024e2 $t
               fpu.s:390    .text:00000000000024e4 FMANT
               fpu.s:403    .text:0000000000002500 $d
               fpu.s:403    .text:0000000000002504 _PI
               fpu.s:403    .text:0000000000002508 PI
               fpu.s:412    .text:0000000000002518 $d
               fpu.s:412    .text:000000000000251c _LN2
               fpu.s:412    .text:0000000000002520 $t
               fpu.s:412    .text:0000000000002520 LN2
               fpu.s:421    .text:0000000000002530 $d
               fpu.s:421    .text:0000000000002534 _LN10
               fpu.s:421    .text:000000000000253c LN10
               fpu.s:431    .text:000000000000254c $d
               fpu.s:431    .text:0000000000002550 _LOG2
               fpu.s:431    .text:0000000000002558 LOG2
               fpu.s:441    .text:0000000000002568 $d
               fpu.s:441    .text:000000000000256c _LOG2TO10
               fpu.s:441    .text:0000000000002574 $t
               fpu.s:441    .text:0000000000002574 LOG2TO10
               fpu.s:443    .text:0000000000002578 $d
             forth.s:599    .text:00000000000032d8 ZLESS
               fpu.s:453    .text:00000000000025a4 $d
            strtof.s:29     .text:00000000000025b0 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000025c8 p10p2at
            strtof.s:44     .text:00000000000025c8 $t
            strtof.s:45     .text:00000000000025cc $d
            strtof.s:57     .text:00000000000025ec bit_state
            strtof.s:58     .text:00000000000025ec $t
            strtof.s:59     .text:00000000000025f0 $d
             forth.s:1829   .text:0000000000003db4 PICK
            strtof.s:76     .text:0000000000002610 mant_div
            strtof.s:77     .text:0000000000002610 $t
            strtof.s:78     .text:0000000000002614 $d
            strtof.s:79     .text:0000000000002618 div_loop
             forth.s:1075   .text:00000000000036b0 GREAT
            strtof.s:107    .text:0000000000002664 mant_mult
ARM GAS  forth.s 			page 230


            strtof.s:108    .text:0000000000002664 $t
            strtof.s:109    .text:0000000000002668 $d
            strtof.s:110    .text:000000000000266c mult_loop
            strtof.s:134    .text:00000000000026b8 exp_adjust
            strtof.s:135    .text:00000000000026b8 $t
            strtof.s:136    .text:00000000000026bc $d
             forth.s:857    .text:00000000000034dc NROT
            strtof.s:148    .text:00000000000026f8 pos_exp
             forth.s:970    .text:00000000000035d8 ABSS
            strtof.s:159    .text:0000000000002708 integer
            strtof.s:160    .text:0000000000002708 $t
            strtof.s:161    .text:000000000000270c $d
             forth.s:561    .text:000000000000328c DSWAP
             forth.s:2247   .text:00000000000041d8 TONBR
             forth.s:487    .text:00000000000031f8 DTOR
             forth.s:458    .text:00000000000031b4 DRFROM
            strtof.s:178    .text:0000000000002738 decimals
            strtof.s:179    .text:0000000000002738 $t
            strtof.s:180    .text:000000000000273c $d
             forth.s:1098   .text:00000000000036e4 MIN
            strtof.s:204    .text:0000000000002790 exponent
            strtof.s:205    .text:0000000000002790 $t
            strtof.s:206    .text:0000000000002794 $d
             forth.s:2300   .text:000000000000426e NEGQ
             forth.s:962    .text:00000000000035c8 NEGAT
            strtof.s:226    .text:00000000000027d0 _FLOATQ
            strtof.s:226    .text:00000000000027d8 FLOATQ
            strtof.s:230    .text:00000000000027dc $d
             forth.s:2195   .text:000000000000414c DECIM
             forth.s:381    .text:0000000000003132 TBRAN
            strtof.s:258    .text:000000000000285c expect_dot
             forth.s:2280   .text:000000000000424c CHARQ
            strtof.s:262    .text:0000000000002870 get_fraction
            strtof.s:279    .text:00000000000028c4 get_exponent
            strtof.s:297    .text:0000000000002918 error2
             forth.s:2212   .text:0000000000004170 DIGTQ
            strtof.s:284    .text:00000000000028d8 build_float
            strtof.s:305    .text:0000000000002938 error4
            strtof.s:311    .text:000000000000294c restore_base
            strtof.s:309    .text:0000000000002944 e4
            strtof.s:300    .text:0000000000002924 error3
              ftoa.s:28     .text:000000000000295c rounding
              ftoa.s:48     .text:0000000000002984 _ROUND
              ftoa.s:48     .text:000000000000298a $t
              ftoa.s:48     .text:000000000000298c ROUND
              ftoa.s:50     .text:0000000000002990 $d
             forth.s:1087   .text:00000000000036cc MAX
              ftoa.s:67     .text:00000000000029d0 _CSTOP
              ftoa.s:67     .text:00000000000029d4 $t
              ftoa.s:67     .text:00000000000029d4 CSTOP
              ftoa.s:79     .text:00000000000029e0 ITOA
              ftoa.s:81     .text:00000000000029e4 $d
             forth.s:1543   .text:0000000000003b28 STOD
             forth.s:909    .text:000000000000354c DABS
             forth.s:2058   .text:0000000000003fec BDIGS
             forth.s:2102   .text:0000000000004058 DIGS
             forth.s:2120   .text:000000000000408c SIGN
ARM GAS  forth.s 			page 231


             forth.s:2134   .text:00000000000040b4 EDIGS
             forth.s:1928   .text:0000000000003e94 CMOVE
              ftoa.s:114    .text:0000000000002a38 _SCALEUP
              ftoa.s:114    .text:0000000000002a40 $t
              ftoa.s:114    .text:0000000000002a40 SCALEUP
              ftoa.s:116    .text:0000000000002a44 $d
              ftoa.s:148    .text:0000000000002aa0 _SCALEDOWN
              ftoa.s:148    .text:0000000000002aaa $t
              ftoa.s:148    .text:0000000000002aac SCALEDOWN
              ftoa.s:150    .text:0000000000002ab0 $d
              ftoa.s:181    .text:0000000000002b08 EPART
              ftoa.s:182    .text:0000000000002b08 $t
              ftoa.s:183    .text:0000000000002b0c $d
              ftoa.s:206    .text:0000000000002b3c FPART
              ftoa.s:207    .text:0000000000002b3c $t
              ftoa.s:208    .text:0000000000002b40 $d
              ftoa.s:255    .text:0000000000002be0 IPART
              ftoa.s:256    .text:0000000000002be0 $t
              ftoa.s:257    .text:0000000000002be4 $d
              ftoa.s:313    .text:0000000000002ca4 _FTOA
              ftoa.s:313    .text:0000000000002ca8 $t
              ftoa.s:313    .text:0000000000002ca8 FTOA
              ftoa.s:315    .text:0000000000002cac $d
              ftoa.s:365    .text:0000000000002d8c nan
             forth.s:795    .text:0000000000003460 BLANK
              ftoa.s:348    .text:0000000000002d3c zdz
              ftoa.s:387    .text:0000000000002df8 infinity
              ftoa.s:412    .text:0000000000002e40 _FDOT
              ftoa.s:412    .text:0000000000002e44 FDOT
              ftoa.s:415    .text:0000000000002e48 $d
             forth.s:1857   .text:0000000000003de8 HERE
             forth.s:3532   .text:00000000000050f0 ALLOT
             forth.s:80     .text:0000000000002eac $t
             forth.s:104    .text:0000000000002ec4 COMPI_NEST
             forth.s:117    .text:0000000000002ee2 TSTDIN
             forth.s:124    .text:0000000000002eec TSTDOUT
             forth.s:133    .text:0000000000002ef6 $d
             forth.s:133    .text:0000000000002efa _CFSR
             forth.s:145    .text:0000000000002f16 $d
             forth.s:145    .text:0000000000002f1a _BFAR
             forth.s:157    .text:0000000000002f36 $d
             forth.s:157    .text:0000000000002f3a _QKEY
             forth.s:157    .text:0000000000002f40 QKEY
             forth.s:159    .text:0000000000002f44 $d
             forth.s:1915   .text:0000000000003e74 ATEXE
             forth.s:167    .text:0000000000002f54 _KEY
             forth.s:167    .text:0000000000002f58 $t
             forth.s:167    .text:0000000000002f58 KEY
             forth.s:169    .text:0000000000002f5c KEY1
             forth.s:170    .text:0000000000002f5c $d
             forth.s:179    .text:0000000000002f74 _EMIT
             forth.s:181    .text:0000000000002f80 $d
             forth.s:215    .text:0000000000002f90 _RAND
             forth.s:215    .text:0000000000002f98 RAND
             forth.s:217    .text:0000000000002f9c $d
             forth.s:1205   .text:00000000000037bc SEED
             forth.s:1699   .text:0000000000003c70 MODD
ARM GAS  forth.s 			page 232


             forth.s:246    .text:000000000000300c _PAUSE
             forth.s:246    .text:0000000000003012 $t
             forth.s:246    .text:0000000000003014 PAUSE
             forth.s:248    .text:0000000000003018 $d
             forth.s:1223   .text:00000000000037ec TIMER
             forth.s:250    .text:0000000000003020 PAUSE_LOOP
             forth.s:255    .text:0000000000003038 PAUSE_EXIT
             forth.s:262    .text:0000000000003040 _ULED
             forth.s:271    .text:0000000000003064 ULED_OFF
             forth.s:279    .text:0000000000003068 $d
             forth.s:279    .text:000000000000306c _JOYSTK
             forth.s:279    .text:0000000000003074 JOYSTK
             forth.s:281    .text:0000000000003078 $d
             forth.s:293    .text:0000000000003098 _BEEP
             forth.s:293    .text:00000000000030a0 BEEP
             forth.s:318    .text:00000000000030d4 $d
             forth.s:318    .text:00000000000030d8 _NOP
             forth.s:318    .text:00000000000030dc $t
             forth.s:318    .text:00000000000030dc NOP
             forth.s:335    .text:00000000000030e8 $d
             forth.s:335    .text:00000000000030ec _EXECU
             forth.s:335    .text:00000000000030f4 $t
             forth.s:355    .text:0000000000003110 NEXT1
             forth.s:373    .text:000000000000312c QBRAN1
             forth.s:404    .text:000000000000314c $d
             forth.s:404    .text:0000000000003150 _EXIT
             forth.s:404    .text:0000000000003158 EXIT
             forth.s:412    .text:000000000000315a $d
             forth.s:412    .text:000000000000315e _STORE
             forth.s:412    .text:0000000000003160 $t
             forth.s:422    .text:000000000000316c $d
             forth.s:422    .text:0000000000003170 _AT
             forth.s:422    .text:0000000000003172 $t
             forth.s:430    .text:0000000000003178 $d
             forth.s:430    .text:000000000000317c _CSTOR
             forth.s:440    .text:000000000000318c $d
             forth.s:440    .text:0000000000003190 _CAT
             forth.s:449    .text:0000000000003198 $d
             forth.s:449    .text:000000000000319c _RFROM
             forth.s:458    .text:00000000000031aa $d
             forth.s:458    .text:00000000000031ae _DRFROM
             forth.s:458    .text:00000000000031b2 $t
             forth.s:469    .text:00000000000031c6 $d
             forth.s:469    .text:00000000000031ca _RAT
             forth.s:478    .text:00000000000031da $d
             forth.s:478    .text:00000000000031de _TOR
             forth.s:487    .text:00000000000031ee $d
             forth.s:487    .text:00000000000031f2 _DTOR
             forth.s:487    .text:00000000000031f6 $t
             forth.s:499    .text:000000000000320a $d
             forth.s:499    .text:000000000000320e _RPSTOR
             forth.s:499    .text:0000000000003212 $t
             forth.s:499    .text:0000000000003214 RPSTOR
             forth.s:508    .text:000000000000321c $d
             forth.s:508    .text:0000000000003220 _SPSTOR
             forth.s:508    .text:0000000000003224 $t
             forth.s:508    .text:0000000000003224 SPSTOR
ARM GAS  forth.s 			page 233


             forth.s:517    .text:000000000000322c $d
             forth.s:517    .text:0000000000003230 _SPAT
             forth.s:517    .text:0000000000003234 $t
             forth.s:517    .text:0000000000003234 SPAT
             forth.s:526    .text:000000000000323c $d
             forth.s:526    .text:0000000000003240 _RPAT
             forth.s:526    .text:0000000000003244 $t
             forth.s:526    .text:0000000000003244 RPAT
             forth.s:535    .text:000000000000324c $d
             forth.s:535    .text:0000000000003250 _DROP
             forth.s:543    .text:000000000000325e $d
             forth.s:543    .text:0000000000003262 _DUPP
             forth.s:543    .text:0000000000003266 $t
             forth.s:551    .text:000000000000326e $d
             forth.s:551    .text:0000000000003272 _SWAP
             forth.s:561    .text:0000000000003280 $d
             forth.s:561    .text:0000000000003284 _DSWAP
             forth.s:561    .text:000000000000328a $t
             forth.s:576    .text:000000000000329c $d
             forth.s:576    .text:00000000000032a0 _OVER
             forth.s:585    .text:00000000000032b0 $d
             forth.s:585    .text:00000000000032b4 _DOVER
             forth.s:585    .text:00000000000032ba $t
             forth.s:585    .text:00000000000032bc DOVER
             forth.s:599    .text:00000000000032ce $d
             forth.s:599    .text:00000000000032d2 _ZLESS
             forth.s:607    .text:00000000000032de $d
             forth.s:607    .text:00000000000032e2 _ZGREAT
             forth.s:607    .text:00000000000032e8 ZGREAT
             forth.s:618    .text:00000000000032f4 $d
             forth.s:618    .text:00000000000032f8 _ZNEQU
             forth.s:618    .text:00000000000032fc $t
             forth.s:618    .text:00000000000032fc ZNEQU
             forth.s:628    .text:0000000000003304 $d
             forth.s:628    .text:0000000000003308 _NEQU
             forth.s:628    .text:000000000000330c NEQU
             forth.s:640    .text:000000000000331a $d
             forth.s:640    .text:000000000000331e _ANDD
             forth.s:640    .text:0000000000003322 $t
             forth.s:649    .text:000000000000332e $d
             forth.s:649    .text:0000000000003332 _ORR
             forth.s:658    .text:0000000000003342 $d
             forth.s:658    .text:0000000000003346 _XORR
             forth.s:658    .text:000000000000334a $t
             forth.s:667    .text:0000000000003356 $d
             forth.s:667    .text:000000000000335a _UPLUS
             forth.s:667    .text:000000000000335e $t
             forth.s:667    .text:0000000000003360 UPLUS
             forth.s:679    .text:0000000000003370 $d
             forth.s:679    .text:0000000000003374 _RSHIFT
             forth.s:688    .text:0000000000003386 $d
             forth.s:688    .text:000000000000338a _LSHIFT
             forth.s:697    .text:000000000000339e $d
             forth.s:697    .text:00000000000033a2 _PLUS
             forth.s:697    .text:00000000000033a4 $t
             forth.s:706    .text:00000000000033ac $d
             forth.s:706    .text:00000000000033b0 _SUBB
ARM GAS  forth.s 			page 234


             forth.s:706    .text:00000000000033b2 $t
             forth.s:715    .text:00000000000033be $d
             forth.s:715    .text:00000000000033c2 _STAR
             forth.s:715    .text:00000000000033c4 $t
             forth.s:724    .text:00000000000033ce $d
             forth.s:724    .text:00000000000033d2 _UMSTA
             forth.s:724    .text:00000000000033d6 $t
             forth.s:724    .text:00000000000033d8 UMSTA
             forth.s:736    .text:00000000000033e4 $d
             forth.s:736    .text:00000000000033e8 _MSTAR
             forth.s:736    .text:00000000000033ec MSTAR
             forth.s:747    .text:00000000000033f8 $d
             forth.s:747    .text:00000000000033fc _ONEP
             forth.s:755    .text:0000000000003406 $d
             forth.s:755    .text:000000000000340a _ONEM
             forth.s:763    .text:0000000000003416 $d
             forth.s:763    .text:000000000000341a _TWOP
             forth.s:763    .text:0000000000003420 TWOP
             forth.s:771    .text:0000000000003426 $d
             forth.s:771    .text:000000000000342a _TWOM
             forth.s:771    .text:0000000000003430 TWOM
             forth.s:779    .text:0000000000003436 $d
             forth.s:779    .text:000000000000343a _CELLP
             forth.s:779    .text:0000000000003440 $t
             forth.s:779    .text:0000000000003440 CELLP
             forth.s:787    .text:0000000000003446 $d
             forth.s:787    .text:000000000000344a _CELLM
             forth.s:787    .text:0000000000003450 $t
             forth.s:787    .text:0000000000003450 CELLM
             forth.s:795    .text:0000000000003456 $d
             forth.s:795    .text:000000000000345a _BLANK
             forth.s:804    .text:000000000000346a $d
             forth.s:804    .text:000000000000346e _CELLS
             forth.s:804    .text:0000000000003474 $t
             forth.s:804    .text:0000000000003474 CELLS
             forth.s:812    .text:000000000000347a $d
             forth.s:812    .text:000000000000347e _CELLSL
             forth.s:812    .text:0000000000003484 $t
             forth.s:812    .text:0000000000003484 CELLSL
             forth.s:820    .text:000000000000348a $d
             forth.s:820    .text:000000000000348e _TWOST
             forth.s:820    .text:0000000000003494 TWOST
             forth.s:828    .text:000000000000349a $d
             forth.s:828    .text:000000000000349e _TWOSL
             forth.s:836    .text:00000000000034aa $d
             forth.s:836    .text:00000000000034ae _QDUP
             forth.s:846    .text:00000000000034be $d
             forth.s:846    .text:00000000000034c2 _ROT
             forth.s:846    .text:00000000000034c6 $t
             forth.s:857    .text:00000000000034d2 $d
             forth.s:857    .text:00000000000034d6 _NROT
             forth.s:868    .text:00000000000034e6 $d
             forth.s:868    .text:00000000000034ea _DDROP
             forth.s:868    .text:00000000000034f0 $t
             forth.s:877    .text:00000000000034fa $d
             forth.s:877    .text:00000000000034fe _TDROP
             forth.s:877    .text:0000000000003504 $t
ARM GAS  forth.s 			page 235


             forth.s:886    .text:000000000000350e $d
             forth.s:886    .text:0000000000003512 _DDUP
             forth.s:896    .text:0000000000003524 $d
             forth.s:896    .text:0000000000003528 _DPLUS
             forth.s:896    .text:000000000000352c DPLUS
             forth.s:909    .text:0000000000003540 $d
             forth.s:909    .text:0000000000003544 _DABS
             forth.s:925    .text:0000000000003568 $d
             forth.s:925    .text:000000000000356c _UDGREAT
             forth.s:925    .text:0000000000003570 $t
             forth.s:925    .text:0000000000003570 UDGREAT
             forth.s:942    .text:000000000000358c $d
             forth.s:942    .text:0000000000003590 _DZEQUAL
             forth.s:942    .text:0000000000003594 $t
             forth.s:942    .text:0000000000003594 DZEQUAL
             forth.s:954    .text:00000000000035a6 $d
             forth.s:954    .text:00000000000035aa _INVER
             forth.s:962    .text:00000000000035ba $d
             forth.s:962    .text:00000000000035be _NEGAT
             forth.s:970    .text:00000000000035ce $d
             forth.s:970    .text:00000000000035d2 _ABSS
             forth.s:970    .text:00000000000035d6 $t
             forth.s:980    .text:00000000000035e2 $d
             forth.s:980    .text:00000000000035e6 _CLZ
             forth.s:980    .text:00000000000035ea $t
             forth.s:988    .text:00000000000035f2 $d
             forth.s:988    .text:00000000000035f6 _CTZ
             forth.s:988    .text:00000000000035fa $t
             forth.s:988    .text:00000000000035fc CTZ
             forth.s:1003   .text:0000000000003614 $d
             forth.s:1003   .text:0000000000003618 _ZEQUAL
             forth.s:1003   .text:000000000000361c ZEQUAL
             forth.s:1014   .text:000000000000362a $d
             forth.s:1014   .text:000000000000362e _EQUAL
             forth.s:1014   .text:0000000000003630 $t
             forth.s:1026   .text:0000000000003640 $d
             forth.s:1026   .text:0000000000003644 _DIFF
             forth.s:1026   .text:0000000000003648 DIFF
             forth.s:1039   .text:0000000000003660 $d
             forth.s:1039   .text:0000000000003664 _ULESS
             forth.s:1051   .text:0000000000003678 $d
             forth.s:1051   .text:000000000000367c _LESS
             forth.s:1051   .text:000000000000367e $t
             forth.s:1051   .text:0000000000003680 LESS
             forth.s:1063   .text:0000000000003690 $d
             forth.s:1063   .text:0000000000003694 _UGREAT
             forth.s:1063   .text:0000000000003698 UGREAT
             forth.s:1075   .text:00000000000036a8 $d
             forth.s:1075   .text:00000000000036ac _GREAT
             forth.s:1075   .text:00000000000036ae $t
             forth.s:1087   .text:00000000000036c2 $d
             forth.s:1087   .text:00000000000036c6 _MAX
             forth.s:1087   .text:00000000000036ca $t
             forth.s:1098   .text:00000000000036da $d
             forth.s:1098   .text:00000000000036de _MIN
             forth.s:1098   .text:00000000000036e2 $t
             forth.s:1109   .text:00000000000036f2 $d
ARM GAS  forth.s 			page 236


             forth.s:1109   .text:00000000000036f6 _PSTOR
             forth.s:1109   .text:00000000000036fc PSTOR
             forth.s:1121   .text:000000000000370e $d
             forth.s:1121   .text:0000000000003712 _DSTOR
             forth.s:1121   .text:0000000000003718 DSTOR
             forth.s:1133   .text:000000000000372e $d
             forth.s:1133   .text:0000000000003732 _DAT
             forth.s:1133   .text:0000000000003738 DAT
             forth.s:1143   .text:0000000000003744 $d
             forth.s:1143   .text:0000000000003748 _COUNT
             forth.s:1143   .text:000000000000374e $t
             forth.s:1153   .text:000000000000375e $d
             forth.s:1153   .text:0000000000003762 _DNEGA
             forth.s:1153   .text:000000000000376a $t
             forth.s:1153   .text:000000000000376c DNEGA
             forth.s:1170   .text:000000000000377e DOVAR
             forth.s:1181   .text:000000000000378c DOCON
             forth.s:1196   .text:0000000000003798 $d
             forth.s:1196   .text:000000000000379c _STATE
             forth.s:1196   .text:00000000000037a2 $t
             forth.s:1196   .text:00000000000037a4 STATE
             forth.s:1205   .text:00000000000037b0 $d
             forth.s:1205   .text:00000000000037b4 _SEED
             forth.s:1214   .text:00000000000037c8 $d
             forth.s:1214   .text:00000000000037cc _MSEC
             forth.s:1223   .text:00000000000037e0 $d
             forth.s:1223   .text:00000000000037e4 _TIMER
             forth.s:1223   .text:00000000000037ea $t
             forth.s:1232   .text:00000000000037f8 $d
             forth.s:1232   .text:00000000000037fc _TBOOT
             forth.s:1232   .text:0000000000003802 $t
             forth.s:1232   .text:0000000000003804 TBOOT
             forth.s:1241   .text:0000000000003810 $d
             forth.s:1241   .text:0000000000003814 _BASE
             forth.s:1252   .text:0000000000003828 $d
             forth.s:1252   .text:000000000000382c _BCHR
             forth.s:1252   .text:0000000000003832 $t
             forth.s:1252   .text:0000000000003834 BCHR
             forth.s:1262   .text:0000000000003840 TEMP
             forth.s:1271   .text:000000000000384c $d
             forth.s:1271   .text:0000000000003850 _SPAN
             forth.s:1271   .text:0000000000003858 SPAN
             forth.s:1280   .text:0000000000003864 $d
             forth.s:1280   .text:0000000000003868 _INN
             forth.s:1280   .text:000000000000386c $t
             forth.s:1280   .text:000000000000386c INN
             forth.s:1290   .text:0000000000003878 $d
             forth.s:1290   .text:000000000000387c _NTIB
             forth.s:1290   .text:0000000000003884 NTIB
             forth.s:1299   .text:0000000000003890 $d
             forth.s:1299   .text:0000000000003894 _TEVAL
             forth.s:1299   .text:000000000000389a $t
             forth.s:1299   .text:000000000000389c TEVAL
             forth.s:1309   .text:00000000000038a8 $d
             forth.s:1309   .text:00000000000038ac _HLD
             forth.s:1309   .text:00000000000038b0 $t
             forth.s:1309   .text:00000000000038b0 HLD
ARM GAS  forth.s 			page 237


             forth.s:1319   .text:00000000000038bc $d
             forth.s:1319   .text:00000000000038c0 _CNTXT
             forth.s:1319   .text:00000000000038c8 $t
             forth.s:1320   .text:00000000000038c8 CRRNT
             forth.s:1330   .text:00000000000038d4 $d
             forth.s:1330   .text:00000000000038d8 _CPP
             forth.s:1330   .text:00000000000038dc CPP
             forth.s:1340   .text:00000000000038e8 $d
             forth.s:1340   .text:00000000000038ec _FCP
             forth.s:1340   .text:00000000000038f0 $t
             forth.s:1340   .text:00000000000038f0 FCP
             forth.s:1350   .text:00000000000038fc $d
             forth.s:1350   .text:0000000000003900 _LAST
             forth.s:1350   .text:0000000000003908 LAST
             forth.s:1364   .text:0000000000003914 $d
             forth.s:1364   .text:0000000000003918 _USER_BEGIN
             forth.s:1364   .text:0000000000003924 USER_BEGIN
             forth.s:1368   .text:0000000000003930 USR_BGN_ADR
             forth.s:1369   .text:0000000000003930 $d
             forth.s:1375   .text:0000000000003938 _USER_END
             forth.s:1375   .text:0000000000003944 USER_END
             forth.s:1379   .text:0000000000003950 USER_END_ADR
             forth.s:1380   .text:0000000000003950 $d
             forth.s:1386   .text:0000000000003958 _MAXINT
             forth.s:1386   .text:0000000000003960 $t
             forth.s:1386   .text:0000000000003960 MAXINT
             forth.s:1395   .text:0000000000003970 $d
             forth.s:1395   .text:0000000000003974 _MININT
             forth.s:1395   .text:000000000000397c $t
             forth.s:1395   .text:000000000000397c MININT
             forth.s:1404   .text:000000000000398c $d
             forth.s:1404   .text:0000000000003990 _MAXUINT
             forth.s:1404   .text:000000000000399c MAXUINT
             forth.s:1419   .text:00000000000039ac $d
             forth.s:1419   .text:00000000000039b0 _WITHI
             forth.s:1419   .text:00000000000039b8 WITHI
             forth.s:1421   .text:00000000000039bc $d
             forth.s:1436   .text:00000000000039dc _UMMOD
             forth.s:1436   .text:00000000000039e4 UMMOD
             forth.s:1440   .text:00000000000039ee UMMOD0
             forth.s:1447   .text:00000000000039fe UMMOD1
             forth.s:1453   .text:0000000000003a08 UMMOD2
             forth.s:1466   .text:0000000000003a14 $d
             forth.s:1466   .text:0000000000003a18 _MSMOD
             forth.s:1466   .text:0000000000003a20 MSMOD
             forth.s:1468   .text:0000000000003a24 $d
             forth.s:1477   .text:0000000000003a4c MMOD1
             forth.s:1484   .text:0000000000003a68 MMOD2
             forth.s:1492   .text:0000000000003a88 MMOD3
             forth.s:1506   .text:0000000000003a90 _SMSLSHREM
             forth.s:1506   .text:0000000000003a98 SMSLSHREM
             forth.s:1508   .text:0000000000003a9c $d
             forth.s:1543   .text:0000000000003b24 _STOD
             forth.s:1543   .text:0000000000003b28 $t
             forth.s:1552   .text:0000000000003b34 $d
             forth.s:1552   .text:0000000000003b38 _D2STAR
             forth.s:1552   .text:0000000000003b3c $t
ARM GAS  forth.s 			page 238


             forth.s:1552   .text:0000000000003b3c D2STAR
             forth.s:1564   .text:0000000000003b4e $d
             forth.s:1564   .text:0000000000003b52 _D2SL
             forth.s:1564   .text:0000000000003b56 $t
             forth.s:1564   .text:0000000000003b58 D2SL
             forth.s:1579   .text:0000000000003b66 $d
             forth.s:1579   .text:0000000000003b6a _DSLMOD
             forth.s:1579   .text:0000000000003b70 $t
             forth.s:1579   .text:0000000000003b70 DSLMOD
             forth.s:1615   .text:0000000000003bbc $d
             forth.s:1615   .text:0000000000003bc0 _DSLASH
             forth.s:1615   .text:0000000000003bc4 DSLASH
             forth.s:1617   .text:0000000000003bc8 $d
             forth.s:1637   .text:0000000000003c0c _DSTAR
             forth.s:1637   .text:0000000000003c10 DSTAR
             forth.s:1686   .text:0000000000003c46 $d
             forth.s:1686   .text:0000000000003c4a _SLMOD
             forth.s:1688   .text:0000000000003c54 $d
             forth.s:1699   .text:0000000000003c6c _MODD
             forth.s:1699   .text:0000000000003c70 $t
             forth.s:1701   .text:0000000000003c74 $d
             forth.s:1710   .text:0000000000003c84 _SLASH
             forth.s:1710   .text:0000000000003c86 $t
             forth.s:1710   .text:0000000000003c88 SLASH
             forth.s:1712   .text:0000000000003c8c $d
             forth.s:1723   .text:0000000000003ca0 _SSMOD
             forth.s:1723   .text:0000000000003ca6 $t
             forth.s:1723   .text:0000000000003ca8 SSMOD
             forth.s:1725   .text:0000000000003cac $d
             forth.s:1737   .text:0000000000003cc4 _STASL
             forth.s:1737   .text:0000000000003cc8 STASL
             forth.s:1739   .text:0000000000003ccc $d
             forth.s:1753   .text:0000000000003ce0 _CHARP
             forth.s:1753   .text:0000000000003ce6 $t
             forth.s:1753   .text:0000000000003ce8 CHARP
             forth.s:1763   .text:0000000000003cf0 $d
             forth.s:1763   .text:0000000000003cf4 _CHARS
             forth.s:1763   .text:0000000000003cfa $t
             forth.s:1763   .text:0000000000003cfc CHARS
             forth.s:1773   .text:0000000000003d00 $d
             forth.s:1773   .text:0000000000003d04 _ALIGN
             forth.s:1773   .text:0000000000003d0a $t
             forth.s:1773   .text:0000000000003d0c ALIGN
             forth.s:1786   .text:0000000000003d1c $d
             forth.s:1786   .text:0000000000003d20 _ALGND
             forth.s:1786   .text:0000000000003d28 $t
             forth.s:1786   .text:0000000000003d28 ALGND
             forth.s:1797   .text:0000000000003d38 $d
             forth.s:1797   .text:0000000000003d3c _TCHAR
             forth.s:1797   .text:0000000000003d42 $t
             forth.s:1797   .text:0000000000003d44 TCHAR
             forth.s:1799   .text:0000000000003d48 $d
             forth.s:1809   .text:0000000000003d80 TCHA1
             forth.s:1817   .text:0000000000003d88 _DEPTH
             forth.s:1817   .text:0000000000003d8e $t
             forth.s:1817   .text:0000000000003d90 DEPTH
             forth.s:1829   .text:0000000000003da8 $d
ARM GAS  forth.s 			page 239


             forth.s:1829   .text:0000000000003dac _PICK
             forth.s:1840   .text:0000000000003dbe $d
             forth.s:1840   .text:0000000000003dc2 _PUT
             forth.s:1840   .text:0000000000003dc6 $t
             forth.s:1840   .text:0000000000003dc8 PUT
             forth.s:1857   .text:0000000000003ddc $d
             forth.s:1857   .text:0000000000003de0 _HERE
             forth.s:1859   .text:0000000000003dec $d
             forth.s:1868   .text:0000000000003dfc _PAD
             forth.s:1868   .text:0000000000003e00 $t
             forth.s:1870   .text:0000000000003e04 $d
             forth.s:1881   .text:0000000000003e1c _TIB
             forth.s:1881   .text:0000000000003e20 $t
             forth.s:1881   .text:0000000000003e20 TIB
             forth.s:1892   .text:0000000000003e2a $d
             forth.s:1892   .text:0000000000003e2e _SOURCID
             forth.s:1892   .text:0000000000003e38 $t
             forth.s:1892   .text:0000000000003e38 SOURCID
             forth.s:1904   .text:0000000000003e42 $d
             forth.s:1904   .text:0000000000003e46 _SOURCE
             forth.s:1904   .text:0000000000003e50 SOURCE
             forth.s:1906   .text:0000000000003e54 $d
             forth.s:1915   .text:0000000000003e68 _ATEXE
             forth.s:1928   .text:0000000000003e88 $d
             forth.s:1928   .text:0000000000003e8c _CMOVE
             forth.s:1928   .text:0000000000003e92 $t
             forth.s:1935   .text:0000000000003ea6 CMOV1
             forth.s:1932   .text:0000000000003e9e CMOV0
             forth.s:1940   .text:0000000000003eb0 CMOV2
             forth.s:1948   .text:0000000000003eb8 $d
             forth.s:1948   .text:0000000000003ebc _MOVE
             forth.s:1966   .text:0000000000003eee MOVE1
             forth.s:1963   .text:0000000000003eea MOVE3
             forth.s:1960   .text:0000000000003ee6 MOVE0
             forth.s:1971   .text:0000000000003ef8 MOVE2
             forth.s:1980   .text:0000000000003f00 $d
             forth.s:1980   .text:0000000000003f04 _FILL
             forth.s:1988   .text:0000000000003f1a FILL2
             forth.s:1984   .text:0000000000003f12 FILL1
             forth.s:1998   .text:0000000000003f22 $d
             forth.s:1998   .text:0000000000003f26 _PACKS
             forth.s:1998   .text:0000000000003f2c $t
             forth.s:1998   .text:0000000000003f2c PACKS
             forth.s:2000   .text:0000000000003f30 $d
             forth.s:2029   .text:0000000000003f88 _DIGIT
             forth.s:2029   .text:0000000000003f8e $t
             forth.s:2029   .text:0000000000003f90 DIGIT
             forth.s:2031   .text:0000000000003f94 $d
             forth.s:2046   .text:0000000000003fc8 _EXTRC
             forth.s:2046   .text:0000000000003fd0 $t
             forth.s:2046   .text:0000000000003fd0 EXTRC
             forth.s:2048   .text:0000000000003fd4 $d
             forth.s:2058   .text:0000000000003fe8 _BDIGS
             forth.s:2060   .text:0000000000003ff0 $d
             forth.s:2070   .text:0000000000004004 _HOLD
             forth.s:2070   .text:000000000000400c HOLD
             forth.s:2072   .text:0000000000004010 $d
ARM GAS  forth.s 			page 240


             forth.s:2088   .text:0000000000004034 _DIG
             forth.s:2088   .text:0000000000004036 $t
             forth.s:2088   .text:0000000000004038 DIG
             forth.s:2090   .text:000000000000403c $d
             forth.s:2102   .text:0000000000004054 _DIGS
             forth.s:2104   .text:000000000000405c DIGS1
             forth.s:2105   .text:000000000000405c $d
             forth.s:2110   .text:0000000000004078 DIGS2
             forth.s:2120   .text:0000000000004084 _SIGN
             forth.s:2122   .text:0000000000004090 $d
             forth.s:2126   .text:00000000000040a8 SIGN1
             forth.s:2134   .text:00000000000040b0 _EDIGS
             forth.s:2136   .text:00000000000040b8 $d
             forth.s:2151   .text:00000000000040d4 STRR
             forth.s:2152   .text:00000000000040d4 $t
             forth.s:2153   .text:00000000000040d8 $d
             forth.s:2170   .text:0000000000004104 _HEX
             forth.s:2170   .text:0000000000004108 $t
             forth.s:2170   .text:0000000000004108 HEX
             forth.s:2172   .text:000000000000410c $d
             forth.s:2183   .text:0000000000004124 _BIN
             forth.s:2183   .text:0000000000004128 $t
             forth.s:2183   .text:0000000000004128 BIN
             forth.s:2185   .text:000000000000412c $d
             forth.s:2195   .text:0000000000004144 _DECIM
             forth.s:2195   .text:000000000000414c $t
             forth.s:2197   .text:0000000000004150 $d
             forth.s:2212   .text:0000000000004168 _DIGTQ
             forth.s:2214   .text:0000000000004174 $d
             forth.s:2227   .text:00000000000041bc DGTQ1
             forth.s:2247   .text:00000000000041d0 _TONBR
             forth.s:2247   .text:00000000000041d8 $t
             forth.s:2249   .text:00000000000041dc $d
             forth.s:2281   .text:000000000000424c $t
             forth.s:2329   .text:0000000000004298 $d
             forth.s:2329   .text:000000000000429c _INTQ
             forth.s:2329   .text:00000000000042a4 INTQ
             forth.s:2332   .text:00000000000042a8 $d
             forth.s:2384   .text:0000000000004370 _NUMBERQ
             forth.s:2384   .text:0000000000004378 $t
             forth.s:2384   .text:0000000000004378 NUMBERQ
             forth.s:2386   .text:000000000000437c $d
             forth.s:2404   .text:000000000000439c _SPACE
             forth.s:2404   .text:00000000000043a2 $t
             forth.s:2406   .text:00000000000043a8 $d
             forth.s:2415   .text:00000000000043b8 _SPACS
             forth.s:2415   .text:00000000000043c0 SPACS
             forth.s:2417   .text:00000000000043c4 $d
             forth.s:2423   .text:00000000000043e0 CHAR2
             forth.s:2421   .text:00000000000043dc CHAR1
             forth.s:2432   .text:00000000000043f0 _TYPEE
             forth.s:2434   .text:00000000000043fc $d
             forth.s:2440   .text:0000000000004414 TYPE2
             forth.s:2436   .text:0000000000004408 TYPE1
             forth.s:2450   .text:0000000000004428 _CR
             forth.s:2452   .text:0000000000004430 $d
             forth.s:2464   .text:000000000000444c DOSTR
ARM GAS  forth.s 			page 241


             forth.s:2465   .text:000000000000444c $t
             forth.s:2467   .text:0000000000004450 $d
             forth.s:2486   .text:000000000000447c STRQP
             forth.s:2487   .text:000000000000447c $t
             forth.s:2488   .text:0000000000004480 $d
             forth.s:2499   .text:0000000000004488 $t
             forth.s:2500   .text:000000000000448c $d
             forth.s:2512   .text:0000000000004498 LPAD
             forth.s:2513   .text:0000000000004498 $t
             forth.s:2514   .text:000000000000449c $d
             forth.s:2545   .text:000000000000451c _DOTR
             forth.s:2545   .text:0000000000004520 DOTR
             forth.s:2547   .text:0000000000004524 $d
             forth.s:2629   .text:0000000000004608 DTOA
             forth.s:2564   .text:000000000000454c _UDOTR
             forth.s:2564   .text:0000000000004550 $t
             forth.s:2564   .text:0000000000004550 UDOTR
             forth.s:2566   .text:0000000000004554 $d
             forth.s:2582   .text:0000000000004580 _UDOT
             forth.s:2584   .text:0000000000004588 $d
             forth.s:2600   .text:00000000000045b4 _DOT
             forth.s:2600   .text:00000000000045b6 $t
             forth.s:2602   .text:00000000000045bc $d
             forth.s:2610   .text:00000000000045e4 DOT1
             forth.s:2629   .text:0000000000004604 _DTOA
             forth.s:2629   .text:0000000000004608 $t
             forth.s:2631   .text:000000000000460c $d
             forth.s:2646   .text:0000000000004634 _DDOT
             forth.s:2646   .text:0000000000004638 DDOT
             forth.s:2648   .text:000000000000463c $d
             forth.s:2659   .text:000000000000465c _UDDOT
             forth.s:2659   .text:0000000000004660 $t
             forth.s:2659   .text:0000000000004660 UDDOT
             forth.s:2661   .text:0000000000004664 $d
             forth.s:2677   .text:000000000000468c _HDOT
             forth.s:2679   .text:0000000000004694 $d
             forth.s:2701   .text:00000000000046dc _QUEST
             forth.s:2701   .text:00000000000046de $t
             forth.s:2701   .text:00000000000046e0 QUEST
             forth.s:2703   .text:00000000000046e4 $d
             forth.s:2717   .text:00000000000046f0 PARS
             forth.s:2718   .text:00000000000046f0 $t
             forth.s:2719   .text:00000000000046f4 $d
             forth.s:2785   .text:0000000000004804 PARS8
             forth.s:2749   .text:0000000000004778 PARS3
             forth.s:2732   .text:0000000000004730 PARS1
             forth.s:2747   .text:0000000000004774 PARS2
             forth.s:2753   .text:0000000000004784 PARS4
             forth.s:2765   .text:00000000000047b4 PARS5
             forth.s:2772   .text:00000000000047d8 PARS6
             forth.s:2778   .text:00000000000047ec PARS7
             forth.s:2796   .text:0000000000004818 _PARSE
             forth.s:2796   .text:000000000000481e $t
             forth.s:2796   .text:0000000000004820 PARSE
             forth.s:2798   .text:0000000000004824 $d
             forth.s:2819   .text:0000000000004864 _DOTPR
             forth.s:2819   .text:0000000000004868 DOTPR
ARM GAS  forth.s 			page 242


             forth.s:2821   .text:000000000000486c $d
             forth.s:2832   .text:0000000000004884 _PAREN
             forth.s:2832   .text:0000000000004886 $t
             forth.s:2832   .text:0000000000004888 PAREN
             forth.s:2834   .text:000000000000488c $d
             forth.s:2845   .text:00000000000048a4 _BKSLA
             forth.s:2845   .text:00000000000048a6 $t
             forth.s:2845   .text:00000000000048a8 BKSLA
             forth.s:2847   .text:00000000000048ac $d
             forth.s:2858   .text:00000000000048c4 _CHAR
             forth.s:2858   .text:00000000000048cc CHAR
             forth.s:2860   .text:00000000000048d0 $d
             forth.s:2870   .text:00000000000048e8 _IMCHAR
             forth.s:2870   .text:00000000000048f0 IMCHAR
             forth.s:2872   .text:00000000000048f4 $d
             forth.s:3589   .text:000000000000518c LITER
             forth.s:2881   .text:0000000000004904 _WORDD
             forth.s:2881   .text:000000000000490c WORDD
             forth.s:2883   .text:0000000000004910 $d
             forth.s:2895   .text:0000000000004928 _TOKEN
             forth.s:2895   .text:000000000000492e $t
             forth.s:2895   .text:0000000000004930 TOKEN
             forth.s:2897   .text:0000000000004934 $d
             forth.s:3062   .text:0000000000004b24 UPPER
             forth.s:2911   .text:0000000000004948 _NAMET
             forth.s:2911   .text:000000000000494e $t
             forth.s:2911   .text:0000000000004950 NAMET
             forth.s:2913   .text:0000000000004954 $d
             forth.s:2932   .text:0000000000004974 _SAMEQ
             forth.s:2932   .text:000000000000497a $t
             forth.s:2932   .text:000000000000497c SAMEQ
             forth.s:2934   .text:0000000000004980 $d
             forth.s:2951   .text:00000000000049c8 SAME2
             forth.s:2936   .text:000000000000498c SAME1
             forth.s:2966   .text:00000000000049dc SEARCH
             forth.s:2967   .text:00000000000049dc $t
             forth.s:2968   .text:00000000000049e0 $d
             forth.s:2975   .text:00000000000049fc SEARCH1
             forth.s:2995   .text:0000000000004a54 SEARCH6
             forth.s:2988   .text:0000000000004a3c SEARCH2
             forth.s:2993   .text:0000000000004a4c SEARCH3
             forth.s:3002   .text:0000000000004a6c SEARCH4
             forth.s:3008   .text:0000000000004a88 SEARCH5
             forth.s:3024   .text:0000000000004ab0 _NAMEQ
             forth.s:3024   .text:0000000000004ab6 $t
             forth.s:3026   .text:0000000000004abc $d
             forth.s:3041   .text:0000000000004ad0 _ASCIZ
             forth.s:3041   .text:0000000000004ad6 $t
             forth.s:3041   .text:0000000000004ad8 ASCIZ
             forth.s:3043   .text:0000000000004adc $d
             forth.s:3062   .text:0000000000004b1c _UPPER
             forth.s:3062   .text:0000000000004b22 $t
             forth.s:3064   .text:0000000000004b28 $d
             forth.s:3095   .text:0000000000004bac BKSP
             forth.s:3096   .text:0000000000004bac $t
             forth.s:3097   .text:0000000000004bb0 $d
             forth.s:3111   .text:0000000000004bf4 BACK1
ARM GAS  forth.s 			page 243


             forth.s:3120   .text:0000000000004bf8 TAP
             forth.s:3121   .text:0000000000004bf8 $t
             forth.s:3122   .text:0000000000004bfc $d
             forth.s:3135   .text:0000000000004c14 KTAP
             forth.s:3136   .text:0000000000004c14 TTAP
             forth.s:3137   .text:0000000000004c14 $t
             forth.s:3138   .text:0000000000004c18 $d
             forth.s:3152   .text:0000000000004c58 KTAP2
             forth.s:3149   .text:0000000000004c50 KTAP1
             forth.s:3164   .text:0000000000004c70 _ACCEP
             forth.s:3166   .text:0000000000004c7c $d
             forth.s:3169   .text:0000000000004c88 ACCP1
             forth.s:3185   .text:0000000000004cd0 ACCP4
             forth.s:3181   .text:0000000000004cc4 ACCP2
             forth.s:3183   .text:0000000000004cc8 ACCP3
             forth.s:3196   .text:0000000000004ce4 _QUERY
             forth.s:3196   .text:0000000000004cea $t
             forth.s:3196   .text:0000000000004cec QUERY
             forth.s:3198   .text:0000000000004cf0 $d
             forth.s:3218   .text:0000000000004d24 _ABORT
             forth.s:3218   .text:0000000000004d2a $t
             forth.s:3220   .text:0000000000004d30 ABORT1
             forth.s:3221   .text:0000000000004d30 $d
             forth.s:3300   .text:0000000000004e08 LBRAC
             forth.s:3234   .text:0000000000004d40 PRT_ABORT
             forth.s:3235   .text:0000000000004d40 $t
             forth.s:3236   .text:0000000000004d44 $d
             forth.s:3254   .text:0000000000004d6c ABORQ
             forth.s:3255   .text:0000000000004d6c $t
             forth.s:3256   .text:0000000000004d70 $d
             forth.s:3278   .text:0000000000004da0 _INTER
             forth.s:3280   .text:0000000000004db0 $d
             forth.s:3289   .text:0000000000004dec INTE1
             forth.s:3286   .text:0000000000004de2 $t
             forth.s:3287   .text:0000000000004de4 $d
             forth.s:3293   .text:0000000000004dfc INTE2
             forth.s:3300   .text:0000000000004e04 _LBRAC
             forth.s:3300   .text:0000000000004e06 $t
             forth.s:3302   .text:0000000000004e0c $d
             forth.s:3315   .text:0000000000004e34 _DOTOK
             forth.s:3315   .text:0000000000004e38 $t
             forth.s:3315   .text:0000000000004e38 DOTOK
             forth.s:3317   .text:0000000000004e3c $d
             forth.s:3323   .text:0000000000004e60 DOTO1
             forth.s:3324   .text:0000000000004e60 $d
             forth.s:3332   .text:0000000000004e6c _QSTAC
             forth.s:3332   .text:0000000000004e74 QSTAC
             forth.s:3334   .text:0000000000004e78 $d
             forth.s:3336   .text:0000000000004e8e $t
             forth.s:3337   .text:0000000000004e90 $d
             forth.s:3344   .text:0000000000004e98 _EVAL
             forth.s:3346   .text:0000000000004ea4 EVAL1
             forth.s:3347   .text:0000000000004ea4 $d
             forth.s:3355   .text:0000000000004ecc EVAL2
             forth.s:3371   .text:0000000000004edc _EVALUATE
             forth.s:3371   .text:0000000000004ee8 EVALUATE
             forth.s:3374   .text:0000000000004eec $d
ARM GAS  forth.s 			page 244


             forth.s:3408   .text:0000000000004f80 _PRESE
             forth.s:3410   .text:0000000000004f8c $d
             forth.s:3424   .text:0000000000004fbc _QUIT
             forth.s:3425   .text:0000000000004fc4 $d
             forth.s:3427   .text:0000000000004fd0 QUIT1
             forth.s:3429   .text:0000000000004fd4 QUIT2
             forth.s:3439   .text:0000000000004fe8 _FORGET
             forth.s:3439   .text:0000000000004ff0 FORGET
             forth.s:3441   .text:0000000000004ff4 $d
             forth.s:4050   .text:00000000000056dc OVERT
             forth.s:3468   .text:000000000000503c $d
             forth.s:3468   .text:0000000000005040 _POSTPONE
             forth.s:3468   .text:000000000000504c POSTPONE
             forth.s:3470   .text:0000000000005050 $d
             forth.s:3493   .text:0000000000005088 ITICK
             forth.s:4092   .text:0000000000005748 CALLC
             forth.s:3480   .text:0000000000005060 _TICK
             forth.s:3480   .text:0000000000005062 $t
             forth.s:3480   .text:0000000000005064 TICK
             forth.s:3482   .text:0000000000005068 $d
             forth.s:3486   .text:000000000000507c TICK1
             forth.s:3493   .text:0000000000005084 _ITICK
             forth.s:3493   .text:0000000000005088 $t
             forth.s:3495   .text:000000000000508c $d
             forth.s:3510   .text:0000000000005098 _FIND
             forth.s:3510   .text:00000000000050a0 FIND
             forth.s:3512   .text:00000000000050a4 $d
             forth.s:3532   .text:00000000000050e8 _ALLOT
             forth.s:3532   .text:00000000000050ee $t
             forth.s:3534   .text:00000000000050f4 $d
             forth.s:3543   .text:0000000000005104 _COMMA
             forth.s:3543   .text:0000000000005106 $t
             forth.s:3543   .text:0000000000005108 COMMA
             forth.s:3545   .text:000000000000510c $d
             forth.s:3559   .text:0000000000005128 $d
             forth.s:3559   .text:000000000000512c _BCOMP
             forth.s:3559   .text:0000000000005136 $t
             forth.s:3559   .text:0000000000005138 BCOMP
             forth.s:3561   .text:000000000000513c $d
             forth.s:3571   .text:000000000000514c _COMPI
             forth.s:3571   .text:0000000000005154 $t
             forth.s:3571   .text:0000000000005154 COMPI
             forth.s:3573   .text:0000000000005158 $d
             forth.s:3589   .text:0000000000005184 _LITER
             forth.s:3589   .text:000000000000518c $t
             forth.s:3591   .text:0000000000005190 $d
             forth.s:3601   .text:00000000000051a4 STRCQ
             forth.s:3602   .text:00000000000051a4 $t
             forth.s:3603   .text:00000000000051a8 $d
             forth.s:3625   .text:00000000000051e0 _FOR
             forth.s:3625   .text:00000000000051e4 $t
             forth.s:3625   .text:00000000000051e4 FOR
             forth.s:3627   .text:00000000000051e8 $d
             forth.s:3636   .text:0000000000005200 _DO
             forth.s:3636   .text:0000000000005204 DO
             forth.s:3638   .text:0000000000005208 $d
             forth.s:3645   .text:000000000000523c DOPLOOP
ARM GAS  forth.s 			page 245


             forth.s:3646   .text:000000000000523c $t
             forth.s:3664   .text:0000000000005264 $d
             forth.s:3664   .text:0000000000005268 _PLOOP
             forth.s:3664   .text:000000000000526e $t
             forth.s:3664   .text:0000000000005270 PLOOP
             forth.s:3666   .text:0000000000005274 $d
             forth.s:3685   .text:00000000000052b4 resolve_leave
             forth.s:3671   .text:000000000000528c DOLOOP
             forth.s:3672   .text:000000000000528c $t
             forth.s:3687   .text:00000000000052b8 $d
             forth.s:3702   .text:00000000000052e4 _LOOP
             forth.s:3702   .text:00000000000052ec LOOP
             forth.s:3704   .text:00000000000052f0 $d
             forth.s:3713   .text:000000000000530c _UNLOOP
             forth.s:3713   .text:0000000000005314 UNLOOP
             forth.s:3722   .text:000000000000531c $d
             forth.s:3722   .text:0000000000005320 _LEAVE
             forth.s:3722   .text:0000000000005326 $t
             forth.s:3722   .text:0000000000005328 LEAVE
             forth.s:3724   .text:000000000000532c $d
             forth.s:3735   .text:000000000000535c DOLEAVE
             forth.s:3736   .text:000000000000535c $t
             forth.s:3747   .text:0000000000005368 $d
             forth.s:3747   .text:000000000000536c _BEGIN
             forth.s:3747   .text:0000000000005372 $t
             forth.s:3747   .text:0000000000005374 BEGIN
             forth.s:3749   .text:0000000000005378 $d
             forth.s:3758   .text:0000000000005380 $d
             forth.s:3758   .text:0000000000005384 _FNEXT
             forth.s:3758   .text:000000000000538c FNEXT
             forth.s:3760   .text:0000000000005390 $d
             forth.s:3768   .text:00000000000053a8 _I
             forth.s:3768   .text:00000000000053aa $t
             forth.s:3768   .text:00000000000053ac I
             forth.s:3777   .text:00000000000053b8 $d
             forth.s:3777   .text:00000000000053bc _J
             forth.s:3777   .text:00000000000053be $t
             forth.s:3777   .text:00000000000053c0 J
             forth.s:3787   .text:00000000000053cc $d
             forth.s:3787   .text:00000000000053d0 _UNTIL
             forth.s:3787   .text:00000000000053d6 $t
             forth.s:3787   .text:00000000000053d8 UNTIL
             forth.s:3789   .text:00000000000053dc $d
             forth.s:3798   .text:00000000000053f4 _AGAIN
             forth.s:3798   .text:00000000000053fa $t
             forth.s:3798   .text:00000000000053fc AGAIN
             forth.s:3800   .text:0000000000005400 $d
             forth.s:3809   .text:0000000000005418 _IFF
             forth.s:3809   .text:000000000000541c IFF
             forth.s:3811   .text:0000000000005420 $d
             forth.s:3823   .text:0000000000005448 _AHEAD
             forth.s:3823   .text:000000000000544e $t
             forth.s:3823   .text:0000000000005450 AHEAD
             forth.s:3825   .text:0000000000005454 $d
             forth.s:3837   .text:000000000000547c _REPEA
             forth.s:3837   .text:0000000000005484 REPEA
             forth.s:3839   .text:0000000000005488 $d
ARM GAS  forth.s 			page 246


             forth.s:3850   .text:00000000000054a0 _THENN
             forth.s:3850   .text:00000000000054a8 THENN
             forth.s:3852   .text:00000000000054ac $d
             forth.s:3863   .text:00000000000054c0 _AFT
             forth.s:3863   .text:00000000000054c4 $t
             forth.s:3863   .text:00000000000054c4 AFT
             forth.s:3865   .text:00000000000054c8 $d
             forth.s:3877   .text:00000000000054e0 _ELSEE
             forth.s:3877   .text:00000000000054e8 ELSEE
             forth.s:3879   .text:00000000000054ec $d
             forth.s:3889   .text:0000000000005500 _WHILE
             forth.s:3889   .text:0000000000005506 $t
             forth.s:3889   .text:0000000000005508 WHILE
             forth.s:3891   .text:000000000000550c $d
             forth.s:3900   .text:000000000000551c _RECURSE
             forth.s:3900   .text:0000000000005524 $t
             forth.s:3900   .text:0000000000005524 RECURSE
             forth.s:3902   .text:0000000000005528 $d
             forth.s:3914   .text:0000000000005540 _ABRTQ
             forth.s:3914   .text:0000000000005548 ABRTQ
             forth.s:3916   .text:000000000000554c $d
             forth.s:3925   .text:0000000000005564 _STRQ
             forth.s:3925   .text:0000000000005568 STRQ
             forth.s:3927   .text:000000000000556c $d
             forth.s:3937   .text:0000000000005584 _DOTQ
             forth.s:3937   .text:0000000000005588 DOTQ
             forth.s:3939   .text:000000000000558c $d
             forth.s:3953   .text:00000000000055a4 _UNIQU
             forth.s:3953   .text:00000000000055ac $t
             forth.s:3953   .text:00000000000055ac UNIQU
             forth.s:3955   .text:00000000000055b0 $d
             forth.s:3962   .text:00000000000055d8 UNIQ1
             forth.s:3959   .text:00000000000055cc $d
             forth.s:3972   .text:00000000000055e0 SNAME
             forth.s:3973   .text:00000000000055e0 $t
             forth.s:3974   .text:00000000000055e4 $d
             forth.s:3990   .text:0000000000005628 SNAM1
             forth.s:4002   .text:000000000000563c _SCOMP
             forth.s:4002   .text:0000000000005648 SCOMP
             forth.s:4004   .text:000000000000564c $d
             forth.s:4016   .text:0000000000005684 SCOM2
             forth.s:4013   .text:000000000000567c SCOM1
             forth.s:4021   .text:0000000000005698 SCOM3
             forth.s:4030   .text:00000000000056a0 COLON_ABORT
             forth.s:4031   .text:00000000000056a0 $t
             forth.s:4032   .text:00000000000056a4 $d
             forth.s:4050   .text:00000000000056d4 _OVERT
             forth.s:4050   .text:00000000000056da $t
             forth.s:4052   .text:00000000000056e0 $d
             forth.s:4063   .text:00000000000056f8 _SEMIS
             forth.s:4063   .text:00000000000056fa $t
             forth.s:4063   .text:00000000000056fc SEMIS
             forth.s:4065   .text:0000000000005700 $d
             forth.s:4077   .text:000000000000571c _RBRAC
             forth.s:4077   .text:000000000000571e $t
             forth.s:4077   .text:0000000000005720 RBRAC
             forth.s:4079   .text:0000000000005724 $d
ARM GAS  forth.s 			page 247


             forth.s:4093   .text:0000000000005748 $t
             forth.s:4094   .text:000000000000574c $d
             forth.s:4106   .text:0000000000005764 _COLON
             forth.s:4106   .text:0000000000005766 $t
             forth.s:4106   .text:0000000000005768 COLON
             forth.s:4108   .text:000000000000576c $d
             forth.s:4120   .text:0000000000005788 _IMMED
             forth.s:4120   .text:0000000000005792 $t
             forth.s:4120   .text:0000000000005794 IMMED
             forth.s:4122   .text:0000000000005798 $d
             forth.s:4140   .text:00000000000057c4 _CONST
             forth.s:4140   .text:00000000000057d0 CONST
             forth.s:4142   .text:00000000000057d4 $d
             forth.s:4153   .text:0000000000005804 $t
             forth.s:4160   .text:0000000000005804 DODOES
             forth.s:4162   .text:0000000000005808 $d
             forth.s:4177   .text:000000000000582c $d
             forth.s:4177   .text:0000000000005830 _DOES
             forth.s:4177   .text:0000000000005836 $t
             forth.s:4177   .text:0000000000005838 DOES
             forth.s:4179   .text:000000000000583c $d
             forth.s:4194   .text:000000000000586c _DEFERAT
             forth.s:4194   .text:0000000000005874 DEFERAT
             forth.s:4196   .text:0000000000005878 $d
             forth.s:4206   .text:0000000000005890 _DEFERSTO
             forth.s:4206   .text:0000000000005898 DEFERSTO
             forth.s:4208   .text:000000000000589c $d
             forth.s:4219   .text:00000000000058b8 _DEFER
             forth.s:4219   .text:00000000000058be $t
             forth.s:4219   .text:00000000000058c0 DEFER
             forth.s:4221   .text:00000000000058c4 $d
             forth.s:4280   .text:0000000000005978 CREAT
             forth.s:4232   .text:00000000000058f8 DEFER_NOP
             forth.s:4233   .text:00000000000058f8 $t
             forth.s:4234   .text:00000000000058fc $d
             forth.s:4245   .text:0000000000005908 _NONAME
             forth.s:4245   .text:0000000000005910 $t
             forth.s:4245   .text:0000000000005910 NONAME
             forth.s:4247   .text:0000000000005914 $d
             forth.s:4260   .text:0000000000005928 _IS
             forth.s:4260   .text:000000000000592c IS
             forth.s:4262   .text:0000000000005930 $d
             forth.s:4280   .text:0000000000005970 _CREAT
             forth.s:4282   .text:000000000000597c $d
             forth.s:4295   .text:00000000000059a0 _VARIA
             forth.s:4295   .text:00000000000059ac VARIA
             forth.s:4297   .text:00000000000059b0 $d
             forth.s:4315   .text:00000000000059d0 DMP
             forth.s:4316   .text:00000000000059d0 $t
             forth.s:4317   .text:00000000000059d4 $d
             forth.s:4335   .text:0000000000005a28 PDUM2
             forth.s:4329   .text:0000000000005a10 PDUM1
             forth.s:4350   .text:0000000000005a40 $d
             forth.s:4350   .text:0000000000005a44 _DUMP
             forth.s:4350   .text:0000000000005a4c DUMP
             forth.s:4352   .text:0000000000005a50 $d
             forth.s:4378   .text:0000000000005acc DUMP4
ARM GAS  forth.s 			page 248


             forth.s:4368   .text:0000000000005aa4 DUMP1
             forth.s:4380   .text:0000000000005ad4 DUMP3
             forth.s:4393   .text:0000000000005ae8 TDOT
             forth.s:4394   .text:0000000000005ae8 $t
             forth.s:4395   .text:0000000000005aec $d
             forth.s:4434   .text:0000000000005b80 _DOTS
             forth.s:4434   .text:0000000000005b84 DOTS
             forth.s:4436   .text:0000000000005b88 $d
             forth.s:4443   .text:0000000000005ba4 DOTS2
             forth.s:4439   .text:0000000000005b98 DOTS1
             forth.s:4448   .text:0000000000005bb4 RBASE
             forth.s:4449   .text:0000000000005bb4 $t
             forth.s:4457   .text:0000000000005bc4 RDOT
             forth.s:4459   .text:0000000000005bc8 $d
             forth.s:4486   .text:0000000000005c2c _TRACE
             forth.s:4486   .text:0000000000005c32 $t
             forth.s:4486   .text:0000000000005c34 TRACE
             forth.s:4488   .text:0000000000005c38 $d
             forth.s:4507   .text:0000000000005c7c _TOBODY
             forth.s:4507   .text:0000000000005c82 $t
             forth.s:4507   .text:0000000000005c84 TOBODY
             forth.s:4516   .text:0000000000005c8c $d
             forth.s:4516   .text:0000000000005c90 _TNAME
             forth.s:4516   .text:0000000000005c96 $t
             forth.s:4516   .text:0000000000005c98 TNAME
             forth.s:4518   .text:0000000000005c9c $d
             forth.s:4521   .text:0000000000005ca8 TNAM1
             forth.s:4532   .text:0000000000005cdc TNAM2
             forth.s:4541   .text:0000000000005cec _DOTID
             forth.s:4541   .text:0000000000005cf0 $t
             forth.s:4541   .text:0000000000005cf0 DOTID
             forth.s:4543   .text:0000000000005cf4 $d
             forth.s:4550   .text:0000000000005d18 DOTI1
             forth.s:4551   .text:0000000000005d26 $t
             forth.s:4552   .text:0000000000005d28 $d
             forth.s:4554   *ABS*:0000000000000000 WANT_SEE
             forth.s:4628   .text:0000000000005d30 _WORDS
             forth.s:4628   .text:0000000000005d36 $t
             forth.s:4628   .text:0000000000005d38 WORDS
             forth.s:4630   .text:0000000000005d3c $d
             forth.s:4633   .text:0000000000005d48 WORS1
             forth.s:4642   .text:0000000000005d70 WORS2
             forth.s:4651   .text:0000000000005d78 _MARK
             forth.s:4651   .text:0000000000005d80 MARK
             forth.s:4653   .text:0000000000005d84 $d
             forth.s:4656   .text:0000000000005d90 $t
             forth.s:4657   .text:0000000000005d94 $d
             forth.s:4672   .text:0000000000005dc4 _ARRAY
             forth.s:4672   .text:0000000000005dca $t
             forth.s:4672   .text:0000000000005dcc ARRAY
             forth.s:4674   .text:0000000000005dd0 $d
             forth.s:4688   .text:0000000000005e0c DO_ARRAY
             forth.s:4689   .text:0000000000005e0c $t
             forth.s:4690   .text:0000000000005e10 $d
             forth.s:4708   .text:0000000000005e2c VERSN
             forth.s:4709   .text:0000000000005e2c $t
             forth.s:4710   .text:0000000000005e30 $d
ARM GAS  forth.s 			page 249


             forth.s:4718   .text:0000000000005e40 _HI
             forth.s:4718   .text:0000000000005e44 HI
             forth.s:4720   .text:0000000000005e48 $d
             forth.s:4721   .text:0000000000005e62 $t
             forth.s:4722   .text:0000000000005e64 $d
             forth.s:4746   .text:0000000000005eb0 $t
             forth.s:4747   .text:0000000000005eb4 $d
             forth.s:4759   .text:0000000000005ed0 PS2_QUERY
             forth.s:4760   .text:0000000000005ed0 $t
             forth.s:4761   .text:0000000000005ed4 $d
             forth.s:4775   .text:0000000000005f3a $t
             forth.s:4776   .text:0000000000005f3c $d
             forth.s:4786   .text:0000000000005f48 IF_SENSE
             forth.s:4787   .text:0000000000005f48 $t
             forth.s:4788   .text:0000000000005f4c $d
             forth.s:4802   .text:0000000000005f7c READY
             forth.s:4803   .text:0000000000005f7c $t
             forth.s:4804   .text:0000000000005f80 $d
             forth.s:4804   .text:0000000000005f8a $t
             forth.s:4805   .text:0000000000005f8c $d
             forth.s:4823   .text:0000000000005fb4 COLD1
             forth.s:4824   .text:0000000000005fb4 $d
             forth.s:4839   .text:0000000000006004 COLD2
             forth.s:4842   .text:0000000000006004 $d
             forth.s:4845   .text:0000000000006008 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
       environment.s:32     .text:0000000000000961 $d
       environment.s:32     .text:0000000000000962 $t
       environment.s:107    .text:00000000000009ff $d
       environment.s:107    .text:0000000000000a00 $t
       environment.s:141    .text:0000000000000a47 $d
       environment.s:141    .text:0000000000000a48 $t
       environment.s:187    .text:0000000000000aad $d
       environment.s:187    .text:0000000000000aae $t
       environment.s:201    .text:0000000000000ad9 $d
       environment.s:201    .text:0000000000000ada $t
          ser-term.s:90     .text:0000000000000b9f $d
          ser-term.s:90     .text:0000000000000ba0 $t
          ser-term.s:110    .text:0000000000000bd9 $d
          ser-term.s:110    .text:0000000000000bda $t
          ser-term.s:133    .text:0000000000000c17 $d
          ser-term.s:133    .text:0000000000000c18 $t
          ser-term.s:164    .text:0000000000000c5f $d
          ser-term.s:164    .text:0000000000000c60 $t
          ser-term.s:191    .text:0000000000000cd5 $d
          ser-term.s:191    .text:0000000000000cd6 $t
ARM GAS  forth.s 			page 250


          ser-term.s:203    .text:0000000000000d03 $d
          ser-term.s:203    .text:0000000000000d04 $t
             tvout.s:264    .text:0000000000000f4f $d
             tvout.s:264    .text:0000000000000f50 $t
             tvout.s:278    .text:0000000000000f83 $d
             tvout.s:278    .text:0000000000000f84 $t
             tvout.s:306    .text:0000000000000fdd $d
             tvout.s:306    .text:0000000000000fde $t
             tvout.s:325    .text:000000000000100b $d
             tvout.s:325    .text:000000000000100c $t
             tvout.s:427    .text:0000000000001145 $d
             tvout.s:427    .text:0000000000001146 $t
             tvout.s:448    .text:000000000000119f $d
             tvout.s:448    .text:00000000000011a0 $t
             tvout.s:495    .text:0000000000001235 $d
             tvout.s:495    .text:0000000000001236 $t
           ps2_kbd.s:307    .text:0000000000001923 $d
           ps2_kbd.s:307    .text:0000000000001924 $t
           ps2_kbd.s:396    .text:0000000000001a1f $d
           ps2_kbd.s:396    .text:0000000000001a20 $t
           ps2_kbd.s:616    .text:0000000000001cc1 $d
           ps2_kbd.s:616    .text:0000000000001cc2 $t
           ps2_kbd.s:633    .text:0000000000001cfb $d
           ps2_kbd.s:633    .text:0000000000001cfc $t
         spi-flash.s:85     .text:0000000000001de7 $d
         spi-flash.s:85     .text:0000000000001de8 $t
         spi-flash.s:151    .text:0000000000001eb3 $d
         spi-flash.s:151    .text:0000000000001eb4 $t
         spi-flash.s:238    .text:0000000000001ff7 $d
         spi-flash.s:238    .text:0000000000001ff8 $t
         spi-flash.s:256    .text:0000000000002033 $d
         spi-flash.s:256    .text:0000000000002034 $t
         spi-flash.s:278    .text:0000000000002087 $d
         spi-flash.s:278    .text:0000000000002088 $t
         spi-flash.s:325    .text:0000000000002107 $d
         spi-flash.s:325    .text:0000000000002108 $t
         spi-flash.s:343    .text:0000000000002129 $d
         spi-flash.s:343    .text:000000000000212a $t
         spi-flash.s:352    .text:000000000000213d $d
         spi-flash.s:352    .text:000000000000213e $t
               fpu.s:222    .text:000000000000230f $d
               fpu.s:222    .text:0000000000002310 $t
               fpu.s:235    .text:000000000000232f $d
               fpu.s:235    .text:0000000000002330 $t
               fpu.s:249    .text:000000000000234f $d
               fpu.s:249    .text:0000000000002350 $t
               fpu.s:262    .text:000000000000236f $d
               fpu.s:262    .text:0000000000002370 $t
               fpu.s:285    .text:00000000000023ad $d
               fpu.s:285    .text:00000000000023ae $t
               fpu.s:297    .text:00000000000023cd $d
               fpu.s:297    .text:00000000000023ce $t
               fpu.s:319    .text:0000000000002407 $d
               fpu.s:319    .text:0000000000002408 $t
               fpu.s:330    .text:0000000000002423 $d
               fpu.s:330    .text:0000000000002424 $t
               fpu.s:340    .text:000000000000243d $d
ARM GAS  forth.s 			page 251


               fpu.s:340    .text:000000000000243e $t
               fpu.s:353    .text:000000000000246d $d
               fpu.s:353    .text:000000000000246e $t
               fpu.s:379    .text:00000000000024bd $d
               fpu.s:379    .text:00000000000024be $t
               fpu.s:403    .text:0000000000002507 $d
               fpu.s:403    .text:0000000000002508 $t
               fpu.s:421    .text:0000000000002539 $d
               fpu.s:421    .text:000000000000253a $t
               fpu.s:431    .text:0000000000002555 $d
               fpu.s:431    .text:0000000000002556 $t
            strtof.s:226    .text:00000000000027d7 $d
            strtof.s:226    .text:00000000000027d8 $t
              ftoa.s:412    .text:0000000000002e43 $d
              ftoa.s:412    .text:0000000000002e44 $t
             forth.s:133    .text:0000000000002eff $d
             forth.s:133    .text:0000000000002f00 $t
             forth.s:145    .text:0000000000002f1f $d
             forth.s:145    .text:0000000000002f20 $t
             forth.s:157    .text:0000000000002f3f $d
             forth.s:157    .text:0000000000002f40 $t
             forth.s:179    .text:0000000000002f79 $d
             forth.s:179    .text:0000000000002f7a $t
             forth.s:215    .text:0000000000002f97 $d
             forth.s:215    .text:0000000000002f98 $t
             forth.s:262    .text:0000000000003045 $d
             forth.s:262    .text:0000000000003046 $t
             forth.s:279    .text:0000000000003073 $d
             forth.s:279    .text:0000000000003074 $t
             forth.s:293    .text:000000000000309d $d
             forth.s:293    .text:000000000000309e $t
             forth.s:404    .text:0000000000003155 $d
             forth.s:404    .text:0000000000003156 $t
             forth.s:430    .text:000000000000317f $d
             forth.s:430    .text:0000000000003180 $t
             forth.s:440    .text:0000000000003193 $d
             forth.s:440    .text:0000000000003194 $t
             forth.s:449    .text:000000000000319f $d
             forth.s:449    .text:00000000000031a0 $t
             forth.s:469    .text:00000000000031cd $d
             forth.s:469    .text:00000000000031ce $t
             forth.s:478    .text:00000000000031e1 $d
             forth.s:478    .text:00000000000031e2 $t
             forth.s:535    .text:0000000000003255 $d
             forth.s:535    .text:0000000000003256 $t
             forth.s:551    .text:0000000000003277 $d
             forth.s:551    .text:0000000000003278 $t
             forth.s:576    .text:00000000000032a5 $d
             forth.s:576    .text:00000000000032a6 $t
             forth.s:599    .text:00000000000032d5 $d
             forth.s:599    .text:00000000000032d6 $t
             forth.s:607    .text:00000000000032e5 $d
             forth.s:607    .text:00000000000032e6 $t
             forth.s:628    .text:000000000000330b $d
             forth.s:628    .text:000000000000330c $t
             forth.s:649    .text:0000000000003335 $d
             forth.s:649    .text:0000000000003336 $t
ARM GAS  forth.s 			page 252


             forth.s:679    .text:000000000000337b $d
             forth.s:679    .text:000000000000337c $t
             forth.s:688    .text:0000000000003391 $d
             forth.s:688    .text:0000000000003392 $t
             forth.s:736    .text:00000000000033eb $d
             forth.s:736    .text:00000000000033ec $t
             forth.s:747    .text:00000000000033ff $d
             forth.s:747    .text:0000000000003400 $t
             forth.s:755    .text:000000000000340d $d
             forth.s:755    .text:000000000000340e $t
             forth.s:763    .text:000000000000341d $d
             forth.s:763    .text:000000000000341e $t
             forth.s:771    .text:000000000000342d $d
             forth.s:771    .text:000000000000342e $t
             forth.s:795    .text:000000000000345d $d
             forth.s:795    .text:000000000000345e $t
             forth.s:820    .text:0000000000003491 $d
             forth.s:820    .text:0000000000003492 $t
             forth.s:828    .text:00000000000034a1 $d
             forth.s:828    .text:00000000000034a2 $t
             forth.s:836    .text:00000000000034b3 $d
             forth.s:836    .text:00000000000034b4 $t
             forth.s:857    .text:00000000000034db $d
             forth.s:857    .text:00000000000034dc $t
             forth.s:886    .text:0000000000003517 $d
             forth.s:886    .text:0000000000003518 $t
             forth.s:896    .text:000000000000352b $d
             forth.s:896    .text:000000000000352c $t
             forth.s:909    .text:0000000000003549 $d
             forth.s:909    .text:000000000000354a $t
             forth.s:954    .text:00000000000035b1 $d
             forth.s:954    .text:00000000000035b2 $t
             forth.s:962    .text:00000000000035c5 $d
             forth.s:962    .text:00000000000035c6 $t
             forth.s:1003   .text:000000000000361b $d
             forth.s:1003   .text:000000000000361c $t
             forth.s:1026   .text:0000000000003647 $d
             forth.s:1026   .text:0000000000003648 $t
             forth.s:1039   .text:0000000000003667 $d
             forth.s:1039   .text:0000000000003668 $t
             forth.s:1063   .text:0000000000003697 $d
             forth.s:1063   .text:0000000000003698 $t
             forth.s:1109   .text:00000000000036f9 $d
             forth.s:1109   .text:00000000000036fa $t
             forth.s:1121   .text:0000000000003715 $d
             forth.s:1121   .text:0000000000003716 $t
             forth.s:1133   .text:0000000000003735 $d
             forth.s:1133   .text:0000000000003736 $t
             forth.s:1205   .text:00000000000037b9 $d
             forth.s:1205   .text:00000000000037ba $t
             forth.s:1214   .text:00000000000037d1 $d
             forth.s:1214   .text:00000000000037d2 $t
             forth.s:1241   .text:0000000000003819 $d
             forth.s:1241   .text:000000000000381a $t
             forth.s:1271   .text:0000000000003855 $d
             forth.s:1271   .text:0000000000003856 $t
             forth.s:1290   .text:0000000000003881 $d
ARM GAS  forth.s 			page 253


             forth.s:1290   .text:0000000000003882 $t
             forth.s:1330   .text:00000000000038db $d
             forth.s:1330   .text:00000000000038dc $t
             forth.s:1350   .text:0000000000003905 $d
             forth.s:1350   .text:0000000000003906 $t
             forth.s:1364   .text:0000000000003923 $d
             forth.s:1364   .text:0000000000003924 $t
             forth.s:1375   .text:0000000000003941 $d
             forth.s:1375   .text:0000000000003942 $t
             forth.s:1404   .text:0000000000003999 $d
             forth.s:1404   .text:000000000000399a $t
             forth.s:1419   .text:00000000000039b7 $d
             forth.s:1419   .text:00000000000039b8 $t
             forth.s:1436   .text:00000000000039e3 $d
             forth.s:1436   .text:00000000000039e4 $t
             forth.s:1466   .text:0000000000003a1f $d
             forth.s:1466   .text:0000000000003a20 $t
             forth.s:1506   .text:0000000000003a97 $d
             forth.s:1506   .text:0000000000003a98 $t
             forth.s:1615   .text:0000000000003bc3 $d
             forth.s:1615   .text:0000000000003bc4 $t
             forth.s:1637   .text:0000000000003c0f $d
             forth.s:1637   .text:0000000000003c10 $t
             forth.s:1686   .text:0000000000003c4f $d
             forth.s:1686   .text:0000000000003c50 $t
             forth.s:1737   .text:0000000000003cc7 $d
             forth.s:1737   .text:0000000000003cc8 $t
             forth.s:1829   .text:0000000000003db1 $d
             forth.s:1829   .text:0000000000003db2 $t
             forth.s:1857   .text:0000000000003de5 $d
             forth.s:1857   .text:0000000000003de6 $t
             forth.s:1904   .text:0000000000003e4d $d
             forth.s:1904   .text:0000000000003e4e $t
             forth.s:1915   .text:0000000000003e71 $d
             forth.s:1915   .text:0000000000003e72 $t
             forth.s:1948   .text:0000000000003ec1 $d
             forth.s:1948   .text:0000000000003ec2 $t
             forth.s:1980   .text:0000000000003f09 $d
             forth.s:1980   .text:0000000000003f0a $t
             forth.s:2058   .text:0000000000003feb $d
             forth.s:2058   .text:0000000000003fec $t
             forth.s:2070   .text:0000000000004009 $d
             forth.s:2070   .text:000000000000400a $t
             forth.s:2102   .text:0000000000004057 $d
             forth.s:2102   .text:0000000000004058 $t
             forth.s:2120   .text:0000000000004089 $d
             forth.s:2120   .text:000000000000408a $t
             forth.s:2134   .text:00000000000040b3 $d
             forth.s:2134   .text:00000000000040b4 $t
             forth.s:2212   .text:000000000000416f $d
             forth.s:2212   .text:0000000000004170 $t
             forth.s:2329   .text:00000000000042a1 $d
             forth.s:2329   .text:00000000000042a2 $t
             forth.s:2415   .text:00000000000043bf $d
             forth.s:2415   .text:00000000000043c0 $t
             forth.s:2432   .text:00000000000043f5 $d
             forth.s:2432   .text:00000000000043f6 $t
ARM GAS  forth.s 			page 254


             forth.s:2450   .text:000000000000442b $d
             forth.s:2450   .text:000000000000442c $t
             forth.s:2545   .text:000000000000451f $d
             forth.s:2545   .text:0000000000004520 $t
             forth.s:2582   .text:0000000000004583 $d
             forth.s:2582   .text:0000000000004584 $t
             forth.s:2646   .text:0000000000004637 $d
             forth.s:2646   .text:0000000000004638 $t
             forth.s:2677   .text:000000000000468f $d
             forth.s:2677   .text:0000000000004690 $t
             forth.s:2819   .text:0000000000004867 $d
             forth.s:2819   .text:0000000000004868 $t
             forth.s:2858   .text:00000000000048c9 $d
             forth.s:2858   .text:00000000000048ca $t
             forth.s:2870   .text:00000000000048ef $d
             forth.s:2870   .text:00000000000048f0 $t
             forth.s:2881   .text:0000000000004909 $d
             forth.s:2881   .text:000000000000490a $t
             forth.s:3164   .text:0000000000004c77 $d
             forth.s:3164   .text:0000000000004c78 $t
             forth.s:3278   .text:0000000000004dab $d
             forth.s:3278   .text:0000000000004dac $t
             forth.s:3332   .text:0000000000004e73 $d
             forth.s:3332   .text:0000000000004e74 $t
             forth.s:3344   .text:0000000000004e9d $d
             forth.s:3344   .text:0000000000004e9e $t
             forth.s:3371   .text:0000000000004ee5 $d
             forth.s:3371   .text:0000000000004ee6 $t
             forth.s:3408   .text:0000000000004f87 $d
             forth.s:3408   .text:0000000000004f88 $t
             forth.s:3424   .text:0000000000004fc1 $d
             forth.s:3424   .text:0000000000004fc2 $t
             forth.s:3439   .text:0000000000004fef $d
             forth.s:3439   .text:0000000000004ff0 $t
             forth.s:3468   .text:0000000000005049 $d
             forth.s:3468   .text:000000000000504a $t
             forth.s:3510   .text:000000000000509d $d
             forth.s:3510   .text:000000000000509e $t
             forth.s:3636   .text:0000000000005203 $d
             forth.s:3636   .text:0000000000005204 $t
             forth.s:3702   .text:00000000000052e9 $d
             forth.s:3702   .text:00000000000052ea $t
             forth.s:3713   .text:0000000000005313 $d
             forth.s:3713   .text:0000000000005314 $t
             forth.s:3758   .text:0000000000005389 $d
             forth.s:3758   .text:000000000000538a $t
             forth.s:3809   .text:000000000000541b $d
             forth.s:3809   .text:000000000000541c $t
             forth.s:3837   .text:0000000000005483 $d
             forth.s:3837   .text:0000000000005484 $t
             forth.s:3850   .text:00000000000054a5 $d
             forth.s:3850   .text:00000000000054a6 $t
             forth.s:3877   .text:00000000000054e5 $d
             forth.s:3877   .text:00000000000054e6 $t
             forth.s:3914   .text:0000000000005547 $d
             forth.s:3914   .text:0000000000005548 $t
             forth.s:3925   .text:0000000000005567 $d
ARM GAS  forth.s 			page 255


             forth.s:3925   .text:0000000000005568 $t
             forth.s:3937   .text:0000000000005587 $d
             forth.s:3937   .text:0000000000005588 $t
             forth.s:4002   .text:0000000000005645 $d
             forth.s:4002   .text:0000000000005646 $t
             forth.s:4140   .text:00000000000057cd $d
             forth.s:4140   .text:00000000000057ce $t
             forth.s:4194   .text:0000000000005873 $d
             forth.s:4194   .text:0000000000005874 $t
             forth.s:4206   .text:0000000000005897 $d
             forth.s:4206   .text:0000000000005898 $t
             forth.s:4260   .text:000000000000592b $d
             forth.s:4260   .text:000000000000592c $t
             forth.s:4280   .text:0000000000005977 $d
             forth.s:4280   .text:0000000000005978 $t
             forth.s:4295   .text:00000000000059a9 $d
             forth.s:4295   .text:00000000000059aa $t
             forth.s:4350   .text:0000000000005a49 $d
             forth.s:4350   .text:0000000000005a4a $t
             forth.s:4434   .text:0000000000005b83 $d
             forth.s:4434   .text:0000000000005b84 $t
             forth.s:4651   .text:0000000000005d7d $d
             forth.s:4651   .text:0000000000005d7e $t
             forth.s:4718   .text:0000000000005e43 $d
             forth.s:4718   .text:0000000000005e44 $t
             forth.s:4817   .text:0000000000005f9d $d
             forth.s:4817   .text:0000000000005f9e $t

UNDEFINED SYMBOLS
_mstack
