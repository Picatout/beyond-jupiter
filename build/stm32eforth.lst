ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
ARM GAS  forth.s 			page 4


 142              	    .equ USART_CR1,12
 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	   
 179              	   /* NVIC block */
 180              	   .equ NVIC_BASE_ADR, 0xE000E000
 181              	   .equ NVIC_ISER0, 0x100
 182              	   .equ NVIC_ISER1, 0x104
 183              	   .equ NVIC_ISER2, 0x108
 184              	   .equ NVIC_ISER3, 0x10c
 185              	   .equ NVIC_ISER4, 0x110
 186              	   .equ NVIC_ISER5, 0x114
 187              	   .equ NVIC_ISER6, 0x118
 188              	   .equ NVIC_ISER7, 0x11c
 189              	   .equ NVIC_ICER0, 0x180
 190              	   .equ NVIC_ICER1, 0x184 
 191              	   .equ NVIC_ICER2, 0x188 
 192              	   .equ NVIC_ICER3, 0x18C 
 193              	   .equ NVIC_ICER4, 0x190 
 194              	   .equ NVIC_ICER5, 0x194 
 195              	   .equ NVIC_ICER6, 0x198 
 196              	   .equ NVIC_ICER7, 0x19C 
 197              	   .equ NVIC_ISPR0, 0x200
 198              	   .equ NVIC_ISPR1, 0x204
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_ISPR2, 0x208 
 200              	   .equ NVIC_ISPR3, 0x20c 
 201              	   .equ NVIC_ISPR4, 0x210 
 202              	   .equ NVIC_ISPR5, 0x214 
 203              	   .equ NVIC_ISPR6, 0x218 
 204              	   .equ NVIC_ISPR7, 0x21c 
 205              	   .equ NVIC_ICPR0, 0x280
 206              	   .equ NVIC_ICPR1, 0x284
 207              	   .equ NVIC_ICPR2, 0x288
 208              	   .equ NVIC_ICPR3, 0x28c
 209              	   .equ NVIC_ICPR4, 0x290
 210              	   .equ NVIC_ICPR5, 0x294
 211              	   .equ NVIC_ICPR6, 0x298
 212              	   .equ NVIC_ICPR7, 0x29c
 213              	   .equ NVIC_IABR0, 0x300
 214              	   .equ NVIC_IABR1, 0x304
 215              	   .equ NVIC_IABR2, 0x308
 216              	   .equ NVIC_IABR3, 0x30c
 217              	   .equ NVIC_IABR4, 0x310
 218              	   .equ NVIC_IABR5, 0x314
 219              	   .equ NVIC_IABR6, 0x318
 220              	   .equ NVIC_IABR7, 0x31c
 221              	/*  NVIC_IPR0 - NVIC_IPR59 */
 222              	   .equ NVIC_IPR_BASE, 0xE000E400 
 223              	
 224              	/*  IRQ number */
 225              	   .equ NMI_IRQ, (-14) // non maskable
 226              	   .equ HF_IRQ, (-13)  // hard fault
 227              	   .equ MM_IRQ, (-12)  // memory Management
 228              	   .equ BF_IRQ, (-11)  // bus fault 
 229              	   .equ UF_IRQ, (-10)  // usage fault 
 230              	   .equ SVC_IRQ, (-5)  // service call 
 231              	   .equ DM_IRQ, (-4)  // debug monitor
 232              	   .equ PSV_IRQ, (-2) // pending service 
 233              	   .equ STCK_IRQ, (-1) // systick 
 234              	   .equ WWDG_IRQ, (0) // window watchdog 
 235              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 236              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 237              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 238              	   .equ FLASH_IRQ, (4) // flash global 
 239              	   .equ RCC_IRQ, (5)  // real time clock 
 240              	   .equ EXTI0_IRQ, (6) // 
 241              	   .equ EXTI1_IRQ, (7)
 242              	   .equ EXTI2_IRQ, (8)
 243              	   .equ EXTI3_IRQ, (9)
 244              	   .equ EXTI4_IRQ, (10)
 245              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 246              	   .equ DMA1S1_IRQ, (12)
 247              	   .equ DMA1S2_IRQ, (13)
 248              	   .equ DMA1S3_IRQ, (14)
 249              	   .equ DMA1S4_IRQ, (15)
 250              	   .equ DMA1S5_IRQ, (16)
 251              	   .equ DMA1S6_IRQ, (17)
 252              	   .equ ADC_IRQ, (18)
 253              	   .equ EXIT9_5_IRQ, (23)
 254              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 255              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
ARM GAS  forth.s 			page 6


 256              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 257              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 258              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 259              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 260              	   .equ TIM4_IRQ, (30) // TIMER4 global
 261              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 262              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 263              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 264              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 265              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 266              	   .equ SPI2_IRQ, (36)  // SPI2 global
 267              	   .equ USART1_IRQ, (37) // USART1 global
 268              	   .equ USART2_IRQ, (38) // USART2 global
 269              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 270              	   .equ EXTI17_IRQ, (41)
 271              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 272              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 273              	   .equ SDIO_IRQ, (49) // SDIO global
 274              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 275              	   .equ SPI3_IRQ, (51)
 276              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 277              	   .equ DMA2S1_IRQ, (57) 
 278              	   .equ DMAS2_IRQ, (58)
 279              	   .equ DMAS3_IRQ, (59)
 280              	   .equ DMAS4_IRQ, (60)
 281              	   .equ OTG_FS_IRQ, (67)
 282              	   .equ DMA2S5_IRQ, (68)
 283              	   .equ DMA2S6_IRQ, (69)
 284              	   .equ DMA2S7_IRQ, (70)
 285              	   .equ USART6_IRQ, (71)
 286              	   .equ I2C3EV_IRQ, (72)
 287              	   .equ I2C3ER_IRQ, (73)
 288              	   .equ FPU_IRQ, (81) // FPU global
 289              	   .equ SPI4_IRQ, (84)
 290              	   .equ SPI5_IRQ, (85)
 291              	   
 292              	
 293              	/* TIMERS registers */
 294              	.equ TIM1_BASE_ADR,0x40010000
 295              	.equ TIM9_BASE_ADR,0x40010400
 296              	.equ TIM10_BASE_ADR,0x40010800
 297              	.equ TIM11_BASE_ADR,0x40010C00
 298              	
 299              	.equ TIM2_BASE_ADR,0x40000000
 300              	.equ TIM3_BASE_ADR,0x40000400
 301              	.equ TIM4_BASE_ADR,0x40000800
 302              	.equ TIM5_BASE_ADR,0x40000C00
 303              	
 304              	/* TIMER1 */
 305              	.equ TIM1_RCR,48 
 306              	.equ TIM1_BDTR,68 
 307              	
 308              	/* TIMER2..TIMER5 */
 309              	.equ TIM_CR1,0
 310              	.equ TIM_CR2,4
 311              	.equ TIM_SMCR,8
 312              	.equ TIM_DIER,12
ARM GAS  forth.s 			page 7


 313              	.equ TIM_SR,16
 314              	.equ TIM_EGR,20
 315              	.equ TIM_CCMR1,24
 316              	.equ TIM_CCMR2,28
 317              	.equ TIM_CCER,32
 318              	.equ TIM_CNT,36
 319              	.equ TIM_PSC,40
 320              	.equ TIM_ARR,44
 321              	.equ TIM_CCR1,52
 322              	.equ TIM_CCR2,56
 323              	.equ TIM_CCR3,60
 324              	.equ TIM_CCR4,64
 325              	.equ TIM_DCR,72
 326              	.equ TIM_DMAR,76
 327              	.equ TIM2_OR,80
 328              	.equ TIM5_OR,80 
 329              	
 330              	/* SYSCFG registers */
 331              	.equ SYSCFG_BASE_ADR, 0x40013800
 332              	
 333              	.equ SYSCFG_MEMRMP,0
 334              	.equ SYSCFG_PMC,4
 335              	.equ SYSCFG_EXTICR1,8
 336              	.equ SYSCFG_EXTICR2,12
 337              	.equ SYSCFG_EXTICR3,16
 338              	.equ SYSCFG_EXTICR4,20
 339              	.equ SYSCFG_CMPCR,32
 340              	
 341              	/* EXTI registers */
 342              	.equ EXTI_BASE_ADR, 0x40013C00
 343              	
 344              	.equ EXTI_IMR,0
 345              	.equ EXTI_EMR,4
 346              	.equ EXTI_RTSR,8
 347              	.equ EXTI_FTSR,12
 348              	.equ EXTI_SWIER,16
 349              	.equ EXTI_PR,20
 350              	
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
ARM GAS  forth.s 			page 8


  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
ARM GAS  forth.s 			page 9


  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ NBASE, BOOT+4  // numeric conversion base 
  78              	  .equ TMP, NBASE+4   // temporary variable
  79              	  .equ CSPAN, TMP+4  // character count received by expect  
  80              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  81              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  82              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  83              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  84              	  .equ HOLD, EVAL+4   // hold pointer 
  85              	  .equ CTXT, HOLD+4  // context pointer 
  86              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  87              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  88              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  89              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  90              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  91              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  92              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  93              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  94              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  95              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  96              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  97              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  98              	  .equ KBD_QUEUE_SIZE, 16 
  99              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 100              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 101              	  .equ KBD_QTAIL,KBD_QHEAD+4
 102              	  .equ ROW,KBD_QTAIL+4 
 103              	  .equ COL,ROW+4 
 104              	  .equ BK_COLOR,COL+4 
 105              	  .equ PEN_COLOR,BK_COLOR+4
 106              	
 107              	/***********************************************
 108              	* MACROS
 109              	*	Assemble inline direct threaded code ending.
 110              	***********************************************/
 111              		.macro _CALL fn /* low level routine call */ 
 112              	 	PUSH {LR}
 113              		BL \fn  
 114              		POP {LR}
 115              		.endm
 116              		
 117              		.macro _RET /* exit sub-routine */ 
 118              		BX LR 
 119              		.endm 
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.word LINK 
 124              			.equ LINK , . 
 125              		_\label: .byte \nlen    // name field
 126              			.ascii "\name"
 127              			.p2align 2 
 128              		\label:   // code field 
 129              		.endm 
 130              		
 131              	
 132              	// local function header 
ARM GAS  forth.s 			page 10


 133              		.macro _FUNC label 
 134              		.section .text, "ax", %progbits 
 135              		.p2align 2 
 136              		.type \label, %function  
 137              		\label:
 138              		.endm 
 139              	
 140              	// global function header 
 141              		.macro _GBL_FUNC label 
 142              		.global \label 
 143              		_FUNC \label 
 144              		.endm 
 145              	
 146              	
 147              	// load large constant to register 
 148              		.macro _MOV32 r, value 
 149              		mov \r,#(\value&0xffff)
 150              		movt \r,#(\value>>16)
 151              		.endm 
 152              	
 153              		.macro _NEXT /* direct jump INEXT */ 
 154              		B INEXT   
 155              		.endm 
 156              	
 157              	 	.macro	_NEST /*start high level word */
 158              		BX INX  
 159              		NOP.N 
 160              		.endm
 161              	
 162              		.macro _ADR label 
 163              		.word 1+\label  
 164              		.endm 
 165              	
 166              	 	.macro	_UNNEST	/*end high level word */
 167              		_ADR UNNEST 
 168              		.endm
 169              	
 170              	 	.macro	_DOLIT u /*long literals */
 171              		_ADR	DOLIT
 172              		.word	\u 
 173              		.endm
 174              	
 175              		.macro _DOTQP len, text 
 176              		_ADR DOTQP 
 177              		.byte \len 
 178              		.ascii "\text" 
 179              		.p2align 2 
 180              		.endm
 181              	
 182              		.macro _COMPI name 
 183              		_DOLIT \name 
 184              		_ADR CALLC 
 185              		.endm 
 186              	
 187              		.macro _ABORQ len,name 
 188              		_ADR ABORQ 
 189              		.byte \len 
ARM GAS  forth.s 			page 11


 190              		.ascii "\name"
 191              		.p2align 2 
 192              		.endm
 193              	
 194              		.macro _BRAN label 
 195              		_ADR BRAN 
 196              		.word \label 
 197              		.endm 
 198              	
 199              		.macro _QBRAN label 
 200              		_ADR QBRAN 
 201              		.word \label
 202              		.endm 
 203              	
 204              		.macro _DONXT label 
 205              		_ADR DONXT
 206              		.word \label 
 207              		.endm 
 208              	
 209              	 	.macro	_PUSH	/*push TOS on data stack*/
 210              		STR	TOS,[DSP,#-4]!
 211              		.endm
 212              	
 213              	 	.macro	_POP /*pop data stack to TOS */
 214              		LDR	TOS,[DSP],#4
 215              		.endm
 216              	
 217              		// calling a colon word 
 218              		// from a code word   
 219              		.macro _CALL_COLWORD target 
 220              	    STMFD	RSP!,{IP}
 221              	    ldr IP,=\target  
 222              	   	b INEXT 
 223              		.endm 
  32              	
  33              	/*************************************
  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
  38              	
  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
ARM GAS  forth.s 			page 12


  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
ARM GAS  forth.s 			page 13


 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
 148              	
 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .text, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 154D     		ldr r5,exception_msg 
 159 0002 00B500F0 		_CALL uart_puts 
 159      A4F85DF8 
 159      04EB
 160 000c 4EF62853 	  _MOV32 r3,(SCB_BASE_ADR+SCB_CFSR)  
 160      CEF20003 
 161 0014 84EA0404 	  eor r4,r4  
ARM GAS  forth.s 			page 14


 162 0018 1D68     	  ldr r5,[r3]
 163 001a 15F4004F 	  tst r5,#(1<<15)
 164 001e 1AD0     	  beq 1f
 165 0020 1C69     	  ldr r4,[R3,#16] // buss fault address 
 166 0022 00B500F0 	  _CALL print_hex
 166      28F85DF8 
 166      04EB
 167 002c 9CB1     	  cbz r4,1f 
 168 002e 4FF02C00 	  mov r0,#','
 169 0032 00B500F0 	  _CALL uart_putc 
 169      84F85DF8 
 169      04EB
 170 003c 4FF02000 	  mov r0,#' '
 171 0040 00B500F0 	  _CALL uart_putc
 171      7DF85DF8 
 171      04EB
 172 004a 2546     	  mov r5,r4 
 173 004c 00B500F0 	  _CALL print_hex 
 173      13F85DF8 
 173      04EB
 174              	1:
 175 0056 5EE0     		b reset_mcu
 176              	
 177              	  .size  default_handler, .-default_handler
 178              	exception_msg:
 179 0058 5C000000 		.word .+4 
 180 005c 19       		.byte 25
 181 005d 0A0D6578 		.ascii "\n\rexeption reboot, CFSR: "
 181      65707469 
 181      6F6E2072 
 181      65626F6F 
 181      742C2043 
 182 0076 00BF     		.p2align 2
 183              	
 184              	/************************
 185              	 print hexadecimal number
 186              	 input: 
 187              	    r1   uart_base_adr 
 188              	    r5   number to print 
 189              	*************************/    
 190              	print_hex:
 191 0078 4FF02400 	    mov r0,#'$'
 192 007c 00B500F0 	    _CALL uart_putc 
 192      5FF85DF8 
 192      04EB
 193 0086 4FF00803 	    mov r3,#8
 194 008a C5F30370 	1:  ubfx r0,r5,#28,#4
 195 008e 00F13000 	    add r0,#'0' 
 196 0092 3A28     	    cmp r0,#'9'+1
 197 0094 01D4     	    bmi 2f     
 198 0096 00F10700 	    add r0,#7 
 199 009a 00B500F0 	2:  _CALL uart_putc
 199      50F85DF8 
 199      04EB
 200 00a4 4FEA0515 	    lsl r5,#4
 201 00a8 013B     	    subs r3,#1
 202 00aa EED1     	    bne 1b
ARM GAS  forth.s 			page 15


 203 00ac 4FF02000 	    mov r0,#' '
 204 00b0 00B500F0 	    _CALL uart_putc 
 204      45F85DF8 
 204      04EB
 205 00ba 0A68     	3:	ldr r2,[r1,#USART_SR]
 206 00bc 12F04002 	    ands r2,#(1<<6)
 207 00c0 FBD0     	    beq 3b 
 208 00c2 7047     	    _RET
 209              	
 210              	/*********************************
 211              		system milliseconds counter
 212              	*********************************/	
 213              	  .type systick_handler, %function
 214              	  .p2align 2 
 215              	  .global systick_handler
 216              	systick_handler:
 217 00c4 4FF00003 	  _MOV32 r3,UPP
 217      C2F20003 
 218 00cc 9868     	  ldr r0,[r3,#TICKS]  
 219 00ce 00F10100 	  add r0,#1
 220 00d2 9860     	  str r0,[r3,#TICKS]
 221 00d4 D868     	  ldr r0,[r3,#CD_TIMER]
 222 00d6 10B1     	  cbz r0, systick_exit
 223 00d8 A0F10100 	  sub r0,#1
 224 00dc D860     	  str r0,[r3,#CD_TIMER]
 225              	systick_exit:
 226 00de 7047     	  bx lr
 227              	
 228              	/**************************
 229              		UART RX handler
 230              	**************************/
 231              		.p2align 2
 232              		.type uart_rx_handler, %function
 233              	uart_rx_handler:
 234 00e0 4FF48053 		_MOV32 r3,UART 
 234      C4F20103 
 235 00e8 1868     		ldr r0,[r3,#USART_SR]
 236 00ea 5968     		ldr r1,[r3,#USART_DR]
 237 00ec 10F0200F 		tst r0,#(1<<5) // RXNE 
 238 00f0 0AD0     		beq 2f // no char received 
 239 00f2 0329     		cmp r1,#3
 240 00f4 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
 241 00f6 04F14400 		add r0,UP,#RX_QUEUE
 242 00fa A26D     		ldr r2,[UP,#RX_TAIL]
 243 00fc 8154     		strb r1,[r0,r2]
 244 00fe 02F10102 		add r2,#1 
 245 0102 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
 246 0106 A265     		str r2,[UP,#RX_TAIL]
 247              	2:	
 248 0108 7047     		bx lr 
 249              	
 250              	user_reboot:
 251 010a 084D     		ldr r5,user_reboot_msg
 252 010c 00B500F0 		_CALL uart_puts 
 252      1FF85DF8 
 252      04EB
 253              	reset_mcu:
ARM GAS  forth.s 			page 16


 254 0116 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 254      CEF20000 
 255 011e C168     		ldr r1,[r0,#SCB_AIRCR]
 256 0120 41F00401 		orr r1,#(1<<2)
 257 0124 C0F2FA51 		movt r1,#SCB_VECTKEY
 258 0128 C160     		str r1,[r0,#SCB_AIRCR]
 259 012a FEE7     		b . 
 260              		.p2align 2 
 261              	user_reboot_msg:
 262 012c 30010000 		.word .+4
 263 0130 0D       		.byte 13 
 264 0131 0D757365 		.ascii "\ruser reboot!"
 264      72207265 
 264      626F6F74 
 264      21
 265 013e 00BF     		.p2align 2 
 266              	
 267              	 /***********************
 268              	  send byte to uart 
 269              	  input: 
 270              	    r0 byte to send 
 271              	    r1 UART_BASE_ADR 
 272              	************************/
 273              	uart_putc:
 274 0140 04B4     	    push {r2}
 275 0142 0A68     	1:  ldr r2,[r1,#USART_SR]
 276 0144 12F08002 	    ands r2,#0x80 // TXE 
 277 0148 FBD0     	    beq 1b
 278 014a 4860     	    str r0,[r1,#USART_DR] 
 279 014c 04BC     	    pop {r2}
 280 014e 7047     	    _RET 
 281              	
 282              	/*****************************
 283              	 send counted string to uart 
 284              	 input: 
 285              	    r5 string* 
 286              	 use:
 287              	    r0  byte to send 
 288              	    r1  UART_BASE_ADR
 289              	    r2  string length 
 290              	*****************************/
 291              		.type uart_puts,%function 
 292              	uart_puts:
 293 0150 4FF48051 	  	_MOV32 r1,UART 
 293      C4F20101 
 294 0158 15F8012B 		  ldrb r2,[r5],#1 // string length
 295 015c 1240     		  ands r2,r2
 296 015e 0CD0     	1:	beq 9f 
 297 0160 15F8010B 	2:  ldrb r0,[r5],#1
 298 0164 00B5FFF7 	    _CALL uart_putc 
 298      EBFF5DF8 
 298      04EB
 299 016e 013A     		  subs r2,r2,#1 
 300 0170 F6D1     		  bne 2b 
 301 0172 0A68     	3:	ldr r2,[r1,#USART_SR]
 302 0174 12F04002 		  ands r2,#(1<<6)
 303 0178 FBD0     		  beq 3b 
ARM GAS  forth.s 			page 17


 304 017a 7047     	9:  _RET  
 305              	
 306              	
 307              	/**************************************
 308              	  reset_handler execute at MCU reset
 309              	***************************************/
 310              	  .type  reset_handler, %function
 311              	  .p2align 2 
 312              	  .global reset_handler
 313              	reset_handler:
 314 017c 4FF00000 		_MOV32 r0,RAM_END
 314      C2F20200 
 315 0184 8546     		mov sp,r0  
 316 0186 FFF7FEFF 		bl	remap 
 317 018a 00F01FF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 318 018e 00F089F8 		bl  uart_init
 319 0192 FFF7FEFF 		bl	tv_init
 320 0196 FFF7FEFF 	  bl  kbd_init  
 321 019a 00F003F8 		bl forth_init 
 322 019e 03F04DB9 		b COLD 
 323              	
 324              	
 325              	
 326              		.type forth_init, %function 
 327 01a2 00BF     	  .p2align 2 
 328              	forth_init:
 329 01a4 4FF00004 		_MOV32 UP,UPP 
 329      C2F20004 
 330 01ac 4FF47F47 		_MOV32 DSP,SPP
 330      C2F20107 
 331 01b4 4FF68078 		_MOV32 RSP,RPP
 331      C2F20108 
 332 01bc DFF868A3 	  ldr INX,=NEST
 333 01c0 4AF0010A 	  orr INX,#1 
 334 01c4 86EA0606 		EOR TOS,TOS  
 335 01c8 7047     		_RET 
 336              	
 337              	
 338              	
 339              	  .type init_devices, %function
 340 01ca 00BF     	  .p2align 2 
 341              	init_devices:
 342              	/* init clock to HSE 96 Mhz */
 343              	/* set 3 wait states in FLASH_ACR_LATENCY */
 344 01cc 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 344      C4F20200 
 345 01d4 4FF00301 	  mov r1,#3 
 346 01d8 0160     	  str r1,[r0,#FLASH_ACR]
 347              	/* configure clock for HSE, 25 Mhz crystal */
 348              	/* enable HSE in RCC_CR */
 349 01da 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 349      C4F20200 
 350 01e2 0168     	  ldr r1,[r0,#RCC_CR]
 351 01e4 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 352 01e8 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 353              	/* wait HSERDY loop */
 354              	wait_hserdy:
ARM GAS  forth.s 			page 18


 355 01ea 0168     	  ldr r1,[r0,#RCC_CR]
 356 01ec 11F4003F 	  tst r1,#(1<<17)
 357 01f0 FBD0     	  beq wait_hserdy
 358              	
 359              	/************************************************* 
 360              	   configure PLL  and source 
 361              	   SYSCLOCK=96 Mhz
 362              	   select HSE as  PLL source clock
 363              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 364              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 365              	****************************************************/
 366              	  /* set RCC_PLLCFGR */
 367 01f2 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 367      C4F20200 
 368 01fa 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 368      C0F24041 
 369 0202 4160     	  str r1,[r0,#RCC_PLLCFGR]
 370              	  /* enable PLL */
 371 0204 0168     	  ldr r1,[r0,#RCC_CR]
 372 0206 41F08071 	  orr r1, #(1<<24)
 373 020a 0160     	  str r1,[r0,#RCC_CR]
 374              	/* wait for PLLRDY */
 375              	wait_pllrdy:
 376 020c 0168     	  ldr r1,[r0,#RCC_CR]
 377 020e 11F0007F 	  tst r1,#(1<<25)
 378 0212 FBD1     	  bne wait_pllrdy 
 379              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 380 0214 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 380      C0F21901 
 381 021c 8160     	  str r1,[r0,#RCC_CFGR]
 382              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 383 021e 8168     	  ldr r1,[r0,#RCC_CFGR]
 384 0220 41F00201 	  orr r1,#2
 385 0224 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 386              	/* wait for SWS==2 */
 387              	wait_sws:
 388 0226 8168     	  ldr r1,[r0,#RCC_CFGR]
 389 0228 11F0080F 	  tst r1,#(2<<2)
 390 022c FBD0     	  beq wait_sws
 391              	/* now sysclock is 96 Mhz */
 392              	
 393              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 394 022e 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 395 0232 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 396 0234 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 397 0238 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 398              	/* configure GPIOC:13 as output for user LED */
 399 023a 4FF40060 	  _MOV32 r0,LED_GPIO 
 399      C4F20200 
 400 0242 4FF00D01 	  mov r1,#LED_PIN
 401 0246 4FF01102 	  mov r2,#OUTPUT_OD 
 402 024a 00B500F0 	  _CALL gpio_config 
 402      BBF85DF8 
 402      04EB
 403 0254 4FF00102 	  mov r2,#1
 404 0258 00B500F0 	  _CALL gpio_out 
 404      0AF95DF8 
ARM GAS  forth.s 			page 19


 404      04EB
 405              	/* enable compensation CELL for fast I/O */
 406 0262 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 406      C4F20101 
 407 026a 4FF00100 		mov r0,#1 
 408 026e 0862     		str r0,[R1,#SYSCFG_CMPCR]
 409              	/* wait for ready bit */ 
 410 0270 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 411 0272 10F4807F 	    tst r0,#(1<<8)
 412 0276 FBD0     		beq 1b 	
 413              	
 414              	
 415              	/* configure systicks for 1msec ticks */
 416              	// set priority to 15 (lowest)
 417 0278 4FF0FF30 	  mov r0,#STCK_IRQ
 418 027c 4FF00F01 	  mov r1,#15 
 419 0280 00B500F0 	  _CALL nvic_set_priority
 419      5BF85DF8 
 419      04EB
 420 028a 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 420      CEF20000 
 421 0292 47F2FF61 	  _MOV32 r1,95999 
 421      C0F20101 
 422 029a 4160     	  str r1,[r0,#STK_LOAD]
 423 029c 4FF00701 	  mov r1,#7
 424 02a0 0160     	  str r1,[r0,STK_CTL]
 425 02a2 7047     	  _RET  
 426              	
 427              	/*******************************
 428              	  initialize UART peripheral 
 429              	********************************/
 430              		.type uart_init, %function
 431              	uart_init:
 432              	/* set GPIOA PIN 9, uart TX  */
 433 02a4 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 433      C4F20200 
 434 02ac 0168     	  ldr r1,[r0,#GPIO_MODER]
 435 02ae 6FF47012 	  mvn r2,#0xf<<(2*9)
 436 02b2 01EA0201 	  and r1,r1,r2
 437 02b6 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 438 02ba 41EA0201 	  orr r1,r1,r2 
 439 02be 0160     	  str r1,[r0,#GPIO_MODER]
 440              	/* select alternate functions USART1==AF07 */ 
 441 02c0 4FF4EE61 	  mov r1,#0x77<<4 
 442 02c4 4162     	  str r1,[r0,#GPIO_AFRH]
 443              	/* configure USART1 registers */
 444 02c6 4FF48050 	  _MOV32 r0,UART 
 444      C4F20100 
 445              	/* BAUD rate */
 446 02ce 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 447 02d2 8160     	  str r1,[r0,#USART_BRR]
 448 02d4 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 449 02d8 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 450              	/* set interrupt priority */
 451 02da 4FF02500 	  mov r0,#USART1_IRQ 
 452 02de 4FF00101 	  mov r1,#1 
 453 02e2 00B500F0 	  _CALL nvic_set_priority
ARM GAS  forth.s 			page 20


 453      2AF85DF8 
 453      04EB
 454              	/* enable interrupt in NVIC */
 455 02ec 4FF02500 	  mov r0,#USART1_IRQ 
 456 02f0 00B500F0 	  _CALL nvic_enable_irq  
 456      3CF85DF8 
 456      04EB
 457 02fa 7047     	  _RET  
 458              	
 459              	/* copy system variables to RAM */ 
 460              		.type remap, %function 
 461              	    .global remap 
 462              	remap:
 463              	// copy system to RAM 	
 464 02fc 4FF00000 		_MOV32 r0,RAM_ADR 
 464      C2F20000 
 465 0304 8949     		ldr r1,=UZERO 
 466 0306 4FF0A002 		mov r2,#ULAST-UZERO 
 467 030a 02F10302 		add r2,r2,#3
 468 030e 22F00302 		and r2,r2,#~3 
 469 0312 51F8043B 	1:	ldr r3,[r1],#4 
 470 0316 40F8043B 		str r3,[r0],#4 
 471 031a 043A     		subs R2,#4 
 472 031c F9D1     		bne 1b
 473              	// zero end of RAM 
 474 031e 4FF00002 		_MOV32 r2,RAM_END 
 474      C2F20202 
 475 0326 83EA0303 		eor r3,r3,r3 
 476 032a 40F8043B 	2:  str r3,[r0],#4
 477 032e 9042     		cmp r0,r2 
 478 0330 FBDB     		blt 2b 
 479 0332 4FF00004 		_MOV32 UP,RAM_ADR  
 479      C2F20004 
 480 033a 7047     		_RET 
 481              	
 482              	// set irq priority 
 483              	// 0 highest 
 484              	// 15 lowest
 485              	// input: r0 IRQn  
 486              	//        r1  ipr 
 487              	nvic_set_priority:
 488 033c 08B4     	    push {r3}
 489 033e 0028     	    cmp r0,#0 
 490 0340 08D4     	    bmi negative_irq 
 491 0342 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 491      CEF20003 
 492 034a 4FEA0111 	    lsl r1,#4 
 493 034e 1954     	    strb r1,[r3,r0]
 494 0350 08BC     	    pop {r3}
 495 0352 7047     	    _RET 
 496              	negative_irq:
 497 0354 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 497      CEF20003 
 498 035c 00F00F00 	    and r0,#0XF 
 499 0360 A0F10400 	    sub r0,#4 
 500 0364 4FEA0111 	    lsl r1,#4 
 501 0368 1954     	    strb r1,[r3,r0]
ARM GAS  forth.s 			page 21


 502 036a 08BC     	    pop {r3}
 503 036c 7047     	    _RET 
 504              	
 505              	
 506              	// enable interrupt in nvic 
 507              	// input: r0 = IRQn 
 508              	nvic_enable_irq: 
 509 036e 0EB4     	    push {r1,r2,r3}
 510 0370 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 510      CEF20003 
 511 0378 0146     	    mov r1,r0 
 512 037a 4FEA5111 	    lsr r1,#5  
 513 037e 4FEA8101 	    lsl r1,#2  // ISERn  
 514 0382 00F01F00 	    and r0,#31 // bit#
 515 0386 4FF00102 	    mov r2,#1 
 516 038a 02FA00F2 	    lsl r2,r0
 517 038e 72B6     	    cpsid I
 518 0390 5A50     	    str r2,[r3,r1]
 519 0392 62B6     	    cpsie I 
 520 0394 0EBC     	    pop {r1,r2,r3}
 521 0396 7047     	    _RET 
 522              	
 523              	// disable interrupt in nvic
 524              	// input: r0 = IRQn
 525              	nvic_disable_irq:
 526 0398 0EB4     	    push {r1,r2,r3}
 527 039a 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 527      CEF20003 
 528 03a2 0146     	    mov r1,r0 
 529 03a4 4FEA5111 	    lsr r1,#5  
 530 03a8 4FEA8101 	    lsl r1,#2  // ISERn
 531 03ac 00F01F00 	    and r0,#31 // bit#
 532 03b0 4FF00102 	    mov r2,#1 
 533 03b4 02FA00F2 	    lsl r2,r0
 534 03b8 5A50     	    str r2,[r3,r1]
 535 03ba BFF34F8F 	    dsb 
 536 03be BFF36F8F 	    isb 
 537 03c2 0EBC     	    pop {r1,r2,r3}
 538 03c4 7047     	    _RET 
 539              	
 540              	/**********************************
 541              	  gpio_config 
 542              	  Configure gpio mode 
 543              	  input:
 544              	    r0   GPIOx 
 545              	    r1   pin 
 546              	    r2   mode 
 547              	  output:
 548              	    none 
 549              	  use:
 550              	    r3,r5,r11  
 551              	**********************************/
 552              	gpio_config:
 553 03c6 2DE92808 	    push {r3,r5,r11}
 554              	//  clear registers field 
 555 03ca 4FF00105 	    mov r5,#1
 556 03ce 05FA01F5 	    lsl r5,r1
ARM GAS  forth.s 			page 22


 557 03d2 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 558 03d6 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 559 03d8 03EA0503 	    and r3,r5 
 560 03dc 4360     	    str r3,[r0,#GPIO_OTYPER]
 561 03de 4FF00305 	    mov r5,#3 
 562 03e2 4FF0020B 	    mov r11,#2 
 563 03e6 01FB0BFB 	    mul r11,r1 
 564 03ea 05FA0BF5 	    lsl r5,r11 
 565 03ee 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 566 03f2 0368     	    ldr r3,[r0,#GPIO_MODER]
 567 03f4 03EA0503 	    and r3,r5 
 568 03f8 0360     	    str r3,[r0,#GPIO_MODER]
 569 03fa C368     	    ldr r3,[r0,#GPIO_PUPDR]
 570 03fc 03EA0503 	    and r3,r5 
 571 0400 C360     	    str r3,[r0,#GPIO_PUPDR]
 572              	// set mode register, r2 low nibble  
 573 0402 02F00305 	    and r5,r2,#3    
 574 0406 05FA0BF5 	    lsl r5,r11 // mode 
 575 040a 0368     	    ldr r3,[r0,#GPIO_MODER]
 576 040c 43EA0503 	    orr r3,r5 
 577 0410 0360     	    str r3,[r0,#GPIO_MODER]
 578 0412 032A     	    cmp r2,#3
 579 0414 13D0     	    beq 9f // analog input 
 580 0416 12F00305 	    ands r5,r2,#3 
 581 041a 08D0     	    beq input_pull 
 582              	output_type:
 583 041c 4FEA1212 	    lsr r2,#4 
 584 0420 02FA01F2 	    lsl r2,r1 // 1 bit field 
 585 0424 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 586 0426 43EA0203 	    orr r3,r2 
 587 042a 4360     	    str r3,[r0,#GPIO_OTYPER]
 588 042c 07E0     	    b 9f 
 589              	input_pull:
 590 042e C368     	    ldr r3,[r0,#GPIO_PUPDR]
 591 0430 4FEA1212 	    lsr r2,#4 
 592 0434 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 593 0438 43EA0203 	    orr r3,r2 
 594 043c C360     	    str r3,[r0,#GPIO_PUPDR]
 595 043e BDE82808 	9:  pop {r3,r5,r11}
 596 0442 7047     	    _RET 
 597              	
 598              	// configure gpio speed 
 599              	// input:
 600              	//    r0   GPIO_BASE_ADR 
 601              	//    r1   pin 
 602              	//    r2   speed
 603              	// use:
 604              	//  r3,r5,r11 
 605              	gpio_speed:
 606 0444 2DE92808 	    push {r3,r5,r11}
 607 0448 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 608 044a 4FF00305 	    mov r5,#3
 609 044e 4FF0020B 	    mov r11,#2 
 610 0452 01FB0BFB 	    mul r11,r1 
 611 0456 05FA0BF5 	    lsl r5,r11
 612 045a 6FEA0505 	    mvn r5,r5 
 613 045e 03EA0503 	    and r3,r5   
ARM GAS  forth.s 			page 23


 614 0462 02FA0BF2 	    lsl r2,r11  
 615 0466 43EA0203 	    orr r3,r2 
 616 046a 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 617 046c BDE82808 	    pop {r3,r5,r11}
 618 0470 7047     	    _RET
 619              	
 620              	/**************************** 
 621              	  gpio_out port,pin,0|1
 622              	  input:
 623              	    r0   gpio_base_adr 
 624              	    r1   pin 
 625              	    r2   data 0|1 
 626              	**************************/
 627              	gpio_out:
 628 0472 08B4     	    push {r3}
 629 0474 4FF00103 	    mov r3,#1 
 630 0478 03FA01F3 	    lsl r3,r1 
 631 047c 0AB9     	    cbnz r2, 1f 
 632 047e 4FEA0343 	    lsl r3,#16 
 633 0482 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 634 0484 08BC     	    pop {r3}
 635 0486 7047     	    _RET 
 636              	
 637              	/******************************************************
 638              	*  COLD start moves the following to USER variables.
 639              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 640              	******************************************************/
 641              		.p2align 2
 642              	UZERO:
 643 0488 00000000 		.word 0  			/*Reserved */
 644 048c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 645 0490 00000000 		.word 0      /* TICKS */
 646 0494 00000000 	    .word 0     /* CD_TIMER */
 647 0498 CC330000 		.word HI  /*'BOOT */
 648 049c 0A000000 		.word BASEE 	/*BASE */
 649 04a0 00000000 		.word 0			/*tmp */
 650 04a4 00000000 		.word 0			/*SPAN */
 651 04a8 00000000 		.word 0			/*>IN */
 652 04ac 00000000 		.word 0			/*#TIB */
 653 04b0 00FF0120 		.word TIBB	/*TIBU */
 654 04b4 34290000 		.word INTER	/*'EVAL */
 655 04b8 00000000 		.word 0			/*HLD */
 656 04bc 34340000 		.word _LASTN	/*CONTEXT */
 657 04c0 90340000 		.word CTOP  	/* FCP end of system dictionnary */
 658 04c4 08300020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 659 04c8 34340000 		.word _LASTN	/*LAST word in dictionary */
 660 04cc 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 660      00000000 
 660      00000000 
 660      00000000 
 661 04dc 00000000 		.word 0  /* RX_HEAD */
 662 04e0 00000000 		.word 0  /* RX_TAIL */ 
 663 04e4 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 664 04e8 00000000 		.word 0  /* VID_STATE, video state */  
 665 04ec 00000000 	    .word 0  /* VID_FIELD, field */
 666 04f0 00810120 		.word VID_BUFF /* video_buffer address */ 
 667 04f4 00000000 	    .word 0 /* kbd struct */
ARM GAS  forth.s 			page 24


 668 04f8 00000000 		.space KBD_QUEUE_SIZE,0  
 668      00000000 
 668      00000000 
 668      00000000 
 669 0508 00000000 		.word 0  /* kbd queue head */
 670 050c 00000000 		.word 0 /* kbd queue tail */ 
 671 0510 00000000 	    .word 0 /* tv cursor row */
 672 0514 00000000 	    .word 0 /* tv cursor column */ 
 673 0518 00000000 	    .word 0 /* tv back color */
 674 051c 07000000 	    .word 7 /* tv font color */
 675 0520 00000000 	    .word 0,0 
 675      00000000 
 676              	ULAST:
 677 0528 68120000 	
 677      88040000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp 
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	  .include "tvout.inc"
   1              	
   2              	  .equ HRES, 320  // horizontal resolution
   3              	  .equ VRES, 200   // vertical resolution
   4              	  .equ BPP, 4     // bits per pixel
   5              	  .equ BPR, (HRES*BPP/8)  // bytes per row
   6              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
   7              	
   8              	  .equ CHAR_WIDTH, 6 
   9              	  .equ CHAR_HEIGHT, 8
  10              	  
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
ARM GAS  forth.s 			page 25


  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ LEFT_MARGIN, (750) 
  37              	  .equ VIDEO_FIRST_LINE, 40
  38              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  39              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14µSec
  40              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  41              	
  42              	// video state 
  43              	  .equ ST_VSYNC, 0 
  44              	  .equ ST_PREVID,1 
  45              	  .equ ST_VIDEO,2 
  46              	  .equ ST_POSTVID,3    
  47              	// field 
  48              	   .equ ODD_FIELD,0 
  49              	   .equ EVEN_FIELD,-1
  50              	
  51              	/*******************************************************
  52              	NOTES:
  53              	 1) Values computed for a 96Mhz sysclock 
  54              	 2) Video sync output on PB1 use T3_CH4
  55              	 3) video out trigger TIMER3 CH3 
  56              	********************************************************/
  57              	
  58              	/**************************************
  59              	  initialize TIMER3 CH4 to generate tv_out
  60              	  synchronization signal.
  61              	**************************************/ 
  62              	  _GBL_FUNC tv_init
  63              	// configure PA0:3 as OUTPUT_OD 
  64 0530 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR 
  64      C4F20200 
  65 0538 0168     	  ldr r1,[r0,#GPIO_MODER]
  66 053a 4FF05502 	  mov r2,#0x55
  67 053e 41EA0201 	  orr r1,r2
  68 0542 0160     	  str r1,[r0,#GPIO_MODER]
  69 0544 81EA0101 	  eor r1,r1 
  70 0548 4161     	  str r1,[r0,#GPIO_ODR]  
  71              	// configure PB1 as OUTPUT_AFPP 
  72              	// this is TIM3_CC4 output compare 
  73 054a 00F58060 	  add r0,#0x400 // GPIOB_BASE_ADR
  74 054e 4FF00101 	  mov r1,#1 // pin 1 
  75 0552 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  76 0556 00B5FFF7 	  _CALL gpio_config 
  76      35FF5DF8 
  76      04EB
  77 0560 4FF00101 	  mov r1,#1 
  78 0564 4FF00202 	  mov r2,#2
  79 0568 00B5FFF7 	  _CALL gpio_speed 
  79      6BFF5DF8 
  79      04EB
  80              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  81 0572 016A     	  ldr r1,[r0,#GPIO_AFRL]
  82 0574 41F02001 	  orr r1,#(2<<4) // r2 
  83 0578 0162     	  str r1,[r0,#GPIO_AFRL]
  84              	// enable peripheral clock 
ARM GAS  forth.s 			page 26


  85 057a 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  85      C4F20202 
  86 0582 4FF00200 	  mov r0,#2 
  87 0586 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  88 0588 41EA0001 	  orr r1,r0 
  89 058c 1164     	  str r1,[r2,#RCC_APB1ENR]
  90              	// configure TIMER3   
  91 058e 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
  91      C4F20002 
  92 0596 41F2D470 	  mov r0,#HPER
  93 059a D062     	  str r0,[r2,#TIM_ARR]
  94 059c 40F23F50 	  mov r0,#VIDEO_DELAY 
  95 05a0 D063     	  str r0,[r2,#TIM_CCR3]
  96 05a2 4FF4E170 	  mov r0,#HPULSE 
  97 05a6 1064     	  str r0,[r2,#TIM_CCR4]  
  98 05a8 47F27000 	  mov r0,#(7<<12)+(7<<4)
  99 05ac D061     	  str r0,[r2,#TIM_CCMR2]
 100 05ae 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 101 05b2 1062     	  str r0,[r2,#TIM_CCER]
 102 05b4 4FF00100 	  mov r0,#1 
 103 05b8 D060     	  str r0,[r2,#TIM_DIER]
 104 05ba 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 105              	// enable interrupt in NVIC controller 
 106 05bc 4FF01D00 	  mov r0,#TIM3_IRQ 
 107 05c0 4FF00201 	  mov r1,#2
 108 05c4 00B5FFF7 	  _CALL nvic_set_priority
 108      B9FE5DF8 
 108      04EB
 109 05ce 4FF01D00 	  mov r0,#TIM3_IRQ 
 110 05d2 00B5FFF7 	  _CALL nvic_enable_irq
 110      CBFE5DF8 
 110      04EB
 111 05dc 7047     	  _RET
 112              	
 113              	/*************************************
 114              	  TIMER3 interrupt for tv_out
 115              	  T1 line # 
 116              	  T0 TIM3_BASE_ADR 
 117              	*************************************/
 118 05de 00BF     	  _GBL_FUNC tv_out_isr
 119 05e0 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 119      C4F20000 
 120 05e8 81EA0101 	  eor T1,T1
 121 05ec 0161     	  str T1,[T0,#TIM_SR]
 122 05ee E16D     	  ldr T1,[UP,#VID_CNTR]
 123 05f0 01F10101 	  add T1,#1 
 124 05f4 E165     	  str T1,[UP,#VID_CNTR]
 125              	/** machine state cases **/
 126 05f6 226E     	  ldr T2,[UP,#VID_STATE]
 127 05f8 002A     	  cmp T2,#ST_VSYNC 
 128 05fa 07D0     	  beq state_vsync
 129 05fc 012A     	  cmp T2,#ST_PREVID 
 130 05fe 2FD0     	  beq state_pre_video 
 131 0600 022A     	  cmp T2,#ST_VIDEO 
 132 0602 36D0     	  beq state_video_out 
 133 0604 032A     	  cmp T2,#ST_POSTVID 
 134 0606 60D0     	  beq state_post_video
ARM GAS  forth.s 			page 27


 135 0608 FFF7FEBF 	  b default_handler // invalid state 
 136              	/*** vertical sync state **/
 137              	state_vsync:
 138 060c 0129     	  cmp T1,#1
 139 060e 06D1     	  bne 1f 
 140              	/****** set vertical pre-sync  *****/
 141 0610 4FF0DB01 	  mov T1,#SERRATION
 142 0614 0164     	  str T1,[T0,#TIM_CCR4]
 143 0616 40F6E931 	  mov T1,#SYNC_LINE 
 144 061a C162     	  str T1,[T0,#TIM_ARR]
 145 061c 68E0     	  b tv_isr_exit 
 146 061e 0729     	1: cmp T1,#7
 147 0620 03D1     	  bne 2f 
 148              	// vertical sync pulse   
 149 0622 40F62821 	  mov T1,#VSYNC_PULSE
 150 0626 0164     	  str T1,[T0,#TIM_CCR4]
 151 0628 62E0     	  b tv_isr_exit
 152 062a 0D29     	2: cmp T1,#13
 153 062c 03D1     	   bne 3f  
 154              	// set vertical post-sync    
 155 062e 4FF0DB01 	   mov T1,#SERRATION 
 156 0632 0164     	   str T1,[T0,#TIM_CCR4]
 157 0634 5CE0     	   b tv_isr_exit   
 158 0636 1229     	3: cmp T1,#18
 159 0638 03D1     	   bne 4f 
 160              	// if even field full line  
 161 063a 616E     	   ldr T1,[UP,#VID_FIELD]
 162 063c 0029     	   cmp T1,#ODD_FIELD  
 163 063e 57D0     	   beq tv_isr_exit 
 164 0640 01E0     	   b sync_end 
 165 0642 1329     	4: cmp T1,#19 
 166 0644 54D1     	   bne tv_isr_exit
 167              	sync_end: 
 168 0646 4FF00901 	   mov T1,#9
 169 064a E165     	   str T1,[UP,#VID_CNTR]
 170 064c 4FF4E171 	   mov T1,#HPULSE 
 171 0650 0164     	   str T1,[T0,#TIM_CCR4] 
 172 0652 41F2D471 	   mov T1,#HPER 
 173 0656 C162     	   str T1,[T0,#TIM_ARR] 
 174 0658 4FF00101 	   mov T1,#ST_PREVID 
 175 065c 2166     	   str T1,[UP,#VID_STATE]
 176 065e 47E0     	   b tv_isr_exit 
 177              	/*****************************/
 178              	state_pre_video:
 179 0660 2829     	   cmp T1,#VIDEO_FIRST_LINE
 180 0662 45D4     	   bmi tv_isr_exit 
 181 0664 4FF00201 	   mov T1,#ST_VIDEO 
 182 0668 2166     	   str T1,[UP,#VID_STATE]
 183 066a 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 184 066e C160     	   str T1,[T0,#TIM_DIER]
 185 0670 3EE0     	   b tv_isr_exit 
 186              	/**************************
 187              	    VIDEO OUTPUT 
 188              	**************************/   
 189              	state_video_out:
 190 0672 F029     	   cmp T1,#VIDEO_LAST_LINE 
 191 0674 06D9     	   bls 1f 
ARM GAS  forth.s 			page 28


 192 0676 4FF00301 	   mov T1,#ST_POSTVID 
 193 067a 2166     	   str T1,[UP,#VID_STATE]
 194 067c 4FF00101 	   mov T1,#1 
 195 0680 C160     	   str T1,[T0,#TIM_DIER]
 196 0682 35E0     	   b tv_isr_exit 
 197              	1: // video output
 198 0684 A06E     	   ldr T0,[UP,#VID_BUFFER]
 199 0686 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 200 068a 4FF0A003 	   mov T3,#160
 201 068e 03FB01F1 	   mul T1,T3 
 202 0692 0844     	   add T0,T1  
 203 0694 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 203      C4F20201 
 204 069c 0278     	2: ldrb T2,[T0]
 205 069e 4FEA1212 	   lsr T2,#4 
 206 06a2 4A61     	   str T2,[T1,#GPIO_ODR]
 207 06a4 AFF30080 	   nop.w
 208 06a8 AFF30080 	   nop.w 
 209 06ac 10F8012B 	   ldrb T2,[T0],#1
 210 06b0 02F00F02 	   and T2,#15 
 211 06b4 4A61     	   str T2,[T1,#GPIO_ODR]
 212 06b6 AFF30080 	   nop.w
 213 06ba AFF30080 	   nop.w  
 214 06be 013B     	   subs T3,#1
 215 06c0 ECD1     	   bne 2b  
 216 06c2 4FF47022 	   mov T2,#(15<<16) 
 217 06c6 8A61     	   str T2,[T1,#GPIO_BSRR]
 218 06c8 12E0     	   b tv_isr_exit 
 219              	state_post_video:
 220 06ca 4FF48372 	   mov T2,#262
 221 06ce 9142     	   cmp T1,T2
 222 06d0 0ED4     	   bmi tv_isr_exit     
 223              	// odd field line 262 half line 
 224 06d2 616E     	   ldr T1,[UP,VID_FIELD]
 225 06d4 11B9     	   cbnz T1, frame_end 
 226 06d6 40F6E931 	   mov T1,#SYNC_LINE
 227 06da C162     	   str T1,[T0,#TIM_ARR]      
 228              	frame_end: 
 229 06dc 4FF00001 	   mov T1,#ST_VSYNC 
 230 06e0 2166     	   str T1,[UP,#VID_STATE]
 231 06e2 81EA0101 	   eor T1,T1 
 232 06e6 E165     	   str T1,[UP,#VID_CNTR]
 233 06e8 616E     	   ldr T1,[UP,#VID_FIELD]
 234 06ea 6FEA0101 	   mvn T1,T1  
 235 06ee 6166     	   str T1,[UP,#VID_FIELD]
 236              	tv_isr_exit: 
 237 06f0 7047     	   _RET   
 238              	
 239              	
 240              	/***************************
 241              	    FORTH WORDS 
 242              	***************************/
 243              	    .equ LINK, 0 
 244              	
 245              	// BACK-COLOR ( -- a )
 246              	//   back color variable 
 247 06f2 00000000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
ARM GAS  forth.s 			page 29


 247      0A424143 
 247      4B2D434F 
 247      4C4F5200 
 247      00BF
 248 0704 47F8046D 		_PUSH 
 249 0708 04F19006 		ADD TOS,UP,#BK_COLOR
 250 070c 00F0B0BD 		_NEXT
 251              	
 252              	// PEN-COLOR ( -- a )
 253              	// pen color variable 
 254 0710 F6060000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 254      0950454E 
 254      2D434F4C 
 254      4F5200BF 
 255 0720 47F8046D 		_PUSH 
 256 0724 04F19406 		ADD TOS,UP,#PEN_COLOR
 257 0728 00F0A2BD 		_NEXT 
 258              	
 259              	// COLUMN ( -- a )
 260              	// cursor column variable 
 261 072c 14070000 	  _HEADER COLUMN,6,"COLUMN"
 261      06434F4C 
 261      554D4E00 
 262 0738 47F8046D 	  _PUSH 
 263 073c 04F18C06 	  ADD TOS,UP,#COL 
 264 0740 00F096BD 	  _NEXT 
 265              	
 266              	// ROW ( -- a )
 267              	// cursor row 
 268 0744 30070000 	  _HEADER CURSOR_ROW,3,"ROW"
 268      03524F57 
 269 074c 47F8046D 	  _PUSH 
 270 0750 04F18806 	  ADD TOS,UP,#ROW 
 271 0754 00F08CBD 	  _NEXT 
 272              	
 273              	// ROW>Y ( n1 - n2 )
 274              	// convert cursor row to y coord 
 275 0758 48070000 	  _HEADER ROWY,5,"ROW>Y"
 275      05524F57 
 275      3E5900BF 
 276 0764 4FF00800 	  mov T0,#CHAR_HEIGHT
 277 0768 00FB06F6 	  mul TOS,T0 
 278 076c 00F080BD 	  _NEXT 
 279              	
 280              	// COL>X ( n1 -- n2 )
 281              	// convert cursor column to x coord 
 282 0770 5C070000 	  _HEADER COLX,5,"COL>X" 
 282      05434F4C 
 282      3E5800BF 
 283 077c 4FF00600 	  mov T0,#CHAR_WIDTH 
 284 0780 00FB06F6 	  mul TOS,T0 
 285 0784 00F074BD 	  _NEXT 
 286              	
 287              	// FONT ( -- a )
 288              	// return address of font table
 289 0788 74070000 	  _HEADER FONT,4,"FONT" 
 289      04464F4E 
ARM GAS  forth.s 			page 30


 289      540000BF 
 290 0794 47F8046D 	  _PUSH 
 291 0798 E34E     	  ldr TOS,=font_6x8 
 292 079a 00F069BD 	  _NEXT 
 293              	
 294              	// VIDBUFF ( -- a )
 295              	// address of video buffer 
 296 079e 8C070000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 296      07564944 
 296      42554646 
 296      00BF
 297 07ac 47F8046D 	  _PUSH 
 298 07b0 A66E     	  LDR TOS,[UP,#VID_BUFFER]
 299 07b2 00F05DBD 	  _NEXT 
 300              	
 301              	
 302              	// PLOT ( x y op -- )
 303              	// draw a pixel 
 304              	//    0 back color 
 305              	//    1 pen color 
 306              	//    2 invert (invert color pixels )
 307              	//    3 xor pen color  
 308 07b6 A2070000 	    _HEADER PLOT,4,"PLOT"
 308      04504C4F 
 308      5400
 309              	// compute video buffer byte address from coords
 310 07c0 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 311 07c2 4FF0A002 	    mov T2,#BPR // bytes per row  
 312 07c6 02FB00F0 	    mul T0,T2 
 313 07ca 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 314 07ce 1044     	    add T0,T2 
 315 07d0 A36E     	    ldr T3,[UP,#VID_BUFFER] 
 316 07d2 0344     	    add T3,T0 // T3 -> byte address 
 317 07d4 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 318 07d6 4FF00F02 	    mov T2,#15 // AND mask 
 319 07da 11F0010F 	    tst T1,#1 
 320 07de 01D0     	    beq 1f 
 321 07e0 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 322 07e4 D148     	1:  ldr T0,=plot_op 
 323 07e6 D0E806F0 	    tbb [T0,TOS]
 324              	op_back:
 325 07ea 05EA0205 	    and WP,T2 // mask out nibble 
 326 07ee 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 327 07f2 11F0010F 	    tst T1,#1 
 328 07f6 01D1     	    bne 1f 
 329 07f8 4FEA0010 	    lsl T0,#4 // high nibble  
 330 07fc 45EA0005 	1:  orr WP,T0  
 331 0800 1D70     	    strb WP,[T3]
 332 0802 1AE0     	    b 9f 
 333              	op_pen: 
 334 0804 05EA0205 	    and WP,T2 
 335 0808 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 336 080c 11F0010F 	    tst T1,#1
 337 0810 01D1     	    bne 1f 
 338 0812 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 339 0816 45EA0005 	1:	orr WP,T0 
 340 081a 1D70     	    strb WP,[T3]
ARM GAS  forth.s 			page 31


 341 081c 0DE0     	    b 9f 
 342              	op_invert:
 343 081e 85EA0205 	    eor WP,T2 
 344 0822 1D70     	    strb WP,[T3]
 345 0824 09E0     	    b 9f 
 346              	op_xor:
 347 0826 D4F89400 	    ldr T0,[UP,#PEN_COLOR]
 348 082a 11F0010F 	    tst T1,#1 
 349 082e 01D1     	    bne 1f 
 350 0830 4FEA0010 	    lsl T0,#4 
 351 0834 85EA0005 	1:  eor WP,T0 
 352 0838 1D70     	    strb WP,[T3]
 353 083a 57F8046B 	9:  _POP 
 354 083e 00F017BD 	    _NEXT 
 355              	
 356 0842 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 357              	
 358              	
 359              	// VSYNC ( -- )
 360              	// wait vertical sync phase 
 361 0846 BA070000 	    _HEADER VSYNC,5,"VSYNC"
 361      05565359 
 361      4E43
 362 0850 E06D     	1:  ldr T0,[UP,#VID_CNTR]
 363 0852 0028     	    cmp T0,#0
 364 0854 FCD1     	    bne 1b
 365 0856 00F00BBD 	    _NEXT 
 366              	
 367              	// CLS ( -- )
 368              	// clear TV screen 
 369 085a 4A080000 	    _HEADER CLS,3,"CLS"
 369      03434C53 
 369      00BF
 370 0864 80EA0000 	    eor T0,T0 
 371 0868 94F89010 	    ldrb T1,[UP,#BK_COLOR]
 372 086c 40EA0100 	    orr T0,T1 
 373 0870 4FEA0111 	    lsl T1,#4 
 374 0874 40EA0100 	    orr T0,T1 
 375 0878 4FEA0021 	    lsl T1,T0,#8 
 376 087c 40EA0100 	    orr T0,T1 
 377 0880 4FEA0041 	    lsl T1,T0,#16
 378 0884 40EA0100 	    orr T0,T1 
 379 0888 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 380 088c A26E     	    ldr T2,[UP,#VID_BUFFER]
 381 088e 5050     	1:	str T0,[T2,T1]
 382 0890 0439     	    subs T1,#4
 383 0892 FCD1     	    bne 1b
 384 0894 1060     	    str T0,[T2]
 385 0896 80EA0000 	    eor T0,T0 
 386 089a C4F88800 	    str T0,[UP,#ROW]
 387 089e C4F88C00 	    str T0,[UP,#COL]
 388 08a2 00F0E5BC 	    _NEXT 
 389              	
 390              	
 391              	// CLRLINE ( n -- )
 392              	// clear text line 
 393 08a6 5E080000 	  _HEADER CLRLINE,7,"CLRLINE"
ARM GAS  forth.s 			page 32


 393      07434C52 
 393      4C494E45 
 393      00BF
 394 08b4 504700BF 	  _NEST
 395 08b8 49140000 	  _DOLIT (BPR*CHAR_HEIGHT)
 395      00050000 
 396 08c0 7D150000 	  _ADR DUPP  
 397 08c4 25150000 	  _ADR TOR 
 398 08c8 61160000 	  _ADR STAR
 399 08cc AD070000 	  _ADR VIDBUFF
 400 08d0 41160000 	  _ADR PLUS
 401 08d4 FD140000 	  _ADR RFROM   
 402 08d8 49140000 	  _DOLIT 0 
 402      00000000 
 403 08e0 B51D0000 	  _ADR FILL 
 404 08e4 77120000 	  _UNNEST 
 405              	
 406              	// SCROLLUP ( -- )
 407              	// scroll up tv screen 1 char height 
 408 08e8 AA080000 	  _HEADER SCROLLUP,8,"SCROLLUP"
 408      08534352 
 408      4F4C4C55 
 408      500000BF 
 409 08f8 504700BF 	  _NEST 
 410 08fc AD070000 	  _ADR VIDBUFF 
 411 0900 7D150000 	  _ADR DUPP 
 412 0904 49140000 	  _DOLIT BPR*CHAR_HEIGHT 
 412      00050000 
 413 090c 7D150000 	  _ADR DUPP 
 414 0910 25150000 	  _ADR TOR 
 415 0914 41160000 	  _ADR PLUS 
 416 0918 8D150000 	  _ADR SWAP 
 417 091c 49140000 	  _DOLIT VIDEO_BUFFER_SIZE 
 417      007D0000 
 418 0924 FD140000 	  _ADR RFROM  
 419 0928 51160000 	  _ADR SUBB 
 420 092c 811D0000 	  _ADR MOVE
 421 0930 49140000 	  _DOLIT 24 
 421      18000000 
 422 0938 B5080000 	  _ADR CLRLINE 
 423 093c 77120000 	  _UNNEST 
 424              	
 425              	//  RIGHT ( -- )
 426              	// move cursor 1 char. right 
 427 0940 EC080000 	  _HEADER RIGHT,5,"RIGHT"
 427      05524947 
 427      485400BF 
 428 094c D4F88C00 	  ldr T0,[UP,#COL]
 429 0950 00F10100 	  add T0,#1
 430 0954 3528     	  cmp T0,#53
 431 0956 09D5     	  bpl TVCR  
 432 0958 C4F88C00 	  str T0,[UP,#COL]
 433 095c 00F088BC 	  _NEXT 
 434              	
 435              	
 436              	// TV-CR 
 437              	// carriage return line feed 
ARM GAS  forth.s 			page 33


 438 0960 44090000 	  _HEADER TVCR,5,"TV-CR"
 438      0554562D 
 438      435200BF 
 439 096c 80EA0000 	  eor T0,T0 
 440 0970 C4F88C00 	  str T0,[UP,#COL]
 441 0974 D4F88800 	  ldr T0,[UP,#ROW]
 442 0978 1828     	  cmp T0,#24
 443 097a 05D0     	  beq 2f 
 444 097c 00F10100 	  add T0,#1 
 445 0980 C4F88800 	  str T0,[UP,#ROW]
 446 0984 00F074BC 	  _NEXT 
 447 0988 48F804CD 	2:_CALL_COLWORD 3f 
 447      DFF8A0C1 
 447      00F06EBC 
 448              	3: 
 449 0994 F9080000 	  _ADR SCROLLUP 
 450 0998 77120000 	  _UNNEST  
 451              	
 452              	
 453              	// extract font pixel 
 454              	FONT_PIXEL: // ( r -- 0|1 )
 455 099c 4FF08000 	    mov T0,#128 
 456 09a0 06EA0006 	    and TOS,T0 
 457 09a4 4FEAD616 	    lsr TOS,#7
 458 09a8 00F062BC 	    _NEXT 
 459              	
 460              	// increment x coord 
 461              	INCR_X: // ( x y -- x' y )
 462 09ac 3868     	  ldr T0,[DSP]
 463 09ae 00F10100 	  add T0,#1 
 464 09b2 3860     	  str T0,[DSP]
 465 09b4 00F05CBC 	  _NEXT 
 466              	
 467              	// shift font row data
 468              	NEXT_PIXEL:
 469 09b8 4FEA4606 	    lsl TOS,#1
 470 09bc 00F058BC 	    _NEXT 
 471              	
 472              	
 473              	// CHAR_ROW 
 474              	// plot character row 
 475              	// {x y r -- }
 476              	//  _HEADER CHAR_ROW,7,"CHARROW"
 477              	CHAR_ROW:  
 478 09c0 504700BF 	    _NEST 
 479 09c4 49140000 	    _DOLIT 5 
 479      05000000 
 480 09cc 25150000 	    _ADR TOR 
 481 09d0 25150000 	1:  _ADR TOR 
 482 09d4 B5170000 	    _ADR DDUP 
 483 09d8 11150000 	    _ADR RAT
 484 09dc 9D090000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 485 09e0 C1070000 	    _ADR PLOT 
 486 09e4 AD090000 	    _ADR INCR_X 
 487 09e8 FD140000 	    _ADR RFROM 
 488 09ec B9090000 	    _ADR NEXT_PIXEL
 489              	    //_DOLIT 1 
ARM GAS  forth.s 			page 34


 490              	    //_ADR LSHIFT 
 491 09f0 6D140000 	    _DONXT 1b
 491      D0090000 
 492 09f8 A1170000 	    _ADR TDROP 
 493 09fc 77120000 	    _UNNEST 
 494              	
 495              	
 496              	CHAR_FONT: // ( c -- c-adr )
 497 0a00 A6F12006 	   sub TOS,#32
 498 0a04 4FF00800 	   mov T0,#8 
 499 0a08 00FB06F6 	   mul TOS,T0 
 500 0a0c 4648     	   ldr T0,=font_6x8
 501 0a0e 0644     	   add TOS,T0 
 502 0a10 00F02EBC 	   _NEXT 
 503              	
 504              	/**********************************
 505              	   TV-PUTC ( c -- )
 506              	   draw character in video buffer
 507              	**********************************/
 508 0a14 64090000 	    _HEADER TVPUTC,7,"TV-PUTC"
 508      0754562D 
 508      50555443 
 509 0a20 504700BF 	    _NEST 
 510 0a24 010A0000 	    _ADR CHAR_FONT 
 511 0a28 39070000 	    _ADR COLUMN 
 512 0a2c D1140000 	    _ADR AT
 513 0a30 7D070000 	    _ADR COLX  // x coord 
 514 0a34 4D070000 	    _ADR CURSOR_ROW 
 515 0a38 D1140000 	    _ADR AT    
 516 0a3c 65070000 	    _ADR ROWY  // {c-adr x y -- } 
 517 0a40 65170000 	    _ADR ROT  // TEST 
 518 0a44 49140000 	    _DOLIT 7   
 518      07000000 
 519 0a4c 25150000 	    _ADR TOR  
 520 0a50 25150000 	1:  _ADR TOR  // { x y }
 521 0a54 B5170000 	    _ADR DDUP  // { x y x y }
 522 0a58 11150000 	    _ADR RAT 
 523 0a5c F1140000 	    _ADR CAT   // { x y x y r }
 524 0a60 C1090000 	    _ADR CHAR_ROW 
 525 0a64 9D160000 	    _ADR ONEP // {x y' }
 526 0a68 FD140000 	    _ADR RFROM 
 527 0a6c 9D160000 	    _ADR ONEP // {x y' c-adr' }
 528 0a70 6D140000 	    _DONXT 1b
 528      500A0000 
 529 0a78 A1170000 	    _ADR TDROP  
 530 0a7c 4D090000 	    _ADR RIGHT
 531 0a80 77120000 	    _UNNEST  
 532              	
 533              	// PRINT ( cstr -- )
 534              	// print counted string 
 535 0a84 180A0000 	    _HEADER PRINT,5,"PRINT"
 535      05505249 
 535      4E5400BF 
 536 0a90 504700BF 	    _NEST 
 537 0a94 01190000 	    _ADR COUNT 
 538 0a98 AD160000 	    _ADR ONEM 
 539 0a9c 25150000 	    _ADR TOR 
ARM GAS  forth.s 			page 35


 540 0aa0 7D150000 	1:  _ADR DUPP 
 541 0aa4 F1140000 	    _ADR CAT 
 542 0aa8 210A0000 	    _ADR TVPUTC 
 543 0aac 9D160000 	    _ADR ONEP 
 544 0ab0 6D140000 	    _DONXT 1b 
 544      A00A0000 
 545 0ab8 6D150000 	    _ADR DROP 
 546 0abc 77120000 	    _UNNEST 
 547              	
 548              	// CURPOS ( line col -- )
 549              	// set text cursor position 
 550 0ac0 880A0000 	    _HEADER CURPOS,6,"CURPOS"
 550      06435552 
 550      504F5300 
 551 0acc 352E     	    cmp TOS,#53
 552 0ace 01D4     	    bmi 1f 
 553 0ad0 4FF03406 	    mov TOS,#52
 554 0ad4 C4F88C60 	1:  str TOS,[UP,#COL]
 555 0ad8 57F8046B 	    _POP
 556 0adc 192E     	    cmp TOS,#25
 557 0ade 01D4     	    bmi 1f 
 558 0ae0 4FF01806 	    mov TOS,#24 
 559 0ae4 C4F88860 	1:  str TOS,[UP,#ROW]
 560 0ae8 57F8046B 	    _POP 
 561 0aec C0E3     	    _NEXT 
 562              	
 563              	// INPUT ( -- c-adr )
 564              	// input a string in pad 
 565 0aee C40A0000 	    _HEADER INPUT,5,"INPUT"
 565      05494E50 
 565      5554
 566 0af8 504700BF 	    _NEST 
 567 0afc F91C0000 	    _ADR PAD 
 568 0b00 7D150000 	    _ADR DUPP 
 569 0b04 9D160000 	    _ADR ONEP 
 570 0b08 49140000 	    _DOLIT 53
 570      35000000 
 571 0b10 21280000 	    _ADR ACCEP
 572 0b14 8D150000 	    _ADR SWAP 
 573 0b18 6D150000 	    _ADR DROP 
 574 0b1c A1150000 	    _ADR OVER 
 575 0b20 DD140000 	    _ADR CSTOR  
 576 0b24 77120000 	    _UNNEST 
 577              	
 578              	
 579              		.section .rodata 
 580              		.p2align 2
 581              	/********************************************
 582              	    TV font  ASCII 6 pixels x 8 pixels 
 583              	********************************************/
 584              	font_6x8:
 585 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 585      00000000 
 586 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 586      20002000 
 587 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 587      00000000 
ARM GAS  forth.s 			page 36


 588 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 588      F8505000 
 589 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 589      28F02000 
 590 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 590      40981800 
 591 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 591      A8906800 
 592 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 592      00000000 
 593 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 593      40201000 
 594 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 594      10204000 
 595 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 595      A8200000 
 596 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 596      20200000 
 597 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 597      60204000 
 598 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 598      00000000 
 599 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 599      00606000 
 600 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 600      40800000 
 601 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 601      C8887000 
 602 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 602      2020F800 
 603 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 603      4080F800 
 604 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 604      0808F000 
 605 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 605      F8101000 
 606 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 606      0808F000 
 607 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 607      88887000 
 608 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 608      40404000 
 609 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 609      88887000 
 610 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 610      08087000 
 611 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 611      60600000 
 612 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 612      60204000 
 613 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 613      40201000 
 614 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 614      F8000000 
 615 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 615      10204000 
 616 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
ARM GAS  forth.s 			page 37


 616      20002000 
 617 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 617      A8A87000 
 618 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 618      88888800 
 619 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 619      8888F000 
 620 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 620      80807800 
 621 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 621      8888F000 
 622 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 622      8080F800 
 623 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 623      80808000 
 624 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 624      88887000 
 625 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 625      88888800 
 626 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 626      20207000 
 627 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 627      08906000 
 628 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 628      A0908800 
 629 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 629      8080F800 
 630 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 630      88888800 
 631 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 631      98888800 
 632 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 632      88887000 
 633 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 633      80808000 
 634 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 634      A8987800 
 635 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 635      A0908800 
 636 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 636      0808F000 
 637 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 637      20202000 
 638 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 638      88887000 
 639 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 639      88502000 
 640 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 640      A8D88800 
 641 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 641      50888800 
 642 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 642      20202000 
 643 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 643      8080F800 
 644 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 644      40406000 
ARM GAS  forth.s 			page 38


 645 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 645      10080000 
 646 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 646      08081800 
 647 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 647      00000000 
 648 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 648      0000F800 
 649 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 649      00000000 
 650 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 650      78887800 
 651 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 651      C888F000 
 652 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 652      80887000 
 653 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 653      98887800 
 654 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 654      F8807000 
 655 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 655      40404000 
 656 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 656      88780870 
 657 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 657      88888800 
 658 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 658      20202000 
 659 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 659      10906000 
 660 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 660      C0A09000 
 661 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 661      20207000 
 662 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 662      A8888800 
 663 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 663      88888800 
 664 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 664      88887000 
 665 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 665      88F08080 
 666 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 666      90B05018 
 667 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 667      80808000 
 668 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 668      7008F000 
 669 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 669      40483000 
 670 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 670      88986800 
 671 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 671      88502000 
 672 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 672      A8A85000 
 673 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
ARM GAS  forth.s 			page 39


 673      20508800 
 674 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 674      88780870 
 675 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 675      2040F800 
 676 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 676      40402000 
 677 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 677      20202000 
 678 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 678      20204000 
 679 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 679      10000000 
 680 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 680      FCFCFCFC 
 681 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 681      10204000 
 682 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 682      40201000 
 683 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 683      20200000 
 684 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 684      A8702000 
 685 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 685      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
ARM GAS  forth.s 			page 40


  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
ARM GAS  forth.s 			page 41


  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes   
  83              	VK_BACK =	8
  84              	VK_TAB =	9
  85              	VK_ESC =	27
  86              	VK_ENTER =	'\r'
  87              	VK_SPACE =	' ' 
  88              	VK_DELETE =	127 
  89              	VK_F1 =	128
  90              	VK_F2 =	129
  91              	VK_F3 =	130
  92              	VK_F4 =	131
  93              	VK_F5 =	132
  94              	VK_F6 =	133
  95              	VK_F7 =	134
  96              	VK_F8 =	135
  97              	VK_F9 =	136
  98              	VK_F10 =	138
  99              	VK_F11 =	139
 100              	VK_F12 =	140
 101              	VK_UP =	141
 102              	VK_DOWN =	142
 103              	VK_LEFT =	143
 104              	VK_RIGHT =	144
 105              	VK_HOME =	145
 106              	VK_END =	146
ARM GAS  forth.s 			page 42


 107              	VK_PGUP =	147
 108              	VK_PGDN =	148
 109              	VK_INSERT =	149
 110              	VK_APPS =	151
 111              	VK_PRN	=	152
 112              	VK_PAUSE =	153
 113              	VK_NLOCK =    154 // numlock
 114              	VK_CLOCK =	155 // capslock
 115              	VK_LSHIFT =	156
 116              	VK_LCTRL =	157
 117              	VK_LALT =	158
 118              	VK_RSHIFT =	159
 119              	VK_LGUI =	160
 120              	VK_RCTRL =	161
 121              	VK_RGUI =	162
 122              	VK_RALT =	163
 123              	VK_SCROLL =	164
 124              	VK_NUM	=	165 
 125              	VK_CAPS =	168
 126              	//<SHIFT>-<KEY> 
 127              	VK_SUP	=	169
 128              	VK_SDOWN =	170
 129              	VK_SLEFT =	171
 130              	VK_SRIGHT =	172
 131              	VK_SHOME =	173
 132              	VK_SEND	=	174
 133              	VK_SPGUP =	175
 134              	VK_SPGDN =	176
 135              	VK_SDEL  =    191
 136              	//<CTRL>-<KEY>
 137              	VK_CUP	=	177
 138              	VK_CDOWN =	178	
 139              	VK_CLEFT =	179
 140              	VK_CRIGHT =	180
 141              	VK_CHOME =	181
 142              	VK_CEND =	182
 143              	VK_CPGUP =	183
 144              	VK_CPGDN =	184
 145              	VK_CDEL  =    185
 146              	VK_CBACK =    186
 147              	VK_LWINDOW =  187
 148              	VK_RWINDOW =  188
 149              	VK_MENU	=   189
 150              	VK_SLEEP =	190
 151              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0b34 1C61     	   .byte 0x1c,'a' 
   9 0b36 3262     	   .byte 0x32,'b'
  10 0b38 2163     	   .byte 0x21,'c'
  11 0b3a 2364     	   .byte 0x23,'d'
  12 0b3c 2465     	   .byte 0x24,'e'
  13 0b3e 2B66     	   .byte 0x2b,'f'
  14 0b40 3467     	   .byte 0x34,'g'
  15 0b42 3368     	   .byte 0x33,'h'
ARM GAS  forth.s 			page 43


  16 0b44 4369     	   .byte 0x43,'i'
  17 0b46 3B6A     	   .byte 0x3B,'j'
  18 0b48 426B     	   .byte 0x42,'k'
  19 0b4a 4B6C     	   .byte 0x4b,'l'
  20 0b4c 3A6D     	   .byte 0x3a,'m'
  21 0b4e 316E     	   .byte 0x31,'n'
  22 0b50 446F     	   .byte 0x44,'o'
  23 0b52 4D70     	   .byte 0x4d,'p'
  24 0b54 1571     	   .byte 0x15,'q'
  25 0b56 2D72     	   .byte 0x2d,'r'
  26 0b58 1B73     	   .byte 0x1b,'s'
  27 0b5a 2C74     	   .byte 0x2c,'t'
  28 0b5c 3C75     	   .byte 0x3c,'u'
  29 0b5e 2A76     	   .byte 0x2a,'v'
  30 0b60 1D77     	   .byte 0x1d,'w'
  31 0b62 2278     	   .byte 0x22,'x'
  32 0b64 3579     	   .byte 0x35,'y'
  33 0b66 1A7A     	   .byte 0x1a,'z'
  34 0b68 4530     	   .byte 0x45,'0'
  35 0b6a 1631     	   .byte 0x16,'1'
  36 0b6c 1E32     	   .byte 0x1e,'2'
  37 0b6e 2633     	   .byte 0x26,'3'
  38 0b70 2534     	   .byte 0x25,'4'
  39 0b72 2E35     	   .byte 0x2e,'5'
  40 0b74 3636     	   .byte 0x36,'6'
  41 0b76 3D37     	   .byte 0x3d,'7'
  42 0b78 3E38     	   .byte 0x3e,'8'
  43 0b7a 4639     	   .byte 0x46,'9'
  44 0b7c 0E60     	   .byte 0x0e,'`'
  45 0b7e 4E2D     	   .byte 0x4e,'-'
  46 0b80 553D     	   .byte 0x55,'='
  47 0b82 5D5C     	   .byte 0x5d,'\\'
  48 0b84 545B     	   .byte 0x54,'['
  49 0b86 5B5D     	   .byte 0x5b,']'
  50 0b88 4C3B     	   .byte 0x4c,';'
  51 0b8a 5227     	   .byte 0x52,'\''
  52 0b8c 412C     	   .byte 0x41,','
  53 0b8e 492E     	   .byte 0x49,'.'
  54 0b90 7C2A     	   .byte 0x7c,'*'
  55 0b92 792B     	   .byte 0x79,'+'
  56 0b94 2920     	   .byte 0x29,' '
  57 0b96 5A0D     	   .byte SC_ENTER,'\r'
  58 0b98 6608     	   .byte SC_BKSP,8
  59 0b9a 0D09     	   .byte SC_TAB,9
  60 0b9c 761B     	   .byte SC_ESC,27
  61 0b9e 119E     	   .byte SC_LALT,VK_LALT 
  62 0ba0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0ba2 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0ba4 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0ba6 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0ba8 5800     	   .byte SC_CAPS,0
  67 0baa 0580     	   .byte SC_F1,VK_F1
  68 0bac 0681     	   .byte SC_F2,VK_F2
  69 0bae 0482     	   .byte SC_F3,VK_F3
  70 0bb0 0C83     	   .byte SC_F4,VK_F4
  71 0bb2 0384     	   .byte SC_F5,VK_F5
  72 0bb4 0B85     	   .byte SC_F6,VK_F6
ARM GAS  forth.s 			page 44


  73 0bb6 8386     	   .byte SC_F7,VK_F7
  74 0bb8 0A87     	   .byte SC_F8,VK_F8
  75 0bba 0188     	   .byte SC_F9,VK_F9
  76 0bbc 098A     	   .byte SC_F10,VK_F10
  77 0bbe 788B     	   .byte SC_F11,VK_F11
  78 0bc0 078C     	   .byte SC_F12,VK_F12
  79 0bc2 7030     	   .byte SC_KP0,'0'
  80 0bc4 6931     	   .byte SC_KP1,'1'
  81 0bc6 7232     	   .byte SC_KP2,'2'
  82 0bc8 7A33     	   .byte SC_KP3,'3'
  83 0bca 6B34     	   .byte SC_KP4,'4'
  84 0bcc 7335     	   .byte SC_KP5,'5'
  85 0bce 7436     	   .byte SC_KP6,'6'
  86 0bd0 6C37     	   .byte SC_KP7,'7'
  87 0bd2 7538     	   .byte SC_KP8,'8'
  88 0bd4 7D39     	   .byte SC_KP9,'9'
  89 0bd6 7C2A     	   .byte SC_KPMUL,'*'
  90 0bd8 4A2F     	   .byte SC_KPDIV,'/'
  91 0bda 792B     	   .byte SC_KPPLUS,'+'
  92 0bdc 7B2D     	   .byte SC_KPMINUS,'-'
  93 0bde 712E     	   .byte SC_KPDOT,'.'
  94 0be0 5A0D     	   .byte SC_KPENTER,'\r'
  95 0be2 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0be4 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0be6 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0be8 6141     	   .byte 'a','A'
 102 0bea 6242     	   .byte 'b','B'
 103 0bec 6343     	   .byte 'c','C'
 104 0bee 6444     	   .byte 'd','D'
 105 0bf0 6545     	   .byte 'e','E'
 106 0bf2 6646     	   .byte 'f','F'
 107 0bf4 6747     	   .byte 'g','G'
 108 0bf6 6848     	   .byte 'h','H'
 109 0bf8 6949     	   .byte 'i','I'
 110 0bfa 6A4A     	   .byte 'j','J'
 111 0bfc 6B4B     	   .byte 'k','K'
 112 0bfe 6C4C     	   .byte 'l','L'
 113 0c00 6D4D     	   .byte 'm','M'
 114 0c02 6E4E     	   .byte 'n','N'
 115 0c04 6F4F     	   .byte 'o','O'
 116 0c06 7050     	   .byte 'p','P'
 117 0c08 7151     	   .byte 'q','Q'
 118 0c0a 7252     	   .byte 'r','R'
 119 0c0c 7353     	   .byte 's','S'
 120 0c0e 7454     	   .byte 't','T'
 121 0c10 7555     	   .byte 'u','U'
 122 0c12 7656     	   .byte 'v','V'
 123 0c14 7757     	   .byte 'w','W'
 124 0c16 7858     	   .byte 'x','X'
 125 0c18 7959     	   .byte 'y','Y'
 126 0c1a 7A5A     	   .byte 'z','Z'
 127 0c1c 3121     	   .byte '1','!'
 128 0c1e 3240     	   .byte '2','@'
 129 0c20 3323     	   .byte '3','#'
ARM GAS  forth.s 			page 45


 130 0c22 3424     	   .byte '4','$'
 131 0c24 3525     	   .byte '5','%'
 132 0c26 365E     	   .byte '6','^'
 133 0c28 3726     	   .byte '7','&'
 134 0c2a 382A     	   .byte '8','*'
 135 0c2c 3928     	   .byte '9','('
 136 0c2e 3029     	   .byte '0',')'
 137 0c30 2D5F     	   .byte '-','_'
 138 0c32 3D2B     	   .byte '=','+'
 139 0c34 607E     	   .byte '`','~'
 140 0c36 2722     	   .byte '\'','"'
 141 0c38 2C3C     	   .byte ',','<'
 142 0c3a 2E3E     	   .byte '.','>'
 143 0c3c 2F3F     	   .byte '/','?'
 144 0c3e 5C7C     	   .byte '\\','|'
 145 0c40 3B3A     	   .byte ';',':'
 146 0c42 5B7B     	   .byte '[','{'
 147 0c44 5D7D     	   .byte ']','}'
 148 0c46 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 0c48 315C     	   .byte '1','\\'
 153 0c4a 3240     	   .byte '2','@'
 154 0c4c 332F     	   .byte '3','/'
 155              	//   .byte '4','�'
 156              	//   .byte '5','�'
 157 0c4e 363F     	   .byte '6','?'
 158 0c50 377C     	   .byte '7','|'
 159              	//   .byte '8','�'
 160 0c52 397B     	   .byte '9','{'
 161 0c54 307D     	   .byte '0','}'
 162              	//   .byte '-','�'
 163              	//   .byte '=','�'
 164 0c56 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 0c58 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 0c5a 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 0c5c 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 0c5e 11A3     	    .byte SC_RALT,VK_RALT
 172 0c60 2F97     	    .byte SC_APPS,VK_APPS
 173 0c62 758D     	    .byte SC_UP,VK_UP
 174 0c64 728E     	    .byte SC_DOWN,VK_DOWN
 175 0c66 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 0c68 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 0c6a 7095     	    .byte SC_INSERT,VK_INSERT
 178 0c6c 6C91     	    .byte SC_HOME,VK_HOME
 179 0c6e 7D93     	    .byte SC_PGUP,VK_PGUP
 180 0c70 7A94     	    .byte SC_PGDN,VK_PGDN
 181 0c72 717F     	    .byte SC_DEL,VK_DELETE
 182 0c74 6992     	    .byte SC_END,VK_END
 183 0c76 4A2F     	    .byte SC_KPDIV,'/'
 184 0c78 5A0D     	    .byte SC_KPENTER,'\r'
 185 0c7a 1200     	    .byte 0x12,0
 186 0c7c 7C00     	    .byte 0x7c,0
ARM GAS  forth.s 			page 46


 187 0c7e 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 0c80 1FA0     	   .byte SC_LGUI,VK_LGUI
 193 0c82 14A1     	   .byte SC_RCTRL,VK_RCTRL
 194 0c84 27A2     	   .byte SC_RGUI,VK_RGUI
 195 0c86 11A3     	   .byte SC_RALT,VK_RALT
 196 0c88 2F97     	   .byte SC_APPS,VK_APPS
 197 0c8a 7095     	   .byte SC_INSERT,VK_INSERT
 198 0c8c 6C91     	   .byte SC_HOME,VK_HOME
 199 0c8e 7D93     	   .byte SC_PGUP,VK_PGUP
 200 0c90 717F     	   .byte SC_DEL,VK_DELETE
 201 0c92 6992     	   .byte SC_END,VK_END
 202 0c94 7A94     	   .byte SC_PGDN,VK_PGDN
 203 0c96 758D     	   .byte SC_UP,VK_UP
 204 0c98 6B8F     	   .byte SC_LEFT,VK_LEFT
 205 0c9a 728E     	   .byte SC_DOWN,VK_DOWN
 206 0c9c 7490     	   .byte SC_RIGHT,VK_RIGHT
 207 0c9e 4A2F     	   .byte SC_KPDIV,'/'
 208 0ca0 5A0D     	   .byte SC_ENTER,VK_ENTER
 209 0ca2 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 210 0ca4 149D     	   .byte SC_LCTRL,VK_LCTRL
 211 0ca6 119E     	   .byte SC_LALT,VK_LALT
 212 0ca8 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 213 0caa 5A0D     	   .byte SC_KPENTER,VK_ENTER
 214 0cac 761B     	   .byte SC_ESC,VK_ESC
 215 0cae 779A     	   .byte SC_NUM,VK_NLOCK
 216 0cb0 589B     	   .byte SC_CAPS,VK_CLOCK
 217 0cb2 0000     	   .byte 0,0
 218              	
 219              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
ARM GAS  forth.s 			page 47


  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 12 
  68              	    .equ KBD_CLOCK_PIN, 11
  69              	
  70              	/**********************************
  71              	    kbd_isr
  72              	    interrupt service routine 
  73              	    EXTI0 connected to keyboard 
  74              	    clock signal and triggered 
  75              	    on falling edge 
  76              	**********************************/
  77              	    _GBL_FUNC kbd_isr 
  78 0cb4 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  78      C4F20102 
  79 0cbc 4FF40060 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  80 0cc0 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  81 0cc2 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
  81      C4F20203 
  82 0cca D4F86E00 	    ldr r0,[UP,#KBD_FLAGS]
  83 0cce 10F0020F 	    tst r0,#KBD_TX 
  84 0cd2 40F08480 	    bne send_bit  
  85 0cd6 188A     	    ldrh r0,[r3,#GPIO_IDR]
  86 0cd8 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  87 0cdc 01F10102 	    add r2,r1,#1
  88 0ce0 84F86C20 	    strb r2,[UP,#KBD_BITCNTR]
  89 0ce4 0029     	    cmp r1,#0
  90 0ce6 15D0     	    beq start_bit 
  91 0ce8 0929     	    cmp r1,#9 
  92 0cea 25D0     	    beq parity_bit 
  93 0cec 0A29     	    cmp r1,#10 
  94 0cee 2DD0     	    beq stop_bit 
  95              	    // data bit 
  96 0cf0 94F86D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  97 0cf4 4FEA5202 	    lsr r2,#1 
  98 0cf8 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
  99 0cfc 07D0     	    beq 1f 
 100 0cfe 42F08002 	    orr r2,#(1<<7)
 101 0d02 94F86F00 	    ldrb r0,[UP,#KBD_PARITY]
 102 0d06 00F10100 	    add r0,#1 
 103 0d0a 84F86F00 	    strb r0,[UP,#KBD_PARITY]
 104 0d0e 84F86D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 105 0d12 63E0     	    b 9f         
 106              	start_bit:
 107 0d14 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) 
 108 0d18 60D1     	    bne 9f // not a start bit 
 109 0d1a 80EA0000 	    eor r0,r0 
 110 0d1e 84F86D00 	    strb r0,[UP,#KBD_SHIFTER]
 111 0d22 84F86F00 	    strb r0,[UP,#KBD_PARITY]
 112 0d26 94F86E00 	    ldrb r0,[UP,#KBD_FLAGS]
 113 0d2a 6FF00101 	    mvn r1,#1
 114 0d2e 00EA0100 	    and r0,r1 // clear error flag 
 115 0d32 84F86E00 	    strb r0,[UP,#KBD_FLAGS]
 116 0d36 51E0     	    b 9f 
ARM GAS  forth.s 			page 48


 117              	parity_bit:
 118 0d38 94F86F10 	    ldrb r1,[UP,#KBD_PARITY]
 119 0d3c 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 120 0d40 4CD0     	    beq 9f  
 121 0d42 01F10101 	    add r1,#1 
 122 0d46 84F86F10 	    strb r1,[UP,#KBD_PARITY]  
 123 0d4a 47E0     	    b 9f      
 124              	stop_bit:
 125 0d4c 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 126 0d50 40D0     	    beq 8f // error stop bit expected 
 127 0d52 94F86F10 	    ldrb r1,[UP,#KBD_PARITY]
 128 0d56 11F0010F 	    tst r1,#1 
 129 0d5a 3BD0     	    beq 8f // error parity
 130 0d5c 94F86D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 131 0d60 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 132 0d64 E028     	    cmp r0,#XT_KEY
 133 0d66 04D1     	    bne 1f
 134 0d68 41F04001 	    orr r1,#KBD_F_XT
 135 0d6c 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 136 0d70 30E0     	    b 8f  
 137 0d72 11F0800F 	1:  tst r1,#KBD_F_REL
 138 0d76 14D0     	    beq store_code
 139 0d78 5828     	    cmp r0,#SC_CAPS
 140 0d7a 04D1     	    bne 1f
 141 0d7c 81F00401 	    eor r1,#KBD_F_CAPS
 142 0d80 41F00101 	    orr r1,#KBD_F_CTGL 
 143 0d84 06E0     	    b 2f 
 144 0d86 00B500F0 	1:  _CALL do_async_key 
 144      74F85DF8 
 144      04EB
 145 0d90 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 146 0d94 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 147 0d98 01EA0201 	    and r1,r2
 148 0d9c 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 149 0da0 18E0     	    b 8f
 150              	// store code in queue 
 151              	store_code:
 152 0da2 F028     	    cmp r0,#KEY_REL
 153 0da4 04D1     	    bne 1f
 154              	// set release flags 
 155 0da6 41F08001 	    orr r1,#KBD_F_REL 
 156 0daa 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 157 0dae 11E0     	    b 8f     
 158 0db0 0146     	1:  mov r1,r0 
 159 0db2 00B500F0 	    _CALL do_async_key 
 159      5EF85DF8 
 159      04EB
 160 0dbc 0AD1     	    bne 8f // was async key 
 161 0dbe D4F88400 	    ldr r0,[UP,#KBD_QTAIL]
 162 0dc2 04F17002 	    add r2,UP,#KBD_QUEUE
 163 0dc6 1154     	    strb r1,[r2,r0]
 164 0dc8 00F10100 	    add r0,#1
 165 0dcc 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 166 0dd0 84F88400 	    strb r0,[UP,#KBD_QTAIL]
 167 0dd4 80EA0000 	8:  eor r0,r0 
 168 0dd8 A4F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 169 0ddc 7047     	9:  _RET 
ARM GAS  forth.s 			page 49


 170              	
 171              	/* send bit to keyboard 
 172              	 registers usage:
 173              	    r0 bit shifter 
 174              	    r1 bit counter 
 175              	    r2 output bit 
 176              	    r3 GPIOA_BASE_ADR 
 177              	*/
 178              	send_bit:
 179 0dde 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 180 0de2 01F10100 	    add r0,r1,#1
 181 0de6 84F86C00 	    strb r0,[UP,#KBD_BITCNTR]
 182 0dea 94F86D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 183 0dee 4FF48052 	    mov r2,#(1<<KBD_DATA_PIN)
 184              	//    cbz r1,9f 
 185 0df2 0829     	1:  cmp r1,#8 
 186 0df4 15D0     	    beq send_parity 
 187 0df6 0929     	    cmp r1,#9 
 188 0df8 1CD0     	    beq send_stop
 189 0dfa 0A29     	    cmp r1,#10
 190 0dfc 21D0     	    beq rx_ack_bit  
 191              	// data bits
 192 0dfe 10F0010F 	    tst r0,#1
 193 0e02 4FEA5000 	    lsr r0,#1
 194 0e06 84F86D00 	    strb r0,[UP,#KBD_SHIFTER]
 195 0e0a 02D1     	    bne 1f 
 196 0e0c 4FEA0242 	    lsl r2,#16
 197 0e10 05E0     	    b 2f  
 198 0e12 94F86F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 199 0e16 00F10100 	    add r0,#1 
 200 0e1a 84F86F00 	    strb r0,[UP,#KBD_PARITY]
 201 0e1e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 202 0e20 1EE0     	    b 9f 
 203              	send_parity:
 204 0e22 94F86F00 	    ldrb r0,[UP,#KBD_PARITY]
 205 0e26 10F0010F 	    tst r0,#1
 206 0e2a 01D0     	    beq 1f 
 207 0e2c 4FEA0242 	    lsl r2,#16
 208 0e30 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 209 0e32 15E0     	    b 9f 
 210              	send_stop:
 211              	//    str r2,[r3,#GPIO_BSRR]
 212              	// release data pin 
 213 0e34 6FF04070 	    mvn r0,#(3<<(2*KBD_DATA_PIN))
 214 0e38 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 0e3a 01EA0001 	    and r1,r0 
 216 0e3e 1960     	    str r1,[r3,#GPIO_MODER]
 217 0e40 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 0e42 94F86E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 0e46 6FF00201 	    mvn r1,#KBD_TX 
 221 0e4a 00EA0100 	    and r0,r1 
 222 0e4e 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 0e50 11F4805F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 0e54 84F86E00 	    strb r0,[UP,#KBD_FLAGS]
 225 0e58 80EA0000 	    eor r0,r0 
 226 0e5c 84F86C00 	    strb r0,[UP,#KBD_BITCNTR]     
ARM GAS  forth.s 			page 50


 227 0e60 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 0e62 02B4     	    push {r1}
 238 0e64 F549     	    ldr r1,=async_keys
 239 0e66 00B500F0 	    _CALL table_scan
 239      7DF85DF8 
 239      04EB
 240 0e70 02BC     	    pop {r1}
 241 0e72 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 0e74 00B5FFF7 	    _CALL is_async_key  
 254      F4FF5DF8 
 254      04EB
 255 0e7e FF28     	    cmp r0,#255
 256 0e80 01D1     	    bne set_async_key 
 257 0e82 0020     	    movs r0,#0 
 258 0e84 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 0e86 06B4     	    push {r1,r2}
 262 0e88 94F86E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 0e8c EC49     	    ldr r1,=async_jump 
 264 0e8e D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 0e92 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 0e96 04E0     	    b set_reset
 268              	ctrl_key:
 269 0e98 4FF01000 	    mov r0,#KBD_F_CTRL
 270 0e9c 01E0     	    b set_reset 
 271              	alt_key:
 272 0e9e 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 0ea2 12F0800F 	    tst r2,#KBD_F_REL 
 275 0ea6 04D0     	    beq 1f 
 276 0ea8 6FEA0000 	    mvn r0,r0
 277 0eac 02EA0002 	    and r2,r0
 278 0eb0 01E0     	    b 2f
 279 0eb2 42EA0002 	1:  orr r2,r0 
ARM GAS  forth.s 			page 51


 280 0eb6 84F86E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 0eba 5FF0FF30 	    movs r0,#-1
 282 0ebe 06BC     	9:  pop {r1,r2}
 283 0ec0 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 0ec2 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 0ec4 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 0ec6 1401     	    .byte SC_LCTRL,1  // left control 
 290 0ec8 1401     	    .byte SC_RCTRL,1  // right control 
 291 0eca 1102     	    .byte SC_LALT,2  // left alt 
 292 0ecc 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 0ece 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 0ed0 00       	    .byte 0 // shift  key 
 297 0ed1 03       	    .byte (ctrl_key-shift_key)/2
 298 0ed2 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 0ed3 00       	    _GBL_FUNC kbd_init 
 308              	// interrupt triggered on falling edge 
 309 0ed4 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 309      C4F20102 
 310 0edc 4FF40060 	   mov r0,#(1<<KBD_CLOCK_PIN)
 311 0ee0 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 312 0ee2 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 313 0ee4 80EA0000 	   eor r0,r0 
 314 0ee8 C4F88000 	   str r0,[UP,#KBD_QHEAD]
 315 0eec C4F88400 	   str r0,[UP,#KBD_QTAIL]
 316              	// enable interrupt EXTI15_10_IRQ in NVIC 
 317 0ef0 4FF02800 	   mov r0,#EXTI15_10_IRQ
 318 0ef4 4FF00101 	   mov r1,#1 
 319 0ef8 00B5FFF7 	   _CALL nvic_set_priority
 319      1FFA5DF8 
 319      04EB
 320 0f02 4FF02800 	   mov r0,#EXTI15_10_IRQ
 321 0f06 00B5FFF7 	   _CALL nvic_enable_irq 
 321      31FA5DF8 
 321      04EB
 322 0f10 7047     	   _RET 
 323              	
 324              	// KEY-ASYNC ( -- n )
 325              	// return async key flags 
 326 0f12 F20A0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 326      094B4559 
 326      2D415359 
 326      4E43
 327 0f20 47F8046D 	    _PUSH 
 328 0f24 94F86E60 	    ldrb TOS,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 52


 329 0f28 06F0FC06 	    and TOS,#0xFC  
 330 0f2c A0E1     	    _NEXT 
 331              	
 332              	// KEYCODE 
 333              	// extract keyboard scancode from queue.
 334              	// output:
 335              	//        T0  keycode | 0 
 336              	keycode: 
 337 0f2e 0EB4     	    push {T1,T2,T3}
 338 0f30 80EA0000 	    eor T0,T0  
 339 0f34 04F17003 	    add T3,UP,#KBD_QUEUE
 340 0f38 D4F88010 	    ldr T1,[UP,#KBD_QHEAD]
 341 0f3c D4F88420 	    ldr T2,[UP,#KBD_QTAIL]
 342 0f40 9142     	    cmp T1,T2 
 343 0f42 06D0     	    beq 2f  
 344 0f44 585C     	    ldrb T0,[T3,T1]
 345 0f46 01F10101 	    add T1,#1 
 346 0f4a 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 347 0f4e C4F88010 	    str T1,[UP,#KBD_QHEAD]
 348 0f52 0EBC     	2:  pop {T1,T2,T3}
 349 0f54 7047     	    _RET 
 350              	
 351              	wait_code:
 352 0f56 00B5FFF7 	    _CALL keycode 
 352      E9FF5DF8 
 352      04EB
 353 0f60 0000     	    movs T0,T0
 354 0f62 F8D0     	    beq wait_code  
 355 0f64 7047     	    _RET 
 356              	
 357              	// translation table scan 
 358              	// input:
 359              	//      T0   target code 
 360              	//      T1   table pointer 
 361              	// output: 
 362              	//        T0   0 | code
 363              	//        Z flag  
 364              	table_scan:
 365 0f66 04B4     	    push {T2}
 366 0f68 11F8012B 	1:  ldrb T2,[T1],#1
 367 0f6c 22B1     	    cbz T2,2f 
 368 0f6e 8242     	    cmp T2,T0
 369 0f70 02D0     	    beq 2f 
 370 0f72 01F10101 	    add T1,#1 
 371 0f76 F7E7     	    b 1b 
 372 0f78 0878     	2:  ldrb T0,[T1]
 373 0f7a 0000     	    movs T0,T0 // set/reset zero flag 
 374 0f7c 04BC     	9:  pop {T2}
 375 0f7e 7047     	    _RET 
 376              	
 377              	// INKEY ( -- 0|key )
 378              	// get a character from keyboard
 379              	// don't wait for it.
 380 0f80 160F0000 	    _HEADER INKEY,5,"INKEY"
 380      05494E4B 
 380      455900BF 
 381 0f8c 47F8046D 	    _PUSH 
ARM GAS  forth.s 			page 53


 382 0f90 86EA0606 	    eor TOS,TOS 
 383 0f94 AB49     	    ldr T1,=sc_ascii // translation table
 384 0f96 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 385 0f9a 4FF04002 	    mov T2,#KBD_F_XT 
 386 0f9e 1042     	    tst T0,T2
 387 0fa0 00D0     	    beq 1f
 388 0fa2 A949     	    ldr T1,=extended // extended code translation
 389 0fa4 00B5FFF7 	1:  _CALL keycode
 389      C2FF5DF8 
 389      04EB
 390 0fae 60B1     	    cbz T0,inkey_exit
 391 0fb0 E128     	    cmp T0,#XT2_KEY // pause 
 392 0fb2 0BD0     	    beq pause_key
 393 0fb4 00B5FFF7 	    _CALL table_scan 
 393      D6FF5DF8 
 393      04EB
 394 0fbe 0646     	    mov TOS,T0
 395 0fc0 00B500F0 	    _CALL do_modifiers
 395      0DF85DF8 
 395      04EB
 396              	inkey_exit:     
 397 0fca 51E1     	    _NEXT
 398              	pause_key: // discard next 7 codes 
 399 0fcc 4FF00701 	    mov T1,#7 
 400 0fd0 00B5FFF7 	1:  _CALL wait_code 
 400      C0FF5DF8 
 400      04EB
 401 0fda 0139     	    subs T1,#1
 402 0fdc F8D1     	    bne 1b 
 403 0fde 47E1     	    _NEXT 
 404              	
 405              	// check for modifiers flags 
 406              	// and process it.
 407              	do_modifiers:
 408 0fe0 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 409 0fe4 10F0080F 	    tst T0,#KBD_F_SHIFT 
 410 0fe8 05D1     	    bne shift_down 
 411 0fea 10F0200F 	    tst T0,#KBD_F_ALT  
 412 0fee 05D1     	    bne altchar_down 
 413 0ff0 10F0100F 	    tst T0,#KBD_F_CTRL
 414 0ff4 0DE0     	    b 9f 
 415              	shift_down:
 416 0ff6 3046     	    mov T0,TOS 
 417 0ff8 9449     	    ldr T1,=shifted 
 418 0ffa 04E0     	    b 8f 
 419              	altchar_down:
 420 0ffc 3046     	    mov T0,TOS 
 421 0ffe 9449     	    ldr T1,=altchar
 422 1000 01E0     	    b 8f
 423              	ctrl_down:
 424 1002 3046     	    mov T0,TOS 
 425 1004 9349     	    ldr T1,=controls 
 426 1006 00B5FFF7 	8:  _CALL table_scan
 426      ADFF5DF8 
 426      04EB
 427 1010 0646     	    mov TOS,T0
 428 1012 00B500F0 	9:  _CALL do_capslock 
ARM GAS  forth.s 			page 54


 428      03F85DF8 
 428      04EB
 429 101c 7047     	    _RET 
 430              	
 431              	do_capslock:
 432 101e 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 433 1022 10F0040F 	    tst T0,#KBD_F_CAPS 
 434 1026 0BD0     	    beq 9f 
 435 1028 412E     	    cmp TOS,#'A'
 436 102a 09D4     	    bmi 9f 
 437 102c 5B2E     	    cmp TOS,#'Z'+1 
 438 102e 03D4     	    bmi 3f 
 439 1030 612E     	    cmp TOS,#'a'
 440 1032 05D4     	    bmi 9f 
 441 1034 7B2E     	    cmp TOS,#'z'+1
 442 1036 03D5     	    bpl 9f 
 443 1038 4FF02000 	3:  mov T0,#(1<<5)
 444 103c 86EA0006 	    eor TOS,T0 
 445 1040 7047     	9:  _RET 
 446              	
 447              	
 448              	
 449              	/***************************
 450              	 send byte do keyboard
 451              	 input:
 452              	    r0  byte to send 
 453              	 use: 
 454              	    r1,r2 temp 
 455              	    r3 GPIOA_BASE_ADR 
 456              	***************************/
 457              	kbd_send:
 458 1042 0FB4     	    push {r0,r1,r2,r3}
 459              	// wait pre-video phase
 460              	// for least video output disturbance
 461 1044 206E     	1:  ldr r0,[UP,#VID_STATE]
 462 1046 0128     	    cmp r0,ST_PREVID 
 463 1048 FCD1     	    bne 1b
 464              	// disable video interrupt 
 465 104a 4FF01D00 	    mov r0,#TIM3_IRQ 
 466 104e 00B5FFF7 	    _CALL nvic_disable_irq
 466      A2F95DF8 
 466      04EB
 467              	// take control of keyboard clock line  
 468 1058 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
 468      C4F20203 
 469 1060 1846     	    mov r0,r3 
 470 1062 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 471 1066 4FF01102 	    mov r2,#OUTPUT_OD
 472 106a 00B5FFF7 	    _CALL gpio_config 
 472      ABF95DF8 
 472      04EB
 473 1074 1846     	    mov r0,r3 
 474 1076 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 475 107a 82EA0202 	    eor r2,r2 
 476 107e 00B5FFF7 	    _CALL gpio_out 
 476      F7F95DF8 
 476      04EB
ARM GAS  forth.s 			page 55


 477              	// delay to hold clock line to 0 for 150µsec     
 478 1088 4FF4E150 	    mov r0,#150*48
 479 108c 0138     	1:  subs r0,#1 
 480 108e FDD1     	    bne 1b
 481 1090 01BC     	    pop {r0}
 482 1092 84F86D00 	    strb r0,[UP,#KBD_SHIFTER]
 483 1096 D4F86E00 	    ldr r0,[UP,#KBD_FLAGS]
 484 109a 40F00200 	    orr r0,#KBD_TX 
 485 109e 84F86E00 	    strb r0,[UP,#KBD_FLAGS]
 486 10a2 80EA0000 	    eor r0,r0 
 487 10a6 84F86C00 	    strb r0,[UP,#KBD_BITCNTR]
 488 10aa 84F86F00 	    strb r0,[UP,#KBD_PARITY]
 489              	// take control of data line 
 490              	// and put it to 0 for start bit.    
 491 10ae 1846     	    mov r0,r3 
 492 10b0 4FF00C01 	    mov r1,#KBD_DATA_PIN  
 493 10b4 4FF01102 	    mov r2,#OUTPUT_OD 
 494 10b8 00B5FFF7 	    _CALL gpio_config 
 494      84F95DF8 
 494      04EB
 495 10c2 1846     	    mov r0,r3 
 496 10c4 4FF00C01 	    mov r1,#KBD_DATA_PIN 
 497 10c8 82EA0202 	    eor r2,r2 
 498 10cc 00B5FFF7 	    _CALL gpio_out
 498      D0F95DF8 
 498      04EB
 499              	// release clock line 
 500 10d6 1846     	    mov r0,r3 
 501 10d8 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 502 10dc 4FF00002 	    mov r2,#INPUT_FLOAT
 503 10e0 00B5FFF7 	    _CALL gpio_config
 503      70F95DF8 
 503      04EB
 504              	// wait send completed 
 505 10ea 94F86E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 506 10ee 10F0020F 	    tst r0,#KBD_TX
 507 10f2 FAD1     	    bne 2b 
 508              	// enable video interrupt     
 509 10f4 4FF01D00 	    mov r0,#TIM3_IRQ
 510 10f8 00B5FFF7 	    _CALL nvic_enable_irq
 510      38F95DF8 
 510      04EB
 511 1102 0EBC     	    pop {r1,r2,r3}
 512 1104 7047     	    _RET 
 513              	
 514              	 
 515              	// flush keyboard queue 
 516              	kbd_clear_queue:
 517 1106 80EA0000 	    eor T0,T0 
 518 110a C4F88000 	    str T0,[UP,#KBD_QHEAD]
 519 110e C4F88400 	    str T0,[UP,#KBD_QTAIL]
 520 1112 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 521 1116 6FF00301 	    mvn T1,#3
 522 111a 00EA0100 	    and T0,T1 
 523 111e 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 524 1122 7047     	    _RET 
 525              	
ARM GAS  forth.s 			page 56


 526              	// KBD-RST ( -- c )
 527              	// send a reset command to keyboard
 528 1124 840F0000 	    _HEADER KBD_RST,7,"KBD-RST"
 528      074B4244 
 528      2D525354 
 529 1130 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 530 1134 00B5FFF7 	    _CALL kbd_send
 530      84FF5DF8 
 530      04EB
 531 113e 00B5FFF7 	    _CALL kbd_clear_queue
 531      E1FF5DF8 
 531      04EB
 532 1148 00B5FFF7 	    _CALL wait_code 
 532      04FF5DF8 
 532      04EB
 533 1152 FE28     	    cmp r0,KBD_CMD_RESEND
 534 1154 ECD0     	    beq 1b 
 535 1156 4FF06400 	    mov T0,#100
 536 115a E060     	    str T0,[UP,#CD_TIMER]
 537 115c E068     	2:  ldr T0,[UP,#CD_TIMER]
 538 115e 0028     	    cmp T0,#0 
 539 1160 FCD1     	    bne 2b 
 540 1162 00B5FFF7 	2:  _CALL wait_code 
 540      F7FE5DF8 
 540      04EB
 541 116c 47F8046D 	    _PUSH 
 542 1170 0646     	    mov TOS,T0  
 543 1172 7DE0     	    _NEXT 
 544              	
 545              	// KBD-LED ( c -- )
 546              	// send command to control
 547              	// keyboard LEDS 
 548 1174 28110000 	    _HEADER KBD_LED,7,"KBD-LED"
 548      074B4244 
 548      2D4C4544 
 549 1180 00B5FFF7 	1:  _CALL kbd_clear_queue
 549      C0FF5DF8 
 549      04EB
 550 118a 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 551 118e 00B5FFF7 	    _CALL kbd_send
 551      57FF5DF8 
 551      04EB
 552 1198 00B5FFF7 	2:  _CALL wait_code 
 552      DCFE5DF8 
 552      04EB
 553 11a2 FE28     	    cmp T0,#KBD_CMD_RESEND
 554 11a4 ECD0     	    beq 1b
 555 11a6 FA28     	    cmp T0,#KBD_ACK  
 556 11a8 F6D1     	    bne 2b 
 557 11aa 3046     	2:  mov T0,TOS 
 558 11ac 00F00700 	    and T0,#7 
 559 11b0 00B5FFF7 	    _CALL kbd_send 
 559      46FF5DF8 
 559      04EB
 560 11ba 00B5FFF7 	3:  _CALL wait_code 
 560      CBFE5DF8 
 560      04EB
ARM GAS  forth.s 			page 57


 561 11c4 FE28     	    cmp T0,#KBD_CMD_RESEND 
 562 11c6 F0D0     	    beq 2b
 563 11c8 FA28     	    cmp T0,#KBD_ACK 
 564 11ca F6D1     	    bne 3b  
 565 11cc 57F8046B 	    _POP 
 566 11d0 4EE0     	    _NEXT 
 567              	
 568              	// CAPS-LED ( -- )
 569              	// synch capslock LED
 570              	// to KBD_F_CAPS 
 571 11d2 78110000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 571      08434150 
 571      532D4C45 
 571      4400
 572 11e0 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 573 11e4 10F0010F 	    tst T0,#1
 574 11e8 00D1     	    bne 1f 
 575 11ea 41E0     	    _NEXT 
 576 11ec 47F8046D 	1: _PUSH 
 577 11f0 6FF00101 	    mvn T1,#1 
 578 11f4 00EA0100 	    and T0,T1 
 579 11f8 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 580 11fc 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 581 1200 48F804CD 	    _CALL_COLWORD 1f
 581      DFF850C0 
 581      32E0
 582 120a 81110000 	1:  _ADR KBD_LED       
 583 120e 77120000 	    _UNNEST
 584              	
 585              	
 586              	// WAIT-KEY ( -- c )
 587              	// wait for keyboard key 
 588 1212 D6110000 	    _HEADER WKEY,8,"WAIT-KEY"
 588      08574149 
 588      542D4B45 
 588      5900
 589 1220 504700BF 	    _NEST
 590 1224 E1110000 	1:  _ADR CAPS_LED  
 591 1228 8D0F0000 	    _ADR INKEY 
 592 122c 51170000 	    _ADR QDUP 
 593 1230 8B140000 	    _QBRAN 1b  
 593      24120000 
 594 1238 77120000 	    _UNNEST 
 594      C20E0000 
 594      D00E0000 
 594      340B0000 
 594      580C0000 
   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
ARM GAS  forth.s 			page 58


  11              	*	R12	is used as IP , inner interpreter address pointer 
  12              	*   UP  IS used AS WP 
  13              	*	WP 	is used as UP , working register 
  14              	*	R8 	is used as link register by _NEST macro it is initialized 
  15              	*  		NEST address and MUST BE PRESERVED.
  16              	*
  17              	*     Use USART1 for console I/O
  18              	*     port config: 115200 8N1 
  19              	*     TX on  PA9,  RX on PA10  
  20              	*
  21              	*     eForth is executed from flash, not copied to RAM
  22              	*     eForth use main stack R13 as return stack (thread stack not used) 
  23              	*
  24              	*     Forth return stack is at end of RAM (addr=0x200020000) and reserve 512 bytes
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Version 5.02, 09oct04cht
  42              	*	fOR ADuC702x from Analog Devices
  43              	*	Version 6.01, 10apr08cht a
  44              	*	.p2align 2 to at91sam7x256
  45              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  46              	*	Running under uVision3 RealView from Keil
  47              	*	Version 7.01, 29jun14cht
  48              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  49              	*	.p2aligned to eForth 2 Model
  50              	*	Assembled to flash memory and executed therefrom.
  51              	*	Version 7.10, 30jun14cht
  52              	*	Flash memory mapped to Page 0 where codes are executed
  53              	*	Version 7.20, 02jul14cht
  54              	*	Irreducible Complexity
  55              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  56              	*	TURNKEY saves current application from RAM to flash.
  57              	*********************************************************/
  58              	
  59              		.syntax unified
  60              		.cpu cortex-m4
  61              		.fpu softvfp  
  62              		.thumb
  63              	
  64              		.include "stm32f411ce.inc"
  65              		
  66              		.section .text, "ax", %progbits
  67              	
ARM GAS  forth.s 			page 59


  68              	/***********************************
  69              	//  Start of eForth system 
  70              	***********************************/
  71              	
  72              		.p2align 2 
  73              	
  74              	// PUSH TOS, to be used in colon definition 
  75              	TPUSH:
  76 125c 47F8046D 		_PUSH
  77 1260 06E0     		_NEXT
  78              	
  79              	// POP TOS, to be used in colon defintion  
  80              	TPOP:
  81 1262 57F8046B 		_POP 
  82 1266 03E0     		_NEXT
  83              	
  84              	// hi level word enter 
  85              	NEST: 
  86 1268 48F804CD 		STMFD	RSP!,{IP}
  87 126c 05F1030C 		ADD IP,WP,#3
  88              	// inner interprer
  89              	INEXT: 
  90 1270 5CF8045B 		LDR WP,[IP],#4 
  91 1274 2847     		BX WP  
  92              	UNNEST:
  93 1276 58F804CB 		LDMFD RSP!,{IP}
  94 127a 5CF8045B 		LDR WP,[IP],#4 
  95 127e 2847     		BX WP  
  96              	
  97              		.p2align 2 
  98              	
  99              	// compile "BX 	R8" 
 100              	// this is the only way 
 101              	// a colon defintion in RAM 
 102              	// can jump to NEST
 103              	// R8 is initialized to NEST address 
 104              	// and must be preserved   
 105              	COMPI_NEST:
 106 1280 04F13C01 		add T1,UP,#USER_CTOP 
 107 1284 0968     		ldr T1,[T1]
 108 1286 44F25072 		mov T2,#0x4700+(10<<3)
 109 128a 21F8022B 		strh T2,[T1],#2
 110 128e 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 111 1292 21F8022B 		strh T2,[T1],#2 
 112 1296 04F13C02 		add T2,UP,#USER_CTOP 
 113 129a 1160     		str T1,[T2]
 114 129c E8E7     		_NEXT  
 115              	
 116              	
 117              	// RANDOM ( n+ -- {0..n+ - 1} )
 118              	// return pseudo random number 
 119              	// REF: https://en.wikipedia.org/wiki/Xorshift
 120              	
 121              	//	.word LINK 
 122              	// GET-IP ( n - c )
 123              	// return interrupt priority 
 124 129e 16120000 		_HEADER GETIP,6,"GET-IP" 
ARM GAS  forth.s 			page 60


 124      06474554 
 124      2D495000 
 124      00BF
 125 12ac 504700BF 		_NEST 
 126 12b0 7D150000 		_ADR DUPP 
 127 12b4 B1150000 		_ADR ZLESS
 128 12b8 8B140000 		_QBRAN 1f 
 128      E8120000 
 129 12c0 49140000 		_DOLIT 15
 129      0F000000 
 130 12c8 C1150000 		_ADR ANDD
 131 12cc 49140000 		_DOLIT 4
 131      04000000 
 132 12d4 51160000 		_ADR SUBB  
 133 12d8 49140000 		_DOLIT 0xE000ED18 
 133      18ED00E0 
 134 12e0 9F140000 		_BRAN 2f 
 134      F0120000 
 135 12e8 49140000 	1:	_DOLIT 0xE000E400 
 135      00E400E0 
 136 12f0 41160000 	2:	_ADR PLUS 
 137 12f4 F1140000 		_ADR CAT
 138 12f8 49140000 		_DOLIT 4 
 138      04000000 
 139 1300 19160000 		_ADR RSHIFT 
 140 1304 77120000 		_UNNEST 
 141              	
 142 1308 A2120000 		.word LINK 
 143 130c 06       	_RAND: .byte 6
 144 130d 52414E44 		.ascii "RANDOM"
 144      4F4D
 145 1313 00       		.p2align 2 
 146              	RAND:
 147 1314 504700BF 		_NEST
 148 1318 09180000 		_ADR ABSS   
 149 131c 49190000 		_ADR SEED 
 150 1320 D1140000 		_ADR AT 
 151 1324 7D150000 		_ADR DUPP 
 152 1328 49140000 		_DOLIT 13
 152      0D000000 
 153 1330 31160000 		_ADR LSHIFT 
 154 1334 E9150000 		_ADR XORR  
 155 1338 7D150000 		_ADR DUPP 
 156 133c 49140000 		_DOLIT 17 
 156      11000000 
 157 1344 19160000 		_ADR RSHIFT 
 158 1348 E9150000 		_ADR XORR 
 159 134c 7D150000 		_ADR DUPP
 160 1350 49140000 		_DOLIT 5 
 160      05000000 
 161 1358 31160000 		_ADR LSHIFT 
 162 135c E9150000 		_ADR XORR  
 163 1360 7D150000 		_ADR DUPP 
 164 1364 49190000 		_ADR SEED 
 165 1368 BD140000 		_ADR STORE 
 166 136c 49140000 		_DOLIT 0x7FFFFFFF
 166      FFFFFF7F 
ARM GAS  forth.s 			page 61


 167 1374 C1150000 		_ADR ANDD 
 168 1378 8D150000 		_ADR SWAP 
 169 137c B51B0000 		_ADR MODD 
 170 1380 77120000 		_UNNEST 
 171              	
 172              	
 173              	// PAUSE ( u -- ) 
 174              	// suspend execution for u milliseconds
 175 1384 0C130000 		.word _RAND
 176 1388 05       	_PAUSE: .byte 5
 177 1389 50415553 		.ascii "PAUSE"
 177      45
 178 138e 00BF     		.p2align 2
 179              	PAUSE:
 180 1390 504700BF 		_NEST 
 181 1394 71190000 		_ADR TIMER 
 182 1398 BD140000 		_ADR STORE 
 183              	PAUSE_LOOP:
 184 139c 71190000 		_ADR TIMER 
 185 13a0 D1140000 		_ADR AT 
 186 13a4 8B140000 		_QBRAN PAUSE_EXIT 
 186      B4130000 
 187 13ac 9F140000 		_BRAN PAUSE_LOOP 
 187      9C130000 
 188              	PAUSE_EXIT: 		
 189 13b4 77120000 		_UNNEST 
 190              	
 191              	//  ULED ( T|F -- )
 192              	// control user LED, -1 ON, 0 OFF  
 193 13b8 88130000 		.word _PAUSE
 194 13bc 04       	_ULED: .byte 4
 195 13bd 554C4544 		.ascii "ULED"
 196 13c1 0000BF   		.p2align 2
 197              		.type ULED, %function 
 198              	ULED:
 199 13c4 4FF40050 		mov T0,#(1<<LED_PIN)
 200 13c8 4FF40061 		_MOV32 T1,LED_GPIO 
 200      C4F20201 
 201 13d0 3600     		movs TOS,TOS 
 202 13d2 57F8046B 		_POP
 203 13d6 03D0     		beq ULED_OFF
 204 13d8 4FEA0040 		lsl T0,#16 
 205 13dc 8861     		str T0,[T1,#GPIO_BSRR]
 206 13de 47E7     		_NEXT 
 207              	ULED_OFF:
 208 13e0 8861     		str T0,[T1,#GPIO_BSRR]
 209 13e2 45E7     		_NEXT    
 210              	
 211              	//    ?KEY	 ( -- c T | F )
 212              	// 	Return input character and true, or a false if no input.
 213 13e4 BC130000 		.word	_ULED
 214 13e8 04       	_QRX:	.byte   4
 215 13e9 3F4B4559 		.ascii "?KEY"
 216 13ed 0000BF   		.p2align 2 
 217              	QKEY:
 218              	QRX: 
 219 13f0 47F8046D 		_PUSH
ARM GAS  forth.s 			page 62


 220 13f4 A06D     		ldr T0,[UP,#RX_TAIL] 
 221 13f6 616D     		ldr T1,[UP,#RX_HEAD]
 222 13f8 90EA0106 		eors TOS,T0,T1 
 223 13fc 0CD0     		beq 1f
 224 13fe 04F14400 		add T0,UP,#RX_QUEUE 
 225 1402 0844     		add T0,T1 
 226 1404 0678     		ldrb TOS,[T0]
 227 1406 01F10101 		add T1,#1 
 228 140a 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 229 140e 6165     		str T1,[UP,#RX_HEAD]
 230 1410 47F8046D 		_PUSH 
 231 1414 4FF0FF36 		mov TOS,#-1
 232 1418 2AE7     	1:	_NEXT 
 233              	
 234              	//    TX!	 ( c -- )
 235              	// 	Send character c to the output device.
 236              	
 237 141a E8130000 		.word	_QRX
 238 141e 04       	_TXSTO:	.byte 4
 239 141f 454D4954 		.ascii "EMIT"
 240 1423 00       		.p2align 2 	
 241              	TXSTO:
 242              	EMIT:
 243              	TECHO:
 244 1424 4FF48055 		_MOV32 WP,UART 
 244      C4F20105 
 245 142c 2868     	1:  ldr T0,[WP,#USART_SR]
 246 142e 10F0800F 	    tst T0,#0x80 // TXE flag 
 247 1432 FBD0     		beq 1b 
 248 1434 2E71     		strb TOS,[WP,#USART_DR]	 
 249 1436 57F8046B 		_POP
 250 143a 19E7     		_NEXT 
 251              		
 252              	/***************
 253              	//  The kernel
 254              	***************/
 255              	
 256              	//    NOP	( -- )
 257              	// 	do nothing.
 258              	
 259 143c 1E140000 		.word	_TXSTO
 260 1440 03       	_NOP:	.byte   3
 261 1441 4E4F50   		.ascii "NOP"
 262              		.p2align 2 	
 263              	NOP:
 264 1444 14E7     		_NEXT 
 265              	 
 266              	
 267              	//    doLIT	( -- w )
 268              	// 	Push an inline literal.
 269              	
 270              	// 	.word	_NOP
 271              	// _LIT	.byte   COMPO+5
 272              	// 	.ascii "doLIT"
 273 1446 00BF     	 	.p2align 2 	
 274              	DOLIT:
 275 1448 47F8046D 		_PUSH				//  store TOS on data stack
ARM GAS  forth.s 			page 63


 276 144c 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 277 1450 0EE7     		_NEXT 
 278              	
 279              	//    EXECUTE	( ca -- )
 280              	// 	Execute the word at ca.
 281              	
 282 1452 40140000 		.word	_NOP
 283 1456 07       	_EXECU:	.byte   7
 284 1457 45584543 		.ascii "EXECUTE"
 284      555445
 285 145e 00BF     		.p2align 2 	
 286              	EXECU: 
 287 1460 46F00105 		ORR	WP,TOS,#1 
 288 1464 57F8046B 		_POP
 289 1468 2847     		BX WP 
 290 146a 01E7     		_NEXT 
 291              	
 292              	//    next	( -- ) counter on R:
 293              	// 	Run time code for the single index loop.
 294              	// 	: next ( -- ) \ hilevel model
 295              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 296              	
 297              	// 	.word	_EXECU
 298              	// _DONXT	.byte   COMPO+4
 299              	// 	.ascii "next"
 300              	// 	.p2align 2 	
 301              	DONXT:
 302 146c D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 303 1470 22B9     		CBNZ T2,NEXT1 
 304              		/* loop done */
 305 1472 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 306 1476 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 307 147a F9E6     		_NEXT
 308              	NEXT1:
 309              		/* decrement loop counter */
 310 147c A2F10102 		SUB	T2,T2,#1
 311 1480 C8F80020 		STR	T2,[RSP]
 312 1484 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 313 1488 F2E6     		_NEXT 
 314              	
 315              	//    ?branch	( f -- )
 316              	// 	Branch if flag is zero.
 317              	
 318              	// 	.word	_DONXT
 319              	// _QBRAN	.byte   COMPO+7
 320              	// 	.ascii "?branch"
 321              	// 	.p2align 2 	
 322              	QBRAN:
 323 148a 3600     		MOVS	TOS,TOS
 324 148c 57F8046B 		_POP
 325 1490 02D1     		BNE	QBRAN1
 326 1492 DCF800C0 		LDR	IP,[IP]
 327 1496 EBE6     		_NEXT
 328              	QBRAN1:
 329 1498 0CF1040C 	 	ADD	IP,IP,#4
 330 149c E8E6     		_NEXT
 331              	
ARM GAS  forth.s 			page 64


 332              	//    branch	( -- )
 333              	// 	Branch to an inline address.
 334              	
 335              	// 	.word	_QBRAN
 336              	// _BRAN	.byte   COMPO+6
 337              	// 	.ascii "branch"
 338              	// 	.p2align 2 	
 339              	BRAN:
 340 149e DCF800C0 		LDR	IP,[IP]
 341 14a2 E5E6     		_NEXT
 342              	
 343              	//    EXIT	(  -- )
 344              	// 	Exit the currently executing command.
 345              	
 346 14a4 56140000 		.word	_EXECU
 347 14a8 04       	_EXIT:	.byte   4
 348 14a9 45584954 		.ascii "EXIT"
 349 14ad 0000BF   		.p2align 2 	
 350              	EXIT:
 351 14b0 77120000 		_UNNEST
 352              	
 353              	//    !	   ( w a -- )
 354              	// 	Pop the data stack to memory.
 355              	
 356 14b4 A8140000 		.word	_EXIT
 357 14b8 01       	_STORE:	.byte   1
 358 14b9 21       		.ascii "!"
 359 14ba 00BF     		.p2align 2 	
 360              	STORE:
 361 14bc 57F8045B 		LDR	WP,[DSP],#4
 362 14c0 3560     		STR	WP,[TOS]
 363 14c2 57F8046B 		_POP
 364 14c6 D3E6     		_NEXT 
 365              	
 366              	//    @	   ( a -- w )
 367              	// 	Push memory location to the data stack.
 368              	
 369 14c8 B8140000 		.word	_STORE
 370 14cc 01       	_AT:	.byte   1
 371 14cd 40       		.ascii "@"
 372 14ce 00BF     		.p2align 2 	
 373              	AT:
 374 14d0 3668     		LDR	TOS,[TOS]
 375 14d2 CDE6     		_NEXT 
 376              	
 377              	//    C!	  ( c b -- )
 378              	// 	Pop the data stack to byte memory.
 379              	
 380 14d4 CC140000 		.word	_AT
 381 14d8 02       	_CSTOR:	.byte   2
 382 14d9 4321     		.ascii "C!"
 383 14db 00       		.p2align 2 	
 384              	CSTOR:
 385 14dc 57F8045B 		LDR	WP,[DSP],#4
 386 14e0 3570     		STRB WP,[TOS]
 387 14e2 57F8046B 		_POP
 388 14e6 C3E6     		_NEXT
ARM GAS  forth.s 			page 65


 389              	
 390              	//    C@	  ( b -- c )
 391              	// 	Push byte memory location to the data stack.
 392              	
 393 14e8 D8140000 		.word	_CSTOR
 394 14ec 02       	_CAT:	.byte   2
 395 14ed 4340     		.ascii "C@"
 396 14ef 00       		.p2align 2 	
 397              	CAT:
 398 14f0 3678     		LDRB	TOS,[TOS]
 399 14f2 BDE6     		_NEXT 
 400              	
 401              	//    R>	  ( -- w )
 402              	// 	Pop the return stack to the data stack.
 403              	
 404 14f4 EC140000 		.word	_CAT
 405 14f8 02       	_RFROM:	.byte   2
 406 14f9 523E     		.ascii "R>"
 407 14fb 00       		.p2align 2 	
 408              	RFROM:
 409 14fc 47F8046D 		_PUSH
 410 1500 58F8046B 		LDR	TOS,[RSP],#4
 411 1504 B4E6     		_NEXT 
 412              	
 413              	//    R@	  ( -- w )
 414              	// 	Copy top of return stack to the data stack.
 415              	
 416 1506 F8140000 		.word	_RFROM
 417 150a 02       	_RAT:	.byte   2
 418 150b 5240     		.ascii "R@"
 419 150d 0000BF   		.p2align 2 	
 420              	RAT:
 421 1510 47F8046D 		_PUSH
 422 1514 D8F80060 		LDR	TOS,[RSP]
 423 1518 AAE6     		_NEXT 
 424              	
 425              	//    >R	  ( w -- )
 426              	// 	Push the data stack to the return stack.
 427              	
 428 151a 0A150000 		.word	_RAT
 429 151e 42       	_TOR:	.byte   COMPO+2
 430 151f 3E52     		.ascii ">R"
 431 1521 0000BF   		.p2align 2 	
 432              	TOR:
 433 1524 48F8046D 		STR	TOS,[RSP,#-4]!
 434 1528 57F8046B 		_POP
 435 152c A0E6     		_NEXT
 436              	
 437              	//	RP! ( u -- )
 438              	// initialize RPP with u 
 439 152e 1E150000 		.word _TOR 
 440 1532 03       	_RPSTOR: .byte 3 
 441 1533 525021   		.ascii "RP!" 
 442 1536 00BF     		.p2align 2 
 443              	RPSTOR:
 444 1538 B046     		MOV RSP,TOS 
 445 153a 57F8046B 		_POP  
ARM GAS  forth.s 			page 66


 446 153e 97E6     		_NEXT 
 447              	
 448              	
 449              	//	SP! ( u -- )
 450              	// initialize SPP with u 
 451 1540 32150000 		.word _RPSTOR  
 452 1544 03       	_SPSTOR: .byte 3 
 453 1545 535021   		.ascii "SP!" 
 454              		.p2align 2 
 455              	SPSTOR:
 456 1548 3746     		MOV DSP,TOS 
 457 154a 86EA0606 		EOR TOS,TOS,TOS 
 458 154e 8FE6     		_NEXT 
 459              	
 460              	//    SP@	 ( -- a )
 461              	// 	Push the current data stack pointer.
 462              	
 463 1550 44150000 		.word	_SPSTOR
 464 1554 03       	_SPAT:	.byte   3
 465 1555 535040   		.ascii "SP@"
 466              		.p2align 2 	
 467              	SPAT:
 468 1558 47F8046D 		_PUSH
 469 155c 3E46     		MOV	TOS,DSP
 470 155e 87E6     		_NEXT
 471              	
 472              	//    DROP	( w -- )
 473              	// 	Discard top stack item.
 474              	
 475 1560 54150000 		.word	_SPAT
 476 1564 04       	_DROP:	.byte   4
 477 1565 44524F50 		.ascii "DROP"
 478 1569 0000BF   		.p2align 2 	
 479              	DROP:
 480 156c 57F8046B 		_POP
 481 1570 7EE6     		_NEXT 
 482              	
 483              	//    DUP	 ( w -- w w )
 484              	// 	Duplicate the top stack item.
 485              	
 486 1572 64150000 		.word	_DROP
 487 1576 03       	_DUPP:	.byte   3
 488 1577 445550   		.ascii "DUP"
 489 157a 00BF     		.p2align 2 	
 490              	DUPP:
 491 157c 47F8046D 		_PUSH
 492 1580 76E6     		_NEXT 
 493              	
 494              	//    SWAP	( w1 w2 -- w2 w1 )
 495              	// 	Exchange top two stack items.
 496              	
 497 1582 76150000 		.word	_DUPP
 498 1586 04       	_SWAP:	.byte   4
 499 1587 53574150 		.ascii "SWAP"
 500 158b 00       		.p2align 2 	
 501              	SWAP:
 502 158c 3D68     		LDR	WP,[DSP]
ARM GAS  forth.s 			page 67


 503 158e 3E60     		STR	TOS,[DSP]
 504 1590 2E46     		MOV	TOS,WP
 505 1592 6DE6     		_NEXT 
 506              	
 507              	//    OVER	( w1 w2 -- w1 w2 w1 )
 508              	// 	Copy second stack item to top.
 509              	
 510 1594 86150000 		.word	_SWAP
 511 1598 04       	_OVER:	.byte   4
 512 1599 4F564552 		.ascii "OVER"
 513 159d 0000BF   		.p2align 2 	
 514              	OVER:
 515 15a0 47F8046D 		_PUSH
 516 15a4 7E68     		LDR	TOS,[DSP,#4]
 517 15a6 63E6     		_NEXT 
 518              	
 519              	//    0<	  ( n -- t )
 520              	// 	Return true if n is negative.
 521              	
 522 15a8 98150000 		.word	_OVER
 523 15ac 02       	_ZLESS:	.byte   2
 524 15ad 303C     		.ascii "0<"
 525 15af 00       		.p2align 2 	
 526              	ZLESS:
 527              	//	MOV	WP,#0
 528              	//	ADD	TOS,WP,TOS,ASR #32
 529 15b0 4FEAE676 		ASR TOS,#31
 530 15b4 5CE6     		_NEXT 
 531              	
 532              	//    AND	 ( w w -- w )
 533              	// 	Bitwise AND.
 534              	
 535 15b6 AC150000 		.word	_ZLESS
 536 15ba 03       	_ANDD:	.byte   3
 537 15bb 414E44   		.ascii "AND"
 538 15be 00BF     		.p2align 2 	
 539              	ANDD:
 540 15c0 57F8045B 		LDR	WP,[DSP],#4
 541 15c4 06EA0506 		AND	TOS,TOS,WP
 542 15c8 52E6     		_NEXT 
 543              	
 544              	//    OR	  ( w w -- w )
 545              	// 	Bitwise inclusive OR.
 546              	
 547 15ca BA150000 		.word	_ANDD
 548 15ce 02       	_ORR:	.byte   2
 549 15cf 4F52     		.ascii "OR"
 550 15d1 0000BF   		.p2align 2 	
 551              	ORR:
 552 15d4 57F8045B 		LDR	WP,[DSP],#4
 553 15d8 46EA0506 		ORR	TOS,TOS,WP
 554 15dc 48E6     		_NEXT 
 555              	
 556              	//    XOR	 ( w w -- w )
 557              	// 	Bitwise exclusive OR.
 558              	
 559 15de CE150000 		.word	_ORR
ARM GAS  forth.s 			page 68


 560 15e2 03       	_XORR:	.byte   3
 561 15e3 584F52   		.ascii "XOR"
 562 15e6 00BF     		.p2align 2 	
 563              	XORR:
 564 15e8 57F8045B 		LDR	WP,[DSP],#4
 565 15ec 86EA0506 		EOR	TOS,TOS,WP
 566 15f0 3EE6     		_NEXT 
 567              	
 568              	//    UM+	 ( w w -- w cy )
 569              	// 	Add two numbers, return the sum and carry flag.
 570              	
 571 15f2 E2150000 		.word	_XORR
 572 15f6 03       	_UPLUS:	.byte   3
 573 15f7 554D2B   		.ascii "UM+"
 574 15fa 00BF     		.p2align 2 	
 575              	UPLUS:
 576 15fc 3D68     		LDR	WP,[DSP]
 577 15fe AD19     		ADDS	WP,WP,TOS
 578 1600 4FF00006 		MOV	TOS,#0
 579 1604 46F10006 		ADC	TOS,TOS,#0
 580 1608 3D60     		STR	WP,[DSP]
 581 160a 31E6     		_NEXT 
 582              	
 583              	//    RSHIFT	 ( w # -- w )
 584              	// 	arithmetic Right shift # bits.
 585              	
 586 160c F6150000 		.word	_UPLUS
 587 1610 06       	_RSHIFT:	.byte   6
 588 1611 52534849 		.ascii "RSHIFT"
 588      4654
 589 1617 00       		.p2align 2 	
 590              	RSHIFT:
 591 1618 57F8045B 		LDR	WP,[DSP],#4
 592 161c 45FA06F6 		MOV	TOS,WP,ASR TOS
 593 1620 26E6     		_NEXT 
 594              	
 595              	//    LSHIFT	 ( w # -- w )
 596              	// 	Right shift # bits.
 597              	
 598 1622 10160000 		.word	_RSHIFT
 599 1626 06       	_LSHIFT:	.byte   6
 600 1627 4C534849 		.ascii "LSHIFT"
 600      4654
 601 162d 0000BF   		.p2align 2 	
 602              	LSHIFT:
 603 1630 57F8045B 		LDR	WP,[DSP],#4
 604 1634 05FA06F6 		MOV	TOS,WP,LSL TOS
 605 1638 1AE6     		_NEXT
 606              	
 607              	//    +	 ( w w -- w )
 608              	// 	Add.
 609              	
 610 163a 26160000 		.word	_LSHIFT
 611 163e 01       	_PLUS:	.byte   1
 612 163f 2B       		.ascii "+"
 613              		.p2align 2 	
 614              	PLUS:
ARM GAS  forth.s 			page 69


 615 1640 57F8045B 		LDR	WP,[DSP],#4
 616 1644 2E44     		ADD	TOS,TOS,WP
 617 1646 13E6     		_NEXT 
 618              	
 619              	//    -	 ( w w -- w )
 620              	// 	Subtract.
 621              	
 622 1648 3E160000 		.word	_PLUS
 623 164c 01       	_SUBB:	.byte   1
 624 164d 2D       		.ascii "-"
 625 164e 00BF     		.p2align 2 	
 626              	SUBB:
 627 1650 57F8045B 		LDR	WP,[DSP],#4
 628 1654 C6EB0506 		RSB	TOS,TOS,WP
 629 1658 0AE6     		_NEXT 
 630              	
 631              	//    *	 ( w w -- w )
 632              	// 	Multiply.
 633              	
 634 165a 4C160000 		.word	_SUBB
 635 165e 01       	_STAR:	.byte   1
 636 165f 2A       		.ascii "*"
 637              		.p2align 2 	
 638              	STAR:
 639 1660 57F8045B 		LDR	WP,[DSP],#4
 640 1664 05FB06F6 		MUL	TOS,WP,TOS
 641 1668 02E6     		_NEXT 
 642              	
 643              	//    UM*	 ( w w -- ud )
 644              	// 	Unsigned multiply.
 645              	
 646 166a 5E160000 		.word	_STAR
 647 166e 03       	_UMSTA:	.byte   3
 648 166f 554D2A   		.ascii "UM*"
 649 1672 00BF     		.p2align 2 	
 650              	UMSTA:
 651 1674 3D68     		LDR	WP,[DSP]
 652 1676 A6FB0523 		UMULL	T2,T3,TOS,WP
 653 167a 3A60     		STR	T2,[DSP]
 654 167c 1E46     		MOV	TOS,T3
 655 167e F7E5     		_NEXT 
 656              	
 657              	//    M*	 ( w w -- d )
 658              	// 	signed multiply.
 659              	
 660 1680 6E160000 		.word	_UMSTA
 661 1684 02       	_MSTAR:	.byte   2
 662 1685 4D2A     		.ascii "M*"
 663 1687 00       		.p2align 2 	
 664              	MSTAR:
 665 1688 3D68     		LDR	WP,[DSP]
 666 168a 86FB0523 		SMULL	T2,T3,TOS,WP
 667 168e 3A60     		STR	T2,[DSP]
 668 1690 1E46     		MOV	TOS,T3
 669 1692 EDE5     		_NEXT 
 670              	
 671              	//    1+	 ( w -- w+1 )
ARM GAS  forth.s 			page 70


 672              	// 	Add 1.
 673              	
 674 1694 84160000 		.word	_MSTAR
 675 1698 02       	_ONEP:	.byte   2
 676 1699 312B     		.ascii "1+"
 677 169b 00       		.p2align 2 	
 678              	ONEP:
 679 169c 06F10106 		ADD	TOS,TOS,#1
 680 16a0 E6E5     		_NEXT 
 681              	
 682              	//    1-	 ( w -- w-1 )
 683              	// 	Subtract 1.
 684              	
 685 16a2 98160000 		.word	_ONEP
 686 16a6 02       	_ONEM:	.byte   2
 687 16a7 312D     		.ascii "1-"
 688 16a9 0000BF   		.p2align 2 	
 689              	ONEM:
 690 16ac A6F10106 		SUB	TOS,TOS,#1
 691 16b0 DEE5     		_NEXT 
 692              	
 693              	//    2+	 ( w -- w+2 )
 694              	// 	Add 1.
 695              	
 696 16b2 A6160000 		.word	_ONEM
 697 16b6 02       	_TWOP:	.byte   2
 698 16b7 322B     		.ascii "2+"
 699 16b9 0000BF   		.p2align 2 	
 700              	TWOP:
 701 16bc 06F10206 		ADD	TOS,TOS,#2
 702 16c0 D6E5     		_NEXT
 703              	
 704              	//    2-	 ( w -- w-2 )
 705              	// 	Subtract 2.
 706              	
 707 16c2 B6160000 		.word	_TWOP
 708 16c6 02       	_TWOM:	.byte   2
 709 16c7 322D     		.ascii "2-"
 710 16c9 0000BF   		.p2align 2 	
 711              	TWOM:
 712 16cc A6F10206 		SUB	TOS,TOS,#2
 713 16d0 CEE5     		_NEXT
 714              	
 715              	//    CELL+	( w -- w+4 )
 716              	// 	Add CELLL.
 717              	
 718 16d2 C6160000 		.word	_TWOM
 719 16d6 05       	_CELLP:	.byte   5
 720 16d7 43454C4C 		.ascii "CELL+"
 720      2B
 721              		.p2align 2 	
 722              	CELLP:
 723 16dc 06F10406 		ADD	TOS,TOS,#CELLL
 724 16e0 C6E5     		_NEXT
 725              	
 726              	//    CELL-	( w -- w-4 )
 727              	// 	Subtract CELLL.
ARM GAS  forth.s 			page 71


 728              	
 729 16e2 D6160000 		.word	_CELLP
 730 16e6 05       	_CELLM:	.byte   5
 731 16e7 43454C4C 		.ascii "CELL-"
 731      2D
 732              		.p2align 2 	
 733              	CELLM:
 734 16ec A6F10406 		SUB	TOS,TOS,#CELLL
 735 16f0 BEE5     		_NEXT
 736              	 
 737              	//    BL	( -- 32 )
 738              	// 	Blank (ASCII space).
 739              	
 740 16f2 E6160000 		.word	_CELLM
 741 16f6 02       	_BLANK:	.byte   2
 742 16f7 424C     		.ascii "BL"
 743 16f9 0000BF   		.p2align 2 	
 744              	BLANK:
 745 16fc 47F8046D 		_PUSH
 746 1700 4FF02006 		MOV	TOS,#32
 747 1704 B4E5     		_NEXT 
 748              	
 749              	//    CELLS	( w -- w*4 )
 750              	// 	Multiply 4.
 751              	
 752 1706 F6160000 		.word	_BLANK
 753 170a 05       	_CELLS:	.byte   5
 754 170b 43454C4C 		.ascii "CELLS"
 754      53
 755              		.p2align 2 	
 756              	CELLS:
 757 1710 4FEA8606 		MOV	TOS,TOS,LSL#2
 758 1714 ACE5     		_NEXT
 759              	
 760              	//    CELL/	( w -- w/4 )
 761              	// 	Divide by 4.
 762              	
 763 1716 0A170000 		.word	_CELLS
 764 171a 05       	_CELLSL:	.byte   5
 765 171b 43454C4C 		.ascii "CELL/"
 765      2F
 766              		.p2align 2 	
 767              	CELLSL:
 768 1720 4FEAA606 		MOV	TOS,TOS,ASR#2
 769 1724 A4E5     		_NEXT
 770              	
 771              	//    2*	( w -- w*2 )
 772              	// 	Multiply 2.
 773              	
 774 1726 1A170000 		.word	_CELLSL
 775 172a 02       	_TWOST:	.byte   2
 776 172b 322A     		.ascii "2*"
 777 172d 0000BF   		.p2align 2 	
 778              	TWOST:
 779 1730 4FEA4606 		MOV	TOS,TOS,LSL#1
 780 1734 9CE5     		_NEXT
 781              	
ARM GAS  forth.s 			page 72


 782              	//    2/	( w -- w/2 )
 783              	// 	Divide by 2.
 784              	
 785 1736 2A170000 		.word	_TWOST
 786 173a 02       	_TWOSL:	.byte   2
 787 173b 322F     		.ascii "2/"
 788 173d 0000BF   		.p2align 2 	
 789              	TWOSL:
 790 1740 4FEA6606 		MOV	TOS,TOS,ASR#1
 791 1744 94E5     		_NEXT
 792              	
 793              	//    ?DUP	( w -- w w | 0 )
 794              	// 	Conditional duplicate.
 795              	
 796 1746 3A170000 		.word	_TWOSL
 797 174a 04       	_QDUP:	.byte   4
 798 174b 3F445550 		.ascii "?DUP"
 799 174f 00       		.p2align 2 	
 800              	QDUP:
 801 1750 3500     		MOVS	WP,TOS
 802 1752 18BF     		IT NE 
 803 1754 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 804 1758 8AE5     		_NEXT
 805              	
 806              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 807              	// 	Rotate top 3 items.
 808              	
 809 175a 4A170000 		.word	_QDUP
 810 175e 03       	_ROT:	.byte   3
 811 175f 524F54   		.ascii "ROT"
 812 1762 00BF     		.p2align 2 	
 813              	ROT:
 814 1764 3868     		LDR	T0,[DSP]  // w2 
 815 1766 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 816 1768 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 817 176a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 818 176c 80E5     		_NEXT
 819              	
 820              	// -ROT ( w1 w2 w3 -- w3 w1 w2 )
 821              	// left rotate top 3 elements 
 822 176e 5E170000 		.word _ROT 
 823 1772 04       	_NROT: .byte 4 
 824 1773 2D524F54 		.ascii "-ROT"
 825 1777 00       		.p2align 2 
 826              	NROT:
 827 1778 7868     		LDR T0,[DSP,#4]
 828 177a 7E60     		STR TOS,[DSP,#4]	
 829 177c 3E68     		LDR TOS,[DSP]
 830 177e 3860     		STR T0,[DSP]
 831 1780 76E5     		_NEXT 
 832              	
 833              	//    2DROP	( w1 w2 -- )
 834              	// 	Drop top 2 items.
 835              	
 836 1782 72170000 		.word	_NROT
 837 1786 05       	_DDROP:	.byte   5
 838 1787 3244524F 		.ascii "2DROP"
ARM GAS  forth.s 			page 73


 838      50
 839              		.p2align 2 	
 840              	DDROP:
 841 178c 57F8046B 		_POP
 842 1790 57F8046B 		_POP
 843 1794 6CE5     		_NEXT 
 844              	
 845 1796 86170000 		.word _DDROP 
 846 179a 05       	_TDROP: .byte 5 
 847 179b 3344524F 		.ascii "3DROP"
 847      50
 848              		.p2align 2
 849              	TDROP:
 850 17a0 07F10807 	    add DSP,#8 
 851 17a4 57F8046B 	    _POP 
 852 17a8 62E5     	    _NEXT 
 853              	
 854              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 855              	// 	Duplicate top 2 items.
 856              	
 857 17aa 9A170000 		.word	_TDROP
 858 17ae 04       	_DDUP:	.byte   4
 859 17af 32445550 		.ascii "2DUP"
 860 17b3 00       		.p2align 2 	
 861              	DDUP:
 862 17b4 3868     		LDR	T0,[DSP] // w1
 863 17b6 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 864 17ba 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 865 17be 57E5     		_NEXT
 866              	
 867              	//    D+	( d1 d2 -- d3 )
 868              	// 	Add top 2 double numbers.
 869              	
 870 17c0 AE170000 		.word	_DDUP
 871 17c4 02       	_DPLUS:	.byte   2
 872 17c5 442B     		.ascii "D+"
 873 17c7 00       		.p2align 2 	
 874              	DPLUS:
 875 17c8 57F8045B 		LDR	WP,[DSP],#4
 876 17cc 57F8042B 		LDR	T2,[DSP],#4
 877 17d0 3B68     		LDR	T3,[DSP]
 878 17d2 ED18     		ADDS	WP,WP,T3
 879 17d4 3D60     		STR	WP,[DSP]
 880 17d6 46EB0206 		ADC	TOS,TOS,T2
 881 17da 49E5     		_NEXT
 882              	
 883              	//    NOT	 ( w -- !w )
 884              	// 	1"s complement.
 885              	
 886 17dc C4170000 		.word	_DPLUS
 887 17e0 03       	_INVER:	.byte   3
 888 17e1 4E4F54   		.ascii "NOT"
 889              		.p2align 2 	
 890              	INVER:
 891 17e4 6FEA0606 		MVN	TOS,TOS
 892 17e8 42E5     		_NEXT
 893              	
ARM GAS  forth.s 			page 74


 894              	//    NEGATE	( w -- -w )
 895              	// 	2's complement.
 896              	
 897 17ea E0170000 		.word	_INVER
 898 17ee 06       	_NEGAT:	.byte   6
 899 17ef 4E454741 		.ascii "NEGATE"
 899      5445
 900 17f5 0000BF   		.p2align 2 	
 901              	NEGAT:
 902 17f8 C6F10006 		RSB	TOS,TOS,#0
 903 17fc 38E5     		_NEXT
 904              	
 905              	//    ABS	 ( w -- |w| )
 906              	// 	Absolute.
 907              	
 908 17fe EE170000 		.word	_NEGAT
 909 1802 03       	_ABSS:	.byte   3
 910 1803 414253   		.ascii "ABS"
 911 1806 00BF     		.p2align 2 	
 912              	ABSS:
 913 1808 16F0004F 		TST	TOS,#0x80000000
 914 180c 18BF     		IT NE
 915 180e 7642     	    RSBNE   TOS,TOS,#0
 916 1810 2EE5     		_NEXT
 917              	
 918              	//  0= ( w -- f )
 919              	// TOS==0?
 920              	
 921 1812 02180000 		.word _ABSS
 922 1816 02       	_ZEQUAL: .byte 2
 923 1817 303D     		.ascii "0="
 924 1819 0000BF   		.p2align 2
 925              	ZEQUAL:
 926 181c 16B9     		cbnz TOS,1f
 927 181e 4FF0FF36 		mov TOS,#-1
 928 1822 25E5     		_NEXT 
 929 1824 86EA0606 	1:  eor TOS,TOS,TOS  
 930 1828 22E5     		_NEXT 	
 931              	
 932              	//    =	 ( w w -- t )
 933              	// 	Equal?
 934              	
 935 182a 16180000 		.word	_ZEQUAL
 936 182e 01       	_EQUAL:	.byte   1
 937 182f 3D       		.ascii "="
 938              		.p2align 2 	
 939              	EQUAL:
 940 1830 57F8045B 		LDR	WP,[DSP],#4
 941 1834 AE42     		CMP	TOS,WP
 942 1836 0CBF     		ITE EQ 
 943 1838 6FF00006 	    MVNEQ	TOS,#0
 944 183c 0026     		MOVNE	TOS,#0
 945 183e 17E5     		_NEXT
 946              	
 947              	//    U<	 ( w w -- t )
 948              	// 	Unsigned less?
 949              	
ARM GAS  forth.s 			page 75


 950 1840 2E180000 		.word	_EQUAL
 951 1844 02       	_ULESS:	.byte   2
 952 1845 553C     		.ascii "U<"
 953 1847 00       		.p2align 2 	
 954              	ULESS:
 955 1848 57F8045B 		LDR	WP,[DSP],#4
 956 184c B542     		CMP	WP,TOS
 957 184e 34BF     		ITE CC 
 958 1850 6FF00006 		MVNCC	TOS,#0
 959 1854 0026     		MOVCS	TOS,#0
 960 1856 0BE5     		_NEXT
 961              	
 962              	//    <	( w w -- t )
 963              	// 	Less?
 964              	
 965 1858 44180000 		.word	_ULESS
 966 185c 01       	_LESS:	.byte   1
 967 185d 3C       		.ascii "<"
 968 185e 00BF     		.p2align 2 	
 969              	LESS:
 970 1860 57F8045B 		LDR	WP,[DSP],#4
 971 1864 B542     		CMP	WP,TOS
 972 1866 B4BF     	    ITE LT
 973 1868 6FF00006 		MVNLT	TOS,#0
 974 186c 0026     		MOVGE	TOS,#0
 975 186e FFE4     		_NEXT 
 976              	
 977              	//    >	( w w -- t )
 978              	// 	greater?
 979              	
 980 1870 5C180000 		.word	_LESS
 981 1874 01       	_GREAT:	.byte   1
 982 1875 3E       		.ascii ">"
 983 1876 00BF     		.p2align 2 	
 984              	GREAT:
 985 1878 57F8045B 		LDR	WP,[DSP],#4
 986 187c B542     		CMP	WP,TOS
 987 187e CCBF     		ITE GT
 988 1880 6FF00006 	    MVNGT	TOS,#0
 989 1884 0026     		MOVLE	TOS,#0
 990 1886 F3E4     		_NEXT
 991              	
 992              	//    MAX	 ( w w -- max )
 993              	// 	Leave maximum.
 994              	
 995 1888 74180000 		.word	_GREAT
 996 188c 03       	_MAX:	.byte   3
 997 188d 4D4158   		.ascii "MAX"
 998              		.p2align 2 	
 999              	MAX:
 1000 1890 57F8045B 		LDR	WP,[DSP],#4
 1001 1894 B542     		CMP	WP,TOS
 1002 1896 C8BF     		IT GT 
 1003 1898 2E46     		MOVGT	TOS,WP
 1004 189a E9E4     		_NEXT 
 1005              	
 1006              	//    MIN	 ( w w -- min )
ARM GAS  forth.s 			page 76


 1007              	// 	Leave minimum.
 1008              	
 1009 189c 8C180000 		.word	_MAX
 1010 18a0 03       	_MIN:	.byte   3
 1011 18a1 4D494E   		.ascii "MIN"
 1012              		.p2align 2 	
 1013              	MIN:
 1014 18a4 57F8045B 		LDR	WP,[DSP],#4
 1015 18a8 B542     		CMP	WP,TOS
 1016 18aa B8BF     		IT LT
 1017 18ac 2E46     		MOVLT	TOS,WP
 1018 18ae DFE4     		_NEXT
 1019              	
 1020              	//    +!	 ( w a -- )
 1021              	// 	Add to memory.
 1022              	
 1023 18b0 A0180000 		.word	_MIN
 1024 18b4 02       	_PSTOR:	.byte   2
 1025 18b5 2B21     		.ascii "+!"
 1026 18b7 00       		.p2align 2 	
 1027              	PSTOR:
 1028 18b8 57F8045B 		LDR	WP,[DSP],#4
 1029 18bc 3268     		LDR	T2,[TOS]
 1030 18be 2A44     		ADD	T2,T2,WP
 1031 18c0 3260     		STR	T2,[TOS]
 1032 18c2 57F8046B 		_POP
 1033 18c6 D3E4     		_NEXT
 1034              	
 1035              	//    2!	 ( d a -- )
 1036              	// 	Store double number.
 1037              	
 1038 18c8 B4180000 		.word	_PSTOR
 1039 18cc 02       	_DSTOR:	.byte   2
 1040 18cd 3221     		.ascii "2!"
 1041 18cf 00       		.p2align 2 	
 1042              	DSTOR:
 1043 18d0 57F8045B 		LDR	WP,[DSP],#4
 1044 18d4 57F8042B 		LDR	T2,[DSP],#4
 1045 18d8 46F8045B 		STR	WP,[TOS],#4
 1046 18dc 3260     		STR	T2,[TOS]
 1047 18de 57F8046B 		_POP
 1048 18e2 C5E4     		_NEXT
 1049              	
 1050              	//    2@	 ( a -- d )
 1051              	// 	Fetch double number.
 1052              	
 1053 18e4 CC180000 		.word	_DSTOR
 1054 18e8 02       	_DAT:	.byte   2
 1055 18e9 3240     		.ascii "2@"
 1056 18eb 00       		.p2align 2 	
 1057              	DAT:
 1058 18ec 7568     		LDR	WP,[TOS,#4]
 1059 18ee 47F8045D 		STR	WP,[DSP,#-4]!
 1060 18f2 3668     		LDR	TOS,[TOS]
 1061 18f4 BCE4     		_NEXT
 1062              	
 1063              	//    COUNT	( b -- b+1 c )
ARM GAS  forth.s 			page 77


 1064              	// 	Fetch length of string.
 1065              	
 1066 18f6 E8180000 		.word	_DAT
 1067 18fa 05       	_COUNT:	.byte   5
 1068 18fb 434F554E 		.ascii "COUNT"
 1068      54
 1069              		.p2align 2 	
 1070              	COUNT:
 1071 1900 16F8015B 		LDRB	WP,[TOS],#1
 1072 1904 47F8046D 		_PUSH
 1073 1908 2E46     		MOV	TOS,WP
 1074 190a B1E4     		_NEXT
 1075              	
 1076              	//    DNEGATE	( d -- -d )
 1077              	// 	Negate double number.
 1078              	
 1079 190c FA180000 		.word	_COUNT
 1080 1910 07       	_DNEGA:	.byte   7
 1081 1911 444E4547 		.ascii "DNEGATE"
 1081      415445
 1082              		.p2align 2 	
 1083              	DNEGA:
 1084 1918 3D68     		LDR	WP,[DSP]
 1085 191a A2EB0202 		SUB	T2,T2,T2
 1086 191e 551B     		SUBS WP,T2,WP
 1087 1920 62EB0606 		SBC	TOS,T2,TOS
 1088 1924 3D60     		STR	WP,[DSP]
 1089 1926 A3E4     		_NEXT
 1090              	
 1091              	// **************************************************************************
 1092              	//  System and user variables
 1093              	
 1094              	//    doVAR	( -- a )
 1095              	// 	Run time routine for VARIABLE and CREATE.
 1096              	
 1097              	// 	.word	_DNEGA
 1098              	// _DOVAR	.byte  COMPO+5
 1099              	// 	.ascii "doVAR"
 1100              	// 	.p2align 2 	
 1101              	DOVAR:
 1102 1928 47F8046D 		_PUSH
 1103 192c 6646     		MOV TOS,IP
 1104 192e 0CF1040C 		ADD IP,IP,#4 
 1105 1932 A0E4     		B UNNEST 
 1106              	
 1107              	//    doCON	( -- a ) 
 1108              	// 	Run time routine for CONSTANT.
 1109              	
 1110              	// 	.word	_DOVAR
 1111              	// _DOCON	.byte  COMPO+5
 1112              	// 	.ascii "doCON"
 1113              	// 	.p2align 2 	
 1114              	DOCON:
 1115 1934 47F8046D 		_PUSH
 1116 1938 5CF8046B 		LDR.W TOS,[IP],#4 
 1117 193c 9BE4     		B UNNEST 
 1118              	
ARM GAS  forth.s 			page 78


 1119              	/***********************
 1120              	  system variables 
 1121              	***********************/
 1122              	
 1123              	 // SEED ( -- a)
 1124              	 // return PRNG seed address 
 1125              	
 1126 193e 10190000 		.word _DNEGA
 1127 1942 04       	_SEED: .byte 4
 1128 1943 53454544 		.ascii "SEED"
 1129 1947 00       		.p2align 2
 1130              	SEED:
 1131 1948 47F8046D 		_PUSH 
 1132 194c 04F10406 		ADD TOS,UP,#RNDSEED
 1133 1950 8EE4     		_NEXT 	
 1134              	
 1135              	//  MSEC ( -- a)
 1136              	// return address of milliseconds counter
 1137 1952 42190000 	  .word _SEED 
 1138 1956 04       	_MSEC: .byte 4
 1139 1957 4D534543 	  .ascii "MSEC"
 1140 195b 00       	  .p2align 2 
 1141              	MSEC:
 1142 195c 47F8046D 	  _PUSH
 1143 1960 04F10806 	  ADD TOS,UP,#TICKS
 1144 1964 84E4     	  _NEXT 
 1145              	
 1146              	// TIMER ( -- a )
 1147              	// count down timer 
 1148 1966 56190000 	  .word _MSEC
 1149 196a 05       	_TIMER:  .byte 5
 1150 196b 54494D45 	  .ascii "TIMER"
 1150      52
 1151              	  .p2align 2 
 1152              	TIMER:
 1153 1970 47F8046D 	  _PUSH 
 1154 1974 04F10C06 	  ADD TOS,UP,#CD_TIMER
 1155 1978 7AE4     	  _NEXT
 1156              	
 1157              	//    'BOOT	 ( -- a )
 1158              	// 	Application.
 1159              	
 1160 197a 6A190000 		.word	_TIMER
 1161 197e 05       	_TBOOT:	.byte   5
 1162 197f 27424F4F 		.ascii "'BOOT"
 1162      54
 1163              		.p2align 2 	
 1164              	TBOOT:
 1165 1984 47F8046D 		_PUSH
 1166 1988 04F11006 		ADD	TOS,UP,#BOOT 
 1167 198c 70E4     		_NEXT
 1168              		
 1169              	//    BASE	( -- a )
 1170              	// 	Storage of the radix base for numeric I/O.
 1171              	
 1172 198e 7E190000 		.word	_TBOOT
 1173 1992 04       	_BASE:	.byte   4
ARM GAS  forth.s 			page 79


 1174 1993 42415345 		.ascii "BASE"
 1175 1997 00       		.p2align 2 	
 1176              	BASE:
 1177 1998 47F8046D 		_PUSH
 1178 199c 04F11406 		ADD	TOS,UP,#NBASE
 1179 19a0 66E4     		_NEXT
 1180              	
 1181              	//    tmp	 ( -- a )
 1182              	// 	A temporary storage location used in parse and find.
 1183              	
 1184              	// 	.word	_BASE
 1185              	// _TEMP	.byte   COMPO+3
 1186              	// 	.ascii "tmp"
 1187              	// 	.p2align 2 	
 1188              	TEMP:
 1189 19a2 47F8046D 		_PUSH
 1190 19a6 04F11806 		ADD	TOS,UP,#TMP
 1191 19aa 61E4     		_NEXT
 1192              	
 1193              	//    SPAN	( -- a )
 1194              	// 	Hold character count received by EXPECT.
 1195              	
 1196 19ac 92190000 		.word	_BASE
 1197 19b0 04       	_SPAN:	.byte   4
 1198 19b1 5350414E 		.ascii "SPAN"
 1199 19b5 0000BF   		.p2align 2 	
 1200              	SPAN:
 1201 19b8 47F8046D 		_PUSH
 1202 19bc 04F11C06 		ADD	TOS,UP,#CSPAN
 1203 19c0 56E4     		_NEXT
 1204              	
 1205              	//    >IN	 ( -- a )
 1206              	// 	Hold the character pointer while parsing input stream.
 1207              	
 1208 19c2 B0190000 		.word	_SPAN
 1209 19c6 03       	_INN:	.byte   3
 1210 19c7 3E494E   		.ascii ">IN"
 1211 19ca 00BF     		.p2align 2 	
 1212              	INN:
 1213 19cc 47F8046D 		_PUSH
 1214 19d0 04F12006 		ADD	TOS,UP,#TOIN
 1215 19d4 4CE4     		_NEXT
 1216              	
 1217              	//    #TIB	( -- a )
 1218              	// 	Hold the current count and address of the terminal input buffer.
 1219              	
 1220 19d6 C6190000 		.word	_INN
 1221 19da 04       	_NTIB:	.byte   4
 1222 19db 23544942 		.ascii "#TIB"
 1223 19df 00       		.p2align 2 	
 1224              	NTIB:
 1225 19e0 47F8046D 		_PUSH
 1226 19e4 04F12406 		ADD	TOS,UP,#NTIBB
 1227 19e8 42E4     		_NEXT
 1228              	
 1229              	//    'EVAL	( -- a )
 1230              	// 	Execution vector of EVAL.
ARM GAS  forth.s 			page 80


 1231              	
 1232 19ea DA190000 		.word	_NTIB
 1233 19ee 05       	_TEVAL:	.byte   5
 1234 19ef 27455641 		.ascii "'EVAL"
 1234      4C
 1235              		.p2align 2 	
 1236              	TEVAL:
 1237 19f4 47F8046D 		_PUSH
 1238 19f8 04F12C06 		ADD	TOS,UP,#EVAL
 1239 19fc 38E4     		_NEXT
 1240              	
 1241              	//    HLD	 ( -- a )
 1242              	// 	Hold a pointer in building a numeric output string.
 1243              	
 1244 19fe EE190000 		.word	_TEVAL
 1245 1a02 03       	_HLD:	.byte   3
 1246 1a03 484C44   		.ascii "HLD"
 1247 1a06 00BF     		.p2align 2 	
 1248              	HLD:
 1249 1a08 47F8046D 		_PUSH
 1250 1a0c 04F13006 		ADD	TOS,UP,#HOLD
 1251 1a10 2EE4     		_NEXT
 1252              	
 1253              	//    CONTEXT	( -- a )
 1254              	// 	A area to specify vocabulary search order.
 1255              	
 1256 1a12 021A0000 		.word	_HLD
 1257 1a16 07       	_CNTXT:	.byte   7
 1258 1a17 434F4E54 		.ascii "CONTEXT"
 1258      455854
 1259 1a1e 00BF     		.p2align 2 	
 1260              	CNTXT:
 1261              	CRRNT:
 1262 1a20 47F8046D 		_PUSH
 1263 1a24 04F13406 		ADD	TOS,UP,#CTXT
 1264 1a28 22E4     		_NEXT
 1265              	
 1266              	//    CP	( -- a )
 1267              	// 	Point to top name in RAM vocabulary.
 1268              	
 1269 1a2a 161A0000 		.word	_CNTXT
 1270 1a2e 02       	_CP:	.byte   2
 1271 1a2f 4350     		.ascii "CP"
 1272 1a31 0000BF   		.p2align 2 	
 1273              	CPP:
 1274 1a34 47F8046D 		_PUSH
 1275 1a38 04F13C06 		ADD	TOS,UP,#USER_CTOP
 1276 1a3c 18E4     		_NEXT
 1277              	
 1278              	//   FCP ( -- a )
 1279              	//  Point ot top of Forth system dictionary
 1280 1a3e 2E1A0000 		.word _CP
 1281 1a42 03       	_FCP: .byte 3            
 1282 1a43 464350   		.ascii "FCP"
 1283 1a46 00BF     		.p2align 2 
 1284              	FCP: 
 1285 1a48 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 81


 1286 1a4c 04F13806 		ADD TOS,UP,#FORTH_CTOP 
 1287 1a50 0EE4     		_NEXT 
 1288              	
 1289              	//    LAST	( -- a )
 1290              	// 	Point to the last name in the name dictionary.
 1291              	
 1292 1a52 421A0000 		.word	_FCP
 1293 1a56 04       	_LAST:	.byte   4
 1294 1a57 4C415354 		.ascii "LAST"
 1295 1a5b 00       		.p2align 2 	
 1296              	LAST:
 1297 1a5c 47F8046D 		_PUSH
 1298 1a60 04F14006 		ADD	TOS,UP,#LASTN
 1299 1a64 04E4     		_NEXT
 1300              	
 1301              	
 1302              	/***********************
 1303              		system constants 
 1304              	***********************/
 1305              	
 1306              	//	USER_BEGIN ( -- a )
 1307              	//  where user area begin in RAM
 1308 1a66 561A0000 		.word _LAST
 1309 1a6a 0A       	_USER_BGN: .byte 10
 1310 1a6b 55534552 		.ascii "USER_BEGIN"
 1310      5F424547 
 1310      494E
 1311 1a75 0000BF   		.p2align 2
 1312              	USER_BEGIN:
 1313 1a78 47F8046D 		_PUSH 
 1314 1a7c DFF80460 		ldr TOS,USR_BGN_ADR 
 1315 1a80 FFF7F6BB 		_NEXT 
 1316              	USR_BGN_ADR:
 1317 1a84 12050020 	.word  DTOP 
 1318              	
 1319              	//  USER_END ( -- a )
 1320              	//  where user area end in RAM 
 1321 1a88 6A1A0000 		.word _USER_BGN
 1322 1a8c 08       	_USER_END: .byte 8 
 1323 1a8d 55534552 		.ascii "USER_END" 
 1323      5F454E44 
 1324 1a95 0000BF   		.p2align 2 
 1325              	USER_END:
 1326 1a98 47F8046D 		_PUSH 
 1327 1a9c DFF80460 		ldr TOS,USER_END_ADR 
 1328 1aa0 FFF7E6BB 		_NEXT 
 1329              	USER_END_ADR:
 1330 1aa4 FC800120 		.word DEND 
 1331              	
 1332              	
 1333              	/* *********************
 1334              	  Common functions
 1335              	***********************/
 1336              	
 1337              	//    WITHIN	( u ul uh -- t )
 1338              	// 	Return true if u is within the range of ul and uh.
 1339              	
ARM GAS  forth.s 			page 82


 1340 1aa8 8C1A0000 		.word	_USER_END 
 1341 1aac 06       	_WITHI:	.byte   6
 1342 1aad 57495448 		.ascii "WITHIN"
 1342      494E
 1343 1ab3 00       		.p2align 2 	
 1344              	WITHI:
 1345 1ab4 504700BF 		_NEST
 1346 1ab8 A1150000 		_ADR	OVER
 1347 1abc 51160000 		_ADR	SUBB
 1348 1ac0 25150000 		_ADR	TOR
 1349 1ac4 51160000 		_ADR	SUBB
 1350 1ac8 FD140000 		_ADR	RFROM
 1351 1acc 49180000 		_ADR	ULESS
 1352 1ad0 77120000 		_UNNEST
 1353              	
 1354              	//  Divide
 1355              	
 1356              	//    UM/MOD	( udl udh u -- ur uq )
 1357              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1358              	
 1359 1ad4 AC1A0000 		.word	_WITHI
 1360 1ad8 06       	_UMMOD:	.byte   6
 1361 1ad9 554D2F4D 		.ascii "UM/MOD"
 1361      4F44
 1362 1adf 00       		.p2align 2 	
 1363              	UMMOD:
 1364 1ae0 4FF00103 		MOV	T3,#1
 1365 1ae4 57F8045B 		LDR	WP,[DSP],#4
 1366 1ae8 3A68     		LDR	T2,[DSP]
 1367              	UMMOD0:
 1368 1aea 9218     		ADDS	T2,T2,T2
 1369 1aec 6D41     		ADCS	WP,WP,WP
 1370 1aee 04D3     		BCC	UMMOD1
 1371 1af0 A5EB0605 		SUB	WP,WP,TOS
 1372 1af4 02F10102 		ADD	T2,T2,#1
 1373 1af8 04E0     		B UMMOD2
 1374              	UMMOD1:
 1375 1afa AD1B     		SUBS	WP,WP,TOS 
 1376 1afc 28BF     		IT CS 
 1377 1afe 0132     		ADDCS	T2,T2,#1
 1378 1b00 00D2     		BCS	UMMOD2
 1379 1b02 3544     		ADD	WP,WP,TOS
 1380              	UMMOD2:
 1381 1b04 DB18     		ADDS	T3,T3,T3
 1382 1b06 F0D3     		BCC	UMMOD0
 1383 1b08 1646     		MOV	TOS,T2
 1384 1b0a 3D60     		STR	WP,[DSP]
 1385 1b0c FFF7B0BB 		_NEXT
 1386              	
 1387              	//    M/MOD	( d n -- r q )
 1388              	// 	Signed floored divide of double by single. Return mod and quotient.
 1389              	
 1390 1b10 D81A0000 		.word	_UMMOD
 1391 1b14 05       	_MSMOD:	.byte  5
 1392 1b15 4D2F4D4F 		.ascii "M/MOD"
 1392      44
 1393 1b1a 00BF     		.p2align 2 	
ARM GAS  forth.s 			page 83


 1394              	MSMOD:	
 1395 1b1c 504700BF 		_NEST
 1396 1b20 7D150000 		_ADR	DUPP
 1397 1b24 B1150000 		_ADR	ZLESS
 1398 1b28 7D150000 		_ADR	DUPP
 1399 1b2c 25150000 		_ADR	TOR
 1400 1b30 8B140000 		_QBRAN MMOD1
 1400      481B0000 
 1401 1b38 F9170000 		_ADR	NEGAT
 1402 1b3c 25150000 		_ADR	TOR
 1403 1b40 19190000 		_ADR	DNEGA
 1404 1b44 FD140000 		_ADR	RFROM
 1405              	MMOD1:
 1406 1b48 25150000 		_ADR	TOR
 1407 1b4c 7D150000 		_ADR	DUPP
 1408 1b50 B1150000 		_ADR	ZLESS
 1409 1b54 8B140000 		_QBRAN MMOD2
 1409      641B0000 
 1410 1b5c 11150000 		_ADR	RAT
 1411 1b60 41160000 		_ADR	PLUS
 1412              	MMOD2:
 1413 1b64 FD140000 		_ADR	RFROM
 1414 1b68 E11A0000 		_ADR	UMMOD
 1415 1b6c FD140000 		_ADR	RFROM
 1416 1b70 8B140000 		_QBRAN	MMOD3
 1416      841B0000 
 1417 1b78 8D150000 		_ADR	SWAP
 1418 1b7c F9170000 		_ADR	NEGAT
 1419 1b80 8D150000 		_ADR	SWAP
 1420              	MMOD3:   
 1421 1b84 77120000 		_UNNEST
 1422              	
 1423              	//    /MOD	( n n -- r q )
 1424              	// 	Signed divide. Return mod and quotient.
 1425              	
 1426 1b88 141B0000 		.word	_MSMOD
 1427 1b8c 04       	_SLMOD:	.byte   4
 1428 1b8d 2F4D4F44 		.ascii "/MOD"
 1429 1b91 0000BF   		.p2align 2 	
 1430              	SLMOD:
 1431 1b94 504700BF 		_NEST
 1432 1b98 A1150000 		_ADR	OVER
 1433 1b9c B1150000 		_ADR	ZLESS
 1434 1ba0 8D150000 		_ADR	SWAP
 1435 1ba4 1D1B0000 		_ADR	MSMOD
 1436 1ba8 77120000 		_UNNEST
 1437              	
 1438              	//    MOD	 ( n n -- r )
 1439              	// 	Signed divide. Return mod only.
 1440              	
 1441 1bac 8C1B0000 		.word	_SLMOD
 1442 1bb0 03       	_MODD:	.byte  3
 1443 1bb1 4D4F44   		.ascii "MOD"
 1444              		.p2align 2 	
 1445              	MODD:
 1446 1bb4 504700BF 		_NEST
 1447 1bb8 951B0000 		_ADR	SLMOD
ARM GAS  forth.s 			page 84


 1448 1bbc 6D150000 		_ADR	DROP
 1449 1bc0 77120000 		_UNNEST
 1450              	
 1451              	//    /	   ( n n -- q )
 1452              	// 	Signed divide. Return quotient only.
 1453              	
 1454 1bc4 B01B0000 		.word	_MODD
 1455 1bc8 01       	_SLASH:	.byte  1
 1456 1bc9 2F       		.ascii "/"
 1457 1bca 00BF     		.p2align 2 	
 1458              	SLASH:
 1459 1bcc 504700BF 		_NEST
 1460 1bd0 951B0000 		_ADR	SLMOD
 1461 1bd4 8D150000 		_ADR	SWAP
 1462 1bd8 6D150000 		_ADR	DROP
 1463 1bdc 77120000 		_UNNEST
 1464              	
 1465              	//    */MOD	( n1 n2 n3 -- r q )
 1466              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1467              	
 1468 1be0 C81B0000 		.word	_SLASH
 1469 1be4 05       	_SSMOD:	.byte  5
 1470 1be5 2A2F4D4F 		.ascii "*/MOD"
 1470      44
 1471 1bea 00BF     		.p2align 2 	
 1472              	SSMOD:
 1473 1bec 504700BF 		_NEST
 1474 1bf0 25150000 		_ADR	TOR
 1475 1bf4 89160000 		_ADR	MSTAR
 1476 1bf8 FD140000 		_ADR	RFROM
 1477 1bfc 1D1B0000 		_ADR	MSMOD
 1478 1c00 77120000 		_UNNEST
 1479              	
 1480              	//    */	  ( n1 n2 n3 -- q )
 1481              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1482              	
 1483 1c04 E41B0000 		.word	_SSMOD
 1484 1c08 02       	_STASL:	.byte  2
 1485 1c09 2A2F     		.ascii "*/"
 1486 1c0b 00       		.p2align 2 	
 1487              	STASL:
 1488 1c0c 504700BF 		_NEST
 1489 1c10 ED1B0000 		_ADR	SSMOD
 1490 1c14 8D150000 		_ADR	SWAP
 1491 1c18 6D150000 		_ADR	DROP
 1492 1c1c 77120000 		_UNNEST
 1493              	
 1494              	// **************************************************************************
 1495              	//  Miscellaneous
 1496              	
 1497              	//    ALIGNED	( b -- a )
 1498              	// 	Align address to the cell boundary.
 1499              	
 1500 1c20 081C0000 		.word	_STASL
 1501 1c24 07       	_ALGND:	.byte   7
 1502 1c25 414C4947 		.ascii "ALIGNED"
 1502      4E4544
ARM GAS  forth.s 			page 85


 1503              		.p2align 2 	
 1504              	ALGND:
 1505 1c2c 06F10306 		ADD	TOS,TOS,#3
 1506 1c30 6FF00305 		MVN	WP,#3
 1507 1c34 06EA0506 		AND	TOS,TOS,WP
 1508 1c38 FFF71ABB 		_NEXT
 1509              	
 1510              	//    >CHAR	( c -- c )
 1511              	// 	Filter non-printing characters.
 1512              	
 1513 1c3c 241C0000 		.word	_ALGND
 1514 1c40 05       	_TCHAR:	.byte  5
 1515 1c41 3E434841 		.ascii ">CHAR"
 1515      52
 1516 1c46 00BF     		.p2align 2 	
 1517              	TCHAR:
 1518 1c48 504700BF 		_NEST
 1519 1c4c 49140000 		_DOLIT  0x7F
 1519      7F000000 
 1520 1c54 C1150000 		_ADR	ANDD
 1521 1c58 7D150000 		_ADR	DUPP	// mask msb
 1522 1c5c FD160000 		_ADR	BLANK
 1523 1c60 49140000 		_DOLIT 	127
 1523      7F000000 
 1524 1c68 B51A0000 		_ADR	WITHI	// check for printable
 1525 1c6c E5170000 		_ADR	INVER
 1526 1c70 8B140000 		_QBRAN	TCHA1
 1526      841C0000 
 1527 1c78 6D150000 		_ADR	DROP
 1528 1c7c 49140000 		_DOLIT 	'_'	// replace non-printables
 1528      5F000000 
 1529              	TCHA1:
 1530 1c84 77120000 		  _UNNEST
 1531              	
 1532              	//    DEPTH	( -- n )
 1533              	// 	Return the depth of the data stack.
 1534              	
 1535 1c88 401C0000 		.word	_TCHAR
 1536 1c8c 05       	_DEPTH:	.byte  5
 1537 1c8d 44455054 		.ascii "DEPTH"
 1537      48
 1538 1c92 00BF     		.p2align 2 	
 1539              	DEPTH:
 1540 1c94 4FF47F42 		_MOV32 T2,SPP 
 1540      C2F20102 
 1541 1c9c A2EB0702 		SUB	T2,T2,DSP
 1542 1ca0 47F8046D 		_PUSH
 1543 1ca4 4FEAA206 		ASR	TOS,T2,#2
 1544 1ca8 FFF7E2BA 		_NEXT
 1545              	
 1546              	//    PICK	( ... +n -- ... w )
 1547              	// 	Copy the nth stack item to tos.
 1548              	
 1549 1cac 8C1C0000 		.word	_DEPTH
 1550 1cb0 04       	_PICK:	.byte  4
 1551 1cb1 5049434B 		.ascii "PICK"
 1552 1cb5 0000BF   		.p2align 2 	
ARM GAS  forth.s 			page 86


 1553              	PICK:
 1554 1cb8 504700BF 		_NEST
 1555 1cbc 9D160000 		_ADR	ONEP
 1556 1cc0 11170000 		_ADR	CELLS
 1557 1cc4 59150000 		_ADR	SPAT
 1558 1cc8 41160000 		_ADR	PLUS
 1559 1ccc D1140000 		_ADR	AT
 1560 1cd0 77120000 		_UNNEST
 1561              	
 1562              	// **************************************************************************
 1563              	//  Memory access
 1564              	
 1565              	//    HERE	( -- a )
 1566              	// 	Return the top of the code dictionary.
 1567              	
 1568 1cd4 B01C0000 		.word	_PICK
 1569 1cd8 04       	_HERE:	.byte  4
 1570 1cd9 48455245 		.ascii "HERE"
 1571 1cdd 0000BF   		.p2align 2 	
 1572              	HERE:
 1573 1ce0 504700BF 		_NEST
 1574 1ce4 351A0000 		_ADR	CPP
 1575 1ce8 D1140000 		_ADR	AT
 1576 1cec 77120000 		_UNNEST
 1577              		
 1578              	//    PAD	 ( -- a )
 1579              	// 	Return the address of a temporary buffer.
 1580              	
 1581 1cf0 D81C0000 		.word	_HERE
 1582 1cf4 03       	_PAD:	.byte  3
 1583 1cf5 504144   		.ascii "PAD"
 1584              		.p2align 2 	
 1585              	PAD:
 1586 1cf8 504700BF 		_NEST
 1587 1cfc E11C0000 		_ADR	HERE
 1588 1d00 49140000 		_DOLIT 80
 1588      50000000 
 1589 1d08 41160000 		_ADR PLUS 
 1590 1d0c 77120000 		_UNNEST
 1591              	
 1592              	//    TIB	 ( -- a )
 1593              	// 	Return the address of the terminal input buffer.
 1594              	
 1595 1d10 F41C0000 		.word	_PAD
 1596 1d14 03       	_TIB:	.byte  3
 1597 1d15 544942   		.ascii "TIB"
 1598              		.p2align 2 	
 1599              	TIB:
 1600 1d18 47F8046D 		_PUSH
 1601 1d1c A66A     		ldr TOS,[UP,#TIBUF]
 1602 1d1e FFF7A7BA 		_NEXT
 1603              	
 1604              	//    @EXECUTE	( a -- )
 1605              	// 	Execute vector stored in address a.
 1606              	
 1607 1d22 141D0000 		.word	_TIB
 1608 1d26 08       	_ATEXE:	.byte   8
ARM GAS  forth.s 			page 87


 1609 1d27 40455845 		.ascii "@EXECUTE"
 1609      43555445 
 1610 1d2f 00       		.p2align 2 	
 1611              	ATEXE: 
 1612 1d30 3500     		MOVS	WP,TOS
 1613 1d32 57F8046B 		_POP
 1614 1d36 2D68     		LDR	WP,[WP]
 1615 1d38 45F00105 		ORR	WP,WP,#1
 1616 1d3c 18BF     	    IT NE 
 1617 1d3e 2847     		BXNE	WP
 1618 1d40 FFF796BA 		_NEXT
 1619              	
 1620              	//    CMOVE	( b1 b2 u -- )
 1621              	// 	Copy u bytes from b1 to b2.
 1622              	
 1623 1d44 261D0000 		.word	_ATEXE
 1624 1d48 05       	_CMOVE:	.byte   5
 1625 1d49 434D4F56 		.ascii "CMOVE"
 1625      45
 1626 1d4e 00BF     		.p2align 2 	
 1627              	CMOVE:
 1628 1d50 57F8042B 		LDR	T2,[DSP],#4
 1629 1d54 57F8043B 		LDR	T3,[DSP],#4
 1630 1d58 03E0     		B CMOV1
 1631              	CMOV0:
 1632 1d5a 13F8015B 		LDRB	WP,[T3],#1
 1633 1d5e 02F8015B 		STRB	WP,[T2],#1
 1634              	CMOV1:
 1635 1d62 3600     		MOVS	TOS,TOS
 1636 1d64 02D0     		BEQ	CMOV2
 1637 1d66 A6F10106 		SUB	TOS,TOS,#1
 1638 1d6a F6E7     		B CMOV0
 1639              	CMOV2:
 1640 1d6c 57F8046B 		_POP
 1641 1d70 FFF77EBA 		_NEXT
 1642              	
 1643              	//    MOVE	( a1 a2 u -- )
 1644              	// 	Copy u words from a1 to a2.
 1645              	
 1646 1d74 481D0000 		.word	_CMOVE
 1647 1d78 04       	_MOVE:	.byte   4
 1648 1d79 4D4F5645 		.ascii "MOVE"
 1649 1d7d 0000BF   		.p2align 2 	
 1650              	MOVE:
 1651 1d80 26F00306 		AND	TOS,TOS,#-4
 1652 1d84 57F8042B 		LDR	T2,[DSP],#4
 1653 1d88 57F8043B 		LDR	T3,[DSP],#4
 1654 1d8c 03E0     		B MOVE1
 1655              	MOVE0:
 1656 1d8e 53F8045B 		LDR	WP,[T3],#4
 1657 1d92 42F8045B 		STR	WP,[T2],#4
 1658              	MOVE1:
 1659 1d96 3600     		MOVS	TOS,TOS
 1660 1d98 02D0     		BEQ	MOVE2
 1661 1d9a A6F10406 		SUB	TOS,TOS,#4
 1662 1d9e F6E7     		B MOVE0
 1663              	MOVE2:
ARM GAS  forth.s 			page 88


 1664 1da0 57F8046B 		_POP
 1665 1da4 FFF764BA 		_NEXT
 1666              	
 1667              	//    FILL	( b u c -- )
 1668              	// 	Fill u bytes of character c to area beginning at b.
 1669              	
 1670 1da8 781D0000 		.word	_MOVE
 1671 1dac 04       	_FILL:	.byte   4
 1672 1dad 46494C4C 		.ascii "FILL"
 1673 1db1 0000BF   		.p2align 2 	
 1674              	FILL:
 1675 1db4 03CF     		LDMFD DSP!,{T0,T1} 
 1676 1db6 0000     		MOVS T0,T0 
 1677 1db8 03D0     		BEQ FILL2
 1678              	FILL1:
 1679 1dba 01F8016B 		STRB	TOS,[T1],#1
 1680 1dbe 0138     		SUBS	T0,T0,#1
 1681 1dc0 FBD1     		BNE FILL1
 1682              	FILL2:
 1683 1dc2 57F8046B 		_POP
 1684 1dc6 FFF753BA 		_NEXT
 1685              	
 1686              	//    PACK$	( b u a -- a )
 1687              	// 	Build a counted word with u characters from b. Null fill.
 1688              	
 1689 1dca AC1D0000 		.word	_FILL
 1690 1dce 05       	_PACKS:	.byte  5
 1691 1dcf 5041434B 		.ascii "PACK$$"
 1691      2424
 1692 1dd5 0000BF   		.p2align 2 	
 1693              	PACKS:
 1694 1dd8 504700BF 		_NEST
 1695 1ddc 2D1C0000 		_ADR	ALGND
 1696 1de0 7D150000 		_ADR	DUPP
 1697 1de4 25150000 		_ADR	TOR			// strings only on cell boundary
 1698 1de8 A1150000 		_ADR	OVER
 1699 1dec 41160000 		_ADR	PLUS
 1700 1df0 9D160000 		_ADR	ONEP
 1701 1df4 49140000 		_DOLIT 	0xFFFFFFFC
 1701      FCFFFFFF 
 1702 1dfc C1150000 		_ADR	ANDD			// count mod cell
 1703 1e00 49140000 		_DOLIT 	0
 1703      00000000 
 1704 1e08 8D150000 		_ADR	SWAP
 1705 1e0c BD140000 		_ADR	STORE			// null fill cell
 1706 1e10 11150000 		_ADR	RAT
 1707 1e14 B5170000 		_ADR	DDUP
 1708 1e18 DD140000 		_ADR	CSTOR
 1709 1e1c 9D160000 		_ADR	ONEP			// save count
 1710 1e20 8D150000 		_ADR	SWAP
 1711 1e24 511D0000 		_ADR	CMOVE
 1712 1e28 FD140000 		_ADR	RFROM
 1713 1e2c 77120000 		_UNNEST   			// move string
 1714              	
 1715              	// **************************************************************************
 1716              	//  Numeric output, single precision
 1717              	
ARM GAS  forth.s 			page 89


 1718              	//    DIGIT	( u -- c )
 1719              	// 	Convert digit u to a character.
 1720              	
 1721 1e30 CE1D0000 		.word	_PACKS
 1722 1e34 05       	_DIGIT:	.byte  5
 1723 1e35 44494749 		.ascii "DIGIT"
 1723      54
 1724 1e3a 00BF     		.p2align 2 	
 1725              	DIGIT:
 1726 1e3c 504700BF 		_NEST
 1727 1e40 49140000 		_DOLIT 9
 1727      09000000 
 1728 1e48 A1150000 		_ADR	OVER
 1729 1e4c 61180000 		_ADR	LESS
 1730 1e50 49140000 		_DOLIT	7
 1730      07000000 
 1731 1e58 C1150000 		_ADR	ANDD
 1732 1e5c 41160000 		_ADR	PLUS
 1733 1e60 49140000 		_DOLIT	'0'
 1733      30000000 
 1734 1e68 41160000 		_ADR	PLUS 
 1735 1e6c 77120000 		_UNNEST
 1736              	
 1737              	//    EXTRACT	( n base -- n c )
 1738              	// 	Extract the least significant digit from n.
 1739              	
 1740 1e70 341E0000 		.word	_DIGIT
 1741 1e74 07       	_EXTRC:	.byte  7
 1742 1e75 45585452 		.ascii "EXTRACT"
 1742      414354
 1743              		.p2align 2 	
 1744              	EXTRC:
 1745 1e7c 504700BF 		_NEST
 1746 1e80 49140000 		_DOLIT 0
 1746      00000000 
 1747 1e88 8D150000 		_ADR	SWAP
 1748 1e8c E11A0000 		_ADR	UMMOD
 1749 1e90 8D150000 		_ADR	SWAP
 1750 1e94 3D1E0000 		_ADR	DIGIT
 1751 1e98 77120000 		_UNNEST
 1752              	
 1753              	//    <#	  ( -- )
 1754              	// 	Initiate the numeric output process.
 1755              	
 1756 1e9c 741E0000 		.word	_EXTRC
 1757 1ea0 02       	_BDIGS:	.byte  2
 1758 1ea1 3C23     		.ascii "<#"
 1759 1ea3 00       		.p2align 2 	
 1760              	BDIGS:
 1761 1ea4 504700BF 		_NEST
 1762 1ea8 F91C0000 		_ADR	PAD
 1763 1eac 091A0000 		_ADR	HLD
 1764 1eb0 BD140000 		_ADR	STORE
 1765 1eb4 77120000 		_UNNEST
 1766              	
 1767              	//    HOLD	( c -- )
 1768              	// 	Insert a character into the numeric output string.
ARM GAS  forth.s 			page 90


 1769              	
 1770 1eb8 A01E0000 		.word	_BDIGS
 1771 1ebc 04       	_HOLD:	.byte  4
 1772 1ebd 484F4C44 		.ascii "HOLD"
 1773 1ec1 0000BF   		.p2align 2 	
 1774              	HOLD:
 1775 1ec4 504700BF 		_NEST
 1776 1ec8 091A0000 		_ADR	HLD
 1777 1ecc D1140000 		_ADR	AT
 1778 1ed0 AD160000 		_ADR	ONEM
 1779 1ed4 7D150000 		_ADR	DUPP
 1780 1ed8 091A0000 		_ADR	HLD
 1781 1edc BD140000 		_ADR	STORE
 1782 1ee0 DD140000 		_ADR	CSTOR
 1783 1ee4 77120000 		_UNNEST
 1784              	
 1785              	//    #	   ( u -- u )
 1786              	// 	Extract one digit from u and append the digit to output string.
 1787              	
 1788 1ee8 BC1E0000 		.word	_HOLD
 1789 1eec 01       	_DIG:	.byte  1
 1790 1eed 23       		.ascii "#"
 1791 1eee 00BF     		.p2align 2 	
 1792              	DIG:
 1793 1ef0 504700BF 		_NEST
 1794 1ef4 99190000 		_ADR	BASE
 1795 1ef8 D1140000 		_ADR	AT
 1796 1efc 7D1E0000 		_ADR	EXTRC
 1797 1f00 C51E0000 		_ADR	HOLD
 1798 1f04 77120000 		_UNNEST
 1799              	
 1800              	//    #S	  ( u -- 0 )
 1801              	// 	Convert u until all digits are added to the output string.
 1802              	
 1803 1f08 EC1E0000 		.word	_DIG
 1804 1f0c 02       	_DIGS:	.byte  2
 1805 1f0d 2353     		.ascii "#S"
 1806 1f0f 00       		.p2align 2 	
 1807              	DIGS:
 1808 1f10 504700BF 		_NEST
 1809              	DIGS1:
 1810 1f14 F11E0000 	    _ADR	DIG
 1811 1f18 7D150000 		_ADR	DUPP
 1812 1f1c 8B140000 		_QBRAN 	DIGS2
 1812      2C1F0000 
 1813 1f24 9F140000 		_BRAN	DIGS1
 1813      141F0000 
 1814              	DIGS2:
 1815 1f2c 77120000 		  _UNNEST
 1816              	
 1817              	//    SIGN	( n -- )
 1818              	// 	Add a minus sign to the numeric output string.
 1819              	
 1820 1f30 0C1F0000 		.word	_DIGS
 1821 1f34 04       	_SIGN:	.byte  4
 1822 1f35 5349474E 		.ascii "SIGN"
 1823 1f39 0000BF   		.p2align 2 	
ARM GAS  forth.s 			page 91


 1824              	SIGN:
 1825 1f3c 504700BF 		_NEST
 1826 1f40 B1150000 		_ADR	ZLESS
 1827 1f44 8B140000 		_QBRAN	SIGN1
 1827      581F0000 
 1828 1f4c 49140000 		_DOLIT '-'
 1828      2D000000 
 1829 1f54 C51E0000 		_ADR	HOLD
 1830              	SIGN1:
 1831 1f58 77120000 		  _UNNEST
 1832              	
 1833              	//    #>	  ( w -- b u )
 1834              	// 	Prepare the output word to be TYPE'd.
 1835              	
 1836 1f5c 341F0000 		.word	_SIGN
 1837 1f60 02       	_EDIGS:	.byte  2
 1838 1f61 233E     		.ascii "#>"
 1839 1f63 00       		.p2align 2 	
 1840              	EDIGS:
 1841 1f64 504700BF 		_NEST
 1842 1f68 6D150000 		_ADR	DROP
 1843 1f6c 091A0000 		_ADR	HLD
 1844 1f70 D1140000 		_ADR	AT
 1845 1f74 F91C0000 		_ADR	PAD
 1846 1f78 A1150000 		_ADR	OVER
 1847 1f7c 51160000 		_ADR	SUBB
 1848 1f80 77120000 		_UNNEST
 1849              	
 1850              	//    str	 ( n -- b u )
 1851              	// 	Convert a signed integer to a numeric string.
 1852              	
 1853              	// 	.word	_EDIGS
 1854              	// _STRR	.byte  3
 1855              	// 	.ascii "str"
 1856              	// 	.p2align 2 	
 1857              	STRR:
 1858 1f84 504700BF 		_NEST
 1859 1f88 7D150000 		_ADR	DUPP
 1860 1f8c 25150000 		_ADR	TOR
 1861 1f90 09180000 		_ADR	ABSS
 1862 1f94 A51E0000 		_ADR	BDIGS
 1863 1f98 111F0000 		_ADR	DIGS
 1864 1f9c FD140000 		_ADR	RFROM
 1865 1fa0 3D1F0000 		_ADR	SIGN
 1866 1fa4 651F0000 		_ADR	EDIGS
 1867 1fa8 77120000 		_UNNEST
 1868              	
 1869              	//    HEX	 ( -- )
 1870              	// 	Use radix 16 as base for numeric conversions.
 1871              	
 1872 1fac 601F0000 		.word	_EDIGS
 1873 1fb0 03       	_HEX:	.byte  3
 1874 1fb1 484558   		.ascii "HEX"
 1875              		.p2align 2 	
 1876              	HEX:
 1877 1fb4 504700BF 		_NEST
 1878 1fb8 49140000 		_DOLIT 16
ARM GAS  forth.s 			page 92


 1878      10000000 
 1879 1fc0 99190000 		_ADR	BASE
 1880 1fc4 BD140000 		_ADR	STORE
 1881 1fc8 77120000 		_UNNEST
 1882              	
 1883              	//    DECIMAL	( -- )
 1884              	// 	Use radix 10 as base for numeric conversions.
 1885              	
 1886 1fcc B01F0000 		.word	_HEX
 1887 1fd0 07       	_DECIM:	.byte  7
 1888 1fd1 44454349 		.ascii "DECIMAL"
 1888      4D414C
 1889              		.p2align 2 	
 1890              	DECIM:
 1891 1fd8 504700BF 		_NEST
 1892 1fdc 49140000 		_DOLIT 10
 1892      0A000000 
 1893 1fe4 99190000 		_ADR	BASE
 1894 1fe8 BD140000 		_ADR	STORE
 1895 1fec 77120000 		_UNNEST
 1896              	
 1897              	// **************************************************************************
 1898              	//  Numeric input, single precision
 1899              	
 1900              	//    DIGIT?	( c base -- u t )
 1901              	// 	Convert a character to its numeric value. A flag indicates success.
 1902              	
 1903 1ff0 D01F0000 		.word	_DECIM
 1904 1ff4 06       	_DIGTQ:	.byte  6
 1905 1ff5 44494749 		.ascii "DIGIT?"
 1905      543F
 1906 1ffb 00       		.p2align 2 	
 1907              	DIGTQ:
 1908 1ffc 504700BF 		_NEST
 1909 2000 25150000 		_ADR	TOR
 1910 2004 49140000 		_DOLIT 	'0'
 1910      30000000 
 1911 200c 51160000 		_ADR	SUBB
 1912 2010 49140000 		_DOLIT 9
 1912      09000000 
 1913 2018 A1150000 		_ADR	OVER
 1914 201c 61180000 		_ADR	LESS
 1915 2020 8B140000 		_QBRAN	DGTQ1
 1915      48200000 
 1916 2028 49140000 		_DOLIT 7
 1916      07000000 
 1917 2030 51160000 		_ADR	SUBB
 1918 2034 7D150000 		_ADR	DUPP
 1919 2038 49140000 		_DOLIT	10
 1919      0A000000 
 1920 2040 61180000 		_ADR	LESS
 1921 2044 D5150000 		_ADR	ORR
 1922              	DGTQ1:
 1923 2048 7D150000 		_ADR	DUPP
 1924 204c FD140000 		_ADR	RFROM
 1925 2050 49180000 		_ADR	ULESS
 1926 2054 77120000 		_UNNEST
ARM GAS  forth.s 			page 93


 1927              	
 1928              	//    NUMBER?	( a -- n T | a F )
 1929              	// 	Convert a number word to integer. Push a flag on tos.
 1930              	
 1931 2058 F41F0000 		.word	_DIGTQ
 1932 205c 07       	_NUMBQ:	.byte  7
 1933 205d 4E554D42 		.ascii "NUMBER?"
 1933      45523F
 1934              		.p2align 2 	
 1935              	NUMBQ:
 1936 2064 504700BF 		_NEST
 1937 2068 99190000 		_ADR	BASE
 1938 206c D1140000 		_ADR	AT
 1939 2070 25150000 		_ADR	TOR
 1940 2074 49140000 		_DOLIT	0
 1940      00000000 
 1941 207c A1150000 		_ADR	OVER
 1942 2080 01190000 		_ADR	COUNT
 1943 2084 A1150000 		_ADR	OVER
 1944 2088 F1140000 		_ADR	CAT
 1945 208c 49140000 		_DOLIT '$'
 1945      24000000 
 1946 2094 31180000 		_ADR	EQUAL
 1947 2098 8B140000 		_QBRAN	NUMQ1
 1947      B4200000 
 1948 20a0 B51F0000 		_ADR	HEX
 1949 20a4 8D150000 		_ADR	SWAP
 1950 20a8 9D160000 		_ADR	ONEP
 1951 20ac 8D150000 		_ADR	SWAP
 1952 20b0 AD160000 		_ADR	ONEM
 1953              	NUMQ1:
 1954 20b4 A1150000 		_ADR	OVER
 1955 20b8 F1140000 		_ADR	CAT
 1956 20bc 49140000 		_DOLIT	'-'
 1956      2D000000 
 1957 20c4 31180000 		_ADR	EQUAL
 1958 20c8 25150000 		_ADR	TOR
 1959 20cc 8D150000 		_ADR	SWAP
 1960 20d0 11150000 		_ADR	RAT
 1961 20d4 51160000 		_ADR	SUBB
 1962 20d8 8D150000 		_ADR	SWAP
 1963 20dc 11150000 		_ADR	RAT
 1964 20e0 41160000 		_ADR	PLUS
 1965 20e4 51170000 		_ADR	QDUP
 1966 20e8 8B140000 		_QBRAN	NUMQ6
 1966      7C210000 
 1967 20f0 AD160000 		_ADR	ONEM
 1968 20f4 25150000 		_ADR	TOR
 1969              	NUMQ2:
 1970 20f8 7D150000 		_ADR	DUPP
 1971 20fc 25150000 		_ADR	TOR
 1972 2100 F1140000 		_ADR	CAT
 1973 2104 99190000 		_ADR	BASE
 1974 2108 D1140000 		_ADR	AT
 1975 210c FD1F0000 		_ADR	DIGTQ
 1976 2110 8B140000 		_QBRAN	NUMQ4
 1976      60210000 
ARM GAS  forth.s 			page 94


 1977 2118 8D150000 		_ADR	SWAP
 1978 211c 99190000 		_ADR	BASE
 1979 2120 D1140000 		_ADR	AT
 1980 2124 61160000 		_ADR	STAR
 1981 2128 41160000 		_ADR	PLUS
 1982 212c FD140000 		_ADR	RFROM
 1983 2130 9D160000 		_ADR	ONEP
 1984 2134 6D140000 		_DONXT	NUMQ2
 1984      F8200000 
 1985 213c 11150000 		_ADR	RAT
 1986 2140 8D150000 		_ADR	SWAP
 1987 2144 6D150000 		_ADR	DROP
 1988 2148 8B140000 		_QBRAN	NUMQ3
 1988      54210000 
 1989 2150 F9170000 		_ADR	NEGAT
 1990              	NUMQ3:
 1991 2154 8D150000 		_ADR	SWAP
 1992 2158 9F140000 		_BRAN	NUMQ5
 1992      78210000 
 1993              	NUMQ4:
 1994 2160 FD140000 		_ADR	RFROM
 1995 2164 FD140000 		_ADR	RFROM
 1996 2168 8D170000 		_ADR	DDROP
 1997 216c 8D170000 		_ADR	DDROP
 1998 2170 49140000 		_DOLIT	0
 1998      00000000 
 1999              	NUMQ5:
 2000 2178 7D150000 		_ADR	DUPP
 2001              	NUMQ6:
 2002 217c FD140000 		_ADR	RFROM
 2003 2180 8D170000 		_ADR	DDROP
 2004 2184 FD140000 		_ADR	RFROM
 2005 2188 99190000 		_ADR	BASE
 2006 218c BD140000 		_ADR	STORE
 2007 2190 77120000 		_UNNEST
 2008              	
 2009              	// **************************************************************************
 2010              	//  Basic I/O
 2011              	
 2012              	//    KEY	 ( -- c )
 2013              	// 	Wait for and return an input character.
 2014              	
 2015 2194 5C200000 		.word	_NUMBQ
 2016 2198 03       	_KEY:	.byte  3
 2017 2199 4B4559   		.ascii "KEY"
 2018              		.p2align 2 	
 2019              	KEY:
 2020 219c 504700BF 		_NEST
 2021              	KEY1:
 2022 21a0 F1130000 		_ADR	QRX
 2023 21a4 8B140000 		_QBRAN	KEY1
 2023      A0210000 
 2024 21ac 77120000 		_UNNEST
 2025              	
 2026              	//    SPACE	( -- )
 2027              	// 	Send the blank character to the output device.
 2028              	
ARM GAS  forth.s 			page 95


 2029 21b0 98210000 		.word	_KEY
 2030 21b4 05       	_SPACE:	.byte  5
 2031 21b5 53504143 		.ascii "SPACE"
 2031      45
 2032 21ba 00BF     		.p2align 2 	
 2033              	SPACE:
 2034 21bc 504700BF 		_NEST
 2035 21c0 FD160000 		_ADR	BLANK
 2036 21c4 25140000 		_ADR	EMIT
 2037 21c8 77120000 		_UNNEST
 2038              	
 2039              	//    SPACES	( +n -- )
 2040              	// 	Send n spaces to the output device.
 2041              	
 2042 21cc B4210000 		.word	_SPACE
 2043 21d0 06       	_SPACS:	.byte  6
 2044 21d1 53504143 		.ascii "SPACES"
 2044      4553
 2045 21d7 00       		.p2align 2 	
 2046              	SPACS:
 2047 21d8 504700BF 		_NEST
 2048 21dc 49140000 		_DOLIT	0
 2048      00000000 
 2049 21e4 91180000 		_ADR	MAX
 2050 21e8 25150000 		_ADR	TOR
 2051 21ec 9F140000 		_BRAN	CHAR2
 2051      F8210000 
 2052              	CHAR1:
 2053 21f4 BD210000 		_ADR	SPACE
 2054              	CHAR2:
 2055 21f8 6D140000 		_DONXT	CHAR1
 2055      F4210000 
 2056 2200 77120000 		_UNNEST
 2057              	
 2058              	//    TYPE	( b u -- )
 2059              	// 	Output u characters from b.
 2060              	
 2061 2204 D0210000 		.word	_SPACS
 2062 2208 04       	_TYPEE:	.byte	4
 2063 2209 54595045 		.ascii "TYPE"
 2064 220d 0000BF   		.p2align 2 	
 2065              	TYPEE:
 2066 2210 504700BF 		_NEST
 2067 2214 25150000 		_ADR  TOR   // ( a+1 -- R: u )
 2068 2218 9F140000 		_BRAN	TYPE2
 2068      2C220000 
 2069              	TYPE1:  
 2070 2220 01190000 		_ADR  COUNT
 2071 2224 491C0000 		_ADR TCHAR
 2072 2228 25140000 		_ADR EMIT
 2073              	TYPE2:  
 2074 222c 6D140000 		_DONXT	TYPE1
 2074      20220000 
 2075 2234 6D150000 		_ADR	DROP
 2076 2238 77120000 		_UNNEST
 2077              	
 2078              	//    CR	  ( -- )
ARM GAS  forth.s 			page 96


 2079              	// 	Output a carriage return and a line feed.
 2080              	
 2081 223c 08220000 		.word	_TYPEE
 2082 2240 02       	_CR:	.byte  2
 2083 2241 4352     		.ascii "CR"
 2084 2243 00       		.p2align 2 	
 2085              	CR:
 2086 2244 504700BF 		_NEST
 2087 2248 49140000 		_DOLIT	CRR
 2087      0D000000 
 2088 2250 25140000 		_ADR	EMIT
 2089 2254 49140000 		_DOLIT	LF
 2089      0A000000 
 2090 225c 25140000 		_ADR	EMIT
 2091 2260 77120000 		_UNNEST
 2092              	
 2093              	//    do_$	( -- a )
 2094              	// 	Return the address of a compiled string.
 2095              	//  adjust return address to skip over it.
 2096              	
 2097              	// 	.word	_CR
 2098              	// _DOSTR	.byte  COMPO+3
 2099              	// 	.ascii "do$$"
 2100              	// 	.p2align 2 	
 2101              	DOSTR:
 2102 2264 504700BF 		_NEST     
 2103              	/* compiled string address is 2 levels deep */
 2104 2268 FD140000 		_ADR	RFROM	// { -- a1 }
 2105 226c FD140000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2106 2270 7D150000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2107 2274 01190000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2108 2278 41160000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2109 227c 2D1C0000 		_ADR	ALGND	//  end of string
 2110              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2111 2280 25150000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2112 2284 8D150000 		_ADR	SWAP	//  count tugged
 2113 2288 25150000 		_ADR	TOR     //  ( -- a2) is string address
 2114 228c 77120000 		_UNNEST
 2115              	
 2116              	//    $"|	( -- a )
 2117              	// 	Run time routine compiled by _". Return address of a compiled string.
 2118              	
 2119              	// 	.word	_DOSTR
 2120              	// _STRQP	.byte  COMPO+3
 2121              	// 	.ascii "$\"|"
 2122              	// 	.p2align 2 	
 2123              	STRQP:
 2124 2290 504700BF 		_NEST
 2125 2294 65220000 		_ADR	DOSTR
 2126 2298 77120000 		_UNNEST			// force a call to dostr
 2127              	
 2128              	//    .$	( a -- )
 2129              	// 	Run time routine of ." . Output a compiled string.
 2130              	
 2131              	// 	.word	_STRQP
 2132              	// _DOTST	.byte  COMPO+2
 2133              	// 	.ascii ".$$"
ARM GAS  forth.s 			page 97


 2134              	// 	.p2align 2 	
 2135              	DOTST:
 2136 229c 504700BF 		_NEST
 2137 22a0 01190000 		_ADR	COUNT // ( -- a+1 c )
 2138 22a4 11220000 		_ADR	TYPEE
 2139 22a8 77120000 		_UNNEST
 2140              	
 2141              	//    ."|	( -- )
 2142              	// 	Run time routine of ." . Output a compiled string.
 2143              	
 2144              	// 	.word	_DOTST
 2145              	// _DOTQP	.byte  COMPO+3
 2146              	// 	.ascii ".""|"
 2147              	// 	.p2align 2 	
 2148              	DOTQP:
 2149 22ac 504700BF 		_NEST
 2150 22b0 65220000 		_ADR	DOSTR
 2151 22b4 9D220000 		_ADR	DOTST
 2152 22b8 77120000 		_UNNEST
 2153              	
 2154              	//    .R	  ( n +n -- )
 2155              	// 	Display an integer in a field of n columns, right justified.
 2156              	
 2157 22bc 40220000 		.word	_CR
 2158 22c0 02       	_DOTR:	.byte  2
 2159 22c1 2E52     		.ascii ".R"
 2160 22c3 00       		.p2align 2 	
 2161              	DOTR:
 2162 22c4 504700BF 		_NEST
 2163 22c8 25150000 		_ADR	TOR
 2164 22cc 851F0000 		_ADR	STRR
 2165 22d0 FD140000 		_ADR	RFROM
 2166 22d4 A1150000 		_ADR	OVER
 2167 22d8 51160000 		_ADR	SUBB
 2168 22dc D9210000 		_ADR	SPACS
 2169 22e0 11220000 		_ADR	TYPEE
 2170 22e4 77120000 		_UNNEST
 2171              	
 2172              	//    U.R	 ( u +n -- )
 2173              	// 	Display an unsigned integer in n column, right justified.
 2174              	
 2175 22e8 C0220000 		.word	_DOTR
 2176 22ec 03       	_UDOTR:	.byte  3
 2177 22ed 552E52   		.ascii "U.R"
 2178              		.p2align 2 	
 2179              	UDOTR:
 2180 22f0 504700BF 		_NEST
 2181 22f4 25150000 		_ADR	TOR
 2182 22f8 A51E0000 		_ADR	BDIGS
 2183 22fc 111F0000 		_ADR	DIGS
 2184 2300 651F0000 		_ADR	EDIGS
 2185 2304 FD140000 		_ADR	RFROM
 2186 2308 A1150000 		_ADR	OVER
 2187 230c 51160000 		_ADR	SUBB
 2188 2310 D9210000 		_ADR	SPACS
 2189 2314 11220000 		_ADR	TYPEE
 2190 2318 77120000 		_UNNEST
ARM GAS  forth.s 			page 98


 2191              	
 2192              	//    U.	  ( u -- )
 2193              	// 	Display an unsigned integer in free format.
 2194              	
 2195 231c EC220000 		.word	_UDOTR
 2196 2320 02       	_UDOT:	.byte  2
 2197 2321 552E     		.ascii "U."
 2198 2323 00       		.p2align 2 	
 2199              	UDOT:
 2200 2324 504700BF 		_NEST
 2201 2328 A51E0000 		_ADR	BDIGS
 2202 232c 111F0000 		_ADR	DIGS
 2203 2330 651F0000 		_ADR	EDIGS
 2204 2334 BD210000 		_ADR	SPACE
 2205 2338 11220000 		_ADR	TYPEE
 2206 233c 77120000 		_UNNEST
 2207              	
 2208              	//    .	   ( w -- )
 2209              	// 	Display an integer in free format, preceeded by a space.
 2210              	
 2211 2340 20230000 		.word	_UDOT
 2212 2344 01       	_DOT:	.byte  1
 2213 2345 2E       		.ascii "."
 2214 2346 00BF     		.p2align 2 	
 2215              	DOT:
 2216 2348 504700BF 		_NEST
 2217 234c 99190000 		_ADR	BASE
 2218 2350 D1140000 		_ADR	AT
 2219 2354 49140000 		_DOLIT 10
 2219      0A000000 
 2220 235c E9150000 		_ADR	XORR			// ?decimal
 2221 2360 8B140000 		_QBRAN	DOT1
 2221      70230000 
 2222 2368 25230000 		_ADR	UDOT
 2223 236c 77120000 		_UNNEST			// no,display unsigned
 2224              	DOT1:
 2225 2370 851F0000 	    _ADR	STRR
 2226 2374 BD210000 		_ADR	SPACE
 2227 2378 11220000 		_ADR	TYPEE
 2228 237c 77120000 		_UNNEST			// yes, display signed
 2229              	
 2230              	//    ?	   ( a -- )
 2231              	// 	Display the contents in a memory cell.
 2232              	
 2233 2380 44230000 		.word	_DOT
 2234 2384 01       	_QUEST:	.byte  1
 2235 2385 3F       		.ascii "?"
 2236 2386 00BF     		.p2align 2 	
 2237              	QUEST:
 2238 2388 504700BF 		_NEST
 2239 238c D1140000 		_ADR	AT
 2240 2390 49230000 		_ADR	DOT
 2241 2394 77120000 		_UNNEST
 2242              	
 2243              	// **************************************************************************
 2244              	//  Parsing
 2245              	
ARM GAS  forth.s 			page 99


 2246              	//    parse	( b u c -- b u delta //  string> )
 2247              	// 	Scan word delimited by c. Return found string and its offset.
 2248              	
 2249              	// 	.word	_QUEST
 2250              	// _PARS	.byte  5
 2251              	// 	.ascii "parse"
 2252              	// 	.p2align 2 	
 2253              	PARS:
 2254 2398 504700BF 		_NEST
 2255 239c A3190000 		_ADR	TEMP
 2256 23a0 BD140000 		_ADR	STORE
 2257 23a4 A1150000 		_ADR	OVER
 2258 23a8 25150000 		_ADR	TOR
 2259 23ac 7D150000 		_ADR	DUPP
 2260 23b0 8B140000 		_QBRAN	PARS8
 2260      AC240000 
 2261 23b8 AD160000 		_ADR	ONEM
 2262 23bc A3190000 		_ADR	TEMP
 2263 23c0 D1140000 		_ADR	AT
 2264 23c4 FD160000 		_ADR	BLANK
 2265 23c8 31180000 		_ADR	EQUAL
 2266 23cc 8B140000 		_QBRAN	PARS3
 2266      20240000 
 2267 23d4 25150000 		_ADR	TOR
 2268              	PARS1:
 2269 23d8 FD160000 		_ADR	BLANK
 2270 23dc A1150000 		_ADR	OVER
 2271 23e0 F1140000 		_ADR	CAT			// skip leading blanks 
 2272 23e4 51160000 		_ADR	SUBB
 2273 23e8 B1150000 		_ADR	ZLESS
 2274 23ec E5170000 		_ADR	INVER
 2275 23f0 8B140000 		_QBRAN	PARS2
 2275      1C240000 
 2276 23f8 9D160000 		_ADR	ONEP
 2277 23fc 6D140000 		_DONXT	PARS1
 2277      D8230000 
 2278 2404 FD140000 		_ADR	RFROM
 2279 2408 6D150000 		_ADR	DROP
 2280 240c 49140000 		_DOLIT	0
 2280      00000000 
 2281 2414 7D150000 		_ADR	DUPP
 2282 2418 77120000 		_UNNEST
 2283              	PARS2:
 2284 241c FD140000 		_ADR	RFROM
 2285              	PARS3:
 2286 2420 A1150000 		_ADR	OVER
 2287 2424 8D150000 		_ADR	SWAP
 2288 2428 25150000 		_ADR	TOR
 2289              	PARS4:
 2290 242c A3190000 		_ADR	TEMP
 2291 2430 D1140000 		_ADR	AT
 2292 2434 A1150000 		_ADR	OVER
 2293 2438 F1140000 		_ADR	CAT
 2294 243c 51160000 		_ADR	SUBB			// scan for delimiter
 2295 2440 A3190000 		_ADR	TEMP
 2296 2444 D1140000 		_ADR	AT
 2297 2448 FD160000 		_ADR	BLANK
ARM GAS  forth.s 			page 100


 2298 244c 31180000 		_ADR	EQUAL
 2299 2450 8B140000 		_QBRAN	PARS5
 2299      5C240000 
 2300 2458 B1150000 		_ADR	ZLESS
 2301              	PARS5:
 2302 245c 8B140000 		_QBRAN	PARS6
 2302      80240000 
 2303 2464 9D160000 		_ADR	ONEP
 2304 2468 6D140000 		_DONXT	PARS4
 2304      2C240000 
 2305 2470 7D150000 		_ADR	DUPP
 2306 2474 25150000 		_ADR	TOR
 2307 2478 9F140000 		_BRAN	PARS7
 2307      94240000 
 2308              	PARS6:
 2309 2480 FD140000 		_ADR	RFROM
 2310 2484 6D150000 		_ADR	DROP
 2311 2488 7D150000 		_ADR	DUPP
 2312 248c 9D160000 		_ADR	ONEP
 2313 2490 25150000 		_ADR	TOR
 2314              	PARS7:
 2315 2494 A1150000 		_ADR	OVER
 2316 2498 51160000 		_ADR	SUBB
 2317 249c FD140000 		_ADR	RFROM
 2318 24a0 FD140000 		_ADR	RFROM
 2319 24a4 51160000 		_ADR	SUBB
 2320 24a8 77120000 		_UNNEST
 2321              	PARS8:
 2322 24ac A1150000 		_ADR	OVER
 2323 24b0 FD140000 		_ADR	RFROM
 2324 24b4 51160000 		_ADR	SUBB
 2325 24b8 77120000 		_UNNEST
 2326              	
 2327              	//    PARSE	( c -- b u //  string> )
 2328              	// 	Scan input stream and return counted string delimited by c.
 2329              	
 2330 24bc 84230000 		.word	_QUEST
 2331 24c0 05       	_PARSE:	.byte  5
 2332 24c1 50415253 		.ascii "PARSE"
 2332      45
 2333 24c6 00BF     		.p2align 2 	
 2334              	PARSE:
 2335 24c8 504700BF 		_NEST
 2336 24cc 25150000 		_ADR	TOR
 2337 24d0 191D0000 		_ADR	TIB
 2338 24d4 CD190000 		_ADR	INN
 2339 24d8 D1140000 		_ADR	AT
 2340 24dc 41160000 		_ADR	PLUS			// current input buffer pointer
 2341 24e0 E1190000 		_ADR	NTIB
 2342 24e4 D1140000 		_ADR	AT
 2343 24e8 CD190000 		_ADR	INN
 2344 24ec D1140000 		_ADR	AT
 2345 24f0 51160000 		_ADR	SUBB			// remaining count
 2346 24f4 FD140000 		_ADR	RFROM
 2347 24f8 99230000 		_ADR	PARS
 2348 24fc CD190000 		_ADR	INN
 2349 2500 B9180000 		_ADR	PSTOR
ARM GAS  forth.s 			page 101


 2350 2504 77120000 		_UNNEST
 2351              	
 2352              	//    .(	  ( -- )
 2353              	// 	Output following string up to next ) .
 2354              	
 2355 2508 C0240000 		.word	_PARSE
 2356 250c 82       	_DOTPR:	.byte  IMEDD+2
 2357 250d 2E28     		.ascii ".("
 2358 250f 00       		.p2align 2 	
 2359              	DOTPR:
 2360 2510 504700BF 		_NEST
 2361 2514 49140000 		_DOLIT	')'
 2361      29000000 
 2362 251c C9240000 		_ADR	PARSE
 2363 2520 11220000 		_ADR	TYPEE
 2364 2524 77120000 		_UNNEST
 2365              	
 2366              	//    (	   ( -- )
 2367              	// 	Ignore following string up to next ) . A comment.
 2368              	
 2369 2528 0C250000 		.word	_DOTPR
 2370 252c 81       	_PAREN:	.byte  IMEDD+1
 2371 252d 28       		.ascii "("
 2372 252e 00BF     		.p2align 2 	
 2373              	PAREN:
 2374 2530 504700BF 		_NEST
 2375 2534 49140000 		_DOLIT	')'
 2375      29000000 
 2376 253c C9240000 		_ADR	PARSE
 2377 2540 8D170000 		_ADR	DDROP
 2378 2544 77120000 		_UNNEST
 2379              	
 2380              	//    \	   ( -- )
 2381              	// 	Ignore following text till the end of line.
 2382              	
 2383 2548 2C250000 		.word	_PAREN
 2384 254c 81       	_BKSLA:	.byte  IMEDD+1
 2385 254d 5C       		.byte	'\\'
 2386 254e 00BF     		.p2align 2 	
 2387              	BKSLA:
 2388 2550 504700BF 		_NEST
 2389 2554 E1190000 		_ADR	NTIB
 2390 2558 D1140000 		_ADR	AT
 2391 255c CD190000 		_ADR	INN
 2392 2560 BD140000 		_ADR	STORE
 2393 2564 77120000 		_UNNEST
 2394              	
 2395              	//    CHAR	( -- c )
 2396              	// 	Parse next word and return its first character.
 2397              	
 2398 2568 4C250000 		.word	_BKSLA
 2399 256c 04       	_CHAR:	.byte  4
 2400 256d 43484152 		.ascii "CHAR"
 2401 2571 0000BF   		.p2align 2 	
 2402              	CHAR:
 2403 2574 504700BF 		_NEST
 2404 2578 FD160000 		_ADR	BLANK
ARM GAS  forth.s 			page 102


 2405 257c C9240000 		_ADR	PARSE
 2406 2580 6D150000 		_ADR	DROP
 2407 2584 F1140000 		_ADR	CAT
 2408 2588 77120000 		_UNNEST
 2409              	
 2410              	//    WORD	( c -- a //  string> )
 2411              	// 	Parse a word from input stream and copy it to code dictionary.
 2412              	
 2413 258c 6C250000 		.word	_CHAR
 2414 2590 04       	_WORDD:	.byte  4
 2415 2591 574F5244 		.ascii "WORD"
 2416 2595 0000BF   		.p2align 2 	
 2417              	WORDD:
 2418 2598 504700BF 		_NEST
 2419 259c C9240000 		_ADR	PARSE
 2420 25a0 E11C0000 		_ADR	HERE
 2421 25a4 DD160000 		_ADR	CELLP
 2422 25a8 D91D0000 		_ADR	PACKS
 2423 25ac 77120000 		_UNNEST
 2424              	
 2425              	//    TOKEN	( -- a //  string> )
 2426              	// 	Parse a word from input stream and copy it to name dictionary.
 2427              	
 2428 25b0 90250000 		.word	_WORDD
 2429 25b4 05       	_TOKEN:	.byte  5
 2430 25b5 544F4B45 		.ascii "TOKEN"
 2430      4E
 2431 25ba 00BF     		.p2align 2 	
 2432              	TOKEN:
 2433 25bc 504700BF 		_NEST
 2434 25c0 FD160000 		_ADR	BLANK
 2435 25c4 99250000 		_ADR	WORDD
 2436 25c8 77120000 		_UNNEST
 2437              	
 2438              	// **************************************************************************
 2439              	//  Dictionary search
 2440              	
 2441              	//    NAME>	( na -- ca )
 2442              	// 	Return a code address given a name address.
 2443              	
 2444 25cc B4250000 		.word	_TOKEN
 2445 25d0 05       	_NAMET:	.byte  5
 2446 25d1 4E414D45 		.ascii "NAME>"
 2446      3E
 2447 25d6 00BF     		.p2align 2 	
 2448              	NAMET:
 2449 25d8 504700BF 		_NEST
 2450 25dc 01190000 		_ADR	COUNT
 2451 25e0 49140000 		_DOLIT	0x1F
 2451      1F000000 
 2452 25e8 C1150000 		_ADR	ANDD
 2453 25ec 41160000 		_ADR	PLUS
 2454 25f0 2D1C0000 		_ADR	ALGND
 2455 25f4 77120000 		_UNNEST
 2456              	
 2457              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2458              	// 	Compare u bytes in two strings. Return 0 if identical.
ARM GAS  forth.s 			page 103


 2459              	//
 2460              	//  Picatout 2020-12-01, 
 2461              	//      Because of problem with .align directive that
 2462              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2463              	// 		words  to do a byte by byte comparison. 
 2464              	//
 2465 25f8 D0250000 		.word	_NAMET
 2466 25fc 05       	_SAMEQ:	.byte  5
 2467 25fd 53414D45 		.ascii "SAME?"
 2467      3F
 2468 2602 00BF     		.p2align 2	
 2469              	SAMEQ:
 2470 2604 504700BF 		_NEST
 2471 2608 25150000 		_ADR	TOR
 2472 260c 9F140000 		_BRAN	SAME2
 2472      50260000 
 2473              	SAME1:
 2474 2614 A1150000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2475 2618 11150000 		_ADR	RAT   // a1 a2 a1 u 
 2476 261c 41160000 		_ADR	PLUS  // a1 a2 a1+u 
 2477 2620 F1140000 		_ADR	CAT	   // a1 a2 c1    		
 2478 2624 A1150000 		_ADR	OVER  // a1 a2 c1 a2 
 2479 2628 11150000 		_ADR	RAT    
 2480 262c 41160000 		_ADR	PLUS    
 2481 2630 F1140000 		_ADR	CAT	  // a1 a2 c1 c2
 2482 2634 51160000 		_ADR	SUBB  
 2483 2638 51170000 		_ADR	QDUP
 2484 263c 8B140000 		_QBRAN	SAME2
 2484      50260000 
 2485 2644 FD140000 		_ADR	RFROM
 2486 2648 6D150000 		_ADR	DROP
 2487 264c 77120000 		_UNNEST	// strings not equal
 2488              	SAME2:
 2489 2650 6D140000 		_DONXT	SAME1
 2489      14260000 
 2490 2658 49140000 		_DOLIT	0
 2490      00000000 
 2491 2660 77120000 		_UNNEST	// strings equal
 2492              	
 2493              	//    find	( a na -- ca na | a F )
 2494              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2495              	
 2496              	//  Picatout 2020-12-01,  
 2497              	//		Modified from original. See comment for word "SAME?" 
 2498              	
 2499              	// 	.word	_SAMEQ
 2500              	// _FIND	.byte  4
 2501              	// 	.ascii "find"
 2502              	// 	.p2align 2 	
 2503              	FIND:
 2504 2664 504700BF 		_NEST
 2505 2668 8D150000 		_ADR	SWAP			// na a	
 2506 266c 01190000 		_ADR	COUNT			// na a+1 count
 2507 2670 7D150000 		_ADR	DUPP 
 2508 2674 A3190000 		_ADR	TEMP
 2509 2678 BD140000 		_ADR	STORE			// na a+1 count 
 2510 267c 25150000 		_ADR  TOR		// na a+1  R: count  
ARM GAS  forth.s 			page 104


 2511 2680 8D150000 		_ADR	SWAP			// a+1 na
 2512              	FIND1:
 2513 2684 7D150000 		_ADR	DUPP			// a+1 na na
 2514 2688 8B140000 		_QBRAN	FIND6	// end of vocabulary
 2514      DC260000 
 2515 2690 7D150000 		_ADR	DUPP			// a+1 na na
 2516 2694 F1140000 		_ADR	CAT			// a+1 na name1
 2517 2698 49140000 		_DOLIT	MASKK
 2517      1FFFFFFF 
 2518 26a0 C1150000 		_ADR	ANDD
 2519 26a4 11150000 		_ADR	RAT			// a+1 na name1 count 
 2520 26a8 E9150000 		_ADR	XORR			// a+1 na,  same length?
 2521 26ac 8B140000 		_QBRAN	FIND2
 2521      C4260000 
 2522 26b4 ED160000 		_ADR	CELLM			// a+1 la
 2523 26b8 D1140000 		_ADR	AT			// a+1 next_na
 2524 26bc 9F140000 		_BRAN	FIND1			// try next word
 2524      84260000 
 2525              	FIND2:   
 2526 26c4 9D160000 		_ADR	ONEP			// a+1 na+1
 2527 26c8 A3190000 		_ADR	TEMP
 2528 26cc D1140000 		_ADR	AT			// a+1 na+1 count
 2529 26d0 05260000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2530              	FIND3:	
 2531 26d4 9F140000 		_BRAN	FIND4
 2531      F4260000 
 2532              	FIND6:	
 2533 26dc FD140000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2534 26e0 6D150000 		_ADR	DROP			// a+1 0
 2535 26e4 8D150000 		_ADR	SWAP			// 0 a+1
 2536 26e8 AD160000 		_ADR	ONEM			// 0 a
 2537 26ec 8D150000 		_ADR	SWAP			// a 0 
 2538 26f0 77120000 		_UNNEST			// return without a match
 2539              	FIND4:	
 2540 26f4 8B140000 		_QBRAN	FIND5			// a+1 na+1
 2540      10270000 
 2541 26fc AD160000 		_ADR	ONEM			// a+1 na
 2542 2700 ED160000 		_ADR	CELLM			// a+4 la
 2543 2704 D1140000 		_ADR	AT			// a+1 next_na
 2544 2708 9F140000 		_BRAN	FIND1			// compare next name
 2544      84260000 
 2545              	FIND5:	
 2546 2710 FD140000 		_ADR	RFROM			// a+1 na+1 count
 2547 2714 6D150000 		_ADR	DROP			// a+1 na+1
 2548 2718 8D150000 		_ADR	SWAP			// na+1 a+1
 2549 271c 6D150000 		_ADR	DROP			// na+1
 2550 2720 AD160000 		_ADR	ONEM			// na
 2551 2724 7D150000 		_ADR	DUPP			// na na
 2552 2728 D9250000 		_ADR	NAMET			// na ca
 2553 272c 8D150000 		_ADR	SWAP			// ca na
 2554 2730 77120000 		_UNNEST			//  return with a match
 2555              	
 2556              	//    NAME?	( a -- ca na | a F )
 2557              	// 	Search all context vocabularies for a string.
 2558              	
 2559 2734 FC250000 		.word	_SAMEQ
 2560 2738 05       	_NAMEQ:	.byte  5
ARM GAS  forth.s 			page 105


 2561 2739 4E414D45 		.ascii "NAME?"
 2561      3F
 2562 273e 00BF     		.p2align 2 	
 2563              	NAMEQ:
 2564 2740 504700BF 		_NEST
 2565 2744 211A0000 		_ADR	CNTXT
 2566 2748 D1140000 		_ADR	AT
 2567 274c 65260000 		_ADR	FIND
 2568 2750 77120000 		_UNNEST
 2569              	
 2570              	// **************************************************************************
 2571              	//  Terminal input
 2572              	
 2573              	//    	  ( bot eot cur -- bot eot cur )
 2574              	// 	Backup the cursor by one character.
 2575              	
 2576              	// 	.word	_NAMEQ
 2577              	// _BKSP	.byte  2
 2578              	// 	.ascii "^H"
 2579              	// 	.p2align 2 	
 2580              	BKSP:
 2581 2754 504700BF 		_NEST
 2582 2758 25150000 		_ADR	TOR
 2583 275c A1150000 		_ADR	OVER
 2584 2760 FD140000 		_ADR	RFROM
 2585 2764 8D150000 		_ADR	SWAP
 2586 2768 A1150000 		_ADR	OVER
 2587 276c E9150000 		_ADR	XORR
 2588 2770 8B140000 		_QBRAN	BACK1
 2588      9C270000 
 2589 2778 49140000 		_DOLIT	BKSPP
 2589      08000000 
 2590 2780 25140000 		_ADR	TECHO
 2591 2784 AD160000 		_ADR	ONEM
 2592 2788 FD160000 		_ADR	BLANK
 2593 278c 25140000 		_ADR	TECHO
 2594 2790 49140000 		_DOLIT	BKSPP
 2594      08000000 
 2595 2798 25140000 		_ADR	TECHO
 2596              	BACK1:
 2597 279c 77120000 		  _UNNEST
 2598              	
 2599              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2600              	// 	Accept and echo the key stroke and bump the cursor.
 2601              	
 2602              	// 	.word	_BKSP
 2603              	// _TAP	.byte  3
 2604              	// 	.ascii "TAP"
 2605              	// 	.p2align 2 	
 2606              	TAP:
 2607 27a0 504700BF 		_NEST
 2608 27a4 7D150000 		_ADR	DUPP
 2609 27a8 25140000 		_ADR	TECHO
 2610 27ac A1150000 		_ADR	OVER
 2611 27b0 DD140000 		_ADR	CSTOR
 2612 27b4 9D160000 		_ADR	ONEP
 2613 27b8 77120000 		_UNNEST
ARM GAS  forth.s 			page 106


 2614              	
 2615              	//    kTAP	( bot eot cur c -- bot eot cur )
 2616              	// 	Process a key stroke, CR or backspace.
 2617              	
 2618              	// 	.word	_TAP
 2619              	// _KTAP	.byte  4
 2620              	// 	.ascii "kTAP"
 2621              	// 	.p2align 2 	
 2622              	KTAP:
 2623              	TTAP:
 2624 27bc 504700BF 		_NEST
 2625 27c0 7D150000 		_ADR	DUPP
 2626 27c4 49140000 		_DOLIT	CRR
 2626      0D000000 
 2627 27cc E9150000 		_ADR	XORR
 2628 27d0 8B140000 		_QBRAN  KTAP2
 2628      00280000 
 2629 27d8 49140000 		_DOLIT	BKSPP
 2629      08000000 
 2630 27e0 E9150000 		_ADR	XORR
 2631 27e4 8B140000 		_QBRAN	KTAP1
 2631      F8270000 
 2632 27ec FD160000 		_ADR	BLANK
 2633 27f0 A1270000 		_ADR	TAP
 2634 27f4 77120000 		_UNNEST
 2635              	//	.word	0			// patch
 2636              	KTAP1:
 2637 27f8 55270000 		_ADR	BKSP
 2638 27fc 77120000 		_UNNEST
 2639              	KTAP2:
 2640 2800 6D150000 		_ADR	DROP
 2641 2804 8D150000 		_ADR	SWAP
 2642 2808 6D150000 		_ADR	DROP
 2643 280c 7D150000 		_ADR	DUPP
 2644 2810 77120000 		_UNNEST
 2645              	
 2646              	//    ACCEPT	( b u -- b u )
 2647              	// 	Accept characters to input buffer. Return with actual count.
 2648              	
 2649 2814 38270000 		.word	_NAMEQ
 2650 2818 06       	_ACCEP:	.byte  6
 2651 2819 41434345 		.ascii "ACCEPT"
 2651      5054
 2652 281f 00       		.p2align 2 	
 2653              	ACCEP:
 2654 2820 504700BF 		_NEST
 2655 2824 A1150000 		_ADR	OVER
 2656 2828 41160000 		_ADR	PLUS
 2657 282c A1150000 		_ADR	OVER
 2658              	ACCP1:
 2659 2830 B5170000 		_ADR	DDUP
 2660 2834 E9150000 		_ADR	XORR
 2661 2838 8B140000 		_QBRAN	ACCP4
 2661      78280000 
 2662 2840 9D210000 		_ADR	KEY
 2663 2844 7D150000 		_ADR	DUPP
 2664 2848 FD160000 		_ADR	BLANK
ARM GAS  forth.s 			page 107


 2665 284c 49140000 		_DOLIT 127
 2665      7F000000 
 2666 2854 B51A0000 		_ADR	WITHI
 2667 2858 8B140000 		_QBRAN	ACCP2
 2667      6C280000 
 2668 2860 A1270000 		_ADR	TAP
 2669 2864 9F140000 		_BRAN	ACCP3
 2669      70280000 
 2670              	ACCP2:
 2671 286c BD270000 		_ADR	KTAP
 2672              	ACCP3:	  
 2673 2870 9F140000 		_BRAN	ACCP1
 2673      30280000 
 2674              	ACCP4:
 2675 2878 6D150000 		_ADR	DROP
 2676 287c A1150000 		_ADR	OVER
 2677 2880 51160000 		_ADR	SUBB
 2678 2884 77120000 		_UNNEST
 2679              	
 2680              	//    QUERY	( -- )
 2681              	// 	Accept input stream to terminal input buffer.
 2682              	
 2683 2888 18280000 		.word	_ACCEP
 2684 288c 05       	_QUERY:	.byte  5
 2685 288d 51554552 		.ascii "QUERY"
 2685      59
 2686 2892 00BF     		.p2align 2 	
 2687              	QUERY:
 2688 2894 504700BF 		_NEST
 2689 2898 191D0000 		_ADR	TIB
 2690 289c 49140000 		_DOLIT 80
 2690      50000000 
 2691 28a4 21280000 		_ADR	ACCEP
 2692 28a8 E1190000 		_ADR	NTIB
 2693 28ac BD140000 		_ADR	STORE
 2694 28b0 6D150000 		_ADR	DROP
 2695 28b4 49140000 		_DOLIT	0
 2695      00000000 
 2696 28bc CD190000 		_ADR	INN
 2697 28c0 BD140000 		_ADR	STORE
 2698 28c4 77120000 		_UNNEST
 2699              	
 2700              	// **************************************************************************
 2701              	//  Error handling
 2702              	
 2703              	//    ABORT	( a -- )
 2704              	// 	Reset data stack and jump to QUIT.
 2705              	
 2706 28c8 8C280000 		.word	_QUERY
 2707 28cc 05       	_ABORT:	.byte  5
 2708 28cd 41424F52 		.ascii "ABORT"
 2708      54
 2709 28d2 00BF     		.p2align 2 	
 2710              	ABORT:
 2711 28d4 504700BF 		_NEST
 2712              	ABORT1:
 2713 28d8 BD210000 		_ADR	SPACE
ARM GAS  forth.s 			page 108


 2714 28dc 01190000 		_ADR	COUNT
 2715 28e0 11220000 		_ADR	TYPEE
 2716 28e4 49140000 		_DOLIT	0X3F
 2716      3F000000 
 2717 28ec 25140000 		_ADR	EMIT
 2718 28f0 45220000 		_ADR	CR
 2719 28f4 5D2A0000 		_ADR	PRESE
 2720 28f8 9F140000 		_BRAN	QUIT
 2720      7C2A0000 
 2721              	
 2722              	//    _abort"	( f -- )
 2723              	// 	Run time routine of ABORT" . Abort with a message.
 2724              	
 2725              	// 	.word	_ABORT
 2726              	// _ABORQ	.byte  COMPO+6
 2727              	// 	.ascii "abort\""
 2728              	// 	.p2align 2 	
 2729              	ABORQ:
 2730 2900 504700BF 		_NEST
 2731 2904 65220000 		_ADR	DOSTR
 2732 2908 8D150000 		_ADR	SWAP 
 2733 290c 8B140000 		_QBRAN	1f	// text flag
 2733      1C290000 
 2734 2914 9F140000 		_BRAN	ABORT1
 2734      D8280000 
 2735              	1:
 2736 291c 6D150000 		_ADR	DROP
 2737 2920 77120000 		_UNNEST			// drop error
 2738              	
 2739              	// **************************************************************************
 2740              	//  The text interpreter
 2741              	
 2742              	//    $INTERPRET  ( a -- )
 2743              	// 	Interpret a word. If failed, try to convert it to an integer.
 2744              	
 2745 2924 CC280000 		.word	_ABORT
 2746 2928 0A       	_INTER:	.byte  10
 2747 2929 2424494E 		.ascii "$$INTERPRET"
 2747      54455250 
 2747      524554
 2748              		.p2align 2 	
 2749              	INTER:
 2750 2934 504700BF 		_NEST
 2751 2938 41270000 		_ADR	NAMEQ
 2752 293c 51170000 		_ADR	QDUP	// ?defined
 2753 2940 8B140000 		_QBRAN	INTE1
 2753      74290000 
 2754 2948 D1140000 		_ADR	AT
 2755 294c 49140000 		_DOLIT	COMPO
 2755      40000000 
 2756 2954 C1150000 		_ADR	ANDD	// ?compile only lexicon bits
 2757 2958 01290000 		_ABORQ	13," compile only"
 2757      0D20636F 
 2757      6D70696C 
 2757      65206F6E 
 2757      6C7900BF 
 2758 296c 61140000 		_ADR	EXECU
ARM GAS  forth.s 			page 109


 2759 2970 77120000 		_UNNEST			// execute defined word
 2760              	INTE1:
 2761 2974 65200000 		_ADR	NUMBQ
 2762 2978 8B140000 		_QBRAN	INTE2
 2762      84290000 
 2763 2980 77120000 		_UNNEST
 2764              	INTE2:
 2765 2984 D5280000 		_ADR	ABORT	// error
 2766              	
 2767              	//    [	   ( -- )
 2768              	// 	Start the text interpreter.
 2769              	
 2770 2988 28290000 		.word	_INTER
 2771 298c 81       	_LBRAC:	.byte  IMEDD+1
 2772 298d 5B       		.ascii "["
 2773 298e 00BF     		.p2align 2 	
 2774              	LBRAC:
 2775 2990 504700BF 		_NEST
 2776 2994 49140000 		_DOLIT	INTER
 2776      34290000 
 2777 299c F5190000 		_ADR	TEVAL
 2778 29a0 BD140000 		_ADR	STORE
 2779 29a4 77120000 		_UNNEST
 2780              	
 2781              	//    .OK	 ( -- )
 2782              	// 	Display "ok" only while interpreting.
 2783              	
 2784 29a8 8C290000 		.word	_LBRAC
 2785 29ac 03       	_DOTOK:	.byte  3
 2786 29ad 2E4F4B   		.ascii ".OK"
 2787              		.p2align 2 	
 2788              	DOTOK:
 2789 29b0 504700BF 		_NEST
 2790 29b4 49140000 		_DOLIT	INTER
 2790      34290000 
 2791 29bc F5190000 		_ADR	TEVAL
 2792 29c0 D1140000 		_ADR	AT
 2793 29c4 31180000 		_ADR	EQUAL
 2794 29c8 8B140000 		_QBRAN	DOTO1
 2794      D8290000 
 2795 29d0 AD220000 		_DOTQP	3," ok"
 2795      03206F6B 
 2796              	DOTO1:
 2797 29d8 45220000 		_ADR	CR
 2798 29dc 77120000 		_UNNEST
 2799              	
 2800              	//    ?STACK	( -- )
 2801              	// 	Abort if the data stack underflows.
 2802              	
 2803 29e0 AC290000 		.word	_DOTOK
 2804 29e4 06       	_QSTAC:	.byte  6
 2805 29e5 3F535441 		.ascii "?STACK"
 2805      434B
 2806 29eb 00       		.p2align 2 	
 2807              	QSTAC:
 2808 29ec 504700BF 		_NEST
 2809 29f0 951C0000 		_ADR	DEPTH
ARM GAS  forth.s 			page 110


 2810 29f4 B1150000 		_ADR	ZLESS	// check only for underflow
 2811 29f8 01290000 		_ABORQ	9,"underflow"
 2811      09756E64 
 2811      6572666C 
 2811      6F7700BF 
 2812 2a08 77120000 		_UNNEST
 2813              	
 2814              	//    EVAL	( -- )
 2815              	// 	Interpret the input stream.
 2816              	
 2817 2a0c E4290000 		.word	_QSTAC
 2818 2a10 04       	_EVAL:	.byte  4
 2819 2a11 4556414C 		.ascii "EVAL"
 2820 2a15 0000BF   		.p2align 2 	
 2821              	EVAL:
 2822 2a18 504700BF 		_NEST
 2823              	EVAL1:
 2824 2a1c BD250000 	    _ADR	TOKEN
 2825 2a20 7D150000 		_ADR	DUPP
 2826 2a24 F1140000 		_ADR	CAT	// ?input stream empty
 2827 2a28 8B140000 		_QBRAN	EVAL2
 2827      442A0000 
 2828 2a30 F5190000 		_ADR	TEVAL
 2829 2a34 311D0000 		_ADR	ATEXE
 2830 2a38 ED290000 		_ADR	QSTAC	// evaluate input, check stack
 2831 2a3c 9F140000 		_BRAN	EVAL1
 2831      1C2A0000 
 2832              	EVAL2:
 2833 2a44 6D150000 		_ADR	DROP
 2834 2a48 B1290000 		_ADR	DOTOK
 2835 2a4c 77120000 		_UNNEST	// prompt
 2836              	
 2837              	//    PRESET	( -- )
 2838              	// 	Reset data stack pointer and the terminal input buffer.
 2839              	
 2840 2a50 102A0000 		.word	_EVAL
 2841 2a54 06       	_PRESE:	.byte  6
 2842 2a55 50524553 		.ascii "PRESET"
 2842      4554
 2843 2a5b 00       		.p2align 2 	
 2844              	PRESE:
 2845 2a5c 504700BF 		_NEST 
 2846 2a60 49140000 		_DOLIT SPP 
 2846      00FF0120 
 2847 2a68 49150000 		_ADR SPSTOR 
 2848 2a6c 77120000 		_UNNEST 
 2849              	
 2850              	//    QUIT	( -- )
 2851              	// 	Reset return stack pointer and start text interpreter.
 2852              	
 2853 2a70 542A0000 		.word	_PRESE
 2854 2a74 04       	_QUIT:	.byte  4
 2855 2a75 51554954 		.ascii "QUIT"
 2856 2a79 0000BF   		.p2align 2 	
 2857              	QUIT:
 2858 2a7c 49140000 		_DOLIT RPP 
 2858      80FF0120 
ARM GAS  forth.s 			page 111


 2859 2a84 39150000 		_ADR RPSTOR 
 2860              	QUIT1:
 2861 2a88 91290000 		_ADR	LBRAC			// start interpretation
 2862              	QUIT2:
 2863 2a8c 95280000 		_ADR	QUERY			// get input
 2864 2a90 192A0000 		_ADR	EVAL
 2865 2a94 9F140000 		_BRAN	QUIT2	// continue till error
 2865      8C2A0000 
 2866              	
 2867 2a9c 742A0000 		.word _QUIT
 2868 2aa0 06       	_FORGET: .byte 6 
 2869 2aa1 464F5247 		.ascii "FORGET"
 2869      4554
 2870 2aa7 00       		.p2align 2
 2871              	FORGET:
 2872 2aa8 504700BF 		_NEST 
 2873 2aac BD250000 		_ADR TOKEN 
 2874 2ab0 7D150000 		_ADR DUPP 
 2875 2ab4 8B140000 		_QBRAN 9f 
 2875      F02A0000 
 2876 2abc 41270000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2877 2ac0 51170000 		_ADR QDUP 
 2878 2ac4 8B140000 		_QBRAN 8f
 2878      EC2A0000 
 2879 2acc ED160000 		_ADR CELLM // ( ca la )
 2880 2ad0 7D150000 		_ADR DUPP 
 2881 2ad4 351A0000 		_ADR CPP   
 2882 2ad8 BD140000 		_ADR STORE
 2883 2adc D1140000 		_ADR AT 
 2884 2ae0 5D1A0000 		_ADR LAST 
 2885 2ae4 BD140000 		_ADR STORE
 2886 2ae8 552F0000 		_ADR OVERT 
 2887 2aec 6D150000 	8:  _ADR DROP 
 2888 2af0 77120000 	9:	_UNNEST 
 2889              	
 2890              		.p2align 2 
 2891              	
 2892              	// **************************************************************************
 2893              	//  The compiler
 2894              	
 2895              	//    '	   ( -- ca )
 2896              	// 	Search context vocabularies for the next word in input stream.
 2897              	
 2898 2af4 A02A0000 		.word	_FORGET
 2899 2af8 01       	_TICK:	.byte  1
 2900 2af9 27       		.ascii "'"
 2901 2afa 00BF     		.p2align 2 	
 2902              	TICK:
 2903 2afc 504700BF 		_NEST
 2904 2b00 BD250000 		_ADR	TOKEN
 2905 2b04 41270000 		_ADR	NAMEQ	// ?defined
 2906 2b08 8B140000 		_QBRAN	TICK1
 2906      142B0000 
 2907 2b10 77120000 		_UNNEST	// yes, push code address
 2908              	TICK1:	
 2909 2b14 D5280000 		_ADR ABORT	// no, error
 2910              	
ARM GAS  forth.s 			page 112


 2911              	//    ALLOT	( n -- )
 2912              	// 	Allocate n bytes to the ram area.
 2913              	
 2914 2b18 F82A0000 		.word	_TICK
 2915 2b1c 05       	_ALLOT:	.byte  5
 2916 2b1d 414C4C4F 		.ascii "ALLOT"
 2916      54
 2917 2b22 00BF     		.p2align 2 	
 2918              	ALLOT:
 2919 2b24 504700BF 		_NEST
 2920 2b28 351A0000 		_ADR	CPP
 2921 2b2c B9180000 		_ADR	PSTOR
 2922 2b30 77120000 		_UNNEST			// adjust code pointer
 2923              	
 2924              	//    ,	   ( w -- )
 2925              	// 	Compile an integer into the code dictionary.
 2926              	
 2927 2b34 1C2B0000 		.word	_ALLOT
 2928 2b38 012C     	_COMMA:	.byte  1,','
 2929 2b3a 00BF     		.p2align 2 	
 2930              	COMMA:
 2931 2b3c 504700BF 		_NEST
 2932 2b40 E11C0000 		_ADR	HERE
 2933 2b44 7D150000 		_ADR	DUPP
 2934 2b48 DD160000 		_ADR	CELLP	// cell boundary
 2935 2b4c 351A0000 		_ADR	CPP
 2936 2b50 BD140000 		_ADR	STORE
 2937 2b54 BD140000 		_ADR	STORE
 2938 2b58 77120000 		_UNNEST	// adjust code pointer, compile
 2939              		.p2align 2 
 2940              	//    [COMPILE]   ( -- //  string> )
 2941              	// 	Compile the next immediate word into code dictionary.
 2942              	
 2943 2b5c 382B0000 		.word	_COMMA
 2944 2b60 89       	_BCOMP:	.byte  IMEDD+9
 2945 2b61 5B434F4D 		.ascii "[COMPILE]"
 2945      50494C45 
 2945      5D
 2946 2b6a 00BF     		.p2align 2 	
 2947              	BCOMP:
 2948 2b6c 504700BF 		_NEST
 2949 2b70 FD2A0000 		_ADR	TICK
 2950 2b74 3D2B0000 		_ADR	COMMA
 2951 2b78 77120000 		_UNNEST
 2952              	
 2953              	//    COMPILE	( -- )
 2954              	// 	Compile the next address in colon list to code dictionary.
 2955              	
 2956 2b7c 602B0000 		.word	_BCOMP
 2957 2b80 47       	_COMPI:	.byte  COMPO+7
 2958 2b81 434F4D50 		.ascii "COMPILE"
 2958      494C45
 2959              		.p2align 2 	
 2960              	COMPI:
 2961 2b88 504700BF 		_NEST
 2962 2b8c FD140000 		_ADR	RFROM
 2963 2b90 7D150000 		_ADR	DUPP 
ARM GAS  forth.s 			page 113


 2964 2b94 D1140000 		_ADR	AT
 2965 2b98 49140000 		_DOLIT 1 
 2965      01000000 
 2966 2ba0 D5150000 		_ADR	ORR 
 2967 2ba4 3D2B0000 		_ADR	COMMA 
 2968 2ba8 DD160000 		_ADR	CELLP 
 2969 2bac 25150000 		_ADR	TOR 
 2970 2bb0 77120000 		_UNNEST			// adjust return address
 2971              	
 2972              	//    LITERAL	( w -- )
 2973              	// 	Compile tos to code dictionary as an integer literal.
 2974              	
 2975 2bb4 802B0000 		.word	_COMPI
 2976 2bb8 87       	_LITER:	.byte  IMEDD+7
 2977 2bb9 4C495445 		.ascii "LITERAL"
 2977      52414C
 2978              		.p2align 2 	
 2979              	LITER:
 2980 2bc0 504700BF 		_NEST
 2981 2bc4 49140000 		_COMPI	DOLIT
 2981      48140000 
 2981      B12F0000 
 2982 2bd0 3D2B0000 		_ADR	COMMA
 2983 2bd4 77120000 		_UNNEST
 2984              	
 2985              	//    $,"	( -- )
 2986              	// 	Compile a literal string up to next " .
 2987              	
 2988              	// 	.word	_LITER
 2989              	// _STRCQ	.byte  3
 2990              	// 	.ascii "$,\""
 2991              	// 	.p2align 2 	
 2992              	STRCQ:
 2993 2bd8 504700BF 		_NEST
 2994 2bdc 49140000 		_DOLIT -4
 2994      FCFFFFFF 
 2995 2be4 351A0000 		_ADR	CPP
 2996 2be8 B9180000 		_ADR	PSTOR
 2997 2bec 49140000 		_DOLIT	'\"'
 2997      22000000 
 2998 2bf4 99250000 		_ADR	WORDD			// move word to code dictionary
 2999 2bf8 01190000 		_ADR	COUNT
 3000 2bfc 41160000 		_ADR	PLUS
 3001 2c00 2D1C0000 		_ADR	ALGND			// calculate aligned end of string
 3002 2c04 351A0000 		_ADR	CPP
 3003 2c08 BD140000 		_ADR	STORE
 3004 2c0c 77120000 		_UNNEST 			// adjust the code pointer
 3005              	
 3006              	/*******************
 3007              	//  Structures
 3008              	*******************/
 3009              	//    FOR	 ( -- a )
 3010              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3011              	
 3012 2c10 B82B0000 		.word	_LITER
 3013 2c14 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3014 2c15 464F52   		.ascii "FOR"
ARM GAS  forth.s 			page 114


 3015              		.p2align 2 	
 3016              	FOR:
 3017 2c18 504700BF 		_NEST
 3018 2c1c 49140000 		_COMPI	TOR
 3018      24150000 
 3018      B12F0000 
 3019 2c28 E11C0000 		_ADR	HERE
 3020 2c2c 77120000 		_UNNEST
 3021              	
 3022              	//    BEGIN	( -- a )
 3023              	// 	Start an infinite or indefinite loop structure.
 3024              	
 3025 2c30 142C0000 		.word	_FOR
 3026 2c34 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3027 2c35 42454749 		.ascii "BEGIN"
 3027      4E
 3028 2c3a 00BF     		.p2align 2 	
 3029              	BEGIN:
 3030 2c3c 504700BF 		_NEST
 3031 2c40 E11C0000 		_ADR	HERE
 3032 2c44 77120000 		_UNNEST
 3033              		.p2align 2 
 3034              	
 3035              	//    NEXT	( a -- )
 3036              	// 	Terminate a FOR-NEXT loop structure.
 3037 2c48 342C0000 		.word	_BEGIN
 3038 2c4c C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3039 2c4d 4E455854 		.ascii "NEXT"
 3040 2c51 0000BF   		.p2align 2 	
 3041              	FNEXT:
 3042 2c54 504700BF 		_NEST
 3043 2c58 49140000 		_COMPI	DONXT
 3043      6C140000 
 3043      B12F0000 
 3044 2c64 3D2B0000 		_ADR	COMMA
 3045 2c68 77120000 		_UNNEST
 3046              	
 3047              	//    UNTIL	( a -- )
 3048              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3049              	
 3050 2c6c 4C2C0000 		.word	_FNEXT
 3051 2c70 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3052 2c71 554E5449 		.ascii "UNTIL"
 3052      4C
 3053 2c76 00BF     		.p2align 2 	
 3054              	UNTIL:
 3055 2c78 504700BF 		_NEST
 3056 2c7c 49140000 		_COMPI	QBRAN
 3056      8A140000 
 3056      B12F0000 
 3057 2c88 3D2B0000 		_ADR	COMMA
 3058 2c8c 77120000 		_UNNEST
 3059              	
 3060              	//    AGAIN	( a -- )
 3061              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3062              	
 3063 2c90 702C0000 		.word	_UNTIL
ARM GAS  forth.s 			page 115


 3064 2c94 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3065 2c95 41474149 		.ascii "AGAIN"
 3065      4E
 3066 2c9a 00BF     		.p2align 2 	
 3067              	AGAIN:
 3068 2c9c 504700BF 		_NEST
 3069 2ca0 49140000 		_COMPI	BRAN
 3069      9E140000 
 3069      B12F0000 
 3070 2cac 3D2B0000 		_ADR	COMMA
 3071 2cb0 77120000 		_UNNEST
 3072              	
 3073              	//    IF	  ( -- A )
 3074              	// 	Begin a conditional branch structure.
 3075              	
 3076 2cb4 942C0000 		.word	_AGAIN
 3077 2cb8 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3078 2cb9 4946     		.ascii "IF"
 3079 2cbb 00       		.p2align 2 	
 3080              	IFF:
 3081 2cbc 504700BF 		_NEST
 3082 2cc0 49140000 		_COMPI	QBRAN
 3082      8A140000 
 3082      B12F0000 
 3083 2ccc E11C0000 		_ADR	HERE
 3084 2cd0 49140000 		_DOLIT	4
 3084      04000000 
 3085 2cd8 351A0000 		_ADR	CPP
 3086 2cdc B9180000 		_ADR	PSTOR
 3087 2ce0 77120000 		_UNNEST
 3088              	
 3089              	//    AHEAD	( -- A )
 3090              	// 	Compile a forward branch instruction.
 3091              	
 3092 2ce4 B82C0000 		.word	_IFF
 3093 2ce8 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3094 2ce9 41484541 		.ascii "AHEAD"
 3094      44
 3095 2cee 00BF     		.p2align 2 	
 3096              	AHEAD:
 3097 2cf0 504700BF 		_NEST
 3098 2cf4 49140000 		_COMPI	BRAN
 3098      9E140000 
 3098      B12F0000 
 3099 2d00 E11C0000 		_ADR	HERE
 3100 2d04 49140000 		_DOLIT	4
 3100      04000000 
 3101 2d0c 351A0000 		_ADR	CPP
 3102 2d10 B9180000 		_ADR	PSTOR
 3103 2d14 77120000 		_UNNEST
 3104              	
 3105              	//    REPEAT	( A a -- )
 3106              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3107              	
 3108 2d18 E82C0000 		.word	_AHEAD
 3109 2d1c C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3110 2d1d 52455045 		.ascii "REPEAT"
ARM GAS  forth.s 			page 116


 3110      4154
 3111 2d23 00       		.p2align 2 	
 3112              	REPEA:
 3113 2d24 504700BF 		_NEST
 3114 2d28 9D2C0000 		_ADR	AGAIN
 3115 2d2c E11C0000 		_ADR	HERE
 3116 2d30 8D150000 		_ADR	SWAP
 3117 2d34 BD140000 		_ADR	STORE
 3118 2d38 77120000 		_UNNEST
 3119              	
 3120              	//    THEN	( A -- )
 3121              	// 	Terminate a conditional branch structure.
 3122              	
 3123 2d3c 1C2D0000 		.word	_REPEA
 3124 2d40 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3125 2d41 5448454E 		.ascii "THEN"
 3126 2d45 0000BF   		.p2align 2 	
 3127              	THENN:
 3128 2d48 504700BF 		_NEST
 3129 2d4c E11C0000 		_ADR	HERE
 3130 2d50 8D150000 		_ADR	SWAP
 3131 2d54 BD140000 		_ADR	STORE
 3132 2d58 77120000 		_UNNEST
 3133              	
 3134              	//    AFT	 ( a -- a A )
 3135              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3136              	
 3137 2d5c 402D0000 		.word	_THENN
 3138 2d60 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3139 2d61 414654   		.ascii "AFT"
 3140              		.p2align 2 	
 3141              	AFT:
 3142 2d64 504700BF 		_NEST
 3143 2d68 6D150000 		_ADR	DROP
 3144 2d6c F12C0000 		_ADR	AHEAD
 3145 2d70 3D2C0000 		_ADR	BEGIN
 3146 2d74 8D150000 		_ADR	SWAP
 3147 2d78 77120000 		_UNNEST
 3148              	
 3149              	//    ELSE	( A -- A )
 3150              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3151              	
 3152 2d7c 602D0000 		.word	_AFT
 3153 2d80 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3154 2d81 454C5345 		.ascii "ELSE"
 3155 2d85 0000BF   		.p2align 2 	
 3156              	ELSEE:
 3157 2d88 504700BF 		_NEST
 3158 2d8c F12C0000 		_ADR	AHEAD
 3159 2d90 8D150000 		_ADR	SWAP
 3160 2d94 492D0000 		_ADR	THENN
 3161 2d98 77120000 		_UNNEST
 3162              	
 3163              	//    WHILE	( a -- A a )
 3164              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3165              	
 3166 2d9c 802D0000 		.word	_ELSEE
ARM GAS  forth.s 			page 117


 3167 2da0 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3168 2da1 5748494C 		.ascii "WHILE"
 3168      45
 3169 2da6 00BF     		.p2align 2 	
 3170              	WHILE:
 3171 2da8 504700BF 		_NEST
 3172 2dac BD2C0000 		_ADR	IFF
 3173 2db0 8D150000 		_ADR	SWAP
 3174 2db4 77120000 		_UNNEST
 3175              	
 3176              	//    ABORT"	( -- //  string> )
 3177              	// 	Conditional abort with an error message.
 3178              	
 3179 2db8 A02D0000 		.word	_WHILE
 3180 2dbc 86       	_ABRTQ:	.byte  IMEDD+6
 3181 2dbd 41424F52 		.ascii "ABORT\""
 3181      5422
 3182 2dc3 00       		.p2align 2 	
 3183              	ABRTQ:
 3184 2dc4 504700BF 		_NEST
 3185 2dc8 49140000 		_COMPI	ABORQ
 3185      00290000 
 3185      B12F0000 
 3186 2dd4 D92B0000 		_ADR	STRCQ
 3187 2dd8 77120000 		_UNNEST
 3188              	
 3189              	//    $"	( -- //  string> )
 3190              	// 	Compile an inline word literal.
 3191              	
 3192 2ddc BC2D0000 		.word	_ABRTQ
 3193 2de0 C2       	_STRQ:	.byte  IMEDD+COMPO+2
 3194 2de1 2422     		.ascii	"$\""
 3195 2de3 00       		.p2align 2 	
 3196              	STRQ:
 3197 2de4 504700BF 		_NEST
 3198 2de8 49140000 		_COMPI	STRQP
 3198      90220000 
 3198      B12F0000 
 3199 2df4 D92B0000 		_ADR	STRCQ
 3200 2df8 77120000 		_UNNEST
 3201              	
 3202              	//    ."	( -- //  string> )
 3203              	// 	Compile an inline word  literal to be typed out at run time.
 3204              	
 3205 2dfc E02D0000 		.word	_STRQ
 3206 2e00 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3207 2e01 2E22     		.ascii	".\""
 3208 2e03 00       		.p2align 2 	
 3209              	DOTQ:
 3210 2e04 504700BF 		_NEST
 3211 2e08 49140000 		_COMPI	DOTQP
 3211      AC220000 
 3211      B12F0000 
 3212 2e14 D92B0000 		_ADR	STRCQ
 3213 2e18 77120000 		_UNNEST
 3214              	
 3215              	// **************************************************************************
ARM GAS  forth.s 			page 118


 3216              	//  Name compiler
 3217              	
 3218              	//    ?UNIQUE	( a -- a )
 3219              	// 	Display a warning message if the word already exists.
 3220              	
 3221 2e1c 002E0000 		.word	_DOTQ
 3222 2e20 07       	_UNIQU:	.byte  7
 3223 2e21 3F554E49 		.ascii "?UNIQUE"
 3223      515545
 3224              		.p2align 2 	
 3225              	UNIQU:
 3226 2e28 504700BF 		_NEST
 3227 2e2c 7D150000 		_ADR	DUPP
 3228 2e30 41270000 		_ADR	NAMEQ			// ?name exists
 3229 2e34 8B140000 		_QBRAN	UNIQ1	// redefinitions are OK
 3229      542E0000 
 3230 2e3c AD220000 		_DOTQP	7," reDef "		// but warn the user
 3230      07207265 
 3230      44656620 
 3231 2e48 A1150000 		_ADR	OVER
 3232 2e4c 01190000 		_ADR	COUNT
 3233 2e50 11220000 		_ADR	TYPEE			// just in case its not planned
 3234              	UNIQ1:
 3235 2e54 6D150000 		_ADR	DROP
 3236 2e58 77120000 		_UNNEST
 3237              	
 3238              	//    $,n	 ( na -- )
 3239              	// 	Build a new dictionary name using the data at na.
 3240              	
 3241              	// 	.word	_UNIQU
 3242              	// _SNAME	.byte  3
 3243              	// 	.ascii "$,n"
 3244              	// 	.p2align 2 	
 3245              	SNAME:
 3246 2e5c 504700BF 		_NEST
 3247 2e60 7D150000 		_ADR	DUPP			//  na na
 3248 2e64 F1140000 		_ADR	CAT			//  ?null input
 3249 2e68 8B140000 		_QBRAN	SNAM1
 3249      A42E0000 
 3250 2e70 292E0000 		_ADR	UNIQU			//  na
 3251 2e74 5D1A0000 		_ADR	LAST			//  na last
 3252 2e78 D1140000 		_ADR	AT			//  na la
 3253 2e7c 3D2B0000 		_ADR	COMMA			//  na
 3254 2e80 7D150000 		_ADR	DUPP			//  na na
 3255 2e84 5D1A0000 		_ADR	LAST			//  na na last
 3256 2e88 BD140000 		_ADR	STORE			//  na , save na for vocabulary link
 3257 2e8c 01190000 		_ADR	COUNT			//  na+1 count
 3258 2e90 41160000 		_ADR	PLUS			//  na+1+count
 3259 2e94 2D1C0000 		_ADR	ALGND			//  word boundary
 3260 2e98 351A0000 		_ADR	CPP
 3261 2e9c BD140000 		_ADR	STORE			//  top of dictionary now
 3262 2ea0 77120000 		_UNNEST
 3263              	SNAM1:
 3264 2ea4 91220000 		_ADR	STRQP
 3265 2ea8 07       		.byte	7
 3266 2ea9 206E616D 		.ascii " name? "
 3266      653F20
ARM GAS  forth.s 			page 119


 3267 2eb0 D5280000 		_ADR	ABORT
 3268              	
 3269              	//    $COMPILE	( a -- )
 3270              	// 	Compile next word to code dictionary as a token or literal.
 3271              	
 3272 2eb4 202E0000 		.word	_UNIQU
 3273 2eb8 08       	_SCOMP:	.byte  8
 3274 2eb9 24434F4D 		.ascii "$COMPILE"
 3274      50494C45 
 3275 2ec1 0000BF   		.p2align 2 	
 3276              	SCOMP:
 3277 2ec4 504700BF 		_NEST
 3278 2ec8 41270000 		_ADR	NAMEQ
 3279 2ecc 51170000 		_ADR	QDUP	// defined?
 3280 2ed0 8B140000 		_QBRAN	SCOM2
 3280      002F0000 
 3281 2ed8 D1140000 		_ADR	AT
 3282 2edc 49140000 		_DOLIT	IMEDD
 3282      80000000 
 3283 2ee4 C1150000 		_ADR	ANDD	// immediate?
 3284 2ee8 8B140000 		_QBRAN	SCOM1
 3284      F82E0000 
 3285 2ef0 61140000 		_ADR	EXECU
 3286 2ef4 77120000 		_UNNEST			// it's immediate, execute
 3287              	SCOM1:
 3288 2ef8 B12F0000 		_ADR	CALLC			// it's not immediate, compile
 3289 2efc 77120000 		_UNNEST	
 3290              	SCOM2:
 3291 2f00 65200000 		_ADR	NUMBQ
 3292 2f04 8B140000 		_QBRAN	SCOM3
 3292      142F0000 
 3293 2f0c C12B0000 		_ADR	LITER
 3294 2f10 77120000 		_UNNEST			// compile number as integer
 3295              	SCOM3: // compilation abort 
 3296 2f14 1D2F0000 		_ADR COLON_ABORT 
 3297 2f18 D5280000 		_ADR	ABORT			// error
 3298              	
 3299              	// before aborting a compilation 
 3300              	// reset HERE and LAST
 3301              	// to previous values. 
 3302              	COLON_ABORT:
 3303 2f1c 504700BF 		_NEST 
 3304 2f20 5D1A0000 		_ADR LAST 
 3305 2f24 D1140000 		_ADR AT 
 3306 2f28 ED160000 		_ADR CELLM 
 3307 2f2c 7D150000 		_ADR DUPP 
 3308 2f30 351A0000 		_ADR CPP  
 3309 2f34 BD140000 		_ADR STORE 
 3310 2f38 D1140000 		_ADR AT 
 3311 2f3c 5D1A0000 		_ADR LAST 
 3312 2f40 BD140000 		_ADR STORE 
 3313 2f44 77120000 		_UNNEST 
 3314              	
 3315              	//    OVERT	( -- )
 3316              	// 	Link a new word into the current vocabulary.
 3317              	
 3318 2f48 B82E0000 		.word	_SCOMP
ARM GAS  forth.s 			page 120


 3319 2f4c 05       	_OVERT:	.byte  5
 3320 2f4d 4F564552 		.ascii "OVERT"
 3320      54
 3321 2f52 00BF     		.p2align 2 	
 3322              	OVERT:
 3323 2f54 504700BF 		_NEST
 3324 2f58 5D1A0000 		_ADR	LAST
 3325 2f5c D1140000 		_ADR	AT
 3326 2f60 211A0000 		_ADR	CNTXT
 3327 2f64 BD140000 		_ADR	STORE
 3328 2f68 77120000 		_UNNEST
 3329              	
 3330              	//    ; 	   ( -- )
 3331              	// 	Terminate a colon definition.
 3332              	
 3333 2f6c 4C2F0000 		.word	_OVERT
 3334 2f70 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3335 2f71 3B       		.ascii ";"
 3336 2f72 00BF     		.p2align 2 	
 3337              	SEMIS:
 3338 2f74 504700BF 		_NEST
 3339 2f78 49140000 		_DOLIT	UNNEST
 3339      76120000 
 3340 2f80 B12F0000 		_ADR	CALLC
 3341 2f84 91290000 		_ADR	LBRAC
 3342 2f88 552F0000 		_ADR	OVERT
 3343 2f8c 77120000 		_UNNEST
 3344              	
 3345              	//    ]	   ( -- )
 3346              	// 	Start compiling the words in the input stream.
 3347              	
 3348 2f90 702F0000 		.word	_SEMIS
 3349 2f94 01       	_RBRAC:	.byte  1
 3350 2f95 5D       		.ascii "]"
 3351 2f96 00BF     		.p2align 2 	
 3352              	RBRAC:
 3353 2f98 504700BF 		_NEST
 3354 2f9c 49140000 		_DOLIT	SCOMP
 3354      C42E0000 
 3355 2fa4 F5190000 		_ADR	TEVAL
 3356 2fa8 BD140000 		_ADR	STORE
 3357 2fac 77120000 		_UNNEST
 3358              	
 3359              	//    BL.W	( ca -- )
 3360              	// 	compile ca.
 3361              	
 3362              	// 	.word	_RBRAC
 3363              	// _CALLC	.byte  5
 3364              	// 	.ascii "call,"
 3365              	// 	.p2align 2 	
 3366              	CALLC:
 3367 2fb0 504700BF 		_NEST
 3368 2fb4 49140000 		_DOLIT 1 
 3368      01000000 
 3369 2fbc D5150000 		_ADR ORR 
 3370 2fc0 3D2B0000 		_ADR COMMA  
 3371 2fc4 77120000 		_UNNEST 
ARM GAS  forth.s 			page 121


 3372              	
 3373              	
 3374              	// 	:	( -- //  string> )
 3375              	// 	Start a new colon definition using next word as its name.
 3376              	
 3377 2fc8 942F0000 		.word	_RBRAC
 3378 2fcc 01       	_COLON:	.byte  1
 3379 2fcd 3A       		.ascii ":"
 3380 2fce 00BF     		.p2align 2 	
 3381              	COLON:
 3382 2fd0 504700BF 		_NEST
 3383 2fd4 BD250000 		_ADR	TOKEN
 3384 2fd8 5D2E0000 		_ADR	SNAME
 3385 2fdc 81120000 		_ADR	COMPI_NEST 
 3386 2fe0 992F0000 		_ADR	RBRAC
 3387 2fe4 77120000 		_UNNEST
 3388              	
 3389              	//    IMMEDIATE   ( -- )
 3390              	// 	Make the last compiled word an immediate word.
 3391              	
 3392 2fe8 CC2F0000 		.word	_COLON
 3393 2fec 09       	_IMMED:	.byte  9
 3394 2fed 494D4D45 		.ascii "IMMEDIATE"
 3394      44494154 
 3394      45
 3395 2ff6 00BF     		.p2align 2 	
 3396              	IMMED:
 3397 2ff8 504700BF 		_NEST
 3398 2ffc 49140000 		_DOLIT	IMEDD
 3398      80000000 
 3399 3004 5D1A0000 		_ADR	LAST
 3400 3008 D1140000 		_ADR	AT
 3401 300c D1140000 		_ADR	AT
 3402 3010 D5150000 		_ADR	ORR
 3403 3014 5D1A0000 		_ADR	LAST
 3404 3018 D1140000 		_ADR	AT
 3405 301c BD140000 		_ADR	STORE
 3406 3020 77120000 		_UNNEST
 3407              	
 3408              	// **************************************************************************
 3409              	//  Defining words
 3410              	
 3411              	//    CONSTANT	( u -- //  string> )
 3412              	// 	Compile a new constant.
 3413              	
 3414 3024 EC2F0000 		.word	_IMMED
 3415 3028 08       	_CONST:	.byte  8
 3416 3029 434F4E53 		.ascii "CONSTANT"
 3416      54414E54 
 3417 3031 0000BF   		.p2align 2 	
 3418              	CONST:
 3419 3034 504700BF 		_NEST 
 3420 3038 BD250000 		_ADR	TOKEN
 3421 303c 5D2E0000 		_ADR	SNAME
 3422 3040 552F0000 		_ADR	OVERT
 3423 3044 81120000 		_ADR	COMPI_NEST
 3424 3048 49140000 		_DOLIT	DOCON
ARM GAS  forth.s 			page 122


 3424      34190000 
 3425 3050 B12F0000 		_ADR	CALLC
 3426 3054 3D2B0000 		_ADR	COMMA
 3427 3058 49140000 		_DOLIT	UNNEST 
 3427      76120000 
 3428 3060 B12F0000 		_ADR	CALLC  
 3429 3064 77120000 		_UNNEST
 3430              	
 3431              		.p2align 2 
 3432              	// doDOES> ( -- a )
 3433              	// runtime action of DOES> 
 3434              	// leave parameter field address on stack 
 3435              	DODOES:
 3436 3068 504700BF 		_NEST 
 3437 306c FD140000 		_ADR	RFROM
 3438 3070 DD160000 		_ADR	CELLP 
 3439 3074 9D160000 		_ADR	ONEP  
 3440 3078 5D1A0000 		_ADR LAST 
 3441 307c D1140000 		_ADR AT
 3442 3080 D9250000 		_ADR NAMET 
 3443 3084 DD160000 		_ADR CELLP 
 3444 3088 BD140000 		_ADR STORE  
 3445 308c 77120000 		_UNNEST 
 3446              	
 3447              		.p2align 2
 3448              	//  DOES> ( -- )
 3449              	//  compile time action 
 3450 3090 28300000 		.word _CONST   
 3451 3094 C5       	_DOES: .byte IMEDD+COMPO+5 
 3452 3095 444F4553 		.ascii "DOES>"
 3452      3E
 3453 309a 00BF     		.p2align 2
 3454              	DOES: 
 3455 309c 504700BF 		_NEST 
 3456 30a0 49140000 		_DOLIT DODOES 
 3456      68300000 
 3457 30a8 B12F0000 		_ADR CALLC 
 3458 30ac 49140000 		_DOLIT	UNNEST
 3458      76120000 
 3459 30b4 B12F0000 		_ADR	CALLC 
 3460 30b8 81120000 		_ADR COMPI_NEST
 3461 30bc 49140000 		_DOLIT RFROM 
 3461      FC140000 
 3462 30c4 B12F0000 		_ADR	CALLC
 3463 30c8 77120000 		_UNNEST 
 3464              	
 3465              	
 3466              	
 3467              	//  DEFER@ ( "name" -- a )
 3468              	//  return value of code field of defered function. 
 3469 30cc 94300000 		.word _DOES 
 3470 30d0 06       	_DEFERAT: .byte 6 
 3471 30d1 44454645 		.ascii "DEFER@"
 3471      5240
 3472 30d7 00       		.p2align 2 
 3473              	DEFERAT: 
 3474 30d8 504700BF 		_NEST 
ARM GAS  forth.s 			page 123


 3475 30dc FD2A0000 		_ADR TICK
 3476 30e0 DD160000 		_ADR CELLP 
 3477 30e4 D1140000 		_ADR AT 
 3478 30e8 AD160000 		_ADR ONEM 
 3479 30ec 77120000 		_UNNEST 
 3480              	
 3481              	// DEFER! ( "name1" "name2" -- )
 3482              	// assign an action to a defered word 
 3483 30f0 D0300000 		.word _DEFERAT 
 3484 30f4 06       	_DEFERSTO: .byte 6 
 3485 30f5 44454645 		.ascii "DEFER!" 
 3485      5221
 3486 30fb 00       		.p2align 2 
 3487              	DEFERSTO:
 3488 30fc 504700BF 		_NEST 
 3489 3100 FD2A0000 		_ADR TICK 
 3490 3104 9D160000 		_ADR ONEP 
 3491 3108 FD2A0000 		_ADR TICK 
 3492 310c DD160000 		_ADR CELLP 
 3493 3110 BD140000 		_ADR STORE 
 3494 3114 77120000 		_UNNEST
 3495              	
 3496              	//  DEFER ( "name" -- )
 3497              	//  create a defered definition
 3498 3118 F4300000 		.word _DEFERSTO  
 3499 311c 05       	_DEFER: .byte 5 
 3500 311d 44454645 		.ascii "DEFER"
 3500      52
 3501 3122 00BF     		.p2align 2
 3502              	DEFER:
 3503 3124 504700BF 		_NEST 
 3504 3128 75310000 		_ADR CREAT 
 3505 312c 49140000 		_DOLIT UNNEST 
 3505      76120000 
 3506 3134 B12F0000 		_ADR CALLC 
 3507 3138 49140000 		_DOLIT DEFER_NOP
 3507      5C310000 
 3508 3140 9D160000 		_ADR ONEP 
 3509 3144 5D1A0000 		_ADR LAST 
 3510 3148 D1140000 		_ADR AT 
 3511 314c D9250000 		_ADR NAMET 
 3512 3150 DD160000 		_ADR CELLP 
 3513 3154 BD140000 		_ADR STORE 
 3514 3158 77120000 		_UNNEST 
 3515              	DEFER_NOP:
 3516 315c 504700BF 		_NEST  
 3517 3160 45140000 		_ADR NOP 
 3518 3164 77120000 		_UNNEST 
 3519              	
 3520              	//    CREATE	( -- //  string> )
 3521              	// 	Compile a new array entry without allocating code space.
 3522              	
 3523 3168 1C310000 		.word	_DEFER 
 3524 316c 06       	_CREAT:	.byte  6
 3525 316d 43524541 		.ascii "CREATE"
 3525      5445
 3526 3173 00       		.p2align 2 	
ARM GAS  forth.s 			page 124


 3527              	CREAT:
 3528 3174 504700BF 		_NEST 
 3529 3178 BD250000 		_ADR	TOKEN
 3530 317c 5D2E0000 		_ADR	SNAME
 3531 3180 552F0000 		_ADR	OVERT
 3532 3184 81120000 		_ADR	COMPI_NEST 
 3533 3188 49140000 		_DOLIT	DOVAR
 3533      28190000 
 3534 3190 B12F0000 		_ADR	CALLC
 3535 3194 77120000 		_UNNEST
 3536              	
 3537              	//    VARIABLE	( -- //  string> )
 3538              	// 	Compile a new variable initialized to 0.
 3539              	
 3540 3198 6C310000 		.word	_CREAT
 3541 319c 08       	_VARIA:	.byte  8
 3542 319d 56415249 		.ascii "VARIABLE"
 3542      41424C45 
 3543 31a5 0000BF   		.p2align 2 	
 3544              	VARIA:
 3545 31a8 504700BF 		_NEST
 3546 31ac 75310000 		_ADR	CREAT
 3547 31b0 49140000 		_DOLIT	0
 3547      00000000 
 3548 31b8 3D2B0000 		_ADR	COMMA
 3549 31bc 49140000 		_DOLIT UNNEST
 3549      76120000 
 3550 31c4 B12F0000 		_ADR	CALLC  
 3551 31c8 77120000 		_UNNEST
 3552              	
 3553              	// **************************************************************************
 3554              	//  Tools
 3555              	
 3556              	//    dm+	 ( a u -- a )
 3557              	// 	Dump u bytes from , leaving a+u on the stack.
 3558              	
 3559              	// 	.word	_VARIA 
 3560              	// _DMP	.byte  3
 3561              	// 	.ascii "dm+"
 3562              	// 	.p2align 2 	
 3563              	DMP:
 3564 31cc 504700BF 		_NEST
 3565 31d0 A1150000 		_ADR	OVER
 3566 31d4 49140000 		_DOLIT	4
 3566      04000000 
 3567 31dc F1220000 		_ADR	UDOTR			// display address
 3568 31e0 BD210000 		_ADR	SPACE
 3569 31e4 25150000 		_ADR	TOR			// start count down loop
 3570 31e8 9F140000 		_BRAN	PDUM2			// skip first pass
 3570      08320000 
 3571              	PDUM1:
 3572 31f0 7D150000 	  _ADR	DUPP
 3573 31f4 F1140000 		_ADR	CAT
 3574 31f8 49140000 		_DOLIT	3
 3574      03000000 
 3575 3200 F1220000 		_ADR	UDOTR			// display numeric data
 3576 3204 9D160000 		_ADR	ONEP			// increment address
ARM GAS  forth.s 			page 125


 3577              	PDUM2:
 3578 3208 6D140000 	  _ADR	DONXT
 3579 320c F0310000 		.word	PDUM1	// loop till done
 3580 3210 77120000 		_UNNEST
 3581              		.p2align 2 
 3582              	//    DUMP	( a u -- )
 3583              	// 	Dump u bytes from a, in a formatted manner.
 3584              	
 3585 3214 9C310000 		.word	_VARIA
 3586 3218 04       	_DUMP:	.byte  4
 3587 3219 44554D50 		.ascii "DUMP"
 3588 321d 0000BF   		.p2align 2 	
 3589              	DUMP:
 3590 3220 504700BF 		_NEST
 3591 3224 99190000 		_ADR	BASE
 3592 3228 D1140000 		_ADR	AT
 3593 322c 25150000 		_ADR	TOR
 3594 3230 B51F0000 		_ADR	HEX			// save radix,set hex
 3595 3234 49140000 		_DOLIT	16
 3595      10000000 
 3596 323c CD1B0000 		_ADR	SLASH			// change count to lines
 3597 3240 25150000 		_ADR	TOR
 3598 3244 9F140000 		_BRAN	DUMP4			// start count down loop
 3598      74320000 
 3599              	DUMP1:
 3600 324c 45220000 	  _ADR	CR
 3601 3250 49140000 		_DOLIT	16
 3601      10000000 
 3602 3258 B5170000 		_ADR	DDUP
 3603 325c CD310000 		_ADR	DMP			// display numeric
 3604 3260 65170000 		_ADR	ROT
 3605 3264 65170000 		_ADR	ROT
 3606 3268 BD210000 		_ADR	SPACE
 3607 326c BD210000 		_ADR	SPACE
 3608 3270 11220000 		_ADR	TYPEE			// display printable characters
 3609              	DUMP4:
 3610 3274 6D140000 	  _DONXT	DUMP1	// loop till done
 3610      4C320000 
 3611              	DUMP3:
 3612 327c 6D150000 		_ADR	DROP
 3613 3280 FD140000 		_ADR	RFROM
 3614 3284 99190000 		_ADR	BASE
 3615 3288 BD140000 		_ADR	STORE			// restore radix
 3616 328c 77120000 		_UNNEST
 3617              	
 3618              	//    .S	  ( ... -- ... )
 3619              	// 	Display the contents of the data stack.
 3620              	
 3621 3290 18320000 		.word	_DUMP
 3622              	_DOTS:
 3623 3294 02       		.byte  2
 3624 3295 2E53     		.ascii ".S"
 3625 3297 00       		.p2align 2 	
 3626              	DOTS:
 3627 3298 504700BF 		_NEST
 3628 329c BD210000 		_ADR	SPACE
 3629 32a0 951C0000 		_ADR	DEPTH			// stack depth
ARM GAS  forth.s 			page 126


 3630 32a4 25150000 		_ADR	TOR			// start count down loop
 3631 32a8 9F140000 		_BRAN	DOTS2			// skip first pass
 3631      BC320000 
 3632              	DOTS1:
 3633 32b0 11150000 		_ADR	RAT
 3634 32b4 B91C0000 		_ADR	PICK
 3635 32b8 49230000 		_ADR	DOT			// index stack, display contents
 3636              	DOTS2:
 3637 32bc 6D140000 		_DONXT	DOTS1	// loop till done
 3637      B0320000 
 3638 32c4 BD210000 		_ADR	SPACE
 3639 32c8 77120000 		_UNNEST
 3640              	
 3641              	//    >NAME	( ca -- na | F )
 3642              	// 	Convert code address to a name address.
 3643              	
 3644 32cc 94320000 		.word	_DOTS
 3645 32d0 05       	_TNAME:	.byte  5
 3646 32d1 3E4E414D 		.ascii ">NAME"
 3646      45
 3647 32d6 00BF     		.p2align 2 	
 3648              	TNAME:
 3649 32d8 504700BF 		_NEST
 3650 32dc 25150000 		_ADR	TOR			//  
 3651 32e0 211A0000 		_ADR	CNTXT			//  va
 3652 32e4 D1140000 		_ADR	AT			//  na
 3653              	TNAM1:
 3654 32e8 7D150000 		_ADR	DUPP			//  na na
 3655 32ec 8B140000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3655      1C330000 
 3656 32f4 7D150000 		_ADR	DUPP			//  na na
 3657 32f8 D9250000 		_ADR	NAMET			//  na ca
 3658 32fc 11150000 		_ADR	RAT			//  na ca code
 3659 3300 E9150000 		_ADR	XORR			//  na f --
 3660 3304 8B140000 		_QBRAN	TNAM2
 3660      1C330000 
 3661 330c ED160000 		_ADR	CELLM			//  la 
 3662 3310 D1140000 		_ADR	AT			//  next_na
 3663 3314 9F140000 		_BRAN	TNAM1
 3663      E8320000 
 3664              	TNAM2:	
 3665 331c FD140000 		_ADR	RFROM
 3666 3320 6D150000 		_ADR	DROP			//  0|na --
 3667 3324 77120000 		_UNNEST			// 0
 3668              	
 3669              	//    .ID	 ( na -- )
 3670              	// 	Display the name at address.
 3671              	
 3672 3328 D0320000 		.word	_TNAME
 3673 332c 03       	_DOTID:	.byte  3
 3674 332d 2E4944   		.ascii ".ID"
 3675              		.p2align 2 	
 3676              	DOTID:
 3677 3330 504700BF 		_NEST
 3678 3334 51170000 		_ADR	QDUP			// if zero no name
 3679 3338 8B140000 		_QBRAN	DOTI1
 3679      58330000 
ARM GAS  forth.s 			page 127


 3680 3340 01190000 		_ADR	COUNT
 3681 3344 49140000 		_DOLIT	0x1F
 3681      1F000000 
 3682 334c C1150000 		_ADR	ANDD			// mask lexicon bits
 3683 3350 11220000 		_ADR	TYPEE
 3684 3354 77120000 		_UNNEST			// display name string
 3685              	DOTI1:
 3686 3358 AD220000 		_DOTQP	9," {noName}"
 3686      09207B6E 
 3686      6F4E616D 
 3686      657D00BF 
 3687 3368 77120000 		_UNNEST
 3688              	
 3689              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3690              	.if WANT_SEE 
 3691              	//    SEE	 ( -- //  string> )
 3692              	// 	A simple decompiler.
 3693              	
 3694              		.word	_DOTID
 3695              	_SEE:	.byte  3
 3696              		.ascii "SEE"
 3697              		.p2align 2 	
 3698              	SEE:
 3699              		_NEST
 3700              		_ADR	TICK	//  ca --, starting address
 3701              		_ADR	CR	
 3702              		_DOLIT	20
 3703              		_ADR	TOR
 3704              	SEE1:
 3705              		_ADR	CELLP			//  a
 3706              		_ADR	DUPP			//  a a
 3707              		_ADR	DECOMP		//  a
 3708              		_DONXT	SEE1
 3709              		_ADR	DROP
 3710              		_UNNEST
 3711              	
 3712              	// 	DECOMPILE ( a -- )
 3713              	// 	Convert code in a.  Display name of command or as data.
 3714              	
 3715              		.word	_SEE
 3716              	_DECOM:	.byte  9
 3717              		.ascii "DECOMPILE"
 3718              		.p2align 2 
 3719              		
 3720              	DECOMP:	
 3721              		_NEST
 3722              		_ADR	DUPP			//  a a
 3723              	// 	_ADR	TOR			//  a
 3724              		_ADR	AT			//  a code
 3725              		_ADR	DUPP			//  a code code
 3726              		_DOLIT	0xF800D000 //0xF800F800
 3727              		_ADR	ANDD
 3728              		_DOLIT	0xF000D000 //0xF800F000
 3729              		_ADR	EQUAL			//  a code ?
 3730              		_ADR	INVER 
 3731              		_QBRAN	DECOM2	//  not a command
 3732              		//  a valid_code --, extract address and display name
ARM GAS  forth.s 			page 128


 3733              		MOVW	IP,#0xFFE
 3734              		MOV	WP,TOS
 3735              		LSL	TOS,TOS,#21		//  get bits 22-12
 3736              		ASR	TOS,TOS,#9		//  with sign extension
 3737              		LSR	WP,WP,#15		//  get bits 11-1
 3738              		AND	WP,WP,IP		//  retain only bits 11-1
 3739              		ORR	TOS,TOS,WP		//  get bits 22-1
 3740              		NOP
 3741              		_ADR	OVER			//  a offset a
 3742              		_ADR	PLUS			//  a target-4
 3743              		_ADR	CELLP			//  a target
 3744              		_ADR	TNAME			//  a na/0 --, is it a name?
 3745              		_ADR	QDUP			//  name address or zero
 3746              		_QBRAN	DECOM1
 3747              		_ADR	SPACE			//  a na
 3748              		_ADR	DOTID			//  a --, display name
 3749              	// 	_ADR	RFROM			//  a
 3750              		_ADR	DROP
 3751              		_UNNEST
 3752              	DECOM1:	// _ADR	RFROM		//  a
 3753              		_ADR	AT			//  data
 3754              		_ADR	UDOT			//  display data
 3755              		_UNNEST
 3756              	DECOM2:
 3757              		_ADR	UDOT
 3758              	// 	_ADR	RFROM
 3759              		_ADR	DROP
 3760              		_UNNEST
 3761              	
 3762              	//    WORDS	( -- )
 3763              	// 	Display the names in the context vocabulary.
 3764              	
 3765              		.word	_DECOM
 3766              	.else 
 3767 336c 2C330000 		.word _DOTID 
 3768              	.endif 
 3769 3370 05       	_WORDS:	.byte  5
 3770 3371 574F5244 		.ascii "WORDS"
 3770      53
 3771 3376 00BF     		.p2align 2 	
 3772              	WORDS:
 3773 3378 504700BF 		_NEST
 3774 337c 45220000 		_ADR	CR
 3775 3380 211A0000 		_ADR	CNTXT
 3776 3384 D1140000 		_ADR	AT			// only in context
 3777              	WORS1:
 3778 3388 51170000 		_ADR	QDUP			// ?at end of list
 3779 338c 8B140000 		_QBRAN	WORS2
 3779      B0330000 
 3780 3394 7D150000 		_ADR	DUPP
 3781 3398 BD210000 		_ADR	SPACE
 3782 339c 31330000 		_ADR	DOTID			// display a name
 3783 33a0 ED160000 		_ADR	CELLM
 3784 33a4 D1140000 		_ADR	AT
 3785 33a8 9F140000 		_BRAN	WORS1
 3785      88330000 
 3786              	WORS2:
ARM GAS  forth.s 			page 129


 3787 33b0 77120000 		_UNNEST
 3788              	
 3789              	// **************************************************************************
 3790              	//  cold start
 3791              	
 3792              	//    VER	 ( -- n )
 3793              	// 	Return the version number of this implementation.
 3794              	
 3795              	// 	.word	_WORDS
 3796              	// _VERSN	.byte  3
 3797              	// 	.ascii "VER"
 3798              	// 	.p2align 2 	
 3799              	VERSN:
 3800 33b4 504700BF 		_NEST
 3801 33b8 49140000 		_DOLIT	VER*256+EXT
 3801      00010000 
 3802 33c0 77120000 		_UNNEST
 3803              	
 3804              	//    hi	  ( -- )
 3805              	// 	Display the sign-on message of eForth.
 3806              	
 3807 33c4 70330000 		.word	_WORDS
 3808 33c8 02       	_HI:	.byte  2
 3809 33c9 4849     		.ascii "HI"
 3810 33cb 00       		.p2align 2
 3811              	
 3812              	HI:
 3813 33cc 504700BF 		_NEST
 3814 33d0 45220000 		_ADR	CR	// initialize I/O
 3815 33d4 AD220000 		_DOTQP	17, "beyond Jupiter, v" 
 3815      11626579 
 3815      6F6E6420 
 3815      4A757069 
 3815      7465722C 
 3816 33ec 99190000 		_ADR	BASE
 3817 33f0 D1140000 		_ADR	AT
 3818 33f4 B51F0000 		_ADR	HEX	// save radix
 3819 33f8 B5330000 		_ADR	VERSN
 3820 33fc A51E0000 		_ADR	BDIGS
 3821 3400 F11E0000 		_ADR	DIG
 3822 3404 F11E0000 		_ADR	DIG
 3823 3408 49140000 		_DOLIT	'.'
 3823      2E000000 
 3824 3410 C51E0000 		_ADR	HOLD
 3825 3414 111F0000 		_ADR	DIGS
 3826 3418 651F0000 		_ADR	EDIGS
 3827 341c 11220000 		_ADR	TYPEE	// format version number
 3828 3420 99190000 		_ADR	BASE
 3829 3424 BD140000 		_ADR	STORE
 3830 3428 45220000 		_ADR	CR
 3831 342c 77120000 		_UNNEST			// restore radix
 3832              	
 3833              	//    COLD	( -- )
 3834              	// 	The high level cold start sequence.
 3835              	
 3836 3430 C8330000 		.word	_HI
 3837 3434 04       	_LASTN:	.byte  4
ARM GAS  forth.s 			page 130


 3838 3435 434F4C44 		.ascii "COLD"
 3839 3439 0000BF   		.p2align 2	
 3840              	COLD:
 3841 343c 00B5FCF7 		_CALL forth_init 
 3841      B1FE5DF8 
 3841      04EB
 3842 3446 DFF84CC0 		ldr IP,=COLD1 
 3843 344a FDF711BF 		_NEXT
 3844 344e 00BF     		.p2align 2 
 3845              	COLD1:
 3846 3450 49140000 		_DOLIT  0 
 3846      00000000 
 3847 3458 01000000 		_ADR ULED // turn off user LED 
 3848 345c 49140000 		_DOLIT	UZERO
 3848      88040000 
 3849 3464 49140000 		_DOLIT	UPP
 3849      00000020 
 3850 346c 49140000 		_DOLIT	ULAST-UZERO
 3850      A0000000 
 3851 3474 811D0000 		_ADR	MOVE 			// initialize user area
 3852 3478 5D2A0000 		_ADR	PRESE			// initialize stack and TIB
 3853 347c 85190000 		_ADR	TBOOT
 3854 3480 311D0000 		_ADR	ATEXE			// application boot
 3855 3484 552F0000 		_ADR	OVERT
 3856 3488 9F140000 		_BRAN	QUIT			// start interpretation
 3856      7C2A0000 
 3857              	COLD2:
 3858              		.p2align 2 	
 3859              	CTOP:
 3860 3490 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3861              	
 3862              	
 3863 3494 50340000 	  .end 
ARM GAS  forth.s 			page 131


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 132


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
ARM GAS  forth.s 			page 133


     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:181    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:182    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:183    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:184    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:185    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:186    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:187    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:188    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:189    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:190    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:191    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:192    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:193    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:194    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:195    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:196    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:197    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:198    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:199    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:200    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:201    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:202    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:203    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:204    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:205    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:206    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:207    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:208    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:209    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:210    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:211    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:212    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:213    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:214    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:215    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:216    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:217    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:218    *ABS*:0000000000000314 NVIC_IABR5
ARM GAS  forth.s 			page 134


     stm32f411ce.inc:219    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:220    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:222    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:225    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:226    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:227    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:228    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:229    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:230    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:231    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:232    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:233    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:236    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:237    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:238    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:239    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:240    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:241    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:244    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:245    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:246    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:247    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:248    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:249    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000017 EXIT9_5_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:261    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:272    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:278    *ABS*:000000000000003a DMAS2_IRQ
ARM GAS  forth.s 			page 135


     stm32f411ce.inc:279    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:280    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:281    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:282    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:288    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:289    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:290    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:294    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:295    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:296    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:297    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:299    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:300    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:301    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:302    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:306    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:309    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:310    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:311    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:312    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:313    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:314    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:315    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:316    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:317    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:318    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:319    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:320    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:321    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:322    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:323    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:324    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:325    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:326    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:327    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:328    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:331    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:333    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:334    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:335    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:336    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:337    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:338    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:339    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:342    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:344    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:345    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:346    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:347    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:348    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:349    *ABS*:0000000000000014 EXTI_PR
ARM GAS  forth.s 			page 136


          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 NBASE
          macros.inc:78     *ABS*:0000000000000018 TMP
          macros.inc:79     *ABS*:000000000000001c CSPAN
          macros.inc:80     *ABS*:0000000000000020 TOIN
          macros.inc:81     *ABS*:0000000000000024 NTIBB
          macros.inc:82     *ABS*:0000000000000028 TIBUF
             forth.s:2821   .text:0000000000002a18 EVAL
             forth.s:1774   .text:0000000000001ec4 HOLD
          macros.inc:85     *ABS*:0000000000000034 CTXT
          macros.inc:86     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:87     *ABS*:000000000000003c USER_CTOP
          macros.inc:88     *ABS*:0000000000000040 LASTN
          macros.inc:89     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:90     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:91     *ABS*:0000000000000054 RX_HEAD
          macros.inc:92     *ABS*:0000000000000058 RX_TAIL
          macros.inc:93     *ABS*:000000000000005c VID_CNTR
          macros.inc:94     *ABS*:0000000000000060 VID_STATE
          macros.inc:95     *ABS*:0000000000000064 VID_FIELD
          macros.inc:96     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:97     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:98     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:99     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:100    *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:101    *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:102    *ABS*:0000000000000088 ROW
          macros.inc:103    *ABS*:000000000000008c COL
          macros.inc:104    *ABS*:0000000000000090 BK_COLOR
          macros.inc:105    *ABS*:0000000000000094 PEN_COLOR
ARM GAS  forth.s 			page 137


              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:313    .text:000000000000017c reset_handler
              init.s:157    .text:0000000000000000 default_handler
              init.s:216    .text:00000000000000c4 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
             tvout.s:118    .text:00000000000005e0 tv_out_isr
              init.s:233    .text:00000000000000e0 uart_rx_handler
           ps2_kbd.s:77     .text:0000000000000cb4 kbd_isr
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .text:0000000000000000 $t
              init.s:178    .text:0000000000000058 exception_msg
              init.s:292    .text:0000000000000150 uart_puts
              init.s:190    .text:0000000000000078 print_hex
              init.s:273    .text:0000000000000140 uart_putc
              init.s:253    .text:0000000000000116 reset_mcu
              init.s:179    .text:0000000000000058 $d
              init.s:182    .text:0000000000000076 $t
              init.s:225    .text:00000000000000de systick_exit
              init.s:250    .text:000000000000010a user_reboot
              init.s:261    .text:000000000000012c user_reboot_msg
              init.s:262    .text:000000000000012c $d
              init.s:265    .text:000000000000013e $t
              init.s:462    .text:00000000000002fc remap
              init.s:341    .text:00000000000001cc init_devices
              init.s:431    .text:00000000000002a4 uart_init
             tvout.s:62     .text:0000000000000530 tv_init
           ps2_kbd.s:307    .text:0000000000000ed4 kbd_init
              init.s:328    .text:00000000000001a4 forth_init
             forth.s:3840   .text:000000000000343c COLD
             forth.s:85     .text:0000000000001268 NEST
              init.s:354    .text:00000000000001ea wait_hserdy
              init.s:375    .text:000000000000020c wait_pllrdy
              init.s:387    .text:0000000000000226 wait_sws
              init.s:552    .text:00000000000003c6 gpio_config
              init.s:627    .text:0000000000000472 gpio_out
              init.s:487    .text:000000000000033c nvic_set_priority
              init.s:508    .text:000000000000036e nvic_enable_irq
              init.s:642    .text:0000000000000488 UZERO
              init.s:676    .text:0000000000000528 ULAST
              init.s:496    .text:0000000000000354 negative_irq
              init.s:525    .text:0000000000000398 nvic_disable_irq
              init.s:589    .text:000000000000042e input_pull
              init.s:582    .text:000000000000041c output_type
              init.s:605    .text:0000000000000444 gpio_speed
              init.s:643    .text:0000000000000488 $d
             forth.s:3812   .text:00000000000033cc HI
             forth.s:2749   .text:0000000000002934 INTER
             forth.s:3837   .text:0000000000003434 _LASTN
             forth.s:3859   .text:0000000000003490 CTOP
              init.s:677    .text:0000000000000528 $d
           tvout.inc:2      *ABS*:0000000000000140 HRES
           tvout.inc:3      *ABS*:00000000000000c8 VRES
           tvout.inc:4      *ABS*:0000000000000004 BPP
           tvout.inc:5      *ABS*:00000000000000a0 BPR
           tvout.inc:6      *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:8      *ABS*:0000000000000006 CHAR_WIDTH
ARM GAS  forth.s 			page 138


           tvout.inc:9      *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:37     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:38     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:39     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:40     *ABS*:000000000000173f VIDEO_END
             tvout.s:43     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:44     *ABS*:0000000000000001 ST_PREVID
             tvout.s:45     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:46     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:48     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:49     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:62     .text:0000000000000530 $t
             tvout.s:137    .text:000000000000060c state_vsync
             tvout.s:178    .text:0000000000000660 state_pre_video
             tvout.s:189    .text:0000000000000672 state_video_out
             tvout.s:219    .text:00000000000006ca state_post_video
             tvout.s:236    .text:00000000000006f0 tv_isr_exit
             tvout.s:167    .text:0000000000000646 sync_end
             tvout.s:228    .text:00000000000006dc frame_end
             forth.s:124    .text:00000000000012a2 LINK
             tvout.s:247    .text:00000000000006f2 $d
             tvout.s:247    .text:00000000000006f6 _BACKCOLOR
             tvout.s:247    .text:0000000000000704 BACKCOLOR
             forth.s:89     .text:0000000000001270 INEXT
             tvout.s:254    .text:0000000000000710 $d
             tvout.s:254    .text:0000000000000714 _PENCOLOR
             tvout.s:254    .text:000000000000071e $t
             tvout.s:254    .text:0000000000000720 PENCOLOR
             tvout.s:261    .text:000000000000072c $d
             tvout.s:261    .text:0000000000000730 _COLUMN
             tvout.s:261    .text:0000000000000738 COLUMN
             tvout.s:268    .text:0000000000000744 $d
             tvout.s:268    .text:0000000000000748 _CURSOR_ROW
             tvout.s:268    .text:000000000000074c $t
             tvout.s:268    .text:000000000000074c CURSOR_ROW
             tvout.s:275    .text:0000000000000758 $d
             tvout.s:275    .text:000000000000075c _ROWY
             tvout.s:275    .text:0000000000000762 $t
             tvout.s:275    .text:0000000000000764 ROWY
             tvout.s:282    .text:0000000000000770 $d
             tvout.s:282    .text:0000000000000774 _COLX
             tvout.s:282    .text:000000000000077a $t
             tvout.s:282    .text:000000000000077c COLX
             tvout.s:289    .text:0000000000000788 $d
             tvout.s:289    .text:000000000000078c _FONT
             tvout.s:289    .text:0000000000000794 FONT
             tvout.s:584    .rodata:0000000000000000 font_6x8
             tvout.s:296    .text:000000000000079e $d
             tvout.s:296    .text:00000000000007a2 _VIDBUFF
ARM GAS  forth.s 			page 139


             tvout.s:296    .text:00000000000007aa $t
             tvout.s:296    .text:00000000000007ac VIDBUFF
             tvout.s:308    .text:00000000000007b6 $d
             tvout.s:308    .text:00000000000007ba _PLOT
             tvout.s:308    .text:00000000000007c0 PLOT
             tvout.s:356    .text:0000000000000842 plot_op
             tvout.s:324    .text:00000000000007ea op_back
             tvout.s:333    .text:0000000000000804 op_pen
             tvout.s:342    .text:000000000000081e op_invert
             tvout.s:346    .text:0000000000000826 op_xor
             tvout.s:356    .text:0000000000000842 $d
             tvout.s:361    .text:000000000000084a _VSYNC
             tvout.s:361    .text:0000000000000850 $t
             tvout.s:361    .text:0000000000000850 VSYNC
             tvout.s:369    .text:000000000000085a $d
             tvout.s:369    .text:000000000000085e _CLS
             tvout.s:369    .text:0000000000000862 $t
             tvout.s:369    .text:0000000000000864 CLS
             tvout.s:393    .text:00000000000008a6 $d
             tvout.s:393    .text:00000000000008aa _CLRLINE
             tvout.s:393    .text:00000000000008b2 $t
             tvout.s:393    .text:00000000000008b4 CLRLINE
             tvout.s:395    .text:00000000000008b8 $d
             forth.s:274    .text:0000000000001448 DOLIT
             forth.s:490    .text:000000000000157c DUPP
             forth.s:432    .text:0000000000001524 TOR
             forth.s:638    .text:0000000000001660 STAR
             forth.s:614    .text:0000000000001640 PLUS
             forth.s:408    .text:00000000000014fc RFROM
             forth.s:1674   .text:0000000000001db4 FILL
             forth.s:92     .text:0000000000001276 UNNEST
             tvout.s:408    .text:00000000000008ec _SCROLLUP
             tvout.s:408    .text:00000000000008f8 SCROLLUP
             tvout.s:410    .text:00000000000008fc $d
             forth.s:501    .text:000000000000158c SWAP
             forth.s:626    .text:0000000000001650 SUBB
             forth.s:1650   .text:0000000000001d80 MOVE
             tvout.s:427    .text:0000000000000944 _RIGHT
             tvout.s:427    .text:000000000000094a $t
             tvout.s:427    .text:000000000000094c RIGHT
             tvout.s:438    .text:000000000000096c TVCR
             tvout.s:438    .text:0000000000000960 $d
             tvout.s:438    .text:0000000000000964 _TVCR
             tvout.s:438    .text:000000000000096a $t
             tvout.s:449    .text:0000000000000994 $d
             tvout.s:454    .text:000000000000099c FONT_PIXEL
             tvout.s:455    .text:000000000000099c $t
             tvout.s:461    .text:00000000000009ac INCR_X
             tvout.s:468    .text:00000000000009b8 NEXT_PIXEL
             tvout.s:477    .text:00000000000009c0 CHAR_ROW
             tvout.s:479    .text:00000000000009c4 $d
             forth.s:861    .text:00000000000017b4 DDUP
             forth.s:420    .text:0000000000001510 RAT
             forth.s:301    .text:000000000000146c DONXT
             forth.s:849    .text:00000000000017a0 TDROP
             tvout.s:496    .text:0000000000000a00 CHAR_FONT
             tvout.s:497    .text:0000000000000a00 $t
ARM GAS  forth.s 			page 140


             tvout.s:508    .text:0000000000000a14 $d
             tvout.s:508    .text:0000000000000a18 _TVPUTC
             tvout.s:508    .text:0000000000000a20 $t
             tvout.s:508    .text:0000000000000a20 TVPUTC
             tvout.s:510    .text:0000000000000a24 $d
             forth.s:373    .text:00000000000014d0 AT
             forth.s:813    .text:0000000000001764 ROT
             forth.s:397    .text:00000000000014f0 CAT
             forth.s:678    .text:000000000000169c ONEP
             tvout.s:535    .text:0000000000000a88 _PRINT
             tvout.s:535    .text:0000000000000a8e $t
             tvout.s:535    .text:0000000000000a90 PRINT
             tvout.s:537    .text:0000000000000a94 $d
             forth.s:1070   .text:0000000000001900 COUNT
             forth.s:689    .text:00000000000016ac ONEM
             forth.s:479    .text:000000000000156c DROP
             tvout.s:550    .text:0000000000000ac4 _CURPOS
             tvout.s:550    .text:0000000000000acc CURPOS
             tvout.s:565    .text:0000000000000aee $d
             tvout.s:565    .text:0000000000000af2 _INPUT
             tvout.s:565    .text:0000000000000af8 $t
             tvout.s:565    .text:0000000000000af8 INPUT
             tvout.s:567    .text:0000000000000afc $d
             forth.s:1585   .text:0000000000001cf8 PAD
             forth.s:2653   .text:0000000000002820 ACCEP
             forth.s:514    .text:00000000000015a0 OVER
             forth.s:384    .text:00000000000014dc CSTOR
             tvout.s:580    .rodata:0000000000000000 $d
             tvout.s:685    .text:0000000000000b28 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
ARM GAS  forth.s 			page 141


       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:83     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:84     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:85     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:86     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:87     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:88     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:89     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:90     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:91     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:92     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:93     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:94     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:95     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:96     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:97     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:98     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:99     *ABS*:000000000000008b VK_F11
ARM GAS  forth.s 			page 142


       ps2_codes.inc:100    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:101    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:102    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:103    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:104    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:105    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:106    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:107    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:108    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:109    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:110    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:111    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:112    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:113    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:114    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:115    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:116    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:117    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:118    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:119    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:120    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:121    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:122    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:123    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:124    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:125    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:127    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:128    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:129    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:130    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:131    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:132    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:133    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:134    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:135    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:137    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:138    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:139    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:140    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:141    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:142    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:143    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:144    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:145    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:146    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:147    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:148    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:150    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000b34 sc_ascii
         mcSaite.inc:100    .text:0000000000000be8 shifted
         mcSaite.inc:151    .text:0000000000000c48 altchar
         mcSaite.inc:167    .text:0000000000000c58 extended
         mcSaite.inc:191    .text:0000000000000c80 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
ARM GAS  forth.s 			page 143


           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000006d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000006f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000c KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000b KBD_CLOCK_PIN
           ps2_kbd.s:77     .text:0000000000000cb4 $t
           ps2_kbd.s:178    .text:0000000000000dde send_bit
           ps2_kbd.s:106    .text:0000000000000d14 start_bit
           ps2_kbd.s:117    .text:0000000000000d38 parity_bit
           ps2_kbd.s:124    .text:0000000000000d4c stop_bit
           ps2_kbd.s:151    .text:0000000000000da2 store_code
           ps2_kbd.s:253    .text:0000000000000e74 do_async_key
           ps2_kbd.s:203    .text:0000000000000e22 send_parity
           ps2_kbd.s:210    .text:0000000000000e34 send_stop
           ps2_kbd.s:218    .text:0000000000000e42 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000000e62 is_async_key
           ps2_kbd.s:286    .text:0000000000000ec2 async_keys
           ps2_kbd.s:364    .text:0000000000000f66 table_scan
           ps2_kbd.s:260    .text:0000000000000e86 set_async_key
           ps2_kbd.s:295    .text:0000000000000ed0 async_jump
           ps2_kbd.s:265    .text:0000000000000e92 shift_key
           ps2_kbd.s:273    .text:0000000000000ea2 set_reset
           ps2_kbd.s:268    .text:0000000000000e98 ctrl_key
           ps2_kbd.s:271    .text:0000000000000e9e alt_key
           ps2_kbd.s:287    .text:0000000000000ec2 $d
           ps2_kbd.s:326    .text:0000000000000f12 $d
           ps2_kbd.s:326    .text:0000000000000f16 _KEY_ASYNC
           ps2_kbd.s:326    .text:0000000000000f20 $t
           ps2_kbd.s:326    .text:0000000000000f20 KEY_ASYNC
           ps2_kbd.s:336    .text:0000000000000f2e keycode
           ps2_kbd.s:351    .text:0000000000000f56 wait_code
           ps2_kbd.s:380    .text:0000000000000f80 $d
           ps2_kbd.s:380    .text:0000000000000f84 _INKEY
           ps2_kbd.s:380    .text:0000000000000f8a $t
           ps2_kbd.s:380    .text:0000000000000f8c INKEY
           ps2_kbd.s:396    .text:0000000000000fca inkey_exit
           ps2_kbd.s:398    .text:0000000000000fcc pause_key
           ps2_kbd.s:407    .text:0000000000000fe0 do_modifiers
           ps2_kbd.s:415    .text:0000000000000ff6 shift_down
           ps2_kbd.s:419    .text:0000000000000ffc altchar_down
           ps2_kbd.s:423    .text:0000000000001002 ctrl_down
           ps2_kbd.s:431    .text:000000000000101e do_capslock
           ps2_kbd.s:457    .text:0000000000001042 kbd_send
           ps2_kbd.s:516    .text:0000000000001106 kbd_clear_queue
           ps2_kbd.s:528    .text:0000000000001124 $d
           ps2_kbd.s:528    .text:0000000000001128 _KBD_RST
           ps2_kbd.s:528    .text:0000000000001130 $t
           ps2_kbd.s:528    .text:0000000000001130 KBD_RST
           ps2_kbd.s:548    .text:0000000000001174 $d
           ps2_kbd.s:548    .text:0000000000001178 _KBD_LED
           ps2_kbd.s:548    .text:0000000000001180 $t
ARM GAS  forth.s 			page 144


           ps2_kbd.s:548    .text:0000000000001180 KBD_LED
           ps2_kbd.s:571    .text:00000000000011d2 $d
           ps2_kbd.s:571    .text:00000000000011d6 _CAPS_LED
           ps2_kbd.s:571    .text:00000000000011e0 CAPS_LED
           ps2_kbd.s:582    .text:000000000000120a $d
           ps2_kbd.s:588    .text:0000000000001216 _WKEY
           ps2_kbd.s:588    .text:0000000000001220 WKEY
           ps2_kbd.s:590    .text:0000000000001224 $d
             forth.s:800    .text:0000000000001750 QDUP
             forth.s:322    .text:000000000000148a QBRAN
           ps2_kbd.s:594    .text:000000000000123c $d
             forth.s:72     .text:000000000000125c $t
             forth.s:75     .text:000000000000125c TPUSH
             forth.s:80     .text:0000000000001262 TPOP
             forth.s:105    .text:0000000000001280 COMPI_NEST
             forth.s:124    .text:000000000000129e $d
             forth.s:124    .text:00000000000012a2 _GETIP
             forth.s:124    .text:00000000000012ac GETIP
             forth.s:126    .text:00000000000012b0 $d
             forth.s:526    .text:00000000000015b0 ZLESS
             forth.s:539    .text:00000000000015c0 ANDD
             forth.s:339    .text:000000000000149e BRAN
             forth.s:590    .text:0000000000001618 RSHIFT
             forth.s:143    .text:000000000000130c _RAND
             forth.s:146    .text:0000000000001314 RAND
             forth.s:148    .text:0000000000001318 $d
             forth.s:912    .text:0000000000001808 ABSS
             forth.s:1130   .text:0000000000001948 SEED
             forth.s:602    .text:0000000000001630 LSHIFT
             forth.s:563    .text:00000000000015e8 XORR
             forth.s:360    .text:00000000000014bc STORE
             forth.s:1445   .text:0000000000001bb4 MODD
             forth.s:176    .text:0000000000001388 _PAUSE
             forth.s:178    .text:000000000000138e $t
             forth.s:179    .text:0000000000001390 PAUSE
             forth.s:181    .text:0000000000001394 $d
             forth.s:1152   .text:0000000000001970 TIMER
             forth.s:183    .text:000000000000139c PAUSE_LOOP
             forth.s:188    .text:00000000000013b4 PAUSE_EXIT
             forth.s:194    .text:00000000000013bc _ULED
             forth.s:198    .text:00000000000013c4 ULED
             forth.s:207    .text:00000000000013e0 ULED_OFF
             forth.s:213    .text:00000000000013e4 $d
             forth.s:214    .text:00000000000013e8 _QRX
             forth.s:217    .text:00000000000013f0 QKEY
             forth.s:218    .text:00000000000013f0 QRX
             forth.s:237    .text:000000000000141a $d
             forth.s:238    .text:000000000000141e _TXSTO
             forth.s:241    .text:0000000000001424 TXSTO
             forth.s:242    .text:0000000000001424 EMIT
             forth.s:243    .text:0000000000001424 TECHO
             forth.s:259    .text:000000000000143c $d
             forth.s:260    .text:0000000000001440 _NOP
             forth.s:262    .text:0000000000001444 $t
             forth.s:263    .text:0000000000001444 NOP
             forth.s:282    .text:0000000000001452 $d
             forth.s:283    .text:0000000000001456 _EXECU
ARM GAS  forth.s 			page 145


             forth.s:285    .text:000000000000145e $t
             forth.s:286    .text:0000000000001460 EXECU
             forth.s:308    .text:000000000000147c NEXT1
             forth.s:328    .text:0000000000001498 QBRAN1
             forth.s:346    .text:00000000000014a4 $d
             forth.s:347    .text:00000000000014a8 _EXIT
             forth.s:350    .text:00000000000014b0 EXIT
             forth.s:351    .text:00000000000014b0 $d
             forth.s:357    .text:00000000000014b8 _STORE
             forth.s:359    .text:00000000000014ba $t
             forth.s:369    .text:00000000000014c8 $d
             forth.s:370    .text:00000000000014cc _AT
             forth.s:372    .text:00000000000014ce $t
             forth.s:380    .text:00000000000014d4 $d
             forth.s:381    .text:00000000000014d8 _CSTOR
             forth.s:393    .text:00000000000014e8 $d
             forth.s:394    .text:00000000000014ec _CAT
             forth.s:404    .text:00000000000014f4 $d
             forth.s:405    .text:00000000000014f8 _RFROM
             forth.s:416    .text:0000000000001506 $d
             forth.s:417    .text:000000000000150a _RAT
             forth.s:428    .text:000000000000151a $d
             forth.s:429    .text:000000000000151e _TOR
             forth.s:439    .text:000000000000152e $d
             forth.s:440    .text:0000000000001532 _RPSTOR
             forth.s:442    .text:0000000000001536 $t
             forth.s:443    .text:0000000000001538 RPSTOR
             forth.s:451    .text:0000000000001540 $d
             forth.s:452    .text:0000000000001544 _SPSTOR
             forth.s:454    .text:0000000000001548 $t
             forth.s:455    .text:0000000000001548 SPSTOR
             forth.s:463    .text:0000000000001550 $d
             forth.s:464    .text:0000000000001554 _SPAT
             forth.s:466    .text:0000000000001558 $t
             forth.s:467    .text:0000000000001558 SPAT
             forth.s:475    .text:0000000000001560 $d
             forth.s:476    .text:0000000000001564 _DROP
             forth.s:486    .text:0000000000001572 $d
             forth.s:487    .text:0000000000001576 _DUPP
             forth.s:489    .text:000000000000157a $t
             forth.s:497    .text:0000000000001582 $d
             forth.s:498    .text:0000000000001586 _SWAP
             forth.s:510    .text:0000000000001594 $d
             forth.s:511    .text:0000000000001598 _OVER
             forth.s:522    .text:00000000000015a8 $d
             forth.s:523    .text:00000000000015ac _ZLESS
             forth.s:535    .text:00000000000015b6 $d
             forth.s:536    .text:00000000000015ba _ANDD
             forth.s:538    .text:00000000000015be $t
             forth.s:547    .text:00000000000015ca $d
             forth.s:548    .text:00000000000015ce _ORR
             forth.s:551    .text:00000000000015d4 ORR
             forth.s:559    .text:00000000000015de $d
             forth.s:560    .text:00000000000015e2 _XORR
             forth.s:562    .text:00000000000015e6 $t
             forth.s:571    .text:00000000000015f2 $d
             forth.s:572    .text:00000000000015f6 _UPLUS
ARM GAS  forth.s 			page 146


             forth.s:574    .text:00000000000015fa $t
             forth.s:575    .text:00000000000015fc UPLUS
             forth.s:586    .text:000000000000160c $d
             forth.s:587    .text:0000000000001610 _RSHIFT
             forth.s:598    .text:0000000000001622 $d
             forth.s:599    .text:0000000000001626 _LSHIFT
             forth.s:610    .text:000000000000163a $d
             forth.s:611    .text:000000000000163e _PLUS
             forth.s:613    .text:0000000000001640 $t
             forth.s:622    .text:0000000000001648 $d
             forth.s:623    .text:000000000000164c _SUBB
             forth.s:625    .text:000000000000164e $t
             forth.s:634    .text:000000000000165a $d
             forth.s:635    .text:000000000000165e _STAR
             forth.s:637    .text:0000000000001660 $t
             forth.s:646    .text:000000000000166a $d
             forth.s:647    .text:000000000000166e _UMSTA
             forth.s:649    .text:0000000000001672 $t
             forth.s:650    .text:0000000000001674 UMSTA
             forth.s:660    .text:0000000000001680 $d
             forth.s:661    .text:0000000000001684 _MSTAR
             forth.s:664    .text:0000000000001688 MSTAR
             forth.s:674    .text:0000000000001694 $d
             forth.s:675    .text:0000000000001698 _ONEP
             forth.s:685    .text:00000000000016a2 $d
             forth.s:686    .text:00000000000016a6 _ONEM
             forth.s:696    .text:00000000000016b2 $d
             forth.s:697    .text:00000000000016b6 _TWOP
             forth.s:700    .text:00000000000016bc TWOP
             forth.s:707    .text:00000000000016c2 $d
             forth.s:708    .text:00000000000016c6 _TWOM
             forth.s:711    .text:00000000000016cc TWOM
             forth.s:718    .text:00000000000016d2 $d
             forth.s:719    .text:00000000000016d6 _CELLP
             forth.s:721    .text:00000000000016dc $t
             forth.s:722    .text:00000000000016dc CELLP
             forth.s:729    .text:00000000000016e2 $d
             forth.s:730    .text:00000000000016e6 _CELLM
             forth.s:732    .text:00000000000016ec $t
             forth.s:733    .text:00000000000016ec CELLM
             forth.s:740    .text:00000000000016f2 $d
             forth.s:741    .text:00000000000016f6 _BLANK
             forth.s:744    .text:00000000000016fc BLANK
             forth.s:752    .text:0000000000001706 $d
             forth.s:753    .text:000000000000170a _CELLS
             forth.s:755    .text:0000000000001710 $t
             forth.s:756    .text:0000000000001710 CELLS
             forth.s:763    .text:0000000000001716 $d
             forth.s:764    .text:000000000000171a _CELLSL
             forth.s:766    .text:0000000000001720 $t
             forth.s:767    .text:0000000000001720 CELLSL
             forth.s:774    .text:0000000000001726 $d
             forth.s:775    .text:000000000000172a _TWOST
             forth.s:778    .text:0000000000001730 TWOST
             forth.s:785    .text:0000000000001736 $d
             forth.s:786    .text:000000000000173a _TWOSL
             forth.s:789    .text:0000000000001740 TWOSL
ARM GAS  forth.s 			page 147


             forth.s:796    .text:0000000000001746 $d
             forth.s:797    .text:000000000000174a _QDUP
             forth.s:809    .text:000000000000175a $d
             forth.s:810    .text:000000000000175e _ROT
             forth.s:812    .text:0000000000001762 $t
             forth.s:822    .text:000000000000176e $d
             forth.s:823    .text:0000000000001772 _NROT
             forth.s:826    .text:0000000000001778 NROT
             forth.s:836    .text:0000000000001782 $d
             forth.s:837    .text:0000000000001786 _DDROP
             forth.s:839    .text:000000000000178c $t
             forth.s:840    .text:000000000000178c DDROP
             forth.s:845    .text:0000000000001796 $d
             forth.s:846    .text:000000000000179a _TDROP
             forth.s:848    .text:00000000000017a0 $t
             forth.s:857    .text:00000000000017aa $d
             forth.s:858    .text:00000000000017ae _DDUP
             forth.s:870    .text:00000000000017c0 $d
             forth.s:871    .text:00000000000017c4 _DPLUS
             forth.s:874    .text:00000000000017c8 DPLUS
             forth.s:886    .text:00000000000017dc $d
             forth.s:887    .text:00000000000017e0 _INVER
             forth.s:889    .text:00000000000017e4 $t
             forth.s:890    .text:00000000000017e4 INVER
             forth.s:897    .text:00000000000017ea $d
             forth.s:898    .text:00000000000017ee _NEGAT
             forth.s:901    .text:00000000000017f8 NEGAT
             forth.s:908    .text:00000000000017fe $d
             forth.s:909    .text:0000000000001802 _ABSS
             forth.s:911    .text:0000000000001806 $t
             forth.s:921    .text:0000000000001812 $d
             forth.s:922    .text:0000000000001816 _ZEQUAL
             forth.s:925    .text:000000000000181c ZEQUAL
             forth.s:935    .text:000000000000182a $d
             forth.s:936    .text:000000000000182e _EQUAL
             forth.s:938    .text:0000000000001830 $t
             forth.s:939    .text:0000000000001830 EQUAL
             forth.s:950    .text:0000000000001840 $d
             forth.s:951    .text:0000000000001844 _ULESS
             forth.s:954    .text:0000000000001848 ULESS
             forth.s:965    .text:0000000000001858 $d
             forth.s:966    .text:000000000000185c _LESS
             forth.s:968    .text:000000000000185e $t
             forth.s:969    .text:0000000000001860 LESS
             forth.s:980    .text:0000000000001870 $d
             forth.s:981    .text:0000000000001874 _GREAT
             forth.s:983    .text:0000000000001876 $t
             forth.s:984    .text:0000000000001878 GREAT
             forth.s:995    .text:0000000000001888 $d
             forth.s:996    .text:000000000000188c _MAX
             forth.s:998    .text:0000000000001890 $t
             forth.s:999    .text:0000000000001890 MAX
             forth.s:1009   .text:000000000000189c $d
             forth.s:1010   .text:00000000000018a0 _MIN
             forth.s:1012   .text:00000000000018a4 $t
             forth.s:1013   .text:00000000000018a4 MIN
             forth.s:1023   .text:00000000000018b0 $d
ARM GAS  forth.s 			page 148


             forth.s:1024   .text:00000000000018b4 _PSTOR
             forth.s:1027   .text:00000000000018b8 PSTOR
             forth.s:1038   .text:00000000000018c8 $d
             forth.s:1039   .text:00000000000018cc _DSTOR
             forth.s:1042   .text:00000000000018d0 DSTOR
             forth.s:1053   .text:00000000000018e4 $d
             forth.s:1054   .text:00000000000018e8 _DAT
             forth.s:1057   .text:00000000000018ec DAT
             forth.s:1066   .text:00000000000018f6 $d
             forth.s:1067   .text:00000000000018fa _COUNT
             forth.s:1069   .text:0000000000001900 $t
             forth.s:1079   .text:000000000000190c $d
             forth.s:1080   .text:0000000000001910 _DNEGA
             forth.s:1082   .text:0000000000001918 $t
             forth.s:1083   .text:0000000000001918 DNEGA
             forth.s:1101   .text:0000000000001928 DOVAR
             forth.s:1114   .text:0000000000001934 DOCON
             forth.s:1126   .text:000000000000193e $d
             forth.s:1127   .text:0000000000001942 _SEED
             forth.s:1137   .text:0000000000001952 $d
             forth.s:1138   .text:0000000000001956 _MSEC
             forth.s:1141   .text:000000000000195c MSEC
             forth.s:1148   .text:0000000000001966 $d
             forth.s:1149   .text:000000000000196a _TIMER
             forth.s:1151   .text:0000000000001970 $t
             forth.s:1160   .text:000000000000197a $d
             forth.s:1161   .text:000000000000197e _TBOOT
             forth.s:1163   .text:0000000000001984 $t
             forth.s:1164   .text:0000000000001984 TBOOT
             forth.s:1172   .text:000000000000198e $d
             forth.s:1173   .text:0000000000001992 _BASE
             forth.s:1176   .text:0000000000001998 BASE
             forth.s:1188   .text:00000000000019a2 TEMP
             forth.s:1196   .text:00000000000019ac $d
             forth.s:1197   .text:00000000000019b0 _SPAN
             forth.s:1200   .text:00000000000019b8 SPAN
             forth.s:1208   .text:00000000000019c2 $d
             forth.s:1209   .text:00000000000019c6 _INN
             forth.s:1211   .text:00000000000019ca $t
             forth.s:1212   .text:00000000000019cc INN
             forth.s:1220   .text:00000000000019d6 $d
             forth.s:1221   .text:00000000000019da _NTIB
             forth.s:1224   .text:00000000000019e0 NTIB
             forth.s:1232   .text:00000000000019ea $d
             forth.s:1233   .text:00000000000019ee _TEVAL
             forth.s:1235   .text:00000000000019f4 $t
             forth.s:1236   .text:00000000000019f4 TEVAL
             forth.s:1244   .text:00000000000019fe $d
             forth.s:1245   .text:0000000000001a02 _HLD
             forth.s:1247   .text:0000000000001a06 $t
             forth.s:1248   .text:0000000000001a08 HLD
             forth.s:1256   .text:0000000000001a12 $d
             forth.s:1257   .text:0000000000001a16 _CNTXT
             forth.s:1259   .text:0000000000001a1e $t
             forth.s:1260   .text:0000000000001a20 CNTXT
             forth.s:1261   .text:0000000000001a20 CRRNT
             forth.s:1269   .text:0000000000001a2a $d
ARM GAS  forth.s 			page 149


             forth.s:1270   .text:0000000000001a2e _CP
             forth.s:1273   .text:0000000000001a34 CPP
             forth.s:1280   .text:0000000000001a3e $d
             forth.s:1281   .text:0000000000001a42 _FCP
             forth.s:1283   .text:0000000000001a46 $t
             forth.s:1284   .text:0000000000001a48 FCP
             forth.s:1292   .text:0000000000001a52 $d
             forth.s:1293   .text:0000000000001a56 _LAST
             forth.s:1296   .text:0000000000001a5c LAST
             forth.s:1308   .text:0000000000001a66 $d
             forth.s:1309   .text:0000000000001a6a _USER_BGN
             forth.s:1312   .text:0000000000001a78 USER_BEGIN
             forth.s:1316   .text:0000000000001a84 USR_BGN_ADR
             forth.s:1317   .text:0000000000001a84 $d
             forth.s:1322   .text:0000000000001a8c _USER_END
             forth.s:1325   .text:0000000000001a98 USER_END
             forth.s:1329   .text:0000000000001aa4 USER_END_ADR
             forth.s:1330   .text:0000000000001aa4 $d
             forth.s:1341   .text:0000000000001aac _WITHI
             forth.s:1344   .text:0000000000001ab4 WITHI
             forth.s:1346   .text:0000000000001ab8 $d
             forth.s:1360   .text:0000000000001ad8 _UMMOD
             forth.s:1363   .text:0000000000001ae0 UMMOD
             forth.s:1367   .text:0000000000001aea UMMOD0
             forth.s:1374   .text:0000000000001afa UMMOD1
             forth.s:1380   .text:0000000000001b04 UMMOD2
             forth.s:1390   .text:0000000000001b10 $d
             forth.s:1391   .text:0000000000001b14 _MSMOD
             forth.s:1393   .text:0000000000001b1a $t
             forth.s:1394   .text:0000000000001b1c MSMOD
             forth.s:1396   .text:0000000000001b20 $d
             forth.s:1405   .text:0000000000001b48 MMOD1
             forth.s:1412   .text:0000000000001b64 MMOD2
             forth.s:1420   .text:0000000000001b84 MMOD3
             forth.s:1427   .text:0000000000001b8c _SLMOD
             forth.s:1430   .text:0000000000001b94 SLMOD
             forth.s:1432   .text:0000000000001b98 $d
             forth.s:1442   .text:0000000000001bb0 _MODD
             forth.s:1444   .text:0000000000001bb4 $t
             forth.s:1447   .text:0000000000001bb8 $d
             forth.s:1455   .text:0000000000001bc8 _SLASH
             forth.s:1457   .text:0000000000001bca $t
             forth.s:1458   .text:0000000000001bcc SLASH
             forth.s:1460   .text:0000000000001bd0 $d
             forth.s:1469   .text:0000000000001be4 _SSMOD
             forth.s:1471   .text:0000000000001bea $t
             forth.s:1472   .text:0000000000001bec SSMOD
             forth.s:1474   .text:0000000000001bf0 $d
             forth.s:1484   .text:0000000000001c08 _STASL
             forth.s:1487   .text:0000000000001c0c STASL
             forth.s:1489   .text:0000000000001c10 $d
             forth.s:1501   .text:0000000000001c24 _ALGND
             forth.s:1503   .text:0000000000001c2c $t
             forth.s:1504   .text:0000000000001c2c ALGND
             forth.s:1513   .text:0000000000001c3c $d
             forth.s:1514   .text:0000000000001c40 _TCHAR
             forth.s:1516   .text:0000000000001c46 $t
ARM GAS  forth.s 			page 150


             forth.s:1517   .text:0000000000001c48 TCHAR
             forth.s:1519   .text:0000000000001c4c $d
             forth.s:1529   .text:0000000000001c84 TCHA1
             forth.s:1536   .text:0000000000001c8c _DEPTH
             forth.s:1538   .text:0000000000001c92 $t
             forth.s:1539   .text:0000000000001c94 DEPTH
             forth.s:1549   .text:0000000000001cac $d
             forth.s:1550   .text:0000000000001cb0 _PICK
             forth.s:1553   .text:0000000000001cb8 PICK
             forth.s:1555   .text:0000000000001cbc $d
             forth.s:1569   .text:0000000000001cd8 _HERE
             forth.s:1572   .text:0000000000001ce0 HERE
             forth.s:1574   .text:0000000000001ce4 $d
             forth.s:1582   .text:0000000000001cf4 _PAD
             forth.s:1584   .text:0000000000001cf8 $t
             forth.s:1587   .text:0000000000001cfc $d
             forth.s:1596   .text:0000000000001d14 _TIB
             forth.s:1598   .text:0000000000001d18 $t
             forth.s:1599   .text:0000000000001d18 TIB
             forth.s:1607   .text:0000000000001d22 $d
             forth.s:1608   .text:0000000000001d26 _ATEXE
             forth.s:1611   .text:0000000000001d30 ATEXE
             forth.s:1623   .text:0000000000001d44 $d
             forth.s:1624   .text:0000000000001d48 _CMOVE
             forth.s:1626   .text:0000000000001d4e $t
             forth.s:1627   .text:0000000000001d50 CMOVE
             forth.s:1634   .text:0000000000001d62 CMOV1
             forth.s:1631   .text:0000000000001d5a CMOV0
             forth.s:1639   .text:0000000000001d6c CMOV2
             forth.s:1646   .text:0000000000001d74 $d
             forth.s:1647   .text:0000000000001d78 _MOVE
             forth.s:1658   .text:0000000000001d96 MOVE1
             forth.s:1655   .text:0000000000001d8e MOVE0
             forth.s:1663   .text:0000000000001da0 MOVE2
             forth.s:1670   .text:0000000000001da8 $d
             forth.s:1671   .text:0000000000001dac _FILL
             forth.s:1682   .text:0000000000001dc2 FILL2
             forth.s:1678   .text:0000000000001dba FILL1
             forth.s:1689   .text:0000000000001dca $d
             forth.s:1690   .text:0000000000001dce _PACKS
             forth.s:1693   .text:0000000000001dd8 PACKS
             forth.s:1695   .text:0000000000001ddc $d
             forth.s:1722   .text:0000000000001e34 _DIGIT
             forth.s:1724   .text:0000000000001e3a $t
             forth.s:1725   .text:0000000000001e3c DIGIT
             forth.s:1727   .text:0000000000001e40 $d
             forth.s:1741   .text:0000000000001e74 _EXTRC
             forth.s:1743   .text:0000000000001e7c $t
             forth.s:1744   .text:0000000000001e7c EXTRC
             forth.s:1746   .text:0000000000001e80 $d
             forth.s:1757   .text:0000000000001ea0 _BDIGS
             forth.s:1760   .text:0000000000001ea4 BDIGS
             forth.s:1762   .text:0000000000001ea8 $d
             forth.s:1771   .text:0000000000001ebc _HOLD
             forth.s:1776   .text:0000000000001ec8 $d
             forth.s:1789   .text:0000000000001eec _DIG
             forth.s:1791   .text:0000000000001eee $t
ARM GAS  forth.s 			page 151


             forth.s:1792   .text:0000000000001ef0 DIG
             forth.s:1794   .text:0000000000001ef4 $d
             forth.s:1804   .text:0000000000001f0c _DIGS
             forth.s:1807   .text:0000000000001f10 DIGS
             forth.s:1809   .text:0000000000001f14 DIGS1
             forth.s:1810   .text:0000000000001f14 $d
             forth.s:1814   .text:0000000000001f2c DIGS2
             forth.s:1821   .text:0000000000001f34 _SIGN
             forth.s:1824   .text:0000000000001f3c SIGN
             forth.s:1826   .text:0000000000001f40 $d
             forth.s:1830   .text:0000000000001f58 SIGN1
             forth.s:1837   .text:0000000000001f60 _EDIGS
             forth.s:1840   .text:0000000000001f64 EDIGS
             forth.s:1842   .text:0000000000001f68 $d
             forth.s:1857   .text:0000000000001f84 STRR
             forth.s:1858   .text:0000000000001f84 $t
             forth.s:1859   .text:0000000000001f88 $d
             forth.s:1873   .text:0000000000001fb0 _HEX
             forth.s:1875   .text:0000000000001fb4 $t
             forth.s:1876   .text:0000000000001fb4 HEX
             forth.s:1878   .text:0000000000001fb8 $d
             forth.s:1887   .text:0000000000001fd0 _DECIM
             forth.s:1889   .text:0000000000001fd8 $t
             forth.s:1890   .text:0000000000001fd8 DECIM
             forth.s:1892   .text:0000000000001fdc $d
             forth.s:1904   .text:0000000000001ff4 _DIGTQ
             forth.s:1907   .text:0000000000001ffc DIGTQ
             forth.s:1909   .text:0000000000002000 $d
             forth.s:1922   .text:0000000000002048 DGTQ1
             forth.s:1932   .text:000000000000205c _NUMBQ
             forth.s:1934   .text:0000000000002064 $t
             forth.s:1935   .text:0000000000002064 NUMBQ
             forth.s:1937   .text:0000000000002068 $d
             forth.s:1953   .text:00000000000020b4 NUMQ1
             forth.s:2001   .text:000000000000217c NUMQ6
             forth.s:1969   .text:00000000000020f8 NUMQ2
             forth.s:1993   .text:0000000000002160 NUMQ4
             forth.s:1990   .text:0000000000002154 NUMQ3
             forth.s:1999   .text:0000000000002178 NUMQ5
             forth.s:2016   .text:0000000000002198 _KEY
             forth.s:2018   .text:000000000000219c $t
             forth.s:2019   .text:000000000000219c KEY
             forth.s:2021   .text:00000000000021a0 KEY1
             forth.s:2022   .text:00000000000021a0 $d
             forth.s:2030   .text:00000000000021b4 _SPACE
             forth.s:2032   .text:00000000000021ba $t
             forth.s:2033   .text:00000000000021bc SPACE
             forth.s:2035   .text:00000000000021c0 $d
             forth.s:2043   .text:00000000000021d0 _SPACS
             forth.s:2046   .text:00000000000021d8 SPACS
             forth.s:2048   .text:00000000000021dc $d
             forth.s:2054   .text:00000000000021f8 CHAR2
             forth.s:2052   .text:00000000000021f4 CHAR1
             forth.s:2062   .text:0000000000002208 _TYPEE
             forth.s:2065   .text:0000000000002210 TYPEE
             forth.s:2067   .text:0000000000002214 $d
             forth.s:2073   .text:000000000000222c TYPE2
ARM GAS  forth.s 			page 152


             forth.s:2069   .text:0000000000002220 TYPE1
             forth.s:2082   .text:0000000000002240 _CR
             forth.s:2085   .text:0000000000002244 CR
             forth.s:2087   .text:0000000000002248 $d
             forth.s:2101   .text:0000000000002264 DOSTR
             forth.s:2102   .text:0000000000002264 $t
             forth.s:2104   .text:0000000000002268 $d
             forth.s:2123   .text:0000000000002290 STRQP
             forth.s:2124   .text:0000000000002290 $t
             forth.s:2125   .text:0000000000002294 $d
             forth.s:2135   .text:000000000000229c DOTST
             forth.s:2136   .text:000000000000229c $t
             forth.s:2137   .text:00000000000022a0 $d
             forth.s:2148   .text:00000000000022ac DOTQP
             forth.s:2149   .text:00000000000022ac $t
             forth.s:2150   .text:00000000000022b0 $d
             forth.s:2158   .text:00000000000022c0 _DOTR
             forth.s:2161   .text:00000000000022c4 DOTR
             forth.s:2163   .text:00000000000022c8 $d
             forth.s:2176   .text:00000000000022ec _UDOTR
             forth.s:2178   .text:00000000000022f0 $t
             forth.s:2179   .text:00000000000022f0 UDOTR
             forth.s:2181   .text:00000000000022f4 $d
             forth.s:2196   .text:0000000000002320 _UDOT
             forth.s:2199   .text:0000000000002324 UDOT
             forth.s:2201   .text:0000000000002328 $d
             forth.s:2212   .text:0000000000002344 _DOT
             forth.s:2214   .text:0000000000002346 $t
             forth.s:2215   .text:0000000000002348 DOT
             forth.s:2217   .text:000000000000234c $d
             forth.s:2224   .text:0000000000002370 DOT1
             forth.s:2234   .text:0000000000002384 _QUEST
             forth.s:2236   .text:0000000000002386 $t
             forth.s:2237   .text:0000000000002388 QUEST
             forth.s:2239   .text:000000000000238c $d
             forth.s:2253   .text:0000000000002398 PARS
             forth.s:2254   .text:0000000000002398 $t
             forth.s:2255   .text:000000000000239c $d
             forth.s:2321   .text:00000000000024ac PARS8
             forth.s:2285   .text:0000000000002420 PARS3
             forth.s:2268   .text:00000000000023d8 PARS1
             forth.s:2283   .text:000000000000241c PARS2
             forth.s:2289   .text:000000000000242c PARS4
             forth.s:2301   .text:000000000000245c PARS5
             forth.s:2308   .text:0000000000002480 PARS6
             forth.s:2314   .text:0000000000002494 PARS7
             forth.s:2331   .text:00000000000024c0 _PARSE
             forth.s:2333   .text:00000000000024c6 $t
             forth.s:2334   .text:00000000000024c8 PARSE
             forth.s:2336   .text:00000000000024cc $d
             forth.s:2356   .text:000000000000250c _DOTPR
             forth.s:2359   .text:0000000000002510 DOTPR
             forth.s:2361   .text:0000000000002514 $d
             forth.s:2370   .text:000000000000252c _PAREN
             forth.s:2372   .text:000000000000252e $t
             forth.s:2373   .text:0000000000002530 PAREN
             forth.s:2375   .text:0000000000002534 $d
ARM GAS  forth.s 			page 153


             forth.s:2384   .text:000000000000254c _BKSLA
             forth.s:2386   .text:000000000000254e $t
             forth.s:2387   .text:0000000000002550 BKSLA
             forth.s:2389   .text:0000000000002554 $d
             forth.s:2399   .text:000000000000256c _CHAR
             forth.s:2402   .text:0000000000002574 CHAR
             forth.s:2404   .text:0000000000002578 $d
             forth.s:2414   .text:0000000000002590 _WORDD
             forth.s:2417   .text:0000000000002598 WORDD
             forth.s:2419   .text:000000000000259c $d
             forth.s:2429   .text:00000000000025b4 _TOKEN
             forth.s:2431   .text:00000000000025ba $t
             forth.s:2432   .text:00000000000025bc TOKEN
             forth.s:2434   .text:00000000000025c0 $d
             forth.s:2445   .text:00000000000025d0 _NAMET
             forth.s:2447   .text:00000000000025d6 $t
             forth.s:2448   .text:00000000000025d8 NAMET
             forth.s:2450   .text:00000000000025dc $d
             forth.s:2466   .text:00000000000025fc _SAMEQ
             forth.s:2468   .text:0000000000002602 $t
             forth.s:2469   .text:0000000000002604 SAMEQ
             forth.s:2471   .text:0000000000002608 $d
             forth.s:2488   .text:0000000000002650 SAME2
             forth.s:2473   .text:0000000000002614 SAME1
             forth.s:2503   .text:0000000000002664 FIND
             forth.s:2504   .text:0000000000002664 $t
             forth.s:2505   .text:0000000000002668 $d
             forth.s:2512   .text:0000000000002684 FIND1
             forth.s:2532   .text:00000000000026dc FIND6
             forth.s:2525   .text:00000000000026c4 FIND2
             forth.s:2530   .text:00000000000026d4 FIND3
             forth.s:2539   .text:00000000000026f4 FIND4
             forth.s:2545   .text:0000000000002710 FIND5
             forth.s:2560   .text:0000000000002738 _NAMEQ
             forth.s:2562   .text:000000000000273e $t
             forth.s:2563   .text:0000000000002740 NAMEQ
             forth.s:2565   .text:0000000000002744 $d
             forth.s:2580   .text:0000000000002754 BKSP
             forth.s:2581   .text:0000000000002754 $t
             forth.s:2582   .text:0000000000002758 $d
             forth.s:2596   .text:000000000000279c BACK1
             forth.s:2606   .text:00000000000027a0 TAP
             forth.s:2607   .text:00000000000027a0 $t
             forth.s:2608   .text:00000000000027a4 $d
             forth.s:2622   .text:00000000000027bc KTAP
             forth.s:2623   .text:00000000000027bc TTAP
             forth.s:2624   .text:00000000000027bc $t
             forth.s:2625   .text:00000000000027c0 $d
             forth.s:2639   .text:0000000000002800 KTAP2
             forth.s:2636   .text:00000000000027f8 KTAP1
             forth.s:2650   .text:0000000000002818 _ACCEP
             forth.s:2655   .text:0000000000002824 $d
             forth.s:2658   .text:0000000000002830 ACCP1
             forth.s:2674   .text:0000000000002878 ACCP4
             forth.s:2670   .text:000000000000286c ACCP2
             forth.s:2672   .text:0000000000002870 ACCP3
             forth.s:2684   .text:000000000000288c _QUERY
ARM GAS  forth.s 			page 154


             forth.s:2686   .text:0000000000002892 $t
             forth.s:2687   .text:0000000000002894 QUERY
             forth.s:2689   .text:0000000000002898 $d
             forth.s:2707   .text:00000000000028cc _ABORT
             forth.s:2709   .text:00000000000028d2 $t
             forth.s:2710   .text:00000000000028d4 ABORT
             forth.s:2712   .text:00000000000028d8 ABORT1
             forth.s:2713   .text:00000000000028d8 $d
             forth.s:2844   .text:0000000000002a5c PRESE
             forth.s:2857   .text:0000000000002a7c QUIT
             forth.s:2729   .text:0000000000002900 ABORQ
             forth.s:2730   .text:0000000000002900 $t
             forth.s:2731   .text:0000000000002904 $d
             forth.s:2746   .text:0000000000002928 _INTER
             forth.s:2748   .text:0000000000002934 $t
             forth.s:2751   .text:0000000000002938 $d
             forth.s:2760   .text:0000000000002974 INTE1
             forth.s:2757   .text:000000000000296a $t
             forth.s:2758   .text:000000000000296c $d
             forth.s:2764   .text:0000000000002984 INTE2
             forth.s:2771   .text:000000000000298c _LBRAC
             forth.s:2773   .text:000000000000298e $t
             forth.s:2774   .text:0000000000002990 LBRAC
             forth.s:2776   .text:0000000000002994 $d
             forth.s:2785   .text:00000000000029ac _DOTOK
             forth.s:2787   .text:00000000000029b0 $t
             forth.s:2788   .text:00000000000029b0 DOTOK
             forth.s:2790   .text:00000000000029b4 $d
             forth.s:2796   .text:00000000000029d8 DOTO1
             forth.s:2797   .text:00000000000029d8 $d
             forth.s:2804   .text:00000000000029e4 _QSTAC
             forth.s:2807   .text:00000000000029ec QSTAC
             forth.s:2809   .text:00000000000029f0 $d
             forth.s:2811   .text:0000000000002a06 $t
             forth.s:2812   .text:0000000000002a08 $d
             forth.s:2818   .text:0000000000002a10 _EVAL
             forth.s:2823   .text:0000000000002a1c EVAL1
             forth.s:2824   .text:0000000000002a1c $d
             forth.s:2832   .text:0000000000002a44 EVAL2
             forth.s:2841   .text:0000000000002a54 _PRESE
             forth.s:2846   .text:0000000000002a60 $d
             forth.s:2854   .text:0000000000002a74 _QUIT
             forth.s:2858   .text:0000000000002a7c $d
             forth.s:2860   .text:0000000000002a88 QUIT1
             forth.s:2862   .text:0000000000002a8c QUIT2
             forth.s:2868   .text:0000000000002aa0 _FORGET
             forth.s:2871   .text:0000000000002aa8 FORGET
             forth.s:2873   .text:0000000000002aac $d
             forth.s:3322   .text:0000000000002f54 OVERT
             forth.s:2898   .text:0000000000002af4 $d
             forth.s:2899   .text:0000000000002af8 _TICK
             forth.s:2901   .text:0000000000002afa $t
             forth.s:2902   .text:0000000000002afc TICK
             forth.s:2904   .text:0000000000002b00 $d
             forth.s:2908   .text:0000000000002b14 TICK1
             forth.s:2915   .text:0000000000002b1c _ALLOT
             forth.s:2917   .text:0000000000002b22 $t
ARM GAS  forth.s 			page 155


             forth.s:2918   .text:0000000000002b24 ALLOT
             forth.s:2920   .text:0000000000002b28 $d
             forth.s:2928   .text:0000000000002b38 _COMMA
             forth.s:2929   .text:0000000000002b3a $t
             forth.s:2930   .text:0000000000002b3c COMMA
             forth.s:2932   .text:0000000000002b40 $d
             forth.s:2943   .text:0000000000002b5c $d
             forth.s:2944   .text:0000000000002b60 _BCOMP
             forth.s:2946   .text:0000000000002b6a $t
             forth.s:2947   .text:0000000000002b6c BCOMP
             forth.s:2949   .text:0000000000002b70 $d
             forth.s:2957   .text:0000000000002b80 _COMPI
             forth.s:2959   .text:0000000000002b88 $t
             forth.s:2960   .text:0000000000002b88 COMPI
             forth.s:2962   .text:0000000000002b8c $d
             forth.s:2976   .text:0000000000002bb8 _LITER
             forth.s:2978   .text:0000000000002bc0 $t
             forth.s:2979   .text:0000000000002bc0 LITER
             forth.s:2981   .text:0000000000002bc4 $d
             forth.s:3366   .text:0000000000002fb0 CALLC
             forth.s:2992   .text:0000000000002bd8 STRCQ
             forth.s:2993   .text:0000000000002bd8 $t
             forth.s:2994   .text:0000000000002bdc $d
             forth.s:3013   .text:0000000000002c14 _FOR
             forth.s:3015   .text:0000000000002c18 $t
             forth.s:3016   .text:0000000000002c18 FOR
             forth.s:3018   .text:0000000000002c1c $d
             forth.s:3026   .text:0000000000002c34 _BEGIN
             forth.s:3028   .text:0000000000002c3a $t
             forth.s:3029   .text:0000000000002c3c BEGIN
             forth.s:3031   .text:0000000000002c40 $d
             forth.s:3037   .text:0000000000002c48 $d
             forth.s:3038   .text:0000000000002c4c _FNEXT
             forth.s:3041   .text:0000000000002c54 FNEXT
             forth.s:3043   .text:0000000000002c58 $d
             forth.s:3051   .text:0000000000002c70 _UNTIL
             forth.s:3053   .text:0000000000002c76 $t
             forth.s:3054   .text:0000000000002c78 UNTIL
             forth.s:3056   .text:0000000000002c7c $d
             forth.s:3064   .text:0000000000002c94 _AGAIN
             forth.s:3066   .text:0000000000002c9a $t
             forth.s:3067   .text:0000000000002c9c AGAIN
             forth.s:3069   .text:0000000000002ca0 $d
             forth.s:3077   .text:0000000000002cb8 _IFF
             forth.s:3080   .text:0000000000002cbc IFF
             forth.s:3082   .text:0000000000002cc0 $d
             forth.s:3093   .text:0000000000002ce8 _AHEAD
             forth.s:3095   .text:0000000000002cee $t
             forth.s:3096   .text:0000000000002cf0 AHEAD
             forth.s:3098   .text:0000000000002cf4 $d
             forth.s:3109   .text:0000000000002d1c _REPEA
             forth.s:3112   .text:0000000000002d24 REPEA
             forth.s:3114   .text:0000000000002d28 $d
             forth.s:3124   .text:0000000000002d40 _THENN
             forth.s:3127   .text:0000000000002d48 THENN
             forth.s:3129   .text:0000000000002d4c $d
             forth.s:3138   .text:0000000000002d60 _AFT
ARM GAS  forth.s 			page 156


             forth.s:3140   .text:0000000000002d64 $t
             forth.s:3141   .text:0000000000002d64 AFT
             forth.s:3143   .text:0000000000002d68 $d
             forth.s:3153   .text:0000000000002d80 _ELSEE
             forth.s:3156   .text:0000000000002d88 ELSEE
             forth.s:3158   .text:0000000000002d8c $d
             forth.s:3167   .text:0000000000002da0 _WHILE
             forth.s:3169   .text:0000000000002da6 $t
             forth.s:3170   .text:0000000000002da8 WHILE
             forth.s:3172   .text:0000000000002dac $d
             forth.s:3180   .text:0000000000002dbc _ABRTQ
             forth.s:3183   .text:0000000000002dc4 ABRTQ
             forth.s:3185   .text:0000000000002dc8 $d
             forth.s:3193   .text:0000000000002de0 _STRQ
             forth.s:3196   .text:0000000000002de4 STRQ
             forth.s:3198   .text:0000000000002de8 $d
             forth.s:3206   .text:0000000000002e00 _DOTQ
             forth.s:3209   .text:0000000000002e04 DOTQ
             forth.s:3211   .text:0000000000002e08 $d
             forth.s:3222   .text:0000000000002e20 _UNIQU
             forth.s:3224   .text:0000000000002e28 $t
             forth.s:3225   .text:0000000000002e28 UNIQU
             forth.s:3227   .text:0000000000002e2c $d
             forth.s:3234   .text:0000000000002e54 UNIQ1
             forth.s:3231   .text:0000000000002e48 $d
             forth.s:3245   .text:0000000000002e5c SNAME
             forth.s:3246   .text:0000000000002e5c $t
             forth.s:3247   .text:0000000000002e60 $d
             forth.s:3263   .text:0000000000002ea4 SNAM1
             forth.s:3273   .text:0000000000002eb8 _SCOMP
             forth.s:3276   .text:0000000000002ec4 SCOMP
             forth.s:3278   .text:0000000000002ec8 $d
             forth.s:3290   .text:0000000000002f00 SCOM2
             forth.s:3287   .text:0000000000002ef8 SCOM1
             forth.s:3295   .text:0000000000002f14 SCOM3
             forth.s:3302   .text:0000000000002f1c COLON_ABORT
             forth.s:3303   .text:0000000000002f1c $t
             forth.s:3304   .text:0000000000002f20 $d
             forth.s:3319   .text:0000000000002f4c _OVERT
             forth.s:3321   .text:0000000000002f52 $t
             forth.s:3324   .text:0000000000002f58 $d
             forth.s:3334   .text:0000000000002f70 _SEMIS
             forth.s:3336   .text:0000000000002f72 $t
             forth.s:3337   .text:0000000000002f74 SEMIS
             forth.s:3339   .text:0000000000002f78 $d
             forth.s:3349   .text:0000000000002f94 _RBRAC
             forth.s:3351   .text:0000000000002f96 $t
             forth.s:3352   .text:0000000000002f98 RBRAC
             forth.s:3354   .text:0000000000002f9c $d
             forth.s:3367   .text:0000000000002fb0 $t
             forth.s:3368   .text:0000000000002fb4 $d
             forth.s:3378   .text:0000000000002fcc _COLON
             forth.s:3380   .text:0000000000002fce $t
             forth.s:3381   .text:0000000000002fd0 COLON
             forth.s:3383   .text:0000000000002fd4 $d
             forth.s:3393   .text:0000000000002fec _IMMED
             forth.s:3395   .text:0000000000002ff6 $t
ARM GAS  forth.s 			page 157


             forth.s:3396   .text:0000000000002ff8 IMMED
             forth.s:3398   .text:0000000000002ffc $d
             forth.s:3415   .text:0000000000003028 _CONST
             forth.s:3418   .text:0000000000003034 CONST
             forth.s:3420   .text:0000000000003038 $d
             forth.s:3431   .text:0000000000003068 $t
             forth.s:3435   .text:0000000000003068 DODOES
             forth.s:3437   .text:000000000000306c $d
             forth.s:3450   .text:0000000000003090 $d
             forth.s:3451   .text:0000000000003094 _DOES
             forth.s:3453   .text:000000000000309a $t
             forth.s:3454   .text:000000000000309c DOES
             forth.s:3456   .text:00000000000030a0 $d
             forth.s:3470   .text:00000000000030d0 _DEFERAT
             forth.s:3473   .text:00000000000030d8 DEFERAT
             forth.s:3475   .text:00000000000030dc $d
             forth.s:3484   .text:00000000000030f4 _DEFERSTO
             forth.s:3487   .text:00000000000030fc DEFERSTO
             forth.s:3489   .text:0000000000003100 $d
             forth.s:3499   .text:000000000000311c _DEFER
             forth.s:3501   .text:0000000000003122 $t
             forth.s:3502   .text:0000000000003124 DEFER
             forth.s:3504   .text:0000000000003128 $d
             forth.s:3527   .text:0000000000003174 CREAT
             forth.s:3515   .text:000000000000315c DEFER_NOP
             forth.s:3516   .text:000000000000315c $t
             forth.s:3517   .text:0000000000003160 $d
             forth.s:3524   .text:000000000000316c _CREAT
             forth.s:3529   .text:0000000000003178 $d
             forth.s:3541   .text:000000000000319c _VARIA
             forth.s:3544   .text:00000000000031a8 VARIA
             forth.s:3546   .text:00000000000031ac $d
             forth.s:3563   .text:00000000000031cc DMP
             forth.s:3564   .text:00000000000031cc $t
             forth.s:3565   .text:00000000000031d0 $d
             forth.s:3577   .text:0000000000003208 PDUM2
             forth.s:3571   .text:00000000000031f0 PDUM1
             forth.s:3585   .text:0000000000003214 $d
             forth.s:3586   .text:0000000000003218 _DUMP
             forth.s:3589   .text:0000000000003220 DUMP
             forth.s:3591   .text:0000000000003224 $d
             forth.s:3609   .text:0000000000003274 DUMP4
             forth.s:3599   .text:000000000000324c DUMP1
             forth.s:3611   .text:000000000000327c DUMP3
             forth.s:3622   .text:0000000000003294 _DOTS
             forth.s:3626   .text:0000000000003298 DOTS
             forth.s:3628   .text:000000000000329c $d
             forth.s:3636   .text:00000000000032bc DOTS2
             forth.s:3632   .text:00000000000032b0 DOTS1
             forth.s:3645   .text:00000000000032d0 _TNAME
             forth.s:3647   .text:00000000000032d6 $t
             forth.s:3648   .text:00000000000032d8 TNAME
             forth.s:3650   .text:00000000000032dc $d
             forth.s:3653   .text:00000000000032e8 TNAM1
             forth.s:3664   .text:000000000000331c TNAM2
             forth.s:3673   .text:000000000000332c _DOTID
             forth.s:3675   .text:0000000000003330 $t
ARM GAS  forth.s 			page 158


             forth.s:3676   .text:0000000000003330 DOTID
             forth.s:3678   .text:0000000000003334 $d
             forth.s:3685   .text:0000000000003358 DOTI1
             forth.s:3686   .text:0000000000003366 $t
             forth.s:3687   .text:0000000000003368 $d
             forth.s:3689   *ABS*:0000000000000000 WANT_SEE
             forth.s:3769   .text:0000000000003370 _WORDS
             forth.s:3771   .text:0000000000003376 $t
             forth.s:3772   .text:0000000000003378 WORDS
             forth.s:3774   .text:000000000000337c $d
             forth.s:3777   .text:0000000000003388 WORS1
             forth.s:3786   .text:00000000000033b0 WORS2
             forth.s:3799   .text:00000000000033b4 VERSN
             forth.s:3800   .text:00000000000033b4 $t
             forth.s:3801   .text:00000000000033b8 $d
             forth.s:3808   .text:00000000000033c8 _HI
             forth.s:3814   .text:00000000000033d0 $d
             forth.s:3815   .text:00000000000033ea $t
             forth.s:3816   .text:00000000000033ec $d
             forth.s:3845   .text:0000000000003450 COLD1
             forth.s:3846   .text:0000000000003450 $d
             forth.s:3857   .text:0000000000003490 COLD2
             forth.s:3860   .text:0000000000003490 $d
             forth.s:3863   .text:0000000000003494 $d
             tvout.s:247    .text:0000000000000701 $d
             tvout.s:247    .text:0000000000000702 $t
             tvout.s:261    .text:0000000000000737 $d
             tvout.s:261    .text:0000000000000738 $t
             tvout.s:289    .text:0000000000000791 $d
             tvout.s:289    .text:0000000000000792 $t
             tvout.s:308    .text:00000000000007bf $d
             tvout.s:308    .text:00000000000007c0 $t
             tvout.s:408    .text:00000000000008f5 $d
             tvout.s:408    .text:00000000000008f6 $t
             tvout.s:550    .text:0000000000000acb $d
             tvout.s:550    .text:0000000000000acc $t
           ps2_kbd.s:307    .text:0000000000000ed3 $d
           ps2_kbd.s:307    .text:0000000000000ed4 $t
           ps2_kbd.s:571    .text:00000000000011df $d
           ps2_kbd.s:571    .text:00000000000011e0 $t
           ps2_kbd.s:588    .text:000000000000121f $d
           ps2_kbd.s:588    .text:0000000000001220 $t
             forth.s:124    .text:00000000000012a9 $d
             forth.s:124    .text:00000000000012aa $t
             forth.s:145    .text:0000000000001313 $d
             forth.s:145    .text:0000000000001314 $t
             forth.s:196    .text:00000000000013c1 $d
             forth.s:196    .text:00000000000013c2 $t
             forth.s:216    .text:00000000000013ed $d
             forth.s:216    .text:00000000000013ee $t
             forth.s:240    .text:0000000000001423 $d
             forth.s:240    .text:0000000000001424 $t
             forth.s:349    .text:00000000000014ad $d
             forth.s:349    .text:00000000000014ae $t
             forth.s:383    .text:00000000000014db $d
             forth.s:383    .text:00000000000014dc $t
             forth.s:396    .text:00000000000014ef $d
ARM GAS  forth.s 			page 159


             forth.s:396    .text:00000000000014f0 $t
             forth.s:407    .text:00000000000014fb $d
             forth.s:407    .text:00000000000014fc $t
             forth.s:419    .text:000000000000150d $d
             forth.s:419    .text:000000000000150e $t
             forth.s:431    .text:0000000000001521 $d
             forth.s:431    .text:0000000000001522 $t
             forth.s:478    .text:0000000000001569 $d
             forth.s:478    .text:000000000000156a $t
             forth.s:500    .text:000000000000158b $d
             forth.s:500    .text:000000000000158c $t
             forth.s:513    .text:000000000000159d $d
             forth.s:513    .text:000000000000159e $t
             forth.s:525    .text:00000000000015af $d
             forth.s:525    .text:00000000000015b0 $t
             forth.s:550    .text:00000000000015d1 $d
             forth.s:550    .text:00000000000015d2 $t
             forth.s:589    .text:0000000000001617 $d
             forth.s:589    .text:0000000000001618 $t
             forth.s:601    .text:000000000000162d $d
             forth.s:601    .text:000000000000162e $t
             forth.s:663    .text:0000000000001687 $d
             forth.s:663    .text:0000000000001688 $t
             forth.s:677    .text:000000000000169b $d
             forth.s:677    .text:000000000000169c $t
             forth.s:688    .text:00000000000016a9 $d
             forth.s:688    .text:00000000000016aa $t
             forth.s:699    .text:00000000000016b9 $d
             forth.s:699    .text:00000000000016ba $t
             forth.s:710    .text:00000000000016c9 $d
             forth.s:710    .text:00000000000016ca $t
             forth.s:743    .text:00000000000016f9 $d
             forth.s:743    .text:00000000000016fa $t
             forth.s:777    .text:000000000000172d $d
             forth.s:777    .text:000000000000172e $t
             forth.s:788    .text:000000000000173d $d
             forth.s:788    .text:000000000000173e $t
             forth.s:799    .text:000000000000174f $d
             forth.s:799    .text:0000000000001750 $t
             forth.s:825    .text:0000000000001777 $d
             forth.s:825    .text:0000000000001778 $t
             forth.s:860    .text:00000000000017b3 $d
             forth.s:860    .text:00000000000017b4 $t
             forth.s:873    .text:00000000000017c7 $d
             forth.s:873    .text:00000000000017c8 $t
             forth.s:900    .text:00000000000017f5 $d
             forth.s:900    .text:00000000000017f6 $t
             forth.s:924    .text:0000000000001819 $d
             forth.s:924    .text:000000000000181a $t
             forth.s:953    .text:0000000000001847 $d
             forth.s:953    .text:0000000000001848 $t
             forth.s:1026   .text:00000000000018b7 $d
             forth.s:1026   .text:00000000000018b8 $t
             forth.s:1041   .text:00000000000018cf $d
             forth.s:1041   .text:00000000000018d0 $t
             forth.s:1056   .text:00000000000018eb $d
             forth.s:1056   .text:00000000000018ec $t
ARM GAS  forth.s 			page 160


             forth.s:1129   .text:0000000000001947 $d
             forth.s:1129   .text:0000000000001948 $t
             forth.s:1140   .text:000000000000195b $d
             forth.s:1140   .text:000000000000195c $t
             forth.s:1175   .text:0000000000001997 $d
             forth.s:1175   .text:0000000000001998 $t
             forth.s:1199   .text:00000000000019b5 $d
             forth.s:1199   .text:00000000000019b6 $t
             forth.s:1223   .text:00000000000019df $d
             forth.s:1223   .text:00000000000019e0 $t
             forth.s:1272   .text:0000000000001a31 $d
             forth.s:1272   .text:0000000000001a32 $t
             forth.s:1295   .text:0000000000001a5b $d
             forth.s:1295   .text:0000000000001a5c $t
             forth.s:1311   .text:0000000000001a75 $d
             forth.s:1311   .text:0000000000001a76 $t
             forth.s:1324   .text:0000000000001a95 $d
             forth.s:1324   .text:0000000000001a96 $t
             forth.s:1343   .text:0000000000001ab3 $d
             forth.s:1343   .text:0000000000001ab4 $t
             forth.s:1362   .text:0000000000001adf $d
             forth.s:1362   .text:0000000000001ae0 $t
             forth.s:1429   .text:0000000000001b91 $d
             forth.s:1429   .text:0000000000001b92 $t
             forth.s:1486   .text:0000000000001c0b $d
             forth.s:1486   .text:0000000000001c0c $t
             forth.s:1552   .text:0000000000001cb5 $d
             forth.s:1552   .text:0000000000001cb6 $t
             forth.s:1571   .text:0000000000001cdd $d
             forth.s:1571   .text:0000000000001cde $t
             forth.s:1610   .text:0000000000001d2f $d
             forth.s:1610   .text:0000000000001d30 $t
             forth.s:1649   .text:0000000000001d7d $d
             forth.s:1649   .text:0000000000001d7e $t
             forth.s:1673   .text:0000000000001db1 $d
             forth.s:1673   .text:0000000000001db2 $t
             forth.s:1692   .text:0000000000001dd5 $d
             forth.s:1692   .text:0000000000001dd6 $t
             forth.s:1759   .text:0000000000001ea3 $d
             forth.s:1759   .text:0000000000001ea4 $t
             forth.s:1773   .text:0000000000001ec1 $d
             forth.s:1773   .text:0000000000001ec2 $t
             forth.s:1806   .text:0000000000001f0f $d
             forth.s:1806   .text:0000000000001f10 $t
             forth.s:1823   .text:0000000000001f39 $d
             forth.s:1823   .text:0000000000001f3a $t
             forth.s:1839   .text:0000000000001f63 $d
             forth.s:1839   .text:0000000000001f64 $t
             forth.s:1906   .text:0000000000001ffb $d
             forth.s:1906   .text:0000000000001ffc $t
             forth.s:2045   .text:00000000000021d7 $d
             forth.s:2045   .text:00000000000021d8 $t
             forth.s:2064   .text:000000000000220d $d
             forth.s:2064   .text:000000000000220e $t
             forth.s:2084   .text:0000000000002243 $d
             forth.s:2084   .text:0000000000002244 $t
             forth.s:2160   .text:00000000000022c3 $d
ARM GAS  forth.s 			page 161


             forth.s:2160   .text:00000000000022c4 $t
             forth.s:2198   .text:0000000000002323 $d
             forth.s:2198   .text:0000000000002324 $t
             forth.s:2358   .text:000000000000250f $d
             forth.s:2358   .text:0000000000002510 $t
             forth.s:2401   .text:0000000000002571 $d
             forth.s:2401   .text:0000000000002572 $t
             forth.s:2416   .text:0000000000002595 $d
             forth.s:2416   .text:0000000000002596 $t
             forth.s:2652   .text:000000000000281f $d
             forth.s:2652   .text:0000000000002820 $t
             forth.s:2806   .text:00000000000029eb $d
             forth.s:2806   .text:00000000000029ec $t
             forth.s:2820   .text:0000000000002a15 $d
             forth.s:2820   .text:0000000000002a16 $t
             forth.s:2843   .text:0000000000002a5b $d
             forth.s:2843   .text:0000000000002a5c $t
             forth.s:2856   .text:0000000000002a79 $d
             forth.s:2856   .text:0000000000002a7a $t
             forth.s:2870   .text:0000000000002aa7 $d
             forth.s:2870   .text:0000000000002aa8 $t
             forth.s:3040   .text:0000000000002c51 $d
             forth.s:3040   .text:0000000000002c52 $t
             forth.s:3079   .text:0000000000002cbb $d
             forth.s:3079   .text:0000000000002cbc $t
             forth.s:3111   .text:0000000000002d23 $d
             forth.s:3111   .text:0000000000002d24 $t
             forth.s:3126   .text:0000000000002d45 $d
             forth.s:3126   .text:0000000000002d46 $t
             forth.s:3155   .text:0000000000002d85 $d
             forth.s:3155   .text:0000000000002d86 $t
             forth.s:3182   .text:0000000000002dc3 $d
             forth.s:3182   .text:0000000000002dc4 $t
             forth.s:3195   .text:0000000000002de3 $d
             forth.s:3195   .text:0000000000002de4 $t
             forth.s:3208   .text:0000000000002e03 $d
             forth.s:3208   .text:0000000000002e04 $t
             forth.s:3275   .text:0000000000002ec1 $d
             forth.s:3275   .text:0000000000002ec2 $t
             forth.s:3417   .text:0000000000003031 $d
             forth.s:3417   .text:0000000000003032 $t
             forth.s:3472   .text:00000000000030d7 $d
             forth.s:3472   .text:00000000000030d8 $t
             forth.s:3486   .text:00000000000030fb $d
             forth.s:3486   .text:00000000000030fc $t
             forth.s:3526   .text:0000000000003173 $d
             forth.s:3526   .text:0000000000003174 $t
             forth.s:3543   .text:00000000000031a5 $d
             forth.s:3543   .text:00000000000031a6 $t
             forth.s:3588   .text:000000000000321d $d
             forth.s:3588   .text:000000000000321e $t
             forth.s:3625   .text:0000000000003297 $d
             forth.s:3625   .text:0000000000003298 $t
             forth.s:3810   .text:00000000000033cb $d
             forth.s:3810   .text:00000000000033cc $t
             forth.s:3839   .text:0000000000003439 $d
             forth.s:3839   .text:000000000000343a $t
ARM GAS  forth.s 			page 162



UNDEFINED SYMBOLS
_mstack
