ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
ARM GAS  forth.s 			page 9


  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	  .equ VFPSW, PEN_COLOR+4 
ARM GAS  forth.s 			page 10


 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
 165              	
ARM GAS  forth.s 			page 11


 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
 222              		// from a code word   
ARM GAS  forth.s 			page 12


 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
ARM GAS  forth.s 			page 13


  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
ARM GAS  forth.s 			page 14


 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF898C4 	  ldr IP,=dh
 159 000e 02F033BA 	  b INEXT  
 160              	dh:
 161 0012 E53F0000 	  _ADR PRESE    
 162 0016 F7250000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e 7D2B0000 	  _ADR COUNT 
 164 0022 25360000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a 29270000 	  _ADR DUPP
 167 002e D1260000 	  _ADR TOR 
 168 0032 F7250000 	  _DOLIT 16 
 168      10000000 
 169 003a 152C0000 	  _ADR BASE 
 170 003e 69260000 	  _ADR STORE 
 171 0042 6D370000 	  _ADR DOT 
 172 0046 A9260000 	  _ADR RFROM
 173 004a F7250000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 6D270000 	  _ADR ANDD
 175 0056 37260000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 F7250000 	  _DOLIT ','
 177      2C000000 
 178 006a 01250000 	  _ADR EMIT 
 179 006e D1350000 	  _ADR SPACE 
 180 0072 6D370000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
ARM GAS  forth.s 			page 15


 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 02F0F6B9 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 02F0EDB9 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8C8C3 	  ldr IP,=ur
 232 00e2 02F0C9B9 	  b INEXT  
 233              	ur:
ARM GAS  forth.s 			page 16


 234 00e6 E53F0000 	  _ADR PRESE
 235 00ea 59360000 	  _ADR CR   
 236 00ee F7250000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 7D2B0000 		_ADR COUNT 
 238 00fa 25360000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0C8F9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0C1FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 04F007BE 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
ARM GAS  forth.s 			page 17


 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF828A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
ARM GAS  forth.s 			page 18


 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	
 347              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 348 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 349 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 350 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 351 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 352              	/* configure GPIOC:13 as output for user LED */
 353 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 353      C4F20200 
 354 0206 4FF00D01 	  mov r1,#LED_PIN
 355 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 356 020e 00B500F0 	  _CALL gpio_config 
 356      8FF85DF8 
 356      04EB
 357 0218 4FF00102 	  mov r2,#1
 358 021c 00B500F0 	  _CALL gpio_out 
 358      DEF85DF8 
 358      04EB
 359              	/* enable compensation CELL for fast I/O */
 360 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 360      C4F20101 
 361 022e 4FF00100 		mov r0,#1 
 362 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 363              	/* wait for ready bit */ 
 364 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 365 0236 10F4807F 	    tst r0,#(1<<8)
 366 023a FBD0     		beq 1b 	
 367              	
 368              	
 369              	/* configure systicks for 1msec ticks */
 370              	// set priority to 15 (lowest)
 371 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 372 0240 4FF00F01 	  mov r1,#15 
 373 0244 00B500F0 	  _CALL nvic_set_priority
 373      2FF85DF8 
 373      04EB
 374 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 374      CEF20000 
 375 0256 47F2FF61 	  _MOV32 r1,95999 
 375      C0F20101 
 376 025e 4160     	  str r1,[r0,#STK_LOAD]
 377 0260 4FF00701 	  mov r1,#7
 378 0264 0160     	  str r1,[r0,STK_CTL]
 379 0266 7047     	  _RET  
 380              	
ARM GAS  forth.s 			page 19


 381              	
 382              	/* copy system variables to RAM */ 
 383              		.type remap, %function 
 384              	    .global remap 
 385              	remap:
 386              	// copy system to RAM 	
 387 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 387      C2F20000 
 388 0270 8F49     		ldr r1,=UZERO 
 389 0272 4FF0B002 		mov r2,#ULAST-UZERO 
 390 0276 02F10302 		add r2,r2,#3
 391 027a 22F00302 		and r2,r2,#~3 
 392 027e 51F8043B 	1:	ldr r3,[r1],#4 
 393 0282 40F8043B 		str r3,[r0],#4 
 394 0286 043A     		subs R2,#4 
 395 0288 F9D1     		bne 1b
 396              	// zero end of RAM 
 397 028a 4FF00002 		_MOV32 r2,RAM_END 
 397      C2F20202 
 398 0292 83EA0303 		eor r3,r3,r3 
 399 0296 40F8043B 	2:  str r3,[r0],#4
 400 029a 9042     		cmp r0,r2 
 401 029c FBDB     		blt 2b 
 402 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 402      C2F20004 
 403 02a6 7047     		_RET 
 404              	
 405              	// set irq priority 
 406              	// 0 highest 
 407              	// 15 lowest
 408              	// input: r0 IRQn  
 409              	//        r1  ipr 
 410              	nvic_set_priority:
 411 02a8 08B4     	    push {r3}
 412 02aa 0028     	    cmp r0,#0 
 413 02ac 08D4     	    bmi negative_irq 
 414 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 414      CEF20003 
 415 02b6 4FEA0111 	    lsl r1,#4 
 416 02ba 1954     	    strb r1,[r3,r0]
 417 02bc 08BC     	    pop {r3}
 418 02be 7047     	    _RET 
 419              	negative_irq:
 420 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 420      CEF20003 
 421 02c8 00F00F00 	    and r0,#0XF 
 422 02cc A0F10400 	    sub r0,#4 
 423 02d0 4FEA0111 	    lsl r1,#4 
 424 02d4 1954     	    strb r1,[r3,r0]
 425 02d6 08BC     	    pop {r3}
 426 02d8 7047     	    _RET 
 427              	
 428              	
 429              	// enable interrupt in nvic 
 430              	// input: r0 = IRQn 
 431              	nvic_enable_irq: 
 432 02da 0EB4     	    push {r1,r2,r3}
ARM GAS  forth.s 			page 20


 433 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 433      CEF20003 
 434 02e4 0146     	    mov r1,r0 
 435 02e6 4FEA5111 	    lsr r1,#5  
 436 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 437 02ee 00F01F00 	    and r0,#31 // bit#
 438 02f2 4FF00102 	    mov r2,#1 
 439 02f6 02FA00F2 	    lsl r2,r0
 440 02fa 72B6     	    cpsid I
 441 02fc 5A50     	    str r2,[r3,r1]
 442 02fe 62B6     	    cpsie I 
 443 0300 0EBC     	    pop {r1,r2,r3}
 444 0302 7047     	    _RET 
 445              	
 446              	// disable interrupt in nvic
 447              	// input: r0 = IRQn
 448              	nvic_disable_irq:
 449 0304 0EB4     	    push {r1,r2,r3}
 450 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 450      CEF20003 
 451 030e 0146     	    mov r1,r0 
 452 0310 4FEA5111 	    lsr r1,#5  
 453 0314 4FEA8101 	    lsl r1,#2  // ISERn
 454 0318 00F01F00 	    and r0,#31 // bit#
 455 031c 4FF00102 	    mov r2,#1 
 456 0320 02FA00F2 	    lsl r2,r0
 457 0324 5A50     	    str r2,[r3,r1]
 458 0326 BFF34F8F 	    dsb 
 459 032a BFF36F8F 	    isb 
 460 032e 0EBC     	    pop {r1,r2,r3}
 461 0330 7047     	    _RET 
 462              	
 463              	/**********************************
 464              	  gpio_config 
 465              	  Configure gpio mode 
 466              	  input:
 467              	    r0   GPIOx 
 468              	    r1   pin 
 469              	    r2   mode 
 470              	  output:
 471              	    none 
 472              	  use:
 473              	    r3,r5,r11  
 474              	**********************************/
 475              	gpio_config:
 476 0332 2DE92808 	    push {r3,r5,r11}
 477              	//  clear registers field 
 478 0336 4FF00105 	    mov r5,#1
 479 033a 05FA01F5 	    lsl r5,r1
 480 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 481 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 482 0344 03EA0503 	    and r3,r5 
 483 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 484 034a 4FF00305 	    mov r5,#3 
 485 034e 4FF0020B 	    mov r11,#2 
 486 0352 01FB0BFB 	    mul r11,r1 
 487 0356 05FA0BF5 	    lsl r5,r11 
ARM GAS  forth.s 			page 21


 488 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 489 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 490 0360 03EA0503 	    and r3,r5 
 491 0364 0360     	    str r3,[r0,#GPIO_MODER]
 492 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 493 0368 03EA0503 	    and r3,r5 
 494 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 495              	// set mode register, r2 low nibble  
 496 036e 02F00305 	    and r5,r2,#3    
 497 0372 05FA0BF5 	    lsl r5,r11 // mode 
 498 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 499 0378 43EA0503 	    orr r3,r5 
 500 037c 0360     	    str r3,[r0,#GPIO_MODER]
 501 037e 032A     	    cmp r2,#3
 502 0380 13D0     	    beq 9f // analog input 
 503 0382 12F00305 	    ands r5,r2,#3 
 504 0386 08D0     	    beq input_pull 
 505              	output_type:
 506 0388 4FEA1212 	    lsr r2,#4 
 507 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 508 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 509 0392 43EA0203 	    orr r3,r2 
 510 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 511 0398 07E0     	    b 9f 
 512              	input_pull:
 513 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 514 039c 4FEA1212 	    lsr r2,#4 
 515 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 516 03a4 43EA0203 	    orr r3,r2 
 517 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 518 03aa BDE82808 	9:  pop {r3,r5,r11}
 519 03ae 7047     	    _RET 
 520              	
 521              	// configure gpio speed 
 522              	// input:
 523              	//    r0   GPIO_BASE_ADR 
 524              	//    r1   pin 
 525              	//    r2   speed
 526              	// use:
 527              	//  r3,r5,r11 
 528              	gpio_speed:
 529 03b0 2DE92808 	    push {r3,r5,r11}
 530 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 531 03b6 4FF00305 	    mov r5,#3
 532 03ba 4FF0020B 	    mov r11,#2 
 533 03be 01FB0BFB 	    mul r11,r1 
 534 03c2 05FA0BF5 	    lsl r5,r11
 535 03c6 6FEA0505 	    mvn r5,r5 
 536 03ca 03EA0503 	    and r3,r5   
 537 03ce 02FA0BF2 	    lsl r2,r11  
 538 03d2 43EA0203 	    orr r3,r2 
 539 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 540 03d8 BDE82808 	    pop {r3,r5,r11}
 541 03dc 7047     	    _RET
 542              	
 543              	/**************************** 
 544              	  gpio_out port,pin,0|1
ARM GAS  forth.s 			page 22


 545              	  input:
 546              	    r0   gpio_base_adr 
 547              	    r1   pin 
 548              	    r2   data 0|1 
 549              	**************************/
 550              	gpio_out:
 551 03de 08B4     	    push {r3}
 552 03e0 4FF00103 	    mov r3,#1 
 553 03e4 03FA01F3 	    lsl r3,r1 
 554 03e8 0AB9     	    cbnz r2, 1f 
 555 03ea 4FEA0343 	    lsl r3,#16 
 556 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 557 03f0 08BC     	    pop {r3}
 558 03f2 7047     	    _RET 
 559              	
 560              	/******************************************************
 561              	*  COLD start moves the following to USER variables.
 562              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 563              	******************************************************/
 564              		.p2align 2
 565              	UZERO:
 566 03f4 00000000 		.word 0  			/*Reserved */
 567 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 568 03fc 00000000 		.word 0      /* TICKS */
 569 0400 00000000 	    .word 0     /* CD_TIMER */
 570 0404 504C0000 		.word HI  /*'BOOT */
 571 0408 C8130000 		.word PS2_QKEY /* query for character */
 572 040c 900C0000 	  .word TV_EMIT  /* char output device */
 573 0410 0A000000 	  .word BASEE 	/*BASE */
 574 0414 00000000 		.word 0			/*tmp */
 575 0418 00000000 		.word 0			/*SPAN */
 576 041c 00000000 		.word 0			/*>IN */
 577 0420 00000000 		.word 0			/*#TIB */
 578 0424 00FF0120 		.word TIBB	/*TIBU */
 579 0428 BC3E0000 		.word INTER	/*'EVAL */
 580 042c 00000000 		.word 0			/*HLD */
 581 0430 6C4D0000 		.word _LASTN	/*CONTEXT */
 582 0434 D84D0000 		.word CTOP  	/* FCP end of system dictionnary */
 583 0438 E4490020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 584 043c 6C4D0000 		.word _LASTN	/*LAST word in dictionary */
 585 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 585      00000000 
 585      00000000 
 585      00000000 
 586 0450 00000000 		.word 0  /* RX_HEAD */
 587 0454 00000000 		.word 0  /* RX_TAIL */ 
 588 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 589 045c 00000000 		.word 0  /* VID_STATE, video state */  
 590 0460 00000000 	    .word 0  /* VID_FIELD, field */
 591 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 592 0468 00000000 	    .word 0 /* kbd struct */
 593 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 593      00000000 
 593      00000000 
 593      00000000 
 594 047c 00000000 		.word 0  /* kbd queue head */
 595 0480 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 23


 596 0484 00000000 	    .word 0 /* tv cursor row */
 597 0488 00000000 	    .word 0 /* tv cursor column */ 
 598 048c 00000000 	    .word 0 /* tv back color */
 599 0490 07000000 	    .word 7 /* tv font color */
 600 0494 00000000 	    .word 0 /* FPSW */
 601 0498 00000000 	    .word 0 /* FBASE */ 
 602 049c 00000000 	    .word 0,0 
 602      00000000 
 603              	ULAST:
 604              	
 605              	// used by _HEADER macro 
 606              	// to link names field
 607              	// in dictionary  
 608 04a4 12000000 	    .equ LINK, 0 
 608      E6000000 
 608      70240000 
 608      F4030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04b4 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 04bc 1868     		ldr r0,[r3,#USART_SR]
  38 04be 5968     		ldr r1,[r3,#USART_DR]
  39 04c0 10F0200F 		tst r0,#(1<<5) // RXNE 
ARM GAS  forth.s 			page 24


  40 04c4 0CD0     		beq 2f // no char received 
  41 04c6 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04ca 3FF403AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04ce 04F14C00 		add r0,UP,#RX_QUEUE
  44 04d2 226E     		ldr r2,[UP,#RX_TAIL]
  45 04d4 8154     		strb r1,[r0,r2]
  46 04d6 02F10102 		add r2,#1 
  47 04da 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04de 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04e0 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04e2 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04ea 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04ec 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04f0 01EA0201 	  and r1,r1,r2
  62 04f4 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04f8 41EA0201 	  orr r1,r1,r2 
  64 04fc 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04fe 4FF4EE61 	  mov r1,#0x77<<4 
  67 0502 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0504 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 050c 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0510 8160     	  str r1,[r0,#USART_BRR]
  73 0512 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0516 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0518 4FF02500 	  mov r0,#USART1_IRQ 
  77 051c 4FF00701 	  mov r1,#7
  78 0520 00B5FFF7 	  _CALL nvic_set_priority
  78      C1FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 052a 4FF02500 	  mov r0,#USART1_IRQ 
  81 052e 00B5FFF7 	  _CALL nvic_enable_irq  
  81      D3FE5DF8 
  81      04EB
  82 0538 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 053a 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
ARM GAS  forth.s 			page 25


  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0548 47F8046D 		_PUSH
  92 054c 206E     		ldr T0,[UP,#RX_TAIL] 
  93 054e E16D     		ldr T1,[UP,#RX_HEAD]
  94 0550 90EA0106 		eors TOS,T0,T1 
  95 0554 0CD0     		beq 1f
  96 0556 04F14C00 		add T0,UP,#RX_QUEUE 
  97 055a 0844     		add T0,T1 
  98 055c 0678     		ldrb TOS,[T0]
  99 055e 01F10101 		add T1,#1 
 100 0562 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0566 E165     		str T1,[UP,#RX_HEAD]
 102 0568 47F8046D 		_PUSH 
 103 056c 4FF0FF36 		mov TOS,#-1
 104 0570 01F082BF 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0574 3E050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0584 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 058c 2868     	1:  ldr T0,[WP,#USART_SR]
 113 058e 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0592 FBD0     		beq 1b 
 115 0594 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0596 57F8046B 		_POP
 117 059a 01F06DBF 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 059e 78050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05a8 47F8046D 	        _PUSH 
 126 05ac 4FF00006 	        mov TOS,#0
 127 05b0 01F062BF 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05b4 A2050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 05c0 47F8046D 	        _PUSH 
 135 05c4 4FF00106 	        mov TOS,#1
 136 05c8 01F056BF 	        _NEXT 
ARM GAS  forth.s 			page 26


 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05cc B8050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05d8 3046     	        mov T0,TOS
 144 05da 57F8046B 	        _POP 
 145 05de 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05e0 4B48     	        ldr T0,=SER_QKEY 
 148 05e2 6061     	        str T0,[UP,#STDIN]
 149 05e4 4B48     	        ldr T0,=SER_EMIT
 150 05e6 A061     	        str T0,[UP,#STDOUT]
 151 05e8 01F046BF 	        _NEXT 
 152              	4: // local console 
 153 05ec 4A48     	        ldr T0,=PS2_QKEY
 154 05ee 6061     	        str T0,[UP,#STDIN]
 155 05f0 4A48     	        ldr T0,=TV_EMIT
 156 05f2 A061     	        str T0,[UP,#STDOUT]
 157 05f4 01F040BF 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 05f8 D0050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0608 504700BF 	      _NEST 
 166 060c F7250000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0614 49280000 	1:    _ADR ONEP  // c+1
 168 0618 D1260000 	      _ADR TOR   
 169 061c F7250000 	      _DOLIT 10 
 169      0A000000 
 170 0624 392F0000 	      _ADR SLMOD // r q  
 171 0628 FD280000 	      _ADR QDUP  // r q q | r 0  
 172 062c 37260000 	      _QBRAN 2f  // r 0 
 172      40060000 
 173 0634 A9260000 	      _ADR RFROM // r q c 
 174 0638 4B260000 	      _BRAN 1b
 174      14060000 
 175 0640 F7250000 	2:    _DOLIT '0'  
 175      30000000 
 176 0648 ED270000 	      _ADR PLUS 
 177 064c 01250000 	      _ADR EMIT 
 178 0650 A9260000 	      _ADR RFROM 
 179 0654 FD280000 	      _ADR QDUP 
 180 0658 37260000 	      _QBRAN 3f
 180      70060000 
 181 0660 59280000 	      _ADR ONEM 
 182 0664 D1260000 	      _ADR TOR 
ARM GAS  forth.s 			page 27


 183 0668 4B260000 	      _BRAN 2b 
 183      40060000 
 184              	3:    
 185 0670 7F240000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0674 FC050000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0680 504700BF 	      _NEST 
 193 0684 F7250000 	      _DOLIT 27 
 193      1B000000 
 194 068c 01250000 	      _ADR EMIT 
 195 0690 F7250000 	      _DOLIT '['
 195      5B000000 
 196 0698 01250000 	      _ADR EMIT 
 197 069c 7F240000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 06a0 78060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06ac 504700BF 	      _NEST
 205 06b0 81060000 	      _ADR ANSI_ESC
 206 06b4 39270000 	      _ADR SWAP 
 207 06b8 09060000 	      _ADR ANSI_PARAM 
 208 06bc F7250000 	      _DOLIT ';'
 208      3B000000 
 209 06c4 01250000 	      _ADR EMIT
 210 06c8 09060000 	      _ADR ANSI_PARAM
 211 06cc F7250000 	      _DOLIT 'H'
 211      48000000 
 212 06d4 01250000 	      _ADR EMIT 
 213 06d8 7F240000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06dc A4060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06e8 504700BF 	    _NEST
 221 06ec F7250000 	    _DOLIT 1 
 221      01000000 
 222 06f4 29270000 	    _ADR DUPP 
 223 06f8 AD060000 	    _ADR SER_AT  
 224 06fc 81060000 	    _ADR ANSI_ESC
 225 0700 F7250000 	    _DOLIT 'J'
 225      4A000000 
 226 0708 01250000 	    _ADR EMIT 
ARM GAS  forth.s 			page 28


 227 070c 7F240000 	    _UNNEST 
 228 0710 48050000 	
 228      84050000 
 228      C8130000 
 228      900C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
ARM GAS  forth.s 			page 29


  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0720 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0728 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 072a 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
ARM GAS  forth.s 			page 30


  80              	//  movt r2,#0x55<<8 
  81 0732 41EA0201 	  orr r1,r2
  82 0736 0160     	  str r1,[r0,#GPIO_MODER]
  83 0738 81EA0101 	  eor r1,r1 
  84 073c 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 073e 4FF00101 	  mov r1,#1 // pin 1 
  88 0742 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0746 00B5FFF7 	  _CALL gpio_config 
  89      F3FD5DF8 
  89      04EB
  90 0750 4FF00101 	  mov r1,#1 
  91 0754 4FF00202 	  mov r2,#2
  92 0758 00B5FFF7 	  _CALL gpio_speed 
  92      29FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0762 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0764 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0768 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 076a 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0772 4FF00200 	  mov r0,#2 
 100 0776 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0778 41EA0001 	  orr r1,r0 
 102 077c 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 077e 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0786 41F2D470 	  mov r0,#HPER
 106 078a D062     	  str r0,[r2,#TIM_ARR]
 107 078c 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0790 D063     	  str r0,[r2,#TIM_CCR3]
 109 0792 4FF4E170 	  mov r0,#HPULSE 
 110 0796 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0798 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 079c D061     	  str r0,[r2,#TIM_CCMR2]
 113 079e 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 07a2 1062     	  str r0,[r2,#TIM_CCER]
 115 07a4 4FF00100 	  mov r0,#1 
 116 07a8 D060     	  str r0,[r2,#TIM_DIER]
 117 07aa 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 07ac 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 07b0 4FF00201 	  mov r1,#2
 121 07b4 00B5FFF7 	  _CALL nvic_set_priority
 121      77FD5DF8 
 121      04EB
 122 07be 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 07c2 00B5FFF7 	  _CALL nvic_enable_irq
 123      89FD5DF8 
 123      04EB
 124 07cc 7047     	  _RET
 125              	
 126              	/*************************************
ARM GAS  forth.s 			page 31


 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 07ce 00BF     	  _GBL_FUNC tv_out_isr
 132 07d0 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 07d8 81EA0101 	  eor T1,T1
 134 07dc 0161     	  str T1,[T0,#TIM_SR]
 135 07de 616E     	  ldr T1,[UP,#VID_CNTR]
 136 07e0 01F10101 	  add T1,#1 
 137 07e4 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 07e6 A26E     	  ldr T2,[UP,#VID_STATE]
 140 07e8 002A     	  cmp T2,#ST_VSYNC 
 141 07ea 07D0     	  beq state_vsync
 142 07ec 012A     	  cmp T2,#ST_PREVID 
 143 07ee 2FD0     	  beq state_pre_video 
 144 07f0 022A     	  cmp T2,#ST_VIDEO 
 145 07f2 36D0     	  beq state_video_out 
 146 07f4 032A     	  cmp T2,#ST_POSTVID 
 147 07f6 63D0     	  beq state_post_video
 148 07f8 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 07fc 0129     	  cmp T1,#1
 152 07fe 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0800 4FF0DB01 	  mov T1,#SERRATION
 155 0804 0164     	  str T1,[T0,#TIM_CCR4]
 156 0806 40F6E931 	  mov T1,#SYNC_LINE 
 157 080a C162     	  str T1,[T0,#TIM_ARR]
 158 080c 6BE0     	  b tv_isr_exit 
 159 080e 0729     	1: cmp T1,#7
 160 0810 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0812 40F62821 	  mov T1,#VSYNC_PULSE
 163 0816 0164     	  str T1,[T0,#TIM_CCR4]
 164 0818 65E0     	  b tv_isr_exit
 165 081a 0D29     	2: cmp T1,#13
 166 081c 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 081e 4FF0DB01 	   mov T1,#SERRATION 
 169 0822 0164     	   str T1,[T0,#TIM_CCR4]
 170 0824 5FE0     	   b tv_isr_exit   
 171 0826 1229     	3: cmp T1,#18
 172 0828 03D1     	   bne 4f 
 173              	// if even field full line  
 174 082a E16E     	   ldr T1,[UP,#VID_FIELD]
 175 082c 0029     	   cmp T1,#ODD_FIELD  
 176 082e 5AD0     	   beq tv_isr_exit 
 177 0830 01E0     	   b sync_end 
 178 0832 1329     	4: cmp T1,#19 
 179 0834 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0836 4FF00901 	   mov T1,#9
 182 083a 6166     	   str T1,[UP,#VID_CNTR]
ARM GAS  forth.s 			page 32


 183 083c 4FF4E171 	   mov T1,#HPULSE 
 184 0840 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0842 41F2D471 	   mov T1,#HPER 
 186 0846 C162     	   str T1,[T0,#TIM_ARR] 
 187 0848 4FF00101 	   mov T1,#ST_PREVID 
 188 084c A166     	   str T1,[UP,#VID_STATE]
 189 084e 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0850 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0852 48D4     	   bmi tv_isr_exit 
 194 0854 4FF00201 	   mov T1,#ST_VIDEO 
 195 0858 A166     	   str T1,[UP,#VID_STATE]
 196 085a 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 085e C160     	   str T1,[T0,#TIM_DIER]
 198 0860 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0862 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0864 06D9     	   bls 1f 
 205 0866 4FF00301 	   mov T1,#ST_POSTVID 
 206 086a A166     	   str T1,[UP,#VID_STATE]
 207 086c 4FF00101 	   mov T1,#1 
 208 0870 C160     	   str T1,[T0,#TIM_DIER]
 209 0872 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0874 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0876 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 087a 4FF0A003 	   mov T3,#160
 214 087e 03FB01F1 	   mul T1,T3 
 215 0882 0844     	   add T0,T1  
 216 0884 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 088c 10F8012B 	2: ldrb T2,[T0],#1 
 222 0890 4FEA0222 	   lsl T2,#8 
 223 0894 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0896 AFF30080 	   nop.w 
 225 089a AFF30080 	   nop.w
 226 089e AFF30080 	   nop.w 
 227 08a2 AFF30080 	   nop.w 
 228 08a6 4FEA0212 	   lsl T2,#4  
 229 08aa 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 08ac AFF30080 	   nop.w
 231 08b0 AFF30080 	   nop.w  
 232 08b4 013B     	   subs T3,#1
 233 08b6 E9D1     	   bne 2b  
 234 08b8 4FF47022 	   mov T2,#(15<<16) 
 235 08bc 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 08be 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 08c0 4FF48372 	   mov T2,#262
ARM GAS  forth.s 			page 33


 239 08c4 9142     	   cmp T1,T2
 240 08c6 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 08c8 E16E     	   ldr T1,[UP,VID_FIELD]
 243 08ca 11B9     	   cbnz T1, frame_end 
 244 08cc 40F6E931 	   mov T1,#SYNC_LINE
 245 08d0 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 08d2 4FF00001 	   mov T1,#ST_VSYNC 
 248 08d6 A166     	   str T1,[UP,#VID_STATE]
 249 08d8 81EA0101 	   eor T1,T1 
 250 08dc 6166     	   str T1,[UP,#VID_CNTR]
 251 08de E16E     	   ldr T1,[UP,#VID_FIELD]
 252 08e0 6FEA0101 	   mvn T1,T1  
 253 08e4 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 08e6 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 08e8 E0060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 08f8 47F8046D 		_PUSH 
 266 08fc 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0900 01F0BABD 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0904 EC080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0914 47F8046D 		_PUSH 
 273 0918 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 091c 01F0ACBD 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0920 08090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 092c 47F8046D 	  _PUSH 
 280 0930 04F19406 	  ADD TOS,UP,#COL 
 281 0934 01F0A0BD 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0938 24090000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0940 47F8046D 	  _PUSH 
ARM GAS  forth.s 			page 34


 287 0944 04F19006 	  ADD TOS,UP,#ROW 
 288 0948 01F096BD 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 094c 3C090000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0958 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 095c 00FB06F6 	  mul TOS,T0 
 295 0960 01F08ABD 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0964 50090000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0970 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0974 00FB06F6 	  mul TOS,T0 
 302 0978 01F07EBD 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 097c 68090000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0988 47F8046D 	  _PUSH 
 308 098c DFF88C65 	  ldr TOS,=font_6x8 
 309 0990 01F072BD 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0994 80090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 09a0 47F8046D 	  _PUSH 
 315 09a4 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 09a6 01F067BD 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 09aa 98090000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 09b4 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 09b6 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 09ba 02FB00F0 	    mul T0,T2 
 330 09be 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 09c2 1044     	    add T0,T2 
 332 09c4 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 09c6 0344     	    add T3,T0 // T3 -> byte address 
ARM GAS  forth.s 			page 35


 334 09c8 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 09ca 4FF00F02 	    mov T2,#15 // AND mask 
 336 09ce 11F0010F 	    tst T1,#1 
 337 09d2 01D0     	    beq 1f 
 338 09d4 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 09d8 DFF84405 	1:  ldr T0,=plot_op 
 340 09dc D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 09e0 05EA0205 	    and WP,T2 // mask out nibble 
 343 09e4 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 09e8 11F0010F 	    tst T1,#1 
 345 09ec 01D1     	    bne 1f 
 346 09ee 4FEA0010 	    lsl T0,#4 // high nibble  
 347 09f2 45EA0005 	1:  orr WP,T0  
 348 09f6 1D70     	    strb WP,[T3]
 349 09f8 1AE0     	    b 9f 
 350              	op_pen: 
 351 09fa 05EA0205 	    and WP,T2 
 352 09fe 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0a02 11F0010F 	    tst T1,#1
 354 0a06 01D1     	    bne 1f 
 355 0a08 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0a0c 45EA0005 	1:	orr WP,T0 
 357 0a10 1D70     	    strb WP,[T3]
 358 0a12 0DE0     	    b 9f 
 359              	op_invert:
 360 0a14 85EA0205 	    eor WP,T2 
 361 0a18 1D70     	    strb WP,[T3]
 362 0a1a 09E0     	    b 9f 
 363              	op_xor:
 364 0a1c D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0a20 11F0010F 	    tst T1,#1 
 366 0a24 01D1     	    bne 1f 
 367 0a26 4FEA0010 	    lsl T0,#4 
 368 0a2a 85EA0005 	1:  eor WP,T0 
 369 0a2e 1D70     	    strb WP,[T3]
 370 0a30 57F8046B 	9:  _POP 
 371 0a34 01F020BD 	    _NEXT 
 372              	
 373 0a38 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0a3c AE090000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0a48 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0a4a 0028     	    cmp T0,#0
 381 0a4c FCD1     	    bne 1b
 382 0a4e 01F013BD 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0a52 400A0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
ARM GAS  forth.s 			page 36


 387 0a5c 80EA0000 	    eor T0,T0 
 388 0a60 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0a64 40EA0100 	    orr T0,T1 
 390 0a68 4FEA0111 	    lsl T1,#4 
 391 0a6c 40EA0100 	    orr T0,T1 
 392 0a70 4FEA0021 	    lsl T1,T0,#8 
 393 0a74 40EA0100 	    orr T0,T1 
 394 0a78 4FEA0041 	    lsl T1,T0,#16
 395 0a7c 40EA0100 	    orr T0,T1 
 396 0a80 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0a84 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0a86 5050     	1:	str T0,[T2,T1]
 399 0a88 0439     	    subs T1,#4
 400 0a8a FCD1     	    bne 1b
 401 0a8c 1060     	    str T0,[T2]
 402 0a8e 80EA0000 	    eor T0,T0 
 403 0a92 C4F89000 	    str T0,[UP,#ROW]
 404 0a96 C4F89400 	    str T0,[UP,#COL]
 405 0a9a 01F0EDBC 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0a9e 560A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0aac 504700BF 	  _NEST
 412 0ab0 F7250000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0ab8 29270000 	  _ADR DUPP  
 414 0abc D1260000 	  _ADR TOR 
 415 0ac0 0D280000 	  _ADR STAR
 416 0ac4 A1090000 	  _ADR VIDBUFF
 417 0ac8 ED270000 	  _ADR PLUS
 418 0acc A9260000 	  _ADR RFROM   
 419 0ad0 F7250000 	  _DOLIT 0 
 419      00000000 
 420 0ad8 6D310000 	  _ADR FILL 
 421 0adc 7F240000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0ae0 A20A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0af0 504700BF 	    _NEST 
 429 0af4 A1090000 	    _ADR VIDBUFF 
 430 0af8 29270000 	    _ADR DUPP 
 431 0afc F7250000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0b04 29270000 	    _ADR DUPP 
 433 0b08 D1260000 	    _ADR TOR 
 434 0b0c ED270000 	    _ADR PLUS 
ARM GAS  forth.s 			page 37


 435 0b10 39270000 	    _ADR SWAP 
 436 0b14 F7250000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0b1c A9260000 	    _ADR RFROM  
 438 0b20 FD270000 	    _ADR SUBB 
 439 0b24 25310000 	    _ADR MOVE
 440 0b28 F7250000 	    _DOLIT 24 
 440      18000000 
 441 0b30 AD0A0000 	    _ADR CLRLINE 
 442 0b34 7F240000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0b38 E40A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0b48 504700BF 	    _NEST 
 450 0b4c A1090000 	    _ADR VIDBUFF
 451 0b50 29270000 	    _ADR DUPP 
 452 0b54 F7250000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0b5c ED270000 	    _ADR PLUS 
 454 0b60 F7250000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0b68 F7250000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0b70 FD270000 	    _ADR SUBB  
 457 0b74 25310000 	    _ADR MOVE
 458 0b78 F7250000 	    _DOLIT 0 
 458      00000000 
 459 0b80 AD0A0000 	    _ADR CLRLINE
 460 0b84 7F240000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0b88 3C0B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0b94 E34D     	    ldr WP,=SCROLLUP 
 469 0b96 45F00105 	    orr WP,#1
 470 0b9a 80EA0000 	    eor T0,T0 
 471 0b9e C4F89400 	    str T0,[UP,#COL]
 472 0ba2 D4F89000 	    ldr T0,[UP,#ROW]
 473 0ba6 1828     	    cmp T0,#24 
 474 0ba8 A2D0     	    beq SCROLLUP  
 475 0baa 00F10100 	    add T0,#1 
 476 0bae C4F89000 	    str T0,[UP,#ROW]
 477 0bb2 01F061BC 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
ARM GAS  forth.s 			page 38


 481              	// move cursor 1 char. right 
 482 0bb6 8C0B0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0bc0 D4F89400 	  ldr T0,[UP,#COL]
 484 0bc4 00F10100 	  add T0,#1
 485 0bc8 3528     	  cmp T0,#53
 486 0bca E3D5     	  bpl TV_CRLF  
 487 0bcc C4F89400 	  str T0,[UP,#COL]
 488 0bd0 01F052BC 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0bd4 BA0B0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0be0 D4F89400 	    ldr T0,[UP,#COL]
 497 0be4 28B1     	    cbz T0,1f 
 498 0be6 A0F10100 	    sub T0,#1 
 499 0bea C4F89400 	    str T0,[UP,#COL]
 500 0bee 01F043BC 	    _NEXT 
 501 0bf2 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0bf6 38B1     	    cbz T0,9f
 503 0bf8 A0F10100 	    sub T0,#1
 504 0bfc C4F89000 	    str T0,[UP,#ROW]
 505 0c00 4FF03400 	    mov T0,#52 
 506 0c04 C4F89400 	    str T0,[UP,#COL]
 507 0c08 01F036BC 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0c0c 4FF08000 	    mov T0,#128 
 513 0c10 06EA0006 	    and TOS,T0 
 514 0c14 4FEAD616 	    lsr TOS,#7
 515 0c18 01F02EBC 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0c1c 3868     	  ldr T0,[DSP]
 520 0c1e 00F10100 	  add T0,#1 
 521 0c22 3860     	  str T0,[DSP]
 522 0c24 01F028BC 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0c28 4FEA4606 	    lsl TOS,#1
 527 0c2c 01F024BC 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
ARM GAS  forth.s 			page 39


 534              	CHAR_ROW:  
 535 0c30 504700BF 	    _NEST 
 536 0c34 F7250000 	    _DOLIT 5 
 536      05000000 
 537 0c3c D1260000 	    _ADR TOR 
 538 0c40 D1260000 	1:  _ADR TOR 
 539 0c44 61290000 	    _ADR DDUP 
 540 0c48 BD260000 	    _ADR RAT
 541 0c4c 0D0C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0c50 B5090000 	    _ADR PLOT 
 543 0c54 1D0C0000 	    _ADR INCR_X 
 544 0c58 A9260000 	    _ADR RFROM 
 545 0c5c 290C0000 	    _ADR NEXT_PIXEL
 546 0c60 19260000 	    _DONXT 1b
 546      400C0000 
 547 0c68 4D290000 	    _ADR TDROP 
 548 0c6c 7F240000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0c70 A6F12006 	   sub TOS,#32
 553 0c74 4FF00800 	   mov T0,#8 
 554 0c78 00FB06F6 	   mul TOS,T0 
 555 0c7c A748     	   ldr T0,=font_6x8
 556 0c7e 0644     	   add TOS,T0 
 557 0c80 01F0FABB 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0c84 D80B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0c90 504700BF 	    _NEST
 565 0c94 29270000 	    _ADR DUPP 
 566 0c98 F7250000 	    _DOLIT 32 
 566      20000000 
 567 0ca0 AD2A0000 	    _ADR ULESS
 568 0ca4 37260000 	    _QBRAN 1f
 568      B40C0000 
 569 0cac 4B260000 	    _BRAN CTRL_KEY
 569      180D0000 
 570 0cb4 710C0000 	1:  _ADR CHAR_FONT 
 571 0cb8 2D090000 	    _ADR CURSOR_COL 
 572 0cbc 7D260000 	    _ADR AT
 573 0cc0 71090000 	    _ADR COLX  // x coord 
 574 0cc4 41090000 	    _ADR CURSOR_ROW 
 575 0cc8 7D260000 	    _ADR AT    
 576 0ccc 59090000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0cd0 11290000 	    _ADR ROT  // TEST 
 578 0cd4 F7250000 	    _DOLIT 7   
 578      07000000 
 579 0cdc D1260000 	    _ADR TOR  
 580 0ce0 D1260000 	1:  _ADR TOR  // { x y }
 581 0ce4 61290000 	    _ADR DDUP  // { x y x y }
 582 0ce8 BD260000 	    _ADR RAT 
ARM GAS  forth.s 			page 40


 583 0cec 9D260000 	    _ADR CAT   // { x y x y r }
 584 0cf0 310C0000 	    _ADR CHAR_ROW 
 585 0cf4 49280000 	    _ADR ONEP // {x y' }
 586 0cf8 A9260000 	    _ADR RFROM 
 587 0cfc 49280000 	    _ADR ONEP // {x y' c-adr' }
 588 0d00 19260000 	    _DONXT 1b
 588      E00C0000 
 589 0d08 4D290000 	    _ADR TDROP  
 590 0d0c C10B0000 	    _ADR RIGHT
 591 0d10 010E0000 	9:  _ADR SHOW_CURSOR 
 592 0d14 7F240000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0d18 890E0000 	    _ADR HIDE_CURSOR
 595 0d1c 29270000 	    _ADR DUPP 
 596 0d20 F7250000 	    _DOLIT BKSPP  
 596      08000000 
 597 0d28 752A0000 	    _ADR EQUAL 
 598 0d2c 37260000 	    _QBRAN 1f 
 598      440D0000 
 599 0d34 E10D0000 	    _ADR BACK_SPACE 
 600 0d38 19270000 	8:  _ADR DROP 
 601 0d3c 4B260000 	    _BRAN 9b 
 601      100D0000 
 602 0d44 29270000 	1:  _ADR DUPP 
 603 0d48 F7250000 	    _DOLIT CRR 
 603      0D000000 
 604 0d50 752A0000 	    _ADR EQUAL 
 605 0d54 37260000 	    _QBRAN 1f 
 605      680D0000 
 606 0d5c 890D0000 	    _ADR CAR_RET
 607 0d60 4B260000 	    _BRAN 8b
 607      380D0000 
 608 0d68 F7250000 	1:  _DOLIT LF 
 608      0A000000 
 609 0d70 752A0000 	    _ADR EQUAL 
 610 0d74 37260000 	    _QBRAN 9b 
 610      100D0000 
 611 0d7c A10D0000 	    _ADR LN_FEED
 612 0d80 4B260000 	    _BRAN 9b  
 612      100D0000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0d88 504700BF 	   _NEST
 620 0d8c F7250000 	   _DOLIT 0 
 620      00000000 
 621 0d94 2D090000 	   _ADR CURSOR_COL 
 622 0d98 69260000 	   _ADR STORE 
 623 0d9c 7F240000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
ARM GAS  forth.s 			page 41


 629              	LN_FEED:
 630 0da0 504700BF 	    _NEST 
 631 0da4 41090000 	    _ADR CURSOR_ROW 
 632 0da8 7D260000 	    _ADR AT 
 633 0dac 29270000 	    _ADR DUPP 
 634 0db0 F7250000 	    _DOLIT 24 
 634      18000000 
 635 0db8 95270000 	    _ADR XORR 
 636 0dbc 37260000 	    _QBRAN 1f
 636      D40D0000 
 637 0dc4 49280000 	    _ADR ONEP 
 638 0dc8 41090000 	    _ADR CURSOR_ROW 
 639 0dcc 69260000 	    _ADR STORE 
 640 0dd0 7F240000 	    _UNNEST    
 641 0dd4 19270000 	1:  _ADR DROP 
 642 0dd8 F10A0000 	    _ADR SCROLLUP 
 643 0ddc 7F240000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 0de0 504700BF 	  _NEST 
 652 0de4 E10B0000 	  _ADR LEFT 
 653 0de8 010E0000 	  _ADR SHOW_CURSOR
 654 0dec 7F240000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 0df0 880C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 0e00 504700BF 	    _NEST 
 663 0e04 F7250000 	    _DOLIT 0xFF
 663      FF000000 
 664 0e0c 41090000 	0:  _ADR CURSOR_ROW
 665 0e10 7D260000 	    _ADR AT  
 666 0e14 49280000 	    _ADR ONEP 
 667 0e18 59090000 	    _ADR ROWY 
 668 0e1c F7250000 	    _DOLIT BPR
 668      A0000000 
 669 0e24 0D280000 	    _ADR STAR
 670 0e28 F7250000 	    _DOLIT BPR  
 670      A0000000 
 671 0e30 FD270000 	    _ADR SUBB 
 672 0e34 2D090000 	    _ADR CURSOR_COL
 673 0e38 7D260000 	    _ADR AT 
 674 0e3c 71090000 	    _ADR COLX 
 675 0e40 ED280000 	    _ADR TWOSL  
 676 0e44 ED270000 	    _ADR PLUS
 677 0e48 A1090000 	    _ADR VIDBUFF
ARM GAS  forth.s 			page 42


 678 0e4c ED270000 	    _ADR PLUS
 679 0e50 F7250000 	    _DOLIT 2
 679      02000000 
 680 0e58 D1260000 	    _ADR TOR  
 681 0e5c 61290000 	1:  _ADR DDUP 
 682 0e60 89260000 	    _ADR CSTOR 
 683 0e64 49280000 	    _ADR ONEP 
 684 0e68 19260000 	    _DONXT 1b
 684      5C0E0000 
 685 0e70 39290000 	2:  _ADR DDROP // drop 3 elements 
 686 0e74 7F240000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 0e78 F40D0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 0e88 504700BF 	    _NEST 
 694 0e8c F9080000 	    _ADR BACKCOLOR 
 695 0e90 7D260000 	    _ADR AT 
 696 0e94 29270000 	    _ADR DUPP  
 697 0e98 F7250000 	    _DOLIT 4 
 697      04000000 
 698 0ea0 DD270000 	    _ADR LSHIFT 
 699 0ea4 81270000 	    _ADR ORR 
 700 0ea8 4B260000 	    _BRAN 0b
 700      0C0E0000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 0eb0 7C0E0000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 0ebc 352E     	    cmp TOS,#53
 706 0ebe 01D4     	    bmi 1f 
 707 0ec0 4FF03406 	    mov TOS,#52
 708 0ec4 C4F89460 	1:  str TOS,[UP,#COL]
 709 0ec8 57F8046B 	    _POP
 710 0ecc 192E     	    cmp TOS,#25
 711 0ece 01D4     	    bmi 1f 
 712 0ed0 4FF01806 	    mov TOS,#24 
 713 0ed4 C4F89060 	1:  str TOS,[UP,#ROW]
 714 0ed8 57F8046B 	    _POP 
 715 0edc 01F0CCBA 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 0ee0 B40E0000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 0eec 504700BF 	    _NEST 
 721 0ef0 9D300000 	    _ADR PAD 
 722 0ef4 29270000 	    _ADR DUPP 
 723 0ef8 49280000 	    _ADR ONEP 
ARM GAS  forth.s 			page 43


 724 0efc F7250000 	    _DOLIT 53
 724      35000000 
 725 0f04 A93D0000 	    _ADR ACCEP
 726 0f08 39270000 	    _ADR SWAP 
 727 0f0c 19270000 	    _ADR DROP 
 728 0f10 4D270000 	    _ADR OVER 
 729 0f14 89260000 	    _ADR CSTOR  
 730 0f18 7F240000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
ARM GAS  forth.s 			page 44


 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
ARM GAS  forth.s 			page 45


 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
ARM GAS  forth.s 			page 46


 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
ARM GAS  forth.s 			page 47


  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
ARM GAS  forth.s 			page 48


  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
ARM GAS  forth.s 			page 49


  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
ARM GAS  forth.s 			page 50


 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f28 1C61     	   .byte 0x1c,'a' 
   9 0f2a 3262     	   .byte 0x32,'b'
  10 0f2c 2163     	   .byte 0x21,'c'
  11 0f2e 2364     	   .byte 0x23,'d'
  12 0f30 2465     	   .byte 0x24,'e'
  13 0f32 2B66     	   .byte 0x2b,'f'
  14 0f34 3467     	   .byte 0x34,'g'
  15 0f36 3368     	   .byte 0x33,'h'
  16 0f38 4369     	   .byte 0x43,'i'
  17 0f3a 3B6A     	   .byte 0x3B,'j'
  18 0f3c 426B     	   .byte 0x42,'k'
  19 0f3e 4B6C     	   .byte 0x4b,'l'
  20 0f40 3A6D     	   .byte 0x3a,'m'
  21 0f42 316E     	   .byte 0x31,'n'
  22 0f44 446F     	   .byte 0x44,'o'
  23 0f46 4D70     	   .byte 0x4d,'p'
  24 0f48 1571     	   .byte 0x15,'q'
  25 0f4a 2D72     	   .byte 0x2d,'r'
  26 0f4c 1B73     	   .byte 0x1b,'s'
  27 0f4e 2C74     	   .byte 0x2c,'t'
  28 0f50 3C75     	   .byte 0x3c,'u'
  29 0f52 2A76     	   .byte 0x2a,'v'
  30 0f54 1D77     	   .byte 0x1d,'w'
  31 0f56 2278     	   .byte 0x22,'x'
  32 0f58 3579     	   .byte 0x35,'y'
  33 0f5a 1A7A     	   .byte 0x1a,'z'
  34 0f5c 4530     	   .byte 0x45,'0'
  35 0f5e 1631     	   .byte 0x16,'1'
  36 0f60 1E32     	   .byte 0x1e,'2'
  37 0f62 2633     	   .byte 0x26,'3'
  38 0f64 2534     	   .byte 0x25,'4'
  39 0f66 2E35     	   .byte 0x2e,'5'
  40 0f68 3636     	   .byte 0x36,'6'
  41 0f6a 3D37     	   .byte 0x3d,'7'
  42 0f6c 3E38     	   .byte 0x3e,'8'
  43 0f6e 4639     	   .byte 0x46,'9'
  44 0f70 0E60     	   .byte 0x0e,'`'
  45 0f72 4E2D     	   .byte 0x4e,'-'
  46 0f74 553D     	   .byte 0x55,'='
  47 0f76 5D5C     	   .byte 0x5d,'\\'
  48 0f78 545B     	   .byte 0x54,'['
  49 0f7a 5B5D     	   .byte 0x5b,']'
ARM GAS  forth.s 			page 51


  50 0f7c 4C3B     	   .byte 0x4c,';'
  51 0f7e 5227     	   .byte 0x52,'\''
  52 0f80 412C     	   .byte 0x41,','
  53 0f82 492E     	   .byte 0x49,'.'
  54 0f84 7C2A     	   .byte 0x7c,'*'
  55 0f86 792B     	   .byte 0x79,'+'
  56 0f88 2920     	   .byte 0x29,' '
  57 0f8a 5A0D     	   .byte SC_ENTER,CRR 
  58 0f8c 6608     	   .byte SC_BKSP,BKSPP 
  59 0f8e 0D09     	   .byte SC_TAB,9
  60 0f90 761B     	   .byte SC_ESC,27
  61 0f92 119E     	   .byte SC_LALT,VK_LALT 
  62 0f94 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0f96 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f98 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f9a 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f9c 5800     	   .byte SC_CAPS,0
  67 0f9e 0580     	   .byte SC_F1,VK_F1
  68 0fa0 0681     	   .byte SC_F2,VK_F2
  69 0fa2 0482     	   .byte SC_F3,VK_F3
  70 0fa4 0C83     	   .byte SC_F4,VK_F4
  71 0fa6 0384     	   .byte SC_F5,VK_F5
  72 0fa8 0B85     	   .byte SC_F6,VK_F6
  73 0faa 8386     	   .byte SC_F7,VK_F7
  74 0fac 0A87     	   .byte SC_F8,VK_F8
  75 0fae 0188     	   .byte SC_F9,VK_F9
  76 0fb0 098A     	   .byte SC_F10,VK_F10
  77 0fb2 788B     	   .byte SC_F11,VK_F11
  78 0fb4 078C     	   .byte SC_F12,VK_F12
  79 0fb6 7030     	   .byte SC_KP0,'0'
  80 0fb8 6931     	   .byte SC_KP1,'1'
  81 0fba 7232     	   .byte SC_KP2,'2'
  82 0fbc 7A33     	   .byte SC_KP3,'3'
  83 0fbe 6B34     	   .byte SC_KP4,'4'
  84 0fc0 7335     	   .byte SC_KP5,'5'
  85 0fc2 7436     	   .byte SC_KP6,'6'
  86 0fc4 6C37     	   .byte SC_KP7,'7'
  87 0fc6 7538     	   .byte SC_KP8,'8'
  88 0fc8 7D39     	   .byte SC_KP9,'9'
  89 0fca 7C2A     	   .byte SC_KPMUL,'*'
  90 0fcc 4A2F     	   .byte SC_KPDIV,'/'
  91 0fce 792B     	   .byte SC_KPPLUS,'+'
  92 0fd0 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fd2 712E     	   .byte SC_KPDOT,'.'
  94 0fd4 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fd6 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fd8 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fda 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fdc 6141     	   .byte 'a','A'
 102 0fde 6242     	   .byte 'b','B'
 103 0fe0 6343     	   .byte 'c','C'
 104 0fe2 6444     	   .byte 'd','D'
 105 0fe4 6545     	   .byte 'e','E'
 106 0fe6 6646     	   .byte 'f','F'
ARM GAS  forth.s 			page 52


 107 0fe8 6747     	   .byte 'g','G'
 108 0fea 6848     	   .byte 'h','H'
 109 0fec 6949     	   .byte 'i','I'
 110 0fee 6A4A     	   .byte 'j','J'
 111 0ff0 6B4B     	   .byte 'k','K'
 112 0ff2 6C4C     	   .byte 'l','L'
 113 0ff4 6D4D     	   .byte 'm','M'
 114 0ff6 6E4E     	   .byte 'n','N'
 115 0ff8 6F4F     	   .byte 'o','O'
 116 0ffa 7050     	   .byte 'p','P'
 117 0ffc 7151     	   .byte 'q','Q'
 118 0ffe 7252     	   .byte 'r','R'
 119 1000 7353     	   .byte 's','S'
 120 1002 7454     	   .byte 't','T'
 121 1004 7555     	   .byte 'u','U'
 122 1006 7656     	   .byte 'v','V'
 123 1008 7757     	   .byte 'w','W'
 124 100a 7858     	   .byte 'x','X'
 125 100c 7959     	   .byte 'y','Y'
 126 100e 7A5A     	   .byte 'z','Z'
 127 1010 3121     	   .byte '1','!'
 128 1012 3240     	   .byte '2','@'
 129 1014 3323     	   .byte '3','#'
 130 1016 3424     	   .byte '4','$'
 131 1018 3525     	   .byte '5','%'
 132 101a 365E     	   .byte '6','^'
 133 101c 3726     	   .byte '7','&'
 134 101e 382A     	   .byte '8','*'
 135 1020 3928     	   .byte '9','('
 136 1022 3029     	   .byte '0',')'
 137 1024 2D5F     	   .byte '-','_'
 138 1026 3D2B     	   .byte '=','+'
 139 1028 607E     	   .byte '`','~'
 140 102a 2722     	   .byte '\'','"'
 141 102c 2C3C     	   .byte ',','<'
 142 102e 2E3E     	   .byte '.','>'
 143 1030 2F3F     	   .byte '/','?'
 144 1032 5C7C     	   .byte '\\','|'
 145 1034 3B3A     	   .byte ';',':'
 146 1036 5B7B     	   .byte '[','{'
 147 1038 5D7D     	   .byte ']','}'
 148 103a 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 103c 315C     	   .byte '1','\\'
 153 103e 3240     	   .byte '2','@'
 154 1040 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 1042 363F     	   .byte '6','?'
 158 1044 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 1046 397B     	   .byte '9','{'
 161 1048 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
ARM GAS  forth.s 			page 53


 164 104a 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 104c 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 104e 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1050 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 1052 11A3     	    .byte SC_RALT,VK_RALT
 172 1054 2F97     	    .byte SC_APPS,VK_APPS
 173 1056 758D     	    .byte SC_UP,VK_UP
 174 1058 728E     	    .byte SC_DOWN,VK_DOWN
 175 105a 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 105c 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 105e 7095     	    .byte SC_INSERT,VK_INSERT
 178 1060 6C91     	    .byte SC_HOME,VK_HOME
 179 1062 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1064 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1066 717F     	    .byte SC_DEL,VK_DELETE
 182 1068 6992     	    .byte SC_END,VK_END
 183 106a 4A2F     	    .byte SC_KPDIV,'/'
 184 106c 5A0D     	    .byte SC_KPENTER,'\r'
 185 106e 1200     	    .byte 0x12,0
 186 1070 7C00     	    .byte 0x7c,0
 187 1072 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1074 6303     	   .byte 'c', VK_CTRL_C 
 193 1076 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1078 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 107a 27A2     	   .byte SC_RGUI,VK_RGUI
 196 107c 11A3     	   .byte SC_RALT,VK_RALT
 197 107e 2F97     	   .byte SC_APPS,VK_APPS
 198 1080 7095     	   .byte SC_INSERT,VK_INSERT
 199 1082 6C91     	   .byte SC_HOME,VK_HOME
 200 1084 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1086 717F     	   .byte SC_DEL,VK_DELETE
 202 1088 6992     	   .byte SC_END,VK_END
 203 108a 7A94     	   .byte SC_PGDN,VK_PGDN
 204 108c 758D     	   .byte SC_UP,VK_UP
 205 108e 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1090 728E     	   .byte SC_DOWN,VK_DOWN
 207 1092 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1094 4A2F     	   .byte SC_KPDIV,'/'
 209 1096 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1098 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 109a 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 109c 119E     	   .byte SC_LALT,VK_LALT
 213 109e 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 10a0 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 10a2 761B     	   .byte SC_ESC,VK_ESC
 216 10a4 779A     	   .byte SC_NUM,VK_NLOCK
 217 10a6 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10a8 0000     	   .byte 0,0
 219              	
 220              	
ARM GAS  forth.s 			page 54


  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 10aa 00BF     	    _GBL_FUNC kbd_isr 
  79 10ac 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 10b4 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 10b8 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 10ba 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 10c2 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 10c6 10F0020F 	    tst r0,#KBD_TX 
  85 10ca 40F08480 	    bne send_bit  
  86 10ce 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 10d0 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 10d4 01F10102 	    add r2,r1,#1
  89 10d8 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 10dc 0029     	    cmp r1,#0
  91 10de 15D0     	    beq start_bit 
  92 10e0 0929     	    cmp r1,#9 
ARM GAS  forth.s 			page 55


  93 10e2 25D0     	    beq parity_bit 
  94 10e4 0A29     	    cmp r1,#10 
  95 10e6 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 10e8 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 10ec 4FEA5202 	    lsr r2,#1 
  99 10f0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 10f4 07D0     	    beq 1f 
 101 10f6 42F08002 	    orr r2,#(1<<7)
 102 10fa 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 10fe 00F10100 	    add r0,#1 
 104 1102 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 1106 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 110a 63E0     	    b 9f         
 107              	start_bit:
 108 110c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1110 60D1     	    bne 9f // not a start bit 
 110 1112 80EA0000 	    eor r0,r0 
 111 1116 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 111a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 111e 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1122 6FF00101 	    mvn r1,#1
 115 1126 00EA0100 	    and r0,r1 // clear error flag 
 116 112a 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 112e 51E0     	    b 9f 
 118              	parity_bit:
 119 1130 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1134 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1138 4CD0     	    beq 9f  
 122 113a 01F10101 	    add r1,#1 
 123 113e 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 1142 47E0     	    b 9f      
 125              	stop_bit:
 126 1144 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1148 40D0     	    beq 8f // error stop bit expected 
 128 114a 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 114e 11F0010F 	    tst r1,#1 
 130 1152 3BD0     	    beq 8f // error parity
 131 1154 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 1158 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 115c E028     	    cmp r0,#XT_KEY
 134 115e 04D1     	    bne 1f
 135 1160 41F04001 	    orr r1,#KBD_F_XT
 136 1164 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1168 30E0     	    b 8f  
 138 116a 11F0800F 	1:  tst r1,#KBD_F_REL
 139 116e 14D0     	    beq store_code
 140 1170 5828     	    cmp r0,#SC_CAPS
 141 1172 04D1     	    bne 1f
 142 1174 81F00401 	    eor r1,#KBD_F_CAPS
 143 1178 41F00101 	    orr r1,#KBD_F_CTGL 
 144 117c 06E0     	    b 2f 
 145 117e 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 1188 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 118c 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
ARM GAS  forth.s 			page 56


 148 1190 01EA0201 	    and r1,r2
 149 1194 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 1198 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 119a F028     	    cmp r0,#KEY_REL
 154 119c 04D1     	    bne 1f
 155              	// set release flags 
 156 119e 41F08001 	    orr r1,#KBD_F_REL 
 157 11a2 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 11a6 11E0     	    b 8f     
 159 11a8 0146     	1:  mov r1,r0 
 160 11aa 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 11b4 0AD1     	    bne 8f // was async key 
 162 11b6 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 11ba 04F17802 	    add r2,UP,#KBD_QUEUE
 164 11be 1154     	    strb r1,[r2,r0]
 165 11c0 00F10100 	    add r0,#1
 166 11c4 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 11c8 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 11cc 80EA0000 	8:  eor r0,r0 
 169 11d0 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 11d4 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 11d6 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 11da 01F10100 	    add r0,r1,#1
 182 11de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 11e2 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 11e6 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 11ea 0829     	1:  cmp r1,#8 
 187 11ec 15D0     	    beq send_parity 
 188 11ee 0929     	    cmp r1,#9 
 189 11f0 1CD0     	    beq send_stop
 190 11f2 0A29     	    cmp r1,#10
 191 11f4 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 11f6 10F0010F 	    tst r0,#1
 194 11fa 4FEA5000 	    lsr r0,#1
 195 11fe 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 1202 02D1     	    bne 1f 
 197 1204 4FEA0242 	    lsl r2,#16
 198 1208 05E0     	    b 2f  
 199 120a 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 120e 00F10100 	    add r0,#1 
 201 1212 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 1216 9A61     	2:  str r2,[R3,#GPIO_BSRR]
ARM GAS  forth.s 			page 57


 203 1218 1CE0     	    b 9f 
 204              	send_parity:
 205 121a 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 121e 10F0010F 	    tst r0,#1
 207 1222 01D0     	    beq 1f 
 208 1224 4FEA0242 	    lsl r2,#16
 209 1228 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 122a 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 122c 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 122e 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1232 1960     	    str r1,[r3,#GPIO_MODER]
 217 1234 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 1236 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 123a 6FF00201 	    mvn r1,#KBD_TX 
 221 123e 00EA0100 	    and r0,r1 
 222 1242 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 1244 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1248 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 124c 80EA0000 	    eor r0,r0 
 226 1250 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1254 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 1256 02B4     	    push {r1}
 238 1258 DFF86414 	    ldr r1,=async_keys
 239 125c 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 1266 02BC     	    pop {r1}
 241 1268 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 126a 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1274 FF28     	    cmp r0,#255
ARM GAS  forth.s 			page 58


 256 1276 01D1     	    bne set_async_key 
 257 1278 0020     	    movs r0,#0 
 258 127a 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 127c 06B4     	    push {r1,r2}
 262 127e 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1282 DFF84014 	    ldr r1,=async_jump 
 264 1286 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 128a 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 128e 04E0     	    b set_reset
 268              	ctrl_key:
 269 1290 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1294 01E0     	    b set_reset 
 271              	alt_key:
 272 1296 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 129a 12F0800F 	    tst r2,#KBD_F_REL 
 275 129e 04D0     	    beq 1f 
 276 12a0 6FEA0000 	    mvn r0,r0
 277 12a4 02EA0002 	    and r2,r0
 278 12a8 01E0     	    b 2f
 279 12aa 42EA0002 	1:  orr r2,r0 
 280 12ae 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 12b2 5FF0FF30 	    movs r0,#-1
 282 12b6 06BC     	9:  pop {r1,r2}
 283 12b8 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 12ba 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 12bc 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 12be 1401     	    .byte SC_LCTRL,1  // left control 
 290 12c0 1401     	    .byte SC_RCTRL,1  // right control 
 291 12c2 1102     	    .byte SC_LALT,2  // left alt 
 292 12c4 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 12c6 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 12c8 00       	    .byte 0 // shift  key 
 297 12c9 03       	    .byte (ctrl_key-shift_key)/2
 298 12ca 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 12cb 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 12cc 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 12d4 1846     	    mov r0,r3 
 311 12d6 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
ARM GAS  forth.s 			page 59


 312 12da 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 12de 00B5FFF7 	    _CALL gpio_config
 313      27F85DF8 
 313      04EB
 314 12e8 1846     	    mov r0,r3 
 315 12ea 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 12ee 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 12f2 00B5FFF7 	    _CALL gpio_config
 317      1DF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 12fc 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1304 4FF40050 	    mov r0,#(2<<12)
 321 1308 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 130a 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 1312 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 1316 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1318 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 131a 80EA0000 	   eor r0,r0 
 328 131e C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 1322 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 1326 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 132a 4FF00101 	   mov r1,#1 
 333 132e 00B5FEF7 	   _CALL nvic_set_priority
 333      BAFF5DF8 
 333      04EB
 334 1338 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 133c 00B5FEF7 	   _CALL nvic_enable_irq 
 335      CCFF5DF8 
 335      04EB
 336 1346 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1348 E40E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1358 47F8046D 	    _PUSH 
 342 135c 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 1360 06F0FC06 	    and TOS,#0xFC  
 344 1364 01F088B8 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1368 0EB4     	    push {T1,T2,T3}
 352 136a 80EA0000 	    eor T0,T0  
 353 136e 04F17803 	    add T3,UP,#KBD_QUEUE
 354 1372 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 1376 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
ARM GAS  forth.s 			page 60


 356 137a 9142     	    cmp T1,T2 
 357 137c 06D0     	    beq 2f  
 358 137e 585C     	    ldrb T0,[T3,T1]
 359 1380 01F10101 	    add T1,#1 
 360 1384 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1388 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 138c 0EBC     	2:  pop {T1,T2,T3}
 363 138e 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1390 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 139a 0000     	    movs T0,T0
 368 139c F8D0     	    beq wait_code  
 369 139e 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 13a0 04B4     	    push {T2}
 380 13a2 11F8012B 	1:  ldrb T2,[T1],#1
 381 13a6 22B1     	    cbz T2,2f 
 382 13a8 8242     	    cmp T2,T0
 383 13aa 02D0     	    beq 2f 
 384 13ac 01F10101 	    add T1,#1 
 385 13b0 F7E7     	    b 1b 
 386 13b2 0878     	2:  ldrb T0,[T1]
 387 13b4 0000     	    movs T0,T0 // set/reset zero flag 
 388 13b6 04BC     	9:  pop {T2}
 389 13b8 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 13ba 4C130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 13c8 47F8046D 	    _PUSH 
 398 13cc 86EA0606 	    eor TOS,TOS 
 399 13d0 BD49     	    ldr T1,=sc_ascii // translation table
 400 13d2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 13d6 4FF04002 	    mov T2,#KBD_F_XT 
 402 13da 1042     	    tst T0,T2
 403 13dc 00D0     	    beq 1f
 404 13de BB49     	    ldr T1,=extended // extended code translation
 405 13e0 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
ARM GAS  forth.s 			page 61


 406 13ea 98B1     	    cbz T0,inkey_exit
 407 13ec E128     	    cmp T0,#XT2_KEY // pause 
 408 13ee 13D0     	    beq pause_key
 409 13f0 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 13fa 0646     	    mov TOS,T0
 411 13fc 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1406 032E     	    cmp TOS,#VK_CTRL_C 
 413 1408 3EF464AE 	    beq user_reboot 
 414 140c 47F8046D 	    _PUSH 
 415 1410 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1414 01F030B8 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1418 4FF00701 	    mov T1,#7 
 420 141c 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1426 0139     	    subs T1,#1
 422 1428 F8D1     	    bne 1b 
 423 142a 01F025B8 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 142e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1432 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1436 06D1     	    bne shift_down 
 431 1438 10F0200F 	    tst T0,#KBD_F_ALT  
 432 143c 06D1     	    bne altchar_down 
 433 143e 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1442 06D1     	    bne ctrl_down 
 435 1444 0DE0     	    b 9f 
 436              	shift_down:
 437 1446 3046     	    mov T0,TOS 
 438 1448 A149     	    ldr T1,=shifted 
 439 144a 04E0     	    b 8f 
 440              	altchar_down:
 441 144c 3046     	    mov T0,TOS 
 442 144e A149     	    ldr T1,=altchar
 443 1450 01E0     	    b 8f
 444              	ctrl_down:
 445 1452 3046     	    mov T0,TOS 
 446 1454 A049     	    ldr T1,=controls 
 447 1456 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1460 0646     	    mov TOS,T0
 449 1462 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 146c 7047     	    _RET 
 451              	
 452              	do_capslock:
ARM GAS  forth.s 			page 62


 453 146e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1472 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1476 0BD0     	    beq 9f 
 456 1478 412E     	    cmp TOS,#'A'
 457 147a 09D4     	    bmi 9f 
 458 147c 5B2E     	    cmp TOS,#'Z'+1 
 459 147e 03D4     	    bmi 3f 
 460 1480 612E     	    cmp TOS,#'a'
 461 1482 05D4     	    bmi 9f 
 462 1484 7B2E     	    cmp TOS,#'z'+1
 463 1486 03D5     	    bpl 9f 
 464 1488 4FF02000 	3:  mov T0,#(1<<5)
 465 148c 86EA0006 	    eor TOS,T0 
 466 1490 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1492 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1494 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 1496 0128     	    cmp r0,ST_PREVID 
 484 1498 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 149a 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 149e 00B5FEF7 	    _CALL nvic_disable_irq
 487      30FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 14a8 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 14b0 1846     	    mov r0,r3 
 491 14b2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 14b6 4FF01102 	    mov r2,#OUTPUT_OD
 493 14ba 00B5FEF7 	    _CALL gpio_config 
 493      39FF5DF8 
 493      04EB
 494 14c4 1846     	    mov r0,r3 
 495 14c6 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 14ca 82EA0202 	    eor r2,r2 
 497 14ce 00B5FEF7 	    _CALL gpio_out 
 497      85FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 14d8 4FF4E150 	    mov r0,#150*48
 500 14dc 0138     	1:  subs r0,#1 
 501 14de FDD1     	    bne 1b
 502 14e0 01BC     	    pop {r0}
ARM GAS  forth.s 			page 63


 503 14e2 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 14e6 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 14ea 40F00200 	    orr r0,#KBD_TX 
 506 14ee 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 14f2 80EA0000 	    eor r0,r0 
 508 14f6 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 14fa 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 14fe 1846     	    mov r0,r3 
 513 1500 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1504 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1508 00B5FEF7 	    _CALL gpio_config 
 515      12FF5DF8 
 515      04EB
 516 1512 1846     	    mov r0,r3 
 517 1514 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1518 82EA0202 	    eor r2,r2 
 519 151c 00B5FEF7 	    _CALL gpio_out
 519      5EFF5DF8 
 519      04EB
 520              	// release clock line 
 521 1526 1846     	    mov r0,r3 
 522 1528 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 152c 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1530 00B5FEF7 	    _CALL gpio_config
 524      FEFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 153a 4FF00A00 	    mov r0,#10
 528 153e E060     	    str r0,[UP,#CD_TIMER]
 529 1540 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1542 20B1     	    cbz r0, 4f 
 531 1544 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1548 10F0020F 	    tst r0,#KBD_TX
 533 154c F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 154e 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1552 00B5FEF7 	    _CALL nvic_enable_irq
 536      C1FE5DF8 
 536      04EB
 537 155c 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1560 20F00201 	    bic r1,r0,#KBD_TX
 539 1564 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 1568 00F00200 	    and r0,#KBD_TX
 541 156c 48B1     	    cbz r0, 5f
 542 156e 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1570 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1574 1960     	    str r1,[r3,#GPIO_MODER]
 545 1576 80EA0000 	    eor r0,r0 
 546 157a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 157e 6FEA0000 	    mvn r0,r0   
 548 1582 0EBC     	5:  pop {r1,r2,r3}
 549 1584 7047     	    _RET 
 550              	
 551              	 
ARM GAS  forth.s 			page 64


 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1586 80EA0000 	    eor T0,T0 
 555 158a C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 158e C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 1592 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1596 6FF00301 	    mvn T1,#3
 559 159a 00EA0100 	    and T0,T1 
 560 159e 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 15a2 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 15a4 BE130000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 15b0 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 15b4 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 15be B8B9     	    cbnz T0,3f // keyboard not dectected
 571 15c0 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 15ca 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 15d4 FE28     	    cmp r0,KBD_CMD_RESEND
 574 15d6 EBD0     	    beq 1b 
 575 15d8 4FF4FA70 	    mov T0,#500 
 576 15dc E060     	    str T0,[UP,#CD_TIMER]
 577 15de 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 15e8 10B9     	    cbnz T0,3f
 579 15ea E068     	    ldr T0,[UP,#CD_TIMER]
 580 15ec 0028     	    cmp T0,#0 
 581 15ee F6D1     	    bne 2b 
 582 15f0 47F8046D 	3:  _PUSH 
 583 15f4 0646     	    mov TOS,T0  
 584 15f6 00F03FBF 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 15fa A8150000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1608 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1612 4FF0ED00 	     mov T0,#KBD_CMD_LED 
ARM GAS  forth.s 			page 65


 594 1616 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1620 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 162a FE28     	    cmp T0,#KBD_CMD_RESEND
 597 162c ECD0     	    beq 1b
 598 162e FA28     	    cmp T0,#KBD_ACK  
 599 1630 F6D1     	    bne 2b 
 600 1632 3046     	2:  mov T0,TOS 
 601 1634 00F00700 	    and T0,#7 
 602 1638 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1642 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 164c FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 164e F0D0     	    beq 2b
 606 1650 FA28     	    cmp T0,#KBD_ACK 
 607 1652 F6D1     	    bne 3b  
 608 1654 57F8046B 	    _POP 
 609 1658 00F00EBF 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 165c FE150000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 166c 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1670 10F0010F 	    tst T0,#1
 619 1674 01D1     	    bne 1f 
 620 1676 00F0FFBE 	    _NEXT 
 621 167a 47F8046D 	1: _PUSH 
 622 167e 6FF00101 	    mvn T1,#1 
 623 1682 00EA0100 	    and T0,T1 
 624 1686 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 168a 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 168e 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1696 60160000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 16a4 504700BF 	    _NEST
 635 16a8 6D160000 	1:  _ADR CAPS_LED  
ARM GAS  forth.s 			page 66


 636 16ac C9130000 	    _ADR PS2_QKEY 
 637 16b0 FD280000 	    _ADR QDUP 
 638 16b4 37260000 	    _QBRAN 1b  
 638      A8160000 
 639 16bc 7F240000 	    _UNNEST 
 640 16c0 BA120000 	
 640      C8120000 
 640      280F0000 
 640      4C100000 
 640      DC0F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 16e0 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 16e8 0346     	    mov r3,r0 
  44 16ea 4FF00401 	    mov r1,#PIN_F_SC 
  45 16ee 4FF00102 	    mov r2,#OUTPUT_PP
  46 16f2 00B5FEF7 	    _CALL gpio_config 
ARM GAS  forth.s 			page 67


  46      1DFE5DF8 
  46      04EB
  47 16fc 1846     	    mov r0,r3 
  48 16fe 4FF00401 	    mov r1,#PIN_F_SC  
  49 1702 4FF00102 	    MOV r2,#1
  50 1706 00B5FEF7 	    _CALL gpio_out 
  50      69FE5DF8 
  50      04EB
  51 1710 1846     	    mov r0,r3 
  52 1712 4FF00501 	    mov r1,#PIN_SCK  
  53 1716 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 171a 00B5FEF7 	    _CALL gpio_config 
  54      09FE5DF8 
  54      04EB
  55 1724 1846     	    mov r0,r3 
  56 1726 4FF00701 	    mov r1,#PIN_MOSI 
  57 172a 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 172e 00B5FEF7 	    _CALL gpio_config 
  58      FFFD5DF8 
  58      04EB
  59 1738 1846     	    mov r0,r3
  60 173a 4FF00601 	    mov r1,#PIN_MISO
  61 173e 4FF00202 	    mov r2,#INPUT_AFO  
  62 1742 00B5FEF7 	    _CALL gpio_config
  62      F5FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 174c 4CF6AA40 	    mov r0,#0xCCAA
  65 1750 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1752 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 175a 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 175c 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1760 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1762 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 176a 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 176e 0180     	    strh r1,[r0,#SPI_CR1]
  73 1770 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1772 80EA0000 	    eor r0,r0 
  75 1776 C5F25050 	    movt r0,#0x5550 
  76 177a 40EA0100 	    orr r0,r1 
  77 177e 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1780 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1782 9A160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1790 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1798 4FF00401 	    mov r1,#PIN_F_SC 
ARM GAS  forth.s 			page 68


  88 179c 4FF00002 	    mov r2,#0 
  89 17a0 00B5FEF7 	    _CALL gpio_out 
  89      1CFE5DF8 
  89      04EB
  90 17aa 00F065BE 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 17ae 86170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 17bc 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 17c4 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 17c6 11F0800F 	    tst T1,(1<<7) // BSY 
 101 17ca FBD1     	    bne 1b 
 102 17cc 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 17d4 4FF00401 	    mov r1,#PIN_F_SC 
 104 17d8 4FF00102 	    mov r2,#1 
 105 17dc 00B5FEF7 	    _CALL gpio_out 
 105      FEFD5DF8 
 105      04EB
 106 17e6 00F047BE 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 17ea B2170000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 17f8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1800 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1802 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1806 FBD0     	    beq 0b 
 118 1808 6FF00001 	    mvn T1,#0 
 119 180c 0173     	    strb T1,[T0,#SPI_DR]
 120 180e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1810 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1814 FBD0     	    beq 1b     
 123              	2:  
 124 1816 47F8046D 	    _PUSH 
 125 181a 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 181c 00F02CBE 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
ARM GAS  forth.s 			page 69


 132              	*************************/
 133 1820 EE170000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 182c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1834 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1836 11F0020F 	    tst T1,#(1<<1) //TXE
 137 183a FBD0     	    beq 0b 
 138 183c 0673     	    strb TOS,[T0,#SPI_DR]
 139 183e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1840 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1844 FBD0     	    beq 1b 
 142 1846 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1848 57F8046B 	    _POP 
 144 184c 00F014BE 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1850 24180000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 185c 504700BF 	    _NEST 
 153 1860 91170000 	    _ADR CHIP_SEL 
 154 1864 F7250000 	    _DOLIT 4
 154      04000000 
 155 186c 2D180000 	    _ADR WR_BYTE
 156 1870 BD170000 	    _ADR CHIP_DSEL
 157 1874 7F240000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1878 54180000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1884 504700BF 	    _NEST 
 165 1888 91170000 	    _ADR CHIP_SEL 
 166 188c F7250000 	    _DOLIT 6 
 166      06000000 
 167 1894 2D180000 	    _ADR WR_BYTE 
 168 1898 BD170000 	    _ADR CHIP_DSEL 
 169 189c 7F240000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 18a0 7C180000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 18ac 504700BF 	    _NEST
 177 18b0 91170000 	    _ADR CHIP_SEL  
ARM GAS  forth.s 			page 70


 178 18b4 F7250000 	    _DOLIT sr_cmd 
 178      D4180000 
 179 18bc ED270000 	    _ADR PLUS 
 180 18c0 9D260000 	    _ADR CAT
 181 18c4 2D180000 	    _ADR WR_BYTE
 182 18c8 F9170000 	    _ADR RD_BYTE
 183 18cc BD170000 	    _ADR CHIP_DSEL  
 184 18d0 7F240000 	    _UNNEST 
 185 18d4 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 18d7 A4180000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 18e4 504700BF 	    _NEST 
 193 18e8 29270000 	    _ADR DUPP 
 194 18ec F7250000 	    _DOLIT 16
 194      10000000 
 195 18f4 C5270000 	    _ADR RSHIFT 
 196 18f8 2D180000 	    _ADR WR_BYTE 
 197 18fc 29270000 	    _ADR DUPP
 198 1900 F7250000 	    _DOLIT 8 
 198      08000000 
 199 1908 C5270000 	    _ADR RSHIFT 
 200 190c 2D180000 	    _ADR WR_BYTE 
 201 1910 2D180000 	    _ADR WR_BYTE 
 202 1914 7F240000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1918 DB180000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1928 504700BF 	    _NEST 
 210 192c F7250000 	1:  _DOLIT 0 
 210      00000000 
 211 1934 AD180000 	    _ADR RD_SR 
 212 1938 F7250000 	    _DOLIT 3 
 212      03000000 
 213 1940 6D270000 	    _ADR ANDD 
 214 1944 37260000 	    _QBRAN 2f
 214      54190000 
 215 194c 4B260000 	    _BRAN 1b
 215      2C190000 
 216 1954 7F240000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
ARM GAS  forth.s 			page 71


 222              	***************************/
 223 1958 1C190000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1968 504700BF 	    _NEST 
 225 196c 85180000 	    _ADR WR_ENBL
 226 1970 91170000 	    _ADR CHIP_SEL 
 227 1974 F7250000 	    _DOLIT 0x20 
 227      20000000 
 228 197c 2D180000 	    _ADR WR_BYTE 
 229 1980 E5180000 	    _ADR SEND_ADR
 230 1984 BD170000 	    _ADR CHIP_DSEL 
 231 1988 29190000 	    _ADR WAIT_DONE 
 232 198c 7F240000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1990 5C190000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 19a0 504700BF 	    _NEST 
 240 19a4 85180000 	    _ADR WR_ENBL 
 241 19a8 91170000 	    _ADR CHIP_SEL
 242 19ac F7250000 	    _DOLIT 0x60
 242      60000000 
 243 19b4 F7250000 	    _DOLIT 0xC7 
 243      C7000000 
 244 19bc 2D180000 	    _ADR WR_BYTE 
 245 19c0 2D180000 	    _ADR WR_BYTE 
 246 19c4 BD170000 	    _ADR CHIP_DSEL 
 247 19c8 29190000 	    _ADR WAIT_DONE
 248 19cc 7F240000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 19d0 94190000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 19dc 504700BF 	    _NEST
 258 19e0 91170000 	    _ADR CHIP_SEL 
 259 19e4 F7250000 	    _DOLIT 3 
 259      03000000 
 260 19ec 2D180000 	    _ADR WR_BYTE 
 261 19f0 E5180000 	    _ADR SEND_ADR
 262 19f4 D1260000 	    _ADR TOR   
 263 19f8 4B260000 	    _BRAN 2f
 263      101A0000 
 264 1a00 F9170000 	1:  _ADR RD_BYTE
 265 1a04 4D270000 	    _ADR OVER 
ARM GAS  forth.s 			page 72


 266 1a08 89260000 	    _ADR CSTOR
 267 1a0c 49280000 	    _ADR ONEP 
 268 1a10 19260000 	2:  _DONXT 1b
 268      001A0000 
 269 1a18 19270000 	    _ADR DROP 
 270 1a1c BD170000 	    _ADR CHIP_DSEL 
 271 1a20 7F240000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1a24 D4190000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1a30 504700BF 	    _NEST 
 280 1a34 85180000 	    _ADR WR_ENBL
 281 1a38 91170000 	    _ADR CHIP_SEL
 282 1a3c F7250000 	    _DOLIT 2 
 282      02000000 
 283 1a44 2D180000 	    _ADR WR_BYTE 
 284 1a48 E5180000 	    _ADR SEND_ADR
 285 1a4c D1260000 	    _ADR TOR
 286 1a50 4B260000 	    _BRAN 2f 
 286      701A0000 
 287 1a58 29270000 	1:  _ADR DUPP 
 288 1a5c 9D260000 	    _ADR CAT 
 289 1a60 29270000 	    _ADR DUPP 
 290 1a64 E5370000 	    _ADR HDOT
 291 1a68 2D180000 	    _ADR WR_BYTE 
 292 1a6c 49280000 	    _ADR ONEP
 293 1a70 19260000 	2:  _DONXT 1b 
 293      581A0000 
 294 1a78 19270000 	    _ADR DROP
 295 1a7c BD170000 	    _ADR CHIP_DSEL
 296 1a80 29190000 	    _ADR WAIT_DONE 
 297 1a84 7F240000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1a88 281A0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
ARM GAS  forth.s 			page 73


 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1a98 504700BF 	    _NEST 
 318              	    
 319 1a9c 7F240000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1aa0 8C1A0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1ab0 504700BF 	    _NEST 
 327              	
 328 1ab4 7F240000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1ab8 A41A0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1ac0 504700BF 	    _NEST 
 336              	
 337 1ac4 7F240000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1ac8 BC1A0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1ad4 504700BF 	    _NEST 
 345              	
 346 1ad8 7F240000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1adc CC1A0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1ae8 504700BF 	    _NEST 
 354              	
 355 1aec 7F240000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
ARM GAS  forth.s 			page 74


   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*==========================================================
  21              	    THE 'FLOATING POINT ARITHMETIC' ROUTINES
  22              	==========================================================*/
  23              	
  24              	/******************************************************
  25              	    Parsing float32 to IEEE-754 format is quite Complex
  26              	    so I rather adapted  Forth dimensions Volume IV, #1
  27              	    library proposed by Michael Jesch 
  28              	    REF: docs/FD-V04N1.pdf ,  page 23
  29              	
  30              	Format:
  31              	    bit 23:0  6 digits signed mantissa
  32              	    bit 31:24 signed exponent 
  33              	
  34              	*******************************************************/    
  35              	
  36              	    MANTISSA_MASK = 0xffffff // biggest mantissa 
  37              	    MANTISSA_SIGN = 0x800000 
  38              	    MANTISSA_MAX = 0x7fffff 
  39              	
  40              	/*******************************
  41              	    FPSW  variable  ( -- a )
  42              	    floating point state flags 
  43              	    bit 0  zero flag 
  44              	    bit 1  negative flag 
  45              	    bit 2  overflow error 
  46              	*******************************/
  47 1af0 E01A0000 	    _HEADER FPSW,4,"FPSW"
  47      04465053 
  47      570000BF 
  48 1afc 47F8046D 	    _PUSH 
  49 1b00 04F1A006 	    add TOS,UP,#VFPSW
  50 1b04 00F0B8BC 	    _NEXT  
  51              	
  52              	/*******************************
  53              	    FBASE variable ( -- a )
  54              	    floating point numerical base
  55              	**********************************/
  56 1b08 F41A0000 	    _HEADER FBASE,5,"FBASE"
  56      05464241 
  56      534500BF 
  57 1b14 47F8046D 	    _PUSH  
ARM GAS  forth.s 			page 75


  58 1b18 04F1A406 	    add TOS,UP,#VFBASE 
  59 1b1c 00F0ACBC 	    _NEXT  
  60              	
  61              	/*****************************
  62              	    FRESET ( -- )
  63              	    reset state 
  64              	******************************/
  65 1b20 0C1B0000 	    _HEADER FRESET,6,"FRESET"
  65      06465245 
  65      53455400 
  66 1b2c 80EA0000 	    eor T0,T0 
  67 1b30 C4F8A000 	    str T0,[UP,#VFPSW]
  68 1b34 00F0A0BC 	    _NEXT 
  69              	
  70              	/******************************
  71              	    FINIT ( -- )
  72              	    initialise floating point 
  73              	******************************/
  74 1b38 241B0000 	    _HEADER FINIT,5,"FINIT"
  74      0546494E 
  74      495400BF 
  75 1b44 504700BF 	    _NEST 
  76 1b48 2D1B0000 	    _ADR FRESET 
  77 1b4c 152C0000 	    _ADR BASE 
  78 1b50 7D260000 	    _ADR AT 
  79 1b54 151B0000 	    _ADR FBASE 
  80 1b58 69260000 	    _ADR STORE 
  81 1b5c 7F240000 	    _UNNEST 
  82              	
  83              	
  84              	/*******************************
  85              	    FER ( -- n )
  86              	    return FPSW value 
  87              	********************************/
  88 1b60 3C1B0000 	    _HEADER FER,3,"FER"
  88      03464552 
  89 1b68 47F8046D 	    _PUSH 
  90 1b6c D4F8A060 	    ldr TOS,[UP,#VFPSW]
  91 1b70 00F082BC 	    _NEXT 
  92              	
  93              	/*******************************
  94              	    FZE ( -- flag )
  95              	    return zero flag 
  96              	*******************************/
  97 1b74 641B0000 	    _HEADER FZE,3,"FZE"
  97      03465A45 
  98 1b7c 47F8046D 	    _PUSH 
  99 1b80 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 100 1b84 06F00106 	    and TOS,#1
 101 1b88 00F076BC 	    _NEXT 
 102              	
 103              	/*********************************
 104              	    FNE ( -- flag )
 105              	    return negative flag 
 106              	**********************************/
 107 1b8c 781B0000 	    _HEADER FNE,3,"FNE"
 107      03464E45 
ARM GAS  forth.s 			page 76


 108 1b94 47F8046D 	    _PUSH 
 109 1b98 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 110 1b9c 06F00206 	    and TOS,#2 
 111 1ba0 00F06ABC 	    _NEXT     
 112              	
 113              	/**********************************
 114              	    FOV ( -- flag )
 115              	    return overflow flag 
 116              	***********************************/
 117 1ba4 901B0000 	    _HEADER FOV,3,"FOV"
 117      03464F56 
 118 1bac 47F8046D 	    _PUSH 
 119 1bb0 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 120 1bb4 06F00406 	    and TOS,#4 
 121 1bb8 00F05EBC 	    _NEXT 
 122              	
 123              	/************************************
 124              	    SFZ ( F# -- f# ; z )
 125              	    set zero flag 
 126              	*************************************/
 127 1bbc A81B0000 	    _HEADER SFZ,3,"SFZ"
 127      0353465A 
 128 1bc4 D4F8A000 	    ldr T0,[UP,#VFPSW]
 129 1bc8 20F00100 	    and T0,#-2
 130 1bcc 26F07F41 	    and T1,TOS,#MANTISSA_MASK 
 131 1bd0 09B1     	    cbz T1, 1f 
 132 1bd2 40F00100 	    orr T0,#1 
 133 1bd6 C4F8A000 	1:  str T0,[UP,#VFPSW]
 134 1bda 00F04DBC 	    _NEXT 
 135              	
 136              	/************************************
 137              	    SFN ( f# -- f# ; neg )
 138              	    set negative flag 
 139              	*************************************/
 140 1bde C01B0000 	    _HEADER SFN,3,"SFN"
 140      0353464E 
 140      00BF
 141 1be8 D4F8A000 	    ldr T0,[UP,#VFPSW]
 142 1bec 20F00200 	    and T0,#-3
 143 1bf0 06F40001 	    and T1,TOS,#(1<<23)
 144 1bf4 4FEA9151 	    lsr T1,#22
 145 1bf8 40EA0100 	    orr T0,T1
 146 1bfc C4F8A000 	    str T0,[UP,#VFPSW]
 147 1c00 00F03ABC 	    _NEXT 
 148              	
 149              	
 150              	/************************
 151              	    SFV (  -- )
 152              	    set overflow flag 
 153              	************************/
 154 1c04 E21B0000 	    _HEADER SFV,3,"SFV"
 154      03534656 
 155 1c0c D4F8A000 	    ldr T0,[UP,#VFPSW]
 156 1c10 40F00400 	    orr T0,#4 
 157 1c14 C4F8A000 	    str T0,[UP,#VFPSW]
 158 1c18 00F02EBC 	    _NEXT 
 159              	
ARM GAS  forth.s 			page 77


 160              	/*************************************
 161              	    @EXPONENT ( f# -- m e ; z n )    
 162              	    split exponent and mantissa 
 163              	    update FPSW flags 
 164              	*************************************/
 165 1c1c 081C0000 	    _HEADER AT_EXPONENT,9,"@EXPONENT"
 165      09404558 
 165      504F4E45 
 165      4E5400BF 
 166 1c2c 504700BF 	    _NEST 
 167 1c30 2D1B0000 	    _ADR FRESET 
 168 1c34 C51B0000 	    _ADR SFZ 
 169 1c38 E91B0000 	    _ADR SFN 
 170 1c3c 29270000 	    _ADR DUPP 
 171 1c40 951B0000 	    _ADR FNE 
 172 1c44 37260000 	    _QBRAN 1f 
 172      601C0000 
 173 1c4c F7250000 	    _DOLIT 0xFF000000 
 173      000000FF 
 174 1c54 81270000 	    _ADR ORR  
 175 1c58 4B260000 	    _BRAN 2f 
 175      6C1C0000 
 176 1c60 F7250000 	1:  _DOLIT MANTISSA_MASK 
 176      FFFFFF00 
 177 1c68 6D270000 	    _ADR ANDD 
 178 1c6c 39270000 	2:  _ADR SWAP 
 179 1c70 F7250000 	    _DOLIT 24 
 179      18000000 
 180 1c78 C5270000 	    _ADR RSHIFT 
 181 1c7c 7F240000 	    _UNNEST 
 182              	
 183              	/*************************************
 184              	    !EXPONENT ( m e -- f# ; z n )
 185              	    format float from mantissa and
 186              	    exponent. Set flags 
 187              	**************************************/
 188 1c80 201C0000 	    _HEADER STOR_EXPONENT,9,"!EXPONENT"
 188      09214558 
 188      504F4E45 
 188      4E5400BF 
 189 1c90 504700BF 	    _NEST
 190              	// exponent overflow?    
 191 1c94 29270000 	    _ADR DUPP 
 192 1c98 1D2A0000 	    _ADR ABSS 
 193 1c9c F7250000 	    _DOLIT 255 
 193      FF000000 
 194 1ca4 F52A0000 	    _ADR GREAT 
 195 1ca8 37260000 	    _QBRAN 1f 
 195      B41C0000 
 196 1cb0 0D1C0000 	    _ADR SFV 
 197              	// mantissa overflow?     
 198 1cb4 4D270000 	1:  _ADR OVER 
 199 1cb8 1D2A0000 	    _ADR ABSS 
 200 1cbc F7250000 	    _DOLIT 0x7ffffff 
 200      FFFFFF07 
 201 1cc4 F52A0000 	    _ADR GREAT 
 202 1cc8 37260000 	    _QBRAN 2f
ARM GAS  forth.s 			page 78


 202      D41C0000 
 203 1cd0 0D1C0000 	    _ADR SFV 
 204 1cd4 F7250000 	2:  _DOLIT 24 
 204      18000000 
 205 1cdc DD270000 	    _ADR LSHIFT 
 206 1ce0 39270000 	    _ADR SWAP 
 207 1ce4 F7250000 	    _DOLIT MANTISSA_MASK
 207      FFFFFF00 
 208 1cec 6D270000 	    _ADR ANDD  
 209 1cf0 81270000 	    _ADR ORR 
 210 1cf4 E91B0000 	    _ADR SFN 
 211 1cf8 C51B0000 	    _ADR SFZ 
 212 1cfc 7F240000 	    _UNNEST 
 213              	    
 214              	/******************************
 215              	    E. ( f# -- )
 216              	    print float in scientific 
 217              	    notation.
 218              	*******************************/
 219 1d00 841C0000 	    _HEADER EDOT,2,"E."
 219      02452E00 
 220 1d08 504700BF 	    _NEST 
 221 1d0c D1350000 	    _ADR SPACE 
 222 1d10 29270000 	    _ADR DUPP
 223 1d14 F7250000 	    _DOLIT MANTISSA_MASK 
 223      FFFFFF00 
 224 1d1c 6D270000 	    _ADR ANDD  
 225 1d20 612A0000 	    _ADR ZEQUAL 
 226 1d24 37260000 	    _QBRAN 1f 
 226      401D0000 
 227 1d2c 19270000 	    _ADR DROP 
 228 1d30 C1360000 	    _DOTQP 3,"0.0"
 228      03302E30 
 229 1d38 4B260000 	    _BRAN 9f
 229      201E0000 
 230 1d40 152C0000 	1:  _ADR BASE 
 231 1d44 7D260000 	    _ADR AT 
 232 1d48 D1260000 	    _ADR TOR 
 233 1d4c 151B0000 	    _ADR FBASE 
 234 1d50 7D260000 	    _ADR AT 
 235 1d54 152C0000 	    _ADR BASE 
 236 1d58 69260000 	    _ADR STORE
 237 1d5c 2D1C0000 	    _ADR AT_EXPONENT
 238 1d60 39270000 	    _ADR SWAP 
 239 1d64 1D2A0000 	    _ADR ABSS 
 240 1d68 112E0000 	2:  _ADR STOD 
 241 1d6c 4D320000 	    _ADR BDIGS
 242 1d70 99320000 	3:  _ADR DIG 
 243 1d74 11290000 	    _ADR ROT 
 244 1d78 49280000 	    _ADR ONEP 
 245 1d7c 25290000 	    _ADR NROT 
 246 1d80 4D270000 	    _ADR OVER 
 247 1d84 152C0000 	    _ADR BASE 
 248 1d88 7D260000 	    _ADR AT 
 249 1d8c AD2A0000 	    _ADR ULESS 
 250 1d90 37260000 	    _QBRAN 3b
 250      701D0000 
ARM GAS  forth.s 			page 79


 251 1d98 F7250000 	    _DOLIT '.' 
 251      2E000000 
 252 1da0 6D320000 	    _ADR HOLD 
 253 1da4 B9320000 	    _ADR DIGS
 254 1da8 951B0000 	    _ADR FNE 
 255 1dac 37260000 	    _QBRAN 4f 
 255      C01D0000 
 256 1db4 F7250000 	    _DOLIT '-'
 256      2D000000 
 257 1dbc 6D320000 	    _ADR HOLD 
 258 1dc0 15330000 	4:  _ADR EDIGS
 259 1dc4 25360000 	    _ADR TYPEE 
 260 1dc8 FD280000 	    _ADR QDUP 
 261 1dcc 37260000 	    _QBRAN 8f
 261      141E0000 
 262 1dd4 F7250000 	    _DOLIT 'E'
 262      45000000 
 263 1ddc 01250000 	    _ADR EMIT 
 264 1de0 29270000 	    _ADR DUPP 
 265 1de4 5D270000 	    _ADR ZLESS 
 266 1de8 37260000 	    _QBRAN 4f 
 266      001E0000 
 267 1df0 1D2A0000 	    _ADR ABSS 
 268 1df4 F7250000 	    _DOLIT '-' 
 268      2D000000 
 269 1dfc 01250000 	    _ADR EMIT 
 270 1e00 112E0000 	4:  _ADR STOD
 271 1e04 4D320000 	    _ADR BDIGS 
 272 1e08 B9320000 	    _ADR DIGS 
 273 1e0c 15330000 	    _ADR EDIGS 
 274 1e10 25360000 	    _ADR TYPEE     
 275 1e14 A9260000 	8:  _ADR RFROM 
 276 1e18 152C0000 	    _ADR BASE 
 277 1e1c 69260000 	    _ADR STORE 
 278 1e20 7F240000 	9:  _UNNEST 
 279              	
 280              	
 281              	/*****************************
 282              	  format integer part 
 283              	/******************************
 284              	    F. ( f# -- )
 285              	    print float in fixed point 
 286              	    format 
 287              	*******************************/
 288 1e24 041D0000 	    _HEADER FDOT,2,"F."
 288      02462E00 
 289 1e2c 504700BF 	    _NEST
 290 1e30 152C0000 	    _ADR BASE 
 291 1e34 7D260000 	    _ADR AT 
 292 1e38 D1260000 	    _ADR TOR 
 293 1e3c 151B0000 	    _ADR FBASE
 294 1e40 7D260000 	    _ADR AT  
 295 1e44 152C0000 	    _ADR BASE 
 296 1e48 69260000 	    _ADR STORE 
 297 1e4c D1350000 	    _ADR SPACE 
 298 1e50 4D320000 	    _ADR BDIGS
 299 1e54 F7250000 	    _DOLIT '0'
ARM GAS  forth.s 			page 80


 299      30000000 
 300 1e5c 6D320000 	    _ADR HOLD   
 301 1e60 2D1C0000 	    _ADR AT_EXPONENT 
 302 1e64 39270000 	    _ADR SWAP  
 303 1e68 1D2A0000 	    _ADR ABSS
 304 1e6c 112E0000 	    _ADR STOD 
 305 1e70 11290000 	    _ADR ROT  
 306 1e74 29270000 	    _ADR DUPP 
 307 1e78 5D270000 	    _ADR ZLESS 
 308 1e7c 37260000 	    _QBRAN POS_E // positive exponent   
 308      A81E0000 
 309              	// negative exponent
 310 1e84 29270000 	1:  _ADR DUPP 
 311 1e88 37260000 	    _QBRAN POS_E   
 311      A81E0000 
 312 1e90 25290000 	    _ADR NROT  
 313 1e94 99320000 	    _ADR DIG  
 314 1e98 11290000 	    _ADR ROT   
 315 1e9c 49280000 	    _ADR ONEP 
 316 1ea0 4B260000 	    _BRAN 1b  
 316      841E0000 
 317              	POS_E:
 318 1ea8 F7250000 	    _DOLIT '.'
 318      2E000000 
 319 1eb0 6D320000 	    _ADR HOLD 
 320 1eb4 29270000 	1:  _ADR DUPP 
 321 1eb8 37260000 	    _QBRAN 8f 
 321      D81E0000 
 322 1ec0 F7250000 	    _DOLIT '0'
 322      30000000 
 323 1ec8 6D320000 	    _ADR HOLD 
 324 1ecc 59280000 	    _ADR ONEM 
 325 1ed0 4B260000 	    _BRAN 1b
 325      B41E0000 
 326 1ed8 19270000 	8:  _ADR DROP 
 327 1edc B9320000 	    _ADR DIGS 
 328 1ee0 951B0000 	    _ADR FNE
 329 1ee4 37260000 	    _QBRAN 9f 
 329      F81E0000 
 330 1eec F7250000 	    _DOLIT '-'
 330      2D000000 
 331 1ef4 6D320000 	    _ADR HOLD 
 332 1ef8 15330000 	9:  _ADR EDIGS 
 333 1efc 25360000 	    _ADR TYPEE 
 334 1f00 A9260000 	    _ADR RFROM 
 335 1f04 152C0000 	    _ADR BASE 
 336 1f08 69260000 	    _ADR STORE 
 337 1f0c 7F240000 	    _UNNEST 
 338              	
 339              	
 340              	/*******************************
 341              	    F* ( f1 f2 -- f1*f2 )
 342              	    multiply 2 float 
 343              	******************************/
 344 1f10 281E0000 	    _HEADER FSTAR,2,"F*"
 344      02462A00 
 345 1f18 504700BF 	    _NEST 
ARM GAS  forth.s 			page 81


 346 1f1c 2D1C0000 	    _ADR AT_EXPONENT 
 347 1f20 D1260000 	    _ADR TOR 
 348 1f24 39270000 	    _ADR SWAP 
 349 1f28 2D1C0000 	    _ADR AT_EXPONENT 
 350 1f2c A9260000 	    _ADR RFROM 
 351 1f30 ED270000 	    _ADR PLUS  // e1+e2
 352 1f34 D1260000 	    _ADR TOR 
 353 1f38 35280000 	    _ADR MSTAR // m1*m2 
 354 1f3c 29270000 	    _ADR DUPP 
 355 1f40 F7250000 	    _DOLIT 31 
 355      1F000000 
 356 1f48 C5270000 	    _ADR RSHIFT // product sign  
 357 1f4c 25290000 	    _ADR NROT  // put it on back burner
 358 1f50 95290000 	    _ADR DABS 
 359 1f54 61290000 	1:  _ADR DDUP 
 360 1f58 F7250000 	    _DOLIT MANTISSA_MAX     
 360      FFFF7F00 
 361 1f60 F7250000 	    _DOLIT 0 
 361      00000000 
 362 1f68 B9290000 	    _ADR UDGREAT 
 363 1f6c 37260000 	    _QBRAN 2f 
 363      9C1F0000 
 364 1f74 151B0000 	    _ADR FBASE 
 365 1f78 7D260000 	    _ADR AT 
 366 1f7c 592E0000 	    _ADR DSLMOD 
 367 1f80 11290000 	    _ADR ROT 
 368 1f84 19270000 	    _ADR DROP
 369 1f88 A9260000 	    _ADR RFROM 
 370 1f8c 49280000 	    _ADR ONEP 
 371 1f90 D1260000 	    _ADR TOR 
 372 1f94 4B260000 	    _BRAN 1b 
 372      541F0000 
 373 1f9c 11290000 	2:  _ADR ROT  // product sign 
 374 1fa0 37260000 	    _QBRAN 3f 
 374      AC1F0000 
 375 1fa8 952B0000 	    _ADR DNEGA 
 376 1fac A9260000 	3:  _ADR RFROM 
 377 1fb0 911C0000 	    _ADR STOR_EXPONENT
 378 1fb4 7F240000 	    _UNNEST  
 379              	
 380              	
 381              	/*******************************
 382              	    F/ ( f1 f2 -- f1/f2 )
 383              	    divide f1 by f2 
 384              	*******************************/
 385 1fb8 141F0000 	    _HEADER FSLH,2,"F/"
 385      02462F00 
 386 1fc0 504700BF 	    _NEST 
 387 1fc4 2D1C0000 	    _ADR AT_EXPONENT 
 388 1fc8 D1260000 	    _ADR TOR 
 389 1fcc 39270000 	    _ADR SWAP 
 390 1fd0 2D1C0000 	    _ADR AT_EXPONENT 
 391 1fd4 A9260000 	    _ADR RFROM
 392 1fd8 ED270000 	    _ADR PLUS 
 393 1fdc D1260000 	    _ADR TOR  
 394 1fe0 39270000 	    _ADR SWAP 
 395 1fe4 712F0000 	    _ADR SLASH 
ARM GAS  forth.s 			page 82


 396 1fe8 A9260000 	    _ADR RFROM 
 397 1fec 911C0000 	    _ADR STOR_EXPONENT
 398 1ff0 7F240000 	    _UNNEST 
 399              	
 400              	
 401              	/******************************
 402              	    F-ALIGN ( f#1 f#2 -- m1 m2 e )
 403              	    align 2 floats for f+ or f- 
 404              	    operation 
 405              	*********************************/
 406 1ff4 BC1F0000 	    _HEADER FALIGN,7,"F-ALIGN" 
 406      07462D41 
 406      4C49474E 
 407 2000 504700BF 	    _NEST 
 408 2004 2D1C0000 	    _ADR AT_EXPONENT // F#1 M2 E2 
 409 2008 D1260000 	    _ADR TOR  // F#1 M2 R: E2
 410 200c 39270000 	    _ADR SWAP // M2 F#1
 411 2010 2D1C0000 	    _ADR AT_EXPONENT // M2 M1 E1 
 412 2014 11290000 	    _ADR ROT    // M1 E1 M2
 413 2018 39270000 	    _ADR SWAP  // M1 M2 E1  
 414 201c A9260000 	    _ADR RFROM  // M1 M2 E1 E2 
 415 2020 61290000 	    _ADR DDUP   
 416 2024 C52A0000 	    _ADR LESS  
 417 2028 37260000 	    _QBRAN 4f 
 417      6C200000 
 418              	// E1 < E2     
 419 2030 39270000 	    _ADR SWAP // M1 M2 E2 E1  
 420 2034 D1260000 	    _ADR TOR  // M1 M2 E2 R: E1 
 421 2038 29270000 	1:  _ADR DUPP 
 422 203c BD260000 	    _ADR RAT 
 423 2040 8D2A0000 	    _ADR DIFF   
 424 2044 37260000 	    _QBRAN 8f 
 424      B4200000 
 425 204c 39270000 	    _ADR SWAP 
 426 2050 151B0000 	    _ADR FBASE
 427 2054 7D260000 	    _ADR AT  
 428 2058 0D280000 	    _ADR STAR 
 429 205c 39270000 	    _ADR SWAP 
 430 2060 59280000 	    _ADR ONEM 
 431 2064 4B260000 	    _BRAN 1b 
 431      38200000 
 432              	// E2 <= E1     
 433 206c D1260000 	4:  _ADR TOR  // M1 M2 E1 R: E2   
 434 2070 11290000 	    _ADR ROT   // M2 E1 M1 R: E2
 435 2074 39270000 	    _ADR SWAP // M2 M1 E1 R: E2  
 436 2078 29270000 	5:  _ADR DUPP  
 437 207c BD260000 	    _ADR RAT 
 438 2080 8D2A0000 	    _ADR DIFF 
 439 2084 37260000 	    _QBRAN 6f
 439      AC200000 
 440 208c 39270000 	    _ADR SWAP  
 441 2090 151B0000 	    _ADR FBASE 
 442 2094 7D260000 	    _ADR AT 
 443 2098 0D280000 	    _ADR STAR 
 444 209c 39270000 	    _ADR SWAP 
 445 20a0 59280000 	    _ADR ONEM 
 446 20a4 4B260000 	    _BRAN 5b 
ARM GAS  forth.s 			page 83


 446      78200000 
 447 20ac 11290000 	6:  _ADR ROT  // M1 E1 M2 
 448 20b0 39270000 	    _ADR SWAP  // m1 m2 E1 
 449 20b4 A9260000 	8:  _ADR RFROM 
 450 20b8 19270000 	    _ADR DROP  // M1 M2 E     
 451 20bc 7F240000 	    _UNNEST 
 452              	
 453              	/*******************************
 454              	    F+ ( f1 f2 -- f1+f2 )
 455              	    add 2 floats 
 456              	*******************************/
 457 20c0 F81F0000 	    _HEADER FPLUS,2,"F+"
 457      02462B00 
 458 20c8 504700BF 	    _NEST 
 459 20cc 01200000 	    _ADR FALIGN 
 460 20d0 D1260000 	    _ADR TOR 
 461 20d4 ED270000 	    _ADR PLUS 
 462 20d8 A9260000 	    _ADR RFROM 
 463 20dc 911C0000 	    _ADR STOR_EXPONENT
 464 20e0 7F240000 	    _UNNEST 
 465              	
 466              	/*******************************
 467              	    F- ( f1 f2 -- f1-f2 )
 468              	    substract 2 float 
 469              	*******************************/
 470 20e4 C4200000 	    _HEADER FMINUS,2,"F-"
 470      02462D00 
 471 20ec 504700BF 	    _NEST 
 472 20f0 01200000 	    _ADR FALIGN 
 473 20f4 D1260000 	    _ADR TOR 
 474 20f8 FD270000 	    _ADR SUBB 
 475 20fc A9260000 	    _ADR RFROM 
 476 2100 911C0000 	    _ADR STOR_EXPONENT
 477 2104 7F240000 	    _UNNEST 
 478              	
 479              	
 480              	/********************************
 481              	    FNEGATE ( f -- -f )
 482              	    negate floating point 
 483              	********************************/
 484 2108 E8200000 	    _HEADER FNEG,7,"FNEGATE"
 484      07464E45 
 484      47415445 
 485 2114 3046     	    mov T0,TOS 
 486 2116 4FF6FF71 	    _MOV32 T1,MANTISSA_MASK 
 486      C0F2FF01 
 487 211e 00EA0100 	    and T0,T1 
 488 2122 4FEA0020 	    lsl T0,#8 
 489 2126 4FEA2020 	    asr T0,#8 
 490 212a C0F10000 	    rsb T0,#0 
 491 212e 00EA0100 	    and T0,T1 
 492 2132 6FEA0101 	    mvn T1,T1 
 493 2136 06EA0106 	    and TOS,T1 
 494 213a 46EA0006 	    orr TOS,T0 
 495 213e 9BE1     	    _NEXT 
 496              	
 497              	/**********************************
ARM GAS  forth.s 			page 84


 498              	    FABS ( f -- f )
 499              	    return absolute value 
 500              	******************************/
 501 2140 0C210000 	    _HEADER FABS,4,"FABS"
 501      04464142 
 501      530000BF 
 502 214c 3046     	    mov T0,TOS 
 503 214e 4FF6FF71 	    _MOV32 T1,MANTISSA_MASK 
 503      C0F2FF01 
 504 2156 00EA0100 	    and T0,T1 
 505 215a 6FEA0101 	    mvn T1,T1 
 506 215e 10F4000F 	    tst T0,#(1<<23)
 507 2162 07D0     	    beq 1f
 508 2164 4FEA0020 	    lsl T0,#8 
 509 2168 4FEA2020 	    asr T0,#8 
 510 216c C0F10000 	    rsb T0,#0
 511 2170 00EA0100 	    and T0,T1 
 512 2174 6FEA0101 	1:  mvn T1,T1  
 513 2178 06EA0106 	    and TOS,T1 
 514 217c 46EA0006 	    orr TOS,T0 
 515 2180 7AE1     	    _NEXT 
 516              	
 517              	/*******************************
 518              	    FMIN ( f#1 f#2 -- smallest )
 519              	********************************/
 520 2182 44210000 	    _HEADER FMIN,4,"FMIN"
 520      04464D49 
 520      4E00
 521 218c 504700BF 	    _NEST 
 522 2190 61290000 	    _ADR DDUP 
 523 2194 01200000 	    _ADR FALIGN 
 524 2198 19270000 	    _ADR DROP 
 525 219c F52A0000 	    _ADR GREAT   
 526 21a0 37260000 	    _QBRAN 1f 
 526      AC210000 
 527 21a8 39270000 	    _ADR SWAP 
 528 21ac 19270000 	1:  _ADR DROP 
 529 21b0 7F240000 	    _UNNEST 
 530              	
 531              	/*******************************
 532              	    FMAX (f#1 f#2 -- largest )
 533              	*******************************/
 534 21b4 86210000 	    _HEADER FMAX,4,"FMAX"
 534      04464D41 
 534      580000BF 
 535 21c0 504700BF 	    _NEST 
 536 21c4 61290000 	    _ADR DDUP 
 537 21c8 01200000 	    _ADR FALIGN 
 538 21cc 19270000 	    _ADR DROP 
 539 21d0 C52A0000 	    _ADR LESS  
 540 21d4 37260000 	    _QBRAN 1f 
 540      E0210000 
 541 21dc 39270000 	    _ADR SWAP 
 542 21e0 19270000 	1:  _ADR DROP 
 543 21e4 7F240000 	    _UNNEST 
 544              	
 545              	/*****************************
ARM GAS  forth.s 			page 85


 546              	    F> ( f#1 f#2 -- flag )
 547              	    f#1>f#2 ? 
 548              	*****************************/
 549 21e8 B8210000 	    _HEADER FGREAT,2,"F>"
 549      02463E00 
 550 21f0 504700BF 	    _NEST 
 551 21f4 01200000 	    _ADR FALIGN
 552 21f8 19270000 	    _ADR DROP 
 553 21fc F52A0000 	    _ADR GREAT  
 554 2200 7F240000 	    _UNNEST 
 555              	
 556              	/*****************************
 557              	    F< ( f#1 f#2 -- flag )
 558              	    f#1<f#2 ? 
 559              	*****************************/
 560 2204 EC210000 	    _HEADER FLESS,2,"F<"
 560      02463C00 
 561 220c 504700BF 	    _NEST 
 562 2210 01200000 	    _ADR FALIGN
 563 2214 19270000 	    _ADR DROP 
 564 2218 C52A0000 	    _ADR LESS   
 565 221c 7F240000 	    _UNNEST 
 566              	
 567              	/*******************************
 568              	    F>S ( f -- n )
 569              	    convert float to integer 
 570              	*******************************/
 571 2220 08220000 	    _HEADER FTOS,3,"F>S"
 571      03463E53 
 572 2228 3046     	    mov T0,TOS
 573 222a 4FF6FF71 	    _MOV32 T1,MANTISSA_MASK  
 573      C0F2FF01 
 574 2232 00EA0100 	    and T0,T1
 575 2236 4FEA0020 	    lsl T0,#8 
 576 223a 4FEA2020 	    asr T0,#8
 577 223e 4FEA2666 	0:  asr TOS,#24 // exponent 
 578 2242 D4F8A420 	    ldr T2,[UP,#VFBASE]
 579 2246 16F0004F 	    tst TOS,#(1<<31)
 580 224a 06D1     	    bne 2f 
 581              	// positive exponent 
 582 224c 66B1     	1:  cbz TOS,8f 
 583 224e 58B1     	    cbz T0,8f 
 584 2250 02FB00F0 	    mul T0,T2 
 585 2254 A6F10106 	    sub TOS,#1 
 586 2258 F8E7     	    b 1b 
 587              	// negative exponent 
 588 225a 2EB1     	2:  cbz TOS,8f 
 589 225c 20B1     	    cbz T0,8f 
 590 225e 90FBF2F0 	    sdiv T0,T2 
 591 2262 06F10106 	    add TOS,#1
 592 2266 F8E7     	    b 2b 
 593 2268 0646     	8:  mov TOS,T0 
 594 226a 05E1     	    _NEXT 
 595              	    
 596              	
 597              	/*******************************
 598              	    S>F ( s -- f )
ARM GAS  forth.s 			page 86


 599              	    convert integer to float 
 600              	*******************************/
 601 226c 24220000 	    _HEADER STOF,3,"S>F" 
 601      03533E46 
 602 2274 80EA0000 	    eor T0,T0 // exponent 
 603 2278 82EA0202 	    eor T2,T2 // sign 
 604 227c D4F8A410 	    ldr T1,[UP,#VFBASE]
 605 2280 4FF6FF73 	    _MOV32 T3,MANTISSA_MAX 
 605      C0F27F03 
 606 2288 16F0004F 	    tst TOS,#(1<<31)
 607 228c 03D0     	    beq 1f 
 608 228e C6F10006 	    rsb TOS,#0 
 609 2292 6FEA0202 	    mvn T2,T2 // - integer  
 610 2296 9E42     	1:  cmp TOS,T3 
 611 2298 04D4     	    bmi 2f 
 612 229a B6FBF1F6 	    udiv TOS,TOS,T1 
 613 229e 00F10100 	    add T0,#1 
 614 22a2 F8E7     	    b 1b
 615 22a4 3AB1     	2:  cbz T2,3f 
 616 22a6 C6F10006 	    rsb TOS,#0 
 617 22aa 4FF6FF73 	    _MOV32 T3,MANTISSA_MASK 
 617      C0F2FF03 
 618 22b2 06EA0306 	    and TOS,T3
 619 22b6 4FEA0060 	3:  lsl T0,#24 
 620 22ba 46EA0006 	    orr TOS,T0 
 621 22be DBE0     	    _NEXT 
 622              	
 623              	
 624              	/********************************
 625              	 check for exponent 
 626              	********************************/
 627              	EXPONENT: // ( a -- e a+ )
 628 22c0 504700BF 	    _NEST 
 629 22c4 F7250000 	    _DOLIT 'E'
 629      45000000 
 630 22cc 8D340000 	    _ADR CHARQ 
 631 22d0 37260000 	    _QBRAN 2f 
 631      24230000 
 632 22d8 F7250000 	    _DOLIT '-'
 632      2D000000 
 633 22e0 8D340000 	    _ADR CHARQ
 634 22e4 D1260000 	    _ADR TOR
 635 22e8 F7250000 	    _DOLIT 0 
 635      00000000 
 636 22f0 29270000 	    _ADR DUPP  
 637 22f4 11290000 	    _ADR ROT 
 638 22f8 2D340000 	    _ADR PARSE_DIGITS
 639 22fc 11290000 	    _ADR ROT
 640 2300 19270000 	    _ADR DROP // discard digits count  
 641 2304 A9260000 	    _ADR RFROM 
 642 2308 37260000 	    _QBRAN 8f 
 642      30230000 
 643 2310 39270000 	    _ADR SWAP
 644 2314 0D2A0000 	    _ADR NEGAT
 645 2318 39270000 	    _ADR SWAP
 646 231c 4B260000 	    _BRAN 8f    
 646      30230000 
ARM GAS  forth.s 			page 87


 647 2324 F7250000 	2:  _DOLIT 0 
 647      00000000 
 648 232c 39270000 	    _ADR SWAP     
 649 2330 7F240000 	8:  _UNNEST 
 650              	
 651              	
 652              	/**********************************
 653              	    FLOAT? ( a -- f# -2 | a 0 )
 654              	    parse float number
 655              	**********************************/
 656 2334 70220000 	    _HEADER FLOATQ,6,"FLOAT?"
 656      06464C4F 
 656      41543F00 
 657 2340 504700BF 	    _NEST
 658 2344 152C0000 	    _ADR BASE 
 659 2348 7D260000 	    _ADR AT 
 660 234c D1260000 	    _ADR TOR 
 661 2350 151B0000 	    _ADR FBASE 
 662 2354 7D260000 	    _ADR AT 
 663 2358 152C0000 	    _ADR BASE 
 664 235c 69260000 	    _ADR STORE 
 665 2360 29270000 	    _ADR DUPP
 666 2364 7D2B0000 	    _ADR COUNT 
 667 2368 19270000 	    _ADR DROP  // count not used  
 668 236c F7250000 	    _DOLIT 0 
 668      00000000 
 669 2374 29270000 	    _ADR DUPP 
 670 2378 11290000 	    _ADR ROT   // -- a 0 0 a+  
 671              	// check for sign  
 672 237c F7250000 	    _DOLIT '-'
 672      2D000000 
 673 2384 8D340000 	    _ADR  CHARQ 
 674 2388 D1260000 	    _ADR  TOR  
 675 238c 2D340000 	    _ADR PARSE_DIGITS 
 676 2390 11290000 	    _ADR ROT 
 677 2394 19270000 	    _ADR DROP // d not used 
 678 2398 F7250000 	    _DOLIT 0 
 678      00000000 
 679 23a0 25290000 	    _ADR NROT   // reset it ( -- a 0 n a+ ) R: base sign  
 680              	// check for '.'
 681 23a4 F7250000 	    _DOLIT '.'
 681      2E000000 
 682 23ac 8D340000 	    _ADR  CHARQ
 683 23b0 37260000 	    _QBRAN 1f 
 683      C8230000 
 684 23b8 2D340000 	    _ADR PARSE_DIGITS 
 685 23bc 11290000 	    _ADR ROT 
 686 23c0 0D2A0000 	    _ADR NEGAT
 687 23c4 25290000 	    _ADR  NROT // negate digit count ( -- a d n a+ )
 688 23c8 C1220000 	1:  _ADR EXPONENT // a d n e a+  
 689 23cc 7D2B0000 	    _ADR COUNT 
 690 23d0 612A0000 	    _ADR ZEQUAL 
 691 23d4 37260000 	    _QBRAN 4f   
 691      1C240000 
 692 23dc 19270000 	    _ADR  DROP  // a d n e 
 693 23e0 11290000 	    _ADR  ROT 
 694 23e4 ED270000 	    _ADR  PLUS  // a n e- 
ARM GAS  forth.s 			page 88


 695 23e8 11290000 	    _ADR  ROT
 696 23ec 19270000 	    _ADR  DROP 
 697 23f0 39270000 	    _ADR  SWAP 
 698 23f4 A9260000 	    _ADR  RFROM
 699 23f8 37260000 	    _QBRAN 3f
 699      04240000 
 700 2400 0D2A0000 	    _ADR NEGAT 
 701 2404 39270000 	3:  _ADR SWAP
 702 2408 911C0000 	    _ADR STOR_EXPONENT 
 703 240c F7250000 	    _DOLIT -2
 703      FEFFFFFF 
 704 2414 4B260000 	    _BRAN 8f  
 704      34240000 
 705 241c A9260000 	4:  _ADR RFROM 
 706 2420 19270000 	    _ADR DROP 
 707 2424 39290000 	    _ADR  DDROP
 708 2428 39290000 	    _ADR  DDROP  
 709 242c F7250000 	    _DOLIT 0 
 709      00000000 
 710              	8:
 711 2434 A9260000 	    _ADR RFROM 
 712 2438 152C0000 	    _ADR BASE 
 713 243c 69260000 	    _ADR STORE 
 714 2440 7F240000 	    _UNNEST 
 715              	
 716              	
 717              	
 718              	/********************************
 719              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 720              	    parse number, integer or float 
 721              	    if not a number return ( a 0 ) 
 722              	    if integer return ( int -1 ) 
 723              	    if float return ( float -2 )
 724              	**********************************/
 725 2444 38230000 	    _HEADER NUMBER,6,"NUMBER"
 725      064E554D 
 725      42455200 
 726 2450 504700BF 	    _NEST 
 727 2454 B1340000 	    _ADR INTQ
 728 2458 FD280000 	    _ADR QDUP 
 729 245c 37260000 	    _QBRAN 2f 
 729      68240000 
 730 2464 7F240000 	    _UNNEST 
 731 2468 41230000 	2:  _ADR FLOATQ
 732 246c 7F240000 	    _UNNEST 
 733              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
ARM GAS  forth.s 			page 89


  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
ARM GAS  forth.s 			page 90


  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2470 48F804CD 		STMFD	RSP!,{IP}
  85 2474 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2478 5CF8045B 		LDR WP,[IP],#4 
  89 247c 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 247e 58F804CB 		LDMFD RSP!,{IP}
  92 2482 5CF8045B 		LDR WP,[IP],#4 
  93 2486 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2488 04F14401 		add T1,UP,#USER_CTOP 
 105 248c 0968     		ldr T1,[T1]
 106 248e 44F25072 		mov T2,#0x4700+(10<<3)
 107 2492 21F8022B 		strh T2,[T1],#2
 108 2496 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 249a 21F8022B 		strh T2,[T1],#2 
 110 249e 04F14402 		add T2,UP,#USER_CTOP 
 111 24a2 1160     		str T1,[T2]
 112 24a4 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 24a6 47F8046D 		_PUSH 
 118 24aa 04F11406 		ADD TOS,UP,#STDIN 
 119 24ae E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 24b0 47F8046D 		_PUSH 
 125 24b4 04F11806 		ADD TOS,UP,#STDOUT
ARM GAS  forth.s 			page 91


 126 24b8 DEE7     		_NEXT 
 127              		
 128              	/********************************************
 129              		KEY? ( -- c T | F )
 130              		check if available character 
 131              	********************************************/
 132 24ba 48240000 		_HEADER QKEY,4,"KEY?" 
 132      044B4559 
 132      3F00
 133 24c4 504700BF 		_NEST 
 134 24c8 A7240000 		_ADR TSTDIN // ' STDIN 
 135 24cc D5300000 		_ADR ATEXE
 136 24d0 7F240000 		_UNNEST 
 137              	
 138              	/********************************************
 139              	    KEY	 ( -- c )
 140              	 	Wait for and return an input character.
 141              	********************************************/
 142 24d4 BE240000 		_HEADER KEY,3,"KEY"
 142      034B4559 
 143 24dc 504700BF 		_NEST
 144              	KEY1:
 145 24e0 6D160000 		_ADR CAPS_LED 
 146 24e4 C5240000 		_ADR	QKEY 
 147 24e8 37260000 		_QBRAN	KEY1
 147      E0240000 
 148 24f0 7F240000 		_UNNEST
 149              	
 150              	/**********************************************
 151              		EMIT ( c -- )
 152              		transmit a character to console 
 153              	**********************************************/
 154 24f4 D8240000 		_HEADER EMIT,4,"EMIT"
 154      04454D49 
 154      540000BF 
 155 2500 504700BF 		_NEST 
 156 2504 B1240000 		_ADR TSTDOUT 
 157 2508 D5300000 		_ADR ATEXE 
 158 250c 7F240000 		_UNNEST 
 159              	
 160              	
 161              	/************************************************
 162              	 GET-IP ( n - c )
 163              	 return interrupt priority of IRQn 
 164              	************************************************/
 165              	/*
 166              		_HEADER GETIP,6,"GET-IP" 
 167              		_NEST 
 168              		_ADR DUPP 
 169              		_ADR ZLESS
 170              		_QBRAN 1f 
 171              		_DOLIT 15
 172              		_ADR ANDD
 173              		_DOLIT 4
 174              		_ADR SUBB  
 175              		_DOLIT 0xE000ED18 
 176              		_BRAN 2f 
ARM GAS  forth.s 			page 92


 177              	1:	_DOLIT 0xE000E400 
 178              	2:	_ADR PLUS 
 179              		_ADR CAT
 180              		_DOLIT 4 
 181              		_ADR RSHIFT 
 182              		_UNNEST 
 183              	*/
 184              	
 185              	/***********************************************
 186              	 RANDOM ( n+ -- {0..n+ - 1} )
 187              	 return pseudo random number 
 188              	 REF: https://en.wikipedia.org/wiki/Xorshift
 189              	************************************************/
 190 2510 F8240000 		_HEADER RAND,6,"RANDOM"
 190      0652414E 
 190      444F4D00 
 191 251c 504700BF 		_NEST
 192 2520 1D2A0000 		_ADR ABSS   
 193 2524 C52B0000 		_ADR SEED 
 194 2528 7D260000 		_ADR AT 
 195 252c 29270000 		_ADR DUPP 
 196 2530 F7250000 		_DOLIT 13
 196      0D000000 
 197 2538 DD270000 		_ADR LSHIFT 
 198 253c 95270000 		_ADR XORR  
 199 2540 29270000 		_ADR DUPP 
 200 2544 F7250000 		_DOLIT 17 
 200      11000000 
 201 254c C5270000 		_ADR RSHIFT 
 202 2550 95270000 		_ADR XORR 
 203 2554 29270000 		_ADR DUPP
 204 2558 F7250000 		_DOLIT 5 
 204      05000000 
 205 2560 DD270000 		_ADR LSHIFT 
 206 2564 95270000 		_ADR XORR  
 207 2568 29270000 		_ADR DUPP 
 208 256c C52B0000 		_ADR SEED 
 209 2570 69260000 		_ADR STORE 
 210 2574 F7250000 		_DOLIT 0x7FFFFFFF
 210      FFFFFF7F 
 211 257c 6D270000 		_ADR ANDD 
 212 2580 39270000 		_ADR SWAP 
 213 2584 592F0000 		_ADR MODD 
 214 2588 7F240000 		_UNNEST 
 215              	
 216              	
 217              	/****************************************
 218              	 PAUSE ( u -- ) 
 219              	 suspend execution for u milliseconds
 220              	****************************************/
 221 258c 14250000 		_HEADER PAUSE,5,"PAUSE"
 221      05504155 
 221      534500BF 
 222 2598 504700BF 		_NEST 
 223 259c ED2B0000 		_ADR TIMER 
 224 25a0 69260000 		_ADR STORE 
 225              	PAUSE_LOOP:
ARM GAS  forth.s 			page 93


 226 25a4 ED2B0000 		_ADR TIMER 
 227 25a8 7D260000 		_ADR AT 
 228 25ac 37260000 		_QBRAN PAUSE_EXIT 
 228      BC250000 
 229 25b4 4B260000 		_BRAN PAUSE_LOOP 
 229      A4250000 
 230              	PAUSE_EXIT: 		
 231 25bc 7F240000 		_UNNEST 
 232              	
 233              	/******************************************
 234              	  ULED ( T|F -- )
 235              	  control user LED, -1 ON, 0 OFF 
 236              	*******************************************/
 237 25c0 90250000 		_HEADER ULED,4,"ULED"
 237      04554C45 
 237      440000BF 
 238 25cc 4FF40050 		mov T0,#(1<<LED_PIN)
 239 25d0 4FF40061 		_MOV32 T1,LED_GPIO 
 239      C4F20201 
 240 25d8 3600     		movs TOS,TOS 
 241 25da 57F8046B 		_POP
 242 25de 03D0     		beq ULED_OFF
 243 25e0 4FEA0040 		lsl T0,#16 
 244 25e4 8861     		str T0,[T1,#GPIO_BSRR]
 245 25e6 47E7     		_NEXT 
 246              	ULED_OFF:
 247 25e8 8861     		str T0,[T1,#GPIO_BSRR]
 248 25ea 45E7     		_NEXT    
 249              	
 250              	
 251              		
 252              	/***************
 253              	//  The kernel
 254              	***************/
 255              	
 256              	/********************
 257              	    NOP	( -- )
 258              	 	do nothing.
 259              	*********************/
 260 25ec C4250000 		_HEADER NOP,3,"NOP"
 260      034E4F50 
 261 25f4 40E7     		_NEXT 
 262              	 
 263              	/********************
 264              	    doLIT	( -- w )
 265              	 	Push an inline literal.
 266              	hidden word used by compiler 
 267              	*********************/
 268              	DOLIT:
 269 25f6 47F8046D 		_PUSH				//  store TOS on data stack
 270 25fa 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 271 25fe 3BE7     		_NEXT 
 272              	
 273              	/*******************************
 274              	    EXECUTE	( ca -- )
 275              	 	Execute the word at ca.
 276              	*******************************/
ARM GAS  forth.s 			page 94


 277 2600 F0250000 		_HEADER EXECU,7,"EXECUTE"
 277      07455845 
 277      43555445 
 278 260c 46F00105 		ORR	WP,TOS,#1 
 279 2610 57F8046B 		_POP
 280 2614 2847     		BX WP 
 281 2616 2FE7     		_NEXT 
 282              	
 283              	/**********************************************************
 284              	    donext	( -- ) counter on R:
 285              	 	Run time code for the single index loop.
 286              	 	: next ( -- ) \ hilevel model
 287              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 288              	hidden word used by compiler 	  
 289              	*********************************************************/
 290              	DONXT:
 291 2618 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 292 261c 22B9     		CBNZ T2,NEXT1 
 293              		/* loop done */
 294 261e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 295 2622 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 296 2626 27E7     		_NEXT
 297              	NEXT1:
 298              		/* decrement loop counter */
 299 2628 A2F10102 		SUB	T2,T2,#1
 300 262c C8F80020 		STR	T2,[RSP]
 301 2630 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 302 2634 20E7     		_NEXT 
 303              	
 304              	/**************************************
 305              	    ?branch	( f -- )
 306              	 	Branch if flag is zero.
 307              	hiddend word used by compiler
 308              	**************************************/
 309              	QBRAN:
 310 2636 3600     		MOVS	TOS,TOS
 311 2638 57F8046B 		_POP
 312 263c 02D1     		BNE	QBRAN1
 313 263e DCF800C0 		LDR	IP,[IP]
 314 2642 19E7     		_NEXT
 315              	QBRAN1:
 316 2644 0CF1040C 	 	ADD	IP,IP,#4
 317 2648 16E7     		_NEXT
 318              	
 319              	/***********************************
 320              	    branch	( -- )
 321              	 	Branch to an inline address.
 322              	hidden word used by compiler 
 323              	***********************************/
 324              	BRAN:
 325 264a DCF800C0 		LDR	IP,[IP]
 326 264e 13E7     		_NEXT
 327              	
 328              	/******************************************
 329              	    EXIT	(  -- )
 330              	 	Exit the currently executing command.
 331              	******************************************/
ARM GAS  forth.s 			page 95


 332 2650 04260000 		_HEADER EXIT,4,"EXIT"
 332      04455849 
 332      540000BF 
 333 265c 7F240000 		_UNNEST
 334              	
 335              	/***********************************
 336              	    !	   ( w a -- )
 337              	 	Pop the data stack to memory.
 338              	************************************/
 339 2660 54260000 		_HEADER STORE,1,"!"
 339      012100BF 
 340 2668 57F8045B 		LDR	WP,[DSP],#4
 341 266c 3560     		STR	WP,[TOS]
 342 266e 57F8046B 		_POP
 343 2672 01E7     		_NEXT 
 344              	
 345              	/********************************************
 346              	    @	   ( a -- w )
 347              	 	Push memory location to the data stack.
 348              	*********************************************/
 349 2674 64260000 		_HEADER AT,1,"@"
 349      014000BF 
 350 267c 3668     		LDR	TOS,[TOS]
 351 267e FBE6     		_NEXT 
 352              	
 353              	/*******************************************
 354              	    C!	  ( c b -- )
 355              	 	Pop the data stack to byte memory.
 356              	*******************************************/
 357 2680 78260000 		_HEADER CSTOR,2,"C!"
 357      02432100 
 358 2688 57F8045B 		LDR	WP,[DSP],#4
 359 268c 3570     		STRB WP,[TOS]
 360 268e 57F8046B 		_POP
 361 2692 F1E6     		_NEXT
 362              	
 363              	/*********************************************
 364              	    C@	  ( b -- c )
 365              	 	Push byte memory location to the data stack.
 366              	**********************************************/
 367 2694 84260000 		_HEADER CAT,2,"C@"
 367      02434000 
 368 269c 3678     		LDRB	TOS,[TOS]
 369 269e EBE6     		_NEXT 
 370              	
 371              	/*********************************************
 372              	    R>	  ( -- w )
 373              	 	Pop the return stack to the data stack.
 374              	**********************************************/
 375 26a0 98260000 		_HEADER RFROM,2,"R>"
 375      02523E00 
 376 26a8 47F8046D 		_PUSH
 377 26ac 58F8046B 		LDR	TOS,[RSP],#4
 378 26b0 E2E6     		_NEXT 
 379              	
 380              	/************************************************
 381              	    R@	  ( -- w )
ARM GAS  forth.s 			page 96


 382              	 	Copy top of return stack to the data stack.
 383              	************************************************/
 384 26b2 A4260000 		_HEADER RAT,2,"R@"
 384      02524000 
 384      00BF
 385 26bc 47F8046D 		_PUSH
 386 26c0 D8F80060 		LDR	TOS,[RSP]
 387 26c4 D8E6     		_NEXT 
 388              	
 389              	/***********************************************
 390              	    >R	  ( w -- )
 391              	 	Push the data stack to the return stack.
 392              	************************************************/
 393 26c6 B6260000 		_HEADER TOR,2,">R"
 393      023E5200 
 393      00BF
 394 26d0 48F8046D 		STR	TOS,[RSP,#-4]!
 395 26d4 57F8046B 		_POP
 396 26d8 CEE6     		_NEXT
 397              	
 398              	/*******************************
 399              	//	RP! ( u -- )
 400              	// initialize RPP with u 
 401              	*******************************/
 402 26da CA260000 		_HEADER RPSTOR,3,"RP!"
 402      03525021 
 402      00BF
 403 26e4 B046     		MOV RSP,TOS 
 404 26e6 57F8046B 		_POP  
 405 26ea C5E6     		_NEXT 
 406              	
 407              	/********************************
 408              		SP! ( u -- )
 409              	 initialize SPP with u 
 410              	********************************/
 411 26ec DE260000 		_HEADER SPSTOR,3,"SP!"
 411      03535021 
 412 26f4 3746     		MOV DSP,TOS 
 413 26f6 86EA0606 		EOR TOS,TOS,TOS 
 414 26fa BDE6     		_NEXT 
 415              	
 416              	/**************************************
 417              	    SP@	 ( -- a )
 418              	 	Push the current data stack pointer.
 419              	***************************************/
 420 26fc F0260000 		_HEADER SPAT,3,"SP@"
 420      03535040 
 421 2704 47F8046D 		_PUSH
 422 2708 3E46     		MOV	TOS,DSP
 423 270a B5E6     		_NEXT
 424              	
 425              	/********************************
 426              	    DROP	( w -- )
 427              	 	Discard top stack item.
 428              	********************************/
 429 270c 00270000 		_HEADER DROP,4,"DROP"
 429      0444524F 
ARM GAS  forth.s 			page 97


 429      500000BF 
 430 2718 57F8046B 		_POP
 431 271c ACE6     		_NEXT 
 432              	
 433              	/*********************************
 434              	    DUP	 ( w -- w w )
 435              	 	Duplicate the top stack item.
 436              	*********************************/
 437 271e 10270000 		_HEADER DUPP,3,"DUP"
 437      03445550 
 437      00BF
 438 2728 47F8046D 		_PUSH
 439 272c A4E6     		_NEXT 
 440              	
 441              	/**********************************
 442              	    SWAP	( w1 w2 -- w2 w1 )
 443              	 	Exchange top two stack items.
 444              	**********************************/
 445 272e 22270000 		_HEADER SWAP,4,"SWAP"
 445      04535741 
 445      5000
 446 2738 3D68     		LDR	WP,[DSP]
 447 273a 3E60     		STR	TOS,[DSP]
 448 273c 2E46     		MOV	TOS,WP
 449 273e 9BE6     		_NEXT 
 450              	
 451              	/***********************************
 452              	    OVER	( w1 w2 -- w1 w2 w1 )
 453              	 	Copy second stack item to top.
 454              	***********************************/
 455 2740 32270000 		_HEADER OVER,4,"OVER"
 455      044F5645 
 455      520000BF 
 456 274c 47F8046D 		_PUSH
 457 2750 7E68     		LDR	TOS,[DSP,#4]
 458 2752 91E6     		_NEXT 
 459              	
 460              	/***********************************
 461              	    0<	  ( n -- t )
 462              	 	Return true if n is negative.
 463              	***********************************/
 464 2754 44270000 		_HEADER ZLESS,2,"0<"
 464      02303C00 
 465 275c 4FEAE676 		ASR TOS,#31
 466 2760 8AE6     		_NEXT 
 467              	
 468              	/********************************
 469              	    AND	 ( w w -- w )
 470              	 	Bitwise AND.
 471              	********************************/
 472 2762 58270000 		_HEADER ANDD,3,"AND"
 472      03414E44 
 472      00BF
 473 276c 57F8045B 		LDR	WP,[DSP],#4
 474 2770 06EA0506 		AND	TOS,TOS,WP
 475 2774 80E6     		_NEXT 
 476              	
ARM GAS  forth.s 			page 98


 477              	/******************************
 478              	    OR	  ( w w -- w )
 479              	 	Bitwise inclusive OR.
 480              	******************************/
 481 2776 66270000 		_HEADER ORR,2,"OR"
 481      024F5200 
 481      00BF
 482 2780 57F8045B 		LDR	WP,[DSP],#4
 483 2784 46EA0506 		ORR	TOS,TOS,WP
 484 2788 76E6     		_NEXT 
 485              	
 486              	/*****************************
 487              	    XOR	 ( w w -- w )
 488              	 	Bitwise exclusive OR.
 489              	*****************************/
 490 278a 7A270000 		_HEADER XORR,3,"XOR"
 490      03584F52 
 490      00BF
 491 2794 57F8045B 		LDR	WP,[DSP],#4
 492 2798 86EA0506 		EOR	TOS,TOS,WP
 493 279c 6CE6     		_NEXT 
 494              	
 495              	/**************************************************
 496              	    UM+	 ( w w -- w cy )
 497              	 	Add two numbers, return the sum and carry flag.
 498              	***************************************************/
 499 279e 8E270000 		_HEADER UPLUS,3,"UM+"
 499      03554D2B 
 499      00BF
 500 27a8 3D68     		LDR	WP,[DSP]
 501 27aa AD19     		ADDS	WP,WP,TOS
 502 27ac 4FF00006 		MOV	TOS,#0
 503 27b0 46F10006 		ADC	TOS,TOS,#0
 504 27b4 3D60     		STR	WP,[DSP]
 505 27b6 5FE6     		_NEXT 
 506              	
 507              	/*********************************
 508              	    RSHIFT	 ( w # -- w )
 509              	 	arithmetic Right shift # bits.
 510              	**********************************/
 511 27b8 A2270000 		_HEADER RSHIFT,6,"RSHIFT"
 511      06525348 
 511      49465400 
 512 27c4 57F8045B 		LDR	WP,[DSP],#4
 513 27c8 45FA06F6 		MOV	TOS,WP,ASR TOS
 514 27cc 54E6     		_NEXT 
 515              	
 516              	/****************************
 517              	    LSHIFT	 ( w # -- w )
 518              	 	Right shift # bits.
 519              	****************************/
 520 27ce BC270000 		_HEADER LSHIFT,6,"LSHIFT"
 520      064C5348 
 520      49465400 
 520      00BF
 521 27dc 57F8045B 		LDR	WP,[DSP],#4
 522 27e0 05FA06F6 		MOV	TOS,WP,LSL TOS
ARM GAS  forth.s 			page 99


 523 27e4 48E6     		_NEXT
 524              	
 525              	/*************************
 526              	    +	 ( w w -- w )
 527              	 	Add.
 528              	*************************/
 529 27e6 D2270000 		_HEADER PLUS,1,"+"
 529      012B
 530 27ec 57F8045B 		LDR	WP,[DSP],#4
 531 27f0 2E44     		ADD	TOS,TOS,WP
 532 27f2 41E6     		_NEXT 
 533              	
 534              	/************************
 535              	    -	 ( w w -- w )
 536              	 	Subtract.
 537              	************************/
 538 27f4 EA270000 		_HEADER SUBB,1,"-"
 538      012D00BF 
 539 27fc 57F8045B 		LDR	WP,[DSP],#4
 540 2800 C6EB0506 		RSB	TOS,TOS,WP
 541 2804 38E6     		_NEXT 
 542              	
 543              	/************************
 544              	    *	 ( w w -- w )
 545              	 	Multiply.
 546              	***********************/
 547 2806 F8270000 		_HEADER STAR,1,"*"
 547      012A
 548 280c 57F8045B 		LDR	WP,[DSP],#4
 549 2810 05FB06F6 		MUL	TOS,WP,TOS
 550 2814 30E6     		_NEXT 
 551              	
 552              	/***************************
 553              	    UM*	 ( w w -- ud )
 554              	 	Unsigned multiply.
 555              	****************************/
 556 2816 0A280000 		_HEADER UMSTA,3,"UM*"
 556      03554D2A 
 556      00BF
 557 2820 3D68     		LDR	WP,[DSP]
 558 2822 A6FB0523 		UMULL	T2,T3,TOS,WP
 559 2826 3A60     		STR	T2,[DSP]
 560 2828 1E46     		MOV	TOS,T3
 561 282a 25E6     		_NEXT 
 562              	
 563              	/***************************
 564              	    M*	 ( w w -- d )
 565              	 	signed multiply.
 566              		hold double result
 567              	***************************/
 568 282c 1A280000 		_HEADER MSTAR,2,"M*"
 568      024D2A00 
 569 2834 3D68     		LDR	WP,[DSP]
 570 2836 86FB0523 		SMULL	T2,T3,TOS,WP
 571 283a 3A60     		STR	T2,[DSP]
 572 283c 1E46     		MOV	TOS,T3
 573 283e 1BE6     		_NEXT 
ARM GAS  forth.s 			page 100


 574              	
 575              	/***************************
 576              	    1+	 ( w -- w+1 )
 577              	 	Add 1.
 578              	***************************/
 579 2840 30280000 		_HEADER ONEP,2,"1+"
 579      02312B00 
 580 2848 06F10106 		ADD	TOS,TOS,#1
 581 284c 14E6     		_NEXT 
 582              	
 583              	/***************************
 584              	    1-	 ( w -- w-1 )
 585              	 	Subtract 1.
 586              	***************************/
 587 284e 44280000 		_HEADER ONEM,2,"1-"
 587      02312D00 
 587      00BF
 588 2858 A6F10106 		SUB	TOS,TOS,#1
 589 285c 0CE6     		_NEXT 
 590              	
 591              	/***************************
 592              	    2+	 ( w -- w+2 )
 593              	 	Add 2.
 594              	**************************/
 595 285e 52280000 		_HEADER TWOP,2,"2+"
 595      02322B00 
 595      00BF
 596 2868 06F10206 		ADD	TOS,TOS,#2
 597 286c 04E6     		_NEXT
 598              	
 599              	/**************************
 600              	    2-	 ( w -- w-2 )
 601              	 	Subtract 2.
 602              	**************************/
 603 286e 62280000 		_HEADER TWOM,2,"2-"
 603      02322D00 
 603      00BF
 604 2878 A6F10206 		SUB	TOS,TOS,#2
 605 287c FCE5     		_NEXT
 606              	
 607              	/***************************
 608              	    CELL+	( w -- w+4 )
 609              	 	Add CELLL.
 610              	***************************/
 611 287e 72280000 		_HEADER CELLP,5,"CELL+"
 611      0543454C 
 611      4C2B
 612 2888 06F10406 		ADD	TOS,TOS,#CELLL
 613 288c F4E5     		_NEXT
 614              	
 615              	/***************************
 616              	    CELL-	( w -- w-4 )
 617              	 	Subtract CELLL.
 618              	**************************/
 619 288e 82280000 		_HEADER CELLM,5,"CELL-"
 619      0543454C 
 619      4C2D
ARM GAS  forth.s 			page 101


 620 2898 A6F10406 		SUB	TOS,TOS,#CELLL
 621 289c ECE5     		_NEXT
 622              	
 623              	/**************************** 
 624              	    BL	( -- 32 )
 625              	 	Blank (ASCII space).
 626              	*****************************/
 627 289e 92280000 		_HEADER BLANK,2,"BL"
 627      02424C00 
 627      00BF
 628 28a8 47F8046D 		_PUSH
 629 28ac 4FF02006 		MOV	TOS,#32
 630 28b0 E2E5     		_NEXT 
 631              	
 632              	/**************************
 633              	    CELLS	( w -- w*4 )
 634              	 	Multiply CELLL 
 635              	***************************/
 636 28b2 A2280000 		_HEADER CELLS,5,"CELLS"
 636      0543454C 
 636      4C53
 637 28bc 4FEA8606 		LSL TOS,#2
 638 28c0 DAE5     		_NEXT
 639              	
 640              	/***************************
 641              	    CELL/	( w -- w/4 )
 642              	 	Divide by CELLL.
 643              	***************************/
 644 28c2 B6280000 		_HEADER CELLSL,5,"CELL/"
 644      0543454C 
 644      4C2F
 645 28cc 4FEAA606 		ASR TOS,#2
 646 28d0 D2E5     		_NEXT
 647              	
 648              	/*************************
 649              	    2*	( w -- w*2 )
 650              	 	Multiply 2.
 651              	*************************/
 652 28d2 C6280000 		_HEADER TWOST,2,"2*"
 652      02322A00 
 652      00BF
 653 28dc 4FEA4606 		MOV	TOS,TOS,LSL#1
 654 28e0 CAE5     		_NEXT
 655              	
 656              	/*************************
 657              	    2/	( w -- w/2 )
 658              	 	Divide by 2.
 659              	***********************/
 660 28e2 D6280000 		_HEADER TWOSL,2,"2/"
 660      02322F00 
 660      00BF
 661 28ec 4FEA6606 		MOV	TOS,TOS,ASR#1
 662 28f0 C2E5     		_NEXT
 663              	
 664              	/****************************
 665              	    ?DUP	( w -- w w | 0 )
 666              	 	Conditional duplicate.
ARM GAS  forth.s 			page 102


 667              	*****************************/
 668 28f2 E6280000 		_HEADER QDUP,4,"?DUP"
 668      043F4455 
 668      5000
 669 28fc 3500     		MOVS	WP,TOS
 670 28fe 18BF     		IT NE 
 671 2900 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 672 2904 B8E5     		_NEXT
 673              	
 674              	/***********************************
 675              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 676              	 	Rotate top 3 items.
 677              	*************************************/
 678 2906 F6280000 		_HEADER ROT,3,"ROT"
 678      03524F54 
 678      00BF
 679 2910 3868     		LDR	T0,[DSP]  // w2 
 680 2912 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 681 2914 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 682 2916 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 683 2918 AEE5     		_NEXT
 684              	
 685              	/*********************************
 686              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 687              	 left rotate top 3 elements 
 688              	********************************/
 689 291a 0A290000 		_HEADER NROT,4,"-ROT"
 689      042D524F 
 689      5400
 690 2924 7868     		LDR T0,[DSP,#4]
 691 2926 7E60     		STR TOS,[DSP,#4]	
 692 2928 3E68     		LDR TOS,[DSP]
 693 292a 3860     		STR T0,[DSP]
 694 292c A4E5     		_NEXT 
 695              	
 696              	/*********************************
 697              	    2DROP	( w1 w2 -- )
 698              	 	Drop top 2 items.
 699              	*********************************/
 700 292e 1E290000 		_HEADER DDROP,5,"2DROP"
 700      05324452 
 700      4F50
 701 2938 57F8046B 		_POP
 702 293c 57F8046B 		_POP
 703 2940 9AE5     		_NEXT 
 704              	
 705              	/********************************
 706              		3DROP ( w1 w2 w3 -- )
 707              		drop top 3 items 
 708              	********************************/
 709 2942 32290000 		_HEADER TDROP,5,"3DROP"
 709      05334452 
 709      4F50
 710 294c 07F10807 	    add DSP,#8 
 711 2950 57F8046B 	    _POP 
 712 2954 90E5     	    _NEXT 
 713              	
ARM GAS  forth.s 			page 103


 714              	/***********************************
 715              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 716              	 	Duplicate top 2 items.
 717              	************************************/
 718 2956 46290000 		_HEADER DDUP,4,"2DUP"
 718      04324455 
 718      5000
 719 2960 3868     		LDR	T0,[DSP] // w1
 720 2962 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 721 2966 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 722 296a 85E5     		_NEXT
 723              	
 724              	/******************************
 725              	    D+	( d1 d2 -- d3 )
 726              	 	Add top 2 double numbers.
 727              	******************************/
 728 296c 5A290000 		_HEADER DPLUS,2,"D+"
 728      02442B00 
 729 2974 57F8045B 		LDR	WP,[DSP],#4
 730 2978 57F8042B 		LDR	T2,[DSP],#4
 731 297c 3B68     		LDR	T3,[DSP]
 732 297e ED18     		ADDS	WP,WP,T3
 733 2980 3D60     		STR	WP,[DSP]
 734 2982 46EB0206 		ADC	TOS,TOS,T2
 735 2986 77E5     		_NEXT
 736              	
 737              	/******************************
 738              		DABS ( d -- ud )
 739              		absolute value double 
 740              	*****************************/
 741 2988 70290000 		_HEADER DABS,4,"DABS"
 741      04444142 
 741      530000BF 
 742 2994 16F0004F 		tst TOS,#(1<<31)
 743 2998 09D0     		beq 9f 
 744 299a 6FEA0606 		mvn TOS,TOS 
 745 299e 3D68     		ldr WP,[DSP]
 746 29a0 6FEA0505 		mvn WP,WP 
 747 29a4 0135     		adds WP,#1
 748 29a6 3D60     		str WP,[DSP]
 749 29a8 01D3     		bcc 9f 
 750 29aa 06F10106 		add TOS,#1 
 751 29ae 63E5     	9:	_NEXT 
 752              	
 753              	/*****************************
 754              	  UD> ( d1 d2 -- f )
 755              	  unsigned compare double d1 > d2 
 756              	******************************/
 757 29b0 8C290000 		_HEADER UDGREAT,3,"UD>"
 757      0355443E 
 758 29b8 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 759 29bc 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 760 29be B042     		cmp T0,TOS 
 761 29c0 02D8     		bhi 1f
 762 29c2 04D4     		bmi 2f  
 763 29c4 A942     		cmp T1,WP 
 764 29c6 02D9     		bls 2f 
ARM GAS  forth.s 			page 104


 765 29c8 4FF0FF36 	1:	mov TOS,#-1 
 766 29cc 54E5     		_NEXT 
 767 29ce 4FF00006 	2:  mov TOS,#0 
 768 29d2 51E5     		_NEXT 
 769              	
 770              	/******************************
 771              		D0= ( d -- f )
 772              		double 0= 
 773              	*****************************/
 774 29d4 B4290000 		_HEADER DZEQUAL,3,"D0="
 774      0344303D 
 775 29dc 3046     		mov T0,TOS
 776 29de 57F8046B 		_POP 
 777 29e2 46EA0006 		orr TOS,T0 
 778 29e6 01D0     		beq 9f
 779 29e8 6FF00006 		mvn TOS,#0 
 780 29ec 44E5     	9:	_NEXT 
 781              	
 782              	/*****************************
 783              	    NOT	 ( w -- !w )
 784              	 	1"s complement.
 785              	*****************************/
 786 29ee D8290000 		_HEADER INVER,3,"NOT"
 786      034E4F54 
 786      00BF
 787 29f8 6FEA0606 		MVN	TOS,TOS
 788 29fc 3CE5     		_NEXT
 789              	
 790              	/*****************************
 791              	    NEGATE	( w -- -w )
 792              	 	2's complement.
 793              	***************************/
 794 29fe F2290000 		_HEADER NEGAT,6,"NEGATE"
 794      064E4547 
 794      41544500 
 794      00BF
 795 2a0c C6F10006 		RSB	TOS,TOS,#0
 796 2a10 32E5     		_NEXT
 797              	
 798              	/***************************
 799              	    ABS	 ( w -- |w| )
 800              	 	Absolute.
 801              	**************************/
 802 2a12 022A0000 		_HEADER ABSS,3,"ABS"
 802      03414253 
 802      00BF
 803 2a1c 16F0004F 		TST	TOS,#0x80000000
 804 2a20 18BF     		IT NE
 805 2a22 7642     	    RSBNE   TOS,TOS,#0
 806 2a24 28E5     		_NEXT
 807              	
 808              	/**************************
 809              		CLZ ( n - n )
 810              		count leading zeros 
 811              	**************************/
 812 2a26 162A0000 		_HEADER CLZ,3,"CLZ"
 812      03434C5A 
ARM GAS  forth.s 			page 105


 812      00BF
 813 2a30 B6FA86F6 		clz TOS,TOS 
 814 2a34 20E5     		_NEXT 
 815              	
 816              	/*************************
 817              		CTZ ( n -- n )
 818              		count trailing zeros 
 819              	************************/
 820 2a36 2A2A0000 		_HEADER CTZ,3,"CTZ"
 820      0343545A 
 820      00BF
 821 2a40 80EA0000 		eor T0,T0 
 822 2a44 16F0010F 	1:  tst TOS,#1 
 823 2a48 04D1     		bne 2f 
 824 2a4a 4FEA5606 		lsr TOS,#1 
 825 2a4e 00F10100 		add T0,#1 
 826 2a52 F7E7     		b 1b 
 827 2a54 0646     	2:  mov TOS,T0 
 828 2a56 0FE5     		_NEXT 
 829              	
 830              	
 831              	/*******************
 832              	  0= ( w -- f )
 833              	 TOS==0?
 834              	*******************/
 835 2a58 3A2A0000 		_HEADER ZEQUAL,2,"0="
 835      02303D00 
 836 2a60 16B9     		cbnz TOS,1f
 837 2a62 4FF0FF36 		mov TOS,#-1
 838 2a66 07E5     		_NEXT 
 839 2a68 86EA0606 	1:  eor TOS,TOS,TOS  
 840 2a6c 04E5     		_NEXT 	
 841              	
 842              	/*********************
 843              	    =	 ( w w -- t )
 844              	 	Equal?
 845              	*********************/
 846 2a6e 5C2A0000 		_HEADER EQUAL,1,"="
 846      013D
 847 2a74 57F8045B 		LDR	WP,[DSP],#4
 848 2a78 AE42     		CMP	TOS,WP
 849 2a7a 0CBF     		ITE EQ 
 850 2a7c 6FF00006 	    MVNEQ	TOS,#0
 851 2a80 0026     		MOVNE	TOS,#0
 852 2a82 F9E4     		_NEXT
 853              	
 854              	/************************
 855              		<> ( w w -- f )
 856              		different?
 857              	************************/
 858 2a84 722A0000 		_HEADER DIFF,2,"<>"
 858      023C3E00 
 859 2a8c 3046     		mov T0,TOS 
 860 2a8e 57F8046B 		_POP 
 861 2a92 86EA0006 		eor TOS,T0
 862 2a96 B6FA86F0 		clz T0,TOS 
 863 2a9a 06FA00F6 		lsl TOS,T0 
ARM GAS  forth.s 			page 106


 864 2a9e 4FEAE676 		asr TOS,#31 
 865 2aa2 E9E4     		_NEXT 
 866              	
 867              	/************************
 868              	    U<	 ( w w -- t )
 869              	 	Unsigned less?
 870              	*************************/
 871 2aa4 882A0000 		_HEADER ULESS,2,"U<"
 871      02553C00 
 872 2aac 57F8045B 		LDR	WP,[DSP],#4
 873 2ab0 B542     		CMP	WP,TOS
 874 2ab2 34BF     		ITE CC 
 875 2ab4 6FF00006 		MVNCC	TOS,#0
 876 2ab8 0026     		MOVCS	TOS,#0
 877 2aba DDE4     		_NEXT
 878              	
 879              	/**********************
 880              	    <	( w w -- t )
 881              	 	Less?
 882              	**********************/
 883 2abc A82A0000 		_HEADER LESS,1,"<"
 883      013C00BF 
 884 2ac4 57F8045B 		LDR	WP,[DSP],#4
 885 2ac8 B542     		CMP	WP,TOS
 886 2aca B4BF     	    ITE LT
 887 2acc 6FF00006 		MVNLT	TOS,#0
 888 2ad0 0026     		MOVGE	TOS,#0
 889 2ad2 D1E4     		_NEXT 
 890              	
 891              	/**********************
 892              		U> ( u u -- t|f )
 893              	    unsigned greater 
 894              	**********************/
 895 2ad4 C02A0000 		_HEADER UGREAT,2,"U>"
 895      02553E00 
 896 2adc 57F8045B 		LDR WP,[DSP],#4 
 897 2ae0 AE42     		CMP TOS,WP 
 898 2ae2 34BF     		ITE CC  
 899 2ae4 6FF00006 		MVNCC TOS,#0 
 900 2ae8 0026     		MOVCS TOS,#0
 901 2aea C5E4     		_NEXT 
 902              	
 903              	/***********************
 904              	    >	( w w -- t )
 905              	 	greater?
 906              	***********************/
 907 2aec D82A0000 		_HEADER GREAT,1,">"
 907      013E00BF 
 908 2af4 57F8045B 		LDR	WP,[DSP],#4
 909 2af8 B542     		CMP	WP,TOS
 910 2afa CCBF     		ITE GT
 911 2afc 6FF00006 	    MVNGT	TOS,#0
 912 2b00 0026     		MOVLE	TOS,#0
 913 2b02 B9E4     		_NEXT
 914              	
 915              	/***************************
 916              	    MAX	 ( w w -- max )
ARM GAS  forth.s 			page 107


 917              	 	Leave maximum.
 918              	***************************/
 919 2b04 F02A0000 		_HEADER MAX,3,"MAX"
 919      034D4158 
 920 2b0c 57F8045B 		LDR	WP,[DSP],#4
 921 2b10 B542     		CMP	WP,TOS
 922 2b12 C8BF     		IT GT 
 923 2b14 2E46     		MOVGT	TOS,WP
 924 2b16 AFE4     		_NEXT 
 925              	
 926              	/**************************
 927              	    MIN	 ( w w -- min )
 928              	 	Leave minimum.
 929              	**************************/
 930 2b18 082B0000 		_HEADER MIN,3,"MIN"
 930      034D494E 
 931 2b20 57F8045B 		LDR	WP,[DSP],#4
 932 2b24 B542     		CMP	WP,TOS
 933 2b26 B8BF     		IT LT
 934 2b28 2E46     		MOVLT	TOS,WP
 935 2b2a A5E4     		_NEXT
 936              	
 937              	/***********************
 938              	    +!	 ( w a -- )
 939              	 	Add to memory.
 940              	***********************/
 941 2b2c 1C2B0000 		_HEADER PSTOR,2,"+!"
 941      022B2100 
 942 2b34 57F8045B 		LDR	WP,[DSP],#4
 943 2b38 3268     		LDR	T2,[TOS]
 944 2b3a 2A44     		ADD	T2,T2,WP
 945 2b3c 3260     		STR	T2,[TOS]
 946 2b3e 57F8046B 		_POP
 947 2b42 99E4     		_NEXT
 948              	
 949              	/************************
 950              	    2!	 ( d a -- )
 951              	 	Store double number.
 952              	*************************/
 953 2b44 302B0000 		_HEADER DSTOR,2,"2!"
 953      02322100 
 954 2b4c 57F8045B 		LDR	WP,[DSP],#4
 955 2b50 57F8042B 		LDR	T2,[DSP],#4
 956 2b54 46F8045B 		STR	WP,[TOS],#4
 957 2b58 3260     		STR	T2,[TOS]
 958 2b5a 57F8046B 		_POP
 959 2b5e 8BE4     		_NEXT
 960              	
 961              	/************************
 962              	    2@	 ( a -- d )
 963              	 	Fetch double number.
 964              	************************/
 965 2b60 482B0000 		_HEADER DAT,2,"D@"
 965      02444000 
 966 2b68 7568     		LDR	WP,[TOS,#4]
 967 2b6a 47F8045D 		STR	WP,[DSP,#-4]!
 968 2b6e 3668     		LDR	TOS,[TOS]
ARM GAS  forth.s 			page 108


 969 2b70 82E4     		_NEXT
 970              	
 971              	/***************************
 972              	    COUNT	( b -- b+1 c )
 973              	 	Fetch length of string.
 974              	****************************/
 975 2b72 642B0000 		_HEADER COUNT,5,"COUNT"
 975      05434F55 
 975      4E54
 976 2b7c 16F8015B 		LDRB	WP,[TOS],#1
 977 2b80 47F8046D 		_PUSH
 978 2b84 2E46     		MOV	TOS,WP
 979 2b86 77E4     		_NEXT
 980              	
 981              	/******************************
 982              	    DNEGATE	( d -- -d )
 983              	 	Negate double number.
 984              	**************************/
 985 2b88 762B0000 		_HEADER DNEGA,7,"DNEGATE"
 985      07444E45 
 985      47415445 
 986 2b94 3D68     		LDR	WP,[DSP]
 987 2b96 A2EB0202 		SUB	T2,T2,T2
 988 2b9a 551B     		SUBS WP,T2,WP
 989 2b9c 62EB0606 		SBC	TOS,T2,TOS
 990 2ba0 3D60     		STR	WP,[DSP]
 991 2ba2 69E4     		_NEXT
 992              	
 993              	/******************************
 994              	  System and user variables
 995              	******************************/
 996              	
 997              	/*******************************
 998              	  doVAR	( -- a )
 999              	  Run time routine for VARIABLE and CREATE.
 1000              	hidden word used by compiler
 1001              	********************************/
 1002              	DOVAR:
 1003 2ba4 47F8046D 		_PUSH
 1004 2ba8 6646     		MOV TOS,IP
 1005 2baa 0CF1040C 		ADD IP,IP,#4 
 1006 2bae 66E4     		B UNNEST 
 1007              	
 1008              	/**********************************
 1009              	    doCON	( -- a ) 
 1010              	 	Run time routine for CONSTANT.
 1011              	hidden word used by compiler 
 1012              	***********************************/
 1013              	DOCON:
 1014 2bb0 47F8046D 		_PUSH
 1015 2bb4 5CF8046B 		LDR.W TOS,[IP],#4 
 1016 2bb8 61E4     		B UNNEST 
 1017              	
 1018              	/***********************
 1019              	  system variables 
 1020              	***********************/
 1021              	
ARM GAS  forth.s 			page 109


 1022              	/**************************
 1023              	 SEED ( -- a)
 1024              	 return PRNG seed address 
 1025              	**************************/
 1026 2bba 8C2B0000 		_HEADER SEED,4,"SEED"
 1026      04534545 
 1026      4400
 1027 2bc4 47F8046D 		_PUSH 
 1028 2bc8 04F10406 		ADD TOS,UP,#RNDSEED
 1029 2bcc 54E4     		_NEXT 	
 1030              	
 1031              	/****************************************
 1032              	  MSEC ( -- a)
 1033              	 return address of milliseconds counter
 1034              	****************************************/
 1035 2bce BE2B0000 		_HEADER MSEC,4,"MSEC"
 1035      044D5345 
 1035      4300
 1036 2bd8 47F8046D 	    _PUSH
 1037 2bdc 04F10806 	    ADD TOS,UP,#TICKS
 1038 2be0 4AE4     	    _NEXT 
 1039              	
 1040              	/*************************
 1041              	 TIMER ( -- a )
 1042              	 count down timer 
 1043              	**********************/
 1044 2be2 D22B0000 		_HEADER TIMER,5,"TIMER"
 1044      0554494D 
 1044      4552
 1045 2bec 47F8046D 		 _PUSH 
 1046 2bf0 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1047 2bf4 40E4     	    _NEXT
 1048              	
 1049              	/*****************************
 1050              	    'BOOT	 ( -- a )
 1051              	 	boot up application vector 
 1052              	*****************************/
 1053 2bf6 E62B0000 		_HEADER TBOOT,5,"'BOOT"
 1053      0527424F 
 1053      4F54
 1054 2c00 47F8046D 		_PUSH
 1055 2c04 04F11006 		ADD	TOS,UP,#BOOT 
 1056 2c08 36E4     		_NEXT
 1057              		
 1058              	/********************************************	
 1059              	    BASE	( -- a )
 1060              	 	Storage of the radix base for numeric I/O.
 1061              	**********************************************/
 1062 2c0a FA2B0000 		_HEADER BASE,4,"BASE"
 1062      04424153 
 1062      4500
 1063 2c14 47F8046D 		_PUSH
 1064 2c18 04F11C06 		ADD	TOS,UP,#NBASE
 1065 2c1c 2CE4     		_NEXT
 1066              	
 1067              	/*****************************************************
 1068              	    temp	 ( -- a )
ARM GAS  forth.s 			page 110


 1069              	 	A temporary storage location used in parse and find.
 1070              	hidden word for internal use
 1071              	********************************************************/
 1072              	TEMP:
 1073 2c1e 47F8046D 		_PUSH
 1074 2c22 04F12006 		ADD	TOS,UP,#TMP
 1075 2c26 27E4     		_NEXT
 1076              	
 1077              	/*******************************************
 1078              	    SPAN	( -- a )
 1079              	 	Hold character count received by EXPECT.
 1080              	********************************************/
 1081 2c28 0E2C0000 		_HEADER SPAN,4,"SPAN"
 1081      04535041 
 1081      4E0000BF 
 1082 2c34 47F8046D 		_PUSH
 1083 2c38 04F12406 		ADD	TOS,UP,#CSPAN
 1084 2c3c 1CE4     		_NEXT
 1085              	
 1086              	/***********************************************************
 1087              	    >IN	 ( -- a )
 1088              	 	Hold the character pointer while parsing input stream.
 1089              	***********************************************************/
 1090 2c3e 2C2C0000 		_HEADER INN,3,">IN"
 1090      033E494E 
 1090      00BF
 1091 2c48 47F8046D 		_PUSH
 1092 2c4c 04F12806 		ADD	TOS,UP,#TOIN
 1093 2c50 12E4     		_NEXT
 1094              	
 1095              	/**************************************
 1096              	    #TIB	( -- a )
 1097              	 	Hold the current count and address 
 1098              		of the terminal input buffer.
 1099              	**************************************/
 1100 2c52 422C0000 		_HEADER NTIB,4,"#TIB"
 1100      04235449 
 1100      4200
 1101 2c5c 47F8046D 		_PUSH
 1102 2c60 04F12C06 		ADD	TOS,UP,#NTIBB
 1103 2c64 08E4     		_NEXT
 1104              	
 1105              	/******************************
 1106              	    'EVAL	( -- a )
 1107              	 	Execution vector of EVAL.
 1108              	*******************************/
 1109 2c66 562C0000 		_HEADER TEVAL,5,"'EVAL"
 1109      05274556 
 1109      414C
 1110 2c70 47F8046D 		_PUSH
 1111 2c74 04F13406 		ADD	TOS,UP,#EVAL
 1112 2c78 FFF7FEBB 		_NEXT
 1113              	
 1114              	/*********************************
 1115              	    HLD	 ( -- a )
 1116              	 	Hold a pointer in building a 
 1117              		numeric output string.
ARM GAS  forth.s 			page 111


 1118              	*********************************/
 1119 2c7c 6A2C0000 		_HEADER HLD,3,"HLD"
 1119      03484C44 
 1120 2c84 47F8046D 		_PUSH
 1121 2c88 04F13806 		ADD	TOS,UP,#VHOLD
 1122 2c8c FFF7F4BB 		_NEXT
 1123              	
 1124              	/**********************************
 1125              	    CONTEXT	( -- a )
 1126              	 	A area to specify vocabulary 
 1127              		search order.
 1128              	**********************************/
 1129 2c90 802C0000 		_HEADER CNTXT,7,"CONTEXT"
 1129      07434F4E 
 1129      54455854 
 1130              	CRRNT:
 1131 2c9c 47F8046D 		_PUSH
 1132 2ca0 04F13C06 		ADD	TOS,UP,#CTXT
 1133 2ca4 FFF7E8BB 		_NEXT
 1134              	
 1135              	/******************************
 1136              	    CP	( -- a )
 1137              	 	Point to top name in RAM 
 1138              		vocabulary.
 1139              	******************************/
 1140 2ca8 942C0000 		_HEADER CPP,2,"CP"
 1140      02435000 
 1141 2cb0 47F8046D 		_PUSH
 1142 2cb4 04F14406 		ADD	TOS,UP,#USER_CTOP
 1143 2cb8 FFF7DEBB 		_NEXT
 1144              	
 1145              	/****************************
 1146              	   FCP ( -- a )
 1147              	  Point ot top of Forth 
 1148              	  system dictionary
 1149              	****************************/
 1150 2cbc AC2C0000 		_HEADER FCP,3,"FCP"
 1150      03464350 
 1151 2cc4 47F8046D 		_PUSH 
 1152 2cc8 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1153 2ccc FFF7D4BB 		_NEXT 
 1154              	
 1155              	/***************************
 1156              	    LAST	( -- a )
 1157              	 	Point to the last name 
 1158              		in the name dictionary.
 1159              	***************************/
 1160 2cd0 C02C0000 		_HEADER LAST,4,"LAST"
 1160      044C4153 
 1160      540000BF 
 1161 2cdc 47F8046D 		_PUSH
 1162 2ce0 04F14806 		ADD	TOS,UP,#LASTN
 1163 2ce4 FFF7C8BB 		_NEXT
 1164              	
 1165              	
 1166              	/***********************
 1167              		system constants 
ARM GAS  forth.s 			page 112


 1168              	***********************/
 1169              	
 1170              	/********************************
 1171              		USER-BEGIN ( -- a )
 1172              	  where user area begin in RAM
 1173              	********************************/
 1174 2ce8 D42C0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1174      0A555345 
 1174      522D4245 
 1174      47494E00 
 1175 2cf8 47F8046D 		_PUSH 
 1176 2cfc DFF80460 		ldr TOS,USR_BGN_ADR 
 1177 2d00 FFF7BABB 		_NEXT 
 1178              	USR_BGN_ADR:
 1179 2d04 12050020 	.word  DTOP 
 1180              	
 1181              	/*********************************
 1182              	  USER_END ( -- a )
 1183              	  where user area end in RAM 
 1184              	******************************/
 1185 2d08 EC2C0000 		_HEADER USER_END,8,"USER-END"
 1185      08555345 
 1185      522D454E 
 1185      440000BF 
 1186 2d18 47F8046D 		_PUSH 
 1187 2d1c DFF80460 		ldr TOS,USER_END_ADR 
 1188 2d20 FFF7AABB 		_NEXT 
 1189              	USER_END_ADR:
 1190 2d24 FC800120 		.word DEND 
 1191              	
 1192              	
 1193              	/* *********************
 1194              	  Common functions
 1195              	***********************/
 1196              	
 1197              	/********************************
 1198              	    WITHIN	( u ul uh -- t )
 1199              	 	Return true if u is within 
 1200              		the range of ul and uh.
 1201              	********************************/
 1202 2d28 0C2D0000 		_HEADER WITHI,6,"WITHIN"
 1202      06574954 
 1202      48494E00 
 1203 2d34 504700BF 		_NEST
 1204 2d38 4D270000 		_ADR	OVER
 1205 2d3c FD270000 		_ADR	SUBB
 1206 2d40 D1260000 		_ADR	TOR
 1207 2d44 FD270000 		_ADR	SUBB
 1208 2d48 A9260000 		_ADR	RFROM
 1209 2d4c AD2A0000 		_ADR	ULESS
 1210 2d50 7F240000 		_UNNEST
 1211              	
 1212              	//  Divide
 1213              	
 1214              	/*************************************
 1215              	    UM/MOD	( udl udh u -- ur uq )
 1216              	 	Unsigned divide of a double by a 
ARM GAS  forth.s 			page 113


 1217              		single. Return mod and quotient.
 1218              	**************************************/
 1219 2d54 2C2D0000 		_HEADER UMMOD,6,"UM/MOD"
 1219      06554D2F 
 1219      4D4F4400 
 1220 2d60 4FF00103 		MOV	T3,#1
 1221 2d64 57F8045B 		LDR	WP,[DSP],#4
 1222 2d68 3A68     		LDR	T2,[DSP]
 1223              	UMMOD0:
 1224 2d6a 9218     		ADDS	T2,T2,T2
 1225 2d6c 6D41     		ADCS	WP,WP,WP
 1226 2d6e 04D3     		BCC	UMMOD1
 1227 2d70 A5EB0605 		SUB	WP,WP,TOS
 1228 2d74 02F10102 		ADD	T2,T2,#1
 1229 2d78 04E0     		B UMMOD2
 1230              	UMMOD1:
 1231 2d7a AD1B     		SUBS	WP,WP,TOS 
 1232 2d7c 28BF     		IT CS 
 1233 2d7e 0132     		ADDCS	T2,T2,#1
 1234 2d80 00D2     		BCS	UMMOD2
 1235 2d82 3544     		ADD	WP,WP,TOS
 1236              	UMMOD2:
 1237 2d84 DB18     		ADDS	T3,T3,T3
 1238 2d86 F0D3     		BCC	UMMOD0
 1239 2d88 1646     		MOV	TOS,T2
 1240 2d8a 3D60     		STR	WP,[DSP]
 1241 2d8c FFF774BB 		_NEXT
 1242              	
 1243              	/****************************
 1244              	    M/MOD	( d n -- r q )
 1245              	 	Signed floored divide 
 1246              		of double by single. 
 1247              		Return mod and quotient.
 1248              	****************************/
 1249 2d90 582D0000 		_HEADER MSMOD,5,"M/MOD"
 1249      054D2F4D 
 1249      4F4400BF 
 1250 2d9c 504700BF 		_NEST
 1251 2da0 29270000 		_ADR	DUPP
 1252 2da4 5D270000 		_ADR	ZLESS
 1253 2da8 29270000 		_ADR	DUPP
 1254 2dac D1260000 		_ADR	TOR
 1255 2db0 37260000 		_QBRAN MMOD1
 1255      C82D0000 
 1256 2db8 0D2A0000 		_ADR	NEGAT
 1257 2dbc D1260000 		_ADR	TOR
 1258 2dc0 952B0000 		_ADR	DNEGA
 1259 2dc4 A9260000 		_ADR	RFROM
 1260              	MMOD1:
 1261 2dc8 D1260000 		_ADR	TOR
 1262 2dcc 29270000 		_ADR	DUPP
 1263 2dd0 5D270000 		_ADR	ZLESS
 1264 2dd4 37260000 		_QBRAN MMOD2
 1264      E42D0000 
 1265 2ddc BD260000 		_ADR	RAT
 1266 2de0 ED270000 		_ADR	PLUS
 1267              	MMOD2:
ARM GAS  forth.s 			page 114


 1268 2de4 A9260000 		_ADR	RFROM
 1269 2de8 612D0000 		_ADR	UMMOD
 1270 2dec A9260000 		_ADR	RFROM
 1271 2df0 37260000 		_QBRAN	MMOD3
 1271      042E0000 
 1272 2df8 39270000 		_ADR	SWAP
 1273 2dfc 0D2A0000 		_ADR	NEGAT
 1274 2e00 39270000 		_ADR	SWAP
 1275              	MMOD3:   
 1276 2e04 7F240000 		_UNNEST
 1277              	
 1278              	/****************************
 1279              		S>D ( n -- d )
 1280              		convert single to double 
 1281              	*****************************/
 1282 2e08 942D0000 		_HEADER STOD,3,"S>D"
 1282      03533E44 
 1283 2e10 47F8046D 		_PUSH 
 1284 2e14 4FEAE676 		ASR TOS,#31
 1285 2e18 FFF72EBB 		_NEXT 
 1286              	
 1287              	/****************************
 1288              		D2* ( d -- d<<1 )
 1289              		double * 2 
 1290              	***************************/
 1291 2e1c 0C2E0000 		_HEADER D2STAR,3,"D2*"
 1291      0344322A 
 1292 2e24 3868     		ldr T0,[DSP]
 1293 2e26 4000     		lsls T0,#1
 1294 2e28 3860     		str T0,[DSP]
 1295 2e2a 4FEA4606 		lsl TOS,#1
 1296 2e2e 46F10006 		adc TOS,#0
 1297 2e32 FFF721BB 		_NEXT 
 1298              	
 1299              	/****************************
 1300              		D2/  ( d -- d>>1 )
 1301              		double signed divide by 2 
 1302              	*****************************/
 1303 2e36 202E0000 		_HEADER D2SL,3,"D2/"
 1303      0344322F 
 1303      00BF
 1304 2e40 3868     		ldr T0,[DSP]
 1305 2e42 7610     		asrs TOS,#1
 1306 2e44 4FEA3000 		rrx T0,T0 
 1307 2e48 3860     		str T0,[DSP]
 1308 2e4a FFF715BB 		_NEXT 
 1309              	
 1310              	/***************************
 1311              		D/MOD  ( d+ n+ - r+ qd+ )
 1312              		unsigned double division
 1313              		and modulo 
 1314              		output:
 1315              			qd+ = d+ / n+
 1316              			r+ = qd+ - (d+ * n+ )
 1317              	***************************/
 1318 2e4e 3A2E0000 		_HEADER DSLMOD,5,"D/MOD"
 1318      05442F4D 
ARM GAS  forth.s 			page 115


 1318      4F44
 1319 2e58 3D68     		ldr WP,[DSP]  // d+ high 
 1320 2e5a 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1321 2e5c 4FF02002 		mov T2,#32 // shift counter  
 1322 2e60 81EA0101 		eor T1,T1 // quotient T0:T1  
 1323 2e64 25B9     		cbnz WP,1f    
 1324 2e66 82EA0202 		eor T2,T2 // nos shifting required 
 1325 2e6a 0546     		mov WP,T0 
 1326 2e6c 80EA0000 		eor T0,T0 
 1327 2e70 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1328 2e72 15F0004F 	    tst WP,#(1<<31) 
 1329 2e76 06D1     		bne 2f
 1330 2e78 4918     		adds T1,T1,T1 
 1331 2e7a 4041     		adcs T0,T0,T0 
 1332 2e7c 45EB0505 		adc WP,WP,WP 
 1333 2e80 A2F10102 		sub T2,#1 
 1334 2e84 F4E7     		b 1b 
 1335 2e86 B5FBF6F3 	2:  udiv T3,WP,TOS
 1336 2e8a 41EA0301 		orr T1,T3   // append partial quotient 
 1337 2e8e 06FB03F3 		mul T3,TOS
 1338 2e92 A5EB0305 		sub WP,T3 //remainder 
 1339 2e96 02B1     		cbz T2,8f 
 1340 2e98 EAE7     		b 1b 
 1341 2e9a 7D60     	8:	str WP,[DSP,#4] // remainder 
 1342 2e9c 3960     		str T1,[DSP]  // q lo 
 1343 2e9e 0646     		mov TOS,T0  // q hi 		
 1344 2ea0 FFF7EABA 		_NEXT 
 1345              	
 1346              	
 1347              	/****************************
 1348              		D/  ( ud u -- udq )
 1349              		divide unsigned double 
 1350              		by unsigned single 
 1351              		return double quotient
 1352              		rounded to nearest integer 
 1353              	****************************/
 1354 2ea4 522E0000 		_HEADER DSLASH,2,"D/"
 1354      02442F00 
 1355 2eac 504700BF 		_NEST 
 1356 2eb0 29270000 		_ADR DUPP 
 1357 2eb4 F7250000 		_DOLIT 1 
 1357      01000000 
 1358 2ebc C5270000 		_ADR RSHIFT 
 1359 2ec0 D1260000 		_ADR TOR 
 1360 2ec4 592E0000 		_ADR DSLMOD 
 1361 2ec8 11290000 		_ADR ROT 
 1362 2ecc A9260000 		_ADR RFROM 
 1363 2ed0 F52A0000 		_ADR GREAT 
 1364 2ed4 37260000 		_QBRAN 9f
 1364      EC2E0000 
 1365 2edc F7250000 		_DOLIT 1 
 1365      01000000 
 1366 2ee4 112E0000 		_ADR STOD 
 1367 2ee8 75290000 		_ADR DPLUS 
 1368 2eec 7F240000 	9:	_UNNEST 
 1369              	
 1370              	
ARM GAS  forth.s 			page 116


 1371              	/****************************
 1372              		D* ( d s -- d )
 1373              	    multiply a double 
 1374              		by a single 
 1375              	****************************/
 1376 2ef0 A82E0000 		_HEADER DSTAR,2,"D*"
 1376      02442A00 
 1377              	/*
 1378              		_NEST 
 1379              		_ADR NROT 
 1380              		_ADR DUPP 
 1381              		_ADR TOR 
 1382              		_ADR DABS
 1383              		_ADR SWAP  
 1384              		_ADR ROT   
 1385              		_ADR DUPP
 1386              		_ADR TOR
 1387              		_ADR MSTAR
 1388              		_ADR ROT
 1389              		_ADR RFROM 
 1390              		_ADR STAR 
 1391              		_ADR PLUS
 1392              		_ADR RFROM 
 1393              		_ADR ZLESS 
 1394              		_QBRAN 9f
 1395              		_ADR DNEGA   
 1396              	9:	_UNNEST 
 1397              	*/
 1398 2ef8 57F8040B 		ldr T0,[DSP],#4
 1399 2efc 3968     		ldr T1,[DSP]
 1400 2efe 3860     		str T0,[DSP] 
 1401 2f00 83EA0303 		eor T3,T3 
 1402 2f04 10F0004F 		tst T0,#(1<<31)
 1403 2f08 02D0     		beq 1f 
 1404              		// DNEGATE 
 1405 2f0a 591A     		subs T1,T3,T1  
 1406 2f0c 63EB0000 		sbc T0,T3,T0 
 1407 2f10 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1408 2f14 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1409 2f18 0E44     		add TOS,T1  // TOS:T2 product  
 1410 2f1a 3868     		ldr r0,[DSP]
 1411 2f1c 10F0004F 		tst T0,#(1<<31)
 1412 2f20 02D0     		beq 2f 
 1413              		// DNEGATE product 
 1414 2f22 9A1A     		subs T2,T3,T2  
 1415 2f24 63EB0606 		sbc TOS,T3,TOS 
 1416 2f28 3A60     	2:  str T2,[DSP]
 1417 2f2a FFF7A5BA 		_NEXT 
 1418              	
 1419              	
 1420              	/****************************
 1421              	   /MOD	( n n -- r q )
 1422              		Signed divide. Return
 1423              		mod and quotient.
 1424              	****************************/
 1425 2f2e F42E0000 		_HEADER SLMOD,4,"/MOD"
 1425      042F4D4F 
ARM GAS  forth.s 			page 117


 1425      4400
 1426 2f38 504700BF 		_NEST
 1427 2f3c 4D270000 		_ADR	OVER
 1428 2f40 5D270000 		_ADR	ZLESS
 1429 2f44 39270000 		_ADR	SWAP
 1430 2f48 9D2D0000 		_ADR	MSMOD
 1431 2f4c 7F240000 		_UNNEST
 1432              	
 1433              	/**************************
 1434              	    MOD	 ( n n -- r )
 1435              	 	Signed divide. Return
 1436              		mod only.
 1437              	**************************/
 1438 2f50 322F0000 		_HEADER MODD,3,"MOD"
 1438      034D4F44 
 1439 2f58 504700BF 		_NEST
 1440 2f5c 392F0000 		_ADR	SLMOD
 1441 2f60 19270000 		_ADR	DROP
 1442 2f64 7F240000 		_UNNEST
 1443              	
 1444              	/*************************
 1445              	    /	   ( n n -- q )
 1446              	 	Signed divide. Return
 1447              		quotient only.
 1448              	**************************/
 1449 2f68 542F0000 		_HEADER SLASH,1,"/"
 1449      012F00BF 
 1450 2f70 504700BF 		_NEST
 1451 2f74 392F0000 		_ADR	SLMOD
 1452 2f78 39270000 		_ADR	SWAP
 1453 2f7c 19270000 		_ADR	DROP
 1454 2f80 7F240000 		_UNNEST
 1455              	
 1456              	//******************************
 1457              	//  */MOD	( n1 n2 n3 -- r q )
 1458              	/* 	Multiply n1 and n2, then 
 1459              		divide by n3. Return 
 1460              		mod and quotient.
 1461              	******************************/
 1462 2f84 6C2F0000 		_HEADER SSMOD,5,"*/MOD"
 1462      052A2F4D 
 1462      4F4400BF 
 1463 2f90 504700BF 		_NEST
 1464 2f94 D1260000 		_ADR	TOR
 1465 2f98 35280000 		_ADR	MSTAR
 1466 2f9c A9260000 		_ADR	RFROM
 1467 2fa0 9D2D0000 		_ADR	MSMOD
 1468 2fa4 7F240000 		_UNNEST
 1469              	
 1470              	//*******************************
 1471              	//  */ ( n1 n2 n3 -- q )
 1472              	/* 	Multiply n1 by n2, then 
 1473              		divide by n3. Return quotient
 1474              		only.
 1475              	*******************************/
 1476 2fa8 882F0000 		_HEADER STASL,2,"*/"
 1476      022A2F00 
ARM GAS  forth.s 			page 118


 1477 2fb0 504700BF 		_NEST
 1478 2fb4 912F0000 		_ADR	SSMOD
 1479 2fb8 39270000 		_ADR	SWAP
 1480 2fbc 19270000 		_ADR	DROP
 1481 2fc0 7F240000 		_UNNEST
 1482              	
 1483              	/*******************
 1484              	  Miscellaneous
 1485              	*******************/
 1486              	
 1487              	/*************************
 1488              	    ALIGNED	( b -- a )
 1489              	 	Align address to the 
 1490              		cell boundary.
 1491              	**************************/
 1492 2fc4 AC2F0000 		_HEADER ALGND,7,"ALIGNED"
 1492      07414C49 
 1492      474E4544 
 1493 2fd0 06F10306 		ADD	TOS,TOS,#3
 1494 2fd4 6FF00305 		MVN	WP,#3
 1495 2fd8 06EA0506 		AND	TOS,TOS,WP
 1496 2fdc FFF74CBA 		_NEXT
 1497              	
 1498              	/****************************
 1499              	    >CHAR	( c -- c )
 1500              	 	Filter non-printing 
 1501              		characters.
 1502              	****************************/
 1503 2fe0 C82F0000 		_HEADER TCHAR,5,">CHAR"
 1503      053E4348 
 1503      415200BF 
 1504 2fec 504700BF 		_NEST
 1505 2ff0 F7250000 		_DOLIT  0x7F
 1505      7F000000 
 1506 2ff8 6D270000 		_ADR	ANDD
 1507 2ffc 29270000 		_ADR	DUPP	// mask msb
 1508 3000 A9280000 		_ADR	BLANK
 1509 3004 F7250000 		_DOLIT 	127
 1509      7F000000 
 1510 300c 352D0000 		_ADR	WITHI	// check for printable
 1511 3010 F9290000 		_ADR	INVER
 1512 3014 37260000 		_QBRAN	TCHA1
 1512      28300000 
 1513 301c 19270000 		_ADR	DROP
 1514 3020 F7250000 		_DOLIT 	'_'	// replace non-printables
 1514      5F000000 
 1515              	TCHA1:
 1516 3028 7F240000 		  _UNNEST
 1517              	
 1518              	/************************
 1519              	    DEPTH	( -- n )
 1520              	 	Return the depth of
 1521              		the data stack.
 1522              	***********************/
 1523 302c E42F0000 		_HEADER DEPTH,5,"DEPTH"
 1523      05444550 
 1523      544800BF 
ARM GAS  forth.s 			page 119


 1524 3038 4FF47F42 		_MOV32 T2,SPP 
 1524      C2F20102 
 1525 3040 A2EB0702 		SUB	T2,T2,DSP
 1526 3044 47F8046D 		_PUSH
 1527 3048 4FEAA206 		ASR	TOS,T2,#2
 1528 304c FFF714BA 		_NEXT
 1529              	
 1530              	/*****************************
 1531              	    PICK	( ... +n -- ... w )
 1532              	 	Copy the nth stack item 
 1533              		to tos.
 1534              	******************************/
 1535 3050 30300000 		_HEADER PICK,4,"PICK"
 1535      04504943 
 1535      4B0000BF 
 1536 305c 504700BF 		_NEST
 1537 3060 49280000 		_ADR	ONEP
 1538 3064 BD280000 		_ADR	CELLS
 1539 3068 05270000 		_ADR	SPAT
 1540 306c ED270000 		_ADR	PLUS
 1541 3070 7D260000 		_ADR	AT
 1542 3074 7F240000 		_UNNEST
 1543              	
 1544              	/*********************
 1545              	  Memory access
 1546              	*********************/
 1547              	
 1548              	/*************************
 1549              	    HERE	( -- a )
 1550              	 	Return the top of
 1551              		the code dictionary.
 1552              	*************************/
 1553 3078 54300000 		_HEADER HERE,4,"HERE"
 1553      04484552 
 1553      450000BF 
 1554 3084 504700BF 		_NEST
 1555 3088 B12C0000 		_ADR	CPP
 1556 308c 7D260000 		_ADR	AT
 1557 3090 7F240000 		_UNNEST
 1558              	
 1559              	/***************************	
 1560              	    PAD	 ( -- a )
 1561              	 	Return the address of 
 1562              		a temporary buffer.
 1563              	***************************/
 1564 3094 7C300000 		_HEADER PAD,3,"PAD"
 1564      03504144 
 1565 309c 504700BF 		_NEST
 1566 30a0 85300000 		_ADR	HERE
 1567 30a4 F7250000 		_DOLIT 80
 1567      50000000 
 1568 30ac ED270000 		_ADR PLUS 
 1569 30b0 7F240000 		_UNNEST
 1570              	
 1571              	/***********************
 1572              	    TIB	 ( -- a )
 1573              	 	Return the address 
ARM GAS  forth.s 			page 120


 1574              		of the terminal 
 1575              		input buffer.
 1576              	************************/
 1577 30b4 98300000 		_HEADER TIB,3,"TIB"
 1577      03544942 
 1578 30bc 47F8046D 		_PUSH
 1579 30c0 266B     		ldr TOS,[UP,#TIBUF]
 1580 30c2 FFF7D9B9 		_NEXT
 1581              	
 1582              	/*************************
 1583              	    @EXECUTE	( a -- )
 1584              	 	Execute vector stored
 1585              		in address a.
 1586              	*************************/
 1587 30c6 B8300000 		_HEADER ATEXE,8,"@EXECUTE"
 1587      08404558 
 1587      45435554 
 1587      4500
 1588 30d4 3500     		MOVS	WP,TOS
 1589 30d6 57F8046B 		_POP
 1590 30da 2D68     		LDR	WP,[WP]
 1591 30dc 45F00105 		ORR	WP,WP,#1
 1592 30e0 18BF     	    IT NE 
 1593 30e2 2847     		BXNE	WP
 1594 30e4 FFF7C8B9 		_NEXT
 1595              	
 1596              	/*******************************
 1597              	    CMOVE	( b1 b2 u -- )
 1598              	 	Copy u bytes from b1 to b2.
 1599              	********************************/
 1600 30e8 CA300000 		_HEADER CMOVE,5,"CMOVE"
 1600      05434D4F 
 1600      564500BF 
 1601 30f4 57F8042B 		LDR	T2,[DSP],#4
 1602 30f8 57F8043B 		LDR	T3,[DSP],#4
 1603 30fc 03E0     		B CMOV1
 1604              	CMOV0:
 1605 30fe 13F8015B 		LDRB	WP,[T3],#1
 1606 3102 02F8015B 		STRB	WP,[T2],#1
 1607              	CMOV1:
 1608 3106 3600     		MOVS	TOS,TOS
 1609 3108 02D0     		BEQ	CMOV2
 1610 310a A6F10106 		SUB	TOS,TOS,#1
 1611 310e F6E7     		B CMOV0
 1612              	CMOV2:
 1613 3110 57F8046B 		_POP
 1614 3114 FFF7B0B9 		_NEXT
 1615              	
 1616              	/***************************
 1617              	    MOVE	( a1 a2 u -- )
 1618              	 	Copy u words from a1 to a2.
 1619              	*******************************/
 1620 3118 EC300000 		_HEADER MOVE,4,"MOVE"
 1620      044D4F56 
 1620      450000BF 
 1621 3124 4FF00400 		MOV T0,#4 
 1622 3128 06F10306 		ADD TOS,#3 
ARM GAS  forth.s 			page 121


 1623 312c 26F00306 		BIC TOS,#3
 1624 3130 57F8041B 		LDR	T1,[DSP],#4 // dest
 1625 3134 57F8042B 		LDR	T2,[DSP],#4 // src 
 1626 3138 8A42     		CMP T2,T1 
 1627 313a 08D5     		BPL MOVE1
 1628 313c 6FF00300 		MOV T0,#-4 
 1629 3140 3144     		ADD T1,TOS
 1630 3142 3244     		ADD T2,TOS 
 1631 3144 01E0     		B MOVE3
 1632              	MOVE0:
 1633 3146 1568     		LDR	WP,[T2]
 1634 3148 0D60     		STR	WP,[T1]
 1635              	MOVE3: 
 1636 314a 0144     		ADD T1,T0 
 1637 314c 0244     		ADD T2,T0 
 1638              	MOVE1:
 1639 314e 3600     		MOVS TOS,TOS
 1640 3150 02D0     		BEQ	MOVE2
 1641 3152 A6F10406 		SUB	TOS,TOS,#4
 1642 3156 F6E7     		B MOVE0
 1643              	MOVE2:
 1644 3158 57F8046B 		_POP
 1645 315c FFF78CB9 		_NEXT
 1646              	
 1647              	/**************************
 1648              	    FILL	( b u c -- )
 1649              	 	Fill u bytes of character
 1650              		c to area beginning at b.
 1651              	******************************/
 1652 3160 1C310000 		_HEADER FILL,4,"FILL"
 1652      0446494C 
 1652      4C0000BF 
 1653 316c 03CF     		LDMFD DSP!,{T0,T1} 
 1654 316e 0000     		MOVS T0,T0 
 1655 3170 03D0     		BEQ FILL2
 1656              	FILL1:
 1657 3172 01F8016B 		STRB	TOS,[T1],#1
 1658 3176 0138     		SUBS	T0,T0,#1
 1659 3178 FBD1     		BNE FILL1
 1660              	FILL2:
 1661 317a 57F8046B 		_POP
 1662 317e FFF77BB9 		_NEXT
 1663              	
 1664              	/*****************************
 1665              	    PACK$	( b u a -- a )
 1666              	 	Build a counted word with
 1667              		u characters from b. 
 1668              		Null fill.
 1669              	*****************************/
 1670 3182 64310000 		_HEADER PACKS,5,"PACK$"
 1670      05504143 
 1670      4B24
 1671 318c 504700BF 		_NEST
 1672 3190 D12F0000 		_ADR	ALGND
 1673 3194 29270000 		_ADR	DUPP
 1674 3198 D1260000 		_ADR	TOR		// strings only on cell boundary
 1675 319c 4D270000 		_ADR	OVER
ARM GAS  forth.s 			page 122


 1676 31a0 ED270000 		_ADR	PLUS
 1677 31a4 49280000 		_ADR	ONEP 
 1678 31a8 F7250000 		_DOLIT 	0xFFFFFFFC
 1678      FCFFFFFF 
 1679 31b0 6D270000 		_ADR	ANDD			// count mod cell
 1680 31b4 F7250000 		_DOLIT 	0
 1680      00000000 
 1681 31bc 39270000 		_ADR	SWAP
 1682 31c0 69260000 		_ADR	STORE			// null fill cell
 1683 31c4 BD260000 		_ADR	RAT
 1684 31c8 61290000 		_ADR	DDUP
 1685 31cc 89260000 		_ADR	CSTOR
 1686 31d0 49280000 		_ADR	ONEP			// save count
 1687 31d4 39270000 		_ADR	SWAP
 1688 31d8 F5300000 		_ADR	CMOVE
 1689 31dc A9260000 		_ADR	RFROM
 1690 31e0 7F240000 		_UNNEST   			// move string
 1691              	
 1692              	/***********************************
 1693              	  Numeric output, single precision
 1694              	***********************************/
 1695              	
 1696              	/**************************
 1697              	    DIGIT	( u -- c )
 1698              	 	Convert digit u to 
 1699              		a character.
 1700              	***************************/
 1701 31e4 86310000 		_HEADER DIGIT,5,"DIGIT"
 1701      05444947 
 1701      495400BF 
 1702 31f0 504700BF 		_NEST
 1703 31f4 F7250000 		_DOLIT 9
 1703      09000000 
 1704 31fc 4D270000 		_ADR	OVER
 1705 3200 C52A0000 		_ADR	LESS
 1706 3204 F7250000 		_DOLIT	7
 1706      07000000 
 1707 320c 6D270000 		_ADR	ANDD
 1708 3210 ED270000 		_ADR	PLUS
 1709 3214 F7250000 		_DOLIT	'0'
 1709      30000000 
 1710 321c ED270000 		_ADR	PLUS 
 1711 3220 7F240000 		_UNNEST
 1712              	
 1713              	/*********************************
 1714              	    EXTRACT	( ud base -- ud c )
 1715              	 	Extract the least significant
 1716              		digit from positive double.
 1717              	**********************************/
 1718 3224 E8310000 		_HEADER EXTRC,7,"EXTRACT"
 1718      07455854 
 1718      52414354 
 1719 3230 504700BF 		_NEST
 1720 3234 592E0000 		_ADR	DSLMOD
 1721 3238 11290000 		_ADR	ROT
 1722 323c F1310000 		_ADR	DIGIT
 1723 3240 7F240000 		_UNNEST
ARM GAS  forth.s 			page 123


 1724              	
 1725              	/***************************
 1726              	    <#	  ( -- )
 1727              	 	Initiate the numeric
 1728              		output process.
 1729              	****************************/
 1730 3244 28320000 		_HEADER BDIGS,2,"<#"
 1730      023C2300 
 1731 324c 504700BF 		_NEST
 1732 3250 9D300000 		_ADR	PAD
 1733 3254 852C0000 		_ADR	HLD
 1734 3258 69260000 		_ADR	STORE
 1735 325c 7F240000 		_UNNEST
 1736              	
 1737              	/*********************************
 1738              	    HOLD	( c -- )
 1739              	 	Insert a character into the 
 1740              		numeric output string.
 1741              	**********************************/
 1742 3260 48320000 		_HEADER HOLD,4,"HOLD"
 1742      04484F4C 
 1742      440000BF 
 1743 326c 504700BF 		_NEST
 1744 3270 852C0000 		_ADR	HLD
 1745 3274 7D260000 		_ADR	AT
 1746 3278 59280000 		_ADR	ONEM
 1747 327c 29270000 		_ADR	DUPP
 1748 3280 852C0000 		_ADR	HLD
 1749 3284 69260000 		_ADR	STORE
 1750 3288 89260000 		_ADR	CSTOR
 1751 328c 7F240000 		_UNNEST
 1752              	
 1753              	/***********************
 1754              	    #	   ( ud -- ud )
 1755              	 	Extract one digit 
 1756              		from ud and append 
 1757              		the digit to output 
 1758              		string.
 1759              	*************************/
 1760 3290 64320000 		_HEADER DIG,1,"#"
 1760      012300BF 
 1761 3298 504700BF 		_NEST
 1762 329c 152C0000 		_ADR	BASE
 1763 32a0 7D260000 		_ADR	AT
 1764 32a4 31320000 		_ADR	EXTRC
 1765 32a8 6D320000 		_ADR	HOLD
 1766 32ac 7F240000 		_UNNEST
 1767              	
 1768              	/***************************
 1769              	    #S	  ( ud -- 0 )
 1770              	 	Convert ud until all 
 1771              		digits are added to 
 1772              		the output string.
 1773              	***************************/
 1774 32b0 94320000 		_HEADER DIGS,2,"#S"
 1774      02235300 
 1775 32b8 504700BF 		_NEST
ARM GAS  forth.s 			page 124


 1776              	DIGS1:
 1777 32bc 99320000 	    _ADR	DIG
 1778 32c0 61290000 		_ADR	DDUP
 1779 32c4 81270000 		_ADR    ORR 
 1780 32c8 37260000 		_QBRAN 	DIGS2
 1780      D8320000 
 1781 32d0 4B260000 		_BRAN	DIGS1
 1781      BC320000 
 1782              	DIGS2:
 1783 32d8 19270000 		 _ADR DROP 
 1784 32dc 7F240000 		 _UNNEST
 1785              	
 1786              	/*********************
 1787              	    SIGN	( n -- )
 1788              	 	Add a minus sign
 1789              		to the numeric
 1790              		output string.
 1791              	*********************/
 1792 32e0 B4320000 		_HEADER SIGN,4,"SIGN"
 1792      04534947 
 1792      4E0000BF 
 1793 32ec 504700BF 		_NEST
 1794 32f0 5D270000 		_ADR	ZLESS
 1795 32f4 37260000 		_QBRAN	SIGN1
 1795      08330000 
 1796 32fc F7250000 		_DOLIT '-'
 1796      2D000000 
 1797 3304 6D320000 		_ADR	HOLD
 1798              	SIGN1:
 1799 3308 7F240000 		  _UNNEST
 1800              	
 1801              	/*************************
 1802              	    #>  ( w -- b u )
 1803              	 	Prepare the output 
 1804              		word to be TYPE'd.
 1805              	************************/
 1806 330c E4320000 		_HEADER EDIGS,2,"#>"
 1806      02233E00 
 1807 3314 504700BF 		_NEST
 1808 3318 19270000 		_ADR	DROP
 1809 331c 852C0000 		_ADR	HLD
 1810 3320 7D260000 		_ADR	AT
 1811 3324 9D300000 		_ADR	PAD
 1812 3328 4D270000 		_ADR	OVER
 1813 332c FD270000 		_ADR	SUBB
 1814 3330 7F240000 		_UNNEST
 1815              	
 1816              	/**************************
 1817              	    str	 ( n -- b u )
 1818              	 	Convert a signed 
 1819              		integer to a numeric 
 1820              		string.
 1821              	hidden word used by compiler
 1822              	***************************/
 1823              	STRR:
 1824 3334 504700BF 		_NEST
 1825 3338 112E0000 		_ADR 	STOD 
ARM GAS  forth.s 			page 125


 1826 333c 29270000 		_ADR	DUPP
 1827 3340 D1260000 		_ADR	TOR
 1828 3344 95290000 		_ADR	DABS
 1829 3348 4D320000 		_ADR	BDIGS
 1830 334c B9320000 		_ADR	DIGS
 1831 3350 A9260000 		_ADR	RFROM
 1832 3354 ED320000 		_ADR	SIGN
 1833 3358 15330000 		_ADR	EDIGS
 1834 335c 7F240000 		_UNNEST
 1835              	
 1836              	/*************************
 1837              	    HEX	 ( -- )
 1838              	 	Use radix 16 as 
 1839              		base for numeric 
 1840              		conversions.
 1841              	*************************/
 1842 3360 10330000 		_HEADER HEX,3,"HEX"
 1842      03484558 
 1843 3368 504700BF 		_NEST
 1844 336c F7250000 		_DOLIT 16
 1844      10000000 
 1845 3374 152C0000 		_ADR	BASE
 1846 3378 69260000 		_ADR	STORE
 1847 337c 7F240000 		_UNNEST
 1848              	
 1849              	/**************************
 1850              		BIN ( -- )
 1851              		Use radix 2 as 
 1852              		base for numeric 
 1853              		conversion 
 1854              	**************************/
 1855 3380 64330000 		_HEADER BIN,3,"BIN"
 1855      0342494E 
 1856 3388 504700BF 		_NEST 
 1857 338c F7250000 		_DOLIT 2 
 1857      02000000 
 1858 3394 152C0000 		_ADR BASE 
 1859 3398 69260000 		_ADR STORE
 1860 339c 7F240000 		_UNNEST 
 1861              	
 1862              	/************************
 1863              	    DECIMAL	( -- )
 1864              	 	Use radix 10 as base
 1865              		for numeric conversions.
 1866              	*************************/
 1867 33a0 84330000 		_HEADER DECIM,7,"DECIMAL"
 1867      07444543 
 1867      494D414C 
 1868 33ac 504700BF 		_NEST
 1869 33b0 F7250000 		_DOLIT 10
 1869      0A000000 
 1870 33b8 152C0000 		_ADR	BASE
 1871 33bc 69260000 		_ADR	STORE
 1872 33c0 7F240000 		_UNNEST
 1873              	
 1874              	/************************************
 1875              	  Numeric input, single precision
ARM GAS  forth.s 			page 126


 1876              	***********************************/
 1877              	
 1878              	/***********************************
 1879              	    DIGIT?	( c base -- u t )
 1880              	 	Convert a character to its 
 1881              		numeric value. A flag 
 1882              		indicates success.
 1883              	**********************************/
 1884 33c4 A4330000 		_HEADER DIGTQ,6,"DIGIT?"
 1884      06444947 
 1884      49543F00 
 1885 33d0 504700BF 		_NEST
 1886 33d4 D1260000 		_ADR	TOR
 1887 33d8 F7250000 		_DOLIT 	'0'
 1887      30000000 
 1888 33e0 FD270000 		_ADR	SUBB
 1889 33e4 F7250000 		_DOLIT 9
 1889      09000000 
 1890 33ec 4D270000 		_ADR	OVER
 1891 33f0 C52A0000 		_ADR	LESS
 1892 33f4 37260000 		_QBRAN	DGTQ1
 1892      1C340000 
 1893 33fc F7250000 		_DOLIT 7
 1893      07000000 
 1894 3404 FD270000 		_ADR	SUBB
 1895 3408 29270000 		_ADR	DUPP
 1896 340c F7250000 		_DOLIT	10
 1896      0A000000 
 1897 3414 C52A0000 		_ADR	LESS
 1898 3418 81270000 		_ADR	ORR
 1899              	DGTQ1:
 1900 341c 29270000 		_ADR	DUPP
 1901 3420 A9260000 		_ADR	RFROM
 1902 3424 AD2A0000 		_ADR	ULESS
 1903 3428 7F240000 		_UNNEST
 1904              	
 1905              	/***********************************
 1906              	 parse digits 
 1907              	  d digits count 
 1908              	  n parsed integer
 1909              	  a+ updated pointer  
 1910              	************************************/
 1911              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1912 342c 504700BF 	    _NEST
 1913 3430 152C0000 	    _ADR BASE 
 1914 3434 7D260000 	    _ADR AT 
 1915 3438 D1260000 	    _ADR TOR  
 1916 343c 7D2B0000 	1:  _ADR COUNT 
 1917 3440 BD260000 	    _ADR RAT 
 1918 3444 D1330000 	    _ADR DIGTQ
 1919 3448 37260000 	    _QBRAN 2f
 1919      78340000 
 1920 3450 11290000 	    _ADR ROT 
 1921 3454 BD260000 	    _ADR RAT 
 1922 3458 0D280000 	    _ADR STAR 
 1923 345c ED270000 	    _ADR PLUS
 1924 3460 39270000 	    _ADR SWAP 
ARM GAS  forth.s 			page 127


 1925 3464 11290000 	    _ADR ROT 
 1926 3468 49280000 	    _ADR ONEP 
 1927 346c 25290000 	    _ADR NROT
 1928 3470 4B260000 	    _BRAN 1b 
 1928      3C340000 
 1929 3478 19270000 	2:  _ADR DROP 
 1930 347c 59280000 	    _ADR ONEM  // decrement a 
 1931 3480 A9260000 	    _ADR RFROM 
 1932 3484 19270000 	    _ADR DROP 
 1933 3488 7F240000 	    _UNNEST 
 1934              	
 1935              	/**************************
 1936              	 CHAR? 
 1937              	 check for charcter c 
 1938              	 move pointer if true 
 1939              	**************************/
 1940              	CHARQ: // ( a c -- a+ t | a f )
 1941 348c 3868     	    ldr T0,[DSP]
 1942 348e 10F8011B 	    ldrb T1,[T0],#1 
 1943 3492 3246     	    mov T2,TOS 
 1944 3494 86EA0606 	    eor TOS,TOS
 1945 3498 9142     	    cmp T1,T2
 1946 349a 02D1     	    bne 1f 
 1947 349c 3860     	    str T0,[DSP]
 1948 349e 6FEA0606 	    mvn TOS,TOS  
 1949 34a2 FEF7E9BF 	1:  _NEXT
 1950              	
 1951              	
 1952              	/**********************************
 1953              	    INT?	( a -- n T | a F )
 1954              	 	parse string for at 'a' for 
 1955              		integer. Push a flag on TOS.
 1956              		integer form:
 1957              			[-]hex_digit+  | 
 1958              			$[-]hex_digit+ |
 1959              			%[-]bin_digit+ | 
 1960              			[-]dec_digit+ 
 1961              	**********************************/
 1962 34a6 C8330000 		_HEADER INTQ,4,"INT?"
 1962      04494E54 
 1962      3F00
 1963 34b0 504700BF 		_NEST
 1964 34b4 152C0000 		_ADR	BASE
 1965 34b8 7D260000 		_ADR	AT
 1966 34bc D1260000 		_ADR	TOR
 1967 34c0 F7250000 		_DOLIT	0      // a 0 
 1967      00000000 
 1968 34c8 4D270000 		_ADR	OVER   // a 0 a 
 1969 34cc 7D2B0000 		_ADR	COUNT  // a 0 a+ cnt 
 1970 34d0 4D270000 		_ADR	OVER   // a 0 a+ cnt a+
 1971 34d4 9D260000 		_ADR	CAT    // a 0 a+ cnt char 
 1972 34d8 F7250000 		_DOLIT '$'     // a 0 a+ cnt char '$'
 1972      24000000 
 1973 34e0 752A0000 		_ADR	EQUAL  // a 0 a+ cnt f 
 1974 34e4 37260000 		_QBRAN	0f    
 1974      F8340000 
 1975 34ec 69330000 		_ADR	HEX
ARM GAS  forth.s 			page 128


 1976 34f0 4B260000 		_BRAN   1f 
 1976      18350000 
 1977 34f8 4D270000 	0:  _ADR    OVER  // a 0 a+ cnt a+
 1978 34fc 9D260000 		_ADR    CAT   // a 0 a+ cnt char 
 1979 3500 F7250000 		_DOLIT  '%'   // a 0 a+ cnt char '%'
 1979      25000000 
 1980 3508 752A0000 		_ADR	EQUAL  // a 0 a+ cnt f 
 1981 350c 37260000 		_QBRAN  2f
 1981      28350000 
 1982 3514 89330000 		_ADR	BIN 
 1983 3518 39270000 	1:	_ADR	SWAP 
 1984 351c 49280000 		_ADR	ONEP 
 1985 3520 39270000 		_ADR	SWAP 
 1986 3524 59280000 		_ADR	ONEM // a 0 a+ cnt-  
 1987              	2: // check for '-'
 1988 3528 39270000 		_ADR 	SWAP // a 0 cnt a+ 
 1989 352c F7250000 		_DOLIT  '-' 
 1989      2D000000 
 1990 3534 8D340000 		_ADR	CHARQ
 1991 3538 11290000 		_ADR	ROT 
 1992 353c 4D270000 		_ADR	OVER 
 1993 3540 D1260000 		_ADR    TOR   // a 0 a+ f cnt R: sign  
 1994 3544 39270000 		_ADR	SWAP   // a 0 a+ cnt f 
 1995 3548 37260000 		_QBRAN  2f 
 1995      54350000 
 1996 3550 59280000 		_ADR	ONEM 
 1997 3554 D1260000 	2:	_ADR 	TOR  // a 0 a+  R: sign cnt 
 1998 3558 F7250000 		_DOLIT  0
 1998      00000000 
 1999 3560 29270000 		_ADR	DUPP 
 2000 3564 11290000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2001 3568 2D340000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2002 356c 19270000 		_ADR	DROP // a 0 d n 
 2003 3570 39270000 		_ADR	SWAP  // a 0 n d 
 2004 3574 A9260000 		_ADR	RFROM // a 0 n d cnt  
 2005 3578 752A0000 		_ADR	EQUAL // d == cnt ? 
 2006 357c 37260000 		_QBRAN  5f // digits left, not an integer 
 2006      AC350000 
 2007 3584 A9260000 	2:	_ADR	RFROM  // sign 
 2008 3588 37260000 		_QBRAN  3f   // positive integer 
 2008      94350000 
 2009 3590 0D2A0000 		_ADR	NEGAT
 2010              	3:	
 2011 3594 25290000 		_ADR	NROT  // n a 0 
 2012 3598 39290000 		_ADR	DDROP // n  
 2013 359c F7250000 		_DOLIT  -1    // n -1 
 2013      FFFFFFFF 
 2014 35a4 4B260000 		_BRAN   7f  
 2014      B4350000 
 2015 35ac A9260000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2016 35b0 39290000 	    _ADR	DDROP 
 2017 35b4 A9260000 	7:	_ADR	RFROM
 2018 35b8 152C0000 		_ADR	BASE
 2019 35bc 69260000 		_ADR	STORE
 2020 35c0 7F240000 		_UNNEST
 2021              	
 2022              	
ARM GAS  forth.s 			page 129


 2023              	/********************
 2024              	  console I/O
 2025              	********************/
 2026              	
 2027              	/**********************
 2028              	    SPACE	( -- )
 2029              	 	Send the blank 
 2030              		character to 
 2031              		the output device.
 2032              	************************/
 2033 35c4 AA340000 		_HEADER SPACE,5,"SPACE"
 2033      05535041 
 2033      434500BF 
 2034 35d0 504700BF 		_NEST
 2035 35d4 A9280000 		_ADR	BLANK
 2036 35d8 01250000 		_ADR	EMIT
 2037 35dc 7F240000 		_UNNEST
 2038              	
 2039              	/***************************
 2040              	    SPACES	( +n -- )
 2041              	 	Send n spaces to the 
 2042              		output device.
 2043              	****************************/
 2044 35e0 C8350000 		_HEADER SPACS,6,"SPACES"
 2044      06535041 
 2044      43455300 
 2045 35ec 504700BF 		_NEST
 2046 35f0 F7250000 		_DOLIT	0
 2046      00000000 
 2047 35f8 0D2B0000 		_ADR	MAX
 2048 35fc D1260000 		_ADR	TOR
 2049 3600 4B260000 		_BRAN	CHAR2
 2049      0C360000 
 2050              	CHAR1:
 2051 3608 D1350000 		_ADR	SPACE
 2052              	CHAR2:
 2053 360c 19260000 		_DONXT	CHAR1
 2053      08360000 
 2054 3614 7F240000 		_UNNEST
 2055              	
 2056              	/***********************
 2057              	    TYPE	( b u -- )
 2058              	 	Output u characters 
 2059              		from b.
 2060              	************************/
 2061 3618 E4350000 		_HEADER TYPEE,4,"TYPE"
 2061      04545950 
 2061      450000BF 
 2062 3624 504700BF 		_NEST
 2063 3628 D1260000 		_ADR  TOR   // ( a+1 -- R: u )
 2064 362c 4B260000 		_BRAN	TYPE2
 2064      40360000 
 2065              	TYPE1:  
 2066 3634 7D2B0000 		_ADR  COUNT
 2067 3638 ED2F0000 		_ADR TCHAR
 2068 363c 01250000 		_ADR EMIT
 2069              	TYPE2:  
ARM GAS  forth.s 			page 130


 2070 3640 19260000 		_DONXT	TYPE1
 2070      34360000 
 2071 3648 19270000 		_ADR	DROP
 2072 364c 7F240000 		_UNNEST
 2073              	
 2074              	/***************************
 2075              	    CR	  ( -- )
 2076              	 	Output a carriage return
 2077              		and a line feed.
 2078              	****************************/
 2079 3650 1C360000 		_HEADER CR,2,"CR"
 2079      02435200 
 2080 3658 504700BF 		_NEST
 2081 365c F7250000 		_DOLIT	CRR
 2081      0D000000 
 2082 3664 01250000 		_ADR	EMIT
 2083 3668 F7250000 		_DOLIT	LF
 2083      0A000000 
 2084 3670 01250000 		_ADR	EMIT
 2085 3674 7F240000 		_UNNEST
 2086              	
 2087              	/******************************************
 2088              	  do_$	( -- a )
 2089              	  Return the address of a compiled string.
 2090              	  adjust return address to skip over it.
 2091              	hidden word used by compiler. 
 2092              	******************************************/
 2093              	DOSTR:
 2094 3678 504700BF 		_NEST     
 2095              	/* compiled string address is 2 levels deep */
 2096 367c A9260000 		_ADR	RFROM	// { -- a1 }
 2097 3680 A9260000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2098 3684 29270000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2099 3688 7D2B0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2100 368c ED270000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2101 3690 D12F0000 		_ADR	ALGND	//  end of string
 2102              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2103 3694 D1260000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2104 3698 39270000 		_ADR	SWAP	//  count tugged
 2105 369c D1260000 		_ADR	TOR     //  ( -- a2) is string address
 2106 36a0 7F240000 		_UNNEST
 2107              	
 2108              	/******************************************
 2109              	    $"|	( -- a )
 2110              	 	Run time routine compiled by _". 
 2111              		Return address of a compiled string.
 2112              	hidden word used by compiler
 2113              	*****************************************/
 2114              	STRQP:
 2115 36a4 504700BF 		_NEST
 2116 36a8 79360000 		_ADR	DOSTR
 2117 36ac 7F240000 		_UNNEST			// force a call to dostr
 2118              	
 2119              	/*******************************
 2120              	    .$	( a -- )
 2121              	 	Run time routine of ." 
 2122              		Output a compiled string.
ARM GAS  forth.s 			page 131


 2123              	hidden word used by compiler
 2124              	*******************************/
 2125              	DOTST:
 2126 36b0 504700BF 		_NEST
 2127 36b4 7D2B0000 		_ADR	COUNT // ( -- a+1 c )
 2128 36b8 25360000 		_ADR	TYPEE
 2129 36bc 7F240000 		_UNNEST
 2130              	
 2131              	/**********************
 2132              	    ."|	( -- )
 2133              	 	Run time routine of ." 
 2134              		Output a compiled string.
 2135              	hidden word used by compiler
 2136              	*****************************/
 2137              	DOTQP:
 2138 36c0 504700BF 		_NEST
 2139 36c4 79360000 		_ADR	DOSTR
 2140 36c8 B1360000 		_ADR	DOTST
 2141 36cc 7F240000 		_UNNEST
 2142              	
 2143              	/******************************
 2144              	    .R	  ( n +n -- )
 2145              	 	Display an integer in a 
 2146              		field of n columns, 
 2147              		right justified.
 2148              	*******************************/
 2149 36d0 54360000 		_HEADER DOTR,2,".R"
 2149      022E5200 
 2150 36d8 504700BF 		_NEST
 2151 36dc D1260000 		_ADR	TOR
 2152 36e0 35330000 		_ADR	STRR
 2153 36e4 A9260000 		_ADR	RFROM
 2154 36e8 4D270000 		_ADR	OVER
 2155 36ec FD270000 		_ADR	SUBB
 2156 36f0 ED350000 		_ADR	SPACS
 2157 36f4 25360000 		_ADR	TYPEE
 2158 36f8 7F240000 		_UNNEST
 2159              	
 2160              	/*************************
 2161              	    U.R	 ( u +n -- )
 2162              	 	Display an unsigned 
 2163              		integer in n column, 
 2164              		right justified.
 2165              	***************************/
 2166 36fc D4360000 		_HEADER UDOTR,3,"U.R"
 2166      03552E52 
 2167 3704 504700BF 		_NEST
 2168 3708 39270000 		_ADR	SWAP 
 2169 370c 112E0000 		_ADR 	STOD 
 2170 3710 11290000 		_ADR	ROT 
 2171 3714 D1260000 		_ADR	TOR
 2172 3718 4D320000 		_ADR	BDIGS
 2173 371c B9320000 		_ADR	DIGS
 2174 3720 15330000 		_ADR	EDIGS
 2175 3724 A9260000 		_ADR	RFROM
 2176 3728 4D270000 		_ADR	OVER
 2177 372c FD270000 		_ADR	SUBB
ARM GAS  forth.s 			page 132


 2178 3730 ED350000 		_ADR	SPACS
 2179 3734 25360000 		_ADR	TYPEE
 2180 3738 7F240000 		_UNNEST
 2181              	
 2182              	/************************
 2183              	    U.	  ( u -- )
 2184              	 	Display an unsigned 
 2185              		integer in free format.
 2186              	***************************/
 2187 373c 00370000 		_HEADER UDOT,2,"U."
 2187      02552E00 
 2188 3744 504700BF 		_NEST
 2189 3748 112E0000 		_ADR 	STOD 
 2190 374c 4D320000 		_ADR	BDIGS
 2191 3750 B9320000 		_ADR	DIGS
 2192 3754 15330000 		_ADR	EDIGS
 2193 3758 D1350000 		_ADR	SPACE
 2194 375c 25360000 		_ADR	TYPEE
 2195 3760 7F240000 		_UNNEST
 2196              	
 2197              	/************************
 2198              	    .	   ( w -- )
 2199              	 	Display an integer 
 2200              		in free format, 
 2201              		preceeded by a space.
 2202              	**************************/
 2203 3764 40370000 		_HEADER DOT,1,"."
 2203      012E00BF 
 2204 376c 504700BF 		_NEST
 2205 3770 152C0000 		_ADR	BASE
 2206 3774 7D260000 		_ADR	AT
 2207 3778 F7250000 		_DOLIT 10
 2207      0A000000 
 2208 3780 95270000 		_ADR	XORR			// ?decimal
 2209 3784 37260000 		_QBRAN	DOT1
 2209      94370000 
 2210 378c 45370000 		_ADR	UDOT
 2211 3790 7F240000 		_UNNEST			// no,display unsigned
 2212              	DOT1:
 2213 3794 35330000 	    _ADR	STRR
 2214 3798 D1350000 		_ADR	SPACE
 2215 379c 25360000 		_ADR	TYPEE
 2216 37a0 7F240000 		_UNNEST			// yes, display signed
 2217              	
 2218              	/*************************
 2219              	   D. ( d -- )
 2220              	   display double integer 
 2221              	**************************/
 2222 37a4 68370000 		_HEADER DDOT,2,"D."
 2222      02442E00 
 2223 37ac 504700BF 		_NEST 
 2224 37b0 29270000 		_ADR DUPP 
 2225 37b4 D1260000 		_ADR TOR 
 2226 37b8 95290000 		_ADR DABS 
 2227 37bc 4D320000 		_ADR BDIGS
 2228 37c0 B9320000 		_ADR DIGS 
 2229 37c4 A9260000 		_ADR RFROM
ARM GAS  forth.s 			page 133


 2230 37c8 ED320000 		_ADR SIGN 
 2231 37cc 15330000 		_ADR EDIGS
 2232 37d0 D1350000 		_ADR SPACE 
 2233 37d4 25360000 		_ADR TYPEE 
 2234 37d8 7F240000 		_UNNEST 
 2235              	
 2236              	
 2237              	/***********************
 2238              		H. ( w -- )
 2239              		display integer 
 2240              		in hexadecimal 
 2241              	*********************/
 2242 37dc A8370000 		_HEADER HDOT,2,"H."
 2242      02482E00 
 2243 37e4 504700BF 		_NEST 
 2244 37e8 152C0000 		_ADR BASE
 2245 37ec 7D260000 		_ADR AT 
 2246 37f0 39270000 		_ADR SWAP
 2247 37f4 69330000 		_ADR HEX
 2248 37f8 45370000 		_ADR UDOT 
 2249 37fc 152C0000 		_ADR BASE
 2250 3800 69260000 		_ADR STORE  
 2251 3804 7F240000 		_UNNEST 
 2252              	
 2253              	
 2254              	/***********************
 2255              	    ?	   ( a -- )
 2256              	 	Display the contents
 2257              		in a memory cell.
 2258              	*************************/
 2259 3808 E0370000 		_HEADER QUEST,1,"?"
 2259      013F00BF 
 2260 3810 504700BF 		_NEST
 2261 3814 7D260000 		_ADR	AT
 2262 3818 6D370000 		_ADR	DOT
 2263 381c 7F240000 		_UNNEST
 2264              	
 2265              	/**************
 2266              	  Parsing
 2267              	***************/
 2268              	
 2269              	/*********************************************
 2270              	    parse	( b u c -- b u delta //  string> )
 2271              	 	Scan word delimited by c. 
 2272              		Return found string and its offset.
 2273              	hidden word used by PARSE
 2274              	**********************************************/
 2275              	PARS:
 2276 3820 504700BF 		_NEST
 2277 3824 1F2C0000 		_ADR	TEMP
 2278 3828 69260000 		_ADR	STORE
 2279 382c 4D270000 		_ADR	OVER
 2280 3830 D1260000 		_ADR	TOR
 2281 3834 29270000 		_ADR	DUPP
 2282 3838 37260000 		_QBRAN	PARS8
 2282      34390000 
 2283 3840 59280000 		_ADR	ONEM
ARM GAS  forth.s 			page 134


 2284 3844 1F2C0000 		_ADR	TEMP
 2285 3848 7D260000 		_ADR	AT
 2286 384c A9280000 		_ADR	BLANK
 2287 3850 752A0000 		_ADR	EQUAL
 2288 3854 37260000 		_QBRAN	PARS3
 2288      A8380000 
 2289 385c D1260000 		_ADR	TOR
 2290              	PARS1:
 2291 3860 A9280000 		_ADR	BLANK
 2292 3864 4D270000 		_ADR	OVER
 2293 3868 9D260000 		_ADR	CAT	 // skip leading blanks 
 2294 386c FD270000 		_ADR	SUBB
 2295 3870 5D270000 		_ADR	ZLESS
 2296 3874 F9290000 		_ADR	INVER
 2297 3878 37260000 		_QBRAN	PARS2
 2297      A4380000 
 2298 3880 49280000 		_ADR	ONEP
 2299 3884 19260000 		_DONXT	PARS1
 2299      60380000 
 2300 388c A9260000 		_ADR	RFROM
 2301 3890 19270000 		_ADR	DROP
 2302 3894 F7250000 		_DOLIT	0
 2302      00000000 
 2303 389c 29270000 		_ADR	DUPP
 2304 38a0 7F240000 		_UNNEST
 2305              	PARS2:
 2306 38a4 A9260000 		_ADR	RFROM
 2307              	PARS3:
 2308 38a8 4D270000 		_ADR	OVER
 2309 38ac 39270000 		_ADR	SWAP
 2310 38b0 D1260000 		_ADR	TOR
 2311              	PARS4:
 2312 38b4 1F2C0000 		_ADR	TEMP
 2313 38b8 7D260000 		_ADR	AT
 2314 38bc 4D270000 		_ADR	OVER
 2315 38c0 9D260000 		_ADR	CAT
 2316 38c4 FD270000 		_ADR	SUBB // scan for delimiter
 2317 38c8 1F2C0000 		_ADR	TEMP
 2318 38cc 7D260000 		_ADR	AT
 2319 38d0 A9280000 		_ADR	BLANK
 2320 38d4 752A0000 		_ADR	EQUAL
 2321 38d8 37260000 		_QBRAN	PARS5
 2321      E4380000 
 2322 38e0 5D270000 		_ADR	ZLESS
 2323              	PARS5:
 2324 38e4 37260000 		_QBRAN	PARS6
 2324      08390000 
 2325 38ec 49280000 		_ADR	ONEP
 2326 38f0 19260000 		_DONXT	PARS4
 2326      B4380000 
 2327 38f8 29270000 		_ADR	DUPP
 2328 38fc D1260000 		_ADR	TOR
 2329 3900 4B260000 		_BRAN	PARS7
 2329      1C390000 
 2330              	PARS6:
 2331 3908 A9260000 		_ADR	RFROM
 2332 390c 19270000 		_ADR	DROP
ARM GAS  forth.s 			page 135


 2333 3910 29270000 		_ADR	DUPP
 2334 3914 49280000 		_ADR	ONEP
 2335 3918 D1260000 		_ADR	TOR
 2336              	PARS7:
 2337 391c 4D270000 		_ADR	OVER
 2338 3920 FD270000 		_ADR	SUBB
 2339 3924 A9260000 		_ADR	RFROM
 2340 3928 A9260000 		_ADR	RFROM
 2341 392c FD270000 		_ADR	SUBB
 2342 3930 7F240000 		_UNNEST
 2343              	PARS8:
 2344 3934 4D270000 		_ADR	OVER
 2345 3938 A9260000 		_ADR	RFROM
 2346 393c FD270000 		_ADR	SUBB
 2347 3940 7F240000 		_UNNEST
 2348              	
 2349              	/************************************
 2350              	    PARSE	( c -- b u //  string> )
 2351              	 	Scan input stream and return 
 2352              		counted string delimited by c.
 2353              	************************************/
 2354 3944 0C380000 		_HEADER PARSE,5,"PARSE"
 2354      05504152 
 2354      534500BF 
 2355 3950 504700BF 		_NEST
 2356 3954 D1260000 		_ADR	TOR
 2357 3958 BD300000 		_ADR	TIB
 2358 395c 492C0000 		_ADR	INN
 2359 3960 7D260000 		_ADR	AT
 2360 3964 ED270000 		_ADR	PLUS			// current input buffer pointer
 2361 3968 5D2C0000 		_ADR	NTIB
 2362 396c 7D260000 		_ADR	AT
 2363 3970 492C0000 		_ADR	INN
 2364 3974 7D260000 		_ADR	AT
 2365 3978 FD270000 		_ADR	SUBB			// remaining count
 2366 397c A9260000 		_ADR	RFROM
 2367 3980 21380000 		_ADR	PARS
 2368 3984 492C0000 		_ADR	INN
 2369 3988 352B0000 		_ADR	PSTOR
 2370 398c 7F240000 		_UNNEST
 2371              	
 2372              	/*******************************
 2373              	    .(	  ( -- )
 2374              	 	Output following string 
 2375              		up to next ) .
 2376              	******************************/
 2377 3990 48390000 		_HEADER DOTPR,2,".("
 2377      022E2800 
 2378 3998 504700BF 		_NEST
 2379 399c F7250000 		_DOLIT	')'
 2379      29000000 
 2380 39a4 51390000 		_ADR	PARSE
 2381 39a8 25360000 		_ADR	TYPEE
 2382 39ac 7F240000 		_UNNEST
 2383              	
 2384              	/************************
 2385              	    (	   ( -- )
ARM GAS  forth.s 			page 136


 2386              	 	Ignore following 
 2387              		string up to next )
 2388              		A comment.
 2389              	************************/
 2390 39b0 94390000 		_HEADER PAREN,IMEDD+1,"("
 2390      812800BF 
 2391 39b8 504700BF 		_NEST
 2392 39bc F7250000 		_DOLIT	')'
 2392      29000000 
 2393 39c4 51390000 		_ADR	PARSE
 2394 39c8 39290000 		_ADR	DDROP
 2395 39cc 7F240000 		_UNNEST
 2396              	
 2397              	/*******************
 2398              	    \	   ( -- )
 2399              	 	Ignore following 
 2400              		text till the 
 2401              		end of line.
 2402              	********************/
 2403 39d0 B4390000 		_HEADER BKSLA,IMEDD+1,"\\"
 2403      815C00BF 
 2404 39d8 504700BF 		_NEST
 2405 39dc 5D2C0000 		_ADR	NTIB
 2406 39e0 7D260000 		_ADR	AT
 2407 39e4 492C0000 		_ADR	INN
 2408 39e8 69260000 		_ADR	STORE
 2409 39ec 7F240000 		_UNNEST
 2410              	
 2411              	/******************************
 2412              	    CHAR	( -- c )
 2413              	 	Parse next word and
 2414              		return its first character.
 2415              	*******************************/
 2416 39f0 D4390000 		_HEADER CHAR,4,"CHAR"
 2416      04434841 
 2416      520000BF 
 2417 39fc 504700BF 		_NEST
 2418 3a00 A9280000 		_ADR	BLANK
 2419 3a04 51390000 		_ADR	PARSE
 2420 3a08 19270000 		_ADR	DROP
 2421 3a0c 9D260000 		_ADR	CAT
 2422 3a10 7F240000 		_UNNEST
 2423              	
 2424              	/**********************************
 2425              		[CHAR] ( -- c )
 2426              		immediate version of CHAR 
 2427              	**********************************/
 2428 3a14 F4390000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2428      C65B4348 
 2428      41525D00 
 2429 3a20 504700BF 		_NEST 
 2430 3a24 FD390000 		_ADR CHAR
 2431 3a28 49410000 		_ADR LITER 
 2432 3a2c 7F240000 		_UNNEST 
 2433              	
 2434              	/**********************************
 2435              	    WORD	( c -- a //  string> )
ARM GAS  forth.s 			page 137


 2436              	 	Parse a word from input stream
 2437              		and copy it to code dictionary.
 2438              	***********************************/
 2439 3a30 183A0000 		_HEADER WORDD,4,"WORD"
 2439      04574F52 
 2439      440000BF 
 2440 3a3c 504700BF 		_NEST
 2441 3a40 51390000 		_ADR	PARSE
 2442 3a44 85300000 		_ADR	HERE
 2443 3a48 89280000 		_ADR	CELLP
 2444 3a4c 8D310000 		_ADR	PACKS
 2445 3a50 7F240000 		_UNNEST
 2446              	
 2447              	/********************************
 2448              	    TOKEN	( -- a //  string> )
 2449              	 	Parse a word from input 
 2450              		stream and copy it to 
 2451              		name dictionary.
 2452              	*********************************/
 2453 3a54 343A0000 		_HEADER TOKEN,5,"TOKEN"
 2453      05544F4B 
 2453      454E00BF 
 2454 3a60 504700BF 		_NEST
 2455 3a64 A9280000 		_ADR	BLANK
 2456 3a68 3D3A0000 		_ADR	WORDD
 2457 3a6c 553C0000 		_ADR	UPPER 
 2458 3a70 7F240000 		_UNNEST
 2459              	
 2460              	/**********************
 2461              	  Dictionary search
 2462              	***********************/
 2463              	
 2464              	/*************************
 2465              	    NAME>	( na -- ca )
 2466              	 	Return a code address
 2467              		given a name address.
 2468              	**************************/
 2469 3a74 583A0000 		_HEADER NAMET,5,"NAME>"
 2469      054E414D 
 2469      453E00BF 
 2470 3a80 504700BF 		_NEST
 2471 3a84 7D2B0000 		_ADR	COUNT
 2472 3a88 F7250000 		_DOLIT	0x1F
 2472      1F000000 
 2473 3a90 6D270000 		_ADR	ANDD
 2474 3a94 ED270000 		_ADR	PLUS
 2475 3a98 D12F0000 		_ADR	ALGND
 2476 3a9c 7F240000 		_UNNEST
 2477              	
 2478              	/***************************************
 2479              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2480              	 	Compare u bytes in two strings. 
 2481              		Return 0 if identical.
 2482              	
 2483              	  Picatout 2020-12-01, 
 2484              	    Because of problem with .align 
 2485              		directive that doesn't fill 
ARM GAS  forth.s 			page 138


 2486              		with zero's I had to change 
 2487              		the "SAME?" and "FIND" 
 2488              	 	words  to do a byte by byte comparison. 
 2489              	****************************************/
 2490 3aa0 783A0000 		_HEADER SAMEQ,5,"SAME?"
 2490      0553414D 
 2490      453F00BF 
 2491 3aac 504700BF 		_NEST
 2492 3ab0 D1260000 		_ADR	TOR
 2493 3ab4 4B260000 		_BRAN	SAME2
 2493      F83A0000 
 2494              	SAME1:
 2495 3abc 4D270000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2496 3ac0 BD260000 		_ADR	RAT   // a1 a2 a1 u 
 2497 3ac4 ED270000 		_ADR	PLUS  // a1 a2 a1+u 
 2498 3ac8 9D260000 		_ADR	CAT	   // a1 a2 c1    		
 2499 3acc 4D270000 		_ADR	OVER  // a1 a2 c1 a2 
 2500 3ad0 BD260000 		_ADR	RAT    
 2501 3ad4 ED270000 		_ADR	PLUS    
 2502 3ad8 9D260000 		_ADR	CAT	  // a1 a2 c1 c2
 2503 3adc FD270000 		_ADR	SUBB  
 2504 3ae0 FD280000 		_ADR	QDUP
 2505 3ae4 37260000 		_QBRAN	SAME2
 2505      F83A0000 
 2506 3aec A9260000 		_ADR	RFROM
 2507 3af0 19270000 		_ADR	DROP
 2508 3af4 7F240000 		_UNNEST	// strings not equal
 2509              	SAME2:
 2510 3af8 19260000 		_DONXT	SAME1
 2510      BC3A0000 
 2511 3b00 F7250000 		_DOLIT	0
 2511      00000000 
 2512 3b08 7F240000 		_UNNEST	// strings equal
 2513              	
 2514              	/***********************************
 2515              	    FIND	( a na -- ca na | a F )
 2516              	 	Search a vocabulary for a string.
 2517              		Return ca and na if succeeded.
 2518              	hidden word used by NAME?
 2519              	
 2520              	  Picatout 2020-12-01,  
 2521              		 Modified from original. 
 2522              	   See comment for word "SAME?" 
 2523              	************************************/
 2524              	FIND:
 2525 3b0c 504700BF 		_NEST
 2526 3b10 39270000 		_ADR	SWAP			// na a	
 2527 3b14 7D2B0000 		_ADR	COUNT			// na a+1 count
 2528 3b18 29270000 		_ADR	DUPP 
 2529 3b1c 1F2C0000 		_ADR	TEMP
 2530 3b20 69260000 		_ADR	STORE			// na a+1 count 
 2531 3b24 D1260000 		_ADR  TOR		// na a+1  R: count  
 2532 3b28 39270000 		_ADR	SWAP			// a+1 na
 2533              	FIND1:
 2534 3b2c 29270000 		_ADR	DUPP			// a+1 na na
 2535 3b30 37260000 		_QBRAN	FIND6	// end of vocabulary
 2535      843B0000 
ARM GAS  forth.s 			page 139


 2536 3b38 29270000 		_ADR	DUPP			// a+1 na na
 2537 3b3c 9D260000 		_ADR	CAT			// a+1 na name1
 2538 3b40 F7250000 		_DOLIT	MASKK
 2538      1FFFFFFF 
 2539 3b48 6D270000 		_ADR	ANDD
 2540 3b4c BD260000 		_ADR	RAT			// a+1 na name1 count 
 2541 3b50 95270000 		_ADR	XORR			// a+1 na,  same length?
 2542 3b54 37260000 		_QBRAN	FIND2
 2542      6C3B0000 
 2543 3b5c 99280000 		_ADR	CELLM			// a+1 la
 2544 3b60 7D260000 		_ADR	AT			// a+1 next_na
 2545 3b64 4B260000 		_BRAN	FIND1			// try next word
 2545      2C3B0000 
 2546              	FIND2:   
 2547 3b6c 49280000 		_ADR	ONEP			// a+1 na+1
 2548 3b70 1F2C0000 		_ADR	TEMP
 2549 3b74 7D260000 		_ADR	AT			// a+1 na+1 count
 2550 3b78 AD3A0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2551              	FIND3:	
 2552 3b7c 4B260000 		_BRAN	FIND4
 2552      9C3B0000 
 2553              	FIND6:	
 2554 3b84 A9260000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2555 3b88 19270000 		_ADR	DROP			// a+1 0
 2556 3b8c 39270000 		_ADR	SWAP			// 0 a+1
 2557 3b90 59280000 		_ADR	ONEM			// 0 a
 2558 3b94 39270000 		_ADR	SWAP			// a 0 
 2559 3b98 7F240000 		_UNNEST			// return without a match
 2560              	FIND4:	
 2561 3b9c 37260000 		_QBRAN	FIND5			// a+1 na+1
 2561      B83B0000 
 2562 3ba4 59280000 		_ADR	ONEM			// a+1 na
 2563 3ba8 99280000 		_ADR	CELLM			// a+4 la
 2564 3bac 7D260000 		_ADR	AT			// a+1 next_na
 2565 3bb0 4B260000 		_BRAN	FIND1			// compare next name
 2565      2C3B0000 
 2566              	FIND5:	
 2567 3bb8 A9260000 		_ADR	RFROM			// a+1 na+1 count
 2568 3bbc 19270000 		_ADR	DROP			// a+1 na+1
 2569 3bc0 39270000 		_ADR	SWAP			// na+1 a+1
 2570 3bc4 19270000 		_ADR	DROP			// na+1
 2571 3bc8 59280000 		_ADR	ONEM			// na
 2572 3bcc 29270000 		_ADR	DUPP			// na na
 2573 3bd0 813A0000 		_ADR	NAMET			// na ca
 2574 3bd4 39270000 		_ADR	SWAP			// ca na
 2575 3bd8 7F240000 		_UNNEST			//  return with a match
 2576              	
 2577              	/********************************
 2578              	    NAME?	( a -- ca na | a F )
 2579              	 	Search all context vocabularies 
 2580              		for a string.
 2581              	***********************************/
 2582 3bdc A43A0000 		_HEADER NAMEQ,5,"NAME?"
 2582      054E414D 
 2582      453F00BF 
 2583 3be8 504700BF 		_NEST
 2584 3bec 9D2C0000 		_ADR	CNTXT
ARM GAS  forth.s 			page 140


 2585 3bf0 7D260000 		_ADR	AT
 2586 3bf4 0D3B0000 		_ADR	FIND
 2587 3bf8 7F240000 		_UNNEST
 2588              	
 2589              	/********************
 2590              	  console input
 2591              	********************/
 2592              	
 2593              	/****************************
 2594              		ASCIZ ( a -- a+ )
 2595              		convert counted string to 
 2596              		null terminated string 
 2597              		in pad.
 2598              	*****************************/
 2599 3bfc E03B0000 		_HEADER ASCIZ,5,"ASCIZ" 
 2599      05415343 
 2599      495A00BF 
 2600 3c08 504700BF 		_NEST 
 2601 3c0c 7D2B0000 		_ADR COUNT
 2602 3c10 29270000 		_ADR DUPP
 2603 3c14 D1260000 		_ADR TOR 
 2604 3c18 9D300000 		_ADR PAD 
 2605 3c1c 39270000 		_ADR SWAP
 2606 3c20 25310000 		_ADR MOVE  
 2607 3c24 9D300000 		_ADR PAD 
 2608 3c28 A9260000 		_ADR RFROM
 2609 3c2c ED270000 		_ADR PLUS 
 2610 3c30 F7250000 		_DOLIT 0 
 2610      00000000 
 2611 3c38 39270000 		_ADR SWAP  
 2612 3c3c 89260000 		_ADR CSTOR
 2613 3c40 9D300000 		_ADR PAD   
 2614 3c44 7F240000 		_UNNEST 
 2615              	
 2616              	/***********************
 2617              		UPPER (cstring -- cstring )
 2618              		convert to upper case in situ
 2619              	*******************************/
 2620 3c48 003C0000 		_HEADER UPPER,5,"UPPER"
 2620      05555050 
 2620      455200BF 
 2621 3c54 504700BF 		_NEST 
 2622 3c58 29270000 		_ADR DUPP 
 2623 3c5c D1260000 		_ADR TOR 
 2624 3c60 7D2B0000 		_ADR COUNT
 2625 3c64 F7250000 		_DOLIT 0x1f
 2625      1F000000 
 2626 3c6c 6D270000 		_ADR ANDD
 2627 3c70 D1260000 		_ADR TOR 
 2628 3c74 4B260000 		_BRAN 3f
 2628      C83C0000 
 2629 3c7c 29270000 	1:  _ADR DUPP 
 2630 3c80 7D2B0000 		_ADR COUNT 
 2631 3c84 29270000 		_ADR DUPP 
 2632 3c88 F7250000 		_DOLIT 'a'-1
 2632      60000000 
 2633 3c90 F52A0000 		_ADR GREAT
ARM GAS  forth.s 			page 141


 2634 3c94 37260000 		_QBRAN 2f 
 2634      C03C0000 
 2635 3c9c 29270000 		_ADR DUPP 
 2636 3ca0 F7250000 		_DOLIT 'z'+1 
 2636      7B000000 
 2637 3ca8 C52A0000 		_ADR LESS 
 2638 3cac 37260000 		_QBRAN 2f 
 2638      C03C0000 
 2639 3cb4 F7250000 		_DOLIT 0x5f  
 2639      5F000000 
 2640 3cbc 6D270000 		_ADR ANDD
 2641 3cc0 11290000 	2:	_ADR ROT
 2642 3cc4 89260000 		_ADR CSTOR
 2643 3cc8 19260000 	3:  _DONXT 1b
 2643      7C3C0000 
 2644 3cd0 19270000 		_ADR DROP 
 2645 3cd4 A9260000 		_ADR RFROM
 2646 3cd8 7F240000 		_UNNEST 
 2647              	
 2648              	/**************************************
 2649              	   BKSP  ( bot eot cur -- bot eot cur )
 2650              	   Move cursor left by one character.
 2651              	hidden word used by KTAP
 2652              	***************************************/
 2653              	BKSP:
 2654 3cdc 504700BF 		_NEST
 2655 3ce0 D1260000 		_ADR	TOR
 2656 3ce4 4D270000 		_ADR	OVER
 2657 3ce8 A9260000 		_ADR	RFROM
 2658 3cec 39270000 		_ADR	SWAP
 2659 3cf0 4D270000 		_ADR	OVER
 2660 3cf4 95270000 		_ADR	XORR
 2661 3cf8 37260000 		_QBRAN	BACK1
 2661      243D0000 
 2662 3d00 F7250000 		_DOLIT	BKSPP
 2662      08000000 
 2663 3d08 01250000 		_ADR	EMIT
 2664 3d0c 59280000 		_ADR	ONEM
 2665 3d10 A9280000 		_ADR	BLANK
 2666 3d14 01250000 		_ADR	EMIT
 2667 3d18 F7250000 		_DOLIT	BKSPP
 2667      08000000 
 2668 3d20 01250000 		_ADR	EMIT
 2669              	BACK1:
 2670 3d24 7F240000 		  _UNNEST
 2671              	
 2672              	/****************************************
 2673              	   TAP	 ( bot eot cur c -- bot eot cur )
 2674              	   Accept and echo the key stroke 
 2675              	   and bump the cursor.
 2676              	hidden word used by KTAP 
 2677              	****************************************/
 2678              	TAP:
 2679 3d28 504700BF 		_NEST
 2680 3d2c 29270000 		_ADR	DUPP
 2681 3d30 01250000 		_ADR	EMIT
 2682 3d34 4D270000 		_ADR	OVER
ARM GAS  forth.s 			page 142


 2683 3d38 89260000 		_ADR	CSTOR
 2684 3d3c 49280000 		_ADR	ONEP
 2685 3d40 7F240000 		_UNNEST
 2686              	
 2687              	
 2688              	/*******************************************
 2689              	    kTAP	( bot eot cur c -- bot eot cur )
 2690              	 	Process a key stroke, CR or backspace.
 2691              	hidden word used by ACCEPT 
 2692              	*******************************************/
 2693              	KTAP:
 2694              	TTAP:
 2695 3d44 504700BF 		_NEST
 2696 3d48 29270000 		_ADR	DUPP
 2697 3d4c F7250000 		_DOLIT	CRR
 2697      0D000000 
 2698 3d54 95270000 		_ADR	XORR
 2699 3d58 37260000 		_QBRAN  KTAP2
 2699      883D0000 
 2700 3d60 F7250000 		_DOLIT	BKSPP
 2700      08000000 
 2701 3d68 95270000 		_ADR	XORR
 2702 3d6c 37260000 		_QBRAN	KTAP1
 2702      803D0000 
 2703 3d74 A9280000 		_ADR	BLANK
 2704 3d78 293D0000 		_ADR	TAP
 2705 3d7c 7F240000 		_UNNEST
 2706              	//	.word	0			// patch
 2707              	KTAP1:
 2708 3d80 DD3C0000 		_ADR	BKSP
 2709 3d84 7F240000 		_UNNEST
 2710              	KTAP2:
 2711 3d88 19270000 		_ADR	DROP
 2712 3d8c 39270000 		_ADR	SWAP
 2713 3d90 19270000 		_ADR	DROP
 2714 3d94 29270000 		_ADR	DUPP
 2715 3d98 7F240000 		_UNNEST
 2716              	
 2717              	/************************************
 2718              	    ACCEPT	( b u -- b u )
 2719              	 	Accept characters to input 
 2720              		buffer. Return with actual count.
 2721              	*************************************/
 2722 3d9c 4C3C0000 		_HEADER ACCEP,6,"ACCEPT"
 2722      06414343 
 2722      45505400 
 2723 3da8 504700BF 		_NEST
 2724 3dac 4D270000 		_ADR	OVER
 2725 3db0 ED270000 		_ADR	PLUS
 2726 3db4 4D270000 		_ADR	OVER
 2727              	ACCP1:
 2728 3db8 61290000 		_ADR	DDUP
 2729 3dbc 95270000 		_ADR	XORR
 2730 3dc0 37260000 		_QBRAN	ACCP4
 2730      003E0000 
 2731 3dc8 DD240000 		_ADR	KEY
 2732 3dcc 29270000 		_ADR	DUPP
ARM GAS  forth.s 			page 143


 2733 3dd0 A9280000 		_ADR	BLANK
 2734 3dd4 F7250000 		_DOLIT 127
 2734      7F000000 
 2735 3ddc 352D0000 		_ADR	WITHI
 2736 3de0 37260000 		_QBRAN	ACCP2
 2736      F43D0000 
 2737 3de8 293D0000 		_ADR	TAP
 2738 3dec 4B260000 		_BRAN	ACCP3
 2738      F83D0000 
 2739              	ACCP2:
 2740 3df4 453D0000 		_ADR	KTAP
 2741              	ACCP3:	  
 2742 3df8 4B260000 		_BRAN	ACCP1
 2742      B83D0000 
 2743              	ACCP4:
 2744 3e00 19270000 		_ADR	DROP
 2745 3e04 4D270000 		_ADR	OVER
 2746 3e08 FD270000 		_ADR	SUBB
 2747 3e0c 7F240000 		_UNNEST
 2748              	
 2749              	/*****************************
 2750              	    QUERY	( -- )
 2751              	 	Accept input stream 
 2752              		to terminal input buffer.
 2753              	******************************/
 2754 3e10 A03D0000 		_HEADER QUERY,5,"QUERY"
 2754      05515545 
 2754      525900BF 
 2755 3e1c 504700BF 		_NEST
 2756 3e20 BD300000 		_ADR	TIB
 2757 3e24 F7250000 		_DOLIT 80
 2757      50000000 
 2758 3e2c A93D0000 		_ADR	ACCEP
 2759 3e30 5D2C0000 		_ADR	NTIB
 2760 3e34 69260000 		_ADR	STORE
 2761 3e38 19270000 		_ADR	DROP
 2762 3e3c F7250000 		_DOLIT	0
 2762      00000000 
 2763 3e44 492C0000 		_ADR	INN
 2764 3e48 69260000 		_ADR	STORE
 2765 3e4c 7F240000 		_UNNEST
 2766              	
 2767              	/********************
 2768              	  Error handling
 2769              	********************/
 2770              	
 2771              	/*********************
 2772              	    ABORT	( a -- )
 2773              	 	Reset data stack 
 2774              		and jump to QUIT.
 2775              	**********************/
 2776 3e50 143E0000 		_HEADER ABORT,5,"ABORT"
 2776      0541424F 
 2776      525400BF 
 2777 3e5c 504700BF 		_NEST
 2778              	ABORT1:
 2779 3e60 D1350000 		_ADR	SPACE
ARM GAS  forth.s 			page 144


 2780 3e64 7D2B0000 		_ADR	COUNT
 2781 3e68 25360000 		_ADR	TYPEE
 2782 3e6c F7250000 		_DOLIT	0X3F
 2782      3F000000 
 2783 3e74 01250000 		_ADR	EMIT
 2784 3e78 59360000 		_ADR	CR
 2785 3e7c E53F0000 		_ADR	PRESE
 2786 3e80 4B260000 		_BRAN	QUIT
 2786      04400000 
 2787              	
 2788              	/*******************************
 2789              	    _abort"	( f -- )
 2790              	 	Run time routine of ABORT"
 2791              		Abort with a message.
 2792              	hidden used by compiler 
 2793              	********************************/
 2794              	ABORQ:
 2795 3e88 504700BF 		_NEST
 2796 3e8c 79360000 		_ADR	DOSTR
 2797 3e90 39270000 		_ADR	SWAP 
 2798 3e94 37260000 		_QBRAN	1f	// text flag
 2798      A43E0000 
 2799 3e9c 4B260000 		_BRAN	ABORT1
 2799      603E0000 
 2800              	1:
 2801 3ea4 19270000 		_ADR	DROP
 2802 3ea8 7F240000 		_UNNEST			// drop error
 2803              	
 2804              	/************************
 2805              	  The text interpreter
 2806              	************************/
 2807              	
 2808              	/***************************
 2809              	    $INTERPRET  ( a -- )
 2810              	 	Interpret a word. 
 2811              		If failed, try to 
 2812              		convert it to an integer.
 2813              	******************************/
 2814 3eac 543E0000 		_HEADER INTER,10,"$INTERPRET"
 2814      0A24494E 
 2814      54455250 
 2814      52455400 
 2815 3ebc 504700BF 		_NEST
 2816 3ec0 E93B0000 		_ADR	NAMEQ
 2817 3ec4 FD280000 		_ADR	QDUP	// ?defined
 2818 3ec8 37260000 		_QBRAN	INTE1
 2818      FC3E0000 
 2819 3ed0 7D260000 		_ADR	AT
 2820 3ed4 F7250000 		_DOLIT	COMPO
 2820      40000000 
 2821 3edc 6D270000 		_ADR	ANDD	// ?compile only lexicon bits
 2822 3ee0 893E0000 		_ABORQ	13," compile only"
 2822      0D20636F 
 2822      6D70696C 
 2822      65206F6E 
 2822      6C7900BF 
 2823 3ef4 0D260000 		_ADR	EXECU
ARM GAS  forth.s 			page 145


 2824 3ef8 7F240000 		_UNNEST			// execute defined word
 2825              	INTE1:
 2826 3efc 51240000 		_ADR	NUMBER 
 2827 3f00 37260000 		_QBRAN	INTE2
 2827      0C3F0000 
 2828 3f08 7F240000 		_UNNEST
 2829              	INTE2:
 2830 3f0c 5D3E0000 		_ADR	ABORT	// error
 2831              	
 2832              	/******************************
 2833              	    [	   ( -- )
 2834              	 	Start the text interpreter.
 2835              	*******************************/
 2836 3f10 B03E0000 		_HEADER LBRAC,IMEDD+1,"["
 2836      815B00BF 
 2837 3f18 504700BF 		_NEST
 2838 3f1c F7250000 		_DOLIT	INTER
 2838      BC3E0000 
 2839 3f24 712C0000 		_ADR	TEVAL
 2840 3f28 69260000 		_ADR	STORE
 2841 3f2c 7F240000 		_UNNEST
 2842              	
 2843              	/**********************
 2844              	    .OK	 ( -- )
 2845              	 	Display "ok" only 
 2846              		while interpreting.
 2847              	************************/
 2848 3f30 143F0000 		_HEADER DOTOK,3,".OK"
 2848      032E4F4B 
 2849 3f38 504700BF 		_NEST
 2850 3f3c F7250000 		_DOLIT	INTER
 2850      BC3E0000 
 2851 3f44 712C0000 		_ADR	TEVAL
 2852 3f48 7D260000 		_ADR	AT
 2853 3f4c 752A0000 		_ADR	EQUAL
 2854 3f50 37260000 		_QBRAN	DOTO1
 2854      603F0000 
 2855 3f58 C1360000 		_DOTQP	3," ok"
 2855      03206F6B 
 2856              	DOTO1:
 2857 3f60 59360000 		_ADR	CR
 2858 3f64 7F240000 		_UNNEST
 2859              	
 2860              	/*************************
 2861              	    ?STACK	( -- )
 2862              	 	Abort if the data 
 2863              		stack underflows.
 2864              	************************/
 2865 3f68 343F0000 		_HEADER QSTAC,6,"?STACK"
 2865      063F5354 
 2865      41434B00 
 2866 3f74 504700BF 		_NEST
 2867 3f78 39300000 		_ADR	DEPTH
 2868 3f7c 5D270000 		_ADR	ZLESS	// check only for underflow
 2869 3f80 893E0000 		_ABORQ	9,"underflow"
 2869      09756E64 
 2869      6572666C 
ARM GAS  forth.s 			page 146


 2869      6F7700BF 
 2870 3f90 7F240000 		_UNNEST
 2871              	
 2872              	/*******************
 2873              	    EVAL	( -- )
 2874              	 	Interpret the 
 2875              		input stream.
 2876              	*******************/
 2877 3f94 6C3F0000 		_HEADER EVAL,4,"EVAL"
 2877      04455641 
 2877      4C0000BF 
 2878 3fa0 504700BF 		_NEST
 2879              	EVAL1:
 2880 3fa4 613A0000 	    _ADR	TOKEN
 2881 3fa8 29270000 		_ADR	DUPP
 2882 3fac 9D260000 		_ADR	CAT	// ?input stream empty
 2883 3fb0 37260000 		_QBRAN	EVAL2
 2883      CC3F0000 
 2884 3fb8 712C0000 		_ADR	TEVAL
 2885 3fbc D5300000 		_ADR	ATEXE
 2886 3fc0 753F0000 		_ADR	QSTAC	// evaluate input, check stack
 2887 3fc4 4B260000 		_BRAN	EVAL1
 2887      A43F0000 
 2888              	EVAL2:
 2889 3fcc 19270000 		_ADR	DROP
 2890 3fd0 393F0000 		_ADR	DOTOK
 2891 3fd4 7F240000 		_UNNEST	// prompt
 2892              	
 2893              	/**********************************
 2894              	    PRESET	( -- )
 2895              	 	Reset data stack pointer 
 2896              		and the terminal input buffer.
 2897              	**********************************/
 2898 3fd8 983F0000 		_HEADER PRESE,6,"PRESET"
 2898      06505245 
 2898      53455400 
 2899 3fe4 504700BF 		_NEST 
 2900 3fe8 F7250000 		_DOLIT SPP 
 2900      00FF0120 
 2901 3ff0 F5260000 		_ADR SPSTOR 
 2902 3ff4 7F240000 		_UNNEST 
 2903              	
 2904              	/*********************
 2905              	    QUIT	( -- )
 2906              	 	Reset return stack 
 2907              		pointer and start 
 2908              		text interpreter.
 2909              	***********************/
 2910 3ff8 DC3F0000 		_HEADER QUIT,4,"QUIT"
 2910      04515549 
 2910      540000BF 
 2911 4004 F7250000 		_DOLIT RPP 
 2911      80FF0120 
 2912 400c E5260000 		_ADR RPSTOR 
 2913              	QUIT1:
 2914 4010 193F0000 		_ADR	LBRAC			// start interpretation
 2915              	QUIT2:
ARM GAS  forth.s 			page 147


 2916 4014 1D3E0000 		_ADR	QUERY			// get input
 2917 4018 A13F0000 		_ADR	EVAL
 2918 401c 4B260000 		_BRAN	QUIT2	// continue till error
 2918      14400000 
 2919              	
 2920              	/***************************
 2921              		FORGET ( <string> -- )
 2922              		forget all definition 
 2923              		starting at <string>
 2924              	****************************/
 2925 4024 FC3F0000 		_HEADER FORGET,6,"FORGET"
 2925      06464F52 
 2925      47455400 
 2926 4030 504700BF 		_NEST 
 2927 4034 613A0000 		_ADR TOKEN 
 2928 4038 29270000 		_ADR DUPP 
 2929 403c 37260000 		_QBRAN 9f 
 2929      78400000 
 2930 4044 E93B0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2931 4048 FD280000 		_ADR QDUP 
 2932 404c 37260000 		_QBRAN 8f
 2932      74400000 
 2933 4054 99280000 		_ADR CELLM // ( ca la )
 2934 4058 29270000 		_ADR DUPP 
 2935 405c B12C0000 		_ADR CPP   
 2936 4060 69260000 		_ADR STORE
 2937 4064 7D260000 		_ADR AT 
 2938 4068 DD2C0000 		_ADR LAST 
 2939 406c 69260000 		_ADR STORE
 2940 4070 CD450000 		_ADR OVERT 
 2941 4074 19270000 	8:  _ADR DROP 
 2942 4078 7F240000 	9:	_UNNEST 
 2943              	
 2944              		.p2align 2 
 2945              	
 2946              	/*****************
 2947              	  The compiler
 2948              	******************/
 2949              	
 2950              	/**************************************
 2951              	    '	   ( -- ca )
 2952              	 	Search context vocabularies 
 2953              		for the next word in input stream.
 2954              	***************************************/
 2955 407c 28400000 		_HEADER TICK,1,"'"
 2955      012700BF 
 2956 4084 504700BF 		_NEST
 2957 4088 613A0000 		_ADR	TOKEN
 2958 408c E93B0000 		_ADR	NAMEQ	// ?defined
 2959 4090 37260000 		_QBRAN	TICK1
 2959      9C400000 
 2960 4098 7F240000 		_UNNEST	// yes, push code address
 2961              	TICK1:	
 2962 409c 5D3E0000 		_ADR ABORT	// no, error
 2963              	
 2964              	/***********************
 2965              	    ALLOT	( n -- )
ARM GAS  forth.s 			page 148


 2966              	 	Allocate n bytes to 
 2967              		the ram area.
 2968              	************************/
 2969 40a0 80400000 		_HEADER ALLOT,5,"ALLOT"
 2969      05414C4C 
 2969      4F5400BF 
 2970 40ac 504700BF 		_NEST
 2971 40b0 B12C0000 		_ADR	CPP
 2972 40b4 352B0000 		_ADR	PSTOR
 2973 40b8 7F240000 		_UNNEST			// adjust code pointer
 2974              	
 2975              	/******************************
 2976              	    ,	   ( w -- )
 2977              	 	Compile an integer 
 2978              		into the code dictionary.
 2979              	******************************/
 2980 40bc A4400000 		_HEADER COMMA,1,","
 2980      012C00BF 
 2981 40c4 504700BF 		_NEST
 2982 40c8 85300000 		_ADR	HERE
 2983 40cc 29270000 		_ADR	DUPP
 2984 40d0 89280000 		_ADR	CELLP	// cell boundary
 2985 40d4 B12C0000 		_ADR	CPP
 2986 40d8 69260000 		_ADR	STORE
 2987 40dc 69260000 		_ADR	STORE
 2988 40e0 7F240000 		_UNNEST	// adjust code pointer, compile
 2989              		.p2align 2 
 2990              	
 2991              	/************************************
 2992              	    [COMPILE]   ( -- //  string> )
 2993              	 	Compile the next immediate word 
 2994              		into code dictionary.
 2995              	*************************************/
 2996 40e4 C0400000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2996      895B434F 
 2996      4D50494C 
 2996      455D00BF 
 2997 40f4 504700BF 		_NEST
 2998 40f8 85400000 		_ADR	TICK
 2999 40fc C5400000 		_ADR	COMMA
 3000 4100 7F240000 		_UNNEST
 3001              	
 3002              	/****************************
 3003              	    COMPILE	( -- )
 3004              	 	Compile the next address 
 3005              		in colon list to code 
 3006              		dictionary.
 3007              	*******************************/
 3008 4104 E8400000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3008      47434F4D 
 3008      50494C45 
 3009 4110 504700BF 		_NEST
 3010 4114 A9260000 		_ADR	RFROM
 3011 4118 29270000 		_ADR	DUPP 
 3012 411c 7D260000 		_ADR	AT
 3013 4120 F7250000 		_DOLIT 1 
 3013      01000000 
ARM GAS  forth.s 			page 149


 3014 4128 81270000 		_ADR	ORR 
 3015 412c C5400000 		_ADR	COMMA 
 3016 4130 89280000 		_ADR	CELLP 
 3017 4134 D1260000 		_ADR	TOR 
 3018 4138 7F240000 		_UNNEST	// adjust return address
 3019              	
 3020              	/*************************
 3021              	    LITERAL	( w -- )
 3022              	 	Compile tos to code 
 3023              		dictionary as an 
 3024              		integer literal.
 3025              	***************************/
 3026 413c 08410000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3026      874C4954 
 3026      4552414C 
 3027 4148 504700BF 		_NEST
 3028 414c F7250000 		_COMPI	DOLIT
 3028      F6250000 
 3028      29460000 
 3029 4158 C5400000 		_ADR	COMMA
 3030 415c 7F240000 		_UNNEST
 3031              	
 3032              	/********************
 3033              	    $,"	( -- )
 3034              	 	Compile a literal 
 3035              		string up to next " .
 3036              	hidden word 
 3037              	************************/
 3038              	STRCQ:
 3039 4160 504700BF 		_NEST
 3040 4164 F7250000 		_DOLIT -4
 3040      FCFFFFFF 
 3041 416c B12C0000 		_ADR	CPP
 3042 4170 352B0000 		_ADR	PSTOR
 3043 4174 F7250000 		_DOLIT	'\"'
 3043      22000000 
 3044 417c 3D3A0000 		_ADR	WORDD			// move word to code dictionary
 3045 4180 7D2B0000 		_ADR	COUNT
 3046 4184 ED270000 		_ADR	PLUS
 3047 4188 D12F0000 		_ADR	ALGND			// calculate aligned end of string
 3048 418c B12C0000 		_ADR	CPP
 3049 4190 69260000 		_ADR	STORE
 3050 4194 7F240000 		_UNNEST 			// adjust the code pointer
 3051              	
 3052              	/*******************
 3053              	   Structures
 3054              	*******************/
 3055              	
 3056              	/*************************
 3057              	    FOR	 ( -- a )
 3058              	 	Start a FOR-NEXT loop 
 3059              		structure in a colon 
 3060              		definition.
 3061              	**************************/
 3062 4198 40410000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3062      C3464F52 
 3063 41a0 504700BF 		_NEST
ARM GAS  forth.s 			page 150


 3064 41a4 F7250000 		_COMPI	TOR
 3064      D0260000 
 3064      29460000 
 3065 41b0 85300000 		_ADR	HERE
 3066 41b4 7F240000 		_UNNEST
 3067              	
 3068              	/********************************
 3069              		DO ( limit start -- )
 3070              		initialise a DO...LOOP 
 3071              		or DO...+LOOP 
 3072              	********************************/
 3073 41b8 9C410000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3073      C2444F00 
 3074 41c0 504700BF 		_NEST
 3075 41c4 F7250000 		_COMPI SWAP
 3075      38270000 
 3075      29460000 
 3076 41d0 F7250000 		_COMPI TOR 
 3076      D0260000 
 3076      29460000 
 3077 41dc F7250000 		_COMPI TOR 
 3077      D0260000 
 3077      29460000 
 3078 41e8 85300000 		_ADR HERE 
 3079 41ec 7F240000 		_UNNEST 
 3080              	
 3081              	DOPLOOP: // ( n -- R: counter limit )
 3082 41f0 B8E80300 		ldmfd RSP!,{T0,T1}
 3083 41f4 3044     		add T0,TOS 
 3084 41f6 28E90300 		stmfd RSP!,{T0,T1}
 3085 41fa 8842     		cmp T0,T1 
 3086 41fc 05D4     		bmi 9f 
 3087 41fe 08F10808 		add RSP,#8
 3088 4202 0CF1040C 		add IP,#4
 3089 4206 FEF737B9 		_NEXT 
 3090 420a DCF800C0 	9:  ldr IP,[IP]
 3091 420e FEF733B9 		_NEXT 
 3092              		
 3093              	/***************************
 3094              		+LOOP ( a -- )
 3095              		increment counter 
 3096              		end loop if countr>limit
 3097              	****************************/
 3098 4212 BC410000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3098      C52B4C4F 
 3098      4F50
 3099 421c 504700BF 		_NEST 
 3100 4220 F7250000 		_COMPI DOPLOOP 
 3100      F0410000 
 3100      29460000 
 3101 422c C5400000 		_ADR COMMA
 3102 4230 7F240000 		_UNNEST 
 3103              	
 3104              	DOLOOP: // ( -- R: counter limit )
 3105 4234 D8F80000 		ldr T0,[RSP]
 3106 4238 00F10100 		add T0,#1
 3107 423c C8F80000 		str T0,[RSP]
ARM GAS  forth.s 			page 151


 3108 4240 D8F80410 		ldr T1,[RSP,#4]
 3109 4244 8842     		cmp T0,T1 
 3110 4246 05D4     		bmi 9f
 3111 4248 08F10808 		add RSP,#8  // counter and limit  
 3112 424c 0CF1040C 		add IP,IP,#4 // skip loop address 
 3113 4250 FEF712B9 		_NEXT 
 3114 4254 DCF800C0 	9:  ldr IP,[IP]
 3115 4258 FEF70EB9 		_NEXT 
 3116              	
 3117              	
 3118              	/********************************
 3119              		LOOP ( a -- )
 3120              		increment counter 
 3121              		end loop if >= limit 
 3122              	*********************************/
 3123 425c 16420000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3123      C44C4F4F 
 3123      500000BF 
 3124 4268 504700BF 		_NEST 
 3125 426c F7250000 		_COMPI DOLOOP
 3125      34420000 
 3125      29460000 
 3126 4278 C5400000 		_ADR COMMA 
 3127 427c 7F240000 		_UNNEST 
 3128              	
 3129              	
 3130              	/**********************
 3131              	    BEGIN	( -- a )
 3132              	 	Start an infinite 
 3133              		or indefinite 
 3134              		loop structure.
 3135              	************************/
 3136 4280 60420000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3136      C5424547 
 3136      494E00BF 
 3137 428c 504700BF 		_NEST
 3138 4290 85300000 		_ADR	HERE
 3139 4294 7F240000 		_UNNEST
 3140              		.p2align 2 
 3141              	
 3142              	/********************
 3143              	    NEXT	( a -- )
 3144              	 	Terminate a FOR-NEXT
 3145              		loop structure.
 3146              	**************************/
 3147 4298 84420000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3147      C44E4558 
 3147      540000BF 
 3148 42a4 504700BF 		_NEST
 3149 42a8 F7250000 		_COMPI	DONXT
 3149      18260000 
 3149      29460000 
 3150 42b4 C5400000 		_ADR	COMMA
 3151 42b8 7F240000 		_UNNEST
 3152              	
 3153              	/***************************
 3154              		I ( -- n )
ARM GAS  forth.s 			page 152


 3155              		stack for loop counter 
 3156              	***************************/
 3157 42bc 9C420000 		_HEADER I,1+COMPO,"I"
 3157      414900BF 
 3158 42c4 47F8046D 		_PUSH 
 3159 42c8 D8F80060 		ldr TOS,[RSP]
 3160 42cc FEF7D4B8 		_NEXT 
 3161              	
 3162              	/****************************
 3163              		J ( -- n )
 3164              		stack outer loop counter 
 3165              	****************************/
 3166 42d0 C0420000 		_HEADER J,1,"J"
 3166      014A00BF 
 3167 42d8 47F8046D 		_PUSH 
 3168 42dc D8F80460 		ldr TOS,[RSP,#4]
 3169 42e0 FEF7CAB8 		_NEXT 
 3170              	
 3171              	/**********************
 3172              	    UNTIL	( a -- )
 3173              	 	Terminate a BEGIN-UNTIL
 3174              		indefinite loop structure.
 3175              	******************************/
 3176 42e4 D4420000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3176      C5554E54 
 3176      494C00BF 
 3177 42f0 504700BF 		_NEST
 3178 42f4 F7250000 		_COMPI	QBRAN
 3178      36260000 
 3178      29460000 
 3179 4300 C5400000 		_ADR	COMMA
 3180 4304 7F240000 		_UNNEST
 3181              	
 3182              	/**********************
 3183              	    AGAIN	( a -- )
 3184              	 	Terminate a BEGIN-AGAIN
 3185              		infinite loop structure.
 3186              	*****************************/
 3187 4308 E8420000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3187      C5414741 
 3187      494E00BF 
 3188 4314 504700BF 		_NEST
 3189 4318 F7250000 		_COMPI	BRAN
 3189      4A260000 
 3189      29460000 
 3190 4324 C5400000 		_ADR	COMMA
 3191 4328 7F240000 		_UNNEST
 3192              	
 3193              	/************************
 3194              	    IF	  ( -- A )
 3195              	 	Begin a conditional
 3196              		branch structure.
 3197              	**************************/
 3198 432c 0C430000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3198      C2494600 
 3199 4334 504700BF 		_NEST
 3200 4338 F7250000 		_COMPI	QBRAN
ARM GAS  forth.s 			page 153


 3200      36260000 
 3200      29460000 
 3201 4344 85300000 		_ADR	HERE
 3202 4348 F7250000 		_DOLIT	4
 3202      04000000 
 3203 4350 B12C0000 		_ADR	CPP
 3204 4354 352B0000 		_ADR	PSTOR
 3205 4358 7F240000 		_UNNEST
 3206              	
 3207              	/*************************
 3208              	    AHEAD	( -- A )
 3209              	 	Compile a forward 
 3210              		branch instruction.
 3211              	*************************/
 3212 435c 30430000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3212      C5414845 
 3212      414400BF 
 3213 4368 504700BF 		_NEST
 3214 436c F7250000 		_COMPI	BRAN
 3214      4A260000 
 3214      29460000 
 3215 4378 85300000 		_ADR	HERE
 3216 437c F7250000 		_DOLIT	4
 3216      04000000 
 3217 4384 B12C0000 		_ADR	CPP
 3218 4388 352B0000 		_ADR	PSTOR
 3219 438c 7F240000 		_UNNEST
 3220              	
 3221              	/**************************
 3222              	    REPEAT	( A a -- )
 3223              	 	Terminate a BEGIN-WHILE-REPEAT
 3224              		indefinite loop.
 3225              	**********************************/
 3226 4390 60430000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3226      C6524550 
 3226      45415400 
 3227 439c 504700BF 		_NEST
 3228 43a0 15430000 		_ADR	AGAIN
 3229 43a4 85300000 		_ADR	HERE
 3230 43a8 39270000 		_ADR	SWAP
 3231 43ac 69260000 		_ADR	STORE
 3232 43b0 7F240000 		_UNNEST
 3233              	
 3234              	/*********************
 3235              	    THEN	( A -- )
 3236              	 	Terminate a conditional
 3237              		branch structure.
 3238              	*****************************/
 3239 43b4 94430000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3239      C4544845 
 3239      4E0000BF 
 3240 43c0 504700BF 		_NEST
 3241 43c4 85300000 		_ADR	HERE
 3242 43c8 39270000 		_ADR	SWAP
 3243 43cc 69260000 		_ADR	STORE
 3244 43d0 7F240000 		_UNNEST
 3245              	
ARM GAS  forth.s 			page 154


 3246              	/***************************
 3247              	    AFT	 ( a -- a A )
 3248              	 	Jump to THEN in a 
 3249              		FOR-AFT-THEN-NEXT loop 
 3250              		the first time through.
 3251              	*****************************/
 3252 43d4 B8430000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3252      C3414654 
 3253 43dc 504700BF 		_NEST
 3254 43e0 19270000 		_ADR	DROP
 3255 43e4 69430000 		_ADR	AHEAD
 3256 43e8 8D420000 		_ADR	BEGIN
 3257 43ec 39270000 		_ADR	SWAP
 3258 43f0 7F240000 		_UNNEST
 3259              	
 3260              	/**********************
 3261              	    ELSE	( A -- A )
 3262              	 	Start the false 
 3263              		clause in an 
 3264              		IF-ELSE-THEN structure.
 3265              	****************************/
 3266 43f4 D8430000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3266      C4454C53 
 3266      450000BF 
 3267 4400 504700BF 		_NEST
 3268 4404 69430000 		_ADR	AHEAD
 3269 4408 39270000 		_ADR	SWAP
 3270 440c C1430000 		_ADR	THENN
 3271 4410 7F240000 		_UNNEST
 3272              	
 3273              	/**************************
 3274              	    WHILE	( a -- A a )
 3275              	 	Conditional branch out 
 3276              		of a BEGIN-WHILE-REPEAT loop.
 3277              	*********************************/
 3278 4414 F8430000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3278      C5574849 
 3278      4C4500BF 
 3279 4420 504700BF 		_NEST
 3280 4424 35430000 		_ADR	IFF
 3281 4428 39270000 		_ADR	SWAP
 3282 442c 7F240000 		_UNNEST
 3283              	
 3284              	/***********************************
 3285              	    ABORT"	( -- //  string> )
 3286              	 	Conditional abort with an 
 3287              		error message.
 3288              	***********************************/
 3289 4430 18440000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3289      8641424F 
 3289      52542200 
 3290 443c 504700BF 		_NEST
 3291 4440 F7250000 		_COMPI	ABORQ
 3291      883E0000 
 3291      29460000 
 3292 444c 61410000 		_ADR	STRCQ
 3293 4450 7F240000 		_UNNEST
ARM GAS  forth.s 			page 155


 3294              	
 3295              	/******************************
 3296              	    $"	( -- //  string> )
 3297              	 	Compile an inline 
 3298              		word literal.
 3299              	*****************************/
 3300 4454 34440000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3300      C2242200 
 3301 445c 504700BF 		_NEST
 3302 4460 F7250000 		_COMPI	STRQP
 3302      A4360000 
 3302      29460000 
 3303 446c 61410000 		_ADR	STRCQ
 3304 4470 7F240000 		_UNNEST
 3305              	
 3306              	/******************************
 3307              	    ."	( -- //  string> )
 3308              	 	Compile an inline word
 3309              		literal to be typed out 
 3310              		at run time.
 3311              	*******************************/
 3312 4474 58440000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3312      C22E2200 
 3313 447c 504700BF 		_NEST
 3314 4480 F7250000 		_COMPI	DOTQP
 3314      C0360000 
 3314      29460000 
 3315 448c 61410000 		_ADR	STRCQ
 3316 4490 7F240000 		_UNNEST
 3317              	
 3318              	/*********************
 3319              	  Name compiler
 3320              	***********************/
 3321              	
 3322              	/**************************
 3323              	    ?UNIQUE	( a -- a )
 3324              	 	Display a warning 
 3325              		message if the word 
 3326              		already exists.
 3327              	**************************/
 3328 4494 78440000 		_HEADER UNIQU,7,"?UNIQUE"
 3328      073F554E 
 3328      49515545 
 3329 44a0 504700BF 		_NEST
 3330 44a4 29270000 		_ADR	DUPP
 3331 44a8 E93B0000 		_ADR	NAMEQ			// ?name exists
 3332 44ac 37260000 		_QBRAN	UNIQ1	// redefinitions are OK
 3332      CC440000 
 3333 44b4 C1360000 		_DOTQP	7," reDef "		// but warn the user
 3333      07207265 
 3333      44656620 
 3334 44c0 4D270000 		_ADR	OVER
 3335 44c4 7D2B0000 		_ADR	COUNT
 3336 44c8 25360000 		_ADR	TYPEE			// just in case its not planned
 3337              	UNIQ1:
 3338 44cc 19270000 		_ADR	DROP
 3339 44d0 7F240000 		_UNNEST
ARM GAS  forth.s 			page 156


 3340              	
 3341              	/***********************
 3342              	    $,n	 ( na -- )
 3343              	 	Build a new dictionary 
 3344              		name using the data at na.
 3345              	hidden word 
 3346              	*******************************/
 3347              	SNAME:
 3348 44d4 504700BF 		_NEST
 3349 44d8 29270000 		_ADR	DUPP			//  na na
 3350 44dc 9D260000 		_ADR	CAT			//  ?null input
 3351 44e0 37260000 		_QBRAN	SNAM1
 3351      1C450000 
 3352 44e8 A1440000 		_ADR	UNIQU			//  na
 3353 44ec DD2C0000 		_ADR	LAST			//  na last
 3354 44f0 7D260000 		_ADR	AT			//  na la
 3355 44f4 C5400000 		_ADR	COMMA			//  na
 3356 44f8 29270000 		_ADR	DUPP			//  na na
 3357 44fc DD2C0000 		_ADR	LAST			//  na na last
 3358 4500 69260000 		_ADR	STORE			//  na , save na for vocabulary link
 3359 4504 7D2B0000 		_ADR	COUNT			//  na+1 count
 3360 4508 ED270000 		_ADR	PLUS			//  na+1+count
 3361 450c D12F0000 		_ADR	ALGND			//  word boundary
 3362 4510 B12C0000 		_ADR	CPP
 3363 4514 69260000 		_ADR	STORE			//  top of dictionary now
 3364 4518 7F240000 		_UNNEST
 3365              	SNAM1:
 3366 451c A5360000 		_ADR	STRQP
 3367 4520 07       		.byte	7
 3368 4521 206E616D 		.ascii " name? "
 3368      653F20
 3369 4528 5D3E0000 		_ADR	ABORT
 3370              	
 3371              	/************************
 3372              	    $COMPILE	( a -- )
 3373              	 	Compile next word to 
 3374              		code dictionary as 
 3375              		a token or literal.
 3376              	**************************/
 3377 452c 98440000 		_HEADER SCOMP,8,"$COMPILE"
 3377      0824434F 
 3377      4D50494C 
 3377      450000BF 
 3378 453c 504700BF 		_NEST
 3379 4540 E93B0000 		_ADR	NAMEQ
 3380 4544 FD280000 		_ADR	QDUP	// defined?
 3381 4548 37260000 		_QBRAN	SCOM2
 3381      78450000 
 3382 4550 7D260000 		_ADR	AT
 3383 4554 F7250000 		_DOLIT	IMEDD
 3383      80000000 
 3384 455c 6D270000 		_ADR	ANDD	// immediate?
 3385 4560 37260000 		_QBRAN	SCOM1
 3385      70450000 
 3386 4568 0D260000 		_ADR	EXECU
 3387 456c 7F240000 		_UNNEST			// it's immediate, execute
 3388              	SCOM1:
ARM GAS  forth.s 			page 157


 3389 4570 29460000 		_ADR	CALLC			// it's not immediate, compile
 3390 4574 7F240000 		_UNNEST	
 3391              	SCOM2:
 3392 4578 51240000 		_ADR	NUMBER 
 3393 457c 37260000 		_QBRAN	SCOM3
 3393      8C450000 
 3394 4584 49410000 		_ADR	LITER
 3395 4588 7F240000 		_UNNEST			// compile number as integer
 3396              	SCOM3: // compilation abort 
 3397 458c 95450000 		_ADR COLON_ABORT 
 3398 4590 5D3E0000 		_ADR	ABORT			// error
 3399              	
 3400              	/********************************
 3401              	 before aborting a compilation 
 3402              	 reset HERE and LAST
 3403              	 to previous values. 
 3404              	*******************************/
 3405              	COLON_ABORT:
 3406 4594 504700BF 		_NEST 
 3407 4598 DD2C0000 		_ADR LAST 
 3408 459c 7D260000 		_ADR AT 
 3409 45a0 99280000 		_ADR CELLM 
 3410 45a4 29270000 		_ADR DUPP 
 3411 45a8 B12C0000 		_ADR CPP  
 3412 45ac 69260000 		_ADR STORE 
 3413 45b0 7D260000 		_ADR AT 
 3414 45b4 DD2C0000 		_ADR LAST 
 3415 45b8 69260000 		_ADR STORE 
 3416 45bc 7F240000 		_UNNEST 
 3417              	
 3418              	/*********************
 3419              	    OVERT	( -- )
 3420              	 	Link a new word 
 3421              		into the current 
 3422              		vocabulary.
 3423              	**********************/
 3424 45c0 30450000 		_HEADER OVERT,5,"OVERT"
 3424      054F5645 
 3424      525400BF 
 3425 45cc 504700BF 		_NEST
 3426 45d0 DD2C0000 		_ADR	LAST
 3427 45d4 7D260000 		_ADR	AT
 3428 45d8 9D2C0000 		_ADR	CNTXT
 3429 45dc 69260000 		_ADR	STORE
 3430 45e0 7F240000 		_UNNEST
 3431              	
 3432              	/**********************
 3433              	    ;  ( -- )
 3434              	 	Terminate a colon
 3435              		definition.
 3436              	***********************/
 3437 45e4 C4450000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3437      C13B00BF 
 3438 45ec 504700BF 		_NEST
 3439 45f0 F7250000 		_DOLIT	UNNEST
 3439      7E240000 
 3440 45f8 29460000 		_ADR	CALLC
ARM GAS  forth.s 			page 158


 3441 45fc 193F0000 		_ADR	LBRAC
 3442 4600 CD450000 		_ADR	OVERT
 3443 4604 7F240000 		_UNNEST
 3444              	
 3445              	/******************
 3446              	    ]	   ( -- )
 3447              	 	Start compiling 
 3448              		the words in 
 3449              		the input stream.
 3450              	*********************/
 3451 4608 E8450000 		_HEADER RBRAC,1,"]"
 3451      015D00BF 
 3452 4610 504700BF 		_NEST
 3453 4614 F7250000 		_DOLIT	SCOMP
 3453      3C450000 
 3454 461c 712C0000 		_ADR	TEVAL
 3455 4620 69260000 		_ADR	STORE
 3456 4624 7F240000 		_UNNEST
 3457              	
 3458              	/*********************
 3459              	    BL.W	( ca -- )
 3460              	 	compile ca.
 3461              	hidden word used by compiler
 3462              	*****************************/
 3463              	CALLC:
 3464 4628 504700BF 		_NEST
 3465 462c F7250000 		_DOLIT 1 
 3465      01000000 
 3466 4634 81270000 		_ADR ORR 
 3467 4638 C5400000 		_ADR COMMA  
 3468 463c 7F240000 		_UNNEST 
 3469              	
 3470              	
 3471              	/*************************
 3472              	 	:	( -- //  string> )
 3473              	 	Start a new colon 
 3474              		definition using 
 3475              		next word as its name.
 3476              	**************************/
 3477 4640 0C460000 		_HEADER COLON,1,":"
 3477      013A00BF 
 3478 4648 504700BF 		_NEST
 3479 464c 613A0000 		_ADR	TOKEN
 3480 4650 D5440000 		_ADR	SNAME
 3481 4654 89240000 		_ADR	COMPI_NEST 
 3482 4658 11460000 		_ADR	RBRAC
 3483 465c 7F240000 		_UNNEST
 3484              	
 3485              	/*************************
 3486              	    IMMEDIATE   ( -- )
 3487              	 	Make the last compiled 
 3488              		word an immediate word.
 3489              	***************************/
 3490 4660 44460000 		_HEADER IMMED,9,"IMMEDIATE"
 3490      09494D4D 
 3490      45444941 
 3490      544500BF 
ARM GAS  forth.s 			page 159


 3491 4670 504700BF 		_NEST
 3492 4674 F7250000 		_DOLIT	IMEDD
 3492      80000000 
 3493 467c DD2C0000 		_ADR	LAST
 3494 4680 7D260000 		_ADR	AT
 3495 4684 7D260000 		_ADR	AT
 3496 4688 81270000 		_ADR	ORR
 3497 468c DD2C0000 		_ADR	LAST
 3498 4690 7D260000 		_ADR	AT
 3499 4694 69260000 		_ADR	STORE
 3500 4698 7F240000 		_UNNEST
 3501              	
 3502              	/******************
 3503              	  Defining words
 3504              	******************/
 3505              	
 3506              	/***********************************
 3507              	    CONSTANT	( u -- //  string> )
 3508              	 	Compile a new constant.
 3509              	************************************/
 3510 469c 64460000 		_HEADER CONST,8,"CONSTANT"
 3510      08434F4E 
 3510      5354414E 
 3510      540000BF 
 3511 46ac 504700BF 		_NEST 
 3512 46b0 613A0000 		_ADR	TOKEN
 3513 46b4 D5440000 		_ADR	SNAME
 3514 46b8 CD450000 		_ADR	OVERT
 3515 46bc 89240000 		_ADR	COMPI_NEST
 3516 46c0 F7250000 		_DOLIT	DOCON
 3516      B02B0000 
 3517 46c8 29460000 		_ADR	CALLC
 3518 46cc C5400000 		_ADR	COMMA
 3519 46d0 F7250000 		_DOLIT	UNNEST 
 3519      7E240000 
 3520 46d8 29460000 		_ADR	CALLC  
 3521 46dc 7F240000 		_UNNEST
 3522              	
 3523              		.p2align 2 
 3524              	/****************************************
 3525              	 doDOES> ( -- a )
 3526              	 runtime action of DOES> 
 3527              	 leave parameter field address on stack 
 3528              	hidden word used by compiler 
 3529              	***************************************/
 3530              	DODOES:
 3531 46e0 504700BF 		_NEST 
 3532 46e4 A9260000 		_ADR	RFROM
 3533 46e8 89280000 		_ADR	CELLP 
 3534 46ec 49280000 		_ADR	ONEP  
 3535 46f0 DD2C0000 		_ADR LAST 
 3536 46f4 7D260000 		_ADR AT
 3537 46f8 813A0000 		_ADR NAMET 
 3538 46fc 89280000 		_ADR CELLP 
 3539 4700 69260000 		_ADR STORE  
 3540 4704 7F240000 		_UNNEST 
 3541              	
ARM GAS  forth.s 			page 160


 3542              		.p2align 2
 3543              	/**********************
 3544              	  DOES> ( -- )
 3545              	  compile time action
 3546              	*************************/
 3547 4708 A0460000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3547      C5444F45 
 3547      533E00BF 
 3548 4714 504700BF 		_NEST 
 3549 4718 F7250000 		_DOLIT DODOES 
 3549      E0460000 
 3550 4720 29460000 		_ADR CALLC 
 3551 4724 F7250000 		_DOLIT	UNNEST
 3551      7E240000 
 3552 472c 29460000 		_ADR	CALLC 
 3553 4730 89240000 		_ADR COMPI_NEST
 3554 4734 F7250000 		_DOLIT RFROM 
 3554      A8260000 
 3555 473c 29460000 		_ADR	CALLC
 3556 4740 7F240000 		_UNNEST 
 3557              	
 3558              	
 3559              	/****************************
 3560              	  DEFER@ ( "name" -- a )
 3561              	  return value of code field 
 3562              	  of defered function. 
 3563              	******************************/
 3564 4744 0C470000 		_HEADER DEFERAT,6,"DEFER@"
 3564      06444546 
 3564      45524000 
 3565 4750 504700BF 		_NEST 
 3566 4754 85400000 		_ADR TICK
 3567 4758 89280000 		_ADR CELLP 
 3568 475c 7D260000 		_ADR AT 
 3569 4760 59280000 		_ADR ONEM 
 3570 4764 7F240000 		_UNNEST 
 3571              	
 3572              	/*********************************
 3573              	 DEFER! ( "name1" "name2" -- )
 3574              	 assign an action to a defered word 
 3575              	************************************/
 3576 4768 48470000 		_HEADER DEFERSTO,6,"DEFER!"
 3576      06444546 
 3576      45522100 
 3577 4774 504700BF 		_NEST 
 3578 4778 85400000 		_ADR TICK 
 3579 477c 49280000 		_ADR ONEP 
 3580 4780 85400000 		_ADR TICK 
 3581 4784 89280000 		_ADR CELLP 
 3582 4788 69260000 		_ADR STORE 
 3583 478c 7F240000 		_UNNEST
 3584              	
 3585              	/****************************
 3586              	  DEFER ( "name" -- )
 3587              	  create a defered definition
 3588              	*****************************/
 3589 4790 6C470000 		_HEADER DEFER,5,"DEFER"
ARM GAS  forth.s 			page 161


 3589      05444546 
 3589      455200BF 
 3590 479c 504700BF 		_NEST 
 3591 47a0 ED470000 		_ADR CREAT 
 3592 47a4 F7250000 		_DOLIT UNNEST 
 3592      7E240000 
 3593 47ac 29460000 		_ADR CALLC 
 3594 47b0 F7250000 		_DOLIT DEFER_NOP
 3594      D4470000 
 3595 47b8 49280000 		_ADR ONEP 
 3596 47bc DD2C0000 		_ADR LAST 
 3597 47c0 7D260000 		_ADR AT 
 3598 47c4 813A0000 		_ADR NAMET 
 3599 47c8 89280000 		_ADR CELLP 
 3600 47cc 69260000 		_ADR STORE 
 3601 47d0 7F240000 		_UNNEST 
 3602              	DEFER_NOP:
 3603 47d4 504700BF 		_NEST  
 3604 47d8 F5250000 		_ADR NOP 
 3605 47dc 7F240000 		_UNNEST 
 3606              	
 3607              	/******************************
 3608              	    CREATE	( -- //  string> )
 3609              	 	Compile a new array entry 
 3610              		without allocating code space.
 3611              	***********************************/
 3612 47e0 94470000 		_HEADER CREAT,6,"CREATE"
 3612      06435245 
 3612      41544500 
 3613 47ec 504700BF 		_NEST 
 3614 47f0 613A0000 		_ADR	TOKEN
 3615 47f4 D5440000 		_ADR	SNAME
 3616 47f8 CD450000 		_ADR	OVERT
 3617 47fc 89240000 		_ADR	COMPI_NEST 
 3618 4800 F7250000 		_DOLIT	DOVAR
 3618      A42B0000 
 3619 4808 29460000 		_ADR	CALLC
 3620 480c 7F240000 		_UNNEST
 3621              	
 3622              	/*******************************
 3623              	    VARIABLE	( -- //  string> )
 3624              	 	Compile a new variable 
 3625              		initialized to 0.
 3626              	***********************************/
 3627 4810 E4470000 		_HEADER VARIA,8,"VARIABLE"
 3627      08564152 
 3627      4941424C 
 3627      450000BF 
 3628 4820 504700BF 		_NEST
 3629 4824 ED470000 		_ADR	CREAT
 3630 4828 F7250000 		_DOLIT	0
 3630      00000000 
 3631 4830 C5400000 		_ADR	COMMA
 3632 4834 F7250000 		_DOLIT UNNEST
 3632      7E240000 
 3633 483c 29460000 		_ADR	CALLC  
 3634 4840 7F240000 		_UNNEST
ARM GAS  forth.s 			page 162


 3635              	
 3636              	/***********
 3637              	  Tools
 3638              	***********/
 3639              	
 3640              	/*************************
 3641              	    dm+	 ( a u -- a )
 3642              	 	Dump u bytes from , 
 3643              		leaving a+u on the stack.
 3644              	hidden word used by DUMP 
 3645              	****************************/
 3646              	DMP:
 3647 4844 504700BF 		_NEST
 3648 4848 4D270000 		_ADR	OVER
 3649 484c F7250000 		_DOLIT	4
 3649      04000000 
 3650 4854 05370000 		_ADR	UDOTR			// display address
 3651 4858 D1350000 		_ADR	SPACE
 3652 485c D1260000 		_ADR	TOR			// start count down loop
 3653 4860 4B260000 		_BRAN	PDUM2			// skip first pass
 3653      80480000 
 3654              	PDUM1:
 3655 4868 29270000 	  _ADR	DUPP
 3656 486c 9D260000 		_ADR	CAT
 3657 4870 F7250000 		_DOLIT	3
 3657      03000000 
 3658 4878 05370000 		_ADR	UDOTR			// display numeric data
 3659 487c 49280000 		_ADR	ONEP			// increment address
 3660              	PDUM2:
 3661 4880 19260000 	  _ADR	DONXT
 3662 4884 68480000 		.word	PDUM1	// loop till done
 3663 4888 7F240000 		_UNNEST
 3664              		.p2align 2 
 3665              	//    DUMP	( a u -- )
 3666              	// 	Dump u bytes from a, in a formatted manner.
 3667              	
 3668              	/**********************
 3669              		DUMP ( a n -- )
 3670              		hex dump memory 
 3671              	*********************/
 3672 488c 14480000 		_HEADER DUMP,4,"DUMP"
 3672      0444554D 
 3672      500000BF 
 3673 4898 504700BF 		_NEST
 3674 489c 152C0000 		_ADR	BASE
 3675 48a0 7D260000 		_ADR	AT
 3676 48a4 D1260000 		_ADR	TOR
 3677 48a8 69330000 		_ADR	HEX			// save radix,set hex
 3678 48ac F7250000 		_DOLIT	16
 3678      10000000 
 3679 48b4 712F0000 		_ADR	SLASH			// change count to lines
 3680 48b8 D1260000 		_ADR	TOR
 3681 48bc 4B260000 		_BRAN	DUMP4			// start count down loop
 3681      EC480000 
 3682              	DUMP1:
 3683 48c4 59360000 	  _ADR	CR
 3684 48c8 F7250000 		_DOLIT	16
ARM GAS  forth.s 			page 163


 3684      10000000 
 3685 48d0 61290000 		_ADR	DDUP
 3686 48d4 45480000 		_ADR	DMP			// display numeric
 3687 48d8 11290000 		_ADR	ROT
 3688 48dc 11290000 		_ADR	ROT
 3689 48e0 D1350000 		_ADR	SPACE
 3690 48e4 D1350000 		_ADR	SPACE
 3691 48e8 25360000 		_ADR	TYPEE			// display printable characters
 3692              	DUMP4:
 3693 48ec 19260000 	  _DONXT	DUMP1	// loop till done
 3693      C4480000 
 3694              	DUMP3:
 3695 48f4 19270000 		_ADR	DROP
 3696 48f8 A9260000 		_ADR	RFROM
 3697 48fc 152C0000 		_ADR	BASE
 3698 4900 69260000 		_ADR	STORE			// restore radix
 3699 4904 7F240000 		_UNNEST
 3700              	
 3701              	/*******************************
 3702              	   TRACE. display in hexadecimal
 3703              	   TRACE. use a different buffer 
 3704              	   than DOT  to avoid current 
 3705              	   display overwrite.
 3706              	*******************************/ 
 3707              	TDOT: // ( u -- )
 3708 4908 504700BF 		_NEST 
 3709 490c 152C0000 		_ADR BASE 
 3710 4910 7D260000 		_ADR AT 
 3711 4914 D1260000 		_ADR TOR
 3712 4918 69330000 		_ADR HEX  
 3713 491c 852C0000 		_ADR HLD 
 3714 4920 7D260000 		_ADR AT 
 3715 4924 D1260000 		_ADR TOR   // R: base *hold 
 3716 4928 85300000 		_ADR HERE 
 3717 492c F7250000 		_DOLIT 160 
 3717      A0000000 
 3718 4934 ED270000 		_ADR PLUS
 3719 4938 29270000 		_ADR DUPP 
 3720 493c D1260000 		_ADR TOR  
 3721 4940 852C0000 		_ADR HLD 
 3722 4944 69260000 		_ADR STORE
 3723 4948 112E0000 		_ADR STOD 
 3724 494c B9320000 		_ADR DIGS  
 3725 4950 19270000 		_ADR DROP
 3726 4954 F7250000 		_DOLIT '$'
 3726      24000000 
 3727 495c 6D320000 		_ADR HOLD 
 3728 4960 852C0000 		_ADR HLD 
 3729 4964 7D260000 		_ADR AT
 3730 4968 A9260000 		_ADR RFROM   
 3731 496c 4D270000 		_ADR OVER 
 3732 4970 FD270000 		_ADR SUBB 
 3733 4974 D1350000 		_ADR SPACE 
 3734 4978 25360000 		_ADR TYPEE 
 3735 497c A9260000 		_ADR RFROM 
 3736 4980 852C0000 		_ADR HLD 
 3737 4984 69260000 		_ADR STORE 
ARM GAS  forth.s 			page 164


 3738 4988 A9260000 		_ADR RFROM 
 3739 498c 152C0000 		_ADR BASE 
 3740 4990 69260000 		_ADR STORE 
 3741 4994 7F240000 		_UNNEST 
 3742              	
 3743              	/**********************
 3744              	   .S	  ( ... -- ... )
 3745              	 	Display the contents 
 3746              		of the data stack.
 3747              	*************************/
 3748 4998 90480000 		_HEADER DOTS,2,".S"
 3748      022E5300 
 3749 49a0 504700BF 		_NEST
 3750 49a4 39300000 		_ADR	DEPTH	// stack depth
 3751 49a8 D1260000 		_ADR	TOR		// start count down loop
 3752 49ac 4B260000 		_BRAN	DOTS2  // skip first pass
 3752      C0490000 
 3753              	DOTS1:
 3754 49b4 BD260000 		_ADR	RAT
 3755 49b8 5D300000 		_ADR	PICK
 3756 49bc 09490000 		_ADR	TDOT // index stack, display contents
 3757              	DOTS2:
 3758 49c0 19260000 		_DONXT	DOTS1 // loop till done
 3758      B4490000 
 3759 49c8 59360000 		_ADR	CR 
 3760 49cc 7F240000 		_UNNEST
 3761              	
 3762              	RPAT: 
 3763 49d0 47F8046D 		_PUSH 
 3764 49d4 4646     		mov TOS,RSP 
 3765 49d6 FDF74FBD 		_NEXT 
 3766              	
 3767              	RBASE: 
 3768 49da 47F8046D 		_PUSH 
 3769 49de 4FF68076 		_MOV32 TOS,RPP 
 3769      C2F20106 
 3770 49e6 FDF747BD 		_NEXT 
 3771              	
 3772              	
 3773              	/**************************
 3774              	  R.  display return stack 
 3775              	**************************/
 3776              	RDOT: 
 3777 49ea 504700BF 		_NEST 
 3778 49ee DB490000 		_ADR RBASE
 3779 49f2 D1490000 		_ADR RPAT 
 3780 49f6 FD270000 		_ADR SUBB
 3781 49fa CD280000 		_ADR CELLSL   
 3782 49fe F7250000 		_DOLIT 2
 3782      02000000 
 3783 4a06 FD270000 		_ADR SUBB 
 3784 4a0a D1260000 		_ADR TOR
 3785 4a0e DB490000 		_ADR RBASE 
 3786 4a12 99280000 	1:	_ADR CELLM 
 3787 4a16 29270000 		_ADR DUPP 
 3788 4a1a 7D260000 		_ADR AT 
 3789 4a1e 09490000 		_ADR TDOT 
ARM GAS  forth.s 			page 165


 3790 4a22 A9260000 		_ADR RFROM   
 3791 4a26 59280000 		_ADR ONEM 
 3792 4a2a 29270000 		_ADR DUPP
 3793 4a2e D1260000 		_ADR TOR 
 3794 4a32 612A0000 		_ADR ZEQUAL   
 3795 4a36 37260000 		_QBRAN 1b
 3795      124A0000 
 3796 4a3e A9260000 		_ADR RFROM  
 3797 4a42 39290000 		_ADR DDROP
 3798 4a46 59360000 		_ADR CR   
 3799 4a4a 7F240000 		_UNNEST 
 3800              	
 3801              	/**************************
 3802              		TRACE ( -- )
 3803              		display stacks content 
 3804              	**************************/
 3805 4a4e 9C490000 		_HEADER TRACE,5,"TRACE"
 3805      05545241 
 3805      4345
 3806 4a58 504700BF 		_NEST
 3807 4a5c 59360000 		_ADR CR 
 3808 4a60 F7250000 		_DOLIT '>' 
 3808      3E000000 
 3809 4a68 F7250000 		_DOLIT 'S'
 3809      53000000 
 3810 4a70 01250000 		_ADR EMIT 
 3811 4a74 01250000 		_ADR EMIT  
 3812 4a78 A1490000 		_ADR DOTS
 3813 4a7c F7250000 		_DOLIT '>'
 3813      3E000000 
 3814 4a84 F7250000 		_DOLIT 'R'
 3814      52000000 
 3815 4a8c 01250000 		_ADR EMIT 
 3816 4a90 01250000 		_ADR EMIT 
 3817 4a94 EB490000 		_ADR RDOT 
 3818 4a98 7F240000 		_UNNEST 
 3819              	
 3820              	
 3821              	/*****************************
 3822              	    >NAME	( ca -- na | F )
 3823              	 	Convert code address 
 3824              		to a name address.
 3825              	*****************************/
 3826 4a9c 524A0000 		_HEADER TNAME,5,">NAME"
 3826      053E4E41 
 3826      4D4500BF 
 3827 4aa8 504700BF 		_NEST
 3828 4aac D1260000 		_ADR	TOR			//  
 3829 4ab0 9D2C0000 		_ADR	CNTXT			//  va
 3830 4ab4 7D260000 		_ADR	AT			//  na
 3831              	TNAM1:
 3832 4ab8 29270000 		_ADR	DUPP			//  na na
 3833 4abc 37260000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3833      EC4A0000 
 3834 4ac4 29270000 		_ADR	DUPP			//  na na
 3835 4ac8 813A0000 		_ADR	NAMET			//  na ca
 3836 4acc BD260000 		_ADR	RAT			//  na ca code
ARM GAS  forth.s 			page 166


 3837 4ad0 95270000 		_ADR	XORR			//  na f --
 3838 4ad4 37260000 		_QBRAN	TNAM2
 3838      EC4A0000 
 3839 4adc 99280000 		_ADR	CELLM			//  la 
 3840 4ae0 7D260000 		_ADR	AT			//  next_na
 3841 4ae4 4B260000 		_BRAN	TNAM1
 3841      B84A0000 
 3842              	TNAM2:	
 3843 4aec A9260000 		_ADR	RFROM
 3844 4af0 19270000 		_ADR	DROP			//  0|na --
 3845 4af4 7F240000 		_UNNEST			// 0
 3846              	
 3847              	/********************************
 3848              	    .ID	 ( na -- )
 3849              	 	Display the name at address.
 3850              	********************************/
 3851 4af8 A04A0000 		_HEADER DOTID,3,".ID"
 3851      032E4944 
 3852 4b00 504700BF 		_NEST
 3853 4b04 FD280000 		_ADR	QDUP			// if zero no name
 3854 4b08 37260000 		_QBRAN	DOTI1
 3854      284B0000 
 3855 4b10 7D2B0000 		_ADR	COUNT
 3856 4b14 F7250000 		_DOLIT	0x1F
 3856      1F000000 
 3857 4b1c 6D270000 		_ADR	ANDD			// mask lexicon bits
 3858 4b20 25360000 		_ADR	TYPEE
 3859 4b24 7F240000 		_UNNEST			// display name string
 3860              	DOTI1:
 3861 4b28 C1360000 		_DOTQP	9," {noName}"
 3861      09207B6E 
 3861      6F4E616D 
 3861      657D00BF 
 3862 4b38 7F240000 		_UNNEST
 3863              	
 3864              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3865              	.if WANT_SEE 
 3866              	/*******************************
 3867              	    SEE	 ( -- //  string> )
 3868              	 	A simple decompiler.
 3869              	*******************************/
 3870              		_HEADER SEE,3,"SEE"
 3871              		_NEST
 3872              		_ADR	TICK	//  ca --, starting address
 3873              		_ADR	CR	
 3874              		_DOLIT	20
 3875              		_ADR	TOR
 3876              	SEE1:
 3877              		_ADR	CELLP			//  a
 3878              		_ADR	DUPP			//  a a
 3879              		_ADR	DECOMP		//  a
 3880              		_DONXT	SEE1
 3881              		_ADR	DROP
 3882              		_UNNEST
 3883              	
 3884              	/*************************
 3885              	 	DECOMPILE ( a -- )
ARM GAS  forth.s 			page 167


 3886              	 	Convert code in a.  
 3887              		Display name of command or as data.
 3888              	*************************************/
 3889              		_HEADER DECOMP,9,"DECOMPILE"
 3890              		_NEST
 3891              		_ADR	DUPP			//  a a
 3892              	// 	_ADR	TOR			//  a
 3893              		_ADR	AT			//  a code
 3894              		_ADR	DUPP			//  a code code
 3895              		_DOLIT	0xF800D000 //0xF800F800
 3896              		_ADR	ANDD
 3897              		_DOLIT	0xF000D000 //0xF800F000
 3898              		_ADR	EQUAL			//  a code ?
 3899              		_ADR	INVER 
 3900              		_QBRAN	DECOM2	//  not a command
 3901              		//  a valid_code --, extract address and display name
 3902              		MOVW	IP,#0xFFE
 3903              		MOV	WP,TOS
 3904              		LSL	TOS,TOS,#21		//  get bits 22-12
 3905              		ASR	TOS,TOS,#9		//  with sign extension
 3906              		LSR	WP,WP,#15		//  get bits 11-1
 3907              		AND	WP,WP,IP		//  retain only bits 11-1
 3908              		ORR	TOS,TOS,WP		//  get bits 22-1
 3909              		NOP
 3910              		_ADR	OVER			//  a offset a
 3911              		_ADR	PLUS			//  a target-4
 3912              		_ADR	CELLP			//  a target
 3913              		_ADR	TNAME			//  a na/0 --, is it a name?
 3914              		_ADR	QDUP			//  name address or zero
 3915              		_QBRAN	DECOM1
 3916              		_ADR	SPACE			//  a na
 3917              		_ADR	DOTID			//  a --, display name
 3918              	// 	_ADR	RFROM			//  a
 3919              		_ADR	DROP
 3920              		_UNNEST
 3921              	DECOM1:	// _ADR	RFROM		//  a
 3922              		_ADR	AT			//  data
 3923              		_ADR	UDOT			//  display data
 3924              		_UNNEST
 3925              	DECOM2:
 3926              		_ADR	UDOT
 3927              	// 	_ADR	RFROM
 3928              		_ADR	DROP
 3929              		_UNNEST
 3930              	.endif 
 3931              	
 3932              	/**********************
 3933              		VLIST ( -- )
 3934              		WORDS alias 
 3935              		+ display words count 
 3936              	**********************/
 3937 4b3c FC4A0000 		_HEADER VLIST,5,"VLIST"
 3937      05564C49 
 3937      535400BF 
 3938 4b48 504700BF 		_NEST 
 3939 4b4c 6D4B0000 		_ADR WORDS
 3940 4b50 59360000 		_ADR CR 
ARM GAS  forth.s 			page 168


 3941 4b54 B14B0000 		_ADR WC
 3942 4b58 6D370000 		_ADR DOT    
 3943 4b5c 7F240000 		_UNNEST 
 3944              	
 3945              	/*********************
 3946              	    WORDS	( -- )
 3947              	 	Display the names 
 3948              		in the context vocabulary.
 3949              	*******************************/
 3950 4b60 404B0000 		_HEADER WORDS,5,"WORDS"
 3950      05574F52 
 3950      445300BF 
 3951 4b6c 504700BF 		_NEST
 3952 4b70 59360000 		_ADR	CR
 3953 4b74 9D2C0000 		_ADR	CNTXT
 3954 4b78 7D260000 		_ADR	AT			// only in context
 3955              	WORS1:
 3956 4b7c FD280000 		_ADR	QDUP			// ?at end of list
 3957 4b80 37260000 		_QBRAN	WORS2
 3957      A44B0000 
 3958 4b88 29270000 		_ADR	DUPP
 3959 4b8c D1350000 		_ADR	SPACE
 3960 4b90 014B0000 		_ADR	DOTID			// display a name
 3961 4b94 99280000 		_ADR	CELLM
 3962 4b98 7D260000 		_ADR	AT
 3963 4b9c 4B260000 		_BRAN	WORS1
 3963      7C4B0000 
 3964              	WORS2:
 3965 4ba4 7F240000 		_UNNEST
 3966              	
 3967              	/*****************************
 3968              		WC ( - n )
 3969              		count words in dictionary 
 3970              	******************************/
 3971 4ba8 644B0000 		_HEADER WC,2,"WC"
 3971      02574300 
 3972 4bb0 504700BF 		_NEST 
 3973 4bb4 F7250000 		_DOLIT 0 
 3973      00000000 
 3974 4bbc DD2C0000 		_ADR LAST
 3975 4bc0 7D260000 	1:	_ADR AT
 3976 4bc4 FD280000 		_ADR QDUP
 3977 4bc8 37260000 		_QBRAN 9f
 3977      E84B0000 
 3978 4bd0 39270000 		_ADR SWAP
 3979 4bd4 49280000 		_ADR ONEP
 3980 4bd8 39270000 		_ADR SWAP
 3981 4bdc 99280000 		_ADR CELLM
 3982 4be0 4B260000 		_BRAN 1b
 3982      C04B0000 
 3983 4be8 7F240000 	9:	_UNNEST 
 3984              	
 3985              	/*************************
 3986              		MARK <string> ( -- )
 3987              	    create forget point 
 3988              		in dictionary 
 3989              	*************************/	
ARM GAS  forth.s 			page 169


 3990 4bec AC4B0000 		_HEADER MARK,4,"MARK"
 3990      044D4152 
 3990      4B0000BF 
 3991 4bf8 504700BF 		_NEST
 3992 4bfc ED470000 		_ADR CREAT 
 3993 4c00 E1460000 		_ADR DODOES 
 3994 4c04 7F240000 		_UNNEST
 3995 4c08 504700BF 		_NEST  
 3996 4c0c A9260000 		_ADR RFROM 
 3997 4c10 F7250000 		_DOLIT 8
 3997      08000000 
 3998 4c18 FD270000 		_ADR SUBB
 3999 4c1c A94A0000 		_ADR TNAME
 4000 4c20 99280000 		_ADR CELLM
 4001 4c24 7D260000 		_ADR AT  
 4002 4c28 DD2C0000 		_ADR LAST 
 4003 4c2c 69260000 		_ADR STORE 
 4004 4c30 CD450000 		_ADR OVERT
 4005 4c34 7F240000 		_UNNEST 
 4006              	
 4007              	/****************
 4008              	  cold start
 4009              	*****************/
 4010              	
 4011              	/**********************************
 4012              	    VER	 ( -- n )
 4013              	 	Return the version 
 4014              		number of this implementation.
 4015              	hidden word used by COLD
 4016              	**********************************/
 4017              	VERSN:
 4018 4c38 504700BF 		_NEST
 4019 4c3c F7250000 		_DOLIT	VER*256+EXT
 4019      00010000 
 4020 4c44 7F240000 		_UNNEST
 4021              	
 4022              	/*********************
 4023              	    hi	  ( -- )
 4024              	 	Display the sign-on 
 4025              		message.
 4026              	***********************/
 4027 4c48 F04B0000 		_HEADER HI,2,"HI"
 4027      02484900 
 4028 4c50 504700BF 		_NEST
 4029 4c54 59360000 		_ADR	CR	// initialize I/O
 4030 4c58 C1360000 		_DOTQP	17, "beyond Jupiter, v" 
 4030      11626579 
 4030      6F6E6420 
 4030      4A757069 
 4030      7465722C 
 4031 4c70 152C0000 		_ADR	BASE
 4032 4c74 7D260000 		_ADR	AT
 4033 4c78 69330000 		_ADR	HEX	// save radix
 4034 4c7c 394C0000 		_ADR	VERSN
 4035 4c80 4D320000 		_ADR	BDIGS
 4036 4c84 F7250000 		_DOLIT  0 
 4036      00000000 
ARM GAS  forth.s 			page 170


 4037 4c8c 99320000 		_ADR	DIG
 4038 4c90 99320000 		_ADR	DIG
 4039 4c94 F7250000 		_DOLIT	'.'
 4039      2E000000 
 4040 4c9c 6D320000 		_ADR	HOLD
 4041 4ca0 B9320000 		_ADR	DIGS
 4042 4ca4 15330000 		_ADR	EDIGS
 4043 4ca8 25360000 		_ADR	TYPEE	// format version number
 4044 4cac 152C0000 		_ADR	BASE
 4045 4cb0 69260000 		_ADR	STORE
 4046 4cb4 59360000 		_ADR	CR
 4047 4cb8 7F240000 		_UNNEST			// restore radix
 4048              	
 4049              	/**********************
 4050              	 check if PS2 keyboard 
 4051              	 present.
 4052              	**********************/
 4053              	PS2_QUERY: 
 4054 4cbc 504700BF 		_NEST 
 4055 4cc0 F7250000 		_DOLIT 400 
 4055      90010000 
 4056 4cc8 99250000 		_ADR PAUSE
 4057 4ccc C9130000 		_ADR PS2_QKEY
 4058 4cd0 37260000 		_QBRAN 1f
 4058      EC4C0000 
 4059 4cd8 F7250000 		_DOLIT BAT_OK 
 4059      AA000000 
 4060 4ce0 95270000 		_ADR XORR 
 4061 4ce4 37260000 		_QBRAN 9f 
 4061      304D0000 
 4062 4cec B1150000 	1:	_ADR KBD_RST
 4063 4cf0 F7250000 		_DOLIT BAT_OK 
 4063      AA000000 
 4064 4cf8 95270000 		_ADR XORR  
 4065 4cfc 37260000 		_QBRAN 9f  
 4065      304D0000 
 4066              	// no ps2 keyboard 
 4067              	// swith to serial console
 4068 4d04 59360000 		_ADR CR 
 4069 4d08 C1360000 		_DOTQP 25,"no PS2 keyboard detected."
 4069      196E6F20 
 4069      50533220 
 4069      6B657962 
 4069      6F617264 
 4070 4d28 C1050000 		_ADR SERIAL 
 4071 4d2c D9050000 		_ADR CONSOLE 
 4072 4d30 7F240000 	9:	_UNNEST 
 4073              	
 4074              	/*************************
 4075              	   check PA8 to 
 4076              	   select console 
 4077              	   PA8 -> low  LOCAL 
 4078              	   PA8 -> high SERIAL 
 4079              	*************************/
 4080              	IF_SENSE:
 4081 4d34 504700BF 		_NEST 
 4082 4d38 A9050000 		_ADR LOCAL 
ARM GAS  forth.s 			page 171


 4083 4d3c F7250000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4083      10000240 
 4084 4d44 7D260000 		_ADR AT 
 4085 4d48 F7250000 		_DOLIT (1<<8)
 4085      00010000 
 4086 4d50 6D270000 		_ADR ANDD 
 4087 4d54 37260000 		_QBRAN 9f 
 4087      604D0000 
 4088 4d5c 49280000 		_ADR ONEP 
 4089 4d60 D9050000 	9:  _ADR CONSOLE 
 4090 4d64 7F240000 		_UNNEST 
 4091              	
 4092              	
 4093              	/********************
 4094              	    COLD	( -- )
 4095              	 	The high level cold 
 4096              		start sequence.
 4097              	**************************/
 4098 4d68 4C4C0000 		.word	LINK 
 4099              		LINK = . 
 4100 4d6c 04       	_LASTN:	.byte  4
 4101 4d6d 434F4C44 		.ascii "COLD"
 4102 4d71 0000BF   		.p2align 2	
 4103              	COLD:
 4104 4d74 00B5FBF7 		_CALL forth_init 
 4104      F7F95DF8 
 4104      04EB
 4105 4d7e DFF85CC0 		ldr IP,=COLD1 
 4106 4d82 FDF779BB 		_NEXT
 4107 4d86 00BF     		.p2align 2 
 4108              	COLD1:
 4109 4d88 F7250000 		_DOLIT  0 
 4109      00000000 
 4110 4d90 CD250000 		_ADR ULED // turn off user LED 
 4111 4d94 F7250000 		_DOLIT	UZERO
 4111      F4030000 
 4112 4d9c F7250000 		_DOLIT	UPP
 4112      00000020 
 4113 4da4 F7250000 		_DOLIT	ULAST-UZERO
 4113      B0000000 
 4114 4dac 25310000 		_ADR	MOVE 			// initialize user area
 4115 4db0 E53F0000 		_ADR	PRESE			// initialize stack and TIB
 4116 4db4 354D0000 		_ADR	IF_SENSE
 4117 4db8 5D180000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4118 4dbc BD4C0000 		_ADR 	PS2_QUERY  
 4119 4dc0 451B0000 		_ADR    FINIT 
 4120 4dc4 012C0000 		_ADR	TBOOT
 4121 4dc8 D5300000 		_ADR	ATEXE			// application boot
 4122 4dcc CD450000 		_ADR	OVERT
 4123 4dd0 4B260000 		_BRAN	QUIT			// start interpretation
 4123      04400000 
 4124              	COLD2:
 4125              		.p2align 2 	
 4126              	CTOP:
 4127 4dd8 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4128              	
 4129              	
ARM GAS  forth.s 			page 172


 4130 4ddc 884D0000 	  .end 
ARM GAS  forth.s 			page 173


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 174


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 175


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 176


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 177


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 178


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 179


             forth.s:2877   .text:0000000000003fa0 EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:00000000000007d0 tv_out_isr
          ser-term.s:35     .text:00000000000004b4 uart_rx_handler
           ps2_kbd.s:78     .text:00000000000010ac kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002478 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2898   .text:0000000000003fe4 PRESE
             forth.s:268    .text:00000000000025f6 DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:975    .text:0000000000002b7c COUNT
             forth.s:2061   .text:0000000000003624 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:437    .text:0000000000002728 DUPP
             forth.s:393    .text:00000000000026d0 TOR
             forth.s:1062   .text:0000000000002c14 BASE
             forth.s:339    .text:0000000000002668 STORE
             forth.s:2203   .text:000000000000376c DOT
             forth.s:375    .text:00000000000026a8 RFROM
             forth.s:472    .text:000000000000276c ANDD
             forth.s:309    .text:0000000000002636 QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:154    .text:0000000000002500 EMIT
             forth.s:2033   .text:00000000000035d0 SPACE
ARM GAS  forth.s 			page 180


              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:2079   .text:0000000000003658 CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:385    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004e2 ser_init
             tvout.s:74     .text:0000000000000720 tv_init
           ps2_kbd.s:307    .text:00000000000012cc kbd_init
         spi-flash.s:41     .text:00000000000016e0 flash_spi_init
             forth.s:4103   .text:0000000000004d74 COLD
             forth.s:83     .text:0000000000002470 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:475    .text:0000000000000332 gpio_config
              init.s:550    .text:00000000000003de gpio_out
              init.s:410    .text:00000000000002a8 nvic_set_priority
              init.s:565    .text:00000000000003f4 UZERO
              init.s:603    .text:00000000000004a4 ULAST
              init.s:419    .text:00000000000002c0 negative_irq
              init.s:431    .text:00000000000002da nvic_enable_irq
              init.s:448    .text:0000000000000304 nvic_disable_irq
              init.s:512    .text:000000000000039a input_pull
              init.s:505    .text:0000000000000388 output_type
              init.s:528    .text:00000000000003b0 gpio_speed
              init.s:566    .text:00000000000003f4 $d
             forth.s:4027   .text:0000000000004c50 HI
           ps2_kbd.s:396    .text:00000000000013c8 PS2_QKEY
             tvout.s:563    .text:0000000000000c90 TV_EMIT
             forth.s:2814   .text:0000000000003ebc INTER
             forth.s:4100   .text:0000000000004d6c _LASTN
             forth.s:4126   .text:0000000000004dd8 CTOP
             forth.s:4099   .text:0000000000004d6c LINK
              init.s:608    .text:00000000000004a4 $d
          ser-term.s:33     .text:00000000000004b4 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:000000000000053a $d
          ser-term.s:90     .text:000000000000053e _SER_QKEY
          ser-term.s:90     .text:0000000000000548 SER_QKEY
          ser-term.s:110    .text:0000000000000574 $d
          ser-term.s:110    .text:0000000000000578 _SER_EMIT
          ser-term.s:110    .text:0000000000000584 SER_EMIT
          ser-term.s:124    .text:000000000000059e $d
          ser-term.s:124    .text:00000000000005a2 _LOCAL
          ser-term.s:124    .text:00000000000005a8 $t
          ser-term.s:124    .text:00000000000005a8 LOCAL
          ser-term.s:133    .text:00000000000005b4 $d
          ser-term.s:133    .text:00000000000005b8 _SERIAL
ARM GAS  forth.s 			page 181


          ser-term.s:133    .text:00000000000005c0 SERIAL
          ser-term.s:142    .text:00000000000005cc $d
          ser-term.s:142    .text:00000000000005d0 _CONSOLE
          ser-term.s:142    .text:00000000000005d8 $t
          ser-term.s:142    .text:00000000000005d8 CONSOLE
          ser-term.s:164    .text:00000000000005f8 $d
          ser-term.s:164    .text:00000000000005fc _ANSI_PARAM
          ser-term.s:164    .text:0000000000000608 ANSI_PARAM
          ser-term.s:166    .text:000000000000060c $d
             forth.s:579    .text:0000000000002848 ONEP
             forth.s:1425   .text:0000000000002f38 SLMOD
             forth.s:668    .text:00000000000028fc QDUP
             forth.s:324    .text:000000000000264a BRAN
             forth.s:529    .text:00000000000027ec PLUS
             forth.s:587    .text:0000000000002858 ONEM
             forth.s:90     .text:000000000000247e UNNEST
          ser-term.s:191    .text:0000000000000678 _ANSI_ESC
          ser-term.s:191    .text:0000000000000680 ANSI_ESC
          ser-term.s:193    .text:0000000000000684 $d
          ser-term.s:203    .text:00000000000006a4 _SER_AT
          ser-term.s:203    .text:00000000000006ac SER_AT
          ser-term.s:205    .text:00000000000006b0 $d
             forth.s:445    .text:0000000000002738 SWAP
          ser-term.s:219    .text:00000000000006e0 _SER_CLS
          ser-term.s:219    .text:00000000000006e8 $t
          ser-term.s:219    .text:00000000000006e8 SER_CLS
          ser-term.s:221    .text:00000000000006ec $d
          ser-term.s:228    .text:0000000000000710 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
ARM GAS  forth.s 			page 182


             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000720 $t
             tvout.s:150    .text:00000000000007fc state_vsync
             tvout.s:191    .text:0000000000000850 state_pre_video
             tvout.s:202    .text:0000000000000862 state_video_out
             tvout.s:237    .text:00000000000008c0 state_post_video
             tvout.s:254    .text:00000000000008e6 tv_isr_exit
             tvout.s:180    .text:0000000000000836 sync_end
             tvout.s:246    .text:00000000000008d2 frame_end
             tvout.s:264    .text:00000000000008e8 $d
             tvout.s:264    .text:00000000000008ec _BACKCOLOR
             tvout.s:264    .text:00000000000008f8 BACKCOLOR
             tvout.s:271    .text:0000000000000904 $d
             tvout.s:271    .text:0000000000000908 _PENCOLOR
             tvout.s:271    .text:0000000000000912 $t
             tvout.s:271    .text:0000000000000914 PENCOLOR
             tvout.s:278    .text:0000000000000920 $d
             tvout.s:278    .text:0000000000000924 _CURSOR_COL
             tvout.s:278    .text:000000000000092c CURSOR_COL
             tvout.s:285    .text:0000000000000938 $d
             tvout.s:285    .text:000000000000093c _CURSOR_ROW
             tvout.s:285    .text:0000000000000940 $t
             tvout.s:285    .text:0000000000000940 CURSOR_ROW
             tvout.s:292    .text:000000000000094c $d
             tvout.s:292    .text:0000000000000950 _ROWY
             tvout.s:292    .text:0000000000000956 $t
             tvout.s:292    .text:0000000000000958 ROWY
             tvout.s:299    .text:0000000000000964 $d
             tvout.s:299    .text:0000000000000968 _COLX
             tvout.s:299    .text:000000000000096e $t
             tvout.s:299    .text:0000000000000970 COLX
             tvout.s:306    .text:000000000000097c $d
             tvout.s:306    .text:0000000000000980 _FONT
             tvout.s:306    .text:0000000000000988 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000994 $d
             tvout.s:313    .text:0000000000000998 _VIDBUFF
             tvout.s:313    .text:00000000000009a0 $t
             tvout.s:313    .text:00000000000009a0 VIDBUFF
             tvout.s:325    .text:00000000000009aa $d
             tvout.s:325    .text:00000000000009ae _PLOT
             tvout.s:325    .text:00000000000009b4 PLOT
             tvout.s:373    .text:0000000000000a38 plot_op
             tvout.s:341    .text:00000000000009e0 op_back
             tvout.s:350    .text:00000000000009fa op_pen
             tvout.s:359    .text:0000000000000a14 op_invert
             tvout.s:363    .text:0000000000000a1c op_xor
             tvout.s:373    .text:0000000000000a38 $d
             tvout.s:378    .text:0000000000000a40 _VSYNC
             tvout.s:378    .text:0000000000000a46 $t
             tvout.s:378    .text:0000000000000a48 VSYNC
             tvout.s:386    .text:0000000000000a52 $d
             tvout.s:386    .text:0000000000000a56 _CLS
             tvout.s:386    .text:0000000000000a5a $t
             tvout.s:386    .text:0000000000000a5c CLS
             tvout.s:410    .text:0000000000000a9e $d
             tvout.s:410    .text:0000000000000aa2 _CLRLINE
ARM GAS  forth.s 			page 183


             tvout.s:410    .text:0000000000000aaa $t
             tvout.s:410    .text:0000000000000aac CLRLINE
             tvout.s:412    .text:0000000000000ab0 $d
             forth.s:547    .text:000000000000280c STAR
             forth.s:1652   .text:000000000000316c FILL
             tvout.s:427    .text:0000000000000ae4 _SCROLLUP
             tvout.s:427    .text:0000000000000af0 SCROLLUP
             tvout.s:429    .text:0000000000000af4 $d
             forth.s:538    .text:00000000000027fc SUBB
             forth.s:1620   .text:0000000000003124 MOVE
             tvout.s:448    .text:0000000000000b3c _SCROLLDOWN
             tvout.s:448    .text:0000000000000b48 SCROLLDOWN
             tvout.s:450    .text:0000000000000b4c $d
             tvout.s:467    .text:0000000000000b8c _TV_CRLF
             tvout.s:467    .text:0000000000000b94 $t
             tvout.s:467    .text:0000000000000b94 TV_CRLF
             tvout.s:482    .text:0000000000000bb6 $d
             tvout.s:482    .text:0000000000000bba _RIGHT
             tvout.s:482    .text:0000000000000bc0 $t
             tvout.s:482    .text:0000000000000bc0 RIGHT
             tvout.s:495    .text:0000000000000bd4 $d
             tvout.s:495    .text:0000000000000bd8 _LEFT
             tvout.s:495    .text:0000000000000be0 LEFT
             tvout.s:511    .text:0000000000000c0c FONT_PIXEL
             tvout.s:518    .text:0000000000000c1c INCR_X
             tvout.s:525    .text:0000000000000c28 NEXT_PIXEL
             tvout.s:534    .text:0000000000000c30 CHAR_ROW
             tvout.s:536    .text:0000000000000c34 $d
             forth.s:718    .text:0000000000002960 DDUP
             forth.s:384    .text:00000000000026bc RAT
             forth.s:290    .text:0000000000002618 DONXT
             forth.s:709    .text:000000000000294c TDROP
             tvout.s:551    .text:0000000000000c70 CHAR_FONT
             tvout.s:552    .text:0000000000000c70 $t
             tvout.s:563    .text:0000000000000c84 $d
             tvout.s:563    .text:0000000000000c88 _TV_EMIT
             tvout.s:563    .text:0000000000000c90 $t
             tvout.s:565    .text:0000000000000c94 $d
             forth.s:871    .text:0000000000002aac ULESS
             tvout.s:593    .text:0000000000000d18 CTRL_KEY
             forth.s:349    .text:000000000000267c AT
             forth.s:678    .text:0000000000002910 ROT
             forth.s:367    .text:000000000000269c CAT
             tvout.s:660    .text:0000000000000e00 SHOW_CURSOR
             tvout.s:691    .text:0000000000000e88 HIDE_CURSOR
             forth.s:846    .text:0000000000002a74 EQUAL
             tvout.s:650    .text:0000000000000de0 BACK_SPACE
             forth.s:429    .text:0000000000002718 DROP
             tvout.s:618    .text:0000000000000d88 CAR_RET
             tvout.s:629    .text:0000000000000da0 LN_FEED
             tvout.s:619    .text:0000000000000d88 $t
             tvout.s:620    .text:0000000000000d8c $d
             tvout.s:630    .text:0000000000000da0 $t
             tvout.s:631    .text:0000000000000da4 $d
             forth.s:490    .text:0000000000002794 XORR
             tvout.s:651    .text:0000000000000de0 $t
             tvout.s:652    .text:0000000000000de4 $d
ARM GAS  forth.s 			page 184


             tvout.s:660    .text:0000000000000df4 _SHOW_CURSOR
             tvout.s:660    .text:0000000000000e00 $t
             tvout.s:663    .text:0000000000000e04 $d
             forth.s:660    .text:00000000000028ec TWOSL
             forth.s:357    .text:0000000000002688 CSTOR
             forth.s:700    .text:0000000000002938 DDROP
             tvout.s:691    .text:0000000000000e7c _HIDE_CURSOR
             tvout.s:691    .text:0000000000000e88 $t
             tvout.s:694    .text:0000000000000e8c $d
             forth.s:520    .text:00000000000027dc LSHIFT
             forth.s:481    .text:0000000000002780 ORR
             tvout.s:704    .text:0000000000000eb4 _TV_AT
             tvout.s:704    .text:0000000000000eba $t
             tvout.s:704    .text:0000000000000ebc TV_AT
             tvout.s:719    .text:0000000000000ee0 $d
             tvout.s:719    .text:0000000000000ee4 _INPUT
             tvout.s:719    .text:0000000000000eea $t
             tvout.s:719    .text:0000000000000eec INPUT
             tvout.s:721    .text:0000000000000ef0 $d
             forth.s:1564   .text:000000000000309c PAD
             forth.s:2722   .text:0000000000003da8 ACCEP
             forth.s:455    .text:000000000000274c OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000000f1c $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
ARM GAS  forth.s 			page 185


       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
ARM GAS  forth.s 			page 186


       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f28 sc_ascii
         mcSaite.inc:100    .text:0000000000000fdc shifted
         mcSaite.inc:151    .text:000000000000103c altchar
         mcSaite.inc:167    .text:000000000000104c extended
         mcSaite.inc:191    .text:0000000000001074 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
ARM GAS  forth.s 			page 187


           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:00000000000010aa $t
           ps2_kbd.s:179    .text:00000000000011d6 send_bit
           ps2_kbd.s:107    .text:000000000000110c start_bit
           ps2_kbd.s:118    .text:0000000000001130 parity_bit
           ps2_kbd.s:125    .text:0000000000001144 stop_bit
           ps2_kbd.s:152    .text:000000000000119a store_code
           ps2_kbd.s:253    .text:000000000000126a do_async_key
           ps2_kbd.s:204    .text:000000000000121a send_parity
           ps2_kbd.s:211    .text:000000000000122c send_stop
           ps2_kbd.s:218    .text:0000000000001236 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000001256 is_async_key
           ps2_kbd.s:286    .text:00000000000012ba async_keys
           ps2_kbd.s:378    .text:00000000000013a0 table_scan
           ps2_kbd.s:260    .text:000000000000127c set_async_key
           ps2_kbd.s:295    .text:00000000000012c8 async_jump
           ps2_kbd.s:265    .text:000000000000128a shift_key
           ps2_kbd.s:273    .text:000000000000129a set_reset
           ps2_kbd.s:268    .text:0000000000001290 ctrl_key
           ps2_kbd.s:271    .text:0000000000001296 alt_key
           ps2_kbd.s:287    .text:00000000000012ba $d
           ps2_kbd.s:340    .text:0000000000001348 $d
           ps2_kbd.s:340    .text:000000000000134c _KEY_ASYNC
           ps2_kbd.s:340    .text:0000000000001356 $t
           ps2_kbd.s:340    .text:0000000000001358 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001368 keycode
           ps2_kbd.s:365    .text:0000000000001390 wait_code
           ps2_kbd.s:396    .text:00000000000013ba $d
           ps2_kbd.s:396    .text:00000000000013be _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001414 inkey_exit
           ps2_kbd.s:418    .text:0000000000001418 pause_key
           ps2_kbd.s:427    .text:000000000000142e do_modifiers
           ps2_kbd.s:436    .text:0000000000001446 shift_down
           ps2_kbd.s:440    .text:000000000000144c altchar_down
           ps2_kbd.s:444    .text:0000000000001452 ctrl_down
           ps2_kbd.s:452    .text:000000000000146e do_capslock
           ps2_kbd.s:478    .text:0000000000001492 kbd_send
           ps2_kbd.s:553    .text:0000000000001586 kbd_clear_queue
           ps2_kbd.s:567    .text:00000000000015a4 $d
           ps2_kbd.s:567    .text:00000000000015a8 _KBD_RST
           ps2_kbd.s:567    .text:00000000000015b0 $t
           ps2_kbd.s:567    .text:00000000000015b0 KBD_RST
           ps2_kbd.s:591    .text:00000000000015fa $d
           ps2_kbd.s:591    .text:00000000000015fe _KBD_LED
           ps2_kbd.s:591    .text:0000000000001606 $t
           ps2_kbd.s:591    .text:0000000000001608 KBD_LED
           ps2_kbd.s:616    .text:000000000000165c $d
           ps2_kbd.s:616    .text:0000000000001660 _CAPS_LED
           ps2_kbd.s:616    .text:000000000000166c CAPS_LED
           ps2_kbd.s:633    .text:0000000000001696 $d
           ps2_kbd.s:633    .text:000000000000169a _WKEY
ARM GAS  forth.s 			page 188


           ps2_kbd.s:633    .text:00000000000016a4 WKEY
           ps2_kbd.s:635    .text:00000000000016a8 $d
           ps2_kbd.s:640    .text:00000000000016c0 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:00000000000016e0 $t
         spi-flash.s:85     .text:0000000000001782 $d
         spi-flash.s:85     .text:0000000000001786 _CHIP_SEL
         spi-flash.s:85     .text:0000000000001790 CHIP_SEL
         spi-flash.s:97     .text:00000000000017ae $d
         spi-flash.s:97     .text:00000000000017b2 _CHIP_DSEL
         spi-flash.s:97     .text:00000000000017bc $t
         spi-flash.s:97     .text:00000000000017bc CHIP_DSEL
         spi-flash.s:113    .text:00000000000017ea $d
         spi-flash.s:113    .text:00000000000017ee _RD_BYTE
         spi-flash.s:113    .text:00000000000017f6 $t
         spi-flash.s:113    .text:00000000000017f8 RD_BYTE
         spi-flash.s:133    .text:0000000000001820 $d
         spi-flash.s:133    .text:0000000000001824 _WR_BYTE
         spi-flash.s:133    .text:000000000000182c $t
         spi-flash.s:133    .text:000000000000182c WR_BYTE
         spi-flash.s:151    .text:0000000000001850 $d
         spi-flash.s:151    .text:0000000000001854 _WR_DIS
         spi-flash.s:151    .text:000000000000185c WR_DIS
         spi-flash.s:153    .text:0000000000001860 $d
         spi-flash.s:163    .text:000000000000187c _WR_ENBL
         spi-flash.s:163    .text:0000000000001884 $t
         spi-flash.s:163    .text:0000000000001884 WR_ENBL
         spi-flash.s:165    .text:0000000000001888 $d
         spi-flash.s:175    .text:00000000000018a4 _RD_SR
         spi-flash.s:175    .text:00000000000018aa $t
         spi-flash.s:175    .text:00000000000018ac RD_SR
         spi-flash.s:177    .text:00000000000018b0 $d
         spi-flash.s:185    .text:00000000000018d4 sr_cmd
         spi-flash.s:191    .text:00000000000018db _SEND_ADR
         spi-flash.s:191    .text:00000000000018e4 $t
         spi-flash.s:191    .text:00000000000018e4 SEND_ADR
         spi-flash.s:193    .text:00000000000018e8 $d
             forth.s:511    .text:00000000000027c4 RSHIFT
         spi-flash.s:208    .text:000000000000191c _WAIT_DONE
         spi-flash.s:208    .text:0000000000001926 $t
         spi-flash.s:208    .text:0000000000001928 WAIT_DONE
         spi-flash.s:210    .text:000000000000192c $d
         spi-flash.s:223    .text:000000000000195c _ERASE_BLK
         spi-flash.s:223    .text:0000000000001966 $t
         spi-flash.s:223    .text:0000000000001968 ERASE_BLK
         spi-flash.s:225    .text:000000000000196c $d
         spi-flash.s:238    .text:0000000000001994 _ERASE_CHIP
         spi-flash.s:238    .text:00000000000019a0 ERASE_CHIP
         spi-flash.s:240    .text:00000000000019a4 $d
         spi-flash.s:256    .text:00000000000019d4 _RD_BLK
         spi-flash.s:256    .text:00000000000019dc RD_BLK
         spi-flash.s:258    .text:00000000000019e0 $d
         spi-flash.s:278    .text:0000000000001a28 _WR_BLK
         spi-flash.s:278    .text:0000000000001a30 WR_BLK
ARM GAS  forth.s 			page 189


         spi-flash.s:280    .text:0000000000001a34 $d
             forth.s:2242   .text:00000000000037e4 HDOT
         spi-flash.s:316    .text:0000000000001a8c _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001a98 $t
         spi-flash.s:316    .text:0000000000001a98 SEARCH_FILE
         spi-flash.s:319    .text:0000000000001a9c $d
         spi-flash.s:325    .text:0000000000001aa4 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001ab0 ERASE_FILE
         spi-flash.s:328    .text:0000000000001ab4 $d
         spi-flash.s:334    .text:0000000000001abc _DIR
         spi-flash.s:334    .text:0000000000001ac0 $t
         spi-flash.s:334    .text:0000000000001ac0 DIR
         spi-flash.s:337    .text:0000000000001ac4 $d
         spi-flash.s:343    .text:0000000000001acc _SAVE
         spi-flash.s:343    .text:0000000000001ad4 SAVE
         spi-flash.s:346    .text:0000000000001ad8 $d
         spi-flash.s:352    .text:0000000000001ae0 _LOAD
         spi-flash.s:352    .text:0000000000001ae8 LOAD
         spi-flash.s:355    .text:0000000000001aec $d
             float.s:36     *ABS*:0000000000ffffff MANTISSA_MASK
             float.s:37     *ABS*:0000000000800000 MANTISSA_SIGN
             float.s:38     *ABS*:00000000007fffff MANTISSA_MAX
             float.s:47     .text:0000000000001af4 _FPSW
             float.s:47     .text:0000000000001afc FPSW
             float.s:56     .text:0000000000001b08 $d
             float.s:56     .text:0000000000001b0c _FBASE
             float.s:56     .text:0000000000001b12 $t
             float.s:56     .text:0000000000001b14 FBASE
             float.s:65     .text:0000000000001b20 $d
             float.s:65     .text:0000000000001b24 _FRESET
             float.s:65     .text:0000000000001b2c FRESET
             float.s:74     .text:0000000000001b38 $d
             float.s:74     .text:0000000000001b3c _FINIT
             float.s:74     .text:0000000000001b42 $t
             float.s:74     .text:0000000000001b44 FINIT
             float.s:76     .text:0000000000001b48 $d
             float.s:88     .text:0000000000001b64 _FER
             float.s:88     .text:0000000000001b68 $t
             float.s:88     .text:0000000000001b68 FER
             float.s:97     .text:0000000000001b74 $d
             float.s:97     .text:0000000000001b78 _FZE
             float.s:97     .text:0000000000001b7c $t
             float.s:97     .text:0000000000001b7c FZE
             float.s:107    .text:0000000000001b8c $d
             float.s:107    .text:0000000000001b90 _FNE
             float.s:107    .text:0000000000001b94 $t
             float.s:107    .text:0000000000001b94 FNE
             float.s:117    .text:0000000000001ba4 $d
             float.s:117    .text:0000000000001ba8 _FOV
             float.s:117    .text:0000000000001bac $t
             float.s:117    .text:0000000000001bac FOV
             float.s:127    .text:0000000000001bbc $d
             float.s:127    .text:0000000000001bc0 _SFZ
             float.s:127    .text:0000000000001bc4 $t
             float.s:127    .text:0000000000001bc4 SFZ
             float.s:140    .text:0000000000001bde $d
             float.s:140    .text:0000000000001be2 _SFN
ARM GAS  forth.s 			page 190


             float.s:140    .text:0000000000001be6 $t
             float.s:140    .text:0000000000001be8 SFN
             float.s:154    .text:0000000000001c04 $d
             float.s:154    .text:0000000000001c08 _SFV
             float.s:154    .text:0000000000001c0c $t
             float.s:154    .text:0000000000001c0c SFV
             float.s:165    .text:0000000000001c1c $d
             float.s:165    .text:0000000000001c20 _AT_EXPONENT
             float.s:165    .text:0000000000001c2a $t
             float.s:165    .text:0000000000001c2c AT_EXPONENT
             float.s:167    .text:0000000000001c30 $d
             float.s:188    .text:0000000000001c84 _STOR_EXPONENT
             float.s:188    .text:0000000000001c8e $t
             float.s:188    .text:0000000000001c90 STOR_EXPONENT
             float.s:191    .text:0000000000001c94 $d
             forth.s:802    .text:0000000000002a1c ABSS
             forth.s:907    .text:0000000000002af4 GREAT
             float.s:219    .text:0000000000001d04 _EDOT
             float.s:219    .text:0000000000001d08 EDOT
             float.s:221    .text:0000000000001d0c $d
             forth.s:835    .text:0000000000002a60 ZEQUAL
             forth.s:2137   .text:00000000000036c0 DOTQP
             float.s:229    .text:0000000000001d38 $d
             forth.s:1282   .text:0000000000002e10 STOD
             forth.s:1730   .text:000000000000324c BDIGS
             forth.s:1760   .text:0000000000003298 DIG
             forth.s:689    .text:0000000000002924 NROT
             forth.s:1742   .text:000000000000326c HOLD
             forth.s:1774   .text:00000000000032b8 DIGS
             forth.s:1806   .text:0000000000003314 EDIGS
             forth.s:464    .text:000000000000275c ZLESS
             float.s:288    .text:0000000000001e28 _FDOT
             float.s:288    .text:0000000000001e2c FDOT
             float.s:290    .text:0000000000001e30 $d
             float.s:317    .text:0000000000001ea8 POS_E
             float.s:344    .text:0000000000001f14 _FSTAR
             float.s:344    .text:0000000000001f18 FSTAR
             float.s:346    .text:0000000000001f1c $d
             forth.s:568    .text:0000000000002834 MSTAR
             forth.s:741    .text:0000000000002994 DABS
             forth.s:757    .text:00000000000029b8 UDGREAT
             forth.s:1318   .text:0000000000002e58 DSLMOD
             forth.s:985    .text:0000000000002b94 DNEGA
             float.s:385    .text:0000000000001fbc _FSLH
             float.s:385    .text:0000000000001fc0 FSLH
             float.s:387    .text:0000000000001fc4 $d
             forth.s:1449   .text:0000000000002f70 SLASH
             float.s:406    .text:0000000000001ff8 _FALIGN
             float.s:406    .text:0000000000002000 $t
             float.s:406    .text:0000000000002000 FALIGN
             float.s:408    .text:0000000000002004 $d
             forth.s:883    .text:0000000000002ac4 LESS
             forth.s:858    .text:0000000000002a8c DIFF
             float.s:457    .text:00000000000020c4 _FPLUS
             float.s:457    .text:00000000000020c8 FPLUS
             float.s:459    .text:00000000000020cc $d
             float.s:470    .text:00000000000020e8 _FMINUS
ARM GAS  forth.s 			page 191


             float.s:470    .text:00000000000020ec FMINUS
             float.s:472    .text:00000000000020f0 $d
             float.s:484    .text:000000000000210c _FNEG
             float.s:484    .text:0000000000002114 $t
             float.s:484    .text:0000000000002114 FNEG
             float.s:501    .text:0000000000002140 $d
             float.s:501    .text:0000000000002144 _FABS
             float.s:501    .text:000000000000214c FABS
             float.s:520    .text:0000000000002182 $d
             float.s:520    .text:0000000000002186 _FMIN
             float.s:520    .text:000000000000218c FMIN
             float.s:522    .text:0000000000002190 $d
             float.s:534    .text:00000000000021b8 _FMAX
             float.s:534    .text:00000000000021c0 FMAX
             float.s:536    .text:00000000000021c4 $d
             float.s:549    .text:00000000000021ec _FGREAT
             float.s:549    .text:00000000000021f0 FGREAT
             float.s:551    .text:00000000000021f4 $d
             float.s:560    .text:0000000000002208 _FLESS
             float.s:560    .text:000000000000220c FLESS
             float.s:562    .text:0000000000002210 $d
             float.s:571    .text:0000000000002224 _FTOS
             float.s:571    .text:0000000000002228 $t
             float.s:571    .text:0000000000002228 FTOS
             float.s:601    .text:000000000000226c $d
             float.s:601    .text:0000000000002270 _STOF
             float.s:601    .text:0000000000002274 $t
             float.s:601    .text:0000000000002274 STOF
             float.s:627    .text:00000000000022c0 EXPONENT
             float.s:629    .text:00000000000022c4 $d
             forth.s:1940   .text:000000000000348c CHARQ
             forth.s:1911   .text:000000000000342c PARSE_DIGITS
             forth.s:794    .text:0000000000002a0c NEGAT
             float.s:656    .text:0000000000002338 _FLOATQ
             float.s:656    .text:0000000000002340 FLOATQ
             float.s:658    .text:0000000000002344 $d
             float.s:725    .text:0000000000002448 _NUMBER
             float.s:725    .text:0000000000002450 NUMBER
             float.s:727    .text:0000000000002454 $d
             forth.s:1962   .text:00000000000034b0 INTQ
             forth.s:80     .text:0000000000002470 $t
             forth.s:103    .text:0000000000002488 COMPI_NEST
             forth.s:116    .text:00000000000024a6 TSTDIN
             forth.s:123    .text:00000000000024b0 TSTDOUT
             forth.s:132    .text:00000000000024ba $d
             forth.s:132    .text:00000000000024be _QKEY
             forth.s:132    .text:00000000000024c4 QKEY
             forth.s:134    .text:00000000000024c8 $d
             forth.s:1587   .text:00000000000030d4 ATEXE
             forth.s:142    .text:00000000000024d8 _KEY
             forth.s:142    .text:00000000000024dc $t
             forth.s:142    .text:00000000000024dc KEY
             forth.s:144    .text:00000000000024e0 KEY1
             forth.s:145    .text:00000000000024e0 $d
             forth.s:154    .text:00000000000024f8 _EMIT
             forth.s:156    .text:0000000000002504 $d
             forth.s:190    .text:0000000000002514 _RAND
ARM GAS  forth.s 			page 192


             forth.s:190    .text:000000000000251c RAND
             forth.s:192    .text:0000000000002520 $d
             forth.s:1026   .text:0000000000002bc4 SEED
             forth.s:1438   .text:0000000000002f58 MODD
             forth.s:221    .text:0000000000002590 _PAUSE
             forth.s:221    .text:0000000000002596 $t
             forth.s:221    .text:0000000000002598 PAUSE
             forth.s:223    .text:000000000000259c $d
             forth.s:1044   .text:0000000000002bec TIMER
             forth.s:225    .text:00000000000025a4 PAUSE_LOOP
             forth.s:230    .text:00000000000025bc PAUSE_EXIT
             forth.s:237    .text:00000000000025c4 _ULED
             forth.s:237    .text:00000000000025cc ULED
             forth.s:246    .text:00000000000025e8 ULED_OFF
             forth.s:260    .text:00000000000025ec $d
             forth.s:260    .text:00000000000025f0 _NOP
             forth.s:260    .text:00000000000025f4 $t
             forth.s:260    .text:00000000000025f4 NOP
             forth.s:277    .text:0000000000002600 $d
             forth.s:277    .text:0000000000002604 _EXECU
             forth.s:277    .text:000000000000260c $t
             forth.s:277    .text:000000000000260c EXECU
             forth.s:297    .text:0000000000002628 NEXT1
             forth.s:315    .text:0000000000002644 QBRAN1
             forth.s:332    .text:0000000000002650 $d
             forth.s:332    .text:0000000000002654 _EXIT
             forth.s:332    .text:000000000000265c EXIT
             forth.s:333    .text:000000000000265c $d
             forth.s:339    .text:0000000000002664 _STORE
             forth.s:339    .text:0000000000002666 $t
             forth.s:349    .text:0000000000002674 $d
             forth.s:349    .text:0000000000002678 _AT
             forth.s:349    .text:000000000000267a $t
             forth.s:357    .text:0000000000002680 $d
             forth.s:357    .text:0000000000002684 _CSTOR
             forth.s:367    .text:0000000000002694 $d
             forth.s:367    .text:0000000000002698 _CAT
             forth.s:375    .text:00000000000026a0 $d
             forth.s:375    .text:00000000000026a4 _RFROM
             forth.s:384    .text:00000000000026b2 $d
             forth.s:384    .text:00000000000026b6 _RAT
             forth.s:393    .text:00000000000026c6 $d
             forth.s:393    .text:00000000000026ca _TOR
             forth.s:402    .text:00000000000026da $d
             forth.s:402    .text:00000000000026de _RPSTOR
             forth.s:402    .text:00000000000026e2 $t
             forth.s:402    .text:00000000000026e4 RPSTOR
             forth.s:411    .text:00000000000026ec $d
             forth.s:411    .text:00000000000026f0 _SPSTOR
             forth.s:411    .text:00000000000026f4 $t
             forth.s:411    .text:00000000000026f4 SPSTOR
             forth.s:420    .text:00000000000026fc $d
             forth.s:420    .text:0000000000002700 _SPAT
             forth.s:420    .text:0000000000002704 $t
             forth.s:420    .text:0000000000002704 SPAT
             forth.s:429    .text:000000000000270c $d
             forth.s:429    .text:0000000000002710 _DROP
ARM GAS  forth.s 			page 193


             forth.s:437    .text:000000000000271e $d
             forth.s:437    .text:0000000000002722 _DUPP
             forth.s:437    .text:0000000000002726 $t
             forth.s:445    .text:000000000000272e $d
             forth.s:445    .text:0000000000002732 _SWAP
             forth.s:455    .text:0000000000002740 $d
             forth.s:455    .text:0000000000002744 _OVER
             forth.s:464    .text:0000000000002754 $d
             forth.s:464    .text:0000000000002758 _ZLESS
             forth.s:472    .text:0000000000002762 $d
             forth.s:472    .text:0000000000002766 _ANDD
             forth.s:472    .text:000000000000276a $t
             forth.s:481    .text:0000000000002776 $d
             forth.s:481    .text:000000000000277a _ORR
             forth.s:490    .text:000000000000278a $d
             forth.s:490    .text:000000000000278e _XORR
             forth.s:490    .text:0000000000002792 $t
             forth.s:499    .text:000000000000279e $d
             forth.s:499    .text:00000000000027a2 _UPLUS
             forth.s:499    .text:00000000000027a6 $t
             forth.s:499    .text:00000000000027a8 UPLUS
             forth.s:511    .text:00000000000027b8 $d
             forth.s:511    .text:00000000000027bc _RSHIFT
             forth.s:520    .text:00000000000027ce $d
             forth.s:520    .text:00000000000027d2 _LSHIFT
             forth.s:529    .text:00000000000027e6 $d
             forth.s:529    .text:00000000000027ea _PLUS
             forth.s:529    .text:00000000000027ec $t
             forth.s:538    .text:00000000000027f4 $d
             forth.s:538    .text:00000000000027f8 _SUBB
             forth.s:538    .text:00000000000027fa $t
             forth.s:547    .text:0000000000002806 $d
             forth.s:547    .text:000000000000280a _STAR
             forth.s:547    .text:000000000000280c $t
             forth.s:556    .text:0000000000002816 $d
             forth.s:556    .text:000000000000281a _UMSTA
             forth.s:556    .text:000000000000281e $t
             forth.s:556    .text:0000000000002820 UMSTA
             forth.s:568    .text:000000000000282c $d
             forth.s:568    .text:0000000000002830 _MSTAR
             forth.s:579    .text:0000000000002840 $d
             forth.s:579    .text:0000000000002844 _ONEP
             forth.s:587    .text:000000000000284e $d
             forth.s:587    .text:0000000000002852 _ONEM
             forth.s:595    .text:000000000000285e $d
             forth.s:595    .text:0000000000002862 _TWOP
             forth.s:595    .text:0000000000002868 TWOP
             forth.s:603    .text:000000000000286e $d
             forth.s:603    .text:0000000000002872 _TWOM
             forth.s:603    .text:0000000000002878 TWOM
             forth.s:611    .text:000000000000287e $d
             forth.s:611    .text:0000000000002882 _CELLP
             forth.s:611    .text:0000000000002888 $t
             forth.s:611    .text:0000000000002888 CELLP
             forth.s:619    .text:000000000000288e $d
             forth.s:619    .text:0000000000002892 _CELLM
             forth.s:619    .text:0000000000002898 $t
ARM GAS  forth.s 			page 194


             forth.s:619    .text:0000000000002898 CELLM
             forth.s:627    .text:000000000000289e $d
             forth.s:627    .text:00000000000028a2 _BLANK
             forth.s:627    .text:00000000000028a8 BLANK
             forth.s:636    .text:00000000000028b2 $d
             forth.s:636    .text:00000000000028b6 _CELLS
             forth.s:636    .text:00000000000028bc $t
             forth.s:636    .text:00000000000028bc CELLS
             forth.s:644    .text:00000000000028c2 $d
             forth.s:644    .text:00000000000028c6 _CELLSL
             forth.s:644    .text:00000000000028cc $t
             forth.s:644    .text:00000000000028cc CELLSL
             forth.s:652    .text:00000000000028d2 $d
             forth.s:652    .text:00000000000028d6 _TWOST
             forth.s:652    .text:00000000000028dc TWOST
             forth.s:660    .text:00000000000028e2 $d
             forth.s:660    .text:00000000000028e6 _TWOSL
             forth.s:668    .text:00000000000028f2 $d
             forth.s:668    .text:00000000000028f6 _QDUP
             forth.s:678    .text:0000000000002906 $d
             forth.s:678    .text:000000000000290a _ROT
             forth.s:678    .text:000000000000290e $t
             forth.s:689    .text:000000000000291a $d
             forth.s:689    .text:000000000000291e _NROT
             forth.s:700    .text:000000000000292e $d
             forth.s:700    .text:0000000000002932 _DDROP
             forth.s:700    .text:0000000000002938 $t
             forth.s:709    .text:0000000000002942 $d
             forth.s:709    .text:0000000000002946 _TDROP
             forth.s:709    .text:000000000000294c $t
             forth.s:718    .text:0000000000002956 $d
             forth.s:718    .text:000000000000295a _DDUP
             forth.s:728    .text:000000000000296c $d
             forth.s:728    .text:0000000000002970 _DPLUS
             forth.s:728    .text:0000000000002974 DPLUS
             forth.s:741    .text:0000000000002988 $d
             forth.s:741    .text:000000000000298c _DABS
             forth.s:757    .text:00000000000029b0 $d
             forth.s:757    .text:00000000000029b4 _UDGREAT
             forth.s:757    .text:00000000000029b8 $t
             forth.s:774    .text:00000000000029d4 $d
             forth.s:774    .text:00000000000029d8 _DZEQUAL
             forth.s:774    .text:00000000000029dc $t
             forth.s:774    .text:00000000000029dc DZEQUAL
             forth.s:786    .text:00000000000029ee $d
             forth.s:786    .text:00000000000029f2 _INVER
             forth.s:786    .text:00000000000029f6 $t
             forth.s:786    .text:00000000000029f8 INVER
             forth.s:794    .text:00000000000029fe $d
             forth.s:794    .text:0000000000002a02 _NEGAT
             forth.s:802    .text:0000000000002a12 $d
             forth.s:802    .text:0000000000002a16 _ABSS
             forth.s:802    .text:0000000000002a1a $t
             forth.s:812    .text:0000000000002a26 $d
             forth.s:812    .text:0000000000002a2a _CLZ
             forth.s:812    .text:0000000000002a2e $t
             forth.s:812    .text:0000000000002a30 CLZ
ARM GAS  forth.s 			page 195


             forth.s:820    .text:0000000000002a36 $d
             forth.s:820    .text:0000000000002a3a _CTZ
             forth.s:820    .text:0000000000002a3e $t
             forth.s:820    .text:0000000000002a40 CTZ
             forth.s:835    .text:0000000000002a58 $d
             forth.s:835    .text:0000000000002a5c _ZEQUAL
             forth.s:846    .text:0000000000002a6e $d
             forth.s:846    .text:0000000000002a72 _EQUAL
             forth.s:846    .text:0000000000002a74 $t
             forth.s:858    .text:0000000000002a84 $d
             forth.s:858    .text:0000000000002a88 _DIFF
             forth.s:871    .text:0000000000002aa4 $d
             forth.s:871    .text:0000000000002aa8 _ULESS
             forth.s:883    .text:0000000000002abc $d
             forth.s:883    .text:0000000000002ac0 _LESS
             forth.s:883    .text:0000000000002ac2 $t
             forth.s:895    .text:0000000000002ad4 $d
             forth.s:895    .text:0000000000002ad8 _UGREAT
             forth.s:895    .text:0000000000002adc UGREAT
             forth.s:907    .text:0000000000002aec $d
             forth.s:907    .text:0000000000002af0 _GREAT
             forth.s:907    .text:0000000000002af2 $t
             forth.s:919    .text:0000000000002b04 $d
             forth.s:919    .text:0000000000002b08 _MAX
             forth.s:919    .text:0000000000002b0c $t
             forth.s:919    .text:0000000000002b0c MAX
             forth.s:930    .text:0000000000002b18 $d
             forth.s:930    .text:0000000000002b1c _MIN
             forth.s:930    .text:0000000000002b20 $t
             forth.s:930    .text:0000000000002b20 MIN
             forth.s:941    .text:0000000000002b2c $d
             forth.s:941    .text:0000000000002b30 _PSTOR
             forth.s:941    .text:0000000000002b34 PSTOR
             forth.s:953    .text:0000000000002b44 $d
             forth.s:953    .text:0000000000002b48 _DSTOR
             forth.s:953    .text:0000000000002b4c DSTOR
             forth.s:965    .text:0000000000002b60 $d
             forth.s:965    .text:0000000000002b64 _DAT
             forth.s:965    .text:0000000000002b68 DAT
             forth.s:975    .text:0000000000002b72 $d
             forth.s:975    .text:0000000000002b76 _COUNT
             forth.s:975    .text:0000000000002b7c $t
             forth.s:985    .text:0000000000002b88 $d
             forth.s:985    .text:0000000000002b8c _DNEGA
             forth.s:985    .text:0000000000002b94 $t
             forth.s:1002   .text:0000000000002ba4 DOVAR
             forth.s:1013   .text:0000000000002bb0 DOCON
             forth.s:1026   .text:0000000000002bba $d
             forth.s:1026   .text:0000000000002bbe _SEED
             forth.s:1035   .text:0000000000002bce $d
             forth.s:1035   .text:0000000000002bd2 _MSEC
             forth.s:1035   .text:0000000000002bd8 MSEC
             forth.s:1044   .text:0000000000002be2 $d
             forth.s:1044   .text:0000000000002be6 _TIMER
             forth.s:1044   .text:0000000000002bec $t
             forth.s:1053   .text:0000000000002bf6 $d
             forth.s:1053   .text:0000000000002bfa _TBOOT
ARM GAS  forth.s 			page 196


             forth.s:1053   .text:0000000000002c00 $t
             forth.s:1053   .text:0000000000002c00 TBOOT
             forth.s:1062   .text:0000000000002c0a $d
             forth.s:1062   .text:0000000000002c0e _BASE
             forth.s:1072   .text:0000000000002c1e TEMP
             forth.s:1081   .text:0000000000002c28 $d
             forth.s:1081   .text:0000000000002c2c _SPAN
             forth.s:1081   .text:0000000000002c34 SPAN
             forth.s:1090   .text:0000000000002c3e $d
             forth.s:1090   .text:0000000000002c42 _INN
             forth.s:1090   .text:0000000000002c46 $t
             forth.s:1090   .text:0000000000002c48 INN
             forth.s:1100   .text:0000000000002c52 $d
             forth.s:1100   .text:0000000000002c56 _NTIB
             forth.s:1100   .text:0000000000002c5c NTIB
             forth.s:1109   .text:0000000000002c66 $d
             forth.s:1109   .text:0000000000002c6a _TEVAL
             forth.s:1109   .text:0000000000002c70 $t
             forth.s:1109   .text:0000000000002c70 TEVAL
             forth.s:1119   .text:0000000000002c7c $d
             forth.s:1119   .text:0000000000002c80 _HLD
             forth.s:1119   .text:0000000000002c84 $t
             forth.s:1119   .text:0000000000002c84 HLD
             forth.s:1129   .text:0000000000002c90 $d
             forth.s:1129   .text:0000000000002c94 _CNTXT
             forth.s:1129   .text:0000000000002c9c $t
             forth.s:1129   .text:0000000000002c9c CNTXT
             forth.s:1130   .text:0000000000002c9c CRRNT
             forth.s:1140   .text:0000000000002ca8 $d
             forth.s:1140   .text:0000000000002cac _CPP
             forth.s:1140   .text:0000000000002cb0 CPP
             forth.s:1150   .text:0000000000002cbc $d
             forth.s:1150   .text:0000000000002cc0 _FCP
             forth.s:1150   .text:0000000000002cc4 $t
             forth.s:1150   .text:0000000000002cc4 FCP
             forth.s:1160   .text:0000000000002cd0 $d
             forth.s:1160   .text:0000000000002cd4 _LAST
             forth.s:1160   .text:0000000000002cdc LAST
             forth.s:1174   .text:0000000000002ce8 $d
             forth.s:1174   .text:0000000000002cec _USER_BEGIN
             forth.s:1174   .text:0000000000002cf8 USER_BEGIN
             forth.s:1178   .text:0000000000002d04 USR_BGN_ADR
             forth.s:1179   .text:0000000000002d04 $d
             forth.s:1185   .text:0000000000002d0c _USER_END
             forth.s:1185   .text:0000000000002d18 USER_END
             forth.s:1189   .text:0000000000002d24 USER_END_ADR
             forth.s:1190   .text:0000000000002d24 $d
             forth.s:1202   .text:0000000000002d2c _WITHI
             forth.s:1202   .text:0000000000002d34 WITHI
             forth.s:1204   .text:0000000000002d38 $d
             forth.s:1219   .text:0000000000002d58 _UMMOD
             forth.s:1219   .text:0000000000002d60 UMMOD
             forth.s:1223   .text:0000000000002d6a UMMOD0
             forth.s:1230   .text:0000000000002d7a UMMOD1
             forth.s:1236   .text:0000000000002d84 UMMOD2
             forth.s:1249   .text:0000000000002d90 $d
             forth.s:1249   .text:0000000000002d94 _MSMOD
ARM GAS  forth.s 			page 197


             forth.s:1249   .text:0000000000002d9a $t
             forth.s:1249   .text:0000000000002d9c MSMOD
             forth.s:1251   .text:0000000000002da0 $d
             forth.s:1260   .text:0000000000002dc8 MMOD1
             forth.s:1267   .text:0000000000002de4 MMOD2
             forth.s:1275   .text:0000000000002e04 MMOD3
             forth.s:1282   .text:0000000000002e0c _STOD
             forth.s:1282   .text:0000000000002e10 $t
             forth.s:1291   .text:0000000000002e1c $d
             forth.s:1291   .text:0000000000002e20 _D2STAR
             forth.s:1291   .text:0000000000002e24 $t
             forth.s:1291   .text:0000000000002e24 D2STAR
             forth.s:1303   .text:0000000000002e36 $d
             forth.s:1303   .text:0000000000002e3a _D2SL
             forth.s:1303   .text:0000000000002e3e $t
             forth.s:1303   .text:0000000000002e40 D2SL
             forth.s:1318   .text:0000000000002e4e $d
             forth.s:1318   .text:0000000000002e52 _DSLMOD
             forth.s:1318   .text:0000000000002e58 $t
             forth.s:1354   .text:0000000000002ea4 $d
             forth.s:1354   .text:0000000000002ea8 _DSLASH
             forth.s:1354   .text:0000000000002eac DSLASH
             forth.s:1356   .text:0000000000002eb0 $d
             forth.s:1376   .text:0000000000002ef4 _DSTAR
             forth.s:1376   .text:0000000000002ef8 DSTAR
             forth.s:1425   .text:0000000000002f2e $d
             forth.s:1425   .text:0000000000002f32 _SLMOD
             forth.s:1427   .text:0000000000002f3c $d
             forth.s:1438   .text:0000000000002f54 _MODD
             forth.s:1438   .text:0000000000002f58 $t
             forth.s:1440   .text:0000000000002f5c $d
             forth.s:1449   .text:0000000000002f6c _SLASH
             forth.s:1449   .text:0000000000002f6e $t
             forth.s:1451   .text:0000000000002f74 $d
             forth.s:1462   .text:0000000000002f88 _SSMOD
             forth.s:1462   .text:0000000000002f8e $t
             forth.s:1462   .text:0000000000002f90 SSMOD
             forth.s:1464   .text:0000000000002f94 $d
             forth.s:1476   .text:0000000000002fac _STASL
             forth.s:1476   .text:0000000000002fb0 STASL
             forth.s:1478   .text:0000000000002fb4 $d
             forth.s:1492   .text:0000000000002fc8 _ALGND
             forth.s:1492   .text:0000000000002fd0 $t
             forth.s:1492   .text:0000000000002fd0 ALGND
             forth.s:1503   .text:0000000000002fe0 $d
             forth.s:1503   .text:0000000000002fe4 _TCHAR
             forth.s:1503   .text:0000000000002fea $t
             forth.s:1503   .text:0000000000002fec TCHAR
             forth.s:1505   .text:0000000000002ff0 $d
             forth.s:1515   .text:0000000000003028 TCHA1
             forth.s:1523   .text:0000000000003030 _DEPTH
             forth.s:1523   .text:0000000000003036 $t
             forth.s:1523   .text:0000000000003038 DEPTH
             forth.s:1535   .text:0000000000003050 $d
             forth.s:1535   .text:0000000000003054 _PICK
             forth.s:1535   .text:000000000000305c PICK
             forth.s:1537   .text:0000000000003060 $d
ARM GAS  forth.s 			page 198


             forth.s:1553   .text:000000000000307c _HERE
             forth.s:1553   .text:0000000000003084 HERE
             forth.s:1555   .text:0000000000003088 $d
             forth.s:1564   .text:0000000000003098 _PAD
             forth.s:1564   .text:000000000000309c $t
             forth.s:1566   .text:00000000000030a0 $d
             forth.s:1577   .text:00000000000030b8 _TIB
             forth.s:1577   .text:00000000000030bc $t
             forth.s:1577   .text:00000000000030bc TIB
             forth.s:1587   .text:00000000000030c6 $d
             forth.s:1587   .text:00000000000030ca _ATEXE
             forth.s:1600   .text:00000000000030e8 $d
             forth.s:1600   .text:00000000000030ec _CMOVE
             forth.s:1600   .text:00000000000030f2 $t
             forth.s:1600   .text:00000000000030f4 CMOVE
             forth.s:1607   .text:0000000000003106 CMOV1
             forth.s:1604   .text:00000000000030fe CMOV0
             forth.s:1612   .text:0000000000003110 CMOV2
             forth.s:1620   .text:0000000000003118 $d
             forth.s:1620   .text:000000000000311c _MOVE
             forth.s:1638   .text:000000000000314e MOVE1
             forth.s:1635   .text:000000000000314a MOVE3
             forth.s:1632   .text:0000000000003146 MOVE0
             forth.s:1643   .text:0000000000003158 MOVE2
             forth.s:1652   .text:0000000000003160 $d
             forth.s:1652   .text:0000000000003164 _FILL
             forth.s:1660   .text:000000000000317a FILL2
             forth.s:1656   .text:0000000000003172 FILL1
             forth.s:1670   .text:0000000000003182 $d
             forth.s:1670   .text:0000000000003186 _PACKS
             forth.s:1670   .text:000000000000318c $t
             forth.s:1670   .text:000000000000318c PACKS
             forth.s:1672   .text:0000000000003190 $d
             forth.s:1701   .text:00000000000031e8 _DIGIT
             forth.s:1701   .text:00000000000031ee $t
             forth.s:1701   .text:00000000000031f0 DIGIT
             forth.s:1703   .text:00000000000031f4 $d
             forth.s:1718   .text:0000000000003228 _EXTRC
             forth.s:1718   .text:0000000000003230 $t
             forth.s:1718   .text:0000000000003230 EXTRC
             forth.s:1720   .text:0000000000003234 $d
             forth.s:1730   .text:0000000000003248 _BDIGS
             forth.s:1732   .text:0000000000003250 $d
             forth.s:1742   .text:0000000000003264 _HOLD
             forth.s:1744   .text:0000000000003270 $d
             forth.s:1760   .text:0000000000003294 _DIG
             forth.s:1760   .text:0000000000003296 $t
             forth.s:1762   .text:000000000000329c $d
             forth.s:1774   .text:00000000000032b4 _DIGS
             forth.s:1776   .text:00000000000032bc DIGS1
             forth.s:1777   .text:00000000000032bc $d
             forth.s:1782   .text:00000000000032d8 DIGS2
             forth.s:1792   .text:00000000000032e4 _SIGN
             forth.s:1792   .text:00000000000032ec SIGN
             forth.s:1794   .text:00000000000032f0 $d
             forth.s:1798   .text:0000000000003308 SIGN1
             forth.s:1806   .text:0000000000003310 _EDIGS
ARM GAS  forth.s 			page 199


             forth.s:1808   .text:0000000000003318 $d
             forth.s:1823   .text:0000000000003334 STRR
             forth.s:1824   .text:0000000000003334 $t
             forth.s:1825   .text:0000000000003338 $d
             forth.s:1842   .text:0000000000003364 _HEX
             forth.s:1842   .text:0000000000003368 $t
             forth.s:1842   .text:0000000000003368 HEX
             forth.s:1844   .text:000000000000336c $d
             forth.s:1855   .text:0000000000003384 _BIN
             forth.s:1855   .text:0000000000003388 $t
             forth.s:1855   .text:0000000000003388 BIN
             forth.s:1857   .text:000000000000338c $d
             forth.s:1867   .text:00000000000033a4 _DECIM
             forth.s:1867   .text:00000000000033ac $t
             forth.s:1867   .text:00000000000033ac DECIM
             forth.s:1869   .text:00000000000033b0 $d
             forth.s:1884   .text:00000000000033c8 _DIGTQ
             forth.s:1884   .text:00000000000033d0 DIGTQ
             forth.s:1886   .text:00000000000033d4 $d
             forth.s:1899   .text:000000000000341c DGTQ1
             forth.s:1912   .text:000000000000342c $t
             forth.s:1913   .text:0000000000003430 $d
             forth.s:1941   .text:000000000000348c $t
             forth.s:1962   .text:00000000000034a6 $d
             forth.s:1962   .text:00000000000034aa _INTQ
             forth.s:1964   .text:00000000000034b4 $d
             forth.s:2033   .text:00000000000035c8 _SPACE
             forth.s:2033   .text:00000000000035ce $t
             forth.s:2035   .text:00000000000035d4 $d
             forth.s:2044   .text:00000000000035e4 _SPACS
             forth.s:2044   .text:00000000000035ec SPACS
             forth.s:2046   .text:00000000000035f0 $d
             forth.s:2052   .text:000000000000360c CHAR2
             forth.s:2050   .text:0000000000003608 CHAR1
             forth.s:2061   .text:000000000000361c _TYPEE
             forth.s:2063   .text:0000000000003628 $d
             forth.s:2069   .text:0000000000003640 TYPE2
             forth.s:2065   .text:0000000000003634 TYPE1
             forth.s:2079   .text:0000000000003654 _CR
             forth.s:2081   .text:000000000000365c $d
             forth.s:2093   .text:0000000000003678 DOSTR
             forth.s:2094   .text:0000000000003678 $t
             forth.s:2096   .text:000000000000367c $d
             forth.s:2114   .text:00000000000036a4 STRQP
             forth.s:2115   .text:00000000000036a4 $t
             forth.s:2116   .text:00000000000036a8 $d
             forth.s:2125   .text:00000000000036b0 DOTST
             forth.s:2126   .text:00000000000036b0 $t
             forth.s:2127   .text:00000000000036b4 $d
             forth.s:2138   .text:00000000000036c0 $t
             forth.s:2139   .text:00000000000036c4 $d
             forth.s:2149   .text:00000000000036d4 _DOTR
             forth.s:2149   .text:00000000000036d8 DOTR
             forth.s:2151   .text:00000000000036dc $d
             forth.s:2166   .text:0000000000003700 _UDOTR
             forth.s:2166   .text:0000000000003704 $t
             forth.s:2166   .text:0000000000003704 UDOTR
ARM GAS  forth.s 			page 200


             forth.s:2168   .text:0000000000003708 $d
             forth.s:2187   .text:0000000000003740 _UDOT
             forth.s:2187   .text:0000000000003744 UDOT
             forth.s:2189   .text:0000000000003748 $d
             forth.s:2203   .text:0000000000003768 _DOT
             forth.s:2203   .text:000000000000376a $t
             forth.s:2205   .text:0000000000003770 $d
             forth.s:2212   .text:0000000000003794 DOT1
             forth.s:2222   .text:00000000000037a8 _DDOT
             forth.s:2222   .text:00000000000037ac DDOT
             forth.s:2224   .text:00000000000037b0 $d
             forth.s:2242   .text:00000000000037e0 _HDOT
             forth.s:2244   .text:00000000000037e8 $d
             forth.s:2259   .text:000000000000380c _QUEST
             forth.s:2259   .text:000000000000380e $t
             forth.s:2259   .text:0000000000003810 QUEST
             forth.s:2261   .text:0000000000003814 $d
             forth.s:2275   .text:0000000000003820 PARS
             forth.s:2276   .text:0000000000003820 $t
             forth.s:2277   .text:0000000000003824 $d
             forth.s:2343   .text:0000000000003934 PARS8
             forth.s:2307   .text:00000000000038a8 PARS3
             forth.s:2290   .text:0000000000003860 PARS1
             forth.s:2305   .text:00000000000038a4 PARS2
             forth.s:2311   .text:00000000000038b4 PARS4
             forth.s:2323   .text:00000000000038e4 PARS5
             forth.s:2330   .text:0000000000003908 PARS6
             forth.s:2336   .text:000000000000391c PARS7
             forth.s:2354   .text:0000000000003948 _PARSE
             forth.s:2354   .text:000000000000394e $t
             forth.s:2354   .text:0000000000003950 PARSE
             forth.s:2356   .text:0000000000003954 $d
             forth.s:2377   .text:0000000000003994 _DOTPR
             forth.s:2377   .text:0000000000003998 DOTPR
             forth.s:2379   .text:000000000000399c $d
             forth.s:2390   .text:00000000000039b4 _PAREN
             forth.s:2390   .text:00000000000039b6 $t
             forth.s:2390   .text:00000000000039b8 PAREN
             forth.s:2392   .text:00000000000039bc $d
             forth.s:2403   .text:00000000000039d4 _BKSLA
             forth.s:2403   .text:00000000000039d6 $t
             forth.s:2403   .text:00000000000039d8 BKSLA
             forth.s:2405   .text:00000000000039dc $d
             forth.s:2416   .text:00000000000039f4 _CHAR
             forth.s:2416   .text:00000000000039fc CHAR
             forth.s:2418   .text:0000000000003a00 $d
             forth.s:2428   .text:0000000000003a18 _IMCHAR
             forth.s:2428   .text:0000000000003a20 IMCHAR
             forth.s:2430   .text:0000000000003a24 $d
             forth.s:3026   .text:0000000000004148 LITER
             forth.s:2439   .text:0000000000003a34 _WORDD
             forth.s:2439   .text:0000000000003a3c WORDD
             forth.s:2441   .text:0000000000003a40 $d
             forth.s:2453   .text:0000000000003a58 _TOKEN
             forth.s:2453   .text:0000000000003a5e $t
             forth.s:2453   .text:0000000000003a60 TOKEN
             forth.s:2455   .text:0000000000003a64 $d
ARM GAS  forth.s 			page 201


             forth.s:2620   .text:0000000000003c54 UPPER
             forth.s:2469   .text:0000000000003a78 _NAMET
             forth.s:2469   .text:0000000000003a7e $t
             forth.s:2469   .text:0000000000003a80 NAMET
             forth.s:2471   .text:0000000000003a84 $d
             forth.s:2490   .text:0000000000003aa4 _SAMEQ
             forth.s:2490   .text:0000000000003aaa $t
             forth.s:2490   .text:0000000000003aac SAMEQ
             forth.s:2492   .text:0000000000003ab0 $d
             forth.s:2509   .text:0000000000003af8 SAME2
             forth.s:2494   .text:0000000000003abc SAME1
             forth.s:2524   .text:0000000000003b0c FIND
             forth.s:2525   .text:0000000000003b0c $t
             forth.s:2526   .text:0000000000003b10 $d
             forth.s:2533   .text:0000000000003b2c FIND1
             forth.s:2553   .text:0000000000003b84 FIND6
             forth.s:2546   .text:0000000000003b6c FIND2
             forth.s:2551   .text:0000000000003b7c FIND3
             forth.s:2560   .text:0000000000003b9c FIND4
             forth.s:2566   .text:0000000000003bb8 FIND5
             forth.s:2582   .text:0000000000003be0 _NAMEQ
             forth.s:2582   .text:0000000000003be6 $t
             forth.s:2582   .text:0000000000003be8 NAMEQ
             forth.s:2584   .text:0000000000003bec $d
             forth.s:2599   .text:0000000000003c00 _ASCIZ
             forth.s:2599   .text:0000000000003c06 $t
             forth.s:2599   .text:0000000000003c08 ASCIZ
             forth.s:2601   .text:0000000000003c0c $d
             forth.s:2620   .text:0000000000003c4c _UPPER
             forth.s:2620   .text:0000000000003c52 $t
             forth.s:2622   .text:0000000000003c58 $d
             forth.s:2653   .text:0000000000003cdc BKSP
             forth.s:2654   .text:0000000000003cdc $t
             forth.s:2655   .text:0000000000003ce0 $d
             forth.s:2669   .text:0000000000003d24 BACK1
             forth.s:2678   .text:0000000000003d28 TAP
             forth.s:2679   .text:0000000000003d28 $t
             forth.s:2680   .text:0000000000003d2c $d
             forth.s:2693   .text:0000000000003d44 KTAP
             forth.s:2694   .text:0000000000003d44 TTAP
             forth.s:2695   .text:0000000000003d44 $t
             forth.s:2696   .text:0000000000003d48 $d
             forth.s:2710   .text:0000000000003d88 KTAP2
             forth.s:2707   .text:0000000000003d80 KTAP1
             forth.s:2722   .text:0000000000003da0 _ACCEP
             forth.s:2724   .text:0000000000003dac $d
             forth.s:2727   .text:0000000000003db8 ACCP1
             forth.s:2743   .text:0000000000003e00 ACCP4
             forth.s:2739   .text:0000000000003df4 ACCP2
             forth.s:2741   .text:0000000000003df8 ACCP3
             forth.s:2754   .text:0000000000003e14 _QUERY
             forth.s:2754   .text:0000000000003e1a $t
             forth.s:2754   .text:0000000000003e1c QUERY
             forth.s:2756   .text:0000000000003e20 $d
             forth.s:2776   .text:0000000000003e54 _ABORT
             forth.s:2776   .text:0000000000003e5a $t
             forth.s:2776   .text:0000000000003e5c ABORT
ARM GAS  forth.s 			page 202


             forth.s:2778   .text:0000000000003e60 ABORT1
             forth.s:2779   .text:0000000000003e60 $d
             forth.s:2910   .text:0000000000004004 QUIT
             forth.s:2794   .text:0000000000003e88 ABORQ
             forth.s:2795   .text:0000000000003e88 $t
             forth.s:2796   .text:0000000000003e8c $d
             forth.s:2814   .text:0000000000003eb0 _INTER
             forth.s:2816   .text:0000000000003ec0 $d
             forth.s:2825   .text:0000000000003efc INTE1
             forth.s:2822   .text:0000000000003ef2 $t
             forth.s:2823   .text:0000000000003ef4 $d
             forth.s:2829   .text:0000000000003f0c INTE2
             forth.s:2836   .text:0000000000003f14 _LBRAC
             forth.s:2836   .text:0000000000003f16 $t
             forth.s:2836   .text:0000000000003f18 LBRAC
             forth.s:2838   .text:0000000000003f1c $d
             forth.s:2848   .text:0000000000003f34 _DOTOK
             forth.s:2848   .text:0000000000003f38 $t
             forth.s:2848   .text:0000000000003f38 DOTOK
             forth.s:2850   .text:0000000000003f3c $d
             forth.s:2856   .text:0000000000003f60 DOTO1
             forth.s:2857   .text:0000000000003f60 $d
             forth.s:2865   .text:0000000000003f6c _QSTAC
             forth.s:2865   .text:0000000000003f74 QSTAC
             forth.s:2867   .text:0000000000003f78 $d
             forth.s:2869   .text:0000000000003f8e $t
             forth.s:2870   .text:0000000000003f90 $d
             forth.s:2877   .text:0000000000003f98 _EVAL
             forth.s:2879   .text:0000000000003fa4 EVAL1
             forth.s:2880   .text:0000000000003fa4 $d
             forth.s:2888   .text:0000000000003fcc EVAL2
             forth.s:2898   .text:0000000000003fdc _PRESE
             forth.s:2900   .text:0000000000003fe8 $d
             forth.s:2910   .text:0000000000003ffc _QUIT
             forth.s:2911   .text:0000000000004004 $d
             forth.s:2913   .text:0000000000004010 QUIT1
             forth.s:2915   .text:0000000000004014 QUIT2
             forth.s:2925   .text:0000000000004028 _FORGET
             forth.s:2925   .text:0000000000004030 FORGET
             forth.s:2927   .text:0000000000004034 $d
             forth.s:3424   .text:00000000000045cc OVERT
             forth.s:2955   .text:000000000000407c $d
             forth.s:2955   .text:0000000000004080 _TICK
             forth.s:2955   .text:0000000000004082 $t
             forth.s:2955   .text:0000000000004084 TICK
             forth.s:2957   .text:0000000000004088 $d
             forth.s:2961   .text:000000000000409c TICK1
             forth.s:2969   .text:00000000000040a4 _ALLOT
             forth.s:2969   .text:00000000000040aa $t
             forth.s:2969   .text:00000000000040ac ALLOT
             forth.s:2971   .text:00000000000040b0 $d
             forth.s:2980   .text:00000000000040c0 _COMMA
             forth.s:2980   .text:00000000000040c2 $t
             forth.s:2980   .text:00000000000040c4 COMMA
             forth.s:2982   .text:00000000000040c8 $d
             forth.s:2996   .text:00000000000040e4 $d
             forth.s:2996   .text:00000000000040e8 _BCOMP
ARM GAS  forth.s 			page 203


             forth.s:2996   .text:00000000000040f2 $t
             forth.s:2996   .text:00000000000040f4 BCOMP
             forth.s:2998   .text:00000000000040f8 $d
             forth.s:3008   .text:0000000000004108 _COMPI
             forth.s:3008   .text:0000000000004110 $t
             forth.s:3008   .text:0000000000004110 COMPI
             forth.s:3010   .text:0000000000004114 $d
             forth.s:3026   .text:0000000000004140 _LITER
             forth.s:3026   .text:0000000000004148 $t
             forth.s:3028   .text:000000000000414c $d
             forth.s:3463   .text:0000000000004628 CALLC
             forth.s:3038   .text:0000000000004160 STRCQ
             forth.s:3039   .text:0000000000004160 $t
             forth.s:3040   .text:0000000000004164 $d
             forth.s:3062   .text:000000000000419c _FOR
             forth.s:3062   .text:00000000000041a0 $t
             forth.s:3062   .text:00000000000041a0 FOR
             forth.s:3064   .text:00000000000041a4 $d
             forth.s:3073   .text:00000000000041bc _DO
             forth.s:3073   .text:00000000000041c0 DO
             forth.s:3075   .text:00000000000041c4 $d
             forth.s:3081   .text:00000000000041f0 DOPLOOP
             forth.s:3082   .text:00000000000041f0 $t
             forth.s:3098   .text:0000000000004212 $d
             forth.s:3098   .text:0000000000004216 _PLOOP
             forth.s:3098   .text:000000000000421c $t
             forth.s:3098   .text:000000000000421c PLOOP
             forth.s:3100   .text:0000000000004220 $d
             forth.s:3104   .text:0000000000004234 DOLOOP
             forth.s:3105   .text:0000000000004234 $t
             forth.s:3123   .text:000000000000425c $d
             forth.s:3123   .text:0000000000004260 _LOOP
             forth.s:3123   .text:0000000000004268 LOOP
             forth.s:3125   .text:000000000000426c $d
             forth.s:3136   .text:0000000000004284 _BEGIN
             forth.s:3136   .text:000000000000428a $t
             forth.s:3136   .text:000000000000428c BEGIN
             forth.s:3138   .text:0000000000004290 $d
             forth.s:3147   .text:0000000000004298 $d
             forth.s:3147   .text:000000000000429c _FNEXT
             forth.s:3147   .text:00000000000042a4 FNEXT
             forth.s:3149   .text:00000000000042a8 $d
             forth.s:3157   .text:00000000000042c0 _I
             forth.s:3157   .text:00000000000042c2 $t
             forth.s:3157   .text:00000000000042c4 I
             forth.s:3166   .text:00000000000042d0 $d
             forth.s:3166   .text:00000000000042d4 _J
             forth.s:3166   .text:00000000000042d6 $t
             forth.s:3166   .text:00000000000042d8 J
             forth.s:3176   .text:00000000000042e4 $d
             forth.s:3176   .text:00000000000042e8 _UNTIL
             forth.s:3176   .text:00000000000042ee $t
             forth.s:3176   .text:00000000000042f0 UNTIL
             forth.s:3178   .text:00000000000042f4 $d
             forth.s:3187   .text:000000000000430c _AGAIN
             forth.s:3187   .text:0000000000004312 $t
             forth.s:3187   .text:0000000000004314 AGAIN
ARM GAS  forth.s 			page 204


             forth.s:3189   .text:0000000000004318 $d
             forth.s:3198   .text:0000000000004330 _IFF
             forth.s:3198   .text:0000000000004334 IFF
             forth.s:3200   .text:0000000000004338 $d
             forth.s:3212   .text:0000000000004360 _AHEAD
             forth.s:3212   .text:0000000000004366 $t
             forth.s:3212   .text:0000000000004368 AHEAD
             forth.s:3214   .text:000000000000436c $d
             forth.s:3226   .text:0000000000004394 _REPEA
             forth.s:3226   .text:000000000000439c REPEA
             forth.s:3228   .text:00000000000043a0 $d
             forth.s:3239   .text:00000000000043b8 _THENN
             forth.s:3239   .text:00000000000043c0 THENN
             forth.s:3241   .text:00000000000043c4 $d
             forth.s:3252   .text:00000000000043d8 _AFT
             forth.s:3252   .text:00000000000043dc $t
             forth.s:3252   .text:00000000000043dc AFT
             forth.s:3254   .text:00000000000043e0 $d
             forth.s:3266   .text:00000000000043f8 _ELSEE
             forth.s:3266   .text:0000000000004400 ELSEE
             forth.s:3268   .text:0000000000004404 $d
             forth.s:3278   .text:0000000000004418 _WHILE
             forth.s:3278   .text:000000000000441e $t
             forth.s:3278   .text:0000000000004420 WHILE
             forth.s:3280   .text:0000000000004424 $d
             forth.s:3289   .text:0000000000004434 _ABRTQ
             forth.s:3289   .text:000000000000443c ABRTQ
             forth.s:3291   .text:0000000000004440 $d
             forth.s:3300   .text:0000000000004458 _STRQ
             forth.s:3300   .text:000000000000445c STRQ
             forth.s:3302   .text:0000000000004460 $d
             forth.s:3312   .text:0000000000004478 _DOTQ
             forth.s:3312   .text:000000000000447c DOTQ
             forth.s:3314   .text:0000000000004480 $d
             forth.s:3328   .text:0000000000004498 _UNIQU
             forth.s:3328   .text:00000000000044a0 $t
             forth.s:3328   .text:00000000000044a0 UNIQU
             forth.s:3330   .text:00000000000044a4 $d
             forth.s:3337   .text:00000000000044cc UNIQ1
             forth.s:3334   .text:00000000000044c0 $d
             forth.s:3347   .text:00000000000044d4 SNAME
             forth.s:3348   .text:00000000000044d4 $t
             forth.s:3349   .text:00000000000044d8 $d
             forth.s:3365   .text:000000000000451c SNAM1
             forth.s:3377   .text:0000000000004530 _SCOMP
             forth.s:3377   .text:000000000000453c SCOMP
             forth.s:3379   .text:0000000000004540 $d
             forth.s:3391   .text:0000000000004578 SCOM2
             forth.s:3388   .text:0000000000004570 SCOM1
             forth.s:3396   .text:000000000000458c SCOM3
             forth.s:3405   .text:0000000000004594 COLON_ABORT
             forth.s:3406   .text:0000000000004594 $t
             forth.s:3407   .text:0000000000004598 $d
             forth.s:3424   .text:00000000000045c4 _OVERT
             forth.s:3424   .text:00000000000045ca $t
             forth.s:3426   .text:00000000000045d0 $d
             forth.s:3437   .text:00000000000045e8 _SEMIS
ARM GAS  forth.s 			page 205


             forth.s:3437   .text:00000000000045ea $t
             forth.s:3437   .text:00000000000045ec SEMIS
             forth.s:3439   .text:00000000000045f0 $d
             forth.s:3451   .text:000000000000460c _RBRAC
             forth.s:3451   .text:000000000000460e $t
             forth.s:3451   .text:0000000000004610 RBRAC
             forth.s:3453   .text:0000000000004614 $d
             forth.s:3464   .text:0000000000004628 $t
             forth.s:3465   .text:000000000000462c $d
             forth.s:3477   .text:0000000000004644 _COLON
             forth.s:3477   .text:0000000000004646 $t
             forth.s:3477   .text:0000000000004648 COLON
             forth.s:3479   .text:000000000000464c $d
             forth.s:3490   .text:0000000000004664 _IMMED
             forth.s:3490   .text:000000000000466e $t
             forth.s:3490   .text:0000000000004670 IMMED
             forth.s:3492   .text:0000000000004674 $d
             forth.s:3510   .text:00000000000046a0 _CONST
             forth.s:3510   .text:00000000000046ac CONST
             forth.s:3512   .text:00000000000046b0 $d
             forth.s:3523   .text:00000000000046e0 $t
             forth.s:3530   .text:00000000000046e0 DODOES
             forth.s:3532   .text:00000000000046e4 $d
             forth.s:3547   .text:0000000000004708 $d
             forth.s:3547   .text:000000000000470c _DOES
             forth.s:3547   .text:0000000000004712 $t
             forth.s:3547   .text:0000000000004714 DOES
             forth.s:3549   .text:0000000000004718 $d
             forth.s:3564   .text:0000000000004748 _DEFERAT
             forth.s:3564   .text:0000000000004750 DEFERAT
             forth.s:3566   .text:0000000000004754 $d
             forth.s:3576   .text:000000000000476c _DEFERSTO
             forth.s:3576   .text:0000000000004774 DEFERSTO
             forth.s:3578   .text:0000000000004778 $d
             forth.s:3589   .text:0000000000004794 _DEFER
             forth.s:3589   .text:000000000000479a $t
             forth.s:3589   .text:000000000000479c DEFER
             forth.s:3591   .text:00000000000047a0 $d
             forth.s:3612   .text:00000000000047ec CREAT
             forth.s:3602   .text:00000000000047d4 DEFER_NOP
             forth.s:3603   .text:00000000000047d4 $t
             forth.s:3604   .text:00000000000047d8 $d
             forth.s:3612   .text:00000000000047e4 _CREAT
             forth.s:3614   .text:00000000000047f0 $d
             forth.s:3627   .text:0000000000004814 _VARIA
             forth.s:3627   .text:0000000000004820 VARIA
             forth.s:3629   .text:0000000000004824 $d
             forth.s:3646   .text:0000000000004844 DMP
             forth.s:3647   .text:0000000000004844 $t
             forth.s:3648   .text:0000000000004848 $d
             forth.s:3660   .text:0000000000004880 PDUM2
             forth.s:3654   .text:0000000000004868 PDUM1
             forth.s:3672   .text:000000000000488c $d
             forth.s:3672   .text:0000000000004890 _DUMP
             forth.s:3672   .text:0000000000004898 DUMP
             forth.s:3674   .text:000000000000489c $d
             forth.s:3692   .text:00000000000048ec DUMP4
ARM GAS  forth.s 			page 206


             forth.s:3682   .text:00000000000048c4 DUMP1
             forth.s:3694   .text:00000000000048f4 DUMP3
             forth.s:3707   .text:0000000000004908 TDOT
             forth.s:3708   .text:0000000000004908 $t
             forth.s:3709   .text:000000000000490c $d
             forth.s:3748   .text:000000000000499c _DOTS
             forth.s:3748   .text:00000000000049a0 DOTS
             forth.s:3750   .text:00000000000049a4 $d
             forth.s:3757   .text:00000000000049c0 DOTS2
             forth.s:3753   .text:00000000000049b4 DOTS1
             forth.s:3762   .text:00000000000049d0 RPAT
             forth.s:3763   .text:00000000000049d0 $t
             forth.s:3767   .text:00000000000049da RBASE
             forth.s:3776   .text:00000000000049ea RDOT
             forth.s:3778   .text:00000000000049ee $d
             forth.s:3805   .text:0000000000004a52 _TRACE
             forth.s:3805   .text:0000000000004a58 $t
             forth.s:3805   .text:0000000000004a58 TRACE
             forth.s:3807   .text:0000000000004a5c $d
             forth.s:3826   .text:0000000000004aa0 _TNAME
             forth.s:3826   .text:0000000000004aa6 $t
             forth.s:3826   .text:0000000000004aa8 TNAME
             forth.s:3828   .text:0000000000004aac $d
             forth.s:3831   .text:0000000000004ab8 TNAM1
             forth.s:3842   .text:0000000000004aec TNAM2
             forth.s:3851   .text:0000000000004afc _DOTID
             forth.s:3851   .text:0000000000004b00 $t
             forth.s:3851   .text:0000000000004b00 DOTID
             forth.s:3853   .text:0000000000004b04 $d
             forth.s:3860   .text:0000000000004b28 DOTI1
             forth.s:3861   .text:0000000000004b36 $t
             forth.s:3862   .text:0000000000004b38 $d
             forth.s:3864   *ABS*:0000000000000000 WANT_SEE
             forth.s:3937   .text:0000000000004b40 _VLIST
             forth.s:3937   .text:0000000000004b46 $t
             forth.s:3937   .text:0000000000004b48 VLIST
             forth.s:3939   .text:0000000000004b4c $d
             forth.s:3950   .text:0000000000004b6c WORDS
             forth.s:3971   .text:0000000000004bb0 WC
             forth.s:3950   .text:0000000000004b64 _WORDS
             forth.s:3950   .text:0000000000004b6a $t
             forth.s:3952   .text:0000000000004b70 $d
             forth.s:3955   .text:0000000000004b7c WORS1
             forth.s:3964   .text:0000000000004ba4 WORS2
             forth.s:3971   .text:0000000000004bac _WC
             forth.s:3973   .text:0000000000004bb4 $d
             forth.s:3990   .text:0000000000004bf0 _MARK
             forth.s:3990   .text:0000000000004bf8 MARK
             forth.s:3992   .text:0000000000004bfc $d
             forth.s:3995   .text:0000000000004c08 $t
             forth.s:3996   .text:0000000000004c0c $d
             forth.s:4017   .text:0000000000004c38 VERSN
             forth.s:4018   .text:0000000000004c38 $t
             forth.s:4019   .text:0000000000004c3c $d
             forth.s:4027   .text:0000000000004c4c _HI
             forth.s:4029   .text:0000000000004c54 $d
             forth.s:4030   .text:0000000000004c6e $t
ARM GAS  forth.s 			page 207


             forth.s:4031   .text:0000000000004c70 $d
             forth.s:4053   .text:0000000000004cbc PS2_QUERY
             forth.s:4054   .text:0000000000004cbc $t
             forth.s:4055   .text:0000000000004cc0 $d
             forth.s:4069   .text:0000000000004d26 $t
             forth.s:4070   .text:0000000000004d28 $d
             forth.s:4080   .text:0000000000004d34 IF_SENSE
             forth.s:4081   .text:0000000000004d34 $t
             forth.s:4082   .text:0000000000004d38 $d
             forth.s:4108   .text:0000000000004d88 COLD1
             forth.s:4109   .text:0000000000004d88 $d
             forth.s:4124   .text:0000000000004dd8 COLD2
             forth.s:4127   .text:0000000000004dd8 $d
             forth.s:4130   .text:0000000000004ddc $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:0000000000000547 $d
          ser-term.s:90     .text:0000000000000548 $t
          ser-term.s:110    .text:0000000000000581 $d
          ser-term.s:110    .text:0000000000000582 $t
          ser-term.s:133    .text:00000000000005bf $d
          ser-term.s:133    .text:00000000000005c0 $t
          ser-term.s:164    .text:0000000000000607 $d
          ser-term.s:164    .text:0000000000000608 $t
          ser-term.s:191    .text:000000000000067d $d
          ser-term.s:191    .text:000000000000067e $t
          ser-term.s:203    .text:00000000000006ab $d
          ser-term.s:203    .text:00000000000006ac $t
             tvout.s:264    .text:00000000000008f7 $d
             tvout.s:264    .text:00000000000008f8 $t
             tvout.s:278    .text:000000000000092b $d
             tvout.s:278    .text:000000000000092c $t
             tvout.s:306    .text:0000000000000985 $d
             tvout.s:306    .text:0000000000000986 $t
             tvout.s:325    .text:00000000000009b3 $d
             tvout.s:325    .text:00000000000009b4 $t
             tvout.s:427    .text:0000000000000aed $d
             tvout.s:427    .text:0000000000000aee $t
             tvout.s:448    .text:0000000000000b47 $d
             tvout.s:448    .text:0000000000000b48 $t
             tvout.s:495    .text:0000000000000bdd $d
             tvout.s:495    .text:0000000000000bde $t
           ps2_kbd.s:307    .text:00000000000012cb $d
           ps2_kbd.s:307    .text:00000000000012cc $t
           ps2_kbd.s:396    .text:00000000000013c7 $d
           ps2_kbd.s:396    .text:00000000000013c8 $t
           ps2_kbd.s:616    .text:0000000000001669 $d
           ps2_kbd.s:616    .text:000000000000166a $t
           ps2_kbd.s:633    .text:00000000000016a3 $d
           ps2_kbd.s:633    .text:00000000000016a4 $t
         spi-flash.s:85     .text:000000000000178f $d
         spi-flash.s:85     .text:0000000000001790 $t
         spi-flash.s:151    .text:000000000000185b $d
         spi-flash.s:151    .text:000000000000185c $t
         spi-flash.s:238    .text:000000000000199f $d
         spi-flash.s:238    .text:00000000000019a0 $t
         spi-flash.s:256    .text:00000000000019db $d
ARM GAS  forth.s 			page 208


         spi-flash.s:256    .text:00000000000019dc $t
         spi-flash.s:278    .text:0000000000001a2f $d
         spi-flash.s:278    .text:0000000000001a30 $t
         spi-flash.s:325    .text:0000000000001aaf $d
         spi-flash.s:325    .text:0000000000001ab0 $t
         spi-flash.s:343    .text:0000000000001ad1 $d
         spi-flash.s:343    .text:0000000000001ad2 $t
         spi-flash.s:352    .text:0000000000001ae5 $d
         spi-flash.s:352    .text:0000000000001ae6 $t
             float.s:47     .text:0000000000001af9 $d
             float.s:47     .text:0000000000001afa $t
             float.s:65     .text:0000000000001b2b $d
             float.s:65     .text:0000000000001b2c $t
             float.s:219    .text:0000000000001d07 $d
             float.s:219    .text:0000000000001d08 $t
             float.s:288    .text:0000000000001e2b $d
             float.s:288    .text:0000000000001e2c $t
             float.s:344    .text:0000000000001f17 $d
             float.s:344    .text:0000000000001f18 $t
             float.s:385    .text:0000000000001fbf $d
             float.s:385    .text:0000000000001fc0 $t
             float.s:457    .text:00000000000020c7 $d
             float.s:457    .text:00000000000020c8 $t
             float.s:470    .text:00000000000020eb $d
             float.s:470    .text:00000000000020ec $t
             float.s:501    .text:0000000000002149 $d
             float.s:501    .text:000000000000214a $t
             float.s:520    .text:000000000000218b $d
             float.s:520    .text:000000000000218c $t
             float.s:534    .text:00000000000021bd $d
             float.s:534    .text:00000000000021be $t
             float.s:549    .text:00000000000021ef $d
             float.s:549    .text:00000000000021f0 $t
             float.s:560    .text:000000000000220b $d
             float.s:560    .text:000000000000220c $t
             float.s:656    .text:000000000000233f $d
             float.s:656    .text:0000000000002340 $t
             float.s:725    .text:000000000000244f $d
             float.s:725    .text:0000000000002450 $t
             forth.s:132    .text:00000000000024c3 $d
             forth.s:132    .text:00000000000024c4 $t
             forth.s:154    .text:00000000000024fd $d
             forth.s:154    .text:00000000000024fe $t
             forth.s:190    .text:000000000000251b $d
             forth.s:190    .text:000000000000251c $t
             forth.s:237    .text:00000000000025c9 $d
             forth.s:237    .text:00000000000025ca $t
             forth.s:332    .text:0000000000002659 $d
             forth.s:332    .text:000000000000265a $t
             forth.s:357    .text:0000000000002687 $d
             forth.s:357    .text:0000000000002688 $t
             forth.s:367    .text:000000000000269b $d
             forth.s:367    .text:000000000000269c $t
             forth.s:375    .text:00000000000026a7 $d
             forth.s:375    .text:00000000000026a8 $t
             forth.s:384    .text:00000000000026b9 $d
             forth.s:384    .text:00000000000026ba $t
ARM GAS  forth.s 			page 209


             forth.s:393    .text:00000000000026cd $d
             forth.s:393    .text:00000000000026ce $t
             forth.s:429    .text:0000000000002715 $d
             forth.s:429    .text:0000000000002716 $t
             forth.s:445    .text:0000000000002737 $d
             forth.s:445    .text:0000000000002738 $t
             forth.s:455    .text:0000000000002749 $d
             forth.s:455    .text:000000000000274a $t
             forth.s:464    .text:000000000000275b $d
             forth.s:464    .text:000000000000275c $t
             forth.s:481    .text:000000000000277d $d
             forth.s:481    .text:000000000000277e $t
             forth.s:511    .text:00000000000027c3 $d
             forth.s:511    .text:00000000000027c4 $t
             forth.s:520    .text:00000000000027d9 $d
             forth.s:520    .text:00000000000027da $t
             forth.s:568    .text:0000000000002833 $d
             forth.s:568    .text:0000000000002834 $t
             forth.s:579    .text:0000000000002847 $d
             forth.s:579    .text:0000000000002848 $t
             forth.s:587    .text:0000000000002855 $d
             forth.s:587    .text:0000000000002856 $t
             forth.s:595    .text:0000000000002865 $d
             forth.s:595    .text:0000000000002866 $t
             forth.s:603    .text:0000000000002875 $d
             forth.s:603    .text:0000000000002876 $t
             forth.s:627    .text:00000000000028a5 $d
             forth.s:627    .text:00000000000028a6 $t
             forth.s:652    .text:00000000000028d9 $d
             forth.s:652    .text:00000000000028da $t
             forth.s:660    .text:00000000000028e9 $d
             forth.s:660    .text:00000000000028ea $t
             forth.s:668    .text:00000000000028fb $d
             forth.s:668    .text:00000000000028fc $t
             forth.s:689    .text:0000000000002923 $d
             forth.s:689    .text:0000000000002924 $t
             forth.s:718    .text:000000000000295f $d
             forth.s:718    .text:0000000000002960 $t
             forth.s:728    .text:0000000000002973 $d
             forth.s:728    .text:0000000000002974 $t
             forth.s:741    .text:0000000000002991 $d
             forth.s:741    .text:0000000000002992 $t
             forth.s:794    .text:0000000000002a09 $d
             forth.s:794    .text:0000000000002a0a $t
             forth.s:835    .text:0000000000002a5f $d
             forth.s:835    .text:0000000000002a60 $t
             forth.s:858    .text:0000000000002a8b $d
             forth.s:858    .text:0000000000002a8c $t
             forth.s:871    .text:0000000000002aab $d
             forth.s:871    .text:0000000000002aac $t
             forth.s:895    .text:0000000000002adb $d
             forth.s:895    .text:0000000000002adc $t
             forth.s:941    .text:0000000000002b33 $d
             forth.s:941    .text:0000000000002b34 $t
             forth.s:953    .text:0000000000002b4b $d
             forth.s:953    .text:0000000000002b4c $t
             forth.s:965    .text:0000000000002b67 $d
ARM GAS  forth.s 			page 210


             forth.s:965    .text:0000000000002b68 $t
             forth.s:1026   .text:0000000000002bc3 $d
             forth.s:1026   .text:0000000000002bc4 $t
             forth.s:1035   .text:0000000000002bd7 $d
             forth.s:1035   .text:0000000000002bd8 $t
             forth.s:1062   .text:0000000000002c13 $d
             forth.s:1062   .text:0000000000002c14 $t
             forth.s:1081   .text:0000000000002c31 $d
             forth.s:1081   .text:0000000000002c32 $t
             forth.s:1100   .text:0000000000002c5b $d
             forth.s:1100   .text:0000000000002c5c $t
             forth.s:1140   .text:0000000000002caf $d
             forth.s:1140   .text:0000000000002cb0 $t
             forth.s:1160   .text:0000000000002cd9 $d
             forth.s:1160   .text:0000000000002cda $t
             forth.s:1174   .text:0000000000002cf7 $d
             forth.s:1174   .text:0000000000002cf8 $t
             forth.s:1185   .text:0000000000002d15 $d
             forth.s:1185   .text:0000000000002d16 $t
             forth.s:1202   .text:0000000000002d33 $d
             forth.s:1202   .text:0000000000002d34 $t
             forth.s:1219   .text:0000000000002d5f $d
             forth.s:1219   .text:0000000000002d60 $t
             forth.s:1354   .text:0000000000002eab $d
             forth.s:1354   .text:0000000000002eac $t
             forth.s:1376   .text:0000000000002ef7 $d
             forth.s:1376   .text:0000000000002ef8 $t
             forth.s:1425   .text:0000000000002f37 $d
             forth.s:1425   .text:0000000000002f38 $t
             forth.s:1476   .text:0000000000002faf $d
             forth.s:1476   .text:0000000000002fb0 $t
             forth.s:1535   .text:0000000000003059 $d
             forth.s:1535   .text:000000000000305a $t
             forth.s:1553   .text:0000000000003081 $d
             forth.s:1553   .text:0000000000003082 $t
             forth.s:1587   .text:00000000000030d3 $d
             forth.s:1587   .text:00000000000030d4 $t
             forth.s:1620   .text:0000000000003121 $d
             forth.s:1620   .text:0000000000003122 $t
             forth.s:1652   .text:0000000000003169 $d
             forth.s:1652   .text:000000000000316a $t
             forth.s:1730   .text:000000000000324b $d
             forth.s:1730   .text:000000000000324c $t
             forth.s:1742   .text:0000000000003269 $d
             forth.s:1742   .text:000000000000326a $t
             forth.s:1774   .text:00000000000032b7 $d
             forth.s:1774   .text:00000000000032b8 $t
             forth.s:1792   .text:00000000000032e9 $d
             forth.s:1792   .text:00000000000032ea $t
             forth.s:1806   .text:0000000000003313 $d
             forth.s:1806   .text:0000000000003314 $t
             forth.s:1884   .text:00000000000033cf $d
             forth.s:1884   .text:00000000000033d0 $t
             forth.s:1962   .text:00000000000034af $d
             forth.s:1962   .text:00000000000034b0 $t
             forth.s:2044   .text:00000000000035eb $d
             forth.s:2044   .text:00000000000035ec $t
ARM GAS  forth.s 			page 211


             forth.s:2061   .text:0000000000003621 $d
             forth.s:2061   .text:0000000000003622 $t
             forth.s:2079   .text:0000000000003657 $d
             forth.s:2079   .text:0000000000003658 $t
             forth.s:2149   .text:00000000000036d7 $d
             forth.s:2149   .text:00000000000036d8 $t
             forth.s:2187   .text:0000000000003743 $d
             forth.s:2187   .text:0000000000003744 $t
             forth.s:2222   .text:00000000000037ab $d
             forth.s:2222   .text:00000000000037ac $t
             forth.s:2242   .text:00000000000037e3 $d
             forth.s:2242   .text:00000000000037e4 $t
             forth.s:2377   .text:0000000000003997 $d
             forth.s:2377   .text:0000000000003998 $t
             forth.s:2416   .text:00000000000039f9 $d
             forth.s:2416   .text:00000000000039fa $t
             forth.s:2428   .text:0000000000003a1f $d
             forth.s:2428   .text:0000000000003a20 $t
             forth.s:2439   .text:0000000000003a39 $d
             forth.s:2439   .text:0000000000003a3a $t
             forth.s:2722   .text:0000000000003da7 $d
             forth.s:2722   .text:0000000000003da8 $t
             forth.s:2814   .text:0000000000003ebb $d
             forth.s:2814   .text:0000000000003ebc $t
             forth.s:2865   .text:0000000000003f73 $d
             forth.s:2865   .text:0000000000003f74 $t
             forth.s:2877   .text:0000000000003f9d $d
             forth.s:2877   .text:0000000000003f9e $t
             forth.s:2898   .text:0000000000003fe3 $d
             forth.s:2898   .text:0000000000003fe4 $t
             forth.s:2910   .text:0000000000004001 $d
             forth.s:2910   .text:0000000000004002 $t
             forth.s:2925   .text:000000000000402f $d
             forth.s:2925   .text:0000000000004030 $t
             forth.s:3073   .text:00000000000041bf $d
             forth.s:3073   .text:00000000000041c0 $t
             forth.s:3123   .text:0000000000004265 $d
             forth.s:3123   .text:0000000000004266 $t
             forth.s:3147   .text:00000000000042a1 $d
             forth.s:3147   .text:00000000000042a2 $t
             forth.s:3198   .text:0000000000004333 $d
             forth.s:3198   .text:0000000000004334 $t
             forth.s:3226   .text:000000000000439b $d
             forth.s:3226   .text:000000000000439c $t
             forth.s:3239   .text:00000000000043bd $d
             forth.s:3239   .text:00000000000043be $t
             forth.s:3266   .text:00000000000043fd $d
             forth.s:3266   .text:00000000000043fe $t
             forth.s:3289   .text:000000000000443b $d
             forth.s:3289   .text:000000000000443c $t
             forth.s:3300   .text:000000000000445b $d
             forth.s:3300   .text:000000000000445c $t
             forth.s:3312   .text:000000000000447b $d
             forth.s:3312   .text:000000000000447c $t
             forth.s:3377   .text:0000000000004539 $d
             forth.s:3377   .text:000000000000453a $t
             forth.s:3510   .text:00000000000046a9 $d
ARM GAS  forth.s 			page 212


             forth.s:3510   .text:00000000000046aa $t
             forth.s:3564   .text:000000000000474f $d
             forth.s:3564   .text:0000000000004750 $t
             forth.s:3576   .text:0000000000004773 $d
             forth.s:3576   .text:0000000000004774 $t
             forth.s:3612   .text:00000000000047eb $d
             forth.s:3612   .text:00000000000047ec $t
             forth.s:3627   .text:000000000000481d $d
             forth.s:3627   .text:000000000000481e $t
             forth.s:3672   .text:0000000000004895 $d
             forth.s:3672   .text:0000000000004896 $t
             forth.s:3748   .text:000000000000499f $d
             forth.s:3748   .text:00000000000049a0 $t
             forth.s:3971   .text:0000000000004baf $d
             forth.s:3971   .text:0000000000004bb0 $t
             forth.s:3990   .text:0000000000004bf5 $d
             forth.s:3990   .text:0000000000004bf6 $t
             forth.s:4027   .text:0000000000004c4f $d
             forth.s:4027   .text:0000000000004c50 $t
             forth.s:4102   .text:0000000000004d71 $d
             forth.s:4102   .text:0000000000004d72 $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
