ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ BCHAR, NBASE+4   // display base character flag 
  81              	  .equ TMP, BCHAR+4   // temporary variable
  82              	  .equ CSPAN, TMP+4  // character count received by expect  
  83              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  84              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  85              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  86              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  87              	  .equ VHOLD, EVAL+4   // hold pointer 
  88              	  .equ CTXT, VHOLD+4  // context pointer 
  89              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  90              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  91              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  92              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  93              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  94              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  95              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  96              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  97              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  98              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  99              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 100              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 101              	  .equ KBD_QUEUE_SIZE, 16 
 102              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 103              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 104              	  .equ KBD_QTAIL,KBD_QHEAD+4
 105              	  .equ ROW,KBD_QTAIL+4 
 106              	  .equ COL,ROW+4 
 107              	  .equ BK_COLOR,COL+4 
ARM GAS  forth.s 			page 10


 108              	  .equ PEN_COLOR,BK_COLOR+4
 109              	  .equ VFPSW, PEN_COLOR+4 
 110              	  .equ VFBASE, VFPSW+4 
 111              	  .equ TONE_DTMR, VFBASE+4 // tone duration timer 
 112              	
 113              	/***********************************************
 114              	* MACROS
 115              	*	Assemble inline direct threaded code ending.
 116              	***********************************************/
 117              		.macro _CALL fn /* low level routine call */ 
 118              	 	PUSH {LR}
 119              		BL \fn  
 120              		POP {LR}
 121              		.endm
 122              		
 123              		.macro _RET /* exit sub-routine */ 
 124              		BX LR 
 125              		.endm 
 126              	
 127              		// dictionary header  
 128              		.macro _HEADER  label, nlen, name
 129              			.word LINK 
 130              			.equ LINK , . 
 131              		_\label: .byte \nlen    // name field
 132              			.ascii "\name"
 133              			.p2align 2 
 134              		\label:   // code field 
 135              		.endm 
 136              		
 137              	
 138              	// local function header 
 139              		.macro _FUNC label 
 140              		.section .text, "ax", %progbits 
 141              		.p2align 2 
 142              		.type \label, %function  
 143              		\label:
 144              		.endm 
 145              	
 146              	// global function header 
 147              		.macro _GBL_FUNC label 
 148              		.global \label 
 149              		_FUNC \label 
 150              		.endm 
 151              	
 152              	
 153              	// load large constant to register 
 154              		.macro _MOV32 r, value 
 155              		mov \r,#(\value&0xffff)
 156              		movt \r,#(\value>>16)
 157              		.endm 
 158              	
 159              		.macro _NEXT /* direct jump INEXT */ 
 160              		B INEXT   
 161              		.endm 
 162              	
 163              	 	.macro	_NEST /*start high level word */
 164              		BX INX  
ARM GAS  forth.s 			page 11


 165              		NOP.N 
 166              		.endm
 167              	
 168              		.macro _ADR label 
 169              		.word 1+\label  
 170              		.endm 
 171              	
 172              	 	.macro	_UNNEST	/*end high level word */
 173              		_ADR UNNEST 
 174              		.endm
 175              	
 176              	 	.macro	_DOLIT u /*long literals */
 177              		_ADR	DOLIT
 178              		.word	\u 
 179              		.endm
 180              	
 181              		.macro _DOTQP len, text 
 182              		_ADR DOTQP 
 183              		.byte \len 
 184              		.ascii "\text" 
 185              		.p2align 2 
 186              		.endm
 187              	
 188              		.macro _COMPI name 
 189              		_DOLIT \name 
 190              		_ADR CALLC 
 191              		.endm 
 192              	
 193              		.macro _ABORQ len,name 
 194              		_ADR ABORQ 
 195              		.byte \len 
 196              		.ascii "\name"
 197              		.p2align 2 
 198              		.endm
 199              	
 200              		.macro _BRAN label 
 201              		_ADR BRAN 
 202              		.word \label 
 203              		.endm 
 204              	
 205              		.macro _QBRAN label 
 206              		_ADR QBRAN 
 207              		.word \label
 208              		.endm 
 209              	
 210              		.macro _TBRAN label 
 211              		_ADR TBRAN 
 212              		.word \label 
 213              		.endm 
 214              	
 215              		.macro _DONXT label 
 216              		_ADR DONXT
 217              		.word \label 
 218              		.endm 
 219              	
 220              	 	.macro	_PUSH	/*push TOS on data stack*/
 221              		STR	TOS,[DSP,#-4]!
ARM GAS  forth.s 			page 12


 222              		.endm
 223              	
 224              	 	.macro	_POP /*pop data stack to TOS */
 225              		LDR	TOS,[DSP],#4
 226              		.endm
 227              	
 228              		// calling a colon word 
 229              		// from a code word   
 230              		.macro _CALL_COLWORD target 
 231              	    ldr WP,=\target 
 232              		orr WP,#1
 233              		b \target  
 234              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
ARM GAS  forth.s 			page 13


  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
ARM GAS  forth.s 			page 14


 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF810C9 	  ldr IP,=dh
 159 000e 02F061BE 	  b INEXT  
 160              	dh:
 161 0012 0D4B0000 	  _ADR PRESE
 162 0016 11410000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 252D0000 	  _ADR CFSR 
 164 0038 95300000 	  _ADR DUPP
 165 003c 11300000 	  _ADR TOR 
 166 0040 072F0000 	  _DOLIT 16 
 166      10000000 
 167 0048 A1350000 	  _ADR BASE 
 168 004c 8D2F0000 	  _ADR STORE 
 169 0050 0D420000 	  _ADR UDOT 
 170 0054 11410000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 CD2F0000 	  _ADR RFROM
 172 0068 072F0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 D9300000 	  _ADR ANDD
ARM GAS  forth.s 			page 15


 174 0074 472F0000 	  _QBRAN 1f
 174      94000000 
 175 007c 492D0000 	  _ADR BFAR
 176 0080 072F0000 	  _DOLIT ','
 176      2C000000 
 177 0088 A52D0000 	  _ADR EMIT 
 178 008c 21400000 	  _ADR SPACE 
 179 0090 0D420000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 11410000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 49200000 	  _ADR FPSCR
 184 00a8 0D420000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF85CC8 	  ldr IP,=fpu_except
 202 00c4 02F006BE 	  b INEXT 
 203              	fpu_except:  
 204 00c8 A9400000 	  _ADR CR 
 205 00cc A1350000 	  _ADR BASE 
 206 00d0 A12F0000 	  _ADR AT 
 207 00d4 11300000 	  _ADR TOR  
 208 00d8 072F0000 	  _DOLIT 16 
 208      10000000 
 209 00e0 A1350000 	  _ADR BASE 
 210 00e4 8D2F0000 	  _ADR STORE
 211 00e8 072F0000 	  _DOLIT 4 
 211      04000000 
 212 00f0 69310000 	  _ADR SUBB  
 213 00f4 11410000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 41420000 	  _ADR DOT 
 215 0104 11410000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 49200000 	  _ADR FPSCR 
 217 0124 95300000 	  _ADR DUPP 
ARM GAS  forth.s 			page 16


 218 0128 41420000 	  _ADR DOT
 219 012c 69320000 	  _ADR QDUP 
 220 0130 472F0000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 072F0000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 A52D0000 	  _ADR EMIT 
 223 0144 072F0000 	  _DOLIT ' ' 
 223      20000000 
 224 014c A52D0000 	  _ADR EMIT
 225 0150 95300000 	  _ADR DUPP 
 226 0154 072F0000 	  _DOLIT 0x10 
 226      10000000 
 227 015c D9300000 	  _ADR ANDD
 228 0160 69320000 	  _ADR QDUP  
 229 0164 472F0000 	  _QBRAN 1f 
 229      84010000 
 230 016c 072F0000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 59310000 	  _ADR PLUS 
 232 0178 A12F0000 	  _ADR AT 
 233 017c ED340000 	  _ADR COUNT 
 234 0180 75400000 	  _ADR TYPEE
 235 0184 072F0000 	1: _DOLIT 15 
 235      0F000000 
 236 018c D9300000 	  _ADR ANDD
 237 0190 9D330000 	  _ADR CLZ 
 238 0194 072F0000 	  _DOLIT 31 
 238      1F000000 
 239 019c A5300000 	  _ADR SWAP 
 240 01a0 69310000 	  _ADR SUBB 
 241 01a4 072F0000 	  _DOLIT 2 
 241      02000000 
 242 01ac 49310000 	  _ADR LSHIFT 
 243 01b0 072F0000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 59310000 	  _ADR PLUS 
 245 01bc A12F0000 	  _ADR AT 
 246 01c0 ED340000 	  _ADR COUNT 
 247 01c4 75400000 	  _ADR TYPEE 
 248 01c8 A9400000 	2: _ADR CR 
 249 01cc 072F0000 	  _DOLIT 0
 249      00000000 
 250 01d4 69200000 	  _ADR CLR_FPSCR 
 251 01d8 CD2F0000 	  _ADR RFROM  
 252 01dc A1350000 	  _ADR BASE 
 253 01e0 8D2F0000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF838C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
ARM GAS  forth.s 			page 17


 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
ARM GAS  forth.s 			page 18


 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C0C6 	  ldr IP,=nmi_hl 
 306 0268 02F034BD 	  b  INEXT
 307              	nmi_hl:
 308 026c 0D4B0000 	  _ADR PRESE 
 309 0270 A9400000 	  _ADR CR 
 310 0274 11410000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 A9400000 	  _ADR CR 
 312 0298 85490000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF884C6 	  ldr IP,=hardfault_hl 
 326 02aa 02F013BD 	  b INEXT
 327              	hardfault_hl:
 328 02ae 0D4B0000 	  _ADR PRESE
 329 02b2 A9400000 	  _ADR CR  
 330 02b6 11410000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 A9400000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF84CC6 	  ldr IP,=memfault_hl 
 345 02e6 02F0F5BC 	  b INEXT 
 346              	memfault_hl: 
 347 02ea 0D4B0000 	  _ADR PRESE
 348 02ee A9400000 	  _ADR CR  
 349 02f2 11410000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
ARM GAS  forth.s 			page 19


 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 072F0000 	  _DOLIT 16 
 350      10000000 
 351 0320 A1350000 	  _ADR BASE 
 352 0324 8D2F0000 	  _ADR STORE   
 353 0328 252D0000 	  _ADR CFSR
 354 032c 072F0000 	  _DOLIT 255 
 354      FF000000 
 355 0334 D9300000 	  _ADR ANDD 
 356 0338 0D420000 	  _ADR UDOT 
 357 033c A9400000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8E4C5 	  ldr IP,=busfault_hl 
 372 0352 02F0BFBC 	  b INEXT 
 373              	busfault_hl:
 374 0356 0D4B0000 	  _ADR PRESE
 375 035a 072F0000 	  _DOLIT 1 
 375      01000000 
 376 0362 712E0000 	  _ADR ULED 
 377 0366 072F0000 	  _DOLIT  100 
 377      64000000 
 378 036e 59350000 	  _ADR MSEC 
 379 0372 492D0000 	  _ADR BFAR 
 380 0376 252D0000 	  _ADR CFSR 
 381 037a A9400000 	  _ADR CR  
 382 037e 11410000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 072F0000 	  _DOLIT 16 
 383      10000000 
 384 03a8 A1350000 	  _ADR BASE 
 385 03ac 8D2F0000 	  _ADR STORE   
 386 03b0 072F0000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 D9300000 	  _ADR ANDD   
 388 03bc 0D420000 	  _ADR UDOT 
 389 03c0 11410000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
ARM GAS  forth.s 			page 20


 390 03cc 0D420000 	  _ADR UDOT 
 391 03d0 A9400000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF854C5 	  ldr IP,=usagefault_hl
 405 03e6 02F075BC 	  b INEXT 
 406              	usagefault_hl:
 407 03ea 0D4B0000 	  _ADR PRESE
 408 03ee A9400000 	  _ADR CR  
 409 03f2 11410000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 072F0000 	  _DOLIT 16 
 410      10000000 
 411 0418 A1350000 	  _ADR BASE 
 412 041c 8D2F0000 	  _ADR STORE   
 413 0420 252D0000 	  _ADR CFSR
 414 0424 072F0000 	  _DOLIT 16 
 414      10000000 
 415 042c 31310000 	  _ADR RSHIFT 
 416 0430 0D420000 	  _ADR UDOT 
 417 0434 A9400000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8AC00 	    ldr r0,[r3,#TONE_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
ARM GAS  forth.s 			page 21


 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8AC00 	  ldr r0,[r3,#TONE_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8AC00 	  str r0,[r3,#TONE_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF898C4 	  ldr IP,=ur
 474 04a4 02F016BC 	  b INEXT  
 475              	ur:
 476 04a8 0D4B0000 	  _ADR PRESE
 477 04ac A9400000 	  _ADR CR   
 478 04b0 072F0000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 ED340000 		_ADR COUNT 
 480 04bc 75400000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
ARM GAS  forth.s 			page 22


 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F063FD 	  bl  fpu_init 
 518 0524 00F027FA 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F020FB 	  bl  flash_spi_init   
 522 0534 05F034BA 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF68067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF47F48 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8ECA3 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
ARM GAS  forth.s 			page 23


 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
ARM GAS  forth.s 			page 24


 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
ARM GAS  forth.s 			page 25


 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A449     		ldr r1,=UZERO 
 674 06b2 4FF0B802 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
ARM GAS  forth.s 			page 26


 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
ARM GAS  forth.s 			page 27


 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
ARM GAS  forth.s 			page 28


 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
ARM GAS  forth.s 			page 29


 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 B0580000 		.word HI_BOTH  /*'BOOT */
 874 0878 5C180000 		.word PS2_QKEY /* query for character */
 875 087c 24110000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 80FE0120 		.word TIBB	/*TIBU */
 883 089c E4490000 		.word INTER	/*'EVAL */
 884 08a0 00000000 		.word 0			/*HLD */
 885 08a4 98590000 		.word _LASTN	/*CONTEXT */
 886 08a8 045A0000 		.word CTOP  	/* FCP end of system dictionnary */
 887 08ac A0510020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 888 08b0 98590000 		.word _LASTN	/*LAST word in dictionary */
 889 08b4 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 889      00000000 
 889      00000000 
 889      00000000 
 890 08c4 00000000 		.word 0  /* RX_HEAD */
 891 08c8 00000000 		.word 0  /* RX_TAIL */ 
 892 08cc 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 893 08d0 00000000 		.word 0  /* VID_STATE, video state */  
 894 08d4 00000000 	    .word 0  /* VID_FIELD, field */
 895 08d8 80800120 		.word VID_BUFF /* video_buffer address */ 
 896 08dc 00000000 	    .word 0 /* kbd struct */
 897 08e0 00000000 		.space KBD_QUEUE_SIZE,0  
 897      00000000 
 897      00000000 
 897      00000000 
 898 08f0 00000000 		.word 0  /* kbd queue head */
 899 08f4 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 30


 900 08f8 00000000 	    .word 0 /* tv cursor row */
 901 08fc 00000000 	    .word 0 /* tv cursor column */ 
 902 0900 00000000 	    .word 0 /* tv back color */
 903 0904 07000000 	    .word 7 /* tv font color */
 904 0908 00000000 	    .word 0 /* FPSW */
 905 090c 00000000 	    .word 0 /* FBASE */ 
 906 0910 00000000 	    .word 0 /* TONE_DTMR */ 
 907 0914 00000000 	    .word 0,0 
 907      00000000 
 908              	ULAST:
 909              	
 910              	// used by _HEADER macro 
 911              	// to link names field
 912              	// in dictionary  
 913 091c 12000000 	    .equ LINK, 0 
 913      C8000000 
 913      2C4B0000 
 913      6C020000 
 913      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0948 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0950 1868     		ldr r0,[r3,#USART_SR]
ARM GAS  forth.s 			page 31


  38 0952 5968     		ldr r1,[r3,#USART_DR]
  39 0954 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0958 0CD0     		beq 2f // no char received 
  41 095a B1F1030F 		cmp r1,#VK_CTRL_C 
  42 095e 3FF49AAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0962 04F15000 		add r0,UP,#RX_QUEUE
  44 0966 626E     		ldr r2,[UP,#RX_TAIL]
  45 0968 8154     		strb r1,[r0,r2]
  46 096a 02F10102 		add r2,#1 
  47 096e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0972 6266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0974 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0976 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 097e 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0980 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0984 01EA0201 	  and r1,r1,r2
  62 0988 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 098c 41EA0201 	  orr r1,r1,r2 
  64 0990 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0992 4FF4EE61 	  mov r1,#0x77<<4 
  67 0996 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0998 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 09a0 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 09a4 8160     	  str r1,[r0,#USART_BRR]
  73 09a6 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 09aa C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 09ac 4FF02500 	  mov r0,#USART1_IRQ 
  77 09b0 4FF00701 	  mov r1,#7
  78 09b4 00B5FFF7 	  _CALL nvic_set_priority
  78      97FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 09be 4FF02500 	  mov r0,#USART1_IRQ 
  81 09c2 00B5FFF7 	  _CALL nvic_enable_irq  
  81      A9FE5DF8 
  81      04EB
  82 09cc 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
ARM GAS  forth.s 			page 32


  89              	************************************************************/
  90 09ce 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 09dc 47F8046D 		_PUSH
  92 09e0 606E     		ldr T0,[UP,#RX_TAIL] 
  93 09e2 216E     		ldr T1,[UP,#RX_HEAD]
  94 09e4 90EA0106 		eors TOS,T0,T1 
  95 09e8 0CD0     		beq 1f
  96 09ea 04F15000 		add T0,UP,#RX_QUEUE 
  97 09ee 0844     		add T0,T1 
  98 09f0 0678     		ldrb TOS,[T0]
  99 09f2 01F10101 		add T1,#1 
 100 09f6 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 09fa 2166     		str T1,[UP,#RX_HEAD]
 102 09fc 47F8046D 		_PUSH 
 103 0a00 4FF0FF36 		mov TOS,#-1
 104 0a04 02F066B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0a08 D2090000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0a18 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0a20 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0a22 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0a26 FBD0     		beq 1b 
 115 0a28 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0a2a 57F8046B 		_POP
 117 0a2e 02F051B9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0a32 0C0A0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0a3c 47F8046D 	        _PUSH 
 126 0a40 4FF00006 	        mov TOS,#0
 127 0a44 02F046B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0a48 360A0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0a54 47F8046D 	        _PUSH 
ARM GAS  forth.s 			page 33


 135 0a58 4FF00106 	        mov TOS,#1
 136 0a5c 02F03AB9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0a60 4C0A0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0a6c 3046     	        mov T0,TOS
 144 0a6e 57F8046B 	        _POP 
 145 0a72 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0a74 4B48     	        ldr T0,=SER_QKEY 
 148 0a76 6061     	        str T0,[UP,#STDIN]
 149 0a78 4B48     	        ldr T0,=SER_EMIT
 150 0a7a A061     	        str T0,[UP,#STDOUT]
 151 0a7c 02F02AB9 	        _NEXT 
 152              	4: // local console 
 153 0a80 4A48     	        ldr T0,=PS2_QKEY
 154 0a82 6061     	        str T0,[UP,#STDIN]
 155 0a84 4A48     	        ldr T0,=TV_EMIT
 156 0a86 A061     	        str T0,[UP,#STDOUT]
 157 0a88 02F024B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0a8c 640A0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0a9c 504700BF 	      _NEST 
 166 0aa0 072F0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0aa8 B5310000 	1:    _ADR ONEP  // c+1
 168 0aac 11300000 	      _ADR TOR   
 169 0ab0 072F0000 	      _DOLIT 10 
 169      0A000000 
 170 0ab8 E9380000 	      _ADR SLMOD // r q  
 171 0abc 69320000 	      _ADR QDUP  // r q q | r 0  
 172 0ac0 472F0000 	      _QBRAN 2f  // r 0 
 172      D40A0000 
 173 0ac8 CD2F0000 	      _ADR RFROM // r q c 
 174 0acc 6F2F0000 	      _BRAN 1b
 174      A80A0000 
 175 0ad4 072F0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0adc 59310000 	      _ADR PLUS 
 177 0ae0 A52D0000 	      _ADR EMIT 
 178 0ae4 CD2F0000 	      _ADR RFROM 
 179 0ae8 69320000 	      _ADR QDUP 
 180 0aec 472F0000 	      _QBRAN 3f
 180      040B0000 
ARM GAS  forth.s 			page 34


 181 0af4 C5310000 	      _ADR ONEM 
 182 0af8 11300000 	      _ADR TOR 
 183 0afc 6F2F0000 	      _BRAN 2b 
 183      D40A0000 
 184              	3:    
 185 0b04 DB2C0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0b08 900A0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0b14 504700BF 	      _NEST 
 193 0b18 072F0000 	      _DOLIT 27 
 193      1B000000 
 194 0b20 A52D0000 	      _ADR EMIT 
 195 0b24 072F0000 	      _DOLIT '['
 195      5B000000 
 196 0b2c A52D0000 	      _ADR EMIT 
 197 0b30 DB2C0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0b34 0C0B0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0b40 504700BF 	      _NEST
 205 0b44 150B0000 	      _ADR ANSI_ESC
 206 0b48 A5300000 	      _ADR SWAP 
 207 0b4c 9D0A0000 	      _ADR ANSI_PARAM 
 208 0b50 072F0000 	      _DOLIT ';'
 208      3B000000 
 209 0b58 A52D0000 	      _ADR EMIT
 210 0b5c 9D0A0000 	      _ADR ANSI_PARAM
 211 0b60 072F0000 	      _DOLIT 'H'
 211      48000000 
 212 0b68 A52D0000 	      _ADR EMIT 
 213 0b6c DB2C0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0b70 380B0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0b7c 504700BF 	    _NEST
 221 0b80 072F0000 	    _DOLIT 1 
 221      01000000 
 222 0b88 95300000 	    _ADR DUPP 
 223 0b8c 410B0000 	    _ADR SER_AT  
 224 0b90 150B0000 	    _ADR ANSI_ESC
 225 0b94 072F0000 	    _DOLIT 'J'
ARM GAS  forth.s 			page 35


 225      4A000000 
 226 0b9c A52D0000 	    _ADR EMIT 
 227 0ba0 DB2C0000 	    _UNNEST 
 228 0ba4 DC090000 	
 228      180A0000 
 228      5C180000 
 228      24110000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
ARM GAS  forth.s 			page 36


  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0bb4 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0bbc 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0bbe 4FF00002 	  _MOV32 r2,0x55000000
ARM GAS  forth.s 			page 37


  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0bc6 41EA0201 	  orr r1,r2
  82 0bca 0160     	  str r1,[r0,#GPIO_MODER]
  83 0bcc 81EA0101 	  eor r1,r1 
  84 0bd0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0bd2 4FF00101 	  mov r1,#1 // pin 1 
  88 0bd6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0bda 00B5FFF7 	  _CALL gpio_config 
  89      E0FD5DF8 
  89      04EB
  90 0be4 4FF00101 	  mov r1,#1 
  91 0be8 4FF00202 	  mov r2,#2
  92 0bec 00B5FFF7 	  _CALL gpio_speed 
  92      16FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0bf6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0bf8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0bfc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0bfe 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0c06 4FF00200 	  mov r0,#2 
 100 0c0a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0c0c 41EA0001 	  orr r1,r0 
 102 0c10 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0c12 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0c1a 41F2D470 	  mov r0,#HPER
 106 0c1e D062     	  str r0,[r2,#TIM_ARR]
 107 0c20 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0c24 D063     	  str r0,[r2,#TIM_CCR3]
 109 0c26 4FF4E170 	  mov r0,#HPULSE 
 110 0c2a 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0c2c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0c30 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0c32 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0c36 1062     	  str r0,[r2,#TIM_CCER]
 115 0c38 4FF00100 	  mov r0,#1 
 116 0c3c D060     	  str r0,[r2,#TIM_DIER]
 117 0c3e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0c40 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0c44 4FF00201 	  mov r1,#2
 121 0c48 00B5FFF7 	  _CALL nvic_set_priority
 121      4DFD5DF8 
 121      04EB
 122 0c52 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0c56 00B5FFF7 	  _CALL nvic_enable_irq
 123      5FFD5DF8 
 123      04EB
 124 0c60 7047     	  _RET
ARM GAS  forth.s 			page 38


 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0c62 00BF     	  _GBL_FUNC tv_out_isr
 132 0c64 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0c6c 81EA0101 	  eor T1,T1
 134 0c70 0161     	  str T1,[T0,#TIM_SR]
 135 0c72 A16E     	  ldr T1,[UP,#VID_CNTR]
 136 0c74 01F10101 	  add T1,#1 
 137 0c78 A166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0c7a E26E     	  ldr T2,[UP,#VID_STATE]
 140 0c7c 002A     	  cmp T2,#ST_VSYNC 
 141 0c7e 07D0     	  beq state_vsync
 142 0c80 012A     	  cmp T2,#ST_PREVID 
 143 0c82 2FD0     	  beq state_pre_video 
 144 0c84 022A     	  cmp T2,#ST_VIDEO 
 145 0c86 36D0     	  beq state_video_out 
 146 0c88 032A     	  cmp T2,#ST_POSTVID 
 147 0c8a 63D0     	  beq state_post_video
 148 0c8c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0c90 0129     	  cmp T1,#1
 152 0c92 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0c94 4FF0DB01 	  mov T1,#SERRATION
 155 0c98 0164     	  str T1,[T0,#TIM_CCR4]
 156 0c9a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0c9e C162     	  str T1,[T0,#TIM_ARR]
 158 0ca0 6BE0     	  b tv_isr_exit 
 159 0ca2 0729     	1: cmp T1,#7
 160 0ca4 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0ca6 40F62821 	  mov T1,#VSYNC_PULSE
 163 0caa 0164     	  str T1,[T0,#TIM_CCR4]
 164 0cac 65E0     	  b tv_isr_exit
 165 0cae 0D29     	2: cmp T1,#13
 166 0cb0 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0cb2 4FF0DB01 	   mov T1,#SERRATION 
 169 0cb6 0164     	   str T1,[T0,#TIM_CCR4]
 170 0cb8 5FE0     	   b tv_isr_exit   
 171 0cba 1229     	3: cmp T1,#18
 172 0cbc 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0cbe 216F     	   ldr T1,[UP,#VID_FIELD]
 175 0cc0 0029     	   cmp T1,#ODD_FIELD  
 176 0cc2 5AD0     	   beq tv_isr_exit 
 177 0cc4 01E0     	   b sync_end 
 178 0cc6 1329     	4: cmp T1,#19 
 179 0cc8 57D1     	   bne tv_isr_exit
 180              	sync_end: 
ARM GAS  forth.s 			page 39


 181 0cca 4FF00901 	   mov T1,#9
 182 0cce A166     	   str T1,[UP,#VID_CNTR]
 183 0cd0 4FF4E171 	   mov T1,#HPULSE 
 184 0cd4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0cd6 41F2D471 	   mov T1,#HPER 
 186 0cda C162     	   str T1,[T0,#TIM_ARR] 
 187 0cdc 4FF00101 	   mov T1,#ST_PREVID 
 188 0ce0 E166     	   str T1,[UP,#VID_STATE]
 189 0ce2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ce4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ce6 48D4     	   bmi tv_isr_exit 
 194 0ce8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0cec E166     	   str T1,[UP,#VID_STATE]
 196 0cee 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0cf2 C160     	   str T1,[T0,#TIM_DIER]
 198 0cf4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0cf6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0cf8 06D9     	   bls 1f 
 205 0cfa 4FF00301 	   mov T1,#ST_POSTVID 
 206 0cfe E166     	   str T1,[UP,#VID_STATE]
 207 0d00 4FF00101 	   mov T1,#1 
 208 0d04 C160     	   str T1,[T0,#TIM_DIER]
 209 0d06 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0d08 606F     	   ldr T0,[UP,#VID_BUFFER]
 212 0d0a A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0d0e 4FF0A003 	   mov T3,#160
 214 0d12 03FB01F1 	   mul T1,T3 
 215 0d16 0844     	   add T0,T1  
 216 0d18 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0d20 10F8012B 	2: ldrb T2,[T0],#1 
 222 0d24 4FEA0222 	   lsl T2,#8 
 223 0d28 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0d2a AFF30080 	   nop.w 
 225 0d2e AFF30080 	   nop.w
 226 0d32 AFF30080 	   nop.w 
 227 0d36 AFF30080 	   nop.w 
 228 0d3a 4FEA0212 	   lsl T2,#4  
 229 0d3e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0d40 AFF30080 	   nop.w
 231 0d44 AFF30080 	   nop.w  
 232 0d48 013B     	   subs T3,#1
 233 0d4a E9D1     	   bne 2b  
 234 0d4c 4FF47022 	   mov T2,#(15<<16) 
 235 0d50 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0d52 12E0     	   b tv_isr_exit 
ARM GAS  forth.s 			page 40


 237              	state_post_video:
 238 0d54 4FF48372 	   mov T2,#262
 239 0d58 9142     	   cmp T1,T2
 240 0d5a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0d5c 216F     	   ldr T1,[UP,VID_FIELD]
 243 0d5e 11B9     	   cbnz T1, frame_end 
 244 0d60 40F6E931 	   mov T1,#SYNC_LINE
 245 0d64 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0d66 4FF00001 	   mov T1,#ST_VSYNC 
 248 0d6a E166     	   str T1,[UP,#VID_STATE]
 249 0d6c 81EA0101 	   eor T1,T1 
 250 0d70 A166     	   str T1,[UP,#VID_CNTR]
 251 0d72 216F     	   ldr T1,[UP,#VID_FIELD]
 252 0d74 6FEA0101 	   mvn T1,T1  
 253 0d78 2167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0d7a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0d7c 740B0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0d8c 47F8046D 		_PUSH 
 266 0d90 04F19C06 		ADD TOS,UP,#BK_COLOR
 267 0d94 01F09EBF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0d98 800D0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0da8 47F8046D 		_PUSH 
 273 0dac 04F1A006 		ADD TOS,UP,#PEN_COLOR
 274 0db0 01F090BF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0db4 9C0D0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0dc0 47F8046D 	  _PUSH 
 280 0dc4 04F19806 	  ADD TOS,UP,#COL 
 281 0dc8 01F084BF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0dcc B80D0000 	  _HEADER CURSOR_ROW,3,"ROW"
ARM GAS  forth.s 			page 41


 285      03524F57 
 286 0dd4 47F8046D 	  _PUSH 
 287 0dd8 04F19406 	  ADD TOS,UP,#ROW 
 288 0ddc 01F07ABF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0de0 D00D0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0dec 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0df0 00FB06F6 	  mul TOS,T0 
 295 0df4 01F06EBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0df8 E40D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0e04 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0e08 00FB06F6 	  mul TOS,T0 
 302 0e0c 01F062BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0e10 FC0D0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0e1c 47F8046D 	  _PUSH 
 308 0e20 DFF88C65 	  ldr TOS,=font_6x8 
 309 0e24 01F056BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0e28 140E0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0e34 47F8046D 	  _PUSH 
 315 0e38 666F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0e3a 01F04BBF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0e3e 2C0E0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0e48 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0e4a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0e4e 02FB00F0 	    mul T0,T2 
 330 0e52 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0e56 1044     	    add T0,T2 
ARM GAS  forth.s 			page 42


 332 0e58 636F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0e5a 0344     	    add T3,T0 // T3 -> byte address 
 334 0e5c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0e5e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0e62 11F0010F 	    tst T1,#1 
 337 0e66 01D0     	    beq 1f 
 338 0e68 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0e6c DFF84405 	1:  ldr T0,=plot_op 
 340 0e70 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0e74 05EA0205 	    and WP,T2 // mask out nibble 
 343 0e78 94F89C00 	    ldrb T0,[UP,#BK_COLOR]
 344 0e7c 11F0010F 	    tst T1,#1 
 345 0e80 01D1     	    bne 1f 
 346 0e82 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0e86 45EA0005 	1:  orr WP,T0  
 348 0e8a 1D70     	    strb WP,[T3]
 349 0e8c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0e8e 05EA0205 	    and WP,T2 
 352 0e92 94F8A000 	    ldrb T0,[UP,#PEN_COLOR]
 353 0e96 11F0010F 	    tst T1,#1
 354 0e9a 01D1     	    bne 1f 
 355 0e9c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0ea0 45EA0005 	1:	orr WP,T0 
 357 0ea4 1D70     	    strb WP,[T3]
 358 0ea6 0DE0     	    b 9f 
 359              	op_invert:
 360 0ea8 85EA0205 	    eor WP,T2 
 361 0eac 1D70     	    strb WP,[T3]
 362 0eae 09E0     	    b 9f 
 363              	op_xor:
 364 0eb0 D4F8A000 	    ldr T0,[UP,#PEN_COLOR]
 365 0eb4 11F0010F 	    tst T1,#1 
 366 0eb8 01D1     	    bne 1f 
 367 0eba 4FEA0010 	    lsl T0,#4 
 368 0ebe 85EA0005 	1:  eor WP,T0 
 369 0ec2 1D70     	    strb WP,[T3]
 370 0ec4 57F8046B 	9:  _POP 
 371 0ec8 01F004BF 	    _NEXT 
 372              	
 373 0ecc 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ed0 420E0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0edc A06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0ede 0028     	    cmp T0,#0
 381 0ee0 FCD1     	    bne 1b
 382 0ee2 01F0F7BE 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0ee6 D40E0000 	    _HEADER CLS,3,"CLS"
ARM GAS  forth.s 			page 43


 386      03434C53 
 386      00BF
 387 0ef0 80EA0000 	    eor T0,T0 
 388 0ef4 94F89C10 	    ldrb T1,[UP,#BK_COLOR]
 389 0ef8 40EA0100 	    orr T0,T1 
 390 0efc 4FEA0111 	    lsl T1,#4 
 391 0f00 40EA0100 	    orr T0,T1 
 392 0f04 4FEA0021 	    lsl T1,T0,#8 
 393 0f08 40EA0100 	    orr T0,T1 
 394 0f0c 4FEA0041 	    lsl T1,T0,#16
 395 0f10 40EA0100 	    orr T0,T1 
 396 0f14 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0f18 626F     	    ldr T2,[UP,#VID_BUFFER]
 398 0f1a 5050     	1:	str T0,[T2,T1]
 399 0f1c 0439     	    subs T1,#4
 400 0f1e FCD1     	    bne 1b
 401 0f20 1060     	    str T0,[T2]
 402 0f22 80EA0000 	    eor T0,T0 
 403 0f26 C4F89400 	    str T0,[UP,#ROW]
 404 0f2a C4F89800 	    str T0,[UP,#COL]
 405 0f2e 01F0D1BE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0f32 EA0E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0f40 504700BF 	  _NEST
 412 0f44 072F0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0f4c 95300000 	  _ADR DUPP  
 414 0f50 11300000 	  _ADR TOR 
 415 0f54 79310000 	  _ADR STAR
 416 0f58 350E0000 	  _ADR VIDBUFF
 417 0f5c 59310000 	  _ADR PLUS
 418 0f60 CD2F0000 	  _ADR RFROM   
 419 0f64 072F0000 	  _DOLIT 0 
 419      00000000 
 420 0f6c 1D3B0000 	  _ADR FILL 
 421 0f70 DB2C0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0f74 360F0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0f84 504700BF 	    _NEST 
 429 0f88 350E0000 	    _ADR VIDBUFF 
 430 0f8c 95300000 	    _ADR DUPP 
 431 0f90 072F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0f98 95300000 	    _ADR DUPP 
ARM GAS  forth.s 			page 44


 433 0f9c 11300000 	    _ADR TOR 
 434 0fa0 59310000 	    _ADR PLUS 
 435 0fa4 A5300000 	    _ADR SWAP 
 436 0fa8 072F0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0fb0 CD2F0000 	    _ADR RFROM  
 438 0fb4 69310000 	    _ADR SUBB 
 439 0fb8 D53A0000 	    _ADR MOVE
 440 0fbc 072F0000 	    _DOLIT 24 
 440      18000000 
 441 0fc4 410F0000 	    _ADR CLRLINE 
 442 0fc8 DB2C0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0fcc 780F0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0fdc 504700BF 	    _NEST 
 450 0fe0 350E0000 	    _ADR VIDBUFF
 451 0fe4 95300000 	    _ADR DUPP 
 452 0fe8 072F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0ff0 59310000 	    _ADR PLUS 
 454 0ff4 072F0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0ffc 072F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 1004 69310000 	    _ADR SUBB  
 457 1008 D53A0000 	    _ADR MOVE
 458 100c 072F0000 	    _DOLIT 0 
 458      00000000 
 459 1014 410F0000 	    _ADR CLRLINE
 460 1018 DB2C0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 101c D00F0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 1028 E34D     	    ldr WP,=SCROLLUP 
 469 102a 45F00105 	    orr WP,#1
 470 102e 80EA0000 	    eor T0,T0 
 471 1032 C4F89800 	    str T0,[UP,#COL]
 472 1036 D4F89400 	    ldr T0,[UP,#ROW]
 473 103a 1828     	    cmp T0,#24 
 474 103c A2D0     	    beq SCROLLUP  
 475 103e 00F10100 	    add T0,#1 
 476 1042 C4F89400 	    str T0,[UP,#ROW]
 477 1046 01F045BE 	    _NEXT 
 478              	
ARM GAS  forth.s 			page 45


 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 104a 20100000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 1054 D4F89800 	  ldr T0,[UP,#COL]
 484 1058 00F10100 	  add T0,#1
 485 105c 3528     	  cmp T0,#53
 486 105e E3D5     	  bpl TV_CRLF  
 487 1060 C4F89800 	  str T0,[UP,#COL]
 488 1064 01F036BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 1068 4E100000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1074 D4F89800 	    ldr T0,[UP,#COL]
 497 1078 28B1     	    cbz T0,1f 
 498 107a A0F10100 	    sub T0,#1 
 499 107e C4F89800 	    str T0,[UP,#COL]
 500 1082 01F027BE 	    _NEXT 
 501 1086 D4F89400 	1:  ldr T0,[UP,#ROW]
 502 108a 38B1     	    cbz T0,9f
 503 108c A0F10100 	    sub T0,#1
 504 1090 C4F89400 	    str T0,[UP,#ROW]
 505 1094 4FF03400 	    mov T0,#52 
 506 1098 C4F89800 	    str T0,[UP,#COL]
 507 109c 01F01ABE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 10a0 4FF08000 	    mov T0,#128 
 513 10a4 06EA0006 	    and TOS,T0 
 514 10a8 4FEAD616 	    lsr TOS,#7
 515 10ac 01F012BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 10b0 3868     	  ldr T0,[DSP]
 520 10b2 00F10100 	  add T0,#1 
 521 10b6 3860     	  str T0,[DSP]
 522 10b8 01F00CBE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 10bc 4FEA4606 	    lsl TOS,#1
 527 10c0 01F008BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
ARM GAS  forth.s 			page 46


 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 10c4 504700BF 	    _NEST 
 536 10c8 072F0000 	    _DOLIT 5 
 536      05000000 
 537 10d0 11300000 	    _ADR TOR 
 538 10d4 11300000 	1:  _ADR TOR 
 539 10d8 CD320000 	    _ADR DDUP 
 540 10dc FD2F0000 	    _ADR RAT
 541 10e0 A1100000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 10e4 490E0000 	    _ADR PLOT 
 543 10e8 B1100000 	    _ADR INCR_X 
 544 10ec CD2F0000 	    _ADR RFROM 
 545 10f0 BD100000 	    _ADR NEXT_PIXEL
 546 10f4 292F0000 	    _DONXT 1b
 546      D4100000 
 547 10fc B9320000 	    _ADR TDROP 
 548 1100 DB2C0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 1104 A6F12006 	   sub TOS,#32
 553 1108 4FF00800 	   mov T0,#8 
 554 110c 00FB06F6 	   mul TOS,T0 
 555 1110 A748     	   ldr T0,=font_6x8
 556 1112 0644     	   add TOS,T0 
 557 1114 01F0DEBD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 1118 6C100000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 1124 504700BF 	    _NEST
 565 1128 95300000 	    _ADR DUPP 
 566 112c 072F0000 	    _DOLIT 32 
 566      20000000 
 567 1134 19340000 	    _ADR ULESS
 568 1138 472F0000 	    _QBRAN 1f
 568      48110000 
 569 1140 6F2F0000 	    _BRAN CTRL_KEY
 569      AC110000 
 570 1148 05110000 	1:  _ADR CHAR_FONT 
 571 114c C10D0000 	    _ADR CURSOR_COL 
 572 1150 A12F0000 	    _ADR AT
 573 1154 050E0000 	    _ADR COLX  // x coord 
 574 1158 D50D0000 	    _ADR CURSOR_ROW 
 575 115c A12F0000 	    _ADR AT    
 576 1160 ED0D0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1164 7D320000 	    _ADR ROT  // TEST 
 578 1168 072F0000 	    _DOLIT 7   
 578      07000000 
 579 1170 11300000 	    _ADR TOR  
 580 1174 11300000 	1:  _ADR TOR  // { x y }
ARM GAS  forth.s 			page 47


 581 1178 CD320000 	    _ADR DDUP  // { x y x y }
 582 117c FD2F0000 	    _ADR RAT 
 583 1180 C12F0000 	    _ADR CAT   // { x y x y r }
 584 1184 C5100000 	    _ADR CHAR_ROW 
 585 1188 B5310000 	    _ADR ONEP // {x y' }
 586 118c CD2F0000 	    _ADR RFROM 
 587 1190 B5310000 	    _ADR ONEP // {x y' c-adr' }
 588 1194 292F0000 	    _DONXT 1b
 588      74110000 
 589 119c B9320000 	    _ADR TDROP  
 590 11a0 55100000 	    _ADR RIGHT
 591 11a4 95120000 	9:  _ADR SHOW_CURSOR 
 592 11a8 DB2C0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 11ac 1D130000 	    _ADR HIDE_CURSOR
 595 11b0 95300000 	    _ADR DUPP 
 596 11b4 072F0000 	    _DOLIT BKSPP  
 596      08000000 
 597 11bc E1330000 	    _ADR EQUAL 
 598 11c0 472F0000 	    _QBRAN 1f 
 598      D8110000 
 599 11c8 75120000 	    _ADR BACK_SPACE 
 600 11cc 85300000 	8:  _ADR DROP 
 601 11d0 6F2F0000 	    _BRAN 9b 
 601      A4110000 
 602 11d8 95300000 	1:  _ADR DUPP 
 603 11dc 072F0000 	    _DOLIT CRR 
 603      0D000000 
 604 11e4 E1330000 	    _ADR EQUAL 
 605 11e8 472F0000 	    _QBRAN 1f 
 605      FC110000 
 606 11f0 1D120000 	    _ADR CAR_RET
 607 11f4 6F2F0000 	    _BRAN 8b
 607      CC110000 
 608 11fc 072F0000 	1:  _DOLIT LF 
 608      0A000000 
 609 1204 E1330000 	    _ADR EQUAL 
 610 1208 472F0000 	    _QBRAN 9b 
 610      A4110000 
 611 1210 35120000 	    _ADR LN_FEED
 612 1214 6F2F0000 	    _BRAN 9b  
 612      A4110000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 121c 504700BF 	   _NEST
 620 1220 072F0000 	   _DOLIT 0 
 620      00000000 
 621 1228 C10D0000 	   _ADR CURSOR_COL 
 622 122c 8D2F0000 	   _ADR STORE 
 623 1230 DB2C0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
ARM GAS  forth.s 			page 48


 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1234 504700BF 	    _NEST 
 631 1238 D50D0000 	    _ADR CURSOR_ROW 
 632 123c A12F0000 	    _ADR AT 
 633 1240 95300000 	    _ADR DUPP 
 634 1244 072F0000 	    _DOLIT 24 
 634      18000000 
 635 124c 01310000 	    _ADR XORR 
 636 1250 472F0000 	    _QBRAN 1f
 636      68120000 
 637 1258 B5310000 	    _ADR ONEP 
 638 125c D50D0000 	    _ADR CURSOR_ROW 
 639 1260 8D2F0000 	    _ADR STORE 
 640 1264 DB2C0000 	    _UNNEST    
 641 1268 85300000 	1:  _ADR DROP 
 642 126c 850F0000 	    _ADR SCROLLUP 
 643 1270 DB2C0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1274 504700BF 	  _NEST 
 652 1278 75100000 	  _ADR LEFT 
 653 127c 95120000 	  _ADR SHOW_CURSOR
 654 1280 DB2C0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1284 1C110000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1294 504700BF 	    _NEST 
 663 1298 072F0000 	    _DOLIT 0xFF
 663      FF000000 
 664 12a0 D50D0000 	0:  _ADR CURSOR_ROW
 665 12a4 A12F0000 	    _ADR AT  
 666 12a8 B5310000 	    _ADR ONEP 
 667 12ac ED0D0000 	    _ADR ROWY 
 668 12b0 072F0000 	    _DOLIT BPR
 668      A0000000 
 669 12b8 79310000 	    _ADR STAR
 670 12bc 072F0000 	    _DOLIT BPR  
 670      A0000000 
 671 12c4 69310000 	    _ADR SUBB 
 672 12c8 C10D0000 	    _ADR CURSOR_COL
 673 12cc A12F0000 	    _ADR AT 
 674 12d0 050E0000 	    _ADR COLX 
 675 12d4 59320000 	    _ADR TWOSL  
ARM GAS  forth.s 			page 49


 676 12d8 59310000 	    _ADR PLUS
 677 12dc 350E0000 	    _ADR VIDBUFF
 678 12e0 59310000 	    _ADR PLUS
 679 12e4 072F0000 	    _DOLIT 2
 679      02000000 
 680 12ec 11300000 	    _ADR TOR  
 681 12f0 CD320000 	1:  _ADR DDUP 
 682 12f4 AD2F0000 	    _ADR CSTOR 
 683 12f8 B5310000 	    _ADR ONEP 
 684 12fc 292F0000 	    _DONXT 1b
 684      F0120000 
 685 1304 A5320000 	2:  _ADR DDROP // drop 3 elements 
 686 1308 DB2C0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 130c 88120000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 131c 504700BF 	    _NEST 
 694 1320 8D0D0000 	    _ADR BACKCOLOR 
 695 1324 A12F0000 	    _ADR AT 
 696 1328 95300000 	    _ADR DUPP  
 697 132c 072F0000 	    _DOLIT 4 
 697      04000000 
 698 1334 49310000 	    _ADR LSHIFT 
 699 1338 ED300000 	    _ADR ORR 
 700 133c 6F2F0000 	    _BRAN 0b
 700      A0120000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1344 10130000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1350 352E     	    cmp TOS,#53
 706 1352 01D4     	    bmi 1f 
 707 1354 4FF03406 	    mov TOS,#52
 708 1358 C4F89860 	1:  str TOS,[UP,#COL]
 709 135c 57F8046B 	    _POP
 710 1360 192E     	    cmp TOS,#25
 711 1362 01D4     	    bmi 1f 
 712 1364 4FF01806 	    mov TOS,#24 
 713 1368 C4F89460 	1:  str TOS,[UP,#ROW]
 714 136c 57F8046B 	    _POP 
 715 1370 01F0B0BC 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1374 48130000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1380 504700BF 	    _NEST 
 721 1384 4D3A0000 	    _ADR PAD 
ARM GAS  forth.s 			page 50


 722 1388 95300000 	    _ADR DUPP 
 723 138c B5310000 	    _ADR ONEP 
 724 1390 072F0000 	    _DOLIT 53
 724      35000000 
 725 1398 D1480000 	    _ADR ACCEP
 726 139c A5300000 	    _ADR SWAP 
 727 13a0 85300000 	    _ADR DROP 
 728 13a4 B9300000 	    _ADR OVER 
 729 13a8 AD2F0000 	    _ADR CSTOR  
 730 13ac DB2C0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
ARM GAS  forth.s 			page 51


 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
ARM GAS  forth.s 			page 52


 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
ARM GAS  forth.s 			page 53


 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
ARM GAS  forth.s 			page 54


   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
ARM GAS  forth.s 			page 55


  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
ARM GAS  forth.s 			page 56


  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
ARM GAS  forth.s 			page 57


 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 13bc 1C61     	   .byte 0x1c,'a' 
   9 13be 3262     	   .byte 0x32,'b'
  10 13c0 2163     	   .byte 0x21,'c'
  11 13c2 2364     	   .byte 0x23,'d'
  12 13c4 2465     	   .byte 0x24,'e'
  13 13c6 2B66     	   .byte 0x2b,'f'
  14 13c8 3467     	   .byte 0x34,'g'
  15 13ca 3368     	   .byte 0x33,'h'
  16 13cc 4369     	   .byte 0x43,'i'
  17 13ce 3B6A     	   .byte 0x3B,'j'
  18 13d0 426B     	   .byte 0x42,'k'
  19 13d2 4B6C     	   .byte 0x4b,'l'
  20 13d4 3A6D     	   .byte 0x3a,'m'
  21 13d6 316E     	   .byte 0x31,'n'
  22 13d8 446F     	   .byte 0x44,'o'
  23 13da 4D70     	   .byte 0x4d,'p'
  24 13dc 1571     	   .byte 0x15,'q'
  25 13de 2D72     	   .byte 0x2d,'r'
  26 13e0 1B73     	   .byte 0x1b,'s'
  27 13e2 2C74     	   .byte 0x2c,'t'
  28 13e4 3C75     	   .byte 0x3c,'u'
  29 13e6 2A76     	   .byte 0x2a,'v'
  30 13e8 1D77     	   .byte 0x1d,'w'
  31 13ea 2278     	   .byte 0x22,'x'
  32 13ec 3579     	   .byte 0x35,'y'
  33 13ee 1A7A     	   .byte 0x1a,'z'
  34 13f0 4530     	   .byte 0x45,'0'
  35 13f2 1631     	   .byte 0x16,'1'
  36 13f4 1E32     	   .byte 0x1e,'2'
  37 13f6 2633     	   .byte 0x26,'3'
  38 13f8 2534     	   .byte 0x25,'4'
  39 13fa 2E35     	   .byte 0x2e,'5'
  40 13fc 3636     	   .byte 0x36,'6'
  41 13fe 3D37     	   .byte 0x3d,'7'
  42 1400 3E38     	   .byte 0x3e,'8'
  43 1402 4639     	   .byte 0x46,'9'
  44 1404 0E60     	   .byte 0x0e,'`'
  45 1406 4E2D     	   .byte 0x4e,'-'
  46 1408 553D     	   .byte 0x55,'='
  47 140a 5D5C     	   .byte 0x5d,'\\'
ARM GAS  forth.s 			page 58


  48 140c 545B     	   .byte 0x54,'['
  49 140e 5B5D     	   .byte 0x5b,']'
  50 1410 4C3B     	   .byte 0x4c,';'
  51 1412 5227     	   .byte 0x52,'\''
  52 1414 412C     	   .byte 0x41,','
  53 1416 492E     	   .byte 0x49,'.'
  54 1418 7C2A     	   .byte 0x7c,'*'
  55 141a 792B     	   .byte 0x79,'+'
  56 141c 2920     	   .byte 0x29,' '
  57 141e 5A0D     	   .byte SC_ENTER,CRR 
  58 1420 6608     	   .byte SC_BKSP,BKSPP 
  59 1422 0D09     	   .byte SC_TAB,9
  60 1424 761B     	   .byte SC_ESC,27
  61 1426 119E     	   .byte SC_LALT,VK_LALT 
  62 1428 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 142a 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 142c 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 142e 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1430 5800     	   .byte SC_CAPS,0
  67 1432 0580     	   .byte SC_F1,VK_F1
  68 1434 0681     	   .byte SC_F2,VK_F2
  69 1436 0482     	   .byte SC_F3,VK_F3
  70 1438 0C83     	   .byte SC_F4,VK_F4
  71 143a 0384     	   .byte SC_F5,VK_F5
  72 143c 0B85     	   .byte SC_F6,VK_F6
  73 143e 8386     	   .byte SC_F7,VK_F7
  74 1440 0A87     	   .byte SC_F8,VK_F8
  75 1442 0188     	   .byte SC_F9,VK_F9
  76 1444 098A     	   .byte SC_F10,VK_F10
  77 1446 788B     	   .byte SC_F11,VK_F11
  78 1448 078C     	   .byte SC_F12,VK_F12
  79 144a 7030     	   .byte SC_KP0,'0'
  80 144c 6931     	   .byte SC_KP1,'1'
  81 144e 7232     	   .byte SC_KP2,'2'
  82 1450 7A33     	   .byte SC_KP3,'3'
  83 1452 6B34     	   .byte SC_KP4,'4'
  84 1454 7335     	   .byte SC_KP5,'5'
  85 1456 7436     	   .byte SC_KP6,'6'
  86 1458 6C37     	   .byte SC_KP7,'7'
  87 145a 7538     	   .byte SC_KP8,'8'
  88 145c 7D39     	   .byte SC_KP9,'9'
  89 145e 7C2A     	   .byte SC_KPMUL,'*'
  90 1460 4A2F     	   .byte SC_KPDIV,'/'
  91 1462 792B     	   .byte SC_KPPLUS,'+'
  92 1464 7B2D     	   .byte SC_KPMINUS,'-'
  93 1466 712E     	   .byte SC_KPDOT,'.'
  94 1468 5A0D     	   .byte SC_KPENTER,'\r'
  95 146a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 146c AAAA     	   .byte BAT_OK,BAT_OK  
  97 146e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1470 6141     	   .byte 'a','A'
 102 1472 6242     	   .byte 'b','B'
 103 1474 6343     	   .byte 'c','C'
 104 1476 6444     	   .byte 'd','D'
ARM GAS  forth.s 			page 59


 105 1478 6545     	   .byte 'e','E'
 106 147a 6646     	   .byte 'f','F'
 107 147c 6747     	   .byte 'g','G'
 108 147e 6848     	   .byte 'h','H'
 109 1480 6949     	   .byte 'i','I'
 110 1482 6A4A     	   .byte 'j','J'
 111 1484 6B4B     	   .byte 'k','K'
 112 1486 6C4C     	   .byte 'l','L'
 113 1488 6D4D     	   .byte 'm','M'
 114 148a 6E4E     	   .byte 'n','N'
 115 148c 6F4F     	   .byte 'o','O'
 116 148e 7050     	   .byte 'p','P'
 117 1490 7151     	   .byte 'q','Q'
 118 1492 7252     	   .byte 'r','R'
 119 1494 7353     	   .byte 's','S'
 120 1496 7454     	   .byte 't','T'
 121 1498 7555     	   .byte 'u','U'
 122 149a 7656     	   .byte 'v','V'
 123 149c 7757     	   .byte 'w','W'
 124 149e 7858     	   .byte 'x','X'
 125 14a0 7959     	   .byte 'y','Y'
 126 14a2 7A5A     	   .byte 'z','Z'
 127 14a4 3121     	   .byte '1','!'
 128 14a6 3240     	   .byte '2','@'
 129 14a8 3323     	   .byte '3','#'
 130 14aa 3424     	   .byte '4','$'
 131 14ac 3525     	   .byte '5','%'
 132 14ae 365E     	   .byte '6','^'
 133 14b0 3726     	   .byte '7','&'
 134 14b2 382A     	   .byte '8','*'
 135 14b4 3928     	   .byte '9','('
 136 14b6 3029     	   .byte '0',')'
 137 14b8 2D5F     	   .byte '-','_'
 138 14ba 3D2B     	   .byte '=','+'
 139 14bc 607E     	   .byte '`','~'
 140 14be 2722     	   .byte '\'','"'
 141 14c0 2C3C     	   .byte ',','<'
 142 14c2 2E3E     	   .byte '.','>'
 143 14c4 2F3F     	   .byte '/','?'
 144 14c6 5C7C     	   .byte '\\','|'
 145 14c8 3B3A     	   .byte ';',':'
 146 14ca 5B7B     	   .byte '[','{'
 147 14cc 5D7D     	   .byte ']','}'
 148 14ce 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 14d0 315C     	   .byte '1','\\'
 153 14d2 3240     	   .byte '2','@'
 154 14d4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 14d6 363F     	   .byte '6','?'
 158 14d8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 14da 397B     	   .byte '9','{'
 161 14dc 307D     	   .byte '0','}'
ARM GAS  forth.s 			page 60


 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 14de 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 14e0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 14e2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 14e4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 14e6 11A3     	    .byte SC_RALT,VK_RALT
 172 14e8 2F97     	    .byte SC_APPS,VK_APPS
 173 14ea 758D     	    .byte SC_UP,VK_UP
 174 14ec 728E     	    .byte SC_DOWN,VK_DOWN
 175 14ee 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 14f0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 14f2 7095     	    .byte SC_INSERT,VK_INSERT
 178 14f4 6C91     	    .byte SC_HOME,VK_HOME
 179 14f6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 14f8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 14fa 717F     	    .byte SC_DEL,VK_DELETE
 182 14fc 6992     	    .byte SC_END,VK_END
 183 14fe 4A2F     	    .byte SC_KPDIV,'/'
 184 1500 5A0D     	    .byte SC_KPENTER,'\r'
 185 1502 1200     	    .byte 0x12,0
 186 1504 7C00     	    .byte 0x7c,0
 187 1506 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1508 6303     	   .byte 'c', VK_CTRL_C 
 193 150a 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 150c 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 150e 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1510 11A3     	   .byte SC_RALT,VK_RALT
 197 1512 2F97     	   .byte SC_APPS,VK_APPS
 198 1514 7095     	   .byte SC_INSERT,VK_INSERT
 199 1516 6C91     	   .byte SC_HOME,VK_HOME
 200 1518 7D93     	   .byte SC_PGUP,VK_PGUP
 201 151a 717F     	   .byte SC_DEL,VK_DELETE
 202 151c 6992     	   .byte SC_END,VK_END
 203 151e 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1520 758D     	   .byte SC_UP,VK_UP
 205 1522 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1524 728E     	   .byte SC_DOWN,VK_DOWN
 207 1526 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1528 4A2F     	   .byte SC_KPDIV,'/'
 209 152a 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 152c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 152e 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1530 119E     	   .byte SC_LALT,VK_LALT
 213 1532 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1534 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1536 761B     	   .byte SC_ESC,VK_ESC
 216 1538 779A     	   .byte SC_NUM,VK_NLOCK
 217 153a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 153c 0000     	   .byte 0,0
ARM GAS  forth.s 			page 61


 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 153e 00BF     	    _GBL_FUNC kbd_isr 
  79 1540 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1548 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 154c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 154e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1556 D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
  84 155a 10F0020F 	    tst r0,#KBD_TX 
  85 155e 40F08480 	    bne send_bit  
  86 1562 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1564 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1568 01F10102 	    add r2,r1,#1
  89 156c 84F87820 	    strb r2,[UP,#KBD_BITCNTR]
  90 1570 0029     	    cmp r1,#0
ARM GAS  forth.s 			page 62


  91 1572 15D0     	    beq start_bit 
  92 1574 0929     	    cmp r1,#9 
  93 1576 25D0     	    beq parity_bit 
  94 1578 0A29     	    cmp r1,#10 
  95 157a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 157c 94F87920 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1580 4FEA5202 	    lsr r2,#1 
  99 1584 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1588 07D0     	    beq 1f 
 101 158a 42F08002 	    orr r2,#(1<<7)
 102 158e 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1592 00F10100 	    add r0,#1 
 104 1596 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 105 159a 84F87920 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 159e 63E0     	    b 9f         
 107              	start_bit:
 108 15a0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 15a4 60D1     	    bne 9f // not a start bit 
 110 15a6 80EA0000 	    eor r0,r0 
 111 15aa 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 112 15ae 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 113 15b2 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 15b6 6FF00101 	    mvn r1,#1
 115 15ba 00EA0100 	    and r0,r1 // clear error flag 
 116 15be 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 117 15c2 51E0     	    b 9f 
 118              	parity_bit:
 119 15c4 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 120 15c8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 15cc 4CD0     	    beq 9f  
 122 15ce 01F10101 	    add r1,#1 
 123 15d2 84F87B10 	    strb r1,[UP,#KBD_PARITY]  
 124 15d6 47E0     	    b 9f      
 125              	stop_bit:
 126 15d8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 15dc 40D0     	    beq 8f // error stop bit expected 
 128 15de 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 129 15e2 11F0010F 	    tst r1,#1 
 130 15e6 3BD0     	    beq 8f // error parity
 131 15e8 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 15ec 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 15f0 E028     	    cmp r0,#XT_KEY
 134 15f2 04D1     	    bne 1f
 135 15f4 41F04001 	    orr r1,#KBD_F_XT
 136 15f8 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 137 15fc 30E0     	    b 8f  
 138 15fe 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1602 14D0     	    beq store_code
 140 1604 5828     	    cmp r0,#SC_CAPS
 141 1606 04D1     	    bne 1f
 142 1608 81F00401 	    eor r1,#KBD_F_CAPS
 143 160c 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1610 06E0     	    b 2f 
 145 1612 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
ARM GAS  forth.s 			page 63


 146 161c 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1620 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1624 01EA0201 	    and r1,r2
 149 1628 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 150 162c 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 162e F028     	    cmp r0,#KEY_REL
 154 1630 04D1     	    bne 1f
 155              	// set release flags 
 156 1632 41F08001 	    orr r1,#KBD_F_REL 
 157 1636 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 158 163a 11E0     	    b 8f     
 159 163c 0146     	1:  mov r1,r0 
 160 163e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1648 0AD1     	    bne 8f // was async key 
 162 164a D4F89000 	    ldr r0,[UP,#KBD_QTAIL]
 163 164e 04F17C02 	    add r2,UP,#KBD_QUEUE
 164 1652 1154     	    strb r1,[r2,r0]
 165 1654 00F10100 	    add r0,#1
 166 1658 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 165c 84F89000 	    strb r0,[UP,#KBD_QTAIL]
 168 1660 80EA0000 	8:  eor r0,r0 
 169 1664 A4F87800 	    strh r0,[UP,#KBD_BITCNTR]
 170 1668 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 166a 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 166e 01F10100 	    add r0,r1,#1
 182 1672 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 183 1676 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 167a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 167e 0829     	1:  cmp r1,#8 
 187 1680 15D0     	    beq send_parity 
 188 1682 0929     	    cmp r1,#9 
 189 1684 1CD0     	    beq send_stop
 190 1686 0A29     	    cmp r1,#10
 191 1688 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 168a 10F0010F 	    tst r0,#1
 194 168e 4FEA5000 	    lsr r0,#1
 195 1692 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 196 1696 02D1     	    bne 1f 
 197 1698 4FEA0242 	    lsl r2,#16
 198 169c 05E0     	    b 2f  
 199 169e 94F87B00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 16a2 00F10100 	    add r0,#1 
ARM GAS  forth.s 			page 64


 201 16a6 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 202 16aa 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 16ac 1CE0     	    b 9f 
 204              	send_parity:
 205 16ae 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 206 16b2 10F0010F 	    tst r0,#1
 207 16b6 01D0     	    beq 1f 
 208 16b8 4FEA0242 	    lsl r2,#16
 209 16bc 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 16be 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 16c0 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 16c2 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 16c6 1960     	    str r1,[r3,#GPIO_MODER]
 217 16c8 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 16ca 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 16ce 6FF00201 	    mvn r1,#KBD_TX 
 221 16d2 00EA0100 	    and r0,r1 
 222 16d6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 16d8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 16dc 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 225 16e0 80EA0000 	    eor r0,r0 
 226 16e4 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 227 16e8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 16ea 02B4     	    push {r1}
 238 16ec DFF86414 	    ldr r1,=async_keys
 239 16f0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 16fa 02BC     	    pop {r1}
 241 16fc 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 16fe 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
ARM GAS  forth.s 			page 65


 254      04EB
 255 1708 FF28     	    cmp r0,#255
 256 170a 01D1     	    bne set_async_key 
 257 170c 0020     	    movs r0,#0 
 258 170e 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1710 06B4     	    push {r1,r2}
 262 1712 94F87A20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1716 DFF84014 	    ldr r1,=async_jump 
 264 171a D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 171e 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1722 04E0     	    b set_reset
 268              	ctrl_key:
 269 1724 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1728 01E0     	    b set_reset 
 271              	alt_key:
 272 172a 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 172e 12F0800F 	    tst r2,#KBD_F_REL 
 275 1732 04D0     	    beq 1f 
 276 1734 6FEA0000 	    mvn r0,r0
 277 1738 02EA0002 	    and r2,r0
 278 173c 01E0     	    b 2f
 279 173e 42EA0002 	1:  orr r2,r0 
 280 1742 84F87A20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1746 5FF0FF30 	    movs r0,#-1
 282 174a 06BC     	9:  pop {r1,r2}
 283 174c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 174e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1750 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1752 1401     	    .byte SC_LCTRL,1  // left control 
 290 1754 1401     	    .byte SC_RCTRL,1  // right control 
 291 1756 1102     	    .byte SC_LALT,2  // left alt 
 292 1758 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 175a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 175c 00       	    .byte 0 // shift  key 
 297 175d 03       	    .byte (ctrl_key-shift_key)/2
 298 175e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 175f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1760 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
ARM GAS  forth.s 			page 66


 310 1768 1846     	    mov r0,r3 
 311 176a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 176e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1772 00B5FFF7 	    _CALL gpio_config
 313      14F85DF8 
 313      04EB
 314 177c 1846     	    mov r0,r3 
 315 177e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1782 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1786 00B5FFF7 	    _CALL gpio_config
 317      0AF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1790 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1798 4FF40050 	    mov r0,#(2<<12)
 321 179c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 179e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 17a6 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 17aa 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 17ac D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 17ae 80EA0000 	   eor r0,r0 
 328 17b2 C4F88C00 	   str r0,[UP,#KBD_QHEAD]
 329 17b6 C4F89000 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 17ba 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 17be 4FF00101 	   mov r1,#1 
 333 17c2 00B5FEF7 	   _CALL nvic_set_priority
 333      90FF5DF8 
 333      04EB
 334 17cc 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 17d0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      A2FF5DF8 
 335      04EB
 336 17da 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 17dc 78130000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 17ec 47F8046D 	    _PUSH 
 342 17f0 94F87A60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 17f4 06F0FC06 	    and TOS,#0xFC  
 344 17f8 01F06CBA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 17fc 0EB4     	    push {T1,T2,T3}
 352 17fe 80EA0000 	    eor T0,T0  
 353 1802 04F17C03 	    add T3,UP,#KBD_QUEUE
ARM GAS  forth.s 			page 67


 354 1806 D4F88C10 	    ldr T1,[UP,#KBD_QHEAD]
 355 180a D4F89020 	    ldr T2,[UP,#KBD_QTAIL]
 356 180e 9142     	    cmp T1,T2 
 357 1810 06D0     	    beq 2f  
 358 1812 585C     	    ldrb T0,[T3,T1]
 359 1814 01F10101 	    add T1,#1 
 360 1818 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 181c C4F88C10 	    str T1,[UP,#KBD_QHEAD]
 362 1820 0EBC     	2:  pop {T1,T2,T3}
 363 1822 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1824 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 182e 0000     	    movs T0,T0
 368 1830 F8D0     	    beq wait_code  
 369 1832 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1834 04B4     	    push {T2}
 380 1836 11F8012B 	1:  ldrb T2,[T1],#1
 381 183a 22B1     	    cbz T2,2f 
 382 183c 8242     	    cmp T2,T0
 383 183e 02D0     	    beq 2f 
 384 1840 01F10101 	    add T1,#1 
 385 1844 F7E7     	    b 1b 
 386 1846 0878     	2:  ldrb T0,[T1]
 387 1848 0000     	    movs T0,T0 // set/reset zero flag 
 388 184a 04BC     	9:  pop {T2}
 389 184c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 184e E0170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 185c 47F8046D 	    _PUSH 
 398 1860 86EA0606 	    eor TOS,TOS 
 399 1864 BD49     	    ldr T1,=sc_ascii // translation table
 400 1866 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 186a 4FF04002 	    mov T2,#KBD_F_XT 
 402 186e 1042     	    tst T0,T2
 403 1870 00D0     	    beq 1f
 404 1872 BB49     	    ldr T1,=extended // extended code translation
 405 1874 00B5FFF7 	1:  _CALL keycode
ARM GAS  forth.s 			page 68


 405      C1FF5DF8 
 405      04EB
 406 187e 98B1     	    cbz T0,inkey_exit
 407 1880 E128     	    cmp T0,#XT2_KEY // pause 
 408 1882 13D0     	    beq pause_key
 409 1884 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 188e 0646     	    mov TOS,T0
 411 1890 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 189a 032E     	    cmp TOS,#VK_CTRL_C 
 413 189c 3EF4FBAD 	    beq user_reboot 
 414 18a0 47F8046D 	    _PUSH 
 415 18a4 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 18a8 01F014BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 18ac 4FF00701 	    mov T1,#7 
 420 18b0 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 18ba 0139     	    subs T1,#1
 422 18bc F8D1     	    bne 1b 
 423 18be 01F009BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 18c2 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 18c6 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 18ca 06D1     	    bne shift_down 
 431 18cc 10F0200F 	    tst T0,#KBD_F_ALT  
 432 18d0 06D1     	    bne altchar_down 
 433 18d2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 18d6 06D1     	    bne ctrl_down 
 435 18d8 0DE0     	    b 9f 
 436              	shift_down:
 437 18da 3046     	    mov T0,TOS 
 438 18dc A149     	    ldr T1,=shifted 
 439 18de 04E0     	    b 8f 
 440              	altchar_down:
 441 18e0 3046     	    mov T0,TOS 
 442 18e2 A149     	    ldr T1,=altchar
 443 18e4 01E0     	    b 8f
 444              	ctrl_down:
 445 18e6 3046     	    mov T0,TOS 
 446 18e8 A049     	    ldr T1,=controls 
 447 18ea 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 18f4 0646     	    mov TOS,T0
 449 18f6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1900 7047     	    _RET 
ARM GAS  forth.s 			page 69


 451              	
 452              	do_capslock:
 453 1902 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1906 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 190a 0BD0     	    beq 9f 
 456 190c 412E     	    cmp TOS,#'A'
 457 190e 09D4     	    bmi 9f 
 458 1910 5B2E     	    cmp TOS,#'Z'+1 
 459 1912 03D4     	    bmi 3f 
 460 1914 612E     	    cmp TOS,#'a'
 461 1916 05D4     	    bmi 9f 
 462 1918 7B2E     	    cmp TOS,#'z'+1
 463 191a 03D5     	    bpl 9f 
 464 191c 4FF02000 	3:  mov T0,#(1<<5)
 465 1920 86EA0006 	    eor TOS,T0 
 466 1924 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1926 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1928 E06E     	1:  ldr r0,[UP,#VID_STATE]
 483 192a 0128     	    cmp r0,ST_PREVID 
 484 192c FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 192e 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1932 00B5FEF7 	    _CALL nvic_disable_irq
 487      06FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 193c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1944 1846     	    mov r0,r3 
 491 1946 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 194a 4FF01102 	    mov r2,#OUTPUT_OD
 493 194e 00B5FEF7 	    _CALL gpio_config 
 493      26FF5DF8 
 493      04EB
 494 1958 1846     	    mov r0,r3 
 495 195a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 195e 82EA0202 	    eor r2,r2 
 497 1962 00B5FEF7 	    _CALL gpio_out 
 497      72FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 196c 4FF4E150 	    mov r0,#150*48
 500 1970 0138     	1:  subs r0,#1 
ARM GAS  forth.s 			page 70


 501 1972 FDD1     	    bne 1b
 502 1974 01BC     	    pop {r0}
 503 1976 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 504 197a D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
 505 197e 40F00200 	    orr r0,#KBD_TX 
 506 1982 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 507 1986 80EA0000 	    eor r0,r0 
 508 198a 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 509 198e 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1992 1846     	    mov r0,r3 
 513 1994 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1998 4FF01102 	    mov r2,#OUTPUT_OD 
 515 199c 00B5FEF7 	    _CALL gpio_config 
 515      FFFE5DF8 
 515      04EB
 516 19a6 1846     	    mov r0,r3 
 517 19a8 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 19ac 82EA0202 	    eor r2,r2 
 519 19b0 00B5FEF7 	    _CALL gpio_out
 519      4BFF5DF8 
 519      04EB
 520              	// release clock line 
 521 19ba 1846     	    mov r0,r3 
 522 19bc 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 19c0 4FF00002 	    mov r2,#INPUT_FLOAT
 524 19c4 00B5FEF7 	    _CALL gpio_config
 524      EBFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 19ce 4FF00A00 	    mov r0,#10
 528 19d2 E060     	    str r0,[UP,#CD_TIMER]
 529 19d4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 19d6 20B1     	    cbz r0, 4f 
 531 19d8 94F87A00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 19dc 10F0020F 	    tst r0,#KBD_TX
 533 19e0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 19e2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 19e6 00B5FEF7 	    _CALL nvic_enable_irq
 536      97FE5DF8 
 536      04EB
 537 19f0 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 19f4 20F00201 	    bic r1,r0,#KBD_TX
 539 19f8 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 540 19fc 00F00200 	    and r0,#KBD_TX
 541 1a00 48B1     	    cbz r0, 5f
 542 1a02 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1a04 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1a08 1960     	    str r1,[r3,#GPIO_MODER]
 545 1a0a 80EA0000 	    eor r0,r0 
 546 1a0e 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1a12 6FEA0000 	    mvn r0,r0   
 548 1a16 0EBC     	5:  pop {r1,r2,r3}
 549 1a18 7047     	    _RET 
ARM GAS  forth.s 			page 71


 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1a1a 80EA0000 	    eor T0,T0 
 555 1a1e C4F88C00 	    str T0,[UP,#KBD_QHEAD]
 556 1a22 C4F89000 	    str T0,[UP,#KBD_QTAIL]
 557 1a26 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1a2a 6FF00301 	    mvn T1,#3
 559 1a2e 00EA0100 	    and T0,T1 
 560 1a32 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 561 1a36 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1a38 52180000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1a44 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1a48 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1a52 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1a54 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1a5e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1a68 FE28     	    cmp r0,KBD_CMD_RESEND
 574 1a6a EBD0     	    beq 1b 
 575 1a6c 4FF4FA70 	    mov T0,#500 
 576 1a70 E060     	    str T0,[UP,#CD_TIMER]
 577 1a72 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1a7c 10B9     	    cbnz T0,3f
 579 1a7e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1a80 0028     	    cmp T0,#0 
 581 1a82 F6D1     	    bne 2b 
 582 1a84 47F8046D 	3:  _PUSH 
 583 1a88 0646     	    mov TOS,T0  
 584 1a8a 01F023B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1a8e 3C1A0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1a9c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
ARM GAS  forth.s 			page 72


 592      04EB
 593 1aa6 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1aaa 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1ab4 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1abe FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1ac0 ECD0     	    beq 1b
 598 1ac2 FA28     	    cmp T0,#KBD_ACK  
 599 1ac4 F6D1     	    bne 2b 
 600 1ac6 3046     	2:  mov T0,TOS 
 601 1ac8 00F00700 	    and T0,#7 
 602 1acc 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1ad6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ae0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ae2 F0D0     	    beq 2b
 606 1ae4 FA28     	    cmp T0,#KBD_ACK 
 607 1ae6 F6D1     	    bne 3b  
 608 1ae8 57F8046B 	    _POP 
 609 1aec 01F0F2B8 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1af0 921A0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1b00 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1b04 10F0010F 	    tst T0,#1
 619 1b08 01D1     	    bne 1f 
 620 1b0a 01F0E3B8 	    _NEXT 
 621 1b0e 47F8046D 	1: _PUSH 
 622 1b12 6FF00101 	    mvn T1,#1 
 623 1b16 00EA0100 	    and T0,T1 
 624 1b1a 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 625 1b1e 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1b22 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1b2a F41A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
ARM GAS  forth.s 			page 73


 634 1b38 504700BF 	    _NEST
 635 1b3c 011B0000 	1:  _ADR CAPS_LED  
 636 1b40 5D180000 	    _ADR PS2_QKEY 
 637 1b44 69320000 	    _ADR QDUP 
 638 1b48 472F0000 	    _QBRAN 1b  
 638      3C1B0000 
 639 1b50 DB2C0000 	    _UNNEST 
 640 1b54 4E170000 	
 640      5C170000 
 640      BC130000 
 640      E0140000 
 640      70140000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1b74 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1b7c 0346     	    mov r3,r0 
  44 1b7e 4FF00401 	    mov r1,#PIN_F_SC 
ARM GAS  forth.s 			page 74


  45 1b82 4FF00102 	    mov r2,#OUTPUT_PP
  46 1b86 00B5FEF7 	    _CALL gpio_config 
  46      0AFE5DF8 
  46      04EB
  47 1b90 1846     	    mov r0,r3 
  48 1b92 4FF00401 	    mov r1,#PIN_F_SC  
  49 1b96 4FF00102 	    MOV r2,#1
  50 1b9a 00B5FEF7 	    _CALL gpio_out 
  50      56FE5DF8 
  50      04EB
  51 1ba4 1846     	    mov r0,r3 
  52 1ba6 4FF00501 	    mov r1,#PIN_SCK  
  53 1baa 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1bae 00B5FEF7 	    _CALL gpio_config 
  54      F6FD5DF8 
  54      04EB
  55 1bb8 1846     	    mov r0,r3 
  56 1bba 4FF00701 	    mov r1,#PIN_MOSI 
  57 1bbe 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1bc2 00B5FEF7 	    _CALL gpio_config 
  58      ECFD5DF8 
  58      04EB
  59 1bcc 1846     	    mov r0,r3
  60 1bce 4FF00601 	    mov r1,#PIN_MISO
  61 1bd2 4FF00202 	    mov r2,#INPUT_AFO  
  62 1bd6 00B5FEF7 	    _CALL gpio_config
  62      E2FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1be0 4CF6AA40 	    mov r0,#0xCCAA
  65 1be4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1be6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1bee 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1bf0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1bf4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1bf6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1bfe 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1c02 0180     	    strh r1,[r0,#SPI_CR1]
  73 1c04 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1c06 80EA0000 	    eor r0,r0 
  75 1c0a C5F25050 	    movt r0,#0x5550 
  76 1c0e 40EA0100 	    orr r0,r1 
  77 1c12 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1c14 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1c16 2E1B0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1c24 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
ARM GAS  forth.s 			page 75


  86      C4F20200 
  87 1c2c 4FF00401 	    mov r1,#PIN_F_SC 
  88 1c30 4FF00002 	    mov r2,#0 
  89 1c34 00B5FEF7 	    _CALL gpio_out 
  89      09FE5DF8 
  89      04EB
  90 1c3e 01F049B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1c42 1A1C0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1c50 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1c58 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1c5a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1c5e FBD1     	    bne 1b 
 102 1c60 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1c68 4FF00401 	    mov r1,#PIN_F_SC 
 104 1c6c 4FF00102 	    mov r2,#1 
 105 1c70 00B5FEF7 	    _CALL gpio_out 
 105      EBFD5DF8 
 105      04EB
 106 1c7a 01F02BB8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1c7e 461C0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1c8c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1c94 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1c96 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1c9a FBD0     	    beq 0b 
 118 1c9c 6FF00001 	    mvn T1,#0 
 119 1ca0 0173     	    strb T1,[T0,#SPI_DR]
 120 1ca2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1ca4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1ca8 FBD0     	    beq 1b     
 123              	2:  
 124 1caa 47F8046D 	    _PUSH 
 125 1cae 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1cb0 01F010B8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
ARM GAS  forth.s 			page 76


 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1cb4 821C0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1cc0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1cc8 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1cca 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1cce FBD0     	    beq 0b 
 138 1cd0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1cd2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1cd4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1cd8 FBD0     	    beq 1b 
 142 1cda 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1cdc 57F8046B 	    _POP 
 144 1ce0 00F0F8BF 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ce4 B81C0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1cf0 504700BF 	    _NEST 
 153 1cf4 251C0000 	    _ADR CHIP_SEL 
 154 1cf8 072F0000 	    _DOLIT 4
 154      04000000 
 155 1d00 C11C0000 	    _ADR WR_BYTE
 156 1d04 511C0000 	    _ADR CHIP_DSEL
 157 1d08 DB2C0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1d0c E81C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1d18 504700BF 	    _NEST 
 165 1d1c 251C0000 	    _ADR CHIP_SEL 
 166 1d20 072F0000 	    _DOLIT 6 
 166      06000000 
 167 1d28 C11C0000 	    _ADR WR_BYTE 
 168 1d2c 511C0000 	    _ADR CHIP_DSEL 
 169 1d30 DB2C0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1d34 101D0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
ARM GAS  forth.s 			page 77


 176 1d40 504700BF 	    _NEST
 177 1d44 251C0000 	    _ADR CHIP_SEL  
 178 1d48 072F0000 	    _DOLIT sr_cmd 
 178      681D0000 
 179 1d50 59310000 	    _ADR PLUS 
 180 1d54 C12F0000 	    _ADR CAT
 181 1d58 C11C0000 	    _ADR WR_BYTE
 182 1d5c 8D1C0000 	    _ADR RD_BYTE
 183 1d60 511C0000 	    _ADR CHIP_DSEL  
 184 1d64 DB2C0000 	    _UNNEST 
 185 1d68 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1d6b 381D0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1d78 504700BF 	    _NEST 
 193 1d7c 95300000 	    _ADR DUPP 
 194 1d80 072F0000 	    _DOLIT 16
 194      10000000 
 195 1d88 31310000 	    _ADR RSHIFT 
 196 1d8c C11C0000 	    _ADR WR_BYTE 
 197 1d90 95300000 	    _ADR DUPP
 198 1d94 072F0000 	    _DOLIT 8 
 198      08000000 
 199 1d9c 31310000 	    _ADR RSHIFT 
 200 1da0 C11C0000 	    _ADR WR_BYTE 
 201 1da4 C11C0000 	    _ADR WR_BYTE 
 202 1da8 DB2C0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1dac 6F1D0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1dbc 504700BF 	    _NEST 
 210 1dc0 072F0000 	1:  _DOLIT 0 
 210      00000000 
 211 1dc8 411D0000 	    _ADR RD_SR 
 212 1dcc 072F0000 	    _DOLIT 3 
 212      03000000 
 213 1dd4 D9300000 	    _ADR ANDD 
 214 1dd8 472F0000 	    _QBRAN 2f
 214      E81D0000 
 215 1de0 6F2F0000 	    _BRAN 1b
 215      C01D0000 
 216 1de8 DB2C0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
ARM GAS  forth.s 			page 78


 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1dec B01D0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1dfc 504700BF 	    _NEST 
 225 1e00 191D0000 	    _ADR WR_ENBL
 226 1e04 251C0000 	    _ADR CHIP_SEL 
 227 1e08 072F0000 	    _DOLIT 0x20 
 227      20000000 
 228 1e10 C11C0000 	    _ADR WR_BYTE 
 229 1e14 791D0000 	    _ADR SEND_ADR
 230 1e18 511C0000 	    _ADR CHIP_DSEL 
 231 1e1c BD1D0000 	    _ADR WAIT_DONE 
 232 1e20 DB2C0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1e24 F01D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1e34 504700BF 	    _NEST 
 240 1e38 191D0000 	    _ADR WR_ENBL 
 241 1e3c 251C0000 	    _ADR CHIP_SEL
 242 1e40 072F0000 	    _DOLIT 0x60
 242      60000000 
 243 1e48 072F0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1e50 C11C0000 	    _ADR WR_BYTE 
 245 1e54 C11C0000 	    _ADR WR_BYTE 
 246 1e58 511C0000 	    _ADR CHIP_DSEL 
 247 1e5c BD1D0000 	    _ADR WAIT_DONE
 248 1e60 DB2C0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1e64 281E0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1e70 504700BF 	    _NEST
 258 1e74 251C0000 	    _ADR CHIP_SEL 
 259 1e78 072F0000 	    _DOLIT 3 
 259      03000000 
 260 1e80 C11C0000 	    _ADR WR_BYTE 
 261 1e84 791D0000 	    _ADR SEND_ADR
 262 1e88 11300000 	    _ADR TOR   
 263 1e8c 6F2F0000 	    _BRAN 2f
 263      A41E0000 
ARM GAS  forth.s 			page 79


 264 1e94 8D1C0000 	1:  _ADR RD_BYTE
 265 1e98 B9300000 	    _ADR OVER 
 266 1e9c AD2F0000 	    _ADR CSTOR
 267 1ea0 B5310000 	    _ADR ONEP 
 268 1ea4 292F0000 	2:  _DONXT 1b
 268      941E0000 
 269 1eac 85300000 	    _ADR DROP 
 270 1eb0 511C0000 	    _ADR CHIP_DSEL 
 271 1eb4 DB2C0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1eb8 681E0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1ec4 504700BF 	    _NEST 
 280 1ec8 191D0000 	    _ADR WR_ENBL
 281 1ecc 251C0000 	    _ADR CHIP_SEL
 282 1ed0 072F0000 	    _DOLIT 2 
 282      02000000 
 283 1ed8 C11C0000 	    _ADR WR_BYTE 
 284 1edc 791D0000 	    _ADR SEND_ADR
 285 1ee0 11300000 	    _ADR TOR
 286 1ee4 6F2F0000 	    _BRAN 2f 
 286      041F0000 
 287 1eec 95300000 	1:  _ADR DUPP 
 288 1ef0 C12F0000 	    _ADR CAT 
 289 1ef4 95300000 	    _ADR DUPP 
 290 1ef8 E9420000 	    _ADR HDOT
 291 1efc C11C0000 	    _ADR WR_BYTE 
 292 1f00 B5310000 	    _ADR ONEP
 293 1f04 292F0000 	2:  _DONXT 1b 
 293      EC1E0000 
 294 1f0c 85300000 	    _ADR DROP
 295 1f10 511C0000 	    _ADR CHIP_DSEL
 296 1f14 BD1D0000 	    _ADR WAIT_DONE 
 297 1f18 DB2C0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
ARM GAS  forth.s 			page 80


 315              	********************************/
 316 1f1c BC1E0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1f2c 504700BF 	    _NEST 
 318              	    
 319 1f30 DB2C0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1f34 201F0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1f44 504700BF 	    _NEST 
 327              	
 328 1f48 DB2C0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1f4c 381F0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1f54 504700BF 	    _NEST 
 336              	
 337 1f58 DB2C0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1f5c 501F0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1f68 504700BF 	    _NEST 
 345              	
 346 1f6c DB2C0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1f70 601F0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1f7c 504700BF 	    _NEST 
 354              	
 355 1f80 DB2C0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
ARM GAS  forth.s 			page 81


   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1f84 5F708930 	     .word  0x3089705F // 1e-9
  34 1f88 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1f8c 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1f90 BD378635 	     .word  0x358637BD // 1e-6 
  37 1f94 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1f98 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1f9c 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1fa0 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1fa4 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1fa8 0000803F 	     .word  0x3F800000 // 1.0 
  44 1fac 00002041 	     .word  0x41200000 // 1e1 
  45 1fb0 0000C842 	     .word  0x42C80000 // 1e2 
  46 1fb4 00007A44 	     .word  0x447A0000 // 1e3 
  47 1fb8 00401C46 	     .word  0x461C4000 // 1e4 
  48 1fbc 0050C347 	     .word  0x47C35000 // 1e5 
  49 1fc0 00247449 	     .word  0x49742400 // 1e6 
  50 1fc4 8096184B 	     .word  0x4B189680 // 1e7
  51 1fc8 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1fcc 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1fd0 741F0000 	    _HEADER PWR10,5,"PWR10"
ARM GAS  forth.s 			page 82


  59      05505752 
  59      313000BF 
  60 1fdc 4FEA8606 	    lsl TOS,#2  
  61 1fe0 FF48     	    ldr t0, =p10 
  62 1fe2 0644     	    add TOS,TOS,T0
  63 1fe4 3668     	    ldr TOS,[TOS]  
  64 1fe6 00F075BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1fea DFF8F803 	   ldr.w r0,=CPACR 
  73 1fee 0168     	   ldr R1,[R0]
  74 1ff0 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1ff4 0160     	   str r1,[r0]
  76 1ff6 BFF34F8F 	   dsb 
  77 1ffa FB48     	   ldr r0,=FPC_BASE_ADR
  78 1ffc 81EA0101 	   eor r1,r1 
  79 2000 0160     	   str r1,[r0,FPCCR]
  80 2002 BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 2006 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 2008 D41F0000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 2010 4FF05100 	    mov r0,#FPU_IRQ 
  92 2014 00B5FEF7 	    _CALL nvic_disable_irq
  92      95FB5DF8 
  92      04EB
  93 201e 00F059BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 2022 0C200000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 202c 4FF05100 	    mov r0,#FPU_IRQ
 102 2030 00B5FEF7 	    _CALL nvic_enable_irq
 102      72FB5DF8 
 102      04EB
 103 203a 00F04BBE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
ARM GAS  forth.s 			page 83


 108              	   stack fpu SCR register 
 109              	***************************/
 110 203e 26200000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 2048 47F8046D 	   _PUSH 
 112 204c F1EE106A 	   vmrs TOS,FPSCR
 113 2050 BFF34F8F 	   dsb  
 114 2054 00F03EBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 2058 42200000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 2068 F1EE100A 	   vmrs T0,FPSCR 
 125 206c BFF34F8F 	   dsb 
 126 2070 06EA0006 	   and TOS,T0  
 127 2074 E1EE106A 	   vmsr FPSCR,TOS 
 128 2078 BFF34F8F 	   dsb 
 129 207c 00F02ABE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2080 5C200000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 2088 00EE106A 	    vmov.f32 S0,TOS 
 138 208c 57F8046B 	    _POP 
 139 2090 00F020BE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 2094 84200000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 209c 00EE906A 	    vmov.f32 S1,TOS 
 147 20a0 57F8046B 	    _POP 
 148 20a4 00F016BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 20a8 98200000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 20b0 01EE106A 	    vmov.f32 S2,TOS 
 156 20b4 57F8046B 	    _POP 
ARM GAS  forth.s 			page 84


 157 20b8 00F00CBE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
 163 20bc AC200000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 20c4 47F8046D 	    _PUSH 
 165 20c8 10EE106A 	    vmov.f32 TOS,S0 
 166 20cc 00F002BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 20d0 C0200000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 20d8 47F8046D 	    _PUSH 
 174 20dc 10EE906A 	    vmov.f32 TOS,S1 
 175 20e0 00F0F8BD 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 20e4 D4200000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 20ec 47F8046D 	    _PUSH 
 183 20f0 11EE106A 	    vmov.f32 TOS,S2 
 184 20f4 00F0EEBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 20f8 E8200000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 2100 00EE106A 	    vmov.f32 S0,TOS
 194 2104 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 2108 10EE106A 	    vmov.f32 TOS,s0 
 196 210c 00F0E2BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 2110 FC200000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 211c 00EE106A 	    vmov.f32 S0,TOS 
 204 2120 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 2124 10EE106A 	    vmov.f32 TOS,S0 
 206 2128 00F0D4BD 	    _NEXT 
 207              	
ARM GAS  forth.s 			page 85


 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 212c 14210000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 2134 00EE106A 	    vmov.f32 S0,TOS
 214 2138 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 213c 10EE106A 	    vmov.f32 TOS,s0 
 216 2140 00F0C8BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 2144 30210000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 214c 00EE106A 	   vmov.f32 s0,TOS 
 224 2150 57F8046B 	   _POP 
 225 2154 00EE906A 	   vmov.f32 s1,TOS 
 226 2158 30EE200A 	   vadd.f32 s0,s0,s1 
 227 215c 10EE106A 	   vmov.f32 TOS,s0
 228 2160 00F0B8BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 2164 48210000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 216c 00EE106A 	   vmov.f32 s0,TOS 
 237 2170 57F8046B 	   _POP 
 238 2174 00EE906A 	   vmov.f32 s1,TOS 
 239 2178 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 217c 10EE106A 	   vmov.f32 TOS,s0
 241 2180 00F0A8BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 2184 68210000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 218c 00EE106A 	   vmov.f32 s0,TOS 
 251 2190 57F8046B 	   _POP 
 252 2194 00EE906A 	   vmov.f32 s1,TOS 
 253 2198 20EE800A 	   vmul.f32 s0,s1,s0 
 254 219c 10EE106A 	   vmov.f32 TOS,s0
 255 21a0 00F098BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
ARM GAS  forth.s 			page 86


 261              	*******************************/
 262 21a4 88210000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 21ac 00EE106A 	   vmov.f32 s0,TOS 
 264 21b0 57F8046B 	   _POP 
 265 21b4 00EE906A 	   vmov.f32 s1,TOS 
 266 21b8 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 21bc 10EE106A 	   vmov.f32 TOS,s0
 268 21c0 00F088BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 21c4 A8210000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 21d0 00EE106A 	    vmov.f32 s0,TOS 
 277 21d4 B1EE400A 	    vneg.f32 S0,S0 
 278 21d8 10EE106A 	    vmov.f32 TOS,S0    
 279 21dc 00F07ABD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 21e0 C8210000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 21ec 80EA0000 	    eor T0,T0 
 287 21f0 6FEA0000 	    mvn T0,T0 
 288 21f4 4FEA5000 	    lsr T0,#1 
 289 21f8 06EA0006 	    and TOS,T0 
 290 21fc 00F06ABD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 2200 E4210000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 220c 00EE106A 	     vmov.f32 s0,TOS 
 299 2210 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 2214 10EE106A 	     vmov.f32 TOS,s0 
 301 2218 00F05CBD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 221c 04220000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 2224 00EE106A 	    vmov.f32 s0,TOS 
 309 2228 B5EE400A 	    vcmp.f32 s0, #0.0 
ARM GAS  forth.s 			page 87


 310 222c F1EE106A 	    vmrs TOS,FPSCR
 311 2230 BFF34F8F 	    dsb  
 312 2234 4FEAE676 	    asr TOS,#31   
 313 2238 00F04CBD 	    _NEXT 
 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 223c 20220000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 2244 504700BF 	    _NEST 
 321 2248 6D210000 	    _ADR FSUBB
 322 224c 25220000 	    _ADR FZLESS
 323 2250 65330000 	    _ADR INVER     
 324 2254 DB2C0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 2258 40220000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2260 504700BF 	    _NEST 
 332 2264 6D210000 	    _ADR FSUBB 
 333 2268 25220000 	    _ADR FZLESS
 334 226c DB2C0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2270 5C220000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 227c 504700BF 	    _NEST 
 342 2280 B9300000 	   _ADR OVER 
 343 2284 B9300000 	   _ADR OVER 
 344 2288 45220000 	   _ADR FGREAT 
 345 228c 472F0000 	   _QBRAN 1f 
 345      98220000 
 346 2294 A5300000 	   _ADR SWAP  
 347 2298 85300000 	1: _ADR DROP 
 348 229c DB2C0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 22a0 74220000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 22ac 504700BF 	    _NEST 
 355 22b0 B9300000 	    _ADR OVER 
 356 22b4 B9300000 	    _ADR OVER 
 357 22b8 61220000 	    _ADR FLESS 
 358 22bc 472F0000 	    _QBRAN 1f
 358      C8220000 
ARM GAS  forth.s 			page 88


 359 22c4 A5300000 	    _ADR SWAP   
 360 22c8 85300000 	1:  _ADR DROP 
 361 22cc DB2C0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 22d0 A4220000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 22dc 80EA0000 	    eor T0,T0 
 370 22e0 C8F20000 	    movt T0,#0X8000
 371 22e4 06EA0006 	    and TOS,T0
 372 22e8 4FEAE676 	    asr TOS,#31  
 373 22ec 00F0F2BC 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 22f0 D4220000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 22fc 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 2304 06EA0006 	    and TOS,T0 
 382 2308 4FEAD656 	    lsr TOS,#23
 383 230c A6F17F06 	    sub TOS,#127 
 384 2310 00F0E0BC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 2314 F4220000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 2320 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 2328 06EA0006 	    AND TOS,T0 
 393 232c 80EA0000 	    EOR T0,T0 
 394 2330 C0F28000 	    MOVT T0,0x80
 395 2334 46EA0006 	    ORR TOS,T0 
 396 2338 00F0CCBC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 233c 18230000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 2344 47F8046D 	    _PUSH 
 405 2348 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
ARM GAS  forth.s 			page 89


 406 2350 00F0C0BC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
 412 2354 40230000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 235c 47F8046D 	    _PUSH 
 414 2360 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 2368 00F0B4BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 236c 58230000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 2378 47F8046D 	    _PUSH 
 423 237c 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 2384 00F0A6BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 2388 70230000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 2394 47F8046D 	    _PUSH 
 433 2398 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 23a0 00F098BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 23a4 8C230000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 23b0 504700BF 	    _NEST
 443 23b4 FD220000 	    _ADR FEXP 
 444 23b8 35210000 	    _ADR STOF 
 445 23bc 95230000 	    _ADR LOG2
 446 23c0 8D210000 	    _ADR FSTAR 
 447 23c4 1D210000 	    _ADR TRUNC  
 448 23c8 95300000 	    _ADR DUPP 
 449 23cc C9300000 	    _ADR ZLESS 
 450 23d0 472F0000 	    _QBRAN 1f 
 450      DC230000 
 451 23d8 C5310000 	    _ADR ONEM
ARM GAS  forth.s 			page 90


 452 23dc DB2C0000 	1:  _UNNEST 
 453 23e0 A81F0000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 23ec 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 23f0 0000C842 	            .word  0x42C80000  // 100.0
  31 23f4 00401C46 	            .word  0x461C4000  // 10000.0 
  32 23f8 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 23fc CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 2400 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 2404 504700BF 	    _NEST 
  45 2408 072F0000 	    _DOLIT 2 
  45      02000000 
  46 2410 49310000 	    _ADR LSHIFT 
  47 2414 072F0000 	    _DOLIT p10p2n 
  47      EC230000 
  48 241c 59310000 	    _ADR PLUS 
  49 2420 A12F0000 	    _ADR AT 
  50 2424 DB2C0000 	    _UNNEST 
  51              	
ARM GAS  forth.s 			page 91


  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 2428 504700BF 	    _NEST 
  59 242c 072F0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 2434 072F0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 243c 0D3A0000 	    _ADR PICK  // idx f e 1 idx 
  62 2440 49310000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2444 D9300000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2448 DB2C0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 244c 504700BF 	    _NEST 
  78 2450 11300000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2454 FD2F0000 	    _ADR RAT   // idx f e R: e 
  81 2458 29240000 	    _ADR bit_state // idx f state 
  82 245c 472F0000 	    _QBRAN 1f   // bit reset 
  82      70240000 
  83 2464 B9300000 	    _ADR OVER 
  84 2468 05240000 	    _ADR p10p2at // idx f pwr10 R: e
  85 246c AD210000 	    _ADR FSLH  // idx f R: e 
  86 2470 A5300000 	1:  _ADR SWAP  // f idx R: e 
  87 2474 B5310000 	    _ADR ONEP   // F idx++ R: e 
  88 2478 A5300000 	    _ADR SWAP   // idx f  
  89 247c B9300000 	    _ADR OVER   // idx f idx 
  90 2480 072F0000 	    _DOLIT 5 
  90      05000000 
  91 2488 61340000 	    _ADR GREAT  // idx > 5
  92 248c 472F0000 	    _QBRAN div_loop 
  92      54240000 
  93 2494 CD2F0000 	    _ADR RFROM 
  94 2498 85300000 	    _ADR DROP 
  95 249c DB2C0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
ARM GAS  forth.s 			page 92


 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 24a0 504700BF 	    _NEST 
 109 24a4 11300000 	    _ADR TOR 
 110              	mult_loop:
 111 24a8 FD2F0000 	    _ADR RAT   // idx f e R: e 
 112 24ac 29240000 	    _ADR bit_state // idx f state 
 113 24b0 472F0000 	    _QBRAN 1f   // bit reset 
 113      C4240000 
 114 24b8 B9300000 	    _ADR OVER  
 115 24bc 05240000 	    _ADR p10p2at // idx f pwr10 R: e
 116 24c0 8D210000 	    _ADR FSTAR  // idx f R: e 
 117 24c4 A5300000 	1:  _ADR SWAP  // f idx R: e 
 118 24c8 B5310000 	    _ADR ONEP   // F idx++ R: e 
 119 24cc A5300000 	    _ADR SWAP   // idx f  
 120 24d0 B9300000 	    _ADR OVER   // idx f idx 
 121 24d4 072F0000 	    _DOLIT 5 
 121      05000000 
 122 24dc 61340000 	    _ADR GREAT  // idx > 5
 123 24e0 472F0000 	    _QBRAN mult_loop 
 123      A8240000 
 124 24e8 CD2F0000 	    _ADR RFROM 
 125 24ec 85300000 	    _ADR DROP 
 126 24f0 DB2C0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 24f4 504700BF 	    _NEST 
 136 24f8 B9300000 	    _ADR OVER  // e f e 
 137 24fc 472F0000 	    _QBRAN 3f // exp==0,  done 
 137      38250000 
 138 2504 072F0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 250c 91320000 	    _ADR NROT // idx e f
 140 2510 A5300000 	    _ADR SWAP // idx f e   
 141 2514 95300000 	    _ADR DUPP  // idx f e e 
 142 2518 C9300000 	    _ADR ZLESS
 143 251c 472F0000 	    _QBRAN pos_exp 
 143      34250000 
 144              	// negative exponent 
 145 2524 89330000 	    _ADR ABSS 
 146 2528 4D240000 	    _ADR mant_div 
 147 252c 6F2F0000 	    _BRAN 3f 
 147      38250000 
 148              	pos_exp: // positive exponent 
 149 2534 A1240000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2538 A5300000 	3:  _ADR SWAP 
 152 253c 85300000 	    _ADR DROP 
 153 2540 DB2C0000 	    _UNNEST 
ARM GAS  forth.s 			page 93


 154              	
 155              	
 156              	/*****************************
 157              	   decimals ( a -- a+ fdec | a 0.0 )
 158              	   parse digits after '.' 
 159              	   convert to float 
 160              	*****************************/
 161              	decimals:
 162 2544 504700BF 	    _NEST 
 163 2548 072F0000 	    _DOLIT 0
 163      00000000 
 164 2550 95300000 	    _ADR DUPP
 165 2554 7D320000 	    _ADR ROT
 166 2558 DD3D0000 	    _ADR PARSE_DIGITS // d n a+ 
 167 255c 91320000 	    _ADR NROT  // a d n 
 168 2560 35210000 	    _ADR STOF  // convert integer n to float 
 169 2564 A5300000 	    _ADR SWAP
 170 2568 072F0000 	    _DOLIT 9 
 170      09000000 
 171 2570 8D340000 	    _ADR MIN 
 172 2574 DD1F0000 	    _ADR PWR10 
 173 2578 AD210000 	    _ADR FSLH 
 174 257c DB2C0000 	    _UNNEST 
 175              	
 176              	
 177              	/************************************
 178              	   exponent ( a -- exp a+ )
 179              	   parse float exponent 
 180              	************************************/
 181              	exponent: 
 182 2580 504700BF 	    _NEST 
 183 2584 973E0000 	    _ADR NEGQ 
 184 2588 11300000 	    _ADR TOR 
 185 258c 072F0000 	    _DOLIT 0 
 185      00000000 
 186 2594 95300000 	    _ADR DUPP 
 187 2598 7D320000 	    _ADR ROT 
 188 259c DD3D0000 	    _ADR PARSE_DIGITS // d n a  
 189 25a0 91320000 	    _ADR NROT 
 190 25a4 A5300000 	    _ADR SWAP 
 191 25a8 85300000 	    _ADR DROP 
 192 25ac CD2F0000 	    _ADR RFROM 
 193 25b0 472F0000 	    _QBRAN 1f 
 193      BC250000 
 194 25b8 79330000 	    _ADR NEGAT 
 195 25bc A5300000 	1:  _ADR SWAP 
 196 25c0 DB2C0000 	    _UNNEST  // -- exp a+  
 197              	
 198              	
 199              	/**********************************
 200              	    FLOAT? ( a -- f# -2 | a 0 )
 201              	    parse float number 
 202              	    return a 0 if not float 
 203              	**********************************/
 204 25c4 A8230000 	    _HEADER FLOATQ,6,"FLOAT?"
 204      06464C4F 
 204      41543F00 
ARM GAS  forth.s 			page 94


 205 25d0 504700BF 	    _NEST
 206              	    // always use base 10 
 207              	    // hexadecimal float not accepted 
 208 25d4 A1350000 	    _ADR BASE 
 209 25d8 A12F0000 	    _ADR AT 
 210 25dc 11300000 	    _ADR TOR 
 211              	    // use decimal base  
 212 25e0 5D3D0000 	    _ADR DECIM 
 213 25e4 072F0000 		_DOLIT	0      // failed flag   
 213      00000000 
 214 25ec B9300000 		_ADR	OVER   // a 0 a     R: base
 215 25f0 ED340000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 216 25f4 85300000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 217              	// check for '-'|'+' save sign on R: 
 218 25f8 973E0000 	    _ADR NEGQ 
 219 25fc 11300000 	    _ADR   TOR // -- ... a  R: base sign 
 220              	// if next char is digit parse integer part 
 221 2600 95300000 	    _ADR DUPP 
 222 2604 C12F0000 	    _ADR CAT 
 223 2608 072F0000 	    _DOLIT 10 
 223      0A000000 
 224 2610 813D0000 	    _ADR DIGTQ // u t|f 
 225 2614 A5300000 	    _ADR SWAP 
 226 2618 85300000 	    _ADR DROP  // drop u 
 227 261c 472F0000 	    _QBRAN must_be_dot 
 227      70260000 
 228              	// get integer part     
 229 2624 072F0000 	    _DOLIT 0 
 229      00000000 
 230 262c 95300000 	    _ADR DUPP
 231 2630 7D320000 	    _ADR ROT // a 0 0 0 a  
 232 2634 DD3D0000 	    _ADR PARSE_DIGITS // a 0 d n a 
 233 2638 91320000 	    _ADR NROT // ... a d n 
 234 263c 35210000 	    _ADR STOF  // convert n to float 
 235 2640 11300000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 236 2644 85300000 	    _ADR DROP // d not needed
 237              	// if next char is 'E' get exponent 
 238 2648 072F0000 	    _DOLIT 'E' 
 238      45000000 
 239 2650 7D3E0000 	    _ADR CHARQ 
 240 2654 472F0000 	    _QBRAN 1f // next is decimal fraction  
 240      7C260000 
 241 265c 072F0000 	    _DOLIT fzero // no fraction 
 241      00000000 
 242 2664 11300000 	    _ADR TOR  // R: base sign fint 0.0
 243 2668 6F2F0000 	    _BRAN 3f // get exponent   
 243      D8260000 
 244              	// no integer part, next character must be '.' 
 245              	must_be_dot: 
 246 2670 072F0000 	    _DOLIT fzero // integer part 0.0 
 246      00000000 
 247 2678 11300000 	    _ADR TOR  // R: base sign fint 
 248 267c 072F0000 	1:  _DOLIT '.' 
 248      2E000000 
 249 2684 7D3E0000 	    _ADR CHARQ 
 250 2688 472F0000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 250      48270000 
ARM GAS  forth.s 			page 95


 251 2690 45250000 	    _ADR decimals // -- a 0 a fdec 
 252 2694 11300000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 253              	// if next char == 'E' there is an exponent 
 254              	// else no exponent, float completed 
 255 2698 072F0000 	    _DOLIT 'E' 
 255      45000000 
 256 26a0 7D3E0000 	    _ADR CHARQ 
 257 26a4 472F0000 	    _QBRAN 1f
 257      B4260000 
 258 26ac 6F2F0000 	    _BRAN 3f 
 258      D8260000 
 259              	// no exponent, must be end of string 
 260 26b4 C12F0000 	1:   _ADR CAT 
 261 26b8 472F0000 	    _QBRAN 1f 
 261      C8260000 
 262 26c0 6F2F0000 	    _BRAN error2 // error not end of string 
 262      5C270000 
 263 26c8 11300000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 264 26cc 85300000 	    _ADR DROP 
 265 26d0 6F2F0000 	    _BRAN build_float 
 265      10270000 
 266              	3: // get exponent 
 267 26d8 81250000 	    _ADR exponent // a 0 exp a+ 
 268              	// must be end of string 
 269 26dc C12F0000 	    _ADR CAT 
 270 26e0 472F0000 	    _QBRAN 4f
 270      F0260000 
 271 26e8 6F2F0000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 271      5C270000 
 272 26f0 11300000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 273 26f4 A5320000 	    _ADR DDROP 
 274 26f8 6F2F0000 	    _BRAN build_float     
 274      10270000 
 275              	5: // no exponent 
 276 2700 072F0000 	    _DOLIT 0 
 276      00000000 
 277 2708 11300000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 278 270c 85300000 	    _ADR DROP 
 279              	build_float: // a 0 R: base sign fint fdec exp 
 280 2710 CD2F0000 	    _ADR RFROM 
 281 2714 E12F0000 	    _ADR DRFROM 
 282 2718 4D210000 	    _ADR FPLUS 
 283 271c F5240000 	    _ADR exp_adjust
 284 2720 CD2F0000 	    _ADR RFROM 
 285 2724 472F0000 	    _QBRAN 1f 
 285      38270000 
 286 272c 072F0000 	    _DOLIT fminus1
 286      000080BF 
 287 2734 8D210000 	    _ADR FSTAR 
 288 2738 072F0000 	1:  _DOLIT -2 
 288      FEFFFFFF 
 289 2740 6F2F0000 	    _BRAN restore_base  
 289      6C270000 
 290              	error1: // a 0 a R: base sign fint 
 291 2748 E12F0000 	    _ADR DRFROM 
 292 274c A5320000 	    _ADR DDROP
 293 2750 85300000 	    _ADR DROP  
ARM GAS  forth.s 			page 96


 294 2754 6F2F0000 	    _BRAN restore_base  
 294      6C270000 
 295              	error2: // a 0 a R: base sign fint fdec  
 296 275c E12F0000 	    _ADR DRFROM 
 297 2760 A5320000 	    _ADR DDROP  // a 0 a R: base sign
 298 2764 CD2F0000 	    _ADR RFROM  // a 0 a sign R: base  
 299 2768 A5320000 	    _ADR DDROP  
 300              	restore_base: 
 301 276c CD2F0000 	    _ADR RFROM 
 302 2770 A1350000 	    _ADR BASE 
 303 2774 8D2F0000 	    _ADR STORE 
 304 2778 DB2C0000 	    _UNNEST 
 305              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 277c 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2780 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2784 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2788 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 278c 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2790 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2794 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2798 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 279c 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
ARM GAS  forth.s 			page 97


  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 27a0 C8250000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 27ac 504700BF 	    _NEST
  50 27b0 072F0000 	    _DOLIT 1  
  50      01000000 
  51 27b8 79340000 	    _ADR MAX  
  52 27bc 072F0000 	    _DOLIT 8
  52      08000000 
  53 27c4 8D340000 	    _ADR MIN 
  54 27c8 072F0000 	    _DOLIT 2 
  54      02000000 
  55 27d0 49310000 	    _ADR LSHIFT 
  56 27d4 072F0000 	    _DOLIT rounding 
  56      7C270000 
  57 27dc 59310000 	    _ADR PLUS 
  58 27e0 A12F0000 	    _ADR AT   
  59 27e4 4D210000 	    _ADR FPLUS 
  60 27e8 DB2C0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 27ec A4270000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 27f4 57F8040B 	    ldr T0,[DSP],#4
  69 27f8 3070     	    strb T0,[TOS]  
  70 27fa 06F10106 	    add TOS,#1
  71 27fe 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 2800 504700BF 	    _NEST 
  81 2804 11300000 	    _ADR TOR  // >R ( i r: b )
  82 2808 C1370000 	    _ADR STOD // ( dbl r: b )
  83 280c 95300000 	    _ADR DUPP // ( dbl i r: b )
  84 2810 11300000 	    _ADR TOR  // ( dbl r: b sign )
  85 2814 01330000 	    _ADR DABS 
  86 2818 FD3B0000 	    _ADR BDIGS 
  87 281c 693C0000 	    _ADR DIGS 
  88 2820 CD2F0000 	    _ADR RFROM 
  89 2824 9D3C0000 	    _ADR SIGN 
  90 2828 C53C0000 	    _ADR EDIGS // ( -- p u )
  91 282c 95300000 	    _ADR DUPP  
  92 2830 91320000 	    _ADR NROT // -rot ( -- u p u )
  93 2834 FD2F0000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2838 A5300000 	    _ADR SWAP // ( -- u p b u )
ARM GAS  forth.s 			page 98


  95 283c A53A0000 	    _ADR CMOVE // ( -- u ) 
  96 2840 95300000 	    _ADR DUPP  // ( -- u u )
  97 2844 CD2F0000 	    _ADR RFROM // ( -- u u b )
  98 2848 59310000 	    _ADR PLUS  // ( -- u b+ )
  99 284c A5300000 	    _ADR SWAP  // ( -- b+ u )
 100 2850 DB2C0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2854 F0270000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2860 504700BF 	    _NEST 
 116 2864 DD1F0000 	    _ADR PWR10 
 117 2868 11300000 	    _ADR TOR  // f2 r: f1 
 118 286c 072F0000 	    _DOLIT 0   // m 
 118      00000000 
 119 2874 A5300000 	    _ADR SWAP  // m f2 
 120 2878 95300000 	1:  _ADR DUPP 
 121 287c FD2F0000 	    _ADR RAT 
 122 2880 61220000 	    _ADR FLESS
 123 2884 472F0000 	    _QBRAN 2f
 123      AC280000 
 124 288c 072F0000 	    _DOLIT ten 
 124      00002041 
 125 2894 8D210000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2898 A5300000 	    _ADR SWAP
 128 289c C5310000 	    _ADR ONEM 
 129 28a0 A5300000 	    _ADR SWAP 
 130 28a4 6F2F0000 	    _BRAN 1b
 130      78280000 
 131 28ac CD2F0000 	2:  _ADR RFROM 
 132 28b0 85300000 	    _ADR DROP 
 133 28b4 A5300000 	    _ADR SWAP 
 134 28b8 DB2C0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
ARM GAS  forth.s 			page 99


 146              	    m    log10 reduction factor
 147              	******************************/
 148 28bc 58280000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 28cc 504700BF 	    _NEST 
 150 28d0 DD1F0000 	    _ADR PWR10
 151 28d4 11300000 	    _ADR TOR
 152 28d8 072F0000 	    _DOLIT 0 
 152      00000000 
 153 28e0 A5300000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 28e4 FD2F0000 	1:  _ADR RAT   
 155 28e8 B9300000 	    _ADR OVER 
 156 28ec 45220000 	    _ADR FGREAT 
 157 28f0 5B2F0000 	    _TBRAN 2f 
 157      18290000 
 158 28f8 072F0000 	    _DOLIT ten 
 158      00002041 
 159 2900 AD210000 	    _ADR FSLH 
 160              	    // increment m 
 161 2904 A5300000 	    _ADR SWAP 
 162 2908 B5310000 	    _ADR ONEP 
 163 290c A5300000 	    _ADR SWAP 
 164 2910 6F2F0000 	    _BRAN 1b   
 164      E4280000 
 165 2918 CD2F0000 	2:  _ADR RFROM 
 166 291c 85300000 	    _ADR DROP
 167 2920 A5300000 	    _ADR SWAP 
 168 2924 DB2C0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2928 504700BF 	    _NEST
 183 292c A5300000 	    _ADR SWAP
 184 2930 69320000 	    _ADR QDUP    
 185 2934 472F0000 	    _QBRAN 2f 
 185      58290000 
 186 293c A5300000 	    _ADR SWAP 
 187 2940 072F0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2948 A5300000 	    _ADR SWAP  
 189 294c F5270000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2950 01280000 	    _ADR ITOA // ( i b -- b u )
 191 2954 85300000 	    _ADR DROP // ( -- b+ )     
 192 2958 DB2C0000 	2:  _UNNEST 
 193              	
ARM GAS  forth.s 			page 100


 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 295c 504700BF 	    _NEST
 208 2960 072F0000 	    _DOLIT 2 
 208      02000000 
 209 2968 0D3A0000 	    _ADR PICK 
 210 296c C9300000 	    _ADR ZLESS 
 211 2970 472F0000 	    _QBRAN 1f 
 211      88290000 
 212 2978 11300000 	    _ADR TOR 
 213 297c 85300000 	    _ADR DROP 
 214 2980 6F2F0000 	    _BRAN 2f 
 214      F4290000 
 215 2988 072F0000 	1:   _DOLIT '.' 
 215      2E000000 
 216 2990 A5300000 	    _ADR SWAP 
 217 2994 F5270000 	    _ADR CSTOP 
 218 2998 11300000 	    _ADR TOR // >r ( d f r: b ) 
 219 299c A5300000 	1:  _ADR SWAP  
 220 29a0 69320000 	    _ADR QDUP 
 221 29a4 472F0000 	    _QBRAN 2f
 221      F4290000 
 222 29ac C5310000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 29b0 A5300000 	    _ADR SWAP // swap ( -- d f r: b )
 224 29b4 072F0000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 29bc 8D210000 	    _ADR FSTAR // f*
 226 29c0 95300000 	    _ADR DUPP  
 227 29c4 1D210000 	    _ADR TRUNC // d f i
 228 29c8 95300000 	    _ADR DUPP  // d f i i  
 229 29cc 072F0000 	    _DOLIT '0' 
 229      30000000 
 230 29d4 59310000 	    _ADR PLUS 
 231 29d8 CD2F0000 	    _ADR RFROM // R> ( d f c b )
 232 29dc F5270000 	    _ADR CSTOP // ( d f i b+ )
 233 29e0 11300000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 29e4 35210000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 29e8 6D210000 	    _ADR FSUBB 
 236 29ec 6F2F0000 	    _BRAN 1b 
 236      9C290000 
 237 29f4 85300000 	2:  _ADR DROP 
 238 29f8 CD2F0000 	    _ADR RFROM 
 239 29fc DB2C0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
ARM GAS  forth.s 			page 101


 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2a00 504700BF 	    _NEST 
 257 2a04 11300000 	    _ADR TOR // ( -- d f r: b )
 258 2a08 95300000 	    _ADR DUPP 
 259 2a0c 072F0000 	    _DOLIT fone 
 259      0000803F 
 260 2a14 61220000 	    _ADR FLESS 
 261 2a18 472F0000 	    _QBRAN 1f
 261      782A0000 
 262 2a20 072F0000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2a28 61280000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2a2c 91320000 	    _ADR NROT
 265 2a30 B9300000 	    _ADR OVER 
 266 2a34 AD270000 	    _ADR ROUND
 267 2a38 95300000 	    _ADR DUPP 
 268 2a3c 072F0000 	    _DOLIT fone 
 268      0000803F 
 269 2a44 61220000 	    _ADR FLESS 
 270 2a48 472F0000 	    _QBRAN 2f 
 270      842A0000 
 271              	    // first digit '0' 
 272 2a50 072F0000 	    _DOLIT '0' 
 272      30000000 
 273 2a58 CD2F0000 	    _ADR RFROM 
 274 2a5c F5270000 	    _ADR CSTOP 
 275 2a60 11300000 	    _ADR TOR 
 276              	    // decrement d 
 277 2a64 A5300000 	    _ADR SWAP 
 278 2a68 C5310000 	    _ADR ONEM 
 279 2a6c A5300000 	    _ADR SWAP 
 280 2a70 CD2F0000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2a74 DB2C0000 	    _UNNEST 
 282 2a78 B9300000 	1:  _ADR OVER 
 283 2a7c CD280000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2a80 91320000 	    _ADR NROT   // m d f r: b 
 285 2a84 95300000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2a88 1D210000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2a8c 95300000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2a90 11300000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2a94 35210000 	    _ADR STOF  // ( -- m d f f )
 290 2a98 6D210000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 2a9c CD2F0000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2aa0 CD2F0000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2aa4 01280000 	    _ADR ITOA // -- m d f b u )
ARM GAS  forth.s 			page 102


 294 2aa8 11300000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2aac 7D320000 	    _ADR ROT
 296 2ab0 CD2F0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2ab4 69310000 	    _ADR SUBB // ( -- m f b d- )
 298 2ab8 91320000 	    _ADR NROT // ( -- m d f b )
 299 2abc DB2C0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2ac0 C0280000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2ac8 504700BF 	    _NEST 
 315 2acc B9300000 	    _ADR OVER  
 316 2ad0 FD220000 	    _ADR FEXP 
 317 2ad4 072F0000 	    _DOLIT 128 
 317      80000000 
 318 2adc E1330000 	    _ADR EQUAL 
 319 2ae0 472F0000 	    _QBRAN 1f
 319      F02A0000 
 320 2ae8 6F2F0000 	    _BRAN nan 
 320      AC2B0000 
 321 2af0 95300000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2af4 11300000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2af8 15320000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2afc A5300000 	    _ADR SWAP 
 326 2b00 F5270000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2b04 B9300000 	    _ADR OVER 
 328 2b08 472F0000 	    _QBRAN zdz // 0.0 
 328      5C2B0000 
 329              	    // check float sign 
 330 2b10 B9300000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2b14 DD220000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2b18 472F0000 	    _QBRAN 1f  // 0branch 1f 
 332      3C2B0000 
 333              	    // negative number add '-' to buffer 
 334 2b20 A5300000 	    _ADR SWAP 
 335 2b24 ED210000 	    _ADR FABS 
 336 2b28 A5300000 	    _ADR SWAP 
 337 2b2c 072F0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2b34 A5300000 	    _ADR SWAP 
 339 2b38 F5270000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2b3c 012A0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 2b40 5D290000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2b44 29290000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2b48 FD2F0000 	    _ADR RAT 
ARM GAS  forth.s 			page 103


 344 2b4c 69310000 	    _ADR SUBB 
 345 2b50 CD2F0000 	    _ADR RFROM 
 346 2b54 A5300000 	    _ADR SWAP 
 347 2b58 DB2C0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2b5c 11300000 	     _ADR TOR 
 350 2b60 A5320000 	     _ADR DDROP
 351 2b64 CD2F0000 	     _ADR RFROM
 352 2b68 072F0000 	     _DOLIT '0'
 352      30000000 
 353 2b70 A5300000 	     _ADR SWAP 
 354 2b74 F5270000 	     _ADR CSTOP 
 355 2b78 072F0000 	     _DOLIT '.'
 355      2E000000 
 356 2b80 A5300000 	     _ADR SWAP 
 357 2b84 F5270000 	     _ADR CSTOP 
 358 2b88 072F0000 	     _DOLIT '0'
 358      30000000 
 359 2b90 A5300000 	     _ADR SWAP 
 360 2b94 F5270000 	     _ADR CSTOP 
 361 2b98 85300000 	     _ADR DROP  
 362 2b9c CD2F0000 	     _ADR RFROM 
 363 2ba0 072F0000 	     _DOLIT 4 
 363      04000000 
 364 2ba8 DB2C0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2bac 11300000 	    _ADR TOR   // ( d f r: b )
 367 2bb0 A5300000 	    _ADR SWAP  // f d  
 368 2bb4 85300000 	    _ADR DROP  // f 
 369 2bb8 15320000 	    _ADR BLANK  // f c 
 370 2bbc FD2F0000 	    _ADR RAT    // f c b 
 371 2bc0 F5270000 	    _ADR CSTOP  // f b+ 
 372 2bc4 A5300000 	    _ADR SWAP   // b+ f 
 373 2bc8 21230000 	    _ADR FMANT  // b+ mant
 374 2bcc 072F0000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2bd4 D9300000 	    _ADR ANDD   
 376 2bd8 472F0000 	    _QBRAN infinity 
 376      182C0000 
 377 2be0 072F0000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2be8 A5300000 	    _ADR SWAP   // c b+
 379 2bec F5270000 	    _ADR CSTOP  // b+
 380 2bf0 072F0000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2bf8 A5300000 	    _ADR SWAP   // c b+ 
 382 2bfc F5270000 	    _ADR CSTOP  // b+
 383 2c00 072F0000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2c08 A5300000 	    _ADR SWAP   // c b+ 
 385 2c0c F5270000 	    _ADR CSTOP  // b+
 386 2c10 6F2F0000 	    _BRAN 1f 
 386      482C0000 
 387              	infinity:
 388 2c18 072F0000 	    _DOLIT 'I'
 388      49000000 
 389 2c20 A5300000 	    _ADR SWAP 
ARM GAS  forth.s 			page 104


 390 2c24 F5270000 	    _ADR CSTOP 
 391 2c28 072F0000 	    _DOLIT 'N'
 391      4E000000 
 392 2c30 A5300000 	    _ADR SWAP 
 393 2c34 F5270000 	    _ADR CSTOP 
 394 2c38 072F0000 	    _DOLIT 'F'
 394      46000000 
 395 2c40 A5300000 	    _ADR SWAP 
 396 2c44 F5270000 	    _ADR CSTOP 
 397              	1:
 398 2c48 85300000 	    _ADR DROP 
 399 2c4c CD2F0000 	    _ADR RFROM 
 400 2c50 072F0000 	    _DOLIT 4 
 400      04000000 
 401 2c58 DB2C0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2c5c C42A0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2c64 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2c68 072F0000 	    _DOLIT 1 
 415      01000000 
 416 2c70 79340000 	    _ADR MAX 
 417 2c74 072F0000 	    _DOLIT 7 
 417      07000000 
 418 2c7c 8D340000 	    _ADR MIN
 419 2c80 A5300000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2c84 353A0000 	    _ADR HERE
 422 2c88 11300000 	    _ADR TOR  
 423 2c8c 072F0000 	    _DOLIT 16 
 423      10000000 
 424 2c94 D54B0000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2c98 FD2F0000 	    _ADR RAT 
 427 2c9c 072F0000 	    _DOLIT 16 
 427      10000000 
 428 2ca4 072F0000 	    _DOLIT 0 
 428      00000000 
 429 2cac 1D3B0000 	    _ADR FILL 
 430 2cb0 CD2F0000 	    _ADR RFROM // ( d f b )
 431 2cb4 C92A0000 	    _ADR FTOA 
 432 2cb8 75400000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 2cbc 072F0000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 2cc4 D54B0000 	    _ADR ALLOT
 436 2cc8 DB2C0000 	    _UNNEST
ARM GAS  forth.s 			page 105


 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
ARM GAS  forth.s 			page 106


  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2ccc 48F804CD 		STMFD	RSP!,{IP}
  85 2cd0 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2cd4 5CF8045B 		LDR WP,[IP],#4 
  89 2cd8 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2cda 58F804CB 		LDMFD RSP!,{IP}
  92 2cde 5CF8045B 		LDR WP,[IP],#4 
  93 2ce2 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2ce4 04F14801 		add T1,UP,#USER_CTOP 
 105 2ce8 0968     		ldr T1,[T1]
 106 2cea 44F25072 		mov T2,#0x4700+(10<<3)
 107 2cee 21F8022B 		strh T2,[T1],#2
 108 2cf2 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 2cf6 21F8022B 		strh T2,[T1],#2 
 110 2cfa 04F14802 		add T2,UP,#USER_CTOP 
ARM GAS  forth.s 			page 107


 111 2cfe 1160     		str T1,[T2]
 112 2d00 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 2d02 47F8046D 		_PUSH 
 118 2d06 04F11406 		ADD TOS,UP,#STDIN 
 119 2d0a E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2d0c 47F8046D 		_PUSH 
 125 2d10 04F11806 		ADD TOS,UP,#STDOUT
 126 2d14 DEE7     		_NEXT 
 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 2d16 602C0000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 2d24 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 2d2c 47F8046D 	    _PUSH 
 135 2d30 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 2d32 81EA0101 	    eor T1,T1 
 137 2d36 8162     	    str T1,[T0,#SCB_CFSR]
 138 2d38 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 2d3a 1A2D0000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 2d48 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 2d50 47F8046D 		_PUSH 
 147 2d54 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 2d56 81EA0101 	    eor T1,T1 
 149 2d5a 8163     	    str T1,[T0,#SCB_BFAR]
 150 2d5c BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 2d5e 3E2D0000 		_HEADER QKEY,4,"KEY?" 
 156      044B4559 
 156      3F00
 157 2d68 504700BF 		_NEST 
ARM GAS  forth.s 			page 108


 158 2d6c 032D0000 		_ADR TSTDIN // ' STDIN 
 159 2d70 853A0000 		_ADR ATEXE
 160 2d74 DB2C0000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 2d78 622D0000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 2d80 504700BF 		_NEST
 168              	KEY1:
 169 2d84 011B0000 		_ADR CAPS_LED 
 170 2d88 692D0000 		_ADR	QKEY 
 171 2d8c 472F0000 		_QBRAN	KEY1
 171      842D0000 
 172 2d94 DB2C0000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 2d98 7C2D0000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 2da4 504700BF 		_NEST 
 180 2da8 0D2D0000 		_ADR TSTDOUT 
 181 2dac 853A0000 		_ADR ATEXE 
 182 2db0 DB2C0000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
ARM GAS  forth.s 			page 109


 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 2db4 9C2D0000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 2dc0 504700BF 		_NEST
 216 2dc4 89330000 		_ADR ABSS   
 217 2dc8 41350000 		_ADR SEED 
 218 2dcc A12F0000 		_ADR AT 
 219 2dd0 95300000 		_ADR DUPP 
 220 2dd4 072F0000 		_DOLIT 13
 220      0D000000 
 221 2ddc 49310000 		_ADR LSHIFT 
 222 2de0 01310000 		_ADR XORR  
 223 2de4 95300000 		_ADR DUPP 
 224 2de8 072F0000 		_DOLIT 17 
 224      11000000 
 225 2df0 31310000 		_ADR RSHIFT 
 226 2df4 01310000 		_ADR XORR 
 227 2df8 95300000 		_ADR DUPP
 228 2dfc 072F0000 		_DOLIT 5 
 228      05000000 
 229 2e04 49310000 		_ADR LSHIFT 
 230 2e08 01310000 		_ADR XORR  
 231 2e0c 95300000 		_ADR DUPP 
 232 2e10 41350000 		_ADR SEED 
 233 2e14 8D2F0000 		_ADR STORE 
 234 2e18 072F0000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 2e20 D9300000 		_ADR ANDD 
 236 2e24 A5300000 		_ADR SWAP 
 237 2e28 09390000 		_ADR MODD 
 238 2e2c DB2C0000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 2e30 B82D0000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 2e3c 504700BF 		_NEST 
 247 2e40 71350000 		_ADR TIMER 
 248 2e44 8D2F0000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2e48 71350000 		_ADR TIMER 
 251 2e4c A12F0000 		_ADR AT 
 252 2e50 472F0000 		_QBRAN PAUSE_EXIT 
 252      602E0000 
 253 2e58 6F2F0000 		_BRAN PAUSE_LOOP 
 253      482E0000 
 254              	PAUSE_EXIT: 		
 255 2e60 DB2C0000 		_UNNEST 
 256              	
 257              	/******************************************
ARM GAS  forth.s 			page 110


 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2e64 342E0000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 2e70 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2e74 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 2e7c 3600     		movs TOS,TOS 
 265 2e7e 57F8046B 		_POP
 266 2e82 03D0     		beq ULED_OFF
 267 2e84 4FEA0040 		lsl T0,#16 
 268 2e88 8861     		str T0,[T1,#GPIO_BSRR]
 269 2e8a 23E7     		_NEXT 
 270              	ULED_OFF:
 271 2e8c 8861     		str T0,[T1,#GPIO_BSRR]
 272 2e8e 21E7     		_NEXT    
 273              	
 274              	/**************************
 275              	   JOYSTK  ( -- u )
 276              	   read joystick port 
 277              	**************************/
 278 2e90 682E0000 		_HEADER JOYSTK,6,"JOYSTK"
 278      064A4F59 
 278      53544B00 
 279 2e9c 504700BF 		_NEST 
 280 2ea0 072F0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 280      10000240 
 281 2ea8 A12F0000 		_ADR AT 
 282 2eac 072F0000 		_DOLIT 0x100f 
 282      0F100000 
 283 2eb4 D9300000 		_ADR ANDD 
 284 2eb8 DB2C0000 		_UNNEST 
 285              	
 286              	/****************************
 287              		TONE ( msec freq -- )
 288              	input:
 289              		freq  frequence hertz 
 290              		msec  durration in msec 
 291              	*****************************/
 292 2ebc 942E0000 		_HEADER TONE,4,"TONE"
 292      04544F4E 
 292      450000BF 
 293 2ec8 48F68050 		_MOV32 r0,6000000 // Fclk 
 293      C0F25B00 
 294 2ed0 B0FBF6F0 		udiv r0,r0,TOS
 295 2ed4 57F8046B 		_POP  
 296 2ed8 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 296      C4F20001 
 297 2ee0 C862     		str r0,[r1,#TIM_ARR]
 298 2ee2 4FEA5000 		lsr r0,#1
 299 2ee6 4863     		str r0,[r1,#TIM_CCR1]
 300 2ee8 4FF00100 		mov r0,#1 
 301 2eec 0862     		str r0,[r1,#TIM_CCER]
 302 2eee 0860     		str r0,[r1,#TIM_CR1]
 303 2ef0 C868     		ldr r0,[r1,#TIM_DIER]
ARM GAS  forth.s 			page 111


 304 2ef2 C4F8AC60 		str TOS,[UP,#TONE_DTMR]
 305              	//	orr r0,#2
 306              	//	str r0,[r1,#TIM_DIER]
 307 2ef6 57F8046B 		_POP
 308 2efa EBE6     		_NEXT 
 309              	
 310              	/***************
 311              	//  The kernel
 312              	***************/
 313              	
 314              	/********************
 315              	    NOP	( -- )
 316              	 	do nothing.
 317              	*********************/
 318 2efc C02E0000 		_HEADER NOP,3,"NOP"
 318      034E4F50 
 319 2f04 E6E6     		_NEXT 
 320              	 
 321              	/********************
 322              	    doLIT	( -- w )
 323              	 	Push an inline literal.
 324              	hidden word used by compiler 
 325              	*********************/
 326              	DOLIT:
 327 2f06 47F8046D 		_PUSH				//  store TOS on data stack
 328 2f0a 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 329 2f0e E1E6     		_NEXT 
 330              	
 331              	/*******************************
 332              	    EXECUTE	( ca -- )
 333              	 	Execute the word at ca.
 334              	*******************************/
 335 2f10 002F0000 		_HEADER EXECU,7,"EXECUTE"
 335      07455845 
 335      43555445 
 336 2f1c 46F00105 		ORR	WP,TOS,#1 
 337 2f20 57F8046B 		_POP
 338 2f24 2847     		BX WP 
 339 2f26 D5E6     		_NEXT 
 340              	
 341              	/**********************************************************
 342              	    donext	( -- ) counter on R:
 343              	 	Run time code for the single index loop.
 344              	 	: next ( -- ) \ hilevel model
 345              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 346              	hidden word used by compiler 	  
 347              	*********************************************************/
 348              	DONXT:
 349 2f28 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 350 2f2c 22B9     		CBNZ T2,NEXT1 
 351              		/* loop done */
 352 2f2e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 353 2f32 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 354 2f36 CDE6     		_NEXT
 355              	NEXT1:
 356              		/* decrement loop counter */
 357 2f38 A2F10102 		SUB	T2,T2,#1
ARM GAS  forth.s 			page 112


 358 2f3c C8F80020 		STR	T2,[RSP]
 359 2f40 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 360 2f44 C6E6     		_NEXT 
 361              	
 362              	/**************************************
 363              	    ?branch	( f -- )
 364              	 	Branch if flag is zero.
 365              	hiddend word used by compiler
 366              	**************************************/
 367              	QBRAN:
 368 2f46 3600     		MOVS	TOS,TOS
 369 2f48 57F8046B 		_POP
 370 2f4c 02D1     		BNE	QBRAN1
 371 2f4e DCF800C0 		LDR	IP,[IP]
 372 2f52 BFE6     		_NEXT
 373              	QBRAN1:
 374 2f54 0CF1040C 	 	ADD	IP,IP,#4
 375 2f58 BCE6     		_NEXT
 376              	
 377              	/***********************************
 378              		tbranch ( f -- )
 379              	    branch if flag is true 
 380              	***********************************/
 381              	TBRAN:
 382 2f5a 3600     		MOVS TOS,TOS 
 383 2f5c 57F8046B 		_POP 
 384 2f60 02D0     		BEQ 1f 
 385 2f62 DCF800C0 		LDR IP,[IP]
 386 2f66 B5E6     		_NEXT 
 387 2f68 0CF1040C 	1:  ADD IP,IP,#4
 388 2f6c B2E6     		_NEXT 
 389              	
 390              	
 391              	/***********************************
 392              	    branch	( -- )
 393              	 	Branch to an inline address.
 394              	hidden word used by compiler 
 395              	***********************************/
 396              	BRAN:
 397 2f6e DCF800C0 		LDR	IP,[IP]
 398 2f72 AFE6     		_NEXT
 399              	
 400              	/******************************************
 401              	    EXIT	(  -- )
 402              	 	Exit the currently executing command.
 403              	******************************************/
 404 2f74 142F0000 		_HEADER EXIT,4,"EXIT"
 404      04455849 
 404      540000BF 
 405 2f80 DB2C0000 		_UNNEST
 406              	
 407              	/***********************************
 408              	    !	   ( w a -- )
 409              	 	Pop the data stack to memory.
 410              	************************************/
 411 2f84 782F0000 		_HEADER STORE,1,"!"
 411      012100BF 
ARM GAS  forth.s 			page 113


 412 2f8c 57F8045B 		LDR	WP,[DSP],#4
 413 2f90 3560     		STR	WP,[TOS]
 414 2f92 57F8046B 		_POP
 415 2f96 9DE6     		_NEXT 
 416              	
 417              	/********************************************
 418              	    @	   ( a -- w )
 419              	 	Push memory location to the data stack.
 420              	*********************************************/
 421 2f98 882F0000 		_HEADER AT,1,"@"
 421      014000BF 
 422 2fa0 3668     		LDR	TOS,[TOS]
 423 2fa2 97E6     		_NEXT 
 424              	
 425              	/*******************************************
 426              	    C!	  ( c b -- )
 427              	 	Pop the data stack to byte memory.
 428              	*******************************************/
 429 2fa4 9C2F0000 		_HEADER CSTOR,2,"C!"
 429      02432100 
 430 2fac 57F8045B 		LDR	WP,[DSP],#4
 431 2fb0 3570     		STRB WP,[TOS]
 432 2fb2 57F8046B 		_POP
 433 2fb6 8DE6     		_NEXT
 434              	
 435              	/*********************************************
 436              	    C@	  ( b -- c )
 437              	 	Push byte memory location to the data stack.
 438              	**********************************************/
 439 2fb8 A82F0000 		_HEADER CAT,2,"C@"
 439      02434000 
 440 2fc0 3678     		LDRB	TOS,[TOS]
 441 2fc2 87E6     		_NEXT 
 442              	
 443              	
 444              	/*********************************************
 445              	    R>	  ( -- w  R: w -- ) 
 446              	 	push from rstack.
 447              	**********************************************/
 448 2fc4 BC2F0000 		_HEADER RFROM,2,"R>"
 448      02523E00 
 449 2fcc 47F8046D 		_PUSH
 450 2fd0 58F8046B 		LDR	TOS,[RSP],#4
 451 2fd4 7EE6     		_NEXT 
 452              	
 453              	/***********************************************
 454              		2R> (  -- D ) R: D --  
 455              	    push a double from rstack 
 456              	***********************************************/
 457 2fd6 C82F0000 		_HEADER DRFROM,3,"2R>"
 457      0332523E 
 457      00BF
 458 2fe0 47F8046D 		_PUSH 
 459 2fe4 58F8046B 		LDR TOS,[RSP],#4 
 460 2fe8 47F8046D 		_PUSH 
 461 2fec 58F8046B 		LDR TOS,[RSP],#4
 462 2ff0 70E6     		_NEXT 
ARM GAS  forth.s 			page 114


 463              	
 464              	/************************************************
 465              	    R@	  ( -- w )
 466              	 	Copy top of return stack to the data stack.
 467              	************************************************/
 468 2ff2 DA2F0000 		_HEADER RAT,2,"R@"
 468      02524000 
 468      00BF
 469 2ffc 47F8046D 		_PUSH
 470 3000 D8F80060 		LDR	TOS,[RSP]
 471 3004 66E6     		_NEXT 
 472              	
 473              	/***********************************************
 474              	    >R	  ( w -- ) R: -- w 
 475              	 	pop to rstack.
 476              	************************************************/
 477 3006 F62F0000 		_HEADER TOR,2,">R"
 477      023E5200 
 477      00BF
 478 3010 48F8046D 		STR	TOS,[RSP,#-4]!
 479 3014 57F8046B 		_POP
 480 3018 5CE6     		_NEXT
 481              	
 482              	/*********************************************
 483              		2>R ( d -- ) R: -- d 
 484              		pop a double to rstack 
 485              	*********************************************/
 486 301a 0A300000 		_HEADER DTOR,3,"2>R"
 486      03323E52 
 486      00BF
 487 3024 48F8046D 		STR TOS,[RSP,#-4]!
 488 3028 57F8046B 	    _POP 
 489 302c 48F8046D 		STR TOS,[RSP,#-4]!
 490 3030 57F8046B 		_POP  
 491 3034 4EE6     		_NEXT 	
 492              	
 493              	
 494              	/*******************************
 495              	//	RP! ( u -- )
 496              	// initialize RPP with u 
 497              	*******************************/
 498 3036 1E300000 		_HEADER RPSTOR,3,"RP!"
 498      03525021 
 498      00BF
 499 3040 B046     		MOV RSP,TOS 
 500 3042 57F8046B 		_POP  
 501 3046 45E6     		_NEXT 
 502              	
 503              	/********************************
 504              		SP! ( u -- )
 505              	 initialize SPP with u 
 506              	********************************/
 507 3048 3A300000 		_HEADER SPSTOR,3,"SP!"
 507      03535021 
 508 3050 3746     		MOV DSP,TOS 
 509 3052 86EA0606 		EOR TOS,TOS,TOS 
 510 3056 3DE6     		_NEXT 
ARM GAS  forth.s 			page 115


 511              	
 512              	/**************************************
 513              	    SP@	 ( -- a )
 514              	 	Push the current data stack pointer.
 515              	***************************************/
 516 3058 4C300000 		_HEADER SPAT,3,"SP@"
 516      03535040 
 517 3060 47F8046D 		_PUSH
 518 3064 3E46     		MOV	TOS,DSP
 519 3066 35E6     		_NEXT
 520              	
 521              	/**************************************
 522              	   RP@ ( -- a )
 523              	   push current rstack pointer 
 524              	**************************************/
 525 3068 5C300000 		_HEADER RPAT,3,"RP@"
 525      03525040 
 526 3070 47F8046D 		_PUSH 
 527 3074 4646     		MOV TOS,RSP 
 528 3076 2DE6     		_NEXT 
 529              	
 530              	/********************************
 531              	    DROP	( w -- )
 532              	 	Discard top stack item.
 533              	********************************/
 534 3078 6C300000 		_HEADER DROP,4,"DROP"
 534      0444524F 
 534      500000BF 
 535 3084 57F8046B 		_POP
 536 3088 24E6     		_NEXT 
 537              	
 538              	/*********************************
 539              	    DUP	 ( w -- w w )
 540              	 	Duplicate the top stack item.
 541              	*********************************/
 542 308a 7C300000 		_HEADER DUPP,3,"DUP"
 542      03445550 
 542      00BF
 543 3094 47F8046D 		_PUSH
 544 3098 1CE6     		_NEXT 
 545              	
 546              	/**********************************
 547              	    SWAP	( w1 w2 -- w2 w1 )
 548              	 	Exchange top two stack items.
 549              	**********************************/
 550 309a 8E300000 		_HEADER SWAP,4,"SWAP"
 550      04535741 
 550      5000
 551 30a4 3D68     		LDR	WP,[DSP]
 552 30a6 3E60     		STR	TOS,[DSP]
 553 30a8 2E46     		MOV	TOS,WP
 554 30aa 13E6     		_NEXT 
 555              	
 556              	/***********************************
 557              	    OVER	( w1 w2 -- w1 w2 w1 )
 558              	 	Copy second stack item to top.
 559              	***********************************/
ARM GAS  forth.s 			page 116


 560 30ac 9E300000 		_HEADER OVER,4,"OVER"
 560      044F5645 
 560      520000BF 
 561 30b8 47F8046D 		_PUSH
 562 30bc 7E68     		LDR	TOS,[DSP,#4]
 563 30be 09E6     		_NEXT 
 564              	
 565              	/***********************************
 566              	    0<	  ( n -- t )
 567              	 	Return true if n is negative.
 568              	***********************************/
 569 30c0 B0300000 		_HEADER ZLESS,2,"0<"
 569      02303C00 
 570 30c8 4FEAE676 		ASR TOS,#31
 571 30cc 02E6     		_NEXT 
 572              	
 573              	/********************************
 574              	    AND	 ( w w -- w )
 575              	 	Bitwise AND.
 576              	********************************/
 577 30ce C4300000 		_HEADER ANDD,3,"AND"
 577      03414E44 
 577      00BF
 578 30d8 57F8045B 		LDR	WP,[DSP],#4
 579 30dc 06EA0506 		AND	TOS,TOS,WP
 580 30e0 F8E5     		_NEXT 
 581              	
 582              	/******************************
 583              	    OR	  ( w w -- w )
 584              	 	Bitwise inclusive OR.
 585              	******************************/
 586 30e2 D2300000 		_HEADER ORR,2,"OR"
 586      024F5200 
 586      00BF
 587 30ec 57F8045B 		LDR	WP,[DSP],#4
 588 30f0 46EA0506 		ORR	TOS,TOS,WP
 589 30f4 EEE5     		_NEXT 
 590              	
 591              	/*****************************
 592              	    XOR	 ( w w -- w )
 593              	 	Bitwise exclusive OR.
 594              	*****************************/
 595 30f6 E6300000 		_HEADER XORR,3,"XOR"
 595      03584F52 
 595      00BF
 596 3100 57F8045B 		LDR	WP,[DSP],#4
 597 3104 86EA0506 		EOR	TOS,TOS,WP
 598 3108 E4E5     		_NEXT 
 599              	
 600              	/**************************************************
 601              	    UM+	 ( w w -- w cy )
 602              	 	Add two numbers, return the sum and carry flag.
 603              	***************************************************/
 604 310a FA300000 		_HEADER UPLUS,3,"UM+"
 604      03554D2B 
 604      00BF
 605 3114 3D68     		LDR	WP,[DSP]
ARM GAS  forth.s 			page 117


 606 3116 AD19     		ADDS	WP,WP,TOS
 607 3118 4FF00006 		MOV	TOS,#0
 608 311c 46F10006 		ADC	TOS,TOS,#0
 609 3120 3D60     		STR	WP,[DSP]
 610 3122 D7E5     		_NEXT 
 611              	
 612              	/*********************************
 613              	    RSHIFT	 ( w # -- w )
 614              	 	arithmetic Right shift # bits.
 615              	**********************************/
 616 3124 0E310000 		_HEADER RSHIFT,6,"RSHIFT"
 616      06525348 
 616      49465400 
 617 3130 57F8045B 		LDR	WP,[DSP],#4
 618 3134 45FA06F6 		MOV	TOS,WP,ASR TOS
 619 3138 CCE5     		_NEXT 
 620              	
 621              	/****************************
 622              	    LSHIFT	 ( w # -- w )
 623              	 	Right shift # bits.
 624              	****************************/
 625 313a 28310000 		_HEADER LSHIFT,6,"LSHIFT"
 625      064C5348 
 625      49465400 
 625      00BF
 626 3148 57F8045B 		LDR	WP,[DSP],#4
 627 314c 05FA06F6 		MOV	TOS,WP,LSL TOS
 628 3150 C0E5     		_NEXT
 629              	
 630              	/*************************
 631              	    +	 ( w w -- w )
 632              	 	Add.
 633              	*************************/
 634 3152 3E310000 		_HEADER PLUS,1,"+"
 634      012B
 635 3158 57F8045B 		LDR	WP,[DSP],#4
 636 315c 2E44     		ADD	TOS,TOS,WP
 637 315e B9E5     		_NEXT 
 638              	
 639              	/************************
 640              	    -	 ( w w -- w )
 641              	 	Subtract.
 642              	************************/
 643 3160 56310000 		_HEADER SUBB,1,"-"
 643      012D00BF 
 644 3168 57F8045B 		LDR	WP,[DSP],#4
 645 316c C6EB0506 		RSB	TOS,TOS,WP
 646 3170 B0E5     		_NEXT 
 647              	
 648              	/************************
 649              	    *	 ( w w -- w )
 650              	 	Multiply.
 651              	***********************/
 652 3172 64310000 		_HEADER STAR,1,"*"
 652      012A
 653 3178 57F8045B 		LDR	WP,[DSP],#4
 654 317c 05FB06F6 		MUL	TOS,WP,TOS
ARM GAS  forth.s 			page 118


 655 3180 A8E5     		_NEXT 
 656              	
 657              	/***************************
 658              	    UM*	 ( w w -- ud )
 659              	 	Unsigned multiply.
 660              	****************************/
 661 3182 76310000 		_HEADER UMSTA,3,"UM*"
 661      03554D2A 
 661      00BF
 662 318c 3D68     		LDR	WP,[DSP]
 663 318e A6FB0523 		UMULL	T2,T3,TOS,WP
 664 3192 3A60     		STR	T2,[DSP]
 665 3194 1E46     		MOV	TOS,T3
 666 3196 9DE5     		_NEXT 
 667              	
 668              	/***************************
 669              	    M*	 ( w w -- d )
 670              	 	signed multiply.
 671              		hold double result
 672              	***************************/
 673 3198 86310000 		_HEADER MSTAR,2,"M*"
 673      024D2A00 
 674 31a0 3D68     		LDR	WP,[DSP]
 675 31a2 86FB0523 		SMULL	T2,T3,TOS,WP
 676 31a6 3A60     		STR	T2,[DSP]
 677 31a8 1E46     		MOV	TOS,T3
 678 31aa 93E5     		_NEXT 
 679              	
 680              	/***************************
 681              	    1+	 ( w -- w+1 )
 682              	 	Add 1.
 683              	***************************/
 684 31ac 9C310000 		_HEADER ONEP,2,"1+"
 684      02312B00 
 685 31b4 06F10106 		ADD	TOS,TOS,#1
 686 31b8 8CE5     		_NEXT 
 687              	
 688              	/***************************
 689              	    1-	 ( w -- w-1 )
 690              	 	Subtract 1.
 691              	***************************/
 692 31ba B0310000 		_HEADER ONEM,2,"1-"
 692      02312D00 
 692      00BF
 693 31c4 A6F10106 		SUB	TOS,TOS,#1
 694 31c8 84E5     		_NEXT 
 695              	
 696              	/***************************
 697              	    2+	 ( w -- w+2 )
 698              	 	Add 2.
 699              	**************************/
 700 31ca BE310000 		_HEADER TWOP,2,"2+"
 700      02322B00 
 700      00BF
 701 31d4 06F10206 		ADD	TOS,TOS,#2
 702 31d8 7CE5     		_NEXT
 703              	
ARM GAS  forth.s 			page 119


 704              	/**************************
 705              	    2-	 ( w -- w-2 )
 706              	 	Subtract 2.
 707              	**************************/
 708 31da CE310000 		_HEADER TWOM,2,"2-"
 708      02322D00 
 708      00BF
 709 31e4 A6F10206 		SUB	TOS,TOS,#2
 710 31e8 74E5     		_NEXT
 711              	
 712              	/***************************
 713              	    CELL+	( w -- w+4 )
 714              	 	Add CELLL.
 715              	***************************/
 716 31ea DE310000 		_HEADER CELLP,5,"CELL+"
 716      0543454C 
 716      4C2B
 717 31f4 06F10406 		ADD	TOS,TOS,#CELLL
 718 31f8 6CE5     		_NEXT
 719              	
 720              	/***************************
 721              	    CELL-	( w -- w-4 )
 722              	 	Subtract CELLL.
 723              	**************************/
 724 31fa EE310000 		_HEADER CELLM,5,"CELL-"
 724      0543454C 
 724      4C2D
 725 3204 A6F10406 		SUB	TOS,TOS,#CELLL
 726 3208 64E5     		_NEXT
 727              	
 728              	/**************************** 
 729              	    BL	( -- 32 )
 730              	 	Blank (ASCII space).
 731              	*****************************/
 732 320a FE310000 		_HEADER BLANK,2,"BL"
 732      02424C00 
 732      00BF
 733 3214 47F8046D 		_PUSH
 734 3218 4FF02006 		MOV	TOS,#32
 735 321c 5AE5     		_NEXT 
 736              	
 737              	/**************************
 738              	    CELLS	( w -- w*4 )
 739              	 	Multiply CELLL 
 740              	***************************/
 741 321e 0E320000 		_HEADER CELLS,5,"CELLS"
 741      0543454C 
 741      4C53
 742 3228 4FEA8606 		LSL TOS,#2
 743 322c 52E5     		_NEXT
 744              	
 745              	/***************************
 746              	    CELL/	( w -- w/4 )
 747              	 	Divide by CELLL.
 748              	***************************/
 749 322e 22320000 		_HEADER CELLSL,5,"CELL/"
 749      0543454C 
ARM GAS  forth.s 			page 120


 749      4C2F
 750 3238 4FEAA606 		ASR TOS,#2
 751 323c 4AE5     		_NEXT
 752              	
 753              	/*************************
 754              	    2*	( w -- w*2 )
 755              	 	Multiply 2.
 756              	*************************/
 757 323e 32320000 		_HEADER TWOST,2,"2*"
 757      02322A00 
 757      00BF
 758 3248 4FEA4606 		MOV	TOS,TOS,LSL#1
 759 324c 42E5     		_NEXT
 760              	
 761              	/*************************
 762              	    2/	( w -- w/2 )
 763              	 	Divide by 2.
 764              	***********************/
 765 324e 42320000 		_HEADER TWOSL,2,"2/"
 765      02322F00 
 765      00BF
 766 3258 4FEA6606 		MOV	TOS,TOS,ASR#1
 767 325c 3AE5     		_NEXT
 768              	
 769              	/****************************
 770              	    ?DUP	( w -- w w | 0 )
 771              	 	Conditional duplicate.
 772              	*****************************/
 773 325e 52320000 		_HEADER QDUP,4,"?DUP"
 773      043F4455 
 773      5000
 774 3268 3500     		MOVS	WP,TOS
 775 326a 18BF     		IT NE 
 776 326c 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 777 3270 30E5     		_NEXT
 778              	
 779              	/***********************************
 780              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 781              	 	Rotate top 3 items.
 782              	*************************************/
 783 3272 62320000 		_HEADER ROT,3,"ROT"
 783      03524F54 
 783      00BF
 784 327c 3868     		LDR	T0,[DSP]  // w2 
 785 327e 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 786 3280 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 787 3282 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 788 3284 26E5     		_NEXT
 789              	
 790              	/*********************************
 791              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 792              	 left rotate top 3 elements 
 793              	********************************/
 794 3286 76320000 		_HEADER NROT,4,"-ROT"
 794      042D524F 
 794      5400
 795 3290 7868     		LDR T0,[DSP,#4]
ARM GAS  forth.s 			page 121


 796 3292 7E60     		STR TOS,[DSP,#4]	
 797 3294 3E68     		LDR TOS,[DSP]
 798 3296 3860     		STR T0,[DSP]
 799 3298 1CE5     		_NEXT 
 800              	
 801              	/*********************************
 802              	    2DROP	( w1 w2 -- )
 803              	 	Drop top 2 items.
 804              	*********************************/
 805 329a 8A320000 		_HEADER DDROP,5,"2DROP"
 805      05324452 
 805      4F50
 806 32a4 57F8046B 		_POP
 807 32a8 57F8046B 		_POP
 808 32ac 12E5     		_NEXT 
 809              	
 810              	/********************************
 811              		3DROP ( w1 w2 w3 -- )
 812              		drop top 3 items 
 813              	********************************/
 814 32ae 9E320000 		_HEADER TDROP,5,"3DROP"
 814      05334452 
 814      4F50
 815 32b8 07F10807 	    add DSP,#8 
 816 32bc 57F8046B 	    _POP 
 817 32c0 08E5     	    _NEXT 
 818              	
 819              	/***********************************
 820              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 821              	 	Duplicate top 2 items.
 822              	************************************/
 823 32c2 B2320000 		_HEADER DDUP,4,"2DUP"
 823      04324455 
 823      5000
 824 32cc 3868     		LDR	T0,[DSP] // w1
 825 32ce 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 826 32d2 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 827 32d6 FDE4     		_NEXT
 828              	
 829              	/******************************
 830              	    D+	( d1 d2 -- d3 )
 831              	 	Add top 2 double numbers.
 832              	******************************/
 833 32d8 C6320000 		_HEADER DPLUS,2,"D+"
 833      02442B00 
 834 32e0 57F8045B 		LDR	WP,[DSP],#4
 835 32e4 57F8042B 		LDR	T2,[DSP],#4
 836 32e8 3B68     		LDR	T3,[DSP]
 837 32ea ED18     		ADDS	WP,WP,T3
 838 32ec 3D60     		STR	WP,[DSP]
 839 32ee 46EB0206 		ADC	TOS,TOS,T2
 840 32f2 EFE4     		_NEXT
 841              	
 842              	/******************************
 843              		DABS ( d -- ud )
 844              		absolute value double 
 845              	*****************************/
ARM GAS  forth.s 			page 122


 846 32f4 DC320000 		_HEADER DABS,4,"DABS"
 846      04444142 
 846      530000BF 
 847 3300 16F0004F 		tst TOS,#(1<<31)
 848 3304 09D0     		beq 9f 
 849 3306 6FEA0606 		mvn TOS,TOS 
 850 330a 3D68     		ldr WP,[DSP]
 851 330c 6FEA0505 		mvn WP,WP 
 852 3310 0135     		adds WP,#1
 853 3312 3D60     		str WP,[DSP]
 854 3314 01D3     		bcc 9f 
 855 3316 06F10106 		add TOS,#1 
 856 331a DBE4     	9:	_NEXT 
 857              	
 858              	/*****************************
 859              	  UD> ( d1 d2 -- f )
 860              	  unsigned compare double d1 > d2 
 861              	******************************/
 862 331c F8320000 		_HEADER UDGREAT,3,"UD>"
 862      0355443E 
 863 3324 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 864 3328 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 865 332a B042     		cmp T0,TOS 
 866 332c 02D8     		bhi 1f
 867 332e 04D4     		bmi 2f  
 868 3330 A942     		cmp T1,WP 
 869 3332 02D9     		bls 2f 
 870 3334 4FF0FF36 	1:	mov TOS,#-1 
 871 3338 CCE4     		_NEXT 
 872 333a 4FF00006 	2:  mov TOS,#0 
 873 333e C9E4     		_NEXT 
 874              	
 875              	/******************************
 876              		D0= ( d -- f )
 877              		double 0= 
 878              	*****************************/
 879 3340 20330000 		_HEADER DZEQUAL,3,"D0="
 879      0344303D 
 880 3348 3046     		mov T0,TOS
 881 334a 57F8046B 		_POP 
 882 334e 46EA0006 		orr TOS,T0 
 883 3352 01D0     		beq 9f
 884 3354 6FF00006 		mvn TOS,#0 
 885 3358 BCE4     	9:	_NEXT 
 886              	
 887              	/*****************************
 888              	    NOT	 ( w -- !w )
 889              	 	1"s complement.
 890              	*****************************/
 891 335a 44330000 		_HEADER INVER,3,"NOT"
 891      034E4F54 
 891      00BF
 892 3364 6FEA0606 		MVN	TOS,TOS
 893 3368 B4E4     		_NEXT
 894              	
 895              	/*****************************
 896              	    NEGATE	( w -- -w )
ARM GAS  forth.s 			page 123


 897              	 	2's complement.
 898              	***************************/
 899 336a 5E330000 		_HEADER NEGAT,6,"NEGATE"
 899      064E4547 
 899      41544500 
 899      00BF
 900 3378 C6F10006 		RSB	TOS,TOS,#0
 901 337c AAE4     		_NEXT
 902              	
 903              	/***************************
 904              	    ABS	 ( w -- |w| )
 905              	 	Absolute.
 906              	**************************/
 907 337e 6E330000 		_HEADER ABSS,3,"ABS"
 907      03414253 
 907      00BF
 908 3388 16F0004F 		TST	TOS,#0x80000000
 909 338c 18BF     		IT NE
 910 338e 7642     	    RSBNE   TOS,TOS,#0
 911 3390 A0E4     		_NEXT
 912              	
 913              	/**************************
 914              		CLZ ( n - n )
 915              		count leading zeros 
 916              	**************************/
 917 3392 82330000 		_HEADER CLZ,3,"CLZ"
 917      03434C5A 
 917      00BF
 918 339c B6FA86F6 		clz TOS,TOS 
 919 33a0 98E4     		_NEXT 
 920              	
 921              	/*************************
 922              		CTZ ( n -- n )
 923              		count trailing zeros 
 924              	************************/
 925 33a2 96330000 		_HEADER CTZ,3,"CTZ"
 925      0343545A 
 925      00BF
 926 33ac 80EA0000 		eor T0,T0 
 927 33b0 16F0010F 	1:  tst TOS,#1 
 928 33b4 04D1     		bne 2f 
 929 33b6 4FEA5606 		lsr TOS,#1 
 930 33ba 00F10100 		add T0,#1 
 931 33be F7E7     		b 1b 
 932 33c0 0646     	2:  mov TOS,T0 
 933 33c2 87E4     		_NEXT 
 934              	
 935              	
 936              	/*******************
 937              	  0= ( w -- f )
 938              	 TOS==0?
 939              	*******************/
 940 33c4 A6330000 		_HEADER ZEQUAL,2,"0="
 940      02303D00 
 941 33cc 16B9     		cbnz TOS,1f
 942 33ce 4FF0FF36 		mov TOS,#-1
 943 33d2 7FE4     		_NEXT 
ARM GAS  forth.s 			page 124


 944 33d4 86EA0606 	1:  eor TOS,TOS,TOS  
 945 33d8 7CE4     		_NEXT 	
 946              	
 947              	/*********************
 948              	    =	 ( w w -- t )
 949              	 	Equal?
 950              	*********************/
 951 33da C8330000 		_HEADER EQUAL,1,"="
 951      013D
 952 33e0 57F8045B 		LDR	WP,[DSP],#4
 953 33e4 AE42     		CMP	TOS,WP
 954 33e6 0CBF     		ITE EQ 
 955 33e8 6FF00006 	    MVNEQ	TOS,#0
 956 33ec 0026     		MOVNE	TOS,#0
 957 33ee 71E4     		_NEXT
 958              	
 959              	/************************
 960              		<> ( w w -- f )
 961              		different?
 962              	************************/
 963 33f0 DE330000 		_HEADER DIFF,2,"<>"
 963      023C3E00 
 964 33f8 3046     		mov T0,TOS 
 965 33fa 57F8046B 		_POP 
 966 33fe 86EA0006 		eor TOS,T0
 967 3402 B6FA86F0 		clz T0,TOS 
 968 3406 06FA00F6 		lsl TOS,T0 
 969 340a 4FEAE676 		asr TOS,#31 
 970 340e 61E4     		_NEXT 
 971              	
 972              	/************************
 973              	    U<	 ( w w -- t )
 974              	 	Unsigned less?
 975              	*************************/
 976 3410 F4330000 		_HEADER ULESS,2,"U<"
 976      02553C00 
 977 3418 57F8045B 		LDR	WP,[DSP],#4
 978 341c B542     		CMP	WP,TOS
 979 341e 34BF     		ITE CC 
 980 3420 6FF00006 		MVNCC	TOS,#0
 981 3424 0026     		MOVCS	TOS,#0
 982 3426 55E4     		_NEXT
 983              	
 984              	/**********************
 985              	    <	( w w -- t )
 986              	 	Less?
 987              	**********************/
 988 3428 14340000 		_HEADER LESS,1,"<"
 988      013C00BF 
 989 3430 57F8045B 		LDR	WP,[DSP],#4
 990 3434 B542     		CMP	WP,TOS
 991 3436 B4BF     	    ITE LT
 992 3438 6FF00006 		MVNLT	TOS,#0
 993 343c 0026     		MOVGE	TOS,#0
 994 343e 49E4     		_NEXT 
 995              	
 996              	/**********************
ARM GAS  forth.s 			page 125


 997              		U> ( u u -- t|f )
 998              	    unsigned greater 
 999              	**********************/
 1000 3440 2C340000 		_HEADER UGREAT,2,"U>"
 1000      02553E00 
 1001 3448 57F8045B 		LDR WP,[DSP],#4 
 1002 344c AE42     		CMP TOS,WP 
 1003 344e 34BF     		ITE CC  
 1004 3450 6FF00006 		MVNCC TOS,#0 
 1005 3454 0026     		MOVCS TOS,#0
 1006 3456 3DE4     		_NEXT 
 1007              	
 1008              	/***********************
 1009              	    >	( w w -- t )
 1010              	 	greater?
 1011              	***********************/
 1012 3458 44340000 		_HEADER GREAT,1,">"
 1012      013E00BF 
 1013 3460 57F8045B 		LDR	WP,[DSP],#4
 1014 3464 B542     		CMP	WP,TOS
 1015 3466 CCBF     		ITE GT
 1016 3468 6FF00006 	    MVNGT	TOS,#0
 1017 346c 0026     		MOVLE	TOS,#0
 1018 346e 31E4     		_NEXT
 1019              	
 1020              	/***************************
 1021              	    MAX	 ( w w -- max )
 1022              	 	Leave maximum.
 1023              	***************************/
 1024 3470 5C340000 		_HEADER MAX,3,"MAX"
 1024      034D4158 
 1025 3478 57F8045B 		LDR	WP,[DSP],#4
 1026 347c B542     		CMP	WP,TOS
 1027 347e C8BF     		IT GT 
 1028 3480 2E46     		MOVGT	TOS,WP
 1029 3482 27E4     		_NEXT 
 1030              	
 1031              	/**************************
 1032              	    MIN	 ( w w -- min )
 1033              	 	Leave minimum.
 1034              	**************************/
 1035 3484 74340000 		_HEADER MIN,3,"MIN"
 1035      034D494E 
 1036 348c 57F8045B 		LDR	WP,[DSP],#4
 1037 3490 B542     		CMP	WP,TOS
 1038 3492 B8BF     		IT LT
 1039 3494 2E46     		MOVLT	TOS,WP
 1040 3496 1DE4     		_NEXT
 1041              	
 1042              	/***********************
 1043              	    +!	 ( w a -- )
 1044              	 	Add to memory.
 1045              	***********************/
 1046 3498 88340000 		_HEADER PSTOR,2,"+!"
 1046      022B2100 
 1047 34a0 57F8045B 		LDR	WP,[DSP],#4
 1048 34a4 3268     		LDR	T2,[TOS]
ARM GAS  forth.s 			page 126


 1049 34a6 2A44     		ADD	T2,T2,WP
 1050 34a8 3260     		STR	T2,[TOS]
 1051 34aa 57F8046B 		_POP
 1052 34ae 11E4     		_NEXT
 1053              	
 1054              	/************************
 1055              	    2!	 ( d a -- )
 1056              	 	Store double number.
 1057              	*************************/
 1058 34b0 9C340000 		_HEADER DSTOR,2,"2!"
 1058      02322100 
 1059 34b8 57F8045B 		LDR	WP,[DSP],#4
 1060 34bc 57F8042B 		LDR	T2,[DSP],#4
 1061 34c0 46F8045B 		STR	WP,[TOS],#4
 1062 34c4 3260     		STR	T2,[TOS]
 1063 34c6 57F8046B 		_POP
 1064 34ca 03E4     		_NEXT
 1065              	
 1066              	/************************
 1067              	    2@	 ( a -- d )
 1068              	 	Fetch double number.
 1069              	************************/
 1070 34cc B4340000 		_HEADER DAT,2,"D@"
 1070      02444000 
 1071 34d4 7568     		LDR	WP,[TOS,#4]
 1072 34d6 47F8045D 		STR	WP,[DSP,#-4]!
 1073 34da 3668     		LDR	TOS,[TOS]
 1074 34dc FFF7FABB 		_NEXT
 1075              	
 1076              	/***************************
 1077              	    COUNT	( b -- b+1 c )
 1078              	 	Fetch length of string.
 1079              	****************************/
 1080 34e0 D0340000 		_HEADER COUNT,5,"COUNT"
 1080      05434F55 
 1080      4E5400BF 
 1081 34ec 16F8015B 		LDRB	WP,[TOS],#1
 1082 34f0 47F8046D 		_PUSH
 1083 34f4 2E46     		MOV	TOS,WP
 1084 34f6 FFF7EDBB 		_NEXT
 1085              	
 1086              	/******************************
 1087              	    DNEGATE	( d -- -d )
 1088              	 	Negate double number.
 1089              	**************************/
 1090 34fa E4340000 		_HEADER DNEGA,7,"DNEGATE"
 1090      07444E45 
 1090      47415445 
 1090      00BF
 1091 3508 3D68     		LDR	WP,[DSP]
 1092 350a A2EB0202 		SUB	T2,T2,T2
 1093 350e 551B     		SUBS WP,T2,WP
 1094 3510 62EB0606 		SBC	TOS,T2,TOS
 1095 3514 3D60     		STR	WP,[DSP]
 1096 3516 FFF7DDBB 		_NEXT
 1097              	
 1098              	/******************************
ARM GAS  forth.s 			page 127


 1099              	  System and user variables
 1100              	******************************/
 1101              	
 1102              	/*******************************
 1103              	  doVAR	( -- a )
 1104              	  Run time routine for VARIABLE and CREATE.
 1105              	hidden word used by compiler
 1106              	********************************/
 1107              	DOVAR:
 1108 351a 47F8046D 		_PUSH
 1109 351e 6646     		MOV TOS,IP
 1110 3520 0CF1040C 		ADD IP,IP,#4 
 1111 3524 FFF7D9BB 		B UNNEST 
 1112              	
 1113              	/**********************************
 1114              	    doCON	( -- a ) 
 1115              	 	Run time routine for CONSTANT.
 1116              	hidden word used by compiler 
 1117              	***********************************/
 1118              	DOCON:
 1119 3528 47F8046D 		_PUSH
 1120 352c 5CF8046B 		LDR.W TOS,[IP],#4 
 1121 3530 FFF7D3BB 		B UNNEST 
 1122              	
 1123              	/***********************
 1124              	  system variables 
 1125              	***********************/
 1126              	
 1127              	/**************************
 1128              	 SEED ( -- a)
 1129              	 return PRNG seed address 
 1130              	**************************/
 1131 3534 FE340000 		_HEADER SEED,4,"SEED"
 1131      04534545 
 1131      440000BF 
 1132 3540 47F8046D 		_PUSH 
 1133 3544 04F10406 		ADD TOS,UP,#RNDSEED
 1134 3548 FFF7C4BB 		_NEXT 	
 1135              	
 1136              	/****************************************
 1137              	  MSEC ( -- a)
 1138              	 return address of milliseconds counter
 1139              	****************************************/
 1140 354c 38350000 		_HEADER MSEC,4,"MSEC"
 1140      044D5345 
 1140      430000BF 
 1141 3558 47F8046D 	    _PUSH
 1142 355c 04F10806 	    ADD TOS,UP,#TICKS
 1143 3560 FFF7B8BB 	    _NEXT 
 1144              	
 1145              	/*************************
 1146              	 TIMER ( -- a )
 1147              	 count down timer 
 1148              	**********************/
 1149 3564 50350000 		_HEADER TIMER,5,"TIMER"
 1149      0554494D 
 1149      455200BF 
ARM GAS  forth.s 			page 128


 1150 3570 47F8046D 		 _PUSH 
 1151 3574 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1152 3578 FFF7ACBB 	    _NEXT
 1153              	
 1154              	/*****************************
 1155              	    'BOOT	 ( -- a )
 1156              	 	boot up application vector 
 1157              	*****************************/
 1158 357c 68350000 		_HEADER TBOOT,5,"'BOOT"
 1158      0527424F 
 1158      4F5400BF 
 1159 3588 47F8046D 		_PUSH
 1160 358c 04F11006 		ADD	TOS,UP,#BOOT 
 1161 3590 FFF7A0BB 		_NEXT
 1162              		
 1163              	/********************************************	
 1164              	    BASE	( -- a )
 1165              	 	Storage of the radix base for numeric I/O.
 1166              	**********************************************/
 1167 3594 80350000 		_HEADER BASE,4,"BASE"
 1167      04424153 
 1167      450000BF 
 1168 35a0 47F8046D 		_PUSH
 1169 35a4 04F11C06 		ADD	TOS,UP,#NBASE
 1170 35a8 FFF794BB 		_NEXT
 1171              	
 1172              	/***********************************************
 1173              		BCHAR ( -- flag )
 1174              		indicate if the base character must be output
 1175              		with numeric conversion 
 1176              	************************************************/
 1177 35ac 98350000 			_HEADER BCHR,5,"BCHAR"
 1177      05424348 
 1177      415200BF 
 1178 35b8 47F8046D 			_PUSH 
 1179 35bc 04F12006 			ADD TOS,UP,#BCHAR 
 1180 35c0 FFF788BB 			_NEXT 
 1181              	
 1182              	/*****************************************************
 1183              	    temp	 ( -- a )
 1184              	 	A temporary storage location used in parse and find.
 1185              	hidden word for internal use
 1186              	********************************************************/
 1187              	TEMP:
 1188 35c4 47F8046D 		_PUSH
 1189 35c8 04F12406 		ADD	TOS,UP,#TMP
 1190 35cc FFF782BB 		_NEXT
 1191              	
 1192              	/*******************************************
 1193              	    SPAN	( -- a )
 1194              	 	Hold character count received by EXPECT.
 1195              	********************************************/
 1196 35d0 B0350000 		_HEADER SPAN,4,"SPAN"
 1196      04535041 
 1196      4E0000BF 
 1197 35dc 47F8046D 		_PUSH
 1198 35e0 04F12806 		ADD	TOS,UP,#CSPAN
ARM GAS  forth.s 			page 129


 1199 35e4 FFF776BB 		_NEXT
 1200              	
 1201              	/***********************************************************
 1202              	    >IN	 ( -- a )
 1203              	 	Hold the character pointer while parsing input stream.
 1204              	***********************************************************/
 1205 35e8 D4350000 		_HEADER INN,3,">IN"
 1205      033E494E 
 1206 35f0 47F8046D 		_PUSH
 1207 35f4 04F12C06 		ADD	TOS,UP,#TOIN
 1208 35f8 FFF76CBB 		_NEXT
 1209              	
 1210              	/**************************************
 1211              	    #TIB	( -- a )
 1212              	 	Hold the current count and address 
 1213              		of the terminal input buffer.
 1214              	**************************************/
 1215 35fc EC350000 		_HEADER NTIB,4,"#TIB"
 1215      04235449 
 1215      420000BF 
 1216 3608 47F8046D 		_PUSH
 1217 360c 04F13006 		ADD	TOS,UP,#NTIBB
 1218 3610 FFF760BB 		_NEXT
 1219              	
 1220              	/******************************
 1221              	    'EVAL	( -- a )
 1222              	 	Execution vector of EVAL.
 1223              	*******************************/
 1224 3614 00360000 		_HEADER TEVAL,5,"'EVAL"
 1224      05274556 
 1224      414C00BF 
 1225 3620 47F8046D 		_PUSH
 1226 3624 04F13806 		ADD	TOS,UP,#EVAL
 1227 3628 FFF754BB 		_NEXT
 1228              	
 1229              	/*********************************
 1230              	    HLD	 ( -- a )
 1231              	 	Hold a pointer in building a 
 1232              		numeric output string.
 1233              	*********************************/
 1234 362c 18360000 		_HEADER HLD,3,"HLD"
 1234      03484C44 
 1235 3634 47F8046D 		_PUSH
 1236 3638 04F13C06 		ADD	TOS,UP,#VHOLD
 1237 363c FFF74ABB 		_NEXT
 1238              	
 1239              	/**********************************
 1240              	    CONTEXT	( -- a )
 1241              	 	A area to specify vocabulary 
 1242              		search order.
 1243              	**********************************/
 1244 3640 30360000 		_HEADER CNTXT,7,"CONTEXT"
 1244      07434F4E 
 1244      54455854 
 1245              	CRRNT:
 1246 364c 47F8046D 		_PUSH
 1247 3650 04F14006 		ADD	TOS,UP,#CTXT
ARM GAS  forth.s 			page 130


 1248 3654 FFF73EBB 		_NEXT
 1249              	
 1250              	/******************************
 1251              	    CP	( -- a )
 1252              	 	Point to top name in RAM 
 1253              		vocabulary.
 1254              	******************************/
 1255 3658 44360000 		_HEADER CPP,2,"CP"
 1255      02435000 
 1256 3660 47F8046D 		_PUSH
 1257 3664 04F14806 		ADD	TOS,UP,#USER_CTOP
 1258 3668 FFF734BB 		_NEXT
 1259              	
 1260              	/****************************
 1261              	   FCP ( -- a )
 1262              	  Point ot top of Forth 
 1263              	  system dictionary
 1264              	****************************/
 1265 366c 5C360000 		_HEADER FCP,3,"FCP"
 1265      03464350 
 1266 3674 47F8046D 		_PUSH 
 1267 3678 04F14406 		ADD TOS,UP,#FORTH_CTOP 
 1268 367c FFF72ABB 		_NEXT 
 1269              	
 1270              	/***************************
 1271              	    LAST	( -- a )
 1272              	 	Point to the last name 
 1273              		in the name dictionary.
 1274              	***************************/
 1275 3680 70360000 		_HEADER LAST,4,"LAST"
 1275      044C4153 
 1275      540000BF 
 1276 368c 47F8046D 		_PUSH
 1277 3690 04F14C06 		ADD	TOS,UP,#LASTN
 1278 3694 FFF71EBB 		_NEXT
 1279              	
 1280              	
 1281              	/***********************
 1282              		system constants 
 1283              	***********************/
 1284              	
 1285              	/********************************
 1286              		USER-BEGIN ( -- a )
 1287              	  where user area begin in RAM
 1288              	********************************/
 1289 3698 84360000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1289      0A555345 
 1289      522D4245 
 1289      47494E00 
 1290 36a8 47F8046D 		_PUSH 
 1291 36ac DFF80460 		ldr TOS,USR_BGN_ADR 
 1292 36b0 FFF710BB 		_NEXT 
 1293              	USR_BGN_ADR:
 1294 36b4 12050020 	.word  DTOP 
 1295              	
 1296              	/*********************************
 1297              	  USER_END ( -- a )
ARM GAS  forth.s 			page 131


 1298              	  where user area end in RAM 
 1299              	******************************/
 1300 36b8 9C360000 		_HEADER USER_END,8,"USER-END"
 1300      08555345 
 1300      522D454E 
 1300      440000BF 
 1301 36c8 47F8046D 		_PUSH 
 1302 36cc DFF80460 		ldr TOS,USER_END_ADR 
 1303 36d0 FFF700BB 		_NEXT 
 1304              	USER_END_ADR:
 1305 36d4 7C800120 		.word DEND 
 1306              	
 1307              	
 1308              	/* *********************
 1309              	  Common functions
 1310              	***********************/
 1311              	
 1312              	/********************************
 1313              	    WITHIN	( u ul uh -- t )
 1314              	 	Return true if u is within 
 1315              		the range of ul and uh.
 1316              	********************************/
 1317 36d8 BC360000 		_HEADER WITHI,6,"WITHIN"
 1317      06574954 
 1317      48494E00 
 1318 36e4 504700BF 		_NEST
 1319 36e8 B9300000 		_ADR	OVER
 1320 36ec 69310000 		_ADR	SUBB
 1321 36f0 11300000 		_ADR	TOR
 1322 36f4 69310000 		_ADR	SUBB
 1323 36f8 CD2F0000 		_ADR	RFROM
 1324 36fc 19340000 		_ADR	ULESS
 1325 3700 DB2C0000 		_UNNEST
 1326              	
 1327              	//  Divide
 1328              	
 1329              	/*************************************
 1330              	    UM/MOD	( udl udh u -- ur uq )
 1331              	 	Unsigned divide of a double by a 
 1332              		single. Return mod and quotient.
 1333              	**************************************/
 1334 3704 DC360000 		_HEADER UMMOD,6,"UM/MOD"
 1334      06554D2F 
 1334      4D4F4400 
 1335 3710 4FF00103 		MOV	T3,#1
 1336 3714 57F8045B 		LDR	WP,[DSP],#4
 1337 3718 3A68     		LDR	T2,[DSP]
 1338              	UMMOD0:
 1339 371a 9218     		ADDS	T2,T2,T2
 1340 371c 6D41     		ADCS	WP,WP,WP
 1341 371e 04D3     		BCC	UMMOD1
 1342 3720 A5EB0605 		SUB	WP,WP,TOS
 1343 3724 02F10102 		ADD	T2,T2,#1
 1344 3728 04E0     		B UMMOD2
 1345              	UMMOD1:
 1346 372a AD1B     		SUBS	WP,WP,TOS 
 1347 372c 28BF     		IT CS 
ARM GAS  forth.s 			page 132


 1348 372e 0132     		ADDCS	T2,T2,#1
 1349 3730 00D2     		BCS	UMMOD2
 1350 3732 3544     		ADD	WP,WP,TOS
 1351              	UMMOD2:
 1352 3734 DB18     		ADDS	T3,T3,T3
 1353 3736 F0D3     		BCC	UMMOD0
 1354 3738 1646     		MOV	TOS,T2
 1355 373a 3D60     		STR	WP,[DSP]
 1356 373c FFF7CABA 		_NEXT
 1357              	
 1358              	/****************************
 1359              	    M/MOD	( d n -- r q )
 1360              	 	Signed floored divide 
 1361              		of double by single. 
 1362              		Return mod and quotient.
 1363              	****************************/
 1364 3740 08370000 		_HEADER MSMOD,5,"M/MOD"
 1364      054D2F4D 
 1364      4F4400BF 
 1365 374c 504700BF 		_NEST
 1366 3750 95300000 		_ADR	DUPP
 1367 3754 C9300000 		_ADR	ZLESS
 1368 3758 95300000 		_ADR	DUPP
 1369 375c 11300000 		_ADR	TOR
 1370 3760 472F0000 		_QBRAN MMOD1
 1370      78370000 
 1371 3768 79330000 		_ADR	NEGAT
 1372 376c 11300000 		_ADR	TOR
 1373 3770 09350000 		_ADR	DNEGA
 1374 3774 CD2F0000 		_ADR	RFROM
 1375              	MMOD1:
 1376 3778 11300000 		_ADR	TOR
 1377 377c 95300000 		_ADR	DUPP
 1378 3780 C9300000 		_ADR	ZLESS
 1379 3784 472F0000 		_QBRAN MMOD2
 1379      94370000 
 1380 378c FD2F0000 		_ADR	RAT
 1381 3790 59310000 		_ADR	PLUS
 1382              	MMOD2:
 1383 3794 CD2F0000 		_ADR	RFROM
 1384 3798 11370000 		_ADR	UMMOD
 1385 379c CD2F0000 		_ADR	RFROM
 1386 37a0 472F0000 		_QBRAN	MMOD3
 1386      B4370000 
 1387 37a8 A5300000 		_ADR	SWAP
 1388 37ac 79330000 		_ADR	NEGAT
 1389 37b0 A5300000 		_ADR	SWAP
 1390              	MMOD3:   
 1391 37b4 DB2C0000 		_UNNEST
 1392              	
 1393              	/****************************
 1394              		S>D ( n -- d )
 1395              		convert single to double 
 1396              	*****************************/
 1397 37b8 44370000 		_HEADER STOD,3,"S>D"
 1397      03533E44 
 1398 37c0 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 133


 1399 37c4 4FEAE676 		ASR TOS,#31
 1400 37c8 FFF784BA 		_NEXT 
 1401              	
 1402              	/****************************
 1403              		D2* ( d -- d<<1 )
 1404              		double * 2 
 1405              	***************************/
 1406 37cc BC370000 		_HEADER D2STAR,3,"D2*"
 1406      0344322A 
 1407 37d4 3868     		ldr T0,[DSP]
 1408 37d6 4000     		lsls T0,#1
 1409 37d8 3860     		str T0,[DSP]
 1410 37da 4FEA4606 		lsl TOS,#1
 1411 37de 46F10006 		adc TOS,#0
 1412 37e2 FFF777BA 		_NEXT 
 1413              	
 1414              	/****************************
 1415              		D2/  ( d -- d>>1 )
 1416              		double signed divide by 2 
 1417              	*****************************/
 1418 37e6 D0370000 		_HEADER D2SL,3,"D2/"
 1418      0344322F 
 1418      00BF
 1419 37f0 3868     		ldr T0,[DSP]
 1420 37f2 7610     		asrs TOS,#1
 1421 37f4 4FEA3000 		rrx T0,T0 
 1422 37f8 3860     		str T0,[DSP]
 1423 37fa FFF76BBA 		_NEXT 
 1424              	
 1425              	/***************************
 1426              		D/MOD  ( d+ n+ - r+ qd+ )
 1427              		unsigned double division
 1428              		and modulo 
 1429              		output:
 1430              			qd+ = d+ / n+
 1431              			r+ = qd+ - (d+ * n+ )
 1432              	***************************/
 1433 37fe EA370000 		_HEADER DSLMOD,5,"D/MOD"
 1433      05442F4D 
 1433      4F44
 1434 3808 3D68     		ldr WP,[DSP]  // d+ high 
 1435 380a 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1436 380c 4FF02002 		mov T2,#32 // shift counter  
 1437 3810 81EA0101 		eor T1,T1 // quotient T0:T1  
 1438 3814 25B9     		cbnz WP,1f    
 1439 3816 82EA0202 		eor T2,T2 // nos shifting required 
 1440 381a 0546     		mov WP,T0 
 1441 381c 80EA0000 		eor T0,T0 
 1442 3820 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1443 3822 15F0004F 	    tst WP,#(1<<31) 
 1444 3826 06D1     		bne 2f
 1445 3828 4918     		adds T1,T1,T1 
 1446 382a 4041     		adcs T0,T0,T0 
 1447 382c 45EB0505 		adc WP,WP,WP 
 1448 3830 A2F10102 		sub T2,#1 
 1449 3834 F4E7     		b 1b 
 1450 3836 B5FBF6F3 	2:  udiv T3,WP,TOS
ARM GAS  forth.s 			page 134


 1451 383a 41EA0301 		orr T1,T3   // append partial quotient 
 1452 383e 06FB03F3 		mul T3,TOS
 1453 3842 A5EB0305 		sub WP,T3 //remainder 
 1454 3846 02B1     		cbz T2,8f 
 1455 3848 EAE7     		b 1b 
 1456 384a 7D60     	8:	str WP,[DSP,#4] // remainder 
 1457 384c 3960     		str T1,[DSP]  // q lo 
 1458 384e 0646     		mov TOS,T0  // q hi 		
 1459 3850 FFF740BA 		_NEXT 
 1460              	
 1461              	
 1462              	/****************************
 1463              		D/  ( ud u -- udq )
 1464              		divide unsigned double 
 1465              		by unsigned single 
 1466              		return double quotient
 1467              		rounded to nearest integer 
 1468              	****************************/
 1469 3854 02380000 		_HEADER DSLASH,2,"D/"
 1469      02442F00 
 1470 385c 504700BF 		_NEST 
 1471 3860 95300000 		_ADR DUPP 
 1472 3864 072F0000 		_DOLIT 1 
 1472      01000000 
 1473 386c 31310000 		_ADR RSHIFT 
 1474 3870 11300000 		_ADR TOR 
 1475 3874 09380000 		_ADR DSLMOD 
 1476 3878 7D320000 		_ADR ROT 
 1477 387c CD2F0000 		_ADR RFROM 
 1478 3880 61340000 		_ADR GREAT 
 1479 3884 472F0000 		_QBRAN 9f
 1479      9C380000 
 1480 388c 072F0000 		_DOLIT 1 
 1480      01000000 
 1481 3894 C1370000 		_ADR STOD 
 1482 3898 E1320000 		_ADR DPLUS 
 1483 389c DB2C0000 	9:	_UNNEST 
 1484              	
 1485              	
 1486              	/****************************
 1487              		D* ( d s -- d )
 1488              	    multiply a double 
 1489              		by a single 
 1490              	****************************/
 1491 38a0 58380000 		_HEADER DSTAR,2,"D*"
 1491      02442A00 
 1492              	/*
 1493              		_NEST 
 1494              		_ADR NROT 
 1495              		_ADR DUPP 
 1496              		_ADR TOR 
 1497              		_ADR DABS
 1498              		_ADR SWAP  
 1499              		_ADR ROT   
 1500              		_ADR DUPP
 1501              		_ADR TOR
 1502              		_ADR MSTAR
ARM GAS  forth.s 			page 135


 1503              		_ADR ROT
 1504              		_ADR RFROM 
 1505              		_ADR STAR 
 1506              		_ADR PLUS
 1507              		_ADR RFROM 
 1508              		_ADR ZLESS 
 1509              		_QBRAN 9f
 1510              		_ADR DNEGA   
 1511              	9:	_UNNEST 
 1512              	*/
 1513 38a8 57F8040B 		ldr T0,[DSP],#4
 1514 38ac 3968     		ldr T1,[DSP]
 1515 38ae 3860     		str T0,[DSP] 
 1516 38b0 83EA0303 		eor T3,T3 
 1517 38b4 10F0004F 		tst T0,#(1<<31)
 1518 38b8 02D0     		beq 1f 
 1519              		// DNEGATE 
 1520 38ba 591A     		subs T1,T3,T1  
 1521 38bc 63EB0000 		sbc T0,T3,T0 
 1522 38c0 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1523 38c4 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1524 38c8 0E44     		add TOS,T1  // TOS:T2 product  
 1525 38ca 3868     		ldr r0,[DSP]
 1526 38cc 10F0004F 		tst T0,#(1<<31)
 1527 38d0 02D0     		beq 2f 
 1528              		// DNEGATE product 
 1529 38d2 9A1A     		subs T2,T3,T2  
 1530 38d4 63EB0606 		sbc TOS,T3,TOS 
 1531 38d8 3A60     	2:  str T2,[DSP]
 1532 38da FFF7FBB9 		_NEXT 
 1533              	
 1534              	
 1535              	/****************************
 1536              	   /MOD	( n n -- r q )
 1537              		Signed divide. Return
 1538              		mod and quotient.
 1539              	****************************/
 1540 38de A4380000 		_HEADER SLMOD,4,"/MOD"
 1540      042F4D4F 
 1540      4400
 1541 38e8 504700BF 		_NEST
 1542 38ec B9300000 		_ADR	OVER
 1543 38f0 C9300000 		_ADR	ZLESS
 1544 38f4 A5300000 		_ADR	SWAP
 1545 38f8 4D370000 		_ADR	MSMOD
 1546 38fc DB2C0000 		_UNNEST
 1547              	
 1548              	/**************************
 1549              	    MOD	 ( n n -- r )
 1550              	 	Signed divide. Return
 1551              		mod only.
 1552              	**************************/
 1553 3900 E2380000 		_HEADER MODD,3,"MOD"
 1553      034D4F44 
 1554 3908 504700BF 		_NEST
 1555 390c E9380000 		_ADR	SLMOD
 1556 3910 85300000 		_ADR	DROP
ARM GAS  forth.s 			page 136


 1557 3914 DB2C0000 		_UNNEST
 1558              	
 1559              	/*************************
 1560              	    /	   ( n n -- q )
 1561              	 	Signed divide. Return
 1562              		quotient only.
 1563              	**************************/
 1564 3918 04390000 		_HEADER SLASH,1,"/"
 1564      012F00BF 
 1565 3920 504700BF 		_NEST
 1566 3924 E9380000 		_ADR	SLMOD
 1567 3928 A5300000 		_ADR	SWAP
 1568 392c 85300000 		_ADR	DROP
 1569 3930 DB2C0000 		_UNNEST
 1570              	
 1571              	//******************************
 1572              	//  */MOD	( n1 n2 n3 -- r q )
 1573              	/* 	Multiply n1 and n2, then 
 1574              		divide by n3. Return 
 1575              		mod and quotient.
 1576              	******************************/
 1577 3934 1C390000 		_HEADER SSMOD,5,"*/MOD"
 1577      052A2F4D 
 1577      4F4400BF 
 1578 3940 504700BF 		_NEST
 1579 3944 11300000 		_ADR	TOR
 1580 3948 A1310000 		_ADR	MSTAR
 1581 394c CD2F0000 		_ADR	RFROM
 1582 3950 4D370000 		_ADR	MSMOD
 1583 3954 DB2C0000 		_UNNEST
 1584              	
 1585              	//*******************************
 1586              	//  */ ( n1 n2 n3 -- q )
 1587              	/* 	Multiply n1 by n2, then 
 1588              		divide by n3. Return quotient
 1589              		only.
 1590              	*******************************/
 1591 3958 38390000 		_HEADER STASL,2,"*/"
 1591      022A2F00 
 1592 3960 504700BF 		_NEST
 1593 3964 41390000 		_ADR	SSMOD
 1594 3968 A5300000 		_ADR	SWAP
 1595 396c 85300000 		_ADR	DROP
 1596 3970 DB2C0000 		_UNNEST
 1597              	
 1598              	/*******************
 1599              	  Miscellaneous
 1600              	*******************/
 1601              	
 1602              	/*************************
 1603              	    ALIGNED	( b -- a )
 1604              	 	Align address to the 
 1605              		cell boundary.
 1606              	**************************/
 1607 3974 5C390000 		_HEADER ALGND,7,"ALIGNED"
 1607      07414C49 
 1607      474E4544 
ARM GAS  forth.s 			page 137


 1608 3980 06F10306 		ADD	TOS,TOS,#3
 1609 3984 6FF00305 		MVN	WP,#3
 1610 3988 06EA0506 		AND	TOS,TOS,WP
 1611 398c FFF7A2B9 		_NEXT
 1612              	
 1613              	/****************************
 1614              	    >CHAR	( c -- c )
 1615              	 	Filter non-printing 
 1616              		characters.
 1617              	****************************/
 1618 3990 78390000 		_HEADER TCHAR,5,">CHAR"
 1618      053E4348 
 1618      415200BF 
 1619 399c 504700BF 		_NEST
 1620 39a0 072F0000 		_DOLIT  0x7F
 1620      7F000000 
 1621 39a8 D9300000 		_ADR	ANDD
 1622 39ac 95300000 		_ADR	DUPP	// mask msb
 1623 39b0 15320000 		_ADR	BLANK
 1624 39b4 072F0000 		_DOLIT 	127
 1624      7F000000 
 1625 39bc E5360000 		_ADR	WITHI	// check for printable
 1626 39c0 65330000 		_ADR	INVER
 1627 39c4 472F0000 		_QBRAN	TCHA1
 1627      D8390000 
 1628 39cc 85300000 		_ADR	DROP
 1629 39d0 072F0000 		_DOLIT 	'_'	// replace non-printables
 1629      5F000000 
 1630              	TCHA1:
 1631 39d8 DB2C0000 		  _UNNEST
 1632              	
 1633              	/************************
 1634              	    DEPTH	( -- n )
 1635              	 	Return the depth of
 1636              		the data stack.
 1637              	***********************/
 1638 39dc 94390000 		_HEADER DEPTH,5,"DEPTH"
 1638      05444550 
 1638      544800BF 
 1639 39e8 4FF68062 		_MOV32 T2,SPP 
 1639      C2F20102 
 1640 39f0 A2EB0702 		SUB	T2,T2,DSP
 1641 39f4 47F8046D 		_PUSH
 1642 39f8 4FEAA206 		ASR	TOS,T2,#2
 1643 39fc FFF76AB9 		_NEXT
 1644              	
 1645              	/*****************************
 1646              	    PICK	( ... +n -- ... w )
 1647              	 	Copy the nth stack item 
 1648              		to tos.
 1649              	******************************/
 1650 3a00 E0390000 		_HEADER PICK,4,"PICK"
 1650      04504943 
 1650      4B0000BF 
 1651 3a0c 504700BF 		_NEST
 1652 3a10 B5310000 		_ADR	ONEP
 1653 3a14 29320000 		_ADR	CELLS
ARM GAS  forth.s 			page 138


 1654 3a18 61300000 		_ADR	SPAT
 1655 3a1c 59310000 		_ADR	PLUS
 1656 3a20 A12F0000 		_ADR	AT
 1657 3a24 DB2C0000 		_UNNEST
 1658              	
 1659              	/*********************
 1660              	  Memory access
 1661              	*********************/
 1662              	
 1663              	/*************************
 1664              	    HERE	( -- a )
 1665              	 	Return the top of
 1666              		the code dictionary.
 1667              	*************************/
 1668 3a28 043A0000 		_HEADER HERE,4,"HERE"
 1668      04484552 
 1668      450000BF 
 1669 3a34 504700BF 		_NEST
 1670 3a38 61360000 		_ADR	CPP
 1671 3a3c A12F0000 		_ADR	AT
 1672 3a40 DB2C0000 		_UNNEST
 1673              	
 1674              	/***************************	
 1675              	    PAD	 ( -- a )
 1676              	 	Return the address of 
 1677              		a temporary buffer.
 1678              	***************************/
 1679 3a44 2C3A0000 		_HEADER PAD,3,"PAD"
 1679      03504144 
 1680 3a4c 504700BF 		_NEST
 1681 3a50 353A0000 		_ADR	HERE
 1682 3a54 072F0000 		_DOLIT 80
 1682      50000000 
 1683 3a5c 59310000 		_ADR PLUS 
 1684 3a60 DB2C0000 		_UNNEST
 1685              	
 1686              	/***********************
 1687              	    TIB	 ( -- a )
 1688              	 	Return the address 
 1689              		of the terminal 
 1690              		input buffer.
 1691              	************************/
 1692 3a64 483A0000 		_HEADER TIB,3,"TIB"
 1692      03544942 
 1693 3a6c 47F8046D 		_PUSH
 1694 3a70 666B     		ldr TOS,[UP,#TIBUF]
 1695 3a72 FFF72FB9 		_NEXT
 1696              	
 1697              	/*************************
 1698              	    @EXECUTE	( a -- )
 1699              	 	Execute vector stored
 1700              		in address a.
 1701              	*************************/
 1702 3a76 683A0000 		_HEADER ATEXE,8,"@EXECUTE"
 1702      08404558 
 1702      45435554 
 1702      4500
ARM GAS  forth.s 			page 139


 1703 3a84 3500     		MOVS	WP,TOS
 1704 3a86 57F8046B 		_POP
 1705 3a8a 2D68     		LDR	WP,[WP]
 1706 3a8c 45F00105 		ORR	WP,WP,#1
 1707 3a90 18BF     	    IT NE 
 1708 3a92 2847     		BXNE	WP
 1709 3a94 FFF71EB9 		_NEXT
 1710              	
 1711              	/*******************************
 1712              	    CMOVE	( b1 b2 u -- )
 1713              	 	Copy u bytes from b1 to b2.
 1714              	********************************/
 1715 3a98 7A3A0000 		_HEADER CMOVE,5,"CMOVE"
 1715      05434D4F 
 1715      564500BF 
 1716 3aa4 57F8042B 		LDR	T2,[DSP],#4
 1717 3aa8 57F8043B 		LDR	T3,[DSP],#4
 1718 3aac 03E0     		B CMOV1
 1719              	CMOV0:
 1720 3aae 13F8015B 		LDRB	WP,[T3],#1
 1721 3ab2 02F8015B 		STRB	WP,[T2],#1
 1722              	CMOV1:
 1723 3ab6 3600     		MOVS	TOS,TOS
 1724 3ab8 02D0     		BEQ	CMOV2
 1725 3aba A6F10106 		SUB	TOS,TOS,#1
 1726 3abe F6E7     		B CMOV0
 1727              	CMOV2:
 1728 3ac0 57F8046B 		_POP
 1729 3ac4 FFF706B9 		_NEXT
 1730              	
 1731              	/***************************
 1732              	    MOVE	( a1 a2 u -- )
 1733              	 	Copy u words from a1 to a2.
 1734              	*******************************/
 1735 3ac8 9C3A0000 		_HEADER MOVE,4,"MOVE"
 1735      044D4F56 
 1735      450000BF 
 1736 3ad4 4FF00400 		MOV T0,#4 
 1737 3ad8 06F10306 		ADD TOS,#3 
 1738 3adc 26F00306 		BIC TOS,#3
 1739 3ae0 57F8041B 		LDR	T1,[DSP],#4 // dest
 1740 3ae4 57F8042B 		LDR	T2,[DSP],#4 // src 
 1741 3ae8 8A42     		CMP T2,T1 
 1742 3aea 08D5     		BPL MOVE1
 1743 3aec 6FF00300 		MOV T0,#-4 
 1744 3af0 3144     		ADD T1,TOS
 1745 3af2 3244     		ADD T2,TOS 
 1746 3af4 01E0     		B MOVE3
 1747              	MOVE0:
 1748 3af6 1568     		LDR	WP,[T2]
 1749 3af8 0D60     		STR	WP,[T1]
 1750              	MOVE3: 
 1751 3afa 0144     		ADD T1,T0 
 1752 3afc 0244     		ADD T2,T0 
 1753              	MOVE1:
 1754 3afe 3600     		MOVS TOS,TOS
 1755 3b00 02D0     		BEQ	MOVE2
ARM GAS  forth.s 			page 140


 1756 3b02 A6F10406 		SUB	TOS,TOS,#4
 1757 3b06 F6E7     		B MOVE0
 1758              	MOVE2:
 1759 3b08 57F8046B 		_POP
 1760 3b0c FFF7E2B8 		_NEXT
 1761              	
 1762              	/**************************
 1763              	    FILL	( b u c -- )
 1764              	 	Fill u bytes of character
 1765              		c to area beginning at b.
 1766              	******************************/
 1767 3b10 CC3A0000 		_HEADER FILL,4,"FILL"
 1767      0446494C 
 1767      4C0000BF 
 1768 3b1c 03CF     		LDMFD DSP!,{T0,T1} 
 1769 3b1e 0000     		MOVS T0,T0 
 1770 3b20 03D0     		BEQ FILL2
 1771              	FILL1:
 1772 3b22 01F8016B 		STRB	TOS,[T1],#1
 1773 3b26 0138     		SUBS	T0,T0,#1
 1774 3b28 FBD1     		BNE FILL1
 1775              	FILL2:
 1776 3b2a 57F8046B 		_POP
 1777 3b2e FFF7D1B8 		_NEXT
 1778              	
 1779              	/*****************************
 1780              	    PACK$	( b u a -- a )
 1781              	 	Build a counted word with
 1782              		u characters from b. 
 1783              		Null fill.
 1784              	*****************************/
 1785 3b32 143B0000 		_HEADER PACKS,5,"PACK$"
 1785      05504143 
 1785      4B24
 1786 3b3c 504700BF 		_NEST
 1787 3b40 81390000 		_ADR	ALGND
 1788 3b44 95300000 		_ADR	DUPP
 1789 3b48 11300000 		_ADR	TOR		// strings only on cell boundary
 1790 3b4c B9300000 		_ADR	OVER
 1791 3b50 59310000 		_ADR	PLUS
 1792 3b54 B5310000 		_ADR	ONEP 
 1793 3b58 072F0000 		_DOLIT 	0xFFFFFFFC
 1793      FCFFFFFF 
 1794 3b60 D9300000 		_ADR	ANDD			// count mod cell
 1795 3b64 072F0000 		_DOLIT 	0
 1795      00000000 
 1796 3b6c A5300000 		_ADR	SWAP
 1797 3b70 8D2F0000 		_ADR	STORE			// null fill cell
 1798 3b74 FD2F0000 		_ADR	RAT
 1799 3b78 CD320000 		_ADR	DDUP
 1800 3b7c AD2F0000 		_ADR	CSTOR
 1801 3b80 B5310000 		_ADR	ONEP			// save count
 1802 3b84 A5300000 		_ADR	SWAP
 1803 3b88 A53A0000 		_ADR	CMOVE
 1804 3b8c CD2F0000 		_ADR	RFROM
 1805 3b90 DB2C0000 		_UNNEST   			// move string
 1806              	
ARM GAS  forth.s 			page 141


 1807              	/***********************************
 1808              	  Numeric output, single precision
 1809              	***********************************/
 1810              	
 1811              	/**************************
 1812              	    DIGIT	( u -- c )
 1813              	 	Convert digit u to 
 1814              		a character.
 1815              	***************************/
 1816 3b94 363B0000 		_HEADER DIGIT,5,"DIGIT"
 1816      05444947 
 1816      495400BF 
 1817 3ba0 504700BF 		_NEST
 1818 3ba4 072F0000 		_DOLIT 9
 1818      09000000 
 1819 3bac B9300000 		_ADR	OVER
 1820 3bb0 31340000 		_ADR	LESS
 1821 3bb4 072F0000 		_DOLIT	7
 1821      07000000 
 1822 3bbc D9300000 		_ADR	ANDD
 1823 3bc0 59310000 		_ADR	PLUS
 1824 3bc4 072F0000 		_DOLIT	'0'
 1824      30000000 
 1825 3bcc 59310000 		_ADR	PLUS 
 1826 3bd0 DB2C0000 		_UNNEST
 1827              	
 1828              	/*********************************
 1829              	    EXTRACT	( ud base -- ud c )
 1830              	 	Extract the least significant
 1831              		digit from positive double.
 1832              	**********************************/
 1833 3bd4 983B0000 		_HEADER EXTRC,7,"EXTRACT"
 1833      07455854 
 1833      52414354 
 1834 3be0 504700BF 		_NEST
 1835 3be4 09380000 		_ADR	DSLMOD
 1836 3be8 7D320000 		_ADR	ROT
 1837 3bec A13B0000 		_ADR	DIGIT
 1838 3bf0 DB2C0000 		_UNNEST
 1839              	
 1840              	/***************************
 1841              	    <#	  ( -- )
 1842              	 	Initiate the numeric
 1843              		output process.
 1844              	****************************/
 1845 3bf4 D83B0000 		_HEADER BDIGS,2,"<#"
 1845      023C2300 
 1846 3bfc 504700BF 		_NEST
 1847 3c00 4D3A0000 		_ADR	PAD
 1848 3c04 35360000 		_ADR	HLD
 1849 3c08 8D2F0000 		_ADR	STORE
 1850 3c0c DB2C0000 		_UNNEST
 1851              	
 1852              	/*********************************
 1853              	    HOLD	( c -- )
 1854              	 	Insert a character into the 
 1855              		numeric output string.
ARM GAS  forth.s 			page 142


 1856              	**********************************/
 1857 3c10 F83B0000 		_HEADER HOLD,4,"HOLD"
 1857      04484F4C 
 1857      440000BF 
 1858 3c1c 504700BF 		_NEST
 1859 3c20 35360000 		_ADR	HLD
 1860 3c24 A12F0000 		_ADR	AT
 1861 3c28 C5310000 		_ADR	ONEM
 1862 3c2c 95300000 		_ADR	DUPP
 1863 3c30 35360000 		_ADR	HLD
 1864 3c34 8D2F0000 		_ADR	STORE
 1865 3c38 AD2F0000 		_ADR	CSTOR
 1866 3c3c DB2C0000 		_UNNEST
 1867              	
 1868              	/***********************
 1869              	    #	   ( ud -- ud )
 1870              	 	Extract one digit 
 1871              		from ud and append 
 1872              		the digit to output 
 1873              		string.
 1874              	*************************/
 1875 3c40 143C0000 		_HEADER DIG,1,"#"
 1875      012300BF 
 1876 3c48 504700BF 		_NEST
 1877 3c4c A1350000 		_ADR	BASE
 1878 3c50 A12F0000 		_ADR	AT
 1879 3c54 E13B0000 		_ADR	EXTRC
 1880 3c58 1D3C0000 		_ADR	HOLD
 1881 3c5c DB2C0000 		_UNNEST
 1882              	
 1883              	/***************************
 1884              	    #S	  ( ud -- 0 )
 1885              	 	Convert ud until all 
 1886              		digits are added to 
 1887              		the output string.
 1888              	***************************/
 1889 3c60 443C0000 		_HEADER DIGS,2,"#S"
 1889      02235300 
 1890 3c68 504700BF 		_NEST
 1891              	DIGS1:
 1892 3c6c 493C0000 	    _ADR	DIG
 1893 3c70 CD320000 		_ADR	DDUP
 1894 3c74 ED300000 		_ADR    ORR 
 1895 3c78 472F0000 		_QBRAN 	DIGS2
 1895      883C0000 
 1896 3c80 6F2F0000 		_BRAN	DIGS1
 1896      6C3C0000 
 1897              	DIGS2:
 1898 3c88 85300000 		 _ADR DROP 
 1899 3c8c DB2C0000 		 _UNNEST
 1900              	
 1901              	/*********************
 1902              	    SIGN	( n -- )
 1903              	 	Add a minus sign
 1904              		to the numeric
 1905              		output string.
 1906              	*********************/
ARM GAS  forth.s 			page 143


 1907 3c90 643C0000 		_HEADER SIGN,4,"SIGN"
 1907      04534947 
 1907      4E0000BF 
 1908 3c9c 504700BF 		_NEST
 1909 3ca0 C9300000 		_ADR	ZLESS
 1910 3ca4 472F0000 		_QBRAN	SIGN1
 1910      B83C0000 
 1911 3cac 072F0000 		_DOLIT '-'
 1911      2D000000 
 1912 3cb4 1D3C0000 		_ADR	HOLD
 1913              	SIGN1:
 1914 3cb8 DB2C0000 		  _UNNEST
 1915              	
 1916              	/*************************
 1917              	    #>  ( w -- b u )
 1918              	 	Prepare the output 
 1919              		word to be TYPE'd.
 1920              	************************/
 1921 3cbc 943C0000 		_HEADER EDIGS,2,"#>"
 1921      02233E00 
 1922 3cc4 504700BF 		_NEST
 1923 3cc8 85300000 		_ADR	DROP
 1924 3ccc 35360000 		_ADR	HLD
 1925 3cd0 A12F0000 		_ADR	AT
 1926 3cd4 4D3A0000 		_ADR	PAD
 1927 3cd8 B9300000 		_ADR	OVER
 1928 3cdc 69310000 		_ADR	SUBB
 1929 3ce0 DB2C0000 		_UNNEST
 1930              	
 1931              	/**************************
 1932              	    str	 ( n -- b u )
 1933              	 	Convert a signed 
 1934              		integer to a numeric 
 1935              		string.
 1936              	hidden word used by compiler
 1937              	***************************/
 1938              	STRR:
 1939 3ce4 504700BF 		_NEST
 1940 3ce8 C1370000 		_ADR 	STOD 
 1941 3cec 95300000 		_ADR	DUPP
 1942 3cf0 11300000 		_ADR	TOR
 1943 3cf4 01330000 		_ADR	DABS
 1944 3cf8 FD3B0000 		_ADR	BDIGS
 1945 3cfc 693C0000 		_ADR	DIGS
 1946 3d00 CD2F0000 		_ADR	RFROM
 1947 3d04 9D3C0000 		_ADR	SIGN
 1948 3d08 C53C0000 		_ADR	EDIGS
 1949 3d0c DB2C0000 		_UNNEST
 1950              	
 1951              	/*************************
 1952              	    HEX	 ( -- )
 1953              	 	Use radix 16 as 
 1954              		base for numeric 
 1955              		conversions.
 1956              	*************************/
 1957 3d10 C03C0000 		_HEADER HEX,3,"HEX"
 1957      03484558 
ARM GAS  forth.s 			page 144


 1958 3d18 504700BF 		_NEST
 1959 3d1c 072F0000 		_DOLIT 16
 1959      10000000 
 1960 3d24 A1350000 		_ADR	BASE
 1961 3d28 8D2F0000 		_ADR	STORE
 1962 3d2c DB2C0000 		_UNNEST
 1963              	
 1964              	/**************************
 1965              		BIN ( -- )
 1966              		Use radix 2 as 
 1967              		base for numeric 
 1968              		conversion 
 1969              	**************************/
 1970 3d30 143D0000 		_HEADER BIN,3,"BIN"
 1970      0342494E 
 1971 3d38 504700BF 		_NEST 
 1972 3d3c 072F0000 		_DOLIT 2 
 1972      02000000 
 1973 3d44 A1350000 		_ADR BASE 
 1974 3d48 8D2F0000 		_ADR STORE
 1975 3d4c DB2C0000 		_UNNEST 
 1976              	
 1977              	/************************
 1978              	    DECIMAL	( -- )
 1979              	 	Use radix 10 as base
 1980              		for numeric conversions.
 1981              	*************************/
 1982 3d50 343D0000 		_HEADER DECIM,7,"DECIMAL"
 1982      07444543 
 1982      494D414C 
 1983 3d5c 504700BF 		_NEST
 1984 3d60 072F0000 		_DOLIT 10
 1984      0A000000 
 1985 3d68 A1350000 		_ADR	BASE
 1986 3d6c 8D2F0000 		_ADR	STORE
 1987 3d70 DB2C0000 		_UNNEST
 1988              	
 1989              	/************************************
 1990              	  Numeric input, single precision
 1991              	***********************************/
 1992              	
 1993              	/***********************************
 1994              	    DIGIT?	( c base -- u t )
 1995              	 	Convert a character to its 
 1996              		numeric value. A flag 
 1997              		indicates success.
 1998              	**********************************/
 1999 3d74 543D0000 		_HEADER DIGTQ,6,"DIGIT?"
 1999      06444947 
 1999      49543F00 
 2000 3d80 504700BF 		_NEST
 2001 3d84 11300000 		_ADR	TOR
 2002 3d88 072F0000 		_DOLIT 	'0'
 2002      30000000 
 2003 3d90 69310000 		_ADR	SUBB
 2004 3d94 072F0000 		_DOLIT 9
 2004      09000000 
ARM GAS  forth.s 			page 145


 2005 3d9c B9300000 		_ADR	OVER
 2006 3da0 31340000 		_ADR	LESS
 2007 3da4 472F0000 		_QBRAN	DGTQ1
 2007      CC3D0000 
 2008 3dac 072F0000 		_DOLIT 7
 2008      07000000 
 2009 3db4 69310000 		_ADR	SUBB
 2010 3db8 95300000 		_ADR	DUPP
 2011 3dbc 072F0000 		_DOLIT	10
 2011      0A000000 
 2012 3dc4 31340000 		_ADR	LESS
 2013 3dc8 ED300000 		_ADR	ORR
 2014              	DGTQ1:
 2015 3dcc 95300000 		_ADR	DUPP
 2016 3dd0 CD2F0000 		_ADR	RFROM
 2017 3dd4 19340000 		_ADR	ULESS
 2018 3dd8 DB2C0000 		_UNNEST
 2019              	
 2020              	/***********************************
 2021              	 parse digits of positive integer 
 2022              	  d digits count 
 2023              	  n parsed integer
 2024              	  a+ updated pointer  
 2025              	************************************/
 2026              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 2027 3ddc 504700BF 	    _NEST
 2028 3de0 A1350000 	    _ADR BASE 
 2029 3de4 A12F0000 	    _ADR AT 
 2030 3de8 11300000 	    _ADR TOR
 2031 3dec ED340000 	1:  _ADR COUNT 
 2032 3df0 FD2F0000 	    _ADR RAT 
 2033 3df4 813D0000 	    _ADR DIGTQ // d n a c f 
 2034 3df8 472F0000 	    _QBRAN 4f
 2034      683E0000 
 2035 3e00 7D320000 	    _ADR ROT 
 2036 3e04 FD2F0000 		_ADR RAT 
 2037 3e08 8D310000 	    _ADR UMSTA 
 2038 3e0c 472F0000 		_QBRAN 2f // overflow control
 2038      1C3E0000 
 2039 3e14 6F2F0000 		_BRAN 3f 
 2039      503E0000 
 2040 3e1c 95300000 	2:	_ADR DUPP 
 2041 3e20 C9300000 		_ADR ZLESS // if 0< is overflow 
 2042 3e24 472F0000 		_QBRAN 2f 
 2042      343E0000 
 2043 3e2c 6F2F0000 		_BRAN 3f 
 2043      503E0000 
 2044 3e34 59310000 	2:  _ADR PLUS // d a n 
 2045 3e38 A5300000 	    _ADR SWAP // d n a  
 2046 3e3c 7D320000 	    _ADR ROT 
 2047 3e40 B5310000 	    _ADR ONEP 
 2048 3e44 91320000 	    _ADR NROT
 2049 3e48 6F2F0000 	    _BRAN 1b 
 2049      EC3D0000 
 2050 3e50 B1490000 	3:  _ABORQ 16, " number too big "
 2050      10206E75 
 2050      6D626572 
ARM GAS  forth.s 			page 146


 2050      20746F6F 
 2050      20626967 
 2051 3e68 85300000 	4:  _ADR DROP 
 2052 3e6c C5310000 	    _ADR ONEM  // decrement a 
 2053 3e70 CD2F0000 	    _ADR RFROM 
 2054 3e74 85300000 	    _ADR DROP 
 2055 3e78 DB2C0000 	    _UNNEST 
 2056              	
 2057              	/**************************
 2058              	 CHAR? 
 2059              	 check for charcter c 
 2060              	 move pointer if *a==c  
 2061              	**************************/
 2062              	CHARQ: // ( a c -- a+ t | a f )
 2063 3e7c 3868     	    ldr T0,[DSP]
 2064 3e7e 10F8011B 	    ldrb T1,[T0],#1 
 2065 3e82 3246     	    mov T2,TOS 
 2066 3e84 86EA0606 	    eor TOS,TOS
 2067 3e88 9142     	    cmp T1,T2
 2068 3e8a 02D1     	    bne 1f 
 2069 3e8c 3860     	    str T0,[DSP]
 2070 3e8e 6FEA0606 	    mvn TOS,TOS  
 2071 3e92 FEF71FBF 	1:  _NEXT
 2072              	
 2073              	/*********************************
 2074              	   NEG? ( a -- a|a+  f|t )
 2075              	   skip '-'|'+' return -1 if '-' 
 2076              	   else return 0 
 2077              	*********************************/
 2078              	NEGQ: 
 2079 3e96 504700BF 	    _NEST 
 2080 3e9a 072F0000 	    _DOLIT '-' 
 2080      2D000000 
 2081 3ea2 7D3E0000 	    _ADR CHARQ
 2082 3ea6 95300000 	    _ADR DUPP  
 2083 3eaa 472F0000 	    _QBRAN 1f
 2083      BA3E0000 
 2084 3eb2 6F2F0000 	    _BRAN 2f
 2084      D23E0000 
 2085 3eba A5300000 	1:  _ADR SWAP 
 2086 3ebe 072F0000 	    _DOLIT '+'
 2086      2B000000 
 2087 3ec6 7D3E0000 	    _ADR CHARQ
 2088 3eca 85300000 	    _ADR DROP  
 2089 3ece A5300000 		_ADR SWAP 
 2090 3ed2 DB2C0000 	2:  _UNNEST 
 2091              	
 2092              	
 2093              	/**********************************
 2094              	    INT?	( a -- n T | a F )
 2095              	 	parse string  at 'a' for 
 2096              		integer. Push a flag on TOS.
 2097              		integer form:
 2098              			[-]hex_digit+  | 
 2099              			$[-]hex_digit+ |
 2100              			%[-]bin_digit+ | 
 2101              			[-]dec_digit+ 
ARM GAS  forth.s 			page 147


 2102              	**********************************/
 2103 3ed6 783D0000 		_HEADER INTQ,4,"INT?"
 2103      04494E54 
 2103      3F00
 2104 3ee0 504700BF 		_NEST
 2105              	// save BASE 	
 2106 3ee4 A1350000 		_ADR	BASE
 2107 3ee8 A12F0000 		_ADR	AT
 2108 3eec 11300000 		_ADR	TOR
 2109 3ef0 072F0000 		_DOLIT	0      // a 0 
 2109      00000000 
 2110 3ef8 B9300000 		_ADR	OVER   // a 0 a 
 2111 3efc ED340000 		_ADR	COUNT  // a 0 a+ cnt 
 2112 3f00 A5300000 		_ADR    SWAP   
 2113 3f04 072F0000 		_DOLIT  '$' 
 2113      24000000 
 2114 3f0c 7D3E0000 		_ADR    CHARQ 
 2115 3f10 472F0000 		_QBRAN  0f 
 2115      243F0000 
 2116              	// hexadecimal number 
 2117 3f18 193D0000 		_ADR    HEX
 2118 3f1c 6F2F0000 		_BRAN   1f 
 2118      3C3F0000 
 2119 3f24 072F0000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2119      25000000 
 2120 3f2c 7D3E0000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2121 3f30 472F0000 		_QBRAN  2f
 2121      483F0000 
 2122 3f38 393D0000 		_ADR	BIN 
 2123              	1:	// decrement cnt 
 2124 3f3c A5300000 	    _ADR	SWAP 
 2125 3f40 C5310000 		_ADR	ONEM 
 2126 3f44 A5300000 		_ADR	SWAP  // -- a 0 cnt- a  
 2127              	2: // check if negative number 
 2128 3f48 95300000 		_ADR    DUPP 
 2129 3f4c 973E0000 		_ADR    NEGQ 
 2130 3f50 11300000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2131 3f54 95300000 		_ADR    DUPP 
 2132 3f58 7D320000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2133 3f5c 69310000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2134 3f60 472F0000 		_QBRAN  2f  
 2134      743F0000 
 2135 3f68 A5300000 		_ADR    SWAP  // -- a 0 a cnt 
 2136 3f6c C5310000 		_ADR    ONEM  // -- a 0 a cnt--
 2137 3f70 A5300000 		_ADR    SWAP   
 2138 3f74 A5300000 	2:  _ADR    SWAP 
 2139 3f78 11300000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2140 3f7c 072F0000 		_DOLIT  0
 2140      00000000 
 2141 3f84 95300000 		_ADR	DUPP 
 2142 3f88 7D320000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2143 3f8c DD3D0000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2144 3f90 85300000 		_ADR	DROP // a 0 d n 
 2145 3f94 A5300000 		_ADR	SWAP  // a 0 n d 
 2146 3f98 CD2F0000 		_ADR	RFROM // a 0 n d cnt  
 2147 3f9c E1330000 		_ADR	EQUAL // d == cnt ? 
 2148 3fa0 472F0000 		_QBRAN  5f // digits left, not an integer 
ARM GAS  forth.s 			page 148


 2148      D03F0000 
 2149 3fa8 CD2F0000 	2:	_ADR	RFROM  // sign 
 2150 3fac 472F0000 		_QBRAN  3f   // positive integer 
 2150      B83F0000 
 2151 3fb4 79330000 		_ADR	NEGAT
 2152              	3:	
 2153 3fb8 91320000 		_ADR	NROT  // n a 0 
 2154 3fbc A5320000 		_ADR	DDROP // n  
 2155 3fc0 072F0000 		_DOLIT  -1    // n -1 
 2155      FFFFFFFF 
 2156 3fc8 6F2F0000 		_BRAN   7f  
 2156      D83F0000 
 2157 3fd0 CD2F0000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2158 3fd4 A5320000 	    _ADR	DDROP 
 2159              	7: // restore BASE 
 2160 3fd8 CD2F0000 		_ADR	RFROM
 2161 3fdc A1350000 		_ADR	BASE
 2162 3fe0 8D2F0000 		_ADR	STORE
 2163 3fe4 DB2C0000 		_UNNEST
 2164              	
 2165              	/********************************
 2166              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 2167              	    parse number, integer or float 
 2168              	    if not a number return ( a 0 ) 
 2169              	    if integer return ( int -1 ) 
 2170              	    if float return ( float -2 )
 2171              	**********************************/
 2172 3fe8 DA3E0000 	    _HEADER NUMBER,6,"NUMBER"
 2172      064E554D 
 2172      42455200 
 2173 3ff4 504700BF 	    _NEST 
 2174 3ff8 E13E0000 	    _ADR INTQ
 2175 3ffc 69320000 	    _ADR QDUP 
 2176 4000 472F0000 	    _QBRAN 2f 
 2176      0C400000 
 2177 4008 DB2C0000 	    _UNNEST 
 2178 400c D1250000 	2:  _ADR FLOATQ
 2179 4010 DB2C0000 	    _UNNEST 
 2180              	
 2181              	
 2182              	/********************
 2183              	  console I/O
 2184              	********************/
 2185              	
 2186              	/**********************
 2187              	    SPACE	( -- )
 2188              	 	Send the blank 
 2189              		character to 
 2190              		the output device.
 2191              	************************/
 2192 4014 EC3F0000 		_HEADER SPACE,5,"SPACE"
 2192      05535041 
 2192      434500BF 
 2193 4020 504700BF 		_NEST
 2194 4024 15320000 		_ADR	BLANK
 2195 4028 A52D0000 		_ADR	EMIT
 2196 402c DB2C0000 		_UNNEST
ARM GAS  forth.s 			page 149


 2197              	
 2198              	/***************************
 2199              	    SPACES	( +n -- )
 2200              	 	Send n spaces to the 
 2201              		output device.
 2202              	****************************/
 2203 4030 18400000 		_HEADER SPACS,6,"SPACES"
 2203      06535041 
 2203      43455300 
 2204 403c 504700BF 		_NEST
 2205 4040 072F0000 		_DOLIT	0
 2205      00000000 
 2206 4048 79340000 		_ADR	MAX
 2207 404c 11300000 		_ADR	TOR
 2208 4050 6F2F0000 		_BRAN	CHAR2
 2208      5C400000 
 2209              	CHAR1:
 2210 4058 21400000 		_ADR	SPACE
 2211              	CHAR2:
 2212 405c 292F0000 		_DONXT	CHAR1
 2212      58400000 
 2213 4064 DB2C0000 		_UNNEST
 2214              	
 2215              	/***********************
 2216              	    TYPE	( b u -- )
 2217              	 	Output u characters 
 2218              		from b.
 2219              	************************/
 2220 4068 34400000 		_HEADER TYPEE,4,"TYPE"
 2220      04545950 
 2220      450000BF 
 2221 4074 504700BF 		_NEST
 2222 4078 11300000 		_ADR  TOR   // ( a+1 -- R: u )
 2223 407c 6F2F0000 		_BRAN	TYPE2
 2223      90400000 
 2224              	TYPE1:  
 2225 4084 ED340000 		_ADR  COUNT
 2226 4088 9D390000 		_ADR TCHAR
 2227 408c A52D0000 		_ADR EMIT
 2228              	TYPE2:  
 2229 4090 292F0000 		_DONXT	TYPE1
 2229      84400000 
 2230 4098 85300000 		_ADR	DROP
 2231 409c DB2C0000 		_UNNEST
 2232              	
 2233              	/***************************
 2234              	    CR	  ( -- )
 2235              	 	Output a carriage return
 2236              		and a line feed.
 2237              	****************************/
 2238 40a0 6C400000 		_HEADER CR,2,"CR"
 2238      02435200 
 2239 40a8 504700BF 		_NEST
 2240 40ac 072F0000 		_DOLIT	CRR
 2240      0D000000 
 2241 40b4 A52D0000 		_ADR	EMIT
 2242 40b8 072F0000 		_DOLIT	LF
ARM GAS  forth.s 			page 150


 2242      0A000000 
 2243 40c0 A52D0000 		_ADR	EMIT
 2244 40c4 DB2C0000 		_UNNEST
 2245              	
 2246              	/******************************************
 2247              	  do_$	( -- a )
 2248              	  Return the address of a compiled string.
 2249              	  adjust return address to skip over it.
 2250              	hidden word used by compiler. 
 2251              	******************************************/
 2252              	DOSTR:
 2253 40c8 504700BF 		_NEST     
 2254              	/* compiled string address is 2 levels deep */
 2255 40cc CD2F0000 		_ADR	RFROM	// { -- a1 }
 2256 40d0 CD2F0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2257 40d4 95300000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2258 40d8 ED340000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2259 40dc 59310000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2260 40e0 81390000 		_ADR	ALGND	//  end of string
 2261              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2262 40e4 11300000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2263 40e8 A5300000 		_ADR	SWAP	//  count tugged
 2264 40ec 11300000 		_ADR	TOR     //  ( -- a2) is string address
 2265 40f0 DB2C0000 		_UNNEST
 2266              	
 2267              	/******************************************
 2268              	    $"|	( -- a )
 2269              	 	Run time routine compiled by _". 
 2270              		Return address of a compiled string.
 2271              	hidden word used by compiler
 2272              	*****************************************/
 2273              	STRQP:
 2274 40f4 504700BF 		_NEST
 2275 40f8 C9400000 		_ADR	DOSTR
 2276 40fc DB2C0000 		_UNNEST			// force a call to dostr
 2277              	
 2278              	/*******************************
 2279              	    .$	( a -- )
 2280              	 	Run time routine of ." 
 2281              		Output a compiled string.
 2282              	hidden word used by compiler
 2283              	*******************************/
 2284              	DOTST:
 2285 4100 504700BF 		_NEST
 2286 4104 ED340000 		_ADR	COUNT // ( -- a+1 c )
 2287 4108 75400000 		_ADR	TYPEE
 2288 410c DB2C0000 		_UNNEST
 2289              	
 2290              	/**********************
 2291              	    ."|	( -- )
 2292              	 	Run time routine of ." 
 2293              		Output a compiled string.
 2294              	hidden word used by compiler
 2295              	*****************************/
 2296              	DOTQP:
 2297 4110 504700BF 		_NEST
 2298 4114 C9400000 		_ADR	DOSTR
ARM GAS  forth.s 			page 151


 2299 4118 01410000 		_ADR	DOTST
 2300 411c DB2C0000 		_UNNEST
 2301              	
 2302              	/*************************
 2303              		LPAD  ( n+ -- )
 2304              		emit n spaceS + 
 2305              		base character  
 2306              		16 -> $
 2307              		 2 -> %
 2308              		 other -> none 
 2309              	*************************/
 2310              	LPAD:
 2311 4120 504700BF 		_NEST 
 2312 4124 B9350000 		_ADR BCHR 
 2313 4128 A12F0000 		_ADR  AT 
 2314 412c 472F0000 		_QBRAN 3f 
 2314      98410000 
 2315 4134 A1350000 		_ADR BASE 
 2316 4138 A12F0000 		_ADR AT 
 2317 413c 95300000 		_ADR DUPP 
 2318 4140 072F0000 		_DOLIT 16
 2318      10000000 
 2319 4148 E1330000 		_ADR EQUAL 
 2320 414c 472F0000 		_QBRAN 1f
 2320      74410000 
 2321 4154 85300000 		_ADR DROP 
 2322 4158 072F0000 		_DOLIT '$'
 2322      24000000 
 2323 4160 A5300000 	0:	_ADR  SWAP 
 2324 4164 C5310000 		_ADR  ONEM 
 2325 4168 3D400000 		_ADR  SPACS 
 2326 416c A52D0000 		_ADR  EMIT 
 2327 4170 DB2C0000 		_UNNEST 
 2328 4174 072F0000 	1:  _DOLIT 2 
 2328      02000000 
 2329 417c E1330000 		_ADR EQUAL 
 2330 4180 472F0000 		_QBRAN 3f
 2330      98410000 
 2331 4188 072F0000 		_DOLIT '%'
 2331      25000000 
 2332 4190 6F2F0000 		_BRAN 0b   	
 2332      60410000 
 2333 4198 3D400000 	3:	_ADR  SPACS 
 2334 419c DB2C0000 		_UNNEST 
 2335              	
 2336              	
 2337              	/******************************
 2338              	    .R	  ( n +n -- )
 2339              	 	Display an integer in a 
 2340              		field of n columns, 
 2341              		right justified.
 2342              	*******************************/
 2343 41a0 A4400000 		_HEADER DOTR,2,".R"
 2343      022E5200 
 2344 41a8 504700BF 		_NEST
 2345 41ac 11300000 		_ADR	TOR
 2346 41b0 C1370000 		_ADR    STOD 
ARM GAS  forth.s 			page 152


 2347 41b4 91420000 		_ADR	DTOA 
 2348 41b8 CD2F0000 		_ADR	RFROM
 2349 41bc B9300000 		_ADR	OVER
 2350 41c0 69310000 		_ADR	SUBB
 2351 41c4 21410000 		_ADR    LPAD  
 2352 41c8 75400000 		_ADR	TYPEE
 2353 41cc DB2C0000 		_UNNEST
 2354              	
 2355              	
 2356              	/*************************
 2357              	    U.R	 ( u +n -- )
 2358              	 	Display an unsigned 
 2359              		integer in n column, 
 2360              		right justified.
 2361              	***************************/
 2362 41d0 A4410000 		_HEADER UDOTR,3,"U.R"
 2362      03552E52 
 2363 41d8 504700BF 		_NEST
 2364 41dc 11300000 		_ADR    TOR 
 2365 41e0 072F0000 		_DOLIT  0
 2365      00000000 
 2366 41e8 91420000 		_ADR    DTOA 
 2367 41ec CD2F0000 		_ADR	RFROM
 2368 41f0 B9300000 		_ADR	OVER
 2369 41f4 69310000 		_ADR	SUBB
 2370 41f8 21410000 		_ADR    LPAD  
 2371 41fc 75400000 		_ADR	TYPEE
 2372 4200 DB2C0000 		_UNNEST
 2373              	
 2374              	
 2375              	/************************
 2376              	    U.	  ( u -- )
 2377              	 	Display an unsigned 
 2378              		integer in free format.
 2379              	***************************/
 2380 4204 D4410000 		_HEADER UDOT,2,"U."
 2380      02552E00 
 2381 420c 504700BF 		_NEST
 2382 4210 072F0000 		_DOLIT  0 
 2382      00000000 
 2383 4218 FD3B0000 		_ADR	BDIGS
 2384 421c 693C0000 		_ADR	DIGS
 2385 4220 C53C0000 		_ADR	EDIGS
 2386 4224 072F0000 		_DOLIT  1 
 2386      01000000 
 2387 422c 21410000 		_ADR	LPAD  
 2388 4230 75400000 		_ADR	TYPEE
 2389 4234 DB2C0000 		_UNNEST
 2390              	
 2391              	
 2392              	/************************
 2393              	    .	   ( w -- )
 2394              	 	Display an integer 
 2395              		in free format, 
 2396              		preceeded by a space.
 2397              	**************************/
 2398 4238 08420000 		_HEADER DOT,1,"."
ARM GAS  forth.s 			page 153


 2398      012E00BF 
 2399 4240 504700BF 		_NEST
 2400 4244 21400000 		_ADR    SPACE 
 2401 4248 A1350000 		_ADR	BASE
 2402 424c A12F0000 		_ADR	AT
 2403 4250 072F0000 	1:	_DOLIT  10
 2403      0A000000 
 2404 4258 01310000 		_ADR	XORR	// decimal base?
 2405 425c 472F0000 		_QBRAN	DOT1
 2405      6C420000 
 2406 4264 0D420000 		_ADR	UDOT    // no,display unsigned
 2407 4268 DB2C0000 		_UNNEST			
 2408              	DOT1:
 2409 426c C1370000 		_ADR    STOD 
 2410 4270 91420000 	    _ADR	DTOA
 2411 4274 072F0000 		_DOLIT  1 
 2411      01000000 
 2412 427c 21410000 		_ADR	LPAD  
 2413 4280 75400000 	1:	_ADR	TYPEE
 2414 4284 DB2C0000 		_UNNEST			// yes, display signed
 2415              	
 2416              	
 2417              	/*************************
 2418              	  D>A ( d -- p u )
 2419              	  convert double integer to 
 2420              	  ASCII string in pad  
 2421              	input:
 2422              		d    int64 to convert 
 2423              	output:
 2424              		p     pointer to string  
 2425              		u     string length 
 2426              	**************************/
 2427 4288 3C420000 		_HEADER DTOA,3,"D>A" 
 2427      03443E41 
 2428 4290 504700BF 		_NEST
 2429 4294 95300000 	    _ADR DUPP 
 2430 4298 11300000 		_ADR TOR 
 2431 429c 01330000 		_ADR DABS 
 2432 42a0 FD3B0000 		_ADR BDIGS
 2433 42a4 693C0000 		_ADR DIGS 
 2434 42a8 CD2F0000 		_ADR RFROM 
 2435 42ac 9D3C0000 		_ADR SIGN  
 2436 42b0 C53C0000 		_ADR EDIGS 
 2437 42b4 DB2C0000 		_UNNEST 
 2438              	
 2439              	
 2440              	/*************************
 2441              	   D. ( d -- )
 2442              	   display double integer 
 2443              	**************************/
 2444 42b8 8C420000 		_HEADER DDOT,2,"D."
 2444      02442E00 
 2445 42c0 504700BF 		_NEST
 2446 42c4 21400000 		_ADR SPACE 
 2447 42c8 91420000 		_ADR DTOA 
 2448 42cc 072F0000 		_DOLIT 1
 2448      01000000 
ARM GAS  forth.s 			page 154


 2449 42d4 21410000 		_ADR LPAD 
 2450 42d8 75400000 		_ADR TYPEE
 2451 42dc DB2C0000 		_UNNEST 
 2452              	
 2453              	
 2454              	
 2455              	/***********************
 2456              		H. ( w -- )
 2457              		display integer 
 2458              		in hexadecimal 
 2459              	*********************/
 2460 42e0 BC420000 		_HEADER HDOT,2,"H."
 2460      02482E00 
 2461 42e8 504700BF 		_NEST 
 2462 42ec A1350000 		_ADR BASE
 2463 42f0 A12F0000 		_ADR AT 
 2464 42f4 A5300000 		_ADR SWAP
 2465 42f8 193D0000 		_ADR HEX
 2466 42fc 072F0000 		_DOLIT 0 
 2466      00000000 
 2467 4304 FD3B0000 		_ADR BDIGS
 2468 4308 693C0000 		_ADR DIGS
 2469 430c C53C0000 		_ADR EDIGS
 2470 4310 21400000 		_ADR SPACE
 2471 4314 072F0000 		_DOLIT '$'
 2471      24000000 
 2472 431c A52D0000 		_ADR EMIT 
 2473 4320 75400000 		_ADR TYPEE
 2474 4324 A1350000 		_ADR BASE
 2475 4328 8D2F0000 		_ADR STORE  
 2476 432c DB2C0000 		_UNNEST 
 2477              	
 2478              	
 2479              	/***********************
 2480              	    ?	   ( a -- )
 2481              	 	Display the contents
 2482              		in a memory cell.
 2483              	*************************/
 2484 4330 E4420000 		_HEADER QUEST,1,"?"
 2484      013F00BF 
 2485 4338 504700BF 		_NEST
 2486 433c A12F0000 		_ADR	AT
 2487 4340 41420000 		_ADR	DOT
 2488 4344 DB2C0000 		_UNNEST
 2489              	
 2490              	/**************
 2491              	  Parsing
 2492              	***************/
 2493              	
 2494              	/*********************************************
 2495              	    parse	( b u c -- b u delta //  string> )
 2496              	 	Scan word delimited by c. 
 2497              		Return found string and its offset.
 2498              	hidden word used by PARSE
 2499              	**********************************************/
 2500              	PARS:
 2501 4348 504700BF 		_NEST
ARM GAS  forth.s 			page 155


 2502 434c C5350000 		_ADR	TEMP
 2503 4350 8D2F0000 		_ADR	STORE
 2504 4354 B9300000 		_ADR	OVER
 2505 4358 11300000 		_ADR	TOR
 2506 435c 95300000 		_ADR	DUPP
 2507 4360 472F0000 		_QBRAN	PARS8
 2507      5C440000 
 2508 4368 C5310000 		_ADR	ONEM
 2509 436c C5350000 		_ADR	TEMP
 2510 4370 A12F0000 		_ADR	AT
 2511 4374 15320000 		_ADR	BLANK
 2512 4378 E1330000 		_ADR	EQUAL
 2513 437c 472F0000 		_QBRAN	PARS3
 2513      D0430000 
 2514 4384 11300000 		_ADR	TOR
 2515              	PARS1:
 2516 4388 15320000 		_ADR	BLANK
 2517 438c B9300000 		_ADR	OVER
 2518 4390 C12F0000 		_ADR	CAT	 // skip leading blanks 
 2519 4394 69310000 		_ADR	SUBB
 2520 4398 C9300000 		_ADR	ZLESS
 2521 439c 65330000 		_ADR	INVER
 2522 43a0 472F0000 		_QBRAN	PARS2
 2522      CC430000 
 2523 43a8 B5310000 		_ADR	ONEP
 2524 43ac 292F0000 		_DONXT	PARS1
 2524      88430000 
 2525 43b4 CD2F0000 		_ADR	RFROM
 2526 43b8 85300000 		_ADR	DROP
 2527 43bc 072F0000 		_DOLIT	0
 2527      00000000 
 2528 43c4 95300000 		_ADR	DUPP
 2529 43c8 DB2C0000 		_UNNEST
 2530              	PARS2:
 2531 43cc CD2F0000 		_ADR	RFROM
 2532              	PARS3:
 2533 43d0 B9300000 		_ADR	OVER
 2534 43d4 A5300000 		_ADR	SWAP
 2535 43d8 11300000 		_ADR	TOR
 2536              	PARS4:
 2537 43dc C5350000 		_ADR	TEMP
 2538 43e0 A12F0000 		_ADR	AT
 2539 43e4 B9300000 		_ADR	OVER
 2540 43e8 C12F0000 		_ADR	CAT
 2541 43ec 69310000 		_ADR	SUBB // scan for delimiter
 2542 43f0 C5350000 		_ADR	TEMP
 2543 43f4 A12F0000 		_ADR	AT
 2544 43f8 15320000 		_ADR	BLANK
 2545 43fc E1330000 		_ADR	EQUAL
 2546 4400 472F0000 		_QBRAN	PARS5
 2546      0C440000 
 2547 4408 C9300000 		_ADR	ZLESS
 2548              	PARS5:
 2549 440c 472F0000 		_QBRAN	PARS6
 2549      30440000 
 2550 4414 B5310000 		_ADR	ONEP
 2551 4418 292F0000 		_DONXT	PARS4
ARM GAS  forth.s 			page 156


 2551      DC430000 
 2552 4420 95300000 		_ADR	DUPP
 2553 4424 11300000 		_ADR	TOR
 2554 4428 6F2F0000 		_BRAN	PARS7
 2554      44440000 
 2555              	PARS6:
 2556 4430 CD2F0000 		_ADR	RFROM
 2557 4434 85300000 		_ADR	DROP
 2558 4438 95300000 		_ADR	DUPP
 2559 443c B5310000 		_ADR	ONEP
 2560 4440 11300000 		_ADR	TOR
 2561              	PARS7:
 2562 4444 B9300000 		_ADR	OVER
 2563 4448 69310000 		_ADR	SUBB
 2564 444c CD2F0000 		_ADR	RFROM
 2565 4450 CD2F0000 		_ADR	RFROM
 2566 4454 69310000 		_ADR	SUBB
 2567 4458 DB2C0000 		_UNNEST
 2568              	PARS8:
 2569 445c B9300000 		_ADR	OVER
 2570 4460 CD2F0000 		_ADR	RFROM
 2571 4464 69310000 		_ADR	SUBB
 2572 4468 DB2C0000 		_UNNEST
 2573              	
 2574              	/************************************
 2575              	    PARSE	( c -- b u //  string> )
 2576              	 	Scan input stream and return 
 2577              		counted string delimited by c.
 2578              	************************************/
 2579 446c 34430000 		_HEADER PARSE,5,"PARSE"
 2579      05504152 
 2579      534500BF 
 2580 4478 504700BF 		_NEST
 2581 447c 11300000 		_ADR	TOR
 2582 4480 6D3A0000 		_ADR	TIB
 2583 4484 F1350000 		_ADR	INN
 2584 4488 A12F0000 		_ADR	AT
 2585 448c 59310000 		_ADR	PLUS			// current input buffer pointer
 2586 4490 09360000 		_ADR	NTIB
 2587 4494 A12F0000 		_ADR	AT
 2588 4498 F1350000 		_ADR	INN
 2589 449c A12F0000 		_ADR	AT
 2590 44a0 69310000 		_ADR	SUBB			// remaining count
 2591 44a4 CD2F0000 		_ADR	RFROM
 2592 44a8 49430000 		_ADR	PARS
 2593 44ac F1350000 		_ADR	INN
 2594 44b0 A1340000 		_ADR	PSTOR
 2595 44b4 DB2C0000 		_UNNEST
 2596              	
 2597              	/*******************************
 2598              	    .(	  ( -- )
 2599              	 	Output following string 
 2600              		up to next ) .
 2601              	******************************/
 2602 44b8 70440000 		_HEADER DOTPR,2,".("
 2602      022E2800 
 2603 44c0 504700BF 		_NEST
ARM GAS  forth.s 			page 157


 2604 44c4 072F0000 		_DOLIT	')'
 2604      29000000 
 2605 44cc 79440000 		_ADR	PARSE
 2606 44d0 75400000 		_ADR	TYPEE
 2607 44d4 DB2C0000 		_UNNEST
 2608              	
 2609              	/************************
 2610              	    (	   ( -- )
 2611              	 	Ignore following 
 2612              		string up to next )
 2613              		A comment.
 2614              	************************/
 2615 44d8 BC440000 		_HEADER PAREN,IMEDD+1,"("
 2615      812800BF 
 2616 44e0 504700BF 		_NEST
 2617 44e4 072F0000 		_DOLIT	')'
 2617      29000000 
 2618 44ec 79440000 		_ADR	PARSE
 2619 44f0 A5320000 		_ADR	DDROP
 2620 44f4 DB2C0000 		_UNNEST
 2621              	
 2622              	/*******************
 2623              	    \	   ( -- )
 2624              	 	Ignore following 
 2625              		text till the 
 2626              		end of line.
 2627              	********************/
 2628 44f8 DC440000 		_HEADER BKSLA,IMEDD+1,"\\"
 2628      815C00BF 
 2629 4500 504700BF 		_NEST
 2630 4504 09360000 		_ADR	NTIB
 2631 4508 A12F0000 		_ADR	AT
 2632 450c F1350000 		_ADR	INN
 2633 4510 8D2F0000 		_ADR	STORE
 2634 4514 DB2C0000 		_UNNEST
 2635              	
 2636              	/******************************
 2637              	    CHAR	( -- c )
 2638              	 	Parse next word and
 2639              		return its first character.
 2640              	*******************************/
 2641 4518 FC440000 		_HEADER CHAR,4,"CHAR"
 2641      04434841 
 2641      520000BF 
 2642 4524 504700BF 		_NEST
 2643 4528 15320000 		_ADR	BLANK
 2644 452c 79440000 		_ADR	PARSE
 2645 4530 85300000 		_ADR	DROP
 2646 4534 C12F0000 		_ADR	CAT
 2647 4538 DB2C0000 		_UNNEST
 2648              	
 2649              	/**********************************
 2650              		[CHAR] ( -- c )
 2651              		immediate version of CHAR 
 2652              	**********************************/
 2653 453c 1C450000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2653      C65B4348 
ARM GAS  forth.s 			page 158


 2653      41525D00 
 2654 4548 504700BF 		_NEST 
 2655 454c 25450000 		_ADR CHAR
 2656 4550 714C0000 		_ADR LITER 
 2657 4554 DB2C0000 		_UNNEST 
 2658              	
 2659              	/**********************************
 2660              	    WORD	( c -- a //  string> )
 2661              	 	Parse a word from input stream
 2662              		and copy it to code dictionary.
 2663              	***********************************/
 2664 4558 40450000 		_HEADER WORDD,4,"WORD"
 2664      04574F52 
 2664      440000BF 
 2665 4564 504700BF 		_NEST
 2666 4568 79440000 		_ADR	PARSE
 2667 456c 353A0000 		_ADR	HERE
 2668 4570 F5310000 		_ADR	CELLP
 2669 4574 3D3B0000 		_ADR	PACKS
 2670 4578 DB2C0000 		_UNNEST
 2671              	
 2672              	/********************************
 2673              	    TOKEN	( -- a //  string> )
 2674              	 	Parse a word from input 
 2675              		stream and copy it to 
 2676              		name dictionary.
 2677              	*********************************/
 2678 457c 5C450000 		_HEADER TOKEN,5,"TOKEN"
 2678      05544F4B 
 2678      454E00BF 
 2679 4588 504700BF 		_NEST
 2680 458c 15320000 		_ADR	BLANK
 2681 4590 65450000 		_ADR	WORDD
 2682 4594 7D470000 		_ADR	UPPER 
 2683 4598 DB2C0000 		_UNNEST
 2684              	
 2685              	/**********************
 2686              	  Dictionary search
 2687              	***********************/
 2688              	
 2689              	/*************************
 2690              	    NAME>	( na -- ca )
 2691              	 	Return a code address
 2692              		given a name address.
 2693              	**************************/
 2694 459c 80450000 		_HEADER NAMET,5,"NAME>"
 2694      054E414D 
 2694      453E00BF 
 2695 45a8 504700BF 		_NEST
 2696 45ac ED340000 		_ADR	COUNT
 2697 45b0 072F0000 		_DOLIT	0x1F
 2697      1F000000 
 2698 45b8 D9300000 		_ADR	ANDD
 2699 45bc 59310000 		_ADR	PLUS
 2700 45c0 81390000 		_ADR	ALGND
 2701 45c4 DB2C0000 		_UNNEST
 2702              	
ARM GAS  forth.s 			page 159


 2703              	/***************************************
 2704              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2705              	 	Compare u bytes in two strings. 
 2706              		Return 0 if identical.
 2707              	
 2708              	  Picatout 2020-12-01, 
 2709              	    Because of problem with .align 
 2710              		directive that doesn't fill 
 2711              		with zero's I had to change 
 2712              		the "SAME?" and "FIND" 
 2713              	 	words  to do a byte by byte comparison. 
 2714              	****************************************/
 2715 45c8 A0450000 		_HEADER SAMEQ,5,"SAME?"
 2715      0553414D 
 2715      453F00BF 
 2716 45d4 504700BF 		_NEST
 2717 45d8 11300000 		_ADR	TOR
 2718 45dc 6F2F0000 		_BRAN	SAME2
 2718      20460000 
 2719              	SAME1:
 2720 45e4 B9300000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2721 45e8 FD2F0000 		_ADR	RAT   // a1 a2 a1 u 
 2722 45ec 59310000 		_ADR	PLUS  // a1 a2 a1+u 
 2723 45f0 C12F0000 		_ADR	CAT	   // a1 a2 c1    		
 2724 45f4 B9300000 		_ADR	OVER  // a1 a2 c1 a2 
 2725 45f8 FD2F0000 		_ADR	RAT    
 2726 45fc 59310000 		_ADR	PLUS    
 2727 4600 C12F0000 		_ADR	CAT	  // a1 a2 c1 c2
 2728 4604 69310000 		_ADR	SUBB  
 2729 4608 69320000 		_ADR	QDUP
 2730 460c 472F0000 		_QBRAN	SAME2
 2730      20460000 
 2731 4614 CD2F0000 		_ADR	RFROM
 2732 4618 85300000 		_ADR	DROP
 2733 461c DB2C0000 		_UNNEST	// strings not equal
 2734              	SAME2:
 2735 4620 292F0000 		_DONXT	SAME1
 2735      E4450000 
 2736 4628 072F0000 		_DOLIT	0
 2736      00000000 
 2737 4630 DB2C0000 		_UNNEST	// strings equal
 2738              	
 2739              	/***********************************
 2740              	    FIND	( a na -- ca na | a F )
 2741              	 	Search a vocabulary for a string.
 2742              		Return ca and na if succeeded.
 2743              	hidden word used by NAME?
 2744              	
 2745              	  Picatout 2020-12-01,  
 2746              		 Modified from original. 
 2747              	   See comment for word "SAME?" 
 2748              	************************************/
 2749              	FIND:
 2750 4634 504700BF 		_NEST
 2751 4638 A5300000 		_ADR	SWAP			// na a	
 2752 463c ED340000 		_ADR	COUNT			// na a+1 count
 2753 4640 95300000 		_ADR	DUPP 
ARM GAS  forth.s 			page 160


 2754 4644 C5350000 		_ADR	TEMP
 2755 4648 8D2F0000 		_ADR	STORE			// na a+1 count 
 2756 464c 11300000 		_ADR  TOR		// na a+1  R: count  
 2757 4650 A5300000 		_ADR	SWAP			// a+1 na
 2758              	FIND1:
 2759 4654 95300000 		_ADR	DUPP			// a+1 na na
 2760 4658 472F0000 		_QBRAN	FIND6	// end of vocabulary
 2760      AC460000 
 2761 4660 95300000 		_ADR	DUPP			// a+1 na na
 2762 4664 C12F0000 		_ADR	CAT			// a+1 na name1
 2763 4668 072F0000 		_DOLIT	MASKK
 2763      1FFFFFFF 
 2764 4670 D9300000 		_ADR	ANDD
 2765 4674 FD2F0000 		_ADR	RAT			// a+1 na name1 count 
 2766 4678 01310000 		_ADR	XORR			// a+1 na,  same length?
 2767 467c 472F0000 		_QBRAN	FIND2
 2767      94460000 
 2768 4684 05320000 		_ADR	CELLM			// a+1 la
 2769 4688 A12F0000 		_ADR	AT			// a+1 next_na
 2770 468c 6F2F0000 		_BRAN	FIND1			// try next word
 2770      54460000 
 2771              	FIND2:   
 2772 4694 B5310000 		_ADR	ONEP			// a+1 na+1
 2773 4698 C5350000 		_ADR	TEMP
 2774 469c A12F0000 		_ADR	AT			// a+1 na+1 count
 2775 46a0 D5450000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2776              	FIND3:	
 2777 46a4 6F2F0000 		_BRAN	FIND4
 2777      C4460000 
 2778              	FIND6:	
 2779 46ac CD2F0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2780 46b0 85300000 		_ADR	DROP			// a+1 0
 2781 46b4 A5300000 		_ADR	SWAP			// 0 a+1
 2782 46b8 C5310000 		_ADR	ONEM			// 0 a
 2783 46bc A5300000 		_ADR	SWAP			// a 0 
 2784 46c0 DB2C0000 		_UNNEST			// return without a match
 2785              	FIND4:	
 2786 46c4 472F0000 		_QBRAN	FIND5			// a+1 na+1
 2786      E0460000 
 2787 46cc C5310000 		_ADR	ONEM			// a+1 na
 2788 46d0 05320000 		_ADR	CELLM			// a+4 la
 2789 46d4 A12F0000 		_ADR	AT			// a+1 next_na
 2790 46d8 6F2F0000 		_BRAN	FIND1			// compare next name
 2790      54460000 
 2791              	FIND5:	
 2792 46e0 CD2F0000 		_ADR	RFROM			// a+1 na+1 count
 2793 46e4 85300000 		_ADR	DROP			// a+1 na+1
 2794 46e8 A5300000 		_ADR	SWAP			// na+1 a+1
 2795 46ec 85300000 		_ADR	DROP			// na+1
 2796 46f0 C5310000 		_ADR	ONEM			// na
 2797 46f4 95300000 		_ADR	DUPP			// na na
 2798 46f8 A9450000 		_ADR	NAMET			// na ca
 2799 46fc A5300000 		_ADR	SWAP			// ca na
 2800 4700 DB2C0000 		_UNNEST			//  return with a match
 2801              	
 2802              	/********************************
 2803              	    NAME?	( a -- ca na | a F )
ARM GAS  forth.s 			page 161


 2804              	 	Search all context vocabularies 
 2805              		for a string.
 2806              	***********************************/
 2807 4704 CC450000 		_HEADER NAMEQ,5,"NAME?"
 2807      054E414D 
 2807      453F00BF 
 2808 4710 504700BF 		_NEST
 2809 4714 4D360000 		_ADR	CNTXT
 2810 4718 A12F0000 		_ADR	AT
 2811 471c 35460000 		_ADR	FIND
 2812 4720 DB2C0000 		_UNNEST
 2813              	
 2814              	/********************
 2815              	  console input
 2816              	********************/
 2817              	
 2818              	/****************************
 2819              		ASCIZ ( a -- a+ )
 2820              		convert counted string to 
 2821              		null terminated string 
 2822              		in pad.
 2823              	*****************************/
 2824 4724 08470000 		_HEADER ASCIZ,5,"ASCIZ" 
 2824      05415343 
 2824      495A00BF 
 2825 4730 504700BF 		_NEST 
 2826 4734 ED340000 		_ADR COUNT
 2827 4738 95300000 		_ADR DUPP
 2828 473c 11300000 		_ADR TOR 
 2829 4740 4D3A0000 		_ADR PAD 
 2830 4744 A5300000 		_ADR SWAP
 2831 4748 D53A0000 		_ADR MOVE  
 2832 474c 4D3A0000 		_ADR PAD 
 2833 4750 CD2F0000 		_ADR RFROM
 2834 4754 59310000 		_ADR PLUS 
 2835 4758 072F0000 		_DOLIT 0 
 2835      00000000 
 2836 4760 A5300000 		_ADR SWAP  
 2837 4764 AD2F0000 		_ADR CSTOR
 2838 4768 4D3A0000 		_ADR PAD   
 2839 476c DB2C0000 		_UNNEST 
 2840              	
 2841              	/***********************
 2842              		UPPER (cstring -- cstring )
 2843              		convert to upper case in situ
 2844              	*******************************/
 2845 4770 28470000 		_HEADER UPPER,5,"UPPER"
 2845      05555050 
 2845      455200BF 
 2846 477c 504700BF 		_NEST 
 2847 4780 95300000 		_ADR DUPP 
 2848 4784 11300000 		_ADR TOR 
 2849 4788 ED340000 		_ADR COUNT
 2850 478c 072F0000 		_DOLIT 0x1f
 2850      1F000000 
 2851 4794 D9300000 		_ADR ANDD
 2852 4798 11300000 		_ADR TOR 
ARM GAS  forth.s 			page 162


 2853 479c 6F2F0000 		_BRAN 3f
 2853      F0470000 
 2854 47a4 95300000 	1:  _ADR DUPP 
 2855 47a8 ED340000 		_ADR COUNT 
 2856 47ac 95300000 		_ADR DUPP 
 2857 47b0 072F0000 		_DOLIT 'a'-1
 2857      60000000 
 2858 47b8 61340000 		_ADR GREAT
 2859 47bc 472F0000 		_QBRAN 2f 
 2859      E8470000 
 2860 47c4 95300000 		_ADR DUPP 
 2861 47c8 072F0000 		_DOLIT 'z'+1 
 2861      7B000000 
 2862 47d0 31340000 		_ADR LESS 
 2863 47d4 472F0000 		_QBRAN 2f 
 2863      E8470000 
 2864 47dc 072F0000 		_DOLIT 0x5f  
 2864      5F000000 
 2865 47e4 D9300000 		_ADR ANDD
 2866 47e8 7D320000 	2:	_ADR ROT
 2867 47ec AD2F0000 		_ADR CSTOR
 2868 47f0 292F0000 	3:  _DONXT 1b
 2868      A4470000 
 2869 47f8 85300000 		_ADR DROP 
 2870 47fc CD2F0000 		_ADR RFROM
 2871 4800 DB2C0000 		_UNNEST 
 2872              	
 2873              	/**************************************
 2874              	   BKSP  ( bot eot cur -- bot eot cur )
 2875              	   Move cursor left by one character.
 2876              	hidden word used by KTAP
 2877              	***************************************/
 2878              	BKSP:
 2879 4804 504700BF 		_NEST
 2880 4808 11300000 		_ADR	TOR
 2881 480c B9300000 		_ADR	OVER
 2882 4810 CD2F0000 		_ADR	RFROM
 2883 4814 A5300000 		_ADR	SWAP
 2884 4818 B9300000 		_ADR	OVER
 2885 481c 01310000 		_ADR	XORR
 2886 4820 472F0000 		_QBRAN	BACK1
 2886      4C480000 
 2887 4828 072F0000 		_DOLIT	BKSPP
 2887      08000000 
 2888 4830 A52D0000 		_ADR	EMIT
 2889 4834 C5310000 		_ADR	ONEM
 2890 4838 15320000 		_ADR	BLANK
 2891 483c A52D0000 		_ADR	EMIT
 2892 4840 072F0000 		_DOLIT	BKSPP
 2892      08000000 
 2893 4848 A52D0000 		_ADR	EMIT
 2894              	BACK1:
 2895 484c DB2C0000 		  _UNNEST
 2896              	
 2897              	/****************************************
 2898              	   TAP	 ( bot eot cur c -- bot eot cur )
 2899              	   Accept and echo the key stroke 
ARM GAS  forth.s 			page 163


 2900              	   and bump the cursor.
 2901              	hidden word used by KTAP 
 2902              	****************************************/
 2903              	TAP:
 2904 4850 504700BF 		_NEST
 2905 4854 95300000 		_ADR	DUPP
 2906 4858 A52D0000 		_ADR	EMIT
 2907 485c B9300000 		_ADR	OVER
 2908 4860 AD2F0000 		_ADR	CSTOR
 2909 4864 B5310000 		_ADR	ONEP
 2910 4868 DB2C0000 		_UNNEST
 2911              	
 2912              	
 2913              	/*******************************************
 2914              	    kTAP	( bot eot cur c -- bot eot cur )
 2915              	 	Process a key stroke, CR or backspace.
 2916              	hidden word used by ACCEPT 
 2917              	*******************************************/
 2918              	KTAP:
 2919              	TTAP:
 2920 486c 504700BF 		_NEST
 2921 4870 95300000 		_ADR	DUPP
 2922 4874 072F0000 		_DOLIT	CRR
 2922      0D000000 
 2923 487c 01310000 		_ADR	XORR
 2924 4880 472F0000 		_QBRAN  KTAP2
 2924      B0480000 
 2925 4888 072F0000 		_DOLIT	BKSPP
 2925      08000000 
 2926 4890 01310000 		_ADR	XORR
 2927 4894 472F0000 		_QBRAN	KTAP1
 2927      A8480000 
 2928 489c 15320000 		_ADR	BLANK
 2929 48a0 51480000 		_ADR	TAP
 2930 48a4 DB2C0000 		_UNNEST
 2931              	//	.word	0			// patch
 2932              	KTAP1:
 2933 48a8 05480000 		_ADR	BKSP
 2934 48ac DB2C0000 		_UNNEST
 2935              	KTAP2:
 2936 48b0 85300000 		_ADR	DROP
 2937 48b4 A5300000 		_ADR	SWAP
 2938 48b8 85300000 		_ADR	DROP
 2939 48bc 95300000 		_ADR	DUPP
 2940 48c0 DB2C0000 		_UNNEST
 2941              	
 2942              	/************************************
 2943              	    ACCEPT	( b u -- b u )
 2944              	 	Accept characters to input 
 2945              		buffer. Return with actual count.
 2946              	*************************************/
 2947 48c4 74470000 		_HEADER ACCEP,6,"ACCEPT"
 2947      06414343 
 2947      45505400 
 2948 48d0 504700BF 		_NEST
 2949 48d4 B9300000 		_ADR	OVER
 2950 48d8 59310000 		_ADR	PLUS
ARM GAS  forth.s 			page 164


 2951 48dc B9300000 		_ADR	OVER
 2952              	ACCP1:
 2953 48e0 CD320000 		_ADR	DDUP
 2954 48e4 01310000 		_ADR	XORR
 2955 48e8 472F0000 		_QBRAN	ACCP4
 2955      28490000 
 2956 48f0 812D0000 		_ADR	KEY
 2957 48f4 95300000 		_ADR	DUPP
 2958 48f8 15320000 		_ADR	BLANK
 2959 48fc 072F0000 		_DOLIT 127
 2959      7F000000 
 2960 4904 E5360000 		_ADR	WITHI
 2961 4908 472F0000 		_QBRAN	ACCP2
 2961      1C490000 
 2962 4910 51480000 		_ADR	TAP
 2963 4914 6F2F0000 		_BRAN	ACCP3
 2963      20490000 
 2964              	ACCP2:
 2965 491c 6D480000 		_ADR	KTAP
 2966              	ACCP3:	  
 2967 4920 6F2F0000 		_BRAN	ACCP1
 2967      E0480000 
 2968              	ACCP4:
 2969 4928 85300000 		_ADR	DROP
 2970 492c B9300000 		_ADR	OVER
 2971 4930 69310000 		_ADR	SUBB
 2972 4934 DB2C0000 		_UNNEST
 2973              	
 2974              	/*****************************
 2975              	    QUERY	( -- )
 2976              	 	Accept input stream 
 2977              		to terminal input buffer.
 2978              	******************************/
 2979 4938 C8480000 		_HEADER QUERY,5,"QUERY"
 2979      05515545 
 2979      525900BF 
 2980 4944 504700BF 		_NEST
 2981 4948 6D3A0000 		_ADR	TIB
 2982 494c 072F0000 		_DOLIT 80
 2982      50000000 
 2983 4954 D1480000 		_ADR	ACCEP
 2984 4958 09360000 		_ADR	NTIB
 2985 495c 8D2F0000 		_ADR	STORE
 2986 4960 85300000 		_ADR	DROP
 2987 4964 072F0000 		_DOLIT	0
 2987      00000000 
 2988 496c F1350000 		_ADR	INN
 2989 4970 8D2F0000 		_ADR	STORE
 2990 4974 DB2C0000 		_UNNEST
 2991              	
 2992              	/********************
 2993              	  Error handling
 2994              	********************/
 2995              	
 2996              	/*********************
 2997              	    ABORT	( a -- )
 2998              	 	Reset data stack 
ARM GAS  forth.s 			page 165


 2999              		and jump to QUIT.
 3000              	**********************/
 3001 4978 3C490000 		_HEADER ABORT,5,"ABORT"
 3001      0541424F 
 3001      525400BF 
 3002 4984 504700BF 		_NEST
 3003              	ABORT1:
 3004 4988 21400000 		_ADR	SPACE
 3005 498c ED340000 		_ADR	COUNT
 3006 4990 75400000 		_ADR	TYPEE
 3007 4994 072F0000 		_DOLIT	0X3F
 3007      3F000000 
 3008 499c A52D0000 		_ADR	EMIT
 3009 49a0 A9400000 		_ADR	CR
 3010 49a4 0D4B0000 		_ADR	PRESE
 3011 49a8 6F2F0000 		_BRAN	QUIT
 3011      2C4B0000 
 3012              	
 3013              	/*******************************
 3014              	    _abort"	( f -- )
 3015              	 	Run time routine of ABORT"
 3016              		Abort with a message.
 3017              	hidden used by compiler 
 3018              	********************************/
 3019              	ABORQ:
 3020 49b0 504700BF 		_NEST
 3021 49b4 C9400000 		_ADR	DOSTR
 3022 49b8 A5300000 		_ADR	SWAP 
 3023 49bc 472F0000 		_QBRAN	1f	// text flag
 3023      CC490000 
 3024 49c4 6F2F0000 		_BRAN	ABORT1
 3024      88490000 
 3025              	1:
 3026 49cc 85300000 		_ADR	DROP
 3027 49d0 DB2C0000 		_UNNEST			// drop error
 3028              	
 3029              	/************************
 3030              	  The text interpreter
 3031              	************************/
 3032              	
 3033              	/***************************
 3034              	    $INTERPRET  ( a -- )
 3035              	 	Interpret a word. 
 3036              		If failed, try to 
 3037              		convert it to an integer.
 3038              	******************************/
 3039 49d4 7C490000 		_HEADER INTER,10,"$INTERPRET"
 3039      0A24494E 
 3039      54455250 
 3039      52455400 
 3040 49e4 504700BF 		_NEST
 3041 49e8 11470000 		_ADR	NAMEQ
 3042 49ec 69320000 		_ADR	QDUP	// ?defined
 3043 49f0 472F0000 		_QBRAN	INTE1
 3043      244A0000 
 3044 49f8 A12F0000 		_ADR	AT
 3045 49fc 072F0000 		_DOLIT	COMPO
ARM GAS  forth.s 			page 166


 3045      40000000 
 3046 4a04 D9300000 		_ADR	ANDD	// ?compile only lexicon bits
 3047 4a08 B1490000 		_ABORQ	13," compile only"
 3047      0D20636F 
 3047      6D70696C 
 3047      65206F6E 
 3047      6C7900BF 
 3048 4a1c 1D2F0000 		_ADR	EXECU
 3049 4a20 DB2C0000 		_UNNEST			// execute defined word
 3050              	INTE1:
 3051 4a24 F53F0000 		_ADR	NUMBER 
 3052 4a28 472F0000 		_QBRAN	INTE2
 3052      344A0000 
 3053 4a30 DB2C0000 		_UNNEST
 3054              	INTE2:
 3055 4a34 85490000 		_ADR	ABORT	// error
 3056              	
 3057              	/******************************
 3058              	    [	   ( -- )
 3059              	 	Start the text interpreter.
 3060              	*******************************/
 3061 4a38 D8490000 		_HEADER LBRAC,IMEDD+1,"["
 3061      815B00BF 
 3062 4a40 504700BF 		_NEST
 3063 4a44 072F0000 		_DOLIT	INTER
 3063      E4490000 
 3064 4a4c 21360000 		_ADR	TEVAL
 3065 4a50 8D2F0000 		_ADR	STORE
 3066 4a54 DB2C0000 		_UNNEST
 3067              	
 3068              	/**********************
 3069              	    .OK	 ( -- )
 3070              	 	Display "ok" only 
 3071              		while interpreting.
 3072              	************************/
 3073 4a58 3C4A0000 		_HEADER DOTOK,3,".OK"
 3073      032E4F4B 
 3074 4a60 504700BF 		_NEST
 3075 4a64 072F0000 		_DOLIT	INTER
 3075      E4490000 
 3076 4a6c 21360000 		_ADR	TEVAL
 3077 4a70 A12F0000 		_ADR	AT
 3078 4a74 E1330000 		_ADR	EQUAL
 3079 4a78 472F0000 		_QBRAN	DOTO1
 3079      884A0000 
 3080 4a80 11410000 		_DOTQP	3," ok"
 3080      03206F6B 
 3081              	DOTO1:
 3082 4a88 A9400000 		_ADR	CR
 3083 4a8c DB2C0000 		_UNNEST
 3084              	
 3085              	/*************************
 3086              	    ?STACK	( -- )
 3087              	 	Abort if the data 
 3088              		stack underflows.
 3089              	************************/
 3090 4a90 5C4A0000 		_HEADER QSTAC,6,"?STACK"
ARM GAS  forth.s 			page 167


 3090      063F5354 
 3090      41434B00 
 3091 4a9c 504700BF 		_NEST
 3092 4aa0 E9390000 		_ADR	DEPTH
 3093 4aa4 C9300000 		_ADR	ZLESS	// check only for underflow
 3094 4aa8 B1490000 		_ABORQ	9,"underflow"
 3094      09756E64 
 3094      6572666C 
 3094      6F7700BF 
 3095 4ab8 DB2C0000 		_UNNEST
 3096              	
 3097              	/*******************
 3098              	    EVAL	( -- )
 3099              	 	Interpret the 
 3100              		input stream.
 3101              	*******************/
 3102 4abc 944A0000 		_HEADER EVAL,4,"EVAL"
 3102      04455641 
 3102      4C0000BF 
 3103 4ac8 504700BF 		_NEST
 3104              	EVAL1:
 3105 4acc 89450000 	    _ADR	TOKEN
 3106 4ad0 95300000 		_ADR	DUPP
 3107 4ad4 C12F0000 		_ADR	CAT	// ?input stream empty
 3108 4ad8 472F0000 		_QBRAN	EVAL2
 3108      F44A0000 
 3109 4ae0 21360000 		_ADR	TEVAL
 3110 4ae4 853A0000 		_ADR	ATEXE
 3111 4ae8 9D4A0000 		_ADR	QSTAC	// evaluate input, check stack
 3112 4aec 6F2F0000 		_BRAN	EVAL1
 3112      CC4A0000 
 3113              	EVAL2:
 3114 4af4 85300000 		_ADR	DROP
 3115 4af8 614A0000 		_ADR	DOTOK
 3116 4afc DB2C0000 		_UNNEST	// prompt
 3117              	
 3118              	/**********************************
 3119              	    PRESET	( -- )
 3120              	 	Reset data stack pointer 
 3121              		and the terminal input buffer.
 3122              	**********************************/
 3123 4b00 C04A0000 		_HEADER PRESE,6,"PRESET"
 3123      06505245 
 3123      53455400 
 3124 4b0c 504700BF 		_NEST 
 3125 4b10 072F0000 		_DOLIT SPP 
 3125      80FE0120 
 3126 4b18 51300000 		_ADR SPSTOR 
 3127 4b1c DB2C0000 		_UNNEST 
 3128              	
 3129              	/*********************
 3130              	    QUIT	( -- )
 3131              	 	Reset return stack 
 3132              		pointer and start 
 3133              		text interpreter.
 3134              	***********************/
 3135 4b20 044B0000 		_HEADER QUIT,4,"QUIT"
ARM GAS  forth.s 			page 168


 3135      04515549 
 3135      540000BF 
 3136 4b2c 072F0000 		_DOLIT RPP 
 3136      00FF0120 
 3137 4b34 41300000 		_ADR RPSTOR 
 3138              	QUIT1:
 3139 4b38 414A0000 		_ADR	LBRAC			// start interpretation
 3140              	QUIT2:
 3141 4b3c 45490000 		_ADR	QUERY			// get input
 3142 4b40 C94A0000 		_ADR	EVAL
 3143 4b44 6F2F0000 		_BRAN	QUIT2	// continue till error
 3143      3C4B0000 
 3144              	
 3145              	/***************************
 3146              		FORGET ( <string> -- )
 3147              		forget all definition 
 3148              		starting at <string>
 3149              	****************************/
 3150 4b4c 244B0000 		_HEADER FORGET,6,"FORGET"
 3150      06464F52 
 3150      47455400 
 3151 4b58 504700BF 		_NEST 
 3152 4b5c 89450000 		_ADR TOKEN 
 3153 4b60 95300000 		_ADR DUPP 
 3154 4b64 472F0000 		_QBRAN 9f 
 3154      A04B0000 
 3155 4b6c 11470000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3156 4b70 69320000 		_ADR QDUP 
 3157 4b74 472F0000 		_QBRAN 8f
 3157      9C4B0000 
 3158 4b7c 05320000 		_ADR CELLM // ( ca la )
 3159 4b80 95300000 		_ADR DUPP 
 3160 4b84 61360000 		_ADR CPP   
 3161 4b88 8D2F0000 		_ADR STORE
 3162 4b8c A12F0000 		_ADR AT 
 3163 4b90 8D360000 		_ADR LAST 
 3164 4b94 8D2F0000 		_ADR STORE
 3165 4b98 01510000 		_ADR OVERT 
 3166 4b9c 85300000 	8:  _ADR DROP 
 3167 4ba0 DB2C0000 	9:	_UNNEST 
 3168              	
 3169              		.p2align 2 
 3170              	
 3171              	/*****************
 3172              	  The compiler
 3173              	******************/
 3174              	
 3175              	/**************************************
 3176              	    '	   ( -- ca )
 3177              	 	Search context vocabularies 
 3178              		for the next word in input stream.
 3179              	***************************************/
 3180 4ba4 504B0000 		_HEADER TICK,1,"'"
 3180      012700BF 
 3181 4bac 504700BF 		_NEST
 3182 4bb0 89450000 		_ADR	TOKEN
 3183 4bb4 11470000 		_ADR	NAMEQ	// ?defined
ARM GAS  forth.s 			page 169


 3184 4bb8 472F0000 		_QBRAN	TICK1
 3184      C44B0000 
 3185 4bc0 DB2C0000 		_UNNEST	// yes, push code address
 3186              	TICK1:	
 3187 4bc4 85490000 		_ADR ABORT	// no, error
 3188              	
 3189              	/***********************
 3190              	    ALLOT	( n -- )
 3191              	 	Allocate n bytes to 
 3192              		the ram area.
 3193              	************************/
 3194 4bc8 A84B0000 		_HEADER ALLOT,5,"ALLOT"
 3194      05414C4C 
 3194      4F5400BF 
 3195 4bd4 504700BF 		_NEST
 3196 4bd8 61360000 		_ADR	CPP
 3197 4bdc A1340000 		_ADR	PSTOR
 3198 4be0 DB2C0000 		_UNNEST			// adjust code pointer
 3199              	
 3200              	/******************************
 3201              	    ,	   ( w -- )
 3202              	 	Compile an integer 
 3203              		into the code dictionary.
 3204              	******************************/
 3205 4be4 CC4B0000 		_HEADER COMMA,1,","
 3205      012C00BF 
 3206 4bec 504700BF 		_NEST
 3207 4bf0 353A0000 		_ADR	HERE
 3208 4bf4 95300000 		_ADR	DUPP
 3209 4bf8 F5310000 		_ADR	CELLP	// cell boundary
 3210 4bfc 61360000 		_ADR	CPP
 3211 4c00 8D2F0000 		_ADR	STORE
 3212 4c04 8D2F0000 		_ADR	STORE
 3213 4c08 DB2C0000 		_UNNEST	// adjust code pointer, compile
 3214              		.p2align 2 
 3215              	
 3216              	/************************************
 3217              	    [COMPILE]   ( -- //  string> )
 3218              	 	Compile the next immediate word 
 3219              		into code dictionary.
 3220              	*************************************/
 3221 4c0c E84B0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3221      895B434F 
 3221      4D50494C 
 3221      455D00BF 
 3222 4c1c 504700BF 		_NEST
 3223 4c20 AD4B0000 		_ADR	TICK
 3224 4c24 ED4B0000 		_ADR	COMMA
 3225 4c28 DB2C0000 		_UNNEST
 3226              	
 3227              	/****************************
 3228              	    COMPILE	( -- )
 3229              	 	Compile the next address 
 3230              		in colon list to code 
 3231              		dictionary.
 3232              	*******************************/
 3233 4c2c 104C0000 		_HEADER COMPI,COMPO+7,"COMPILE"
ARM GAS  forth.s 			page 170


 3233      47434F4D 
 3233      50494C45 
 3234 4c38 504700BF 		_NEST
 3235 4c3c CD2F0000 		_ADR	RFROM
 3236 4c40 95300000 		_ADR	DUPP 
 3237 4c44 A12F0000 		_ADR	AT
 3238 4c48 072F0000 		_DOLIT 1 
 3238      01000000 
 3239 4c50 ED300000 		_ADR	ORR 
 3240 4c54 ED4B0000 		_ADR	COMMA 
 3241 4c58 F5310000 		_ADR	CELLP 
 3242 4c5c 11300000 		_ADR	TOR 
 3243 4c60 DB2C0000 		_UNNEST	// adjust return address
 3244              	
 3245              	/*************************
 3246              	    LITERAL	( w -- )
 3247              	 	Compile tos to code 
 3248              		dictionary as an 
 3249              		integer literal.
 3250              	***************************/
 3251 4c64 304C0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3251      874C4954 
 3251      4552414C 
 3252 4c70 504700BF 		_NEST
 3253 4c74 072F0000 		_COMPI	DOLIT
 3253      062F0000 
 3253      5D510000 
 3254 4c80 ED4B0000 		_ADR	COMMA
 3255 4c84 DB2C0000 		_UNNEST
 3256              	
 3257              	/********************
 3258              	    $,"	( -- )
 3259              	 	Compile a literal 
 3260              		string up to next " .
 3261              	hidden word 
 3262              	************************/
 3263              	STRCQ:
 3264 4c88 504700BF 		_NEST
 3265 4c8c 072F0000 		_DOLIT -4
 3265      FCFFFFFF 
 3266 4c94 61360000 		_ADR	CPP
 3267 4c98 A1340000 		_ADR	PSTOR
 3268 4c9c 072F0000 		_DOLIT	'\"'
 3268      22000000 
 3269 4ca4 65450000 		_ADR	WORDD			// move word to code dictionary
 3270 4ca8 ED340000 		_ADR	COUNT
 3271 4cac 59310000 		_ADR	PLUS
 3272 4cb0 81390000 		_ADR	ALGND			// calculate aligned end of string
 3273 4cb4 61360000 		_ADR	CPP
 3274 4cb8 8D2F0000 		_ADR	STORE
 3275 4cbc DB2C0000 		_UNNEST 			// adjust the code pointer
 3276              	
 3277              	/*******************
 3278              	   Structures
 3279              	*******************/
 3280              	
 3281              	/*************************
ARM GAS  forth.s 			page 171


 3282              	    FOR	 ( -- a )
 3283              	 	Start a FOR-NEXT loop 
 3284              		structure in a colon 
 3285              		definition.
 3286              	**************************/
 3287 4cc0 684C0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3287      C3464F52 
 3288 4cc8 504700BF 		_NEST
 3289 4ccc 072F0000 		_COMPI	TOR
 3289      10300000 
 3289      5D510000 
 3290 4cd8 353A0000 		_ADR	HERE
 3291 4cdc DB2C0000 		_UNNEST
 3292              	
 3293              	/********************************
 3294              		DO ( limit start -- )
 3295              		initialise a DO...LOOP 
 3296              		or DO...+LOOP 
 3297              	********************************/
 3298 4ce0 C44C0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3298      C2444F00 
 3299 4ce8 504700BF 		_NEST
 3300 4cec 072F0000 		_COMPI SWAP
 3300      A4300000 
 3300      5D510000 
 3301 4cf8 072F0000 		_COMPI TOR 
 3301      10300000 
 3301      5D510000 
 3302 4d04 072F0000 		_COMPI TOR 
 3302      10300000 
 3302      5D510000 
 3303 4d10 353A0000 		_ADR HERE 
 3304 4d14 DB2C0000 		_UNNEST 
 3305              	
 3306              	DOPLOOP: // ( n -- R: counter limit )
 3307 4d18 3246     		mov T2,TOS 
 3308 4d1a 57F8046B 		_POP 
 3309 4d1e B8E80300 		ldmfd RSP!,{T0,T1}
 3310 4d22 1044     		add T0,T2 
 3311 4d24 28E90300 		stmfd RSP!,{T0,T1}
 3312 4d28 8842     		cmp T0,T1 
 3313 4d2a 05D4     		bmi 9f 
 3314 4d2c 08F10808 		add RSP,#8
 3315 4d30 0CF1040C 		add IP,#4
 3316 4d34 FDF7CEBF 		_NEXT 
 3317 4d38 DCF800C0 	9:  ldr IP,[IP]
 3318 4d3c FDF7CABF 		_NEXT 
 3319              		
 3320              	/***************************
 3321              		+LOOP ( a -- )
 3322              		increment counter 
 3323              		end loop if countr>limit
 3324              	****************************/
 3325 4d40 E44C0000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3325      C52B4C4F 
 3325      4F5000BF 
 3326 4d4c 504700BF 		_NEST 
ARM GAS  forth.s 			page 172


 3327 4d50 072F0000 		_COMPI DOPLOOP 
 3327      184D0000 
 3327      5D510000 
 3328 4d5c ED4B0000 		_ADR COMMA
 3329 4d60 DB2C0000 		_UNNEST 
 3330              	
 3331              	DOLOOP: // ( -- R: counter limit )
 3332 4d64 D8F80000 		ldr T0,[RSP]
 3333 4d68 00F10100 		add T0,#1
 3334 4d6c C8F80000 		str T0,[RSP]
 3335 4d70 D8F80410 		ldr T1,[RSP,#4]
 3336 4d74 8842     		cmp T0,T1 
 3337 4d76 05D4     		bmi 9f
 3338 4d78 08F10808 		add RSP,#8  // counter and limit  
 3339 4d7c 0CF1040C 		add IP,IP,#4 // skip loop address 
 3340 4d80 FDF7A8BF 		_NEXT 
 3341 4d84 DCF800C0 	9:  ldr IP,[IP]
 3342 4d88 FDF7A4BF 		_NEXT 
 3343              	
 3344              	
 3345              	/********************************
 3346              		LOOP ( a -- )
 3347              		increment counter 
 3348              		end loop if >= limit 
 3349              	*********************************/
 3350 4d8c 444D0000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3350      C44C4F4F 
 3350      500000BF 
 3351 4d98 504700BF 		_NEST 
 3352 4d9c 072F0000 		_COMPI DOLOOP
 3352      644D0000 
 3352      5D510000 
 3353 4da8 ED4B0000 		_ADR COMMA 
 3354 4dac DB2C0000 		_UNNEST 
 3355              	
 3356              	
 3357              	/**********************
 3358              	    BEGIN	( -- a )
 3359              	 	Start an infinite 
 3360              		or indefinite 
 3361              		loop structure.
 3362              	************************/
 3363 4db0 904D0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3363      C5424547 
 3363      494E00BF 
 3364 4dbc 504700BF 		_NEST
 3365 4dc0 353A0000 		_ADR	HERE
 3366 4dc4 DB2C0000 		_UNNEST
 3367              		.p2align 2 
 3368              	
 3369              	/********************
 3370              	    NEXT	( a -- )
 3371              	 	Terminate a FOR-NEXT
 3372              		loop structure.
 3373              	**************************/
 3374 4dc8 B44D0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3374      C44E4558 
ARM GAS  forth.s 			page 173


 3374      540000BF 
 3375 4dd4 504700BF 		_NEST
 3376 4dd8 072F0000 		_COMPI	DONXT
 3376      282F0000 
 3376      5D510000 
 3377 4de4 ED4B0000 		_ADR	COMMA
 3378 4de8 DB2C0000 		_UNNEST
 3379              	
 3380              	/***************************
 3381              		I ( -- n )
 3382              		stack for loop counter 
 3383              	***************************/
 3384 4dec CC4D0000 		_HEADER I,1+COMPO,"I"
 3384      414900BF 
 3385 4df4 47F8046D 		_PUSH 
 3386 4df8 D8F80060 		ldr TOS,[RSP]
 3387 4dfc FDF76ABF 		_NEXT 
 3388              	
 3389              	/****************************
 3390              		J ( -- n )
 3391              		stack outer loop counter 
 3392              	****************************/
 3393 4e00 F04D0000 		_HEADER J,1,"J"
 3393      014A00BF 
 3394 4e08 47F8046D 		_PUSH 
 3395 4e0c D8F80460 		ldr TOS,[RSP,#4]
 3396 4e10 FDF760BF 		_NEXT 
 3397              	
 3398              	/**********************
 3399              	    UNTIL	( a -- )
 3400              	 	Terminate a BEGIN-UNTIL
 3401              		indefinite loop structure.
 3402              	******************************/
 3403 4e14 044E0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3403      C5554E54 
 3403      494C00BF 
 3404 4e20 504700BF 		_NEST
 3405 4e24 072F0000 		_COMPI	QBRAN
 3405      462F0000 
 3405      5D510000 
 3406 4e30 ED4B0000 		_ADR	COMMA
 3407 4e34 DB2C0000 		_UNNEST
 3408              	
 3409              	/**********************
 3410              	    AGAIN	( a -- )
 3411              	 	Terminate a BEGIN-AGAIN
 3412              		infinite loop structure.
 3413              	*****************************/
 3414 4e38 184E0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3414      C5414741 
 3414      494E00BF 
 3415 4e44 504700BF 		_NEST
 3416 4e48 072F0000 		_COMPI	BRAN
 3416      6E2F0000 
 3416      5D510000 
 3417 4e54 ED4B0000 		_ADR	COMMA
 3418 4e58 DB2C0000 		_UNNEST
ARM GAS  forth.s 			page 174


 3419              	
 3420              	/************************
 3421              	    IF	  ( -- A )
 3422              	 	Begin a conditional
 3423              		branch structure.
 3424              	**************************/
 3425 4e5c 3C4E0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3425      C2494600 
 3426 4e64 504700BF 		_NEST
 3427 4e68 072F0000 		_COMPI	QBRAN
 3427      462F0000 
 3427      5D510000 
 3428 4e74 353A0000 		_ADR	HERE
 3429 4e78 072F0000 		_DOLIT	4
 3429      04000000 
 3430 4e80 61360000 		_ADR	CPP
 3431 4e84 A1340000 		_ADR	PSTOR
 3432 4e88 DB2C0000 		_UNNEST
 3433              	
 3434              	/*************************
 3435              	    AHEAD	( -- A )
 3436              	 	Compile a forward 
 3437              		branch instruction.
 3438              	*************************/
 3439 4e8c 604E0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3439      C5414845 
 3439      414400BF 
 3440 4e98 504700BF 		_NEST
 3441 4e9c 072F0000 		_COMPI	BRAN
 3441      6E2F0000 
 3441      5D510000 
 3442 4ea8 353A0000 		_ADR	HERE
 3443 4eac 072F0000 		_DOLIT	4
 3443      04000000 
 3444 4eb4 61360000 		_ADR	CPP
 3445 4eb8 A1340000 		_ADR	PSTOR
 3446 4ebc DB2C0000 		_UNNEST
 3447              	
 3448              	/**************************
 3449              	    REPEAT	( A a -- )
 3450              	 	Terminate a BEGIN-WHILE-REPEAT
 3451              		indefinite loop.
 3452              	**********************************/
 3453 4ec0 904E0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3453      C6524550 
 3453      45415400 
 3454 4ecc 504700BF 		_NEST
 3455 4ed0 454E0000 		_ADR	AGAIN
 3456 4ed4 353A0000 		_ADR	HERE
 3457 4ed8 A5300000 		_ADR	SWAP
 3458 4edc 8D2F0000 		_ADR	STORE
 3459 4ee0 DB2C0000 		_UNNEST
 3460              	
 3461              	/*********************
 3462              	    THEN	( A -- )
 3463              	 	Terminate a conditional
 3464              		branch structure.
ARM GAS  forth.s 			page 175


 3465              	*****************************/
 3466 4ee4 C44E0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3466      C4544845 
 3466      4E0000BF 
 3467 4ef0 504700BF 		_NEST
 3468 4ef4 353A0000 		_ADR	HERE
 3469 4ef8 A5300000 		_ADR	SWAP
 3470 4efc 8D2F0000 		_ADR	STORE
 3471 4f00 DB2C0000 		_UNNEST
 3472              	
 3473              	/***************************
 3474              	    AFT	 ( a -- a A )
 3475              	 	Jump to THEN in a 
 3476              		FOR-AFT-THEN-NEXT loop 
 3477              		the first time through.
 3478              	*****************************/
 3479 4f04 E84E0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3479      C3414654 
 3480 4f0c 504700BF 		_NEST
 3481 4f10 85300000 		_ADR	DROP
 3482 4f14 994E0000 		_ADR	AHEAD
 3483 4f18 BD4D0000 		_ADR	BEGIN
 3484 4f1c A5300000 		_ADR	SWAP
 3485 4f20 DB2C0000 		_UNNEST
 3486              	
 3487              	/**********************
 3488              	    ELSE	( A -- A )
 3489              	 	Start the false 
 3490              		clause in an 
 3491              		IF-ELSE-THEN structure.
 3492              	****************************/
 3493 4f24 084F0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3493      C4454C53 
 3493      450000BF 
 3494 4f30 504700BF 		_NEST
 3495 4f34 994E0000 		_ADR	AHEAD
 3496 4f38 A5300000 		_ADR	SWAP
 3497 4f3c F14E0000 		_ADR	THENN
 3498 4f40 DB2C0000 		_UNNEST
 3499              	
 3500              	/**************************
 3501              	    WHILE	( a -- A a )
 3502              	 	Conditional branch out 
 3503              		of a BEGIN-WHILE-REPEAT loop.
 3504              	*********************************/
 3505 4f44 284F0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3505      C5574849 
 3505      4C4500BF 
 3506 4f50 504700BF 		_NEST
 3507 4f54 654E0000 		_ADR	IFF
 3508 4f58 A5300000 		_ADR	SWAP
 3509 4f5c DB2C0000 		_UNNEST
 3510              	
 3511              	/***********************************
 3512              	    ABORT"	( -- //  string> )
 3513              	 	Conditional abort with an 
 3514              		error message.
ARM GAS  forth.s 			page 176


 3515              	***********************************/
 3516 4f60 484F0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3516      8641424F 
 3516      52542200 
 3517 4f6c 504700BF 		_NEST
 3518 4f70 072F0000 		_COMPI	ABORQ
 3518      B0490000 
 3518      5D510000 
 3519 4f7c 894C0000 		_ADR	STRCQ
 3520 4f80 DB2C0000 		_UNNEST
 3521              	
 3522              	/******************************
 3523              	    $"	( -- //  string> )
 3524              	 	Compile an inline 
 3525              		word literal.
 3526              	*****************************/
 3527 4f84 644F0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3527      C2242200 
 3528 4f8c 504700BF 		_NEST
 3529 4f90 072F0000 		_COMPI	STRQP
 3529      F4400000 
 3529      5D510000 
 3530 4f9c 894C0000 		_ADR	STRCQ
 3531 4fa0 DB2C0000 		_UNNEST
 3532              	
 3533              	/******************************
 3534              	    ."	( -- //  string> )
 3535              	 	Compile an inline word
 3536              		literal to be typed out 
 3537              		at run time.
 3538              	*******************************/
 3539 4fa4 884F0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3539      C22E2200 
 3540 4fac 504700BF 		_NEST
 3541 4fb0 072F0000 		_COMPI	DOTQP
 3541      10410000 
 3541      5D510000 
 3542 4fbc 894C0000 		_ADR	STRCQ
 3543 4fc0 DB2C0000 		_UNNEST
 3544              	
 3545              	/*********************
 3546              	  Name compiler
 3547              	***********************/
 3548              	
 3549              	/**************************
 3550              	    ?UNIQUE	( a -- a )
 3551              	 	Display a warning 
 3552              		message if the word 
 3553              		already exists.
 3554              	**************************/
 3555 4fc4 A84F0000 		_HEADER UNIQU,7,"?UNIQUE"
 3555      073F554E 
 3555      49515545 
 3556 4fd0 504700BF 		_NEST
 3557 4fd4 95300000 		_ADR	DUPP
 3558 4fd8 11470000 		_ADR	NAMEQ			// ?name exists
 3559 4fdc 472F0000 		_QBRAN	UNIQ1	// redefinitions are OK
ARM GAS  forth.s 			page 177


 3559      FC4F0000 
 3560 4fe4 11410000 		_DOTQP	7," reDef "		// but warn the user
 3560      07207265 
 3560      44656620 
 3561 4ff0 B9300000 		_ADR	OVER
 3562 4ff4 ED340000 		_ADR	COUNT
 3563 4ff8 75400000 		_ADR	TYPEE			// just in case its not planned
 3564              	UNIQ1:
 3565 4ffc 85300000 		_ADR	DROP
 3566 5000 DB2C0000 		_UNNEST
 3567              	
 3568              	/***********************
 3569              	    $,n	 ( na -- )
 3570              	 	Build a new dictionary 
 3571              		name using the data at na.
 3572              	hidden word 
 3573              	*******************************/
 3574              	SNAME:
 3575 5004 504700BF 		_NEST
 3576 5008 95300000 		_ADR	DUPP			//  na na
 3577 500c C12F0000 		_ADR	CAT			//  ?null input
 3578 5010 472F0000 		_QBRAN	SNAM1
 3578      4C500000 
 3579 5018 D14F0000 		_ADR	UNIQU			//  na
 3580 501c 8D360000 		_ADR	LAST			//  na last
 3581 5020 A12F0000 		_ADR	AT			//  na la
 3582 5024 ED4B0000 		_ADR	COMMA			//  na
 3583 5028 95300000 		_ADR	DUPP			//  na na
 3584 502c 8D360000 		_ADR	LAST			//  na na last
 3585 5030 8D2F0000 		_ADR	STORE			//  na , save na for vocabulary link
 3586 5034 ED340000 		_ADR	COUNT			//  na+1 count
 3587 5038 59310000 		_ADR	PLUS			//  na+1+count
 3588 503c 81390000 		_ADR	ALGND			//  word boundary
 3589 5040 61360000 		_ADR	CPP
 3590 5044 8D2F0000 		_ADR	STORE			//  top of dictionary now
 3591 5048 DB2C0000 		_UNNEST
 3592              	SNAM1:
 3593 504c F5400000 		_ADR	STRQP
 3594 5050 07       		.byte	7
 3595 5051 206E616D 		.ascii " name? "
 3595      653F20
 3596 5058 85490000 		_ADR	ABORT
 3597              	
 3598              	/************************
 3599              	    $COMPILE	( a -- )
 3600              	 	Compile next word to 
 3601              		code dictionary as 
 3602              		a token or literal.
 3603              	**************************/
 3604 505c C84F0000 		_HEADER SCOMP,8,"$COMPILE"
 3604      0824434F 
 3604      4D50494C 
 3604      450000BF 
 3605 506c 504700BF 		_NEST
 3606 5070 11470000 		_ADR	NAMEQ
 3607 5074 69320000 		_ADR	QDUP	// defined?
 3608 5078 472F0000 		_QBRAN	SCOM2
ARM GAS  forth.s 			page 178


 3608      A8500000 
 3609 5080 A12F0000 		_ADR	AT
 3610 5084 072F0000 		_DOLIT	IMEDD
 3610      80000000 
 3611 508c D9300000 		_ADR	ANDD	// immediate?
 3612 5090 472F0000 		_QBRAN	SCOM1
 3612      A0500000 
 3613 5098 1D2F0000 		_ADR	EXECU
 3614 509c DB2C0000 		_UNNEST			// it's immediate, execute
 3615              	SCOM1:
 3616 50a0 5D510000 		_ADR	CALLC			// it's not immediate, compile
 3617 50a4 DB2C0000 		_UNNEST	
 3618              	SCOM2:
 3619 50a8 F53F0000 		_ADR	NUMBER 
 3620 50ac 472F0000 		_QBRAN	SCOM3
 3620      BC500000 
 3621 50b4 714C0000 		_ADR	LITER
 3622 50b8 DB2C0000 		_UNNEST			// compile number as integer
 3623              	SCOM3: // compilation abort 
 3624 50bc C5500000 		_ADR COLON_ABORT 
 3625 50c0 85490000 		_ADR	ABORT			// error
 3626              	
 3627              	/********************************
 3628              	 before aborting a compilation 
 3629              	 reset HERE and LAST
 3630              	 to previous values. 
 3631              	*******************************/
 3632              	COLON_ABORT:
 3633 50c4 504700BF 		_NEST 
 3634 50c8 8D360000 		_ADR LAST 
 3635 50cc A12F0000 		_ADR AT 
 3636 50d0 05320000 		_ADR CELLM 
 3637 50d4 95300000 		_ADR DUPP 
 3638 50d8 61360000 		_ADR CPP  
 3639 50dc 8D2F0000 		_ADR STORE 
 3640 50e0 A12F0000 		_ADR AT 
 3641 50e4 8D360000 		_ADR LAST 
 3642 50e8 8D2F0000 		_ADR STORE 
 3643 50ec 01510000 		_ADR OVERT 
 3644 50f0 DB2C0000 		_UNNEST 
 3645              	
 3646              	/*********************
 3647              	    OVERT	( -- )
 3648              	 	Link a new word 
 3649              		into the current 
 3650              		vocabulary.
 3651              	**********************/
 3652 50f4 60500000 		_HEADER OVERT,5,"OVERT"
 3652      054F5645 
 3652      525400BF 
 3653 5100 504700BF 		_NEST
 3654 5104 8D360000 		_ADR	LAST
 3655 5108 A12F0000 		_ADR	AT
 3656 510c 4D360000 		_ADR	CNTXT
 3657 5110 8D2F0000 		_ADR	STORE
 3658 5114 DB2C0000 		_UNNEST
 3659              	
ARM GAS  forth.s 			page 179


 3660              	/**********************
 3661              	    ;  ( -- )
 3662              	 	Terminate a colon
 3663              		definition.
 3664              	***********************/
 3665 5118 F8500000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3665      C13B00BF 
 3666 5120 504700BF 		_NEST
 3667 5124 072F0000 		_DOLIT	UNNEST
 3667      DA2C0000 
 3668 512c 5D510000 		_ADR	CALLC
 3669 5130 414A0000 		_ADR	LBRAC
 3670 5134 01510000 		_ADR	OVERT
 3671 5138 DB2C0000 		_UNNEST
 3672              	
 3673              	/******************
 3674              	    ]	   ( -- )
 3675              	 	Start compiling 
 3676              		the words in 
 3677              		the input stream.
 3678              	*********************/
 3679 513c 1C510000 		_HEADER RBRAC,1,"]"
 3679      015D00BF 
 3680 5144 504700BF 		_NEST
 3681 5148 072F0000 		_DOLIT	SCOMP
 3681      6C500000 
 3682 5150 21360000 		_ADR	TEVAL
 3683 5154 8D2F0000 		_ADR	STORE
 3684 5158 DB2C0000 		_UNNEST
 3685              	
 3686              	/*********************
 3687              	    BL.W	( ca -- )
 3688              	 	compile ca.
 3689              	hidden word used by compiler
 3690              	*****************************/
 3691              	CALLC:
 3692 515c 504700BF 		_NEST
 3693 5160 072F0000 		_DOLIT 1 
 3693      01000000 
 3694 5168 ED300000 		_ADR ORR 
 3695 516c ED4B0000 		_ADR COMMA  
 3696 5170 DB2C0000 		_UNNEST 
 3697              	
 3698              	
 3699              	/*************************
 3700              	 	:	( -- //  string> )
 3701              	 	Start a new colon 
 3702              		definition using 
 3703              		next word as its name.
 3704              	**************************/
 3705 5174 40510000 		_HEADER COLON,1,":"
 3705      013A00BF 
 3706 517c 504700BF 		_NEST
 3707 5180 89450000 		_ADR	TOKEN
 3708 5184 05500000 		_ADR	SNAME
 3709 5188 01510000 		_ADR    OVERT 
 3710 518c E52C0000 		_ADR	COMPI_NEST 
ARM GAS  forth.s 			page 180


 3711 5190 45510000 		_ADR	RBRAC
 3712 5194 DB2C0000 		_UNNEST
 3713              	
 3714              	/*************************
 3715              	    IMMEDIATE   ( -- )
 3716              	 	Make the last compiled 
 3717              		word an immediate word.
 3718              	***************************/
 3719 5198 78510000 		_HEADER IMMED,9,"IMMEDIATE"
 3719      09494D4D 
 3719      45444941 
 3719      544500BF 
 3720 51a8 504700BF 		_NEST
 3721 51ac 072F0000 		_DOLIT	IMEDD
 3721      80000000 
 3722 51b4 8D360000 		_ADR	LAST
 3723 51b8 A12F0000 		_ADR	AT
 3724 51bc A12F0000 		_ADR	AT
 3725 51c0 ED300000 		_ADR	ORR
 3726 51c4 8D360000 		_ADR	LAST
 3727 51c8 A12F0000 		_ADR	AT
 3728 51cc 8D2F0000 		_ADR	STORE
 3729 51d0 DB2C0000 		_UNNEST
 3730              	
 3731              	/******************
 3732              	  Defining words
 3733              	******************/
 3734              	
 3735              	/***********************************
 3736              	    CONSTANT	( u -- //  string> )
 3737              	 	Compile a new constant.
 3738              	************************************/
 3739 51d4 9C510000 		_HEADER CONST,8,"CONSTANT"
 3739      08434F4E 
 3739      5354414E 
 3739      540000BF 
 3740 51e4 504700BF 		_NEST 
 3741 51e8 89450000 		_ADR	TOKEN
 3742 51ec 05500000 		_ADR	SNAME
 3743 51f0 01510000 		_ADR	OVERT
 3744 51f4 E52C0000 		_ADR	COMPI_NEST
 3745 51f8 072F0000 		_DOLIT	DOCON
 3745      28350000 
 3746 5200 5D510000 		_ADR	CALLC
 3747 5204 ED4B0000 		_ADR	COMMA
 3748 5208 072F0000 		_DOLIT	UNNEST 
 3748      DA2C0000 
 3749 5210 5D510000 		_ADR	CALLC  
 3750 5214 DB2C0000 		_UNNEST
 3751              	
 3752              		.p2align 2 
 3753              	/****************************************
 3754              	 doDOES> ( -- a )
 3755              	 runtime action of 		 
 3756              	 leave parameter field address on stack 
 3757              	hidden word used by compiler 
 3758              	***************************************/
ARM GAS  forth.s 			page 181


 3759              	DODOES:
 3760 5218 504700BF 		_NEST 
 3761 521c CD2F0000 		_ADR	RFROM
 3762 5220 F5310000 		_ADR	CELLP 
 3763 5224 B5310000 		_ADR	ONEP  
 3764 5228 8D360000 		_ADR LAST 
 3765 522c A12F0000 		_ADR AT
 3766 5230 A9450000 		_ADR NAMET 
 3767 5234 F5310000 		_ADR CELLP 
 3768 5238 8D2F0000 		_ADR STORE  
 3769 523c DB2C0000 		_UNNEST 
 3770              	
 3771              		.p2align 2
 3772              	/**********************
 3773              	  DOES> ( -- )
 3774              	  compile time action
 3775              	*************************/
 3776 5240 D8510000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3776      C5444F45 
 3776      533E00BF 
 3777 524c 504700BF 		_NEST 
 3778 5250 072F0000 		_DOLIT DODOES 
 3778      18520000 
 3779 5258 5D510000 		_ADR CALLC 
 3780 525c 072F0000 		_DOLIT	UNNEST
 3780      DA2C0000 
 3781 5264 5D510000 		_ADR	CALLC 
 3782 5268 E52C0000 		_ADR COMPI_NEST
 3783 526c 072F0000 		_DOLIT RFROM 
 3783      CC2F0000 
 3784 5274 5D510000 		_ADR	CALLC
 3785 5278 DB2C0000 		_UNNEST 
 3786              	
 3787              	
 3788              	/****************************
 3789              	  DEFER@ ( "name" -- a )
 3790              	  return value of code field 
 3791              	  of defered function. 
 3792              	******************************/
 3793 527c 44520000 		_HEADER DEFERAT,6,"DEFER@"
 3793      06444546 
 3793      45524000 
 3794 5288 504700BF 		_NEST 
 3795 528c AD4B0000 		_ADR TICK
 3796 5290 F5310000 		_ADR CELLP 
 3797 5294 A12F0000 		_ADR AT 
 3798 5298 C5310000 		_ADR ONEM 
 3799 529c DB2C0000 		_UNNEST 
 3800              	
 3801              	/*********************************
 3802              	 DEFER! ( "name1" "name2" -- )
 3803              	 assign an action to a defered word 
 3804              	************************************/
 3805 52a0 80520000 		_HEADER DEFERSTO,6,"DEFER!"
 3805      06444546 
 3805      45522100 
 3806 52ac 504700BF 		_NEST 
ARM GAS  forth.s 			page 182


 3807 52b0 AD4B0000 		_ADR TICK 
 3808 52b4 B5310000 		_ADR ONEP 
 3809 52b8 AD4B0000 		_ADR TICK 
 3810 52bc F5310000 		_ADR CELLP 
 3811 52c0 8D2F0000 		_ADR STORE 
 3812 52c4 DB2C0000 		_UNNEST
 3813              	
 3814              	/****************************
 3815              	  DEFER ( "name" -- )
 3816              	  create a defered definition
 3817              	*****************************/
 3818 52c8 A4520000 		_HEADER DEFER,5,"DEFER"
 3818      05444546 
 3818      455200BF 
 3819 52d4 504700BF 		_NEST 
 3820 52d8 25530000 		_ADR CREAT 
 3821 52dc 072F0000 		_DOLIT UNNEST 
 3821      DA2C0000 
 3822 52e4 5D510000 		_ADR CALLC 
 3823 52e8 072F0000 		_DOLIT DEFER_NOP
 3823      0C530000 
 3824 52f0 B5310000 		_ADR ONEP 
 3825 52f4 8D360000 		_ADR LAST 
 3826 52f8 A12F0000 		_ADR AT 
 3827 52fc A9450000 		_ADR NAMET 
 3828 5300 F5310000 		_ADR CELLP 
 3829 5304 8D2F0000 		_ADR STORE 
 3830 5308 DB2C0000 		_UNNEST 
 3831              	DEFER_NOP:
 3832 530c 504700BF 		_NEST  
 3833 5310 052F0000 		_ADR NOP 
 3834 5314 DB2C0000 		_UNNEST 
 3835              	
 3836              	/******************************
 3837              	    CREATE	( -- //  string> )
 3838              	 	Compile a new array entry 
 3839              		without allocating code space.
 3840              	***********************************/
 3841 5318 CC520000 		_HEADER CREAT,6,"CREATE"
 3841      06435245 
 3841      41544500 
 3842 5324 504700BF 		_NEST 
 3843 5328 89450000 		_ADR	TOKEN
 3844 532c 05500000 		_ADR	SNAME
 3845 5330 01510000 		_ADR	OVERT
 3846 5334 E52C0000 		_ADR	COMPI_NEST 
 3847 5338 072F0000 		_DOLIT	DOVAR
 3847      1A350000 
 3848 5340 5D510000 		_ADR	CALLC
 3849 5344 DB2C0000 		_UNNEST
 3850              	
 3851              	/*******************************
 3852              	    VARIABLE	( -- //  string> )
 3853              	 	Compile a new variable 
 3854              		initialized to 0.
 3855              	***********************************/
 3856 5348 1C530000 		_HEADER VARIA,8,"VARIABLE"
ARM GAS  forth.s 			page 183


 3856      08564152 
 3856      4941424C 
 3856      450000BF 
 3857 5358 504700BF 		_NEST
 3858 535c 25530000 		_ADR	CREAT
 3859 5360 072F0000 		_DOLIT	0
 3859      00000000 
 3860 5368 ED4B0000 		_ADR	COMMA
 3861 536c 072F0000 		_DOLIT UNNEST
 3861      DA2C0000 
 3862 5374 5D510000 		_ADR	CALLC  
 3863 5378 DB2C0000 		_UNNEST
 3864              	
 3865              	
 3866              	/***********
 3867              	  Tools
 3868              	***********/
 3869              	
 3870              	/*************************
 3871              	    dm+	 ( a u -- a )
 3872              	 	Dump u bytes from a , 
 3873              		leaving a+u on the stack.
 3874              		hidden word used by DUMP 
 3875              	****************************/
 3876              	DMP:
 3877 537c 504700BF 		_NEST
 3878 5380 B9300000 		_ADR	OVER
 3879 5384 072F0000 		_DOLIT	4
 3879      04000000 
 3880 538c D9410000 		_ADR	UDOTR			// display address
 3881 5390 072F0000 		_DOLIT  0         // don't show base char 
 3881      00000000 
 3882 5398 B9350000 		_ADR    BCHR
 3883 539c 95300000 		_ADR    DUPP
 3884 53a0 A12F0000 		_ADR    AT 
 3885 53a4 11300000 		_ADR    TOR      // save original value of BCHAR 
 3886 53a8 8D2F0000 		_ADR    STORE 
 3887 53ac 21400000 		_ADR	SPACE
 3888 53b0 11300000 		_ADR	TOR			// start count down loop
 3889 53b4 6F2F0000 		_BRAN	PDUM2			// skip first pass
 3889      D4530000 
 3890              	PDUM1:
 3891 53bc 95300000 	    _ADR	DUPP
 3892 53c0 C12F0000 		_ADR	CAT
 3893 53c4 072F0000 		_DOLIT	3
 3893      03000000 
 3894 53cc D9410000 		_ADR	UDOTR			// display numeric data
 3895 53d0 B5310000 		_ADR	ONEP			// increment address
 3896              	PDUM2:
 3897 53d4 292F0000 	    _ADR	DONXT
 3898 53d8 BC530000 		.word	PDUM1	// loop till done
 3899 53dc CD2F0000 		_ADR    RFROM   // restore BCHAR value 
 3900 53e0 B9350000 		_ADR    BCHR 
 3901 53e4 8D2F0000 		_ADR    STORE 
 3902 53e8 DB2C0000 		_UNNEST
 3903              		.p2align 2 
 3904              	//    DUMP	( a u -- )
ARM GAS  forth.s 			page 184


 3905              	// 	Dump u bytes from a, in a formatted manner.
 3906              	
 3907              	/**********************
 3908              		DUMP ( a n -- )
 3909              		hex dump memory 
 3910              	*********************/
 3911 53ec 4C530000 		_HEADER DUMP,4,"DUMP"
 3911      0444554D 
 3911      500000BF 
 3912 53f8 504700BF 		_NEST
 3913 53fc 072F0000 		_DOLIT  15 
 3913      0F000000 
 3914 5404 59310000 		_ADR    PLUS 
 3915 5408 072F0000 		_DOLIT  0xFFFFFFF0 
 3915      F0FFFFFF 
 3916 5410 D9300000 		_ADR    ANDD 
 3917 5414 A5300000 		_ADR    SWAP 
 3918 5418 072F0000 		_DOLIT  0xFFFFFFFC
 3918      FCFFFFFF 
 3919 5420 D9300000 		_ADR    ANDD 
 3920 5424 A5300000 		_ADR    SWAP 
 3921 5428 A1350000 		_ADR	BASE
 3922 542c A12F0000 		_ADR	AT
 3923 5430 11300000 		_ADR	TOR
 3924 5434 193D0000 		_ADR	HEX			// save radix,set hex
 3925 5438 072F0000 		_DOLIT	16
 3925      10000000 
 3926 5440 21390000 		_ADR	SLASH			// change count to lines
 3927 5444 11300000 		_ADR	TOR
 3928 5448 6F2F0000 		_BRAN	DUMP4			// start count down loop
 3928      78540000 
 3929              	DUMP1:
 3930 5450 A9400000 	    _ADR	CR
 3931 5454 072F0000 		_DOLIT	16
 3931      10000000 
 3932 545c CD320000 		_ADR	DDUP
 3933 5460 7D530000 		_ADR	DMP			// display numeric
 3934 5464 7D320000 		_ADR	ROT
 3935 5468 7D320000 		_ADR	ROT
 3936 546c 21400000 		_ADR	SPACE
 3937 5470 21400000 		_ADR	SPACE
 3938 5474 75400000 		_ADR	TYPEE			// display printable characters
 3939              	DUMP4:
 3940 5478 292F0000 	  _DONXT	DUMP1	// loop till done
 3940      50540000 
 3941              	DUMP3:
 3942 5480 85300000 		_ADR	DROP
 3943 5484 CD2F0000 		_ADR	RFROM
 3944 5488 A1350000 		_ADR	BASE
 3945 548c 8D2F0000 		_ADR	STORE			// restore radix
 3946 5490 DB2C0000 		_UNNEST
 3947              	
 3948              	/*******************************
 3949              	   TRACE. display in hexadecimal
 3950              	   TRACE. use a different buffer 
 3951              	   than DOT  to avoid current 
 3952              	   display overwrite.
ARM GAS  forth.s 			page 185


 3953              	*******************************/ 
 3954              	TDOT: // ( u -- )
 3955 5494 504700BF 		_NEST 
 3956 5498 A1350000 		_ADR BASE 
 3957 549c A12F0000 		_ADR AT 
 3958 54a0 11300000 		_ADR TOR
 3959 54a4 193D0000 		_ADR HEX  
 3960 54a8 35360000 		_ADR HLD 
 3961 54ac A12F0000 		_ADR AT 
 3962 54b0 11300000 		_ADR TOR   // R: base *hold 
 3963 54b4 353A0000 		_ADR HERE 
 3964 54b8 072F0000 		_DOLIT 160 
 3964      A0000000 
 3965 54c0 59310000 		_ADR PLUS
 3966 54c4 95300000 		_ADR DUPP 
 3967 54c8 11300000 		_ADR TOR  
 3968 54cc 35360000 		_ADR HLD 
 3969 54d0 8D2F0000 		_ADR STORE
 3970 54d4 072F0000 		_DOLIT 0  
 3970      00000000 
 3971 54dc 693C0000 		_ADR DIGS  
 3972 54e0 85300000 		_ADR DROP
 3973 54e4 072F0000 		_DOLIT '$'
 3973      24000000 
 3974 54ec 1D3C0000 		_ADR HOLD 
 3975 54f0 35360000 		_ADR HLD 
 3976 54f4 A12F0000 		_ADR AT
 3977 54f8 CD2F0000 		_ADR RFROM   
 3978 54fc B9300000 		_ADR OVER 
 3979 5500 69310000 		_ADR SUBB 
 3980 5504 21400000 		_ADR SPACE 
 3981 5508 75400000 		_ADR TYPEE 
 3982 550c CD2F0000 		_ADR RFROM 
 3983 5510 35360000 		_ADR HLD 
 3984 5514 8D2F0000 		_ADR STORE 
 3985 5518 CD2F0000 		_ADR RFROM 
 3986 551c A1350000 		_ADR BASE 
 3987 5520 8D2F0000 		_ADR STORE 
 3988 5524 DB2C0000 		_UNNEST 
 3989              	
 3990              	/**********************
 3991              	   .S	  ( ... -- ... )
 3992              	 	Display the contents 
 3993              		of the data stack.
 3994              	*************************/
 3995 5528 F0530000 		_HEADER DOTS,2,".S"
 3995      022E5300 
 3996 5530 504700BF 		_NEST
 3997 5534 E9390000 		_ADR	DEPTH	// stack depth
 3998 5538 11300000 		_ADR	TOR		// start count down loop
 3999 553c 6F2F0000 		_BRAN	DOTS2  // skip first pass
 3999      50550000 
 4000              	DOTS1:
 4001 5544 FD2F0000 		_ADR	RAT
 4002 5548 0D3A0000 		_ADR	PICK
 4003 554c 95540000 		_ADR	TDOT // index stack, display contents
 4004              	DOTS2:
ARM GAS  forth.s 			page 186


 4005 5550 292F0000 		_DONXT	DOTS1 // loop till done
 4005      44550000 
 4006 5558 A9400000 		_ADR	CR 
 4007 555c DB2C0000 		_UNNEST
 4008              	
 4009              	RBASE: 
 4010 5560 47F8046D 		_PUSH 
 4011 5564 4FF47F46 		_MOV32 TOS,RPP 
 4011      C2F20106 
 4012 556c FDF7B2BB 		_NEXT 
 4013              	
 4014              	
 4015              	/**************************
 4016              	  R.  display return stack 
 4017              	**************************/
 4018              	RDOT: 
 4019 5570 504700BF 		_NEST 
 4020 5574 61550000 		_ADR RBASE
 4021 5578 71300000 		_ADR RPAT 
 4022 557c 69310000 		_ADR SUBB
 4023 5580 39320000 		_ADR CELLSL   
 4024 5584 072F0000 		_DOLIT 2
 4024      02000000 
 4025 558c 69310000 		_ADR SUBB 
 4026 5590 11300000 		_ADR TOR
 4027 5594 61550000 		_ADR RBASE 
 4028 5598 05320000 	1:	_ADR CELLM 
 4029 559c 95300000 		_ADR DUPP 
 4030 55a0 A12F0000 		_ADR AT 
 4031 55a4 95540000 		_ADR TDOT 
 4032 55a8 CD2F0000 		_ADR RFROM   
 4033 55ac C5310000 		_ADR ONEM 
 4034 55b0 95300000 		_ADR DUPP
 4035 55b4 11300000 		_ADR TOR 
 4036 55b8 CD330000 		_ADR ZEQUAL   
 4037 55bc 472F0000 		_QBRAN 1b
 4037      98550000 
 4038 55c4 CD2F0000 		_ADR RFROM  
 4039 55c8 A5320000 		_ADR DDROP
 4040 55cc A9400000 		_ADR CR   
 4041 55d0 DB2C0000 		_UNNEST 
 4042              	
 4043              	/**************************
 4044              		TRACE ( -- )
 4045              		display stacks content 
 4046              	**************************/
 4047 55d4 2C550000 		_HEADER TRACE,5,"TRACE"
 4047      05545241 
 4047      434500BF 
 4048 55e0 504700BF 		_NEST
 4049 55e4 A9400000 		_ADR CR 
 4050 55e8 072F0000 		_DOLIT '>' 
 4050      3E000000 
 4051 55f0 072F0000 		_DOLIT 'S'
 4051      53000000 
 4052 55f8 A52D0000 		_ADR EMIT 
 4053 55fc A52D0000 		_ADR EMIT  
ARM GAS  forth.s 			page 187


 4054 5600 31550000 		_ADR DOTS
 4055 5604 072F0000 		_DOLIT '>'
 4055      3E000000 
 4056 560c 072F0000 		_DOLIT 'R'
 4056      52000000 
 4057 5614 A52D0000 		_ADR EMIT 
 4058 5618 A52D0000 		_ADR EMIT 
 4059 561c 71550000 		_ADR RDOT 
 4060 5620 DB2C0000 		_UNNEST 
 4061              	
 4062              	
 4063              	/*****************************
 4064              	    >NAME	( ca -- na | F )
 4065              	 	Convert code address 
 4066              		to a name address.
 4067              	*****************************/
 4068 5624 D8550000 		_HEADER TNAME,5,">NAME"
 4068      053E4E41 
 4068      4D4500BF 
 4069 5630 504700BF 		_NEST
 4070 5634 11300000 		_ADR	TOR			//  
 4071 5638 4D360000 		_ADR	CNTXT			//  va
 4072 563c A12F0000 		_ADR	AT			//  na
 4073              	TNAM1:
 4074 5640 95300000 		_ADR	DUPP			//  na na
 4075 5644 472F0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4075      74560000 
 4076 564c 95300000 		_ADR	DUPP			//  na na
 4077 5650 A9450000 		_ADR	NAMET			//  na ca
 4078 5654 FD2F0000 		_ADR	RAT			//  na ca code
 4079 5658 01310000 		_ADR	XORR			//  na f --
 4080 565c 472F0000 		_QBRAN	TNAM2
 4080      74560000 
 4081 5664 05320000 		_ADR	CELLM			//  la 
 4082 5668 A12F0000 		_ADR	AT			//  next_na
 4083 566c 6F2F0000 		_BRAN	TNAM1
 4083      40560000 
 4084              	TNAM2:	
 4085 5674 CD2F0000 		_ADR	RFROM
 4086 5678 85300000 		_ADR	DROP			//  0|na --
 4087 567c DB2C0000 		_UNNEST			// 0
 4088              	
 4089              	/********************************
 4090              	    .ID	 ( na -- )
 4091              	 	Display the name at address.
 4092              	********************************/
 4093 5680 28560000 		_HEADER DOTID,3,".ID"
 4093      032E4944 
 4094 5688 504700BF 		_NEST
 4095 568c 69320000 		_ADR	QDUP			// if zero no name
 4096 5690 472F0000 		_QBRAN	DOTI1
 4096      B0560000 
 4097 5698 ED340000 		_ADR	COUNT
 4098 569c 072F0000 		_DOLIT	0x1F
 4098      1F000000 
 4099 56a4 D9300000 		_ADR	ANDD			// mask lexicon bits
 4100 56a8 75400000 		_ADR	TYPEE
ARM GAS  forth.s 			page 188


 4101 56ac DB2C0000 		_UNNEST			// display name string
 4102              	DOTI1:
 4103 56b0 11410000 		_DOTQP	9," {noName}"
 4103      09207B6E 
 4103      6F4E616D 
 4103      657D00BF 
 4104 56c0 DB2C0000 		_UNNEST
 4105              	
 4106              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4107              	.if WANT_SEE 
 4108              	/*******************************
 4109              	    SEE	 ( -- //  string> )
 4110              	 	A simple decompiler.
 4111              	*******************************/
 4112              		_HEADER SEE,3,"SEE"
 4113              		_NEST
 4114              		_ADR	TICK	//  ca --, starting address
 4115              		_ADR	CR	
 4116              		_DOLIT	20
 4117              		_ADR	TOR
 4118              	SEE1:
 4119              		_ADR	CELLP			//  a
 4120              		_ADR	DUPP			//  a a
 4121              		_ADR	DECOMP		//  a
 4122              		_DONXT	SEE1
 4123              		_ADR	DROP
 4124              		_UNNEST
 4125              	
 4126              	/*************************
 4127              	 	DECOMPILE ( a -- )
 4128              	 	Convert code in a.  
 4129              		Display name of command or as data.
 4130              	*************************************/
 4131              		_HEADER DECOMP,9,"DECOMPILE"
 4132              		_NEST
 4133              		_ADR	DUPP			//  a a
 4134              	// 	_ADR	TOR			//  a
 4135              		_ADR	AT			//  a code
 4136              		_ADR	DUPP			//  a code code
 4137              		_DOLIT	0xF800D000 //0xF800F800
 4138              		_ADR	ANDD
 4139              		_DOLIT	0xF000D000 //0xF800F000
 4140              		_ADR	EQUAL			//  a code ?
 4141              		_ADR	INVER 
 4142              		_QBRAN	DECOM2	//  not a command
 4143              		//  a valid_code --, extract address and display name
 4144              		MOVW	IP,#0xFFE
 4145              		MOV	WP,TOS
 4146              		LSL	TOS,TOS,#21		//  get bits 22-12
 4147              		ASR	TOS,TOS,#9		//  with sign extension
 4148              		LSR	WP,WP,#15		//  get bits 11-1
 4149              		AND	WP,WP,IP		//  retain only bits 11-1
 4150              		ORR	TOS,TOS,WP		//  get bits 22-1
 4151              		NOP
 4152              		_ADR	OVER			//  a offset a
 4153              		_ADR	PLUS			//  a target-4
 4154              		_ADR	CELLP			//  a target
ARM GAS  forth.s 			page 189


 4155              		_ADR	TNAME			//  a na/0 --, is it a name?
 4156              		_ADR	QDUP			//  name address or zero
 4157              		_QBRAN	DECOM1
 4158              		_ADR	SPACE			//  a na
 4159              		_ADR	DOTID			//  a --, display name
 4160              	// 	_ADR	RFROM			//  a
 4161              		_ADR	DROP
 4162              		_UNNEST
 4163              	DECOM1:	// _ADR	RFROM		//  a
 4164              		_ADR	AT			//  data
 4165              		_ADR	UDOT			//  display data
 4166              		_UNNEST
 4167              	DECOM2:
 4168              		_ADR	UDOT
 4169              	// 	_ADR	RFROM
 4170              		_ADR	DROP
 4171              		_UNNEST
 4172              	.endif 
 4173              	
 4174              	/**********************
 4175              		VLIST ( -- )
 4176              		WORDS alias 
 4177              		+ display words count 
 4178              	**********************/
 4179 56c4 84560000 		_HEADER VLIST,5,"VLIST"
 4179      05564C49 
 4179      535400BF 
 4180 56d0 504700BF 		_NEST 
 4181 56d4 F5560000 		_ADR WORDS
 4182 56d8 A9400000 		_ADR CR 
 4183 56dc 39570000 		_ADR WC
 4184 56e0 41420000 		_ADR DOT    
 4185 56e4 DB2C0000 		_UNNEST 
 4186              	
 4187              	/*********************
 4188              	    WORDS	( -- )
 4189              	 	Display the names 
 4190              		in the context vocabulary.
 4191              	*******************************/
 4192 56e8 C8560000 		_HEADER WORDS,5,"WORDS"
 4192      05574F52 
 4192      445300BF 
 4193 56f4 504700BF 		_NEST
 4194 56f8 A9400000 		_ADR	CR
 4195 56fc 4D360000 		_ADR	CNTXT
 4196 5700 A12F0000 		_ADR	AT			// only in context
 4197              	WORS1:
 4198 5704 69320000 		_ADR	QDUP			// ?at end of list
 4199 5708 472F0000 		_QBRAN	WORS2
 4199      2C570000 
 4200 5710 95300000 		_ADR	DUPP
 4201 5714 21400000 		_ADR	SPACE
 4202 5718 89560000 		_ADR	DOTID			// display a name
 4203 571c 05320000 		_ADR	CELLM
 4204 5720 A12F0000 		_ADR	AT
 4205 5724 6F2F0000 		_BRAN	WORS1
 4205      04570000 
ARM GAS  forth.s 			page 190


 4206              	WORS2:
 4207 572c DB2C0000 		_UNNEST
 4208              	
 4209              	/*****************************
 4210              		WC ( - n )
 4211              		count words in dictionary 
 4212              	******************************/
 4213 5730 EC560000 		_HEADER WC,2,"WC"
 4213      02574300 
 4214 5738 504700BF 		_NEST 
 4215 573c 072F0000 		_DOLIT 0 
 4215      00000000 
 4216 5744 8D360000 		_ADR LAST
 4217 5748 A12F0000 	1:	_ADR AT
 4218 574c 69320000 		_ADR QDUP
 4219 5750 472F0000 		_QBRAN 9f
 4219      70570000 
 4220 5758 A5300000 		_ADR SWAP
 4221 575c B5310000 		_ADR ONEP
 4222 5760 A5300000 		_ADR SWAP
 4223 5764 05320000 		_ADR CELLM
 4224 5768 6F2F0000 		_BRAN 1b
 4224      48570000 
 4225 5770 DB2C0000 	9:	_UNNEST 
 4226              	
 4227              	/*************************
 4228              		MARK <string> ( -- )
 4229              	    create forget point 
 4230              		in dictionary 
 4231              	*************************/	
 4232 5774 34570000 		_HEADER MARK,4,"MARK"
 4232      044D4152 
 4232      4B0000BF 
 4233 5780 504700BF 		_NEST
 4234 5784 25530000 		_ADR CREAT 
 4235 5788 19520000 		_ADR DODOES 
 4236 578c DB2C0000 		_UNNEST
 4237 5790 504700BF 		_NEST  
 4238 5794 CD2F0000 		_ADR RFROM 
 4239 5798 072F0000 		_DOLIT 8
 4239      08000000 
 4240 57a0 69310000 		_ADR SUBB
 4241 57a4 31560000 		_ADR TNAME
 4242 57a8 05320000 		_ADR CELLM
 4243 57ac A12F0000 		_ADR AT  
 4244 57b0 8D360000 		_ADR LAST 
 4245 57b4 8D2F0000 		_ADR STORE 
 4246 57b8 01510000 		_ADR OVERT
 4247 57bc DB2C0000 		_UNNEST 
 4248              	
 4249              	/*********************************
 4250              		ARRAY "name" ( n -- )
 4251              	    create an array of n elements 
 4252              	*********************************/
 4253 57c0 78570000 		_HEADER ARRAY,5,"ARRAY"
 4253      05415252 
 4253      415900BF 
ARM GAS  forth.s 			page 191


 4254 57cc 504700BF 		_NEST 
 4255 57d0 89450000 		_ADR	TOKEN
 4256 57d4 05500000 		_ADR	SNAME
 4257 57d8 01510000 		_ADR	OVERT
 4258 57dc E52C0000 		_ADR	COMPI_NEST
 4259 57e0 072F0000 		_DOLIT	DO_ARRAY
 4259      0C580000 
 4260 57e8 5D510000 		_ADR	CALLC
 4261 57ec 072F0000 		_DOLIT	UNNEST 
 4261      DA2C0000 
 4262 57f4 5D510000 		_ADR	CALLC  
 4263 57f8 072F0000 		_DOLIT  4 
 4263      04000000 
 4264 5800 79310000 		_ADR    STAR 
 4265 5804 D54B0000 		_ADR    ALLOT 
 4266 5808 DB2C0000 		_UNNEST 	
 4267              	
 4268              	// does> du array
 4269              	DO_ARRAY:
 4270 580c 504700BF 		_NEST  
 4271 5810 072F0000 		_DOLIT 4 
 4271      04000000 
 4272 5818 79310000 		_ADR STAR  
 4273 581c FD2F0000 		_ADR RAT  
 4274 5820 F5310000 		_ADR CELLP 
 4275 5824 59310000 		_ADR PLUS  
 4276 5828 DB2C0000 		_UNNEST 
 4277              	
 4278              	
 4279              	/****************
 4280              	  cold start
 4281              	*****************/
 4282              	
 4283              	/**********************************
 4284              	    VER	 ( -- n )
 4285              	 	Return the version 
 4286              		number of this implementation.
 4287              	hidden word used by COLD
 4288              	**********************************/
 4289              	VERSN:
 4290 582c 504700BF 		_NEST
 4291 5830 072F0000 		_DOLIT	VER*256+EXT
 4291      00010000 
 4292 5838 DB2C0000 		_UNNEST
 4293              	
 4294              	/*********************
 4295              	    hi	  ( -- )
 4296              	 	Display the sign-on 
 4297              		message.
 4298              	***********************/
 4299 583c C4570000 		_HEADER HI,2,"HI"
 4299      02484900 
 4300 5844 504700BF 		_NEST
 4301 5848 A9400000 		_ADR	CR	// initialize I/O
 4302 584c 11410000 		_DOTQP	17, "beyond Jupiter, v" 
 4302      11626579 
 4302      6F6E6420 
ARM GAS  forth.s 			page 192


 4302      4A757069 
 4302      7465722C 
 4303 5864 A1350000 		_ADR	BASE
 4304 5868 A12F0000 		_ADR	AT
 4305 586c 193D0000 		_ADR	HEX	// save radix
 4306 5870 2D580000 		_ADR	VERSN
 4307 5874 FD3B0000 		_ADR	BDIGS
 4308 5878 072F0000 		_DOLIT  0 
 4308      00000000 
 4309 5880 493C0000 		_ADR	DIG
 4310 5884 493C0000 		_ADR	DIG
 4311 5888 072F0000 		_DOLIT	'.'
 4311      2E000000 
 4312 5890 1D3C0000 		_ADR	HOLD
 4313 5894 693C0000 		_ADR	DIGS
 4314 5898 C53C0000 		_ADR	EDIGS
 4315 589c 75400000 		_ADR	TYPEE	// format version number
 4316 58a0 A1350000 		_ADR	BASE
 4317 58a4 8D2F0000 		_ADR	STORE
 4318 58a8 A9400000 		_ADR	CR
 4319 58ac DB2C0000 		_UNNEST			// restore radix
 4320              	
 4321              	/***********************
 4322              	   HI_BOTH ( -- )
 4323              	   display sign-on 
 4324              	   on both CONSOLE
 4325              	***********************/
 4326              	HI_BOTH:
 4327 58b0 504700BF 	    _NEST 
 4328 58b4 3D0A0000 		_ADR LOCAL 
 4329 58b8 6D0A0000 		_ADR CONSOLE 
 4330 58bc 45580000 		_ADR HI 
 4331 58c0 550A0000 		_ADR SERIAL 
 4332 58c4 6D0A0000 		_ADR CONSOLE 
 4333 58c8 45580000 		_ADR HI
 4334 58cc DB2C0000 		_UNNEST 
 4335              	
 4336              	/**********************
 4337              	 check if PS2 keyboard 
 4338              	 present.
 4339              	**********************/
 4340              	PS2_QUERY: 
 4341 58d0 504700BF 		_NEST 
 4342 58d4 072F0000 		_DOLIT 400 
 4342      90010000 
 4343 58dc 3D2E0000 		_ADR PAUSE
 4344 58e0 5D180000 		_ADR PS2_QKEY
 4345 58e4 472F0000 		_QBRAN 1f
 4345      00590000 
 4346 58ec 072F0000 		_DOLIT BAT_OK 
 4346      AA000000 
 4347 58f4 01310000 		_ADR XORR 
 4348 58f8 472F0000 		_QBRAN 9f 
 4348      44590000 
 4349 5900 451A0000 	1:	_ADR KBD_RST
 4350 5904 072F0000 		_DOLIT BAT_OK 
 4350      AA000000 
ARM GAS  forth.s 			page 193


 4351 590c 01310000 		_ADR XORR  
 4352 5910 472F0000 		_QBRAN 9f  
 4352      44590000 
 4353              	// no ps2 keyboard 
 4354              	// swith to serial console
 4355 5918 A9400000 		_ADR CR 
 4356 591c 11410000 		_DOTQP 25,"no PS2 keyboard detected."
 4356      196E6F20 
 4356      50533220 
 4356      6B657962 
 4356      6F617264 
 4357 593c 550A0000 		_ADR SERIAL 
 4358 5940 6D0A0000 		_ADR CONSOLE 
 4359 5944 DB2C0000 	9:	_UNNEST 
 4360              	
 4361              	/*************************
 4362              	   check PA8 to 
 4363              	   select console 
 4364              	   PA8 -> low  LOCAL 
 4365              	   PA8 -> high SERIAL 
 4366              	*************************/
 4367              	IF_SENSE:
 4368 5948 504700BF 		_NEST 
 4369 594c 3D0A0000 		_ADR LOCAL 
 4370 5950 072F0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4370      10000240 
 4371 5958 A12F0000 		_ADR AT 
 4372 595c 072F0000 		_DOLIT (1<<8)
 4372      00010000 
 4373 5964 D9300000 		_ADR ANDD 
 4374 5968 472F0000 		_QBRAN 9f 
 4374      74590000 
 4375 5970 B5310000 		_ADR ONEP 
 4376 5974 6D0A0000 	9:  _ADR CONSOLE 
 4377 5978 DB2C0000 		_UNNEST 
 4378              	
 4379              	/****************************
 4380              	   display READY on active
 4381              	   console
 4382              	***************************/
 4383              	READY:
 4384 597c 504700BF 	    _NEST 
 4385 5980 11410000 		_DOTQP 5,"READY"
 4385      05524541 
 4385      445900BF 
 4386 598c A9400000 		_ADR  CR 
 4387 5990 DB2C0000 	    _UNNEST 
 4388              	
 4389              	/********************
 4390              	    COLD	( -- )
 4391              	 	The high level cold 
 4392              		start sequence.
 4393              	**************************/
 4394 5994 40580000 		.word	LINK 
 4395              		LINK = . 
 4396 5998 04       	_LASTN:	.byte  4
 4397 5999 434F4C44 		.ascii "COLD"
ARM GAS  forth.s 			page 194


 4398 599d 0000BF   		.p2align 2	
 4399              	COLD:
 4400 59a0 00B5FAF7 		_CALL forth_init 
 4400      C9FD5DF8 
 4400      04EB
 4401 59aa DFF85CC0 		ldr IP,=COLD1 
 4402 59ae FDF791B9 		_NEXT
 4403 59b2 00BF     		.p2align 2 
 4404              	COLD1:
 4405 59b4 072F0000 		_DOLIT  0 
 4405      00000000 
 4406 59bc 712E0000 		_ADR ULED // turn off user LED 
 4407 59c0 072F0000 		_DOLIT	UZERO
 4407      64080000 
 4408 59c8 072F0000 		_DOLIT	UPP
 4408      00000020 
 4409 59d0 072F0000 		_DOLIT	ULAST-UZERO
 4409      B8000000 
 4410 59d8 D53A0000 		_ADR	MOVE 			// initialize user area
 4411 59dc 0D4B0000 		_ADR	PRESE			// initialize stack and TIB
 4412 59e0 F11C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4413 59e4 D1580000 		_ADR 	PS2_QUERY  
 4414 59e8 89350000 		_ADR	TBOOT
 4415 59ec 853A0000 		_ADR	ATEXE			// application boot
 4416 59f0 01510000 		_ADR	OVERT
 4417 59f4 49590000 		_ADR	IF_SENSE
 4418 59f8 7D590000 		_ADR    READY 
 4419 59fc 6F2F0000 		_BRAN	QUIT			// start interpretation
 4419      2C4B0000 
 4420              	COLD2:
 4421              		.p2align 2 	
 4422              	CTOP:
 4423 5a04 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4424              	
 4425              	
 4426 5a08 B4590000 	  .end 
ARM GAS  forth.s 			page 195


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 196


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 197


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 198


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 199


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 200


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 BCHAR
          macros.inc:81     *ABS*:0000000000000024 TMP
          macros.inc:82     *ABS*:0000000000000028 CSPAN
          macros.inc:83     *ABS*:000000000000002c TOIN
ARM GAS  forth.s 			page 201


          macros.inc:84     *ABS*:0000000000000030 NTIBB
          macros.inc:85     *ABS*:0000000000000034 TIBUF
             forth.s:3102   .text:0000000000004ac8 EVAL
          macros.inc:87     *ABS*:000000000000003c VHOLD
          macros.inc:88     *ABS*:0000000000000040 CTXT
          macros.inc:89     *ABS*:0000000000000044 FORTH_CTOP
          macros.inc:90     *ABS*:0000000000000048 USER_CTOP
          macros.inc:91     *ABS*:000000000000004c LASTN
          macros.inc:92     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:93     *ABS*:0000000000000050 RX_QUEUE
          macros.inc:94     *ABS*:0000000000000060 RX_HEAD
          macros.inc:95     *ABS*:0000000000000064 RX_TAIL
          macros.inc:96     *ABS*:0000000000000068 VID_CNTR
          macros.inc:97     *ABS*:000000000000006c VID_STATE
          macros.inc:98     *ABS*:0000000000000070 VID_FIELD
          macros.inc:99     *ABS*:0000000000000074 VID_BUFFER
          macros.inc:100    *ABS*:0000000000000078 KBD_STRUCT
          macros.inc:101    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:102    *ABS*:000000000000007c KBD_QUEUE
          macros.inc:103    *ABS*:000000000000008c KBD_QHEAD
          macros.inc:104    *ABS*:0000000000000090 KBD_QTAIL
          macros.inc:105    *ABS*:0000000000000094 ROW
          macros.inc:106    *ABS*:0000000000000098 COL
          macros.inc:107    *ABS*:000000000000009c BK_COLOR
          macros.inc:108    *ABS*:00000000000000a0 PEN_COLOR
          macros.inc:109    *ABS*:00000000000000a4 VFPSW
          macros.inc:110    *ABS*:00000000000000a8 VFBASE
          macros.inc:111    *ABS*:00000000000000ac TONE_DTMR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000c64 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000948 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001540 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002cd4 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3123   .text:0000000000004b0c PRESE
             forth.s:2296   .text:0000000000004110 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:0000000000002d24 CFSR
             forth.s:542    .text:0000000000003094 DUPP
             forth.s:477    .text:0000000000003010 TOR
ARM GAS  forth.s 			page 202


             forth.s:326    .text:0000000000002f06 DOLIT
             forth.s:1167   .text:00000000000035a0 BASE
             forth.s:411    .text:0000000000002f8c STORE
             forth.s:2380   .text:000000000000420c UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:448    .text:0000000000002fcc RFROM
             forth.s:577    .text:00000000000030d8 ANDD
             forth.s:367    .text:0000000000002f46 QBRAN
             forth.s:144    .text:0000000000002d48 BFAR
             forth.s:178    .text:0000000000002da4 EMIT
             forth.s:2192   .text:0000000000004020 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:0000000000002048 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2238   .text:00000000000040a8 CR
             forth.s:421    .text:0000000000002fa0 AT
             forth.s:643    .text:0000000000003168 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2398   .text:0000000000004240 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:773    .text:0000000000003268 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:634    .text:0000000000003158 PLUS
             forth.s:1080   .text:00000000000034ec COUNT
             forth.s:2220   .text:0000000000004074 TYPEE
             forth.s:917    .text:000000000000339c CLZ
             forth.s:550    .text:00000000000030a4 SWAP
             forth.s:625    .text:0000000000003148 LSHIFT
               fpu.s:123    .text:0000000000002068 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3135   .text:0000000000004b2c QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:3001   .text:0000000000004984 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
ARM GAS  forth.s 			page 203


              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:261    .text:0000000000002e70 ULED
             forth.s:1140   .text:0000000000003558 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:616    .text:0000000000003130 RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:0000000000001fea fpu_init
          ser-term.s:56     .text:0000000000000976 ser_init
             tvout.s:74     .text:0000000000000bb4 tv_init
           ps2_kbd.s:307    .text:0000000000001760 kbd_init
         spi-flash.s:41     .text:0000000000001b74 flash_spi_init
             forth.s:4399   .text:00000000000059a0 COLD
             forth.s:83     .text:0000000000002ccc NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:908    .text:000000000000091c ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:4326   .text:00000000000058b0 HI_BOTH
           ps2_kbd.s:396    .text:000000000000185c PS2_QKEY
             tvout.s:563    .text:0000000000001124 TV_EMIT
             forth.s:3039   .text:00000000000049e4 INTER
             forth.s:4396   .text:0000000000005998 _LASTN
             forth.s:4422   .text:0000000000005a04 CTOP
             forth.s:4395   .text:0000000000005998 LINK
ARM GAS  forth.s 			page 204


              init.s:913    .text:000000000000091c $d
          ser-term.s:33     .text:0000000000000948 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:00000000000009ce $d
          ser-term.s:90     .text:00000000000009d2 _SER_QKEY
          ser-term.s:90     .text:00000000000009dc SER_QKEY
          ser-term.s:110    .text:0000000000000a08 $d
          ser-term.s:110    .text:0000000000000a0c _SER_EMIT
          ser-term.s:110    .text:0000000000000a18 SER_EMIT
          ser-term.s:124    .text:0000000000000a32 $d
          ser-term.s:124    .text:0000000000000a36 _LOCAL
          ser-term.s:124    .text:0000000000000a3c $t
          ser-term.s:124    .text:0000000000000a3c LOCAL
          ser-term.s:133    .text:0000000000000a48 $d
          ser-term.s:133    .text:0000000000000a4c _SERIAL
          ser-term.s:133    .text:0000000000000a54 SERIAL
          ser-term.s:142    .text:0000000000000a60 $d
          ser-term.s:142    .text:0000000000000a64 _CONSOLE
          ser-term.s:142    .text:0000000000000a6c $t
          ser-term.s:142    .text:0000000000000a6c CONSOLE
          ser-term.s:164    .text:0000000000000a8c $d
          ser-term.s:164    .text:0000000000000a90 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000a9c ANSI_PARAM
          ser-term.s:166    .text:0000000000000aa0 $d
             forth.s:684    .text:00000000000031b4 ONEP
             forth.s:1540   .text:00000000000038e8 SLMOD
             forth.s:396    .text:0000000000002f6e BRAN
             forth.s:692    .text:00000000000031c4 ONEM
             forth.s:90     .text:0000000000002cda UNNEST
          ser-term.s:191    .text:0000000000000b0c _ANSI_ESC
          ser-term.s:191    .text:0000000000000b14 ANSI_ESC
          ser-term.s:193    .text:0000000000000b18 $d
          ser-term.s:203    .text:0000000000000b38 _SER_AT
          ser-term.s:203    .text:0000000000000b40 SER_AT
          ser-term.s:205    .text:0000000000000b44 $d
          ser-term.s:219    .text:0000000000000b74 _SER_CLS
          ser-term.s:219    .text:0000000000000b7c $t
          ser-term.s:219    .text:0000000000000b7c SER_CLS
          ser-term.s:221    .text:0000000000000b80 $d
          ser-term.s:228    .text:0000000000000ba4 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
ARM GAS  forth.s 			page 205


             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000bb4 $t
             tvout.s:150    .text:0000000000000c90 state_vsync
             tvout.s:191    .text:0000000000000ce4 state_pre_video
             tvout.s:202    .text:0000000000000cf6 state_video_out
             tvout.s:237    .text:0000000000000d54 state_post_video
             tvout.s:254    .text:0000000000000d7a tv_isr_exit
             tvout.s:180    .text:0000000000000cca sync_end
             tvout.s:246    .text:0000000000000d66 frame_end
             tvout.s:264    .text:0000000000000d7c $d
             tvout.s:264    .text:0000000000000d80 _BACKCOLOR
             tvout.s:264    .text:0000000000000d8c BACKCOLOR
             tvout.s:271    .text:0000000000000d98 $d
             tvout.s:271    .text:0000000000000d9c _PENCOLOR
             tvout.s:271    .text:0000000000000da6 $t
             tvout.s:271    .text:0000000000000da8 PENCOLOR
             tvout.s:278    .text:0000000000000db4 $d
             tvout.s:278    .text:0000000000000db8 _CURSOR_COL
             tvout.s:278    .text:0000000000000dc0 CURSOR_COL
             tvout.s:285    .text:0000000000000dcc $d
             tvout.s:285    .text:0000000000000dd0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000dd4 $t
             tvout.s:285    .text:0000000000000dd4 CURSOR_ROW
             tvout.s:292    .text:0000000000000de0 $d
             tvout.s:292    .text:0000000000000de4 _ROWY
             tvout.s:292    .text:0000000000000dea $t
             tvout.s:292    .text:0000000000000dec ROWY
             tvout.s:299    .text:0000000000000df8 $d
             tvout.s:299    .text:0000000000000dfc _COLX
             tvout.s:299    .text:0000000000000e02 $t
             tvout.s:299    .text:0000000000000e04 COLX
             tvout.s:306    .text:0000000000000e10 $d
             tvout.s:306    .text:0000000000000e14 _FONT
             tvout.s:306    .text:0000000000000e1c FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000e28 $d
             tvout.s:313    .text:0000000000000e2c _VIDBUFF
             tvout.s:313    .text:0000000000000e34 $t
             tvout.s:313    .text:0000000000000e34 VIDBUFF
             tvout.s:325    .text:0000000000000e3e $d
             tvout.s:325    .text:0000000000000e42 _PLOT
             tvout.s:325    .text:0000000000000e48 PLOT
             tvout.s:373    .text:0000000000000ecc plot_op
             tvout.s:341    .text:0000000000000e74 op_back
             tvout.s:350    .text:0000000000000e8e op_pen
ARM GAS  forth.s 			page 206


             tvout.s:359    .text:0000000000000ea8 op_invert
             tvout.s:363    .text:0000000000000eb0 op_xor
             tvout.s:373    .text:0000000000000ecc $d
             tvout.s:378    .text:0000000000000ed4 _VSYNC
             tvout.s:378    .text:0000000000000eda $t
             tvout.s:378    .text:0000000000000edc VSYNC
             tvout.s:386    .text:0000000000000ee6 $d
             tvout.s:386    .text:0000000000000eea _CLS
             tvout.s:386    .text:0000000000000eee $t
             tvout.s:386    .text:0000000000000ef0 CLS
             tvout.s:410    .text:0000000000000f32 $d
             tvout.s:410    .text:0000000000000f36 _CLRLINE
             tvout.s:410    .text:0000000000000f3e $t
             tvout.s:410    .text:0000000000000f40 CLRLINE
             tvout.s:412    .text:0000000000000f44 $d
             forth.s:652    .text:0000000000003178 STAR
             forth.s:1767   .text:0000000000003b1c FILL
             tvout.s:427    .text:0000000000000f78 _SCROLLUP
             tvout.s:427    .text:0000000000000f84 SCROLLUP
             tvout.s:429    .text:0000000000000f88 $d
             forth.s:1735   .text:0000000000003ad4 MOVE
             tvout.s:448    .text:0000000000000fd0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000fdc SCROLLDOWN
             tvout.s:450    .text:0000000000000fe0 $d
             tvout.s:467    .text:0000000000001020 _TV_CRLF
             tvout.s:467    .text:0000000000001028 $t
             tvout.s:467    .text:0000000000001028 TV_CRLF
             tvout.s:482    .text:000000000000104a $d
             tvout.s:482    .text:000000000000104e _RIGHT
             tvout.s:482    .text:0000000000001054 $t
             tvout.s:482    .text:0000000000001054 RIGHT
             tvout.s:495    .text:0000000000001068 $d
             tvout.s:495    .text:000000000000106c _LEFT
             tvout.s:495    .text:0000000000001074 LEFT
             tvout.s:511    .text:00000000000010a0 FONT_PIXEL
             tvout.s:518    .text:00000000000010b0 INCR_X
             tvout.s:525    .text:00000000000010bc NEXT_PIXEL
             tvout.s:534    .text:00000000000010c4 CHAR_ROW
             tvout.s:536    .text:00000000000010c8 $d
             forth.s:823    .text:00000000000032cc DDUP
             forth.s:468    .text:0000000000002ffc RAT
             forth.s:348    .text:0000000000002f28 DONXT
             forth.s:814    .text:00000000000032b8 TDROP
             tvout.s:551    .text:0000000000001104 CHAR_FONT
             tvout.s:552    .text:0000000000001104 $t
             tvout.s:563    .text:0000000000001118 $d
             tvout.s:563    .text:000000000000111c _TV_EMIT
             tvout.s:563    .text:0000000000001124 $t
             tvout.s:565    .text:0000000000001128 $d
             forth.s:976    .text:0000000000003418 ULESS
             tvout.s:593    .text:00000000000011ac CTRL_KEY
             forth.s:783    .text:000000000000327c ROT
             forth.s:439    .text:0000000000002fc0 CAT
             tvout.s:660    .text:0000000000001294 SHOW_CURSOR
             tvout.s:691    .text:000000000000131c HIDE_CURSOR
             forth.s:951    .text:00000000000033e0 EQUAL
             tvout.s:650    .text:0000000000001274 BACK_SPACE
ARM GAS  forth.s 			page 207


             forth.s:534    .text:0000000000003084 DROP
             tvout.s:618    .text:000000000000121c CAR_RET
             tvout.s:629    .text:0000000000001234 LN_FEED
             tvout.s:619    .text:000000000000121c $t
             tvout.s:620    .text:0000000000001220 $d
             tvout.s:630    .text:0000000000001234 $t
             tvout.s:631    .text:0000000000001238 $d
             forth.s:595    .text:0000000000003100 XORR
             tvout.s:651    .text:0000000000001274 $t
             tvout.s:652    .text:0000000000001278 $d
             tvout.s:660    .text:0000000000001288 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001294 $t
             tvout.s:663    .text:0000000000001298 $d
             forth.s:765    .text:0000000000003258 TWOSL
             forth.s:429    .text:0000000000002fac CSTOR
             forth.s:805    .text:00000000000032a4 DDROP
             tvout.s:691    .text:0000000000001310 _HIDE_CURSOR
             tvout.s:691    .text:000000000000131c $t
             tvout.s:694    .text:0000000000001320 $d
             forth.s:586    .text:00000000000030ec ORR
             tvout.s:704    .text:0000000000001348 _TV_AT
             tvout.s:704    .text:000000000000134e $t
             tvout.s:704    .text:0000000000001350 TV_AT
             tvout.s:719    .text:0000000000001374 $d
             tvout.s:719    .text:0000000000001378 _INPUT
             tvout.s:719    .text:000000000000137e $t
             tvout.s:719    .text:0000000000001380 INPUT
             tvout.s:721    .text:0000000000001384 $d
             forth.s:1679   .text:0000000000003a4c PAD
             forth.s:2947   .text:00000000000048d0 ACCEP
             forth.s:560    .text:00000000000030b8 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:00000000000013b0 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
ARM GAS  forth.s 			page 208


       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
ARM GAS  forth.s 			page 209


       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:00000000000013bc sc_ascii
         mcSaite.inc:100    .text:0000000000001470 shifted
         mcSaite.inc:151    .text:00000000000014d0 altchar
         mcSaite.inc:167    .text:00000000000014e0 extended
ARM GAS  forth.s 			page 210


         mcSaite.inc:191    .text:0000000000001508 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007a KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000079 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000078 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007b KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000153e $t
           ps2_kbd.s:179    .text:000000000000166a send_bit
           ps2_kbd.s:107    .text:00000000000015a0 start_bit
           ps2_kbd.s:118    .text:00000000000015c4 parity_bit
           ps2_kbd.s:125    .text:00000000000015d8 stop_bit
           ps2_kbd.s:152    .text:000000000000162e store_code
           ps2_kbd.s:253    .text:00000000000016fe do_async_key
           ps2_kbd.s:204    .text:00000000000016ae send_parity
           ps2_kbd.s:211    .text:00000000000016c0 send_stop
           ps2_kbd.s:218    .text:00000000000016ca rx_ack_bit
           ps2_kbd.s:236    .text:00000000000016ea is_async_key
           ps2_kbd.s:286    .text:000000000000174e async_keys
           ps2_kbd.s:378    .text:0000000000001834 table_scan
           ps2_kbd.s:260    .text:0000000000001710 set_async_key
           ps2_kbd.s:295    .text:000000000000175c async_jump
           ps2_kbd.s:265    .text:000000000000171e shift_key
           ps2_kbd.s:273    .text:000000000000172e set_reset
           ps2_kbd.s:268    .text:0000000000001724 ctrl_key
           ps2_kbd.s:271    .text:000000000000172a alt_key
           ps2_kbd.s:287    .text:000000000000174e $d
           ps2_kbd.s:340    .text:00000000000017dc $d
           ps2_kbd.s:340    .text:00000000000017e0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000017ea $t
           ps2_kbd.s:340    .text:00000000000017ec KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000017fc keycode
           ps2_kbd.s:365    .text:0000000000001824 wait_code
           ps2_kbd.s:396    .text:000000000000184e $d
           ps2_kbd.s:396    .text:0000000000001852 _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000018a8 inkey_exit
           ps2_kbd.s:418    .text:00000000000018ac pause_key
           ps2_kbd.s:427    .text:00000000000018c2 do_modifiers
           ps2_kbd.s:436    .text:00000000000018da shift_down
           ps2_kbd.s:440    .text:00000000000018e0 altchar_down
           ps2_kbd.s:444    .text:00000000000018e6 ctrl_down
           ps2_kbd.s:452    .text:0000000000001902 do_capslock
           ps2_kbd.s:478    .text:0000000000001926 kbd_send
           ps2_kbd.s:553    .text:0000000000001a1a kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001a38 $d
           ps2_kbd.s:567    .text:0000000000001a3c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001a44 $t
           ps2_kbd.s:567    .text:0000000000001a44 KBD_RST
ARM GAS  forth.s 			page 211


           ps2_kbd.s:591    .text:0000000000001a8e $d
           ps2_kbd.s:591    .text:0000000000001a92 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001a9a $t
           ps2_kbd.s:591    .text:0000000000001a9c KBD_LED
           ps2_kbd.s:616    .text:0000000000001af0 $d
           ps2_kbd.s:616    .text:0000000000001af4 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001b00 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001b2a $d
           ps2_kbd.s:633    .text:0000000000001b2e _WKEY
           ps2_kbd.s:633    .text:0000000000001b38 WKEY
           ps2_kbd.s:635    .text:0000000000001b3c $d
           ps2_kbd.s:640    .text:0000000000001b54 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001b74 $t
         spi-flash.s:85     .text:0000000000001c16 $d
         spi-flash.s:85     .text:0000000000001c1a _CHIP_SEL
         spi-flash.s:85     .text:0000000000001c24 CHIP_SEL
         spi-flash.s:97     .text:0000000000001c42 $d
         spi-flash.s:97     .text:0000000000001c46 _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001c50 $t
         spi-flash.s:97     .text:0000000000001c50 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001c7e $d
         spi-flash.s:113    .text:0000000000001c82 _RD_BYTE
         spi-flash.s:113    .text:0000000000001c8a $t
         spi-flash.s:113    .text:0000000000001c8c RD_BYTE
         spi-flash.s:133    .text:0000000000001cb4 $d
         spi-flash.s:133    .text:0000000000001cb8 _WR_BYTE
         spi-flash.s:133    .text:0000000000001cc0 $t
         spi-flash.s:133    .text:0000000000001cc0 WR_BYTE
         spi-flash.s:151    .text:0000000000001ce4 $d
         spi-flash.s:151    .text:0000000000001ce8 _WR_DIS
         spi-flash.s:151    .text:0000000000001cf0 WR_DIS
         spi-flash.s:153    .text:0000000000001cf4 $d
         spi-flash.s:163    .text:0000000000001d10 _WR_ENBL
         spi-flash.s:163    .text:0000000000001d18 $t
         spi-flash.s:163    .text:0000000000001d18 WR_ENBL
         spi-flash.s:165    .text:0000000000001d1c $d
         spi-flash.s:175    .text:0000000000001d38 _RD_SR
         spi-flash.s:175    .text:0000000000001d3e $t
         spi-flash.s:175    .text:0000000000001d40 RD_SR
         spi-flash.s:177    .text:0000000000001d44 $d
         spi-flash.s:185    .text:0000000000001d68 sr_cmd
         spi-flash.s:191    .text:0000000000001d6f _SEND_ADR
         spi-flash.s:191    .text:0000000000001d78 $t
         spi-flash.s:191    .text:0000000000001d78 SEND_ADR
         spi-flash.s:193    .text:0000000000001d7c $d
         spi-flash.s:208    .text:0000000000001db0 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001dba $t
         spi-flash.s:208    .text:0000000000001dbc WAIT_DONE
         spi-flash.s:210    .text:0000000000001dc0 $d
         spi-flash.s:223    .text:0000000000001df0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001dfa $t
         spi-flash.s:223    .text:0000000000001dfc ERASE_BLK
         spi-flash.s:225    .text:0000000000001e00 $d
ARM GAS  forth.s 			page 212


         spi-flash.s:238    .text:0000000000001e28 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001e34 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001e38 $d
         spi-flash.s:256    .text:0000000000001e68 _RD_BLK
         spi-flash.s:256    .text:0000000000001e70 RD_BLK
         spi-flash.s:258    .text:0000000000001e74 $d
         spi-flash.s:278    .text:0000000000001ebc _WR_BLK
         spi-flash.s:278    .text:0000000000001ec4 WR_BLK
         spi-flash.s:280    .text:0000000000001ec8 $d
             forth.s:2460   .text:00000000000042e8 HDOT
         spi-flash.s:316    .text:0000000000001f20 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001f2c $t
         spi-flash.s:316    .text:0000000000001f2c SEARCH_FILE
         spi-flash.s:319    .text:0000000000001f30 $d
         spi-flash.s:325    .text:0000000000001f38 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001f44 ERASE_FILE
         spi-flash.s:328    .text:0000000000001f48 $d
         spi-flash.s:334    .text:0000000000001f50 _DIR
         spi-flash.s:334    .text:0000000000001f54 $t
         spi-flash.s:334    .text:0000000000001f54 DIR
         spi-flash.s:337    .text:0000000000001f58 $d
         spi-flash.s:343    .text:0000000000001f60 _SAVE
         spi-flash.s:343    .text:0000000000001f68 SAVE
         spi-flash.s:346    .text:0000000000001f6c $d
         spi-flash.s:352    .text:0000000000001f74 _LOAD
         spi-flash.s:352    .text:0000000000001f7c LOAD
         spi-flash.s:355    .text:0000000000001f80 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001fa8 p10
               fpu.s:59     .text:0000000000001fd4 _PWR10
               fpu.s:59     .text:0000000000001fda $t
               fpu.s:59     .text:0000000000001fdc PWR10
               fpu.s:90     .text:0000000000002008 $d
               fpu.s:90     .text:000000000000200c _FDI
               fpu.s:90     .text:0000000000002010 $t
               fpu.s:90     .text:0000000000002010 FDI
               fpu.s:100    .text:0000000000002022 $d
               fpu.s:100    .text:0000000000002026 _FEI
               fpu.s:100    .text:000000000000202a $t
               fpu.s:100    .text:000000000000202c FEI
               fpu.s:110    .text:000000000000203e $d
               fpu.s:110    .text:0000000000002042 _FPSCR
               fpu.s:110    .text:0000000000002048 $t
               fpu.s:123    .text:0000000000002058 $d
               fpu.s:123    .text:000000000000205c _CLR_FPSCR
               fpu.s:123    .text:0000000000002066 $t
               fpu.s:136    .text:0000000000002080 $d
               fpu.s:136    .text:0000000000002084 _TOS0
               fpu.s:136    .text:0000000000002088 $t
               fpu.s:136    .text:0000000000002088 TOS0
               fpu.s:145    .text:0000000000002094 $d
               fpu.s:145    .text:0000000000002098 _TOS1
               fpu.s:145    .text:000000000000209c $t
               fpu.s:145    .text:000000000000209c TOS1
ARM GAS  forth.s 			page 213


               fpu.s:154    .text:00000000000020a8 $d
               fpu.s:154    .text:00000000000020ac _TOS2
               fpu.s:154    .text:00000000000020b0 $t
               fpu.s:154    .text:00000000000020b0 TOS2
               fpu.s:163    .text:00000000000020bc $d
               fpu.s:163    .text:00000000000020c0 _S0FROM
               fpu.s:163    .text:00000000000020c4 $t
               fpu.s:163    .text:00000000000020c4 S0FROM
               fpu.s:172    .text:00000000000020d0 $d
               fpu.s:172    .text:00000000000020d4 _S1FROM
               fpu.s:172    .text:00000000000020d8 $t
               fpu.s:172    .text:00000000000020d8 S1FROM
               fpu.s:181    .text:00000000000020e4 $d
               fpu.s:181    .text:00000000000020e8 _S2FROM
               fpu.s:181    .text:00000000000020ec $t
               fpu.s:181    .text:00000000000020ec S2FROM
               fpu.s:192    .text:00000000000020f8 $d
               fpu.s:192    .text:00000000000020fc _FTOS
               fpu.s:192    .text:0000000000002100 $t
               fpu.s:192    .text:0000000000002100 FTOS
               fpu.s:202    .text:0000000000002110 $d
               fpu.s:202    .text:0000000000002114 _TRUNC
               fpu.s:202    .text:000000000000211a $t
               fpu.s:202    .text:000000000000211c TRUNC
               fpu.s:212    .text:000000000000212c $d
               fpu.s:212    .text:0000000000002130 _STOF
               fpu.s:212    .text:0000000000002134 $t
               fpu.s:212    .text:0000000000002134 STOF
               fpu.s:222    .text:0000000000002144 $d
               fpu.s:222    .text:0000000000002148 _FPLUS
               fpu.s:222    .text:000000000000214c FPLUS
               fpu.s:235    .text:0000000000002164 $d
               fpu.s:235    .text:0000000000002168 _FSUBB
               fpu.s:235    .text:000000000000216c FSUBB
               fpu.s:249    .text:0000000000002184 $d
               fpu.s:249    .text:0000000000002188 _FSTAR
               fpu.s:249    .text:000000000000218c FSTAR
               fpu.s:262    .text:00000000000021a4 $d
               fpu.s:262    .text:00000000000021a8 _FSLH
               fpu.s:262    .text:00000000000021ac FSLH
               fpu.s:275    .text:00000000000021c4 $d
               fpu.s:275    .text:00000000000021c8 _FNEG
               fpu.s:275    .text:00000000000021d0 $t
               fpu.s:275    .text:00000000000021d0 FNEG
               fpu.s:285    .text:00000000000021e0 $d
               fpu.s:285    .text:00000000000021e4 _FABS
               fpu.s:285    .text:00000000000021ec FABS
               fpu.s:297    .text:0000000000002200 $d
               fpu.s:297    .text:0000000000002204 _SQRT
               fpu.s:297    .text:000000000000220c SQRT
               fpu.s:307    .text:000000000000221c $d
               fpu.s:307    .text:0000000000002220 _FZLESS
               fpu.s:307    .text:0000000000002224 $t
               fpu.s:307    .text:0000000000002224 FZLESS
               fpu.s:319    .text:000000000000223c $d
               fpu.s:319    .text:0000000000002240 _FGREAT
               fpu.s:319    .text:0000000000002244 FGREAT
ARM GAS  forth.s 			page 214


               fpu.s:321    .text:0000000000002248 $d
             forth.s:891    .text:0000000000003364 INVER
               fpu.s:330    .text:000000000000225c _FLESS
               fpu.s:330    .text:0000000000002260 FLESS
               fpu.s:332    .text:0000000000002264 $d
               fpu.s:340    .text:0000000000002274 _FMIN
               fpu.s:340    .text:000000000000227c FMIN
               fpu.s:342    .text:0000000000002280 $d
               fpu.s:353    .text:00000000000022a4 _FMAX
               fpu.s:353    .text:00000000000022ac FMAX
               fpu.s:355    .text:00000000000022b0 $d
               fpu.s:368    .text:00000000000022d4 _FSIGN
               fpu.s:368    .text:00000000000022da $t
               fpu.s:368    .text:00000000000022dc FSIGN
               fpu.s:379    .text:00000000000022f0 $d
               fpu.s:379    .text:00000000000022f4 _FEXP
               fpu.s:379    .text:00000000000022fc FEXP
               fpu.s:390    .text:0000000000002314 $d
               fpu.s:390    .text:0000000000002318 _FMANT
               fpu.s:390    .text:000000000000231e $t
               fpu.s:390    .text:0000000000002320 FMANT
               fpu.s:403    .text:000000000000233c $d
               fpu.s:403    .text:0000000000002340 _PI
               fpu.s:403    .text:0000000000002344 PI
               fpu.s:412    .text:0000000000002354 $d
               fpu.s:412    .text:0000000000002358 _LN2
               fpu.s:412    .text:000000000000235c $t
               fpu.s:412    .text:000000000000235c LN2
               fpu.s:421    .text:000000000000236c $d
               fpu.s:421    .text:0000000000002370 _LN10
               fpu.s:421    .text:0000000000002378 LN10
               fpu.s:431    .text:0000000000002388 $d
               fpu.s:431    .text:000000000000238c _LOG2
               fpu.s:431    .text:0000000000002394 LOG2
               fpu.s:441    .text:00000000000023a4 $d
               fpu.s:441    .text:00000000000023a8 _LOG2TO10
               fpu.s:441    .text:00000000000023b0 $t
               fpu.s:441    .text:00000000000023b0 LOG2TO10
               fpu.s:443    .text:00000000000023b4 $d
             forth.s:569    .text:00000000000030c8 ZLESS
               fpu.s:453    .text:00000000000023e0 $d
            strtof.s:29     .text:00000000000023ec p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:0000000000002404 p10p2at
            strtof.s:44     .text:0000000000002404 $t
            strtof.s:45     .text:0000000000002408 $d
            strtof.s:57     .text:0000000000002428 bit_state
            strtof.s:58     .text:0000000000002428 $t
            strtof.s:59     .text:000000000000242c $d
             forth.s:1650   .text:0000000000003a0c PICK
            strtof.s:76     .text:000000000000244c mant_div
            strtof.s:77     .text:000000000000244c $t
            strtof.s:78     .text:0000000000002450 $d
            strtof.s:79     .text:0000000000002454 div_loop
ARM GAS  forth.s 			page 215


             forth.s:1012   .text:0000000000003460 GREAT
            strtof.s:107    .text:00000000000024a0 mant_mult
            strtof.s:108    .text:00000000000024a0 $t
            strtof.s:109    .text:00000000000024a4 $d
            strtof.s:110    .text:00000000000024a8 mult_loop
            strtof.s:134    .text:00000000000024f4 exp_adjust
            strtof.s:135    .text:00000000000024f4 $t
            strtof.s:136    .text:00000000000024f8 $d
             forth.s:794    .text:0000000000003290 NROT
            strtof.s:148    .text:0000000000002534 pos_exp
             forth.s:907    .text:0000000000003388 ABSS
            strtof.s:161    .text:0000000000002544 decimals
            strtof.s:162    .text:0000000000002544 $t
            strtof.s:163    .text:0000000000002548 $d
             forth.s:2026   .text:0000000000003ddc PARSE_DIGITS
             forth.s:1035   .text:000000000000348c MIN
            strtof.s:181    .text:0000000000002580 exponent
            strtof.s:182    .text:0000000000002580 $t
            strtof.s:183    .text:0000000000002584 $d
             forth.s:2078   .text:0000000000003e96 NEGQ
             forth.s:899    .text:0000000000003378 NEGAT
            strtof.s:204    .text:00000000000025c8 _FLOATQ
            strtof.s:204    .text:00000000000025d0 FLOATQ
            strtof.s:208    .text:00000000000025d4 $d
             forth.s:1982   .text:0000000000003d5c DECIM
             forth.s:1999   .text:0000000000003d80 DIGTQ
            strtof.s:245    .text:0000000000002670 must_be_dot
             forth.s:2062   .text:0000000000003e7c CHARQ
            strtof.s:290    .text:0000000000002748 error1
            strtof.s:295    .text:000000000000275c error2
            strtof.s:279    .text:0000000000002710 build_float
             forth.s:457    .text:0000000000002fe0 DRFROM
            strtof.s:300    .text:000000000000276c restore_base
              ftoa.s:28     .text:000000000000277c rounding
              ftoa.s:48     .text:00000000000027a4 _ROUND
              ftoa.s:48     .text:00000000000027aa $t
              ftoa.s:48     .text:00000000000027ac ROUND
              ftoa.s:50     .text:00000000000027b0 $d
             forth.s:1024   .text:0000000000003478 MAX
              ftoa.s:67     .text:00000000000027f0 _CSTOP
              ftoa.s:67     .text:00000000000027f4 $t
              ftoa.s:67     .text:00000000000027f4 CSTOP
              ftoa.s:79     .text:0000000000002800 ITOA
              ftoa.s:81     .text:0000000000002804 $d
             forth.s:1397   .text:00000000000037c0 STOD
             forth.s:846    .text:0000000000003300 DABS
             forth.s:1845   .text:0000000000003bfc BDIGS
             forth.s:1889   .text:0000000000003c68 DIGS
             forth.s:1907   .text:0000000000003c9c SIGN
             forth.s:1921   .text:0000000000003cc4 EDIGS
             forth.s:1715   .text:0000000000003aa4 CMOVE
              ftoa.s:114    .text:0000000000002858 _SCALEUP
              ftoa.s:114    .text:0000000000002860 $t
              ftoa.s:114    .text:0000000000002860 SCALEUP
              ftoa.s:116    .text:0000000000002864 $d
              ftoa.s:148    .text:00000000000028c0 _SCALEDOWN
              ftoa.s:148    .text:00000000000028ca $t
ARM GAS  forth.s 			page 216


              ftoa.s:148    .text:00000000000028cc SCALEDOWN
              ftoa.s:150    .text:00000000000028d0 $d
             forth.s:381    .text:0000000000002f5a TBRAN
              ftoa.s:181    .text:0000000000002928 EPART
              ftoa.s:182    .text:0000000000002928 $t
              ftoa.s:183    .text:000000000000292c $d
              ftoa.s:206    .text:000000000000295c FPART
              ftoa.s:207    .text:000000000000295c $t
              ftoa.s:208    .text:0000000000002960 $d
              ftoa.s:255    .text:0000000000002a00 IPART
              ftoa.s:256    .text:0000000000002a00 $t
              ftoa.s:257    .text:0000000000002a04 $d
              ftoa.s:313    .text:0000000000002ac4 _FTOA
              ftoa.s:313    .text:0000000000002ac8 $t
              ftoa.s:313    .text:0000000000002ac8 FTOA
              ftoa.s:315    .text:0000000000002acc $d
              ftoa.s:365    .text:0000000000002bac nan
             forth.s:732    .text:0000000000003214 BLANK
              ftoa.s:348    .text:0000000000002b5c zdz
              ftoa.s:387    .text:0000000000002c18 infinity
              ftoa.s:412    .text:0000000000002c60 _FDOT
              ftoa.s:412    .text:0000000000002c64 FDOT
              ftoa.s:415    .text:0000000000002c68 $d
             forth.s:1668   .text:0000000000003a34 HERE
             forth.s:3194   .text:0000000000004bd4 ALLOT
             forth.s:80     .text:0000000000002ccc $t
             forth.s:103    .text:0000000000002ce4 COMPI_NEST
             forth.s:116    .text:0000000000002d02 TSTDIN
             forth.s:123    .text:0000000000002d0c TSTDOUT
             forth.s:132    .text:0000000000002d16 $d
             forth.s:132    .text:0000000000002d1a _CFSR
             forth.s:144    .text:0000000000002d3a $d
             forth.s:144    .text:0000000000002d3e _BFAR
             forth.s:156    .text:0000000000002d5e $d
             forth.s:156    .text:0000000000002d62 _QKEY
             forth.s:156    .text:0000000000002d68 QKEY
             forth.s:158    .text:0000000000002d6c $d
             forth.s:1702   .text:0000000000003a84 ATEXE
             forth.s:166    .text:0000000000002d7c _KEY
             forth.s:166    .text:0000000000002d80 $t
             forth.s:166    .text:0000000000002d80 KEY
             forth.s:168    .text:0000000000002d84 KEY1
             forth.s:169    .text:0000000000002d84 $d
             forth.s:178    .text:0000000000002d9c _EMIT
             forth.s:180    .text:0000000000002da8 $d
             forth.s:214    .text:0000000000002db8 _RAND
             forth.s:214    .text:0000000000002dc0 RAND
             forth.s:216    .text:0000000000002dc4 $d
             forth.s:1131   .text:0000000000003540 SEED
             forth.s:1553   .text:0000000000003908 MODD
             forth.s:245    .text:0000000000002e34 _PAUSE
             forth.s:245    .text:0000000000002e3a $t
             forth.s:245    .text:0000000000002e3c PAUSE
             forth.s:247    .text:0000000000002e40 $d
             forth.s:1149   .text:0000000000003570 TIMER
             forth.s:249    .text:0000000000002e48 PAUSE_LOOP
             forth.s:254    .text:0000000000002e60 PAUSE_EXIT
ARM GAS  forth.s 			page 217


             forth.s:261    .text:0000000000002e68 _ULED
             forth.s:270    .text:0000000000002e8c ULED_OFF
             forth.s:278    .text:0000000000002e90 $d
             forth.s:278    .text:0000000000002e94 _JOYSTK
             forth.s:278    .text:0000000000002e9c JOYSTK
             forth.s:280    .text:0000000000002ea0 $d
             forth.s:292    .text:0000000000002ec0 _TONE
             forth.s:292    .text:0000000000002ec8 TONE
             forth.s:318    .text:0000000000002efc $d
             forth.s:318    .text:0000000000002f00 _NOP
             forth.s:318    .text:0000000000002f04 $t
             forth.s:318    .text:0000000000002f04 NOP
             forth.s:335    .text:0000000000002f10 $d
             forth.s:335    .text:0000000000002f14 _EXECU
             forth.s:335    .text:0000000000002f1c $t
             forth.s:335    .text:0000000000002f1c EXECU
             forth.s:355    .text:0000000000002f38 NEXT1
             forth.s:373    .text:0000000000002f54 QBRAN1
             forth.s:404    .text:0000000000002f74 $d
             forth.s:404    .text:0000000000002f78 _EXIT
             forth.s:404    .text:0000000000002f80 EXIT
             forth.s:405    .text:0000000000002f80 $d
             forth.s:411    .text:0000000000002f88 _STORE
             forth.s:411    .text:0000000000002f8a $t
             forth.s:421    .text:0000000000002f98 $d
             forth.s:421    .text:0000000000002f9c _AT
             forth.s:421    .text:0000000000002f9e $t
             forth.s:429    .text:0000000000002fa4 $d
             forth.s:429    .text:0000000000002fa8 _CSTOR
             forth.s:439    .text:0000000000002fb8 $d
             forth.s:439    .text:0000000000002fbc _CAT
             forth.s:448    .text:0000000000002fc4 $d
             forth.s:448    .text:0000000000002fc8 _RFROM
             forth.s:457    .text:0000000000002fd6 $d
             forth.s:457    .text:0000000000002fda _DRFROM
             forth.s:457    .text:0000000000002fde $t
             forth.s:468    .text:0000000000002ff2 $d
             forth.s:468    .text:0000000000002ff6 _RAT
             forth.s:477    .text:0000000000003006 $d
             forth.s:477    .text:000000000000300a _TOR
             forth.s:486    .text:000000000000301a $d
             forth.s:486    .text:000000000000301e _DTOR
             forth.s:486    .text:0000000000003022 $t
             forth.s:486    .text:0000000000003024 DTOR
             forth.s:498    .text:0000000000003036 $d
             forth.s:498    .text:000000000000303a _RPSTOR
             forth.s:498    .text:000000000000303e $t
             forth.s:498    .text:0000000000003040 RPSTOR
             forth.s:507    .text:0000000000003048 $d
             forth.s:507    .text:000000000000304c _SPSTOR
             forth.s:507    .text:0000000000003050 $t
             forth.s:507    .text:0000000000003050 SPSTOR
             forth.s:516    .text:0000000000003058 $d
             forth.s:516    .text:000000000000305c _SPAT
             forth.s:516    .text:0000000000003060 $t
             forth.s:516    .text:0000000000003060 SPAT
             forth.s:525    .text:0000000000003068 $d
ARM GAS  forth.s 			page 218


             forth.s:525    .text:000000000000306c _RPAT
             forth.s:525    .text:0000000000003070 $t
             forth.s:525    .text:0000000000003070 RPAT
             forth.s:534    .text:0000000000003078 $d
             forth.s:534    .text:000000000000307c _DROP
             forth.s:542    .text:000000000000308a $d
             forth.s:542    .text:000000000000308e _DUPP
             forth.s:542    .text:0000000000003092 $t
             forth.s:550    .text:000000000000309a $d
             forth.s:550    .text:000000000000309e _SWAP
             forth.s:560    .text:00000000000030ac $d
             forth.s:560    .text:00000000000030b0 _OVER
             forth.s:569    .text:00000000000030c0 $d
             forth.s:569    .text:00000000000030c4 _ZLESS
             forth.s:577    .text:00000000000030ce $d
             forth.s:577    .text:00000000000030d2 _ANDD
             forth.s:577    .text:00000000000030d6 $t
             forth.s:586    .text:00000000000030e2 $d
             forth.s:586    .text:00000000000030e6 _ORR
             forth.s:595    .text:00000000000030f6 $d
             forth.s:595    .text:00000000000030fa _XORR
             forth.s:595    .text:00000000000030fe $t
             forth.s:604    .text:000000000000310a $d
             forth.s:604    .text:000000000000310e _UPLUS
             forth.s:604    .text:0000000000003112 $t
             forth.s:604    .text:0000000000003114 UPLUS
             forth.s:616    .text:0000000000003124 $d
             forth.s:616    .text:0000000000003128 _RSHIFT
             forth.s:625    .text:000000000000313a $d
             forth.s:625    .text:000000000000313e _LSHIFT
             forth.s:634    .text:0000000000003152 $d
             forth.s:634    .text:0000000000003156 _PLUS
             forth.s:634    .text:0000000000003158 $t
             forth.s:643    .text:0000000000003160 $d
             forth.s:643    .text:0000000000003164 _SUBB
             forth.s:643    .text:0000000000003166 $t
             forth.s:652    .text:0000000000003172 $d
             forth.s:652    .text:0000000000003176 _STAR
             forth.s:652    .text:0000000000003178 $t
             forth.s:661    .text:0000000000003182 $d
             forth.s:661    .text:0000000000003186 _UMSTA
             forth.s:661    .text:000000000000318a $t
             forth.s:661    .text:000000000000318c UMSTA
             forth.s:673    .text:0000000000003198 $d
             forth.s:673    .text:000000000000319c _MSTAR
             forth.s:673    .text:00000000000031a0 MSTAR
             forth.s:684    .text:00000000000031ac $d
             forth.s:684    .text:00000000000031b0 _ONEP
             forth.s:692    .text:00000000000031ba $d
             forth.s:692    .text:00000000000031be _ONEM
             forth.s:700    .text:00000000000031ca $d
             forth.s:700    .text:00000000000031ce _TWOP
             forth.s:700    .text:00000000000031d4 TWOP
             forth.s:708    .text:00000000000031da $d
             forth.s:708    .text:00000000000031de _TWOM
             forth.s:708    .text:00000000000031e4 TWOM
             forth.s:716    .text:00000000000031ea $d
ARM GAS  forth.s 			page 219


             forth.s:716    .text:00000000000031ee _CELLP
             forth.s:716    .text:00000000000031f4 $t
             forth.s:716    .text:00000000000031f4 CELLP
             forth.s:724    .text:00000000000031fa $d
             forth.s:724    .text:00000000000031fe _CELLM
             forth.s:724    .text:0000000000003204 $t
             forth.s:724    .text:0000000000003204 CELLM
             forth.s:732    .text:000000000000320a $d
             forth.s:732    .text:000000000000320e _BLANK
             forth.s:741    .text:000000000000321e $d
             forth.s:741    .text:0000000000003222 _CELLS
             forth.s:741    .text:0000000000003228 $t
             forth.s:741    .text:0000000000003228 CELLS
             forth.s:749    .text:000000000000322e $d
             forth.s:749    .text:0000000000003232 _CELLSL
             forth.s:749    .text:0000000000003238 $t
             forth.s:749    .text:0000000000003238 CELLSL
             forth.s:757    .text:000000000000323e $d
             forth.s:757    .text:0000000000003242 _TWOST
             forth.s:757    .text:0000000000003248 TWOST
             forth.s:765    .text:000000000000324e $d
             forth.s:765    .text:0000000000003252 _TWOSL
             forth.s:773    .text:000000000000325e $d
             forth.s:773    .text:0000000000003262 _QDUP
             forth.s:783    .text:0000000000003272 $d
             forth.s:783    .text:0000000000003276 _ROT
             forth.s:783    .text:000000000000327a $t
             forth.s:794    .text:0000000000003286 $d
             forth.s:794    .text:000000000000328a _NROT
             forth.s:805    .text:000000000000329a $d
             forth.s:805    .text:000000000000329e _DDROP
             forth.s:805    .text:00000000000032a4 $t
             forth.s:814    .text:00000000000032ae $d
             forth.s:814    .text:00000000000032b2 _TDROP
             forth.s:814    .text:00000000000032b8 $t
             forth.s:823    .text:00000000000032c2 $d
             forth.s:823    .text:00000000000032c6 _DDUP
             forth.s:833    .text:00000000000032d8 $d
             forth.s:833    .text:00000000000032dc _DPLUS
             forth.s:833    .text:00000000000032e0 DPLUS
             forth.s:846    .text:00000000000032f4 $d
             forth.s:846    .text:00000000000032f8 _DABS
             forth.s:862    .text:000000000000331c $d
             forth.s:862    .text:0000000000003320 _UDGREAT
             forth.s:862    .text:0000000000003324 $t
             forth.s:862    .text:0000000000003324 UDGREAT
             forth.s:879    .text:0000000000003340 $d
             forth.s:879    .text:0000000000003344 _DZEQUAL
             forth.s:879    .text:0000000000003348 $t
             forth.s:879    .text:0000000000003348 DZEQUAL
             forth.s:891    .text:000000000000335a $d
             forth.s:891    .text:000000000000335e _INVER
             forth.s:891    .text:0000000000003362 $t
             forth.s:899    .text:000000000000336a $d
             forth.s:899    .text:000000000000336e _NEGAT
             forth.s:907    .text:000000000000337e $d
             forth.s:907    .text:0000000000003382 _ABSS
ARM GAS  forth.s 			page 220


             forth.s:907    .text:0000000000003386 $t
             forth.s:917    .text:0000000000003392 $d
             forth.s:917    .text:0000000000003396 _CLZ
             forth.s:917    .text:000000000000339a $t
             forth.s:925    .text:00000000000033a2 $d
             forth.s:925    .text:00000000000033a6 _CTZ
             forth.s:925    .text:00000000000033aa $t
             forth.s:925    .text:00000000000033ac CTZ
             forth.s:940    .text:00000000000033c4 $d
             forth.s:940    .text:00000000000033c8 _ZEQUAL
             forth.s:940    .text:00000000000033cc ZEQUAL
             forth.s:951    .text:00000000000033da $d
             forth.s:951    .text:00000000000033de _EQUAL
             forth.s:951    .text:00000000000033e0 $t
             forth.s:963    .text:00000000000033f0 $d
             forth.s:963    .text:00000000000033f4 _DIFF
             forth.s:963    .text:00000000000033f8 DIFF
             forth.s:976    .text:0000000000003410 $d
             forth.s:976    .text:0000000000003414 _ULESS
             forth.s:988    .text:0000000000003428 $d
             forth.s:988    .text:000000000000342c _LESS
             forth.s:988    .text:000000000000342e $t
             forth.s:988    .text:0000000000003430 LESS
             forth.s:1000   .text:0000000000003440 $d
             forth.s:1000   .text:0000000000003444 _UGREAT
             forth.s:1000   .text:0000000000003448 UGREAT
             forth.s:1012   .text:0000000000003458 $d
             forth.s:1012   .text:000000000000345c _GREAT
             forth.s:1012   .text:000000000000345e $t
             forth.s:1024   .text:0000000000003470 $d
             forth.s:1024   .text:0000000000003474 _MAX
             forth.s:1024   .text:0000000000003478 $t
             forth.s:1035   .text:0000000000003484 $d
             forth.s:1035   .text:0000000000003488 _MIN
             forth.s:1035   .text:000000000000348c $t
             forth.s:1046   .text:0000000000003498 $d
             forth.s:1046   .text:000000000000349c _PSTOR
             forth.s:1046   .text:00000000000034a0 PSTOR
             forth.s:1058   .text:00000000000034b0 $d
             forth.s:1058   .text:00000000000034b4 _DSTOR
             forth.s:1058   .text:00000000000034b8 DSTOR
             forth.s:1070   .text:00000000000034cc $d
             forth.s:1070   .text:00000000000034d0 _DAT
             forth.s:1070   .text:00000000000034d4 DAT
             forth.s:1080   .text:00000000000034e0 $d
             forth.s:1080   .text:00000000000034e4 _COUNT
             forth.s:1080   .text:00000000000034ea $t
             forth.s:1090   .text:00000000000034fa $d
             forth.s:1090   .text:00000000000034fe _DNEGA
             forth.s:1090   .text:0000000000003506 $t
             forth.s:1090   .text:0000000000003508 DNEGA
             forth.s:1107   .text:000000000000351a DOVAR
             forth.s:1118   .text:0000000000003528 DOCON
             forth.s:1131   .text:0000000000003534 $d
             forth.s:1131   .text:0000000000003538 _SEED
             forth.s:1140   .text:000000000000354c $d
             forth.s:1140   .text:0000000000003550 _MSEC
ARM GAS  forth.s 			page 221


             forth.s:1149   .text:0000000000003564 $d
             forth.s:1149   .text:0000000000003568 _TIMER
             forth.s:1149   .text:000000000000356e $t
             forth.s:1158   .text:000000000000357c $d
             forth.s:1158   .text:0000000000003580 _TBOOT
             forth.s:1158   .text:0000000000003586 $t
             forth.s:1158   .text:0000000000003588 TBOOT
             forth.s:1167   .text:0000000000003594 $d
             forth.s:1167   .text:0000000000003598 _BASE
             forth.s:1177   .text:00000000000035ac $d
             forth.s:1177   .text:00000000000035b0 _BCHR
             forth.s:1177   .text:00000000000035b6 $t
             forth.s:1177   .text:00000000000035b8 BCHR
             forth.s:1187   .text:00000000000035c4 TEMP
             forth.s:1196   .text:00000000000035d0 $d
             forth.s:1196   .text:00000000000035d4 _SPAN
             forth.s:1196   .text:00000000000035dc SPAN
             forth.s:1205   .text:00000000000035e8 $d
             forth.s:1205   .text:00000000000035ec _INN
             forth.s:1205   .text:00000000000035f0 $t
             forth.s:1205   .text:00000000000035f0 INN
             forth.s:1215   .text:00000000000035fc $d
             forth.s:1215   .text:0000000000003600 _NTIB
             forth.s:1215   .text:0000000000003608 NTIB
             forth.s:1224   .text:0000000000003614 $d
             forth.s:1224   .text:0000000000003618 _TEVAL
             forth.s:1224   .text:000000000000361e $t
             forth.s:1224   .text:0000000000003620 TEVAL
             forth.s:1234   .text:000000000000362c $d
             forth.s:1234   .text:0000000000003630 _HLD
             forth.s:1234   .text:0000000000003634 $t
             forth.s:1234   .text:0000000000003634 HLD
             forth.s:1244   .text:0000000000003640 $d
             forth.s:1244   .text:0000000000003644 _CNTXT
             forth.s:1244   .text:000000000000364c $t
             forth.s:1244   .text:000000000000364c CNTXT
             forth.s:1245   .text:000000000000364c CRRNT
             forth.s:1255   .text:0000000000003658 $d
             forth.s:1255   .text:000000000000365c _CPP
             forth.s:1255   .text:0000000000003660 CPP
             forth.s:1265   .text:000000000000366c $d
             forth.s:1265   .text:0000000000003670 _FCP
             forth.s:1265   .text:0000000000003674 $t
             forth.s:1265   .text:0000000000003674 FCP
             forth.s:1275   .text:0000000000003680 $d
             forth.s:1275   .text:0000000000003684 _LAST
             forth.s:1275   .text:000000000000368c LAST
             forth.s:1289   .text:0000000000003698 $d
             forth.s:1289   .text:000000000000369c _USER_BEGIN
             forth.s:1289   .text:00000000000036a8 USER_BEGIN
             forth.s:1293   .text:00000000000036b4 USR_BGN_ADR
             forth.s:1294   .text:00000000000036b4 $d
             forth.s:1300   .text:00000000000036bc _USER_END
             forth.s:1300   .text:00000000000036c8 USER_END
             forth.s:1304   .text:00000000000036d4 USER_END_ADR
             forth.s:1305   .text:00000000000036d4 $d
             forth.s:1317   .text:00000000000036dc _WITHI
ARM GAS  forth.s 			page 222


             forth.s:1317   .text:00000000000036e4 WITHI
             forth.s:1319   .text:00000000000036e8 $d
             forth.s:1334   .text:0000000000003708 _UMMOD
             forth.s:1334   .text:0000000000003710 UMMOD
             forth.s:1338   .text:000000000000371a UMMOD0
             forth.s:1345   .text:000000000000372a UMMOD1
             forth.s:1351   .text:0000000000003734 UMMOD2
             forth.s:1364   .text:0000000000003740 $d
             forth.s:1364   .text:0000000000003744 _MSMOD
             forth.s:1364   .text:000000000000374a $t
             forth.s:1364   .text:000000000000374c MSMOD
             forth.s:1366   .text:0000000000003750 $d
             forth.s:1375   .text:0000000000003778 MMOD1
             forth.s:1382   .text:0000000000003794 MMOD2
             forth.s:1390   .text:00000000000037b4 MMOD3
             forth.s:1397   .text:00000000000037bc _STOD
             forth.s:1397   .text:00000000000037c0 $t
             forth.s:1406   .text:00000000000037cc $d
             forth.s:1406   .text:00000000000037d0 _D2STAR
             forth.s:1406   .text:00000000000037d4 $t
             forth.s:1406   .text:00000000000037d4 D2STAR
             forth.s:1418   .text:00000000000037e6 $d
             forth.s:1418   .text:00000000000037ea _D2SL
             forth.s:1418   .text:00000000000037ee $t
             forth.s:1418   .text:00000000000037f0 D2SL
             forth.s:1433   .text:00000000000037fe $d
             forth.s:1433   .text:0000000000003802 _DSLMOD
             forth.s:1433   .text:0000000000003808 $t
             forth.s:1433   .text:0000000000003808 DSLMOD
             forth.s:1469   .text:0000000000003854 $d
             forth.s:1469   .text:0000000000003858 _DSLASH
             forth.s:1469   .text:000000000000385c DSLASH
             forth.s:1471   .text:0000000000003860 $d
             forth.s:1491   .text:00000000000038a4 _DSTAR
             forth.s:1491   .text:00000000000038a8 DSTAR
             forth.s:1540   .text:00000000000038de $d
             forth.s:1540   .text:00000000000038e2 _SLMOD
             forth.s:1542   .text:00000000000038ec $d
             forth.s:1553   .text:0000000000003904 _MODD
             forth.s:1553   .text:0000000000003908 $t
             forth.s:1555   .text:000000000000390c $d
             forth.s:1564   .text:000000000000391c _SLASH
             forth.s:1564   .text:000000000000391e $t
             forth.s:1564   .text:0000000000003920 SLASH
             forth.s:1566   .text:0000000000003924 $d
             forth.s:1577   .text:0000000000003938 _SSMOD
             forth.s:1577   .text:000000000000393e $t
             forth.s:1577   .text:0000000000003940 SSMOD
             forth.s:1579   .text:0000000000003944 $d
             forth.s:1591   .text:000000000000395c _STASL
             forth.s:1591   .text:0000000000003960 STASL
             forth.s:1593   .text:0000000000003964 $d
             forth.s:1607   .text:0000000000003978 _ALGND
             forth.s:1607   .text:0000000000003980 $t
             forth.s:1607   .text:0000000000003980 ALGND
             forth.s:1618   .text:0000000000003990 $d
             forth.s:1618   .text:0000000000003994 _TCHAR
ARM GAS  forth.s 			page 223


             forth.s:1618   .text:000000000000399a $t
             forth.s:1618   .text:000000000000399c TCHAR
             forth.s:1620   .text:00000000000039a0 $d
             forth.s:1630   .text:00000000000039d8 TCHA1
             forth.s:1638   .text:00000000000039e0 _DEPTH
             forth.s:1638   .text:00000000000039e6 $t
             forth.s:1638   .text:00000000000039e8 DEPTH
             forth.s:1650   .text:0000000000003a00 $d
             forth.s:1650   .text:0000000000003a04 _PICK
             forth.s:1652   .text:0000000000003a10 $d
             forth.s:1668   .text:0000000000003a2c _HERE
             forth.s:1670   .text:0000000000003a38 $d
             forth.s:1679   .text:0000000000003a48 _PAD
             forth.s:1679   .text:0000000000003a4c $t
             forth.s:1681   .text:0000000000003a50 $d
             forth.s:1692   .text:0000000000003a68 _TIB
             forth.s:1692   .text:0000000000003a6c $t
             forth.s:1692   .text:0000000000003a6c TIB
             forth.s:1702   .text:0000000000003a76 $d
             forth.s:1702   .text:0000000000003a7a _ATEXE
             forth.s:1715   .text:0000000000003a98 $d
             forth.s:1715   .text:0000000000003a9c _CMOVE
             forth.s:1715   .text:0000000000003aa2 $t
             forth.s:1722   .text:0000000000003ab6 CMOV1
             forth.s:1719   .text:0000000000003aae CMOV0
             forth.s:1727   .text:0000000000003ac0 CMOV2
             forth.s:1735   .text:0000000000003ac8 $d
             forth.s:1735   .text:0000000000003acc _MOVE
             forth.s:1753   .text:0000000000003afe MOVE1
             forth.s:1750   .text:0000000000003afa MOVE3
             forth.s:1747   .text:0000000000003af6 MOVE0
             forth.s:1758   .text:0000000000003b08 MOVE2
             forth.s:1767   .text:0000000000003b10 $d
             forth.s:1767   .text:0000000000003b14 _FILL
             forth.s:1775   .text:0000000000003b2a FILL2
             forth.s:1771   .text:0000000000003b22 FILL1
             forth.s:1785   .text:0000000000003b32 $d
             forth.s:1785   .text:0000000000003b36 _PACKS
             forth.s:1785   .text:0000000000003b3c $t
             forth.s:1785   .text:0000000000003b3c PACKS
             forth.s:1787   .text:0000000000003b40 $d
             forth.s:1816   .text:0000000000003b98 _DIGIT
             forth.s:1816   .text:0000000000003b9e $t
             forth.s:1816   .text:0000000000003ba0 DIGIT
             forth.s:1818   .text:0000000000003ba4 $d
             forth.s:1833   .text:0000000000003bd8 _EXTRC
             forth.s:1833   .text:0000000000003be0 $t
             forth.s:1833   .text:0000000000003be0 EXTRC
             forth.s:1835   .text:0000000000003be4 $d
             forth.s:1845   .text:0000000000003bf8 _BDIGS
             forth.s:1847   .text:0000000000003c00 $d
             forth.s:1857   .text:0000000000003c14 _HOLD
             forth.s:1857   .text:0000000000003c1c HOLD
             forth.s:1859   .text:0000000000003c20 $d
             forth.s:1875   .text:0000000000003c44 _DIG
             forth.s:1875   .text:0000000000003c46 $t
             forth.s:1875   .text:0000000000003c48 DIG
ARM GAS  forth.s 			page 224


             forth.s:1877   .text:0000000000003c4c $d
             forth.s:1889   .text:0000000000003c64 _DIGS
             forth.s:1891   .text:0000000000003c6c DIGS1
             forth.s:1892   .text:0000000000003c6c $d
             forth.s:1897   .text:0000000000003c88 DIGS2
             forth.s:1907   .text:0000000000003c94 _SIGN
             forth.s:1909   .text:0000000000003ca0 $d
             forth.s:1913   .text:0000000000003cb8 SIGN1
             forth.s:1921   .text:0000000000003cc0 _EDIGS
             forth.s:1923   .text:0000000000003cc8 $d
             forth.s:1938   .text:0000000000003ce4 STRR
             forth.s:1939   .text:0000000000003ce4 $t
             forth.s:1940   .text:0000000000003ce8 $d
             forth.s:1957   .text:0000000000003d14 _HEX
             forth.s:1957   .text:0000000000003d18 $t
             forth.s:1957   .text:0000000000003d18 HEX
             forth.s:1959   .text:0000000000003d1c $d
             forth.s:1970   .text:0000000000003d34 _BIN
             forth.s:1970   .text:0000000000003d38 $t
             forth.s:1970   .text:0000000000003d38 BIN
             forth.s:1972   .text:0000000000003d3c $d
             forth.s:1982   .text:0000000000003d54 _DECIM
             forth.s:1982   .text:0000000000003d5c $t
             forth.s:1984   .text:0000000000003d60 $d
             forth.s:1999   .text:0000000000003d78 _DIGTQ
             forth.s:2001   .text:0000000000003d84 $d
             forth.s:2014   .text:0000000000003dcc DGTQ1
             forth.s:2027   .text:0000000000003ddc $t
             forth.s:2028   .text:0000000000003de0 $d
             forth.s:3019   .text:00000000000049b0 ABORQ
             forth.s:2051   .text:0000000000003e68 $d
             forth.s:2063   .text:0000000000003e7c $t
             forth.s:2080   .text:0000000000003e9a $d
             forth.s:2103   .text:0000000000003eda _INTQ
             forth.s:2103   .text:0000000000003ee0 INTQ
             forth.s:2106   .text:0000000000003ee4 $d
             forth.s:2172   .text:0000000000003fec _NUMBER
             forth.s:2172   .text:0000000000003ff4 NUMBER
             forth.s:2174   .text:0000000000003ff8 $d
             forth.s:2192   .text:0000000000004018 _SPACE
             forth.s:2192   .text:000000000000401e $t
             forth.s:2194   .text:0000000000004024 $d
             forth.s:2203   .text:0000000000004034 _SPACS
             forth.s:2203   .text:000000000000403c SPACS
             forth.s:2205   .text:0000000000004040 $d
             forth.s:2211   .text:000000000000405c CHAR2
             forth.s:2209   .text:0000000000004058 CHAR1
             forth.s:2220   .text:000000000000406c _TYPEE
             forth.s:2222   .text:0000000000004078 $d
             forth.s:2228   .text:0000000000004090 TYPE2
             forth.s:2224   .text:0000000000004084 TYPE1
             forth.s:2238   .text:00000000000040a4 _CR
             forth.s:2240   .text:00000000000040ac $d
             forth.s:2252   .text:00000000000040c8 DOSTR
             forth.s:2253   .text:00000000000040c8 $t
             forth.s:2255   .text:00000000000040cc $d
             forth.s:2273   .text:00000000000040f4 STRQP
ARM GAS  forth.s 			page 225


             forth.s:2274   .text:00000000000040f4 $t
             forth.s:2275   .text:00000000000040f8 $d
             forth.s:2284   .text:0000000000004100 DOTST
             forth.s:2285   .text:0000000000004100 $t
             forth.s:2286   .text:0000000000004104 $d
             forth.s:2297   .text:0000000000004110 $t
             forth.s:2298   .text:0000000000004114 $d
             forth.s:2310   .text:0000000000004120 LPAD
             forth.s:2311   .text:0000000000004120 $t
             forth.s:2312   .text:0000000000004124 $d
             forth.s:2343   .text:00000000000041a4 _DOTR
             forth.s:2343   .text:00000000000041a8 DOTR
             forth.s:2345   .text:00000000000041ac $d
             forth.s:2427   .text:0000000000004290 DTOA
             forth.s:2362   .text:00000000000041d4 _UDOTR
             forth.s:2362   .text:00000000000041d8 $t
             forth.s:2362   .text:00000000000041d8 UDOTR
             forth.s:2364   .text:00000000000041dc $d
             forth.s:2380   .text:0000000000004208 _UDOT
             forth.s:2382   .text:0000000000004210 $d
             forth.s:2398   .text:000000000000423c _DOT
             forth.s:2398   .text:000000000000423e $t
             forth.s:2400   .text:0000000000004244 $d
             forth.s:2408   .text:000000000000426c DOT1
             forth.s:2427   .text:000000000000428c _DTOA
             forth.s:2427   .text:0000000000004290 $t
             forth.s:2429   .text:0000000000004294 $d
             forth.s:2444   .text:00000000000042bc _DDOT
             forth.s:2444   .text:00000000000042c0 DDOT
             forth.s:2446   .text:00000000000042c4 $d
             forth.s:2460   .text:00000000000042e4 _HDOT
             forth.s:2462   .text:00000000000042ec $d
             forth.s:2484   .text:0000000000004334 _QUEST
             forth.s:2484   .text:0000000000004336 $t
             forth.s:2484   .text:0000000000004338 QUEST
             forth.s:2486   .text:000000000000433c $d
             forth.s:2500   .text:0000000000004348 PARS
             forth.s:2501   .text:0000000000004348 $t
             forth.s:2502   .text:000000000000434c $d
             forth.s:2568   .text:000000000000445c PARS8
             forth.s:2532   .text:00000000000043d0 PARS3
             forth.s:2515   .text:0000000000004388 PARS1
             forth.s:2530   .text:00000000000043cc PARS2
             forth.s:2536   .text:00000000000043dc PARS4
             forth.s:2548   .text:000000000000440c PARS5
             forth.s:2555   .text:0000000000004430 PARS6
             forth.s:2561   .text:0000000000004444 PARS7
             forth.s:2579   .text:0000000000004470 _PARSE
             forth.s:2579   .text:0000000000004476 $t
             forth.s:2579   .text:0000000000004478 PARSE
             forth.s:2581   .text:000000000000447c $d
             forth.s:2602   .text:00000000000044bc _DOTPR
             forth.s:2602   .text:00000000000044c0 DOTPR
             forth.s:2604   .text:00000000000044c4 $d
             forth.s:2615   .text:00000000000044dc _PAREN
             forth.s:2615   .text:00000000000044de $t
             forth.s:2615   .text:00000000000044e0 PAREN
ARM GAS  forth.s 			page 226


             forth.s:2617   .text:00000000000044e4 $d
             forth.s:2628   .text:00000000000044fc _BKSLA
             forth.s:2628   .text:00000000000044fe $t
             forth.s:2628   .text:0000000000004500 BKSLA
             forth.s:2630   .text:0000000000004504 $d
             forth.s:2641   .text:000000000000451c _CHAR
             forth.s:2641   .text:0000000000004524 CHAR
             forth.s:2643   .text:0000000000004528 $d
             forth.s:2653   .text:0000000000004540 _IMCHAR
             forth.s:2653   .text:0000000000004548 IMCHAR
             forth.s:2655   .text:000000000000454c $d
             forth.s:3251   .text:0000000000004c70 LITER
             forth.s:2664   .text:000000000000455c _WORDD
             forth.s:2664   .text:0000000000004564 WORDD
             forth.s:2666   .text:0000000000004568 $d
             forth.s:2678   .text:0000000000004580 _TOKEN
             forth.s:2678   .text:0000000000004586 $t
             forth.s:2678   .text:0000000000004588 TOKEN
             forth.s:2680   .text:000000000000458c $d
             forth.s:2845   .text:000000000000477c UPPER
             forth.s:2694   .text:00000000000045a0 _NAMET
             forth.s:2694   .text:00000000000045a6 $t
             forth.s:2694   .text:00000000000045a8 NAMET
             forth.s:2696   .text:00000000000045ac $d
             forth.s:2715   .text:00000000000045cc _SAMEQ
             forth.s:2715   .text:00000000000045d2 $t
             forth.s:2715   .text:00000000000045d4 SAMEQ
             forth.s:2717   .text:00000000000045d8 $d
             forth.s:2734   .text:0000000000004620 SAME2
             forth.s:2719   .text:00000000000045e4 SAME1
             forth.s:2749   .text:0000000000004634 FIND
             forth.s:2750   .text:0000000000004634 $t
             forth.s:2751   .text:0000000000004638 $d
             forth.s:2758   .text:0000000000004654 FIND1
             forth.s:2778   .text:00000000000046ac FIND6
             forth.s:2771   .text:0000000000004694 FIND2
             forth.s:2776   .text:00000000000046a4 FIND3
             forth.s:2785   .text:00000000000046c4 FIND4
             forth.s:2791   .text:00000000000046e0 FIND5
             forth.s:2807   .text:0000000000004708 _NAMEQ
             forth.s:2807   .text:000000000000470e $t
             forth.s:2807   .text:0000000000004710 NAMEQ
             forth.s:2809   .text:0000000000004714 $d
             forth.s:2824   .text:0000000000004728 _ASCIZ
             forth.s:2824   .text:000000000000472e $t
             forth.s:2824   .text:0000000000004730 ASCIZ
             forth.s:2826   .text:0000000000004734 $d
             forth.s:2845   .text:0000000000004774 _UPPER
             forth.s:2845   .text:000000000000477a $t
             forth.s:2847   .text:0000000000004780 $d
             forth.s:2878   .text:0000000000004804 BKSP
             forth.s:2879   .text:0000000000004804 $t
             forth.s:2880   .text:0000000000004808 $d
             forth.s:2894   .text:000000000000484c BACK1
             forth.s:2903   .text:0000000000004850 TAP
             forth.s:2904   .text:0000000000004850 $t
             forth.s:2905   .text:0000000000004854 $d
ARM GAS  forth.s 			page 227


             forth.s:2918   .text:000000000000486c KTAP
             forth.s:2919   .text:000000000000486c TTAP
             forth.s:2920   .text:000000000000486c $t
             forth.s:2921   .text:0000000000004870 $d
             forth.s:2935   .text:00000000000048b0 KTAP2
             forth.s:2932   .text:00000000000048a8 KTAP1
             forth.s:2947   .text:00000000000048c8 _ACCEP
             forth.s:2949   .text:00000000000048d4 $d
             forth.s:2952   .text:00000000000048e0 ACCP1
             forth.s:2968   .text:0000000000004928 ACCP4
             forth.s:2964   .text:000000000000491c ACCP2
             forth.s:2966   .text:0000000000004920 ACCP3
             forth.s:2979   .text:000000000000493c _QUERY
             forth.s:2979   .text:0000000000004942 $t
             forth.s:2979   .text:0000000000004944 QUERY
             forth.s:2981   .text:0000000000004948 $d
             forth.s:3001   .text:000000000000497c _ABORT
             forth.s:3001   .text:0000000000004982 $t
             forth.s:3003   .text:0000000000004988 ABORT1
             forth.s:3004   .text:0000000000004988 $d
             forth.s:3020   .text:00000000000049b0 $t
             forth.s:3021   .text:00000000000049b4 $d
             forth.s:3039   .text:00000000000049d8 _INTER
             forth.s:3041   .text:00000000000049e8 $d
             forth.s:3050   .text:0000000000004a24 INTE1
             forth.s:3047   .text:0000000000004a1a $t
             forth.s:3048   .text:0000000000004a1c $d
             forth.s:3054   .text:0000000000004a34 INTE2
             forth.s:3061   .text:0000000000004a3c _LBRAC
             forth.s:3061   .text:0000000000004a3e $t
             forth.s:3061   .text:0000000000004a40 LBRAC
             forth.s:3063   .text:0000000000004a44 $d
             forth.s:3073   .text:0000000000004a5c _DOTOK
             forth.s:3073   .text:0000000000004a60 $t
             forth.s:3073   .text:0000000000004a60 DOTOK
             forth.s:3075   .text:0000000000004a64 $d
             forth.s:3081   .text:0000000000004a88 DOTO1
             forth.s:3082   .text:0000000000004a88 $d
             forth.s:3090   .text:0000000000004a94 _QSTAC
             forth.s:3090   .text:0000000000004a9c QSTAC
             forth.s:3092   .text:0000000000004aa0 $d
             forth.s:3094   .text:0000000000004ab6 $t
             forth.s:3095   .text:0000000000004ab8 $d
             forth.s:3102   .text:0000000000004ac0 _EVAL
             forth.s:3104   .text:0000000000004acc EVAL1
             forth.s:3105   .text:0000000000004acc $d
             forth.s:3113   .text:0000000000004af4 EVAL2
             forth.s:3123   .text:0000000000004b04 _PRESE
             forth.s:3125   .text:0000000000004b10 $d
             forth.s:3135   .text:0000000000004b24 _QUIT
             forth.s:3136   .text:0000000000004b2c $d
             forth.s:3138   .text:0000000000004b38 QUIT1
             forth.s:3140   .text:0000000000004b3c QUIT2
             forth.s:3150   .text:0000000000004b50 _FORGET
             forth.s:3150   .text:0000000000004b58 FORGET
             forth.s:3152   .text:0000000000004b5c $d
             forth.s:3652   .text:0000000000005100 OVERT
ARM GAS  forth.s 			page 228


             forth.s:3180   .text:0000000000004ba4 $d
             forth.s:3180   .text:0000000000004ba8 _TICK
             forth.s:3180   .text:0000000000004baa $t
             forth.s:3180   .text:0000000000004bac TICK
             forth.s:3182   .text:0000000000004bb0 $d
             forth.s:3186   .text:0000000000004bc4 TICK1
             forth.s:3194   .text:0000000000004bcc _ALLOT
             forth.s:3194   .text:0000000000004bd2 $t
             forth.s:3196   .text:0000000000004bd8 $d
             forth.s:3205   .text:0000000000004be8 _COMMA
             forth.s:3205   .text:0000000000004bea $t
             forth.s:3205   .text:0000000000004bec COMMA
             forth.s:3207   .text:0000000000004bf0 $d
             forth.s:3221   .text:0000000000004c0c $d
             forth.s:3221   .text:0000000000004c10 _BCOMP
             forth.s:3221   .text:0000000000004c1a $t
             forth.s:3221   .text:0000000000004c1c BCOMP
             forth.s:3223   .text:0000000000004c20 $d
             forth.s:3233   .text:0000000000004c30 _COMPI
             forth.s:3233   .text:0000000000004c38 $t
             forth.s:3233   .text:0000000000004c38 COMPI
             forth.s:3235   .text:0000000000004c3c $d
             forth.s:3251   .text:0000000000004c68 _LITER
             forth.s:3251   .text:0000000000004c70 $t
             forth.s:3253   .text:0000000000004c74 $d
             forth.s:3691   .text:000000000000515c CALLC
             forth.s:3263   .text:0000000000004c88 STRCQ
             forth.s:3264   .text:0000000000004c88 $t
             forth.s:3265   .text:0000000000004c8c $d
             forth.s:3287   .text:0000000000004cc4 _FOR
             forth.s:3287   .text:0000000000004cc8 $t
             forth.s:3287   .text:0000000000004cc8 FOR
             forth.s:3289   .text:0000000000004ccc $d
             forth.s:3298   .text:0000000000004ce4 _DO
             forth.s:3298   .text:0000000000004ce8 DO
             forth.s:3300   .text:0000000000004cec $d
             forth.s:3306   .text:0000000000004d18 DOPLOOP
             forth.s:3307   .text:0000000000004d18 $t
             forth.s:3325   .text:0000000000004d40 $d
             forth.s:3325   .text:0000000000004d44 _PLOOP
             forth.s:3325   .text:0000000000004d4a $t
             forth.s:3325   .text:0000000000004d4c PLOOP
             forth.s:3327   .text:0000000000004d50 $d
             forth.s:3331   .text:0000000000004d64 DOLOOP
             forth.s:3332   .text:0000000000004d64 $t
             forth.s:3350   .text:0000000000004d8c $d
             forth.s:3350   .text:0000000000004d90 _LOOP
             forth.s:3350   .text:0000000000004d98 LOOP
             forth.s:3352   .text:0000000000004d9c $d
             forth.s:3363   .text:0000000000004db4 _BEGIN
             forth.s:3363   .text:0000000000004dba $t
             forth.s:3363   .text:0000000000004dbc BEGIN
             forth.s:3365   .text:0000000000004dc0 $d
             forth.s:3374   .text:0000000000004dc8 $d
             forth.s:3374   .text:0000000000004dcc _FNEXT
             forth.s:3374   .text:0000000000004dd4 FNEXT
             forth.s:3376   .text:0000000000004dd8 $d
ARM GAS  forth.s 			page 229


             forth.s:3384   .text:0000000000004df0 _I
             forth.s:3384   .text:0000000000004df2 $t
             forth.s:3384   .text:0000000000004df4 I
             forth.s:3393   .text:0000000000004e00 $d
             forth.s:3393   .text:0000000000004e04 _J
             forth.s:3393   .text:0000000000004e06 $t
             forth.s:3393   .text:0000000000004e08 J
             forth.s:3403   .text:0000000000004e14 $d
             forth.s:3403   .text:0000000000004e18 _UNTIL
             forth.s:3403   .text:0000000000004e1e $t
             forth.s:3403   .text:0000000000004e20 UNTIL
             forth.s:3405   .text:0000000000004e24 $d
             forth.s:3414   .text:0000000000004e3c _AGAIN
             forth.s:3414   .text:0000000000004e42 $t
             forth.s:3414   .text:0000000000004e44 AGAIN
             forth.s:3416   .text:0000000000004e48 $d
             forth.s:3425   .text:0000000000004e60 _IFF
             forth.s:3425   .text:0000000000004e64 IFF
             forth.s:3427   .text:0000000000004e68 $d
             forth.s:3439   .text:0000000000004e90 _AHEAD
             forth.s:3439   .text:0000000000004e96 $t
             forth.s:3439   .text:0000000000004e98 AHEAD
             forth.s:3441   .text:0000000000004e9c $d
             forth.s:3453   .text:0000000000004ec4 _REPEA
             forth.s:3453   .text:0000000000004ecc REPEA
             forth.s:3455   .text:0000000000004ed0 $d
             forth.s:3466   .text:0000000000004ee8 _THENN
             forth.s:3466   .text:0000000000004ef0 THENN
             forth.s:3468   .text:0000000000004ef4 $d
             forth.s:3479   .text:0000000000004f08 _AFT
             forth.s:3479   .text:0000000000004f0c $t
             forth.s:3479   .text:0000000000004f0c AFT
             forth.s:3481   .text:0000000000004f10 $d
             forth.s:3493   .text:0000000000004f28 _ELSEE
             forth.s:3493   .text:0000000000004f30 ELSEE
             forth.s:3495   .text:0000000000004f34 $d
             forth.s:3505   .text:0000000000004f48 _WHILE
             forth.s:3505   .text:0000000000004f4e $t
             forth.s:3505   .text:0000000000004f50 WHILE
             forth.s:3507   .text:0000000000004f54 $d
             forth.s:3516   .text:0000000000004f64 _ABRTQ
             forth.s:3516   .text:0000000000004f6c ABRTQ
             forth.s:3518   .text:0000000000004f70 $d
             forth.s:3527   .text:0000000000004f88 _STRQ
             forth.s:3527   .text:0000000000004f8c STRQ
             forth.s:3529   .text:0000000000004f90 $d
             forth.s:3539   .text:0000000000004fa8 _DOTQ
             forth.s:3539   .text:0000000000004fac DOTQ
             forth.s:3541   .text:0000000000004fb0 $d
             forth.s:3555   .text:0000000000004fc8 _UNIQU
             forth.s:3555   .text:0000000000004fd0 $t
             forth.s:3555   .text:0000000000004fd0 UNIQU
             forth.s:3557   .text:0000000000004fd4 $d
             forth.s:3564   .text:0000000000004ffc UNIQ1
             forth.s:3561   .text:0000000000004ff0 $d
             forth.s:3574   .text:0000000000005004 SNAME
             forth.s:3575   .text:0000000000005004 $t
ARM GAS  forth.s 			page 230


             forth.s:3576   .text:0000000000005008 $d
             forth.s:3592   .text:000000000000504c SNAM1
             forth.s:3604   .text:0000000000005060 _SCOMP
             forth.s:3604   .text:000000000000506c SCOMP
             forth.s:3606   .text:0000000000005070 $d
             forth.s:3618   .text:00000000000050a8 SCOM2
             forth.s:3615   .text:00000000000050a0 SCOM1
             forth.s:3623   .text:00000000000050bc SCOM3
             forth.s:3632   .text:00000000000050c4 COLON_ABORT
             forth.s:3633   .text:00000000000050c4 $t
             forth.s:3634   .text:00000000000050c8 $d
             forth.s:3652   .text:00000000000050f8 _OVERT
             forth.s:3652   .text:00000000000050fe $t
             forth.s:3654   .text:0000000000005104 $d
             forth.s:3665   .text:000000000000511c _SEMIS
             forth.s:3665   .text:000000000000511e $t
             forth.s:3665   .text:0000000000005120 SEMIS
             forth.s:3667   .text:0000000000005124 $d
             forth.s:3679   .text:0000000000005140 _RBRAC
             forth.s:3679   .text:0000000000005142 $t
             forth.s:3679   .text:0000000000005144 RBRAC
             forth.s:3681   .text:0000000000005148 $d
             forth.s:3692   .text:000000000000515c $t
             forth.s:3693   .text:0000000000005160 $d
             forth.s:3705   .text:0000000000005178 _COLON
             forth.s:3705   .text:000000000000517a $t
             forth.s:3705   .text:000000000000517c COLON
             forth.s:3707   .text:0000000000005180 $d
             forth.s:3719   .text:000000000000519c _IMMED
             forth.s:3719   .text:00000000000051a6 $t
             forth.s:3719   .text:00000000000051a8 IMMED
             forth.s:3721   .text:00000000000051ac $d
             forth.s:3739   .text:00000000000051d8 _CONST
             forth.s:3739   .text:00000000000051e4 CONST
             forth.s:3741   .text:00000000000051e8 $d
             forth.s:3752   .text:0000000000005218 $t
             forth.s:3759   .text:0000000000005218 DODOES
             forth.s:3761   .text:000000000000521c $d
             forth.s:3776   .text:0000000000005240 $d
             forth.s:3776   .text:0000000000005244 _DOES
             forth.s:3776   .text:000000000000524a $t
             forth.s:3776   .text:000000000000524c DOES
             forth.s:3778   .text:0000000000005250 $d
             forth.s:3793   .text:0000000000005280 _DEFERAT
             forth.s:3793   .text:0000000000005288 DEFERAT
             forth.s:3795   .text:000000000000528c $d
             forth.s:3805   .text:00000000000052a4 _DEFERSTO
             forth.s:3805   .text:00000000000052ac DEFERSTO
             forth.s:3807   .text:00000000000052b0 $d
             forth.s:3818   .text:00000000000052cc _DEFER
             forth.s:3818   .text:00000000000052d2 $t
             forth.s:3818   .text:00000000000052d4 DEFER
             forth.s:3820   .text:00000000000052d8 $d
             forth.s:3841   .text:0000000000005324 CREAT
             forth.s:3831   .text:000000000000530c DEFER_NOP
             forth.s:3832   .text:000000000000530c $t
             forth.s:3833   .text:0000000000005310 $d
ARM GAS  forth.s 			page 231


             forth.s:3841   .text:000000000000531c _CREAT
             forth.s:3843   .text:0000000000005328 $d
             forth.s:3856   .text:000000000000534c _VARIA
             forth.s:3856   .text:0000000000005358 VARIA
             forth.s:3858   .text:000000000000535c $d
             forth.s:3876   .text:000000000000537c DMP
             forth.s:3877   .text:000000000000537c $t
             forth.s:3878   .text:0000000000005380 $d
             forth.s:3896   .text:00000000000053d4 PDUM2
             forth.s:3890   .text:00000000000053bc PDUM1
             forth.s:3911   .text:00000000000053ec $d
             forth.s:3911   .text:00000000000053f0 _DUMP
             forth.s:3911   .text:00000000000053f8 DUMP
             forth.s:3913   .text:00000000000053fc $d
             forth.s:3939   .text:0000000000005478 DUMP4
             forth.s:3929   .text:0000000000005450 DUMP1
             forth.s:3941   .text:0000000000005480 DUMP3
             forth.s:3954   .text:0000000000005494 TDOT
             forth.s:3955   .text:0000000000005494 $t
             forth.s:3956   .text:0000000000005498 $d
             forth.s:3995   .text:000000000000552c _DOTS
             forth.s:3995   .text:0000000000005530 DOTS
             forth.s:3997   .text:0000000000005534 $d
             forth.s:4004   .text:0000000000005550 DOTS2
             forth.s:4000   .text:0000000000005544 DOTS1
             forth.s:4009   .text:0000000000005560 RBASE
             forth.s:4010   .text:0000000000005560 $t
             forth.s:4018   .text:0000000000005570 RDOT
             forth.s:4020   .text:0000000000005574 $d
             forth.s:4047   .text:00000000000055d8 _TRACE
             forth.s:4047   .text:00000000000055de $t
             forth.s:4047   .text:00000000000055e0 TRACE
             forth.s:4049   .text:00000000000055e4 $d
             forth.s:4068   .text:0000000000005628 _TNAME
             forth.s:4068   .text:000000000000562e $t
             forth.s:4068   .text:0000000000005630 TNAME
             forth.s:4070   .text:0000000000005634 $d
             forth.s:4073   .text:0000000000005640 TNAM1
             forth.s:4084   .text:0000000000005674 TNAM2
             forth.s:4093   .text:0000000000005684 _DOTID
             forth.s:4093   .text:0000000000005688 $t
             forth.s:4093   .text:0000000000005688 DOTID
             forth.s:4095   .text:000000000000568c $d
             forth.s:4102   .text:00000000000056b0 DOTI1
             forth.s:4103   .text:00000000000056be $t
             forth.s:4104   .text:00000000000056c0 $d
             forth.s:4106   *ABS*:0000000000000000 WANT_SEE
             forth.s:4179   .text:00000000000056c8 _VLIST
             forth.s:4179   .text:00000000000056ce $t
             forth.s:4179   .text:00000000000056d0 VLIST
             forth.s:4181   .text:00000000000056d4 $d
             forth.s:4192   .text:00000000000056f4 WORDS
             forth.s:4213   .text:0000000000005738 WC
             forth.s:4192   .text:00000000000056ec _WORDS
             forth.s:4192   .text:00000000000056f2 $t
             forth.s:4194   .text:00000000000056f8 $d
             forth.s:4197   .text:0000000000005704 WORS1
ARM GAS  forth.s 			page 232


             forth.s:4206   .text:000000000000572c WORS2
             forth.s:4213   .text:0000000000005734 _WC
             forth.s:4215   .text:000000000000573c $d
             forth.s:4232   .text:0000000000005778 _MARK
             forth.s:4232   .text:0000000000005780 MARK
             forth.s:4234   .text:0000000000005784 $d
             forth.s:4237   .text:0000000000005790 $t
             forth.s:4238   .text:0000000000005794 $d
             forth.s:4253   .text:00000000000057c4 _ARRAY
             forth.s:4253   .text:00000000000057ca $t
             forth.s:4253   .text:00000000000057cc ARRAY
             forth.s:4255   .text:00000000000057d0 $d
             forth.s:4269   .text:000000000000580c DO_ARRAY
             forth.s:4270   .text:000000000000580c $t
             forth.s:4271   .text:0000000000005810 $d
             forth.s:4289   .text:000000000000582c VERSN
             forth.s:4290   .text:000000000000582c $t
             forth.s:4291   .text:0000000000005830 $d
             forth.s:4299   .text:0000000000005840 _HI
             forth.s:4299   .text:0000000000005844 HI
             forth.s:4301   .text:0000000000005848 $d
             forth.s:4302   .text:0000000000005862 $t
             forth.s:4303   .text:0000000000005864 $d
             forth.s:4327   .text:00000000000058b0 $t
             forth.s:4328   .text:00000000000058b4 $d
             forth.s:4340   .text:00000000000058d0 PS2_QUERY
             forth.s:4341   .text:00000000000058d0 $t
             forth.s:4342   .text:00000000000058d4 $d
             forth.s:4356   .text:000000000000593a $t
             forth.s:4357   .text:000000000000593c $d
             forth.s:4367   .text:0000000000005948 IF_SENSE
             forth.s:4368   .text:0000000000005948 $t
             forth.s:4369   .text:000000000000594c $d
             forth.s:4383   .text:000000000000597c READY
             forth.s:4384   .text:000000000000597c $t
             forth.s:4385   .text:0000000000005980 $d
             forth.s:4385   .text:000000000000598a $t
             forth.s:4386   .text:000000000000598c $d
             forth.s:4404   .text:00000000000059b4 COLD1
             forth.s:4405   .text:00000000000059b4 $d
             forth.s:4420   .text:0000000000005a04 COLD2
             forth.s:4423   .text:0000000000005a04 $d
             forth.s:4426   .text:0000000000005a08 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
          ser-term.s:90     .text:00000000000009db $d
          ser-term.s:90     .text:00000000000009dc $t
ARM GAS  forth.s 			page 233


          ser-term.s:110    .text:0000000000000a15 $d
          ser-term.s:110    .text:0000000000000a16 $t
          ser-term.s:133    .text:0000000000000a53 $d
          ser-term.s:133    .text:0000000000000a54 $t
          ser-term.s:164    .text:0000000000000a9b $d
          ser-term.s:164    .text:0000000000000a9c $t
          ser-term.s:191    .text:0000000000000b11 $d
          ser-term.s:191    .text:0000000000000b12 $t
          ser-term.s:203    .text:0000000000000b3f $d
          ser-term.s:203    .text:0000000000000b40 $t
             tvout.s:264    .text:0000000000000d8b $d
             tvout.s:264    .text:0000000000000d8c $t
             tvout.s:278    .text:0000000000000dbf $d
             tvout.s:278    .text:0000000000000dc0 $t
             tvout.s:306    .text:0000000000000e19 $d
             tvout.s:306    .text:0000000000000e1a $t
             tvout.s:325    .text:0000000000000e47 $d
             tvout.s:325    .text:0000000000000e48 $t
             tvout.s:427    .text:0000000000000f81 $d
             tvout.s:427    .text:0000000000000f82 $t
             tvout.s:448    .text:0000000000000fdb $d
             tvout.s:448    .text:0000000000000fdc $t
             tvout.s:495    .text:0000000000001071 $d
             tvout.s:495    .text:0000000000001072 $t
           ps2_kbd.s:307    .text:000000000000175f $d
           ps2_kbd.s:307    .text:0000000000001760 $t
           ps2_kbd.s:396    .text:000000000000185b $d
           ps2_kbd.s:396    .text:000000000000185c $t
           ps2_kbd.s:616    .text:0000000000001afd $d
           ps2_kbd.s:616    .text:0000000000001afe $t
           ps2_kbd.s:633    .text:0000000000001b37 $d
           ps2_kbd.s:633    .text:0000000000001b38 $t
         spi-flash.s:85     .text:0000000000001c23 $d
         spi-flash.s:85     .text:0000000000001c24 $t
         spi-flash.s:151    .text:0000000000001cef $d
         spi-flash.s:151    .text:0000000000001cf0 $t
         spi-flash.s:238    .text:0000000000001e33 $d
         spi-flash.s:238    .text:0000000000001e34 $t
         spi-flash.s:256    .text:0000000000001e6f $d
         spi-flash.s:256    .text:0000000000001e70 $t
         spi-flash.s:278    .text:0000000000001ec3 $d
         spi-flash.s:278    .text:0000000000001ec4 $t
         spi-flash.s:325    .text:0000000000001f43 $d
         spi-flash.s:325    .text:0000000000001f44 $t
         spi-flash.s:343    .text:0000000000001f65 $d
         spi-flash.s:343    .text:0000000000001f66 $t
         spi-flash.s:352    .text:0000000000001f79 $d
         spi-flash.s:352    .text:0000000000001f7a $t
               fpu.s:222    .text:000000000000214b $d
               fpu.s:222    .text:000000000000214c $t
               fpu.s:235    .text:000000000000216b $d
               fpu.s:235    .text:000000000000216c $t
               fpu.s:249    .text:000000000000218b $d
               fpu.s:249    .text:000000000000218c $t
               fpu.s:262    .text:00000000000021ab $d
               fpu.s:262    .text:00000000000021ac $t
               fpu.s:285    .text:00000000000021e9 $d
ARM GAS  forth.s 			page 234


               fpu.s:285    .text:00000000000021ea $t
               fpu.s:297    .text:0000000000002209 $d
               fpu.s:297    .text:000000000000220a $t
               fpu.s:319    .text:0000000000002243 $d
               fpu.s:319    .text:0000000000002244 $t
               fpu.s:330    .text:000000000000225f $d
               fpu.s:330    .text:0000000000002260 $t
               fpu.s:340    .text:0000000000002279 $d
               fpu.s:340    .text:000000000000227a $t
               fpu.s:353    .text:00000000000022a9 $d
               fpu.s:353    .text:00000000000022aa $t
               fpu.s:379    .text:00000000000022f9 $d
               fpu.s:379    .text:00000000000022fa $t
               fpu.s:403    .text:0000000000002343 $d
               fpu.s:403    .text:0000000000002344 $t
               fpu.s:421    .text:0000000000002375 $d
               fpu.s:421    .text:0000000000002376 $t
               fpu.s:431    .text:0000000000002391 $d
               fpu.s:431    .text:0000000000002392 $t
            strtof.s:204    .text:00000000000025cf $d
            strtof.s:204    .text:00000000000025d0 $t
              ftoa.s:412    .text:0000000000002c63 $d
              ftoa.s:412    .text:0000000000002c64 $t
             forth.s:132    .text:0000000000002d21 $d
             forth.s:132    .text:0000000000002d22 $t
             forth.s:144    .text:0000000000002d45 $d
             forth.s:144    .text:0000000000002d46 $t
             forth.s:156    .text:0000000000002d67 $d
             forth.s:156    .text:0000000000002d68 $t
             forth.s:178    .text:0000000000002da1 $d
             forth.s:178    .text:0000000000002da2 $t
             forth.s:214    .text:0000000000002dbf $d
             forth.s:214    .text:0000000000002dc0 $t
             forth.s:261    .text:0000000000002e6d $d
             forth.s:261    .text:0000000000002e6e $t
             forth.s:278    .text:0000000000002e9b $d
             forth.s:278    .text:0000000000002e9c $t
             forth.s:292    .text:0000000000002ec5 $d
             forth.s:292    .text:0000000000002ec6 $t
             forth.s:404    .text:0000000000002f7d $d
             forth.s:404    .text:0000000000002f7e $t
             forth.s:429    .text:0000000000002fab $d
             forth.s:429    .text:0000000000002fac $t
             forth.s:439    .text:0000000000002fbf $d
             forth.s:439    .text:0000000000002fc0 $t
             forth.s:448    .text:0000000000002fcb $d
             forth.s:448    .text:0000000000002fcc $t
             forth.s:468    .text:0000000000002ff9 $d
             forth.s:468    .text:0000000000002ffa $t
             forth.s:477    .text:000000000000300d $d
             forth.s:477    .text:000000000000300e $t
             forth.s:534    .text:0000000000003081 $d
             forth.s:534    .text:0000000000003082 $t
             forth.s:550    .text:00000000000030a3 $d
             forth.s:550    .text:00000000000030a4 $t
             forth.s:560    .text:00000000000030b5 $d
             forth.s:560    .text:00000000000030b6 $t
ARM GAS  forth.s 			page 235


             forth.s:569    .text:00000000000030c7 $d
             forth.s:569    .text:00000000000030c8 $t
             forth.s:586    .text:00000000000030e9 $d
             forth.s:586    .text:00000000000030ea $t
             forth.s:616    .text:000000000000312f $d
             forth.s:616    .text:0000000000003130 $t
             forth.s:625    .text:0000000000003145 $d
             forth.s:625    .text:0000000000003146 $t
             forth.s:673    .text:000000000000319f $d
             forth.s:673    .text:00000000000031a0 $t
             forth.s:684    .text:00000000000031b3 $d
             forth.s:684    .text:00000000000031b4 $t
             forth.s:692    .text:00000000000031c1 $d
             forth.s:692    .text:00000000000031c2 $t
             forth.s:700    .text:00000000000031d1 $d
             forth.s:700    .text:00000000000031d2 $t
             forth.s:708    .text:00000000000031e1 $d
             forth.s:708    .text:00000000000031e2 $t
             forth.s:732    .text:0000000000003211 $d
             forth.s:732    .text:0000000000003212 $t
             forth.s:757    .text:0000000000003245 $d
             forth.s:757    .text:0000000000003246 $t
             forth.s:765    .text:0000000000003255 $d
             forth.s:765    .text:0000000000003256 $t
             forth.s:773    .text:0000000000003267 $d
             forth.s:773    .text:0000000000003268 $t
             forth.s:794    .text:000000000000328f $d
             forth.s:794    .text:0000000000003290 $t
             forth.s:823    .text:00000000000032cb $d
             forth.s:823    .text:00000000000032cc $t
             forth.s:833    .text:00000000000032df $d
             forth.s:833    .text:00000000000032e0 $t
             forth.s:846    .text:00000000000032fd $d
             forth.s:846    .text:00000000000032fe $t
             forth.s:899    .text:0000000000003375 $d
             forth.s:899    .text:0000000000003376 $t
             forth.s:940    .text:00000000000033cb $d
             forth.s:940    .text:00000000000033cc $t
             forth.s:963    .text:00000000000033f7 $d
             forth.s:963    .text:00000000000033f8 $t
             forth.s:976    .text:0000000000003417 $d
             forth.s:976    .text:0000000000003418 $t
             forth.s:1000   .text:0000000000003447 $d
             forth.s:1000   .text:0000000000003448 $t
             forth.s:1046   .text:000000000000349f $d
             forth.s:1046   .text:00000000000034a0 $t
             forth.s:1058   .text:00000000000034b7 $d
             forth.s:1058   .text:00000000000034b8 $t
             forth.s:1070   .text:00000000000034d3 $d
             forth.s:1070   .text:00000000000034d4 $t
             forth.s:1131   .text:000000000000353d $d
             forth.s:1131   .text:000000000000353e $t
             forth.s:1140   .text:0000000000003555 $d
             forth.s:1140   .text:0000000000003556 $t
             forth.s:1167   .text:000000000000359d $d
             forth.s:1167   .text:000000000000359e $t
             forth.s:1196   .text:00000000000035d9 $d
ARM GAS  forth.s 			page 236


             forth.s:1196   .text:00000000000035da $t
             forth.s:1215   .text:0000000000003605 $d
             forth.s:1215   .text:0000000000003606 $t
             forth.s:1255   .text:000000000000365f $d
             forth.s:1255   .text:0000000000003660 $t
             forth.s:1275   .text:0000000000003689 $d
             forth.s:1275   .text:000000000000368a $t
             forth.s:1289   .text:00000000000036a7 $d
             forth.s:1289   .text:00000000000036a8 $t
             forth.s:1300   .text:00000000000036c5 $d
             forth.s:1300   .text:00000000000036c6 $t
             forth.s:1317   .text:00000000000036e3 $d
             forth.s:1317   .text:00000000000036e4 $t
             forth.s:1334   .text:000000000000370f $d
             forth.s:1334   .text:0000000000003710 $t
             forth.s:1469   .text:000000000000385b $d
             forth.s:1469   .text:000000000000385c $t
             forth.s:1491   .text:00000000000038a7 $d
             forth.s:1491   .text:00000000000038a8 $t
             forth.s:1540   .text:00000000000038e7 $d
             forth.s:1540   .text:00000000000038e8 $t
             forth.s:1591   .text:000000000000395f $d
             forth.s:1591   .text:0000000000003960 $t
             forth.s:1650   .text:0000000000003a09 $d
             forth.s:1650   .text:0000000000003a0a $t
             forth.s:1668   .text:0000000000003a31 $d
             forth.s:1668   .text:0000000000003a32 $t
             forth.s:1702   .text:0000000000003a83 $d
             forth.s:1702   .text:0000000000003a84 $t
             forth.s:1735   .text:0000000000003ad1 $d
             forth.s:1735   .text:0000000000003ad2 $t
             forth.s:1767   .text:0000000000003b19 $d
             forth.s:1767   .text:0000000000003b1a $t
             forth.s:1845   .text:0000000000003bfb $d
             forth.s:1845   .text:0000000000003bfc $t
             forth.s:1857   .text:0000000000003c19 $d
             forth.s:1857   .text:0000000000003c1a $t
             forth.s:1889   .text:0000000000003c67 $d
             forth.s:1889   .text:0000000000003c68 $t
             forth.s:1907   .text:0000000000003c99 $d
             forth.s:1907   .text:0000000000003c9a $t
             forth.s:1921   .text:0000000000003cc3 $d
             forth.s:1921   .text:0000000000003cc4 $t
             forth.s:1999   .text:0000000000003d7f $d
             forth.s:1999   .text:0000000000003d80 $t
             forth.s:2050   .text:0000000000003e65 $d
             forth.s:2050   .text:0000000000003e66 $t
             forth.s:2103   .text:0000000000003edf $d
             forth.s:2103   .text:0000000000003ee0 $t
             forth.s:2172   .text:0000000000003ff3 $d
             forth.s:2172   .text:0000000000003ff4 $t
             forth.s:2203   .text:000000000000403b $d
             forth.s:2203   .text:000000000000403c $t
             forth.s:2220   .text:0000000000004071 $d
             forth.s:2220   .text:0000000000004072 $t
             forth.s:2238   .text:00000000000040a7 $d
             forth.s:2238   .text:00000000000040a8 $t
ARM GAS  forth.s 			page 237


             forth.s:2343   .text:00000000000041a7 $d
             forth.s:2343   .text:00000000000041a8 $t
             forth.s:2380   .text:000000000000420b $d
             forth.s:2380   .text:000000000000420c $t
             forth.s:2444   .text:00000000000042bf $d
             forth.s:2444   .text:00000000000042c0 $t
             forth.s:2460   .text:00000000000042e7 $d
             forth.s:2460   .text:00000000000042e8 $t
             forth.s:2602   .text:00000000000044bf $d
             forth.s:2602   .text:00000000000044c0 $t
             forth.s:2641   .text:0000000000004521 $d
             forth.s:2641   .text:0000000000004522 $t
             forth.s:2653   .text:0000000000004547 $d
             forth.s:2653   .text:0000000000004548 $t
             forth.s:2664   .text:0000000000004561 $d
             forth.s:2664   .text:0000000000004562 $t
             forth.s:2947   .text:00000000000048cf $d
             forth.s:2947   .text:00000000000048d0 $t
             forth.s:3039   .text:00000000000049e3 $d
             forth.s:3039   .text:00000000000049e4 $t
             forth.s:3090   .text:0000000000004a9b $d
             forth.s:3090   .text:0000000000004a9c $t
             forth.s:3102   .text:0000000000004ac5 $d
             forth.s:3102   .text:0000000000004ac6 $t
             forth.s:3123   .text:0000000000004b0b $d
             forth.s:3123   .text:0000000000004b0c $t
             forth.s:3135   .text:0000000000004b29 $d
             forth.s:3135   .text:0000000000004b2a $t
             forth.s:3150   .text:0000000000004b57 $d
             forth.s:3150   .text:0000000000004b58 $t
             forth.s:3298   .text:0000000000004ce7 $d
             forth.s:3298   .text:0000000000004ce8 $t
             forth.s:3350   .text:0000000000004d95 $d
             forth.s:3350   .text:0000000000004d96 $t
             forth.s:3374   .text:0000000000004dd1 $d
             forth.s:3374   .text:0000000000004dd2 $t
             forth.s:3425   .text:0000000000004e63 $d
             forth.s:3425   .text:0000000000004e64 $t
             forth.s:3453   .text:0000000000004ecb $d
             forth.s:3453   .text:0000000000004ecc $t
             forth.s:3466   .text:0000000000004eed $d
             forth.s:3466   .text:0000000000004eee $t
             forth.s:3493   .text:0000000000004f2d $d
             forth.s:3493   .text:0000000000004f2e $t
             forth.s:3516   .text:0000000000004f6b $d
             forth.s:3516   .text:0000000000004f6c $t
             forth.s:3527   .text:0000000000004f8b $d
             forth.s:3527   .text:0000000000004f8c $t
             forth.s:3539   .text:0000000000004fab $d
             forth.s:3539   .text:0000000000004fac $t
             forth.s:3604   .text:0000000000005069 $d
             forth.s:3604   .text:000000000000506a $t
             forth.s:3739   .text:00000000000051e1 $d
             forth.s:3739   .text:00000000000051e2 $t
             forth.s:3793   .text:0000000000005287 $d
             forth.s:3793   .text:0000000000005288 $t
             forth.s:3805   .text:00000000000052ab $d
ARM GAS  forth.s 			page 238


             forth.s:3805   .text:00000000000052ac $t
             forth.s:3841   .text:0000000000005323 $d
             forth.s:3841   .text:0000000000005324 $t
             forth.s:3856   .text:0000000000005355 $d
             forth.s:3856   .text:0000000000005356 $t
             forth.s:3911   .text:00000000000053f5 $d
             forth.s:3911   .text:00000000000053f6 $t
             forth.s:3995   .text:000000000000552f $d
             forth.s:3995   .text:0000000000005530 $t
             forth.s:4213   .text:0000000000005737 $d
             forth.s:4213   .text:0000000000005738 $t
             forth.s:4232   .text:000000000000577d $d
             forth.s:4232   .text:000000000000577e $t
             forth.s:4299   .text:0000000000005843 $d
             forth.s:4299   .text:0000000000005844 $t
             forth.s:4398   .text:000000000000599d $d
             forth.s:4398   .text:000000000000599e $t

UNDEFINED SYMBOLS
_mstack
